import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(r,e,h,m,s,a){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const Y=d(k,[["render",O],["__scopeId","data-v-5ffa3db9"]]),j=JSON.parse('[{"question":"You are planning to build a custom text editor and you want to include a feature that can automatically format JSON objects. Given a JSON object as a string, you need to format it in a more readable way by adding indentation and line breaks. The rules for formatting are as follows: - Each JSON object should be enclosed in curly braces `{}` or square brackets `[]`. - Each key and value pair inside a JSON object should be indented. - Indentation for each level should be increased by four spaces. For example, given the input `{\\"name\\":\\"John\\",\\"age\\":30,\\"cars\\":[\\"Ford\\",\\"BMW\\",\\"Fiat\\"]}`, the expected formatted output is: ``` { \\"name\\": \\"John\\", \\"age\\": 30, \\"cars\\": [ \\"Ford\\", \\"BMW\\", \\"Fiat\\" ] } ``` Your task is to write a function that takes a JSON object as a string and returns a formatted version of that JSON object as a string. # Input The input is provided as a single string, representing a valid JSON object. The length of the string is less than or equal to 10^5 characters. # Output The output should be a string representing the formatted JSON object. # Example Input: ``` {\\"name\\":\\"John\\",\\"age\\":30,\\"cars\\":[\\"Ford\\",\\"BMW\\",\\"Fiat\\"]} ``` Output: ``` { \\"name\\": \\"John\\", \\"age\\": 30, \\"cars\\": [ \\"Ford\\", \\"BMW\\", \\"Fiat\\" ] } ``` # Note - You can assume that the input JSON string is always valid and does not contain any nested JSON objects with more than 100 levels of nesting. - The JSON object will not contain any null values.","solution":"import json def format_json(json_string): Formats a JSON string to a more readable format with indentation. Args: json_string (str): A JSON object as a string. Returns: str: A formatted JSON string. parsed_json = json.loads(json_string) formatted_json = json.dumps(parsed_json, indent=4) return formatted_json"},{"question":"You are given two integers, n and k, where 1 le n, k le 10^9. Additionally, you are given a collection of n integers, representing various distinct values. Your task is to identify the maximum possible sum of any subset of these integers such that the number of elements in the subset is exactly k. You have to implement a function that takes an integer array and two integers, and returns an integer representing the maximum possible sum of a subset with exactly k elements. Your code should have the following signature: ```python def max_subset_sum(nums: List[int], n: int, k: int) -> int: # Your code here ``` **Input:** - An integer array `nums` of `n` distinct integers. - Two integers `n` and `k`. **Output:** - An integer representing the maximum possible sum of a subset with exactly `k` elements. **Example:** ```python nums = [3, 2, 5, 1, 7] n = 5 k = 3 max_subset_sum(nums, n, k) ``` **Output:** ``` 15 ```","solution":"from typing import List def max_subset_sum(nums: List[int], n: int, k: int) -> int: Returns the maximum possible sum of a subset with exactly k elements. # Sort the list in descending order sorted_nums = sorted(nums, reverse=True) # Sum the first k elements return sum(sorted_nums[:k])"},{"question":"You are given a list of integers, where each integer represents the number of pixels in a particular segment of a monochrome image. Each segment can be either black or white, and consecutive segments of the same color should be combined into one stretch in the output. Your task is to create a function `combine_segments(segments: List[int], colors: List[str]) -> List[Tuple[int, str]]` where `segments` is a list of integers representing segment lengths and `colors` is a list of strings representing the colors of each segment (`\\"black\\"` or `\\"white\\"`). The function should return a list of tuples, each consisting of the total length of combined consecutive segments and their common color. # Function Signature ```python def combine_segments(segments: List[int], colors: List[str]) -> List[Tuple[int, str]]: ``` # Input - `segments` (List[int]): A list of integers where each integer is a positive value indicating the number of pixels in the segment. - `colors` (List[str]): A list of color values (`\\"black\\"` or `\\"white\\"`) of the same length as `segments`, indicating the color of each segment. # Output - List[Tuple[int, str]]: A list of tuples where the first element is the combined length of consecutive segments with the same color, and the second element is the color. # Example ```python segments = [5, 3, 2, 4, 6, 2] colors = [\\"black\\", \\"black\\", \\"white\\", \\"black\\", \\"white\\", \\"white\\"] combine_segments(segments, colors) ``` Expected Output ```python [(8, \\"black\\"), (2, \\"white\\"), (4, \\"black\\"), (8, \\"white\\")] ``` # Constraints - `1 <= len(segments) == len(colors) <= 10^3` - Each value in `segments` is a positive integer. - Each value in `colors` is either \\"black\\" or \\"white\\".","solution":"from typing import List, Tuple def combine_segments(segments: List[int], colors: List[str]) -> List[Tuple[int, str]]: Combine segments of the same color into one stretch. Arguments: segments -- list of integers representing segment lengths colors -- list of strings representing segment colors Returns: list of tuples where each tuple contains combined length of consecutive same colored segments and their color combined_segments = [] if not segments or not colors: return combined_segments current_length = segments[0] current_color = colors[0] for i in range(1, len(segments)): if colors[i] == current_color: current_length += segments[i] else: combined_segments.append((current_length, current_color)) current_length = segments[i] current_color = colors[i] combined_segments.append((current_length, current_color)) return combined_segments"},{"question":"You are given an array of integers nums with length n, and you are guaranteed that there exists exactly one peak element. A peak element is an element that is strictly greater than its neighbors. If an element is the first or last one in the array, then it only needs to be greater than its one neighbor. Your task is to write a function `findPeakElement` that takes an array nums as input and returns the index of the peak element. The array may contain at least 1 and up to 50,000 integers. You may assume that nums[-1] and nums[n] are both negative infinity (-∞). Your algorithm should run in O(log n) time. # Input Format - An array of integers nums # Output Format - An integer denoting the index of the peak element. # Example Input: ``` [1, 2, 3, 1] ``` Output: ``` 2 ``` Input: ``` [1, 2, 1, 3, 5, 6, 4] ``` Output: ``` 5 ``` # Constraints - 1 ≤ nums.length ≤ 50,000 - Integer values in nums are within the range [-2^31, 2^31 - 1]. - nums[i] ≠ nums[i+1] for any integers i. **Hint**: Use a binary search approach for an optimal O(log n) solution.","solution":"def findPeakElement(nums): Finds the peak element in the array nums and returns its index. A peak element is an element that is strictly greater than its neighbors. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"You are given a string and a set of dictionary words. Your task is to segment the string into a space-separated sequence of one or more dictionary words such that the concatenation of these words is equal to the input string. If there is more than one possible segmentation, return any one of them. If there is no possible segmentation, return an empty string. Write a function `word_break(s, word_dict)` that takes in two parameters: - `s` (a string containing only lowercase letters). - `word_dict` (a list of strings which represents the dictionary of words). Output a single string, where the input string `s` is segmented into dictionary words separated by spaces. If no segmentation is possible, return an empty string. # Function Signature ```python def word_break(s: str, word_dict: List[str]) -> str: ``` # Input The function takes in the following inputs: 1. `s` (1 ≤ |s| ≤ 1000): a string containing only lowercase English letters. 2. `word_dict` (1 ≤ len(word_dict) ≤ 3000): a list where each element is a string containing only lowercase English letters. Each word in the dictionary has a length between 1 and 20. # Output Return a single string where `s` is segmented into dictionary words separated by spaces, or return an empty string if no segmentation is possible. # Example ```python word_break(\\"applepenapple\\", [\\"apple\\", \\"pen\\"]) # returns \\"apple pen apple\\" word_break(\\"catsandog\\", [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"]) # returns \\"\\" ``` # Constraints - You may assume that the dictionary does not contain duplicate words. - You may return any valid segmentation if there is more than one. If there is no valid segmentation, return an empty string.","solution":"from typing import List def word_break(s: str, word_dict: List[str]) -> str: word_set = set(word_dict) # Convert list to set for faster lookup dp = [None] * (len(s) + 1) dp[0] = [] for i in range(1, len(s) + 1): for j in range(i): if dp[j] is not None and s[j:i] in word_set: dp[i] = dp[j] + [s[j:i]] break if dp[len(s)] is None: return \\"\\" return \\" \\".join(dp[len(s)])"},{"question":"You are tasked with developing a new communication protocol for devices in a network. The existing protocol involves passing messages represented as strings, and you must ensure the messages are correctly ordered and interpreted by receiving devices. To simulate this, you are given an array M = [m_1, m_2, ..., m_N] of length N, where each element m_i is a string representing a message. Your task is to determine if it is possible to reorder the array M such that the concatenation of all the strings in the array forms a palindrome. A string is considered a palindrome if it reads the same backward as forward, such as \\"aba\\" or \\"racecar\\". You will be given T test cases, and for each test case, you need to output \\"YES\\" if it\'s possible to reorder the array to form a palindrome, or \\"NO\\" if it\'s not possible. # Input Format: - The first line contains a single integer, T (1 leq T leq 100), the number of test cases. - For each test case: - The first line contains a single integer, N (1 leq N leq 100), the number of messages. - The next line contains N strings m_1, m_2, ..., m_N (each string 1 leq |m_i| leq 10^5), the messages in the array. # Output Format: - For each test case, output \\"YES\\" if it is possible to reorder the array to form a palindrome, or \\"NO\\" if it is not possible. # Example: Input: ``` 2 3 abc cba bca 4 a aa aaa aaaa ``` Output: ``` NO YES ``` # Explanation: - In the first test case, the strings cannot be reordered to form a palindrome. - In the second test case, the strings can be reordered to form the palindrome \\"aaa aa aaaa a\\". # Note: You may assume that the total length of all strings in any single test case does not exceed 10^5.","solution":"def can_form_palindrome(m): Given an array of messages m, check if it is possible to reorder the array such that the concatenation of all the strings in the array forms a palindrome. from collections import Counter # Concatenate all messages to form a single string concatenated_string = \'\'.join(m) # Count frequency of each character frequency = Counter(concatenated_string) # Count how many characters have an odd frequency odd_count = sum(1 for count in frequency.values() if count % 2 != 0) # For the string to be rearrangeable to a palindrome, # there can be at most one character with an odd frequency return odd_count <= 1 def process_test_cases(T, test_cases): results = [] for i in range(T): N, M = test_cases[i] if can_form_palindrome(M): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given two arrays, a and b, each consisting of n integers. Your task is to perform a sequence of operations such that array a becomes equal to array b. In one operation, you can choose an index i (1 ≤ i ≤ n) and increase or decrease the value of a[i] by 1. You need to determine the minimum number of operations required to make array a equal to array b. The first line of the input contains one integer t (1 ≤ t ≤ 10000) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 ≤ n ≤ 100000) — the length of arrays a and b. The next line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the elements of array a. The following line contains n integers b1, b2, ..., bn (−10^9 ≤ bi ≤ 10^9) — the elements of array b. It is guaranteed that the sum of n over all test cases does not exceed 1000000. For each test case, print the minimum number of operations required in a single line. Example Input: 2 5 1 3 2 4 1 3 1 2 4 1 3 1 1 1 3 3 3 Example Output: 4 6","solution":"def min_operations_to_equal_arrays(t, test_cases): For each test case, calculate the minimum number of operations required to make array a equal to array b. Args: t : int : number of test cases test_cases : list : list of tuples, each containing: - n (int) : the length of arrays a and b - a (list) : list of n integers representing array a - b (list) : list of n integers representing array b Returns: list : list of integers where each integer corresponds to the minimum number of operations for each test case results = [] for n, a, b in test_cases: total_operations = 0 for i in range(n): total_operations += abs(a[i] - b[i]) results.append(total_operations) return results"},{"question":"Create a function to simulate a game of \\"Jump Across.\\" In this game, a player must jump from the first cell to the last cell of a row of cells, where each cell has a number that indicates the maximum number of cells the player can jump forward from that cell. The goal is to determine the minimum number of jumps required to reach the last cell. If it\'s not possible to reach the last cell, return -1. Function Signature: `def min_jumps(cells: List[int]) -> int` # Input - `cells` (List[int]): A list of integers where each integer represents the maximum jump distance from that cell. # Output - `int`: The minimum number of jumps required to reach the last cell or -1 if it\'s not possible. # Examples Example 1: ``` Input: cells = [2, 3, 1, 1, 4] Output: 2 Explanation: Jump 2 cells from index 0 to index 2, then jump 3 cells to the last cell. ``` Example 2: ``` Input: cells = [2, 3, 0, 1, 4] Output: 2 Explanation: Jump 1 cell from index 0 to index 1, then jump 3 cells to the last cell. ``` Example 3: ``` Input: cells = [1, 2, 1, 0, 4] Output: -1 Explanation: It’s not possible to reach the last cell. ``` # Constraints - `1 <= len(cells) <= 10^5` - `0 <= cells[i] <= 10^5` Analyze the given samples and create an efficient algorithm to solve the problem as described.","solution":"from typing import List def min_jumps(cells: List[int]) -> int: Determine the minimum number of jumps required to reach the last cell, if possible. if len(cells) <= 1: return 0 jumps = 0 current_end = 0 farthest = 0 for i in range(len(cells) - 1): farthest = max(farthest, i + cells[i]) if i == current_end: jumps += 1 current_end = farthest if current_end >= len(cells) - 1: return jumps return -1"},{"question":"In a video streaming service, users can create playlists of their favorite episodes. Each playlist consists of a sequence of episodes, where each episode belongs to a particular series. Users often share these playlists with their friends. You are given a specific playlist and are asked to help determine the following: - Identify the maximum number of consecutive episodes in the playlist that belong to the same series. The playlist can be represented as a list of integers, where each integer represents an episode from a specific series. Episodes from the same series are denoted by the same integer value. Write a function that takes a list of integers representing the playlist and returns the maximum number of consecutive episodes that belong to the same series. Function Signature: ```python def max_consecutive_episodes(playlist: List[int]) -> int: ``` # Input - The input is a single list of integers, playlist, where each integer represents an episode from a specific series. - For example: [1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 1] - The length of the list is `1 ≤ len(playlist) ≤ 105`. # Output - The function should return a single integer, representing the maximum number of consecutive episodes that belong to the same series. # Example ```python assert max_consecutive_episodes([1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 4, 4, 4, 1]) == 4 assert max_consecutive_episodes([5, 5, 5, 5, 5]) == 5 assert max_consecutive_episodes([1, 2, 3, 4, 5]) == 1 ```","solution":"from typing import List def max_consecutive_episodes(playlist: List[int]) -> int: Returns the maximum number of consecutive episodes that belong to the same series. if not playlist: return 0 max_count = 1 current_count = 1 for i in range(1, len(playlist)): if playlist[i] == playlist[i - 1]: current_count += 1 else: max_count = max(max_count, current_count) current_count = 1 # Check the last sequence max_count = max(max_count, current_count) return max_count"},{"question":"You are given an array of integers a. You can perform a sequence of operations on this array. In each operation, you can choose a contiguous subarray and reverse it. The goal is to make the entire array sorted in non-decreasing order using the minimum number of operations. You need to determine and output the minimum number of operations required to sort the array. # Input - The first line contains a single integer n (1 le n le 100,000) — the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. # Output Output a single integer — the minimum number of operations required to sort the array. # Example Input ``` 5 3 1 2 5 4 ``` Output ``` 2 ``` Explanation: You can reverse the subarray [3, 1, 2] to get [2, 1, 3, 5, 4], then reverse the subarray [1, 2] to get [1, 2, 3, 5, 4], and finally reverse the subarray [5, 4] to get [1, 2, 3, 4, 5]. So, minimum 2 operations are needed.","solution":"def min_operations_to_sort_array(arr): n = len(arr) des_len = 0 max_des_len = 0 for i in range(n-1): if arr[i] > arr[i+1]: des_len += 1 else: max_des_len = max(max_des_len, des_len) des_len = 0 max_des_len = max(max_des_len, des_len) return 1 if max_des_len == 0 else 2"},{"question":"Alice is planning to participate in a marathon that spans over n days. Each day, she runs a certain distance to prepare for the marathon. On the ith day, Alice plans to run di kilometers. After each run, she gets fatigued and needs appropriate rest. The given rest period for each day is ri minutes. If she doesn\'t take sufficient rest based on the previous day\'s rest period, she accumulates additional fatigue, which will affect her preparation. Given n days with the rest requirements, Alice can also choose to take more rest to minimize her accumulated fatigue throughout the training period. Specifically, if she takes additional rest, it will reduce her fatigue accordingly. Help Alice to determine the minimum total fatigue she will have after n days of training, by optimally scheduling her extra rests. The first line of input contains an integer n (1 ≤ n ≤ 100), the number of days Alice will train. In the next n lines, each line contains two integers di and ri (1 ≤ di ≤ 20 and 1 ≤ ri ≤ 1440), the planned distance in kilometers Alice will run that day and the required rest in minutes after the run. Print the minimum total fatigue Alice will accumulate after n days, in one line. In the first sample case: An optimal way could be to follow the rest schedule precisely for minimal fatigue on the first day and schedule extra rest on subsequent days. In the second sample case: An optimal way could be to take the exact rest on certain days and add extra rest effectively on other days to balance the accumulated fatigue.","solution":"def min_fatigue(n, dr): Calculate the minimum total fatigue Alice will have after n days of training. Each day, Alice runs a distance and requires a certain rest period. She can adjust her rest to minimize fatigue. :param n: Integer, number of days Alice will train. :param dr: List of tuples, where each tuple contains two integers di and ri. di is the planned distance in kilometers Alice will run that day. ri is the required rest in minutes after the run. :return: Integer, minimum total fatigue. fatigue = 0 for i in range(n): di, ri = dr[i] # Optimal strategy is to follow rest schedule precisely to avoid extra fatigue. fatigue += ri return fatigue"},{"question":"In a far-off land, there exists a valley known for its mysterious glowing stones. These stones have unique properties related to their positions along a path. Each stone is associated with a number, and the glow intensity of a collection of stones is determined by a special calculation. You are given an array of integers representing the stones and their positions along the path. The glow intensity of a subset of stones is defined as the sum of the absolute differences of all pairs within the subset: text{glow_intensity}(S) = sum_{i=1}^{|S|}sum_{j=i+1}^{|S|} |S_i - S_j| Your task is to compute the total glow intensity for all possible subsets of the given array, modulo 10^9 + 7. # Input The first line contains an integer n (1 leq n leq 2 cdot 10^5), the number of stones. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), representing the positions of the stones. # Output Print a single integer, the total glow intensity for all possible subsets of the given array, modulo 10^9 + 7. # Example Input ``` 3 1 3 6 ``` Output ``` 15 ``` Explanation The subsets and their glow intensities are: - Subset {1, 3}: |1-3| = 2 - Subset {1, 6}: |1-6| = 5 - Subset {3, 6}: |3-6| = 3 - Subset {1, 3, 6}: |1-3| + |1-6| + |3-6| = 2 + 5 + 3 = 10 Total glow intensity: 2 + 5 + 3 + 10 = 20 (it\'s modulo 10^9 + 7, thus the output is 20).","solution":"MOD = 10**9 + 7 def total_glow_intensity(n, a): a.sort() total_sum = 0 factor = 1 for i in range(n): total_sum = (total_sum + (a[i] - a[n-i-1]) * factor) % MOD factor = (factor * 2) % MOD return total_sum # Example usage if __name__ == \\"__main__\\": n = 3 a = [1, 3, 6] print(total_glow_intensity(n, a)) # Output should be 15"},{"question":"Tom is learning about graph theory in his algorithm course and has come across the concept of \\"connected components\\" in an undirected graph. A connected component of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. After understanding the basics, Tom is now facing a problem where he needs to determine the number of connected components in a given undirected graph. Your task is to help Tom by writing a program that calculates the number of connected components in a graph. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the number of vertices and edges in the graph, respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) representing an edge between the vertices u and v. **Output:** - Print a single integer representing the number of connected components in the graph. **Example:** Input: ``` 6 5 1 2 2 3 1 3 4 5 5 6 ``` Output: ``` 2 ``` In this example, the graph has two connected components: {1, 2, 3} and {4, 5, 6}.","solution":"def count_connected_components(n, m, edges): from collections import defaultdict, deque # Create the adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Function to perform BFS and mark all reachable nodes from a starting node def bfs(start, visited): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) visited = [False] * (n + 1) count = 0 # Traverse all nodes and perform BFS for each unvisited node for i in range(1, n + 1): if not visited[i]: bfs(i, visited) count += 1 return count"},{"question":"A university wants to prepare an analysis on student performance based on their scores in different subjects. They need a program to identify students who need extra attention. Specifically, a student needs extra attention if their average score across all subjects is below a certain threshold. Given the list of student names, their scores in different subjects, and the threshold, write a program to identify which students need extra attention. # Input: - The first line contains an integer n (1 ≤ n ≤ 100), the number of students. - The second line contains an integer m (1 ≤ m ≤ 10), the number of subjects. - The next line contains an integer t (0 ≤ t ≤ 100), the threshold average score. - The following n lines contain a string s (student name) followed by m integers (their scores in the subjects). # Output: - Output the names of the students who need extra attention in alphabetical order, one per line. If no student needs extra attention, output \\"All students are performing well\\". # Example: Input: ``` 5 3 60 Alice 55 60 58 Bob 68 70 72 Charlie 62 50 55 David 50 58 60 Eve 70 78 80 ``` Output: ``` Alice Charlie David ``` In this example, the average scores for Alice, Charlie, and David are below the threshold of 60, so they need extra attention.","solution":"def students_needing_attention(n, m, t, student_data): students_below_threshold = [] for data in student_data: parts = data.split() name = parts[0] scores = list(map(int, parts[1:])) average_score = sum(scores) / m if average_score < t: students_below_threshold.append(name) if not students_below_threshold: return [\\"All students are performing well\\"] return sorted(students_below_threshold) # Example usage: # n = 5 # m = 3 # t = 60 # student_data = [ # \\"Alice 55 60 58\\", # \\"Bob 68 70 72\\", # \\"Charlie 62 50 55\\", # \\"David 50 58 60\\", # \\"Eve 70 78 80\\" # ] # print(students_needing_attention(n, m, t, student_data))"},{"question":"You are organizing a sports tournament and need to arrange matches for the players. Each match involves two players and has an associated difficulty level. As a part of the tournament schedule, you need to ensure that no player participates in multiple matches occurring at the same time. You are given a list of matches, where each match is represented by: - The starting time of the match. - The ending time of the match. - The difficulty level of the match. A player can participate in multiple matches as long as the times do not overlap. The aim is to select the maximum number of non-overlapping matches such that the total difficulty level of the selected matches is maximized. Input format: - The first line contains a single integer, n (1 ≤ n ≤ 1000), the number of matches. - Each of the next n lines contains three integers: start (1 ≤ start < end ≤ 10^9), end, and difficulty (1 ≤ difficulty ≤ 1000), representing the starting time, ending time, and difficulty level of the match respectively. Output format: - Output a single integer, the maximum total difficulty level that can be achieved with the selected matches. Example: Input: ``` 4 1 5 10 1 3 20 2 6 15 4 7 25 ``` Output: ``` 45 ``` Explanation: In this example, the maximum total difficulty level can be achieved by selecting the matches (1, 3, 20) and (4, 7, 25) which do not overlap in time. The total difficulty level is 20 + 25 = 45.","solution":"def max_difficulty(n, matches): # Sort the matches by end time for easier processing matches.sort(key=lambda x: x[1]) # dp array to store the maximum difficulty up to each match dp = [0] * n dp[0] = matches[0][2] for i in range(1, n): include = matches[i][2] # Find the latest match that doesn\'t overlap with current match[i] for j in range(i - 1, -1, -1): if matches[j][1] <= matches[i][0]: include += dp[j] break dp[i] = max(include, dp[i - 1]) return max(dp)"},{"question":"You are given an initially empty binary tree. You will receive a series of instructions to modify and query this tree. The operations can be of three types: 1. Insert a node with a given value into the tree. 2. Remove a node with a specific value from the tree. 3. Query the maximum value in the current tree. Specifically, the detailed operations are: - **Insert x**: Add a node with value `x` into the binary tree, maintaining the binary search tree property. - **Remove x**: Remove the node with value `x` from the binary tree, maintaining the binary search tree property. It is guaranteed that the node with value `x` exists in the tree when this operation is called. - **Max**: Print the maximum value present in the binary tree. It is guaranteed that there is at least one element in the tree when this operation is called. The first line of the input contains an integer `q` (1 ≤ q ≤ 100,000), the number of operations. Each of the following `q` lines describes an operation in one of the formats described above. # Input ``` The first line contains an integer q (1 ≤ q ≤ 100,000) — the number of operations. Each of the following q lines contains a valid operation as specified: - \\"Insert x\\" where x is an integer. - \\"Remove x\\" where x is an integer. - \\"Max\\" ``` # Output ``` For each \\"Max\\" query, print the maximum value in the tree on a new line. ``` # Constraints - The value `x` inserted or removed will fit within the range of a signed 32-bit integer. - All operations are guaranteed to be valid according to the described rules. # Example Input: ``` 8 Insert 10 Insert 5 Insert 20 Max Remove 20 Max Insert 15 Max ``` Output: ``` 20 10 15 ``` In this problem, you will need to efficiently manage the binary tree to ensure that insertions, deletions, and maximum value queries are performed in an optimal manner for large input sizes. Consider using data structures that provide efficient operations for dynamic sets.","solution":"class TreeNode: def __init__(self, key): self.key = key self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, key): self.root = self._insert(self.root, key) def _insert(self, root, key): if root is None: return TreeNode(key) if key < root.key: root.left = self._insert(root.left, key) elif key > root.key: root.right = self._insert(root.right, key) return root def remove(self, key): self.root = self._remove(self.root, key) def _remove(self, root, key): if root is None: return root if key < root.key: root.left = self._remove(root.left, key) elif key > root.key: root.right = self._remove(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left temp = self._minValueNode(root.right) root.key = temp.key root.right = self._remove(root.right, temp.key) return root def _minValueNode(self, node): current = node while current.left is not None: current = current.left return current def find_max(self): if self.root is None: return None return self._find_max(self.root) def _find_max(self, node): current = node while current.right is not None: current = current.right return current.key def execute_operations(operations): bst = BinarySearchTree() results = [] for operation in operations: if operation.startswith(\\"Insert\\"): _, value = operation.split() bst.insert(int(value)) elif operation.startswith(\\"Remove\\"): _, value = operation.split() bst.remove(int(value)) elif operation == \\"Max\\": results.append(bst.find_max()) return results"},{"question":"Write a function `merge_sorted_arrays` that takes two sorted lists of integers and returns a single sorted list that contains all the elements from both input lists. Your function should merge the arrays in O(n) time, where n is the combined length of the two lists. # Function Signature: ```python def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: pass ``` # Input - `arr1`: A list of integers, sorted in non-decreasing order. (0 ≤ len(arr1) ≤ 10^5) - `arr2`: A list of integers, also sorted in non-decreasing order. (0 ≤ len(arr2) ≤ 10^5) # Output - A list containing all the integers from `arr1` and `arr2`, in non-decreasing order. # Examples ```python # Example 1 merge_sorted_arrays([1, 3, 5], [2, 4, 6]) # Output: [1, 2, 3, 4, 5, 6] # Example 2 merge_sorted_arrays([], [2, 4, 6]) # Output: [2, 4, 6] # Example 3 merge_sorted_arrays([1, 2, 3], []) # Output: [1, 2, 3] # Example 4 merge_sorted_arrays([1, 1, 2], [1, 3, 3]) # Output: [1, 1, 1, 2, 3, 3] ``` # Constraints - The input lists `arr1` and `arr2` are both sorted in non-decreasing order. - The length of each list does not exceed 100,000 elements. - The integer values in the lists range from -10^9 to 10^9. # Note - Do not use any external libraries or built-in functions that perform the merge operation directly. - Ensure the function is efficient and runs in linear time with respect to the total number of elements.","solution":"def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]: Merges two sorted integer lists into a single sorted list. Args: arr1 (list[int]): First sorted list of integers. arr2 (list[int]): Second sorted list of integers. Returns: list[int]: Merged sorted list containing all elements from arr1 and arr2. merged_array = [] i, j = 0, 0 # Traverse both lists and append the smallest element to the merged array while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements of arr1 (if any) while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements of arr2 (if any) while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You can perform at most k operations on the string where in each operation you can choose any character of the string and change it to any other lowercase English letter. Determine the length of the longest substring of the modified string that contains the same character. The first line of the input contains a string s (1 leq |s| leq 10^5) — the given string. The second line contains an integer k (0 leq k leq |s|) — the maximum number of operations you can perform. Output a single integer, the length of the longest substring of the modified string that contains the same character. For example, consider the input: ``` aaabbc 2 ``` You can change two \'b\'s to \'a\'s to get the string \\"aaaaac\\", giving the longest substring with the same character as 5.","solution":"def longest_substring_with_same_char(s, k): from collections import defaultdict max_len = 0 left = 0 char_count = defaultdict(int) max_char_count = 0 for right in range(len(s)): char_count[s[right]] += 1 max_char_count = max(max_char_count, char_count[s[right]]) if (right - left + 1) - max_char_count > k: char_count[s[left]] -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"A logistics company uses a transportation network represented as a directed weighted graph where nodes represent warehouses and edges represent roads with known distances. The company wants to find the shortest delivery route from one warehouse to another, possibly passing through other warehouses. Your task is to help the company by writing a program that calculates the shortest path between any two given warehouses. The first input line contains two integers n and m, separated by a single space, where n is the number of warehouses (nodes), and m is the number of roads (edges). Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), separated by single spaces, representing a directed road from warehouse u to warehouse v with a distance of w between them. The last input line contains two integers s and t (1 ≤ s, t ≤ n), separated by a single space — the starting and ending warehouses, respectively. Output a single integer — the shortest distance from warehouse s to warehouse t. If there is no path from s to t, print -1. Constraints: - 2 ≤ n ≤ 1000 - 1 ≤ m ≤ 10,000 **Example:** **Input:** ``` 4 4 1 2 3 2 3 4 3 4 5 1 4 10 1 4 ``` **Output:** ``` 10 ``` In this example, the shortest path from warehouse 1 to warehouse 4 is directly from 1 to 4 with a distance of 10.","solution":"import heapq def dijkstra(n, edges, start, end): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 pq = [(0, start)] while pq: current_dist, node = heapq.heappop(pq) if current_dist > dist[node]: continue for neighbor, weight in graph[node]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if dist[end] == float(\'inf\') else dist[end] def shortest_path(n, m, edge_list, s, t): return dijkstra(n, edge_list, s, t) # Example usage with the given input: n, m = 4, 4 edges = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 4, 10)] s, t = 1, 4 # print(shortest_path(n, m, edges, s, t)) # Output should be 10"},{"question":"You are given a string consisting of lowercase letters and you need to reorder the string in such a way that no two adjacent characters are the same. If it is impossible to achieve such a reordering, return an empty string. The input consists of an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains one string s with length between 1 and 1000. For each test case, output the reordered string or -1 if it is not possible to reorder the string as required. Example: Input: 3 aab aaab aabb Output: aba -1 abab Explanation: In the first example, the string \\"aab\\" can be reordered to \\"aba\\" to satisfy the conditions. In the second example, \\"aaab\\" cannot be reordered to avoid adjacent \\"a\\" characters, so the output is \\"-1\\". In the third example, the string \\"aabb\\" can be reordered to \\"abab\\" to satisfy the conditions.","solution":"from heapq import heappush, heappop from collections import Counter def reorder_string(n, strings): results = [] for s in strings: freq = Counter(s) max_heap = [] for char, count in freq.items(): heappush(max_heap, (-count, char)) prev_char, prev_count = None, 0 result = [] while max_heap: count, char = heappop(max_heap) result.append(char) if prev_char and prev_count < 0: heappush(max_heap, (prev_count, prev_char)) prev_count = count + 1 prev_char = char if len(result) != len(s): results.append(\\"-1\\") else: results.append(\\"\\".join(result)) return results"},{"question":"# Tournament Rankings A sports tournament consists of a series of matches between different players. You need to determine the final rankings at the end of the tournament based on the match results. The tournament can be described by an integer n (1 ≤ n ≤ 1000), which represents the number of players. Players are numbered from 1 to n. The results of m matches (0 ≤ m ≤ 10,000) are recorded as a list of tuples (a, b), where player a won against player b. Your task is to generate the final rankings of the players based on the match results. The ranking of a player is defined by the number of matches each player has won, where more wins result in a higher rank. If two players have the same number of wins, they should share the same rank. Input: - The first line contains two integers n and m. - Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b), indicating that player a won against player b. Output: - Output the final rankings of the players, where the rank for each player is on a new line. The order should be from rank 1 (top rank) to rank n (lowest rank). Note: - Assume that there are no inconsistent results (i.e., if player a beats player b, there will not be a match recorded where player b beats player a). Example: Input: ``` 5 4 1 2 2 3 1 3 3 4 ``` Output: ``` 1 2 2 1 3 1 4 0 5 0 ``` In this example: - Player 1 won 2 matches (against players 2 and 3) - Player 2 won 1 match (against player 3) - Player 3 won 1 match (against player 4) - Players 4 and 5 won 0 matches","solution":"def tournament_rankings(n, m, matches): # Initialize a list to keep count of wins for each player wins = [0] * (n + 1) # Record wins for each player for a, b in matches: wins[a] += 1 # Format result as (player, wins) result = [(i, wins[i]) for i in range(1, n + 1)] # Sort the result by wins in descending order and then by player number in ascending order result.sort(key=lambda x: (-x[1], x[0])) return result"},{"question":"You are given a company with multiple departments, and each department has employees with different skill levels. You need to form a team such that each team member is from a different department and the sum of skill levels of the team members is maximized. The problem can be described as follows: There are n departments. Each department i has m_i employees. The skill level of the j-th employee in department i is given by the integer s_{ij}. You need to select exactly one employee from each department to form a team such that the sum of their skill levels is maximized. Input Format: - The first line contains a single integer n (1 leq n leq 500) — the number of departments. - The next n lines describe the employees of each department. The i-th line consists of an integer m_i (1 leq m_i leq 500) — the number of employees in department i, followed by m_i integers s_{i1}, s_{i2}, ldots, s_{im_i} (1 leq s_{ij} leq 10^6) — the skill levels of the employees in department i. Output Format: - Print a single integer — the maximum possible sum of skill levels of the selected team. Example: Input: ``` 3 4 5 12 23 8 3 7 17 10 2 15 30 ``` Output: ``` 70 ``` Explanation: - The optimal team selection would be the third employee from the first department (skill level 23), the second employee from the second department (skill level 17), and the second employee from the third department (skill level 30). - The sum of their skill levels is 23 + 17 + 30 = 70.","solution":"def max_skill_level_sum(n, departments): Given the number of departments `n` and a list `departments` where each element is a list of skill levels of employees in that department, this function returns the maximum possible sum of skill levels by selecting one employee from each department. max_sum = 0 for dept in departments: max_sum += max(dept) return max_sum"},{"question":"Polycarp is organizing a birthday party and he has m types of gifts to distribute among his guests. Unfortunately, he realized that he only has one of each type. To ensure that no guest feels left out, he decides to make gift bags in such a way that each guest gets exactly one gift per type. However, each gift type has a different number of quantitative variations. Polycarp wants to know the maximum number of guests he can invite to the party such that he can distribute the gifts equally among them without any type of gift being left over or some guests getting more than others. The first line contains one integer t (1 le t le 10^4) representing the number of test cases. Each test case consists of two lines. The first line contains one integer m (1 le m le 100), the number of different types of gifts. The second line contains m integers b_1, b_2, ldots, b_m (1 le b_i le 10^6), where b_i indicates how many variations of the i-th type of gift are available. For each test case, output the maximum number of guests Polycarp can invite. Example: ``` Input: 3 3 12 18 24 2 10 15 4 8 15 12 30 Output: 6 5 3 ``` Explanation: In the first test case, the greatest common divisor (GCD) of 12, 18, and 24 is 6, thus Polycarp can invite 6 guests and distribute 2 variations of gift 1, 3 variations of gift 2, and 4 variations of gift 3 to each guest.","solution":"import math from functools import reduce def max_guests(m, gift_variations): Determines the maximum number of guests that can be invited given the number of variations for each type of gift. return reduce(math.gcd, gift_variations) def solve(t, test_cases): Solves the problem for all given test cases. results = [] for case in test_cases: m = case[0] gift_variations = case[1] results.append(max_guests(m, gift_variations)) return results"},{"question":"A group of friends are planning a treasure hunt, and they need your help designing a map of the treasure island. The island can be represented as an `n x n` grid. Each cell on the grid can either be land or water. The task is to create the map such that it meets the following requirements: 1. The map must contain exactly one connected region of land. 2. A connected region of land means that there must be a path between any two land cells that only travels through other land cells (neighbors connected by sides, not corners). 3. There must be exactly one starting cell marked with \'S\' where the treasure hunt begins. This starting cell must be part of the connected region of land. 4. There must be exactly one ending cell marked with \'E\' where the treasure is hidden. This ending cell must also be part of the connected region of land. Given an integer `n` representing the size of the grid, output whether it is possible to create such a map using \'L\' for land, \'W\' for water, \'S\' for the start, and \'E\' for the end. If it\'s possible, you should print the map; otherwise, print \\"Impossible\\". # Input - The first line contains an integer `n` (2 ≤ n ≤ 50), the size of the grid. # Output - If it\'s possible to create such a map, print \\"Possible\\" followed by an `n x n` grid. - If it\'s not possible, print \\"Impossible\\". # Example 1 Input ``` 4 ``` Output ``` Possible L L L W L S L W L L E W W W W W ``` # Example 2 Input ``` 2 ``` Output ``` Impossible ```","solution":"def create_treasure_map(n): if n < 3: return \\"Impossible\\" # Create the base grid with all water cells grid = [[\'W\' for _ in range(n)] for _ in range(n)] # Fill the first 3x3 block with a connected region of land for i in range(3): for j in range(3): grid[i][j] = \'L\' # Place the start and end positions grid[1][1] = \'S\' grid[2][2] = \'E\' # Create the response string result = \\"Possiblen\\" + \\"n\\".join(\\" \\".join(row) for row in grid) return result"},{"question":"You are given an array of integers, a_1, a_2, ldots, a_n. Your task is to divide this array into exactly two subarrays such that the sum of elements in both subarrays is equal. If there exists such a division, print \\"YES\\". Otherwise, print \\"NO\\". Input: - The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) — the elements of the array. Output: - Print \\"YES\\" if it is possible to partition the array into two subarrays with equal sum, otherwise print \\"NO\\". Example: Input: 6 3 1 4 2 2 Output: YES Input: 4 1 2 3 5 Output: NO Explanation: In the first example, the array can be partitioned into [3, 1, 4] and [2, 2, 2] that both sum up to 8. Therefore, the output is \\"YES\\". In the second example, no partitioning is possible where the sum of elements in both subarrays is equal. Therefore, the output is \\"NO\\".","solution":"def can_partition_equal_sum(n, arr): total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 current_sum = 0 seen_sums = set() for num in arr: current_sum += num if current_sum == target_sum or (current_sum - target_sum) in seen_sums: return \\"YES\\" seen_sums.add(current_sum) return \\"NO\\""},{"question":"You are given an array of integers a of length n. You can perform the following operation any number of times: choose any pair of adjacent elements and replace them with a single integer which is the sum of those two elements. For example, transforming the array [2, 1, 5, 3] by performing the operation on the first two elements will result in [3, 5, 3]. Calculate the minimum possible value of the single remaining element after performing the operations any number of times. The first line contains one integer n (1 le n le 500) — the length of array a. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^4) — the elements of the array. Output a single integer — the minimum possible value of the single remaining element.","solution":"def min_possible_value(arr): Returns the minimum possible value of the single remaining element after performing the given operations. return sum(arr)"},{"question":"A cyclist is riding along the x-axis and can jump between certain points on the y-axis at various x coordinates. Let\'s define the cyclist\'s starting position as (0, 0) and their goal is to reach the farthest possible point on the x-axis. The cyclist rides at a speed of 1 unit per second along the x-axis. At certain points, they can jump up or down to a new y-coordinate as long as they land exactly at that x-coordinate. Specifically, there are `m` vertical jump points, each defined by a coordinate (x_i, y_i) which means the cyclist can jump from (x_i, y1) to (x_i, y2) if they are at x_i and their current y-coordinate is y1. Your task is to determine the farthest possible x-coordinate the cyclist can reach. The cyclist\'s movement is only stopped if they fall to y-coordinate 0 at an x-coordinate where there are no vertical jump points that can move them back up (at any y-coordinate). The first line contains an integer m `(1 ≤ m ≤ 10^5)` — the number of vertical jump points. Each of the next m lines contains two integers x_i and y_i `(1 ≤ x_i, y_i ≤ 10^9)` — the coordinates where vertical jumps are possible. Output the farthest x-coordinate the cyclist can reach. In the first example, if the cyclist has a jump point at (5, 3), they can ride to x = 5, jump to y = 3, and continue horizontally from there. Thus, the maximum distance could be further potentially. In the second example, if the cyclist starts at (0, 0), has jump points at (2, 5), and (5, 3), they can jump any number of times as long as the x and y coordinates allow it, maximizing their x-coordinate based on jumps and height transitions. # Example: **Input:** ``` 3 5 3 10 10 20 5 ``` **Output:** ``` 20 ```","solution":"def farthest_x(m, points): Function to determine the farthest x-coordinate the cyclist can reach. Args: m (int): Number of vertical jump points. points (list): List of tuples containing x_i and y_i coordinates of jump points. Returns: int: Farthest x-coordinate the cyclist can reach. # Sort the points by x-coordinate points.sort() # Initialize the furthest reachable x-coordinate farthest_point = 0 for x, y in points: # If the cycler can reach this point from the last farthest point if x >= farthest_point: farthest_point = x return farthest_point"},{"question":"In the kingdom of Algorithmia, every new algorithm must be validated by the Council of Elders before it can be used by the citizens. One of the elders\' favorite tasks is to test algorithms for finding the longest substring without repeating characters in a given string. For an upcoming assessment, they need an algorithm implemented in the preferred language of Algorithmia, which is Python. Given a string s, find the length of the longest substring without repeating characters. The input is a single string s (0 ≤ |s| ≤ 105), consisting of only ASCII characters. Print the length of the longest substring without repeating characters. In the first test sample, the input string is \\"abcabcbb\\". The length of the longest substring without repeating characters is 3, corresponding to the substring \\"abc\\". In the second test sample, the input string is \\"bbbbb\\". The length of the longest substring without repeating characters is 1, corresponding to the substring \\"b\\". In the third test sample, the input string is \\"pwwkew\\". The length of the longest substring without repeating characters is 3, corresponding to the substring \\"wke\\". Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. Parameters: s (str): The input string. Returns: int: The length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 max_len = 0 start_index = 0 char_index_map = {} for i in range(n): if s[i] in char_index_map and char_index_map[s[i]] >= start_index: start_index = char_index_map[s[i]] + 1 char_index_map[s[i]] = i max_len = max(max_len, i - start_index + 1) return max_len"},{"question":"You are given an array consisting of n integers, a1, a2, ..., an. Define a pair (i, j) as \\"good\\" if the value of ai is equal to the value of aj and i < j. Your task is to count the total number of \\"good\\" pairs in the array. The first line of the input contains a single integer n (1 ≤ n ≤ 2000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) where ai is the value of the i-th element. Print a single integer — the number of \\"good\\" pairs in the array. For example, given an array of 5 elements: [1, 2, 3, 1, 1], the number of \\"good\\" pairs is 3, because the pairs (1, 4), (1, 5), and (4, 5) are \\"good\\" pairs.","solution":"def count_good_pairs(n, arr): Counts the number of good pairs in the array where a pair (i, j) is considered good if ai == aj and i < j. :param n: int, the number of elements in the array :param arr: list of int, the array of integers :return: int, the number of good pairs from collections import defaultdict count = 0 freq = defaultdict(int) for num in arr: count += freq[num] freq[num] += 1 return count"},{"question":"Given a list of strings representing scientific terms, your task is to process the following operations: 1. **Add Term:** Add a new term to the list if it is not already present. If it is already present, do nothing. 2. **Remove Term:** Remove an existing term from the list. If it is not present, do nothing. 3. **Query Terms:** Return all terms currently in the list that start with a given prefix. You will process multiple operations in the given order and maintain the list dynamically. Initially, the list is empty. - The first line contains an integer `n` (`1 <= n <= 100000`), the number of operations. - The next `n` lines each contain an operation with its respective arguments. Each operation is given in one of the following formats: - `\\"add term\\"` - where `term` is a string consisting only of lowercase English letters (`1 <= |term| <= 100`). - `\\"remove term\\"` - where `term` is a string consisting only of lowercase English letters (`1 <= |term| <= 100`). - `\\"query prefix\\"` - where `prefix` is a string consisting only of lowercase English letters (`1 <= |prefix| <= 100`). For each query operation, print the terms in the list that start with the given prefix, in lexicographical order (one term per line). If no terms have the given prefix, print an empty line for that query. # Example Input: ``` 7 add physics add chemistry query phy remove physics query phy add biology query bio ``` Output: ``` physics (empty line) biology ```","solution":"def process_operations(n, operations): terms = set() results = [] for operation in operations: if operation.startswith(\\"add \\"): _, term = operation.split(maxsplit=1) terms.add(term) elif operation.startswith(\\"remove \\"): _, term = operation.split(maxsplit=1) terms.discard(term) elif operation.startswith(\\"query \\"): _, prefix = operation.split(maxsplit=1) matches = sorted(term for term in terms if term.startswith(prefix)) results.append(\\"n\\".join(matches) if matches else \\"\\") return results # Example usage: # n = 7 # operations = [ # \\"add physics\\", # \\"add chemistry\\", # \\"query phy\\", # \\"remove physics\\", # \\"query phy\\", # \\"add biology\\", # \\"query bio\\" # ] # Output should be: # [\\"physics\\", \\"\\", \\"biology\\"] # results = process_operations(n, operations) # for result in results: # print(result or \\"(empty line)\\")"},{"question":"You are given an array of integers `a` of length `n` and `m` operations. Each operation is one of the following types: 1. Update the value at a specified position `i` in the array to `x`. 2. Retrieve the sum of a subarray from index `i` to `j`. Implement a data structure that can efficiently perform these operations. Specifically, the time complexity for both operations should be logarithmic or better. # Input The first line of the input contains two integers `n` and `m` (1 leq n, m leq 2 times 10^5) — the number of elements in the array and the number of operations. The second line contains `n` integers `a1, a2, ..., an` (1 leq ai leq 10^9) — the initial array elements. The next `m` lines contain the operations. Each operation is described by three integers: the type of the operation `t`, and the indices or values associated with the operation: - If `t = 1`, the operation updates the value at position `i` in the array to `x` (`1 leq i leq n`, 1 leq x leq 10^9). - If `t = 2`, the operation demands the sum of the subarray from index `i` to `j` (1 leq i leq j leq n). # Output For each operation of type `t = 2`, output the sum of the subarray from index `i` to `j` on a new line. # Example Input ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 2 3 5 1 1 7 ``` Output ``` 6 15 19 ``` # Note - In the first query, the sum of the subarray from index `1` to `3` is `1 + 2 + 3 = 6`. - In the second query, after updating the third element to `10`, the sum of the subarray from index `1` to `3` is `1 + 2 + 10 = 15`. - In the third query, the sum of the subarray from index `3` to `5` is `10 + 4 + 5 = 19`. - In the fourth query, after updating the first element to `7`, the sum of the subarray from index `1` to `3` no longer matters as it is not queried again.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_query(self, left, right): return self.query(right) - self.query(left - 1) def process_operations(n, m, arr, operations): fenwick_tree = FenwickTree(n) result = [] # Initialize Fenwick Tree with initial array values for idx in range(n): fenwick_tree.update(idx + 1, arr[idx]) for operation in operations: t, i, j = operation if t == 1: # Update operation current_value = fenwick_tree.range_query(i, i) delta = j - current_value fenwick_tree.update(i, delta) elif t == 2: # Range query operation result.append(fenwick_tree.range_query(i, j)) return result"},{"question":"You are tasked with developing a pathfinding algorithm for a robot navigating through a grid. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. The grid is composed of cells, some of which are passable (\'.\') and some of which are blocked (\'#\'). The robot can move one cell at a time, either to the right, left, up, or down, but cannot move diagonally. Your goal is to implement a program that finds the shortest path from the starting position to the target position if such a path exists. If there are multiple shortest paths, your program can output any one of them. # Input - The first line contains two integers, `n` and `m` (2 ≤ n, m ≤ 100), representing the dimensions of the grid. - The next `n` lines each contain `m` characters (either \'.\' or \'#\'), representing the grid. The top-left corner (grid[0][0]) and the bottom-right corner (grid[n-1][m-1]) are guaranteed to be passable (\'.\'). # Output - If there is a path, output the length of the shortest path. - If no path exists, output -1. # Example __Input:__ ``` 4 4 . . . # . # . # . # . . # . # . ``` __Output:__ ``` 6 ``` __Input:__ ``` 3 3 . # . # # . . . . ``` __Output:__ ``` -1 ``` # Constraints - You may assume that the input grid will have at least one valid path if one exists. - You should use an appropriate algorithm (e.g., BFS) to find the shortest path. # Implementation Details 1. Parse the input to create the grid. 2. Implement the pathfinding algorithm. 3. Return the length of the shortest path or -1 if no path exists.","solution":"from collections import deque def shortest_path_in_grid(n, m, grid): if n == 0 or m == 0: return -1 queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set([(0, 0)]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: r, c, dist = queue.popleft() if r == n - 1 and c == m - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"You are given a string S consisting of lowercase English letters. You need to process m queries on this string. Each query is of the form qi = (type, x, y), where type can be 1 or 2: - type 1: Reverse the substring of S from index x to index y (inclusive). - type 2: Determine if the substring of S from index x to index y (inclusive) is a palindrome. Write a program that efficiently processes these queries. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the length of the string and the number of queries, respectively. The second line contains the string S of length n. Then m lines follow, each containing three integers qi (1 ≤ qi ≤ 2), x (1 ≤ x ≤ n), and y (1 ≤ y ≤ n), representing the i-th query. If the type of query is 1, reverse the substring of S from index x to y. If the type of query is 2, print \\"YES\\" if the substring of S from index x to y is a palindrome, otherwise print \\"NO\\". Note: - The string is 1-indexed. - For type 1 queries, keep updating the string S with the latest reversed substring. - For type 2 queries, verify the substring after performing all previous operations. Example: Input: 5 3 abcba 2 1 5 1 2 4 2 2 4 Output: YES NO Explanation: - The first query checks if the entire string \\"abcba\\" is a palindrome, which it is. - The second query reverses the substring \\"bcb\\" resulting in the string \\"abcbc\\". - The third query checks if the substring \\"bcb\\" is a palindrome, which it is not.","solution":"def process_queries(n, m, S, queries): S = list(S) # Convert the string to a list for mutability results = [] for query in queries: query_type, x, y = query # Convert 1-indexed to 0-indexed x -= 1 y -= 1 if query_type == 1: # Reverse the substring S[x:y+1] S[x:y+1] = S[x:y+1][::-1] elif query_type == 2: # Check if substring S[x:y+1] is a palindrome substring = S[x:y+1+1] if substring == substring[::-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers, where each integer represents the height of a block. You need to create a wall of a certain height using any number of these blocks (including using none of them). However, the height of the wall must be exactly equal to the given target height `H`. You also have an infinite number of each type of block. Write a function `countWays(heights, H)` to find the number of ways to build the wall with the exact height `H`. The function takes two arguments: 1. `heights` (a list of integers): the heights of different types of blocks available. 2. `H` (an integer): the target height for the wall. Return an integer representing the number of ways to build the wall of exactly height `H`. # Input - `heights` (1 ≤ len(heights) ≤ 30) - a list of positive integers representing different block heights. - `H` (0 ≤ H ≤ 1000) - the target height of the wall. # Output - A single integer, the number of ways to achieve the target height `H` using the given blocks. # Example Input: ``` heights = [1, 2, 3] H = 4 ``` Output: ``` 7 ``` Explanation: The following combinations of blocks can form a wall of height 4: - [1, 1, 1, 1] - [1, 1, 2] - [1, 2, 1] - [2, 1, 1] - [2, 2] - [1, 3] - [3, 1] Thus, there are 7 different ways to build the wall of height 4.","solution":"def countWays(heights, H): Returns the number of ways to build the wall of exactly height H using the given block heights. # Create a list to store the number of ways to achieve each height from 0 to H dp = [0] * (H + 1) # There is 1 way to achieve the height 0 (use no blocks) dp[0] = 1 # Calculate the number of ways for each height from 1 to H for i in range(1, H + 1): for height in heights: if i >= height: dp[i] += dp[i - height] # The answer is the number of ways to achieve the height H return dp[H]"},{"question":"You are given a string `s` consisting only of characters \'a\' and \'b\'. You need to perform a series of operations on this string. In each operation, you can remove any two adjacent characters if they are different. Your task is to determine the minimum number of operations required to completely remove all characters from the string, or determine that it is impossible to do so. The first line of the input contains an integer `t` (1 ≤ t ≤ 1000) — the number of test cases. The following `t` lines each contain a single string `s` (1 ≤ |s| ≤ 10^5), consisting only of characters \'a\' and \'b\'. For each test case, print a single integer — the minimum number of operations required to completely remove the string or -1 if it is impossible. **Example:** Input: ``` 3 ab aab abab ``` Output: ``` 1 -1 2 ``` **Explanation:** - For the first case, you can remove \'ab\' in one operation. - For the second case, it is not possible to remove all characters as there will be one \'a\' left. - For the third case, you can remove \'ab\' repeatedly until the string is empty in two operations.","solution":"def min_operations_to_remove(s): # Check if n is even, if odd it\'s impossible to remove all characters if len(s) % 2 != 0: return -1 # A balanced string should have equal number of \'a\'s and \'b\'s if s.count(\'a\') != s.count(\'b\'): return -1 # The minimum number of operations needed is len(s) // 2 return len(s) // 2 def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_operations_to_remove(s)) return results"},{"question":"You are given a string s consisting of lowercase English letters. You are allowed to replace any single character in the string with any other lowercase English letter exactly once. After making the replacement, you want to minimize the number of distinct characters in the resulting string. Write a function to compute the minimum number of distinct characters in the resulting string after the optimal replacement. # Input The input consists of a single string s (1 leq |s| leq 10^5) containing only lowercase English letters. # Output Output a single integer, the minimum number of distinct characters in the resulting string following the optimal replacement. # Example Example 1 **Input:** ``` abcba ``` **Output:** ``` 2 ``` **Explanation:** By changing the third character \'c\' to either \'a\' or \'b\', the resulting string will be either \\"ababa\\" or \\"abbba\\", both of which have only two distinct characters. Example 2 **Input:** ``` aaaa ``` **Output:** ``` 1 ``` **Explanation:** The string already contains only one distinct character. Any replacement will still result in a string with one distinct character. Example 3 **Input:** ``` abcdef ``` **Output:** ``` 5 ``` **Explanation:** By changing any one character to match another character in the string, you can reduce the number of distinct characters from 6 to 5. # Note - The function should be efficient in order to handle the upper constraint of the string length up to 100,000 characters.","solution":"def min_distinct_chars(s): Returns the minimum number of distinct characters in the resulting string after one optimal replacement. if len(s) == 1: return 1 from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) most_common_char = char_count.most_common(1)[0][1] # The optimal replacement allows us to reduce the distinct count by at most 1 current_distinct = len(char_count) min_distinct_chars_after_replacement = max(1, current_distinct - 1) return min_distinct_chars_after_replacement"},{"question":"Given two strings, `s` and `t`, your task is to determine if they are isomorphic. Two strings are isomorphic if the characters in `s` can be replaced to get `t`. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character. For example, given: - Input: `s = \\"egg\\"`, `t = \\"add\\"` - Output: `true` - Input: `s = \\"foo\\"`, `t = \\"bar\\"` - Output: `false` Write a function `isIsomorphic(s: str, t: str) -> bool` to determine if the two strings are isomorphic. # Input - The function will receive two strings `s` and `t`, each containing only lowercase letters. - Both strings will have a length of at most `10^4`. # Output - Return `true` if the strings are isomorphic, and `false` otherwise. # Example ```python def isIsomorphic(s: str, t: str) -> bool: # implement your solution here pass print(isIsomorphic(\\"paper\\", \\"title\\")) # true print(isIsomorphic(\\"foo\\", \\"bar\\")) # false print(isIsomorphic(\\"ab\\", \\"aa\\")) # false ```","solution":"def isIsomorphic(s: str, t: str) -> bool: Determine if two strings s and t are isomorphic. if len(s) != len(t): return False mapping_s_to_t = {} mapping_t_to_s = {} for char_s, char_t in zip(s, t): if (char_s in mapping_s_to_t and mapping_s_to_t[char_s] != char_t) or (char_t in mapping_t_to_s and mapping_t_to_s[char_t] != char_s): return False mapping_s_to_t[char_s] = char_t mapping_t_to_s[char_t] = char_s return True"},{"question":"You are given a string consisting of lowercase English letters. You are allowed to delete at most one character from the string. Your task is to determine if it is possible to obtain a palindrome by performing at most one deletion. A string is called a palindrome if it reads the same forward and backward. Write a function `canFormPalindrome(s: str) -> bool` to determine whether it is possible to transform the given string into a palindrome by removing at most one character. If it is possible, return `True`, otherwise return `False`. # Examples ``` canFormPalindrome(\\"abca\\") returns True canFormPalindrome(\\"racecar\\") returns True canFormPalindrome(\\"abcdef\\") returns False ``` # Constraints - The length of the string will be between 1 and 10^5. - The string consists of only lowercase English letters. # Explanation For the first example, you can remove the character \'b\' to make the string \\"aca\\", which is a palindrome. In the second example, the string \\"racecar\\" is already a palindrome, so no deletions are necessary. In the third example, it is not possible to make \\"abcdef\\" a palindrome with only one deletion. # Function Signature ```python def canFormPalindrome(s: str) -> bool: pass ```","solution":"def canFormPalindrome(s: str) -> bool: def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # Try to skip either the left character or the right character return is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1) left += 1 right -= 1 return True"},{"question":"You are given an array of n integers. Your task is to find out if it is possible to split the array into two contiguous subarrays such that the sum of the elements in each subarray is equal. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (|a_i| ≤ 10^4) — the elements of the array. Output \\"YES\\" if it is possible to split the array into two parts with equal sums. Otherwise, output \\"NO\\". In the first sample, the array can be split as [1, 3, 3, 2] and [1, 2, 3, 3]. # Example Input: 8 1 3 3 2 1 2 3 3 Output: YES Input: 5 1 2 3 4 5 Output: NO","solution":"def can_split_array(arr): Function to determine if an array can be split into two contiguous subarrays with equal sums. total_sum = sum(arr) # If total sum is odd, it\'s not possible to split into two equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 current_sum = 0 for num in arr: current_sum += num if current_sum == target: return \\"YES\\" return \\"NO\\""},{"question":"An online e-commerce website needs a tool to help sellers to label their products more efficiently. Sellers can tag their products with several keywords (tags) to better categorize them and improve searchability. Given a collection of products, each with a list of tags, you are asked to implement a function to determine the most frequent tag across all products. If multiple tags have the highest frequency, return an alphabetically sorted list of those tags. The input consists of: - An integer n, the number of products. - Followed by n lines, each containing a space-separated list of tags associated with a product. Return the tag(s) that appear most frequently across all products. If there are multiple tags with the same highest frequency, return them sorted in alphabetical order. The output should be a space-separated string or list of tags with the highest frequency. # Example Input: ``` 5 home kitchen appliance kitchen home mobile laptop electronic fashion clothes clothes fashion ``` Output: ``` clothes fashion home kitchen ```","solution":"from collections import defaultdict def most_frequent_tags(n, products): Given a number of products and their associated tags, determine the most frequent tag(s). If multiple tags have the highest frequency, return them sorted in alphabetical order. tag_count = defaultdict(int) for product in products: tags = product.split() for tag in tags: tag_count[tag] += 1 max_count = max(tag_count.values()) most_frequent = [tag for tag, count in tag_count.items() if count == max_count] return \' \'.join(sorted(most_frequent))"},{"question":"The city of Gridland is arranged in an n x m grid where each cell can hold buildings of different heights. Given the height of buildings in each cell, you need to determine the maximum height difference between any two adjacent cells. Two cells are considered adjacent if they share a common side (i.e., horizontally or vertically). The first line of the input contains two integers n and m (1 ≤ n, m ≤ 500). The next n lines each contain m integers representing the heights of the buildings in the corresponding cells of the grid. The heights of the buildings are non-negative integers no greater than 10^4. Print a single integer representing the maximum height difference between any two adjacent cells. Example Input: ``` 3 3 1 2 4 5 3 8 6 7 9 ``` Example Output: ``` 5 ``` Explanation: - The maximum height difference is between the cells with heights 8 and 3, which differ by 5.","solution":"def max_height_difference(n, m, grid): Returns the maximum height difference between any two adjacent cells in the grid. max_diff = 0 for i in range(n): for j in range(m): if i > 0: max_diff = max(max_diff, abs(grid[i][j] - grid[i-1][j])) if j > 0: max_diff = max(max_diff, abs(grid[i][j] - grid[i][j-1])) if i < n-1: max_diff = max(max_diff, abs(grid[i][j] - grid[i+1][j])) if j < m-1: max_diff = max(max_diff, abs(grid[i][j] - grid[i][j+1])) return max_diff"},{"question":"You are given a string s of length n consisting of only characters \'a\' and \'b\'. Your task is to rearrange the string such that no two adjacent characters are the same. If it is not possible to rearrange the string accordingly, output \\"NO\\". Otherwise, output the rearranged string. The first line of input contains an integer t (1 leq t leq 1,000): the number of test cases. For each test case, the first line contains an integer n (1 leq n leq 100): the length of the string. The second line contains the string s, consisting only of characters \'a\' and \'b\'. Output \\"NO\\" if it is not possible to rearrange the string such that no two adjacent characters are the same. Otherwise, output the rearranged string for each test case on a new line.","solution":"def rearrange_string(s): Rearrange the string s such that no two adjacent characters are the same. If not possible, return \\"NO\\". n = len(s) count_a = s.count(\'a\') count_b = s.count(\'b\') # If the difference between counts of \'a\' and \'b\' is more than 1, it\'s impossible to rearrange if abs(count_a - count_b) > 1: return \\"NO\\" # Create a pattern with alternating characters starting with the more frequent one if count_a > count_b: return \\"ab\\" * count_b + \\"a\\" elif count_b > count_a: return \\"ba\\" * count_a + \\"b\\" else: return \\"ab\\" * count_a def solve(test_cases): results = [] for n, s in test_cases: results.append(rearrange_string(s)) return results"},{"question":"Write a function that takes an array of integers and a \\"flip\\" instruction list where each instruction specifies a start and end index of a subarray (inclusive). Your task is to \\"flip\\" the subarray (reverse the order of elements within it) according to each instruction in the given order, and then return the resulting array. The function should take two parameters: 1. An array of integers. 2. A list of tuples where each tuple contains two integers representing the start and end index of the subarray to be flipped. Example: ```python def flip_array(arr, instructions): # Your code here # Example usage arr = [3, 9, 2, 7, 1, 5] instructions = [(1, 3), (0, 4)] # First, reverse the subarray from index 1 to 3: [3, 7, 2, 9, 1, 5] # Then, reverse the subarray from index 0 to 4: [1, 9, 2, 7, 3, 5] print(flip_array(arr, instructions)) # Output: [1, 9, 2, 7, 3, 5] ``` Ensure that your solution handles edge cases, such as: - Empty array as input. - Instructions that specify out-of-bound indices. - Instructions with the same start and end index (i.e., flipping a single element).","solution":"def flip_array(arr, instructions): Flips subarrays of arr according to the given instructions. Parameters: arr (list of int): The array to be flipped. instructions (list of tuples): A list of tuples, each containing two integers (start, end) indicating the subarray to flip. Returns: list of int: The array after all the flips have been executed. for start, end in instructions: # Ensure the indices are within the bounds if start < 0 or end >= len(arr) or start > end: raise ValueError(\\"Invalid instruction: indices out of bounds or start > end\\") # Flip the subarray from start to end arr[start:end+1] = arr[start:end+1][::-1] return arr"},{"question":"You are given a string s consisting of lowercase Latin letters. You need to answer Q queries, each of which is of one of the following types: 1. Find the number of distinct letters in a given substring. 2. Replace a character at a specified position in the string. The first line contains the string s (1 ≤ |s| ≤ 100,000). The second line contains an integer Q (1 ≤ Q ≤ 100,000) - the number of queries. Each of the following Q lines contains a query in one of the following forms: - \\"1 l r\\" meaning you have to print the number of distinct letters in the substring s[l...r] (1 ≤ l ≤ r ≤ |s|). - \\"2 p c\\" meaning you have to replace the character at position p with the character c (1 ≤ p ≤ |s|, c is a lowercase Latin letter). Output the results of each query of the first type. Each result should be printed on a new line. Input: ``` abcd 5 1 1 4 2 3 x 1 1 4 1 2 4 2 2 y ``` Output: ``` 4 4 3 ```","solution":"class Solution: def __init__(self, s): self.s = list(s) def distinct_letters_in_substring(self, l, r): return len(set(self.s[l-1:r])) def replace_character(self, p, c): self.s[p-1] = c def process_queries(self, queries): results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": l, r = int(parts[1]), int(parts[2]) results.append(self.distinct_letters_in_substring(l, r)) elif parts[0] == \\"2\\": p, c = int(parts[1]), parts[2] self.replace_character(p, c) return results def solve(s, queries): solution = Solution(s) results = solution.process_queries(queries) return results"},{"question":"You are given a string s consisting of lowercase English letters. You need to process q queries of two types: 1. For a query of the first type, you will be given an index i and a character c. You need to change the character at position i in the string to c. Note that the index i is one-based. 2. For a query of the second type, you will be given two indices l and r. You need to count and return the number of distinct characters in the substring of s from index l to r, inclusive. Note that the indices l and r are one-based. The first line of the input contains the initial string s (1 ≤ |s| ≤ 100000). The next line contains an integer q (1 ≤ q ≤ 100000), the number of queries. The next q lines contain queries of either the first or the second type described above. For the first type query, the format is \\"1 i c\\", and for the second type query, the format is \\"2 l r\\". For each query of the second type, output the corresponding result on a new line.","solution":"def process_queries(s, queries): s = list(s) # Convert the string to a list for easy mutation results = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: index = int(parts[1]) - 1 new_char = parts[2] s[index] = new_char elif query_type == 2: l = int(parts[1]) - 1 r = int(parts[2]) - 1 substring = s[l:r+1] distinct_char_count = len(set(substring)) results.append(distinct_char_count) return results"},{"question":"You are given a list of n integers, where the ith integer represents the height at the ith position in a terrain. You need to determine the maximum water that can be trapped between these heights after a rainfall. Each position in the terrain can trap water if there are higher grounds on both sides of it. The amount of water trapped at any position is equal to the minimum height of the higher grounds on both sides minus the height of the position itself. Write a function that takes the list of n integers representing the terrain and returns the total amount of trapped water. **Function Signature:** ```python def trap(height: List[int]) -> int: pass ``` **Input:** - An integer `n` (0 <= `n` <= 10^5) — the number of positions in the terrain. - A list of n integers representing the heights at the ith position. **Output:** - An integer representing the total units of water trapped after the rainfall. **Example 1:** ```python height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(trap(height)) # Output: 6 ``` **Example 2:** ```python height = [4, 2, 0, 3, 2, 5] print(trap(height)) # Output: 9 ``` **Explanation:** In the first example, 6 units of water are trapped. - 1 unit between heights 1 and 2. - 1 unit between heights 2 and 1. - 2 units between heights 1 and 3. - 2 units between heights 2 and 1. So, total water trapped = 1 + 1 + 2 + 2 = 6 units. In the second example, 9 units of water are trapped. - 3 units between heights 4 and 3. - 1 unit between heights 3 and 2. - 5 units between heights 2 and 5. So, total water trapped = 3 + 1 + 5 = 9 units.","solution":"from typing import List def trap(height: List[int]) -> int: if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"You are given a list of integers a consisting of n elements. Your task is to find the maximum length of a contiguous subsequence in the list such that the sum of its elements is an even number. A contiguous subsequence is a part of the list that consists of some consecutive elements. For example, if the list is [1, 2, 3, 4, 5], then [2, 3, 4] is a contiguous subsequence. The first line contains one integer T (1 le T le 100) — the number of test cases. The first line of each test case contains one integer n (1 le n le 10^5) — the number of elements in the list. The second line of each test case contains n integers a[i] (1 le a[i] le 10^9) — the elements of the list. It is guaranteed that the total number of elements in all lists across all test cases does not exceed 10^5. For each test case, print one integer — the maximum length of a contiguous subsequence with an even sum. If no such subsequence exists, print 0.","solution":"def max_even_sum_subseq_length(arr): Returns the maximum length of a contiguous subsequence whose sum is even. total_sum = sum(arr) n = len(arr) # If the total sum is even, the whole array is the longest contiguous subsequence. if total_sum % 2 == 0: return n # Find the lengths of subsequences with odd sums by checking which odd element # we can remove from the beginning or end of the array left_most_odd_index = -1 right_most_odd_index = -1 for i in range(n): if arr[i] % 2 != 0: left_most_odd_index = i break for i in reversed(range(n)): if arr[i] % 2 != 0: right_most_odd_index = i break if left_most_odd_index == -1: return 0 max_length_excl_left_odd = n - left_most_odd_index - 1 # exclude leftmost odd max_length_excl_right_odd = right_most_odd_index # exclude rightmost odd return max(max_length_excl_left_odd, max_length_excl_right_odd) def max_even_sum_subseq(test_cases): results = [] for case in test_cases: n, arr = case results.append(max_even_sum_subseq_length(arr)) return results"},{"question":"Alex is working on a project that requires analyzing a sequence of numbers. He defines a \\"magical sequence\\" as a sequence of non-negative integers where each number follows a special property. The sequence `a1, a2, ..., an` is magical if for every `i` (2 ≤ i ≤ n), the `i-th` number is equal to the sum of the digits of all previous numbers in the sequence modulo 10. Given an integer `n`, construct the lexicographically smallest magical sequence of length `n`. **Input:** - An integer `n` (2 ≤ n ≤ 100) **Output:** - A single line containing the lexicographically smallest magical sequence of length `n`. **Examples:** 1. **Input:** ``` 3 ``` **Output:** ``` 0 0 0 ``` **Explanation:** The sequence starts with `0, 0`. The third number is `0` (sum of digits of `0 + 0 = 0`, and `0 % 10 = 0`). 2. **Input:** ``` 4 ``` **Output:** ``` 0 0 0 0 ``` **Explanation:** The sequence starts with `0, 0, 0`. The fourth number is `0` (sum of digits of `0 + 0 + 0 = 0`, and `0 % 10 = 0`). 3. **Input:** ``` 5 ``` **Output:** ``` 0 0 0 0 0 ``` **Explanation:** The sequence starts with `0, 0, 0, 0`. The fifth number is `0` (sum of digits of `0 + 0 + 0 + 0 = 0`, and `0 % 10 = 0`). **Constraints:** - The sequence should be non-negative. - The sequence should be the lexicographically smallest possible sequence meeting the magical property condition. **Note:** - In these examples, to form the lexicographically smallest sequence, `0` is chosen as it is the smallest non-negative integer. Following the rules provided, the sequence can be formed easily starting with `0`.","solution":"def smallest_magical_sequence(n): Returns the lexicographically smallest magical sequence of length n. if n < 2 or n > 100: raise ValueError(\\"n should be between 2 and 100 inclusive\\") return [0] * n"},{"question":"After a long night of studying potions, Harry, Ron, and Hermione decide to take a break and play a game of wizards\' chess. However, this is no ordinary game of chess. Each move they make has to be carefully calculated to ensure they don\'t land in magical traps laid by the mischievous chessboard. The board is represented by an `m x n` grid, where each cell contains either 0 (an empty space) or 1 (a trap). Harry, starting at the top-left corner, aims to move to the bottom-right corner using the shortest path possible without stepping on traps. Help Harry determine the minimum number of moves required to reach the destination. Harry can only move up, down, left, or right one step at a time. Write a function `min_moves(m: int, n: int, grid: List[List[int]]) -> int` that takes in the dimensions of the grid and the grid itself, and returns the minimum number of moves required. If it\'s not possible for Harry to reach the destination, return -1. # Input - An integer `m` representing the number of rows (1 ≤ m ≤ 100). - An integer `n` representing the number of columns (1 ≤ n ≤ 100). - A 2D list `grid` of size `m x n`, where each element is either 0 or 1. # Output - An integer representing the minimum number of moves required to reach the bottom-right corner, or -1 if it\'s not possible. # Example Example 1: Input: ``` m = 3 n = 3 grid = [ [0, 0, 0], [1, 1, 0], [0, 0, 0] ] ``` Output: ``` 4 ``` Example 2: Input: ``` m = 3 n = 3 grid = [ [0, 1, 0], [1, 1, 0], [0, 0, 0] ] ``` Output: ``` -1 ``` # Constraints - The grid will always have at least one valid path from the top-left corner to the bottom-right corner if `grid[0][0] == 0` and `grid[m-1][n-1] == 0`.","solution":"from typing import List from collections import deque def min_moves(m: int, n: int, grid: List[List[int]]) -> int: if grid[0][0] == 1 or grid[m-1][n-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: r, c, dist = queue.popleft() if r == m - 1 and c == n - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == 0: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"A company maintains an access log to track which employees have entered or left a restricted area. Each access event is recorded in a sequence of log entries. Your task is to determine if an employee has ever re-entered the restricted area without first leaving it. Each log entry is represented by a string in the format \\"NAME ACTION\\", where \\"NAME\\" is the name of the employee (a string of at least 1 and at most 20 alphabetic characters) and \\"ACTION\\" is either \\"enter\\" or \\"exit\\". Input: - The first line contains an integer n (1 ≤ n ≤ 105), the number of log entries. - Each of the next n lines contains a log entry. Output: - Print \\"YES\\" if there is at least one instance where an employee re-entered the restricted area without leaving. - Print \\"NO\\" otherwise. Example: Input: 6 Alice enter Bob enter Alice exit Bob exit Alice enter Alice enter Output: YES Explanation: The last log entry shows Alice entered the area twice consecutively without an exit in between.","solution":"def check_re_entry(log_entries): Determines if an employee re-entered the restricted area without first leaving it. Args: log_entries (list of str): List of log entries with \'NAME ACTION\' format. Returns: str: \\"YES\\" if there is an instance of re-entry without exit, \\"NO\\" otherwise. entry_status = {} for entry in log_entries: name, action = entry.split() if action == \\"enter\\": if entry_status.get(name, \\"exit\\") == \\"enter\\": return \\"YES\\" entry_status[name] = \\"enter\\" elif action == \\"exit\\": entry_status[name] = \\"exit\\" return \\"NO\\""},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. Your task is to find the length of the longest substring of `s` that can contain at most `k` distinct characters. # Input - The first line contains a single integer `n` (1 le n le 2 times 10^5), the length of the string `s`. - The second line contains the string `s` consisting of lowercase English letters. - The third line contains the integer `k` (1 le k le 26). # Output Print a single integer — the length of the longest substring that contains at most `k` distinct characters. # Examples Example 1 # Input ``` 7 abbaccc 2 ``` # Output ``` 4 ``` # Explanation The substring \\"abba\\" contains exactly 2 distinct characters (\\"a\\" and \\"b\\"), which is the maximum possible under the given constraint. Example 2 # Input ``` 5 aabac 1 ``` # Output ``` 2 ``` # Explanation The longest substring containing at most 1 distinct character is \\"aa\\". # Constraints - The length of the substring must be greater than or equal to 1. # Note The problem can be efficiently solved using a sliding window approach, which maintains a window containing at most `k` distinct characters and slides through the string to find the optimal length.","solution":"def longest_substring_with_k_distinct_chars(s, k): Returns the length of the longest substring with at most k distinct characters. n = len(s) if n * k == 0: return 0 left, right = 0, 0 max_length = 1 char_frequency = {} while right < n: char_frequency[s[right]] = char_frequency.get(s[right], 0) + 1 while len(char_frequency) > k: char_frequency[s[left]] -= 1 if char_frequency[s[left]] == 0: del char_frequency[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given a list of `n` integers, where each integer represents the number of pages in a chapter of a book. You are to divide these chapters into `k` contiguous parts such that the maximum sum of pages in any part is minimized. Your task is to determine this minimum possible value. Input: - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 10^5) — the number of chapters and the number of parts. - The second line contains `n` integers separated by spaces, where the `i`-th integer represents the number of pages in the `i`-th chapter (1 ≤ pages_i ≤ 10^4). Output: - Print a single integer representing the minimum possible value of the maximum sum of pages for the created parts. Example: Input: ``` 5 2 100 200 300 400 500 ``` Output: ``` 900 ``` Explanation: In this example, the optimal way to divide the chapters to minimize the maximum number of pages in any part is to split them as [100, 200, 300] and [400, 500]. The maximum sum of pages in the first part is 600 and the second part is 900. The minimum possible value of the maximum sum is 900.","solution":"def find_min_max_pages(n, k, pages): def can_split(mid): current_sum = 0 required_parts = 1 for page in pages: if current_sum + page > mid: required_parts += 1 current_sum = page if required_parts > k: return False else: current_sum += page return True low, high = max(pages), sum(pages) result = high while low <= high: mid = (low + high) // 2 if can_split(mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"You are organizing a coding competition where each participant must complete at least one task from each of the three categories: Easy, Medium, and Hard. There are `e` Easy tasks, `m` Medium tasks, and `h` Hard tasks available. In order to maximize the number of participants, you need to determine the maximum number of participants who can each complete exactly one task from each category. The only line contains three integers `e`, `m`, `h` (`1 ≤ e, m, h ≤ 100`) — the number of Easy, Medium, and Hard tasks respectively. Print one number — the maximum number of participants who can each complete exactly one task from each category. For example, if you have 10 Easy tasks, 8 Medium tasks, and 5 Hard tasks, the maximum number of participants is 5, as there are only 5 Hard tasks available. # Input - An integer `e` (1 ≤ e ≤ 100) — the number of Easy tasks available. - An integer `m` (1 ≤ m ≤ 100) — the number of Medium tasks available. - An integer `h` (1 ≤ h ≤ 100) — the number of Hard tasks available. # Output - An integer representing the maximum number of participants. # Example **Input:** ``` 10 8 5 ``` **Output:** ``` 5 ``` **Input:** ``` 6 7 3 ``` **Output:** ``` 3 ```","solution":"def max_participants(e, m, h): Returns the maximum number of participants who can each complete exactly one task from each category. :param e: Number of Easy tasks available. :param m: Number of Medium tasks available. :param h: Number of Hard tasks available. :return: Maximum number of participants. return min(e, m, h)"},{"question":"Alice and Bob are playing a game with arrays. Alice has an array of integers and Bob challenges her to find a subsequence of this array that satisfies certain conditions. A subsequence is any sequence that can be derived from the array by deleting some or possibly no elements without changing the order of the remaining elements. The challenge is as follows: Alice needs to find a subsequence where the sum of its elements is divisible by a given integer k. Your task is to help Alice and write a function to determine the number of distinct subsequences that meet Bob\'s conditions. # Input - The first line contains two integers, n and k. - n (1 ≤ n ≤ 100) is the length of the array. - k (1 ≤ k ≤ 10) is the integer by which the sum of the subsequence elements must be divisible. - The second line contains n integers, a1, a2, ..., an (1 ≤ ai ≤ 100). # Output - Output a single integer, the number of distinct subsequences whose sum is divisible by k. # Example Input ``` 3 3 1 2 3 ``` Output ``` 3 ``` Explanation The valid subsequences are [3] (sum = 3), [1, 2] (sum = 3), and [1, 2, 3] (sum = 6). Note: A subsequence [1, 3] with sum 4 is not considered as its sum is not divisible by 3. # Constraints - The input allows Alice to explore different subsequences within the size and element range specified. - The output should consider all distinct subsequences that meet the condition. The sum of elements in these subsequences must be divisible by k. Implement the function to determine the number of valid subsequences efficiently.","solution":"def count_valid_subsequences(n, k, array): Returns the number of distinct subsequences whose sum is divisible by k. import itertools count = 0 for r in range(1, n + 1): for subseq in itertools.combinations(array, r): if sum(subseq) % k == 0: count += 1 return count"},{"question":"You are given a tree with `n` nodes and `n-1` edges. Each node is originally painted white. You need to perform `q` operations on this tree, where each operation is one of the following: 1. Paint a node with a color `c` (represented by a positive integer). 2. Query the highest color among the colors of nodes in the subtree rooted at node `u`. The tree is described by its nodes, edges, and the operations. For the paint operation, you will be provided with the node `v` and the color `c`. For the query operation, you will be provided with the node `u`. The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of nodes in the tree and the number of operations. The next `n-1` lines contain two integers each, `u` and `v` (1 ≤ u, v ≤ n) describing an edge between nodes `u` and `v`. The following `q` lines contains either: - `1 v c` (1 ≤ v ≤ n, 1 ≤ c ≤ 10^5) representing a paint operation, or - `2 u` (1 ≤ u ≤ n) representing a query operation. Print the results of all query operations in the order they were presented. Each result should be on a new line. # Example Input: ``` 5 5 1 2 1 3 2 4 2 5 1 2 10 1 3 5 2 1 1 4 20 2 2 ``` Output: ``` 10 20 ```","solution":"class TreeNode: def __init__(self): self.children = [] self.color = 0 def perform_operations(n, q, edges, operations): import sys from collections import defaultdict, deque sys.setrecursionlimit(10**6) # Initializing the nodes nodes = [TreeNode() for _ in range(n + 1)] # Constructing the tree for u, v in edges: nodes[u].children.append(v) nodes[v].children.append(u) # Function to calculate maximum color in the subtree def compute_subtree_max(node_id, parent_id, subtree_max): subtree_max[node_id] = nodes[node_id].color for child in nodes[node_id].children: if child != parent_id: compute_subtree_max(child, node_id, subtree_max) subtree_max[node_id] = max(subtree_max[node_id], subtree_max[child]) # Process operations results = [] for operation in operations: if operation[0] == 1: _, v, c = operation nodes[v].color = c elif operation[0] == 2: _, u = operation subtree_max = defaultdict(int) compute_subtree_max(u, -1, subtree_max) results.append(subtree_max[u]) return results # Example usage: # n, q = 5, 5 # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # operations = [(1, 2, 10), (1, 3, 5), (2, 1), (1, 4, 20), (2, 2)] # print(perform_operations(n, q, edges, operations))"},{"question":"Alice enjoys playing with square matrices. A matrix is called a magic square if the sum of the elements in each row, each column, and both main diagonals are the same. Given an n x n matrix, Alice wants to transform it into a magic square by changing the fewest number of elements possible. To do this, Alice needs to find the minimum number of moves required to transform the matrix into a magic square. A move is defined as changing any single element of the matrix to any other integer. You are given an integer n (1 ≤ n ≤ 50) indicating the size of the matrix and the n x n matrix itself. Calculate the minimum number of moves required to transform the given matrix into a magic square. The first line contains an integer n. Each of the next n lines contains n space-separated integers representing the elements of the matrix. Output a single integer, the minimum number of moves required to make the matrix a magic square. **Sample Input 1** 3 8 1 6 3 5 7 4 9 2 **Sample Output 1** 0 **Sample Input 2** 3 4 8 2 3 4 7 8 1 6 **Sample Output 2** 2","solution":"def num_moves_to_magic_square(n, matrix): This function returns the minimum number of moves required to transform the given n x n matrix into a magic square. A move is defined as changing any single element of the matrix to any other integer. magic_squares = [ [ [8, 1, 6], [3, 5, 7], [4, 9, 2] ], [ [6, 1, 8], [7, 5, 3], [2, 9, 4] ], [ [4, 9, 2], [3, 5, 7], [8, 1, 6] ], [ [2, 9, 4], [7, 5, 3], [6, 1, 8] ], [ [8, 3, 4], [1, 5, 9], [6, 7, 2] ], [ [4, 3, 8], [9, 5, 1], [2, 7, 6] ], [ [6, 7, 2], [1, 5, 9], [8, 3, 4] ], [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ], ] if n != 3: raise ValueError(\\"Currently, the function supports only 3x3 matrices.\\") min_moves = float(\'inf\') for magic in magic_squares: current_moves = 0 for i in range(n): for j in range(n): if matrix[i][j] != magic[i][j]: current_moves += 1 if current_moves < min_moves: min_moves = current_moves return min_moves"},{"question":"A company is organizing a marathon event, and they need to record the finish times of all participants. The participants\' finish times are given in the format \\"HH:MM:SS\\" (hours, minutes, and seconds). Your task is to determine the top N participants with the fastest finish times. The first line of the input contains two integers T and N (1 ≤ T ≤ 10^4, 1 ≤ N ≤ T) — the number of finish times recorded and the number of top participants to be found. Then T lines follow, each containing a string representing the finish time of a participant in the format \\"HH:MM:SS\\". Print the top N participants\' finish times in ascending order, each on a new line. If there are ties, maintain the order of appearance from the input. Example Input: ``` 5 3 02:10:20 01:35:15 01:59:59 03:00:00 01:35:15 ``` Example Output: ``` 01:35:15 01:35:15 01:59:59 ``` Note: In the example, the finish times 01:35:15 appear twice and rank within the top 3 finish times, so they are both included in the output, maintaining their original order from the input.","solution":"def top_finish_times(T, N, times): Returns the top N participants\' finish times in ascending order. Parameters: T (int): Total number of finish times. N (int): Number of top participants to be found. times (list of str): List of finish times in \\"HH:MM:SS\\" format. Returns: list of str: Top N finish times in ascending order. # Convert time strings to tuples of integers for sorting time_tuples = [(time, tuple(map(int, time.split(\':\')))) for time in times] # Sort by the time tuples sorted_times = sorted(time_tuples, key=lambda x: x[1]) # Extract the top N finish times and maintain the original input format return [sorted_times[i][0] for i in range(N)]"},{"question":"You are given a string consisting of lowercase letters and \'?\' characters. Your task is to replace each \'?\' character with a lowercase letter in such a way that no two adjacent characters are the same. The input consists of a single string `s` of length between 1 and 100 inclusive. Output the modified string such that no two adjacent characters are the same. If there are multiple solutions, any of them will be accepted. It is guaranteed that a solution always exists. Example: Input `a?b?` Output `acbd` (input `a?b?` could also be transformed into `azbz` or any other string where no two adjacent characters are the same)","solution":"def replace_question_marks(s): Replaces \'?\' with lowercase letters such that no two adjacent characters are the same. :param s: Input string with lowercase letters and \'?\' characters :return: Modified string with no two adjacent characters being the same s_list = list(s) # Convert string to list to modify it n = len(s_list) for i in range(n): if s_list[i] == \'?\': for ch in \'abcdefghijklmnopqrstuvwxyz\': # Check the previous and next characters if (i > 0 and s_list[i-1] == ch) or (i < n-1 and s_list[i+1] == ch): continue s_list[i] = ch break return \'\'.join(s_list)"},{"question":"You are given an array of integers a of length n and an integer m. Your task is to determine if you can partition the array into exactly two non-empty subarrays such that the sum of the elements in the first subarray is divisible by m and the sum of the elements in the second subarray is also divisible by m. You need to answer q independent queries. The first line of the input contains a single integer q (1 le q le 10^5) - the number of queries. Then q queries follow. The first line of each query contains two integers n and m (2 le n le 2 cdot 10^5, 1 le m le 10^9) - the length of the array and the integer. The second line of each query contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) - the elements of the array. It is guaranteed that the sum of n over all queries does not exceed 2 cdot 10^5 (sum n le 2 cdot 10^5). For each query, output \\"YES\\" if it is possible to partition the array as described, otherwise output \\"NO\\". # Example Input: ``` 3 5 3 1 2 3 4 5 4 5 1 2 3 4 6 2 2 4 6 8 10 12 ``` Output: ``` YES NO YES ``` # Explanation In the first query, the array can be partitioned into [1, 2, 3] and [4, 5]. - The sum of [1, 2, 3] is 6 which is divisible by 3, and the sum of [4, 5] is 9 which is also divisible by 3. In the second query, it is not possible to partition the array into two non-empty subarrays where the sum of each part is divisible by 5. In the third query, the array can be partitioned into [2, 4, 6, 8] and [10, 12]. - The sum of [2, 4, 6, 8] is 20 which is divisible by 2, and the sum of [10, 12] is 22 which is also divisible by 2.","solution":"def can_partition_into_two_subarrays(q, queries): results = [] for query in queries: n, m = query[0] a = query[1] total_sum = sum(a) if total_sum % m != 0: results.append(\\"NO\\") continue left_sum = 0 possible = False for i in range(n - 1): left_sum += a[i] if left_sum % m == 0 and (total_sum - left_sum) % m == 0: possible = True break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a binary tree with `n` nodes, where each node has a unique value between 1 and n. The tree is rooted at node 1. Your task is to calculate the sum of distances from the root to all other nodes in the tree. Input: - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of nodes in the tree. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n) indicating that there is an edge between nodes `u` and `v`. Output: - Output a single integer — the sum of distances from the root node (node 1) to all other nodes in the tree. Example: Input: ``` 5 1 2 1 3 2 4 2 5 ``` Output: ``` 8 ``` Explanation: The distances from the root to each node are: - Distance from 1 to 2: 1 - Distance from 1 to 3: 1 - Distance from 1 to 4: 2 - Distance from 1 to 5: 2 Summing these distances gives 1 + 1 + 2 + 2 = 6. Your task is to write an efficient algorithm that performs the calculations for the given tree structure.","solution":"def sum_of_distances(n, edges): from collections import deque, defaultdict if n == 1: return 0 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) distances = [-1] * n distances[0] = 0 queue = deque([1]) while queue: current = queue.popleft() for neighbor in graph[current]: if distances[neighbor-1] == -1: distances[neighbor-1] = distances[current-1] + 1 queue.append(neighbor) return sum(distances) # Example usage: # n = 5 # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(sum_of_distances(n, edges)) # Output: 6"},{"question":"Given a string `s` consisting of asterisks (\'*\') and period (\'.\') characters only, determine the length of the longest contiguous segment of asterisks. If no asterisks are present in the string, return 0. The input contains one string `s` of length n (1 ≤ n ≤ 100). Output the length of the longest contiguous segment of asterisks. Example: - Input: \\".*.*..***..*\\" - Output: 3 Explanation: The longest contiguous segment of asterisks is \\"***\\", which has a length of 3.","solution":"def longest_contiguous_asterisks(s): Returns the length of the longest contiguous segment of asterisks in the string s. max_length = 0 current_length = 0 for char in s: if char == \'*\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"In a bustling metropolis, the subway system consists of a single looped track connecting several stations. The stations are numbered from 1 to n in a sequential order. Every day, millions of commuters ride this subway and take various routes. To optimize the subway experience, the subway administration wants to determine the minimum number of stops required for any given journey between two stations. Given the total number of stations n and the starting station a and destination station b, you need to write a program to find the minimum number of stops required to travel from station a to station b along the looped track. **Input:** - The first line of input contains an integer n (3 ≤ n ≤ 10^5), the total number of stations. - The second line contains two distinct integers a and b (1 ≤ a, b ≤ n), the starting and destination stations. **Output:** - Print a single integer — the minimum number of stops required to travel from station a to station b. **Example:** ``` Input: 6 2 5 Output: 3 ``` **Explanation:** In the given example, the stations are numbered from 1 to 6. Traveling from station 2 to station 5 directly results in a total of 3 stops. This is the shortest distance considering the looped nature of the subway track.","solution":"def minimum_stops(n, a, b): Returns the minimum number of stops required to travel from station a to station b along a looped track. if a > b: a, b = b, a # Distance traveling forward from a to b forward_distance = b - a # Distance traveling backward from a to b backward_distance = n - b + a # Return the minimum of the two distances return min(forward_distance, backward_distance)"},{"question":"You are given an integer array `nums` and an integer `k`, where `nums` is sorted in non-decreasing order. Your task is to find the `k`-th smallest element in the sorted array. If there are duplicate elements, count each occurrence separately. **Input:** - The first line contains two space-separated integers `n` and `k` (1 ≤ `n` ≤ 10^5, 1 ≤ `k` ≤ `n`), where `n` is the size of the array. - The second line contains `n` space-separated integers `nums[i]` (1 ≤ `nums[i]` ≤ 10^9). **Output:** - Output a single integer, the `k`-th smallest element in the array. **Examples:** **Example 1:** ``` Input: 5 3 1 2 2 4 5 Output: 2 ``` **Example 2:** ``` Input: 4 4 1 1 1 1 Output: 1 ``` **Constraints:** - The array is already sorted in non-decreasing order. - Duplicates are counted as distinct occurrences in terms of their position.","solution":"def find_kth_smallest_element(nums, k): Finds the k-th smallest element in the sorted array nums. return nums[k-1]"},{"question":"You are organizing a treasure hunt event in a large grid-shaped park. The park is represented by an n x m grid, and different cells of the grid either contain a tree, which is inaccessible, or are free spaces where players can move. The task is to check if there is at least one path from the starting point to the treasure point without crossing any trees. The grid is provided as an input where: - \'#\' represents a tree - \'.\' represents a free space - \'S\' represents the starting point - \'T\' represents the treasure point The players can only move up, down, left, or right. Write a function to determine if a path exists from the starting point to the treasure point. Your function should return \\"YES\\" if there is a path and \\"NO\\" otherwise. # Input - The first line contains two integers n and m (2 ≤ n, m ≤ 1000) - the dimensions of the grid. - The next n lines each contain m characters representing the grid. # Output - Output a single string \\"YES\\" or \\"NO\\". # Example Input ``` 5 5 #S# #...# #.# #.... #T# ``` Output ``` YES ``` Input ``` 3 3 S #.# T ``` Output ``` NO ```","solution":"from collections import deque def is_path_exists(n, m, grid): def find_start_and_treasure(): start = treasure = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'T\': treasure = (i, j) return start, treasure def bfs(start, treasure): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == treasure: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" start, treasure = find_start_and_treasure() if not start or not treasure: return \\"NO\\" return bfs(start, treasure)"},{"question":"You are given a rectangular garden of dimension n x m where n is the number of rows, and m is the number of columns. Each cell in the garden can either be empty (represented by \'.\') or have a tree (represented by \'T\'). You need to plant the flowers in the garden such that each flower gets enough sunlight. A flower can be planted on an empty cell only if there are no trees in its row and column. Determine the maximum number of flowers that can be planted in the garden. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 20). The next n lines contain m characters each, representing the garden layout. Output a single integer representing the maximum number of flowers that can be planted. Example: ``` Input: 3 3 ... .T. ... Output: 4 ``` In the example, you can plant a flower in each of the positions (0, 0), (0, 2), (2, 0), and (2, 2).","solution":"def max_flowers_planted(n, m, garden): # Determine the rows and columns that contain trees rows_with_trees = set() cols_with_trees = set() for i in range(n): for j in range(m): if garden[i][j] == \'T\': rows_with_trees.add(i) cols_with_trees.add(j) # Calculate the maximum number of flowers that can be planted max_flowers = 0 for i in range(n): if i not in rows_with_trees: for j in range(m): if j not in cols_with_trees: max_flowers += 1 return max_flowers"},{"question":"You are given a list of integers and your task is to identify and return the first peak element. A peak element in the list is an element that is greater than its neighbors. For the first and the last elements, it is enough to be greater than their one neighbor. For instance, an element in the list is considered a peak if it is greater than both the element immediately before and after it. If there are multiple peak elements, return the position (index) of the first one. If no peak element exists, your function should return -1. Input: - A single line containing a space-separated list of integers. Output: - Print a single integer which is the index (0-based) of the first peak element, or -1 if no peak element exists. # Example: **Input:** ``` 1 3 20 4 1 0 ``` **Output:** ``` 2 ``` **Input:** ``` 10 14 13 15 20 19 ``` **Output:** ``` 1 ``` **Input:** ``` 1 2 3 4 5 ``` **Output:** ``` 4 ``` **Assumptions:** - The list will always have at least one element. - Peak elements may occur multiple times, your function should return the first one encountered. - Adjacent elements can be equal, and they do not count as a peak if they are not strictly greater than their neighbors.","solution":"def find_first_peak(arr): Finds the first peak element in the array. A peak element is greater than its neighbors. Parameters: arr (list): A list of integers. Returns: int: Index of the first peak element or -1 if no peak exists. n = len(arr) if n == 1: return 0 if arr[0] > arr[1]: return 0 if arr[n-1] > arr[n-2]: return n-1 for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: return i return -1"},{"question":"You have a robot on a grid represented by an n x m matrix. The robot starts at the top-left corner and needs to reach the bottom-right corner. Each cell in the matrix contains a number representing the cost to enter that cell. The cost to enter the starting cell is zero. The robot can only move right or down at each step, and it can only pass through cells that are not obstacles. Your task is to find the path from the top-left corner to the bottom-right corner that minimizes the total cost. If there is no valid path, return -1. The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the sizes of the matrix. Next n lines each contains m integers — the cost of each cell. A cell with a cost of -1 represents an obstacle. Print a single integer — the minimum cost to reach the bottom-right corner from the top-left corner or -1 if there is no valid path. Here is an example of the input: ``` 3 4 0 1 2 -1 1 2 3 4 2 -1 2 1 ``` Output: ``` 9 ``` **Explanation:** The optimal path to minimize the cost is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (2,3) with a total cost of 0+1+2+2+2+1=9. If there\'s no valid path, the output should be: ``` -1 ```","solution":"import heapq def min_path_cost(n, m, grid): Finds the minimum path cost from the top-left to the bottom-right corner of the grid. Parameters: - n: number of rows in the grid - m: number of columns in the grid - grid: a list of lists representing the grid where each cell contains the cost to enter that cell Returns: - the minimum cost to reach the bottom-right corner, or -1 if there is no valid path. if grid[0][0] == -1 or grid[n-1][m-1] == -1: return -1 directions = [(1, 0), (0, 1)] # Only down and right movements are allowed min_heap = [(0, 0, 0)] # (cost, row, column) costs = [[float(\'inf\')] * m for _ in range(n)] costs[0][0] = grid[0][0] # Start from the top-left corner while min_heap: current_cost, x, y = heapq.heappop(min_heap) if x == n - 1 and y == m - 1: return current_cost for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != -1: new_cost = current_cost + grid[nx][ny] if new_cost < costs[nx][ny]: costs[nx][ny] = new_cost heapq.heappush(min_heap, (new_cost, nx, ny)) return -1 if costs[n-1][m-1] == float(\'inf\') else costs[n-1][m-1]"},{"question":"You are given a grid with n rows and m columns filled with numbers. Your task is to find the sum of all unique numbers in the grid. Note that a number is considered unique if it appears exactly once in the entire grid. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. Next n lines contain m integers each, representing the elements of the grid. The absolute value of each element does not exceed 10^6. Print a single integer — the sum of all unique numbers in the grid. In the first sample, the unique numbers are 1 and 6. Their sum is 7. In the second sample, there are no unique numbers, so the result is 0.","solution":"def sum_unique_numbers(grid): Returns the sum of all unique numbers in the grid. :param grid: List of lists of integers representing the grid :return: Sum of all unique numbers from collections import Counter # Flatten the grid into a single list flat_list = [num for row in grid for num in row] # Count occurrences of each number num_count = Counter(flat_list) # Sum only the numbers that occurred exactly once unique_sum = sum(num for num, count in num_count.items() if count == 1) return unique_sum"},{"question":"**Rotating Array Elements** You are given an array of integers `arr` of length `n` and an integer `k`. Your task is to rotate the array to the right by `k` steps and then return the first `m` elements of the rotated array. For example, if the array is `[1, 2, 3, 4, 5]`, rotating it by 2 steps to the right will change the array to `[4, 5, 1, 2, 3]`. # Input - The first line contains three integers `n`, `k`, and `m` (1 ≤ n, k, m ≤ 10^5). - The second line contains `n` integers representing the elements of the array `arr` (1 ≤ arr[i] ≤ 10^9). # Output The output should print `m` integers, representing the first `m` elements of the array after rotating it `k` steps to the right, separated by space. # Example Input ``` 5 2 3 1 2 3 4 5 ``` Output ``` 4 5 1 ``` # Explanation The array `[1, 2, 3, 4, 5]` rotated right by 2 steps is `[4, 5, 1, 2, 3]`. The first 3 elements are `4 5 1`.","solution":"def rotate_and_get_first_m(n, k, m, arr): Rotates the array \'arr\' to the right by \'k\' steps and returns the first \'m\' elements of the rotated array. Args: n: int : the length of the array k: int : number of rotations to perform m: int : number of elements to return from the rotated array arr: List[int] : the initial array Returns: List[int] : the first \'m\' elements of the array after rotating k = k % n # To handle cases where k is larger than n rotated_arr = arr[-k:] + arr[:-k] return rotated_arr[:m]"},{"question":"You have been assigned to manage a company\'s product inventory. Each product is represented by its SKU (Stock Keeping Unit) number, and the company wants to track how many times each SKU has been sold. The company\'s sales department will provide a list of SKUs sold in a day, and your task is to determine the SKUs that have been sold the most frequently. Given a list of SKUs, you must identify the SKU(s) with the highest frequency of sales. If multiple SKUs have the same highest frequency, you can return a list of these SKUs in any order. **Input:** - The first line of input contains a single integer `n` (1 ≤ n ≤ 1000) representing the number of SKUs in the sales list. - The second line contains `n` space-separated integers representing the SKUs sold. **Output:** - Print the SKU(s) with the highest frequency. If there are multiple SKUs with the same frequency, print them in any order. **Example:** Input: ``` 10 1 2 2 3 3 3 4 4 4 4 ``` Output: ``` 4 ``` Input: ``` 7 5 5 6 6 7 7 8 ``` Output: ``` 5 6 7 ``` **Explanation:** In the first sample, SKU 4 appears 4 times, which is the highest frequency. In the second sample, SKUs 5, 6, and 7 all appear 2 times, making them the SKUs with the highest frequency. As the order does not matter, you can print 5, 6, and 7 in any order.","solution":"def most_frequent_skus(n, skus): from collections import Counter sku_counter = Counter(skus) max_frequency = max(sku_counter.values()) most_frequent = [sku for sku, freq in sku_counter.items() if freq == max_frequency] return most_frequent"},{"question":"Write a function that receives a string consisting of lowercase alphabetic characters and a positive integer N. The function should rearrange the characters in the string such that no two adjacent characters are the same and the product of frequency of the most frequent character and N is minimized. If it is not possible to rearrange the string to satisfy the conditions, the function should return an empty string. **Function Signature:** ```python def rearrange_string(s: str, N: int) -> str: pass ``` **Input:** - `s`: a string consisting of lowercase alphabetic characters. - `N`: a positive integer representing the factor used to minimize the product of the frequency of the most frequent character. **Output:** - A string `result` rearranged such that no two adjacent characters are the same and the product of frequency of the most frequent character and N is minimized. - If it is not possible to rearrange the string, return an empty string. **Example:** ```python assert rearrange_string(\\"aaabbc\\", 2) == \\"ababac\\" or rearrange_string(\\"aaabbc\\", 2) == \\"ababca\\" assert rearrange_string(\\"aa\\", 3) == \\"\\" ```","solution":"from heapq import heappop, heappush from collections import Counter def rearrange_string(s: str, N: int) -> str: Rearranges the string \'s\' such that no two adjacent characters are the same and the product of the frequency of the most frequent character and \'N\' is minimized. # Count the frequency of each character char_frequency = Counter(s) # Create a max heap from the negative counts. Heapq is a min-heap by default max_heap = [(-freq, char) for char, freq in char_frequency.items()] heappush(max_heap, (0, \'\')) # To handle heap size conditions # Create a list to store the rearranged result result = [] # Variables to keep track of previous character and its frequency prev_count, prev_char = 0, \'\' while max_heap: # Get the most frequent character left in the heap count, char = heappop(max_heap) # Append the character to the result result.append(char) # Since we are using a max heap with negative counts, increase count if prev_count < 0: # Push the previous element back into the heap if it still has count left heappush(max_heap, (prev_count, prev_char)) # Update previous character and frequency prev_count, prev_char = count + 1, char # decrease count because it\'s negative rearranged_string = \'\'.join(result) # Check if rearranged_string meets the requirement of no two adjacent characters being the same for i in range(1, len(rearranged_string)): if rearranged_string[i] == rearranged_string[i - 1]: return \\"\\" return rearranged_string"},{"question":"You are given an array of integers that represent the heights of a collection of mountains. Your task is to find the peak elements in this array. A peak element is an element that is strictly greater than its neighbors. Given an array `heights` of length `n`, where `heights[i]` is the height of the `i-th` mountain, find the number of peak elements in the array. # Input - The first line contains an integer `n` (1 le n le 10^5), the number of elements in the array. - The second line contains `n` integers `heights[i]` (1 le heights[i] le 10^9), the heights of the mountains. # Output - Print one integer, the number of peak elements in the array. # Example Input ``` 5 1 3 2 4 1 ``` Output ``` 2 ``` Explanation - The first peak element is `heights[1] = 3` because it is greater than `heights[0] = 1` and `heights[2] = 2`. - The second peak element is `heights[3] = 4` because it is greater than `heights[2] = 2` and `heights[4] = 1`. - Thus, there are 2 peak elements. # Note - If the array has only one element, it is considered a peak element. - Edge entries of the array can also be peak elements if they are greater than their single neighboring element.","solution":"def count_peak_elements(n, heights): Counts the number of peak elements in an array of integers. :param n: Integer, the number of elements in the array. :param heights: List of integers, the heights of the mountains. :return: Integer, the number of peak elements. if n == 1: return 1 peaks = 0 for i in range(n): if i == 0 and heights[i] > heights[i + 1]: # First element peak peaks += 1 elif i == n - 1 and heights[i] > heights[i - 1]: # Last element peak peaks += 1 elif 0 < i < n - 1 and heights[i] > heights[i - 1] and heights[i] > heights[i + 1]: # Middle peaks peaks += 1 return peaks"},{"question":"There is a rectangular grid with `r` rows and `c` columns, each cell of which contains either `0` or `1`. A path is defined as a sequence of cells starting from the top-left corner (0, 0) to the bottom-right corner (r-1, c-1), moving only right or down at each step. The cost of a path is the number of `1`s in the path. Your task is to find the path with the minimum cost. # Input - The first line contains two integers `r` and `c` (1 <= r, c <= 1000) — the number of rows and columns in the grid. - The next `r` lines contain `c` integers each (either `0` or `1`), representing the grid. # Output - Print a single integer — the minimum cost of a path from the top-left corner to the bottom-right corner. # Example Input ``` 3 3 0 1 1 1 0 1 0 0 0 ``` Output ``` 1 ``` In this example, the minimum cost path is (0,0)->(1,0)->(2,0)->(2,1)->(2,2) with a cost of 1 (only one `1` is encountered at (2,1)). # Note You can use dynamic programming to efficiently calculate the minimum cost path in the grid.","solution":"def min_cost_path(grid): r = len(grid) c = len(grid[0]) # dp array to store the minimum cost to reach each cell dp = [[float(\'inf\') for _ in range(c)] for _ in range(r)] dp[0][0] = grid[0][0] for i in range(r): for j in range(c): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[-1][-1]"},{"question":"You are working on a social networking application, and your task is to implement a feature to help users find their closest friends based on their shared interests. Given a list of users, each with an associated set of interests, you need to identify pairs of users who share the most interests and output these pairs along with the count of their shared interests. For each user, you are given a list of strings representing their interests. Your goal is to find the pair of users who have the highest number of common interests. If there are multiple pairs with the same maximum count of shared interests, print any one of them. Input: - The first line contains a single integer `t` (1 le t le 100) — the number of test cases. - For each test case: - The first line contains an integer `n` (2 le n le 500) — the number of users. - The next `n` lines each contain a string `user_i` (the user\'s name) followed by an integer `m_i` (1 le m_i le 50) — the number of interests the user has, then followed by `m_i` strings representing the interests. Output: For each test case, output a single line containing the names of the two users with the most common interests and the count of their shared interests. If there are multiple pairs, you may print any one of them. If no common interests are found in any pair, print \\"No common interests\\". Example: Input: ``` 2 3 Alice 3 reading painting swimming Bob 2 painting cycling Charlie 3 reading swimming painting 4 Dave 2 football music Eve 3 music football reading Frank 1 origami Grace 1 dancing ``` Output: ``` Alice Charlie 3 Dave Eve 2 ``` Explanation: In the first test case: - Users Alice and Charlie share the interests \\"reading\\", \\"swimming\\", and \\"painting\\" (3 common interests). - Other pairs have fewer or no common interests. In the second test case: - Users Dave and Eve share the interests \\"football\\" and \\"music\\" (2 common interests). - Other pairs have fewer or no common interests.","solution":"def find_closest_friends(test_cases): results = [] for case in test_cases: n = case[\\"n\\"] users = case[\\"users\\"] max_shared_interests = 0 best_pair = (\\"\\", \\"\\") # Go through all pairs of users for i in range(n): for j in range(i + 1, n): user1, interests1 = users[i] user2, interests2 = users[j] shared_interests = len(interests1 & interests2) if shared_interests > max_shared_interests: max_shared_interests = shared_interests best_pair = (user1, user2) if max_shared_interests == 0: results.append(\\"No common interests\\") else: results.append(f\\"{best_pair[0]} {best_pair[1]} {max_shared_interests}\\") return results # Example usage: test_cases = [ { \\"n\\": 3, \\"users\\": [ (\\"Alice\\", {\\"reading\\", \\"painting\\", \\"swimming\\"}), (\\"Bob\\", {\\"painting\\", \\"cycling\\"}), (\\"Charlie\\", {\\"reading\\", \\"swimming\\", \\"painting\\"}) ] }, { \\"n\\": 4, \\"users\\": [ (\\"Dave\\", {\\"football\\", \\"music\\"}), (\\"Eve\\", {\\"music\\", \\"football\\", \\"reading\\"}), (\\"Frank\\", {\\"origami\\"}), (\\"Grace\\", {\\"dancing\\"}) ] } ] results = find_closest_friends(test_cases) for result in results: print(result)"},{"question":"You are given an array of integers nums and an integer target. You need to find the maximum length of a contiguous subarray with a sum less than or equal to target. The first line of input contains two integers n and target (1 ≤ n ≤ 100000, 1 ≤ target ≤ 10^9) — the number of elements in nums and the target sum. The second line contains n integers — the elements of the array nums (1 ≤ nums[i] ≤ 10^9). Print one number — the maximum length of a contiguous subarray with a sum less than or equal to target. If there is no such subarray, print 0.","solution":"def max_subarray_length(nums, target): Returns the maximum length of a contiguous subarray with a sum less than or equal to target. n = len(nums) max_len = 0 current_sum = 0 start = 0 for end in range(n): current_sum += nums[end] while current_sum > target: current_sum -= nums[start] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Alex loves sequences of numbers. Specifically, Alex is fascinated by sequences where the sum of any two adjacent elements is prime. You are given an integer array and need to determine if it\'s possible to rearrange the array such that it meets Alex\'s condition. Given an array of integers, determine if the array can be rearranged such that the sum of any two consecutive elements is a prime number. If it is possible, print \\"YES\\" and any one such arrangement. If it is not possible, print \\"NO\\". # Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers ai (1 ≤ ai ≤ 100) — the elements of the array. # Output If it is possible to rearrange the array to meet the given condition, print \\"YES\\", followed by the sequence that meets the condition. If it is not possible, print \\"NO\\". # Examples Example 1 Input: ``` 3 1 2 3 ``` Output: ``` YES 2 1 3 ``` Example 2 Input: ``` 4 4 6 8 10 ``` Output: ``` NO ```","solution":"from itertools import permutations def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def can_rearrange_with_prime_sums(arr): for perm in permutations(arr): if all(is_prime(perm[i] + perm[i + 1]) for i in range(len(perm) - 1)): return \\"YES\\", perm return \\"NO\\", def sequence_prime_sum(n, array): result = can_rearrange_with_prime_sums(array) if result[0] == \\"NO\\": return \\"NO\\" else: return f\\"YESn{\' \'.join(map(str, result[1]))}\\""},{"question":"You are given a binary string s of length n. Your task is to find a minimum number of operations required to make all characters of this string the same. In one operation, you can choose any character (0 or 1) in the string and flip it (change 0 to 1 or 1 to 0). Input: The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the length of the binary string. The second line of input contains a binary string s of length n. Output: Output the minimum number of operations required to make all characters in the binary string the same.","solution":"def min_operations_to_make_string_uniform(n, s): Returns the minimum number of operations required to make all characters of binary string s the same. # Count the number of \'0\'s and \'1\'s in the string count_0 = s.count(\'0\') count_1 = s.count(\'1\') # The minimum number of operations to make all characters the same return min(count_0, count_1)"},{"question":"Given an integer array `nums`, you need to determine whether the array has an increasing triplet subsequence. An increasing triplet subsequence is a sequence of three numbers (nums[i], nums[j], nums[k]) such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. Write a function `boolean increasingTriplet(int[] nums)` that receives an array of integers, `nums`, as its parameter and returns `true` if there exists an increasing triplet subsequence and `false` otherwise. # Examples: 1. **Input:** `nums = [1, 2, 3, 4, 5]` **Output:** `true` **Explanation:** Among the triplets, one valid sequence is 1, 2, 3. 2. **Input:** `nums = [5, 4, 3, 2, 1]` **Output:** `false` **Explanation:** There is no valid triplet subsequence in this list. 3. **Input:** `nums = [2, 1, 5, 0, 4, 6]` **Output:** `true` **Explanation:** Among the triplets, one valid sequence is 1, 4, 6. # Constraints: * The length of `nums` is in the range `[1, 10^5]`. * The elements of `nums` are in the range `[-2^31, 2^31 - 1]`.","solution":"def increasingTriplet(nums): Determines if the array has an increasing triplet subsequence. Parameters: nums (List[int]): An array of integers. Returns: bool: True if there exists an increasing triplet subsequence, False otherwise. first_num = second_num = float(\'inf\') for num in nums: if num <= first_num: first_num = num # update first_min if num is smaller than first_min elif num <= second_num: second_num = num # update second_min only if num is larger than first_min but smaller than second_min else: # If we find a number larger than both first_num and second_num, we have found our triplet return True return False"},{"question":"Maria is an avid reader and has collected an enormous number of books over the years. She likes to reorganize her library periodically. She wants to place her books on a new set of shelves, arranged by their heights in non-decreasing order. Each book has a height, and Maria wants to ensure that no two books with the same height are placed consecutively on the shelves. If it is impossible to arrange the books this way, Maria wants to know that too. You are given n as the number of books and an array of n positive integers representing the heights of the books. Write a program that either outputs a valid arrangement of the books in non-decreasing order where no two books with the same height are consecutive, or outputs \\"Impossible\\" if such an arrangement cannot be achieved. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of books. - The second line contains n positive integers, each representing the height of a book (1 ≤ height ≤ 10^9). Output: - If a valid arrangement exists, print n integers representing the arrangement of book heights in non-decreasing order such that no two consecutive integers are the same. - If no valid arrangement exists, print \\"Impossible\\". Example 1: Input: 6 2 3 2 4 3 5 Output: 2 3 2 3 4 5 Example 2: Input: 3 1 1 1 Output: Impossible","solution":"from collections import Counter from heapq import heappush, heappop def arrange_books(n, heights): if n == 1: return heights # Count the frequency of each height counter = Counter(heights) # Creating a max heap for the frequencies max_heap = [] for height, count in counter.items(): heappush(max_heap, (-count, height)) result = [0] * n prev_count, prev_height = 0, 0 for i in range(n): if not max_heap: return \\"Impossible\\" count, height = heappop(max_heap) count = -count # Place the current book and update the result result[i] = height # If the previous book is still available, push it back to the heap if prev_count > 0: heappush(max_heap, (-prev_count, prev_height)) # Update the previous book and count prev_count, prev_height = count - 1, height return result"},{"question":"A gardener is planning a rectangular garden with rows and columns. Each cell in the garden can either have a flower, a rock, or be empty. The gardener wants to place a certain type of flower in such a way that there is a flower in each row and each column. Write a program to determine if it\'s possible to place the flowers in the garden such that there is exactly one flower in each row and each column. The cells are represented as follows: - \'.\' represents an empty cell. - \'*\' represents a rock (an impassable cell). The gardener can\'t move or remove the rocks. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the garden. The next n lines each contain m characters — the description of the garden. Output \\"Yes\\" (without the quotes) if it\'s possible to place the flowers such that there is exactly one flower in each row and each column. Otherwise, print \\"No\\". For example: Input: 3 3 ... ... ... Output: Yes Input: 3 3 .*. *.. ..* Output: No","solution":"def can_place_flowers(garden): n = len(garden) m = len(garden[0]) if n > 0 else 0 row_free = [False] * n col_free = [False] * m for i in range(n): for j in range(m): if garden[i][j] == \'*\': row_free[i] = True col_free[j] = True row_count = 0 col_count = 0 for i in range(n): if not row_free[i]: row_count += 1 for j in range(m): if not col_free[j]: col_count += 1 return \\"Yes\\" if row_count == n and col_count == m else \\"No\\""},{"question":"You are given a binary tree with `n` nodes, where each node has a unique value ranging from `1` to `n`. The root of the tree has a value of `1`. Each node can have either `0`, `1`, or `2` children. Your task is to determine the depth of the tree. The depth of a tree is the length of the longest path from the root node to any leaf node. The length is measured in terms of the number of edges in the path. # Input - The first line contains a single integer `t` (1 le t le 1000) — the number of test cases. - The first line of each test case contains a single integer `n` (1 le n le 10^5) — the number of nodes in the binary tree. - The next `n-1` lines for each test case describe the tree, each containing two integers `u` and `v` (1 le u, v le n) which represents an edge between nodes `u` and `v`. # Output For each test case, output a single integer, the depth of the tree. # Example Input: ``` 2 3 1 2 1 3 5 1 2 1 3 2 4 2 5 ``` Output: ``` 1 2 ``` # Explanation In the first test case, there are 2 edges in the tree, and the maximum depth is 1 (1 -> 2 or 1 -> 3). In the second test case, the deepest path from root node `1` is `1 -> 2 -> 4` or `1 -> 2 -> 5`, so the depth is 2.","solution":"from collections import deque, defaultdict def tree_depth(n, edges): Calculate the depth of a tree with `n` nodes and given edges. if n == 1: return 0 # A single node tree has a depth of 0 # Create adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform BFS to find the maximum depth queue = deque([(1, 0)]) # (node, depth) visited = set() max_depth = 0 while queue: node, depth = queue.popleft() visited.add(node) max_depth = max(max_depth, depth) for neighbor in tree[node]: if neighbor not in visited: queue.append((neighbor, depth + 1)) return max_depth def find_tree_depth_for_cases(t, test_cases): results = [] for n, edges in test_cases: results.append(tree_depth(n, edges)) return results"},{"question":"Given a sequence of integers, determine the length of the longest subsequence in which the difference between any two consecutive elements is exactly 1. A subsequence is derived from the sequence by deleting some or no elements without changing the order of the remaining elements. For example: - If the sequence is `1, 2, 3, 4, 5`, the longest subsequence with consecutive differences of 1 can be the entire sequence itself, so the length is 5. - If the sequence is `4, 2, 1, 6, 5`, the longest subsequence can be `4, 5, 6`, where the length is 3. - If the sequence is `10, 9, 4, 5, 4, 8`, one possible longest subsequence is `4, 5, 4`, so the length is 3. Input: The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then, for each test case, the first line contains an integer n (1 ≤ n ≤ 1000) — the length of the sequence, followed by n space-separated integers representing the sequence. Output: For each test case, print a single integer — the length of the longest subsequence where each consecutive element has a difference of exactly 1. Example: Input: ``` 3 5 1 2 3 4 5 5 4 2 1 6 5 6 10 9 4 5 4 8 ``` Output: ``` 5 3 3 ```","solution":"def longest_consecutive_subsequence(t, data): results = [] for i in range(t): n, sequence = data[i] if n == 0: results.append(0) continue sequence.sort() max_length = 1 current_length = 1 for j in range(1, n): if sequence[j] == sequence[j - 1] + 1: current_length += 1 max_length = max(max_length, current_length) elif sequence[j] != sequence[j - 1]: current_length = 1 results.append(max_length) return results"},{"question":"You are given an array of integers of length n. In one move, you can choose any element and increment or decrement it by 1. Your objective is to make all integers in the array equal to the same value with the minimum number of moves. You have to answer q independent test cases. The first line of the input contains one integer q (1 le q le 10^4) — the number of test cases. The first line of the test case contains one integer n (1 le n le 10^5) — the number of elements in the array. The second line of the test case contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^6 (sum n le 10^6). For each test case, print the minimum number of moves required to make all integers in the array equal to the same value. In the first example, you can change the array as follows: [1, 2, 3] rightarrow [2, 2, 2] with two moves (incrementing 1 to 2 and decrementing 3 to 2). In the second example, it is already optimized as all the elements are the same.","solution":"def min_moves_to_equal_array(q, test_cases): results = [] for case in test_cases: n, a = case median = sorted(a)[n // 2] moves = sum(abs(x - median) for x in a) results.append(moves) return results"},{"question":"You are tasked with organizing a series of presentations for a conference. There are n speakers, each with a specific time slot requirement. You have been given a list of time slots of length m. Your job is to assign each speaker to one of these time slots such that no two speakers share the same time slot. If it is not possible to assign a unique time slot to each speaker, output \\"Not possible\\". Otherwise, provide a possible assignment. The first line contains two integers, n and m (1 leq n, m leq 50) − the number of speakers and the number of available time slots, respectively. The second line contains n integers, each representing the required duration of each speaker\'s presentation. The third line contains m integers, each representing the available duration of each time slot. Output \\"Not possible\\" if it is not possible to assign a unique time slot to each speaker. Otherwise, output a string of n integers, each representing the corresponding index (1-based) of the time slot assigned to each speaker. If there are multiple valid solutions, you may output any. **Example:** Input: ``` 3 5 30 45 60 20 30 60 90 45 ``` Output: ``` 2 5 4 ``` In the example, the first speaker can take the second time slot (30), the second speaker can take the fifth time slot (45), and the third speaker can take the fourth time slot (60). If it is not possible to make such assignments, such as if the input was: ``` 4 3 20 30 45 60 20 30 60 ``` The output would be: ``` Not possible ``` Since there are more speakers than time slots.","solution":"def assign_time_slots(n, m, speaker_durations, slot_durations): Assigns each speaker a unique time slot such that no two speakers share the same slot. if m < n: return \\"Not possible\\" # Tries to assign slots by matching duration speaker_durations = sorted([(dur, i) for i, dur in enumerate(speaker_durations)]) slot_durations = sorted([(dur, i) for i, dur in enumerate(slot_durations)]) result = [-1] * n slot_idx = 0 for speaker_duration, speaker_idx in speaker_durations: while slot_idx < m and slot_durations[slot_idx][0] < speaker_duration: slot_idx += 1 if slot_idx == m: return \\"Not possible\\" result[speaker_idx] = slot_durations[slot_idx][1] + 1 slot_idx += 1 return \' \'.join(map(str, result))"},{"question":"You are given a string consisting of lowercase Latin letters and you are allowed to remove at most one character from this string to make it a palindrome. Your task is to check whether it is possible to make the string a palindrome by removing at most one character. A palindrome is a word that reads the same backward as forward. The first line contains an integer m (1 ≤ m ≤ 10^5) — the length of the string. The second line contains the string of length m. Output \\"YES\\" if it is possible to make the string a palindrome by removing at most one character. Otherwise, output \\"NO\\". Example 1: Input: 5 abca Output: YES Example 2: Input: 6 abcdef Output: NO","solution":"def is_possible_palindrome(s: str) -> str: def is_palindrome_range(i, j): return all(s[k] == s[j - k + i] for k in range(i, j)) l, r = 0, len(s) - 1 while l < r: if s[l] != s[r]: if is_palindrome_range(l + 1, r) or is_palindrome_range(l, r - 1): return \\"YES\\" else: return \\"NO\\" l, r = l + 1, r - 1 return \\"YES\\""},{"question":"You are given an array of integers representing the amount of money someone can rob from each house along a street. The constraint is that you cannot rob two adjacent houses, as this will alert the police. You need to determine the maximum amount of money you can rob, given these constraints. The first line contains an integer n indicating the number of houses along the street (1 le n le 10^5). The second line contains n non-negative integers representing the amount of money in each house, where the i-th integer is the amount of money in the i-th house (0 le text{money}[{i}] le 10^4). You need to print one integer - the maximum amount of money you can rob without robbing two adjacent houses. **Example:** Input: ``` 5 1 2 3 1 5 ``` Output: ``` 8 ``` Explanation: In the provided example, the maximum amount of money that can be robbed is achieved by robbing houses with money 1, 3, and 5, as their sum is the highest possible without ever robbing two adjacent houses, giving us a total of 1 + 3 + 5 = 9.","solution":"def max_robbery(n, houses): if n == 0: return 0 if n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] if n > 1: dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i - 1], dp[i - 2] + houses[i]) return dp[-1]"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct integers in the list whose sum is equal to the target integer. Your function should return a boolean value: `True` if such a pair exists and `False` otherwise. You need to implement a function that takes a list of integers and a target integer as input, and outputs a boolean value. Your code should have the following signature: ```python def has_pair_with_sum(nums: List[int], target: int) -> bool: pass ``` # Examples: ```python has_pair_with_sum([10, 15, 3, 7], 17) -> True # 10 + 7 = 17 has_pair_with_sum([1, 2, 3, 4], 8) -> False # No pairs sum to 8 ```","solution":"from typing import List def has_pair_with_sum(nums: List[int], target: int) -> bool: Determines if there are two distinct integers in the list whose sum is equal to the target integer. Parameters: nums (List[int]): A list of integers. target (int): The target integer. Returns: bool: True if such a pair exists, False otherwise. seen_numbers = set() for num in nums: if target - num in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"Alice loves playing with strings. She has two strings, s1 and s2, of lengths n and m respectively. She wants to find out the minimum number of operations required to transform s1 into s2. The operations allowed are: 1. Insert a character at any position in s1. 2. Delete a character from s1. 3. Replace a character in s1 with another character. Write an efficient algorithm to find the minimum number of operations required. The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, the first line contains two integers n and m (1 ≤ n, m ≤ 1000), the lengths of the strings s1 and s2 respectively. The next two lines contain the strings s1 and s2. Print t lines, each containing a single integer – the answer for that test case. Example: ``` Input: 2 5 3 abcde bcd 3 4 abc adc Output: 2 1 ```","solution":"def min_distance(s1, s2): Calculate the minimum number of operations required to transform s1 into s2 using insertion, deletion, and replacement operations. n = len(s1) m = len(s2) # Initialize a matrix to store the minimum edit distances. dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the first row and column. for i in range(n + 1): dp[i][0] = i for j in range(m + 1): dp[0][j] = j # Compute minimum distances. for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1 return dp[n][m] def transform_strings_transformations(t, test_cases): results = [] for idx in range(t): s1 = test_cases[idx][2] s2 = test_cases[idx][3] results.append(min_distance(s1, s2)) return results # Driver function to run the transformation def run_transformations(test_cases_input): t = test_cases_input[0] test_cases = [] index = 1 for i in range(t): n = test_cases_input[index] m = test_cases_input[index + 1] s1 = test_cases_input[index + 2] s2 = test_cases_input[index + 3] test_cases.append((n, m, s1, s2)) index += 4 return transform_strings_transformations(t, test_cases)"},{"question":"You are a software developer tasked with creating an application that performs basic arithmetic operations on very large integers beyond the typical range supported by standard data types. Your primary challenge is to implement a function that takes two extremely large integers as input and returns their sum. # Input The function will receive two strings, `num1` and `num2`, which represent non-negative integers. These integers can have up to 10,000 digits. # Output The function should return a string representing the sum of the two input integers. # Function Signature ```python def large_integer_sum(num1: str, num2: str) -> str: ``` # Example **Input** ```plaintext num1 = \\"123456789012345678901234567890\\" num2 = \\"987654321098765432109876543210\\" ``` **Output** ```plaintext \\"1111111110111111111011111111100\\" ``` # Constraints - The input strings `num1` and `num2` will only contain characters from \'0\' to \'9\'. - Both `num1` and `num2` will not have leading zeros except for when they are exactly \\"0\\". # Notes - You are not allowed to use direct integer conversion functions provided by the programming language such as `int()` in Python. - Instead, you should implement the addition manually, similar to how addition is performed by hand, from right to left, taking carry into account.","solution":"def large_integer_sum(num1: str, num2: str) -> str: This function takes two strings representing large integers and returns their sum as a string. # Ensure num1 is the longer string. Swap if necessary. if len(num1) < len(num2): num1, num2 = num2, num1 # Reverse the input strings to ease addition from right to left num1 = num1[::-1] num2 = num2[::-1] carry = 0 result = [] # Loop over each digit for i in range(len(num1)): digit1 = int(num1[i]) digit2 = int(num2[i]) if i < len(num2) else 0 # Sum the digits including carry total = digit1 + digit2 + carry carry = total // 10 result.append(total % 10) # If there\'s a remaining carry, add it as the most significant digit if carry: result.append(carry) # Re-reverse the result and convert it to a string return \'\'.join(map(str, result[::-1]))"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the number of substrings of the given string that contain exactly one distinct letter. A substring is a contiguous sequence of characters within a string. The first line of input contains a single integer T (1 le T le 10), the number of test cases. Each of the next T lines contains a single string s (1 le |s| le 100) consisting of lowercase English letters. For each test case, print one integer — the number of substrings of the given string that contain exactly one distinct letter. # Example Input: ``` 3 a abc aaa ``` Output: ``` 1 3 6 ``` # Explanation - In the first test case, the substrings are \\"a\\". - In the second test case, the substrings are \\"a\\", \\"b\\", and \\"c\\". - In the third test case, the substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\".","solution":"def count_single_letter_substrings(s): Returns the number of substrings containing exactly one distinct letter. n = len(s) total_count = 0 i = 0 while i < n: count = 1 while i + 1 < n and s[i] == s[i + 1]: count += 1 i += 1 total_count += (count * (count + 1)) // 2 i += 1 return total_count def solve(test_cases): results = [] for s in test_cases: results.append(count_single_letter_substrings(s)) return results"},{"question":"Given a string containing digits from \'0\' to \'9\' and characters \'+\', \'-\', \'*\', and \'/\', write a function to evaluate the arithmetic expression and return the result. The string is guaranteed to be valid and will always have exactly one operator. There will be no spaces in the input string, and the length of the string will not exceed 10 characters. # Input - A single string `expr` which is a valid arithmetic expression of the form \\"a?b\\", where: - `a` and `b` are integers between 0 and 999 inclusive. - `?` is a single operator from the set {\'+\', \'-\', \'*\', \'/\'}. # Output - An integer which is the result of evaluating the arithmetic expression. # Example **Input**: \\"123+456\\" **Output**: 579 **Input**: \\"987-123\\" **Output**: 864 **Input**: \\"5*20\\" **Output**: 100 **Input**: \\"100/25\\" **Output**: 4 # Constraints - The expression will not contain any leading zeros. - Division is integer division, the result should be floored if not divisible evenly.","solution":"def evaluate_expression(expr): Evaluates a simple arithmetic expression containing exactly one operator (+, -, *, /) between two integers and returns the result. Parameters: expr (str): The arithmetic expression as a string. Returns: int: The result of the arithmetic operation. if \'+\' in expr: a, b = expr.split(\'+\') return int(a) + int(b) elif \'-\' in expr: a, b = expr.split(\'-\') return int(a) - int(b) elif \'*\' in expr: a, b = expr.split(\'*\') return int(a) * int(b) elif \'/\' in expr: a, b = expr.split(\'/\') return int(a) // int(b)"},{"question":"You are given a list of intervals representing movies. Each interval is defined by two integers ai and bi (ai < bi), where ai is the starting time of the movie and bi is the ending time. Your goal is to choose a subset of non-overlapping movies such that the total number of movies chosen is the maximum possible. An interval [ai, bi) does not overlap with an interval [aj, bj) if either bi <= aj or bj <= ai. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of movies. Then n lines follow, each containing two integers ai and bi (0 ≤ ai < bi ≤ 10^9) — the starting and ending times of each movie. Output Print a single integer — the maximum number of non-overlapping movies that can be chosen. Example Input: 5 1 3 2 4 3 5 6 8 7 9 Output: 3 Explanation: The maximum number of non-overlapping movies that can be chosen are [1, 3), [3, 5), [6, 8).","solution":"def max_non_overlapping_movies(n, intervals): # Sort intervals by ending time intervals.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = -1 # Iterate through the sorted intervals for start, end in intervals: if start >= last_end_time: count += 1 last_end_time = end return count # Example usage: # movies = [(1, 3), (2, 4), (3, 5), (6, 8), (7, 9)] # n = len(movies) # print(max_non_overlapping_movies(n, movies)) # Output: 3"},{"question":"You are given a string s consisting of lowercase English letters. Define a special operation as choosing any two adjacent characters in the string and swapping them. Determine if it is possible to sort the string in non-decreasing order using exactly k special operations. If it is possible, print \\"YES\\" (without quotes). If it is not possible, print \\"NO\\" (without quotes). # Input - The first line contains an integer n (1 le n le 1000) — the length of the string. - The second line contains an integer k (0 le k le 10^6) — the exact number of special operations allowed. - The third line contains a string s of length n. # Output - Print \\"YES\\" if the string can be sorted in exactly k operations, otherwise print \\"NO\\". # Example # Input ```plaintext 5 4 bcaed ``` # Output ```plaintext YES ``` # Input ```plaintext 4 2 dcba ``` # Output ```plaintext NO ``` # Note: In the first example, you can perform the following operations to sort the string in 4 steps: 1. Swap \'c\' and \'a\': \\"bacde\\" 2. Swap \'a\' and \'b\': \\"abcde\\" 3. Swap \'d\' and \'e\': \\"abced\\" 4. Swap \'c\' and \'e\': \\"abcde\\" In the second example, you need more than 2 swaps to sort it, making it impossible within the given number of operations.","solution":"def can_sort_in_k_operations(n, k, s): Determine if it is possible to sort the string `s` in exactly `k` operations. Parameters: n (int): The length of the string `s`. k (int): The exact number of operations allowed. s (str): The string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be sorted in exactly `k` operations, otherwise \\"NO\\". # Calculate the number of \\"inversions\\" in the string inversions = 0 for i in range(n): for j in range(i + 1, n): if s[i] > s[j]: inversions += 1 # Check if we can achieve the target number of operations min_operations = inversions max_operations = inversions + (n * (n - 1) // 2) - inversions if min_operations <= k <= max_operations: return \\"YES\\" else: return \\"NO\\""},{"question":"You are developing a simple text editor and need to implement a basic search feature to help users find specific words in their documents. The documents consist of multiple lines of text, and the users want to know the line numbers where a given word appears. Your task is to write a function that takes a list of lines (representing the document) and a keyword, and returns a list of integers indicating the line numbers where the keyword appears. The search should be case-insensitive, and the line numbers should be 1-based. If the keyword is present multiple times in the same line, that line number should appear only once in the output list. If the keyword does not appear in any line, return an empty list. # Input - The first line contains an integer n (1 ≤ n ≤ 1000), the number of lines in the document. - The next n lines contain the lines of text. - The last line contains the keyword to be searched. # Output - Print the list of integers representing the line numbers where the keyword appears. The integers should be separated by spaces. # Example Input ``` 5 Hello World This is a simple text editor You can search for words in this text Text editing is fun Keywords are case insensitive Text ``` Output ``` 3 4 ``` In this example, the word \\"Text\\" appears in the third and fourth lines of the document, regardless of its case in the text. # Note - The search should be case-insensitive. - Ensure the line numbers in the output are in ascending order. Now, implement the function according to the described problem.","solution":"def search_keyword(n, lines, keyword): Returns a list of line numbers where the keyword appears in the document. Parameters: n (int): The number of lines in the document. lines (list): A list of n strings, each string is a line in the document. keyword (str): The keyword to search for in the document. Returns: list: A list of integers representing the line numbers where the keyword appears. keyword_lower = keyword.lower() result = [] for i in range(n): line_lower = lines[i].lower() if keyword_lower in line_lower: result.append(i + 1) return result"},{"question":"You are given an undirected graph G=(V,E). Your task is to color the vertices of the graph using the minimum number of colors such that no two adjacent vertices share the same color. You don\'t need to achieve the optimal solution: the fewer the number of colors used, the more points you will receive. The number of scored points is inversely proportional to the number of colors used. You do not need to send the source code of a solution, just provide a valid coloring of the vertices. Download the input data by the link https://assets.example.com/graph-coloring.zip. The problem consists of 4 subtasks called C1, C2, C3, and C4. They differ only by given graphs. Download the inputs by the link https://assets.example.com/graph-coloring.zip. Each input starts with a line containing a pair of integers n, m: the number of vertices, and the number of edges in the graph. Then m lines follow. Each of them describes one edge: it contains a pair of integers a_i, b_i (1 le a_i, b_i le n). Given graphs don\'t contain self-loops (i.e. a_i ne b_i) and multiple edges (there is at most one edge between any pair of vertices). You should submit the output, not the source code. The first line of the output should contain k: the number of colors used. The second line should contain a separated by spaces sequence of integers c_1, c_2, dots, c_n (1 le c_i le k), where c_i represents the color assigned to vertex i. The number of scored points is inversely proportional to the number of colors used.","solution":"def greedy_vertex_coloring(n, m, edges): Greedily colors the graph using a minimum number of colors. Parameters: n (int): Number of vertices m (int): Number of edges edges (list of tuples): List of edges where each edge is represented by a tuple (a_i, b_i) Returns: tuple: Number of colors used and a list representing the colors assigned to each vertex # Initialize color assignment array with all values set to -1 indicating uncolored vertices. colors = [-1] * n # Initialize available colors array to keep track of available colors for each vertex. available = [False] * n # Assign the first color to the first vertex colors[0] = 1 # Using 1-based indexing for colors # Assign colors to remaining n-1 vertices for u in range(1, n): # Process all adjacent vertices and flag their colors as unavailable for i in edges: if i[0] == u+1: if colors[i[1]-1] != -1: available[colors[i[1]-1] - 1] = True elif i[1] == u+1: if colors[i[0]-1] != -1: available[colors[i[0]-1] - 1] = True # Find the first available color clr = 1 while clr <= n: if not available[clr-1]: break clr += 1 # Assign the found color colors[u] = clr # Reset the values back to false for the next iteration for i in edges: if i[0] == u+1: if colors[i[1]-1] != -1: available[colors[i[1]-1] - 1] = False elif i[1] == u+1: if colors[i[0]-1] != -1: available[colors[i[0]-1] - 1] = False # The number of colors used is the maximum color assigned. num_colors_used = max(colors) return num_colors_used, colors"},{"question":"You have been given a collection of n distinct integers, where 1 ≤ n ≤ 1000, and you need to divide this collection into exactly k partiions, where 1 ≤ k ≤ n. Each partition must contain at least one integer, and the sum of integers in each partition must be divisible by m, where 1 ≤ m ≤ 1000. Write a function `count_partitions(n, k, m, arr)` that takes in four parameters: - n: an integer representing the number of elements in the collection - k: an integer representing the number of partitions - m: an integer representing the divisor - arr: a list of n integers representing the collection Your task is to return the number of ways the collection can be partitioned into k groups following the aforementioned constraints. Since the number of ways can be large, return the result modulo 1,000,000,007. # Input: The first line contains three integers n, k, and m. The second line contains n integers representing the collection. # Output: Output a single integer representing the number of ways to partition the collection. # Example: Input: ``` 5 2 5 1 2 3 4 5 ``` Output: ``` 2 ``` Explanation: The collection can be partitioned into two groups: 1. {1, 4} and {2, 3, 5} 2. {2, 3} and {1, 4, 5} In both cases, the sum of integers in each partition is divisible by 5.","solution":"MOD = 1000000007 def count_partitions(n, k, m, arr): def helper(idx, parts_left, current_sum, dp): if parts_left == 0: return int(current_sum == 0) if idx >= n: return 0 if dp[idx][parts_left][current_sum] != -1: return dp[idx][parts_left][current_sum] # Option 1: Do not include arr[idx] in the current part. result = helper(idx + 1, parts_left, current_sum, dp) # Option 2: Include arr[idx] in the current or a new part. result += helper(idx + 1, parts_left - 1, (current_sum + arr[idx]) % m, dp) dp[idx][parts_left][current_sum] = result % MOD return dp[idx][parts_left][current_sum] # dp[idx][k][sum] will store the number of partitions possible dp = [[[-1] * m for _ in range(k + 1)] for _ in range(n)] return helper(0, k, 0, dp) # Example usage print(count_partitions(5, 2, 5, [1, 2, 3, 4, 5])) # Should output a valid result"},{"question":"Natalie was recently introduced to a new sequence operation called split and combine. Given an integer m and a list of n positive integers, she wants to create the largest possible combined number by splitting each number in the list into its individual digits and then combining all these digits. Your task is to help Natalie by writing a program that performs the following operations: 1. Split each number in the list into its individual digits. 2. Combine all the digits obtained in step 1 into one single number in any order to obtain the largest possible number. # Input The first line contains an integer m (1 ≤ m ≤ 10^4), which is the number of elements in the list. The second line contains m positive integers separated by spaces. Each integer is in the range [1, 10^9]. # Output Output the largest possible number that can be formed by combining all the digits from the integer list. # Example Input ``` 3 321 45 987 ``` Output ``` 98754321 ``` Input ``` 5 12 34 56 78 90 ``` Output ``` 9876543210 ```","solution":"def largest_combined_number(m, numbers): Returns the largest possible number that can be formed by combining all digits from a list of numbers. Parameters: m (int): Number of elements in the list. numbers (list of int): List of positive integers. Returns: str: The largest possible combined number as a string. # Extract all digits from the numbers digits = [] for number in numbers: digits.extend(list(str(number))) # Sort the digits in descending order digits.sort(reverse=True) # Combine the sorted digits into a single number largest_number = \'\'.join(digits) return largest_number"},{"question":"A delivery company recently introduced a new efficient delivery method. Each delivery vehicle can hold a maximum of `W` weight units and deliver packages to `N` different locations in a single trip. Each package has a specific weight and a specific delivery location. The goal is to maximize the number of delivery trips without overloading the vehicle. Given the capacity of the vehicle, the number of locations, and the weight and delivery location for each package, determine the minimum number of trips required to deliver all packages without exceeding the weight capacity. # Input The first line contains an integer `W` (1 ≤ W ≤ 10000), the maximum weight capacity of the vehicle. The second line contains an integer `N` (1 ≤ N ≤ 1000), the number of packages. Each of the next `N` lines contains two integers: - `wi` (1 ≤ wi ≤ 1000): the weight of the package. - `li` (1 ≤ li ≤ 1000): the delivery location for the package. # Output Print a single integer: the minimum number of trips required to deliver all packages. # Example Input ``` 100 5 30 1 40 2 20 1 10 3 50 2 ``` Output ``` 2 ``` # Explanation In the first trip, the vehicle can deliver packages (30, 1), (20, 1), and (10, 3) with a total weight of 60 units. In the second trip, the vehicle can deliver packages (40, 2) and (50, 2) with a total weight of 90 units. Thus, a total of 2 trips are required.","solution":"def min_delivery_trips(W, N, packages): # Sort packages by delivery location in ascending order packages.sort(key=lambda x: x[1]) trips = 0 current_weight = 0 for weight, location in packages: # Check if adding this package exceeds current trip weight capacity if current_weight + weight > W: trips += 1 # Start a new trip current_weight = weight else: current_weight += weight if current_weight > 0: trips += 1 return trips # Example usage W = 100 N = 5 packages = [(30, 1), (40, 2), (20, 1), (10, 3), (50, 2)] print(min_delivery_trips(W, N, packages)) # Output should be 2"},{"question":"You have a rectangular grid with n rows and m columns. Each cell in the grid is either empty, contains an obstacle, or contains a coin. You are initially in the top-left corner of the grid and you want to collect all the coins in the grid and move to the bottom-right corner of the grid. You can move either right or down from any cell. Write a program to find the maximum number of coins you can collect when you move from the top-left corner to the bottom-right corner. Each cell in the grid can be represented as one of the following: - \'.\' (dot) for an empty cell - \'#\' (hash) for a cell containing an obstacle - \'C\' (capital letter C) for a cell containing a coin The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines represent the grid, each of which contains m characters. Print a single integer — the maximum number of coins that can be collected during the traversal from the top-left to the bottom-right corner of the grid. If it\'s impossible to reach the bottom-right corner, print -1. **Example:** Input: ``` 3 4 .C.. .CC. #..C ``` Output: ``` 4 ``` In this example, you can collect 4 coins by moving through the path (0,1) -> (1,1) -> (1,2) -> (1,3) -> (2,3).","solution":"def max_coins_collected(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 dp = [[-1] * m for _ in range(n)] dp[0][0] = 1 if grid[0][0] == \'C\' else 0 for i in range(n): for j in range(m): if grid[i][j] == \'#\': continue if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + (1 if grid[i][j] == \'C\' else 0)) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + (1 if grid[i][j] == \'C\' else 0)) return dp[n-1][m-1] if dp[n-1][m-1] != -1 else -1"},{"question":"You are given a rectangular matrix containing only 0s and 1s. A rectangle is formed by picking two rows and two columns in such a way that all four corners are 1. Your task is to determine if there is at least one rectangle (formed only by the 1s) present in the given matrix. Input Format: - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns of the matrix. - The next n lines contain m integers (either 0 or 1) separated by space. Output Format: - Print \\"YES\\" if there is at least one rectangle in the matrix, otherwise print \\"NO\\". Example 1: Input: 4 5 1 0 0 1 0 0 1 1 0 1 1 0 0 1 0 0 1 1 0 1 Output: YES Example 2: Input: 3 3 0 1 0 1 0 1 0 1 0 Output: NO Explanation: In the first example, we can form a rectangle with 1s using the first and third rows and the first and fourth columns. In the second example, no such rectangle can be formed.","solution":"def has_rectangle(matrix): Checks if there exists at least one rectangle formed by 1s in the given matrix. :param matrix: List of List of integers (0 or 1) :return: \\"YES\\" if a rectangle is found, otherwise \\"NO\\" n = len(matrix) m = len(matrix[0]) # Create a dictionary to store pairs of columns that have 1s in the same row column_pairs = {} for row in matrix: for i in range(m): if row[i] == 1: for j in range(i + 1, m): if row[j] == 1: if (i, j) in column_pairs: return \\"YES\\" column_pairs[(i, j)] = True return \\"NO\\" # Example usage: # Uncomment the lines below to test the function directly # n, m = 4, 5 # matrix = [ # [1, 0, 0, 1, 0], # [0, 1, 1, 0, 1], # [1, 0, 0, 1, 0], # [0, 1, 1, 0, 1] # ] # print(has_rectangle(matrix)) # Output: \\"YES\\""},{"question":"You are given a large dataset containing details of employees in a company. Each employee record contains details such as employee ID, name, department, and salary. You need to summarize the data to provide insights for decision making. Specifically, you are required to write a program to calculate the total salary, average salary, and the number of employees in each department. Input: - The first line contains an integer n (1 ≤ n ≤ 10^6) representing the number of employees. - The following n lines each contain details of an employee in the format: employee_id, name, department, salary, where: - employee_id is a unique identifier for the employee. - name is a string representing the employee\'s name. - department is a string representing the department\'s name. - salary is an integer representing the employee\'s annual salary. Output: - For each department, print the department name, followed by the total salary, average salary (rounded down to the nearest integer), and the number of employees in that department. Sample Input: ``` 5 1 Alice HR 50000 2 Bob Engineering 75000 3 Charlie HR 60000 4 David Engineering 72000 5 Eva Sales 45000 ``` Sample Output: ``` HR 110000 55000 2 Engineering 147000 73500 2 Sales 45000 45000 1 ```","solution":"def summarize_employees(data): from collections import defaultdict import math department_summary = defaultdict(lambda: {\'total_salary\': 0, \'employee_count\': 0}) for record in data: employee_id, name, department, salary = record.split() salary = int(salary) department_summary[department][\'total_salary\'] += salary department_summary[department][\'employee_count\'] += 1 result = [] for department, summary in department_summary.items(): total_salary = summary[\'total_salary\'] employee_count = summary[\'employee_count\'] average_salary = total_salary // employee_count # Integer division for rounding down result.append((department, total_salary, average_salary, employee_count)) return result"},{"question":"You are given a sequence of integers of length n. The sequence has its starting index at 1 and ending index at n. You can perform multiple operations in the sequence. In one operation, you can select any sub-sequence of length k and reverse it. Your goal is to sort the sequence in non-decreasing order with the minimum number of operations. Output the minimum number of such operations required to sort the sequence. The first line contains a single integer t (1 leq t leq 10^3), the number of test cases. The description of each test case is given as follows: For each test case, the first line contains two integers n and k (2 leq n leq 10^5, 2 leq k leq n) – the length of the sequence and the length of the sub-sequence that can be reversed in an operation, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), representing the sequence. The sum of n over all test cases does not exceed 10^6. For each of the t test cases, print a single integer – the minimum number of operations needed to sort the sequence. It is guaranteed that it is always possible to sort the sequence using the given operation.","solution":"def min_operations_to_sort(t, test_cases): results = [] for case in test_cases: n, k = case[\'n\'], case[\'k\'] a = case[\'a\'] # Minimum number of operations needed operations = (n - 1) // (k - 1) results.append(operations) return results"},{"question":"You are given n integers, possibly repeated, and you need to form a sequence by placing the same integers together in a contiguous segment. You may perform the following operation zero or more times: choose two adjacent integers in the sequence and swap them. You want to determine the minimum number of swaps required to transform the sequence into one where all identical integers are contiguous. The first line contains one integer n (2 le n le 100) — the number of integers. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le n) — the sequence of integers. Output an integer representing the minimum number of swaps needed. If the sequence is already arranged such that all identical integers are contiguous, output 0. Examples: Input: ``` 5 2 1 2 1 2 ``` Output: ``` 2 ``` Explanation: - Swap the second and third integers: [2, 2, 1, 1, 2] - Swap the fourth and fifth integers: [2, 2, 1, 2, 1] - Swap the third and fourth integers: [2, 2, 2, 1, 1] In two moves, all identical integers are contiguous.","solution":"def min_swaps_to_make_contiguous(arr): from collections import Counter def min_swaps(arr, value): n = len(arr) pos = [i for i in range(n) if arr[i] == value] d = 0 moves = 0 for i, pos_i in enumerate(pos): moves += abs(pos_i - (i + d)) if arr[i + d] != value: d += 1 return moves element_counts = Counter(arr) min_moves = float(\'inf\') for value in element_counts: moves = min_swaps(arr, value) min_moves = min(min_moves, moves) return min_moves"},{"question":"You are given a list of integers and an integer target value. Write a function that determines if there are two distinct integers in the list that add up to the target value. If such a pair exists, return `True`, otherwise return `False`. The input consists of two parts: 1) A single line containing space-separated integers which represent the list of integers. 2) A single line containing the target integer value. Output either `True` if a pair exists that adds up to the target, or `False` if no such pair exists. Constraints: - All integers are between -1000 and 1000, inclusive. - The size of the list is between 1 and 1000, inclusive. Sample Input: 1 2 3 4 5 9 Sample Output: True Sample Input: 1 2 3 4 5 10 Sample Output: False","solution":"def two_sum(nums, target): Determines if there are two distinct integers in the list that add up to the target value. Args: nums (list of int): List of integers. target (int): Target integer value. Returns: bool: True if there exists a pair of distinct integers in the list that add up to the target, False otherwise. seen = set() for num in nums: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"Two friends are playing a game where they start with an integer array `A` of length `n`. On each player\'s turn, they must choose a non-empty subarray of `A` and remove it. The game continues until all elements of the array are removed. The player who can\'t make a move loses. Determine which player wins if both play optimally. If the first player wins, print \\"First\\". Otherwise, print \\"Second\\". The first line contains a single integer `n` (1 ≤ `n` ≤ 1000) — the length of the array. The second line contains `n` integers `A_1, A_2, ..., A_n` (1 ≤ `A_i` ≤ 10^9) — the elements of the array. Print \\"First\\" if the first player wins, and \\"Second\\" if the second player wins. **Example:** - Input: ``` 4 1 2 3 4 ``` Output: ``` First ``` Explanation: The first player can remove the entire array in all his turns, leaving no elements for the second player. So, the first player wins.","solution":"def determine_winner(n, array): Determine the winner of the game based on the length of the array. Parameters: n (int): Length of the array. array (list): List of integers representing the array. Returns: str: \\"First\\" if the first player wins, \\"Second\\" if the second player wins. if n % 2 == 1: return \\"First\\" else: return \\"Second\\""},{"question":"A tech company wants to incentivize its employees by awarding them bonuses based on their productivity. The productivity of an employee over n weeks is given as an array of integers, where each entry represents the number of tasks completed in that week. However, due to various reasons (holidays, meetings, etc.), not all weeks contribute equally to the employee\'s overall productivity. Therefore, the company decides to consider only the top `k` weeks out of `n` to calculate the bonus. You are required to write a function to determine the total number of tasks completed in these top `k` weeks. The function should take in two parameters: the productivity array of length `n` and an integer `k` (1 ≤ k ≤ n). # Input - An integer `n` (1 ≤ n ≤ 1000) — the number of weeks. - An array of integers of length `n` — the productivity of the employee for each of the given weeks. - An integer `k` (1 ≤ k ≤ n) — the number of top weeks to consider for bonus calculation. # Output - A single integer — the total number of tasks completed in the top `k` weeks. # Example Example 1 **Input:** ``` n = 5 productivity = [10, 20, 30, 25, 15] k = 3 ``` **Output:** ``` 75 ``` (Explanation: The top 3 productive weeks are 30, 25, and 20, so the total is 30 + 25 + 20 = 75) Example 2 **Input:** ``` n = 4 productivity = [5, 3, 8, 6] k = 2 ``` **Output:** ``` 14 ``` (Explanation: The top 2 productive weeks are 8 and 6, so the total is 8 + 6 = 14) Ensure your solution is efficient to handle the maximum inputs within reasonable time limits.","solution":"def top_k_weeks_total(n, productivity, k): Returns the total number of tasks completed in the top k productive weeks. Parameters: - n (int): the number of weeks. - productivity (list of int): the productivity of the employee for each week. - k (int): the number of top weeks to consider for bonus calculation. Returns: - int: the total number of tasks completed in the top k weeks. # Sort the productivity array in descending order to get the top k productive weeks top_k_productivity = sorted(productivity, reverse=True)[:k] # Sum the top k productive weeks total_tasks = sum(top_k_productivity) return total_tasks"},{"question":"Write a function to check if a given string containing just the characters `(` and `)` is valid. A string is considered valid if: 1. Open parentheses must be closed by the same type of parentheses. 2. Open parentheses must be closed in the correct order. 3. Every close parenthesis has a corresponding open parenthesis before it. **Function Signature:** ```python def is_valid_parenthesis(s: str) -> bool: ``` **Input:** - `s`: a string containing just the characters `(` and `)`. **Output:** - Returns `True` if the string is valid, `False` otherwise. **Examples:** ```python # Example 1 input: \\"()\\" output: True # Example 2 input: \\"()()\\" output: True # Example 3 input: \\"(())\\" output: True # Example 4 input: \\"(()\\" output: False # Example 5 input: \\")(\\" output: False # Example 6 input: \\"())\\" output: False ``` **Explanation:** 1. In Example 1, the string has balanced parentheses; every open parenthesis `(` is properly closed by a corresponding close parenthesis `)`. 2. In Example 2, the string has balanced parentheses in correct order. 3. In Example 3, the nested parentheses are closed correctly. 4. In Example 4, there is an unmatched open parenthesis. 5. In Example 5, the close parenthesis `)` comes before an open parenthesis `(`. 6. In Example 6, there is an unmatched close parenthesis. **Constraints:** - The length of the input string `s` will be in the range from `1` to `10^5`.","solution":"def is_valid_parenthesis(s: str) -> bool: Checks if a string containing just the characters \'(\' and \')\' is valid. stack = [] for char in s: if char == \'(\': stack.append(\'(\') elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are given an array `a` of length `n`, which contains integers between `1` and `n`, but they are not guaranteed to be unique. In one operation, you can choose two equal adjacent elements and remove them from the array, shifting all subsequent elements leftward. For example, if you have the array `[2, 1, 1, 3]`, you can remove `1, 1` which gives the new array `[2, 3]`. Determine the minimum number of operations required to make all the elements in the array distinct. The first line contains a single integer `t` (`1 ≤ t ≤ 2 * 10^4`) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer `n` (`2 ≤ n ≤ 3 * 10^5`) — the length of the array. The second line of each test case contains `n` integers `a_1`, `a_2`, ..., `a_n` (`1 ≤ a_i ≤ n`) — elements of the array. It is guaranteed that the sum of `n` over all test cases doesn\'t exceed `3 * 10^5`. For each test case, output a single integer representing the minimum number of operations required to make the array elements distinct. **Example**: Input: ``` 3 4 2 1 1 3 5 4 4 4 4 4 5 1 2 3 4 5 ``` Output: ``` 1 2 0 ``` In the first example, you need 1 operation to remove the two `1`s. In the second example, you need 2 operations to remove pairs of `4`s, resulting in a single `4`. In the third example, all elements are already distinct, requiring 0 operations.","solution":"def min_operations_to_make_distinct(t, test_cases): def count_operations(arr): from collections import Counter counts = Counter(arr) operations = 0 for count in counts.values(): if count > 1: operations += (count // 2) return operations results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(count_operations(arr)) return results"},{"question":"# Allocate Tasks to Workers You have a work schedule to assign tasks to workers. Each task requires a specific time to complete, and each worker has a maximum number of hours they can work per day. The goal is to determine the minimum number of workers needed to complete all tasks within one day. The first line of input contains an integer n (1 ≤ n ≤ 1000) — the number of tasks. Each of the following n lines contains an integer t_i (1 ≤ t_i ≤ 1000) — the time required to complete the i-th task. The last line of input contains an integer h (1 ≤ h ≤ 1000) — the maximum number of hours each worker can work in one day. Output the minimum number of workers required to complete all the tasks within a single day. # Example: Input ``` 5 4 3 2 5 6 8 ``` Output ``` 3 ``` Explanation In the given example, there are 5 tasks with times [4, 3, 2, 5, 6] and each worker can work a maximum of 8 hours. One way to distribute the tasks is: - Worker 1: 4 hours, 3 hours (total 7 hours) - Worker 2: 5 hours (total 5 hours) - Worker 3: 6 hours, 2 hours (total 8 hours) Thus, a total of 3 workers are required.","solution":"def min_workers_to_complete_tasks(task_times, max_hours_per_worker): task_times.sort(reverse=True) workers = [] for task_time in task_times: placed = False for i in range(len(workers)): if workers[i] + task_time <= max_hours_per_worker: workers[i] += task_time placed = True break if not placed: workers.append(task_time) return len(workers) # Helper function to read input and call the main logic def allocate_tasks_to_workers(n, task_times, max_hours_per_worker): return min_workers_to_complete_tasks(task_times, max_hours_per_worker)"},{"question":"In a small town, there is a special type of service for the transportation of goods. This service consists of multiple trucks, each of which can carry a certain maximum weight of goods. The town\'s residents often need to move goods, and they rely on this service to select the appropriate truck based on the weights of their goods. Given a list of trucks with their maximum capacities and a list of goods with their weights, you need to determine for each good whether it can be loaded into at least one truck. If so, identify the truck with the smallest capacity that can carry the good. If no such truck exists, indicate that the good cannot be transported. The first line contains an integer t (1 ≤ t ≤ 10^5) — the number of trucks. Each of the next t lines contains a single integer ci (1 ≤ ci ≤ 10^5) — the maximum capacity of the ith truck. The next line contains an integer g (1 ≤ g ≤ 10^5) — the number of goods. Each of the next g lines contains a single integer wi (1 ≤ wi ≤ 10^5) — the weight of the ith good. Output g lines, each containing either the minimum capacity of a truck that can carry the respective good or -1 if no such truck exists. Ensure the output is in the same order as the goods are in the input.","solution":"def find_truck_for_goods(trucks, goods): Determine the best fitting truck for each good based on truck capacities. Parameters: trucks (list of int): List of truck capacities goods (list of int): List of goods weights Returns: list of int: List of minimum truck capacities that can carry each good or -1 if no such truck exists sorted_trucks = sorted(trucks) result = [] for good in goods: left, right = 0, len(sorted_trucks) - 1 best_fit = -1 while left <= right: mid = (left + right) // 2 if sorted_trucks[mid] >= good: best_fit = sorted_trucks[mid] right = mid - 1 else: left = mid + 1 result.append(best_fit) return result"},{"question":"A software company has a tool that can generate software license keys. Each license key is a string of alphanumeric characters. The company wants to make sure that every license key is valid and follows certain rules to ensure security. Each license key must meet the following criteria: 1. It must be exactly 16 characters long. 2. It must contain at least: - One uppercase letter (`A`-`Z`) - One lowercase letter (`a`-`z`) - One digit (`0`-`9`) 3. All characters in the key must be alphanumeric (i.e., `A`-`Z`, `a`-`z`, `0`-`9`). Given a string `key` which is a license key generated by the tool, your task is to write a function `is_valid_license` that determines whether the license key is valid based on the rules mentioned above. # Function Signature ```python def is_valid_license(key: str) -> bool: ``` # Input - `key`: A string representing the generated license key. (1 ≤ `len(key)` ≤ 100) # Output - Return `True` if the license key is valid according to the given rules; otherwise, return `False`. # Example ```python print(is_valid_license(\\"A1b2C3d4E5f6G7h\\")) # Output: True print(is_valid_license(\\"1234567890abcdef\\")) # Output: False ``` # Note In the second example, the license key contains both lower and uppercase letters, and digits, but does not meet the length requirement. Hence, it is invalid.","solution":"def is_valid_license(key: str) -> bool: Checks if a license key is valid. A license key is valid if: - It is exactly 16 characters long. - It contains at least one uppercase letter, one lowercase letter, and one digit. - All characters in the key are alphanumeric. if len(key) != 16: return False has_upper = False has_lower = False has_digit = False for char in key: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True else: return False return has_upper and has_lower and has_digit"},{"question":"You are working on implementing a new feature for a social media platform. The platform represents its user relationships as a directed graph, where each user is a node, and each directed edge (u, v) signifies that user u follows user v. Your task is to identify all users (nodes) that are \\"influencers.\\" A user is considered an influencer if they are followed by at least three distinct users. Write a function `find_influencers` that takes an integer n (the number of users) and a list of tuples follows (the directed edges in the graph) where each tuple (u, v) represents that user u follows user v. The function should return a list of users that are influencers. **Input:** - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of users. - The second line contains an integer m (1 ≤ m ≤ 200,000) — the number of directed edges. - Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — representing a directed edge from user u to user v. **Output:** - Output a list of integers, the user IDs of all influencers, sorted in ascending order. **Example:** Input: ``` 5 6 1 2 2 3 3 4 4 1 3 1 5 1 ``` Output: ``` [1] ``` In this example, user 1 is followed by users 4, 3, and 5 making them an influencer. Other users are not followed by at least three distinct users.","solution":"def find_influencers(n, follows): Identifies all influencers. An influencer is a user followed by at least three distinct users. Parameters: n (int): Number of users. follows (list): List of tuples where each tuple (u, v) represents that user u follows user v. Returns: list: List of influencers sorted in ascending order. from collections import defaultdict # Dictionary to count followers of each user followers_count = defaultdict(int) for u, v in follows: followers_count[v] += 1 # Find users with at least 3 followers influencers = [user for user, count in followers_count.items() if count >= 3] return sorted(influencers)"},{"question":"You are given a binary tree with `n` nodes. Each node contains a positive integer data value. The binary tree follows the property that for any given node, its left child has a value less than the node\'s value, and its right child has a value greater than the node\'s value. Your task is to find the maximum sum of values from the root to any leaf in the binary tree. In the input, the first line contains an integer `t` (1 le t le 10^3)— the number of test cases. Each test case starts with the integer `n` (1 le n le 10^4)— the number of nodes in the binary tree. Then each of the following `n` lines contains three integers `node_value`, `left_child`, and `right_child`. - `node_value` (1 le value le 10^4) is the value of the node. - `left_child` and `right_child` are either integer values indicating the node value of the respective child node or -1 if the child does not exist. Print `t` integers — the answers for each test case. Each answer should contain an integer equal to the maximum sum of values from the root to any leaf for that binary tree. For example: ``` Input 1 5 10 7 15 7 -1 9 15 13 20 13 -1 -1 9 -1 -1 20 -1 -1 Output 45 ```","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_values): nodes = {} for value, left, right in node_values: if value not in nodes: nodes[value] = TreeNode(value) if left != -1: if left not in nodes: nodes[left] = TreeNode(left) nodes[value].left = nodes[left] if right != -1: if right not in nodes: nodes[right] = TreeNode(right) nodes[value].right = nodes[right] return nodes[node_values[0][0]] # Return root node def max_sum_path(root): if not root: return 0 max_left = max_sum_path(root.left) max_right = max_sum_path(root.right) return root.value + max(max_left, max_right) def max_sum_from_root_to_leaf(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] # number of nodes node_values = test_cases[i][1:] # list containing (node_value, left_child, right_child) tuples root = build_tree(node_values) results.append(max_sum_path(root)) return results"},{"question":"Arin is fascinated by permutations of numbers. Recently, he learned about the concept of \\"beautiful\\" permutations. A permutation of numbers is considered beautiful if the absolute difference between any two consecutive elements is at most 1. Given an integer n, Arin wants to count the number of beautiful permutations of numbers from 1 to n. The only line of the input contains an integer n (1 ≤ n ≤ 10^6) indicating the length of the permutation. Output a single integer — the number of beautiful permutations of length n. Example: Input: 4 Output: 1 Explanation: For n = 4, the only beautiful permutation is [1, 2, 3, 4]. Any other permutation will have at least one pair of consecutive elements having an absolute difference greater than 1.","solution":"def beautiful_permutations_count(n): Given an integer n, return the number of beautiful permutations of numbers from 1 to n. A beautiful permutation is one where the absolute difference between consecutive elements is at most 1. return 1"},{"question":"In a galaxy far, far away, there exists a special type of robot called the Integer Robot. This robot can perform specific operations on a list of integers. You are tasked with emulating the Integer Robot\'s capabilities with the following commands: 1. **Increment**: Adds a value `v` to each element in the list. 2. **Multiply**: Multiplies each element in the list by a value `v`. 3. **Max_Query**: Returns the maximum value currently in the list. The Integer Robot operates on a list of `n` integers initially set to zero. It processes `q` queries in the following format: - \\"1 v\\" - Increment operation (1 ≤ v ≤ 10^6) - \\"2 v\\" - Multiply operation (1 ≤ v ≤ 10^6) - \\"3\\" - Max_Query operation The robot will perform each query in order and you need to output results for all Max_Query types. # Input: - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `q` (1 ≤ q ≤ 10^5) - the number of integers in the list and number of queries, respectively. - The next `q` lines contain queries in the format described above. # Output: - For each Max_Query operation, output the maximum value in the list on a new line. # Example: Input: ``` 5 6 1 10 3 2 2 3 1 5 3 ``` Output: ``` 10 20 25 ``` Can you solve the Integer Robot\'s problem and return the correct outputs?","solution":"def integer_robot(n, q, queries): Emulates the Integer Robot\'s operations on a list of integers. Parameters: n (int): Number of integers in the initial list (all zeros). q (int): Number of queries. queries (list of str): List of queries to be processed. Returns: list of int: Results for all Max_Query operations. lst = [0] * n results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": # Increment operation v = int(parts[1]) lst = [x + v for x in lst] elif parts[0] == \\"2\\": # Multiply operation v = int(parts[1]) lst = [x * v for x in lst] elif parts[0] == \\"3\\": # Max_Query operation results.append(max(lst)) return results"},{"question":"Alice wants to analyze the contents of a text file to find the frequency of each word. She has written some code to read the file and extract the words but needs help with the implementation of word counting. Write a function `word_count` that takes the name of a text file as input and returns a dictionary where the keys are words and the values are the number of times each word appears in the file. **Function Signature:** ```python def word_count(filename: str) -> dict: # Your code here ``` **Input:** - A string `filename` representing the name of the text file to be processed. **Output:** - A dictionary where keys are words (lowercased) and values are their respective counts. # Example Suppose the contents of `file.txt` are as follows: ``` Hello world! Hello everyone. ``` Calling `word_count(\'file.txt\')` should return: ```python {\'hello\': 2, \'world\': 1, \'everyone\': 1} ``` # Notes - The words should be treated case-insensitively, i.e., \'Hello\' and \'hello\' should be considered the same word. - The function should ignore punctuation marks (.,!?) when counting words. - You may assume that the file contains only alphabetic characters, spaces, and punctuation marks listed above. Consider edge cases such as empty files or files with only punctuation marks and handle them appropriately.","solution":"import re def word_count(filename: str) -> dict: Reads the file and returns a dictionary with the frequency of each word, ignoring case and punctuation. word_freq = {} with open(filename, \'r\') as file: content = file.read() # Use regular expression to find all the words, ignoring punctuation words = re.findall(r\'bw+b\', content.lower()) for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq"},{"question":"You are given n tasks, each task has a unique identifier and a list of dependencies. Each dependency is a task that must be completed before the given task. Your goal is to provide a valid order of task execution, or determine that it is not possible due to a cycle in the dependencies. Each task is represented by an integer id from 1 to n. A dependency is an ordered pair (u, v), denoting that task u must be completed before task v. Input: - The first line contains two integers n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 200,000) — the number of tasks and the number of dependencies. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), representing a dependency u -> v. Output: - If there is no valid order of task execution, print -1. - Otherwise, print a permutation of the numbers from 1 to n representing a valid order of task execution. If there are multiple valid orders, print any of them. Example: Input: 5 4 1 2 1 3 3 4 2 5 Output: 1 2 3 5 4 Explanation: The above order is valid because: - Task 1 is executed first, followed by tasks that depend on it. - Tasks 2 and 3 are executed after task 1. - Task 5 is executed after task 2. - Task 4 is executed after task 3.","solution":"from collections import defaultdict, deque def find_task_order(n, dependencies): # Create an adjacency list graph = defaultdict(list) # Create a list to count in-degrees of each task (number of prerequisites) in_degree = [0] * (n + 1) # Populate the graph and in-degree list for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Initialize a queue with tasks that have no dependencies (in-degree of 0) queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) # List to store the task completion order task_order = [] while queue: task = queue.popleft() task_order.append(task) # Decrease the in-degree of neighboring tasks for neighbor in graph[task]: in_degree[neighbor] -= 1 # If in-degree becomes 0, add it to the queue if in_degree[neighbor] == 0: queue.append(neighbor) # If we covered all tasks, we return the task order # Otherwise, there is a cycle, and it\'s not possible to complete all tasks if len(task_order) == n: return task_order else: return [-1] # Parsing input function for testing purposes def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n, m = map(int, lines[0].split()) dependencies = [tuple(map(int, line.split())) for line in lines[1:]] return n, dependencies # Example usage: # n, dependencies = parse_input(\\"5 4n1 2n1 3n3 4n2 5\\") # print(find_task_order(n, dependencies))"},{"question":"You are given a string representing an arithmetic expression. The arithmetic expression can contain only non-negative integers, plus (\'+\') and minus (\'-\') operators, and no spaces. Your task is to evaluate the expression and return the result as an integer. The input string will always be a valid arithmetic expression and will follow these rules: - The expression may contain any number of digits (0-9). - The operators \'+\' and \'-\' will always be placed between two numbers. - The expression will not start or end with an operator. - There will be no spaces in the expression. - The length of the input string will not exceed 100,000 characters. Consider the following examples: 1. For the input \\"1+2-3+4\\", the output should be 4. 2. For the input \\"10-2+3-5\\", the output should be 6. In the first example, the expression is evaluated as: 1 + 2 - 3 + 4 = 4. In the second example, the expression is evaluated as: 10 - 2 + 3 - 5 = 6. You need to write a function that takes a single string as input and returns the evaluated integer value of the arithmetic expression. Implement the function `evaluate_expression(expression: str) -> int`. Example function signature and input/output: ```python def evaluate_expression(expression: str) -> int: # Your code here # Example usage: print(evaluate_expression(\\"1+2-3+4\\")) # Output: 4 print(evaluate_expression(\\"10-2+3-5\\")) # Output: 6 ```","solution":"def evaluate_expression(expression: str) -> int: Evaluate the given arithmetic expression containing only non-negative integers, plus (\'+\') and minus (\'-\') operators, and return the result as an integer. # Initialize a result and a temporary number result = 0 current_number = 0 # Set the initial operation to addition current_operation = \'+\' # Iterate over each character in the expression for char in expression + \'+\': if char.isdigit(): # If the character is a digit, build the current number current_number = current_number * 10 + int(char) else: # If the character is an operator, apply the previous operation if current_operation == \'+\': result += current_number elif current_operation == \'-\': result -= current_number # Update the current operation current_operation = char # Reset the temporary number current_number = 0 return result"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation any number of times: - Choose any two adjacent characters in the string and swap them. Your task is to determine if it is possible to sort the characters of the string in non-decreasing order using the given operation. For example, if s = \\"dcba\\", you can swap \'d\' and \'c\' to get \\"cdba\\", then swap \'c\' and \'b\' to get \\"bcda\\", and finally swap \'b\' and \'a\' to get \\"abcd\\", which is sorted in non-decreasing order. The first line contains one integer t (1 <= t <= 100) — the number of test cases. The first line of each test case contains one integer n (1 <= n <= 100) — the length of the string s. The second line of each test case contains the string s of length n consisting of lowercase English letters. For each test case, output \\"YES\\" if it is possible to sort the string using the given operation, otherwise output \\"NO\\".","solution":"def can_be_sorted(t, test_cases): Determines if each of the given strings can be sorted using the swap operation described. Args: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains a string and its length. Returns: list of strs: \\"YES\\" or \\"NO\\" for each test case. results = [] for n, s in test_cases: if sorted(s) == list(s): results.append(\\"YES\\") else: results.append(\\"YES\\") return results"},{"question":"Given an array of integers, perform a series of operations to modify the array and derive a result based on conditions specified in each operation. You\'ll be given an array with n elements (1 ≤ n ≤ 10^5) and q operations (1 ≤ q ≤ 10^5). Each operation could either update a single element in the array or query a range of the array to find the maximum element in that range. To be specific, you need to handle the following operations: 1. Update operation: Change the value of a specific element in the array. 2. Maximum query operation: Return the maximum value in a specified subarray. The input format is as follows: - The first line contains two integers n and q — the number of elements in the array and the number of operations, respectively. - The second line contains n integers, representing the initial elements of the array. - Each of the next q lines contains an operation. An operation could be one of the following two types: - \\"1 x y\\" — an update operation that sets the element at index x (0 ≤ x < n) to y. - \\"2 l r\\" — a query operation that asks for the maximum value in the subarray from index l to r-1 (0 ≤ l < r ≤ n). Output the results of the maximum query operations. **Example:** ``` Input: 5 3 1 5 2 4 3 2 1 4 1 3 6 2 0 5 Output: 5 6 ``` Explanation: - The initial array is [1, 5, 2, 4, 3]. - The first query asks for the maximum value from index 1 to 3 (subarray [5, 2, 4]), which is 5. - The update operation sets the element at index 3 to 6. The array then becomes [1, 5, 2, 6, 3]. - The second query asks for the maximum value from index 0 to 4 (subarray [1, 5, 2, 6, 3]), which is 6.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the tree self.build(data) def build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Initialize internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, left, right): left += self.n right += self.n max_value = float(\'-inf\') while left < right: if left % 2: max_value = max(max_value, self.tree[left]) left += 1 if right % 2: right -= 1 max_value = max(max_value, self.tree[right]) left //= 2 right //= 2 return max_value def process_operations(n, q, array, operations): seg_tree = SegmentTree(array) result = [] for op in operations: if op[0] == 1: _, x, y = op seg_tree.update(x, y) elif op[0] == 2: _, l, r = op result.append(seg_tree.query(l, r)) return result"},{"question":"Farmer John has built a new field with `n` distinct positions in a straight line, each containing a unique crop. Unfortunately, a devastating pest is threatening his crops. Each day for the next `d` days, Farmer John can try to protect his field in the following way: - He can place a pesticide on any specific position `p` and all crops from that position to the end of the field get protected. - Notably, each position in the field can only be protected once throughout the `d` days. Given that Farmer John wants to maximize the number of crops he protects by the end of `d` days, determine the maximum number of crops that can be protected. You are given: - An integer `n` (1 ≤ n ≤ 100,000) representing the number of crops. - An integer `d` (1 ≤ d ≤ 100,000) representing the number of days. - An array of integers `crops` with `n` elements (each element between 1 and 100,000 and all elements are unique) representing the positions of the crops. Write a function to calculate the maximum number of crops that can be protected. **Input:** - An integer `n` representing the number of crops. - An integer `d` representing the number of days. - A list `crops` of length `n` representing the positions of the crops. **Output:** - An integer representing the maximum number of crops that can be protected after `d` days. **Example:** ```python def max_protected_crops(n: int, d: int, crops: list) -> int: # Your implementation here # Example case print(max_protected_crops(10, 4, [3, 8, 1, 7, 6, 2, 10, 5, 4, 9])) # Expected output: 10 ``` **Explanation:** In the example, since `d` (the number of days) is equal to `n` (the number of crops), Farmer John can simply protect each position on successive days, covering all the crops eventually. Therefore, the expected output is the total number of crops, which is 10 in this case.","solution":"def max_protected_crops(n: int, d: int, crops: list) -> int: Calculate the maximum number of crops that can be protected after `d` days. Parameters: n (int): The number of crops. d (int): The number of days. crops (list): The list of crop positions. Returns: int: The maximum number of crops that can be protected. # If the number of days is equal to or greater than the number of crops, # then all crops can be protected. if d >= n: return n # Sort the crop positions crops.sort() # The strategy is to select d positions starting from the leftmost crop and # move to right protected_crops = n - d + 1 return protected_crops"},{"question":"You are given two arrays, `A` and `B`, both of length `n`. An operation consists of selecting an element from `A` and an element from `B` and then adding both elements to a sum. The goal is to maximize the total sum with the following constraint: no element from `A` and no element from `B` can be selected more than once. Write a function that takes the arrays `A` and `B` and returns the maximum possible sum of elements from `A` and `B` under these conditions. # Input - An integer `n` (1 leq n leq 100,000), the number of elements in each array. - Two arrays `A` and `B` of length `n` containing integers (`1 leq A[i], B[i] leq 10^9). # Output - A single integer representing the maximum possible sum of elements from `A` and `B` under the given conditions. # Example Input: ``` 4 A = [1, 2, 3, 4] B = [4, 3, 2, 1] ``` Output: ``` 14 ``` # Explanation One possible way to achieve the maximum sum is by pairing each element in `A` with the corresponding element in `B`: - Select 1 from A and 4 from B, sum is 5. - Select 2 from A and 3 from B, sum is 5. - Select 3 from A and 2 from B, sum is 5. - Select 4 from A and 1 from B, sum is 5. Thus, the total sum is `5 + 5 + 5 + 5 = 14`.","solution":"def max_sum(A, B): Given two arrays A and B of the same length, this function returns the maximum possible sum of elements from A and B with the constraint that no element from either array can be selected more than once. # Sort A in descending order A.sort(reverse=True) # Sort B in descending order B.sort(reverse=True) # Calculate the sum by pairing each element from sorted A and sorted B total_sum = sum(a + b for a, b in zip(A, B)) return total_sum"},{"question":"You are given an array arr of integers representing the heights of a landscape under which water can collect. The greatest volume of water the landscape can store is calculated by considering each consecutive pair of columns, the shorter of which dictates the height of the water that can fill the gap. Given these heights, calculate the maximum amount of water that can be trapped between the columns after it rains. Your task is to write a function that takes an array of integers and returns the maximum amount of water that can be trapped. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of columns in the landscape. The second line contains n integers representing the heights of the columns. The function should return a single integer — the maximum amount of water that can be trapped. **Example:** Input: ``` 6 0 1 0 2 1 0 1 3 2 1 2 1 ``` Output: ``` 6 ``` **Explanation:** In the given example, the largest amount of water that can be trapped is 6 units, comprised across multiple intervals of the landscape. Water collects between the columns at heights and intervals where the left and right boundaries allow.","solution":"def max_water_trapped(heights): Returns the maximum amount of water that can be trapped after raining. :param heights: List of integers representing the heights of the columns :return: The maximum amount of water that can be trapped if not heights: return 0 total_water = 0 left, right = 0, len(heights) - 1 max_left, max_right = heights[left], heights[right] while left < right: if heights[left] < heights[right]: left += 1 max_left = max(max_left, heights[left]) total_water += max_left - heights[left] else: right -= 1 max_right = max(max_right, heights[right]) total_water += max_right - heights[right] return total_water"},{"question":"You are provided with two stacks of coins. The first stack contains `a` coins and the second stack contains `b` coins. Two players alternate turns, with Player 1 acting first. On a player\'s turn, they can choose to either remove 1 coin or a prime number of coins from one of the stacks. The player who cannot make any move (because there are no coins left) loses the game. The task is to determine which player will win if both players play optimally. The function should take two integers `a` and `b` (1 ≤ a, b ≤ 50) as input and return \\"Player 1\\" if the first player to move wins, otherwise return \\"Player 2\\". **Example:** Input: ``` a = 5 b = 7 ``` Output: ``` Player 1 ``` In the given example, Player 1 can always make a move and force Player 2 into a position where they cannot expose Player 1 to a losing state, indicating that Player 1 has a winning strategy.","solution":"def is_prime(n): Helper function to check if a number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_grundy_number(n): Compute the Grundy number for a given pile size if n == 0: return 0 grundy_set = set() grundy_set.add(find_grundy_number(n - 1)) for i in range(2, n + 1): if is_prime(i): grundy_set.add(find_grundy_number(n - i)) mex = 0 while mex in grundy_set: mex += 1 return mex def determine_winner(a, b): Determine the winner if both players play optimally grundy_a = find_grundy_number(a) grundy_b = find_grundy_number(b) if (grundy_a ^ grundy_b) == 0: return \\"Player 2\\" else: return \\"Player 1\\""},{"question":"You are given a binary tree with integer values on each node. Your task is to compute the sum of all values of nodes that are at the same level as the target node. # Input - The first line contains an integer n (1 leq n leq 10^4), the number of nodes in the binary tree. - The next n lines each contain three integers v, l, and r: - v is the value of the node, - l is the value of the left child of the node (if not present, l is -1), - r is the value of the right child of the node (if not present, r is -1). - The last line contains the target node value t (0 leq t leq 10^4). # Output - Output a single integer representing the sum of values of all nodes at the same level as the node with value t. # Example Input ``` 7 1 2 3 2 4 5 3 6 7 4 -1 -1 5 -1 -1 6 -1 -1 7 -1 -1 5 ``` Output ``` 11 ``` Explanation In the example given, the tree structure looks like this: ``` 1 / 2 3 / / 4 5 6 7 ``` The target node 5 is at level 2. The sum of nodes at level 2 is 4 + 5 + 6 + 7 = 22. Thus, the output is 22.","solution":"from collections import deque, defaultdict class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(tree_data): nodes = {} for v, l, r in tree_data: if v not in nodes: nodes[v] = TreeNode(v) if l != -1: nodes[l] = nodes.get(l, TreeNode(l)) nodes[v].left = nodes[l] if r != -1: nodes[r] = nodes.get(r, TreeNode(r)) nodes[v].right = nodes[r] return nodes def find_level_sums_and_target_level(root, target): level_sums = defaultdict(int) target_level = None queue = deque([(root, 0)]) while queue: node, level = queue.popleft() level_sums[level] += node.value if node.value == target: target_level = level if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return level_sums, target_level def sum_of_values_at_same_level(tree_data, target): nodes = build_tree(tree_data) root = nodes[list(nodes.keys())[0]] # get the root node which is the first key in the dict level_sums, target_level = find_level_sums_and_target_level(root, target) return level_sums[target_level]"},{"question":"You are given a sequence of n integers a1, a2, ..., an. Initially, all elements in the sequence are 0. You need to perform m operations on this sequence. Each operation is one of the following types: 1. Increase all elements in a specified sub-sequence by a given value. 2. Query the sum of all elements in a specified sub-sequence. Your task is to process these operations and print the results for the queries. The first line contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of elements in the sequence and the number of operations. Each of the next m lines contains an operation. An operation is represented by one of the following two forms: 1. \\"inc l r x\\" (1 ≤ l ≤ r ≤ n, -1000 ≤ x ≤ 1000) — increase all elements from index l to index r by x. 2. \\"sum l r\\" (1 ≤ l ≤ r ≤ n) — query the sum of elements from index l to index r. Output the results of each query in separate lines. Example: Input: 5 4 inc 1 3 5 sum 1 3 inc 2 4 -2 sum 1 5 Output: 15 9 Explanation: Initially, the sequence is [0, 0, 0, 0, 0]. After the first operation, it becomes [5, 5, 5, 0, 0]. The first sum query from index 1 to index 3 is 5 + 5 + 5 = 15. After the second operation, it becomes [5, 3, 3, -2, 0]. The second sum query from index 1 to index 5 is 5 + 3 + 3 + (-2) + 0 = 9.","solution":"def process_operations(n, m, operations): # Step 1: Initialize the sequence with zeros sequence = [0] * n results = [] # Step 2: Process each operation for operation in operations: parts = operation.split() if parts[0] == \\"inc\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 x = int(parts[3]) for i in range(l, r + 1): sequence[i] += x elif parts[0] == \\"sum\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 results.append(sum(sequence[l:r + 1])) return results"},{"question":"The citizens of Digitopolis are participating in a new kind of lottery, known as the \\"SumParade\\". Each contestant is given a list of non-negative integers, and their task is to form a contiguous subarray in such a way that the sum of the elements in the subarray equals a given number, letting them win the lottery if successful. As the overseer of SumParade, you need to write a program to help verify the contestants\' submissions. Given an array of non-negative integers and a target sum, you must find the number of distinct contiguous subarrays whose sum equals the target sum. Two subarrays are considered distinct if they start or end at different positions in the array. # Input - The first line contains two integers `n` and `S` (1 ≤ n ≤ 10^5, 0 ≤ S ≤ 10^9), where: - `n` is the length of the array. - `S` is the target sum. - The second line contains `n` space-separated non-negative integers, representing the elements of the array. # Output Output a single integer, the number of distinct contiguous subarrays whose sum equals `S`. # Example Input ``` 5 9 1 2 3 4 5 ``` Output ``` 2 ``` # Explanation In this example, there are 2 subarrays whose sum is 9: - [2, 3, 4] - [4, 5] # Constraints - The array might contain zeroes. - The entire sum should fit into a 64-bit integer. # Note Efficient algorithms should be employed to ensure the program runs within the time limits for large inputs. The focus should be on using sliding window techniques or hashmaps to keep track of the sums efficiently.","solution":"def count_subarrays_with_sum(nums, target): Returns the number of distinct contiguous subarrays whose sum equals the target sum. count = 0 current_sum = 0 sum_dict = {0: 1} for num in nums: current_sum += num if current_sum - target in sum_dict: count += sum_dict[current_sum - target] if current_sum in sum_dict: sum_dict[current_sum] += 1 else: sum_dict[current_sum] = 1 return count"},{"question":"You are given a street grid represented as a 2D array with houses and obstacles. Each house is either a `1` (house exists) or `0` (no house). Obstacles are represented by `-1`. Imagine a drone that can move in the four cardinal directions (up, down, left, right) but cannot pass through obstacles. Your task is to determine the shortest path from the top-left corner to the bottom-right corner of the grid. If no such path exists, return `-1`. # Input - An integer `n` representing the number of rows in the grid. - An integer `m` representing the number of columns in the grid. - A 2D list `grid` of size `n x m`, where each element is either `1`, `0`, or `-1` as described above. # Output - A single integer representing the length of the shortest path from the top-left corner to the bottom-right corner, or `-1` if no path exists. # Constraints - `1 ≤ n, m ≤ 100` - There is exactly one house at the top-left corner and one house at the bottom-right corner. # Example ```python n = 3 m = 3 grid = [ [1, 0, 0], [0, -1, 0], [0, 0, 1] ] calculate_shortest_path(n, m, grid) ``` Expected output: ``` 4 ``` Explanation: The shortest path is from (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2), with a total length of 4. # Notes - Use Breadth-First Search (BFS) algorithm to find the shortest path since each move to adjacent cells has the same cost. - Consider edge cases where the grid might be entirely blocked, or the destination itself is blocked.","solution":"from collections import deque def calculate_shortest_path(n, m, grid): if grid[0][0] == -1 or grid[n-1][m-1] == -1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] != -1: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Given an array of integers and a series of update and query operations, implement a system to efficiently handle them. You are given an initial array of integers `a` of length `n` and `m` operations. Each operation can either be an update operation, which modifies an element of the array, or a query operation, which asks for the sum of elements in a specific subarray. The input consists of: 1. An integer `n` (1 ≤ n ≤ 2·10^5) — the number of integers in the array. 2. An array `a` of `n` integers (1 ≤ a_i ≤ 10^9). 3. An integer `m` (1 ≤ m ≤ 2·10^5) — the number of operations. 4. `m` operations, where each operation is either: - \\"U x y\\" (update) meaning set a[x] = y (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9), - \\"Q l r\\" (query) meaning calculate the sum of elements from a[l] to a[r] (1 ≤ l ≤ r ≤ n). Output the results of each query operation. # Input: ``` n a1 a2 a3 ... an m op1 op2 ... opm ``` # Output: For each query operation, output the resulting sum in a new line. # Example: Input: ``` 5 1 2 3 4 5 3 Q 1 3 U 2 10 Q 1 3 ``` Output: ``` 6 14 ``` # Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query \\"Q 1 3\\" asks for the sum from index 1 to 3, which is 1 + 2 + 3 = 6. - The update \\"U 2 10\\" sets the second element to 10, so the array becomes [1, 10, 3, 4, 5]. - The second query \\"Q 1 3\\" asks for the sum from index 1 to 3 again, now it\'s 1 + 10 + 3 = 14.","solution":"class ArrayManager: def __init__(self, n, a): self.n = n self.a = a def update(self, x, y): self.a[x - 1] = y def query(self, l, r): return sum(self.a[l - 1:r]) def handle_operations(n, a, operations): array_manager = ArrayManager(n, a) results = [] for op in operations: operation = op.split() if operation[0] == \\"U\\": _, x, y = operation array_manager.update(int(x), int(y)) elif operation[0] == \\"Q\\": _, l, r = operation result = array_manager.query(int(l), int(r)) results.append(result) return results"},{"question":"Given a string s, you are allowed to perform a series of operations on it. In one operation, you can pick any character from the string and remove all occurrences of it. Your task is to return the maximum number of distinct characters you can have in the resulting string after performing any number of such operations. The first line contains an integer T (1 le T le 100), the number of test cases. Each of the next T lines contains a single string s consisting of lowercase English letters. The length of each string does not exceed 10^5 characters, and the total length of all strings across all test cases does not exceed 10^6 characters. For each test case, print the maximum number of distinct characters that can be obtained in the resulting string after performing any number of removal operations. # Example **Input:** ``` 3 abcda abcd abacabadabacaba ``` **Output:** ``` 4 4 2 ``` # Explanation In the first test case, removing either \'a\', \'b\', \'c\', or \'d\' results in three distinct characters. The maximum number of distinct characters in the resulting string is 4 when no removal is performed. In the second test case, the string already consists of distinct characters, so the maximum number of distinct characters is 4. In the third test case, the best strategy is to remove \'a\', \'b\', and \'d\', leaving only \'c\', thus achieving a maximum of 2 distinct characters in the resulting string.","solution":"def max_distinct_characters(T, test_cases): results = [] for s in test_cases: # Convert string to set to get distinct characters distinct_characters = set(s) # The number of distinct characters is the size of the set results.append(len(distinct_characters)) return results"},{"question":"You are given an array of integers representing the heights of buildings along a street. The array elements are non-negative integers where each element value represents the height of a building. You need to determine the amount of rainwater that can be trapped after it rains. A building can trap water on top if it has taller buildings on both left and right sides. The amount of water trapped on top of any building is determined by the height of the shorter of the two tallest buildings on its left and right, minus the height of the building itself. Given an array `heights` of `n` non-negative integers representing the buildings\' heights, compute how much water it can trap after raining. Function Signature: ```python def trap_rain_water(heights: List[int]) -> int: ``` # Input: - `heights` (List[int]): A list of non-negative integers representing the height of the buildings (1 ≤ n ≤ 100,000, 0 ≤ heights[i] ≤ 100,000). # Output: - `int`: The total amount of trapped rainwater. # Example: ```python print(trap_rain_water([0,1,0,2,1,0,1,3,2,1,2,1])) # Output: 6 print(trap_rain_water([4,2,0,3,2,5])) # Output: 9 ``` # Constraints: 1. The heights list can be of any reasonable size within the specified limits. 2. The function should run efficiently in terms of time complexity.","solution":"from typing import List def trap_rain_water(heights: List[int]) -> int: Calculate the total amount of rainwater that can be trapped based on the heights of the buildings. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Alice is organizing a movie marathon for her friends. She has a list of movies, each with a specified duration in minutes. Alice wants to create a schedule that minimizes the number of intervals where no movie is playing (idle time). Each movie can start immediately after the previous movie ends. Given that Alice has a total of p minutes available for the marathon, your task is to help her determine the maximum number of movies she can fit into the schedule without exceeding the available time p. You should write a program that takes two inputs: the number of movies n and p minutes available for the marathon. Then, it takes n integers, each representing the duration of a movie in minutes. Output the maximum number of movies Alice can schedule without exceeding the total available time p. Input The first line contains two integers n and p (1 ≤ n ≤ 100, 1 ≤ p ≤ 10000). The second line contains n integers, each representing the duration of a movie (1 ≤ duration ≤ 1000). Output Output one integer which is the maximum number of movies that can be scheduled. Example Input: 5 120 60 30 20 50 40 Output: 3 Explanation: Alice can fit movies of duration 60, 30, and 20 into the 120 minutes available, totaling 110 minutes.","solution":"def max_movies(n, p, durations): Determines the maximum number of movies that can fit into available time p. :param n: Number of movies :param p: Total available minutes for the marathon :param durations: List of movie durations :return: Maximum number of movies that can be scheduled durations.sort() total_time = 0 count = 0 for duration in durations: if total_time + duration <= p: total_time += duration count += 1 else: break return count"},{"question":"James is an avid chess player, and he enjoys solving puzzles. He came up with an interesting problem involving chessboards. He gives you a standard 8x8 chessboard and a list of knight moves. Each move is represented by a coordinate (x, y) where the knight will land after making the move. He wants to know if the knight can return to its starting position (0, 0) after making exactly k moves. The knight initially starts at position (0, 0). On the chessboard, the knight can move in an \\"L\\" shape: two squares in one direction and one square perpendicular, or one square in one direction and two squares perpendicular (eight possible moves total). Given a list of valid knight moves on the chessboard, determine if it is possible for the knight to return to (0, 0) after exactly k moves. # Input Format - The first line contains an integer k (1 ≤ k ≤ 15), the number of moves the knight must make. - The next line contains an integer m (1 ≤ m ≤ 8), the number of available knight moves. - The next m lines each contain two integers xi and yi (-8 ≤ xi, yi ≤ 8), representing valid knight moves. # Output Format Output \\"YES\\" if the knight can return to its starting position after exactly k moves. Otherwise, output \\"NO\\". # Example Input: ``` 4 8 2 1 1 2 -2 1 -1 2 2 -1 1 -2 -2 -1 -1 -2 ``` Output: ``` YES ``` # Explanation In this example, the knight can perform the following sequence of moves to return to the starting position: (2,1) → (1,2) → (-1,-2) → (-2,-1) → (0,0). Thus, the output is \\"YES\\".","solution":"def can_knight_return_to_origin(k, moves): def dfs(x, y, remaining_moves): if remaining_moves == 0: return x == 0 and y == 0 for dx, dy in moves: next_x, next_y = x + dx, y + dy if dfs(next_x, next_y, remaining_moves - 1): return True return False return \\"YES\\" if dfs(0, 0, k) else \\"NO\\" # Example usage k = 4 moves = [(2, 1), (1, 2), (-2, 1), (-1, 2), (2, -1), (1, -2), (-2, -1), (-1, -2)] print(can_knight_return_to_origin(k, moves)) # Output: YES"},{"question":"There is a secret undirected, weighted graph of n nodes and m edges. The nodes are numbered from 1 to n. Each edge has a positive integer weight, and the weight of the edges lie between 1 and 10^9, inclusive. The graph is special: all edge weights in the graph form an arithmetic progression with a positive common difference. That is, if the graph\'s edge weights are sorted in increasing order, they will satisfy the property w_i = w_1 + (i - 1)d for some integer w_1 and positive integer d. You have access to an oracle, which allows you to perform at most 100 queries of the following types: 1. `1 u v` - Ask for the weight of the edge between nodes u and v (if such an edge exists). 2. `2` - Ask for the sorted list of all edge weights in the graph. Your task is to determine the smallest edge weight w_1 and the common difference d of the arithmetic progression formed by the edge weights. You need to find these values by performing at most 100 queries. The interaction starts with two integers n and m (2 le n le 10^5, 1 le m le 10^5), representing the number of nodes and edges in the graph. After finding the values, output the smallest edge weight w_1 and the common difference d. This output does not count towards your query limit. For each query of type `1 u v`, if there is an edge between nodes u and v, you will get the weight of the edge as a response. If there is no such edge, the response will be `-1`. For a query of type `2`, you will get the sorted list of all edge weights in the graph. Ensure that after printing any query, you output a newline and flush the output to avoid \\"Idleness limit exceeded\\". To do this, use: ```python import sys input = sys.stdin.read print(\'message\', flush=True) ``` # Format: ```plaintext Input The first line contains two integers n and m (2 le n le 10^5, 1 le m le 10^5), denoting the number of nodes and edges, respectively. After that, you can make queries of two types as described above. Output When you\'ve determined the smallest edge weight w_1 and the common difference d of the sequence, print them in a single line separated by a space. Example Input 5 6 Query 1 1 2 Output 3 Query 1 2 3 Output 7 Query 2 Output 3 7 11 15 19 23 Answer 3 4 ```","solution":"def find_smallest_weight_and_difference(n, m, query_weights): Determines the smallest edge weight and the common difference of the arithmetic progression formed by the edge weights in the graph. :param n: Number of nodes :param m: Number of edges :param query_weights: Function to simulate queries to the graph :return: Tuple containing the smallest edge weight and the common difference # Query to get the sorted list of all edge weights weights = query_weights() # The smallest edge weight is the first element in the sorted list w1 = weights[0] # The common difference can be found by subtracting the first weight from the second weight d = weights[1] - weights[0] return w1, d"},{"question":"You are given a list of integers representing the heights of people standing in a line. The heights are given in the order they appear in the line. You are allowed to select any two people standing in this line to form a pair. However, the pair must satisfy the condition that the second person in the pair is taller than the first person. Write a program to find the maximum difference in height between any valid pairs you can form. If no valid pair exists, return -1. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of people in the line. - The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the people in the line. Output: - Print the maximum difference in height between any valid pair. If no valid pair exists, print -1. Example: Input: 6 1 5 3 4 7 2 Output: 6","solution":"def max_height_difference(n, heights): Returns the maximum difference in height between any valid pair where the second person is taller than the first person. If no valid pair exists, returns -1. max_diff = -1 for i in range(n): for j in range(i + 1, n): if heights[j] > heights[i]: diff = heights[j] - heights[i] if diff > max_diff: max_diff = diff return max_diff # Example usage: # n = 6 # heights = [1, 5, 3, 4, 7, 2] # print(max_height_difference(n, heights)) # Output: 6"},{"question":"You are given an n×m grid, where each cell can either be empty or filled with a block. Two players take turns performing the following operation: On their turn, a player can remove an entire row or an entire column from the grid if and only if that row or column does not contain any blocks. The player who cannot make a move loses. Your task is to determine who will win given the initial configuration of the grid, assuming both players play optimally. If the first player wins, you also need to find the winning first move. The first line contains two integers n and m (1≤n,m≤100), representing the dimensions of the grid. Each of the next n lines contains m characters, where each character is either \'.\' (indicating an empty cell) or \'#\' (indicating a block). If the second player wins, print \\"SECOND\\". Otherwise, print \\"FIRST\\" and on the next line print the winning first move, which should be either \\"ROW i\\" or \\"COLUMN j\\", indicating the row or column to remove. Example Input 1: 3 3 #.# ... #.# Example Output 1: FIRST ROW 2 Example Input 2: 2 2 #. .# Example Output 2: SECOND","solution":"def determine_winner(n, m, grid): empty_rows = [] empty_cols = [] # Check for empty rows for i in range(n): if all(cell == \'.\' for cell in grid[i]): empty_rows.append(i + 1) # use 1-based index # Check for empty columns for j in range(m): if all(grid[i][j] == \'.\' for i in range(n)): empty_cols.append(j + 1) # use 1-based index # If there are no empty rows or columns, the second player wins if not empty_rows and not empty_cols: return (\\"SECOND\\", None) # If there are empty rows, the first player can take one of them and win if empty_rows: return (\\"FIRST\\", f\\"ROW {empty_rows[0]}\\") # If there are empty columns, the first player can take one of them and win if empty_cols: return (\\"FIRST\\", f\\"COLUMN {empty_cols[0]}\\") # Example usage # n, m = 3, 3 # grid = [ # \\"#.#\\", # \\"...\\", # \\"#.#\\" # ] # determine_winner(n, m, grid)"},{"question":"You are given a string s consisting of lowercase English letters. A group of consecutive characters of the same type is called a \\"cluster\\". For example, in the string \\"aabbbcaaaa\\", there are four clusters: \\"aa\\", \\"bbb\\", \\"c\\", and \\"aaaa\\". Your task is to compress the string by keeping only one copy of each cluster. For example, \\"aabbbcaaaa\\" should be compressed to \\"abca\\". Write a function that returns the compressed string. # Input The input is a single line containing the string s (1 ≤ |s| ≤ 1000). # Output Print the compressed string. # Example Input ``` aabbbcaaaa ``` Output ``` abca ``` # Constraints - The input string will only contain lowercase English letters.","solution":"def compress_string(s): Compresses the string by keeping only one copy of each cluster. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: The compressed string. if not s: return \\"\\" compressed = [s[0]] for char in s[1:]: if char != compressed[-1]: compressed.append(char) return \'\'.join(compressed)"},{"question":"You are given a directed graph with n vertices and m edges. Each vertex has a value assigned to it. Your task is to find the shortest path from vertex 1 to vertex n such that the sum of the values of the vertices in the path is minimized. The first line contains two integers n (2 ≤ n ≤ 10^5) and m (1 ≤ m ≤ 2*10^5) — the number of vertices and edges in the graph. The second line contains n integers — the values assigned to the vertices, where the ith integer is the value of the ith vertex. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — representing a directed edge from u to v. If there is no path from vertex 1 to vertex n, print \\"NO\\" (without quotes). Otherwise, print the minimum sum of the values of the vertices in the path from vertex 1 to vertex n. In the first sample test, the shortest path 1 -> 2 -> 4 has the sum of values 1 + 2 + 1 = 4. In the second sample test, there is no path from vertex 1 to vertex 5, hence the output is \\"NO\\".","solution":"import heapq def shortest_path_min_sum(n, m, values, edges): Find the shortest path from vertex 1 to vertex n such that the sum of the values of the vertices in the path is minimized. # Convert to 0-based for easier indexing in Python values = [0] + values graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) # Dijkstra\'s algorithm pq = [(values[1], 1)] # (total_value, vertex) min_sum = [float(\'inf\')] * (n + 1) min_sum[1] = values[1] while pq: curr_val, u = heapq.heappop(pq) if u == n: return curr_val for v in graph[u]: new_val = curr_val + values[v] if new_val < min_sum[v]: min_sum[v] = new_val heapq.heappush(pq, (new_val, v)) return \\"NO\\""},{"question":"Consider a list of unique integers. Your task is to find the length of the longest contiguous subarray such that all its elements are distinct. For the purposes of this problem, a contiguous subarray is defined as a portion of the array consisting of consecutive elements. # Input The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of integers in the list. The second line of the input contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the list. # Output Output one integer — the length of the longest contiguous subarray with all distinct elements. # Example Input ``` 5 1 2 1 3 4 ``` Output ``` 4 ``` Explanation In the sample, the longest contiguous subarray with all distinct elements is [2, 1, 3, 4] and its length is 4. # Notes To solve this problem efficiently, consider using a sliding window approach with two pointers or employing a hash set to keep track of the unique elements within the current window.","solution":"def longest_distinct_subarray_length(n, arr): Returns the length of the longest contiguous subarray with all distinct elements. if n == 0: return 0 max_length = 0 start = 0 seen = {} for end in range(n): if arr[end] in seen and seen[arr[end]] >= start: start = seen[arr[end]] + 1 seen[arr[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"In a distant kingdom of Farland, there are n ancient towers standing on a flat plain. Each tower has a magical gemstone at its top that needs to be charged from time to time. The charging can only be done by a special device called \\"Chargerbot\\". Chargerbot has an initial energy level E and can charge multiple towers in a single trip. It can move between any two towers, but each movement decreases its energy by the Euclidean distance between the two towers. Moreover, each tower i has a specific energy cost ci associated with charging its gemstone, which also decreases Chargerbot\'s energy further. Given the locations of the towers (as x, y coordinates) and their respective energy costs, determine the maximum number of towers that Chargerbot can charge in a single trip starting from any tower when it starts with an initial energy of E. The first line of the input contains two integers n (1 ≤ n ≤ 1000) and E (1 ≤ E ≤ 109) – the number of towers and the initial energy of Chargerbot. The next n lines each contain three integers xi, yi, and ci (|xi|, |yi| ≤ 104, 0 ≤ ci ≤ 109) representing the coordinates and the energy cost to charge the gemstone of the i-th tower. Output a single integer – the maximum number of towers that can be charged in a single trip. Example: Input: 5 100 0 0 10 1 1 20 2 2 30 3 3 40 4 4 50 Output: 3 In the sample input, Chargerbot can start from the tower at (0,0), move to (1,1) and charge, move to (2,2) and charge, and then move to (3,3) and charge, depleting its energy to exactly zero, thus charging 3 towers in total.","solution":"import math from itertools import permutations def max_towers_charged(n, E, towers): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) max_charged = 0 for perm in permutations(towers): energy = E charged = 0 for i in range(len(perm)): if i == 0: energy -= perm[i][2] else: energy -= euclidean_distance((perm[i-1][0], perm[i-1][1]), (perm[i][0], perm[i][1])) energy -= perm[i][2] if energy >= 0: charged += 1 else: break max_charged = max(max_charged, charged) return max_charged"},{"question":"A gardening company needs to maintain a series of public flower gardens in a straight line, where each garden needs to be watered by a sprinkler. Each garden can be represented as a segment on a straight line: the i-th garden has coordinates [si, ei], where si ≤ ei. A sprinkler located at position xi can water a garden if si ≤ xi ≤ ei. The company has a list of positions where they can place sprinklers, and each position can only have one sprinkler. The company wants to make sure that there is exactly one sprinkler in each garden. Help them determine whether there are enough sprinklers to cover all the gardens and output which sprinklers should be placed in which gardens. The first line contains integers n (1 ≤ n ≤ 2·10^5) and m (1 ≤ m ≤ 2·10^5) — the number of gardens and the number of available sprinkler positions, respectively. The next n lines each contain two integers si and ei (1 ≤ si ≤ ei ≤ 10^9) — the coordinates of the garden endpoints. The last line contains m integer numbers x1, x2, ..., xm (1 ≤ xi ≤ 10^9) — the coordinates of the available sprinkler positions. If it is possible to place a sprinkler in each garden in the required manner, print \\"Possible\\" (without the quotes). In the following n lines, print the garden number and the position of the sprinkler to be placed in that garden. If there are multiple valid solutions, print any of them. If it is impossible to place a sprinkler in each garden, print \\"Impossible\\" (without the quotes). **Example:** **Input:** ``` 3 4 1 3 4 6 7 10 2 5 8 9 ``` **Output:** ``` Possible 1 2 2 5 3 8 ``` **Input:** ``` 2 3 1 5 6 10 2 4 7 ``` **Output:** ``` Possible 1 2 2 7 ``` **Input:** ``` 2 2 1 3 4 6 3 5 ``` **Output:** ``` Impossible ``` Your task is to figure out the optimal way to place the sprinklers or conclude that it\'s impossible.","solution":"def place_sprinklers(n, m, gardens, sprinklers): # Sort gardens based on the ending position to maximize chances of fitting gardens.sort(key=lambda x: x[1]) # Sort sprinklers in ascending order sprinklers.sort() garden_assignments = [] sprinkler_index = 0 for i in range(n): si, ei = gardens[i] # Find a suitable sprinkler in the sorted sprinklers list while sprinkler_index < m and (sprinklers[sprinkler_index] < si or sprinklers[sprinkler_index] > ei): sprinkler_index += 1 # Check if we have a valid sprinkler for this garden if sprinkler_index == m: return \\"Impossible\\" garden_assignments.append((i+1, sprinklers[sprinkler_index])) sprinkler_index += 1 # If we processed all gardens, it\'s possible to place all sprinklers if len(garden_assignments) == n: return [\\"Possible\\"] + [\\"{} {}\\".format(assignment[0], assignment[1]) for assignment in garden_assignments] else: return \\"Impossible\\""},{"question":"A transportation company has a warehouse with n different types of products, initially stocked with certain quantities of each product. The company processes delivery orders from various clients. Each order specifies the desired quantity of a particular product. The company must determine if an order can be fulfilled with the current stock. If it can, the stock is updated accordingly; if it cannot, the order is declined. Design a system to process multiple orders efficiently. The first line of input contains an integer n (1 leq n leq 10^5) indicating the number of different types of products. The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) representing the initial quantities of each product. The third line contains an integer m (1 leq m leq 10^5) representing the number of orders. Each of the next m lines describe an order and contains two integers p and q (1 leq p leq n, 1 leq q leq 10^9), where p is the product type and q is the quantity requested. For each order, print \\"Fulfilled\\" if the order can be processed and the stock is updated, otherwise print \\"Declined\\". # Example: Input: ``` 3 10 5 8 4 1 7 2 6 3 5 1 2 ``` Output: ``` Fulfilled Declined Fulfilled Fulfilled ```","solution":"def process_orders(n, initial_quantities, m, orders): results = [] for p, q in orders: if initial_quantities[p - 1] >= q: initial_quantities[p - 1] -= q results.append(\\"Fulfilled\\") else: results.append(\\"Declined\\") return results"},{"question":"Alice loves to collect jewels, and she has a collection of n jewels, each with a certain value. She wants to maximize the total value of the jewels she can keep, but there is a catch: she has to sell exactly k jewels to a local dealer to get enough money to continue her journeys. However, Alice has a tricky dealer who has a condition that if she sells a jewel with a value v, she also has to sell all jewels that have a value strictly less than v. Alice wants to keep the maximum possible value of jewels after selling exactly k of them meeting the dealer\'s condition. Given the values of the n jewels, help Alice determine the maximum possible total value of the jewels she can keep after selling exactly k jewels. # Input The first line of input contains two integers, n (1 ≤ n ≤ 100,000) and k (1 ≤ k ≤ n), the number of jewels Alice has and the number of jewels she has to sell, respectively. The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 100,000), the values of the jewels. # Output Output one integer — the maximum possible total value of the jewels Alice can keep. # Example **Input:** ``` 7 3 5 8 3 10 15 12 6 ``` **Output:** ``` 43 ``` **Explanation:** Alice can sell the jewels worth 5, 3, and 6 to meet the dealer\'s condition while keeping the jewels worth 8, 10, 15, and 12. The total value of the kept jewels is 8 + 10 + 15 + 12 = 45. Exploring other conditions may lead to lesser value. Thus, the maximum possible value of the jewels Alice can keep is 43.","solution":"def max_kept_value(n, k, values): Returns the maximum possible total value of the jewels Alice can keep after selling exactly k jewels. values.sort() to_remove = values[:k] # Smallest k values to remove # The remaining jewels Alice can keep kept_values = values[k:] return sum(kept_values)"},{"question":"You are given a string S consisting of lowercase Latin letters and a list of queries. Each query is described by two integers l and r (1 ≤ l ≤ r ≤ |S|). For each query [l, r], you need to determine if the substring S[l...r] (inclusive of indices l and r) is palindromic. A string is palindromic if it reads the same backward as forward. Your task is to write a function that processes the string and answers each query efficiently. The first line of the input contains the string S. The second line contains an integer q (1 ≤ q ≤ 100,000) - the number of queries. Each of the next q lines contains two integers l and r representing the start and end indices of the substring, respectively. Print \\"YES\\" for each query if the substring S[l...r] is a palindrome, otherwise, print \\"NO\\". Example Input: ``` abacaba 4 1 3 2 5 3 3 5 7 ``` Example Output: ``` YES NO YES YES ```","solution":"def is_palindrome(s, l, r): Checks if the substring s[l-1:r] is palindromic. substring = s[l-1:r] return substring == substring[::-1] def answer_queries(s, queries): Processes each query and determines if the specified substring is a palindrome. s -- the input string queries -- list of (l, r) tuples indicating the substring to check results = [] for l, r in queries: if is_palindrome(s, l, r): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Tina and her group of friends are having a baking competition. Each friend has prepared a cake and you are given the score of each cake. There are n friends in total and each has a cake with a respective score. Tina is allowed to try all cakes and select the best ones. However, being a prudent person, she only wants to maximize the sum of scores of k consecutive cakes. Given an array of scores for each cake and an integer k, calculate the maximum possible sum of scores for any sequence of k consecutive cakes. The input consists of two lines. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of cakes and the number of consecutive cakes Tina can select. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the scores of the cakes prepared by her friends. Print one integer — the maximum sum of scores for any sequence of k consecutive cakes. For example, if the input is: ``` 6 3 2 1 5 6 3 7 ``` The output should be: ``` 16 ``` This is because the best selection is from the 4th to the 6th cake inclusive (6 + 3 + 7 = 16).","solution":"def max_consecutive_sum(n, k, scores): Returns the maximum sum of scores for any sequence of k consecutive cakes. :param n: int, The number of cakes :param k: int, The number of consecutive cakes Tina can select :param scores: list[int], The scores of the cakes :return: int, The maximum possible sum of scores # Calculate the initial sum of the first k cakes max_sum = sum(scores[:k]) current_sum = max_sum # Use the sliding window technique to find the max sum of any k consecutive elements for i in range(k, n): current_sum += scores[i] - scores[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are running a warehouse with a single robot that can carry out various tasks. The robot has specific instructions to follow, which include picking up items, moving to a location, and placing the items down. Each task is represented by several operations that the robot must perform in sequence, but there can be dependencies between these tasks. Each operation in a task has a unique identifier and a prerequisite operation that must be completed before it can begin. You need to determine if it is possible for the robot to complete all tasks without violating any dependency constraints. Each task is represented by a directed acyclic graph (DAG) where: - Each node represents an operation. - Each directed edge represents a dependency (an operation that must be completed before another can start). Write a program that determines if it is possible to complete all tasks. The program should output \\"YES\\" if it is possible for the robot to complete all tasks without any dependency conflicts, and \\"NO\\" otherwise. Input: - The first line contains an integer T (1 ≤ T ≤ 10^4), the number of tasks. - For each task, the first line contains two integers, N and M (1 ≤ N, M ≤ 10^5), where N is the number of operations and M is the number of dependencies. - The next M lines each contain two integers u and v (1 ≤ u, v ≤ N), representing a dependency where operation u must be completed before operation v. Output: - For each task, print either \\"YES\\" if it is possible to complete all operations respecting all dependencies, or \\"NO\\" if it is not possible. Example: ``` Input: 2 3 2 1 2 2 3 3 3 1 2 2 3 3 1 Output: YES NO ``` Explanation: - In the first task, the order of operations can be 1 -> 2 -> 3, which respects all dependencies, hence \\"YES\\". - In the second task, there is a cycle of dependencies (1 -> 2 -> 3 -> 1), which makes it impossible to complete all operations, hence \\"NO\\".","solution":"def can_complete_all_tasks(T, tasks): def has_cycle(graph, n): from collections import deque indegree = [0] * (n + 1) for u in graph: for v in graph[u]: indegree[v] += 1 queue = deque([i for i in range(1, n + 1) if indegree[i] == 0]) count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return count != n results = [] for task in tasks: N, M, dependencies = task graph = {i: [] for i in range(1, N+1)} for u, v in dependencies: graph[u].append(v) if has_cycle(graph, N): results.append(\\"NO\\") else: results.append(\\"YES\\") return results # Example usage: T = 2 tasks = [ (3, 2, [(1, 2), (2, 3)]), (3, 3, [(1, 2), (2, 3), (3, 1)]) ] print(can_complete_all_tasks(T, tasks)) # Output: [\'YES\', \'NO\']"},{"question":"You are given a string s of length n consisting of lowercase English letters. You can perform the following operation any number of times: - Choose any two adjacent characters in the string and replace them with a single character that comes lexicographically before both of them. For example, you can replace \'c\' and \'d\' with \'b\', \'a\' and \'b\' with \'a\', but you cannot replace \'d\' and \'f\' with \'c\'. Determine the lexicographically smallest string you can get after performing the operation any number of times. The first line contains the single integer n (1 le n le 1000) — the length of the string s. The second line contains the string s consisting of lowercase English letters. Print the lexicographically smallest string you can achieve. # Example Input: ``` 5 abcde ``` Output: ``` a ``` Explanation: Possible sequences of operations might include: - Replace \'b\' and \'c\' with \'a\' to get `aade` - Replace \'a\' and \'a\' with \'a\' to get `ade` - Replace \'a\' and \'d\' with \'a\' to get `ae` - Replace \'a\' and \'e\' with \'a\' to get `a` Since \'a\' cannot be reduced further, the lexicographically smallest string is `a`.","solution":"def lexicographically_smallest_string(n, s): Returns the lexicographically smallest string that can be achieved by repeatedly replacing any two adjacent characters with a single character that comes lexicographically before both of them. # If \'a\' is present in the string, the smallest lexicographically character we can achieve is \'a\' if \'a\' in s: return \'a\' # Find the smallest character in the string and return it return min(s)"},{"question":"Given an array of integers, your task is to calculate the maximum possible sum of its elements such that no two elements are adjacent in the array. This problem can be solved using dynamic programming, as it requires finding the optimal substructure and overlapping subproblems. For example, consider the array `arr = [3, 2, 5, 10, 7]`. The maximum possible sum without picking adjacent elements is `15` (selecting elements `3, 10`, and `2`). # Input Format: - The first line contains a single integer `n` (1 ≤ n ≤ 100,000) representing the number of elements in the array. - The second line contains `n` space-separated integers `a1, a2, ..., an` (-10,000 ≤ ai ≤ 10,000) representing the elements of the array. # Output Format: - Print a single integer - the maximum sum of non-adjacent elements in the array. # Example: Input: ``` 5 3 2 5 10 7 ``` Output: ``` 15 ``` # Note: - You may assume that the largest sum cannot exceed the range of a 64-bit integer. - The solution should be efficient with respect to both time and space complexity.","solution":"def max_non_adjacent_sum(nums): Calculates the maximum possible sum of its elements such that no two elements are adjacent. if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) max_sum_inclusive = max(0, nums[0]) max_sum_exclusive = 0 for i in range(1, len(nums)): new_max_sum_exclusive = max(max_sum_exclusive, max_sum_inclusive) max_sum_inclusive = max_sum_exclusive + nums[i] max_sum_exclusive = new_max_sum_exclusive return max(max_sum_inclusive, max_sum_exclusive)"},{"question":"Sara is arranging a special event for her friends. She has n different types of decorations and a budget limit of C coins. Each type of decoration has a price and the number of coins she has to spend for one is known. She wants to buy exactly one decoration of each type but doesn\'t want to exceed her budget limit. Write a program to help Sara determine the number of ways she can choose exactly one decoration of each type without exceeding her budget. If it is impossible to stay within the budget, return 0. Input: - The first line contains two space-separated integers n (1 ≤ n ≤ 100) and C (1 ≤ C ≤ 10^9) – the number of decoration types and the budget limit respectively. - The second line contains n space-separated integers, where the i-th integer represents the price of the i-th decoration type (1 ≤ price_i ≤ 10^9). Output: - Output a single integer representing the number of ways Sara can choose one decoration of each type without exceeding her budget limit. Example: Input: 3 50 10 20 30 Output: 1","solution":"from itertools import product def number_of_ways(n, C, prices): Determines the number of ways to choose one decoration of each type without exceeding the budget. Args: n : int : number of decoration types. C : int : budget limit. prices : list of int : prices of the decorations. Returns: int : the number of ways to buy decorations within the budget. # Since we need to choose exactly one decoration of each type and there is # no way to combine multiple decorations of the same type, the only way # we can check is if the sum of all decoration prices is within the budget. total_price = sum(prices) if total_price <= C: return 1 return 0"},{"question":"Given an array of `k` lists of sorted integers, merge them into one sorted list. The input begins with an integer `k` (1 leq k leq 10^3), the number of lists. Each of the next `k` lines contains the elements of a list, prefixed by an integer `n_i` (1 leq n_i leq 10^3), the number of elements in the respective list. Each element of the lists is an integer in the range [-10^6, 10^6]. The output should be a single sorted list containing all the elements of the original `k` lists. **Input:** ``` 3 4 -10 -5 0 5 3 2 4 8 5 -7 -3 1 9 10 ``` **Output:** ``` -10 -7 -5 -3 0 1 2 4 5 8 9 10 ``` **Explanation:** The three lists `[ -10, -5, 0, 5 ]`, `[ 2, 4, 8 ]`, and `[ -7, -3, 1, 9, 10 ]` are merged into a single sorted list: `[ -10, -7, -5, -3, 0, 1, 2, 4, 5, 8, 9, 10 ]`.","solution":"import heapq def merge_k_sorted_lists(lists): Merges k sorted lists into one sorted list. Parameters: lists: List of lists, where each list is sorted. Returns: A single sorted list containing all elements of the k lists. min_heap = [] for l in lists: for element in l: heapq.heappush(min_heap, element) result = [] while min_heap: result.append(heapq.heappop(min_heap)) return result def parse_input(input_data): Parses the input data and returns a list of lists. Parameters: input_data: Input in the specified format string. Returns: A list of lists of integers. lines = input_data.strip().split(\'n\') k = int(lines[0]) lists = [] for i in range(1, k + 1): lists.append(list(map(int, lines[i].split()[1:]))) return lists def solve(input_data): Parses the input data, merges the k sorted lists, and returns the result. Parameters: input_data: Input in the specified format string. Returns: A string with the sorted merged list. lists = parse_input(input_data) merged_list = merge_k_sorted_lists(lists) return \' \'.join(map(str, merged_list))"},{"question":"Andrew, Dmitry, and Michal are planning a trip and they\'ve decided to go together in one car. To make sure that their trip is successful, the following conditions must be satisfied: 1. Each of them must have enough fuel to reach their destination individually, if they were to drive separately. 2. The car must have enough total fuel capacity to carry all of them together. Andrew, Dmitry, and Michal have fuel amounts x, y, and z respectively for their cars, and their cars can cover d kilometers on a full tank. Their friend Boris offers his car, which can carry all three of them together. Boris\'s car has a fuel capacity of c kilometers. Given the distance k to their destination, can Boris\'s car carry all three of them while meeting their individual fuel requirements? The first line contains two integers k and d (1 le k le 10^5, 1 le d le 10^5) — the distance to the destination and the distance each of their cars can cover on a full tank. The second line contains four integers x, y, z, c (1 le x, y, z, c le 10^5) — the fuel amounts for Andrew, Dmitry, Michal and Boris\'s car respectively. If Boris\'s car can carry all three of them to the destination, print \\"YES\\", otherwise print \\"NO\\". In the first example, all conditions are met individually but Boris\'s car doesn\'t have enough fuel capacity to carry all of them to the destination. In the second test, each of their cars can cover the distance individually, and Boris\'s car has enough fuel capacity to carry all three of them together.","solution":"def can_reach_destination(k, d, x, y, z, c): Determines if all three can reach the destination given the conditions. Parameters: k (int): Distance to the destination d (int): Distance each of their cars can cover on a full tank x (int): Fuel amount for Andrew\'s car y (int): Fuel amount for Dmitry\'s car z (int): Fuel amount for Michal\'s car c (int): Fuel capacity of Boris\'s car Returns: str: \\"YES\\" if Boris\'s car can carry all three of them to the destination, \\"NO\\" otherwise # Check if each individual can reach the destination in their own cars if x >= k and y >= k and z >= k: # Check if Boris\'s car can cover the distance with all passengers if c >= k * 3: return \\"YES\\" else: return \\"NO\\" else: return \\"NO\\""},{"question":"You are given a string consisting of lowercase English letters. Your task is to find and capitalize all the vowels (a, e, i, o, u) in the string. The function should return the modified string. The input will consist of a single string `s` (1 ≤ length of `s` ≤ 10000). # Example Input: ``` hello world ``` Output: ``` hEllO wOrld ``` Input: ``` programming is fun ``` Output: ``` prOgrAmmIng Is fUn ``` Function signature: ```python def capitalize_vowels(s: str) -> str: # Your code here ``` # Constraints - The input string will only contain lowercase English letters and spaces. - Spaces should be preserved in the output string.","solution":"def capitalize_vowels(s: str) -> str: Capitalizes all the vowels in the given string. Parameters: s (str): Input string consisting of lowercase English letters and spaces. Returns: str: Modified string with all vowels capitalized. vowels = \\"aeiou\\" result = [] for char in s: if char in vowels: result.append(char.upper()) else: result.append(char) return \'\'.join(result)"},{"question":"You are given two strings `s` and `word` and an integer `k`. Your task is to determine whether it is possible to arrange the characters of `s` in such a way that the word `word` appears as a substring exactly `k` times. You may use some or all of the characters in `s` and may reuse characters multiple times if necessary. Write a function `can_form_string(s: str, word: str, k: int) -> bool` that returns `True` if it is possible to rearrange `s` to have `word` appear exactly `k` times as a substring, and `False` otherwise. # Input - `s`: a string of length T (1 ≤ T ≤ 100) - `word`: a string of length W (1 ≤ W ≤ 50) - `k`: an integer (0 ≤ k ≤ 100) # Output - Return True or False based on the conditions described. # Examples Example 1: Input: ```python s = \\"aaabb\\" word = \\"ab\\" k = 2 ``` Output: ```python True ``` Explanation: One possible arrangement is \\"aabab\\". The word \\"ab\\" appears exactly 2 times as a substring. Example 2: Input: ```python s = \\"abc\\" word = \\"abc\\" k = 1 ``` Output: ```python True ``` Explanation: The string \\"abc\\" itself is already \\"abc\\" appearing 1 time as a substring. Example 3: Input: ```python s = \\"aabb\\" word = \\"ab\\" k = 3 ``` Output: ```python False ``` Explanation: It is not possible to rearrange \\"aabb\\" to have \\"ab\\" appear exactly 3 times as a substring. # Constraints - The function should be efficient enough to handle the maximum constraints.","solution":"from collections import Counter def can_form_string(s: str, word: str, k: int) -> bool: Determines if it is possible to arrange the characters of s in such a way that the word \'word\' appears as a substring exactly \'k\' times. # First, calculate the number of times each character in \'word\' needs to appear in \'s\' word_counter = Counter(word) # Multiply the count in word_counter by k to see the required count of each character required_counter = {char: count * k for char, count in word_counter.items()} s_counter = Counter(s) # Check if \'s\' has enough of each character to meet the requirements for char, required_count in required_counter.items(): if s_counter[char] < required_count: return False # Possible scenarios where the characters in s are sufficient return True"},{"question":"You are given a sequence of \'A\', \'B\', and \'C\' characters representing types of boxes arranged in a warehouse row. Each type of box can only be moved one at a time, and they must be moved in contiguous segments. This means you cannot pick and drop different types of boxes interchangeably while transporting them. The boxes need to be moved from the warehouse to the delivery area. What is the minimum number of contiguous segments that Polycarpus needs to move? The only line of the input data contains a non-empty string of \'A\', \'B\', and \'C\' characters whose length does not exceed 100 characters. If the i-th character in the string is \'A\', \'B\', or \'C\', it indicates that the i-th box in the warehouse is of type A, B, or C respectively. Print the only number — the minimum number of contiguous segments Polycarpus needs to move. For instance, consider a string \\"ABCCCBAA\\": - He can first move the initial \'A\' as a segment. - Then move \'B\' as the next segment. - Then move \'CCC\' as another segment. - Then move \'B\' as a segment. - Lastly, move \'AA\' as another segment. Thus, Polycarpus will move the boxes in 5 contiguous segments. In another example, for the string \\"AAAABBBBC\\": - He can move the \'AAAA\' as a segment. - Then move \'BBBB\' as a segment. - Finally move \'C\' as a segment. Thus, Polycarpus will move the boxes in 3 contiguous segments.","solution":"def min_contiguous_segments(boxes): Returns the minimum number of contiguous segments needed to move all the boxes. if not boxes: return 0 # Initialize count with 1 for the first segment count = 1 # Traverse through the boxes and count changes in box type for i in range(1, len(boxes)): if boxes[i] != boxes[i-1]: count += 1 return count"},{"question":"There are n warriors in a battle, each with a certain amount of health points. The warriors engage in battle until only one remains. Each warrior can attack one of the other warriors, reducing their health. When a warrior\'s health points drop to zero or below, they are out of the battle. Each warrior can choose to attack any other warrior, regardless of the current state of the battlefield. Every second, each warrior decides whom to attack independently. Write a function that takes in the health points of each warrior and returns the number of seconds it will take for only one warrior to remain, assuming all warriors attack simultaneously every second and each attack reduces the victim\'s health by 1 point. # Input - The first line contains an integer n (2 le n le 10^5) — the number of warriors. - The second line contains n integers h_1, h_2, ... , h_n (1 le h_i le 10^9) — the health points of each warrior. # Output - Print one integer — the number of seconds it will take for only one warrior to remain. # Example Input: ``` 3 3 4 5 ``` Output: ``` 5 ``` Input: ``` 4 10 20 30 40 ``` Output: ``` 31 ``` # Note In the first example, one possible way the battle progresses is: - The warrior with 3 health points will survive for 3 seconds before their health reaches 0. - The warrior with 4 health points will survive until the 4th second. - The warrior with 5 health points will survive until the 5th second. So, after 5 seconds, only one warrior will remain.","solution":"def time_until_one_warrior_remains(n, health_points): Returns the number of seconds it will take for only one warrior to remain. Parameters: n (int): The number of warriors. health_points (list of int): The health points of each warrior. Returns: int: The number of seconds until only one warrior remains. # The time taken for only one warrior to remain return max(health_points)"},{"question":"You are given two arrays of integers, `A` and `B`, both of length `n`. You are also given an integer `k`. Your task is to find an array `C` such that each element of `C` is the sum of an element from `A` and an element from `B`, and the minimum element in `C` is as large as possible among all such possible arrays. Specifically, the goal is to find the maximum possible value of the smallest element in array `C`. The first line of the input contains two integers `n` and `k` (1 le n le 10^5, 1 le k le n). The second line contains `n` integers representing the array `A`. The third line contains `n` integers representing the array `B`. Print the maximum possible value of the smallest element in the array `C`. Example: ``` Input: 3 2 3 1 4 2 5 6 Output: 8 ``` In this example, one possible choice is to pair the largest 2 elements from each array. Here, by pairing `4` from `A` with `5` from `B` and `3` from `A` with `6` from `B`, we get the array `C` as `[9, 8]`. The minimum value in `C` is `8`, which is the maximum possible minimum value.","solution":"def max_min_element(n, k, A, B): A.sort(reverse=True) B.sort(reverse=True) C = [] for i in range(k): C.append(A[i] + B[i]) return min(C)"},{"question":"Given an array `a` of `n` integers, you need to find if there exists a subarray of length `k` such that the sum of the elements within this subarray is equal to `s`. The first line of input contains two positive integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n), representing the number of elements in the array and the subarray length respectively. The second line contains `n` integers `a_1, a_2, ..., a_n` (-10^9 ≤ a_i ≤ 10^9) representing the elements of the array. The third line contains a single integer `s` (-10^18 ≤ s ≤ 10^18) representing the desired subarray sum. Print \\"YES\\" if there exists a subarray of length `k` with the sum equal to `s`, otherwise print \\"NO\\". Examples: 1. **Input:** ``` 5 2 1 2 3 4 5 5 ``` **Output:** ``` YES ``` 2. **Input:** ``` 6 3 1 -1 2 -2 3 -3 0 ``` **Output:** ``` NO ``` 3. **Input:** ``` 4 1 1 2 3 4 4 ``` **Output:** ``` YES ```","solution":"def subarray_sum_exists(n, k, a, s): Returns \'YES\' if there exists a subarray of length k with sum s, otherwise \'NO\'. # Calculate the sum of the first subarray of length k current_sum = sum(a[:k]) # Check if the first subarray sum equals s if current_sum == s: return \\"YES\\" # Use a sliding window to check for all other subarrays of length k for i in range(k, n): current_sum += a[i] - a[i - k] if current_sum == s: return \\"YES\\" return \\"NO\\""},{"question":"You are organizing a regional coding competition where participants solve a series of programming challenges. For the final round, you are given a list of participants and their scores from the previous rounds. You need to determine the minimum number of additional problems that should be added to the final round in order to ensure that the top 3 participants have unique total scores. You will be given the scores of the participants as an array of integers. The top 3 participants must have three unique scores. You can increase the score of any participant by adding points (up to 100 points) for each new problem they solve. Each problem can have positive integer points. Determine the minimum number of problems needed to add to ensure that the top 3 participants have unique scores. # Input The first line of the input contains an integer n (3 le n le 50)— the number of participants. The second line contains n integers representing the scores of the participants. # Output Output a single integer representing the minimum number of additional problems needed. # Example Input ``` 5 100 95 95 90 85 ``` Output ``` 2 ``` # Explanation In the example, the top 3 scores are `100`, `95`, and `95`. To ensure unique scores, one solution is to add one problem worth 1 point to one of the participants scoring 95 to get scores `100`, `96`, and `95`. However, to ensure total uniqueness among the top 3, another problem must be added. Thus, one possible final scoring could be `100`, `96` and `95`. Two problems are needed in total to ensure unique top 3 scores.","solution":"def min_additional_problems(n, scores): Returns the minimum number of additional problems needed to make top 3 participants have unique scores. top_3 = sorted(scores, reverse=True)[:3] # We need to make sure top 3 have unique scores additional_problems = 0 if top_3[0] == top_3[1] and top_3[1] == top_3[2]: # All three are the same, we need at least 3 problems to make all unique additional_problems = 3 elif top_3[0] == top_3[1] or top_3[1] == top_3[2]: # Two are the same, we need at least 2 problems to make all unique additional_problems = 2 else: additional_problems = 0 return additional_problems"},{"question":"You are an aspiring data analyst and have been given the results of a survey conducted in an organization. The survey has asked employees to rate their job satisfaction on a scale from 1 to 10. Although the results are generally informative, there are some outlier responses suspected to be incorrectly recorded values which fall outside the expected range (1 to 10). Due to the need for accurate data, you are tasked with identifying and correcting these anomalous values. Specifically, any rating below 1 should be corrected to 1, and any rating above 10 should be corrected to 10. The rest of the ratings should remain unchanged. The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 100), the number of survey responses. - The second line contains n integers, separated by spaces, representing the survey ratings. Output the corrected ratings on a single line, separated by spaces. Example: Input: ``` 6 9 12 4 -1 15 6 ``` Output: ``` 9 10 4 1 10 6 ``` In this example, the values 12 and 15 were corrected to 10, and the value -1 was corrected to 1.","solution":"def correct_ratings(ratings): Corrects survey ratings to be within the range of 1 to 10 inclusive. Parameters: ratings (list of int): The list of survey ratings. Returns: list of int: The corrected list of survey ratings. corrected_ratings = [] for rating in ratings: if rating < 1: corrected_ratings.append(1) elif rating > 10: corrected_ratings.append(10) else: corrected_ratings.append(rating) return corrected_ratings def parse_input(input_str): Parses the input string and returns the number of ratings and the list of ratings. Parameters: input_str (str): The input string with number of ratings and the ratings. Returns: tuple: A tuple containing the number of ratings (int) and the list of ratings (list of int). input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) ratings = list(map(int, input_lines[1].split())) return n, ratings def format_output(ratings): Formats the corrected ratings for output. Parameters: ratings (list of int): The list of corrected survey ratings. Returns: str: The formatted output string. return \' \'.join(map(str, ratings))"},{"question":"You are given a rectangular grid with R rows and C columns. Each cell in the grid can either be blocked (represented by \'#\') or open (represented by \'.\'). You want to find the length of the shortest path from the top-left corner of the grid (cell (1,1)) to the bottom-right corner of the grid (cell (R,C)). You can move up, down, left, or right, but you cannot move through blocked cells. The first line contains two integers R and C (1 ≤ R, C ≤ 1000), the number of rows and columns in the grid. Each of the next R lines contains a string of C characters representing the grid. If there is a path from the top-left to the bottom-right corner, print the length of the shortest path. If there is no such path, print -1. Example: Input: ``` 5 5 ..... .#. .#.#. .#... ..... ``` Output: ``` 9 ```","solution":"from collections import deque def shortest_path_length(grid): Returns the length of the shortest path from the top-left to the bottom-right of the grid. If there is no such path, returns -1. def is_within_bounds(x, y): return 0 <= x < len(grid) and 0 <= y < len(grid[0]) def is_open_cell(x, y): return grid[x][y] == \'.\' R = len(grid) C = len(grid[0]) start = (0, 0) end = (R-1, C-1) if not is_open_cell(*start) or not is_open_cell(*end): return -1 # Directions for moving [up, down, left, right] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 1)]) # (x, y, distance) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and (nx, ny) not in visited and is_open_cell(nx, ny): queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Given an array of integers nums where the elements are sorted in ascending order, and an integer target, write a function that finds the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity. The first line contains two integers n and target (1 ≤ n ≤ 10^5, -10^9 ≤ target ≤ 10^9). The second line contains n space-separated integers representing the sorted array nums (each integer in the range of [-10^9, 10^9]). Your function should return a list of two integers, where the first integer is the starting position, and the second integer is the ending position of the target value if found, or [-1, -1] otherwise. **Examples:** 1. Input: ``` 6 8 5 7 7 8 8 10 ``` Output: `[3, 4]` 2. Input: ``` 6 6 5 7 7 8 8 10 ``` Output: `[-1, -1]` 3. Input: ``` 1 2 2 ``` Output: `[0, 0]`","solution":"def search_range(nums, target): Returns the starting and ending position of the target value in the sorted array nums. If the target is not found, returns [-1, -1]. def find_left(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] < target: left = mid + 1 else: right = mid - 1 return left def find_right(nums, target): left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] <= target: left = mid + 1 else: right = mid - 1 return right left_index = find_left(nums, target) if left_index == len(nums) or nums[left_index] != target: return [-1, -1] right_index = find_right(nums, target) return [left_index, right_index]"},{"question":"Design and implement a weather application screen that displays the current weather conditions for a given location. Mockups and Assets: https://www.example.com/weatherappmockup, Archive: https://www.dropbox.com/s/abcd1234/weather_app_assets.zip?dl=0. Note that the Inspector mode is available after logging in. Requirements: - Use the provided mockups and assets. - Display the current temperature, weather condition (e.g., sunny, cloudy, etc.), and an appropriate icon for the condition. - Show additional details such as humidity, wind speed, and a short-term forecast. Guidelines: - Ensure that the UI is responsive and works well on various screen sizes. - Follow best practices for maintaining clean and maintainable code. - Optimize the app performance considering network and battery usage. We will evaluate the solution based on the following criteria: - User Interface adherence to the provided mockup. - Code quality, including readability and modularity. - Performance optimization. - Error handling and user experience.","solution":"# Python function to simulate fetching weather data def fetch_weather_data(location): Fetches weather data for a given location. Parameters: - location (str): The location for which to fetch weather data. Returns: - dict: A dictionary containing weather data including temperature, condition, humidity, wind speed, and a short-term forecast. # Mocked weather data (in a real application, you would use an API call instead) weather_data = { \'temperature\': 22, \'condition\': \'Sunny\', \'humidity\': 45, \'wind_speed\': 15, \'forecast\': [ {\'day\': \'Monday\', \'condition\': \'Cloudy\', \'high\': 20, \'low\': 14}, {\'day\': \'Tuesday\', \'condition\': \'Rain\', \'high\': 18, \'low\': 13}, {\'day\': \'Wednesday\', \'condition\': \'Sunny\', \'high\': 24, \'low\': 16} ] } return weather_data"},{"question":"John is a music enthusiast and has recently cataloged his substantial music collection. To manage his collection more effectively, he decided to categorize his songs based on their genres. Each song can belong to multiple genres. He wants to devise a system to find all songs that belong to any given set of genres. You are given n songs, each song represented by its unique id (1 leq text{id} leq n). Each song has a list of genres associated with it. You are also given m queries, where each query consists of a set of genres, and you need to find all song ids that belong to any of the genres in the query. # Input - The first line contains an integer n (1 leq n leq 1000) - the number of songs. - The next n lines, each line starts with an integer k_i (1 leq k_i leq 100) representing the number of genres the i-th song belongs to, followed by k_i space-separated strings representing the genres. - The next line contains an integer m (1 leq m leq 500) - the number of queries. - The next m lines, each line contains an integer l_j (1 leq l_j leq 10) - the number of genres in the query, followed by l_j space-separated strings representing the genres in the query. # Output For each query, output the song ids that belong to any of the genres in that query in ascending order. If no song id matches the query, output `-`. # Example Input ``` 5 2 rock pop 3 pop jazz classical 2 jazz blues 1 classical 2 pop rock 3 2 rock jazz 1 pop 1 blues ``` Output ``` 1 2 3 5 1 2 5 3 ``` # Note In the first query, genres `rock` and `jazz` include songs with ids 1 (rock), 2 (jazz), 3 (jazz), and 5 (rock). In the second query, the genre `pop` includes songs with ids 1, 2, and 5. In the third query, the genre `blues` includes songs with id 3.","solution":"def find_songs(n, songs, m, queries): Returns a list of song ids for each genre query. Arguments: n : int : number of songs songs : list of lists : each list represents [k_i, genres...] m : int : number of queries queries : list of lists : each list represents [l_j, genres...] Returns: list of lists : each list contains song ids that match the query from collections import defaultdict genre_to_songs = defaultdict(set) # Catalog songs based on their genres for song_id in range(1, n + 1): song_genres = songs[song_id - 1][1:] for genre in song_genres: genre_to_songs[genre].add(song_id) result = [] for query in queries: query_genres = query[1:] matching_songs = set() for genre in query_genres: if genre in genre_to_songs: matching_songs.update(genre_to_songs[genre]) if matching_songs: result.append(sorted(list(matching_songs))) else: result.append([-1]) return result"},{"question":"You are given a string s consisting of lowercase alphabets and integers, which represents an encoded message. Each character in the string is either an alphabetical letter or a digit from \'0\' to \'9\'. Your task is to decode the message by repeating each letter in the encoded message according to the digit that comes after it. For instance, the portion \\"a3\\" should be decoded as \\"aaa\\". The first line contains an integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, the input is a single encoded string s (1 ≤ length(s) ≤ 1000), which contains at most 200 digits. Output the fully decoded message for each test case. # Example Input: ``` 2 a3b2c1 d2e4f3g1 ``` Output: ``` aaabbc ddeeeefffg ``` # Requirements - Ensure your solution efficiently handles the constraints. - Consider edge cases such as a string with no digits, mixed alphabetical and numerical characters, and repeated sections. # Explanation For the input `a3b2c1`, the output should be `aaabbc` because: - \'a\' is repeated 3 times, - \'b\' is repeated 2 times, - \'c\' is repeated 1 time. For the input `d2e4f3g1`, the output should be `ddeeeefffg` because: - \'d\' is repeated 2 times, - \'e\' is repeated 4 times, - \'f\' is repeated 3 times, - \'g\' is repeated 1 time.","solution":"def decode_message(encoded_message): Decodes the given encoded message. Parameters: encoded_message (str): The encoded message string with letters followed by digits. Returns: str: The decoded message string. decoded_message = [] i = 0 while i < len(encoded_message): char = encoded_message[i] i += 1 repeat_count = 0 # Read the number for repetition while i < len(encoded_message) and encoded_message[i].isdigit(): repeat_count = repeat_count * 10 + int(encoded_message[i]) i += 1 decoded_message.append(char * repeat_count) return \'\'.join(decoded_message) def decode_messages(test_case_count, encoded_messages): Decodes multiple encoded messages. Parameters: test_case_count (int): The number of test cases. encoded_messages (list): A list of encoded message strings. Returns: list: A list of decoded message strings. results = [] for encoded_message in encoded_messages: results.append(decode_message(encoded_message)) return results"},{"question":"There is an undirected graph with n nodes and m edges. Each edge connects two nodes u and v, and is assigned a weight w. Your task is to determine if there exists a path between any two given nodes a and b such that the maximum weight of the edges in this path is minimized. The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 10^5) — the number of nodes and the number of edges, respectively. The next m lines contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^9) — defining an edge between nodes u and v with weight w. The last line contains two integers a and b (1 leq a, b leq n) — the start and end nodes for the path in question. Print the minimum possible value of the maximum weight of the edges in the path from node a to node b. If there is no path between a and b, print \\"-1\\". In the first test, the optimal path from node 1 to node 4 would be to follow edges with weights 2, 5, and 6, resulting in a maximum weight of 6. In the second test, no path exists between node 1 and node 4. Example: Input: 4 4 1 2 2 2 3 2 2 4 5 3 4 6 1 4 Output: 6 Input: 4 2 1 2 10 2 3 10 4 3 Output: -1","solution":"import heapq from collections import defaultdict, deque def can_reach_with_max_weight(graph, start, end, max_weight, n): visited = [False] * n queue = deque([start]) while queue: node = queue.popleft() if node == end: return True for neighbor, weight in graph[node]: if not visited[neighbor] and weight <= max_weight: visited[neighbor] = True queue.append(neighbor) return False def minimize_max_edge_weight(n, m, edges, a, b): if a == b: return 0 graph = defaultdict(list) for u, v, w in edges: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) unique_weights = sorted(set(w for _, _, w in edges)) left, right = 0, len(unique_weights) - 1 answer = -1 while left <= right: mid = (left + right) // 2 if can_reach_with_max_weight(graph, a-1, b-1, unique_weights[mid], n): answer = unique_weights[mid] right = mid - 1 else: left = mid + 1 return answer"},{"question":"You have a sequence of integers which you want to partition into contiguous subsequences. You can choose any position to create the partitions, but each partition should be non-empty. The cost of a partition is defined as the sum of the maximum integer in each partition. Your task is to find the minimum cost possible. For example, consider the sequence a=[4, 3, 2, 5, 1]. You can partition it into the following subsequences: [4, 3, 2] and [5, 1]. The maximum numbers in each of the subsequences are 4 and 5, respectively. So, the sum of the maximum integers is 4 + 5 = 9. However, you can find a better partition: [4, 3], [2, 5, 1]. The maximum numbers are now 4 and 5, and the sum is 4 + 5 = 9. Here, the cost is still 9, but this is just an example of how partitions can change. Given an integer sequence, find the minimum possible sum of maximum integers from any valid partition. The first line contains an integer n (1 le n le 10^5) — the length of the sequence. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the sequence of integers. Print a single integer — the minimum possible cost. **Example:** Input: ``` 5 4 3 2 5 1 ``` Output: ``` 6 ``` Explanation: One optimal partition is: [4], [3], [2, 5], [1] resulting in a minimal possible cost of 4 + 3 + 5 + 1 = 13. Another optimal partition is [4], [3, 2], [5, 1] which results in the same cost as well. The minimum possible cost across all partitions is 6.","solution":"def min_partition_cost(a): Returns the minimum possible sum of maximum integers from any valid partition of the list a. # The minimum cost is just the sum of the entire list of the maximum value (in this case, no actual partition). return sum(a)"},{"question":"You are given a string s containing only characters \'a\', \'b\', and \'c\'. In one move, you can choose any character in the string and replace it with any of the characters \'a\', \'b\', or \'c\'. Your task is to determine if it is possible to make the string a palindrome by performing at most one such move. A string is called a palindrome if it reads the same backward as forward. The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. The next t lines describe test cases. Each line contains a string s (1 le |s| le 100) consisting of characters \'a\', \'b\', and \'c\'. For each test case, print the answer — \\"YES\\" (without quotes) if it is possible to make the string a palindrome by performing at most one move, and \\"NO\\" otherwise.","solution":"def can_become_palindrome(s): Determines if a given string s can be turned into a palindrome by changing at most one character. n = len(s) left, right = 0, n - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\" def solve_palindrome_problem(t, test_cases): results = [] for s in test_cases: results.append(can_become_palindrome(s)) return results"},{"question":"You are given an array of integers that represents different books in a library. Each integer in the array denotes the number of pages in that particular book, and the books are placed on shelves sequentially one after the other. There are multiple queries where each query asks you to identify the shelf and the book\'s position on that shelf based on a one-indexed page number. For example, consider an array `shelves = [5, 10, 7]` where the first shelf has 5 books, the second shelf has 10 books, and the third shelf has 7 books. If a query asks for the page number 13, it means you need to find the shelf and book position for that page number after numbering all books from start to end consecutively across all shelves. The task is to answer each query by determining and printing the shelf number and the book\'s position on the shelf corresponding to each page number queried. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of shelves. - The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^5) — the number of books on each shelf. - The third line contains an integer `q` (1 ≤ q ≤ 100,000) — the number of queries. - The fourth line contains `q` integers `p1, p2, ..., pq` (1 ≤ pi ≤ a1 + a2 + ... + an) — the page numbers to be queried. # Output For each query, print two integers `shelf` and `position` — the shelf number and the position of the book on that shelf for the given page number. # Example Input ``` 3 5 10 7 4 1 6 13 21 ``` Output ``` 1 1 2 1 2 8 3 6 ``` # Explanation - Query 1: Page number 1 is on shelf 1, position 1. - Query 2: Page number 6 is on shelf 2, position 1 (5 books on the first shelf, so page 6 is the first book on the second). - Query 3: Page number 13 is on shelf 2, position 8 (5 books on the first shelf and 7 books into the second shelf). - Query 4: Page number 21 is on shelf 3, position 6 (5 books on the first shelf, 10 books on the second shelf, and 6 books into the third shelf).","solution":"def find_shelf_and_position(n, shelves, q, queries): # Compute prefix sums of shelves array to find cumulative books prefix_sums = [0] * n prefix_sums[0] = shelves[0] for i in range(1, n): prefix_sums[i] = prefix_sums[i-1] + shelves[i] results = [] # For each query, find the corresponding shelf and position using binary search for query in queries: # Find the shelf using binary search on prefix_sums low, high = 0, n-1 while low < high: mid = (low + high) // 2 if query <= prefix_sums[mid]: high = mid else: low = mid + 1 shelf = low + 1 position = query - (prefix_sums[shelf - 2] if shelf > 1 else 0) results.append((shelf, position)) return results"},{"question":"Given an array of integers, partition the array into two subsets such that the sum of elements in both subsets is as close as possible. Return the absolute difference between the sums of the subsets. The first input line contains an integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Output a single integer — the minimum possible absolute difference between the sums of the two subsets. Example: Input: 5 1 6 11 5 Output: 1 Explanation: One possible way to partition the array is {1, 6, 5} and {11}, which gives the sums 12 and 11. The absolute difference is |12 - 11| = 1. Another partition {1, 11} and {6, 5} also gives the sums 12 and 11. Both partitions result in a minimum difference of 1.","solution":"def min_subset_difference(arr): This function takes a list of integers and partitions it into two subsets such that the absolute difference between the sums of the subsets is minimized. total_sum = sum(arr) n = len(arr) # dp[i][j] will be True if there exists a subset of the first i elements with sum equal to j dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j]: subset_sum1 = j break subset_sum2 = total_sum - subset_sum1 return abs(subset_sum2 - subset_sum1) # Example usage: # Input: 5 elements [1, 6, 11, 5] # Should output: 1 # print(min_subset_difference([1, 6, 11, 5]))"},{"question":"You are given a string that consists of lowercase English letters and you need to convert it into a \\"valid palindrome\\". A string is called a valid palindrome if it reads the same backwards as forwards. For example, \\"abcba\\" and \\"abccba\\" are valid palindromes but \\"abca\\" and \\"abcabc\\" are not. You are allowed to replace any character in the string with any other lowercase English letter to make it a valid palindrome. Your task is to determine the minimum number of character replacements needed to make the given string a valid palindrome. The first line contains a single integer n (1 le n le 10^5) — the length of the provided string. The second line contains a string of length n, consisting of lowercase English letters only. Print a single integer — the minimum number of character replacements required to make the string a valid palindrome. For example: If the input is \\"abcdefg\\" it will require 3 replacements: change \\"b\\" to \\"f\\", \\"c\\" to \\"e\\", and \\"d\\" to \\"d\\" (itself) to get the palindrome \\"acdfgfdca\\". If the input is \\"aabb\\" it will require 2 replacements: change \\"a\\" to \\"b\\" to get the palindrome \\"abba\\". In the first example, by examining each pair of characters starting from the outermost end of the string, we see that the operations required are: - Replace \'a\' with \'g\' to make the first and last characters match. - Replace \'b\' with \'f\' to make the second and second-to-last characters match. - Replace \'c\' with \'e\' to make the third and third-to-last characters match. Thus, the minimum character replacements to transform the string into a valid palindrome is 3.","solution":"def min_replacements_to_palindrome(n, s): Returns the minimum number of replacements needed to make the string s a palindrome. replacements = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: replacements += 1 return replacements"},{"question":"You are given a rectangular matrix containing n rows and m columns of positive integers. You need to determine if there exists a row in the matrix such that the sum of its elements is greater than the sum of the elements of any column in the matrix. Write a program to solve this problem. The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100). Then follow n lines, each containing m integers (1 ≤ integer ≤ 1000) representing the elements of the matrix. Print \\"YES\\" if such a row exists, otherwise print \\"NO\\".","solution":"def matrix_row_vs_col_sum(n, m, matrix): Determines if there exists a row in the matrix such that the sum of its elements is greater than the sum of the elements of any column. Parameters: n (int): number of rows in the matrix. m (int): number of columns in the matrix. matrix (list of list of int): the matrix elements. Returns: str: \\"YES\\" if such a row exists, otherwise \\"NO\\". row_sums = [sum(row) for row in matrix] col_sums = [sum(matrix[i][j] for i in range(n)) for j in range(m)] max_row_sum = max(row_sums) max_col_sum = max(col_sums) if max_row_sum > max_col_sum: return \\"YES\\" return \\"NO\\""},{"question":"In a distant land, Alice enjoys exploring the forest. The forest is represented as a 2D grid where each cell can either be empty (represented by 0) or contain an obstacle (represented by 1). Alice starts at the top-left corner of the grid and wants to find the shortest path to the bottom-right corner. She can only move in four possible directions: up, down, left, and right. She cannot move through any obstacles. Given the grid, determine the number of steps in the shortest path from the top-left corner to the bottom-right corner. If there is no valid path, return -1. The first line of input contains two integers n and m (1 leq n, m leq 100) — the number of rows and columns in the grid, respectively. The next n lines each contain m integers (either 0 or 1), representing the grid. Output the number of steps in the shortest path from the top-left to the bottom-right corner of the grid. If no such path exists, output -1. For example: Input: ``` 4 4 0 0 1 0 1 0 1 0 1 0 0 0 0 1 1 0 ``` Output: ``` 7 ``` In the above example, one of the shortest paths is: (0,0) -> (0,1) -> (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3) which consists of 7 steps.","solution":"from collections import deque def shortest_path(grid): Finds the shortest path in a 2D grid from the top-left to the bottom-right corner. Returns the number of steps in the shortest path or -1 if no path exists. n, m = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 1)]) # (row, col, distance) visited = set((0, 0)) while queue: row, col, dist = queue.popleft() if row == n-1 and col == m-1: return dist for dr, dc in directions: rr, cc = row + dr, col + dc if 0 <= rr < n and 0 <= cc < m and grid[rr][cc] == 0 and (rr, cc) not in visited: queue.append((rr, cc, dist + 1)) visited.add((rr, cc)) return -1"},{"question":"The task is to implement a simplified version of a functional programming parser. You are required to parse a string containing nested function calls and return the total depth of the functions. A function call is represented as a set of characters starting with an alphabet (\'a\'-\'z\' or \'A\'-\'Z\'), followed by a pair of parentheses containing zero or more function calls, similar to: ``` f() g(f()) h(f(g())) ``` The input consists of a single line containing a valid string of nested function calls. Your task is to determine the maximum depth of nesting of function calls in the provided input string. **Input:** - A single line string containing valid function calls. The length of the string will not exceed 2000 characters. **Output:** - Print an integer representing the maximum depth of nested function calls in the input string. **Example:** ``` Input: \\"f()\\" Output: 1 Input: \\"a(b())\\" Output: 2 Input: \\"x(y(z()))\\" Output: 3 ``` **Explanation:** In the first example \\"f()\\" is a function call with no nested calls, so the depth is 1. In the second example \\"a(b())\\", function \\"a\\" calls function \\"b\\", and \\"b\\" has no nested calls, so the depth is 2. In the third example \\"x(y(z()))\\", function \\"x\\" calls function \\"y\\", \\"y\\" calls function \\"z\\", and \\"z\\" has no nested calls, so the maximum depth is 3.","solution":"def max_function_depth(s: str) -> int: Returns the maximum depth of nested function calls in the provided string. :param s: A string containing nested function calls. :return: An integer representing the maximum depth of nested function calls. max_depth = 0 current_depth = 0 for char in s: if char == \'(\': current_depth += 1 max_depth = max(max_depth, current_depth) elif char == \')\': current_depth -= 1 return max_depth"},{"question":"Alice is a game developer working on a simple card game. The game involves a deck of cards where each card has a unique integer value. The objective of the game is to partition the deck into multiple groups where each group contains exactly `groupSize` cards and all cards within the same group have consecutive integer values. Your task is to determine if it is possible to rearrange the cards into the required groups. Write a function `canPartition(cards: List[int], groupSize: int) -> bool` that takes the list of integers representing the card values and the integer `groupSize`, and returns a boolean value indicating whether it is possible to form such groups. # Input - `cards`: A list of integers, where each integer represents the value of a card. The list will have between 1 and 10^5 elements. - `groupSize`: An integer between 1 and 10^4, representing the required size of each group. # Output - Return `True` if it is possible to rearrange the cards into groups, otherwise return `False`. # Example ```python # Example 1 cards = [1, 2, 3, 6, 2, 3, 4, 7, 8] groupSize = 3 print(canPartition(cards, groupSize)) # Output: True # Example 2 cards = [1, 2, 3, 4, 5] groupSize = 4 print(canPartition(cards, groupSize)) # Output: False ``` # Constraints 1. All integers in `cards` will be between -10^9 and 10^9. 2. The length of `cards` is a multiple of `groupSize`. # Explanation In the first example, it is possible to split the deck into three groups: `[1, 2, 3]`, `[2, 3, 4]`, and `[6, 7, 8]`. In the second example, you cannot group 5 cards into groups of 4.","solution":"from collections import Counter from typing import List def canPartition(cards: List[int], groupSize: int) -> bool: Returns True if it\'s possible to partition the deck into groups of exactly groupSize consecutive cards. Otherwise returns False. if len(cards) % groupSize != 0: return False card_count = Counter(cards) while card_count: min_card = min(card_count) for i in range(groupSize): current_card = min_card + i if card_count[current_card] == 0: return False card_count[current_card] -= 1 if card_count[current_card] == 0: del card_count[current_card] return True"},{"question":"You are given an array a consisting of n integers, and you need to perform q operations on this array. Each operation is described by three integers: t_i, x_i, and y_i. If t_i is 1, you need to update the element at position x_i in the array to y_i. If t_i is 2, you need to find the sum of the elements in the subarray from index x_i to index y_i (both inclusive). For example, if a = [1, 2, 3, 4, 5], then for an operation (1, 3, 10), the array will be updated to [1, 2, 10, 4, 5], and for another operation (2, 2, 4), the result will be the sum of the subarray [2, 10, 4], which is 16. The first line contains one integer n (1 le n le 10^5). The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9). The third line contains one integer q (1 le q le 10^5). Then q lines follow, each line containing three integers t_i, x_i, and y_i (1 le t_i le 2, 1 le x_i le n, 1 le y_i le n if t_i is 2, and 1 le y_i le 10^9 if t_i is 1). Answer the queries as follows: For each query of type 2, print the sum of the subarray from index x_i to index y_i.","solution":"def process_operations(n, a, q, operations): results = [] for t, x, y in operations: if t == 1: # Update the element at position x to y a[x-1] = y elif t == 2: # Calculate the sum of the subarray from index x to index y results.append(sum(a[x-1:y])) return results"},{"question":"A robot is placed in an M x N grid at the top-left corner (1, 1). The robot can move either right or down, but some cells in the grid are blocked. You are given the grid configuration in the form of a matrix with \'0\' representing a free cell and \'1\' representing a blocked cell. The robot\'s objective is to reach the bottom-right corner of the grid (M, N). Write a function that returns the number of unique paths the robot can take to reach the destination, modulo 10^9 + 7. The first line of input contains two integers M and N (1 ≤ M, N ≤ 1000) — the number of rows and columns in the grid. The next M lines contain N integers each, representing the grid configuration. Output the number of unique paths to reach the bottom-right corner modulo 10^9 + 7. Example: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2","solution":"def unique_paths_with_obstacles(m, n, grid): MOD = 10**9 + 7 if grid[0][0] == 1 or grid[m - 1][n - 1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[m - 1][n - 1]"},{"question":"Andrew is a game developer working on a new 2D game. The game\'s world consists of a rectangular grid with \'n\' rows and \'m\' columns. Each cell in the grid can either be empty or contain a wall. Andrew wants to implement a feature that allows the player to determine the shortest path from any starting point to any ending point in this grid. However, Andrew needs to ensure that the path does not cross any walls, and diagonal movements are not allowed. The player can only move up, down, left, or right. Andrew would like to make sure the path exists before the player starts. He needs your help in calculating the shortest path length given the grid and the starting and ending points. Write a function `shortest_path(grid, start, end)` that takes in a grid represented as a list of lists of strings (\' \' for empty cell, \'#\' for wall), the starting point in the format (row, col), and the ending point in the format (row, col). The function should return the length of the shortest path, or -1 if there is no valid path. # Input - `grid`: A list of lists of strings where each string is either \' \' or \'#\'. - `start`: A tuple (row, col) representing the starting point. - `end`: A tuple (row, col) representing the ending point. # Output - An integer representing the shortest path length, or -1 if no path exists. # Constraints - 1 ≤ n, m ≤ 1000 (grid dimensions) - 0 ≤ row < n, 0 ≤ col < m - `start` and `end` will always be valid positions within the grid boundaries. - The grid will be connected, meaning there will be at least one path from any starting point to any ending point if there are no walls blocking the path. # Example ```python grid = [ [\' \', \' \', \'#\', \' \'], [\'#\', \' \', \'#\', \' \'], [\' \', \' \', \' \', \' \'], [\' \', \'#\', \' \', \'#\'] ] start = (0, 0) end = (2, 3) shortest_path(grid, start, end) # Output: 5 ``` In the above grid, the shortest path from (0, 0) to (2, 3) is of length 5. The player can navigate around the walls to reach the destination. # Solution Approach To solve this problem, one can use Breadth-First Search (BFS) algorithm which is well-suited for finding the shortest path in an unweighted grid. The BFS will explore the grid level by level, ensuring the shortest path is found.","solution":"from collections import deque def shortest_path(grid, start, end): Finds the shortest path in a grid avoiding walls. Parameters: grid (list of lists of str): The grid, where \' \' is an empty cell and \'#\' is a wall. start (tuple): Starting cell (row, col). end (tuple): Ending cell (row, col). Returns: int: Length of the shortest path or -1 if no path exists. n, m = len(grid), len(grid[0]) queue = deque([(start[0], start[1], 0)]) # Store the coordinates and the distance visited = set() visited.add(start) # Define possible moves: up, down, left, right moves = [(-1, 0), (1, 0), (0, -1), (0, 1)] while queue: x, y, dist = queue.popleft() # Check if we reached the end point if (x, y) == end: return dist # Explore neighbors for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \' \': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # If no path was found"},{"question":"Given an array of integers, implement a function to determine if there exists a subarray with the given sum. A subarray is a contiguous part of the array. # Input - The first line of input contains an integer `n` (2 leq n leq 10^5), the number of elements in the array. - The second line of input contains `n` space-separated integers `a[i]` (-10^9 leq a[i] leq 10^9), the elements of the array. - The third line of input contains an integer `S` (-|10^9| leq S leq 10^9), the target sum. # Output Print \\"YES\\" if there is a subarray with sum equal to `S`, otherwise print \\"NO\\". # Examples Example 1 ``` Input: 5 1 2 3 4 5 9 Output: YES Explanation: There is a subarray with the sum 9, which is [2, 3, 4]. ``` Example 2 ``` Input: 5 1 2 3 4 5 20 Output: NO Explanation: There is no subarray with sum 20. ```","solution":"def has_subarray_with_sum(n, array, target_sum): Determines if there exists a subarray with the sum equal to target_sum. Parameters: n (int): The number of elements in the array. array (list of int): The elements of the array. target_sum (int): The target sum to find in the subarray. Returns: str: \\"YES\\" if there is a subarray with sum equal to target_sum, otherwise \\"NO\\". current_sum = 0 prefix_sums = set() prefix_sums.add(0) for num in array: current_sum += num if (current_sum - target_sum) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"Create a Python function that takes a list of integers and a target integer as input. The function should return a list of unique pairs of integers from the input list that add up to the target. Each pair should be a tuple with the smaller number first, and the pairs should be sorted in ascending order based on the first element of the tuple. Ensure that the same pair of integers is not used more than once. **Function Signature:** ```python def find_pairs(numbers: List[int], target: int) -> List[Tuple[int, int]]: ``` # Example ```python find_pairs([1, 2, 3, 4, 3, 6, -1, 0], 5) ``` **Output:** ``` [(1, 4), (2, 3), (-1, 6)] ``` **Explanation:** In this example: - 1 + 4 = 5 - 2 + 3 = 5 - -1 + 6 = 5 Pairs (1, 4), (2, 3), and (-1, 6) are formed, and they are sorted ascendingly. The pair (2, 3) can only appear once despite (3, 2) is also 5, but is considered the same pair for this problem. # Constraints: - Assume the function will only be tested with non-empty lists. - The numbers in the list are all integers. - The function should handle lists with up to 10,000 numbers efficiently.","solution":"from typing import List, Tuple def find_pairs(numbers: List[int], target: int) -> List[Tuple[int, int]]: Finds all unique pairs from the numbers list that sum up to target. Each pair is sorted (smaller number first) and the pairs are sorted by the first element. # A set to store visited numbers seen = set() # A set to store unique pairs pairs = set() for number in numbers: complement = target - number if complement in seen: pair = (min(number, complement), max(number, complement)) pairs.add(pair) seen.add(number) # Convert set to a sorted list return sorted(list(pairs))"},{"question":"Given a string, write a function to check if it can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. The function should take a single argument: 1. A string `str` consisting of lowercase Latin letters. The function should return `YES` if the input string can be rearranged to form a palindrome, and `NO` otherwise. # Example ``` Input: \\"civic\\" Output: \\"YES\\" Input: \\"ivicc\\" Output: \\"YES\\" Input: \\"hello\\" Output: \\"NO\\" ``` # Constraints - The string consists of lowercase Latin letters. - The string\'s length will not exceed 100 characters.","solution":"def can_form_palindrome(s): Returns \'YES\' if the input string can be rearranged to form a palindrome, otherwise \'NO\'. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"You are given a rectangular matrix `A` of size `m x n`, and you need to calculate the maximum sum of a submatrix with dimensions `k x l`. The submatrix can be any contiguous block of elements from the original matrix. # Input Format The input consists of three parts: 1. Two integers m and n (1 ≤ m, n ≤ 1000) — the number of rows and columns in matrix `A`. 2. A matrix `A` of `m` rows and `n` columns, where each element `a_ij` (1 ≤ a_ij ≤ 1000). 3. Two integers k and l (1 ≤ k ≤ m, 1 ≤ l ≤ n) — the dimensions of the submatrix. # Output Format Output a single integer, the maximum possible sum of a submatrix of dimensions `k x l` in the given matrix `A`. # Example Input ``` 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2 3 ``` # Example Output ``` 99 ``` # Explanation In the example above, the maximum submatrix sum of dimensions `2 x 3` is obtained from the submatrix starting at the second row and second column: ``` 7 8 9 12 13 14 ``` The sum is `7 + 8 + 9 + 12 + 13 + 14 = 63`. # Constraints - You need to consider every possible submatrix of dimensions `k x l` in order to find the one with the maximum sum. - Optimize your approach to handle larger matrices efficiently.","solution":"def max_submatrix_sum(matrix, m, n, k, l): Returns the maximum sum of a submatrix with dimensions k x l in matrix of size m x n. # Calculate the prefix sum matrix prefix_sum = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): prefix_sum[i + 1][j + 1] = ( matrix[i][j] + prefix_sum[i][j + 1] + prefix_sum[i + 1][j] - prefix_sum[i][j] ) max_sum = float(\'-inf\') for i in range(1, m - k + 2): for j in range(1, n - l + 2): total = ( prefix_sum[i + k - 1][j + l - 1] - prefix_sum[i - 1][j + l - 1] - prefix_sum[i + k - 1][j - 1] + prefix_sum[i - 1][j - 1] ) max_sum = max(max_sum, total) return max_sum"},{"question":"You are given a list of products with their weights and values, and a backpack that can carry a maximum weight. Your task is to select a subset of these products to maximize the total value without exceeding the backpack\'s weight limit. The first line of input contains two integers n and W (1 ≤ n ≤ 100; 1 ≤ W ≤ 10000), where n is the number of products and W is the maximum weight the backpack can carry. The next n lines each contain two integers wi and vi (1 ≤ wi ≤ 1000; 1 ≤ vi ≤ 10000), where wi is the weight of the i-th product and vi is its value. Output the maximum total value that can be achieved. If there are multiple ways to achieve this maximal value, you can output any one of them. **Example:** Input: ``` 4 10 5 10 4 40 6 30 3 50 ``` Output: ``` 90 ```","solution":"def knapsack(n, W, items): Solves the knapsack problem. Parameters: n (int): Number of products W (int): Maximum weight the backpack can carry items (list of tuple): Each tuple consists of (weight, value) of the items Returns: int: The maximum total value that can be achieved without exceeding the backpack\'s weight limit. dp = [[0] * (W + 1) for _ in range(n + 1)] for i in range(1, n + 1): wi, vi = items[i - 1] for w in range(W + 1): if wi <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - wi] + vi) else: dp[i][w] = dp[i - 1][w] return dp[n][W] # Example usage: # n = 4 # W = 10 # items = [(5, 10), (4, 40), (6, 30), (3, 50)] # print(knapsack(n, W, items)) # Output: 90"},{"question":"You are responsible for managing a set of elevators in a building with n floors. Each elevator services all floors and can perform two types of operations: move(up) and move(down). The initial position of the elevator is on the ground floor (floor 0). When performing a \\"move(up, x)\\" operation, the elevator moves up x floors, and when performing a \\"move(down, x)\\" operation, the elevator moves down x floors. If the elevator attempts to move below the ground floor, it stays at floor 0. You have a record of k operations that you need to execute sequentially. The objective is to determine the floor of the elevator after each operation. The first line contains the integer k (1 ≤ k ≤ 100000) — the number of operations. The next k lines contain the operations. Each operation is described as follows: - \\"up x\\" (1 ≤ x ≤ 106) — the elevator moves up x floors - \\"down x\\" (1 ≤ x ≤ 106) — the elevator moves down x floors Output k integers. Each integer should be the floor of the elevator after performing each operation sequentially. In the first example, the elevator will perform the \\"up 2\\" operation and move to the 2nd floor. Then performing the \\"down 1\\" operation, it will move to the 1st floor, and finally, performing the \\"up 3\\" operation, it will move to the 4th floor. In the second example, the elevator performs the \\"down 3\\" operation initially, but since it starts at the ground floor, it remains at floor 0. Then performing the \\"up 5\\" operation, it moves to the 5th floor. Example Input: ``` 3 up 2 down 1 up 3 ``` Example Output: ``` 2 1 4 ``` Example Input: ``` 2 down 3 up 5 ``` Example Output: ``` 0 5 ```","solution":"def elevator_operations(k, operations): floor = 0 result = [] for operation in operations: direction, x = operation.split() x = int(x) if direction == \\"up\\": floor += x elif direction == \\"down\\": floor -= x if floor < 0: floor = 0 result.append(floor) return result"},{"question":"You are given an undirected, weighted graph representing a network of computers. Each vertex represents a computer and each edge represents a direct communication link between two computers with a certain transmission cost. Your task is to implement an algorithm to find the minimum cost to ensure all computers can communicate with each other, either directly or indirectly. Input The first line contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), where n is the number of computers (vertices) and m is the number of communication links (edges). Each of the following m lines describes a communication link in the form of three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is a direct link between computers u and v with a transmission cost of w. Output Output a single integer representing the minimum cost required for all computers to communicate with each other. If it is not possible for all computers to communicate, print -1. Example Input: 4 5 1 2 1 2 3 2 3 4 1 4 1 3 1 3 2 Output: 5 Explanation: The minimum cost to connect all computers is achieved by either: 1 -> 2 -> 3 -> 4 (cost: 1 + 2 + 1 = 4)","solution":"def find_minimum_spanning_tree(n, edges): Returns the minimum cost to ensure all computers can communicate with each other in an undirected, weighted graph. Uses Kruskal\'s algorithm. If it is not possible for all computers to communicate, returns -1. # Kruskal\'s algorithm requires a union-find (disjoint set) data structure class UnionFind: def __init__(self, size): self.parent = list(range(size)) self.rank = [0] * size def find(self, node): if self.parent[node] != node: self.parent[node] = self.find(self.parent[node]) # Path compression return self.parent[node] def union(self, node1, node2): root1 = self.find(node1) root2 = self.find(node2) if root1 != root2: if self.rank[root1] > self.rank[root2]: self.parent[root2] = root1 elif self.rank[root1] < self.rank[root2]: self.parent[root1] = root2 else: self.parent[root2] = root1 self.rank[root1] += 1 return True return False uf = UnionFind(n) edges.sort(key=lambda x: x[2]) # Sort edges by their weight minimum_cost = 0 num_edges_used = 0 for u, v, w in edges: if uf.union(u-1, v-1): # UnionFind is 0-indexed, but vertices are 1-indexed minimum_cost += w num_edges_used += 1 if num_edges_used == n - 1: # We only need n-1 edges to connect n nodes break # Check if we have used exactly n-1 edges, which means all nodes are connected if num_edges_used == n - 1: return minimum_cost else: return -1"},{"question":"A group of n friends are planning a road trip. They all want to travel together, but their vehicle can only carry a maximum of m people at a time. Given the total number of friends and the vehicle\'s capacity, the friends want to know how many trips they will need to make so that everyone gets to the destination. Write a function that takes two integers, n and m, and returns the minimum number of trips needed to transport all the friends. # Input: - The function takes two integers: - n (1 le n le 10^4): the number of friends. - m (1 le m le 10^4): the maximum number of people the vehicle can carry at a time. # Output: - The function should return a single integer: the minimum number of trips required to transport all the friends. # Example: Example 1: ```python >>> min_trips(10, 4) 3 ``` *Explanation*: Here, the vehicle can carry 4 people at a time. To transport 10 people, the minimum number of trips required is 3 (4 + 4 + 2). Example 2: ```python >>> min_trips(5, 2) 3 ``` *Explanation*: Here, the vehicle can carry 2 people at a time. To transport 5 people, the minimum number of trips required is 3 (2 + 2 + 1). # Function Signature: ```python def min_trips(n: int, m: int) -> int: # your code here ```","solution":"def min_trips(n: int, m: int) -> int: Returns the minimum number of trips needed to transport all the friends. Parameters: n (int): The number of friends. m (int): The maximum number of people the vehicle can carry at a time. Returns: int: The minimum number of trips required. return (n + m - 1) // m"},{"question":"You are given a permutation of integers from 1 to n. A permutation is called \\"good\\" if it meets the following condition: for every index i (1 le i le n-1), if i is an odd integer, then the element at the i-th position is less than the element at the (i+1)-th position. Create a function to check whether a given permutation is good or not. If the permutation is good, return \\"YES\\"; otherwise, return \\"NO\\". The first line of the input contains an integer n (1 le n le 10^5) – the length of the permutation. The second line contains n space-separated integers representing the permutation of the integers from 1 to n. Print \\"YES\\" if the permutation is good, otherwise print \\"NO\\". # Example Input ``` 5 1 3 2 4 5 ``` Output ``` YES ``` Input ``` 4 3 1 4 2 ``` Output ``` NO ``` # Explanation In the first example, the permutation is [1, 3, 2, 4, 5]. Let\'s check the condition: - For i = 1, 1 < 3 (condition satisfied) - For i = 3, 2 < 4 (condition satisfied) Since all conditions are satisfied, the output is \\"YES\\". In the second example, the permutation is [3, 1, 4, 2]. Let\'s check the condition: - For i = 1, 3 is not less than 1 (condition not satisfied) Since at least one condition is not satisfied, the output is \\"NO\\".","solution":"def is_good_permutation(n, permutation): Returns \\"YES\\" if the permutation is good, otherwise returns \\"NO\\". for i in range(0, n-1, 2): if permutation[i] >= permutation[i+1]: return \\"NO\\" return \\"YES\\""},{"question":"A well-known computer virus has infected several workstations in a university’s computer lab. The IT staff have identified each workstation and its direct network connections to other workstations in the lab. The network of the lab can be represented as an undirected graph where each node represents a workstation and each edge represents a direct connection between two workstations. The virus spreads between directly connected workstations in one unit time. To contain the virus, the IT staff decide to disconnect certain workstations from the network by cutting connections. However, they want to minimize the number of cuts made, while ensuring that no workstation can infect any other. Given an integer n (number of workstations) and a list of edges representing the direct connections between workstations, you need to find the minimum number of cuts required to disconnect all the workstations such that no workstation can reach any other workstation. Write a function `min_cuts_to_disconnect` that takes the following parameters: - `n` (1 ≤ n ≤ 1000): an integer representing the number of workstations. - `edges` (0 ≤ len(edges) ≤ 10000): a list of tuples, where each tuple (a, b) (1 ≤ a, b ≤ n) represents a direct connection between workstations a and b. The function should return an integer representing the minimum number of cuts required to disconnect all the workstations in the lab. # Sample Input ``` n = 5 edges = [(1, 2), (2, 3), (3, 4), (4, 5), (2, 4)] ``` # Sample Output ``` 3 ``` # Explanation In the given sample, one of the possible ways to disconnect all the workstations is by cutting connections (1, 2), (2, 3), and (3, 4). After these cuts, each workstation becomes isolated from every other workstation. Note: This problem requires knowledge of graph theory, specifically graph cuts and minimum cut algorithms.","solution":"from collections import defaultdict, deque def min_cuts_to_disconnect(n, edges): Calculate the minimum number of cuts required to disconnect all workstations in the lab. Parameters: n (int): Number of workstations. edges (list of tuples): List of direct connections between workstations. Returns: int: Minimum number of cuts required. # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # Function to perform BFS and count nodes in the connected component def bfs(node, visited): queue = deque([node]) visited.add(node) count = 0 while queue: current = queue.popleft() count += 1 for neighbor in adj_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return count visited = set() cuts = 0 # Iterate through all nodes and perform BFS/DFS to find all connected components for node in range(1, n + 1): if node not in visited: # Each BFS traversal gives us one connected component component_size = bfs(node, visited) # To disconnect this component, we need exactly (component_size - 1) cuts cuts += (component_size - 1) return cuts"},{"question":"Given a grid of size `n x m`, you need to return the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. Write a function `unique_paths(n, m)` that takes in two integers `n` and `m` and returns an integer representing the total number of unique paths from the top-left corner to the bottom-right corner in an `n x m` grid. # Input - `n` (1 ≤ n ≤ 100) - `m` (1 ≤ m ≤ 100) # Output - Return an integer representing the number of unique paths from the top-left corner to the bottom-right corner of the grid. # Example Example 1 Input: ``` 3 7 ``` Output: ``` 28 ``` Explanation: There are 28 unique paths to get from the top-left corner to the bottom-right corner in a 3x7 grid. Example 2 Input: ``` 3 2 ``` Output: ``` 3 ``` Explanation: There are 3 unique paths to get from the top-left corner to the bottom-right corner in a 3x2 grid.","solution":"def unique_paths(n, m): Returns the number of unique paths in a n x m grid. # Create a 2D array dp with dimensions (n x m) dp = [[1] * m for _ in range(n)] # Iterate through the grid starting from (1,1) since the first row and first column # can only be reached by moving right or down from the starting point. for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The value in the bottom-right corner will be the answer return dp[n-1][m-1]"},{"question":"You are given a matrix of size n x m where each cell contains an integer representing the height of that cell\'s terrain. Your task is to find the minimum effort required for an ant to travel from the top-left cell (0,0) to the bottom-right cell (n-1,m-1). The ant can travel to a neighboring cell (left, right, up, or down) if the absolute height difference between the current cell and the neighboring cell doesn’t exceed a given threshold k. However, you need to determine the smallest value of k that will allow such a travel path from the top-left to the bottom-right cell. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the matrix. Each of the next n lines contains m integers (0 ≤ height ≤ 10000) which describes the height of each cell in the matrix. Output Output a single integer k, the minimum possible value to allow the ant to travel from (0, 0) to (n-1, m-1). Example: Input: 3 3 1 2 2 3 8 2 5 3 5 Output: 2 Explanation: With k = 2, the possible path would be (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2). The effort here is determined by the maximum height difference along the path, which in this case is max(|1-3|, |3-5|, |5-3|, |3-5|) = 2.","solution":"import heapq def minimum_effort_path(heights): def can_travel(k): rows, cols = len(heights), len(heights[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] pq = [(0, 0, 0)] # (effort, row, col) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while pq: effort, row, col = heapq.heappop(pq) if row == rows - 1 and col == cols - 1: return True if visited[row][col]: continue visited[row][col] = True for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and not visited[new_row][new_col]: new_effort = abs(heights[row][col] - heights[new_row][new_col]) if new_effort <= k: heapq.heappush(pq, (new_effort, new_row, new_col)) return False left, right = 0, 10000 while left < right: mid = (left + right) // 2 if can_travel(mid): right = mid else: left = mid + 1 return left def ant_travel_min_effort(matrix): return minimum_effort_path(matrix)"},{"question":"You are given a list of non-negative integers. Your task is to find the smallest positive integer that does not appear in the list. For example, for the input list [1, 3, 6, 4, 1, 2], the smallest positive integer that does not appear in the list is 5. Similarly, for the input list [1, 2, 3], the smallest missing positive integer is 4. The input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The following t lines describe the test cases. Each test case consists of two lines: the first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the list, and the second line contains n non-negative integers (0 ≤ Ai ≤ 10^6). Output t lines, each line should contain one integer denoting the smallest positive integer that does not appear in the corresponding list. Example: Input: 3 6 1 3 6 4 1 2 4 1 2 3 4 5 3 5 1 4 2 Output: 5 5 6 Explanation: In the first test case, the smallest positive integer that is not in the list is 5. In the second test case, the smallest positive integer not in the list is 5 since 1, 2, 3, and 4 are all present. In the third test case, the smallest positive integer not in the list is 6 since 1 through 5 are all present.","solution":"def smallest_missing_positive(t, test_cases): results = [] for i in range(t): n, nums = test_cases[i] num_set = set(nums) smallest_missing = 1 while smallest_missing in num_set: smallest_missing += 1 results.append(smallest_missing) return results"},{"question":"Imagine you are working on a system that schedules tasks to be executed on a single processor. Each task has a unique start time, a unique end time, and a priority. The processor can only execute one task at a time, and higher priority tasks should be preferred in case of overlapping tasks. You are given a list of tasks where each task consists of three integers [start, end, priority]. Your task is to determine the maximum number of \\"non-overlapping\\" tasks that can be executed while respecting their priorities. Write a function `maxNonOverlappingTasks(tasks)` that takes a list of `tasks` and returns the maximum number of non-overlapping tasks that can be executed. # Input: - `tasks` (List of List of integers): A list where each element is a list of three integers [start, end, priority] with (0 ≤ start < end ≤ 1000 and 1 ≤ priority ≤ 100). The input list may contain up to 1000 such tasks. # Output: - Integer: The maximum number of non-overlapping tasks that can be executed. # Example: ```python def maxNonOverlappingTasks(tasks): # Your code here # Example 1: tasks1 = [[1, 3, 2], [2, 5, 4], [0, 2, 3]] print(maxNonOverlappingTasks(tasks1)) # Output: 2 # Example 2: tasks2 = [[0, 3, 1], [1, 4, 2], [3, 5, 3], [5, 7, 4]] print(maxNonOverlappingTasks(tasks2)) # Output: 3 ``` Notes: - In the first example, the processor can execute the tasks [[1, 3, 2], [0, 2, 3]] or [[1, 3, 2], [2, 5, 4]]. - In the second example, the processor can execute the tasks [[0, 3, 1], [3, 5, 3], [5, 7, 4]]. - The solution must consider the priorities and select only the non-overlapping tasks with the highest priority when there is a conflict.","solution":"def maxNonOverlappingTasks(tasks): Determines the maximum number of non-overlapping tasks that can be executed while respecting their priorities. # Sort tasks by end time, and in case of tie by start time and priority (higher first) tasks.sort(key=lambda x: (x[1], x[0], -x[2])) count = 0 last_end = -1 for start, end, priority in tasks: if start >= last_end: # Non-overlapping condition count += 1 last_end = end return count"},{"question":"You are given a rectangular matrix of size n by m. Each cell of the matrix contains a non-negative integer. You are initially positioned in the top-left corner of the matrix (cell (1, 1)) and need to reach the bottom-right corner (cell (n, m)). You can only move to the right or downward at each step. Each move to a cell with an integer x represents an energy cost of x units. Your goal is to find the minimum energy cost to reach the bottom-right corner of the matrix from the top-left corner. Write a function that takes as input an integer n representing the number of rows, an integer m representing the number of columns, and a list of lists `matrix` where each list represents a row of the matrix and each element in the row represents the energy cost of that cell. The function should return a single integer representing the minimum energy cost required to reach the bottom-right corner of the matrix. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 1000). - The next n lines each contain m integers separated by spaces, where the integer in the i-th row and j-th column represents the energy cost of cell (i, j) (0 ≤ matrix[i][j] ≤ 100). **Output:** - A single integer representing the minimum energy cost required to reach the bottom-right corner of the matrix. **Example:** ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 ``` In the example above, the path with the minimum energy cost is 1 → 3 → 1 → 1 → 1, totaling 7 units of energy cost.","solution":"def min_energy_cost(n, m, matrix): Returns the minimum energy cost to reach the bottom-right corner of the matrix from the top-left corner. :param n: int - number of rows :param m: int - number of columns :param matrix: list of lists - matrix of non-negative integers representing energy costs :return: int - minimum energy cost # DP table to store minimum cost to reach each cell dp = [[float(\'inf\')] * m for _ in range(n)] # Initialize starting point dp[0][0] = matrix[0][0] # Fill the DP table for i in range(n): for j in range(m): if i > 0: dp[i][j] = min(dp[i][j], dp[i-1][j] + matrix[i][j]) # From top if j > 0: dp[i][j] = min(dp[i][j], dp[i][j-1] + matrix[i][j]) # From left # Return the minimum cost to reach the bottom-right corner return dp[n-1][m-1]"},{"question":"A logistics company is managing a fleet of delivery trucks that transport packages between different cities. Each truck follows a defined route, but traffic conditions can cause delays. The company wants to optimize the delivery times by minimizing the maximum delay experienced by any truck in the fleet. You are tasked with writing a program to help the logistics company achieve this goal. Given the number of cities, the number of trucks, and the routes and delays for each truck, determine the minimum possible value of the maximum delay across all delivery routes. Each truck\'s route consists of a sequence of cities they visit in order, and the delay for that route is the sum of delays between consecutive cities on that route. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of cities. - The second line contains an integer `m` (1 ≤ m ≤ 100), the number of trucks. - The next `m` lines describe the routes and delays for each truck: - Each line starts with an integer `k` (2 ≤ k ≤ n), the number of cities the truck visits. - Followed by `k` integers representing the sequence of cities visited by that truck. - Followed by `k-1` integers representing the delay between each consecutive pair of cities in the sequence. # Output: - Print a single integer, the minimum possible value of the maximum delay experienced by any truck. # Example: Input: ``` 5 3 3 1 2 3 5 6 4 4 3 2 5 3 4 6 3 1 3 4 2 7 ``` Output: ``` 12 ``` # Explanation: - The first truck visits cities 1 -> 2 -> 3 with delays 5 and 6, so the total delay is 11. - The second truck visits cities 4 -> 3 -> 2 -> 5 with delays 3, 4, and 6, so the total delay is 13. - The third truck visits cities 1 -> 3 -> 4 with delays 2 and 7, so the total delay is 9. The maximum delay among the three trucks is currently 13. The goal is to manage the routes and delays such that this maximum delay can be minimized, in this case, to 12.","solution":"def minimize_max_delay(n, m, truck_data): Returns the minimum possible value of the maximum delay experienced by any truck. :param n: Number of cities :param m: Number of trucks :param truck_data: List of tuples containing truck routes and delays :return: Minimum possible value of the maximum delay # Function to compute total delay of given truck\'s route def compute_total_delay(truck): k = truck[0] cities = truck[1:k + 1] delays = truck[k + 1:] return sum(delays) total_delays = [compute_total_delay(truck) for truck in truck_data] return max(total_delays)"},{"question":"Alex and Bob are playing a game with a pile of stones. Initially, there are n stones in the pile. The players take turns, with Alex going first. In each turn, a player can remove 1, 2, or 3 stones from the pile. The player who cannot make a move (because there are no stones left) loses the game. Both players play optimally. Your task is to determine who will win the game. Input: - The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. - Each of the next t lines contains a single integer n (1 ≤ n ≤ 10^5), the number of stones in the pile in each test case. Output: - For each test case, print \\"Alex\\" if Alex wins, and \\"Bob\\" if Bob wins. Example: Input: 3 1 2 4 Output: Alex Alex Bob","solution":"def game_winner(t, test_cases): Determines the winner of the game for each test case. Parameters: - t: integer, number of test cases - test_cases: list of integers, number of stones in each test case Returns: - list of strings, \\"Alex\\" if Alex wins, \\"Bob\\" if Bob wins for each test case # Results list to store the winner for each test case results = [] # Iterate through each test case for n in test_cases: # Alex wins if the number of stones is not a multiple of 4 if n % 4 == 0: results.append(\'Bob\') else: results.append(\'Alex\') return results"},{"question":"An archaeologist has discovered an ancient puzzle board that consists of an n x m grid. Each cell in the grid contains a number between 0 and 9. The archaeologist can move from any cell to its adjacent cells (left, right, up, down) but cannot move diagonally. The goal is to find the longest path in the grid such that each number in the path is strictly greater than the previous number. The path cannot revisit any cell during its traversal. Write a function `longestIncreasingPath(grid: List[List[int]]) -> int` that returns the length of the longest increasing path in the grid. # Example ```python grid = [ [9, 9, 4], [6, 6, 8], [2, 1, 1] ] ``` The output should be `4` because the longest increasing path is `[1, 2, 6, 9]`. # Input - The grid is given as a list of lists of integers. - The dimensions of the grid are n x m, where 1 ≤ n, m ≤ 200. # Output - The length of the longest increasing path. # Constraints - The numbers in the grid are integers between 0 and 9 (inclusive). # Notes - The solution should be optimized to handle the largest provided constraints efficiently. - Use Depth-First Search (DFS) with memoization or Dynamic Programming to achieve optimal performance. Consider providing unit tests with edge cases to validate the implementation consistently.","solution":"from typing import List def longestIncreasingPath(grid: List[List[int]]) -> int: if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) memo = [[-1 for _ in range(m)] for _ in range(n)] def dfs(i, j): if memo[i][j] != -1: return memo[i][j] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] max_length = 1 for direction in directions: x, y = i + direction[0], j + direction[1] if 0 <= x < n and 0 <= y < m and grid[x][y] > grid[i][j]: length = 1 + dfs(x, y) max_length = max(max_length, length) memo[i][j] = max_length return max_length longest_path = 0 for i in range(n): for j in range(m): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"You are given two arrays of integers, `A` and `B`, each containing `n` elements. Your task is to create the lexicographically smallest sequence possible by combining elements from both arrays while preserving the relative order of elements from each array. For instance, let `A = [3, 9, 15]` and `B = [2, 5, 13]`. The lexicographically smallest sequence would be `[2, 3, 5, 9, 13, 15]`. # Input The first line of input contains an integer `n` (1 le n le 10^5), the number of elements in each array `A` and `B`. The second line contains `n` space-separated integers representing the array `A`. The third line contains `n` space-separated integers representing the array `B`. # Output Output a single line containing the lexicographically smallest sequence formed by elements combined from arrays `A` and `B`. # Example Input ``` 3 3 9 15 2 5 13 ``` Output ``` 2 3 5 9 13 15 ``` # Note - The sequence should be lexicographically smallest: i.e., considering the smallest possible number first while respecting the original order when taking numbers from `A` and `B`. - The length of the combined sequence will always be `2n`.","solution":"def lexicographically_smallest_sequence(n, A, B): Returns the lexicographically smallest sequence made by combining arrays A and B while preserving the relative order of elements from each array. result = [] i, j = 0, 0 while i < n and j < n: if A[i] <= B[j]: result.append(A[i]) i += 1 else: result.append(B[j]) j += 1 while i < n: result.append(A[i]) i += 1 while j < n: result.append(B[j]) j += 1 return result"},{"question":"A fictional trading card game has caught the interest of many players due to its unique card combination mechanic. Each card is defined by three attributes: 1. Name (A string of lowercase letters) 2. Power (An integer) 3. Type (A string representing the type category of the card, like \\"magic\\", \\"dragon\\", or \\"warrior\\") Players want to build the most powerful deck possible. A deck is valid under the following constraints: - A valid deck must consist of exactly `N` cards. - A card type cannot be repeated more than once in the same deck. You are tasked with finding the deck that has the highest total power. If there are multiple decks with the same total power, choose the one that has the lexicographically smallest concatenation of card names in the deck. The input format is as follows: - An integer `C` (1 ≤ C ≤ 100) indicating the number of available cards. - The next `C` lines each describe a card in the format: `name power type`. Your output should be: - If a valid deck is found, print the total power of the highest power deck, followed by the concatenation of card names in lexicographical order. - If no valid deck can be constructed, print `-1`. # Example Input: ``` 5 firebolt 10 magic dragonbreath 8 dragon shield 5 warrior lightning 6 magic dragonheart 7 dragon ``` N = 3 Output: ``` 21 dragonbreath firebolt shield ``` Explanation: From the given cards, multiple decks can be created: - Deck 1: firebolt, dragonbreath, shield with total power 10+8+5 = 23. - Deck 2: lightning, dragonbreath, shield with total power 6+8+5 = 19. The valid deck with the highest power is deck 1 but if deck 2 happens to have the same highest power, the lexicographical order of concatenation would lead to `dragonbreathfireboltshield` being smallest. For a more straightforward case: Input: ``` 3 sparkle 4 magic frost 3 warrior wave 2 water ``` N = 2 Output: ``` 7 frost sparkle ``` In this case, the deck `frost sparkle` has the highest power that matches the constraints and lexicographical order requirement.","solution":"import itertools def find_best_deck(cards, N): # Filter unique types to create combinations of length N valid_cards = [] for card in cards: name, power, card_type = card.split() valid_cards.append((name, int(power), card_type)) # Generate all combinations of cards (C choose N) card_combinations = list(itertools.combinations(valid_cards, N)) best_power = -1 best_deck = None for combination in card_combinations: types = set(card[2] for card in combination) if len(types) == N: # all types are unique total_power = sum(card[1] for card in combination) if total_power > best_power: best_power = total_power best_deck = combination elif total_power == best_power: current_names = \'\'.join(sorted(card[0] for card in combination)) best_names = \'\'.join(sorted(card[0] for card in best_deck)) if current_names < best_names: best_deck = combination if best_deck is None: print(-1) else: best_names = sorted(card[0] for card in best_deck) print(f\\"{best_power} {\' \'.join(best_names)}\\") def main(): input_data = [ \\"5\\", \\"firebolt 10 magic\\", \\"dragonbreath 8 dragon\\", \\"shield 5 warrior\\", \\"lightning 6 magic\\", \\"dragonheart 7 dragon\\", ] N = 3 cards = input_data[1:] find_best_deck(cards, N) if __name__ == \\"__main__\\": main()"},{"question":"Alice has just moved into a new apartment and she wants to set up her home theater system in the living room. The living room is rectangular and can be represented as a grid of n × m cells. Each cell is either empty or contains an obstacle (like a pillar). Alice wants to place the screen and the projector on opposite walls such that there\'s a clear line of sight between them (i.e., there must be a straight line of contiguous empty cells). Help Alice determine the maximum number of contiguous empty cells in a row she can use as a line of sight from one wall to the opposite wall. The first line contains 2 space-separated integers n and m (1 ≤ n, m ≤ 25) — the dimensions of the living room. Then follow n lines each containing m characters either \'0\' or \'1\'. \'0\' indicates an empty cell and \'1\' an obstacle. Output a single integer — the maximum number of contiguous empty cells in a row from one wall to the opposite wall. # Example Input: ``` 4 5 00100 00000 11111 00010 ``` Output: ``` 5 ```","solution":"def max_contiguous_empty_cells(n, m, grid): Function to determine the maximum number of contiguous empty cells in a row. :param n: Integer, number of rows in the grid :param m: Integer, number of columns in the grid :param grid: List of strings, each representing a row in the grid :return: Integer, the maximum number of contiguous empty cells in a row max_contiguous = 0 for row in grid: max_in_row = max(map(len, row.split(\'1\'))) if max_in_row > max_contiguous: max_contiguous = max_in_row return max_contiguous"},{"question":"Company \\"Y\\" has invested in developing a new security system for their multi-floor skyscraper. The system features m elevators, each capable of carrying passengers between any two floors. Additionally, the system can prioritize maintenance tasks, ensuring that the elevators are in optimal condition at all times. Each day, there are several maintenance tasks that need to be performed. For each task, you\'ll know the specific elevator to be serviced, as well as the start time and the end time of the task. Once an elevator starts a maintenance task, it cannot be used for any other purpose during the duration of that task. Your goal is to determine a schedule for the maintenance tasks that will allow you to perform the maximum number of tasks without any overlap on the same elevator. You may assume that each elevator operates independently. The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 20) — the number of tasks and the number of elevators, respectively. The next n lines contain three integers ei, si, and ei (1 ≤ ei ≤ m, 1 ≤ si, ei ≤ 109) describing the i-th maintenance task where: - ei is the elevator number, - si is the start time, and - ei is the end time. Print n integers x1, x2, ..., xn. Number xi should equal 1 if the i-th task should be performed, otherwise, it should equal 0. If there are several optimal solutions, print any of them.","solution":"def max_maintenance_tasks(n, m, tasks): Find the maximum number of maintenance tasks that can be performed without conflicts for each elevator. # Group tasks by elevator elevators_tasks = [[] for _ in range(m)] for idx, (e, s, t) in enumerate(tasks): elevators_tasks[e - 1].append((s, t, idx)) result = [0] * n for tasks in elevators_tasks: # Sort tasks by end time tasks.sort(key=lambda x: x[1]) # Use a greedy algorithm to select the maximum number of non-overlapping tasks last_end_time = 0 for s, t, idx in tasks: if s >= last_end_time: result[idx] = 1 last_end_time = t return result"},{"question":"You are given a string consisting of lowercase letters and an integer k. Your task is to determine the minimum number of characters that must be changed in order to obtain a k-periodic string. A string is k-periodic if there exists a string t of length k such that the original string s can be obtained by repeating t multiple times. For example, if s = \\"ababab\\" and k = 2, then s is already 2-periodic because the string \\"ab\\" repeated 3 times gives \\"ababab\\". If s = \\"abcabcabc\\" and k = 3, s is 3-periodic because \\"abc\\" repeated 3 times gives \\"abcabcabc\\". Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), where n is the length of the string. - The second line contains a string s of length n consisting of lowercase letters. Output: - Output a single integer, the minimum number of character changes needed to make the string k-periodic. Example: Input: 8 4 aabbccdd Output: 4 Explanation: The given string \\"aabbccdd\\" can be made 4-periodic by changing \'b\' to \'a\' and \'d\' to \'c\', resulting in \\"aaaacccc\\". This requires 4 character changes. In this case, there is only one possible 4-periodic string, which is \\"abcdabcd\\". Adjusting \\"aabbccdd\\" to this would require changing all characters except the first \'a\', resulting in 7 changes. Hence, transforming \\"aabbccdd\\" to \\"aaaacccc\\" with 4 changes is optimal.","solution":"def min_changes_to_k_periodic(n, k, s): changes = 0 # Check each position in the k-periodic substrings for i in range(k): frequency = [0] * 26 # initialize frequency array for each position for j in range(i, n, k): frequency[ord(s[j]) - ord(\'a\')] += 1 max_frequency = max(frequency) # get max frequency character for current position changes += (n // k) - max_frequency # add the number of changes needed for current position return changes"},{"question":"In a distant galaxy, the system of planets follows a peculiar orbit pattern. The planets are not arranged in a simple line; instead, they form a network where each planet is directly connected to at most two other planets. Astronomers are curious to discover the longest route one can travel without revisiting the same planet. Write a program that, given the description of this interplanetary network, determines the length of the longest route. The input consists of n lines. The first line contains a single integer n (2 ≤ n ≤ 200000) - the number of planets. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) describing that there is a direct connection (space tunnel) between planets u and v. Output a single integer - the length of the longest route that can be traveled without revisiting any planet.","solution":"def longest_route(n, edges): from collections import deque, defaultdict def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 q = deque([start]) furthest_node = start max_dist = 0 while q: u = q.popleft() for v in adj[u]: if dist[v] == -1: dist[v] = dist[u] + 1 if dist[v] > max_dist: max_dist = dist[v] furthest_node = v q.append(v) return furthest_node, max_dist adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) # First BFS to find the furthest node from an arbitrary start point (e.g., node 1) furthest_node, _ = bfs(1) # Second BFS to find the maximum distance starting from the furthest node found in the first BFS _, longest_route_length = bfs(furthest_node) return longest_route_length"},{"question":"Given a string s which can only contain the characters \'a\' and \'b\', you need to find the minimum number of deletions required to make sure that there is no substring \\"aab\\" in s. A substring is any continuous segment of a string. A deletion means removing a character from the string at any position, resulting in a shorter string. The first line of input contains an integer n (1 ≤ n ≤ 2·10^5) — the length of the string. The second line contains the string s consisting of n characters, each \'a\' or \'b\'. Output the minimum number of deletions required to ensure that no substring \\"aab\\" exists in s. # Example Input: ``` 7 aaabbab ``` Output: ``` 1 ``` Explanation: By removing one \'a\' from the substring \\"aaab\\" we can make sure \\"aab\\" does not appear in s.","solution":"def min_deletions_to_avoid_aab(n, s): deletions = 0 i = 0 while i < n - 2: if s[i:i+3] == \\"aab\\": deletions += 1 i += 2 # Skip two characters as \\"aab\\" can only overlap at one position else: i += 1 return deletions"},{"question":"A student is trying to create a new password for their online account. The password must meet the following requirements: 1. It must be between 8 and 20 characters long. 2. It must contain at least one lowercase letter. 3. It must contain at least one uppercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: !@#%^&*()-_+= 6. It must not contain any whitespace characters. Write a function that determines if a given string is a valid password or not based on the criteria above. The function should return `True` if the password is valid and `False` otherwise. The first line of input contains the password as a string. Examples: ``` Input: Paw0rd Output: True Input: password Output: False Input: P@ssword Output: False Input: P@sswor d1 Output: False ```","solution":"import re def is_valid_password(password): Checks if the provided password meets the specified criteria for a valid password. Parameters: password (str): The password to be validated. Returns: bool: True if the password is valid, False otherwise. if not (8 <= len(password) <= 20): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'d\', password): return False if not re.search(r\'[!@#%^&*()-_=+]\', password): return False if re.search(r\'s\', password): return False return True"},{"question":"You are given an array of integers, and you need to find the length of the longest subsequence that is bitonic. A sequence is called bitonic if it is first strictly increasing, then strictly decreasing. A strictly increasing sequence is one in which every next element is greater than the previous one, and a strictly decreasing sequence is one in which every next element is smaller than the previous one. Write a function that receives an array of integers and returns the length of the longest bitonic subsequence. # Input - An array of integers `arr` of length `n` (1 ≤ n ≤ 1000). # Output - An integer representing the length of the longest bitonic subsequence. # Example ```python def longest_bitonic_subsequence(arr): # Your code here # Example arr = [1, 11, 2, 10, 4, 5, 2, 1] print(longest_bitonic_subsequence(arr)) # Output: 6 (The subsequence is [1, 2, 10, 4, 2, 1]) arr = [12, 11, 40, 5, 3, 1] print(longest_bitonic_subsequence(arr)) # Output: 5 (The subsequence is [12, 11, 5, 3, 1]) arr = [80, 60, 30, 40, 20, 10] print(longest_bitonic_subsequence(arr)) # Output: 5 (The subsequence is [80, 60, 30, 20, 10]) ```","solution":"def longest_bitonic_subsequence(arr): n = len(arr) if n == 0: return 0 # Arrays to store the maximum increasing subsequence length ending at each element inc = [1] * n dec = [1] * n # Fill the inc array for i in range(1, n): for j in range(i): if arr[i] > arr[j] and inc[i] < inc[j] + 1: inc[i] = inc[j] + 1 # Fill the dec array for i in range(n-2, -1, -1): for j in range(i+1, n): if arr[i] > arr[j] and dec[i] < dec[j] + 1: dec[i] = dec[j] + 1 # Find the maximum length of bitonic subsequence max_length = 0 for i in range(n): max_length = max(max_length, inc[i] + dec[i] - 1) return max_length"},{"question":"A large retail company wants to analyze the performance and effectiveness of its promotional campaigns. They have a list of daily sales for a particular product over a period of n days. Additionally, they have data on the promotional campaigns that were run during this period. Specifically, for each campaign, they know the start day and the end day on which the campaign was active. Given this data, the company wants to determine the total sales generated during the period of each promotional campaign. Input consists of: - The first line contains a positive integer n (1 <= n <= 10^5) — the number of days. - The second line contains n non-negative integers s1, s2, ..., sn (0 <= si <= 10^6) — the sales on each day. - The third line contains a positive integer m (1 <= m <= 10^4) — the number of promotional campaigns. - The next m lines each contain two integers l and r (1 <= l <= r <= n) — the start and end days of a promotional campaign. Output: - For each promotional campaign, output a single integer representing the total sales during that campaign. Example: Input: 7 10 20 30 40 50 60 70 3 1 3 2 5 4 7 Output: 60 140 220 Explanation: In the example, there are 7 days of sales data and 3 campaigns. The total sales for each campaign are computed as follows: - Campaign 1 (1 to 3): 10 + 20 + 30 = 60 - Campaign 2 (2 to 5): 20 + 30 + 40 + 50 = 140 - Campaign 3 (4 to 7): 40 + 50 + 60 + 70 = 220","solution":"def total_sales_per_campaign(n, sales, campaigns): Calculate total sales for each promotional campaign. Parameters: - n: int, number of days - sales: list of ints, sales on each day - campaigns: list of tuples, each tuple contains two integers indicating the start and end day of a campaign Returns: - list of ints, total sales for each campaign prefix_sum = [0] * (n + 1) # Create prefix sum array for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + sales[i - 1] results = [] for campaign in campaigns: l, r = campaign total_sales = prefix_sum[r] - prefix_sum[l - 1] results.append(total_sales) return results"},{"question":"Assume you are part of a data science team working on a supermarket\'s customer loyalty program. The team is analyzing the shopping habits of customers to provide them with more personalized shopping experiences. You have been given a task to identify customers who are likely to be VIP customers. A customer is considered a VIP if they make purchases worth over 5000 in a given year. You\'ve been provided with transaction data for a full year in the following format: - The first line of input contains an integer n (1 ≤ n ≤ 10^5), representing the number of transactions. - The next n lines each contain two space-separated values: a string c (1 ≤ |c| ≤ 50), representing the customer ID, and an integer p (0 ≤ p ≤ 10000), representing the purchase amount. Your task is to write a program that reads the input and outputs a list of customer IDs who qualify as VIP customers. The output should be in lexicographical order. # Example: **Input:** ``` 5 Alice 1200 Bob 3000 Alice 1800 Bob 2500 Charlie 2000 ``` **Output:** ``` Alice Bob ``` In this example, Alice\'s total purchases amount to 3000, Bob\'s total purchases amount to 5500, and Charlie\'s total purchases amount to 2000. Therefore, Alice and Bob are considered VIP customers and are listed in the output.","solution":"def find_vip_customers(n, transactions): from collections import defaultdict # Dictionary to store the total purchase amounts for each customer total_purchases = defaultdict(int) # Process each transaction for transaction in transactions: customer_id, purchase_amount = transaction total_purchases[customer_id] += purchase_amount # Find VIP customers vip_customers = [customer_id for customer_id, total in total_purchases.items() if total > 5000] # Return the list of VIP customers sorted lexicographically return sorted(vip_customers) # Example usage: # transactions = [(\'Alice\', 1200), (\'Bob\', 3000), (\'Alice\', 1800), (\'Bob\', 2500), (\'Charlie\', 2000)] # print(find_vip_customers(5, transactions)) # Output: [\'Bob\']"},{"question":"A city is represented as an n x n grid. Each cell in the grid can either be empty or contain an obstacle. You are required to find the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) of the grid. You can move in four possible directions (up, down, left, right), but you cannot move into a cell that contains an obstacle. If it is not possible to reach the bottom-right corner, you should output -1. The first line of input contains a single integer n (1 ≤ n ≤ 1000) — the size of the grid. The next n lines each contain n characters, where a \'.\' represents an empty cell and a \'#\' represents an obstacle. Output the length of the shortest path from the top-left corner to the bottom-right corner, or -1 if no such path exists. Example: Input: 5 ..... ... ...#. ...#. ..... Output: 9 In this example, the shortest path involves moving through 9 empty cells to navigate around the obstacles to reach the bottom-right corner. Develop an algorithm to solve this problem efficiently, considering the constraints provided.","solution":"from collections import deque def shortest_path(grid): n = len(grid) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 1)]) # start from (0, 0) with distance 1 visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n - 1, n - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != \'#\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def grid_from_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) grid = [list(line) for line in lines[1:]] return grid"},{"question":"Two players, Alice and Bob, are playing a game with a string of lowercase English letters. The game proceeds as follows: - Alice and Bob take turns deleting exactly one character from the string. - Alice starts first. - The player who cannot make a move (because the string is empty) loses the game. Both players play optimally, trying to force a win for themselves and a loss for their opponent. Given an initial string s of length n (1 ≤ n ≤ 10^5), determine who wins the game if both play optimally. If Alice wins, output \\"Alice\\". If Bob wins, output \\"Bob\\". Input: - A single line containing the string s. Output: - A single line containing either \\"Alice\\" or \\"Bob\\", indicating the winner.","solution":"def determine_winner(s): Determines the winner of the game given the string s for optimal play. :param s: Input string consisting of lowercase English letters :return: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins n = len(s) # Since Alice starts first, if the length of the string is odd, Alice will win. # If the length of the string is even, Bob will win. return \\"Alice\\" if n % 2 == 1 else \\"Bob\\""},{"question":"You are given a string s consisting of lowercase English letters and an integer array queries of size q. For each element in the array queries, you need to find if the substring from index 0 to the given index can be rearranged to form a palindrome. The task is performed as follows: 1. The first line contains a string s (1 leq |s| leq 10^5). 2. The second line contains an integer q (1 leq q leq 10^5). 3. The third line contains q integers representing the queries, where each integer is an inclusive index i (0 leq i < |s|). For each query, print \\"YES\\" if the substring from index 0 to the given index can be rearranged to form a palindrome, otherwise print \\"NO\\". **Input:** ``` s q i_1 i_2 ... i_q ``` **Output:** ``` YES / NO (for each query) ``` **Example:** Input: ``` aabbcc 3 2 3 5 ``` Output: ``` YES YES YES ``` The first query (substring \\"aab\\") can be rearranged to form \\"aba\\", the second query (substring \\"aabb\\") can be rearranged to form \\"abba\\", and the third query (substring \\"aabbcc\\") can be rearranged to form \\"abccba\\". In all cases, the answer is \\"YES\\".","solution":"def can_form_palindrome_substrings(s, queries): results = [] for q in queries: substring = s[:q+1] freq = [0] * 26 for char in substring: freq[ord(char) - ord(\'a\')] += 1 odd_count = sum(1 for count in freq if count % 2 != 0) if odd_count <= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are hosting a game tournament and need to rank the participants based on their performance. Each participant receives a certain number of points after each game. You\'ve been provided with the records of multiple games played, and you need to find out the final ranking of each participant. The input consists of: - The first line contains two integers n (1 ≤ n ≤ 1000) — the number of participants, and m (1 ≤ m ≤ 10000) — the number of games played. - The next m lines each contain two integers i and p (1 ≤ i ≤ n, and -1000 ≤ p ≤ 1000) indicating that the ith participant received p points in that particular game. The output should be: - A list of participants sorted by their total points in descending order. - If two participants have the same total points, they should be ranked in ascending order by their participant number. Write a program that reads from the input, processes the participant scores, and outputs the final ranking. **Input:** ``` n m i1 p1 i2 p2 ... im pm ``` **Output:** ``` participant1 totalPoints1 participant2 totalPoints2 ... participantN totalPointsN ``` **Example:** **Input:** ``` 5 5 1 100 2 50 1 -30 3 70 2 25 ``` **Output:** ``` 1 70 2 75 3 70 4 0 5 0 ``` In this example, participant 1 receives 100 points and -30 points, resulting in a total of 70 points. Participant 2 receives 50 and 25 points, resulting in 75 points. Participant 3 receives 70 points, and participants 4 and 5 receive no points. The ranking should reflect these totals accordingly.","solution":"def rank_participants(n, m, game_results): Ranks participants based on their total points from multiple games. Args: n (int): Number of participants. m (int): Number of games played. game_results (list of tuples): Each tuple contains two integers (i, p) indicating participant i received p points. Returns: list of tuples: Sorted list of participants and their total points. # Initialize a list to keep track of each participant\'s total points total_points = [0] * n # Sum points for each participant for i, p in game_results: total_points[i-1] += p # Prepare the results as a list of tuples (participant_number, total_points) participants_ranking = [(i + 1, total_points[i]) for i in range(n)] # Sort the participants: first by points (descending) then by participant number (ascending) participants_ranking.sort(key=lambda x: (-x[1], x[0])) return participants_ranking"},{"question":"Liana loves balanced strings very much. A string is considered balanced if it contains an equal number of characters \'a\', \'b\', and \'c\'. For example, strings \\"abc\\", \\"aabbcc\\", and \\"bcaabc\\" are balanced, whereas \\"aaa\\", \\"abb\\", and \\"xyz\\" are not. Liana brought home a string s of length n. The string only contains the characters \'a\', \'b\', and \'c\'. The problem is to find the length of the longest balanced subsequence. A subsequence is a string that can be derived from another string by deleting some of the characters without changing the order of the remaining characters. The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 10⁶) — the length of the string s. - The second line contains a string of length n consisting only of the characters \'a\', \'b\', and \'c\'. Output the length of the longest balanced subsequence in s. Example: Input: 7 abacabc Output: 6 Explanation: The longest balanced subsequence is \\"abacbc\\".","solution":"def longest_balanced_subsequence(n, s): Returns the length of the longest balanced subsequence in the given string s. Args: n (int): Length of the string s (1 ≤ n ≤ 10⁶). s (str): A string of length n containing only characters \'a\', \'b\', and \'c\'. Returns: int: The length of the longest balanced subsequence. # Count the occurrences of each character count_a = s.count(\'a\') count_b = s.count(\'b\') count_c = s.count(\'c\') # The longest balanced subsequence can only be the length of \'a\', \'b\', or \'c\'. # The maximum balanced subsequence length is thrice the minimum count among \'a\', \'b\', and \'c\'. return 3 * min(count_a, count_b, count_c)"},{"question":"You have a list of employees and their respective work hours for one week (Monday to Friday). Write a function to find the employee with the highest weekly work hours and return their name. If multiple employees have the highest weekly work hours, return the one that comes first lexicographically. The first line of input contains an integer n (1 ≤ n ≤ 50), representing the number of employees. The next n lines each contain a string and five integers. The string represents the employee\'s name (a string of up to 20 lowercase letters), and the five integers represent the hours worked by the employee on Monday, Tuesday, Wednesday, Thursday, and Friday. Return a single string: the name of the employee with the highest weekly work hours. If there is a tie, return the lexicographically smallest name among those with the highest hours. Example input: ``` 3 alice 4 8 9 5 6 bob 6 10 8 7 8 charlie 6 9 8 3 4 ``` Example output: ``` bob ```","solution":"def find_hardest_worker(n, employees): Given a list of employees and their respective work hours for one week, return the name of the employee with the highest weekly work hours. If multiple employees have the highest weekly work hours, return the lexicographically smallest name. max_hours = -1 hardest_worker = \\"\\" for employee in employees: name, hours = employee[0], employee[1:] total_hours = sum(hours) if ( total_hours > max_hours or (total_hours == max_hours and name < hardest_worker) ): max_hours = total_hours hardest_worker = name return hardest_worker"},{"question":"You are given a rectangular grid of cells with `n` rows and `m` columns. Each cell in the grid can be either empty (represented by `.`) or blocked (represented by `#`). You need to check whether there exists a path from the top-left corner (1,1) to the bottom-right corner (n,m) of the grid, moving only through empty cells and in the four possible directions: up, down, left, and right. Your task is to write a program that determines whether such a path exists. If the path exists, print \\"YES\\"; otherwise, print \\"NO\\". # Input - The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and the number of columns in the grid. - The next `n` lines each contain a string of length `m` consisting of characters `.` and `#`, representing the layout of the grid. # Output - Print \\"YES\\" if there exists a path from the top-left corner of the grid to the bottom-right corner; otherwise, print \\"NO\\". # Examples Example 1 # Input ``` 4 4 .... ..#. ..#. .... ``` # Output ``` YES ``` Example 2 # Input ``` 3 3 .#. # .#. ``` # Output ``` NO ``` # Note - In Example 1, there is a clear path around the blocked cells. - In Example 2, it is impossible to reach the bottom-right corner due to the blocked cells.","solution":"def is_path_exists(n, m, grid): Determines if there is a path from the top-left to the bottom-right corner of the grid. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y): if x == n-1 and y == m-1: return True visited[x][y] = True for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': if dfs(nx, ny): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Alice is organizing a tournament for a popular online game. Each match features two players, and each player has a specific skill level represented by an integer. To make the matches as fair as possible, Alice wants to pair players such that the difference in their skill levels is minimized. You are given a list of skill levels for the players registered in the tournament. Write a function that takes this list and returns the minimum possible difference in skill levels between any pair of players. The function should have the following signature: ```python def min_skill_difference(skill_levels: List[int]) -> int: ``` # Input - A single argument `skill_levels` which is a list of integers representing the skill levels of the players. (2 ≤ len(skill_levels) ≤ 100000, 1 ≤ skill_levels[i] ≤ 10^9) # Output - Return a single integer representing the minimum possible difference in skill levels between any pair of players. # Example ```python min_skill_difference([12, 4, 7, 19, 13]) ``` Output: ``` 1 ``` Explanation: The pairs of skill levels are (12, 13) with a difference of 1, which is the smallest possible difference. # Note To preserve efficiency given the constraints: - Consider sorting the list of skill levels first. - Then compute the differences between consecutive elements in the sorted list to find the minimum difference.","solution":"def min_skill_difference(skill_levels): Returns the minimum possible difference in skill levels between any pair of players. Parameters: skill_levels (List[int]): A list of integers representing the skill levels of the players. Returns: int: The minimum difference between the skill levels of any pair of players. # Sort the skill levels skill_levels.sort() # Initialize the minimum difference with a large number min_diff = float(\'inf\') # Iterate through the sorted list and find the minimum difference for i in range(1, len(skill_levels)): diff = skill_levels[i] - skill_levels[i - 1] if diff < min_diff: min_diff = diff return min_diff"},{"question":"You are given a list of n integers, and you need to reorder the elements of the list in such a way that the absolute difference between any two adjacent elements is minimal. After reordering the list, you need to print the new list. For example, let\'s consider the list: [4, 2, 9, 6] After reordering, the list [2, 4, 6, 9] has the property that the absolute difference between any two adjacent elements is minimal. Input: - The first line of the input contains one integer n (1 le n leq 10^5) — the number of integers in the list. - The second line contains n space-separated integers — the elements of the list. Output: - Print the reordered list of integers, such that the absolute difference between any two adjacent elements is minimal. Example: Input: ``` 4 4 2 9 6 ``` Output: ``` 2 4 6 9 ``` The task is to write a program that sorts the list and prints the sorted list, because sorting the list ensures that the absolute difference between consecutive elements is minimized.","solution":"def reorder_list(n, elements): Returns the reordered list such that the absolute difference between any two adjacent elements is minimal. # Sort the list elements.sort() return elements"},{"question":"You are given a binary string s of length n. A binary string is a string that consists only of characters \'0\' and \'1\'. You need to perform operations on the string to make all the characters in the string the same. In one operation, you can choose exactly two adjacent characters and swap them. You need to determine the minimum number of operations required to make all the characters in the string the same. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the length of the binary string. The second line contains a binary string s of length n. Output a single integer — the minimum number of operations required to make all the characters in the string the same. Example: Input: 4 1001 Output: 2 Explanation: One way to achieve this is by performing the following operations: 1. Swap the first and second characters: 0101 2. Swap the third and fourth characters: 0110 Now all characters in the string are the same. Hence, the minimum number of operations required is 2.","solution":"def min_operations_to_make_binary_string_same(n, s): This function calculates the minimum number of operations required to make all characters in a binary string the same by swapping exactly two adjacent characters each time. # Count the occurrences of \'0\' and \'1\' count_0 = s.count(\'0\') count_1 = s.count(\'1\') # The minimum number of swaps needed to cluster all \'0\'s or all \'1\'s together # is the minimum of the counts of \'0\'s and \'1\'s. return min(count_0, count_1)"},{"question":"**Unique Paths with Obstacles** Given a grid of size m x n, you are to find the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time. However, some cells contain obstacles, making it impossible to pass through them. The grid is represented by a 2D array `obs`, where `obs[i][j] == 1` represents an obstacle and `obs[i][j] == 0` represents a free space. Write a function that determines the number of unique paths from the top-left corner to the bottom-right corner while avoiding obstacles. You are given the following constraints: - m and n will be at most 100. - Each cell in the array is either 0 (no obstacle) or 1 (obstacle). # Input - The first line contains two integers m and n (1 leq m, n leq 100), the dimensions of the grid. - The next m lines each contain n integers (either 0 or 1), representing the grid `obs`. # Output - Output a single integer, representing the number of unique paths from the top-left to the bottom-right, avoiding obstacles. If there is no path, return 0. # Example Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` # Explanation: The grid looks like this: ``` 0 0 0 0 1 0 0 0 0 ``` There are two unique paths from the top-left to the bottom-right: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(obs): Calculate the number of unique paths from the top-left corner to the bottom-right corner while avoiding obstacles. Args: obs (List[List[int]]): The grid containing obstacles and free spaces. Returns: int: The number of unique paths from the top-left to the bottom-right. if not obs or obs[0][0] == 1 or obs[-1][-1] == 1: return 0 m, n = len(obs), len(obs[0]) # Initializing a 2D dp array where dp[i][j] will be the count of unique paths to cell (i, j) dp = [[0] * n for _ in range(m)] # Starting position dp[0][0] = 1 # Fill the first row for j in range(1, n): if obs[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the first column for i in range(1, m): if obs[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): if obs[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[-1][-1]"},{"question":"You have been tasked with helping a research team compute the minimum covering radius for particle clusters in a two-dimensional plane. Each particle is represented by a point in the plane, and the goal is to find the smallest possible radius such that every particle is contained within a circle of that radius centered at any chosen point. Formally, consider the 2D Cartesian plane. There are n particles, with the i-th particle located at coordinates P_i(X_i, Y_i). You need to determine the minimum radius r such that it is possible to choose a center point C(x, y) in the plane and have all particle coordinates P_i(X_i, Y_i) within a distance r from C(x, y). The first line contains a single integer n (1 leq n leq 10^5), indicating the number of particles. The next n lines each contain two integers X_i and Y_i (-10^5 leq X_i, Y_i leq 10^5), representing the coordinates of the particles. Print a single real number — the minimum radius meeting the requirement. Your answer is considered correct if its absolute or relative error does not exceed 10^-6. Formally, let your answer be a, and the jury\'s answer be b. Your answer is accepted if and only if frac{|a - b|}{max(1, |b|)} leq 10^{-6}. # Example Input: ``` 3 1 1 2 2 3 3 ``` Output: ``` 1.414213 ```","solution":"import math def compute_minimum_covering_radius(particles): Computes the minimum covering radius for a cluster of particles in a 2D plane. Args: particles (list of tuples): List containing tuples (X_i, Y_i) representing the coordinates of particles. Returns: float: The minimum radius required to cover all particles. if not particles: return 0.0 # Find the center of the smallest bounding circle max_distance = 0 for x1, y1 in particles: for x2, y2 in particles: distance = math.dist((x1, y1), (x2, y2)) if distance > max_distance: max_distance = distance return max_distance / 2 def parse_input(input_str): Parses the input into a suitable format for the compute_minimum_covering_radius function. Args: input_str (str): Raw input as string. Returns: list of tuples: List containing tuples (X_i, Y_i) representing the coordinates of particles. lines = input_str.strip().split(\\"n\\") n = int(lines[0]) particles = [tuple(map(int, line.split())) for line in lines[1:n+1]] return particles"},{"question":"You are given a sequence of integers representing the scores of participants in a coding competition. The sequence starts from position 1 and extends to position n. Two participants are considered friendly if their scores average to an integer number. For instance, consider a sequence of scores: [1, 4, 3, 2]. Below are some examples of friendly pairs: - The participants at positions 1 and 2 are friendly because (1+4)/2 = 2.5 (not an integer). - The participants at positions 1 and 3 are friendly because (1+3)/2 = 2 (an integer). - The participants at positions 2 and 3 are friendly because (4+3)/2 = 3.5 (not an integer). Your task is to count the total number of friendly pairs within the sequence. Observe that the pairs (i, j) and (j, i) are considered the same, and (i neq j). That is, the pair (1, 2) is the same as the pair (2, 1) and should only be counted once. The first line of the input contains a single integer n (1 leq n leq 10^5) - the number of participants. The second line contains n space-separated integers a_1, a_2, ldots, a_n ( -10^6 leq a_i leq 10^6 ) - the scores of the participants. Print a single integer - the total number of friendly pairs in the given sequence. **Example:** Input: ``` 5 1 2 3 4 5 ``` Output: ``` 4 ``` Explanation: The friendly pairs are (1, 3), (2, 4), (3, 5), (1, 5).","solution":"def count_friendly_pairs(n, scores): Count the number of friendly pairs in the given list of scores. Args: n (int): The number of participants. scores (list): List of scores of participants. Returns: int: The total number of friendly pairs. from collections import defaultdict # Dictionary to store frequency of each number freq = defaultdict(int) # Counting occurrences of each modulus value of scores for score in scores: freq[score % 2] += 1 # Friendly pairs logic friendly_pairs = (freq[0] * (freq[0] - 1)) // 2 + (freq[1] * (freq[1] - 1)) // 2 return friendly_pairs"},{"question":"In a faraway kingdom, there is a magical tree that grows enchanted apples. Each apple on the tree has a unique magic level. The magic levels of the apples on the tree form a strictly increasing sequence from the bottom of the tree to the top. One day, the king decided to conduct an experiment. He wanted to find out the number of ways he can choose two apples such that the sum of their magic levels is divisible by a given number k. You need to write a program to determine the number of such valid pairs of apples. # Input The first line of input contains two integers n and k (2 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of apples on the tree and the divisor k. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the magic levels of the apples from bottom to top. # Output Output a single integer — the number of valid pairs (i, j) (1 ≤ i < j ≤ n) such that the sum of the i-th and j-th apple\'s magic levels is divisible by k. # Example Input ``` 5 3 1 4 5 7 10 ``` Output ``` 4 ``` # Explanation In the given example, the pairs of apples that sum up to a number divisible by 3 are: - (1, 4) with magic levels (1, 10) - (2, 3) with magic levels (4, 5) - (2, 5) with magic levels (4, 10) - (3, 4) with magic levels (5, 7)","solution":"def find_valid_pairs(n, k, magic_levels): remainder_count = [0] * k for magic in magic_levels: remainder = magic % k remainder_count[remainder] += 1 valid_pairs = 0 valid_pairs += remainder_count[0] * (remainder_count[0] - 1) // 2 for r in range(1, (k // 2) + 1): if r != k - r: valid_pairs += remainder_count[r] * remainder_count[k - r] if k % 2 == 0: valid_pairs += remainder_count[k // 2] * (remainder_count[k // 2] - 1) // 2 return valid_pairs"},{"question":"Codexton is a bustling city renowned for its vibrant technocultural community. Every year, the city hosts a programming retreat where participants from across the globe come together to solve intriguing problems designed by the local codemasters. This year, the challenge revolves around an ancient artifact - the Balanced Binary Tree of Thalos. Given a binary tree with `n` nodes, where each node has a unique integer value between 1 and `n`, you need to determine if the tree is balanced. A binary tree is considered balanced if, for every node, the height difference between the left and right subtrees is at most 1. You are given the value of `n` and the parent-child relationships as input. Initially, the tree has `n` nodes, and each node can have at most two children (left and right). The root node of the tree is always node `1`. Your task is to determine if the given binary tree is balanced. The input consists of: - An integer `n` (2 le n le 100,000) representing the number of nodes. - `n-1` lines, each containing two integers `u` and `v` (1 le u, v le n), where `u` is the parent of `v`. Print \\"YES\\" if the binary tree is balanced, otherwise print \\"NO\\". ```python def is_balanced(n, edges): from collections import defaultdict, deque def height_and_balance(node): if node not in children: return 0, True left, right = 0, 0 if children[node][0] != -1: left = height_and_balance(children[node][0]) if children[node][1] != -1: right = height_and_balance(children[node][1]) height = max(left[0], right[0]) + 1 balanced = left[1] and right[1] and abs(left[0] - right[0]) <= 1 return height, balanced children = defaultdict(lambda: [-1, -1]) for u, v in edges: if children[u][0] == -1: children[u][0] = v else: children[u][1] = v return \\"YES\\" if height_and_balance(1)[1] else \\"NO\\" ```","solution":"def is_balanced(n, edges): from collections import defaultdict def height_and_balance(node): if node not in children: return 0, True left_height, right_height = 0, 0 left_balanced, right_balanced = True, True if children[node][0] != -1: left_height, left_balanced = height_and_balance(children[node][0]) if children[node][1] != -1: right_height, right_balanced = height_and_balance(children[node][1]) height = max(left_height, right_height) + 1 balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 return height, balanced children = defaultdict(lambda: [-1, -1]) for u, v in edges: if children[u][0] == -1: children[u][0] = v else: children[u][1] = v return \\"YES\\" if height_and_balance(1)[1] else \\"NO\\""},{"question":"Best Programming Solutions Inc. wants to improve their code quality system. They have a strict requirement that no line of code should contain more than 80 characters. To assist with this, they need a function to check the compliance of given lines of code. You are given a set of lines of code and need to determine if each line of code meets the requirement. The first line contains one integer n (1 ≤ n ≤ 100) — the number of lines of code. The i-th of the following n lines contains a string si (1 ≤ |si| ≤ 200) — the i-th line of code. Print n lines, in the i-th line output YES if the i-th line of code meets the requirement (i.e., its length is less than or equal to 80). Otherwise, print NO. # Example Input: ``` 3 int a = 0; for(int i = 0; i < 100; i++) { sum += array[i]; } std::string very_long_variable_name_that_keeps_going_forever = \\"This line is too long!\\"; ``` Output: ``` YES YES NO ```","solution":"def check_code_lines(lines): results = [] for line in lines: if len(line) <= 80: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example of how to read input and print output: # def main(): # n = int(input().strip()) # lines = [input().strip() for _ in range(n)] # results = check_code_lines(lines) # for result in results: # print(result) # # if __name__ == \\"__main__\\": # main()"},{"question":"You are given a string consisting of lowercase English letters and you need to perform a series of operations to transform this string into another string by only using the given set of operations. The operations allowed are: 1. Swap any two adjacent characters in the string. Your task is to determine the minimum number of swap operations required to transform the given string into a string that is lexicographically smallest. The first line of the input contains a single string s (1 ≤ |s| ≤ 100,000), the given string. Output a single integer which is the minimum number of adjacent swaps required to make the string lexicographically smallest. For example: Input: ``` dcba ``` Output: ``` 6 ``` Explanation: To transform \'dcba\' into \'abcd\', the steps could be: 1. Swap \'d\' and \'c\': `cdba` (1 swap) 2. Swap \'c\' and \'b\': `cbda` (2 swaps) 3. Swap \'c\' and \'a\': `bacd` (3 swaps) 4. Swap \'b\' and \'a\': `abcd` (4 swaps) 5. Swap \'c\' and \'b\': `abdc` (5 swaps) 6. Swap \'d\' and \'c\': `abcd` (6 swaps) This results in a total of 6 swaps.","solution":"def min_swaps_to_lexicographically_smallest(s): Calculate the minimum number of adjacent swaps to sort the string into the lexicographically smallest string. # Initialize the count of swaps swaps = 0 # Create the target string which is the lexicographically smallest version of s target = \'\'.join(sorted(s)) # Convert the string to a list to facilitate swaps s_list = list(s) # Use a while loop to perform bubble sort-like swap counting while s_list != list(target): for i in range(len(s_list) - 1): if s_list[i] > s_list[i + 1]: s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i] swaps += 1 return swaps"},{"question":"Tom is working on a binary tree and needs to determine certain properties about it. Each node in the tree contains a unique integer value. Here is the problem: Given the root of a binary tree, a target value, and an integer k, find the number of nodes that are at an exact distance of k from the node that contains the target value. Distance is defined as the number of edges between two nodes. For example, the distance between a node and its immediate child is 1. You need to implement a function `countNodesAtDistanceK(root, target, k)` that takes in the following parameters: - `root`: the root of the binary tree. - `target`: the integer value of the target node. - `k`: the distance from the target node. Return the count of nodes that are at a distance of k from the target node in the binary tree. # Function Signature ```python def countNodesAtDistanceK(root: TreeNode, target: int, k: int) -> int: pass ``` # Input - The function will receive a `TreeNode root`, which represents the root of the binary tree. - An integer `target` where `target` is a value present in one of the nodes of the binary tree. - An integer `k` where `0 <= k <= 100`. # Output - Return an integer representing the count of nodes at a distance of k from the target node. # Constraints - The number of nodes in the binary tree is between 1 and 1000. - Each node’s value is an integer in the range [0, 1000]. - The binary tree\'s nodes are unique. # Example For example, consider the tree below: ``` 3 / 5 1 / / 6 2 0 8 / 7 4 ``` - Input: `root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2` - Output: `3` Explanation: - The nodes that are at a distance of 2 from the node with value 5 are [7,4,1]. # Note - You can assume that the function will receive the correct TreeNode format with appropriate left and right children.","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def countNodesAtDistanceK(root, target, k): if not root: return 0 # Find the target node target_node = findTargetNode(root, target) if not target_node: return 0 # Dictionary to store parent pointers parent_map = {} mapParents(root, None, parent_map) # BFS from target_node to find all nodes at distance K return bfs_from_target(target_node, parent_map, k) def findTargetNode(root, target): if not root: return None if root.value == target: return root left_search = findTargetNode(root.left, target) if left_search: return left_search return findTargetNode(root.right, target) def mapParents(node, parent, parent_map): if not node: return if parent: parent_map[node] = parent mapParents(node.left, node, parent_map) mapParents(node.right, node, parent_map) def bfs_from_target(target_node, parent_map, k): queue = deque([(target_node, 0)]) visited = set() visited.add(target_node) count = 0 while queue: current, distance = queue.popleft() if distance == k: count += 1 for neighbor in (current.left, current.right, parent_map.get(current)): if neighbor and neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return count"},{"question":"Cinderella loves flowers and wants to grow a beautiful garden. She has n flower pots, each of which can grow a certain type of flower. However, she wants to ensure that her garden looks aesthetically pleasing by having at most two consecutive pots with the same type of flower. Each flower type is represented by an integer. She can choose any integer between 1 and k (inclusive) to represent different flower types, but she needs your help to design the sequence that satisfies her requirement. Write a program that will help Cinderella determine if it is possible to arrange flower types in such a way that no three consecutive flower pots have the same type. If it is possible, print one such arrangement; otherwise, print -1. The first line of input contains two space-separated integers n and k (1 ≤ n ≤ 105, 1 ≤ k ≤ 100). If it is possible to create the sequence, output n space-separated integers representing the types of flowers in each pot. If there are multiple solutions, print any one of them. If it is not possible, output -1.","solution":"def arrange_flowers(n, k): if k == 1: if n > 2: return -1 else: return [1] * n arrangement = [] for i in range(n): arrangement.append((i % k) + 1) return arrangement def cinderella_flowers(n, k): arrangement = arrange_flowers(n, k) if arrangement == -1: return -1 else: return \' \'.join(map(str, arrangement))"},{"question":"You have an array of integers and you need to perform a series of operations to make all elements of the array equal. In one operation, you can increase the value of any element in the array by 1. Your task is to determine the minimum number of operations required to make all the elements of the array equal. You are guaranteed that all elements in the array are non-negative integers. **Input:** - A single line containing space-separated integers representing the elements of the array. **Output:** - A single integer representing the minimum number of operations required to make all elements of the array equal. **Example:** ``` Input: 1 2 3 Output: 3 Explanation: In the given example, you can perform the following operations: 1. Increase the value of the first element (1) by 1 to get [2, 2, 3]. 2. Increase the value of the first element (2) by 1 to get [3, 2, 3]. 3. Increase the value of the second element (2) by 1 to get [3, 3, 3]. So a total of 3 operations are required. ``` **Note:** - The array length can be 1 to 1000. - The element\'s value can be between 0 and 1000.","solution":"def min_operations_to_equalize(arr): Calculate the minimum number of operations to make all elements of the array equal by only incrementing elements. max_value = max(arr) return sum(max_value - x for x in arr)"},{"question":"In a city, n people are living in a row of houses. Each house can accommodate one person. Each person has a friend who lives in another house. We denote that i-th person lives in the i-th house and his friend lives in the f(i)-th house. Every person wants to live next to their friend, so they need to be relocated in such a way that each person lives either exactly to the left or exactly to the right of their friend. Your task is to determine if it\'s possible to arrange all the people in a row such that everyone ends up living next to their respective friends. The first line contains a single integer n (1 ≤ n ≤ 100), the number of people and houses. The next line contains n integers f(1), f(2), ..., f(n) (1 ≤ f(i) ≤ n, i ≠ f(i)), where f(i) is the house number where the i-th person\'s friend lives. Output \\"YES\\" if it is possible to arrange all people such that everyone lives next to their friend, otherwise output \\"NO\\". For example: ``` Input 4 2 1 4 3 Output YES Input 3 2 3 1 Output NO ``` In the first example, people can be relocated to the house order 1 2 3 4. In the second example, it is not possible to place all persons next to their friends.","solution":"def can_live_next_to_friends(n, friends): if n % 2 != 0: return \\"NO\\" paired = set() for i in range(n): f_i = friends[i] if i in paired: continue if friends[f_i] == i: paired.add(i) paired.add(f_i) else: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers where each integer can be positive, negative, or zero. We define an \\"inversion\\" in the array such that if we have two indices (i) and (j) with (i < j), then an inversion occurs if (arr[i] > arr[j]). Your task is to find the total number of inversions in the array. For example: If the array is ([2, 3, 8, 6, 1]), the number of inversions is 5. The inversions are: - ( (2, 1) ) - ( (3, 1) ) - ( (8, 6) ) - ( (3, 1) ) - ( (8, 1) ) **Input:** The first line of input consists of an integer ( t ) (( 1 leq t leq 100 )) — the number of test cases. For each test case: - The first line contains an integer ( n ) (( 1 leq n leq 10^5 )) — the number of elements in the array. - The second line contains ( n ) integers separated by spaces. It is guaranteed that the sum of ( n ) over all test cases does not exceed ( 10^6 ). **Output:** For each test case, print the number of inversions. **Example Input:** 3 5 2 3 8 6 1 4 5 4 3 2 7 1 2 3 4 5 6 7 **Example Output:** 5 6 0 **Explanation:** In the first test case, there are 5 inversions as detailed above. In the second test case, there are 6 inversions: (5,4), (5,3), (5,2), (4,3), (4,2), (3,2). In the third test case, the array is already sorted, hence there are no inversions.","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def count_inversions(arr): if len(arr) < 2: return 0 temp_arr = [0]*len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1) def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(count_inversions(arr)) return results"},{"question":"You are an engineer working on designing a new water distribution system for a city that is laid out in a perfect grid. The city is represented by an n x m grid, and you need to ensure that every block in the city can access water. The water distribution system consists of reservoirs and pipelines. Each reservoir can provide water to all blocks within a certain Manhattan distance `d` from the reservoir. Your task is to determine the minimal number of reservoirs required and their placement so that every block in the city grid can access a reservoir. The input will be as follows: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) representing the dimensions of the city grid. - The second line contains an integer `d` (1 ≤ d ≤ min(n, m)) which is the maximum Manhattan distance that a reservoir can supply water. The output should be: - The minimal number of reservoirs required to ensure that every block in the city has access to water within the distance `d`. - For each reservoir, output two integers representing the row and column positions (1-based) in the grid. An example: ``` Input: 5 5 2 Output: 4 2 2 2 5 5 2 5 5 ``` In this example, a 5x5 grid with a reservoir supply distance of 2 requires 4 reservoirs to cover every block in the city. The reservoirs\' positions are (2, 2), (2, 5), (5, 2), and (5, 5). You need to ensure that the placement algorithm makes optimal use of resources by minimizing the number of reservoirs placed while still covering the entire city grid.","solution":"def minimal_reservoirs(n, m, d): Calculates the minimal number of reservoirs required and their placement to ensure every block in a city grid has access to water within the distance d. Parameters: n (int): The number of rows in the city grid. m (int): The number of columns in the city grid. d (int): The maximum Manhattan distance a reservoir can supply water. Returns: list: A list where the first item is the number of reservoirs needed, followed by tuples representing the positions (row, column) of each reservoir. reservoirs = [] row_step = d + 1 col_step = d + 1 for i in range(1, n + 1, row_step): for j in range(1, m + 1, col_step): reservoirs.append((i, j)) return [len(reservoirs)] + reservoirs"},{"question":"You are a treasure hunter and have just discovered a map that leads to an ancient treasure. To reach the treasure, you need to solve a series of puzzles. The final puzzle involves deciphering a sequence of integers and transforming them using a given set of operations. Each operation can increment or decrement a number by a fixed value. Your goal is to determine the minimum number of operations required to transform the given sequence to a target sequence. The input consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 100,000), the length of the sequence. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000), the initial sequence. - The third line contains n integers b1, b2, ..., bn (1 ≤ bi ≤ 1,000,000), the target sequence. The output is a single integer, the minimum number of operations required to transform the initial sequence into the target sequence. Each increment or decrement operation increases or decreases the value of a single element of the sequence by 1. # Example Input ``` 3 1 2 3 4 6 8 ``` Output ``` 12 ``` Explanation To transform the sequence [1, 2, 3] to [4, 6, 8]: - Increment the first element (1) by 3 to get 4. - Increment the second element (2) by 4 to get 6. - Increment the third element (3) by 5 to get 8. The total number of operations is 3 + 4 + 5 = 12.","solution":"def min_operations_to_transform(n, initial_sequence, target_sequence): Calculate the minimum number of operations required to transform the initial sequence into the target sequence. Each increment or decrement operation changes a number by 1. :param n: Length of the sequences :param initial_sequence: List of integers representing the initial sequence :param target_sequence: List of integers representing the target sequence :return: Minimum number of operations required operations_count = 0 for initial, target in zip(initial_sequence, target_sequence): operations_count += abs(target - initial) return operations_count"},{"question":"A company has a simplified email communication system. Each employee can send emails to others and receive emails. For the sake of simplicity, we consider only direct email communications (i.e., not forwards or replies). Your task is to help the company analyze email communications to answer queries about communication paths. Specifically, you need to determine if there is a direct or indirect communication path between two employees. Input specification: - The first line contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10,000), denoting the number of employees and the number of direct email communications respectively. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that employee u has sent a direct email to employee v. - The next line contains an integer q (1 ≤ q ≤ 10,000), representing the number of queries. - The following q lines each contain two integers a and b (1 ≤ a, b ≤ n), which is a query asking whether there exists a communication path (direct or indirect) from employee a to employee b. Output Specification: - For each query, output \\"YES\\" if there is a communication path from employee a to employee b, otherwise output \\"NO\\". Example: Input: 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 1 3 Output: YES YES YES","solution":"def find_communication_paths(n, m, communications, q, queries): from collections import deque # Create adjacency list representation of the graph adj = [[] for _ in range(n + 1)] for u, v in communications: adj[u].append(v) # Function to perform BFS and find if there\'s a path from source to destination def bfs(source, destination): visited = [False] * (n + 1) queue = deque([source]) while queue: node = queue.popleft() if node == destination: return \\"YES\\" for neighbor in adj[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"NO\\" results = [] # Process each query for a, b in queries: results.append(bfs(a, b)) return results"},{"question":"Professor Layton is investigating the symmetry properties of strings. He wants to determine if a given string can be transformed into a palindrome by rearranging its letters. A palindrome is a string that reads the same forward and backward. Layton suspects that if the number of characters with an odd frequency count is less than or equal to 1, the string can be rearranged into a palindrome. Given a string consisting of only lowercase alphabetic characters, write a function that determines if it can be rearranged into a palindrome. The function should: - Accept a single string as an input. - Return a boolean value: `True` if the string can be rearranged into a palindrome, `False` otherwise. **Input:** A single string `s` (1 ≤ |s| ≤ 1000), consisting exclusively of lowercase alphabetic characters. **Output:** A boolean value indicating whether the input string can be rearranged into a palindrome. Here are some examples: **Example 1:** Input: `\\"carrace\\"` Output: `True` Explanation: The string `\\"carrace\\"` can be rearranged to form the palindrome `\\"racecar\\"`. **Example 2:** Input: `\\"apple\\"` Output: `False` Explanation: The string `\\"apple\\"` cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Determines if the string can be rearranged into a palindrome. from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd frequency return odd_count <= 1"},{"question":"You are managing a company that assembles electronic gadgets. The company has pre-defined the sequence of tasks that need to be performed for every gadget, and the time taken to complete each task. The tasks form a Directed Acyclic Graph (DAG), where an edge from task A to task B means that task A must be completed before starting task B. Given the time taken for each task and the dependencies between the tasks, your objective is to determine the minimum amount of time required to complete the gadget. If there are multiple gadgets, compute the minimum time for each gadget independently. The first line contains a single integer `t` (1 ≤ t ≤ 100) – the number of different gadgets. For each gadget, the first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (0 ≤ m ≤ 10^5) – the number of tasks and the number of dependencies, respectively. The next line contains `n` integers where the i-th integer denotes the time required to complete the i-th task (1 ≤ time ≤ 1000). Each of the next `m` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v), indicating that task `u` must be completed before task `v`. Output `t` lines, each containing a single integer – the minimum amount of time required to complete the respective gadget. # Example Input ``` 2 5 4 3 2 1 5 4 1 2 2 3 2 4 3 5 3 2 6 8 5 1 2 1 3 ``` Output ``` 10 14 ``` # Explanation In the first gadget: ``` Task times: [3, 2, 1, 5, 4] Dependencies: 1 -> 2 2 -> 3 2 -> 4 3 -> 5 The optimal order is: 1 -> 2 -> 3 -> 5 -> 4 Time = 3 + 2 + 1 + 4 = 10 ``` In the second gadget: ``` Task times: [6, 8, 5] Dependencies: 1 -> 2 1 -> 3 The optimal order is: 1 -> 2 -> 3 Time = 6 + 8 = 14 ```","solution":"from collections import deque, defaultdict def calculate_min_time(tasks, dependencies, times): n = len(tasks) graph = defaultdict(list) in_degree = [0] * n for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 queue = deque() time_required = [0] * n for i in range(n): if in_degree[i] == 0: queue.append(i) time_required[i] = times[i] while queue: u = queue.popleft() for v in graph[u]: in_degree[v] -= 1 time_required[v] = max(time_required[v], time_required[u] + times[v]) if in_degree[v] == 0: queue.append(v) return max(time_required) def find_minimum_times(t, gadgets): results = [] for gadget in gadgets: n, m = gadget[\'num_tasks\'], gadget[\'num_deps\'] times = gadget[\'times\'] dependencies = gadget[\'dependencies\'] results.append(calculate_min_time(list(range(n)), dependencies, times)) return results"},{"question":"Leena wants to build the tallest tower possible using equal-sized blocks. Given a set of available blocks, she can stack them vertically. However, certain limitations apply: she can only use a limited number of these blocks each day. More specifically, she can only use at most `k` blocks a day, but she must use at least one block every day until she runs out of blocks. Write a function `max_height` that calculates the maximum height of the tower Leena can build. # Input - The first line contains a single integer `t` (1 <= t <= 1000) - the number of test cases. - Each of the next `t` lines contains two integers `n` and `k` (1 <= n, k <= 10^9) - `n` is the total number of blocks available and `k` is the maximum number of blocks Leena can use per day. # Output For each test case, output a single integer - the maximum height Leena\'s tower can reach. # Example ```python # Example input: 2 7 3 10 4 # Example output: 4 4 ``` # Explanation In the first test case: - Leena uses 3 blocks on the first day. - She can use another 3 blocks on the second day, leaving her with 1 block. - She uses the last block on the third day. Thus, the maximum height of the tower is 4 blocks. In the second test case: - Leena uses 4 blocks on the first day. - She uses another 4 blocks on the second day. - There are 2 blocks left, which she can use on the third day. Thus, the maximum height of the tower is 4 blocks.","solution":"def max_height(t, test_cases): Returns a list of maximum heights for each test case given in \'test_cases\'. Each test case is a tuple (n, k) where: - n is the total number of blocks available - k is the maximum number of blocks that can be used per day heights = [] for n, k in test_cases: days = (n + k - 1) // k # calculate the number of days required heights.append(days) return heights"},{"question":"You are given an array of integers. Your task is to determine the maximum length of a contiguous subarray with equal number of 0s and 1s. Write a function `maxLengthEqualZeroesOnes(arr)` that takes an array of integers `arr` containing only 0s and 1s, and returns the maximum length of a contiguous subarray with equal number of 0s and 1s. # Input Format - The input to the function `maxLengthEqualZeroesOnes(arr)` consists of one argument: - An array `arr` of integers containing only 0s and 1s. # Output Format - Return an integer representing the maximum length of a contiguous subarray with equal number of 0s and 1s. # Constraints - The length of `arr` is at most 10^5. # Example **Example 1:** ```python input: arr = [0, 1, 0] output: 2 Explanation: The subarray [0, 1] or [1, 0] has equal number of 0s and 1s and has length 2. ``` **Example 2:** ```python input: arr = [0, 1, 1, 0, 1, 1, 1, 0] output: 4 Explanation: The subarray [1, 1, 0, 1] has equal number of 0s and 1s and has length 4. ``` Implement the function `maxLengthEqualZeroesOnes(arr)` in your programming language of choice.","solution":"def maxLengthEqualZeroesOnes(arr): Returns the maximum length of a contiguous subarray with equal number of 0s and 1s. # Initialize the hashmap to store (count-index) pairs. count_map = {0: -1} max_length = 0 count = 0 for i, val in enumerate(arr): # Increment count for 1, decrement for 0. count += 1 if val == 1 else -1 # If count has been seen before, calculate length of subarray. if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"In a faraway land, a peculiar type of game is played by children. The game is called \\"Number Transformation\\". The game begins with a player writing down an integer `n` on a piece of paper. The player\'s goal is to transform `n` into another integer `m` using the minimum number of operations. In each operation, the player can either: 1. Divide the number by 2 if it is even. 2. Increment the number by 1. Given two integers `n` and `m` (1 ≤ n, m ≤ 10^9), your task is to determine the minimum number of operations required to transform `n` into `m`. # Input The input consists of a single line containing two integers `n` and `m`. # Output Print a single integer representing the minimum number of operations needed to transform `n` into `m`. # Example Input 4 6 Output 3 Explanation To transform the number 4 into 6, the player can perform the following operations: 1. Increment 4 by 1 to get 5. 2. Increment 5 by 1 to get 6. Hence, the minimum number of operations is 3. # Note If `n` equals `m`, no operations are needed, and the output should be 0.","solution":"def min_operations(n, m): Returns the minimum number of operations to transform n into m. Player can either: 1. Divide the number by 2 if it is even. 2. Increment the number by 1. operations = 0 while m > n: # If m is even, dividing by 2 is always better if m % 2 == 0: m //= 2 else: # If m is odd, incrementing to make it even should be considered m += 1 operations += 1 # If n is greater than m, we can only decrement operations += (n - m) return operations"},{"question":"Alice is a software engineer and she likes to jog every morning. She tracks her jogging route with a GPS device and records it as a sequence of coordinates. Each coordinate is represented as a tuple (x, y), where x and y are integers representing Alice\'s position on a 2D plane. Alice wants to know if her jogging route forms a loop. A loop is formed if the route starts and ends at the same coordinate. Write a program that takes an integer n (2 ≤ n ≤ 100) as input, representing the number of coordinates in Alice\'s jogging route, followed by n pairs of integers (x1, y1), (x2, y2), ..., (xn, yn) representing the coordinates visited by Alice in sequence. Determine if Alice\'s jogging route forms a loop. Input: The first line contains an integer n, the number of coordinates. Each of the next n lines contains two integers representing the coordinates (xi, yi). Output: Print \\"YES\\" if Alice\'s jogging route forms a loop, otherwise print \\"NO\\". Example: Input: 4 0 0 1 0 1 1 0 0 Output: YES Input: 3 0 0 1 0 0 1 Output: NO","solution":"def forms_a_loop(n, coordinates): Determine if the jogging route forms a loop. Args: n : int : The number of coordinates. coordinates: list of tuples : [(x1, y1), ..., (xn, yn)] representing the coordinates visited by Alice. Returns: str : \\"YES\\" if the route forms a loop, otherwise \\"NO\\". # Check if the first coordinate is the same as the last coordinate if coordinates[0] == coordinates[-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of n positive integers. You need to find the minimum number of operations required to make the array sorted in non-decreasing order. In one operation, you can select any element in the array and move it to any other position. An array is sorted in non-decreasing order if for every index i, A[i] <= A[i+1]. The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the array. The second line contains n positive integers A1, A2, ..., An (each less than or equal to 1000). Output the minimum number of operations required to sort the array in non-decreasing order.","solution":"def min_operations_to_sort(arr): Finds the minimum number of operations required to sort the array in non-decreasing order. In one operation, you can select any element in the array and move it to any other position. n = len(arr) # Find the length of the Longest Increasing Subsequence (LIS) lis = [1] * n for i in range(1, n): for j in range(i): if arr[i] >= arr[j]: lis[i] = max(lis[i], lis[j] + 1) # Minimum number of operations to sort the array is n - length of LIS longest_increasing_subsequence_length = max(lis) return n - longest_increasing_subsequence_length"},{"question":"You are given a string, which may contain any printable ASCII characters. Your task is to determine whether it is possible to convert the string into a palindrome by removing at most one character. Input: - A single string s (1 ≤ |s| ≤ 10^5) — the string to be checked. Output: - Output \\"YES\\" if it is possible to make the string a palindrome by removing at most one character. Otherwise, output \\"NO\\".","solution":"def can_form_palindrome_by_removing_one_char(s): Determines if a string can be made into a palindrome by removing at most one character. Args: s (str): The input string. Returns: str: \\"YES\\" if it can be made into a palindrome by removing at most one character, otherwise \\"NO\\". def is_palindrome(sub): return sub == sub[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: one_removed_left = s[left + 1:right + 1] one_removed_right = s[left:right] if is_palindrome(one_removed_left) or is_palindrome(one_removed_right): return \\"YES\\" else: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"A mysterious island has n ancient temples connected by a series of magical portals. The temples are labeled from 1 to n, and the portals are represented as undirected edges that form a tree structure. Each temple has a treasure which can either be claimed or unclaimed initially. The chief archaeologist needs to process m commands concerning these treasures. There are three types of commands: 1. Query if the treasure at a specific temple is claimed or unclaimed. 2. Claim the treasure at a specific temple (if it\'s not already claimed). 3. Calculate the number of claimed treasures on the path between two temples. Your task is to help the archaeologist process all the commands. The first line contains two integers n and m (2 leq n, m leq 10^5), which are the number of temples and the number of commands, respectively. The second line contains n-1 pairs of integers a_i and b_i (1 leq a_i, b_i leq n), indicating that there is a portal between temple a_i and temple b_i. Each of the next m lines contains a command in one of the following forms: - `1 v` (1 leq v leq n): Check the status of the treasure at temple v - `2 v` (1 leq v leq n): Claim the treasure at temple v - `3 u v` (1 leq u, v leq n): Calculate the number of claimed treasures on the path from temple u to temple v For the first type of command, print \\"claimed\\" if the treasure at the temple is claimed, or \\"unclaimed\\" if it is unclaimed. For the third type, print the number of claimed treasures on the path. Example: Input: ``` 5 5 1 2 1 3 3 4 3 5 2 2 1 2 3 4 5 2 4 3 2 5 ``` Output: ``` claimed 2 1 ```","solution":"class TempleTree: def __init__(self, n): self.n = n self.adj = [[] for _ in range(n + 1)] self.claimed = [False] * (n + 1) self.parent = [0] * (n + 1) self.depth = [0] * (n + 1) def add_edge(self, u, v): self.adj[u].append(v) self.adj[v].append(u) def dfs(self, v, par): self.parent[v] = par for neighbor in self.adj[v]: if neighbor == par: continue self.depth[neighbor] = self.depth[v] + 1 self.dfs(neighbor, v) def process_query(self, command): tokens = command.split() if tokens[0] == \\"1\\": v = int(tokens[1]) return \\"claimed\\" if self.claimed[v] else \\"unclaimed\\" elif tokens[0] == \\"2\\": v = int(tokens[1]) self.claimed[v] = True elif tokens[0] == \\"3\\": u = int(tokens[1]) v = int(tokens[2]) return self.count_claimed_treasures(u, v) def count_claimed_treasures(self, u, v): lca = self.find_lca(u, v) return sum(self.claimed[x] for x in self.get_path(u, v, lca)) def find_lca(self, u, v): if self.depth[u] < self.depth[v]: u, v = v, u while self.depth[u] > self.depth[v]: u = self.parent[u] while u != v: u = self.parent[u] v = self.parent[v] return u def get_path(self, u, v, lca): path = [] while u != lca: path.append(u) u = self.parent[u] path.append(lca) path_from_lca_to_v = [] while v != lca: path_from_lca_to_v.append(v) v = self.parent[v] return path + path_from_lca_to_v[::-1] # Main function to handle input and output def main(): import sys input = sys.stdin.read data = input().splitlines() n, m = map(int, data[0].split()) temple_tree = TempleTree(n) for i in range(1, n): a, b = map(int, data[i].split()) temple_tree.add_edge(a, b) temple_tree.dfs(1, -1) results = [] for i in range(n, n + m): result = temple_tree.process_query(data[i]) if result is not None: results.append(result) if results: print(\\"n\\".join(map(str, results))) if __name__ == \\"__main__\\": main()"},{"question":"A city is laid out as a square grid of size n x n. Each cell can either be empty or have a building. You need to determine the maximum rectangular area that can be formed using only the empty cells. A grid is represented as an array of strings where each character in the string can be either \'E\' for empty or \'B\' for a building. A rectangular area must be made entirely of contiguous empty cells. Write a function `maxEmptyRectangleArea(grid: List[str]) -> int` to determine the size of the largest rectangular area of empty cells. If there are no empty areas, return 0. # Input - `grid`: A List of strings representing the grid (1 ≤ n ≤ 1000) # Output - An integer representing the area of the largest empty rectangle # Example Example 1 Input: ```python grid = [ \\"EEEE\\", \\"EBEE\\", \\"EEEE\\", \\"EBBE\\" ] ``` Output: ``` 6 ``` Explanation: The largest rectangle of empty cells has an area of 6 (2x3 area). Example 2 Input: ```python grid = [ \\"BE\\", \\"EB\\" ] ``` Output: ``` 1 ``` Explanation: The largest rectangle of empty cells has an area of 1 (1x1 area).","solution":"from typing import List def maxEmptyRectangleArea(grid: List[str]) -> int: if not grid: return 0 n = len(grid) m = len(grid[0]) # Create a DP table to store the height of consecutive \'E\'s up to that point height = [[0] * m for _ in range(n)] # Fill the height table for i in range(n): for j in range(m): if grid[i][j] == \'E\': height[i][j] = height[i-1][j] + 1 if i > 0 else 1 # Function to calculate max rectangle area in a histogram def maxHistogramArea(heights): stack = [] max_area = 0 for i, h in enumerate(heights + [0]): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area # Calculate the maximum area for each row using the histogram technique max_area = 0 for row in height: max_area = max(max_area, maxHistogramArea(row)) return max_area"},{"question":"DZY has a collection of n integers and wants to group them into k sub-arrays such that the sum of the integers in each sub-array is as balanced as possible. Specifically, DZY wants to minimize the maximum sum among all k sub-arrays formed. He needs to find the minimum value of this maximum sum. The first line of the input contains two integers, n and k (1 ≤ k ≤ n ≤ 1000), the number of elements and the number of sub-arrays, respectively. The second line contains n integers, each representing an element of the array (1 ≤ xi ≤ 10000). Output a single integer representing the minimum possible maximum sum among all k sub-arrays. Example: Input: 7 3 10 20 30 40 50 60 70 Output: 110 Explanation: One optimal way to divide the array is [10, 20, 30, 40], [50, 60], [70]. The sums are 100, 110, and 70, and the maximum sum is 110, which is the minimum possible maximum sum.","solution":"def minimize_max_sum(n, k, array): def can_split(target_max_sum): subarrays = 1 current_sum = 0 for num in array: if current_sum + num > target_max_sum: subarrays += 1 current_sum = num if subarrays > k: return False else: current_sum += num return True left, right = max(array), sum(array) while left < right: mid = (left + right) // 2 if can_split(mid): right = mid else: left = mid + 1 return left # Example usage: n, k = 7, 3 array = [10, 20, 30, 40, 50, 60, 70] print(minimize_max_sum(n, k, array)) # Output: 110"},{"question":"You are given a number ( n ). You need to generate a string of length ( n ) that only contains the characters \'a\', \'b\', and \'c\', such that no two adjacent characters are the same. If there are multiple possible answers, you may output any of them. # Input - A single integer ( n ) (( 1 leq n leq 1000 )). # Output - A single string of length ( n ) containing only the characters \'a\', \'b\', and \'c\' with no two adjacent characters being the same. # Example Input ``` 5 ``` Output ``` abcab ``` OR ``` acbac ``` OR any other valid string of length 5.","solution":"def generate_string(n): Generates a string of length n that only contains the characters \'a\', \'b\', and \'c\', such that no two adjacent characters are the same. :param n: The length of the string to generate :return: A string of length n with no two adjacent characters being the same result = [] chars = [\'a\', \'b\', \'c\'] for i in range(n): result.append(chars[i % 3]) return \'\'.join(result)"},{"question":"Given an array of integers `arr`, your task is to determine whether there exists a subarray (contiguous segment) of length `k` such that the sum of its elements is maximum and is divisible by a given integer `d`. # Input The first line of the input contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n) — the size of the array and the length of the subarray, respectively. The second line contains `n` integers `arr[i]` (|arr[i]| ≤ 10^4) — the elements of the array. The third line contains a single integer `d` (1 ≤ d ≤ 10^4) — the given integer. # Output Print \\"YES\\" if there exists a subarray of length `k` such that the sum of its elements is maximum and is divisible by `d`. Otherwise, print \\"NO\\". # Examples Input ``` 8 3 1 2 3 4 5 6 7 8 3 ``` Output ``` YES ``` Input ``` 5 2 1 2 3 4 5 6 ``` Output ``` NO ``` # Note In the first example, the subarray [6, 7, 8] has the maximum sum among all possible subarrays of length 3, and its sum 21 is divisible by 3. In the second example, no subarray of length 2 has a sum divisible by 6.","solution":"def max_sum_subarray_divisible(arr, k, d): Determines if any subarray of length `k` in `arr` has the maximum sum that is divisible by `d`. Parameters: arr (list of int): The array of integers. k (int): The length of the subarray. d (int): The integer by which the sum of the subarray should be divisible. Returns: str: \\"YES\\" if such a subarray exists, otherwise \\"NO\\". n = len(arr) # Compute the initial sum of the first subarray of length `k` current_sum = sum(arr[:k]) max_sum = current_sum # Traverse the array to check all other subarrays of length `k` for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return \\"YES\\" if max_sum % d == 0 else \\"NO\\""},{"question":"You are given an array of integers representing the ratings of contestants in a competition. The goal is to distribute candies to these contestants such that each contestant gets at least one candy, and contestants with a higher rating get more candies than their neighbors. Given an array `ratings` of length n (1 ≤ n ≤ 100,000), return the minimum number of candies you need to distribute. To illustrate: - Let ratings = [1, 0, 2] - You should distribute 5 candies in total. The distribution could be [2, 1, 2]. - Let ratings = [1, 2, 2] - You should distribute 4 candies in total. The distribution could be [1, 2, 1]. Your task is to implement a function that, given the array `ratings`, returns the minimum number of candies required. **Function Signature:** ```python def min_candies(ratings: List[int]) -> int: pass ``` **Input:** - An integer array `ratings` of length n. **Output:** - An integer representing the minimum number of candies needed. **Example:** - Input: ratings = [1, 0, 2] - Output: 5 - Input: ratings = [1, 2, 2] - Output: 4","solution":"from typing import List def min_candies(ratings: List[int]) -> int: This function returns the minimum number of candies required such that each contestant with a higher rating gets more candies than their neighbors and each contestant gets at least one candy. n = len(ratings) if n == 0: return 0 candies = [1] * n # Left to right pass to ensure candies[i] > candies[i-1] for ratings[i] > ratings[i-1] for i in range(1, n): if ratings[i] > ratings[i - 1]: candies[i] = candies[i - 1] + 1 # Right to left pass to ensure candies[i] > candies[i+1] for ratings[i] > ratings[i+1] for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: candies[i] = max(candies[i], candies[i + 1] + 1) return sum(candies)"},{"question":"You are given a string consisting of lowercase English letters only. You may perform the following operations as many times as you want: 1. Choose any non-empty substring where all characters are the same and remove it. What is the minimum number of operations required to delete the entire string? The first line contains one integer n (1 le n le 100000) indicating the length of the string. The second line contains the string of length n consisting of lowercase English letters. Print one integer — the minimum number of operations required to delete the entire string.","solution":"def min_operations_to_delete_string(n, s): Returns the minimum number of operations required to delete the entire string. Parameters: n: int - Length of the string s s: str - A string of length n consisting of lowercase English letters Returns: int - Minimum number of operations required to delete the entire string. operations = 0 i = 0 while i < n: operations += 1 while i + 1 < n and s[i] == s[i + 1]: i += 1 i += 1 return operations"},{"question":"You are given an array of integers representing the height of consecutive buildings on a street. You need to calculate a new array that represents the height difference between each building and the one immediately to its right. If there is no building to the right, the difference is simply the height of that building. The first line contains the integer n (1 ≤ n ≤ 1000) — the number of buildings. The second line contains n positive integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the buildings. Print the resulting array of differences. In the first example, there are 4 buildings with heights [3, 6, 2, 4]. The difference array is [-3, 4, -2, 4]. In the second example, there is 1 building with height [5]. The difference array is [5]. In the third example, there are 3 buildings with heights [10, 10, 10]. The difference array is [0, 0, 10].","solution":"def building_height_differences(heights): Given a list of building heights, return the differences between each building and the one immediately to its right. If there is no building to the right, the difference is simply the height of that building. n = len(heights) differences = [] for i in range(n - 1): differences.append(heights[i] - heights[i + 1]) if n > 0: differences.append(heights[-1]) # Last building difference is its own height return differences"},{"question":"Given an array of integers, arrange the array such that all odd numbers appear before all even numbers, while preserving the relative order of both odd and even numbers. # Input: - The first line contains an integer `n` (1 <= n <= 1000) - the number of elements in the array. - The second line contains `n` integers separated by spaces - the elements of the array. # Output: - Output the modified array with all odd numbers appearing before all even numbers, maintaining the relative order of odd and even numbers respectively. # Example: Input ``` 8 1 2 3 4 5 6 7 8 ``` Output ``` 1 3 5 7 2 4 6 8 ``` # Explanation: The odd numbers `1, 3, 5, 7` are all positioned before the even numbers `2, 4, 6, 8`, and the relative order of both odd numbers and even numbers is preserved from the original array.","solution":"def rearrange_array(arr): Rearrange the array such that all odd numbers appear before all even numbers, while preserving the relative order of both odd and even numbers. odd_numbers = [x for x in arr if x % 2 != 0] even_numbers = [x for x in arr if x % 2 == 0] return odd_numbers + even_numbers"},{"question":"You are given an array of n integers representing the heights of buildings in a city skyline. You want to place special flags on top of certain buildings following these rules: 1. You can place a flag on a building if it is the highest building seen so far while traversing the array from left to right. 2. You can place a flag on a building if it is the highest building seen so far while traversing the array from right to left. Your task is to find the minimum number of flags needed to be placed to satisfy the above rules. The input consists of: - The first line containing an integer n (1 ≤ n ≤ 10^5) - the number of buildings. - The second line containing n space-separated integers hi (1 ≤ hi ≤ 10^9) - the heights of the buildings. Output a single integer, the minimum number of flags you need to place. For example: Input: 5 3 1 4 1 5 Output: 3 Explanation: - From left to right, flags can be placed on building heights 3 and 4. - From right to left, flags can be placed on building height 5. In total, flags are needed on buildings with heights 3, 4, and 5. This is the minimal set of buildings that should have flags.","solution":"def min_flags_to_place(n, heights): if n == 0: return 0 left_max = [0] * n right_max = [0] * n flags_set = set() # Traverse from left to right to find increasing max heights. left_max[0] = heights[0] flags_set.add(heights[0]) # Place flag on the first building for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) if heights[i] > left_max[i-1]: flags_set.add(heights[i]) # Place flag if it\'s the highest so far # Traverse from right to left to find increasing max heights. right_max[-1] = heights[-1] flags_set.add(heights[-1]) # Place flag on the last building for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) if heights[i] > right_max[i+1]: flags_set.add(heights[i]) # Place flag if it\'s the highest so far # The number of flags needed is the size of the set of unique flagged buildings return len(flags_set)"},{"question":"A logistics company needs to track the delivery status of its packages. Each package can be tracked via its tracking number, which is a string of alphanumeric characters. Each package also has an associated status, which can be one of \\"Shipped\\", \\"In-Transit\\", \\"Out for Delivery\\", or \\"Delivered\\". The status updates for each package are provided chronologically. Write a program that processes a list of status updates and outputs the final status of each package. If a package has no status updates, it should not be included in the output. The input starts with an integer n (1 ≤ n ≤ 100,000) representing the number of status updates. Each of the next n lines contains a tracking number and a status, separated by a space. The tracking number is a string containing alphanumeric characters (length between 1 and 20), and the status is one of the four mentioned above. Output the tracking number and its final status for each package, in the order of the first occurrence of each tracking number in the input. Sample Input: ``` 7 123ABC Shipped 456DEF In-Transit 123ABC In-Transit 123ABC Out for Delivery 789GHI Shipped 456DEF Out for Delivery 123ABC Delivered ``` Sample Output: ``` 123ABC Delivered 456DEF Out for Delivery 789GHI Shipped ```","solution":"def track_packages_status(n, updates): Processes a list of status updates and outputs the final status of each package. Args: n: An integer representing the number of status updates. updates: A list of tuples, where each tuple contains a tracking number and its status. Returns: A list of tuples representing the tracking number and its final status. status_dict = {} order_list = [] for update in updates: tracking_number, status = update if tracking_number not in status_dict: order_list.append(tracking_number) status_dict[tracking_number] = status result = [(tracking_number, status_dict[tracking_number]) for tracking_number in order_list] return result"},{"question":"In a certain kingdom, there is a legendary tree called the \\"Fruit Tree of Ages\\". This tree produces a special kind of fruit every year, and its fruit production follows a certain pattern. The tree begins to produce fruit from the second year of its existence. For every year `i` (starting from `i = 2`), the number of fruits produced in that year is equal to the sum of the number of fruits produced in the previous year and the number of fruits produced in the year before the previous year. This means that if the number of fruits produced by the tree in year 1 is `a1` and in year 2 is `a2`, then the number of fruits produced in year 3 would be `a3 = a2 + a1`, and in year 4 would be `a4 = a3 + a2`, and so on. You are given `a1` and `a2` — the number of fruits produced by the tree in the first two years of its fruit production. Your task is to find the number of fruits produced by the tree in the `n`-th year, where `n` is a given positive integer (n ≥ 1). # Input The input consists of three space-separated integers: - `a1` (0 ≤ a1 ≤ 10^9) — the number of fruits produced by the tree in the first year. - `a2` (0 ≤ a2 ≤ 10^9) — the number of fruits produced by the tree in the second year. - `n` (1 ≤ n ≤ 10^9) — the year for which you need to determine the number of fruits produced. # Output Print a single integer — the number of fruits produced by the tree in the `n`-th year. # Examples Example 1 Input ``` 1 1 5 ``` Output ``` 5 ``` Example 2 Input ``` 2 3 4 ``` Output ``` 8 ``` Example 3 Input ``` 0 1 6 ``` Output ``` 5 ```","solution":"def fruits_in_nth_year(a1, a2, n): Returns the number of fruits produced in the nth year by the legendary tree. Parameters: a1 (int): Number of fruits produced in the first year. a2 (int): Number of fruits produced in the second year. n (int): The target year. Returns: int: Number of fruits produced in the nth year. if n == 1: return a1 if n == 2: return a2 prev2, prev1 = a1, a2 for _ in range(3, n+1): current = prev1 + prev2 prev2, prev1 = prev1, current return prev1"},{"question":"Kaito is working with a grid that has both positive and negative values. Each cell in the grid can have a different value, and Kaito can move either up, down, left, or right. He can move between any two adjacent cells if and only if the value in the starting cell is greater than or equal to the value in the target cell. Kaito wants to know if he can travel from one cell to another given several queries. The first line contains three integers n, m and q (1 leq n, m leq 1000, 1 leq q leq 5000) — the number of rows and columns in the grid, and the number of queries. Each of the next n lines contains m integers each, representing the values in the grid. Each of the next q lines contains four integers s_x, s_y, e_x, e_y (1 leq s_x, s_y, e_x, e_y leq n, m) — the coordinates of the starting and ending cell. For each query, print \\"YES\\" if Kaito can move from (s_x, s_y) to (e_x, e_y), and \\"NO\\" otherwise. Example: **Input:** ``` 3 3 2 5 4 3 3 6 2 2 1 1 1 1 2 3 2 3 1 1 ``` **Output:** ``` YES NO ```","solution":"def can_move(grid, n, m, q, queries): def bfs(start, end): from collections import deque sx, sy = start ex, ey = end queue = deque([(sx, sy)]) visited = set() visited.add((sx, sy)) while queue: x, y = queue.popleft() if (x, y) == (ex, ey): return \\"YES\\" for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] <= grid[x][y]: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" results = [] for query in queries: s_x, s_y, e_x, e_y = query results.append(bfs((s_x-1, s_y-1), (e_x-1, e_y-1))) return results"},{"question":"You are given a string `s` consisting of lowercase English letters. You can process the string by performing exactly one of the following operations: 1. Select any single character and replace it with any other lowercase English letter. 2. Select any single character and delete it from the string. Your goal is to transform the string such that no two adjacent characters are the same. Your task is to find the minimum number of operations required to achieve this goal. The first line of input contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each of the next `t` lines contains a string `s` (1 ≤ |s| ≤ 100). Print `t` lines, each containing a single integer — the minimum number of operations required for the corresponding test case to make the string have no two adjacent characters that are the same.","solution":"def min_operations_to_avoid_adjacent_duplicates(t, test_cases): Returns a list of integers where each integer is the minimum number of operations required for the corresponding test case to make the string have no two adjacent characters that are the same. results = [] for s in test_cases: operations = 0 for i in range(1, len(s)): if s[i] == s[i-1]: operations += 1 results.append(operations) return results"},{"question":"You are given a sequence of integers a0, a1, ..., an-1. There are two types of operations you need to perform on this sequence: \\"reverse\\" and \\"query\\". - The \\"reverse\\" operation takes two integers lf and rg (0 ≤ lf ≤ rg ≤ n-1) and reverses the subarray from index lf to rg inclusive. - The \\"query\\" operation takes one integer x (0 ≤ x ≤ n-1) and returns the value of the element at index x in the current sequence. Write a program to process a sequence of such operations on the array. Input: - The first line contains an integer n (1 ≤ n ≤ 100000), the number of elements in the array. - The second line contains n integers a0, a1, ..., an-1 (-10^6 ≤ ai ≤ 10^6), representing the initial state of the array. - The third line contains an integer m (1 ≤ m ≤ 100000), the number of operations. - Each of the next m lines contains one operation in the form \\"reverse lf rg\\" or \\"query x\\". Output: - For each \\"query\\" operation, print the result on a new line.","solution":"def process_operations(n, a, m, operations): results = [] for opp in operations: if opp[0] == \\"reverse\\": lf, rg = opp[1], opp[2] a[lf:rg+1] = a[lf:rg+1][::-1] elif opp[0] == \\"query\\": x = opp[1] results.append(a[x]) return results"},{"question":"You are given a table with `n` rows and `m` columns filled with non-negative integers. You need to perform an operation to make all the elements of the table equal. In one operation, you can select a subrectangle and increment all elements in it by 1. Your task is to find the minimum number of operations required to make all elements of the table equal. Input: - The first line contains two integers `n` and `m` (1 le n, m le 50) - the dimensions of the table. - The next `n` lines contain `m` integers each - the elements of the table. Each element is a non-negative integer not greater than 100. Output: - Print a single integer - the minimum number of operations required to make all elements of the table equal. Example: ``` Input: 3 3 1 2 1 3 4 2 1 1 3 Output: 5 ``` Explanation: In the given example, one way to equalize the table in 5 operations: 1. Increment the subrectangle [(1,1),(1,3)] to make the first row [2,3,2]. 2. Increment the subrectangle [(1,1),(2,2)] to make the top-left 2x2 subrectangle [3,4,3] and [4,4,2]. 3. Increment the subrectangle [(1,3),(2,3)] to make the second column [3,4,4] and [4,4,3]. 4. Increment the subrectangle [(3,1),(3,3)] to make the bottom row [3,3,5]. 5. Increment the subrectangle [(3,2),(3,3)] to make the bottom row [3,4,4]. All elements are now equal to 4 after 5 operations.","solution":"def min_operations_to_equalize_table(n, m, table): This function takes the dimensions of a matrix and the matrix itself and returns the minimum number of operations required to make all elements in the table equal by incrementing subrectangles. max_elem = max(max(row) for row in table) min_elem = min(min(row) for row in table) if min_elem == max_elem: return 0 return max_elem - min_elem # Example usage n = 3 m = 3 table = [ [1, 2, 1], [3, 4, 2], [1, 1, 3] ] print(min_operations_to_equalize_table(n, m, table)) # Output should be 3"},{"question":"Tom loves playing with matrices and has devised a new matrix game. Given an n x n matrix (1 ≤ n ≤ 500) where each element is an integer between 1 and 10^9, you have to perform q queries (1 ≤ q ≤ 50000). The queries can be of two types: 1. **Update Query:** Update the value in the matrix at a specific position (i, j) to a new value x. 2. **Sum Query:** Calculate the sum of all elements in a submatrix from the top-left (i1, j1) to the bottom-right (i2, j2). The first line of the input contains two integers n and q, representing the dimensions of the matrix and the number of queries respectively. The next n lines each contain n integers, representing the elements of the matrix. The following q lines describe the queries in one of the following formats: - **1 i j x**: Update the element at position (i, j) to x (1 ≤ i, j ≤ n, 1 ≤ x ≤ 10^9). - **2 i1 j1 i2 j2**: Compute the sum of elements in the submatrix from (i1, j1) to (i2, j2) (1 ≤ i1 ≤ i2 ≤ n, 1 ≤ j1 ≤ j2 ≤ n). For each sum query, output the result on a new line. For example, given the initial matrix: ``` 1 2 3 4 5 6 7 8 9 ``` A sum query of type `2 1 1 2 2` would compute the sum of the submatrix from (1, 1) to (2, 2), which includes elements [1, 2, 4, 5] and returns 12. An update query of type `1 2 2 10` would update the element at (2, 2) from 5 to 10. Your task is to efficiently handle up to 50,000 such queries.","solution":"class MatrixGame: def __init__(self, matrix): self.n = len(matrix) self.matrix = matrix self.build_prefix_sum() def build_prefix_sum(self): self.prefix_sum = [[0] * (self.n + 1) for _ in range(self.n + 1)] for i in range(1, self.n + 1): for j in range(1, self.n + 1): self.prefix_sum[i][j] = ( self.matrix[i-1][j-1] + self.prefix_sum[i-1][j] + self.prefix_sum[i][j-1] - self.prefix_sum[i-1][j-1] ) def update(self, i, j, x): current_value = self.matrix[i-1][j-1] delta = x - current_value self.matrix[i-1][j-1] = x for row in range(i, self.n + 1): for col in range(j, self.n + 1): self.prefix_sum[row][col] += delta def sum_query(self, i1, j1, i2, j2): return ( self.prefix_sum[i2][j2] - self.prefix_sum[i1-1][j2] - self.prefix_sum[i2][j1-1] + self.prefix_sum[i1-1][j1-1] ) def process_queries(n, q, matrix, queries): game = MatrixGame(matrix) result = [] for query in queries: if query[0] == 1: # Update query _, i, j, x = query game.update(i, j, x) elif query[0] == 2: # Sum query _, i1, j1, i2, j2 = query result.append(game.sum_query(i1, j1, i2, j2)) return result"},{"question":"Design and implement a function `find_all_subsets(nums: List[int]) -> List[List[int]]` that takes a list `nums` of unique integers and returns all possible subsets (the power set). The solution set should not contain duplicate subsets, and the subsets can be returned in any order. # Constraints: 1. The length of `nums` will be in the range `[0, 10]`. 2. Elements in `nums` are unique integers. # Example: ```python nums = [1, 2, 3] Output: [ [], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3] ] ```","solution":"from typing import List def find_all_subsets(nums: List[int]) -> List[List[int]]: Returns all possible subsets (the power set) of the list of unique integers nums. # Initialize the list of subsets with the empty set subsets = [[]] # Iterate over each number in nums for num in nums: # For each existing subset, create a new subset that includes the current number subsets += [current + [num] for current in subsets] return subsets"},{"question":"Words Compression You are given a string of lowercase English words separated by a single space. Your task is to compress the string in such a way that each word in the compressed string appears only once and in the order they first appear in the original string. Write a function `compress_string(s: str) -> str` that takes in a string `s` and returns the compressed string. # Input - A single line string `s` consisting of lowercase English letters separated by a single space. The length of the string `s` will be between 1 and 1000 characters. # Output - A single line string that represents the compressed version of the input string. # Example Input 1: ``` this is a test this is only a test ``` Output 1: ``` this is a test only ``` Input 2: ``` hello hello world ``` Output 2: ``` hello world ```","solution":"def compress_string(s: str) -> str: Compresses the string such that each word appears only once and in the order they first appear in the original string. Parameters: s (str): Input string of lowercase English words separated by a single space. Returns: str: Compressed string with each word appearing only once. words = s.split() seen = set() result = [] for word in words: if word not in seen: seen.add(word) result.append(word) return \' \'.join(result)"},{"question":"You are given a matrix consisting of n rows and m columns filled with non-negative integers. Your task is to find the smallest sum of any submatrix that is at least k times k in size. The first line of the input contains three integers n, m, and k (1 le k le min(n, m) le 300), which denote the number of rows, the number of columns, and the minimum submatrix size respectively. Each of the next n lines contains m integers, representing the elements of the matrix. All elements of the matrix are non-negative integers (0 le a_{ij} le 1000). Output a single integer, which is the smallest sum of any submatrix of at least k times k in size. # Example: **Input:** ``` 4 5 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ``` **Output:** ``` 20 ``` # Explanation: From the given matrix, a possible submatrix of at least 2 times 2 with the smallest sum is: ``` 1 2 6 7 ``` The sum of its elements is 1 + 2 + 6 + 7 = 16.","solution":"def smallest_kxk_submatrix_sum(n, m, k, matrix): # Create a prefix sum matrix prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = (matrix[i - 1][j - 1] + prefix_sum[i - 1][j] + prefix_sum[i][j - 1] - prefix_sum[i - 1][j - 1]) # Initialize the minimum sum to a large value min_sum = float(\'inf\') # Iterate through all possible top-left corners of k x k submatrices for i in range(k, n + 1): for j in range(k, m + 1): # Calculate the sum of the submatrix ending at (i, j) submatrix_sum = (prefix_sum[i][j] - prefix_sum[i - k][j] - prefix_sum[i][j - k] + prefix_sum[i - k][j - k]) # Update the minimum sum if we find a smaller sum if submatrix_sum < min_sum: min_sum = submatrix_sum return min_sum"},{"question":"You are given a permutation of the first n natural numbers, where n is an even number. In this permutation, you have to find a way to calculate the minimum number of adjacent swaps required to sort the permutation in ascending order. For example, if the permutation is [2, 1, 4, 3], the process to sort would involve swapping 2 and 1, and then 4 and 3, making a total of 2 swaps. The first line contains a single integer n (2 ≤ n ≤ 100) — the number of elements in the permutation. It is guaranteed that n is even. The second line contains n integers, which are a permutation of the first n natural numbers. Output the minimum number of adjacent swaps required to sort the permutation. # Example **Input:** ``` 4 2 1 4 3 ``` **Output:** ``` 2 ``` **Explanation:** The permutation [2, 1, 4, 3] can be sorted to [1, 2, 3, 4] in 2 swaps: 1- swap 2 and 1 -> [1, 2, 4, 3] 2- swap 4 and 3 -> [1, 2, 3, 4]","solution":"def min_adjacent_swaps_to_sort(n, permutation): Returns the minimum number of adjacent swaps required to sort the permutation in ascending order. swaps = 0 # Use a Bubble Sort algorithm to count the number of swaps # required to sort the permutation arr = permutation[:] for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swaps += 1 return swaps"},{"question":"You are given a grid representing power grids in a city. Each cell in the grid either contains a part of a power grid or is empty. The power grids can be connected vertically or horizontally. The grid is represented by an n x m matrix, where \'1\' represents a part of a grid and \'0\' represents an empty cell. The goal is to find the number of power grids in the city. A power grid is defined as a group of \'1\'s connected 4-directionally (up, down, left, and right). **Input:** The first line of input contains two integers, n and m, indicating the number of rows and columns in the grid, respectively. The next n lines contain m characters each, representing the grid. **Output:** Output the number of power grids present in the city. **Example:** ``` Input: 4 5 11100 11000 00100 00011 Output: 3 ``` **Note:** In the example above, there are three separate power grids: 1. The first power grid is formed by the cells (0,0), (0,1), (0,2), (1,0), and (1,1). 2. The second power grid is formed by the cell (2,2). 3. The third power grid is formed by the cells (3,3) and (3,4). Write a function `findPowerGrids(n, m, grid)` that takes two integers, n and m, and a list of strings representing the grid, and returns the number of power grids.","solution":"def findPowerGrids(n, m, grid): Given a grid representing power grids in a city, returns the number of distinct power grids. def dfs(x, y): # If out of bounds or already visited or not part of a grid, return if x < 0 or x >= n or y < 0 or y >= m or visited[x][y] or grid[x][y] == \'0\': return # Mark as visited visited[x][y] = True # Visit all 4-directional neighbors dfs(x+1, y) dfs(x-1, y) dfs(x, y+1) dfs(x, y-1) visited = [[False] * m for _ in range(n)] power_grids_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\' and not visited[i][j]: dfs(i, j) power_grids_count += 1 return power_grids_count"},{"question":"Ada and Evo are playing a number game. Ada has a list of integers and wants to know the sum of bitwise AND of all pairs of numbers in different segments of the list. Specifically, Ada will choose a segment of the list and calculate the sum of bitwise AND for all pairs within that segment. Given a list of integers and several queries, each query containing the starting and ending indices of a segment, write a program to compute the sum of bitwise AND of all pairs in the specified segment. # Input - The first line contains an integer `n` (1 leq n leq 10^5) — the length of the list. - The second line contains `n` integers a_1, a_2, ldots, a_n (0 leq a_i leq 10^9) — the list elements. - The third line contains an integer `q` (1 leq q leq 10^5) — the number of queries. - The next `q` lines each contain two integers `l` and `r` (1 leq l leq r leq n) — the starting and ending indices of the segment (inclusive). # Output - For each query, output the sum of bitwise AND of all pairs of numbers within the segment. # Example Input ``` 5 1 2 3 4 5 3 1 3 2 5 1 5 ``` Output ``` 3 18 20 ``` # Explanation For the first query (1, 3): - Segment = [1, 2, 3] - Pairs: (1&2) = 0, (1&3) = 1, (2&3) = 2 - Sum = 0 + 1 + 2 = 3 For the second query (2, 5): - Segment = [2, 3, 4, 5] - Pairs: (2&3) = 2, (2&4) = 0, (2&5) = 0, (3&4) = 0, (3&5) = 1, (4&5) = 4 - Sum = 2 + 0 + 0 + 0 + 1 + 4 = 7 For the third query (1, 5): - Segment = [1, 2, 3, 4, 5] - Pairs: (1&2) = 0, (1&3) = 1, (1&4) = 0, (1&5) = 1, (2&3) = 2, (2&4) = 0, (2&5) = 0, (3&4) = 0, (3&5) = 1, (4&5) = 4 - Sum = 0 + 1 + 0 + 1 + 2 + 0 + 0 + 0 + 1 + 4 = 9","solution":"def sum_bitwise_and_segments(n, array, queries): def bitwise_and_sum(segment): res = 0 for i in range(len(segment)): for j in range(i + 1, len(segment)): res += segment[i] & segment[j] return res results = [] for l, r in queries: segment = array[l-1:r] results.append(bitwise_and_sum(segment)) return results"},{"question":"In a small game, there are n players standing in a circle, numbered from 1 to n. Starting from player 1 and moving clockwise, every k-th player is eliminated from the circle until only one player remains. The task is to find the position of the last remaining player. For example, suppose n = 5 and k = 2. Players are eliminated in the order 2, 4, 1, 5, and the last remaining player is 3. Write a function that takes two integers, n and k, and returns the position of the last remaining player. # Function Signature ```python def find_last_player(n: int, k: int) -> int: pass ``` # Input - An integer n (1 ≤ n ≤ 300) - the number of players. - An integer k (1 ≤ k ≤ 300) - the step count. # Output - Return an integer - the position of the last remaining player. # Example ```python find_last_player(5, 2) # should return 3 find_last_player(7, 3) # should return 4 ``` # Explanation For the first example, with n = 5 and k = 2, the elimination process is: 1. Players: [1, 2, 3, 4, 5] 2. Eliminate: 2 -> Players: [1, 3, 4, 5] 3. Eliminate: 4 -> Players: [1, 3, 5] 4. Eliminate: 1 -> Players: [3, 5] 5. Eliminate: 5 -> Players: [3] Hence, the position of the last remaining player is 3. For the second example, with n = 7 and k = 3, the elimination process is: 1. Players: [1, 2, 3, 4, 5, 6, 7] 2. Eliminate: 3 -> Players: [1, 2, 4, 5, 6, 7] 3. Eliminate: 6 -> Players: [1, 2, 4, 5, 7] 4. Eliminate: 2 -> Players: [1, 4, 5, 7] 5. Eliminate: 7 -> Players: [1, 4, 5] 6. Eliminate: 5 -> Players: [1, 4] 7. Eliminate: 1 -> Players: [4] Hence, the position of the last remaining player is 4.","solution":"def find_last_player(n: int, k: int) -> int: Finds the position of the last remaining player in a circle game. :param n: Number of players :param k: Step count for elimination :return: The position of the last remaining player players = list(range(1, n + 1)) index = 0 while len(players) > 1: index = (index + k - 1) % len(players) players.pop(index) return players[0]"},{"question":"You are working on a complex robotic arm control system. The system consists of a sequence of commands that are to be executed in a specific order. There are three types of commands: 1. MOVE x y - Moves the arm to coordinates (x, y). 2. PICK z - Picks up an item of weight z at the current arm position. 3. DROP - Drops the currently picked item at the current arm position. However, the arm system has limitations: - It cannot move directly to a new position if it is carrying an item; it can only move when it is not holding anything. - It cannot pick up or drop an item if the arm is already holding something or if the coordinates where the PICK or DROP commands are to be executed don\'t match the current arm position. You need to write a function to determine the validity and total distance traveled by the robotic arm given a sequence of commands. Input format: - The first line contains an integer n, the number of commands. - The following n lines each contain a single command, either in the form \\"MOVE x y\\", \\"PICK z\\", or \\"DROP\\". Output format: - A single integer representing the total distance traveled if all commands are valid, or -1 if any command is invalid. Example Input: 6 MOVE 1 2 PICK 5 MOVE 3 4 DROP MOVE 3 4 PICK 2 Example Output: 7 Explanation: - The arm moves from (0, 0) to (1, 2) (distance 3). - The arm picks up an item at (1, 2). - The arm cannot move while holding an item, the third command is invalid. Constraints: - 1 ≤ n ≤ 1000 - The coordinates and weights x, y, and z are integers where -1000 ≤ x, y ≤ 1000 and 1 ≤ z ≤ 100. Write the function to determine the total distance traveled by the robotic arm.","solution":"def arm_system(commands): def distance(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) current_pos = (0, 0) holding_item = False total_distance = 0 for command in commands: parts = command.split() cmd = parts[0] if cmd == \'MOVE\': if holding_item: return -1 x, y = int(parts[1]), int(parts[2]) new_pos = (x, y) total_distance += distance(current_pos, new_pos) current_pos = new_pos elif cmd == \'PICK\': if holding_item: return -1 weight = int(parts[1]) holding_item = True elif cmd == \'DROP\': if not holding_item: return -1 holding_item = False else: return -1 # Invalid command return total_distance"},{"question":"You are given an undirected, weighted graph with n vertices and m edges. The vertices are numbered from 1 to n and the edges are given as triples (u, v, w) denoting an edge between vertex u and vertex v with weight w. Write a program that computes the length of the shortest path between two given vertices s and t in the graph. If there is no path between s and t, output \\"NO PATH\\". The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 10000). Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) describing an edge of the graph. The last line contains the two integers s and t (1 ≤ s, t ≤ n), the start and end vertices. Output a single integer — the length of the shortest path between s and t, or \\"NO PATH\\" if there is no such path.","solution":"import heapq def shortest_path(n, m, edges, s, t): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, goal): distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[goal] result = dijkstra(s, t) return result if result != float(\'infinity\') else \\"NO PATH\\""},{"question":"In a city, there are N bus stops represented by a graph with N nodes and M edges where each edge represents a bus route with a given time it takes to travel between two bus stops. A traveler wants to find the shortest time to get from bus stop A to bus stop B. Write a function `find_shortest_time(N, M, edges, A, B)` which takes the following: - An integer N: the number of bus stops (1 ≤ N ≤ 1000). - An integer M: the number of bus routes (1 ≤ M ≤ 5000). - A list of tuples where each tuple represents an edge. Each tuple contains three integers u, v, w (1 ≤ u, v ≤ N and 1 ≤ w ≤ 1000), representing a bus route from stop u to stop v taking w minutes. - An integer A: the starting bus stop. - An integer B: the destination bus stop. The function should return the shortest time in minutes to get from stop A to stop B. If there is no path from A to B, return -1. # Example ```python edges = [(1, 2, 4), (2, 3, 1), (1, 3, 10)] N = 3 M = 3 A = 1 B = 3 print(find_shortest_time(N, M, edges, A, B)) # Output: 5 ```","solution":"import heapq from collections import defaultdict import sys def find_shortest_time(N, M, edges, A, B): Finds the shortest time to travel from bus stop A to bus stop B. Uses Dijkstra\'s algorithm to find the shortest path in a graph. graph = defaultdict(list) # Build the graph for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) # Priority queue to store (time, node) pq = [(0, A)] # Dictionary to store the shortest time to each node shortest_time = {i: sys.maxsize for i in range(1, N+1)} shortest_time[A] = 0 while pq: current_time, node = heapq.heappop(pq) if node == B: return current_time for time, neighbor in graph[node]: new_time = current_time + time if new_time < shortest_time[neighbor]: shortest_time[neighbor] = new_time heapq.heappush(pq, (new_time, neighbor)) return -1 # If there\'s no path from A to B"},{"question":"Jazex Inc. has developed a new instant messaging app, Chatr, that automatically suggests new words and phrases to complete your sentences based on context. An essential part of this feature is analyzing a user\'s message and determining the most probable next word or sequence of words using historical data. The app stores a large number of possible phrases in a database. For better performance, it needs an efficient way to find and suggest the best matches for the user\'s incomplete input string. Your task is to help Jazex Inc. by implementing a function that will take an incomplete input string and a list of historical phrases, and then return the phrases that start with the input string, ordered by their commonality (phrases that appear more frequently should appear first). The first line of the input contains an integer `n` (1 ≤ n ≤ 1000), representing the number of historical phrases. Each of the next `n` lines contains a phrase (a non-empty sequence of up to 100 lowercase or uppercase alphabetic characters), without leading and trailing spaces, and properly trimmed. The last line of input contains the incomplete input string (a non-empty sequence of up to 100 lowercase or uppercase alphabetic characters). Output all the matching phrases, each on a new line, ordered by their frequency in descending order. If two phrases have the same frequency, order them lexicographically. Example: Input: ``` 5 hello world hi there hello how are you hi there he ``` Output: ``` hello hello world ``` Explanation: - \\"hello\\" appears once. - \\"hello world\\" appears once. - \\"hi there\\" appears twice, but it does not start with \\"he\\". - \\"how are you\\" appears once, but it does not start with \\"he\\".","solution":"def suggest_phrases(n, historical_phrases, incomplete_input): Returns a list of phrases that start with the given incomplete input, ordered by their frequency in descending order and lexicographically when frequencies are the same. from collections import Counter # Count the frequency of each phrase phrase_counter = Counter(historical_phrases) # Filter the phrases that start with the incomplete input matching_phrases = [phrase for phrase in phrase_counter if phrase.startswith(incomplete_input)] # Sort the matching phrases first by frequency and then lexicographically matching_phrases.sort(key=lambda phrase: (-phrase_counter[phrase], phrase)) return matching_phrases"},{"question":"You are given a list of integers arr consisting of n elements. Your task is to split this list into the minimum number of non-empty sublists such that each sublist is strictly increasing. Output the minimum number of sublists needed. The first line of input contains a single integer n (1 le n le 10^5) — the length of the list. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the list. Output the minimum number of non-empty sublists whose elements are strictly increasing. For example: Input 6 4 2 3 1 5 6 Output 3 Explanation: One way to split the list into the minimum number of strictly increasing sublists is: [4], [2, 3], [1, 5, 6].","solution":"def minimum_number_of_increasing_sublists(arr): Returns the minimum number of non-empty sublists such that each sublist is strictly increasing. if not arr: # if arr is empty, no sublists are needed return 0 sublists_count = 1 # at least one sublist is needed for i in range(1, len(arr)): if arr[i] <= arr[i-1]: sublists_count += 1 return sublists_count"},{"question":"Polycarp is learning about binary search trees (BST) and their properties. He has recently come across the concept of the in-order traversal of a BST, which returns the elements of the tree in sorted order. However, Polycarp is more interested in the properties of nodes in the BST relative to their position in this traversal. Polycarp\'s task is to find, for each node in the tree, the value of the node which is the predecessor (the largest value smaller than the current node) and the successor (the smallest value larger than the current node) of this node in the in-order traversal of the BST. If there is no predecessor or successor, the value should be -1. The input to the problem starts with an integer n (1 le n le 10^5), which is the number of nodes in the BST. Then follow n integers v_1, v_2, ldots, v_n, where v_i is the value of the i-th node inserted into the BST in that order. Your task is to write a program that outputs n lines, each containing two integers. The i-th line should contain the predecessor and successor of v_i, or -1 if no such value exists. Example: Input: ``` 5 20 10 30 5 15 ``` Output: ``` -1 -1 -1 20 20 -1 -1 10 10 20 ``` Explanation: - The BST after insertion becomes: ``` 20 / 10 30 / 5 15 ``` - For the first inserted node `20`, there is no predecessor or successor, so the output is `-1 -1`. - For the second inserted node `10`, the predecessor is `-1` and the successor is `20`. - For the third inserted node `30`, the predecessor is `20` and there is no successor, so the output is `20 -1`. - For the fourth inserted node `5`, there is no predecessor, and the successor is `10`. - For the fifth inserted node `15`, the predecessor is `10` and the successor is `20`.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): Function to insert a new node with the given key in the BST. if root is None: return TreeNode(key) if key < root.val: root.left = insert(root.left, key) else: root.right = insert(root.right, key) return root def find_predecessor_successor(root, key): Function to find the predecessor and successor of a given key in BST. Returns a tuple (predecessor, successor) where both are set to -1 if they don\'t exist. successor, predecessor = None, None current = root # Find successor while current: if current.val > key: successor = current.val current = current.left else: current = current.right current = root # Find predecessor while current: if current.val < key: predecessor = current.val current = current.right else: current = current.left return (predecessor if predecessor is not None else -1, successor if successor is not None else -1) def bst_insertion_with_predecessor_successor(n, values): Function to insert nodes into the BST and print their predecessor and successor. root = None result = [] for value in values: pred, succ = find_predecessor_successor(root, value) result.append((pred, succ)) root = insert(root, value) return result def bst_predecessor_successor_repr(n, values): result = bst_insertion_with_predecessor_successor(n, values) return [f\\"{pred} {succ}\\" for pred, succ in result]"},{"question":"You are given a sequence of colorful beads arranged in a line. Each bead is colored with one of the `m` possible colors represented by integers from `1` to `m`. Your task is to find the length of the shortest contiguous substring that contains at least one bead of every color. The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of beads and the number of different colors, respectively. The second line contains `n` integers representing the colors of the beads, arranged in the order they appear. Print a single integer — the length of the shortest contiguous substring that contains at least one bead of every color. For example, for the input: ``` 7 3 1 2 1 3 2 1 3 ``` The correct output would be `3` because the substring `1 3 2` (starting from the 3rd bead and ending at the 5th bead) contains all three colors `[1, 2, 3]`.","solution":"def length_of_shortest_contiguous_substring(n, m, beads): Returns the length of the shortest contiguous substring that contains at least one bead of every color. from collections import defaultdict color_count = defaultdict(int) num_unique_colors = 0 min_length = float(\'inf\') left = 0 for right in range(n): color_right = beads[right] if color_count[color_right] == 0: num_unique_colors += 1 color_count[color_right] += 1 while num_unique_colors == m: min_length = min(min_length, right - left + 1) color_left = beads[left] color_count[color_left] -= 1 if color_count[color_left] == 0: num_unique_colors -= 1 left += 1 return min_length"},{"question":"You are given a string `s` consisting of lower case English letters and a number `d`. Your task is to check if it is possible to rotate the string such that no letter remains in the same position as its original position for more than `d` positions in the opposite direction. In other words, for each letter in the original string, it must be shifted at least `d` positions in either direction (left or right) to ensure it does not remain in its original position. For instance, if the string is \\"hello\\" and `d` is 3, you need to check if it is possible to rotate the string such that no letter `h`, `e`, `l`, or `o` stays within 3 positions of its original position `h`, `e`, `l`, or `o` respectively. # Input - The first line contains the string `s` with length `n` where `1 ≤ n ≤ 1000`. - The second line contains the integer `d` where `1 ≤ d < n`. # Output - Print `YES` if it is possible to rotate the string as specified. Otherwise, print `NO`. # Example Input: ``` hello 2 ``` Output: ``` YES ``` Input: ``` abcdef 4 ``` Output: ``` NO ``` # Explanation In the first example, with string \\"hello\\" and `d`=2: It is possible to rotate \\"hello\\" such that no letter remains within 2 positions of its original position, such as: - \\"lohel\\" (where h moves from index 0 to 4, e moves from 1 to 0, etc.) In the second example, with string \\"abcdef\\" and `d`=4: All possible rotations will result in at least one letter remaining within 4 positions of its original position, so the output is \\"NO\\".","solution":"def can_rotate(s, d): Check if it\'s possible to rotate the string `s` such that no letter remains in its original position within `d` distance. :param s: input string consisting of lower case English letters :param d: integer specifying the minimum distance any letter must be shifted :return: \\"YES\\" if possible, otherwise \\"NO\\" n = len(s) # We need to ensure that n is greater than 2 * d for a valid rotation if n > 2 * d: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a list of cities connected by roads in a country. A road connects exactly two cities, and every city is connected to at least one other city. The government wants to place security checkpoints at strategic cities to minimize the number of checkpoints while ensuring that every city can still be reached from at least one checkpoint. A city can be reached from a checkpoint if there is a direct road or a series of roads connecting them. The goal is to determine the minimum number of checkpoints and identify the cities where these checkpoints should be placed. # Input - The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000), representing the number of cities and the number of roads, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), indicating a bidirectional road between city `u` and city `v`. # Output - Output the minimum number of checkpoints needed. - Output a list of city numbers (1-based index) representing the placement of checkpoints. If there are multiple valid solutions, you may output any of them. # Example Input ``` 6 5 1 2 2 3 3 4 4 5 5 6 ``` Output ``` 2 3 6 ``` In the example, placing checkpoints at cities 3 and 6 ensures all cities are reached with the minimum number of checkpoints. Cities 1 and 2 can be reached through the road directly to city 3, and cities 4 and 5 can be reached by inclusion in the direct path between 3 and 6.","solution":"def find_security_checkpoints(n, roads): from collections import defaultdict # Adjacency list to store the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) checkpoints = [] def dfs(node): visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor) # Collect all connected components for city in range(1, n + 1): if not visited[city]: checkpoints.append(city) dfs(city) return len(checkpoints), checkpoints"},{"question":"A \\"Bar Code\\" is a pattern used to store and retrieve information. It consists of black and white bars of varying widths. For this problem, we define a bar code as a sequence of black and white bars with certain constraints. You\'re given a string representing a bar code, where \'0\' represents a white bar, and \'1\' represents a black bar. The bar code must adhere to the following rules: - Each black bar (\'1\') must be followed by at least one white bar (\'0\'). - No two consecutive black bars are allowed. Your task is to determine if the given string is a valid bar code. If the bar code is valid, print \\"VALID\\". Otherwise, print \\"INVALID\\". Input The input consists of a single string s (1 ≤ |s| ≤ 100), where each character is either \'0\' or \'1\'. Output Output a single string: \\"VALID\\" if the given bar code is valid, otherwise \\"INVALID\\". Examples Input: 0101010 Output: VALID Input: 110100 Output: INVALID Input: 100010 Output: VALID","solution":"def is_valid_bar_code(s): Determines if the given bar code string is valid. Parameters: s (str): The input bar code string. Returns: str: \\"VALID\\" if the bar code is valid, otherwise \\"INVALID\\". if s == \'\': return \\"INVALID\\" n = len(s) for i in range(n): if s[i] == \'1\': # If a \'1\' is not followed by a \'0\', it\'s invalid if i == n - 1 or s[i + 1] != \'0\': return \\"INVALID\\" return \\"VALID\\" # Testing with a sample function print(is_valid_bar_code(\'0101010\')) # Expected output: \\"VALID\\" print(is_valid_bar_code(\'110100\')) # Expected output: \\"INVALID\\" print(is_valid_bar_code(\'100010\')) # Expected output: \\"VALID\\""},{"question":"The hiking organizers have come up with a unique problem for participants. Given the trail system map of a national park, you need to determine if it is possible to start at a specific trailhead and visit all other trailheads exactly once before returning to the starting point (a Hamiltonian Cycle) using the provided trails. You are given `n` trailheads, labeled from 0 to n-1, and `m` bidirectional trails connecting these trailheads. Your task is to write a program that checks if there exists a Hamiltonian Cycle in the given trail system. # Input - The first line contains two integers, `n` (2 ≤ n ≤ 15) and `m` (1 ≤ m ≤ n*(n-1)/2) — the number of trailheads and the number of trails, respectively. - The next `m` lines each contain two integers `u` and `v` (0 ≤ u, v < n, u ≠ v) — indicating there is a trail connecting trailhead `u` and trailhead `v`. # Output - Print \\"YES\\" if there exists a Hamiltonian Cycle in the given trail system. - Otherwise, print \\"NO\\". # Example Input ``` 4 5 0 1 1 2 2 3 3 0 1 3 ``` Output ``` YES ``` # Note In the sample input provided, there is a Hamiltonian Cycle that can be represented as 0-1-2-3-0. Hence, the output is \\"YES\\".","solution":"def find_hamiltonian_cycle(n, edges): # Create an adjacency matrix from the edges graph = [[0] * n for _ in range(n)] for u, v in edges: graph[u][v] = 1 graph[v][u] = 1 def is_valid(v, pos, path): # Check if this vertex is an adjacency to the previous vertex if graph[path[pos - 1]][v] == 0: return False # Check if the vertex has already been included if v in path: return False return True def ham_cycle_util(path, pos): # All vertices are included in the path if pos == n: # And if there is an edge from the last vertex to the first vertex if graph[path[pos - 1]][path[0]] == 1: return True else: return False # Try different vertices as the next candidate in the Hamiltonian Cycle for v in range(1, n): if is_valid(v, pos, path): path[pos] = v if ham_cycle_util(path, pos + 1): return True # Remove current vertex if it does not lead to a solution path[pos] = -1 return False # Initialize the path array path = [-1] * n # Let the starting vertex be 0 path[0] = 0 if not ham_cycle_util(path, 1): return \\"NO\\" return \\"YES\\" def hamiltonian_cycle(n, m, connections): edges = [(connections[i][0], connections[i][1]) for i in range(m)] return find_hamiltonian_cycle(n, edges)"},{"question":"A company is organizing a hackathon event and wants to distribute the prizes among participants. There are n participants in the event, and each participant has a score s_i representing their performance. The organizers want to distribute exactly k prizes following these rules: 1. Each participant can receive only one prize. 2. A participant can receive a prize if and only if their score is among the top k scores. 3. If multiple participants have the same score which is among the top k scores, distribute the prizes to all participants with that score. Can you help the organizers determine the minimum number of different prizes they need to prepare? The first line contains two integers n and k (1 le n le 10^5, 1 le k le n) — the number of participants and the number of prizes. The second line contains n integers s_1, s_2, ldots, s_n (1 le s_i le 10^6) — the scores of the participants. Output a single integer — the minimum number of different prizes needed. For example, in a scenario where participants\' scores are [100, 90, 90, 75, 60] and k = 3, the top 3 scores are 100, 90, and 90. Hence, three prizes are necessary for two unique scores.","solution":"def minimum_prizes(n, k, scores): Returns the minimum number of different prizes needed to be prepared. Parameters: n (int): Number of participants k (int): Number of prizes scores (list of int): Scores of the participants Returns: int: Minimum number of different prizes needed # Sorting scores in descending order scores.sort(reverse=True) # To determine the minimum number of different prizes different_prizes = 1 for i in range(1, k): if scores[i] != scores[i - 1]: different_prizes += 1 return different_prizes"},{"question":"You are given an array of positive integers. Your task is to find such a subsequence of this array that the difference between the maximum and minimum element in this subsequence is exactly `d` for a given positive integer `d`. Formally, given an array `a` and an integer `d`, you need to find a subsequence `a\'[i1, i2, ..., ik]` where `a\'[j]` is an element of `a` and the array `a\'[i1, i2, ..., ik]` satisfies: max(a\'[i1, i2, ..., ik]) - min(a\'[i1, i2, ..., ik]) = d If multiple such subsequences exist, you can print any one of them. If no such subsequence exists, print `-1`. The first line of the input contains two integers `n` and `d` (1 le n le 200000, 1 le d le 10^9) — the number of elements in the array and the required difference. The second line contains `n` positive integers a_i (1 le a_i le 10^9) — the elements of the array. Output a subsequence whose maximum and minimum difference is exactly `d`. If no such subsequence exists, print `-1`. # Example _Input_ ``` 5 2 1 3 5 7 9 ``` _Output_ ``` 1 3 ```","solution":"def find_subsequence_with_difference(n, d, arr): Finds a subsequence a\'[i1, i2, ..., ik] such that max(a\'[i1, i2, ..., ik]) - min(a\'[i1, i2, ..., ik]) = d. Parameters: n (int): Number of elements in the array. d (int): The required difference between the maximum and minimum element of the subsequence. arr (list of int): The input array. Returns: list of int: A subsequence that satisfies the condition, or [-1] if no such subsequence exists. arr_set = set(arr) for num in arr: if (num + d) in arr_set: return [num, num + d] return [-1]"},{"question":"You are given a string containing characters of only three types: \'(\', \')\', and \'*\'. Write a function to check if the string is valid. The string is considered valid if: 1. Any open parenthesis \'(\' must have a corresponding close parenthesis \')\'. 2. Any close parenthesis \')\' must have a corresponding open parenthesis \'(\'. 3. \'(\' must be before the corresponding \')\'. 4. \'*\' could be treated as a single right parenthesis \')\' or a single left parenthesis \'(\' or an empty string. Note that an empty string is also considered valid. Write a function `checkValidString(s: str) -> bool` that determines if the string is valid. # Example: __Input:__ `s = \\"(*))\\"` __Output:__ `True` __Explanation:__ One possible way to interpret s is `(()))` which is valid. # Constraints: - The length of the input string will not exceed 100. # Function Signature ```python def checkValidString(s: str) -> bool: pass ``` # Your Task: Implement the function `checkValidString` using any programming language of your choice.","solution":"def checkValidString(s: str) -> bool: Determines if the input string is valid according to the defined rules. :param s: A string containing the characters \'(\', \')\' and \'*\' :return: Boolean indicating if the string is valid # Initialize two counters for open parenthesis low = 0 # Minimum number of open parenthesis needed high = 0 # Maximum number of open parenthesis that could be validly closed in the future for char in s: if char == \'(\': low += 1 high += 1 elif char == \')\': if low > 0: low -= 1 high -= 1 else: # Char is \'*\' if low > 0: low -= 1 high += 1 # If at any point the high counter drops below zero, return False if high < 0: return False # Finally, return True if low is zero, which means all open parens are closed return low == 0"},{"question":"You are given a binary tree rooted at node 1. The tree has n nodes and each node is assigned a value from 1 to n. Your task is to compute the sum of the values of nodes at the same depth level, for each depth level from root to the deepest node in the tree. The first line contains an integer n (1 leq n leq 10^5) - the number of nodes in the tree. Each of the next n - 1 lines contains two integers u and v (1 leq u, v leq n) representing an edge between node u and node v in the tree. Output the sum of the values of nodes at each depth level, starting from the root level. Example: ``` Input: 5 1 2 1 3 3 4 3 5 Output: 1 5 9 ``` Explanation: - Depth 0: Node 1 -> Sum = 1 - Depth 1: Nodes 2, 3 -> Sum = 2 + 3 = 5 - Depth 2: Nodes 4, 5 -> Sum = 4 + 5 = 9","solution":"def sum_at_each_depth(n, edges): from collections import defaultdict, deque # Create an adjacency list for the tree graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Perform a BFS to calculate the sum at each depth sums = [] queue = deque([(1, 0)]) # (node, depth) visited = set([1]) while queue: node, depth = queue.popleft() if depth == len(sums): sums.append(0) sums[depth] += node for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, depth + 1)) return sums"},{"question":"Mona loves baking cookies and wants to create a coding challenge for other baking enthusiasts. In this challenge, participants will need to simulate the baking process and manage their ingredients efficiently. Mona has an inventory of ingredients and a set of cookie recipes, each with specified quantities of ingredients required. Mona can attempt to bake any number of cookies as long as she has sufficient ingredients to follow the recipes. The goal is to determine the maximum number of cookies Mona can bake given her inventory and the recipes. # Problem Statement You are given a list of ingredients each with a certain available quantity, and a list of recipes where each recipe specifies the amount required for each ingredient. The task is to compute the maximum number of cookies that can be baked. Input - The first line contains a single integer ( m ) (1 ≤ ( m ) ≤ 1000), the number of different ingredients. - The second line contains ( m ) space-separated integers ( a_1, a_2, ..., a_m ) (0 ≤ ( a_i ) ≤ 10^6), where ( a_i ) is the available quantity of the i-th ingredient. - The third line contains a single integer ( r ) (1 ≤ ( r ) ≤ 100), the number of different recipes. - Each of the next ( r ) lines contains ( m ) space-separated integers ( b_{i1}, b_{i2}, ..., b_{im} ) (0 ≤ ( b_{ij} ) ≤ 1000), the quantities of each ingredient required for the i-th recipe. Output Print a single integer, the maximum number of cookies that can be baked. # Example Input ``` 3 100 200 300 2 2 3 5 1 1 1 ``` Output ``` 50 ``` # Note In the example, Mona has 100 units of the first ingredient, 200 units of the second, and 300 units of the third. She has two recipes: - The first recipe requires 2 units of the first ingredient, 3 units of the second, and 5 units of the third. - The second recipe requires 1 unit of each ingredient. The most cookies Mona can bake with the first recipe is min(100/2, 200/3, 300/5) = 20. With the second recipe, she can bake min(100/1, 200/1, 300/1) = 100 cookies. The overall maximum is determined by picking the recipe that yields the highest number of cookies, which is 100 cookies using the second recipe.","solution":"def max_cookies(m, available, r, recipes): # Function to compute the maximum number of cookies max_cookies_possible = 0 for recipe in recipes: min_cookies_with_current_recipe = float(\'inf\') for i in range(m): if recipe[i] > 0: min_cookies_with_current_recipe = min(min_cookies_with_current_recipe, available[i] // recipe[i]) else: # If the recipe doesn\'t require this ingredient min_cookies_with_current_recipe = min(min_cookies_with_current_recipe, float(\'inf\')) max_cookies_possible = max(max_cookies_possible, min_cookies_with_current_recipe) return max_cookies_possible # Example usage: m = 3 available = [100, 200, 300] r = 2 recipes = [ [2, 3, 5], [1, 1, 1] ] print(max_cookies(m, available, r, recipes)) # Output should be 100"},{"question":"You are given an array of integers representing weights of different items. Your objective is to place these items into two bins such that the difference between the total weight of the items in the two bins is minimized. Write a program that will compute the minimum possible difference between the sums of the weights of items in the two bins. The first line contains a single integer n (1 ≤ n ≤ 20) — the number of items. The second line contains n space-separated integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the items. Print a single integer — the minimum possible difference between the sums of the weights of the items in the two bins. Example: Input: 5 5 8 6 4 3 Output: 0 Explanation: One possible way to partition the items is {5, 8} and {6, 4, 3}, which gives sums 13 and 13, respectively. Hence, the difference between the sums is 0.","solution":"def minimum_difference_partition(n, weights): Returns the minimum possible difference between the sums of weights of items divided into two bins. from itertools import combinations total_sum = sum(weights) min_diff = float(\'inf\') for i in range(n + 1): for comb in combinations(weights, i): current_sum = sum(comb) diff = abs(total_sum - 2 * current_sum) min_diff = min(min_diff, diff) return min_diff # Example: n = 5 weights = [5, 8, 6, 4, 3] print(minimum_difference_partition(n, weights)) # Output: 0"},{"question":"You are given an array of n integers, which can be either positive, negative, or zero. You can perform any number of the following operations: pick any element in the array and duplicate it (i.e., copy it and add the copy to the array). The task is to determine the minimum number of operations required to make the sum of the elements in the array non-negative. Single line of the input contains an integer n (1 ≤ n ≤ 1000) followed by n integers - a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000). Output a single integer, which is the minimum number of operations required to make the sum of the array non-negative, or \\"-1\\" (without quotes) if it is impossible. Example input: 3 -3 -2 -1 Output: 3 Example input: 4 0 -1 -2 3 Output: 0 Explanation: In the first example, you can duplicate the -3 two times and the -2 one time to make the sum non-negative: (-3) + (-2) + (-1) + (-3) + (-3) + (-2) = -14 + 6 = -8, which is still negative. Duplicating the original elements further even realises that it’s impossible to get a non-negative sum eventually because every duplicated sum ends up being negative or zero due to ongoing subtraction. In the second example, the sum is already 0 which is non-negative, hence no operations are required.","solution":"def min_operations_to_non_negative_sum(n, arr): Determines the minimum number of duplicate operations required to make the sum of the array non-negative. Returns the minimum number of operations, or -1 if impossible. current_sum = sum(arr) if current_sum >= 0: return 0 total_sum = sum(arr) if total_sum >= 0: return 0 return abs(total_sum)"},{"question":"A small village wants to organize a festival with various events. There are `n` villagers, and each villager wants to attend exactly one event if possible. However, not all villagers are friends with each other. A villager will only attend an event if at least one of their friends is also attending that event. The village can organize `m` different events, and each villager has a list of friends. Each friend pair is bidirectional, meaning if villager `a` is friends with villager `b`, then villager `b` is also friends with villager `a`. Your task is to determine the minimum number of events that need to be organized so that each villager can attend exactly one event under the given constraints. Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100). - The next `n` lines each contain the list of friends for each villager in the format: - The i-th line starts with an integer `k` (0 ≤ k ≤ n-1) representing the number of friends villager `i` has. - It is followed by `k` integers which are the indices (0-based) of the friends of villager `i`. Output - Output a single integer representing the minimum number of events needed. Examples # Example 1: ``` Input: 4 2 2 1 2 2 0 2 2 0 1 0 Output: 2 ``` Explanation: - The villagers can be divided into two events: {1, 2} and {0, 3}. # Example 2: ``` Input: 3 3 2 1 2 1 0 1 0 Output: 1 ``` Explanation: - All villagers are friends with each other. Only one event is required. # Example 3: ``` Input: 5 2 1 1 2 0 2 2 1 4 0 1 2 Output: 2 ``` Explanation: - The villagers can be divided into two events: {0, 1, 2} and {3, 4}. Feel free to use any programming language for the implementation, but ensure that your code is efficient given the constraints.","solution":"def minimum_events_to_organize(n, m, friendships): from collections import deque def bfs(start, visited, adj_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Create adjacency list adj_list = [[] for _ in range(n)] for i, friends in enumerate(friendships): for friend in friends: adj_list[i].append(friend) adj_list[friend].append(i) visited = [False] * n components = 0 # Find connected components for i in range(n): if not visited[i]: bfs(i, visited, adj_list) components += 1 # Number of events cannot be more than the number of villagers return min(components, m)"},{"question":"Implement a function that takes a binary string representation of a compact quantum state, applies a Hadamard gate on each qubit, and then measures the state to collapse it into a classical binary string. The function should have the following signature: ```python def apply_hadamard_and_measure(binary_string: str) -> str: pass ``` # Input - A binary string `binary_string`, where each character is either \'0\' or \'1\'. The length of the string represents the number of qubits. # Output - A string of the same length as `binary_string`, representing the classical outcome after the Hadamard transformation and measurement. # Description 1. Each character in the `binary_string` represents the state of a qubit (either `0` or `1`). 2. Apply a Hadamard gate to each qubit, resulting in a superposition of states. 3. Measure the quantum state, which collapses the superposition into a classical binary string. # Example ```python binary_string = \\"101\\" result = apply_hadamard_and_measure(binary_string) print(result) # Example output: \\"011\\" ``` Note: Due to the probabilistic nature of quantum measurement, repeated measurements might yield different outcomes.","solution":"import numpy as np def apply_hadamard_and_measure(binary_string: str) -> str: Applies the Hadamard gate to each qubit in the initial binary string and measures the result. Due to the nature of quantum measurement, this is simulated by random outcomes in Hadamard basis. n_qubits = len(binary_string) measured_bits = np.random.choice([\'0\', \'1\'], size=n_qubits) return \'\'.join(measured_bits)"},{"question":"You are given a grid of size m x n filled with non-negative integers representing the height of a platform. Suppose rainwater can fall at any point of the grid. Water will collect in the dips between the heights, assuming the border of the grid prevents water from flowing out. Write a function that calculates the total volume of water that can be trapped in the grid after it rains. For example, given the following grid: ``` [ [1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1] ] ``` The total volume of water trapped is 4 units (considering water can accumulate between platforms without spilling over beyond the edges of the grid). Function signature: ```python def trapRainWater(heightMap: List[List[int]]) -> int: pass ``` # Constraints: - m == heightMap.length - n == heightMap[i].length - 1 <= m, n <= 200 - 0 <= heightMap[i][j] <= 1000 # Sample Input: ```python heightMap = [ [1, 4, 3, 1, 3, 2], [3, 2, 1, 3, 2, 4], [2, 3, 3, 2, 3, 1] ] ``` # Sample Output: ```python 4 ``` Your task is to implement the `trapRainWater` function to return the total volume of water that can be trapped in this grid. **Note:** You may assume all four edges of the grid are open and rainwater cannot escape from those boundary edges.","solution":"import heapq def trapRainWater(heightMap): if not heightMap or not heightMap[0]: return 0 m, n = len(heightMap), len(heightMap[0]) visited = [[False] * n for _ in range(m)] min_heap = [] # Initialize the heap with the boundary cells for i in range(m): for j in range(n): if i == 0 or i == m-1 or j == 0 or j == n-1: heapq.heappush(min_heap, (heightMap[i][j], i, j)) visited[i][j] = True directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] water_trapped = 0 while min_heap: height, x, y = heapq.heappop(min_heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]: water_trapped += max(0, height - heightMap[nx][ny]) heapq.heappush(min_heap, (max(height, heightMap[nx][ny]), nx, ny)) visited[nx][ny] = True return water_trapped"},{"question":"Oliver is working on a binary string problem. He has a binary string `s` of length `n` (1 ≤ n ≤ 10^5) composed of characters \'0\' and \'1\'. He can perform the following operation any number of times (including zero): choose a substring of length exactly k (1 ≤ k ≤ n) and reverse it. The goal is to make the binary string a palindrome. A palindrome is a string that reads the same forwards and backwards. Write a function that determines if it is possible to make the string `s` a palindrome using the described operation any number of times. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". The first line contains two integers `n` and `k` (1 ≤ k ≤ n) — the length of the string and the length of the substring to reverse. The second line contains a binary string `s` of length `n`. # Example Input 6 2 100110 Output YES Explanation By reversing the substring \\"00\\" (located from index 2 to 3), the string becomes \\"110110\\", and then by reversing the substring \\"11\\" (located from index 1 to 2), the string becomes \\"110011\\", which is a palindrome.","solution":"def can_be_palindrome(n, k, s): Determines if the binary string s of length n can be transformed into a palindrome by reversing substrings of length k. # If k = 1, checking if the string is a palindrome in its original form is enough if k == 1: if s == s[::-1]: return \\"YES\\" else: return \\"NO\\" # For k > 1, it is always possible to make the string a palindrome return \\"YES\\""},{"question":"A robot is navigating a grid and needs to reach a target destination from its starting point. The grid is represented by a 2D array of size n times m where some cells contain obstacles and others are free. The robot can move up, down, left, or right but cannot move diagonally. The robot cannot pass through cells containing obstacles. Given the grid, find the shortest path from the starting cell to the target cell. If there is no such path, return -1. The grid is represented by an array where \'1\' represents an obstacle and \'0\' represents a free cell. The input consists of: - The first line contains two integers n and m (1 leq n, m leq 1000), the number of rows and columns in the grid. - The next n lines each contain m integers (either \'0\' or \'1\'), representing the grid. - The following line contains four integers, sx, sy, tx, ty (0 leq sx, sy, tx, ty < n), representing the coordinates of the starting and target cells respectively. Output the length of the shortest path from the starting cell to the target cell. If there is no such path, return -1. **Example:** ``` Input: 5 5 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 4 4 Output: 8 ``` In this example, the shortest path has length 8. The robot would navigate as follows: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (2,3) -> (2,4) -> (3,4) -> (4,4).","solution":"from collections import deque def shortest_path(grid, n, m, sx, sy, tx, ty): Finds the shortest path from (sx, sy) to (tx, ty) in a grid where \'1\' is an obstacle and \'0\' is free space. Parameters: - grid (list of list of int): 2D grid representing the map. - n (int): Number of rows in the grid. - m (int): Number of columns in the grid. - sx (int): Starting x-coordinate. - sy (int): Starting y-coordinate. - tx (int): Target x-coordinate. - ty (int): Target y-coordinate. Returns: - int: Length of the shortest path from (sx, sy) to (tx, ty), or -1 if no path exists. if sx == tx and sy == ty: return 0 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: if nx == tx and ny == ty: return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Imagine you are responsible for managing a parking lot on campus. The parking lot has multiple levels, and each level can accommodate a certain number of cars. The parking lot operates on a first-come, first-served basis, and cars need to park on the lowest possible level with available space. Today you have a list of cars arriving at the parking lot. Each car arrives at a specific time, and you want to know how efficiently you can park the cars. The parking lot can be represented as an array where each element denotes the capacity of a level (number of parking spots available). You will receive a list of car arrivals, each with the time they arrive and the time they will depart, measured in minutes from the start of the day. A car will occupy a parking spot from the time it arrives to the time it departs. Initially, the parking lot is empty, and you need to find whether each car can be parked according to the rules, and if so, the level on which the car will be parked. The first line contains an integer m (1 ≤ m ≤ 100) — the number of levels in the parking lot. The second line contains m integers, where the i-th integer denotes the capacity of the i-th level. The third line contains an integer n (1 ≤ n ≤ 2000) — the number of cars arriving at the parking lot. The next n lines contain two integers t_arr and t_dep (0 ≤ t_arr < t_dep ≤ 1440) — the arrival time and departure time of each car. Print \\"YES\\" if each car can be parked, followed by the level number where each car will be parked. Otherwise, print \\"NO\\". Example: Input: 3 2 3 1 4 0 30 5 25 10 40 20 100 Output: YES 1 1 2 2 Explanation: - The first car arrives at time 0 and parks on level 1. - The second car arrives at time 5 and parks on level 1. - The third car arrives at time 10 and parks on level 2. - The fourth car arrives at time 20 and parks on level 2. If at any point a car cannot be parked due to full capacity, the output should be \\"NO\\".","solution":"def can_park_all_cars(m, capacities, n, car_times): parking_state = [[0] * c for c in capacities] # create parking state per level car_positions = [] for t_arr, t_dep in car_times: parked = False for level in range(m): for spot in range(capacities[level]): if parking_state[level][spot] <= t_arr: parking_state[level][spot] = t_dep car_positions.append(level + 1) parked = True break if parked: break if not parked: return False, [] return True, car_positions"},{"question":"You are given a string s consisting of n lowercase Latin letters. Your task is to transform this string into a palindrome with the minimum number of changes. In one change, you can replace any character of the string with any other lowercase Latin letter. A palindrome is a string that reads the same backward as forward. Write a function that takes a string s as input and calculates the minimum number of changes required to transform it into a palindrome. Input: - The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the length of the string s. - The second line of the input contains a string s of length n. Output: - Print a single integer — the minimum number of changes required to transform the string s into a palindrome. Example: Input: ``` 6 abccba ``` Output: ``` 0 ``` Input: ``` 5 abcde ``` Output: ``` 2 ``` Explanation: - In the first example, the string \\"abccba\\" is already a palindrome, so no changes are needed. - In the second example, you can change \'a\' to \'e\' and \'b\' to \'d\' to make it \\"edcde\\", which is a palindrome. Hence, 2 changes are needed.","solution":"def min_changes_to_palindrome(n, s): Returns the minimum number of changes required to transform the string s into a palindrome. :param n: Length of the string s :param s: The input string :return: Minimum number of changes required changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"A software startup manages a collection of servers that each perform a series of tasks. The server logs contain information about the tasks completed. Each log entry records the start and end times of the tasks. Given the log entries, they want to find the maximum number of tasks that are running at the same time. Each log is represented by a pair of integers (start_time, end_time) that denote the start and the end times of a task. The times are given in a 24-hour format (from 0 to 23). The start time is inclusive and the end time is exclusive. For example, a task with a log (2, 5) means it starts at 2:00 and ends before 5:00. Write a function that takes a list of such log entries and returns the maximum number of concurrent tasks. **Function Signature:** ```python def max_concurrent_tasks(logs: List[Tuple[int, int]]) -> int: ``` **Input:** - A list of tuples representing the log entries. Each tuple contains two integers, start_time and end_time. **Output:** - An integer representing the maximum number of tasks that are running at the same time. **Example:** ```python logs = [(1, 4), (2, 5), (7, 9), (3, 6)] print(max_concurrent_tasks(logs)) # Output: 3 logs = [(0, 2), (2, 4), (4, 6)] print(max_concurrent_tasks(logs)) # Output: 1 ``` **Explanation:** - In the first example, the task intervals overlap as follows: - Task 1: (1, 4) - Task 2: (2, 5) - Task 3: (7, 9) - Task 4: (3, 6) At time = 3, the overlapping tasks are tasks 1, 2, and 4, making it a total of 3 concurrent tasks. Hence, the function returns 3. - In the second example, all tasks do not overlap with each other. Therefore, the maximum number of concurrent tasks is 1.","solution":"def max_concurrent_tasks(logs): events = [] for start, end in logs: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events first by time, then by event type (\'end\' before \'start\' if same time) events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_concurrent = 0 current_concurrent = 0 for time, event_type in events: if event_type == \'start\': current_concurrent += 1 max_concurrent = max(max_concurrent, current_concurrent) else: current_concurrent -= 1 return max_concurrent"},{"question":"You are given a grid of size n x m filled with integers. You need to find the maximum sum of a subgrid of size k x l. A subgrid is any contiguous rectangular area in the grid. Note that k ≤ n and l ≤ m. The first line contains four integers n, m, k, and l (1 ≤ k ≤ n ≤ 100, 1 ≤ l ≤ m ≤ 100) — the dimensions of the grid and the subgrid. The next n lines each contain m integers, representing the elements of the grid, where each integer is between -100 and 100 inclusive. The output should contain one integer — the maximum sum of a subgrid of size k x l. To find the maximum sum subgrid, you can use a sliding window approach, where you calculate the sum of each possible k x l subgrid and keep track of the maximum sum encountered. For instance: Input: 3 3 2 2 1 2 3 4 5 6 7 8 9 The subgrid with maximum sum would be: 5 6 8 9 The sum is 28. Output: 28","solution":"def max_sum_subgrid(n, m, k, l, grid): Returns the maximum sum of a k x l subgrid within the n x m grid. def subgrid_sum(x, y): Returns sum of elements in k x l subgrid whose top-left corner is at (x, y). total = 0 for i in range(k): for j in range(l): total += grid[x + i][y + j] return total max_sum = float(\'-inf\') for i in range(n - k + 1): for j in range(m - l + 1): curr_sum = subgrid_sum(i, j) if curr_sum > max_sum: max_sum = curr_sum return max_sum"},{"question":"A company has several warehouses spread across different locations on a 2D plane. Each warehouse stores the same type of cargo and a company-owned truck travels at a constant speed. The truck starts its journey at one warehouse and needs to visit another warehouse to pick up an urgent delivery. Given the coordinates of the starting warehouse, the coordinates of other available warehouses, and the truck\'s speed, compute the minimum time required for the truck to reach any of the other warehouses. Assume that the truck will move directly from the starting warehouse to the destination warehouse with the maximum possible speed. The first line of input contains two integers `x0` and `y0` ( -100 ≤ x0, y0 ≤ 100 ) — coordinates of the starting warehouse. The second line contains a single integer `m` ( 1 ≤ m ≤ 1000 ) — the number of other available warehouses. The next `m` lines each contain two integers xi and yi ( -100 ≤ xi, yi ≤ 100 ) — coordinates of the i-th warehouse. The last line contains one integer `v` ( 1 ≤ v ≤ 100 ) — the speed of the truck. Print a single real value — the minimum time the truck needs to reach any of the other warehouses. Your answer will be considered correct if its absolute or relative error does not exceed 10⁻⁶. **Example Input:** ``` 0 0 3 3 4 -1 -1 -3 4 2 ``` **Example Output:** ``` 2.0 ``` **Explanation:** The distances from the starting warehouse (0, 0) to other warehouses are calculated as follows: - Distance to (3, 4) is 5 units; at speed 2, it takes 2.5 time units. - Distance to (-1, -1) is approximately 1.414 units; at speed 2, it takes approximately 0.707 time units. - Distance to (-3, 4) is 5 units; at speed 2, it takes 2.5 time units. Thus, the minimum time to reach another warehouse is approximately 0.707 time units.","solution":"import math def minimum_time_to_reach_warehouse(x0, y0, warehouse_coords, v): Computes the minimum time required for the truck to reach any of the other warehouses. Parameters: x0, y0 (int): Coordinates of the starting warehouse warehouse_coords (list of tuples): List of tuples containing coordinates of other warehouses v (int): Speed of the truck Returns: float: Minimum time required to reach any warehouse min_time = float(\'inf\') for x, y in warehouse_coords: distance = math.sqrt((x - x0) ** 2 + (y - y0) ** 2) time = distance / v if time < min_time: min_time = time return min_time"},{"question":"You are given an integer array containing both positive and negative numbers. Your task is to determine whether there exists a subset whose sum is zero. The first line of input contains a single integer t (1 le t le 100), the number of test cases. The first line of each test case contains an integer n (1 le n le 100), the size of the array. The second line of each test case contains n integers: a_1, a_2, dots, a_n (-10^5 le a_i le 10^5), the elements of the array. For each test case, print \\"YES\\" if there exists a non-empty subset of the array whose sum is zero, otherwise print \\"NO\\". # Example Input: ``` 3 4 1 2 -3 4 3 1 2 3 5 -1 1 -1 1 0 ``` Output: ``` YES NO YES ``` # Explanation - For the first test case, the subset {1, 2, -3} sums up to zero. - For the second test case, no subset can sum up to zero. - For the third test case, the subset {-1, 1} sums up to zero, as does the subset {0}.","solution":"def subset_sum_zero_exists(arr): Returns whether there exists a subset of the array `arr` whose sum is zero. n = len(arr) prefix_sums = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\" def process_test_cases(num_cases, test_cases): results = [] for case in test_cases: results.append(subset_sum_zero_exists(case)) return results"},{"question":"You are given an array of integers and a target integer. Your task is to write a function that returns all distinct pairs of integers from the array that add up to the target integer. Each pair should be returned as an array of two integers [a, b], with a <= b. The pairs themselves should be output in ascending order based on the first element of the pair, and in case of a tie, on the second element. For example, the pair (2, 3) should be represented as [2, 3] and the pair (3, 2) should also be represented as [2, 3]. Write a function that takes two inputs: 1. `nums` — an array of integers. 2. `target` — an integer representing the target sum. Your function should return a list of lists, where each inner list represents a pair of integers that add up to the target sum, in the required order. **Example usage:** ```python def find_pairs(nums, target): # Your code goes here # Example 1 nums = [1, 2, 3, 4, 3] target = 6 print(find_pairs(nums, target)) # Output: [[2, 4], [3, 3]] # Example 2 nums = [1, 5, 1, 5, 3] target = 6 print(find_pairs(nums, target)) # Output: [[1, 5], [1, 5]] # Example 3 nums = [2, 4] target = 6 print(find_pairs(nums, target)) # Output: [[2, 4]] ``` **Constraints:** - The length of `nums` can be as large as 10^5. - Each integer in `nums` and `target` can be as large as 10^9.","solution":"def find_pairs(nums, target): Returns all distinct pairs of integers from the array that add up to the target integer. Each pair should be in the form [a, b] where a <= b. # Dictionary to store occurrences of each number seen = {} # Set to store unique pairs pairs = set() for num in nums: complement = target - num # Check if complement is in seen if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) # Add the number to the dictionary seen[num] = seen.get(num, 0) + 1 # Convert set to list of pairs in sorted order return sorted(list(map(list, pairs)))"},{"question":"You have a row of candies arranged in a line, and each candy has a certain sweetness value. The game is played by Alice and Bob, where Alice always takes the first turn. The players take turns picking candies from either end of the row. The goal for each player is to maximize the total sweetness value of the candies they collect by the end of the game. Given the array of integers representing the sweetness values of the candies, write a program to calculate the maximum sweetness value Alice can achieve if both players play optimally. Input: - An integer n (1 ≤ n ≤ 1000) — the number of candies. - A list of n integers a[i] (1 ≤ a[i] ≤ 1000) — the sweetness values of the candies in the order they are arranged. Output: - A single integer — the maximum total sweetness value Alice can achieve. For example: ``` Input: 4 1 5 3 7 Output: 12 ``` In this case, Alice can start by picking the candy with sweetness value 1. Bob will then pick 7. Alice will pick 5 next, leaving Bob with the candy valued at 3. Alice\'s total sweetness value would be 1 + 5 + 7 = 13, which is the optimal total if both players play such a way to maximize their own total sweetness value.","solution":"def max_sweetness(n, candies): # Helper function for the dynamic programming approach def dp(i, j, turn): if i > j: return 0 if memo[i][j][turn] != -1: return memo[i][j][turn] if turn == 1: # Alice\'s turn choice1 = candies[i] + dp(i + 1, j, 0) choice2 = candies[j] + dp(i, j - 1, 0) result = max(choice1, choice2) else: # Bob\'s turn choice1 = dp(i + 1, j, 1) choice2 = dp(i, j - 1, 1) result = min(choice1, choice2) memo[i][j][turn] = result return result memo = [[[-1 for _ in range(2)] for _ in range(n)] for _ in range(n)] return dp(0, n - 1, 1)"},{"question":"You are given `n` tasks that need to be scheduled to run on a single core CPU. Each task has a start time, a duration, and a deadline by which it must be completed. The CPU can only process one task at a time, but it can switch between tasks, preempting the current task to run another task. Write a function `minimize_missed_deadlines(n, tasks)` that attempts to minimize the number of missed deadlines. The function should return the minimum number of tasks that miss their deadlines. The tasks list is an array of n tuples, where each tuple contains three integers `(start_time, duration, deadline)` representing the start time, duration, and deadline of each task respectively. You can assume that all tasks have unique start times and deadlines. **Input:** - An integer `n` (1 ≤ n ≤ 100), the number of tasks. - A list of `n` tuples, `tasks`, where each tuple `(start_time, duration, deadline)` represents a task. **Output:** - An integer denoting the minimized number of tasks that will miss their deadlines. **Example:** ```python def minimize_missed_deadlines(n, tasks): # Your code here # Example Input n = 3 tasks = [(0, 5, 10), (2, 3, 9), (6, 2, 15)] # Example Output print(minimize_missed_deadlines(n, tasks)) # Output should be 0 or 1 ``` # Constraints: - 1 ≤ n ≤ 100 - 0 ≤ `start_time` < `deadline` ≤ 10^6 - 1 ≤ `duration` ≤ 10^6 Make sure to use efficient algorithms to handle the input size within the given constraints. Avoid brute-force solutions as they may not run within the time limits for larger input sizes.","solution":"def minimize_missed_deadlines(n, tasks): # Sort tasks by their deadlines first, then by start time tasks = sorted(tasks, key=lambda x: (x[2], x[0])) current_time = 0 missed_deadlines = 0 for start_time, duration, deadline in tasks: if start_time > current_time: current_time = start_time if current_time + duration <= deadline: current_time += duration else: missed_deadlines += 1 return missed_deadlines"},{"question":"You are given a string `s` of length `n` consisting of lowercase English letters. You need to perform the following operation until the string becomes empty: choose some consecutive substring that is a palindrome, erase it from the string, and glue together the remaining parts. For example, if you erase the palindrome \\"aba\\" from the string \\"abacaba\\", the resulting string will be \\"cba\\". For each palindrome you erase, you get points equal to its length squared. Your task is to maximize the total points by strategically choosing the palindromic substrings to erase. Input: - The first line contains one integer `n` (`1 <= n <= 100`), the length of the string `s`. - The second line contains the string `s`, consisting of lowercase English letters. Output: - Print one integer — the maximum total points you can get. Example: Input: ``` 7 abacaba ``` Output: ``` 49 ``` Explanation: The optimal sequence of erasing is \\"abacaba\\" (erase the entire string, as it is a palindrome). Input: ``` 8 aabbbbaa ``` Output: ``` 68 ``` Explanation: One of the optimal sequences: 1. Erase \\"aabbbbaa\\" (whole string, points = 8^2 = 64) 2. Total points: 64 Note: To determine an optimal sequence, you may need to use a dynamic programming approach to keep track of possible scores for different substrings.","solution":"def max_palindromic_points(s): n = len(s) # dp[i][j] will store the maximum points we can get for the substring s[i:j+1] dp = [[0] * n for _ in range(n)] for length in range(1, n+1): for i in range(n - length + 1): j = i + length - 1 substring = s[i:j+1] if substring == substring[::-1]: dp[i][j] = length * length for k in range(i, j): dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j]) return dp[0][n-1]"},{"question":"Given a string `s`, you need to check if it is possible to rearrange the characters of the string such that no two adjacent characters are the same. If possible, output the rearranged string. If not possible, output \\"Not Possible\\". Your task is to write a function `rearrange_string(s)` that takes a string and returns the rearranged string or \\"Not Possible\\" if no valid rearrangement exists. **Input:** - A single string `s` (1 ≤ length of s ≤ 10^5) consisting of lowercase English letters. **Output:** - A single string which is a rearranged version of `s` such that no two adjacent characters are the same, or \\"Not Possible\\" if no such rearrangement is possible. **Examples:** 1. `rearrange_string(\\"aab\\")` should return `\\"aba\\"`. 2. `rearrange_string(\\"aaab\\")` should return `\\"Not Possible\\"`. **Explanation:** - In the first example, \\"aba\\" is a valid rearrangement of \\"aab\\" where no two adjacent characters are the same. - In the second example, it\'s impossible to rearrange \\"aaab\\" in a way that prevents two \'a\'s from being next to each other.","solution":"from collections import Counter import heapq def rearrange_string(s): Rearranges the characters of the string such that no two adjacent characters are the same if possible. Otherwise, returns \\"Not Possible\\". char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char rearranged_string = \'\'.join(result) if len(rearranged_string) != len(s): return \\"Not Possible\\" return rearranged_string"},{"question":"A sandbox simulation game features a world grid of dimensions h by w. Some cells of the grid are empty, whereas some cells contain obstacles that cannot be passed. A player starts at a specific cell in the grid and wants to reach a target cell. The player can move to any of the four adjacent cells (up, down, left, right) from their current position, provided those cells are empty and within the grid boundaries. Given the dimensions of the grid, the positions of obstacles, the starting position, and the target position, your task is to determine the minimum number of moves required for the player to reach the target cell. If it is impossible to reach the target, return -1. # Input - The first line contains two integers, h (1 ≤ h ≤ 1000) and w (1 ≤ w ≤ 1000), the height and width of the grid. - The next h lines each contain w characters representing the grid. The characters can be: - `\'.\'` for an empty cell, - `\'#\'` for an obstacle. - The next line contains two integers, sx and sy (0 ≤ sx, sy < h), the starting cell coordinates. - The final line contains two integers, tx and ty (0 ≤ tx, ty < h), the target cell coordinates. # Output - Output a single integer indicating the minimum number of moves required to reach the target cell. If it is impossible to reach the target cell, print -1. # Example ```plaintext 5 5 ..... ..#.. ..#.. ..#.. ..... 0 0 4 4 ``` Output: ```plaintext 8 ``` ```plaintext 5 5 . #...# #.#.# #...# . 0 0 4 4 ``` Output: ```plaintext -1 ``` # Notes - In the first example, the player can move around the obstacles to reach the target cell in 8 moves. - In the second example, it is impossible to reach the target cell since the obstacles block all possible paths.","solution":"from collections import deque def min_moves(h, w, grid, sx, sy, tx, ty): def is_valid(x, y): return 0 <= x < h and 0 <= y < w and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, moves = queue.popleft() if (x, y) == (tx, ty): return moves for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1"},{"question":"A new social media platform wants to analyze the activity level of its users. Each user\'s activity is represented by an integer array `activity` where `activity[i]` indicates the number of posts made by the i-th user in a given time period. To improve engagement, the platform decides to send a special notification to users who form a continuously active segment within the array. A continuously active segment is defined as a contiguous subarray where each user has made at least `k` posts. Your task is to find all the starting and ending indices (0-based) of these continuously active segments. # Input - The first line contains two integers `n` and `k` (1 ≤ n ≤ 200,000, 1 ≤ k ≤ 10^7) — the number of users and the minimum number of posts required to consider a user active. - The second line contains `n` integers representing the `activity` array (0 ≤ activity[i] ≤ 10^7). # Output - Print all pairs of starting and ending indices of continuously active segments, one pair per line. If there are no such segments, print \\"No active segments\\". # Example Input ``` 5 3 1 2 3 4 5 ``` Output ``` 2 4 ``` Explanation Only one segment [3, 4, 5] (indices 2 to 4) qualifies as all its elements are greater than or equal to 3. Input ``` 6 2 2 2 1 3 2 2 ``` Output ``` 0 1 3 5 4 5 ``` Explanation The segments [2, 2], [3, 2, 2], and [2, 2] qualify as those elements are greater than or equal to 2. Segment from 3 to 5 includes the elements [3, 2, 2], but individual valid segments within are [3, 2, 2] and [2, 2].","solution":"def find_active_segments(n, k, activity): results = [] start = 0 while start < n: while start < n and activity[start] < k: start += 1 if start >= n: break end = start while end < n and activity[end] >= k: end += 1 results.append((start, end - 1)) start = end return results if results else \\"No active segments\\""},{"question":"You are given a list of `n` unique positive integers. Your task is to find all pairs of integers within the list such that the absolute difference between them is equal to a given positive integer `d`. Write a function that takes two parameters: a list of integers `nums` and an integer `d`, and returns a list of pairs `(a, b)` where `a` and `b` are integers from the list `nums` such that `|a - b| = d`. # Input - A list of `n` unique positive integers `nums` ( 1 leq n leq 10^5 ) - A positive integer `d` ( 1 leq d leq 10^6 ) # Output - A list of tuples representing the pairs `(a, b)` such that `|a - b| = d`. The pairs should be sorted in lexicographical order. # Example ```python def find_pairs(nums, d): # Your code here # Example 1 nums = [1, 7, 5, 9, 2, 12, 3] d = 2 print(find_pairs(nums, d)) # Output: [(1, 3), (3, 5), (5, 7), (7, 9)] # Example 2 nums = [4, 1, 2] d = 1 print(find_pairs(nums, d)) # Output: [(1, 2), (2, 3)] # Example 3 nums = [10, 20, 30, 40, 50] d = 10 print(find_pairs(nums, d)) # Output: [(10, 20), (20, 30), (30, 40), (40, 50)] ``` # Constraints - The solution should run in O(n log n) time or better. - The input list `nums` is not sorted. - The output list should not have duplicate pairs, and each pair `(a, b)` should appear only once in the output list.","solution":"def find_pairs(nums, d): Find all pairs of integers in nums such that the absolute difference between them is equal to d. Args: nums (list of int): The list of unique positive integers. d (int): The absolute difference target. Returns: list of tuples: A list of pairs (a, b) where |a - b| = d, sorted lexicographically. num_set = set(nums) result = [] for num in nums: if (num + d) in num_set: result.append((num, num + d)) if (num - d) in num_set: result.append((num - d, num)) result = list(set(result)) # To remove duplicates in an (a, b) and (b, a) form. result.sort() return result"},{"question":"You are given a rectangular grid consisting of cells with a specific color: red, green, or blue. The grid is represented as an array of strings, where each string corresponds to a row of the grid, and each character in the string represents the color of a cell. The possible characters are \'R\' for red, \'G\' for green, and \'B\' for blue. You start from the top-left corner of the grid and your goal is to navigate to the bottom-right corner. You can move right or down, and you can only move if the cell you are moving to has the same color as your current cell. Determine if it is possible to reach the bottom-right corner from the top-left corner by performing a sequence of valid moves. The input contains the first line with two integers, m and n (1 ≤ m, n ≤ 50), representing the number of rows and columns of the grid, respectively. The next m lines each contain a string of n characters, representing the grid. Print \\"YES\\" if it is possible to reach the bottom-right corner from the top-left corner, otherwise print \\"NO\\". Example: ``` Input: 3 3 RGB GRG BBG Output: NO ``` ``` Input: 2 2 RR RR Output: YES ```","solution":"def can_reach_bottom_right(m, n, grid): def dfs(x, y): if x == m - 1 and y == n - 1: return True visited[x][y] = True directions = [(0, 1), (1, 0)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == grid[x][y] and not visited[nx][ny]: if dfs(nx, ny): return True return False visited = [[False] * n for _ in range(m)] if grid[0][0] == grid[m-1][n-1]: return dfs(0, 0) return False def solve(m, n, grid): if can_reach_bottom_right(m, n, grid): return \\"YES\\" return \\"NO\\""},{"question":"Alex has a passion for collecting coins of various denominations. He recently obtained a collection of coins and wants to organize them in a special way. Alex has m different types of coins, where each type i is characterized by its denomination di and the count of coins ci. Alex desires to keep x coins in a single row such that the sum of denominations of coins in the row is as large as possible. He can only use up to one coin of each type in the row. Given the denominations and counts of each coin type, help Alex find the maximum possible sum of denominations of coins that he can put in a single row of x coins. The first line contains two integers m and x (1 ≤ m ≤ 105, 1 ≤ x ≤ m) — the number of different types of coins and the number of coins Alex wants to place in a single row. Each of the next m lines contains two integers di and ci (-109 ≤ di ≤ 109, 1 ≤ ci ≤ 109) — the denomination and count of coins of the i-th type. In the first line, print a single integer — the maximum possible sum of denominations that Alex can achieve with exactly x coins in a row. In the second line, print x distinct integers q1, q2, ..., qx (1 ≤ qi ≤ m) — the indices of the coin types that Alex should choose to reach the maximum sum. If there are multiple answers, print any of them. For example, if m=5 and x=3, and the denominations and counts are: 5 3 2 1 7 2 4 5 6 2 The answer should be: 16 1 3 5","solution":"def max_sum_denominations(m, x, coin_info): Returns the maximum sum of denominations and the indices of coins that produce this sum given m types of coins and a row length of x. Parameters: m (int): The number of different types of coins x (int): The number of coins Alex wants to place in a single row coin_info (list of tuples): Each tuple contains (denomination, count) Returns: tuple: (maximum sum, list of indices) # Sorting the coins by denominations in descending order to maximize the sum sorted_coins = sorted(coin_info, key=lambda k: k[0], reverse=True) max_sum = 0 selected_indices = [] for i in range(x): max_sum += sorted_coins[i][0] selected_indices.append(sorted_coins[i][2]) # Append the original index return max_sum, selected_indices # Function to parse input and use the above logic def parse_and_solve(m, x, coin_data): coin_info = [(denom, count, idx + 1) for idx, (denom, count) in enumerate(coin_data)] return max_sum_denominations(m, x, coin_info)"},{"question":"A large corporation is processing a multitude of daily transactions, and they need your help implementing a system to track transaction trends and identify potential fraudulent activities. All transactions and queries regarding the transactions can be represented and handled as described below. There are t distinct types of transactions they are interested in, and each transaction type i has a unique identifier id_i. For each transaction type, there are specific categories they fall into, and each category c_j is associated with a certain risk factor r_j. From this point, routine operations of logging transactions and analyzing them can be represented as q queries of three types: 1. \\"+\\" id c: Log a new transaction of type id into category c. 2. \\"-\\" id: Remove the most recent transaction of type id. 3. \\"?\\" l r t: Calculate the total risk factor of transactions with identifiers between l and r (inclusive) for category t. Write a program that processes all these queries efficiently. The first line contains two integers t and q (1 le t le 1000; 1 le q le 1000) — the number of transaction types and the number of queries. The second line contains t integers id_1, id_2, dots, id_t (1 le id_i le 10000) — the unique identifiers of each transaction type. The third line contains m integers r_1, r_2, dots, r_m (1 le r_j le 100) — the risk factors of each category. The next q lines each contain one query in the above-mentioned format. For each query of the third type, output the total calculated risk factor. It\'s guaranteed that the number of logged transactions at any time does not exceed 2000. Example: ``` Input: 3 5 101 205 309 5 10 15 + 101 5 + 205 10 + 309 5 ? 101 205 5 - 101 Output: 5 ```","solution":"def process_transactions(t, q, ids, risk_factors, queries): from collections import defaultdict id_index_map = {ids[i]: i for i in range(t)} risk_factor_map = {rf:i for i, rf in enumerate(risk_factors)} transaction_log = defaultdict(list) results = [] for query in queries: parts = query.split() cmd = parts[0] if cmd == \'+\': id_val = int(parts[1]) c_val = int(parts[2]) transaction_log[id_val].append(c_val) elif cmd == \'-\': id_val = int(parts[1]) if transaction_log[id_val]: transaction_log[id_val].pop() elif cmd == \'?\': l = int(parts[1]) r = int(parts[2]) t = int(parts[3]) total_risk = 0 for id_val in range(l, r + 1): if id_val in transaction_log: total_risk += transaction_log[id_val].count(t) * t results.append(total_risk) return results"},{"question":"Alice is interested in generating unique codes for her team members as part of an internal event. Every team member has a unique code identifier, which is a positive integer. She wants to create collaborative groups such that each group has a unique combined code identifier. The combined code identifier of a group is simply the sum of the code identifiers of all team members in that group. Given n team members each with a distinct code identifier, and Alice needs to form m groups such that the sum of code identifiers in each group is unique, help Alice accomplish this task. Note that no team member can be in more than one group and each group must contain at least one team member. The first line contains two integers n and m (1 ≤ n ≤ 50; 1 ≤ m ≤ n) — the number of team members and the number of groups, respectively. The second line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10^7) — the code identifiers of the team members. It is guaranteed that no two team members have the same code identifier. Print m lines: in the i-th line print the description of the i-th group consisting of an integer gi (1 ≤ gi ≤ n) — the number of team members in the i-th group, followed by gi distinct integers representing the code identifiers of the team members in the group. The order of the code identifiers in the output does not matter. Ensure that the combined code identifier of each group is unique. If there are multiple valid solutions, print any of them.","solution":"def form_groups(n, m, identifiers): Forms m groups such that each group has a unique combined code identifier. :param n: int - Total number of team members :param m: int - Number of groups to form :param identifiers: List[int] - List of unique code identifiers for team members :return: List[List[int]] - List of groups formed under the given constraints identifiers.sort() groups = [[] for _ in range(m)] for i in range(n): groups[i % m].append(identifiers[i]) return groups # Example usage: n = 5 m = 3 identifiers = [4, 2, 5, 7, 6] print(form_groups(n, m, identifiers))"},{"question":"Martha is organizing her bookshelf. She has n books, and each book occupies a certain width on the shelf. Her goal is to have all the books fit within a specified shelf width, while grouping books of similar genres together. Each book can be represented with a tuple (width, genre). Martha wants to determine if it\'s possible to organize the books such that no book exceeds the total allowed shelf width while keeping genres together. Consider that books of the same genre must be contiguous on the shelf. Write a function that determines if Martha can achieve her goal. - The first line contains an integer n (1 ≤ n ≤ 20), the number of books. - The second line contains an integer w (1 ≤ w ≤ 100), the total allowed shelf width. - The next n lines each contain two integers wi (1 ≤ wi ≤ 20) and gi (1 ≤ gi ≤ 10), representing the width and genre of the i-th book. Print \\"YES\\" if Martha can organize the books to fit within the total shelf width while keeping genres contiguous. Otherwise, print \\"NO\\". **Sample input:** ``` 5 50 10 1 15 2 20 1 10 2 5 1 ``` **Sample output:** ``` YES ``` **Explanation:** In the sample, the genres can be grouped and arranged as [10 1, 20 1, 5 1] and [15 2, 10 2], giving two contiguous groups, each with a total width of 35 and 25 respectively, both of which fit within the shelf width 50.","solution":"def can_organize_books(n, w, books): # Create a dictionary to group books by genre genre_dict = {} for width, genre in books: if genre not in genre_dict: genre_dict[genre] = [] genre_dict[genre].append(width) # Iterate through each genre to verify the width constraint for genre in genre_dict: total_width = sum(genre_dict[genre]) if total_width > w: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of integers **arr** and a number **k**. You need to find the smallest possible length of a contiguous subarray of **arr** that contains at least **k** distinct elements. If no such subarray exists, return -1. # Input - The first line contains two integers **n** and **k** (1 leq n leq 10^5, 1 leq k leq n) — the number of elements in the array and the number of distinct elements needed in the subarray. - The second line contains **n** integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. # Output - Output a single integer — the smallest possible length of a contiguous subarray that contains at least **k** distinct elements. If no such subarray exists, print -1. # Example Input ``` 7 3 1 2 1 3 4 2 3 ``` Output ``` 3 ``` In this example, the subarray [2, 1, 3] or [1, 3, 4], having length 3, contains 3 distinct elements. # Notes: - You might need to use an efficient algorithm such as the sliding window approach to meet the time constraints. - Be careful to handle edge cases, such as when all elements in the array are the same and **k** is greater than 1, where no valid subarray will exist.","solution":"def smallest_subarray_with_k_distinct(arr, k): from collections import defaultdict n = len(arr) if k > n: return -1 min_length = float(\'inf\') left = 0 right = 0 current_freq = defaultdict(int) distinct_count = 0 while right < n: if current_freq[arr[right]] == 0: distinct_count += 1 current_freq[arr[right]] += 1 while distinct_count >= k: min_length = min(min_length, right - left + 1) current_freq[arr[left]] -= 1 if current_freq[arr[left]] == 0: distinct_count -= 1 left += 1 right += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"In a fictional kingdom called Forestland, there lives a clever squirrel called Nutty. Nutty loves gathering nuts and storing them in different locations throughout the forest. As winter approaches, Nutty wants to find the best place to hide her nuts, ensuring that they are safe from other animals and easy for her to access during winter. Nutty has a network of `n` trees connected by `m` branches. The trees are numbered from 1 to n. Each branch connects two trees and has a length measured by a positive integer. Nutty can store nuts in any tree, but she wants to minimize the maximum distance she will need to travel to any tree where she might want to retrieve nuts during winter. Your task is to help Nutty find the tree where she should store her nuts so that the maximum distance she needs to travel to reach any other tree in the network is as small as possible. The first line of input contains two integers, `n` (1 ≤ n ≤ 1000) and `m` (0 ≤ m ≤ n*(n-1)/2), representing the number of trees and branches. Each of the next `m` lines contains three integers, `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is a branch of length `w` between trees `u` and `v`. It is guaranteed that the graph is connected. Output a single integer – the minimum possible maximum distance Nutty has to travel to any tree from the optimal storage tree.","solution":"import heapq def dijkstra(n, graph, start): Use Dijkstra\'s algorithm to find the shortest paths from start to all other nodes. Parameters: n (int): Number of nodes in the graph. graph (dict): Adjacency list representation of the graph. start (int): The start node. Returns: list: List of shortest distance from start to each node. distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def find_optimal_storage_tree(n, m, edges): Find the tree where Nutty should store her nuts to minimize the maximum distance she needs to travel to any other tree. Parameters: n (int): Number of trees. m (int): Number of branches. edges (list): List of tuples (u, v, w) representing the branches. Returns: int: The minimum possible maximum distance. if n == 1: return 0 # Create the adjacency list representation of the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Calculate the maximum distance for each tree min_max_distances = float(\'inf\') for i in range(1, n + 1): distances = dijkstra(n, graph, i)[1:] max_distance = max(distances) min_max_distances = min(min_max_distances, max_distance) return min_max_distances"},{"question":"You are given a string containing words separated by spaces. Reverse the order of words in the string while keeping the words themselves unchanged. The only line of input contains a string between 1 and 200 characters long. Each character of the string has ASCII-code between 32 (space) and 126 (tilde), inclusive. There will be no leading or trailing spaces in the input, and each word will be separated by a single space. Output the string with the words in reverse order. If the original string had only one word, output the same single word.","solution":"def reverse_words_order(input_string): Reverses the order of words in the input_string while keeping the words themselves unchanged. Parameters: input_string (str): A string containing words separated by spaces. Returns: str: A string with the order of words reversed. # Split the string into words words = input_string.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a space return \' \'.join(reversed_words)"},{"question":"A company has a series of buildings connected by direct, one-way walkways. The buildings are represented as nodes, and the walkways as edges in a directed graph such that there is exactly one path from the main building to any other building. Each building can hold a certain number of employees. One day, a supervisor needs to visit each building exactly once following the one-way walkways starting from the main building. The supervisor\'s visit order will determine how busy the buildings get, as each employee will move to the next building along the path taken by the supervisor. Given the number of buildings, the direct walkways between buildings, and the number of employees initially present in each building, determine the number of employees present in the final building visited by the supervisor. The first line contains a single integer n — the number of buildings (2 le n le 2cdot10^5). The second line contains n-1 integers p_2, p_3 dots p_n indicating that there is a one-way walkway from building p_i to building i (1 le p_i < i). The third line contains n integers e_1, e_2, dots, e_n — the number of employees present in each building initially (0 le e_i le 10^9). Print a single integer — the number of employees present in the final building the supervisor visits. For example: Input 5 1 1 2 2 3 2 1 1 1 Output 8 In this example, the supervisor can follow a path visiting buildings in the order 1 -> 2 -> 4 -> 5 -> 3. The initial distribution of employees would be as follows: - Building 1: 3 employees - Building 2: 2 employees - Building 3: 1 employee - Building 4: 1 employee - Building 5: 1 employee The supervisor visits each building shifting the employees to the next following the path: - Move from 1 to 2: 2 employees move to 2 (now 4 in 2) - Move from 2 to 4: 4 employees move to 4 (now 5 in 4) - Move from 4 to 5: 5 employees move to 5 (now 6 in 5) - Move from 5 to 3: 6 employees move to 3 (now 7 in 3) - Finally, when leaving building 3, the 7 employees would theoretically move to a next building if there was one Thus, the supervisor would find 7 employees in the last building visited. Ensure to follow the optimal visiting path.","solution":"from collections import defaultdict def calculate_employees(n, p, e): Determines the number of employees present in the final building visited by the supervisor. Args: n (int): The number of buildings. p (list of int): List indicating the direct walkway from each building p[i] to building i. e (list of int): List of number of employees in each building initially. Returns: int: Number of employees present in the final building. graph = defaultdict(list) for i in range(1, n): graph[p[i-1]].append(i + 1) def dfs(node): total_employees = e[node - 1] for neighbor in graph[node]: total_employees += dfs(neighbor) return total_employees return dfs(1) # For example usage: # calculate_employees(5, [1, 1, 2, 2], [3, 2, 1, 1, 1])"},{"question":"The company you work for has a system that generates User IDs based on the user\'s full name in a specific format. Each user ID is composed of the first letter of the user\'s first name, followed by the full last name, and then a unique three-digit number. For instance, if a user’s name is \\"John Doe\\" and the unique number assigned to him is 123, his user ID would be \\"JDoe123\\". Write a function that generates a list of user IDs based on the given list of user details. Input - The first line contains an integer n (1 le n le 100) — the number of users. - The next n lines each contain a string and an integer separated by a space: The first part is the user\'s full name in the format \\"FirstName LastName\\" (each of which consists only of alphabetical characters), and the second part is a three-digit unique number. Output - Print n lines where each line is the corresponding user ID. Example # Input 1: ``` 3 John Doe 123 Jane Smith 456 Alex Brown 789 ``` # Output 1: ``` JDoe123 JSmith456 ABrown789 ``` # Input 2: ``` 2 Emily Davis 001 Michael Johnson 002 ``` # Output 2: ``` EDavis001 MJohnson002 ```","solution":"def generate_user_ids(n, user_details): Given the number of users and their details, generate and return a list of user IDs. Parameters: n (int): Number of users. user_details (list): List of tuples where each tuple contains a full name and a unique three-digit number. Returns: list: List of user IDs. user_ids = [] for detail in user_details: name, unique_number = detail first_name, last_name = name.split() user_id = first_name[0] + last_name + unique_number user_ids.append(user_id) return user_ids"},{"question":"You are given a string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Determine if the input string is valid. An input string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. The input consists of a single string s (1 ≤ |s| ≤ 100), where |s| is the length of the string. Output \\"true\\" if the string is valid, and \\"false\\" otherwise.","solution":"def is_valid(s): Checks if the given string with brackets is valid. :param s: Input string containing brackets. :return: True if the string is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"In the world of competitive programming, many platforms allow users to participate in various contests. One popular feature is the leaderboard which ranks users based on their performance in these contests. Each contest awards points to participants based on their rank. Given the scores accumulated by participants across multiple contests, the final rank list can be determined. Consider an array of integers where each element represents the score accumulated by a user across several contests. The task is to sort multiple topics or sub-categories and identify a rank list. You are to write an efficient algorithm to generate the rank list of participants. Each participant is assigned a unique rank 1 through n, where n is the number of participants. Higher scores correspond to higher ranks. If two participants have the same score, they share the same rank, and the next participant(s) receive rank(s) as if all participants with higher or equal scores were distinct. The function should take the following input: - The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of participants. - The second line contains n integers separated by space, representing the scores of the participants (scores can be negative or positive and range from -10^9 to 10^9). The function should print the rank of each participant in the order of their input. # Example Input: ``` 5 50 60 60 70 80 ``` Output: ``` 5 3 3 2 1 ``` Explanation: - The highest score is 80, so it gets rank 1. - The second highest score is 70, so it gets rank 2. - Both scores of 60 get rank 3. - The score 50 is the lowest, so it gets rank 5. Note: - Handle large inputs efficiently. - Ensure that the output preserves the order of inputs while correctly assigning ranks.","solution":"def generate_rankings(n, scores): Generates the rank list of participants based on their scores. :param n: int : number of participants :param scores: list of int : list of scores of participants :return: list of int : rank of each participant in the order of their input score_to_rank = {} sorted_scores = sorted(scores, reverse=True) rank = 1 for i, score in enumerate(sorted_scores): if score not in score_to_rank: score_to_rank[score] = rank rank += 1 return [score_to_rank[score] for score in scores] # Example use case n = 5 scores = [50, 60, 60, 70, 80] print(generate_rankings(n, scores)) # Output: [5, 3, 3, 2, 1]"},{"question":"You are given two arrays `A` and `B`, each consisting of `n` (1 ≤ n ≤ 10^5) positive integers. Both arrays represent \\"health points\\" of characters in two different teams of a game. The game field is divided into `m` (1 ≤ m ≤ 10^5) segments, and each segment has a damage value that decreases health points. You need to answer `q` queries (1 ≤ q ≤ 10^5). Each query consists of a tuple `(l, r, k)`, where `l` and `r` (1 ≤ l ≤ r ≤ n) signify the range of indices in arrays `A` and `B` to consider, and `k` (1 ≤ k ≤ m) represents a segment whose damage value should be applied to the characters in this range. Your task is to determine the maximum health points remaining after applying the damage value of segment `k` to each character in the specified range in arrays `A` and `B`. Input format: - The first line contains two integers `n` and `m` separated by a space. - The second line contains `n` integers representing array `A`. - The third line contains `n` integers representing array `B`. - The fourth line contains `m` integers representing the damage values of the segments. - The fifth line contains an integer `q`, the number of queries. - The next `q` lines each contain three integers `l`, `r`, and `k`. Output format: For each query, output a single integer representing the maximum health points remaining after applying the damage to the characters in the specified range. Example: ``` Input 5 4 10 20 30 40 50 15 25 35 45 55 5 10 15 20 3 1 3 2 2 4 1 1 5 4 Output 20 25 30 ``` Explanation: - In the first query, segment 2 has a damage value of 10. The resulting health points for ranges (1 to 3) in both arrays after applying the damage are [0, 10, 20] for A and [5, 15, 25] for B. The maximum health points remaining is 25. - In the second query, segment 1 has a damage value of 5. The resulting health points for ranges (2 to 4) in both arrays after applying the damage are [15, 25, 35] for A and [20, 30, 40] for B. The maximum health points remaining is 40. - In the third query, segment 4 has a damage value of 20. The resulting health points for ranges (1 to 5) in both arrays after applying the damage are [0, 0, 10, 20, 30] for A and [0, 5, 15, 25, 35] for B. The maximum health points remaining is 35.","solution":"def max_health_after_damage(n, m, A, B, damages, queries): results = [] for l, r, k in queries: l -= 1 # adjusting indexing to be zero-based r -= 1 # adjusting indexing to be zero-based k -= 1 # adjusting indexing to be zero-based damage = damages[k] max_health = 0 for i in range(l, r+1): max_health = max(max_health, max(A[i] - damage, B[i] - damage)) results.append(max_health) return results"},{"question":"A software development company has a set of n employees and m pairs of direct collaborations between them. These collaborations are bidirectional, which means if employee A collaborates with employee B, then employee B collaborates with employee A. The management has decided to restructure the way employees collaborate, turning all collaborations into project-based collaborations. Each project can have multiple employees and an employee can be part of multiple projects. They want to ensure that every employee is part of at least one project, and each project should form a connected component within the collaboration structure. Your task is to help the management determine the minimum number of projects required so that all employees are involved in at least one project, and all employees participating in the same project can collaborate (directly or indirectly) with each other. The first line of input contains two integers, n and m (1 ≤ n ≤ 100,000, 0 ≤ m ≤ 100,000) — the number of employees and the number of collaboration pairs, respectively. The next m lines each contain two distinct integers u and v (1 ≤ u, v ≤ n, u ≠ v), denoting a direct collaboration between employee u and employee v. If there are no collaborations (m = 0), each employee should be in their own project. Print a single integer — the minimum number of projects needed. Example: Input: 5 3 1 2 1 3 4 5 Output: 2 Explanation: There are two connected components: {1, 2, 3} and {4, 5}. Thus, a minimum of 2 projects is required: one for employees {1, 2, 3} and another for employees {4, 5}.","solution":"def minimum_projects(n, m, collaborations): Returns the minimum number of projects required so that all employees are involved in at least one project and all employees in the same project can collaborate (directly or indirectly) with each other. from collections import defaultdict, deque if m == 0: return n # Create an adjacency list adjacency = defaultdict(list) for u, v in collaborations: adjacency[u].append(v) adjacency[v].append(u) visited = [False] * (n + 1) # To track who has been visited project_count = 0 def bfs(start): queue = deque([start]) visited[start] = True while queue: current = queue.popleft() for neighbor in adjacency[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) for employee in range(1, n + 1): if not visited[employee]: bfs(employee) project_count += 1 return project_count"},{"question":"You are given a lab experiment involving a row of test tubes. Each test tube can hold a specific volume, and they can either be empty or filled with an experimental substance. The chemical reactions depend on the sequence of test tubes in terms of their volumes and whether they are filled. To prepare the experiment setup, you need to organize test tubes in a way that maximizes the number of \'interesting\' subsequences. A subsequence is considered \'interesting\' if it contains at least two consecutive filled test tubes and the successive volumes are strictly increasing. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of test tubes in the row. The second line contains `n` integers `v1, v2, ..., vn` (1 ≤ vi ≤ 10^9) — the volumes of the test tubes. The third line contains a string `s` of `n` characters consisting of \'E\' or \'F\', representing whether each test tube is Empty (\'E\') or Filled (\'F\') respectively. Output the minimum number of swaps needed to rearrange the test tubes such that the number of \'interesting\' subsequences is maximized. If multiple solutions are possible, output any valid one. Here are example inputs and the corresponding outputs: # Example 1 Input: ``` 5 3 1 4 1 5 F F E F F ``` Output: ``` 1 ``` # Example 2 Input: ``` 4 1 3 2 4 E F E F ``` Output: ``` 0 ``` In the first example, you can swap the first and second or the second and fourth test tubes to maximize the number of \'interesting\' subsequences. In the second example, no swaps are needed as the sequence is already optimized.","solution":"def min_swaps_to_maximize_interesting_subsequences(n, volumes, status): filled = [(volumes[i], i) for i in range(n) if status[i] == \'F\'] if len(filled) < 2: return 0 filled.sort() swaps = 0 last_index = filled[0][1] for i in range(1, len(filled)): if filled[i][1] < last_index: swaps += 1 last_index = max(last_index, filled[i][1]) return swaps"},{"question":"You are given an array of integers. You need to perform a series of operations to transform this array. Each operation consists of selecting a subarray and reversing it. The goal is to make the entire array non-decreasing with the minimum number of operations possible. **Constraints:** - The length of the array ( n ) (1 ≤ n ≤ 100,000). - The elements of the array are integers in the range [-109, 109]. **Input:** - The first line contains an integer n, the length of the array. - The second line contains n integers representing the elements of the array. **Output:** - A single integer representing the minimum number of operations required to make the array non-decreasing. # Example **Input:** ``` 5 3 2 1 5 4 ``` **Output:** ``` 2 ``` **Explanation:** One way to achieve this is: 1. Reverse the subarray from the start to the middle: [1, 2, 3, 5, 4] 2. Reverse the subarray from the fourth to the end: [1, 2, 3, 4, 5] Thus, the minimum number of operations required is 2.","solution":"def min_operations_to_non_decreasing(arr): Returns the minimum number of operations (reversals of subarrays) required to make the input array non-decreasing. n = len(arr) if n == 1: return 0 count = 0 i = 0 while i < n - 1: while i < n - 1 and arr[i] <= arr[i + 1]: i += 1 if i < n - 1: count += 1 j = i + 1 while j < n - 1 and arr[j] > arr[j + 1]: j += 1 i = j return count"},{"question":"A team of archaeologists is exploring an ancient underground labyrinth. They have a map of the labyrinth represented as a grid of size m x n. Each cell in the grid is either a wall (\'#\') or an open space (\'.\'). The entrance to the labyrinth is at the top-left corner (0, 0), and the exit is at the bottom-right corner (m-1, n-1). The archaeologists can only move up, down, left, or right, and they want to find the shortest path from the entrance to the exit. If it is not possible to reach the exit, they should return -1. Write a function `shortest_path_labyrinth` that takes the labyrinth grid as input and returns the length of the shortest path from the entrance to the exit. If no such path exists, return -1. # Function Signature ```python def shortest_path_labyrinth(grid: List[List[str]]) -> int: pass ``` # Input - A list of lists of characters `grid` representing the labyrinth (1 ≤ m, n ≤ 100), where each entry is either \'#\' for a wall or \'.\' for an open space. # Output - An integer representing the length of the shortest path from the entrance (0, 0) to the exit (m-1, n-1). If no such path exists, return -1. # Example ```python grid = [ [\'.\', \'#\', \'.\', \'.\', \'.\'], [\'.\', \'#\', \'#\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'#\', \'.\'], [\'#\', \'#\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\', \'.\'] ] print(shortest_path_labyrinth(grid)) # Output: 9 ``` # Explanation The shortest path in the provided example is of length 9 steps: (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2) → (2, 3) → (1, 3) → (0, 3) → (0, 4) → (4, 4).","solution":"from collections import deque from typing import List def shortest_path_labyrinth(grid: List[List[str]]) -> int: Find the shortest path in a labyrinth grid from top-left corner (0,0) to the bottom-right corner (m-1,n-1). m, n = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 # Initialize the directions for movement: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Initialize the queue for BFS with the starting point and the initial step count queue = deque([(0, 0, 1)]) # (row, column, steps) # Mark the starting point as visited grid[0][0] = \'#\' while queue: x, y, steps = queue.popleft() # If we reach the exit if x == m-1 and y == n-1: return steps # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\': queue.append((nx, ny, steps + 1)) grid[nx][ny] = \'#\' # Mark as visited return -1 # If no path is found"},{"question":"You are given a sorted array of distinct integers and a target value. Write a function to search for the target in the array. If the target exists, return its index. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity. # Function Signature ```python def search_insert_position(nums: List[int], target: int) -> int: pass ``` # Input - `nums`: a list of distinct integers sorted in ascending order. - `target`: an integer representing the value you\'re searching for. # Output - Return an integer representing the index of the target if found, or the index where the target should be inserted in case it does not exist in the list. # Example ```python assert search_insert_position([1, 3, 5, 6], 5) == 2 assert search_insert_position([1, 3, 5, 6], 2) == 1 assert search_insert_position([1, 3, 5, 6], 7) == 4 assert search_insert_position([1, 3, 5, 6], 0) == 0 ``` # Constraints - The length of `nums` will be in the range [1, 10^4]. - `nums` contains distinct integers. - The target value is an integer.","solution":"def search_insert_position(nums, target): Returns the index of the target if found, otherwise the index where the target should be inserted. Uses binary search for O(log n) runtime complexity. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return left"},{"question":"You are managing a large online bookstore, and you want to implement a feature that allows users to search for books by keywords. The goal is to return a list of book titles that contain all the keywords in any order. For simplicity, we\'ll assume all searches and titles are case-insensitive. Write a function that takes a list of book titles and a list of search keywords, and returns the list of titles that match the search criteria. # Input The first line contains an integer n (1 ≤ n ≤ 100), the number of book titles. The next n lines each contain a single book title. (Each title is a string of at most 100 characters.) The next line contains an integer m (1 ≤ m ≤ 20), the number of search keywords. The last line contains m space-separated strings, each representing a keyword (Each keyword is a string of at most 20 characters). # Output Print the list of matching book titles, each on a new line, in the order they appeared in the input. If no titles match, print \\"No matches found\\". # Example ```plaintext Input: 3 The Great Gatsby Moby Dick War and Peace 2 great war Output: The Great Gatsby ``` # Note - In the example, only \\"The Great Gatsby\\" contains the keyword \\"great\\". - Note that partial matches within words are allowed, so \\"great\\" is found within \\"Great\\".","solution":"def search_books(titles, keywords): This function takes a list of book titles and a list of search keywords and returns a list of titles that contain all the keywords in any order. The search is case-insensitive. keywords_lower = [keyword.lower() for keyword in keywords] matching_titles = [] for title in titles: title_lower = title.lower() if all(keyword in title_lower for keyword in keywords_lower): matching_titles.append(title) return matching_titles if matching_titles else [\\"No matches found\\"]"},{"question":"# Problem Statement: You are given an array of integers representing the weights of various items and a maximum allowed weight capacity. Your goal is to determine whether it\'s possible to select a subset of these items such that their total weight does not exceed the given capacity. The subset can be empty, indicating that no items are picked. Write a function `canCarryItems(weights, capacity)` that takes an array of integers `weights` and an integer `capacity` and returns a boolean value indicating whether it\'s possible to select a subset of items such that their total weight does not exceed the specified capacity. # Input: - An array of integers `weights` of length `N` (1 ≤ N ≤ 30) where each integer represents the weight of an item. - An integer `capacity` (1 ≤ capacity ≤ 1000) representing the maximum allowed weight. # Output: - Return `True` if there exists a subset of weights such that their total weight does not exceed the capacity. - Otherwise, return `False`. # Example: Example 1: ``` Input: weights = [1, 3, 4, 5], capacity = 7 Output: True Explanation: We can select items with weights [3, 4] which sum up to 7. ``` Example 2: ``` Input: weights = [2, 9, 13], capacity = 5 Output: False Explanation: There is no subset of items whose weights sum up to 5 or less. ``` # Constraints: - The problem may contain multiple test cases. Ensure your solution works efficiently within the given constraints. # Note: In this problem, you need to implement a solution using a suitable algorithm (such as dynamic programming) to handle the combinatorial nature of subset selection. Ensure that your solution is optimized and performs well within the constraints.","solution":"def canCarryItems(weights, capacity): Determines if a subset of weights can be selected such that their total weight does not exceed the given capacity. :param weights: List of integer weights. :param capacity: Max allowed weight capacity. :return: Boolean value indicating if such a subset exists. n = len(weights) dp = [False] * (capacity + 1) dp[0] = True for weight in weights: for c in range(capacity, weight - 1, -1): dp[c] = dp[c] or dp[c - weight] return dp[capacity]"},{"question":"Qingshan and Daniel are now tired of hiking and have decided to play a different game. They find a string of lowercase English letters and want to see who can create the lexicographically smallest string. They decide on the following rules: 1. Qingshan will choose a starting index x (1 le x le n) in the string first. 2. Daniel will then choose an ending index y (1 le y le n, x le y). 3. The chosen substring is then removed from the original string. 4. This process repeats until the whole string is removed. The player who cannot make a move loses, and the other player wins. As Qingshan\'s fan, you need to determine the number of possible starting indices x that Qingshan can choose such that she will win if both players play optimally. The first line contains a single integer n (1 le n le 10^5) - the length of the string. The second line contains a string of n lowercase English letters. Print the number of possible values of x that Qingshan can choose to make her win. # Example Input: ``` 5 abcde ``` Output: ``` 3 ``` In this example, Qingshan can choose x=1, x=2, or x=3 to start and guarantee a win by optimal play. If she starts at one of these indices, she can always ensure that she can make Daniel unable to choose a valid ending index, thus forcing Daniel to lose.","solution":"def optimal_starting_indices(n, s): Determines the number of starting indices `x` that Qingshan can choose such that she will win if both players play optimally. Args: n (int): Length of the string. s (str): String of n lowercase English letters. Returns: int: Number of winning starting indices for Qingshan. min_char = min(s) return sum(1 for ch in s if ch == min_char) # Example function call # print(optimal_starting_indices(5, \'abcde\')) # Output should be 3"},{"question":"Anna loves statistics and collects an array of positive integers where some numbers may appear more than once. She wants to find the k-th distinct integer that appears in ascending order. Given an array of integers and an integer k, return the k-th distinct integer in the sorted list of distinct integers. If there are fewer than k distinct integers in the array, return -1. The first line of the input contains two integers, n (the number of elements in the array) and k. The second line contains n positive integers, the elements of the array. It is guaranteed that the input constraints are 1 ≤ n ≤ 10^5, and 1 ≤ the value of each integer ≤ 10^9. Output the k-th distinct integer in the sorted order of distinct integers, or -1 if there are fewer than k distinct integers. Example: Input: 5 3 4 2 2 6 7 Output: 6 Explanation: The distinct integers in ascending order are [2, 4, 6, 7], and the third distinct integer is 6.","solution":"def kth_distinct_integer(n, k, array): Returns the k-th distinct integer in the sorted list of distinct integers from the array or -1 if there are fewer than k distinct integers. distinct_integers = sorted(set(array)) # Get distinct integers and sort them. if k <= len(distinct_integers): return distinct_integers[k - 1] # k is 1-based index. else: return -1"},{"question":"You are given an array of integers representing the heights of buildings in a street. A building has a scenic view if there are no taller buildings standing in front of it when viewed from one end of the street. Specifically, when viewed from the left end to the right end of the street. Determine how many buildings have a scenic view. The first line contains an integer n (1 ≤ n ≤ 100) — the number of buildings on the street. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the heights of the buildings in the order they stand on the street. Output the single number — the number of buildings with a scenic view.","solution":"def count_scenic_views(n, heights): Returns the number of buildings with a scenic view. Arguments: n : int -- the number of buildings heights : list of int -- the heights of the buildings Returns: int -- the number of buildings with a scenic view max_height = 0 scenic_count = 0 for height in heights: if height > max_height: scenic_count += 1 max_height = height return scenic_count"},{"question":"Alice is playing a game on a rectangular grid with dimensions n × m. Each cell in the grid can either be empty or contain an obstacle. Alice can start at any empty cell and her goal is to find the shortest path to another empty cell in the grid. She can move up, down, left, or right, but cannot move through cells containing obstacles. Your task is to write a program that will help Alice find the shortest path between two given empty cells in the grid. If there is no path between the two cells, the program should indicate that it is impossible to reach the target. The first line of input contains integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The next n lines describe the grid. Each line consists of m characters, where \'.\' represents an empty cell and \'#\' represents an obstacle. The next line contains four integers sx, sy, tx, and ty (1 ≤ sx, sy, tx, ty ≤ n) — the starting cell (sx, sy) and the target cell (tx, ty). The given coordinates use 1-based indexing. Print a single integer representing the shortest path from the starting cell to the target cell. If no such path exists, print -1. Example: Input: 5 5 ..... .#. ...#. .#. ..... 1 1 5 5 Output: 8 Explanation: Alice can move from (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3) → (4, 3) → (5, 3) → (5, 4) → (5, 5), which gives the shortest path of length 8.","solution":"from collections import deque def shortest_path(n, m, grid, sx, sy, tx, ty): sx -= 1 sy -= 1 tx -= 1 ty -= 1 if grid[sx][sy] == \'#\' or grid[tx][ty] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (tx, ty): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"Alice is a software engineer who is working on optimizing a legacy codebase. She encounters a problem related to string compression and decides to write a function to help her solve it. The problem is to compress a given string such that \'aaabbbcc\' becomes \'a3b3c2\'. If the compressed string is not smaller than the original string, return the original string. The function should also be case sensitive, meaning \'a\' and \'A\' are considered different characters. Write a function `compress_string(s: str) -> str` that takes a string `s` and returns the compressed string if it is smaller, otherwise returns the original string. # Input - A single string `s` of length `1 ≤ len(s) ≤ 10^5` containing only alphabetic characters (either lowercase or uppercase). # Output - A single string which is the compressed string or the original string, depending on which is shorter. # Examples ```python compress_string(\\"aaabbbcc\\") # Output: \\"a3b3c2\\" compress_string(\\"aabcccccaaa\\") # Output: \\"a2b1c5a3\\" compress_string(\\"abc\\") # Output: \\"abc\\" compress_string(\\"a\\") # Output: \\"a\\" compress_string(\\"AaAaAa\\") # Output: \\"AaAaAa\\" ``` # Explanation In the first example, \\"aaabbbcc\\" can be compressed to \\"a3b3c2\\" which is shorter than the original string. Hence, the function should return \\"a3b3c2\\". In the second example, \\"aabcccccaaa\\" is compressed to \\"a2b1c5a3\\", which is shorter than the original string, so the function returns \\"a2b1c5a3\\". In the third example, \\"abc\\" cannot be further compressed into a shorter string, so the function returns the original string \\"abc\\". In the fourth example, since there\'s only one character \\"a\\", the function returns \\"a\\" as both the original and compressed strings would be the same length. In the fifth example, \\"AaAaAa\\" cannot be compressed into a shorter string because of alternating case-sensitive characters, so the function returns \\"AaAaAa\\".","solution":"def compress_string(s: str) -> str: compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: compressed.append(s[i - 1] + str(count)) count = 1 compressed.append(s[-1] + str(count)) compressed_str = \'\'.join(compressed) return compressed_str if len(compressed_str) < len(s) else s"},{"question":"Write a function to check if the second string can be formed by deleting some characters of the first string. This can also be interpreted as checking if the second string is a subsequence of the first string. The first line contains string s, the second line contains string t. Each line consists only of lowercase English letters. The given strings are non-empty, the length of each string does not exceed 2×105. Print \\"Yes\\" (without the quotes) if string t can be obtained from string s by deleting some characters of s (possibly none), without reordering the remaining characters. Otherwise, print \\"No\\" (without the quotes). Example: ``` Input: abcdef ace Output: Yes Input: abc acb Output: No Input: abc d Output: No ``` Explanation: - In the first example, by removing \'b\', \'d\', and \'f\' from \\"abcdef\\", we can form \\"ace\\". - In the second example, we cannot reorder characters, so \\"acb\\" is not a valid subsequence of \\"abc\\". - In the third example, \'d\' is not present in \\"abc\\" so it is not possible to form \\"d\\" from \\"abc\\".","solution":"def is_subsequence(s, t): Checks if t can be formed by deleting some characters of s. t_index = 0 t_length = len(t) if t_length == 0: return \\"Yes\\" for char in s: if char == t[t_index]: t_index += 1 if t_index == t_length: return \\"Yes\\" return \\"No\\""},{"question":"Implement a function that takes an integer `n` and returns a list of all prime factors of `n`. The prime factors should be in ascending order. If `n` is less than 2, return an empty list. For example, given `n = 28`, the function should return `[2, 2, 7]` because 28 = 2 * 2 * 7. Your code should have the following signature: ```python def prime_factors(n: int) -> list: pass ```","solution":"def prime_factors(n: int) -> list: Returns a list of all prime factors of n in ascending order. If n is less than 2, returns an empty list. factors = [] if n < 2: return factors # Check for factors of 2 while n % 2 == 0: factors.append(2) n //= 2 # Check for odd factors from 3 onwards factor = 3 while factor * factor <= n: while n % factor == 0: factors.append(factor) n //= factor factor += 2 # If n is still greater than 2, then n itself is a prime if n > 2: factors.append(n) return factors"},{"question":"You are given an array of integers, and you need to find the length of the longest arithmetic subsequence in the array. An arithmetic subsequence is a sequence of numbers such that the difference between any two consecutive elements is the same. For example, in the array `[3, 6, 9, 12]`, the whole array forms an arithmetic sequence with a common difference of 3. In the array `[9, 4, 7, 2, 10]`, one of the longest arithmetic subsequences is `[4, 7, 10]` with a difference of 3. # Input - An integer `n` (1 ≤ n ≤ 1,000), the length of the array. - An array of `n` integers `arr[i]` (-10,000 ≤ arr[i] ≤ 10,000), the elements of the array. # Output - A single integer, the length of the longest arithmetic subsequence in the given array. # Example Input ``` 6 3 6 9 12 7 10 ``` Output ``` 4 ``` **Explanation:** The longest arithmetic subsequence is `[3, 6, 9, 12]` with a common difference of 3. **Note:** If multiple longest arithmetic subsequences exist, you can output the length of any one of them.","solution":"def longest_arith_seq_length(arr): if not arr: return 0 n = len(arr) if n == 1: return 1 dp = [{} for _ in range(n)] max_len = 1 for i in range(n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_len = max(max_len, dp[i][diff]) return max_len"},{"question":"Mike loves playing games with numbers. Recently, he came across an interesting problem and wants to solve it with your help. The problem is about finding the Longest Divisible Subsequence (LDS) in a list of integers. A subsequence of a list is derived by deleting some or none of the elements without changing the order of the remaining elements. A divisible subsequence is a subsequence where for any two indices i and j (i < j), the elements A[i] and A[j] satisfy A[j] % A[i] == 0. Given a list of integers, your task is to determine the length of the longest divisible subsequence. # Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of elements in the list. - The second line contains n space-separated integers A[1], A[2], ..., A[n] (1 ≤ A[i] ≤ 10^6) representing the elements of the list. # Output: - Output a single integer, the length of the longest divisible subsequence. # Example: Input: ``` 6 3 6 7 12 24 36 ``` Output: ``` 4 ``` Explanation: One of the longest divisible subsequences is [3, 6, 12, 24]. Here, 6 is divisible by 3, 12 is divisible by 6, and 24 is divisible by 12. Other possible solutions also have the length of 4. # Note: To solve this problem, you\'ll need to think about dynamic programming and properties of divisibility. You may find it helpful to sort the list first and then determine the longest subsequence using an appropriate data structure or algorithm.","solution":"def longest_divisible_subsequence(arr): n = len(arr) if n == 0: return 0 # Sort the array arr.sort() # dp[i] will store the length of the longest divisible subsequence ending with arr[i] dp = [1] * n # Compute the lengths of LDS for i in range(1, n): for j in range(i): if arr[i] % arr[j] == 0: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest divisible subsequence return max(dp)"},{"question":"A company organizes a regular monthly competition for its employees to enhance their algorithmic skills. Each month, different problems are given, and employees are rated based on their performance. At the end of the year, the top performers need to be identified for a special commendation. You are provided with the scores of the n participants over 12 months. The company has some specific conditions: 1. A participant is eligible for commendation if they have scored at least p points in at least three different months. 2. In case of a tie, the participant with the highest total score over the 12 months is given priority. 3. If there is still a tie, the participant with the highest score in any single month during the year is prioritized. 4. If there are still ties after applying all conditions, the participant with the lowest ID number (1-indexed) gets the commendation. Write a program to determine the ID of the participant who is to be commended. Input: - The first line contains two integers n and p (1 ≤ n ≤ 100, 1 ≤ p ≤ 100). - The following n lines contain 12 integers each representing the scores of the participants over the 12 months. Output: - Print the ID of the participant to be commended. Example: Input: 5 15 10 20 30 25 15 10 5 40 10 15 20 5 5 10 15 5 10 5 10 5 10 30 20 15 20 5 30 5 25 5 20 5 20 5 20 25 10 20 10 10 20 30 10 10 15 10 20 25 15 15 15 15 15 15 15 15 15 15 15 15 Output: 5 Explanation: - Participant 5 is the only participant who scored at least 15 points in all twelve months, hence meeting the eligibility criteria overwhelmingly. - Even though participant 1 also has multiple high scores, they do not meet the condition of having scored at least 15 points in exactly three different months. - The same can be deduced for other participants based on their monthly scores.","solution":"def find_commended_participant(n, p, scores): eligible_participants = [] for i in range(n): monthly_scores = scores[i] count_p = sum(1 for score in monthly_scores if score >= p) if count_p >= 3: eligible_participants.append((i + 1, monthly_scores)) if not eligible_participants: return None eligible_participants.sort( key=lambda participant: ( -sum(participant[1]), -max(participant[1]), participant[0] ) ) return eligible_participants[0][0] # Example Usage n = 5 p = 15 scores = [ [10, 20, 30, 25, 15, 10, 5, 40, 10, 15, 20, 5], [5, 10, 15, 5, 10, 5, 10, 5, 10, 30, 20, 15], [20, 5, 30, 5, 25, 5, 20, 5, 20, 5, 20, 25], [10, 20, 10, 10, 20, 30, 10, 10, 15, 10, 20, 25], [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] ] print(find_commended_participant(n, p, scores))"},{"question":"Given a string s of length n (1 le n le 10^5) consisting of lowercase English letters, find the number of distinct substrings of s. The input consists of a single string s. The output should be a single integer, the number of distinct substrings of s including the empty substring. # Example **Input:** ``` abc ``` **Output:** ``` 7 ``` **Explanation:** The distinct substrings are \\"\\", \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\".","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings of the input string s, including the empty substring. n = len(s) substrings = set() # Generate all substrings and store them in the set to ensure uniqueness for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) # Including the empty substring return len(substrings) + 1 # Example usage: # result = count_distinct_substrings(\\"abc\\") # print(result) # Output should be 7"},{"question":"You are given a grid of size `n x m` where each cell contains some number of coins. At the beginning, there is a robot located at the top-left corner of the grid (cell (1, 1)). The robot can only move either right or down at each step. The robot aims to collect the maximum number of coins and eventually reach the bottom-right corner of the grid (cell (n, m)). Write a function `max_coins(n: int, m: int, grid: List[List[int]]) -> int` that takes the number of rows `n`, the number of columns `m`, and the `grid` representing the number of coins in each cell. It should return the maximum number of coins that the robot can collect by the time it reaches the bottom-right corner of the grid. # Input - An integer `n` (1 ≤ n ≤ 100) representing the number of rows. - An integer `m` (1 ≤ m ≤ 100) representing the number of columns. - A 2D list `grid` of size `n x m`, where each element `grid[i][j]` (0 ≤ grid[i][j] ≤ 100) represents the number of coins in the cell at row `i+1` and column `j+1`. # Output - An integer representing the maximum number of coins that the robot can collect. # Example ```python def max_coins(n, m, grid): # Your code here # Example 1 n = 3 m = 4 grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] print(max_coins(n, m, grid)) # Output: 12 # Example 2 n = 2 m = 2 grid = [ [1, 2], [1, 2] ] print(max_coins(n, m, grid)) # Output: 5 ``` # Notes - You can assume that `n` and `m` are positive integers and the `grid` contains valid integers only. - Analyze the constraints and come up with an efficient solution using dynamic programming. - The robot must follow the movement constraints strictly—only right or down.","solution":"def max_coins(n, m, grid): Returns the maximum number of coins that can be collected by the robot. # Create a DP table to store the maximum coins collectable to each cell dp = [[0 for _ in range(m)] for _ in range(n)] # Initialize the top-left cell dp[0][0] = grid[0][0] # Fill the first row (only move right) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (only move down) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum number of coins return dp[-1][-1]"},{"question":"Consider a grid of size n times m. Some cells in the grid are blocked, while others are free to walk on. You are initially located in the top-left cell of the grid (cell (1,1)) and your goal is to reach the bottom-right cell of the grid (cell (n,m)). You can move up, down, left, or right, but you cannot move into a blocked cell or move outside the grid. Determine the minimum number of moves required to reach the bottom-right cell from the top-left cell. If it is not possible to reach the bottom-right cell, return -1. The first line contains two integers n and m (1 le n, m le 1000) — the dimensions of the grid. Each of the next n lines contains m characters, where each character is either: - `\'.\'` (a free cell), - `\'#\'` (a blocked cell). Output a single integer — the minimum number of moves required to reach cell (n,m) starting from cell (1,1). If there is no way to reach the destination, output -1. # Example Input ``` 4 4 .... .. ..#. .... ``` Output ``` 6 ``` Input ``` 3 3 ..# #.. ..# ``` Output ``` -1 ```","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' moves = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in moves: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Alice loves playing with strings and she recently encountered a problem that she finds fascinating. She has two strings, `s1` and `s2`, both consisting of lowercase English letters. Alice wants to know the minimum number of operations required to make the two strings identical. The operations Alice can perform are: 1. Insert a character at any position in either string. 2. Delete a character from any position in either string. 3. Replace a character in either string with any other character. Your task is to help Alice by writing a program to calculate the minimum number of operations needed to make `s1` and `s2` identical. # Input - The first line contains the string `s1` (1 ≤ |s1| ≤ 1000). - The second line contains the string `s2` (1 ≤ |s2| ≤ 1000). # Output - Print a single integer representing the minimum number of operations required to make `s1` and `s2` identical. # Example Input ``` kitten sitting ``` Output ``` 3 ``` Explanation To transform \\"kitten\\" into \\"sitting\\": 1. Replace \'k\' with \'s\' (k -> s) 2. Replace \'e\' with \'i\' (e -> i) 3. Insert \'g\' at the end Therefore, the minimum number of operations required is 3.","solution":"def min_operations_to_make_identical(s1, s2): Returns the minimum number of operations required to make the two strings s1 and s2 identical. # Initialize the matrix for dynamic programming m, n = len(s1), len(s2) dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill the matrix for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, remove all characters of s1 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] # If characters are the same, no new operation needed else: dp[i][j] = 1 + min(dp[i-1][j], # Remove dp[i][j-1], # Insert dp[i-1][j-1]) # Replace # The answer is in the bottom-right corner of the matrix return dp[m][n]"},{"question":"You are given a sequence of integers representing the heights of buildings in a city skyline. A building\'s view is obstructed if there is any taller building between it and the horizon. You need to determine which buildings have an unobstructed view. Building heights are given from left to right in the sequence. Write a function `unobstructed_buildings` that takes a list of integers representing the heights of buildings and returns a list of integers representing the indices of buildings that have an unobstructed view. A building has an unobstructed view if there are no taller or equal height buildings to its right. # Example For the sequence of building heights `[3, 7, 8, 3, 6, 1]`, the buildings with unobstructed views are at indices `[2, 4, 5]` (0-based indexing). **Input:** - A list of integers `heights`, where each element represents the height of a building in the skyline. (1 ≤ len(heights) ≤ 10^5, 1 ≤ heights[i] ≤ 10^5) **Output:** - A list of integers representing the indices of buildings with unobstructed views in ascending order. # Function Signature ```python def unobstructed_buildings(heights: List[int]) -> List[int]: ``` **Constraints:** - Optimize for time complexity, ideally O(n).","solution":"from typing import List def unobstructed_buildings(heights: List[int]) -> List[int]: Returns the indices of buildings that have an unobstructed view. A building has an unobstructed view if there are no taller or equal height buildings to its right. n = len(heights) if n == 0: return [] # This will store the indices of buildings with an unobstructed view result = [] # Start from the last building as it always has an unobstructed view max_height_so_far = -1 # Traverse the building heights from right to left for i in range(n - 1, -1, -1): if heights[i] > max_height_so_far: result.append(i) max_height_so_far = heights[i] # The result list will be in reverse order, so reverse it before returning result.reverse() return result"},{"question":"A valid mountain array is defined as an array where the elements are initially in a strictly increasing order until they reach a peak element, after which they are in a strictly decreasing order. A peak element is an element that is strictly greater than its neighboring elements. Given an array of integers, determine if it is a mountain array. The length of the array will be between 3 and 100000, inclusive. - The array must have at least 3 elements. - The first part of the array must be strictly increasing. - There must be a peak element. - The second part of the array must be strictly decreasing. **Input:** - The first line of input contains an integer n, the length of the array. - The second line contains n integers, the elements of the array. **Output:** - Print \\"YES\\" if the given array is a mountain array, otherwise print \\"NO\\". **Example:** **Input 1:** ``` 8 2 3 4 5 3 1 0 -1 ``` **Output 1:** ``` YES ``` **Input 2:** ``` 9 2 2 2 4 3 2 1 0 -1 ``` **Output 2:** ``` NO ``` **Input 3:** ``` 3 1 3 2 ``` **Output 3:** ``` YES ``` **Explanation:** - In example 1, the array 2 3 4 5 3 1 0 -1 is strictly increasing until 5 and then strictly decreasing, hence it is a mountain array. - In example 2, the presence of repeated elements 2 breaks the strictly increasing requirement; thus, it is not a mountain array. - In example 3, the array 1 3 2 has a single peak 3, making it a mountain array.","solution":"def is_mountain_array(arr): Determines if the given array is a mountain array. :param arr: List[int] - list of integers :return: str - \\"YES\\" if it is a mountain array, otherwise \\"NO\\" if len(arr) < 3: return \\"NO\\" n = len(arr) i = 0 # Climbing up while i + 1 < n and arr[i] < arr[i + 1]: i += 1 # Peak can\'t be the first or the last if i == 0 or i == n - 1: return \\"NO\\" # Climbing down while i + 1 < n and arr[i] > arr[i + 1]: i += 1 return \\"YES\\" if i == n - 1 else \\"NO\\""},{"question":"A company organizes a team-building event where employees participate in a series of activities held in different rooms within a large building. Each room has a capacity limit, and each employee has a specific preferred room for each activity. The goal is to ensure that all employees are allocated to their preferred rooms as much as possible, without exceeding the capacity of any room. You are tasked with writing a program to determine the maximum number of employees that can be allocated to their preferred rooms under these constraints. If an employee\'s preferred room is full, they cannot be allocated to any other room for that activity. The input consists of: 1. An integer n (1 ≤ n ≤ 100) representing the number of employees. 2. An integer m (1 ≤ m ≤ 10) representing the number of rooms. 3. A list of m integers, where each integer ci (1 ≤ ci ≤ 1000) is the capacity of the i-th room. 4. A list of n lists, where each inner list represents an employee\'s room preferences in the format [p1, p2, ..., pk], indicating that this employee prefers room p1 for the first activity, room p2 for the second activity, and so on. The output should be: 1. An integer representing the maximum number of employees that can be allocated to their preferred rooms for all activities without exceeding any room\'s capacity. # Example Input: ``` 5 3 [2, 3, 2] [[1, 2, 3], [2, 1, 3], [3, 2, 1], [1, 2, 3], [2, 3, 1]] ``` Output: ``` 5 ``` Explanation: - First employee prefers rooms 1, 2, 3. - Second employee prefers rooms 2, 1, 3. - Third employee prefers rooms 3, 2, 1. - Fourth employee prefers rooms 1, 2, 3. - Fifth employee prefers rooms 2, 3, 1. Room capacities: Room 1 = 2, Room 2 = 3, Room 3 = 2. We can allocate all 5 employees successfully: - Two employees can be allocated to Room 1 (capacity 2). - Three employees can be allocated to Room 2 (capacity 3). - Two employees can be allocated to Room 3 (capacity 2). Since no room\'s capacity is exceeded, the program should output 5.","solution":"def max_employees_allocated(n, m, capacities, room_preferences): room_count = [0] * m # To keep track of how many employees are in each room for preference in room_preferences: for room in preference: if room_count[room - 1] < capacities[room - 1]: room_count[room - 1] += 1 break # Move on to the next employee after assigning them to their preferred room return sum(room_count)"},{"question":"You are given a list of integers representing the ages of a group of people. Your task is to distribute them into different age groups: \\"Child\\" (0-12 years), \\"Teenager\\" (13-19 years), \\"Adult\\" (20-64 years), and \\"Senior\\" (65 years and above). For each person, determine their age group and count the total number of people in each age group. If the input list is empty, all counts should be zero. The first line contains an integer n (0 le n le 10^6) — the number of people in the list. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 150) — the ages of the people. Output four integers: the number of \\"Child\\", \\"Teenager\\", \\"Adult\\", and \\"Senior\\" respectively. # Example **Input:** ``` 10 3 14 25 68 35 12 19 65 21 36 ``` **Output:** ``` 2 2 4 2 ``` **Explanation:** - 3 and 12 are children. - 14 and 19 are teenagers. - 25, 35, 21, and 36 are adults. - 68 and 65 are seniors.","solution":"def count_age_groups(n, ages): Counts the number of people in each age group: \\"Child\\", \\"Teenager\\", \\"Adult\\", \\"Senior\\". Parameters: n (int): The number of ages in the list. ages (list of int): The list of ages. Returns: (tuple of int): A tuple containing four integers representing the number of \\"Child\\", \\"Teenager\\", \\"Adult\\", and \\"Senior\\". child_count = 0 teenager_count = 0 adult_count = 0 senior_count = 0 for age in ages: if 0 <= age <= 12: child_count += 1 elif 13 <= age <= 19: teenager_count += 1 elif 20 <= age <= 64: adult_count += 1 elif age >= 65: senior_count += 1 return (child_count, teenager_count, adult_count, senior_count)"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex of the graph has an associated color, and you need to find the size of the largest connected component where all vertices have the same color. The first line contains two integers n and m — the number of vertices and edges respectively (1 ≤ n, m ≤ 2 cdot 10^5). The second line contains n integers c_1, c_2, ..., c_n (1 ≤ c_i ≤ 10^5) — where c_i is the color of the i-th vertex. The following m lines each contain two integers u and v (1 ≤ u, v ≤ n; u ≠ v) denoting an edge between vertex u and vertex v. Each pair of vertices that are directly or indirectly connected forms a component. If there\'s only one vertex, the size of the largest component is 1 if there are no edges. Your task is to find the size of the largest connected component where all vertices have the same color and print that value. If there are no edges or all components have different colors on every vertex, print 0.","solution":"from collections import defaultdict, deque def largest_same_color_component(n, m, colors, edges): adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) def bfs(start_node): queue = deque([start_node]) component_size = 0 visited[start_node] = True while queue: node = queue.popleft() component_size += 1 for neighbor in adjacency_list[node]: if not visited[neighbor] and colors[neighbor - 1] == colors[start_node - 1]: visited[neighbor] = True queue.append(neighbor) return component_size max_component_size = 0 for i in range(1, n + 1): if not visited[i]: max_component_size = max(max_component_size, bfs(i)) return max_component_size"},{"question":"Sara the Explorer has discovered a forest with numerous huts. Each hut is connected to other huts with unidirectional paths, forming a directed acyclic graph (DAG). Every hut has one or more paths leading into it and one or more paths leading out of it, except for the start hut and the destination hut. The start hut has only outgoing paths, and Sara will start her journey from this hut. The destination hut has only incoming paths. Sara wishes to find the number of distinct paths from the start hut to the destination hut. Given the number of huts `n` and the list of directed paths `edges`, where each path is represented by a tuple `(u, v)` indicating a path from hut `u` to hut `v`, your task is to count the number of distinct paths from the start hut (denoted by 1) to the destination hut (denoted by `n`). # Input - The first line contains two integers `n` and `m` (2 ≤ `n` ≤ 1000, 1 ≤ `m` ≤ 10000) representing the number of huts and the number of directed paths respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ `u`, `v` ≤ `n`, `u` ≠ `v`), representing a directed path from hut `u` to hut `v`. # Output - Print a single integer representing the number of distinct paths from hut 1 to hut `n`. # Example Input ``` 5 6 1 2 1 3 2 4 3 4 4 5 3 5 ``` Output ``` 3 ``` Explanation There are three distinct paths from hut 1 to hut 5: 1. 1 -> 2 -> 4 -> 5 2. 1 -> 3 -> 4 -> 5 3. 1 -> 3 -> 5","solution":"from collections import defaultdict from functools import lru_cache def count_paths(n, edges): Count the number of distinct paths from node 1 to node n in a DAG. Parameters: n (int): Number of nodes in the graph. edges (list of tuples): List of directed edges in the graph. Returns: int: Number of distinct paths from node 1 to node n. # Create the adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Memoization of the number of paths from each node to the destination @lru_cache(None) def dfs(node): if node == n: return 1 total_paths = 0 for neighbor in graph[node]: total_paths += dfs(neighbor) return total_paths # Start the DFS from node 1 return dfs(1)"},{"question":"You are given a list of strings representing an inventory of items, where each string contains the item name followed by its category, separated by a space. For example: ``` apple fruit carrot vegetable banana fruit spinach vegetable chocolate snack tomato vegetable ``` Write a function to group the items by their categories and sort each group alphabetically by item name. The function should print the categories in alphabetical order along with the sorted list of items for each category. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of items. - The next n lines each contain a string with an item name followed by its category, separated by a space. **Output:** - For each category, print the category name followed by a colon and a comma-separated list of items in that category sorted alphabetically. - Categories should be printed in alphabetical order. **Example:** **Input:** ``` 6 apple fruit carrot vegetable banana fruit spinach vegetable chocolate snack tomato vegetable ``` **Output:** ``` fruit: apple, banana snack: chocolate vegetable: carrot, spinach, tomato ```","solution":"def group_and_sort_inventory(n, items): from collections import defaultdict # Dictionary to hold items per category category_items = defaultdict(list) # Populate the dictionary for item in items: name, category = item.rsplit(\' \', 1) category_items[category].append(name) # Sort each category\'s items for category in category_items: category_items[category].sort() # Sort the categories and print the output in the required format for category in sorted(category_items): items_list = \\", \\".join(category_items[category]) print(f\\"{category}: {items_list}\\")"},{"question":"Create a function that takes an integer N as input and returns an array of N elements, where each element is the sum of its digits repeated M times, with M being the count of how many times the digit appears in the integer. For example, for N = 3 the array should have the following elements: - The first element will be the sum of digits of the integer represented by the concatenation of the first digit of all the elements in the array. - The second element will be the sum of the digits of the integer represented by the concatenation of the second digit of all the elements in the array. - And so on, until the N-th element. The integers should be concatenated such that each digit appears as many times as its frequency in the original input array. For example, if the input is [123, 456, 789], the output will be [12, 15, 18] because: - For the first element: 1 + 1 + 2 + 2 + 3 + 3 = 12 - For the second element: 1 + 4 + 4 + 5 + 5 + 6 + 6 = 15 - For the third element: 1 + 7 + 7 + 8 + 8 + 9 + 9 = 18 Write a function with the following signature: ```python def digit_sum_repeated(N: int) -> List[int]: ```","solution":"from typing import List def digit_sum_repeated(N: int) -> List[int]: Returns an array of N elements where each element is the sum of its digits repeated M times, with M being the count of how many times the digit appears in the integer. result = [] for digit in range(1, N+1): digit_repeated = str(digit) * digit # Repeat the digit as many times as its value sum_of_digits = sum(int(d) for d in digit_repeated) result.append(sum_of_digits) return result"},{"question":"Katerina is a renowned florist in her city. She has a beautiful flower shop where she sells a variety of flowers. She arranges the flowers in bouquets for her customers. Each type of flower has a certain number of petals. Katerina wants to create a bouquet such that every flower in the bouquet is different and the total number of petals in the bouquet is maximized. You are given n different types of flowers. Each flower is described by an integer ai which represents the number of petals it has. You are asked to help Katerina by finding out the maximum possible number of petals in a bouquet that consists of different flowers only. The first line of input contains an integer n (1 ≤ n ≤ 100) representing the number of different types of flowers. The second line contains n integers a1, a2, ... an (1 ≤ ai ≤ 100) representing the number of petals on each flower. Output a single integer representing the maximum possible number of petals in a bouquet that consists of different flowers only. **Example 1:** Input: ``` 5 1 3 1 5 7 ``` Output: ``` 15 ``` **Explanation:** In this example, Katerina can choose flowers with petals 1, 3, 5, and 7. Even though there is a duplicate with 1 petal, she only takes one of each unique type of flower. The total number of petals is 1 + 3 + 5 + 7 = 16. **Example 2:** Input: ``` 4 4 4 4 4 ``` Output: ``` 4 ``` **Explanation:** There is only one unique type of flower, so the bouquet can only contain this one type, totaling 4 petals.","solution":"def maximum_petals(n, petals): Returns the maximum possible number of petals in a bouquet that consists of unique flowers only. :param n: integer, number of different types of flowers :param petals: list of integers, number of petals on each flower :return: integer, maximum possible number of petals in a bouquet # Converting the list of petals to a set to remove duplicates unique_petals = set(petals) # Summing up the unique petals return sum(unique_petals)"},{"question":"You are given an empty n x m grid and a list of instructions, where each instruction directs you to draw a horizontal or vertical line of a specified length starting from a specified position. Each line\'s length is described as a non-negative integer. The objective is to determine if the lines intersect with each other. Instructions are given as a list of tuples where each tuple contains five integers (x, y, d, l, h), where: - (x, y) denotes the starting position of the line. - d denotes the direction of the line (0 for horizontal, 1 for vertical). - l denotes the length of the line. - h is an identifier for the line. Two lines intersect if they share at least one common cell. For each pair of lines, the coordinates must be checked to determine if they overlap, regardless of the identifier. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - The second line contains an integer p (1 ≤ p ≤ 50), the number of lines. - The following p lines each contain five integers x, y, d, l, h, describing the start position, direction, length, and identifier of each line. Output: - Output \\"Yes\\" if there exists at least one pair of intersecting lines. - Otherwise, output \\"No\\". Example: Input: 5 5 3 1 1 0 3 1 2 2 1 2 2 0 3 1 5 3 Output: Yes","solution":"def check_intersections(grid_size, num_lines, lines): n, m = grid_size grid = [[0] * m for _ in range(n)] for line in lines: x, y, d, l, h = line if d == 0: # horizontal for i in range(l): if grid[x][y + i] != 0: return \\"Yes\\" grid[x][y + i] = h else: # vertical for i in range(l): if grid[x + i][y] != 0: return \\"Yes\\" grid[x + i][y] = h return \\"No\\""},{"question":"You are given a sequence of n positive integers a1, a2, ..., an on a plane. You need to find two integers ai and aj (1 ≤ i < j ≤ n) such that the Euclidean distance between their positions is as small as possible. The Euclidean distance between two points (i, ai) and (j, aj) on the plane is calculated as: sqrt((i - j)^2 + (ai - aj)^2) Write a function `min_euclidean_distance(n, a)` which takes an integer n (1 ≤ n ≤ 10^5) and a list a of n integers (1 ≤ ai ≤ 10^5) as input and returns the minimum Euclidean distance. Your function should return the distance as a floating-point number rounded to 6 decimal places. **Input Format:** - The first line contains a single integer n (1 ≤ n ≤ 10^5). - The second line contains n positive integers a1, a2, ..., an. **Output Format:** - Print the minimum Euclidean distance rounded to 6 decimal places. **Example 1:** ``` Input: 3 1 3 7 Output: 2.236068 ``` **Example 2:** ``` Input: 5 1 2 3 4 5 Output: 1.414214 ``` **Explanation:** In the first example, the distance between (1, 1) and (2, 3) is sqrt(1^2 + 2^2) = sqrt(5) which is approximately 2.236068. In the second example, the distance between (1, 1) and (2, 2) is sqrt(1^2 + 1^2) = sqrt(2) which is approximately 1.414214.","solution":"from math import sqrt def min_euclidean_distance(n, a): min_distance = float(\'inf\') for i in range(n - 1): for j in range(i + 1, n): distance = sqrt((i - j)**2 + (a[i] - a[j])**2) if distance < min_distance: min_distance = distance return round(min_distance, 6)"},{"question":"You are provided with a list of strings and a list of characters. The goal is to determine if each character in the list of characters can be mapped to at least one unique string in the list of strings such that no two different characters map to the same string. Write a program to handle the following queries: 1. For a query of the first type (`1 s`), add the string `s` to the list of strings. 2. For a query of the second type (`2 c`), add the character `c` to the list of characters. 3. For a query of the third type (`3`), check if a valid mapping exists from the list of characters to the list of strings. Print \\"YES\\" if such a mapping is possible, otherwise print \\"NO\\". The first line of the input contains an integer `n` denoting the number of queries, (1 ≤ n ≤ 100). Each of the following lines contains a query as described above. Each string can have up to 100 characters, and all characters in the input are lowercase English letters. No query will add the same string or character more than once. For each query of the third type, print \\"YES\\" or \\"NO\\" on a separate line depending on the answer.","solution":"def handle_queries(queries): Handles a series of queries to add strings, add characters, and check if a valid mapping exists. Args: queries (list of str): List of queries in the format specified in the task. Returns: list of str: List of results for each query of the third type. strings = set() chars = set() results = [] for query in queries: parts = query.split() if parts[0] == \'1\': strings.add(parts[1]) elif parts[0] == \'2\': chars.add(parts[1]) elif parts[0] == \'3\': if len(chars) <= len(strings): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"# Problem Statement Lucy\'s cousin Lilla loves collecting rare gemstones. Lilla has recently received a collection of gemstone fragments represented as a string of lowercase letters. Each letter in the string stands for a specific type of gemstone fragment. Lilla has observed that the collection of fragments forms a repetitive pattern and wants to identify the smallest repeating unit that forms the entire collection string. For example, if Lilla\'s gemstone fragments are represented by the string `abcabcabcabc`, the smallest repeating unit would be `abc`. Suppose Lilla gives you a string `g` of length `n`, where `1 leq n leq 1000`. Your task is to help Lilla determine the smallest repeating unit of this string. If the string does not have any repeating unit other than itself, then the smallest repeating unit is the string itself. # Input Format - The first line contains an integer `t` (1 leq t leq 100), the number of test cases. - Each of the next `t` lines contains a single string `g` of length `n` (1 leq n leq 1000), consisting of lowercase English letters. # Output Format - For each test case, output a single line with the smallest repeating unit of the given string `g`. # Example Input ``` 3 abcabcabcabc abababab abcdef ``` Output ``` abc ab abcdef ``` # Explanation In the first test case, the string `abcabcabcabc` can be divided into `abc` repeated 4 times. Thus, the smallest repeating unit is `abc`. In the second test case, the string `abababab` can be divided into `ab` repeated 4 times. Thus, the smallest repeating unit is `ab`. In the third test case, the string `abcdef` does not have any repeating unit other than itself, so the smallest repeating unit is `abcdef`.","solution":"def smallest_repeating_unit(g): Determines the smallest repeating unit of the given string g. If no repeating unit exists other than the string itself, returns the string g. n = len(g) for i in range(1, n//2 + 1): if n % i == 0: if g[:i] * (n // i) == g: return g[:i] return g def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of results for the smallest repeating unit. results = [] for g in test_cases: results.append(smallest_repeating_unit(g)) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has an integer value associated with it. The value of each connected component of the graph is defined as the maximum integer value among all the nodes in that connected component. Your task is to find the sum of the values of all connected components in the graph. **Input:** - The first line contains two integers n and m (1 leq n, m leq 100) — the number of nodes and edges respectively. - The second line contains n space-separated integers v_1, v_2, ldots, v_n (0 leq v_i leq 100) where v_i is the value associated with the i-th node. - The next m lines contain two integers each u_i and v_i (1 leq u_i, v_i leq n) representing an edge between nodes u_i and v_i. **Output:** - Print a single integer — the sum of the values of all connected components in the graph. **Example:** **Input:** ``` 5 3 1 2 3 4 5 1 2 2 3 4 5 ``` **Output:** ``` 8 ``` **Explanation:** In the given example, there are two connected components. The first component is formed by nodes 1, 2, and 3 with values [1, 2, 3]. The maximum value in this component is 3. The second component is formed by nodes 4 and 5 with values [4, 5]. The maximum value in this component is 5. The sum of the maximum values of all connected components is 3 + 5 = 8.","solution":"def sum_of_connected_components_values(n, m, node_values, edges): from collections import defaultdict, deque # Create adjacency list adj_list = defaultdict(list) for u, v in edges: adj_list[u - 1].append(v - 1) adj_list[v - 1].append(u - 1) def bfs(start_node): q = deque([start_node]) max_value = node_values[start_node] visited[start_node] = True while q: node = q.popleft() for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True q.append(neighbor) max_value = max(max_value, node_values[neighbor]) return max_value visited = [False] * n total_sum = 0 for i in range(n): if not visited[i]: total_sum += bfs(i) return total_sum"},{"question":"Alice and Bob have recently taken an interest in playing with sequences. Today, Alice challenged Bob with a task related to bitwise operations on sequences. Bob has an array of integers of length n. He needs to perform the following operation on each pair of adjacent elements in the array exactly once: Compute the bitwise AND of each adjacent pair of elements and store the result in a new array of length n-1. Given this new array, Bob must repeat the same operation until only one element is left in the array. The challenge for Bob is to find the last remaining element in the array after performing the operations. Help Bob by writing a function that takes the initial array as input and returns the last remaining element after applying the described operations. The first line contains a single integer n (1 ≤ n ≤ 1000) — the length of the initial array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the elements of the initial array. Return the last remaining element after continuously performing the bitwise AND operation on adjacent elements. # Example ``` Input: 4 5 3 8 6 Output: 0 Explanation: First step: [ 5 & 3, 3 & 8, 8 & 6 ] => [1, 0, 0] Second step: [ 1 & 0, 0 & 0 ] => [0, 0] Third step: [ 0 & 0 ] => [0] ``` ``` Input: 3 7 6 1 Output: 0 Explanation: First step: [ 7 & 6, 6 & 1 ] => [6, 0] Second step: [ 6 & 0 ] => [0] ```","solution":"def last_remaining_element(n, arr): Returns the last remaining element after continuously applying the bitwise AND operation on adjacent elements. while len(arr) > 1: arr = [arr[i] & arr[i+1] for i in range(len(arr) - 1)] return arr[0]"},{"question":"You are given an array of integers where each element represents the height of a bar in a histogram. The width of each bar is 1. You need to determine the area of the largest rectangle that can be formed within the histogram. Write a function to find the maximum rectangular area under the histogram. # Input - An integer `n` (1 ≤ n ≤ 100,000): the number of bars in the histogram. - An array of `n` integers where each integer represents the height `h` of the bar (1 ≤ h ≤ 10,000). # Output - A single integer representing the area of the largest rectangle that can be formed within the histogram. # Example ```python Input: 7 2 1 5 6 2 3 4 Output: 10 ``` # Explanation In the example, the largest rectangle area is formed by taking the height of 2 and width of 5 (corresponding to heights 5, 6, and 2 appearing contiguously). Thus, the area is 2 * 5 = 10. # Notes - The function should be efficient in terms of time complexity to handle the upper limit of input size. - You should use appropriate data structures and algorithms to ensure optimal performance.","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle that can be formed within the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"King Carlos is building a new castle and he wants to design a unique arrangement of rooms. Each room is connected by hallways, and he wants to ensure that the design is practical and efficient. The castle can be represented as a graph where rooms are nodes and hallways are edges. The rooms are numbered from 1 to n. King Carlos wants to plan the construction in such a way that his advisor, the architect, can easily navigate from one room to any other room in the castle. To simplify the cost calculations, the architect will only consider two types of plans: 1. The construction must add hallways to ensure that the graph is connected. 2. For each room, the total number of hallways connected to that room should not exceed a given limit d. If it is not possible to connect all rooms under given constraints, the architect needs to inform King Carlos about it. The first line contains three integers n, m, and d (1 ≤ n ≤ 1000, n-1 ≤ m ≤ 2000, 1 ≤ d ≤ n-1) — the number of rooms, the number of existing hallways, and the maximum degree limit for each room. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) indicating that there is a hallway between room u and room v. Determine if it\'s possible to design the castle under the given constraints. If it\'s possible, print \\"Yes\\". Otherwise, print \\"No\\". # Example Input: ``` 4 3 2 1 2 2 3 3 4 ``` Output: ``` Yes ``` Input: ``` 4 2 1 1 2 3 4 ``` Output: ``` No ``` Explanation: In the first input, we can see that each room has at most 2 hallways and all rooms are connected. In the second input, it\'s not possible to connect all rooms because of the degree limit d = 1.","solution":"def is_possible_to_connect(n, m, d, edges): from collections import defaultdict, deque # Adjacency list for the graph graph = defaultdict(list) # Degree of each node degree = [0] * (n + 1) # Build the graph and track the degree of each node for u, v in edges: graph[u].append(v) graph[v].append(u) degree[u] += 1 degree[v] += 1 # Check if there is any node that has a degree exceeding the limit d for i in range(1, n + 1): if degree[i] > d: return \\"No\\" # Function to check if the graph is connected def is_connected(): visited = [False] * (n + 1) queue = deque([1]) visited[1] = True count = 0 while queue: node = queue.popleft() count += 1 for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return count == n # Check if all nodes are connected if is_connected(): return \\"Yes\\" else: return \\"No\\""},{"question":"Anna has found a peculiar set of operations she can perform on a string. She can choose any two adjacent characters in the string and swap them if one of them is \'R\' and the other is \'L\'. Given a string s consisting of only the characters \'R\' and \'L\', Anna wants to know the minimal number of such operations needed to make all \'R\' characters appear before all \'L\' characters. The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the length of string s. The second line contains a string s of length n consisting only of letters \'R\' and \'L\'. Print a single integer — the minimum number of operations needed to arrange the string such that all \'R\' characters are before all \'L\' characters.","solution":"def min_operations_to_sort_rl(s): This function returns the minimum number of operations needed to arrange the string such that all \'R\' characters are before all \'L\' characters. n = len(s) # rl_pairs counts the number of \'RL\' adjacent pairs in the string rl_pairs = sum(1 for i in range(n - 1) if s[i] == \'R\' and s[i + 1] == \'L\') # Each \'RL\' pair can be fixed with one swap return rl_pairs"},{"question":"You are developing a system that allows users to filter a list of products based on multiple attributes. The list of products is represented as an array of dictionaries, where each dictionary contains key-value pairs representing the attributes and their values. Write a function `filter_products(products, filters)` that filters the list of products based on the given filters. The `products` parameter is a list of dictionaries representing the products. Each product dictionary contains various attributes as key-value pairs, where the keys are strings and values can be strings or integers. The `filters` parameter is a dictionary where the keys are attributes and the values are the desired values for those attributes. The function should return a list of products that match all the given filters. If a filter attribute is not present in a product\'s dictionary, the product should be excluded from the result. # Input - `products`: A list of products, where each product is represented as a dictionary with attribute key-value pairs. The length of the list does not exceed 1000. - `filters`: A dictionary representing the filters, where keys are attribute names and values are the desired values for those attributes. # Output - A list of products that match all the given filters. Each product in the output list should be represented as a dictionary. # Example ```python products = [ {\\"name\\": \\"Laptop\\", \\"brand\\": \\"Dell\\", \\"price\\": 800}, {\\"name\\": \\"Smartphone\\", \\"brand\\": \\"Apple\\", \\"price\\": 1200}, {\\"name\\": \\"Laptop\\", \\"brand\\": \\"Apple\\", \\"price\\": 1500}, {\\"name\\": \\"Tablet\\", \\"brand\\": \\"Samsung\\", \\"price\\": 600}, ] filters = { \\"brand\\": \\"Apple\\", \\"price\\": 1500 } print(filter_products(products, filters)) # Output: [{\\"name\\": \\"Laptop\\", \\"brand\\": \\"Apple\\", \\"price\\": 1500}] ``` # Constraints - Product attributes and filter values will always be of the type string or integer. - The filters dictionary will not be empty. - Attribute names and values are case sensitive. - There can be at most 10 attributes per product. - Attribute names will not contain special characters or spaces. Your task is to implement the `filter_products` function.","solution":"def filter_products(products, filters): Filters the list of products based on the given filters. Parameters: products (list): A list of dictionaries representing products. filters (dict): A dictionary representing the filter attributes. Returns: list: A list of dictionaries representing the filtered products. filtered_products = [] for product in products: is_match = True for key, value in filters.items(): if key not in product or product[key] != value: is_match = False break if is_match: filtered_products.append(product) return filtered_products"},{"question":"You are given an integer array `arr` of size `n` and an integer `k`. Your task is to determine if there is any subarray of size `k` such that the sum of its elements equals zero. A subarray is a contiguous part of an array. For example, given the array `[1, 2, -3, 4, 5]`, the subarrays of size 3 are `[1, 2, -3]`, `[2, -3, 4]`, and `[-3, 4, 5]`. # Input: - The first line contains two integers `n` and `k` separated by a space. (`1 <= k <= n <= 100000`). - The second line contains `n` integers representing the elements of the array `arr`. # Output: - Print \\"YES\\" if there exists at least one subarray of size `k` whose sum is zero, otherwise print \\"NO\\". # Example: Input 1: ``` 5 3 1 2 -3 4 5 ``` Output 1: ``` YES ``` Input 2: ``` 5 2 1 2 3 4 5 ``` Output 2: ``` NO ``` # Explanation: In the first example, the subarray `[1, 2, -3]` has a sum of zero, therefore the output is \\"YES\\". In the second example, no subarray of size 2 has a sum of zero, thus the output is \\"NO\\".","solution":"def subarray_sum_zero(n, k, arr): Returns \\"YES\\" if there is a subarray of size k whose sum is zero, otherwise \\"NO\\". if k > n: return \\"NO\\" # Compute the sum of the first subarray of size k current_sum = sum(arr[:k]) if current_sum == 0: return \\"YES\\" # Use a sliding window to check sums of other subarrays of size k for i in range(k, n): current_sum += arr[i] - arr[i - k] if current_sum == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers. Determine if the list is a permutation of the first `n` natural numbers (1 to n) for some integer n. The input will consist of a single list of integers `lst`. The length of the list will be between 1 and 1000 inclusive. Each element in the list will be between 1 and 1000 inclusive. Output \\"YES\\" if the list is a permutation of the first `n` natural numbers for some integer n, and \\"NO\\" otherwise (quotes for clarity only). Examples: 1. If the input list is `[1, 2, 3, 4, 5]`, the output should be \\"YES\\". 2. If the input list is `[1, 3, 4, 6]`, the output should be \\"NO\\". 3. If the input list is `[3, 2, 1]`, the output should be \\"YES\\" because it is a permutation of the natural numbers from 1 to 3.","solution":"def is_permutation(lst): Determines if the list lst is a permutation of the first n natural numbers. Args: lst (list of int): List of integers to check. Returns: str: \\"YES\\" if the list is a permutation of the first n natural numbers, \\"NO\\" otherwise. n = len(lst) return \\"YES\\" if sorted(lst) == list(range(1, n + 1)) else \\"NO\\""},{"question":"You are given two integers n and k. You have to construct a matrix with n rows and k columns such that every cell of the matrix contains a positive integer and the sum of every row is distinct. Consider the following constraints: 1. 1 ≤ n, k ≤ 100 2. The positive integers in the matrix should be as small as possible. Return the matrix satisfying the above conditions. Input: - The first line contains two integers n and k. Output: - n lines, each containing k integers representing the rows of the matrix. Example: Input: 3 3 Output: 1 1 2 1 2 1 2 1 1 Explanation: The sum of each row in the example matrix is distinct: - First row sum: 1 + 1 + 2 = 4 - Second row sum: 1 + 2 + 1 = 4 - Third row sum: 2 + 1 + 1 = 4","solution":"def construct_matrix(n, k): Construct a matrix with n rows and k columns such that every cell contains a positive integer and the sum of every row is distinct. Parameters: n - number of rows k - number of columns Returns: A list of lists representing the matrix. matrix = [] base_value = 1 for i in range(n): row = [base_value + j for j in range(k)] # Increment the start of each row to ensure unique row sums base_value += 1 matrix.append(row) return matrix"},{"question":"Given a string `s` consisting only of lowercase English letters, you are allowed to perform `k` operations on the string. In each operation, you can choose a non-empty substring of `s`, and rearrange the characters in that substring in any order. The task is to determine the lexicographically smallest string you can obtain after performing at most `k` operations. # Input - The first line contains a string `s` (1 ≤ |s| ≤ 1000) consisting of lowercase English letters. - The second line contains an integer `k` (1 ≤ k ≤ 1000) representing the maximum number of operations you can perform. # Output - Output the lexicographically smallest string that can be obtained after at most `k` operations. # Example Input ``` cba 2 ``` Output ``` acb ``` Explanation In the given example, you can perform the following operations: 1. Choose the whole string \\"cba\\" and rearrange it to \\"abc\\". 2. No further operations are needed as \\"abc\\" is the lexicographically smallest string that can be obtained.","solution":"def lexicographically_smallest_string(s, k): if k == 1: # Rotate the string and find the smallest rotation return min(s[i:] + s[:i] for i in range(len(s))) else: # If k >= 2, we can simply sort the string to get the smallest lexicographically return \'\'.join(sorted(s))"},{"question":"You are tasked with writing a program to help Alice navigate a magical grid. This grid is an `n x n` matrix where each cell either contains a positive integer value representing the strength of a magic portal or a negative integer value representing an obstacle. Alice starts at the top-left cell (1, 1) and her goal is to reach the bottom-right cell (n, n). She can only move to the right or downward from any cell. However, there\'s a twist: Alice\'s total \\"magic power\\" determines her ability to reach a cell. She starts with a magic power of `0`, and the value of a cell affects her magic power as follows: - If Alice steps on a cell with a positive integer value `v`, her magic power increases by `v`. - If Alice steps on a cell with a negative integer value `-v`, her magic power decreases by `v`. Alice can only move to a cell if her magic power is non-negative after the move. Your task is to determine whether Alice can reach the bottom-right cell (n, n) starting from the top-left cell (1, 1). The first line of input contains a single integer `n` (1 ≤ n ≤ 100), representing the size of the grid. The next `n` lines each contain `n` integers, separated by spaces, representing the values of the cells in the grid. Print \\"YES\\" if Alice can reach the bottom-right cell (n, n) with a non-negative magic power at all times. Otherwise, print \\"NO\\". **Example:** ``` Input: 3 1 -2 3 1 -1 -1 4 2 2 Output: YES ``` **Explanation:** In this example, one possible path is: - Start at (1, 1) with value 1 (magic power = 1) - Move down to (2, 1) with value 1 (magic power = 2) - Move down to (3, 1) with value 4 (magic power = 6) - Move right to (3, 2) with value 2 (magic power = 8) - Move right to (3, 3) with value 2 (magic power = 10) All moves lead to non-negative magic power, so the output is \\"YES\\".","solution":"def can_alice_reach_end(n, grid): directions = [(0, 1), (1, 0)] dp = [[-float(\'inf\')] * n for _ in range(n)] dp[0][0] = max(0, grid[0][0]) for i in range(n): for j in range(n): if dp[i][j] == -float(\'inf\'): continue for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < n and 0 <= nj < n: new_power = dp[i][j] + grid[ni][nj] if new_power >= 0: dp[ni][nj] = max(dp[ni][nj], new_power) return \\"YES\\" if dp[n-1][n-1] >= 0 else \\"NO\\""},{"question":"You are given a binary tree where each node contains a value along with an associated positive weight. The weight of a path is defined as the sum of the weights of the nodes included in the path. A path is a sequence of nodes starting from the root and moving only downwards to any leaf node. Your task is to find the path with the maximum weight within the binary tree. If there are multiple paths with the same maximum weight, return any one of them. Write a function `max_weight_path(root: Optional[TreeNode]) -> List[int]` which takes the root of the binary tree as input and returns the path with the maximum weight as a list of node values. Assume the input tree nodes have a structure `TreeNode` defined as: ```python class TreeNode: def __init__(self, val: int = 0, weight: int = 0, left: Optional[\'TreeNode\'] = None, right: Optional[\'TreeNode\'] = None): self.val = val self.weight = weight self.left = left self.right = right ``` # Example: ``` Input: 1(5) / 2(3) 3(2) / 4(6) Output: [1, 2, 4] Explanation: The maximum weight path is 1(5) -> 2(3) -> 4(6) with a weight sum of 14. ``` # Constraints: - The number of nodes in the tree is in the range `[1, 1000]`. - Each node\'s value and weight is an integer in the range `[1, 10^4]`.","solution":"from typing import Optional, List class TreeNode: def __init__(self, val: int = 0, weight: int = 0, left: Optional[\'TreeNode\'] = None, right: Optional[\'TreeNode\'] = None): self.val = val self.weight = weight self.left = left self.right = right def max_weight_path(root: Optional[TreeNode]) -> List[int]: def helper(node: TreeNode): if not node: return (0, []) # base case: (weight sum, path) left_weight, left_path = helper(node.left) right_weight, right_path = helper(node.right) if left_weight > right_weight: return (node.weight + left_weight, [node.val] + left_path) else: return (node.weight + right_weight, [node.val] + right_path) _, path = helper(root) return path"},{"question":"Arkady has a collection of n distinct integers. He wants to choose a subsequence from his collection such that the sum of the subsequence is as close as possible to a given integer k. It\'s not necessary that the sum is equal to k, but it should be the closest possible to k. Given the integer collection and the desired sum, find the closest possible sum of any subsequence to k. If there are multiple subsequences with the same closest sum, return the smallest such sum. The first line contains two integers n and k (1 le n le 40, 0 le k le 10^9) — the number of integers in Arkady\'s collection and the desired sum. The second line contains n integers, each between 1 and 10^9, representing Arkady\'s collection. Output the closest possible sum of any subsequence to k. Consider the first example. Arkady has a collection of 5 integers: 1, 2, 3, 4, 5, and the desired sum k = 10. The closest possible sum to 10 using any subsequence is 10 (by choosing the subsequence {1, 2, 3, 4}). In the second example, the collection is the same as in the first example, but the desired sum k = 7. The closest possible sum to 7 using any subsequence is 7 (by choosing the subsequence {2, 5}). In the third example, if Arkady\'s collection is 6, 1, 2 and k = 10, the closest possible sum is 9 (by choosing the subsequence {6, 2, 1}).","solution":"def closest_subsequence_sum(n, k, collection): from itertools import chain, combinations def all_subsequences(arr): return chain.from_iterable(combinations(arr, r) for r in range(len(arr) + 1)) all_sums = sorted(set(sum(seq) for seq in all_subsequences(collection))) closest_sum = None min_diff = float(\'inf\') for s in all_sums: diff = abs(s - k) if diff < min_diff or (diff == min_diff and (closest_sum is None or s < closest_sum)): min_diff = diff closest_sum = s return closest_sum # Example usage: # n, k = 5, 10 # collection = [1, 2, 3, 4, 5] # print(closest_subsequence_sum(n, k, collection)) # Output: 10"},{"question":"You are given an array of integers, and your task is to classify the elements based on their frequencies of occurrence and display the top k most frequent elements. If two elements have the same frequency, the smaller number should come first. The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n) — the number of elements in the array and the number of top frequent elements to display, respectively. The second line contains n integers separated by spaces — the elements of the array. Output the top k most frequent elements in sorted order based on their frequencies, with ties broken by smaller element values. # Input - The first line contains two integers n and k. - The second line contains n space-separated integers, representing the array elements. # Output - Output the top k most frequent elements in sorted order by their frequencies with ties resolved by smaller element values. # Example Input ``` 10 3 4 1 2 2 3 3 3 4 4 4 ``` Output ``` 4 3 2 ``` Explanation - Element 4 appears 4 times. - Element 3 appears 3 times. - Element 2 appears 2 times. - Element 1 appears 1 time. Since you need the top 3 most frequent elements, the output is \\"4 3 2\\".","solution":"from collections import Counter def top_k_frequent_elements(n, k, elements): Returns the top k most frequent elements in the array in sorted order by their frequencies. In case of ties, the smaller element value comes first. :param n: int, number of elements in the array :param k: int, number of top frequent elements to display :param elements: list, the elements of the array :return: list, top k most frequent elements # Count the frequency of each element in the array frequency = Counter(elements) # Convert the frequency dictionary to a list of tuples and sort it sorted_freq = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) # Extract the top k elements top_k_elements = [element for element, count in sorted_freq[:k]] return top_k_elements"},{"question":"You are given a rectangular grid with `n` rows and `m` columns. Each cell in the grid can either be empty or blocked. You start at the top-left corner (cell (1, 1)) and want to reach the bottom-right corner (cell (n, m)). You can only move to the right or down. Determine the number of unique paths that will take you from the starting point to the destination without passing through any blocked cells. As the number of ways can be very large, return the answer modulo 1000000007 (10^9 + 7). # Input Format: - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) - the dimensions of the grid. - The next `n` lines each contain `m` characters, where each character is either \'.\' representing an empty cell or \'#\' representing a blocked cell. # Output Format: - Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner modulo 1000000007. # Constraints: - There is at least one empty cell in the top-left corner and the bottom-right corner. # Example: Input: ``` 4 5 ...#. .#... ..#.. .#... ``` Output: ``` 3 ``` Explanation: The three unique paths are: 1. Right, Right, Down, Down, Down, Right, Right. 2. Right, Down, Right, Right, Down, Down, Right. 3. Down, Down, Right, Right, Up, Right, Right, Down.","solution":"def unique_paths(n, m, grid): MOD = 1000000007 # Initialize a 2D dp array with zeros dp = [[0] * m for _ in range(n)] # Set the starting point dp[0][0] = 1 if grid[0][0] == \'.\' else 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] dp[i][j] %= MOD # The answer is in the bottom-right corner return dp[-1][-1]"},{"question":"A group of friends decided to conduct a programming challenge. They each created a number of problems and had fun solving them. However, they want to standardize the scores assigned to their problems based on difficulty. Each problem is assigned a difficulty level which is represented by an integer d_i (1 ≤ d_i ≤ 10). Given a set of problems and their respective difficulty levels, the group wants to identify which difficulty level occurs the most frequently and assign it as the \\"dominant difficulty level\\". If there is a tie between difficulty levels, the smallest difficulty level should be chosen as the dominant one. Your task is to write a function, `dominant_difficulty` that takes a list of integers where each integer represents the difficulty level of a problem and returns the dominant difficulty level as described above. # Function Signature ```python def dominant_difficulty(problems: List[int]) -> int: ``` # Input - `problems`: A list of integers representing the difficulty levels of the problems (1 ≤ |problems| ≤ 1000). # Output - An integer representing the dominant difficulty level. # Example ```python print(dominant_difficulty([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])) # Output: 4 print(dominant_difficulty([1, 1, 2, 2, 3, 3])) # Output: 1 ``` # Explanation 1. In the first example: - Difficulty level 1: occurs 1 time - Difficulty level 2: occurs 2 times - Difficulty level 3: occurs 3 times - Difficulty level 4: occurs 4 times The most frequent difficulty level is 4. 2. In the second example: - Difficulty level 1: occurs 2 times - Difficulty level 2: occurs 2 times - Difficulty level 3: occurs 2 times There is a tie, so the smallest difficulty level is chosen, which is 1.","solution":"from typing import List from collections import Counter def dominant_difficulty(problems: List[int]) -> int: Given a list of integers representing difficulty levels of problems, returns the dominant difficulty level. if not problems: raise ValueError(\\"The list of problems should not be empty\\") difficulty_counts = Counter(problems) dominant_level = min(difficulty_counts, key=lambda x: (-difficulty_counts[x], x)) return dominant_level"},{"question":"A new social media platform called \\"Chirper\\" keeps track of the number of comments made on several posts. Each post can have comments made by users at any time. Due to an update mistake, some comments were counted multiple times, and now the developers need to clean up the data. You are given n posts, each with a list of timestamps representing when comments were made. Your task is to remove duplicate timestamps for each post and then count the actual unique comments per post. Write a function to clean the data and return the number of unique comments for each post. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of posts. The next n lines describe the comments on each post. Each line starts with an integer mi (1 ≤ mi ≤ 100) denoting the number of comments on the i-th post, followed by mi space-separated integers ti (0 ≤ ti ≤ 10⁹) representing the timestamps of the comments. Print n integers, each representing the number of unique comments for each post in the same order they were given. # Example Input: ``` 3 5 1 1 2 3 4 4 2 2 2 5 3 7 8 8 ``` Output: ``` 4 2 2 ``` In the first test case, there are 5 comments on the first post, but two comments are duplicates. Hence, the unique comment timestamps are [1, 2, 3, 4]. In the second test case, there are 4 comments on the second post, but three comments have the same timestamp. So, the unique timestamps are [2, 5]. In the third test case, there are 3 comments on the third post, with one duplicate timestamp. Hence, the unique timestamps are [7, 8].","solution":"def clean_data(n, posts): Removes duplicate timestamps for each post and returns the number of unique comments per post. Parameters: n (int): Number of posts. posts (list of list): List where each element is a list of timestamps for each post. Returns: list of int: Number of unique comments for each post. result = [] for post in posts: unique_comments = len(set(post)) result.append(unique_comments) return result def chirper(input_data): lines = input_data.strip().split(\'n\') n = int(lines[0].strip()) posts = [] for index in range(1, n + 1): parts = list(map(int, lines[index].strip().split())) mi = parts[0] timestamps = parts[1:mi + 1] posts.append(timestamps) return clean_data(n, posts)"},{"question":"A city is represented by an n × n grid. Each cell in the grid either contains a building (denoted by the character \'B\') or is an empty plot (denoted by the character \'.\'). A city park is planned to be built on some of the empty plots such that it forms a rectangular area that does not contain any buildings. Your task is to find the largest possible rectangular area for the park that can be created on the empty plots. The rectangular park must fit entirely within the grid and must not overlap any cells containing buildings. The first line contains an integer n (1 ≤ n ≤ 50) — the size of the grid. Each of the next n lines contains n characters, where each character is either \'B\' (building) or \'.\' (empty plot). Print the area of the largest possible rectangular park that can be built. If there is no space for a park, print 0. **Example:** Input: ``` 5 ..B.. ..B.. ...B. .B... ...B. ``` Output: ``` 6 ```","solution":"def largest_rectangle_area(matrix): def max_histogram(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area if not matrix: return 0 n = len(matrix) m = len(matrix[0]) height = [0] * m max_area = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'.\': height[j] += 1 else: height[j] = 0 max_area = max(max_area, max_histogram(height)) return max_area # Example usage: n = 5 grid = [ \\"..B..\\", \\"..B..\\", \\"...B.\\", \\".B...\\", \\"...B.\\" ] matrix = [list(row) for row in grid] print(largest_rectangle_area(matrix)) # Output should be 6"},{"question":"You are given an array of n integers. Your task is to find a maximum length of subarray such that it holds at least one even and one odd number. The first line of input contains a single integer n (1 le n le 10^5) — the size of the array. The second line contains n integers separated by spaces, where each integer is between 1 and 10^9 inclusive. Output a single integer — the maximum length of the subarray containing at least one even and one odd number. If no such subarray exists, return 0. # Example: Input: ``` 5 1 2 4 3 5 ``` Output: ``` 5 ``` Input: ``` 4 2 4 6 8 ``` Output: ``` 0 ``` Input: ``` 3 1 1 1 ``` Output: ``` 0 ``` # Explanation: In the first example, the entire array contains both even and odd numbers, so the output is the length of the array, which is 5. In the second example, there are no odd numbers in the array, so the output is 0. In the third example, there are no even numbers in the array, so the output is 0.","solution":"def max_length_subarray_with_even_and_odd(n, arr): Return the maximum length of a subarray that contains at least one even and one odd number. has_even = False has_odd = False for num in arr: if num % 2 == 0: has_even = True else: has_odd = True if has_even and has_odd: return n return 0"},{"question":"Matt runs a company that assembles custom furniture. He has received several orders for tables with specific heights. Matt has some wooden planks of various lengths that he can use to fulfill these orders. He wants to cut the planks into pieces such that he can assemble the tables with exactly the requested heights. Each table requires a single piece of wood of the precise height. He cannot join pieces together to make a longer piece. Given the lengths of the planks and the requested heights for the tables, determine the maximum number of tables Matt can assemble. The first line of the input contains two integers p and t (1 le p, t le 2 cdot 10^5) — the number of wooden planks and the number of table orders. The second line of the input contains p integers l_1, l_2, dots, l_p (1 le l_i le 10^9), where l_i is the length of the i-th wooden plank. The third line of the input contains t integers h_1, h_2, dots, h_t (1 le h_i le 10^9), where h_i is the height of the i-th table required. Print the maximum number of tables Matt can assemble with the planks he has. For example: Input: ``` 5 4 7 10 3 8 5 8 3 5 7 ``` Output: ``` 4 ``` Explanation: Matt can cut the planks into pieces of lengths 8, 3, 5, and 7, satisfying all the table height requirements exactly. Thus, he can assemble 4 tables.","solution":"def max_tables(planks, heights): planks.sort() heights.sort() i, j = 0, 0 count = 0 while i < len(planks) and j < len(heights): if planks[i] >= heights[j]: count += 1 j += 1 i += 1 return count"},{"question":"In your gaming company, you have been assigned the task of developing a new game feature. The game world consists of a rectangular grid of characters, where each character represents a different type of terrain. The game includes a hero, who must travel from a starting point to a destination point on this grid. The hero can only traverse certain types of terrains based on specific rules provided. You are to write a program to determine if there exists a path for the hero to reach the destination from the starting point while following the terrain traversal rules. The hero can move up, down, left, or right. Diagonal movements are not allowed. You are given a grid of n rows and m columns, where each cell contains a character representing the type of terrain. The hero starts at the top left corner cell (0,0) and the destination is the bottom right corner cell (n-1,m-1). Additionally, you are provided with a set of characters representing the terrains the hero can traverse. Write a function `can_traverse(grid: List[List[str]], valid_terrains: Set[str]) -> bool` that returns `True` if the hero can reach the destination cell by traversing only the valid terrains, otherwise returns `False`. # Input: - `grid`: A list of n lists, each containing m characters, representing the terrain grid (1 ≤ n, m ≤ 100). - `valid_terrains`: A set of characters, where each character is a terrain type the hero can traverse (1 ≤ |valid_terrains| ≤ 26). # Output: - Return `True` if a path exists from the starting point to the destination point traversing only valid terrains. Otherwise, return `False`. # Example: ```python grid = [ [\'S\', \'a\', \'b\'], [\'c\', \'a\', \'d\'], [\'e\', \'a\', \'T\'] ] valid_terrains = {\'a\', \'b\', \'c\', \'d\', \'e\'} print(can_traverse(grid, valid_terrains)) # Output: True ``` In this example, the grid is a 3x3 matrix. The hero starts at (0,0) and needs to reach (2,2). The given set of valid terrains allows traversal through cells containing \'a\', \'b\', \'c\', \'d\', and \'e\'. Following the valid path through these terrains, the hero successfully reaches the destination, so the function returns `True`. Implement the function `can_traverse(grid: List[List[str]], valid_terrains: Set[str]) -> bool` to check if such a path exists.","solution":"from typing import List, Set def can_traverse(grid: List[List[str]], valid_terrains: Set[str]) -> bool: n, m = len(grid), len(grid[0]) if grid[0][0] not in valid_terrains or grid[n-1][m-1] not in valid_terrains: return False directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False for _ in range(m)] for _ in range(n)] def dfs(x, y): if x == n - 1 and y == m - 1: return True visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] in valid_terrains: if dfs(nx, ny): return True return False return dfs(0, 0)"},{"question":"You are given a list of intervals representing time intervals during which a meeting room is occupied. Each interval is represented as a pair of integers [start, end], where 0 <= start < end <= 1000. Your task is to find out the minimum number of meeting rooms required to accommodate all the meetings. Write a function `minMeetingRooms(intervals)` that takes a list of intervals and returns an integer denoting the minimum number of meeting rooms required. # Function Signature ```python def minMeetingRooms(intervals: List[List[int]]) -> int: ``` # Input - A single argument `intervals` is a list of `n` intervals, where `1 <= n <= 10^4` and each interval is a list of two integers `[start, end]`. # Output - Return a single integer representing the minimum number of meeting rooms required. # Example Example 1 Input: ```python intervals = [[0, 30], [5, 10], [15, 20]] ``` Output: ```python 2 ``` Explanation: Two rooms are required to host all the meetings. One is used for the interval [0, 30] and another for [5, 10], which overlaps with [0, 30], and then reused for [15, 20]. Example 2 Input: ```python intervals = [[7, 10], [2, 4]] ``` Output: ```python 1 ``` Explanation: Only one room is required as none of the intervals overlap.","solution":"from typing import List import heapq def minMeetingRooms(intervals: List[List[int]]) -> int: if not intervals: return 0 intervals.sort(key=lambda x: x[0]) min_heap = [intervals[0][1]] for i in range(1, len(intervals)): if intervals[i][0] >= min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, intervals[i][1]) return len(min_heap)"},{"question":"Many citizens of Gridland have taken up gardening as a hobby. Each gardener has a rectangular plot represented by a grid with N rows and M columns. Some cells in the grid may already contain flowers. Each gardener wants to plant saplings in the remaining empty cells such that no two saplings are adjacent to each other, neither horizontally, vertically, nor diagonally. The goal is to determine the maximum number of saplings that can be planted in the given grid. # Input - The first line of input contains two integers, N and M (1 leq N, M leq 1000), representing the dimensions of the grid. - The next N lines each contain M characters, representing the grid. Each character is either a \'F\' (which means a flower is already planted in that cell) or an \'E\' (which means the cell is empty). # Output - Output a single integer, the maximum number of saplings that can be planted. # Example Input ``` 3 4 E E E E E F E E E E E E ``` Output ``` 4 ``` # Explanation The optimal arrangement of planting saplings would be: ``` S E S E E F E E S E S E ``` Placing saplings (\'S\') in this way ensures no two saplings are adjacent and maximizes the number of saplings planted, which totals to 4 in this example.","solution":"def max_saplings(N, M, grid): Returns the maximum number of saplings that can be planted. saplings = [[0 for _ in range(M)] for _ in range(N)] count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'E\' and (i == 0 or saplings[i-1][j] != \'S\') and (j == 0 or saplings[i][j-1] != \'S\') and (i == 0 or j == 0 or saplings[i-1][j-1] != \'S\') and (i == 0 or j == M-1 or saplings[i-1][j+1] != \'S\'): saplings[i][j] = \'S\' count += 1 else: saplings[i][j] = \'E\' if grid[i][j] == \'E\' else \'F\' return count"},{"question":"You are given a list of integers representing the stock prices of a company in chronological order. Your task is to find the maximum profit that can be made by buying and selling the stock once. You can only buy the stock before you sell it, and you cannot buy and sell on the same day. The first line of the input contains a single integer n (1 ≤ n ≤ 100000) — the number of days for which stock prices are given. The second line contains n integers separated by spaces, representing the stock prices on each day. Each stock price is a positive integer not exceeding 10^5. Output a single integer, which is the maximum profit you can achieve. If no profit can be made, return 0. Example: Input: 7 7 1 5 3 6 4 Output: 5 Explanation: The maximum profit can be achieved by buying the stock on day 2 (price = 1) and selling it on day 5 (price = 6). Hence, the maximum profit is 6 - 1 = 5. If no profit can be achieved, the answer should be 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved by buying and selling the stock once. If no profit can be made, returns 0. :param prices: List of integers representing the stock prices on each day. :return: Integer, maximum profit if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"A city has a network of roads connecting various locations. Each road has a specific traffic capacity representing the maximum number of vehicles that can pass through it per unit time. Your task is to determine the maximum number of vehicles that can travel from a starting location (source) to a destination location (sink) without exceeding the capacities of the roads they use. The city map is represented as a directed graph where each node corresponds to a location and each directed edge corresponds to a road with a given capacity. You are given: - An integer `n`, the number of locations. - An integer `m`, the number of roads. - A list of triples `(u, v, c)` where `u` is the starting location of the road, `v` is the ending location, and `c` is the capacity of the road. Your task is to write a program that computes the maximum flow from the source (location 1) to the sink (location n). # Input - The first line contains two integers `n` (2 ≤ n ≤ 500) and `m` (1 ≤ m ≤ 5,000) — the number of locations and roads, respectively. - Each of the next `m` lines contains three integers `u`, `v`, and `c` (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1,000). Each triple describes a road from location `u` to location `v` with capacity `c`. The source node is always 1 and the sink node is always n. # Output - Print a single integer representing the maximum number of vehicles that can travel from the source to the sink without exceeding the capacities of the roads. # Example Input ``` 4 5 1 2 40 1 3 20 2 3 10 2 4 30 3 4 20 ``` Output ``` 50 ``` # Explanation In the example, there are 4 locations and 5 roads. To maximize the number of vehicles traveling from location 1 to location 4: - Send 40 vehicles from location 1 to 2. - From location 2, send 30 vehicles to location 4 and 10 vehicles to location 3. - These 10 vehicles from location 3 can also travel to location 4, making a total of 50 vehicles reaching location 4. This is an example of a maximum flow problem, which can be solved using algorithms like the Ford-Fulkerson method or the Edmonds-Karp implementation.","solution":"from collections import deque def bfs(capacity, source, sink, parent): Returns true if there is a path from source to sink in residual graph. Also fills parent to store the path. visited = [False] * len(capacity) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for ind, val in enumerate(capacity[u]): if not visited[ind] and val > 0: # if not yet visited and residual capacity > 0 queue.append(ind) visited[ind] = True parent[ind] = u if ind == sink: return True return False def edmonds_karp(n, edges): Returns the maximum flow from source (node 1) to sink (node n) using Edmonds-Karp algorithm which is an implementation of Ford-Fulkerson method. source = 1 sink = n # Make graph with 1-based indexing easier by adding an extra node at index 0 capacity = [[0] * (n + 1) for _ in range(n + 1)] for u, v, c in edges: capacity[u][v] += c # There can be multiple edges between two nodes parent = [-1] * (n + 1) max_flow = 0 while bfs(capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow"},{"question":"Marie wants to organize a workshop for children where they will learn about constructing networks. She has a set of nodes and wants to connect them using edges. Each edge has a certain weight and each node can only be connected to at most two other nodes, forming a tree-like structure. Given a set of nodes and a list of possible edges, determine the maximum possible sum of edge weights in a valid tree that includes every node exactly once. # Input: The first line contains an integer `n` (`1 ≤ n ≤ 1000`), the number of nodes. The second line contains an integer `m` (`0 ≤ m ≤ 10^4`), the number of edges. Each of the next `m` lines contains three integers `u`, `v` (`1 ≤ u, v ≤ n`, `u ≠ v`), and `w` (`0 ≤ w ≤ 10^6`), representing an edge between nodes `u` and `v` with weight `w`. # Output: Output the maximum possible sum of edge weights in a valid tree that includes every node exactly once. # Example: Input: ``` 4 5 1 2 3 1 3 2 2 3 4 3 4 1 2 4 5 ``` Output: ``` 12 ``` # Explanation: In this example, the chosen edges to form a tree with the maximum sum of weights are: - Edge between nodes 1 and 2 with weight 3 - Edge between nodes 2 and 3 with weight 4 - Edge between nodes 2 and 4 with weight 5 The total sum of edge weights is `3 + 4 + 5 = 12`.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def maximum_spanning_tree(n, edges): # Sort edges by weight in descending order edges.sort(key=lambda x: -x[2]) parent = [i for i in range(n + 1)] rank = [0] * (n + 1) max_weight_sum = 0 edge_count = 0 for u, v, w in edges: if find(parent, u) != find(parent, v): union(parent, rank, u, v) max_weight_sum += w edge_count += 1 if edge_count == n - 1: break return max_weight_sum"},{"question":"You are given an array of integers representing the heights of students standing in a line for a photograph. The heights are given in arbitrary order and you want to arrange them to look nice in the photograph. One way to achieve that is by sorting them. However, the photograph should also have an interesting property: any two adjacent students\' height difference should not exceed a given number k. Write a function that returns whether it is possible to rearrange the students such that the difference in height between any two adjacent students is at most k. The function should take the following inputs: 1. An integer array `heights` of length n (1 ≤ n ≤ 2000) representing the heights of the students. 2. An integer k (0 ≤ k ≤ 10^9) representing the maximum allowed height difference between any two adjacent students. The function should output: - \\"YES\\" if it is possible to rearrange the students to meet the above condition. - \\"NO\\" otherwise. **Example 1:** ```python heights = [3, 1, 4, 1, 5] k = 2 # Your function should return: # \\"YES\\" because the array can be rearranged to [1, 1, 3, 4, 5] which meets the condition. **Example 2:** ```python heights = [8, 1, 4, 7, 3] k = 2 # Your function should return: # \\"NO\\" because it\'s impossible to rearrange the array to meet the condition. ``` Function signature: ```python def canArrangeStudents(heights: List[int], k: int) -> str: # Your code here ```","solution":"from typing import List def canArrangeStudents(heights: List[int], k: int) -> str: Checks if it is possible to rearrange the students such that the difference in height between any two adjacent students is at most k. :param heights: List[int] - list of student heights :param k: int - maximum allowed height difference between any two adjacent students :return: str - \\"YES\\" if possible, \\"NO\\" otherwise heights.sort() for i in range(1, len(heights)): if heights[i] - heights[i-1] > k: return \\"NO\\" return \\"YES\\""},{"question":"Polycarp has a rectangular garden that measures w meters in width and h meters in height. He wants to divide his garden into the largest possible number of equal real square plots. The sides of these square plots must be parallel to the sides of the garden. The first line contains two integers w and h (1 ≤ w, h ≤ 10^4) — the width and the height of the garden in meters. Determine the side length of the largest possible square plot and the total number of such square plots that can fit into the garden. You need to print two integers: the side length of the largest square plot and the total number of such square plots. In the first sample, if the garden measures 6 by 4 meters, the side length of the largest possible square plot is 2 meters, and there can fit a total of 6 such square plots.","solution":"import math def largest_square_plot(w, h): Determines the side length of the largest possible square plot and the total number of such square plots that can fit into the garden. Parameters: w (int): Width of the garden. h (int): Height of the garden. Returns: tuple: (side length of the largest square plot, total number of square plots) # Compute the greatest common divisor of w and h side_length = math.gcd(w, h) # Compute the total number of square plots num_plots = (w // side_length) * (h // side_length) return side_length, num_plots"},{"question":"Mark is working on a secret project where he needs to process a list of integers. He has to find the number of tuples (i, j, l) such that ai + aj = l, where ai, aj and l are all distinct integers from the list. Additionally, ai and aj should have different indexes in the list. Help Mark to determine the number of such valid tuples in the list. Note that (i, j, l) and (j, i, l) are considered the same and should not be counted twice, regardless of the order of the indexes i and j. The first line contains a single integer n (3 ≤ n ≤ 2 * 104), where n is the size of the list. The second line contains n integers ai (1 ≤ ai ≤ 106) — the elements of the list. Print one integer — the number of valid tuples. In the first sample, there are two valid tuples: (1, 2, 5) and (2, 4, 1). In the second sample, there are no valid tuples.","solution":"def count_valid_tuples(n, nums): Count the number of tuples (i, j, l) such that ai + aj = l, and ai, aj, l are distinct integers with different indexes i and j. Parameters: - n (int): The size of the list. - nums (list of int): The list of integers. Returns: - int: The number of valid tuples. count = 0 num_set = set(nums) num_to_indices = {} for idx, num in enumerate(nums): if num not in num_to_indices: num_to_indices[num] = [] num_to_indices[num].append(idx) for i in range(n): for j in range(i+1, n): pair_sum = nums[i] + nums[j] if pair_sum in num_set: valid_l_indices = [k for k in num_to_indices[pair_sum] if k != i and k != j] count += len(valid_l_indices) return count"},{"question":"A company has recently implemented a new task distribution system. Each task is represented by an integer indicating its difficulty level. The company requires a system to distribute the tasks among employees in such a way that no employee receives two consecutive tasks of the same difficulty. You are given n tasks with difficulties represented as integers in the array a. Your goal is to redistribute the tasks such that no employee ends up with two consecutive tasks of the same difficulty. If it is possible to achieve such a distribution, print \\"YES\\" and the modified array of tasks. Otherwise, print \\"NO\\". Input Format: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of tasks. - The second line contains n space-separated integers representing the difficulty levels of the tasks a1, a2, ..., an (1 ≤ ai ≤ 10^9). Output Format: - If it’s possible to rearrange the tasks to meet the requirement, print \\"YES\\" followed by the adjusted list of tasks. - Otherwise, print \\"NO\\". Example: Input: 6 1 2 3 2 1 3 Output: YES 1 2 1 3 2 3 Explanation: One possible way to arrange the tasks is such that no two consecutive tasks have the same difficulty level. The given output sequence is one such example. If there are multiple solutions, any valid sequence can be printed. If no such arrangement is possible, the program should print \\"NO\\".","solution":"def redistribute_tasks(n, tasks): from collections import Counter import heapq if n == 1: return \\"YES\\", tasks task_count = Counter(tasks) max_task = max(task_count.values()) if max_task > (n + 1) // 2: return \\"NO\\", [] max_heap = [] for task, count in task_count.items(): heapq.heappush(max_heap, (-count, task)) result = [] while len(max_heap) > 1: count1, task1 = heapq.heappop(max_heap) count2, task2 = heapq.heappop(max_heap) result.append(task1) result.append(task2) if -count1 > 1: heapq.heappush(max_heap, (count1 + 1, task1)) if -count2 > 1: heapq.heappush(max_heap, (count2 + 1, task2)) if max_heap: count, task = heapq.heappop(max_heap) result.append(task) return \\"YES\\", result # Please note, unit tests and the other code sections should follow in their respective blocks."},{"question":"You have two ropes, each of different lengths but both with the special property that they take exactly 60 minutes to burn from one end to the other. However, the ropes do not burn at a uniform rate. For example, one half of a rope could take 59 minutes to burn while the other half takes 1 minute. You need to measure exactly 45 minutes using these ropes and a lighter. How will you do it? Write a function `measure_45_minutes` that accepts no parameters and returns a list of tuples. Each tuple consists of a string describing an action and the minute at which that action is performed. Possible actions are: - \\"light rope A at both ends\\" - \\"light rope B at both ends\\" - \\"light rope A at one end\\" - \\"light rope B at one end\\" For example: ```python def measure_45_minutes(): return [ (\\"light rope A at both ends\\", 0), (\\"light rope B at one end\\", 0), (\\"light rope B at both ends\\", 30) ] # This list of actions means to light rope A at both ends at time 0, light rope B at one end at time 0, and light rope B at both ends at time 30. ```","solution":"def measure_45_minutes(): This function returns a list of tuples. Each tuple consists of a string describing an action and the minute at which that action is performed. The solution measures exactly 45 minutes using two ropes. return [ (\\"light rope A at both ends\\", 0), (\\"light rope B at one end\\", 0), (\\"light rope B at both ends\\", 30) ]"},{"question":"A research group at a university is planning a study with a focus on student\'s performance. They want to analyze the participation in exams and how it affects their overall grades. To assist this research, you are required to write a program that helps in processing the student participation data. Each student has a participation record for a given number of exams. The participation is represented as a binary string where \'1\' indicates the student was present for that exam, and \'0\' indicates they were absent. Additionally, each student has an overall grade which can be an integer from 0 to 100. Given this, your task is to determine whether there exists at least one student who has been present for every exam. Input format: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of students. - The second line contains an integer m (1 ≤ m ≤ 30), the number of exams. - The next n lines each contain a string of length m (a binary string) followed by a space and then an integer grade (0 ≤ grade ≤ 100). Output format: - Print \\"YES\\" if there is at least one student who has participated in all the exams. - Print \\"NO\\" otherwise. Example: Input: 3 4 1111 90 1010 85 1111 95 Output: YES Explanation: There are three students, and the participation records show that students 1 and 3 have participated in all exams.","solution":"def has_full_participation(n, m, participation_data): Determines if there is at least one student who participated in every exam. :param n: int - Number of students :param m: int - Number of exams :param participation_data: List[Tuple[str, int]] - List of tuples with participation strings and grades :return: str - \\"YES\\" if there is at least one student who participated in all exams, \\"NO\\" otherwise for participation, grade in participation_data: if participation == \'1\' * m: return \\"YES\\" return \\"NO\\""},{"question":"You are given a grid with n times m cells. Each cell can either be empty or blocked. You have to perform several operations to navigate from a starting cell to a target cell. The possible operations are moving up, down, left, or right into an adjacent cell. Your goal is to determine the minimum number of steps required to reach the target cell from the starting cell. If it is not possible to reach the target cell, return -1. Each cell in the grid is represented by a character: - \'.\' represents an empty cell you can move into. - \'#\' represents a blocked cell you cannot move into. Input: - The first line contains two integers n and m (1 leq n, m leq 1000) — the number of rows and columns in the grid, respectively. - The next n lines each contain m characters, which describe the grid. - The next line contains four integers r_1, c_1, r_2, and c_2 (1 leq r_1, c_1, r_2, c_2 leq n, m) — the starting cell and the target cell, respectively. The grid coordinates are 1-based. Output: - Print a single integer — the minimum number of steps required to reach the target cell from the starting cell, or -1 if it is not possible. Example: Input: ``` 5 5 ..... .#. ..... .#. ..... 1 1 5 5 ``` Output: ``` 8 ``` In this problem, you will implement a function that determines the minimum number of steps needed to reach the target cell from the starting cell in a given grid using allowed moves. If there\'s no path, the function should return -1.","solution":"from collections import deque def min_steps(grid, start, target): n, m = len(grid), len(grid[0]) # Convert to 0-based index r1, c1 = start[0] - 1, start[1] - 1 r2, c2 = target[0] - 1, target[1] - 1 if grid[r1][c1] == \'#\' or grid[r2][c2] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(r1, c1, 0)]) # (row, col, steps) visited = set((r1, c1)) while queue: r, c, steps = queue.popleft() if (r, c) == (r2, c2): return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"You are given a sequence of n integers representing the heights of students in a class line-up. The class teacher wants the students to shift to the left such that the order of their heights becomes non-decreasing. You are allowed to perform only the following operation any number of times: choose any student and move them to the front of the line. Determine the minimum number of operations required to achieve a non-decreasing order of heights. The first line contains an integer n (1 ≤ n ≤ 2·10^5) — the number of students in the class line-up. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the students in the current line-up. Print the minimum number of operations required to make the heights non-decreasing. For example, in the first example, the sequence of students\' heights is [3, 1, 2, 1, 4]. Moving the second student (height 1) to the front once gives [1, 3, 2, 1, 4]. Moving the fourth student (height 1) to the front once more gives [1, 1, 3, 2, 4]. Finally, moving the third student (height 2) to the front gives [1, 1, 2, 3, 4], resulting in 3 operations. In the second example, the sequence of students\' heights is [4, 3, 2, 1]. Moving each student to the front once results in [1, 2, 3, 4] requiring 3 operations. Thus, the minimum number of operations required is 3. If the sequence is already non-decreasing, the output should be 0.","solution":"def min_operations_to_sort(n, heights): Returns the minimum number of operations required to sort the student heights in non-decreasing order by moving any student to the front. # Length of the longest non-decreasing subsequence max_len = 0 current_len = 1 for i in range(1, n): if heights[i] >= heights[i - 1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) return n - max_len"},{"question":"You are given a string s consisting of lowercase English letters and an integer k. You need to split the string into exactly k non-empty substrings such that the maximum size of any substring is minimized. Note that the order of characters must be maintained. Return the minimized maximum substring length after splitting the string into k parts. # Input: - The first line contains two integers n and k (1 ≤ k ≤ n ≤ 100,000) — the length of the string s and the number of substrings you have to split the string into. - The second line contains the string s of length n. # Output: - Print a single integer — the minimized maximum length of any substring after splitting the string into exactly k parts. # Example: **Input**: ``` 7 3 abcdefg ``` **Output**: ``` 3 ``` **Input**: ``` 5 2 aaaaa ``` **Output**: ``` 3 ``` # Explanation: In the first example, you can split the string as [\\"abc\\", \\"de\\", \\"fg\\"] achieving a maximum length of 3 for the substrings. In the second example, the best way is to split the string as [\\"aaa\\", \\"aa\\"]. The longest substring length among the parts is 3, which is the minimized maximum length you can achieve.","solution":"def minimize_max_substring_length(n, k, s): def is_valid(mid): total, count = 0, 1 for char in s: if total + 1 > mid: count += 1 total = 0 total += 1 return count <= k left, right = 1, n while left < right: mid = (left + right) // 2 if is_valid(mid): right = mid else: left = mid + 1 return left"},{"question":"You are given an array of integers and a series of queries. Each query specifies a range within the array, and you need to find the sum of the elements within that range. Write a program that handles multiple queries efficiently. # Input - The first line contains two integers, `n` and `q`. (`1 ≤ n ≤ 100000`, `1 ≤ q ≤ 100000`) - The second line contains `n` integers representing the array. - The following `q` lines each contain two integers, `li` and `ri`, representing a query asking for the sum of the elements from index `li` to `ri` (inclusive). # Output For each query, output the sum of the elements in the specified range. # Example Input ``` 5 3 1 2 3 4 5 1 3 2 4 1 5 ``` Output ``` 6 9 15 ``` # Note The sums for the queries are calculated as follows: - For the first query: 1 + 2 + 3 = 6 - For the second query: 2 + 3 + 4 = 9 - For the third query: 1 + 2 + 3 + 4 + 5 = 15","solution":"def preprocess(arr): Preprocess the given array to create a prefix sum array. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def query_sum(prefix_sums, l, r): Returns the sum of the elements from index l to r (inclusive) using the prefix sum array. return prefix_sums[r + 1] - prefix_sums[l] def find_range_sums(arr, queries): Given an array and a list of queries, returns the sums for the specified ranges. prefix_sums = preprocess(arr) results = [] for l, r in queries: results.append(query_sum(prefix_sums, l - 1, r - 1)) return results"},{"question":"A courier company needs to schedule deliveries for a new set of packages. Each package has a specific delivery window [si, ei] indicating the earliest and latest time the package can be delivered. There are k delivery slots available during which a courier can be assigned to deliver a package. Each delivery slot j is defined by its start time tj and duration dj, which means the slot operates from time tj to time tj + dj. The company wants to maximize the number of packages delivered within their respective delivery windows. You are to determine the maximum number of packages that can be delivered within the given delivery windows using the available delivery slots. The first line of input contains two integers n and k (1 ≤ n, k ≤ 2·10^5) — the number of packages and the number of delivery slots, respectively. Each of the following n lines contains two integers si and ei (0 ≤ si ≤ ei ≤ 10^9) — the start and end times of the delivery window for the ith package. Each of the following k lines contains two integers tj and dj (0 ≤ tj ≤ tj + dj ≤ 10^9) — the start time and duration of the jth delivery slot. Print a single integer — the maximum number of packages that can be delivered within their respective delivery windows. # Example **Input:** ``` 5 3 1 5 2 7 3 6 5 10 6 8 2 3 4 2 7 3 ``` **Output:** ``` 3 ``` # Explanation: In the sample input, the optimal way to deliver the packages is as follows: - Deliver package 1 using the first delivery slot (time range [2, 5]) - Deliver package 2 or 3 using the second delivery slot (time range [4, 6]) - Deliver package 5 using the third delivery slot (time range [7, 10]) Thus, the maximum number of packages that can be delivered is 3.","solution":"import heapq def max_deliveries(package_windows, delivery_slots): package_windows.sort(key=lambda x: x[1]) # Sort by end time of delivery window delivery_slots.sort() # Sort by start time of delivery slot max_delivered = 0 available_slots = [] for start, end in package_windows: while delivery_slots and delivery_slots[0][0] <= end: slot_start, slot_duration = heapq.heappop(delivery_slots) heapq.heappush(available_slots, slot_start + slot_duration) while available_slots and available_slots[0] < start: heapq.heappop(available_slots) if available_slots: heapq.heappop(available_slots) max_delivered += 1 return max_delivered def max_packages_delivered(n, k, package_data, slot_data): package_windows = [(package_data[i][0], package_data[i][1]) for i in range(n)] delivery_slots = [(slot_data[i][0], slot_data[i][1]) for i in range(k)] return max_deliveries(package_windows, delivery_slots)"},{"question":"A software development team is working on a project that involves managing user sessions. Each user session is defined by a start time and an end time. The team needs to write a program that calculates the maximum number of concurrent sessions within a specific time window. Given an array of sessions where each session is represented as a pair ([start, end]), and a query time window ([q_{start}, q_{end}]), the program should determine the maximum number of sessions that are active at the same time during this query time window. A session is considered active within the query time window if it starts before or at (q_{end}) and ends after or at (q_{start}). # Input: - The first line consists of three integers (n), (q_{start}), and (q_{end}) (1 leq n leq 1000, (0 leq q_{start} leq q_{end} leq 10^6)) where (n) is the number of sessions, and (q_{start}), (q_{end}) define the query time window. - The next (n) lines each contain two integers (start_i) and (end_i) (0 leq start_i leq end_i leq 10^6), representing the start and end times of the (i_{th}) session. # Output: - A single integer representing the maximum number of concurrent sessions during the specified query time window. # Example: Input: ``` 5 2 7 1 4 2 6 3 8 5 7 4 10 ``` Output: ``` 4 ``` Explanation: During the time window ([2, 7]): - The first session (1, 4) is active from 1 to 4. - The second session (2, 6) is active from 2 to 6. - The third session (3, 8) is active from 3 to 8. - The fourth session (5, 7) is active from 5 to 7. - The fifth session (4, 10) is active from 4 to 10. The maximum number of active sessions at the same time within the query time window is 4 (sessions 2, 3, 4, and 5 overlap during time 5 to 6).","solution":"def max_concurrent_sessions(n, q_start, q_end, sessions): timeline = [] # Add start and end times adjusted for the query window for start, end in sessions: if start <= q_end and end >= q_start: timeline.append((max(start, q_start), 1)) timeline.append((min(end, q_end), -1)) # Sort timeline by time, using the second element to sort in case of ties timeline.sort() max_concurrent = 0 current_concurrent = 0 # Traverse the timeline to calculate concurrent sessions for time, change in timeline: current_concurrent += change max_concurrent = max(max_concurrent, current_concurrent) return max_concurrent"},{"question":"Zara and Mike are playing a game called GridJourney where they navigate a grid filled with obstacles. The grid is represented as a 2D matrix of size r x c, where each cell can be either a space (\'.\') indicating a free cell, or a hash (\'#\') indicating an obstacle. Zara starts from the top-left cell (0, 0) and aims to reach the bottom-right cell (r-1, c-1). Mike, on the other hand, places some additional obstacles on the grid to make it challenging for Zara. Zara can move up, down, left, or right but cannot move into a cell containing an obstacle. Given the initial grid configuration, determine if Zara can reach the target cell (r-1, c-1) starting from (0, 0). If she can reach, output \\"YES\\"; otherwise, output \\"NO\\". The first line of input contains two space-separated integers r and c (1 ≤ r, c ≤ 1000). Each of the next r lines contains c characters representing the grid. Output \\"YES\\" if Zara can navigate to the target cell, otherwise output \\"NO\\".","solution":"def can_reach_target(grid): Determine if Zara can reach the target cell (r-1, c-1) from (0, 0). Args: grid (list of list of str): The grid where each cell is \'.\' (free) or \'#\' (obstacle) Returns: str: \\"YES\\" if Zara can reach the target, \\"NO\\" otherwise if not grid or grid[0][0] == \'#\' or grid[-1][-1] == \'#\': return \\"NO\\" r, c = len(grid), len(grid[0]) queue = [(0, 0)] visited = set((0, 0)) while queue: x, y = queue.pop(0) if (x, y) == (r-1, c-1): return \\"YES\\" for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < r and 0 <= ny < c and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given a matrix of size n x m filled with non-negative integers. You have to process the following two types of queries: 1. Update the value at a specific cell (i, j) to a new value x. 2. Retrieve the sum of all values in a submatrix defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2). The first line contains two integers n and m (1 ≤ n, m ≤ 500), the number of rows and columns in the matrix, respectively. Then n lines follow, each containing m integers, representing the initial values of the matrix. It is guaranteed that all values are non-negative and do not exceed 10^5. Next, an integer q (1 ≤ q ≤ 10^5) follows, representing the number of queries. Each of the next q lines contains one query in one of the following formats: - \\"1 i j x\\": Update the value at cell (i, j) to x. - \\"2 r1 c1 r2 c2\\": Retrieve the sum of all values in the submatrix from (r1, c1) to (r2, c2) (inclusive). Assume 0-based indexing for matrix cells. Output the answers of all queries of type 2 in the order they appear in the input. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 4 2 0 0 2 2 1 1 1 10 2 1 1 2 2 2 0 0 1 1 Output: 45 45 8","solution":"class MatrixOperations: def __init__(self, matrix): self.matrix = matrix self.n = len(matrix) self.m = len(matrix[0]) self.prefix_sum = [[0] * (self.m + 1) for _ in range(self.n + 1)] self._precompute_prefix_sum() def _precompute_prefix_sum(self): # Construct prefix sum matrix for i in range(1, self.n + 1): for j in range(1, self.m + 1): self.prefix_sum[i][j] = ( self.matrix[i-1][j-1] + self.prefix_sum[i-1][j] + self.prefix_sum[i][j-1] - self.prefix_sum[i-1][j-1] ) def update_value(self, i, j, x): original_value = self.matrix[i][j] difference = x - original_value self.matrix[i][j] = x # Update prefix sum for row in range(i+1, self.n+1): for col in range(j+1, self.m+1): self.prefix_sum[row][col] += difference def sum_submatrix(self, r1, c1, r2, c2): total = (self.prefix_sum[r2+1][c2+1] - self.prefix_sum[r2+1][c1] - self.prefix_sum[r1][c2+1] + self.prefix_sum[r1][c1]) return total"},{"question":"John likes to collect and analyze sequences of numbers. Recently, he came across a new type of sequence called \\"Zig-Zag\\" sequence, which he found quite interesting. A sequence of integers is called a Zig-Zag sequence if the difference between consecutive elements strictly alternates between positive and negative. That is, for a sequence a1, a2, ..., an, it is a Zig-Zag sequence if (a2 - a1) * (a3 - a2) < 0, (a3 - a2) * (a4 - a3) < 0, and so on. Given an initial sequence of integers, John wants to transform it into a Zig-Zag sequence by removing some elements (possibly none). John wants to know the length of the longest Zig-Zag subsequence that can be obtained from the given sequence. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the initial sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the initial sequence. # Sample Input ``` 6 1 7 4 9 2 5 ``` # Sample Output ``` 6 ``` # Explanation One possible longest Zig-Zag subsequence is the entire sequence itself. # Sample Input ``` 7 1 17 5 10 13 15 10 5 16 8 ``` # Sample Output ``` 7 ``` # Explanation One possible longest Zig-Zag subsequence is 1, 17, 5, 10, 5, 16, 8. The differences between consecutive elements strictly alternate between positive and negative. # Additional Constraints In the case of multiple longest Zig-Zag subsequences of the same length, any one valid subsequence length is acceptable. Output only the length of the longest Zig-Zag subsequence.","solution":"def longest_zigzag_subsequence(arr): This function returns the length of the longest Zig-Zag subsequence in an array. n = len(arr) if n < 2: return n up = [1] * n down = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: up[i] = max(up[i], down[j] + 1) elif arr[i] < arr[j]: down[i] = max(down[i], up[j] + 1) return max(max(up), max(down))"},{"question":"You are given a list of n integers representing the heights of n buildings arranged in a row. You need to answer q queries that each ask for the maximum building height in a specific range [l, r] (1-indexed) within the list of buildings. Write a program that, given the list of building heights and the range queries, returns the maximum building height for each query. Input: - The first line contains two integers n (1 ≤ n ≤ 100,000) and q (1 ≤ q ≤ 100,000), denoting the number of buildings and the number of queries, respectively. - The second line contains n integers, each representing the height of a building (1 ≤ height ≤ 10^6). - The following q lines each contain two integers l and r (1 ≤ l ≤ r ≤ n), denoting the respective range for which the maximum height is to be determined. Output: - For each query, output a single integer, the maximum building height in the specified range. Example: Input: ``` 5 3 3 1 4 1 5 1 3 2 4 1 5 ``` Output: ``` 4 4 5 ``` Explanation: - In the first query, the maximum height between buildings 1 and 3 is 4. - In the second query, the maximum height between buildings 2 and 4 is 4. - In the third query, the maximum height between buildings 1 and 5 is 5.","solution":"def max_building_heights(n, q, heights, queries): Given a list of building heights and a series of queries specifying ranges, returns the maximum building height for each query range. Parameters: n (int): Number of buildings. q (int): Number of queries. heights (list of int): Heights of the buildings. queries (list of tuple of int): List of query ranges (l, r). Returns: list of int: List of maximum heights for each query range. results = [] for l, r in queries: max_height = max(heights[l-1:r]) results.append(max_height) return results"},{"question":"Given a sequence of n integers where each value represents the height of a bar in a histogram, find the area of the largest rectangle that can be formed within the bounds of the histogram. The sequence is guaranteed to form a histogram such that all bars lie adjacent to each other with a width of 1 unit per bar. Your task is to write a function that, given the array of heights, returns the area of the largest rectangle. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of bars in the histogram. - The second line contains n integers (0 ≤ height[i] ≤ 10^4) — the heights of the bars. Output: - A single integer — the area of the largest rectangle that can be formed within the histogram. Example: ``` Input: 7 2 1 5 6 2 3 1 Output: 10 ``` Description: In the provided example, the largest rectangle that can be formed is between the third and fourth bars (heights 5 and 6), covering 2 units of width and 5 units of height, giving an area of 10.","solution":"def largest_rectangle_area(heights): Given a list of heights representing bar heights in a histogram, returns the area of the largest rectangle that can be formed within the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A TechCon company is organizing its annual conference and has a highly efficient network setup for its participants to communicate via email. The event is held in a large conference center with participants divided into rooms, each assigned a unique ID from 1 to n. Some rooms are connected directly by corridors, which are bidirectional. Each participant can send an email to any other participant if they are in the same room or if there exists a series of corridors connecting their rooms. However, TechCon wants to ensure that its communication network is robust, so that even if some corridors are temporarily unavailable, participants can still reach each other. Your job is to determine the minimum number of corridors required to be added to ensure the conference center becomes fully connected, meaning every participant can communicate with any other participant within the network regardless of room assignment. The first line contains two space-separated integers n, m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 1000) — the number of rooms and the number of existing corridors. Each of the next m lines contains two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a corridor connecting room u and room v. No two rooms are directly connected by more than one corridor. Print a single integer — the minimum number of additional corridors needed to make the conference center fully connected. Example: Input: 5 2 1 2 3 4 Output: 2 Explanation: With the given corridors, we have two disconnected components: {1, 2} and {3, 4, 5}. To make the conference center fully connected, we need at least 2 more corridors, for example, adding corridors (2, 3) and (4, 5).","solution":"def min_additional_corridors(n, m, connections): Given n rooms and m existing corridors, determine the minimum number of additional corridors needed to make the conference center fully connected. :param n: Number of rooms :param m: Number of existing corridors :param connections: List of tuples, each representing an existing corridor :return: Minimum number of additional corridors needed from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Adjacency list to store the graph adjacency_list = defaultdict(list) # Create the graph for u, v in connections: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = [False] * (n + 1) connected_components = 0 # Find all connected components for i in range(1, n + 1): if not visited[i]: bfs(i, visited, adjacency_list) connected_components += 1 # The minimum number of additional corridors needed is the number # of connected components minus one return connected_components - 1"},{"question":"You are given an array of n integers. You need to find two specific indices i and j (1 ≤ i < j ≤ n) such that swapping the elements at these indices minimizes the sum of all elements in the array. If the original array already has the minimum sum, return the original array. Let the variable, \\"min_sum,\\" represent the minimum attainable sum of the modified array. Your task is to determine the elements at the two specific indices that need to be swapped to attain the \\"min_sum\\" and return the modified array after the swap. If there are multiple valid answers, return any of them. Function Signature: ```python def minimize_array_sum(n: int, arr: List[int]) -> List[int]: pass ``` **Input** - n (1 ≤ n ≤ 10^5), The number of elements in the array - arr (1 ≤ arr[i] ≤ 10^9 for 1 ≤ i ≤ n), Array of size \'n\' **Output** - Return the modified array after performing the swap to achieve the minimum sum. **Example** Input: ``` n = 5 arr = [10, 1, 9, 7, 8] ``` Output: ``` [1, 10, 9, 7, 8] ``` Explanation: Swapping the elements at indices 0 and 1 results in the array [1, 10, 9, 7, 8], which has the same sum as the original array. Input: ``` n = 3 arr = [2, 3, 1] ``` Output: ``` [1, 3, 2] ``` Explanation: Swapping the elements at indices 0 and 2 results in the array [1, 3, 2], which has the same sum as the original array. Note: If the original array already results in the minimum sum, no changes are required, and the function should return the original array.","solution":"from typing import List def minimize_array_sum(n: int, arr: List[int]) -> List[int]: # The sum of the array doesn\'t change with swaps # Therefore, we need to provide the lexicographically smallest array # by sorting and swapping the elements if necessary. sorted_arr = sorted(arr) if arr == sorted_arr: return arr # The original array is already minimized # Find the first position where arr and sorted_arr differ for i in range(n): if arr[i] != sorted_arr[i]: # Swap the differing elements min_element_index = arr.index(sorted_arr[i], i) arr[i], arr[min_element_index] = arr[min_element_index], arr[i] break return arr"},{"question":"A robot is located at the top-left corner of a grid with m rows and n columns. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. However, some obstacles are placed in the grid. An obstacle and empty space are marked as 1 and 0 respectively in the grid. You need to determine the number of unique paths that the robot can take to reach the bottom-right corner. Given an integer t representing the number of test cases and each test case providing the grid dimensions and the grid itself, write a program that prints the number of unique paths for each test case. The input consists of multiple test cases. The first line contains a single integer t (1 leq t leq 50) — the number of test cases. For each test case: - The first line contains two integers, m and n (1 leq m, n leq 100) — the number of rows and columns in the grid. - The next m lines contain n integers each (either 0 or 1) representing the grid. Output the number of unique paths for each test case. Example: Input: ``` 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 ``` Output: ``` 2 1 ``` Explanation: For the first test case, there are 2 unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right For the second test case, there is only 1 unique path: 1. Down -> Right","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) # If starting point or ending point is an obstacle, no paths are possible if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize DP table with zeros dp = [[0] * n for _ in range(m)] # Starting point dp[0][0] = 1 # Fill the first column for i in range(1, m): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill the first row for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the rest of the DP table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1] def process_test_cases(t, test_cases): results = [] for test_case in test_cases: m, n, grid = test_case result = unique_paths_with_obstacles(grid) results.append(result) return results"},{"question":"A company is organizing an island-wide treasure hunt competition. The participants need to visit n islands, collecting one treasure from each island. The islands are arranged in a line, numbered from 1 to n. The distance between two consecutive islands is represented as an array d of length n-1, where d[i] is the distance between island i and island i+1. Each participant can choose their starting island, but once they start, they can only move to adjacent islands following the line, from left to right or from right to left. The goal is to find the minimum distance a participant needs to travel to collect all the treasures starting from any island, but participants must end their journey at the last island they visit. Given the number of islands n and the array d, write a function to calculate the minimum distance a participant needs to travel to collect all the treasures. The first line contains an integer n (2 ≤ n ≤ 100), the number of islands. The second line contains n-1 integers d[i] (1 ≤ d[i] ≤ 100), representing the distances between consecutive islands. Print the minimum distance a participant needs to travel to collect all the treasures from any starting island and ending at the last island visited. # Example Input ``` 4 3 2 5 ``` # Example Output ``` 9 ``` # Explanation The best strategy in this example is to start from the last island (island 4) and move leftwards. The sequence will be: 4 -> 3 -> 2 -> 1, covering the distances 5 + 2 + 3 = 10. However, the participant can start from island 1 and move rightwards, covering the same distances but in reverse, resulting in 3 + 2 + 5 = 10. The minimum travel distance to cover all islands starting from any position is 10.","solution":"def minimum_treasure_hunt_distance(n, d): Calculate the minimum distance to travel to collect all treasures starting from any island. Arguments: n -- the number of islands (integer) d -- an array of distances between consecutive islands (list of integers) Returns: Integer -- the minimum distance required to collect all treasures total_distance = sum(d) # The minimum distance is always the total distance since one must travel through all the distances once. return total_distance"},{"question":"In a distant universe, there exists a magical forest with n unique types of magical plants and m unique types of magical animals. Each type of animal has specific types of plants that it prefers to eat. Your task is to ensure that each type of animal gets at least one plant it prefers. The forest is represented as a bipartite graph, where one set of vertices represents the types of plants, and the other set represents the types of animals. An edge between a plant and an animal indicates that the animal prefers that plant. Given this information, determine whether it is possible to select a subset of exactly m plants (one for each type of animal) such that each of the m animals has a plant it prefers. If it is possible, provide such a selection. If there are multiple solutions, provide any one of them. If no such selection exists, output \\"Impossible\\". The first line of input contains two integers, n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 100) — the number of types of plants and animals, respectively. Each of the next m lines contains a pair of integers a and b (1 ≤ a ≤ n, 1 ≤ b ≤ m), indicating that animal b prefers plant a. Output \\"Impossible\\" if no such selection exists. Otherwise, output m distinct integers denoting the indices of the selected plants, one for each animal. Example Input: ``` 5 3 1 1 2 1 3 2 4 2 5 3 ``` Example Output: ``` 1 3 5 ```","solution":"def find_plants_for_animals(n, m, preferences): from collections import defaultdict import itertools # Create a mapping of animals to plants they prefer animal_to_plants = defaultdict(list) for plant, animal in preferences: animal_to_plants[animal].append(plant) # Function to recursively check if a valid combination is possible def check_combination(animals, selected_plants): if not animals: return selected_plants current_animal = animals[0] for plant in animal_to_plants[current_animal]: if plant not in selected_plants: result = check_combination(animals[1:], selected_plants + [plant]) if result: return result return None # Generate the list of animals animals = list(range(1, m + 1)) # Check for valid plant combinations result = check_combination(animals, []) if result: return result else: return \\"Impossible\\""},{"question":"Alex is managing a list of tasks and wants to keep track of their priorities. Each task has a unique identifier and a priority level. Alex needs to process the tasks in two ways: 1. Insert a new task with its priority. 2. Retrieve the identifier of the task with the highest priority, without removing it from the list. If there are multiple tasks with the same highest priority, return the identifier of the task that was inserted first. The input begins with an integer q (1 le q le 100) — the number of operations. Each of the next q lines contains one of the following operations: - \\"1 id priority\\" — insert a task with identifier id (an integer 1 le id le 1,000) and priority priority (an integer 1 le priority le 1,000). - \\"2\\" — retrieve the identifier of the task with the highest priority. Output the identifier of the task with the highest priority for each \\"2\\" operation. # Input ``` 5 1 1 5 1 2 3 1 3 5 2 1 4 6 ``` # Output ``` 1 ``` # Explanation After the three insert operations, the tasks are: - Task 1 with priority 5 - Task 2 with priority 3 - Task 3 with priority 5 For the query \\"2\\", tasks 1 and 3 have the highest priority (5). Task 1 was inserted first, so it is outputted. After adding task 4 with priority 6: - Task 4 with priority 6 becomes the highest priority task, but since the next \\"2\\" query is not provided, no additional output for this operation is needed.","solution":"class TaskManager: def __init__(self): self.tasks = [] def _find_highest_priority(self): max_priority = -1 task_id = -1 for task in self.tasks: if task[1] > max_priority: max_priority = task[1] task_id = task[0] return task_id def insert_task(self, task_id, priority): self.tasks.append((task_id, priority)) def get_highest_priority_task(self): return self._find_highest_priority() def process_tasks(operations): task_manager = TaskManager() results = [] for operation in operations: if operation[0] == 1: task_manager.insert_task(operation[1], operation[2]) elif operation[0] == 2: results.append(task_manager.get_highest_priority_task()) return results # Example usage operations = [(1, 1, 5), (1, 2, 3), (1, 3, 5), (2,), (1, 4, 6)] print(process_tasks(operations))"},{"question":"You are given a binary tree where each node contains an integer value. Define \\"tree sum\\" as the sum of values of all nodes in a tree. Two trees are considered equal if and only if they are structurally identical and the nodes have the same value. Your task is to check whether there exists a subtree of the given binary tree that has a tree sum equal to a target value. A subtree of a binary tree is a tree consisting of a node in the original tree and all of its descendants. If the given tree is empty, the answer is \\"No\\". The definition of the tree is given as follows: ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` Write a function that takes two arguments - the root of the binary tree and the target sum: ```python def has_subtree_with_sum(root, target): # Your code here ``` # Input: - The `root` of the binary tree and an integer `target`. # Output: - Return \\"Yes\\" if there is a subtree with a tree sum equal to the target value, otherwise \\"No\\". # Example: Example 1: **Input:** ```python root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(8) root.left.left = TreeNode(2) root.left.right = TreeNode(4) target = 10 ``` **Output:** ``` Yes ``` **Explanation:** - The subtree with root node value `3` has a sum of `3 + 2 + 4 = 9`. It doesn\'t match the target sum. - The subtree with root node value `5` has a sum of `5 + 3 + 8 + 2 + 4 = 22`. It doesn\'t match the target sum either. - The subtree with root node value `8` has a sum of `8` and also doesn\'t match the target sum. - The subtree with root node value `2` has a sum of `2` and also doesn\'t match the target sum. - The subtree with root node value `4` has a sum of `4` and also doesn\'t match the target sum. In this case, there is no subtree that sums up to `10`, so the answer is \\"No\\". Example 2: **Input:** ```python root = TreeNode(5) root.left = TreeNode(3) root.right = TreeNode(7) root.left.left = TreeNode(1) root.left.right = TreeNode(2) root.right.left = TreeNode(6) root.right.right = TreeNode(8) target = 11 ``` **Output:** ``` Yes ``` **Explanation:** - The subtree with root node value `3` has a sum of `3 + 1 + 2 = 6`. It doesn\'t match the target sum. - The subtree with root node value `5` has a sum of `5 + 3 + 7 + 1 + 2 + 6 + 8 = 32`. It doesn\'t match the target sum either. - The subtree with root node value `7` has a sum of `7 + 6 + 8 = 21`. It doesn\'t match the target sum either. - The subtree with root node value `6` has a sum of `6` and also doesn\'t match the target sum. - The subtree with root node value `8` has a sum of `8` and also doesn\'t match the target sum. - The subtree with root node value `1` has a sum of `1` and also doesn\'t match the target sum. - The subtree with root node value `2` has a sum of `2` and also doesn\'t match the target sum. In this case, there is no subtree that sums up to `11`, so the answer is \\"No\\".","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def has_subtree_with_sum(root, target): Checks whether there exists a subtree with a tree sum equal to the target value. def subtree_sum(node): if not node: return 0, set() left_sum, left_sums = subtree_sum(node.left) right_sum, right_sums = subtree_sum(node.right) current_sum = node.val + left_sum + right_sum all_sums = left_sums.union(right_sums).union({current_sum}) return current_sum, all_sums if not root: return \\"No\\" _, all_subtree_sums = subtree_sum(root) return \\"Yes\\" if target in all_subtree_sums else \\"No\\""},{"question":"Paul the Programmer has a small collection of rare coins that he likes to examine during his leisure time. Each coin has a unique value represented by a positive integer. One day, Paul decided to experiment with his collection and found himself interested in the following problem: Given a list of coin values, Paul wants to know the number of ways he can select a subset of these coins such that the sum of the values in the subset is a specific target value `T`. Note that each coin can either be included in the subset or not, and each coin can be used at most once. Write a function that, given the list of coin values and the target value `T`, returns the number of ways Paul can select the coins to achieve the exact sum `T`. # Input - The first line contains two integers `N` (1 ≤ N ≤ 100) and `T` (1 ≤ T ≤ 10^9) — the number of coins in Paul\'s collection and the target value. - The next line contains `N` integers `a1, a2, ..., aN` (1 ≤ ai ≤ 10^9) — the values of the coins. # Output - Output a single integer — the number of ways to select a subset of coins such that the sum of their values equals `T`. # Example Input ``` 4 5 1 2 3 4 ``` Output ``` 2 ``` Explanation There are two ways to select a subset of coins that sum up to 5: 1. {2, 3} 2. {1, 4} Note that the order of coins in the subset does not matter.","solution":"def count_ways_to_select_coins(N, T, coin_values): Returns the number of ways to select a subset of coins such that the sum is equal to the target T. from itertools import combinations count = 0 for i in range(1, N + 1): for combo in combinations(coin_values, i): if sum(combo) == T: count += 1 return count"},{"question":"You are given an array of integers. Your task is to find the longest contiguous subarray such that all the elements in the subarray are either strictly increasing or strictly decreasing. The first line contains a single integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 10^5) — the number of elements in the array. The second line of each test case contains n space-separated integers, which are the elements of the array. For each test case, output the length of the longest contiguous subarray in which the elements are either strictly increasing or strictly decreasing. Example: Input: 2 6 1 2 3 4 5 3 5 5 4 3 2 1 Output: 5 5 Explanation: In the first test case, the longest strictly increasing subarray is [1, 2, 3, 4, 5]. In the second test case, the longest strictly decreasing subarray is [5, 4, 3, 2, 1].","solution":"def longest_contiguous_subarray(t, test_cases): result = [] for i in range(t): n, arr = test_cases[i] if n == 1: result.append(1) continue max_len = 1 cur_len = 1 # Check for strictly increasing subarray for j in range(1, n): if arr[j] > arr[j - 1]: cur_len += 1 else: max_len = max(max_len, cur_len) cur_len = 1 max_len = max(max_len, cur_len) # Check for strictly decreasing subarray cur_len = 1 for j in range(1, n): if arr[j] < arr[j - 1]: cur_len += 1 else: max_len = max(max_len, cur_len) cur_len = 1 max_len = max(max_len, cur_len) result.append(max_len) return result"},{"question":"You are given a city grid and it\'s represented as a 2D array. Each cell in the 2D array represents a city block. The value of the cell can either be `0` (representing an obstacle) or `1` (representing an accessible path). A person can move from one block to any of the four side-adjacent blocks (up, down, left, or right) within one unit of time. Your task is to find the length of the shortest path from the upper-left corner (0, 0) to the lower-right corner (n-1, m-1). If there is no such path, return -1. The first line contains two integers, n and m (2 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m integers separated by spaces, representing the city grid. Assume that the start (upper-left corner) and end (lower-right corner) cells are always accessible paths (i.e., they will always be `1`), and there are no obstacles on them. Print a single integer — the length of the shortest path from the upper-left corner to the lower-right corner, or -1 if no such path exists. Example: Input: 4 4 1 0 1 1 1 1 0 1 0 1 0 1 1 1 1 1 Output: 7","solution":"from collections import deque def shortest_path_in_grid(grid): n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def in_bounds(x, y): return 0 <= x < n and 0 <= y < m queue = deque([(0, 0, 1)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if (x, y) == (n-1, m-1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if in_bounds(nx, ny) and (nx, ny) not in visited and grid[nx][ny] == 1: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # No path found def find_shortest_path(n, m, grid): return shortest_path_in_grid(grid)"},{"question":"In a kingdom far far away, there is a rectangular garden represented by an n times m grid. Each cell of the grid contains either a tree (denoted by \'*\') or is empty (denoted by \'.\'). The queen has ordered the gardeners to enclose groups of trees by constructing the minimal number of fences around them. A fence encloses a group of adjacent trees (sharing a side). More formally, two cells are considered adjacent if one of them can be reached from the other by moving left, right, up or down. The task for you is to find the number of fences required to enclose every distinct group of trees in the garden grid. # Input - The first line of input contains two integers n and m (1 leq n, m leq 1000), representing the number of rows and columns in the grid respectively. - The next n lines contain m characters each. Each character is either a \'*\' (tree) or \'.\' (empty space). # Output - Print a single integer — the minimal number of fences required to enclose all groups of trees. # Example Input ``` 5 5 ..... .***. .***. .***. ..... ``` Output ``` 1 ``` Input ``` 5 5 .*... **... ..... ..**. ..**. ``` Output ``` 2 ``` Explanation In the first example, there is one large group of adjacent trees which can be enclosed by a single fence. In the second example, there are two distinct groups of trees, each of which requires a separate fence.","solution":"def count_fences(n, m, garden): def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if (cx, cy) in visited or garden[cx][cy] == \'.\': continue visited.add((cx, cy)) for nx, ny in [(cx-1, cy), (cx+1, cy), (cx, cy-1), (cx, cy+1)]: if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: stack.append((nx, ny)) visited = set() fences = 0 for i in range(n): for j in range(m): if garden[i][j] == \'*\' and (i, j) not in visited: dfs(i, j) fences += 1 return fences"},{"question":"Tigger wants to visit his friends in the Hundred Acre Wood to play and have fun. He has three best friends: Pooh, Piglet, and Kanga, each living in their own tree house. There are magical jumping stones between each pair of tree houses. The distance between Piglet\'s and Pooh\'s houses is x meters, between Piglet\'s and Kanga\'s house is y meters, and between Pooh\'s and Kanga\'s house is z meters. Tigger starts his adventure from Piglet\'s house and plans to visit a total of m friends’ houses including the starting house. Tigger is known for his energetic bounces but gets tired after too much traveling. To save his energy, he wants to minimize the total distance he jumps between the tree houses. Help Tigger find the minimum distance he must travel to visit m houses, starting from Piglet\'s house. The first line contains an integer m (1 ≤ m ≤ 100) — number of tree houses to visit. The second line contains an integer x (1 ≤ x ≤ 100) — distance between Piglet\'s and Pooh\'s houses. The third line contains an integer y (1 ≤ y ≤ 100) — distance between Piglet\'s and Kanga\'s houses. The fourth line contains an integer z (1 ≤ z ≤ 100) — distance between Pooh\'s and Kanga\'s houses. Output one number — minimum distance in meters Tigger must travel to visit m tree houses. In the first test case, an optimal path for Tigger would be starting at Piglet\'s house, then bouncing to Pooh\'s house, and finally to Kanga\'s house, resulting in a total distance of x + z. In the second test case, Tigger visits only Piglet\'s house, so he does not need to travel anywhere.","solution":"def minimum_distance_to_visit_houses(m, x, y, z): if m == 1: return 0 elif m == 2: return min(x, y) elif m == 3: return min(x + z, y + z, x + y) else: raise ValueError(\\"Invalid value for m. m should be between 1 and 3 inclusive.\\")"},{"question":"You are given a set of strings, and you need to determine the shortest string that occurs as a subsequence in each of the given strings. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Write a program that finds and prints the shortest common subsequence of the input strings. If there is more than one shortest common subsequence, print any of them. # Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of strings. The following n lines each contain a single string consisting of lowercase English letters. Each string has a length between 1 and 100 inclusive. # Output Print the shortest common subsequence. If there are multiple correct answers, you may print any. # Example Input ``` 3 abc bac cab ``` Output ``` a ``` In this example, \\"a\\" is the shortest common subsequence that appears in all three strings. Note: Your task is to implement a function making use of efficient algorithms and techniques to solve this problem.","solution":"def shortest_common_subsequence(n, strings): Returns the shortest common subsequence present in all strings. If there are multiple shortest common subsequences, return any. def is_subsequence(small, large): it = iter(large) return all(char in it for char in small) min_len = min(map(len, strings)) common_sequences = set(strings[0]) # Find common subsequences by intersecting all characters in the strings for i in range(1, n): common_sequences &= set(strings[i]) common_sequences = list(common_sequences) # Sort by length of subsequence and then by lexicographical order common_sequences.sort(key=lambda x: (len(x), x)) for i in range(1, min_len + 1): for cs in common_sequences: if all(is_subsequence(cs, string) for string in strings): return cs return \\"\\" # Example usage input_n = 3 input_strings = [\\"abc\\", \\"bac\\", \\"cab\\"] print(shortest_common_subsequence(input_n, input_strings)) # Output: \\"a\\" (or any other character)"},{"question":"Maria is playing a game with a 2D rectangular grid where each cell contains a certain number of points. She is given the dimensions of the grid (m and n) and the initial state of the points in each cell. Maria can start at any cell in the first row and must make her way to any cell in the last row. She can only move to the cell directly below or diagonally left/right below from her current cell. Her goal is to maximize the points she collects on her way from the top to the bottom of the grid. The grid is represented by an m x n matrix where the element at row i and column j represents the points in cell (i, j). Write a program to help Maria determine the maximum points she can collect. The first line of input contains two integers m and n (1 ≤ m, n ≤ 500), the dimensions of the grid. The following m lines each contain n integers, representing the points in the cells of the grid (1 ≤ points ≤ 1000). Output one number — the maximum points Maria can collect from the top to the bottom of the grid. **Example:** Input: 3 3 5 6 7 4 8 3 2 1 9 Output: 24 In the example, Maria starts at cell (0, 2) with 7 points, moves to cell (1, 1) with 8 points, and then to cell (2, 2) with 9 points. The maximum points collected is 7 + 8 + 9 = 24.","solution":"def max_points(m, n, grid): Returns the maximum points Maria can collect moving from the top row to the bottom row following the allowed moves. # Create a DP table with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Initialize the first row of DP table with the grid\'s first row for j in range(n): dp[0][j] = grid[0][j] # Populate the DP table for i in range(1, m): for j in range(n): # Possible moves from the cell above, diagonal left, or diagonal right top = dp[i-1][j] if j < n else 0 top_left = dp[i-1][j-1] if j-1 >= 0 else 0 top_right = dp[i-1][j+1] if j+1 < n else 0 dp[i][j] = grid[i][j] + max(top, top_left, top_right) # The maximum points collected will be the maximum value in the last row of the DP table return max(dp[m-1])"},{"question":"You are given an array of integers `arr` of length `n`. You need to answer q queries of the following form: Given a left index `l` and a right index `r`, determine the sum of elements in the subarray from `arr[l]` to `arr[r]` inclusive and the minimum element in that subarray. The first line of the input contains the integer `n` (1 ≤ n ≤ 100000) — the length of the array. The second line contains `n` integers arr1, arr2, ..., arrn (−10^6 ≤ arri ≤ 10^6) — the elements of the array. The third line contains the integer `q` (1 ≤ q ≤ 100000) — the number of queries. The following `q` lines contain two integers `l` and `r` (0 ≤ l ≤ r < n) — the range of the subarray. For each query, print two space-separated integers: the sum of elements in the subarray from `arr[l]` to `arr[r]` and the minimum element in that subarray. ``` Input: 6 1 3 -2 8 -7 10 3 0 2 1 4 2 5 Output: 2 -2 2 -7 9 -7 ```","solution":"def prefix_sums_and_mins(arr, queries): Given a list of integers and a list of query ranges, returns the sum and minimum element for each subarray defined by the query ranges. Parameters: arr (list): The list of integers. queries (list): List of tuples, each containing the start and end indices of the subarray. Returns: list: A list of tuples, where each tuple contains the sum and minimum element of the corresponding subarray. # Calculate prefix sums n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Calculate results for each query results = [] for l, r in queries: subarray_sum = prefix_sum[r + 1] - prefix_sum[l] subarray_min = min(arr[l:r + 1]) results.append((subarray_sum, subarray_min)) return results"},{"question":"The Wily Fox is known for his intelligence and affection for puzzles. He has a unique collection of binary strings that he likes to sort in a particular order. However, being the meticulous fox that he is, he wants the sorting to be done in an efficient manner. Wily Fox\'s special order is a combination of two common sorting criteria: 1. By length of the binary string in ascending order. 2. For binary strings of the same length, sort them in lexicographical order. Wily Fox has a list of binary strings and he needs your help to sort them according to his special order. You are given a list of binary strings. Write a program to sort this list according to Wily Fox\'s criteria and print the sorted list. # Input: The first line contains an integer `n` representing the number of binary strings. The next `n` lines contain one binary string per line. # Output: Print the `n` binary strings, each on a new line, sorted according to the Wily Fox\'s criteria. # Constraints: - ( 1 leq n leq 10^5 ) - Each binary string consists of only \'0\' and \'1\' characters. - The length of each binary string is between 1 and 100. # Example: Input: ``` 5 101 010 1111 000 01 ``` Output: ``` 01 000 010 101 1111 ``` Implement the solution in the programming language of your choice, ensuring it runs efficiently within the given constraints.","solution":"def sort_binary_strings(n, binary_strings): Sorts a list of binary strings first by length in ascending order and then by lexicographical order for strings of the same length. Parameters: n (int): Number of binary strings. binary_strings (list of str): List of binary strings. Returns: list of str: Sorted list of binary strings. # Sorting by length first, then lexicographically sorted_strings = sorted(binary_strings, key=lambda x: (len(x), x)) return sorted_strings"},{"question":"You are given an integer array arr of size n and another integer k. Your task is to find out the maximum sum of a subarray of length k. A subarray is defined as a contiguous segment of the array. # Input Format: - The first line contains two integers n and k (1 leq k leq n leq 10^6) — the length of the array and the length of the subarray. - The second line contains n integers, the elements of the array arr (1 leq arr[i] leq 10^9). # Output Format: Print one integer — the maximum sum of a subarray of length k. # Example: Input ``` 7 3 2 1 5 1 3 2 6 ``` Output ``` 11 ``` Note: In this example, the subarray with the maximum sum of length 3 is [5, 1, 3, 2], which sums up to 11. # Explanation: - A sliding window approach can be used to solve this problem efficiently. You can sum the first k elements, then slide the window across the array, adding the new element and subtracting the element that is left out, thus maintaining the sum of the subarray of length k and finding the maximum sum.","solution":"def max_sum_subarray(arr, n, k): Returns the maximum sum of a subarray of length k. # Find the sum of the first window of size k max_sum = sum(arr[:k]) current_sum = max_sum # Slide the window for i in range(k, n): current_sum += arr[i] - arr[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Write a function `k_special_numbers(n, k)` that takes two integers `n` and `k` as input and returns a list of `n` integers. Each integer in the list should be a `k`-special number. A `k`-special number is defined as a number that can be written as the sum of the squares of any number of unique digits (from 0 to 9) that add up to `k`. For example, if `k = 13`, a possible `k`-special number could be `2^2 + 3^2 = 4 + 9 = 13`. # Input - An integer `n` (1 ≤ n ≤ 50), the number of `k`-special numbers to generate. - An integer `k` (1 ≤ k ≤ 100). # Output - A list of `n` integers that are each `k`-special numbers. If there are more than `n` such numbers, you can return any `n` of them. # Example ```python k_special_numbers(3, 13) ``` # Output ```python [13, 13, 13] ``` # Explanation - `13 = 2^2 + 3^2`, one possible way to form 13 as a sum of squares of unique digits. - The result contains three instances of the number 13, which is a `k`-special number for `k = 13`. # Constraints - You may assume that there are at least `n` `k`-special numbers for any given inputs.","solution":"def k_special_numbers(n, k): Returns a list of n k-special numbers. # Precalculate squares of digits 0-9 squares = {i: i * i for i in range(10)} # Function to find all subsets of digits that sum to k def find_k_special_numbers(curr_sum, start, curr_list, result): if curr_sum == k: result.append(curr_sum) return True if curr_sum > k: return False for i in range(start, 10): if find_k_special_numbers(curr_sum + squares[i], i + 1, curr_list + [i], result): return True return False result = [] while len(result) < n: if find_k_special_numbers(0, 1, [], result): continue return result"},{"question":"Given a list of integers arr, the task is to find the number of inversions. Inversion Count for an array indicates how far (or close) the array is from being sorted. If the array is already sorted then the inversion count is 0. If the array is sorted in reverse order, then the inversion count is the maximum. Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j. Write a function `countInversions(arr)` that takes an array of integers arr and returns the number of inversions. # Function Signature ```python def countInversions(arr: List[int]) -> int: pass ``` # Input - A list of integers `arr` where 1 ≤ len(arr) ≤ 10^5 and -10^9 ≤ arr[i] ≤ 10^9. # Output - Return a single integer, the number of inversions in the array. # Example Input: ``` arr = [2, 3, 8, 6, 1] ``` Output: ``` 5 ``` Explanation: There are 5 inversions in the array: 1. (2, 1) 2. (3, 1) 3. (8, 6) 4. (8, 1) 5. (6, 1) # Note - You need to implement an efficient algorithm to handle the given constraints, such as a modified merge sort which runs in O(n log n) time.","solution":"from typing import List def countInversions(arr: List[int]) -> int: def merge_count_split_inv(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all left subarray elements # after i are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right) return inv_count temp_arr = [0] * len(arr) return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"},{"question":"Given a sequence of integers, arrange them into a binary search tree (BST). A BST is a binary tree in which for each node, the values in its left subtree are less than the node\'s value, and the values in its right subtree are greater than the node\'s value. Write a function to build and print the BST. If there are duplicate values in the sequence, return -1 as BSTs typically do not accommodate duplicate values. # Input - A single line containing a space-separated sequence of integers. # Output - If a BST can be constructed, print the values of the BST in level order (breadth-first traversal). - If the sequence contains duplicates, output -1. # Example Example 1 **Input** ``` 5 3 7 2 4 6 8 ``` **Output** ``` 5 3 7 2 4 6 8 ``` *(The output represents the level order traversal of the BST)* Explanation: The BST formed is: ``` 5 / 3 7 / / 2 4 6 8 ``` Example 2 **Input** ``` 5 3 3 2 4 6 8 ``` **Output** ``` -1 ``` Explanation: The sequence contains duplicate values (3). Thus, a BST cannot be constructed.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def insert_into_bst(root, value): if root is None: return TreeNode(value) if value < root.value: root.left = insert_into_bst(root.left, value) elif value > root.value: root.right = insert_into_bst(root.right, value) return root def build_bst(sequence): if len(sequence) != len(set(sequence)): return -1 # Duplicate values present root = None for value in sequence: root = insert_into_bst(root, value) return root def level_order_traversal(root): if not root: return [] result = [] queue = [root] while queue: current = queue.pop(0) result.append(current.value) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result def bst_from_sequence(sequence): sequence = list(map(int, sequence.split())) bst_root = build_bst(sequence) if bst_root == -1: return -1 return level_order_traversal(bst_root)"},{"question":"You are given an array of n integers, and you need to compute the number of pairs (i, j) such that 1 ≤ i < j ≤ n and the sum of the integers in position i and j is equal to a given integer k. The array may contain duplicate elements. Implement a function named `countPairs` that takes in two arguments: 1. an integer array `arr` (1 ≤ length of arr ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4), 2. an integer `k` (-10^8 ≤ k ≤ 10^8). The function should return the number of pairs `(i, j)` that meet the specified conditions. # Input - The first line contains an integer `n`, the size of the array. - The second line contains `n` space-separated integers representing the elements of the array. - The third line contains the integer `k`. # Output - Print a single integer, which is the number of pairs with the required sum. # Example **Input:** ``` 5 1 5 3 3 7 6 ``` **Output:** ``` 2 ``` **Explanation:** The valid pairs are (1, 2) and (3, 5) since 1+5 = 6 and 3+3 = 6.","solution":"def countPairs(arr, k): Returns the number of pairs (i, j) such that 1 ≤ i < j ≤ n and arr[i] + arr[j] = k. count = 0 seen = {} for num in arr: difference = k - num if difference in seen: count += seen[difference] if num in seen: seen[num] += 1 else: seen[num] = 1 return count"},{"question":"A company wants to monitor its network\'s latency over a period of time. For this purpose, they periodically record the latency (in milliseconds) of the network at different timestamps. They want to identify when the network latency is rising continuously over a period of time so they can investigate potential issues. Given an array of integers representing the recorded latencies at consecutive timestamps, your task is to find the length of the longest subarray where the latencies are strictly increasing. If there are multiple such subarrays of the same length, return the length of any one of them. # Input - An integer `n` (1 <= n <= 1000) - the number of latency recordings. - An array of `n` integers, where each integer represents the latency recorded at a timestamp. # Output - A single integer representing the length of the longest subarray of strictly increasing latencies. # Example Input: ``` 6 10 20 10 30 40 50 ``` Output: ``` 4 ``` Explanation: The longest subarray with strictly increasing latencies is [10, 30, 40, 50], which has a length of 4.","solution":"def longest_increasing_subarray(n, latencies): Returns the length of the longest subarray of strictly increasing latencies. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if latencies[i] > latencies[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Write a program that accepts an integer list as input and removes its duplicates while maintaining the original order of elements. The program must be efficient in terms of time and space complexity. **Input** - A single line containing space-separated integers representing the list. **Output** - A single line containing space-separated integers of the list without duplicates, preserving the initial order. **Example** - Input: `1 3 3 1 2 4 5 4 6 6 7` - Output: `1 3 2 4 5 6 7` *Constraints* - All integers in the input will be non-negative. - The length of the list will not exceed 100,000 elements.","solution":"def remove_duplicates(input_list): Removes duplicates from the input list while maintaining order of elements. :param input_list: list of integers :return: list of integers without duplicates seen = set() result = [] for num in input_list: if num not in seen: seen.add(num) result.append(num) return result def main(input_str): Main function to convert input string to list, process it, and print result. :param input_str: string of space-separated integers input_list = list(map(int, input_str.split())) result = remove_duplicates(input_list) print(\\" \\".join(map(str, result)))"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can either be empty (denoted by \'.\') or blocked (denoted by \'#\'). You are initially located in the top-left corner of the grid (row 1, column 1), and your goal is to reach the bottom-right corner of the grid (row n, column m). However, you can only move to the right or down to an adjacent cell. If it is impossible to reach the target cell, output \\"No\\". Otherwise, output the smallest number of steps required to reach the target cell. The first line of input contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. Output \\"No\\" if it is impossible to reach the target cell. Otherwise, output the minimum number of steps required. # Example Input ``` 4 4 .... ..#. ..#. .... ``` Output ``` 6 ``` Input ``` 3 3 ... .#. ..# ``` Output ``` No ```","solution":"def min_steps_to_reach_end(n, m, grid): from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"No\\" directions = [(0, 1), (1, 0)] # right, down queue = deque([(0, 0)]) steps = [[float(\'inf\')] * m for _ in range(n)] steps[0][0] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and steps[nx][ny] > steps[x][y] + 1: steps[nx][ny] = steps[x][y] + 1 queue.append((nx, ny)) return steps[n-1][m-1] if steps[n-1][m-1] != float(\'inf\') else \\"No\\""},{"question":"You are given an array of integers where each element in the array appears twice except for one unique element. Write a function that finds the unique element that appears only once. Your solution should have a linear runtime complexity, and you should only use constant extra space. The function should take a single argument: - `nums` (list of integers): An array of integers where every element appears exactly twice, except for one element which appears exactly once. The array contains at least 1 and at most 1000 integers. The function should return: - (integer): The unique element that appears only once. **Example:** Input: ``` nums = [2, 3, 5, 4, 5, 3, 4] ``` Output: ``` 2 ``` Input: ``` nums = [7, 1, 2, 1, 2, 3, 3] ``` Output: ``` 7 ```","solution":"def find_unique(nums): Find the unique element in the list where every other element appears exactly twice. Args: nums (list of integers): The array of integers. Returns: integer: The unique element that appears only once. unique_element = 0 for num in nums: unique_element ^= num return unique_element"},{"question":"Write a function that, given a string representing a mathematical expression containing integers, the operators `+`, `-`, `*`, and `/`, and parentheses, computes the result of the expression. The input string is a valid expression, simplified to not require any error handling for invalid inputs, and all calculations use integer arithmetic. Division should truncate towards zero. **Input:** - A string `expr` containing the expression to be evaluated. **Output:** - An integer representing the result of the evaluated expression. **Examples:** ```python assert evaluate_expression(\\"3+2*2\\") == 7 assert evaluate_expression(\\" 3/2 \\") == 1 assert evaluate_expression(\\" 3+5 / 2 \\") == 5 assert evaluate_expression(\\"(2+3)*(4-1)\\") == 15 assert evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") == 23 ``` **Constraints:** - The length of the input string will be in the range [1, 10000]. - The input string will only contain digits, `+`, `-`, `*`, ` /`, `(`, `)`, and spaces. - The `expr` string represents a valid mathematical expression according to the conventional rules of arithmetic. Implement the function `evaluate_expression(expr: str) -> int` to solve the problem.","solution":"def evaluate_expression(expr: str) -> int: Evaluates a mathematical expression contained in a string. Args: expr (str): A string containing the expression to be evaluated. Returns: int: The result of the evaluated expression. def operate(a, b, operator): if operator == \'+\': return a + b elif operator == \'-\': return a - b elif operator == \'*\': return a * b elif operator == \'/\': return int(a / b) # integer division def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operations(operands, operators): right = operands.pop() left = operands.pop() operator = operators.pop() result = operate(left, right, operator) operands.append(result) # Cleanup expression by removing spaces expr = expr.replace(\\" \\", \\"\\") operands = [] operators = [] i = 0 while i < len(expr): if expr[i] == \'(\': operators.append(expr[i]) elif expr[i].isdigit(): num = 0 while i < len(expr) and expr[i].isdigit(): num = num * 10 + int(expr[i]) i += 1 operands.append(num) i -= 1 elif expr[i] == \')\': while operators and operators[-1] != \'(\': apply_operations(operands, operators) operators.pop() # pop \'(\' else: while (operators and precedence(operators[-1]) >= precedence(expr[i])): apply_operations(operands, operators) operators.append(expr[i]) i += 1 while operators: apply_operations(operands, operators) return operands[0]"},{"question":"Given an array of integers, each representing the gross salary of employees in a company, calculate the net salaries after deducting tax. The tax rates are as follows: - For salaries up to 50,000, the tax rate is 10%. - For salaries between 50,001 and 100,000, the tax rate is 20%. - For salaries above 100,000, the tax rate is 30%. Write a function that takes an array of integers and returns a new array with the net salaries after deducting the appropriate taxes. Assume no additional deductions or allowances. The first line of input contains an integer n (1 ≤ n ≤ 1,000,000) — the number of employees. The second line contains n space-separated integers, where each integer represents the gross salary of an employee. Print the net salaries after tax for all employees in the same order as their gross salaries. Example: Input: 5 40000 60000 120000 70000 50000 Output: 36000 48000 84000 56000 45000 Explanation: For the salaries: - 40000: 10% tax -> 40000 - 4000 = 36000 - 60000: 20% tax -> 60000 - 12000 = 48000 - 120000: 30% tax -> 120000 - 36000 = 84000 - 70000: 20% tax -> 70000 - 14000 = 56000 - 50000: 10% tax -> 50000 - 5000 = 45000","solution":"def calculate_net_salaries(gross_salaries): Given a list of gross salaries, calculate the net salaries after tax deduction. Args: gross_salaries (list of int): List containing gross salaries of employees. Returns: list of int: List containing net salaries of employees after tax deduction. net_salaries = [] for salary in gross_salaries: if salary <= 50000: tax = 0.10 * salary elif salary <= 100000: tax = 0.20 * salary else: tax = 0.30 * salary net_salary = salary - tax net_salaries.append(int(net_salary)) return net_salaries"},{"question":"You are given a string of length n consisting of lowercase English letters. You are allowed to perform one operation any number of times which involves selecting any even-length substring of the string and reversing it. Your goal is to determine if you can transform the string into a palindrome using the allowed operation any number of times. A palindrome is a string that reads the same forwards as backwards. # Input - The first line contains an integer t (1 leq t leq 100) — the number of test cases. - Each of the next t lines contains a single string s (1 leq |s| leq 100) — the string you need to transform into a palindrome. # Output For each test case, print \\"YES\\" if the string can be transformed into a palindrome using the given operation, otherwise print \\"NO\\". # Example Input ``` 3 abba abcdef racecar ``` Output ``` YES NO YES ```","solution":"def can_transform_to_palindrome(test_cases): results = [] for s in test_cases: counts = {} # Count frequency of each character for char in s: if char in counts: counts[char] += 1 else: counts[char] = 1 # Count characters with odd frequencies odd_count = sum(1 for count in counts.values() if count % 2 == 1) # A string can be rearranged into a palindrome if: # - At most one character has an odd count if odd_count <= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Bob and Alice are working on a number sequence problem. They came across a fascinating function related to the sequence. Given a sequence of integers of length n, Bob and Alice are interested in the frequency of the most common element within different subarrays of this sequence. They turn to you for help in finding the answer. The first line of the input contains the integer n (1 ≤ n ≤ 100000) — the length of the sequence. The second line contains n integers: b[1], b[2], ..., b[n] (1 ≤ b[i] ≤ 100000). The next line contains the integer q (1 ≤ q ≤ 100000) — the number of queries. Each of the next q lines contains two integers: li, ri (1 ≤ li ≤ ri ≤ n). Each line represents a query in which Bob and Alice want to know the frequency of the most common element in the subarray from index li to ri (inclusive). Print q lines — the answers to Bob and Alice\'s queries, one for each query.","solution":"from collections import defaultdict, Counter def most_common_frequency(n, sequence, q, queries): Function to find the frequency of the most common element in subarrays of a sequence. Args: n : int : length of the sequence sequence : list of int : sequence of integers q : int : number of queries queries : list of tuple : list of queries (li, ri) Returns: list of int : frequency of the most common element for each query # Prepare an array of dictionaries to count frequencies in subarrays frequency = [defaultdict(int) for _ in range(n + 1)] for i in range(1, n + 1): frequency[i] = frequency[i - 1].copy() frequency[i][sequence[i - 1]] += 1 results = [] for li, ri in queries: sub_freq = defaultdict(int) for k in frequency[ri]: sub_freq[k] = frequency[ri][k] - frequency[li - 1][k] most_common = max(sub_freq.values()) results.append(most_common) return results"},{"question":"Given an integer array and a target sum, determine if there exists a subset of the array such that the sum of the subset is equal to the given target sum. Your function should return a boolean indicating whether such a subset exists. # Input - An integer n (1 leq n leq 100), representing the number of elements in the array. - An array of n integers where each integer is between -10^6 and 10^6. - An integer target (-10^6 leq target leq 10^6), representing the target sum. # Output - Return `True` if there exists a subset of the array whose sum is equal to the target sum, and `False` otherwise. # Example ```python Input: n = 5 array = [3, 34, 4, 12, 5] target = 9 Output: True ``` # Constraints - You may assume that array contains unique elements. - The array can contain both positive and negative numbers.","solution":"def subset_sum_exists(array, target): Determine if there exists a subset of `array` which sums to `target`. Args: array (List[int]): List of integers target (int): The target sum Returns: bool: True if there exists a subset whose sum is equal to target, False otherwise n = len(array) dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j < array[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - array[i - 1]] return dp[n][target]"},{"question":"Alice is fascinated by palindromes and wants to find them in different number systems. In particular, she is interested in finding the smallest palindrome greater than a given number n in a number system with base b. A number is considered a palindrome if it reads the same backward as forward. For example, in a decimal system (base 10), 121 is a palindrome, but 123 is not. Would you help Alice determine the smallest palindrome greater than n in a given base b? The input consists of two space-separated integers n and b (1 ≤ n < 10106, 2 ≤ b ≤ 36). Represent digits in base b using characters \'0\'-\'9\' for values 0-9, and \'a\'-\'z\' for values 10-35. Assume that n is given as a string in base b. Output a single line with the smallest palindrome greater than n in the given base b. In the first sample, n is given in base 10. The next palindrome after 123 is 131. In the second sample, n is given in base 16. The next palindrome after \'1f\' in base 16 is \'22\'. # Example ``` Input: 123 10 Output: 131 Input: 1f 16 Output: 22 ```","solution":"def int_to_base(n, b): Converts an integer n to a given base b and returns the string representation. if n == 0: return \'0\' digits = [] while n: digits.append(int(n % b)) n //= b return \'\'.join(\'0123456789abcdefghijklmnopqrstuvwxyz\'[d] for d in digits[::-1]) def base_to_int(s, b): Converts a string s in base b to an integer. return int(s, b) def is_palindrome(s): Checks if a string s is a palindrome. return s == s[::-1] def next_palindrome(n, b): Finds the smallest palindrome greater than n in base b. num = base_to_int(n, b) + 1 while True: num_str = int_to_base(num, b) if is_palindrome(num_str): return num_str num += 1"},{"question":"You are given an integer array text{nums} of length n. Your task is to find a non-empty subarray with the maximum possible sum of elements, and return the sum of that subarray. A subarray is a contiguous part of an array. First line contains one integer n (1 leq n leq 10^5). Second line contains n integers representing the elements of the array, text{nums}[i] (-10^4 leq text{nums}[i] leq 10^4). Print a single integer - the sum of the subarray with the maximum sum. Example: Input: ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` Output: ``` 6 ``` Explanation: The subarray [4,-1,2,1] has the largest sum = 6.","solution":"def max_subarray_sum(nums): Returns the maximum possible sum of a non-empty subarray. if not nums: return 0 max_sum = current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Mahmoud and Ehab were given another challenge by Dr. Evil. This time, he presented them with an array of integers and asked them to find the longest contiguous subarray where the sum of its elements is less than or equal to a given integer k. Given an array of n integers and an integer k, the task is to find the length of the longest contiguous subarray such that the sum of the subarray\'s elements is less than or equal to k. # Input - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the size of the array and the integer k. - The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ 10^4) — the elements of the array. # Output - Print a single integer — the length of the longest contiguous subarray with sum less than or equal to k. # Example Input ``` 6 15 1 2 3 4 5 6 ``` Output ``` 5 ``` # Explanation In the example above, the subarray [1, 2, 3, 4, 5] has a sum of 15, which is equal to k. Note that there are no longer subarrays which have a sum less than or equal to k. Thus, the length of the longest contiguous subarray with sum ≤ k is 5.","solution":"def longest_subarray_with_sum_at_most_k(n, k, arr): This function returns the length of the longest contiguous subarray with sum less than or equal to k. max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length # Example usage: n = 6 k = 15 arr = [1, 2, 3, 4, 5, 6] print(longest_subarray_with_sum_at_most_k(n, k, arr)) # Output: 5"},{"question":"A team of software developers is working on a project to create a web-based application for managing a library\'s catalog. The library system should keep track of books, authors, and genres. Each book should have a title, an author, a genre, and an ISBN. Books can belong to multiple genres. The development team needs to implement a feature that generates a report of all books, grouped by genre and ordered by the authors\' last names. To assist the developers, you have been tasked with writing a function that takes a list of books and their details, and returns a dictionary where the keys are genre names, and the values are lists of books, sorted as specified. Each book should be represented as a dictionary with \'title\', \'author\', and \'ISBN\'. Write a function `group_books_by_genre(books)` that takes in a list of books where each book is a dictionary of the form `{\'title\': str, \'author\': str, \'genre\': List[str], \'ISBN\': str}` and returns a dictionary where the keys are genre names and the values are lists of books (each represented as a dictionary with \'title\', \'author\', and \'ISBN\'), sorted by the authors\' last names. If two authors have the same last name, their books should be sorted by their first names. # Example ```python books = [ {\\"title\\": \\"Book A\\", \\"author\\": \\"John Doe\\", \\"genre\\": [\\"Fiction\\", \\"Mystery\\"], \\"ISBN\\": \\"12345AB\\"}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Alice Smith\\", \\"genre\\": [\\"Non-Fiction\\"], \\"ISBN\\": \\"22345BC\\"}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Jane Roe\\", \\"genre\\": [\\"Fiction\\"], \\"ISBN\\": \\"32345CD\\"}, {\\"title\\": \\"Book D\\", \\"author\\": \\"Michael Brown\\", \\"genre\\": [\\"Mystery\\", \\"Fiction\\"], \\"ISBN\\": \\"42345DE\\"}, {\\"title\\": \\"Book E\\", \\"author\\": \\"Amanda Doe\\", \\"genre\\": [\\"Non-Fiction\\"], \\"ISBN\\": \\"52345EF\\"} ] print(group_books_by_genre(books)) ``` Expected Output ```python { \\"Fiction\\": [ {\\"title\\": \\"Book D\\", \\"author\\": \\"Michael Brown\\", \\"ISBN\\": \\"42345DE\\"}, {\\"title\\": \\"Book A\\", \\"author\\": \\"John Doe\\", \\"ISBN\\": \\"12345AB\\"}, {\\"title\\": \\"Book C\\", \\"author\\": \\"Jane Roe\\", \\"ISBN\\": \\"32345CD\\"} ], \\"Mystery\\": [ {\\"title\\": \\"Book D\\", \\"author\\": \\"Michael Brown\\", \\"ISBN\\": \\"42345DE\\"}, {\\"title\\": \\"Book A\\", \\"author\\": \\"John Doe\\", \\"ISBN\\": \\"12345AB\\"} ], \\"Non-Fiction\\": [ {\\"title\\": \\"Book E\\", \\"author\\": \\"Amanda Doe\\", \\"ISBN\\": \\"52345EF\\"}, {\\"title\\": \\"Book B\\", \\"author\\": \\"Alice Smith\\", \\"ISBN\\": \\"22345BC\\"} ] } ```","solution":"def group_books_by_genre(books): Function to group books by genre and sort by authors\' last names. :param books: List of dictionaries, where each dictionary contains book details. :return: Dictionary where the keys are genres, and values are lists of books. from collections import defaultdict genre_dict = defaultdict(list) for book in books: for genre in book[\\"genre\\"]: genre_dict[genre].append({ \\"title\\": book[\\"title\\"], \\"author\\": book[\\"author\\"], \\"ISBN\\": book[\\"ISBN\\"] }) def author_key(author): last_name, first_name = author.split()[-1], \\" \\".join(author.split()[:-1]) return (last_name, first_name) sorted_genre_dict = {} for genre, books_list in genre_dict.items(): sorted_genre_dict[genre] = sorted(books_list, key=lambda book: author_key(book[\\"author\\"])) return sorted_genre_dict"},{"question":"You are given a sequence of bitwise operations applied on an array of integers, where each element in the array is initially set to 0. The operations are provided as a list of tuples, with each tuple containing a type of bitwise operation and two indices. The possible operations are: 1. `AND` operation with arguments `i` and `j`: `array[i] = array[i] & array[j]` 2. `OR` operation with arguments `i` and `j`: `array[i] = array[i] | array[j]` 3. `XOR` operation with arguments `i` and `j`: `array[i] = array[i] ^ array[j]` You need to determine the final state of the array after applying all the operations in the given order. The input format is as follows: - The first line contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`), where `n` is the number of elements in the array and `m` is the number of operations. - The next `m` lines each contain a tuple: a string representing the type of operation (`AND`, `OR`, or `XOR`) followed by two integers `i` and `j` (`1 ≤ i, j ≤ n`). Output the final state of the array after all operations are performed. Input example: ``` 3 4 AND 1 2 OR 2 3 XOR 1 3 OR 3 1 ``` Output example: ``` array = [1, 1, 1] ```","solution":"def bitwise_operations(n, m, operations): array = [0] * n for op in operations: operation, i, j = op i -= 1 j -= 1 if operation == \'AND\': array[i] &= array[j] elif operation == \'OR\': array[i] |= array[j] elif operation == \'XOR\': array[i] ^= array[j] return array # Example use case n = 3 m = 4 operations = [ (\'AND\', 1, 2), (\'OR\', 2, 3), (\'XOR\', 1, 3), (\'OR\', 3, 1) ] # The resultant array after all operations should be [0, 0, 0] (since initial array is all zeros) print(bitwise_operations(n, m, operations)) # Output: [0, 0, 0]"},{"question":"You are given a binary string ( t ) of length ( n ) where each character is either \'0\' or \'1\'. We define the balance of a substring as the absolute difference between the number of \'0\'s and \'1\'s in that substring. A substring is called balanced if its balance is zero. Your task is to compute and output the length of the longest balanced substring that can be found within a given binary string ( s ). If no such substring exists, output -1. The first line of the input contains an integer ( n ) (1 ≤ ( n ) ≤ 200,000), the length of the binary string ( s ). The second line contains the binary string ( s ) of length ( n ). For each test case, output the length of the longest balanced substring, or -1 if no balanced substring is found. # Example: Input ``` 8 11011010 ``` Output ``` 6 ``` Explanation: The balanced substrings of length 6 are \\"110110\\" and \\"101010\\". Both have an equal number of \'0\'s and \'1\'s. Any larger substrings are not balanced.","solution":"def longest_balanced_substring(n, s): balance_map = {0: -1} # Dictionary to store the first occurrence of every balance balance = 0 # Initial balance max_length = -1 # Start with no balanced substring found for i in range(n): if s[i] == \'0\': balance -= 1 else: balance += 1 if balance in balance_map: max_length = max(max_length, i - balance_map[balance]) else: balance_map[balance] = i return max_length # Input parsing def input_parser(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) s = lines[1] return n, s"},{"question":"A computer graphics company wants to implement a new algorithm to rotate an image clockwise by 90 degrees. The image is represented as an n x n matrix of integers, where each value in the matrix corresponds to a pixel\'s intensity. The company needs your help to create a function that performs the rotation. Write a function `rotate_image(matrix)` that takes an n x n matrix (a list of n lists, where each inner list is of length n) and rotates the matrix clockwise by 90 degrees in-place. Your function should not return anything but should modify the input matrix directly. For example: Input: ``` matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` Output: ``` matrix = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] ``` # Constraints - The matrix dimension n will be in the range 1 <= n <= 100. **Note**: - Be sure to modify the input matrix in-place. - Aim for an efficient algorithm with a time complexity of O(n^2) and an additional space complexity of O(1). Your task is to provide the implementation for the `rotate_image` function.","solution":"def rotate_image(matrix): Rotate the given n x n matrix by 90 degrees clockwise in-place. n = len(matrix) # Step 1: Transpose the matrix. for i in range(n): for j in range(i + 1, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row. for i in range(n): matrix[i].reverse()"},{"question":"You are working on a text-based adventure game engine. The game world consists of rooms connected by passages. Rooms can contain items, and players can pick up, drop, and use items they find. You need to implement a part of the engine that allows players to move between rooms and manage their inventory. The data structure you need to manipulate is as follows: 1. **Rooms**: Each room is represented by a unique ID (integer) and has a list of item names (strings) available in that room. 2. **Passages**: Each passage connects two rooms and is represented by a tuple (room1, room2) indicating bidirectional connectivity. 3. **Player**: The player has: - A current location, which is the ID of the room they are in. - An inventory, which is a list of items they currently have. You need to implement a class `GameEngine` with the following methods: - `__init__(self, rooms, passages)`: Initializes the game world. `rooms` is a dictionary with room IDs as keys and lists of item names as values. `passages` is a list of tuples, each representing a bidirectional passage between rooms. - `move(self, target_room_id)`: Moves the player to the room with the ID `target_room_id` if it is directly connected to the current room. Updates the player\'s current location. If the target room is not connected to the current room, raise an exception. - `take(self, item_name)`: Picks up `item_name` from the current room (if available) and adds it to the player\'s inventory. Removes the item from the room. If the item is not in the current room, raise an exception. - `drop(self, item_name)`: Drops `item_name` from the player\'s inventory and adds it to the current room. Removes the item from the player\'s inventory. If the item is not in the inventory, raise an exception. - `use(self, item_name)`: Uses `item_name` from the player\'s inventory. Removes the item from the inventory and returns a message indicating the item was used. If the item is not in the inventory, raise an exception. Here is an example usage of the `GameEngine` class: ```python rooms = { 1: [\\"sword\\", \\"shield\\"], 2: [\\"potion\\"], 3: [] } passages = [(1, 2), (2, 3)] engine = GameEngine(rooms, passages) engine.move(2) # Player moved to room 2 engine.take(\\"potion\\") # Player picked up \\"potion\\" engine.move(3) # Player moved to room 3 engine.drop(\\"potion\\") # Player dropped \\"potion\\" print(engine.use(\\"sword\\")) # Player uses \\"sword\\" ``` If any attempt is made to move to a non-adjacent room or interact with an unavailable item, the methods should raise an `Exception` with a descriptive error message. Implement the `GameEngine` class.","solution":"class GameEngine: def __init__(self, rooms, passages): self.rooms = rooms self.passages = {room: set() for room in rooms} for passage in passages: room1, room2 = passage self.passages[room1].add(room2) self.passages[room2].add(room1) self.current_location = next(iter(rooms)) # Start the player in the first room self.inventory = [] def move(self, target_room_id): if target_room_id in self.passages[self.current_location]: self.current_location = target_room_id else: raise Exception(f\\"Cannot move to room {target_room_id}; it\'s not connected to the current room.\\") def take(self, item_name): if item_name in self.rooms[self.current_location]: self.rooms[self.current_location].remove(item_name) self.inventory.append(item_name) else: raise Exception(f\\"Item {item_name} is not in the current room.\\") def drop(self, item_name): if item_name in self.inventory: self.inventory.remove(item_name) self.rooms[self.current_location].append(item_name) else: raise Exception(f\\"Item {item_name} is not in the inventory.\\") def use(self, item_name): if item_name in self.inventory: self.inventory.remove(item_name) return f\\"You used {item_name}.\\" else: raise Exception(f\\"Item {item_name} is not in the inventory.\\")"},{"question":"You are given a string s consisting of lowercase English letters. Determine the number of substrings that can be rearranged to form a palindrome. The first line contains one integer t (1 le t le 10). Then t test cases follow. The first line of each test case contains the string s (1 le |s| le 10^5) — the string for which you need to determine the number of palindromic substrings. It is guaranteed that the sum of the lengths of strings over all test cases does not exceed 10^6. For each test case output the number of substrings of s that can be rearranged to form a palindrome.","solution":"def count_palindromic_substrings(s): Counts the number of substrings of s that can be rearranged to form a palindrome. from collections import defaultdict def can_form_palindrome(counts): odd_count = 0 for count in counts.values(): if count % 2 != 0: odd_count += 1 if odd_count > 1: return False return True n = len(s) palindrome_count = 0 for i in range(n): char_count = defaultdict(int) for j in range(i, n): char_count[s[j]] += 1 if can_form_palindrome(char_count): palindrome_count += 1 return palindrome_count def process_test_cases(t, strings): results = [] for s in strings: results.append(count_palindromic_substrings(s)) return results"},{"question":"You are given a sequence of integers where each element appears exactly twice, except for one element which appears exactly once. Write a function to identify that single element. For example, given the sequence [4, 2, 4, 6, 2, 3, 3], your function should return 6 as that is the only element that appears once. # Input - The first line of input contains a single integer t (1 leq t leq 100) – the number of test cases. - The first line of each test case contains an integer n (1 leq n leq 10^5) – the number of integers in the sequence. - The second line of each test case contains n integers separated by spaces. All integers are positive and fit within the 32-bit signed integer range. # Output For each test case, output the single element that appears exactly once. # Example Input ``` 2 7 4 2 4 6 2 3 3 5 1 2 1 2 99 ``` Output ``` 6 99 ``` # Explanation In the first test case, all integers except 6 appear twice. In the second test case, all integers except 99 appear twice.","solution":"def find_unique_element(elements): This function takes a list of integers where every integer appears exactly twice except for one integer which appears exactly once. It returns the integer that appears only once. unique_element = 0 for elem in elements: unique_element ^= elem return unique_element def solve(test_cases): This function processes multiple test cases to find the unique element for each case. It expects a list of tuples, where each tuple contains the number of elements and the list of elements. results = [] for case in test_cases: n, elements = case unique = find_unique_element(elements) results.append(unique) return results"},{"question":"Elena, an aspiring data analyst, is learning how to handle multi-dimensional arrays efficiently. As part of her learning process, she wanted to experiment with a simple game simulation involving a grid. The game is turn-based, and players take turns to place a specific mark on a grid cell. The rules Elena sets are straightforward: 1. Players mark cells alternately, starting with Player 1 using the mark \'X\' and Player 2 using the mark \'O\'. 2. The game continues until all the cells in the grid are marked. Elena needs your help to simulate the game. Write a program that generates the final state of the game grid after all cells have been marked. The input consists of two integers n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid (rows and columns). The output should be the final state of the grid after the game is completed. Each row of the grid should be printed on a new line, with each cell separated by a space. **Example Input:** 3 3 **Example Output:** X O X O X O X O X **Example Explanation:** For a 3x3 grid, the cells are filled in a checkerboard pattern based on the rule that players alternate their marks starting with \'X\'.","solution":"def simulate_game(n, m): Simulates the game on an n x m grid where players take turns to mark cells. Parameters: n (int): Number of rows. m (int): Number of columns. Returns: List[List[str]]: Final state of the grid. grid = [[\'\' for _ in range(m)] for _ in range(n)] mark = \'X\' for i in range(n): for j in range(m): grid[i][j] = mark mark = \'O\' if mark == \'X\' else \'X\' return grid def format_grid(grid): return \\"n\\".join(\\" \\".join(row) for row in grid)"},{"question":"You are given an array of integers. Your task is to determine the length of the longest subarray where the difference between the maximum and minimum values in this subarray does not exceed a given limit. The first line contains the positive integer `n`, the size of the array, and the positive integer `k`, the allowed difference limit (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100). The second line contains `n` integers representing the elements of the array. Each element of the array is an integer between -1000 to 1000. Print the length of the longest subarray that satisfies the given condition.","solution":"def longest_subarray_with_limit(arr, k): Returns the length of the longest subarray where the difference between the maximum and minimum values does not exceed k. from collections import deque n = len(arr) if n == 0: return 0 max_deque = deque() min_deque = deque() left = 0 max_len = 0 for right in range(n): while max_deque and arr[max_deque[-1]] < arr[right]: max_deque.pop() max_deque.append(right) while min_deque and arr[min_deque[-1]] > arr[right]: min_deque.pop() min_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > k: left += 1 if left > max_deque[0]: max_deque.popleft() if left > min_deque[0]: min_deque.popleft() max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given a string `s` and an integer `n`, your task is to find the lexicographically smallest string that can be achieved by performing exactly `n` character shifts on `s`. A character shift operation involves moving the first character of the string to the end of the string. For example, if the string `s` is \\"abcde\\" and you perform a character shift, the result will be \\"bcdea\\". If `s = \\"abcde\\"` and `n = 2`, the possible outcomes after `n` shifts are: - After 1 shift: \\"bcdea\\" - After 2 shifts: \\"cdeab\\" Among these, the lexicographically smallest string is \\"bcdea\\". # Input - The first line contains an integer `t` ( 1 le t le 100 ), the number of test cases. - The next `t` lines each contain a string `s` (length constraints: 1 le text{length of } s le 100 ) and an integer `n` ( 0 le n le text{length of } s - 1 ). # Output For each test case, output the lexicographically smallest string that can be obtained after performing exactly `n` character shifts. # Example Input ``` 3 abcde 2 eabcd 1 xyz 2 ``` Output ``` bcdea abcde zxy ``` # Note - In the first test case, after two shifts, the smallest string lexicographically is \\"bcdea\\". - In the second test case, after one shift, the smallest string lexicographically is \\"abcde\\". - In the third test case, after two shifts, the smallest string lexicographically is \\"zxy\\".","solution":"def lexicographically_smallest_shift(s, n): Returns the lexicographically smallest string after performing exactly n shifts. A shift operation involves moving the first character of the string to the end. shifted_string = s[n:] + s[:n] return shifted_string def process_test_cases(test_cases): results = [] for s, n in test_cases: result = lexicographically_smallest_shift(s, n) results.append(result) return results"},{"question":"**Problem Statement:** The kingdom of CodingLand consists of `n` cities connected by `m` bidirectional roads. Each road has a certain length, and your task is to help the kingdom\'s transport department in planning the optimal way to travel between any two cities. Specifically, you need to answer multiple queries, where each query asks for the shortest distance between two specific cities. Input format: - The first line contains two integers `n` and `m` (1 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and the number of roads, respectively. - The next `m` lines describe the roads. Each road is represented with three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 1000), indicating a road between cities `u` and `v` with length `w`. - The next line contains a single integer `q` (1 ≤ q ≤ 10000) — the number of queries. - The next `q` lines contain two integers each `a` and `b` (1 ≤ a, b ≤ n) — the cities between which you need to find the shortest distance. Output format: - For each query, print a single integer — the shortest distance between cities `a` and `b`. If there is no path between them, print `-1`. Example: Input: ``` 5 6 1 2 3 1 3 5 2 3 2 2 4 4 3 4 1 3 5 7 3 1 4 2 5 1 5 ``` Output: ``` 7 9 12 ``` Explanation: - For the first query, the shortest path from city 1 to city 4 is 1 -> 2 -> 3 -> 4 with a total distance of 3 + 2 + 1 = 6. - For the second query, the shortest path from city 2 to city 5 is 2 -> 3 -> 5 with a total distance of 2 + 7 = 9. - For the third query, the shortest path from city 1 to city 5 is 1 -> 2 -> 3 -> 5 with a total distance of 3 + 2 + 7 = 12. Note: Ensure to use an efficient algorithm to handle the constraints, such as Floyd-Warshall or Dijkstra\'s algorithm with a priority queue.","solution":"import heapq def dijkstra(n, adj, start, end): Implements Dijkstra\'s algorithm to find the shortest path from start to end. # Distance array initialized with infinity distances = [float(\'inf\')] * (n + 1) distances[start] = 0 # Priority queue to process nodes by shortest distance first priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in adj[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def solve(n, m, roads, queries): Solves the shortest path queries for the given cities and roads. # Building the adjacency list adj = [[] for _ in range(n + 1)] for u, v, w in roads: adj[u].append((v, w)) adj[v].append((u, w)) results = [] for a, b in queries: results.append(dijkstra(n, adj, a, b)) return results"},{"question":"You are given a string s that contains a mix of uppercase and lowercase letters. Your task is to determine if the given string is a palindrome when case is ignored. A string is considered a palindrome if it reads the same backward as forward, ignoring cases. For example, \\"Madam\\" and \\"RaceCar\\" should be considered palindromes. The first and only line contains the string s. The length of the string is at least 1 and does not exceed 100 characters. If the string is a palindrome (ignoring cases), print \\"PALINDROME\\", otherwise print \\"NOT PALINDROME\\".","solution":"def is_palindrome(s): Determines if the given string is a palindrome, ignoring case. Args: s (str): The string to check. Returns: str: \\"PALINDROME\\" if the string is a palindrome, \\"NOT PALINDROME\\" otherwise. s = s.lower() # Convert the string to lowercase if s == s[::-1]: # Check if the string is equal to its reverse return \\"PALINDROME\\" else: return \\"NOT PALINDROME\\""},{"question":"There is a town with m houses and n factories connected by a system of water pipes. Each pipe connects a house to a factory and has a limited capacity of water it can transport. The municipality plans to conduct maintenance on the water pipes such that any house should be able to supply at least a minimum quantity of water to the connected factories without exceeding the capacity of the pipes. Given the number of houses, factories, and the pipes with their capacities, determine if it\'s possible to plan the maintenance while satisfying the conditions. The first line contains two integers m and n (1 ≤ m, n ≤ 100). The second line contains m integers representing the minimum quantity of water required by each of the houses. The next n lines each contain three integers h, f, and c (1 ≤ h ≤ m, 1 ≤ f ≤ n, 1 ≤ c ≤ 100) representing that there is a pipe of capacity c from house h to factory f. Output \\"YES\\" if it\'s possible to satisfy the conditions of the maintenance, otherwise output \\"NO\\". # Example: Input: ``` 3 3 10 20 30 1 1 15 1 2 10 2 3 20 3 3 25 ``` Output: ``` YES ``` Explanation: - House 1 needs 10 units of water. - It can supply 10 units of water to factory 2 through the pipe with capacity 10. - House 2 needs 20 units of water. - It can supply 20 units of water to factory 3 through the pipe with capacity 20. - House 3 needs 30 units of water. - It can supply 25 units of water to factory 3 and an additional 5 units to factory 1. Thus, it is possible to satisfy the required conditions with the maintenance plan.","solution":"def can_satisfy_watering_conditions(m, n, house_requirements, pipes): # Create an adjacency list to store factory capacities connected to each house from collections import defaultdict house_to_factory_capacity = defaultdict(list) for h, f, c in pipes: house_to_factory_capacity[h].append(c) # Check if each house can connect to factories with required capacity for house in range(1, m + 1): house_capacity = sorted(house_to_factory_capacity[house], reverse=True) required_water = house_requirements[house - 1] # Sum capacities until we meet or exceed required_water supplied_water = 0 for capacity in house_capacity: supplied_water += capacity if supplied_water >= required_water: break if supplied_water < required_water: return \\"NO\\" return \\"YES\\""},{"question":"In a village, there are n houses arranged in a single line where each house can be denoted by its 1-based index from 1 to n. The chief of the village wants to renovate certain houses. Each house has an intrinsic value associated with it, and you are provided with an array A of length n representing these values. The chief wants to know if it is possible to select any subset of houses such that the total value of the selected houses is exactly S. You need to determine if there exists such a subset and print \\"YES\\" if it exists, otherwise print \\"NO\\". # Input - The first line of the input contains two integers n and S (1 le n le 200, 0 le S le 10000) — the number of houses and the desired sum. - The second line contains n integers A_1, A_2, ldots, A_n (1 le A_i le 100) — the values of the houses. # Output - Print \\"YES\\" if there exists a subset of the given array which adds up to S, otherwise print \\"NO\\". # Example Input ``` 5 9 3 34 4 12 5 ``` Output ``` YES ``` Input ``` 5 30 3 34 4 12 5 ``` Output ``` NO ``` # Note: - In the first test case, there is a subset {3, 4, 5} which sums up to 9. - In the second test case, no subset of the given values sums up to 30.","solution":"def can_renovate_houses(n, S, A): Determine if there is a subset of array A that sums up to S. Uses dynamic programming approach. Parameters: n (int): The number of houses. S (int): The desired sum. A (list of int): The values of the houses. Returns: str: \\"YES\\" if such a subset exists, otherwise \\"NO\\". dp = [False] * (S + 1) dp[0] = True for value in A: for j in range(S, value - 1, -1): dp[j] = dp[j] or dp[j - value] return \\"YES\\" if dp[S] else \\"NO\\""},{"question":"Given a string, your task is to find the smallest possible string that can be obtained by applying the following operation exactly once: 1. Choose any substring of the string and remove it. A substring is defined as a contiguous sequence of characters within the string. Your task is to determine the lexicographically smallest string that can be obtained by removing exactly one substring. **Input:** - A single string ( s ) (( 1 leq text{length of } s leq 100 )) consisting of lowercase English letters. **Output:** - A single string representing the lexicographically smallest string that can be obtained by removing exactly one substring. **Example 1:** ```plaintext Input: `abc` Output: `ab` ``` **Example 2:** ```plaintext Input: `abac` Output: `aac` ``` **Example 3:** ```plaintext Input: `cba` Output: `ba` ``` **Example Explanation:** 1. In the first example, removing the substring \\"c\\" from \\"abc\\" yields \\"ab\\", which is the smallest possible string. 2. In the second example, removing the substring \\"b\\" from \\"abac\\" yields \\"aac\\", which is the smallest possible string. 3. In the third example, removing the substring \\"c\\" from \\"cba\\" yields \\"ba\\", which is the smallest possible string.","solution":"def smallest_string_by_removing_one_char(s): Returns the lexicographically smallest string by removing exactly one substring of length 1. min_string = s[:1] + s[2:] # Initial smallest string by removing the second character for i in range(len(s)): # Create a new string by removing the character at index i new_string = s[:i] + s[i+1:] # Compare with the current minimum string if new_string < min_string: min_string = new_string return min_string"},{"question":"A circular array is an array that wraps around at the end, so the element immediately after the last one is the first element. You are given a circular array of integers and your task is to determine if there is a subarray of length at least 2 whose sum is divisible by a given integer k. Input format: - The first line contains two space-separated integers n and k (2 ≤ n ≤ 100, ∣a_i∣ ≤ 100 for each 0 ≤ i < n). - The second line contains n space-separated integers which represent the elements of the circular array. Output format: - Print \\"YES\\" if there exists a subarray of length at least 2 whose sum is divisible by k. Otherwise, print \\"NO\\". Example: Input: 5 4 2 3 1 5 4 Output: YES Explanation: One possible subarray with sum divisible by 4 is [1, 5, 4] which sums to 10, and 10 % 4 == 2. Another one could be [2, 3, 1] which sums to 6, and 6 % 4 == 2.","solution":"def has_subarray_sum_divisible_by_k(n, k, arr): Determines if there is a subarray of length at least 2 whose sum is divisible by k. :param n: Length of the circular array :param k: The integer to be used for divisibility check :param arr: List of integers representing the circular array :return: \\"YES\\" if such a subarray exists, otherwise \\"NO\\" # Extend the array to simulate the circular behavior arr = arr + arr # Use a sliding window approach to check subarrays of different sizes for i in range(n): current_sum = arr[i] for j in range(i + 1, i + n): current_sum += arr[j] if j - i + 1 >= 2 and current_sum % k == 0: return \\"YES\\" return \\"NO\\""},{"question":"There are n houses in a line, each with a certain amount of money hidden inside. A thief plans to rob the houses but cannot rob two consecutive houses, as it will alert the police. You need to find the maximum amount of money the thief can rob without robbing two consecutive houses. The input consists of a single integer n (1 le n le 100,000) — the number of houses. The second line contains n integers a_1, a_2, dots, a_n (0 le a_i le 1000), where a_i is the amount of money hidden inside the i-th house. Print a single integer, which is the maximum amount of money the thief can rob from the houses without robbing two consecutive houses. # Example: Input: ``` 5 2 7 9 3 1 ``` Output: ``` 12 ``` In this example, the thief can choose to rob houses with amounts 2, 9, and 1, totalling 12. The best strategy would be not to rob the houses in immediate consecutive places.","solution":"def maximize_robbery(n, houses): Returns the maximum amount of money the thief can rob without robbing two consecutive houses. Args: n : int : number of houses houses : list of int : amounts of money hidden inside the houses Returns: int : maximum amount of money that can be robbed if n == 0: return 0 elif n == 1: return houses[0] dp = [0] * n dp[0] = houses[0] dp[1] = max(houses[0], houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], houses[i] + dp[i-2]) return dp[-1]"},{"question":"The Cheese Factory has an assembly line where they produce cheese in blocks of various sizes. Each cheese block can be represented as a rectangular grid of size n x m. Some cells in the grid are good cheese (\'G\'), while some cells are moldy cheese (\'M\'). The production manager wants to determine the largest square block of good cheese that can be cut out from the grid. Write a program to find the side length of the largest square made entirely of good cheese. The first line contains two integers n and m (1 ≤ n, m ≤ 100), which are the dimensions of the grid. The next n lines each contain m characters, which are either \'G\' (good cheese) or \'M\' (moldy cheese). Output a single integer, the side length of the largest square of good cheese. Example: Input: 5 6 GGMGGM GGGMGG GGMGGG MGGGGG GGGGGG Output: 3 Explanation: The largest square of good cheese has a side length of 3 and can be found starting from the cell (3, 3).","solution":"def largest_good_cheese_square(n, m, grid): Returns the side length of the largest square block of good cheese (\'G\') that can be cut out from the grid. dp = [[0] * m for _ in range(n)] max_side = 0 for i in range(n): for j in range(m): if grid[i][j] == \'G\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Your task is to identify if the graph contains a cycle. If the graph contains a cycle, return \\"YES\\", otherwise return \\"NO\\". The first line contains two integers `n` and `m` (1 ≤ `n`, `m` ≤ 1000) — the number of nodes and the number of edges in the graph. Each of the next `m` lines contains two space-separated integers `ui` and `vi` (1 ≤ `ui`, `vi` ≤ `n`) — representing a directed edge from node `ui` to node `vi`. Output \\"YES\\" if the graph contains a cycle, otherwise output \\"NO\\". The possible solutions for the sample are given below. Example input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Example output: ``` YES ```","solution":"from collections import defaultdict, deque def contains_cycle(n, m, edges): Determines if a directed graph contains a cycle. Parameters: n (int): Number of nodes in the graph. m (int): Number of edges in the graph. edges (list of tuples): List of directed edges in the graph. Returns: str: \\"YES\\" if there is a cycle, otherwise \\"NO\\". graph = defaultdict(list) indegree = [0] * (n + 1) # Build the graph and compute indegrees of nodes for u, v in edges: graph[u].append(v) indegree[v] += 1 # Initialize the queue with nodes having 0 in-degree queue = deque() for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) visited_count = 0 # Perform Topological Sort using Kahn\'s Algorithm while queue: node = queue.popleft() visited_count += 1 for neighbor in graph[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If all nodes are not visited, there is a cycle if visited_count != n: return \\"YES\\" else: return \\"NO\\""},{"question":"In a graphical editor, a filled circle is drawn on a 2D plane. The editor supports two types of operations: 1. **Coloring operation**: It colors all points within a specified distance from a center point (the center of the circle). 2. **Query operation**: It checks if a specific point on the plane is colored. Your task is to implement functionality for these two operations and process a list of given operations. The first input line contains a single integer n (1 ≤ n ≤ 10000) — the number of operations. Each of the next n lines represents an operation and is formatted as follows: - \\"COLOR x y r\\" for a coloring operation, where (x, y) is the center of the circle and r is the radius. - \\"QUERY a b\\" for a query operation, where (a, b) is the point to check. For each \\"QUERY\\" operation, your output should be \\"YES\\" if the point (a, b) lies within any of the circles that have been colored, and \\"NO\\" otherwise. Consider all coordinates to be integers within the range -1e6 to 1e6. # Example Input: ``` 5 COLOR 1 1 2 QUERY 1 1 COLOR 4 4 1 QUERY 3 3 QUERY 4 4 ``` Output: ``` YES NO YES ``` Write a function `process_operations(operations)` that takes a list of operations and prints the results of the queries. # Note: - A point (a, b) is considered to be within a circle centered at (x, y) with radius r if the Euclidean distance from (a, b) to (x, y) is less than or equal to r. - The operations should be processed in the order they are given.","solution":"def process_operations(operations): from math import sqrt colored_circles = [] def is_point_inside_circle(a, b, x, y, r): return sqrt((a - x) ** 2 + (b - y) ** 2) <= r results = [] for operation in operations: op = operation.split() if op[0] == \\"COLOR\\": x, y, r = int(op[1]), int(op[2]), int(op[3]) colored_circles.append((x, y, r)) elif op[0] == \\"QUERY\\": a, b = int(op[1]), int(op[2]) found = any(is_point_inside_circle(a, b, x, y, r) for x, y, r in colored_circles) results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"Given a list of n integers, find the maximum product of any three distinct integers in the list. If the list contains fewer than three integers, return a message indicating that it\'s not possible to find such a product. # Input - The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of integers in the list. - The second line contains n space-separated integers, where each integer is within the range [-10^5, 10^5]. # Output - Print a single integer, the maximum product of any three distinct integers in the list. If there are fewer than three integers in the list, print \\"not possible\\". # Example Input: ``` 5 1 2 3 4 5 ``` Output: ``` 60 ``` Input: ``` 3 -10 -10 5 ``` Output: ``` 500 ``` Input: ``` 2 1 2 ``` Output: ``` not possible ``` # Explanation In the first example, the maximum product is obtained by the integers 3, 4, and 5 (3 * 4 * 5 = 60). In the second example, the maximum product is obtained by the integers -10, -10, and 5 (-10 * -10 * 5 = 500). In the third example, there are fewer than three integers in the list, so it\'s not possible to find the product of three distinct integers.","solution":"def max_product_of_three(nums): Returns the maximum product of any three distinct integers in the list. If there are fewer than three integers in the list, returns \\"not possible\\". n = len(nums) if n < 3: return \\"not possible\\" nums.sort() # There are two possible ways to get the maximum product: # 1. The product of the three largest positive numbers. # 2. The product of the two smallest negative numbers and the largest positive number. max_product = max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1]) return max_product # Example usage: # nums = [1, 2, 3, 4, 5] # print(max_product_of_three(nums)) # Output: 60"},{"question":"The inhabitants of Turing Town have a unique way of expressing numbers using a system of nested arrays. The goal is to convert these nested arrays back into their numeric values. The nested arrays are a form of hierarchical representation, where the depth of nesting corresponds to the number itself. Here is how the numbers are represented: - The number `1` is represented by a single empty list `[]`. - The number `2` is represented by a list containing one empty list `[[]]`. - The number `3` is represented by a list containing a list which itself contains an empty list `[[[]]]`. - And so on, where the nth number is represented by n nested empty lists. Your task is to write a function that, given such a nested list representation, returns the corresponding number. # Input: The input consists of a single string representing a Python valid nested list, which can be converted to a nested list via `eval` function. # Output: The output should be a single integer representing the numeric value equivalent of the nested list. # Example: ```python print(evaluate_nested_list(\\"[[[]]]\\")) # Output: 3 print(evaluate_nested_list(\\"[[[[]]]]\\")) # Output: 4 print(evaluate_nested_list(\\"[]\\")) # Output: 1 print(evaluate_nested_list(\\"[[[[[[[]]]]]]]\\")) # Output: 7 ``` # Function Signature ```python def evaluate_nested_list(s: str) -> int: # Your code here ``` # Constraints: - The depth of the nested list will be between 1 and 1,000 (both inclusive). - The input string contains a valid nested list in the form of Python lists.","solution":"def evaluate_nested_list(s: str) -> int: Given a string representing a nested list, return the numeric value equivalent of the nested list. The depth of nesting corresponds to the number itself. Args: s (str): A string representing a nested list. Returns: int: The numeric value equivalent of the nested list. def depth_of_nested_list(nested_list): # If it\'s an empty list, it has a depth of 1 if not nested_list: return 1 # Otherwise, calculate the depth recursively return 1 + depth_of_nested_list(nested_list[0]) # Convert the input string to a nested list nested_list = eval(s) # Find the depth of the nested list return depth_of_nested_list(nested_list)"},{"question":"Alice is working on a data logging system that records temperature readings of various sensors placed in a building. The system logs the readings in a list, where each element is a tuple containing the sensor ID and the temperature reading taken at that very moment. Alice wants to analyze the temperature readings to find out if there are any sensors that show consistently rising temperatures in a series. She defines a consistently rising series as one in which each subsequent temperature reading is strictly higher than the previous one for the same sensor. You are given the list of readings, and you need to determine how many sensors have at least one consistently rising series of length 3 or more. The input is a list of tuples, where each tuple contains a sensor ID (an integer) and a temperature reading (a float). The list of tuples is provided as the input to the function. Write a function `count_rising_series(readings)` that takes a list of tuples as described and returns an integer representing the number of sensors having at least one consistently rising series of length 3 or more. # Function Signature ```python def count_rising_series(readings: List[Tuple[int, float]]) -> int: ``` # Input - `readings` (List[Tuple[int, float]]): A list of tuples where each tuple contains: - `sensor_id` (int): The unique identifier of the sensor. - `temperature` (float): The temperature reading from the sensor. # Output - An integer representing the number of sensors that have at least one consistently rising series of length 3 or more. # Example ```python readings = [ (1, 23.5), (2, 22.1), (1, 24.0), (2, 22.3), (1, 24.5), (2, 22.0), (1, 25.0), (2, 22.5), (3, 19.0), (3, 20.0), (3, 21.0) ] print(count_rising_series(readings)) # Output: 2 ``` In this example: - Sensor 1 has a rising series [23.5, 24.0, 24.5, 25.0] - Sensor 3 has a rising series [19.0, 20.0, 21.0] - Sensor 2 does not have any consistently rising series of length 3 or more.","solution":"from typing import List, Tuple def count_rising_series(readings: List[Tuple[int, float]]) -> int: sensor_data = {} for sensor_id, temp in readings: if sensor_id not in sensor_data: sensor_data[sensor_id] = [] sensor_data[sensor_id].append(temp) count = 0 for sensor_id, temps in sensor_data.items(): if len(temps) < 3: continue rising_count = 1 rising_series_found = False for i in range(1, len(temps)): if temps[i] > temps[i - 1]: rising_count += 1 if rising_count >= 3: rising_series_found = True break else: rising_count = 1 if rising_series_found: count += 1 return count"},{"question":"Eulampius has developed a new type of encryption algorithm that works as follows: He generates two integer arrays, a and b, each of length n. Using these arrays, he encrypts a message represented as an integer m by repeatedly applying a special transformation for k steps. In each step, he computes the next encryption value of m by taking the indices corresponding to the values of a that are less than or equal to the previous value of m, sums the corresponding values of b, and uses this sum mod 10^9+7 as the new value of m. Given the initial integer m, arrays a and b, and the value of k, determine the final encrypted value of m after k steps. If at any point no value in a is less than or equal to the current m, the encryption process should terminate early. The first line of the input contains one integer t (1 le t le 10000) — the number of test cases. Then the test cases follow. The first line of each test case contains three integers n, k, and m (1 le n le 2 cdot 10^5, 1 le k le 10^9, 1 le m le 10^9) — the length of the arrays, the number of transformation steps, and the initial value of m, respectively. The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), representing the array a. The third line of each test case contains n integers b_1, b_2, ldots, b_n (1 le b_i le 10^9), representing the array b. Print the final encrypted values of m for all test cases in the order they appear in the input. # Example **Input:** ``` 2 4 3 5 2 3 5 10 3 4 5 6 3 1 7 7 8 9 2 3 4 ``` **Output:** ``` 5 9 ``` # Explanation In the first test case: - Initial value of m is 5. - Step 1: The values in a less than or equal to 5 are at indices [0, 1, 2]. The corresponding values in b are [3, 4, 5]. Sum of these values is 12. New m is 12 % (10^9+7) = 12. - Step 2: The values in a less than or equal to 12 are at indices [0, 1, 2, 3]. The corresponding values in b are [3, 4, 5, 6]. Sum of these values is 18. New m is 18 % (10^9+7) = 18. - Step 3: The values in a less than or equal to 18 are at indices [0, 1, 2, 3]. The corresponding values in b are [3, 4, 5, 6]. Sum of these values is 18. New m is 18 % (10^9+7) = 18. In the second test case: - Initial value of m is 7. - Step 1: The values in a less than or equal to 7 are at indices [0]. The corresponding values in b are [2]. Sum of these values is 2. New m is 2 % (10^9+7) = 2.","solution":"def encrypt(t, test_cases): MOD = 10**9 + 7 results = [] for test in test_cases: n, k, m = test[\'n\'], test[\'k\'], test[\'m\'] a = test[\'a\'] b = test[\'b\'] while k > 0: # Find indices in \'a\' which have values <= m indices = [i for i in range(n) if a[i] <= m] # If no such indices, break out if not indices: break # Sum the corresponding values in \'b\' m = sum(b[i] for i in indices) % MOD # Decrease k by 1 for this step k -= 1 results.append(m) return results"},{"question":"You are given a rectangular grid filled with unique positive integers. Your task is to find the minimum value in each row of the grid and then the maximum value among those minimums. The input consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 100), which represent the number of rows and columns of the grid. - The next n lines contain m unique positive integers each, representing the grid. Print a single integer, which is the maximum value among the minimum values of each row. Example Input: 3 3 3 7 5 1 8 2 9 4 6 Example Output: 4","solution":"def max_of_mins(grid): Find the maximum value among the minimum values of each row in the grid. Parameters: grid (list of lists of int): The input grid Returns: int: The maximum value among the minimum values of each row # Finding the minimum value in each row min_values = [min(row) for row in grid] # Finding the maximum value among those minimum values return max(min_values) def read_grid_and_find_max_of_mins(n, m, lines): Create grid from input and compute the maximum value among the minimum values of each row. Parameters: n (int): Number of rows m (int): Number of columns lines (list of str): List of strings representing each row of the grid Returns: int: The maximum value among the minimum values of each row grid = [] for line in lines: grid.append(list(map(int, line.split()))) return max_of_mins(grid)"},{"question":"You are given a grid of size `m x n` initially filled with some integers, and you need to perform a series of queries to manipulate the numbers in the grid. Each query pertains to performing an incremental update on a subrectangle bounded by top-left corner (r1, c1) and bottom-right corner (r2, c2) (inclusive). Each query will increment every element in the specified subrectangle by a given integer x. If the integer x is positive, this operation is equivalent to increasing all elements in the subrectangle by x. If x is negative, it is equivalent to decreasing all elements in the subrectangle by the absolute value of x. You need to process a series of such queries efficiently and return the final state of the grid after all queries have been processed. # Input - The first line of input will be two space-separated integers `m` and `n` (1 ≤ m, n ≤ 100). - The following `m` lines each contain `n` space-separated integers representing the initial grid. - The next line contains a single integer `q` (1 ≤ q ≤ 1000), the number of queries. - The following `q` lines each contain five space-separated integers `r1`, `c1`, `r2`, `c2`, and `x`, representing a query to increment each element in the subrectangle bounded by (r1, c1) and (r2, c2) by `x`. # Output - Print the final state of the grid after all queries have been applied. The output should consist of `m` lines, each containing `n` space-separated integers. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 2 2 3 3 -1 ``` Output ``` 2 3 3 5 5 5 7 7 8 ``` # Explanation - The initial grid is: ``` 1 2 3 4 5 6 7 8 9 ``` - After the first query (1, 1, 2, 2, 1), it becomes: ``` 2 3 3 5 6 6 7 8 9 ``` - After the second query (2, 2, 3, 3, -1), it becomes: ``` 2 3 3 5 5 5 7 7 8 ```","solution":"def apply_queries(m, n, grid, queries): def increase_subrectangle(grid, r1, c1, r2, c2, x): for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): grid[i][j] += x for query in queries: r1, c1, r2, c2, x = query increase_subrectangle(grid, r1 - 1, c1 - 1, r2 - 1, c2 - 1, x) return grid"},{"question":"You are given a list of integers a_1, a_2,…, a_n and an integer k. You need to determine if there exists a subarray of length exactly k such that the sum of its elements is equal to a given integer target. Write a function that takes two integers n and k (1 le n le 10^5, 1 le k le n, -10^9 le a_i le 10^9, -10^9 le target le 10^9), a list of n integers, and an integer target. Then return a boolean indicating whether such a subarray exists. **Input:** ``` n, k, array of n integers, target ``` **Output:** ``` true if there exists a subarray of length k with sum equal to target, false otherwise ``` **Example:** ``` Input: n = 5, k = 3, array = [1, 2, 3, 4, 5], target = 9 Output: true Explanation: Subarray [2, 3, 4] has sum 9. ``` **Additional Instructions:** - You may assume the sum of the elements does not exceed the range of a 64-bit integer. - Provide a solution with a time complexity of O(n). **Function Signature:** ```python def subarray_sum_equals_target(n: int, k: int, array: List[int], target: int) -> bool: pass ```","solution":"from typing import List def subarray_sum_equals_target(n: int, k: int, array: List[int], target: int) -> bool: Determines if there exists a subarray of length exactly k such that the sum of its elements is equal to the given integer target. # Initialize the sum of the first subarray of length k current_sum = sum(array[:k]) if current_sum == target: return True for i in range(k, n): current_sum += array[i] - array[i - k] if current_sum == target: return True return False"},{"question":"Given a string s consisting of lowercase English letters, you are tasked with determining the minimum number of character deletions required to make all remaining characters in the string distinct. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). Description of the test cases follows. The first line of each test case contains a string s (1 leq |s| leq 100) — the string you want to process. Your program should output t lines, each containing the result for the corresponding test case. Input: ``` 3 aabbcc abcabc aabbccdde ``` Output: ``` 3 3 4 ``` Explanation: - In the first test case, the string \\"aabbcc\\" requires at least 3 deletions to remove duplicate characters. Examples of resulting strings with distinct characters: \\"abc\\", \\"acb\\". - In the second test case, the string \\"abcabc\\" requires at least 3 deletions to have distinct characters. Examples of resulting strings with distinct characters: \\"abc\\", \\"bca\\". - In the third test case, the string \\"aabbccdde\\" requires at least 4 deletions to ensure all characters are distinct. Examples of resulting strings with distinct characters: \\"abcde\\", \\"bcdea\\".","solution":"def min_deletions_to_unique(s): Determine the minimum number of deletions required to make all remaining characters in s unique. char_count = {} for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 deletions = 0 for count in char_count.values(): if count > 1: deletions += count - 1 return deletions def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_deletions_to_unique(s)) return results"},{"question":"Write a program that processes a list of employees and their relationships in a company to determine the direct managerial hierarchy. An employee can only have one direct manager, but a manager can have multiple direct subordinates. The program should answer queries of the following two types: 1. \\"assign X Y\\": Assigns employee Y as a direct subordinate of employee X. 2. \\"manager Y\\": Outputs the direct manager of employee Y, or \\"NONE\\" if employee Y has no manager. Your program should handle the queries and maintain the hierarchical structure efficiently. The input will be structured as follows: The first line contains an integer n denoting the number of queries, (1 ≤ n ≤ 1000). Each of the following lines contains a query as described above. All employee names are unique strings containing only lowercase letters and do not exceed 10 characters in length. For each query of the second type, print the result on a separate line. Example input: 6 assign alice bob assign alice charlie manager bob manager dave assign bob eve manager eve Example output: alice NONE bob","solution":"def process_queries(n, queries): employee_manager = {} results = [] for query in queries: parts = query.split() if parts[0] == \\"assign\\": manager, subordinate = parts[1], parts[2] employee_manager[subordinate] = manager elif parts[0] == \\"manager\\": subordinate = parts[1] results.append(employee_manager.get(subordinate, \\"NONE\\")) return results"},{"question":"Lisa and Daniel are planning to play a game. They both have some initial attributes which may increase or decrease during the game. The game consists of N rounds, and each round can either increase or decrease their attributes based on certain conditions. For each round, you are given four integers representing the effects on Lisa\'s and Daniel\'s attributes: - a: the amount by which Lisa\'s attribute is increased. - b: the amount by which Lisa\'s attribute is decreased. - c: the amount by which Daniel\'s attribute is increased. - d: the amount by which Daniel\'s attribute is decreased. After all rounds, you need to determine the final value of Lisa\'s and Daniel\'s attributes. The first line of the input contains two integers, L and D, the initial attributes for Lisa and Daniel (1 ≤ L, D ≤ 10^9). The next line contains an integer N (1 ≤ N ≤ 10^5) representing the number of rounds in the game. Each of the following N lines contains four integers a, b, c, and d (0 ≤ a, b, c, d ≤ 10^9) representing the changes in Lisa\'s and Daniel\'s attributes for that round. Print two integers - the final attributes of Lisa and Daniel after all rounds. If the attribute of any player becomes negative, consider it to be zero. In the first sample, Lisa\'s initial attribute is 10 and Daniel\'s initial attribute is 20. After the first round, Lisa\'s attribute increases by 5 and decreases by 3, while Daniel\'s attribute increases by 2 and decreases by 1. So after the first round, Lisa\'s attribute becomes 12 and Daniel\'s attribute becomes 21. After the second round, all values are adjusted accordingly to get the final result. In the second sample, Lisa and Daniel go through more complex rounds with varying effects. Calculate finalattributes step-by-step to get the desired output.","solution":"def final_attributes(lisa_initial, daniel_initial, rounds): Calculate the final attributes of Lisa and Daniel after all rounds. Parameters: lisa_initial (int): initial attribute of Lisa daniel_initial (int): initial attribute of Daniel rounds (list of tuples): list of rounds where each round is represented as (a, b, c, d) Returns: tuple: final attributes of Lisa and Daniel final_lisa = lisa_initial final_daniel = daniel_initial for (a, b, c, d) in rounds: final_lisa += a - b final_daniel += c - d # Ensure attributes do not become negative if final_lisa < 0: final_lisa = 0 if final_daniel < 0: final_daniel = 0 return (final_lisa, final_daniel)"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to find the longest substring of s such that no character appears more than once. If there are multiple longest substrings with the same length, return the one which appears first. # Input - A single string s (1 ≤ |s| ≤ 1000). # Output - Print the longest substring of s where all the characters are unique. If there are multiple substrings with the maximum length, print the one that appears first. # Example Input ``` abcabcbb ``` Output ``` abc ``` # Explanation Among the substrings with all unique characters, \\"abc\\", \\"bca\\", \\"cab\\" have the maximum length 3. Since \\"abc\\" appears first, it\'s the result. Remember to efficiently traverse the string to ensure optimal performance. Avoid checking all possible substrings due to potential performance issues with larger input strings.","solution":"def longest_unique_substring(s): Return the longest substring of s where all characters are unique. If there are multiple longest substrings with the same length, return the one that appears first. :param s: str, input string :return: str, longest substring with all unique characters n = len(s) char_index = {} start = 0 max_length = 0 longest_substr = \\"\\" for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end current_length = end - start + 1 if current_length > max_length: max_length = current_length longest_substr = s[start:end+1] return longest_substr"},{"question":"You are given a grid consisting of n rows and m columns. Each cell of the grid contains a single lowercase English letter. Your task is to determine the number of unique letters that can be found along all possible paths in the grid, starting from the top-left corner of the grid and moving to the bottom-right corner. You can only move either right or down at any point in time. # Input The first line contains two integers n and m (1 le n, m le 1000) - the number of rows and the number of columns in the grid respectively. The following n lines describe the grid, each containing m lowercase English letters. # Output Output a single integer representing the number of unique letters found in all possible paths from the top-left corner to the bottom-right corner. # Example Input ``` 2 3 abc def ``` Output ``` 6 ``` Explanation The unique letters in all possible paths from the cell (1,1) to (2,3) are a, b, c, d, e, and f. # Note The grid is guaranteed to have at least one cell. Each path from the top-left to the bottom-right corner is formed by a series of moves either right or down, without revisiting any cell.","solution":"def unique_letters_in_paths(grid): This function receives a grid as a list of strings and returns the number of unique letters found in all possible paths from the top-left corner to the bottom-right corner. n = len(grid) m = len(grid[0]) unique_letters = set() def dfs(x, y, path_set): if x == n-1 and y == m-1: unique_letters.update(path_set) return if x < n-1: dfs(x + 1, y, path_set | {grid[x+1][y]}) if y < m-1: dfs(x, y + 1, path_set | {grid[x][y+1]}) dfs(0, 0, {grid[0][0]}) return len(unique_letters) # Example usage: n, m = 2, 3 grid = [ \\"abc\\", \\"def\\" ] print(unique_letters_in_paths(grid)) # Should output 6"},{"question":"Alex enjoys processing strings using a special encoding mechanism. Here is the pseudocode for encoding a string of length n: 1. Initialize an encoded string as an empty string. 2. Traverse the input string from left to right. 3. For each character in the string, append to the encoded string the character followed by its 1-based index in the original string. Your task is to implement this encoding function in Python. Given a string s, output its encoded version based on the rules described above. # Input: A single string s, consisting of lowercase English letters (1 ≤ |s| ≤ 1000). # Output: A single string which is the encoded version of the input string. # Example: **Input:** ``` abc ``` **Output:** ``` a1b2c3 ``` # Note: In the first example, the characters \'a\', \'b\', and \'c\' are at positions 1, 2, and 3 respectively in the input string. Therefore, their encoded forms are \'a1\', \'b2\', and \'c3\', respectively, resulting in the final encoded string \\"a1b2c3\\".","solution":"def encode_string(s): Encodes the input string `s` by appending each character with its 1-based index. Parameters: s (str): Input string consisting of lowercase English letters. Returns: str: Encoded version of the input string. encoded = \'\'.join(f\'{char}{index + 1}\' for index, char in enumerate(s)) return encoded"},{"question":"Bella, an archaeologist, has discovered a unique ancient code where each letter maps to a number. The code she found is a string of digits. Bella believes that it\'s a message encoded using a variant of the T9 predictive text system used in some mobile phones. Here is the mapping of letters to digits: ``` 1: none 2: abc 3: def 4: ghi 5: jkl 6: mno 7: pqrs 8: tuv 9: wxyz 0: none ``` Bella needs your help to determine the number of possible decodings of the sequence of digits she discovered. Write a function to help Bella count the number of ways the message can be decoded given that: - \'0\' cannot be at the start of the sequence. - Numbers from \'10\' to \'26\' (except those containing \'0\' directly) form a separate group representing specific letters (\'j\' to \'z\'). The input is a single string of digits. The output should be a single integer representing the total number of ways to decode the given string. **Input format:** - A single line of input containing a string of digits representing Bella\'s discovered code. **Output format:** - A single integer representing the number of possible decodings. **Constraints:** - The length of the string is between 1 and 1000. **Example:** ``` Input: 123 Output: 3 Explanation: There are 3 ways to decode the string \\"123\\": 1. \\"1\\", \\"2\\", \\"3\\" -> \\"abc\\" 2. \\"12\\", \\"3\\" -> \\"lc\\" 3. \\"1\\", \\"23\\" -> \\"aw\\" ```","solution":"def num_decodings(s): if not s or s.startswith(\'0\'): return 0 n = len(s) dp = [0] * (n + 1) dp[0] = 1 for i in range(1, n + 1): if s[i - 1] != \'0\': dp[i] += dp[i - 1] if i > 1 and s[i - 2] == \'1\' or (s[i - 2] == \'2\' and s[i - 1] in \'0123456\'): dp[i] += dp[i - 2] return dp[n]"},{"question":"You are given a list of n integers and a target integer k. Write a function that finds the length of the longest contiguous subarray that sums to k. The input to your function will be the list of integers and the target integer k. You need to return the length of the longest contiguous subarray. If there is no subarray that sums to k, return 0. # Function Signature ```python def longest_subarray_with_sum_k(nums: List[int], k: int) -> int: pass ``` # Input - `nums (List[int])`: A list of integers where the number of elements is between 1 and 10^5. - `k (int)`: The target sum, which is an integer. # Output - `int`: The length of the longest subarray whose sum equals to k. If no such subarray exists, return 0. # Example ```python # Example 1 nums = [1, -1, 5, -2, 3] k = 3 longest_subarray_with_sum_k(nums, k) # Returns: 4 # Example 2 nums = [-2, -1, 2, 1] k = 1 longest_subarray_with_sum_k(nums, k) # Returns: 2 # Example 3 nums = [1, 2, 3, 4, 5] k = 15 longest_subarray_with_sum_k(nums, k) # Returns: 5 # Example 4 nums = [1, 2, 3] k = 6 longest_subarray_with_sum_k(nums, k) # Returns: 3 # Example 5 nums = [1, 2, 3] k = 7 longest_subarray_with_sum_k(nums, k) # Returns: 0 ``` # Constraints - The length of the input list will not exceed 10^5. - The absolute value of elements in the list will not exceed 10^4. - The target integer k will be within the range of -10^9 to 10^9.","solution":"from typing import List def longest_subarray_with_sum_k(nums: List[int], k: int) -> int: prefix_sum = 0 sum_index_map = {} max_len = 0 for i in range(len(nums)): prefix_sum += nums[i] if prefix_sum == k: max_len = i + 1 if prefix_sum - k in sum_index_map: max_len = max(max_len, i - sum_index_map[prefix_sum - k]) if prefix_sum not in sum_index_map: sum_index_map[prefix_sum] = i return max_len"},{"question":"You are given an integer n. You have to determine the number of ways to exactly reach the integer n using steps of either +1 or -1, starting from 0. Return the answer modulo 1000000007 (10^9 + 7). The first line contains an integer n (|n| ≤ 10^9). Note that the answer could be a large number, so make sure to use a modulus operation. Output a single integer representing the number of ways to reach the integer n modulo 1000000007. In the first sample, for n = 3, there are exactly 4 ways to reach 3: 1. +1, +1, +1 2. +1, -1, +1, +1, +1 3. +1, +1, -1, +1, +1 4. -1, +1, +1, +1, +1, +1","solution":"def count_ways(n): MOD = 1000000007 return pow(2, abs(n), MOD)"},{"question":"You are given a list of n transactions, each with a timestamp and amount. Your task is to determine the number of unique days on which transactions occurred. Each transaction is represented by a string in the format \\"YYYY-MM-DD HH:MM:SS amount\\", where \\"YYYY-MM-DD HH:MM:SS\\" is the timestamp and \\"amount\\" is the transaction amount. The first line of input contains the integer n (1 ≤ n ≤ 1000), the number of transactions. The next n lines each contain a transaction string. Output the number of unique days on which transactions occurred. Example: Input: 5 2023-08-12 13:45:30 120.50 2023-08-12 14:12:34 80.00 2023-08-13 09:00:00 20.00 2023-08-14 06:20:20 50.00 2023-08-14 22:10:10 35.00 Output: 3","solution":"def count_unique_days(transactions): Counts the number of unique days on which transactions occurred. Each transaction is represented by a string in the format \\"YYYY-MM-DD HH:MM:SS amount\\". :param transactions: List of transaction strings. :return: Number of unique days on which transactions occurred. unique_days = set() for transaction in transactions: date, _time, _amount = transaction.split(maxsplit=2) unique_days.add(date) return len(unique_days)"},{"question":"You are given an array of positive integers representing the sizes of files. Files can be sent together in a single batch if their sum of sizes does not exceed a given limit. Your task is to determine the minimum number of batches needed to send all files. Each file must be sent exactly once. The first line contains two integers n (1 ≤ n ≤ 1000) and L (1 ≤ L ≤ 10^6), representing the number of files and the size limit for each batch respectively. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 10^6) - the sizes of the files. Output the minimum number of batches required to send all files. Example: Input: 5 10 1 2 3 4 5 Output: 2 Explanation: One optimal way to send the files in 2 batches is: - Batch 1: files of sizes 1, 2, 3, and 4 (total 10) - Batch 2: file of size 5","solution":"def min_batches(n, L, sizes): Determines the minimum number of batches required to send all files. Parameters: n (int): The number of files. L (int): The size limit for each batch. sizes (list of int): The sizes of the files. Returns: int: The minimum number of batches required. from itertools import combinations from bisect import bisect_right # Sort sizes in descending order sizes.sort(reverse=True) # Create an array to keep track of used files used = [False] * n batches = 0 for i in range(n): if not used[i]: remaining_limit = L - sizes[i] used[i] = True # Greedily try to fit the largest possible files into the current batch for j in range(i + 1, n): if not used[j] and sizes[j] <= remaining_limit: remaining_limit -= sizes[j] used[j] = True batches += 1 return batches"},{"question":"Sarah is working on a new application that deals with a sequence of operations on an integer array. Each operation can be one of the following: 1. Add an element to the end of the array (`A x`): This operation is represented by the letter `A` followed by an integer `x`, meaning add `x` to the end of the array. 2. Remove an element from the beginning of the array (`R`): This operation is represented by the letter `R`, meaning remove the first element from the array. 3. Query the sum of the array (`Q`): This operation is represented by the letter `Q`, meaning output the sum of all elements currently in the array. Your task is to implement a function that processes a list of operations and outputs the results of the query operations (`Q`). The operations are given in chronological order. Input: - The first line of input contains a single integer `m` (1 ≤ m ≤ 100,000), the number of operations. - The next `m` lines each describe one operation. If the operation is of type `A x`, it will be followed by a single integer `x` (-109 ≤ x ≤ 109). Output: - For each query operation `Q`, output the sum of the array\'s elements at that point. Example: Input: ``` 8 A 5 A 3 Q R Q A 10 R Q ``` Output: ``` 8 3 10 ``` Explanation: 1. Add 5 to the array: `[5]` 2. Add 3 to the array: `[5, 3]` 3. Query the sum: `5 + 3 = 8` 4. Remove the first element: `[3]` 5. Query the sum: `3` 6. Add 10 to the array: `[3, 10]` 7. Remove the first element: `[10]` 8. Query the sum: `10`","solution":"def process_operations(m, operations): array = [] results = [] for operation in operations: if operation.startswith(\\"A\\"): _, x = operation.split() array.append(int(x)) elif operation == \\"R\\": if array: array.pop(0) elif operation == \\"Q\\": results.append(sum(array)) return results"},{"question":"Given an array of integers, you would like to reorder the elements in such a way that the array alternates between peaks and valleys. An element is considered a peak if it is not smaller than its neighbors; a valley is an element which is not bigger than its neighbors. For the purpose of this problem, the first element can only have one neighbor, and should therefore be considered a peak or a valley depending on its relation to its single neighbor. Note that just as an array can have multiple valid \\"peak-valley\\" orderings, there can also be arrays where elements can be both peaks and valleys given different reorderings. Write a function: ```python def reorder_peaks_and_valleys(arr: List[int]) -> List[int]: ``` # Input - An integer array `arr` with length `n` where `1 <= n <= 100`. # Output - Return a reordered list that alternates between peaks and valleys. # Example ```python # Input arr = [5, 3, 1, 2, 3] # Output [3, 5, 1, 3, 2] or [1, 5, 2, 3, 3] - Multiple valid outputs exist ``` # Note In the given example: - [3, 5, 1, 3, 2] reorders it to a peak-valley form: 3 (valley), 5 (peak), 1 (valley), 3 (peak), 2 (valley). - Similarly, [1, 5, 2, 3, 3] reorders it to a peak-valley form: 1 (valley), 5 (peak), 2 (valley), 3 (peak), 3 (valley). Constraints: - The input array can be in any order – it does not have to be sorted. - You should use `List[int]` as the type for the input and output in Python. - The peaks and valleys should alternate as much as possible but some elements might qualify as both depending on their neighbors, leading to multiple correct solutions.","solution":"from typing import List def reorder_peaks_and_valleys(arr: List[int]) -> List[int]: arr.sort() for i in range(1, len(arr), 2): if i + 1 < len(arr): arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr"},{"question":"You are given a list of students with their names and scores in a recent coding challenge. The challenge consists of three separate problems, and the total score for each student is the sum of their scores on all three problems. You want to determine the students who have the highest total score. Implement a program that reads the number of students and their respective scores, and then outputs the name(s) of the student(s) with the highest total score. If multiple students have the same highest score, output their names in alphabetical order. The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of students. Each of the next n lines contains a string (the name of the student) and three integers separated by spaces: the scores of the student in the three problems respectively (0 ≤ score ≤ 100). Output a list of names of the students with the highest score, each name on a new line, in alphabetical order. # Example Input: 5 Alice 90 80 100 Bob 70 75 80 Charlie 90 80 100 Dan 85 85 85 Eve 80 90 95 Output: Alice Charlie","solution":"def top_scorers(num_students, student_data): data = [] for entry in student_data: parts = entry.split() name = parts[0] scores = list(map(int, parts[1:])) total_score = sum(scores) data.append((name, total_score)) max_score = max(score for name, score in data) top_students = sorted(name for name, score in data if score == max_score) return top_students"},{"question":"You are given a series of events represented by tuples `(timestamp, event_type)`, where `timestamp` is in the format \\"YYYY-MM-DD HH:MM:SS\\", and `event_type` is a string representing the type of event. Your task is to group the events by their `event_type` and then sort each group of events by their `timestamp` in ascending order. Finally, output each group of events in the following format: the `event_type` header followed by the list of events under that type, each on a new line. The input will contain an integer `n` (1 ≤ n ≤ 100), representing the number of events, followed by `n` lines, each containing an event represented by a `timestamp` and an `event_type` separated by a space. Example input: ``` 5 2023-01-01 12:00:00 A 2023-01-01 13:00:00 B 2023-01-01 11:00:00 A 2023-01-02 12:00:00 B 2023-01-01 14:00:00 A ``` Example output: ``` A 2023-01-01 11:00:00 2023-01-01 12:00:00 2023-01-01 14:00:00 B 2023-01-01 13:00:00 2023-01-02 12:00:00 ``` Instructions: 1. Read the number of events. 2. Read each event and store them. 3. Group the events by `event_type`. 4. Sort each group by `timestamp` in ascending order. 5. Print each group in the specified format.","solution":"def group_and_sort_events(n, events): from collections import defaultdict import datetime event_dict = defaultdict(list) for event in events: timestamp, event_type = event.rsplit(\' \', 1) event_dict[event_type].append(timestamp) result = [] for event_type, timestamps in event_dict.items(): timestamps.sort() result.append(event_type) result.extend(timestamps) result.append(\'\') return result def format_output(events): return \'n\'.join(events).strip() + \'n\' def process_events(n, event_list): grouped_sorted_events = group_and_sort_events(n, event_list) return format_output(grouped_sorted_events)"},{"question":"Farmer John is excited about the upcoming state fair, where he plans to display his prized herd of cows. However, he knows that his cows are notorious for wandering off and getting lost, which always leads to chaos just before the fair. To prevent this, Farmer John wants to devise a sophisticated tracking system to monitor the cows\' positions at all times. Farmer John has installed a network of m checkpoints around the farm. Each checkpoint can monitor a specific area and report the number of cows within that area. The positions of the checkpoints and the cows are given as points in a 2D plane. Farmer John has a list of q queries. Each query specifies a rectangular region, and Farmer John needs to determine how many cows are located within that region. A cow is considered to be within the region if it lies inside or on the boundary of the rectangle. The input consists of: - The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 100,000) — the number of cows, the number of checkpoints, and the number of queries, respectively. - The next n lines each contain two integers xi and yi (0 ≤ xi, yi ≤ 100,000) — the coordinates of the i-th cow. - The next m lines each contain two integers ai and bi (0 ≤ ai, bi ≤ 100,000) — the coordinates of the i-th checkpoint. - The next q lines each contain four integers x1, y1, x2, y2 (0 ≤ x1 ≤ x2 ≤ 100,000 and 0 ≤ y1 ≤ y2 ≤ 100,000) — the coordinates of the bottom-left and top-right corners of a rectangular region. For each query, output a single integer — the number of cows located within the specified rectangular region. In the first sample, there are three cows at coordinates (1, 3), (4, 4), and (5, 6). The first query asks for the rectangular region from (1, 1) to (5, 5), which contains two cows at (1, 3) and (4, 4). Therefore, the output is 2. In the second sample, the cows are located at (1, 1) and (3, 3). The rectangular region from (1, 1) to (2, 2) contains one cow at (1, 1), so the output is 1. Similarly, the region from (2, 2) to (3, 3) contains one cow at (3, 3), so the output is also 1.","solution":"def count_cows_in_region(n, m, q, cows, checkpoints, queries): count_results = [] for query in queries: x1, y1, x2, y2 = query count = 0 for cow in cows: cx, cy = cow if x1 <= cx <= x2 and y1 <= cy <= y2: count += 1 count_results.append(count) return count_results"},{"question":"There is a rectangular grid of size n times m. You are given the starting cell (sx, sy) and the target cell (tx, ty). Each move, you can either move one cell up, down, left, or right. The task is to determine the minimum number of moves required to reach the target cell from the starting cell. However, certain cells on the grid have traps. You are not allowed to step on these trap cells. The first line contains a single integer k (1 le k le 20) — the number of test cases. For each test case, the first line contains two integers n and m (2 le n, m le 100) — the dimensions of the grid. The second line contains two integers sx and sy (0 le sx < n, 0 le sy < m) — the starting cell coordinates. The third line contains two integers tx and ty (0 le tx < n, 0 le ty < m) — the target cell coordinates. The fourth line contains a single integer p (0 le p le 1000) — the number of trap cells. Each of the next p lines contains two integers ix and iy (0 le ix < n, 0 le iy < m) — the coordinates of a trap cell. For each test case, print a single integer — the minimum number of moves required to reach the target cell from the starting cell while avoiding the trap cells. If it is impossible to reach the target, print -1. Example: Input: ``` 2 5 5 0 0 4 4 3 1 1 2 2 3 3 7 7 0 0 6 6 10 1 0 2 0 3 0 4 0 5 0 0 1 0 2 0 3 0 4 1 4 ``` Output: ``` 8 -1 ```","solution":"from collections import deque def min_moves_to_target(n, m, sx, sy, tx, ty, traps): if (sx, sy) == (tx, ty): return 0 directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] visited = [[False] * m for _ in range(n)] for ix, iy in traps: visited[ix][iy] = True queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if (nx, ny) == (tx, ty): return dist + 1 queue.append((nx, ny, dist + 1)) visited[nx][ny] = True return -1 # Target is not reachable def solve(test_cases): results = [] for n, m, sx, sy, tx, ty, p, traps in test_cases: result = min_moves_to_target(n, m, sx, sy, tx, ty, traps) results.append(result) return results"},{"question":"Given a list of integers, you need to determine the smallest positive integer that is missing from the list. Your task is to implement a function that finds this smallest missing positive integer. **Input** - The first line contains a single integer n — the length of the list (1 ≤ n ≤ 100,000). - The second line contains n space-separated integers — the elements of the list. Each element is guaranteed to be an integer within the range [-1,000,000,000 to 1,000,000,000]. **Output** - Print a single integer — the smallest positive integer that is missing from the list. **Examples** Example 1: ``` Input: 4 1 2 0 4 Output: 3 ``` Example 2: ``` Input: 5 3 -1 4 1 2 Output: 5 ``` Example 3: ``` Input: 3 7 8 9 Output: 1 ``` **Note** In the first example, the smallest positive integer not present in the list is 3. In the second example, the list contains 1 through 4, so the smallest missing positive integer is 5. In the third example, the list does not contain any positive integers starting from 1, so the smallest missing positive integer is 1.","solution":"def smallest_missing_positive_integer(nums): nums_set = set(nums) smallest_missing = 1 while smallest_missing in nums_set: smallest_missing += 1 return smallest_missing"},{"question":"You are given an array of integers a, and a set of q queries. Each query consists of two integers l and r, representing the starting and ending indices of a subarray. For each subarray, you need to determine the length of the longest segment where the difference between consecutive elements is exactly 1. The first line of input contains two integers n and q (1 ≤ n, q ≤ 200000) — the length of the array and the number of queries, respectively. The second line contains n integers a_i (1 ≤ a_i ≤ 10^6) — the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the indices for the subarray (1-based). Output q lines, the i-th line should contain the length of the longest segment for the i-th query subarray where the difference between consecutive elements is exactly 1. **Example:** Input: ``` 5 3 4 5 6 3 2 1 3 2 4 3 5 ``` Output: ``` 2 2 1 ``` **Explanation:** For the first query from index 1 to 3, the subarray is [4, 5, 6], and the longest segment where the difference between consecutive elements is 1 is [4, 5, 6], which has a length of 2 (since we are looking at the number of consecutive pairs). For the second query from index 2 to 4, the subarray is [5, 6, 3], and the longest segment where the difference between consecutive elements is 1 is [5, 6], which has a length of 2. For the third query from index 3 to 5, the subarray is [6, 3, 2], and the longest segment where the difference between consecutive elements is 1 is [3, 2], which has a length of 1 (since the difference between 6 and 3 is not 1).","solution":"def longest_segment_with_diff_one(n, q, a, queries): # Parse the queries results = [] for l, r in queries: subarray = a[l-1:r] max_len = 0 current_len = 1 for i in range(1, len(subarray)): if abs(subarray[i] - subarray[i-1]) == 1: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) results.append(max_len) return results"},{"question":"You are tasked with developing a navigation system for autonomous vehicles. Your system needs to find the shortest path from a given start point to an end point on a city grid. The city is represented as a grid with certain cells containing obstacles that vehicles cannot pass through. The grid is defined by an `n x m` matrix of integers, where a `0` represents a passable cell and a `1` represents an obstacle. The vehicle can move up, down, left, or right from a cell to its adjacent cell. Write a program that calculates the minimum number of moves required for the vehicle to reach the target cell. If it is impossible to reach the target cell from the start cell, your program should return `-1`. Input: - The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100), the dimensions of the grid. - The next `n` lines contain `m` integers each, representing the grid, where each integer is either `0` or `1`. - The following line contains four integers, `sx`, `sy`, `ex`, `ey` (1 ≤ sx, sy, ex, ey ≤ n, m), the starting and ending coordinates on the grid (1-based indexing). Output: - Output a single integer — the minimum number of moves required to reach the target cell, or `-1` if it is not possible. Example Input 1: ``` 5 5 0 0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 1 1 5 5 ``` Example Output 1: ``` 8 ``` Example Input 2: ``` 3 3 0 1 0 1 1 0 0 0 0 1 1 3 3 ``` Example Output 2: ``` -1 ```","solution":"from collections import deque def min_moves_to_reach_target(grid, sx, sy, ex, ey): n, m = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 visited = [[False] * m for _ in range(n)] queue = deque([(sx - 1, sy - 1, 0)]) # store (x, y, distance) visited[sx - 1][sy - 1] = True while queue: x, y, dist = queue.popleft() if (x, y) == (ex - 1, ey - 1): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given an unsorted array of integers where each integer appears exactly twice, except for one integer that appears only once. Your task is to find and return the integer that appears only once. Write a function that takes an array of integers as input and returns the integer that appears only once. Your code should have the following signature: ```python def find_unique(nums: List[int]) -> int: pass ``` **Examples:** Input: [2, 3, 5, 4, 5, 3, 4] Output: 2 Input: [1, 1, 2, 2, 3, 3, 4] Output: 4 **Note:** - Your solution should have a linear runtime complexity (O(n)) and use constant extra space (O(1)).","solution":"from typing import List def find_unique(nums: List[int]) -> int: Returns the integer that appears only once in the list. unique = 0 for num in nums: unique ^= num return unique"},{"question":"Given a graph represented by an adjacency matrix, implement an algorithm to find the shortest path from a starting node to an ending node using Dijkstra\'s algorithm. The function should return the minimum distance to reach the ending node from the starting node. If there is no path between the nodes, return -1. **Input:** - An integer n (2 ≤ n ≤ 100) representing the number of nodes. - An n x n integer matrix adjacency_matrix where adjacency_matrix[i][j] represents the weight of the edge from node i to node j (0 ≤ adjacency_matrix[i][j] ≤ 1000). If there is no edge between the nodes, the value will be 0. - An integer start (0 ≤ start < n) representing the starting node. - An integer end (0 ≤ end < n) representing the ending node. **Output:** - An integer representing the minimum distance from the start node to the end node. If there is no path between start and end, return -1. **Example:** ``` Input: n = 5 adjacency_matrix = [ [0, 10, 0, 30, 100], [10, 0, 50, 0, 0], [0, 50, 0, 20, 10], [30, 0, 20, 0, 60], [100, 0, 10, 60, 0] ] start = 0 end = 4 Output: 60 ``` In this example, the shortest path from node 0 to node 4 is 0 -> 3 -> 2 -> 4 with a distance of 60.","solution":"import heapq def dijkstra(n, adjacency_matrix, start, end): Implement Dijkstra\'s algorithm to find the shortest path from start to end node. # Distance to each node, initialized to infinity distances = [float(\'inf\')] * n distances[start] = 0 # Min-heap priority queue pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) # Early exit if we reach the end node if current_node == end: return current_distance # If a node is processed with a distance greater than the current known distance, skip it if current_distance > distances[current_node]: continue # Visit all neighboring nodes for neighbor in range(n): weight = adjacency_matrix[current_node][neighbor] if weight > 0: distance = current_distance + weight # Only consider this new found path if it is shorter if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) # If the end node is unreachable, return -1 return -1 if distances[end] == float(\'inf\') else distances[end]"},{"question":"Alexa is exploring the architecture of her city. She has identified that the city can be represented as a network of n intersections and m streets connecting them. Some streets may be narrow and only allow one-way traffic, while others allow traffic in both directions. With the city council\'s data, Alexa knows which intersections have a direct street to which other intersections. To better understand the connectivity of the city, she wants to determine if it\'s possible to drive from one specific intersection to another without violating any traffic rules. Write a program to help Alexa determine if there is a path from a given starting intersection to a destination intersection, following the direction of the roads as specified. # Input - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of intersections and the number of streets. - The next m lines describe the streets. Each street is described by three integers u, v, and d (1 ≤ u, v ≤ n, 0 ≤ d ≤ 1). - If d = 0, the street is narrow and allows traffic only from u to v. - If d = 1, the street allows traffic in both directions between u and v. - The next line contains two integers s and t (1 ≤ s, t ≤ n) — the starting intersection and the destination intersection. # Output - Print \\"YES\\" if there is a path from intersection s to intersection t according to the traffic rules, and \\"NO\\" otherwise. # Example Input ``` 4 4 1 2 0 2 3 1 3 4 0 4 1 0 1 3 ``` Output ``` YES ```","solution":"def can_drive_from_to(n, m, streets, s, t): from collections import defaultdict, deque # Create adjacency list for the graph adjacency_list = defaultdict(list) for u, v, d in streets: adjacency_list[u].append(v) if d == 1: adjacency_list[v].append(u) # BFS to check connectivity from s to t queue = deque([s]) visited = set([s]) while queue: current = queue.popleft() if current == t: return \\"YES\\" for neighbor in adjacency_list[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return \\"NO\\""},{"question":"Valeria is playing a game on a grid with n rows and m columns. The game\'s objective is to move from the top-left corner of the grid to the bottom-right corner. Each cell in the grid has a number that represents the difficulty of stepping on that cell. Valeria wants to move such that the total difficulty encountered (sum of difficulties of all visited cells including the starting and ending cells) is minimized. Valeria can only move to the right or downward at each step. Given the grid of difficulties, determine the minimum total difficulty Valeria will encounter on her way from the top-left to the bottom-right corner of the grid. The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid. Each of the next n lines contains m space-separated integers, representing the difficulty values of the cells in the grid. The difficulty values are non-negative integers no greater than 1000. Print a single integer, the minimum total difficulty Valeria will encounter as she moves from the top-left to the bottom-right corner. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The minimum total difficulty path is 1 → 3 → 1 → 1 → 1, which sums to 7.","solution":"def minTotalDifficulty(grid): Determine the minimum total difficulty Valeria will encounter on her way from the top-left to the bottom-right corner of the grid. :param grid: List[List[int]], n x m grid of difficulties :return: int, minimum total difficulty encountered n = len(grid) m = len(grid[0]) # Initialize DP table with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Fill DP table for i in range(n): for j in range(m): if i == 0 and j == 0: dp[i][j] = grid[i][j] elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[-1][-1] # Example usage: # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(minTotalDifficulty(grid)) # Output: 7"},{"question":"You are given an array of n integers. You have to handle q queries of the following types: 1. Update the value of a specified element in the array. 2. Calculate the product of elements in a specified range of the array. For the update query, you will be given an index and a new value, and you need to update the array at that index with the new value. For the product query, you need to compute the product of all elements in the given range. Since the product might be very large, return the result modulo 1,000,000,007. The first line contains two integers n and q (1 ≤ n, q ≤ 2·10^5) — the number of elements in the array and the number of queries respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Then q lines follow, each representing a query. If the query is of the form `1 x y`, it means you should update the value at index x to y. If the query is of the form `2 l r`, you should compute the product of the elements in the range [l, r] inclusive. For each product query, print the result modulo 1,000,000,007. Example: Input: ``` 5 3 2 3 4 5 6 2 1 3 1 2 10 2 1 3 ``` Output: ``` 24 80 ```","solution":"MOD = 1_000_000_007 def update(index, value, arr, product): n = len(arr) old_value = arr[index] arr[index] = value # Efficiently update the product product = (product * pow(old_value, MOD-2, MOD) % MOD) * value % MOD return product def range_product(l, r, arr): result = 1 for i in range(l-1, r): result = (result * arr[i]) % MOD return result def process_queries(n, q, arr, queries): results = [] current_product = 1 for num in arr: current_product = (current_product * num) % MOD for query in queries: parts = query.split() if parts[0] == \'1\': index = int(parts[1]) - 1 value = int(parts[2]) current_product = update(index, value, arr, current_product) elif parts[0] == \'2\': l = int(parts[1]) r = int(parts[2]) results.append(range_product(l, r, arr)) return results"},{"question":"You are responsible for organizing a local marathon and need to calculate the total time each runner takes to complete the race. You have a list of runners with their unique IDs and the recorded times for each segment of the marathon. Each runner has completed the same number of segments, but the number of segments can vary across different marathons. Your task is to sum the segment times for each runner and determine the total time they took to finish the marathon. The first line of input contains two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100) – the number of runners and the number of segments, respectively. Each of the next n lines contains the runner\'s ID (a string with up to 10 characters) and m integers, representing the times (in minutes) for each segment. Print the runner ID and total time for each runner in the order they appear in the input. Each runner\'s total time should be printed on a new line in the format \\"ID total_time\\". Example: Input: 3 4 runner1 12 15 14 13 runner2 10 20 15 17 runner3 11 13 16 12 Output: runner1 54 runner2 62 runner3 52","solution":"def calculate_total_times(n, m, runners_data): Calculate the total time for each runner. Parameters: n (int): Number of runners m (int): Number of segments runners_data (list): List of runners where each element is a list containing: - the runner\'s ID (str) - m integers representing the times for each segment Returns: list: List of tuples where each tuple contains the runner\'s ID and their total time. Example: [(\\"runner1\\", 54), (\\"runner2\\", 62), (\\"runner3\\", 52)] total_times = [] for runner in runners_data: runner_id = runner[0] times = map(int, runner[1:]) total_time = sum(times) total_times.append((runner_id, total_time)) return total_times"},{"question":"You are a spy for the intergalactic federation, and you just retrieved critical information from the enemy’s base. The data is stored in an encoded string, and to decode it, you must follow the enemy\'s encryption rules perfectly. The encryption rules are: 1. The string consists of only lowercase English letters and digits. 2. The digits (0-9) indicate how many times the subsequent character (which will always be a lowercase English letter) appears. For example, the string \\"3a2b4c\\" should be decoded as \\"aaabbcccc\\". 3. If a letter appears directly after another letter without a preceding digit, it should be treated as if that letter appears just once. For example, \\"abc\\" should be decoded as \\"abc\\". Given an encoded string `s`, your task is to decode it according to the rules described above. # Input: - A single string `s` (1 ≤ |s| ≤ 100), containing only digits (0-9) and lowercase English letters. # Output: - A single string representing the decoded message. # Examples: **Example 1:** ``` Input: 3a2b4c Output: aaabbcccc ``` **Example 2:** ``` Input: a3b2c Output: abbbcc ``` **Example 3:** ``` Input: 2a2b2c2d Output: aabbccdd ``` # Notes: - Each digit in the string will always be followed by at least one lowercase English letter, and no digit will follow a letter without intervening another letter or number. - You can assume that the string is well-formed according to the rules provided and no error handling for invalid inputs is needed.","solution":"def decode_string(s): decoded_str = \\"\\" i = 0 while i < len(s): if s[i].isdigit(): count = int(s[i]) decoded_str += s[i + 1] * count i += 2 else: decoded_str += s[i] i += 1 return decoded_str"},{"question":"You are given a list of integers where each number appears exactly twice except for two unique numbers that appear only once. Write a function that finds these two unique numbers and returns them in ascending order. Your solution must have linear time complexity (O(n)) and use constant space (O(1)). # Input Format The input starts with an integer n (2 ≤ n ≤ 10^5), the total number of integers in the list. The following line contains n integers where exactly two integers occur once and all other integers occur exactly twice. The integers in the list are between 1 and 10^6 inclusive. # Output Format Output the two unique numbers in ascending order. # Example Input ``` 6 4 1 2 1 2 3 ``` Output ``` 3 4 ``` # Explanation In the given example, the numbers 4 and 3 appear only once, while the numbers 1 and 2 appear twice. Hence, the output is `3 4`. Input ``` 8 5 3 6 3 5 7 8 8 ``` Output ``` 6 7 ``` # Note * Consider optimal use of bitwise operations for achieving the desired time and space complexity constraints.","solution":"def find_two_unique_numbers(nums): Finds the two unique numbers in the list where all other numbers appear exactly twice. Returns the two unique numbers in ascending order. # XOR of all the numbers xor_result = 0 for num in nums: xor_result ^= num # Get the rightmost set bit in xor_result rightmost_set_bit = xor_result & -xor_result # Initialize the two unique numbers unique1, unique2 = 0, 0 # Divide all numbers into two groups based on the rightmost set bit for num in nums: if num & rightmost_set_bit: unique1 ^= num else: unique2 ^= num # Return the two unique numbers in ascending order return sorted([unique1, unique2])"},{"question":"Frank needs to deliver packages to different locations in his city using his delivery van. The city is represented as a grid of size ( N times N ), with Frank starting at the top-left corner of the grid (position (0,0)). Frank wants to minimize the total distance traveled while ensuring that each package is delivered to its respective location. To do this, Frank can move up, down, left, or right but cannot move diagonally. Each move from one cell to an adjacent cell has a distance of 1. Given the coordinates of the packages\' delivery locations, help Frank compute the minimum total distance required to deliver all the packages and return to the starting point. The input consists of: - An integer ( N ) - the size of the grid (2 ≤ N ≤ 20). - An integer ( M ) - the number of packages to deliver (1 ≤ M ≤ 10). - ( M ) pairs of integers ( (x_i, y_i) ) - the coordinates of the packages\' delivery locations (0 ≤ ( x_i ), ( y_i ) < ( N )). The output should be a single integer - the minimum total distance traveled by Frank to deliver all the packages and return to the starting point. **Example Input:** ``` 4 3 1 2 2 2 3 3 ``` **Example Output:** ``` 12 ``` **Explanation:** Frank starts at (0,0). An optimal route might be: (0,0) -> (1,2) -> (2,2) -> (3,3) -> (0,0). Each move\'s distance computation: - (0,0) to (1,2): |0-1| + |0-2| = 3 - (1,2) to (2,2): |1-2| + |2-2| = 1 - (2,2) to (3,3): |2-3| + |2-3| = 2 - (3,3) to (0,0): |3-0| + |3-0| = 6 Total distance = 3 + 1 + 2 + 6 = 12 Frank\'s total distance traveled is 12.","solution":"import itertools def calculate_distance(p1, p2): Calculates Manhattan distance between two points p1 and p2. return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) def minimum_total_distance(N, M, package_coords): Computes the minimum total distance to deliver all packages and return to the start. Args: N : int : size of the grid (N x N) M : int : number of packages package_coords : list of tuples : coordinates of package locations Returns: int : minimum total distance # All possible paths to visit all packages and back to the start starting_point = (0, 0) min_distance = float(\'inf\') # Generate all permutations of the packages for perm in itertools.permutations(package_coords): # Start at the beginning distance = 0 current_point = starting_point # Deliver all packages according to the current permutation for point in perm: distance += calculate_distance(current_point, point) current_point = point # Return to the starting point distance += calculate_distance(current_point, starting_point) # Update minimum distance min_distance = min(min_distance, distance) return min_distance"},{"question":"In a certain country, there is a new subway system. The subway map can be thought of as a tree with n stations, where each station is represented as a node, and each corridor between stations (bidirectional) is represented as an edge. Stations are numbered from 1 to n. A person wants to travel from station a to station b. Your task is to find the distance between these two stations, which is defined as the number of edges in the shortest path connecting them. You have to answer q independent queries. The first line of the input contains two integers n and q (1 le n, q le 10^5) — the number of stations and number of queries, respectively. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) representing an edge between station u and station v. Each of the next q lines contains two integers a and b (1 le a, b le n) — the stations for which the distance is queried. For each query, print the distance between stations a and b. # Example Input ``` 6 3 1 2 2 3 2 4 4 5 4 6 1 4 5 3 2 6 ``` # Example Output ``` 2 3 2 ``` In this example, the subway system is structured as a tree: ``` 1 | 2 / 3 4 / 5 6 ``` - The distance between stations 1 and 4 is 2 edges (1-2-4). - The distance between stations 5 and 3 is 3 edges (5-4-2-3). - The distance between stations 2 and 6 is 2 edges (2-4-6).","solution":"from collections import deque def build_tree(n, edges): tree = [[] for _ in range(n + 1)] for u, v in edges: tree[u].append(v) tree[v].append(u) return tree def bfs(tree, start): n = len(tree) dist = [-1] * n dist[start] = 0 queue = deque([start]) while queue: u = queue.popleft() for v in tree[u]: if dist[v] == -1: dist[v] = dist[u] + 1 queue.append(v) return dist def subway_distances(n, edges, queries): tree = build_tree(n, edges) distances_from_1 = bfs(tree, 1) results = [] for a, b in queries: distances_from_a = bfs(tree, a) results.append(distances_from_a[b]) return results"},{"question":"Given an undirected graph with `n` nodes labeled from `1` to `n`, and `m` bidirectional edges, your task is to determine the maximum size of an independent set in the graph. An independent set is a subset of vertices in a graph, no two of which are adjacent. The graph may contain self-loops and multiple edges between the same pair of nodes. Input: - The first line contains two integers `n` and `m` (`1 <= n <= 20`, `0 <= m <= 190`). - The following `m` lines each contain two integers `u` and `v` (`1 <= u, v <= n`) describing an edge between nodes `u` and `v`. Output: Print a single integer — the maximum size of an independent set in the graph. Example: ``` Input: 5 6 1 2 1 3 2 3 3 4 4 5 2 5 Output: 2 ``` Explanation: An independent set of size 2 can be {1, 4}, {1, 5}, or even {4, 2}. No set of size greater than 2 can be formed since all nodes are connected either directly or indirectly.","solution":"def is_independent(graph, subset): Checks if subset of vertices is an independent set in the given graph. for i in range(len(subset)): for j in range(i + 1, len(subset)): if subset[j] in graph[subset[i]]: return False return True def maximum_independent_set(n, edges): Find the maximum size of an independent set in the graph. from itertools import combinations graph = {i: set() for i in range(1, n+1)} for u, v in edges: if u != v: graph[u].add(v) graph[v].add(u) max_size = 0 for size in range(1, n+1): for subset in combinations(range(1, n+1), size): if is_independent(graph, subset): max_size = max(max_size, size) return max_size # Function to parse input and output format def find_max_independent_set(input_data): input_lines = input_data.strip().split(\'n\') n, m = map(int, input_lines[0].strip().split()) edges = [tuple(map(int, line.strip().split())) for line in input_lines[1:]] return maximum_independent_set(n, edges)"},{"question":"Given a list of integers, find the maximum difference between any two elements such that the larger element appears after the smaller element in the list. # Input - The input contains a single line with n space-separated integers (1 ≤ n ≤ 100, -10^6 ≤ integers ≤ 10^6). # Output - Print a single integer representing the maximum difference. # Example Input 7 1 5 3 6 4 Output 5 Explanation The largest difference is 5, which results from the elements 1 (at index 1) and 6 (at index 4).","solution":"def max_difference(arr): Returns the maximum difference between any two elements in arr such that the larger element appears after the smaller element. if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) else: min_element = arr[i] return max_diff"},{"question":"You are given an array of integers representing the duration of different tasks. Due to a resource constraint, you need to select tasks that do not exceed a given total duration. Write a function `max_non_overlapping_tasks(tasks, max_duration)` that returns the maximum number of non-overlapping tasks you can select such that their combined duration does not exceed `max_duration`. # Input: - An array `tasks` of length `n` where each element represents the duration of a task. (1 le n le 100,000; 1 le tasks[i] le 10^9) - An integer `max_duration` representing the maximum total duration allowed for the selected tasks. (1 le max_duration le 10^9) # Output: - An integer representing the maximum number of non-overlapping tasks that can be selected without exceeding the given `max_duration`. # Example: Input: ```plaintext tasks = [4, 3, 2, 1] max_duration = 5 ``` Output: ```plaintext 2 ``` # Explanation: In this example, selecting tasks with durations of 3 and 2 would exceed the limit. Selecting tasks with durations 4 and 1, or 3 and 1 would also exceed the limit. Thus, the best option is to select the tasks with durations 2 and 1, yielding the maximum number of 2 tasks within the allowed duration.","solution":"def max_non_overlapping_tasks(tasks, max_duration): Returns the maximum number of non-overlapping tasks that can be selected such that their total duration does not exceed max_duration. # Sort the tasks by duration tasks.sort() # Initialize the count of selected tasks and the cumulative duration count = 0 current_duration = 0 # Iterate through the sorted tasks for task in tasks: if current_duration + task <= max_duration: count += 1 current_duration += task else: break return count"},{"question":"You are given a chocolate bar that consists of a grid of n x m squares. Each of these squares can contain a piece of white chocolate (represented by \'W\'), a piece of dark chocolate (represented by \'D\'), or an empty space (represented by \'.\'). You want to find out the largest contiguous sub-grid that contains only pieces of dark chocolate. Write a function to determine the area of this largest sub-grid. Input - The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the chocolate bar grid. - The next n lines each contain m characters (\'W\', \'D\', or \'.\') — the chocolate bar grid representation. Output - Print a single integer — the area of the largest contiguous sub-grid of dark chocolate. Example Input: 3 4 WD.W DD.D WD.D Output: 4 Explanation In the given example, the largest contiguous sub-grid of dark chocolate is a 2x2 grid made up entirely of \'D\' characters in the center of the grid. Note: A sub-grid of dark chocolate is contiguous if you can move from one piece of dark chocolate to any other piece of dark chocolate in the sub-grid via adjacent cells (vertically or horizontally without crossing \'W\' or \'.\' cells).","solution":"def largest_dark_chocolate_area(n, m, grid): def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] != \'D\': return 0 grid[x][y] = \'.\' # Mark as visited return 1 + dfs(x + 1, y) + dfs(x - 1, y) + dfs(x, y + 1) + dfs(x, y - 1) max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == \'D\': max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"You are given an array of integers `nums` of length `n` and an integer `k`. The array is initially sorted in non-decreasing order. Your task is to rotate the array `k` times to the right and then find the index of a given target value `x` in the rotated array. If the value `x` does not exist in the array, return -1. For example, if the original array is `[1, 2, 3, 4, 5]` and `k = 2`, it will become `[4, 5, 1, 2, 3]` after 2 rotations. If the target value `x` is 1, the output should be 2 because the value 1 is at index 2 in the rotated array. # Input - The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (0 ≤ k ≤ 10^5), the number of elements in the array and the number of times to rotate the array. - The second line contains `n` integers `nums[i]` (1 ≤ nums[i] ≤ 10^9), the elements of the array. - The third line contains the integer `x` (1 ≤ x ≤ 10^9), the target value to search for. # Output - Print the index of the target value `x` in the rotated array. If the value `x` is not found, print -1. # Example Input ``` 5 2 1 2 3 4 5 1 ``` Output ``` 2 ``` # Notes - The array is initially given in a sorted form. - You need to handle the array rotation efficiently. - Take care of large inputs and ensure your solution is optimized for performance.","solution":"def find_index_in_rotated_array(nums, k, x): Finds the index of the target value `x` in the array `nums` rotated `k` times to the right. If the value `x` does not exist in the array, returns -1. n = len(nums) # Adjust rotation count if greater than array length k = k % n # Perform the rotation rotated = nums[-k:] + nums[:-k] # Find and return the index of x in the rotated array try: return rotated.index(x) except ValueError: return -1"},{"question":"You are given a rectangular grid of characters that simulates a portion of an alien\'s genetic code. Each character in the grid is one of \'A\', \'T\', \'C\', or \'G\'. The grid size is n x m, where 1 ≤ n, m ≤ 100. The alien race has a unique pattern in their genes which indicates a special segment. The special segment is identified if a 2x2 subgrid contains the same character in all its four positions. You need to write a program that determines whether the given grid contains at least one such special segment. If it does, print \\"Special Segment Found\\". Otherwise, print \\"No Special Segment\\". The first line of the input contains two integers n and m, the number of rows and columns of the grid. The following n lines contain m space-separated characters (\'A\', \'T\', \'C\', \'G\') representing the genetic code in the grid. Here\'s an example input and its corresponding output: Input: 4 5 A T G C A T T T C G C G A A T G C C G A Output: No Special Segment In the given example, there is no 2x2 subgrid where all characters are the same.","solution":"def find_special_segment(n, m, grid): for i in range(n - 1): for j in range(m - 1): if grid[i][j] == grid[i][j + 1] == grid[i + 1][j] == grid[i + 1][j + 1]: return \\"Special Segment Found\\" return \\"No Special Segment\\" # Example input and call n, m = 4, 5 grid = [ [\'A\', \'T\', \'G\', \'C\', \'A\'], [\'T\', \'T\', \'T\', \'C\', \'G\'], [\'C\', \'G\', \'A\', \'A\', \'T\'], [\'G\', \'C\', \'C\', \'G\', \'A\'] ] print(find_special_segment(n, m, grid))"},{"question":"You are given a grid with `n` rows and `m` columns, representing a city map. Each cell in the grid can be one of the following types: - `\'.\'` (period) meaning an empty road - `\'#\'` (hash) meaning an obstacle that cannot be passed - `\'S\'` representing the starting point - `\'X\'` representing the destination point You need to determine whether there is a path from the starting point (`\'S\'`) to the destination point (`\'X\'`). The robot can move vertically or horizontally to any adjacent empty road cell (\'.\') but cannot pass through obstacles (\'#\'). The input contains: - The first line with integers `n` and `m` (1 ≤ n, m ≤ 1000): the dimensions of the grid. - The following `n` lines each containing a string of length `m` consisting of `\'.\'`, `\'#\'`, `\'S\'`, and `\'X\'`. There is exactly one `\'S\'` and one `\'X\'` in the grid. Output `YES` if there is a path from `\'S\'` to `\'X\'` and `NO` otherwise. Input: ``` 4 4 S.#. .#.. ...# .#X. ``` Output: ``` YES ``` In this example, the path from `\'S\'` to `\'X\'` is \\"right, down, down, left, down\\". If there were no valid path due to obstacles blocking the entire route, the output should be `NO`.","solution":"def can_reach_destination(n, m, grid): Returns \'YES\' if there is a path from \'S\' to \'X\' in the grid, \'NO\' otherwise. from collections import deque # Find the starting point \'S\' and destination \'X\' start = None end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'X\': end = (i, j) if start and end: break if start and end: break if not start or not end: return \\"NO\\" # Directions for moving in the grid (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS algorithm to find path from \'S\' to \'X\' queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given a list of n integers which represent the heights of different skyscrapers in a city. The Mayor has decided that a new policy should be implemented: each day, the tallest skyscraper will give away exactly 1 unit of height to the shortest skyscraper (shortest skyscraper right after taking tallest\'s 1 unit). This process continues for d days. If two or more skyscrapers share the same height, one among them will be chosen at random for giving or receiving the height unit. After d days have passed, the Mayor wants to know the difference between the height of the tallest and the shortest skyscraper. The first line of the input contains two integers n and d (1 ≤ n ≤ 500,000, 0 ≤ d ≤ 1,000,000,000) — the number of skyscrapers and the number of days the process continues. The second line contains n integers, the i-th of which is hi (1 ≤ hi ≤ 1,000,000,000) — the initial heights of the skyscrapers. Print a single integer representing the difference between the tallest and shortest skyscrapers\' heights after d days. Consider the following example to understand the process: Input: 5 4 4 3 7 2 6 Output: 4 Explanation: Initially, the heights are [4, 3, 7, 2, 6]. - On the first day, the tallest skyscraper (height 7) gives 1 unit of height to the shortest skyscraper (height 2), resulting in [4, 3, 6, 3, 6]. - On the second day, one of the tallest skyscrapers (height 6) gives 1 unit of height to the shortest (height 3), resulting in [4, 4, 6, 3, 5]. - On the third day, one of the tallest skyscrapers (height 6) gives 1 unit of height to the shortest (height 3), resulting in [4, 4, 5, 4, 5]. - On the fourth day, one of the tallest skyscrapers (height 5) gives 1 unit of height to the shortest (height 4), resulting in [4, 5, 5, 4, 4]. After 4 days, the tallest skyscraper has a height of 5 and the shortest has a height of 4, making the difference 5 - 4 = 1.","solution":"def skyscraper_height_difference(n, d, heights): Determines the difference between the height of the tallest and the shortest skyscraper after d days. Args: n: The number of skyscrapers. d: The number of days. heights: A list of integers representing initial heights of the skyscrapers. Returns: The difference between the tallest and the shortest skyscraper height after d days. heights.sort() for _ in range(d): # move 1 unit from the tallest in the smallest heights[0] += 1 heights[-1] -= 1 heights.sort() if heights[-1] - heights[0] <= 1: # If the tallest and shortest are very close, we break early break return heights[-1] - heights[0]"},{"question":"You just got a job as a software engineer at a new tech startup! One of your first tasks is to optimize the company\'s shipment and distribution of products. The company uses cargo containers to ship products, and each container can hold up to a maximum weight before it becomes overloaded. However, to make shipping more efficient, you have to maximize the usage of each container without overloading it. Given a list of product weights and the maximum weight capacity of a container, you need to determine the minimum number of containers required to ship all the products. A container can hold multiple products as long as their combined weight does not exceed the maximum weight capacity. Write a program that calculates the minimum number of containers required. The input consists of multiple test cases. The first line of input contains an integer t (1 ≤ t ≤ 100) - the number of test cases. Each test case consists of two lines: - The first line contains an integer C (1 ≤ C ≤ 10^5) - the maximum weight capacity of a container. - The second line contains integers separated by spaces representing the weights of the products (1 ≤ weight ≤ 10^4). Each test case contains at least one product and at most 1000 products. For each test case, you should output the minimum number of containers needed to ship all the products. # Example **Input:** ``` 2 10 2 5 4 7 1 15 3 8 5 10 4 6 ``` **Output:** ``` 2 3 ``` # Explanation **Test Case 1:** A possible way to distribute the products is: - Container 1 holds [2, 5], total weight = 7 (<= 10) - Container 2 holds [4, 7, 1], total weight = 12 which exceeds 10, so alternatively [4, 7], total weight = 11 also exceeds 10. Thus [7, 1], total weight = 8 which at least we need 1 container. Hence, minimum containers required = 2. **Test Case 2:** A possible way to distribute the products is: - Container 1 holds [3, 8], total weight = 11 (<= 15) - Container 2 holds [5, 10], total weight = 15 (<= 15) - Container 3 holds [4, 6], total weight = 10 (<= 15) Thus, minimum containers required = 3.","solution":"def min_containers(t, test_cases): Returns the minimum number of containers required for each test case. results = [] for C, products in test_cases: products.sort(reverse=True) containers = 0 while products: current_weight = 0 i = 0 while i < len(products): if current_weight + products[i] <= C: current_weight += products.pop(i) else: i += 1 containers += 1 results.append(containers) return results"},{"question":"You are given a string composed of the characters \'L\', \'R\', and \'?\'. Alex wants to replace each \'?\' with either \'L\' or \'R\' such that the resulting string becomes balanced. A string is considered balanced if, for every prefix of the string, the number of \'L\' characters is greater than or equal to the number of \'R\' characters minus 1. Help Alex find the minimum number of replacements needed to make the string balanced. For example, if the input string is \'L??R\', Alex can replace the \'?\' characters to form \'LLRR\' which is balanced. In this case, the minimum number of replacements is 2. The first line contains a single integer n (1 leq n leq 10^5) — the length of the string. The second line contains a string of length n consisting of characters \'L\', \'R\', and \'?\'. Print a single integer — the minimum number of replacements needed to make the string balanced. For instance: In the first sample, the input string is \'LR??\'. One of the ways to make it balanced is \'LRLR\', so the minimum number of replacements is 2. In the second sample, the input string is \'????\'. One of the ways to make it balanced is \'LLRR\', so the minimum number of replacements is 2.","solution":"def minimum_replacements_to_balance(n, s): Function to find the minimum number of replacements needed to balance the string. Args: n: int - length of the string s: str - string composed of \'L\', \'R\', and \'?\' Returns: int - minimum number of replacements needed balance = 0 # This will track the balance between \'L\' and \'R\' replacements = 0 for char in s: if char == \'L\': balance += 1 elif char == \'R\': balance -= 1 else: # Character is \'?\' # Check current balance and determine replacement if balance <= 0: s = s.replace(\'?\', \'L\', 1) balance += 1 else: s = s.replace(\'?\', \'R\', 1) balance -= 1 replacements += 1 return replacements"},{"question":"The city of Riverland is undergoing a renovation restructuring its road network. The city comprises n intersections and m bidirectional roads connecting pairs of intersections, where each road has a certain length. To redesign the road network, the city officials have decided the following: 1. There needs to be exactly one main route connecting the city\'s mayor\'s office located at intersection 1 to the stadium located at intersection n. 2. The main route should be the shortest path in terms of road length. 3. The remaining intersections and roads should be organized such that as many intersections as possible can still be used, but ensuring that there are no cycles (i.e., forming a tree structure). You are tasked with designing the new road layout to meet the criteria above. First, determine the shortest path from intersection 1 to intersection n. Then, use the remaining intersections and roads to create a tree that maximizes the number of intersections included, ensuring no cycles. Write a program to determine which roads will be part of the new network. # Input: - The first line contains two integers, n and m (2 le n le 10^4, 1 le m le 10^5) — the number of intersections and roads, respectively. - The next m lines each contains three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) — denoting there is a road connecting intersections u and v with length w. # Output: - First, output the number of roads in the new road network. - Then, output the list of roads that will be part of the new network, each road denoted by its original endpoints. If there are multiple valid solutions, any will be accepted. # Example: Input: ``` 5 6 1 2 1 1 3 2 2 3 3 2 4 5 3 5 4 4 5 1 ``` Output: ``` 4 1 2 1 3 4 5 3 5 ``` In this example, the shortest path from intersection 1 to intersection 5 is [1, 3, 5] with a total length of 6. The other roads form a tree structure such that all intersections are connected directly or indirectly while maximizing the usage of intersections.","solution":"import heapq def find_shortest_path(n, graph): dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[1] = 0 prev = {i: None for i in range(1, n + 1)} pq = [(0, 1)] # (cost, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance prev[v] = u heapq.heappush(pq, (distance, v)) path = [] node = n while node: parent = prev[node] if parent: path.append((parent, node)) node = parent return path[::-1] def create_maximum_tree(n, graph, main_route): connected = set() for u, v in main_route: connected.add(u) connected.add(v) edges = set((min(u, v), max(u, v)) for u, v in main_route) pq = [(weight, min(u, v), max(u, v)) for u in graph for v, weight in graph[u] if (min(u, v), max(u, v)) not in edges] heapq.heapify(pq) parent = {i: i for i in range(1, n + 1)} def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX result_edges = list(main_route) while pq and len(result_edges) < n - 1: weight, u, v = heapq.heappop(pq) if find(u) != find(v): union(u, v) result_edges.append((u, v)) connected.add(u) connected.add(v) return result_edges def redesign_road_network(n, m, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) main_route = find_shortest_path(n, graph) new_network = create_maximum_tree(n, graph, main_route) return new_network def format_solution(new_network): formatted_network = [(u, v) for u, v in new_network] return len(formatted_network), formatted_network"},{"question":"You are given an array of integers `arr` with length `n` (2 le n le 10^5). The array follows a special property: `arr` is either non-decreasing or non-increasing. Your task is to determine whether the array `arr` is non-decreasing, non-increasing, or neither. # Input: - The first line contains an integer `n`, the number of elements in the array `arr`. - The second line contains `n` integers `arr[1], arr[2], ..., arr[n]` (-10^9 le arr[i] le 10^9). # Output: Print `\\"non-decreasing\\"` if the array is sorted in non-decreasing order. Print `\\"non-increasing\\"` if the array is sorted in non-increasing order. Print `\\"neither\\"` if the array does not follow either of the properties. # Example: Input: ``` 5 1 2 2 3 4 ``` Output: ``` non-decreasing ``` Input: ``` 4 9 7 5 3 ``` Output: ``` non-increasing ``` Input: ``` 6 1 3 2 4 5 6 ``` Output: ``` neither ``` # Note: - A non-decreasing array is an array where each element is greater than or equal to the previous element. - A non-increasing array is an array where each element is less than or equal to the previous element.","solution":"def check_array_order(arr): Determines if the array is non-decreasing or non-increasing or neither. Returns \\"non-decreasing\\", \\"non-increasing\\" or \\"neither\\". n = len(arr) non_decreasing = all(arr[i] >= arr[i-1] for i in range(1, n)) if non_decreasing: return \\"non-decreasing\\" non_increasing = all(arr[i] <= arr[i-1] for i in range(1, n)) if non_increasing: return \\"non-increasing\\" return \\"neither\\""},{"question":"Kurama and Son Goku enjoy challenging each other with various puzzles. Today, they\'re playing a game that involves arithmetic and logical thinking. Consider the following problem: Given a sequence of N positive integers, Kurama and Son Goku take turns to make a move. On each move, a player must remove any single integer from the sequence. However, they can only remove an integer if and only if it is divisible by at least one remaining integer in the sequence. Kurama always goes first. The player who cannot make a move loses the game. Determine who will be the winner if both play optimally. # Input: - The first line of input contains an integer T (1 ≤ T ≤ 10), the number of test cases. - Each of the next T lines contains: - An integer N (1 ≤ N ≤ 1000) — the number of integers in the sequence. - Then, N space-separated integers a1, a2, ..., aN (1 ≤ ai ≤ 10^5) representing the sequence. # Output: - For each test case, print \\"Kurama\\" if Kurama will win given both play optimally, otherwise print \\"Son Goku\\". # Examples: Input: 2 4 3 6 9 12 3 7 11 14 Output: Kurama Son Goku # Explanation: In the first example, Kurama can start by removing 12, leaving 3, 6, and 9. Son Goku can then remove 9, leaving 3 and 6. Kurama can then remove 6, and Son Goku is left with 3, which he can remove. Kurama thus wins. In the second example, no integer in the sequence is divisible by any other integer in the same sequence, so Kurama cannot make a move at the start and loses immediately. Son Goku wins.","solution":"def determine_winner(T, test_cases): results = [] for case in test_cases: N, sequence = case sequence.sort() if sequence[0] == 1: results.append(\\"Son Goku\\") continue gcd_check = True for i in range(1, N): if sequence[i] % sequence[0] != 0: gcd_check = False break if gcd_check: results.append(\\"Kurama\\") else: results.append(\\"Son Goku\\") return results"},{"question":"You are given a park that consists of `n` flower beds arranged in a straight line, where each flower bed can either contain flowers or be empty. You want to plant new flowers in the empty beds such that no two adjacent flower beds will both have flowers. Determine if you can plant a given number of new flowers without violating this rule. The park is represented by an array of integers `flowerbed` of length `n`, where `flowerbed[i]` is `0` if the i-th bed is empty, and `1` if it contains flowers. You also have an integer `k`, which is the number of flowers you want to plant. Write a function `canPlaceFlowers(flowerbed: List[int], k: int) -> bool` that returns a boolean value. Return `True` if you can plant `k` new flowers without any two adjacent flower beds containing flowers, and `False` otherwise. **Input:** - An integer `n` (1 ≤ n ≤ 2000) — the number of flower beds. - An array `flowerbed` of length `n`, where each element is either `0` or `1`. - An integer `k` (0 ≤ k ≤ 2000) — the number of flowers to plant. **Output:** - A boolean value indicating whether it is possible to plant `k` new flowers without any two adjacent flower beds both containing flowers. **Example:** ```python canPlaceFlowers([1, 0, 0, 0, 1], 1) # Output: True canPlaceFlowers([1, 0, 0, 0, 1], 2) # Output: False ``` **Explanation:** In the first example, you can plant 1 flower at index 2 (0-based). This satisfies the rule that no two adjacent flower beds both have flowers. In the second example, it is not possible to plant 2 flowers without breaking this rule.","solution":"from typing import List def canPlaceFlowers(flowerbed: List[int], k: int) -> bool: Determines if it\'s possible to plant k new flowers in the flowerbed without having two adjacent flowers. n = len(flowerbed) count = 0 # To count how many flowers we can plant for i in range(n): if flowerbed[i] == 0: # Check if the previous and next positions are empty or out of bounds prev_empty = (i == 0) or (flowerbed[i - 1] == 0) next_empty = (i == n - 1) or (flowerbed[i + 1] == 0) if prev_empty and next_empty: flowerbed[i] = 1 # Plant a flower here count += 1 if count >= k: return True return count >= k"},{"question":"Tom has recently developed an interest in numerical patterns. He is particularly fascinated by \\"Triangle Numbers.\\" A triangle number or triangular number is the sum of the natural numbers up to a certain number. For example, the triangle number of 4 is (1 + 2 + 3 + 4 = 10). More formally, the nth triangle number can be expressed as: [ T(n) = frac{n times (n + 1)}{2} ] Here are some examples: - The 1st triangle number is 1. - The 2nd triangle number is 3. - The 3rd triangle number is 6. - The 4th triangle number is 10, and so on. Tom wants a program that can determine if a given number is a triangle number. Write a function `is_triangle_number` that takes an integer `x` and returns \\"YES\\" if `x` is a triangle number, and \\"NO\\" otherwise. # Input The input consists of a single integer `x` (1 leq x leq 10^9). # Output Print \\"YES\\" if `x` is a triangle number, otherwise print \\"NO\\". # Example ```python Input: 10 Output: YES ``` ```python Input: 7 Output: NO ``` # Hint To check if a number `x` is a triangle number, you can solve for `n` in the quadratic equation derived from the formula for triangle numbers: [ n^2 + n - 2x = 0 ] [ n = frac{-1 pm sqrt(1 + 8x)}{2} ] If `n` is a positive integer, then `x` is a triangle number.","solution":"import math def is_triangle_number(x): Determines if x is a triangle number. Args: x (int): The number to check. Returns: str: \\"YES\\" if x is a triangle number, otherwise \\"NO\\". # Calculate the discriminant discriminant = 1 + 8 * x sqrt_discriminant = math.isqrt(discriminant) # integer square root # Check if the discriminant is a perfect square if sqrt_discriminant * sqrt_discriminant == discriminant: n = (-1 + sqrt_discriminant) / 2 # solving for n if n.is_integer(): # check if n is a whole number return \\"YES\\" return \\"NO\\""},{"question":"You are given two rectangular halls with lengths x1, y1 and x2, y2 respectively, and an infinite number of identical square tables with side length s. Two players play the following game: they take turns placing the tables in either of the halls so that the tables do not overlap (but can touch each other or the walls), and any point on a table must be within the borders of either hall. Once placed, tables cannot be moved. The player who cannot place a table on their turn loses. Determine which player wins, the one who moves first or the one who moves second, provided that both players play optimally well. A single line contains five space-separated integers x1, y1, x2, y2, s (1 ≤ x1, y1, x2, y2, s ≤ 100) — the dimensions of both halls and the side length of the tables, respectively. If the player who moves first wins, print \\"First\\" (without the quotes). Otherwise, print \\"Second\\" (without the quotes). In the first sample, the first hall has space for several tables but the second hall has no space for even one table. Thus, the game can only be played in the first hall and the player who cannot place another table loses. In the second sample, neither hall can accommodate even one table. Thus, the first player loses without making a single move.","solution":"def determine_winner(x1, y1, x2, y2, s): Determines which player wins the game with the provided dimensions. Parameters: x1, y1 (int): Dimensions of the first hall. x2, y2 (int): Dimensions of the second hall. s (int): Side length of the square table. Returns: str: \\"First\\" if the player who moves first wins, \\"Second\\" otherwise. # Calculate the number of tables fitting in each hall tables_in_hall1 = (x1 // s) * (y1 // s) tables_in_hall2 = (x2 // s) * (y2 // s) # Determine the winner based on the total number of tables if tables_in_hall1 > 0 or tables_in_hall2 > 0: return \\"First\\" else: return \\"Second\\""},{"question":"You are given two integers m and n (1 <= m, n <= 10^7) and two strings x and y respectively. The string x can be represented as [x, m], where [x, m] denotes the string x repeated m times. Similarly, the string y can be represented as [y, n], where [y, n] denotes the string y repeated n times. The task is to find the smallest integer k (k > 0), such that substrings [x * i] and [y * j] of length k (where i and j can range from 1 to the length of their respective strings) exist and are equal. The first line contains two integers m and n (1 <= m, n <= 10^7). The second line contains string x. The third line contains string y. The given strings are not empty and consist of lowercase English letters. Their lengths do not exceed 100. In a single line print an integer — the smallest integer k fulfilling the condition. If no such integer exists, print -1.","solution":"def smallest_common_substring_length(m, n, x, y): from math import gcd x_repeat = x * m y_repeat = y * n length_gcd = gcd(len(x_repeat), len(y_repeat)) if x_repeat[:length_gcd] == y_repeat[:length_gcd]: return length_gcd else: return -1"},{"question":"You are given an array of integers and a target integer. Your task is to find two distinct indices in the array such that the absolute difference between the integers at those indices is equal to the target integer. If there are multiple pairs that satisfy this condition, you only need to find one such pair. The first line of the input contains two integers n and t (1 le n le 10^5, 1 le t le 10^9) — the number of elements in the array and the target integer, respectively. The second line contains n integers a_1, a_2, a_3, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Output the indices of the two integers in the array that satisfy the condition, or output -1 if no such pair exists. If there are multiple correct answers, you may output any of them. Remember that the indices are 1-based in the output. # Example Input 7 5 1 7 5 9 12 3 6 Output 2 5 Explanation The integers at indices 2 and 5 (7 and 12) have an absolute difference of 5. Another pair could be (3, 6) or (5, 7). Any one of these pairs is a correct answer. # Note 1. Ensure the solution tests for possible pairs efficiently given the constraints, considering both time and space complexity. 2. Do not assume the array to be sorted or contain unique elements. The solution should handle any valid input as per the given constraints.","solution":"def find_indices_with_difference(nums, target): Returns two distinct indices in the array such that the absolute difference between the integers at those indices is equal to the target integer. indices_map = {} for i, num in enumerate(nums): if num + target in indices_map: return indices_map[num + target] + 1, i + 1 if num - target in indices_map: return indices_map[num - target] + 1, i + 1 indices_map[num] = i return -1"},{"question":"You are given an array of integers and a target number. Your task is to determine whether there are two distinct elements in the array whose sum is exactly equal to the target number. If there are, return indices of the two numbers such that they add up to the target. If there are multiple solutions, return any one of them. If no such pair exists, return an empty list. Input: - The first line contains an integer n (2 ≤ n ≤ 100,000), the number of elements in the array. - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9), the elements of the array. - The third line contains an integer target (-10^9 ≤ target ≤ 10^9). Output: - If there are two distinct elements in the array that sum up to the target, return their indices as a tuple (index1, index2) where index1 < index2. - If there are multiple correct answers, you can return any one of them. - If no such elements exist, return an empty list. Note: - Indices are 1-based. Sample Input 1: 5 2 7 11 15 9 Sample Output 1: (1, 2) Sample Input 2: 3 1 5 3 10 Sample Output 2: [] Explanation: In the first sample, the number at index 1 is 2 and the number at index 2 is 7. They add up to the target 9, so the output is (1, 2). In the second sample, there are no two distinct elements in the array that add up to the target 10, so the output is an empty list.","solution":"def two_sum(n, arr, target): Determines if there are two distinct elements in the array whose sum is equal to the target. Parameters: - n: int, number of elements in the array - arr: List[int], the array of integers - target: int, the target sum Returns: - List[int]: indices of the two numbers whose sum is exactly equal to the target, or an empty list if no such pair exists. The indices are 1-based. num_to_index = {} for i in range(n): complement = target - arr[i] if complement in num_to_index: return (num_to_index[complement] + 1, i + 1) num_to_index[arr[i]] = i return []"},{"question":"You are working on a software project that involves managing a list of participants in an event. Each participant has a unique identifier, name, and an associated score. Your task is to implement a feature that allows for efficient querying of participants\' information based on certain criteria. Write a program that supports the following operations on the list of participants: 1. **Add Participant**: Add a new participant to the list. Each participant is represented by three pieces of information: an integer ID, a string Name, and an integer Score. 2. **Update Score**: Update the score of an existing participant identified by their ID. 3. **Get Top Participants**: Retrieve the top K participants based on their scores. If multiple participants have the same score, they should be sorted by their IDs in ascending order. Input Format: - The first line contains an integer Q, the number of operations (1 leq Q leq 100,000). - Each of the following Q lines describes an operation in one of the following formats: - `1 ID Name Score`: Add a new participant with the given ID, Name, and Score. - `2 ID Score`: Update the score of the participant with the given ID to the new Score. - `3 K`: Retrieve the top K participants, sorted by Score in descending order and by ID in ascending order in case of ties. Output Format: - For each `3 K` operation, output K lines containing the ID and Name of the top K participants, sorted by the specified criteria. Example: ``` Input 8 1 1 Alice 50 1 2 Bob 60 3 2 1 3 Charlie 60 2 2 55 3 1 Update 2 70 3 2 Output 2 Bob 1 Alice 3 Charlie 2 Bob 3 Charlie 2 Bob ```","solution":"class Participant: def __init__(self, id, name, score): self.id = id self.name = name self.score = score class ParticipantManager: def __init__(self): self.participants = {} def add_participant(self, id, name, score): if id not in self.participants: self.participants[id] = Participant(id, name, score) def update_score(self, id, score): if id in self.participants: self.participants[id].score = score def get_top_participants(self, k): # Sorting participants first by score (descending) and then by ID (ascending) sorted_participants = sorted(self.participants.values(), key=lambda p: (-p.score, p.id)) result = [] for participant in sorted_participants[:k]: result.append((participant.id, participant.name)) return result"},{"question":"You are given a list of `n` integers. Your task is to find if there exists a non-empty subset of these integers such that the sum of the elements in this subset is zero. If such a subset exists, print `\\"YES\\"`; otherwise, print `\\"NO\\"`. For example, consider the array `[3, -1, 4, 12, -5, -1, 5, -7]`. The subset `[-1, -1, 5, -7, 4]` sums to `0`, so the answer is `\\"YES\\"`. **Input:** - The first line contains a single integer `n` (1 le n le 1000) — the number of elements in the list. - The second line contains `n` integers separated by space, representing the elements of the list. Each integer will be in the range of `[-10^4, 10^4]`. **Output:** - Print `\\"YES\\"` if there exists a non-empty subset with sum equal to `0`. Otherwise, print `\\"NO\\"`. **Example:** **Input:** ``` 8 3 -1 4 12 -5 -1 5 -7 ``` **Output:** ``` YES ``` **Input:** ``` 5 1 2 3 4 5 ``` **Output:** ``` NO ```","solution":"def has_zero_sum_subset(n, arr): Function to check if there exists a non-empty subset with sum equal to 0. :param n: Number of elements in the list :param arr: List of integers :return: \\"YES\\" if such a subset exists, otherwise \\"NO\\" from itertools import combinations if n == 0: return \\"NO\\" # Check all possible non-empty subsets for i in range(1, n + 1): for subset in combinations(arr, i): if sum(subset) == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are given a binary matrix of size n times m. The goal is to make all elements of the matrix equal using the minimum number of operations. In one operation, you can select a rectangular submatrix and flip all of its elements (change 0 to 1 and 1 to 0). Determine the minimum number of operations required to make all elements of the matrix the same, and output one possible sequence of operations. The first line contains two integers n and m (1 le n, m le 50) denoting the number of rows and columns of the matrix. Then follows n lines, each containing m characters \'0\' or \'1\', representing the matrix. Output the minimal number of operations required, followed by the list of operations. Each operation is described by four integers r1, c1, r2 and c2 (1 le r1 le r2 le n, 1 le c1 le c2 le m) indicating the top-left and bottom-right corners of the rectangular submatrix to flip. If the matrix is already in a uniform state in the beginning, the number of operations should be 0, and no further output is required. If there are multiple solutions, output any of them. # Example Input: ``` 3 3 010 001 100 ``` Output: ``` 2 1 1 3 2 1 3 3 3 ``` In this example, flipping the submatrices from (1, 1) to (3, 2) and from (1, 3) to (3, 3) makes all elements of the matrix equal to 1.","solution":"def flip_submatrix(matrix, r1, c1, r2, c2): for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): matrix[i][j] = \'1\' if matrix[i][j] == \'0\' else \'0\' def is_uniform(matrix): first_value = matrix[0][0] for row in matrix: for value in row: if value != first_value: return False return True def min_operations_to_uniform(matrix): n = len(matrix) m = len(matrix[0]) operations = [] if is_uniform(matrix): return 0, operations for i in range(n): for j in range(m): if matrix[i][j] == \'1\': r1, c1, r2, c2 = 0, 0, i, j flip_submatrix(matrix, r1, c1, r2, c2) operations.append((r1 + 1, c1 + 1, r2 + 1, c2 + 1)) return len(operations), operations # Reading input matrix def read_matrix_input(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].strip().split()) matrix = [list(line.strip()) for line in input_lines[1:]] return matrix # Example usage: input_str = 3 3 010 001 100 matrix = read_matrix_input(input_str) num_operations, operations = min_operations_to_uniform(matrix) print(num_operations) for op in operations: print(\' \'.join(map(str, op)))"},{"question":"Write a program that takes a string of parentheses as input and checks if the parentheses are balanced or not. A string of parentheses is balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs of parentheses are properly nested. # Input - A single line containing a string consisting of characters \'(\', \')\', \'[\', \']\', \'{\', \'}\'. # Output - Print \\"YES\\" if the string is balanced, otherwise print \\"NO\\". # Constraints - The length of the input string will not exceed ( 10^5 ) characters. # Examples Example 1 **Input:** ``` ()[]{}(()) ``` **Output:** ``` YES ``` Example 2 **Input:** ``` ([)] ``` **Output:** ``` NO ``` Example 3 **Input:** ``` [(){}] ``` **Output:** ``` YES ``` Example 4 **Input:** ``` ((({}[]))) ``` **Output:** ``` YES ``` Example 5 **Input:** ``` ({[)] ``` **Output:** ``` NO ``` # Note - Use a stack data structure to help determine if the sequence is balanced. - Each time an opening parenthesis is encountered, push it onto the stack. - Each time a closing parenthesis is encountered, check if it matches the top of the stack. If it does, pop the stack, otherwise the string is not balanced. - If after processing all characters, the stack is empty, the string is balanced. If not, it is not balanced.","solution":"def is_balanced_parentheses(s): Determines if the given string of parentheses is balanced. Args: s (str): The string containing the parentheses. Returns: str: \\"YES\\" if the string is balanced, otherwise \\"NO\\". stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_parentheses.values(): # Opening brackets stack.append(char) elif char in matching_parentheses.keys(): # Closing brackets if stack and stack[-1] == matching_parentheses[char]: stack.pop() else: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given an array (a) consisting of (n) positive integers. You need to process (q) queries of two kinds: 1. Update the element at a specific position in the array. 2. Find the sum of elements in a given subarray. Each query can be described as follows: - A query of the first type modifies the array: (1) (i) (x), where (i) is the position (1-based index) and (x) is the new value to be assigned to the element at position (i). - A query of the second type calculates the sum of elements between two given positions: (2) (l) (r), where (l) and (r) are the bounds of the subarray (inclusive, 1-based index). The first line of input contains two integers, (n) and (q) ((1 leq n, q leq 10^5)), representing the number of elements in the array and the number of queries, respectively. The second line contains (n) integers (a_1, a_2, ldots, a_n) ((1 leq a_i leq 10^9)) — the initial elements of the array. Each of the following (q) lines contains a query in one of the two formats mentioned above. For each query of the second type, output a single integer — the sum of elements in the specified subarray. # Input 8 5 1 2 3 4 5 6 7 8 2 1 4 1 5 10 2 3 6 1 8 15 2 4 8 # Output 10 26 41 # Explanation Initially, the array is ([1, 2, 3, 4, 5, 6, 7, 8]). - The first query asks for the sum of elements from index 1 to 4, which is (1 + 2 + 3 + 4 = 10). - The second query updates the element at index 5 to 10, so the array becomes ([1, 2, 3, 4, 10, 6, 7, 8]). - The third query asks for the sum of elements from index 3 to 6, which is (3 + 4 + 10 + 6 = 23). - The fourth query updates the element at index 8 to 15, so the array becomes ([1, 2, 3, 4, 10, 6, 7, 15]). - The fifth query asks for the sum of elements from index 4 to 8, which is (4 + 10 + 6 + 7 + 15 = 42).","solution":"def process_queries(n, q, array, queries): Process the given queries on the array. Parameters: n (int): Number of elements in the array. q (int): Number of queries. array (list): Initial elements of the array. queries (list): List of queries where each query is a list [type, arg1, arg2]. Returns: list: Results of the sum queries. results = [] for query in queries: if query[0] == 1: # Update the element at a specific position (1-based index) i, x = query[1] - 1, query[2] array[i] = x elif query[0] == 2: # Find the sum of elements in a given subarray (1-based index) l, r = query[1] - 1, query[2] results.append(sum(array[l:r])) return results"},{"question":"You are given a matrix of non-negative integers with `n` rows and `m` columns. Your task is to find a submatrix such that the sum of the elements of this submatrix is maximal. Submatrices can be rectangular and can be of any size from 1x1 up to nxm. The input consists of multiple test cases. Each test case begins with two integers `n` and `m` (1 ≤ n, m ≤ 200), which represent the number of rows and columns of the matrix. This is followed by `n` lines, each containing `m` non-negative integers representing the elements of the matrix. It is guaranteed that each element in the matrix is at most 1000. The output for each test case should be a single integer representing the maximum sum of any submatrix in the given matrix. # Input ``` The first line contains an integer `t` (1 ≤ t ≤ 100) - the number of test cases. For each test case: - The first line contains the integers `n` and `m`. - The next `n` lines contain `m` integers each, representing the matrix. ``` # Output For each test case, output a single integer - the maximum sum of any submatrix. # Example Input ``` 2 3 3 1 2 3 4 5 6 7 8 9 2 2 1 1 1 1 ``` Output ``` 45 4 ``` # Explanation For the first test case, the maximum sum submatrix is the entire 3x3 matrix: ``` 1 2 3 4 5 6 7 8 9 ``` The sum is (1+2+3+4+5+6+7+8+9 = 45). For the second test case, the matrix is: ``` 1 1 1 1 ``` The sum of the entire matrix is (1 + 1 + 1 + 1 = 4). Note: You must handle multiple test cases. Use efficient algorithms to ensure that the solution works within the given constraints.","solution":"def max_sum_submatrix(matrix): def kadane(arr): max_sum = float(\'-inf\') current_sum = 0 for x in arr: current_sum = max(current_sum + x, x) max_sum = max(max_sum, current_sum) return max_sum n = len(matrix) m = len(matrix[0]) max_sum = float(\'-inf\') for left in range(m): temp = [0] * n for right in range(left, m): for i in range(n): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum def max_sum_submatrices(test_cases): results = [] for case in test_cases: n, m, matrix = case results.append(max_sum_submatrix(matrix)) return results"},{"question":"You are given an array a_1, a_2, ldots, a_n. You need to perform q queries of the following two types: 1. \\"SUM l r\\" — Output the sum of all elements in the subarray a[l], a[l+1], ldots, a[r]. 2. \\"UPDATE i x\\" — Update the element at index i to x. The first line contains two integers n and q (1 le n le 10^5, 1 le q le 10^5) — the number of elements in array a and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of array a. Then q lines follow, each containing a query. For each \\"SUM\\" query, print the answer to it. For example: Input: ``` 5 5 1 2 3 4 5 SUM 1 3 UPDATE 2 10 SUM 2 4 UPDATE 5 6 SUM 1 5 ``` Output: ``` 6 17 18 ```","solution":"class ArrayManipulation: def __init__(self, array): self.array = array def sum(self, l, r): Returns the sum of the elements in the subarray from index l to r (inclusive). Here, both l and r are 1-based indices. return sum(self.array[l-1:r]) def update(self, i, x): Updates the element at index i (1-based index) to x. self.array[i-1] = x"},{"question":"You have been tasked with designing a game ecosystem where players engage in battles to gain experience points (XP). There are various monsters in the game, each providing a specific amount of XP upon defeat. Players have limited stamina, and each monster requires a certain amount of stamina to defeat. You want to determine the maximum XP a player can gain within a given amount of stamina. You are given a list of monsters, where each monster is represented by its XP value and the amount of stamina required to defeat it. The player has a limited amount of total stamina to use across battles. Write a function `max_experience` that takes in two parameters: 1. `monsters` (a list of tuples, where each tuple contains two integers: the first integer represents the XP value, and the second integer represents the stamina required to defeat the monster). 2. `stamina` (an integer representing the total stamina available to the player). The function should return the maximum XP the player can gain. # Input - An integer, `n` (1 ≤ n ≤ 100), representing the number of monsters. - A list of `n` tuples, `monsters`, where each tuple contains two integers `xp_i` and `st_i` (1 ≤ xp_i, st_i ≤ 1000), representing the XP value and the stamina required to defeat the i-th monster respectively. - An integer, `stamina` (1 ≤ stamina ≤ 1000), representing the total stamina available to the player. # Output - An integer representing the maximum XP the player can gain. # Example ```python n = 3 monsters = [(100, 5), (300, 10), (200, 8)] stamina = 10 print(max_experience(monsters, stamina)) # Output: 300 ``` In this example, the player can choose to battle the second monster, which requires 10 stamina and provides 300 XP, thus maximizing the XP gained with the available stamina.","solution":"def max_experience(monsters, stamina): Function to determine the maximum XP a player can gain within a given amount of stamina. :param monsters: List of tuples, where each tuple contains two integers: XP value and stamina required to defeat the monster. :param stamina: Integer representing the total stamina available to the player. :return: Maximum XP the player can gain. n = len(monsters) # DP table to store the max XP for each stamina value dp = [0] * (stamina + 1) # Iterate over all monsters and update the dp table accordingly for xp, st in monsters: for j in range(stamina, st - 1, -1): dp[j] = max(dp[j], dp[j - st] + xp) # The answer is the maximum XP we can get with the given stamina return dp[stamina]"},{"question":"Given an array of integers, find the length of the longest contiguous subarray with an equal number of 1s and 0s. You are given an array containing only integers 0 and 1. Write a function `findLongestSubarray(arr: List[int]) -> int` that takes a list of integers as input and returns an integer representing the length of the longest contiguous subarray that has an equal number of 0s and 1s. # Input - A list of integers `arr` of length between 1 and 10000. Each integer is either 0 or 1. # Output - An integer representing the length of the longest contiguous subarray with an equal number of 0s and 1s. # Example ```python findLongestSubarray([0, 1, 0, 1]) # returns 4 findLongestSubarray([0, 0, 1, 0, 1, 1, 0]) # returns 6 findLongestSubarray([0, 0, 0, 1, 1, 0, 0]) # returns 4 ``` # Constraints - The length of the input list will be between 1 and 10000. - The values in the list will be either 0 or 1.","solution":"from typing import List def findLongestSubarray(arr: List[int]) -> int: Returns the length of the longest contiguous subarray with an equal number of 1s and 0s. # Map to store the first occurrence of a prefix_sum prefix_sum_map = {} # Initialize variables max_length = 0 prefix_sum = 0 # Iterate through the array for i in range(len(arr)): # Convert 0s to -1s if arr[i] == 0: prefix_sum -= 1 else: prefix_sum += 1 # Check if the prefix_sum is zero if prefix_sum == 0: max_length = i + 1 # Check if the prefix_sum has been seen before if prefix_sum in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[prefix_sum]) else: # Store the first occurrence of the prefix_sum prefix_sum_map[prefix_sum] = i return max_length"},{"question":"Given an MxN matrix represented as a 2D list of integers, write a function that identifies and marks all \\"peak\\" elements in the matrix. A \\"peak\\" element is defined as an element that is strictly greater than all of its adjacent neighbors. The neighbors of an element at position (i, j) are the elements at positions (i-1, j), (i+1, j), (i, j-1), and (i, j+1), provided these positions are valid within the matrix bounds. The function should return a new matrix of the same dimension where each \\"peak\\" element is replaced by the integer 1 and all other elements are replaced by 0. # Function Signature: ```python def mark_peaks(matrix: List[List[int]]) -> List[List[int]]: pass ``` # Input: - A list of lists of integers representing an MxN matrix (1 ≤ M, N ≤ 1000). # Output: - A list of lists of integers representing the modified matrix, with peaks marked as 1 and other elements as 0. # Example: ```python matrix = [ [10, 20, 15], [21, 30, 14], [7, 16, 32] ] mark_peaks(matrix) ``` # Expected Output: ```python [ [0, 0, 0], [0, 1, 0], [0, 0, 1] ] ``` # Constraints: 1. The input matrix will always be non-empty. 2. Values in the matrix are between -10^9 and 10^9. 3. Peaks will always be unique within the matrix. # Note: - Proper boundary checks should be made to handle elements at the edges and corners of the matrix.","solution":"from typing import List def mark_peaks(matrix: List[List[int]]) -> List[List[int]]: # Get the dimensions of the matrix M = len(matrix) N = len(matrix[0]) if M > 0 else 0 if M == 0 or N == 0: return [] # Prepare a result matrix with the same dimensions result = [[0] * N for _ in range(M)] # Function to check if a cell is a peak element def is_peak(i, j): current = matrix[i][j] if i > 0 and matrix[i-1][j] >= current: # Check top neighbor return False if i < M-1 and matrix[i+1][j] >= current: # Check bottom neighbor return False if j > 0 and matrix[i][j-1] >= current: # Check left neighbor return False if j < N-1 and matrix[i][j+1] >= current: # Check right neighbor return False return True # Iterate over each cell in the matrix for i in range(M): for j in range(N): if is_peak(i, j): result[i][j] = 1 return result"},{"question":"You are given a string of lowercase English letters representing a secret password. Each time you enter the password, a security system deems a substring of it as suspicious if it appears more than once in the password. Your task is to reveal the longest suspicious substring in the given password. If there are multiple longest suspicious substrings with the same length, return the one that appears first. If no such substring exists, return an empty string. A substring is defined as a contiguous sequence of characters within the string. The first and only line of input will contain a string s (1 <= |s| <= 100), denoting the password. Print the longest suspicious substring as described above. For example, if the input is \\"ababc\\", the longest suspicious substring is \\"ab\\", as it appears twice and is the longest among all such substrings. If the input is \\"abcd\\", there are no substrings that appear more than once, so the output will be an empty string. In the first sample, the substring \\"ab\\" appears twice in the password, making it the longest suspicious substring. In the second sample, no substrings are repeated, therefore the output is an empty string.","solution":"def longest_suspicious_substring(s): n = len(s) longest_suspicious = \\"\\" for length in range(n-1, 0, -1): # Start from the longest possible substring seen = set() for i in range(n - length + 1): substring = s[i:i+length] if substring in seen: return substring seen.add(substring) return longest_suspicious"},{"question":"You are building a road system where each road must be bidirectional and must be made of bridges. You are given a list of cities and a list of bridges connecting pairs of cities with certain lengths. Each bridge can only connect exactly two cities. Your task is to find the minimum total length of bridges required to connect all the cities directly or indirectly. However, there is a catch: all bridges have a weight limit and you must ensure that the weight limit is distributed evenly across all cities involved. The input starts with an integer n (1 ≤ n ≤ 100), the number of cities, followed by an integer m (n-1 ≤ m ≤ n*(n-1)/2), the number of bridges. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) where u and v are cities connected by a bridge with length w. It is guaranteed that there will be at least one way to connect all the cities with the given bridges. Output a single integer which is the minimum total length of bridges required to connect all the cities. If it is not possible to connect all cities with the given conditions, print \\"Impossible\\". # Example Input: ``` 4 5 1 2 10 1 3 15 1 4 20 2 3 35 3 4 25 ``` # Example Output: ``` 45 ```","solution":"def minimum_total_length_of_bridges(n, bridges): Returns the minimum total length of bridges required to connect all the cities. If it is not possible, returns \\"Impossible\\". parent = list(range(n)) def find(u): if parent[u] != u: parent[u] = find(parent[u]) return parent[u] def union(u, v): root_u = find(u) root_v = find(v) if root_u != root_v: parent[root_u] = root_v # Sorting the bridges by weight bridges.sort(key=lambda x: x[2]) total_length = 0 for u, v, w in bridges: if find(u-1) != find(v-1): union(u-1, v-1) total_length += w # Check if all cities are connected root_set = set(find(i) for i in range(n)) if len(root_set) != 1: return \\"Impossible\\" return total_length"},{"question":"Bob is playing a card game where he picks a card from a deck consisting of N cards, each having a unique number between 1 and N. For this game, Bob will pick cards in a sequence and each time add the picked card\'s number to his total score. However, Bob has a particular condition: he cannot pick two consecutive numbers from the deck. Given the initial arrangement of numbers in the deck, you need to help Bob find the maximum possible total score he can achieve under the given condition. The first line of input consists of a single integer t (1 ≤ t ≤ 1000) denoting the number of test cases. For each test case: - The first line contains a single integer N (1 ≤ N ≤ 100,000) — the number of cards in the deck. - The second line contains N integers denoting the numbers on the cards. Output the maximum possible score Bob can achieve for each test case. Example input: ``` 2 5 1 2 3 4 5 4 3 2 1 6 ``` Example output: ``` 9 9 ``` Explanation: In the first test case: Bob can pick numbers 5 and 3, summing up to 8. In the second test case: Bob can pick numbers 6 and 3, summing up to 9.","solution":"def max_score_no_consecutive(N, cards): if N == 0: return 0 if N == 1: return cards[0] dp = [0] * N dp[0] = cards[0] dp[1] = max(cards[0], cards[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + cards[i]) return dp[N-1] def process_test_cases(t, test_cases): results = [] for i in range(t): N, cards = test_cases[i] results.append(max_score_no_consecutive(N, cards)) return results"},{"question":"You are organizing a coding contest with various levels of difficulties. You need to create a function that computes the difficulty level of a problem based on its score. Each problem has a base score and a list of multiplier values that represent how participants\' performance impacts the final score. A problem\'s difficulty level is calculated as the sum of the base score and the product of its base score with each multiplier. Your function should determine the total difficulty level for each problem given its base score and multipliers. # Input Format - An integer t (1 le t le 100) - the number of problems. - For each problem, the input follows: - An integer b (1 le b le 1000) - the base score of the problem. - An integer m (0 le m le 10) - the number of multipliers. - A list of m floating-point numbers representing the multipliers. # Output Format For each problem, output a floating-point number - the total difficulty level, rounded to 2 decimal places. # Example Input ``` 3 100 2 0.5 0.2 200 0 150 1 0.75 ``` Output ``` 170.00 200.00 262.50 ``` # Explanation - For the first problem, the total difficulty level is 100 + 100*0.5 + 100*0.2 = 170. - For the second problem, since there are no multipliers, the difficulty level is the base score itself, which is 200. - For the third problem, the total difficulty level is 150 + 150*0.75 = 262.50.","solution":"def calculate_difficulty(t, problems): difficulties = [] for i in range(t): b = problems[i][0] m = problems[i][1] multipliers = problems[i][2:] difficulty = b + sum(b * multiplier for multiplier in multipliers) difficulties.append(round(difficulty, 2)) return difficulties"},{"question":"You are given a list of integers where each integer represents the number of days left until a batch of equipment needs to be checked for maintenance. An equipment check must be performed on day 0. Write a function to calculate how many batches of equipment need to be checked today. The input consists of a single line containing space-separated integers representing the number of days left for each batch. The function should return a single integer — the number of batches that need to be checked today. # Example **Input** ``` 0 1 5 0 3 0 2 ``` **Output** ``` 3 ``` **Explanation** There are three batches (1st, 4th, and 6th) requiring a check today, as their days remaining is 0.","solution":"def count_batches_due_today(days_left): This function takes a list of integers where each integer represents the number of days left until an equipment batch needs maintenance. It returns the number of batches that need to be checked today (i.e., their days remaining is 0). Parameters: - days_left (List[int]): A list of integers representing days left for maintenance. Returns: - int: The number of batches needing maintenance today. return days_left.count(0)"},{"question":"Suppose you are given a list of N integers `nums` representing a sequence of numbers. Your task is to find the longest subsequence where the difference between consecutive elements is either 1 or -1. A subsequence is defined as a sequence derived from the list by deleting some or no elements without changing the order of the remaining elements. # Input - The first line contains a single integer N (1 ≤ N ≤ 100,000), the length of the list. - The second line contains N space-separated integers `nums[i]` (-10^9 ≤ nums[i] ≤ 10^9), the elements of the list. # Output - Print a single integer that represents the length of the longest subsequence where the difference between consecutive elements is either 1 or -1. # Example Input ``` 6 1 2 3 4 5 6 ``` Output ``` 6 ``` Input ``` 7 10 9 4 5 4 3 2 ``` Output ``` 4 ``` # Explanation In the first example, the entire list already forms a subsequence where the difference between consecutive elements is 1. In the second example, one of the longest subsequences you can form is [4, 5, 4, 3, 2]. The difference between each successive pair of numbers in this subsequence is either 1 or -1. The length of this subsequence is 5. Note that there can be other valid subsequences with the same or shorter length, but you need to find the longest one.","solution":"def longest_subsequence(nums): Function to find the longest subsequence where the difference between consecutive elements is either 1 or -1. Args: nums (list of int): The input list of integers Returns: int: The length of the longest valid subsequence if not nums: return 0 n = len(nums) longest = [1] * n for i in range(1, n): for j in range(i): if abs(nums[i] - nums[j]) == 1: longest[i] = max(longest[i], longest[j] + 1) return max(longest)"},{"question":"Martin is organizing a marathon in the town of Runville. Runners must complete a unique race that spans through several checkpoints around town. Each checkpoint is represented as a node on a graph, and the paths between them are represented as edges with a positive integer distance. The goal for the runners is to find the shortest possible path that visits all checkpoints at least once and returns to the starting point. Here\'s the scenario in more details: - There are N checkpoints in Runville, numbered from 1 to N. - The distances between pairs of checkpoints are given as a 2D matrix `distances`, where `distances[i][j]` represents the distance from checkpoint `i+1` to checkpoint `j+1`. The matrix is symmetrical (`distances[i][j] == distances[j][i]`) and `distances[i][j]` will be 0 if `i == j`. - Your task is to find the length of the shortest route that starts from checkpoint 1, visits all checkpoints exactly once, and returns to checkpoint 1. Write a function `find_shortest_route(N: int, distances: List[List[int]]) -> int` that takes in the following parameters: - `N` (an integer): the number of checkpoints. - `distances` (a list of lists of integers): the distance matrix. Your function should return the length of the shortest route that satisfies the conditions. # Example: ```python def find_shortest_route(N, distances): from itertools import permutations shortest_path = float(\'inf\') checkpoints = list(range(1,N)) for perm in permutations(checkpoints): current_path = distances[0][perm[0]] + sum(distances[perm[i]][perm[i+1]] for i in range(len(perm)-1)) + distances[perm[-1]][0] shortest_path = min(shortest_path, current_path) return shortest_path # Sample Input N = 4 distances = [ [0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0] ] # Sample Output 80 ``` # Constraints: - `2 <= N <= 10` - `1 <= distances[i][j] <= 100` for `i != j` - `distances[i][j] == distances[j][i]` - `distances[i][i] == 0` Note that while the problem can be approached as a Traveling Salesman Problem, it is computationally feasible to solve it using a brute-force approach given the constraint 2 <= N <= 10.","solution":"from itertools import permutations def find_shortest_route(N, distances): Finds the length of the shortest route that starts from checkpoint 1, visits all checkpoints exactly once, and returns to checkpoint 1. Parameters: N (int): the number of checkpoints. distances (List[List[int]]): the distance matrix. Returns: int: the length of the shortest route. shortest_path = float(\'inf\') checkpoints = list(range(1, N)) for perm in permutations(checkpoints): current_path = distances[0][perm[0]] + sum(distances[perm[i]][perm[i+1]] for i in range(len(perm) - 1)) + distances[perm[-1]][0] shortest_path = min(shortest_path, current_path) return shortest_path"},{"question":"You are an engineer assigned to work on a network of sensors. The sensors are arranged in a straight line, and each sensor can detect temperature differences between itself and its neighboring sensors. Each sensor also has an energy level that dictates the strength of the signal it can emit. You need to perform several operations and queries on this sensor network. The operations can either update the energy level of a specific sensor or retrieve the maximum temperature difference that can be detected between any two sensors in the network. The sensor network is represented as an array of integers, where each integer represents the energy level of a sensor. You will be given n, the number of sensors, followed by an array of n integers representing the energy levels. Then, you will receive q queries, each query being one of the following two types: - `1 x y`: Update the energy level of the sensor at position x to y. - `2 l r`: Retrieve the maximum temperature difference detectable between any two sensors in the subarray from positions l to r (inclusive). You should output the results of the queries of the second type. Constraints: - 1 ≤ n, q ≤ 100,000 - 0 ≤ energy levels, y ≤ 10^6 - 1 ≤ x, l, r ≤ n Input format: The first line contains two integers n and q. The second line contains n integers representing the initial energy levels. Each of the next q lines contains a query of one of the two types described above. Output format: For each query of the second type, output the maximum temperature difference. Example: ``` Input: 5 3 3 1 4 1 5 2 1 3 1 3 9 2 2 5 Output: 3 8 ``` In the example above: - The first query asks for the maximum temperature difference between sensors 1 and 3, which is 4 - 1 = 3. - The second query updates the energy level of sensor 3 to 9. - The third query asks for the maximum temperature difference between sensors 2 and 5, which is 9 - 1 = 8 after the update.","solution":"class SensorNetwork: def __init__(self, energy_levels): self.energy_levels = energy_levels def update_energy(self, x, y): self.energy_levels[x - 1] = y def max_temperature_difference(self, l, r): subarray = self.energy_levels[l - 1:r] return max(subarray) - min(subarray) def process_queries(n, energy_levels, queries): sensor_network = SensorNetwork(energy_levels) results = [] for query in queries: if query[0] == 1: sensor_network.update_energy(query[1], query[2]) elif query[0] == 2: result = sensor_network.max_temperature_difference(query[1], query[2]) results.append(result) return results"},{"question":"In a faraway land, there is a magical forest where trees have unique glowing fruits. Each tree can have a different number of fruits, and each fruit glows with a distinct amount of lumens (brightness measured in integers). The animals in the forest want to balance the brightness of the fruits they gather. Your task is to determine if it is possible to partition the fruits into two groups such that the sum of lumens in each group is equal. If such a partition is possible, return \\"YES\\" (without quotes), otherwise return \\"NO\\" (without quotes). The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of fruits. The second line contains n integers separated by spaces, where each integer li (1 ≤ li ≤ 1000) represents the brightness of a fruit. Output a single line with either \\"YES\\" or \\"NO\\". Example: For the input: ``` 4 1 5 11 5 ``` The output should be: ``` YES ``` Explanation: The fruits can be partitioned into two groups with lumens [1, 5, 5] and [11], both summing to 11.","solution":"def can_partition_fruits(n, lumens): total_sum = sum(lumens) if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for lumen in lumens: for j in range(target, lumen - 1, -1): dp[j] = dp[j] or dp[j - lumen] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given an array of `n` integers. Your task is to find the longest subarray such that the sum of the elements in the subarray is at most `k`. # Input The first line of input contains two integers, `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ 10^9), representing the number of elements in the array and the maximum allowed sum of the subarray, respectively. The second line of input contains `n` space-separated integers, representing the elements of the array. # Output Output a single integer, representing the length of the longest subarray with sum at most `k`. # Example **Input:** ``` 5 5 1 2 3 4 5 ``` **Output:** ``` 2 ``` **Explanation:** The longest subarray where the sum is at most 5 is `[1, 2]` or `[2, 3]`, both of which have a length of 2. **Note:** For an array that is strictly increasing, the solution needs to efficiently find the subarray using techniques like sliding window or two-pointer approach to meet the time complexity requirements given the constraints.","solution":"def longest_subarray_with_sum_at_most_k(n, k, arr): Returns the length of the longest subarray with sum at most k. Parameters: n (int): The number of elements in the array. k (int): The maximum allowed sum of the subarray. arr (list): List of integers representing the array. Returns: int: The length of the longest subarray with sum at most k. max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given a list of `n` integers, your task is to group them into pairs such that the absolute difference between the larger and the smaller integer in each pair is minimized. You should return the sum of these minimal differences for all pairs. Each integer in the given list must be used exactly once. If there are multiple ways to group the integers resulting in the same sum, any such grouping is acceptable. Input - The first line of the input contains an integer `n` (2 ≤ n ≤ 10^5, n is even), the number of integers in the list. - The second line contains `n` space-separated integers, where each integer is in the range [1, 10^9]. Output - Print a single integer: the sum of the minimal absolute differences for all pairs. Example ``` Input: 4 1 3 6 9 Output: 5 ``` Explanation: The optimal way to pair the integers is (1, 3) and (6, 9), which gives an absolute difference of |1-3|=2 and |6-9|=3 leading to a total sum of 2+3=5.","solution":"def minimal_difference_sum(n, arr): Given a list of integers, groups them into pairs such that the absolute difference between the larger and the smaller integer in each pair is minimized. Returns the sum of these minimal differences for all pairs. arr.sort() minimal_sum = 0 for i in range(0, n, 2): minimal_sum += arr[i+1] - arr[i] return minimal_sum"},{"question":"You are given a 2D grid of size m × n where each cell represents a colored tile. The color of each cell is represented by a lowercase English letter. There are at most 26 different colors. Your task is to determine the largest rectangle (aligned with the grid axes) that can be formed such that all the tiles within the rectangle are of the same color. Input: - The first line contains two integers, m and n (1 ≤ m, n ≤ 1000), representing the dimensions of the grid. - The next m lines contain n lowercase English letters each, representing the colors of the tiles in the grid. Output: - A single integer representing the area of the largest rectangle that can be formed where all the tiles are of the same color. Example: Input: 4 5 a a a b b a a a b b a a a b b a a a a a Output: 12","solution":"def largest_rectangle(grid): m, n = len(grid), len(grid[0]) max_area = 0 def get_heights(grid, color): heights = [0] * n for row in grid: for j in range(n): if row[j] == color: heights[j] += 1 else: heights[j] = 0 return heights def largest_histogram_area(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * width) stack.append(i) heights.pop() # remove the appended 0 return max_area unique_colors = set() for row in grid: unique_colors.update(row) for color in unique_colors: heights = get_heights(grid, color) max_area = max(max_area, largest_histogram_area(heights)) return max_area"},{"question":"You are given a tree with N nodes, rooted at node 1. Each node has a value associated with it. Your task is to answer multiple queries about the sum of values in the subtree of a given node. # Input The first line contains an integer N (1 ≤ N ≤ 2 * 10^5), the number of nodes in the tree. The second line contains N integers, where the i-th integer is the value associated with the i-th node. Each of the next N-1 lines contains two integers u and v (1 ≤ u, v ≤ N) indicating there\'s an edge between nodes u and v, forming the tree. The next line contains an integer Q (1 ≤ Q ≤ 10^5), the number of queries. Each of the next Q lines contains a single integer x (1 ≤ x ≤ N), representing a query to find the sum of values in the subtree of node x. # Output For each query, output a single integer, the sum of values in the subtree of node x. # Example Input ``` 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 3 1 4 ``` Output ``` 12 15 4 ``` # Explanation For the first query, the subtree of node 3 consists of nodes {3, 4, 5} and their values sum up to 12. For the second query, the subtree of node 1 includes all nodes, summing up to 1+2+3+4+5 = 15. For the third query, the subtree of node 4 includes only itself, summing to 4.","solution":"def subtree_sum(N, values, edges, queries): from collections import defaultdict, deque # Build the tree tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # To store the sum of each subtree subtree_sums = [0] * (N + 1) # DFS to calculate subtree sums def dfs(node, parent): subtree_sums[node] = values[node - 1] # Include current node\'s value for neighbor in tree[node]: if neighbor != parent: dfs(neighbor, node) subtree_sums[node] += subtree_sums[neighbor] # Start DFS from the root node 1 dfs(1, -1) # Answer the queries results = [subtree_sums[x] for x in queries] return results"},{"question":"You are given a grid of size `n x m` filled with positive integers. You can perform an operation on the grid by selecting any `3x3` sub-grid and rotating its elements 90 degrees clockwise. The goal is to transform the grid such that all elements in the grid are equal. You are allowed to perform at most `5nm` operations. You do not need to minimize the number of operations. It is guaranteed that it is always possible to achieve the goal under the given constraints. # Input The first line contains a single integer `t` (`1 <= t <= 3000`) — the number of test cases. The description of each test case follows. The first line of each test case contains two integers `n`, `m` (`3 <= n, m <= 50`). Each of the next `n` lines contains `m` space-separated positive integers, describing the elements of the grid. # Output For each test case, print an integer `k` (`0 <= k <= 5nm`) — the number of operations. In each of the next `k` lines, print `6` integers `x1, y1, x2, y2, x3, y3` (`1 <= x1, x2, x3 <= n`, `1 <= y1, y2, y3 <= m`), describing the next operation. Each triplet of coordinates should correspond to distinct cells within the same `3x3` sub-grid, and these cells should form a 90-degree rotation within that sub-grid. # Example Input: ``` 2 3 3 1 2 3 4 5 6 7 8 9 4 4 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 ``` Output: ``` 1 1 1 1 2 1 3 3 1 1 1 2 1 3 2 2 2 3 2 4 3 3 3 4 3 4 ``` In the first test case, performing one rotation operation on the entire grid transforms it into: ``` 4 1 2 7 5 3 8 9 6 ``` Repeated operations would eventually result in a grid where all elements are the same. In the second test case, multiple operations are shown to demonstrate the intermediate steps.","solution":"def equalize_grid(t, test_cases): results = [] for tc in test_cases: n, m, grid = tc operations = [] # Rotate each 3x3 sub-grid to move toward equalizing the grid for i in range(n - 2): for j in range(m - 2): if grid[i][j] != grid[i+1][j] or grid[i][j] != grid[i+2][j]: operations.append((i+1, j+1, i+1, j+2, i+1, j+3)) # Perform a mock rotation grid[i][j:j+3] = grid[i][j:j+3][::-1] # Simplified rotation for illustration results.append(operations) return results"},{"question":"A company has a collection of software projects. Each project is either completed or still in progress. The company wants to analyze the productivity in terms of the number of days required to complete each project. Given an array of integers representing the number of days required to complete each project, the company wants to find the maximum difference in days between any two completed projects. Write a function that takes in an array of integers and returns the maximum difference in days between any two completed projects. If there are fewer than two completed projects, return -1. # Input - The first line contains an integer n (1 leq n leq 10^5) — the number of projects. - The second line contains n integers where each integer represents the number of days required to complete a project. If a project is still in progress, it will be represented by the number -1. # Output - Output a single integer representing the maximum difference in days between any two completed projects. If there are fewer than two completed projects, return -1. # Example Input ``` 5 12 15 -1 7 22 ``` Output ``` 15 ``` Explanation The completed projects have days [12, 15, 7, 22]. The maximum difference is 22 - 7 = 15. Input ``` 3 -1 -1 -1 ``` Output ``` -1 ``` Explanation There are fewer than two completed projects, so the output is -1.","solution":"def max_difference_in_days(n, days): Returns the maximum difference in days between any two completed projects. If there are fewer than two completed projects, returns -1. completed_projects = [day for day in days if day != -1] if len(completed_projects) < 2: return -1 return max(completed_projects) - min(completed_projects)"},{"question":"You are given an integer array arr of size n. You need to sort the array such that all the even numbers appear before all the odd numbers while maintaining the relative order of the even and odd numbers. If there are no even numbers or no odd numbers, the array should remain sorted based on the requirement. Write a function `sort_even_before_odd(arr)` that takes an array of integers and returns a new array that satisfies the above condition. # Input - An integer array arr where 1 leq n leq 10^5 and -10^9 leq arr[i] leq 10^9. # Output - A sorted array where all even numbers appear before all the odd numbers while maintaining the relative order of the even and odd numbers. # Example - Example 1: ```python arr = [3, 1, 2, 4, 7, 6] # Even numbers: [2, 4, 6] # Odd numbers: [3, 1, 7] # Sorted array: [2, 4, 6, 3, 1, 7] print(sort_even_before_odd(arr)) # Output: [2, 4, 6, 3, 1, 7] ``` - Example 2: ```python arr = [11, 13, 9, 7, 15] # Even numbers: [] # Odd numbers: [11, 13, 9, 7, 15] print(sort_even_before_odd(arr)) # Output: [11, 13, 9, 7, 15] ``` - Example 3: ```python arr = [18, 6, 4, 10] # Even numbers: [18, 6, 4, 10] # Odd numbers: [] print(sort_even_before_odd(arr)) # Output: [18, 6, 4, 10] ``` # Constraints - The function should handle arrays with both positive and negative integers. - The function should have a time complexity of O(n) and a space complexity of O(n).","solution":"def sort_even_before_odd(arr): Given an array of integers, sorts the array so that all even numbers appear before all odd numbers while maintaining the relative order of the even and odd numbers. Parameters: arr (list of int): The input array of integers. Returns: list of int: The sorted array with evens first and odds second. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds"},{"question":"You are given an array of n integers a1, a2, ..., an. Your task is to handle q operations on this array. There are three types of operations: 1. Add a value to all elements in a given range. 2. Multiply all elements in a given range by a given value. 3. Print the sum of all elements in a given range. After each operation of the third type, you need to print the result. Input: The first line contains two integers n and q (1 ≤ n, q ≤ 100,000) — the size of the array and the number of operations, respectively. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the initial elements of the array. Then q lines follow. Each of these lines describes an operation in one of the following forms: - 1 l r x: Add x to all elements in the range [l, r] (1 ≤ l ≤ r ≤ n, -10^9 ≤ x ≤ 10^9). - 2 l r x: Multiply all elements in the range [l, r] by x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10). - 3 l r: Print the sum of all elements in the range [l, r] (1 ≤ l ≤ r ≤ n). Output: For each operation of the third type, print the result on a new line. Example: Input: 5 5 1 2 3 4 5 1 1 3 2 3 1 5 2 1 5 2 1 2 4 3 3 2 5 Output: 15 44 Explanation: - After the first operation, the array becomes [3, 4, 5, 4, 5]. - The sum of all elements in the array [3, 4, 5, 4, 5] is 15. - After the third operation, the array becomes [6, 8, 10, 8, 10]. - After the fourth operation, the array becomes [6, 11, 13, 11, 10]. - The sum of elements in the range [2, 5] is 44.","solution":"def apply_operations(n, q, array, operations): results = [] for operation in operations: op = operation[0] if op == 1: l, r, x = operation[1] - 1, operation[2] - 1, operation[3] for i in range(l, r + 1): array[i] += x elif op == 2: l, r, x = operation[1] - 1, operation[2] - 1, operation[3] for i in range(l, r + 1): array[i] *= x elif op == 3: l, r = operation[1] - 1, operation[2] - 1 results.append(sum(array[l:r + 1])) return results"},{"question":"In a distant land, there lies a kingdom with peculiar rules for communication. The kingdom uses a unique system to send messages through a series of relays. Each relay consists of an ordered sequence of unique numbers. There is a specific range for each number, defined as [1, 103]. A message is represented by an ordered sequence of digits. The kingdom\'s rule is that a message can be transmitted successfully if and only if the digits of the message, when rearranged, form an exact subsequence of the digits in the relay. Your task is to determine if a given message can be successfully transmitted through a given relay. The first line contains the relay as a string s of length n (1 ≤ n ≤ 106), where each character is a digit from \'1\' to \'9\'. The second line contains the message as a string t of length m (1 ≤ m ≤ 103), where each character is also a digit from \'1\' to \'9\'. Output \\"YES\\" if the message can be successfully transmitted through the relay according to the kingdom\'s rules, otherwise output \\"NO\\". Example: Input: ``` 123456789 3589 ``` Output: ``` YES ``` Input: ``` 987654321 13579 ``` Output: ``` NO ``` Explanation: 1. For the first example, the message \\"3589\\" can be rearranged to form a subsequence of \\"123456789\\", hence the output is \\"YES\\". 2. For the second example, although \\"13579\\" is a subsequence of \\"987654321\\", it cannot be rearranged to a subsequence because 1 needs to come before 3, and so on, hence the output is \\"NO\\".","solution":"def can_transmit_message(relay, message): Determines if the message can be successfully transmitted through the relay. Args: relay (str): The relay string consisting of digits. message (str): The message string consisting of digits. Returns: str: \\"YES\\" if the message can be successfully transmitted; \\"NO\\" otherwise. it = iter(relay) return \\"YES\\" if all(char in it for char in message) else \\"NO\\""},{"question":"Alice has recently started playing a game where she needs to form a special kind of string. The game presents her with a string of lowercase English letters. Her goal is to rearrange the characters of the string to form a palindromic sequence while allowing at most one character to appear an odd number of times. If it\'s possible to achieve this, Alice wins the game; otherwise, she loses. A palindromic sequence reads the same backward as forward. For example, \\"racecar\\" and \\"madam\\" are palindromes. Write a function that, given a string, determines whether Alice can rearrange the string into a palindrome by following the game’s rules. Input: - A single string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters. Output: - Print \\"YES\\" if Alice can rearrange the string into a palindrome, and \\"NO\\" otherwise. Example: Input: mamad Output: YES Explanation: mamad can be rearranged as \\"madam\\", which is a palindrome. Input: abc Output: NO Explanation: abc cannot be rearranged to form a palindrome with at most one odd-count character. Input: aabbcc Output: YES Explanation: aabbcc can be rearranged as \\"abcabc\\" or \\"abccba\\", both of which are palindromes.","solution":"def can_form_palindrome(s): Determines if the characters of the string can be rearranged to form a palindromic sequence. from collections import Counter # Count frequency of each character char_counts = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be rearranged into a palindrome if at most one character has an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given two binary trees and you need to determine if they are identical or not. Two binary trees are considered identical if they are structurally identical and the nodes have the same value. * A binary tree is represented using its preorder traversal and \\"null\\" to denote the absence of a node. * The input consists of two lines. The first line represents the preorder traversal of the first binary tree. * The second line represents the preorder traversal of the second binary tree. Your task is to write a function that determines if the two given binary trees are identical. **Input Format:** - Each line contains a string representing the preorder traversal of a binary tree. - Each node value is an integer (no spaces within a number). - Nodes are separated by spaces. - Missing children are represented by the placeholder \\"null\\". **Output Format:** - Print \\"Yes\\" if the two binary trees are identical, otherwise print \\"No\\". **Constraints:** - Both preorder traversal strings will have at most 1000 nodes. - Node values will be integers within the range [-1000, 1000]. **Sample Input:** ``` 1 2 null null 3 null null 1 2 null null 3 null null ``` **Sample Output:** ``` Yes ``` **Explanation:** Both trees have the same structure and nodes\' values so the output is \\"Yes\\". **Sample Input 2:** ``` 1 2 null null 3 null null 1 2 null null 3 4 null null null ``` **Sample Output 2:** ``` No ``` **Explanation 2:** The second tree has an additional node with value 4, so the output is \\"No\\".","solution":"def are_identical(preorder1, preorder2): Determines if two binary trees represented by their preorder traversals are identical. Args: preorder1: str - the preorder traversal of the first binary tree. preorder2: str - the preorder traversal of the second binary tree. Returns: str - \\"Yes\\" if the trees are identical, else \\"No\\". def build_tree(preorder): Converts preorder traversal string into list for easier manipulation. return preorder.split() def check_trees(t1, t2): Recursively check if the trees represented by t1 and t2 are identical. if not t1 and not t2: return True if not t1 or not t2: return False if t1[0] != t2[0]: return False return check_trees(t1[1:3], t2[1:3]) and check_trees(t1[3:], t2[3:]) t1 = build_tree(preorder1) t2 = build_tree(preorder2) return \\"Yes\\" if check_trees(t1, t2) else \\"No\\" # Sample testing print(are_identical(\\"1 2 null null 3 null null\\", \\"1 2 null null 3 null null\\")) # Expected: Yes print(are_identical(\\"1 2 null null 3 null null\\", \\"1 2 null null 3 4 null null null\\")) # Expected: No"},{"question":"Given a sequence of n integers (1 ≤ n ≤ 300000) that contains both positive and negative numbers. We define a sub-sequence to be a contiguous non-empty group of elements from the original sequence. Your task is to find the maximum sum of any sub-sequence in the given sequence. The input consists of two lines. The first line contains a single integer n, representing the length of the sequence. The second line contains n space-separated integers, representing the elements of the sequence. Print a single integer — the maximum sum of any sub-sequence in the given sequence. For example, given the input: 5 -2 1 -3 4 -1 The maximum sum sub-sequence is [4], so the output should be 4. In another example, given the input: 8 -2 1 -3 4 -1 2 1 -5 4 The maximum sum sub-sequence is [4, -1, 2, 1], so the output should be 6.","solution":"def max_subarray_sum(n, arr): Returns the maximum sum of any sub-sequence in the given sequence. if n == 0: return 0 # Initialize the current sum and maximum sum current_sum = max_sum = arr[0] # Iterate through the array for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum # Example usage: # n = 8 # arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_subarray_sum(n, arr)) # Output: 6"},{"question":"You are given an array of integers representing the heights of students standing in a line. Some students requested to swap their positions to stand next to each other. You need to find out if it\'s possible to achieve the desired configuration by performing a given number of swaps. Consider the following rules: - Each swap allows you to exchange the positions of two adjacent students. - You may perform up to `K` swaps. - The input will contain two integers `N` (the number of students) and `K` (the maximum number of swaps allowed), followed by the array representing the heights of the students. Your task is to determine if it\'s possible to achieve the desired configuration of students\' heights in non-decreasing order with at most `K` swaps. For example, given an array `[3, 1, 2]` and `K=1`, it\'s impossible to achieve `[1, 2, 3]` because it requires at least two adjacent swaps (swap 3 and 1, then 3 and 2), which exceeds the allowed number of swaps. On the contrary, with `K=2`, it is possible to achieve the sorted array. **Input:** - The first line contains integers `N` (1 ≤ N ≤ 1000) and `K` (0 ≤ K ≤ 1000). - The second line contains `N` integers representing the heights of the students `a1, a2, ..., aN` (1 ≤ ai ≤ 10^9). **Output:** - Print one line containing \\"YES\\" if the desired configuration can be achieved within `K` swaps, and \\"NO\\" otherwise. [Example] **Input:** ``` 3 1 3 1 2 ``` **Output:** ``` NO ``` **Input:** ``` 3 2 3 1 2 ``` **Output:** ``` YES ```","solution":"def can_sort_with_swaps(N, K, heights): Determines if the list \\"heights\\" can be sorted in non-decreasing order by making at most K adjacent swaps. :param N: Number of students (length of the array) :param K: Maximum number of swaps allowed :param heights: List of integers representing the heights of students :return: \\"YES\\" if it\'s possible to sort the list within K swaps, otherwise \\"NO\\" sorted_heights = sorted(heights) swap_count = 0 for i in range(N): for j in range(N - 1 - i): if heights[j] > heights[j + 1]: heights[j], heights[j + 1] = heights[j + 1], heights[j] swap_count += 1 if swap_count > K: return \\"NO\\" return \\"YES\\" if swap_count <= K else \\"NO\\""},{"question":"Alice is a marine biologist, and she is currently studying the behavior of a unique species of fish that lives in the ocean. She has observed that the fish are distributed at various depths in the ocean and move according to specific patterns. Alice wants to analyze the depths at which these fish were observed over a series of days. She will provide you with the depth observations for a series of days, and she wants to determine the longest contiguous subarray of days during which the difference between the maximum and minimum depth observations is less than or equal to a given threshold k. Given an array of integers representing the depth observations of the fish over several days and an integer k, write a function that returns the length of the longest contiguous subarray where the difference between the maximum and minimum depths is at most k. # Input - An integer array depths where depths[i] represents the depth observation on the i-th day. - An integer k representing the maximum allowed difference between the depths in the subarray. # Output - Return an integer representing the length of the longest contiguous subarray with the difference between the maximum and minimum depths no greater than k. # Example Example 1: Input: ``` depths = [12, 3, 16, 9, 10, 15, 11] k = 5 ``` Output: ``` 3 ``` Explanation: The longest contiguous subarray with the difference between the maximum and minimum depths not exceeding 5 is [9, 10, 15] with length 3. Example 2: Input: ``` depths = [1, 2, 3, 4, 5, 6, 7, 8, 9] k = 0 ``` Output: ``` 1 ``` Explanation: Each depth has to be considered as a single subarray since the difference between any two elements is greater than 0. # Constraints: - 1 <= depths.length <= 1000 - 1 <= depths[i] <= 10000 - 0 <= k <= 10000 # Note - The function should handle edge cases, such as when all depths are the same or when no valid subarray is found within the given constraints. - While implementing your solution, consider optimizing it for efficient time complexity.","solution":"def longest_contiguous_subarray(depths, k): Returns the length of the longest contiguous subarray with the difference between the maximum and minimum depths no greater than k. from collections import deque max_len = 0 start = 0 max_deque = deque() # will store indices of interest in decreasing order of their values min_deque = deque() # will store indices of interest in increasing order of their values for end in range(len(depths)): while max_deque and depths[max_deque[-1]] <= depths[end]: max_deque.pop() max_deque.append(end) while min_deque and depths[min_deque[-1]] >= depths[end]: min_deque.pop() min_deque.append(end) while depths[max_deque[0]] - depths[min_deque[0]] > k: start += 1 if start > max_deque[0]: max_deque.popleft() if start > min_deque[0]: min_deque.popleft() max_len = max(max_len, end - start + 1) return max_len"},{"question":"A natural park is conducting a bird species diversity study. Researchers have strategically placed several birdhouses across different zones in the park. Each birdhouse has either a bluebird or a redbird residing in it. The park is divided into multiple zones, and each zone contains an exact number of birdhouses. The lead researcher wants to know if it is possible to rearrange the birdhouses such that each zone has an equal number of bluebirds and redbirds. However, to minimize disruption to the birds, they want to find the minimum number of birdhouses that need to be moved between zones to achieve this goal. You are given the number of zones n, the number of birdhouses in each zone k, and a grid representing the birds in the birdhouses. The grid is n rows by k columns, where each cell can contain either \'B\' (for bluebird) or \'R\' (for redbird). Write a function to determine the minimum number of moves required to rearrange the birdhouses so that each zone contains an equal number of bluebirds and redbirds. If it\'s impossible to achieve such an arrangement, return -1. # Input - The first line contains two integers n and k (1 le n, k le 1000) — the number of zones and the number of birdhouses in each zone. - The next n lines contain k characters each, representing the content of the birdhouses in each zone. Each character is either \'B\' or \'R\'. # Output - Output a single integer — the minimum number of moves required to rearrange the birdhouses so that each zone contains an equal number of bluebirds and redbirds. If it\'s not possible, print -1. # Example Input ``` 3 4 BRBR BBRR RRBB ``` Output ``` 0 ``` Input ``` 2 4 BBBB RRRR ``` Output ``` 4 ``` # Note In the first example, each zone already contains an equal number of bluebirds and redbirds, so no moves are needed. In the second example, you need to move 2 bluebirds from the first zone to the second zone, and 2 redbirds from the second zone to the first zone to balance each zone. Thus, a total of 4 moves are required.","solution":"def min_moves_to_balance(n, k, grid): total_blues = sum(row.count(\'B\') for row in grid) total_reds = n * k - total_blues if total_blues != total_reds: return -1 moves = 0 for i in range(n): blues = grid[i].count(\'B\') reds = k - blues balance_moves = abs(blues - reds) // 2 moves += balance_moves return moves"},{"question":"Consider a game where you are given an array of integers. The game consists of making a sequence of moves. Each move involves reducing any of the array\'s elements to a strictly smaller integer. Your goal is to make the array elements as equal as possible after a series of such moves. Formally, you are given an array A of length n (1 le n le 10^5) containing positive integers (1 le A[i] le 10^9). Your task is to determine the minimum possible value of the maximum element in the array after performing as many moves as necessary. # Input - The first line contains an integer n (1 le n le 10^5), the number of elements in the array. - The second line contains the array A of length n. # Output - Output the minimum possible value of the maximum element of the array after any number of moves. # Example **Input:** ``` 5 7 5 3 9 1 ``` **Output:** ``` 1 ``` **Explanation:** We can reduce each element to 1, achieving an array where all elements are equal to 1, which is the minimum possible value of the maximum element after an arbitrary number of moves. # Note There are multiple ways to achieve the task. You can think greedily or consider other algorithmic approaches to ensure that the elements are made as equal as possible by reducing each element iteratively.","solution":"def min_possible_max_value(arr): Determines the minimum possible value of the maximum element after performing any number of reduction moves. # The smallest possible value of the maximum element is 1, # which is the minimum possible value allowed in the array. return 1"},{"question":"You are given a tree with n nodes. The tree is rooted at node 1. Each node has a value associated with it. Your task is to answer a series of queries on the subtree sums. Each query provides an integer v, and you need to return the sum of the values of all nodes in the subtree rooted at node v. The first line contains an integer n (1 leq n leq 100,000), the number of nodes in the tree. The second line contains n integers, the values of the nodes from 1 to n. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n), denoting an edge between nodes u and v. The next line contains an integer q (1 leq q leq 100,000), the number of queries. Each of the next q lines contains an integer v (1 leq v leq n), the node for which to compute the subtree sum. Output q lines, each containing the sum of the values of the nodes in the subtree rooted at node v for each query. Example: ``` Input: 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 1 3 4 Output: 15 12 4 ```","solution":"def calculate_subtree_sums(n, node_values, edges, queries): from collections import defaultdict, deque # Create the tree as an adjacency list tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Initialize the subtree sums array with None subtree_sums = [None] * (n + 1) def dfs(node, parent): subtree_sum = node_values[node - 1] for child in tree[node]: if child != parent: subtree_sum += dfs(child, node) subtree_sums[node] = subtree_sum return subtree_sum # Calculate subtree sums starting from the root node 1 dfs(1, -1) # Process the queries result = [] for query in queries: result.append(subtree_sums[query]) return result"},{"question":"Consider a directed graph with **n** vertices (numbered from **1** to **n**) and **m** edges. Each edge has a positive integer weight. Your task is to find the shortest paths from a given start vertex **s** to all other vertices using Dijkstra\'s algorithm. Implement the solution using a priority queue for efficiency. # Input The input starts with two integers **n** (1 ≤ n ≤ 100,000) and **m** (1 ≤ m ≤ 200,000), the number of vertices and edges, respectively. The next line contains an integer **s** (1 ≤ s ≤ n), the start vertex. The next **m** lines each contains three integers **u**, **v**, and **w** (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a directed edge from vertex **u** to vertex **v** with weight **w**. # Output Print **n** integers. For each vertex **i** (1 ≤ i ≤ n), print the shortest distance from **s** to vertex **i**. Print **∞** if there is no path from **s** to vertex **i**. # Example Input ``` 5 6 1 1 2 2 1 3 5 2 3 1 2 4 2 3 4 2 4 5 1 ``` Output ``` 0 2 3 4 5 ``` # Explanation - The shortest path from vertex **1** to vertex **1** is **0**. - The shortest path from vertex **1** to vertex **2** is **2**. - The shortest path from vertex **1** to vertex **3** is **3** (1 -> 2 -> 3). - The shortest path from vertex **1** to vertex **4** is **4** (1 -> 2 -> 3 -> 4). - The shortest path from vertex **1** to vertex **5** is **5** (1 -> 2 -> 3 -> 4 -> 5).","solution":"import heapq import sys def dijkstra(n, m, s, edges): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((w, v)) distances = [float(\'inf\')] * (n + 1) distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > distances[u]: continue for weight, v in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) # We return distances from 1 to n not counting the 0th index return [dist if dist != float(\'inf\') else \'∞\' for dist in distances[1:]] # Example usage n, m = 5, 6 s = 1 edges = [ (1, 2, 2), (1, 3, 5), (2, 3, 1), (2, 4, 2), (3, 4, 2), (4, 5, 1) ] print(dijkstra(n, m, s, edges))"},{"question":"In a town called Summerville, there are n fountains lined up in a straight path. Each fountain can be turned on or off individually and can spray water within a certain range. The i-th fountain sprays water to cover a distance of up to ri steps to its left and up to ri steps to its right. Given a sequence of fountains, determine the minimum number of fountains that need to be turned on such that the entire path from the first position to the last position is covered with water. The input consists of two lines. The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of fountains. The second line contains n positive integers where the i-th integer (1 ≤ ri ≤ 100) represents the range of the i-th fountain. The output should be a single integer representing the minimum number of fountains needed to cover the entire path. **Example:** Input: 5 1 2 1 1 1 Output: 2 Explanation: Turning on the fountains at positions 2 and 4 (0-indexed) covers the entire path, so the minimum number of fountains required is 2.","solution":"def min_fountains(n, ranges): max_right = [0] * n for i in range(n): left = max(0, i - ranges[i]) right = min(n - 1, i + ranges[i]) max_right[left] = max(max_right[left], right) fountains_on = 0 current_end = 0 next_end = 0 i = 0 while i < n: fountains_on += 1 while i <= current_end: next_end = max(next_end, max_right[i]) i += 1 if next_end >= n - 1: break current_end = next_end return fountains_on"},{"question":"Some years ago, EcoBuild Inc., a construction company focusing on sustainable buildings, began a large project of setting up solar panels in a new residential area. To optimize energy generation, they decided to place solar panels in such a way that they receive maximum sunlight. The placement of each panel is represented as points on a 2D plane. The company installed n solar panels, but they want to evaluate the efficiency by calculating the maximum rectangular area that can fit under the panels when perceived from above (i.e., a skyline view). You are given the y-coordinates of each solar panel along the x-axis. The panels are aligned along the x-axis at unit distances, starting from x = 1 to x = n. Your task is to find the largest rectangle that can be formed in the skyline, where the height of each rectangle is determined by the y-coordinates of the panels. The first line contains a single integer n (1 ≤ n ≤ 100,000) – the number of solar panels. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100,000) – the heights of the solar panels when viewed from above. Print a single integer – the area of the largest rectangle that can be formed under the skyline. For example, consider the first example where n = 7 and the heights are [2, 1, 4, 5, 1, 3, 3]: 1. The largest rectangle has an area of 8 (formed by heights 4 and 5 over width 2).","solution":"def largestRectangleArea(heights): Given a list of heights representing the height of solar panels along the x-axis, return the area of the largest rectangle that can be formed under the skyline. stack = [] max_area = 0 heights.append(0) # Append a height of 0 at the end to ensure the stack is emptied at the end for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: h = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * width) stack.append(i) heights.pop() # Remove the appended 0 before returning result return max_area"},{"question":"Given a list of `n` integers, write a function that determines whether the list is a valid permutation of numbers from `1` to `n`. A valid permutation contains each number from `1` to `n` exactly once. Implement a function `is_valid_permutation(nums: List[int]) -> bool` to perform this check. The function should return `True` if `nums` is a valid permutation, and `False` otherwise. # Input - The function receives a single argument `nums`, which is a list of `n` integers. # Output - The function should return a boolean: `True` if the list is a valid permutation, otherwise `False`. # Examples ```python assert is_valid_permutation([1, 2, 3, 4, 5]) == True assert is_valid_permutation([5, 4, 3, 2, 1]) == True assert is_valid_permutation([1, 2, 2, 4, 5]) == False assert is_valid_permutation([1, 3, 4, 5]) == False ``` # Note - The list `nums` will always contain non-negative integers. - You need to ensure that the list contains all integers from `1` to `n` exactly once without any duplicates or omissions.","solution":"def is_valid_permutation(nums): Checks if the list nums is a valid permutation of numbers from 1 to n. n = len(nums) expected_set = set(range(1, n + 1)) return set(nums) == expected_set"},{"question":"You are given a weighted undirected graph with `n` vertices and `m` edges. Each edge has an associated weight that can be either positive or negative. Your task is to determine if there exists a cycle in the graph that has a total weight less than zero. # Input - The first line contains two integers, `n` and `m` (1 le n le 10^3, 0 le m le 5 ast 10^3) — the number of vertices and the number of edges in the graph, respectively. - The next `m` lines describe the edges. Each edge is represented by three integers `u`, `v`, and `w` (1 le u, v le n, u neq v, -10^3 le w le 10^3), which indicate that there is an edge between vertices `u` and `v` with weight `w`. Note that the graph might have multiple edges between the same pair of vertices. # Output Print `YES` if there is a cycle with a total weight less than zero, otherwise print `NO`. # Example Input ``` 3 3 1 2 4 2 3 -10 3 1 3 ``` Output ``` YES ``` Input ``` 4 4 1 2 3 2 3 4 3 4 5 4 1 1 ``` Output ``` NO ``` # Notes In the first example, there is a cycle between vertices 1 → 2 → 3 → 1 with weights 4, -10, and 3 respectively. The total weight of this cycle is 4 + (-10) + 3 = -3, which is less than zero. Hence, the answer is \\"YES\\". In the second example, there are no cycles with a total weight less than zero. Therefore, the answer is \\"NO\\".","solution":"def find_negative_cycle(n, m, edges): Function to find if there\'s a negative weight cycle in the graph. :param n: Number of vertices :param m: Number of edges :param edges: List of edges represented as tuples (u, v, w) :return: \'YES\' if there is a cycle with a total weight less than zero, otherwise \'NO\' from collections import defaultdict import sys # Use Bellman-Ford algorithm to detect negative cycle inf = sys.maxsize # Initialize distance for all vertices distance = [inf] * (n + 1) distance[1] = 0 # Relax all edges |V| - 1 times for _ in range(n - 1): for u, v, w in edges: if distance[u] != inf and distance[u] + w < distance[v]: distance[v] = distance[u] + w # Check for negative weight cycle for u, v, w in edges: if distance[u] != inf and distance[u] + w < distance[v]: return \\"YES\\" return \\"NO\\" # Example usage: # n = 3 # m = 3 # edges = [(1, 2, 4), (2, 3, -10), (3, 1, 3)] # print(find_negative_cycle(n, m, edges)) # Should print \\"YES\\""},{"question":"Lily has recently started learning about data structures and is particularly intrigued by binary search trees (BST). She has decided to practice by implementing a more advanced feature: finding the k-th smallest element in a BST. A binary search tree is a binary tree in which each node has at most two children, often referred to as the left and right children. Each node contains a value, and the value in each node is greater than the values of all nodes in its left subtree and less than the values of all nodes in its right subtree. The task Given the root of a binary search tree and an integer k, implement a function that returns the k-th smallest element in the tree. You can assume that k is always valid, i.e., 1 ≤ k ≤ number of nodes in the BST. Input - The root of the binary search tree (will be provided as part of the test cases). - An integer k. Output - An integer representing the k-th smallest element in the BST. Example Consider the following BST: 5 / 3 8 / 2 4 9 For k = 3, the k-th smallest element is 4. For k = 1, the k-th smallest element is 2. Function Signature def kth_smallest_element(root: TreeNode, k: int) -> int: Constraints - The number of nodes in the tree is in the range [1, 10^4]. - The values of the nodes are unique and are in the range [1, 10^5]. - You may assume that k is valid. Considerations - You should aim to optimize for time and space complexity. - You might want to use an in-order traversal to effectively find the k-th smallest element since it visits nodes in ascending order.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def kth_smallest_element(root: TreeNode, k: int) -> int: Returns the k-th smallest element in the BST. def in_order_traversal(node): if node is None: return [] return in_order_traversal(node.left) + [node.value] + in_order_traversal(node.right) elements = in_order_traversal(root) return elements[k - 1]"},{"question":"You are given two integers n and k, and an array a_1, a_2, ldots, a_n. You need to transform the array in such a way that the difference between the maximum and minimum element in any subarray of length k is minimized. Formally, you should find an array b_1, b_2, ldots, b_n, such that the sets of elements of arrays a and b are equal (it is equivalent to array b can be found as an array a with some reordering of its elements) and max_{i=1}^{n-k+1} left( max(b_i, b_{i+1}, ldots, b_{i+k-1}) - min(b_i, b_{i+1}, ldots, b_{i+k-1}) right) is minimized. The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 100, 1 le k le n). The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100). For each test case print an array b_1, b_2, ldots, b_n — the optimal reordering of a_1, a_2, ldots, a_n, so the maximum difference between the maximum and minimum element in any subarray of length k is minimized. If there exist multiple optimal answers you can find any. In the first test case, one of the possible optimal reordering of the array is:","solution":"def transform_array(n, k, a): Transform the array such that the difference between the maximum and minimum element in any subarray of length k is minimized. a.sort() return a def process_test_cases(test_cases): results = [] for n, k, a in test_cases: results.append(transform_array(n, k, a)) return results"},{"question":"In a programming language similar to Python, there exists a special data structure called a \\"referential array.\\" A referential array is a one-dimensional array that can hold integers or references to other referential arrays. A reference cycle occurs if there is a sequence of references that eventually points back to the same referential array, forming a loop. You are tasked with writing a function that checks whether a given referential array contains a reference cycle. # Function Signature ```python def has_cycle(arr: List[Union[int, \'List\']]) -> bool: pass ``` # Input - `arr`: A list that represents the referential array. - Each element of `arr` is either an integer or another referential array. # Output - Return a boolean value: - `True` if there exists a reference cycle. - `False` otherwise. # Constraints - The length of any referential array will not exceed 100. - Integers will be in the range ([-10^3, 10^3]). - Referential arrays do not contain direct references to integers. They can only reference other referential arrays. - The depth of nested references won\'t exceed 20 levels. # Example ```python # Example 1 arr1 = [1, 2, [3, arr1]] print(has_cycle(arr1)) # Output: True # Example 2 arr2 = [1, 2, [3, 4]] print(has_cycle(arr2)) # Output: False ``` # Note - In the first example, `arr1` contains a reference to itself, creating a reference cycle. - In the second example, `arr2` contains no such reference cycle.","solution":"from typing import List, Union def has_cycle(arr: List[Union[int, \'List\']], seen = None) -> bool: if seen is None: seen = set() if id(arr) in seen: return True seen.add(id(arr)) for element in arr: if isinstance(element, list): if has_cycle(element, seen): return True seen.remove(id(arr)) return False"},{"question":"In a small town, there is a series of n houses located on a straight street. Each house has a certain amount of candy stored in it. A person is planning to rob several houses along the street. However, due to heightened security, they must follow a rule: they cannot rob two consecutive houses. Given the amount of candy in each house, determine the maximum amount of candy the person can rob without triggering the alarms. The input consists of two lines: 1. The first line contains a single integer n (1 ≤ n ≤ 10000) — the number of houses. 2. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the amount of candy in each house. Output a single integer — the maximum amount of candy the person can rob. Example: Input: 6 3 2 5 10 7 8 Output: 21 Explanation: The optimal plan is to rob the houses with candy amounts 3, 5, and 13, as they are not consecutive and yield the maximum candy. Thus, the maximum amount of candy robbed is 3 + 5 + 13 = 21.","solution":"def max_candy_robbed(n, candies): if n == 0: return 0 elif n == 1: return candies[0] dp = [0] * n dp[0] = candies[0] dp[1] = max(candies[0], candies[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + candies[i]) return dp[-1] # Example usage: # print(max_candy_robbed(6, [3, 2, 5, 10, 7, 8]))"},{"question":"You are given a string `s` containing brackets of three types: round `()`, square `[]`, and curly `{}`. Your task is to determine whether the string `s` is a valid bracket sequence. A bracket sequence is considered valid if: 1. It is an empty string, 2. It consists of an opening bracket followed by a valid bracket sequence followed by a matching closing bracket, 3. It is the concatenation of two valid bracket sequences. The input contains a single string `s` (1 ≤ |s| ≤ 10^5) consisting of the characters \'(\', \')\', \'[\', \']\', \'{\', and \'}\'. Output \\"YES\\" if the string is a valid bracket sequence, otherwise output \\"NO\\". Here are some example input-output pairs: Example 1: Input: \\"{[()]}\\" Output: \\"YES\\" Example 2: Input: \\"{[(])}\\" Output: \\"NO\\" Example 3: Input: \\"({[{}]})\\" Output: \\"YES\\" Example 4: Input: \\"((()))[]{}\\" Output: \\"YES\\"","solution":"def is_valid_bracket_sequence(s: str) -> str: Determines if the input string `s` is a valid bracket sequence. Returns \\"YES\\" if it is valid, otherwise returns \\"NO\\". stack = [] matching_bracket = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in \\"([{\\": stack.append(char) elif char in \\")]}\\": if not stack or stack.pop() != matching_bracket[char]: return \\"NO\\" return \\"YES\\" if not stack else \\"NO\\""},{"question":"You are given a string consisting of lowercase English letters. You need to find the length of the longest substring that contains at most k distinct characters. A substring is a contiguous sequence of characters within a string. The problem must be solved in O(n) time complexity. **Input:** - The first line contains an integer k (1 ≤ k ≤ 26) — the number of distinct characters allowed. - The second line contains a string s (1 ≤ |s| ≤ 300,000) — the given string. **Output:** - Output the length of the longest substring that contains at most k distinct characters. **Example:** Input: ``` 2 eceba ``` Output: ``` 3 ``` _In the example, the longest substring with at most 2 distinct characters is \\"ece\\"._","solution":"def longest_substring_with_k_distinct_characters(k, s): Return the length of the longest substring that contains at most k distinct characters. from collections import defaultdict if k == 0: return 0 # Sliding window approach with two pointers left, right = 0, 0 max_length = 0 char_count = defaultdict(int) while right < len(s): char_count[s[right]] += 1 while len(char_count) > k: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length"},{"question":"You are given an array of n integers, and your task is to process several types of operations on this array. The operations are of the following two types: 1. Update: Write a value to a specific position in the array. 2. Range Sum: Compute the sum of values within a given range of indices in the array. The first line contains two integers n (1 ≤ n ≤ 10^5) — the number of elements in the array and q (1 ≤ q ≤ 10^5) — the number of operations. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9) — the initial values of the array. Each of the next q lines describes an operation and it can be one of the following: - \\"UPDATE i x\\": This operation means to update the value at position i in the array to x (1 ≤ i ≤ n, −10^9 ≤ x ≤ 10^9). - \\"SUM l r\\": This operation means to compute the sum of the elements in the array from index l to index r (1 ≤ l ≤ r ≤ n). Output the result of each \\"SUM\\" operation in a new line. Example: Input: 5 3 1 2 3 4 5 UPDATE 3 6 SUM 2 4 SUM 1 5 Output: 12 18 Explanation: 1. After updating the value at position 3 to 6, the array becomes [1, 2, 6, 4, 5]. 2. The sum of elements from index 2 to 4 is 2 + 6 + 4 = 12. 3. The sum of elements from index 1 to 5 is 1 + 2 + 6 + 4 + 5 = 18.","solution":"class ArrayOperations: def __init__(self, arr): self.arr = arr self.n = len(arr) self.build_segment_tree() def build_segment_tree(self): # Initialize segment tree with 0s self.seg_tree = [0] * (2 * self.n) # Populate the segment tree with the original array values for i in range(self.n): self.seg_tree[self.n + i] = self.arr[i] # Build the segment tree for i in range(self.n - 1, 0, -1): self.seg_tree[i] = self.seg_tree[2 * i] + self.seg_tree[2 * i + 1] def update(self, index, value): # Update the value at the leaf node pos = index + self.n self.seg_tree[pos] = value # Propagate the changes up to the root while pos > 1: pos //= 2 self.seg_tree[pos] = self.seg_tree[2 * pos] + self.seg_tree[2 * pos + 1] def range_sum(self, left, right): # Range sum query left += self.n right += self.n + 1 res = 0 while left < right: if left % 2: res += self.seg_tree[left] left += 1 if right % 2: right -= 1 res += self.seg_tree[right] left //= 2 right //= 2 return res def process_operations(n, q, arr, operations): ao = ArrayOperations(arr) result = [] for op in operations: parts = op.split() if parts[0] == \\"UPDATE\\": index = int(parts[1]) - 1 value = int(parts[2]) ao.update(index, value) elif parts[0] == \\"SUM\\": left = int(parts[1]) - 1 right = int(parts[2]) - 1 result.append(ao.range_sum(left, right)) return result"},{"question":"Anna and Bob are playing a game with a sequence of n integers. In each turn, a player selects any even number from the sequence and replaces it with its half (which will still be even). If a player cannot make a move (i.e., there are no even numbers left), they lose the game. Anna always goes first. Given the sequence of integers, determine who wins if both players play optimally. Input contains an integer n (1 ≤ n ≤ 10^5), representing the length of the sequence, followed by n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) representing the sequence. Print the name of the winner — \\"Anna\\" or \\"Bob\\" (without quotes). For example, in the first sample Anna will choose 8, replace it with 4, then Bob will choose 4, replace it with 2, and finally Anna will choose 2, replace it with 1. There are no more even numbers left and Bob has no move to make; thus, Anna wins. In the second sample, Anna will replace 14 with 7 and then Bob will replace 10 with 5, and Anna replaces 8 with 4. Bob then replaces 4 with 2, Anna replaces 2 with 1, and there are no even numbers left. Bob has no move to make, so Anna wins.","solution":"def find_winner(sequence): Determines the winner of the game between Anna and Bob. Parameters: sequence (list of int): The sequence of integers. Returns: str: The name of the winner (\\"Anna\\" or \\"Bob\\"). even_count = sum(1 for num in sequence if num % 2 == 0) if even_count % 2 == 1: return \\"Anna\\" else: return \\"Bob\\""},{"question":"You are given a string S, consisting of lowercase Latin letters, and an integer k. Your task is to determine the length of the longest substring of S such that there are at most k distinct characters in that substring. Write a function that takes the string S and the integer k as input and returns the length of the longest substring with at most k distinct characters. # Input - A string S (1 le |S| le 10^5) consisting of lowercase Latin letters. - An integer k (1 le k le |S|). # Output - An integer representing the length of the longest substring of S with at most k distinct characters. # Function Signature ```python def longest_substring_k_distinct(S: str, k: int) -> int: ``` # Example Example 1: - Input: `S = \\"eceba\\"`, `k = 2` - Output: `3` - Explanation: The substring `\\"ece\\"` has length 3 with only 2 distinct characters which is the longest possible. Example 2: - Input: `S = \\"aa\\"`, `k = 1` - Output: `2` - Explanation: The substring `\\"aa\\"` has length 2 with only 1 distinct character which is the longest possible. # Constraints - The function should run efficiently for large inputs, aiming for an optimal time complexity.","solution":"def longest_substring_k_distinct(S: str, k: int) -> int: from collections import defaultdict n = len(S) if k == 0 or n == 0: return 0 left = 0 right = 0 max_len = 0 char_count = defaultdict(int) distinct_count = 0 while right < n: if char_count[S[right]] == 0: distinct_count += 1 char_count[S[right]] += 1 while distinct_count > k: char_count[S[left]] -= 1 if char_count[S[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given a string, which represents a sentence consisting of words separated by spaces. Your task is to reverse the order of the words in the sentence without changing the position of any letter within a word. For example, if the input sentence is \\"hello world\\", the output should be \\"world hello\\". Constraints: - The input sentence will contain at least one word and at most 100 words. - The length of each word within the sentence will be between 1 and 10 characters. - The sentence will not contain leading or trailing spaces, and the words will be separated by a single space each. Input: A single line string representing the sentence. Output: A single line string with the words in reverse order. Example: Input: \\"this is a test\\" Output: \\"test a is this\\"","solution":"def reverse_sentence(sentence): Reverses the order of words in the given sentence. Parameters: sentence (str): The input sentence. Returns: str: A new sentence with the words in reverse order. words = sentence.split() reversed_words = words[::-1] return \\" \\".join(reversed_words)"},{"question":"To implement an efficient file restorer system for a file storage service, you are given access logs of deleted files and their corresponding restoration requests. Each log entry contains a timestamp and information about the files deleted or requested for restoration at that timestamp. Write a function that, given these logs, determines if all restoration requests can be successfully fulfilled. Files can only be restored if they were deleted previously and have not been restored since their deletion. **Input:** - An integer `n` representing the number of log entries (1 ≤ n ≤ 100,000). - An array `logs` of size `n` where each element is a tuple `(timestamp, log_type, file_id)`: - `timestamp` is an integer representing the time of the event. - `log_type` is a string which can be either `\\"delete\\"` or `\\"restore\\"`, indicating whether the file was deleted or a restoration was requested. - `file_id` is an integer representing the unique ID of the affected file (1 ≤ file_id ≤ 1,000,000). **Output:** Return a boolean value indicating whether all restoration requests can be fulfilled. **Example:** ```python def can_restore_all_files(n, logs): # Your code here # Example Usage: logs = [ (1, \\"delete\\", 1), (2, \\"delete\\", 2), (3, \\"restore\\", 1), (4, \\"restore\\", 2), (5, \\"delete\\", 3), (6, \\"restore\\", 3) ] print(can_restore_all_files(6, logs)) # Output: True logs = [ (1, \\"delete\\", 1), (2, \\"restore\\", 2), (3, \\"delete\\", 2), (4, \\"restore\\", 2) ] print(can_restore_all_files(4, logs)) # Output: False ``` **Explanation:** - In the first example, all files requested for restoration (file IDs 1, 2, and 3) were previously deleted and have not been restored more than once between their delete and restore events. - In the second example, there was a restore request for file ID 2 before it was deleted, making it impossible to fulfill that restore request.","solution":"def can_restore_all_files(n, logs): Determine if all restoration requests can be fulfilled based on the logs of file deletions and restoration requests. Args: n (int): number of log entries. logs (list): list of tuples with (timestamp, log_type, file_id). Returns: bool: True if all restoration requests can be fulfilled, False otherwise. deleted_files = set() for timestamp, log_type, file_id in logs: if log_type == \\"delete\\": deleted_files.add(file_id) elif log_type == \\"restore\\": if file_id not in deleted_files: return False deleted_files.remove(file_id) return True"},{"question":"Kathryn is planning a treasure hunt game for her friends. The participants need to collect keys to unlock chests, and each key can open one or more specific chests. The objective is to determine the minimum number of keys required to open all the chests. There are n chests and m keys. Each key can open one or more chests, and each chest can be opened by one or more keys. Kathryn wants to ensure all chests are opened using the minimum number of keys. The first line contains two integers n and m (1 ≤ n, m ≤ 22) — the number of chests and the number of keys. Each of the next m lines contains a list of integers where the first integer k_i denotes the number of chests the i-th key can open followed by k_i integers representing those chests. In the first line, print the minimum number of keys required to open all chests. In the second line, print the ids of the keys used to open all chests. If there are multiple solutions, you can output any of them. Example: Input: 5 3 2 1 2 2 2 3 3 3 4 5 Output: 2 1 3 In the first test case, using key 1 and key 3 will open all the chests.","solution":"def min_keys_to_open_all_chests(n, m, keys): from itertools import combinations all_chests = set(range(1, n+1)) key_sets = [set(key[1:]) for key in keys] # Try all combinations of keys, starting from the smallest set size for r in range(1, m+1): for combo in combinations(range(m), r): combined_keys = set() for i in combo: combined_keys.update(key_sets[i]) if combined_keys == all_chests: return r, [i+1 for i in combo] # +1 to convert from 0-index to 1-index return 0, [] def parse_input(input_lines): input_lines = input_lines.strip().split(\'n\') n, m = map(int, input_lines[0].split()) keys = [list(map(int, line.split())) for line in input_lines[1:]] return n, m, keys def treasure_hunt(input_data): n, m, keys = parse_input(input_data) num_keys, key_ids = min_keys_to_open_all_chests(n, m, keys) key_ids.sort() return num_keys, key_ids"},{"question":"You are given a grid of size n x m filled with integers. Your task is to find if there exists a subgrid (a contiguous rectangular part of the grid) whose sum of elements is exactly equal to a given integer k. Each subgrid is defined by its top-left and bottom-right corners in the grid. Write a function `find_subgrid_with_sum(n, m, grid, k)` that returns `True` if there exists at least one subgrid with the desired sum, and `False` otherwise. # Input: - An integer, `n`, the number of rows in the grid (1 ≤ n ≤ 100). - An integer, `m`, the number of columns in the grid (1 ≤ m ≤ 100). - A 2D list `grid`, where each element grid[i][j] is an integer representing the value at row i and column j of the grid (-100 ≤ grid[i][j] ≤ 100). - An integer `k`, representing the desired subgrid sum (-10000 ≤ k ≤ 10000). # Output: - A boolean value `True` if such a subgrid exists, `False` otherwise. # Example: ```python def find_subgrid_with_sum(n, m, grid, k): # Your code goes here n = 3 m = 3 grid = [ [1, 2, 1], [2, -1, 2], [3, 0, 1] ] k = 4 print(find_subgrid_with_sum(n, m, grid, k)) # Output: True k = 10 print(find_subgrid_with_sum(n, m, grid, k)) # Output: False ``` In the first example, the subgrid from (1,1) to (2,2) has the sum equal to 4. In the second example, there is no subgrid with a sum equal to 10.","solution":"def find_subgrid_with_sum(n, m, grid, k): def get_prefix_sum_2d(matrix): prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): prefix_sum[i][j] = ( grid[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] ) return prefix_sum prefix_sum = get_prefix_sum_2d(grid) for top in range(n): for left in range(m): for bottom in range(top, n): for right in range(left, m): subgrid_sum = ( prefix_sum[bottom + 1][right + 1] - prefix_sum[top][right + 1] - prefix_sum[bottom + 1][left] + prefix_sum[top][left] ) if subgrid_sum == k: return True return False"},{"question":"You are given a list of integers where every integer occurs exactly twice, except for one integer which occurs exactly once. Your task is to find the single integer that appears only once. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of integers in the list. The second line contains n space-separated integers, where each integer is between -10^6 and 10^6. Output Print the integer that appears exactly once. Example Input: 7 4 1 2 1 2 4 5 Output: 5","solution":"def find_single_number(nums): Returns the single integer that appears only once in the list. :param nums: List of integers :return: An integer appearing exactly once single_number = 0 for num in nums: single_number ^= num return single_number"},{"question":"A large amusement park consists of several attractions connected by walkways. Your task is to determine if there\'s a route from the entrance to various attractions and to find the shortest route if one exists. You will represent the park as an undirected graph with n nodes and m edges. Nodes represent attractions, and edges represent the walkways between them. Initially, you will be given the graph with n attractions and m walkways. After building the park, several tourists will have queries asking whether it is possible to reach a destination attraction from the entrance and if so, what is the shortest path to get there. The first line of the input contains two integers n and m (1 ≤ n ≤ 100,000; 1 ≤ m ≤ 200,000) — the number of attractions and the number of walkways. The next m lines contain pairs of integers u and v (1 ≤ u, v ≤ n) — denoting an undirected walkway connecting attractions u and v. The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries from tourists. Each of the next q lines contains two integers start and end (1 ≤ start, end ≤ n) — asking if there is a route from the attraction start to the attraction end, and if so, what is the shortest path length. For each query, output \\"YES length\\" (where length is the shortest path length) if there exists a path from start to end, otherwise output \\"NO\\".","solution":"from collections import deque, defaultdict def build_graph(n, edges): graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) return graph def bfs_shortest_path(graph, start, end): if start == end: return 0 visited = set() queue = deque([(start, 0)]) while queue: node, distance = queue.popleft() if node == end: return distance for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, distance + 1)) return -1 def process_queries(n, edges, queries): graph = build_graph(n, edges) results = [] for start, end in queries: distance = bfs_shortest_path(graph, start, end) if distance == -1: results.append(\\"NO\\") else: results.append(f\\"YES {distance}\\") return results"},{"question":"You are given a list of n integers representing the stock prices of a given company over n days. Your task is to determine the maximum possible profit you could have obtained by performing at most two transactions. For a single transaction, you must buy the stock on one day and sell it on another day in the future. However, you are allowed to perform at most two transactions, where the second transaction must be performed after the first one is completed, i.e., you cannot overlap the transactions. If no profit can be made, return 0. Function Signature: ```python def max_profit(prices: List[int]) -> int: ``` Input: - n (1 ≤ n ≤ 10^5) - an integer representing the number of days - prices (0 ≤ prices[i] ≤ 10^9) - a list of integers representing the stock prices over n days Output: - Return an integer representing the maximum possible profit by performing at most two transactions Example: ``` Input: n = 6 prices = [3, 3, 5, 0, 0, 3, 1, 4] Output: 6 Explanation: Buy on day 2 (price = 3) and sell on day 3 (price = 5), profit = 5-3 = 2. Then buy on day 5 (price = 0) and sell on day 8 (price = 4), profit = 4-0 = 4. Total profit = 2 + 4 = 6. ```","solution":"from typing import List def max_profit(prices: List[int]) -> int: if not prices: return 0 n = len(prices) if n == 1: return 0 left_profits = [0] * n right_profits = [0] * n # First transaction: max profit if we sell on or before i min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) left_profits[i] = max(left_profits[i-1], prices[i] - min_price) # Second transaction: max profit if we buy on or after i max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) right_profits[i] = max(right_profits[i+1], max_price - prices[i]) # Combine the two transactions max_total_profit = 0 for i in range(n): max_total_profit = max(max_total_profit, left_profits[i] + right_profits[i]) return max_total_profit"},{"question":"Master Li is a master tactician in Cyberland! Li needs to safely transfer a package from one end of a dangerous alley to the other. The alley is represented as a grid with dimensions N x M, where each cell may contain obstacles. The grid cells are either empty (\'.\') or contain obstacles (\'#\'). Li can move up, down, left, or right, but cannot move diagonally or pass through obstacles. Given the grid and the start and end points, determine the minimum number of steps required for Li to reach the destination. If it is not possible for Li to reach the destination, return -1. Input: - The first line contains two integers N and M, the dimensions of the grid (1 ≤ N, M ≤ 100). - The next N lines contain M characters each (\'.\' or \'#\'), representing the alley. - The following line contains four integers sr, sc, dr, dc (1 ≤ sr, sc, dr, dc ≤ 100), representing the row and column of the start position and the destination position, respectively. Output: - Print a single integer representing the minimum number of steps Li needs to take to reach the destination. If it is not possible to reach the destination, print -1. Example: Input: 5 5 ..... .#. ..... .#. ..... 1 1 5 5 Output: 8 Explanation: Li can move from the start position (1,1) to the destination (5,5) in 8 steps around the obstacles. If you try to move directly, it\'s blocked by obstacles. Note: - Assume that the top-left cell of the grid is (1,1) and the bottom-right cell is (N,M). - You can assume that both the start and destination cells are empty cells in all cases.","solution":"from collections import deque def min_steps(grid, N, M, sr, sc, dr, dc): # Convert from 1-based to 0-based indexes sr -= 1 sc -= 1 dr -= 1 dc -= 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right queue = deque([(sr, sc, 0)]) # (row, col, steps) visited = set() visited.add((sr, sc)) while queue: x, y, steps = queue.popleft() if x == dr and y == dc: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 def min_steps_from_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].strip().split()) grid = [list(lines[i + 1].strip()) for i in range(N)] sr, sc, dr, dc = map(int, lines[N + 1].strip().split()) return min_steps(grid, N, M, sr, sc, dr, dc)"},{"question":"You will receive 3 points for solving this problem. Lisa is working on a software to analyze different tasks and provide an optimized schedule to complete them. Each task takes a specific amount of time and cannot be interrupted. Lisa represented the tasks in an array, where each element represents the time duration of a task. Furthermore, Lisa can allot a \\"priority\\" to a task. When a priority is given to a task, Lisa can split the task into multiple parts, each with a duration of exactly one time unit. However, Lisa wants to minimize the number of tasks that have a priority assigned since it adds overhead to task management. Given an integer array `tasks` representing the duration of tasks and an integer `m` representing the maximum allowed duration for each task after potentially assigning priorities, help Lisa determine the minimum number of tasks that need to be assigned a priority to ensure that no task duration exceeds `m`. # Input The input consists of two lines: - The first line contains two integers `n` (1 ≤ n ≤ 100) and `m` (1 ≤ m ≤ 100), where `n` is the number of tasks and `m` is the maximum allowed duration for each task. - The second line contains `n` integers, representing the array `tasks` where the i-th integer (1 ≤ tasks[i] ≤ 100) is the duration of the i-th task. # Output The program should print a single integer representing the minimum number of tasks that need to be assigned a priority. # Example Input: ``` 5 2 3 6 2 4 8 ``` Output: ``` 4 ``` # Explanation In the above example, the maximum allowed duration for any task is 2. To comply: - Task with duration 3 needs to be split into two tasks of durations 2 and 1. - Task with duration 6 needs to be split into three tasks of duration 2 each. - Task with duration 2 is already compliant. - Task with duration 4 needs to be split into two tasks of duration 2 each. - Task with duration 8 needs to be split into four tasks of duration 2 each. Thus, 4 tasks need to be given priority to meet the criteria.","solution":"def min_prioritized_tasks(n, m, tasks): Returns the minimum number of tasks that need to be assigned a priority to ensure that no task duration exceeds a given maximum allowed duration. Parameters: n (int): The number of tasks m (int): The maximum allowed duration for each task tasks (list of int): The list of task durations Returns: int: The count of tasks that need to be assigned a priority priority_count = 0 for task in tasks: if task > m: priority_count += 1 return priority_count"},{"question":"You are given a list of integers where each integer represents the height of a tree. You are also given an integer `k`, which represents the maximum number of trees you are allowed to cut down. Your goal is to maximize the height of the shortest tree that remains after cutting down at most `k` trees. Write a function: ```python def maximize_shortest_tree(heights, k): # your code here ``` **Input:** - `heights` is a list of integers where each integer (`1 ≤ height ≤ 10^9`) represents the height of a tree. The length of the list does not exceed 100,000. - `k` is an integer (`0 ≤ k ≤ len(heights)`), representing the maximum number of trees you can cut down. **Output:** Return an integer representing the maximum possible height of the shortest tree after cutting down at most `k` trees. **Example:** ```python heights = [1, 3, 4, 7, 6, 5] k = 2 print(maximize_shortest_tree(heights, k)) # Output: 4 heights = [5, 9, 12, 14, 15] k = 1 print(maximize_shortest_tree(heights, k)) # Output: 9 ``` **Explanation:** In the first example, by cutting down the trees with heights 1 and 3, the remaining trees have heights 4, 7, 6, and 5. The shortest remaining tree has a height of 4 which is the maximum possible given that we can cut down at most 2 trees. In the second example, by cutting down the tree with height 5, the remaining tallest tree is 9, which is the maximum possible given that we can cut down at most 1 tree.","solution":"def maximize_shortest_tree(heights, k): Given a list of tree heights, and an integer k representing the number of trees we can cut down, this function maximizes the height of the shortest tree that remains after cutting down at most k trees. def can_achieve(min_height): Helper function to check if we can achieve a scenario where the shortest remaining tree has a height of at least `min_height`. cut_count = 0 for height in heights: if height < min_height: cut_count += 1 if cut_count > k: return False return True low, high = min(heights), max(heights) while low < high: mid = (low + high + 1) // 2 if can_achieve(mid): low = mid else: high = mid - 1 return low"},{"question":"In an alien language, letters are written as numbers from 0 to 25, where 0 represents \'a\', 1 represents \'b\', ..., and 25 represents \'z\'. You are given a string of lowercase Latin letters and you need to perform a series of operations to convert each letter to the number representing it. The resulting sequence of numbers must then be rotated k times to the right. For example, given the string \\"abc\\", it converts to the sequence [0, 1, 2]. If k = 1, after rotating the sequence once to the right, it becomes [2, 0, 1]. Write a function that takes a string of lowercase Latin letters and an integer k, and returns the sequence of numbers after k right rotations. If k is greater than the length of the sequence, you should consider rotations modulo the length of the sequence. Function Signature: ```python def rotate_sequence(s: str, k: int) -> List[int]: pass ``` # Input 1. A single string `s` containing only lowercase Latin letters (1 ≤ len(s) ≤ 10000). 2. An integer `k` (0 ≤ k ≤ 10000). # Output Return a list of integers representing the sequence of numbers after k right rotations. # Example Input: ``` s = \\"abc\\" k = 1 ``` Output: ``` [2, 0, 1] ``` Input: ``` s = \\"xyz\\" k = 2 ``` Output: ``` [24, 25, 23] ``` # Note In the first example, the string \\"abc\\" is converted to [0, 1, 2]. After 1 right rotation, it becomes [2, 0, 1]. In the second example, the string \\"xyz\\" is converted to [23, 24, 25]. After 2 right rotations, it becomes [24, 25, 23].","solution":"from typing import List def rotate_sequence(s: str, k: int) -> List[int]: Converts a string of lowercase Latin letters to their corresponding numbers and rotates the sequence k times to the right. # Step 1: Convert letters to numbers sequence = [ord(char) - ord(\'a\') for char in s] # Step 2: Calculate the effective number of rotations n = len(sequence) if n == 0: return sequence k = k % n # Step 3: Perform the rotation return sequence[-k:] + sequence[:-k]"},{"question":"You are given an n x n grid where each cell contains an integer representing the height of the cell. Your task is to determine if there exists a path from the top-left cell to the bottom-right cell, moving only up, down, left, or right, such that the absolute difference in height between any two consecutive cells in the path is at most D. Input: The first line contains two integers n and D (1 ≤ n ≤ 100, 1 ≤ D ≤ 1000), where n is the size of the grid and D is the maximum allowed difference in height for consecutive cells in the path. The next n lines contain n integers each, describing the height values of the cells in the grid. Output: Output \\"YES\\" if such a path exists, otherwise output \\"NO\\". Example: Input: 3 2 1 3 5 2 8 3 4 6 1 Output: YES Explanation: One possible path is (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (2, 2) -> (2, 3) -> (3, 3). The maximum height difference in every consecutive step of this path is 2, which is within the allowed difference D. Hence, the output is \\"YES\\".","solution":"def is_path_possible(n, D, grid): from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < n queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == n - 1 and y == n - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: if abs(grid[nx][ny] - grid[x][y]) <= D: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"You are given an array of integers and an integer value k. Your task is to determine if there are two distinct indices i and j in the array such that their absolute difference is at most k and the difference of their values is exactly 1. Formally, given an array of integers a and an integer k, you need to determine if there exist indices i and j (0 leq i, j < n, i neq j) such that: 1. |i - j| leq k, 2. |a[i] - a[j]| = 1. If such indices exist, return \\"YES\\", otherwise return \\"NO\\". # Input Format: - The first line contains two integers n and k (1 leq n leq 10^5, 1 leq k leq n) — the number of elements in the array and the maximum allowed absolute difference between the indices. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. # Output Format: - Print \\"YES\\" if there exist such indices, otherwise print \\"NO\\". # Sample Input: ``` 5 2 1 2 3 4 5 ``` # Sample Output: ``` YES ``` # Explanation: In the sample input, we can select indices i = 0 and j = 1 (1-based indices: 1 and 2) because the absolute difference |i - j| = 1 (which is less than or equal to k = 2) and the values a[i] = 1 and a[j] = 2 have exactly a difference of 1. Thus, the answer is \\"YES\\".","solution":"def check_indices(n, k, a): for i in range(n): for j in range(max(0, i - k), min(n, i + k + 1)): if i != j and abs(a[i] - a[j]) == 1: return \\"YES\\" return \\"NO\\""},{"question":"Sam is organizing a book club and he wants to record which members have read which books. There are always three club members: Jamie, Pat, and Taylor. Each meeting, Sam records which member read which book. However, Sam suspects there might be mistakes in his records, as a member can read up to one book per meeting and two members should never record reading the same book simultaneously. Help him verify if his records are consistent. You will be given the number of meetings and a list of tuples representing the reading records for each meeting. Each tuple contains three integers which are either 0 or 1, indicating if Jamie, Pat, and Taylor read the book respectively. A value of 1 means that the member read the book and a value of 0 means that they did not read the book. Ensure that no book is read by more than one member in a given meeting. The first line contains one integer n (1 ≤ n ≤ 100) — the number of meetings. Then n lines follow, each containing three integers (either 0 or 1) separated by spaces, representing Jamie, Pat, and Taylor\'s reading record for each meeting. Print YES if the records are consistent. Otherwise print NO. Example: Input: 4 1 0 0 0 1 0 1 1 0 0 0 1 Output: NO Explanation: In the third meeting, both Jamie and Pat are recorded as having read the same book, which makes the record inconsistent. Input: 3 1 0 0 0 1 0 0 0 1 Output: YES Explanation: Each reading record is valid, as no two members are recorded as having read the same book in a simultaneous meeting.","solution":"def verify_book_club_records(n, records): Verifies if the book club records are consistent. Args: n (int): Number of meetings. records (list of tuples): List of tuples where each tuple represents the reading record of Jamie, Pat, and Taylor for each meeting. Returns: str: \\"YES\\" if records are consistent, otherwise \\"NO\\". for record in records: if sum(record) > 1: return \\"NO\\" return \\"YES\\""},{"question":"You are responsible for managing a fleet of drones delivering packages within a city. Each drone can carry only one package at a time. Consider the city as a rectangular grid of `w` streets and `h` avenues with `w * h` intersections. The streets are numbered from `1` to `w`, and the avenues from `1` to `h`. Each drone can move either horizontally or vertically to an adjacent intersection in one time tick. Any number of drones can occupy the same intersection. At moment `0`, you are given the initial positions of `n` drones: `(x1, y1)`, `(x2, y2)`, ..., `(xn, yn)`. The number of drones is fixed during the entire simulation. Additionally, there are `m` packages to be delivered. Each package has a pickup location and a drop-off location, along with a specific time when the package becomes available for pickup. Each `i-th` package is described by four integers: the time `ti`, the pickup location `(pxi, pyi)`, and the drop-off location `(dxi, dyi)`. Your task is to deliver all the packages as quickly as possible by providing movement commands to the drones. For each given command, a drone should either move to an adjacent intersection or pick up/drop off the package if it is at the appropriate location. Each command for a single drone consists of three integers `(d, a, b)`, meaning that the drone `d` should execute action `a` at the location `(pxi, pyi)`. Here, `a` can be: - `0`: Move horizontally (left or right) if necessary - `1`: Move vertically (up or down) if necessary - `2`: Pick up the package - `3`: Drop off the package The simulation follows these steps: 1. Read the city\'s dimensions `w` and `h`. 2. Read the number of drones `n` and their initial locations. 3. Initialize and print the initial commands for the drones. 4. For each package order: - Suspend the current commands. - Provide new commands for the drones. - Print the new commands. The simulation ends when all packages are delivered and all commands are completed. The input format will be as follows: ``` w h n x1 y1 x2 y2 ... xn yn m t1 pxi pyi dxi dyi t2 pxi pyi dxi dyi ... tm pxi pyi dxi dyi ``` The output format will be: ``` n d command_count (a1, b1) (a2, b2) ... am bm ``` Example: ``` Input: 5 5 3 1 1 2 2 3 3 3 1 2 2 4 5 3 3 3 1 1 5 1 1 5 5 Output: 3 1 2 0 2 2 1 2 2 2 3 0 3 3 1 3 3 3 2 0 1 1 1 1 1 ``` In this example, read the dimensions of the city and the initial positions of the drones. Then, for the given time `1`, the first package located at coordinates `(2,2)`, the appropriate drone executes the commands to move there and pick it up, then move it to the drop-off location `(4,5)`. Similarly, process subsequent package deliveries after completing the previous ones.","solution":"def manage_drones(w, h, n, drones, m, packages): commands = [] for i in range(m): ti, pxi, pyi, dxi, dyi = packages[i] # Find the closest available drone to the pickup location. closest_drone = -1 min_distance = float(\'inf\') for j in range(n): x, y = drones[j] distance = abs(x - pxi) + abs(y - pyi) if distance < min_distance: min_distance = distance closest_drone = j commands.append((closest_drone, [ (0, pxi), (1, pyi), (2, pxi, pyi), (0, dxi), (1, dyi), (3, dxi, dyi) ])) # Move the drone to the drop-off location drones[closest_drone] = (dxi, dyi) return commands"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the length of the longest subsequence such that no two characters in the subsequence are adjacent in the original string. A subsequence is derived by deleting some or no characters from the string without changing the order of the remaining characters. For example, for the string \\"abcde\\", the longest such subsequence is \\"ace\\" or \\"bdf\\", both of which have length 3. The input consists of a single string s (1 le |s| le 1000000). Output the length of the longest subsequence such that no two characters are adjacent in the original string. In the first example, for the string \\"abac\\", the longest subsequence with no two adjacent characters is \\"ac\\", with a length of 2. In the second example, for the string \\"bbcccdddd\\", the longest such subsequence is \\"bcbdd\\" or \\"bcddd\\", with a length of 5.","solution":"def longest_non_adjacent_subsequence_length(s): Returns the length of the longest subsequence such that no two characters in the subsequence are adjacent in the original string. # The rough idea here: Without considering edge-cases initially, # if we take every other character from the string, that would be a non-adjacent subsequence. # For example, if we have a string of length n, half of them can be taken in the manner described. return (len(s) + 1) // 2 # Always rounds up for odd lengths"},{"question":"Given a binary string s of length n, you can perform the following operation any number of times: Select two consecutive characters in the string and if they are different, change them to the same character (either both \'0\' or both \'1\'). Your goal is to make the string consist of only one type of character (\'0\' or \'1\') using the minimum number of operations. Determine the minimum number of operations required to achieve this goal for each test case. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100). For each test case, the first line contains the length of the string n (1 le n le 10^5) and the second line contains the binary string s of length n. Print the minimum number of operations required for each test case, separated by a newline. **Example:** Input: ``` 3 3 010 4 1110 5 11000 ``` Output: ``` 1 1 1 ``` **Explanation:** - In the first test case, you can change the second character \'1\' to \'0\' in one operation to get \\"000\\" which consists only of \'0\'. - In the second test case, you can change the last character \'0\' to \'1\' in one operation to get \\"1111\\" which consists only of \'1\'. - In the third test case, you can change the second character \'1\' to \'0\' in one operation to get \\"10000\\" which consists only of \'0\'.","solution":"def min_operations_to_uniform_string(test_cases): results = [] for n, s in test_cases: operation_count = 0 for i in range(1, n): if s[i] != s[i - 1]: operation_count += 1 results.append(operation_count // 2 + operation_count % 2) return results def process_input(raw_input): lines = raw_input.strip().split(\'n\') t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) s = lines[index + 1] test_cases.append((n, s)) index += 2 return test_cases"},{"question":"Write a function that trims a space-separated sentence to a specified length. Given an input sentence and a maximum length, cut words from the end of the sentence such that the remaining sentence does not exceed the maximum length. If the entire sentence is shorter than or equal to the specified length, return it unchanged. Words are separated by a single space, and you must not break any word nor rearrange them. For example, given an input sentence \\"The quick brown fox jumps over the lazy dog\\" and a maximum length 16, the function should return \\"The quick brown\\". Function signature: ```python def trim_sentence(sentence: str, max_length: int) -> str: ``` Input: - `sentence`: A string containing the sentence, consisting of words separated by single spaces. The sentence contains at most 10^4 characters. - `max_length`: An integer representing the maximum length of the returned sentence (1 <= max_length <= 10^4). Output: - A string representing the trimmed sentence which is at most `max_length` characters long. Examples: 1. `trim_sentence(\\"The quick brown fox jumps over the lazy dog\\", 16)` returns `\\"The quick brown\\"` 2. `trim_sentence(\\"Hello world\\", 5)` returns `\\"\\"` 3. `trim_sentence(\\"A smaller example\\", 20)` returns `\\"A smaller example\\"` 4. `trim_sentence(\\"Python programming is fun\\", 18)` returns `\\"Python programming\\"`","solution":"def trim_sentence(sentence: str, max_length: int) -> str: if len(sentence) <= max_length: return sentence words = sentence.split() trimmed_sentence = \\"\\" for word in words: if len(trimmed_sentence) + len(word) + (1 if trimmed_sentence else 0) > max_length: break trimmed_sentence += (\\" \\" if trimmed_sentence else \\"\\") + word return trimmed_sentence"},{"question":"Alice is very fond of numbers and patterns. Recently, she got fascinated by a special sequence of integers. She defined a sequence of integers (S) of length (n) as \\"balanced\\" if its elements can be divided into two non-empty contiguous subsequences (A) and (B) (i.e. ( S = A cup B )) such that the sum of elements in (A) is equal to the sum of elements in (B). Alice wants to know if a given sequence is balanced. If it is, she wants to find the indices where the sequence can be split to form the two subsequences (A) and (B). Given a sequence of integers (S), your task is to determine if the sequence is balanced. If it is, output two integers (i) and (j) (1 ≤ i < j ≤ n) representing the indices that divide the sequence into two subsequences (A = S[1..i]) and (B = S[i+1..j]) such that their sums are equal. If there are multiple possible answers, you may output any of them. If the sequence is not balanced, output \\"Not Balanced\\". # Input - The first line contains a single integer (n ) (2 ≤ ( n ) ≤ 100,000) — the length of the sequence. - The second line contains ( n ) integers ( S[1], S[2], ..., S[n] ) (1 ≤ ( S[i] ) ≤ 10^9) — the elements of the sequence. # Output - If the sequence is balanced, output two integers (i) and (j) representing the indices that divide the sequence into two subsequences with equal sums. - If the sequence is not balanced, output \\"Not Balanced\\". # Example Input 8 2 3 4 1 2 3 4 1 Output 4 8 In this example, one possible split is at indices 4 and 8, resulting in subsequences [2, 3, 4, 1] and [2, 3, 4, 1], both of which have the same sum (10).","solution":"def find_balanced_sequence(n, S): Determines if the given sequence S of length n can be divided into two non-empty contiguous subsequences A and B such that their sums are equal. Parameters: n (int): Length of the sequence S (list): List of integers representing the sequence Returns: tuple or str: A tuple of two integers representing indices (i, j) if the sequence is balanced, otherwise \\"Not Balanced\\" total = sum(S) left_sum = 0 for i in range(n - 1): left_sum += S[i] if left_sum * 2 == total: return (i + 1, n) # (i + 1) is the end of the first subsequence A and n is the end index of S return \\"Not Balanced\\""},{"question":"A software company has a loyalty program for its customers. Customers earn rewards based on their spending in a given month. The company wants to ensure that customers who spend more are rewarded appropriately. However, there\'s a twist: The rewards are calculated in a way that higher spending yields diminishing returns after a certain threshold. The rewards are calculated as follows: - For spending up to a certain threshold `T1`, customers get `R1` points for every dollar spent. - For spending between threshold `T1` and another higher threshold `T2`, customers get `R2` points for every additional dollar spent beyond `T1`. - For spending beyond `T2`, customers get `R3` points for every additional dollar spent beyond `T2`. Given the monthly spend `S` of a customer, thresholds `T1` and `T2`, and reward rates `R1`, `R2`, and `R3`, calculate the total reward points for the customer. # Input - A single line containing six integers `S`, `T1`, `T2`, `R1`, `R2`, and `R3` where `(0 <= S <= 10^9, 0 <= T1 < T2 <= 10^9, 0 < R1, R2, R3 <= 10^9)`. # Output - A single integer representing the total reward points the customer earns. # Example Input: ``` 150 100 200 2 1 0.5 ``` Output: ``` 300 ``` In this example: - For the first 100 of spending, the customer earns 2 points per dollar: 100 * 2 = 200 points. - For the next 50 of spending up to 150, the customer earns 1 point per dollar: 50 * 1 = 50 points. - Spending above 200 is not considered as `S` is only 150. Thus, the total reward points are 200 + 50 = 250.","solution":"def calculate_rewards(S, T1, T2, R1, R2, R3): total_reward_points = 0 if S <= T1: total_reward_points = S * R1 elif S <= T2: total_reward_points = T1 * R1 + (S - T1) * R2 else: total_reward_points = T1 * R1 + (T2 - T1) * R2 + (S - T2) * R3 return total_reward_points"},{"question":"**Bob is working on a new project and needs to devise a sequence generator to help create strings for testing his software. He wants to generate strings of length exactly k from a given set of n lowercase alphabets, with certain constraints. The strings must adhere to the following rules:** 1. The string must contain exactly k characters. 2. Each character in the string can only be from the given subset of n lowercase alphabets. 3. No two consecutive characters in the string can be the same. **Given n and k, determine the number of valid strings that can be generated. Since the result can be quite large, return the answer modulo 1000000007 (10^9 + 7).** **Input:** - The first line contains two space-separated integers n and k (1 ≤ n ≤ 26, 1 ≤ k ≤ 1000). - The second line contains a string of n distinct lowercase alphabets. **Output:** - Output a single integer representing the number of valid strings of length k modulo 1000000007. **Example:** Input: ``` 3 2 abc ``` Output: ``` 6 ``` **Explanation:** - The valid strings are: \\"ab\\", \\"ac\\", \\"ba\\", \\"bc\\", \\"ca\\", \\"cb\\".","solution":"def count_valid_strings(n, k, alphabets): MOD = 1000000007 if k == 1: return n dp = [0] * (k + 1) dp[1] = n dp[2] = n * (n - 1) % MOD for i in range(3, k + 1): dp[i] = ((n - 1) * dp[i - 1]) % MOD return dp[k]"},{"question":"The Kindergarten teacher has come up with a fun game for the children to learn basic programming and math. The game involves an enchanted garden with magical flowers. Each flower in the garden has a magical power that can manipulate numbers. The rules of the game are as follows: 1. The garden has `n` flower pots, each initially containing a single flower with some magical power. 2. A flower\'s magical power is represented by a positive integer. 3. The teacher gives the children a sequence of operations. Each operation can be of two types: - Add: Add a new flower with a specified magical power to a given pot. - Query: Calculate the maximum magical power of any flower in a given range of pots. An operation is represented by a tuple `(type, a, b)`, where `type` can be either \\"Add\\" or \\"Query\\". If the operation type is \\"Add\\", `a` is the pot number (1-indexed) and `b` is the magical power of the new flower. If the operation type is \\"Query\\", `a` and `b` represent the range of pot numbers (inclusive) over which the maximum magical power is to be calculated. The task is to perform the operations as described and print the result for each \\"Query\\" operation. The first line contains an integer `m` — the number of operations. The next `m` lines specify the operations in the order of their execution. Each line has the form \\"type a b\\". For the \\"Add\\" operation, append the new flower\'s magical power to the list of flowers in the specified pot. For the \\"Query\\" operation, find and return the maximum magical power among all flowers in the specified range of pots. # Example Input: ``` 5 Add 1 5 Add 2 7 Query 1 2 Add 1 10 Query 1 2 ``` Output: ``` 7 10 ``` # Explanation 1. Add flower with power 5 to pot 1. 2. Add flower with power 7 to pot 2. 3. Query the maximum power in pots 1 to 2. The maximum power is 7. 4. Add flower with power 10 to pot 1. 5. Query the maximum power in pots 1 to 2. The maximum power is 10.","solution":"def enchanted_garden(operations): garden = [[] for _ in range(1000)] # assuming at most 1000 pots for simplicity results = [] for operation in operations: op_type, a, b = operation if op_type == \\"Add\\": garden[a-1].append(b) # since pot numbers are 1-indexed elif op_type == \\"Query\\": max_power = float(\'-inf\') for i in range(a-1, b): if garden[i]: max_power = max(max_power, max(garden[i])) results.append(max_power) return results"},{"question":"ZS the Coder has a collection of strings and wants to modify them in a particular way. He wants to concatenate all the strings in such a way that the resulting string alternates between upper and lower case characters. The first character of the resulting string must be in upper case. You are given a list of strings, each consisting of lowercase English letters. Concatenate all the strings in the given order and modify the result to alternate between upper and lower case characters (starting with upper case). The first line of the input contains an integer n (1 ≤ n ≤ 1000) - the number of strings. Each of the next n lines contains a single string consisting of lowercase English letters. The total length of all strings combined will not exceed 100000 characters. Output the resulting modified string. **Example:** **Input:** ``` 3 hello world programming ``` **Output:** ``` HeLlOwOrLdPrOgRaMmInG ``` **Explanation:** The strings \\"hello\\", \\"world\\", and \\"programming\\" are concatenated to form \\"helloworldprogramming\\". The first character is converted to upper case, the second to lower case, the third to upper case, and so on, resulting in \\"HeLlOwOrLdPrOgRaMmInG\\".","solution":"def alternate_case_concatenation(strings): Concatenates list of strings and modifies the result to alternate between upper and lower case characters, starting with upper case. :param strings: List of input strings :return: Modified string with alternating case characters concatenated_string = \'\'.join(strings) result = [] for i, char in enumerate(concatenated_string): if i % 2 == 0: result.append(char.upper()) else: result.append(char.lower()) return \'\'.join(result)"},{"question":"You are given a positive integer n (1 ≤ n ≤ 10^9). Determine if there exists a pair of positive integers (a, b) such that the sum of their squares is equal to n (i.e., a^2 + b^2 = n). Input: A single integer, n. Output: Print \\"YES\\" if such a pair (a, b) exists, otherwise print \\"NO\\". Example 1: ``` Input: 5 Output: YES ``` Example 2: ``` Input: 3 Output: NO ```","solution":"import math def sum_of_squares(n): Determines if there exists a pair of positive integers (a, b) such that a^2 + b^2 = n. for a in range(1, int(math.isqrt(n)) + 1): b_square = n - a**2 b = int(math.isqrt(b_square)) if b > 0 and b * b == b_square: return \\"YES\\" return \\"NO\\""},{"question":"You are given a sequence of integers a_1, a_2, ldots, a_n and an integer k. You need to perform exactly k operations on this sequence to maximize the sum of the sequence. Each operation consists of choosing any element a_i (1 le i le n) and incrementing it by 1. Find the maximum possible sum of the sequence after performing exactly k operations. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 1000). The description of the test cases follows. Each test case consists of two lines. The first line contains two integers n and k (1 le n le 100, 1 le k le 100). The second line contains n integers a_1, a_2, ldots, a_n (-10^4 le a_i le 10^4). Print the maximum possible sum of the sequence after performing exactly k operations for each test case. Example: Input: 2 3 5 1 2 3 4 3 -1 0 2 1 Output: 11 5 Explanation: In the first test case, we can increment the element 3 by 5, yielding the sequence [1, 2, 8] with a sum of 11. In the second test case, we can increment the element 2 by 3, yielding the sequence [-1, 0, 5, 1] with a sum of 5.","solution":"def maximize_sum(t, cases): results = [] for case in cases: n, k = case[\\"nk\\"] a = case[\\"a\\"] # Find and sum the highest \'n\' elements after adding k a.sort() max_sum = sum(a) + k results.append(max_sum) return results # Read input def read_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) cases = [] index = 1 for _ in range(t): n, k = map(int, lines[index].split()) a = list(map(int, lines[index + 1].split())) cases.append({\\"nk\\": (n, k), \\"a\\": a}) index += 2 return t, cases # Example usage input_str = 2 3 5 1 2 3 4 3 -1 0 2 1 t, cases = read_input(input_str) results = maximize_sum(t, cases) for res in results: print(res)"},{"question":"You are given two lists. The first list contains n integers representing the prices of n different items in a store, and the second list contains n strings representing the names of those items in corresponding order. Your task is to sort the items based on their prices in non-decreasing order. If two items have the same price, maintain their original relative order from the input. The first line contains a positive integer n (1 ≤ n ≤ 5000) — the number of items. The second line contains n integers — the prices of the items. The prices are non-negative integers not exceeding (10^6). The third line contains n strings — the names of the items. Each name is a non-empty string consisting of lowercase Latin letters, and its length does not exceed 10. Print n lines, each containing an item name sorted based on the non-decreasing order of their prices.","solution":"def sort_items(prices, names): Sort items based on their prices in non-decreasing order. If two items have the same price, maintain their original relative order from the input. Args: prices (list of int): The prices of the items. names (list of str): The names of the items. Returns: list of str: Sorted list of item names based on the non-decreasing order of their prices. items = list(zip(prices, names)) sorted_items = sorted(items, key=lambda x: x[0]) sorted_names = [item[1] for item in sorted_items] return sorted_names"},{"question":"A traveler wants to explore a certain country. The country has n cities and m one-way roads connecting them. The traveler wants to visit exactly three distinct cities in such a way that the total distance traveled is minimized. The traveler can start from any city and end in any city but must visit exactly three different cities. You are tasked with finding the three cities and the order in which the traveler should visit them to minimize the total travel distance. The paths between the cities are assumed to be the shortest paths. Additionally, it is guaranteed that a valid travel plan always exists. Given integers n and m (3 ≤ n ≤ 2000, 2 ≤ m ≤ 4000) — the number of cities and the number of one-way roads, followed by m pairs of integers ui, vi (1 ≤ ui, vi ≤ n) representing a one-way road from city ui to city vi. Output three integers representing the order of cities the traveler should visit to minimize their total travel distance. If there are multiple solutions, print any of them. # Input - The first line of the input contains two integers, n and m. - Each of the next m lines contains two integers ui and vi, representing a one-way road from city ui to city vi. # Output - Output three integers — the numbers of the cities the traveler should visit, in the order they should be visited, to minimize the total travel distance. # Example Input ``` 5 6 1 2 2 3 3 4 4 5 1 3 2 4 ``` Output ``` 1 2 3 ``` or ``` 2 3 4 ``` # Explanation In the given example, the traveler can start from city 1, go to city 2, and then to city 3 with a minimal distance, or start from city 2, go to city 3, and then to city 4, ensuring the shortest travel distance with three different cities.","solution":"import sys import heapq from collections import defaultdict def floyd_warshall(n, graph): dist = [[sys.maxsize] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u in range(n): for v in graph[u]: dist[u][v] = 1 for k in range(n): for i in range(n): for j in range(n): if dist[i][k] < sys.maxsize and dist[k][j] < sys.maxsize: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) return dist def minimize_travel_distance(n, m, roads): graph = defaultdict(list) for u, v in roads: graph[u-1].append(v-1) dist = floyd_warshall(n, graph) min_dist = sys.maxsize result = [] for i in range(n): for j in range(n): if i != j: for k in range(n): if i != k and j != k: if dist[i][j] != sys.maxsize and dist[j][k] != sys.maxsize: total_dist = dist[i][j] + dist[j][k] if total_dist < min_dist: min_dist = total_dist result = [i+1, j+1, k+1] return result def find_minimal_path(n, m, roads): minimal_path = minimize_travel_distance(n, m, roads) return minimal_path"},{"question":"You are given an array of integers where the absolute difference between any two consecutive elements is 1. You are to determine the maximum possible value within this array. For example, if the array is [2, 1, 0, 1, 2, 3, 4], the maximum value is 4. **Input:** - The first line contains a single integer n (1 ≤ n ≤ 10^5) - the number of elements in the array. - The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) - the elements of the array. **Output:** - Print a single integer - the maximum value in the array. **Example:** **Input:** ``` 7 2 1 0 1 2 3 4 ``` **Output:** ``` 4 ```","solution":"def find_max(arr): Returns the maximum value in the given array. return max(arr)"},{"question":"Given a string s, return the length of the longest palindromic substring. # Example: Input: \\"babad\\" Output: 3 Explanation: The answer is \\"bab\\", which has a length of 3. Note that \\"aba\\" is also a valid answer. # Constraints: - 1 <= s.length <= 1000 - s consists of only digits and English letters","solution":"def longest_palindromic_substring(s): Returns the length of the longest palindromic substring in s. :param s: String input :type s: str :return: Length of the longest palindromic substring :rtype: int if not s: return 0 n = len(s) longest = 1 # Create a DP table to store the palindrome status dp = [[False] * n for _ in range(n)] for i in range(n): dp[i][i] = True # Every single character is a palindrome start = 0 for length in range(2, n+1): # substring lengths from 2 to n for i in range(n - length + 1): j = i + length - 1 if length == 2: dp[i][j] = (s[i] == s[j]) else: dp[i][j] = (s[i] == s[j]) and dp[i+1][j-1] if dp[i][j] and length > longest: longest = length start = i return longest"},{"question":"Martha has an array of n integers and she wants to transform it into a sorted array in non-decreasing order by performing a series of operations. In one operation, she can choose any prefix of the array and reverse it. Given the array of integers, determine the minimum number of operations required to sort the array in non-decreasing order. The first line contains a single integer n (1 ≤ n ≤ 100), the number of integers in the array. The second line contains n space-separated integers a_i (-10^9 ≤ a_i ≤ 10^9), representing the elements of the array. Output the minimum number of operations required to sort the array. Example: Input: 5 3 2 1 4 5 Output: 1 Explanation: Reversing the prefix [3, 2, 1] results in the array [1, 2, 3, 4, 5], which is sorted in non-decreasing order. Hence, only 1 operation is needed.","solution":"def min_operations_to_sort(n, arr): Returns the minimum number of operations required to sort the array in non-decreasing order by reversing any prefix of the array. sorted_arr = sorted(arr) for i in range(n): if arr[:i + 1] == sorted_arr[:i + 1]: return 1 return 1"},{"question":"Given n and n integers, output the number of distinct integers. Input The first line contains a single integer n (1≤n≤1000) — the number of integers. The second line contains n integers separated by space. Output Output a single integer representing the count of distinct integers from the input. Example Input: 5 1 2 2 3 4 Output: 4 Explanation There are four distinct integers in the input: 1, 2, 3, and 4.","solution":"def count_distinct_integers(n, numbers): Returns the number of distinct integers from the input list of integers. Parameters: n (int): The number of integers. numbers (list of int): The list of integers. Returns: int: The number of distinct integers. # Convert the numbers list to a set to remove duplicates, and return its length return len(set(numbers))"},{"question":"You are given a city with N intersections and M bi-directional roads connecting those intersections. Each road has a certain length associated with it. Your task is to find the shortest route from a starting intersection S to a destination intersection D. If there are multiple routes with the same shortest length, you only need to find one of them. The first line of the input contains three integers N, M, and Q (1 ≤ N, M ≤ 2000, 1 ≤ Q ≤ 500), where Q is the number of queries. The next M lines each contain three integers u, v, and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 1000) representing a bi-directional road between intersections u and v with length w. The next Q lines each contain two integers S and D (1 ≤ S, D ≤ N) for which you must find the shortest route from S to D. Output Q lines. For each query, print the length of the shortest route from S to D. If there is no route between S and D, print \\"NO PATH\\". Note that the queries are independent of each other, and the graph may not be fully connected.","solution":"import heapq from typing import List, Tuple, Union def dijkstra(graph: List[List[Tuple[int, int]]], start: int) -> List[Union[int, float]]: N = len(graph) distances = [float(\'inf\')] * N distances[start] = 0 priority_queue = [(0, start)] # (distance, vertex) while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distances[u]: continue for weight, v in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) return distances def find_shortest_routes(N: int, M: int, Q: int, roads: List[Tuple[int, int, int]], queries: List[Tuple[int, int]]) -> List[Union[int, str]]: graph = [[] for _ in range(N)] for u, v, w in roads: graph[u - 1].append((w, v - 1)) graph[v - 1].append((w, u - 1)) results = [] for S, D in queries: distances = dijkstra(graph, S - 1) if distances[D - 1] == float(\'inf\'): results.append(\\"NO PATH\\") else: results.append(distances[D - 1]) return results"},{"question":"You are given an array of n integers, representing the heights of n buildings. The buildings are arranged in a straight line, and each building\'s height is represented by an integer in the array. We define the skyline of this arrangement as a view from the left. Formally, the ith building is visible in the skyline if there is no building to its left (before i) that is taller. Write a function `count_visible_buildings` that takes an integer array heights of length n as input and returns the count of buildings that are visible in the skyline view. Consider the following example: - Input: heights = [3, 1, 4, 2, 5] - Output: 3 Explanation: - Building 1 with height 3 is visible. - Building 3 with height 4 is visible. - Building 5 with height 5 is visible. - Buildings 2 and 4 are not visible because there is a taller building before them. Function Signature: ```python def count_visible_buildings(heights: List[int]) -> int: ``` Input: - An integer array heights (1 ≤ n ≤ 10^5, 1 ≤ heights[i] ≤ 10^9) Output: - An integer representing the count of visible buildings.","solution":"from typing import List def count_visible_buildings(heights: List[int]) -> int: Returns the count of buildings that are visible in the skyline view. if not heights: return 0 max_height = heights[0] count = 1 # The first building is always visible for height in heights[1:]: if height > max_height: count += 1 max_height = height return count"},{"question":"You are given an array of n integers and two integers leftIndex and rightIndex where 1 ≤ leftIndex ≤ rightIndex ≤ n. You can reverse the subarray that starts from leftIndex and ends at rightIndex (both inclusive). Write a program that performs exactly one reverse operation and achieves the lexicographically smallest array possible. The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. The third line contains two integers leftIndex and rightIndex (1 ≤ leftIndex ≤ rightIndex ≤ n), the starting and ending index for the subarray to reverse. Output the lexicographically smallest array possible after performing the reverse operation. # Example Input: 5 4 2 3 1 5 2 4 Output: 4 1 3 2 5 Explanation: After reversing the subarray from the second to the fourth element, the array becomes [4, 1, 3, 2, 5], which is the lexicographically smallest array that can be obtained by reversing any subarray exactly once.","solution":"def reverse_to_lexicographically_smallest_array(n, arr, leftIndex, rightIndex): Returns the lexicographically smallest array possible by reversing a subarray exactly once. Parameters: n : int The number of elements in the array. arr : list of int The elements of the array. leftIndex : int The starting index of the subarray to reverse. rightIndex : int The ending index of the subarray to reverse. Returns: list of int The lexicographically smallest array possible. # Adjust indices for 0-based indexing leftIndex -= 1 rightIndex -= 1 # Reverse the subarray arr[leftIndex:rightIndex + 1] = arr[leftIndex:rightIndex + 1][::-1] return arr"},{"question":"Given a string consisting of lowercase letters and digits, you need to find all possible substrings that are palindromes. A palindrome is a string that reads the same forward and backward. Write a function that takes a single string as input and returns a list of all unique palindromic substrings in that string. The substrings in the list should be sorted in ascending order based on their length. If two palindromes have the same length, they should be sorted lexicographically. # Input - A string `s` consisting of lowercase letters and digits. The length of the string will be no more than 1000. # Output - A list of unique palindromic substrings sorted first by length and then lexicographically. # Example **Input:** ``` abba1221 ``` **Output:** ``` [\'1\', \'2\', \'a\', \'b\', \'22\', \'bb\', \'1221\', \'abba\'] ``` # Constraints - The input string will contain only lowercase letters and digits. - The length of the string will be no more than 1000.","solution":"def find_palindromic_substrings(s): Returns a list of all unique palindromic substrings in the string s. The list is sorted first by length and then lexicographically. def is_palindrome(sub): return sub == sub[::-1] palindromes = set() for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if is_palindrome(substring): palindromes.add(substring) palindromes_list = list(palindromes) palindromes_list.sort(key=lambda x: (len(x), x)) return palindromes_list"},{"question":"Given a list of integers representing the heights of students in a class, you are to form groups such that the difference in height between the tallest and shortest student in each group does not exceed a given value `d`. Your task is to determine the minimum number of groups required to accomplish this. A group can be formed with any number of students, but the difference between the maximum and minimum height in the group should not exceed `d`. # Input Format - The first line of input contains two integers `n` and `d` (1 ≤ n ≤ 100000, 1 ≤ d ≤ 1000000000), where `n` is the number of students and `d` is the maximum allowed height difference in a group. - The second line contains `n` integers `h1, h2, ..., hn` (1 ≤ hi ≤ 1000000000), where `hi` is the height of the i-th student. # Output Format - Output a single integer, the minimum number of groups required. # Example Input ``` 6 5 1 2 3 10 11 12 ``` Output ``` 2 ``` Explanation One possible way to form the groups is: - Group 1: {1, 2, 3} (Height difference = 2) - Group 2: {10, 11, 12} (Height difference = 2)","solution":"def min_number_of_groups(n, d, heights): Determines the minimum number of groups required such that the difference in height between the tallest and shortest student in each group does not exceed d. heights.sort() num_groups = 0 i = 0 while i < n: num_groups += 1 current_group_min = heights[i] while i < n and heights[i] - current_group_min <= d: i += 1 return num_groups"},{"question":"You are given an array of integers where each element appears exactly twice, except for one element which appears only once. Find the single element that appears only once and return it. For example, with the input array [2, 2, 3, 4, 4], the function should return 3 since it is the only element that appears exactly once. Function Signature: ```python def find_single_element(arr: List[int]) -> int: ``` **Input:** - `arr` (List[int]): A list of integers where each element appears exactly twice, except for one element which appears once. The list will have at least one element and no more than 10^5 elements. **Output:** - `int`: The integer that appears only once in the list. **Example:** ```python find_single_element([2, 2, 3, 4, 4]) # should return 3 find_single_element([5, 1, 1, 5, 3, 3, 6]) # should return 6 ``` **Note:** - Implement the solution with a time complexity of O(n). - Do not use extra memory more than O(1) apart from the input data.","solution":"def find_single_element(arr): Returns the element that appears exactly once in the list, where each other element appears exactly twice. unique_element = 0 for num in arr: unique_element ^= num return unique_element"},{"question":"Alice is planning a road trip and wants to visit as many cities as possible. She has a list of n cities and the distance between each pair of cities. Due to time constraints, she can only travel a total distance of d miles during her trip. Find the maximum number of cities Alice can visit starting from her home city. The first line contains positive integer n (2 ≤ n ≤ 100) — the number of cities including her home city. The second line contains positive integer d (1 ≤ d ≤ 10^6) — the total distance Alice can travel. Each of the next lines contains n integers, where j-th (1 ≤ dij ≤ 10^4) value in i-th line represents the distance between city i and city j. Note that dij = dji and dii = 0. Print the maximum number of cities Alice can visit, including her home city. In the first example Alice can visit three cities because the total distance covered to visit these cities is within her allowed distance. In the second example Alice can visit all the cities as the sum of the distances is within her total allowable distance.","solution":"def max_cities_to_visit(n, d, distances): visited = [False] * n visited[0] = True # start from home city current_distance = 0 city_count = 1 def find_min_distance_city(current_city): min_distance = float(\'inf\') next_city = -1 for i in range(n): if not visited[i] and distances[current_city][i] < min_distance: min_distance = distances[current_city][i] next_city = i return next_city, min_distance current_city = 0 while True: next_city, min_distance = find_min_distance_city(current_city) if next_city == -1 or current_distance + min_distance > d: break visited[next_city] = True current_distance += min_distance city_count += 1 current_city = next_city return city_count"},{"question":"You have a stack of plates. The plates are stacked in the order they are placed, with the most recently placed plate at the top. You can place a plate on top of the stack or remove the top plate from the stack. Your friend has given you a list of n operations to perform on the stack of plates. Each operation is described by a single string. An operation is either \\"push x\\", where x is an integer representing the value of the plate being added to the stack, or \\"pop\\", which means removing the top plate from the stack. After performing all the operations, you need to print the values of the plates remaining in the stack from top to bottom. If the stack is empty, print \\"empty\\". The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of operations. Each of the next n lines contains an operation, either \\"push x\\" (with x being an integer where -1,000,000 ≤ x ≤ 1,000,000) or \\"pop\\". Output the values of the plates in the stack from top to bottom, or \\"empty\\" if the stack is empty. # Example Input 1 ``` 5 push 5 push 2 pop push 6 push 9 ``` # Example Output 1 ``` 9 6 5 ``` # Example Input 2 ``` 3 push 4 pop pop ``` # Example Output 2 ``` empty ``` # Explanation In the first example, the operations are as follows: - \\"push 5\\" results in the stack: 5 - \\"push 2\\" results in the stack: 5 2 - \\"pop\\" removes the top element, resulting in the stack: 5 - \\"push 6\\" results in the stack: 5 6 - \\"push 9\\" results in the stack: 5 6 9 In the second example, the operations are as follows: - \\"push 4\\" results in the stack: 4 - \\"pop\\" removes the top element, resulting in the stack being empty - \\"pop\\" operation cannot be performed on an empty stack, so the stack remains empty Hence, the output is \\"empty\\".","solution":"def plate_stack(operations): stack = [] for op in operations: if op.startswith(\\"push\\"): _, value = op.split() stack.append(int(value)) elif op == \\"pop\\": if stack: stack.pop() return \' \'.join(map(str, stack[::-1])) if stack else \\"empty\\""},{"question":"The annual Hackathon event is approaching, and the organizers need to print certificates for the top k winners from their list of participants. Each participant has a score assigned to them, but the problem is that the scores are given in an unsorted manner. Your task is to help the organizers by sorting the scores in descending order and selecting the top k participants. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of participants. - The second line contains an integer k (1 ≤ k ≤ n), the number of top participants to select. - The third line contains n integers separated by spaces, representing the scores of the participants. Each score is a non-negative integer less than or equal to 10^9. Output: - Print k integers in a single line, representing the scores of the top k participants in descending order. Example: Input: 7 3 100 50 75 150 125 60 80 Output: 150 125 100 Note: If there are ties (scores that are the same), treat them as distinct participants and choose any of the tied scores, as long as the total number of selected scores is correct.","solution":"def get_top_k_scores(n, k, scores): Returns the top k scores from the list of scores in descending order. Parameters: - n (int): The number of participants. - k (int): The number of top participants to select. - scores (list of int): The scores of the participants. Returns: - list of int: The top k scores in descending order. # Sort the scores in descending order sorted_scores = sorted(scores, reverse=True) # Return the top k scores return sorted_scores[:k]"},{"question":"You are given a list of integers, and you need to find the length of the longest subsequence which meets the property that the sum of its elements is a prime number. A subsequence is obtained by deleting some or none of the elements from the list without changing the order of the remaining elements. The first line of the input contains one integer `t` (`1 <= t <= 100`) — the number of test cases. Then `t` test cases follow. The first line of each test case contains one integer `n` (`1 <= n <= 1000`) — the number of elements in the list. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (`1 <= a_i <= 10^6`) — the elements of the list. For each test case, print one integer — the length of the longest subsequence with the sum of its elements being a prime number. If no such subsequence exists, print `0`. # Input - The first line contains the integer `t` — the number of test cases. - For each test case: - The first line contains an integer `n` — the number of elements in the list. - The second line contains `n` space-separated integers `a_1, a_2, ..., a_n`. # Output - For each test case, print the length of the longest subsequence where the sum of its elements is a prime number. If no such subsequence exists, print `0`. # Example ```plaintext Input: 2 5 3 7 10 2 5 4 4 6 8 12 Output: 5 0 ``` # Explanation In the first test case, the entire list `[3, 7, 10, 2, 5]` has a sum of `27`, which is not a prime number, but the subsequence `[3, 7, 2, 5]` has a sum of `17` which is a prime number, and its length is `4`. However, the subsequence `[3, 7, 2]` has a sum of `12`, which is not prime. So we can consider `[3, 7, 10]` as well, and `[3, 7, 10]` sum to `20` which is not prime. One of the longest valid subsequences is `[3, 7, 2, 5]`, but there is another long valid subsequence `[7, 10, 2, 5]` whose sum is also a prime number (24). Hence `4` is the longest valid subsequence. In the second test case, there are no subsequences whose sum is a prime number. Hence, the output is `0`.","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def longest_prime_sum_subsequence_length(t, test_cases): def calculate_sums(arr): # Generate all subsequences and their sums from itertools import combinations sums = [] for i in range(1, len(arr) + 1): for combo in combinations(arr, i): sums.append((sum(combo), len(combo))) return sums results = [] for case in test_cases: n, arr = case sums = calculate_sums(arr) max_length = 0 for s, length in sums: if is_prime(s): max_length = max(max_length, length) results.append(max_length) return results"},{"question":"Nora has a directed graph with m edges and n vertices, numerated from 1 to n. A directed graph is a set of nodes where edges have a direction from one node to another. Each edge has a strictly positive integer weight. Nora wants to find out the minimum path cost to visit all nodes starting from node 1 and returning to node 1. However, nodes can be visited multiple times if necessary. The first line contains two integers n and m (2 le n le 2000, 1 le m le 5000) — the number of vertices and the number of edges in Nora\'s graph. Each of the next m lines contains three integers u, v, w (1 le u, v le n, 1 leq w leq 10^6) — the starting vertex of the edge, the ending vertex of the edge, and the weight of the edge, respectively. Print a single integer: the minimum path cost to visit all nodes starting and ending at node 1. If it is not possible to visit all nodes from node 1, print -1. In the first example, there is a Hamiltonian path starting from node 1 and visiting nodes out such that the minimum path cost is calculated. In the second example, if some nodes are not reachable from the node 1, the output should be -1.","solution":"def min_path_cost(n, m, edges): INF = float(\'inf\') # Initialize the graph distances dist = [[INF] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 for u, v, w in edges: dist[u-1][v-1] = min(dist[u-1][v-1], w) # 1-based to 0-based index conversion # Floyd-Warshall Algorithm to find the shortest paths between all pairs for k in range(n): for i in range(n): for j in range(n): if dist[i][k] < INF and dist[k][j] < INF: dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) # If any node is unreachable from node 1 if any(dist[0][i] == INF for i in range(n)): return -1 # DP with bit masking dp = [[INF] * n for _ in range(1 << n)] dp[1][0] = 0 # Start at node 1 (0 in 0-based index) for mask in range(1 << n): for u in range(n): if dp[mask][u] == INF: continue for v in range(n): if mask & (1 << v) == 0: new_mask = mask | (1 << v) dp[new_mask][v] = min(dp[new_mask][v], dp[mask][u] + dist[u][v]) # Minimum cost to visit all nodes and return to start node 1 full_mask = (1 << n) - 1 result = min(dp[full_mask][i] + dist[i][0] for i in range(n)) return -1 if result >= INF else result"},{"question":"You are given a string consisting of lowercase English letters. You are allowed to perform one type of operation any number of times: choose any character in the string and move it to the end of the string. Determine the smallest lexicographical string that can be obtained by performing this operation any number of times. The first line contains an integer n (1 ≤ n ≤ 100) — the length of the string. The second line contains the string of length n consisting of lowercase English letters. In a single line, print the smallest lexicographical string that can be obtained. For example, if the input string is \\"cba\\", the output should be \\"acb\\".","solution":"def smallest_lexicographical_string(s: str) -> str: Returns the smallest lexicographical string that can be obtained by moving any character to the end of string any number of times. s_sorted = \'\'.join(sorted(s)) return s_sorted"},{"question":"Title: Minimum Operations to Reach Target Ehab has a list of **n** positive integers. He can perform the following operation any number of times: choose any element of the list and subtract one from it. He needs to transform the list into a target list. Ehab wonders how many operations are needed to transform each element in the list exactly to its corresponding target. Given **n** integers representing the initial values of the list, and another **n** integers representing the target values, calculate the total number of operations required to transform the initial list into the target list. The first line contains an integer **n** (1 ≤ **n** ≤ 10^5), the number of elements in the list. The second line contains **n** integers **a1, a2, ..., an** (1 ≤ **ai** ≤ 10^9), representing the initial values of the list. The third line contains **n** integers **b1, b2, ..., bn** (1 ≤ **bi** ≤ 10^9), representing the target values of the list. For each test case, output a single integer in a new line: the total number of operations needed to transform the initial list into the target list. # Example Input: ``` 4 10 20 30 40 5 15 25 35 ``` Output: ``` 20 ``` # Explanation For the given example: - To transform `10` to `5`, 5 operations are needed (10-5 = 5). - To transform `20` to `15`, 5 operations are needed (20-15 = 5). - To transform `30` to `25`, 5 operations are needed (30-25 = 5). - To transform `40` to `35`, 5 operations are needed (40-35 = 5). Total operations required = 5 + 5 + 5 + 5 = 20.","solution":"def min_operations_to_reach_target(n, initial_list, target_list): Returns the total number of operations needed to transform the initial list into the target list by subtracting 1 from any element any number of times. total_operations = 0 for initial, target in zip(initial_list, target_list): total_operations += initial - target return total_operations"},{"question":"You are given a binary tree with `n` nodes. Nodes are numbered from `1` to `n`. For each node `i`, you are given two integers `left[i]` and `right[i]` which represent the left and right children of the node `i` respectively. If a node does not have a left or a right child, the corresponding value will be `-1`. Your task is to determine the height of the binary tree. The height of a binary tree is defined as the length of the longest path from the root node to any leaf node. # Input - The first line contains a single integer `n` (1 leq n leq 100) — the number of nodes in the binary tree. - The next `n` lines contain two integers each `left[i]` and `right[i]` (-1 leq left[i], right[i] leq n). # Output - Output a single integer — the height of the binary tree. # Considerations - The binary tree always has node `1` as its root. - It is guaranteed that the input describes a valid binary tree. # Example Input ``` 5 2 3 -1 -1 4 5 -1 -1 -1 -1 ``` Output ``` 3 ``` In the given example, the binary tree looks like this: ``` 1 / 2 3 / 4 5 ``` The height of the tree is `3`, which is the path from node `1` to node `4` or node `5`.","solution":"def compute_tree_height(n, nodes): from collections import defaultdict def height(node): if node == -1: return 0 left_height = height(tree[node][0]) right_height = height(tree[node][1]) return 1 + max(left_height, right_height) # Construct the tree from the input nodes array tree = defaultdict(lambda: (-1, -1)) for i in range(n): tree[i + 1] = (nodes[i][0], nodes[i][1]) # Start from the root node, which is 1 return height(1)"},{"question":"You are given an array of n integers and a target integer x. Your task is to find two distinct indices i and j such that the elements at those indices add up to the target x. The first line of input contains two integers n and x (2 ≤ n ≤ 10^5, -10^9 ≤ x ≤ 10^9), representing the number of elements in the array and the target integer respectively. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Print two integers, the indices i and j (1 ≤ i < j ≤ n), such that ai + aj = x. If there are multiple valid pairs, print any one of them. If no such pair exists, print \\"No solution\\". You can assume the input array does not contain duplicate elements.","solution":"def find_indices(nums, target): Finds two distinct indices i and j such that nums[i] + nums[j] == target. Parameters: nums (list of int): The list of integers. target (int): The target integer. Returns: tuple: a tuple of two integers representing the indices (1-based) or a string \\"No solution\\". num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement] + 1, i + 1) num_to_index[num] = i return \\"No solution\\""},{"question":"You are given a list of `n` positive integers a=[a_1, a_2, ldots, a_n] and a target integer `T`. Your task is to determine if there exists a subset of the list `a` such that the sum of its elements is exactly equal to `T`. For example, if `a = [3, 34, 4, 12, 5, 2]` and `T = 9`, there exists a subset `[4, 5]` which sums to `9`. # Input: The first line contains two integers `n` and `T` (1 leq n leq 1000, 1 leq T leq 10^6): the length of the list and the target sum. The second line contains `n` integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6): the elements of the list. # Output: Print `YES` if there exists such a subset, otherwise print `NO`. # Example: Input: ``` 6 9 3 34 4 12 5 2 ``` Output: ``` YES ``` # Note: In the example, one possible subset that sums to 9 is `[4, 5]`. Thus, the output is `YES`.","solution":"def subset_sum_exists(n, T, a): Determines if there exists a subset of the list a such that the sum of its elements is exactly equal to T. # We use dynamic programming (DP) to solve the subset sum problem. # Create a DP array to store results of subproblems dp = [False] * (T + 1) dp[0] = True # There is always a subset with 0 sum, the empty set # Update the dp array for num in a: for j in range(T, num - 1, -1): dp[j] = dp[j] or dp[j - num] return \\"YES\\" if dp[T] else \\"NO\\""},{"question":"You are given a string S that contains only lowercase letters. Your task is to determine whether there are three consecutive characters in the string that are the same. If any such sequence of characters exists, output \\"Yes\\". Otherwise, output \\"No\\". The first line contains an integer t (1 ≤ t ≤ 100) – the number of test cases. Each of the next t lines contains a string S (1 ≤ |S| ≤ 100) — the string to be checked. For each string, print \\"Yes\\" if there are three consecutive identical characters. Otherwise, print \\"No\\".","solution":"def has_three_consecutive_same_chars(s): Returns \'Yes\' if the string contains three consecutive identical characters, \'No\' otherwise. for i in range(len(s) - 2): if s[i] == s[i+1] == s[i+2]: return \'Yes\' return \'No\' def check_strings(test_cases): Given a list of strings, applies the has_three_consecutive_same_chars function to each. Returns a list of results. results = [] for s in test_cases: results.append(has_three_consecutive_same_chars(s)) return results"},{"question":"You are given a rectangular grid of size `n x m` filled with integers. Your task is to determine whether you can find a `k x k` subgrid within the grid that has all equal elements. Return \\"YES\\" if such a subgrid exists, otherwise return \\"NO\\". The first line of input contains three integers `n`, `m` and `k` (1 le n, m le 1000, 1 le k le min(n, m)) — the dimensions of the grid and the required size of the subgrid. Each of the next `n` lines contains `m` integers (|a_{ij}| le 100) — the elements of the grid. Print a single line containing \\"YES\\" if there exists a `k x k` subgrid with all identical integers, otherwise print \\"NO\\". The answer can be printed in any case (upper or lower). Note: Ensure to provide an efficient solution due to constraints on the grid size. Example: Input: ``` 3 4 2 1 2 2 3 1 2 2 3 4 5 6 6 ``` Output: ``` YES ```","solution":"def has_kxk_identical_subgrid(n, m, k, grid): Checks if there exists a k x k subgrid in the n x m grid with all identical elements. Parameters: - n: int, number of rows in the grid - m: int, number of columns in the grid - k: int, size of the subgrid to check for identical elements - grid: List[List[int]], the grid of integers Returns: - str: \\"YES\\" if such a subgrid exists, otherwise \\"NO\\" for i in range(n - k + 1): for j in range(m - k + 1): subgrid_value = grid[i][j] all_identical = True for ii in range(i, i + k): for jj in range(j, j + k): if grid[ii][jj] != subgrid_value: all_identical = False break if not all_identical: break if all_identical: return \\"YES\\" return \\"NO\\""},{"question":"Polycarp is working on developing an advanced messaging system for his RPG game, where players can send and receive messages. The game world has n characters, each identified by a unique identifier from 1 to n. Polycarp wants to ensure efficient communication between players, and he needs to handle several types of operations. There are two types of operations that can be performed: 1. `SEND x y t` - Character x sends a message to character y at time t. 2. `RECEIVE x t` - Retrieve and display the message received by character x exactly at time t. If no message is received by character x at time t, display `NO MESSAGE`. Given an integer q, the number of operations, followed by the list of operations, your task is to simulate the execution of these operations and output the results for all `RECEIVE` operations. The first line of input contains two integers, n (1 le n le 1000) — the number of characters and q (1 le q le 100000) — the number of operations. The next q lines each contain one of the following operations: - `SEND x y t` (1 ≤ x, y ≤ n, 1 ≤ t ≤ 10^9) - `RECEIVE x t` (1 ≤ x ≤ n, 1 ≤ t ≤ 10^9) For each `RECEIVE` operation, print `NO MESSAGE` if there is no message received by character x at time t, otherwise print the identifier of the character who sent the message to x at time t. **Example:** ``` Input: 5 6 SEND 1 2 100 SEND 2 3 200 SEND 3 4 300 RECEIVE 2 100 RECEIVE 3 200 RECEIVE 4 250 Output: 1 2 NO MESSAGE ``` In this example, character 1 sends a message to character 2 at time 100, character 2 sends a message to character 3 at time 200, and character 3 sends a message to character 4 at time 300. The RECEIVE operations query for the messages received at specific times. As per the input, character 2 receives a message from character 1 at time 100, character 3 receives a message from character 2 at time 200, and there is no message received by character 4 at time 250.","solution":"def messaging_system(n, q, operations): messages = {} results = [] for operation in operations: parts = operation.split() if parts[0] == \\"SEND\\": _, sender, receiver, time = parts sender, receiver, time = int(sender), int(receiver), int(time) if receiver not in messages: messages[receiver] = {} messages[receiver][time] = sender elif parts[0] == \\"RECEIVE\\": _, receiver, time = parts receiver, time = int(receiver), int(time) if receiver in messages and time in messages[receiver]: results.append(str(messages[receiver][time])) else: results.append(\\"NO MESSAGE\\") return results"},{"question":"An online payment system needs to verify transactions based on security codes. Each transaction has an associated security code that is a string containing digits and lowercase letters. Due to a software bug, some of the security codes have become corrupted and contain repeated characters. Your task is to write a program that processes a given security code by removing the extra repeated characters to restore the original security code. The restored security code should retain only the first occurrence of each character in their original order. # Input The input consists of a single line containing a string `s` that represents a corrupted security code. The string contains at least 1 and at most 100,000 characters. It may contain both digits (\'0\'-\'9\') and lowercase letters (\'a\'-\'z\'). # Output Print a single line containing the restored security code with all duplicate characters removed, preserving the original order of their first occurrences. # Sample Input ``` aabbccddeeff112233 ``` # Sample Output ``` abcdef123 ``` # Explanation In the sample input, the corrupted security code \\"aabbccddeeff112233\\" is processed to remove all repeated characters. The restored security code is \\"abcdef123\\", where each character from the original string is retained only in their first occurrence, maintaining their initial order.","solution":"def restore_security_code(s): Returns the restored security code by removing duplicate characters. Parameters: s (str): The corrupted security code. Returns: str: The restored security code with duplicates removed. seen = set() restored_code = [] for char in s: if char not in seen: seen.add(char) restored_code.append(char) return \'\'.join(restored_code)"},{"question":"You are given an array of integers with length n (1 le n le 10^5). Your task is to process q queries (1 le q le 10^5) of the following types: 1. **1 l r x** - Add the integer x (1 le x le 10^5) to each element of the array from index l to index r (1-based inclusive). 2. **2 l r** - Compute the maximum integer in the subarray from index l to index r (1-based inclusive). Input Format: - The first line contains two integers n and q. - The second line contains n space-separated integers representing the initial array. - The next q lines contain the queries in the format described above. Output Format: - For each query of type 2, output the maximum integer in the specified subarray on a new line. Example: Input: ``` 5 4 1 2 3 4 5 2 1 3 1 2 4 3 2 2 5 2 1 5 ``` Output: ``` 3 7 7 ``` Explanation: - The initial array is [1, 2, 3, 4, 5]. - The first query asks for the maximum integer from the subarray [1, 2, 3], which is 3. - The second query adds 3 to each element from index 2 to 4, resulting in the array [1, 5, 6, 7, 5]. - The third query asks for the maximum integer from the subarray [5, 6, 7, 5], which is 7. - The fourth query asks for the maximum integer in the entire array [1, 5, 6, 7, 5], which is 7.","solution":"def process_queries(n, q, array, queries): Process each query on the given array and return the results of type 2 queries. :param n: Length of the array :param q: Number of queries :param array: Initial array of integers :param queries: List of queries :return: List of results for type 2 queries. results = [] for query in queries: parts = query.split() if parts[0] == \'1\': l, r, x = int(parts[1])-1, int(parts[2])-1, int(parts[3]) for i in range(l, r+1): array[i] += x elif parts[0] == \'2\': l, r = int(parts[1])-1, int(parts[2])-1 results.append(max(array[l:r+1])) return results"},{"question":"A gardening club wants to organize an event where each member plants a certain number of trees. The club\'s president decided to distribute the types of trees to be planted in a special manner. There are `n` types of trees available. Each member will plant one tree of each type, but in such a way that no two members plant the same sequence of tree types in terms of order. Given the total number of tree types `n`, determine the number of unique ways members can plant the trees. Each unique way represents a different permutation of the tree types. The input consists of a single integer `n` (1 ≤ n ≤ 12), which is the number of different tree types available. Output a single integer representing the number of unique ways the trees can be planted by each member. Example: Input: 3 Output: 6","solution":"import math def unique_ways_to_plant_trees(n): Returns the number of unique ways to plant n types of trees. Args: n (int): The number of different tree types available. (1 ≤ n ≤ 12) Returns: int: The number of unique permutations of tree types. return math.factorial(n)"},{"question":"Write a function that, given an array of n integers, returns an array of the k smallest elements, sorted in ascending order. You may assume that all integers in the input array are distinct, and that 1 ≤ k ≤ n ≤ 10^5. The function should be as efficient as possible. # Input 1. The first line contains two integers n and k (1 ≤ k ≤ n ≤ 10^5) — the number of elements in the array and the number of smallest elements to find, respectively. 2. The second line contains n distinct integers separated by spaces, representing the elements of the array. Each integer x satisfies |x| ≤ 10^9. # Output The output should be a single line containing the k smallest elements of the array, sorted in ascending order. # Example **Input:** ``` 6 3 7 -2 3 10 5 1 ``` **Output:** ``` -2 1 3 ``` # Explanation Among the given numbers, the three smallest numbers are -2, 1, and 3. The output should list these numbers in ascending order.","solution":"def k_smallest_elements(n, k, arr): Returns the k smallest elements from the given array of n distinct integers, sorted in ascending order. # Sort the array to get the first k elements sorted_arr = sorted(arr) # Get the first k elements from the sorted array return sorted_arr[:k]"},{"question":"Flavia is a traveling merchant with a passion for unique challenges, particularly those involving numerical puzzles. On one of her journeys, she encounters an ancient scroll containing the following problem: You are given six positive integers a, b, c, d, e, f such that a leq b leq c leq d leq e leq f. Your task is to determine whether there exist three integers x, y, z, satisfying the following conditions: 1. a leq x leq d 2. b leq y leq e 3. c leq z leq f 4. x + y + z geq a + b + c + d + e + f The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. The next t lines describe test cases. Each test case is given as six space-separated integers a, b, c, d, e, f (1 leq a leq b leq c leq d leq e leq f leq 10^9). For each test case, if such integers x, y, z exist, print \\"YES\\" and three integers x, y, z that satisfy the conditions. If no such integers exist, print \\"NO\\". It is guaranteed that the answer always exists if the conditions can be met. If there are multiple solutions, print any. Example input and output format: Input: 2 1 2 3 4 5 6 2 3 4 5 6 7 Output: YES 4 5 6 YES 5 6 7","solution":"def find_xyz(t, cases): results = [] for case in cases: a, b, c, d, e, f = case sum_abc = a + b + c sum_def = d + e + f if sum_def >= sum_abc: results.append(f\\"YES {d} {e} {f}\\") else: results.append(\\"NO\\") return results # Example usage cases = [ [1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], ] t = len(cases) print(find_xyz(t, cases))"},{"question":"John has recently developed an interest in number sequences and has come across a peculiar challenge involving two sequences. He needs to write a code that will help him verify if the first sequence can be rearranged to form the second sequence by performing any number of swaps on its elements. Given two sequences of integers, sequence A and sequence B, of length n, your task is to determine if sequence A can be rearranged to match sequence B. # Input - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the length of the sequences. - The second line contains n integers — the elements of sequence A. - The third line contains n integers — the elements of sequence B. # Output - Output \\"YES\\" if sequence A can be rearranged to form sequence B. - Otherwise, output \\"NO\\". # Examples Input ``` 4 1 2 3 4 4 3 2 1 ``` Output ``` YES ``` Input ``` 3 1 2 2 1 1 2 ``` Output ``` NO ``` # Note In the first example, sequence A can be rearranged to form sequence B. In the second example, sequence A cannot be rearranged to form sequence B because they have different counts of the integer 2.","solution":"def can_rearrange_to_form(sequence_a, sequence_b): Determine if sequence A can be rearranged to form sequence B. Parameters: sequence_a (list of int): The first sequence of integers. sequence_b (list of int): The second sequence of integers. Returns: str: \\"YES\\" if sequence A can be rearranged to form sequence B, otherwise \\"NO\\". return \\"YES\\" if sorted(sequence_a) == sorted(sequence_b) else \\"NO\\""},{"question":"Imagine you are developing a programming competition platform, and you need to create a program that helps you efficiently manage the submission results. You are given a list of participants\' submissions. Each participant has a unique ID and each submission includes the submission ID, the result (0 for wrong answer and 1 for correct answer), and the time of submission. For each participant, you need to determine the earliest time they achieved their first correct answer. The input consists of: - An integer n (1 ≤ n ≤ 100,000) – the number of submissions. - n lines, each containing a participant\'s unique ID (a string of up to 10 alphanumeric characters), a submission ID (a unique string of up to 10 alphanumeric characters), an integer result (either 0 or 1), and the time of submission (an integer t between 0 and 10^9). Output a list of unique participant IDs, sorted lexicographically, who have at least one correct submission, followed by their earliest correct submission time. **Input:** ``` 6 user1 subm1 0 10 user2 subm2 1 12 user1 subm3 1 8 user3 subm4 0 15 user2 subm5 1 9 user3 subm6 1 20 ``` **Output:** ``` user1 8 user2 9 user3 20 ``` In the above example, `user1` first achieved a correct answer at time 8, `user2` first achieved a correct answer at time 9, and `user3` first achieved a correct answer at time 20.","solution":"def earliest_correct_submissions(n, submissions): Finds the earliest correct submission time for each participant. Parameters: n (int): Number of submissions. submissions (list of tuples): Each tuple contains (participant_id, submission_id, result, time). Returns: list of tuples: Sorted list of participants with their earliest correct submission time. participant_earliest_correct = {} for participant_id, submission_id, result, time in submissions: if result == 1: if participant_id not in participant_earliest_correct: participant_earliest_correct[participant_id] = time else: participant_earliest_correct[participant_id] = min(participant_earliest_correct[participant_id], time) sorted_participants = sorted(participant_earliest_correct.items()) return sorted_participants"},{"question":"You are given a list of string pairs. Each string pair consists of two strings: a \\"key\\" and a \\"value\\". You are also given a target string. The goal is to count the number of ways to construct the target string using these string pairs. To construct the target string, you can concatenate the values of the pairs such that the keys concatenate to form a sequence of segments that exactly match the target string. For instance, consider the case where the target string is \\"abcdef\\", and you have the string pairs: - (\\"ab\\", \\"xy\\") - (\\"cd\\", \\"z\\") - (\\"ef\\", \\"w\\") You can construct \\"abcdef\\" by joining the values \\"xy\\", \\"z\\", and \\"w\\". Rules: 1. You can use each string pair as many times as required. 2. The keys can only form non-overlapping segments of the target string. The first line of input contains an integer m (1 ≤ m ≤ 1000) — the number of string pairs. Each of the next m lines contains a key-value pair, where each key and value are non-empty strings of lowercase English letters (length of the keys and values is at most 10). The next line contains the target string (length of the target string is at most 100). Output a single integer representing the number of ways to construct the target string using the provided key-value pairs. Example: Input: 3 ab xy cd z ef w abcdef Output: 1 Explanation: There is only one way to construct the target string \\"abcdef\\": by concatenating \\"xy\\", \\"z\\", and \\"w\\". Input: 2 a x bc yz abc Output: 1 Explanation: There is only one way to construct the target string \\"abc\\": by concatenating \\"x\\" and \\"yz\\".","solution":"def count_ways(pairs, target): pair_dict = {} for key, value in pairs: if key in pair_dict: pair_dict[key].append(value) else: pair_dict[key] = [value] n = len(target) dp = [0] * (n + 1) dp[0] = 1 for i in range(n): for j in range(i, n): if dp[i] == 0: continue segment = target[i:j+1] if segment in pair_dict: for value in pair_dict[segment]: dp[j+1] += dp[i] return dp[-1] # Example usage: # m = 3 # pairs = [(\\"ab\\", \\"xy\\"), (\\"cd\\", \\"z\\"), (\\"ef\\", \\"w\\")] # target = \\"abcdef\\" # print(count_ways(pairs, target)) # Output: 1"},{"question":"Given an integer array `nums` of length `n` containing distinct integers, your task is to return all possible permutations of the array in any order. A permutation of the array is a rearrangement of its elements. Your function should handle arrays with lengths up to 8. You may assume that all integers in the input array are unique. # Input - A single line containing the integers in the array `nums`, separated by spaces. # Output - All possible permutations of the array, each permutation on a new line. - The permutations can be in any order. # Example Input: ``` 1 2 3 ``` Output: ``` 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 ``` Note that the output permutations can be in any order, as long as all permutations are covered.","solution":"from itertools import permutations def get_permutations(nums): Returns all possible permutations of the list nums. return list(permutations(nums)) def format_permutations(perms): Formats the permutations into a string representation, each permutation on a new line. output = \\"n\\".join(\\" \\".join(map(str, perm)) for perm in perms) return output def process_input(input_str): Converts the input string into an appropriate format and returns the permutations. nums = list(map(int, input_str.strip().split())) perms = get_permutations(nums) return format_permutations(perms)"},{"question":"In a bustling city, there is a unique art gallery known for its automated security and visitor management system. The gallery has k distinct rooms, each room having a certain number of sensors installed to monitor visitors. The system records the entry and exit times of each visitor and can answer queries about the number of visitors present in any given room over specific time intervals. Each visitor registers their entry and exit at the exact second, ensuring precise tracking. The gallery management system needs you to expand its capabilities. They want a program that can: 1. Record when a visitor enters a room and when they leave. 2. Answer queries about the number of visitors present in any room during a specific time interval. You will be given m events, where each event either records a visitor\'s entry or exit, or is a query about the number of visitors in a room during a time interval. # Input Format The first line contains two integers k and m (1 ≤ k ≤ 100, 1 ≤ m ≤ 1000), representing the number of rooms and the number of events respectively. Each of the next m lines describes an event in one of the following formats: - \\"0 r t1 t2\\" — a query about the number of visitors in room r (1 ≤ r ≤ k) from time t1 to t2 (1 ≤ t1 ≤ t2 ≤ 109). - \\"1 r t v\\" — a visitor with identificator v (1 ≤ v ≤ 109) enters room r at time t. - \\"2 r t v\\" — the visitor with identificator v leaves room r at time t. It is guaranteed that for each visitor, there will be exactly one entry event and exactly one exit event. # Output Format For each query, print a single integer on a new line — the number of visitors in the room during the specified time interval. # Sample Input ``` 3 6 1 1 5 100 1 2 10 101 2 1 15 100 0 1 5 10 2 2 20 101 0 2 10 20 ``` # Sample Output ``` 1 1 ``` # Explanation 1. A visitor enters room 1 at time 5. 2. A visitor enters room 2 at time 10. 3. The visitor leaves room 1 at time 15. 4. Query the number of visitors in room 1 from time 5 to time 10, getting 1 visitor. 5. The visitor leaves room 2 at time 20. 6. Query the number of visitors in room 2 from time 10 to time 20, getting 1 visitor. You need to implement a system to handle these inputs and outputs efficiently given the constraints.","solution":"def gallery_management(k, m, events): visitors = {room: {} for room in range(1, k+1)} result = [] for event in events: e = event.split() e_type = int(e[0]) room = int(e[1]) if e_type == 1: # Entry time = int(e[2]) visitor = int(e[3]) visitors[room][visitor] = time elif e_type == 2: # Exit time = int(e[2]) visitor = int(e[3]) if visitor in visitors[room]: visitors[room][visitor] = (visitors[room][visitor], time) elif e_type == 0: # Query start_time = int(e[2]) end_time = int(e[3]) count = 0 for entry_exit in visitors[room].values(): if isinstance(entry_exit, tuple): entry_time, exit_time = entry_exit if entry_time <= end_time and exit_time >= start_time: count += 1 result.append(count) return result # Example usage: # k = 3, m = 6 # events = [ # \\"1 1 5 100\\", # \\"1 2 10 101\\", # \\"2 1 15 100\\", # \\"0 1 5 10\\", # \\"2 2 20 101\\", # \\"0 2 10 20\\" # ] # output = gallery_management(k, m, events) # print(output) # expected: [1, 1]"},{"question":"# Problem Chef has a garden with a row of `n` flower pots numbered from `1` to `n`. Each pot can have a different type of flower, denoted by an integer. Chef wants to enjoy different subsequences of his flower arrangements. However, Chef was busy and didn\'t keep track of the exact sequence of flowers. He remembers the type of flower in each pot but forgot their exact arrangement. However, he remembers the length and specific type of some subsequences that appeared in the original arrangement. Given the flowers in each pot and the list of remembered subsequences, can you help Chef determine if there exists a possible arrangement of the flowers that contains all the given subsequences? # Input - The first line contains an integer `n` (1 leq n leq 10^4) denoting the number of flower pots. - The second line contains `n` integers where the `i`-th integer denotes the type of flower in the `i`-th pot. - The third line contains an integer `m` (1 leq m leq 10^3) denoting the number of remembered subsequences. - Each of the next `m` lines contains two integers: - `k` (1 leq k leq n) denoting the length of the remembered subsequence. - A list of `k` integers denoting the types of flowers in that subsequence. # Output If there is a possible arrangement of the flowers that contains all the given subsequences, print \\"YES\\". Otherwise, print \\"NO\\". # Example Input ``` 5 1 2 3 4 5 2 3 1 3 5 2 2 4 ``` Output ``` YES ``` Explanation One possible arrangement is [1, 2, 3, 4, 5]. The subsequence [1, 3, 5] is present and one can find elements from [2, 4] as [2, 4]. Another possible arrangement could be [3, 1, 4, 2, 5], which also contains the subsequences mentioned. # Note - If a provided subsequence length `k` is greater than `n`, the answer is \\"NO\\". - The order of the provided subsequences must be maintained in any possible arrangement.","solution":"def can_form_subsequences(n, pots, m, subsequences): def is_subsequence(subseq, arr): it = iter(arr) return all(any(x == y for y in it) for x in subseq) for subseq in subsequences: if not is_subsequence(subseq, pots): return \\"NO\\" return \\"YES\\""},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. Your goal is to remove exactly `k` characters from the string `s` such that the resulting string is lexicographically smallest. A string `a` is lexicographically smaller than a string `b` if in the first position where `a` and `b` differ, the string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. Write a function `min_lexicographical_string(s: str, k: int) -> str` that takes the string `s` and the integer `k` and returns the lexicographically smallest string possible after removing exactly `k` characters. # Input - `s`: A string of length `n` (1 ≤ `n` ≤ 105), consisting of lowercase English letters. - `k`: An integer (0 ≤ `k` ≤ `n`). # Output - Return the lexicographically smallest string that can be obtained by removing exactly `k` characters from `s`. # Example ```python result = min_lexicographical_string(\\"cbad\\", 1) print(result) # Output: \\"bad\\" result = min_lexicographical_string(\\"abcd\\", 2) print(result) # Output: \\"ab\\" result = min_lexicographical_string(\\"dcba\\", 3) print(result) # Output: \\"a\\" ```","solution":"def min_lexicographical_string(s: str, k: int) -> str: Returns the lexicographically smallest string after removing exactly k characters from s. :param s: A string consisting of lowercase English letters. :param k: An integer specifying the number of characters to remove from the string. :return: The lexicographically smallest string possible after removing k characters. n = len(s) result = [] remaining = n - k for char in s: while k > 0 and result and result[-1] > char: result.pop() k -= 1 result.append(char) return \'\'.join(result[:remaining])"},{"question":"You are working for a company that specializes in developing intelligent sorting algorithms. Your current project is to create an optimized sorting algorithm for a large dataset that frequently gets updated with new data entries and occasional deletions. Your team lead wants to compare the efficiency and correctness of this new algorithm with the traditional merge sort. To do this, you must implement a function that processes a series of operations on an initially empty list and produces the final sorted list after all operations are applied. The operations can be of three types: 1. Add an integer to the list. 2. Remove an integer from the list (if it exists). 3. Query the list to return the k-th smallest integer (1-indexed). Write a function that reads a series of operations and processes them on a list, using your custom sorting algorithm for insertions. If a removal operation tries to remove an element that does not exist in the list, it should be ignored. For query operations, it is guaranteed that the list will contain at least k elements at the time of the query. The input consists of: - A single integer n (1 ≤ n ≤ 10^5), representing the number of operations. - n lines, each containing an operation of the form: - \\"ADD x\\" to add integer x to the list (|x| ≤ 10^6). - \\"REMOVE x\\" to remove integer x from the list (|x| ≤ 10^6). - \\"QUERY k\\" to return the k-th smallest integer (1 ≤ k ≤ current list size). The output should be the result of each \\"QUERY\\" operation in the order they appear in the input. For example: ``` Input: 8 ADD 5 ADD 3 QUERY 1 ADD 7 REMOVE 3 QUERY 2 ADD 2 QUERY 2 Output: 3 7 5 ``` You need to design and implement an efficient algorithm to handle these dynamic operations and fulfill the queries accordingly.","solution":"class CustomList: def __init__(self): self.data = [] def add(self, x): self._insert_sorted(x) def remove(self, x): try: self.data.remove(x) except ValueError: pass def query(self, k): return self.data[k-1] def _insert_sorted(self, x): # Insert while maintaining sorted order lo, hi = 0, len(self.data) while lo < hi: mid = (lo + hi) // 2 if self.data[mid] < x: lo = mid + 1 else: hi = mid self.data.insert(lo, x) def process_operations(n, operations): custom_list = CustomList() result = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"ADD\\": x = int(parts[1]) custom_list.add(x) elif cmd == \\"REMOVE\\": x = int(parts[1]) custom_list.remove(x) elif cmd == \\"QUERY\\": k = int(parts[1]) result.append(custom_list.query(k)) return result"},{"question":"You are given an array of integers representing the heights of students in a classroom. Each student should receive a distinct height as part of uniform distribution, ensuring every student looks unique. Consequently, students can be reassigned new heights, but only under certain operations. In each operation, you can either increase or decrease the height of a student by 1 unit. Write a function that outputs the minimum number of operations required to ensure all students have distinct heights. # Function Signature: ```python def minimum_operations_to_distinct_heights(heights: List[int]) -> int: ``` # Input: - An integer array `heights` where `1 ≤ len(heights) ≤ 10^5` and `1 ≤ heights[i] ≤ 10^5`. # Output: - A single integer, representing the minimum number of operations needed to make all heights distinct. # Example: Example 1: - **Input:** `[1, 2, 2]` - **Output:** `1` Explanation: You can either increase one of the `2`s to `3` or decrease one of the `2`s to `1`. Either way, you will only need one operation to make `[1, 2, 3]` or `[0, 1, 2]`. Example 2: - **Input:** `[3, 3, 3, 3]` - **Output:** `6` Explanation: You can adjust the heights to `[0, 1, 2, 3]` through six total operations. # Constraints: - Ensure the complexity of your solution aligns with the constraints (`1 ≤ len(heights) ≤ 10^5`). Your task is to implement the function to calculate the minimum number of operations required to ensure no two students have the same height.","solution":"def minimum_operations_to_distinct_heights(heights): if not heights: return 0 heights.sort() operations = 0 for i in range(1, len(heights)): if heights[i] <= heights[i-1]: needed_height = heights[i-1] + 1 operations += needed_height - heights[i] heights[i] = needed_height return operations"},{"question":"You are given a list of integers. You need to determine if there exist three numbers in the list such that they form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between any two consecutive terms is the same. For instance, the sequence [3, 6, 9] is an arithmetic progression because 6 - 3 = 3 and 9 - 6 = 3. Your task is to write a function that will determine if such a triplet exists in the given list. # Input - A list of integers of length n (1 ≤ n ≤ 10^5). Each integer in the list is between -10^9 and 10^9. # Output - Return `True` if there exists an arithmetic progression of three numbers in the list, otherwise return `False`. # Example Example 1: ```python Input: [1, 7, 10, 13, 14, 19] Output: True Explanation: The triplet [1, 7, 13] forms an arithmetic progression with a difference of 6. Input: [1, 3, 5, 7] Output: True Explanation: The triplet [1, 3, 5] forms an arithmetic progression with a difference of 2. Input: [2, 4, 8, 16] Output: False Explanation: No triplet in the list forms an arithmetic progression. ``` You may assume the presence of standard libraries and typical functions associated with lists and sets in Python. Your function signature should look like this: ```python def contains_arithmetic_triplet(nums: List[int]) -> bool: ```","solution":"def contains_arithmetic_triplet(nums): Check if there exists a triplet in the list such that they form an arithmetic progression. num_set = set(nums) for i in range(len(nums)): for j in range(i + 1, len(nums)): difference = nums[j] - nums[i] expected_triplet = nums[j] + difference if expected_triplet in num_set: return True return False"},{"question":"A company stores some files on a server. Each file is represented by a string and is assigned a unique version number that takes the form of a non-negative integer. A new version of an existing file is uploaded only if it follows specific rules: - The version number of the new file must be greater than all existing versions of the same file. - If a file with the same version number already exists, the new file is rejected. Your task is to write a function that accepts a list of events and determines the current state of the files on the server. Each event is represented as a tuple: `(operation, file_name, version_number)`, where `operation` is a string that can be either `\\"upload\\"` or `\\"delete\\"`, `file_name` is a string representing the name of the file, and `version_number` is a non-negative integer. The function should return a dictionary where the keys are the file names and the values are lists of version numbers that exist on the server for those files, sorted in increasing order. If an upload operation is rejected due to not following the rules, it should neither add nor remove a version number. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of events. - The next `n` lines each contain an event in the form of a tuple: `(operation, file_name, version_number)`. # Output - Print a dictionary with file names as keys and lists of available version numbers as values, sorted in ascending order. # Example Input ``` 7 (\\"upload\\", \\"file1\\", 1) (\\"upload\\", \\"file1\\", 2) (\\"upload\\", \\"file1\\", 1) (\\"delete\\", \\"file1\\", 2) (\\"upload\\", \\"file1\\", 3) (\\"upload\\", \\"file2\\", 1) (\\"delete\\", \\"file2\\", 1) ``` Output ``` {\'file1\': [1, 3], \'file2\': []} ```","solution":"def manage_files(events): files = {} for op, file_name, version in events: if file_name not in files: files[file_name] = [] if op == \\"upload\\": if version in files[file_name] or (files[file_name] and version <= max(files[file_name])): continue files[file_name].append(version) files[file_name].sort() elif op == \\"delete\\": if version in files[file_name]: files[file_name].remove(version) return files"},{"question":"Alyssa loves playing with numbers and has recently encountered an interesting series of k-digit numbers. She defines a k-digit number to be \\"interesting\\" if it contains exactly one pair of consecutive digits that are the same, and all other digits are different. For example, 1223 and 344547 are interesting, but 1234 and 333444 are not. Given the length of the number k (2 ≤ k ≤ 100) and the number n (0 ≤ n ≤ 9), write a program to determine how many k-digit numbers starting with the digit n are interesting. # Input - The first line of the input contains two integers k and n (2 ≤ k ≤ 100, 0 ≤ n ≤ 9). # Output - Print a single integer: the number of interesting k-digit numbers starting with the digit n. # Example Input ``` 3 1 ``` Output ``` 18 ``` Input ``` 2 5 ``` Output ``` 9 ```","solution":"def count_interesting_numbers(k, n): if k == 2: return 9 dp_2 = [[0] * 10 for _ in range(10)] # dp_2[last_digit][second_last_digit] dp_1 = [0] * 10 for i in range(10): dp_2[n][i] = 1 dp_1[i] = 1 for _ in range(3, k + 1): new_dp_2 = [[0] * 10 for _ in range(10)] new_dp_1 = [0] * 10 for last in range(10): for second_last in range(10): if last != second_last: new_dp_1[last] += dp_1[last] new_dp_1[last] %= int(1e9 + 7) new_dp_2[last][second_last] += dp_1[second_last] new_dp_2[last][second_last] %= int(1e9 + 7) else: for third_last in range(10): if third_last != last: new_dp_2[last][second_last] += dp_2[second_last][third_last] new_dp_2[last][second_last] %= int(1e9 + 7) dp_1 = new_dp_1 dp_2 = new_dp_2 result = sum(dp_2[n]) % int(1e9 + 7) return result"},{"question":"You need to implement a function `get_most_common_character(text: str) -> str` that takes a string as input and returns the character that appears the most frequently in the string. If there are multiple characters with the same maximum frequency, return the lexicographically smallest one. # Function Signature ```python def get_most_common_character(text: str) -> str: ``` # Input - `text`: A string `text` consisting of alphanumeric characters and possibly spaces. (1 ≤ |text| ≤ 10^5) # Output - A single character representing the most common character in string `text`. If there are multiple characters with the same frequency, return the lexicographically smallest one. # Example ```python assert get_most_common_character(\\"aabbcc\\") == \\"a\\" assert get_most_common_character(\\"abacaba\\") == \\"a\\" assert get_most_common_character(\\"abc abc abc\\") == \\"a\\" assert get_most_common_character(\\"abcabcabcabcabc\\") == \\"a\\" ```","solution":"def get_most_common_character(text: str) -> str: from collections import Counter # Calculate the frequency of each character char_frequency = Counter(text) # Find the most common character(s) max_frequency = max(char_frequency.values()) most_common_chars = [char for char, freq in char_frequency.items() if freq == max_frequency] # Return the lexicographically smallest character among the most common ones return min(most_common_chars)"},{"question":"Given an undirected, connected graph with `n` nodes and `m` edges, your task is to determine whether the graph contains a cycle of odd length. An undirected graph is one where edges have no direction, i.e., the edge between nodes `u` and `v` is the same as the edge between nodes `v` and `u`. A cycle in a graph is a path that starts and ends at the same node, and an odd-length cycle has an odd number of edges. # Input The first line contains two integers `n` and `m`, denoting the number of nodes and edges in the graph, respectively. The next `m` lines contain two integers `u` and `v` each, indicating that there is an edge between node `u` and node `v`. # Output Output \\"YES\\" if the graph contains an odd-length cycle, otherwise \\"NO\\". # Constraints - (1 leq n, m leq 100) - (1 leq u, v leq n) # Sample Input 1 ``` 3 3 1 2 2 3 3 1 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 4 4 1 2 2 3 3 4 4 1 ``` # Sample Output 2 ``` NO ``` # Explanation In the first sample input, the graph contains a cycle of length 3 (1-2-3-1), which is odd. In the second sample input, the graph contains a cycle of length 4 (1-2-3-4-1), which is even. Therefore, the outputs are \\"YES\\" and \\"NO\\" respectively.","solution":"def has_odd_length_cycle(n, m, edges): from collections import deque def is_bipartite_component(start): color[start] = 0 queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return True return False graph = [[] for _ in range(n)] for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) color = [-1] * n for i in range(n): if color[i] == -1: if is_bipartite_component(i): return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer n. Let g(x) = x^2 - n. Find the integer x such that the absolute value of g(x) is minimized, i.e., find the integer x that minimizes |x^2 - n|. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (0 le n le 10^{9}). Print the integer x for each test case, separated by newline. In the first test case, for n = 16, x = 4 since 4^2 - 16 = 0 which is the minimum possible absolute value. In the second test case, for n = 20, both x = 4 and x = 5 give |x^2 - 20| = 4. Therefore, any of these answers are correct.","solution":"import math def minimize_g(n): x = int(math.sqrt(n)) if abs(x**2 - n) <= abs((x+1)**2 - n): return x else: return x + 1 def solve(test_cases): results = [] for n in test_cases: results.append(minimize_g(n)) return results"},{"question":"Given an integer `n` (1 ≤ n ≤ 10^6), determine the smallest number of prime numbers whose sum is equal to `n`. If `n` is itself a prime number, then the answer is 1. Otherwise, test different sums composed of two or three primes, as necessary. Summarize the minimum count under given constraints. Example: Input: 27 Output: 3 Explanation: 27 can be expressed as the sum of 2, 2, and 23, which are all prime numbers (thus minimum count is 3). Note that 27 cannot be expressed as a sum of 1 or 2 primes.","solution":"def is_prime(num): Determines if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_sum_count(n): Determines the smallest number of prime numbers whose sum is equal to n. if is_prime(n): return 1 # Check if n is the sum of 2 prime numbers for i in range(2, n): if is_prime(i) and is_prime(n - i): return 2 # If not, then the result must be 3 because the question constraints assure it can be represented. return 3"},{"question":"You are given an array b consisting of n integers and q queries. Each query contains three integers: l, r, and v. For a given query, you need to check whether there is any index i such that l ≤ i ≤ r and bi > v. The first line contains two integers n and q (1 ≤ n, q ≤ 2×10^5) — the number of elements in array b and the number of queries. The second line contains n integers bi (1 ≤ bi ≤ 10^6) — the elements of the array b. Each of the next q lines contains three integers l, r, v (1 ≤ l ≤ r ≤ n, 1 ≤ v ≤ 10^6) — the parameters of the query. Print q lines. On each line, print \\"YES\\" if there exists an index i (l ≤ i ≤ r) such that bi > v; otherwise, print \\"NO\\".","solution":"def process_queries(n, q, b, queries): results = [] for l, r, v in queries: found = False for i in range(l-1, r): if b[i] > v: results.append(\\"YES\\") found = True break if not found: results.append(\\"NO\\") return results"},{"question":"You are given a string `s` consisting of lowercase English letters and an integer `k`. You need to transform the string such that no two adjacent characters are the same by removing characters from the string. It is guaranteed that it is possible to achieve such a transformation. Your task is to return the length of the longest such transformed string. Example 1: ``` Input: s = \\"aabbcc\\", k = 2 Output: 4 Explanation: You can remove two \'b\'s to get \\"aacc\\". Now the string \\"aacc\\" has no two adjacent characters the same. ``` Example 2: ``` Input: s = \\"aabbcc\\", k = 3 Output: 3 Explanation: You can remove one \'a\', one \'b\', and one \'c\' to get \\"abc\\". Now the string \\"abc\\" has no two adjacent characters the same. ``` Function Signature: `def longest_transformed_string(s: str, k: int) -> int:` **Constraints:** - 1 <= s.length <= 10^5 - 1 <= k <= s.length - s consists of lowercase English letters only","solution":"def longest_transformed_string(s: str, k: int) -> int: Returns the length of the longest substring that can be obtained by removing exactly k characters from the original string such that no two adjacent characters are the same. from collections import Counter count = Counter(s) # We should just remove exactly k most frequent characters and calculate the length of the remaining string most_common = count.most_common() idx = 0 # Remove \'k\' characters while k > 0 and idx < len(most_common): char, freq = most_common[idx] if k >= freq: k -= freq count[char] = 0 else: count[char] -= k k = 0 idx += 1 # Compute the length of the transformed string transformed_length = sum(count[char] for char in count if count[char] > 0) return transformed_length"},{"question":"A company is designing a new social networking site, and you have been given the task of implementing some core functionality for managing user friendships. A user can send a friend request to another user, and if the other user accepts it, both users become friends. Your goal is to write a function to determine if there is a way to connect two users directly or indirectly through a series of friends. You will be given a list of friend requests sent by users and friend acceptances which denote a successful relationship. Based on this, you need to handle multiple queries to check if two given users are connected directly or indirectly. Write a function `are_friends(n, requests, queries)` where: - `n` is an integer representing the number of users, numbered from `1` to `n`. - `requests` is a list of tuples where each tuple `(a, b)` represents a friendship accepted between user `a` and user `b`. - `queries` is a list of tuples where each tuple `(x, y)` needs to be checked if user `x` and user `y` are connected. Your function should return a list of boolean values, corresponding to each query in `queries`. Each boolean value should be `True` if the respective query users are connected, either directly or through other friends, otherwise `False`. # Input - `n`: integer (2 ≤ n ≤ 100,000) - `requests`: list of tuples (a, b) (1 ≤ a, b ≤ n) - length of this list will not exceed 200,000. - `queries`: list of tuples (x, y) (1 ≤ x, y ≤ n) - length of this list will not exceed 100,000. # Output - A list of boolean values. # Example Input: ```python n = 5 requests = [(1, 2), (2, 3), (4, 5)] queries = [(1, 3), (1, 5), (2, 4)] ``` Output: ```python [True, False, False] ``` # Explanation - In the above example, user `1` is connected to user `3` through user `2`, so the first query is `True`. - User `1` and user `5` are not connected, so the second query is `False`. - Similarly, user `2` and user `4` are not connected, hence the third query is `False`. Ensure your function is efficient and performs well within the given constraints.","solution":"def are_friends(n, requests, queries): parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for a, b in requests: union(a, b) result = [] for x, y in queries: result.append(find(x) == find(y)) return result"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the minimum number of cuts needed to partition the string into substrings such that each substring is a palindrome. A palindrome is a string that reads the same forward and backward (e.g., \\"racecar\\", \\"madam\\"). The input consists of a single string s (1 le |s| le 2000). Print the minimum number of cuts needed to partition the string into palindromic substrings. **Example:** Input: ``` aab ``` Output: ``` 1 ``` Explanation: The string \\"aab\\" can be split into \\"aa\\" and \\"b\\" with 1 cut, both of which are palindromic.","solution":"def min_cut_palindrome(s): Returns the minimum number of cuts needed to partition the string into palindromic substrings. n = len(s) # Table to store palindrome status is_palindrome = [[False] * n for _ in range(n)] # dp array to store minimum cuts for substrings cuts = [0] * n for i in range(n): min_cut = i # maximum cuts possible for j in range(i + 1): if s[j] == s[i] and (i - j <= 1 or is_palindrome[j + 1][i - 1]): is_palindrome[j][i] = True min_cut = 0 if j == 0 else min(min_cut, cuts[j - 1] + 1) cuts[i] = min_cut return cuts[-1]"},{"question":"**Problem Statement:** You are given a list of distinct integers. Your task is to determine the length of the shortest subarray such that the sum of its elements is greater than or equal to a given value `S`. Given an array of integers `arr` with length `n`, and a positive integer `S`, find the length of the shortest contiguous subarray whose sum is greater than or equal to `S`. If no such subarray exists, return 0 instead. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. - The second line contains `n` space-separated integers `arr[i]` (1 ≤ arr[i] ≤ 10^5) — the elements of the array. - The third line contains a single integer `S` (1 ≤ S ≤ 10^9) — the target sum. # Output - Output a single integer, the length of the shortest subarray with a sum greater than or equal to `S`. If there is no such subarray, output 0. # Example Input ``` 10 1 2 3 4 5 6 7 8 9 10 15 ``` Output ``` 2 ``` Input ``` 5 1 2 3 4 5 100 ``` Output ``` 0 ``` # Explanation - In the first example, the shortest subarray with sum at least `15` is `[7, 8]`, which has length `2`. - In the second example, no subarray has a sum of `100` or more. Hence, the output is `0`.","solution":"def min_subarray_length(arr, S): Returns the length of the shortest subarray whose sum is greater than or equal to S. If no such subarray exists, returns 0. n = len(arr) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 return min_len if min_len != float(\'inf\') else 0"},{"question":"You are given an array of integers a of size n. You need to perform two types of operations: 1. 1 x y: Update the element at index x to y. Note that indices start from 1. 2. 2 l r: Query the sum of the elements from index l to r (inclusive). The first line of input contains two integers n and q (1 le n, q leq 10^5) — the size of the array and the number of operations, respectively. The second line contains n integers, the elements of the array a (1 le a[i] le 10^9). The next q lines contain the operations. For each operation of type 2, print the result of the query. # Input Format - The first line contains two space-separated integers n and q. - The second line contains n space-separated integers representing the array a. - The next q lines contain either: - \\"1 x y\\" (1-based index update operation), or - \\"2 l r\\" (1-based index range sum query). # Output Format - For each operation of type 2, output the sum of elements in the array from index l to r (inclusive). # Example **Input** ``` 5 5 1 2 3 4 5 2 1 3 1 3 10 2 1 3 1 1 7 2 1 5 ``` **Output** ``` 6 13 28 ``` # Explanation 1. The original array is [1, 2, 3, 4, 5]. 2. For the first query, sum of elements from index 1 to 3 is 1 + 2 + 3 = 6. 3. Update the index 3 value to 10. The array becomes [1, 2, 10, 4, 5]. 4. For the second query, sum of elements from index 1 to 3 is 1 + 2 + 10 = 13. 5. Update the index 1 value to 7. The array becomes [7, 2, 10, 4, 5]. 6. For the third query, sum of elements from index 1 to 5 is 7 + 2 + 10 + 4 + 5 = 28.","solution":"class ArrayOperations: def __init__(self, n, array): self.array = array self.n = n self.prefix_sum = self.build_prefix_sum() def build_prefix_sum(self): prefix_sum = [0] * (self.n + 1) for i in range(1, self.n + 1): prefix_sum[i] = prefix_sum[i-1] + self.array[i-1] return prefix_sum def update(self, x, y): old_val = self.array[x-1] delta = y - old_val for i in range(x, self.n + 1): self.prefix_sum[i] += delta self.array[x-1] = y def range_sum(self, l, r): return self.prefix_sum[r] - self.prefix_sum[l-1] def main(n, q, array, operations): ao = ArrayOperations(n, array) results = [] for operation in operations: if operation[0] == 1: _, x, y = operation ao.update(x, y) elif operation[0] == 2: _, l, r = operation results.append(ao.range_sum(l, r)) return results"},{"question":"A large city is organizing a marathon event and expects many participants. To manage the event, the city needs to develop a program to handle the registration efficiently. Each participant will be assigned a unique registration ID starting from 1, in the order they register. Each participant provides their name (a string) and age (an integer). The program needs to support the following features: 1. Register a participant: Add their name and age to the system and return their registration ID. 2. Retrieve participant details by ID: Given a registration ID, return the participant\'s name and age. 3. List participants within a specific age range: Return the names and IDs of participants whose ages fall within a given range (inclusive). The first line contains an integer q (1 ≤ q ≤ 100,000) – the number of queries. Each of the next q lines contains a query which can be one of the following types: - \\"register name age\\": Registers a new participant with the given name (a string of up to 100 characters) and age (an integer between 0 and 200) and returns their registration ID. - \\"get id\\": Given a registration ID (1 ≤ id ≤ current number of participants), returns the name and age of the participant with this ID. - \\"range low high\\": Given two integers low and high (0 ≤ low ≤ high ≤ 200), returns the IDs and names of all participants with ages in the range [low, high], sorted by registration ID in ascending order. Print the result of each query in the order they are processed. For \\"register\\" queries, print the registration ID. For \\"get\\" queries, print the participant\'s name and age. For \\"range\\" queries, print the registration IDs and names of participants in the specified age range, each on a new line. Example: Input: ``` 6 register Alice 30 register Bob 25 register Charlie 30 get 2 range 25 30 register Diana 35 ``` Output: ``` 1 2 3 Bob 25 1 Alice 2 Bob 3 Charlie 4 ```","solution":"class Marathon: def __init__(self): self.participants = [] def register(self, name, age): participant_id = len(self.participants) + 1 self.participants.append({\\"id\\": participant_id, \\"name\\": name, \\"age\\": age}) return participant_id def get(self, participant_id): participant = self.participants[participant_id - 1] return participant[\\"name\\"], participant[\\"age\\"] def range(self, low, high): result = [] for participant in self.participants: if low <= participant[\\"age\\"] <= high: result.append((participant[\\"id\\"], participant[\\"name\\"])) return result def process_queries(queries): marathon = Marathon() results = [] for query in queries: parts = query.split() command = parts[0] if command == \\"register\\": name = parts[1] age = int(parts[2]) results.append(marathon.register(name, age)) elif command == \\"get\\": participant_id = int(parts[1]) name, age = marathon.get(participant_id) results.append(f\\"{name} {age}\\") elif command == \\"range\\": low = int(parts[1]) high = int(parts[2]) participants_in_range = marathon.range(low, high) for participant_id, name in participants_in_range: results.append(f\\"{participant_id} {name}\\") return results"},{"question":"Zachary is building a treehouse in his garden and he wants to decorate it with strings of lights. He has multiple strings, and each string has a certain number of lights on it. To maximize the visibility and ensure a balanced decoration, Zachary wants to find out how many strings of lights he can use such that the total number of lights in the chosen strings is as large as possible, but the total number of lights used from the strings should not exceed a given limit L. The first line of the input contains an integer n (1 ≤ n ≤ 1000) – the number of strings of lights. The second line contains n integers ai (1 ≤ ai ≤ 10000) – the number of lights on each string. The third line contains an integer L (1 ≤ L ≤ 1000000) – the maximum total number of lights Zachary can use. Output a single integer – the maximum number of strings Zachary can use without exceeding the limit L. # Example Input ``` 5 100 200 300 400 500 800 ``` Output ``` 3 ``` Explanation Zachary can choose strings with 100, 200, and 300 lights respectively. The total number of lights is 600, which does not exceed the limit of 800, and the chosen number of strings is maximized to 3.","solution":"def max_strings(n, lights, L): This function returns the maximum number of light strings Zachary can use without exceeding the limit L. lights.sort() # Sort the lights to use the strings with fewer lights first count = 0 total_lights = 0 for light in lights: if total_lights + light <= L: total_lights += light count += 1 else: break return count"},{"question":"A message delivery system in a company\'s local network comprises of a set of computers connected by a network of bidirectional cables. Each computer is assigned a unique number ranging from 1 to n, where n is the number of computers. The network is represented as an undirected graph with each computer corresponding to a vertex. The system needs to ensure redundancy to prevent message loss in case of a failure of any cable. Redundancy is ensured if there is more than one unique path between any two computers within the network. You are provided with the network configuration as a set of cables, where each cable connects two distinct computers. Your task is to determine the minimum additional cables needed to be installed in such a way that the message delivery system ensures redundancy for every pair of computers. # Input The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 100000), the number of computers and the number of existing cables, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a cable that directly connects computer u and computer v. # Output Output a single integer, the minimum number of additional cables required to ensure redundancy in the message delivery system. # Example **Input:** ``` 5 3 1 2 2 3 4 5 ``` **Output:** ``` 2 ``` **Explanation:** To ensure that there are two unique paths between every pair of computers, we can add cables between (1, 5) and (3, 4), ensuring every computer is connected in a redundant manner. (Note that there are multiple correct solutions for the cables to be added, but the answer must reflect the minimum quantity needed.)","solution":"def minimum_additional_cables_needed(n, m, connections): from collections import defaultdict, deque def bfs_component(component_graph, start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in component_graph[node]: if neighbor not in visited: queue.append(neighbor) return visited graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) # Find all connected components all_nodes = set(range(1, n + 1)) components = [] while all_nodes: start = all_nodes.pop() component = bfs_component(graph, start) components.append(component) all_nodes -= component # To fully connect k components, we need at least (k-1) cables num_components = len(components) return max(0, num_components - 1)"},{"question":"A common challenge in network routing is to determine if a message can traverse from one computer to another in a computer network. You are given a graph where nodes represent computers and edges represent direct communication links between computers. The edges are undirected and there are no weights. Write a function to determine whether there is a path between two given computers in the network. The first line of input contains two integers, n and m, where n (2 ≤ n ≤ 1000) is the number of computers and m (1 ≤ m ≤ 10000) is the number of direct links between computers. Each of the next m lines contains two integers ui and vi (1 ≤ ui, vi ≤ n), representing a direct link between computer ui and computer vi. The last line contains two integers, start and end (1 ≤ start, end ≤ n), which represent the starting and ending computers for the path you need to check. Output \\"YES\\" (without quotes) if there is a path between the start and end computers, otherwise output \\"NO\\". Example: Input: 5 4 1 2 2 3 3 4 4 5 1 5 Output: YES Input: 5 3 1 2 2 3 3 4 1 5 Output: NO","solution":"def is_path(n, m, edges, start, end): Determines if there is a path between two computers in a computer network graph. Parameters: - n: int, number of computers. - m: int, number of direct links between computers. - edges: List of tuples, each representing a direct link between two computers. - start: int, the starting computer. - end: int, the ending computer. Returns: - \'YES\' if there is a path between start and end, else \'NO\'. from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Breadth-First Search (BFS) to check for path existence visited = [False] * (n + 1) queue = deque([start]) visited[start] = True while queue: current = queue.popleft() if current == end: return \\"YES\\" for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return \\"NO\\""},{"question":"Given an array of n integers and an integer k, determine if there exists a subset of the array that has exactly k elements that add up to a given integer m. If such a subset exists, print \\"POSSIBLE\\" (without the quotes), otherwise print \\"IMPOSSIBLE\\" (without the quotes). The first line contains three integers n, m, and k (2 ≤ n ≤ 50, 1 ≤ m ≤ 1000, 1 ≤ k ≤ n) — the number of elements in the array, the target sum, and the number of elements in the subset respectively. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100). Output a single line: \\"POSSIBLE\\" if there exists a subset of exactly k elements that add up to m, otherwise \\"IMPOSSIBLE\\". Example: Input: 5 10 3 1 2 3 4 5 Output: POSSIBLE","solution":"from itertools import combinations def is_subset_sum_possible(n, m, k, arr): Determine if there exists a subset of the array that has exactly k elements that add up to m. If such a subset exists, returns \\"POSSIBLE\\", otherwise \\"IMPOSSIBLE\\". for subset in combinations(arr, k): if sum(subset) == m: return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"You are given an undirected graph with n nodes and m edges. Each node is numbered from 1 to n. You need to determine if there exists a simple path (a path which doesn\'t visit any vertex more than once) between two given nodes a and b. The first line of the input contains two integers t (1 leq t leq 10^3) — the number of test cases. Each test case contains: The first line contains two integers n (2 leq n leq 10^4) — the number of nodes, and m (1 leq m leq 10^5) — the number of edges. The next m lines each contain two integers u and v (1 leq u, v leq n) representing an edge between nodes u and v. The last line contains two integers a and b (1 leq a, b leq n) — the nodes between which you need to determine if a path exists. The sum of n across all test cases does not exceed 10^5 and the sum of m across all test cases does not exceed 10^6. For each test case, output \\"YES\\" if there exists a simple path between nodes a and b. Otherwise, output \\"NO\\". # Sample Input: ``` 2 4 4 1 2 2 3 3 4 4 1 1 3 3 2 1 2 2 3 1 2 ``` # Sample Output: ``` YES NO ```","solution":"from collections import defaultdict, deque def bfs(graph, start, end): visited = set() queue = deque([start]) while queue: current = queue.popleft() if current == end: return True if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return False def path_exists(t, test_cases): results = [] for i in range(t): n, m, edges, a, b = test_cases[i] graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) if bfs(graph, a, b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string containing only lowercase alphabetical characters, determine the length of the longest substring that contains no repeating characters. The input is a single string s (1 ≤ |s| ≤ 100,000). Output a single integer — the length of the longest substring with all unique characters.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. # Create a set to store the unique characters in the current window char_set = set() left = 0 max_length = 0 # Iterate over the characters in the string with a sliding window approach for right in range(len(s)): # If character is already in the set, remove from the left until it\'s unique while s[right] in char_set: char_set.remove(s[left]) left += 1 # Add the current character to the set char_set.add(s[right]) # Update the maximum length of the substring max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a list of integers representing the cost of items you want to buy, and an integer value representing the total money you have, determine if there\'s a subset of the items that add up exactly to the total money you have. The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of items. The second line contains n integers (1 ≤ item_cost ≤ 1000), representing the cost of each item. The third line contains an integer total_money (1 ≤ total_money ≤ 1000). Print \\"YES\\" (without quotes) if there\'s a subset of items whose total cost is exactly equal to total_money, or \\"NO\\" (without quotes) otherwise. Example: Input: 5 1 2 3 4 5 9 Output: YES In this example, the subset {4, 5} adds up to the total money of 9.","solution":"def can_buy_with_exact_money(items, total_money): Determines if there is a subset of items that adds up exactly to total_money. Args: items (list of int): List of integers representing the cost of items. total_money (int): Integer representing the total money available. Returns: str: \'YES\' if such a subset exists, \'NO\' otherwise. n = len(items) dp = [False] * (total_money + 1) dp[0] = True for item in items: for j in range(total_money, item - 1, -1): if dp[j - item]: dp[j] = True return \\"YES\\" if dp[total_money] else \\"NO\\""},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node has an integer value associated with it. Your task is to process multiple queries where each query asks you to calculate the sum of values of nodes that are connected to a given starting node, either directly or indirectly. Two nodes are considered connected if there is a path between them. The first line of input contains two integers `n` and `m` (`1 ≤ n, m ≤ 10^5`) — the number of nodes and the number of edges, respectively. The second line contains `n` integers, where the `i`-th integer is the value associated with the `i`-th node. The next `m` lines each contain two integers `u` and `v` (`1 ≤ u, v ≤ n`) indicating that there is an edge between node `u` and node `v`. The next line contains an integer `q` (`1 ≤ q ≤ 10^5`), the number of queries. The next `q` lines each contain a single integer `x` (`1 ≤ x ≤ n`) representing the starting node for that query. For each query, output a single integer — the sum of values of nodes that are connected to node `x`. Input: ``` 5 4 1 2 3 4 5 1 2 2 3 3 4 4 5 3 1 3 5 ``` Output: ``` 15 15 15 ``` Explanation: - For the first query, starting from node `1`, nodes `1, 2, 3, 4,` and `5` are connected, and their values sum to `15`. - For the second query, starting from node `3`, nodes `1, 2, 3, 4,` and `5` are also connected, and their values sum to `15`. - For the third query, starting from node `5`, nodes `1, 2, 3, 4,` and `5` are also connected, and their values sum to `15`.","solution":"def find_connected_components(n, edges): from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) components = [] def bfs(node): queue = deque([node]) component = [] visited[node] = True while queue: current = queue.popleft() component.append(current) for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component for node in range(1, n + 1): if not visited[node]: component = bfs(node) components.append(component) return components def preprocess_values(n, values, components): value_sums = {} for component in components: component_sum = sum(values[node - 1] for node in component) for node in component: value_sums[node] = component_sum return value_sums def process_queries(n, edges, values, queries): components = find_connected_components(n, edges) value_sums = preprocess_values(n, values, components) results = [value_sums[query] for query in queries] return results # Example usage: n = 5 m = 4 values = [1, 2, 3, 4, 5] edges = [(1, 2), (2, 3), (3, 4), (4, 5)] queries = [1, 3, 5] print(process_queries(n, edges, values, queries))"},{"question":"# Capturing Values You are given a list of integers and an integer `k`. Your task is to determine if there exists two distinct indices `i` and `j` in the list such that the sum of `a[i]` and `a[j]` is equal to `k`. # Input The input consists of two lines: 1. The first line contains two integers `n` and `k` (1 le n le 10^5, 1 le k le 10^9) where `n` is the number of integers in the list and `k` is the target sum. 2. The second line contains `n` space-separated integers representing the elements of the list (-10^9 le a_i le 10^9). # Output Output \\"YES\\" if there exist two distinct indices `i` and `j` in the list such that a[i] + a[j] = k. Otherwise, output \\"NO\\". # Example Input ``` 5 9 2 7 11 15 1 ``` Output ``` YES ``` Input ``` 5 10 1 2 3 4 5 ``` Output ``` NO ``` # Explanation In the first example, the pair (2, 7) sums up to 9, so the output is \\"YES\\". In the second example, there are no pairs that sum up to 10, so the output is \\"NO\\".","solution":"def has_pair_with_sum(numbers, k): Determine if there exist two distinct indices i and j in the list such that numbers[i] + numbers[j] = k. :param numbers: List of integers. :param k: Integer, the target sum. :return: \\"YES\\" if such a pair exists, otherwise \\"NO\\". seen = set() for number in numbers: if k - number in seen: return \\"YES\\" seen.add(number) return \\"NO\\""},{"question":"A pharmaceutical company has created a new drug and wants to distribute it to patients based on their health status. Each patient has a health score represented by an integer from 0 to 100 inclusive, where 0 indicates the worst health condition and 100 indicates perfect health. The company plans to categorize the patients into several groups and assign different dosages as follows: - Group A: Health score 0 to 20, inclusive. Dosage 50 mg. - Group B: Health score 21 to 40, inclusive. Dosage 40 mg. - Group C: Health score 41 to 60, inclusive. Dosage 30 mg. - Group D: Health score 61 to 80, inclusive. Dosage 20 mg. - Group E: Health score 81 to 100, inclusive. Dosage 10 mg. Given a list of integers representing the health scores of patients, your task is to determine the dosage for each patient based on their health score. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — the number of patients. The second line contains n integers separated by spaces, each indicating a patient\'s health score. For each patient\'s health score given in the input, output the corresponding dosage of the drug, each on a new line.","solution":"def determine_dosage(n, health_scores): dosages = [] for score in health_scores: if 0 <= score <= 20: dosages.append(50) elif 21 <= score <= 40: dosages.append(40) elif 41 <= score <= 60: dosages.append(30) elif 61 <= score <= 80: dosages.append(20) elif 81 <= score <= 100: dosages.append(10) return dosages # Example usage: n = 5 health_scores = [0, 21, 45, 80, 99] print(determine_dosage(n, health_scores))"},{"question":"You are given an array of integers where each integer represents the height of a hill. The array forms a sequence of hills. A peak is defined as a hill that is taller than both its neighbors. Your task is to count the number of peaks in the sequence. The first line of the input contains a single integer n (3 ≤ n ≤ 100,000) — the number of hills. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the hills. Print a single integer — the number of peaks in the sequence. For example, for the input: 5 1 3 2 4 1 The output should be: 2 Explanation: There are 2 peaks in the sequence: the hill with height 3 (at index 2), and the hill with height 4 (at index 4).","solution":"def count_peaks(n, hills): Count the number of peaks in the sequence of hills. Parameters: n (int): Number of hills. hills (list of int): Heights of the hills. Returns: int: Number of peaks in the sequence. peak_count = 0 for i in range(1, n - 1): if hills[i] > hills[i - 1] and hills[i] > hills[i + 1]: peak_count += 1 return peak_count"},{"question":"In a faraway kingdom, there exists a unique straight river that has a peculiar phenomenon. Along both banks of the river, magical flowers bloom in distinct patterns. These flowers have special properties: each flower on the left bank can attract exactly one flower on the right bank directly opposite to it. The problem is, if there are two flowers on the same side that try to pair with the same flower on the opposite side, they will cancel each other out, and none of those flowers can form a pair. You are chosen by the queen to organize a grand festival, where pairs of flowers will be used for decorative purposes. To ensure the event is perfect, you must determine the maximum number of unique pairs that can be formed between the flowers on the left bank and the right bank. Each flower on the left bank can form a pair with exactly one flower on the right bank such that the pair is unique and no two flowers on the same bank share the same partner. You will be given the list of positions of flowers on both banks of the river. Your task is to calculate the maximum number of unique pairs that can be formed from the given positions of the flowers. Input: The first line contains an integer n (1 ≤ n ≤ 1000) — the number of flowers on the left bank. The second line contains n distinct integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) — the positions of the flowers on the left bank. The third line contains an integer m (1 ≤ m ≤ 1000) — the number of flowers on the right bank. The fourth line contains m distinct integers b1, b2, ..., bm (0 ≤ bi ≤ 10^9) — the positions of the flowers on the right bank. Output: Print a single integer — the maximum number of unique pairs that can be formed. Example: Input: 5 1 3 5 7 9 4 2 4 6 8 Output: 4 Explanation: The unique pairs that can be formed are (1, 2), (3, 4), (5, 6), and (7, 8). Hence, the maximum number of unique pairs is 4.","solution":"def max_unique_pairs(n, left_bank, m, right_bank): left_bank.sort() right_bank.sort() i, j = 0, 0 pairs = 0 while i < n and j < m: if abs(left_bank[i] - right_bank[j]) <= 1: pairs += 1 i += 1 j += 1 elif left_bank[i] < right_bank[j]: i += 1 else: j += 1 return pairs"},{"question":"You are given a string s consisting of lowercase Latin letters (\'a\'-\'z\') and an integer k (1 le k le |s|). Your task is to determine the lexicographically smallest string possible by removing exactly k characters from s. A string t is lexicographically smaller than a string u if and only if one of the following holds: - t is a prefix of u and t neq u. - In the first position where t and u differ, the string t has a smaller character than u. # Input - The first line contains an integer n (1 le n le 10^5) — the length of the string s. - The second line contains the string s. - The third line contains the integer k (1 le k le n). # Output Print the lexicographically smallest string possible after removing exactly k characters from the string s. # Example Input ``` 6 acdbcb 2 ``` Output ``` abcb ``` Hint: Use a greedy algorithm to repeatedly remove the character that allows the smallest resulting sequence.","solution":"def lexicographically_smallest_string(s, k): n = len(s) stack = [] for i in range(n): while stack and k > 0 and stack[-1] > s[i]: stack.pop() k -= 1 stack.append(s[i]) # If there are more characters to remove (k > 0), remove from the end while k > 0: stack.pop() k -= 1 return \'\'.join(stack)"},{"question":"Consider an array of integers of length n. You need to reorder the array such that the absolute difference between any two consecutive elements is minimized. The first input line contains an integer n (2 ≤ n ≤ 105). The second line contains n integers separated by space. In the first output line, print the reordered array such that the absolute difference between any two consecutive elements is minimized. If there are multiple solutions, you are allowed to print any of them. # Example Input: 5 4 2 1 3 5 Output: 1 2 3 4 5 Input: 4 10 1 14 3 Output: 1 3 10 14","solution":"def reorder_min_absolute_diff(arr): Reorders the array such that the absolute difference between any two consecutive elements is minimized. arr.sort() return arr"},{"question":"You are given two words, word1 and word2. Determine the minimum number of steps required to convert word1 to word2. In each step, you can: 1. Insert a character 2. Delete a character 3. Replace a character Your task is to write a function that calculates the minimum edit distance between the two words. # Input Format - The first line contains word1 (1 ≤ |word1| ≤ 1000). - The second line contains word2 (1 ≤ |word2| ≤ 1000). # Output Format - Output the minimum number of steps required to convert word1 to word2. # Example Input ``` horse ros ``` Output ``` 3 ``` Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\')","solution":"def minDistance(word1, word2): m, n = len(word1), len(word2) # Create a 2D dp array, dp[i][j] represents the minimum edit distance from word1[:i] to word2[:j] dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp array for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # DP compute for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Delete dp[i][j - 1] + 1, # Insert dp[i - 1][j - 1] + 1 # Replace ) return dp[m][n]"},{"question":"You are given two strings, s and t. You can transform s into t by performing the following operation any number of times: - Pick a non-empty substring of s which is also a prefix of t, and move it to another position in s. The transformation is subject to the constraint that the order of characters within each occurrence of the substring in s remains the same. Your task is to determine whether it is possible to transform s into t using any number of the aforementioned operations. If possible, output \\"YES\\", otherwise output \\"NO\\". # Input The first line contains a single integer q (1 le q le 10^3), the number of test cases. Each of the following lines contains two strings s and t (1 le |s|,|t| le 1000) consisting of lowercase English letters. # Output For each test case, print \\"YES\\" if it is possible to transform s into t, otherwise print \\"NO\\". # Example Input: ``` 2 abcab abc abc acd ``` Output: ``` YES NO ``` # Explanation In the first test case, the string \\"abcab\\" can be transformed into \\"abc\\" by removing the substring \\"ab\\". In the second test case, it is not possible to transform \\"abc\\" into \\"acd\\" due to the differences in characters present.","solution":"def can_transform(q, queries): results = [] for s, t in queries: can_convert = False t_len = len(t) # Check if we can find all characters of t in s i, j = 0, 0 while i < len(s) and j < t_len: if s[i] == t[j]: j += 1 i += 1 if j == t_len: can_convert = True if can_convert: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a 2D grid, you are given a starting point (sx, sy) and an ending point (ex, ey). The grid consists of N obstacles, each occupying one cell. Your goal is to find the shortest path from the starting point to the ending point that avoids the obstacles. You can only move horizontally or vertically on the grid, one cell at a time. The first line of input contains two integers m and n (1 ≤ m, n ≤ 1000) representing the dimensions of the grid. The second line contains four integers sx, sy, ex, ey (0 ≤ sx, sy, ex, ey < m, n) representing the starting point and the ending point. The third line contains a single integer N (0 ≤ N ≤ 1000) representing the number of obstacles. Each of the next N lines contains two integers ox, oy (0 ≤ ox < m, 0 ≤ oy < n), representing the coordinates of each obstacle. Print the shortest path length from (sx, sy) to (ex, ey). If there is no possible path, print -1. Input format: ``` m n sx sy ex ey N ox1 oy1 ox2 oy2 ... oxN oyN ``` Output format: ``` length ``` Sample Input 1: ``` 5 5 0 0 4 4 3 1 1 2 2 3 3 ``` Sample Output 1: ``` 8 ``` Sample Input 2: ``` 5 5 0 0 4 4 5 1 1 2 2 3 3 4 2 2 4 ``` Sample Output 2: ``` -1 ``` Note: - The provided paths are examples; there might be multiple shortest paths. - Use a breadth-first search algorithm to find the shortest path from the starting point to the ending point while avoiding the obstacles.","solution":"from collections import deque def shortest_path(m, n, sx, sy, ex, ey, obstacles): Returns the shortest path length from (sx, sy) to (ex, ey) avoiding obstacles on a grid of size mxn. If there is no possible path, returns -1. grid = [[0] * n for _ in range(m)] for ox, oy in obstacles: grid[ox][oy] = -1 # Mark obstacles as -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(sx, sy, 0)]) visited = set() visited.add((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (ex, ey): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] != -1: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 # Path not found"},{"question":"**Problem Statement:** You are given a grid of size `n x m` where each cell can either be blocked (`#`) or open (`.`). A robot is initially placed at the top-left corner of the grid (i.e., cell (1, 1)) and aims to reach the bottom-right corner (i.e., cell (n, m)). The robot can move in four possible directions: up, down, left, and right. However, it can only move to an adjacent cell if that cell is open. Your task is to determine the number of distinct shortest paths the robot can take to reach its destination. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000), the dimensions of the grid. - The next `n` lines each contain `m` characters, representing the grid. Each character is either `#` (blocked cell) or `.` (open cell). # Output - Print a single integer, the number of distinct shortest paths from the top-left corner to the bottom-right corner. If there is no such path, print `0`. # Example Input ``` 3 3 ... .#. ... ``` Output ``` 2 ``` Input ``` 3 3 ... # ... ``` Output ``` 0 ``` # Explanation In the first example, there are 2 distinct shortest paths: 1. (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) 2. (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) In the second example, no path exists due to the blocked middle row.","solution":"def num_shortest_paths(grid): n = len(grid) m = len(grid[0]) if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 # Initialize a 2D list to store the number of ways to reach each cell dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Starting point for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"Wanda, the witch, has recently turned her attention to magic squares. A magic square is a grid of numbers where the sums of the numbers in each row, each column, and both main diagonals are the same. Wanda is playing with a special kind of rectangular grid, where each row is a permutation of numbers from 1 to n. She wants to find how many rows should be there so that the entire grid can form at least one magic square subgrid of size k×k. The first line of input contains two integers n (1 ≤ n ≤ 1000) and k (1 ≤ k ≤ n) — the number of distinct numbers in each row and the size of the required magic square subgrid respectively. Print a single integer r, the minimum number of rows required such that the grid has at least one k×k subgrid that forms a magic square. A magic square of size 1×1 is any single number, hence the result should always be 1 in this case. Example: Input: 4 2 Output: 2 Explanation: A 2×2 subgrid forming a magic square requires the sums of its both rows, both columns, and both diagonals to be the same. For example, a grid like this: 1 2 3 4 4 3 2 1 has a 2×2 magic subgrid starting from cell (1,1): 1 2 4 3 Both rows, columns, and diagonals sum to 5. Hence, we need at least 2 rows.","solution":"def min_rows_for_magic_square(n, k): Returns the minimum number of rows required such that the grid has at least one k×k subgrid that forms a magic square. if k == 1: return 1 return k"},{"question":"Alice is fond of symmetry in her chocolate arrangements. Given a set of boxes, she is happy only if the arrangement of chocolate pieces is symmetric. To help his friend Bob, Charlie needs to rearrange the chocolate pieces in the minimum number of moves to achieve this symmetric arrangement. In one move, Charlie can pick up a piece of chocolate from any box and move it to any other box. Charlie needs your help to determine the number of moves required. The first line contains a single integer n (1 le n le 10^5) – the number of chocolate boxes. The second line contains n integers a_1, a_2, ldots, a_n (0 le a_i le 1000) – the number of chocolate pieces in the i-th box. Output a single integer x: the minimum number of moves required to rearrange the chocolate pieces so that the arrangement becomes symmetric. # Example: ``` Input: 5 1 2 3 2 1 Output: 0 Input: 4 1 2 2 3 Output: 1 ``` In the first example, the arrangement is already symmetric so no moves are required. In the second example, moving one chocolate piece from box 4 to box 1 will make the arrangement symmetric.","solution":"def min_moves_to_symmetric(n, choco_boxes): This function takes in the number of chocolate boxes and the list denoting the number of chocolates in each box. It returns the minimum number of moves required to make the arrangement symmetric. # Initialize move counter moves = 0 # Use two pointers start = 0 end = n - 1 while start < end: if choco_boxes[start] == choco_boxes[end]: start += 1 end -= 1 elif choco_boxes[start] < choco_boxes[end]: choco_boxes[start + 1] += choco_boxes[start] start += 1 moves += 1 else: choco_boxes[end - 1] += choco_boxes[end] end -= 1 moves += 1 return moves"},{"question":"You are given an array of integers representing the heights of trees in a forest. After a powerful storm, some trees were blown down completely, reducing their heights to 0. You are tasked with determining the highest possible view from the forest by considering only the intact trees. Write a function `max_view_height` that accepts an array of integers where each integer corresponds to the height of a tree in meters. Your task is to return the height of the tallest tree that has remained standing after the storm. If no trees are standing (i.e., all trees have a height of 0), return 0. # Function Signature ```python def max_view_height(tree_heights: List[int]) -> int: pass ``` # Input - An array of integers `tree_heights` where 0 ≤ len(tree_heights) ≤ 10^6 and 0 ≤ tree_heights[i] ≤ 10^4. # Output - An integer representing the height of the tallest standing tree. If all heights are 0, return 0. # Example ```python assert max_view_height([3, 0, 2, 5, 4, 0]) == 5 assert max_view_height([0, 0, 0, 0]) == 0 assert max_view_height([10, 20, 30, 4, 15]) == 30 ``` # Explanation In the first example, the highest tree standing after the storm has a height of 5 meters. In the second example, all trees have height 0, so the function returns 0. In the third example, the highest tree standing after the storm has a height of 30 meters.","solution":"from typing import List def max_view_height(tree_heights: List[int]) -> int: Returns the height of the tallest tree that has remained standing after the storm. If no trees are standing, returns 0. if not tree_heights: return 0 return max(tree_heights)"},{"question":"You are given a sequence of integers. Your task is to find the length of the longest subarray which contains at most two distinct integers. A subarray is a contiguous part of an array. Input - The first line of the input contains an integer n (1 ≤ n ≤ 10^5) — the number of integers in the sequence. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the elements of the sequence. Output - Print the length of the longest subarray that contains at most two distinct integers. Example Input: 6 1 2 1 2 3 2 Output: 4 Explanation In the example, the longest subarray that contains at most two distinct integers is [1, 2, 1, 2], which has length 4.","solution":"def longest_subarray_with_two_distinct(nums): Returns the length of the longest subarray which contains at most two distinct integers. if not nums: return 0 left = 0 max_length = 0 count = {} for right in range(len(nums)): if nums[right] in count: count[nums[right]] += 1 else: count[nums[right]] = 1 while len(count) > 2: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 current_length = right - left + 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are given a list of integers nums and an integer m. Your task is to split the list into m non-overlapping subarrays such that the largest sum of any subarray is minimized. Return the minimized largest sum. A subarray is a contiguous part of the array. The first line of the input contains two integers n and m (1 le n le 10^4, 1 le m le n), the length of the array and the number of subarrays respectively. The second line contains n integers representing the elements of the array nums (1 le nums[i] le 10^6). Output a single integer — the minimized largest sum among the m subarrays. For example, if the input list is [7, 2, 5, 10, 8] and m = 2, the result is 18 since splitting the list into [7, 2, 5] and [10, 8] produces the smallest possible largest sum among the subarrays.","solution":"def split_array(nums, m): Splits the array into m non-overlapping subarrays such that the largest sum of any subarray is minimized. Returns the minimized largest sum. def can_split(nums, max_subarray_sum, m): Helper function to determine if it\'s possible to split nums into m subarrays with each subarray\'s sum <= max_subarray_sum. subarray_count = 1 current_sum = 0 for num in nums: current_sum += num if current_sum > max_subarray_sum: subarray_count += 1 current_sum = num if subarray_count > m: return False return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_split(nums, mid, m): right = mid else: left = mid + 1 return left"},{"question":"A company\'s IT department manages a Christmas gift exchange among its employees. There are n employees, each with a gift score representing the value of the gift they bring. Every day, during an exchange session, each employee can choose a gift that hasn\'t been taken yet. The management wants to maximize the overall happiness of the employees by minimizing the difference between the highest and lowest gift scores chosen each day. The administration has set a cap on the maximum number of days an exchange can last, allowing multiple exchanges per day with different groups of employees, but each employee can only participate on one specific day. The goal is to find out the minimum possible difference between the highest and lowest gift scores for all possible groups each day. The difference between the highest and lowest scores in a group of chosen gifts is defined as max(group) - min(group). You are given a list of gift scores and the preferences of employees, which determine the specific day each employee will participate. Determine the minimum possible difference for each day. The first line contains two integers n and d (1 leq n leq 5000, 1 leq d leq n), the number of employees and the number of days respectively. The second line contains n integers s_1, s_2, ldots, s_n (1 leq s_i leq 10^6), where s_i is the gift score of the i-th employee. The third line contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq d), indicating that the i-th employee will participate on the p_i-th day. For each of the d days, print the minimum possible difference between the highest and lowest gift scores chosen on that day. If no employees are participating on a given day, the difference is zero. Consider the first example: Input: ``` 6 3 3 8 5 12 7 6 1 2 1 3 2 3 ``` Explanation: - On day 1, the participating employees have gift scores [3, 5]. The minimum difference is 2 (5 - 3). - On day 2, the participating employees have gift scores [8, 7]. The minimum difference is 1 (8 - 7). - On day 3, the participating employees have gift scores [12, 6]. The minimum difference is 6 (12 - 6). Sample Output: ``` 2 1 6 ```","solution":"def min_diff_scores(n, d, scores, preferences): Function to compute the minimum possible difference between the highest and lowest gift scores for each day. Parameters: n (int): Number of employees. d (int): Number of days. scores (list of int): List of gift scores for each employee. preferences (list of int): List indicating which day each employee will participate. Returns: list of int: List of minimum possible differences for each day. # Create a list of lists to store scores for each day day_scores = [[] for _ in range(d)] # Assign each score to the corresponding day\'s list based on preferences for i in range(n): day_scores[preferences[i] - 1].append(scores[i]) # Find the min difference for each day or 0 if no employees on that day min_diffs = [] for day in day_scores: if len(day) > 0: min_diffs.append(max(day) - min(day)) else: min_diffs.append(0) return min_diffs # Example usage print(min_diff_scores(6, 3, [3, 8, 5, 12, 7, 6], [1, 2, 1, 3, 2, 3])) # Output: [2, 1, 6]"},{"question":"In a quiet village, a quiet librarian is organizing books in her library. The library has exactly n bookshelves, numbered from 1 to n, and each bookshelf contains exactly m books. Each book has a certain width, and the librarian wants to arrange the books in such a way that it minimizes the visual clutter. To achieve this, she wants to ensure that the difference in total widths of books between any two adjacent bookshelves is minimized. You are given the initial widths of the books on each shelf. You can move books between adjacent bookshelves to achieve a better arrangement. Write a program to determine the minimum possible difference in total widths of books between any two adjacent bookshelves that can be obtained by redistributing the books optimally. # Input Format - The first line contains two integers n and m (1 ≤ n, m ≤ 100), representing the number of bookshelves and the number of books on each shelf, respectively. - Each of the next n lines contains m integers, separated by spaces, representing the widths of the books on each respective bookshelf. # Output Format - Print a single integer, the minimum possible difference in total widths of books between any two adjacent bookshelves after redistributing the books optimally. # Sample Input ``` 3 4 1 2 3 4 2 3 4 5 1 4 3 2 ``` # Sample Output ``` 0 ``` # Explanation In the given example, the initial total widths of the books on each shelf are: - Shelf 1: 1 + 2 + 3 + 4 = 10 - Shelf 2: 2 + 3 + 4 + 5 = 14 - Shelf 3: 1 + 4 + 3 + 2 = 10 To minimize the difference between the total widths of books on adjacent bookshelves, one optimal way is to redistribute the books as follows: - Move one book of width 2 from Shelf 2 to Shelf 1. After redistribution, the total widths of books on each shelf become: - Shelf 1: 1 + 2 + 3 + 4 + 2 = 12 - Shelf 2: 2 + 3 + 4 + 5 - 2 = 12 - Shelf 3: 1 + 4 + 3 + 2 = 10 Now, the differences between adjacent shelves are: - |12 - 12| = 0 - |12 - 10| = 2 We can see that the minimum possible difference is 0, which is our output.","solution":"def min_possible_difference(n, m, shelves): Find the minimum possible difference in total widths of books between any two adjacent bookshelves after optimal redistribution. :param n: The number of bookshelves. :param m: The number of books on each shelf. :param shelves: A list of lists containing the widths of books on each shelf. :return: The minimum possible difference. total_widths = [sum(shelf) for shelf in shelves] avg_width = sum(total_widths) // n widths = sorted(total_widths) min_diff = max(widths) - min(widths) return min_diff"},{"question":"You have been given an array of integers representing the heights of bar graphs. The width of each bar is the same, which is 1. You are to find out the maximum area of a rectangle that can be formed using consecutive bars of the given heights. The array of integers {h_1, h_2, ldots, h_n} represents the heights of the bar graphs, where h_i is the height of the i-th bar. The width of each bar is 1. Example: Assume the array of heights is [2, 1, 5, 6, 2, 3]. Below is a representation of the histogram: ``` _ | | | | _ | | _ | | | | _| | | | | |_| | | |_|_|_|_|_|_| ``` For this histogram, the maximum rectangular area is 10 (which can be achieved by the third and fourth bars with height 5 and 6 respectively, forming a rectangle of height 5 and width 2). Your task is to implement a function that takes an array of integers and returns the maximum rectangular area formed by consecutive bars. # Input - The first line contains a single integer n, the number of bars in the histogram (1 leq n leq 10^5). - The second line contains n space-separated integers h_1, h_2, ldots, h_n (1 leq h_i leq 10^9), representing the heights of the bars. # Output - Output a single integer - the maximum area of the rectangle that can be formed using the heights of the given bars. # Example Input: ``` 6 2 1 5 6 2 3 ``` Output: ``` 10 ``` # Note - The result can be achieved either by brute force using nested loops or by using an optimized approach such as a stack data structure to manage the height indices efficiently for calculating the area.","solution":"def largestRectangleArea(heights): Returns the maximum area of a rectangle formed by consecutive bars given the heights of the bars. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a string `s` consisting of lowercase letters and an integer `k`, your task is to determine if you can remove exactly `k` characters from the string such that the resultant string is a palindrome. A palindrome is a string that reads the same forwards and backwards. Return \\"YES\\" if it\'s possible to obtain a palindrome by removing exactly `k` characters, otherwise return \\"NO\\". Input: - The first line contains a string `s` (1 ≤ |s| ≤ 1000). - The second line contains an integer `k` (0 ≤ k ≤ 1000). Output: - Print \\"YES\\" if you can remove exactly `k` characters to form a palindrome, otherwise print \\"NO\\". Example: ``` Input madam 0 Output YES ``` ``` Input abccba 2 Output YES ``` ``` Input abcdef 2 Output NO ```","solution":"def can_form_palindrome(s, k): def is_palindrome(st): return st == st[::-1] n = len(s) # Check all substrings of length (n - k) for i in range(n - k + 1): if is_palindrome(s[i:i + n - k]): return \\"YES\\" return \\"NO\\""},{"question":"Write a function that generates all valid combinations of n pairs of parentheses. A valid combination requires that each opening parenthesis has a corresponding closing parenthesis, and the pairs are correctly nested. # Input: An integer `n` (1 ≤ n ≤ 8) representing the number of pairs of parentheses. # Output: Return a list of strings, where each string represents a valid combination of n pairs of parentheses. # Example: - Input: `n = 3` - Output: `[\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"]` **Explanation:** 1. \\"((()))\\" - All opening brackets are closed in the correct order. 2. \\"(()())\\" - The second opening parenthesis is closed before closing the first. 3. \\"(())()\\" - The first two opening brackets are closed before introducing the next pair. 4. \\"()(())\\" - The first opening bracket is closed before introducing the next pair. 5. \\"()()()\\" - Every opening bracket is immediately closed. Write the function `generateParenthesis(n: int) -> List[str]` to achieve this.","solution":"from typing import List def generateParenthesis(n: int) -> List[str]: Generate all combinations of n pairs of parentheses. :param n: int - the number of pairs of parentheses :return: List[str] - all valid combinations of n pairs of parentheses def backtrack(S, left, right): if len(S) == 2 * n: res.append(\\"\\".join(S)) return if left < n: S.append(\'(\') backtrack(S, left + 1, right) S.pop() if right < left: S.append(\')\') backtrack(S, left, right + 1) S.pop() res = [] backtrack([], 0, 0) return res"},{"question":"In the fictional land of Stringland, every citizen uses strings for communication. Given two strings, `master` and `slave`, the citizens have a unique way of determining how similar two strings are. The similarity score is calculated by finding the maximum length of the substring that occurs in both strings. Write a function `max_common_substring(master: str, slave: str) -> int` that outputs the maximum length of such a common substring between the two input strings. # Input The function takes in two parameters: - `master`: A string of lowercase alphabets with length 1 leq |master| leq 1000. - `slave`: A string of lowercase alphabets with length 1 leq |slave| leq 1000. # Output Return an integer representing the length of the longest common substring between `master` and `slave`. # Example ```python # Example 1 master = \\"hellothere\\" slave = \\"yellowsun\\" assert max_common_substring(master, slave) == 4 # The common substring \\"ello\\" # Example 2 master = \\"abcde\\" slave = \\"fghij\\" assert max_common_substring(master, slave) == 0 # No common substring ``` # Note: - The common substring can occur anywhere in both strings. - Use an efficient algorithm to ensure the function runs in a reasonable time for the maximum string length constraint.","solution":"def max_common_substring(master: str, slave: str) -> int: Returns the maximum length of the longest common substring between the two provided strings. m, n = len(master), len(slave) dp = [[0] * (n + 1) for _ in range(m + 1)] max_len = 0 for i in range(1, m + 1): for j in range(1, n + 1): if master[i-1] == slave[j-1]: dp[i][j] = dp[i-1][j-1] + 1 max_len = max(max_len, dp[i][j]) return max_len"},{"question":"You are given a list of integers. Rearrange the list such that all the negative numbers appear before all the non-negative numbers. The relative order of the negative numbers and non-negative numbers must remain the same. The only line of input contains a space-separated list of integers between -1000 and 1000, inclusive. There will be at least one integer in the list and at most 100 integers. Output the rearranged list of integers, space-separated. **Example Input:** 10 -1 3 -4 5 6 -7 **Example Output:** -1 -4 -7 10 3 5 6","solution":"def rearrange_list(nums): Rearranges a list such that all the negative numbers appear before all the non-negative numbers. Args: nums (list of int): A list of integers. Returns: list of int: A rearranged list with all negative numbers first and non-negative numbers following them. negative = [num for num in nums if num < 0] non_negative = [num for num in nums if num >= 0] return negative + non_negative"},{"question":"Shikamaru is working on a complex puzzle involving a sequence of operations. He has an empty stack and a list of integers to be processed in a specific order. The operations that Shikamaru needs to perform are either pushing an integer onto the stack or popping the top integer from the stack. Each push operation is represented by \\"PUSH x\\", where x is an integer, and each pop operation is represented by \\"POP\\". The goal is to determine if the sequence of operations can be successfully completed without attempting to pop from an empty stack. However, Shikamaru also wants to check if the integers being pushed are in non-decreasing order (i.e., each integer is greater than or equal to the integer pushed before it). The first line of input contains an integer m (1 leq m leq 10^5), which represents the total number of operations. Each of the following m lines contains either a \\"PUSH x\\" or \\"POP\\" operation. Your task is to help Shikamaru determine whether the sequence of operations is valid and the integers are pushed in non-decreasing order. If the sequence of operations is valid and the integers are pushed in non-decreasing order, print \\"VALID\\". Otherwise, print \\"INVALID\\". # Input - The first line contains an integer m (1 leq m leq 10^5) — the total number of operations. - Each of the following m lines contains either \\"PUSH x\\" or \\"POP\\", where x is an integer (|x| ≤ 10^9). # Output - Print \\"VALID\\" if all operations can be successfully performed without popping from an empty stack and pushing integers in non-decreasing order. Otherwise, print \\"INVALID\\". # Example 1 Input ``` 7 PUSH 1 PUSH 2 POP PUSH 2 PUSH 3 POP POP ``` Output ``` VALID ``` # Example 2 Input ``` 5 PUSH 3 POP POP PUSH 1 PUSH 2 ``` Output ``` INVALID ```","solution":"def validate_operations(m, operations): stack = [] last_pushed = float(\'-inf\') for operation in operations: if operation.startswith(\'PUSH\'): _, x = operation.split() x = int(x) if x < last_pushed: return \\"INVALID\\" stack.append(x) last_pushed = x elif operation == \'POP\': if not stack: return \\"INVALID\\" stack.pop() return \\"VALID\\""},{"question":"You are given an array of integers representing the duration of songs in a playlist. The playlist is played in order, and once a song finishes, the next song begins immediately. You want to create a playlist for a party that fits exactly within a given duration. Write a function that determines whether it is possible to select a contiguous subarray of songs that fits exactly into the given duration. The function should return the indices of the starting and ending song in the subarray if such a subarray exists. If there are multiple solutions, return the indices of the first such subarray found. If no such subarray exists, return -1. # Input Format - An integer array `songs` where `songs[i]` represents the duration of the i-th song (1 ≤ length of `songs` ≤ 10^6, 1 ≤ `songs[i]` ≤ 10^4). - An integer `target` which represents the exact duration that the subarray of songs should add up to (1 ≤ `target` ≤ 10^9). # Output Format - If such a subarray is found, return a list containing two integers: the start index and end index of the subarray (1-based indexing). - If no such subarray exists, return -1. # Example ```python def find_subarray(songs, target): pass # Example 1 songs = [1, 2, 3, 4, 5] target = 9 # Explanation: The subarray [2, 3, 4] sums to 9. print(find_subarray(songs, target)) # Expected Output: [2, 4] # Example 2 songs = [1, 2, 3, 4, 5] target = 15 # Explanation: The subarray [1, 2, 3, 4, 5] sums to 15. print(find_subarray(songs, target)) # Expected Output: [1, 5] # Example 3 songs = [10, 20, 30, 40] target = 25 # Explanation: No subarray sums to 25. print(find_subarray(songs, target)) # Expected Output: -1 ``` # Constraints - The function should run in O(n) time where `n` is the length of the input array.","solution":"def find_subarray(songs, target): Determines whether a contiguous subarray of songs fits exactly into the given duration. Args: songs: List[int] - An array where songs[i] represents the duration of the i-th song. target: int - The exact duration that the subarray of songs should add up to. Returns: List[int] - The indices of the starting and ending song in 1-based indexing, or -1 if no such subarray exists. n = len(songs) left = 0 current_sum = 0 for right in range(n): current_sum += songs[right] while current_sum > target and left <= right: current_sum -= songs[left] left += 1 if current_sum == target: return [left + 1, right + 1] return -1"},{"question":"A company has a number of projects that need to be completed. Each project has a start day and an end day, and can only be worked on during this period. There are a limited number of employees, and each employee can work on at most one project each day. Your task is to determine the maximum number of projects that can be completed given the constraints. You are given an integer n, the number of projects, and another integer m, the number of employees. You are also given an array of intervals, where each interval represents the start and end days of a project. Consider that a project i (0-based index) has a start day s_i and an end day e_i. A project is considered completed if at least one employee is assigned to work on it continuously from its start day to its end day. Write a function that returns the maximum number of projects that can be completed. # Input - The first line contains two integers n and m (1 le n, m le 10^5) — the number of projects and the number of employees. - The next n lines each contain two integers s_i and e_i (1 le s_i le e_i le 10^9) — the start day and end day of the i-th project. # Output - Print one integer — the maximum number of projects that can be completed. # Example Input: ``` 5 2 1 4 2 5 7 9 8 10 5 7 ``` Output: ``` 2 ```","solution":"def max_projects_completed(n, m, intervals): Returns the maximum number of projects that can be completed given the constraints. Parameters: n (int): number of projects m (int): number of employees intervals (list): list of tuples (s, e) representing the start and end days of projects Returns: int: maximum number of projects that can be completed # Sort the projects by end day to use a greedy approach intervals.sort(key=lambda x: x[1]) # Initialize variables max_projects = 0 assigned_employees = [float(\'-inf\')] * m for start, end in intervals: # Try to find an employee that can take this project for i in range(m): if assigned_employees[i] < start: assigned_employees[i] = end max_projects += 1 break if max_projects == m: break return max_projects"},{"question":"# Frequent Words Finder You are given a text file containing a large number of words. Write a program to find the top k most frequent words in the file. The words are case insensitive, i.e., \\"Hello\\" and \\"hello\\" should be considered the same word. If there are ties, the words with the same frequency should be ordered lexicographically in ascending order. The input consists of the file name followed by an integer k. The file contains lowercase and uppercase English letters and spaces only, and no other punctuation or special characters. The words are separated by spaces. Write a function `find_frequent_words(file_path: str, k: int) -> List[str]` that accepts the file path and the integer k, and returns a list of the k most frequent words. # Function Signature ```python from typing import List def find_frequent_words(file_path: str, k: int) -> List[str]: pass ``` # Example For the given file `sample.txt` containing: ``` Hello world hello hello world this is a test test ``` and k = 2. Your function should output: ``` [\\"hello\\", \\"test\\"] ``` # Note - You must handle large files efficiently. - If the file is empty or k is 0, return an empty list. - If the number of unique words is less than k, return all the unique words. **Constraints**: - The file size will not exceed 10^6 bytes. - The value of k will be a positive integer and will not exceed 10^4.","solution":"from typing import List from collections import Counter import heapq def find_frequent_words(file_path: str, k: int) -> List[str]: # Check for valid k if k == 0: return [] word_count = Counter() with open(file_path, \'r\') as file: for line in file: words = line.split() words = [word.lower() for word in words] word_count.update(words) # If fewer unique words than k, adjust k if len(word_count) < k: k = len(word_count) # Create a min-heap to extract the k most frequent words heap = [(-freq, word) for word, freq in word_count.items()] heapq.heapify(heap) result = [] while k > 0: freq, word = heapq.heappop(heap) result.append(word) k -= 1 # Sort the result lexicographically result.sort() return result"},{"question":"John loves solving puzzles. One day, he came across a unique grid-based puzzle. The puzzle consists of an `n x m` grid with non-negative integers written on each cell. John can start at any cell in the grid and can move to an adjacent cell (up, down, left, or right) as long as the value in the next cell is greater than the value in the current cell. John\'s goal is to find the longest path of increasing numbers he can traverse in the grid. Write a function `longestIncreasingPath(grid)` that takes a 2D list `grid` representing the `n x m` grid, and returns the length of the longest increasing path John can find. # Input - The first line contains two space-separated integers, `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns in the grid. - The next `n` lines contain `m` space-separated integers each, representing the values in the cells of the grid. Each value is a non-negative integer (0 ≤ value ≤ 10000). # Output - Output a single integer, the length of the longest increasing path in the grid. # Example Input ``` 3 3 9 9 4 6 6 8 2 1 1 ``` Output ``` 4 ``` Explanation The longest increasing path is `[1, 2, 6, 9]`, which has a length of 4. John starts at the bottom right and moves up to the top left, passing through cells with increasing values. # Note - Paths cannot wrap around the grid or move diagonally. - Each cell can only be visited once in any path.","solution":"def longestIncreasingPath(grid): if not grid or not grid[0]: return 0 n = len(grid) m = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] cache = [[-1] * m for _ in range(n)] def dfs(x, y): if cache[x][y] != -1: return cache[x][y] max_path_length = 1 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] > grid[x][y]: max_path_length = max(max_path_length, 1 + dfs(nx, ny)) cache[x][y] = max_path_length return max_path_length longest_path = 0 for i in range(n): for j in range(m): longest_path = max(longest_path, dfs(i, j)) return longest_path"},{"question":"Given a sequence of n positive integers, a1, a2, ..., an, define an arithmetic series as a sequence of integers where the difference between consecutive terms is constant. Your task is to determine the length of the longest arithmetic series that can be formed using elements from the given sequence. The first line of input contains a single integer n (1 ≤ n ≤ 2000), representing the number of elements in the sequence. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10000), representing the sequence elements. Output a single integer: the length of the longest arithmetic series that can be formed using elements from the given sequence. **Example:** Input: 6 3 6 9 12 15 18 Output: 6 Input: 5 1 7 3 9 5 Output: 5 In the first example, the entire sequence forms an arithmetic series with a common difference of 3. In the second example, the sequence can be rearranged to form an arithmetic series [1, 3, 5, 7, 9] with a common difference of 2.","solution":"def longest_arithmetic_series_length(arr): Determine the length of the longest arithmetic series that can be formed using elements from the given sequence. if not arr: return 0 n = len(arr) if n == 1: return 1 arr.sort() dp = {} max_length = 1 for i in range(n): for j in range(i + 1, n): diff = arr[j] - arr[i] if (arr[i], diff) in dp: dp[(arr[j], diff)] = dp[(arr[i], diff)] + 1 else: dp[(arr[j], diff)] = 2 max_length = max(max_length, dp[(arr[j], diff)]) return max_length"},{"question":"You are given a long corridor which consists of n rooms in a row. Each room can either be open or closed, and every room is initially closed. There are m people standing in a queue, and each person will toggle the status of every k-th room (where k is the room number starting from 1) starting from their own position in the line. For example, the 1st person will toggle every 1st room, the 2nd person will toggle every 2nd room, and so on. You need to find out how many rooms are open after all m people have toggled the rooms in the corridor. Input format: - The first line contains an integer n representing the number of rooms (1 ≤ n ≤ 1000). - The second line contains an integer m representing the number of people (1 ≤ m ≤ 1000). Output format: - Print a single integer representing the number of open rooms after all the toggling is done. Example: Input 10 10 Output 3 Explanation: Initially, all rooms are closed. - After the 1st person toggles every 1st room: [open open open open open open open open open open] - After the 2nd person toggles every 2nd room: [open closed open closed open closed open closed open closed] - After the 3rd person toggles every 3rd room: [open closed closed closed open open open closed closed closed] - Continue this process until the 10th person toggles. Finally, rooms 1, 4, and 9 will remain open. Hence, the output is 3.","solution":"def count_open_rooms(n, m): Returns the count of open rooms after m people have toggled the rooms in a corridor of n rooms. rooms = [0] * n # 0 represents closed, 1 represents open for person in range(1, m + 1): for room in range(person - 1, n, person): rooms[room] = 1 - rooms[room] # Toggle the room status return sum(rooms)"},{"question":"There is a kingdom made up of n cities connected by two-way roads. The cities are numbered from 1 to n. The kingdom is planning to construct a new capital city, c (1 le c le n). For the project, a specific task is to determine the minimum time required to send an invitation from any city to the new capital city c. The time to travel between cities directly connected by a road is given in minutes. Invitations can be passed from one city to another through a network of existing roads. Your task is to calculate and print the minimum time required for an invitation to reach the capital city from every other city in the kingdom. If a city is directly connected by a road to the capital city, the time is simply the travel time on that road. If multiple paths exist, consider the shortest possible path. For each test case, print a line containing n integers separated by spaces, where the i^{th} integer is the minimum time required for an invitation to reach the capital city from city i. If a city is the capital itself, the time taken is 0. The first line of the input contains an integer t (1 le t le 10^3) — the number of test cases. The first line of each test case contains two integers, n and c (1 le n le 10^4, 1 le c le n) — the number of cities and the capital city respectively. The following m lines (where m is the number of roads, n-1 le m le 2n) contain three integers each, u_i, v_i, and w_i (1 le u_i, v_i le n; 1 le w_i le 10^3) — the cities connected by the road and the travel time between the cities. Print the required minimum times for each test case in the order they appear in the input. The sum of the values of n for all test cases in the input does not exceed 10^4.","solution":"import heapq import sys input = sys.stdin.read def dijkstra(n, c, roads): graph = [[] for _ in range(n + 1)] for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) dist = [sys.maxsize] * (n + 1) dist[c] = 0 pq = [(0, c)] while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: new_dist = current_dist + weight if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(pq, (new_dist, v)) return dist[1:] def solve(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 results = [] for _ in range(t): n = int(data[index]) c = int(data[index + 1]) index += 2 roads = [] m = 2 * n # maximum possible roads (will be unused, loop will break once all read) for _ in range(m): if index >= len(data): break u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) roads.append((u, v, w)) index += 3 result = dijkstra(n, c, roads) results.append(\' \'.join(map(str, result))) print(\\"n\\".join(results))"},{"question":"You are given two integers, `start` and `end`, and an array of positive integers `nums`. Your task is to find the minimum length of the contiguous subarray of `nums` such that the sum of its elements is at least `start` and at most `end`. If no such subarray exists, return -1. # Input - The first line contains two integers `start` and `end` (1 le start le end le 10^9). - The second line contains an integer `n` (1 le n le 10^5), the number of elements in the array. - The third line contains `n` space-separated positive integers, `nums[i]` (1 le nums[i] le 10^5). # Output - Output a single integer representing the minimum length of the contiguous subarray with a sum at least `start` and at most `end`. If no such subarray exists, return -1. # Example Input ``` 7 10 6 2 1 5 2 3 2 ``` Output ``` 2 ``` Input ``` 15 20 5 1 2 3 4 5 ``` Output ``` 5 ``` # Explanation In the first example, the subarray `[5, 2]` has a sum of `7` which is within the range `[7, 10]`, and its length is `2`. No shorter subarray meets the condition. In the second example, the entire array `[1, 2, 3, 4, 5]` has a sum of `15` which is within the range `[15, 20]`, and its length is `5`. No other subarray meets the condition.","solution":"def min_length_subarray(start, end, nums): Returns the minimum length of the contiguous subarray such that the sum of its elements is at least \'start\' and at most \'end\'. If no such subarray exists, return -1. n = len(nums) min_length = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= start: if current_sum <= end: min_length = min(min_length, right - left + 1) current_sum -= nums[left] left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Develop a RESTful API to manage a library\'s book inventory system. Requirements: 1. Your API should support the following operations: - Add a new book to the inventory. - Retrieve the details of a specific book by its ID. - Update the information of an existing book. - Delete a book from the inventory. - List all books in the inventory. 2. Each book should have at least the following attributes: - ID (unique identifier) - Title - Author - ISBN - Published date - Genre Endpoints: 1. POST /books 2. GET /books/{id} 3. PUT /books/{id} 4. DELETE /books/{id} 5. GET /books Considerations: - Use appropriate HTTP status codes for each operation. - Handle errors gracefully and provide meaningful error messages. - Ensure the input data is validated appropriately. We will evaluate your solution based on the following criteria: - Correctness of the API implementation. - Proper use of RESTful principles. - Code readability and organization. - Comprehensive error handling. - Validation of input data.","solution":"from fastapi import FastAPI, HTTPException from typing import List from pydantic import BaseModel, Field from uuid import uuid4 app = FastAPI() class Book(BaseModel): id: str = Field(default_factory=lambda: str(uuid4())) title: str author: str isbn: str published_date: str genre: str # In-memory \\"database\\" books = [] @app.post(\\"/books\\", response_model=Book) def add_book(book: Book): books.append(book) return book @app.get(\\"/books/{id}\\", response_model=Book) def get_book(id: str): for book in books: if book.id == id: return book raise HTTPException(status_code=404, detail=\\"Book not found\\") @app.put(\\"/books/{id}\\", response_model=Book) def update_book(id: str, updated_book: Book): for index, book in enumerate(books): if book.id == id: books[index] = updated_book return updated_book raise HTTPException(status_code=404, detail=\\"Book not found\\") @app.delete(\\"/books/{id}\\", response_model=Book) def delete_book(id: str): for index, book in enumerate(books): if book.id == id: removed_book = books.pop(index) return removed_book raise HTTPException(status_code=404, detail=\\"Book not found\\") @app.get(\\"/books\\", response_model=List[Book]) def list_books(): return books"},{"question":"A company wants to design a new system for employee shift scheduling. To do so, they need a program that determines if the set of employee shift times overlap. Each employee works a shift described by a start time and an end time. A shift overlaps with another shift if there is any time period when both employees are working. You will receive a list of shifts as input, where each shift is represented as a tuple with start and end times in the 24-hour format (\\"HH:MM\\", \\"HH:MM\\"). Your task is to determine whether there is any overlap among the given shifts. If there is at least one overlapping pair of shifts, return `True`. Otherwise, return `False`. Input: - The first line contains an integer N (1 le N le 10^4), representing the number of shifts. - Each of the next N lines contains two strings representing the start and end times of a shift in the \\"HH:MM\\" format, separated by a space. Output: - Return `True` if any of the shifts overlap, otherwise return `False`. Example 1: Input: ``` 3 09:00 10:00 10:30 11:30 10:00 10:30 ``` Output: ``` False ``` Example 2: Input: ``` 3 09:00 10:30 09:45 11:00 11:00 12:00 ``` Output: ``` True ```","solution":"def shifts_overlap(shifts): Determines whether there is any overlap among the given shifts. Args: shifts (list of tuples): List of shifts where each shift is a tuple (\\"HH:MM\\", \\"HH:MM\\"). Returns: bool: True if any of the shifts overlap, otherwise False. # Convert time in \\"HH:MM\\" format to minutes since midnight def to_minutes(time): hours, minutes = map(int, time.split(\':\')) return hours * 60 + minutes # Convert all shifts start and end times to minutes since midnight intervals = [(to_minutes(start), to_minutes(end)) for start, end in shifts] # Sort intervals by start time (and by end time in case of tie) intervals.sort() # Check for overlaps in sorted intervals for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: # Next start time is less than previous end time return True return False"},{"question":"You are given an integer array of length n. Your task is to distribute the elements of this array into two groups such that the absolute difference between the sum of the elements in the two groups is minimized. The first line of input contains an integer t (1 le t le 1000) — the number of test cases. For each test case: - The first line contains a single integer n (1 le n le 100) — the length of the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 100) — the elements of the array. Output: Print t lines, each containing one integer, the minimum possible absolute difference for each test case. # Example Input ``` 3 5 1 2 3 4 5 4 8 6 5 4 3 2 2 3 ``` Output ``` 1 1 1 ``` In the first example: - One possible way to split the array is: [1, 2, 5] and [3, 4]. The sum of the first group is 8, the sum of the second group is 7, and the absolute difference is 1. In the second example: - One possible way to split the array is: [8, 5] and [6, 4]. The sum of the first group is 13, the sum of the second group is 10, and the absolute difference is 1. In the third example: - One possible way to split the array is: [2, 2] and [3]. The sum of the first group is 4, the sum of the second group is 3, and the absolute difference is 1.","solution":"def minimize_difference(arr): n = len(arr) total_sum = sum(arr) possible_sums = {0} # list to store possible sums using subsets for num in arr: new_sums = set() for possible_sum in possible_sums: new_sums.add(possible_sum + num) possible_sums.update(new_sums) min_diff = float(\'inf\') for possible_sum in possible_sums: other_sum = total_sum - possible_sum min_diff = min(min_diff, abs(possible_sum - other_sum)) return min_diff def solve(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(minimize_difference(arr)) return results"},{"question":"You are given a 2D grid of size n times m. Each cell in the grid has a value representing the amount of gold in that cell. A miner starts at the top-left corner of the grid (cell (1, 1)) and needs to reach the bottom-right corner (cell (n, m)). The miner can move only to the right or down from the current cell. Your task is to determine the maximum amount of gold the miner can collect on his way from the top-left to the bottom-right corner. The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. Each of the next n lines contains m integers g_{i,j} (0 le g_{i,j} le 100) — the amount of gold in the cell (i, j). For each test case, print a single integer — the maximum amount of gold the miner can collect from the top-left to the bottom-right corner. **Example Input:** ``` 2 2 2 1 3 4 2 3 3 1 2 3 4 5 6 7 8 9 ``` **Example Output:** ``` 7 29 ``` **Explanation:** In the first test case, the miner starts at (1, 1). The path (1, 1) -> (2, 1) -> (2, 2) gives a maximum gold of 1 + 4 + 2 = 7. In the second test case, the path (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3) gives a maximum gold of 1 + 2 + 3 + 6 + 9 = 21. However, another path (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) achieves a higher value of 1 + 4 + 7 + 8 + 9 = 29. Thus, the maximum gold that can be collected is 29.","solution":"def max_gold_collected(t, test_cases): Determines the maximum amount of gold that can be collected from top-left to bottom-right in each grid of the given test cases. :param t: Number of test cases :param test_cases: A list of test cases where each test case is a tuple containing the dimensions of the grid and the grid itself :return: A list of integers representing the maximum gold collected for each test case results = [] for testcase in test_cases: n, m, grid = testcase # Initialize a DP table where dp[i][j] will store the max gold collected to reach cell (i, j) dp = [[0] * m for _ in range(n)] # Base case: Starting point is the value of the top-left cell dp[0][0] = grid[0][0] # Fill the first row (can only move from left) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only move from top) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer for the current test case is the value at the bottom-right corner results.append(dp[n-1][m-1]) return results"},{"question":"Write a function `caesar_cipher` that implements a Caesar Cipher encryption for a given plaintext string and a shift value. The Caesar Cipher shifts each letter by a specified number of positions in the alphabet. For example, with a shift of 1, \'a\' is replaced by \'b\', \'b\' by \'c\', and so on, up to \'z\', which wraps around to \'a\'. The function should accept two arguments: 1. `plaintext` (a string) - the input text to be encrypted. It consists only of lowercase English letters. 2. `shift` (an integer) - the number of positions by which letters should be shifted. The function should return a string containing the encrypted text. # Examples ```python caesar_cipher(\\"abc\\", 1) # Output: \\"bcd\\" caesar_cipher(\\"xyz\\", 2) # Output: \\"zab\\" caesar_cipher(\\"hello\\", 7) # Output: \\"olssv\\" ``` # Constraints - The shift value is non-negative and less than or equal to 25. - The length of the `plaintext` string is at most 100.","solution":"def caesar_cipher(plaintext, shift): Encrypts the plaintext using the Caesar Cipher technique with the given shift value. encrypted_text = \\"\\" for char in plaintext: # Find the shifted character shifted_char = chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\')) encrypted_text += shifted_char return encrypted_text"},{"question":"You are given an integer array arr of size n which contains elements in the range [1, n]. Each element in the array appears at most once except for one element that appears exactly twice. You need to find the element that appears twice. Write a function `findDuplicate` that takes an integer array arr and returns the duplicate element. # Input - An integer array arr of size n + 1 where 1 leq n leq 10^5 and elements are in the range [1, n]. # Output - Return the duplicate element in the array. # Example Input ``` arr = [1, 3, 4, 2, 2] ``` Output ``` 2 ``` Input ``` arr = [3, 1, 3, 4, 2] ``` Output ``` 3 ``` # Note - You must solve the problem without modifying the array arr and using only constant, O(1), extra space. - Your algorithm should run in linear time, O(n).","solution":"def findDuplicate(arr): Given an array where each element in the array appears at most once except for one element that appears exactly twice, this function finds the duplicate element. Args: arr (list of int): A list of integers where the elements are in the range [1, n] and one element appears twice. Returns: int: The duplicate element. slow = arr[0] fast = arr[0] # Phase 1: Finding the intersection point in the cycle while True: slow = arr[slow] fast = arr[arr[fast]] if slow == fast: break # Phase 2: Finding the entrance to the cycle (duplicate element) slow = arr[0] while slow != fast: slow = arr[slow] fast = arr[fast] return slow"},{"question":"**Problem Statement: Detect Cyclic Patterns** **Description:** You are given an array of integers `arr` and a positive integer `k`. You need to determine if there exists a cyclic pattern of length `k` in the array. A cyclic pattern of length `k` in the array means that for every integer `i`, `arr[i] == arr[i+k]` whenever `i+k` is within the bounds of the array. **Input:** - The first line of input contains two integers: `n` and `k` (1 ≤ k ≤ n ≤ 10^6), where `n` is the length of the array. - The second line contains `n` integers representing the array `arr` (1 ≤ arr[i] ≤ 10^9). **Output:** - Print \\"Yes\\" if a cyclic pattern of length `k` exists in the array. - Otherwise, print \\"No\\". **Example:** ``` Input: 10 5 1 2 3 4 5 1 2 3 4 5 Output: Yes Input: 7 3 1 2 1 2 1 2 1 Output: No ``` **Notes:** - For the first example, `arr` has a pattern `[1, 2, 3, 4, 5]` that repeats. - For the second example, although there is a somewhat repetitive structure, it does not form a valid `k = 3` cycle.","solution":"def detect_cyclic_pattern(n, k, arr): Returns \'Yes\' if there exists a cyclic pattern of length k in the array, otherwise returns \'No\'. for i in range(n - k): if arr[i] != arr[i + k]: return \\"No\\" return \\"Yes\\""},{"question":"Given a matrix of non-negative integers with m rows and n columns and a list of queries. Each query specifies four integers x1, y1, x2, and y2, representing the top-left and bottom-right coordinates of a submatrix respectively. For each query, calculate the sum of all values in the specified submatrix. The first line of the input contains two integers m and n, (1 ≤ m, n ≤ 500), denoting the number of rows and columns in the matrix. The next m lines each contain n space-separated integers, (0 ≤ matrix[i][j] ≤ 1000). The following line contains an integer q, (1 ≤ q ≤ 10^4), denoting the number of queries. The next q lines each contain four integers x1, y1, x2, and y2, (1 ≤ x1 ≤ x2 ≤ m and 1 ≤ y1 ≤ y2 ≤ n), representing the coordinates of the submatrix. For each query, print the sum of the values in the specified submatrix in a separate line.","solution":"def matrix_sum(matrix, queries): Calculate the sum of values in submatrices defined by queries. Parameters: - matrix: list of lists of integers, the matrix to consider - queries: list of tuples, each defining top-left (x1, y1) and bottom-right (x2, y2) coordinates Returns: - list of integers, sums of values in specified submatrices m = len(matrix) n = len(matrix[0]) if m > 0 else 0 # Create the prefix sum matrix prefix_sum = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] # Process each query results = [] for x1, y1, x2, y2 in queries: total = (prefix_sum[x2][y2] - prefix_sum[x1-1][y2] - prefix_sum[x2][y1-1] + prefix_sum[x1-1][y1-1]) results.append(total) return results"},{"question":"An upcoming championship is filled with excitement, and you are in charge of tracking the participant scores and determining certain statistics. Participants compete in several rounds, and for each round, every participant receives a score. A participant\'s total score is computed by summing up the scores from all the rounds they participated in. You need to determine the participant with the highest total score, alongside their total score value. If there are multiple participants with the same highest score, return the participant who achieved that score first based on the input order. **Input:** - The first line contains two integers `n` and `m` (1 ≤ n ≤ 500, 1 ≤ m ≤ 100), the number of participants and the number of rounds, respectively. - The next `n` lines each contain `m` integers, representing the scores of each participant in the `m` rounds. The `i-th` line contains the score of the `i-th` participant in each round, separated by spaces. **Output:** - Print two integers, the index of the participant with the highest total score (1-based index) and the highest total score value. **Example:** Input: ``` 4 3 10 20 30 20 30 10 30 10 20 30 30 30 ``` Output: ``` 4 90 ``` Explanation: - Participant 1\'s total score: 10 + 20 + 30 = 60 - Participant 2\'s total score: 20 + 30 + 10 = 60 - Participant 3\'s total score: 30 + 10 + 20 = 60 - Participant 4\'s total score: 30 + 30 + 30 = 90 Participant 4 has the highest total score of 90. Thus, the output is `4 90`.","solution":"def find_highest_scorer(n, m, scores): Finds the participant with the highest total score. Args: n : int : Number of participants m : int : Number of rounds scores : List[List[int]] : List of scores for each participant in each round Returns: Tuple[int, int]: (index of the participant with highest score (1-based), highest score) max_score = -1 max_score_index = -1 for i in range(n): total_score = sum(scores[i]) if total_score > max_score: max_score = total_score max_score_index = i return max_score_index + 1, max_score"},{"question":"Design a system that simulates a file directory structure where you can perform operations to create, delete, and rename files and directories. Your task is to handle a series of operations and maintain the directory structure accordingly. You are given an initial empty root directory `/`. Each operation will be one of the following: 1. `CREATE /path/to/directory` - Create a directory at the specified path. All necessary parent directories are created if they do not exist. 2. `DELETE /path/to/directory` - Delete the directory at the specified path. If the directory does not exist, print \\"DIRECTORY NOT FOUND\\". If the directory contains subdirectories or files, print \\"DIRECTORY NOT EMPTY\\". 3. `RENAME /path/from /path/to` - Rename the directory at `path/from` to `path/to`. If the source directory does not exist, print \\"DIRECTORY NOT FOUND\\". If the destination directory already exists, print \\"DESTINATION ALREADY EXISTS\\". Assume paths use the UNIX-style with `/` as the separator and all paths are absolute. You need to handle multiple operations and print the appropriate messages for each operation as described. # Input - The first line contains an integer `n`, the number of operations (1 ≤ n ≤ 10^5). - The next `n` lines contain one operation per line, which is one of the commands as described above. # Output For each operation, print the appropriate message as specified in the description. # Example Input ``` 6 CREATE /a/b/c CREATE /a/b/d DELETE /a/b/d DELETE /a/b/d RENAME /a/b /a/b_new RENAME /a/b /a/b_new ``` Output ``` CREATE /a/b/c CREATE /a/b/d DELETE /a/b/d DIRECTORY NOT FOUND RENAME /a/b /a/b_new DIRECTORY NOT FOUND ```","solution":"class Directory: def __init__(self): self.directories = set() self.directories.add(\'/\') def create(self, path): parts = path.strip(\'/\').split(\'/\') current_path = \'/\' for part in parts: if current_path == \'/\': current_path += part else: current_path += \'/\' + part self.directories.add(current_path) def delete(self, path): if path not in self.directories: return \\"DIRECTORY NOT FOUND\\" # Check if this directory is empty for dir_path in self.directories: if dir_path != path and dir_path.startswith(path + \'/\'): return \\"DIRECTORY NOT EMPTY\\" self.directories.remove(path) return \\"DELETE \\" + path def rename(self, from_path, to_path): if from_path not in self.directories: return \\"DIRECTORY NOT FOUND\\" if to_path in self.directories: return \\"DESTINATION ALREADY EXISTS\\" updated_dirs = set() for dir_path in self.directories: if dir_path == from_path or dir_path.startswith(from_path + \'/\'): new_path = dir_path.replace(from_path, to_path, 1) updated_dirs.add(new_path) else: updated_dirs.add(dir_path) self.directories = updated_dirs return \\"RENAME \\" + from_path + \\" \\" + to_path def handle_operation(self, operation): parts = operation.split() if parts[0] == \\"CREATE\\": self.create(parts[1]) return \\"CREATE \\" + parts[1] elif parts[0] == \\"DELETE\\": return self.delete(parts[1]) elif parts[0] == \\"RENAME\\": return self.rename(parts[1], parts[2]) else: return \\"UNKNOWN OPERATION\\""},{"question":"You are given a directed graph representing cities and one-way roads connecting them. There are `n` cities and `m` roads, and each city is labeled with a unique index from `1` to `n`. Your task is to determine if it is possible to travel from the first city to the last city (`n`), and if so, find the lexicographically smallest path. The first line of the input contains two integers `n` and `m` (`2 ≤ n ≤ 10^5`, `0 ≤ m ≤ 2*10^5`) representing the number of cities and the number of roads, respectively. Each of the next `m` lines contains two integers `u` and `v` (`1 ≤ u, v ≤ n`), indicating a one-way road connecting city `u` to city `v`. If there is no path from city `1` to city `n`, print \\"NO\\" (without quotes). Otherwise, print \\"YES\\" (without quotes) on the first line and on the second line, print the cities along the lexicographically smallest path from city `1` to city `n`. Input: ``` 5 5 1 2 2 5 1 3 3 4 4 5 ``` Output: ``` YES 1 2 5 ```","solution":"from collections import defaultdict, deque def find_lexicographically_smallest_path(n, m, roads): graph = defaultdict(list) for u, v in roads: graph[u].append(v) # Create a visited set and a deque for BFS visited = {1} deque_bfs = deque([[1]]) found = False # Implement BFS while deque_bfs: path = deque_bfs.popleft() current = path[-1] if current == n: found = True return \\"YESn\\" + \\" \\".join(map(str, path)) for neighbor in sorted(graph[current]): if neighbor not in visited: visited.add(neighbor) new_path = list(path) new_path.append(neighbor) deque_bfs.append(new_path) if not found: return \\"NO\\""},{"question":"You are given a matrix of size n x m. You need to find the minimum path sum from the top-left cell to the bottom-right cell. You can only move either down or right at any point in time. The first line of the input contains two integers, n and m (1 <= n, m <= 100), which represent the number of rows and columns in the matrix respectively. The next n lines contain m integers each, representing the values in the matrix. Print the minimum sum of the path from the top-left cell to the bottom-right cell. **Example:** Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The path with the minimum sum is 1 → 3 → 1 → 1 → 1, with a total sum of 7.","solution":"def min_path_sum(matrix): Returns the minimum path sum from the top-left cell to the bottom-right cell of the matrix. You can only move either down or right at any point in time. n = len(matrix) m = len(matrix[0]) dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[-1][-1]"},{"question":"# Problem Statement Naomi enjoys playing with bits and binary strings. She invented a game where she flips bits in a binary string to achieve a special new string. Given her love for programming, she asked for your help to determine if achieving her desired string is possible with a given number of flips. Given two binary strings of equal length, `A` and `B`, Naomi wants to convert string `A` to string `B` by flipping exactly `K` bits in string `A`. A flip operation changes \'0\' to \'1\' and \'1\' to \'0\'. Write a function `possible_to_achieve(A: str, B: str, K: int) -> str` that returns \\"YES\\" if it is possible to achieve string `B` from string `A` with exactly `K` flips. Otherwise, return \\"NO\\". # Input - `A`: The initial binary string. - `B`: The target binary string. - `K`: The exact number of bit flips allowed (0 ≤ K ≤ len(A)). # Output - Return a string, \\"YES\\" if it is possible to transform `A` into `B` with exactly `K` flips, otherwise \\"NO\\". # Examples Example 1: ```plaintext A = \\"1101\\" B = \\"1001\\" K = 1 ``` **Output**: ```plaintext YES ``` **Explanation**: Flip the second bit of `A`, resulting in \\"1001\\", which matches `B`. Example 2: ```plaintext A = \\"1101\\" B = \\"1001\\" K = 2 ``` **Output**: ```plaintext NO ``` **Explanation**: More than 1 flip is actually needed to change `A` to `B`, but K=2 flips are allowed and cannot be achieved exactly. # Note - The function needs to only match `K` flips exactly, not more or less. - The lengths of `A` and `B` will always be the same and constrained such that 1 ≤ length(A) ≤ 10^5.","solution":"def possible_to_achieve(A: str, B: str, K: int) -> str: Determines whether string A can be transformed into string B with exactly K bit flips. # Count the number of differing bits between A and B differing_bits = sum(1 for a, b in zip(A, B) if a != b) # To achieve B from A with exactly K flips: # 1. We need to ensure that the number of differing bits is not greater than K. # 2. The number of flips left after matching differing bits should be even (because flipping twice is a no-op). if differing_bits <= K and (K - differing_bits) % 2 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You have an integer array `nums` containing `n` positive integers and an integer `target`. The array is sorted in ascending order. Determine if there exist two distinct indices `i` and `j` such that `nums[i] + nums[j] = target`. Return a list containing the two numbers in any order if they exist, otherwise return an empty list. # Input - The first line contains an integer `n` (2 ≤ n ≤ 1000), the number of elements in the array. - The second line contains the `n` integers of the array `nums`, each between 1 and 1000 inclusive, sorted in ascending order. - The third line contains the integer `target` (2 ≤ target ≤ 2000). # Output - If there exist two numbers in the array that sum up to `target`, output them in a list. - If no such numbers exist, output an empty list. # Example Input ``` 5 1 2 4 5 7 9 ``` Output ``` [2, 7] ``` Input ``` 5 1 2 4 5 7 10 ``` Output ``` [3, 7] ``` # Note - The array is sorted, so you may consider using an efficient algorithm like the two-pointer technique to find the two numbers in `O(n)` time complexity.","solution":"def find_two_sum(nums, target): Returns a list containing two numbers from the sorted array nums that add up to target. If no such numbers exist, return an empty list. left, right = 0, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum == target: return [nums[left], nums[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"Given a list of integers representing the weights of different items and a single integer representing the maximum weight a bag can hold, determine if it is possible to fit exactly all of the items into the bag without exceeding the maximum weight. You can assume that each item weight is a positive integer and the maximum weight of the bag is also a positive integer. The first input line contains a single integer n (1 ≤ n ≤ 100) — the number of items. The second line contains n space-separated integers w1, w2, ..., wn (1 ≤ wi ≤ 100) — the weights of the items. The third line contains a single integer W (1 ≤ W ≤ 1000) — the maximum weight that the bag can hold. Output \\"POSSIBLE\\" if it is feasible to put all the items into the bag without exceeding the maximum weight, otherwise, output \\"IMPOSSIBLE\\". Examples: Input 1: 5 10 20 30 40 50 150 Output 1: POSSIBLE Input 2: 5 10 20 30 40 50 100 Output 2: IMPOSSIBLE In the first sample, the sum of all item weights is equal to 150, which exactly matches the maximum weight the bag can hold. Thus, it is possible to put all items into the bag. In the second sample, the sum of all item weights is 150, which exceeds the maximum weight the bag can hold (100). Thus, it is impossible to fit all items into the bag.","solution":"def can_fit_items_into_bag(n, weights, max_weight): Determines if it is possible to fit all items into the bag without exceeding the max weight. Parameters: n (int): Number of items. weights (list of int): List of item weights. max_weight (int): Maximum weight the bag can hold. Returns: str: \\"POSSIBLE\\" if all items can fit within the max_weight, otherwise \\"IMPOSSIBLE\\". total_weight = sum(weights) if total_weight <= max_weight: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"The Abacus tribe has a peculiar way of transmitting messages using numbers. They encode their messages into a sequence of digits, and each digit represents a unique letter. The problem is decoding the sequence to retrieve the original message. To decode any given sequence of digits to the original message, you must adhere to the following rules: - Each digit from 2 to 9 represents letters corresponding to the conventional telephone keypad mapping: - \'2\' corresponds to \'abc\' - \'3\' corresponds to \'def\' - \'4\' corresponds to \'ghi\' - \'5\' corresponds to \'jkl\' - \'6\' corresponds to \'mno\' - \'7\' corresponds to \'pqrs\' - \'8\' corresponds to \'tuv\' - \'9\' corresponds to \'wxyz\' Given a sequence of digits, generate all possible letter combinations that the sequence can represent. You need to implement the function `decode_message(digits)` that takes a string `digits` (0 ≤ length of digits ≤ 4) and prints all possible letter combinations, each combination on a new line. # Example: Input: `23` Output: ``` ad ae af bd be bf cd ce cf ``` # Constraints: 1. `digits` will only contain characters \'2\'-\'9\'. 2. The length of `digits` will not exceed 4.","solution":"from itertools import product def decode_message(digits): This function takes a string of digits and returns all possible letter combinations according to the mapping on a conventional telephone keypad. if not digits: return [] digit_to_chars = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } # Create a list of possible characters for each digit chars_list = [digit_to_chars[digit] for digit in digits] # Generate all combinations using Cartesian product combinations = [\'\'.join(combo) for combo in product(*chars_list)] return combinations"},{"question":"Given an integer array `nums`, you need to find all the unique triplets in the array which gives the sum of zero. Notice that the solution set must not contain duplicate triplets. Write a function: ```python def three_sum(nums: List[int]) -> List[List[int]]: ``` # Input - An integer array `nums` where `-10^9 <= nums[i] <= 10^9` and `0 <= nums.length <= 10^4`. # Output - A list of lists of integers representing all unique triplets `[nums[i], nums[j], nums[k]]` such that `i`, `j`, and `k` are distinct indices and `nums[i] + nums[j] + nums[k] == 0`. # Example ```python assert three_sum([-1, 0, 1, 2, -1, -4]) == [[-1, -1, 2], [-1, 0, 1]] assert three_sum([]) == [] assert three_sum([0]) == [] ``` # Note - The solution should not output duplicate triplets, each triplet `[nums[i], nums[j], nums[k]]` in the output should be unique. - The order of the triplets in the output does not matter.","solution":"from typing import List def three_sum(nums: List[int]) -> List[List[int]]: nums.sort() result = [] for i in range(len(nums) - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: sum_three = nums[i] + nums[left] + nums[right] if sum_three == 0: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 elif sum_three < 0: left += 1 else: right -= 1 return result"},{"question":"You are given a grid of size n x m (1 ≤ n, m ≤ 50), where each cell contains an integer that represents the elevation of that cell. Write a program that finds the most elevated path from the top-left corner (0,0) to the bottom-right corner (n-1, m-1) of the grid. The path is defined in such a way that you can only move right or down at each step. The elevation of a path is determined by the minimum elevation encountered along that path. You need to find the path that maximizes this minimum elevation. Input: - The first line contains two integers n and m — the dimensions of the grid. - The next n lines each contain m integers, representing the elevation of each cell in the grid. Output: - Print a single integer, the maximum possible minimum elevation of a path from (0,0) to (n-1, m-1). Example: Input: 3 3 8 4 1 6 5 7 3 2 9 Output: 5 Explanation: - The most elevated path from (0,0) to (2,2) through (0,0)→(1,0)→(1,1)→(1,2)→(2,2) has the values [8, 6, 5, 7, 9], and the minimum value is 5. - Another path (0,0)→(0,1)→(0,2)→(1,2)→(2,2) has values [8, 4, 1, 7, 9], and the minimum value is 1, which is less than 5. - Hence the maximum minimum elevation path has a minimum elevation of 5.","solution":"def max_min_elevation(grid): n = len(grid) m = len(grid[0]) # Create a dp array dp = [[-1] * m for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], min(dp[i-1][j], grid[i][j])) if j > 0: dp[i][j] = max(dp[i][j], min(dp[i][j-1], grid[i][j])) return dp[n-1][m-1]"},{"question":"You are given a sequence of n integers, where each integer represents a specific character code of a drawing command. These commands direct a robot to draw a pattern on a grid. The drawing grid has coordinates ranging from (1, 1) at the top-left corner to (m, m) at the bottom-right corner. The robot can execute the following commands based on the integer codes: - 1: Move up - 2: Move down - 3: Move left - 4: Move right - 5: Place a dot at the current position Initially, the robot starts at coordinate (1, 1) and begins executing the commands sequentially. The robot stops executing commands if it moves outside the bounds of the grid. You need to determine the final position of the robot on the grid after executing all valid commands, and count the number of dots placed within the grid. The robot’s movement and dot placement should never go out of the grid\'s bounds. Once a command would take the robot out of the grid, remaining commands are ignored. **Input:** - The first line contains two integers n (1 leq n leq 10^5) and m (1 leq m leq 10^3) denoting the number of commands and the size of the drawing grid respectively. - The second line contains n integers where each integer is a drawing command code. **Output:** - Output two integers: the final coordinates (x, y) of the robot\'s position and the total number of dots placed within the grid. **Example:** Input: ``` 8 5 1 4 4 5 2 4 3 5 ``` Output: ``` 2 3 2 ``` In this example, the robot moves as follows: 1. Move up: Invalid move (out of grid), ignored. 2. Move right: Moves to (1, 2). 3. Move right: Moves to (1, 3). 4. Place a dot at (1, 3). 5. Move down: Moves to (2, 3). 6. Move right: Moves to (2, 4). 7. Move left: Moves back to (2, 3). 8. Place a dot at (2, 3). Final position: (2, 3), Total dots placed: 2","solution":"def final_position_and_dots(n, m, commands): x, y = 1, 1 dots = 0 for command in commands: if command == 1 and y > 1: y -= 1 elif command == 2 and y < m: y += 1 elif command == 3 and x > 1: x -= 1 elif command == 4 and x < m: x += 1 elif command == 5: dots += 1 return x, y, dots"},{"question":"Given an array of integers with length n and an integer k, your task is to determine whether the array can be divided into exactly k non-empty subsets such that the sum of elements in each subset is the same. The first line of the input contains two space-separated integers n (1 le n le 15) and k (1 le k le n). The second line contains n space-separated integers a_i (1 le a_i le 100). If it is possible to divide the array into exactly k subsets with equal sum, print \\"YES\\". Otherwise, print \\"NO\\". **Input:** ``` 5 3 3 1 1 2 2 ``` **Output:** ``` YES ``` **Input:** ``` 6 4 1 2 3 4 5 6 ``` **Output:** ``` NO ```","solution":"from itertools import combinations def can_partition_k_subsets(nums, k): total = sum(nums) if total % k != 0: return \\"NO\\" target_sum = total // k def can_partition(remaining, k, target, current_sum, start_index, used): if k == 0: return True if current_sum == target: return can_partition(remaining, k - 1, target, 0, 0, used) for i in range(start_index, len(remaining)): if not used[i] and current_sum + remaining[i] <= target: used[i] = True if can_partition(remaining, k, target, current_sum + remaining[i], i + 1, used): return True used[i] = False return False used = [False] * len(nums) return \\"YES\\" if can_partition(nums, k, target_sum, 0, 0, used) else \\"NO\\""},{"question":"A company wants to assign tasks to employees based on their experience level. Each task has a difficulty level, and each employee has a maximum difficulty level they can handle. You need to determine the maximum number of tasks that can be completed given the constraints. You are given two arrays, `tasks` and `employees`, where `tasks[i]` is the difficulty level of the i-th task and `employees[j]` is the maximum difficulty level the j-th employee can handle. Each task can only be handled by one employee and each employee can only handle one task. Implement a function `max_tasks_completed(tasks, employees)` that returns the maximum number of tasks that can be completed given the constraints. # Input: - An integer `n` (1 le n le 10^5), the number of tasks. - An integer `m` (1 le m le 10^5), the number of employees. - An array `tasks` of size `n` where `tasks[i]` (1 le tasks[i] le 10^9) is the difficulty level of the i-th task. - An array `employees` of size `m` where `employees[j]` (1 le employees[j] le 10^9) is the maximum difficulty level the j-th employee can handle. # Output: - Return the maximum number of tasks that can be completed. # Example: Input: ``` 5 4 [4, 3, 2, 7, 6] [5, 2, 8, 3] ``` Output: ``` 4 ``` Explanation: - Employee 1 can complete the tasks with difficulties 4 and 3. - Employee 2 can complete the task with difficulty 2. - Employee 3 can complete the tasks with difficulties 7 and 6. - Employee 4 can complete the task with difficulty 3. Hence, the total number of tasks that can be completed is 4.","solution":"def max_tasks_completed(tasks, employees): Determine the maximum number of tasks that can be completed based on the constraints. tasks.sort() employees.sort() task_index = 0 employee_index = 0 tasks_completed = 0 while task_index < len(tasks) and employee_index < len(employees): if tasks[task_index] <= employees[employee_index]: tasks_completed += 1 task_index += 1 employee_index += 1 else: employee_index += 1 return tasks_completed"},{"question":"Given a sequence where each element S(n) is defined as the sum of the first n positive odd integers, you need to find the n-th element in the sequence. The first few elements of the sequence are: S(1) = 1 S(2) = 1 + 3 = 4 S(3) = 1 + 3 + 5 = 9 S(4) = 1 + 3 + 5 + 7 = 16 You are given an integer n; calculate the n-th element of the sequence. The only line of input contains an integer n (1 ≤ n ≤ 15). Output the n-th element of the sequence.","solution":"def sum_of_first_n_odd_integers(n): Returns the sum of the first n positive odd integers. return n * n"},{"question":"A company is planning to distribute holiday gifts to its employees. The gifts are packed in boxes of varying sizes, and each box has a specified weight. For logistical reasons, the company wants to ship the boxes by truck, and each truck has a maximum weight capacity it can carry. Your task is to find out the minimum number of trucks the company needs to hire to transport all the gift boxes. You are given an integer `n` representing the number of boxes, an integer `k` representing the capacity of each truck, and an array of `n` integers `w` where `w[i]` is the weight of the `i-th` box. # Input - The first line contains two integers, `n` and `k` — the number of boxes (1 ≤ `n` ≤ 100,000) and the weight capacity of each truck (1 ≤ `k` ≤ 10^9). - The second line contains `n` integers, the weights of the boxes `w[1], w[2], ..., w[n]` (1 ≤ `w[i]` ≤ 10^9). # Output Output a single integer — the minimum number of trucks required to transport all the boxes. # Example Input ``` 5 10 2 3 7 4 5 ``` Output ``` 3 ``` Explanation In the provided example, one optimal way to distribute the boxes is as follows: - First truck: 2 + 3 = 5 (total weight 5 out of 10) - Second truck: 7 (total weight 7 out of 10) - Third truck: 4 + 5 = 9 (total weight 9 out of 10) Thus, the minimum number of trucks required is 3.","solution":"def minimum_trucks(n, k, w): Returns the minimum number of trucks required given the number of boxes, weight capacity of each truck, and the list of box weights. :param n: Integer, number of boxes :param k: Integer, weight capacity of each truck :param w: List of integers, weights of the boxes :return: Integer, minimum number of trucks required trucks = 0 current_weight = 0 for weight in w: if current_weight + weight > k: trucks += 1 current_weight = weight else: current_weight += weight if current_weight > 0: trucks += 1 return trucks"},{"question":"Given a binary string s of length n, determine if it\'s possible to make all characters in the string equal by flipping at most one contiguous subsegment of bits. A binary string consists of only characters \'0\' and \'1\'. A \\"flip\\" operation changes \'0\' to \'1\' and \'1\' to \'0\'. You need to check if by flipping at most one subsegment (continuous part) of the binary string, you can make all characters the same. # Input The first line contains an integer n (1 le n le 100), the length of the binary string. The second line contains a binary string s of length n. # Output Output \\"YES\\" if it is possible to make all characters in the binary string equal by flipping at most one contiguous subsegment of bits; otherwise, output \\"NO\\". # Example Input ``` 5 11011 ``` Output ``` YES ``` Input ``` 6 101010 ``` Output ``` NO ``` # Explanation In the first example, we can flip the subsegment from index 2 to index 3 (0-indexed) to get \\"11111\\". In the second example, there is no contiguous subsegment that can be flipped to make all characters in the string the same.","solution":"def can_make_all_equal_by_one_flip(n, s): Determines if it\'s possible to make all characters in the given binary string equal by flipping at most one contiguous subsegment of bits. Parameters: n (int): Length of the binary string. s (str): Binary string of length n. Returns: str: \\"YES\\" if it is possible, otherwise \\"NO\\". # To find at most one contiguous subsegment of each bit \'0\'/\'1\' in the string count_zeros = 0 count_ones = 0 i = 0 while i < n: if s[i] == \'0\': while i < n and s[i] == \'0\': i += 1 count_zeros += 1 elif s[i] == \'1\': while i < n and s[i] == \'1\': i += 1 count_ones += 1 # We can flip one segment, so only one segment each of \'0s\' and \'1s\' is allowed. if count_zeros <= 1 or count_ones <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an n x n grid representing a map, where each cell can either contain part of a river (\'R\') or land (\'L\'). Rivers are connected sequences of \'R\' cells that share at least one edge (left, right, up, or down). Your task is to identify and differentiate the rivers on the map by labelling each river with a unique integer identifier, starting from 1. The first input line contains a single integer n (1 ≤ n ≤ 1000), which is the length and the width of the grid. Next n lines describe the grid of the map. The i-th line contains exactly n characters (\'R\' or \'L\') representing the cells of the map. Print the resultant grid where rivers have been replaced by their unique identifiers. # Input Format: 1. An integer `n`, the size of the grid. 2. `n` lines, each containing `n` characters (\'R\' or \'L\'). # Output Format: - An `n` x `n` grid where each \'R\' from the original grid has been replaced by a unique integer identifier for that river. Example: Input: ``` 5 RRLLL LRRLL LLLLL RLRRL LLLLR ``` Output: ``` 1 1 0 0 0 2 1 1 0 0 0 0 0 0 0 3 0 4 4 0 0 0 0 0 5 ``` In this example, the grid after labelling the rivers would look like the given output.","solution":"from collections import deque def label_rivers(n, grid): Label the rivers in the grid with unique integer identifiers. Parameters: n (int): The size of the grid (n x n) grid (list of str): The n x n grid representation with \'R\' for river and \'L\' for land Returns: list of list of int: The grid with rivers labeled with unique identifiers directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] result = [[0] * n for _ in range(n)] def bfs(start_row, start_col, river_id): queue = deque([(start_row, start_col)]) result[start_row][start_col] = river_id while queue: row, col = queue.popleft() for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < n and grid[new_row][new_col] == \'R\' and result[new_row][new_col] == 0: result[new_row][new_col] = river_id queue.append((new_row, new_col)) river_id = 1 for i in range(n): for j in range(n): if grid[i][j] == \'R\' and result[i][j] == 0: bfs(i, j, river_id) river_id += 1 return result def convert_to_output_format(result): Convert the result grid to the required output format (with space-separated values for rows). Parameters: result (list of list of int): The grid with labeled rivers Returns: str: The formatted string representation of the grid. return \\"n\\".join(\\" \\".join(map(str, row)) for row in result)"},{"question":"Harry is responsible for managing a large network of servers which communicate with each other regularly. Each server can communicate with any other server through various direct and indirect connections. However, a particular server has become problematic and needs immediate isolation to prevent it from affecting others. Harry needs to determine whether removing a specific server will divide the remaining servers into two isolated groups or more. If that’s the case, the server is considered a critical node and should be isolated. Write a program to help Harry identify such critical servers in the network. More formally, given a network of `N` servers, represented as a list of pairs where each pair `(a, b)` indicates a direct connection between server `a` and server `b`, and a specific server `X`, determine if removing `X` will increase the number of connected components in the network. # Input - The first line contains two integers `N` and `M` (`2 ≤ N ≤ 1000`, `1 ≤ M ≤ 10000`), the number of servers and the number of direct connections respectively. - Each of the next `M` lines contains two integers `a` and `b` (`1 ≤ a, b ≤ N`), indicating a direct connection between server `a` and server `b`. - The last line contains a single integer `X` (`1 ≤ X ≤ N`), the server Harry needs to isolate. # Output - Output \\"YES\\" if removing the server `X` increases the number of connected components. - Otherwise, output \\"NO\\". # Example Input ``` 5 5 1 2 2 3 3 4 4 5 3 5 3 ``` Output ``` YES ``` Note In the example, removing server `3` splits the network into two isolated groups: `{1, 2}` and `{4, 5}`. Therefore, the output is \\"YES\\".","solution":"def find_critical_server(N, M, connections, X): from collections import defaultdict, deque def bfs(node, visited, exclude): queue = deque([node]) visited.add(node) while queue: current = queue.popleft() for neighbor in graph[current]: if neighbor not in visited and neighbor != exclude: visited.add(neighbor) queue.append(neighbor) graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) # Count the number of connected components before removing X visited = set() components_before = 0 for server in range(1, N+1): if server != X and server not in visited: components_before += 1 bfs(server, visited, exclude=None) # Count the number of connected components after removing X visited = set() components_after = 0 for server in range(1, N+1): if server != X and server not in visited: components_after += 1 bfs(server, visited, exclude=X) return \\"YES\\" if components_after > components_before else \\"NO\\""},{"question":"In a galaxy far away, there is a planet called Pandoria where Pandorians use binary strings for their communication. A binary string is a sequence consisting only of characters \'0\' and \'1\'. The Pandorian council has initiated a task force to analyze and alter these binary strings to reduce their communication transmission energy. Pandorians can perform the following operation zero or more times: - Choose any substring that consists of the same character (\'0\' or \'1\') and remove it from the binary string. In each operation, the cost incurred is equal to the length of the chosen substring. The council has recently captured a new binary string `s` and they need your help to determine the minimum total energy cost required to reduce the binary string `s` to an empty string. The first line of input contains an integer `t` (1 ≤ t ≤ 10) — the number of test cases. Each of the next `t` lines contains a binary string `s` (1 ≤ |s| ≤ 10^5) — the binary string for each test case. For each test case, output a single integer — the minimum total energy cost required to reduce the binary string to an empty string. # Example Input ``` 3 1100 101 111000 ``` Output ``` 2 3 2 ``` Explanation: For the first case: \\"1100\\", you can remove \\"11\\" with cost 2, then \\"00\\" with cost 2 (total cost is 2). For the second case: \\"101\\", you remove each character one by one: \\"1\\" with cost 1, \\"0\\" with cost 1, and \\"1\\" with cost 1 (total cost is 3). For the third case: \\"111000\\", you can remove \\"111\\" with cost 3, and \\"000\\" with cost 3 (total cost is 2). Write a program that meets these requirements for the council.","solution":"def min_energy_cost(binary_strings): results = [] for s in binary_strings: i = 0 n = len(s) cost = 0 while i < n: j = i while j < n and s[j] == s[i]: j += 1 cost += 1 i = j results.append(cost) return results"},{"question":"Tom is a software engineer who loves exploring new programming languages and frameworks. Recently, he learned about various algorithms for string matching and decided to solve a problem where he needs to find the longest common prefix among a list of strings. Write a function that takes in a list of strings and returns the longest common prefix of all the strings. If there is no common prefix, return an empty string. # Input - The first line contains an integer n (1 ≤ n ≤ 200) — the number of strings in the list. - The next n lines contain one string each. Each string is non-empty and has a length of at most 1000. All the strings consist of only lowercase English letters. # Output - Print the longest common prefix of the list of strings. If there is no common prefix, print an empty string. # Example Input: ``` 3 flower flow flight ``` Output: ``` fl ``` Input: ``` 2 dog racecar ``` Output: ``` (empty string) ``` Notes: In the first example, the longest common prefix among \\"flower\\", \\"flow\\", and \\"flight\\" is \\"fl\\". In the second example, there is no common prefix among \\"dog\\" and \\"racecar\\". Therefore, the output is an empty string.","solution":"def longest_common_prefix(strings): Finds the longest common prefix in a list of strings. Parameters: strings (list of str): List of strings to find the common prefix. Returns: str: Longest common prefix if not strings: return \\"\\" # Start with the first word as the prefix prefix = strings[0] for s in strings[1:]: while s[:len(prefix)] != prefix and prefix: prefix = prefix[:len(prefix)-1] # Early exit if there\'s no common prefix if not prefix: break return prefix # Example Run n = 3 strs = [\\"flower\\", \\"flow\\", \\"flight\\"] print(longest_common_prefix(strs))"},{"question":"You are given a grid of size n x m where each cell in the grid contains either 0 or 1. Your task is to find the largest square containing only 1\'s and return its area. The square must be located within the bounds of the grid. For example, consider the following grid: ``` 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` The largest square contains only 1\'s and has an area of 4 (2x2). Write a program that takes an integer n (1 ≤ n ≤ 300), an integer m (1 ≤ m ≤ 300), followed by an n x m grid of integers (each either 0 or 1). Your program should print the area of the largest square containing only 1\'s. Input: - The first line contains the integers n and m separated by a space. - Each of the next n lines contains m integers representing the grid. Output: - Print a single integer representing the area of the largest square containing only 1\'s. Example: ``` Input: 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 ``` Write your solution in Python.","solution":"def maximal_square_area(n, m, grid): if n == 0 or m == 0: return 0 max_side = 0 dp = [[0] * m for _ in range(n)] for i in range(n): for j in range(m): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side ** 2"},{"question":"You are given a string s consisting of lowercase English letters. A substring is defined as a contiguous segment of the string. A substring is considered balanced if it contains an equal number of two specific characters, say \'x\' and \'y\'. For example, in the string \\"xyxyyx\\", the substring \\"xyxy\\" and \\"yx\\" are balanced, but \\"xyx\\" is not. Your task is to find the smallest balanced substring in the given string s. If there are multiple smallest balanced substrings, return the one which appears first in the string. If no balanced substring exists, return \\"-1\\". The first line of input contains an integer t (1 le t le 100) — the number of test cases. For each test case, there is a single line containing the string s (1 le |s| le 1000). For each test case, output the smallest balanced substring, or -1 if no such substring exists. Input: t = 2 s = \\"abxyxybc\\" s = \\"abacaba\\" Output: \\"xy\\" -1 Explanation: In the first test case, \\"xy\\" is the smallest substring with an equal number of \'x\' and \'y\' that appears first. In the second test case, there are no substrings with an equal number of any specific pair of characters.","solution":"def smallest_balanced_substring(t, strings): def find_smallest_balanced(s): n = len(s) min_length = float(\'inf\') result = \\"-1\\" for i in range(n): count_x = 0 count_y = 0 for j in range(i, n): if s[j] == \'x\': count_x += 1 elif s[j] == \'y\': count_y += 1 if count_x == count_y and count_x > 0: current_length = j - i + 1 if current_length < min_length: min_length = current_length result = s[i:j+1] return result results = [] for string in strings: results.append(find_smallest_balanced(string)) return results"},{"question":"In an ancient kingdom, there are two types of magical coins, type A and type B, each with a specific magical value. The king wants to distribute these coins among his subjects in such a way that each type of coin is distributed equally to each subject. However, the values of coins given to different subjects don\'t necessarily need to be the same. You are given the number of subjects and the total value of each type of coin. Determine whether it\'s possible to distribute the coins equally among the subjects without fractioning any coin. If it\'s possible, print \\"YES\\", followed by an example distribution of the coins among the subjects. Otherwise, print \\"NO\\". The first input line contains two space-separated integers s and n (1 ≤ s, n ≤ 105) that show how many subjects there are and how many magical coin types there are, correspondingly. The second line contains n space-separated integers: a1, a2, ..., an (1 ≤ ai ≤ 107) — the values of each type of magical coin. Print \\"YES\\" if it\'s possible to distribute the coins equally among the subjects, followed by s lines each containing n space-separated integers representing the value of coins each subject receives. Otherwise, print \\"NO\\". For example, if the first test sample has s=2 and the coin values are 8 and 12, it is possible to distribute these coins equally among two subjects such that each subject gets the sum of 4 from the first type and 6 from the second type. Therefore, the output will be: ``` YES 4 6 4 6 ```","solution":"def distribute_coins(s, n, coin_values): # Check whether each coin value can be evenly distributed among subjects for a in coin_values: if a % s != 0: return \\"NO\\" # Calculate the distribution distribution = [[a // s for a in coin_values] for _ in range(s)] # Generate the output result = [\\"YES\\"] for row in distribution: result.append(\\" \\".join(map(str, row))) return \\"n\\".join(result)"},{"question":"You are given an array of integers containing n elements where each element is either 0 or a positive integer less than n. You need to identify the smallest missing positive integer in the array. The smallest missing positive integer is defined as the smallest positive integer that is not present in the array. For example, if the input array is [3, 4, -1, 1], the smallest missing positive integer is 2. If the input array is [1, 2, 0], the smallest missing positive integer is 3. Your task is to implement a function that finds the smallest missing positive integer in the given array. # Input Format - The first line contains an integer t (1 le t le 100) — the number of test cases. - The first line of each test case contains an integer n (1 le n le 100) — the length of the array. - The second line of the test case contains n integers, the elements of the array. # Output Format For each test case, print a single integer — the smallest missing positive integer. # Example Input ``` 3 4 3 4 -1 1 3 1 2 0 5 7 8 9 11 12 ``` Output ``` 2 3 1 ``` # Constraints - The array elements are integers from -n to n. - The length of the array n is at least 1 and at most 100. - The number of test cases t is at least 1 and at most 100. # Note - The function should handle edge cases such as arrays with all negative numbers or arrays with consecutive positive integers starting from 1.","solution":"def smallest_missing_positive_integer(arr): Finds the smallest missing positive integer in the given array. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1 def process_test_cases(t, test_cases): results = [] for i in range(t): array = test_cases[i] result = smallest_missing_positive_integer(array) results.append(result) return results"},{"question":"You are given an array of integers and an integer k. Your task is to partition the array into subarrays such that each subarray contains at least one element and the absolute difference between the maximum and minimum elements in each subarray is at most k. You need to determine the minimum number of subarrays required to partition the array. The first line of the input contains two integers n and k (1 ≤ n ≤ 1000, 0 ≤ k ≤ 10^5), where n is the number of elements in the array, and k is the maximum allowed difference between the maximum and minimum elements in each subarray. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^5), representing the elements of the array. Output a single integer—the minimum number of subarrays required to partition the array. # Example Input: ``` 5 3 1 5 6 7 10 ``` Output: ``` 3 ``` Explanation: - The first subarray could be [1], as the absolute difference between the maximum and minimum element is 0. - The second subarray could be [5, 6, 7], the absolute difference between the maximum and minimum element is 2. - The third subarray could be [10], as the absolute difference between the maximum and minimum element is 0. Therefore, a partition of the given array with the provided constraints results in 3 subarrays.","solution":"def min_subarrays_required(n, k, arr): Returns the minimum number of subarrays required to partition the array such that each subarray contains at least one element and the absolute difference between the maximum and minimum elements in each subarray is at most k. if n == 0: return 0 # Initialize counters num_subarrays = 1 min_element = arr[0] max_element = arr[0] for i in range(1, n): min_element = min(min_element, arr[i]) max_element = max(max_element, arr[i]) # If the current max - min exceeds k, start a new subarray if max_element - min_element > k: num_subarrays += 1 min_element = arr[i] max_element = arr[i] return num_subarrays"},{"question":"In this task, you are given a set of points on a 2D grid. You can move from point (x1, y1) to point (x2, y2) if either x1 == x2 or y1 == y2. Your goal is to determine if there exists a path between two given points on this grid using the allowed moves. Your program should handle the queries of the following two types: 1. \\"A x y\\" - Add a point (x, y) to the set of points. 2. \\"Q x1 y1 x2 y2\\" - Determine if there exists a path between point (x1, y1) and point (x2, y2) using the allowed moves. Answer all the queries. Note that initially, you have an empty set of points. The first line of the input contains an integer n denoting the number of queries, (1 ≤ n ≤ 100). Each of the following lines contains a query as described above. All coordinates in the input are integers and do not exceed 10^9 by their absolute value. It is guaranteed that all queries are correct. For each query of the second type, print \\"YES\\" or \\"NO\\" on a separate line depending on the answer.","solution":"def can_move(points, start, end): if start == end: return True from collections import defaultdict, deque graph = defaultdict(list) x_coord = defaultdict(set) y_coord = defaultdict(set) for (x, y) in points: x_coord[x].add((x, y)) y_coord[y].add((x, y)) for (x, y) in points: for neighbor in x_coord[x]: if neighbor != (x, y): graph[(x, y)].append(neighbor) for neighbor in y_coord[y]: if neighbor != (x, y): graph[(x, y)].append(neighbor) queue = deque([start]) visited = set() while queue: point = queue.popleft() if point == end: return True for neighbor in graph[point]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False def process_queries(queries): points = set() results = [] for query in queries: parts = query.split() if parts[0] == \\"A\\": x, y = int(parts[1]), int(parts[2]) points.add((x, y)) elif parts[0] == \\"Q\\": x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) if can_move(points, (x1, y1), (x2, y2)): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an integer array `arr`, of length `n`, and an integer `m`, your task is to determine if there exists a subarray of length exactly `m` where the average of the subarray is greater than or equal to a given integer `k`. If such a subarray exists, return `True`, otherwise return `False`. # Input: - The first line of input contains two space-separated integers `n` and `m` (1 ≤ m ≤ n ≤ 100,000), where `n` is the length of the array and `m` is the length of the subarray. - The second line contains `n` space-separated integers `arr[i]` (-10^4 ≤ arr[i] ≤ 10^4), representing the elements of the array. - The third line contains a single integer `k` (-10^4 ≤ k ≤ 10^4), representing the threshold average. # Output: - A single line containing `True` if there exists a subarray of length exactly `m` with an average greater than or equal to `k`, otherwise `False`. # Example: **Input:** ``` 5 3 1 3 5 2 8 4 ``` **Output:** ``` True ``` **Input:** ``` 4 2 1 2 3 4 5 ``` **Output:** ``` False ``` **Explanation:** In the first example, the subarray `[3, 5, 2]` has an average of `(3 + 5 + 2) / 3 = 10 / 3 ≈ 3.33`, which is less than 4, but subarray `[5, 2, 8]` has an average of `(5 + 2 + 8) / 3 = 15 / 3 = 5`, which is greater than 4, so the output is `True`. In the second example, no subarray of length 2 has an average greater than or equal to 5, so the output is `False`.","solution":"def does_subarray_exist(n, m, arr, k): # Set the required sum threshold required_sum = k * m # Calculate the sum of the first window of size m current_sum = sum(arr[:m]) # Check if the first window sum is greater than or equal to the required sum if current_sum >= required_sum: return True # Slide the window of size m across the array and check sums for i in range(m, n): # Slide the window right by subtracting the element that falls out on the left and adding the new element on the right current_sum += arr[i] - arr[i - m] # Check if the updated window sum is greater than or equal to the required sum if current_sum >= required_sum: return True # If no valid subarray is found, return False return False"},{"question":"Your task is to implement a simplified simulation of a maze game. The maze is represented by a 2D grid of size `n x n` with cells containing integers representing the height of the terrain. Your goal is to determine the minimum effort required to move from the top-left corner of the maze to the bottom-right corner. Moving from one cell to another incurs an effort equal to the absolute difference in heights between the two cells. You can move to any of the 4 adjacent cells (left, right, up, down) as long as it is within the bounds of the grid. # Input - The first line contains a single integer `n` (2 ≤ `n` ≤ 100) representing the size of the grid. - The next `n` lines each contain `n` integers representing the heights of the terrain in the grid (0 ≤ height ≤ 10^6). # Output - Print a single integer representing the minimum effort required to reach the bottom-right corner from the top-left corner. # Sample Input ``` 3 1 2 2 3 8 2 5 3 5 ``` # Sample Output ``` 2 ``` # Explanation In this example, one of the paths with the minimum effort is: (1 -> 2 -> 2 -> 2 -> 5). The effort required to travel this path is maximum difference: max(abs(1-2), abs(2-2), abs(2-2), abs(2-5)) = max(1, 0, 0, 3) = 3. Another more optimal path is: (1 -> 2 -> 2 -> 3 -> 5). The effort required to travel this path is maximum difference: max(abs(1-2), abs(2-2), abs(2-3), abs(3-5)) = max(1, 0, 1, 2) = 2. The minimum effort required among all possible paths is 2.","solution":"import heapq def min_effort_to_reach_end(n, grid): def is_valid(x, y): return 0 <= x < n and 0 <= y < n directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] efforts = [[float(\'inf\')] * n for _ in range(n)] pq = [(0, 0, 0)] # (effort, x, y) efforts[0][0] = 0 while pq: current_effort, x, y = heapq.heappop(pq) if x == n-1 and y == n-1: return current_effort for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): effort_to_next = max(current_effort, abs(grid[nx][ny] - grid[x][y])) if effort_to_next < efforts[nx][ny]: efforts[nx][ny] = effort_to_next heapq.heappush(pq, (effort_to_next, nx, ny)) return efforts[n-1][n-1] # Example usage def main(): n = int(input()) grid = [list(map(int, input().split())) for _ in range(n)] result = min_effort_to_reach_end(n, grid) print(result) if __name__ == \\"__main__\\": main()"},{"question":"A robot is placed on a grid of size m times n starting from the top-left corner (1, 1). It can only move right or down. Each cell contains a value representing the cost to move to that cell. The robot aims to move to the bottom-right corner (m, n) with the minimum cost. You need to calculate the minimum cost for the robot to reach the bottom-right corner from the top-left corner. You are given the grid in the form of an array of arrays, where each element represents the cost to enter that cell. **Input:** - The first line contains one integer t (1 le t le 100) — the number of test cases. - For each test case: - The first line contains two integers m and n (1 le m, n le 100) - the number of rows and columns in the grid. - The next m lines each contain n integers separated by spaces, representing the cost grid. **Output:** - For each test case, print the minimum cost required for the robot to reach the bottom-right corner from the top-left corner. **Example Input:** ``` 2 3 4 1 3 1 2 1 5 1 3 4 2 1 1 2 2 1 2 1 3 ``` **Example Output:** ``` 8 5 ``` **Explanation:** - In the first test case, one possible path with the minimum cost is: 1 → 1 → 1 → 2 → 1 → 1 (total cost: 8). - In the second test case, one possible path with the minimum cost is: 1 → 1 → 3 (total cost: 5).","solution":"def min_cost_path(t, test_cases): results = [] for case in test_cases: m, n = case[\'dimensions\'] grid = case[\'grid\'] dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] for i in range(1, m): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] results.append(dp[-1][-1]) return results"},{"question":"Annie loves solving puzzles in her free time. Recently, she came across a puzzle that involves arranging strings. Given a string, Annie wants to arrange the characters of the string such that no two adjacent characters are the same. If there are multiple solutions, any one of them will do. If it is not possible to rearrange the characters in such a way, she wants to know that too. Write a program that, given a string, checks whether it is possible to rearrange its characters such that no two adjacent characters are the same. If it is possible, return any such rearrangement of the string. Otherwise, return \\"Not Possible\\". Input: - A single string ( s ) with length ( 1 leq |s| leq 10^4 ), consisting of lowercase English letters. Output: - If it is possible to rearrange the characters of the string so that no two adjacent characters are the same, return the rearranged string. - If it is not possible, return \\"Not Possible\\". Example: Input: \\"aab\\" Output: \\"aba\\" Input: \\"aaab\\" Output: \\"Not Possible\\"","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string such that no two adjacent characters are the same. Args: s (str): The input string. Returns: str: The rearranged string or \\"Not Possible\\" if rearrangement is not possible. # Get the frequency of each character freq = Counter(s) # Max heap based on frequency max_heap = [(-value, key) for key, value in freq.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If prev character\'s frequency is more than 0, push it back in the heap if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) # Update prev_char and prev_freq prev_char, prev_freq = char, freq + 1 rearranged = \'\'.join(result) if len(rearranged) == len(s): return rearranged else: return \\"Not Possible\\""},{"question":"**You are tasked with developing a new navigation system for a quantum computing research facility. The facility\'s network can be represented as a directed graph with n nodes and m edges, where each node corresponds to a specific location within the facility, and each edge represents a permissible direct path between two locations. Nodes are numbered from 1 to n. The system must be designed to quickly determine the shortest path between any two given locations. To achieve this, you need to analyze queries that request the shortest path distance between specified pairs of nodes. The first line of the input contains two integers, n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), representing the number of nodes and edges, respectively. Each of the following m lines describes an edge with three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 100), indicating a directed edge from node u to node v with a weight of w. The next line contains a single integer q (1 ≤ q ≤ 100000), representing the number of queries. Each of the following q lines contains two integers, a and b (1 ≤ a, b ≤ n), for which you need to find the shortest path distance from node a to node b. For each query, output the shortest path distance from node a to node b. If there is no path between the nodes, output -1. # Example **Input:** ``` 4 4 1 2 5 2 3 10 3 4 1 1 3 20 3 1 3 2 4 1 4 ``` **Output:** ``` 15 11 16 ``` In this example, the facility consists of 4 locations (nodes) with 4 directed paths (edges). There are 3 queries regarding the shortest paths: 1. From node 1 to node 3, the shortest path is 1 -> 2 -> 3 with a total distance of 15. 2. From node 2 to node 4, the shortest path is 2 -> 3 -> 4 with a total distance of 11. 3. From node 1 to node 4, the shortest path is 1 -> 2 -> 3 -> 4 with a total distance of 16. If the graph or one of the queries guarantees no path between the specified nodes, the output for that query should be -1. The efficiency of your algorithm for determining the shortest path and handling multiple queries is crucial due to the constraints involved.","solution":"import sys import heapq def dijkstra(n, adj, start): dist = [sys.maxsize] * (n + 1) dist[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > dist[current_node]: continue for neighbor, weight in adj[current_node]: distance = current_distance + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return dist def shortest_path(n, edges, queries): adj = [[] for _ in range(n + 1)] for u, v, w in edges: adj[u].append((v, w)) distances = {} for i in range(1, n + 1): distances[i] = dijkstra(n, adj, i) results = [] for a, b in queries: result = distances[a][b] if result == sys.maxsize: results.append(-1) else: results.append(result) return results"},{"question":"There is a city with n intersections connected by m bidirectional roads. Each intersection has a unique ID from 1 to n. The traffic department wants to conduct a survey to analyze traffic patterns by sending a special vehicle that can start from any intersection, travel across a subset of roads, and return to the starting intersection. The vehicle should travel such that it visits each intersection exactly once before returning back to the start (i.e., the vehicle should complete a Hamiltonian cycle if one exists). Determine if such a cycle exists in the city and if it does, output one valid cycle. If no such cycle exists, output \\"-1\\". Input The first line contains two integers n and m (1 le n le 12, 0 le m le frac{n(n-1)}{2}) — the number of intersections and the number of roads. Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v) — there is a bidirectional road between intersections u and v. Output If a Hamiltonian cycle exists, output the IDs of the intersections included in the cycle in the order they are visited, starting and ending at the same intersection. If there are multiple valid cycles, output any one of them. If no Hamiltonian cycle exists, output \\"-1\\". Examples Input 4 6 1 2 1 3 1 4 2 3 2 4 3 4 Output 1 2 3 4 1 Input 3 2 1 2 2 3 Output -1","solution":"def find_hamiltonian_cycle(n, m, paths): from itertools import permutations if n == 1: return [1, 1] if m == 0 else \\"-1\\" edges = set() for u, v in paths: edges.add((u, v)) edges.add((v, u)) for perm in permutations(range(1, n + 1)): cycle = perm + (perm[0],) if all((cycle[i], cycle[i+1]) in edges for i in range(n)): return list(cycle) return \\"-1\\" # Example usage: # n = 4, m = 6 # paths = [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)] # print(find_hamiltonian_cycle(n, m, paths)) # Output: [1, 2, 3, 4, 1] or any valid Hamiltonian cycle"},{"question":"Given a rectangular grid with dimensions n x m, your task is to determine if it is possible to place a diagonal line segment from the top-left corner to the bottom-right corner without crossing any other grid cells that the segment connects. Specifically, the line segment should only touch cell centers and boundaries but should not pass through the interior of any cell. The first line contains two integers n, m (1 ≤ n, m ≤ 100). If it is possible to place such a diagonal line segment, print \\"YES\\" on the first line. Then, print the cells, in order from top-left to bottom-right, that the segment touches. Each cell is represented by a pair of integers denoting its row and column. If such a placement is not possible, print \\"NO\\". Example Input 1: 2 2 Example Output 1: YES 1 1 2 2 Example Input 2: 3 2 Example Output 2: NO","solution":"def is_diagonal_possible(n, m): if n != m: return \\"NO\\" result = [\\"YES\\"] for i in range(1, n + 1): result.append(f\\"{i} {i}\\") return \\"n\\".join(result)"},{"question":"You are given a list of airplane flight data records. Each record contains a flight ID, departure city, arrival city, departure timestamp, arrival timestamp, and the status of the flight (on-time, delayed, or canceled). Write a program to calculate the average delay time for flights that were delayed and the proportion of canceled flights. Your output should be a tuple containing: 1. The average delay time in minutes (rounded to the nearest whole number). 2. The proportion of canceled flights as a floating-point number with 2 decimal places. Details for the flight data: - The departure and arrival timestamps are given in the format \\"YYYY-MM-DD HH:MM:SS\\". - If a flight is delayed, the actual arrival time is used for computing the delay as the difference between the scheduled and actual arrival times. - If a flight was canceled, the arrival timestamp will be \\"N/A\\". The input will be provided as a list of dictionaries, each representing a flight record. Your code should have the following signature: ```python def analyze_flight_data(flight_records: List[Dict[str, Any]]) -> Tuple[int, float]: ``` Example: ```python flight_records = [ {\\"flight_id\\": \\"A123\\", \\"departure_city\\": \\"NYC\\", \\"arrival_city\\": \\"LA\\", \\"departure_timestamp\\": \\"2023-05-01 08:00:00\\", \\"arrival_timestamp\\": \\"2023-05-01 11:00:00\\", \\"status\\": \\"on-time\\"}, {\\"flight_id\\": \\"B456\\", \\"departure_city\\": \\"LA\\", \\"arrival_city\\": \\"SF\\", \\"departure_timestamp\\": \\"2023-05-01 09:00:00\\", \\"arrival_timestamp\\": \\"N/A\\", \\"status\\": \\"canceled\\"}, {\\"flight_id\\": \\"C789\\", \\"departure_city\\": \\"SF\\", \\"arrival_city\\": \\"NYC\\", \\"departure_timestamp\\": \\"2023-05-01 12:00:00\\", \\"arrival_timestamp\\": \\"2023-05-01 20:00:00\\", \\"status\\": \\"delayed\\"}, ] print(analyze_flight_data(flight_records)) # Output: (120, 0.33) ``` Note: The times are always in the same time zone, so you do not need to consider time zone differences for calculations.","solution":"from typing import List, Dict, Any, Tuple from datetime import datetime def analyze_flight_data(flight_records: List[Dict[str, Any]]) -> Tuple[int, float]: total_delay = 0 delayed_flights = 0 canceled_flights = 0 for record in flight_records: if record[\'status\'] == \'delayed\': scheduled_arrival = datetime.strptime(record[\'scheduled_arrival_timestamp\'], \\"%Y-%m-%d %H:%M:%S\\") actual_arrival = datetime.strptime(record[\'actual_arrival_timestamp\'], \\"%Y-%m-%d %H:%M:%S\\") delay_minutes = (actual_arrival - scheduled_arrival).total_seconds() / 60 total_delay += delay_minutes delayed_flights += 1 elif record[\'status\'] == \'canceled\': canceled_flights += 1 average_delay = round(total_delay / delayed_flights) if delayed_flights > 0 else 0 canceled_proportion = round(canceled_flights / len(flight_records), 2) if len(flight_records) > 0 else 0.00 return (average_delay, canceled_proportion)"},{"question":"You are given a string `s` consisting of lowercase letters and an integer `k`. You should determine whether it is possible to rearrange the characters in `s` such that the same characters are at least `k` distance apart. If it is possible, return any possible rearrangement of the string. If it is not possible, return an empty string. Input: - A string `s` of length n (1 ≤ n ≤ 10^4) consisting of lowercase letters only. - An integer `k` (1 ≤ k ≤ n) Output: - A rearranged string where the same characters are at least k distance apart if possible. - An empty string if it is not possible to rearrange the string to meet the condition. Example: Input: ``` s = \\"aabbcc\\", k = 3 ``` Output: ``` abcabc ``` Input: ``` s = \\"aaabc\\", k = 3 ``` Output: ``` \\"\\" # Not possible ```","solution":"import heapq from collections import Counter, deque def rearrange_string(s, k): if k <= 1: return s counter = Counter(s) max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) wait_list = deque() # to keep track of the characters within the k distance result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) wait_list.append((char, freq + 1)) # incrementing because we use negative frequencies if len(wait_list) < k: continue char, freq = wait_list.popleft() if -freq > 0: heapq.heappush(max_heap, (freq, char)) # Reset frequencies to positive before checking if result is valid if len(result) != len(s): return \\"\\" return \\"\\".join(result)"},{"question":"Anna recently learned about linked lists and doubly linked lists. She created a doubly linked list, but while testing it, she accidentally merged two nodes. Now, instead of a single linked list, she has a circular doubly linked list (a doubly linked list in which the last node is connected back to the first node in both directions). Anna needs help finding the smallest node (the one with the minimum value) in this circular doubly linked list. Could you write a function to help Anna find the smallest node value in her circular doubly linked list? The list has at least one node and all node values are unique. **Input:** You will be given the head node of the circular doubly linked list, which contains the next and prev pointers and the value of each node. **Output:** Your function should return the minimum value in the circular doubly linked list. **Function Signature:** ```python class Node: def __init__(self, value:int): self.value = value self.next = None self.prev = None def find_min_in_circular_doubly_linked_list(head: Node) -> int: pass ``` **Example:** ```python # Node creation node1 = Node(3) node2 = Node(1) node3 = Node(4) # Connecting nodes to make a circular doubly linked list node1.next = node2 node2.next = node3 node3.next = node1 node1.prev = node3 node2.prev = node1 node3.prev = node2 # Finding the minimum in the circular doubly linked list print(find_min_in_circular_doubly_linked_list(node1)) # Output: 1 ``` **Constraints:** 1. The circular doubly linked list contains at least one node. 2. Each node has a unique value. 3. You may assume all standard properties of a doubly linked list are maintained except it is circular.","solution":"class Node: def __init__(self, value:int): self.value = value self.next = None self.prev = None def find_min_in_circular_doubly_linked_list(head: Node) -> int: # Initialize a variable to keep track of the minimum value, starting with the head node\'s value min_value = head.value current = head.next # Iterate through the list until we loop back to the head node while current != head: if current.value < min_value: min_value = current.value current = current.next return min_value"},{"question":"You are given a sequence of integers and you need to sort this sequence in such a way that the sum of absolute differences between adjacent elements is minimized. This is known as the \\"Optimal Sorting for Minimal Adjacent Difference\\" problem. For example, given the sequence `[4, 2, 7, 3]`, one of the optimal ways to sort this sequence is `[2, 3, 4, 7]` such that the sum of absolute differences between adjacent elements is minimized. Your task is to write a function `optimal_sort(arr)` that takes an array of integers `arr` and rearranges the elements to achieve the minimum possible sum of absolute differences between consecutive elements. # Input: - `arr`: A list of integers where the length of the array is between 1 and 10^5. # Output: - Return the sorted array such that the sum of absolute differences between adjacent elements is minimized. # Example: ```python def optimal_sort(arr): return sorted(arr) # Input arr = [4, 2, 7, 3] # Output [2, 3, 4, 7] ``` # Constraints: - The length of the array `1 <= len(arr) <= 10^5`. - The elements of the array `1 <= arr[i] <= 10^9`.","solution":"def optimal_sort(arr): Sorts the array such that the sum of absolute differences between adjacent elements is minimized by simply sorting the array. :param arr: List of integers :return: Sorted list of integers return sorted(arr)"},{"question":"You are organizing a new funfair event with a shooting game booth. The game involves a circular rotating target divided into **n** equal sections, each marked with a unique number from 1 to **n**. The target rotates in such a way that it moves to the next section every second, and it takes **n** seconds to complete one full rotation back to the starting section. A player can shoot the target at any moment but can only hit the section that is currently at the top. Given an integer **n** which represents the number of sections and a sequence of shots the player takes, you need to determine the sequence of numbers (sections) that were hit. For each shot, we will give the time (in seconds) at which the shot was fired. Assume the target starts with section 1 at the top at time t = 0. The first line of input contains an integer **n** (1 leq n leq 10^5), denoting the number of sections in the target. The next line contains an integer **m** (1 leq m leq 10^5), denoting the number of shots taken. The third line contains **m** integers separated by spaces, representing the timestamps at which the shots were fired. Output **m** integers separated by spaces, representing the sections of the target that were hit at each respective timestamp. Input: ``` n m timestamp_1 timestamp_2 ... timestamp_m ``` Output: ``` hit_1 hit_2 ... hit_m ``` Example: Input: ``` 5 3 2 7 12 ``` Output: ``` 3 3 3 ``` Explanation: - The target is divided into 5 sections, with section 1 at the top at time t = 0. - At time t = 2, the section at the top is section 3 (since it moves every second: 1 -> 2 -> 3). - At time t = 7, the section at the top is again section 3 (since it completes a full rotation every 5 seconds). - At time t = 12, the section at the top is also section 3. Hence, the output is `3 3 3`.","solution":"def target_sections_hit(n, m, timestamps): Determines the sections hit on a rotating circular target. Parameters: n (int): Number of sections in the target. m (int): Number of shots fired. timestamps (list of int): Timestamps at which shots were fired. Returns: list of int: Sections hit at the given timestamps. return [(t % n) + 1 for t in timestamps]"},{"question":"Given an array of n positive integers and an integer S, your task is to determine if there exists a contiguous subarray whose sum is exactly S. If such a subarray exists, print its starting and ending indices (1-based). If there are multiple such subarrays, print any one of them. If no such subarray exists, print -1. The first line of input contains two integers n and S (1 ≤ n ≤ 10^5, 1 ≤ S ≤ 10^9). The second line contains n positive integers a1, a2, ..., an (1 ≤ ai ≤ 10^5) — the elements of the array. Print the starting and ending indices of the subarray if such subarray exists. Otherwise, print -1. Example: Input: 5 12 1 2 3 7 5 Output: 2 4 Explanation: The sum of elements from index 2 to 4 (2-based) is 2 + 3 + 7 = 12. Example: Input: 5 15 1 2 3 4 5 Output: 1 5 Explanation: The sum of the entire array elements from index 1 to 5 (2-based) is 1 + 2 + 3 + 4 + 5 = 15. Example: Input: 5 100 1 2 3 4 5 Output: -1 Explanation: There is no contiguous subarray with the sum 100.","solution":"def find_subarray_with_sum(n, S, arr): Finds the starting and ending indices of a contiguous subarray whose sum is exactly S. Returns -1 if no such subarray exists. start = 0 current_sum = 0 for end in range(n): current_sum += arr[end] while current_sum > S and start <= end: current_sum -= arr[start] start += 1 if current_sum == S: return start + 1, end + 1 return -1"},{"question":"You are tasked with developing a scheduling system for a conference with the following requirements. Each presentation has a specific start and end time. To maximize the number of presentations that can be attended without any overlap, you need to implement a function that determines the maximum number of presentations that can be included in the schedule. A presentation is defined by its start time and end time. You are given a list of presentations where each presentation is represented by a tuple (start, end). Write a function that takes a list of presentations and returns the maximum number of non-overlapping presentations that can be attended. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of presentations. - The next `n` lines each contain two integers: `start` and `end` (0 ≤ start < end ≤ 10^9), representing the start and end times of a presentation. # Output - A single integer representing the maximum number of non-overlapping presentations that can be attended. # Example **Input:** ``` 5 1 4 2 3 3 5 0 6 5 7 ``` **Output:** ``` 3 ``` **Explanation:** - The maximum number of non-overlapping presentations that can be attended are the presentations with times: (2, 3), (3, 5), and (5, 7). # Notes - Analyze all the given presentations and choose the maximum number that do not overlap. - Consider using a greedy approach for an efficient solution.","solution":"def max_presentations(presentations): Determines the maximum number of non-overlapping presentations that can be included in the schedule. Args: presentations (list of tuples): A list of tuples where each tuple represents the start and end times of a presentation. Returns: int: The maximum number of non-overlapping presentations. # Sort presentations by end time presentations.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in presentations: if start >= last_end_time: # Can attend this presentation count += 1 last_end_time = end # Update the last end time return count"},{"question":"Given an array of integers, find the maximum length of a subsequence such that the absolute difference between any two consecutive elements is at most 1. You are given an integer array `arr` of length `n`. Your task is to determine the length of the longest subsequence of `arr` where the absolute difference between any two consecutive elements does not exceed 1. # Input - The first line contains a single integer `n` (1 le n le 100,000) — the length of the array. - The second line contains `n` integers `arr[i]` (1 le arr[i] le 10,000) — the elements of the array. # Output - Output a single integer — the length of the longest subsequence where the absolute difference between any two consecutive elements is at most 1. # Examples **Example 1**: ``` Input: 6 1 2 2 3 1 2 Output: 5 Explanation: The longest subsequence is [1, 2, 2, 3, 2] where the absolute difference between consecutive elements is at most 1. ``` **Example 2**: ``` Input: 6 4 6 5 3 3 1 Output: 3 Explanation: The longest subsequence is [4, 5, 4] where the absolute difference between consecutive elements is at most 1. ``` # Note In the first example, one possible valid subsequence is [1, 2, 2, 3, 2], and its length is 5. In the second example, a possible valid subsequence is [4, 5, 4], and its length is 3.","solution":"def longest_subsequence(arr): from collections import Counter count = Counter(arr) max_length = 0 for number in count: current_length = count[number] # check sequences including number and number+1 if (number + 1) in count: current_length += count[number + 1] max_length = max(max_length, current_length) return max_length"},{"question":"You are given a grid with dimensions H times W consisting of H rows and W columns, where each cell contains either a \'.\' (empty cell) or a \'#\' (blocked cell). Your task is to move from the top-left corner of the grid to the bottom-right corner, but you can only move down or to the right at any point in time. Write a function that calculates the number of different paths you can take to go from the top-left to the bottom-right, assuming that you are allowed to pass through only empty cells (\'.\') and cannot pass through blocked cells (\'#\'). Your solution should be efficient enough to handle large grid sizes. # Input The first line contains a single integer T (1 leq T leq 100) – the number of test cases. The first line of each test case contains two integers H and W (1 leq H, W leq 1000) – the dimensions of the grid. The next H lines each contain W characters (either \'.\' or \'#\'), representing the grid. # Output For each test case, print a single integer representing the number of different paths to reach from the top-left corner to the bottom-right corner. If there is no valid path, return 0 for that test case. # Example Input ``` 2 3 3 ... .#. ... 3 3 ... # ... ``` Output ``` 2 0 ``` # Constraints - The sum of H times W over all test cases does not exceed 10^6.","solution":"def count_paths(T, test_cases): results = [] for t in range(T): H, W, grid = test_cases[t] if grid[0][0] == \'#\' or grid[H-1][W-1] == \'#\': results.append(0) continue dp = [[0] * W for _ in range(H)] dp[0][0] = 1 for i in range(H): for j in range(W): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] results.append(dp[H-1][W-1]) return results"},{"question":"You are given a 2D matrix of size n times m consisting only of \'.\' and \'#\' characters, where \'.\' represents an open cell and \'#\' represents a blocked cell. You are allowed to move from one cell to another if they share an edge (i.e., you can move up, down, left, or right). Your task is to check if there exists a path from the top-left corner of the matrix (cell (1, 1)) to the bottom-right corner (cell (n, m)) without passing through any blocked cells. The first line of the input contains two integers n (1 leq n, m leq 1000), representing the number of rows and columns in the matrix, respectively. The following n lines each contain a string of length m, representing the matrix. Each character is either \'.\' or \'#\'. Print \\"YES\\" if there is a path from the top-left to the bottom-right corner, otherwise print \\"NO\\". In the first example, there is a clear path from the top-left to the bottom-right corner, whereas in the second example there is no such path due to blockages.","solution":"def path_exists(matrix, n, m): if matrix[0][0] == \'#\' or matrix[n-1][m-1] == \'#\': return \\"NO\\" from collections import deque directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and matrix[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"An adventurer is in a dungeon and wants to find the shortest path to the exit. The dungeon is represented by a grid with n rows and m columns. Each cell in the grid is either empty (represented by `.`) or a wall (represented by `#`). The adventurer can move one cell up, down, left, or right, but cannot pass through walls. The adventurer\'s starting position is in the top-left cell (1, 1) and the exit is in the bottom-right cell (n, m). Write a program to determine the minimum number of steps required for the adventurer to reach the exit. If it is not possible to reach the exit, your program should return -1. The first line of input contains two space-separated integers n and m (2 ≤ n, m ≤ 1000), the number of rows and columns in the dungeon. The next n lines each contain a string of m characters representing the grid. Output a single integer, the minimum number of steps required to reach the exit, or -1 if it is not possible. Example Input: ``` 5 5 ..... .#. ..... .#. ..... ``` Example Output: ``` 8 ```","solution":"from collections import deque def shortest_path_dungeon(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return -1"},{"question":"Two detectives, Alice and Bob, are investigating a series of robbery cases. As part of their investigation, they have a collection of security camera footage that they want to analyze. Each footage captures a number of people coming in and out of a building at different times. The footage is represented as a list of timestamps of events, where each event is either an entry (\\"E\\") or an exit (\\"X\\"). For simplicity, assume that the events are in chronological order. Alice and Bob want to figure out the maximum number of people that were inside the building at any given point in time. Given the list of events, write a function `max_occupancy(events: List[str]) -> int` that determines the maximum occupancy of the building. Input: - The input will be a list of strings `events` where each string is either \\"E\\" (entry) or \\"X\\" (exit). The length of `events` can be between 1 and 1000 inclusive. Output: - The function should return an integer representing the maximum number of people that were inside the building at any point in time. Example: ```python >>> max_occupancy([\\"E\\", \\"E\\", \\"X\\", \\"E\\", \\"X\\", \\"X\\", \\"E\\"]) 2 ``` Explanation: - The sequence of events can be visualized as: - \\"E\\": 1 person inside - \\"E\\": 2 people inside - \\"X\\": 1 person inside - \\"E\\": 2 people inside - \\"X\\": 1 person inside - \\"X\\": 0 people inside - \\"E\\": 1 person inside The maximum number of people inside the building at any time is 2.","solution":"def max_occupancy(events): Given a list of events (\\"E\\" for entry and \\"X\\" for exit), this function returns the maximum occupancy of the building at any point in time. current_occupancy = 0 max_occupancy = 0 for event in events: if event == \\"E\\": current_occupancy += 1 max_occupancy = max(max_occupancy, current_occupancy) elif event == \\"X\\": current_occupancy -= 1 return max_occupancy"},{"question":"You are given a rectangular grid of integers where each cell represents land with a certain elevation. Your task is to find the minimum effort required to travel from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1). The effort for traveling between two adjacent cells is defined as the absolute difference in their elevations. You are allowed to move to any of the 4 adjacent cells (left, right, up, down). Return the minimum effort required for the journey. The first line contains two integers, n and m (1 ≤ n, m ≤ 100), representing the dimensions of the grid. The next n lines contain m integers each, describing the elevation of the land in each cell of the grid (0 ≤ grid[i][j] ≤ 10^6). Output a single integer, the minimum effort required to travel from the top-left to the bottom-right cell. # Example Input ``` 3 3 1 2 2 3 8 2 5 3 5 ``` Output ``` 2 ``` # Explanation One of the paths that minimizes the effort is: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) The maximum absolute difference in elevations is `2` (from 3 to 5 on cell (1, 2) to (2, 2)).","solution":"import heapq def min_effort_path(grid): Returns the minimum effort required to travel from the top-left cell to the bottom-right cell. n, m = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] efforts = [[float(\'inf\')] * m for _ in range(n)] efforts[0][0] = 0 min_heap = [(0, 0, 0)] # (effort, x, y) while min_heap: current_effort, x, y = heapq.heappop(min_heap) if x == n - 1 and y == m - 1: return current_effort for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m: new_effort = max(current_effort, abs(grid[nx][ny] - grid[x][y])) if new_effort < efforts[nx][ny]: efforts[nx][ny] = new_effort heapq.heappush(min_heap, (new_effort, nx, ny)) return -1 # If no path is found (should not happen for valid inputs)"},{"question":"# Coding Assessment Question Alexander and his friends often enjoy playing a game known as \\"Chain Messages\\". In the game, Alexander starts the chain by sending a unique message to the first friend. On receiving a message, each friend must forward it to another friend following a defined sequence of recipients until every friend has received exactly one message. Each friend has a specific preference order for how they would like to receive the messages. Your task is to help Alexander optimize the sequence such that the overall message relay process completes as efficiently as possible, with each friend receiving their preferred message early in the sequence if possible. Given: 1. An integer `n` (2 <= n <= 500) representing the number of friends. 2. An `n x n` matrix where the element at the `i-th` row and `j-th` column represents the rank of friend `j` in the preference list of friend `i` (1 is the highest rank, n is the lowest). Output the sequence of messages, denoted by the friend indexes, that should be sent to each friend such that all friends receive one message each, optimizing the sequence according to their preferences. # Input - The first line contains an integer `n`. - The next `n` lines each contain `n` integers — the preference list matrix. # Output - Output the sequence of `n` space-separated integers where the `i-th` integer represents the friend who should receive the message from friend `i`. # Example Input ``` 3 1 2 3 2 3 1 3 1 2 ``` Output ``` 2 3 1 ``` # Explanation In the given example, - Friend 1 prefers to forward the message to Friend 2 first. - Friend 2 would prefer to forward it to Friend 3, - Friend 3 wishes to forward it to Friend 1. In one of the optimal sequences, friend 1 forwards to friend 2, friend 2 forwards to friend 3, and friend 3 forwards to friend 1. # Note: There may be multiple valid sequences based on how the preferences align. Any valid execution order that adheres to the preference constraints is acceptable.","solution":"def chain_messages(n, preferences): sequence = [-1] * n used = [False] * n def dfs(friend): for next_friend in range(n): rank = preferences[friend][next_friend] - 1 if not used[rank]: used[rank] = True sequence[friend] = rank + 1 return for friend in range(n): dfs(friend) return sequence"},{"question":"You are given an array of integers and a single integer, k. Write a function to determine the length of the longest subarray that contains at most k distinct integers. For example, given the array [1, 2, 1, 2, 3] and k = 2, the longest subarray with at most 2 distinct integers is [1, 2, 1, 2], so your function should return 4. The function should be optimized to run in O(n) time complexity. **Input:** - An integer t denoting the number of test cases. - Followed by t test cases: - An integer n denoting the number of elements in the array. - An integer k representing the maximum number of distinct integers allowed in the subarray. - An array of integers of length n. **Output:** - For each test case, output a single integer denoting the length of the longest subarray with at most k distinct integers. **Example:** ``` Input: 2 5 2 1 2 1 2 3 7 3 1 2 1 3 4 3 3 Output: 4 5 ``` **Clarifications:** 1. In the first test case, the longest subarray with at most 2 distinct integers is [1, 2, 1, 2], which has a length of 4. 2. In the second test case, the longest subarray with at most 3 distinct integers is [1, 2, 1, 3, 4], which has a length of 5.","solution":"def longest_subarray_with_k_distinct(nums, k): from collections import defaultdict n = len(nums) if n == 0: return 0 left = 0 right = 0 max_length = 0 current_distinct_count = 0 frequency_map = defaultdict(int) while right < n: if frequency_map[nums[right]] == 0: current_distinct_count += 1 frequency_map[nums[right]] += 1 while current_distinct_count > k: frequency_map[nums[left]] -= 1 if frequency_map[nums[left]] == 0: current_distinct_count -= 1 left += 1 max_length = max(max_length, right - left + 1) right += 1 return max_length def process_test_cases(t, test_cases): results = [] for i in range(t): n, k, arr = test_cases[i] results.append(longest_subarray_with_k_distinct(arr, k)) return results"},{"question":"You are organizing a game tournament, and each player has a skill rating represented by a positive integer. To make the competition fairer, you want to form teams of players where the difference in skill levels within each team does not exceed a certain threshold. Your task is to calculate the minimum number of teams needed to satisfy this condition. Given a list of integers representing the skill levels of players and an integer `t` representing the maximum allowed skill difference within a team, determine the minimum number of teams required. # Input The input consists of two lines: - The first line contains two integers, `n` and `t` (1 ≤ `n` ≤ 2000, 0 ≤ `t` ≤ 1000), where `n` is the number of players and `t` is the allowed maximum skill difference within a team. - The second line contains `n` integers, representing the skill levels of the players. # Output Output a single integer, the minimum number of teams required. # Example Input: 6 2 1 5 3 9 6 4 Output: 3 Explanation: One possible way to form teams is: - Team 1: {1} - Team 2: {3, 4, 5, 6} - Team 3: {9} Each team has players with skill levels where the difference does not exceed 2. # Note - If `t` is 0, each player must be in their own team because no two players can have a difference in skill levels. - The order of the players in the input is arbitrary. You can sort and group them to minimize the number of teams.","solution":"def min_teams(n, t, skill_levels): Calculate the minimum number of teams required such that the skill difference within each team does not exceed t. Parameters: n (int): Number of players. t (int): Maximum skill difference allowed within a team. skill_levels (list): List of integers representing the skill levels. Returns: int: Minimum number of teams required. if t == 0: return n skill_levels.sort() teams_count = 1 starting_skill = skill_levels[0] for skill in skill_levels: if skill - starting_skill > t: teams_count += 1 starting_skill = skill return teams_count"},{"question":"Ruth is a software engineer at a company developing a productivity application that tracks user activity. One of her tasks is to implement a feature that allows users to compare their productivity on different days. Ruth decides to represent each day\'s activity as an array of non-negative integers. Each integer corresponds to the number of units of work done in a specific hour of the day. To compare productivity between two days, she needs to find the longest contiguous subarray where the productivity units match exactly between the two days. Given two arrays `A` and `B` of length `n`, write a function `longest_common_subarray(A, B)` that returns the length of the longest contiguous subarray that appears in both `A` and `B`. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 5000) — the number of hours in a day. - The second line contains `n` space-separated integers representing array `A` (0 ≤ A[i] ≤ 10^9). - The third line contains `n` space-separated integers representing array `B` (0 ≤ B[i] ≤ 10^9). # Output - Output a single integer — the length of the longest contiguous subarray that appears in both `A` and `B`. # Example Input ``` 5 1 2 3 2 1 3 2 1 2 3 ``` Output ``` 3 ``` Explanation The longest contiguous subarray that appears in both `A` and `B` is `[3, 2, 1]` which has a length of 3. # Note - You may assume that the input arrays are given in order and that the solution needs to be efficient given the constraints.","solution":"def longest_common_subarray(A, B): Finds the length of the longest contiguous subarray present in both A and B. n = len(A) dp = [[0] * (n + 1) for _ in range(n + 1)] max_length = 0 for i in range(n): for j in range(n): if A[i] == B[j]: dp[i + 1][j + 1] = dp[i][j] + 1 max_length = max(max_length, dp[i + 1][j + 1]) return max_length"},{"question":"You are given an integer array `arr` of size `n` (1 ≤ n ≤ 10^5) and an integer `k` (1 ≤ k ≤ 10^9). Your task is to determine the minimum length of a contiguous subarray of `arr` such that the sum of its elements is greater than or equal to `k`. If such a subarray does not exist, return -1. Example: Input: ``` 5 11 1 2 3 4 5 ``` Output: ``` 3 ``` Explanation: The subarray with minimum length that has a sum of at least 11 is `[3, 4, 5]` with length 3. Hence, the output is 3. Another Example: Input: ``` 3 7 1 2 3 ``` Output: ``` 3 ``` Explanation: The entire array is needed to achieve the sum of at least 7, so the output is 3. Note: - The input consists of two parts: the first line contains two integers, n and k. - The second line contains n integers which represent the array elements. Hints: - Consider using the sliding window technique to efficiently find the minimum subarray that meets the condition. - Iterate through the array elements, adjusting the window\'s start and end points to maintain the subarray sum and minimize the length.","solution":"def min_subarray_length(arr, k): Returns the minimum length of a contiguous subarray such that the sum of its elements is greater than or equal to k. If such a subarray does not exist, returns -1. n = len(arr) min_len = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= k: min_len = min(min_len, end - start + 1) current_sum -= arr[start] start += 1 if min_len == float(\'inf\'): return -1 return min_len"},{"question":"John just finished building a new social media platform that allows users to follow each other and post messages. However, he needs a way to help users quickly find posts from the people they follow. John has asked for your help to implement a system that allows users to retrieve all the messages from people they follow in chronological order. You are given the following information and operations: The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), where n is the number of users and q is the number of queries. Next n lines contain descriptors for each user. The i-th line contains the user id (integer between 1 and n) followed by a list of user ids that the user follows, separated by spaces. Each list may be empty. The next q lines describe queries, and each line is one of the following three types: 1. \\"post u t m\\" where u is the user id (1 ≤ u ≤ n), t is the timestamp (1 ≤ t ≤ 10^9), and m is the content of the message (a string consisting of alphanumeric characters and spaces). 2. \\"delete u t\\" where u is the user id (1 ≤ u ≤ n) and t is the timestamp of the message to be deleted. 3. \\"timeline u\\" where u is the user id (1 ≤ u ≤ n) for which you need to retrieve the timeline. For each \\"timeline\\" query, print all the messages from the users that the user u follows (including messages posted by user u) in chronological order sorted by the timestamp. If there are multiple messages with the same timestamp, order them by the order they were posted in the input. If there are no messages for the desired timeline, print an empty line. Your task is to implement the system which processes these queries efficiently.","solution":"class SocialMediaPlatform: def __init__(self, n, q, user_descriptors): self.n = n # number of users self.q = q # number of queries self.follows = {} # dictionary to store following relationships self.posts = {} # dictionary to store posts for descriptor in user_descriptors: parts = descriptor.split() user = int(parts[0]) followers = list(map(int, parts[1:])) self.follows[user] = followers self.posts[user] = [] def post_message(self, u, t, m): self.posts[u].append((t, m)) def delete_message(self, u, t): self.posts[u] = [post for post in self.posts[u] if post[0] != t] def get_timeline(self, u): timeline = [] users_to_collect = self.follows[u] + [u] for user in users_to_collect: timeline.extend(self.posts[user]) timeline.sort(key=lambda x: x[0]) return timeline def process_query(self, query): parts = query.split(maxsplit=2) action = parts[0] if action == \'post\': u, t, m = int(parts[1]), int(parts[2].split()[0]), parts[2].split(\' \', 1)[1] self.post_message(u, t, m) elif action == \'delete\': u, t = int(parts[1]), int(parts[2]) self.delete_message(u, t) elif action == \'timeline\': u = int(parts[1]) return self.get_timeline(u) return None"},{"question":"Mahmoud and Ehab are playing a game with a sequence of numbers. They have an array of n integers, a1, a2, ..., an, and they want to perform a certain operation on this array. An operation is defined as selecting any two distinct indices i and j (1 ≤ i, j ≤ n, i ≠ j), and performing their bitwise AND (a[i] & a[j]). The task is to determine the maximum possible value of the bitwise AND operation between any two distinct elements in the array. We define the bitwise AND (a[i] & a[j]) as the operation that takes two integers and performs the logical AND operation on each pair of corresponding bits. The result in each position is 1 if both corresponding bits are 1, and 0 otherwise. The first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^6) — the elements of the array. Output a single integer, which is the maximum possible value obtained from the bitwise AND operation between any two distinct elements in the array. Example: Input: 5 1 2 3 4 5 Output: 4 Explanation: The maximum AND value is obtained by performing the operation on elements 4 and 5, as 4 & 5 = 4.","solution":"def max_bitwise_and(arr): Returns the maximum possible value of the bitwise AND operation between any two distinct elements in the array. max_and = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): max_and = max(max_and, arr[i] & arr[j]) return max_and"},{"question":"Given a set of n points on a 2D plane, your goal is to find the smallest circle that can encompass all these points. A circle is defined by its center (a point on the plane) and its radius (a non-negative real number). The circle should be such that all the given points lie either on the circle or inside it. Your task is to compute the radius of this circle. The first line contains an integer n (1 leq n leq 50), the number of points. The next n lines each contain two integers x and y (-10^5 leq x, y leq 10^5), representing the coordinates of the points. Output the smallest radius of the circle that can encompass all the given points, with absolute or relative error no greater than 10^{-6}. # Example Input ``` 3 0 0 1 1 -1 -1 ``` Output ``` 1.414213 ``` # Note In the given example, the circle with center at (0, 0) and radius 1.414213 (which is √2) is the smallest circle that can encompass all the points (0,0), (1,1), and (-1,-1).","solution":"import math def smallest_encompassing_circle(points): Finds the radius of the smallest circle that can encompass all given points. :param points: List of tuples representing the coordinates of points (x, y) :return: Radius of the smallest encompassing circle if not points: return 0 centroid_x = sum(x for x, y in points) / len(points) centroid_y = sum(y for x, y in points) / len(points) max_dist_sq = 0 for x, y in points: dist_sq = (x - centroid_x) ** 2 + (y - centroid_y) ** 2 if dist_sq > max_dist_sq: max_dist_sq = dist_sq return math.sqrt(max_dist_sq) def parse_input(input_text): Parses the input text into a list of points. :param input_text: String containing the input data :return: A list of tuples representing the points lines = input_text.strip().split(\'n\') n = int(lines[0]) points = [] for i in range(1, n + 1): x, y = map(int, lines[i].split()) points.append((x, y)) return points"},{"question":"While exploring a newly discovered library, Nancy found an original set of ancient manuscripts written in a peculiar numeric form. These manuscripts contained arrays of positive integers, and each array had an interesting property: all elements in the array were unique prime numbers. Nancy desires to decode a particular pattern from these manuscripts. Specifically, she wants to find all subsets of these arrays whose product of elements is a prime number. Nancy needs your programming skills to help her determine the number of such subsets. # Input: The first line of input contains a single integer, `m` (1 ≤ m ≤ 20), representing the number of elements in the array. The second line contains `m` space-separated integers representing the elements of the array, which are guaranteed to be unique prime numbers under 100. # Output: Output a single integer representing the number of subsets whose product is also a prime number. # Example: Input: ``` 4 2 3 5 7 ``` Output: ``` 4 ``` Explanation: The subsets whose product of elements is a prime number are: - [2] - [3] - [5] - [7] Each subset contains a single prime number, making their product also a prime number. There\'s no subset with more than one element whose product is prime, so the answer is 4.","solution":"from itertools import combinations from sympy import isprime def count_prime_product_subsets(m, arr): Returns the count of subsets whose product of elements is a prime number. count = 0 for i in range(1, m + 1): for combo in combinations(arr, i): product = 1 for num in combo: product *= num if isprime(product): count += 1 return count"},{"question":"You are given an n x n grid where some cells are empty (represented by \'.\') and some cells contain obstacles (represented by \'#\'). Your task is to determine whether it\'s possible to cut this grid into exactly two non-empty parts using a single straight horizontal or vertical cut such that each part contains at least one empty cell. Input - The first line contains a single integer n (2 ≤ n ≤ 300). - Each of the next n lines contains a string of n characters representing the grid. Output - Print \\"YES\\" if it\'s possible to cut the grid into exactly two non-empty parts with the specified constraints. Otherwise, print \\"NO\\". Example Input: 4 .... .. .#.. .... Output: YES Explanation: One possible way to cut the grid is by making a horizontal cut after the first row. Each part contains empty cells.","solution":"def can_be_cut(n, grid): Determines if the n x n grid can be cut into exactly two non-empty parts with each part containing at least one empty cell using a single straight horizontal or vertical cut. # Check for horizontal cuts for row in range(1, n): top_part = \'\'.join(grid[:row]) bottom_part = \'\'.join(grid[row:]) if \'.\' in top_part and \'.\' in bottom_part: return \\"YES\\" # Check for vertical cuts for col in range(1, n): left_part = \'\'.join(grid[row][0:col] for row in range(n)) right_part = \'\'.join(grid[row][col:] for row in range(n)) if \'.\' in left_part and \'.\' in right_part: return \\"YES\\" return \\"NO\\""},{"question":"Given two strings s and t, you need to transform string s into string t using the following operation any number of times: pick any character in s and change it to any other character. The cost of each operation is 1. Your task is to find the minimum number of operations required to transform s into t. The first line of input contains an integer q (1 le q le 100) — the number of test cases. Each of the next q lines contains two strings, s and t, both of which consist of only lowercase English letters and have the same length (1 ≤ length of both strings ≤ 1000). Print q lines. For each pair of strings s and t, print the minimum number of operations required to transform s into t. # Example Input: ``` 3 abc xyz hello world abcd efgh ``` Output: ``` 3 4 4 ```","solution":"def min_operations_to_transform(q, cases): results = [] for s, t in cases: operations = sum(1 for a, b in zip(s, t) if a != b) results.append(operations) return results # Example usage: # q = 3 # cases = [(\\"abc\\", \\"xyz\\"), (\\"hello\\", \\"world\\"), (\\"abcd\\", \\"efgh\\")] # print(min_operations_to_transform(q, cases)) # Output: [3, 4, 4]"},{"question":"**Given an integer array `arr` of length `n`, determine if it is possible to make all elements equal by performing the following operation any number of times:** 1. Choose any two elements `arr[i]` and `arr[j]` (`1 <= i, j <= n` and `i != j`). 2. Increase the smaller value among `arr[i]` or `arr[j]` by half the absolute difference between `arr[i]` and `arr[j]`. Return `true` if it is possible to make all elements of the array equal, otherwise return `false`. # Input - The first line contains an integer `n` (`1 <= n <= 10^5`) - the number of elements in the array. - The second line contains `n` space-separated integers `arr[i]` (`1 <= arr[i] <= 10^9`) - the elements of the array. # Output - Print `true` if it is possible to make all elements of the array equal by the described operation, otherwise print `false`. # Examples Example 1 **Input:** ``` 3 2 4 8 ``` **Output:** ``` true ``` **Explanation:** ``` We can perform the operation to make the array [4, 4, 8] and then [6, 6, 8] and finally [7, 7, 7]. ``` Example 2 **Input:** ``` 3 1 2 4 ``` **Output:** ``` false ``` **Explanation:** ``` It is not possible to make all elements equal. ```","solution":"def can_make_equal(arr): Determines if it is possible to make all elements of the array equal by the specified operation. Parameters: arr (list): The list of integers. Returns: bool: True if it is possible to make all elements equal, False otherwise. arr = sorted(arr) diff = arr[-1] - arr[0] possible = diff == 0 or diff % 2 == 0 return possible"},{"question":"You are given an array of integers a = [a_0, a_1, dots, a_{n - 1}] (n ge 2). You can perform the following operation on the array: select any two adjacent elements a_i and a_{i+1} and replace both of them either with their sum or with their product. Formally, you can transform [a_i, a_{i+1}] into either [a_i + a_{i+1}, a_i + a_{i+1}] or [a_i cdot a_{i+1}, a_i cdot a_{i+1}]. You need to find the minimal possible maximum in the array that can be achieved by performing the above operation any number of times on any pairs of adjacent elements. The first line contains an integer t (1 le t le 10^3). Then t test cases follow. Each test case contains two lines. The first line contains an integer n (2 le n le 50) — length of the sequence a. The second line contains n integers a_0, a_1, dots, a_{n - 1} (1 le a_i le 100). Print t numbers — answers for each test case.","solution":"def find_min_max_operations(t, test_cases): This function determines the minimal possible maximum value of the array that can be achieved by performing the given operations on every test case. Parameters: t (int): Number of test cases. test_cases (list): List of tuples where each tuple consists of (n, array). Returns: list: List of minimal possible maximum values for each test case. results = [] for n, array in test_cases: max_value = max(array) results.append(max_value) return results # Example usage # t = 2 # test_cases = [(3, [1, 2, 3]), (4, [4, 1, 3, 2])] # print(find_min_max_operations(t, test_cases)) # Output: [3, 4]"},{"question":"You are working on a project to optimize network usage for a company. The company\'s network consists of n servers and m two-way communication links between the servers. Each link has a certain amount of data d that it can transfer per unit time. The company wants to maximize the flow of data from a source server s to a destination server t. Your task is to calculate the maximum potential data flow from s to t. The first line contains three integers n, m, and t (2 le n le 1000, 1 le m le 5000, 1 le t le n) — the number of servers, the number of communication links, and the number of servers that must act as potential destinations. The following m lines contain three integers u, v, and d (1 le u, v le n, u ne v, 1 le d le 1000) which indicate that there is a bidirectional communication link between server u and server v with a bandwidth of d data units per unit time. The last line contains two integers s and t (1 le s, t le n, s ne t) representing the source server and the destination server. Output one integer — the maximum data flow possible from the source server s to the destination server t.","solution":"from collections import deque, defaultdict def bfs(C, F, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in C[u]: if v not in visited and C[u][v] - F[u][v] > 0: queue.append(v) visited.add(v) parent[v] = u if v == sink: return True return False def edmonds_karp(C, source, sink): Using Edmonds-Karp algorithm to find the maximum flow n = len(C) F = defaultdict(lambda: defaultdict(int)) parent = {} max_flow = 0 while bfs(C, F, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, C[parent[s]][s] - F[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] F[u][v] += path_flow F[v][u] -= path_flow v = parent[v] max_flow += path_flow return max_flow def max_data_flow(n, m, links, s, t): C = defaultdict(lambda: defaultdict(int)) for u, v, d in links: C[u][v] += d C[v][u] += d return edmonds_karp(C, s, t)"},{"question":"Mishra loves coding and has just started learning about sorting algorithms. However, he finds the concept of inversion count in an array fascinating. An inversion in an array is a pair of elements (arr[i], arr[j]) such that arr[i] > arr[j] and i < j. Mishra wants to determine how \\"unsorted\\" the array is by finding the number of inversions in it. Given an array of integers, your task is to count the number of inversions in the array. The first line of the input contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers arr[i] (1 ≤ arr[i] ≤ 10^9). Output a single integer — the number of inversions in the array. **Example:** **Input:** 5 1 20 6 4 5 **Output:** 5 **Explanation:** In the provided example, the number of inversions are: - (20, 6), (20, 4), (20, 5), (6, 4), and (6, 5). Thus, the output is 5.","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the remaining elements in the left subarray # (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count # Function to use merge sort and count inversions def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def count_inversions(arr): n = len(arr) temp_arr = [0] * n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"The \\"NextGen Social Media\\" application has integrated a unique feature called \\"Happiness Value\\". Each user has a happiness value, represented as an integer stored in their profile. The happiness value for each user can fluctuate based on their activities on the platform. The platform has implemented a friendship system that allows users to connect with one another, represented as a bidirectional graph where each node is a user and each edge is a friendship. Your task is to develop a program that will determine the maximum possible total happiness value that can be achieved from any single connected group of users within the given friendship network. A connected group is defined as a set of users where there is a path between any two users within the set through their friendships. # Input The first line of the input contains two integers n and m (1 ≤ n ≤ 200,000, 0 ≤ m ≤ 200,000) — the number of users and the number of friendships, respectively. The second line contains n integers — the i-th integer represents the happiness value of the i-th user. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v) — indicating that there is a friendship between the users u and v. # Output Print a single integer — the maximum possible total happiness value of any single connected group within the friendship network. # Example Input ``` 6 5 1 2 -3 4 5 6 1 2 2 3 3 4 4 5 5 6 ``` Output ``` 15 ``` # Explanation In this example, the maximum possible total happiness value is obtained from the connected group consisting of users {4, 5, 6} with happiness values 4, 5, and 6 respectively, resulting in a total happiness value of 4 + 5 + 6 = 15.","solution":"def find_max_happiness(n, m, happiness, friendships): from collections import defaultdict, deque # Create adjacency list for the graph graph = defaultdict(list) for u, v in friendships: graph[u].append(v) graph[v].append(u) def bfs(node, visited): queue = deque([node]) visited[node] = True component_happiness = 0 while queue: current = queue.popleft() component_happiness += happiness[current - 1] for neighbor in graph[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_happiness max_happiness = float(\'-inf\') visited = [False] * (n + 1) for user in range(1, n + 1): if not visited[user]: component_happiness = bfs(user, visited) max_happiness = max(max_happiness, component_happiness) return max_happiness"},{"question":"You are given a collection of records, each record contains a start timestamp, end timestamp, and a unique identifier for a task. The start timestamp indicates when the task begins, the end timestamp indicates when the task completes, and the identifier uniquely identifies the task. Your task is to write a program that processes a series of events and determines the state of the task collection and identifies which tasks are currently running at any given moment. The program should be able to handle two types of operations: 1. `1 start end id` - Add a task with identifier `id`, start timestamp `start`, and end timestamp `end`. 2. `2 timestamp` - Determine which tasks are running at the given `timestamp` and output their identifiers in ascending order. A task is considered running at `timestamp` if `start <= timestamp < end`. # Input Format - The first line contains an integer `q` (1 le q le 10^5) - the number of operations to process. - The following `q` lines describe the operations. Each operation is given in one of the formats described above. - The `start` and `end` timestamps are integers (0 le start < end le 10^9). - The identifier `id` is an integer (1 le id le 10^9). - The `timestamp` is an integer (0 le timestamp le 10^9). # Output Format - For each query of type `2`, output the list of currently running task identifiers in ascending order. If no tasks are running at the specified timestamp, output an empty line. # Sample Input ``` 6 1 1 10 1 1 2 5 2 2 3 2 7 1 3 8 3 2 6 ``` # Sample Output ``` 1 2 1 1 3 ``` # Explanation 1. The first query adds a task with ID `1` that runs from time `1` to `10`. 2. The second query adds a task with ID `2` that runs from time `2` to `5`. 3. The third query checks the running tasks at time `3`. Both tasks `1` and `2` are running. 4. The fourth query checks the running tasks at time `7`. Only task `1` is running. 5. The fifth query adds a task with ID `3` that runs from time `3` to `8`. 6. The sixth query checks the running tasks at time `6`. Tasks `1` and `3` are running. Task `2` has already finished.","solution":"def process_events(queries): tasks = [] result = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": start, end, id_ = int(parts[1]), int(parts[2]), int(parts[3]) tasks.append((start, end, id_)) elif parts[0] == \\"2\\": timestamp = int(parts[1]) running_tasks = sorted(id_ for start, end, id_ in tasks if start <= timestamp < end) result.append(\\" \\".join(map(str, running_tasks))) return result"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: - Choose a substring that is a palindrome and remove it from the string. The remaining parts of the string are concatenated together. Your task is to determine the minimum number of operations needed to make the string empty. A string is called a palindrome if it reads the same backward as forward. For example, \\"level\\", \\"radar\\", and \\"noon\\" are palindromes. # Input Format The input contains a single string s (1 le |s| le 10^5) consisting of lowercase English letters. # Output Format Print a single integer — the minimum number of operations needed to make the string empty by removing palindromic substrings. # Example 1 **Input:** ``` ababa ``` **Output:** ``` 1 ``` **Explanation:** The whole string is a palindrome and removing it in one operation makes the string empty. # Example 2 **Input:** ``` abacabadabacaba ``` **Output:** ``` 1 ``` **Explanation:** The whole string is a palindrome and can be removed in one operation. # Example 3 **Input:** ``` abc ``` **Output:** ``` 3 ``` **Explanation:** Each character is a palindrome itself, so we need at least three operations. # Example 4 **Input:** ``` abacabad ``` **Output:** ``` 2 ``` **Explanation:** One possible way is to remove \\"abacaba\\" in the first operation and then remove \\"d\\" in the second operation. Another way is to first remove \\"aca\\" and then remove \\"abad\\". Both methods take two operations.","solution":"def min_operations_to_empty_string(s): Determines the minimum number of operations needed to make the string empty by removing palindromic substrings. # Check if the entire string is a palindrome if s == s[::-1]: return 1 # If not, the minimum number of operations needed is 2 else: return 2"},{"question":"Polycarp has completed his training and is now a formidable warrior in the game «Lizards and Basements». In his current mission, he must navigate a treacherous path filled with traps. The path is represented as a grid, where each cell can either be an empty cell or contain a trap. Polycarp starts at the top-left corner of the grid (cell (1, 1)) and needs to reach the bottom-right corner of the grid (cell (n, m)). He can move either to the right or down from his current cell. Polycarp wants to find out if there is any path from the top-left corner to the bottom-right corner that he can take without encountering any traps. Your task is to determine whether such a path exists. The input consists of: - The first line contains two integers n and m (2 ≤ n, m ≤ 10) — the number of rows and columns of the grid. - The following n lines contain m characters each, representing the grid. The character \'.\' indicates an empty cell, and the character \'*\' indicates a cell with a trap. Output \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner without any traps. Otherwise, output \\"NO\\". # Example Input ``` 3 3 . . * * . * . . . ``` Output ``` YES ``` Input ``` 2 2 . * * . ``` Output ``` NO ```","solution":"def is_path_possible(n, m, grid): Determines if there exists a path from the top-left to the bottom-right of the grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: List of strings representing the grid. :return: \\"YES\\" if a path exists, otherwise \\"NO\\". def dfs(x, y): if x == n - 1 and y == m - 1: # Reached bottom-right corner return True if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] == \'*\': return False grid[x][y] = \'*\' # mark as visited if dfs(x + 1, y) or dfs(x, y + 1): return True grid[x][y] = \'.\' # unmark if the path is not leading to success return False if grid[0][0] == \'*\' or grid[n-1][m-1] == \'*\': return \\"NO\\" return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given a string consisting of lowercase ASCII characters. Your task is to write a program that counts the number of vowels (a, e, i, o, u) in the given string. The input contains a single string s (1 ≤ |s| ≤ 1000), where |s| is the length of the string. Output the number of vowels in the given string.","solution":"def count_vowels(s): Returns the number of vowels (a, e, i, o, u) in the given string s. vowels = set(\'aeiou\') return sum(1 for char in s if char in vowels)"},{"question":"You are a software developer responsible for building a contact management system for a small organization. Each contact has a unique email address, and each user of the system can create, update, delete, and search for contacts. The contacts are stored in a list of dictionaries, where each dictionary has keys \'name\', \'email\', and \'phone\'. You need to implement three functionalities: 1. **Add Contact**: - Accepts a dictionary with keys \'name\', \'email\', \'phone\'. - Adds the given contact to the list if an email address is not already present in the list of contacts. - Returns `True` if the contact was added successfully, otherwise returns `False`. 2. **Delete Contact**: - Accepts a string representing the email of the contact to be deleted. - Removes the contact with the given email from the list of contacts. - Returns `True` if the contact was deleted successfully, otherwise returns `False`. 3. **Search Contact**: - Accepts a string representing the email of the contact to be searched. - Returns the contact dictionary if a contact with the given email exists, otherwise returns `None`. You need to implement a class `ContactManager` with the described functionalities. # Constraints: - The length of the contact list will not exceed 1000 contacts. - The contact details (\'name\', \'email\', \'phone\') are non-empty strings. - The length of the \'email\' and \'phone\' does not exceed 100 characters. - The length of the \'name\' does not exceed 50 characters. Below is the class and function signatures: ```python class ContactManager: def __init__(self): self.contacts = [] def add_contact(self, contact): :type contact: dict :rtype: bool pass def delete_contact(self, email): :type email: str :rtype: bool pass def search_contact(self, email): :type email: str :rtype: dict or None pass ``` # Example Usage: ```python cm = ContactManager() print(cm.add_contact({\'name\': \'Alice\', \'email\': \'alice@example.com\', \'phone\': \'1234567890\'})) # True print(cm.add_contact({\'name\': \'Bob\', \'email\': \'bob@example.com\', \'phone\': \'0987654321\'})) # True print(cm.add_contact({\'name\': \'Alice\', \'email\': \'alice@example.com\', \'phone\': \'1234567890\'})) # False print(cm.search_contact(\'alice@example.com\')) # {\'name\': \'Alice\', \'email\': \'alice@example.com\', \'phone\': \'1234567890\'} print(cm.delete_contact(\'alice@example.com\')) # True print(cm.search_contact(\'alice@example.com\')) # None print(cm.delete_contact(\'alice@example.com\')) # False ``` Implement the class `ContactManager` based on the provided signature and requirements.","solution":"class ContactManager: def __init__(self): self.contacts = [] def add_contact(self, contact): :type contact: dict :rtype: bool # Check if contact with same email already exists for c in self.contacts: if c[\'email\'] == contact[\'email\']: return False self.contacts.append(contact) return True def delete_contact(self, email): :type email: str :rtype: bool for c in self.contacts: if c[\'email\'] == email: self.contacts.remove(c) return True return False def search_contact(self, email): :type email: str :rtype: dict or None for c in self.contacts: if c[\'email\'] == email: return c return None"},{"question":"Alex is studying patterns in strings and needs to find the longest common subsequence (LCS) between two given strings. An LCS is the longest sequence that appears in both strings in the same order but not necessarily consecutively. Given two strings s1 and s2 of length n and m respectively (1 ≤ n, m ≤ 1000), return the length of their longest common subsequence. Input: - The first line contains the string s1 (1 ≤ |s1| ≤ 1000). - The second line contains the string s2 (1 ≤ |s2| ≤ 1000). Output: - A single integer representing the length of the longest common subsequence. Example: ``` Input: abcde ace Output: 3 ``` Explanation: - The longest common subsequence is \\"ace\\", which has a length of 3.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence (LCS) between strings s1 and s2. n = len(s1) m = len(s2) # Create a 2D array to store lengths of LCS dp = [[0] * (m + 1) for _ in range(n + 1)] # Build the dp array for i in range(1, n + 1): for j in range(1, m + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The length of LCS is in the bottom-right cell of the array return dp[n][m]"},{"question":"Mary is an event organizer and is preparing for the annual company picnic. There will be n games numbered from 1 to n, each with a different cost of participation. On the day of the event, each employee can play any of these games. Initially, the total cost is zero as no employee has signed up for any games. Mary will receive q requests throughout the event. Each request consists of a game number x and signifies that an employee wants to participate in or remove their participation from the game. After each request, Mary needs to calculate and print the total cost of participation for all employees currently signed up for games. The first line of the input contains two numbers n and q (1 ≤ n, q ≤ 2 × 10^5), the number of different games and the number of requests. The second line contains n space-separated integers, c1, c2, ..., cn (1 ≤ ci ≤ 5 × 10^5), where ci represents the cost of participating in the i-th game. The next q lines contain the queries. Each query consists of a single integer integer x (1 ≤ x ≤ n), the index of a game that an employee wants to join or leave. For each query, print the total cost after the query has been processed in one line.","solution":"def process_requests(n, q, costs, requests): Processes the participation requests and calculates the total cost after each request. Args: n : int : Number of different games. q : int : Number of participation requests. costs : List[int] : List of costs for participating in each game. requests : List[int] : List of requests where each request is a game number. Returns: List[int] : Total cost after each request is processed. total_cost = 0 participation = [False] * (n + 1) results = [] for request in requests: if participation[request]: total_cost -= costs[request - 1] else: total_cost += costs[request - 1] participation[request] = not participation[request] results.append(total_cost) return results"},{"question":"You are given a grid of size m times n representing a map where: - 0 represents water. - 1 represents land. - Each cell is a square with equal side length. - The grid is completely surrounded by water. - There is exactly one island (i.e., one or more connected land cells) in the grid. - The island doesn\'t have \\"lakes\\" meaning any water inside the island does not connect to the water outside the island. A cell is considered connected if it\'s adjacent to another cell (horizontally or vertically). You need to find the perimeter of the island. The first line contains an integer T (1 le T le 100) — the number of test cases. For each test case: - The first line contains two integers m and n (1 le m, n le 1000) — the dimensions of the grid. - The next m lines each contain n integers representing the grid (either 0 or 1). Print T integers — one per test case. For each test case, print the perimeter of the island. **Example:** **Input:** ``` 2 4 4 0 1 0 0 1 1 1 0 0 1 0 0 1 1 0 0 5 5 0 0 0 0 0 0 1 1 1 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 ``` **Output:** ``` 16 16 ```","solution":"def calculate_perimeter(m, n, grid): def is_water_or_outside(x, y): if x < 0 or x >= m or y < 0 or y >= n: return True return grid[x][y] == 0 perimeter = 0 for i in range(m): for j in range(n): if grid[i][j] == 1: if is_water_or_outside(i-1, j): # check up perimeter += 1 if is_water_or_outside(i+1, j): # check down perimeter += 1 if is_water_or_outside(i, j-1): # check left perimeter += 1 if is_water_or_outside(i, j+1): # check right perimeter += 1 return perimeter def island_perimeters(T, test_cases): results = [] for t in range(T): m, n = test_cases[t][0] grid = test_cases[t][1] results.append(calculate_perimeter(m, n, grid)) return results"},{"question":"You are an engineer working on a network of computers that need to communicate with each other. The network is represented as a graph where each computer is a node and the communication paths between them are edges with weights representing the time it takes to send a message between those computers. Your task is to design an algorithm that allows a specific computer to send a message to all other computers in the network in the shortest possible time. This problem is known as finding the minimum spanning tree of a graph. You are given a list of edges, where each edge is described by three integers u, v, and w representing a bidirectional communication path between computer u and computer v with communication time w. Write a function that takes in the number of computers n, and the list of edges, and returns the total communication time required to ensure that all computers receive the message. # Input Format - The first line contains two integers, n and m, the number of computers and the number of edges (1 ≤ n ≤ 100000, 0 ≤ m ≤ 200000). - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10000) representing an edge in the graph. # Output Format - Output a single integer, the total communication time of the minimum spanning tree. - If it\'s impossible to connect all computers, print \\"IMPOSSIBLE\\". # Sample Input 1 ``` 4 5 1 2 3 1 3 2 1 4 4 2 3 1 3 4 5 ``` # Sample Output 1 ``` 7 ``` # Sample Input 2 ``` 3 1 1 2 2 ``` # Sample Output 2 ``` IMPOSSIBLE ``` # Explanation In the first sample, the minimum spanning tree consists of edges (2-3), (1-3), and (1-2) with a total communication time of 3 + 2 + 1 = 6. Adding the edge (2-3) to get the total 7. In the second sample, it\'s not possible to connect all computers using the given edges, hence the output is \\"IMPOSSIBLE\\". # Constraints - You should implement an efficient algorithm that handles large inputs within a reasonable amount of time. - The result should be computed using algorithms such as Kruskal’s or Prim’s algorithm for finding the minimum spanning tree of a graph.","solution":"def find(parent, i): if parent[i] == i: return i parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def min_spanning_tree(n, edges): if not edges: return \\"IMPOSSIBLE\\" if n > 1 else 0 edges.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n mst_weight = 0 edge_count = 0 for u, v, w in edges: u -= 1 # Adjusting 1-based indexing to 0-based v -= 1 # Adjusting 1-based indexing to 0-based if find(parent, u) != find(parent, v): mst_weight += w union(parent, rank, u, v) edge_count += 1 if edge_count == n - 1: return mst_weight return \\"IMPOSSIBLE\\" # Test Cases # Sample Input 1 print(min_spanning_tree(4, [ (1, 2, 3), (1, 3, 2), (1, 4, 4), (2, 3, 1), (3, 4, 5) ])) # Expected Output: 7 # Sample Input 2 print(min_spanning_tree(3, [ (1, 2, 2) ])) # Expected Output: IMPOSSIBLE"},{"question":"You are tasked with organizing projects for a software development company. The company has n developers, each with a unique efficiency value ranging from 1 to n, where a higher value indicates a more efficient developer. The company wants to form teams such that each team consists of exactly two developers. Each developer i has a salary of s_i dollars. To maximize the company\'s budget, the goal is to form teams in such a way that the total salary expense is minimized while ensuring that every developer is assigned to exactly one team. The first line contains one integer n (2 le n le 10^5) — the number of developers. n is always even. The second line contains n integers s_1, s_2, ldots, s_n, where s_i is the salary of the developer with efficiency i. The salary values are in the range [1, 10^9]. Print one integer — the minimum total salary expense to form the teams. Example: Input: ``` 4 3 1 4 2 ``` Output: ``` 5 ``` Explanation: - In the example given, the developers have efficiency values 1, 2, 3, and 4 with corresponding salaries 3, 1, 4, and 2. - The optimal way to minimize the salary expense is to form the following teams: - Team 1: Developer with efficiency 2 (salary 1) and Developer with efficiency 4 (salary 2) - Team 2: Developer with efficiency 1 (salary 3) and Developer with efficiency 3 (salary 4) - Total salary expense = 1 + 2 + 3 + 4 = 10","solution":"def minimize_salary_expense(n, salaries): Function that minimizes the total salary expense by forming teams of two developers each. Arguments: n : int : number of developers (always even). salaries : list of int : list of salaries of developers. Returns: int : the minimum total salary expense. # Sort the salaries to pair the cheapest and the second cheapest, and so on salaries.sort() total_expense = 0 # Iterate to form pairs and compute the total expense for i in range(n // 2): total_expense += salaries[i] for i in range(n - 1, n // 2 - 1, -1): total_expense += salaries[i] return total_expense"}]'),A={name:"App",components:{PoemCard:Y},data(){return{searchQuery:"",visibleCount:4,poemsData:j,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},F={key:0,class:"empty-state"},R=["disabled"],P={key:0},z={key:1};function C(r,e,h,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",z,"Loading...")):(n(),i("span",P,"See more"))],8,R)):l("",!0)])}const D=d(A,[["render",C],["__scopeId","data-v-a7eca324"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/31.md","filePath":"deepseek/31.md"}'),L={name:"deepseek/31.md"},G=Object.assign(L,{setup(r){return(e,h)=>(n(),i("div",null,[x(D)]))}});export{M as __pageData,G as default};
