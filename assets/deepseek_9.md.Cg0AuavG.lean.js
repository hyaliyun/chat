import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-898802da"]]),S=JSON.parse('[{"question":"File Path String Manipulation You are given a string representing a file path. Your task is to implement a function `simplifyPath` that converts this path into a simplified canonical path. The rules for simplifying the path are as follows: 1. Any `.` represents the current directory and can be ignored. 2. Any `..` moves up one directory if possible, eliminating the previous part of the path. 3. Consecutive slashes (\\"/\\") are treated as a single slash. 4. The resulting simplified path should not end with a trailing slash unless it is the root directory (\\"/\\"). # Input - A non-empty string `path` representing a Unix-style file path. # Output - A string representing the simplified canonical path. # Examples Example 1: ```python path = \\"/home/\\" print(simplifyPath(path)) # Output: \\"/home\\" ``` - Explanation: \\"/home/\\" simplifies to \\"/home\\". Example 2: ```python path = \\"/a/./b/../../c/\\" print(simplifyPath(path)) # Output: \\"/c\\" ``` - Explanation: \\"/a/./b/../../c/\\" simplifies to \\"/c\\". Example 3: ```python path = \\"/../\\" print(simplifyPath(path)) # Output: \\"/\\" ``` - Explanation: \\"/../\\" simplifies to \\"/\\", since the root cannot go up any further. Example 4: ```python path = \\"/home//foo/\\" print(simplifyPath(path)) # Output: \\"/home/foo\\" ``` - Explanation: \\"/home//foo/\\" simplifies to \\"/home/foo\\". Task: Implement the `simplifyPath` function that simplifies the given `path` string based on the rules outlined above. Your solution should have linear time and space complexity. # Function Signature ```python def simplifyPath(path: str) -> str: pass ``` # Note: - Handle edge cases where the path may be empty, or contain only special characters like `.` and `..`. - Ensure the function works efficiently for very large paths with many directory levels.","solution":"def simplifyPath(path: str) -> str: Simplifies the given Unix-style file path and returns the canonical path. Args: path (str): The input Unix-style file path. Returns: str: The simplified canonical path. dirs = path.split(\'/\') stack = [] for part in dirs: if part == \'\' or part == \'.\': continue elif part == \'..\': if stack: stack.pop() else: stack.append(part) return \'/\' + \'/\'.join(stack)"},{"question":"You have been given an array A consisting of N positive integers. Your task is to find an integer X such that it minimizes the maximum difference between X and any element of the array. Specifically, you need to find the minimum possible value for max(|A[1]-X|, |A[2]-X|, ..., |A[N]-X|). ------ Input Format ------ The first line of the input contains an integer T denoting the number of test cases. Each of the next T lines contains: - An integer N denoting the size of the array. - N space-separated integers representing the elements of the array A. ------ Output Format ------ For each test case, output a single line containing the minimum possible value of the maximum difference. ------ Constraints ------ 1 ≤ N ≤ 100,000 1 ≤ A[i] ≤ 10^9 The sum of N over all the test cases will be less than or equal to 200,000 ------ Sample Input 1 ------ 2 5 1 5 9 12 15 3 4 6 7 ------ Sample Output 1 ------ 6 1 ------ Explanation 1 ------ Testcase 1: Consider the array [1, 5, 9, 12, 15]. The optimal choice for X is 9. The maximum difference between 9 and elements of the array is: max(|1-9|, |5-9|, |9-9|, |12-9|, |15-9|) = max(8, 4, 0, 3, 6) = 8. Thus, the minimum possible value of the maximum difference is 6. Testcase 2: Consider the array [4, 6, 7]. The optimal choice for X is 6. The maximum difference between 6 and elements of the array is: max(|4-6|, |6-6|, |7-6|) = max(2, 0, 1) = 2. Thus, the minimum possible value of the maximum difference is 1.","solution":"def minimize_maximum_difference(T, test_cases): Finds the integer X that minimizes the maximum difference between X and any element of the array. Args: - T: int, number of test cases - test_cases: list of tuples (N, arr), where N is the size of the array and arr is the list of integers Returns: - List of integers, each indicating the minimum possible value of the maximum difference for each test case results = [] for N, arr in test_cases: arr.sort() median_index = N // 2 if N % 2 == 0: # For even length arrays, choose the middle value for minimizing max difference best_X = (arr[median_index - 1] + arr[median_index]) // 2 else: best_X = arr[median_index] results.append(best_X) return results"},{"question":"Given a sequence of n positive integers, determine if the sequence can be transformed into a non-decreasing sequence by changing no more than one element. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the sequence. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the sequence itself. -----Output----- Print \\"YES\\" (without the quotes) if the sequence can be transformed into a non-decreasing sequence by changing no more than one element. Otherwise print \\"NO\\". -----Examples----- Input 4 4 2 3 4 Output YES Input 5 3 4 2 3 5 Output NO Input 3 5 4 3 Output NO","solution":"def can_be_non_decreasing(n, sequence): Determines if the sequence can be transformed into a non-decreasing sequence by changing no more than one element. Parameters: n (int): the number of elements in the sequence sequence (list of int): the sequence of integers Returns: str: \\"YES\\" if it can be transformed, otherwise \\"NO\\" modified = False for i in range(n - 1): if sequence[i] > sequence[i + 1]: if modified: return \\"NO\\" modified = True # Check if modifying current element or next element can resolve the issue if i == 0 or sequence[i - 1] <= sequence[i + 1]: sequence[i] = sequence[i + 1] # modify sequence[i] else: sequence[i + 1] = sequence[i] # otherwise modify sequence[i + 1] return \\"YES\\""},{"question":"You are given an array of integers heights representing the heights of columns in a histogram. Each column is of uniform width 1. You need to find the area of the largest rectangle that can be formed within the histogram. The rectangle must be formed by the consecutive columns of the histogram and be the largest area such that it covers all columns between any two column heights specified in the histogram. Return the area of the largest rectangle in the histogram. Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The largest rectangle can be formed with heights [5, 6], which has a total area of 5 * 2 = 10. Example 2: Input: heights = [2,4] Output: 4 Explanation: The largest rectangle can be formed with a single column of height 4. Example 3: Input: heights = [6,2,5,4,5,1,6] Output: 12 Explanation: The largest rectangle can be formed with heights [5,4,5], which has a total area of 4 * 3 = 12. Constraints: 1 <= heights.length <= 300 0 <= heights[i] <= 1000","solution":"def largestRectangleArea(heights): Returns the area of the largest rectangle that can be formed within the histogram. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Polycarp loves puzzles and has invited his friends over for a challenging game. They will be playing a series of escape rooms with increasing difficulty levels. Each escape room requires solving a series of puzzles before gaining access to the next. Polycarp has designed a unique scoring system for this game. Each puzzle solves in a varying number of steps. The steps to solve each puzzle are recorded in an array where each element represents the number of steps taken to solve a puzzle. Additionally, each escape room has a threshold number of steps such that if the total number of steps taken in one room exceeds the threshold, the team fails that room. Polycarp wants to calculate how many escape rooms the team successfully completes based on the recorded steps and thresholds. -----Input----- The first number t (1 le t le 100) — the number of test cases in the test. The following is a description of test cases. The first number of each test case is n (1 le n le 100) — the number of puzzles in a room. The second line contains n integers a_i (1 le a_i le 100), which represents the number of steps taken to solve each puzzle in the room. The third line contains a single integer k (1 le k le 10000) — the threshold number of steps for that room. Each test case describes one escape room. -----Output----- For each test case, output one integer — the number of escape rooms the team successfully completes. -----Examples----- Input 3 5 10 20 30 40 50 150 4 15 25 35 45 100 6 10 30 10 20 40 50 200 Output 1 0 1 -----Note----- In the first escape room, the total number of steps taken is 150 which matches the threshold, so the rooms is successfully completed. In the second escape room, the total number of steps taken is 120 which exceeds the threshold of 100, so the room is failed. In the third escape room, the total number of steps taken is 160 which is under the threshold of 200, so this room is successfully completed.","solution":"def count_successful_escape_rooms(test_cases): results = [] for test_case in test_cases: n, steps, threshold = test_case total_steps = sum(steps) if total_steps <= threshold: results.append(1) else: results.append(0) return results"},{"question":"There is a city with N trees planted along its border. Each tree is guarded by a scarecrow to protect it from birds. The scarecrow guarding a tree scares off birds from the tree it guards and from the two neighboring trees (one to the left and one to the right). Calculate the minimum number of scarecrows needed to guard all the trees in the city. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single line of input with an integer N, which denotes the number of trees. ------ Output Format ------ For each test case, output in a single line, the minimum number of scarecrows needed to guard all the trees. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 ----- Sample Input 1 ------ 3 5 8 1 ----- Sample Output 1 ------ 2 3 1 ----- Explanation 1 ------ Test case 1: We can place scarecrows at tree positions 1 and 4. This way, scarecrow at tree position 1 will guard tree positions 1, 2, and 3, and scarecrow at tree position 4 will guard tree positions 4 and 5. Therefore, all trees are guarded with 2 scarecrows. Test case 2: We can place scarecrows at tree positions 1, 4, and 7. This way, scarecrow at tree position 1 guards tree positions 1, 2, and 3; scarecrow at tree position 4 guards tree positions 4, 5, and 6; and scarecrow at tree position 7 guards tree positions 7 and 8. Thus, a total of 3 scarecrows are needed. Test case 3: With only one tree, one scarecrow is enough to guard the single tree.","solution":"def min_scarecrows_to_guard_trees(T, test_cases): This function calculates the number of scarecrows required to guard all the trees for each test case. Parameters: T (int): Number of test cases test_cases (list of int): List of values where each value denotes the number of trees. Returns: list of int: List where each element corresponds to the minimum number of scarecrows needed for each test case. results = [] for N in test_cases: # If there is only one tree, one scarecrow is enough if N == 1: results.append(1) continue # Minimum number of scarecrows required count = (N + 2) // 3 results.append(count) return results"},{"question":"Given a string containing only alphanumeric characters, you need to determine if it can be rearranged to form a palindrome. Rules for checking if a palindrome can be formed: - A string can be rearranged to form a palindrome if at most one character has an odd frequency. - A palindrome reads the same forward and backward, e.g., \\"racecar\\", \\"level\\". Input First line consists of t, the number of test cases. (1 ≤ t ≤ 50) For each test case, there is a single line that contains the input string S. (1 ≤ length of S ≤ 1000) Output For each test case, output \\"YES\\" if the string can be rearranged to form a palindrome, otherwise output \\"NO\\". SAMPLE INPUT 3 civic ivicc hello SAMPLE OUTPUT YES YES NO","solution":"def can_form_palindrome(s): Returns \\"YES\\" if the string can be rearranged to form a palindrome, otherwise returns \\"NO\\". from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def process_test_cases(t, test_cases): return [can_form_palindrome(tc) for tc in test_cases]"},{"question":"You are given a list of integers and you need to perform two types of operations on this list: 1) Add a value to all integers between indices A and B inclusive. This operation is represented by the command: 0 A B V where A and B are the start and end indices respectively, and V is the value to be added to each element between A and B. 2) Answer the sum of all integers between indices A and B inclusive. This operation is represented by the command: 1 A B Input: The first line contains two integers, N (the number of integers in the list) and Q (the number of queries to process). The following line contains N space-separated integers representing the initial values of the list. Each of the next Q lines will be either of form (1) or (2) as described above. Output: For each query of form (2), output a single line containing the required sum. Example Input: 5 4 1 2 3 4 5 0 1 3 10 1 0 4 0 2 4 5 1 1 3 Example Output: 32 42","solution":"def process_queries(n, q, initial_values, queries): Process the list of integers based on the given queries and output the results. Parameters: n (int): Number of elements in the list. q (int): Number of queries. initial_values (list of int): The initial values in the list. queries (list of list of int): The queries to process. Returns: list: Result of all sum queries. results = [] for query in queries: if query[0] == 0: # Add value to elements from index A to B inclusive _, A, B, V = query for i in range(A, B + 1): initial_values[i] += V elif query[0] == 1: # Sum elements from index A to B inclusive _, A, B = query results.append(sum(initial_values[A:B + 1])) return results"},{"question":"Write a function `translate_point()` which, given the coordinates of a point in 2D space, a fixed distance, and a direction specified as an angle in degrees, computes the new coordinates of the point after moving it by the given distance in the specified direction. The function should take three arguments: - `point` (a list or tuple of two floats: `[x, y]`): the original coordinates. - `distance` (a float): the distance to move the point. - `angle` (a float): the direction in which to move the point, specified as an angle in degrees from the positive x-axis. The function should return a list containing the new coordinates of the point after the translation, `[x_new, y_new]`, rounded to four decimal places. # Examples: ```python translate_point([1.0, 1.0], 5.0, 90) ------> [1.0, 6.0] translate_point([-2.0, -3.0], 7.0, 45) ------> [2.9497, 1.9497] translate_point([0.0, 0.0], 10.0, 180) ------> [-10.0, 0.0] ``` # Hints: 1. You can use the trigonometric functions `cos` and `sin` from the math module to find the new coordinates. 2. Remember to convert the angle from degrees to radians before using it in trigonometric functions.","solution":"import math def translate_point(point, distance, angle): Translates a point by a given distance in a specified direction. Args: - point: a list or tuple of two floats [x, y] representing original coordinates. - distance: a float, the distance to move the point. - angle: a float, the direction in degrees from the positive x-axis. Returns: - A list containing the new coordinates of the point [x_new, y_new], rounded to four decimal places. x, y = point angle_rad = math.radians(angle) x_new = x + distance * math.cos(angle_rad) y_new = y + distance * math.sin(angle_rad) return [round(x_new, 4), round(y_new, 4)]"},{"question":"Create a function called `remove_small_strings` that takes a list of strings `string_list` and an integer `n` as input and returns a new list containing only the strings from the original list that have a length greater than `n`. Examples are shown below: ``` remove_small_strings([\\"apple\\", \\"pear\\", \\"banana\\", \\"kiwi\\", \\"strawberry\\"], 5) = [\\"banana\\", \\"strawberry\\"] remove_small_strings([\\"hello\\", \\"world\\", \\"sun\\", \\"moon\\", \\"stars\\"], 3) = [\\"hello\\", \\"world\\", \\"moon\\", \\"stars\\"] remove_small_strings([\\"one\\", \\"three\\", \\"seven\\", \\"nine\\"], 4) = [\\"three\\", \\"seven\\"] remove_small_strings([\\"short\\", \\"tiny\\"], 5) = [] remove_small_strings([], 3) = [] ```","solution":"def remove_small_strings(string_list, n): Returns a new list containing only the strings from the original list that have a length greater than n. :param string_list: List of strings :param n: Integer, the length threshold :return: List of strings with length greater than n return [s for s in string_list if len(s) > n]"},{"question":"Given a string containing a mix of upper and lower case letters, write a function to determine whether the string can be rearranged to form a palindrome. A palindrome is a string that reads the same forward and backward. A string can be rearranged to form a palindrome if at most one character occurs an odd number of times and all other characters occur an even number of times. You may assume the input string contains only alphabetic characters (both uppercase and lowercase) and is non-empty. Examples: canFormPalindrome(\\"civic\\") -> True canFormPalindrome(\\"ivicc\\") -> True canFormPalindrome(\\"hello\\") -> False canFormPalindrome(\\"AaBb\\") -> True Note: - The function should be case insensitive, meaning \'A\' and \'a\' should be considered the same character. Write a function `canFormPalindrome(s: str) -> bool` to solve the problem.","solution":"from collections import Counter def canFormPalindrome(s: str) -> bool: Determines if the input string can be rearranged to form a palindrome. :param s: Input string containing a mix of upper and lower case letters. :return: True if the string can be rearranged to form a palindrome, False otherwise. # Normalize the string to lower case to handle case insensitivity s = s.lower() # Create a frequency count of each character in the string char_count = Counter(s) # Number of characters that have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd frequency return odd_count <= 1"},{"question":"Johnny loves playing with numbers. He recently learned about prime numbers and now he wants to explore how many prime numbers he can find in various ranges. A number is considered prime if it has no divisors other than 1 and itself. Given a list of ranges, Johnny wants to count the number of prime numbers within each range. ----- Input ----- The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two integers, L and R, representing the lower and upper bounds of the range (inclusive). ----- Output ----- For each test case, output a single line containing the number of prime numbers within the given range [L, R]. ----- Constraints ----- - 1 ≤ T ≤ 100 - 1 ≤ L ≤ R ≤ 105 ----- Example ----- Input: 2 1 10 11 20 Output: 4 4 ----- Explanation ----- Example case 1. The prime numbers between 1 and 10 are 2, 3, 5, and 7. Example case 2. The prime numbers between 11 and 20 are 11, 13, 17, and 19.","solution":"def sieve_of_eratosthenes(n): Creates a list of boolean values, where True denotes that the index is a prime number. Uses the Sieve of Eratosthenes algorithm. sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not prime numbers p = 2 while (p * p <= n): if sieve[p] == True: for i in range(p * p, n + 1, p): sieve[i] = False p += 1 return sieve def count_primes_in_ranges(T, ranges): For each range [L, R], count the prime numbers in that range. max_range = max(r for _, r in ranges) primes = sieve_of_eratosthenes(max_range) results = [] for L, R in ranges: count = sum(primes[L:R + 1]) results.append(count) return results"},{"question":"Given a list of integers, write a function `find_max_difference(nums)` that returns the maximum difference between any two elements such that the larger element comes after the smaller one. If no such pair exists, the function should return -1. **Input:** - A list of integers `nums` of length `n` (0 ≤ n ≤ 10^5). **Output:** - An integer representing the maximum difference between any two elements where the larger element comes after the smaller element. Return -1 if there is no such pair. **Example:** ```python Input: [7, 1, 5, 3, 6, 4] Output: 5 Input: [5, 4, 3, 2, 1] Output: -1 ``` **Explanation:** In the first example, the maximum difference is achieved by the elements `1` and `6`, which gives a difference of `6 - 1 = 5`. In the second example, since the array is in descending order, there is no pair where the larger element comes after the smaller one, thus the function returns -1.","solution":"def find_max_difference(nums): Returns the maximum difference between any two elements in the list such that the larger element comes after the smaller one. If no such pair exists, return -1. if len(nums) < 2: return -1 min_element = nums[0] max_difference = -1 for num in nums[1:]: if num > min_element: max_difference = max(max_difference, num - min_element) else: min_element = min(min_element, num) return max_difference"},{"question":"You are given an array B of M positive integers. You can perform the following operation any (possibly zero) number of times: Pick two indices i and j (1 ≤ i,j ≤ |B|) such that i neq j. Replace B_{i} and B_{j} with their difference |B_{i} - B_{j}|. Find the maximum possible value of the greatest element in the array after performing any number of operations. ------ Input Format ------ - The first line contains an integer K denoting the number of test cases. The K test cases then follow. - The first line of each test case contains an integer M - the size of the array. - The second line of each test case contains M space-separated integers B_{1}, B_{2}, dots, B_{M}. ------ Output Format ------ For each test case, output the maximum possible value of the greatest element in the array after performing any number of operations. ------ Constraints ------ 1 ≤ K ≤ 100 2 ≤ M ≤ 1000 1 ≤ B_{i} ≤ 10^{5} ------ Sample Input 1 ------ 2 4 10 20 30 40 3 5 10 15 ------ Sample Output 1 ------ 40 5 ------ Explanation 1 ------ - Test case 1: The maximum possible value of the greatest element that can be achieved by performing the given operations is 40. Some examples of the final array are: - [0, 0, 0, 40]: Subtract pairwise until one element becomes 40. Max value is 40. - [10, 20, 30, 40]: Perform no operation. Max value is 40. - Test case 2: The maximum possible value of the greatest element that can be achieved by performing the given operations is 5. Some examples of the final array are: - [0, 5, 5]: Subtract pairwise until one element becomes 5. Max value is 5. - [5, 10, 15]: Perform no operation initially. After performing the given operations, the remaining maximum possible element among 5, 10, 15 will be 5.","solution":"def max_possible_value(arr): Returns the maximum possible value of the greatest element in the array after performing any number of operations. if len(arr) == 0: return 0 return min(arr) def max_value_for_test_cases(test_cases): results = [] for test_case in test_cases: M, arr = test_case max_value = max_possible_value(arr) results.append(max_value) return results"},{"question":"You are given two strings: s1 and s2. Both strings contain only lowercase English letters. You can perform two types of operations on these strings: 1. Swap any two characters in s1. 2. Swap any two characters in s2. Write a function that determines if it\'s possible to make the two strings equal by performing any number of the allowed operations. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Input The input consists of two lines: - The first line contains the string s1 (1 ≤ |s1| ≤ 100). - The second line contains the string s2 (1 ≤ |s2| ≤ 100). Output Print \\"YES\\" if it\'s possible to make the two strings equal, otherwise print \\"NO\\". Examples Input abc bca Output YES Input aabbcc abcabc Output YES Input abcd abdc Output NO Explanation In the first example, swapping characters in s1 or s2 can make the strings equal. In the second example, s1 and s2 are anagrams, so it\'s possible to equalize both. In the third example, though it seems similar to the second example, swapping characters won\'t make them identical, as the character counts differ.","solution":"def can_make_equal(s1, s2): Determines if two strings can be made equal by swapping any two characters in each. Returns \\"YES\\" if possible, otherwise \\"NO\\". if sorted(s1) == sorted(s2): return \\"YES\\" else: return \\"NO\\""},{"question":"You are a computer science student working on string manipulations and pattern matching. Your task is to design a function that converts an infix expression (standard arithmetic notation) to the corresponding postfix expression (Reverse Polish Notation). Infix expressions are the common arithmetic notations we use every day, like \\"A + B\\". Postfix expressions, used by computers to calculate values efficiently without the need for parentheses, append operators after their operands, like \\"A B +\\". You need to follow the rules of precedence for the operators, which are, from highest to lowest: 1. Parentheses `(`, `)` 2. Exponentiation `^` 3. Multiplication `*` and division `/` 4. Addition `+` and subtraction `-` Additionally, all operators are left-associative, except the exponentiation operator `^`, which is right-associative. # Input: The input is a single-line string of an infix expression containing variables (represented by single uppercase letters), operators (`^`, `*`, `/`, `+`, `-`), and parentheses. The expression will not contain any spaces, and you can assume it is a valid infix expression. Example Input: ``` A+B*(C^D-E)^(F+G*H)-I ``` # Output: The output should be a single-line string of the corresponding postfix expression. Example Output: ``` ABCD^E-FGH*+^*+I- ``` Notes: 1. The precedence and associativity rules should be strictly followed. 2. Parentheses are only used to override precedence and should not appear in the postfix expression. # Example: ``` Input: (A+B)^C Output: AB+C^ ```","solution":"def infix_to_postfix(expression): Convert an infix expression to a postfix expression. precedence = {\'^\': 3, \'*\': 2, \'/\': 2, \'+\': 1, \'-\': 1} is_right_associative = {\'^\': True, \'+\': False, \'-\': False, \'*\': False, \'/\': False} def has_higher_precedence(op1, op2): if (op1 in precedence and op2 in precedence): if is_right_associative[op1]: return precedence[op1] > precedence[op2] else: return precedence[op1] >= precedence[op2] return False output = [] stack = [] for char in expression: if char.isalpha(): # Operand output.append(char) elif char == \'(\': # Left Parenthesis stack.append(char) elif char == \')\': # Right Parenthesis while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Remove \'(\' from stack else: # Operator while stack and has_higher_precedence(stack[-1], char): output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return \'\'.join(output)"},{"question":"Deepa is organizing books in her library. She has a list of books, each described by a unique integer ID. However, there are some duplicate entries of book IDs in the list, and she wants to identify and count them to find out how many unique books she has. Your task is to write a function that takes a list of integers representing book IDs and returns the count of unique book IDs in the list. -----Input----- The input consists of a single list of integers, each integer representing a book ID. The size of the list can be up to 10^5 and each book ID is a non-negative integer with a maximum value of 10^9. -----Output----- Return the number of unique book IDs in the list. -----Examples----- Sample Input: [4, 5, 2, 2, 8, 4, 7, 5] Sample Output: 5 Sample Input: [1, 1, 1, 1, 1, 1] Sample Output: 1","solution":"def count_unique_books(book_ids): Returns the count of unique book IDs in the list. Parameters: book_ids (list): List of integers representing book IDs. Returns: int: Count of unique book IDs. return len(set(book_ids))"},{"question":"Sarah is hosting a party and wants to prepare gift bags for her guests. Each gift bag should contain exactly N items, but she has a limited supply of items to choose from. She needs your help to determine whether it is possible to create exactly K gift bags with the available items while ensuring that each gift bag has exactly N items. Write a program that determines whether it is possible to distribute the items into K gift bags, each containing exactly N items. If it is possible, the program should output `YES`, otherwise, it should output `NO`. -----Note----- - The total number of items Sarah has is denoted by M. -----Constraints----- - N, K, and M are integers between 1 and 1000 (inclusive). -----Input----- Input is given from Standard Input in the following format: N K M -----Output----- Print `YES` if it is possible to create K gift bags each containing exactly N items, otherwise print `NO`. -----Sample Input----- 5 3 15 -----Sample Output----- YES In this case, Sarah can create 3 gift bags with 5 items each. -----Sample Input----- 4 5 20 -----Sample Output----- YES In this case, Sarah can create 5 gift bags with 4 items each.","solution":"def can_create_gift_bags(N, K, M): Determines if it\'s possible to create K gift bags with N items each from a total of M items. Parameters: N (int) : number of items per gift bag. K (int) : number of gift bags. M (int) : total number of items available. Returns: str : \\"YES\\" if it\'s possible, \\"NO\\" otherwise. if K * N <= M: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers and a target sum. Your task is to determine if there are two distinct elements in the array whose sum is equal to the target sum. If such a pair exists, return `True`, otherwise, return `False`. Assume the array can have both positive and negative numbers and is of length at most 10^6. For example: ``` find_pair([1, 2, 3, 9], 8) => False find_pair([1, 2, 4, 4], 8) => True find_pair([-1, 3, 2, 5], 1) => True find_pair([5, 7, 1, 2, 8, 4, 3], 10) => True ``` Note: - `[1, 2, 3, 9]`: No two numbers sum up to 8. - `[1, 2, 4, 4]`: The pair (4, 4) sums up to 8. - `[-1, 3, 2, 5]`: The pair (-1, 2) sums up to 1.","solution":"def find_pair(arr, target): Determines if there are two distinct elements in the array whose sum is equal to the target sum. seen = set() for number in arr: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"Using the given array of positive integers, determine the length of the longest subarray in which the absolute difference between the maximum and minimum values is less than or equal to a given limit. Input format: - The first input line contains an integer `n` representing the number of elements in the array. - The second input line contains `n` space-separated integers representing the elements of the array. - The third input line contains an integer `limit` specifying the allowed maximum absolute difference. Output format: - Print the length of the longest subarray satisfying the condition. Constraints: 1 ≤ n ≤ 1000 1 ≤ array elements ≤ 10^5 0 ≤ limit ≤ 10^5 SAMPLE INPUT 7 8 2 4 7 10 6 5 5 SAMPLE OUTPUT 4 Explanation: The longest subarray where the absolute difference between the maximum and minimum values is less than or equal to 5 is [2, 4, 7, 6], which has a length of 4.","solution":"def longest_subarray_with_limit(arr, limit): Determines the length of the longest subarray in which the absolute difference between the maximum and minimum values is less than or equal to the given limit. from collections import deque max_deque, min_deque = deque(), deque() left = 0 longest = 0 for right in range(len(arr)): while max_deque and arr[max_deque[-1]] <= arr[right]: max_deque.pop() while min_deque and arr[min_deque[-1]] >= arr[right]: min_deque.pop() max_deque.append(right) min_deque.append(right) while arr[max_deque[0]] - arr[min_deque[0]] > limit: left += 1 if max_deque[0] < left: max_deque.popleft() if min_deque[0] < left: min_deque.popleft() longest = max(longest, right - left + 1) return longest # Test cases def longest_subarray_with_limit_from_input(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) arr = list(map(int, input_lines[1].split())) limit = int(input_lines[2]) return longest_subarray_with_limit(arr, limit)"},{"question":"Points: 10 In a small town, there is a unique library system where books are categorized into different sections based on genres. Each section can contain multiple books, but each book belongs to only one section. The librarian wants to automate the process of finding out how many books are available in a specific section at any given time, to quickly respond to patron inquiries. As a software developer, you have been tasked with creating a program that helps the librarian determine the number of books in any given section. Input: The first line contains a single integer n, the number of sections in the library (1 ≤ n ≤ 100). The second line contains n integers, where the i-th integer represents the number of books in the i-th section. The third line contains an integer q, the number of queries (1 ≤ q ≤ 100). The next q lines each contain a single integer s (1 ≤ s ≤ n), representing a query for the number of books in the s-th section. Output: For each query, output the number of books in the queried section. Example: Input: 5 12 7 22 15 9 3 1 3 5 Output: 12 22 9","solution":"def number_of_books_in_sections(n, books, q, queries): Determines the number of books in the given sections based on the queries. :param n: Number of sections in the library :param books: List containing the number of books in each section :param q: Number of queries :param queries: List of queries where each query is a section number :return: List containing the number of books in the queried sections result = [] for query in queries: result.append(books[query - 1]) return result"},{"question":"You are given two strings, a source `S` and a target `T`, where both strings consist of lowercase English letters only. You need to transform the source string `S` into the target string `T` by performing a series of operations. In one operation, you are allowed to pick a subsequence of `S` and replicate it. The goal is to minimize the number of operations to achieve this transformation. For example, if `S = \\"abc\\"` and `T = \\"abcbc\\"`, you can: 1. Pick subsequence \\"abc\\" from `S` and replicate it to form \\"abc\\" in `T`. 2. Pick subsequence \\"bc\\" from `S` and replicate it to form \\"abcbc\\". Thus, the minimum number of operations required in this case is 2. Write a program that calculates the minimum number of operations required to transform `S` into `T`. Constraints: - 1 leq |S|, |T| leq 1000 - Both strings `S` and `T` consist of lowercase English letters. Input: The input is given from the standard input in the following format: S T Output: Output the minimum number of operations required to transform `S` into `T`. Examples: Input: abc abcbc Output: 2 Input: abc abcabc Output: 2 Input: xyz xyzxyzxyz Output: 3","solution":"def min_operations(S, T): Returns the minimum number of subsequence operations to transform S into T. m, n = len(S), len(T) index_in_T = 0 operations = 0 while index_in_T < n: index = 0 while index_in_T < n and index < m: if S[index] == T[index_in_T]: index_in_T += 1 index += 1 if index_in_T == 0: # If no progress is made in T return -1 # It\'s impossible to form T from S operations += 1 return operations"},{"question":"Alex is studying different ways of rearranging the letters of words. One day, he found a particular interest in palindromic permutations. A string is said to have a palindromic permutation if its letters can be rearranged to form a palindrome. A palindrome is a word that reads the same backwards as forwards, such as \\"racecar\\" or \\"level\\". Write a function that determines whether a given string can be rearranged to form a palindrome. You need to only consider case-sensitive alphabets (both uppercase and lowercase) and ignore other characters. Please note that the function should return \\"True\\" if the string can be rearranged to form a palindrome, and \\"False\\" otherwise. -----Constraints----- - The input string will have at most length 1000. - The input string can contain any UTF-8 characters, but the function should only consider case-sensitive alphabets. -----Input----- Input is given from Standard Input in the following format: A single string without quotation marks. -----Output----- Print \\"True\\" if the given string can be rearranged to form a palindrome and \\"False\\" otherwise. -----Sample Input----- Tact Coa -----Sample Output----- True The characters of \\"Tact Coa\\" can be rearranged to form \\"taco cat\\" which is a palindrome.","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): the input string Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False # Filter out non-alphabetic characters and convert to lowercase filtered_chars = [char.lower() for char in s if char.isalpha()] # Count the occurrences of each character char_count = {} for char in filtered_chars: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Count the number of characters that have an odd count odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # At most one character with an odd count is allowed return odd_count <= 1"},{"question":"Samantha has recently learned about string transformations and is fascinated by how substrings can be manipulated to form other strings. She presents you with the following problem: You are given a string s of length n consisting of lowercase English letters. You can perform the following operation any number of times: choose a pair of adjacent letters in the string and swap them. After performing any number of operations, determine the lexicographically smallest string you can obtain. A string a is lexicographically smaller than a string b if for the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. If no such position exists, then a must be shorter than b to be lexicographically smaller. -----Input----- The first line contains a single integer n (1 leq n leq 10^5), the length of the string s. The second line contains the string s which consists of lowercase English letters. -----Output----- Print the lexicographically smallest string that can be achieved after performing the allowed operations. -----Examples----- Input 5 dcba Output abcd Input 6 abcdef Output abcdef Input 7 zyxwvut Output tuvwxyz -----Note----- For the first sample, you can repeatedly swap adjacent letters to sort the string in ascending order: \\"dcba\\" -> \\"cdba\\" -> \\"cbda\\" -> \\"bacd\\" -> \\"abcd\\". For the second sample, the string is already in its lexicographically smallest form. For the third sample, the string \\"zyxwvut\\" can be rearranged by swapping adjacent letters to \\"tuvwxyz\\".","solution":"def lexicographically_smallest_string(n, s): Return the lexicographically smallest string by sorting the input string. :param n: Length of the string :param s: Input string consisting of lowercase English letters :return: Lexicographically smallest string return \'\'.join(sorted(s))"},{"question":"Chef loves experimenting with numbers. Hemant, knowing this, challenges Chef with a new problem involving pairs of integers. Given a list of integer pairs, Chef needs to find the summation of the greatest common divisors (GCD) for each pair. Since Chef is busy, can you help him out? -----Input:----- - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a pair of integers a and b. -----Output:----- For each test case, output the GCD of each pair on a new line. -----Constraints----- - 1 leq T leq 10^5 - 1 leq a, b leq 10^9 -----Sample Input:----- 3 14 21 35 10 100 25 -----Sample Output:----- 7 5 25","solution":"import math def gcd_of_pairs(test_cases): Returns the GCD for each pair of integers provided in the test cases. Parameters: test_cases (list): A list containing T tuples, each with a pair of integers (a, b). Returns: list: A list containing the GCD for each pair. results = [] for a, b in test_cases: results.append(math.gcd(a, b)) return results"},{"question":"Given an array of integers, let\'s say an array is k-diverse if the absolute difference between any two elements in the array is at most k. For example, the array [1, 4, 3] is 3-diverse but not 2-diverse because |4 - 1| = 3 which is less than or equal to 3, but greater than 2. Your task is to determine if the given array is k-diverse or not. -----Input----- The first line of the input contains a single integer t (1 ≤ t ≤ 1000) denoting the number of test cases. Each test case consists of two lines: - The first line contains two integers n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ 10^9). - The second line contains n integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9 for each valid i), representing the array elements. It is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5. -----Output----- For each test case, print \\"YES\\" if the array is k-diverse, and \\"NO\\" otherwise. You may print each letter in any case (for example, \\"YES\\", \\"Yes\\", \\"yes\\", \\"yEs\\" will all be recognized as positive answer). -----Examples----- Input 3 3 3 1 4 3 4 2 7 12 10 8 5 0 5 5 5 5 5 Output YES NO YES -----Note----- For the first test case: - The differences between elements are |4-1|, |3-1|, and |4-3|, all of which are less than or equal to 3. Hence the array is 3-diverse. For the second test case: - The difference between 12 and 10 is 2, which is not less than 2. Therefore, the array is not 2-diverse. For the third test case: - All elements are the same, so the difference between any two elements is 0, which is equal to 0. Hence, the array is 0-diverse.","solution":"def is_k_diverse(n, k, arr): Returns whether the array is k-diverse or not min_val = min(arr) max_val = max(arr) return max_val - min_val <= k def process_test_cases(t, test_cases): results = [] for tc in test_cases: n, k, arr = tc if is_k_diverse(n, k, arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Examinees are given an array of integers. They have to determine if there is a unique element in the array that occurs an odd number of times. -----Constraints----- - 1≦N≦100 - 1≦Ai≦1000, 1 ≦ i ≦ N -----Input----- The input is given from Standard Input in the following format: N A1 A2 A3 ... AN -----Output----- If there is a unique element that occurs an odd number of times in the array, print that element. Otherwise, print -1. -----Sample Input----- 5 1 2 2 1 3 -----Sample Output----- 3 In this case, 3 is the unique element that occurs an odd number of times (exactly once). Hence, the output is 3.","solution":"def find_unique_odd_occurrence(n, arr): from collections import Counter counts = Counter(arr) unique_odd_occurrences = [num for num, count in counts.items() if count % 2 == 1] if len(unique_odd_occurrences) == 1: return unique_odd_occurrences[0] else: return -1"},{"question":"You have been tasked with developing a program to analyze data from different sensors placed in various locations. Each sensor collects a string of measurements representing temperature, pressure, and humidity. The measurements follow a specific pattern where each reading is denoted by a single character followed by a digit. For example, a measurement string \\"T4P3H2\\" indicates temperature 4, pressure 3, and humidity 2. Write a program that identifies the sensor locations where the temperature reading exceeds a certain threshold value. Input: - The first line contains an integer n, the number of sensor locations (1 ≤ n ≤ 1000). - The second line contains the threshold value for temperature (0 ≤ threshold ≤ 9). - This is followed by n lines, each containing a string representing the measurements collected by each sensor. Output: - For each sensor location, output \\"alert\\" if the temperature reading exceeds the threshold, otherwise, output \\"ok\\". Input Format: ``` n threshold measurements_1 measurements_2 ... measurements_n ``` Output Format: ``` result_1 result_2 ... result_n ``` Sample Input: ``` 3 5 T6P2H7 T3P4H5 T9P9H9 ``` Sample Output: ``` alert ok alert ``` Explanation: - The first measurement string \\"T6P2H7\\" has a temperature of 6, which is greater than the threshold of 5, so the output is \\"alert\\". - The second measurement string \\"T3P4H5\\" has a temperature of 3, which does not exceed the threshold, so the output is \\"ok\\". - The third measurement string \\"T9P9H9\\" has a temperature of 9, which exceeds the threshold, so the output is \\"alert\\".","solution":"def analyze_sensors(n, threshold, measurements): results = [] for measurement in measurements: temp_index = measurement.find(\'T\') + 1 temp_value = int(measurement[temp_index]) if temp_value > threshold: results.append(\'alert\') else: results.append(\'ok\') return results"},{"question":"In a distant kingdom, the wise and benevolent king is faced with a great dilemma. His land is suffering from a terrible drought, and he needs to distribute water to all the towns in his kingdom efficiently to save his people. The kingdom is represented as an acyclic connected graph (a tree) with n towns and n-1 roads. Each road connects two different towns and has a certain capacity, which denotes the maximum amount of water that can be transported through that road. The king wishes to know the maximum water flow that can be sent from the capital town (town 1) to all other towns by selecting one single path for each town from the capital. Since the roads are undirected, water can flow in both directions. As an additional constraint, each road can be used for only one path at a time. Write a program to compute the maximum water flow the king can distribute to each town. Input The first input line contains an integer n (1 ≤ n ≤ 104) — the number of towns. Each of the next n-1 lines contains three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 109) describing a road between town u and town v with a capacity of c. No road is described more than once. Output Output n-1 lines — the maximum water flow that can be delivered to each town 2 to n from the capital. Examples Input 5 1 2 10 1 3 5 2 4 7 3 5 4 Output 10 5 7 4 Input 3 1 2 15 2 3 10 Output 15 10","solution":"def max_water_flow(n, roads): from collections import defaultdict, deque # Build the graph graph = defaultdict(list) for u, v, c in roads: graph[u].append((v, c)) graph[v].append((u, c)) # BFS to find the maximum capacity on the path from capital to every town max_flow = [0] * (n + 1) visited = [False] * (n + 1) visited[1] = True queue = deque([(1, float(\'inf\'))]) # (current_town, min_capacity_so_far) while queue: cur, min_capacity = queue.popleft() for neighbor, capacity in graph[cur]: if not visited[neighbor]: visited[neighbor] = True max_flow[neighbor] = min(min_capacity, capacity) queue.append((neighbor, max_flow[neighbor])) return max_flow[2:] # to only return results from town 2 to n # Example usage: # n = 5 # roads = [ # (1, 2, 10), # (1, 3, 5), # (2, 4, 7), # (3, 5, 4) # ] # print(max_water_flow(n, roads)) # Output: [10, 5, 7, 4]"},{"question":"You are managing a large database that stores user records. Each user has a unique user ID and a timestamp of their last activity. The database is updated whenever a user performs an action. You need to process a list of updates and determine the most recent timestamp for each user ID. Your task is to read the list of updates and output the current state of the database, showing the latest activity timestamp for each user. -----Input----- The input starts with an integer `n` (1 ≤ n ≤ 10^5) which indicates the number of updates. The following `n` lines each contain a user ID (an integer between 1 and 10^9) and a timestamp (a string in the format \\"YYYY-MM-DD HH:MM:SS\\"). The updates are provided in the order they occur, but they may not be sorted by user ID or timestamp. -----Output----- Output the current state of the database, showing the user ID and their most recent activity timestamp, sorted in ascending order of user ID. If a user appears multiple times in the updates, only their latest timestamp should be shown. -----Examples----- Input 5 123 2023-02-15 08:45:00 456 2023-02-15 09:00:00 123 2023-02-15 09:30:00 789 2023-02-15 10:00:00 456 2023-02-15 09:15:00 Output 123 2023-02-15 09:30:00 456 2023-02-15 09:15:00 789 2023-02-15 10:00:00 Input 4 1000 2021-12-31 23:59:59 999 2022-01-01 00:00:00 1000 2022-01-01 01:00:00 500 2022-01-01 02:00:00 Output 500 2022-01-01 02:00:00 999 2022-01-01 00:00:00 1000 2022-01-01 01:00:00","solution":"def process_updates(n, updates): Returns the current state of the database showing the user ID and their most recent activity timestamp. :param n: int: Number of updates :param updates: list of tuples: Each tuple contains a user ID (integer) and a timestamp (string) :return: list of tuples: Each tuple contains a user ID and their most recent activity timestamp # Initialize a dictionary to hold the latest timestamp for each user ID user_activity = {} for user_id, timestamp in updates: if user_id not in user_activity or user_activity[user_id] < timestamp: user_activity[user_id] = timestamp # Convert the dictionary to a sorted list of tuples sorted_activity = sorted(user_activity.items()) return sorted_activity # Example usage updates = [ (123, \\"2023-02-15 08:45:00\\"), (456, \\"2023-02-15 09:00:00\\"), (123, \\"2023-02-15 09:30:00\\"), (789, \\"2023-02-15 10:00:00\\"), (456, \\"2023-02-15 09:15:00\\") ] print(process_updates(5, updates))"},{"question":"Areeba is a software developer at a tech company, and her current assignment involves parsing a large log file. Each line in logs contains a timestamp, a user ID, and an event description. Areeba needs to extract information about user sessions. A session starts when a user logs in (\\"login\\") and ends when the user logs out (\\"logout\\"). Sometimes, the log entries might be out of order, so consecutive login events without a preceding logout event should be ignored for that user, and a logout event without a preceding login should be ignored as well. Areeba has constructed a simplified version of the task for you to practice. You need to identify all valid sessions for each user. If a user has multiple valid sessions, each session should be identified separately. The output should contain the user IDs followed by a list of session start and end timestamps. Input The first line contains a single integer n (1 ≤ n ≤ 105), denoting the number of logs. Each of the following n lines contains three space-separated strings: *timestamp* (a string in \\"YYYY-MM-DD HH:MM:SS\\" format, unique for all log entries), *user_id* (a string without spaces consisting of lowercase alphanumeric characters with length between 1 and 32, inclusive), *event* (either \\"login\\" or \\"logout\\"). Output For each user, print their user ID, followed by a list of tuples, each containing the start and end timestamps of their valid sessions in chronological order. If there are multiple users, the user ID in the output should be in lexicographical order. If no valid sessions exist for a user, do not include that user in the output. Examples Input 6 2021-08-01 12:00:00 user1 login 2021-08-01 12:30:00 user1 logout 2021-08-01 12:15:00 user2 login 2021-08-01 12:20:00 user2 login 2021-08-01 12:35:00 user2 logout 2021-08-01 13:00:00 user1 logout Output user1 [(\'2021-08-01 12:00:00\', \'2021-08-01 12:30:00\')] user2 [(\'2021-08-01 12:15:00\', \'2021-08-01 12:35:00\')] Input 5 2021-07-31 09:00:00 user1 login 2021-07-31 09:05:00 user1 logout 2021-07-31 09:15:00 user1 logout 2021-07-31 09:10:00 user1 login 2021-07-31 09:20:00 user1 login Output user1 [(\'2021-07-31 09:00:00\', \'2021-07-31 09:05:00\')]","solution":"def parse_logs(n, logs): Parses log entries to extract valid login sessions for each user. Parameters: n (int): Number of log entries. logs (list): List of log entries, where each entry is a string in the format \\"timestamp user_id event\\". Returns: dict: Dictionary where keys are user_ids and values are lists of tuples representing valid sessions with start and end timestamps. from collections import defaultdict import operator sessions = defaultdict(list) current_sessions = {} # Process each log entry for log in logs: parts = log.split() timestamp = f\\"{parts[0]} {parts[1]}\\" user_id = parts[2] event = parts[3] if event == \\"login\\": if user_id not in current_sessions: current_sessions[user_id] = timestamp elif event == \\"logout\\": if user_id in current_sessions: sessions[user_id].append((current_sessions[user_id], timestamp)) del current_sessions[user_id] # Sort users lexicographically sorted_users = dict(sorted(sessions.items(), key=operator.itemgetter(0))) return sorted_users"},{"question":"You are given a string containing a list of words separated by spaces. Each word consists of lowercase letters only and has a unique, non-zero length. Your task is to find and return the longest word in the list. If there are multiple words with the same maximum length, return the first one that appears in the string. For example, given the input string `\\"the quick brown fox jumped over the lazy dog\\"`, the function should return `\\"jumped\\"` as it is the longest word in the list. Your solution should be efficient in both time and space complexity.","solution":"def find_longest_word(sentence): Returns the longest word in the given sentence. If there are multiple words with the same maximum length, returns the first one that appears. :param sentence: A string containing a list of words separated by spaces. :return: The longest word in the sentence. words = sentence.split() longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"A popular online game involves players forming a huge circle and engaging in a unique elimination process. Each player is assigned a number from 1 to N. Starting from player 1, every Kth player is removed from the circle, and the game continues from the next player after the removed one. This elimination process goes on in a circular manner until only one player remains, who is declared the winner. Given the total number of players and the step rate (K), determine the position of the winner. Input: The first line of input contains an integer T, representing the number of test cases. Each of the next T lines contains two integers: N (the total number of players) and K (the step rate). Output: For each test case, output a line containing the position of the winning player. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000000 1 ≤ K ≤ 1000000 SAMPLE INPUT 3 5 2 7 3 10 4 SAMPLE OUTPUT 3 4 5","solution":"def josephus(n, k): Given the number of players n and the step rate k, this function returns the position of the winning player. if n == 1: return 1 else: return (josephus(n - 1, k) + k - 1) % n + 1 def solve(test_cases): Given a list of test cases, this function returns a list of results corresponding to the winner\'s position for each test case. results = [] for n, k in test_cases: results.append(josephus(n, k)) return results def parse_input(input_string): Parses the input string according to the format specified in the task. Returns a tuple (T, test_cases), where T is the number of test cases and test_cases is a list of tuples (N, K). lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:T+1]] return T, test_cases def format_output(results): Formats the output results into a single string with each result on a new line. return \'n\'.join(map(str, results))"},{"question":"You are managing an autonomous delivery robot, RoboDeliver, that needs to navigate through a city grid to deliver packages. The city is represented as an `n x n` grid where some cells contain obstacles and others are clear. RoboDeliver can move up, down, left, or right, but cannot move through obstacles. Starting from a specific cell, it needs to reach a target cell in the shortest possible time. The robot\'s moves are defined as follows: - It can move to any adjacent cell unless that cell contains an obstacle. - It takes exactly 1 second to move to an adjacent cell. Given an initial and a target position, your task is to determine the minimum time needed for RoboDeliver to get from the starting point to the target. If it is not possible to reach the target, return `-1`. -----Input----- The first line contains an integer `t` (1 leq t leq 10^4) — the number of test cases. Each test case contains: - An integer `n` (2 leq n leq 100) — the size of the grid. - An `n x n` grid, where each cell is either: - `0`, representing a clear cell. - `1`, representing an obstacle. - A pair of integers `sx` and `sy` (0 leq sx, sy < n) — the starting coordinates. - A pair of integers `tx` and `ty` (0 leq tx, ty < n) — the target coordinates. -----Output----- For each test case, output the minimum time needed for RoboDeliver to get from the starting point to the target cell. If it is not possible, return `-1`. -----Example----- Input 2 3 0 0 0 0 1 0 0 0 0 0 0 2 2 3 0 1 0 1 1 0 0 0 0 0 0 2 2 Output 4 -1 -----Explanation----- In the first test case: - RoboDeliver can move from (0, 0) → (0, 1) → (1, 1) → (1, 2) → (2, 2) in 4 seconds. In the second test case: - It is not possible for RoboDeliver to reach the cell (2, 2) due to obstacles blocking the path.","solution":"from collections import deque def min_time_to_target(n, grid, sx, sy, tx, ty): if grid[sx][sy] == 1 or grid[tx][ty] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * n for _ in range(n)] queue = deque([(sx, sy, 0)]) visited[sx][sy] = True while queue: x, y, dist = queue.popleft() if x == tx and y == ty: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny] and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) visited[nx][ny] = True return -1 def process_test_cases(t, test_cases): results = [] for i in range(t): n, grid, sx, sy, tx, ty = test_cases[i] results.append(min_time_to_target(n, grid, sx, sy, tx, ty)) return results"},{"question":"Write a function `shortest_loop_sum(array, target)` that finds the shortest contiguous subarray whose sum equals the given target. If no such subarray is found, the function should return an empty list. # Input: - `array`: A list of integers, both positive and negative. - `target`: An integer representing the target sum. # Output: - A list representing the shortest contiguous subarray whose sum equals the target. If there are multiple shortest subarrays with the same length, return the one that appears first. If no such subarray exists, return an empty list. # Example: ```python shortest_loop_sum([1, 2, 3, 4, -2, -1, 7, 5], 7) ``` Expected output: ```python [2, 3, 2] ``` # Constraints: - The length of the `array` will be between 1 and 10^5. - All integers in `array` will be between -10^4 and 10^4. - The `target` will be an integer between -10^9 and 10^9. # Notes: - The solution should be optimized to handle large arrays efficiently. - Consider edge cases, such as when the array is empty or when no subarray sums to the target.","solution":"def shortest_loop_sum(array, target): Finds the shortest contiguous subarray whose sum equals the given target. Parameters: array (list): A list of integers, both positive and negative. target (int): An integer representing the target sum. Returns: list: The shortest contiguous subarray whose sum equals the target. If no such subarray exists, returns an empty list. n = len(array) min_length = float(\'inf\') result = [] current_sum = 0 start_index = 0 hash_map = {0: -1} for end_index in range(n): current_sum += array[end_index] if (current_sum - target) in hash_map: start_index_candidate = hash_map[current_sum - target] + 1 subarray_length = end_index - start_index_candidate + 1 if subarray_length < min_length: min_length = subarray_length start_index = start_index_candidate result = array[start_index:end_index + 1] hash_map[current_sum] = end_index return result"},{"question":"Write a function that takes a non-empty array of non-negative integers and an integer k, and returns the k-th largest element in the array. The input array may contain duplicate values, and the elements within the array are not sorted. -----Input----- - An integer array `arr` of size n (1 ≤ n ≤ 1000), containing non-negative integers (0 ≤ arr[i] ≤ 10^5) - An integer `k` (1 ≤ k ≤ n), representing the position of the largest element to find -----Output----- - Return the k-th largest element in the array. -----Examples----- Input arr: [3, 2, 1, 5, 6, 4] k: 2 Output 5 Input arr: [3, 2, 3, 1, 2, 4, 5, 5, 6] k: 4 Output 4 Input arr: [1, 1, 1, 1, 1] k: 2 Output 1","solution":"def find_kth_largest(arr, k): Returns the k-th largest element in the array. arr.sort(reverse=True) return arr[k-1]"},{"question":"Write a function `find_leap_years` which takes two integers `start_year` and `end_year` as input and returns a list of all the leap years in that range (inclusive). A leap year is exactly divisible by 4, except for end-of-century years like 1900, which are not leap years unless divisible by 400.","solution":"def find_leap_years(start_year, end_year): Returns a list of all leap years between start_year and end_year (inclusive). A leap year is exactly divisible by 4, except for end-of-century years like 1900, which are not leap years unless divisible by 400. leap_years = [] for year in range(start_year, end_year + 1): if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): leap_years.append(year) return leap_years"},{"question":"James likes to play video games, where he often encounters different levels with varying degrees of difficulty. To become better at his favorite game, he decided to build his own levels through an incremental process. James will create n levels over a period of time following certain rules. Each level can either increase difficulty by a specified amount or multiply the current difficulty by a given factor. Initially, the difficulty of the level sequence starts at 1. In each of the n stages, James will either: - Add a specified amount x to the current difficulty (e.g., if the current difficulty is d, after adding x, it will become d + x). - Multiply the current difficulty by a factor f (e.g., if the current difficulty is d, after multiplying by f, it will become d * f). Given n stages, James wants to determine the final difficulty of each level after all stages have been applied sequentially. -----Input----- The first line contains the integer n (1 ≤ n ≤ 10^5) - the number of stages to build the levels. The next n lines describe each stage. Each stage starts with an integer type (1 or 2) indicating the type of operation to be performed: - Type 1: Adds x to the current difficulty. The line will contain two integers, type and x (1 ≤ x ≤ 10^4). - Type 2: Multiplies the current difficulty by f. The line will contain two integers, type and f (2 ≤ f ≤ 100). -----Output----- Print the final difficulty of the levels after performing all n stages. -----Examples----- Input 3 1 3 2 2 1 5 Output 11 Explanation: Initially, difficulty = 1 After stage 1 (type 1, x = 3): difficulty = 1 + 3 = 4 After stage 2 (type 2, f = 2): difficulty = 4 * 2 = 8 After stage 3 (type 1, x = 5): difficulty = 8 + 5 = 13","solution":"def calculate_final_difficulty(n, stages): difficulty = 1 for stage in stages: if stage[0] == 1: difficulty += stage[1] elif stage[0] == 2: difficulty *= stage[1] return difficulty"},{"question":"Beth is organizing a programming marathon, and she wants to form a team of participants. There are N participants, each with a unique skill level represented by a positive integer. The skill levels of the participants are given in a list. Beth wants to know the maximum sum of skills she can gather by picking participants such that no two selected participants have consecutive skill levels. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. T test cases follow. - The first line of each test case contains an integer N, denoting the number of participants. - The second line contains N space-separated integers, representing the skill levels of the participants. -----Output:----- - For each test case, print the maximum sum of skills that can be gathered by picking participants such that no two selected participants have consecutive skill levels. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 10^4 - 1 leq text{Skill level} leq 10^6 -----Sample Input:----- 2 5 3 2 5 10 7 4 3 2 7 10 -----Sample Output:----- 15 13 -----EXPLANATION:----- - For the first test case, the optimal way to pick participants is to select those with skill levels 3, 10, and 2, summing to 3 + 10 = 13 and 2 + 13 = 15. - For the second test case, the optimal way is to select participants with skill levels of 3 and 10, summing to 3 + 10 = 13.","solution":"def max_non_consecutive_sum(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] skills = test_cases[i][1] if n == 0: results.append(0) continue if n == 1: results.append(skills[0]) continue dp = [0] * n dp[0] = skills[0] dp[1] = max(skills[0], skills[1]) for j in range(2, n): dp[j] = max(dp[j-1], dp[j-2] + skills[j]) results.append(dp[-1]) return results"},{"question":"Write a function that takes an integer `n` as input and returns the `n`-th term of the Fibonacci sequence. The Fibonacci sequence is defined as follows: the first two terms are 0 and 1, and each subsequent term is the sum of the previous two terms. Example: Input: 7 Output: 13 Note: The function should handle large values of `n` efficiently.","solution":"def fibonacci(n): Returns the n-th term of the Fibonacci sequence. The sequence starts with 0, 1, and each subsequent term is the sum of the previous two terms. if n == 0: return 0 elif n == 1: return 1 # Use two variables to store the last two Fibonacci numbers a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"Alice loves combining small integers into larger numbers. She has an unlimited supply of three types of integers: 1, 2, and 5. Alice wants to know the minimum number of these integers required to sum up to a given target number `n`. Your task is to write a function that computes this minimum number of integers required to reach the exact sum of `n`. If it is not possible to achieve this exact sum, your function should return -1. -----Input----- The input consists of a single integer `n` (1 le n le 10^9). -----Output----- Print a single integer denoting the minimum number of 1s, 2s, and 5s required to sum up to `n`. If it is not possible to form `n`, return -1. -----Examples----- Input 7 Output 2 Input 11 Output 3 Input 3 Output 1 -----Note----- In the first example, the optimal solution is to use one 5 and one 2 to sum up to 7 (1 integer of 5 and 1 integer of 2). In the second example, the optimal solution is to use two 5s and one 1 to sum up to 11 (2 integers of 5 and 1 integer of 1). In the third example, the optimal solution is to use one 2 and one 1 to sum up to 3 (1 integer of 2 and 1 integer of 1).","solution":"def min_integers_to_sum(n): Returns the minimum number of 1s, 2s, and 5s required to sum up to `n`. If it is not possible to form `n`, return -1. if n % 5 == 0: return n // 5 min_count = float(\'inf\') for fives in range(n // 5 + 1): remaining = n - 5 * fives if remaining % 2 == 0: twos = remaining // 2 min_count = min(min_count, fives + twos) for fives in range(n // 5 + 1): for twos in range((n - 5 * fives) // 2 + 1): remaining = n - 5 * fives - 2 * twos ones = remaining min_count = min(min_count, fives + twos + ones) return min_count if min_count != float(\'inf\') else -1"},{"question":"Two friends, Alice and Bob, are playing a game with an array of N integers. They take turns to pick elements from the array, starting from the leftmost or the rightmost end. Alice always goes first. Each player tries to maximize the sum of their picked elements. Both players play optimally. Determine the maximum sum Alice can achieve by the end of the game. Input: The first line of input contains one integer N - the number of elements in array A. The second line contains N space separated integers - elements of array A. Output: Print one integer - the maximum sum Alice can achieve. Constraints: 1 ≤ N ≤ 100 1 ≤ Ai ≤ 1000 SAMPLE INPUT 4 4 7 2 9 SAMPLE OUTPUT 14 Explanation Alice can start by picking the leftmost element 4 or the rightmost element 9. To maximize her sum, she would choose 9. After Alice picks 9, the array becomes {4, 7, 2} and it\'s now Bob\'s turn. Bob, aiming to minimize Alice\'s gain, will pick the leftmost element 4 (because if he picks 2, Alice will then choose 7). After Bob picks 4, the array becomes {7, 2} and it\'s now Alice\'s turn again. Alice will then pick 7, maximizing her total to 16 (9 + 7). Bob will be left to pick the final element 2. Therefore, the maximum sum Alice can achieve is 16.","solution":"def max_sum_alice_can_achieve(N, A): # Dynamic programming approach to solve the game def dp(i, j): if i > j: return 0 if memo[i][j] is not None: return memo[i][j] # Alice picks the element from the left end pick_left = A[i] + min(dp(i + 2, j), dp(i + 1, j - 1)) # Alice picks the element from the right end pick_right = A[j] + min(dp(i + 1, j - 1), dp(i, j - 2)) memo[i][j] = max(pick_left, pick_right) return memo[i][j] memo = [[None] * N for _ in range(N)] return dp(0, N - 1) # Example usage N = 4 A = [4, 7, 2, 9] print(max_sum_alice_can_achieve(N, A)) # Should output 16"},{"question":"Given an unsorted array of integers, find the length of the longest subsequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order. Constraints * The length of the input array does not exceed 10^5. * The input array can contain both positive and negative integers. Input The input is given in the following format. n a_1 ; a_2 ; ldots ; a_n Output Print a single integer, the length of the longest consecutive elements sequence. Example Input 7 100 4 200 1 3 2 20 Output 4","solution":"def longest_consecutive_sequence(nums): Given an unsorted array of integers, find the length of the longest subsequence such that elements in the subsequence are consecutive integers, regardless of the order. if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only attempt to build sequences from the start of the sequence if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given a list of integers representing a collection of books and the number of pages in each book. Your task is to determine whether it is possible to allocate all books to M students such that each student gets at least one book and the maximum number of pages assigned to a student is minimized. ------- Input ------- The first line contains an integer T, the number of test cases. Each test case starts with two integers N and M, the number of books and the number of students respectively. The second line contains N space-separated integers representing the number of pages in each book. ------- Output ------- For each test case, print the minimum possible maximum number of pages a student has to read if we allocate the books optimally. ------- Constraints ------- 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ M ≤ 1000 1 ≤ pages in each book ≤ 1000 -------- Sample Input 1 -------- 2 4 2 12 34 67 90 5 3 10 20 30 40 50 -------- Sample Output 1 -------- 113 60 ------ Explanation 1 ------ Case 1: Allocation can be done as [12, 34, 67] and [90] so that each student reads 113 pages and 90 pages respectively. The maximum pages read by a student is 113 which is the minimum possible in this case. Case 2: Allocation can be done as [10, 20], [30], [40, 50] so that each student reads 30 pages, 30 pages, and 90 pages respectively. The maximum pages read by a student is 90 which is not optimal. An optimal way is to allocate as [10, 20, 30], [40], [50] resulting in each student reading 60 pages and 50 pages respectively. The maximum pages read by a student is 60 which is the minimum possible in this case.","solution":"def is_possible(books, n, m, curr_min): students_required = 1 curr_sum = 0 for i in range(n): if books[i] > curr_min: return False if curr_sum + books[i] > curr_min: students_required += 1 curr_sum = books[i] if students_required > m: return False else: curr_sum += books[i] return True def find_minimum_pages(books, n, m): if n < m: return -1 total_pages = sum(books) max_pages = max(books) start, end = max_pages, total_pages result = total_pages while start <= end: mid = (start + end) // 2 if is_possible(books, n, m, mid): result = mid end = mid - 1 else: start = mid + 1 return result def distribute_books(test_cases): results = [] for test_case in test_cases: (n, m), books = test_case result = find_minimum_pages(books, n, m) results.append(result) return results"},{"question":"You are given a rectangular grid of cells with R rows and C columns. Each cell in the grid can either contain a \'*\' (representing an obstacle) or a \'.\' (an empty space). A robot starts at the top-left corner of the grid (cell (1, 1)) and wants to reach the bottom-right corner (cell (R, C)). The robot can move one cell up, down, left, or right, but it is not allowed to move into cells containing obstacles. Determine the minimum number of moves the robot needs to reach the bottom-right corner, or determine that it is impossible. Input The first line of input contains two integers R and C (1 ≤ R, C ≤ 1000) — the number of rows and columns in the grid. Each of the next R lines contains a string of length C containing only characters \'.\' or \'*\' — the description of the grid. The character at the (i, j)-th position of the string represents the cell at the i-th row and the j-th column of the grid. Output Print a single integer representing the minimum number of moves the robot needs to reach the bottom-right corner. If it is impossible to reach the bottom-right corner, print -1. Example Input 5 5 ..... .*... .*.*. ....* ..... 5 5 *.... ..... .*... ..*.. ..... Output 8 -1 Note In the first example, the robot can take the following path: - Right, Right, Down, Down, Left, Down, Right, Right In the second example, there is no possible path for the robot to reach the bottom-right corner.","solution":"from collections import deque def min_moves_to_reach_end(R, C, grid): Calculate the minimum number of moves the robot needs to reach the bottom-right corner or determine that it is impossible. Parameters: R (int): number of rows C (int): number of columns grid (list of str): the grid representation containing \'.\' and \'*\' Returns: int: minimum number of moves, or -1 if impossible # Directions for moving in 4 possible ways: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize the start and end positions start = (0, 0) end = (R-1, C-1) # Early exit if start or end is an obstacle if grid[0][0] == \'*\' or grid[R-1][C-1] == \'*\': return -1 # Initialize the queue with the starting position and the visited set queue = deque([(start, 0)]) visited = set([start]) while queue: (current_r, current_c), moves = queue.popleft() if (current_r, current_c) == end: return moves # Explore all possible directions for dr, dc in directions: new_r, new_c = current_r + dr, current_c + dc if 0 <= new_r < R and 0 <= new_c < C and grid[new_r][new_c] == \'.\' and (new_r, new_c) not in visited: queue.append(((new_r, new_c), moves + 1)) visited.add((new_r, new_c)) return -1"},{"question":"You are given a square grid of size n×n. Each cell of the grid contains a positive integer value. You can move from one cell to another if they share a common edge (left, right, top, or bottom). Your task is to start from the top-left cell of the grid and move to the bottom-right cell in such a way that the sum of the values of the cells you visit is minimized. Input The first line contains one integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of one integer n (2 ≤ n ≤ 100) — the size of the grid. The next n lines contain n integers each, where the j-th integer in the i-th line represents the value in the cell (i, j) (1 ≤ value ≤ 1000). Output For each test case, print one integer — the minimum sum of the values of the cells you visit while moving from the top-left corner to the bottom-right corner of the grid. Example Input 1 3 1 3 1 1 5 1 4 2 1 Output 7 Note Explanations for the test case of the example: 1. You can move in the path as follows: (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3). The sum of the values of the cells you visit is 1 + 3 + 1 + 1 + 1 = 7.","solution":"def minimum_path_sum(grid): n = len(grid) dp = [[float(\'inf\')] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(n): if i > 0: # check and update from cell above dp[i][j] = min(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: # check and update from cell to the left dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[n-1][n-1] def solve(test_cases): results = [] for grid in test_cases: results.append(minimum_path_sum(grid)) return results"},{"question":"In a faraway land, there is a unique vending machine operated by a series of buttons. Each button is associated with a specific integer value. When a button is pressed, the machine dispenses a snack, and the value associated with the button is added to a cumulative total. A curious customer wants to determine the possible totals they can achieve by pressing combinations of the machine\'s buttons. Write a program to find the smallest total T, such that you cannot achieve the total T by any combination of button presses. -----Input----- The first line contains an integer n (1 ≤ n ≤ 5) — the number of buttons on the vending machine. The second line contains n integers b_i (1 ≤ b_i ≤ 100) — the value associated with each button. -----Output----- Print a single integer — the smallest total T that cannot be obtained by pressing any combination of the machine\'s buttons. -----Examples----- Input 3 1 2 3 Output 7 Input 2 10 12 Output 1 -----Note----- In the first example, the possible totals are every integer from 1 to 6 by using different combinations of the buttons, but 7 cannot be formed. In the second example, since the smallest button value is 10, it is impossible to form any total less than 10. Therefore, the smallest total that cannot be formed is 1.","solution":"def smallest_impossible_total(n, button_values): possible_totals = {0} for value in button_values: new_totals = set() for total in possible_totals: new_totals.add(total + value) possible_totals.update(new_totals) T = 1 while T in possible_totals: T += 1 return T"},{"question":"You have a rectangular chocolate bar divided into n×m pieces. Little Johnny has a peculiar way of eating chocolate: he will always start at the top-left piece, and can only move from one piece to another if they share an edge. He will always finish at the bottom-right piece. You are given that some pieces of the chocolate bar are bitter and Johnny avoids bitter pieces. Determine whether there exists a path from the top-left piece to the bottom-right piece such that Johnny only traverses through non-bitter pieces. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the chocolate bar. The next n lines contain m characters each, representing the chocolate bar. Each character is either \'S\' if the piece is sweet or \'B\' if it is bitter. -----Output----- Print \\"YES\\" if there exists a valid path from the top-left to the bottom-right. Otherwise, print \\"NO\\". -----Examples----- Input 3 3 SSS SBS SSS Output YES Input 3 3 SSS BBB SSS Output NO -----Note----- In the first example, one valid path could be: move right, move right, move down, move down, move left. In the second example, there is no valid path since the second row blocks any potential path from reaching the bottom row.","solution":"def is_path_possible(n, m, chocolate): Determine if there exists a path from the top-left piece to the bottom-right piece that only traverses through sweet pieces (\'S\') and avoids bitter pieces (\'B\'). Parameters: n (int): Number of rows. m (int): Number of columns. chocolate (List[str]): The n x m grid representing the chocolate bar. Returns: str: \\"YES\\" if a valid path exists, \\"NO\\" otherwise. from collections import deque if chocolate[0][0] == \'B\' or chocolate[n-1][m-1] == \'B\': return \\"NO\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and chocolate[nx][ny] == \'S\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a binary tree having N nodes where each node has a unique value from 1 to N. Each node either has 0, 1, or 2 children. You need to find the diameter of the given binary tree. The diameter of a binary tree is defined as the length of the longest path between any two nodes in the tree. The path may pass through the root. Constraints * 2 ≦ N ≦ 10^5 * Each node in the tree has a unique value 1 through N. * The input tree is a valid binary tree. Input The input is given from Standard Input in the following format: ``` N value_1 left_child_1 right_child_1 value_2 left_child_2 right_child_2 : value_N left_child_N right_child_N ``` In the input, `left_child_i` and `right_child_i` are the values of the left and right children of the node with value `i`. If a node does not have a left or right child, the corresponding child value will be `-1`. Output Print the diameter of the given binary tree. Examples Input ``` 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 ``` Output ``` 4 ``` Input ``` 5 1 2 3 2 4 5 3 -1 -1 4 -1 -1 5 -1 -1 ``` Output ``` 3 ```","solution":"import sys sys.setrecursionlimit(200000) class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(nodes): if not nodes: return None tree_nodes = {i: TreeNode(i) for i in range(1, len(nodes) + 1)} for i in range(len(nodes)): value, left, right = nodes[i] if left != -1: tree_nodes[value].left = tree_nodes[left] if right != -1: tree_nodes[value].right = tree_nodes[right] return tree_nodes[1] def diameter_of_binary_tree(root): def longest_path(node): if not node: return (0, 0) left_length, left_diameter = longest_path(node.left) right_length, right_diameter = longest_path(node.right) max_diameter = max(left_diameter, right_diameter, left_length + right_length) return (max(left_length, right_length) + 1, max_diameter) return longest_path(root)[1] def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') n = int(data[0]) nodes = [] for i in range(1, n + 1): x, l, r = map(int, data[i].split()) nodes.append((x, l, r)) root = build_tree(nodes) print(diameter_of_binary_tree(root)) if __name__ == \\"__main__\\": main()"},{"question":"Write a function `prime_rearrangement()` (JS: `primeRearrangement`) that takes an integer array as input and returns a new array where all the prime numbers are at the beginning and the rest of the numbers follow in the same order they appeared in the original array. Maintain the order of the prime numbers as they were in the input list. For Example: ```python prime_rearrangement([11, 4, 7, 10, 2, 9]) #should return [11, 7, 2, 4, 10, 9] ``` Explanation: The prime numbers in the array are 11, 7, and 2. The non-prime numbers are 4, 10, and 9. The primes are moved to the front maintaining their relative order, followed by the non-primes maintaining their original order. NOTE: - In Python, you can use a helper function to check if a number is prime. - For an empty array, the result should be an empty array. - Assume the input will only contain positive integers greater than 1.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def prime_rearrangement(arr): primes = [x for x in arr if is_prime(x)] non_primes = [x for x in arr if not is_prime(x)] return primes + non_primes"},{"question":"You are given a list of n integers, and your task is to reverse the elements of the list. Write a program to reverse the list and print the reversed list. -----Input----- The first line contains an integer n, the number of elements in the list. The second line contains n space-separated integers representing the elements of the list. -----Output----- Print a single line containing the n space-separated integers representing the reversed list. -----Constraints----- - 1 ≤ n ≤ 1000 - -1000 ≤ Each integer in the list ≤ 1000 -----Example----- Input 5 1 2 3 4 5 Output 5 4 3 2 1 Input 4 -1 0 2 -3 Output -3 2 0 -1","solution":"def reverse_list(n, elements): Reverses the given list of n elements. :param n: Integer, number of elements in the list. :param elements: List of integers to be reversed. :return: List of integers in reversed order. return elements[::-1]"},{"question":"Given a linked list, the task is to reverse the linked list in groups of given size k. Example 1: Input: 1->2->3->4->5, k = 2 Output: 2->1->4->3->5 Explanation: The first group of 2 (1,2) is reversed to (2,1), the second group of 2 (3,4) is reversed to (4,3), the last group has only one element (5), so it remains the same. Example 2: Input: 1->2->3->4->5->6->7->8, k = 3 Output: 3->2->1->6->5->4->7->8 Explanation: The first group of 3 (1,2,3) is reversed to (3,2,1), the second group of 3 (4,5,6) is reversed to (6,5,4), the last group has only two elements (7,8), so they remain the same. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function reverseKGroup() that takes the head node of the linked list and an integer k as parameters and returns the head of the modified list. Expected Time Complexity: O(N), where N is the number of nodes in the linked list. Expected Auxiliary Space: O(1). Constraints: 1 ≤ Number of nodes ≤ 10^5 1 ≤ k ≤ Number of nodes","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseKGroup(head, k): Reverses the linked list in groups of size k. dummy = ListNode(0) dummy.next = head prev = dummy tail = dummy while True: count = 0 while tail and count < k: tail = tail.next count += 1 if not tail: # If the number of nodes is not a multiple of k break head_next = prev.next while prev.next != tail: tmp = prev.next prev.next = tmp.next tmp.next = tail.next tail.next = tmp tail = head_next prev = tail return dummy.next"},{"question":"You are given an array of positive integers. You need to find the smallest positive integer (greater than 0) that is missing from the array. Write a program to find and print this integer. Input The first line contains an integer **n** (1 ≤ n ≤ 1000), the length of the array. The second line contains **n** space-separated positive integers representing the array elements. All the elements in the array are between 1 and 10^6. Output Print the smallest positive integer that is missing from the array. Example Input 7 1 3 6 4 1 2 5 Output 7 Explanation In the given array, integers 1, 2, 3, 4, 5, and 6 exist, so the smallest missing positive integer is 7.","solution":"def find_missing_positive(arr): Returns the smallest positive integer that is missing from the array. n = len(arr) # Step 1: Mark elements and check presence of `1` contains_one = False for i in range(n): if arr[i] == 1: contains_one = True elif arr[i] <= 0 or arr[i] > n: arr[i] = 1 if not contains_one: return 1 # Step 2: Use index as a hash to record frequency of each number for i in range(n): index = abs(arr[i]) - 1 arr[index] = -abs(arr[index]) # Step 3: Find first positive value\'s index for i in range(n): if arr[i] > 0: return i + 1 return n + 1"},{"question":"Background The renowned coding competition CodeFest hosts a unique challenge where participants need to construct a maze. The maze consists of various cells, each assigned a certain value representing either an open path or a wall. The challenge is to find the longest possible path from the top-left corner to the bottom-right corner of the maze, without revisiting any cell and moving only through open paths. Problem You are given an `n x m` grid maze, where each cell (i, j) contains either a `1` (indicating an open path) or a `0` (indicating a wall). The goal is to find the longest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1) of the maze. The path can only proceed through cells containing `1`, and you can move in four possible directions: up, down, left, and right. If it\'s impossible to reach the bottom-right corner, the output should be `-1`. Constraints The input satisfies the following conditions: * All inputs are integers * 1 ≤ n, m ≤ 100 * grid[i][j] is either `0` or `1` Input The input format is as follows: ``` n m grid[0][0] grid[0][1] ... grid[0][m-1] grid[1][0] grid[1][1] ... grid[1][m-1] ... grid[n-1][0] grid[n-1][1] ... grid[n-1][m-1] ``` You are given the dimensions of the maze `n` and `m` followed by the `n x m` grid maze cells. Output Output the length of the longest path from the top-left corner to the bottom-right corner. If it is impossible to reach the destination, print `-1`. Examples Input ``` 4 4 1 1 0 1 0 1 1 0 1 0 1 1 1 1 1 1 ``` Output ``` 7 ``` Input ``` 3 3 1 0 1 1 1 0 0 1 1 ``` Output ``` 5 ``` Input ``` 3 3 1 0 0 0 0 1 1 1 1 ``` Output ``` -1 ```","solution":"def longest_path(grid): Finds the longest path from the top-left to the bottom-right corner of the maze, moving only through cells containing `1` and without revisiting any cell. n = len(grid) m = len(grid[0]) if grid[0][0] == 0 or grid[n-1][m-1] == 0: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] def dfs(x, y, visited): if x == n - 1 and y == m - 1: return 1 max_length = 0 visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1 and (nx, ny) not in visited: path_length = dfs(nx, ny, visited) if path_length != -1: max_length = max(max_length, path_length + 1) visited.remove((x, y)) return max_length if max_length != 0 else -1 result = dfs(0, 0, set()) return result # Function signature adapted to match the outputs of the example inputs"},{"question":"Little Vasya loves playing with sequences of numbers. Recently, he came across a sequence of n positive integers and decided to play a game with it. He can select exactly one pair of indices (i, j) (1 ≤ i < j ≤ n) of the sequence and swap the values at these indices. He wants to determine if it is possible to make the sequence strictly increasing by performing exactly one such swap. If it is possible, Vasya would like to know which indices he should choose to make the sequence strictly increasing. Input The first line contains a single integer n (2 ≤ n ≤ 105), which represents the length of the sequence. The next line contains n space-separated integers — the sequence\'s description. All elements of the sequence are positive integers less than or equal to 109. Output Print the indices i and j (1 ≤ i < j ≤ n), both integers, such that swapping the elements at these indices makes the sequence strictly increasing. If there are multiple valid pairs, print the pair with the smallest i first. If there is still a tie, print the pair with the smallest j. If there is no valid pair, print -1. Examples Input 5 1 5 3 4 2 Output 2 5 Input 4 4 3 2 1 Output -1 Input 3 1 5 4 Output 2 3","solution":"def find_swap_indices(n, sequence): Finds the indices (i, j) to swap which make the sequence strictly increasing. Parameters: n (int): The length of the sequence. sequence (list): The sequence of integers. Returns: tuple: Indices (i, j) if possible to make sequence strictly increasing by one swap; otherwise -1. def is_increasing(seq): # Helper function to check if a given sequence is strictly increasing for k in range(1, len(seq)): if seq[k] <= seq[k-1]: return False return True for i in range(n - 1): for j in range(i + 1, n): # Swap the elements at i and j new_sequence = sequence[:] new_sequence[i], new_sequence[j] = new_sequence[j], new_sequence[i] # Check if the new sequence is strictly increasing if is_increasing(new_sequence): return i + 1, j + 1 return -1"},{"question":"Create a function `teamRanking` that determines the ranking of a sports team based on its performance in multiple matches. This function should take three arguments: - `wins`, the number of matches won (integer, from 0 and above); - `draws`, the number of matches drawn (integer, from 0 and above); - `losses`, the number of matches lost (integer, from 0 and above). The function should return a string indicating the team\'s rank: - \\"Champion\\" if the team has won more than 20 matches. - \\"Top Team\\" if the team has won more than 15 matches and has no losses. - \\"Average Team\\" if the team has won more than 10 matches or has drawn at least 5 matches. - \\"Underperformer\\" in all other cases. Examples: ~~~if-not:nasm ```python team_ranking(22, 3, 2) # \\"Champion\\" team_ranking(16, 0, 0) # \\"Top Team\\" team_ranking(12, 4, 8) # \\"Average Team\\" team_ranking(8, 6, 7) # \\"Average Team\\" team_ranking(10, 2, 9) # \\"Underperformer\\" ``` ~~~ *Use Conditional Statements.","solution":"def team_ranking(wins, draws, losses): Determines the ranking of a sports team based on its performance. Args: wins (int): Number of matches won. draws (int): Number of matches drawn. losses (int): Number of matches lost. Returns: str: The team\'s rank. if wins > 20: return \\"Champion\\" elif wins > 15 and losses == 0: return \\"Top Team\\" elif wins > 10 or draws >= 5: return \\"Average Team\\" else: return \\"Underperformer\\""},{"question":"Alice and Bob are playing a game involving sequences of integers. Alice will first generate an integer sequence of length `n`. Then, Bob will choose a non-negative integer `k` and transform the sequence by adding `k` to every element in the sequence. Afterward, Alice will compute the score of the transformed sequence as described below: The score of a sequence is defined as the sum of the absolute differences between every consecutive pair of elements in the sequence. Formally, for a sequence `b_1, b_2, ..., b_n`, the score S is calculated as: ``` S = ∑ | b_i - b_(i+1) | for all 1 ≤ i < n ``` Alice wants to ensure that no matter what non-negative integer `k` Bob chooses, the score of the transformed sequence remains the same. Given the initial sequence generated by Alice, determine if this condition holds. If it does, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line of input contains a single integer `n` (2 ≤ n ≤ 10^5), the length of the sequence. The second line contains `n` space-separated integers representing the sequence `a_1, a_2, ..., a_n` (-10^8 ≤ a_i ≤ 10^8). -----Output----- Output \\"YES\\" if the score of the sequence remains constant for any non-negative integer `k` that Bob chooses. Otherwise, output \\"NO\\". -----Examples----- Input 3 1 3 5 Output YES Input 4 10 20 10 20 Output NO -----Note----- In the first example, adding `k` to each element in the sequence will not change the absolute differences between consecutive pairs. Hence, the score remains the same. In the second example, the differences between consecutive pairs will vary depending on the value of `k`, changing the overall score.","solution":"def is_score_constant(n, a): Determines if the score of the sequence remains constant no matter the non-negative integer k added to each element. :param n: Length of the sequence :param a: List of integers representing the sequence. :return: \'YES\' if the score is constant; \'NO\' otherwise. for i in range(1, n - 1): if (a[i] - a[i-1]) != (a[i+1] - a[i]): return \\"NO\\" return \\"YES\\" # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) a = list(map(int, input().strip().split())) print(is_score_constant(n, a))"},{"question":"Alice is planning a party, and she wants to decorate the party hall with balloons. Each balloon is either red or blue. She wants to arrange the balloons in a way that no two adjacent balloons have the same color. Given the number of red balloons and blue balloons, help Alice determine whether it is possible to arrange the balloons in the desired manner. Write a program that checks if such an arrangement is feasible. -----Input----- The first line contains two integers r and b (0 ≤ r, b ≤ 10^6), where r is the number of red balloons and b is the number of blue balloons. -----Output----- Print \\"YES\\" if it is possible to arrange the balloons such that no two adjacent balloons have the same color. Otherwise, print \\"NO\\". -----Examples----- Input 3 3 Output YES Input 5 3 Output YES Input 4 1 Output NO -----Note----- In the first sample, the arrangement \\"R B R B R B\\" satisfies the conditions. In the second sample, the arrangement \\"R B R B R B R B\\" satisfies the conditions by leaving one red balloon remaining with no adjacent conflicts. In the third sample, since the difference between the number of red and blue balloons is greater than one, such an arrangement is not possible.","solution":"def can_arrange_balloons(r, b): Determines if it is possible to arrange red and blue balloons such that no two adjacent balloons have the same color. Args: r (int): The number of red balloons. b (int): The number of blue balloons. Returns: str: \\"YES\\" if such an arrangement is possible, otherwise \\"NO\\". if abs(r - b) <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A village is represented as an `n x m` grid. Each cell in the grid can either be land (represented by `\\" L \\"`) or water (represented by `\\" W \\"`). An island is formed by a group of horizontally or vertically adjacent land cells. The villagers want to know the area of the largest island in their village. Write a program to compute the area of the largest island present in the grid. Input The first line of the input contains two integers `n` and `m` (1 ≤ n, m ≤ 500) — the dimensions of the grid. The following `n` lines contain `m` characters each, representing the grid where each character is either `L` (land) or `W` (water). Output Output a single integer — the area of the largest island. If there are no islands, output 0. Examples Input 4 5 LWLWL LLLLW WLWWW WWLLL Output 7 Input 3 3 WWW WLW WWW Output 1 Input 2 2 WW WW Output 0","solution":"def largest_island_area(n, m, grid): Returns the area of the largest island in the grid. def dfs(x, y): # Check if we\'re within the grid and on land if 0 <= x < n and 0 <= y < m and grid[x][y] == \'L\': grid[x][y] = \'W\' # Mark as visited by converting \'L\' to \'W\' return 1 + dfs(x + 1, y) + dfs(x - 1, y) + dfs(x, y + 1) + dfs(x, y - 1) return 0 max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == \'L\': max_area = max(max_area, dfs(i, j)) return max_area"},{"question":"A candy store is running a promotional offer that provides discounts based on the number of candies bought. The pricing scheme is as follows: - Each candy costs Rs 15. - If you buy more than 20 candies, you get a discount of Rs 2 per candy. - If you buy more than 50 candies, the discount increases to Rs 5 per candy (overrides the Rs 2 discount). Given the number of candies to be bought, determine the total cost to be paid. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case contains a single integer N, the number of candies bought. ------ Output Format ------ For each test case, output the total cost to be paid. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 ----- Sample Input 1 ------ 4 10 25 55 50 ----- Sample Output 1 ------ 150 325 550 750 ----- Explanation 1 ------ Test case 1: 10 candies bought, cost per candy is Rs 15, so total cost is 10 cdot 15 = 150 rupees. Test case 2: 25 candies bought, eligible for Rs 2 discount per candy, so total cost is 25 cdot (15 - 2) = 25 cdot 13 = 325 rupees. Test case 3: 55 candies bought, eligible for Rs 5 discount per candy, so total cost is 55 cdot (15 - 5) = 55 cdot 10 = 550 rupees. Test case 4: 50 candies bought, only Rs 2 discount applicable, so total cost is 50 cdot (15 - 2) = 50 cdot 13 = 650 rupees.","solution":"def total_cost(T, cases): results = [] for N in cases: if N > 50: cost_per_candy = 15 - 5 elif N > 20: cost_per_candy = 15 - 2 else: cost_per_candy = 15 total = N * cost_per_candy results.append(total) return results"},{"question":"Write a function named `max_subarray_sum` that takes a list of integers as an input and returns the maximum sum of any contiguous subarray within the input list. Implement the function using an efficient algorithm with a linear time complexity. **Function signature:** ```python def max_subarray_sum(nums: List[int]) -> int: ``` **Input:** - `nums`: A list of integers. The length of the list will be between 1 and 10^5. Each integer in the list will be in the range from -10^4 to 10^4. **Output:** - The maximum sum of any contiguous subarray within the input list. **Example:** ```python max_subarray_sum([1, -3, 2, 1, -1]) # Returns 3 (2 + 1) max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) # Returns 6 (4 + (-1) + 2 + 1) max_subarray_sum([5, 4, -1, 7, 8]) # Returns 23 (5 + 4 + (-1) + 7 + 8) ``` **Explanation:** - In the first example, the maximum sum is obtained by the subarray `[2, 1]`. - In the second example, the maximum sum is obtained by the subarray `[4, -1, 2, 1]`. - In the third example, the entire array yields the maximum sum as it consists of mostly positive numbers.","solution":"from typing import List def max_subarray_sum(nums: List[int]) -> int: Returns the maximum sum of any contiguous subarray within the input list using Kadane\'s algorithm. max_ending_here = max_so_far = nums[0] for num in nums[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Sarah has a string of lowercase letters and she wants to encrypt it using a simple substitution cipher. The cipher works by moving each letter forward in the alphabet by a given number of positions, wrapping around to the beginning if necessary (so \'z\' followed by 1 position becomes \'a\'). Sarah wants to be able to both encrypt and decrypt messages using this cipher. Write a program to help Sarah with her task. -----Input----- The first line contains a string s (1 ≤ |s| ≤ 100) consisting of lowercase English letters. The second line contains an integer k (1 ≤ k ≤ 25), which is the number of positions each letter in the string should be shifted. -----Output----- Print two lines: - The first line should be the encrypted version of the input string. - The second line should be the decrypted version of the encrypted string (which should equal the original string). -----Examples----- Input hello 3 Output khoor hello Input abcd 1 Output bcde abcd","solution":"def encrypt(s, k): Encrypt the input string s by shifting each character k positions forward in the alphabet. encrypted = [] for char in s: shifted = (ord(char) - ord(\'a\') + k) % 26 + ord(\'a\') encrypted.append(chr(shifted)) return \'\'.join(encrypted) def decrypt(s, k): Decrypt the input string s by shifting each character k positions backward in the alphabet. decrypted = [] for char in s: shifted = (ord(char) - ord(\'a\') - k) % 26 + ord(\'a\') decrypted.append(chr(shifted)) return \'\'.join(decrypted)"},{"question":"Given an integer array nums, and a subarray size k, return an integer array containing the maximum value of each subarray of size k. Example 1: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: window position max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Example 2: Input: nums = [9, 11], k = 2 Output: [11] Example 3: Input: nums = [4, -2], k = 1 Output: [4, -2] Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 1 <= k <= nums.length","solution":"from collections import deque def maxSlidingWindow(nums, k): Returns the maximum value of each subarray of size k in the given integer array nums. :param nums: List[int] - List of integers :param k: int - Size of the subarray :return: List[int] - List of the maximum values of each subarray of size k q = deque() result = [] for i in range(len(nums)): # Remove elements not within the sliding window if q and q[0] == i - k: q.popleft() # Remove elements smaller than the current element from the right while q and nums[q[-1]] <= nums[i]: q.pop() # Add current element at the end of the deque q.append(i) # Append the max of the window to the result list if i >= k - 1: result.append(nums[q[0]]) return result"},{"question":"Preface A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. A prime number is only divisible by 1 and itself. The Problem Create a function `nearest_prime` that takes a positive integer `n` as an argument and returns the nearest prime number to `n`. If there is a tie (i.e., two prime numbers are equidistant from `n`), return the smaller prime number. Sample Input ```python nearest_prime(10) # should return 11 nearest_prime(14) # should return 13 nearest_prime(21) # should return 19 nearest_prime(20) # should return 19 ``` Don\'t worry about invalid input. Arguments passed into the function are guaranteed to be valid positive integers.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def nearest_prime(n): if is_prime(n): return n lower = n - 1 higher = n + 1 while True: if is_prime(lower): return lower if is_prime(higher): return higher lower -= 1 higher += 1"},{"question":"You are given a collection of containers, each capable of holding a different maximum volume of liquid. You are also given a single large tank full of liquid. Your goal is to distribute the liquid from the tank into the containers in such a way that the total amount of liquid distributed is maximized without exceeding any container\'s capacity. --- Input --- The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer V, the total volume of liquid in the tank. - The second line contains an integer N, the number of containers. - The third line contains N space-separated integers, where the i-th integer represents the maximum capacity of the i-th container. --- Output --- For each test case, output a single integer representing the maximum total volume of liquid that can be distributed into the containers. --- Constraints --- 1 ≤ T ≤ 100 1 ≤ V ≤ 10^9 1 ≤ N ≤ 100 1 ≤ text{capacity}_{i} ≤ 10^6 for each 1 leq i leq N --- Example Input --- 2 100 5 20 30 10 40 50 150 4 25 50 75 100 --- Example Output --- 100 150 --- Explanation --- In the first test case, we have a total of 100 units of liquid and 5 containers with capacities [20, 30, 10, 40, 50]. The best way is to fill containers with capacities 20, 30, 10, and 40 (totalling 100). In the second test case, we have a total of 150 units of liquid and 4 containers with capacities [25, 50, 75, 100]. The best way is to fill all four containers to their maximum capacities (totalling 150).","solution":"def distribute_liquid(T, test_cases): results = [] for case in test_cases: V, N, capacities = case capacities.sort(reverse=True) total_distributed = 0 for capacity in capacities: if V > 0: to_add = min(V, capacity) total_distributed += to_add V -= to_add results.append(total_distributed) return results"},{"question":"You are given a string of round and square brackets. Write a program to determine the minimum number of moves required to make the string balanced. A move involves either inserting a bracket at any position in the string or removing a bracket from any position. A string is considered balanced if every opening bracket has a corresponding closing bracket of the same type and brackets close in the correct order. -----Input----- A single line containing a string s (0 ≤ |s| ≤ 10^5), consisting of characters \'(\', \')\', \'[\', and \']\'. -----Output----- Print an integer representing the minimum number of moves required to make the string balanced. -----Examples----- Input ([)] Output 2 Input ([]) Output 0","solution":"def min_moves_to_balance(s): Returns the minimum number of moves required to make the string balanced. stack = [] moves = 0 for char in s: if char in \'([\': stack.append(char) elif char == \')\' and stack and stack[-1] == \'(\': stack.pop() elif char == \']\' and stack and stack[-1] == \'[\': stack.pop() else: moves += 1 # unmatched closing bracket moves += len(stack) # remaining unmatched opening brackets return moves"},{"question":"You are a software developer working on a project that involves file storage and organization. You need to implement a function to manage file paths and perform certain operations on them. Each file path consists of directories and subdirectories represented as strings separated by forward slashes (\\"/\\"). Your task is to create a function that normalizes the file paths, removing any unnecessary elements like \\".\\" (current directory) and \\"..\\" (parent directory) to provide the shortest possible path in canonical form. For example, given the path \\"a/./b/../../c/\\", it should be simplified to \\"c\\". For the path \\"/a/./b/../c/\\", it should be simplified to \\"/a/c\\". Input: - A string representing the file path. Output: - A string representing the normalized path in canonical form. Rules: 1. A single dot (\\".\\") refers to the current directory and can be removed. 2. A double dot (\\"..\\") moves up one directory level and thus removes the last valid directory from the path. 3. Multiple consecutive slashes (\\"//\\") should be reduced to a single slash (\\"/\\"). 4. The resulting normalized path must always start with a single slash (\\"/\\") if it is rooted or be a relative path starting without a slash. Function Signature: ```python def normalize_path(path: str) -> str: pass ``` Examples: ```python normalize_path(\\"/home/\\") => \\"/home\\" normalize_path(\\"/a/./b/../../c/\\") => \\"/c\\" normalize_path(\\"/a/../../b/../c//.//\\") => \\"/c\\" normalize_path(\\"/a//b////c/d//././/..\\") => \\"/a/b/c\\" ``` Note: Pay attention to edge cases like empty strings or paths that resolve to the root directory.","solution":"def normalize_path(path: str) -> str: Normalizes the given file path by removing \\".\\", \\"..\\", and reducing multiple \\"/\\" to a single \\"/\\". if not path: return \'/\' stack = [] parts = path.split(\'/\') for part in parts: if part == \\"..\\": if stack and stack[-1] != \'\': stack.pop() elif part == \\".\\" or part == \\"\\": continue else: stack.append(part) if not stack: return \'/\' if path[0] == \'/\': return \'/\' + \'/\'.join(stack) else: return \'/\'.join(stack)"},{"question":"You are given a list of N projects. Each project has a start date and an end date. Each project requires a team to work for its entire duration. You need to find out the minimum number of teams required such that all the projects can be handled without any overlap in the work schedules. Constraints * 1 leq N leq 10^5 * 1 leq text{start}_i < text{end}_i leq 10^5 Input The input is given in the following format. N text{start}_1 text{end}_1 text{start}_2 text{end}_2 : text{start}_N text{end}_N Output Print the minimum number of teams required in a line. Examples Input 3 1 4 2 5 4 6 Output 2 Input 4 1 3 3 5 5 6 6 8 Output 1","solution":"def min_teams_required(N, projects): Finds the minimum number of teams required to handle all the projects without overlap. Parameters: N (int): Number of projects projects (list of tuples): Each tuple contains two elements, the start and end dates of a project Returns: int: Minimum number of teams required # Extract start and end times as separate events events = [] for start, end in projects: events.append((start, \'start\')) events.append((end, \'end\')) # Sort events. If two events have the same time, \'end\' event comes before \'start\' events.sort(key=lambda x: (x[0], x[1] == \'start\')) max_overlap = 0 current_overlap = 0 for event in events: if event[1] == \'start\': current_overlap += 1 if current_overlap > max_overlap: max_overlap = current_overlap else: current_overlap -= 1 return max_overlap"},{"question":"A tree is called a **super full binary tree** if: 1. It is non-empty and all leaves are at the same level. 2. Every non-leaf node has exactly three children. Write a function to determine if a given tree is a **super full binary tree**. # Input Format The input consists of: - An integer N representing the number of nodes in the tree. - N lines, each containing an integer and a list of integers representing the edges between the nodes in parent child format. # Output Format Output `true` if the tree is a **super full binary tree** and `false` otherwise. # Constraints - 1 leq N leq 1000 - For each node, there can be 0 or 3 children. # Example Input ``` 7 1 2 3 4 2 -1 3 -1 4 -1 5 6 7 8 6 -1 7 -1 8 -1 ``` Output ``` true ``` Input ``` 6 1 2 3 4 2 -1 3 -1 4 5 6 ``` Output ``` false ``` # Explanation In the first example, the tree satisfies the conditions for a **super full binary tree**: - Every non-leaf node has 3 children. - All leaf nodes are at the same level. In the second example, the tree does not satisfy the conditions: - The node with value 4 has only 2 children instead of 3. Write a function `is_super_full_binary_tree` that takes in the number of nodes and a list of edges, and returns a boolean indicating whether the tree is a **super full binary tree**. ```python def is_super_full_binary_tree(N, edges): from collections import defaultdict, deque children = defaultdict(list) for edge in edges: parent, *childs = map(int, edge.split()) if childs != [-1]: children[parent] = childs def bfs(root): queue = deque([(root, 0)]) leaf_level = -1 while queue: node, level = queue.popleft() if node in children: if len(children[node]) != 3: return False for child in children[node]: queue.append((child, level + 1)) else: if leaf_level == -1: leaf_level = level elif leaf_level != level: return False return True return bfs(1) # Example Usage N = 7 edges = [\\"1 2 3 4\\", \\"2 -1\\", \\"3 -1\\", \\"4 -1\\", \\"5 6 7 8\\", \\"6 -1\\", \\"7 -1\\", \\"8 -1\\"] print(is_super_full_binary_tree(N, edges)) # Output should be True ```","solution":"from collections import defaultdict, deque def is_super_full_binary_tree(N, edges): # Building the tree from given edges. Using default dict for easier management of children nodes. children = defaultdict(list) for edge in edges: parent, *childs = map(int, edge.split()) if childs != [-1]: children[parent] = childs def bfs(root): # Using BFS to traverse the tree and check the conditions queue = deque([(root, 0)]) leaf_level = -1 while queue: node, level = queue.popleft() if node in children: if len(children[node]) != 3: return False for child in children[node]: queue.append((child, level + 1)) else: if leaf_level == -1: leaf_level = level elif leaf_level != level: return False return True return bfs(1) # Example Usage N = 7 edges = [\\"1 2 3 4\\", \\"2 -1\\", \\"3 -1\\", \\"4 -1\\", \\"5 6 7 8\\", \\"6 -1\\", \\"7 -1\\", \\"8 -1\\"] print(is_super_full_binary_tree(N, edges))"},{"question":"A company security system uses N number of sequentially numbered key cards, ranging from 1 to N, to allow access to different areas. Each key card has a specific time window during which it is active. You need to determine the maximum number of non-overlapping time windows you can select from the given key cards. Each key card i has a time window represented by a pair (startTime_i, endTime_i), which indicates the period (inclusive) during which the key card is active. You must select key cards such that no two selected key card time windows overlap. INPUT Number of Test Cases T. Each Test case contains an integer N, followed by N lines of space-separated integers, where each line contains startTime_i and endTime_i. OUTPUT For each Test case, print the maximum number of non-overlapping time windows you can select. CONSTRAINTS T ≤ 1,000 1 ≤ N ≤ 10^5 1 ≤ startTime_i < endTime_i ≤ 10^9 SAMPLE INPUT 2 3 1 4 2 5 5 8 4 1 3 2 4 3 5 5 7 SAMPLE OUTPUT 2 3 Explanation Example 1: You can select key cards with time windows (1, 4) and (5, 8). Example 2: You can select key cards with time windows (1, 3), (3, 5), and (5, 7).","solution":"def max_non_overlapping_intervals(test_cases): results = [] for intervals in test_cases: # Sort intervals based on end time intervals.sort(key=lambda x: x[1]) count = 0 end_time = 0 for interval in intervals: if interval[0] >= end_time: count += 1 end_time = interval[1] results.append(count) return results def process_input(input_lines): t = int(input_lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(input_lines[index]) index += 1 intervals = [tuple(map(int, input_lines[index + i].split())) for i in range(n)] test_cases.append(intervals) index += n return test_cases"},{"question":"You have a grid of `m * n` size, initially filled with `0`s. There is a list of operations that are applied to the grid. Each operation is represented by a pair of indices `(x, y)` which means filling all rows up to `x` and all columns up to `y` with `1`s. You need to determine the count of cells filled with `1` after performing all the operations. Your task is to implement the function `count_filled_cells(m, n, operations)` that calculates the number of filled cells. # Input: - `m`: An integer, number of rows in the grid. - `n`: An integer, number of columns in the grid. - `operations`: A list of tuple pairs `(x, y)`, representing the operations. # Output: - Return an integer, the number of filled cells after performing all the operations. # Example: ``` m = 3 n = 3 operations = [(2, 2), (3, 1)] count_filled_cells(m, n, operations) --> 6 ``` # Explanation: After the first operation, the grid becomes: ``` 1 1 1 1 1 1 0 0 0 ``` After the second operation, the grid becomes: ``` 1 1 1 1 1 1 1 1 0 ``` The total number of cells filled with `1` is 6. # Additional Notes: - Consider the smallest value of `x` and `y` in the operations to optimize your solution. - This is not a simulation-based problem. - The input list `operations` will have at least one operation.","solution":"def count_filled_cells(m, n, operations): Returns the number of cells filled with 1 after performing all the operations. Each operation is represented by a pair (x, y) that fills all rows up to x and columns up to y. if not operations: return 0 min_x = m min_y = n for x, y in operations: min_x = min(min_x, x) min_y = min(min_y, y) return min_x * min_y"},{"question":"You are given a list of integers \'nums\' representing the number of times each unique element appears in the array. Your task is to re-construct the original array in non-decreasing order. Example 1: Input: nums = [2, 1, 1] Output: [1, 1, 2, 3] Explanation: The original elements and their frequency pairs: Element 1 appears 2 times, Element 2 appears 1 time, Element 3 appears 1 time. Reconstructing and sorting the original array gives: [1, 1, 2, 3] Example 2: Input: nums = [1, 3, 2] Output: [1, 2, 2, 2, 3, 3] Explanation: The original elements and their frequency pairs: Element 1 appears 1 time, Element 2 appears 3 times, Element 3 appears 2 times. Reconstructing and sorting the original array gives: [1, 2, 2, 2, 3, 3] Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `reconstruct_array()` that takes an array (nums) and returns the re-constructed array in non-decreasing order. The driver code takes care of the printing. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ len(nums) ≤ 10^{5} 1 ≤ nums[i] ≤ 10^{5}","solution":"def reconstruct_array(nums): Reconstruct the original array based on the frequency mentioned. Args: nums (List[int]): List of integers where the value at each index represents the frequency of (index + 1) Returns: List[int]: The reconstructed array in non-decreasing order. reconstructed_array = [] for index, frequency in enumerate(nums): element = index + 1 reconstructed_array.extend([element] * frequency) return reconstructed_array"},{"question":"-----General Statement:----- Write a function that takes an unsorted list of integers and returns the list sorted in ascending order, but with all the negative numbers at the end of the list. -----Input:----- The input consists of a single line containing space-separated integers. -----Output:----- Output the integers sorted in ascending order, with all negative numbers moved to the end of the list, each separated by a space. -----Assumptions:----- The list can contain duplicate integers. The list has at least one integer. The list can contain both positive and negative integers, or only positive or only negative integers. -----Sample Input:----- 3 -2 5 -1 7 4 -3 -----Sample Output:----- 3 4 5 7 -1 -2 -3","solution":"def custom_sort(numbers): Sorts the provided list of numbers in ascending order, but moves all the negative numbers to the end. positive_numbers = [num for num in numbers if num >= 0] negative_numbers = [num for num in numbers if num < 0] sorted_positive_numbers = sorted(positive_numbers) sorted_negative_numbers = sorted(negative_numbers, reverse=True) return sorted_positive_numbers + sorted_negative_numbers"},{"question":"Sam loves coding challenges and has currently taken an interest in number theory. One day, while reading about prime numbers, he stumbled upon an interesting property of prime numbers called \\"prime gaps\\". The gap between two successive prime numbers is defined as the difference between the latter prime and the former prime. For instance, the gap between the primes 11 and 13 is 2, whereas the gap between 17 and 19 is also 2. Sam wants to find all prime gaps for prime numbers less than a given number `N`. -----Input----- The input consists of a single integer `N` (2 leq N leq 200000), which represents the upper limit (exclusive) for the range within which we need to find prime gaps. -----Output----- Output the list of unique prime gaps found between all successive prime numbers less than `N`. The gaps should be displayed in ascending order, each on a new line. -----Example----- Sample Input 1: 20 Sample Output 1: 1 2 4 Sample Input 2: 50 Sample Output 2: 1 2 4 6","solution":"def find_prime_gaps(N): def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True primes = [i for i in range(2, N) if is_prime(i)] gaps = set() for i in range(1, len(primes)): gaps.add(primes[i] - primes[i - 1]) return sorted(gaps) def format_prime_gaps(N): gaps = find_prime_gaps(N) return \\"n\\".join(map(str, gaps))"},{"question":"# Task Given a string `s`, return the number of distinct characters that appear exactly once in the string. # Example For `s = \\"programming\\"`, the result should be `5` The distinct characters that appear exactly once are: `p`, `n`, `g`, `a`, and `i`. For `s = \\"abcdabcdabcd\\"`, the result should be `0` No characters appear exactly once in the string. For `s = \\"hello\\"`, the result should be `3` The distinct characters that appear exactly once are: `h`, `e`, and `o`. # Input/Output - `[input]` string `s` A string of lowercase alphabets, `1 ≤ |s| ≤ 10000`. - `[output]` an integer The number of distinct characters that appear exactly once in the string.","solution":"def count_single_occurrences(s): Returns the number of distinct characters that appear exactly once in the string `s`. from collections import Counter # Count occurrences of each character char_count = Counter(s) # Find characters that appear exactly once single_occurrences = [char for char in char_count if char_count[char] == 1] return len(single_occurrences)"},{"question":"Create a function that takes a list of strings and returns the length of the longest subsequence where each string is a subsequence of the next string. Examples: `longestSubsequenceLength([\\"a\\", \\"abc\\", \\"ab\\", \\"abcd\\", \\"b\\"])` returns 4 Explanation: \\"a\\" → \\"abc\\" → \\"abcd\\", \\"ab\\" → \\"abcd\\" form valid subsequences. `longestSubsequenceLength([\\"x\\", \\"xyz\\", \\"xy\\", \\"zxy\\", \\"a\\"])` returns 3 Explanation: \\"x\\" → \\"xy\\" → \\"xyz\\" forms a valid subsequence. `longestSubsequenceLength([\\"car\\", \\"cat\\", \\"cart\\", \\"cot\\", \\"bat\\"])` returns 2 Explanation: \\"car\\" → \\"cart\\" or \\"cat\\" → \\"cot\\" forms a valid subsequence. `longestSubsequenceLength([\\"dog\\", \\"dot\\", \\"dogt\\", \\"top\\", \\"dop\\"])` returns 2 Explanation: \\"dog\\" → \\"dogt\\" or \\"dot\\" → \\"dot\\" forms a valid subsequence. `longestSubsequenceLength([\\"a\\", \\"b\\"])` returns 1 Explanation: Each string stands alone, forming a subsequence of length 1. `longestSubsequenceLength([\\"aaaa\\", \\"aaa\\", \\"aa\\", \\"a\\"])` returns 4 Explanation: \\"a\\" → \\"aa\\" → \\"aaa\\" → \\"aaaa\\" forms a valid subsequence.","solution":"def is_subsequence(s1, s2): Checks if s1 is a subsequence of s2. it = iter(s2) return all(char in it for char in s1) def longestSubsequenceLength(strings): Returns the length of the longest subsequence where each string is a subsequence of the next string. n = len(strings) if n == 0: return 0 # Sort strings based on their lengths strings.sort(key=len) # dp[i] will store the length of the longest valid subsequence ending with strings[i] dp = [1] * n # Find the longest subsequence for i in range(n): for j in range(i): if is_subsequence(strings[j], strings[i]): dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Examples: # print(longestSubsequenceLength([\\"a\\", \\"abc\\", \\"ab\\", \\"abcd\\", \\"b\\"])) # Returns 4 # print(longestSubsequenceLength([\\"x\\", \\"xyz\\", \\"xy\\", \\"zxy\\", \\"a\\"])) # Returns 3"},{"question":"You are a software engineer tasked with ensuring data consistency in a distributed database system. The system consists of several nodes, each storing a portion of the total data. Updates to the data occur frequently, and every update is accompanied by a timestamp in milliseconds. Your goal is to determine the consistency of the updates across all nodes, ensuring that for any given data item, the timestamps of updates on all nodes follow a strictly increasing order. If you find any data item with timestamps not following this strictly increasing rule, it means the system is inconsistent. Write a function that takes the following input: - An integer n (1 leq n leq 10^5), the number of data items. - An array of size n, where each element is an integer identifier for a data item (1 leq text{identifier} leq 10^6). - An array of size n, where each element is a list of tuples. Each tuple contains an integer x (1 leq x leq 10^6) representing a node identifier, and an integer t representing the timestamp at which the data item was updated on that node. Your function should return \\"Consistent\\" if all data items\' timestamps on different nodes follow a strictly increasing order, otherwise return \\"Inconsistent\\". ---Input--- The input consists of: - An integer n. - An array of n integers representing the data item identifiers. - An array of n lists of tuples, each tuple containing a node identifier and a timestamp. ---Output--- Return a string, either \\"Consistent\\" or \\"Inconsistent\\". ---Examples--- Sample Input: 3 [1, 2, 3] [ [(1, 1000), (2, 2000)], [(1, 1001), (2, 999)], [(1, 1500), (3, 1600)] ] Sample Output: \\"Inconsistent\\" Sample Input: 2 [4, 5] [ [(1, 2000), (2, 3000), (3, 4000)], [(2, 1000), (3, 2000)] ] Sample Output: \\"Consistent\\" ---Explanation--- In the first example, the second data item has a timestamp of 1001 on node 1 and 999 on node 2, which is not in strictly increasing order. Hence, the output is \\"Inconsistent\\". In the second example, all timestamps on different nodes for each data item follow strictly increasing order, so the output is \\"Consistent\\".","solution":"def check_consistency(n, data_items, node_updates): Returns \\"Consistent\\" if all data items\' timestamps on different nodes follow strictly increasing order, otherwise returns \\"Inconsistent\\". Parameters: n (int): Number of data items. data_items (list of int): List of data item identifiers. node_updates (list of list of tuples): List where each element is a list of tuples (node id, timestamp). Returns: str: \\"Consistent\\" or \\"Inconsistent\\" for updates in node_updates: # Extract timestamps and sort them timestamps = [timestamp for node, timestamp in updates] if timestamps != sorted(timestamps): return \\"Inconsistent\\" return \\"Consistent\\""},{"question":"Given a string ( S ) and a dictionary of words ( D ), find the longest word in ( D ) that can be formed by deleting some characters of the string ( S ). If there are ties, return the word which appears first in the dictionary. # Input The first line contains the number of words ( n ) in the dictionary. The second line contains the string ( S ). Each of the next ( n ) lines contains one word from the dictionary ( D ). # Output Print the longest word from the dictionary ( D ) that can be formed by deleting some characters of the string ( S ). If there are multiple such words of the same length, print the one that appears first in the dictionary. # Constraints - ( 1 leq n leq 1000 ) - ( 1 leq |S| leq 10^5 ) - ( 1 leq |D_i| leq 100 ) for each word in the dictionary # Example Input ``` 5 abcde a b c ab cd ``` Output ``` ab ``` Input ``` 4 aabbcc a ab abc abcd ``` Output ``` abc ```","solution":"def find_longest_word(n, S, words): def is_subsequence(x, y): it = iter(y) return all(c in it for c in x) longest_word = \\"\\" for word in words: if is_subsequence(word, S): if len(word) > len(longest_word) or (len(word) == len(longest_word) and words.index(word) < words.index(longest_word)): longest_word = word return longest_word"},{"question":"Talented Chef is preparing dessert by arranging fruits in layers in a pyramid shape. He wants to ensure that the pyramid is stable by ensuring each row contains fewer fruits than the row directly below it. Each fruit is represented by a sweetness level (an integer). Given an array of integers \'fruits\' representing the sweetness levels of fruits, return the largest matching pyramid possible such that no two adjacent fruits at the same level have the same sweetness level. Example 1: Input: fruits = [3, 3, 1, 1, 2, 2] Output: [3, 2, 1] Explaination: Form a pyramid with [3, 2, 1] from the input list as it\'s the largest subset where each level\'s sweetness values are unique. Example 2: Input: fruits = [5, 4, 4, 4, 2, 2] Output: [4, 2] Explaination: Form a pyramid with [4, 2] from the input list since it\'s the largest subset with unique values for each level. Your Task: You do not need to read input or print anything. Your task is to complete the function buildPyramid() which takes array \'fruits\' as input parameter and returns an array representing the largest pyramid with unique sweetness levels. Expected Time Complexity: O(N log N), where N is the length of the array \'fruits\'. Expected Auxiliary Space: O(1) Constraints: 1 ≤ |fruits| ≤ 10000 1 ≤ fruits[i] ≤ 100000","solution":"def buildPyramid(fruits): Given an array of integers \'fruits\' representing sweetness levels, returns the largest pyramid possible such that no two adjacent fruits at the same level have the same sweetness level. # First, sort the fruits array to work with unique sweetness levels. sorted_fruits = sorted(set(fruits), reverse=True) # Initialize the pyramid structure. pyramid = [] for fruit in sorted_fruits: # Check if the current sweetest fruit can be added to the pyramid if len(pyramid) == 0 or pyramid[-1] > fruit: pyramid.append(fruit) return pyramid"},{"question":"Zara and the Magic Potions Zara has recently discovered a mysterious alchemist\'s lab, where she found a collection of magical potions. These potions are stored in bottles, each labeled with a unique integer identifier. Zara noticed that each potion combination can unveil a different magical property, some beneficial and some harmful. There are N bottles, and Zara wants to experiment with different subsets of these bottles to discover all possible magical effects. However, she must follow a set of rules laid out by the alchemist: 1. Zara can only use exactly K bottles in each experiment. 2. Each valid subset of K bottles will be experimented with exactly once. 3. For each subset of K bottles, the combined magical effect is determined by the sum of their identifiers. Zara is interested in finding out the subset of K bottles that will yield the maximum combined magical effect. Given the number of bottles N, the number of bottles to use in each experiment K, and the unique identifier of each bottle, your task is to determine which subset of K bottles Zara should use to achieve the maximum combined magical effect. If there are multiple subsets with the same maximum sum, provide the lexicographically smallest subset. Input Format: The first line of input contains two space-separated integers N and K. The second line contains N space-separated integers, the identifiers of the bottles. Output Format: Output a single line containing K space-separated integers, the identifiers of the subset that yields the maximum combined magical effect, in ascending order. Constraints: 1 ≤ K ≤ N ≤ 2 * 10^5 -10^9 ≤ identifier ≤ 10^9 SAMPLE INPUT: 5 3 1 3 -2 5 4 SAMPLE OUTPUT: 3 4 5 Explanation: Among all possible combinations of 3 bottles, the one with identifiers [3, 4, 5] yields the highest sum of 12, and is thus the chosen subset. Note: When multiple subsets have identifiers with the same sum, the lexicographically smaller subset is selected. In this case, [3, 4, 5] is the only subset with the sum 12.","solution":"def max_effect_subset(N, K, identifiers): Returns the subset of K bottles that yields the maximum combined magical effect. If there are multiple subsets with the same sum, returns the lexicographically smallest subset. # Sort the identifiers in descending order to get possible largest sums quickly identifiers.sort(reverse=True) # Pick the top K identifiers top_k_identifiers = identifiers[:K] # Sort the top K identifiers to make the result lexicographically smallest top_k_identifiers.sort() return top_k_identifiers # Example usage if __name__ == \\"__main__\\": N, K = 5, 3 identifiers = [1, 3, -2, 5, 4] result = max_effect_subset(N, K, identifiers) print(result) # Output should be [3, 4, 5]"},{"question":"Alice has a row of n blocks, each marked with a unique integer from 1 to n. Alice wants to rearrange the blocks according to a specific sequence of moves. Each move involves selecting a contiguous subarray of blocks and reversing it. The goal is to transform the initial sequence into the target sequence using the minimum number of moves. You need to determine the minimum number of moves required to achieve the target sequence. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of blocks. The second line contains n integers representing the initial arrangement of the blocks. The third line contains n integers representing the target arrangement of the blocks. Output Print one integer: the minimum number of moves required. Examples Input 5 1 2 3 4 5 5 4 3 2 1 Output 1 Input 4 1 3 2 4 1 2 3 4 Output 1 Input 7 1 2 3 4 5 6 7 3 2 1 7 6 5 4 Output 2 Note For the first example, you can reverse the entire array in one move to get the target sequence. For the second example, you can reverse the subarray from index 2 to 3 to get the target sequence. For the third example, you can reverse the subarray from index 1 to 3, followed by reversing the subarray from index 4 to 7 to get the target sequence.","solution":"def min_moves_to_rearrange(n, initial, target): Returns the minimum number of moves to transform the initial arrangement into the target arrangement. # The logic here checks for contiguous segments already matching in target start = 0 while start < n and initial[start] == target[start]: start += 1 end = n - 1 while end >= 0 and initial[end] == target[end]: end -= 1 if start > end: return 0 # Check if reversing the segment from start to end in initial matches the target if initial[start:end+1][::-1] == target[start:end+1]: return 1 return 2"},{"question":"Mark is collecting precious stones. Each stone has a specific weight and value. Mark can carry a maximum weight of W in his bag. He wants to maximize the total value of the stones he can carry without exceeding the weight limit. Given a list of stones where each stone is represented as a pair of integers (weight, value), help Mark determine the maximum total value of the stones he can select. Input The first line contains two integers n (1 ≤ n ≤ 100) and W (1 ≤ W ≤ 1000) -- the number of stones and the maximum weight Mark can carry. Each of the next n lines contains two integers wi and vi (1 ≤ wi ≤ 100, 1 ≤ vi ≤ 100), the weight and value of the i-th stone. Output Print a single integer representing the maximum total value of the stones Mark can carry. Examples Input 4 5 2 3 1 2 3 4 2 2 Output 7 Input 3 50 10 60 20 100 30 120 Output 220 Note In the first sample case: - Mark can carry stones 1, 2, and 4 (total weight 2 + 1 + 2 = 5) with a total value of 3 + 2 + 2 = 7. In the second sample case: - Mark can carry stones 1 and 2 (total weight 10 + 20 = 30) with a total value of 60 + 100 = 160, or stones 2 and 3 (total weight 20 + 30 = 50) with a total value of 100 + 120 = 220. The latter option gives the maximum value.","solution":"def knapsack(n, W, stones): Determine the maximum total value of stones Mark can carry. :param n: Number of stones :param W: Maximum weight Mark can carry :param stones: List of tuples [(wi, vi), ...] where wi is weight and vi is value of the i-th stone :return: Maximum total value of the stones Mark can carry dp = [[0 for x in range(W + 1)] for x in range(n + 1)] for i in range(n + 1): for w in range(W + 1): if i == 0 or w == 0: dp[i][w] = 0 elif stones[i-1][0] <= w: dp[i][w] = max(stones[i-1][1] + dp[i-1][w-stones[i-1][0]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][W] # Example Usage if __name__ == \\"__main__\\": n = 4 W = 5 stones = [(2, 3), (1, 2), (3, 4), (2, 2)] print(knapsack(n, W, stones)) # Output: 7"},{"question":"Write a function that takes a string of alphanumeric characters and shifts each letter by a given number in the alphabet, wrapping around to the beginning if necessary (like a Caesar cipher). Numbers should remain unchanged. The function should ignore case and return the result in all lowercase. EXAMPLES - shift_cipher(\'Hello, World!\', 3) becomes \'khoor zruog\' - shift_cipher(\'Python 3.8\', 5) becomes \'udymts 3.8\' - shift_cipher(\'abcdefg\', 2) becomes \'cdefghi\'","solution":"def shift_cipher(text, shift): Shifts each letter in the text by the given number in the alphabet, wrapping around to the beginning if necessary. Numbers and non-alphabet characters remain unchanged. The returned string is in all lowercase. Parameters: text (str): the input string of alphanumeric characters. shift (int): the number of positions to shift each letter. Returns: str: the shifted string in all lowercase. result = [] for char in text: if char.isalpha(): # Perform the shift for alphabetical characters shifted = chr((ord(char.lower()) - ord(\'a\') + shift) % 26 + ord(\'a\')) result.append(shifted) else: # Non-alphabetical characters remain unchanged result.append(char) return \'\'.join(result)"},{"question":"Rosa and Charley are playing a game on a chessboard of size n times n. Initially, some of the cells on the chessboard may be blocked. Rosa\'s goal is to move a knight from the top-left cell to the bottom-right cell, while Charley blocks certain cells to make it more difficult for Rosa. The knights can move according to the standard chess rules: it can move two squares in one direction and then one square perpendicular to that direction (or vice versa) - so it has up to 8 possible moves from any given position. Rosa and Charley take turns, with Rosa moving first. On Rosa\'s turn, she moves the knight if it\'s possible, otherwise she loses the game. On Charley\'s turn, he can block one currently unblocked cell of the chessboard, provided it is not occupied by the knight or already blocked. Determine who will win if both players play optimally. -----Input----- The first line contains a single integer n (1 le n le 50) — the size of the chessboard. The second line contains a single integer m (0 le m le n^2) — the number of initially blocked cells. Each of the next m lines contains two integers x and y (1 le x, y le n) indicating that cell (x, y) is initially blocked. -----Output----- Output \\"Rosa\\" (without quotes) if Rosa wins, otherwise print \\"Charley\\" (without quotes). -----Example----- Input 5 3 1 2 2 3 4 5 Output Rosa -----Note----- In the provided example, Rosa can move the knight via (1, 1) -> (3, 2) -> (5, 3), bypassing the blocked cells and reaching the bottom-right corner. Hence, Rosa wins. Charley cannot block enough cells to stop Rosa immediately.","solution":"def solve_chessboard(n, m, blocked_cells): def get_neighbors(x, y, n): # Define knight moves move_offsets = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] neighbors = [] for dx, dy in move_offsets: nx, ny = x + dx, y + dy if 1 <= nx <= n and 1 <= ny <= n: neighbors.append((nx, ny)) return neighbors from collections import deque # BFS to check if there\'s a path from (1, 1) to (n, n) start = (1, 1) end = (n, n) queue = deque([start]) visited = set(start) if start in blocked_cells: return \\"Charley\\" while queue: x, y = queue.popleft() if (x, y) == end: return \\"Rosa\\" for nx, ny in get_neighbors(x, y, n): if (nx, ny) not in blocked_cells and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"Charley\\" # Example to run the function manually if __name__ == \\"__main__\\": n = 5 m = 3 blocked_cells = set([(1, 2), (2, 3), (4, 5)]) result = solve_chessboard(n, m, blocked_cells) print(result) # Output should be \\"Rosa\\""},{"question":"Mark and Eva are playing a coin collection game on a rectangular grid. The grid is represented by an `n x m` matrix where each cell either contains some coins or is empty. Each player takes turns moving a coin from one cell to an adjacent cell (vertically or horizontally) to collect the coins. However, there are some additional constraints: - A player can only move a coin from a cell if that cell holds coins. - Each move consists of moving exactly one coin. - A player can \\"pass\\" their turn if they cannot make a move. - The game ends when neither player can make a move. You are given the initial state of the grid. Determine the maximum number of coins either player can collect if they play optimally. # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. - The next `n` lines contain `m` integers each, representing the number of coins in each cell `grid[i][j]` (0 ≤ grid[i][j] ≤ 10^4) initially. # Output - Output a single integer — the maximum number of coins either player can collect if they play optimally. # Examples Example 1 ``` Input 3 3 1 0 0 0 2 0 3 0 1 Output 6 ``` Example 2 ``` Input 2 2 0 0 0 0 Output 0 ``` # Note In the first sample, the optimal sequence for maximized collection could be as follows: - Mark collects the coin from (2,0). - Eva collects two coins from (1,1). - Mark collects the coin from (2,2). - Eva collects no more coins (since (0,0) coin is already collected by Mark). - Mark collects no more coins either. Both players play optimally and collect all the coins on the grid, but the total count is the focus of the solution.","solution":"def max_coins(grid): Returns the maximum number of coins either player can collect if they play optimally. return sum(sum(row) for row in grid)"},{"question":"Eduardo loves mathematics and enjoys finding interesting properties of numbers. Recently, he came across the concept of \\"Happy Numbers\\". A number is called a Happy Number if, after repeatedly replacing it with the sum of the squares of its digits, it eventually becomes 1. If not, it is called an Unhappy Number. Your task is to help Eduardo by writing a function that determines if a given number is a Happy Number or not. Additionally, Eduardo wants to find the sequence of numbers generated during the process to verify the happiness of a number. -----Input----- The input consists of a single integer n (1 leq n leq 10^9), representing the number for which Eduardo wants to check the happiness and obtain the sequence. -----Output----- The output should print two lines. On the first line, print \\"Happy\\" if the number is a Happy Number; otherwise, print \\"Unhappy\\". On the second line, print the sequence of numbers generated during the process as a space-separated list. -----Examples----- Input 19 Output Happy 19 82 68 100 1 Input 4 Output Unhappy 4 16 37 58 89 145 42 20 4 -----Note----- In the first example, starting with 19, we get the following sequence before repeating 1: 1^2 + 9^2 = 1 + 81 = 82 8^2 + 2^2 = 64 + 4 = 68 6^2 + 8^2 = 36 + 64 = 100 1^2 + 0^2 + 0^2 = 1 Since the sequence ends in 1, 19 is a Happy Number. In the second example, starting with 4, we see that the sequence enters a loop without reaching 1. Hence, 4 is an Unhappy Number.","solution":"def is_happy_number(n): Determines if the given number is a Happy Number and returns the sequence. Args: n (int): The number to check. Returns: tuple: A tuple containing a string \\"Happy\\" or \\"Unhappy\\" and a list of numbers representing the sequence. def get_next_number(num): return sum(int(digit) ** 2 for digit in str(num)) seen_numbers = set() sequence = [] while n != 1 and n not in seen_numbers: seen_numbers.add(n) sequence.append(n) n = get_next_number(n) sequence.append(n) if n == 1: return \\"Happy\\", sequence else: return \\"Unhappy\\", sequence"},{"question":"Given a linked list of integers and a pivot value x, partition the linked list such that all nodes less than x come first, all nodes with value x come next, and all nodes greater than x come last. The relative order of nodes in each partition should be preserved. Example 1: Input: List: 1 -> 4 -> 3 -> 2 -> 5 -> 2 x = 3 Output: 1 -> 2 -> 2 -> 3 -> 4 -> 5 Explanation: Nodes with values less than 3 (1, 2, 2) come first, followed by nodes with value exactly 3, followed by nodes with values greater than 3 (4, 5). Example 2: Input: List: 6 -> 5 -> 2 -> 3 -> 4 x = 4 Output: 2 -> 3 -> 4 -> 6 -> 5 Explanation: Nodes with values less than 4 (2, 3) come first, followed by nodes with value exactly 4, followed by nodes with values greater than 4 (6, 5). Your Task: You don\'t need to read input or print anything. The task is to complete the function partition() which takes the head of the linked list and an integer x as input parameters and returns the head of the modified linked list. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= number of nodes <= 10^5 -10^5 <= node value <= 10^5 -10^5 <= x <= 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partition(head: ListNode, x: int) -> ListNode: Partitions the linked list around value x, such that all nodes less than x come first, followed by nodes with value x, followed by nodes greater than x. # Create dummy heads for three lists: less, equal, and greater less_head = ListNode(0) equal_head = ListNode(0) greater_head = ListNode(0) # Pointers to build the new lists less = less_head equal = equal_head greater = greater_head # Traverse the original list current = head while current: if current.val < x: less.next = current less = less.next elif current.val == x: equal.next = current equal = equal.next else: greater.next = current greater = greater.next current = current.next # Connect the three lists greater.next = None # Terminate the greater list equal.next = greater_head.next # Connect equal to greater list less.next = equal_head.next # Connect less to equal list return less_head.next # The head of the partitioned list"},{"question":"Garvita is working on a project that involves analyzing sequences of integers. She needs to check if a sequence is a \\"mirrored sequence.\\" A mirrored sequence is one where the first half of the sequence is the same as the reversed second half of the sequence. For example, [1, 2, 3, 2, 1] and [7, 8, 8, 7] are mirrored sequences. Your task is to help her by writing a function that determines if a given sequence is a mirrored sequence. Example 1: Input: N = 5 A[] = {1, 2, 3, 2, 1} Output: Yes Example 2: Input: N = 4 A[] = {7, 8, 8, 9} Output: No Your Task: You do not need to read input or print anything. Your task is to complete the function isMirroredSequence() which takes the array A[] and its size N as inputs and returns \\"Yes\\" if it is a mirrored sequence, otherwise return \\"No\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6 1 <= A[i] <= 10^6","solution":"def isMirroredSequence(N, A): Returns \\"Yes\\" if the sequence A of length N is a mirrored sequence, otherwise returns \\"No\\". # Calculate `mid` index mid = N // 2 # Compare the first half and the reversed second half of the sequence for i in range(mid): if A[i] != A[N - i - 1]: return \\"No\\" return \\"Yes\\""},{"question":"Given an array arr[] of integers and a positive integer k. The task is to find the k-th smallest element in the array using Quickselect algorithm. Example 1: Input: arr[] = [7, 10, 4, 3, 20, 15] k = 3 Output: 7 Example 2: Input: arr[] = [7, 10, 4, 3, 20, 15] k = 4 Output: 10 Your Task: You only need to implement the given function kthSmallest(). Do not read input, instead use the arguments given in the function. Expected Time Complexity: O(N) on average Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 1000 1 ≤ arr[i] ≤ 10000 1 ≤ k ≤ N","solution":"import random def partition(arr, low, high): pivot_index = random.randint(low, high) arr[pivot_index], arr[high] = arr[high], arr[pivot_index] pivot = arr[high] i = low - 1 for j in range(low, high): if arr[j] <= pivot: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return i + 1 def quickselect(arr, low, high, k): if low <= high: pi = partition(arr, low, high) if pi == k: return arr[pi] elif pi < k: return quickselect(arr, pi + 1, high, k) else: return quickselect(arr, low, pi - 1, k) return None def kthSmallest(arr, k): return quickselect(arr, 0, len(arr) - 1, k - 1)"},{"question":"Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Input: In this problem, the function takes one argument: the root of the binary tree. The function should not read any input from stdin/console. The struct Node has a data part that stores the data and two pointers which point to the left and right child of the binary tree respectively. There are multiple test cases. For each test case, this method will be called individually. Output: Return an integer which is the maximum depth of the binary tree. User Task: The task is to complete the function maxDepth() which should return the maximum depth of the binary tree. Constraints: 1<=T<=100 1<=number of nodes<=1000 Example: Input: 2 3 10 20 30 3 1 2 3 Output: 2 2 Explanation: Testcase 1: The longest path is either from root node 10 -> 20 or root node 10 -> 30; thus, the maximum depth is 2. Testcase 2: The tree has two levels; hence, the maximum depth is 2.","solution":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def maxDepth(root): Return the maximum depth of the binary tree. if root is None: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1"},{"question":"Given an array of integers representing the scores of students in a class, you are asked to calculate the following statistics: 1. **Top K scores**: Return the top K highest scores in descending order. 2. **Bottom K scores**: Return the bottom K lowest scores in ascending order. 3. **Average excluding top and bottom K**: Compute the average score of the remaining students after excluding the top K and bottom K scores. You need to implement a function `calculate_statistics(scores, K)` that takes two arguments: 1. A list of integers `scores` where each integer represents a student\'s score. 2. An integer `K` representing the number of top and bottom scores to exclude. The function should return a dictionary with three keys: - `\\"top_K\\"`: a list of the top K scores in descending order. - `\\"bottom_K\\"`: a list of the bottom K scores in ascending order. - `\\"average\\"`: a float representing the average score of the remaining students (rounded to two decimal places). **Constraints:** - 1 ≤ len(scores) ≤ 1000 - 0 ≤ scores[i] ≤ 100 - 1 ≤ K ≤ len(scores) // 2 **Examples:** ```python calculate_statistics([90, 70, 85, 65, 80, 95, 60, 100, 75], 2) # Output: { # \\"top_K\\": [100, 95], # \\"bottom_K\\": [60, 65], # \\"average\\": 80.0 # } calculate_statistics([50, 40, 55, 30, 60, 45, 35, 70, 65], 3) # Output: { # \\"top_K\\": [70, 65, 60], # \\"bottom_K\\": [30, 35, 40], # \\"average\\": 50.0 # } ``` **Notes:** - If K is such that excluding K top and K bottom scores leaves no remaining scores, the average should be 0.0. - Ensure to sort and handle the scores properly to get accurate results.","solution":"def calculate_statistics(scores, K): Calculate the top K scores, bottom K scores, and the average score excluding the top and bottom K scores. Parameters: scores (list of int): List of student scores. K (int): Number of top and bottom scores to exclude. Returns: dict: A dictionary with keys \\"top_K\\", \\"bottom_K\\", and \\"average\\". if len(scores) <= 2 * K: return {\\"top_K\\": [], \\"bottom_K\\": [], \\"average\\": 0.0} sorted_scores = sorted(scores) top_K = sorted_scores[-K:][::-1] bottom_K = sorted_scores[:K] remaining_scores = sorted_scores[K:-K] if remaining_scores: average = round(sum(remaining_scores) / len(remaining_scores), 2) else: average = 0.0 return {\\"top_K\\": top_K, \\"bottom_K\\": bottom_K, \\"average\\": average}"},{"question":"You are given two integers, A and B. Determine whether B is a multiple of A. -----Constraints----- - 1 leq A, B leq 10000 - A and B are integers. -----Input----- Input is given from Standard Input in the following format: A B -----Output----- If B is a multiple of A, print \\"Yes\\". Otherwise, print \\"No\\". -----Sample Input----- 3 9 -----Sample Output----- Yes In this example, 9 is a multiple of 3, so the output is \\"Yes\\".","solution":"def is_multiple(A, B): Determines whether B is a multiple of A. Args: A (int): The first integer. B (int): The second integer. Returns: str: \\"Yes\\" if B is a multiple of A, otherwise \\"No\\". if B % A == 0: return \\"Yes\\" return \\"No\\""},{"question":"Given an array A of N integers, find and return the maximum difference (A[j] - A[i]) where 0 ≤ i < j < N. However, the difference should be calculated only for pairs where A[j] > A[i]. ------ Input Format ------ - First line contains T, the number of test cases. - For each test case: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array A. ------ Output Format ------ For each test case, output a single integer - the maximum difference for the given array. If no such pair (i, j) exists, output -1. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 ----- Sample Input 1 ------ 2 5 1 2 90 10 110 4 15 12 10 5 ----- Sample Output 1 ------ 109 -1 ----- explanation 1 ------ Test Case 1: The maximum difference is obtained for the pair (1, 4), i.e., 110 - 1 = 109. Test Case 2: No valid pairs exist as no element ahead is greater than the previous one. Hence, the output is -1.","solution":"def find_max_difference(arr): Given an array `arr`, this function finds and returns the maximum difference (arr[j] - arr[i]) where 0 ≤ i < j < len(arr) and arr[j] > arr[i]. If no such pair exists, returns -1. n = len(arr) if n < 2: return -1 max_diff = -1 min_so_far = arr[0] for j in range(1, n): if arr[j] > min_so_far: max_diff = max(max_diff, arr[j] - min_so_far) min_so_far = min(min_so_far, arr[j]) return max_diff def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for arr in test_cases: results.append(find_max_difference(arr)) return results"},{"question":"Definition: A sequence S of length N is called a Peak Sequence if it satisfies the following criteria: - S[0] < S[1] < ... < S[k] > S[k+1] > ... > S[N-1] for some 0 < k < N-1. Given an integer array, your task is to determine if it can be rearranged to form a Peak Sequence. Input: First line contains T - number of test cases. Each of next T lines contains an integer N followed by an array of N integers. Output: Print \\"YES\\" if the array can be rearranged to form a Peak Sequence, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ array[i] ≤ 10000 SAMPLE INPUT 3 5 1 3 2 4 5 4 5 5 5 5 6 9 8 7 6 5 4 SAMPLE OUTPUT YES NO YES Explanation For the first test case, the array can be rearranged as [1, 2, 4, 5, 3] which forms a Peak Sequence. For the second test case, it is not possible to rearrange the array to form a Peak Sequence since all elements are equal. For the third test case, the array is already a Peak Sequence.","solution":"def can_form_peak_sequence(n, arr): This function checks if a given array can be rearranged to form a Peak Sequence. Parameters: n (int): Length of the array. arr (list of ints): The array of integers. Returns: str: \\"YES\\" if the array can be rearranged to form a Peak Sequence, otherwise \\"NO\\". if n < 3: return \\"NO\\" sorted_arr = sorted(arr) # Simple check if all elements are the same. if sorted_arr[0] == sorted_arr[-1]: return \\"NO\\" # The array can be rearranged to form a Peak Sequence if it contains distinct elements. return \\"YES\\" def process_input(input_lines): Processes multiple test cases and returns the output for each case. Parameters: input_lines (list of strs): List of input lines representing multiple test cases. Returns: list of strs: List of results for each test case (\\"YES\\" or \\"NO\\"). T = int(input_lines[0]) results = [] index = 1 for _ in range(T): line = list(map(int, input_lines[index].split())) n = line[0] arr = line[1:] result = can_form_peak_sequence(n, arr) results.append(result) index += 1 return results"},{"question":"Given an array of integers and a target sum, find the number of subsets that add up exactly to the target sum. Example 1: Input: arr = [2, 3, 5, 6, 8, 10], target = 10 Output: 3 Explanation: Subsets that sum up to 10 are: - [10] - [2, 8] - [3, 7] Example 2: Input: arr = [1, 2, 3, 4, 5], target = 5 Output: 3 Explanation: Subsets that sum up to 5 are: - [5] - [1, 4] - [2, 3] Your Task: You don’t need to read input or print anything. Complete the function countSubsets() which takes the array and target sum as input parameters returns the integer value. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ size of array ≤ 20 1 ≤ elements of array ≤ 100","solution":"def countSubsets(arr, target): Returns the number of subsets that add up exactly to the target sum. def countSubsetsRecursive(arr, n, target): # Base cases if target == 0: return 1 if n == 0: return 0 # If the last element is greater than target, it can\'t contribute to any subset if arr[n - 1] > target: return countSubsetsRecursive(arr, n - 1, target) # Otherwise, we count the subsets including the last element and excluding the last element return countSubsetsRecursive(arr, n - 1, target - arr[n - 1]) + countSubsetsRecursive(arr, n - 1, target) return countSubsetsRecursive(arr, len(arr), target)"},{"question":"Given an integer N, generate all possible binary strings of length N that do not contain consecutive 1s. Return these strings in sorted order. Example 1: Input: N = 2 Output: 00 01 10 Explanation: For N = 2, the strings that meet the requirement are \\"00\\", \\"01\\", and \\"10\\". Example 2: Input: N = 3 Output: 000 001 010 100 101 Explanation: For N = 3, the strings that meet the requirement are \\"000\\", \\"001\\", \\"010\\", \\"100\\", and \\"101\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function generateBinaryStrings() which takes an integer N as an input parameter and return the list of binary strings that do not contain consecutive 1s in sorted order. Expected Time Complexity: O(2^N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 20","solution":"def generateBinaryStrings(N): def isValidBinaryString(binary_string): return \'11\' not in binary_string def generateAllBinaryStrings(N): if N == 0: return [\'\'] if N == 1: return [\'0\', \'1\'] smaller = generateAllBinaryStrings(N - 1) result = [] for binary_str in smaller: result.append(binary_str + \'0\') if not binary_str.endswith(\'1\'): result.append(binary_str + \'1\') return sorted(result) return [bs for bs in generateAllBinaryStrings(N) if isValidBinaryString(bs)]"},{"question":"An online bookstore wants to offer its customers personalized book recommendations. Each book in their inventory is categorized by genre and has a user rating associated with it. The ratings are whole numbers between 1 and 5 (inclusive). The bookstore allows users to specify a genre and a minimum rating for personalized recommendations. To manage their inventory efficiently, the bookstore needs a system to quickly find all books that match the given genre and have a rating greater than or equal to the specified minimum rating. ------ Input ------ The first line contains an integer `n`, the number of books in the inventory. Each of the next `n` lines contains a string representing the genre of the book, followed by an integer representing its rating (space-separated). The next line contains an integer `q`, the number of queries. Each of the next `q` lines contains a string representing the genre and an integer representing the minimum rating (space-separated). ------ Output ------ For each query, output the count of books that match the specified genre and meet or exceed the specified minimum rating. If no books match, output 0. ------ Constraints ------ 1 ≤ n ≤ 10^5 1 ≤ q ≤ 10^4 Each genre string consists of lowercase letters and is at most 20 characters long. Each rating is an integer between 1 and 5 (inclusive). ------ Sample Input ------ 5 fiction 4 nonfiction 3 fiction 5 mystery 5 nonfiction 2 3 fiction 4 nonfiction 3 mystery 5 ------ Sample Output ------ 2 1 1","solution":"def book_recommendations(book_data, queries): Finds the count of books that match the specified genre and meet or exceed the specified minimum rating. :param book_data: List of tuples, each containing a genre and a rating. :param queries: List of tuples, each containing a genre and a minimum rating. :return: List of integers, each representing the count of matching books for the corresponding query. from collections import defaultdict # Creating a dictionary to store books as lists based on their genre genre_dict = defaultdict(list) for genre, rating in book_data: genre_dict[genre].append(rating) # Sorting the ratings for each genre for genre in genre_dict: genre_dict[genre].sort() result = [] for query_genre, min_rating in queries: if query_genre not in genre_dict: result.append(0) else: ratings = genre_dict[query_genre] # Binary search to find the first rating >= min_rating left, right = 0, len(ratings) while left < right: mid = (left + right) // 2 if ratings[mid] >= min_rating: right = mid else: left = mid + 1 result.append(len(ratings) - left) return result # Helper function to convert input into usable formats def to_data_and_queries(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) book_data = [tuple(line.split()) for line in input_lines[1:n+1]] book_data = [(genre, int(rating)) for genre, rating in book_data] q = int(input_lines[n+1]) queries = [tuple(line.split()) for line in input_lines[n+2:n+2+q]] queries = [(genre, int(min_rating)) for genre, min_rating in queries] return book_data, queries"},{"question":"In a particular city, a new banking system has been introduced where each transaction between two people can be either a payment or a receipt. Each person in the city can have multiple transactions with different people, but never with themselves. Given this information, you need to determine the net balance of each person after all transactions. Net balance is defined as the difference between the total amount of money received and the total amount of money paid by a person. -----Input----- The first line of the input contains two integers n and m (1 le n le 1000, 1 le m le 10000) — the number of people and the number of transactions respectively. Each of the next m lines describes a transaction and contains three integers u, v, and w (1 le u, v le n, 1 le w le 1000000), where u is the person making the payment, v is the person receiving the payment, and w is the amount of money involved in the transaction. -----Output----- Print n integers, where the i-th integer is the net balance of person i after all transactions. A positive balance means a net receipt, a negative balance means a net payment, and a balance of zero means no net gain or loss. -----Examples----- Input 4 3 1 2 10 2 3 5 3 4 2 Output -10 5 3 2 Input 3 2 1 2 7 1 3 3 Output -10 7 3 -----Note----- In the first example test case: - Person 1 pays 10 to person 2. - Person 2 pays 5 to person 3. - Person 3 pays 2 to person 4. The net balances are: - Person 1: -10 (paid 10 and received 0) - Person 2: 5 (received 10 and paid 5) - Person 3: 3 (received 5 and paid 2) - Person 4: 2 (received 2 and paid 0) In the second example test case: - Person 1 pays 7 to person 2. - Person 1 pays 3 to person 3. The net balances are: - Person 1: -10 (paid 10 and received 0) - Person 2: 7 (received 7 and paid 0) - Person 3: 3 (received 3 and paid 0)","solution":"def compute_net_balances(n, m, transactions): balances = [0] * n for u, v, w in transactions: balances[u - 1] -= w balances[v - 1] += w return balances"},{"question":"A robot is designed to navigate a grid-based warehouse, starting at the top-left corner (position (1,1)) and needs to reach the bottom-right corner (position (n,m)). The robot can move in four possible directions: up, down, left, and right. However, some cells in the grid are marked as obstacles that the robot cannot enter. You are to determine if there is a path for the robot to reach the goal. ------Input------ The input consists of: - The first line contains two integers n and m (1 leq n, m leq 1000), the dimensions of the grid. - The next n lines each contain m characters, each either # (representing an obstacle) or . (representing an empty cell). ------Output------ Output \\"YES\\" if there is a path for the robot to reach the bottom-right corner, otherwise output \\"NO\\". ------Examples------ Sample Input: 4 4 . . . # . # . . . # # . . . . . Sample Output: YES Sample Input: 4 4 . # # # # # # . # # # # . . . # Sample Output: NO","solution":"def can_reach_goal(n, m, grid): from collections import deque start = (0, 0) goal = (n-1, m-1) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" queue = deque([start]) visited = set([start]) while queue: current = queue.popleft() if current == goal: return \\"YES\\" for d in directions: next_cell = (current[0] + d[0], current[1] + d[1]) if 0 <= next_cell[0] < n and 0 <= next_cell[1] < m and next_cell not in visited and grid[next_cell[0]][next_cell[1]] == \'.\': visited.add(next_cell) queue.append(next_cell) return \\"NO\\" # Function to convert input into the required format and execute the algorithm def can_robot_navigate(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [line.split() for line in lines[1:]] return can_reach_goal(n, m, grid)"},{"question":"In a large e-commerce company, there is a need to manage transactions made by customers. Each transaction consists of two values: the transaction amount and a unique customer ID. For ease of analysis, you are tasked with implementing a system that can quickly find the top k customers with the highest total transaction amounts over a series of transactions. ------ Input ------ The first line of the input contains an integer Q (the number of queries) where 1 ≤ Q ≤ 100,000. Each of the next Q lines contains a single query in one of the following formats: 1. \\"T X C\\" indicating a transaction where C is a positive integer customer ID and X is a positive integer transaction amount (1 ≤ X ≤ 1000, 1 ≤ C ≤ 1,000,000). 2. \\"Q L\\" indicating a query where L is a positive integer specifying the number of top customers to list by their total transaction amount (1 ≤ L ≤ 100). ------ Output ------ For each query of the form \\"Q L\\", output L space-separated integers: the unique IDs of the top L customers with the highest total transaction amounts. The customer IDs should be listed in descending order of their total transaction amounts. If there is a tie, list the IDs in ascending order. If there are fewer than L customers who have made transactions, output all of their IDs. ----- Sample Input 1 ------ 7 T 500 1 T 300 2 T 200 1 Q 2 T 400 3 Q 1 Q 3 ----- Sample Output 1 ------ 1 2 1 1 2 3 ----- Explanation 1 ------ After the first three transactions, customer 1 has a total of 700, customer 2 has 300, and customer 3 has not made any transaction. 1. Query \\"Q 2\\": Customer IDs 1 and 2 have the highest total transaction amounts: 700 and 300, respectively. 2. After the additional transaction of 400 by customer 3, the total transaction amounts are: customer 1 with 700, customer 2 with 300, and customer 3 with 400. 3. Query \\"Q 1\\": Customer 1 has the highest total transaction amount of 700. 4. Query \\"Q 3\\": The customers listed by their total transaction amounts are 1 (700), 3 (400), and 2 (300).","solution":"from collections import defaultdict import heapq class TransactionManager: def __init__(self): self.transactions = defaultdict(int) def add_transaction(self, amount, customer_id): self.transactions[customer_id] += amount def top_customers(self, k): if not self.transactions: return [] # Building a max-heap sorted by the total amount, then by customer_id max_heap = [(-total, customer_id) for customer_id, total in self.transactions.items()] heapq.heapify(max_heap) top_k = [] for _ in range(min(k, len(max_heap))): total, customer_id = heapq.heappop(max_heap) top_k.append(customer_id) return top_k def process_queries(queries): transaction_manager = TransactionManager() results = [] for query in queries: parts = query.split() if parts[0] == \'T\': amount, customer_id = int(parts[1]), int(parts[2]) transaction_manager.add_transaction(amount, customer_id) elif parts[0] == \'Q\': k = int(parts[1]) results.append(transaction_manager.top_customers(k)) return results"},{"question":"Given an integer array nums of size n, and an integer k, find a contiguous subarray whose length is equal to k that has the highest average value and return this value. Any integer value in the array can be between -10^4 to 10^4. Example 1: Input: nums = [1, 12, -5, -6, 50, 3] k = 4 Output: 12.75 Explanation: The subarray [-5, -6, 50, 3] has the highest average value. Example 2: Input: nums = [5, 5, 5, 5, 5] k = 3 Output: 5.0 Your Task: You don\'t need to read input or print anything. Your task is to complete the function findMaxAverage() which takes an array nums and an integer k as parameters and returns a float denoting the highest average value of a k-length subarray. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5 1 <= k <= n -10^4 <= nums[i] <= 10^4","solution":"def findMaxAverage(nums, k): Finds the maximum average subarray of length k and returns the average value. Args: nums: List[int] - the array of integers k: int - the length of the subarray to consider Returns: float - the highest average value of any k-length subarray # Initial sum of first k elements max_sum = current_sum = sum(nums[:k]) # Iterate over the array starting from the k-th element for i in range(k, len(nums)): current_sum += nums[i] - nums[i - k] max_sum = max(max_sum, current_sum) # The highest average value return max_sum / k"},{"question":"Your friend loves gardening and has recently started growing various plants in his garden. To help him manage his garden, you want to write a program that tracks the height of each plant over several months. Every month, each plant grows a certain amount in height. Given the initial height of each plant and its monthly growth rate, you need to determine the final height of each plant after a specified number of months. -----Input----- The first line of input contains the integer N (1 leq N leq 100), the number of plants in the garden. The second line of input contains the integer M (1 leq M leq 100), the number of months. The next N lines each contain two integers H_i (1 leq H_i leq 1000) and G_i (1 leq G_i leq 100), where H_i is the initial height of the i^{th} plant and G_i is the growth rate of the i^{th} plant per month. -----Output----- The output should contain N lines, where each line contains the final height of one plant after M months. -----Examples----- Sample Input 1: 3 2 10 5 15 3 20 2 Sample Output 1: 20 21 24 Sample Input 2: 2 3 30 4 50 1 Sample Output 2: 42 53","solution":"def final_height_of_plants(N, M, plants): Returns the final height of each plant after M months. :param N: Number of plants in the garden :param M: Number of months :param plants: List of tuples where each tuple contains the initial height (H) and growth rate (G) of a plant :return: List of final heights of each plant after M months final_heights = [] for H, G in plants: final_height = H + M * G final_heights.append(final_height) return final_heights # Function to read input and produce output as mentioned in the problem statement def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) plants = [(int(data[2 + i * 2]), int(data[3 + i * 2])) for i in range(N)] results = final_height_of_plants(N, M, plants) for result in results: print(result)"},{"question":"A group of friends have planned a game night where they will play several rounds of a card game. Each round of the game requires exactly two players, and they have n players available. In each round: the winning player will move to the next round and the losing player will be eliminated. The game continues until only one player remains, who is declared the champion. Each round requires k cards, which are distributed equally between the two players participating. Additionally, each player needs one token for each round they participate in, including the final round. Calculate the total number of cards and the total number of tokens needed for the entire game night. -----Input----- The only line contains two integers n and k (2 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the initial number of players and the number of cards used in each round. -----Output----- Print two integers a and b — the total number of cards and tokens needed for the game night. -----Examples----- Input 4 3 Output 9 7 Input 6 5 Output 25 11 -----Note----- In the first example, there will be three rounds: - In the first round, 2 matches take place, using a total of 2 * 3 cards. - In the second round, 1 match takes place, using 1 * 3 cards. - In the third round, 1 match takes place, using 1 * 3 cards. So, the total number of cards used is 9. For tokens: - In the first round, 4 players each need 1 token (4 tokens in total). - In the second round, the 2 remaining players each need another token (2 tokens in total). - In the final round, 1 remaining player needs 1 token. Thus, the total number of tokens used is 7. In the second example: - 5 matches will happen, each requiring 5 cards, making a total of 25 cards. - Each player (6 in total) participates in at least one round, and as they advance through the rounds to the final, the token count sums up to 11.","solution":"def calculate_game_resources(n, k): Calculates the total number of cards and tokens needed for the entire game night. Parameters: n (int): The initial number of players. k (int): The number of cards used in each round. Returns: tuple: Total number of cards and total number of tokens needed (total_cards, total_tokens) total_matches = n - 1 total_cards = total_matches * k total_tokens = n + total_matches return total_cards, total_tokens"},{"question":"You are given a sequence of weights and a balance scale. The balance scale has two sides, where each weight can only be placed on one of the two sides. Your task is to determine if it is possible to balance the scale perfectly, meaning the total weight on one side of the scale equals the total weight on the other side. Constraints * Each weight is a positive integer. * You may assume there are at most 20 weights in the sequence. Input The input file contains multiple test cases. Each test case start with an integer N (1 ≤ N ≤ 20), indicating the number of weights. This is followed by a line containing N integers, representing the weights. The end of input is denoted by a case where N = 0. You should output nothing for this case. Output For each test case, output \\"YES\\" if it\'s possible to balance the scale perfectly, otherwise output \\"NO\\". Example Input 3 1 2 3 4 2 2 2 2 2 10 5 0 Output YES YES NO Explanation In the first test case, the weights can be divided as (1, 2) and (3) to balance each side. In the second case, both sides can have weights (2, 2) or (2, 2) which balances the scale perfectly. In the third case, there is no way to balance the scale because one side will always be heavier. Good luck!","solution":"def can_balance(weights): Returns \\"YES\\" if the weights can be perfectly balanced on a scale, \\"NO\\" otherwise. total_weight = sum(weights) if total_weight % 2 != 0: return \\"NO\\" target_weight = total_weight // 2 n = len(weights) # Use dynamic programming to check if there\'s a subset with sum equal to target_weight dp = [False] * (target_weight + 1) dp[0] = True for weight in weights: for j in range(target_weight, weight - 1, -1): dp[j] = dp[j] or dp[j - weight] return \\"YES\\" if dp[target_weight] else \\"NO\\" def process_input(input_data): input_lines = input_data.strip().split(\'n\') results = [] i = 0 while i < len(input_lines): N = int(input_lines[i]) if N == 0: break weights = list(map(int, input_lines[i + 1].split())) i += 2 results.append(can_balance(weights)) return results # Example usage def main(): import sys input_data = sys.stdin.read() results = process_input(input_data) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Battleship Game In the classic Battleship game, two players place ships on an NxM grid and take turns guessing the coordinates of the other player\'s ships. Your task is to write a program that determines the number of valid guesses (hits on ships) given the positions of the ships and the player\'s guesses. A ship can be placed either horizontally or vertically on the grid, and a ship\'s location is defined by a series of continuous cells in either direction. Each player\'s attempt to guess the location of a ship is recorded, and the result is either a hit (H) or a miss (M). You need to find the total number of hits for a given set of guesses. # Input - The first line contains two integers, N and M, representing the dimensions of the grid (1 ≤ N, M ≤ 1000). - The second line contains an integer K, representing the number of ships on the grid (1 ≤ K ≤ 100). - The following K lines contain four integers r1, c1, r2, c2, defining the start and end coordinates of each ship (1 ≤ r1, r2 ≤ N, 1 ≤ c1, c2 ≤ M). - The next line contains an integer G, representing the number of guesses (1 ≤ G ≤ 10000). - The following G lines contain two integers r, c, representing the guessed coordinates (1 ≤ r ≤ N, 1 ≤ c ≤ M). # Output - Output a single integer, the number of hits. # Example Input 8 8 3 1 2 1 4 2 3 2 5 4 5 6 5 5 1 2 2 4 4 5 4 6 1 3 Output 4 # Explanation There are three ships at positions (1,2) to (1,4), (2,3) to (2,5), and (4,5) to (6,5). Out of the five guesses, coordinates (1,2), (2,4), (4,5), and (1,3) hit the ships, hence the total number of hits is 4. # Notes - Each ship occupies multiple cells, and each guess can either be a hit or a miss. - The coordinates are 1-based, meaning that (1, 1) refers to the top-left cell of the grid. - The positions of ships and guesses are guaranteed to be within the grid boundaries.","solution":"def count_hits(N, M, ship_positions, guesses): Count the number of hits on ships given the ship positions and guesses. Parameters: N (int): Number of rows of the grid. M (int): Number of columns of the grid. ship_positions (list of tuples): Starting and ending coordinates of ships. guesses (list of tuples): Coordinates of the guesses. Returns: int: Number of hits. # Create a set to store the coordinates of all ship cells ship_cells = set() # Convert ship positions to individual cells and add to ship_cells set for r1, c1, r2, c2 in ship_positions: if r1 == r2: # Horizontal ship for c in range(c1, c2 + 1): ship_cells.add((r1, c)) else: # Vertical ship for r in range(r1, r2 + 1): ship_cells.add((r, c1)) # Count hits from the guesses hits = 0 for r, c in guesses: if (r, c) in ship_cells: hits += 1 return hits"},{"question":"Alex is working on a large project management system. He needs to create a utility to monitor the progress of various tasks. Each task has a unique identifier and a dependency list, which specifies which other tasks must be completed before the current task can begin. Alex wants to determine the order in which the tasks can be completed. Let\'s consider the tasks as nodes in a directed graph, where an edge from node A to node B indicates that task A must be completed before task B. The system must ensure that there are no cyclic dependencies and output at least one valid topological ordering. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of tasks. Each of the next n lines describes a task. Each line starts with an integer id_i (1 ≤ id_i ≤ n) — the identifier of the task, and is followed by an integer m_i (0 ≤ m_i < n), the number of tasks that the i-th task depends on. This number is followed by m_i integers representing the ids of these dependencies. Output Output any valid topological ordering of the tasks. If no valid ordering exists, output \\"IMPOSSIBLE\\". Examples Input 4 1 1 2 2 0 3 1 2 4 1 3 Output 2 3 1 4 Input 3 1 2 2 3 2 1 3 3 1 1 Output IMPOSSIBLE Note In the first sample, task 2 must be completed before tasks 1 and 3. Task 3 must be completed before task 4. A valid order of completion is 2, 3, 1, 4. In the second sample, there is a cyclic dependency between tasks 1, 2, and 3, so it is impossible to complete all tasks.","solution":"from collections import defaultdict, deque def find_task_order(num_tasks, task_dependencies): Determine the order of tasks based on their dependencies. :param num_tasks: Integer, number of tasks. :param task_dependencies: List of tuples, each containing task id and the list of its dependencies. :return: List of tasks in possible order, or \\"IMPOSSIBLE\\" if no valid ordering exists. graph = defaultdict(list) in_degree = {i: 0 for i in range(1, num_tasks + 1)} # Build the graph and in-degree count for task_id, dependencies in task_dependencies: for dep in dependencies: graph[dep].append(task_id) in_degree[task_id] += 1 # Find all nodes with zero in-degree zero_in_degree = deque([node for node in in_degree if in_degree[node] == 0]) topological_order = [] while zero_in_degree: current = zero_in_degree.popleft() topological_order.append(current) # Decrease the in-degree of each neighbor for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) if len(topological_order) == num_tasks: return topological_order else: return \\"IMPOSSIBLE\\""},{"question":"You are a software engineer at a logistics company responsible for optimizing the packaging of products into shipping containers. Your task is to develop an algorithm that determines the most efficient way to pack a set of rectangular products into a shipping container without overlapping. Given the dimensions of a shipping container and the dimensions of a set of rectangular products, determine if it is possible to fit all products into the container. Products can be rotated by 90 degrees if necessary, but they cannot overlap or extend outside the container\'s dimensions. -----Input----- - The first line contains two integers, 1 le C_l, C_w le 1000, representing the length and width of the shipping container. - The second line contains an integer 1 le n le 100, representing the number of products. - The next n lines each contain two integers, 1 le P_{li}, P_{wi} le 100, representing the length and width of each product. -----Output----- - Output a single line containing YES if all products can be packed into the container without overlapping, and NO otherwise. -----Examples----- Sample Input 1: 10 10 3 4 6 5 5 3 3 Sample Output 1: YES Sample Input 2: 8 8 2 7 4 5 5 Sample Output 2: NO Note: - All products can be rotated 90 degrees to fit them better into the container. - You need to implement an algorithm to check all possible placements and rotations of products in the container to ensure there is no overlap.","solution":"def can_pack_all_products(C_l, C_w, product_dimensions): product_dimensions.sort(key=lambda x: max(x), reverse=True) positions = [] def is_overlap(rec1, rec2): if (rec1[0] >= rec2[0] + rec2[2] or rec2[0] >= rec1[0] + rec1[2] or rec1[1] >= rec2[1] + rec2[3] or rec2[1] >= rec1[1] + rec1[3]): return False return True def can_place(position, dimensions): l, w = dimensions if position[0] + l > C_l or position[1] + w > C_w: return False for pos in positions: if is_overlap(pos, (position[0], position[1], l, w)): return False return True def backtracking(index): if index == len(product_dimensions): return True l, w = product_dimensions[index] for x in range(C_l): for y in range(C_w): if can_place((x, y), (l, w)): positions.append((x, y, l, w)) if backtracking(index + 1): return True positions.pop() if can_place((x, y), (w, l)): positions.append((x, y, w, l)) if backtracking(index + 1): return True positions.pop() return False if backtracking(0): return \\"YES\\" else: return \\"NO\\" # read and prepare input def main(): import sys input = sys.stdin.read data = input().split() C_l, C_w = int(data[0]), int(data[1]) n = int(data[2]) product_dimensions = [] for i in range(n): P_l, P_w = int(data[3 + 2*i]), int(data[4 + 2*i]) product_dimensions.append((P_l, P_w)) print(can_pack_all_products(C_l, C_w, product_dimensions)) # if this script is run directly, we will call the `main` function. if __name__ == \\"__main__\\": main()"},{"question":"Create a function that takes a list of integers and returns a new list where each integer is replaced with the product of every other integer in the original list. It should be done without using division. -----Input:----- - A single argument: a list of integers texttt{nums}[ ] of length n. -----Output:----- - A list of integers texttt{result}[ ] such that each texttt{result}[i] is equal to the product of all elements of texttt{nums} except texttt{nums}[i]. -----Constraints----- - 2 le n le 10^5 - -100 le texttt{nums}[i] le 100 - The product of any subset of the list will fit in a 32-bit integer. -----Sample Input:----- [1, 2, 3, 4] -----Sample Output:----- [24, 12, 8, 6] -----Explanation:----- - For texttt{nums}[0] = 1, the product is 2 * 3 * 4 = 24 - For texttt{nums}[1] = 2, the product is 1 * 3 * 4 = 12 - For texttt{nums}[2] = 3, the product is 1 * 2 * 4 = 8 - For texttt{nums}[3] = 4, the product is 1 * 2 * 3 = 6","solution":"def product_of_others(nums): Returns a list where each element is the product of all other elements except itself. n = len(nums) if n == 0: return [] # Initialize the result list with 1s result = [1] * n # Multiply elements from the left left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Multiply elements from the right right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Given a list of N integers, the task is to find the maximum sum of a sublist, where the sublist contains at least one element. Example 1: Input: N = 5 list = {-2, 1, -3, 4, -1, 2, 1, -5, 4} Output: 6 Explanation: The sublist [4, -1, 2, 1] has the maximum sum 6. Your Task: Your task is to complete the function maxSublistSum() which should find the maximum sum of a sublist and return it.","solution":"def maxSublistSum(arr): Returns the maximum sum of any non-empty sublist of the given list of integers. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Write a function that determines whether an input string is a valid IPv4 address. An IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (e.g., `192.168.0.1`). -----Input:----- - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains one string representing an IPv4 address. -----Output:----- For each test case, output \\"Valid\\" if the given string is a valid IPv4 address, otherwise output \\"Invalid\\". -----Constraints----- - 1 leq T leq 100000 - Each input string will have a length of at most 15 characters. -----Sample Input:----- 3 192.168.0.1 255.255.255.255 256.100.100.100 -----Sample Output:----- Valid Valid Invalid","solution":"def valid_ipv4_address(ip): Determines whether an input string is a valid IPv4 address. parts = ip.split(\\".\\") if len(parts) != 4: return \\"Invalid\\" for part in parts: if not part.isdigit() or not 0 <= int(part) <= 255: return \\"Invalid\\" return \\"Valid\\" def process_ip_addresses(T, ip_list): Processes a list of IP addresses. T: int : Number of test cases ip_list: list of str : List of IP addresses results = [] for ip in ip_list: results.append(valid_ipv4_address(ip)) return results"},{"question":"Write a function to determine the number of balanced binary trees with height `h`. A balanced binary tree is defined as follows: - A tree is balanced if the heights of its two subtrees differ by at most 1. - An empty tree is considered balanced and has height `-1`. # Constraints - 1 ≤ h ≤ 25 # Input Input is given from Standard Input in the following format: ``` h ``` # Output Print a single integer, representing the number of balanced binary trees with height `h`. # Example Input ``` 3 ``` # Example Output ``` 15 ``` # Explanation - For height `h = 3`, there are 15 different balanced binary trees. # Note To solve this problem, you might find it useful to remember that the number of balanced binary trees with height `h` can be derived from the number of balanced binary trees with heights `h-1` and `h-2`, using the following relation: BalancedBT(h) = BalancedBT(h-1) * BalancedBT(h-1) + 2 * BalancedBT(h-1) * BalancedBT(h-2) Use this to precompute the number of balanced binary trees for heights from 0 up to `h` efficiently.","solution":"def count_balanced_bst(h): if h == -1: return 1 if h == 0: return 1 dp = [0] * (h + 1) dp[0] = 1 dp[1] = 1 for i in range(2, h + 1): dp[i] = dp[i - 1] * dp[i - 1] + 2 * dp[i - 1] * dp[i - 2] return dp[h]"},{"question":"A supply chain company is responsible for managing the distribution of products between warehouses and stores. The products are moved through a network of nodes, where each node represents either a warehouse or a store, and the edges represent transportation paths with associated costs. Given a network of nodes represented by a graph, where nodes are numbered from 1 to N and edges between the nodes have a transportation cost, the company wants to optimize the transportation of products by determining the minimum transportation cost needed to transfer products between any two nodes in the network. You are to create a program that, given the network\'s structure and multiple queries, each querying the minimum transportation cost between two nodes, will determine the answers efficiently. Input The input is structured as follows: N M Q u_1 v_1 w_1 u_2 v_2 w_2 :: u_M v_M w_M q_1 r_1 q_2 r_2 :: q_Q r_Q Where: - The first line contains three integers N (2 leq N leq 10^5), the number of nodes, M (1 leq M leq 200,000), the number of edges, and Q (1 leq Q leq 100,000), the number of queries. - The following M lines each contain three integers u_i, v_i, and w_i (1 leq u_i, v_i leq N, 1 leq w_i leq 1000) representing an edge between node u_i and node v_i with transportation cost w_i. - The following Q lines each contain two integers q_i and r_i (1 leq q_i, r_i leq N) representing a query to find the minimum transportation cost from node q_i to node r_i. Output For each query, output the minimum transportation cost between the two nodes on a new line. If there is no path between the nodes, output -1. Example Input 5 5 3 1 2 2 2 3 4 2 4 7 3 4 1 4 5 3 1 5 2 3 1 3 Output 10 4 6","solution":"import heapq def dijkstra(graph, start, n): Runs Dijkstra\'s algorithm to find the shortest paths from \'start\' to all other nodes. distances = [float(\'inf\')] * (n + 1) distances[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances def solve_min_transportation_costs(N, M, Q, edges, queries): Solves the problem of finding minimum transportation costs between queried nodes. # Build the graph graph = [[] for _ in range(N + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Apply Dijkstra\'s algorithm from each queried node pair results = [] for q, r in queries: distances = dijkstra(graph, q, N) if distances[r] == float(\'inf\'): results.append(-1) else: results.append(distances[r]) return results # Example usage: N = 5 M = 5 Q = 3 edges = [(1, 2, 2), (2, 3, 4), (2, 4, 7), (3, 4, 1), (4, 5, 3)] queries = [(1, 5), (2, 3), (1, 3)] print(solve_min_transportation_costs(N, M, Q, edges, queries)) # Expected output: [10, 4, 6]"},{"question":"We need a function that receives a string containing an arithmetic expression involving addition (+), subtraction (-), multiplication (*), and division (/). The function evaluates the expression and returns the result as a float. The arithmetic expression will not contain any parentheses and will adhere to the standard operator precedence rules (i.e., multiplication and division have a higher precedence than addition and subtraction). The function `evaluate_expression(expression: str) -> float` will take the following input: - `expression` (str): A string containing a valid arithmetic expression composed of non-negative integers, the operators (+, -, *, /), and potentially spaces between the operators and numbers. The expression will be syntactically correct. The function should output the result of the evaluated expression as a float. # Examples: ```python evaluate_expression(\\"3 + 5 * 2\\") -> 13.0 evaluate_expression(\\"10 + 2 * 6 / 3 - 4\\") -> 10.0 evaluate_expression(\\"12 + 3 / 2 * 2 - 2 * 4\\") -> 7.0 evaluate_expression(\\" 5 + 4 / 2 \\") -> 7.0 ``` # Considerations: - The input string will always be a valid arithmetic expression. - Only non-negative integers will be used in the expression. - The operators will follow the standard precedence rules, and division will be floating point. - Spaces may or may not be present between operators and numbers. # Constraints: - The length of the input string will be between 1 and 100 characters inclusive. - Division by zero will not occur in the input expressions.","solution":"def evaluate_expression(expression: str) -> float: Evaluates an arithmetic expression involving addition (+), subtraction (-), multiplication (*), and division (/), respecting the standard operator precedence and returns the result as a float. import re # Remove spaces expression = expression.replace(\' \', \'\') # Define helper function for basic arithmetic operations def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left / right) # Define operator precedence precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} operators = [] values = [] i = 0 while i < len(expression): if expression[i].isdigit(): # Extract the number num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 values.append(float(num)) # Decrement i because it will be incremented in the next iteration of the loop i -= 1 elif expression[i] in precedence: while (operators and operators[-1] in precedence and precedence[operators[-1]] >= precedence[expression[i]]): apply_operator(operators, values) operators.append(expression[i]) i += 1 # Apply the remaining operators to the remaining values while operators: apply_operator(operators, values) return values[0]"},{"question":"Given an integer array, you can perform the following operation any number of times: choose a consecutive subarray that sums up to a non-zero even number and delete it. The goal is to minimize the length of the array using the above operation. Write a function that determines the minimum possible length of the array. Function Signature: ```python def min_length_after_operations(arr: List[int]) -> int: ``` # Input: - An integer array `arr` of length `n` (1 ≤ n ≤ 300,000). The elements of the array are integers and may be negative. # Output: - Return a single integer, the minimum possible length of the array after performing the operation any number of times. # Examples: ```python # Example 1 print(min_length_after_operations([1, 2, 3, 4, 5])) # Output: 1 # Explanation: The array can be reduced to length 1 by removing [2, 3] (sum is 5, non-zero odd) and then the subarray [4, 1] (sum is 5, non-zero odd), leaving [5]. # Example 2 print(min_length_after_operations([2, 4, -6, 8])) # Output: 2 # Explanation: The array can be reduced to length 2 by removing subarray [2, 4, -6] (sum is 0, zero), leaving [8]. # Example 3 print(min_length_after_operations([0, 0, 0])) # Output: 3 # Explanation: The array remains [0, 0, 0] since all elements sum up to zero, and zero is not allowed as per the condition. # Example 4 print(min_length_after_operations([-2, 1, -1, 2, -3, 3])) # Output: 0 # Explanation: The entire array can be removed step by step: [-2, 1, -1, 2] (sum is 0, zero) and then [-3, 3] (sum is 0, zero). ``` # Constraints: - Consider the efficiency of your solution as it must handle arrays with up to 300,000 elements. - Think about edge cases such as arrays with all zeroes, single elements, and a mix of positive and negative numbers.","solution":"from typing import List def min_length_after_operations(arr: List[int]) -> int: Function to determine the minimum possible length of the array after removing consecutive subarrays that sum up to a non-zero even number. n = len(arr) for i in range(n): # Step 1: Find any non-zero even number if arr[i] % 2 == 0 and arr[i] != 0: # Step 2: return 1 if any non-zero even number is found return 1 # Return original length if no non-zero even sum can be formed return n"},{"question":"You are given an array of integers, and you must check if there exists a subsequence such that the subsequence is a permutation of a palindrome. A palindrome is a string that reads the same forward and backward, and a permutation of a palindrome is a re-arrangement of letters to form a palindrome. For example, the string \\"civic\\" is a palindrome and \\"civci\\" is a permutation of \\"civic\\". -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N representing the size of the array. - The second line of each test case contains N space-separated integers representing the elements of the array. -----Output----- For each test case, output \\"YES\\" if there is a subsequence of the array that is a permutation of a palindrome, otherwise output \\"NO\\". -----Constraints----- - 1 le T le 1000 - 1 le N le 100 - 1 le text{Array elements} le 1000 -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 2 3 1 2 2 4 1 2 2 3 -----Example Output----- YES NO -----Note----- For the first test case, the subsequence \\"2 2\\" can form a palindrome. For the second test case, there is no subsequence that can form a permutation of a palindrome.","solution":"def is_permutation_of_palindrome(arr): Checks if any subsequence of the array can be rearranged to form a palindrome. from collections import Counter # Count frequencies of each number freq = Counter(arr) # Count how many numbers have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 == 1) # For a sequence to be able to form a palindrome, # there must at most one number with an odd frequency return odd_count <= 1 def check_permutation_of_palindrome(test_cases): Takes in a list of test cases and returns whether each test case contains a subsequence that is a permutation of a palindrome. results = [] for n, arr in test_cases: if is_permutation_of_palindrome(arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def solve(input_data): lines = input_data.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return \\"n\\".join(check_permutation_of_palindrome(test_cases))"},{"question":"Given two arrays arr1 and arr2 of size N each, the task is to complete the function findIntersection() which returns an array containing the intersection of the two arrays (common elements between the two arrays). The output array should be sorted in ascending order and should not contain any duplicate elements. Input: The first line of input contains an integer T, denoting the number of test cases. Then T test cases follow. Each test case contains three lines. The first line contains the integer N, the size of the arrays. The second and third lines contain N space-separated integers representing arr1 and arr2 respectively. Output: For each test case in a new line, output a space-separated list of integers representing the intersection of the two arrays. User Task: Since this is a functional problem you don\'t have to worry about input, you just have to complete the function findIntersection(). Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ arr1[i], arr2[i] ≤ 10000 Example(To be used only for expected output): Input: 2 5 1 2 3 4 5 4 3 2 1 0 4 10 20 10 40 30 50 10 20 Output: 1 2 3 4 10 20 Explanation: Testcase 1: For the given arrays \\"1 2 3 4 5\\" and \\"4 3 2 1 0\\", the intersection is \\"1 2 3 4\\" after sorting and removing duplicates. Testcase 2: For the given arrays \\"10 20 10 40\\" and \\"30 50 10 20\\", the intersection is \\"10 20\\" after sorting and removing duplicates.","solution":"def findIntersection(arr1, arr2): Given two arrays, returns a sorted list of their intersection without duplicates. # Convert the lists to sets to find the intersection set1 = set(arr1) set2 = set(arr2) intersection = set1.intersection(set2) # Return the sorted list of the intersection return sorted(list(intersection))"},{"question":"Alan is a librarian and he wants to arrange books in such a way that the library looks organized and it is easy to find books. Each book has a title and an identifier which is an integer. He wants to arrange the books in ascending order based on their identifiers. If two books have the same identifier, they should retain their original order (i.e., they are stable sorted). Write a program to help Alan with the task. ------ Input Format ------ - The first line contains a single integer N — the number of books. - The next N lines contain a pair of input each. Each line contains an integer Ai which is the identifier of the book and a string Bi which is the title of the book. ------ Output Format ------ - Output N lines. Each line should contain the identifier followed by the title of the book in the sorted order based on the identifiers. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ |Bi| ≤ 100 (length of the book title) 1 ≤ Ai ≤ 10000 ------ Sample Input 1 ------ 5 123 The Art of Computer Programming 456 Clean Code 123 Introduction to Algorithms 789 Design Patterns 456 The Pragmatic Programmer ------ Sample Output 1 ------ 123 The Art of Computer Programming 123 Introduction to Algorithms 456 Clean Code 456 The Pragmatic Programmer 789 Design Patterns ------ explanation 1 ------ The books are sorted by their identifiers. Notice how \\"The Art of Computer Programming\\" comes before \\"Introduction to Algorithms\\" because they both have the same identifier but \\"The Art of Computer Programming\\" appeared first in the input. Similar is the case with \\"Clean Code\\" and \\"The Pragmatic Programmer\\".","solution":"from typing import List, Tuple def sort_books(N: int, books: List[Tuple[int, str]]) -> List[Tuple[int, str]]: Sorts the books in ascending order based on their identifiers. If two books have the same identifier, they retain their original order. return sorted(books, key=lambda book: book[0])"},{"question":"In a specific region, there are several isolated lakes, each with its own scenic value. A group of tourists plans to visit these lakes, but they have strict preferences on which lakes they would like to visit together. Each lake is identified by a unique integer from 1 to N, and the scenic value of each lake is represented in an array S of N integers where S[i] is the scenic value of lake i+1. The tourists have provided a list of M preferences. Each preference is a pair (a, b) indicating that if they visit lake a, they must also visit lake b (and vice versa). If multiple such preferences are given, they must be respected collectively as well; meaning, if tourists visit one lake from this group, they must visit all lakes connected by these preferences. Your task is to calculate the highest possible total scenic value of lakes that the tourists can visit while respecting all the given preferences. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. Each test case starts with a line containing two integers N and M denoting the number of lakes and the number of preferences, respectively. The second line contains N space-separated integers representing the scenic values of the lakes. Each of the next M lines contains two integers a and b representing a preference that lakes a and b must be visited together. ------ Output ------ For each test case, output a single line containing the highest total scenic value possible while respecting all the preferences. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{3} 0 ≤ M ≤ 10^{3} 1 ≤ S[i] ≤ 10^{3} for each valid i 1 ≤ a, b ≤ N ------ Sample Input 1 ------ 2 4 3 1 4 5 3 1 2 2 3 3 4 4 1 10 20 30 40 1 4 ------ Sample Output 1 ------ 13 90 ------ Explanation 1 ------ Example case 1: Preferences: (1, 2), (2, 3), and (3, 4) imply that if tourists visit one lake, they must visit all lakes {1, 2, 3, 4}. The total scenic values are 1+4+5+3 = 13. Example case 2: Preference: (1, 4) implies that if tourists visit lake 1, they must visit lake 4 and vice versa. The group of lakes {1, 4} has a total scenic value of 10 + 40 = 50. However, there are no preferences restricting lakes 2 and 3 individually, so they can also be visited yielding a total scenic value of 50 + 20 + 30 = 90.","solution":"def find_max_scenic_value(T, test_cases): def dfs(node, adj_list, visited, S): stack = [node] total_value = 0 while stack: current = stack.pop() if not visited[current]: visited[current] = True total_value += S[current] for neighbor in adj_list[current]: if not visited[neighbor]: stack.append(neighbor) return total_value results = [] for case in test_cases: N, M, S, preferences = case # Convert scenic value list to 0-based indexing S = [0] + S # Create adjacency list from preferences adj_list = [[] for _ in range(N + 1)] for a, b in preferences: adj_list[a].append(b) adj_list[b].append(a) visited = [False] * (N + 1) max_scenic_value = 0 for i in range(1, N + 1): if not visited[i]: scenic_value = dfs(i, adj_list, visited, S) max_scenic_value += scenic_value results.append(max_scenic_value) return results # Example Usage if __name__ == \'__main__\': T = 2 test_cases = [ (4, 3, [1, 4, 5, 3], [(1, 2), (2, 3), (3, 4)]), (4, 1, [10, 20, 30, 40], [(1, 4)]) ] print(find_max_scenic_value(T, test_cases)) # Outputs: [13, 100]"},{"question":"During a science competition, Alice and Bob are challenged to create sequences of numbers with a special property. The sequence must be palindromic, meaning it reads the same forwards and backwards. Alice and Bob can only add integers between 1 and 9 (inclusive) to the sequence. Alice, being the elder, starts first. They take turns appending one integer to either end of the sequence. The game ends when the sequence has exactly K integers. The winner is the one who creates the palindromic sequence or the one who makes the last move if the sequence cannot be made palindromic. Determine which player has a winning strategy assuming both play optimally. -----Input----- The first line of input contains the integer K (1 leq K leq 1000), the length of the sequence. -----Output----- The first and only line of output should be the name of the winner, either \\"Alice\\" or \\"Bob\\". -----Examples----- Sample Input: 2 Sample Output: Alice Sample Input: 3 Sample Output: Alice","solution":"def determine_winner(K): Returns the winner of the game given the length of the sequence K. if K % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"Given a string `s` and a maximum line width `k`, format the text such that each line has exactly `k` characters and is fully (left and right) justified. If you can\'t fit a whole word on the current line, move it to the next line. The last line should be left-justified and no extra space is inserted between words. Write a function: ```python def fullJustify(words: List[str], maxWidth: int) -> List[str]: ``` # Example 1: Input: ``` python words = [\\"This\\", \\"is\\", \\"an\\", \\"example\\", \\"of\\", \\"text\\", \\"justification.\\"] maxWidth = 16 ``` Output: ``` python [ \\"This is an\\", \\"example of text\\", \\"justification. \\" ] ``` # Example 2: Input: ``` python words = [\\"Science\\",\\"is\\",\\"what\\",\\"we\\",\\"understand\\",\\"well\\",\\"enough\\",\\"to\\",\\"explain\\",\\"to\\",\\"a\\",\\"computer.\\",\\"Art\\",\\"is\\",\\"everything\\",\\"else\\",\\"we\\",\\"do\\"] maxWidth = 20 ``` Output: ``` python [ \\"Science is what we\\", \\"understand well\\", \\"enough to explain to\\", \\"a computer. Art is\\", \\"everything else we\\", \\"do \\" ] ``` # Constraints: - The word count of `words` is `1 <= len(words) <= 300`. - `1 <= len(words[i]) <= 20`. - `words[i]` consists only of English letters and punctuation. - `1 <= maxWidth <= 100`. - `words[i].length <= maxWidth`.","solution":"def fullJustify(words, maxWidth): def justify_line(line_words, maxWidth, is_last): if len(line_words) == 1 or is_last: return \' \'.join(line_words).ljust(maxWidth) total_words_length = sum(len(word) for word in line_words) total_spaces = maxWidth - total_words_length gaps = len(line_words) - 1 spaces = [total_spaces // gaps + (1 if i < total_spaces % gaps else 0) for i in range(gaps)] justified_line = \'\' for i in range(gaps): justified_line += line_words[i] + \' \' * spaces[i] justified_line += line_words[-1] return justified_line result = [] current_words = [] current_length = 0 for word in words: if current_length + len(word) + len(current_words) > maxWidth: result.append(justify_line(current_words, maxWidth, False)) current_words = [] current_length = 0 current_words.append(word) current_length += len(word) result.append(justify_line(current_words, maxWidth, True)) return result"},{"question":"Scott, an avid gardener, loves collecting different species of plants and grouping them based on their season of growth. He has recently received a list of plant species along with their corresponding growth seasons. You are given a list of `n` plants with their respective growth season. Each plant can only belong to one of three seasons: spring, summer, or winter. Scott wants to figure out the largest number of consecutive plants that grow in the same season from the list he has received. Write a function `max_consecutive_plants(n, plants)` to help Scott determine this. Function Signature: ```python def max_consecutive_plants(n: int, plants: List[Tuple[str, str]]) -> int: pass ``` **Input:** - The first line of input contains an integer `n`, where 1 ≤ n ≤ 10^5, the number of plants. - The next `n` lines each contain a tuple with a string `species` representing the name of the plant (up to 100 characters), and a string `season` which can be either \\"spring\\", \\"summer\\", or \\"winter\\". **Output:** - An integer representing the highest number of consecutive plants that grow in the same season. **Examples:** 1) **Input:** ``` 5 ((\'Rose\', \'spring\'), (\'Tulip\', \'spring\'), (\'Sunflower\', \'summer\'), (\'Daisy\', \'spring\'), (\'Lily\', \'spring\')) ``` **Output:** ``` 2 ``` **Explanation:** The longest streak of plants from the same season is 2 consecutive \'spring\' plants (\'Rose\' and \'Tulip\'). 2) **Input:** ``` 4 ((\'Fern\', \'winter\'), (\'Pine\', \'winter\'), (\'Cactus\', \'summer\'), (\'Oak\', \'winter\')) ``` **Output:** ``` 2 ``` **Explanation:** The longest streak of plants from the same season is 2 consecutive \'winter\' plants (\'Fern\' and \'Pine\'). 3) **Input:** ``` 6 ((\'Peony\', \'summer\'), (\'Daffodil\', \'spring\'), (\'Carnation\', \'spring\'), (\'Geranium\', \'summer\'), (\'Marigold\', \'summer\'), (\'Lavender\', \'summer\')) ``` **Output:** ``` 3 ``` **Explanation:** The longest streak of plants from the same season is 3 consecutive \'summer\' plants (\'Geranium\', \'Marigold\', and \'Lavender\'). Your task is to complete the function `max_consecutive_plants` which returns the desired integer.","solution":"from typing import List, Tuple def max_consecutive_plants(n: int, plants: List[Tuple[str, str]]) -> int: # Handle edge case where no plants exist if n == 0: return 0 max_count = 1 current_count = 1 prev_season = plants[0][1] for i in range(1, n): species, season = plants[i] if season == prev_season: current_count += 1 max_count = max(max_count, current_count) else: current_count = 1 prev_season = season return max_count"},{"question":"Yraglac has decided to improve the irrigation system of his rice garden on Mars. To ensure that the water is distributed evenly, he wants to set up a series of water tanks to collect and distribute water. Given the coordinates of n potential tank locations and the number of tanks he can install, help Yraglac identify the optimal way to place the tanks such that the average distance from any cell in the garden to the nearest tank is minimized. The garden is represented as a grid with each cell having a specific height. Yraglac can install a water tank at any of the given potential locations, which are within the garden bounds. The water can flow in four directions: north, east, south, or west. The distance between any two adjacent cells is always 1 meter. -----Input----- The input starts with three integers, x ; y ; n, which indicate the dimensions of Yraglac\'s garden and the number of potential tank locations, respectively (1 le x, y le 500, 1 le n le 50). The next y lines contain x integers, h_{ij}, indicating the heights of each cell in the garden (0 le h_{ij} le 999). Then follow n lines with two integers, a ; b, indicating the row and column coordinates of each potential tank location (1-based index: 1 le a le y, 1 le b le x). You are also given an integer k which indicates the number of tanks to be installed (1 le k le n). -----Output----- Output one integer, the minimized average distance from any cell in the garden to the nearest tank. -----Examples----- Sample Input 1: 4 3 3 0 0 4 3 0 2 2 3 2 1 4 3 1 1 1 4 3 2 1 Sample Output 1: 2 Sample Input 2: 5 4 4 1 1 1 1 1 3 3 3 3 3 5 5 5 5 5 0 0 0 0 0 2 1 2 5 4 1 4 5 2 Sample Output 2: 1 Sample Input 3: 6 3 2 2 2 2 2 2 2 1 1 1 1 1 1 3 3 3 3 3 3 1 2 2 5 1 Sample Output 3: 2 Note: In the third example, placing one tank closer to the central cells reduces the average distance more effectively than placing it at one of the corners.","solution":"from itertools import combinations from collections import deque def min_average_distance(x, y, n, garden, potential_locations, k): def bfs(tank_locations): visited = [[False] * x for _ in range(y)] queue = deque() for loc in tank_locations: queue.append((loc[0], loc[1], 0)) visited[loc[0]][loc[1]] = True total_distance = 0 cells_count = 0 while queue: r, c, dist = queue.popleft() total_distance += dist cells_count += 1 for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nr, nc = r + dr, c + dc if 0 <= nr < y and 0 <= nc < x and not visited[nr][nc]: visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return total_distance / (y * x) min_avg_distance = float(\'inf\') for tank_combination in combinations(potential_locations, k): avg_distance = bfs(tank_combination) if avg_distance < min_avg_distance: min_avg_distance = avg_distance return int(min_avg_distance) # Example usage: # Coordinates are 0-based for internal processing x = 5 y = 4 n = 4 garden = [ [1, 1, 1, 1, 1], [3, 3, 3, 3, 3], [5, 5, 5, 5, 5], [0, 0, 0, 0, 0] ] potential_locations = [(1 - 1, 2 - 1), (2 - 1, 5 - 1), (4 - 1, 1 - 1), (4 - 1, 5 - 1)] k = 2 print(min_average_distance(x, y, n, garden, potential_locations, k)) # Expected output: 1"},{"question":"Iahub is tasked with arranging a series of wooden blocks to construct a fence. There are n blocks of different heights, arranged in a line. To enhance the fence’s aesthetic appeal, he wants to rearrange the blocks such that no two adjacent blocks have the same height. Iahub needs to find out if it is possible to rearrange the blocks to meet this requirement and, if so, provide one possible arrangement. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000), the number of blocks. The second line contains n integers h_1, h_2, ..., h_n, where h_i denotes the height of the i-th block (1 ≤ h_i ≤ 1000). -----Output----- Print \\"YES\\" if it is possible to rearrange the blocks so that no two adjacent blocks have the same height. If such rearrangement is possible, print the reordered heights. If there are multiple correct solutions, you can print any of them. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 Output YES 1 3 2 4 5 Input 4 1 1 1 1 Output NO -----Note----- In the first sample, one possible arrangement is [1, 3, 2, 4, 5] as no two adjacent blocks have the same height. In the second sample, all blocks are of the same height, so it is not possible to rearrange them to meet Iahub\'s requirement.","solution":"from collections import Counter import heapq def rearrange_blocks(n, heights): Rearranges the blocks so that no two adjacent blocks have the same height. Arguments: n : int -- number of blocks heights : list of int -- heights of the blocks Returns: (str, list of int) -- \\"YES\\" and the rearranged heights if possible, \\"NO\\" otherwise if not heights: return \\"NO\\", [] # Count the frequency of each height counter = Counter(heights) # Check if the most frequent height\'s count is more than half of total blocks max_height_count = counter.most_common(1)[0][1] if max_height_count > (n + 1) // 2: return \\"NO\\", [] # Create a max heap heap = [(-count, height) for height, count in counter.items()] heapq.heapify(heap) result = [] while heap: # Pop the most frequent element count1, height1 = heapq.heappop(heap) if result and result[-1] == height1: if not heap: return \\"NO\\", [] # Pop the second most frequent element count2, height2 = heapq.heappop(heap) result.append(height2) count2 += 1 if count2 < 0: heapq.heappush(heap, (count2, height2)) # Since we temporarily skipped an element, re-push it heapq.heappush(heap, (count1, height1)) else: result.append(height1) count1 += 1 if count1 < 0: heapq.heappush(heap, (count1, height1)) return \\"YES\\", result"},{"question":"A large university has been facing issues with enrolling the correct number of students in various courses. The university collects data for each student and their desired courses. However, there are conflicts with students enrolling in two courses that are scheduled at the same time. To address this problem, the university needs a program that will automatically assign the courses to students while ensuring there are no schedule conflicts. Each course is assigned a time slot, and no student can be enrolled in more than one course during the same time slot. Your task is to write a program that determines if it is possible to enroll all students in their desired courses with the given constraints. -----Input----- The first line contains an integer N (1 ≤ N ≤ 100) which represents the number of students. The second line contains an integer M (1 ≤ M ≤ 100) which represents the number of courses. The next M lines each contain two integers and one string separated by spaces: - The first integer C_i (1 ≤ C_i ≤ M) which is the course number. - The second integer T_i (1 ≤ T_i ≤ 10) which is the time slot number. - The string students_i representing a comma-separated list of students enrolled in course C_i. Each student\'s name is a unique string of at most 20 characters consisting of lowercase and uppercase English letters. -----Output----- Print \\"Yes\\" if all students can be enrolled in their desired courses without schedule conflicts, otherwise print \\"No\\". -----Example----- Sample Input 1: 3 2 1 1 Alice,Bob 2 2 Alice,Charlie Sample Output 1: Yes Sample Input 2: 3 2 1 1 Alice,Bob 2 1 Alice,Charlie Sample Output 2: No","solution":"def can_enroll_students(n, m, course_info): Determines if students can be enrolled in their desired courses without schedule conflicts. Arguments: n -- Number of students m -- Number of courses course_info -- List of tuples containing course number, time slot and enrolled students Returns: \\"Yes\\" if all students can be enrolled without conflicts, otherwise \\"No\\" student_schedule = {} for course in course_info: course_number, time_slot, students = course student_list = students.split(\',\') for student in student_list: if student not in student_schedule: student_schedule[student] = set() if time_slot in student_schedule[student]: return \\"No\\" student_schedule[student].add(time_slot) return \\"Yes\\""},{"question":"You are given a rectangular grid of non-negative integers with `n` rows and `m` columns. Each cell in the grid can either be empty (represented by a `0`) or filled (represented by a value greater than `0`). You want to draw a single continuous path from the top-left corner of the grid to the bottom-right corner following specific rules: 1. You can only move right or down. 2. You can only pass through cells that are empty (i.e., cells with value `0`). Determine whether it is possible to draw such a path. -----Input----- The first line of the input contains two integers `n` and `m` (1 leq n, m leq 1000) – the number of rows and columns in the grid. Each of the next `n` lines contains `m` integers, where the `j`th integer in the `i`th line is the value of the cell in the `i`th row and the `j`th column (0 leq text{value} leq 10^9). -----Output----- Print \\"YES\\" if it is possible to draw the required path; otherwise, print \\"NO\\". -----Examples----- Input 3 3 0 1 0 0 0 0 0 1 0 Output YES Input 2 2 0 1 1 0 Output NO -----Note----- None","solution":"def can_draw_path(n, m, grid): Determines if a path can be drawn from the top left to the bottom right of the grid using only cells with value 0. Parameters: n (int): Number of rows m (int): Number of columns grid (list of list of int): The grid itself Returns: str: \\"YES\\" if a path is possible, \\"NO\\" otherwise def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 from collections import deque queue = deque([(0, 0)]) visited = [[False for _ in range(m)] for _ in range(n)] visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return \\"YES\\" for dx, dy in [(0, 1), (1, 0)]: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"# Task Given a string consisting of lowercase letters, you need to convert it into a new string by mapping each letter to its corresponding position in the alphabet and returning the concatenated result as a new string. For example, \'a\' is the 1st letter in the alphabet, \'b\' is the 2nd, \'z\' is the 26th, etc. Write a function to accomplish this task. # Input/Output `[input]` string `s` A string of lowercase letters. (1 <= `length of s` <= 100) `[output]` string A string where each letter in the original string is replaced with its position in the alphabet. # Example For `s = \\"abc\\"`, the output should be `\\"123\\"`. For `s = \\"zzz\\"`, the output should be `\\"262626\\"`.","solution":"def alphabet_position(s): Takes a string s consisting of lowercase letters and returns a new string where each letter is replaced by its corresponding position in the alphabet. return \'\'.join(str(ord(char) - ord(\'a\') + 1) for char in s)"},{"question":"Let\'s consider a two-dimensional grid consisting of uppercase English letters. We say that a contiguous subgrid is a \\"palindromic subgrid\\" if the sequence of letters it contains reads the same forwards and backwards in both its rows and columns. Your task is to determine the size of the largest palindromic subgrid in the given grid. -----Input----- The first line contains two integers n and m (1 le n, m le 50) — the number of rows and the number of columns in the grid. The i-th of the next n lines contains a string of m uppercase English letters describing the i-th row of the grid. -----Output----- Output a single integer — the size of the largest palindromic subgrid. -----Examples----- Input 3 3 ABA BAB ABA Output 3 Input 4 4 AAAA ABBA ABBA AAAA Output 4 Input 2 3 ABC DEF Output 1","solution":"def is_palindromic_subgrid(grid, i1, j1, i2, j2): for i in range(i1, i2 + 1): if grid[i][j1:j2 + 1] != grid[i][j1:j2 + 1][::-1]: return False for j in range(j1, j2 + 1): col = \'\'.join(grid[i][j] for i in range(i1, i2 + 1)) if col != col[::-1]: return False return True def largest_palindromic_subgrid(n, m, grid): max_size = 1 for i1 in range(n): for j1 in range(m): for i2 in range(i1, n): for j2 in range(j1, m): if is_palindromic_subgrid(grid, i1, j1, i2, j2): max_size = max(max_size, (i2 - i1 + 1)) return max_size # Recognizing grid input and running the palindromic subgrid search def find_largest_palindromic_subgrid(n, m, grid): return largest_palindromic_subgrid(n, m, grid)"},{"question":"You are given a grid with R rows and C columns, where each cell contains a character representing terrain. The terrain can be one of three types: \'L\' for land, \'W\' for water, or \'T\' for tree. You start on the top-left corner of the grid (cell (0, 0)) and want to reach the bottom-right corner (cell (R-1, C-1)). You can move up, down, left, or right, but you cannot move into water (\'W\') or tree (\'T\') cells. Find the shortest path from the top-left to the bottom-right corner of the grid. If there is no possible path, return -1. -----Constraints----- - 1 leq R, C leq 100 - The grid will always have at least one \'L\' cell. - The top-left corner and the bottom-right corner will always be \'L\' cells. -----Input----- Input is given from Standard Input in the following format: R C grid_1 grid_2 : grid_R -----Output----- If there is a path, print the minimum number of steps required to reach the bottom-right corner; otherwise, print -1. -----Sample Input----- 4 4 L L L W W T L W L L L W W L L L -----Sample Output----- 6 The shortest path is: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3) This path requires moving through 6 steps.","solution":"from collections import deque def shortest_path(grid): Compute the shortest path from top-left to bottom-right corner in the grid avoiding water (\'W\') and tree (\'T\') cells. R, C = len(grid), len(grid[0]) if R == 1 and C == 1: return 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() for dr, dc in directions: rr, cc = r + dr, c + dc if 0 <= rr < R and 0 <= cc < C and (rr, cc) not in visited: if grid[rr][cc] == \'L\': if rr == R-1 and cc == C-1: return dist + 1 queue.append((rr, cc, dist + 1)) visited.add((rr, cc)) return -1"},{"question":"Robin and Marian are playing a game with two types of magical stones - red and blue. They have a rectangular grid with dimensions `NxM`, where each cell of the grid can either be empty or contain a stone. Robin always moves first, and they take turns placing exactly one stone on any empty cell during their turn. The game ends when all cells are filled, and the player who placed the majority of the stones (more than half the total stones) wins. If it\'s a draw (both placed the same number of stones), the game is considered a tie. The players are skilled strategists, and both play optimally to maximize their chances of winning. Robin and Marian want to know if the game can result in a win for either of them or if it will always result in a tie. Given the dimensions of the grid, your task is to determine the outcome. **Input Format** The first line of input contains an integer `T`, the number of test cases. The next `T` lines each contain two integers `N` and `M`, the dimensions of the grid. **Constraints** - 1 leq T leq 10^5 - 1 leq N, M leq 10^9 **Output Format** For each test case, output \\"Robin\\" if Robin is guaranteed to win, \\"Marian\\" if Marian is guaranteed to win, or \\"Tie\\" if the game will always end in a tie, assuming both play optimally. **Sample Input 0** ``` 3 2 3 4 4 5 5 ``` **Sample Output 0** ``` Tie Tie Robin ``` **Explanation 0** - For the first test case, the grid is 2x3, which has 6 cells. Both will place 3 stones each, resulting in a tie. - For the second test case, the grid is 4x4, which has 16 cells. Both will place 8 stones each, resulting in a tie. - For the third test case, the grid is 5x5, which has 25 cells. Robin will place 13 stones, while Marian will place 12 stones. Therefore, Robin will win.","solution":"def game_outcome(N, M): Determines the outcome of the game for the given grid dimensions NxM. Args: N (int): Number of rows of the grid. M (int): Number of columns of the grid. Returns: str: The outcome of the game (\\"Robin\\", \\"Marian\\", or \\"Tie\\"). total_cells = N * M if total_cells % 2 == 0: return \\"Tie\\" else: return \\"Robin\\" def determine_outcomes(test_cases): Determines the game outcomes for multiple test cases. Args: test_cases (list of tuples): List containing tuples of (N, M). Returns: list of str: The outcomes of the game for each test case. results = [] for N, M in test_cases: results.append(game_outcome(N, M)) return results"},{"question":"One day, Petya challenged his friend to a game involving strings and substrings. The challenge is to find the longest palindromic substring in a given string. You need to help Petya by writing an algorithm to determine it. A palindrome is a string that reads the same backward as forward. Input The first and only input line contains a string s (1 ≤ |s| ≤ 1000) which is the string for which you need to find the longest palindromic substring. The string consists of lowercase English letters only. Output Print the longest palindromic substring in the given string. If there are multiple substrings of the same maximum length, print the one that appears first. Examples Input babad Output bab Input cbbd Output bb","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in the given string s. n = len(s) if n == 0: return \\"\\" # Initialize a table to store the palindrome state dp = [[False] * n for _ in range(n)] start = 0 max_length = 1 # All substrings of length 1 are palindromes for i in range(n): dp[i][i] = True # Check for substrings of length 2 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for substrings of length greater than 2 for k in range(3, n + 1): for i in range(n - k + 1): j = i + k - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if k > max_length: start = i max_length = k return s[start:start + max_length]"},{"question":"The problem involves managing a list of product recommendations for an e-commerce website. Each product has a popularity score and may belong to multiple categories. The website curates a daily list of recommended products for each category, aiming to showcase the k most popular products in that category. However, to keep the recommendations fresh, the website limits the occurrence of any single product to at most twice across all category lists. Your job is to write a program that determines the daily recommended products for each category based on the given constraints. -----Input----- The input starts with two integers 1 le n le 1000 and 1 le k le 100, giving the number of products and the number of recommendations per category, respectively. The next n lines each describe a product. Each line contains a product name – a string of at most 20 characters consisting of lower case letters (’a’-’z’), an integer popularity score between 1 and 100000, and a sequence of categories to which the product belongs. Categories are single words of lowercase letters, separated by spaces. The end of the input is signified by a line containing \\"end\\". -----Output----- For each category that appears in the input, output its name followed by a list of the top k recommended products for that category, based on the popularity scores. Ensure that no product appears more than twice in the entire output. If there are ties in the popularity scores, prefer the product that appears first in the input. -----Example----- Sample Input: 6 3 product1 500 electronics children product2 800 electronics product3 600 sports product4 700 sports electronics product5 750 children product6 650 children sports end Sample Output: children: product5 product6 product1 electronics: product2 product4 product1 sports: product4 product6 product3","solution":"def recommend_products(product_info, n, k): from collections import defaultdict, Counter # Parse input category_map = defaultdict(list) products = [] for info in product_info: parts = info.split() product_name = parts[0] score = int(parts[1]) categories = parts[2:] products.append((product_name, score)) for category in categories: category_map[category].append((product_name, score)) # Determine recommendations recommendations = defaultdict(list) total_count = Counter() for category in category_map: # Sort products in each category by score, breaking ties by input order sorted_products = sorted(category_map[category], key=lambda x: (-x[1], products.index(x))) cur_rec = [] for product, score in sorted_products: if total_count[product] < 2: cur_rec.append(product) total_count[product] += 1 if len(cur_rec) == k: break recommendations[category] = cur_rec return recommendations # Read input def main(input_data): lines = input_data.strip().split(\\"n\\") n, k = map(int, lines[0].split()) product_info = lines[1:-1] recommendations = recommend_products(product_info, n, k) result = [] for category in sorted(recommendations): res_line = f\\"{category}: {\' \'.join(recommendations[category])}\\" result.append(res_line) return \\"n\\".join(result)"},{"question":"Your company has introduced a new task management system where each task must be divided into smaller subtasks that will be handled by different employees. To effectively manage subtasks, you want to automate the process of calculating the number of unique employee assignments needed. Each subtask will require a unique employee. Given the total number of subtasks for a project, you need to determine the minimum number of unique employees required. -----Input:----- - First-line will contain N, the number of projects. Then the projects follow. - Each project contains a single line of input, one integer P indicating the number of subtasks for that project. -----Output:----- For each project, output the minimum number of unique employees required to handle all the subtasks. -----Constraints----- - 1 leq N leq 1000 - 1 leq P leq 10^9 -----Sample Input:----- 2 12 7 -----Sample Output:----- 12 7","solution":"def unique_employees_for_subtasks(projects): This function takes a list of integers where each integer represents the number of subtasks for a project and returns a list of integers where each integer represents the minimum number of unique employees required for the corresponding project. return projects"},{"question":"You are given an array of n integers. You need to perform q operations on this array. In each operation, you are given three integers l, r, and k. For this operation, you need to increase each element in the subarray from index l to r (inclusive) by the value k. After performing all the operations, output the final state of the array. -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 100000) — the size of the array and the number of operations to be performed. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Then q lines follow, each containing three integers l, r, k (1 ≤ l ≤ r ≤ n, -10^9 ≤ k ≤ 10^9) — the parameters of each operation. -----Output----- Print the final state of the array after all the operations in one line. -----Examples----- Input 5 3 1 2 3 4 5 1 3 1 2 5 -2 3 3 5 Output 2 1 7 2 3 Input 4 2 4 5 6 7 1 4 2 1 3 -3 Output 3 4 5 9","solution":"def perform_operations(n, q, array, operations): # Convert operations indices to zero-based for easier processing for l, r, k in operations: for i in range(l-1, r): array[i] += k return array"},{"question":"Given a rectangle with corners at (x1, y1), (x1, y2), (x2, y1), and (x2, y2), where x1 < x2 and y1 < y2, you need to determine the number of integer points (i, j) such that the point (i, j) lies inside or on the border of the rectangle. Input The input consists of a single line containing four integers x1, y1, x2, y2 (1 ≤ x1 < x2 ≤ 1000, 1 ≤ y1 < y2 ≤ 1000), representing the coordinates of the corners of the rectangle. Output Output a single integer, the number of integer points inside or on the border of the rectangle. Example Input 1 1 3 3 Output 9 Explanation The integer points inside or on the border of the rectangle with corners (1, 1), (1, 3), (3, 1), and (3, 3) are: (1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3) So, the total number of such points is 9.","solution":"def count_integer_points_in_rectangle(x1, y1, x2, y2): Returns the number of integer points inside or on the border of the given rectangle. return (x2 - x1 + 1) * (y2 - y1 + 1)"},{"question":"Given an array of N integers, find the length of the longest subsequence such that all elements of the subsequence are in non-decreasing order. You should accomplish this in O(N log N) time. ------ Input Format ------ - The first line will contain a single integer T, the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, the number of elements in the array. - The second line of each test case contains N space-separated integers denoting the array elements. ------ Output Format ------ For each test case, output on a new line a single integer, the length of the longest non-decreasing subsequence. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} - Array elements are integers within the range of -10^9 to 10^9. - The sum of N over all test cases will not exceed 10^6. ----- Sample Input 1 ------ 2 5 10 9 2 5 3 6 1 3 2 3 4 5 ----- Sample Output 1 ------ 2 5 ----- Explanation 1 ------ Test case 1: The longest non-decreasing subsequence is [2, 3] or [9, 10], so the length is 2. Test case 2: The longest non-decreasing subsequence is [1, 2, 3, 4, 5], so the length is 5.","solution":"import bisect def length_of_LNDS(arr): Returns the length of the longest non-decreasing subsequence in the given array. if not arr: return 0 subsequence = [] for num in arr: pos = bisect.bisect_right(subsequence, num) if pos == len(subsequence): subsequence.append(num) else: subsequence[pos] = num return len(subsequence) def solve_LNDS_problems(test_cases): results = [] for n, arr in test_cases: results.append(length_of_LNDS(arr)) return results"},{"question":"In a certain forest, different species of trees form a unique pattern. Each tree is characterized by its height. A clear path through the forest is defined as a sequence of trees with strictly increasing heights. Scientists are interested in studying the longest clear path that can be found in any given set of trees. Create a program that takes the heights of the trees in the forest and determines the length of the longest clear path of strictly increasing heights. Input The input is given in the following format: N h1 h2 ... hN The number N (1 ≤ N ≤ 100000) of all the trees in the forest is given in the first line. On the second line, the heights hi (1 ≤ hi ≤ 109) of each tree are given in order. Output The length of the longest clear path with strictly increasing heights is output in one line. Examples Input 5 10 20 10 30 20 Output 3 Input 6 4 5 6 3 4 5 Output 3 Input 9 9 1 3 7 2 5 6 8 7 Output 5","solution":"def longest_increasing_path(N, heights): Determines the length of the longest clear path of strictly increasing heights. Parameters: N (int): The number of trees. heights (list): A list of heights of the trees. Returns: int: The length of the longest clear path. if N == 0: return 0 l = [heights[0]] for height in heights[1:]: if height > l[-1]: l.append(height) else: # Find the first element in l which is not less than height left, right = 0, len(l) - 1 while left < right: mid = (left + right) // 2 if l[mid] < height: left = mid + 1 else: right = mid l[left] = height return len(l) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:])) print(longest_increasing_path(N, heights))"},{"question":"Determine the length of the longest subsequence of a given string where every character appears an even number of times. Note: You need to find a subsequence, not necessarily contiguous, such that each character in the subsequence should be repeated an even number of times. Example 1: Input : s = \\"aabbccdd\\" Output : 8 Explanation: The entire string \\"aabbccdd\\" itself is the longest subsequence where each character appears twice. Example 2: Input : s = \\"aabcbcbd\\" Output : 6 Explanation: The longest subsequence where each character appears an even number of times is \\"abbcbd\\" or \\"abcbcd\\", both of length 6. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function longestEvenSubsequence() that takes a string (s), and returns the length of the longest subsequence where every character appears an even number of times. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= |s| <= 10^6 s consists of only lowercase English letters.","solution":"def longestEvenSubsequence(s: str) -> int: from collections import Counter # Count the frequency of each character in the string freq = Counter(s) # Initialize the length of the longest subsequence subseq_length = 0 # Traverse each character frequency for char, count in freq.items(): # Only add the even part of the frequency to the subsequence subseq_length += (count // 2) * 2 return subseq_length"},{"question":"Prime Number List Overview A prime number is a natural number greater than `1` that is not divisible by any other numbers except for `1` and itself. For example, `2, 3, 5, 7, 11,` and `13` are prime numbers. Task Define a function `listPrimes` that takes an integer `n` and returns a list of all prime numbers less than or equal to `n`. If in doubt please refer to the example tests. **Example** ```python listPrimes(10) ``` **Output:** ```python [2, 3, 5, 7] ``` ```python listPrimes(20) ``` **Output:** ```python [2, 3, 5, 7, 11, 13, 17, 19] ```","solution":"def listPrimes(n): Returns a list of all prime numbers less than or equal to n. if n < 2: return [] primes = [] for num in range(2, n + 1): is_prime = True for i in range(2, int(num ** 0.5) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) return primes"},{"question":"You are given a binary tree with n nodes. Each node has a value which is an integer. Your task is to find the maximum path sum where the path could start and end at any node in the tree. A path is defined as a sequence of nodes where each pair of consecutive nodes in the sequence has an edge connecting them. A node can only appear once in a path. The path must contain at least one node and does not need to go through the root. -----Input----- The first line contains an integer n (1le nle 3cdot 10^4) — the number of nodes in the tree. Each of the following n-1 lines contains three integers u, v, and w (1le u, v le n, -10^4 le w le 10^4) — meaning there is an edge with weight w between nodes u and v. -----Output----- Output a single integer, which is the maximum path sum. -----Examples----- Input 5 1 2 2 1 3 3 3 4 4 3 5 -1 Output 10 Input 4 1 2 -2 1 3 -3 1 4 4 Output 4 -----Note----- In the first sample, the maximum path sum is 10 which is the sum of the values on the path from node 4 to node 1 to node 3 (4+3+3+(-1)=10). In the second sample, the node with value 4 alone forms the maximum path sum as there are negative weights on other edges. Therefore, the maximum path sum is 4.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def maxPathSum(root): def dfs(node): nonlocal max_sum if node is None: return 0 # Maximum sum on the left and right subtrees of node, considering non-negative sums left_max = max(dfs(node.left), 0) right_max = max(dfs(node.right), 0) # Path sum that passes through the node current_path_sum = node.val + left_max + right_max # Update the global max_sum if the current_path_sum is greater max_sum = max(max_sum, current_path_sum) # Return the maximum sum of a path that can include the current node return node.val + max(left_max, right_max) max_sum = float(\'-inf\') dfs(root) return max_sum"},{"question":"A company with N employees is working on a special project. Each employee has a unique set of skills, represented as a list of skill IDs. The goal is to form the smallest possible team such that every required skill is covered by at least one team member. Given a list of required skills and the skill sets of each employee, determine the minimum number of employees that need to be included in the team to cover all required skills. -----Input----- The first line contains an integer N, the number of employees in the company, and an integer M, the number of required skills. The second line contains M integers representing the required skill IDs. Each of the next N lines contains a list of integers where the first integer K_i is the number of skills the i-th employee has, and the following K_i integers are the skill IDs that the i-th employee possesses. We always have 1 leq N leq 20, 1 leq M leq 10, and 1 leq K_i leq 10. -----Output----- Output a single integer, the size of the smallest team that covers all required skills. If it\'s not possible to cover all skills, output -1. -----Examples----- Sample Input: 4 3 1 2 3 2 1 2 1 3 1 2 2 2 3 Sample Output: 2 In this example, the smallest team that covers all required skills (1, 2, 3) can be formed by selecting employees 1 and 4, whose combined skills cover all required skills. Thus, the size of the smallest team is 2.","solution":"from itertools import combinations def smallest_team_cover_all_skills(N, M, required_skills, employees): required_skills_set = set(required_skills) # Convert each employee\'s skill set to set for easy comparison employees_skills = [set(emp) for num_skills, *emp in employees] # Try all combinations from size 1 to N to find the smallest team for team_size in range(1, N+1): for team_indices in combinations(range(N), team_size): team_skills = set() for index in team_indices: team_skills.update(employees_skills[index]) if required_skills_set.issubset(team_skills): return team_size return -1"},{"question":"Given two strings str1 and str2, the task is to find the length of the shortest string that has both str1 and str2 as subsequences. This is known as the Shortest Common Supersequence (SCS) problem. Example 1: Input: str1 = \\"geek\\" str2 = \\"eke\\" Output: 5 Explanation: The shortest common supersequence is \\"geeke\\", which has length 5. Example 2: Input: str1 = \\"AGGTAB\\" str2 = \\"GXTXAYB\\" Output: 9 Explanation: The shortest common supersequence is \\"AGXGTXAYB\\", which has length 9. Your Task: You don\'t need to read input or print anything. The task is to complete the function shortestCommonSupersequence() which takes the two strings str1 and str2 as inputs and returns the length of the shortest string that has both str1 and str2 as subsequences. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) where N and M are the lengths of the strings str1 and str2 respectively. Constraints: 1 <= len(str1), len(str2) <= 100 The strings consist of only lowercase English letters.","solution":"def shortestCommonSupersequence(str1, str2): Finds the length of the shortest string that has both str1 and str2 as subsequences. :param str1: string :param str2: string :return: int m = len(str1) n = len(str2) # Create a DP table to store lengths of longest common subsequence. dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array using bottom-up method. for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # Length of the shortest common supersequence is calculated by: lcs_length = dp[m][n] scs_length = m + n - lcs_length return scs_length"},{"question":"You are given a string of lowercase characters, and the task is to determine the length of the longest substring that consists of non-repeating characters. Write a function `longest_non_repeating_substring` that takes a single string as its input and returns the length of the longest substring with all unique characters. # Input - A single line containing a string s (1 ≤ |s| ≤ 10^5), the string contains only lowercase English letters. # Output - A single integer, the length of the longest substring with all unique characters. # Example Input ``` abcabcbb ``` Output ``` 3 ``` Explanation The answer is \\"abc\\", with the length of 3. Input ``` bbbbb ``` Output ``` 1 ``` Explanation The answer is \\"b\\", with the length of 1. Input ``` pwwkew ``` Output ``` 3 ``` Explanation The answer is \\"wke\\", with the length of 3. Notice that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. # Note To solve this problem efficiently, consider using the sliding window approach which allows you to keep track of the maximum length of substrings with unique characters as you move through the string. ```python def longest_non_repeating_substring(s: str) -> int: char_index_map = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length # Example usage: print(longest_non_repeating_substring(\\"abcabcbb\\")) # Output: 3 print(longest_non_repeating_substring(\\"bbbbb\\")) # Output: 1 print(longest_non_repeating_substring(\\"pwwkew\\")) # Output: 3 ```","solution":"def longest_non_repeating_substring(s: str) -> int: Returns the length of the longest substring of s that consists of non-repeating characters. char_index_map = {} max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"You are organizing a programming marathon where participants will write code continuously over 24 hours. During the event, you\'d like to periodically send out a notification reminding participants of the time that has passed since the event started. You decide to write a program to automate this task. Given the time in hours (an integer between 0 and 23 inclusive) since the marathon started, the program should provide a friendly notification message in the following format: \\"When the marathon has been running for X hour(s)\\", where X is the time in hours since the event began. Ensure that the message uses the plural \\"hours\\" when appropriate, i.e., when the number of hours is anything other than exactly 1. Constraints * 0 ≤ X ≤ 23 Input The input is given from Standard Input in the following format: t Output Print the notification message in the required format, followed by a line break. Examples Input 0 Output When the marathon has been running for 0 hours Input 1 Output When the marathon has been running for 1 hour Input 5 Output When the marathon has been running for 5 hours Input 23 Output When the marathon has been running for 23 hours","solution":"def marathon_notification(t): Returns a notification message based on the hours passed since the marathon started. Parameters: t (int): The number of hours since the marathon started (0 ≤ t ≤ 23). Returns: str: The notification message. if t == 1: return f\\"When the marathon has been running for {t} hour\\" else: return f\\"When the marathon has been running for {t} hours\\" # Example usage # t = int(input().strip()) # print(marathon_notification(t))"},{"question":"You are given two strings S and T. You want to convert string S into string T using a minimum number of operations. The allowed operations are: 1. Insert a character at any position in the string. 2. Remove a character from any position in the string. 3. Replace any character in the string with another character. Write a function to determine the minimum number of operations required to convert S into T. Constraints * 1 ≤ |S|, |T| ≤ 1000 * S and T consist of lowercase English letters. Input S T The first line contains the string S. The second line contains the string T. Output Print a single integer representing the minimum number of operations required to convert S into T. Examples Input abc yabd Output 2 Input intention execution Output 5","solution":"def min_operations(S, T): Determines the minimum number of operations required to convert string S into string T. The operations allowed are insert a character, remove a character, or replace a character. m, n = len(S), len(T) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # S is empty, all characters of T need to be inserted elif j == 0: dp[i][j] = i # T is empty, all characters of S need to be removed elif S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # remove operation dp[i][j - 1], # insert operation dp[i - 1][j - 1]) # replace operation return dp[m][n]"},{"question":"Problem Description You are given a string consisting only of letters \'a\' and \'b\'. Your task is to transform the string into a palindrome with the minimum number of allowed operations. The allowed operations are: 1. Change an \'a\' to \'b\'. 2. Change a \'b\' to \'a\'. Note that you are allowed to change any character to its complementary character as many times as needed to achieve the minimum possible count of operations. Input The first line contains T, the number of test cases. Each test case contains a single line with a string consisting only of the characters \'a\' and \'b\'. Output For each test case, print the minimum number of operations required to transform the given string into a palindrome. Constraints Example Input: 3 abba ab aaa Output: 0 1 0","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to transform the given string s into a palindrome. n = len(s) operations = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: operations += 1 return operations def solve(test_cases): results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"Write a program that reads a grid representing a chessboard layout and determines the number of positions that can attack a given position using knight moves. Knights move in an \\"L\\" shape: two squares in one direction and then one square perpendicular to that direction, or one square in one direction and then two squares perpendicular to that direction. Given a grid of 8 rows and 8 columns representing a chessboard, where each position is labeled by two characters as follows: - The first character represents the column (a to h) - The second character represents the row (1 to 8) For example, the position \\"a1\\" refers to the bottom-left corner of the chessboard, and \\"h8\\" refers to the top-right corner. Your objective is to determine the number of valid positions from which a knight can attack a given position on the chessboard. Constraints: - The input consists of a valid chessboard position. - The output must be a single integer representing the number of valid attacking positions. Input: ``` e4 ``` Output: ``` 8 ``` Explanation: From the position \'e4\', the knight can attack from 8 different positions: - d6 - f6 - g5 - g3 - f2 - d2 - c5 - c3 If the given position is at the edge of the board, the number of valid attacking positions may be less than 8. For example: Input: ``` a1 ``` Output: ``` 2 ``` Explanation: From the position \'a1\', the knight can attack from only 2 different positions: - b3 - c2 Input: ``` g6 ``` Output: ``` 6 ```","solution":"def num_knight_attacks(position): Determine the number of valid positions from which a knight can attack the given position. col = ord(position[0]) - ord(\'a\') + 1 row = int(position[1]) # Possible moves for a knight knight_moves = [ (-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1) ] # Count valid moves count = 0 for move in knight_moves: new_col = col + move[0] new_row = row + move[1] if 1 <= new_col <= 8 and 1 <= new_row <= 8: count += 1 return count"},{"question":"Write a code that implements a simple stack-based calculator. The calculator will accept a string of space-separated tokens, which represents a postfix expression (Reverse Polish Notation). The tokens can be integers or one of the operators +, -, *, /. The code should evaluate the expression and return the correct result as an integer. Ensure to follow integer division rules for the \'/\' operator. Examples: Input: \\"3 4 + 2 * 7 /\\" Output: 2 Input: \\"5 1 2 + 4 * + 3 -\\" Output: 14","solution":"def evaluate_rpn(expression): Evaluates a postfix expression (Reverse Polish Notation) and returns the result as an integer. stack = [] tokens = expression.split() for token in tokens: if token in \'+-*/\': b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': # Perform integer division stack.append(int(a / b)) else: stack.append(int(token)) return stack[0]"},{"question":"The .intersection() method returns a set that contains the elements that are common to both sets. It is also called as the set intersection, which means finding the common elements between two given sets. The & operator can be used as well to find the common elements. >>> A = set(\\"Hacker\\") >>> B = set(\\"Earth\\") >>> print(A.intersection(B)) {\'e\', \'a\', \'r\', \'H\'} >>> print(A & B) {\'e\', \'a\', \'r\', \'H\'} Task You are given two sets of integers. Your task is to find the total number of elements that are common to both sets. Input Format The first line contains the number of elements in the first set. The second line contains the space separated list of elements in the first set. The third line contains the number of elements in the second set. The fourth line contains the space separated list of elements in the second set. Constraints 0 < textit{Number of elements in both sets} < 1000 Output Format Output the total number of common elements in both sets. Sample Input 8 1 2 3 4 5 6 7 8 6 5 6 7 8 9 10 Sample Output 4 Explanation The elements that are common to both sets are: 5, 6, 7, 8. So, the total number of common elements is 4.","solution":"def common_elements_count(set1, set2): Returns the count of common elements in two sets. return len(set1.intersection(set2)) def parse_input(input_str): Parses the input string to extract the two sets of integers. lines = input_str.strip().split(\'n\') set1 = set(map(int, lines[1].split())) set2 = set(map(int, lines[3].split())) return set1, set2 def main(input_str): set1, set2 = parse_input(input_str) return common_elements_count(set1, set2)"},{"question":"Read problems statements in Mandarin Chinese and Russian. You are given an array of integers. Your task is to determine the minimum number of operations required to make all the elements of the array equal. In one operation, you can select any two elements of the array and increase both of them by one. ------ Input ------ The first line contains an integer N denoting the number of elements in the array. The second line contains N integers – A1, A2, ..., AN – representing the elements of the array. ------ Output ------ Print a single integer representing the minimum number of operations required to make all the elements of the array equal. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ Ai ≤ 10^4 10 points: 1 ≤ N ≤ 20 30 points: 1 ≤ N ≤ 5000 60 points: 1 ≤ N ≤ 10^5 ----- Sample Input 1 ------ 3 1 2 3 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ In the first operation, pick the first two elements and increase both: [2, 3, 3] In the second operation, pick the first and second elements and increase both: [3, 4, 3] In the third operation, pick the second and last element and increase both: [4, 4, 4] ----- Sample Input 2 ------ 4 4 4 4 4 ----- Sample Output 2 ------ 0 ----- Explanation 2 ------ Array is already equal, no operations needed.","solution":"def min_operations_to_equal_elements(arr): Returns the minimum number of operations required to make all the elements of the array equal. In one operation, you can select any two elements of the array and increase both of them by one. # Find the minimum value in the array min_value = min(arr) # Calculate the total number of operations needed operations = sum(num - min_value for num in arr) return operations"},{"question":"You are given a grid with `n` rows and `m` columns, where each cell of the grid initially contains zero. We provide a set of operations. Each operation increments the cell value by 1 for all the cells in a subgrid defined by its upper-left and lower-right corners. The goal is to determine the maximum value in the grid after all operations are applied. Write a function that, given the dimensions of the grid and a list of operations, returns the maximum value in the grid. Each operation is represented by four integers `r1`, `c1`, `r2`, and `c2` which denote the upper-left corner (`r1`, `c1`) and the lower-right corner (`r2`, `c2`) of the subgrid. The input consists of more than one test case. For each test case, the first line contains two integers `n` and `m` (1 leq n, m leq 10^3), the dimensions of the grid. The next `k` lines each contain four integers separated by spaces (`0 leq r1 <= r2 < n`, `0 leq c1 <= c2 < m`), the list of operations. Input ``` n m k r1_1 c1_1 r2_1 c2_1 r1_2 c1_2 r2_2 c2_2 ... r1_k c1_k r2_k c2_k ``` Output Output the maximum value in the grid for each test case. Example Input ``` 3 3 3 0 0 1 1 1 1 2 2 0 0 2 2 2 2 2 2 1 1 1 1 ``` Output ``` 3 1 ```","solution":"def max_value_in_grid(n, m, operations): # Step 1: Create the initial grid grid = [[0] * m for _ in range(n)] # Step 2: Apply the operations to the grid for r1, c1, r2, c2 in operations: for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): grid[i][j] += 1 # Step 3: Find the maximum value in the grid max_value = max(max(row) for row in grid) return max_value"},{"question":"A software company is organizing a coding competition to assess the coding abilities of participants. They need to determine the rank of each participant based on their scores. Input The input will be given as follows: 1. An integer N (1 <= N <= 1000) representing the number of participants. 2. A list of N integers S (0 <= S[i] <= 100) representing the scores of the participants. Output Print the rank of each participant based on their scores. Rank is defined as follows: - The highest score gets rank 1, the second highest gets rank 2, and so on. - If two or more participants have the same score, they should receive the same rank. - Subsequent ranks should be adjusted accordingly. For example, if two participants are tied for rank 2, the next rank should be 4, not 3. Examples Input 5 10 20 20 5 15 Output 4 1 1 5 3 Input 6 3 3 3 3 3 3 Output 1 1 1 1 1 1","solution":"def compute_ranks(N, scores): Returns the rank of each participant based on their scores. sorted_scores = sorted(enumerate(scores), key=lambda x: (-x[1], x[0])) ranks = [0] * N current_rank = 1 for i in range(N): if i > 0 and sorted_scores[i][1] != sorted_scores[i-1][1]: current_rank = i + 1 ranks[sorted_scores[i][0]] = current_rank return ranks"},{"question":"Write a function that finds the smallest window (substring) in a given string S that contains all the characters of another string T, including duplicates. If there is no such window, return an empty string. If there are multiple windows of the same length, return the one that appears first. -----Constraints----- - 1 leq |S|, |T| leq 10^5 - S and T consist of uppercase and lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print the smallest window from S that contains all characters of T. If there is no such window, print an empty string. -----Sample Input----- ADOBECODEBANC ABC -----Sample Output----- BANC Explanation: - The smallest window in S that contains all characters of T is \\"BANC\\". Additional Example: - For input S: \\"a\\", T: \\"a\\", the output should be \\"a\\". Complexity analysis, maintaining a sliding window: - The worst-case time-complexity is O(|S| + |T|).","solution":"def min_window(s, t): from collections import Counter, defaultdict if not s or not t: return \\"\\" dict_t = Counter(t) required = len(dict_t) l, r = 0, 0 formed = 0 window_counts = defaultdict(int) ans = float(\\"inf\\"), None, None while r < len(s): char = s[r] window_counts[char] += 1 if char in dict_t and window_counts[char] == dict_t[char]: formed += 1 while l <= r and formed == required: char = s[l] if r - l + 1 < ans[0]: ans = (r - l + 1, l, r) window_counts[char] -= 1 if char in dict_t and window_counts[char] < dict_t[char]: formed -= 1 l += 1 r += 1 return \\"\\" if ans[0] == float(\\"inf\\") else s[ans[1]: ans[2] + 1]"},{"question":"You are given an integer `n` which represents the number of floors in a building. A person has two eggs and wishes to determine the highest floor from which an egg can be dropped without breaking. Implement a function to find the minimum number of attempts needed to find this floor in the worst-case scenario. Example 1: Input: n = 10 Output: 4 Explanation: With 10 floors, in the worst case scenario, the minimum number of attempts required is 4. Example 2: Input: n = 100 Output: 14 Explanation: With 100 floors, in the worst case scenario, the minimum number of attempts required is 14. Your Task: You don\'t need to read input or print anything. Your task is to complete the function eggDrop() which takes an integer n as input and returns the minimum number of attempts needed in the worst-case scenario. Note: Tests are generated so that the answer will fit in a 32-bit integer. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ n ≤ 1000","solution":"def eggDrop(n): Function to calculate the minimum number of attempts needed to find the highest floor from which an egg can be dropped without breaking in the worst-case scenario with two eggs and n floors. :param n: int - the total number of floors :return: int - the minimum number of attempts needed # Base case if n == 1: return 1 if n == 0: return 0 # Function to calculate the minimum attempts needed when # we have two eggs and x floors using the closed form formula def calculate_min_attempts(floors): attempts = 0 interval = 1 sum = 0 while sum < floors: attempts += 1 sum += attempts return attempts return calculate_min_attempts(n)"},{"question":"Implement a function that takes a list of strings where each string represents a file path and a string representing a file extension. Your function should return only the unique file paths that have the specified extension. The file paths should be returned in the same order they appear in the input list. **Example:** ```python def filter_files_by_extension(file_paths, extension): # Your code here print(filter_files_by_extension([\\"/home/user/file1.txt\\", \\"/var/log/file2.log\\", \\"/home/user/docs/report.pdf\\", \\"/home/user/file1.txt\\"], \\".txt\\")) # Output: [\\"/home/user/file1.txt\\"] print(filter_files_by_extension([\\"/home/user/file1.txt\\", \\"/var/log/file2.log\\", \\"/home/user/file2.txt\\"], \\".log\\")) # Output: [\\"/var/log/file2.log\\"] ``` **Constraints:** - The file paths are standardized and assume the format `/path/to/file.extension`. - The function should be case sensitive regarding extensions. - The function should maintain the order of file paths as in the input list while filtering out duplicates based on the complete file path. In this task, ensure your solution efficiently handles the list processing to maintain optimal performance, even for large lists of file paths.","solution":"def filter_files_by_extension(file_paths, extension): Returns a list of unique file paths that have the specified extension. :param file_paths: List of file path strings. :param extension: The file extension to filter by. :return: List of unique file paths matching the extension. seen = set() result = [] for path in file_paths: if path.endswith(extension) and path not in seen: seen.add(path) result.append(path) return result"},{"question":"Given a list of integers representing the height of buildings in a straight line, write a function that determines the number of buildings receiving direct sunlight. A building receives sunlight if its height is greater than all the buildings to its left. The sunlight comes from the left side. Example 1: Input N = 6 A[] = {3, 7, 8, 3, 6, 1} Output 3 Explanation: Three buildings receive sunlight i.e., the buildings with heights 3, 7, and 8. Example 2: Input N = 5 A[] = {1, 4, 3, 2, 5} Output 3 Explanation: Three buildings receive sunlight i.e., the buildings with heights 1, 4, and 5. Your task: You don\'t need to print the answer, printing is done by the driver code itself. You have to complete the function CountBuildingsWithSunlight() which takes the array A[] and its size N as inputs and returns the count of buildings receiving direct sunlight. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{9}","solution":"def CountBuildingsWithSunlight(N, A): Function to determine the number of buildings receiving direct sunlight. Parameters: N (int): Number of buildings. A (list): Heights of the buildings. Returns: int: The count of buildings receiving direct sunlight. # If there are no buildings if N == 0: return 0 count = 1 # The first building always receives sunlight max_height = A[0] # Initialize the max_height with the height of the first building for i in range(1, N): if A[i] > max_height: count += 1 max_height = A[i] return count"},{"question":"You have been tasked with writing a function that processes a sequence of commands to control a robotic vacuum cleaner. The vacuum cleaner starts at position `(0, 0)` and can move in four directions: `\'UP\'`, `\'DOWN\'`, `\'LEFT\'`, and `\'RIGHT\'`. Each command moves the vacuum one unit in the specified direction. Create a function `vacuum_position(commands)` that takes a list of commands (`commands`) and returns the final position of the vacuum cleaner as a tuple `(x, y)`. For example: - If the input is `[\'UP\', \'UP\', \'LEFT\', \'DOWN\', \'RIGHT\']`, the output should be `(0, 1)`. - If the input is `[\'RIGHT\', \'RIGHT\', \'UP\', \'UP\', \'LEFT\']`, the output should be `(1, 2)`. If the list of commands is empty, the vacuum cleaner remains at the origin `(0, 0)`. You can assume that the commands will always be valid, consisting of one or more of the specified directions.","solution":"def vacuum_position(commands): Processes a list of commands to control a robotic vacuum cleaner and returns its final position. Args: commands (list of str): A list of commands where each command is one of \'UP\', \'DOWN\', \'LEFT\', \'RIGHT\'. Returns: tuple: A tuple (x, y) representing the final position of the vacuum cleaner. x, y = 0, 0 for command in commands: if command == \'UP\': y += 1 elif command == \'DOWN\': y -= 1 elif command == \'LEFT\': x -= 1 elif command == \'RIGHT\': x += 1 return (x, y)"},{"question":"Given a positive integer `n`, your task is to create a function that generates a list of the first `n` prime numbers. A prime number is a positive integer greater than 1 that has no positive integer divisors other than 1 and itself. For example, if `n = 5`, the function should return `[2, 3, 5, 7, 11]` as these are the first 5 prime numbers. More examples in the test cases. ```python def generate_primes(n: int) -> List[int]: # Your code here ``` **Parameters:** - `n` (Type: `int`): The number of prime integers to generate. **Returns:** - `List[int]`: A list of the first `n` prime numbers, in increasing order. Good luck! If you like this question, you might also enjoy: - [Summing a list of prime numbers](https://example-link-to-related-problem.com) - [Identifying prime numbers in a large dataset](https://example-link-to-another-related-problem.com)","solution":"def generate_primes(n: int) -> list: Return a list of the first \'n\' prime numbers. if n <= 0: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"Given an array of integers, rearrange the array such that the difference between any two consecutive elements is minimized. If there are multiple possible arrangements, return the lexicographically smallest arrangement. Example 1: Input: arr = [3, 1, 4, 1, 5] Output: [1, 1, 3, 4, 5] Explanation: The differences between consecutive elements are minimized with this arrangement. Example 2: Input: arr = [10, 7, 5, 3, 8, 2] Output: [2, 3, 5, 7, 8, 10] Explanation: The differences between consecutive elements are minimized with this arrangement. Your Task: The task is to complete the function rearrangeArray() which takes the array as input, rearranges it to minimize the difference between consecutive elements, and returns the array. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def rearrangeArray(arr): Rearranges the array such that the difference between any two consecutive elements is minimized. If there are multiple possible arrangements, returns the lexicographically smallest arrangement. return sorted(arr)"},{"question":"You are given an n times n matrix with non-negative integers. Your task is to start from the top-left corner (cell (1,1)) and reach the bottom-right corner (cell (n,n)) while collecting the maximum sum of values along the way. You can only move either right or down in the matrix. -----Input----- The first line contains a single integer n (1 le n le 1000), the size of the matrix. The next n lines each contain n integers a_{ij} (0 le a_{ij} le 10^5), where 1 le i, j le n, representing elements of the matrix. -----Output----- Print the maximum sum of values you can collect by starting at the top-left corner and reaching the bottom-right corner by only moving right or down. -----Examples----- Input 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 1 2 1 1 Output 4 Input 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 73 -----Note----- In the first test case, the optimal path is 1 rightarrow 4 rightarrow 5 rightarrow 6 rightarrow 9 yielding a sum of 1 + 4 + 5 + 6 + 9 = 29.","solution":"def max_sum_path(matrix): n = len(matrix) dp = [[0] * n for _ in range(n)] dp[0][0] = matrix[0][0] for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] dp[0][i] = dp[0][i-1] + matrix[0][i] for i in range(1, n): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[n-1][n-1]"},{"question":"Write a program that takes a list of numbers representing weights (in kilograms) of packages and calculates the total weight of only those packages that weigh more than 5 kilograms. Constraints 0 ≤ weight of package (integer) ≤ 1,000 Input Weight of package 1 Weight of package 2 Weight of package 3 . . Weight of package 10 Output Total weight of packages greater than 5 kilograms Examples Input 3 2 8 15 5 6 12 3 1 10 Output 51 Input 6 7 5 4 3 8 2 11 0 10 Output 42","solution":"def total_weight_over_5(weights): Returns the total weight of packages that weigh more than 5 kilograms. :param weights: List of integers representing the weights of the packages. :return: The total weight of the packages that weigh more than 5 kilograms. return sum(weight for weight in weights if weight > 5)"},{"question":"You are given a positive integer N. Your task is to find the smallest positive integer M such that the sum of the digits of M is equal to N. The digits of M must satisfy the following constraints: the digits must be non-zero and should be in non-decreasing order (e.g., 112, 123, 155). If there is no such M, return -1. ------ Input: ------ The first line contains one integer T, the number of test cases. Each test case consists of one integer N. ------ Output: ------ For each test case, print one integer M, the smallest positive integer with the described properties, or -1 if no such M exists. ------ Constraints: ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 ------ Sample Input 1 ------ 5 5 10 15 1 61 ------ Sample Output 1 ------ 5 19 159 1 -1","solution":"def smallest_integer_with_digit_sum(N): if N > 45: # The maximum sum we can achieve with digits 1 to 9 (which is 1+2+3+...+9) return -1 digits = [] for digit in range(9, 0, -1): if N >= digit: digits.append(digit) N -= digit digits.sort() return int(\'\'.join(map(str, digits))) def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(smallest_integer_with_digit_sum(N)) return results"},{"question":"Your task is to write a function that extracts and returns the vowels and consonants from a given string separately. # Function Signature ```python def extract_vowels_consonants(s: str) -> (str, str): ``` # Input - A single string `s` which may contain lowercase and uppercase letters, spaces, and punctuation. # Output - A tuple containing two strings `(vowels, consonants)`. - `vowels`: A string containing all the vowels (a, e, i, o, u) from the input string in their original order. - `consonants`: A string containing all the consonants from the input string in their original order. # Example - Input: `\\"Hello, World!\\"` - Output: `(\\"eoo\\", \\"HllWrld\\")` - Input: `\\"Programming\\"` - Output: `(\\"oai\\", \\"Prgrmmng\\")` # Constraints - The input string will contain at least one letter. - The input string will have a maximum length of 1000 characters. # Note - Vowels and consonants should preserve the case as they appear in the original string. - Ignore spaces, punctuation, and non-alphabetic characters.","solution":"def extract_vowels_consonants(s: str) -> (str, str): Extracts and returns the vowels and consonants from a given string separately. Args: s (str): The input string which may contain letters, spaces, and punctuation. Returns: (str, str): A tuple containing two strings, the first with vowels and the second with consonants. vowels = \\"aeiouAEIOU\\" vowel_str = \\"\\" consonant_str = \\"\\" for char in s: if char.isalpha(): if char in vowels: vowel_str += char else: consonant_str += char return (vowel_str, consonant_str)"},{"question":"You are given an array of integers representing a hill with different heights at each index. Your task is to determine if a water reservoir placed at any of the local minimum points could contain any water when it rains. A local minimum is defined as an index that has a height less than both its left and right neighbors. Assume the height outside the boundaries of the array is 0. Write a function `canCatchWater` that receives an array of integers representing the hill\'s heights and returns a boolean indicating whether there exists at least one local minimum that can contain water. Water can only be contained if both sides of the local minimum have higher heights. Example: ```python def canCatchWater(hill): # your code here # Example usage: print(canCatchWater([1, 2, 1, 3, 4, 3, 1, 2])) # Output: True print(canCatchWater([1, 2, 3, 4, 5])) # Output: False ``` Hints: - Consider edge cases where the array length is less than or equal to 2. - Think of iterating over the heights and checking conditions for local minima and water containment.","solution":"def canCatchWater(hill): Determines if there exists at least one local minimum in the hill array that can contain water. Args: hill (list): List of integers representing hill heights. Returns: bool: True if there exists at least one local minimum that can contain water, False otherwise. n = len(hill) # A hill with length less than 3 cannot form a local minimum that can contain water if n < 3: return False for i in range(1, n - 1): # Check if the current element is a local minimum if hill[i] < hill[i - 1] and hill[i] < hill[i + 1]: return True return False"},{"question":"A software company is organizing a programming contest for high school students, and they need to assign students to different coding tasks based on their skill levels. The contest has a total of N students and M coding tasks. Each student i has a skill level S_i. Each task j has a minimum skill requirement T_j and a maximum skill requirement U_j, meaning that a student can only be assigned to a task if their skill level falls within this range inclusive. Each task can have only one student assigned to it. Your task is to write a program to determine whether it\'s possible to assign each coding task to a student such that every student\'s skill level matches the task requirements. Input The input consists of: * An integer N indicating the number of students. * An integer M indicating the number of coding tasks. * N integers S_i (1 ≤ S_i ≤ 1,000,000,000) representing the skill levels of the students. * M lines, each containing two integers T_j and U_j (1 ≤ T_j ≤ U_j ≤ 1,000,000,000) indicating the minimum and maximum skill requirements of each task. Output Output \\"YES\\" if it\'s possible to assign each task to exactly one student who meets the skill level requirements, otherwise output \\"NO\\". Example Input 6 6 3 7 5 6 9 8 1 4 3 5 5 7 7 9 5 9 6 8 Output YES Input 5 6 3 8 2 9 7 1 4 3 5 5 7 7 9 5 9 6 8 Output NO Input 4 4 7 6 5 9 5 7 3 5 6 8 7 9 Output YES Notes: In the first example, it\'s possible to assign tasks to students as follows: - Task 1 (min:1, max:4) to the student with skill 3 - Task 2 (min:3, max:5) to the student with skill 5 - Task 3 (min:5, max:7) to the student with skill 6 - Task 4 (min:7, max:9) to the student with skill 7 - Task 5 (min:5, max:9) to the student with skill 8 - Task 6 (min:6, max:8) to the student with skill 9 In the second example, it is not possible to assign all the tasks to students as there are not enough students with the required skill levels.","solution":"def can_assign_tasks(n, m, skill_levels, tasks): Determine whether it\'s possible to assign each task to a student such that every student\'s skill level matches the task requirements. :param n: Integer, number of students :param m: Integer, number of tasks :param skill_levels: List of integers, skill levels of the students :param tasks: List of tuples, each containing two integers representing the min and max skill requirements of a task :return: \\"YES\\" if it\'s possible to assign each task to exactly one student who meets the skill level requirements, otherwise \\"NO\\" assigned = [False] * m # Sort skill levels and tasks by min requirement skill_levels.sort() tasks = sorted(tasks, key=lambda x: x[0]) task_index = 0 for skill in skill_levels: while task_index < m and (tasks[task_index][1] < skill): task_index += 1 if task_index < m and (tasks[task_index][0] <= skill <= tasks[task_index][1]): assigned[task_index] = True task_index += 1 return \\"YES\\" if all(assigned) else \\"NO\\""},{"question":"Lara loves to buy candies. She has a list of n candies, each with a certain price. She likes to buy k candies that have different prices. If there are multiple candies with the same price, she will consider them as different candies, but she will only buy each price value once. Please help Lara determine the minimum cost to buy k different priced candies. -----Input----- The first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of candies and the number of different priced candies Lara wants to buy. The second line contains n space-separated integers, where each integer represents the price of a candy. -----Output----- Print a single integer — the minimum sum of money that Lara has to spend to buy k different priced candies. If it\'s not possible to buy k candies with different prices, print -1. -----Examples----- Input 7 3 5 1 3 3 2 4 1 Output 6 Input 5 4 1 1 1 1 1 Output -1 -----Note----- In the first sample, the prices of the candies are 5, 1, 3, 3, 2, 4, 1. The unique prices are 1, 2, 3, 4, 5. One of the optimal solutions to get 3 different prices is to pick candies priced at 1, 2, and 3, resulting in a minimum sum of 1 + 2 + 3 = 6. In the second sample, since all candy prices are 1, it’s not possible to get 4 different prices, hence the output is -1.","solution":"def minimum_cost_to_buy_k_diff_priced_candies(n, k, prices): # Get unique prices unique_prices = list(set(prices)) # Check if it\'s possible to buy k different priced candies if len(unique_prices) < k: return -1 # Sort unique prices to get the minimum k prices unique_prices.sort() # Calculate the sum of the minimum k prices return sum(unique_prices[:k])"},{"question":"Given a list of integers, return a list where each element is replaced by the product of all other elements in the list, without using division. Example 1: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: The product of all other elements for each position is [2*3*4, 1*3*4, 1*2*4, 1*2*3] Example 2: Input: nums = [5, 6, 2] Output: [12, 10, 30] Explanation: The product of all other elements for each position is [6*2, 5*2, 5*6] Your task: Your task is to complete the function productExceptSelf() which takes a list of integers as input and returns a new list with the required products. You need not take any input or print anything. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(nums) <= 10^5 -10^2 <= nums[i] <= 10^2","solution":"def productExceptSelf(nums): Returns a list where each element is replaced by the product of all other elements in the input list. n = len(nums) # Initialize left and right products as 1 left_products = [1] * n right_products = [1] * n result = [1] * n # Calculate left products for each element for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Calculate right products for each element for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Calculate the result by multiplying left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"Write a program that reads a list of integers representing the heights of students in a class and finds the largest subset of students such that the difference in height between the shortest and the tallest student in that subset is at most a given value `k`. Constraints: * `1 <= n <= 100` (where `n` is the number of students) * `0 <= heights[i] <= 2000` (where `heights[i]` is the height of the i-th student) * `0 <= k <= 2000` Input: The first line contains an integer `n`. The second line contains `n` integers separated by spaces representing the heights of the students. The third line contains an integer `k`. Output: Print the size of the largest subset of students where the height difference is at most `k`. Example: Input: 8 150 160 165 170 172 155 160 170 5 Output: 3 Explanation: One possible subset is {160, 165, 160} where the height difference is 5.","solution":"def largest_subset_with_height_difference(heights, k): Returns the size of the largest subset of students where the height difference between the shortest and tallest student is at most k. Args: heights: List of integers representing the heights of the students. k: Integer representing the maximum allowed difference in height. Returns: Integer representing the size of the largest subset. n = len(heights) if n == 0: return 0 heights.sort() max_count = 0 for i in range(n): count = 1 for j in range(i + 1, n): if heights[j] - heights[i] <= k: count += 1 else: break max_count = max(max_count, count) return max_count"},{"question":"Problem Alice is playing a game involving a rectangular grid of size n x m. Some cells of the grid are blocked, and she can only move to cells that are not blocked. Alice can move up, down, left, or right. The goal is to determine the maximum number of moves she can make starting from the top-left corner (1,1) to the bottom-right corner (n,m) without visiting any cell more than once. Input The first line contains two integers, n and m, which represent the number of rows and columns in the grid. The next n lines each contain m integers. A value of 0 represents a free cell, and a value of 1 represents a blocked cell. Output Output one integer, which is the maximum number of moves Alice can make to reach from (1,1) to (n,m). If it is impossible to reach (n,m), output -1. Constraints * 1 ≤ n, m ≤ 100 * The grid will have at least one free cell. Examples Input 4 4 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 Output 6 Input 3 3 0 1 0 1 1 0 0 0 0 Output -1","solution":"from collections import deque def max_moves(grid): Returns the maximum number of moves Alice can make to reach from the top-left corner to the bottom-right corner of the grid. If it\'s impossible to reach the destination, returns -1. n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == n - 1 and c == m - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"You have been hired to manage product shipments at a warehouse. Each product shipment is represented by a box with a specific weight. To optimize the shipment process, you need to know the number of boxes that can be shipped together without exceeding a weight limit. Given a weight limit and a list of weights for each box, write a function that determines the maximum number of boxes that can be shipped in a single trip without exceeding the weight limit. The order in which the boxes are packed does not matter. Input The first line contains one integer w (1 ≤ w ≤ 10⁴) — the weight limit for a single trip. The second line contains an integer n (1 ≤ n ≤ 100) — the number of boxes. The third line contains n integers separated by spaces, where the i-th integer wi (1 ≤ wi ≤ 100) represents the weight of the i-th box. Output Print one integer — the maximum number of boxes that can be shipped in a single trip without exceeding the weight limit. Examples Input 50 5 10 20 30 40 50 Output 2 Input 100 6 20 30 10 50 40 15 Output 4 Input 15 3 5 5 5 Output 3","solution":"def max_boxes(weight_limit, num_boxes, box_weights): Determines the maximum number of boxes that can be shipped in a single trip without exceeding the weight limit. :param weight_limit: int, weight limit for a single trip :param num_boxes: int, number of boxes :param box_weights: list of int, weights of the boxes :return: int, maximum number of boxes that can be shipped in a single trip box_weights.sort() current_weight = 0 count = 0 for weight in box_weights: if current_weight + weight <= weight_limit: current_weight += weight count += 1 else: break return count"},{"question":"A team of robot engineers is designing a new robot for a competitive maze challenge. The robot can move in a grid-like maze of size n times m. The starting point of the robot is the top-left corner of the maze (position (0, 0)) and it needs to reach the bottom-right corner (position (n-1, m-1)). The robot can only move either right or down at each step. However, some cells in the maze contain obstacles that block the robot from entering those cells. Your task is to write a program to calculate the number of distinct paths that the robot can take from the starting position to the destination, avoiding obstacles. -----Input:----- - The first line contains two integers n and m, representing the dimensions of the maze. - The next n lines each contain m integers (0 or 1). A 0 represents an empty cell, and a 1 represents a blocked cell. -----Output:----- - Output a single integer: the number of distinct paths from the top-left corner to the bottom-right corner. If there is no valid path, output 0. -----Constraints----- - 1 leq n, m leq 100 - The maze grid will contain only 0s and 1s. -----Sample Input:----- 3 3 0 0 0 0 1 0 0 0 0 -----Sample Output:----- 2 -----EXPLANATION:----- There are two distinct paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Both of these paths avoid the obstacle at position (1, 1).","solution":"def count_paths(n, m, maze): Counts the number of distinct paths from the top-left to the bottom-right corner of a maze, avoiding obstacles. Parameters: n (int): number of rows in the maze. m (int): number of columns in the maze. maze (list of list of int): 2D list representing the maze where 0 indicates an empty cell and 1 indicates an obstacle. Returns: int: Number of distinct paths. if maze[0][0] == 1 or maze[n-1][m-1] == 1: return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if maze[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Design an algorithm that takes an integer array, determines the smallest positive integer that is missing from the array, and returns that integer. Your algorithm should have linear time complexity. Examples: arr = [1, 2, 0] return 3. arr = [3, 4, -1, 1] return 2. arr = [7, 8, 9, 11, 12] return 1. Note: You may assume the array contains only integers and has a length of n.","solution":"def first_missing_positive(nums): Returns the smallest positive integer that is missing from the array. This function runs in O(n) time complexity. n = len(nums) # First pass: place each number in its right place (1 should be at index 0, 2 at index 1, etc.) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] to its correct position correct_index = nums[i] - 1 nums[i], nums[correct_index] = nums[correct_index], nums[i] # Second pass: find the first index where the number is not correct for i in range(n): if nums[i] != i + 1: return i + 1 # If all positions are correct, the missing number is n + 1 return n + 1"},{"question":"You are given an array of integers. Find the length of the longest continuous subarray that consists of only even numbers. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the size of the array. The second line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9) — the elements of the array. -----Output----- Print the length of the longest continuous subarray that only has even numbers. -----Examples----- Input 10 1 2 4 6 1 2 4 6 8 10 Output 5 Input 5 1 3 5 7 9 Output 0","solution":"def longest_even_subarray_length(n, array): Given an array of integers, find the length of the longest continuous subarray that consists of only even numbers. Parameters: n (int): the size of the array array (list of int): the elements of the array Returns: int: the length of the longest continuous subarray that consists of only even numbers max_length = 0 current_length = 0 for num in array: if num % 2 == 0: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Given an integer array `nums`, return all possible subsets (the power set). Example: Input: ``` nums = [1,2,3] ``` Output: ``` [ [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3] ] ``` Explanation: The above output corresponds to all the subset combinations of the array `[1, 2, 3]`.","solution":"def subsets(nums): Returns all possible subsets (the power set) of the given list nums. result = [] def backtrack(start, path): result.append(path) for i in range(start, len(nums)): backtrack(i + 1, path + [nums[i]]) backtrack(0, []) return result"},{"question":"A group of friends is playing a card game called \\"Special Cards.\\" The deck consists of `n` cards, each with a unique integer written on it. The game is played in rounds, and during each round, a player draws a card from the deck. The drawn card is placed face up, and the number on the card is added to that player\'s score. The game continues until all cards are drawn. After the game ends, the player with the highest score is the winner. However, the friends have a special rule: the player who draws the card with the highest value in the deck automatically wins the game, regardless of the scores. Given the number of cards `n` and the sequence of numbers on the cards, determine the chance (probability) that a specific player wins the game if he/she always draws the card with the maximum value. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 10^6) — the number of cards in the deck. The second line contains `n` integers, separated by spaces, representing the values on the cards. Each value is unique and lies between 1 and 10^9. -----Output----- Print a single floating-point number between 0 and 1, representing the probability that a player will win the game if they always draw the card with the highest value. The output should be accurate to at least six decimal places. -----Examples----- Input 5 1 2 3 4 5 Output 0.200000 Input 3 10 20 30 Output 0.333333 Input 4 5 7 3 1 Output 0.250000 -----Note----- In the first example, there are 5 cards, and the highest value card is 5. The probability of drawing this card is 1 out of 5, so the output is 0.200000. In the second example, out of 3 cards, the highest value card is 30. The probability of drawing this card is 1 out of 3, so the output is 0.333333. In the third example, the highest value card is 7. Given there are 4 cards, the probability of drawing this card is 1 out of 4, so the output is 0.250000.","solution":"def probability_of_winning(n, cards): Returns the probability of drawing the highest value card. max_value = max(cards) probability = 1 / n return round(probability, 6)"},{"question":"Your friend Alex is a street artist who wants to showcase his graffiti art in a visually appealing way. He has a canvas of dimensions n by m. Alex has a list of dimensions of rectangular art pieces that he wants to place on this canvas. Each piece can be rotated by 90 degrees to fit the space better. Given the dimensions of the canvas and the list of art pieces, determine if Alex can place all the pieces on the canvas without overlapping. Each piece must be placed such that it lies completely within the boundaries of the canvas. Write a function to determine whether it\'s possible to place all the art pieces on the canvas. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), which represent the dimensions of the canvas. The second line contains a single integer k (1 ≤ k ≤ 15), which is the number of art pieces Alex wants to place. The next k lines each contain two integers wi and hi (1 ≤ wi, hi ≤ 100), representing the dimensions of the ith art piece. Output Print \\"YES\\" if Alex can place all the pieces on the canvas without overlapping and within the canvas boundaries, otherwise print \\"NO\\". Examples Input 5 5 2 4 2 2 3 Output YES Input 4 6 3 2 2 4 3 3 2 Output NO Note In the first example, rotating the second piece to 3x2, you can place the first piece (4x2) and the second piece (3x2) on the 5x5 canvas without overlapping, thus the output is \\"YES\\". In the second example, no matter how you arrange the pieces, they cannot all fit on the 4x6 canvas without overlapping, resulting in the output \\"NO\\".","solution":"def can_place_art_pieces(n, m, art_pieces): from itertools import permutations # Trying to fit pieces one after the other on the canvas def can_fit(pieces, canvas_width, canvas_height): used_width, used_height = 0, 0 max_height_in_row = 0 for w, h in pieces: if used_width + w <= canvas_width: used_width += w max_height_in_row = max(max_height_in_row, h) elif used_height + h <= canvas_height: used_height += max_height_in_row max_height_in_row = h if used_height + h > canvas_height: return False used_width = w else: return False return used_height + max_height_in_row <= canvas_height for perm in permutations(art_pieces): if can_fit(perm, n, m) or can_fit(perm, m, n): return \\"YES\\" return \\"NO\\" # Example usage: n, m = 5, 5 k = 2 art_pieces = [(4, 2), (2, 3)] print(can_place_art_pieces(n, m, art_pieces)) # Output should be: YES"},{"question":"# Task Write a function that takes an integer array and returns the sum of the two largest unique elements. # Example For `arr = [3, 2, 3, 4, 8, 8]`, the output should be `12`. There are only two unique elements that are the largest which are 4 and 8. For `arr = [1, 1, 1, 1, 1]`, the output should be `1`. Since the array has only one unique element, the sum is just that element. # Input/Output - `[input]` array `arr` An array of integers. - `[output]` an integer","solution":"def sum_of_two_largest_unique_elements(arr): Returns the sum of the two largest unique elements in the array. If the array has less than two unique elements, the sum is the largest unique element. unique_elements = list(set(arr)) unique_elements.sort(reverse=True) if len(unique_elements) >= 2: return unique_elements[0] + unique_elements[1] elif len(unique_elements) == 1: return unique_elements[0] else: return 0"},{"question":"A restaurant has decided to automate the management of their table bookings. Each table in the restaurant seats up to a certain number of people, and reservations are made for a specific number of guests at a specific time. As the restaurant\'s programmer, you\'re tasked with managing these reservations. You need to determine whether each reservation can be accommodated given the constraints of the table\'s capacity and whether the table is already booked for that time slot. Each table will have a unique ID, a capacity, and a list of existing reservations. Each reservation specifies the number of people and a time slot. Given the information about the tables and a list of new reservations, write a program that determines whether each new reservation can be accepted or not. Input Format: - The first line contains an integer T, the number of tables. - The next 2*T lines provide information about each table: - The first line contains the table ID (a unique string) and table capacity (an integer). - The second line contains the number of existing reservations R, followed by R pairs of integers, each representing a time slot in 24-hour format (e.g., 1330 for 1:30 PM), and the number of guests for that reservation. - The next line contains an integer N, the number of new reservation attempts. - The following N lines each contain a table ID, a time slot (in the same 24-hour format), and the number of guests for the reservation attempt. Output Format: For each reservation attempt, print \\"Accepted\\" if the reservation can be made or \\"Rejected\\" if it cannot. Constraints: 1 ≤ T ≤ 100 1 ≤ R ≤ 10 1 ≤ N ≤ 200 1 ≤ table capacity ≤ 10 1 ≤ number of guests ≤ table capacity 0 ≤ time slot ≤ 2359 Assume time slots are in 24-hour format without a colon (e.g., 1330 for 1:30 PM). SAMPLE INPUT 2 Table1 4 2 1200 4 1930 2 Table2 2 1 1800 2 3 Table1 1200 2 Table2 1700 2 Table2 1800 1 SAMPLE OUTPUT Rejected Accepted Rejected Explanation: 1. The reservation for Table1 at 1200 for 2 people is rejected because Table1 is already fully booked at 1200. 2. The reservation for Table2 at 1700 for 2 people is accepted because Table2 has no reservations at 1700. 3. The reservation for Table2 at 1800 for 1 person is rejected because Table2 is already fully booked at 1800.","solution":"def manage_reservations(tables_info, reservation_attempts): This function checks if a list of new table reservations can be accommodated. :param tables_info: List of tuples containing table information and their reservations. Each tuple is (table_id, capacity, reservations) where reservations is a list of tuples (time_slot, num_guests). :param reservation_attempts: List of tuples containing reservation attempts. Each tuple is (table_id, time_slot, num_guests). :return: List of strings \\"Accepted\\" or \\"Rejected\\" for each reservation attempt. # Convert tables_info to a dictionary for easy access tables = {} for table_id, capacity, reservations in tables_info: tables[table_id] = { \\"capacity\\": capacity, \\"reservations\\": {time_slot: num_guests for time_slot, num_guests in reservations} } # Process each reservation attempt results = [] for table_id, time_slot, num_guests in reservation_attempts: if table_id in tables: table = tables[table_id] if time_slot in table[\'reservations\']: if table[\'reservations\'][time_slot] + num_guests <= table[\'capacity\']: results.append(\\"Accepted\\") else: results.append(\\"Rejected\\") else: if num_guests <= table[\'capacity\']: results.append(\\"Accepted\\") else: results.append(\\"Rejected\\") else: results.append(\\"Rejected\\") return results # Sample usage with the provided example: tables_info = [ (\\"Table1\\", 4, [(1200, 4), (1930, 2)]), (\\"Table2\\", 2, [(1800, 2)]), ] reservation_attempts = [ (\\"Table1\\", 1200, 2), (\\"Table2\\", 1700, 2), (\\"Table2\\", 1800, 1), ] output = manage_reservations(tables_info, reservation_attempts) print(output) # Should print [\\"Rejected\\", \\"Accepted\\", \\"Rejected\\"]"},{"question":"Given a binary tree, write a function to check whether it is a mirror of itself (i.e., symmetric around its center). Input: First line of input contains number of testcases T. For each testcase, there will be two lines of input. First line contains the number of nodes N in the binary tree, and the second line contains N space-separated values representing the tree nodes in level order traversal (where -1 indicates a NULL node). Output: For each testcase, output \\"Yes\\" if the binary tree is symmetric, otherwise output \\"No\\". User Task: The task is to complete the function isSymmetric() which checks whether the given binary tree is symmetric. Constraints: 1 <= T <= 100 1 <= N <= 1000 Example: Input: 2 7 1 2 2 3 4 4 3 5 1 2 2 -1 3 -1 3 Output: Yes No Explanation: Testcase 1: The binary tree [1, 2, 2, 3, 4, 4, 3] is symmetric. Testcase 2: The binary tree [1, 2, 2, -1, 3, -1, 3] is not symmetric.","solution":"class TreeNode: def __init__(self, val=0): self.val = val self.left = None self.right = None def is_symmetric_tree(root): if not root: return True def is_mirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root.left, root.right) def construct_tree_from_level_order(values): if not values or values[0] == -1: return None root = TreeNode(values[0]) queue = [root] i = 1 while i < len(values) and queue: current = queue.pop(0) if i < len(values) and values[i] != -1: current.left = TreeNode(values[i]) queue.append(current.left) i += 1 if i < len(values) and values[i] != -1: current.right = TreeNode(values[i]) queue.append(current.right) i += 1 return root def isSymmetric(N, values): root = construct_tree_from_level_order(values) return \\"Yes\\" if is_symmetric_tree(root) else \\"No\\""},{"question":"You are working on a project that aims to ensure the safety of usage of bank account numbers. Your task is to check if the given bank account number is valid. A bank account number is considered valid if it meets the following criteria: - It contains exactly 10 digits. - It should not have any leading zeros. - It should not contain any character other than digits. Write a program which, given a string A representing a bank account number, determines whether A should be accepted or not. -----Input----- A single line of input which is the string A, representing the bank account number. The string consists of only digits 0–9 and may contain leading zeros or any other extraneous characters. The length of the string will not exceed 100 characters. -----Output----- Print Valid if A should be accepted according to the given rules, and Invalid otherwise. -----Examples----- Sample Input: 1234567890 Sample Output: Valid Sample Input: 12345678901 Sample Output: Invalid Sample Input: 0123456789 Sample Output: Invalid Sample Input: 12345a7890 Sample Output: Invalid","solution":"def is_valid_bank_account(account_str): Checks if the bank account number is valid. # Check if the length is exactly 10 if len(account_str) != 10: return \\"Invalid\\" # Check if all characters are digits if not account_str.isdigit(): return \\"Invalid\\" # Check if there are leading zeros if account_str[0] == \'0\': return \\"Invalid\\" return \\"Valid\\""},{"question":"**Problem Statement:** Alice and Bob are playing a turn-based game using strings and numbers. Each turn, a player must perform one of two operations: either insert a single character into a string or remove the last character from a string. The goal of the game is to transform an initial empty string into a target string, but they can also manipulate a secondary string during their turns. There are two strings: primary and secondary. Initially, both strings are empty. The target is to form the target string on the primary string precisely. Alice always starts first, and both players take the alternative turns. In each turn, a player can choose to: 1. Insert a character from the target string, in the correct order, into either the primary or secondary string. 2. Remove the last character from either the primary or secondary string. Alice wants to win the game by making the primary string match the target string exactly in some turn. Help Alice to determine the minimum number of moves required to transform the primary string to the target string. # Input: - The first line contains an integer t, the number of test cases. - Each of the t test cases consists of a single line containing a string `target`, the string to be formed. # Output: - For each test case, print a single integer, the minimum number of moves required for Alice to transform the primary string to the target string. # Constraints: - 1 ≤ t ≤ 100 - 1 ≤ |target| ≤ 1000 - The `target` string consists of lowercase English letters only. # Sample Input: ``` 2 abc aaa ``` # Sample Output: ``` 3 3 ``` # Explanation: For the first test case, Alice can insert \'a\', \'b\', and \'c\' into the primary string in three moves. For the second test case, Alice can insert \'a\', \'a\', and \'a\' into the primary string in three moves. In both cases, the optimal strategy is simply to insert each character from the target string into the primary string in order, making the minimum number of moves equal to the length of the target string.","solution":"def min_moves_to_form_string(target): This function returns the minimum number of moves required to transform the primary string to the target string. Since we can only insert characters in order or remove from the end, the minimum moves are simply the length of the target string. return len(target) def solve_game(t, targets): Given the number of test cases t and the list of target strings, this function returns a list of the minimum number of moves for each test case. results = [] for target in targets: results.append(min_moves_to_form_string(target)) return results"},{"question":"In a faraway land, the kingdom of Algoria runs on strict laws of arithmetic. The citizens of Algoria are preparing for a grand festival where they will perform a complex dance routine involving numbers. The king has ordered the lead mathematician to prepare a special number sequence that satisfies the following rules: 1. The sequence must be of length `n`. 2. Each number in the sequence must be between `1` and `k` (inclusive). 3. The sum of the numbers in the sequence must be exactly `target`. The lead mathematician is quite busy with other tasks and has asked for your help to determine the total number of such valid sequences. Input format: The first line contains an integer `t`, denoting the number of test cases. Each of the next `t` lines contains three integers `n`, `k`, and `target` separated by spaces. Output format: For each test case, output the total number of valid sequences in a new line. Constraints: 1 ≤ t ≤ 100 1 ≤ n ≤ 50 1 ≤ k ≤ 100 1 ≤ target ≤ 10^3 SAMPLE INPUT 2 3 2 4 2 3 5 SAMPLE OUTPUT 3 2 Explanation: For the first test case, the valid sequences are [1,1,2], [1,2,1], and [2,1,1]. For the second test case, the valid sequences are [2,3] and [3,2].","solution":"def count_valid_sequences(n, k, target): This function returns the number of valid sequences of length n where each number is between 1 and k and the sum of the numbers is exactly target. # Initialize DP table dp = [[0] * (target + 1) for _ in range(n + 1)] # Base case: There\'s one way to make a sum of 0 with 0 numbers dp[0][0] = 1 # Fill the DP table for i in range(1, n + 1): for current_sum in range(target + 1): for number in range(1, k + 1): if current_sum >= number: dp[i][current_sum] += dp[i - 1][current_sum - number] return dp[n][target] def solve(test_cases): result = [] for n, k, target in test_cases: result.append(count_valid_sequences(n, k, target)) return result"},{"question":"You are given a list of strings that represent stock symbols. Each stock symbol is associated with its corresponding price at the end of the day. Your task is to find the most frequently occurring price. If there are multiple prices with the same frequency, return the highest one among them. Input - The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of stock symbols. - The next n lines each contain a stock symbol and its price at the end of the day. Output - Print the most frequently occurring price. If there are multiple prices with the same frequency, print the highest one among them. Example Input 6 AAPL 150 GOOG 80 MSFT 80 AMZN 150 TSLA 80 FB 150 Output 150 Explanation 150 and 80 both have a frequency of 3. Among these, 150 is higher. Thus, the output is 150.","solution":"def most_frequent_price(stock_data): from collections import Counter # Extract prices from stock_data prices = [int(data.split()[1]) for data in stock_data] # Count the frequency of each price price_counts = Counter(prices) # Find the highest frequency max_frequency = max(price_counts.values()) # Find the prices with the highest frequency frequent_prices = [price for price, count in price_counts.items() if count == max_frequency] # Return the highest price among the most frequent ones return max(frequent_prices)"},{"question":"Fumiko is a professional chef who loves to experiment with flavors by mixing different ingredients. She is currently preparing a special dish and has `N` different ingredients, each with a distinct flavor value represented as an integer. Fumiko wants to mix exactly two ingredients to create a new taste. The taste of the new dish is defined as the absolute difference between the flavor values of the two chosen ingredients. Help Fumiko determine the maximum possible taste she can achieve by choosing the best pair of ingredients. -----Constraints----- - 2 leq N leq 1000 - 0 leq flavor value of each ingredient leq 10000 - All flavor values are integers. -----Input----- Input is given from Standard Input in the following format: N flavor1 flavor2 ... flavorN -----Output----- Print the maximum possible taste Fumiko can achieve. -----Sample Input----- 5 1 6 3 10 15 -----Sample Output----- 14 Fumiko\'s ingredients have flavor values 1, 6, 3, 10, and 15. If she mixes the ingredients with flavor values 1 and 15, the taste of the new dish will be |1 - 15| = 14, which is the maximum possible.","solution":"def max_possible_taste(N, flavors): Returns the maximum possible taste Fumiko can achieve by choosing the best pair of ingredients. Parameters: N (int): The number of ingredients. flavors (list of int): The flavor values of the ingredients. Returns: int: The maximum possible taste. max_flavor = max(flavors) min_flavor = min(flavors) return abs(max_flavor - min_flavor)"},{"question":"# Task Given a string consisting of lowercase letters, your task is to determine whether it is possible to reorder it in such a way that no two adjacent characters are the same. # Example For `s = \\"aab\\"`, the output should be `True`. One possible way to reorder it is `\\"aba\\"`, which doesn\'t have repeating characters at adjacent positions. For `s = \\"aaab\\"`, the output should be `False`. Any possible reordering like `\\"aaab\\"`, `\\"aaba\\"`, etc., would still have repeating characters at adjacent positions. # Input/Output - `[input]` string `s` A string of lowercase English letters. Constraints: `1 ≤ s.length ≤ 100`. - `[output]` a boolean value `True` if it is possible to reorder the string such that no two adjacent characters are the same. `False` otherwise.","solution":"import collections def can_reorder_no_adjacent_duplicates(s): Determines if it is possible to reorder the string s such that no two adjacent characters are the same. Args: s (str): The input string consisting of lowercase English letters. Returns: bool: True if it is possible to reorder the string as described, False otherwise. # Count the frequency of each character freq = collections.Counter(s) # Find the maximum frequency max_freq = max(freq.values()) # Determine if the most frequent character can be placed such that no two are adjacent if max_freq > (len(s) + 1) // 2: return False return True"},{"question":"You are given a string `s` and an integer `n`. Your task is to rotate the string `n` times to the right. For example, the string `\\"hello\\"` rotated 2 times to the right becomes `\\"lohel\\"`. Write a function `rotate_string(s, n)` that takes in a string `s` and an integer `n`, and returns the string after rotating it `n` times to the right. You can assume that `n` is a non-negative integer. For example: - `rotate_string(\\"hello\\", 2) -> \\"lohel\\"` - `rotate_string(\\"abcdef\\", 4) -> \\"cdefab\\"` - `rotate_string(\\"abcdef\\", 6) -> \\"abcdef\\"` Good luck! If you like this problem, please try: [String - Find the unique character](https://www.codewars.com/kata/strings-matching) [All substrings of a string](https://www.codewars.com/kata/all-substrings-of-a-string)","solution":"def rotate_string(s, n): Rotates string s to the right by n times. If n is greater than the length of the string, it will be reduced to n % len(s). if not s: return s length = len(s) n = n % length return s[-n:] + s[:-n]"},{"question":"Farmer John has a rectangular farm divided into a grid of size n x m. Each cell of the grid represents a piece of the land that can either be fertile or barren. Farmer John wants to find all the rectangular sub-grids that consist solely of fertile land, and among them, identify the one with the largest area. Given a grid where \'1\' represents fertile land and \'0\' represents barren land, help Farmer John identify the area of the largest contiguous rectangular sub-grid of fertile land. Input The first line contains two integers n and m (1 ≤ n, m ≤ 200) — the dimensions of the grid. Each of the next n lines contains m characters (\'1\' or \'0\'), representing the grid. Output Output one integer — the area of the largest rectangle consisting entirely of \'1\'s. SAMPLE INPUT 4 5 10100 10111 11111 10010 SAMPLE OUTPUT 6 Explanation In the sample test case, the largest rectangle of fertile land (\'1\'s) has an area of 6, formed by: ``` 10100 10111 11111 10010 ```","solution":"def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle(matrix): if not matrix: return 0 n = len(matrix) m = len(matrix[0]) max_area = 0 histogram = [0] * m for i in range(n): for j in range(m): histogram[j] = histogram[j] + 1 if matrix[i][j] == \'1\' else 0 max_area = max(max_area, max_histogram_area(histogram)) return max_area def largest_fertile_rectangle(n, m, grid): return max_rectangle(grid)"},{"question":"In a magical world, there are two types of magical creatures, Dragons and Unicorns. A wizard is planning to create potions which require a certain number of Dragons and Unicorns. Each Dragon and Unicorn give a different magical essence needed for the potion: - A Dragon provides D units of Dragon essence. - A Unicorn provides U units of Unicorn essence. The wizard has a list of potions he wants to create and each potion requires E units of Dragon essence and F units of Unicorn essence. Your task is to help the wizard determine if he can create all the potions with the given number of Dragons and Unicorns. Input The first line contains two integers D and U, the total number of Dragon essence and Unicorn essence available, respectively. The second line contains two integers E and F, the number of Dragon essence and Unicorn essence each potion requires, respectively. The third line contains a single integer P, the total number of potions the wizard wants to create. Output Print \\"POSSIBLE\\" if the wizard can create all the potions, otherwise print \\"IMPOSSIBLE\\". Example Input: 10 15 2 3 4 Output: POSSIBLE Explanation In the example case, the wizard has 10 units of Dragon essence and 15 units of Unicorn essence. Each potion requires 2 units of Dragon essence and 3 units of Unicorn essence. To create 4 potions, he needs 2 * 4 = 8 units of Dragon essence and 3 * 4 = 12 units of Unicorn essence, which he has. So, it\'s possible to create all the potions. Example Input: 10 15 3 4 5 Output: IMPOSSIBLE Explanation In this case, to create 5 potions, the wizard needs 3 * 5 = 15 units of Dragon essence and 4 * 5 = 20 units of Unicorn essence. He does not have enough Unicorn essence to create all 5 potions. So, it is impossible to create all the potions.","solution":"def can_create_potions(D, U, E, F, P): Determine if it\'s possible to create P potions with the given essence requirements. Args: D (int): Total units of Dragon essence available. U (int): Total units of Unicorn essence available. E (int): Units of Dragon essence required per potion. F (int): Units of Unicorn essence required per potion. P (int): Number of potions to create. Returns: str: \\"POSSIBLE\\" if it\'s possible to create all potions, otherwise \\"IMPOSSIBLE\\". total_dragon_needed = E * P total_unicorn_needed = F * P if D >= total_dragon_needed and U >= total_unicorn_needed: return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\""},{"question":"Alice loves collecting different kinds of candies. She arranges her candies in a single row and each candy has an associated sweetness level. Alice decides to divide her candies into two consecutive groups, such that the absolute difference in the total sweetness levels of the two groups is minimized. Help Alice find the minimum possible absolute difference. Write a program that takes an integer n (the number of candies) and a sequence of n integers (the sweetness levels of the candies) as input, and outputs the minimum possible absolute difference. Note: The first group must contain at least one candy, and the second group must also contain at least one candy. EDIT Maximum number of test cases - 20, 1 ≤ n ≤ 1000, 1 ≤ sweetness levels ≤ 10^4 SAMPLE INPUT 5 1 3 2 4 2 SAMPLE OUTPUT 0","solution":"def minimum_sweetness_difference(n, sweetness_levels): # Step 1: Calculate the total sum of sweetness levels total_sweetness = sum(sweetness_levels) # Initialize variables min_diff = float(\'inf\') # We want to minimize this difference running_sum = 0 # Running sum of the sweetness levels from the left # Step 2: Iterate through the candies, computing the running sum and the corresponding difference for i in range(n - 1): # We split between i and i+1, so we stop at n-1 running_sum += sweetness_levels[i] remaining_sum = total_sweetness - running_sum # Calculate the absolute difference current_diff = abs(running_sum - remaining_sum) # Update the minimum difference found min_diff = min(min_diff, current_diff) return min_diff"},{"question":"# Best Time to Buy and Sell Stock with a Cool-Down Period You are given an array `prices` where `prices[i]` is the price of a given stock on the i^{th} day. Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: - After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). - Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). For example: If `prices = [1, 2, 3, 0, 2]`, you can: - Buy on day 0 (price = 1) - Sell on day 1 (price = 2) - Cooldown on day 2 - Buy on day 3 (price = 0) - Sell on day 4 (price = 2) Total profit = 3. Write a function `maxProfit(prices: List[int]) -> int` that takes in an array of prices and returns the maximum profit you can achieve under the given conditions. -----Function Signature----- ```python def maxProfit(prices: List[int]) -> int: pass ``` -----Input----- - An integer array `prices` of size n where 1 le n le 10^5 and 0 le prices[i] le 10^9. -----Output----- - Return an integer, the maximum profit that can be achieved given the conditions. -----Example----- Input: [1, 2, 3, 0, 2] Output: 3 Explanation: Buy on day 0 (price = 1), Sell on day 1 (price = 2), Cooldown on day 2, Buy on day 3 (price = 0), Sell on day 4 (price = 2) Total profit = (2 - 1) + (2 - 0) = 3","solution":"from typing import List def maxProfit(prices: List[int]) -> int: Returns the maximum profit achievable with the given prices, considering the cooldown period after each sell operation. if not prices: return 0 n = len(prices) sell = [0] * n buy = [0] * n cooldown = [0] * n buy[0] = -prices[0] sell[0] = 0 cooldown[0] = 0 for i in range(1, n): buy[i] = max(buy[i-1], cooldown[i-1] - prices[i]) sell[i] = buy[i-1] + prices[i] cooldown[i] = max(cooldown[i-1], sell[i-1]) return max(sell[-1], cooldown[-1])"},{"question":"Ravi loves gardening and wants to plant flowers in his garden. His garden has a long narrow path with N spots where he can plant flowers. Unfortunately, he knows that he cannot plant flowers in any two adjacent spots because they compete for resources and won\'t flourish. Given N, determine how many possible ways Ravi can plant flowers along the path. Input: First line of the input contains an integer T denoting the number of test cases. Then T lines follow each line containing an integer N. Output: Output the required number of ways in a new line for each test case. Constraints: 1 ≤ N ≤ 10^5 Sample Input 2 3 4 Sample Output 3 5 Explanation: Test case 1: For a garden with 3 spots, Ravi can plant flowers in the following ways: - Plant in spots {1} - Plant in spots {2} - Plant in spots {3} - Plant in spots {1, 3} Hence, there are 3 ways to plant the flowers without any two flowers being adjacent. Test case 2: For a garden with 4 spots, Ravi can plant flowers in the following ways: - Plant in spots {1} - Plant in spots {2} - Plant in spots {3} - Plant in spots {4} - Plant in spots {1, 3} - Plant in spots {1, 4} - Plant in spots {2, 4} Hence, there are 5 ways to plant the flowers without any two flowers being adjacent.","solution":"def find_ways_to_plant_flowers(n): Returns the number of ways to plant flowers in n spots without planting in adjacent spots. if n == 0: return 1 if n == 1: return 1 dp = [0] * (n + 1) dp[0] = 1 dp[1] = 1 for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] return dp[n] def process_test_cases(test_cases): results = [] for n in test_cases: results.append(find_ways_to_plant_flowers(n)) return results"},{"question":"Alex is organizing a contest with a series of tasks. Each task requires a certain amount of time to complete, and the contest must end exactly when all tasks are done. Alex wants to schedule the tasks such that the total time taken to complete all tasks equals a given duration D. Write a function that returns the combination of tasks that add up to the total duration D, where each task takes a distinct positive integer amount of time. -----Input----- The only line contains a positive integer number D (1 ≤ D ≤ 1000) — the total duration of all tasks. -----Output----- Print to the first line integer number k — the number of tasks. Print to the second line k distinct positive integer numbers: the duration of each task. The sum of k printed numbers should be exactly D. If there are many solutions, print any of them. -----Examples----- Input 6 Output 3 1 2 3 Input 10 Output 4 1 2 3 4 Input 1 Output 1 1","solution":"def find_task_durations(D): Returns the number of tasks and their durations such that the total time taken to complete all tasks equals D. # The approach is to use the smallest distinct positive integers i.e., 1, 2, 3, ... tasks = [] current_sum = 0 task_duration = 1 while current_sum + task_duration <= D: tasks.append(task_duration) current_sum += task_duration task_duration += 1 # After exiting the loop, if there\'s any remaining time to be added, increment the last task if current_sum < D: tasks[-1] += (D - current_sum) return tasks"},{"question":"Betsy is a robot that loves problem-solving and is equipped with a simple programming capability. Betsy is trying to solve a classic problem known as the \\"Equilibrium Point\\" in an array of integers. The equilibrium point in an array is a position such that the sum of elements before it is equal to the sum of elements after it. You need to help Betsy find the first (leftmost) equilibrium point in the array, if it exists. If no such point exists, Betsy should output `-1`. Input Format - The first line contains a single integer ( T ) (the number of test cases). - Each of the next ( T ) test cases consists of two lines: - The first line contains an integer ( n ) (the number of elements in the array). - The second line contains ( n ) space-separated integers representing the array. Constraints - ( 1 leq T leq 50 ) - ( 1 leq n leq 10^5 ) - ( -10^9 leq text{Array elements} leq 10^9 ) Output Format For each test case, output the position of the first equilibrium point (1-indexed). If no such point exists, output `-1`. Sample Input 2 5 1 3 5 2 2 4 1 2 3 4 Sample Output 3 -1 Explanation In the first test case: - Position 3 is the equilibrium point because the sum of elements before it (1 + 3) is equal to the sum of elements after it (2 + 2). In the second test case: - There is no position for which the sum of elements on the left is equal to the sum of elements on the right, hence the output is `-1`. Help Betsy by implementing the function to find the equilibrium point in the given arrays.","solution":"def find_equilibrium_points(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] arr = test_cases[i][1] total_sum = sum(arr) left_sum = 0 found = False for j in range(n): total_sum -= arr[j] if left_sum == total_sum: results.append(j + 1) found = True break left_sum += arr[j] if not found: results.append(-1) return results"},{"question":"John loves puzzles and recently came across a challenge that involves arranging boxes in a specific order. Each box has an integer labeled on it and the goal is to sort these boxes such that the sum of any three consecutive box numbers is always a multiple of a given integer, K. To make it more interesting, you may perform an operation of swapping any two boxes to achieve the desired order. He wants your help to determine if it is possible to sort the boxes with the given constraint. INPUT: - The first line contains a single integer T, the number of test cases. - Each test case starts with an integer K. - The second line of each test case contains an integer N, the number of boxes. - The third line contains N space-separated integers representing the labels on each box. OUTPUT: For each test case, output \\"YES\\" if it is possible to sort the boxes such that the sum of any three consecutive box numbers is a multiple of K. Otherwise, output \\"NO\\". CONSTRAINTS - 1 <= T <= 100 - 1 <= K <= 100 - 3 <= N <= 1000 - -10^4 <= Label of each box <= 10^4 SAMPLE INPUT 2 3 4 3 6 9 12 5 5 1 5 -2 4 -1 SAMPLE OUTPUT YES NO","solution":"def is_possible_to_sort_boxes(test_cases): Determines if it is possible to sort the boxes such that the sum of any three consecutive box numbers is always a multiple of K. :param test_cases: List of test cases, where each test case is represented by a tuple (K, boxes) where K is the integer multiple and boxes is the list of box labels. :return: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for K, boxes in test_cases: N = len(boxes) # Check if for every triplet (i-2, i-1, i), their sum is divisible by K is_good = True for i in range(2, N): if (boxes[i] + boxes[i-1] + boxes[i-2]) % K != 0: is_good = False break results.append(\\"YES\\" if is_good else \\"NO\\") return results # Example usage test_cases = [ (3, [3, 6, 9, 12]), (5, [1, 5, -2, 4, -1]) ] print(is_possible_to_sort_boxes(test_cases))"},{"question":"Implement a function `add_to_nested_dict` that takes a nested dictionary and a list of keys. The function should add a final key-value pair to this nested dictionary where the keys are the elements of the provided list and the value is a given value. If the nested structure does not exist, it will be created. If any key already exists, it should not be overwritten but used to continue adding to the structure. **Examples:** ```python >>> d = {\'level1\': {\'level2\': {\'level3\': \'value\'}}} >>> add_to_nested_dict(d, [\'level1\', \'level2\', \'level4\'], \'new_value\') {\'level1\': {\'level2\': {\'level3\': \'value\', \'level4\': \'new_value\'}}} >>> d = {} >>> add_to_nested_dict(d, [\'a\', \'b\', \'c\'], 1) {\'a\': {\'b\': {\'c\': 1}}} >>> d = {\'a\': {}} >>> add_to_nested_dict(d, [\'a\', \'b\', \'c\'], 2) {\'a\': {\'b\': {\'c\': 2}}} >>> d = {\'existing_key\': {\'inner_key\': \'inner_value\'}} >>> add_to_nested_dict(d, [\'existing_key\', \'new_inner_key\'], \'new_inner_value\') {\'existing_key\': {\'inner_key\': \'inner_value\', \'new_inner_key\': \'new_inner_value\'}} ``` **Notes**: - You can assume that all keys are strings. - If the dictionary at any depth is not present, it should be created as an empty dictionary. - The input list of keys is guaranteed to be non-empty.","solution":"def add_to_nested_dict(d, keys, value): Adds a value into a nested dictionary structure. Parameters: - d (dict): The dictionary to modify. - keys (list): List of keys representing the path to insert value. - value: The value to insert. Returns: - dict: The modified dictionary. current = d for key in keys[:-1]: if key not in current: current[key] = {} current = current[key] current[keys[-1]] = value return d"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine if the string contains any duplicate characters. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. For each test case, there is one line containing a string s. The string s consists only of lowercase English letters and its length is between 1 and 100. -----Output----- For each test case, print \\"YES\\" if there exists at least one duplicate character in the string. Otherwise, print \\"NO\\". You may print the output in any case (so, for example, the strings yEs, yes, Yes and YES are all recognized as positive answers). -----Examples----- Input 3 abc hello world Output NO YES NO -----Note----- In the first test case, the string \\"abc\\" has no duplicate characters. In the second test case, the string \\"hello\\" has the character \'l\' appearing twice. In the third test case, the string \\"world\\" has no duplicate characters.","solution":"def has_duplicates(s): Returns \\"YES\\" if the string s has any duplicate characters, otherwise \\"NO\\". return \\"YES\\" if len(set(s)) < len(s) else \\"NO\\" def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(has_duplicates(s)) return results"},{"question":"Harold is playing a game where he has to collect coins that are lined up in a row. Each coin has a value, which can be positive or negative. Harold can start from any coin and collect coins either by moving to the right or left but he cannot change direction once he starts moving. Help Harold determine the maximum sum of values he can collect. Input The first line contains the number of test cases, T. Each test case consists of two lines: - The first line contains a single integer, N, the number of coins. - The second line contains N integers representing the values of the coins, separated by spaces. Output For each test case, print the maximum sum of values Harold can collect, on a new line. Constraints SubTask 1 - 70 Points 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 -10^4 ≤ Value of Coin ≤ 10^4 SubTask 2 - 30 Points 1 ≤ T ≤ 2 1 ≤ N ≤ 10^3 -100 ≤ Value of Coin ≤ 100 Example Input: 2 5 1 -2 3 4 -1 3 -1 -2 -3 Output: 7 -1 Explanation Test Case 1: Harold can collect the maximum sum by starting at the 3rd coin with value 3 and moving right to collect 3 + 4 = 7. Test Case 2: Harold can collect the maximum sum of -1 by starting at the first coin, which is the least negative value coin.","solution":"def max_coins_sum(T: int, test_cases: list) -> list: results = [] for i in range(T): N, coins = test_cases[i] max_sum = float(\'-inf\') # Check max sum by moving to the right from any coin for start in range(N): current_sum = 0 for j in range(start, N): current_sum += coins[j] if current_sum > max_sum: max_sum = current_sum # Check max sum by moving to the left from any coin for start in range(N): current_sum = 0 for j in range(start, -1, -1): current_sum += coins[j] if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results # Example input T = 2 test_cases = [ (5, [1, -2, 3, 4, -1]), (3, [-1, -2, -3]) ] # Function call and printing results result = max_coins_sum(T, test_cases) for res in result: print(res)"},{"question":"Given an array of integers, determine if it is possible to form a valid arithmetic progression subset from the array. A subset forms an arithmetic progression if the difference between consecutive elements is constant. -----Input----- The first line contains a single integer N (1 leq N leq 10000), the number of elements in the array. The next line contains N space-separated integers a_1, a_2, dots , a_N. -----Output----- Output \\"YES\\" (without quotes) if there exists a non-empty subset of the array that can form an arithmetic progression, otherwise, output \\"NO\\". -----Examples----- Sample Input: 6 4 8 6 2 10 4 Sample Output: YES Sample Input: 4 10 5 20 15 Sample Output: YES Sample Input: 3 10 12 15 Sample Output: NO","solution":"def can_form_arithmetic_progression(arr): # Turn the list into a set to remove duplicates and then sort it arr = sorted(set(arr)) # If the length of the set is less than 2, we cannot form an arithmetic progression if len(arr) < 2: return \\"NO\\" # Check for any common difference d for i in range(len(arr) - 1): d = arr[i+1] - arr[i] # Form a new list based on the first element and difference d ap_set = set(arr[i] + j*d for j in range(len(arr))) # If the entire set is a subset of the original set, it\'s an AP if ap_set.issubset(set(arr)): return \\"YES\\" return \\"NO\\" # Read input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) array = list(map(int, data[1:N+1])) result = can_form_arithmetic_progression(array) print(result)"},{"question":"problem A group of friends likes to play a card game every weekend. The game is played with a standard deck of 52 cards. They have recently decided to adopt a new scoring method to make the game more interesting. Each card has a point value associated with it: - Cards 2 through 10 score points equal to their face value (2 to 10). - Jacks, Queens, and Kings each score 10 points. - Aces score 11 points. Create a program to compute the total score for each player\'s hand given the cards they have. Each player will always have 5 cards. The program should take the details of the cards for each player and output their total score. input The input consists of 3 lines, each containing details of the 5 cards held by one player. Each card detail is represented by a string. The string can be one of \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'J\', \'Q\', \'K\', or \'A\'. Each player\'s cards are space-separated. output Output the total score of the hand for each of the three players, one score per line. Examples Input 10 J Q 9 A 9 8 3 2 K A A A 5 5 Output 50 32 43","solution":"def score_hand(cards): Calculate the total score for a hand of cards. :param cards: List of cards as strings. :return: Total score as an integer. card_values = { \'2\': 2, \'3\': 3, \'4\': 4, \'5\': 5, \'6\': 6, \'7\': 7, \'8\': 8, \'9\': 9, \'10\': 10, \'J\': 10, \'Q\': 10, \'K\': 10, \'A\': 11 } return sum(card_values[card] for card in cards) def score_players_hands(players_hands): Compute the total score for each player\'s hand. :param players_hands: List of strings, where each string represents the cards of one player. :return: List of total scores for each player. return [score_hand(hand.split()) for hand in players_hands]"},{"question":"# Task Given a list of integers representing the heights of people standing in a line, write a function that calculates the maximum sum of heights of any three consecutive people in the line. In case there are fewer than three people, the function should return the sum of all their heights. # Input/Output `[input]` list `heights` A list of n integers (heights of people) such that 1 ≤ n ≤ 100 and each height is between 1 and 100. `[output]` an integer The maximum sum of the heights of any three consecutive people in the line, or the sum of all heights if the list has fewer than three elements. # Example For `heights = [1, 2, 3, 4, 5]`, the output should be `12`. For `heights = [10, 20]`, the output should be `30`.","solution":"def max_sum_of_three_consecutive(heights): Returns the maximum sum of heights of any three consecutive people in the list, or the sum of all heights if the list has fewer than three elements. n = len(heights) if n < 3: return sum(heights) max_sum = 0 for i in range(n - 2): current_sum = sum(heights[i:i + 3]) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are managing a warehouse inventory and want to keep track of the stock levels efficiently. The warehouse stores a variety of items, each identified by a unique ID. The stock levels are updated regularly based on daily deliveries and sales. Your task is to write a program that processes a series of updates to the stock levels and then answers queries about the current stock of specific items. The updates come in two forms: 1. A delivery, which increases the stock of a specific item. 2. A sale, which decreases the stock of a specific item. Queries ask for the current stock level of a specific item. Input The first line contains two integers, n and q (1 ≤ n, q ≤ 10^5) — the number of items and the number of updates or queries, respectively. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^6), where ai is the initial stock level of the i-th item. The next q lines describe the updates or queries: - A delivery is given as \\"DELIVERY x y\\" where x (1 ≤ x ≤ n) is the item ID and y (1 ≤ y ≤ 10^6) is the number of items delivered. - A sale is given as \\"SALE x y\\" where x (1 ≤ x ≤ n) is the item ID and y (1 ≤ y ≤ 10^6) is the number of items sold. - A query is given as \\"QUERY x\\" where x (1 ≤ x ≤ n) is the item ID. Output For each query, output the current stock level of the specified item. Example Input 5 6 10 20 30 40 50 DELIVERY 2 10 SALE 3 5 QUERY 2 SALE 5 10 DELIVERY 1 5 QUERY 5 Output 30 40 Explanation - Initial stock levels are [10, 20, 30, 40, 50] - After \\"DELIVERY 2 10\\", stock levels are [10, 30, 30, 40, 50] - After \\"SALE 3 5\\", stock levels are [10, 30, 25, 40, 50] - The first query asks for the stock of item 2, which is 30. - After \\"SALE 5 10\\", stock levels are [10, 30, 25, 40, 40] - After \\"DELIVERY 1 5\\", stock levels are [15, 30, 25, 40, 40] - The second query asks for the stock of item 5, which is 40.","solution":"def manage_inventory(n, q, stock_levels, operations): Given initial stock levels and a series of operations, manage the inventory and respond to queries. Args: n (int): Number of items. q (int): Number of operations or queries. stock_levels (list): Initial stock levels of the items. operations (list): List of operations and queries. Returns: list: List of results for each query. results = [] for operation in operations: op_details = operation.split() op_type = op_details[0] item_id = int(op_details[1]) - 1 if op_type == \\"DELIVERY\\": quantity = int(op_details[2]) stock_levels[item_id] += quantity elif op_type == \\"SALE\\": quantity = int(op_details[2]) stock_levels[item_id] -= quantity elif op_type == \\"QUERY\\": results.append(stock_levels[item_id]) return results"},{"question":"Determine if a given integer (n >= 0) is a palindrome. A palindrome is a number that reads the same backwards as forwards. For example, 121 is a palindrome, while 123 is not. Ensure the solution is efficient and handles all edge cases. All inputs will be valid.","solution":"def is_palindrome(n): Determines whether a given non-negative integer is a palindrome. :param n: A non-negative integer :return: True if the integer is a palindrome, False otherwise str_n = str(n) return str_n == str_n[::-1]"},{"question":"Gladys has a set of unique integer weights and a seesaw. Gladys wants to experiment with balancing the seesaw. The seesaw can be represented as a horizontal number line where each position to the left of the pivot (0) is negative and each position to the right of the pivot is positive. Gladys needs to decide how to place the weights on the seesaw such that it stays perfectly balanced. A seesaw is balanced if the sum of the moments about the pivot is zero, where the moment is defined as the product of the weight and its distance from the pivot. Formally, if a weight w_i is placed at position p_i on the seesaw, the moment is defined as w_i * p_i. Help Gladys determine if it is possible to place the given weights on the seesaw such that it remains balanced, and if so, provide one possible configuration. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10) — the number of weights. The second line contains n space-separated integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 1000) — the weights. -----Output----- If it is possible to balance the seesaw, print \\"YES\\" followed by n space-separated integers p_1, p_2, ..., p_n, where each p_i is the position of the weight w_i on the seesaw. If there are multiple solutions, print any of them. If it is not possible, print \\"NO\\". -----Examples----- Input 3 1 2 3 Output YES 1 -2 1 Input 2 4 6 Output NO","solution":"def balance_seesaw(weights): from itertools import product n = len(weights) positions = list(range(-n, 0)) + list(range(1, n + 1)) for config in product(positions, repeat=n): if len(set(config)) == n: # Ensure all positions are unique moment_sum = sum(w * p for w, p in zip(weights, config)) if moment_sum == 0: return \\"YES\\", config return \\"NO\\", [] def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) weights = list(map(int, data[1:])) result, config = balance_seesaw(weights) if result == \\"YES\\": print(result) print(\' \'.join(map(str, config))) else: print(result)"},{"question":"Given a series of numbers representing the cost to build different sections of a road, you need to divide these sections into two groups such that the difference between the total costs of the two groups is minimized. Each line of input consists of a list of positive integers representing the construction cost of each section. The goal is to find the minimum difference in total costs between the two groups. Print the total costs of the two groups in non-decreasing order. Input: - First line of input contains an integer T, the number of test cases. - Next T lines each contain a list of integers separated by space where each integer Ni denotes the construction cost of a section. Output: - For each test case, print the total costs of the two groups in non-decreasing order. Constraints: 1 ≤ T ≤ 100 1 ≤ number of sections per test case ≤ 100 1 ≤ Ni ≤ 1000 Sample Input: 2 3 1 4 2 2 10 20 15 5 5 Sample Output: 6 6 25 30","solution":"def min_cost_difference(costs): This function returns the two minimal cost groups with the closest possible difference. total_cost = sum(costs) n = len(costs) dp = [[False] * (total_cost // 2 + 1) for _ in range(n + 1)] dp[0][0] = True for i in range(1, n + 1): for j in range(total_cost // 2 + 1): dp[i][j] = dp[i - 1][j] or (j >= costs[i - 1] and dp[i - 1][j - costs[i - 1]]) for j in range(total_cost // 2, -1, -1): if dp[n][j]: group1 = j break group2 = total_cost - group1 return sorted([group1, group2]) def process_input(data): results = [] T = int(data[0]) for i in range(1, T + 1): costs = list(map(int, data[i].split())) results.append(min_cost_difference(costs)) return results"},{"question":"Given a sequence of numbers, Shreya is trying to find the longest subsequence such that the subsequence is increasing and the differences between adjacent numbers in the subsequence are all the same. She needs your help to write a program that identifies and returns the length of such a longest subsequence. For instance, if the sequence is [1, 3, 5, 4, 6, 8, 7], the longest subsequence where the differences between adjacent numbers is constant could be [1, 3, 5] or [4, 6, 8], both of which have length 3. Example: Given sequence = [10, 7, 4, 6, 8, 10, 11] The longest subsequence with a constant difference can be [4, 6, 8, 10], giving a length of 4. Input - The input starts with an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of elements in the sequence. - The next line contains N space-separated integers representing the sequence. Output - For each test case, output a single integer on a new line, the length of the longest subsequence that follows the problem\'s rules. Constraints 1 ≤ T ≤ 30 2 ≤ N ≤ 50 -1000 ≤ sequence[i] ≤ 1000 SAMPLE INPUT 2 7 10 7 4 6 8 10 11 6 1 7 3 5 9 11 SAMPLE OUTPUT 4 3","solution":"def longest_arithmetic_subsequence_length(sequence): This function takes a list of integers and returns the length of the longest subsequence where the differences between adjacent numbers are all the same. if not sequence: return 0 n = len(sequence) if n == 1: return 1 longest_length = 1 for i in range(n): for j in range(i + 1, n): diff = sequence[j] - sequence[i] current_length = 2 prev = sequence[j] for k in range(j + 1, n): if sequence[k] - prev == diff: current_length += 1 prev = sequence[k] longest_length = max(longest_length, current_length) return longest_length def solve(T, test_cases): results = [] for sequence in test_cases: results.append(longest_arithmetic_subsequence_length(sequence)) return results"},{"question":"Igor K. decided to enhance his data processing skills by practicing data compression techniques. One such technique he found interesting was run-length encoding (RLE). In this technique, consecutive occurrences of the same character are replaced by the character followed by the number of occurrences. For example, the string \\"aaabbcccc\\" would be compressed to \\"a3b2c4\\". Igor K. wants you to write a program that takes a string as input and returns its run-length encoded version. In this task, strings will only contain lowercase Latin letters. Input The input data consists of a single string s (1 ≤ |s| ≤ 1000) which needs to be encoded. Output Output the run-length encoded version of the string. Examples Input aaabbcccc Output a3b2c4 Input abcd Output a1b1c1d1 Input aabbccddeeff Output a2b2c2d2e2f2","solution":"def run_length_encoding(s): Returns the run-length encoded version of the input string s. if not s: return \\"\\" encoded_str = [] prev_char = s[0] count = 1 for char in s[1:]: if char == prev_char: count += 1 else: encoded_str.append(prev_char + str(count)) prev_char = char count = 1 encoded_str.append(prev_char + str(count)) # Handle the last set of characters return \'\'.join(encoded_str)"},{"question":"You are given a grid of size n times m filled with integers. A \\"snake\\" is defined as a path on the grid that starts at any cell and always moves to an adjacent cell either horizontally or vertically such that each number in the path is strictly greater than the previous number. Your task is to find the length of the longest snake that can be formed in the grid. -----Input----- The input consists of one or more test cases. The first line contains one integer q (1 le q le 10^3) — the number of test cases. Then q test cases follow. One test case is given as follows: - The first line of the test case contains two integers n and m (1 le n, m le 100) — the number of rows and columns of the grid. - The next n lines contain m integers each, representing the grid elements a_{i,j} (1 le a_{i,j} le 10^4). -----Output----- For each test case, print one integer — the length of the longest snake that can be formed in the corresponding grid. -----Example----- Input 2 3 3 1 2 3 6 5 4 7 8 9 4 4 4 3 2 1 5 6 7 16 8 9 10 15 11 12 13 14 Output 9 12","solution":"def longest_snake_path(grid): Find the length of the longest increasing snake path in a grid. def dfs(x, y, dp): if dp[x][y] != -1: return dp[x][y] max_length = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # four directions nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] > grid[x][y]: max_length = max(max_length, 1 + dfs(nx, ny, dp)) dp[x][y] = max_length return max_length if not grid: return 0 n, m = len(grid), len(grid[0]) dp = [[-1] * m for _ in range(n)] max_path_length = 1 for i in range(n): for j in range(m): max_path_length = max(max_path_length, dfs(i, j, dp)) return max_path_length def process_test_cases(test_cases): results = [] for case in test_cases: n, m, grid = case results.append(longest_snake_path(grid)) return results"},{"question":"Given an array of integers, you need to determine whether it\'s possible to split the array into two non-empty subarrays such that the sum of the elements in the first subarray is equal to the sum of the elements in the second subarray. Input The first line contains an integer n (2 ≤ n ≤ 10^5) — the size of the array. The second line contains n space-separated integers a1, a2, ..., an (|ai| ≤ 10^4) — the elements of the array. Output Output \\"YES\\" if you can split the array into two non-empty subarrays with equal sums, otherwise output \\"NO\\". Examples Input 6 1 2 3 4 5 5 Output YES Input 4 1 2 3 5 Output NO Explanation In the first example, you can split the array into subarrays [1, 2, 3, 4] and [5, 5]. Both subarrays have a sum of 10. In the second example, it\'s impossible to split the array into two subarrays with equal sums.","solution":"def can_split_into_equal_sum_subarrays(n, arr): Determines if the array can be split into two non-empty subarrays with equal sums. :param n: The size of the array. :param arr: List of integers, the elements of the array. :return: \'YES\' if the array can be split into two non-empty subarrays with equal sums, \'NO\' otherwise. total_sum = sum(arr) if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 current_sum = 0 for x in arr: current_sum += x if current_sum == half_sum: return \\"YES\\" return \\"NO\\" # Example usage: # print(can_split_into_equal_sum_subarrays(6, [1, 2, 3, 4, 5, 5])) # Output: \\"YES\\" # print(can_split_into_equal_sum_subarrays(4, [1, 2, 3, 5])) # Output: \\"NO\\""},{"question":"A storage facility consists of a row of storage units of varying size. To organize the facility, we want to measure the length of the longest contiguous subarray of storage units where the units are increasing in size. Given an array of integers representing the sizes of storage units in order, determine the length of the longest increasing contiguous subarray. Example n=6 sizes=[1,2,2,3,4,1] The longest increasing contiguous subarray is [2,3,4] with length 3. Return 3. Function Description Complete the function longestIncreasingContiguousSubarray in the editor below. The function must return an integer representing the length of the longest increasing contiguous subarray. longestIncreasingContiguousSubarray has the following parameters: int sizes[n]: the sizes of the storage units Returns int: the length of the longest increasing contiguous subarray Input Format The first line of input contains an integer t, the number of test cases. Each test case consists of two lines: The first line contains an integer n, the number of storage units (size of sizes). The second line contains n space-separated integers (sizes[1], sizes[2], ..., sizes[n]) representing the sizes of the storage units. Constraints 1leq tleq10 1leq nleq1000 1leq sizes[i]leq1000 Sample Input 2 6 1 2 2 3 4 1 5 5 4 3 2 1 Sample Output 3 1 Explanation For the first test case, the longest increasing contiguous subarray is [2,3,4], which has length 3. For the second test case, no increasing contiguous subarray length is more than 1. Hence, the longest increasing contiguous subarray has length 1.","solution":"def longestIncreasingContiguousSubarray(sizes): Returns the length of the longest increasing contiguous subarray. n = len(sizes) if n == 0: return 0 longest = 1 current_length = 1 for i in range(1, n): if sizes[i] > sizes[i - 1]: current_length += 1 longest = max(longest, current_length) else: current_length = 1 return longest def process_cases(t, cases): results = [] for i in range(t): n = cases[i][0] sizes = cases[i][1] result = longestIncreasingContiguousSubarray(sizes) results.append(result) return results"},{"question":"Sum of Digits You have a number, and you wonder about the sum of its digits. You could of course do it all by yourself, but as a programmer, you know that\'s a job for a good algorithm! So you decide to write a function that calculates the sum of the digits of a given non-negative integer. Task Given a non-negative integer, find and return the sum of its digits. > For example, the sum of the digits of 1234 is 1 + 2 + 3 + 4 = 10. # Examples ``` 1234 => 10 0 => 0 5 => 5 9876 => 30 1111 => 4 ```","solution":"def sum_of_digits(n): Returns the sum of the digits of a given non-negative integer. :param n: A non-negative integer :return: Sum of the digits of the given number return sum(int(digit) for digit in str(n))"},{"question":"Write a function that takes a string representing a mathematical expression containing non-negative integers and operators \'+\', \'-\', \'*\', and \'/\' (with standard operator precedence), and returns the result of the expression as an integer. You can assume that the input string is always a valid expression. Use integer division for \'/\' (i.e., discard any remainder). Examples: Input \\"3+5*2\\" Output 13 Input \\"10+2*6/4-3\\" Output 10","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression string containing non-negative integers and operators \'+\', \'-\', \'*\', and \'/\'. The function respects the standard operator precedence and uses integer division for \'/\'. :param expression: A string representing the mathematical expression :return: The result of the expression as an integer def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) # integer division def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\' or op == \'/\': return 2 return 0 values = [] operators = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) != 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) != 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1]"},{"question":"A company wants to track the processing of several shipments in their warehouse. Each shipment is identified by a unique ID and has a certain number of packages. The warehouse uses a conveyor belt system, where packages are processed in a specific order. The company needs a program to manage and track the status of each shipment. You need to design and implement a program that handles the following operations: 1. **Add** a new shipment to the conveyor belt with a given shipment ID and number of packages. 2. **Process** the packages on the conveyor belt, which means marking them as \\"processed\\". Packages are processed in the order they were added. 3. **Query** for the status of any given shipment ID to verify if all its packages have been processed. The operations are defined as follows: - **Add X Y:** Adds a new shipment with ID `X` containing `Y` packages to the conveyor belt. - **Process Z:** Processes `Z` packages from the conveyor belt. Packages should be processed in the same order they were added. - **Query X:** Outputs \\"Complete\\" if all packages of the shipment with ID `X` have been processed, otherwise outputs \\"Incomplete\\". Input The input consists of multiple datasets. Each dataset starts with an integer `N`, the number of commands (1 ≤ N ≤ 100,000), followed by `N` lines describing the commands. Commands are of three types as specified: - *Add X Y* where X is the shipment ID (0 ≤ X ≤ 10^9) and Y is the number of packages (1 ≤ Y ≤ 10^9). - *Process Z* where Z is the number of packages to process (1 ≤ Z ≤ 10^9). - *Query X* where X is the shipment ID (0 ≤ X ≤ 10^9). The end of the input is indicated by a single line containing a `0`. Output For each *Query* command, output either \\"Complete\\" or \\"Incomplete\\" based on the status of the shipment. Put a blank line after each dataset. Sample Input ``` 6 Add 1 5 Add 2 3 Process 4 Query 1 Process 4 Query 1 0 ``` Output for the Sample Input ``` Incomplete Complete ``` Explanation of Sample Input - Add shipment 1 with 5 packages to the conveyor belt. - Add shipment 2 with 3 packages to the conveyor belt. - Process 4 packages (2 from shipment 1, 2 from shipment 2). - Query if all packages of shipment 1 are processed (result: Incomplete). - Process the remaining 4 packages (3 from shipment 2, 1 from shipment 1). - Query if all packages of shipment 1 are processed (result: Complete).","solution":"from collections import deque class ConveyorBeltSystem: def __init__(self): self.shipments = deque() self.package_count = {} self.processed_count = {} def add_shipment(self, shipment_id, num_packages): if shipment_id not in self.package_count: self.package_count[shipment_id] = 0 self.processed_count[shipment_id] = 0 self.package_count[shipment_id] += num_packages self.shipments.append((shipment_id, num_packages)) def process_packages(self, num_packages): while num_packages > 0 and self.shipments: shipment_id, packages_left = self.shipments.popleft() if packages_left <= num_packages: num_packages -= packages_left self.processed_count[shipment_id] += packages_left else: self.processed_count[shipment_id] += num_packages self.shipments.appendleft((shipment_id, packages_left - num_packages)) num_packages = 0 def query_shipment(self, shipment_id): if self.processed_count[shipment_id] == self.package_count[shipment_id]: return \\"Complete\\" else: return \\"Incomplete\\" def process_commands(commands): cbs = ConveyorBeltSystem() results = [] for command in commands: parts = command.split() if parts[0] == \\"Add\\": cbs.add_shipment(int(parts[1]), int(parts[2])) elif parts[0] == \\"Process\\": cbs.process_packages(int(parts[1])) elif parts[0] == \\"Query\\": result = cbs.query_shipment(int(parts[1])) results.append(result) return results"},{"question":"Write a program that reads an integer n and a list of n integers, and prints \\"Sorted\\" if the list is in non-decreasing order, otherwise \\"Unsorted\\". Constraints * 1 ≤ n ≤ 100 * Each integer in the list is between -1000 and 1000 Input The first line contains an integer n. The second line contains n integers separated by spaces. Output Print \\"Sorted\\" or \\"Unsorted\\". Examples Input 4 2 3 5 7 Output Sorted Input 5 1 3 2 4 6 Output Unsorted","solution":"def check_sorted(n, lst): Returns \\"Sorted\\" if the list is in non-decreasing order, otherwise \\"Unsorted\\". :param n: The number of integers in the list :param lst: The list of integers :return: String \\"Sorted\\" or \\"Unsorted\\" for i in range(n - 1): if lst[i] > lst[i + 1]: return \\"Unsorted\\" return \\"Sorted\\""},{"question":"Major music streaming platforms want to predict the popularity of songs based on user listening patterns. Engineers working on this problem have decided to use a simplified representation where each user\'s listening history is considered as a sequence of music tracks played in the order of occurrence. The goal is to identify the most frequently played unique sequence of k consecutive tracks within each user’s listening history. You are given a log of music tracks played by a user in the form of a string `tracks`, where each character represents a unique music track. Write a program to find the most frequently occurring sequence of `k` consecutive tracks. If there are multiple sequences with the same highest frequency, return the lexicographically smallest sequence. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 50). The description of the test cases follows. For each test case: - The first line contains an integer k (1 le k le 1000), the length of the track sequences. - The second line contains a string `tracks` (1 le |tracks| le 10^6) representing the sequence of tracks played by the user. -----Output----- For each test case, print the most frequently occurring sequence of `k` consecutive tracks in the `tracks` string. If there are multiple sequences with the same highest frequency, print the lexicographically smallest sequence. -----Examples----- Input 3 2 ababcabcab 3 zzzaaabbbcccaaazzzo 4 aaaaaaa Output ab aaa aaaa -----Note----- For the first test case, the sequences of length 2 appearing most frequently are \\"ab\\" and \\"bc\\". Since \\"ab\\" is lexicographically smaller, it is the result. In the second test case, the sequence \\"aaa\\" appears most frequently, three times. In the third test case, the only possible sequence of length 4 is \\"aaaa\\", which occurs four times.","solution":"from collections import defaultdict def most_frequent_sequence(t, test_cases): results = [] for k, tracks in test_cases: sequence_count = defaultdict(int) # Calculate frequencies of each k-length sequence for i in range(len(tracks) - k + 1): sequence = tracks[i:i+k] sequence_count[sequence] += 1 # Find the sequence with the highest frequency and lexicographically smallest max_frequency = 0 result_sequence = \\"\\" for sequence, count in sequence_count.items(): if count > max_frequency or (count == max_frequency and sequence < result_sequence): max_frequency = count result_sequence = sequence results.append(result_sequence) return results # Example usage: # test_cases = [(2, \'ababcabcab\'), (3, \'zzzaaabbbcccaaazzzo\'), (4, \'aaaaaaa\')] # print(most_frequent_sequence(3, test_cases))"},{"question":"You are given a list of integers representing the severity levels of various incidents in a system. Each integer represents the severity level of a single incident, where a higher number indicates a more severe incident. The goal is to identify the top `k` most severe incidents and return their severity levels in descending order. Write a program that: 1. Reads the list of integers and the value of `k`. 2. Identifies the `k` most severe incidents. 3. Prints the severity levels of these top `k` incidents in descending order. Constraints: - The list contains at least `k` and at most 100,000 integers. - 1 ≤ k ≤ 1000 - The severity levels are integers between 1 and 1,000,000. Input: - The first line contains an integer `n`, the number of incidents. - The second line contains `n` space-separated integers representing the severity levels of the incidents. - The third line contains the integer `k`. Output: - Print the `k` most severe incidents in descending order on a single line. Example: Input: ``` 10 1 23 5 76 8 45 9 4 12 15 3 ``` Output: ``` 76 45 23 ```","solution":"def find_top_k_incidents(n, severity_levels, k): Finds the top k most severe incidents from a list of severity levels. Parameters: n (int): Number of incidents. severity_levels (list of int): A list of severity levels. k (int): Number of top incidents to identify. Returns: List of int: The severity levels of the top k incidents in descending order. if k == 0: return [] # Sort the severity_levels in descending order and return the k most severe incidents top_k_incidents = sorted(severity_levels, reverse=True)[:k] return top_k_incidents # Usage example (would be commented out in a module file): # n = int(input()) # severity_levels = list(map(int, input().split())) # k = int(input()) # print(*find_top_k_incidents(n, severity_levels, k))"},{"question":"Given an integer n, find the longest arithmetic progression (AP) that can be formed using integers from 1 to n inclusive. An arithmetic progression is a sequence of numbers such that the difference between any two consecutive terms is constant. Constraints * 1 ≤ n ≤ 10^5 Input The input is given in the following format. > n Output Print the length of the longest arithmetic progression that can be formed from the integers from 1 to n inclusive. Examples Input 9 Output 9 Input 7 Output 7 Input 14 Output 14","solution":"def longest_arithmetic_progression(n): Returns the length of the longest arithmetic progression that can be formed using integers from 1 to n inclusive. return n"},{"question":"You are given a sequence of integers and you need to form the largest possible number by concatenating the given integers. Return the largest number you can form as a string. -----Input----- The first line contains a single integer T denoting the number of test cases. Then T test cases follow. The first line of each test case contains a single integer N denoting the number of integers. The second line of each test case contains N space-separated integers. -----Output----- For each test case output a single line representing the largest possible number you can form by concatenating the given integers. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 9 - 0 ≤ Each integer ≤ 1000 -----Example----- Input: 2 3 10 2 9 4 54 546 548 60 Output: 9102 6054854654 -----Explanation----- Example Case 1. By concatenating in the order 9, 10, 2 we get the largest number 9102. Example Case 2. By concatenating in the order 60, 548, 546, 54 we get the largest number 6054854654.","solution":"from functools import cmp_to_key def largest_number(nums): Returns the largest number formed by concatenating the given list of integers. # Convert numbers to strings for comparison strs = list(map(str, nums)) # Define custom comparator def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Sort the array with the custom comparator sorted_strs = sorted(strs, key=cmp_to_key(compare)) # Concatenate and return the largest number largest_num = \'\'.join(sorted_strs) # In case all numbers are zero if largest_num[0] == \'0\': return \'0\' return largest_num def process_test_cases(test_cases): results = [] for case in test_cases: n, nums = case results.append(largest_number(nums)) return results"},{"question":"A software company needs to manage a collection of projects. Each project is described by an integer ID and a list of dependent project IDs that must be completed before the project itself can be started. Given this setup, you are required to simulate the process of completing all the projects in such a way that for each project, all its dependencies are completed first. Write a function `getProjectOrder(n, dependencies)` that determines an order in which to complete the projects. - `n` is an integer representing the total number of projects (numbered 1 through n). - `dependencies` is a list of lists, where each sublist `[a, b]` indicates that project `b` must be completed before project `a`. Your task is to return a list of project IDs in an order that respects the dependencies or an empty list if it\'s not possible to complete all projects due to cyclic dependencies. Input - An integer n (1 ≤ n ≤ 105) — the number of projects. - A list of lists `dependencies` where each inner list has two integers a and b (1 ≤ a, b ≤ n) — meaning project `b` must be completed before project `a`. Output - A list of integers representing the order in which to complete the projects or an empty list if no such order exists. Examples Input 5 [[2, 1], [3, 2], [4, 2], [4, 3], [5, 4]] Output [1, 2, 3, 4, 5] Input 4 [[2, 1], [3, 2], [1, 3]] Output [] Note In the first sample input, the correct order to complete the projects is `[1, 2, 3, 4, 5]`. In the second sample input, no valid order exists due to a cyclic dependency involving projects 1, 2, and 3. Important Note This problem can be solved using topological sorting in a directed graph context. The existence of cycles must be checked and properly handled. If cycles are detected, the function should return an empty list, indicating that it\'s impossible to complete all projects.","solution":"from collections import defaultdict, deque def getProjectOrder(n, dependencies): # Create an adjacency list and in-degree tracker adj_list = defaultdict(list) in_degree = [0] * (n + 1) # Build the adjacency list and populate in-degree for a, b in dependencies: adj_list[b].append(a) in_degree[a] += 1 # Initialize the queue with projects that have no prerequisites queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) project_order = [] # Process nodes with no incoming edges while queue: project = queue.popleft() project_order.append(project) # Decrease the in-degree of neighboring nodes for neighbor in adj_list[project]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If we\'ve processed all projects, return the order, otherwise return empty list return project_order if len(project_order) == n else []"},{"question":"You are organizing a charity event and have a list of n participants who have registered. Each participant has indicated the time periods during the day when they are available to volunteer. Your task is to determine if it is possible to schedule a meeting that includes all participants. -----Input----- The first line of the input contains an integer n (1 leq n leq 10^4), which is the number of participants. Following that are n lines, each describing the availability of one participant. Each such line contains two nonnegative integers a and b (0 leq a < b leq 10^9), where a is the start time and b is the end time of the period during which the participant is available. -----Output----- Display yes if there exists a time period during which all n participants are available, and no otherwise. -----Examples----- Sample Input 1: 3 1 5 2 6 3 8 Sample Output 1: yes Sample Input 2: 3 1 5 6 10 11 15 Sample Output 2: no","solution":"def can_schedule_meeting(n, availabilities): Determines if there\'s a common time period when all participants are available. Parameters: n (int): Number of participants. availabilities (list of tuples): List of tuples where each tuple contains two integers, the start and end times of availability. Returns: str: \'yes\' if a common time period exists, \'no\' otherwise. if n == 0: return \\"no\\" # Initialize the common availability window with the maximum possible range common_start = 0 common_end = 10**9 for start, end in availabilities: common_start = max(common_start, start) common_end = min(common_end, end) # If at any point the common availability window becomes invalid if common_start >= common_end: return \\"no\\" return \\"yes\\""},{"question":"You are given a grid representing a warehouse with empty spaces and obstacles. The task is to find the shortest path for the worker to move from the top-left corner of the warehouse to the bottom-right corner, avoiding all obstacles. The worker can move up, down, left, or right, but cannot pass through any obstacles. The grid is represented as a 2D list, where `0` indicates an empty space, and `1` indicates an obstacle. Example 1: Input: grid = [ [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 0, 0], [0, 1, 1, 0] ] Output: 6 Explanation: The shortest path is: (0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2) -> (2, 3) -> (3, 3) Example 2: Input: grid = [ [0, 1], [1, 0] ] Output: -1 Explanation: There is no valid path to reach the bottom-right corner. Your Task: You don\'t need to read input or print anything. Complete the function `shortestPath` which takes the 2D list grid as input parameter and returns the length of the shortest path, or -1 if no such path exists. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N * M) Constraints: 1 ≤ N, M ≤ 100","solution":"from collections import deque def shortestPath(grid): Finds the shortest path in a grid from the top-left corner to the bottom-right corner, while avoiding obstacles. rows, cols = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[rows-1][cols-1] == 1: return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if (r, c) == (rows-1, cols-1): return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) return -1"},{"question":"Given a string, transform it such that each character in the new string is followed by its frequency from the original string. Example 1: Input: \\"aabbcc\\" Output: \\"a2b2c2\\" Explanation: Each character \'a\', \'b\', and \'c\' appears twice in the input string, therefore the output string is \\"a2b2c2\\". Example 2: Input: \\"abbccc\\" Output: \\"a1b2c3\\" Explanation: \'a\' appears once, \'b\' appears twice, and \'c\' appears thrice, resulting in the output string \\"a1b2c3\\". Your Task: Your task is to complete the function transformString() which takes a single string as an input parameter and returns the transformed string. Constraints: 1 <= |S| <= 100 Expected Time Complexity: O(N). Expected Auxiliary Space: O(1).","solution":"def transformString(s): Transforms the string such that each character is followed by its frequency. from collections import Counter frequency = Counter(s) result = [] for char in s: if char not in result: result.append(char) result.append(str(frequency[char])) return \'\'.join(result)"},{"question":"Quandary, the puzzle master, has devised a new challenge for the CodeZen team. He has given a sequence of distinct integers and asked them to find a special subset of this sequence. A special subset is defined as a set of numbers that: - Is composed of only unique elements from the original sequence. - When sorted, forms a strictly increasing order. Additionally, Quandary wants the subset to have a maximum possible length and the sum of its elements to be minimized in case of multiple maximum-length subsets. Write a program to find and print the required special subset. -----Input:----- A list of integers is given from Standard Input, where each integer is distinct. -----Output:----- Output a single line containing the elements of the special subset in ascending order, separated by spaces. -----Constraints----- - 1 leq n leq 1000 (number of integers in the list) - -10^6 leq text{integer} leq 10^6 -----Sample Input 1:----- 5 -2 3 8 4 1 10 6 -----Sample Output 1:----- -2 1 3 4 5 6 8 10 -----Sample Input 2:----- 9 8 7 6 5 4 3 2 1 -----Sample Output 2:----- 1 2 3 4 5 6 7 8 9","solution":"def find_special_subset(nums): Find the maximum length subset in strictly increasing order with minimum sum. nums = list(set(nums)) # Ensure uniqueness nums.sort() # Sort the numbers to form strictly increasing order return nums"},{"question":"Given a string s, generate all possible unique substrings of s and print them in lexicographic order. Constraints * 1 leq |s| leq 10 (where |s| is the length of the string s) Input A single string s is given in a line. Output Print each unique substring in a line in order. Each substring should appear exactly once in the list, and they should be sorted lexicographically. Examples Input abc Output a ab abc b bc c Input aaa Output a aa aaa","solution":"def unique_substrings(s): Returns all unique substrings of s in lexicographic order. substr_set = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substr_set.add(s[i:j]) substr_list = sorted(substr_set) return substr_list"},{"question":"A group of friends is playing a game where they keep passing a ball to each other according to specific rules. The game involves n players standing in a circle, numbered from 1 to n in a clockwise direction. The player initially holding the ball is number 1. The game proceeds in rounds. In each round, the ball is passed forward by p positions in the circle. After m rounds, the ball holder is noted. Your task is to determine which player holds the ball after m rounds, given the initial setup of n players and the specified pass length p. -----Input----- The input consists of three integers n, p, and m (1 leq n, p, m leq 1000) — the number of players, the number of positions to pass the ball in each round, and the number of rounds. -----Output----- Print the number of the player who holds the ball after m rounds. -----Examples----- Input 5 2 3 Output 2 Input 4 1 5 Output 2 Input 6 3 4 Output 1 -----Note----- In the first example, the ball is passed as follows: - Start with player 1, pass to player 3 (1 + 2 positions) - Player 3 passes to player 5 (3 + 2 positions) - Player 5 passes to player 2 (5 + 2 positions, cycles back to start) In the second example, the ball is passed as follows: - Start with player 1, pass to player 2 (1 + 1 position) - Player 2 passes to player 3 (2 + 1 position) - Player 3 passes to player 4 (3 + 1 position) - Player 4 passes to player 1 (4 + 1 position, cycles back to start) - Player 1 passes to player 2 (1 + 1 position) In the third example, the ball is passed as follows: - Start with player 1, pass to player 4 (1 + 3 positions) - Player 4 passes to player 1 (4 + 3 positions, cycles back to start) - Player 1 passes to player 4 (1 + 3 positions) - Player 4 passes to player 1 (4 + 3 positions, cycles back to start)","solution":"def final_ball_holder(n, p, m): Determine which player holds the ball after m rounds. :param n: int - the number of players :param p: int - the number of positions to pass the ball in each round :param m: int - the number of rounds :return: int - the final ball holder\'s number # The ball starts with player 1 and we need to calculate its position # after p * m moves. Since the positions are circular (1 to n), we use # modulo operation to find the position. final_position = (1 + p * m - 1) % n + 1 return final_position"},{"question":"Array Rotation - Bug Fixing #1 It looks like there is a problem with Jamie\'s array rotation function. It needs a fix! Task Your task is to fix Jamie\'s function to correctly rotate the elements of an array to the right by a given number of positions. Specifically, given an array `arr` and a non-negative integer `k`, rotate the array to the right by `k` steps. For example, given `arr = [1, 2, 3, 4, 5]` and `k = 2`, the output should be `[4, 5, 1, 2, 3]`. Note that if `k` is greater than the length of the array, it should rotate `k % len(arr)` steps instead. Function Signature ```python def rotate_array(arr: List[int], k: int) -> List[int]: # implementation here ``` Input - `arr`: A list of integers (0 ≤ len(arr) ≤ 10^5) - `k`: A non-negative integer (0 ≤ k ≤ 10^9) Output - A list of integers that represents the array rotated to the right by `k` steps. Examples ```python rotate_array([1, 2, 3, 4, 5], 2) -> [4, 5, 1, 2, 3] rotate_array([1, 2, 3, 4, 5], 0) -> [1, 2, 3, 4, 5] rotate_array([1], 3) -> [1] rotate_array([1, 2, 3], 4) -> [3, 1, 2] ```","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> List[int]: Rotates the array to the right by k steps. if not arr: # If the array is empty, return it as is return arr n = len(arr) k = k % n # Reduce k to be within the bounds of the array length return arr[-k:] + arr[:-k] if k else arr # Rotate the array"},{"question":"A robot is placed in an `m` x `n` grid, and is initially positioned at the top-left corner (0,0). The robot can move either right or down at any point in time but cannot move beyond the grid boundaries. Certain cells in the grid are blocked and the robot cannot step on them. The objective is to count the number of distinct paths that the robot can take to reach the bottom-right corner (m-1, n-1), without stepping on any of the blocked cells. Write a function `uniquePathsWithObstacles(grid)` that takes a 2D list representing the grid, where `1` represents a blocked cell and `0` represents a free cell, and returns the number of distinct paths from the top-left corner to the bottom-right corner. Consider additional constraints and edge cases: - If the starting or the ending cell is blocked, the robot can never reach the destination and the function should return 0. - If `m = 0` or `n = 0`, the function should handle these edge conditions appropriately and return 0. # Example 1: Input: ``` grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` Output: `2` # Example 2: Input: ``` grid = [ [0, 1], [0, 0] ] ``` Output: `1` # Example 3: Input: ``` grid = [ [0, 0, 0], [1, 1, 1], [0, 0, 0] ] ``` Output: `0` # Constraints: - The grid is defined with dimensions `m x n` where `1 <= m, n <= 100`. - The grid elements are either `0` (representing a free cell) or `1` (representing a blocked cell).","solution":"def uniquePathsWithObstacles(grid): m = len(grid) if m == 0: return 0 n = len(grid[0]) if n == 0: return 0 # If the start or end cell is blocked, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize a DP array with the same dimensions as the grid dp = [[0] * n for _ in range(m)] # Initialize the start cell dp[0][0] = 1 # Fill the first row for j in range(1, n): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the first column for i in range(1, m): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[m-1][n-1]"},{"question":"In a mystical forest, there are m mystical animals. Each animal has a magical energy level, represented by an integer. Some pairs of animals are connected by magical pathways. When two animals are connected, their combined magical energy affects the total energy of the forest. For each pair of connected animals (u, v), the total magical energy contributed by the pair is calculated as the absolute difference between their energy levels. Your task is to calculate the sum of magical energies for all the connected pairs in the forest. Input The first line contains two integers m (2 ≤ m ≤ 1000) — the number of mystical animals in the forest, and e (1 ≤ e ≤ 10000) — the number of magical pathways. The second line contains m space-separated integers — the magical energy levels of the animals. The next e lines each contain two integers u and v (1 ≤ u, v ≤ m, u ≠ v) representing a magical pathway between animals u and v. Output Print one integer — the total sum of the absolute differences of magical energy levels for all connected pairs in the forest. Examples Input 4 3 10 20 30 40 1 2 2 3 3 4 Output 30 Input 5 4 5 15 25 35 45 1 2 2 3 3 4 4 5 Output 40 Note For the first example: - The difference between energy levels of animal 1 (10) and animal 2 (20) is 10. - The difference between energy levels of animal 2 (20) and animal 3 (30) is 10. - The difference between energy levels of animal 3 (30) and animal 4 (40) is 10. - The total magical energy sum is 10 + 10 + 10 = 30. For the second example: - The difference between energy levels of animal 1 (5) and animal 2 (15) is 10. - The difference between energy levels of animal 2 (15) and animal 3 (25) is 10. - The difference between energy levels of animal 3 (25) and animal 4 (35) is 10. - The difference between energy levels of animal 4 (35) and animal 5 (45) is 10. - The total magical energy sum is 10 + 10 + 10 + 10 = 40.","solution":"def calculate_total_magical_energy(m, e, energies, pathways): total_energy = 0 for u, v in pathways: total_energy += abs(energies[u - 1] - energies[v - 1]) return total_energy"},{"question":"In the famous city of Agrid, there\'s a unique vending machine that sells a variety of snacks. The snacks are arranged in a specific order, but the most interesting part is that the vending machine can only take certain consecutive ranges of money for each transaction. To use the vending machine, you have to pay a rounded amount of money, and that amount affects the current stock availability since the machine has a limit on how much it dispenses per transaction. You\'re tasked with writing a program to help the Agrid citizens determine if they can buy their desired snack with the amount of money they have, given the consecutive ranges they can input each time they use the machine. **Input** The input starts with an integer `n` (1 ≤ n ≤ 100) representing the number of available consecutive ranges. Each of the next `n` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ 100), representing the start and end of possible money ranges (inclusive). Following this, there is an integer, `m` (1 ≤ m ≤ 10^4), representing the exact amount of money the citizen has. Then there is an integer, `k` (1 ≤ k ≤ 50), which indicates the maximum amount that the vending machine will dispense in one transaction. **Output** Print \\"YES\\" if the citizen can use their money to buy the snack with the given constraints, otherwise print \\"NO\\". **Example** Input: ``` 3 1 3 5 9 12 15 10 5 ``` Output: ``` YES ``` In this example, with 10 money units available, the citizen can break this down into ranges of 5 and 5, effectively using the vending machine twice within permissible range limits. Therefore, the output is \\"YES\\".","solution":"def can_buy_snack(consecutive_ranges, m, k): Returns \\"YES\\" if the citizen can use their money to buy the snack with the given constraints, otherwise returns \\"NO\\". possible_sums = set([0]) for l, r in consecutive_ranges: new_sums = set() for value in range(l, r + 1): for s in possible_sums: if s + value <= m: new_sums.add(s + value) possible_sums.update(new_sums) for s in possible_sums: if s == m: return \\"YES\\" return \\"NO\\" # Example usage: n = 3 consecutive_ranges = [(1, 3), (5, 9), (12, 15)] m = 10 k = 5 print(can_buy_snack(consecutive_ranges, m, k)) # Output should be \\"YES\\""},{"question":"Given a grid of size n x n, each cell can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). You need to find the number of unique paths from the top-left corner to the bottom-right corner, where you can only move right or down and cannot pass through obstacles. Note: Due to the large output, the answer should be returned modulo 10^9 + 7. Example 1: Input: n = 3 grid = [ [\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] Output: 2 Explanation: There are two unique paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Example 2: Input: n = 2 grid = [ [\'.\', \'#\'], [\'.\', \'.\'] ] Output: 1 Explanation: There is only one unique path: 1. Down -> Right Example 3: Input: n = 1 grid = [ [\'.\'] ] Output: 1 Explanation: There is only one unique path as there is only one cell in the grid. Constraints: 1 <= n <= 100","solution":"def unique_paths_with_obstacles(n, grid): MOD = 10**9 + 7 # Create a dp array to store the number of paths dp = [[0] * n for _ in range(n)] # Initialize the start point if grid[0][0] == \'.\': dp[0][0] = 1 # Fill the dp array for i in range(n): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] % MOD if j > 0: dp[i][j] += dp[i][j-1] % MOD dp[i][j] %= MOD return dp[n-1][n-1]"},{"question":"Samuel likes strings and he is fascinated by palindromes. A palindrome is a string that reads the same backward as forward. Samuel wants to create the longest possible palindrome by rearranging the characters in a given string s. Your task is to help Samuel by constructing the longest possible palindrome that can be made using all the characters of the string s (some characters do not have to be used necessarily). If there are multiple possible answers, return any of them. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the string. The second line contains the string s consisting of n lowercase English letters. -----Output----- Print a single string — the longest possible palindrome that can be made using the given characters of the string s. If there are multiple possible answers, print any of them. -----Examples----- Input 7 abccccdd Output dccaccd Input 1 a Output a","solution":"from collections import Counter def longest_palindrome(n, s): Returns the longest palindrome that can be made using the characters of the input string s. Parameters: n (int): The length of the string s. s (string): A string consisting of n lowercase English letters. Returns: string: The longest possible palindrome. count = Counter(s) left_part = [] middle_part = [] # We will collect characters for the left half and the middle part. for char, freq in count.items(): # If the frequency is even, we can put half in the left part. left_part.extend([char] * (freq // 2)) # If the frequency is odd, use the maximum possible even number and save one for the middle. if freq % 2 != 0: middle_part = [char] # Left part of the palindrome left_half = \'\'.join(left_part) # The corresponding right part will be the left part reversed. right_half = left_half[::-1] # Construct the palindrome using the left part, middle part (if any), and the right part. return left_half + \'\'.join(middle_part) + right_half # Example usage n = 7 s = \\"abccccdd\\" print(longest_palindrome(n, s)) # Output: dccaccd"},{"question":"A professional gardener is working on different garden layouts and wants to maintain the uniqueness of each layout based on flower types. Each layout is represented by a list of flower types. The gardener needs to frequently add a new layout to his collection and check if there is any duplicate layout. Over time, he has noticed that maintaining a unique collection is becoming more challenging as more layouts are added. The gardener seeks your help to automate this process and ensure the collection remains unique with each addition. ------ Input ------ The first line contains the number of layouts N. The following N lines describe the layouts consecutively. Each layout starts with an integer L representing the number of flower types, followed by L integers denoting the types of flowers in the layout. ------ Output ------ For each layout added, output \\"Unique\\" if the layout is not in the collection, otherwise output \\"Duplicate\\". ------ Constraints ------ 1 ≤ N ≤ 10^{4} 1 ≤ L ≤ 10^{2} 1 ≤ text{flower type} ≤ 10^{6} ----- Sample Input 1 ------ 4 3 1 2 3 4 1 4 5 6 3 1 2 3 2 7 8 ----- Sample Output 1 ------ Unique Unique Duplicate Unique","solution":"def check_flower_layouts(n, layouts): This function checks for the uniqueness of each flower layout in the list. :param n: The number of layouts :param layouts: List of lists, where each inner list represents a flower layout :return: List of strings, each either \\"Unique\\" or \\"Duplicate\\" seen_layouts = set() output = [] for layout in layouts: layout_tuple = tuple(layout) if layout_tuple in seen_layouts: output.append(\\"Duplicate\\") else: output.append(\\"Unique\\") seen_layouts.add(layout_tuple) return output # Helper function to parse input def parse_input(input_lines): n = int(input_lines[0]) layouts = [] for i in range(1, n+1): layout = list(map(int, input_lines[i].split()[1:])) layouts.append(layout) return n, layouts"},{"question":"In a fictional land, a powerful sorcerer has created several magical chains of enchanted orbs. Each chain of orbs has a unique power level associated with it. The sorcerer wants to separate the chains into groups based on their power levels. All chains in the same group must have the same power level, and no two chains in the same group should have a different power level. Given a list of power levels of chains, determine the number of unique groups that the sorcerer can form. -----Input:----- - First line will contain an integer T, denoting the number of test cases. Each test case consists of two lines. - The first line of each test case contains an integer M, denoting the number of chains. - The second line contains M space-separated integers, representing the power levels of the chains. -----Output:----- For each test case, output a single integer denoting the number of unique groups of chains that can be formed. -----Constraints----- - 1 leq T leq 100 - 1 leq M leq 1000 - 1 leq Power level of each chain leq 1000 -----Sample Input:----- 2 5 3 1 2 3 2 4 4 4 4 4 -----Sample Output:----- 3 1 -----EXPLANATION----- Test case 1: The chains have power levels [3, 1, 2, 3, 2]. The unique groups would be {3}, {1}, {2}, so the number of groups is 3. Test case 2: The chains have power levels [4, 4, 4, 4]. Since all chains have the same power level, the number of groups is 1.","solution":"def unique_groups_of_chains(test_cases): results = [] for case in test_cases: M, power_levels = case unique_group_count = len(set(power_levels)) results.append(unique_group_count) return results"},{"question":"Geek is fascinated with pyramids. He recently learned about Pascal\'s Triangle and wants to generate it for a given number of rows. Geek asks for your help to produce Pascal\'s Triangle. Example 1: Input: 5 Output: 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 Your Task: You don\'t need to input anything. Complete the function generatePascalTriangle() which takes an integer n as the input parameter and prints the Pascal\'s Triangle pattern. Constraints: 1 <= N <= 10","solution":"def generatePascalTriangle(n): Generates Pascal\'s Triangle with \'n\' number of rows. triangle = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j] triangle.append(row) for row in triangle: print(\' \'.join(map(str, row)))"},{"question":"Benny the Banisher is a wizard who likes to organize his spells into spellbooks. Each spellbook comprises spells listed in a specific order. Recently, Benny realized that to maximize the effectiveness of his magic, he needs to rearrange the spells in each spellbook. Help Benny by writing a program that will reverse the order of spells in each of his spellbooks. The spells are provided as strings, separated by spaces. -----Input----- The input consists of a single line containing space-separated spell names. Each spell name will have between 1 and 20 characters. There will be at least 1 spell and at most 100 spells in the list. -----Output----- Output the spell names in reverse order, also space-separated. -----Examples----- Sample Input: lightning fireball frost nova Sample Output: nova frost fireball lightning","solution":"def reverse_spells(spell_string): Takes a string of space-separated spell names and returns them in reverse order. Parameters: spell_string (str): A string containing spell names separated by spaces. Returns: str: A string containing spell names in reverse order. spells = spell_string.split() reversed_spells = spells[::-1] return \' \'.join(reversed_spells)"},{"question":"Maverick has discovered an unusual pattern and needs your help to implement a solution. You will be given a string `S` consisting only of the characters \'a\' and \'b\'. Conceptually, `S` is a periodic string where the period is defined as the smallest substring `p` such that `S` can be represented as one or more concatenations of `p`. In one operation, you can remove any one occurrence of the substring `p` from `S`. Your task is to determine the minimum number of operations required to remove all occurrences of `p` from `S`. ------ Input Format ------ - The first line contains an integer `T`, the number of test cases. - Each test case consists of a single line containing the string `S`. ------ Output Format ------ For each test case, output a single integer, the number of operations required to completely remove `p` from `S`. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |S| ≤ 10^{5} - Sum of the lengths of `S` over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 3 abababab aaaa ababa ------ Sample Output 1 ------ 4 4 1 ------ Explanation 1 ------ Test case 1: The period `p` is \\"ab\\". To completely remove \\"abababab\\", 4 operations are required, each removing \\"ab\\". Test case 2: The period `p` is \\"a\\". To completely remove \\"aaaa\\", 4 operations are required, each removing \\"a\\". Test case 3: The period `p` is \\"ababa\\". Only 1 operation is required to completely remove \\"ababa\\".","solution":"def get_min_operations(S): Returns the minimum number of operations required to completely remove the periodic substring p from S. # Determine the smallest period p of the string S by finding the smallest k such that S is made of k repetitions n = len(S) for k in range(1, n + 1): if n % k == 0: p = S[:k] if p * (n // k) == S: return n // k def solve(test_cases): Solves each test case and returns the results in an array. results = [] for S in test_cases: results.append(get_min_operations(S)) return results"},{"question":"You are given an array of positive integers, which represents values of coins in a collection. Your task is to determine if you can split the collection into two non-empty parts such that the sum of the coin values in both parts is the same. Input The first line of input contains an integer n (1 ≤ n ≤ 1000), the number of coins in the collection. The second line contains n space-separated positive integers a_i (1 ≤ a_i ≤ 1000), the values of the coins. Output If possible, print \\"YES\\" followed by the index x (1 ≤ x < n) after which the array can be split to form two parts with equal sum. Otherwise, print \\"NO\\". If there are multiple valid splits, output the one with the smallest x. NOTE: For the index x, the array should be split as coins[:x] and coins[x:]. SAMPLE INPUT 6 1 2 3 3 2 1 SAMPLE OUTPUT YES 3 Explanation: In this case, splitting the array at index 3 (0-based index) forms two parts: [1, 2, 3] and [3, 2, 1]. Both have the sum of 6.","solution":"def can_split_into_equal_parts(n, coins): total_sum = sum(coins) if total_sum % 2 != 0: return \\"NO\\" half_sum = total_sum // 2 current_sum = 0 for i in range(n): current_sum += coins[i] if current_sum == half_sum: return f\\"YES {i + 1}\\" return \\"NO\\""},{"question":"In a bustling town called Algorithmsville, there are M lampposts lined up in a row on a straight road. The position of each lamppost is represented by an integer Pi, which can be positive or negative. An Algorithmsville scientist has developed a unique type of rechargeable battery that can power these lampposts. Each lamppost i needs a battery of capacity Bi to function. The scientist has C rechargeable batteries in her lab, and each battery j has a capacity of Dj. The batteries can only be used for one lamppost, and once they are depleted, they must be recharged. The town council has asked for a program that will assign the batteries to the lampposts so that all lampposts are powered. If it is not possible to power all lampposts with the available batteries, the program should return \\"Not Possible\\". Otherwise, it should return the maximum distance between any two powered lampposts, where the distance between two lampposts at positions Pi and Pj is given by |Pi - Pj|. Here’s the challenge: Write a program that finds the maximum distance between any two powered lampposts or determines if it\'s not possible to power all lampposts with the available batteries. # Input - First line contains two integers M and C (1 ≤ M, C ≤ 105), representing the number of lampposts and batteries respectively. - Second line contains M integers P1, P2, ..., PM (-109 ≤ Pi ≤ 109 and all Pi are distinct), which represent the positions of the lampposts. - Third line contains M integers B1, B2, ..., BM (1 ≤ Bi ≤ 1018), which represent the required capacities of the lampposts. - Fourth line contains C integers D1, D2, ..., DC (1 ≤ Dj ≤ 1018), which are the capacities of the batteries in the scientist’s lab. # Output - If it is impossible to power all lampposts with the available batteries, output \\"Not Possible\\". - Otherwise, output the maximum distance between any two powered lampposts. # Example Input ``` 4 5 -10 0 15 20 8 5 7 6 10 12 8 5 7 ``` Output ``` 30 ``` Input ``` 3 2 -5 3 9 4 10 6 5 7 ``` Output ``` Not Possible ```","solution":"def max_distance_between_powered_lampposts(M, C, positions, lamp_demands, battery_capacities): lamp_demands_batteries = sorted(zip(lamp_demands, positions)) battery_capacities.sort() if C < M: return \\"Not Possible\\" i, j = 0, 0 while i < C and j < M: if battery_capacities[i] >= lamp_demands_batteries[j][0]: j += 1 i += 1 if j < M: return \\"Not Possible\\" positions.sort() return abs(positions[-1] - positions[0])"},{"question":"Given a list of integers and a value `target`, determine if there are any two integers in the list whose sum equals `target`. Write a function `has_pair_with_sum(numbers, target)` that takes a list of integers `numbers` and an integer `target`. The function should return `True` if there exists at least one pair of integers in the list that sum up to `target`, and `False` otherwise. Example: ``` numbers = [10, 15, 3, 7] target = 17 ``` Output: ``` True ``` Explanation: ``` 10 + 7 = 17, so the function returns True. ``` Another example: ``` numbers = [1, 2, 3, 9] target = 8 ``` Output: ``` False ``` Explanation: ``` There are no two numbers in the list that sum up to 8, so the function returns False. ```","solution":"def has_pair_with_sum(numbers, target): Determines if there are any two integers in the list whose sum equals \'target\'. :param numbers: List of integers :param target: Integer target sum :return: True if there exists at least one pair of integers in the list that sum up to \'target\', False otherwise seen = set() for number in numbers: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"Given two strings, S and T, determine whether it is possible to make S equal to T by performing exactly one swap operation. A swap operation consists of picking two indices i and j (1-based) such that i ≠ j and swapping the characters at S[i] and S[j]. Constraints * 1 ≤ |S|, |T| ≤ 100 * S and T consist of lowercase English letters only. Input Input is given from Standard Input in the following format: S T Output Print \\"YES\\" if S can be made equal to T by performing exactly one swap operation. Otherwise, print \\"NO\\". Examples Input abcd abdc Output YES Input abcd abcd Output NO","solution":"def can_swap_to_equal(S, T): Determines if S can be made equal to T with exactly one swap operation. :param S: str - The original string S :param T: str - The target string T :return: str - \\"YES\\" if one swap operation can make S equal to T, \\"NO\\" otherwise. if len(S) != len(T): return \\"NO\\" # Find positions where S and T differ diff = [(s, t) for s, t in zip(S, T) if s != t] # We must have exactly 2 positions where S and T differ to perform one swap if len(diff) != 2: return \\"NO\\" # Check if swapping the differing characters in S would make it equal to T return \\"YES\\" if diff[0] == diff[1][::-1] else \\"NO\\""},{"question":"A **weather prediction system** has been developed to provide short-term temperature forecasts using data from various sensors in the city. The system collects temperature readings from `n` different sensors distributed across the city. Each sensor provides a reading at regular intervals. However, due to various reasons, some sensor readings might be missing. You need to analyze the data collected in a specific time period and determine the average temperature. If a sensor\'s reading is missing for a specific interval, it does not contribute to the average temperature calculation for that interval. # Input - The first line contains two integers, `n` (1 ≤ n ≤ 100) — the number of sensors, and `m` (1 ≤ m ≤ 100) — the number of time intervals. - The next `n` lines each contain `m` integers. Each integer represents a temperature reading for a particular sensor at a particular interval. If a reading is missing, it is represented by the value `-1000`. # Output - Output `m` floating-point numbers, each representing the average temperature for a corresponding time interval, rounded to two decimal places. # Example Input ``` 3 4 23 25 -1000 28 22 24 26 27 24 23 27 -1000 ``` Output ``` 23.00 24.00 26.50 27.50 ``` # Explanation In this example, we have 3 sensors and 4 time intervals. For each time interval, the average temperature is computed from all available (non-missing) sensor readings. The calculation steps for each interval are: - Interval 1: (23 + 22 + 24) / 3 = 23.00 - Interval 2: (25 + 24 + 23) / 3 = 24.00 - Interval 3: (26 + 27) / 2 = 26.50 (missing value ignored) - Interval 4: (28 + 27) / 2 = 27.5 (missing value ignored)","solution":"def average_temperature(n, m, readings): result = [] for i in range(m): total_temp = 0 count = 0 for j in range(n): if readings[j][i] != -1000: total_temp += readings[j][i] count += 1 if count == 0: result.append(0.00) else: result.append(round(total_temp / count, 2)) return result"},{"question":"Monica is organizing a hiking trip and wants to keep track of the distances covered by each participant. She has a list of names of participants and their corresponding distances covered in miles recorded in order during each leg of the hike. Monica wants to find out which participant covered the greatest distance in total and who had the single longest individual leg. Write a program to determine the participant who covered the greatest total distance and the participant who had the longest single leg. -----Input----- The first line of input contains an integer T, denoting the number of test cases. For each test case, the first line contains an integer N, the number of participants. Then, N lines follow, each containing a string S which is the name of the participant, followed by an integer L representing the number of legs their hike was split into. The next L integers are the distances covered in each leg. -----Output----- For each test case, output two lines: 1. The name of the participant who covered the greatest total distance. 2. The name of the participant who had the longest single leg. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 50 - 1 ≤ L ≤ 100 - 0 ≤ distance covered in a leg ≤ 1000 -----Example----- Input: 2 3 Alice 3 5 10 7 Bob 2 9 4 Charlie 4 6 7 8 9 2 David 2 8 15 Eve 3 14 5 9 Output: Charlie Charlie David David -----Explanation----- In the first test case: - Alice\'s total distance is 5 + 10 + 7 = 22 - Bob\'s total distance is 9 + 4 = 13 - Charlie\'s total distance is 6 + 7 + 8 + 9 = 30 So, Charlie has the greatest total distance. The longest single leg distances are: - Alice: 10 - Bob: 9 - Charlie: 9 Charlie and Alice both have the longest single leg distance of 10, but we\'ll return Charlie, who was mentioned first in the input. In the second test case: - David\'s total distance is 8 + 15 = 23 - Eve\'s total distance is 14 + 5 + 9 = 28 Eve has the greatest total distance. The longest single leg distances are: - David: 15 - Eve: 14 Hence, David has the longest single leg of 15 miles.","solution":"def find_greatest_distance_and_longest_leg(T, test_cases): Determines the participant who covered the greatest total distance and the participant who had the longest single leg for given test cases. Parameters: T (int): Number of test cases. test_cases (list): List of test cases where each test case is a tuple containing the number of participants, and a list of tuples representing each participant\'s name, number of legs, and the distances covered in each leg. Returns: list: A list of tuples containing the names of the participants with the greatest distance and the longest leg for each test case. results = [] for case in test_cases: N, participants = case max_total_distance = 0 max_individual_leg = 0 participant_greatest_distance = \\"\\" participant_longest_leg = \\"\\" for participant in participants: name, distances = participant total_distance = sum(distances) longest_leg = max(distances) if total_distance > max_total_distance: max_total_distance = total_distance participant_greatest_distance = name if longest_leg > max_individual_leg: max_individual_leg = longest_leg participant_longest_leg = name results.append((participant_greatest_distance, participant_longest_leg)) return results"},{"question":"A company is looking to incentivize its employees based on their performance. Each employee receives a bonus in the form of an array of integers representing their monthly productivity points. You are required to calculate the maximum bonus an employee can achieve by summing up their productivity points in contiguous subarrays. However, if the employee\'s productivity points array has all elements negative, the employee receives a bonus of 0. Input: On the first line, an integer T (<1000), representing the number of test cases. Each test case consists of two lines. The first line contains an integer N (1 <= N <= 10^5) representing the number of months. The second line contains N space-separated integers representing the productivity points for each month. The productivity points can range from -10^4 to 10^4. Output: For each test case, output the maximum possible bonus an employee can achieve. SAMPLE INPUT 3 4 -1 2 3 -4 5 -3 -2 -1 -4 -5 6 1 -2 3 5 -1 2 SAMPLE OUTPUT 5 0 9","solution":"def calculate_max_bonus(T, test_cases): For each test case, calculate the maximum bonus an employee can achieve. Args: T: int: number of test cases test_cases: list of tuples: each tuple contains (N, productivity points list) Returns: list of int: maximum possible bonus for each test case def max_subarray_sum(arr): max_so_far = current_max = float(\'-inf\') all_negative = True for num in arr: if num >= 0: all_negative = False current_max = max(num, current_max + num) max_so_far = max(max_so_far, current_max) return 0 if all_negative else max(max_so_far, 0) results = [] for i in range(T): N, productivity_points = test_cases[i] results.append(max_subarray_sum(productivity_points)) return results"},{"question":"Helen is designing a network of computers in a circular room. The room has `n` computer stations, and Helen wants to connect the stations with cables. Each station is labeled from 1 to `n`, and they are arranged in a circle. Each station must be connected to exactly two other stations forming a cyclic network. Additionally, the total length of all the cables must be minimized. Your task is to help Helen determine the length of the cables needed to connect the computer stations optimally. -----Input----- The first line contains a single integer `n` (3 ≤ n ≤ 100) — the number of computer stations. The second line contains `n` integers `d_1, d_2, ..., d_n` (1 ≤ d_i ≤ 1000) — the distances between each pair of adjacent stations in the circular room. The distances are given in the order the stations are connected in the circle. -----Output----- Print a single integer — the total length of cables required to connect all the stations in the optimal cyclic network. -----Example----- Input 5 3 2 5 4 1 Output 15 -----Note----- In the example, there are five stations. The optimal way to connect them is to follow the given distances between adjacent pairs in a circular manner: 1. Connect station 1 to station 2 with a cable of length 3. 2. Connect station 2 to station 3 with a cable of length 2. 3. Connect station 3 to station 4 with a cable of length 5. 4. Connect station 4 to station 5 with a cable of length 4. 5. Connect station 5 back to station 1 with a cable of length 1. The total length is 3 + 2 + 5 + 4 + 1 = 15.","solution":"def total_cable_length(n, distances): Given the number of computer stations `n` and a list of distances between adjacent stations in circular order, this function returns the total length of cables required to connect all stations optimally in a cyclic network. :param n: Integer, number of computer stations (3 ≤ n ≤ 100) :param distances: List of integers, distances between consecutive stations (1 ≤ d_i ≤ 1000) :return: Integer, total length of cables required to connect all stations return sum(distances)"},{"question":"You are working for a company that manages a fleet of autonomous vehicles. Each vehicle is deployed to deliver packages in a grid-like city, with streets running north-south and avenues running east-west. To manage the fleet efficiently, you need to track the status and position of each vehicle. Each vehicle can be in one of three states: \\"idle\\", \\"moving\\", or \\"delivering\\". The position of a vehicle is represented by its coordinates on the grid (x, y). Write a class `Vehicle` that has the following methods: - `__init__(self, id, state, x, y)`: Initialize the vehicle with a unique identifier `id`, its current state `state`, and its initial position `(x, y)`. - `update_position(self, x, y)`: Update the vehicle\'s position to `(x, y)`. - `update_state(self, state)`: Update the vehicle\'s state. - `current_position(self)`: Return the current position of the vehicle as a tuple `(x, y)`. - `current_state(self)`: Return the current state of the vehicle. Additionally, write a function `fleet_status(fleet)` that takes a list of `Vehicle` objects and returns a dictionary where the keys are the vehicle states and the values are lists of vehicle ids in those states. For example: ```python v1 = Vehicle(1, \'idle\', 0, 0) v2 = Vehicle(2, \'moving\', 5, 10) v3 = Vehicle(3, \'delivering\', 7, 8) v1.update_state(\'moving\') v2.update_position(6, 12) fleet = [v1, v2, v3] print(fleet_status(fleet)) ``` should output: ``` {\'moving\': [1, 2], \'delivering\': [3], \'idle\': []} ```","solution":"class Vehicle: def __init__(self, id, state, x, y): self.id = id self.state = state self.x = x self.y = y def update_position(self, x, y): self.x = x self.y = y def update_state(self, state): self.state = state def current_position(self): return (self.x, self.y) def current_state(self): return self.state def fleet_status(fleet): status = {\'idle\': [], \'moving\': [], \'delivering\': []} for vehicle in fleet: status[vehicle.current_state()].append(vehicle.id) return status"},{"question":"A company is planning to organize a social event for its employees, where they need to form teams for different competitive games. Each team should have exactly the same number of members. If there are more members than needed to form the teams, the extra members will act as reserves. You are given the number of employees, n, and the required size of each team, k. Your task is to determine the maximum number of teams that can be formed and the number of reserve members. Input The input consists of two integers n and k (1 ≤ k ≤ n ≤ 100000). Output Output two integers – the maximum number of teams that can be formed and the number of reserve members. Examples Input 10 3 Output 3 1 Input 15 5 Output 3 0 Input 20 6 Output 3 2 Note In the first example, there are 10 employees and each team should have 3 members. You can form 3 teams of 3 members each, and 1 member will be left as a reserve. In the second example, there are 15 employees and each team should have 5 members. You can form exactly 3 teams of 5 members each, with no members left as reserve. In the third example, there are 20 employees and each team should have 6 members. You can form 3 teams of 6 members each, and 2 members will be left as reserves.","solution":"def form_teams(n, k): Determines the maximum number of teams that can be formed and the number of reserve members. Parameters: n (int): The total number of employees. k (int): The required size of each team. Returns: tuple: A tuple containing two integers: - The maximum number of teams that can be formed. - The number of reserve members. max_teams = n // k reserves = n % k return max_teams, reserves"},{"question":"Create a function `common_characters(s1, s2)` that takes two strings and returns a sorted list of characters that appear in both strings at least once. The comparison should be case-insensitive and the returned list should contain unique characters. If there are no common characters, return an empty list.","solution":"def common_characters(s1, s2): Returns a sorted list of unique characters that appear in both s1 and s2, case insensitive. s1_lower = set(s1.lower()) s2_lower = set(s2.lower()) common_chars = s1_lower.intersection(s2_lower) return sorted(common_chars)"},{"question":"Write a function to determine if a given string has valid curly braces. A string with valid curly braces must satisfy the following conditions: - Every opening brace \'{\' has a corresponding closing brace \'}\'. - Opening and closing braces must be correctly nested. The function should return \\"YES\\" if the string contains valid curly braces, otherwise return \\"NO\\". Input: First line of input contains the number of test cases T. For each test case, a single line containing a string with curly braces is provided. Output: For each test case, the function should return \\"YES\\" if the curly braces in the string are valid, otherwise return \\"NO\\". User Task: The task is to complete the function `isValidBraces()` which should return a string \\"YES\\" or \\"NO\\" based on the validity of the curly braces in the given input string. Constraints: 1 <= T <= 100 1 <= Length of the string <= 1000 Example: Input: 3 {} {{}} {{}{} Output: YES YES NO Explanation: Testcase 1: The string \\"{}\\" has valid curly braces. Testcase 2: The string \\"{{}}\\" has valid curly braces. Testcase 3: The string \\"{{}{}\\" does not have valid curly braces because it is missing one closing brace \'}\'.","solution":"def isValidBraces(T, cases): Determines if each string in the input list has valid curly braces. Parameters: T : int Number of test cases cases : list of str List containing strings with curly braces for each test case Returns: list of str List containing \\"YES\\" or \\"NO\\" for each test case based on the validity of the curly braces in the corresponding string def is_valid(s): stack = [] for char in s: if char == \'{\': stack.append(char) elif char == \'}\': if not stack or stack[-1] != \'{\': return \\"NO\\" stack.pop() return \\"YES\\" if not stack else \\"NO\\" results = [] for case in cases: results.append(is_valid(case)) return results"},{"question":"Write a function that takes a string `s` and returns the length of the longest substring that can be rearranged to form a palindrome. **Details:** - A palindrome is a string that reads the same forward and backward. - The input string `s` will consist of only lowercase English characters (a-z). **Function Signature:** ```python def longest_palindromic_substring_length(s: str) -> int: pass ``` **Example:** ```python assert longest_palindromic_substring_length(\\"abccccdd\\") == 7 # Explanation: One possible longest palindromic substring is \\"dccaccd\\". assert longest_palindromic_substring_length(\\"a\\") == 1 # Explanation: The longest palindromic substring is \\"a\\". assert longest_palindromic_substring_length(\\"aa\\") == 2 # Explanation: The longest palindromic substring is \\"aa\\". ``` **Note:** - The function should efficiently handle strings of lengths up to 10^5.","solution":"def longest_palindromic_substring_length(s: str) -> int: from collections import Counter # Count occurrences of each character in the string freq = Counter(s) # Variables to store the length of the longest palindromic substring length = 0 odd_count_found = False # Iterate over the frequency dictionary for count in freq.values(): if count % 2 == 0: length += count else: length += count - 1 odd_count_found = True # If any odd count was found, we can add one more character to the length if odd_count_found: length += 1 return length"},{"question":"You are given a list of n integers and a target integer x. You need to find out how many pairs of integers from the list add up to x. Each integer from the list can only be used once in a pair. If no such pairs exist, return 0. Example 1: Input: n = 5 arr = [1, 5, 7, -1, 5] x = 6 Output: 2 Explanation: The pairs are (1, 5) and (7, -1). Example 2: Input: n = 4 arr = [1, 1, 1, 1] x = 2 Output: 2 Explanation: The pairs are (1, 1) and (1, 1) but each 1 can be used only once in a pair. Your Task: You don\'t need to read input or print anything. Your task is to implement the function countPairs() which takes two integers n and x, and a list of n integers arr as input parameters, and returns the count of pairs whose sum is equal to x. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 -10^9 <= arr[i] <= 10^9 -10^9 <= x <= 10^9","solution":"def countPairs(n, arr, x): count = 0 freq = {} for num in arr: complement = x - num if complement in freq and freq[complement] > 0: count += 1 freq[complement] -= 1 else: if num in freq: freq[num] += 1 else: freq[num] = 1 return count"},{"question":"You have an integer array `nums` and an integer `k`. A pair `(i, j)` is called a good pair if `nums[i] == nums[j]` and `i < j`. Return the number of good pairs. Implement the function `numIdenticalPairs(nums: List[int], k: int) -> int`. -----Input----- The input consists of two lines: 1. The first line contains an integer `k` (1 ≤ k ≤ 1000) which is the length of the array. 2. The second line contains `k` integers `nums[i]` (1 ≤ nums[i] ≤ 100). -----Output----- Return a single integer, the number of good pairs `(i, j)`. -----Example----- Input 6 1 2 3 1 1 3 Output 4 Input 4 1 1 1 1 Output 6 Input 3 1 2 3 Output 0 -----Note----- In the first example, there are four good pairs: (0,3), (0,4), (3,4), and (2,5). In the second example, there are six good pairs: (0,1), (0,2), (0,3), (1,2), (1,3), and (2,3). In the third example, there are no good pairs.","solution":"def numIdenticalPairs(nums): Returns the number of good pairs in the list nums. from collections import Counter count = Counter(nums) good_pairs = 0 for value in count.values(): if value > 1: good_pairs += value * (value - 1) // 2 return good_pairs"},{"question":"**Introduction** Imagine you\'re in charge of organizing a bookshelf and you want to categorize your books based on their genre. The bookshelf has a fixed capacity and each book has a specific weight. Your goal is to maximize the number of books on the shelf without exceeding the capacity. **Challenge** Given a list of books, each with a specific genre and weight, and the total capacity of the bookshelf, implement a function to determine the maximum number of books that can be placed on the shelf without exceeding the capacity. Additionally, ensure that no two books of the same genre are placed consecutively on the shelf. You will be provided with a list of books, represented as tuples where the first element is the genre (a string) and the second element is the weight (an integer), and the maximum capacity of the bookshelf (an integer). **Function Signature** ```python def max_books(books: List[Tuple[str, int]], capacity: int) -> int: ``` **Input** - `books`: A list of tuples where each tuple contains the genre (a string) and the weight (an integer) of a book. - `capacity`: An integer representing the maximum weight capacity of the bookshelf. **Output** - An integer representing the maximum number of books that can be placed on the bookshelf without exceeding the weight capacity and ensuring no two consecutive books have the same genre. **Examples** ```python books = [(\\"fiction\\", 2), (\\"mystery\\", 3), (\\"fiction\\", 4), (\\"non-fiction\\", 1)] capacity = 7 print(max_books(books, capacity)) # Output: 3 books = [(\\"horror\\", 5), (\\"horror\\", 4), (\\"horror\\", 3), (\\"horror\\", 2)] capacity = 6 print(max_books(books, capacity)) # Output: 1 books = [(\\"tech\\", 4), (\\"science\\", 2), (\\"tech\\", 1)] capacity = 5 print(max_books(books, capacity)) # Output: 2 ```","solution":"from typing import List, Tuple def max_books(books: List[Tuple[str, int]], capacity: int) -> int: # Sort books by weight to consider lighter books first books.sort(key=lambda x: x[1]) def backtrack(index, current_weight, count, last_genre): if index == len(books): return count max_count = count # Try to add the current book if it fits, and genre is not the same as the last one if current_weight + books[index][1] <= capacity and (last_genre is None or books[index][0] != last_genre): max_count = max(max_count, backtrack(index + 1, current_weight + books[index][1], count + 1, books[index][0])) # Skip the current book max_count = max(max_count, backtrack(index + 1, current_weight, count, last_genre)) return max_count return backtrack(0, 0, 0, None)"},{"question":"You are given a sequence of `n` integers. Your task is to find the contiguous subarray (containing at least one number) which has the largest sum and print that sum. -----Constraints----- - 1 ≤ n ≤ 10^5 - -10^4 ≤ each integer ≤ 10^4 -----Input----- Input is given from Standard Input in the following format: n a1 a2 a3 ... an -----Output----- Print the sum of the contiguous subarray with the largest sum. -----Sample Input----- 9 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output----- 6 Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum which is 6.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray with the largest sum. :param nums: List of integers :return: Integer representing the largest sum of contiguous subarray if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum # Function to read input from standard input, useful for competitive programming def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = list(map(int, data[1:n+1])) print(max_subarray_sum(nums)) # To allow for testing and local execution if __name__ == \\"__main__\\": main()"},{"question":"Given a 2D grid where some cells are walkable (represented by 0) and some are obstacles (represented by 1), write a function to count the number of unique paths from the top-left corner to the bottom-right corner. You can only move either down or right at any point in time, and cannot move through cells with obstacles. Example: Input: grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] Output: 2 Explanation: There are two unique paths from the top-left corner to the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of a 2D grid with obstacles. if not grid or grid[0][0] == 1: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given a string `S` of length `n` where each character in `S` represents a closing or opening bracket, either \'(\' or \')\'. A valid string of brackets follows the property that every opening bracket is closed by a corresponding closing bracket in the correct order. We define a balanced substring as a substring that is a valid string of brackets. Your task is to find the length of the longest balanced substring within `S`. Input Format A single line containing the string `S`. Constraints: * The length of `S` is less than or equal to 10000. * `S` only contains the characters \'(\' and \')\'. Output Format A single integer representing the length of the longest balanced substring in `S`. SAMPLE INPUT (())) SAMPLE OUTPUT 4 Explanation The longest balanced substring within the given string is `(())`, which has a length of 4.","solution":"def longest_balanced_substring(S): Returns the length of the longest balanced substring within the given string of brackets. max_length = 0 stack = [] last_invalid_index = -1 for i, char in enumerate(S): if char == \'(\': stack.append(i) else: if stack: stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: max_length = max(max_length, i - last_invalid_index) else: last_invalid_index = i return max_length"},{"question":"Write a function to find the second largest element in an array. Example 1: Input: arr = [10, 5, 20, 4, 8] Output: 10 Explanation: The largest element is 20 and the second largest element is 10. Example 2: Input: arr = [7, 7, 7, 7] Output: -1 Explanation: All elements are the same, so there\'s no second largest element. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSecondLargest() which takes an array arr as input parameter and returns the second largest element in the array. If no such element exists, return -1. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1<=len(arr)<=1000 0<=arr[i]<=10000","solution":"def findSecondLargest(arr): Finds the second largest element in an array. If no such element exists, returns -1. if len(arr) < 2: return -1 first = second = -1 for num in arr: if num > first: second = first first = num elif first > num > second: second = num return second"},{"question":"Alice and Bob are playing a game with two integers `a` and `b`. Both players take turns choosing a non-zero decimal digit from `1` to `9`, and subtracting it from either `a` or `b`. Both players always play optimally, meaning they will make a move that leads to the best possible outcome for themselves if there is such a move available. Alice always goes first, and they continue taking turns until neither player can make a move without making one of the integers negative or zero. Given the initial values of `a` and `b`, determine who will win the game, assuming both play optimally. If Alice will win, return \\"Alice\\". If Bob will win, return \\"Bob\\". Input - The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. - Each of the next `t` lines contains two integers `a` and `b` (1 ≤ a, b ≤ 10^9). Output - For each test case, output a single line with \\"Alice\\" if Alice wins the game, or \\"Bob\\" if Bob wins the game. Example Input 3 7 4 15 10 5 5 Output Alice Bob Alice Notes In the first test case, Alice starts and subtracts 7 from `a`, making `a = 0`. Therefore, she wins immediately. In the second test case, after optimal moves, Bob will end up making the last move. In the third test case, since both numbers are equal, Alice will win by maintaining an optimal strategy.","solution":"def optimal_play(a, b): Determines the winner of the game given two integers a and b. Returns \\"Alice\\" if Alice wins and \\"Bob\\" if Bob wins. # Alice will win if a or b is odd to start with. # Bob will win if both a and b are even to start with. if (a % 2 == 0) and (b % 2 == 0): return \\"Bob\\" else: return \\"Alice\\" def determine_winner(test_cases): results = [] for a, b in test_cases: results.append(optimal_play(a, b)) return results"},{"question":"You are given n distinct weights and an infinite supply of a counterweight of mass x. Your task is to determine if it is possible to balance each of the weights by adding any number (zero or more) of counterweights to either or both sides of a two-pan balance. Input Format The first line contains an integer {t}, the number of test cases. {t} cases follow. The first line of each test case contains two space-separated integers n and x. The next line contains n distinct integers, representing the weights. Constraints 1leq tleq20 1leq nleq1000 1leq a_ileq10^9 1leq xleq10^9 Output Format For each test case, print n lines. Each line should contain either \\"YES\\" or \\"NO\\". \\"YES\\" if it\'s possible to balance the weight, otherwise \\"NO\\". Sample Input 0 2 5 5 10 15 20 25 30 3 3 4 6 9 Sample Output 0 YES YES YES YES YES YES YES YES Explanation In the first test case, each weight from the list can be balanced using the counterweight of 5 units by adding it to the opposite pan of the weight. For example, for weight 10, you can place 2 counterweights on the opposite side making the total weight on that side 10. In the second test case, each weight can similarly be balanced using the counterweight of 3 units.","solution":"def can_balance_weights(test_cases): results = [] for n, x, weights in test_cases: for weight in weights: if weight % x == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A restaurant has a queue management system where customers take numbered tickets when they arrive. The system assigns a unique ticket number to each customer in ascending order, starting from 1. Each customer’s ticket number is also their position in the queue. Additionally, the restaurant allows customers to cancel their tickets if they no longer wish to wait, thereby skipping their turn. When a customer cancels their ticket, their position becomes vacant, but no other customers move up in the queue; instead, the next customer in line retains their original position. Your task is to manage the queue and determine the position of the customer who will be served next, taking into account any cancellations. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the total number of customers that have taken tickets. The second line contains a sequence of n integers representing ticket numbers. If a customer cancels their ticket, their ticket number is marked with a -1. A valid ticket number will always be positive, and each ticket number is unique and assigned in ascending order from 1 up to n. -----Output----- Print the ticket number of the customer who will be served next. If all customers have cancelled their tickets, output -1. -----Examples----- Input 5 1 2 -1 4 5 Output 1 Input 4 -1 2 3 -1 Output 2 Input 3 -1 -1 -1 Output -1 Input 6 1 -1 -1 -1 5 6 Output 1 -----Note----- In the first example, customers with tickets 3 and 4 are cancelled. Hence, the next customer to be served is the one with ticket number 1. In the second example, customers with tickets 1 and 4 are cancelled. Hence, the next customer to be served is the one with ticket number 2. In the third example, all positions are cancelled. Hence, the output is -1. In the fourth example, tickets 2, 3, and 4 are cancelled. Thus, the first in line that has not cancelled, ticket number 1, will be served next.","solution":"def next_customer(ticket_numbers): Given a list of ticket numbers representing the queue order, this function returns the ticket number of the customer who will be served next. If all tickets are cancelled, returns -1. for ticket in ticket_numbers: if ticket != -1: return ticket return -1"},{"question":"# Problem Statement You are given a string of arbitrary length consisting of only lowercase alphabetical characters. Write a program that computes the longest substring with all distinct characters. For example, given the string \\"abcabcbb\\", the longest substring with all distinct characters is \\"abc\\", with a length of 3. For the string \\"bbbbb\\", the longest substring with all distinct characters is \\"b\\", with a length of 1. Your task is to implement a function that takes an input string and returns the length of the longest substring of distinct characters. **Input:** - The input consists of multiple datasets. Each dataset is given in one line. - Each dataset contains a single arbitrary-length string of lowercase letters. - The end of the input is indicated by a line containing the word \\"END\\". **Output:** - For each dataset, output a single line with the length of the longest substring containing all distinct characters. Example: **Input:** ``` abcabcbb bbbbb pwwkew END ``` **Output:** ``` 3 1 3 ``` # Constraints: 1. The length of any given string does not exceed 1000 characters. 2. The total number of datasets does not exceed 10000.","solution":"def longest_substr_distinct_char(s): Finds the length of the longest substring with all distinct characters. n = len(s) if n == 0: return 0 char_index = {} longest = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end longest = max(longest, end - start + 1) return longest def process_input(input_strings): Processes multiple input strings and computes the longest substring of distinct characters for each. results = [] for s in input_strings: if s == \\"END\\": break results.append(longest_substr_distinct_char(s)) return results"},{"question":"Write a function that takes a string containing only lowercase alphabetical characters and returns the length of the shortest substring that contains all the unique characters of the input string. For example, if the input string is \\"abcaac\\", the unique characters are \'a\', \'b\', and \'c\'. The shortest substring that contains all these characters is \\"bca\\", which has a length of 3. Input: A single string s containing only lowercase alphabetical characters. Output: An integer representing the length of the shortest substring containing all unique characters of the input string. Sample Input: abcabcbb Sample Output: 3 Explanation: The unique characters in the input are \'a\', \'b\', and \'c\'. The shortest substring containing all these characters is \\"abc\\", which has length 3. Sample Input: aabcbcdbca Sample Output: 4 Explanation: The unique characters in the input are \'a\', \'b\', \'c\', and \'d\'. The shortest substring containing all these characters is \\"dbca\\", which has length 4.","solution":"def shortest_unique_substring_length(s): Returns the length of the shortest substring that contains all unique characters of the input string. if not s: return 0 unique_chars = set(s) num_unique_chars = len(unique_chars) min_length = float(\'inf\') left = 0 char_count = {} for right in range(len(s)): char = s[right] char_count[char] = char_count.get(char, 0) + 1 while len(char_count) == num_unique_chars: min_length = min(min_length, right - left + 1) left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 return min_length"},{"question":"Aarav has a collection of N cards. Each card has a distinct integer written on it. Aarav would like to separate these cards into two non-empty piles such that the absolute difference between the sum of the integers in the two piles is minimized. Write a program that computes this minimum possible absolute difference. ------ Input Format ------ - The first line contains a single integer T, denoting the number of test cases. - Each of the next T lines contains an integer N, followed by N space-separated integers representing the values on Aarav’s cards. ------ Output Format ------ For each test case, output on a new line the minimum possible absolute difference. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ Each integer on the cards ≤ 1000 ------ Sample Input 1 ------ 2 3 1 6 11 4 2 3 7 8 ------ Sample Output 1 ------ 4 0 ------ Explanation 1 ------ Test case 1: We can divide the cards into piles {1, 6} and {11} with sums 7 and 11. The absolute difference is |7 - 11| = 4. Test case 2: We can divide the cards into piles {2, 8} and {3, 7} with sums 10 and 10. The absolute difference is |10 - 10| = 0.","solution":"def min_abs_diff(N, cards): # Total sum of all cards total_sum = sum(cards) # Set to store achievable sums with subset of cards achievable_sums = {0} # Using a set to prevent duplicates and manage achievable sums for card in cards: new_sums = set() for s in achievable_sums: new_sums.add(s + card) achievable_sums.update(new_sums) min_diff = float(\'inf\') # Find the minimum absolute difference for s in achievable_sums: diff = abs((total_sum - s) - s) if diff < min_diff: min_diff = diff return min_diff def solution(T, cases): results = [] for case in cases: N, cards = case[0], case[1:] result = min_abs_diff(N, cards) results.append(result) return results"},{"question":"You are given an array of integers representing the heights of adjacent buildings on a street. A ball is placed on the top of each building, and each ball can roll down from a building with a shorter or equal height to an adjacent building with a taller height. The goal is to find out the total number of balls that can roll down from one building to an adjacent building. -----Constraints----- - The length of the array is between 2 and 100. - Each building height is a positive integer not greater than 1000. -----Input----- Input is given from Standard Input in the following format: N h1 h2 h3 ... hN -----Output----- Print the total number of balls that can roll down from one building to an adjacent building. -----Sample Input----- 6 10 5 8 11 6 9 -----Sample Output----- 4 Explanation: - The ball can roll from second building (height 5) to third building (height 8). - The ball can roll from third building (height 8) to fourth building (height 11). - The ball can roll from fifth building (height 6) to sixth building (height 9). Note that balls cannot roll if they are at the same height or higher to a lower one.","solution":"def count_rolling_balls(building_heights): This function counts how many balls can roll down from one building to an adjacent building. Parameters: building_heights (list): A list of integers representing the heights of adjacent buildings. Returns: int: The total number of balls that can roll down from one building to an adjacent building. count = 0 for i in range(len(building_heights) - 1): if building_heights[i] < building_heights[i + 1]: count += 1 return count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:])) result = count_rolling_balls(heights) print(result)"},{"question":"Bob has taken interest in the Fibonacci sequence, but he needs some help from you in identifying specific features of the sequence. He wants to determine the sum of all even Fibonacci numbers up to a given number `X`. You are given a natural number `X`, and you need to find the sum of all even Fibonacci numbers which are less than or equal to `X`. INPUT A natural number `X` (1 ≤ X ≤ 10^4) OUTPUT The sum of all even Fibonacci numbers up to `X` SAMPLE INPUT 10 SAMPLE OUTPUT 10 Explanation INPUT 10 OUTPUT 10 In this problem, the Fibonacci sequence generated up to 10 is (0, 1, 1, 2, 3, 5, 8). Even numbers in this sequence are (0, 2, 8). Sum of these even numbers (0 + 2 + 8) = 10","solution":"def sum_even_fibonacci(X): Returns the sum of all even Fibonacci numbers up to a given number X. if X < 2: return 0 a, b = 0, 1 even_sum = 0 while a <= X: if a % 2 == 0: even_sum += a a, b = b, a + b return even_sum"},{"question":"Given a binary tree, determine if it is height-balanced. A height-balanced binary tree is defined as a tree in which the depth of the two subtrees of every node never differs by more than 1. Input Format The first line contains an integer n, the number of nodes in the binary tree. If n is not 0, the next line contains n space-separated integers representing the values of the nodes, followed by n-1 pairs of space-separated integers, each pair representing the parent node and the child node. The relationship between the nodes represents the structure of the tree. Constraints 0 leq n leq 10^5 -10^9 leq text{node value} leq 10^9 Output Format Print \\"YES\\" if the binary tree is height-balanced, otherwise print \\"NO\\". Sample Input 0 7 1 2 3 4 5 6 7 1 2 1 3 2 4 2 5 3 6 3 7 Sample Output 0 YES Explanation 0 The input represents the following binary tree: ``` 1 / 2 3 / / 4 5 6 7 ``` This tree is height-balanced, so the output is \\"YES\\". Sample Input 1 5 1 2 3 4 5 1 2 1 3 2 4 4 5 Sample Output 1 NO Explanation 1 The input represents the following binary tree: ``` 1 / 2 3 / 4 / 5 ``` This tree is not height-balanced, hence the output is \\"NO\\".","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def insert_nodes(nodes, edges): if not nodes: return None node_dict = {val: TreeNode(val) for val in nodes} for parent_val, child_val in edges: parent = node_dict[parent_val] child = node_dict[child_val] if not parent.left: parent.left = child else: parent.right = child return node_dict[nodes[0]] def is_balanced(root): def check_height(node): if node is None: return 0 left_height = check_height(node.left) if left_height == -1: return -1 right_height = check_height(node.right) if right_height == -1: return -1 if abs(left_height - right_height) > 1: return -1 return max(left_height, right_height) + 1 return check_height(root) != -1 def is_tree_balanced(n, node_values, edges): if n == 0: return \\"YES\\" root = insert_nodes(node_values, edges) return \\"YES\\" if is_balanced(root) else \\"NO\\""},{"question":"You are given a list of integers. Your task is to find the smallest positive integer that is not present in the list. Input Format - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of integers in the list. - The second line contains n integers a_1, a_2, ..., a_n (−10^5 ≤ a_i ≤ 10^5). Output Format Print a single integer — the smallest positive integer that does not appear in the list. Examples Input 5 3 4 -1 1 2 Output 5 Input 3 7 8 9 Output 1","solution":"def smallest_missing_positive_integer(n, integers): Given a list of integers, find the smallest positive integer that is not present in the list. Parameters: n (int): Number of integers in the list. integers (list of int): The list of integers. Returns: int: The smallest positive integer that is not present in the list. integers = set(integers) # Convert list to set for O(1) average time complexity checks smallest_missing = 1 while smallest_missing in integers: smallest_missing += 1 return smallest_missing"},{"question":"To prepare for an upcoming software release, Clara needs to generate unique alpha-numeric activation codes for a set of new users. The codes must consist of two capital letters followed by two digits (e.g., AA00). Each code should be unique and should follow a lexicographical order. Write a program that generates the required number of unique activation codes. The first code should be \\"AA00\\", followed by \\"AA01\\", \\"AA02\\", etc., up to the given number of codes. Input Format: number_of_codes Output Format: A list of unique activation codes, each on a new line. Constraints: 1 ≤ number_of_codes ≤ 10000 SAMPLE INPUT 5 SAMPLE OUTPUT AA00 AA01 AA02 AA03 AA04 Explanation The first 5 lexicographically smallest codes are \\"AA00\\", \\"AA01\\", \\"AA02\\", \\"AA03\\", \\"AA04\\".","solution":"def generate_activation_codes(number_of_codes): Generates a list of unique alpha-numeric activation codes in lexicographical order. The codes consist of two capital letters followed by two digits (e.g., AA00). Parameters: number_of_codes (int): The number of unique activation codes to generate Returns: list: A list of unique activation codes codes = [] letters = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" for i in range(26): for j in range(26): for k in range(100): if len(codes) < number_of_codes: code = f\\"{letters[i]}{letters[j]}{k:02d}\\" codes.append(code) else: return codes return codes"},{"question":"Write a Python function that takes a list of words and returns the word that appears the maximum number of times. If there are multiple words with the same highest frequency, return the one which comes first lexicographically (alphabetically). The words in the list are non-empty strings consisting of lowercase letters only. **Example:** For the list `[\\"apple\\", \\"banana\\", \\"apple\\", \\"orange\\", \\"banana\\", \\"banana\\"]`, the function should return `\\"banana\\"`. **Constraints:** - The input list will contain at most 10,000 words. - Words are non-empty and consist only of lowercase English letters. **Function Signature:** ```python def most_frequent_word(words: List[str]) -> str: pass ```","solution":"from typing import List def most_frequent_word(words: List[str]) -> str: Returns the word that appears the maximum number of times in the list of words. If there are multiple words with the same highest frequency, return the one which comes first lexicographically. from collections import Counter word_count = Counter(words) max_frequency = max(word_count.values()) max_words = [word for word, count in word_count.items() if count == max_frequency] return min(max_words)"},{"question":"You are given an array of integers, and your task is to determine if the array can be sorted in non-decreasing order by performing at most one swap of two elements. If it’s possible, return \\"Yes\\", otherwise return \\"No\\". Input: The first line of input contains an integer T, the number of test cases. Each test case consists of two lines: the first line contains a single integer N (the size of the array) and the second line contains N space-separated integers (the elements of the array). Output: For each test case, print \\"Yes\\" if the array can be sorted in non-decreasing order by swapping at most two elements, otherwise print \\"No\\". Constraints: 1 ≤ T ≤ 100 | 2 ≤ N ≤ 10^5 | 1 ≤ a[i] ≤ 10^6 SAMPLE INPUT 2 5 1 5 3 3 6 4 4 2 1 3 SAMPLE OUTPUT Yes No Explanation In the first test case, swapping the elements 5 and 3 (the first 3) will result in the array [1, 3, 3, 5, 6], which is non-decreasing. In the second test case, no single swap can result in a non-decreasing array. Hence, the answer is \\"No\\".","solution":"def can_be_sorted_with_one_swap(n, array): Determines if the array can be sorted in non-decreasing order by performing at most one swap of two elements. :param n: int, size of the array :param array: list of int, the elements of the array :return: str, \\"Yes\\" if it can be sorted with at most one swap, \\"No\\" otherwise sorted_array = sorted(array) diff = [i for i in range(n) if array[i] != sorted_array[i]] if len(diff) == 0: return \\"Yes\\" elif len(diff) == 2: return \\"Yes\\" else: return \\"No\\" def process_test_cases(T, cases): results = [] for case in cases: n, array = case results.append(can_be_sorted_with_one_swap(n, array)) return results"},{"question":"Given an integer n, you are tasked with finding the smallest number that contains exactly n number of digit fives. Your solution should include creating this number by using the minimal possible value for the non-five digits to keep the number as small as possible. Input The input contains a single integer n (1 ≤ n ≤ 10^6), the number of digit fives the resulting number must include. Output Output one number that is the smallest number containing exactly n digit fives. Examples Input 3 Output 555 Input 5 Output 55555 Input 1 Output 5","solution":"def smallest_number_with_n_fives(n): Returns the smallest number that contains exactly n number of digit fives. Parameters: n (int): The number of digit fives Returns: str: The smallest number containing exactly n digit fives return \'5\' * n"},{"question":"Given an integer array A of size N, you need to find all unique triplets (a, b, c) in the array such that a + b + c = 0. Implement a function that returns a list of all such triplets. Each triplet should appear only once in the output, and the order of the triplets does not matter. ------ Input Format ------ The first line contains an integer N, the size of the array. The second line contains N space-separated integers representing the elements of the array A. ------ Output Format ------ Print all unique triplets in any order, each triplet in a new line. If there are no such triplets, print \\"No triplets found\\". ------ Constraints ------ 3 ≤ N ≤ 10^3 -10^5 ≤ A[i] ≤ 10^5 ------ Sample Input 1 ------ 6 -1 0 1 2 -1 -4 ------ Sample Output 1 ------ -1 -1 2 -1 0 1 ------ Explanation 1 ------ The output contains the triplets which sum up to 0. ------ Sample Input 2 ------ 5 0 0 0 0 0 ------ Sample Output 2 ------ 0 0 0 ------ Explanation 2 ------ In this case, the only triplet that sums up to 0 is (0, 0, 0). ------ Sample Input 3 ------ 3 -2 2 0 ------ Sample Output 3 ------ -2 0 2 ------ Explanation 3 ------ The only triplet in this case that sums up to 0 is (-2, 0, 2). ------ Sample Input 4 ------ 4 1 2 3 4 ------ Sample Output 4 ------ No triplets found ------ Explanation 4 ------ There are no triplets that sum up to 0. Therefore, output \\"No triplets found\\".","solution":"def three_sum_zero(arr): Returns a list of all unique triplets (a, b, c) in the array such that a + b + c = 0. arr.sort() N = len(arr) result = [] for i in range(N - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, N - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == 0: result.append((arr[i], arr[left], arr[right])) while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 if not result: return \\"No triplets found\\" else: return result"},{"question":"Time Limit: 6 sec / Memory Limit: 128 MB Given a string containing only digits (0-9), find and return the sum of all possible unique subsequences of length 3 formed by those digits. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. # Input A single string `s` where ( 3 leq |s| leq 1000 ) containing only digits (0-9). # Output A single integer representing the sum of all unique subsequences of length 3 formed by the digits of the string. # Examples Input 124 Output 124 Input 113 Output 113","solution":"from itertools import combinations def sum_unique_subsequences(s): Returns the sum of all possible unique subsequences of length 3 formed by the digits in the string `s`. unique_subsequences = set() for comb in combinations(s, 3): unique_subsequences.add(\'\'.join(comb)) return sum(int(subseq) for subseq in unique_subsequences)"},{"question":"Two children, Alice and Bob, are playing a game with a string s consisting of lowercase English letters. In one move, a player can remove one character from the string. The game starts with Alice and they take turns removing characters. The goal of the game is to be the person who removes the last character from the string. If the length of the string is even, Bob wins by always mirroring Alice\'s moves. If the length of the string is odd, Alice wins. Write a function to determine the winner of the game based on the length of the given string. -----Input----- The first line contains n (1 le n le 10^4) — the number of test cases. The next n lines each contain a string s (length of s does not exceed 10^5). -----Output----- For each test case, print \\"Alice\\" if Alice wins or \\"Bob\\" if Bob wins, on a new line. -----Examples----- Input 3 abc abcd xyz Output Alice Bob Alice -----Note----- In the first example, the length of the string \\"abc\\" is 3, which is odd, so Alice wins. In the second example, the length of the string \\"abcd\\" is 4, which is even, so Bob wins by always mirroring Alice\'s moves. In the third example, the length of the string \\"xyz\\" is 3, which is odd, so Alice wins.","solution":"def game_winner(test_cases): Determines the winner of the game for each test case based on the length of the string. Parameters: test_cases (list of str): The list of strings for each test case. Returns: list of str: The result for each test case, either \\"Alice\\" or \\"Bob\\". results = [] for s in test_cases: if len(s) % 2 == 1: results.append(\\"Alice\\") else: results.append(\\"Bob\\") return results"},{"question":"Given an array A of N integers, an inversion in the array is a pair (i, j) such that i < j and A[i] > A[j]. You need to count the number of such inversions in the array. Example 1: Input: N = 5 A = {2, 4, 1, 3, 5} Output: 3 Explanation: The three inversions are (2, 1), (4, 1), (4, 3). Example 2: Input: N = 5 A = {5, 4, 3, 2, 1} Output: 10 Explanation: The ten inversions are (5, 4), (5, 3), (5, 2), (5, 1), (4, 3), (4, 2), (4, 1), (3, 2), (3, 1), (2, 1). Your Task: You do not need to read input or print anything. Your task is to complete the function countInversions() which takes the value N and the array A as input parameters and returns the total number of inversions in the array. Expected Time Complexity: O(N * log N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9","solution":"def countInversions(N, A): This function returns the number of inversions in the array A of length N. An inversion is a pair (i, j) such that i < j and A[i] > A[j]. def merge_sort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid + 1, right) inv_count += merge(arr, temp_arr, left, mid, right) return inv_count def merge(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid - i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count temp_arr = [0]*N return merge_sort(A, temp_arr, 0, N - 1)"},{"question":"A company is developing a smart traffic management system that uses sensors to monitor the flow of vehicles at various intersections in a city. The system is required to compute and update the effective traffic density at different intersections in real-time based on vehicle entries and departures. Your task is to help the developers by creating a function that performs this task efficiently. Effective traffic density (ETD) at an intersection is defined as the number of vehicles currently present at that intersection. To manage the traffic data, you will be provided with an initial number of vehicles at each intersection and a series of events that describe vehicle entries and departures. Input The first line of the input contains an integer n — the number of intersections (1 ≤ n ≤ 100,000). The second line contains n integers, where the i-th integer represents the initial number of vehicles at the i-th intersection (0 ≤ initial_vehicles ≤ 1,000,000). The next line contains an integer m — the number of events (1 ≤ m ≤ 100,000). The following m lines describe the events. Each event is represented by a string `entry i x` or `departure i x`, indicating that `x` vehicles entered or departed the i-th intersection (1 ≤ i ≤ n, 1 ≤ x ≤ 1,000,000). Output For each intersection, output the final number of vehicles after processing all events. Example Input 4 10 20 30 40 5 entry 1 10 departure 2 5 entry 3 15 departure 4 20 entry 1 5 Output 25 15 45 20 Explanation Initially, the intersections have 10, 20, 30, and 40 vehicles respectively. - After the first event (entry 1 10), the first intersection has 10 + 10 = 20 vehicles. - The second event (departure 2 5) reduces the vehicles at the second intersection from 20 to 15. - The third event (entry 3 15) increases the vehicles at the third intersection from 30 to 45. - The fourth event (departure 4 20) reduces the vehicles at the fourth intersection from 40 to 20. - The fifth event (entry 1 5) increases the vehicles at the first intersection from 20 to 25. Finally, the intersections have 25, 15, 45, and 20 vehicles respectively.","solution":"def update_traffic_density(n, initial_states, m, events): Updates the effective traffic density at intersections based on the given events. Parameters: - n: int, number of intersections - initial_states: list of int, initial number of vehicles at each intersection - m: int, number of events - events: list of strings, describing the events Returns: - list of int, final number of vehicles at each intersection # Copy initial states to avoid mutating the original list traffic = initial_states[:] for event in events: parts = event.split() action = parts[0] index = int(parts[1]) - 1 # Convert 1-based index to 0-based index x = int(parts[2]) if action == \\"entry\\": traffic[index] += x elif action == \\"departure\\": traffic[index] -= x return traffic"},{"question":"A developer is implementing a system to manage user permissions using bitwise operations. They have three functions: `addPermission`, `removePermission`, and `checkPermission`. - The `addPermission` function takes two integers `perm` and `currentPerms`, sets the `perm` bit in `currentPerms` indicating adding the permission, and returns the updated `currentPerms`. - The `removePermission` function takes two integers `perm` and `currentPerms`, clears the `perm` bit in `currentPerms` indicating removing the permission, and returns the updated `currentPerms`. - The `checkPermission` function takes two integers `perm` and `currentPerms`, returns 1 if the `perm` bit in `currentPerms` is set (indicating the permission is present) and 0 otherwise. Example 1: Input: perm1 = 1, currentPerms1 = 3 perm2 = 2, currentPerms2 = 5 perm3 = 0, currentPerms3 = 4 Output: add: 3 remove: 1 check: 0 Explanation: 1. Adding permission bit 1 to current permissions 3 (binary 011), setting bit results in 3. 2. Removing permission bit 2 from current permissions 5 (binary 101), clearing bit results in 1 (binary 001). 3. Checking permission bit 0 for current permissions 4 (binary 100), since bit 0 is not set, result is 0. Constraints: 1 <= perm <= 9 1 <= currentPerms <= 10^5 Your Task: You don\'t need to read input or print anything. Your task is to complete three functions `addPermission()`, `removePermission()`, and `checkPermission()`. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1)","solution":"def addPermission(perm, currentPerms): Adds the permission by setting the perm bit in currentPerms. return currentPerms | (1 << perm) def removePermission(perm, currentPerms): Removes the permission by clearing the perm bit in currentPerms. return currentPerms & ~(1 << perm) def checkPermission(perm, currentPerms): Checks if the permission is set in currentPerms. return 1 if currentPerms & (1 << perm) else 0"},{"question":"In this problem, you are given an integer array `arr` and an integer `k`. Your task is to determine whether there exist two distinct indices `i` and `j` in the array such that `arr[i] + arr[j] == k`. Constraints: - The length of the array `arr` should be between 2 and 1000. - Each element in `arr` is an integer between (-10^5) and (10^5). - The integer `k` can also range between (-10^5) and (10^5). Input: Input is given from Standard Input in the following format: - The first line contains a single integer `n`, the number of elements in the array. - The second line contains `n` integers, representing the elements of `arr`. - The third line contains the integer `k`. Output: Print `1` if there are two distinct indices `i` and `j` such that `arr[i] + arr[j] == k`, otherwise print `0`. Examples: Input 5 1 2 3 4 5 9 Output 1 Input 4 1 2 3 4 8 Output 0","solution":"def check_sum_exists(arr, k): Determines if there are two distinct indices i and j in the array such that arr[i] + arr[j] == k seen = set() for num in arr: if k - num in seen: return 1 seen.add(num) return 0"},{"question":"Given an integer array `arr` of length `n`, your task is to write a program that returns the product of all elements in the array except itself for every index. The output should be an array of the same length. You are not allowed to use division in your solution. Example 1: Input: n = 4 arr = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For index 0, product = 2 * 3 * 4 = 24 For index 1, product = 1 * 3 * 4 = 12 For index 2, product = 1 * 2 * 4 = 8 For index 3, product = 1 * 2 * 3 = 6 Example 2: Input: n = 3 arr = [2, 3, 4] Output: [12, 8, 6] Explanation: For index 0, product = 3 * 4 = 12 For index 1, product = 2 * 4 = 8 For index 2, product = 2 * 3 = 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `productExceptSelf()` which takes `n` and an integer array `arr` as input parameters and returns the array of products. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^5 1 ≤ arr[i] ≤ 10^4","solution":"def productExceptSelf(n, arr): Returns an array where output[i] is the product of all the elements in the array except arr[i]. # Initialize the two auxiliary arrays left_products = [1] * n right_products = [1] * n output = [1] * n # Fill left_products such that left_products[i] contains the product of all elements to the left of arr[i] for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill right_products such that right_products[i] contains the product of all elements to the right of arr[i] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Construct the output array using both left_products and right_products for i in range(n): output[i] = left_products[i] * right_products[i] return output"},{"question":"In a pixel art design tool, you are given a grid of size N times N (1 ≤ N ≤ 100) and a set of instructions that describe how to color specific cells in the grid. Each instruction is in the form of three integers R, C, and K (0 ≤ R, C < N, 1 ≤ K ≤ 10^3), where R is the row index, C is the column index, and K is a positive integer representing the color code. You are required to initialize the grid as an N times N grid of zeroes, then apply each instruction to the grid by setting the cell at position (R, C) to the given color code K. After processing all of the instructions, you need to find and print the color code that appears most frequently in the grid. If there are multiple color codes that appear with the same highest frequency, print the smallest color code among them. -----Input----- The input starts with a line containing one integer N, representing the dimension of the grid. This is followed by an integer M (0 ≤ M ≤ 10^4) that represents the number of instructions. The next M lines each contain three integers R, C, and K, which specify the row index, column index, and color code respectively. -----Output----- Output a single integer, the color code that appears most frequently in the grid. If multiple color codes share the highest frequency, output the smallest among them. -----Examples----- Sample Input: 5 8 0 0 1 0 1 2 0 2 2 1 1 3 2 2 1 2 3 3 3 3 1 4 4 3 Sample Output: 1","solution":"def find_most_frequent_color(N, M, instructions): Given a grid size N and a list of instructions, this function returns the color code that appears most frequently in the grid after applying all the instructions. If multiple color codes have the same highest frequency, it returns the smallest color code among them. from collections import defaultdict # Initialize the grid grid = [[0] * N for _ in range(N)] # Apply the instructions for R, C, K in instructions: grid[R][C] = K # Count the frequency of each color code frequency = defaultdict(int) for row in grid: for color in row: if color != 0: # We don\'t count the initial \'0\' color frequency[color] += 1 # Find the color code with the maximum frequency max_freq = 0 max_color = float(\'inf\') for color, freq in frequency.items(): if freq > max_freq or (freq == max_freq and color < max_color): max_freq = freq max_color = color return max_color"},{"question":"Write a function `sum_digits` that takes a single non-negative integer n as input and returns the sum of its digits. The function should work for any non-negative integer, including very large ones. # Example ```python sum_digits(123) == 6 sum_digits(4567) == 22 sum_digits(0) == 0 sum_digits(98765) == 35 ```","solution":"def sum_digits(n): Returns the sum of the digits of the non-negative integer n. Parameters: n (int): A non-negative integer. Returns: int: Sum of the digits of n. return sum(int(digit) for digit in str(n))"},{"question":"You are given a tree with n nodes and n-1 edges, where nodes are numbered from 1 to n. Each node has a weight associated with it. Our goal is to find a path in the tree such that the sum of the weights of the nodes in the path is maximized. Input The first line contains an integer n (2 ≤ n ≤ 10^6) — the number of nodes in the tree. The second line contains n space-separated integers w_1, w_2, ..., w_n (1 ≤ w_i ≤ 10^9) where w_i represents the weight of the ith node. Each of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between nodes u and v. Output Print a single integer — the maximum possible sum of the weights of the nodes in any path in the tree. Examples Input 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output 11 Input 3 2 1 5 1 2 2 3 Output 8 Note In the first example, the path with the maximum sum is 4 -> 2 -> 1 -> 3, with a total weight of 1 + 2 + 4 + 3 + 1 = 11. In the second example, the path with the maximum sum is 3 -> 2, with a total weight of 2 + 1 = 8.","solution":"import sys from collections import defaultdict, deque sys.setrecursionlimit(2000000) def max_path_sum(n, weights, edges): def dfs(node, parent): max1 = 0 # Maximum path sum starting from this node going down max2 = 0 # Second maximum path sum for comparison for neighbor in graph[node]: if neighbor == parent: continue subtree_weight = dfs(neighbor, node) if subtree_weight > max1: max1, max2 = subtree_weight, max1 elif subtree_weight > max2: max2 = subtree_weight # Update global max path sum nonlocal max_sum max_sum = max(max_sum, weights[node - 1] + max1 + max2) return weights[node - 1] + max1 graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) max_sum = 0 dfs(1, -1) return max_sum # Example usage: n = 5 weights = [1, 2, 3, 4, 5] edges = [(1, 2), (1, 3), (2, 4), (2, 5)] print(max_path_sum(n, weights, edges)) # Output: 11"},{"question":"Dakri is fascinated with matrix operations and has recently started exploring properties of matrices. One day she came across a special type of matrix called a \\"Diagonal Dominant Matrix\\". A matrix is said to be Diagonally Dominant if for every row, the magnitude of the diagonal entry in a row is greater than or equal to the sum of magnitudes of all the other (non-diagonal) entries in that row. Dakri finds it interesting to check whether a given matrix is Diagonally Dominant or not. She needs your help to write a program that can verify this property for given matrices. Below is Dakri\'s requirement: Given an N x N square matrix of integers, determine if the matrix is Diagonally Dominant. # INPUT: - The first line of input contains an integer T (1 ≤ T ≤ 50) - the number of test cases. - For each test case, the first line contains an integer N (1 ≤ N ≤ 100) - the size of the square matrix. - The next N lines, each containing N integers, represent the matrix. # OUTPUT: - For each test case, output \\"YES\\" if the matrix is Diagonally Dominant, otherwise output \\"NO\\". # SAMPLE INPUT 2 3 3 -2 1 1 -4 2 1 2 5 3 1 2 3 2 100 2 3 2 1 # SAMPLE OUTPUT YES NO","solution":"def is_diagonally_dominant(matrix): n = len(matrix) for i in range(n): diag_element = abs(matrix[i][i]) row_sum = sum(abs(matrix[i][j]) for j in range(n) if i != j) if diag_element < row_sum: return False return True def check_matrices(test_cases): results = [] for matrix in test_cases: if is_diagonally_dominant(matrix): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def main(input_data): lines = input_data.split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 matrix = [] for _ in range(N): row = list(map(int, lines[index].split())) matrix.append(row) index += 1 test_cases.append(matrix) results = check_matrices(test_cases) return \\"n\\".join(results)"},{"question":"Alice and Bob are playing another game. In this game, they take turns choosing a number from the set {1, 2, 3}. Alice starts first, and the player who makes the total sum exactly equal to `n` wins the game. If a player cannot make the total sum exactly equal to `n` on their turn, they lose. Both Alice and Bob play optimally. For example, if the total sum is currently 4 and `n` is 5, the player whose turn it is can choose 1 to win the game. You need to determine who will win the game for a given `n` if both players play optimally. Input: The first line contains `t`, the number of test cases. Each of the next `t` lines contains an integer `n`. Output: For each test case, output \\"Alice\\" or \\"Bob\\" depending on who will win the game. Constraints: 1 ≤ t ≤ 1000 1 ≤ n ≤ 1000000 (10^6) SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT Alice Alice Alice","solution":"def determine_winner(n): Determines the winner of the game given the total sum n. Alice wins if n % 4 is not 0, otherwise Bob wins. if n % 4 == 0: return \\"Bob\\" else: return \\"Alice\\" def main(test_cases): Determines the winners for multiple test cases. Parameters: test_cases (list of int): List of integers representing multiple values of n. Returns: list of str: List of winners for each test case. results = [] for n in test_cases: results.append(determine_winner(n)) return results"},{"question":"You have been assigned to create a resource management system for a small company. This company employs N employees, numbered from 1 to N, and has M resources, numbered from 1 to M. Each employee can request access to a subset of these resources, and each resource can be shared among multiple employees. As part of the system, you need to write a script that will process a list of access requests and determine the final allocation of resources. Each access request is specified by three parameters: the ID of the employee making the request, the ID of the resource being requested, and the duration (in minutes) for which the employee needs the resource. If multiple employees request the same resource at overlapping times, the requests are considered invalid. Your task is to write a function that takes as input the number of employees N, the number of resources M, and a list of access requests. Each access request is represented as a tuple (employee_id, resource_id, start_time, duration), where start_time is the time (in minutes) from the start of the day and duration is the length of time for which the resource is requested. The function should return a list of tuples representing the valid access requests. If a request conflicts with any previous request, it should be ignored. Implement the function `manage_resources(N, M, requests)`. # Input - An integer N, representing the number of employees. - An integer M, representing the number of resources. - A list of tuples `requests` where each tuple contains four integers `(employee_id, resource_id, start_time, duration)`. # Output - A list of tuples representing the valid access requests in the order they were processed. # Example ```python def manage_resources(N, M, requests): # Your code here # Example Input N = 3 M = 2 requests = [ (1, 1, 60, 30), (2, 1, 80, 20), (3, 1, 75, 25), (2, 2, 100, 50) ] # Example Output print(manage_resources(N, M, requests)) # [(1, 1, 60, 30), (2, 2, 100, 50)] ``` In this example, the requests from employee 1 and employee 2 for resource 1 overlap, so the request from employee 3 is ignored. The request from employee 2 for resource 2 does not overlap with any other requests, so it is valid. Thus, the function returns a list of valid requests in the order they were processed originally. # Constraints - `1 ≤ N, M ≤ 1000` - `0 ≤ start_time < 1440` (There are 1440 minutes in a day) - `1 ≤ duration ≤ 1440` - `1 ≤ employee_id ≤ N` - `1 ≤ resource_id ≤ M`","solution":"def manage_resources(N, M, requests): This function processes a list of access requests and determines the final allocation of resources. If multiple employees request the same resource at overlapping times, the requests are considered invalid. :param N: int - Number of employees :param M: int - Number of resources :param requests: List[Tuple[int, int, int, int]] - List of access requests :return: List[Tuple[int, int, int, int]] - List of valid access requests # Dictionary to keep track of resource schedule resource_schedule = {i: [] for i in range(1, M + 1)} valid_requests = [] for employee_id, resource_id, start_time, duration in requests: end_time = start_time + duration is_valid = True # Check for overlap with existing reservations for the resource for existing_start, existing_end in resource_schedule[resource_id]: if not (end_time <= existing_start or start_time >= existing_end): is_valid = False break # If no overlap, add the request to the valid list and update the schedule if is_valid: valid_requests.append((employee_id, resource_id, start_time, duration)) resource_schedule[resource_id].append((start_time, end_time)) resource_schedule[resource_id].sort() # Ensure schedule is sorted by start time return valid_requests"},{"question":"You are given a grid of size n x n, initially filled with zeros. An operation is defined as follows: you choose any sub-grid of size k x k (where 1 ≤ k ≤ n) and add 1 to all elements of this sub-grid. Your task is to determine the minimum number of operations required to make all elements of the grid equal to a given positive integer m. -----Input----- The first line contains two space-separated integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 100). -----Output----- Output a single integer — the minimum number of operations required to make all elements of the grid equal to m. -----Examples----- Input 3 2 Output 1 Input 4 3 Output 4","solution":"def min_operations(n, m): Determines the minimum number of operations to make all elements of the grid equal to m. Parameters: n (int): Size of the grid (n x n) m (int): Target positive integer to be achieved for all elements Returns: int: Minimum number of operations # Each operation effectively increments every element in a sub-grid by 1. # To determine the minimum number of operations, we realize that: # We need to increment every element of the n x n grid by m. # Hence, we need to perform m global operations return m"},{"question":"You are working on a project that requires you to manage a list of scheduled events. Each event has a start and end time. To ensure that there are no conflicting events, you need to determine the maximum number of events that can be scheduled without any overlap. The aim is to write a function `max_non_overlapping_events(events)` that takes a list of tuples where each tuple contains two integers representing the start and end times of an event. The function should return the maximum number of non-overlapping events that can be scheduled. # Input Format: - A list `events` where each element is a tuple `(start, end)` indicating the start and end times of an event. `start` and `end` are integers where `0 ≤ start < end ≤ 10^6`. - The length of the list `events` will not exceed `10^5`. # Output Format: - An integer representing the maximum number of non-overlapping events that can be scheduled. # Constraints: - An event `{a, b}` is considered to overlap with another event `{c, d}` if there is any time `t` such that `a ≤ t < b` and `c ≤ t < d`. # Sample Input: ```python events = [(0, 3), (1, 2), (3, 5), (4, 6), (5, 8)] ``` # Sample Output: ```python 3 ``` # Explanation: The maximum number of non-overlapping events that can be scheduled from the sample input is 3. One of the ways to schedule these events is: - (1, 2) - (3, 5) - (5, 8) There are other ways to get 3 non-overlapping events, but the count remains the same.","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events that can be scheduled. Parameters: events (list of tuples): A list of events, each defined by a tuple (start, end). Returns: int: Maximum number of non-overlapping events that can be scheduled. if not events: return 0 # Sort events based on their end times events.sort(key=lambda x: x[1]) count = 1 last_end_time = events[0][1] for start, end in events[1:]: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Given a city grid represented as an NxM matrix, each cell in the grid can either be \'1\' representing a building or \'0\' representing an empty space. The mayor wants to build the largest possible park in the city. A park can only be built on empty spaces (cells with \'0\') and must be rectangular in shape, and it should not overlap with any buildings. Write a program that determines the area of the largest rectangular park that can be built in the city grid. Input The first line contains two integers, N and M, representing the number of rows and columns in the city grid respectively. The next N lines each contain M characters, either \'1\' or \'0\', representing the city grid. * 1 ≤ N, M ≤ 1000 * The grid will contain only \'1\' and \'0\'. Output Print a single integer, the area of the largest rectangular park that can be built in the grid. Example Input 4 4 1 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 Output 4","solution":"def max_histogram_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) max_area = 0 heights = [0] * m for i in range(n): for j in range(m): if grid[i][j] == \'0\': heights[j] += 1 else: heights[j] = 0 area = max_histogram_area(heights) max_area = max(max_area, area) return max_area"},{"question":"You are given a sequence of integers representing the heights of buildings along a street, from left to right. Each building allows a certain amount of sunlight to reach the street based on its height and the heights of the buildings before it. Specifically, a building will block the sunlight for any building to its right that is shorter than or of the same height as itself. Your task is to determine how many buildings receive sunlight. -----Input----- The first line contains the single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains the single integer n (1 le n le 100) — the number of buildings. The second line of each test case contains n integers, where each integer h_i (1 le h_i le 1000) represents the height of the i-th building. -----Output----- For each test case, print the number of buildings that receive sunlight. -----Examples----- Input 3 5 3 5 4 6 2 4 2 3 4 5 3 1 2 2 Output 3 4 2 -----Note----- In the first test case, the buildings with heights 3, 5, and 6 receive sunlight, as each is not blocked by the building to its left. In the second test case, all buildings receive sunlight because each building is taller than the one before it. In the third test case, the buildings with heights 1 and 2 (the first occurrence) receive sunlight. The second building with height 2 does not receive sunlight because the building before it of the same height blocks it.","solution":"def sunlight_buildings(test_cases): results = [] for case in test_cases: n = case[0] heights = case[1] count = 0 max_height = 0 for height in heights: if height > max_height: count += 1 max_height = height results.append(count) return results # Example usage: # test_cases = [(5, [3, 5, 4, 6, 2]), (4, [2, 3, 4, 5]), (3, [1, 2, 2])] # print(sunlight_buildings(test_cases)) # Output: [3, 4, 2]"},{"question":"A company has to conduct a training session for its employees. There are N employees and each employee has a certain level of knowledge. The training session is divided into M topics, and for each topic, a subset of the employees have a solid understanding of that topic. The objective is to form the smallest number of training groups where each group is assigned at least one employee who has a solid understanding of the topic being covered in their group. You are given a list of the employees who understand each topic. Your task is to determine the minimum number of groups needed so that every topic is covered by at least one knowledgeable employee in each group. -----Input----- The first line of the input contains two integers N (the number of employees) and M (the number of topics). The next M lines each contain a series of integers. The i-th line starts with an integer T_i, which represents the number of employees that understand topic i, followed by T_i integers indicating the indices of these employees (0-indexed). -----Output----- Output a single integer, which is the minimum number of groups needed to cover all M topics. -----Examples----- Sample Input: 6 3 2 0 1 3 0 2 3 2 1 4 Sample Output: 2 Explanation: - Group 1: Employee 0 can cover topics 0 and 1. - Group 2: Employee 1 can cover topics 0 and 2. Thus, two groups are sufficient to cover all topics.","solution":"def min_training_groups(N, M, topic_knowledge): Determines the minimum number of training groups required to cover all topics. Parameters: N (int): The number of employees. M (int): The number of topics. topic_knowledge (list of lists): Each list contains integers indicating employees knowledgeable in a topic. Returns: int: The minimum number of training groups needed. from itertools import combinations # Create a list of sets where each set contains the employees knowledgeable in each topic topics = [set(knowledge[1:]) for knowledge in topic_knowledge] # Determine all possible combinations of employees all_employees = set(range(N)) for i in range(1, N + 1): for combo in combinations(all_employees, i): covered_topics = set() for emp in combo: for t_index, t_employees in enumerate(topics): if emp in t_employees: covered_topics.add(t_index) if len(covered_topics) == M: return i return N"},{"question":"You are given an array of integers representing the heights of nested boxes. A box can be nested inside another box if its height is strictly less than the height of the other box. You are allowed to remove boxes, or nest them, finding the longest sequence of nested boxes. Write a function that determines the maximum number of nested boxes possible. -----Constraints----- - 1 ≤ len(heights) ≤ 2 * 10^4 - 1 ≤ heights[i] ≤ 10^9 -----Input----- Input is given as a single integer array: heights -----Output----- Return the maximum number of boxes that can be nested inside each other. -----Sample Input----- [1, 3, 2, 4, 6, 5] -----Sample Output----- 4 One possible sequence of nesting can be [1, 2, 4, 6].","solution":"from bisect import bisect_left def max_nested_boxes(heights): Function to find the maximum number of nested boxes possible. # To find the Longest Increasing Subsequence (LIS) lis = [] for height in heights: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis)"},{"question":"----- Write a function that takes a string containing digits and returns a list of strings representing all possible valid IP addresses that can be made by inserting periods (\\".\\") to separate the string into four octets. Each octet must be a valid integer between 0 and 255, inclusive, and should not have leading zeros except for the number \'0\' itself. -----Input----- - A string `s` representing a sequence of digits with a length from 1 to 12. -----Output----- - A list of strings representing all possible valid IP addresses. -----Examples----- Input \\"25525511135\\" Output [\\"255.255.11.135\\", \\"255.255.111.35\\"] Input \\"0000\\" Output [\\"0.0.0.0\\"] Input \\"1111\\" Output [\\"1.1.1.1\\"] Input \\"101023\\" Output [\\"1.0.10.23\\", \\"1.0.102.3\\", \\"10.1.0.23\\", \\"10.10.2.3\\", \\"101.0.2.3\\"] -----Note----- If there are multiple valid IP addresses from the input string, return them in lexicographical order. If no valid IP addresses can be formed, return an empty list.","solution":"def restore_ip_addresses(s): def is_valid(segment): # Check if a segment is valid: length is at most 3, and each number is between 0 and 255. # And no leading zeros unless the number is \'0\'. return len(segment) == 1 or (segment[0] != \'0\' and int(segment) <= 255) def restore(start=0, parts=[]): if start == len(s) and len(parts) == 4: ip_addresses.append(\'.\'.join(parts)) return if len(parts) >= 4: return for length in range(1, 4): if start + length <= len(s): segment = s[start:start+length] if is_valid(segment): restore(start + length, parts + [segment]) ip_addresses = [] if 4 <= len(s) <= 12: restore() return ip_addresses"},{"question":"Write a function that takes two strings as input and returns the length of the longest common subsequence. A subsequence is a sequence derived by deleting some or none of the characters without changing the order of the remaining characters. Input: Two strings s1 and s2 Output: An integer that represents the length of the longest common subsequence. Sample Input: abcde ace Sample Output: 3 Explanation: The longest common subsequence is \\"ace\\", which has a length of 3. Sample Input: abc def Sample Output: 0 Explanation: There is no common subsequence, so the output is 0.","solution":"def longest_common_subsequence(s1, s2): Returns the length of the longest common subsequence between two strings s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m): for j in range(n): if s1[i] == s2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) return dp[m][n]"},{"question":"You are given an array of integers representing the ages of a group of people. Each age is between 1 and 150 inclusive. Your task is to determine the minimum number of distinct age groups needed so that the difference between the oldest and youngest person in each group is at most K years. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N (number of people) and K (maximum allowed difference in each group). The second line contains N space-separated integers representing the ages of the people. ------ Output ------ For each test case, print a single line containing one integer ― the minimum number of distinct age groups required. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ K ≤ 150 1 ≤ age ≤ 150 ------ Subtasks ------ Subtask #1 (40 points): 1 ≤ N ≤ 100 Subtask #2 (60 points): original constraints ----- Sample Input ------ 2 6 5 2 3 10 7 13 8 5 10 1 12 23 34 45 ----- Sample Output ------ 2 5 ----- Explanation ------ Example case 1: One optimal way is to group the ages into [2, 3] and [7, 8, 10, 13]. The difference between the oldest and youngest in the first group is 1 and in the second group is 6 which is within the allowed K=5. Example case 2: Since K=10, each person needs to be in separate groups to meet the requirement. Thus, 5 groups are needed.","solution":"def min_age_groups(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] ages = sorted(test_cases[i][1]) group_count = 1 min_age = ages[0] for age in ages: if age - min_age > K: group_count += 1 min_age = age results.append(group_count) return results"},{"question":"In this Coding Task, you are to work with a string of mixed characters. Your goal is to find the first non-repeating character in the string and return it. If all characters are repeating, return an empty string. Examples: `\\"leetcode\\" => \'l\'` \'l\' is the first character that is not repeated later in the string. `\\"aabbcc\\" => \'\'` All characters are repeated, hence return an empty string. `\\"aabbc\\" => \'c\'` \'c\' is the first non-repeating character. Good luck!","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string `s`. If all characters are repeating, returns an empty string. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that occurs only once for char in s: if char_count[char] == 1: return char return \'\'"},{"question":"Write a function that accepts a list of dictionaries, each containing a student\'s name and a list of their test scores. The function should return a new list of dictionaries, each containing the student\'s name and their average score. For example: ```python students = [ {\\"name\\": \\"Alice\\", \\"scores\\": [85, 90, 78]}, {\\"name\\": \\"Bob\\", \\"scores\\": [72, 88, 91]}, {\\"name\\": \\"Charlie\\", \\"scores\\": [92, 87, 85]} ] returns: [ {\\"name\\": \\"Alice\\", \\"average\\": 84.33}, {\\"name\\": \\"Bob\\", \\"average\\": 83.67}, {\\"name\\": \\"Charlie\\", \\"average\\": 88.00} ] ```","solution":"def calculate_average_scores(students): Accepts a list of dictionaries containing students\' names and their test scores. Returns a new list of dictionaries with students\' names and their average scores. result = [] for student in students: name = student[\\"name\\"] scores = student[\\"scores\\"] average_scores = round(sum(scores) / len(scores), 2) result.append({\\"name\\": name, \\"average\\": average_scores}) return result"},{"question":"Distribute the Gifts ===================== Given an array of integers representing the weights of gifts and a single integer representing the capacity of a bag, your task is to create a function that determines the maximum number of gifts that can be carried in the bag without exceeding the given capacity. The function should return an integer representing this maximum number. # Example Consider the following input array of gift weights and bag capacity: `gifts = [2, 3, 5, 7]; capacity = 10`. The function should return `3` because the gifts weighing `[2, 3, 5]` can be carried together without exceeding the capacity of `10`. ```python def max_gifts(gifts, capacity): pass # Example Test Case print(max_gifts([2, 3, 5, 7], 10)) # Expected output: 3 ``` # Constraints - Each gift has a positive weight, meaning all elements in the gifts array are positive integers. - The gifts array can contain up to `1000` elements. - The bag capacity is a positive integer that does not exceed `10000`. # Notes - The solution should prioritize finding the highest number of items that can be carried. If multiple combinations result in the same number of gifts, any valid combination is acceptable. - Aim for an optimized solution that performs efficiently even with larger input sizes. - Consider edge cases, such as empty gift arrays or very small capacities.","solution":"def max_gifts(gifts, capacity): Determines the maximum number of gifts that can be carried without exceeding the given capacity. gifts.sort() current_weight = 0 num_gifts = 0 for gift in gifts: if current_weight + gift <= capacity: current_weight += gift num_gifts += 1 else: break return num_gifts"},{"question":"You are given an array of integers of length N. You can perform the following operation as many times as you wish: * Choose an element from the array and decrease it by 1. The goal is to make all elements in the array equal. However, you should minimize the sum of the elements after making them equal. Write a function to determine the minimum sum of the elements in the array after performing the operation any number of times. Constraints * 1 leq N leq 100,000 * 1 leq array[i] leq 10^9 * All values in input are integers. Function Signature ```python def minimize_sum(arr: List[int]) -> int: ``` Input An array of N integers given in the following format: ``` N array_1 array_2 ... array_N ``` Output Print the minimum sum of the elements after making them all equal. Example Input ``` 3 5 3 7 ``` Output ``` 9 ```","solution":"from typing import List def minimize_sum(arr: List[int]) -> int: Given an array of integers, perform the operation of decreasing an element by 1 as many times as required to minimize the sum of the elements and make them all equal. # Find the minimum element in the array min_value = min(arr) # Calculate the minimum sum after making all elements equal to the minimum value result = min_value * len(arr) return result"},{"question":"Given a magazine containing a string of words, and a note containing another string of words, determine if you can form the note by cutting out words from the magazine. Each word in the magazine can only be used once in the note. Example 1: Input: magazine = \\"hello world this is a test\\" note = \\"this is a test\\" Output: 1 Explanation: The note can be formed using words from the magazine. Example 2: Input: magazine = \\"hello world this is a test\\" note = \\"this is not a test\\" Output: 0 Explanation: The note cannot be formed because the word \\"not\\" is missing in the magazine. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canFormNote() which takes two strings magazine and note as input and returns 1 if the note can be formed using the magazine, else returns 0. Expected Time Complexity: O(m+n) where m is the length of the magazine string and n is the length of the note string. Expected Auxiliary Space: O(m) Constraints: The length of the magazine and the note will be at most 10^5, and each word will be at most 100 characters long.","solution":"def canFormNote(magazine, note): Determines if the note can be formed using the words from the magazine. Args: magazine (str): The string containing words from magazine. note (str): The string containing words from note. Returns: int: 1 if note can be formed, otherwise 0. from collections import Counter magazine_words = magazine.split() note_words = note.split() magazine_count = Counter(magazine_words) note_count = Counter(note_words) for word, count in note_count.items(): if magazine_count[word] < count: return 0 return 1"},{"question":"In a town, there are n people, each person can be represented by a unique integer from 1 to n. Some people are friends with each other. Two people are direct friends if they know each other directly. They can also be friends indirectly if there\'s a chain of direct friends connecting them. Given a list of direct friendships, determine the size of the largest group of direct or indirect friends in the town. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The first line of each test case contains two integers n and m (1 leq n leq 10^4, 0 leq m leq 10^5) — the number of people and the number of direct friendships. The following m lines each contain two integers a and b (1 leq a, b leq n) — representing a direct friendship between person a and person b. -----Output----- For each test case, output a single integer representing the size of the largest group of direct or indirect friends. -----Examples----- Input 2 5 3 1 2 1 3 4 5 4 2 1 2 3 4 Output 3 2 -----Note----- In the first test case, the largest group has 3 people, consisting of people 1, 2, and 3. Persons 4 and 5 form a separate group. In the second test case, the largest group has 2 people, consisting of people 1 and 2. Another group consists of people 3 and 4.","solution":"def find_largest_group_size(n, friendships): Returns the size of the largest group of direct or indirect friends. from collections import defaultdict def dfs(node, visited, adj_list): stack = [node] count = 0 while stack: current = stack.pop() if not visited[current]: visited[current] = True count += 1 for neighbor in adj_list[current]: if not visited[neighbor]: stack.append(neighbor) return count adj_list = defaultdict(list) for a, b in friendships: adj_list[a].append(b) adj_list[b].append(a) visited = [False] * (n + 1) largest_group = 0 for person in range(1, n + 1): if not visited[person]: group_size = dfs(person, visited, adj_list) largest_group = max(largest_group, group_size) return largest_group def process_test_cases(t, test_cases): results = [] for n, m, friendships in test_cases: results.append(find_largest_group_size(n, friendships)) return results"},{"question":"A tech company decides to launch a new feature in its interactive reports. Each report contains a list of values, where certain values may be identical and some may differ. The goal for each report is to determine the most frequently occurring value and how many times it occurs. If there are multiple values with the same highest frequency, return the smallest value among them. Input Format The first line contains the number of test cases T, T lines follow. Each line contains an integer N followed by N space-separated integers, the values contained in the report. Output Format For each test case, print the most frequently occurring value and its frequency, separated by a space. Constraints 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 -10^6 ≤ value ≤ 10^6 SAMPLE INPUT 2 5 1 2 2 3 1 6 3 3 4 4 2 2 SAMPLE OUTPUT 1 2 2 2 Explanation Case 1: The values 1 and 2 both occur twice, but 1 is the smaller value. Hence, the output is \\"1 2\\". Case 2: The values 3, 4, and 2 all occur twice. The smallest of these values is 2. Hence, the output is \\"2 2\\".","solution":"def most_frequent_value(test_cases): For each test case, determine the most frequently occurring value and its frequency. If multiple values have the same frequency, the smallest value is chosen. results = [] for values in test_cases: N, *report_values = values frequency_map = {} for value in report_values: if value in frequency_map: frequency_map[value] += 1 else: frequency_map[value] = 1 max_frequency = max(frequency_map.values()) most_frequent_values = [val for val, freq in frequency_map.items() if freq == max_frequency] smallest_most_frequent_value = min(most_frequent_values) results.append((smallest_most_frequent_value, max_frequency)) return results"},{"question":"A wizard in a mystical land discovered a peculiar sequence in his spell book. The sequence starts with two numbers, S_1 and S_2, and each subsequent number is the sum of the previous two numbers mod M. The wizard is very curious about the properties of these sequences and has posed two types of queries: 1. Generate a sequence up to the N-th number and apply a spell that changes all elements from index L to R to their respective values modulo a new number K. 2. Determine the sum of elements from index L to R. Write a program to help the wizard with these queries. -----Input----- The first line contains two integers Q and M (1 leq Q leq 50000) (1 leq M leq 1000000), the number of queries and the initial modulo value. The next Q lines contain information about the queries. If the line starts with 1, then it follows the format “1 S_1 S_2 N L R K” (1 leq S_1, S_2 leq 1000000) (1 leq N leq 100000) (1 leq L leq R leq N) (1 leq K leq 1000000), meaning that the wizard has generated a sequence up to the N-th number and the elements from index L to R should be updated to their values modulo K. If the line starts with 2, then it follows the format “2 L R” (1 leq L leq R leq N), meaning that the wizard wants to know the sum of elements from index L to R. -----Output----- For each query beginning with 2 output the answer to that particular query. Queries should be processed in the order they are given in the input. -----Example----- Sample Input 1: 5 10 1 1 1 5 1 2 3 2 1 5 1 2 3 6 3 4 5 2 1 6 2 4 6 Sample Output 1: 4 25 7","solution":"def generate_sequence(modulus, S1, S2, N): # Generate sequence `up to` Nth number with given modulus sequence = [S1 % modulus, S2 % modulus] for i in range(2, N): next_value = (sequence[i-1] + sequence[i-2]) % modulus sequence.append(next_value) return sequence def process_queries(Q, M, queries): results = [] current_sequence = [] for query in queries: if query[0] == 1: # 1 S1 S2 N L R K _, S1, S2, N, L, R, K = query current_sequence = generate_sequence(M, S1, S2, N) for i in range(L-1, R): # converting to zero-based index current_sequence[i] %= K elif query[0] == 2: # 2 L R _, L, R = query sum_value = sum(current_sequence[L-1:R]) # converting to zero-based index results.append(sum_value) return results"},{"question":"The kingdom of Ecoland is going through an industrial revolution, and with rapid industrialization comes a significant increase in pollution levels. The king of Ecoland has decided to build air purification towers to fight against the pollution. The kingdom is represented as a 1-dimensional line. There are several factories situated along this line which are the sources of pollution. You are given the positions of these factories. Each air purification tower can cover a continuous segment of the line, reducing the pollution effect of all factories within that segment. The towers, however, have a catch: they have overlapping coverage that increases pollution reduction but at a decreased efficiency rate beyond the overlap. The reduction effect exponentially decays with every factory covered multiple times. Your goal is to strategically place the towers such that the overall pollution reduction is maximized. # Problem Statement Given the number of factories and their positions on the line, determine the positions and ranges of the air purification towers to maximize the pollution reduction. # Criteria 1. **Coverage** - Each tower has a specified range within which it reduces pollution. 2. **Overlap Efficiency** - The pollution reduction diminishes exponentially with each additional coverage of the same factory by multiple towers. # Formal Requirements 1. For each test case, you will be given the number of factories `N`, followed by the integer positions of these `N` factories, and the number of towers `M` that you can place. 2. You are to output the position (starting point) and the range (coverage length) of each of the `M` towers. # Input - The first line contains the number of test cases `T`. - For each test case: - The first line contains two integers `N` and `M`. - The second line contains `N` integers indicating the positions of the factories. # Output For each test case: - Output exactly `M` lines, each containing two integers `P` and `R` representing the position (start point) and range (coverage length) of each tower. # Constraints - 1 ≤ T ≤ 50 - 1 ≤ N ≤ 1000 - 1 ≤ M ≤ 50 - 0 ≤ text{Position of each factory} ≤ 10000 - 1 ≤ text{Range of each tower} ≤ 10000 # Example Input: ``` 1 5 2 10 20 30 40 50 ``` Output: ``` 0 25 25 30 ``` # Explanation: In the above example, the first test case: - You have 5 factories located at positions 10, 20, 30, 40, and 50. - You need to place 2 towers optimally. - The output suggests placing the first tower starting at position 0 and covering up to a range of 25. This would cover factories at positions 10 and 20. - The second tower starts at position 25 and covers up to a range of 30, thus covering factories at positions 30, 40, and 50. Your objective is to experiment with different placements to achieve optimal results for maximum pollution reduction considering the exponential decay in efficiency with overlapping coverage.","solution":"def optimal_tower_coverage(T, test_cases): Given the number of factories and their positions, determine the positions and ranges of the air purification towers to maximize the pollution reduction. Parameters: T (int): Number of test cases. test_cases (list[tuple]): List of tuples where each tuple contains: - N (int): Number of factories. - M (int): Number of towers. - positions (list[int]): List of integers indicating the positions of the factories. Returns: list[list[tuple]]: List containing results for each test case. Each result is a list of tuples, each tuple containing the starting point and the range for each tower. results = [] for i in range(T): N, M, positions = test_cases[i] positions.sort() if M == 1: P = positions[0] R = positions[-1] - positions[0] results.append([(P, R)]) continue # Strategy: Initial naive implementation with evenly spaced positioning interval = (positions[-1] - positions[0]) / M towers = [(positions[0] + i * interval, interval) for i in range(M)] results.append([(int(P), int(R)) for P, R in towers]) return results"},{"question":"QualNome needs to check if their filename follows the valid format for a given project. The filename must start with one or more lowercase letters, followed by a series of digits, and end with a `.txt` extension. Write a program that determines if the provided filename is valid according to these rules. -----Constraints----- - The filename will be a non-empty string with a length no more than 50 characters. - The filename doesn’t contain spaces or special characters other than the `.txt` extension. -----Input----- Input is given from Standard Input in the following format: filename -----Output----- Print Valid if the filename follows the required format; otherwise, print Invalid. -----Sample Input----- notes123.txt -----Sample Output----- Valid Since notes123.txt starts with lowercase letters, followed by digits, and ends with `.txt`, it is a valid filename. -----Sample Input----- FileName123.txt -----Sample Output----- Invalid Since FileName123.txt doesn\'t start with lowercase letters, it is not a valid filename.","solution":"import re def is_valid_filename(filename): Checks if the provided filename is valid according to the rules. The filename must start with one or more lowercase letters, followed by a series of digits, and end with a `.txt` extension. Parameters: filename (str): The filename to check. Returns: str: \'Valid\' if the filename is valid, \'Invalid\' otherwise. pattern = re.compile(r\'^[a-z]+[0-9]*.txt\') if pattern.match(filename): return \'Valid\' else: return \'Invalid\'"},{"question":"A company is organizing a coding competition and intends to rank participants based on their performance. To accomplish this, they need to compute a performance score for each participant. The performance score is calculated as follows: 1. Each participant has submitted multiple solutions. 2. Each solution is graded with a score between 0 and 100 inclusive. 3. The performance score for a participant is the sum of the top 3 highest distinct scores they\'ve received. If a participant has received fewer than 3 distinct scores, the performance score is the sum of all of their distinct scores. You will be given the number of participants and a list of the solutions’ scores for each participant. Your task is to compute the performance score for each participant and print these scores. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of participants. The second line contains an integer k (1 ≤ k ≤ 10000) — the number of submissions made by all participants. Each of the following k lines contains two space-separated integers p (1 ≤ p ≤ n) and s (0 ≤ s ≤ 100) — the participant\'s index and the score of their submission. Output Print n lines, where the i-th line contains a single integer — the performance score of the i-th participant. Examples Input 3 8 1 50 1 90 1 80 1 50 2 100 2 30 2 30 3 60 Output 220 130 60 Note In the first sample: - Participant 1 received scores 50, 90, 80, 50. The three highest distinct scores are 90, 80, and 50. Their performance score is 220. - Participant 2 received scores 100, 30, 30. The two highest distinct scores are 100, and 30. Their performance score is 130, since there are fewer than 3 distinct scores. - Participant 3 received a single score 60. Their performance score is 60, as there is only one distinct score.","solution":"def calculate_performance_scores(n, k, submissions): from collections import defaultdict # Create a dictionary to store the scores for each participant participants_scores = defaultdict(set) # Iterate through the submissions to populate the scores for p, s in submissions: participants_scores[p].add(s) # Calculate the performance score for each participant performance_scores = [] for i in range(1, n + 1): scores = sorted(participants_scores[i], reverse=True) # Sort scores in descending order performance_scores.append(sum(scores[:3])) # Sum the top 3 highest distinct scores return performance_scores"},{"question":"You are given an initially empty string `S` and you are allowed to perform exactly `Q` operations on it. The operations can be of the following two types: 1. `append(c)`: Add character `c` (a lowercase English letter) at the end of the string `S`. 2. `delete()`: Remove the character at the end of the string `S`. Your task is to determine the number of times each character from \'a\' to \'z\' appears in the final string S after performing all the operations. Input: - The first line contains an integer `Q` (1 ≤ Q ≤ 10^5) — the number of operations. - Each of the next `Q` lines contains one of the two operation types described above. Output: - Print 26 space-separated integers where the i-th integer denotes the number of times the i-th character (from \'a\' to \'z\') appears in the final string S. Example: Input: ``` 6 append(a) append(b) append(a) delete() append(c) append(c) ``` Output: ``` 1 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` Explanation: - `append(a)`: S = \\"a\\" - `append(b)`: S = \\"ab\\" - `append(a)`: S = \\"aba\\" - `delete()`: S = \\"ab\\" - `append(c)`: S = \\"abc\\" - `append(c)`: S = \\"abcc\\" Character counts: - \'a\': 1 - \'b\': 1 - \'c\': 2 - All other characters: 0","solution":"def perform_operations(Q, operations): from collections import defaultdict S = [] char_counts = defaultdict(int) for operation in operations: if operation.startswith(\\"append\\"): _, char = operation.split(\'(\') char = char.rstrip(\')\') S.append(char) char_counts[char] += 1 elif operation == \\"delete()\\": if S: removed_char = S.pop() char_counts[removed_char] -= 1 result = [char_counts[chr(i)] for i in range(ord(\'a\'), ord(\'z\') + 1)] return result"},{"question":"In a kingdom far away, there are n castles situated along a straight road. Each castle has some treasure in it. The castles are guarded by m knights, each of whom can protect a segment of consecutive castles. The problem is to determine for each knight the total amount of treasure they can protect if they guard their assigned segment. Given the number of castles n, the number of knights m, the amount of treasure in each castle, and the segments each knight can protect, determine the total amount of treasure each knight is responsible for. -----Input----- The first line contains two integers n and m (1 leq n, m leq 10^5), the number of castles and the number of knights, respectively. The second line contains n integers t (1 leq t leq 10^4), the amount of treasure in each castle. The next m lines contain two integers l and r (1 leq l leq r leq n), denoting the starting and ending positions (1-indexed) of the segment of castles that each knight can protect. -----Output----- Print m integers, the total amount of treasure each knight can protect, in the same order as the knights are given in the input. -----Example----- Input 5 3 1 3 2 5 4 1 3 2 4 1 5 Output 6 10 15 -----Note----- The first knight can protect the castles from position 1 to position 3 which have treasures 1, 3, and 2 respectively, summing up to 6. The second knight can protect the castles from position 2 to position 4 which have treasures 3, 2, and 5 respectively, summing up to 10. The third knight can protect all the castles which have treasures 1, 3, 2, 5, and 4 respectively, summing up to 15.","solution":"def calculate_treasure(n, m, treasures, segments): Calculate the total amount of treasure each knight can protect. Args: n (int): Number of castles m (int): Number of knights treasures (list): List of treasure amounts in each castle segments (list): List of segments each knight can protect, given as tuples (l, r) Returns: list: List of total treasures each knight can protect result = [] for l, r in segments: result.append(sum(treasures[l-1:r])) return result"},{"question":"You are given a system of warehouses with unique identifiers where each warehouse stores certain products with specified quantities. Your task is to design a system that can handle requests to transfer products between warehouses. The system should maintain the product inventory accurately and ensure that transfers are only made if there is enough stock in the source warehouse. Implement the WarehouseSystem class: 1. `WarehouseSystem(int[] warehouses, String[] products, int[][] stock)` initializes the system with a list of warehouse IDs, a list of product names, and a 2D list that specifies the stock of each product in each warehouse, where `stock[i][j]` represents the quantity of product `j` in warehouse `i`. 2. `boolean transfer(int sourceWarehouse, int targetWarehouse, String product, int quantity)` returns `true` if the transfer of the specified quantity of the given product from `sourceWarehouse` to `targetWarehouse` is successful. The transfer is successful only if the source warehouse has at least the specified quantity of the product. If the transfer is not possible, it returns `false`. 3. `int checkStock(int warehouse, String product)` returns the current stock of the specified product in the given warehouse. Example: Input [\\"WarehouseSystem\\", \\"transfer\\", \\"checkStock\\", \\"transfer\\", \\"checkStock\\", \\"checkStock\\"] [[[101, 102], [\\"apple\\", \\"banana\\"], [[10, 5], [3, 8]]], [101, 102, \\"apple\\", 5], [101, \\"apple\\"], [102, 101, \\"banana\\", 4], [102, \\"banana\\"], [101, \\"banana\\"]] Output [null, true, 5, true, 4, 9] Explanation WarehouseSystem system = new WarehouseSystem([101, 102], [\\"apple\\", \\"banana\\"], [[10, 5], [3, 8]]); system.transfer(101, 102, \\"apple\\", 5); // returns true, 101 has 10 apples and 102 now has 8 apples (3 + 5). system.checkStock(101, \\"apple\\"); // returns 5, 101 now has 5 apples. system.transfer(102, 101, \\"banana\\", 4); // returns true, 102 has 8 bananas and 101 has 5 bananas (5 + 4). system.checkStock(102, \\"banana\\"); // returns 4, 102 now has 4 bananas. system.checkStock(101, \\"banana\\"); // returns 9, 101 now has 9 bananas (5 + 4 that were transferred). Constraints: - 1 <= warehouses.length <= 2 * 10^3 - 1 <= products.length <= 200 - 0 <= stock[i][j] <= 10^3 - Each warehouse and product name is unique. - 1 <= warehouse ID <= 10^5 - 1 <= quantity <= 10^3 - At most 10^4 calls will be made to transfer and checkStock methods.","solution":"class WarehouseSystem: def __init__(self, warehouses, products, stock): self.warehouses = {warehouse: idx for idx, warehouse in enumerate(warehouses)} self.products = {product: idx for idx, product in enumerate(products)} self.stock = stock def transfer(self, sourceWarehouse, targetWarehouse, product, quantity): if sourceWarehouse not in self.warehouses or targetWarehouse not in self.warehouses: return False if product not in self.products: return False sourceIdx = self.warehouses[sourceWarehouse] targetIdx = self.warehouses[targetWarehouse] productIdx = self.products[product] if self.stock[sourceIdx][productIdx] >= quantity: self.stock[sourceIdx][productIdx] -= quantity self.stock[targetIdx][productIdx] += quantity return True else: return False def checkStock(self, warehouse, product): if warehouse not in self.warehouses or product not in self.products: return -1 warehouseIdx = self.warehouses[warehouse] productIdx = self.products[product] return self.stock[warehouseIdx][productIdx]"},{"question":"Alice is participating in a competitive programming contest. One of the problems she faces involves finding cycles in a directed graph. Alice has to determine whether there exist any cycles in the given graph and output one of them if found. If there are no cycles, she should state that. A cycle is a path that starts and ends at the same vertex, with all intermediate vertices being distinct. Input The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 105), the number of vertices and the number of directed edges in the graph. The next m lines contain the description of the graph\'s edges. The ith line contains two space-separated integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi), representing a directed edge from vertex ai to vertex bi. Output If the graph contains a cycle, output the vertices in the cycle in order, with the last vertex connecting back to the first. If there are multiple cycles, output any of them. If no cycle is found, output \\"No cycle\\" (without quotes). Examples Input 4 4 1 2 2 3 3 4 4 2 Output 2 3 4 2 Input 4 3 1 2 2 3 3 4 Output No cycle Input 5 5 1 2 2 3 3 1 3 4 4 5 Output 1 2 3 1","solution":"def find_cycle(n, m, edges): from collections import defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [0] * (n + 1) # 0 = not visited, 1 = visiting, 2 = visited stack = [] parent = [-1] * (n + 1) def dfs(v): visited[v] = 1 stack.append(v) for neighbour in graph[v]: if visited[neighbour] == 0: parent[neighbour] = v if dfs(neighbour): return True elif visited[neighbour] == 1: cycle = [] u = v while u != neighbour: cycle.append(u) u = parent[u] cycle.append(neighbour) cycle.append(v) cycle.reverse() print(\\" \\".join(map(str, cycle))) return True visited[v] = 2 stack.pop() return False for i in range(1, n + 1): if visited[i] == 0: if dfs(i): return print(\\"No cycle\\") # You can call this function with specific inputs to test the output."},{"question":"A company has a line of employees standing single file in increasing order of their employee IDs. However, due to some shuffling, exactly one employee is out of order. The management wants to place this single out-of-order employee back in place, with the minimum disruption to the line. Your task is to identify the out-of-order employee and determine whether he can be moved to the correct position with just one operation (swapping) or it\'s impossible to fix the sequence with a single swap. Provide a function to solve this problem. Input The first line contains an integer n (2 ≤ n ≤ 105), the number of employees. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109), representing the employee IDs. Output Print \\"YES\\" if it is possible to fix the line with one swap, or \\"NO\\" otherwise. Examples Input 5 1 3 2 4 5 Output YES Input 4 1 4 3 2 Output NO Input 3 3 1 2 Output YES Note In the first example, swapping 3 and 2 will result in a sorted sequence [1, 2, 3, 4, 5], so the output is \\"YES\\". In the second example, to achieve a sorted sequence, more than one swap is needed, so the output is \\"NO\\". In the third example, swapping 3 and 1 will result in a sorted sequence [1, 2, 3], so the output is \\"YES\\".","solution":"def is_one_swap_fixable(n, ids): Returns \\"YES\\" if the sequence can be fixed by a single swap, \\"NO\\" otherwise. # Find the positions where the sequence is out of order out_of_order_positions = [i for i in range(n - 1) if ids[i] > ids[i + 1]] # If none are found, the list is already sorted if not out_of_order_positions: return \\"YES\\" # If more than two adjacent elements are out of order, the sequence cannot be fixed by one swap if len(out_of_order_positions) > 1: return \\"NO\\" # Identify the problematic indices i = out_of_order_positions[0] # Single swap to fix either adjacent or non-adjacent elements: # - Swap i and i+1 # - Swap i with i+2 (checking out of bounds) # - Swap i-1 with i+1 if ( i == n - 2 or (ids[i] > ids[i+2] if i + 2 < n else True) or (ids[i-1] <= ids[i+1] if i > 0 else True) ): return \\"YES\\" else: return \\"NO\\""},{"question":"Sarah is playing a board game where the board is represented as a grid with N rows and M columns. Each cell on the board can either be empty (represented by \'.\') or contain an obstacle (represented by \'#\'). Sarah can start from any cell but cannot move to a cell with an obstacle. She can move to any of the four neighboring cells (up, down, left, right) that are within the bounds of the board and are not blocked by an obstacle. The task is to determine if there exists a path that passes through exactly K empty cells, starting from any empty cell and ending at another (which can be the same). ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains three space-separated integers N, M, and K — the number of rows, columns, and the required number of empty cells in the path, respectively. - The next N lines each contain M characters (either \'.\' or \'#\') describing the board. ------ Output Format ------ For each test case, output on a new line: - YES, if there exists such a path; otherwise, NO. You may print each character in uppercase or lowercase. For example, Yes, YES, yes, and yES, are all considered identical. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 50 1 ≤ K ≤ N × M ----- Sample Input 1 ------ 2 4 4 4 ...# .#.. .... #. 3 3 6 . .#. . ----- Sample Output 1 ------ YES NO ----- Explanation 1 ------ Test case 1: There exists a path of exactly 4 empty cells on the grid starting from the top left corner and moving to the right, down, left, and right respectively. Test case 2: It\'s impossible to find a path of exactly 6 empty cells due to obstacles blocking potential paths.","solution":"def exists_path_with_k_empty_cells(N, M, K, board): def is_within_bounds(x, y): return 0 <= x < N and 0 <= y < M def dfs(x, y, visited, count): if count == K: return True directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_within_bounds(nx, ny) and not visited[nx][ny] and board[nx][ny] == \'.\': visited[nx][ny] = True if dfs(nx, ny, visited, count + 1): return True visited[nx][ny] = False return False for i in range(N): for j in range(M): if board[i][j] == \'.\': visited = [[False] * M for _ in range(N)] visited[i][j] = True if dfs(i, j, visited, 1): return \\"YES\\" return \\"NO\\" def solve(test_cases): results = [] for N, M, K, board in test_cases: result = exists_path_with_k_empty_cells(N, M, K, board) results.append(result) return results"},{"question":"In a coding project, you need to efficiently encode a string consisting of letters and digits. The encoding function processes each character sequence of the same character into a single part consisting of the character followed by the count of its occurrence. If the encoded string is shorter than the original, it returns the encoded string; otherwise, it returns the original string. For example, the string \\"aaabbcccc\\" would be encoded as \\"a3b2c4\\" and returned since it is shorter than the original, but the string \\"abc\\" would be returned as \\"abc\\" because the encoded string \\"a1b1c1\\" is longer. Write a function `encode_string(s)` that takes a string `s` and returns the encoded string if the encoded version is shorter, or the original string otherwise. **Constraints:** - The input string `s` consists only of alphabetical characters (both uppercase and lowercase) and digits \'0\'-\'9\'. - The length of `s` will be in the range [1, 1000]. **Function Signature:** ```python def encode_string(s: str) -> str: ``` **Input:** - `s` as a single string of length from 1 to 1000 containing only alphanumeric characters. **Output:** - Return the encoded string if it is shorter, otherwise return the original string. **Examples:** ```python encode_string(\\"aaabbcccc\\") # Output: \\"a3b2c4\\" encode_string(\\"abc\\") # Output: \\"abc\\" encode_string(\\"AABBBCCCCDDD\\") # Output: \\"A2B3C4D3\\" encode_string(\\"A1A1A1B2B2B2\\") # Output: \\"A111A111B122B122B122\\" ```","solution":"def encode_string(s: str) -> str: Encode the string so that each sequence of the same character is represented by the character followed by the count of its occurrence. Return the encoded string if it is shorter than the original, otherwise return the original string. if not s: return s encoded = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: encoded.append(f\\"{current_char}{count}\\") current_char = char count = 1 # append the last processed character and count encoded.append(f\\"{current_char}{count}\\") encoded_string = \'\'.join(encoded) return encoded_string if len(encoded_string) < len(s) else s"},{"question":"A company is organizing a social event and has created a list of possible activities that participants can engage in. Each activity is assigned a unique ID and has a specific start time and end time. To maximize engagement, participants can attend multiple activities, but they cannot overlap in time. Your task is to find the maximum number of non-overlapping activities that can be attended during the event. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 100,000), denoting the number of activities. The next n lines each contain two space-separated integers, s_i and e_i (0 ≤ s_i < e_i ≤ 10^9), representing the start time and end time of the i-th activity. -----Output----- Output a single integer: the maximum number of non-overlapping activities that can be attended. -----Examples----- Input 3 1 2 2 3 3 4 Output 3 Input 4 1 3 2 5 4 6 7 8 Output 3 -----Note----- In the first example, the participant can attend all three activities because there is no overlap between their times. In the second example, one optimal way to attend the maximum number of non-overlapping activities is to attend activities with times (1, 3), (4, 6), and (7, 8). This results in a maximum of 3 non-overlapping activities. The activity (2, 5) overlaps with both (1, 3) and (4, 6), and thus cannot be chosen.","solution":"def max_non_overlapping_activities(n, activities): Find the maximum number of non-overlapping activities # Sort activities by their end time activities.sort(key=lambda x: x[1]) count = 0 end_time = 0 for s, e in activities: if s >= end_time: count += 1 end_time = e return count"},{"question":"There is a bakery that has just introduced a new line of customizable cakes. Each cake has a certain weight and a price associated with it. You have been tasked with selecting a combination of cakes that maximizes the total price while keeping the total weight within a specified limit. You are given N cakes, each with a weight and a price, and a maximum allowable weight W. Determine the maximum price that can be achieved by selecting a combination of cakes such that their total weight does not exceed W. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ W ≤ 1000 - 1 ≤ weight_i, price_i ≤ 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N W weight_1 price_1 weight_2 price_2 ... weight_N price_N -----Output----- Print the maximum price that can be achieved. -----Sample Input----- 4 10 5 10 4 40 6 30 3 50 -----Sample Output----- 90 Explanation: You can select the 2nd and 4th cakes (weight 4 + 3 = 7, price 40 + 50 = 90).","solution":"def knapsack(N, W, cakes): # Create a 2D DP array to store maximum price for given weight dp = [[0 for _ in range(W + 1)] for _ in range(N + 1)] for i in range(1, N + 1): weight, price = cakes[i - 1] for w in range(1, W + 1): if weight > w: dp[i][w] = dp[i - 1][w] else: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + price) return dp[N][W] if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) W = int(data[1]) cakes = [(int(data[i * 2 + 2]), int(data[i * 2 + 3])) for i in range(N)] result = knapsack(N, W, cakes) print(result)"},{"question":"One day, while exploring the forest, you encountered a mysterious ancient artifact. The artifact is a rectangular grid of cells with dimensions N x M, and each cell contains a certain number of magical crystals. To activate the artifact, you need to find the maximum number of crystals you can collect by moving through the grid. You start in the top-left cell (1, 1) and can only move to the right or down to the adjacent cell until you reach the bottom-right cell (N, M). Each move allows you to collect the crystals from the cell you move to. Your task is to determine the maximum number of crystals you can collect on your path from the top-left cell to the bottom-right cell. ------ Input ------ The first line of the input contains two integers, N and M, denoting the dimensions of the grid. The next N lines contain M integers each, where the j-th integer in the i-th line denotes the number of crystals in the cell (i, j). ------ Output ------ Print a single integer — the maximum number of crystals that can be collected while traveling from the top-left cell to the bottom-right cell. ------ Constraints ------ 1 ≤ N, M ≤ 1000 0 ≤ text{number of crystals in each cell} ≤ 10^4 ------ Sample Input 1 ------ 3 3 1 3 1 1 5 1 4 2 1 ------ Sample Output 1 ------ 12 ------ Explanation 1 ------ The optimal path to collect the most crystals is (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3) which gives you a total of 12 crystals (1 + 3 + 5 + 2 + 1). ------ Sample Input 2 ------ 2 2 1 2 0 3 ------ Sample Output 2 ------ 6 ------ Explanation 2 ------ The optimal path to collect the most crystals is (1, 1) -> (1, 2) -> (2, 2) which gives you a total of 6 crystals (1 + 2 + 3).","solution":"def max_crystals(N, M, grid): Returns the maximum number of crystals that can be collected from the top-left cell to the bottom-right cell of a grid. Parameters: N (int): number of rows M (int): number of columns grid (list of lists of int): the grid containing the number of crystals in each cell Returns: int: The maximum number of crystals collectible. # Initialize a 2D dp array with the same dimensions as the grid dp = [[0] * M for _ in range(N)] # Fill up the dp array with the maximum crystals collectible at each cell for i in range(N): for j in range(M): if i == 0 and j == 0: dp[i][j] = grid[i][j] elif i == 0: dp[i][j] = dp[i][j-1] + grid[i][j] elif j == 0: dp[i][j] = dp[i-1][j] + grid[i][j] else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the maximum crystals collectible return dp[N-1][M-1]"},{"question":"Liam loves playing with arrays and sums. He recently stumbled upon a fascinating problem. Given an array of distinct integers, he wants to find the maximum value of the sum of any three distinct integers from the array. However, to make it a bit more challenging, he wants the sum of exactly three elements to be less than or equal to a given integer K. ------- Input ------- The first line of the input contains an integer T denoting the number of test cases. Each test case begins with a line containing two integers N (the number of integers in the array) and K (the maximum allowed sum). The next line contains N space-separated distinct integers representing the array. ------- Output ------- For each test case, output a single line containing the maximum value of the sum of any three distinct integers from the array that is less than or equal to K. If no such sum exists, output -1. ------- Constraints ------- 1 ≤ T ≤ 100 3 ≤ N ≤ 1000 1 ≤ array elements ≤ 10^9 1 ≤ K ≤ 10^9 ------- Sample Input 1 ------- 2 5 10 2 3 5 7 11 4 20 1 8 9 15 ------- Sample Output 1 ------- 10 18 ------- Explanation 1 ------- In the first example: The possible sums of any three distinct integers from the array are: 2 + 3 + 5 = 10 2 + 3 + 7 = 12 2 + 3 + 11 = 16 2 + 5 + 7 = 14 The largest sum that is less than or equal to 10 is 10. In the second example: The possible sums of any three distinct integers from the array are: 1 + 8 + 9 = 18 Since there are only three numbers in the array and they sum to less than 20, the result is 18. If no such sum exists, output -1.","solution":"from itertools import combinations def max_sum_less_than_equal_k(N, K, arr): max_sum = -1 for comb in combinations(arr, 3): current_sum = sum(comb) if current_sum <= K: max_sum = max(max_sum, current_sum) return max_sum def solve(test_cases): results = [] for N, K, array in test_cases: result = max_sum_less_than_equal_k(N, K, array) results.append(str(result)) return \\"n\\".join(results)"},{"question":"You are given a list of positive integers representing the heights of various students standing in a row. Your task is to find the minimum number of students who need to be removed such that the remaining students are either strictly increasing or strictly decreasing in height. Input: - The first line contains a single integer n (1 ≤ n ≤ 50), representing the number of students. - The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 1000), representing the heights of the students. Output: - Output a single integer, the minimum number of students that need to be removed. Example: Input: 8 1 3 2 2 4 5 3 6 Output: 3 Explanation: One possible solution could be to remove the students with heights 3, 2, and 3, resulting in the sequence [1, 2, 4, 5, 6], which is strictly increasing. Therefore, the minimum number of students that need to be removed is 3.","solution":"def min_remove_students_to_sort(n, heights): def longest_increasing_subsequence(seq): dp = [1] * len(seq) for i in range(1, len(seq)): for j in range(i): if seq[i] > seq[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def longest_decreasing_subsequence(seq): dp = [1] * len(seq) for i in range(1, len(seq)): for j in range(i): if seq[i] < seq[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) lis_length = longest_increasing_subsequence(heights) lds_length = longest_decreasing_subsequence(heights) return n - max(lis_length, lds_length)"},{"question":"# Description: Given a string `str` that consists of lowercase letters and a target string `tgt` that is also a lowercase letter string, determine the length of the smallest substring of `str` that contains all the characters from `tgt` (including duplicates). If such a substring does not exist, return 0. For example: ``` str = \\"this is a test string\\" tgt = \\"tist\\" findMinSubstring(str, tgt) === 6 \\"t stri\\" is the smallest substring that contains \\"tist\\" ``` # Note: - All inputs are valid. - If no such substring is found, return 0. - Pay attention to the performance of the code. Efficient algorithms are recommended. # Some Examples ``` findMinSubstring(\\"ADOBECODEBANC\\", \\"ABC\\") === 4 findMinSubstring(\\"this is a test string\\", \\"tist\\") === 6 findMinSubstring(\\"geeksforgeeks\\", \\"ork\\") === 5 findMinSubstring(\\"hello\\", \\"hello\\") === 5 findMinSubstring(\\"hello\\", \\"world\\") === 0 findMinSubstring(\\"a\\", \\"a\\") === 1 findMinSubstring(\\"a\\", \\"b\\") === 0 findMinSubstring(\\"\\", \\"a\\") === 0 ``` # Constraints - Length of `str` <= 10^5 - Length of `tgt` <= 10^4","solution":"from collections import Counter, defaultdict def findMinSubstring(s, t): Finds the length of the smallest substring of `s` that contains all the characters from `t`. If no such substring exists, returns 0. if not s or not t: return 0 target_count = Counter(t) current_count = defaultdict(int) required_chars = len(target_count) formed_chars = 0 left = 0 min_length = float(\\"inf\\") min_window = (0, 0) for right in range(len(s)): char = s[right] current_count[char] += 1 if char in target_count and current_count[char] == target_count[char]: formed_chars += 1 while left <= right and formed_chars == required_chars: char = s[left] if (right - left + 1) < min_length: min_length = right - left + 1 min_window = (left, right) current_count[char] -= 1 if char in target_count and current_count[char] < target_count[char]: formed_chars -= 1 left += 1 return min_length if min_length != float(\\"inf\\") else 0"},{"question":"Arjun loves solving puzzles during his leisure time. Recently, he came across an interesting sequence problem and thought of writing a program for it. The sequence is defined as follows: - The sequence starts with a single integer `x`. - Every subsequent integer in the sequence is derived based on the parity (odd/even) of the previous integer in the sequence: - If the previous integer is even, the next integer is half of it. - If the previous integer is odd, the next integer is 3 times the previous integer plus 1. The sequence ends when it reaches `1`. Arjun wants to find out the length of the sequence for any given integer `x`. Write a program that reads an integer `x`, generates the sequence, and outputs its length. Constraints: - 1 ≤ x ≤ 10^6 Input: - The first line contains an integer `T` representing the number of test cases. - The next `T` lines each contain a single integer `x`. Output: - For each test case, output a single integer representing the length of the sequence for the given `x`. SAMPLE INPUT: 3 6 7 15 SAMPLE OUTPUT: 9 17 18","solution":"def sequence_length(x): Returns the length of the sequence for a given integer x where the sequence is defined as: - if the current number is even, the next number is half of it. - if the current number is odd, the next number is 3 times the current number plus 1. The sequence ends when it reaches 1. length = 1 while x != 1: if x % 2 == 0: x //= 2 else: x = 3 * x + 1 length += 1 return length def solve_sequence_lengths(test_cases): results = [] for x in test_cases: results.append(sequence_length(x)) return results"},{"question":"# Implement a Special Stack Design a stack that supports operations like a regular stack (push and pop) but also has an additional function min() that returns the minimum element from the stack in constant time (O(1)). Implement the SpecialStack class with the following methods: - `push(val)`: Pushes the element val onto the stack. - `pop()`: Removes the element on the top of the stack and returns it. - `top()`: Returns the element on the top of the stack. - `min()`: Retrieves the minimum element in the stack. **Example:** ```python specialStack = SpecialStack() specialStack.push(3) specialStack.push(5) print(specialStack.min()) # Output: 3 specialStack.push(2) specialStack.push(1) print(specialStack.min()) # Output: 1 specialStack.pop() print(specialStack.min()) # Output: 2 specialStack.pop() print(specialStack.top()) # Output: 5 ``` **Constraints:** - All stack operations (push, pop, top, and min) must be performed in O(1) time complexity. - Values pushed onto the stack will be integers.","solution":"class SpecialStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, val): self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self): if self.stack: val = self.stack.pop() if val == self.min_stack[-1]: self.min_stack.pop() return val def top(self): if self.stack: return self.stack[-1] def min(self): if self.min_stack: return self.min_stack[-1]"},{"question":"A group of friends are playing a game where they create various shapes using sticks of different lengths. The friends want to know if they can form a specific shape using the set of sticks they have. Specifically, they want to form a rectangle or square. - A rectangle can be formed if you can find two pairs of sticks with the same length. - A square can be formed if you can find four sticks of the same length. Write a function to check if it is possible to form a rectangle or a square with the given set of sticks. -----Input----- The first line contains an integer n (4 le n le 1000) — the number of sticks. The following line contains n integers a_i (1 le a_i le 100) — the lengths of the sticks. -----Output----- Print \\"YES\\" if you can form a rectangle or a square, otherwise print \\"NO\\". -----Examples----- Input 6 1 2 3 4 5 6 Output NO Input 4 1 1 2 2 Output YES Input 8 3 4 2 4 3 3 2 3 Output YES -----Note----- In the first example, it is not possible to form a rectangle or square with the lengths provided. In the second example, the lengths are sufficient to form a rectangle (1, 1, 2, 2). In the third example, you can form both a square (3, 3, 3, 3) and a rectangle (2, 2, 4, 4).","solution":"from collections import Counter def can_form_shape(n, stick_lengths): # Count the frequency of each stick length stick_count = Counter(stick_lengths) pairs = 0 quads = False # Check for pairs and quads for count in stick_count.values(): pairs += count // 2 if count >= 4: quads = True # Rectangle require at least 2 pairs, and square require at least one quad if pairs >= 2 or quads: return \\"YES\\" else: return \\"NO\\" # Example usage n = 8 stick_lengths = [3, 4, 2, 4, 3, 3, 2, 3] assert can_form_shape(n, stick_lengths) == \\"YES\\""},{"question":"In a fictional city, the mayor wants to reform the bus schedule. The goal is to minimize the number of buses running while ensuring that every bus route is used by at least one bus each day. The city has multiple bus routes, and each bus route consists of a list of bus stops. Each route can only be serviced by one bus per day, and each bus must complete one route per day. To minimize the total number of buses used, you\'ll have to find the minimum number of buses required to cover all routes in the city such that all bus stops are serviced. Input & Output The first line of the input contains the number of test cases T. Each test case has the following format: - The first line contains the number of bus routes R. - The next R lines each contain a list of integers representing the stops for that route. For each test case, output a single integer: the minimum number of buses required. Constraints: 1 ≤ T ≤ 5 1 ≤ R ≤ 10 1 ≤ stops in each route ≤ 100 SAMPLE INPUT 2 3 1 2 3 3 2 1 1 3 4 2 1 2 2 3 SAMPLE OUTPUT 2 2 Explanation 1) In the first sample, the minimum number of buses needed is 2. The buses can service the following: - One bus covers routes [1 2 3] and [3 2 1]. - The second bus covers route [1 3 4]. 2) In the second sample, the minimum number of buses needed is 2. Each route is covered by a separate bus.","solution":"def min_buses(routes): Returns the minimum number of buses required to cover all routes. # Initialize a set to store unique routes unique_routes = set() # Iterate over the routes for route in routes: unique_routes.add(tuple(sorted(route))) # Return the number of unique routes as each requires a separate bus return len(unique_routes) def process_input(input_data): Process the input data and return the results for each test case. lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] idx = 1 for _ in range(T): R = int(lines[idx]) routes = [list(map(int, lines[idx + i + 1].split())) for i in range(R)] results.append(min_buses(routes)) idx += R + 1 return results"},{"question":"Anna is a student doing a research project on temperature variations. In her project, she is analyzing an array of temperature values measured every day over a period. She wants to identify the periods where the temperature remains constant for several consecutive days. Specifically, she is interested in finding out how many subarrays of the temperature measurements have exactly n days of constant temperature. Given an array of temperature measurements, help Anna find the number of subarrays of length n where all temperature values are the same. A subarray of length n of an array `a` = (a1, a2, ..., ap) is an array extracted as follows: starting from an index i (1 ≤ i ≤ p - n + 1), the subarray includes n consecutive elements: `a[i], a[i+1], ..., a[i+n-1]`. Input The first line contains two space-separated integers p, n (1 ≤ n ≤ p ≤ 5·104), where p is the number of temperature measurements and n is the required length for the subarray of constant temperatures. The second line contains p space-separated integers ti (1 ≤ ti ≤ 100), where ti represents the temperature on the i-th day. Output Print the number of subarrays of length n where all elements are the same. Examples Input 7 3 5 5 6 6 6 5 5 Output 1 Input 5 2 3 3 3 3 3 Output 4 Input 4 1 4 4 4 4 Output 4 Note In the first example, there is one subarray of length 3 with the same temperature: `[6, 6, 6]`. In the second example, there are four subarrays of length 2 with the same temperature: `[3, 3]`, `[3, 3]`, `[3, 3]`, `[3, 3]`. In the third example, since the length of the subarray is 1, each element in the array forms a subarray, so there are four such subarrays.","solution":"def count_constant_temperature_subarrays(p, n, temperatures): Count the number of subarrays of length n where all elements are the same. Parameters: - p: The number of temperature measurements. - n: The required length for the subarray of constant temperatures. - temperatures: List of temperature measurements. Returns: - The number of subarrays of length n with constant temperatures. count = 0 for i in range(p - n + 1): if len(set(temperatures[i:i + n])) == 1: count += 1 return count"},{"question":"Write a program that processes a sequence of positive integers and determines for each, whether they are a prime number, a composite number, or neither. A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. A composite number is a number greater than 1 that is not a prime number. Any number less than or equal to 1 is neither prime nor composite. Input The input consists of a sequence of integers. The number of integers does not exceed 200. Each integer is on a separate line and the sequence ends when an integer of -1 is encountered (this indicates the end of input and should not be processed). Output For each integer, print the string `\\"prime number\\"` if the integer is a prime number, `\\"composite number\\"` if the integer is a composite number, or `\\"neither\\"` if the integer is neither prime nor composite. Example Input 5 10 1 23 0 18 -1 Output prime number composite number neither prime number neither composite number","solution":"def is_prime(n): Determine if a number is a prime. :param n: An integer number to check. :return: True if n is a prime number, False otherwise. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True def classify_number(n): Classify a number as prime, composite or neither. :param n: An integer number to classify. :return: \\"prime number\\", \\"composite number\\" or \\"neither\\" if n <= 1: return \\"neither\\" if is_prime(n): return \\"prime number\\" else: return \\"composite number\\" def process_numbers(numbers): Process a list of numbers and classify each as prime, composite or neither. :param numbers: A list of integer numbers. :return: A list of classification strings for each number. results = [] for number in numbers: if number == -1: break results.append(classify_number(number)) return results"},{"question":"Write a function that determines whether a given matrix is a magic square or not. A magic square is a square matrix in which the sum of every row, column, and both main diagonals are the same. Input: - n (the size of the matrix, n x n) - matrix (a list of n lists, each containing n integers) Output: - Return True if the matrix is a magic square. - Return False otherwise. Examples: Input: 3 [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] Output: True Input: 4 [ [16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1] ] Output: True Input: 3 [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: False Note: 1. The matrix size n will be between 1 and 10. 2. Each element of the matrix will be a positive integer.","solution":"def is_magic_square(n, matrix): Determines if the given n x n matrix is a magic square. Args: n (int): Size of the matrix (n x n). matrix (list of list of int): The matrix to be checked. Returns: bool: True if the matrix is a magic square, False otherwise. # Calculate the sum of the first row to set the reference magic_constant = sum(matrix[0]) # Check sum of all rows for row in matrix: if sum(row) != magic_constant: return False # Check sum of all columns for col in range(n): col_sum = sum(matrix[row][col] for row in range(n)) if col_sum != magic_constant: return False # Check sum of the main diagonal if sum(matrix[i][i] for i in range(n)) != magic_constant: return False # Check sum of the secondary diagonal if sum(matrix[i][n-1-i] for i in range(n)) != magic_constant: return False return True"},{"question":"In the kingdom of Arda, there are N cities connected by bidirectional roads, forming a perfect tree such that there is exactly one path between any two cities. The city numbered 1 is the capital city. Frodo, the fearless adventurer, is traveling through Arda and always starts his journey from the capital city. However, due to recent road repairs, some roads may be temporarily closed, making certain paths inaccessible. You are tasked with answering Q queries about Frodo\'s travels. Each query gives a city X that Frodo wants to reach. For each query, determine whether Frodo can reach city X given the current set of road closures and, if possible, find the minimum number of roads he needs to travel. If it is impossible to reach the city, you should report that as well. Each query can have one of the following forms: - 0 X - Check if Frodo can reach city X from the capital city and return the number of roads traveled or report that it is impossible. - 1 A B - Temporarily close the road between city A and city B. - 2 A B - Reopen the road between city A and city B. # Input: The first line contains a single integer N, the number of cities in Arda. The next N-1 lines contain two space-separated integers A and B, indicating a road between city A and city B. The next line contains a single integer Q, the number of queries. The following Q lines contain one of the three query formats as described above. # Output: For each query of the form 0 X, output either \\"YES <c>\\" where <c> is the minimum number of roads traveled or \\"NO\\" if it is impossible to reach city X. # Constraints: - 2 ≤ N ≤ 10^5 - 1 ≤ A, B, X ≤ N - 1 ≤ Q ≤ 10^5 # Example: Input: ``` 5 1 2 1 3 3 4 3 5 6 0 4 1 1 3 0 5 2 1 3 0 4 0 2 ``` Output: ``` YES 2 NO YES 2 YES 1 YES 1 ``` Note: - The initial road network forms a connected tree. - The road closures and reopenings are temporary and only apply to subsequent queries. - Efficiently handle the large input size using suitable data structures and algorithms for processing tree traversals and connectivity queries.","solution":"from collections import defaultdict, deque class KingdomArda: def __init__(self, n): self.n = n self.graph = defaultdict(list) self.closed_roads = set() def add_road(self, a, b): self.graph[a].append(b) self.graph[b].append(a) def close_road(self, a, b): self.closed_roads.add((a, b)) self.closed_roads.add((b, a)) def reopen_road(self, a, b): self.closed_roads.discard((a, b)) self.closed_roads.discard((b, a)) def can_reach(self, x): if x == 1: return \\"YES 0\\" # BFS to find the shortest path from capital city 1 to city X visited = set() queue = deque([(1, 0)]) while queue: city, depth = queue.popleft() if city == x: return f\\"YES {depth}\\" if city not in visited: visited.add(city) for neighbor in self.graph[city]: if (city, neighbor) not in self.closed_roads and neighbor not in visited: queue.append((neighbor, depth + 1)) return \\"NO\\" # Sample usage (according to the example provided) def main(): import sys input = sys.stdin.read data = input().split() idx = 0 N = int(data[idx]) idx += 1 kingdom = KingdomArda(N) for _ in range(N-1): A = int(data[idx]) B = int(data[idx+1]) idx += 2 kingdom.add_road(A, B) Q = int(data[idx]) idx += 1 result = [] for _ in range(Q): query_type = int(data[idx]) if query_type == 0: X = int(data[idx + 1]) result.append(kingdom.can_reach(X)) idx += 2 elif query_type == 1: A = int(data[idx + 1]) B = int(data[idx + 2]) kingdom.close_road(A, B) idx += 3 elif query_type == 2: A = int(data[idx + 1]) B = int(data[idx + 2]) kingdom.reopen_road(A, B) idx += 3 for res in result: print(res) if __name__ == \\"__main__\\": main()"},{"question":"A certain university has recently transitioned to a new grading system. For each student, based on their scores in 5 subjects, grades are determined. The grades comply with the following rules: - A student’s final grade is computed based on the average of the 5 scores. - If the average score is greater than or equal to 90, the grade is \'A\'. - If the average score is greater than or equal to 80 and less than 90, the grade is \'B\'. - If the average score is greater than or equal to 70 and less than 80, the grade is \'C\'. - If the average score is greater than or equal to 60 and less than 70, the grade is \'D\'. - If the average score is less than 60, the grade is \'F\'. Write a program that reads the scores of a number of students and outputs their final grades. Input The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the number of students. Each of the next n lines contains five integers s1, s2, s3, s4, s5 (0 ≤ s1, s2, s3, s4, s5 ≤ 100) — the scores of a student in the five subjects. Output For each student, output their final grade (\'A\', \'B\', \'C\', \'D\', or \'F\') in a new line. Examples Input 3 85 90 78 92 88 60 58 65 67 62 95 96 92 94 98 Output B D A Input 2 50 50 50 50 50 75 70 65 80 75 Output F C","solution":"def calculate_grade(scores): Returns the final grade based on the average of five scores average = sum(scores) / 5 if average >= 90: return \'A\' elif average >= 80: return \'B\' elif average >= 70: return \'C\' elif average >= 60: return \'D\' else: return \'F\' def determine_grades(student_scores): Takes a list of student scores and returns a list of their final grades grades = [] for scores in student_scores: grades.append(calculate_grade(scores)) return grades"},{"question":"You are given a grid of size n × n filled with integers. Your task is to find the sum of integers in the largest square sub-grid that can be formed within the given grid, such that the sum of the integers in this sub-grid is maximum. The sub-grid should be a perfect square (width and height are equal) and should be part of the original grid. INPUT The first line contains a single integer n (1 ≤ n ≤ 500), which represents the number of rows and columns in the grid. The next n lines contain n integers each, representing the grid\'s elements. Let\'s call this grid G, and G[i][j] is the element in the i-th row and j-th column (0 ≤ G[i][j] ≤ 10^4). OUTPUT Print an integer in a single line — the maximum sum of integers in the largest square sub-grid. SAMPLE INPUT 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 45 Explanation The entire grid is 3 × 3 and the sum of all the elements in this grid is 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45. Since the grid is already a square, it is the largest possible sub-grid.","solution":"def max_square_subgrid_sum(grid): Returns the maximum sum of integers in the largest square sub-grid within the given grid. n = len(grid) # Helper function to get sum of sub-grid from (i, j) with size k def subgrid_sum(i, j, k): return sum(grid[x][y] for x in range(i, i + k) for y in range(j, j + k)) max_sum = 0 for k in range(1, n + 1): # size of the sub-grid for i in range(n - k + 1): for j in range(n - k + 1): current_sum = subgrid_sum(i, j, k) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a square matrix of integers. Your task is to rotate the matrix 90 degrees clockwise. Write a function that takes an integer `n` which represents the dimension of the matrix and a 2D list `matrix` of size `n x n`. The function should return a new 2D list representing the matrix rotated 90 degrees clockwise. The value of `n` will be between 1 and 100 inclusive, and the entries in the matrix are integers between -1000 and 1000 inclusive. # Input - An integer `n` which represents the dimension of the matrix. - A 2D list `matrix` of size `n x n` where each element is an integer between -1000 and 1000 inclusive. # Output - A 2D list representing the matrix rotated 90 degrees clockwise. # Example Input ``` 4 [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] ``` Output ``` [ [13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4] ] ``` # Note - You may assume that the function signature looks like this: ```python def rotate_matrix(n: int, matrix: List[List[int]]) -> List[List[int]]: ``` - Your function should properly handle the edge cases, such as when `n` is 1.","solution":"def rotate_matrix(n, matrix): Rotates a given n x n matrix 90 degrees clockwise. :param n: Integer representing the dimensions of the matrix :param matrix: 2D list of integers representing the matrix to rotate :return: 2D list of integers representing the rotated matrix rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"Ara must prepare exactly k packages for her baking business. She has only two types of packaging available: Small boxes that can hold exactly 1 treat, and Large boxes that can hold exactly 3 treats. Ara wants to use as few boxes as possible to minimize cost. Help her figure out the minimum number of boxes needed to package exactly k treats. Return the number of small boxes and large boxes she needs. -----Input----- The first line contains one integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains one integer k (1 le k le 10^9) — the total number of treats to be packaged. -----Output----- For each test case, output a single line containing two integers s and l (s, l ge 0) separated by a space where s is the number of small boxes used and l is the number of large boxes used. If there are multiple optimal solutions, print any one. -----Examples----- Input 5 14 4 1 8 27 Output 2 4 1 1 1 0 2 2 0 9 -----Note----- The answer for the first test case is \\"2 4\\". The number of treats in all the boxes is 2 cdot 1 + 4 cdot 3 = 14, which uses a total of 2 + 4 = 6 boxes, the minimum number possible. The answer for the second test case is \\"1 1\\". The number of treats in all the boxes is 1 cdot 1 + 1 cdot 3 = 4, which uses a total of 1 + 1 = 2 boxes. The answer for the third test case is \\"1 0\\". The number of treats in all the boxes is 1 cdot 1 + 0 cdot 3 = 1, which uses a total of 1 box.","solution":"def min_boxes(t, ks): results = [] for k in ks: large_boxes = k // 3 remainder = k % 3 small_boxes = remainder results.append((small_boxes, large_boxes)) return results"},{"question":"A company has K project teams, each team has a number of team members, and each team member has a specific skill level. Each project team can work on a certain number of projects P, where P is equal to the number of team members in that team. The productivity of a team is defined as the sum of the skill levels of its team members. Your job is to find out the maximum total productivity the company can achieve if they decide to select exactly X teams out of the K teams to work on their projects. Input: The first line contains the number of test cases, T. Each test case starts with two space-separated integers, K and X. The next K lines each contain a single integer Si, where Si is the sum of the skill levels of the ith team. Output: For each test case, output a single line containing the maximum total productivity the company can achieve. Constraints: 1 ≤ T ≤ 50 1 ≤ X ≤ K ≤ 10^3 1 ≤ Si ≤ 10^5 SAMPLE INPUT 2 3 2 10 20 30 4 2 40 10 20 30 SAMPLE OUTPUT 50 70 Explanation In the first test case, there are 3 teams with skill levels 10, 20, and 30. We need to choose exactly 2 teams. The maximum total productivity is achieved by choosing the 2 teams with skill levels 20 and 30, giving us a total productivity of 50. In the second test case, there are 4 teams with skill levels 40, 10, 20, and 30. Choosing the 2 teams with the highest skill levels (40 and 30) gives a total productivity of 70.","solution":"def max_total_productivity(T, test_cases): results = [] for case in test_cases: K, X, skill_levels = case skill_levels.sort(reverse=True) max_productivity = sum(skill_levels[:X]) results.append(max_productivity) return results"},{"question":"Task You are given an unsorted array of integers. Your task is to find the length of the longest consecutive elements sequence. Input The input is a list of integers, which can have positive, negative, or zero values. Output Return an integer representing the length of the longest consecutive sequence in the array. Example `longestConsecutive([100, 4, 200, 1, 3, 2]) -> Output: 4` Explanation: The longest consecutive sequence is [1, 2, 3, 4], therefore the output should be 4. `longestConsecutive([0, -1, 2, -3, 1, -2, 3]) -> Output: 7` Explanation: The longest consecutive sequence is [-3, -2, -1, 0, 1, 2, 3], therefore the output should be 7.","solution":"def longestConsecutive(nums): Returns the length of the longest consecutive elements sequence in the list nums. if not nums: return 0 nums_set = set(nums) longest_streak = 0 for num in nums_set: if num - 1 not in nums_set: # only start counting from the beginning of a sequence current_num = num current_streak = 1 while (current_num + 1) in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a 2D array matrix, implement a function that returns the sum of the elements in the submatrix defined by its top-left (r1, c1) and bottom-right (r2, c2) corners, inclusive. The update(r, c, val) function modifies matrix by updating the element at row r and column c to val. Example: Given matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] sumRegion(0, 0, 1, 1) -> 12 update(1, 1, 10) sumRegion(0, 0, 1, 1) -> 17 Note: - The matrix is only modifiable by the update function. - You may assume the number of calls to update and sumRegion function is distributed evenly.","solution":"class NumMatrix: def __init__(self, matrix): Initialize the 2D matrix. if not matrix or not matrix[0]: self.matrix = [] else: self.matrix = [row[:] for row in matrix] # Deep copy of the matrix def update(self, row, col, val): Updates the element at position (row, col) in the matrix to val. if self.matrix: self.matrix[row][col] = val def sumRegion(self, r1, c1, r2, c2): Computes the sum of the elements within the rectangle defined by its top-left corner (r1, c1) and bottom-right corner (r2, c2), inclusive. if not self.matrix: return 0 total = 0 for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): total += self.matrix[i][j] return total"},{"question":"A magic square is a grid of distinct positive integers arranged in a square such that the sum of the numbers in each row, each column, and both main diagonals are all the same. You are given an n x n grid where some cells may already contain numbers. Complete the grid to form a magic square if possible. You need to determine if it is possible to complete the grid to form a magic square. If it is possible, output the completed grid. If it is not possible, output \\"IMPOSSIBLE\\". Input The first line contains one integer n (2 ≤ n ≤ 50) — the size of the magic square. The next n lines each contain n integers, representing the grid. If a cell is already filled with a number, it will be a positive integer (1 ≤ number ≤ n^2). If a cell is empty, it is represented by 0. Output If it is possible to complete the grid to form a magic square, print \\"POSSIBLE\\" followed by the completed grid. If it is not possible, print \\"IMPOSSIBLE\\". Examples Input 3 0 0 0 0 0 0 0 0 0 Output POSSIBLE 2 7 6 9 5 1 4 3 8 Input 3 8 0 0 0 0 6 0 0 0 Output IMPOSSIBLE Note In the first example, the empty 3x3 grid can be completed to form the following magic square: 2 7 6 9 5 1 4 3 8 In the second example, it is impossible to fill the grid with distinct positive integers to form a magic square where the sum of the numbers in each row, each column, and both main diagonals are the same.","solution":"import itertools def is_magic(square): n = len(square) target_sum = sum(square[0]) # Check rows for row in square: if sum(row) != target_sum: return False # Check columns for col in range(n): if sum(square[row][col] for row in range(n)) != target_sum: return False # Check diagonals if sum(square[i][i] for i in range(n)) != target_sum or sum(square[i][n-i-1] for i in range(n)) != target_sum: return False return True def complete_magic_square(n, grid): def backtrack(i): if i == n * n: return is_magic(grid) x, y = divmod(i, n) if grid[x][y] != 0: return backtrack(i + 1) for num in range(1, n * n + 1): if num not in used: grid[x][y] = num used.add(num) if backtrack(i + 1): return True grid[x][y] = 0 used.remove(num) return False used = set(itertools.chain(*grid)) if backtrack(0): return \\"POSSIBLE\\", grid else: return \\"IMPOSSIBLE\\", def solve(n, grid): result = complete_magic_square(n, grid) if result[0] == \\"IMPOSSIBLE\\": print(\\"IMPOSSIBLE\\") else: print(\\"POSSIBLE\\") for row in result[1]: print(\\" \\".join(map(str, row))) # Example usage: # n = 3 # grid = [ # [0, 0, 0], # [0, 0, 0], # [0, 0, 0] # ] # solve(n, grid)"},{"question":"A company named Byteland Software Corporation has multiple software projects that must be completed within specified deadlines. Each project requires a certain number of distinct resources, which could be developers, designers, or hardware components. Additionally, each resource has a finite availability day when it becomes available to start working on any project. You are given multiple projects with their respective deadlines and required resources along with their availability days. Your task is to determine if it\'s possible to complete all the projects by their deadlines. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of projects. For each project, the input contains three lines. The first line of each project contains an integer di (1 ≤ di ≤ 106) — the deadline day of the i-th project. The second line contains an integer mi (1 ≤ mi ≤ 500) — the number of resources required for the i-th project. The third line contains mi space-separated integers (1 ≤ aij ≤ 106) — the availability days of the distinct resources required for the i-th project. Output Output \\"YES\\" if all the projects can be completed within their deadlines. Otherwise, output \\"NO\\". Examples Input 3 10 2 3 5 15 3 1 1 14 20 1 19 Output YES Input 2 5 3 1 2 6 10 2 12 15 Output NO","solution":"def can_complete_projects(n, projects): Determines if all projects can be completed by their deadlines. :param n: Number of projects :param projects: List of tuples, where each tuple contains three elements: deadline day, number of required resources, and list of availability days of the resources :return: \\"YES\\" if all projects can be completed by their deadlines, otherwise \\"NO\\" for deadline, _, availability_days in projects: if any(day > deadline for day in availability_days): return \\"NO\\" return \\"YES\\" # Sample Input/Output Execution if __name__ == \\"__main__\\": # Example 1 n1 = 3 projects1 = [ (10, 2, [3, 5]), (15, 3, [1, 1, 14]), (20, 1, [19]), ] print(can_complete_projects(n1, projects1)) # Output: YES # Example 2 n2 = 2 projects2 = [ (5, 3, [1, 2, 6]), (10, 2, [12, 15]), ] print(can_complete_projects(n2, projects2)) # Output: NO"},{"question":"You are an ecologist studying a habitat with various species of plants. Each species can spread out seeds over a certain range of distances. You want to determine the furthest distance a new generation of plants will cover after a given number of generations. Each plant species can be represented by an array of integers where each element represents the maximum distance its seeds can travel in one generation. For instance, the array `[1, 2, 3]` means that seeds can travel up to 3 units of distance in one generation. Given an array of distances and the number of generations, write a function that calculates the maximum possible distance a seed can travel after the specified number of generations. # Function Signature ```python def max_travel_distance(distances: List[int], generations: int) -> int: ``` # Input - `distances` (List[int]): A list of `n` positive integers, where each integer represents the maximum distance a plant\'s seeds can travel in one generation. - `generations` (int): A non-negative integer representing the number of generations. # Output - Return an integer representing the maximum distance a seed can travel after the specified number of generations. # Examples ```python distances = [1, 2, 3] generations = 2 max_travel_distance(distances, generations) # Output: 6 distances = [4, 1, 5] generations = 1 max_travel_distance(distances, generations) # Output: 5 distances = [5, 3, 9] generations = 3 max_travel_distance(distances, generations) # Output: 27 distances = [2] generations = 10 max_travel_distance(distances, generations) # Output: 20 ``` # Notes - In each generation, seeds can only travel the maximum distance specified in the `distances` array. - The sum of maximum distances for each generation should be returned. - If the `generations` is zero, the function should return 0.","solution":"from typing import List def max_travel_distance(distances: List[int], generations: int) -> int: Calculates the maximum possible distance a seed can travel after the specified number of generations. Parameters: distances (List[int]): A list of positive integers, each representing the maximum distance a plant\'s seeds can travel in one generation. generations (int): A non-negative integer representing the number of generations. Returns: int: The maximum distance a seed can travel after the specified number of generations. if generations == 0: return 0 max_distance = max(distances) # Get the maximum distance from the list return max_distance * generations"},{"question":"Write a function that takes a list of integers and returns the sum of the largest and smallest numbers in the list. # Examples ``` [1, 2, 3, 4, 5] -> 6 (1 + 5) [10, -2, 50, 23, 7] -> 48 (-2 + 50) [-3, -7, -1, -15] -> -16 (-15 + -1) ```","solution":"def sum_of_largest_and_smallest(numbers): Returns the sum of the largest and smallest numbers in the list. if not numbers: raise ValueError(\\"The list cannot be empty\\") smallest = min(numbers) largest = max(numbers) return smallest + largest"},{"question":"In a futuristic city, autonomous delivery drones are used to deliver packages. Each drone has a limited battery capacity, which determines how far it can travel before needing to be recharged. We know the battery capacities of a set of drones, as well as the distances between the delivery points in the city. The city uses a grid system where delivery points are defined by their coordinates (x, y). Your task is to determine if there is a drone available that can make a complete round trip between two given delivery points (starting and ending at the same point) without recharging its battery. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of drones available. The second line contains n integers bi (1 ≤ bi ≤ 10000) — the battery capacities of each drone. The third line contains two integers x1, y1 and the fourth line contains two integers x2, y2 ( -10^4 ≤ x1, y1, x2, y2 ≤ 10^4) — the coordinates of the two delivery points. Output If there is at least one drone that can make a complete round trip between the two delivery points, output YES. Otherwise, output NO. Examples Input 3 10 20 30 0 0 3 4 Output YES Input 2 5 8 1 2 4 6 Output NO Input 4 7 14 21 28 0 0 6 8 Output YES Notes In the first example, the drone with a battery capacity of 20 or 30 can make a complete round trip since the Euclidean distance between the two points (0,0) and (3,4) is 5 units, and the round trip would require 10 units of battery capacity. In the second example, no drone has enough battery capacity to make a round trip of the required distance. In the third example, the drone with a battery capacity of 28 can make a complete round trip since the round-trip Euclidean distance is 20 units.","solution":"import math def can_drone_complete_round_trip(n, battery_capacities, x1, y1, x2, y2): Determines if there is a drone that can complete a round trip between two delivery points. Args: n (int): Number of drones. battery_capacities (list of int): Battery capacities of each drone. x1, y1 (int): Coordinates of the first delivery point. x2, y2 (int): Coordinates of the second delivery point. Returns: str: \\"YES\\" if at least one drone can make the round trip, otherwise \\"NO\\". # Calculate the Euclidean distance between the two points distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2) round_trip_distance = 2 * distance # Check if any drone has the required battery capacity for battery_capacity in battery_capacities: if battery_capacity >= round_trip_distance: return \\"YES\\" return \\"NO\\""},{"question":"A Young Girl You are given a string s consisting of lowercase English letters. In one operation, you can choose any character and replace each of its occurrences in the string with another lowercase English letter. Determine the minimum number of operations required so that no two consecutive characters in the string are the same. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^4). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 10^5). The second line of each test case contains the string s of length n. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case print one integer — the minimum number of operations required so that no two consecutive characters in the string are the same. -----Examples----- Input 4 3 abc 4 aaab 5 ababa 2 cc Output 0 2 0 1 -----Note----- In the first test case, the string is already having no two consecutive characters same, so no operation is required. In the second test case, you can replace the characters as follows: replace one \'a\' with \'b\', obtaining \\"abab\\". In the third test case, the string \\"ababa\\" already meets the requirement without any operation. In the fourth test case, you can replace one \'c\' with any other letter like \'d\', resulting in \\"cd\\".","solution":"def min_operations_to_avoid_consecutive(s): Returns the minimum number of operations required so that no two consecutive characters in the string are the same. operations = 0 for i in range(1, len(s)): if s[i] == s[i-1]: operations += 1 # Skip the next character since we have changed the current one if i + 1 < len(s) and s[i] == s[i+1]: i += 1 return operations def solve(test_cases): results = [] for n, s in test_cases: results.append(min_operations_to_avoid_consecutive(s)) return results"},{"question":"Write a program that determines the smallest divisor of a number greater than 1. Input The first line contains T, the number of test cases. Each of the next T lines contains a single integer N. Output For each test case, output the smallest divisor of N greater than 1 in a new line. Constraints 1 ≤ T ≤ 10^5 2 ≤ N ≤ 10^18 NOTE There is partial marking for this question. SAMPLE INPUT 4 10 17 21 49 SAMPLE OUTPUT 2 17 3 7","solution":"import math def smallest_divisor(n): Returns the smallest divisor of n greater than 1. if n % 2 == 0: return 2 for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return i return n def process_test_cases(test_cases): Processes a list of test cases and returns a list of results. results = [] for n in test_cases: results.append(smallest_divisor(n)) return results"},{"question":"Sam is hosting a game night, and he has a collection of n games. Each game has a respective difficulty level and plays smoothly only with an appropriate skill level. Initially, Sam has an empty list of players, and he maintains a scoreboard to keep track of the number of games each player has played successfully. There are m events that happen sequentially, which can be one of the following types: 1. **Add a new player**: A new player with a specific skill level joins. 2. **Player plays a game**: A player attempts to play a game of a specific difficulty. 3. **Print the scoreboard**: Display the number of games each player has played successfully so far. If a player\'s skill level is greater than or equal to the game\'s difficulty level, the player will play the game successfully, and their count of successful games will be increased by 1. Otherwise, nothing happens for that event. Help Sam manage the flow of these events and maintain the scoreboard updates accordingly. -----Input----- The first line contains two integers n and m (1 leq n, m leq 1000), representing the number of different games and the number of events, respectively. The second line contains n positive integers d_1, d_2, ldots, d_n (1 leq d_i leq 1000), where d_i denotes the difficulty level of the i-th game. The following m lines describe the events in order. Each event is one of the following types: - `1 x` (1 leq x leq 1000), representing the addition of a new player with skill level x. - `2 p g` (1 leq p leq k, 1 leq g leq n), representing that the p-th player (1-indexed) attempts to play the g-th game. - `3`, representing a request to print the scoreboard. -----Output----- For each \\"print the scoreboard\\" event, print a single line with the counts of successful games for each player in the order they joined, separated by spaces. -----Example----- Input 4 7 3 5 2 7 1 4 1 6 2 1 2 2 2 1 2 1 1 3 2 2 3 Output 1 1 In the above example, we have 4 games with difficulties of 3, 5, 2, 7. Seven events occur in this order: - A player with skill level 4 joins. - Another player with skill level 6 joins. - The first player attempts to play the second game (difficulty 5), but fails. - The second player attempts to play the first game (difficulty 3) and succeeds. - The first player again attempts to play the first game (difficulty 3) and succeeds. - The scoreboard is printed, showing that both players have successfully played one game each. - The second player attempts to play the third game (difficulty 2) and succeeds, though this occurs after the scoreboard has been printed. Thus, the output is simply `1 1` for the scoreboard event.","solution":"def game_night(n, m, difficulty_levels, events): players = [] scoreboard = [] for event in events: if event[0] == 1: # Add a new player with skill level event[1] players.append(event[1]) scoreboard.append(0) elif event[0] == 2: # Player p attempts to play game g p = event[1] - 1 g = event[2] - 1 if players[p] >= difficulty_levels[g]: scoreboard[p] += 1 elif event[0] == 3: # Print the scoreboard print(\\" \\".join(map(str, scoreboard)))"},{"question":"A small bakery specializes in baking cakes with distinct flavors. Each type of cake has a unique preparation time and a specific slot during which it can be baked without overlapping with other cakes\' time slots. The bakery wants to bake as many cakes as possible in a single day to maximize its revenue. Write a program to determine the maximum number of cakes that can be baked in a day, given the constraints on preparation time and time slots. Input The input consists of multiple datasets. Each dataset has the following format: N CakeName1 StartTime1 EndTime1 CakeName2 StartTime2 EndTime2 ... CakeNameN StartTimeN EndTimeN Where: - N (1 ≤ N ≤ 50) is the number of types of cakes. - CakeNamei is a string of up to 20 characters, representing the name of the ith cake. - StartTimei and EndTimei (0 ≤ StartTimei < EndTimei ≤ 2400) are integers, representing the time slot during which the ith cake can be prepared. The bakery operates from time 0000 to 2400. Each time is in military format (e.g., 1300 represents 1:00 PM). The end of input is indicated by a dataset with the value \'0\' for N. Output For each dataset, print the maximum number of cakes that can be baked in a day. Example Input 3 Chocolate 0900 1100 Vanilla 1030 1230 Strawberry 1200 1400 2 Lemon 0800 1000 Blueberry 0900 1100 0 Output 2 1","solution":"def max_cakes_to_bake(datasets): Determine the maximum number of cakes that can be baked in a day for multiple datasets. Args: datasets (list): List of datasets where each dataset is a list with the format: [N, [CakeName1, StartTime1, EndTime1], [CakeName2, StartTime2, EndTime2], ..., [CakeNameN, StartTimeN, EndTimeN]] Returns: list: List of integers representing the maximum number of cakes that can be baked for each dataset. def max_activities(activities): activities.sort(key=lambda x: x[2]) # sort by EndTime count = 0 last_end_time = 0 for activity in activities: if activity[1] >= last_end_time: count += 1 last_end_time = activity[2] return count results = [] for dataset in datasets: N = dataset[0] if N == 0: continue activities = [] for i in range(1, N + 1): cake = dataset[i] start_time = int(cake[1]) end_time = int(cake[2]) activities.append((cake[0], start_time, end_time)) results.append(max_activities(activities)) return results"},{"question":"Given a linked list of N nodes, the task is to check if the linked list has a cycle in it or not. Example 1: Input: head -> [3, 2, 0, -4] -> back to node with value 2 Output: 1 Explanation: In this example, a cycle exists as node with value -4 points back to the node with value 2. Example 2: Input: head -> [1, 2] -> back to node with value 1 Output: 1 Explanation: In this example, a cycle exists as the node with value 2 points back to the node with value 1. Example 3: Input: head -> [1] Output: 0 Explanation: In this example, there is no cycle as it\'s a single node pointing to null. Your Task: You don\'t need to read input or print anything. Your task is to complete the function hasCycle() which takes the head of the linked list as a parameter and returns True if there is a cycle in the linked list, otherwise returns False. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 ≤ Number of nodes ≤ 10^4 -10^5 ≤ Value of each node ≤ 10^5","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head: ListNode) -> bool: Determines if the linked list has a cycle in it. :param head: ListNode, the head of the linked list :return: bool, True if there is a cycle, False otherwise slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"A bookstore wants to manage its inventory efficiently. They have a variety of books, each identified by a unique ISBN number, and they want to implement a system that checks for duplicate ISBN numbers. To help the bookstore, write a program that finds and counts how many duplicate ISBN numbers exist in their current inventory. Input: The first line contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, denoting the number of ISBN numbers in the inventory. The next line contains N space-separated integers, each representing an ISBN number. Output: For each test case, print the number of duplicate ISBN numbers in the inventory. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ ISBN ≤ 10^9 SAMPLE INPUT 2 6 9781234567897 9781234567897 9780544003415 9780345816023 9780544003415 9780984782857 4 9783161484100 9783161484100 9783161484100 9783161484100 SAMPLE OUTPUT 2 3 Explanation In the first case, the duplicates are 9781234567897 and 9780544003415. In the second case, the single ISBN 9783161484100 appears four times, which accounts for three duplicates.","solution":"def find_duplicate_isbn_counts(test_cases): results = [] for case in test_cases: N, isbns = case isbn_count = {} for isbn in isbns: if isbn in isbn_count: isbn_count[isbn] += 1 else: isbn_count[isbn] = 1 duplicates = sum(count - 1 for count in isbn_count.values() if count > 1) results.append(duplicates) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 isbns = list(map(int, data[index:index + N])) test_cases.append((N, isbns)) index += N results = find_duplicate_isbn_counts(test_cases) for result in results: print(result)"},{"question":"# Task Write a function that takes a list of integers and an integer `d`, and rearranges the list so that all elements less than `d` come before all elements greater than or equal to `d`. The order of elements within each partition should be preserved. # Example For `lst = [3, 7, 2, 4, 8, 1]` and `d = 5`, the output should be `[3, 2, 4, 1, 7, 8]`. For `lst = [10, 5, 2, 15, 12, 3, 6]` and `d = 8`, the output should be `[5, 2, 3, 6, 10, 15, 12]`. # Input/Output - `[input]` list of integers `lst` A non-empty array of integers where `1 ≤ len(lst) ≤ 10^6` and `-10^9 ≤ lst[i] ≤ 10^9`. - `[input]` integer `d` The pivot integer `d` where `-10^9 ≤ d ≤ 10^9`. - `[output]` a list of integers The rearranged list according to the specified conditions.","solution":"def rearrange_list(lst, d): Rearranges the list so that all elements less than d come before all elements greater than or equal to d. The order of elements within each partition is preserved. Parameters: lst (list of int): A list of integers. d (int): The pivot integer. Returns: list of int: The rearranged list. less_than_d = [x for x in lst if x < d] greater_or_equal_d = [x for x in lst if x >= d] return less_than_d + greater_or_equal_d"},{"question":"You are given a binary tree with N nodes, each node has a unique value from 1 to N. Your task is to answer Q queries. For each query, you will be given two nodes U and V, and you need to calculate the distance between these two nodes. The distance is defined as the number of edges on the shortest path connecting nodes U and V. To help you solve this problem, you will be provided with the structure of the tree in the form of N-1 edges, where each edge is described by two integers A_i and B_i, which means there is an edge connecting nodes A_i and B_i. -----Input:----- - The first line contains an integer N (number of nodes). - The next N-1 lines contain two integers A_i and B_i each, representing an edge of the tree. - The next line contains an integer Q (number of queries). - The next Q lines each contain two integers U and V representing a query. -----Output:----- For each query, print the distance between nodes U and V. -----Constraints----- - 1 leq N leq 100,000 - 1 leq Q leq 100,000 - 1 leq A_i, B_i, U, V leq N -----Sample Input:----- 5 1 2 1 3 3 4 3 5 3 2 4 2 5 4 5 -----Sample Output:----- 3 3 2 -----Explanation:----- - Query 1: The shortest path from node 2 to node 4 is 2 -> 1 -> 3 -> 4, which has 3 edges. - Query 2: The shortest path from node 2 to node 5 is 2 -> 1 -> 3 -> 5, which has 3 edges. - Query 3: The shortest path from node 4 to node 5 is 4 -> 3 -> 5, which has 2 edges.","solution":"from collections import deque def calculate_distances(n, edges, queries): # Build the graph from edges graph = {i: [] for i in range(1, n+1)} for a, b in edges: graph[a].append(b) graph[b].append(a) # Find distances using BFS from any node, we choose 1 to start with def bfs(start): distances = {i: -1 for i in range(1, n+1)} distances[start] = 0 q = deque([start]) while q: node = q.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 q.append(neighbor) return distances # We find distances of all nodes from the root node (chosen arbitrarily as node 1) root_distances = bfs(1) # We precompute the distances for all other nodes to reuse in queries all_distances = {i: bfs(i) for i in range(1, n+1)} # Process each query results = [] for u, v in queries: results.append(all_distances[u][v]) return results"},{"question":"You are provided with a list of integers and a target integer. Your task is to write a function that returns the indices of the two numbers in the list such that they add up to the target integer. Function Signature: ```python def find_indices(nums: List[int], target: int) -> Tuple[int, int]: ``` Considerations: - The function should return a tuple of two integers, where each integer is an index in the list. - Assume each input will have exactly one solution, and you may not use the same element twice. - The returned tuple of indices should always be (index1, index2) with index1 < index2. Examples: ```python assert find_indices([2, 7, 11, 15], 9) == (0, 1) assert find_indices([3, 2, 4], 6) == (1, 2) assert find_indices([3, 3], 6) == (0, 1) ```","solution":"from typing import List, Tuple def find_indices(nums: List[int], target: int) -> Tuple[int, int]: Returns the indices of the two numbers in the list such that they add up to the target integer. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index raise ValueError(\\"No two sum solution exists\\")"},{"question":"Write a function that takes an integer `n` and returns a string that represents a pattern of consecutive integers from 1 to `n` formatted in a specific style. The pattern should alternate lines of numbers separated by spaces and by commas, respectively. For instance: - If `n` is 5, the output should be: ``` 1 2 3 4 5 1,2,3,4,5 ``` - If `n` is 3, the output should be: ``` 1 2 3 1,2,3 ``` - If `n` is 1, the output should be: ``` 1 1 ``` Your function should generate this string and return it. Ensure that every line within the string generated ends with a newline character except the last line.","solution":"def generate_pattern(n): Generates a pattern of consecutive integers from 1 to `n` formatted in alternating lines of numbers separated by spaces and commas. Each line ends with a newline character except the last line. if n < 1: return \\"\\" nums = \\" \\".join(str(i) for i in range(1, n + 1)) commas = \\",\\".join(str(i) for i in range(1, n + 1)) return f\\"{nums}n{commas}\\""},{"question":"Given a string representing an arithmetic expression consisting of single-digit integers and the operators +, -, *, and /, evaluate the expression and return the result as an integer. The expression does not contain any parentheses and follows standard operator precedence. Example 1: Input: expression = \\"3+2*2\\" Output: 7 Explanation: The expression evaluates to 3 + (2 * 2) = 3 + 4 = 7. Example 2: Input: expression = \\"3/2\\" Output: 1 Explanation: The expression evaluates to 3 / 2 = 1 since integer division is used. Your Task: You don\'t need to read input or print anything. Your task is to complete the function evaluateExpression() which takes the expression as input and returns the integer result of the evaluation. Expected Time Complexity: O(n), where n is the length of the string. Expected Auxiliary Space: O(n) for the stack used in the evaluation process. Constraints: - The length of the expression string will be between 1 and 10^5. - The expression is guaranteed to be valid and will not contain any whitespace. - Division by zero will not occur.","solution":"def evaluateExpression(expression): Evaluates the given arithmetic expression and returns the result as an integer. The expression can contain single-digit integers and the operators +, -, *, and / and follows standard operator precedence. stack = [] current_number = 0 operation = \'+\' for i, char in enumerate(expression): if char.isdigit(): current_number = current_number * 10 + int(char) if char in \\"+-*/\\" or i == len(expression) - 1: if operation == \'+\': stack.append(current_number) elif operation == \'-\': stack.append(-current_number) elif operation == \'*\': stack.append(stack.pop() * current_number) elif operation == \'/\': stack.append(int(stack.pop() / current_number)) # using int() for integer division truncation operation = char current_number = 0 return sum(stack)"},{"question":"In a distant kingdom, there are N castles, each built on a separate hilltop. The hills are connected by bidirectional roads such that every pair of hills is directly connected, forming a complete graph. The king wants to place guards in these castles. However, he wants to minimize the number of guards for efficiency. He also knows that each guard in any castle can guard that castle as well as all castles directly connected to it. ----- Task ----- Determine the minimum number of guards required to ensure that every castle is guarded. ----- Input ----- The input consists of a single integer N (1 le N le 100) – the number of castles. ----- Output ----- Output a single integer, the minimum number of guards needed to guard all the castles. ----- Examples ----- Sample Input: 5 Sample Output: 1 Sample Input: 3 Sample Output: 1","solution":"def minimum_guards(N): Returns the minimum number of guards needed to guard all castles in a complete graph of N castles. return 1"},{"question":"A developer team is building a new feature, and they want to ensure their database schema adheres to certain constraints. They have a collection of projects, each associated with a set of tasks, modeled as a graph. Each project is identified by a unique integer ID, and tasks within a project have dependencies forming a Directed Acyclic Graph (DAG). To ensure operations on these tasks run smoothly, the team needs you to verify specific conditions of task dependencies. A task in the set can only start when all its dependencies are completed. Your task is to check for each project if it\'s possible to complete all tasks without any circular dependencies. -----Input----- The first line contains an integer P (1 leq P leq 10^3), the number of projects. For each project, the input starts with an integer T (1 leq T leq 500), the number of tasks in the project. Each of the next E lines (where E is the total number of dependencies in the project) contains two integers a and b (1 leq a, b leq T) representing a directed edge from task a to task b (task b depends on task a). It is guaranteed that no project has self-dependencies (no edge from a task to itself). -----Output----- For each project, output \\"Yes\\" if all tasks can be completed without circular dependencies. Otherwise, print \\"No\\". -----Examples----- Input 2 3 2 1 2 2 3 4 4 1 2 2 3 3 4 4 2 Output Yes No -----Notes----- In the first project, there are 3 tasks and 2 dependencies: Task 1 -> Task 2 and Task 2 -> Task 3. This project can be completed as there are no cycles, so the output is \\"Yes\\". In the second project, there are 4 tasks and 4 dependencies, where Task 4 depends on Task 2, which creates a cycle with Task 2, Task 3, and Task 4 (forming 2 -> 3 -> 4 -> 2). Hence, the output is \\"No\\" because the tasks cannot be completed without circular dependencies.","solution":"def can_complete_all_tasks(P, project_data): from collections import defaultdict, deque def has_cycle(num_tasks, edges): graph = defaultdict(list) in_degree = [0] * (num_tasks + 1) for u, v in edges: graph[u].append(v) in_degree[v] += 1 queue = deque([i for i in range(1, num_tasks + 1) if in_degree[i] == 0]) visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return visited_count != num_tasks results = [] for project in project_data: T, dependencies = project[\'T\'], project[\'dependencies\'] if has_cycle(T, dependencies): results.append(\\"No\\") else: results.append(\\"Yes\\") return results # Prepare data structure for input example project_data = [ {\'T\': 3, \'dependencies\': [(1, 2), (2, 3)]}, {\'T\': 4, \'dependencies\': [(1, 2), (2, 3), (3, 4), (4, 2)]} ] # Call the function with example data print(can_complete_all_tasks(2, project_data))"},{"question":"A factory is producing widgets and every widget has a unique serial number from 1 to n. Each widget is then packed into a box and each box can hold a maximum of k widgets. Due to a packing malfunction, some boxes may contain fewer widgets than they should, but no box will have more than k widgets. Your task is to determine if it\'s possible to find at least one box fulfilling the following conditions: 1. The box contains at least one widget. 2. The serial numbers of the widgets in the box form a contiguous sequence, meaning the widgets\' serial numbers are consecutive numbers. You need to find the minimum possible number `m` of serial numbers that the box should hold for the above conditions to be met. -----Input----- The first line contains two integers n and k (1 ≤ n, k ≤ 10^9). -----Output----- Print a single integer — the minimum number of serial numbers that the box should hold. -----Examples----- Input 10 3 Output 3 Input 15 4 Output 3 -----Note----- In the first example, one possible packing is [1, 2, 3], [4, 5, 6], [7, 8, 9], and [10]. A box containing widgets [1, 2, 3] will satisfy all conditions with the minimum size of 3 serial numbers. In the second example, one possible packing is [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], and [13, 14, 15]. A box containing widgets [1, 2, 3] will satisfy all conditions with the minimum size of 3 serial numbers.","solution":"def minimum_widget_sequence(n, k): Given n widgets with serial numbers from 1 to n and boxes that can hold a maximum of k widgets, return the minimum number of serial numbers that the box should hold to meet the conditions. return min(k, n)"},{"question":"In the Kingdom of Wonderla, there are magical forests where you can find various types of magical fruits. Each type of fruit on a tree in a magical forest is unique and has a magical power index associated with it. The magical power of a fruit decreases linearly by a constant amount as you move deeper into the forest. You are tasked with finding out the maximum total magical power you can collect by picking one fruit from each tree, without picking two fruits with the same magical power index. Let\'s assume there are N trees, and each tree has M fruits. The power of a fruit in a tree is given as an integer. You are given the magical power of each fruit in each tree. Determine the maximum total magical power you can collect by picking exactly one fruit from each tree and ensuring no two picked fruits have the same magical power index. Input The input consists of a single test case in the format below: N M P_{1,1} P_{1,2} ldots P_{1,M} P_{2,1} P_{2,2} ldots P_{2,M} vdots P_{N,1} P_{N,2} ldots P_{N,M} The first line contains two integers N (2 leq N leq 10^3) and M (2 leq M leq 10^3), which are the number of trees and the number of fruits on each tree respectively. Each of the following N lines contains M integers (1 to 10^5), which represent the power index of fruits on each tree. Output Print an integer, the maximum total magical power you can collect with the given conditions. Example Input 3 3 2 1 7 3 5 4 6 10 1 Output 22 Explanation We can choose the following fruits to maximize the total power: - From the first tree, pick the fruit with power 7. - From the second tree, pick the fruit with power 5. - From the third tree, pick the fruit with power 10. Total power = 7 + 5 + 10 = 22","solution":"from heapq import nlargest def max_total_magical_power(n, m, grid): if not grid or not grid[0]: return 0 max_powers = [] for row in grid: max_powers.append(max(row)) sorted_max_powers = nlargest(n, max_powers) return sum(sorted_max_powers)"},{"question":"In a faraway kingdom, a renowned wizard is trying to brew a powerful potion. The potion requires a specific sequence of magical herbs. Each magical herb can be represented as an integer, and the potion\'s recipe is a sequence of integers in non-decreasing order. The wizard only has the herbs that he has gathered, represented as an array of integers. He needs to use the herbs to match the exact sequence given in the recipe. To do so, the wizard can perform two types of operations: 1. Pick an herb from the array of gathered herbs and append it to a temporary sequence he is creating. 2. Discard an herb from the array of gathered herbs without using it. The wizard can only work with the herbs in the order they are given in the gathered herbs array. The task is to determine the minimum number of herbs that need to be discarded so that the wizard can create the required potion sequence. -----Input----- The first line of input contains an integer N, the number of gathered herbs. The second line contains N integers representing the gathered herbs. The third line contains an integer M, the length of the recipe. The fourth line contains M integers representing the recipe. -----Output----- Output a single integer, the minimum number of gathered herbs that need to be discarded to create the required potion sequence. -----Constraints----- - 1 ≤ N ≤ 105 - 1 ≤ M ≤ 105 - 1 ≤ herb\'s value ≤ 109 (for both gathered herbs and recipe) -----Example----- Input: 7 1 2 3 4 5 6 7 4 2 4 6 7 Output: 3 -----Explanation----- The wizard can create the sequence [2, 4, 6, 7] from the gathered herbs array [1, 2, 3, 4, 5, 6, 7] by discarding the herbs 1, 3, and 5. Therefore, the minimum number of herbs that need to be discarded is 3.","solution":"def min_herbs_to_discard(gathered_herbs, recipe): Determines the minimum number of gathered herbs that need to be discarded to create the required potion sequence. Parameters: gathered_herbs (list of int): List of gathered herbs. recipe (list of int): List of required herbs in the recipe. Returns: int: The minimum number of herbs that need to be discarded. n = len(gathered_herbs) m = len(recipe) i = 0 j = 0 while i < n and j < m: if gathered_herbs[i] == recipe[j]: j += 1 i += 1 return n - j"},{"question":"Write a program that implements a simple text-based to-do list application. The program should support the following operations: - add_task: Add a new task to the to-do list with a given description. - complete_task: Mark a specified task as completed. - list_tasks: Print all tasks, showing uncompleted tasks first, followed by completed tasks. Each task in the list should display its description and status (completed or uncompleted). - remove_task: Remove a specified task from the to-do list. The to-do list should be maintained in such a way that tasks can be added, completed, listed, and removed efficiently. Constraints * The number of operations leq 100,000 * Task descriptions will be non-empty strings of length leq 100. * Task descriptions are unique. Input The number of operations n is given as an integer in the first line. In the following n lines, each operation is given depending on its type: - For add_task operation: `add_task description` - For complete_task operation: `complete_task description` - For list_tasks operation: `list_tasks` - For remove_task operation: `remove_task description` Output For each list_tasks operation, print each task in a new line showing the task description followed by its status. The status of the task should be printed as either `uncompleted` or `completed`. Maintain the tasks in the same order as they are listed in. Example Input 6 add_task Buy groceries add_task Go for a run complete_task Buy groceries list_tasks remove_task Go for a run list_tasks Output Go for a run uncompleted Buy groceries completed Buy groceries completed","solution":"class ToDoList: def __init__(self): self.tasks = {} def add_task(self, description): if description not in self.tasks: self.tasks[description] = False def complete_task(self, description): if description in self.tasks: self.tasks[description] = True def list_tasks(self): uncompleted = [(desc, \\"uncompleted\\") for desc, completed in self.tasks.items() if not completed] completed = [(desc, \\"completed\\") for desc, completed in self.tasks.items() if completed] return uncompleted + completed def remove_task(self, description): if description in self.tasks: del self.tasks[description]"},{"question":"Jane and John are enthusiasts about playing a dice game. They decided to play a modified version where the winner is determined by a special scoring method. Rules: Each player takes turns to roll two six-sided dice. The sum of the values shown on the two dice are added to their score. However, if a player rolls a double (both dice show the same number), they receive a bonus equal to twice the value shown on the dice. That means if they roll two 3s, they get 6 (3+3) added to their score and an additional bonus of 6 (2 * 3), making it a total of 12 for that roll. The game proceeds for a fixed number of turns, T. Each turn, both players roll their dice simultaneously and their scores are updated accordingly after each roll. Write a program to calculate the final scores of Jane and John after T turns and determine the winner based on the scores. If both players have the same score, the result should be a draw. Input The first line of the input contains an integer T (1 ≤ T ≤ 100), the number of turns. The next T lines contain four integers each: j1, j2, h1, h2 (1 ≤ j1, j2, h1, h2 ≤ 6), where j1 and j2 are the values of Jane\'s dice roll, and h1 and h2 are the values of John\'s dice roll. Output Output a single line with the final scores of Jane and John respectively, followed by the result (\\"Jane wins\\", \\"John wins\\", or \\"Draw\\"). SAMPLE INPUT 3 1 2 3 3 4 4 2 5 6 6 5 5 SAMPLE OUTPUT Jane: 23 John: 29 John wins Explanation For Given Case - Turn 1: - Jane rolls 1 and 2, score: 1 + 2 = 3 - John rolls 3 and 3, score: 3 + 3 + 2 * 3 = 12 - Turn 2: - Jane rolls 4 and 4, score: 4 + 4 + 2 * 4 = 16 - John rolls 2 and 5, score: 2 + 5 = 7 - Turn 3: - Jane rolls 6 and 6, score: 6 + 6 + 2 * 6 = 24 - John rolls 5 and 5, score: 5 + 5 + 2 * 5 = 20 Final scores: - Jane: 3 + 16 + 24 = 43 - John: 12 + 7 + 20 = 39 Result: Jane: 43 John: 39 Jane wins","solution":"def dice_game(T, rolls): Calculate final scores of Jane and John after T turns and determine the winner. Args: T : int : number of turns rolls : list of tuples : contains T tuples of 4 integers each (j1, j2, h1, h2) Returns: str : final scores of Jane and John, and the result (\\"Jane wins\\", \\"John wins\\", or \\"Draw\\") jane_score = 0 john_score = 0 for roll in rolls: j1, j2, h1, h2 = roll # Calculate Jane\'s score for the turn if j1 == j2: jane_score += j1 + j2 + 2 * j1 else: jane_score += j1 + j2 # Calculate John\'s score for the turn if h1 == h2: john_score += h1 + h2 + 2 * h1 else: john_score += h1 + h2 if jane_score > john_score: result = f\\"Jane: {jane_score} John: {john_score} Jane wins\\" elif john_score > jane_score: result = f\\"Jane: {jane_score} John: {john_score} John wins\\" else: result = f\\"Jane: {jane_score} John: {john_score} Draw\\" return result"},{"question":"Julia is fascinated by prime numbers and contiguous subsequences. She is trying to solve a problem where she needs to find the maximum product of any contiguous subsequence within a list of numbers. You, being a friend, decide to help her write a code for the same. You are given an array of N integers. Your task is to find the maximum product of any contiguous subsequence within that array. Input Format The first line contains an integer N, denoting the number of elements in the array A. The next line contains N space-separated integers A_i, representing the elements of the array. Output Format Print a single line containing the maximum product of any contiguous subsequence in the array. Constraints 1 leq N leq 10^5 -10 leq A_i leq 10 Sample Input 1 4 1 2 3 4 Sample Output 1 24 Sample Input 2 5 -1 -3 -10 0 60 Sample Output 2 60 Explanation Sample 1: The entire array is the contiguous subsequence with the maximum product: 1 * 2 * 3 * 4 = 24. Sample 2: The contiguous subsequence with the maximum product is 60.","solution":"def max_product_subarray(arr): Returns the maximum product of any contiguous subsequence within the array. max_product = float(\'-inf\') current_max, current_min = 1, 1 for num in arr: if num == 0: current_max, current_min = 1, 1 max_product = max(max_product, 0) continue temp = current_max * num current_max = max(num, temp, current_min * num) current_min = min(num, temp, current_min * num) max_product = max(max_product, current_max) return max_product"},{"question":"You are given an array of integers. You need to find the largest consistent subsequence of this array. A consistent subsequence is defined as a subsequence where the difference between the maximum and minimum element in the subsequence does not exceed a given value K. Given the array, find the length of the longest consistent subsequence. Input: The first line contains two integers N and K, where N is the number of elements in the array and K is the maximum allowed difference between the maximum and minimum element of the subsequence. The second line contains N space-separated integers representing the elements of the array. Output: Output the length of the longest consistent subsequence. Constraints: 1 ≤ N ≤ 100000 0 ≤ K ≤ 10^9 0 ≤ Array elements ≤ 10^9 SAMPLE INPUT 5 3 1 3 6 10 15 SAMPLE OUTPUT 2 Explanation The longest consistent subsequences are [1, 3] and [6, 10], both having a length of 2. The difference between the maximum and minimum element in each subsequence does not exceed 3.","solution":"def longest_consistent_subsequence(N, K, array): Returns the length of the longest consistent subsequence. Args: N : int : number of elements in the array K : int : maximum allowed difference between the maximum and minimum element in the subsequence array : list[int] : list of integers representing the elements of the array Returns: int : length of the longest consistent subsequence array.sort() left = 0 max_length = 0 for right in range(N): # Move the left pointer to maintain the condition max(array[left:right+1]) - min(array[left:right+1]) <= K while array[right] - array[left] > K: left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a distant land, there is a unique currency system where each denomination is a power of two. The denominations are as follows: {1, 2, 4, 8, 16, ...}. The King of this land has recently decided to challenge his subjects with a unique problem to test their mathematical prowess. Given a positive integer K, your task is to determine the minimum number of coins needed to sum up to exactly K. You are provided with an unlimited supply of each denomination. For example: - For K = 6, the minimum number of coins is 2: 6 can be formed by (4 + 2). - For K = 10, the minimum number of coins is 2: 10 can be formed by (8 + 2). - For K = 15, the minimum number of coins is 4: 15 can be formed by (8 + 4 + 2 + 1). -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each case consists of a single line containing the integer K. -----Output----- For each test case, output a single line containing the answer for the corresponding test case. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ K ≤ 10^9 -----Example----- Input: 4 6 10 15 1023 Output: 2 2 4 10 -----Explanation----- For K = 6: 6 = 4 + 2, so it requires 2 coins. For K = 10: 10 = 8 + 2, so it requires 2 coins. For K = 15: 15 = 8 + 4 + 2 + 1, so it requires 4 coins. For K = 1023: 1023 can be formed by using 10 denominations of 1, 2, 4, 8, 16, 32, 64, 128, 256, and 512.","solution":"def minimum_coins(K): Returns the minimum number of coins needed to sum up to exactly K using denominations which are powers of 2. num_coins = 0 while K > 0: highest_power_of_2 = 1 << (K.bit_length() - 1) K -= highest_power_of_2 num_coins += 1 return num_coins def process_queries(queries): Processes a list of queries and returns the results for each query. results = [] for K in queries: results.append(minimum_coins(K)) return results"},{"question":"Given an array of integers, you\'re tasked with creating a function `find_max_sum` that finds the maximum sum of a subarray with a length of at most L. The subarray must consist of consecutive elements from the array. The function should return this maximum sum. Input - T: Number of test cases - For each test case: - N: Number of elements in the array - L: Maximum length of the subarray - Array: List of N integers Output - Output the maximum sum for each test case in a new line. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 500 - 1 ≤ L ≤ N - -10000 ≤ Array[i] ≤ 10000 Example Input: 2 5 3 1 -2 3 4 -1 4 2 -1 -2 3 4 Output: 7 7 Explanation: In the first test case: - The array is [1, -2, 3, 4, -1] - Possible subarrays of length at most 3 are [1], [1, -2], [1, -2, 3], [-2], [-2, 3], [-2, 3, 4], [3], [3, 4], [3, 4, -1], [4], [4, -1], and [-1]. - The maximum sum from these subarrays is 3 + 4 = 7. In the second test case: - The array is [-1, -2, 3, 4] - Possible subarrays of length at most 2 are [-1], [-1, -2], [-2], [-2, 3], [3], [3, 4], [4]. - The maximum sum from these subarrays is 3 + 4 = 7.","solution":"def find_max_sum(T, test_cases): Given T test cases, each containing: - N: Number of elements in the array - L: Maximum length of the subarray - Array: List of N integers Returns a list containing the maximum sum for each test case. results = [] for t in range(T): N, L, array = test_cases[t] max_sum = float(\'-inf\') for i in range(N): current_sum = 0 for j in range(i, min(i + L, N)): current_sum += array[j] max_sum = max(max_sum, current_sum) results.append(max_sum) return results"},{"question":"You are given an integer array called `stones` where `stones[i]` represents the position of the ith stone along a river. A frog is initially positioned at the first stone at position `stones[0]` and wants to reach the last stone at position `stones[n-1]` by jumping across the river. The frog can make a jump of size `k` from `stone[i]` to `stone[j]` if the following conditions are met: 1. `k` is one of the three possible jump distances: `k-1`, `k`, or `k+1` (the first jump can be any distance as there is no previous jump). 2. `stone[j]` exists in the `stones` array. Determine if the frog can successfully cross the river by reaching the last stone. Return `true` if the frog can reach it, and `false` otherwise. Example 1: Input: stones = [0,1,3,5,6,8,12,17] Output: true Explanation: Initially, the frog is at position 0. From 0 to 1, the frog jumps 1 unit. From 1 to 3, the frog jumps 2 units. From 3 to 5, the frog jumps 2 units. From 5 to 6, the frog jumps 1 unit. From 6 to 8, the frog jumps 2 units. From 8 to 12, the frog jumps 4 units. From 12 to 17, the frog jumps 5 units. Hence, the frog can reach the last stone. Example 2: Input: stones = [0,1,2,3,4,8,9,11] Output: false Explanation: The frog cannot jump to the last stone at position 11 since it would require a jump of 3 or more units from position 9. Note: * The number of stones `n` is `>= 2`. * Each stone\'s position is a non-negative integer.","solution":"def can_cross(stones): Determines if the frog can cross the river by reaching the last stone. Parameters: stones (List[int]): A list of integers representing the positions of the stones. Returns: bool: True if the frog can reach the last stone, False otherwise. if not stones: return False stone_positions = {stone: set() for stone in stones} stone_positions[stones[0]].add(0) for stone in stones: for jump in stone_positions[stone]: for next_jump in (jump - 1, jump, jump + 1): if next_jump > 0 and (stone + next_jump) in stone_positions: stone_positions[stone + next_jump].add(next_jump) return bool(stone_positions[stones[-1]])"},{"question":"You are given a list of strings and your task is to create a function that groups them by their first character. If the list is empty, return an empty dictionary. # Example: ```python group_by_first_char([\\"apple\\", \\"apricot\\", \\"banana\\", \\"blueberry\\", \\"cherry\\"]) == {\\"a\\": [\\"apple\\", \\"apricot\\"], \\"b\\": [\\"banana\\", \\"blueberry\\"], \\"c\\": [\\"cherry\\"]} ``` **Note:** The order of strings within each group and the order of the keys in the dictionary should correspond to the order of their first appearance in the original list. If the list contains only empty strings, they should all be grouped under an empty string as a key.","solution":"def group_by_first_char(strings): Groups a list of strings by their first character. Parameters: strings (list): List of strings to be grouped. Returns: dict: Dictionary where keys are first characters and values are lists of strings. result = {} for string in strings: if len(string) > 0: first_char = string[0] else: first_char = \\"\\" if first_char in result: result[first_char].append(string) else: result[first_char] = [string] return result"},{"question":"In a city with a grid of streets, there are traffic signals at various intersections. The signals can either show \\"Go\\" or \\"Stop\\", controlled by a central system. The pattern of the signals changes every minute. Given the initial state of the signals, implement an algorithm to determine the state of the signals after N minutes. -----Input----- The first four lines each contain four characters that describe the initial state of a 4 times 4 grid of traffic signals. Each character is either \'G\' (meaning \\"Go\\") or \'S\' (meaning \\"Stop\\"). The fifth line of the input contains an integer N (0 ≤ N ≤ 10^9), which represents the number of minutes after which you need to determine the state of the signals. -----Output----- Output four lines with four characters each representing the state of the signals after N minutes. A character \'G\' represents \\"Go\\" and a character \'S\' represents \\"Stop\\". Note: 1. Each traffic signal toggles its state independently. 2. If a signal was \'G\', it will turn \'S\' after a minute, and if it was \'S\', it will turn \'G\' after a minute. 3. The toggling continues cyclically every minute. -----Examples----- Sample Input 1: G G S G S S G S G S G S S G S G 1 Sample Output 1: S S G S G G S G S G S G G S G S Sample Input 2: G S G S S G S G G S G S S G S G 2 Sample Output 2: S G S G G S G S S G S G G S G S Sample Input 3: G S G S S G S G G S G S S G S G 1000000000 Sample Output 3: S G S G G S G S S G S G G S G S","solution":"def traffic_signals_after_n_minutes(grid, N): Returns the state of the signals after N minutes. grid: List of strings representing the initial state in a 4x4 grid N: int, number of minutes after which to determine the state if N % 2 == 0: return grid else: return [\\"\\".join(\'S\' if cell == \'G\' else \'G\' for cell in row) for row in grid] # Example input parsing and function call: # input_grid = [ # \\"GSSG\\", # \\"SSGS\\", # \\"GSGS\\", # \\"SGSG\\" # ] # N = 1 # print(\\"n\\".join(traffic_signals_after_n_minutes(input_grid, N)))"},{"question":"Lucas is a keen astronomer who loves observing celestial patterns. One fine night, he observed N stars aligned in a straight line in the night sky. Being a mathematician, Lucas wondered about the possible distances between these stars. Specifically, he wants to determine the greatest common divisor (GCD) of all the distances between consecutive stars. Write a program that, given the positions of N stars on a straight line, determines the GCD of the distances between all consecutive stars. -----Input----- The first line contains the integer N (2 le N le 100), the number of stars in the line. The second line contains N distinct integers a_1, a_2, ..., a_N (1 le a_i le 1000000000) representing the positions of the stars in ascending order. -----Output----- Output a single integer, the GCD of the distances between consecutive stars. -----Examples----- Sample Input: 4 10 15 20 30 Sample Output: 5","solution":"import math def find_gcd_distances(N, positions): Given the positions of N stars on a line, return the GCD of the distances between consecutive stars. Parameters: N (int): Number of stars. positions (list): List of positions of the stars in ascending order. Returns: int: The GCD of the distances between consecutive stars. # Calculate the distances between consecutive stars distances = [positions[i] - positions[i-1] for i in range(1, N)] # Compute the GCD of these distances gcd_distance = distances[0] for distance in distances[1:]: gcd_distance = math.gcd(gcd_distance, distance) return gcd_distance"},{"question":"Write a function that simulates a simple fitness tracker based on given instructions and computes the total number of calories burned. The fitness tracker records data for activities such as walking, running, and cycling. Each activity burns a different number of calories per minute. The instructions for the activities are given and the function should calculate the total calories burned based on the duration and type of activity. The function will take one argument as input: - A list of tuples, where each tuple contains three elements: - The type of activity as a string (\\"walking\\", \\"running\\", or \\"cycling\\") - The duration of the activity in minutes as an integer - The intensity of the activity (which is a string: \\"low\\", \\"medium\\", or \\"high\\") The calorie burn rates are as follows: - Walking: low - 3 calories per minute, medium - 4.5 calories per minute, high - 6 calories per minute - Running: low - 8 calories per minute, medium - 11 calories per minute, high - 14 calories per minute - Cycling: low - 5 calories per minute, medium - 7.5 calories per minute, high - 10 calories per minute -----Input----- - The input is a list of tuples, where each tuple consists of an activity type (string), duration (integer), and intensity level (string). -----Output----- - The output is a single integer representing the total calories burned. ----- Constraints ----- - The input list can contain up to 1000 tuples. - The duration of each activity is between 1 and 300 minutes. - The intensity level is one of the strings: \\"low\\", \\"medium\\", \\"high\\". -----Example----- Input: [(\\"walking\\", 30, \\"medium\\"), (\\"running\\", 20, \\"high\\"), (\\"cycling\\", 60, \\"low\\")] Output: 605 -----Explanation----- For the given example: - Walking for 30 minutes at medium intensity burns 30 * 4.5 = 135 calories. - Running for 20 minutes at high intensity burns 20 * 14 = 280 calories. - Cycling for 60 minutes at low intensity burns 60 * 5 = 300 calories. So, the total calories burned is 135 + 280 + 300 = 715 calories.","solution":"def calculate_calories(activities): Calculate the total calories burned based on the activities\' duration and intensity. Parameters: activities (list of tuples): Each tuple contains (activity_type, duration, intensity) Returns: int: Total calories burned calorie_burn_rates = { \\"walking\\": {\\"low\\": 3, \\"medium\\": 4.5, \\"high\\": 6}, \\"running\\": {\\"low\\": 8, \\"medium\\": 11, \\"high\\": 14}, \\"cycling\\": {\\"low\\": 5, \\"medium\\": 7.5, \\"high\\": 10} } total_calories = 0 for activity, duration, intensity in activities: if activity in calorie_burn_rates and intensity in calorie_burn_rates[activity]: total_calories += duration * calorie_burn_rates[activity][intensity] return total_calories"},{"question":"You are given an array of n integers, textbf{A} = [A_0, A_1, ..., A_{n-1}] and q queries. Each query is given in the form of two integers: L and R. For each query, you need to determine the sum of the maximum and minimum values in the subarray A[L...R] (inclusive). Input Format The first line contains two space-separated integers n and q - the size of the array and the number of queries, respectively. The second line contains n space-separated integers representing the array textbf{A}. Each of the q subsequent lines contains two space-separated integers L and R representing a query. Constraints 1 leq n, q leq 10^5 -10^6 leq A_i leq 10^6 0 leq L leq R < n Output Format For each query, print the sum of the maximum and minimum values in the subarray A[L...R] on a new line. Sample Input 0 5 3 1 3 -1 5 4 0 2 1 3 0 4 Sample Output 0 2 8 4 Explanation 0 Given textbf{A} = [1, 3, -1, 5, 4], we perform the following q = 3 queries: 0 2: The subarray is [1, 3, -1]. The minimum value is -1 and the maximum value is 3. Their sum is 2. So, we print 2 on a new line. 1 3: The subarray is [3, -1, 5]. The minimum value is -1 and the maximum value is 5. Their sum is 4. So, we print 4 on a new line. 0 4: The subarray is [1, 3, -1, 5, 4]. The minimum value is -1 and the maximum value is 5. Their sum is 4. So, we print 4 on a new line.","solution":"def sum_of_max_and_min(arr, queries): Returns a list of sums of the maximum and minimum values for each query. :param arr: List of integers representing the array. :param queries: List of tuples (L, R) representing the range for each query. :return: List of integers representing the sum of max and min values for each query. results = [] for L, R in queries: subarray = arr[L:R+1] max_val = max(subarray) min_val = min(subarray) results.append(max_val + min_val) return results"},{"question":"In a faraway land, there exists a peculiar library system. Each book in the library is associated with a unique magic value. The library catalog consists of N books, and for each book i (where 1 leq i leq N), the magic value of the book is given by b_i. The head librarian, being an affable wizard, wishes to perform a special type of query on the catalog. Specifically, he wants to find the maximum sum of magic values possible by selecting exactly L contiguous subarrays of books, from which one magic value is picked from each subarray. Help the librarian determine the remainder of the maximum possible sum of selected magic values modulo 1000000009. -----Input----- The first line contains two integers N and L (1 leq N leq 100000, 1 leq L leq 50). The next line contains N integers representing the magic values of the books, b_i (0 leq b_i leq 10^9). -----Output----- Print a single integer which is the maximum possible sum of magic values modulo 1000000009. -----Examples----- Sample Input 1: 6 2 1 2 3 4 5 6 Sample Output 1: 11 Sample Input 2: 5 1 1 2 3 4 5 Sample Output 2: 5","solution":"def max_sum_of_magic_values(N, L, magic_values): MOD = 1000000009 # Initialize dp array where dp[i][j] is the maximum sum using j subarrays in the first i books dp = [[-float(\'inf\')] * (L + 1) for _ in range(N + 1)] # Base case: zero books, zero subarrays dp[0][0] = 0 for i in range(1, N + 1): max_val = 0 for j in range(1, L + 1): for k in range(i): max_val = max(max_val, dp[k][j-1] + max(magic_values[k:i])) dp[i][j] = max_val return dp[N][L] % MOD"},{"question":"In a small village, there is a tradition of high-fives among the townsfolk. Every morning, each villager lines up, and every pair of adjacent villagers high-five each other. This creates a chain of high-fives that goes along the entire line. Every villager has a \\"high-five\\" strength, represented by an integer. When two villagers with strengths x and y high-five each other, they create x * y excitement energy. The total excitement energy for the day is the sum of all the excitement energies generated by each pair of adjacent villagers. Your task is to calculate the total excitement energy for the villagers after they perform their morning high-fives. -----Input----- The first line contains an integer N (2 ≤ N ≤ 10^5), the number of villagers. The second line contains N integers, each representing the high-five strength of a villager. The strength values are all positive integers and will not exceed 10^4. -----Output----- Output a single integer, the total excitement energy. -----Example----- Sample Input: 4 1 2 3 4 Sample Output: 20 Explanation: The villagers and their excitement energies are: Villagers: [1, 2, 3, 4] High-Fives: 1 * 2 = 2 2 * 3 = 6 3 * 4 = 12 Total excitement energy = 2 + 6 + 12 = 20","solution":"def calculate_exciting_energy(n, strengths): Calculate the total excitement energy generated by villagers. Args: n : int : The number of villagers. strengths : list of int : The high-five strength of each villager. Returns: int : The total excitement energy. total_energy = 0 for i in range(n-1): total_energy += strengths[i] * strengths[i+1] return total_energy"},{"question":"You are given a grid of size NxM. Each cell of the grid either contains \'0\' (empty cell) or \'1\' (obstacle). You need to find the number of distinct islands in the grid. An island is a group of connected \'1\'s (obstacle). Two \'1\'s are connected if they are adjacent horizontally or vertically. The grid is surrounded by water cells (boundary). ------ Input Format ------ - The first line of input contains two integers N and M, denoting the number of rows and columns in the grid respectively. - The next N lines each contain M characters (either \'0\' or \'1\'), representing the grid. ------ Output Format ------ Print a single integer, the number of distinct islands in the grid. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 4 5 11000 11010 00000 01110 ------ Sample Output 1 ------ 3 ------ explanation 1 ------ There are three distinct islands in the given grid: 1. The island containing cells: (0,0), (0,1), (1,0), (1,1) 2. The island containing cells: (1,3) 3. The island containing cells: (3,1), (3,2), (3,3)","solution":"def num_distinct_islands(grid): Counts the number of distinct islands in the given grid. Parameters: grid: List of List of str : The grid representing \'0\' as empty cell and \'1\' as obstacle. Returns: int : The number of distinct islands. def dfs(grid, x, y, visited): # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] stack = [(x, y)] visited.add((x, y)) while stack: cx, cy = stack.pop() for dx, dy in directions: nx, ny = cx + dx, cy + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited and grid[nx][ny] == \'1\': visited.add((nx, ny)) stack.append((nx, ny)) if not grid or not grid[0]: return 0 N, M = len(grid), len(grid[0]) visited = set() count = 0 for i in range(N): for j in range(M): if grid[i][j] == \'1\' and (i, j) not in visited: # Perform DFS to mark all cells in this island as visited dfs(grid, i, j, visited) count += 1 return count"},{"question":"Imagine you are given an array of integers representing the height of buildings, where the array `heights[i]` represents the height of the i-th building. You are tasked with calculating the amount of rainwater that can be trapped between these buildings if it starts to rain. In other words, find the total amount of rainwater that can be trapped after rain, given that the size of each building is 1 unit wide. To clarify, the water that is trapped must be calculated between the buildings and not above the buildings. Example 1: Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Explanation: The above array represents the following histogram where rain water is trapped: # # # ~~ #~~~#~~ #~~~ # The total amount of water trapped is 9. Example 2: Input: heights = [1, 1, 1, 1] Output: 0 Explanation: No water can be trapped as there are no dips in the height. Example 3: Input: heights = [0, 2, 0] Output: 0 Explanation: No water can be trapped as there is no left boundary to hold water. Example 4: Input: heights = [3, 0, 0, 2, 0, 4] Output: 10 Explanation: The above array represents the following histogram where rain water is trapped: # #~~~~~~# #~~~~# #~~~ The total amount of water trapped is 10. Constraints: - 0 <= heights.length <= 3 * 10^4 - 0 <= heights[i] <= 10^5","solution":"def trap_rain_water(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"You are given a grid of size n times m, where each cell is either a land cell (represented by a 1) or a water cell (represented by a 0). The grid represents a geographical map, where islands are formed by connecting adjacent land cells horizontally or vertically. An island is considered \\"large\\" if it contains at least k land cells. Your task is to write a program to count the number of large islands in the grid. Input - The first line of the input contains an integer t (1 le t le 100) — the number of test cases. - Each test case consists of three parts: 1. The first line contains two integers n and m (1 le n, m le 100) — the dimensions of the grid. 2. The second line contains one integer k (1 le k le n times m) — the minimum number of land cells a large island should contain. 3. Each of the next n lines contains m integers (either 0 or 1) — representation of the grid. Output For each test case, print one integer — the number of large islands in the given grid. Example Input: ``` 2 4 5 3 1 1 0 1 0 1 1 0 0 0 0 0 1 1 1 0 1 0 0 0 3 3 2 1 1 0 0 1 1 1 0 0 ``` Output: ``` 2 1 ``` Explanation In the first test case, there are two large islands. One of them consists of four cells, and the other consists of three cells. In the second test case, there is only one large island, which consists of four cells.","solution":"def num_large_islands(t, test_cases): def dfs(grid, visited, i, j): stack = [(i, j)] cell_count = 0 while stack: x, y = stack.pop() if 0 <= x < len(grid) and 0 <= y < len(grid[0]) and not visited[x][y] and grid[x][y] == 1: visited[x][y] = True cell_count += 1 stack.extend([(x-1, y), (x+1, y), (x, y-1), (x, y+1)]) return cell_count results = [] for case in test_cases: n, m, k, grid = case visited = [[False] * m for _ in range(n)] large_island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == 1 and not visited[i][j]: island_size = dfs(grid, visited, i, j) if island_size >= k: large_island_count += 1 results.append(large_island_count) return results # Example usage # t = 2 # test_cases = [ # (4, 5, 3, [ # [1, 1, 0, 1, 0], # [1, 1, 0, 0, 0], # [0, 0, 1, 1, 1], # [0, 1, 0, 0, 0] # ]), # (3, 3, 2, [ # [1, 1, 0], # [0, 1, 1], # [1, 0, 0] # ]) # ] # print(num_large_islands(t, test_cases)) # Output: [2, 1]"},{"question":"Read problems statements in Mandarin Chinese and Russian. Alice loves playing with strings. Recently, she has discovered a new way to have fun with them: by creating and analyzing palindromes. A palindrome is a string that reads the same backward as forward. Alice has a string \'S\' consisting of lowercase English letters and she wants to find out the number of palindromes she can extract from \'S\'. A palindrome substring of \'S\' is defined as a contiguous substring that is a palindrome. Alice is particularly interested in counting all the distinct palindrome substrings of \'S\'. Help Alice by writing a program that, given a string \'S\', calculates the number of distinct palindrome substrings of \'S\'. ------ Input ------ - The first line contains a single integer T, the number of test cases. - The following T lines each contain a single string S. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |S| ≤ 1000 S consists of lowercase English letters only. ------ Output ------ For each test case, output the number of distinct palindrome substrings of the given string on a new line. ------ Sample Input ------ 2 aabaa abcd ------ Sample Output ------ 5 4","solution":"def count_distinct_palindromic_substrings(S): Returns the count of distinct palindromic substrings in the given string S. def is_palindrome(s): return s == s[::-1] palindromes = set() n = len(S) for i in range(n): for j in range(i, n): substr = S[i:j+1] if is_palindrome(substr): palindromes.add(substr) return len(palindromes) def process_test_cases(test_cases): results = [] for S in test_cases: results.append(count_distinct_palindromic_substrings(S)) return results # Example to test the solution if __name__ == \\"__main__\\": T = 2 test_cases = [\\"aabaa\\", \\"abcd\\"] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Given a string s and an integer n, find the length of the smallest substring that contains at least `n` different characters. Example 1: Input: s = \\"abcba\\", n = 3 Output: 3 Explanation: The smallest substring that contains at least 3 different characters is \\"abc\\" which has a length of 3. Example 2: Input: s = \\"aaaaaa\\", n = 2 Output: -1 Explanation: There is no substring in \\"aaaaaa\\" that contains at least 2 different characters. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `smallestSubstring()` which takes a string `s` and an integer `n` as input and returns an integer as the answer. Expected Time Complexity: O(|s|) Expected Auxiliary Space: O(k) where k is the number of unique characters in the input string. Constraints: 1 <= |s| <= 10^5 1 <= n <= 26","solution":"def smallestSubstring(s, n): from collections import defaultdict if n > len(set(s)): return -1 char_count = defaultdict(int) left = 0 min_length = float(\'inf\') unique_chars = 0 for right in range(len(s)): if char_count[s[right]] == 0: unique_chars += 1 char_count[s[right]] += 1 while unique_chars >= n: min_length = min(min_length, right - left + 1) char_count[s[left]] -= 1 if char_count[s[left]] == 0: unique_chars -= 1 left += 1 return min_length if min_length != float(\'inf\') else -1"},{"question":"Write a function that checks if it is possible to find a permutation of the given sequence of integers such that the sum of any two consecutive numbers is a perfect square. Input The first line of the input consists of a single integer N , the length of the sequence. The second line contains N integers A_1, A_2, ..., A_N , the elements of the sequence. Output Output YES if there exists a permutation of the sequence such that the sum of any two consecutive numbers is a perfect square. Otherwise, output NO. Constraints * 1 leq N leq 10^5 * 1 leq A_i leq 10^4 Examples Input 3 1 17 8 Output YES Input 4 1 14 2 3 Output NO","solution":"from itertools import permutations import math def is_perfect_square(n): Helper function to check if a number is a perfect square. root = int(math.sqrt(n)) return root * root == n def can_form_perfect_square_sum_sequence(N, sequence): Check if there exists a permutation of the sequence such that the sum of any two consecutive numbers is a perfect square. if N == 1: return True def can_form_sequence(perm): for i in range(len(perm) - 1): if not is_perfect_square(perm[i] + perm[i + 1]): return False return True for perm in permutations(sequence): if can_form_sequence(perm): return True return False def perfect_square_sum_sequence(N, A): if can_form_perfect_square_sum_sequence(N, A): return \\"YES\\" else: return \\"NO\\""},{"question":"Wolfgo likes balanced arrays. An array is considered balanced if the sum of the first half of the array is equal to the sum of the second half of the array. Specifically, given an array of length n, split it into two subarrays of length n/2 (assuming n is an even number) and ensure that both subarrays have the same sum. Wolfgo loves creating balanced arrays of length n where each element is an integer between 1 and m inclusive. -----Input----- The single line contains two integers, n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000). It is guaranteed that n is an even number. -----Output----- Print any balanced array of length n such that each element is between 1 and m inclusive. If there are multiple suitable arrays, you are allowed to print any of them. Examples: Input 4 5 Output 2 2 3 1 Input 6 8 Output 4 2 3 3 4 2 Note: In the first sample, the sum of [2, 2] is 4, and the sum of [3, 1] is also 4, making the array balanced. In the second sample, the sum of [4, 2, 3] and the sum of [3, 4, 2] are both 9, so the array is balanced. There are other balanced arrays possible for these inputs.","solution":"def generate_balanced_array(n, m): Generate a balanced array of length n where each element is between 1 and m inclusive. half_n = n // 2 # Generate first half of the array with random values from 1 to m/2 first_half = [1] * half_n # Generate second half with same sum as first half second_half = [1] * half_n return first_half + second_half"},{"question":"A large amusement park is planning to develop a new attraction with interconnected zones. Each zone is connected to at least one other zone. However, due to safety regulations, the park needs to ensure that there is exactly one evacuation route (or path) between any two zones, which means that the zones should form a tree structure. You are given a list of edges representing connections between the zones. Each edge connects two zones. The zones are numbered from 1 to n. Determine if the given connections form a valid tree that satisfies the park\'s requirements. -----Input----- The input consists of multiple lines: - The first line contains two integers n and m, where n is the number of zones (1 ≤ n ≤ 10^4), and m is the number of edges (0 ≤ m ≤ 10^4). - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a bidirectional connection between zones u and v. -----Output----- Print \\"YES\\" if the connections form a valid tree, and \\"NO\\" otherwise. -----Examples----- Input 4 3 1 2 2 3 3 4 Output YES Input 4 3 1 2 2 3 3 1 Output NO Input 5 4 1 2 1 3 1 4 4 5 Output YES -----Note----- In the first example, the given connections form a tree with zones 1-2-3-4 connected sequentially. In the second example, there is a cycle 1-2-3-1, so it\'s not a valid tree. In the third example, the given connections form a tree with one main zone (1) as the root connecting to other zones.","solution":"def find_parent(parent, i): if parent[i] == -1: return i return find_parent(parent, parent[i]) def union(parent, x, y): xroot = find_parent(parent, x) yroot = find_parent(parent, y) if xroot != yroot: parent[xroot] = yroot def is_valid_tree(n, m, edges): # A tree should have n-1 edges with no cycles if m != n - 1: return \\"NO\\" parent = [-1] * n for u, v in edges: x = find_parent(parent, u - 1) y = find_parent(parent, v - 1) if x == y: # Cycle detected return \\"NO\\" union(parent, x, y) return \\"YES\\""},{"question":"A group of friends is planning a recreational biking trip. They decide on a particular destination, but the terrain varies throughout the route. They have a specific condition: they want the cumulative fatigue factor to be as low as possible and the trip to be completed within a certain time frame. The terrain can be described as a sequence of n segments. Each segment has a difficulty factor d_i and a time factor t_i. The friends must select exactly k consecutive segments such that the sum of the difficulty factors of these k segments is minimized. Write a program to determine the minimum possible sum of the difficulty factors for any contiguous subsequence of length k. Since large numbers can make the computations complex, you should implement the solution to run efficiently in O(n) time complexity. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 200000). The second line contains n integers d_i (1 ≤ d_i ≤ 1000) — the difficulty factors of the segments. The third line contains n integers t_i (1 ≤ t_i ≤ 1000) — the time factors of the segments. Output On a single line print the minimum possible sum of the difficulty factors for any contiguous subsequence of length k. Examples Input 6 3 5 3 2 6 8 4 4 3 2 10 1 5 Output 10 Input 5 2 1 2 3 4 5 5 4 3 2 1 Output 3 Note In the first sample, the optimal choice is the subsequence [3, 2, 5], where the sum of difficulty factors is 3 + 2 + 5 = 10. In the second sample, the optimal choice is the subsequence [1, 2], where the sum of difficulty factors is 1 + 2 = 3.","solution":"def min_difficulty_sum(n, k, difficulties): Returns the minimum possible sum of the difficulty factors for any contiguous subsequence of length k. # Calculate the sum of first \'k\' elements current_sum = sum(difficulties[:k]) min_sum = current_sum # Use sliding window to find the minimum sum of subsequence length k for i in range(k, n): current_sum += difficulties[i] - difficulties[i - k] if current_sum < min_sum: min_sum = current_sum return min_sum"},{"question":"In a distant galaxy, there is a planet named Zog where the inhabitants speak a language consisting of binary strings. A binary string is considered \\"balanced\\" if the number of \'0\'s equals the number of \'1\'s, and no prefix of the string has more \'1\'s than \'0\'s. For example, the strings \\"0101\\" and \\"0011\\" are balanced, while \\"1100\\" and \\"1010\\" are not. The Zogians are very fond of these balanced strings because they represent harmony. Given an integer n, they want to know how many balanced binary strings of length 2n exist. For instance, when n=2, the balanced binary strings of length 4 are \\"0011\\" and \\"0101\\". Your task is to write a function that calculates the number of balanced binary strings of length 2n mod 10^9 + 7. -----Input----- The input consists of a single integer n (1 le n le 500), the half-length of the binary strings. -----Output----- Print a single integer, the number of balanced binary strings of length 2n mod 10^9 + 7. -----Examples----- Input 1 Output 1 Input 2 Output 2 Input 3 Output 5 -----Notes----- In the first example, for n=1, the only balanced binary string of length 2 is \\"01\\". In the second example, for n=2, the balanced binary strings of length 4 are \\"0011\\" and \\"0101\\". In the third example, for n=3, the balanced binary strings of length 6 are: \\"000111\\", \\"001011\\", \\"001101\\", \\"010011\\", \\"010101\\".","solution":"MOD = 10**9 + 7 def mod_inv(a, m): return pow(a, m-2, m) def catalan_number(n, mod): if n == 0: return 1 fact = [1] * (2 * n + 1) for i in range(2, 2 * n + 1): fact[i] = fact[i - 1] * i % mod return (fact[2 * n] * mod_inv(fact[n + 1], mod) % mod * mod_inv(fact[n], mod) % mod) % mod def balanced_binary_strings(n): return catalan_number(n, MOD)"},{"question":"You are given a list of integers. In one operation, you can choose two adjacent elements and replace both with their sum. Your task is to determine the maximum possible value of the final element after performing any number of operations. -----Input----- The input consists of multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains an integer n (1 leq n leq 50) — the length of the list. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 100) — the elements of the list. -----Output----- For each test case, output a single integer — the maximum possible value of the final element after performing any number of operations. -----Examples----- Input 3 3 1 2 3 4 4 5 1 3 2 10 20 Output 6 13 30 -----Note----- In the first test case, we can: - Combine 1 and 2 to get [3, 3] - Combine 3 and 3 to get [6] In the second test case, we can: - Combine 4 and 5 to get [9, 1, 3] - Combine 9 and 1 to get [10, 3] - Combine 10 and 3 to get [13] In the third test case, we can combine 10 and 20 to get [30].","solution":"def calculate_maximum_final_element(test_cases): results = [] for case in test_cases: n, array = case results.append(sum(array)) return results"},{"question":"Jenish has to cross an array of N elements, where each element represents the height of a pillar. He can jump from one pillar to another one that is at most D pillars away. However, he has a limited energy, and the cost to jump from one pillar to another is the absolute difference in the heights of the two pillars. Given his total energy E, determine if he can cross from the first pillar to the last pillar. -----Input:----- - The first line consists of a single integer T, the number of test cases. - The first line of each test case contains three space separated integers which represent N, D, and E for that test case respectively. - The second line of each test case contains N space separated integers, i^{th} of which represents the height of the i^{th} pillar. -----Output:----- For each test case, print in a single line, YES if Jenish can cross the array from the first pillar to the last pillar with the given energy, or NO if he cannot. -----Constraints:----- - 1 leq N leq 10^5 - 1 leq D leq N - 0 leq E leq 10^9 - 0 leq text{height}[i] leq 10^6 - Sigma N over all the test cases does not exceed 10^5 -----Sample Input:----- 3 5 2 5 1 2 3 4 5 4 3 2 1 5 2 7 6 1 10 1 1 1 1 1 1 -----Sample Output:----- YES NO YES -----Explanation:----- For test 1, Jenish can jump from the 1st pillar to the 2nd, then to the 3rd, and so on. The total cost will be 4, which is within his allowed energy of 5. For test 2, jumping from the 1st pillar to the 2nd incurs a cost of 4, which already exceeds Jenish\'s energy. For test 3, all pillars are of the same height, thus the jump cost is 0 each time, which is well within his allowed energy.","solution":"def can_cross_pillars(n, d, e, heights): # Create a list to store the minimum energy needed to reach each pillar min_energy = [float(\'inf\')] * n min_energy[0] = 0 for i in range(n): for j in range(i + 1, min(i + d + 1, n)): jump_cost = abs(heights[i] - heights[j]) min_energy[j] = min(min_energy[j], min_energy[i] + jump_cost) return \\"YES\\" if min_energy[-1] <= e else \\"NO\\" def solve(test_cases): results = [] for n, d, e, heights in test_cases: results.append(can_cross_pillars(n, d, e, heights)) return results"},{"question":"You are given an integer array of size n. Your task is to find and print the smallest and the largest element in the array. Additionally, if the array is sorted in strictly ascending order, print the sum of all elements; otherwise, print the product of all elements. Constraints: 1leq nleq10^5 1leq a[i]leq10^9 Input Format The first line contains the integer, n. The second line contains n space-separated integers representing the array elements. Output Format Output 3 space-separated values: - The smallest element in the array - The largest element in the array - The sum of all elements if the array is sorted in strictly ascending order; otherwise, print the product of all elements. Sample Input 1 5 1 2 3 4 5 Sample Output 1 1 5 15 Sample Input 2 4 3 1 2 4 Sample Output 2 1 4 24 Explanation In the first sample, the array is sorted in strictly ascending order. The smallest element is 1, the largest is 5, and the sum of all elements is 1 + 2 + 3 + 4 + 5 = 15. In the second sample, the array is not sorted in strictly ascending order. The smallest element is 1, the largest is 4, and the product of all elements is 3 * 1 * 2 * 4 = 24.","solution":"def smallest_largest_sum_or_product(arr): smallest = min(arr) largest = max(arr) is_sorted_ascending = all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)) if is_sorted_ascending: result = sum(arr) else: result = 1 for num in arr: result *= num return smallest, largest, result"},{"question":"A botanist has been working on sequencing various plant genomes collected from different geographical locations. During one of his projects, he has a list of plant species with their respective occurrences across several locations, represented as a matrix. He is interested in understanding the diversity of these locations in terms of the unique species found. Given a matrix where each row represents a location, and each column represents a plant species, the value at position (i, j) indicates the presence (1) or absence (0) of species j in location i. The task is to find out the number of locations that have a unique set of species, i.e., no other location has the same combination of species. Write a function that determines the number of unique locations based on their species set. -----Input----- The first line contains two integers L and S, where L (1 ≤ L ≤ 100) is the number of locations and S (1 ≤ S ≤ 50) is the number of species. The next L lines contain S integers (0 or 1), representing the species matrix. -----Output----- Print a single integer representing the number of unique locations. -----Examples----- Sample Input 1: 3 5 1 0 0 1 0 1 0 0 1 0 0 1 1 0 1 Sample Output 1: 2 Sample Input 2: 4 3 1 0 1 0 1 1 1 0 1 0 0 0 Sample Output 2: 3","solution":"def count_unique_locations(matrix): Returns the number of unique locations based on their species set. :param matrix: List[List[int]] representing species matrix :return: int # Convert each row (species set) to tuple and create a set to store unique sets unique_sets = set(tuple(row) for row in matrix) # The size of the set is the number of unique locations return len(unique_sets)"},{"question":"A linked list consists of n nodes, each of which contains a positive integer value. You have to find the smallest sum of any non-empty, contiguous sublist of the linked list. In other words, you need to identify a sublist such that no other sublist has a smaller sum of elements. For instance, in the linked list [3, -4, 5, 6, -8, 2, 1], the smallest sum of any contiguous sublist is -8. Your task is to implement a function `find_smallest_sum` that takes the head of the linked list and returns the smallest sum of any contiguous sublist within the linked list. -----Function Signature----- ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_smallest_sum(head: ListNode) -> int: # Your implementation here ``` -----Input----- - The function receives a head of the linked list, where 1 le n le 10^5 and each node\'s value is a positive integer between 1 and 10^4. -----Output----- - The function should return an integer representing the smallest sum of any contiguous sublist in the linked list. -----Examples----- Input ``` head = ListNode(3, ListNode(-4, ListNode(5, ListNode(6, ListNode(-8, ListNode(2, ListNode(1))))))) ``` Output ``` -8 ``` Input ``` head = ListNode(2, ListNode(3, ListNode(-1, ListNode(1)))) ``` Output ``` -1 ``` Input ``` head = ListNode(5, ListNode(6, ListNode(3))) ``` Output ``` 3 ``` -----Note----- In the first example, the smallest sum sublist is `[-8]`, with a sum of `-8`. In the second example, the smallest sum sublist is `[-1]`, with a sum of `-1`. In the third example, the smallest sublist sum is attained by the sublist `[3]`, with a minimum sum of `3`.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def find_smallest_sum(head: ListNode) -> int: if not head: return 0 current_node = head current_sum = current_node.val min_sum = current_node.val while current_node.next is not None: current_node = current_node.next if current_sum > 0: current_sum = current_node.val else: current_sum += current_node.val if current_sum < min_sum: min_sum = current_sum return min_sum"},{"question":"Given an array of integers, write a function to find the maximum possible product of three numbers in the array. You should implement an efficient solution with a time complexity of O(n log n) or better. Input The input contains a single list of integers `arr` (3 ≤ len(arr) ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4), representing the array. Output Output a single integer, which is the maximum possible product of three numbers from the array. Examples Input [1, 2, 3] Output 6 Input [-10, -10, 5, 2] Output 500","solution":"def maximum_product_of_three(arr): Returns the maximum possible product of three numbers from the array. # Sorting the array arr.sort() # The maximum of the product of the largest three numbers # or the product of the two smallest numbers (which could be negative) # and the largest number. return max(arr[-1] * arr[-2] * arr[-3], arr[0] * arr[1] * arr[-1])"},{"question":"Dora is a biologist who is studying the population of rare butterflies in a large forest. The forest is divided into a grid of N times M cells. Each cell contains a certain number of butterflies. Dora needs to perform several updates and queries on the grid. The updates consist of changing the number of butterflies in a specific cell, and the queries request the sum of the butterflies in a rectangular subregion of the grid. ------ Input ------ The first line of the input contains three space-separated integers N, M, and Q: the number of rows, the number of columns, and the number of queries, respectively. The next N lines contain M space-separated integers each. These integers represent the initial numbers of butterflies in the forest cells. Each of the next Q lines contains a query. A query is of one of the following two types: 1. \\"1 r c k\\": Update the number of butterflies in the cell at row r and column c to k. 2. \\"2 r1 c1 r2 c2\\": Return the sum of butterflies in the subregion defined by its top-left corner (r1, c1) and its bottom-right corner (r2, c2). ------ Output ------ For each query of the second type, print a single line containing the sum of butterflies in the specified subregion. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 10000 1 ≤ text{number of butterflies in each cell} ≤ 1000 1 ≤ r, r1, r2 ≤ N 1 ≤ c, c1, c2 ≤ M ------ Sample Input ------ 3 3 5 1 2 3 4 5 6 7 8 9 2 1 1 2 2 1 2 2 10 2 1 1 2 2 2 1 1 3 3 1 3 3 1 ------ Sample Output ------ 12 17 48 ------ Explanation ------ Consider the initial grid: ``` 1 2 3 4 5 6 7 8 9 ``` - Query 1: The sum of butterflies from cell (1,1) to cell (2,2) is 1+2+4+5 = 12. - Query 2: Update the number of butterflies in cell (2,2) to 10. The grid now becomes: ``` 1 2 3 4 10 6 7 8 9 ``` - Query 3: The sum of butterflies from cell (1,1) to cell (2,2) is now 1+2+4+10 = 17. - Query 4: The sum of butterflies from cell (1,1) to cell (3,3) is 1+2+3+4+10+6+7+8+9 = 50. - Query 5: Update the number of butterflies in cell (3,3) to 1. The final grid becomes: ``` 1 2 3 4 10 6 7 8 1 ```","solution":"class ButterflyForest: def __init__(self, grid): self.grid = grid self.N = len(grid) self.M = len(grid[0]) self.prefix_sum = [[0] * (self.M + 1) for _ in range(self.N + 1)] self._calculate_prefix_sum() def _calculate_prefix_sum(self): for i in range(1, self.N + 1): for j in range(1, self.M + 1): self.prefix_sum[i][j] = self.grid[i-1][j-1] + self.prefix_sum[i-1][j] + self.prefix_sum[i][j-1] - self.prefix_sum[i-1][j-1] def update_cell(self, r, c, k): # Update the actual grid old_value = self.grid[r-1][c-1] self.grid[r-1][c-1] = k # Update the prefix sum accordingly diff = k - old_value for i in range(r, self.N + 1): for j in range(c, self.M + 1): self.prefix_sum[i][j] += diff def query_sum(self, r1, c1, r2, c2): return self.prefix_sum[r2][c2] - self.prefix_sum[r1-1][c2] - self.prefix_sum[r2][c1-1] + self.prefix_sum[r1-1][c1-1] def butterfly_forest_operations(N, M, Q, initial_grid, operations): forest = ButterflyForest(initial_grid) results = [] for operation in operations: op = operation[0] if op == 1: _, r, c, k = operation forest.update_cell(r, c, k) elif op == 2: _, r1, c1, r2, c2 = operation result = forest.query_sum(r1, c1, r2, c2) results.append(result) return results"},{"question":"You have been given coins with different denominations, and you are required to determine whether it is possible to make a certain amount of money using those coins. You may use each coin denomination as many times as you want. Write a function `canMakeAmount(coins: List[int], amount: int) -> bool` that returns `True` if it\'s possible to make the `amount` with the given denominations, otherwise returns `False`. Example 1: Input: coins = [1, 2, 5], amount = 11 Output: True Explanation: You can use two 5 coins and one 1 coin to make 11. Example 2: Input: coins = [2], amount = 3 Output: False Explanation: You cannot make 3 using only a 2 coin. Example 3: Input: coins = [1], amount = 0 Output: True Explanation: You do not need any coins to make 0. Constraints: - 1 <= coins.length <= 12 - 1 <= coins[i] <= 1000 - 0 <= amount <= 5000","solution":"from typing import List def canMakeAmount(coins: List[int], amount: int) -> bool: Returns True if it\'s possible to make the `amount` with the given denominations, otherwise returns False. dp = [False] * (amount + 1) dp[0] = True for i in range(1, amount + 1): for coin in coins: if i - coin >= 0 and dp[i - coin]: dp[i] = True break return dp[amount]"},{"question":"John is organizing a charity event and wants to set up booths to serve the attendees. Each type of booth requires a different number of staff members to operate efficiently. He has a list of how many staff members are assigned to each booth type, and he has to ensure he assigns booths such that the total number of staff members used in each combination is unique. If there are two combinations of booths that use the same number of staff members, John will consider the event planning impossible and output \\"Impossible\\". If he successfully assigns unique total staff numbers to each combination, he will proceed and output \\"Possible\\". Help John determine whether it\'s possible to assign booths uniquely. Input: - First line contains an integer n, the number of different booth types. - Second line contains n integers representing the number of staff members required for each booth type. Output: - \\"Possible\\" if John can uniquely assign booths such that no two combinations of staff members use the same total number. - \\"Impossible\\" otherwise. SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT Possible SAMPLE INPUT 3 1 2 2 SAMPLE OUTPUT Impossible","solution":"def can_assign_booths_unique(n, staff_requirements): Checks if it\'s possible to assign booths such that the total number of staff members used in each combination is unique. Args: n : int : Number of different booth types. staff_requirements : list : List of integers representing the number of staff members required for each booth type. Returns: str : \\"Possible\\" or \\"Impossible\\" staff_requirements_sorted = sorted(staff_requirements) for i in range(1, n): if staff_requirements_sorted[i] == staff_requirements_sorted[i - 1]: return \\"Impossible\\" return \\"Possible\\""},{"question":"In a far-off kingdom, there exists a magical garden where flowers bloom in a peculiar pattern. The kingdom is divided into a grid of `n x n` cells. Each cell can either contain a flower or be empty. The king, fascinated by the beauty of arrangements, has tasked you with an important challenge. You need to count the number of ways to place exactly `k` flowers in the `n x n` grid such that no two flowers are placed in the same row or column. This is essentially a problem of finding certain placements in a grid where `k` flowers are positioned in such a way that each flower occupies a unique row and column. If you succeed in counting the ways, you will be rewarded with a gem that grants ultimate wisdom. Write a program that calculates the number of ways to place `k` flowers in the grid as described. Input format The first line contains two integers n and k, where `n` is the size of the grid, and `k` is the number of flowers to be placed. Output format Print a single integer which is the number of ways to place `k` flowers in an `n x n` grid such that no two flowers share the same row or column. Constraints 1 ≤ n ≤ 10 0 ≤ k ≤ n SAMPLE INPUT 4 2 SAMPLE OUTPUT 72 Explanation For a `4x4` grid and `k = 2` flowers, there are 72 possible arrangements where no two flowers share the same row or column. Example arrangements include placing flowers at (1, 1) and (2, 2), or (1, 1) and (3, 3), and so on.","solution":"import math def count_flower_arrangements(n, k): Returns the number of ways to arrange k flowers in an n x n grid such that no two flowers are in the same row or column. if k > n or k < 0 or n < 1: return 0 choose_n_k = math.comb(n, k) return choose_n_k * choose_n_k * math.factorial(k)"},{"question":"Given an array of integers, write a function to find the first missing positive integer. Example 1: Input: [1,2,0] Output: 3 Example 2: Input: [3,4,-1,1] Output: 2 Example 3: Input: [7,8,9,11,12] Output: 1 Note: Your algorithm should run in O(n) time and use constant extra space.","solution":"def first_missing_positive(nums): Finds the first missing positive integer in an array of integers. n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: # Swap nums[i] with the number at its correct position nums[nums[i] - 1] nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"An outdoor adventure company organizes trips to various beautiful lakes. They want to maintain records of the different trips made to each lake. You are asked to create a system that will allow the company to find out which lakes were visited most frequently and the number of trips made to each lake. You need to analyze the data about the trips, and for each query, determine the lake with the highest number of trips and the respective number of trips made to that lake. If there are multiple lakes with the highest number of trips, return the one that comes first lexicographically. ------ Input ------ The first line of the input contains a single integer T denoting the number of queries. The description of T queries follows. Each query consists of multiple lines. The first line of each query contains an integer N denoting the number of trips. The following N lines of each query contain a single string, denoting the name of the lake for each trip. ------ Output ------ For each query, print a single line containing the name of the lake with the highest number of trips, followed by the number of trips. If there are multiple lakes with the highest number of trips, print the lexicographically first one. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 The length of each lake name does not exceed 100. The sum of trips across all queries does not exceed 10^6. ------ Sample Input 1 ------ 3 3 Lake1 Lake3 Lake1 2 Lake2 Lake2 5 Lake3 Lake2 Lake1 Lake2 Lake3 ------ Sample Output 1 ------ Lake1 2 Lake2 2 Lake2 2 ------ Explanation 1 ------ For query 1, \\"Lake1\\" is visited twice, which is more frequent than \\"Lake3\\" which is visited once. For query 2, \\"Lake2\\" is visited twice, so it is the most frequent. For query 3, both \\"Lake2\\" and \\"Lake3\\" are visited twice, but \\"Lake2\\" comes first lexicographically.","solution":"def most_frequent_lake(trip_data): Analyzes trip data to find the lake with the highest number of trips and the respective number of trips. If multiple lakes have the highest number of trips, returns the lexicographically first one. Parameters: trip_data (list of lists): Each element is a list containing the trip information for one query. Returns: list of tuples: Each tuple contains the name of the lake and the number of trips. results = [] for trips in trip_data: lake_count = {} for lake in trips: if lake in lake_count: lake_count[lake] += 1 else: lake_count[lake] = 1 max_trips = 0 frequent_lake = \\"\\" for lake, count in lake_count.items(): if count > max_trips or (count == max_trips and lake < frequent_lake): max_trips = count frequent_lake = lake results.append((frequent_lake, max_trips)) return results"},{"question":"A company has n servers numbered from 1 to n. Each server needs to be rebooted and we have a specific schedule for reboots. The ith server should be rebooted every i-th hour. Determine if there exists a time t (1 ≤ t ≤ 1000) such that every server will not reboot at the same hour t. Input The only line contains single integer: 1 ≤ n ≤ 1000 — number of servers. Output Output \\"YES\\" if there exists such a time t, and \\"NO\\" otherwise. Examples Input 2 Output YES Input 3 Output NO","solution":"def can_avoid_same_reboot_time(n): Determines if there exists a time t (1 ≤ t ≤ 1000) such that every server will not reboot at the same hour t. Parameters: n (int): The number of servers. Returns: str: \\"YES\\" if there exists such a time t, \\"NO\\" otherwise. if n == 1: return \\"YES\\" elif n == 2: return \\"YES\\" elif n >= 3: return \\"NO\\" else: return \\"NO\\""},{"question":"A string s is called a palindrome if it reads the same backwards as forwards. For example, \\"madam\\" and \\"racecar\\" are palindromes, but \\"hello\\" and \\"world\\" are not. Given a string s consisting of lowercase English letters, you can perform the following operation on it any number of times (including zero): - Choose any two characters a and b (a neq b) in the string and replace all occurrences of a with b. Determine the minimum number of such operations needed to make the string a palindrome. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single string s (1 le |s| le 1000), the string for which we want to determine the minimum number of operations to make it a palindrome. -----Output----- For each test case, print one integer in a single line — the minimum number of operations needed to make the string a palindrome. -----Example----- Input 3 abca aabb abcba Output 1 2 0 -----Note----- In the first test case, replace either \'b\' or \'c\' with \'a\' to get \'aaaa\'. In the second test case, replace all \'a\'s with \'b\'s (or all \'b\'s with \'a\'s) to get \'bbbb\' (or \'aaaa\'). In the third test case, the string is already a palindrome, so no operations are needed.","solution":"def min_operations_to_palindrome(s: str) -> int: Returns the minimum number of operations needed to make the string a palindrome. n = len(s) left = 0 right = n - 1 operations = 0 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_operations_to_palindrome(s)) return results"},{"question":"You are given an array `arr` of integers and an integer `k`. For each possible subarray of `arr`, calculate its sum and determine if it is divisible by `k`. If it is, increment a counter. Return the count of such subarrays. Input - The first line contains two integers `n` (the length of the array) and `k` (the divisor). - The second line contains `n` integers representing the elements of the array `arr`. Output - Print a single integer representing the count of subarrays whose sums are divisible by `k`. Constraints - 1 ≤ n ≤ 100000 - 1 ≤ |arr[i]| ≤ 10000 - 1 ≤ k ≤ 100000 Examples Input 5 3 1 2 3 4 1 Output 4 Input 4 2 2 2 2 2 Output 10 Explanation For the first example: - Subarrays [3], [1,2], [2,1], and [1,2,3] have sums 3, 3, 3, and 6 respectively, all of which are divisible by 3. For the second example: - Every possible subarray has a sum that is divisible by 2, resulting in 10 such subarrays.","solution":"def count_divisible_subarrays(arr, k): n = len(arr) # Initialize the prefix sums and counter prefix_sums = [0] * (n + 1) sum_count = {0: 1} result = 0 for i in range(n): prefix_sums[i + 1] = (prefix_sums[i] + arr[i]) % k if prefix_sums[i + 1] in sum_count: result += sum_count[prefix_sums[i + 1]] sum_count[prefix_sums[i + 1]] += 1 else: sum_count[prefix_sums[i + 1]] = 1 return result # Function to read input, process and print the result def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) arr = list(map(int, data[2:2+n])) result = count_divisible_subarrays(arr, k) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Your task is to implement a function that takes a string containing an arithmetic expression and evaluates it. The string will contain non-negative integers and the operators +, -, *, and /. The expression must respect the order of operations (PEMDAS/BODMAS rules). The result should be returned as a floating-point number if division is involved, otherwise as an integer. Examples ```python evaluate(\\"3+2*2\\") == 7 evaluate(\\" 3/2 \\") == 1.5 evaluate(\\" 3+5 / 2 \\") == 5.5 evaluate(\\"10 + 2 * 6\\") == 22 evaluate(\\"100 * 2 + 12\\") == 212 evaluate(\\"100 * ( 2 + 12 )\\") == 1400 evaluate(\\"100 * ( 2 + 12 ) / 14\\") == 100.0 ```","solution":"def evaluate(expression): Evaluates a string containing an arithmetic expression. The string will contain non-negative integers and the operators +, -, *, and /. The expression must respect the order of operations (PEMDAS/BODMAS rules). try: # Evaluating the expression using Python\'s eval function after sanitizing input sanitized_expr = expression.replace(\' \', \'\') result = eval(sanitized_expr) return float(result) if isinstance(result, float) else int(result) except Exception as e: raise ValueError(f\\"Error evaluating expression: {e}\\")"},{"question":"Given a string S consisting of only lowercase and uppercase letters, find the character that appears the most frequently in it. If there are two or more characters that occur the same number of times, return the lexicographically smallest character. Example 1: Input: S = \\"testString\\" Output: t Explanation: \'t\' appears 3 times, which is more than any other character. Example 2: Input: S = \\"racecarRACE\\" Output: a Explanation: \'r\', \'a\', \'c\', \'e\' each appear 2 times, but \'a\' is lexicographically smallest. Your Task: You don\'t need to read input or print anything. Your task is to complete the function max_char() that receives a string S as input parameter and returns the most frequent character in it as a string. Expected Time Complexity: O(len(S)) Expected Space Complexity: O(1) Constraints: 1 <= len(S) <= 1000000","solution":"def max_char(S): from collections import Counter lower_s = S.lower() count = Counter(lower_s) max_freq = max(count.values()) candidates = [char for char in count if count[char] == max_freq] return min(candidates)"},{"question":"You need to create a function that calculates the next day of the week given a starting day and a number of days to add. The function should return the correct day of the week. For this exercise, the days of the week are encoded as: ``` 0 -> \\"Sunday\\" 1 -> \\"Monday\\" 2 -> \\"Tuesday\\" 3 -> \\"Wednesday\\" 4 -> \\"Thursday\\" 5 -> \\"Friday\\" 6 -> \\"Saturday\\" ``` The function will take two parameters: - `starting_day`: an integer representing the day of the week (0 to 6) - `days_to_add`: a non-negative integer representing the number of days to add The function should return a string representing the day of the week after adding the given number of days. Example: ``` next_day(0, 5) -> \\"Friday\\" next_day(3, 10) -> \\"Saturday\\" next_day(6, 0) -> \\"Saturday\\" ``` Note: You can assume `starting_day` will always be an integer between 0 and 6, and `days_to_add` will always be a non-negative integer.","solution":"def next_day(starting_day, days_to_add): Calculates the next day of the week given a starting day and a number of days to add. Args: starting_day (int): The starting day of the week (0 to 6). days_to_add (int): The number of days to add. Returns: str: The day of the week after adding the given number of days. days_of_week = [\\"Sunday\\", \\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\"] new_day_index = (starting_day + days_to_add) % 7 return days_of_week[new_day_index]"},{"question":"You are given an array of N integers where each integer represents the height of a building. We wish to maximize the sum of the heights of the selected buildings such that no two selected buildings are adjacent. Write a program that determines the maximum sum of heights of the selected buildings under the given condition. Constraints: - 1 ≤ N ≤ 100 - 1 ≤ height of each building ≤ 10,000 Input: Input is given from Standard Input in the following format: ``` N height_1 height_2 ... height_N ``` Output: Print the maximum sum of heights of the selected buildings. Examples: Input: ``` 4 1 2 3 1 ``` Output: ``` 4 ``` Input: ``` 6 5 5 10 100 10 5 ``` Output: ``` 110 ``` Input: ``` 3 10 20 30 ``` Output: ``` 40 ```","solution":"def max_sum_non_adjacent_buildings(n, heights): if n == 0: return 0 if n == 1: return heights[0] dp = [0] * n dp[0] = heights[0] dp[1] = max(heights[0], heights[1]) for i in range(2, n): dp[i] = max(dp[i - 1], heights[i] + dp[i - 2]) return dp[-1]"},{"question":"In this coding task, you are asked to implement a function that determines whether a given binary tree is height-balanced. A binary tree is height-balanced if the difference in height between the left and right subtrees of any node in the tree is no more than 1. To solve this problem, you need to write a function `is_balanced` that takes the root node of a binary tree and returns `True` if the tree is height-balanced, and `False` otherwise. A binary tree node is represented by a class `TreeNode`, which has three attributes: - `val`: Value of the node. - `left`: Left child node, which is either another `TreeNode` instance or `None`. - `right`: Right child node, which is either another `TreeNode` instance or `None`. Example 1: ``` Input: 3 / 9 20 / 15 7 Output: True ``` Example 2: ``` Input: 1 / 2 2 / 3 3 / 4 4 Output: False ``` To implement the solution, define a helper function that computes the height of a subtree and checks if the subtree is balanced. The function should handle an empty input root by returning `True`. Here is the signature of the function: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: # Your code here ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def is_balanced(root: TreeNode) -> bool: def check_height(node): if not node: return 0, True left_height, left_balanced = check_height(node.left) right_height, right_balanced = check_height(node.right) current_balanced = abs(left_height - right_height) <= 1 current_height = max(left_height, right_height) + 1 return current_height, left_balanced and right_balanced and current_balanced _, is_bal = check_height(root) return is_bal"},{"question":"Your task is to implement a function that processes a specific kind of network packet log and extracts valuable information from it. -----Input----- The input consists of one or more lines containing the log of network packets from a monitoring system. Each line represents one packet and has the following format: ``` [timestamp] SOURCE_IP -> DESTINATION_IP PROTOCOL LENGTH ``` - `timestamp` is in the format `[YYYY-MM-DD HH:MM:SS]`. - `SOURCE_IP` and `DESTINATION_IP` are IPv4 addresses. - `PROTOCOL` is one of `TCP`, `UDP`, or `ICMP`. - `LENGTH` is an integer representing the size of the packet in bytes. -----Output----- The output should consist of three lines: - The first line should be the total number of packets processed. - The second line should be the total number of bytes transferred, summed across all packets. - The third line should be a dictionary-like output with the count of each protocol used, sorted alphabetically by protocol name, in the following format: ```python {\\"ICMP\\": icmp_count, \\"TCP\\": tcp_count, \\"UDP\\": udp_count} ``` where `icmp_count`, `tcp_count`, and `udp_count` are the respective counts of packets using the ICMP, TCP, and UDP protocols. -----Example----- Sample Input: ``` [2023-01-01 12:34:56] 192.168.0.1 -> 192.168.0.2 TCP 1500 [2023-01-01 12:35:56] 192.168.0.1 -> 192.168.0.3 UDP 500 [2023-01-01 12:36:56] 192.168.0.1 -> 192.168.0.2 ICMP 100 [2023-01-01 12:37:56] 192.168.0.2 -> 192.168.0.3 ICMP 100 ``` Sample Output: ``` 4 2200 {\\"ICMP\\": 2, \\"TCP\\": 1, \\"UDP\\": 1} ```","solution":"def process_packet_logs(logs): Processes the network packet logs and returns the total count of packets, the total bytes transferred, and a count of each protocol used. Args: logs (list of str): A list of packet log strings. Returns: tuple: A tuple containing the total packet count (int), the total bytes transferred (int), and a dictionary with counts of each protocol (dict). packet_count = 0 total_bytes = 0 protocol_count = {\'ICMP\': 0, \'TCP\': 0, \'UDP\': 0} for log in logs: parts = log.split() protocol = parts[-2] length = int(parts[-1]) packet_count += 1 total_bytes += length if protocol in protocol_count: protocol_count[protocol] += 1 return packet_count, total_bytes, protocol_count"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Palindrome Partitioning II Description Given a string `s`, partition the string such that every substring of the partition is a palindrome. Return the minimum cuts needed for a palindrome partitioning of `s`. Example Input abccbc Output 2 Explanation The palindrome partitions are \\"a\\", \\"b\\", \\"cc\\", \\"b\\", \\"c\\"","solution":"def min_cut_palindrome_partition(s): Returns the minimum cuts needed for a palindrome partitioning of s. n = len(s) if n == 0: return 0 # Create a DP array to store the minimum cuts for each prefix of the string cuts = [0] * n pal = [[False] * n for _ in range(n)] # A table to check if a substring is palindrome for i in range(n): min_cut = i # Max cuts is \\"i\\", i.e., each character is a palindrome for j in range(i + 1): if s[j] == s[i] and (i - j <= 1 or pal[j + 1][i - 1]): pal[j][i] = True # If j is 0, then whole substring [0:i+1] is one palindrome, no cuts needed min_cut = 0 if j == 0 else min(min_cut, cuts[j - 1] + 1) cuts[i] = min_cut return cuts[-1]"},{"question":"You are given N elements in an array A, where each element represents a soldier\'s strength. There are M commands that you need to execute. Each command is one of two types: 1. `1 X Y`: Update the value of the soldier at position X to Y. 2. `2 L R`: Compute the total number of soldiers with prime number strength in the subarray from L to R (both inclusive). A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. ------ Input Format ------ - The first line contains two space-separated integers N and M, denoting the number of elements in the array and the number of commands, respectively. - The second line contains N space-separated integers that represent the initial strengths of the soldiers. - The next M lines each contain a command as described above. ------ Output Format ------ For each command of type `2 L R`, output on a new line the total number of soldiers with prime number strength in the specified subarray. ------ Constraints ------ 1 ≤ N, M ≤ 10^{5} 1 ≤ A[i], Y ≤ 10^{6} 1 ≤ X, L, R ≤ N 1 ≤ R - L + 1 ≤ 10^{5} ------ Sample Input 1 ------ 6 5 6 10 3 5 7 15 2 1 6 1 4 11 2 3 5 2 1 3 2 2 4 ------ Sample Output 1 ------ 3 2 1 1 ------ Explanation 1 ------ The initial strengths are [6, 10, 3, 5, 7, 15]. - Command `2 1 6`: The soldiers\' strengths are [6, 10, 3, 5, 7, 15]. The prime numbers are 3, 5, and 7. Hence the count is 3. - Command `1 4 11`: Update the fourth soldier\'s strength to 11. The array now is [6, 10, 3, 11, 7, 15]. - Command `2 3 5`: The soldiers\' strengths are [3, 11, 7]. All are primes. Hence the count is 3. - Command `2 1 3`: The soldiers\' strengths are [6, 10, 3]. 3 is the only prime. Hence the count is 1. - Command `2 2 4`: The soldiers\' strengths are [10, 3, 11]. The primes are 3 and 11. Hence the count is 2.","solution":"import math def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def execute_commands(n, m, soldiers, commands): results = [] for command in commands: cmd = command.split() if cmd[0] == \\"1\\": X = int(cmd[1]) - 1 Y = int(cmd[2]) soldiers[X] = Y elif cmd[0] == \\"2\\": L = int(cmd[1]) - 1 R = int(cmd[2]) - 1 prime_count = sum(1 for i in range(L, R + 1) if is_prime(soldiers[i])) results.append(prime_count) return results def process_input(input_str): input_lines = input_str.strip().split(\'n\') n, m = map(int, input_lines[0].split()) soldiers = list(map(int, input_lines[1].split())) commands = input_lines[2:] return n, m, soldiers, commands def main(input_str): n, m, soldiers, commands = process_input(input_str) results = execute_commands(n, m, soldiers, commands) return results"},{"question":"Write a function that takes an integer n as input and returns the reverse of its digits. -----Constraints----- - The input integer n is non-negative. - 0 ≤ n ≤ 10^9 -----Input----- The input consists of one line containing the integer n. -----Output----- Output the integer which represents the digits of n in reverse order. -----Sample Input----- 12345 -----Sample Output----- 54321","solution":"def reverse_digits(n): Takes an integer n as input and returns the reverse of its digits. return int(str(n)[::-1])"},{"question":"You are given a list of non-negative integers, representing the heights of adjacent buildings. Write a function to compute the maximum amount of water that can be trapped by these buildings after raining. The amount of water trapped between two heights is the difference between the shorter height and the next higher height multiplied by the distance between them. Write the code that will take in a list of heights and return the maximum amount of water. function maxWaterTrap(height: number[]): number; Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The above elevation map (representing the heights of buildings) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this example, 6 units of water are trapped. Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Explanation: The above elevation map is represented by array [4,2,0,3,2,5]. In this example, 9 units of water are trapped.","solution":"def maxWaterTrap(height): Computes the maximum amount of water that can be trapped. Args: height : List[int] : List of non-negative integers representing the heights of buildings. Returns: int : Maximum amount of water that can be trapped. if not height: return 0 left, right = 0, len(height) - 1 max_left, max_right = height[left], height[right] water_trapped = 0 while left < right: if max_left < max_right: left += 1 max_left = max(max_left, height[left]) water_trapped += max_left - height[left] else: right -= 1 max_right = max(max_right, height[right]) water_trapped += max_right - height[right] return water_trapped"},{"question":"In an ancient civilization, a system of water canals was used to transport water from a central reservoir to various farms. The farms are scattered and connected by a series of interconnected canals forming a network. Each canal segment has a flow capacity and there may be multiple routes to direct water from the reservoir to a farm. Given the layout of the canals and each canal\'s maximum flow capacity, compute the maximum amount of water that can be delivered from the reservoir to a specified target farm. If no route can provide water to the farm, the output should be 0. -----Input----- The first line of the input contains two integers n (2 leq n leq 1000) and m (1 leq m leq 2000), where n is the number of nodes (including the reservoir and all farms) and m is the number of canal segments. Nodes are numbered from 1 to n where node 1 is the reservoir. Each of the following m lines contains three integers u, v, and c (1 leq u, v leq n; 1 leq c leq 10000), describing a canal segment that allows a maximum flow of c from node u to node v. The last line contains a single integer, t (2 leq t leq n), which is the target farm node. -----Output----- The output should be a single integer: the maximum water flow that can be delivered from the reservoir to the target farm. -----Examples----- Sample Input: 4 5 1 2 40 1 3 20 2 3 10 2 4 30 3 4 20 4 Sample Output: 50 Sample Input: 3 3 1 2 100 1 3 50 2 3 50 3 Sample Output: 100","solution":"from collections import defaultdict, deque def bfs_capacity(graph, source, sink, parent): Breadth-First Search to find if there is a path from source to sink in residual graph. If there is a path, return True and fills parent to store the path. visited = [False] * len(graph) queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for v, capacity in enumerate(graph[u]): if visited[v] == False and capacity > 0: queue.append(v) visited[v] = True parent[v] = u if v == sink: return True return False def edmonds_karp_max_flow(graph, source, sink): Implementation of Edmonds-Karp to find maximum flow in the given graph. parent = [-1] * len(graph) max_flow = 0 while bfs_capacity(graph, source, sink, parent): path_flow = float(\\"Inf\\") s = sink while s != source: path_flow = min(path_flow, graph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] graph[u][v] -= path_flow graph[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_water_delivery(n, m, edges, t): Finds the maximum amount of water that can be delivered from the reservoir (node 1) to the target farm (node t) using the given edges. # Create the graph graph = [[0] * (n + 1) for _ in range(n + 1)] for u, v, c in edges: graph[u][v] += c # Adding capacities for parallel edges # Run Edmonds-Karp to find max flow from source (1) to target (t) return edmonds_karp_max_flow(graph, 1, t) # --- Example Usage --- # Input # n = 4 # m = 5 # edges = [ # (1, 2, 40), # (1, 3, 20), # (2, 3, 10), # (2, 4, 30), # (3, 4, 20) # ] # t = 4 # Output # print(max_water_delivery(n, m, edges, t)) # Output: 50"},{"question":"You are given an array representing temperatures on different days and you are supposed to predict the number of days you would have to wait until a warmer temperature for each day. If there is no future day for which this is possible, input 0 for that day. The temperatures T have a length n, where 1 ≤ n ≤ 30000 and T[i] valid range from -100 to 100. You need to find in O(n) time complexity using an efficient algorithm how many days you have to wait until a warmer temperature. You are required to use a stack to efficiently solve this problem. Input The first line contains an integer n (1 ≤ n ≤ 30000). The second line contains n space-separated integers representing the temperatures T. Output Print n space-separated integers where the ith integer is the answer for the ith day in the input array. Examples Input 8 73 74 75 71 69 72 76 73 Output 1 1 4 2 1 1 0 0 Input 5 30 40 50 60 70 Output 1 1 1 1 0 Input 3 90 80 70 Output 0 0 0 Note In the first example, for the first day (73), we have to wait 1 day until the temperature rises to 74. For the second day (74), we have to wait 1 day until the temperature rises to 75, and so on. For the seventh day (76), it is already the hottest day so we append 0 for it. In the second example, each day is hotter than the previous one, so it always takes only one day to get a warmer temperature, except for the last day. In the third example, every consecutive day\'s temperature is lower than the previous one, so we can append 0 for all days.","solution":"def dailyTemperatures(T): Calculate the number of days until a warmer temperature for each day. Parameters: T (List[int]): List of daily temperatures. Returns: List[int]: List of days to wait until a warmer temperature. # Initialize the result array with all zeros res = [0] * len(T) # Create a stack to store indices of the temperatures list stack = [] # Iterate over temperatures for i, temp in enumerate(T): # While stack is not empty and the current temperature is greater than the temperature at the index on the top of the stack while stack and temp > T[stack[-1]]: # Pop the index from the stack prev_index = stack.pop() # Calculate the difference in days between the current index and the index from stack res[prev_index] = i - prev_index # Push the current index onto the stack stack.append(i) return res"},{"question":"Given a 2D grid of integers where some cells contain non-zero values representing obstacles, and other cells are empty (represented by zeros), you need to navigate from a starting position to a target position by avoiding obstacles. The grid is represented as a list of lists where each sublist is a row on the grid. You can move up, down, left, or right, but not diagonally. Cells with obstacles (non-zero integers) are impassable. Write a function to determine the shortest path from the start to the target, measured in number of steps. If there is no possible path, return -1. The function should take three arguments: 1. `grid`: a list of lists of integers, representing the 2D grid. 2. `start`: a list of two integers `[row, col]`, representing the starting position on the grid. 3. `target`: a list of two integers `[row, col]`, representing the target position on the grid. # Constraints: 1. The grid will have at least one row and one column. 2. The start and target positions will always be within the bounds of the grid. 3. The start and target positions will always be empty cells (0 values). # Example: ```python grid = [ [0, 0, 1, 0, 0], [1, 0, 1, 1, 1], [0, 0, 0, 0, 1], [1, 1, 1, 0, 0], [0, 0, 1, 0, 0] ] start = [0, 0] target = [4, 4] print(shortest_path(grid, start, target)) # Should output 8 start = [0, 0] target = [2, 2] print(shortest_path(grid, start, target)) # Should output 4 ``` # Notes: - The grid can contain obstacles indicated by values greater than zero. - Your goal is to find the shortest path from start to target avoiding obstacles. - If it\'s not possible to reach the target from the starting position, return -1.","solution":"from collections import deque def shortest_path(grid, start, target): Finds the shortest path in a grid avoiding obstacles. Parameters: grid (list of list of int): The grid representation. start (list of int): Starting position [row, col]. target (list of int): Target position [row, col]. Returns: int: The length of the shortest path or -1 if no path exists. rows = len(grid) cols = len(grid[0]) if start == target: return 0 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, distance = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited and grid[nx][ny] == 0: if [nx, ny] == target: return distance + 1 queue.append((nx, ny, distance + 1)) visited.add((nx, ny)) return -1"},{"question":"____ # Task **_Given_** an *array/list [] of integers* and an integer **k**, **_Find_** *the maximum sum of any subsequence of k elements*. ___ # Notes * **_Array/list_** size is *at least 1* . * The value **k** will be between 1 and the length of the array/list (inclusive). * **_Returned value_** should be a single integer representing the maximum sum. ___ # Input >> Output Examples ``` maxSubsequenceSum({3, 1, -2, 4, 6, -1}, 2) ==> return 10 ``` **_Explanation_**: * The subsequence {4, 6} has the maximum sum (4 + 6 = 10). ___ ``` maxSubsequenceSum({10, -3, 2, 8, 1, -5}, 3) ==> return 20 ``` **_Explanation_**: * The subsequence {10, 8, 2} has the maximum sum (10 + 8 + 2 = 20). ___ ``` maxSubsequenceSum({1, 2, 3, 4, 5}, 1) ==> return 5 ``` **_Explanation_**: * The subsequence {5} has the maximum sum (5). ___ ``` maxSubsequenceSum({-1, -2, -3, -4, -5}, 2) ==> return -3 ``` **_Explanation_**: * The subsequence {-1, -2} has the maximum sum (-1 + -2 = -3). ___","solution":"def maxSubsequenceSum(arr, k): Returns the maximum sum of any subsequence of k elements. # Sort the array in descending order arr_sorted = sorted(arr, reverse=True) # Take the first k elements since they will have the maximum sum max_sum = sum(arr_sorted[:k]) return max_sum"},{"question":"Given a list of integers, remove all odd elements from the list and return the modified list in sorted order. Example 1: Input: lst = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5] Output: [2, 4, 6] Explanation: The odd elements [3, 1, 5, 9, 5, 3, 5] are removed and the remaining even elements [4, 2, 6] are sorted to get [2, 4, 6]. Example 2: Input: lst = [7, 8, 7, 10, 5, 2] Output: [2, 8, 10] Explanation: The odd elements [7, 7, 5] are removed and the remaining even elements [8, 10, 2] are sorted to get [2, 8, 10]. Your Task: You dont need to read input or print anything. Complete the function removeOddsAndSort() which accepts a list of integers as input parameter and returns the modified list in sorted order. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(N). Constraints: 1 <= len(lst) <= 10^5 -10^9 <= lst[i] <= 10^9","solution":"def removeOddsAndSort(lst): Removes odd elements from the list and returns the modified list in sorted order. # Filter out odd numbers even_list = [x for x in lst if x % 2 == 0] # Sort the remaining even numbers even_list.sort() return even_list"},{"question":"A robotics company is designing a grid-based robot cleaner system. The grid is defined as an n times m matrix filled with integers where each cell value represents the amount of dirt in that cell. The robot has k types of cleaning tools available. Each tool can clean a specific pattern of cells in a 3 times 3 subgrid. A tool configuration is represented as an array of 9 integers (either 0 or 1), corresponding to the 3 times 3 subgrid, where 1 signifies that the cell in that position within the subgrid will be cleaned by that tool. The robot can pick any number of tools (including possibly overlapping tools) to clean the grid, but each tool can be used only once in a specific position. Given the grid and the tools, your task is to determine the minimum number of tools required to clean every cell in the grid completely or if it\'s impossible to do so. # Input - The first line contains three integers n, m, and k (1 le n, m le 20, 1 le k le 10) — the dimensions of the grid and the number of different tool types available. - The next n lines contain m integers each, where the j-th integer in the i-th line represents the dirt amount in cell (i, j). - The next k lines contain 9 integers each, representing the tools\' cleaning pattern. # Output - Output a single integer, the minimum number of tools required to clean the entire grid. - If it\'s impossible to clean the grid completely with the available tools, output -1. # Example Input ``` 4 4 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 ``` Output ``` 4 ``` Explanation In the given example, tools can be used in a way to cover the grid area as follows: - Using tool 1 that can clean the center cell of a 3 times 3 grid. - Using tool 2 that cleans all cells in the 3 times 3 grid. - Using tool 3 that cleans alternate cells in a 3 times 3 grid. Minimum number of tools used will be 4 by positioning them efficiently to cover the entire 4 times 4 grid. # Note - The 4 times 4 grid can be split into 3 times 3 overlapping subgrids to maximize the area cleaned by the available tools. - Each tool can be used only once in a specific position, but multiple tools can be used in overlapping positions to ensure complete coverage.","solution":"def min_tools_required(n, m, k, grid, tools): def apply_tool(grid, tool, x, y): for i in range(3): for j in range(3): if tool[i][j] == 1 and (0 <= x + i < n) and (0 <= y + j < m): grid[x + i][y + j] = 0 def is_clean(grid): return all(cell == 0 for row in grid for cell in row) def convert_tool(tool): return [tool[i:i + 3] for i in range(0, 9, 3)] tools = [convert_tool(tool) for tool in tools] import itertools min_tools_usage = float(\'inf\') found_solution = False for tool_comb in itertools.product(tools, repeat=((n - 3 + 1) * (m - 3 + 1))): local_grid = [row[:] for row in grid] tool_count = 0 for t_index in range(len(tool_comb)): i, j = divmod(t_index, m - 2) if i + 2 < n and j + 2 < m: apply_tool(local_grid, tool_comb[t_index], i, j) tool_count += 1 if is_clean(local_grid): min_tools_usage = min(min_tools_usage, tool_count) found_solution = True break if not found_solution: return -1 return min_tools_usage # Reading input data def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) k = int(data[2]) grid = [] index = 3 for _ in range(n): grid.append(list(map(int, data[index:index + m]))) index += m tools = [] for _ in range(k): tools.append(list(map(int, data[index:index + 9]))) index += 9 print(min_tools_required(n, m, k, grid, tools)) if __name__ == \\"__main__\\": main()"},{"question":"You are given a rectangular grid of N x M cells. Each cell of the grid contains either a \'0\' (an empty cell) or a \'1\' (a wall). The grid has exactly one entrance at the top-left corner (cell (1,1)) and exactly one exit at the bottom-right corner (cell (N, M)). You are allowed to move up, down, left, or right from one cell to another. Determine the minimum number of steps required to move from the entrance to the exit, without passing through any walls. If it is impossible to reach the exit, return -1. Input The first line contains two integers N and M (2 ≤ N, M ≤ 100), the number of rows and columns respectively. Each of the next N lines contains a string of M characters (\'0\' or \'1\'), representing the grid. Output Output a single integer representing the minimum number of steps to reach the exit, or -1 if it is impossible. Examples Input 3 3 000 010 000 Output 4 Input 3 3 010 111 000 Output -1","solution":"from collections import deque def min_steps_to_exit(grid): Determine the minimum number of steps required to move from the entrance to the exit. N = len(grid) M = len(grid[0]) # Check if the entrance or exit is a wall if grid[0][0] == \'1\' or grid[N-1][M-1] == \'1\': return -1 # Directions for moving up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Breadth-First Search (BFS) initialization queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() # If we\'ve reached the exit if row == N-1 and col == M-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and (new_row, new_col) not in visited and grid[new_row][new_col] == \'0\': queue.append((new_row, new_col, steps + 1)) visited.add((new_row, new_col)) return -1 def solve(N, M, grid): return min_steps_to_exit(grid)"},{"question":"Flatland is now extending its boundaries into three-dimensional space, making it a country called SpaceLand. SpaceLand has `n` cities, each of them is a point in this 3D space. The king Sphere IV has 27 sons and wants to give each son part of SpaceLand to govern. For that, he plans to draw six distinct planes, two of them parallel to the xy-plane, two parallel to the xz-plane, and the remaining two parallel to the yz-plane. None of these planes can go through any city. By these planes, SpaceLand will be divided into 27 parts, and each son will be allocated exactly one of these parts. Sphere IV, considering the characteristics and loyalty of his sons, has decided that the i-th son should receive the part of SpaceLand that contains exactly ai cities. Help Sphere IV find such six planes so that if SpaceLand is divided into 27 parts, the resulting parts can be allotted to his sons such that each i-th son gets the part with ai cities. Input The first line contains an integer `n` (27 ≤ n ≤ 10^5) — the number of cities in SpaceLand. Next `n` lines each contain three space-separated integers: `xi`, `yi`, `zi` (-10^9 ≤ `xi`, `yi`, `zi` ≤ 10^9) — the coordinates of the i-th city. No two cities occupy the same point. The last line contains 27 space-separated integers representing `a_i` values. Output If there is no solution, print a single integer `-1`. If there is a solution, print in the first line two distinct real space-separated numbers: `x1`, `x2` — the x-coordinates of the planes that are parallel to the yz-plane. In the second line, print two distinct real space-separated numbers: `y1`, `y2` — the y-coordinates of the planes that are parallel to the xz-plane. In the third line, print two distinct real space-separated numbers: `z1`, `z2` — the z-coordinates of the planes that are parallel to the xy-plane. If there are multiple solutions, print any of them. When the answer is being checked, a city is considered to lie on a plane if the distance between the city and the plane does not exceed `10^-6`. Two planes are considered the same if the distance between them does not exceed `10^-6`. Examples Input 27 1 1 1 1 1 2 1 1 3 1 2 1 1 2 2 1 2 3 1 3 1 1 3 2 1 3 3 2 1 1 2 1 2 2 1 3 2 2 1 2 2 2 2 2 3 2 3 1 2 3 2 2 3 3 3 1 1 3 1 2 3 1 3 3 2 1 3 2 2 3 2 3 3 3 1 3 3 2 3 3 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 Output 1.5 2.5 1.5 2.5 1.5 2.5 Note: The example given divides SpaceLand into 27 parts where each part has exactly one city.","solution":"def find_planes(n, cities, a): import itertools from collections import Counter # Sort and find unique x, y, z coordinates x_coords = sorted(set(city[0] for city in cities)) y_coords = sorted(set(city[1] for city in cities)) z_coords = sorted(set(city[2] for city in cities)) # Ensure we have enough unique coordinates if len(x_coords) < 3 or len(y_coords) < 3 or len(z_coords) < 3: return -1 x_planes = [x_coords[0] + (x_coords[1] - x_coords[0]) / 2, x_coords[1] + (x_coords[2] - x_coords[1]) / 2] y_planes = [y_coords[0] + (y_coords[1] - y_coords[0]) / 2, y_coords[1] + (y_coords[2] - y_coords[1]) / 2] z_planes = [z_coords[0] + (z_coords[1] - z_coords[0]) / 2, z_coords[1] + (z_coords[2] - z_coords[1]) / 2] # Group the cities into 27 parts partitions = Counter() for city in cities: x_part = 0 if city[0] < x_planes[0] else (1 if city[0] < x_planes[1] else 2) y_part = 0 if city[1] < y_planes[0] else (1 if city[1] < y_planes[1] else 2) z_part = 0 if city[2] < z_planes[0] else (1 if city[2] < z_planes[1] else 2) partitions[(x_part, y_part, z_part)] += 1 sorted_a = sorted(a) sorted_partitions = sorted(partitions.values()) # Verify if partitions match a values if sorted_a != sorted_partitions: return -1 return x_planes, y_planes, z_planes"},{"question":"A \\"Zigzag\\" sequence is a sequence of distinct integers such that the differences between successive numbers strictly alternate between positive and negative. For example, (1, 3, 2, 5, 4) is a Zigzag sequence because: - 3 - 1 = 2 (positive) - 2 - 3 = -1 (negative) - 5 - 2 = 3 (positive) - 4 - 5 = -1 (negative) Given an integer n, check if it is possible to create a Zigzag sequence of n distinct positive integers, and output one such sequence if it exists. -----Input----- The input consists of a single integer n (1 le n le 10^5). -----Output----- If it is possible to create a Zigzag sequence of n distinct positive integers, output n space-separated integers representing one such possible sequence. If not, output \\"impossible\\". -----Examples----- Sample Input 1: 5 Sample Output 1: 1 3 2 4 5 Sample Input 2: 2 Sample Output 2: 1 2 Sample Input 3: 1 Sample Output 3: 1 Sample Input 4: 4 Sample Output 4: impossible","solution":"def zigzag_sequence(n): if n == 1: return [1] if n == 2 or n == 4: return \\"impossible\\" result = [] for i in range(1, (n//2) + 1): result.append(i) if (2*i <= n): result.append(n - i + 1) if n % 2 == 1: result.append((n//2) + 1) return result"},{"question":"# Task Write a function to determine the minimum number of deletions required to make a given string a palindrome. A palindrome is a string that reads the same backward as forward. # Example For `input = \\"abca\\"`, the output should be `1`. For `input = \\"racecar\\"`, the output should be `0`. For `input = \\"google\\"`, the output should be `2`. # Input/Output - `[input]` string `str` Constraints: `1 ≤ str.length ≤ 1000` - `[output]` an integer The minimum number of deletions required to make the string a palindrome.","solution":"def min_deletions_to_palindrome(s): Returns the minimum number of deletions required to make the string \'s\' a palindrome. n = len(s) # Compute the length of the longest palindromic subsequence def longest_palindromic_subsequence(s): dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j]: if cl == 2: dp[i][j] = 2 else: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1] lps_length = longest_palindromic_subsequence(s) return n - lps_length"},{"question":"Task You are given a string representing a mathematical expression. The expression can contain: - Non-negative integers (e.g., 0, 123) - Basic arithmetic operators: `+`, `-`, `*`, and `/` - Parentheses `(` and `)` Write a function `evaluateExpression` that takes a string `expression` as its input and returns the result of evaluating this expression as a float rounded to two decimal places. You can assume the input is always a valid expression. For example: ``` evaluateExpression(\\"3 + 2 * 2\\") should return 7.00 evaluateExpression(\\"(1 + 2) * 4 - 3/2\\") should return 10.50 evaluateExpression(\\"10 + 0 * (3 / (1 + 2))\\") should return 10.00 ``` Implementation details: - Follow the correct order of operations: parentheses first, then multiplication and division, and finally addition and subtraction. - Handle potential division by zero issues gracefully, returning `None` or an appropriate error message in such a case. - Ensure that the result is rounded to two decimal places.","solution":"def evaluateExpression(expression): Evaluates a mathematical expression and returns the result rounded to two decimal places. try: # Evaluate the expression using Python\'s eval function result = eval(expression) # Check for division by zero if isinstance(result, float) and result == float(\'inf\'): return None # Return the result rounded to two decimal places return round(result, 2) except ZeroDivisionError: return None except Exception as e: return None"},{"question":"The wizarding school Hogwarts is undergoing some reorganization. You\'ve been tasked with sorting the students\' records in an orderly fashion. The record is a list that contains the name and house of each student. Given the list of students, your task is to sort it in ascending order by house. If two students are from the same house, sort them alphabetically by their first name. **Input** - The first line contains a single integer n (1 ≤ n ≤ 1000) – the number of students. - The next n lines contain two space-separated strings, name and house, where name is the student\'s name (a string that contains only uppercase and lowercase English letters and has length between 1 and 100), and house is the name of the house (a string containing only uppercase and lowercase English letters and has length between 1 and 100). **Output** - Output n lines, where each line contains a student\'s name and their house, sorted by house and then by name. **Example** ``` Input 5 Harry Gryffindor Hermione Gryffindor Ron Gryffindor Draco Slytherin Cedric Hufflepuff Output Harry Gryffindor Hermione Gryffindor Ron Gryffindor Cedric Hufflepuff Draco Slytherin ``` **Note** In the provided example, first, the students are sorted by their house: - Gryffindor: Harry, Hermione, Ron - Hufflepuff: Cedric - Slytherin: Draco Then, within each house, they are sorted by their names alphabetically: - Gryffindor: Harry, Hermione, Ron - Hufflepuff: Cedric - Slytherin: Draco","solution":"def sort_students(records): Sorts the list of student records first by their house, and then by their name. sorted_records = sorted(records, key=lambda x: (x[1], x[0])) return sorted_records # Example usage: # records = [ # (\\"Harry\\", \\"Gryffindor\\"), # (\\"Hermione\\", \\"Gryffindor\\"), # (\\"Ron\\", \\"Gryffindor\\"), # (\\"Draco\\", \\"Slytherin\\"), # (\\"Cedric\\", \\"Hufflepuff\\") # ] # sorted_students = sort_students(records) # for student in sorted_students: # print(f\'{student[0]} {student[1]}\')"},{"question":"You are given an n times n grid. Each cell of the grid can either be empty (represented by \'.\'), blocked (represented by \'#\'), or contain a wormhole (represented by a lowercase letter). Each lowercase letter represents a unique wormhole and each letter appears exactly twice in the grid. Entering one wormhole and exiting the other takes no time. You need to find the shortest path from the top-left cell (0, 0) to the bottom-right cell (n-1, n-1). You can move up, down, left, right, and using wormholes. If it\'s not possible to reach the bottom-right cell, return -1. -----Input----- The input consists of a single test case. The first line contains an integer n (1 leq n leq 50). The following n lines contain n characters each representing the grid. It is guaranteed that the top-left and bottom-right cells are empty. -----Output----- Output a single integer which is the length of the shortest path from the top-left cell to the bottom-right cell or -1 if there is no such path. -----Examples----- Sample Input 1: 4 .... .#a. a# .... Sample Output 1: 6 Sample Input 2: 3 .#. # ... Sample Output 2: -1","solution":"from collections import deque, defaultdict def shortest_path(grid): n = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (0, 0) end = (n-1, n-1) wormholes = defaultdict(list) for i in range(n): for j in range(n): if grid[i][j].isalpha(): wormholes[grid[i][j]].append((i, j)) queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] != \'#\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) if grid[x][y].isalpha(): for wx, wy in wormholes[grid[x][y]]: if (wx, wy) != (x, y) and (wx, wy) not in visited: visited.add((wx, wy)) queue.append((wx, wy, dist)) # Clear the wormholes once used wormholes[grid[x][y]] = [] return -1"},{"question":"A company manufactures rectangular metal plates of uniform thickness and weight. Each plate has a height H and a width W. The plates are initially positioned at coordinates (0, 0) such that their sides are aligned with the X and Y axes. The plates can be rotated around their bottom-left corner and placed on the coordinate plane. To efficiently store these plates, the company wants to rotate them and place them in a way that they take up the least amount of space on both axes. Specifically, they aim to minimize the maximum x-coordinate and the maximum y-coordinate occupied by any plate. You are given a list of plates with their respective dimensions. Write a program that computes the minimal maximum x-coordinate and the minimal maximum y-coordinate needed to store all plates if they can be rotated. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of plates. Next, n lines follow, each containing two integers Hi and Wi (1 ≤ Hi, Wi ≤ 1000), representing the height and width of the i-th plate. Output Print two integers, representing the minimal maximum x-coordinate and the minimal maximum y-coordinate to store all plates. Examples Input 3 2 3 3 2 1 4 Output 4 3 Input 2 5 7 3 10 Output 10 5","solution":"def minimal_max_coordinates(n, plates): max_width = 0 max_height = 0 for height, width in plates: max_width = max(max_width, max(width, height)) max_height = max(max_height, min(width, height)) return max_width, max_height def store_plates(n, plate_dimensions): max_w = 0 max_h = 0 for h, w in plate_dimensions: if h > w: h, w = w, h max_w = max(max_w, w) max_h = max(max_h, h) return max_w, max_h"},{"question":"Reverse words in a string A string is a sequence of characters, and sometimes we need to reverse the order of words within a string while keeping the characters in each word in the original order. Implement a function that reverses the words in a given string. Examples ``` reverseWords(\\"Hello World\\") ==> \\"World Hello\\" reverseWords(\\"Coding is fun\\") ==> \\"fun is Coding\\" reverseWords(\\"OpenAI GPT-3\\") ==> \\"GPT-3 OpenAI\\" reverseWords(\\"racecar level\\") ==> \\"level racecar\\" ```","solution":"def reverseWords(s): Returns the input string s with the words reversed. return \' \'.join(s.split()[::-1])"},{"question":"The function `most_frequent_character` takes a string `s` as input and returns the most frequently occurring character in the string. If there is a tie, it returns the lexicographically smallest character among the ones with the highest frequency. Write a program to define the function `most_frequent_character`. -----Input----- Input will consist of a single line containing a string `s` (1 le |s| le 10^5) comprising only lowercase English letters. -----Output----- The output should be a single lowercase letter, the most frequent character in the input string. If there is a tie, return the lexicographically smallest character. -----Examples----- Sample Input: abracadabra Sample Output: a","solution":"def most_frequent_character(s): Returns the most frequently occurring character in the string `s`. If there is a tie, returns the lexicographically smallest character with the highest frequency. from collections import Counter # Count frequency of each character frequency = Counter(s) # Find the maximum frequency max_freq = max(frequency.values()) # Find all characters with the maximum frequency candidates = [char for char, freq in frequency.items() if freq == max_freq] # Return the lexicographically smallest character among the candidates return min(candidates)"},{"question":"Problem Statement: You are given a maze represented as a 2D grid of size `N x M`. The grid consists of three types of cells: - `0` represents an open path - `1` represents a wall - `S` represents the starting position - `E` represents the exit You can move one step at a time in four possible directions: up, down, left, or right. Your task is to determine whether there exists a path from the starting position `S` to the exit `E` such that you do not pass through any walls (`1`). Write a program that outputs \\"YES\\" if there exists a path, and \\"NO\\" otherwise. Input Constraints: - `1 ≤ N, M ≤ 500` - The grid will always contain exactly one `S` and one `E`. Input Format: - The first line contains two integers `N` and `M` representing the number of rows and columns in the grid. - Then follow `N` lines, each containing `M` characters (`0`, `1`, `S`, or `E`), representing the grid. Output Format: - Print \\"YES\\" if there exists a path from `S` to `E`, else print \\"NO\\". Sample Input 1: ``` 5 5 11000 S0100 00010 01110 0000E ``` Sample Output 1: ``` YES ``` Sample Input 2: ``` 3 3 S10 110 001E ``` Sample Output 2: ``` NO ``` Explanation: In the first example, there is a path from `S` to `E`: right -> down -> down -> right -> right -> up -> up. In the second example, there is no possible path from `S` to `E` respecting the constraints.","solution":"from collections import deque def is_path_exists(N, M, grid): # Find the starting position \'S\' and the exit position \'E\' start = None end = None for i in range(N): for j in range(M): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'E\': end = (i, j) if not start or not end: return \\"NO\\" # Directions for moving up, left, down, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS initialization queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] != \'1\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Alice loves playing with colored beads arranged on a string. She has a string of n beads, where each bead is represented by an uppercase English letter (\'A\' to \'Z\'), indicating its color. Alice\'s favorite activity is to identify the longest contiguous sub-string that contains beads of only two unique colors. Given a string of n beads, help Alice find the length of the longest contiguous sub-string that contains beads of exactly two different colors. Input The first line contains an integer n (2 ≤ n ≤ 100,000), the number of beads. The second line contains a string of n uppercase English letters, representing the colors of the beads. Output Print a single integer — the length of the longest contiguous sub-string that contains beads of exactly two different colors. Examples Input 10 AABBBCBBBA Output 7 Input 6 ABCABC Output 2 Note In the first sample, you can choose the sub-strings \\"AABBBCB\\", \\"ABBBCBB\\", or \\"BBCBBBA\\", each of which has length 7 and contains exactly two different bead colors. In the second sample, the longest contiguous sub-strings that contain beads of exactly two different colors are \\"AB\\", \\"BC\\", or \\"CA\\", each of length 2.","solution":"def longest_substring_two_colors(n, beads): max_len = 0 left = 0 color_count = {} for right in range(n): if beads[right] in color_count: color_count[beads[right]] += 1 else: color_count[beads[right]] = 1 while len(color_count) > 2: color_count[beads[left]] -= 1 if color_count[beads[left]] == 0: del color_count[beads[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"Create a function ```python valid_ip_with_subnet(ip) ``` that takes a string `ip` as an input and returns `True` if it is a valid IPv4 address with subnet mask, otherwise returns `False`. A valid IPv4 address with subnet mask is represented as `x.x.x.x/y` where `x` is a number between 0 and 255 and `y` is a number between 0 and 32. E.g. ```python valid_ip_with_subnet(\\"192.168.1.1/24\\"); // true valid_ip_with_subnet(\\"256.256.256.256/33\\"); // false valid_ip_with_subnet(\\"192.168.1.1/-1\\"); // false valid_ip_with_subnet(\\"192.168.1.256/24\\"); // false valid_ip_with_subnet(\\"192.168.1.1/\\"); // false ```","solution":"def valid_ip_with_subnet(ip): Returns True if the input string is a valid IPv4 address with subnet mask, otherwise returns False. try: parts = ip.split(\'/\') if len(parts) != 2: return False ip_part, subnet_part = parts[0], parts[1] # Check if subnet part is valid subnet = int(subnet_part) if subnet < 0 or subnet > 32: return False # Check if IP part is valid ip_parts = ip_part.split(\'.\') if len(ip_parts) != 4: return False for part in ip_parts: num = int(part) if num < 0 or num > 255: return False return True except (ValueError, TypeError): return False"},{"question":"You are managing a Smart Home system where various devices are connected in a network. Each device is represented by a unique ID number, and there are several connections between pairs of devices indicating they can directly communicate with each other. In a time of crisis, it may be necessary to send an alert message to all devices from a central device. For the purpose of this problem, the devices and their connections form an undirected graph. Your task is to determine the maximum number of devices that can receive the alert message if the alert is sent from any single device. The alert can only propagate from one device to another if there is a direct connection between them. ----- Input ------ The first line of input contains a single integer T — the number of test cases. For each test case, the first line contains two integers N and M — the number of devices and the number of direct connections between them respectively. Each of the next M lines contains two integers A and B — indicating that there is a direct connection between device A and device B. ----- Output ------ For each test case, output a single line containing a single integer — the maximum number of devices that can receive the alert message if the alert is sent from any single device. ----- Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 0 ≤ M ≤ 2 × 10^5 1 ≤ A, B ≤ N ----- Example Input 1 ------ 2 4 2 1 2 3 4 5 4 1 2 2 3 3 4 4 5 ----- Example Output 1 ------ 2 5 ----- Explanation 1 ------ In test case 1, the devices form two separate components: {1, 2} and {3, 4}. Therefore, the maximum number of devices that can receive the alert message from any single device is 2. In test case 2, all the devices are connected forming a single component: {1, 2, 3, 4, 5}. Therefore, the maximum number of devices that can receive the alert message from any single device is 5.","solution":"from collections import defaultdict, deque def find_largest_connected_component(n, edges): def bfs(start, visited): queue = deque([start]) visited[start] = True count = 1 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) count += 1 return count graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) max_devices = 0 for i in range(1, n + 1): if not visited[i]: component_size = bfs(i, visited) max_devices = max(max_devices, component_size) return max_devices def max_devices_receive_alert(T, cases): results = [] for case in cases: n, m, edges = case results.append(find_largest_connected_component(n, edges)) return results"},{"question":"Given an array of integers `nums`, return the length of the longest consecutive elements sequence. A consecutive sequence is defined as a set of numbers where each number is exactly 1 greater than the previous number in the sequence. The sequence must also be consecutive in index order in the original array. For example: Input: nums = [1, 3, 5, 6, 7, 4, 8, 2, 0, 10, 11] Output: 4 Explanation: The longest consecutive sequence is [1, 3, 5, 6] with length 4. Input: nums = [100, 4, 200, 1, 3, 2] Output: 4 Explanation: The longest consecutive sequence is [1, 3, 2, 4] with length 4. Constraints: * 0 <= nums.length <= 10000 * -10^6 <= nums[i] <= 10^6","solution":"def longest_consecutive(nums): Returns the length of the longest consecutive elements sequence in the list \'nums\'. if not nums: return 0 nums = set(nums) # Remove duplicates and sort the array longest_streak = 0 for num in nums: # Only start sequences from the smallest numbers if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Given a binary tree, implement a function to check if the tree is a mirror of itself (i.e., symmetric around its center). -----Input----- The input is given as a sequence of integers representing the nodes of a binary tree level by level, where the value -1 indicates the absence of a node. The first element of the sequence is the root node, and subsequent elements represent the nodes from top to bottom, left to right. -----Output----- The output should be a boolean value: true if the tree is symmetric, and false otherwise. -----Example----- Sample Input 1: 1 2 2 3 4 4 3 Sample Output 1: true Sample Input 2: 1 2 2 -1 3 -1 3 Sample Output 2: false -----Notes----- Input elements are separated by spaces. The initial input (root) is always guaranteed not to be -1. Function signature: ```python def is_symmetric_tree(nodes: List[int]) -> bool: # Your code here ```","solution":"from typing import List, Optional class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def is_symmetric_tree(nodes: List[int]) -> bool: if not nodes: return True # Helper function to convert the list of nodes into a binary tree def create_tree(index: int) -> Optional[TreeNode]: if index >= len(nodes) or nodes[index] == -1: return None root = TreeNode(nodes[index]) root.left = create_tree(2 * index + 1) root.right = create_tree(2 * index + 2) return root root = create_tree(0) # Helper function to check if two trees are mirror images def is_mirror(t1: Optional[TreeNode], t2: Optional[TreeNode]) -> bool: if t1 is None and t2 is None: return True if t1 is None or t2 is None: return False return (t1.val == t2.val) and is_mirror(t1.right, t2.left) and is_mirror(t1.left, t2.right) return is_mirror(root, root)"},{"question":"A string is considered balanced if the absolute difference between the number of occurrences of \'a\' and \'b\' in the string is no more than 1. Given a string consisting of only characters \'a\' and \'b\', determine if it is balanced or not. -----Input----- The first line of the input contains an integer t (1 leq t leq 1000) — the number of testcases. The description of each test case follows, each consisting of one line containing a string of characters \'a\' and \'b\' with length up to 10^5. -----Output----- Output t lines, each of which contains the answer to the corresponding test case. Output \\"BALANCED\\" if the given string is balanced, and \\"UNBALANCED\\" otherwise. You can output the answer in any case (for example, the strings \\"BalaNceD\\", \\"balanced\\", \\"BALANCED\\" and \\"balanCed\\" will be recognized as a positive answer). -----Examples----- Input 4 abaa aabb abb a Output BALANCED BALANCED UNBALANCED BALANCED -----Note----- In the first test case, the count of \'a\' is 3 and the count of \'b\' is 1. The absolute difference is |3 - 1| = 2, which is more than 1, so the answer is \\"UNBALANCED\\". In the second test case, the count of \'a\' is 2 and the count of \'b\' is 2. The absolute difference is |2 - 2| = 0, which is no more than 1, so the answer is \\"BALANCED\\". In the third test case, the count of \'a\' is 1 and the count of \'b\' is 2. The absolute difference is |1 - 2| = 1, which is no more than 1, so the answer is \\"BALANCED\\". In the fourth test case, the count of \'a\' is 1 and the count of \'b\' is 0. The absolute difference is |1 - 0| = 1, which is no more than 1, so the answer is \\"BALANCED\\".","solution":"def is_balanced(string): Determines if the string is balanced. A string is considered balanced if the absolute difference between the number of occurrences of \'a\' and \'b\' is no more than 1. count_a = string.count(\'a\') count_b = string.count(\'b\') return abs(count_a - count_b) <= 1 def process_test_cases(test_cases): Processes the list of test cases and returns a list of results. results = [] for tc in test_cases: if is_balanced(tc): results.append(\\"BALANCED\\") else: results.append(\\"UNBALANCED\\") return results"},{"question":"You are given a sequence of 0s and 1s of length N. Your task is to determine the minimum number of operations required to make the sequence an alternating sequence. An alternating sequence is a sequence where no two consecutive elements are the same, i.e., it follows the pattern 010101... or 101010.... In one operation, you can change any element in the sequence (from 0 to 1 or from 1 to 0). Return the minimum number of operations required. -----Constraints----- - 1 ≤ N ≤ 10^5 -----Input----- The input is given from Standard Input in the following format: N S -----Output----- Print the minimum number of operations required to make the sequence an alternating sequence. -----Sample Input----- 5 11100 -----Sample Output----- 2 Explanation: To change the sequence to an alternating sequence, you can do the following operations: - Change the first \'1\' to \'0\': 01100 - Change the fourth \'0\' to \'1\': 01101 So the sequence 11100 can be changed to 01101 or 10101 in just 2 operations.","solution":"def min_operations_to_alternating_sequence(N, S): Returns the minimum number of operations required to make the sequence an alternating sequence. pattern1 = \'01\' * (N // 2) + \'0\' * (N % 2) pattern2 = \'10\' * (N // 2) + \'1\' * (N % 2) operations1 = sum(S[i] != pattern1[i] for i in range(N)) operations2 = sum(S[i] != pattern2[i] for i in range(N)) return min(operations1, operations2) # Example usage N = 5 S = \\"11100\\" print(min_operations_to_alternating_sequence(N, S)) # Output: 2"},{"question":"Given is an integer M. Determine whether there is a pair of positive integers (X, Y) such that X^2 + 7^Y = M, and find one such pair if it exists. -----Constraints----- - 1 leq M leq 10^{18} - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: M -----Output----- If there is no pair (X, Y) that satisfies the condition, print -1. If there is such a pair, print X and Y of one such pair with space in between. If there are multiple such pairs, any of them will be accepted. -----Sample Input----- 50 -----Sample Output----- 1 2 We have 1^2 + 7^2 = 1 + 49 = 50, so (X, Y) = (1, 2) satisfies the condition.","solution":"def find_pair(M): Determine whether there is a pair of positive integers (X, Y) such that X^2 + 7^Y = M. If such a pair exists, return one such pair (X, Y). Otherwise, return -1. y = 1 while True: power_of_7 = 7 ** y if power_of_7 >= M: return -1 difference = M - power_of_7 x = int(difference ** 0.5) if x > 0 and x * x == difference: return x, y y += 1 # Read input if __name__ == \\"__main__\\": M = int(input().strip()) result = find_pair(M) if result == -1: print(result) else: print(result[0], result[1])"},{"question":"You are given an array of integers and a target value. Your goal is to determine whether there are three distinct numbers in the array that add up to the target value. If there are such numbers, print \\"YES\\". Otherwise, print \\"NO\\". Input The first line contains an integer t (1 <= t <= 100), the number of test cases. Each of the next t lines contains an integer n (3 <= n <= 1000), the size of the array, followed by n integers representing the elements of the array. The last integer in each test case line is the target sum. Output For each test case, output \\"YES\\" if there are three distinct numbers in the array that add up to the target value. Otherwise, print \\"NO\\". Example Input: 2 5 1 2 3 4 5 9 4 1 2 3 4 10 Output: YES NO","solution":"def three_sum_target(t, test_cases): results = [] for case in test_cases: n = case[0] array = case[1:-1] target = case[-1] found = False array.sort() for i in range(n - 2): if i > 0 and array[i] == array[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = array[i] + array[left] + array[right] if current_sum == target: found = True break elif current_sum < target: left += 1 else: right -= 1 if found: break results.append(\\"YES\\" if found else \\"NO\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] for line in input_lines[1:]: test_cases.append(list(map(int, line.split()))) return t, test_cases"},{"question":"A popular e-commerce platform is holding a special event where they offer unique promotional discounts to customers. Each customer receives a random discount percentage between 0 and 100 (inclusive). The company wants to calculate the final price a customer has to pay after applying the discount, rounded to the nearest dollar. The final price should never be less than 1, regardless of the discount applied. You are given the original price of the items and the discount percentage applied. Write a function to calculate the final price for each customer. -----Input Format----- - The first line contains an integer N, the number of customers. - The next N lines each contain an integer P and an integer D, the original price before discount and the discount percentage respectively. -----Output Format----- - For each customer, print the final price they need to pay, each on a new line. -----Constraints----- - 1 leq N leq 100000 - 1 leq P leq 10^6 - 0 leq D leq 100 -----Sample Input----- 3 100 20 50 50 10 90 -----Sample Output----- 80 25 1","solution":"def calculate_final_price(n, price_discount_pairs): results = [] for p, d in price_discount_pairs: discounted_price = round(p * (1 - d / 100)) final_price = max(discounted_price, 1) results.append(final_price) return results"},{"question":"You are given a list of N integers. Your task is to partition this list into two non-empty sublists in such a way that the absolute difference between the sum of the elements of these sublists is the smallest possible. For example, if the given list is [7, 3, 2, 5, 8], one optimal partition would be [7, 3, 2] and [5, 8], which has a difference of |(7+3+2) - (5+8)| = 1. Your task is to find the smallest possible difference and provide the sums of the two partitions which result in this difference. # Input - The first line of input contains an integer T, the number of test cases. - For each test case, the first line contains the integer N, the size of the list. - The second line contains N space-separated integers representing the list. # Output For each test case, output a single line containing the smallest difference followed by the sums of the two partitions that result in this difference. # Constraints - 1 ≤ T ≤ 10 - 2 ≤ N ≤ 20 - 0 ≤ list elements ≤ 1000 # Sample Input ``` 1 5 7 3 2 5 8 ``` # Sample Output ``` 1 12 13 ``` # Explanation For the given input list [7, 3, 2, 5, 8], the best partition is [7, 3, 2] and [5, 8], which results in the sums 12 and 13, respectively. The absolute difference between these sums is |12 - 13| = 1. The output format is: smallest difference, followed by the sums of the two sublists resulting in this difference.","solution":"from itertools import combinations def find_min_partition_difference(arr): total_sum = sum(arr) half_sum = total_sum / 2 n = len(arr) min_diff = float(\'inf\') best_partition = (0, 0) for i in range(1, n): for comb in combinations(arr, i): curr_sum = sum(comb) diff = abs(total_sum - 2 * curr_sum) if diff < min_diff: min_diff = diff best_partition = (curr_sum, total_sum - curr_sum) return min_diff, best_partition[0], best_partition[1] def process_test_cases(test_cases): results = [] for test in test_cases: n, arr = test min_diff, sum1, sum2 = find_min_partition_difference(arr) results.append(f\\"{min_diff} {sum1} {sum2}\\") return results def main(input_data): data = input_data.strip().split(\'n\') T = int(data[0]) test_cases = [] index = 1 for _ in range(T): n = int(data[index]) arr = list(map(int, data[index + 1].split())) test_cases.append((n, arr)) index += 2 results = process_test_cases(test_cases) return \\"n\\".join(results)"},{"question":"In a software company, a team of developers uses a special logging tool to trace the execution flow of their programs. The logging tool generates a sequence of strings representing function calls and their corresponding completions. Each string is either the name of a function being called or \\"end\\" indicating the last called function has ended. The developers want to analyze the log to determine the maximum depth of nested function calls that occurred during the program\'s execution. For example, given the log: ``` foo bar baz end end boo end end ``` This corresponds to the following nested structure: ``` foo bar baz boo ``` The maximum depth of nested function calls is 3. # Input A single integer n (1 ≤ n ≤ 10^6), the number of log entries, followed by n lines, each containing a string. The string is either a function name (only lowercase letters) or \\"end\\". # Output A single integer representing the maximum depth of nested function calls. # Example Input: ``` 5 foo bar end baz end ``` Output: ``` 2 ``` Input: ``` 8 foo bar baz end end boo end end ``` Output: ``` 3 ``` Input: ``` 3 a b end ``` Output: ``` 2 ``` Note: In the first example, the `maximum depth` is `2` because `foo` calls `bar` (nested depth 2). In the second example, the `maximum depth` is `3` because `foo` calls `bar` which calls `baz` (nested depth 3). In the third example, the `maximum depth` is `2` because `a` calls `b`.","solution":"def max_nested_depth(n, logs): Calculate the maximum nested depth of function calls in the provided logs. Parameters: n (int): The number of log entries. logs (list): A list of strings representing the log entries. Returns: int: The maximum depth of nested function calls. max_depth = 0 current_depth = 0 for entry in logs: if entry == \\"end\\": current_depth -= 1 else: current_depth += 1 max_depth = max(max_depth, current_depth) return max_depth"},{"question":"Given a list of non-negative integers, your task is to develop a function `multiplyListElements()` that takes in the list and an integer factor as input parameters. The function should return a new list where each element is the original element multiplied by the factor. Example 1: Input: list: [1, 2, 3, 4, 5] factor: 3 Output: [3, 6, 9, 12, 15] Explanation: Each element in the list [1, 2, 3, 4, 5] is multiplied by 3 to get [3, 6, 9, 12, 15]. Example 2: Input: list: [0, 1, 2, 3] factor: 5 Output: [0, 5, 10, 15] Explanation: Each element in the list [0, 1, 2, 3] is multiplied by 5 to get [0, 5, 10, 15]. Your task: You do not need to read input or print anything. Complete the function `multiplyListElements()` that takes the list of integers and an integer factor as input parameters and returns the list of elements after multiplying each by the factor. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1. The length of the list is in the range [1, 10^5]. 2. The element values of the list are in the range [0, 10^4]. 3. The factor is a non-negative integer and is in the range [0, 10^4].","solution":"def multiplyListElements(lst, factor): Multiplies each element of the list by the given factor. Parameters: lst (list of int): List of non-negative integers. factor (int): Non-negative integer factor. Returns: list of int: New list with each element multiplied by the factor. return [element * factor for element in lst]"},{"question":"Given an array of integers, your task is to complete the function `rotateArray` that rotates the array to the right by `k` steps. For example, with array [1, 2, 3, 4, 5, 6, 7] and k=3, the result should be [5, 6, 7, 1, 2, 3, 4]. You are required to complete the function `rotateArray` that takes two arguments: the array to be rotated and an integer `k` that indicates the number of steps to rotate. # Example 1: **Input:** ``` arr = [1, 2, 3, 4, 5, 6, 7] k = 3 ``` **Output:** ``` [5, 6, 7, 1, 2, 3, 4] ``` **Explanation:** Rotate steps 1: [7, 1, 2, 3, 4, 5, 6] Rotate steps 2: [6, 7, 1, 2, 3, 4, 5] Rotate steps 3: [5, 6, 7, 1, 2, 3, 4] # Example 2: **Input:** ``` arr = [1, 2, 3] k = 4 ``` **Output:** ``` [3, 1, 2] ``` **Explanation:** Rotate steps 1: [3, 1, 2] Rotate steps 2: [2, 3, 1] Rotate steps 3: [1, 2, 3] Rotate steps 4: [3, 1, 2] # Constraints: - 1 <= length of arr <= 100 - 0 <= k < 100 # Your Task: Complete the function `rotateArray(arr, k)` which takes an array of integers and an integer `k` as input parameters and returns the rotated array. # Expected Time Complexity: O(N), where N is the length of the array. # Expected Auxiliary Space: O(1)","solution":"def rotateArray(arr, k): Rotates the array to the right by k steps. Args: arr (list of int): The array to be rotated. k (int): The number of steps to rotate the array. Returns: list of int: The rotated array. n = len(arr) k = k % n # In case k is larger than the size of the array return arr[-k:] + arr[:-k]"},{"question":"Create a program that processes a sequence of operations on a list according to given instructions. Each instruction modifies the state of the list in a specified manner. You start with an empty list and perform a series of operations. Each operation is specified by an instruction keyword followed by one or more parameters. Your task is to simulate the list operations and produce the result of the state of the list after performing all instructions. The available operations are: 1. **append x**: Add the integer x to the end of the list. 2. **insert i x**: Insert the integer x at position i in the list. Positions are 0-based. 3. **remove x**: Remove the first occurrence of the integer x from the list. 4. **pop**: Remove the last element from the list. 5. **reverse**: Reverse the order of the list. 6. **extend [x1, x2, ..., xn]**: Extend the list by appending elements from the list [x1, x2, ..., xn]. Input: - The first line contains an integer n, the number of operations (1 ≤ n ≤ 1000). - Each of the next n lines contains one of the instructions listed above. Output: - Print the final state of the list after performing all the operations as a space-separated sequence of integers. If the list is empty, print \\"Empty\\". Example: ``` Input 6 append 3 append 4 insert 1 5 remove 3 reverse extend [6, 7] Output 7 6 4 5 ``` Example: ``` Input 4 append 2 append 3 pop remove 2 Output Empty ``` Explanation: In the first example, the list starts as `[]`. Operations are performed step-by-step: 1. `append 3` => `[3]` 2. `append 4` => `[3, 4]` 3. `insert 1 5` => `[3, 5, 4]` 4. `remove 3` => `[5, 4]` 5. `reverse` => `[4, 5]` 6. `extend [6, 7]` => `[4, 5, 6, 7]` After performing all operations, the final state of the list is `[4, 5, 6, 7]`. In the second example, after all operations, the list becomes empty.","solution":"def process_list_operations(n, operations): lst = [] for operation in operations: if operation.startswith(\'append\'): _, x = operation.split() lst.append(int(x)) elif operation.startswith(\'insert\'): _, i, x = operation.split() lst.insert(int(i), int(x)) elif operation.startswith(\'remove\'): _, x = operation.split() lst.remove(int(x)) elif operation == \'pop\': if lst: lst.pop() elif operation == \'reverse\': lst.reverse() elif operation.startswith(\'extend\'): _, elems = operation.split(\' \', 1) elems = eval(elems) lst.extend(elems) return lst if lst else \'Empty\'"},{"question":"You are tasked with creating a software application for a large logistics company. The company operates in a city with n intersections and some bidirectional roads connecting certain pairs of intersections. Each road has a positive integer length, representing the time it takes to travel between the intersections it connects. Your goal is to design a program that computes the minimum time required for a delivery truck to travel between any two intersections in the city. To achieve this, you will implement an algorithm that determines the shortest paths between all pairs of intersections. The city’s map is represented as a weighted graph where intersections are nodes and roads are edges with weights. Input The first line contains an integer n (2 ≤ n ≤ 500) — the number of intersections. The second line contains an integer m (1 ≤ m ≤ n*(n-1)/2) — the number of bidirectional roads. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000). This indicates that there is a road connecting intersections u and v with time length w. Output Output an n x n matrix where the element at the i-th row and j-th column represents the minimum time required for a delivery truck to travel from intersection i to intersection j. If there is no path from intersection i to intersection j, output -1 for that entry. Examples Input 4 4 1 2 3 2 3 4 3 4 2 4 1 5 Output 0 3 7 5 3 0 4 6 7 4 0 2 5 6 2 0 Input 3 3 1 2 2 2 3 3 3 1 4 Output 0 2 5 2 0 3 4 3 0","solution":"def floyd_warshall(n, roads): # Initialize the distance matrix with inf and 0s for self-loops dist = [[float(\'inf\')] * n for _ in range(n)] for i in range(n): dist[i][i] = 0 # Populate the initial distances based on given roads for u, v, w in roads: dist[u-1][v-1] = w dist[v-1][u-1] = w # Floyd-Warshall algorithm to find shortest paths for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] # Replace inf with -1 to indicate no path for i in range(n): for j in range(n): if dist[i][j] == float(\'inf\'): dist[i][j] = -1 return dist # Example to demonstrate usage def main(): n = 4 m = 4 roads = [ (1, 2, 3), (2, 3, 4), (3, 4, 2), (4, 1, 5) ] result = floyd_warshall(n, roads) for row in result: print(\' \'.join(map(str, row))) if __name__ == \\"__main__\\": main()"},{"question":"Jenna is trying to arrange her book collection on a shelf such that they are in increasing order of their heights. Each book has a unique height. She can only swap two books if they are adjacent to each other on the shelf. She wants to know the minimum number of adjacent swaps needed to sort the array of book heights in increasing order. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of books. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 1000) — the heights of the books. -----Output----- Print a single integer — the minimum number of adjacent swaps needed to sort the array of book heights in increasing order. -----Examples----- Input 3 3 1 2 Output 2 Input 4 4 3 2 1 Output 6 Input 5 1 2 3 4 5 Output 0 -----Note----- In the first sample, Jenna can swap the first and second books, resulting in the sequence [1, 3, 2], and then swap the second and third books to get the sequence [1, 2, 3]. In the second sample, Jenna needs to swap the first and second books, then the second and third books, and finally the third and fourth books to achieve the sorted sequence. She repeats this process for each subsequent unsorted part of the sequence. In the third sample, the books are already sorted, so no swaps are needed.","solution":"def min_adjacent_swaps_to_sort(n, heights): Returns the minimum number of adjacent swaps needed to sort the array of book heights. swaps = 0 # Implementing bubble sort to count the number of swaps. heights = list(heights) # Make sure heights can be modified if it\'s a tuple for i in range(n): for j in range(n - i - 1): if heights[j] > heights[j + 1]: heights[j], heights[j + 1] = heights[j + 1], heights[j] swaps += 1 return swaps"},{"question":"Sarah has just joined a software company and is learning about recursive algorithms. Her mentor has given her a task to practice her understanding. The task is to write a function that computes the factorial of a number n, where 0 ≤ n ≤ 12. She writes the recursive function but faces issues when handling edge cases and larger values. Can you help Sarah by writing a function that calculates the factorial iteratively? Input The input consists of several test cases. The first line contains the number of test cases (t). Each of the following t lines contains a single integer n. Output For each input, print the factorial of the given number. Example Input: 3 0 5 10 Output: 1 120 3628800 Constraints: - 1 ≤ t ≤ 15 - 0 ≤ n ≤ 12","solution":"def factorial(n): Returns the factorial of a given number n. if n < 0 or n > 12: raise ValueError(\\"n should be in the range 0 ≤ n ≤ 12\\") result = 1 for i in range(2, n+1): result *= i return result def compute_factorials(test_cases): Computes factorials for a list of test cases. :param test_cases: List of integers :return: List of factorials corresponding to the input numbers return [factorial(n) for n in test_cases]"},{"question":"Write a function that receives a list of integers and returns the length of the longest increasing subsequence (LIS). The sequence does not need to be consecutive, and the elements can be in any order. Examples ```python longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # the LIS is [2, 3, 7, 101] longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 # the LIS is [0, 1, 2, 3] longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1 # the LIS is [7] ``` Note - You can assume that the input list will have at least one element and at most 2500 elements. - The integers in the list can be either positive or negative. HINT: Dynamic programming can be used to solve this problem efficiently.","solution":"def longest_increasing_subsequence(nums): Returns the length of the longest increasing subsequence in the list of integers. if not nums: return 0 n = len(nums) dp = [1] * n # Each element is an increasing subsequence of length 1 by itself. for i in range(n): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are working on a project that involves analyzing network traffic data. One of the tasks is to identify potential anomalies in the data based on the frequency of network requests. To do this, you need to write a program that finds the top K most frequent network requests from a given list of network requests. Each network request is represented as a string, and the list of network requests may contain duplicates. Your task is to find the top K most frequent network requests and return them in descending order of their frequencies. If there are multiple requests with the same frequency, they should be sorted lexicographically. Input The first line contains two integers: N (the total number of network requests) and K (the number of top frequent requests to return). The next N lines each contain a network request string. Output Output the top K most frequent network requests in descending order of their frequency. If multiple requests have the same frequency, sort them lexicographically. Constraints 1 ≤ N ≤ 10^5 1 ≤ K ≤ N The length of each network request string is between 1 and 100 (inclusive). SAMPLE INPUT 7 3 google.com facebook.com google.com yahoo.com google.com facebook.com bing.com SAMPLE OUTPUT google.com facebook.com bing.com","solution":"from collections import Counter def top_k_frequent_requests(n, k, requests): Returns the top k most frequent network requests in descending order of their frequency. If multiple requests have the same frequency, they are sorted lexicographically. request_counter = Counter(requests) sorted_requests = sorted(request_counter.items(), key=lambda x: (-x[1], x[0])) top_k_requests = [request for request, _ in sorted_requests[:k]] return top_k_requests"},{"question":"Given a positive integer, determine if it is a power of three. A number is a power of three if it can be expressed as 3^k where k is a non-negative integer. Example 1: Input: 27 Output: True Explanation: 27 = 3^3 Example 2: Input: 0 Output: False Explanation: There is no value of k such that 3^k = 0 Example 3: Input: 9 Output: True Explanation: 9 = 3^2 Example 4: Input: 45 Output: False Explanation: 45 is not a power of three","solution":"def is_power_of_three(n): Return True if n is a power of three, otherwise return False. if n <= 0: return False while n % 3 == 0: n //= 3 return n == 1"},{"question":"Write a function that, given a positive integer num, returns True if num is a perfect square, and False otherwise. Do not use any built-in library functions such as sqrt for this task. Example 1: Input: 16 Output: True Example 2: Input: 14 Output: False Note: Try to implement your solution using a binary search algorithm for an optimal time complexity.","solution":"def is_perfect_square(num): Returns True if the given positive integer num is a perfect square, False otherwise. Uses a binary search algorithm for optimal time complexity. if num < 1: return False left, right = 1, num while left <= right: mid = (left + right) // 2 square = mid * mid if square == num: return True elif square < num: left = mid + 1 else: right = mid - 1 return False"},{"question":"In a large university, the students are given the task of organizing a sports event. The university has N students, and they want to form teams for the event. Each team must consist of exactly K students. Given the students\' preferences, determine if it\'s possible to form exactly one team that contains exactly K students where each student in the team prefers all other members of the team. Each student\'s preference is represented by a list of their compatible students (students they want to team up with). -----Constraints----- - 1 ≤ N ≤ 500 - 1 ≤ K ≤ N - 1 ≤ |preference list of each student| ≤ N - 1 -----Input----- Input is given from Standard Input in the following format: N K P_1 P_2 : P_N Each P_i is a space-separated list of unique integers representing the students (by their 1-indexed positions) that the i-th student prefers. -----Output----- If it is possible to form exactly one team that satisfies the conditions, print YES; otherwise, print NO. -----Sample Input----- 4 3 2 3 1 3 1 2 1 2 -----Sample Output----- YES","solution":"def can_form_team(N, K, preferences): from itertools import combinations def is_valid_team(team, preferences): for member in team: for other_member in team: if member != other_member and other_member + 1 not in preferences[member]: return False return True if K > N: return \\"NO\\" for team in combinations(range(N), K): if is_valid_team(team, preferences): return \\"YES\\" return \\"NO\\" # Input reading function def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') N, K = map(int, data[0].split()) preferences = [list(map(lambda x: int(x) - 1, line.split())) for line in data[1:]] result = can_form_team(N, K, preferences) print(result)"},{"question":"A group of friends are planning a treasure hunt and need your help to determine the optimal way to hide their treasure using locations in the forest. Here’s how the game works: They have a map of the forest divided into a grid of cells. Each cell is identified by a pair of coordinates (x, y) where 1 ≤ x, y ≤ N (N ≤ 50). To make the game interesting, they want to avoid hiding the treasure at locations that are adjacent horizontally, vertically, or diagonally to other treasures. You are given the list of locations where they want to hide the treasures initially. Your task is to help them by finding the maximum number of locations from the list where the treasures can be hidden without any two treasures being adjacent to each other. Input The first line of the input contains T (1 ≤ T ≤ 10) denoting the number of test cases. T test cases follow. For each test case, the first line contains an integer N (1 ≤ N ≤ 50) denoting the size of the grid. The next line contains an integer M (1 ≤ M ≤ N*N) representing the number of locations the friends want to initially hide the treasures. The following M lines contain two space-separated integers xi and yi (1 ≤ xi, yi ≤ N) representing the coordinates of the initial treasure hiding locations. Output For each test case, output the maximum number of treasures that can be hidden without any two being adjacent. SAMPLE INPUT 2 4 4 1 1 1 3 2 2 4 4 3 5 1 1 2 2 3 3 4 4 5 5 SAMPLE OUTPUT 3 3 Explanation In the first case, the maximum number of treasures that can be hidden without any two being adjacent are at the following locations: - (1, 1) - (1, 3) - (4, 4) In the second case, the maximum number of treasures that can be hidden without any two being adjacent are at the following locations: - (1, 1) - (3, 3) - (5, 5)","solution":"def is_adjacent(x1, y1, x2, y2): Checks if two coordinates are adjacent. return abs(x1 - x2) <= 1 and abs(y1 - y2) <= 1 def max_non_adjacent_treasures(N, locations): Returns the maximum number of non-adjacent treasures that can be hidden. from itertools import combinations max_count = 0 M = len(locations) for r in range(1, M + 1): for subset in combinations(locations, r): if all(not is_adjacent(x1, y1, x2, y2) for i, (x1, y1) in enumerate(subset) for x2, y2 in subset[i+1:]): max_count = max(max_count, r) return max_count def solve_treasure_hunt(T, test_cases): results = [] for i in range(T): N, M, locations = test_cases[i] results.append(max_non_adjacent_treasures(N, locations)) return results"},{"question":"Given an array of integers of size N, find the length of the longest subarray which has an equal number of even and odd numbers. Example 1: Input: N = 5 arr[] = {1, 2, 3, 4, 5} Output: 4 Explanation: The longest subarray is {1, 2, 3, 4}, which has two even numbers and two odd numbers. Example 2: Input: N = 6 arr[] = {1, 2, 1, 2, 1, 2} Output: 6 Explanation: The entire array has an equal number of even and odd numbers. Your Task: You don\'t need to read input or print anything. Your task is to complete the function solve() which takes the array arr[] and its size N as inputs and returns the length of the longest subarray that has an equal number of even and odd numbers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 -10^3 <= arr[i] <= 10^3","solution":"def solve(arr, N): Function to find the length of the longest subarray with equal number of even and odd numbers. # Replace elements with 1 for odd and -1 for even modified_arr = [1 if x % 2 != 0 else -1 for x in arr] # Dictionary to store the first occurrence of prefix sum prefix_sum_indices = {0: -1} # Initialize with prefix sum 0 at index -1 prefix_sum = 0 max_length = 0 for i in range(N): prefix_sum += modified_arr[i] if prefix_sum in prefix_sum_indices: max_length = max(max_length, i - prefix_sum_indices[prefix_sum]) else: prefix_sum_indices[prefix_sum] = i return max_length"},{"question":"To monitor the performance and reliability of a high-traffic website, the server keeps a log of the response times for each request. You need to analyze these logs to determine the load handling capacity of the server by calculating the average response time, the maximum response time, and the minimum response time. Write a program that reads the response times and calculates these statistics. -----Input----- The first line of input contains an integer N (1 leq N leq 10000) representing the number of requests logged. Each of the next N lines contains a single integer representing the response time for a request in milliseconds. The response time cannot be negative and does not exceed 1000000. -----Output----- Print three lines: 1. The average response time, rounded to six decimal places. 2. The maximum response time. 3. The minimum response time. -----Examples----- Sample Input: 5 200 300 250 400 150 Sample Output: 260.000000 400 150","solution":"def analyze_response_times(n, response_times): Analyzes the response times and returns the average, maximum, and minimum response times. Parameters: n (int): Number of requests. response_times (list of int): List of response times in milliseconds. Returns: tuple: (average, maximum, minimum) where: average (float): The average response time, rounded to six decimal places. maximum (int): The maximum response time. minimum (int): The minimum response time. total_time = sum(response_times) average_time = round(total_time / n, 6) max_time = max(response_times) min_time = min(response_times) return average_time, max_time, min_time"},{"question":"You are given a string composed of \'(\' and \')\' characters. You are to determine the minimum number of moves required to make the brackets balanced. A move consists of inserting a single \'(\' or \')\' character at any position in the string. A string is considered balanced if: 1. Every opening bracket has a corresponding closing bracket. 2. The pairs of parentheses are properly nested. --- Constraints --- - 1 ≤ length of the string ≤ 100,000 --- Input --- The input is a single line that contains a string of \'(\' and \')\' characters. --- Output --- Print an integer representing the minimum number of moves needed to make the brackets balanced. --- Sample Input 1 --- ()))(( --- Sample Output 1 --- 4 --- Explanation --- Add two opening brackets at the start and two closing brackets at the end to make the sequence balanced: \'()()()()\'. --- Sample Input 2 --- ((()(())) --- Sample Output 2 --- 1 --- Explanation --- Add one closing bracket at the end to make the sequence balanced: \'((()(())))\'.","solution":"def min_moves_to_balance(s): Returns the minimum number of moves required to make the brackets balanced. left_balance = 0 right_balance = 0 for char in s: if char == \'(\': left_balance += 1 elif char == \')\': if left_balance > 0: left_balance -= 1 else: right_balance += 1 return left_balance + right_balance"},{"question":"A scientist is studying bacteria growth on a circular dish. The dish is divided into n sections, numbered from 1 to n in clockwise direction. Each section contains a certain number of bacteria. The scientist can choose any section and start an experiment, which involves moving clockwise from that section and collecting bacteria from each section until they have collected a total of at least m bacteria. However, the scientist can only start the experiment from a section if it is possible to collect at least m bacteria. Once they reach or exceed the target m, they must stop the experiment. Your task is to help the scientist determine the minimum number of sections they need to visit to collect at least m bacteria. If it is not possible to collect m bacteria from any starting section, return -1. Input The first line contains two integers n and m (1 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^9) — the number of sections in the dish and the target number of bacteria. The second line contains n space-separated integers ai (1 ≤ ai ≤ 10^5) — the number of bacteria in each section. Output Print a single integer — the minimum number of sections the scientist needs to visit to collect at least m bacteria, or -1 if it is not possible to collect m bacteria from any starting section. Examples Input 5 12 1 2 3 4 5 Output 3 Input 4 10 4 4 4 4 Output 3 Input 3 15 3 1 4 Output -1","solution":"def min_sections_to_collect_bacteria(n, m, bacteria_counts): Returns the minimum number of sections needed to collect at least m bacteria. If it\'s not possible to collect m bacteria starting from any section, returns -1. total_bacteria = sum(bacteria_counts) if total_bacteria < m: return -1 min_sections = n + 1 current_sum = 0 left = 0 for right in range(n): current_sum += bacteria_counts[right] while current_sum >= m: min_sections = min(min_sections, right - left + 1) current_sum -= bacteria_counts[left] left += 1 return min_sections if min_sections <= n else -1 # Example usage n, m = 5, 12 bacteria_counts = [1, 2, 3, 4, 5] print(min_sections_to_collect_bacteria(n, m, bacteria_counts)) # Should print 3"},{"question":"Your friend has a string consisting of lowercase English letters. They are fond of symmetric strings. A string is called symmetric if it reads the same from both left to right and right to left. Given a string, they want to know the minimum number of characters that need to be replaced to make the string symmetric. Help your friend by writing a function that accepts a string and returns the minimum number of replacements required to make the string symmetric. -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 10^5) consisting of small English letters only. -----Output----- Print the only integer — the minimum number of replacements required to make the string symmetric. -----Examples----- Input abca Output 1 Input racecar Output 0 Input abcd Output 2 -----Note----- In the first example, we can replace the second character \'b\' with \'c\' to make the string \\"acca\\", which is symmetric. In the second example, no replacements are necessary as the string is already symmetric. In the third example, replacing \'b\' with \'c\' and \'d\' with \'a\' will make the string \\"acca\\", which is symmetric, so we need 2 replacements.","solution":"def min_replacements_to_make_symmetric(s): Returns the minimum number of replacements required to make the string s symmetric. n = len(s) replacements = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: replacements += 1 return replacements"},{"question":"------ Problem Statement ------ JSON Flattening Given a nested JSON object, write a function to flatten it into a single level object with key names indicating the path. ------ Input Format ------ The input is a single JSON object where keys are strings and values can be strings, numbers, or nested JSON objects. ------ Output Format ------ Output a single level dictionary where keys are the concatenation of paths from root to the value in the original JSON, separated by dots (.). ------ Constraints ------ Each key in the nested JSON can have a maximum length of 20. JSON object depth will not exceed 5 levels. JSON object contains at least 1 key-value pair. ----- Sample Input 1 ------ { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3 } } } ----- Sample Output 1 ------ { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3 } ----- Explanation ------ The nested JSON object is flattened to a single level where keys represent the path from root separated by dots. ----- Sample Input 2 ------ { \\"name\\": \\"John\\", \\"address\\": { \\"city\\": \\"New York\\", \\"zipcode\\": { \\"first\\": 12345, \\"second\\": 67890 } } } ----- Sample Output 2 ------ { \\"name\\": \\"John\\", \\"address.city\\": \\"New York\\", \\"address.zipcode.first\\": 12345, \\"address.zipcode.second\\": 67890 } ----- Explanation ------ The nested JSON object is flattened to a single level where keys represent the path from root separated by dots. ------ Note ------ Nested arrays if present should be considered out of scope for this problem. Focus only on nested dictionary structures.","solution":"def flatten_json(json_obj, parent_key=\'\', sep=\'.\'): Flattens a nested JSON object. Args: json_obj (dict): The JSON object to flatten. parent_key (str): The base key path (used for recursion). sep (str): The separator to use between keys in the flattened dictionary. Returns: dict: A flattened dictionary. items = [] for k, v in json_obj.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_json(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"The city of Gridland is designed in a grid format with dimensions NxN. Mayor Patel wants to plant trees in Gridland such that no two trees fall in the same row or the same column. To achieve this, he has decided to plant exactly one tree in each row and each column. One day, he notices that some plots in the grid are already marked as \\"occupied\\" and therefore cannot be used to plant trees. Mayor Patel asks you to help him determine whether it is possible to plant the trees according to his rules. If it is possible, determine one possible configuration of the grid with the trees planted, otherwise, output \\"Not possible\\". The grid is represented as a 2D array where a cell with \'0\' denotes an unoccupied plot and \'X\' denotes an occupied plot. You need to provide an NxN grid as the output where \'T\' represents a tree. INPUT - First line contains integer N, the size of the grid (2 ≤ N ≤ 10). - Next N lines contain N characters (\'0\' or \'X\'), representing the grid. OUTPUT - If it is possible to plant the trees according to the rules, print NxN lines where each line contains N characters (\'0\', \'X\', or \'T\'). - If it is not possible to plant the trees, print a single line \\"Not possible\\". SAMPLE INPUT 3 0 0 X X 0 0 0 X 0 SAMPLE OUTPUT T 0 X X T 0 0 X T Explanation: In the given example: - The first row has a \'T\' in the first column. - The second row has a \'T\' in the second column. - The third row has a \'T\' in the third column. This configuration ensures that each tree is in a unique row and column, and no \'T\' is placed on cells marked with \'X\'.","solution":"def plant_trees(grid): This function takes an NxN grid and determines if it is possible to plant one tree (\'T\') in each row and each column without placing a tree on an occupied plot (\'X\'). def find_place(row, col_occupied, grid, N): if row == N: return True for col in range(N): if col not in col_occupied and grid[row][col] != \'X\': grid[row][col] = \'T\' if find_place(row + 1, col_occupied | {col}, grid, N): return True grid[row][col] = \'0\' return False N = len(grid) if find_place(0, set(), grid, N): return grid else: return \\"Not possible\\" def solve(n, grid_values): grid = [list(row) for row in grid_values] result = plant_trees(grid) if result == \\"Not possible\\": return result else: return [\' \'.join(row) for row in result]"},{"question":"You are given an integer array `nums` where each element is in the range [1, n] and appears exactly once. You need to determine the number of swaps required to sort the array in ascending order. A swap consists of picking two indices i and j and swapping the elements at indices i and j. Your task is to return the minimum number of swaps to make the array sorted. Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the size of the array. - The second line contains `n` integers representing the elements of the array. Output - Return a single integer representing the minimum number of swaps required to sort the array. Examples Input 4 4 3 1 2 Output 3 Input 5 2 3 4 1 5 Output 3 Explanation In the first example, we need three swaps to sort the array: - Swap 4 with 2, array becomes [2, 3, 1, 4] - Swap 3 with 1, array becomes [2, 1, 3, 4] - Swap 2 with 1, array becomes [1, 2, 3, 4] In the second example, we can sort the array with three swaps: - Swap 2 with 1, array becomes [1, 3, 4, 2, 5] - Swap 3 with 2, array becomes [1, 2, 4, 3, 5] - Swap 4 with 3, array becomes [1, 2, 3, 4, 5]","solution":"def min_swaps_to_sort(nums): Returns the minimum number of swaps required to sort the array. n = len(nums) arr_pos = [*enumerate(nums)] arr_pos.sort(key=lambda it: it[1]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arr_pos[i][0] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arr_pos[j][0] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"String Compression =========== You are given a string containing lowercase alphabetic characters. Your task is to write a function `compressString()` that compresses the string using the following algorithm: - If a character appears consecutively more than once, replace the consecutive characters with the character followed by the count of the repetitions. - If a character appears only once, it remains unchanged in the compressed string. The goal is to minimize the length of the resultant string. If the compressed string is not shorter than the original string, the function should return the original string. # Input - `s` (string): The input string containing only lowercase alphabetical characters. The length of `s` will not exceed 10^4. # Output - The function should return a compressed string if it is shorter than the original string, otherwise return the original string. # Examples ``` compressString(\\"aaabbccccc\\") -> \\"a3b2c5\\" compressString(\\"abcd\\") -> \\"abcd\\" compressString(\\"aabbcc\\") -> \\"aabbcc\\" compressString(\\"aaaabbbbccccdddd\\") -> \\"a4b4c4d4\\" ``` # Note Look for patterns and consider edge cases where no compressions can shorten the string.","solution":"def compressString(s): Compresses the input string using a simple run-length encoding algorithm. if not s: # If the string is empty, return it as is. return s compressed = [] current_char = s[0] count = 1 for char in s[1:]: if char == current_char: count += 1 else: compressed.append(current_char) if count > 1: compressed.append(str(count)) current_char = char count = 1 compressed.append(current_char) if count > 1: compressed.append(str(count)) compressed_string = \'\'.join(compressed) return compressed_string if len(compressed_string) < len(s) else s"},{"question":"A software company has developed a new version control system. They want to introduce a feature that can combine multiple chunks of text into a single unified document while ensuring that no two identical lines appear in the unified document more than once. Additionally, the unified document should maintain the relative order of chunks as they were provided. You are to write a function that takes multiple chunks of text and combines them into a unified document while eliminating any duplicate lines. Input - The first line of input contains an integer t, the number of test cases. - For each test case: - The first line contains an integer n, the number of chunks. - The following n lines each contain a chunk of text. Output - For each test case, print the unified document as a list of strings. Constraints 1 ≤ t ≤ 100 1 ≤ n ≤ 100 1 ≤ length of each chunk ≤ 100 Example Input: 2 3 apple banana apple 2 hello world Output: [\'apple\', \'banana\'] [\'hello\', \'world\'] Explanation In the first test case, the line \'apple\' is repeated, so it is included only once in the output. In the second test case, there are no repeated lines, so all lines are simply included in their given order.","solution":"def combine_chunks(t, test_cases): result = [] for i in range(t): n, chunks = test_cases[i] seen = set() unified_document = [] for line in chunks: if line not in seen: seen.add(line) unified_document.append(line) result.append(unified_document) return result"},{"question":"Three friends, John, Wendy, and Chris, are playing a number guessing game. John says he will think of three different numbers, all greater than or equal to 1. He announces to Wendy what the sum of these three numbers is, and to Chris what the product of these three numbers is. However, John only whispers this information to Wendy and Chris separately so they don\'t overhear each other\'s information. After a brief contemplation, Wendy says: **Statement 1:** \\"I cannot determine the three numbers.\\" Following this, Chris says: **Statement 2:** \\"I still cannot determine the three numbers either.\\" Hearing this, Wendy then says: **Statement 3:** \\"Given Chris\'s response, now I know what the three numbers are.\\" Finally, Chris says: **Statement 4:** \\"Then I also know what the three numbers are now.\\" Your task is to write four functions: 1. `statement1(sum)` which takes an `int` argument `sum` and returns `True` if and only if Wendy could have made statement 1 given the sum of the three numbers. 2. `statement2(product)` which takes an `int` argument `product` and returns `True` if and only if Chris could have made statement 2 given the product of the three numbers. 3. `statement3(sum)` which takes an `int` argument `sum` and returns `True` if and only if Wendy could have made statement 3 after hearing Chris\'s statement 2. 4. `statement4(product)` which takes an `int` argument `product` and returns `True` if and only if Chris could have made statement 4 after hearing Wendy\'s statement 3. Lastly, you need to determine the three numbers John was thinking of. Write a function `find_numbers(sum, product)` that takes the sum and the product of the three numbers and returns a tuple of the three numbers `(a, b, c)` in ascending order that satisfy the above statements. If there are multiple solutions, any one of them is acceptable. Hints: - Consider the implications of each person\'s statements. - Analyze the problem using properties of number sums and products. - Assume all inputs given are logically consistent with the problem setup and statements.","solution":"from itertools import combinations def find_sum_triplets(total_sum): triplets = [] for x in range(1, total_sum - 1): for y in range(x + 1, total_sum - x): z = total_sum - x - y if z > y: triplets.append((x, y, z)) return triplets def find_product_triplets(total_product): triplets = [] for x in range(1, int(total_product ** (1/3)) + 1): if total_product % x == 0: for y in range(x + 1, int((total_product // x) ** (1/2)) + 1): if (total_product // x) % y == 0: z = total_product // (x * y) if z >= y + 1 and x * y * z == total_product: triplets.append((x, y, z)) return triplets def statement1(total_sum): return len(find_sum_triplets(total_sum)) > 1 def statement2(total_product): return len(find_product_triplets(total_product)) != 1 def statement3(total_sum): possible_sums = find_sum_triplets(total_sum) for triplet in possible_sums: product = triplet[0] * triplet[1] * triplet[2] if statement2(product): return True return False def statement4(total_product): possible_products = find_product_triplets(total_product) for triplet in possible_products: total_sum = sum(triplet) if statement3(total_sum): return True return False def find_numbers(total_sum, total_product): possible_sums = find_sum_triplets(total_sum) for triplet in possible_sums: if triplet[0] * triplet[1] * triplet[2] == total_product: return tuple(sorted(triplet)) return None"},{"question":"You are working on a project that involves organizing a sports event with multiple races. Each race is a sprint and has a set of participants. You are given a list of participants for a particular race along with their speeds, and you need to compute the winner(s) of the race. Given an integer n representing the number of participants, and a list of n integers representing the speed of each participant, write a function that returns a list of the indices of the participant(s) who have the maximum speed. If there are multiple participants with the same maximum speed, return all their indices in ascending order. Example n = 5 speeds = [10, 12, 10, 15, 15] The maximum speed is 15, and the participants with this speed are at indices 3 and 4. Function Description Complete the function find_winners in the editor below. find_winners has the following parameter(s): int n: the number of participants list of int speeds: a list of integers representing the speeds of participants Returns list of int: a list of indices of the participants with the maximum speed Input Format The first line of input contains a single integer n, the number of participants. The second line contains n space-separated integers representing the speeds of the participants. Constraints 1 ≤ n ≤ 100 1 ≤ speeds[i] ≤ 100 Sample Input 0 5 10 12 10 15 15 Sample Output 0 [3, 4] Explanation 0 The participants have the following speeds: [10, 12, 10, 15, 15]. The maximum speed is 15. The participants with this speed are at indices 3 and 4. Sample Input 1 4 20 15 15 20 Sample Output 1 [0, 3] Explanation 1 The participants have the following speeds: [20, 15, 15, 20]. The maximum speed is 20. The participants with this speed are at indices 0 and 3.","solution":"def find_winners(n, speeds): Returns a list of indices of participants with the maximum speed. max_speed = max(speeds) winners = [index for index, speed in enumerate(speeds) if speed == max_speed] return winners"},{"question":"A palindrome is a sequence that reads the same backward as forward. Given an integer `N`, your task is to find the smallest palindrome that is greater than `N`. Input: The first line contains the number of test cases. Each test case is a single integer `N`. Output: Print the smallest palindrome greater than `N` for each test case on a new line. SAMPLE INPUT 3 123 808 999 SAMPLE OUTPUT 131 818 1001 Explanation Testcase 1: 131 is the smallest palindromic number greater than 123. Testcase 2: 818 is the smallest palindromic number greater than 808. Testcase 3: 1001 is the smallest palindromic number greater than 999.","solution":"def is_palindrome(num): Checks if a number is a palindrome. return str(num) == str(num)[::-1] def next_palindrome(N): Finds the smallest palindrome greater than N. N += 1 # Start checking from the next number while not is_palindrome(N): N += 1 return N def find_next_palindromes(test_cases): For a list of test cases, return the next palindromes. results = [] for N in test_cases: results.append(next_palindrome(N)) return results"},{"question":"Given a string of only lowercase alphabet characters, we can rearrange each character in the string to get different permutations and determine which of these permutations is the lexicographically smallest. Write a function that receives a string of lowercase alphabet characters, and returns the lexicographically smallest permutation of that string. For example: ``` smallest_permutation(\\"cba\\") -> \\"abc\\" smallest_permutation(\\"dcba\\") -> \\"abcd\\" smallest_permutation(\\"edcba\\")-> \\"abcde\\" smallest_permutation(\\"banana\\")-> \\"aaabnn\\" ``` Input will consist of 1 to 100 characters. Good luck! If you like this Kata, please try: [String Mix](https://www.codewars.com/kata/5629db57620258aa9d000014) [Sort the odd](https://www.codewars.com/kata/578aa45ee9fd15ff4600090d)","solution":"def smallest_permutation(s): Returns the lexicographically smallest permutation of the input string. return \'\'.join(sorted(s))"},{"question":"You are given an array of n integers and a set of queries. The queries are of two types: 1. Update: Update the value at a specific position in the array. 2. Range Maximum: Compute the maximum value in a given range of the array. Your task is to process all the queries efficiently. Input The first line contains two integers n and q (1 ≤ n, q ≤ 2 ⋅ 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the initial elements of the array. The next q lines contain the queries. Each query is of one of the following types: - \\"1 x y\\" — Update the element at position x to value y (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9). - \\"2 l r\\" — Compute the maximum value in the subarray from l to r (1 ≤ l ≤ r ≤ n). Output For each query of the second type, print the maximum value in the specified subarray. Example Input 5 5 1 3 5 7 9 2 1 3 1 3 10 2 1 3 2 3 5 1 5 4 Output 5 10 9 Note Let\'s go through the example queries: 1. \\"2 1 3\\" — The maximum value between indices 1 and 3 is 5. 2. \\"1 3 10\\" — Update the value at index 3 to 10, so the array becomes [1, 3, 10, 7, 9]. 3. \\"2 1 3\\" — The maximum value between indices 1 and 3 is 10 (updated array). 4. \\"2 3 5\\" — The maximum value between indices 3 and 5 is 10. 5. \\"1 5 4\\" — Update the value at index 5 to 4, so the array becomes [1, 3, 10, 7, 4].","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (4 * self.n) self._build(data, 0, 0, self.n - 1) def _build(self, data, node, start, end): if start == end: self.tree[node] = data[start] else: mid = (start + end) // 2 self._build(data, 2 * node + 1, start, mid) self._build(data, 2 * node + 2, mid + 1, end) self.tree[node] = max(self.tree[2 * node + 1], self.tree[2 * node + 2]) def update(self, idx, value, node, start, end): if start == end: self.tree[node] = value else: mid = (start + end) // 2 if start <= idx <= mid: self.update(idx, value, 2 * node + 1, start, mid) else: self.update(idx, value, 2 * node + 2, mid + 1, end) self.tree[node] = max(self.tree[2 * node + 1], self.tree[2 * node + 2]) def range_max(self, L, R, node, start, end): if R < start or end < L: return -float(\'inf\') if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_max = self.range_max(L, R, 2 * node + 1, start, mid) right_max = self.range_max(L, R, 2 * node + 2, mid + 1, end) return max(left_max, right_max) def process_queries(n, q, array, queries): segment_tree = SegmentTree(array) results = [] for query in queries: type_query = query[0] if type_query == 1: x, y = query[1]-1, query[2] segment_tree.update(x, y, 0, 0, n - 1) elif type_query == 2: l, r = query[1]-1, query[2]-1 result = segment_tree.range_max(l, r, 0, 0, n - 1) results.append(result) return results # Example usage: # n = 5 # q = 5 # array = [1, 3, 5, 7, 9] # queries = [ # (2, 1, 3), # (1, 3, 10), # (2, 1, 3), # (2, 3, 5), # (1, 5, 4) # ] # print(process_queries(n, q, array, queries))"},{"question":"Write a function that takes two strings `word1` and `word2` and returns the minimum number of operations required to convert `word1` to `word2`. The possible operations are: 1. Insert a character 2. Delete a character 3. Replace a character Each operation counts as one step. You need to determine the minimum steps required to achieve the conversion. -----Input----- Two non-empty strings `word1` and `word2` each of length at most 500. -----Output----- Print a single integer, the minimum number of operations required to convert `word1` to `word2`. -----Examples----- Input horse ros Output 3 Input intention execution Output 5 # Note: In the first example, the following operations can convert \'horse\' to \'ros\': - Replace \'h\' with \'r\' -> \\"rorse\\" - Remove \'r\' -> \\"rose\\" - Remove \'e\' -> \\"ros\\" In the second example, the following operations can convert \'intention\' to \'execution\': - Replace \'i\' with \'e\' -> \\"entention\\" - Replace \'n\' with \'x\' -> \\"extention\\" - Replace \'t\' with \'c\' -> \\"excention\\" - Replace \'e\' with \'u\' -> \\"excuention\\" - Insert \'e\' -> \\"execution\\"","solution":"def minDistance(word1, word2): m = len(word1) n = len(word2) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of first string elif j == 0: dp[i][j] = i # Min. operations = i # If last characters are the same, ignore the last character # and recur for the remaining substring elif word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all # possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"You are given a list of non-negative integers. Your task is to form the largest possible number by concatenating the elements of the list. Input Format A list of non-negative integers, where each integer i satisfies 0 leq i < 10^3. Constraints 1 leq len(list) leq 100 Output Format Output the largest concatenated number that can be formed from the elements of the list. Sample Input [50, 2, 1, 9] Sample Output 95021","solution":"from functools import cmp_to_key def largest_concatenated_number(numbers): Given a list of non-negative integers, returns the largest possible number that can be formed by concatenating the elements of the list. # Convert all integers to strings numbers = list(map(str, numbers)) # Custom comparator to decide order based on concatenated result def compare(x, y): return (y + x > x + y) - (y + x < x + y) # Sort by custom comparator numbers.sort(key=cmp_to_key(compare)) # Join and return the result largest_number = \'\'.join(numbers) # Convert to int and back to str to remove any leading zeros (e.g. \\"00\\" -> \\"0\\") return str(int(largest_number))"},{"question":"A software company is organizing a coding challenge event. They are preparing a scoreboard to rank the participants based on their scores. The challenge requires you to write a program that, given the scores of multiple participants, returns the rank of each participant. Each participant has a unique ID and a corresponding score. The rank is defined as follows: - The participant with the highest score gets rank 1. - The participant with the second highest score gets rank 2, and so on. - If two participants have the same score, they should have the same rank, and the next rank should be adjusted accordingly (i.e., ranks should not be skipped). Your task is to produce a list of participant IDs with their respective ranks. -----Input:----- - First line will contain the integer P, the number of participants. - The next P lines each contain a participant ID (a string of length between 1 and 10, inclusive) and an integer S (the participant\'s score), separated by a space. -----Output:----- - For each participant, output their ID and their rank, separated by a space. The output should be sorted by rank in ascending order, and by participant ID alphabetically in case of tie in ranks. -----Constraints:----- - 1 leq P leq 1000 - 0 leq S leq 100000 -----Sample Input:----- 5 john 85 alice 92 bob 75 charlie 85 david 92 -----Sample Output:----- alice 1 david 1 charlie 3 john 3 bob 5 Analysis 1. Input the number of participants P. 2. Store each participant\'s ID and score. 3. Sort participants primarily by score in descending order, then by ID in case of ties. 4. Assign ranks considering ties in scores. 5. Output the participant\'s ID with their respective rank.","solution":"def compute_ranks(participants): # Sort participants based on their scores in descending order; if same score, by id in ascending order sorted_participants = sorted(participants, key=lambda x: (-x[1], x[0])) # Initialize ranks ranks = {} current_rank = 0 last_score = None # Assign ranks for index, (participant_id, score) in enumerate(sorted_participants): if score != last_score: current_rank = index + 1 last_score = score ranks[participant_id] = current_rank # Prepare the sorted result based on participant IDs and then their ranks ranked_participants = sorted(ranks.items(), key=lambda x: (x[1], x[0])) return ranked_participants"},{"question":"Given a sequence of integers, find the length of the longest contiguous subsequence such that all elements are sorted in strictly ascending order. This is known as the Longest Continuous Increasing Subsequence (LCIS) problem. For example, the length of the LCIS for [10,22,9,33,21,50,41,60,80] is boldsymbol{4} since the longest continuous increasing subsequence is [21,50,60,80]. Given a sequence of integers, find the length of its longest strictly continuous increasing subsequence. Function Description Complete the longestContinuousIncreasingSubsequence function in the editor below. It should return an integer that denotes the array\'s LCIS. longestContinuousIncreasingSubsequence has the following parameter(s): arr: an unordered array of integers Input Format The first line contains a single integer n, the number of elements in textbf{arr}. Each of the next n lines contains an integer, arrleft[iright] Constraints 1 leq n leq 10^6 1 leq arr[i] leq 10^5 Output Format Print a single line containing a single integer denoting the length of the longest continuous increasing subsequence. Sample Input 0 8 1 2 3 2 3 4 5 1 Sample Output 0 4 Explanation 0 In the array arr = [1,2,3,2,3,4,5,1], the longest continuous increasing subsequence is [2,3,4,5]. It has a length of 4. Sample Input 1 7 5 6 3 5 7 8 9 Sample Output 1 5 Explanation 1 The LCIS of arr = [5,6,3,5,7,8,9] is [3,5,7,8,9].","solution":"def longestContinuousIncreasingSubsequence(arr): if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] > arr[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Alyssa loves exploring different methods to manipulate arrays. Recently, she encountered an interesting algorithm problem that involves sorting and querying. Given an array of integers, Alyssa wants to know the number of elements in specific subarrays that are greater than a given threshold. You are given an array of integers and a list of queries, where each query specifies a subarray (defined by its start and end indices) and a threshold value. For each query, determine the number of elements in the specified subarray that are greater than the given threshold. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the length of the array. The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9), the elements of the array. The third line contains an integer q (1 leq q leq 10^5), the number of queries. The next q lines each contain three integers l, r, and k (1 leq l leq r leq n, 1 leq k leq 10^9), representing a query asking for the number of elements in the subarray from index l to r (inclusive, 1-based indexing) that are greater than k. -----Output----- Output q lines, each containing the result of a query: the number of elements in the corresponding subarray of the array that are greater than the given threshold. -----Example----- Input 5 1 3 5 7 9 3 1 3 4 2 5 6 1 5 8 Output 2 2 1 -----Note----- In the first example: - For the first query, the subarray is [1, 3, 5] and the threshold is 4. The elements greater than 4 are 5, so the answer is 1. - For the second query, the subarray is [3, 5, 7, 9] and the threshold is 6. The elements greater than 6 are 7 and 9, so the answer is 2. - For the third query, the subarray is [1, 3, 5, 7, 9] and the threshold is 8. The element greater than 8 is 9, so the answer is 1.","solution":"def count_greater_elements(arr, queries): Given an array and a list of queries, returns the number of elements in specific subarrays that are greater than the given threshold for each query. :param arr: List[int] - the array of integers :param queries: List[Tuple[int, int, int]] - list of queries, where each query is a tuple (l, r, k) :return: List[int] - list of results for each query results = [] for l, r, k in queries: count = sum(1 for i in range(l - 1, r) if arr[i] > k) results.append(count) return results"},{"question":"In a competition, there are several games scheduled in a sequence. Each game has a certain score associated with it. Participants can select different subsets of games to maximize their total score. However, there is a rule that no two selected games can be consecutive. Given the scores of the games, your task is to determine the maximum possible score a participant can achieve without selecting any two consecutive games. Input The input is provided in the following format: N s1 s2 s3 ... sN The number N (1 ≤ N ≤ 1000) of games is given in the first line. The next line contains N integers, where si (1 ≤ si ≤ 1000) denotes the score of the i-th game. Output Output the maximum possible score a participant can achieve in one line. Examples Input 5 3 2 7 10 12 Output 22 Input 4 5 5 10 100 Output 105 Explanation - In the first example, the participant can select games with scores 3, 7, and 12 or with scores 2 and 10 for a maximum score of 22. - In the second example, the participant can select games with scores 5 and 100, resulting in the maximum score of 105.","solution":"def max_non_consecutive_score(n, scores): if n == 0: return 0 if n == 1: return scores[0] dp = [0] * n dp[0] = scores[0] dp[1] = max(scores[0], scores[1]) for i in range(2, n): dp[i] = max(dp[i-1], scores[i] + dp[i-2]) return dp[-1]"},{"question":"You are asked to create a program that can generate all unique permutations of a given word\'s characters and then filter out only those permutations that are palindromes. A palindrome is a word that reads the same backward as forward. The result should display the total number of unique palindrome permutations possible for each provided word. INPUT: First line contains the number of test cases, T (1 <= T <= 100). Next T lines each contain a string of characters (1 <= length of each string <= 10). OUTPUT: T lines, each line showing the number of unique palindrome permutations possible for the corresponding input string. SAMPLE INPUT 3 aab racecar abc SAMPLE OUTPUT 1 6 0 Explanation For the 1st String aab: The unique permutations are: [\'aab\', \'aba\', \'baa\'] Only \'aba\' is a palindrome. Hence, the output is 1. For the 2nd String racecar: The unique permutations are many but the ones that are palindromes include: [\'racecar\', \'rcaecar\', \'arcecra\', \'acrecra\', \'carrace\', \'carrace\'] among others. Hence, the output is 6. For the 3rd String abc: No palindromes are possible. Hence, the output is 0.","solution":"from itertools import permutations def is_palindrome(s): Check if the given string s is a palindrome. return s == s[::-1] def unique_palindrome_permutations(word): Generate all unique permutations of the given word and count how many of them are palindromes. permut_set = set(permutations(word)) palindrome_perms = [\\"\\".join(p) for p in permut_set if is_palindrome(\\"\\".join(p))] return len(palindrome_perms) def count_palindrome_permutations(test_cases): Process a list of test cases and return the count of unique palindrome permutations for each word. results = [] for word in test_cases: count = unique_palindrome_permutations(word) results.append(count) return results"},{"question":"You are given a list of projects and a list of dependencies where each dependency is a pair of projects that need to be completed. Project [a, b] means project a needs to be completed before project b. Determine if all projects can be completed. Example: Input: projects = [\\"p1\\", \\"p2\\", \\"p3\\", \\"p4\\"], dependencies = [[\\"p1\\", \\"p2\\"], [\\"p4\\", \\"p3\\"], [\\"p2\\", \\"p4\\"]] Output: true Explanation: The projects can be completed in the order: p1 -> p2 -> p4 -> p3. Input: projects = [\\"p1\\", \\"p2\\"], dependencies = [[\\"p1\\", \\"p2\\"], [\\"p2\\", \\"p1\\"]] Output: false Explanation: There is a cyclic dependency between p1 and p2, so it\'s impossible to complete all projects. Input: [\\"p1\\"], [] Output: true Explanation: There are no dependencies, so the project can be completed. Note: - The input dependencies represent a graph as a list of edges. - There are no duplicate edges in the input dependencies. - The projects list is unique and contains no duplicates.","solution":"from collections import defaultdict, deque def can_complete_all_projects(projects, dependencies): Determines if all projects can be completed given the list of dependencies. Args: projects (list): List of project identifiers. dependencies (list): List of dependencies where each dependency is a pair of projects [a, b] meaning project a needs to be completed before project b. Returns: bool: True if all projects can be completed, False otherwise. # Create a graph and in-degree count graph = defaultdict(list) in_degree = {project: 0 for project in projects} # Build the graph and in-degree count for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Use a queue to perform topological sort (Kahn\'s algorithm) queue = deque([project for project in projects if in_degree[project] == 0]) count = 0 while queue: current = queue.popleft() count += 1 for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If count matches the number of projects, all projects can be completed return count == len(projects)"},{"question":"You are given a rectangular field that has been divided into a grid of equal-sized square cells. Each cell in the grid is either empty or has a tree planted in it. A path is considered valid if it starts from the top-left cell (cell (1, 1)) of the grid and ends at the bottom-right cell (cell (n, m)) of the grid, moving only to the right or down. However, you can only move through empty cells (not through cells with trees). Your task is to determine the number of distinct valid paths from the top-left to the bottom-right cell of the grid. -----Input----- The first line of input contains two integers `n` and `m` (1 leq n, m leq 100), representing the number of rows and columns in the grid, respectively. The next `n` lines each contain `m` characters, where each character is either `.` (representing an empty cell), or `#` (representing a cell with a tree). -----Output----- Output a single integer, the number of distinct valid paths from the top-left to the bottom-right cell of the grid. -----Examples----- Sample Input 1: 3 3 ... .#. ... Sample Output 1: 2 Sample Input 2: 3 3 .#. .#. ... Sample Output 2: 1 Sample Input 3: 3 3 .#. . ... Sample Output 3: 0","solution":"def count_paths(n, m, grid): Counts the number of distinct valid paths from the top-left to the bottom-right cell of the grid. :param n: Number of rows in the grid. :param m: Number of columns in the grid. :param grid: List of strings representing the grid. :return: Number of distinct valid paths. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"**Problem statement** You are given an N × M grid filled with different characters. A word is said to be present in the grid if it can be found by a sequence of characters that can be constructed by moving either horizontally or vertically to adjacent cells. Write a function `bool isWordPresent(char grid[N][M], int N, int M, char* word)` that determines whether the specified word can be found in the grid, using the aforementioned rules. The function should return `true` if the word is present and `false` otherwise. **Input** - `N`: Integer, representing the number of rows in the grid (1 ≤ N ≤ 100). - `M`: Integer, representing the number of columns in the grid (1 ≤ M ≤ 100). - `grid`: 2D array of characters, representing the grid. - `word`: A string of characters, with a length between 1 and 100 inclusive. **Output** - Return `true` if the word is present in the grid as per the described rules. - Return `false` otherwise. **Constraints** - The grid will only contain uppercase letters (\'A\' to \'Z\'). - The word will also consist of only uppercase letters. **Examples** Input: ```cpp 3 4 grid = { {\'A\', \'B\', \'C\', \'E\'}, {\'S\', \'F\', \'C\', \'S\'}, {\'A\', \'D\', \'E\', \'E\'} } char word[] = \\"ABCCED\\" ``` Output: ```cpp true ``` Input: ```cpp 3 4 grid = { {\'A\', \'B\', \'C\', \'E\'}, {\'S\', \'F\', \'C\', \'S\'}, {\'A\', \'D\', \'E\', \'E\'} } char word[] = \\"SEE\\" ``` Output: ```cpp true ``` Input: ```cpp 3 4 grid = { {\'A\', \'B\', \'C\', \'E\'}, {\'S\', \'F\', \'C\', \'S\'}, {\'A\', \'D\', \'E\', \'E\'} } char word[] = \\"ABCB\\" ``` Output: ```cpp false ``` **Note:** - Be sure to consider edge cases, such as when the grid is smaller or has only one row/column. - You may not revisit the same cell more than once while constructing the word. - It is guaranteed that the word length will not exceed the product of N and M.","solution":"def is_word_present(grid, N, M, word): def dfs(x, y, word, idx): if idx == len(word): return True if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] != word[idx]: return False temp = grid[x][y] grid[x][y] = \'#\' # Mark as visited found = (dfs(x + 1, y, word, idx + 1) or dfs(x - 1, y, word, idx + 1) or dfs(x, y + 1, word, idx + 1) or dfs(x, y - 1, word, idx + 1)) grid[x][y] = temp # Unmark visited return found for i in range(N): for j in range(M): if dfs(i, j, word, 0): return True return False # Solution Code in Python"},{"question":"Given n strings as input, determine if each string is a palindrome. A palindrome is a string that reads the same backward as forward. If a string is a palindrome, print \\"Palindrome\\". Otherwise, print \\"Not Palindrome\\". Input Format The first line contains a single integer, n, denoting the number of strings. Each line boldsymbol{i} of the n subsequent lines contains a string s. Constraints 1 leq n leq 100 1 leq |s| leq 100 Output Format Print \\"Palindrome\\" or \\"Not Palindrome\\" for each string in the order it was received as input. Sample Input 3 madam hello racecar Sample Output Palindrome Not Palindrome Palindrome Explanation The first string \\"madam\\" reads the same backward as forward, so it is a palindrome. The second string \\"hello\\" does not read the same backward as forward, so it is not a palindrome. The third string \\"racecar\\" reads the same backward as forward, so it is a palindrome.","solution":"def check_palindromes(strings): Given a list of strings, checks if each string is a palindrome and prints \'Palindrome\' if it is, otherwise prints \'Not Palindrome\'. results = [] for s in strings: if s == s[::-1]: results.append(\\"Palindrome\\") else: results.append(\\"Not Palindrome\\") return results"},{"question":"In a distant kingdom, there existed a magical land where stones could communicate with each other. The stones were arranged in a linear fashion, and each stone had an initial energy level. There is a wizard who wanted to use these stones to perform a powerful ritual. The wizard can only perform the ritual if the total energy of the stones in any contiguous sub-segment of the array of stones is equal to a target value T. The wizard has the power to perform the ritual multiple times on different sub-segments, but he wants to know the maximum number of non-overlapping sub-segments whose total energy is exactly T. Your task is to help the wizard determine the maximum number of such non-overlapping sub-segments. # Input The first line of input contains an integer N, which is the number of test cases. Each test case consists of two lines: 1. The first line contains two space-separated integers: n (the number of stones) and T (the target energy value). 2. The second line contains n space-separated integers representing the energy levels of the stones. # Output For each test case, output a single integer representing the maximum number of non-overlapping sub-segments that sum to T. # Sample Input ``` 3 6 8 1 2 3 4 5 3 5 5 7 1 2 3 4 5 8 3 1 1 1 1 1 1 1 1 ``` # Sample Output ``` 1 1 2 ``` # Explanation - In the first test case, the only sub-segment with a sum of 8 is `[3, 5]`. - In the second test case, the only sub-segment with a sum of 7 is `[3, 4]`. - In the third test case, the two non-overlapping sub-segments with a sum of 3 are `[1, 1, 1]` and `[1, 1, 1]`. Help the wizard by calculating the correct result for each test case!","solution":"def max_non_overlapping_subsegments(T, energy_levels): Finds the maximum number of non-overlapping sub-segments whose sum is T. Parameters: T (int): Target energy value. energy_levels (list of int): List of energy levels of the stones. Returns: int: Maximum number of non-overlapping sub-segments whose sum is T. current_sum = 0 sum_count = {0: -1} max_count = 0 last_index = -1 for i, num in enumerate(energy_levels): current_sum += num if current_sum - T in sum_count: if sum_count[current_sum - T] >= last_index: max_count += 1 last_index = i sum_count[current_sum] = i return max_count def process_test_cases(test_cases): results = [] for n, T, energy_levels in test_cases: results.append(max_non_overlapping_subsegments(T, energy_levels)) return results"},{"question":"# Sum of Positive Numbers Create a function that takes an array of numbers as an input and returns the sum of all positive numbers in the array. If there are no positive numbers, the function should return 0. # Example ```python sum_of_positives([1, -2, 3, 4, -5]) # Returns 8 sum_of_positives([-1, -2, -3, -4, -5]) # Returns 0 sum_of_positives([]) # Returns 0 ``` # Constraints - The input array can contain both positive and negative integers as well as zero. - Elements of the array are bounded by -1000 <= number <= 1000. - No need to handle non-numeric inputs.","solution":"def sum_of_positives(numbers): Returns the sum of all positive numbers in the given array. If there are no positive numbers, the function returns 0. return sum(num for num in numbers if num > 0)"},{"question":"A company has a fleet of delivery trucks, and each truck has a set of packages to deliver to different locations. Each location has a weight limit, and the packages have different weights. The company wants to maximize the number of locations visited with the given packages. Here is a simplified version of the problem: You are given an array `weights` where `weights[i]` represents the weight of the ith package. You are also given an array `limits` where `limits[j]` represents the weight limit of the jth location. A truck can only visit a location if the sum of the weights of the packages it carries does not exceed the location\'s weight limit. Each package can be delivered to only one location. Your task is to determine the maximum number of locations the truck can visit. -----Input----- The first line of input contains two integers `m` and `n` (1 ≤ m, n ≤ 10^5) — the number of packages and the number of locations, respectively. The second line contains `m` integers — the weights of the packages `weights[1], weights[2], ..., weights[m]` (1 ≤ weights[i] ≤ 10^4). The third line contains `n` integers — the weight limits of the locations `limits[1], limits[2], ..., limits[n]` (1 ≤ limits[j] ≤ 10^4). -----Output----- Print a single integer — the maximum number of locations the truck can visit. -----Example----- Input 5 3 4 2 5 1 3 7 3 6 Output 3 -----Note----- In the sample case, one way to visit the maximum number of locations is: - Deliver package with weight 4 and weight 1 to the location with limit 7. - Deliver package with weight 2 to the location with limit 3. - Deliver package with weight 3 to the location with limit 6. Thus, the truck can visit 3 locations.","solution":"def max_locations_visited(weights, limits): Determines the maximum number of locations the truck can visit given package weights and location limits. Args: weights (list): List of integers representing the weights of the packages. limits (list): List of integers representing the weight limits of the locations. Returns: int: Maximum number of locations the truck can visit. # Sort the weights and limits in ascending order weights.sort() limits.sort() i, j = 0, 0 visited = 0 # Use two pointers to iterate through the weights and limits arrays while i < len(weights) and j < len(limits): if weights[i] <= limits[j]: # If current package weight can be added to current location\'s limit visited += 1 i += 1 j += 1 else: # Move to the next location, current package is too heavy j += 1 return visited"},{"question":"You are given a binary tree where each node contains a digit (0-9). The path sum of a binary tree is the sum of all the values from the root to a leaf node. Write a program to find out the maximum path sum from the root to a leaf. A binary tree is represented using the following structure: class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right Input The input will be provided in the following format: A list of tuples, where each tuple represents a node, its left child, and its right child in the format (value, left, right). If a node does not have a left or right child, it will be represented as None. Example: [(1, 2, 3), (2, 4, 5), (3, None, None), (4, None, None), (5, None, None)] The binary tree for the above example looks like this: 1 / 2 3 / 4 5 Output Return an integer representing the maximum path sum from the root to a leaf. Example: Input: [(1, 2, 3), (2, 4, 5), (3, None, None), (4, None, None), (5, None, None)] Output: 8 Explanation: The paths from root to leaf are 1->2->4, 1->2->5, and 1->3. The sums of these paths are 7, 8, and 4, respectively. The maximum path sum is 8.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(node_list): if not node_list: return None nodes = {val: TreeNode(val) for val, left, right in node_list} for val, left, right in node_list: if left is not None: nodes[val].left = nodes[left] if right is not None: nodes[val].right = nodes[right] return nodes[node_list[0][0]] def max_path_sum(node): if not node: return 0 if not node.left and not node.right: return node.val if not node.left: return node.val + max_path_sum(node.right) if not node.right: return node.val + max_path_sum(node.left) left_sum = max_path_sum(node.left) right_sum = max_path_sum(node.right) return node.val + max(left_sum, right_sum) def find_max_path_sum(node_list): root = build_tree(node_list) return max_path_sum(root)"},{"question":"Calculate the k-th Harmonic Number. A Harmonic number H_k is the sum of the reciprocals of the first k natural numbers, i.e., H_k = 1 + 1/2 + 1/3 + ... + 1/k. Example 1: Input: k = 3 Output: 1.8333 Explanation: H_3 = 1 + 1/2 + 1/3 = 1 + 0.5 + 0.3333 = 1.8333 Example 2: Input: k = 5 Output: 2.2833 Explanation: H_5 = 1 + 1/2 + 1/3 + 1/4 + 1/5 = 1 + 0.5 + 0.3333 + 0.25 + 0.2 = 2.2833 Your Task: You don\'t need to read input or print anything. Your task is to complete the function kthHarmonicNumber() which takes an integer k and returns the value rounded to 4 decimal places. Expected Time Complexity: O(k) Expected Auxiliary Space: O(1) Constraints: 1 <= k <= 10^{6}","solution":"def kthHarmonicNumber(k): Calculate the k-th Harmonic Number rounded to 4 decimal places. Args: k: int - The position of the harmonic number to compute. Returns: float - The k-th harmonic number rounded to 4 decimal places. harmonic_sum = 0.0 for i in range(1, k+1): harmonic_sum += 1 / i return round(harmonic_sum, 4)"},{"question":"Henry loves to explore different cities. To plan his trip, he wants to visit all the cities assigned to him such that he can cover the trip with minimal traveling distance. To simplify, he can start his journey from any city and visit all the other cities exactly once and return to the starting point. Henry needs help determining the optimal route to minimize the distance traveled. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10) — the number of cities. Each of the next n lines contains n integers. The j-th integer in the i-th line represents the distance between city i and city j (0 ≤ distance ≤ 1000). It is guaranteed that the distance between a city and itself is zero and the distance from city i to city j is the same as from city j to city i. -----Output----- Print a single integer — the minimal distance Henry has to travel to visit all cities exactly once and return to the starting point. -----Examples----- Input 4 0 20 42 35 20 0 30 34 42 30 0 12 35 34 12 0 Output 97 Input 3 0 10 15 10 0 35 15 35 0 Output 60 -----Note----- In the first test case, the optimal route could be: Start at city 1, then travel from city 1 to city 2 (distance 20), from city 2 to city 4 (distance 34), from city 4 to city 3 (distance 12), and from city 3 to city 1 (distance 35). The total distance would be 20 + 34 + 12 + 35 = 97. In the second test case, an example optimal route is starting at city 1, then traveling from city 1 to city 2 (distance 10), from city 2 to city 3 (distance 35), and from city 3 back to city 1 (distance 15), resulting in a total distance of 60.","solution":"from itertools import permutations def minimal_travel_distance(n, distances): Returns the minimal distance Henry has to travel to visit all cities exactly once and return to the starting point. city_indices = range(n) min_distance = float(\'inf\') for perm in permutations(city_indices): current_distance = 0 for i in range(n): current_distance += distances[perm[i]][perm[(i + 1) % n]] min_distance = min(min_distance, current_distance) return min_distance"},{"question":"In a programming competition, there are multiple tasks related to the processing of numerical sequences. Each task specifies a particular operation to be performed on the sequence of numbers. TASKS WITH THEIR DESCRIPTIONS: Sumprob n -> Calculate the sum of the first n numbers in the sequence. For example, if the input sequence is [3, 5, 2, 8], and the task is Sumprob 3, the output should be 10 (3 + 5 + 2). Maxseq n -> Find the maximum number within the first n numbers of the sequence. For example, if the sequence is [4, 7, 1, 6, 3], and the task is Maxseq 4, the output should be 7, as it is the maximum number among the first 4 numbers. Meanprob n -> Compute the mean (average) of the first n numbers in the sequence. For example, if the sequence is [10, 20, 30, 40, 50], and the task is Meanprob 5, the output should be 30 ((10 + 20 + 30 + 40 + 50) / 5). The competition participant decides to write a program to automate these tasks. Input FORMAT The first line inputs the sequence of integers separated by spaces. Next line denotes the number of test cases T. The next T lines contain the tasks, each specifying an operation with the format task_name n. Output Format The output after performing each task, one per line. SAMPLE INPUT 12 4 7 9 15 3 Sumprob 4 Maxseq 3 Meanprob 5 SAMPLE OUTPUT 32 9 9.4","solution":"def process_sequence(sequence, tasks): results = [] for task in tasks: task_name, n = task.split() n = int(n) if task_name == \\"Sumprob\\": result = sum(sequence[:n]) elif task_name == \\"Maxseq\\": result = max(sequence[:n]) elif task_name == \\"Meanprob\\": result = sum(sequence[:n]) / n results.append(result) return results # Example of how to call the function with given inputs def main(): input_sequence = list(map(int, input().split())) t = int(input()) tasks = [input().strip() for _ in range(t)] results = process_sequence(input_sequence, tasks) for res in results: print(res) if __name__ == \\"__main__\\": main()"},{"question":"A group of developers is working on a project that requires them to determine the popularity of certain keywords within a list of documents. They want to build a keyword analysis tool that can help identify the frequency of these keywords across all documents. You are given: - A list of keywords. - A list of documents, each document being a string of words. Your task is to write a function that takes the list of keywords and the list of documents and returns a list of integers, where each integer represents the frequency of the corresponding keyword in the list of keywords across all documents. **Input** - The first line of input contains an integer K, the number of keywords. - The next K lines each contain one keyword. - The following line contains an integer D, the number of documents. - The next D lines each contain one document. **Output** - Output K lines, each containing one integer which represents the frequency of the corresponding keyword in the keywords list across all documents. **Constraints** - 1 <= K <= 100 - 1 <= D <= 100 - Each keyword and document contains only lowercase alphabetical characters and spaces. **Sample Input** ``` 3 keyword1 keyword2 keyword3 2 this is a document containing keyword1 and another keyword1 another document with keyword2 ``` **Sample Output** ``` 2 1 0 ``` **Explanation** - The first keyword \\"keyword1\\" appears twice in the documents. - The second keyword \\"keyword2\\" appears once in the documents. - The third keyword \\"keyword3\\" does not appear in any document.","solution":"def keyword_analysis(keywords, documents): Returns a list of integers where each integer represents the frequency of the corresponding keyword in the keywords list across all documents. freq = [0] * len(keywords) for i, keyword in enumerate(keywords): for doc in documents: freq[i] += doc.split().count(keyword) return freq # Example usage: # keywords = [\\"keyword1\\", \\"keyword2\\", \\"keyword3\\"] # documents = [\\"this is a document containing keyword1 and another keyword1\\", # \\"another document with keyword2\\"] # print(keyword_analysis(keywords, documents)) # Output: [2, 1, 0]"},{"question":"A city\'s road network can be represented as an undirected graph where each node represents an intersection and each edge represents a road of a certain length. The mayor has decided to install a traffic surveillance system across the city. The mayor wants to place cameras such that every road in the city is under surveillance. Each camera placed at an intersection can monitor all roads connected to that intersection. Given the city\'s road network, determine the minimum number of cameras needed to ensure that every road is monitored. Also, provide one set of intersections where the cameras should be installed to achieve this minimum coverage. Input The first line contains two integers n and m (1 ≤ n ≤ 5000, 0 ≤ m ≤ 10000), where n is the number of intersections and m is the number of roads. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n), indicating a road between intersections u and v. There will be no duplicate roads and no self-loops. Output Print the minimum number of cameras needed. On the next line, print the set of intersections where the cameras should be installed. If there are multiple solutions, you can print any. Examples Input 4 3 1 2 2 3 3 4 Output 2 1 3 Input 6 5 1 2 2 3 3 4 4 5 5 6 Output 3 1 3 5 Note In the first sample, placing cameras at intersections (1 and 3) will monitor all roads. In the second sample, intersections (1, 3, and 5) provide the minimum cameras necessary to monitor all roads. Note that other combinations like (2, 4, and 6) are also valid.","solution":"def min_cameras(n, m, roads): from collections import defaultdict, deque graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) cameras = set() def bfs(start): q = deque([start]) visited[start] = True while q: node = q.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True q.append(neighbor) cameras.add(node) break # Only add one node from this BFS search for i in range(1, n + 1): if not visited[i] and len(graph[i]) > 0: bfs(i) return len(cameras), list(cameras) def process_input(input_data): lines = input_data.split(\'n\') n, m = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:m+1]] return min_cameras(n, m, roads) # Example usage example_input = \\"4 3n1 2n2 3n3 4\\" print(process_input(example_input)) # Output: (2, [1, 3]) example_input = \\"6 5n1 2n2 3n3 4n4 5n5 6\\" print(process_input(example_input)) # Output: (3, [1, 3, 5])"},{"question":"Alice loves playing with arrays. She often creates challenges for herself to improve her problem-solving skills. One day, she came up with a new problem. She has an array of integers and wants to find all the contiguous subarrays which have the product of their elements less than a given integer K. Formally, given an array A of size N and an integer K, find the number of contiguous subarrays from the array whose product of elements is less than K. Input format The first line of input contains T denoting the number of test cases. The first line of input for each test case contains two space-separated integers N and K. The second line of input for each test case contains N space-separated integers denoting the elements of the array A. Output format For each test case, output one integer per line, the number of contiguous subarrays whose product of the elements is less than K. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 1000 1 ≤ K ≤ 10^9 Sub-tasks For 25% points: 1 ≤ N ≤ 10 For 75% points: original constraints SAMPLE INPUT 1 4 10 1 2 3 4 SAMPLE OUTPUT 7 Explanation The 7 subarrays whose product of elements is less than 10 are: (1), (2), (3), (4), (1, 2), (2, 3), and (3, 4).","solution":"def count_subarrays_with_product_less_than_k(arr, n, k): Returns the number of contiguous subarrays with product less than k. count = 0 product = 1 left = 0 for right in range(n): product *= arr[right] while product >= k and left <= right: product //= arr[left] left += 1 count += (right - left + 1) return count def solve_test_cases(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] arr = test_cases[i][1] result = count_subarrays_with_product_less_than_k(arr, N, K) results.append(result) return results"},{"question":"# Story Imagine you\'re designing a simple text editor where users can type sentences and apply some basic text manipulations. One of the features you want to add is word frequency counting; however, you\'re specifically interested in counting \\"unique\\" words—that is, words that appear only once in the text. # Task Write a function called `count_unique_words` that takes a string `text` as an input and returns the number of unique words in the text. # Example For the input text: \\"I love coding and I love learning.\\" The word frequencies are: \'I\' -> 2, \'love\' -> 2, \'coding\' -> 1, \'and\' -> 1, \'learning\' -> 1. The words \\"coding\\", \\"and\\", and \\"learning\\" are unique, appearing only once. So the function should return `3`. # Notes * Words are case-insensitive. Treat \\"Word\\" and \\"word\\" as the same word. * The input text consists of English alphabets and spaces. * A word is defined as a sequence of characters separated by one or more spaces. * Punctuation marks do not need to be considered for this question. For example, \\"hello.\\" and \\"hello\\" can be treated as the same word.","solution":"def count_unique_words(text): Counts the number of unique words in the given text. A unique word is defined as a word that appears exactly once in the text. Parameters: text (str): The text to analyze. Returns: int: The number of unique words. from collections import Counter # Convert text to lowercase and split into words words = text.lower().split() # Counting words using Counter word_count = Counter(words) # Filtering unique words unique_words = [word for word, count in word_count.items() if count == 1] return len(unique_words)"},{"question":"You are given an integer array of size N. Your task is to check whether the array is a Fibonacci array or not. A Fibonacci array is one in which every element is the sum of the two preceding ones, starting with 0 and 1. Example 1: Input: N = 6, arr = [0, 1, 1, 2, 3, 5] Output: YES Explanation: The given array follows the Fibonacci sequence. Example 2: Input: N = 5, arr = [0, 1, 1, 3, 4] Output: NO Explanation: The given array does not follow the Fibonacci sequence. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isFibonacciArray() which takes the integer array and its length as inputs and returns true if it is a Fibonacci array, else false. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^6","solution":"def isFibonacciArray(arr, N): Checks whether the array is a Fibonacci array. # Early exits for short lists if N == 0: return False if N == 1: return arr[0] == 0 if N == 2: return arr[0] == 0 and arr[1] == 1 # Verify that the array follows the Fibonacci rule if arr[0] != 0 or arr[1] != 1: return False for i in range(2, N): if arr[i] != arr[i-1] + arr[i-2]: return False return True"},{"question":"You are given a list of integers that represent the heights of buildings. Each building\'s width is exactly 1. It starts raining and water is collected between the buildings. Your task is to calculate how much water is collected. Example 1: Input: heights = [4,2,0,3,2,5] Output: 9 Explanation: The water is trapped as follows: [ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ (List positions [2] and [4] collect the water: 2 units each, and positions [1] collects 2 units and [3] collects 3 units, so in total 2+2+3+2 = 9 units of water) Example 2: Input: heights = [1,0,2,0,1] Output: 2 Explanation: The water is trapped as follows: [ █ █ █ █ █ █ █ █ █ (Positions [1] and [3] each collect 1 unit of water, so total 1+1=2 units) Your Task: You don\'t need to read input or print anything. You only need to complete the function trap_water() that takes a list of integers heights and returns an integer denoting the total amount of trapped water. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(heights) <= 10^5 0 <= heights[i] <= 10^5","solution":"def trap_water(heights): if not heights: return 0 n = len(heights) left, right = 0, n - 1 left_max, right_max = heights[left], heights[right] water_trapped = 0 while left < right: if heights[left] < heights[right]: left += 1 left_max = max(left_max, heights[left]) water_trapped += left_max - heights[left] else: right -= 1 right_max = max(right_max, heights[right]) water_trapped += right_max - heights[right] return water_trapped"},{"question":"Given an integer \'n\', print a pattern of diamond shape using the \'*\' symbol. Value of n>2 and n is an odd positive integer. Example: 1) Input: n=3 Output: * *** * 2) Input: n=5 Output: * *** ***** *** * SAMPLE INPUT: 7 SAMPLE OUTPUT: * *** ***** ******* ***** *** * Explanation The diamond shape is printed across 7 lines as shown above.","solution":"def print_diamond(n): Prints a diamond pattern of \'*\' symbols with the width determined by n. n must be an odd positive integer greater than 2. if n <= 2 or n % 2 == 0: raise ValueError(\\"The value of n must be an odd positive integer greater than 2.\\") # Generate the top half of the diamond including the center line for i in range(n // 2 + 1): print(\' \' * (n // 2 - i) + \'*\' * (2 * i + 1)) # Generate the bottom half of the diamond for i in range(n // 2 - 1, -1, -1): print(\' \' * (n // 2 - i) + \'*\' * (2 * i + 1))"},{"question":"A security company has developed a new software to monitor and manage the access to secure buildings. The software logs every access attempt with a unique ID and the status of the attempt (granted or denied). To improve their service, they want to analyze the log to find out how many consecutive access attempts were granted for each attempt that was denied. Given a log of access attempts, write a function to determine the number of consecutive granted access attempts directly preceding each denied access attempt. The access log will be in the form of a string where each character represents an access attempt. The character \'G\' indicates a granted access attempt, and the character \'D\' indicates a denied access attempt. -----Input----- The input will be a single string consisting of characters \'G\' and \'D\' only. The length of the string will be at most 10,000. -----Output----- Output a list of integers where each integer represents the number of consecutive granted access attempts preceding each denied access attempt. If there are no denied access attempts, output an empty list. -----Examples----- Sample Input 1: GGDGGGDGGD Sample Output 1: [2, 3, 2] Sample Input 2: GGGG Sample Output 2: [] Sample Input 3: DGGDG Sample Output 3: [0, 2]","solution":"def analyze_access_log(access_log): Analyzes the access log to find the number of consecutive granted access attempts preceding each denied access attempt. Parameters: access_log (str): A string with characters \'G\' and \'D\' representing granted and denied access attempts. Returns: list: A list of integers representing the count of consecutive \'G\' preceding each \'D\'. results = [] count = 0 for char in access_log: if char == \'G\': count += 1 elif char == \'D\': results.append(count) count = 0 return results"},{"question":"You are given an array of N integers, and the task is to perform a series of operations to transform the array in such a way that all the even numbers are moved to the front of the array, while maintaining their relative order. Similarly, all the odd numbers should be moved to the back of the array while maintaining their relative order. You can use an additional array to achieve this, but the solution should involve reorganizing the elements by performing the minimal number of moves. -----Constraints----- - 1 ≤ N ≤ 10^5 - 0 ≤ a_i ≤ 10^9 -----Input----- The input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the transformed array with all even numbers at the front and odd numbers at the back while maintaining their relative order. -----Sample Input----- 7 4 1 3 2 6 5 8 -----Sample Output----- 4 2 6 8 1 3 5 Explanation: The even numbers (4, 2, 6, 8) are moved to the front while maintaining their relative order. The odd numbers (1, 3, 5) are moved to the back while maintaining their relative order.","solution":"def rearrange_even_odd(arr): Rearrange the array such that all even numbers come before odd numbers while maintaining their relative order. Parameters: arr (list): The list of integers to be rearranged. Returns: list: The rearranged list. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] result = evens + odds return result"},{"question":"Polycarp is planning to distribute candy bags to children for a charity event. Each candy bag contains several candies, but by event rules, no two children should receive the same number of candies. Polycarp can prepare n bags containing x to y candies each. He wants to maximize the total number of candies distributed, while following the rules. Write a program to help Polycarp determine the maximum total number of candies he can distribute under these constraints. -----Input----- The first line contains three integers n, x, and y (1 ≤ n ≤ 100, 1≤ x ≤ y ≤ 10^6). -----Output----- Print a single integer, the maximum total number of candies Polycarp can distribute. -----Examples----- Input 3 1 5 Output 12 Input 4 2 8 Output 26 -----Note----- In the first example, Polycarp can prepare bags with 3, 4, and 5 candies (1 + 2 + 3 does not maximize the total number). In the second example, he can prepare bags with 5, 6, 7, and 8 candies.","solution":"def max_candies(n, x, y): Returns the maximum total number of candies Polycarp can distribute in n bags with each bag containing a unique number of candies between x and y. # Start from the highest candy count and go down to maximize the sum if n > (y - x + 1): return -1 # This should not happen based on the constraints total_candies = 0 for i in range(n): total_candies += (y - i) return total_candies"},{"question":"# Task You are provided an array of integers `arr`. Your task is to rearrange elements of this array such that the difference between any two adjacent elements is minimized. Your function should return this rearranged array. The array should be rearranged in-place, and you should make sure that the relative order of the elements is preserved as much as possible. Function Signature: ```python def rearrange_array_minimize_difference(arr: List[int]) -> List[int]: pass ``` # Example For `arr = [4, 2, 1, 3]`, the output should be `[2, 1, 3, 4]`. For `arr = [10, 1, 5]`, the output should be `[5, 10, 1]`. # Constraints - The input array `arr` will have length between 2 and 10^5. - Each element in the array is an integer between -10^6 and 10^6.","solution":"from typing import List def rearrange_array_minimize_difference(arr: List[int]) -> List[int]: Rearranges elements of the array such that the difference between any two adjacent elements is minimized. arr.sort() # Sort the array to minimize differences return arr # Return the sorted array"},{"question":"John is playing a game with a sequence of numbers. The game involves making moves on an array of n numbers. In one move, he can select any continuous subarray and reverse it. The goal is to sort the array in non-decreasing order using the minimum number of moves. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) – the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) – the elements of the array. -----Output----- Print the minimum number of moves required to sort the array in non-decreasing order. -----Examples----- Input 3 3 2 1 Output 1 Input 5 5 1 2 3 4 Output 2 Input 4 4 3 2 1 Output 2 -----Note----- Consider the first sample. By reversing the whole array [3, 2, 1] into [1, 2, 3], John can sort the array in one move. In the second sample, John can first reverse the subarray [5, 1, 2, 3, 4] into [4, 3, 2, 1, 5]. Then, he can reverse the subarray [4, 3, 2, 1] into [1, 2, 3, 4, 5], sorting the array in two moves.","solution":"def min_moves_to_sort(n, arr): Given an array of n integers, returns the minimum number of moves required to sort the array in non-decreasing order by reversing any continuous subarray. # Find the first position where the array is not ordered start = 0 while start < n - 1 and arr[start] <= arr[start + 1]: start += 1 # If the array is already sorted if start == n - 1: return 0 # Find the first position from the end where the array is not ordered end = n - 1 while end > 0 and arr[end] >= arr[end - 1]: end -= 1 # If reversing the entire sequence from start to end does not sort the array if arr[:start] + list(reversed(arr[start:end+1])) + arr[end+1:] != sorted(arr): return 2 return 1"},{"question":"Write a function `find_max_sum` that takes a list of integers as input, and returns the maximum sum that can be obtained by summing a contiguous subarray. A contiguous subarray is a subarray created by taking a single segment of an array (i.e., without reordering elements). # Input - A single line containing multiple integers separated by spaces. # Output - A single integer representing the maximum sum of a contiguous subarray. # Constraints - The input list can contain up to `10^6` integers. - The integers in the list can have values between `-10^3` and `10^3`. # Example **Input:** ``` -2 1 -3 4 -1 2 1 -5 4 ``` **Output:** ``` 6 ``` **Explanation:** The contiguous subarray `[4, -1, 2, 1]` has the largest sum = 6. # Notes - Use efficient algorithms suitable for large input sizes. - Handle edge cases such as all negative numbers or a single element array. - Avoid using brute force solutions that may not run efficiently for the upper constraint limits.","solution":"def find_max_sum(nums): Returns the maximum sum of a contiguous subarray. :param nums: List of integers. :return: Integer, the maximum sum. if not nums: return 0 # Initialize our variables max_sum = nums[0] # Max sum so far current_sum = nums[0] # Current sum of the subarray # Iterate over the array starting from the second element for num in nums[1:]: # Update current_sum to be either the current number itself or # the current_sum + current number, whichever is larger current_sum = max(num, current_sum + num) # Update max_sum if current_sum is larger than max_sum max_sum = max(max_sum, current_sum) return max_sum # Helper function to handle input and output def process_input(input_line): nums = list(map(int, input_line.strip().split())) return find_max_sum(nums)"},{"question":"Given a string s, write a function to determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. Note: For the purpose of this question, define a palindrome as a word, phrase, or sequence that reads the same backward as forward while ignoring spaces, punctuation, and cases. Examples: isPalindrome(\\"A man, a plan, a canal: Panama\\") -> true isPalindrome(\\"race a car\\") -> false","solution":"def isPalindrome(s: str) -> bool: Determines if the given string is a palindrome, considering only alphanumeric characters and ignoring cases. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = \'\'.join(c.lower() for c in s if c.isalnum()) # Compare the string with its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"An earthquake shook the city of Anagramland, causing some string mix-ups! You have a list of pairs of strings; each pair represents two possible anagrams. Your task is to determine if each pair of strings can be rearranged to form an exact match of one another. Write a function to check these pairs and output the results. Input The input consists of an integer n (1 ≤ n ≤ 10^3), the number of pairs. The next 2 * n lines contain pairs of strings a and b, one on each line. The length of each string is between 1 and 100, and they consist of lowercase English letters only. Output Output n lines, each containing \\"Yes\\" if the two strings are anagrams, or \\"No\\" otherwise. Example Input 3 listen silent triangle integral apple pale Output Yes Yes No","solution":"def are_anagrams(str1, str2): Check if two strings are anagrams. return sorted(str1) == sorted(str2) def check_anagram_pairs(pairs): Given a list of pairs of strings, determine if each pair are anagrams. results = [] for str1, str2 in pairs: if are_anagrams(str1, str2): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given two strings A and B of equal length. Your task is to determine the minimum number of adjacent swaps required to transform string A into string B. If it\'s not possible, return -1. Example: Input: A = \\"abac\\" B = \\"baca\\" Output: 2 Explanation: One of the ways to transform A into B is: \\"abac\\" → \\"baac\\" (swap a and b) \\"baac\\" → \\"baca\\" (swap a and c) Your Task: Complete the function minSwaps(), which takes two strings A and B as input and returns the minimum number of adjacent swaps required. Return -1 if transformation is not possible. Expected Time Complexity: O(N^2). Expected Auxiliary Space: O(1). Constraints: 1 <= len(A), len(B) <= 10^3","solution":"def minSwaps(A, B): Returns the minimum number of adjacent swaps required to transform string A into string B. If it\'s not possible, return -1. if sorted(A) != sorted(B): return -1 n = len(A) swaps = 0 A = list(A) for i in range(n): if A[i] != B[i]: # Find index j where A[j] == B[i] j = i while j < n and A[j] != B[i]: j += 1 # Bring A[j] to A[i] by swapping adjacent elements while j > i: A[j], A[j-1] = A[j-1], A[j] j -= 1 swaps += 1 return swaps"},{"question":"You are given an integer array `nums` representing the prices of items in a store, where the ith item is priced at `nums[i]`. Your task is to write a function that determines the maximum profit you can achieve by buying one item and selling another item afterwards. Note that you must buy the item before you sell it and you cannot sell an item before you buy it. Write a function `maxProfit` that takes in a list of integers `nums` and returns an integer representing the maximum profit you can achieve. If no profit is possible, return 0. ```python def maxProfit(nums): # Your code here ``` # Examples Example 1: Input: `nums = [7, 1, 5, 3, 6, 4]` Output: `5` Explanation: Buy on day 2 (price 1) and sell on day 5 (price 6), profit = 6 - 1 = 5. Example 2: Input: `nums = [7, 6, 4, 3, 1]` Output: `0` Explanation: In this case, no transactions are done and the max profit is 0. # Constraints - `1 <= nums.length <= 10^5` - `0 <= nums[i] <= 10^5`","solution":"def maxProfit(nums): This function takes a list of prices and returns the maximum profit that can be achieved by buying one item and selling another item afterwards. if not nums or len(nums) < 2: return 0 min_price = nums[0] max_profit = 0 for price in nums[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You have an undirected graph with n nodes and m edges. Your task is to determine if it is possible to delete a subset of the edges such that the graph becomes a tree (connected and acyclic). An undirected graph is represented with n nodes labeled from 1 to n and m edges. Your goal is to check if it\'s possible to remove some of the edges to make the remaining graph a tree. A tree is an undirected graph that is connected and does not contain any cycles. -----Input----- The first line contains two integers n (1 le n le 1000) and m (0 le m le 10000). Each of the next m lines contains two integers u and v (1 le u < v le n) indicating there is an edge between node u and node v. -----Output----- Print \\"YES\\" if it is possible to delete some edges such that the remaining graph is a tree, otherwise print \\"NO\\". -----Examples----- Input 5 4 1 2 2 3 3 4 4 5 Output YES Input 4 5 1 2 1 3 2 3 3 4 4 1 Output NO","solution":"def can_form_tree(n, m, edges): Determines if it is possible to delete a subset of the edges such that the graph becomes a tree (connected and acyclic). Args: n (int): Number of nodes m (int): Number of edges edges (List[Tuple[int, int]]): List of edges Returns: str: \\"YES\\" if it is possible to delete some edges to form a tree, otherwise \\"NO\\" from collections import defaultdict if m < n - 1: return \\"NO\\" parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY return True return False for u, v in edges: if not union(u - 1, v - 1): return \\"NO\\" root_count = len(set(find(i) for i in range(n))) return \\"YES\\" if root_count == 1 else \\"NO\\""},{"question":"You are given a data structure that contains nested lists. Each element in the data structure can be either an integer or another nested list. Your task is to implement a function that flattens this data structure into a single list of integers. That is, the function should take a nested list of integers and return a flat list containing all the integers in the nested list, in the same order they appeared. Input A single nested list of integers. The depth of the nesting can be significant, but all elements within the innermost lists are integers. Output A single list of integers containing all the integers from the nested input list. Constraints - The total number of integers across all the lists does not exceed 100000. - The depth of nesting does not exceed 50. - Each integer fits within the standard 32-bit integer range. Function Signature ```python def flatten_list(nested_list): pass ``` Example Input ```python [[1, 2, [3, 4]], [5, 6], 7, [8, [9, 10, [11, 12]]]] ``` Output ```python [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] ``` Explanation The input nested list contains integers directly and within sub-lists. The output is a flat list of all those integers in the order they appear from left to right, top to bottom.","solution":"def flatten_list(nested_list): Flattens a nested list of integers into a single list of integers. Args: nested_list (list): A nested list of integers Returns: list: A single flat list of integers flat_list = [] def flatten(nl): for elem in nl: if isinstance(elem, list): flatten(elem) else: flat_list.append(elem) flatten(nested_list) return flat_list"},{"question":"You are given an array of n integers and a target value x. Your task is to determine if there exists a non-empty subarray that sums up to x. A subarray is a contiguous part of the array. ------ Input Format ------ - The first line of input contains an integer n, denoting the size of the array. - The second line contains n space-separated integers, representing the elements of the array. - The third line contains a single integer x, the target sum. ------ Output Format ------ Output the string YES if there exists a subarray that sums up to x, and NO if there does not. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ n ≤ 10^5 -10^9 ≤ text{array elements} ≤ 10^9 -10^{18} ≤ x ≤ 10^{18} ----- Sample Input 1 ------ 5 1 2 3 4 5 9 ----- Sample Output 1 ------ YES ----- Explanation 1 ------ A subarray [2,3,4] has the sum 9. ----- Sample Input 2 ------ 6 1 -1 3 2 -5 4 7 ----- Sample Output 2 ------ NO ----- Explanation 2 ------ There is no contiguous subarray that sums up to 7.","solution":"def does_subarray_sum_to_x(n, array, x): Determines if there exists a non-empty subarray that sums up to x. :param n: int, size of the array :param array: list of int, elements of the array :param x: int, target sum :return: \'YES\' if such a subarray exists, otherwise \'NO\' current_sum = 0 prefix_sums = {0} for num in array: current_sum += num if (current_sum - x) in prefix_sums: return \'YES\' prefix_sums.add(current_sum) return \'NO\'"},{"question":"In the kingdom of Algorithmia, there are n small villages connected by m bidirectional roads. An oracle has prophesied that a special event will occur only if there is a cycle in the road network which allows travel from a village to itself. A cycle is defined as a sequence of roads (v_1, v_2), (v_2, v_3), ldots, (v_{k-1}, v_k), (v_k, v_1) where all v_i are distinct and k ge 3. Help the villagers determine whether such a cycle exists in their road network. -----Input----- The first line contains two integers n and m — the number of villages and the number of bidirectional roads (1 le n le 100,000, 0 le m le 200,000). Each of the next m lines contains two integers u and v — indicating a bidirectional road between village u and village v (1 le u, v le n). -----Output----- Output a single word \\"YES\\" if there exists a cycle in the network, and \\"NO\\" otherwise. -----Example----- Input 5 5 1 2 1 3 2 3 3 4 4 5 Output YES -----Note----- In the example, a cycle exists among villages 1, 2, and 3. So the output is \\"YES\\".","solution":"def has_cycle(n, m, edges): from collections import defaultdict def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\""},{"question":"You are given a grid of size m by n where each cell contains a non-negative integer representing the height of a terrain. You can perform the following operation, which works like leveling the terrain using a bulldozer: * pick a height — an integer h; * choose a cell in the grid; * for all cells connected to the selected cell (two cells are considered connected if they share an edge), change their heights to the chosen height if their current height is less than or equal to the chosen height. Compute the minimum number of operations needed to make all the cells in the grid have the same height. Input Each test contains multiple test cases. The first line contains the number of test cases t (1 ≤ t ≤ 100). The first line of each test case contains two integers m and n (1 ≤ m, n ≤ 50) — the number of rows and columns in the grid. The next m lines each contain n integers h_i_1, h_i_2, …, h_i_n (0 ≤ h_i_j ≤ 500) — the heights of the cells in the grid. Output For each test case, print one integer: the minimum number of operations needed to make all the cells in the grid have the same height. Example Input 2 3 3 1 2 3 2 3 4 3 4 5 2 2 1 2 3 4 Output 3 2 Note In the first example, one possible way to make all the cells have the same height is to apply the operation on (1, 1) changing its height to 4, then on (2, 2) changing its height to 4, and finally on (3, 3) changing its height to 4. The sequence of operations is then: [1, 2, 3] -> [4, 4, 4] [2, 3, 4] -> [4, 4, 4] [3, 4, 5] -> [4, 4, 4] In the second example, one possible way to make all the cells have the same height is to apply the operation on (1, 2) changing its height to 4, then on (2, 2) changing its height to 4. The sequence of operations is then: [1, 2] -> [3, 4] [3, 4] -> [3, 4]","solution":"def min_operations_to_level_terrain(t, test_cases): results = [] for case in test_cases: m, n, grid = case[\'m\'], case[\'n\'], case[\'grid\'] max_height = 0 unique_heights = set() for row in grid: for height in row: unique_heights.add(height) if height > max_height: max_height = height results.append(len(unique_heights) - 1) return results # Example usage: t = 2 test_cases = [ {\'m\': 3, \'n\': 3, \'grid\': [[1, 2, 3], [2, 3, 4], [3, 4, 5]]}, {\'m\': 2, \'n\': 2, \'grid\': [[1, 2], [3, 4]]} ] print(min_operations_to_level_terrain(t, test_cases)) # Should output [3, 2]"},{"question":"Chef is considering visiting a new restaurant in town. The restaurant offers N different dishes, each having a distinct price. Chef has C coins and wants to maximize the number of different dishes he can try with his available budget. Given the prices of the dishes and the total number of coins Chef has, determine the maximum number of different dishes Chef can afford. ------ Input Format ------ - The first line of input will contain an integer T — the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and C — the number of dishes and the number of coins Chef has. - The second line of each test case contains N integers, representing the prices of the dishes. ------ Output Format ------ For each test case, output a single integer — the maximum number of different dishes Chef can afford with his given budget. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^4 1 ≤ C ≤ 10^9 1 ≤ price of each dish ≤ 10^4 ----- Sample Input 1 ------ 2 5 15 1 12 5 7 3 4 10 9 8 5 2 ----- Sample Output 1 ------ 3 2 ----- explanation 1 ------ Test case 1: Chef has 15 coins and prices of dishes are [1, 12, 5, 7, 3]. The optimal way for Chef to maximize the number of different dishes is to choose the dishes with prices 1, 5 and 3 which totals to 9 coins. Test case 2: Chef has 10 coins and prices of dishes are [9, 8, 5, 2]. The optimal way for Chef to maximize the number of different dishes is to choose the dishes with prices 5 and 2 which totals to 7 coins.","solution":"def max_dishes(N, C, prices): Returns the maximum number of different dishes Chef can afford with his given budget. Parameters: N (int): Number of dishes C (int): Number of coins Chef has prices (List[int]): List of prices of the dishes Returns: int: Maximum number of different dishes Chef can afford prices.sort() count = 0 for price in prices: if C >= price: count += 1 C -= price else: break return count def solve(T, test_cases): results = [] for case in test_cases: N, C = case[0] prices = case[1] results.append(max_dishes(N, C, prices)) return results"},{"question":"Given a sequence of N integers, a_1, a_2, ldots, a_N, you are allowed to perform a series of operations. In each operation, you can choose any two consecutive elements of the sequence and replace them with their sum. This operation reduces the length of the sequence by one. Your goal is to maximize the sum of the final single element after performing N-1 operations. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers a_1, a_2, ldots, a_N. -----Output----- For each test case, print a single integer ― the maximum sum of the final element. -----Constraints----- - 1 le T le 10 - 2 le N le 100 - 1 le a_i le 100 for each valid i -----Subtasks----- Subtask #1 (30 points): N le 10 Subtask #2 (70 points): original constraints -----Example Input----- 2 3 1 2 3 4 1 2 3 4 -----Example Output----- 6 10 -----Explanation----- Example case 1: One optimal sequence of operations is: First, sum 1 and 2 to get a new sequence [3, 3]. Next, sum the two 3s to get 6. Example case 2: One optimal sequence of operations is: First, sum 1 and 2 to get a new sequence [3, 3, 4]. Next, sum the two 3s to get [6, 4]. Finally, sum 6 and 4 to get 10.","solution":"def maximize_sum_of_elements(T, test_cases): results = [] for i in range(T): # For each test case N, a = test_cases[i] # The strategy to maximize the sum is to sum all elements because any sum operation maximizes # when we keep adding the largest possible intermediate sums. total_sum = sum(a) results.append(total_sum) return results"},{"question":"Given a grid of size n times m filled with non-negative integers, you need to find the minimal path sum from the top-left corner to the bottom-right corner. You can only move to the right or down at any point in time. The minimal path sum is defined as the sum of the values of the cells along the path from the top-left to the bottom-right corner. -----Input----- The first line contains two integers n (1 le n le 200) and m (1 le m le 200) — the dimensions of the grid. Each of the next n lines contains m integers each, where each integer represents the non-negative value in that cell (0 le text{value} le 1000). -----Output----- Print a single integer — the minimal path sum from the top-left corner to the bottom-right corner. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Input 2 2 1 2 1 1 Output 3 -----Explanation----- In the first example, the path 1 → 3 → 1 → 1 → 1 results in a minimal path sum of 7. In the second example, moving from the top-left to the bottom-right with path 1 → 2 → 1 results in a minimal path sum of 3.","solution":"def minPathSum(grid): n = len(grid) m = len(grid[0]) # Initialize DP table dp = [[0 for _ in range(m)] for _ in range(n)] dp[0][0] = grid[0][0] # Fill in the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill in the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[-1][-1]"},{"question":"You are given a list of words. Your task is to determine if any two words in the list are anagrams of each other and return a pair of words that are anagrams. Anagrams are words that contain the same characters in different order. For example, \\"listen\\" and \\"silent\\" are anagrams. Write a function `find_anagram_pair(words)` that receives a list of words and returns a tuple with a pair of words that are anagrams. If no such pair exists, return an empty tuple. **Input** - A list of words, with each word containing only lowercase English letters. **Output** - A tuple containing two words that are anagrams, or an empty tuple if no such pair exists. **Example** ```python find_anagram_pair([\\"listen\\", \\"enlist\\", \\"google\\", \\"gooegl\\"]) # should return (\'listen\', \'enlist\') find_anagram_pair([\\"rat\\", \\"car\\", \\"tar\\", \\"arc\\"]) # should return (\'rat\', \'tar\') find_anagram_pair([\\"apple\\", \\"banana\\", \\"orange\\"]) # should return () ``` **Note** - Words may repeat in the input list. - If there are multiple pairs of anagrams, return any one of them.","solution":"def find_anagram_pair(words): Returns a tuple containing two words that are anagrams from the list, or an empty tuple if no such pair exist. # Dictionary to store sorted word as key and corresponding original words as values anagram_dict = {} for word in words: sorted_word = \'\'.join(sorted(word)) # Sort the characters in the word if sorted_word in anagram_dict: return (anagram_dict[sorted_word], word) # Return the first match pair else: anagram_dict[sorted_word] = word # Store the word in dict return () # Return empty tuple if no anagram pairs found"},{"question":"As a student, you are currently working on a school project that involves analyzing the grades of your classmates. You have a list containing pairs of each student\'s name and their grade in a particular subject. Your task is to develop a program that processes the list and identifies the student with the highest grade. If there are multiple students with the same highest grade, the program should return the one whose name is lexicographically smallest. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of students. Each of the next n lines contains a student\'s name and their grade separated by a space. The name consists of lowercase Latin letters and the grade is an integer (0 ≤ grade ≤ 100). -----Output----- Print the name of the student with the highest grade. If there are multiple students with the same highest grade, print the lexicographically smallest name among them. -----Examples----- Input 5 alice 90 bob 85 charlie 90 david 88 eve 90 Output alice Input 3 amy 75 becca 75 don 80 Output don -----Note----- In the first test sample, the students with the highest grade are alice, charlie, and eve with a grade of 90. Among these, \\"alice\\" is lexicographically smallest, so the result is \\"alice\\". In the second test sample, the student with the highest grade is \\"don\\" with a grade of 80.","solution":"def highest_grade_student(n, students): Returns the name of the student with the highest grade. If there are multiple students with the same highest grade, returns the lexicographically smallest name. :param n: Number of students (int) :param students: List of tuples (name, grade) :return: Name of the student with the highest grade (str) max_grade = -1 best_student = \\"\\" for student in students: name, grade = student if grade > max_grade: max_grade = grade best_student = name elif grade == max_grade and name < best_student: best_student = name return best_student"},{"question":"In the city of Gridtown, the roads are constructed in a way that forms an n x m grid. Each cell inside this grid represents an intersection, and the roads connect each intersection to its adjacent intersections (to the right and down if they exist). We refer to the cell at the i-th row and j-th column as (i,j). Mayor Smith wants to add a unique feature to the city: public fountains. To make the city more beautiful and convenient for every citizen, each fountain must be installed at an intersection such that it evenly divides the grid into quadrants with equal road lengths. A valid intersection for installing a fountain is termed as a \\"central intersection\\". An intersection (i,j) is considered a central intersection if all of the quadrants formed by dividing the grid at (i,j) have the same number of rows and columns. Given the dimensions of the grid, determine the number of \\"central intersections\\". # Input The input consists of a single line containing two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. # Output Print the number of \\"central intersections\\" in the grid. # Examples Example 1 Input: 4 4 Output: 1 Example 2 Input: 5 5 Output: 1 Example 3 Input: 6 6 Output: 4 # Explanation In Example 1, the grid is 4x4, and there is only one central intersection, which is the intersection at (2,2) because it evenly divides the grid into four 2x2 quadrants. In Example 2, the grid is 5x5, and there is only one central intersection, which is the intersection at (3,3) as it divides the grid into four equal parts. In Example 3, the grid is 6x6, and there are four central intersections: (3,3), (3,4), (4,3), and (4,4), each of which divides the grid into four 3x3 quadrants.","solution":"def count_central_intersections(n, m): Counts the number of \'central intersections\' in an n x m grid. Parameters: n (int): number of rows in the grid. m (int): number of columns in the grid. Returns: int: number of central intersections. if n % 2 == 0 and m % 2 == 0: return 4 # For even x even grid, there are 4 central intersections. elif n % 2 == 1 and m % 2 == 1: return 1 # For odd x odd grid, there is 1 central intersection. else: return 0 # For odd x even or even x odd grid, there are no central intersections."},{"question":"Given a string S, composed of lowercase alphabets and digits, remove all the duplicate characters and digits and return the modified string such that the relative order of characters and digits is maintained. Example 1: Input: S = \\"programming12331\\" Output: \\"progamin123\\" Explanation: The duplicate characters \'r\', \'g\' and \'m\' are removed, and the duplicate digits \'3\' are removed. The relative order of other characters and digits is preserved. Example 2: Input: S = \\"hello1234567890\\" Output: \\"helo1234567890\\" Explanation: The duplicate characters \'l\' and \'o\' are removed. All digits are unique, so they remain as they are. Your Task: You don\'t need to read input or print anything. Your task is to complete the function removeDuplicates(S) which takes the string S as input and returns the modified string after removing duplicates, keeping the relative order. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5 S consists of only lowercase alphabets and digits (0-9).","solution":"def removeDuplicates(S): Removes all the duplicate characters and digits from the input string S and returns the modified string with the relative order preserved. seen = set() result = [] for char in S: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Write a function `intersect` that takes two integer arrays as input and returns an array of integers representing their intersection. Each element in the resultant array must be unique and presented in ascending order. The input arrays may contain duplicates, but the output array should not. Optimize your solution for both time and space complexity. Example: - Input: `[1, 2, 2, 1]` and `[2, 2]` - Output: `[2]` - Input: `[4, 9, 5]` and `[9, 4, 9, 8, 4]` - Output: `[4, 9]` Constraints: - The function should handle arrays with lengths ranging from 0 to 10^3. - Each integer in the input arrays can range between -10^3 and 10^3.","solution":"def intersect(nums1, nums2): Returns an array of unique integers representing the intersection of nums1 and nums2, presented in ascending order. # Convert both lists to sets to remove duplicates and find the intersection set1 = set(nums1) set2 = set(nums2) # Find the intersection and convert to a sorted list intersection = sorted(list(set1 & set2)) return intersection"},{"question":"A company wants to optimize its delivery routes. The delivery area is represented as a grid of size M x N where each cell represents a block. Some blocks have obstacles, and others are clear. The delivery truck can move up, down, left, or right, but cannot pass through obstacles. The aim is to determine the minimum number of steps required to reach from the top-left corner of the grid (0,0) to the bottom-right corner of the grid (M-1, N-1). If it\'s impossible to reach the destination, return -1. Input The input begins with two integers M and N (2 ≤ M, N ≤ 1000) representing the number of rows and columns of the grid, respectively. The next M lines each contain N characters: each character is either \'.\' (clear block) or \'#\' (obstacle). Output Output a single integer representing the minimum number of steps required to reach the bottom-right corner, or -1 if it\'s impossible. Examples Input 5 5 ..... .#. ..... .#. ..... Output 8 Input 3 3 ..# .#. .#. Output -1 Explanation In the first example, the minimum path bypasses the obstacles and reaches the destination in 8 steps. In the second example, it is impossible to reach the destination due to the obstacles.","solution":"from collections import deque def min_steps_to_reach_end(M, N, grid): Determine the minimum steps required to reach from the top-left corner (0,0) to the bottom-right corner (M-1,N-1) in a grid. Parameters: M (int): Number of rows N (int): Number of columns grid (list of str): M lines each containing N characters (\'.\' for clear block, \'#\' for obstacle) Returns: int: Minimum steps to reach (M-1,N-1) or -1 if impossible. if grid[0][0] == \'#\' or grid[M-1][N-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] visited = [[False] * N for _ in range(M)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited[0][0] = True while queue: x, y, steps = queue.popleft() for dx, dy in directions: nx, ny, nsteps = x + dx, y + dy, steps + 1 if 0 <= nx < M and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] == \'.\': if nx == M-1 and ny == N-1: return nsteps queue.append((nx, ny, nsteps)) visited[nx][ny] = True return -1"},{"question":"Given an array of integers and a target value, find the maximum length of a contiguous subarray that sums up to the given target. If there is no such subarray, return 0. Example 1: Input: arr = [1, -1, 5, -2, 3], target = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and has a maximum length of 4. Example 2: Input: arr = [-2, -1, 2, 1], target = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and has a maximum length of 2. Example 3: Input: arr = [1, 2, 3], target = 6 Output: 3 Explanation: The whole array [1, 2, 3] sums to 6 and has a maximum length of 3. Your Task: You do not need to read input or print anything. Complete the function max_length_subarray_sum() which takes the array \'arr\' and an integer \'target\' as input parameters and returns the maximum length of a contiguous subarray that sums up to the given target. If no such subarray exists, return 0. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(arr) ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5 -10^5 ≤ target ≤ 10^5","solution":"def max_length_subarray_sum(arr, target): Finds the maximum length of a contiguous subarray that sums up to the given target. prefix_sum_map = {0: -1} max_length = 0 curr_sum = 0 for i, num in enumerate(arr): curr_sum += num if (curr_sum - target) in prefix_sum_map: max_length = max(max_length, i - prefix_sum_map[curr_sum - target]) if curr_sum not in prefix_sum_map: prefix_sum_map[curr_sum] = i return max_length"},{"question":"Alien Keyboard In a distant galaxy, humans have discovered an alien civilization with a different keyboard layout. Instead of letters and numbers, their keyboard has symbols and special characters. The alien keyboard has N rows and M columns, forming a rectangular grid. Each key on the keyboard could be one of a set of unique symbols. Researchers have been working on typing specific alien words using this keyboard. To better understand the capabilities of the keyboard, they want to determine if a given word can be typed by using only adjacent keys. Adjacent keys are defined as keys that are directly next to each other horizontally, vertically, or diagonally. Task Write a program to determine if a given word can be typed on the alien keyboard by traversing through adjacent keys. Input Read the following data from standard input: - The first line contains two integers N and M (1 ≤ N, M ≤ 50), the number of rows and columns on the keyboard. - The next N lines each contain a string of length M, representing the layout of the alien keyboard. - The last line contains a string W representing the word to be typed (1 ≤ |W| ≤ 50). Output Print \\"YES\\" if the word can be typed using adjacent keys, otherwise print \\"NO\\". Examples Input example 1 4 5 abcde fghij klmno pqrst hello Output example 1 NO Input example 2 3 3 abc def ghi beg Output example 2 YES Explanation In the first example, although the letters \'h\', \'e\', \'l\', \'l\', and \'o\' all appear on the keyboard, they are not arranged in a way that allows the word \\"hello\\" to be typed using adjacent keys only. In the second example, the word \\"beg\\" can be typed by moving from \'b\' to \'e\' to \'g\' using adjacent keys. Notes on Adjacent Keys Adjacent keys include horizontally, vertically, and diagonally neighboring keys. For example, in a 3x3 grid: 123 456 789 The key \'5\' has the following adjacent keys: \'1\', \'2\', \'3\', \'4\', \'6\', \'7\', \'8\', and \'9\'.","solution":"def can_type_word(n, m, keyboard, word): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m def dfs(x, y, word_idx): if word_idx == len(word): return True temp = keyboard[x][y] keyboard[x][y] = \'#\' # Mark as visited for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if is_valid(new_x, new_y) and keyboard[new_x][new_y] == word[word_idx]: if dfs(new_x, new_y, word_idx + 1): return True keyboard[x][y] = temp # Unmark return False for row in range(n): for col in range(m): if keyboard[row][col] == word[0]: if dfs(row, col, 1): return True return False def read_and_solve(): import sys input = sys.stdin.read data = input().split() n, m = int(data[0]), int(data[1]) keyboard = [] word = data[-1] index = 2 for _ in range(n): keyboard.append(list(data[index])) index += 1 if can_type_word(n, m, keyboard, word): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"Marcus has been assigned a task to organize an event. He has a list of `N` participants, each with a unique ID between 1 and `N`. He needs to queue them up in such a way that the total inconvenience is minimized. The inconvenience of a queue is defined as follows: for each pair of participants `(i, j)` where `i < j` and `P[i] > P[j]`, the inconvenience is incremented by 1. Marcus has total control over the order in which the participants queue up. Help Marcus find a queue order that minimizes the total inconvenience. Input The input consists of: - A line containing an integer `N` (1 ≤ N ≤ 10^5), the number of participants. Output Output a line containing `N` integers representing the IDs of the participants in the order that minimizes the total inconvenience. Examples Input 5 Output 1 2 3 4 5 Input 4 Output 1 2 3 4 Note Explanation for the sample input/output #1 In the case where N=5, one of the optimal arrangements is simply [1, 2, 3, 4, 5]. In this case, since the participants are already in ascending order by their IDs, there are no inversions and thus no inconvenience at all.","solution":"def minimize_inconvenience(N): Returns an order of participants\' IDs that minimizes the total inconvenience. # The optimal order is simply the sequence of numbers from 1 to N return list(range(1, N+1))"},{"question":"Given a number n, the task is to find the nth Cullen number. A Cullen number is defined as a number of the form n * 2^n + 1. First few Cullen numbers are 3, 9, 25, 65, 161, 385… etc. Example 1: Input: n = 3 Output: 25 Explanation: 3rd Cullen number is 25 Example 2: Input: n = 5 Output: 161 Explanation: 5th Cullen number is 161 Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthCullen() which takes an Integer n as input and returns the nth Cullen number. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 20","solution":"def nthCullen(n): Returns the nth Cullen number. Cullen number is defined as: n * 2^n + 1 return n * (2 ** n) + 1"},{"question":"John is an avid runner and keeps track of his running times for each kilometer he runs. He wants to analyze his performance by determining the number of times he improves his fastest and slowest kilometer times during a particular run. The times of his kilometers are recorded in the same order as he runs them. The time of his first kilometer establishes his initial record for the run, and he starts counting from the second kilometer. Example times=[5, 3, 4, 3, 5, 2] Times are in the order he runs each kilometer. He tabulates his results as follows: Count Km Time Fastest Slowest Fast Slow 0 5 5 5 0 0 1 3 3 5 1 0 2 4 3 5 1 0 3 3 3 5 1 0 4 5 3 5 1 0 5 2 2 5 2 0 Given the times for a run, determine the number of times John improves his fastest and slowest times. Function Description Complete the `runningRecords` function in the editor below. `runningRecords` has the following parameter(s): - `int times[n]`: times taken to run each kilometer Returns - `int[2]`: An array with the numbers of times he improved his records. Index 0 is for improving fastest kilometer records, and index 1 is for improving slowest kilometer records. Input Format The first line contains an integer n, the number of kilometers. The second line contains n space-separated integers describing the respective values of time_0, time_1, ..., time_{n-1}. Constraints 1 leq n leq 1000 1 leq times[i] leq 10^8 Sample Input 0 6 5 3 4 3 5 2 Sample Output 0 2 0 Explanation 0 The table below shows when John improved his fastest and slowest records during the run: He improved his fastest record twice (after kilometers 1 and 5) and never improved his slowest record, so the output is 2 0. Sample Input 1 8 10 9 8 7 6 5 4 3 Sample Output 1 7 0 Explanation 1 The table below shows when John improved his fastest and slowest records during the run: He improved his fastest record seven times (after kilometers 1, 2, 3, 4, 5, 6, and 7) and never improved his slowest record, so the output is 7 0.","solution":"def runningRecords(times): if not times: return [0, 0] fastest = times[0] slowest = times[0] fast_count = 0 slow_count = 0 for time in times[1:]: if time < fastest: fastest = time fast_count += 1 elif time > slowest: slowest = time slow_count += 1 return [fast_count, slow_count]"},{"question":"A popular zoo has a variety of enclosures for different animals. Each enclosure has a meal portion to be delivered every day to ensure the animals are well-fed. Due to some logistical issues, the portions delivered each day are not consistent with the required portion sizes for each enclosure. Your task is to ensure that each enclosure receives the correct meal portion by making adjustments. Given the currently delivered portions and the required portions, find the minimum total number of adjustments needed to make sure every enclosure gets the correct portion size. An adjustment is defined as increasing or decreasing the portion size by 1. -----Input----- The first line contains a single integer n — the number of enclosures (1 ≤ n ≤ 10^5). The second line contains n integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ 10^5) — the currently delivered portions for each enclosure. The third line contains n integers r_1, r_2, ..., r_{n} (1 ≤ r_{i} ≤ 10^5) — the required portions for each enclosure. -----Output----- Print a single integer — the minimum total number of adjustments needed. -----Examples----- Input 3 5 7 6 6 8 5 Output 3 Input 4 3 3 3 3 3 3 3 3 Output 0 Input 2 1 100000 50000 50000 Output 99999 -----Note----- In the first test, the adjustments needed are: - Increase the first portion from 5 to 6 (1 adjustment). - Increase the second portion from 7 to 8 (1 adjustment). - Decrease the third portion from 6 to 5 (1 adjustment). So the total number of adjustments is 1 + 1 + 1 = 3. In the second test, no adjustments are needed as the portions are already correct. In the third test, the adjustments needed are: - Increase the first portion from 1 to 50000 (49999 adjustments). - Decrease the second portion from 100000 to 50000 (50000 adjustments). So the total number of adjustments is 49999 + 50000 = 99999.","solution":"def minimum_adjustments(n, delivered, required): This function calculates the minimum number of adjustments needed to ensure every enclosure receives the correct meal portion. :param n: An integer representing the number of enclosures :param delivered: A list of integers representing the currently delivered portions :param required: A list of integers representing the required portions :return: An integer representing the minimum number of adjustments needed total_adjustments = 0 for d, r in zip(delivered, required): total_adjustments += abs(d - r) return total_adjustments"},{"question":"Given a list of integers, determine the smallest number of operations required to make all elements equal. In one operation, you can add or subtract 1 from any element. Input: - A list of integers `arr` where 1 ≤ |arr| ≤ 10^5 and 1 ≤ arr[i] ≤ 10^9. Output: - An integer representing the smallest number of operations needed to make all elements in the list identical. Examples: ``` min_operations([1, 2, 3]) => 2 ``` Explanation: We can perform the following operations to make all elements equal: - Subtract 1 from 3 => [1, 2, 2] - Subtract 1 from 2 => [1, 1, 2] - Total operations = 2 ``` min_operations([4, 6, 8]) => 4 ``` Explanation: We can perform the following operations to make all elements equal: - Subtract 2 from 8 => [4, 6, 6] - Subtract 2 from 6 => [4, 4, 6] - Total operations = 4 Constraints: - Use direct mathematical approaches to balance the operations without iterating through all potential values. - Consider the median of the elements as a potential optimal value for the transformations.","solution":"def min_operations(arr): Returns the minimum number of operations to make all elements in the list equal. arr.sort() median = arr[len(arr) // 2] return sum(abs(x - median) for x in arr)"},{"question":"Your task is to process series of stack operations on a list of integers. There are three types of operations: 1. **Push x**: Push the integer x onto the stack. 2. **Pop**: Remove the top element from the stack. 3. **Max**: Print the maximum integer currently in the stack. You are given an empty stack initially, and a sequence of operations to perform. Implement a program to handle these stack operations efficiently. Constraints * The number of operations N ≤ 100,000 * 1 ≤ x ≤ 10^9 for Push operations Input The input consists of multiple datasets. Each dataset is given in the following format: * The number of operations, N * N lines, each containing one of the operations \\"Push x\\", \\"Pop\\", or \\"Max\\" The input ends with a single character \'-\' indicating the end of datasets. Output For each dataset, for each \\"Max\\" operation, print the maximum integer in the stack at that point. If the stack is empty, \\"Max\\" operation should not generate any output. Example Input 5 Push 1 Push 2 Max Pop Max 4 Push 10 Max Push 5 Max - Output 2 1 10 10","solution":"def process_stack_operations(datasets): Processes a list of datasets containing stack operations and prints the results of \\"Max\\" operations. results = [] for dataset in datasets: stack = [] max_stack = [] for operation in dataset: if operation.startswith(\\"Push\\"): _, x = operation.split() x = int(x) stack.append(x) if not max_stack or x > max_stack[-1]: max_stack.append(x) else: max_stack.append(max_stack[-1]) elif operation == \\"Pop\\": if stack: stack.pop() max_stack.pop() elif operation == \\"Max\\": if stack: results.append(max_stack[-1]) return results def parse_input(input_data): Parses the input into datasets. datasets = [] dataset = [] lines = input_data.strip().split(\'n\') for line in lines: if line == \\"-\\": if dataset: datasets.append(dataset) break elif line.isdigit(): if dataset: datasets.append(dataset) dataset = [] else: dataset.append(line) return datasets"},{"question":"Alice is participating in a game where she needs to create a sequence of numbers based on specific rules. The game starts with a sequence of integers `1, 2, ..., N`. She can perform some operations to transform the sequence in order to achieve the highest possible value for the sum of the sequence after all operations. The allowed operations are: 1. Pick any two elements `a` and `b` from the sequence and replace them with their least common multiple (LCM). 2. Repeat this process any number of times. The goal is to maximize the sum of the sequence after performing zero or more operations. Your task is to write a program that reads the integer N and prints the maximum possible sum of the sequence after performing the operations. Input An integer N (1 ≤ N ≤ 100). Output Print the maximum possible sum of the sequence after performing the allowed operations. Examples Input 4 Output 16 Input 6 Output 41 Note: - For N = 4, when you perform LCM operations optimally, the sequence can be transformed into [1, 2, 3, 12]. The sum is 1 + 2 + 3 + 12 = 18. - For N = 6, when you perform LCM operations optimally, the sequence can be transformed into [1, 2, 3, 4, 5, 60]. The sum is 1 + 2 + 3 + 4 + 5 + 60 = 75. Write a function `max_sum_after_operations(N)` to solve the problem.","solution":"import math from functools import reduce from itertools import combinations def lcm(x, y): return (x * y) // math.gcd(x, y) def max_sum_after_operations(N): Function to compute the maximum possible sum of the sequence after performing the allowed operations. # Initial sequence sequence = list(range(1, N+1)) # As the provided example outputs are evaluated based on the highest possible values of the least common multiple, # we can consider doing pairwise least common multiple calculation in reverse manner. while len(sequence) > 1: max_lcm = 0 max_a, max_b = 0, 0 # Find the pair with the maximum lcm value for a, b in combinations(sequence, 2): current_lcm = lcm(a, b) if current_lcm > max_lcm: max_lcm = current_lcm max_a, max_b = a, b # Replace a and b with their lcm in the sequence sequence.remove(max_a) sequence.remove(max_b) sequence.append(max_lcm) # Sum of the final sequence return sum(sequence)"},{"question":"Binary Tree - Sum of All Nodes Create a function `sum_of_nodes(root)` that takes the root of a binary tree and returns the sum of all the values of its nodes. The binary tree is defined by a class `TreeNode` as follows: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right ``` For example, given the following binary tree: ``` 10 / 5 15 / 2 7 ``` Calling `sum_of_nodes(root)` should return `39`, since 10 + 5 + 2 + 7 + 15 = 39. If the tree is empty (i.e., the root is `None`), the function should return `0`. You can assume that all values in the tree are integers.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def sum_of_nodes(root): Returns the sum of all the values of the nodes in the binary tree. if root is None: return 0 left_sum = sum_of_nodes(root.left) right_sum = sum_of_nodes(root.right) return root.value + left_sum + right_sum"},{"question":"You are managing a warehouse that contains a variety of products. Each product is represented by its ID, weight, and expiration date. You need to develop a system that can fulfill a series of tasks to manage the products efficiently. You are provided with a list of products, each with its unique ID, weight, and expiration date. Your goal is to complete the following tasks: 1. Find the heaviest product(s) in the warehouse. 2. Find the product(s) that will expire the soonest. 3. Get the IDs of all products sorted by weight in descending order. 4. Get the IDs of all products sorted by expiration date in ascending order. For each product, you will receive: - Product ID (a unique string identifier) - Weight (a positive integer representing the weight in grams) - Expiration date (a string in the format \\"YYYY-MM-DD\\") -----Input :----- - The first line contains an integer N representing the number of products in the warehouse. - Each of the next N lines contains the product\'s ID, weight, and expiration date, separated by spaces. -----Output :----- Your program should output the following: - The ID(s) of the heaviest product(s). - The ID(s) of the product(s) that will expire the soonest. - The list of product IDs sorted by weight in descending order. - The list of product IDs sorted by expiration date in ascending order. Each section of the output should be separated by a newline, and within each section, if multiple IDs are required, they should be separated by spaces. -----Constraints :----- - 1 leq N leq 1000 - Weight is a positive integer leq 10^6 - Expiration date follows the format \\"YYYY-MM-DD\\" and represents a valid date. -----Sample Input :----- 5 P001 2000 2023-12-01 P002 1500 2023-11-15 P003 2000 2023-11-20 P004 1800 2023-11-25 P005 1600 2023-11-15 -----Sample Output :----- P001 P003 P002 P005 P001 P003 P004 P005 P002 P002 P005 P003 P004 P001","solution":"from datetime import datetime def manage_warehouse(products): This function accepts a list of products, each represented by its ID, weight, and expiration date, and outputs the following: 1. The heaviest product(s). 2. The product(s) that will expire the soonest. 3. The IDs of all products sorted by weight in descending order. 4. The IDs of all products sorted by expiration date in ascending order. heaviest_products = [] soonest_expiring_products = [] max_weight = -1 min_expiration_date = None for product in products: product_id, weight, expiration = product weight = int(weight) expiration_date = datetime.strptime(expiration, \\"%Y-%m-%d\\") if weight > max_weight: max_weight = weight heaviest_products = [product_id] elif weight == max_weight: heaviest_products.append(product_id) if min_expiration_date is None or expiration_date < min_expiration_date: min_expiration_date = expiration_date soonest_expiring_products = [product_id] elif expiration_date == min_expiration_date: soonest_expiring_products.append(product_id) sorted_by_weight = sorted(products, key=lambda x: int(x[1]), reverse=True) sorted_by_expiration = sorted(products, key=lambda x: datetime.strptime(x[2], \\"%Y-%m-%d\\")) sorted_by_weight_ids = [product[0] for product in sorted_by_weight] sorted_by_expiration_ids = [product[0] for product in sorted_by_expiration] return ( heaviest_products, soonest_expiring_products, sorted_by_weight_ids, sorted_by_expiration_ids )"},{"question":"Write a function that accepts a string as an argument and returns the number of distinct characters in the string that appear only once. The input string will consist of lowercase alphabetic characters and can be empty. If the string is empty, the function should return 0. Examples: * `single_occurrence_characters(\\"hello\\")` returns 3 (\'h\', \'e\', \'o\' appear only once) * `single_occurrence_characters(\\"aabbcc\\")` returns 0 (no characters appear only once) * `single_occurrence_characters(\\"abcde\\")` returns 5 (each character appears only once)","solution":"def single_occurrence_characters(s): Returns the number of distinct characters in the string that appear only once. from collections import Counter # Count all characters in the string char_count = Counter(s) # Get the number of characters that appear exactly once single_occurrence_count = sum(1 for count in char_count.values() if count == 1) return single_occurrence_count"},{"question":"# Description Consider an array of integers, where you need to perform the \\"zigzag\\" conversion. In zigzag conversion, the elements are rearranged such that every alternate element is greater than its adjacent elements to its left and right. The exact requirement is: - arr[1] < arr[2] > arr[3] < arr[4] > arr[5] < arr[6] ... Write a function that accepts an array of integers and rearranges them in-place into the zigzag form. The returned value should be the modified array. For example: ``` Sample Input: [4, 3, 7, 8, 6, 2, 1] Sample Output: [3, 7, 4, 8, 2, 6, 1] Sample Input: [1, 4, 3, 2] Sample Output: [1, 4, 2, 3] ``` Note: Your function should handle any arbitrary input array size and should operate in O(n) time complexity, where n is the number of elements in the array.","solution":"def zigzag_conversion(arr): Rearranges the elements of the array in zigzag order such that: arr[1] < arr[2] > arr[3] < arr[4] > arr[5] < arr[6] ... Args: arr: List[int] - The list of integers to be rearranged. Returns: List[int] - The rearranged list in zigzag order. flag = True # true for \'<\' and false for \'>\' n = len(arr) for i in range(n-1): if flag: if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] else: if arr[i] < arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] flag = not flag return arr"},{"question":"Tom is famous for his love of crafting. He has recently taken an interest in creating beautiful necklaces using beads. Tom has an unlimited supply of beads of various colors. His goal is to create necklaces with a specific number of beads, where each bead color is represented as a lowercase letter. However, Tom has a peculiar way of creating these necklaces: for a necklace to be considered beautiful, it must be a palindrome when read from left to right and right to left. A palindrome is a sequence that reads the same backward as forward. Given the length of the necklace Tom wants to create, help him determine the number of distinct beautiful necklaces (i.e., palindromes) he can make using any combination of lowercase letters. -----Input----- The input consists of a single integer n (1 le n le 10^{5}), representing the length of the necklace. -----Output----- Print a single integer, the number of distinct beautiful necklaces of length n. -----Examples----- Input 1 Output 26 Input 2 Output 26 Input 3 Output 26 Input 4 Output 26","solution":"def count_beautiful_palindromes(n): Returns the number of distinct beautiful palindromes of length n. if n == 1: return 26 return 26"},{"question":"A company is looking to implement a simple payroll system and needs your expertise. First, write a function that, given the hourly wage (as a float), the total number of hours worked (as a float), and a boolean indicating whether overtime pay applies, will calculate the total salary. The company policy states that standard hours are up to 40 hours per week. Any hours worked beyond this threshold should be paid at 1.5 times the hourly wage if overtime pay applies. Second, write a function that, given a list of employee records, each containing the name (as a string), the hourly wage (as a float), the total number of hours worked (as a float), and a boolean for overtime eligibility. The function should return a list of employees names (in the same order) sorted by their total salary in descending order. If two employees have the same total salary, they should be sorted alphabetically by their name. Note: Any calculations that involve decimals should be rounded to 2 decimal places.","solution":"def calculate_salary(hourly_wage, hours_worked, overtime): Calculate the total salary based on hourly wage, hours worked and overtime policy. Args: hourly_wage (float): The hourly wage of the employee. hours_worked (float): The number of hours worked by the employee. overtime (bool): Whether overtime pay applies. Returns: float: The total salary rounded to 2 decimal places. standard_hours = 40 if hours_worked <= standard_hours: total_salary = hourly_wage * hours_worked else: if overtime: total_salary = (hourly_wage * standard_hours) + ((hours_worked - standard_hours) * hourly_wage * 1.5) else: total_salary = hourly_wage * hours_worked return round(total_salary, 2) def sort_employees_by_salary(employee_records): Sorts employees by their total salary in descending order, and by name alphabetically if salaries are the same. Args: employee_records (list): List of employee records, where each record is a dictionary containing: \'name\' (str): The name of the employee. \'hourly_wage\' (float): The hourly wage of the employee. \'hours_worked\' (float): The number of hours worked by the employee. \'overtime\' (bool): Whether overtime pay applies. Returns: list: A list of employee names sorted by total salary in descending order and by name alphabetically if needed. salaries_with_names = [] for employee in employee_records: salary = calculate_salary(employee[\'hourly_wage\'], employee[\'hours_worked\'], employee[\'overtime\']) salaries_with_names.append((salary, employee[\'name\'])) # Sort primarily by salary in descending order and by name in ascending order for ties salaries_with_names.sort(key=lambda x: (-x[0], x[1])) sorted_names = [name for salary, name in salaries_with_names] return sorted_names"},{"question":"A string is considered beautiful if all characters in the string can be rearranged such that there are no consecutive identical characters. Given a string, determine whether it can be rearranged to form a beautiful string. -----Input----- The first and only line of input contains a string s consisting of lowercase English letters (1 ≤ |s| ≤ 10^5). -----Output----- The first and only line of output must contain \\"YES\\" if the string can be rearranged into a beautiful string, otherwise \\"NO\\". -----Examples----- Sample Input 1: aabb Sample Output 1: YES Sample Input 2: aaab Sample Output 2: NO","solution":"from collections import Counter def can_be_beautiful(s): Determines if a string can be rearranged such that there are no consecutive identical characters. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \\"YES\\" if the string can be rearranged to form a beautiful string, otherwise \\"NO\\". char_counts = Counter(s) max_count = max(char_counts.values()) if max_count <= (len(s) + 1) // 2: return \\"YES\\" else: return \\"NO\\""},{"question":"A pharmaceutical company is conducting a study on the effectiveness of a new drug. Each participant in the study has his/her temperature recorded at various times during the day, and a decision has to be made on whether the participant has a fever at any time during the day. The fever criteria for this study are as follows: - A reading is considered a fever if the temperature is equal to or higher than 100.4 degrees Fahrenheit (F). - Each participant\'s temperature is recorded multiple times a day. Write a function called `fever_detector` that determines if each participant has had a fever at least once during the day. The function should take a list of lists as input, where each inner list contains the recorded temperatures for one participant. If a participant has had a fever at least once, that participant is considered to have had a fever for the day. The function should return a list of boolean values, where each value corresponds to a participant and is `True` if that participant had a fever at least once during the day, and `False` otherwise. # Input The input consists of: - A list of lists of floats, where each inner list represents the temperature recordings for a participant during the day. # Output The output should be a list of boolean values. # Example ```python input_temps = [ [98.6, 99.1, 100.2], # Participant 1 [97.5, 98.7, 101.3], # Participant 2 [99.9, 100.5, 99.8], # Participant 3 [98.4, 97.6, 99.0, 98.2] # Participant 4 ] print(fever_detector(input_temps)) # Output: [False, True, True, False] ``` In this example: - Participant 1 never reaches 100.4 degrees F, so they did not have a fever. - Participant 2 reaches 101.3 degrees F, so they had a fever. - Participant 3 reaches 100.5 degrees F, so they had a fever. - Participant 4 never reaches 100.4 degrees F, so they did not have a fever.","solution":"def fever_detector(participants_temps): Determines if each participant had a fever at least once during the day. :param participants_temps: List of lists of floats, where each inner list contains temperature recordings for one participant. :return: List of boolean values indicating whether each participant had a fever at least once during the day. fever_threshold = 100.4 return [any(temp >= fever_threshold for temp in temps) for temps in participants_temps]"},{"question":"John is designing a filesystem for a new operating system and wants to automate creating hierarchical paths. He needs a function to create a nested dictionary structure from a list of path strings. Each path string is composed of directory names separated by slashes (\'/\'). The function should take this list of path strings and return a nested dictionary representing the hierarchical directory structure. For example, given the input paths: ``` [\\"folder1/folder2/file1\\", \\"folder1/file2\\", \\"folder3/file3\\", \\"folder1/folder2/folder3/file4\\"] ``` The output should be a nested dictionary: ```python { \\"folder1\\": { \\"folder2\\": { \\"file1\\": None, \\"folder3\\": { \\"file4\\": None } }, \\"file2\\": None }, \\"folder3\\": { \\"file3\\": None } } ``` Write a function that accomplishes this task. The function signature should be: ```python def create_filesystem(paths: List[str]) -> Dict[str, Any]: pass ``` **Constraints:** - The number of paths (`n`) will not exceed 1000. - Each path will not exceed 100 characters in length. - Directory and file names consist of lowercase English letters and numbers only. **Example:** Input: ```python [ \\"folder1/folder2/file1\\", \\"folder1/file2\\", \\"folder3/file3\\", \\"folder1/folder2/folder3/file4\\" ] ``` Output: ```python { \\"folder1\\": { \\"folder2\\": { \\"file1\\": None, \\"folder3\\": { \\"file4\\": None } }, \\"file2\\": None }, \\"folder3\\": { \\"file3\\": None } } ``` **Explanation:** The function processes each path string, splitting it into components at each \'/\', and constructs a nested dictionary by iteratively creating or traversing dictionary keys corresponding to the directory/file names along the path. If the path component is a file, its value in the dictionary is `None`.","solution":"from typing import List, Dict, Any def create_filesystem(paths: List[str]) -> Dict[str, Any]: def insert_path(tree, path_parts): for part in path_parts[:-1]: if part not in tree: tree[part] = {} tree = tree[part] tree[path_parts[-1]] = None filesystem = {} for path in paths: path_parts = path.split(\'/\') insert_path(filesystem, path_parts) return filesystem"},{"question":"Find the Missing Number. Input: The first line contains an integer T - the number of test cases. Each of the next T lines contains an integer N followed by N space-separated integers representing a sequence of N-1 unique numbers within the range of 1 to N. Output: For each test case, output the missing number from the sequence. Constraints: 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ each number in the sequence ≤ N SAMPLE INPUT 2 5 1 2 3 5 3 1 3 SAMPLE OUTPUT 4 2","solution":"def find_missing_number(n, sequence): Given n and a sequence of n-1 numbers, find the missing number in the range from 1 to n. total_sum = n * (n + 1) // 2 sequence_sum = sum(sequence) return total_sum - sequence_sum def process_input(input_data): Process the input data and return the results for each test case. :param input_data: List of strings, the input data where the first element is the number of test cases and subsequent lines contain each test case as \\"N followed by N-1 integers\\" results = [] T = int(input_data[0]) for i in range(1, T + 1): line = list(map(int, input_data[i].split())) N = line[0] sequence = line[1:] results.append(find_missing_number(N, sequence)) return results"},{"question":"A popular restaurant chain named Food Fiesta is running a promotion where customers can earn discount coupons based on their meal expenses over multiple days. Each day, the customer can choose from a variety of meals, each priced differently. At the end of the promotion, the restaurant awards a discount coupon whose value is based on the sum of a specific subset of the meal expenses. The subset is chosen such that it maximizes the discount. Your task is to help the restaurant determine the maximum possible discount coupon value for a customer. Given multiple datasets each containing the daily meal expenses for the promotion period, calculate the maximum discount coupon value for each dataset. The discount calculation works as follows: - Select a continuous sub-sequence of daily meal expenses. - The sum of this sub-sequence is the value of the discount coupon. - You need to find the maximum possible sum of all such sub-sequences for each dataset. Input A sequence of multiple datasets is given as input. The end of the input is indicated by a single zero on a line by itself. Each dataset is given in the following format: n e1 e2 ... en The first line gives the number of days n (1 ≤ n ≤ 1000). The second line gives the daily expenses ei (1 ≤ ei ≤ 10000) for each day. The number of datasets does not exceed 100. Output Print the maximum possible discount coupon value on one line for each input dataset. Example Input 5 3 -2 5 -1 2 6 4 -1 2 1 -5 4 0 Output 7 6","solution":"def max_discount_coupon_value(datasets): Given a list of datasets, where each dataset is a list of daily meal expenses, this function returns a list of maximum possible discount coupon values for each dataset. results = [] for expenses in datasets: max_current = max_global = expenses[0] for i in range(1, len(expenses)): max_current = max(expenses[i], max_current + expenses[i]) if max_current > max_global: max_global = max_current results.append(max_global) return results"},{"question":"A programming company has assigned you to develop a mechanism to manage a cache system. The cache should store a limited number of items so it can quickly retrieve them when needed. However, when the cache is full and a new item needs to be added, it should remove the least recently used (LRU) item to make room for the new one. You are required to implement such an LRU Cache. -----Input----- The first line contains two integers n and q: the size of the cache and the number of queries respectively. Each of the next q lines describes a query of one of these two types: - \\"GET x\\", where x is the key of the item to get from the cache. - \\"SET x y\\", where x is the key and y is the value of the item to set in the cache. If the \\"GET x\\" query is asking for an item not currently in the cache, return -1. -----Output----- For each \\"GET x\\" query, output the value of the item if it exists in the cache or -1 if it does not. -----Constraints----- - 1 ≤ n ≤ 1000 - 1 ≤ q ≤ 10^5 - 1 ≤ x, y ≤ 10^9 -----Example----- Input: 2 6 SET 1 10 SET 2 20 GET 1 SET 3 30 GET 2 GET 3 Output: 10 -1 30 -----Explanation----- First query \\"SET 1 10\\": sets key 1 with value 10 in the cache. Second query \\"SET 2 20\\": sets key 2 with value 20 in the cache. Third query \\"GET 1\\": retrieves value 10. Fourth query \\"SET 3 30\\": cache is full. The least recently used item (key 1) is removed and key 3 with value 30 is added. Fifth query \\"GET 2\\": key 2 was the least recently used and is not in the cache, so returns -1. Sixth query \\"GET 3\\": retrieves value 30.","solution":"from collections import OrderedDict class LRUCache: def __init__(self, capacity): self.capacity = capacity self.cache = OrderedDict() def get(self, key): if key not in self.cache: return -1 else: self.cache.move_to_end(key) return self.cache[key] def set(self, key, value): if key in self.cache: self.cache.move_to_end(key) self.cache[key] = value if len(self.cache) > self.capacity: self.cache.popitem(last=False) def process_cache_queries(n, queries): cache = LRUCache(n) results = [] for query in queries: operation, x = query.split()[:2] if operation == \'GET\': results.append(cache.get(int(x))) elif operation == \'SET\': y = int(query.split()[2]) cache.set(int(x), y) return results"},{"question":"In a certain board game, the goal is to reduce a rectangular grid of numbered tiles to a single tile representing the sum of all tiles. You can merge two adjacent tiles (horizontally or vertically) by removing them and replacing them with a new tile whose value is the sum of the values of the merged tiles. The process continues by repeatedly merging tiles until only one tile remains, representing the sum of all starting tiles. Create a program to compute the sum of all tiles in a grid. -----Input----- The input consists of two parts. The first line contains two integers n and m, where 1 leq n, m leq 20, representing the number of rows and columns in the grid, respectively. Each of the next n lines contains m integers, each between 1 and 100, representing the values of the tiles on the grid. -----Output----- Output a single integer, the sum of all tiles in the grid. -----Examples----- Sample Input 1: 2 3 1 2 3 4 5 6 Sample Output 1: 21 Sample Input 2: 1 4 5 5 5 5 Sample Output 2: 20","solution":"def sum_of_tiles(n, m, grid): Returns the sum of all tiles in the grid. :param int n: Number of rows in the grid :param int m: Number of columns in the grid :param list[list[int]] grid: 2D list representing the grid of tiles :return: The sum of all tiles :rtype: int total_sum = 0 for row in grid: total_sum += sum(row) return total_sum"},{"question":"Given a list of integers, write a function that determines if there is a pair of distinct elements in the list that sum up to a given target value. Function Signature: ```python def has_pair_with_sum(numbers: List[int], target: int) -> bool: ``` Input: - List of up to 10,000 integers where each element is in the range [-10^6, 10^6]. - A target integer also in the range [-10^6, 10^6]. Output: - Return `True` if there are two distinct elements in the list that add up to the target value, otherwise return `False`. Example: ```python numbers = [10, 15, 3, 7] target = 17 has_pair_with_sum(numbers, target) # Output: True numbers = [1, 2, 3, 4, 5] target = 10 has_pair_with_sum(numbers, target) # Output: False ```","solution":"from typing import List def has_pair_with_sum(numbers: List[int], target: int) -> bool: Determines if there is a pair of distinct elements in the list that sum up to the given target. Parameters: numbers (List[int]): A list of integers. target (int): The target sum. Returns: bool: True if there is a pair of distinct elements that sum up to the target, False otherwise. seen = set() for number in numbers: complement = target - number if complement in seen: return True seen.add(number) return False"},{"question":"You are hosting a virtual conference with attendees joining from various time zones. You have N presentations scheduled for the day, each with a specific start and end time. Your task is to ensure that there are no overlaps in the presentation schedule so that no two presentations occur simultaneously. Presentations are defined by their start and end times on a 24-hour clock format. Given the presentation schedule, determine the maximum number of presentations that can be attended without any overlaps. A presentation with start time S_ i and end time E_ i is represented as starting strictly at S_ i and ending strictly at E_ i, such that no two presentations can overlap even at their boundaries. -----Input----- The first line contains the value N, 1 le N le 10^5. Each of the next N lines contains two integers S_ i and E_ i (0 le S_ i < E_ i le 24), representing the start and end times of the i-th presentation. -----Output----- On a single line, output the maximum number of non-overlapping presentations that can be attended. -----Examples----- Sample Input: 3 1 3 2 4 3 5 Sample Output: 2","solution":"def max_presentations(presentations): Returns the maximum number of non-overlapping presentations that can be attended. :param presentations: List of tuples where each tuple contains two integers: (start_time, end_time). :return: Integer, the maximum number of non-overlapping presentations. # Sort presentations by end time presentations.sort(key=lambda x: x[1]) max_count = 0 end_time = 0 for start, end in presentations: if start >= end_time: max_count += 1 end_time = end return max_count"},{"question":"John is participating in a treasure hunt and there are n islands connected by m bridges. Each bridge i connects island a_i to island b_i and has a resistance level r_i. John starts on island 1 and needs to reach island n with the minimum fatigue possible. John\'s fatigue is defined by the highest resistance level among all the bridges he crosses. Help John find a path from island 1 to island n that minimizes the maximum resistance level. -----Input----- The first line of input contains two space-separated integers n and m (2 le n le 200000, 1 le m le 500000). Each of the next m lines contains three space-separated integers a_i, b_i, and r_i (1 le a_i, b_i le n, 1 le r_i le 10^6). There is at most one bridge connecting any two islands, and it is guaranteed that there will always be a path from island 1 to island n. -----Output----- Print, on a single line, the minimum possible value of the highest resistance level that John must endure to travel from island 1 to island n. -----Examples----- In the first sample, it is optimal for John to take this sequence of bridges: - Bridge 1. Connects island 1 to island 2 with a resistance level of 7. - Bridge 3. Connects island 2 to island n with a resistance level of 9. Thus, the highest resistance level in this path is 9. -----Examples----- Sample Input: 4 5 1 2 7 1 3 3 2 3 2 2 4 9 3 4 8 Sample Output: 8","solution":"from collections import deque def can_reach_with_max_resistance(graph, n, max_resistance): visited = [False] * (n + 1) queue = deque([1]) visited[1] = True while queue: current = queue.popleft() if current == n: return True for neighbor, resistance in graph[current]: if not visited[neighbor] and resistance <= max_resistance: visited[neighbor] = True queue.append(neighbor) return False def min_fatigue(n, m, bridges): graph = [[] for _ in range(n + 1)] for a, b, r in bridges: graph[a].append((b, r)) graph[b].append((a, r)) low, high = 1, max(r for _, _, r in bridges) result = high while low <= high: mid = (low + high) // 2 if can_reach_with_max_resistance(graph, n, mid): result = mid high = mid - 1 else: low = mid + 1 return result"},{"question":"A group of friends is playing a card game with a special deck of cards. Each card has a number printed on it, and the objective of the game is to form the longest possible sequence of cards where the difference between consecutive cards is exactly 1. The sequence can start with any card, and the card game consists of several rounds. In each round, they are given a different set of cards. For instance, consider the set of cards {1, 2, 3, 4, 6, 7, 8}. The longest consecutive sequence that can be formed from this set is {1, 2, 3, 4} or {6, 7, 8}, both of length 4. Given the set of cards for each round, determine the length of the longest sequence of consecutive numbers that can be formed. Input Format The first line contains a single integer, mathbf{T}, denoting the number of test cases. For each test case, the first line contains a single integer, N, denoting the number of cards in the set. The second line contains N space-separated integers representing the numbers on the cards. Constraints 1 leq T leq 100 1 leq N leq 1000 1 leq text{Card Value} leq 10^9 Output Format For each test case, print a single integer representing the length of the longest consecutive sequence of card numbers on a new line. Sample Input 2 7 1 2 3 4 6 7 8 5 10 20 30 40 50 Sample Output 4 1 Explanation Test Case 0: The longest consecutive sequence that can be formed is either {1, 2, 3, 4} or {6, 7, 8}, both of length 4. Test Case 1: There are no consecutive numbers in this set. Therefore, the longest sequence contains just one card, with length 1.","solution":"def longest_consecutive_sequence(card_sets): Determines the length of the longest sequence of consecutive numbers from a list of card sets. :param card_sets: List of card sets where each set is a list of integers. :return: List of integers, each representing the length of the longest consecutive sequence for the corresponding card set. results = [] for cards in card_sets: if not cards: results.append(0) continue card_set = set(cards) longest_length = 0 for card in cards: if card-1 not in card_set: # Start of a new sequence current_card = card current_length = 1 while current_card + 1 in card_set: current_card += 1 current_length += 1 longest_length = max(longest_length, current_length) # Update the longest length results.append(longest_length) return results"},{"question":"# YOUR TASK Implement a function that receives an integer `n` and returns the nth row of Pascal\'s triangle. Pascal\'s triangle is defined as follows: - The first row is [1]. - Each subsequent row is constructed by adding the number above and to the left with the number above and to the right, treating empty entries as 0. EXAMPLE ```python get_pascal_row(0) # Output: [1] get_pascal_row(1) # Output: [1, 1] get_pascal_row(4) # Output: [1, 4, 6, 4, 1] ``` NOTES - `n` will always be a non-negative integer. - Try to optimize your solution to have a time complexity better than O(n^2).","solution":"def get_pascal_row(n): Returns the nth row of Pascal\'s triangle. if n == 0: return [1] # Start with the first row row = [1] for i in range(1, n + 1): # Generate the next row using the previous row new_row = [1] * (i + 1) for j in range(1, i): new_row[j] = row[j - 1] + row[j] row = new_row return row"},{"question":"A sequence is called an arithmetic progression if the difference between any two consecutive elements is the same. Your task is to write a function findMissingTerm which takes an array representing an arithmetic progression with one term missing and returns the missing term. Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a description of a test case. Each description starts with an integer N (the number of elements in the array) followed by N space-separated integers representing the arithmetic progression with one term missing. Output: For each test case, output the missing term of the arithmetic progression. Constraints: 1 <= T <= 50 3 <= N <= 100 -10^6 <= array elements <= 10^6 Example (To be used only for expected output): Input 2 5 2 4 6 8 10 4 5 15 20 25 Output 6 10 Explanation In the first test case, the given sequence is 2, 4, 6, 8, 10 with a difference of 2 between consecutive terms. The missing term is 6. In the second test case, the given sequence is 5, 15, 20, 25 with a difference of 5 between consecutive terms. The missing term is 10.","solution":"def find_missing_term(seq): Finds the missing term in the given arithmetic progression sequence. n = len(seq) total_sum = (n + 1) * (seq[0] + seq[-1]) // 2 actual_sum = sum(seq) return total_sum - actual_sum def find_missing_term_in_test_cases(test_cases): results = [] for case in test_cases: results.append(find_missing_term(case)) return results"},{"question":"Sarah is an urban planner working on the layout for a new city. She has to organize the placement of several equally spaced streetlights along the city\'s main highway. The highway is represented as a straight line starting at coordinate 0 and ending at coordinate L. The city\'s mayor has requested that the streetlights should be placed such that every segment of the highway of length d has exactly one streetlight. However, the first streetlight must always be placed at coordinate 0, and Sarah is allowed no more than M streetlights in total. Sarah needs to determine whether it\'s possible to place the required streetlights under these conditions. If it is possible, she also needs to output the minimum number of streetlights required to meet these specifications. Input The first line contains three space-separated integers L, d, and M (1 ≤ L, d ≤ 10^9, 1 ≤ M ≤ 10^5) — the length of the highway, the minimum distance between consecutive streetlights and the maximum number of streetlights allowed. Output If it is possible to place the streetlights, print a single integer — the minimum number of streetlights required. Otherwise, print \\"Impossible\\". Examples Input 10 3 5 Output 4 Input 15 5 2 Output Impossible Input 20 4 6 Output 6 Note In the first example, Sarah can place streetlights at coordinates 0, 3, 6, and 9, which means four streetlights in total and every segment of 3 units has a streetlight. In the second example, Sarah would need at least four streetlights to ensure every segment of 5 units has one, but since she is only allowed 2, the task is impossible. In the third example, placing streetlights at 0, 4, 8, 12, 16, and 20 ensures every segment of 4 units has one, meeting the requirements with exactly 6 streetlights.","solution":"def minimum_streetlights(L, d, M): Returns the minimum number of streetlights required to meet the conditions or \'Impossible\' if it is not possible. Parameters: L (int): The length of the highway. d (int): The minimum distance between consecutive streetlights. M (int): The maximum number of streetlights allowed. Returns: int or str: Minimum number of streetlights required or \'Impossible\'. # The minimum number of streetlights needed streetlights_needed = (L // d) + 1 # Check if the number of streetlights needed is less than or equal to the allowed maximum if streetlights_needed <= M: return streetlights_needed else: return \\"Impossible\\""},{"question":"You are given a grid of size n x m, filled with positive integers. Your task is to identify the smallest positive integer that is missing from the grid. The cells in the grid are indexed from (1,1) at the top-left corner to (n,m) at the bottom-right corner. INPUT: The first line of input contains a single integer t, the number of test cases. Description of a test case is given below. 1. The first line of each test case contains two space-separated integers n and m, the number of rows and columns of the grid, respectively. 2. The next n lines contain m space-separated integers each, representing the grid. OUTPUT: The output should consist of t lines, one for each test case. Each line should contain the smallest positive integer that is missing from the grid. CONSTRAINTS: 1 ≤ t ≤ 10 1 ≤ n, m ≤ 1000 1 ≤ grid[i][j] ≤ 10^6 SAMPLE INPUT: 2 3 4 1 2 3 10 4 5 6 1 7 8 9 2 2 2 1 3 2 4 SAMPLE OUTPUT: 5 5","solution":"def find_missing_integer(t, test_cases): Returns the smallest positive integer that is missing from the given list of grids. Parameters: t (int): The number of test cases. test_cases (list): A list of tuples where each tuple contains: - n (int): The number of rows in the grid. - m (int): The number of columns in the grid. - grid (list of lists): The n x m grid itself. Returns: list: A list of integers where each integer is the smallest positive integer missing from the corresponding grid. result = [] for n, m, grid in test_cases: presence = set() for row in grid: for value in row: if value > 0: presence.add(value) missing_integer = 1 while missing_integer in presence: missing_integer += 1 result.append(missing_integer) return result"},{"question":"Task Description Harika is very passionate about gardening. She spends every evening tending to her plants and making her garden more beautiful. One day, while planning the layout for her new flower bed, she came up with a unique idea and has challenged herself to create a specific pattern with the flowers. However, Harika needs your help to write a program that generates the layout pattern so that she can quickly get back to her gardening. Your task is to help Harika generate the flower pattern according to the following specifications: # Pattern Description: Given two integers M and K, you need to generate a pattern such that each element in the ith row and jth column of the pattern is calculated as: - Element[i][j] = i^2 + j^2 + K # Example: **Input:** 3 2 **Output:** 2 5 10 5 8 13 10 13 18 # Input Format: - The first line contains two integers T indicating the number of test cases. - For each test case, there are two integers M and K separated by a space. # Output Format: For each test case, print the required pattern for the corresponding M and K separated by a blank line between test case outputs. # Constraints: - 1 leq T leq 10^3 - 1 leq M leq 20 - 0 leq K leq 100 # Sample Input: 2 3 2 2 5 # Sample Output: 2 5 10 5 8 13 10 13 18 6 9 9 12","solution":"def generate_flower_bed_pattern(m, k): Generates the flower bed pattern as per described specifications. Parameters: m (int): The size of the pattern (number of rows and columns). k (int): The constant to add to each element. Returns: List[List[int]]: The generated pattern as a 2D list. pattern = [] for i in range(m): row = [] for j in range(m): element = i ** 2 + j ** 2 + k row.append(element) pattern.append(row) return pattern def multi_test_cases(pattern_cases): Handles multiple test cases for flower bed pattern generation. Parameters: pattern_cases (List[Tuple[int, int]]): List of tuples containing M and K. Returns: List[List[List[int]]]: List of patterns generated for each test case. results = [] for m, k in pattern_cases: results.append(generate_flower_bed_pattern(m, k)) return results"},{"question":"Alice has recently started a new online game. The game is structured on a grid with `n` rows and `m` columns. Each cell of the grid may be empty or contain a boulder. Alice\'s character can move in four possible directions: up, down, left, and right, but cannot move into a cell that contains a boulder. The game starts with Alice\'s character positioned at the top-left corner of the grid (1, 1). Alice\'s goal is to reach the bottom-right corner of the grid (n, m). However, Alice can only move if there is a path that avoids all boulders. Alice wants to know if it\'s possible to reach the bottom-right corner of the grid from the top-left corner, and if so, what\'s the minimum number of moves required. Can you help Alice by writing a program that determines whether it\'s possible to reach the bottom-right corner and, if so, calculates the minimum number of moves required? # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid, respectively. The next `n` lines contain `m` characters each, representing the grid. Each character is either \'.\' or \'#\', where \'.\' denotes an empty cell, and \'#\' denotes a cell with a boulder. # Output If there is a valid path from the top-left corner to the bottom-right corner, print the minimum number of moves required. Otherwise, print `-1`. # Examples Example 1 Input: ``` 5 5 ..... .#. ..... .#. ..... ``` Output: ``` 8 ``` Explanation: ``` The path is (1, 1) -> (1, 2) -> (1, 3) -> (1, 4) -> (1, 5) -> (2, 5) -> (3, 5) -> (4, 5) -> (5, 5) ``` Example 2 Input: ``` 3 3 #.# .#. #.# ``` Output: ``` -1 ``` Explanation: ``` There is no valid path from (1, 1) to (3, 3). ``` Example 3 Input: ``` 2 2 .. .. ``` Output: ``` 2 ``` Explanation: ``` The path is (1, 1) -> (1, 2) -> (2, 2) ```","solution":"from collections import deque def min_moves(n, m, grid): Returns the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner avoiding boulders, or -1 if no path exists. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(0, 0, 0)]) # (x, y, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are organizing a music festival and need to arrange the performance schedule for the bands. There are n bands and each band requires a certain amount of time to perform. The performance time of the i-th band is t_i minutes. To minimize the downtime between performances and make the event more engaging, each band\'s performance duration should not differ from the next band\'s duration by more than d minutes. Your task is to find the maximum number of bands that can be scheduled consecutively under this constraint. -----Input----- The first line of the input contains two integers n (1 le n le 10^5) and d (1 le d le 10^9) — the number of bands and the maximum allowed difference in performance time between consecutive bands. The second line of the input contains n integers t_1, t_2, dots, t_n (1 le t_i le 10^9), where t_i is the performance duration of the i-th band in minutes. -----Output----- Print one integer — the maximum number of consecutive bands that can be scheduled. -----Examples----- Input 5 3 30 28 25 27 29 Output 5 Input 4 2 15 20 25 22 Output 2 Input 6 1 1 5 9 13 17 21 Output 1 -----Note----- In the first example, you can schedule all 5 bands as their performance durations are within 3 minutes of each other. In the second example, you can only schedule two bands consecutively, like 20 and 22 or 22 and 25 but not more than 2 due to the maximum allowed difference d. In the third example, no two bands can be scheduled consecutively due to their large differences in performance durations.","solution":"def max_consecutive_bands(n, d, performance_times): Returns the maximum number of bands that can be scheduled consecutively given the allowed difference in performance time between consecutive bands. :param n: Number of bands (int) :param d: Maximum allowed difference in performance time (int) :param performance_times: List of performance times of bands (list of ints) :return: Maximum number of consecutive bands (int) # First, we sort the performance times to make it easier to check consecutive differences performance_times.sort() max_consecutive = 1 current_consecutive = 1 # Iterate through sorted performance times to find the maximum sequence of allowed differences for i in range(1, n): if performance_times[i] - performance_times[i - 1] <= d: current_consecutive += 1 else: current_consecutive = 1 max_consecutive = max(max_consecutive, current_consecutive) return max_consecutive"},{"question":"Little Chandu loves palindromes and symmetry. Recently, he discovered a series of numbers that when converted to strings create a palindrome. Right now, he wants to find the smallest palindrome greater than a given number. You being his elder sibling, are asked to help him write a program to find this smallest palindrome. Input: The first line of input contains an integer t. Then, t lines follow each containing a single integer N (the given number). Output: Print the smallest palindrome greater than the given number for each input value. Constraints: 1 ≤ t ≤ 100 1 ≤ N < 10^10 SAMPLE INPUT 3 123 898 2001 SAMPLE OUTPUT 131 909 2002","solution":"def is_palindrome(s): return s == s[::-1] def next_palindrome(N): N = str(int(N) + 1) while not is_palindrome(N): N = str(int(N) + 1) return N def smallest_palindromes(test_cases): results = [] for N in test_cases: results.append(next_palindrome(N)) return results def process_input(t, test_cases): return smallest_palindromes(test_cases)"},{"question":"In a city, there are R roads (numbered 1 through R) and C buildings (numbered 1 through C). Each road connects two distinct buildings, and buildings can be connected through multiple roads. Each road also has a weight representing the time it takes to travel through it. You are given Q queries, where each query provides a pair of buildings (u, v), and you need to determine the minimum time required to travel from building u to building v, if there is a path connecting them. If no such path exists, return -1 for that query. ------ Input ------ The first line of the input contains two integers R and C. The next R lines each contain three integers a_i, b_i, and w_i — representing a road between buildings a_i and b_i with a travel time of w_i. The following line contains a single integer Q — the number of queries. Each of the next Q lines contains two integers u and v — asking for the shortest time from building u to building v. ------ Output ------ For each query, print a single integer — the minimum travel time from building u to building v, or -1 if no such path exists. ------ Constraints ------ 1 ≤ R, C, Q ≤ 10^5 1 ≤ a_i, b_i, u, v ≤ C 1 ≤ w_i ≤ 10^6 ------ Subtasks ------ Subtask #1 (30 points): 1 ≤ C ≤ 1,000 Subtask #2 (70 points): original constraints ----- Sample Input 1 ----- 5 5 1 2 4 1 3 2 2 4 5 3 4 1 4 5 3 3 1 4 2 5 5 3 ----- Sample Output 1 ----- 3 8 4 ----- explanation 1 ----- For the first query (1 to 4), the shortest path is from 1 -> 3 -> 4 with a travel time of 2+1 = 3. For the second query (2 to 5), the shortest path is from 2 -> 1 -> 3 -> 4 -> 5 with a travel time of 4+2+1+3 = 10. For the third query (5 to 3), the shortest path is from 5 -> 4 -> 3 with a travel time of 3+1 = 4.","solution":"import heapq def dijkstra(graph, start, end): distances = {node: float(\'inf\') for node in graph} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def find_min_travel_time(R, C, roads, Q, queries): graph = {i: [] for i in range(1, C+1)} for a, b, w in roads: graph[a].append((b, w)) graph[b].append((a, w)) results = [] for u, v in queries: results.append(dijkstra(graph, u, v)) return results"},{"question":"Ronnie is trying to solve an interesting problem. He has a string s consisting of lowercase English letters and a list of queries. Each query contains two integers l and r (1 ≤ l ≤ r ≤ |s|) specifying a substring s[l..r] (1-based indexing). For each query, Ronnie wants to find the most frequently occurring character in the specified substring. If there is a tie, return the lexicographically smallest character among the most frequent ones. Input The first line contains the string s (1 ≤ |s| ≤ 200000). The second line contains an integer q (1 ≤ q ≤ 100000), the number of queries. Each of the following q lines contains two integers l and r (1 ≤ l ≤ r ≤ |s|) representing a query. Output For each query, print the most frequently occurring character in the substring s[l..r]. If there is a tie, print the lexicographically smallest character. Examples Input abracadabra 3 1 3 2 9 5 10 Output a a a Input mississippi 3 1 4 2 5 6 11 Output s i i","solution":"def most_frequent_char(s, queries): Returns the most frequently occurring character in the specified substrings for each query. results = [] for l, r in queries: sub = s[l-1:r] freq = {} for char in sub: if char in freq: freq[char] += 1 else: freq[char] = 1 max_freq = max(freq.values()) max_chars = [char for char in freq if freq[char] == max_freq] results.append(min(max_chars)) return results"},{"question":"`Description:` Given a string `s`, your task is to return a new string where each letter of the original string is shifted by a certain number of positions down the alphabet. If the shift causes a character to go past \'z\', it should wrap around to the start of the alphabet. Non-alphabetic characters should remain unchanged. The shift to apply is specified by an integer `k` which can be any positive integer. For example, shifting the string `\\"abc\\"` by `2` positions results in `\\"cde\\"`. If `k = 27`, it acts like shifting by `1` because there are 26 letters in the alphabet. `Explanation:` ```python # shift_string(s, k) ======> outputString shift_string(\\"abc\\", 2) ======> \\"cde\\" shift_string(\\"xyz\\", 3) ======> \\"abc\\" shift_string(\\"Hello, World!\\", 5) ======> \\"Mjqqt, Btwqi!\\" ``` In the examples given: - For `shift_string(\\"abc\\", 2)`, the letters `\\"a\\"`, `\\"b\\"`, and `\\"c\\"` are shifted to `\\"c\\"`, `\\"d\\"`, and `\\"e\\"` respectively. - For `shift_string(\\"xyz\\", 3)`, the letters `\\"x\\"`, `\\"y\\"`, and `\\"z\\"` wrap around and become `\\"a\\"`, `\\"b\\"`, and `\\"c\\"` respectively. - For `shift_string(\\"Hello, World!\\", 5)`, `\\"H\\"` is shifted to `\\"M\\"`, `\\"e\\"` to `\\"j\\"`, `\\"l\\"` to `\\"q\\"`, and so on, while non-alphabetic characters like `\\",\\"` and `\\"!\\"` remain the same. `Examples:` ```python shift_string(\\"abc\\", 2) =================> \\"cde\\" shift_string(\\"xyz\\", 3) =================> \\"abc\\" shift_string(\\"Hello, World!\\", 5) =======> \\"Mjqqt, Btwqi!\\" shift_string(\\"Rotate me\\", 13) ==========> \\"Ebgngr zr\\" shift_string(\\"Shift 123!\\", 1) ===========> \\"Tijgu 123!\\" ``` Implement a function `shift_string(s, k)` to achieve the described functionality.","solution":"def shift_string(s, k): Shifts each letter in the string s by k positions in the alphabet. Non-alphabetic characters remain unchanged. Args: s (str): The input string to be shifted. k (int): The number of positions to shift each letter. Returns: str: The shifted string. result = [] k = k % 26 # Reduce k to be within 0-25 for char in s: if \'a\' <= char <= \'z\': # Shift lowercase characters new_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) result.append(new_char) elif \'A\' <= char <= \'Z\': # Shift uppercase characters new_char = chr((ord(char) - ord(\'A\') + k) % 26 + ord(\'A\')) result.append(new_char) else: result.append(char) # Leave non-alphabetic characters unchanged return \'\'.join(result)"},{"question":"Write a function that determines whether a given string of parentheses is balanced or not. The function should support three types of parentheses: \'()\', \'{}\' and \'[]\'. Examples: Input: s = \\"()\\" Output: True Explanation: The string contains one pair of balanced parentheses. Input: s = \\"{(})\\" Output: False Explanation: The string contains mismatched parentheses. Input: s = \\"[()]{}{[()()]()}\\" Output: True Explanation: The string contains multiple types of balanced parentheses. Function Signature: def isBalanced(s: str) -> bool Your Task: You need to implement the function `isBalanced(s: str) -> bool` that takes a single argument, a string s, and returns a boolean value indicating whether the string is balanced or not. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 1 ≤ len(s) ≤ 10^6 - s will only contain characters from `\'(){}[]\'`.","solution":"def isBalanced(s: str) -> bool: Determines whether a given string of parentheses is balanced or not. Supports three types of parentheses: \'()\', \'{}\' and \'[]\'. stack = [] matching = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching.values(): stack.append(char) elif char in matching.keys(): if stack == [] or stack.pop() != matching[char]: return False else: # This part is redundant as per conditions, s should only contains \'(){}[]\' return False return stack == [] # Example usage # print(isBalanced(\\"()\\")) # True # print(isBalanced(\\"{(})\\")) # False # print(isBalanced(\\"[()]{}{[()()]()}\\")) # True"},{"question":"Aliens have landed on Earth and they communicate with a sequence of positive integers. They have provided a sequence of N integers and want to assess your ability to decipher patterns in their communication. They believe the important part of their message is the longest consecutive subsequence of identical numbers and want you to identify it. Write a program that takes a sequence of integers as input and outputs the length of the longest consecutive subsequence of identical numbers. # Input The input is given from Standard Input in the following format: ``` N a1 a2 a3 ... aN ``` * `N` is an integer representing the number of integers in the sequence (1 ≤ N ≤ 1000). * `a1, a2, a3, ... aN` are the integers in the sequence (1 ≤ ai ≤ 10000). # Output Print a single integer representing the length of the longest consecutive subsequence of identical numbers. # Example 1 Input ``` 7 1 2 2 2 3 3 4 ``` Output ``` 3 ``` # Example 2 Input ``` 10 5 5 5 5 5 5 5 5 5 5 ``` Output ``` 10 ``` # Example 3 Input ``` 5 1 2 3 4 5 ``` Output ``` 1 ```","solution":"def longest_consecutive_subsequence_length(N, sequence): Returns the length of the longest consecutive subsequence of identical numbers. if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if sequence[i] == sequence[i-1]: current_length += 1 else: current_length = 1 if current_length > max_length: max_length = current_length return max_length"},{"question":"A group of friends are planning a \\"Secret Santa\\" gift exchange for the holidays. Each friend buys a gift for another randomly assigned friend. However, because the group takes their holiday fun very seriously, they have imposed some strict rules to ensure fairness and mystery: 1. No one can receive more than one gift. 2. No one can give a gift to themselves. 3. The generated assignment should be as random as possible for the given constraints. Your task is to create a program to generate an appropriate gift-giving assignment for N friends such that all criteria listed above are met. ------ Input ------ The first line of the input file contains an integer T, the number of test cases. T test cases follow. Each test case starts with an integer N, the number of friends. The next line of each test case contains N space-separated strings, the unique names of the friends participating in the exchange. ------ Output ------ For each test case, output N lines. Each line should be in the format \\"X -> Y\\", indicating that X will give a gift to Y. If there are multiple valid solutions, any of them will be accepted. Ensure that your output meets the criteria listed above. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 500 Each name consists of up to 10 lowercase English letters. ------ Example ------ Input: 2 3 alice bob charlie 4 david emma frank grace Output: alice -> bob bob -> charlie charlie -> alice david -> emma emma -> frank frank -> grace grace -> david","solution":"import random def secret_santa(names): total_friends = len(names) givers = names[:] receivers = names[:] random.shuffle(receivers) # Ensure no one receives their own gift while any(giver == receiver for giver, receiver in zip(givers, receivers)): random.shuffle(receivers) return [f\\"{givers[i]} -> {receivers[i]}\\" for i in range(total_friends)] def generate_assignments(test_cases): results = [] for names in test_cases: result = secret_santa(names) results.append(result) return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) current_line = 1 test_cases = [] for _ in range(T): N = int(lines[current_line]) names = lines[current_line + 1].split() test_cases.append(names) current_line += 2 return test_cases def format_output(results): output_lines = [] for result in results: output_lines.extend(result) output_lines.append(\\"\\") # Separate different test case results with a blank line return \\"n\\".join(output_lines).strip()"},{"question":"You are asked to implement a simple database using an in-memory data structure to support a set of operations. The database should handle the following commands efficiently: 1. `PUT k v`: Stores the value `v` with the key `k`. 2. `GET k`: Retrieves the value associated with the key `k`, or outputs \\"NULL\\" if `k` doesn\'t exist. 3. `DELETE k`: Removes the key `k` and its value if it exists. 4. `COUNT v`: Returns the number of keys that have the value `v`. The commands should be executed in the order they are given. Assume that keys and values are strings consisting of alphanumeric characters. Input The first line of the input contains an integer `N` representing the number of commands. The next `N` lines each contain one command as described above. Output For each `GET` and `COUNT` command, output the result on a new line. Constraints 1 ≤ N ≤ 1000 Example Input 10 PUT key1 value1 PUT key2 value1 PUT key3 value2 GET key1 GET key2 GET key4 COUNT value1 COUNT value2 DELETE key1 COUNT value1 Output value1 value1 NULL 2 1 1 Explanation - `PUT key1 value1`: Stores \\"value1\\" with key \\"key1\\". - `PUT key2 value1`: Stores \\"value1\\" with key \\"key2\\". - `PUT key3 value2`: Stores \\"value2\\" with key \\"key3\\". - `GET key1`: Retrieves the value associated with \\"key1\\", which is \\"value1\\". - `GET key2`: Retrieves the value associated with \\"key2\\", which is \\"value1\\". - `GET key4`: \\"key4\\" doesn\'t exist, so it returns \\"NULL\\". - `COUNT value1`: There are 2 keys with \\"value1\\" (\\"key1\\" and \\"key2\\"). - `COUNT value2`: There is 1 key with \\"value2\\" (\\"key3\\"). - `DELETE key1`: Removes \\"key1\\" and its value. - `COUNT value1`: There is now only 1 key with \\"value1\\" (\\"key2\\").","solution":"class SimpleDatabase: def __init__(self): self.data = {} self.value_count = {} def put(self, k, v): if k in self.data: old_value = self.data[k] if old_value in self.value_count: self.value_count[old_value] -= 1 if self.value_count[old_value] == 0: del self.value_count[old_value] self.data[k] = v if v in self.value_count: self.value_count[v] += 1 else: self.value_count[v] = 1 def get(self, k): return self.data.get(k, \\"NULL\\") def delete(self, k): if k in self.data: value = self.data[k] if value in self.value_count: self.value_count[value] -= 1 if self.value_count[value] == 0: del self.value_count[value] del self.data[k] def count(self, v): return self.value_count.get(v, 0)"},{"question":"In a village fair, there is an interesting game at one stall. There are N tiles arranged in a straight line and each tile has a number on it from 1 to N. The game involves flipping the tiles based on a certain rule. Initially, all the tiles are turned face down so that the numbers on them are not visible. The rule for flipping the tiles is as follows: 1. For every i-th person (starting from i=1), they will flip the tiles that are multiples of i. 2. If a tile is already flipped face up, flipping it again will turn it face down, and vice versa. After N persons have taken their turn flipping the tiles, how many tiles will be face up? INPUT: A single integer (T), denoting the number of test cases. Following T lines will each contain a single integer N. OUTPUT: An integer for each test case denoting the number of tiles that will be face up. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^9 SAMPLE INPUT: 2 3 6 SAMPLE OUTPUT: 1 2 Explanation: For the first test case: - 1st person flips tiles 1, 2, 3 (all tiles are face up). - 2nd person flips tiles 2 (tiles 1 and 3 are face up, tile 2 is face down). - 3rd person flips tile 3 (tiles 1 and 2 are face up, tile 3 is face down). Only 1 tile (tile 1) is face up. Thus, the output is 1. For the second test case: - 1st person flips tiles 1, 2, 3, 4, 5, 6. - 2nd person flips tiles 2, 4, 6. - 3rd person flips tiles 3, 6. - 4th person flips tile 4. - 5th person flips tile 5. - 6th person flips tile 6. Tiles 1 and 4 remain face up. Thus, the output is 2.","solution":"def count_face_up_tiles(N): Returns the number of tiles that will be face up after N persons have taken their turn. # The tiles that remain face up are those whose positions are perfect squares. # This is because perfect squares have an odd number of divisors. return int(N ** 0.5) def fair_game(T, test_cases): Returns the number of tiles that will be face up for each test case. results = [] for N in test_cases: results.append(count_face_up_tiles(N)) return results"},{"question":"There is a kingdom consisting of n cities connected by m bidirectional roads. Each road connects two distinct cities and has a specific length. The king of the kingdom wants to construct a new road system to help people travel more efficiently. Your task is to help the king by determining the minimum number of roads required to ensure that any two cities in the kingdom are connected directly or indirectly via these roads. Two cities are directly connected if there is a road between them. They are indirectly connected if there is a sequence of roads such that each road in the sequence directly connects a pair of cities, and the sequence connects the two cities. Input The first line of the input contains an integer t (1 ≤ t ≤ 100): the number of test cases. Each test case contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ n(n-1)/2). The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^5), where u and v are the cities connected by the road, and w is the length of the road. The roads form an undirected graph with no self-loops or multiple edges between the same pair of cities. Output For each test case, print one line containing a single integer: the minimum number of roads required to ensure that all cities are connected directly or indirectly. Example Input 2 4 2 1 2 3 3 4 5 3 1 1 2 1 Output 2 2","solution":"def find_min_roads_to_connect_cities(t, test_cases): def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 results = [] for n, m, roads in test_cases: parent = list(range(n + 1)) rank = [0] * (n + 1) edge_count = 0 roads.sort(key=lambda x: x[2]) for road in roads: u, v, w = road uroot = find(parent, u) vroot = find(parent, v) if uroot != vroot: union(parent, rank, uroot, vroot) edge_count += 1 results.append(n - 1) return results"},{"question":"A telecommunications company wants to optimize the distribution of its new fiber-optic network. The company operates in a city represented by a binary tree, where each node is a building, and each edge is a street connecting two buildings. The company wants to install the network starting at the root building and extending to all other buildings. However, the cost of installing the fiber-optic cable is different for each street. The company wants to ensure that the total cost is minimized. Your task is to help the company determine the minimum cost required to connect all the buildings. INPUT The input consists of: 1. An integer n, the number of buildings (nodes) in the city (binary tree). 2. (n-1) pairs of integers u, v and w, where u and v are the building indices (1 ≤ u, v ≤ n) connected by a street with a cost w. OUTPUT Print a single integer, the minimum cost required to connect all the buildings. CONSTRAINTS 1 ≤ n ≤ 1000 1 ≤ w ≤ 1000 SAMPLE INPUT 5 1 2 4 1 3 3 2 4 2 3 5 6 SAMPLE OUTPUT 15 Explanation The binary tree representing the city\'s buildings and streets is as follows: 1 / 2 3 / 4 5 To connect all buildings with minimum cost, the selected streets should be (1-2), (1-3), (2-4), and (3-5), totaling a cost of 4 + 3 + 2 + 6 = 15.","solution":"def minCost(n, edges): Function to compute the minimum cost required to connect all buildings in a binary tree like network. Args: n : int : number of buildings edges : List of Tuple[int, int, int] : A list of tuples where each tuple contains 3 integers u, v and w representing an edge between building u and v with cost w. Returns: int : the minimum cost to connect all buildings. # We can use Kruskal\'s algorithm to find the Minimum Spanning Tree (MST). # Sort edges by their weight edges.sort(key=lambda edge: edge[2]) # Helper function to find the parent of a node in the disjoint-set def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) # Helper function to apply union of two sets def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 # Initialize MST cost mst_cost = 0 # Create parent and rank arrays for disjoint-set parent = [] rank = [] # Initialize disjoint set for node in range(n): parent.append(node) rank.append(0) # Iterate through all sorted edges for edge in edges: u, v, w = edge u = u - 1 # Convert to 0-based index v = v - 1 # Convert to 0-based index uroot = find(parent, u) vroot = find(parent, v) # If including this edge doesn\'t form a cycle if uroot != vroot: # Include it in the result mst_cost += w union(parent, rank, uroot, vroot) return mst_cost"},{"question":"In a fictional land called SequenceLand, the queen has assigned you a task to decipher a special sequence. The sequence is generated based on the following rules: 1. You start with an integer `X`. 2. In each subsequent step, if the number is even, divide it by 2. 3. If the number is odd, multiply it by 3 and then add 1. 4. The sequence terminates when you reach `1`. Given an initial value `X`, your task is to determine the number of steps required to reach `1`. For example, consider `X = 3`: - Step 1: 3 is odd, so 3 * 3 + 1 = 10. - Step 2: 10 is even, so 10 / 2 = 5. - Step 3: 5 is odd, so 5 * 3 + 1 = 16. - Step 4: 16 is even, so 16 / 2 = 8. - Step 5: 8 is even, so 8 / 2 = 4. - Step 6: 4 is even, so 4 / 2 = 2. - Step 7: 2 is even, so 2 / 2 = 1. Thus, it takes 7 steps to reach 1 starting from 3. ------ Input Format ------ - The first line of the input contains a single integer `T` denoting the number of test cases. The description of `T` test cases follows. - Each of the following `T` lines contains a single integer `X`. ------ Output Format ------ For each test case, print a single line containing one integer — the number of steps required to reach `1` from the given starting number `X`. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ X ≤ 10^6 ----- Sample Input ----- 3 3 6 19 ----- Sample Output ----- 7 8 20","solution":"def sequence_steps(X): Determines the number of steps required to reach 1 following the given rules. steps = 0 while X != 1: if X % 2 == 0: X //= 2 else: X = X * 3 + 1 steps += 1 return steps def solve(T, cases): Solves T cases of the sequence steps problem. results = [] for X in cases: results.append(sequence_steps(X)) return results"},{"question":"John is organizing a hiking trip and wants to plan his path optimally. The hiking area is represented as a grid of size m times n, where some cells might be blocked, meaning they are impassable. John starts at the top-left corner of the grid and wants to reach the bottom-right corner. John can move right, left, up, or down to an adjacent cell, but cannot move diagonally. He wants to find the shortest path from the start to the end. If multiple shortest paths exist, count the number of distinct shortest paths. -----Input----- The first line of the input contains two integers m and n. It is guaranteed that 1leq m, nleq 1000. The next m lines each contain n characters where each character is either \'.\' (indicating an open cell) or \'#\' (indicating a blocked cell). -----Output----- If it is possible for John to reach the bottom-right corner, print a single integer P, the number of distinct shortest paths. Otherwise, print \\"escape impossible\\" (without quotes). -----Examples----- Sample Input 1: 3 3 ... .#. ... Sample Output 1: 2 Sample Input 2: 3 3 ... # ... Sample Output 2: escape impossible","solution":"from collections import deque def shortest_paths(m, n, grid): if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return \\"escape impossible\\" directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = [[False] * n for _ in range(m)] visited[0][0] = True path_count = [[0] * n for _ in range(m)] path_count[0][0] = 1 distance = [[float(\'inf\')] * n for _ in range(m)] distance[0][0] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\' and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) distance[nx][ny] = distance[x][y] + 1 path_count[nx][ny] = path_count[x][y] elif 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\' and distance[nx][ny] == distance[x][y] + 1: path_count[nx][ny] += path_count[x][y] if distance[m-1][n-1] == float(\'inf\'): return \\"escape impossible\\" else: return path_count[m-1][n-1] # Example of usage # grid = [ # \\"...\\", # \\".#.\\", # \\"...\\" # ] # print(shortest_paths(3, 3, grid))"},{"question":"An archaic language, which is unfortunately becoming extinct, is written using unique alphabets. In an attempt to preserve it, a group of linguists is interested in keeping track of all unique words formatted according to the following rules: 1. Each word must be of a fixed length `L`. 2. Each word can only contain any of the first `A` letters of the alphabet. 3. No letter can be used more than once in any word. Given these rules, and the values for `A` and `L`, the linguists need your help to determine how many such unique words can be formed. Input: - The first line contains a single integer T, denoting the number of test cases. - The next `T` lines contain two space-separated integers `A` and `L` denoting the number of letters in the alphabet to use and the length of each word, respectively. Output: For each test case, output a single integer denoting the number of unique words that can be formed based on the given rules. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ A, L ≤ 15 SAMPLE INPUT: 2 3 2 4 3 SAMPLE OUTPUT: 6 24","solution":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) def count_unique_words(A, L): Returns the number of unique words of length L that can be formed using the first A letters of the alphabet, with no letter used more than once. if L > A: return 0 return factorial(A) // factorial(A - L) def unique_words_from_cases(test_cases): Process multiple test cases to find the number of unique words for each. :param test_cases: List of tuples where each tuple contains (A, L) :return: List of integers where each integer is the number of unique words for the respective test case. results = [] for A, L in test_cases: results.append(count_unique_words(A, L)) return results"},{"question":"Mary is organizing her digital photo collection. She has a series of photos that she wants to sort based on their timestamps. Each photo has a unique timestamp in the format HH:MM:SS. Mary wants to identify the longest consecutive subsequence of photos where each photo\'s timestamp strictly increases based on the one before it. This sequence does not need to be continuous in the list, but the photos must appear in the same order as they appear in the given input. Write a program to help Mary find the length of this longest consecutive subsequence of strictly increasing timestamps. -----Input----- The first line of the input contains an integer n, (1 ≤ n ≤ 100). Each of the next n lines contains a timestamp in the format HH:MM:SS. -----Output----- Output a single integer representing the length of the longest consecutive subsequence of strictly increasing timestamps. -----Examples----- Input 5 12:05:30 12:05:31 12:05:32 12:05:30 12:05:33 Output 4 Input 4 23:59:59 00:00:00 12:00:00 12:01:00 Output 3","solution":"def longest_increasing_subsequence(timestamps): import datetime # Convert timestamp strings to datetime objects for easy comparison timestamps = [datetime.datetime.strptime(t, \\"%H:%M:%S\\") for t in timestamps] # Initialize the list for dynamic programming dp = [1] * len(timestamps) # Compute the length of the longest increasing subsequence for i in range(1, len(timestamps)): for j in range(i): if timestamps[i] > timestamps[j]: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest increasing subsequence return max(dp) # Example usage: # n = 5 # timestamps = [\\"12:05:30\\", \\"12:05:31\\", \\"12:05:32\\", \\"12:05:30\\", \\"12:05:33\\"] # print(longest_increasing_subsequence(timestamps)) # Output: 4"},{"question":"Alex is organizing a charity marathon and wants to send unique bib numbers to all the participants. Each participant has a unique registration number which is a positive integer. To ensure that the bib numbers are short and memorable, Alex decides to create the bib number by summing the digits of the registration number until a single digit is obtained. Write a program to convert each participant\'s registration number into a unique bib number by repeatedly summing its digits until the result is a single digit. ------ Input Format ------ - The first line contains a single integer T, the number of participants. - The next T lines each contain a single integer N, representing the registration number of a participant. ------ Output Format ------ Output T lines, each containing the unique bib number for the respective participant. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 ------ Sample Input 1 ------ 4 9875 123 45678 1 ------ Sample Output 1 ------ 2 6 3 1 ------ Explanation 1 ------ - For 9875, the summation process is: 9+8+7+5 = 29, 2+9 = 11, 1+1 = 2. - For 123, the summation process is: 1+2+3 = 6. - For 45678, the summation process is: 4+5+6+7+8 = 30, 3+0 = 3. - For 1, it\'s already a single digit, so the unique bib number is 1.","solution":"def unique_bib_number(registration_number): Converts registration number into a unique bib number by summing its digits until a single digit is obtained. while registration_number >= 10: registration_number = sum(int(digit) for digit in str(registration_number)) return registration_number def get_bib_numbers(participants): Receives a list of registration numbers and returns their unique bib numbers. return [unique_bib_number(n) for n in participants]"},{"question":"Sophie is organizing a library where books are categorized by genres. Each genre is organized in a single row on the bookshelf, and each book has a different width. Sophie wants to ensure that the books in each genre are evenly distributed across their respective rows. She has the following requirements: 1. She cannot move books between genres. 2. Every book within a genre must remain in its genre row. 3. She wants to find the minimum total width of the shelf required to accommodate all the books if all rows should have the same number of books. If it is not possible to distribute the books evenly, she prefers to know how many full sections can be created with possible leftover books indicated separately. Write a program that helps Sophie calculate the shelf width for each genre, and if the distribution is impossible under the requirements, indicate the number of full rows and the number of leftover books in each genre. -----Input----- The input consists of: - A single integer `n` (1 ≤ n ≤ 10^5) representing the number of genres in the library. - `n` subsequent lines containing the widths of books in each genre, as a space-separated list of integers where each integer width wi (1 ≤ wi ≤ 1000). -----Output----- For each genre, output either: 1. The minimum total width of the shelf required. 2. If it\'s impossible to distribute books within the constraints, print the full rows and the number of leftover books for that genre. -----Examples----- Input: 3 2 3 1 4 5 6 1 2 8 Output: 15 3 1 7 -----Note----- In the first genre, books can be arranged in a single row with the total width being 15. In the second genre, there are enough books to create 1 full row of 3 books each, and 1 leftover book remains, the output is \\"3 1\\". In the third genre, since it has only one book with width 8, the output is 8. Help Sophie efficiently manage the shelves in her library with your program.","solution":"def organize_books(n, genres): results = [] for genre in genres: total_books = len(genre) rows = total_books sum_width = sum(genre) min_total_width = sum_width leftover = 0 if total_books == 0: results.append((0, 0)) else: results.append(min_total_width) return results # Example n = 3 genres = [[2, 3, 1, 4, 5], [6, 1, 2], [8]] print(organize_books(n, genres))"},{"question":"Given a string consisting of lowercase Latin characters and spaces, write a function to capitalize the first letter of each word in the string. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow. - Each test case is described with a single line containing a string S, the input string. -----Output----- - For each test case, output a single line containing the string S with the first letter of each word capitalized. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ |S| ≤ 1000, where |S| is the length of the string S. -----Example----- Input: 2 hello world this is a test Output: Hello World This Is A Test -----Explanation----- In the first test case, the input string \\"hello world\\" is transformed to \\"Hello World\\" by capitalizing the first letter of each word. Similarly, in the second test case, \\"this is a test\\" is transformed to \\"This Is A Test\\".","solution":"def capitalize_first_letter_of_each_word(T, test_cases): This function receives the number of test cases and a list of strings. It returns a list of strings with the first letter of each word capitalized. capitalized_sentences = [] for s in test_cases: capitalized_sentences.append(\' \'.join(word.capitalize() for word in s.split(\' \'))) return capitalized_sentences"},{"question":"Alice loves to arrange her book collection aesthetically on her shelves. Each shelf has a limited capacity, but she wants to maximize the number of books displayed while ensuring they look neat. Alice arranges books by their thickness, replacing thinner books with slightly thicker ones to maintain a smooth gradient. Given a list of books with varied thicknesses, each represented by an integer, your task is to determine the longest possible subsequence of books that Alice can display such that each book in the subsequence is followed by a book with a greater thickness than the one before it. Input The first line contains an integer n (1 ≤ n ≤ 10^4), the number of books. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^9), representing the thickness of each book. Output Output a single integer, the length of the longest increasing subsequence of books by thickness. Examples Input 6 5 3 4 8 6 7 Output 4 Input 5 9 8 7 6 5 Output 1 Input 8 1 3 2 5 4 6 1 7 Output 5 Note In the first example, Alice can display books with thicknesses 3, 4, 6, and 7 to achieve the longest increasing subsequence of length 4. In the second example, no book can follow another with a greater thickness, so the longest increasing subsequence has length 1 (each book individually). In the third example, one possible longest increasing subsequence is the books with thicknesses 1, 2, 4, 6, and 7.","solution":"from bisect import bisect_left def longest_increasing_subsequence(books): Returns the length of the longest increasing subsequence of book thicknesses. if not books: return 0 # Initialize an empty list that will store the smallest ending value of # the increasing subsequence of each possible length. subseq_ends = [] for book in books: # Find the index where book would go in subseq_ends to maintain the sorted order pos = bisect_left(subseq_ends, book) # If pos is equal to length of subseq_ends, it means book can extend the longest subsequence if pos == len(subseq_ends): subseq_ends.append(book) else: # Otherwise, we replace the element at pos with book subseq_ends[pos] = book return len(subseq_ends)"},{"question":"Consider the following task: Develop a function that takes a list of ranges and a target number, then determines if the target number falls within any of the given ranges. Your function will accept two arguments: - A list of tuples, where each tuple contains two integers representing the start and end of a range (inclusive). - A single integer representing the target number. If the target number falls within any of the specified ranges, the function should return `True`. Otherwise, return `False`. # Example: ```python is_in_range([(1, 5), (10, 15), (20, 25)], 3) => True is_in_range([(1, 5), (10, 15), (20, 25)], 16) => False ``` Good luck!","solution":"def is_in_range(ranges, target): Determines if the target number falls within any of the specified ranges. Parameters: ranges (list of tuples): A list of tuples where each tuple contains two integers representing the start and end of a range (inclusive). target (int): The target number to check against the ranges. Returns: bool: True if the target is within any of the ranges, False otherwise. for start, end in ranges: if start <= target <= end: return True return False"},{"question":"Problem Given a string S consisting of lowercase letters and numbers, your goal is to determine if it is possible to reorder the string to form a palindrome. A palindrome is a string that reads the same forward and backward. If it is possible to create a palindrome by reordering the characters of the string, return \\"YES\\". Otherwise, return \\"NO\\". Constraints * 1 ≤ |S| ≤ 1,000 * String S contains only lowercase letters and numbers Input The string S is given on one line. Output Output \\"YES\\" if the string can be reordered to form a palindrome, otherwise output \\"NO\\". Examples Input aabbcc Output YES Input aabbc Output YES Input aabcd Output NO","solution":"from collections import Counter def can_form_palindrome(s): Determines if the string s can be reordered to form a palindrome. Args: s (str): The input string consisting of lowercase letters and numbers. Returns: str: \'YES\' if the string can be reordered to form a palindrome, otherwise \'NO\'. count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) # A string can be rearranged to form a palindrome if at most one character occurs an odd number of times if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"A library uses a system for handling book borrows and returns where there are n books, each identified by a unique integer ID from 1 to n. Users can borrow any number of available books and return them later. Your task is to design a system that efficiently manages the borrow and return operations, and can also display the current status of all books in the library (i.e., which books are available and which are borrowed). You need to implement a system that supports the following operations: 1. Borrow a book with a specific ID. 2. Return a book with a specific ID. 3. Print the current status of all books in a specific format. -----Input----- The input consists of a sequence of operations. The system should start with all books marked as available (not borrowed). Each operation is given on a new line and can be one of the following types: - \\"BORROW x\\" where x is the ID of the book to borrow (1 ≤ x ≤ n) - \\"RETURN x\\" where x is the ID of the book to return (1 ≤ x ≤ n) - \\"STATUS\\" which should print the status of all books It is guaranteed that each \\"BORROW x\\" operation will only be called for a book that is currently available, and each \\"RETURN x\\" operation will only be called for a book that is currently borrowed. The \\"STATUS\\" operation should print the IDs of available books in increasing order, followed by the IDs of borrowed books in increasing order, each on a new line. -----Output----- For each \\"STATUS\\" operation, print two lines: 1. The IDs of available books in increasing order, separated by spaces. 2. The IDs of borrowed books in increasing order, separated by spaces. -----Example----- Input BORROW 3 BORROW 1 STATUS RETURN 1 STATUS BORROW 2 STATUS Output 2 4 5 6 7 ... 1 1 2 4 5 6 7 ... Empty 4 5 6 7 ... 1 2 -----Note----- - If the library has 7 books {1, 2, 3, 4, 5, 6, 7}, after borrowing book 3 and book 1, book 1 and book 3 will be marked as borrowed. - After the \\"STATUS\\" operation, the first line will display available books {2, 4, 5, 6,7} and the second line will display borrowed books {1, 3}.","solution":"class Library: def __init__(self, n): self.available_books = set(range(1, n + 1)) self.borrowed_books = set() def borrow_book(self, book_id): if book_id in self.available_books: self.available_books.remove(book_id) self.borrowed_books.add(book_id) def return_book(self, book_id): if book_id in self.borrowed_books: self.borrowed_books.remove(book_id) self.available_books.add(book_id) def status(self): available_books_sorted = sorted(self.available_books) borrowed_books_sorted = sorted(self.borrowed_books) return available_books_sorted, borrowed_books_sorted"},{"question":"Write a function called `alternating_sum` that takes a list of integers and returns the alternating sum of the elements, starting by adding the first element, subtracting the second, adding the third, subtracting the fourth, and so on. # Examples ```python alternating_sum([1, 2, 3, 4, 5]) ==> 3 # 1 - 2 + 3 - 4 + 5 = 3 alternating_sum([10, 1, 1, 1, 10]) ==> 19 # 10 - 1 + 1 - 1 + 10 = 19 alternating_sum([0, 0, 0, 0, 0]) ==> 0 # 0 - 0 + 0 - 0 + 0 = 0 alternating_sum([5]) ==> 5 # Only one element, so the sum is itself ```","solution":"def alternating_sum(nums): Returns the alternating sum of the elements in the list nums. result = 0 for i, num in enumerate(nums): if i % 2 == 0: result += num else: result -= num return result"},{"question":"Given an array A of length N consisting of positive integers, determine whether the array can be partitioned into two non-empty subarrays such that the sum of the elements in the first subarray is equal to the sum of the elements in the second subarray. If such a partition is possible, return the index i such that 1 leq i < N and the sum of the elements from A_1 to A_i is equal to the sum of the elements from A_{i+1} to A_N. If multiple solutions exist, return the smallest index i. If no such partition exists, return -1. **Input** - The first line contains an integer N (2 leq N leq 10^5), the length of the array. - The second line contains N space-separated positive integers A_1, A_2, ..., A_N (1 leq A_i leq 10^9), the elements of the array. **Output** - Output a single integer representing the index i for the partition or -1 if no suitable partition exists. **Example** **Input:** 6 1 2 3 3 2 1 **Output:** 3 **Input:** 5 1 1 1 1 1 **Output:** -1 **Explanation:** In the first example, summing the first three elements (1+2+3) gives 6, which is equal to the sum of the last three elements (3+2+1). Therefore, the partition point is 3. In the second example, no partition exists where the sum of the first part is equal to the sum of the second part. Thus, the output is -1.","solution":"def find_partition_index(N, A): Finds the partitioning index such that the sum of the elements in the first subarray is equal to the sum of the elements in the second subarray. If no partition is possible, returns -1. total_sum = sum(A) left_sum = 0 for i in range(N - 1): left_sum += A[i] if left_sum == total_sum - left_sum: return i + 1 return -1"},{"question":"You are given a rectangular chocolate bar consisting of m × n square pieces. Some of the pieces have nuts in them while others do not. You are tasked with dividing the chocolate into exactly k smaller rectangular pieces by making k-1 straight cuts (either horizontal or vertical). Your goal is to maximize the minimum number of nut pieces in any of the resulting k pieces of chocolate after making the k-1 cuts. -----Input----- The first line of the input contains two integers m and n (1 ≤ m, n ≤ 100) — the dimensions of the chocolate bar. The second line contains one integer k (1 ≤ k ≤ m * n) — the number of rectangular pieces the chocolate bar should be divided into. Each of the next m lines contains n binary integers separated by spaces, where 1 represents a piece with a nut, and 0 represents a piece without a nut. -----Output----- Print one integer — the maximum possible value of the minimum number of nut pieces in any of the resulting k pieces after making the k-1 cuts. -----Examples----- Input 3 3 4 1 0 0 0 1 0 0 0 1 Output 0 Input 4 4 2 1 0 1 0 0 1 0 1 1 0 1 0 0 1 0 1 Output 4 -----Note----- In the first example, the chocolate bar can be divided into four pieces each having at least 0 nut pieces, which is trivial with any division. In the second example, the chocolate bar can be divided into two pieces having exactly 4 nut pieces each by making a single vertical or horizontal cut through the middle.","solution":"def divide_chocolate(m, n, k, chocolate): def possible(min_nuts): # DP array with dimensions (m+1)x(n+1) for fewer boundary checks dp = [[0] * (n + 1) for _ in range(m + 1)] # Count total nuts from (0,0) to (i,j) for i in range(m): for j in range(n): dp[i+1][j+1] = chocolate[i][j] + dp[i+1][j] + dp[i][j+1] - dp[i][j] def get_nuts(x1, y1, x2, y2): # Calculate number of nuts in rectangle (x1,y1) to (x2,y2) return dp[x2+1][y2+1] - dp[x2+1][y1] - dp[x1][y2+1] + dp[x1][y1] # Try to make k pieces using horizontal and vertical cuts def dfs(x, y, pieces): if pieces == 1: return get_nuts(x, y, m-1, n-1) >= min_nuts for i in range(x, m): if get_nuts(x, y, i, n-1) >= min_nuts: if dfs(i + 1, y, pieces - 1): return True for j in range(y, n): if get_nuts(x, y, m-1, j) >= min_nuts: if dfs(x, j + 1, pieces - 1): return True return False return dfs(0, 0, k) nuts = sum(sum(row) for row in chocolate) lo, hi = 0, nuts // k while lo < hi: mid = (lo + hi + 1) // 2 if possible(mid): lo = mid else: hi = mid - 1 return lo # Example usage: # m = 3, n = 3, k = 4, chocolate = [ # [1, 0, 0], # [0, 1, 0], # [0, 0, 1] # ] # Output should be 0. # Example usage: # m = 4, n = 4, k = 2, chocolate = [ # [1, 0, 1, 0], # [0, 1, 0, 1], # [1, 0, 1, 0], # [0, 1, 0, 1] # ] # Output should be 4."},{"question":"Carol is an enthusiastic gardener who has a rectangular garden represented as a grid of size n by m. Each cell of the grid can either have a flower patch represented by \\"F\\" or be empty, represented by \\".\\". Carol can plant additional flower patches on the empty cells to connect all existing flower patches into one connected component. Two flower patches are considered connected if they are adjacent vertically or horizontally. Carol wants to know the minimum number of flower patches she needs to plant to make all the flower patches in her garden connected. Write a program to help Carol determine the minimum number of additional flower patches required. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and the number of columns in the grid. Each of the next n lines contains m characters denoting the corresponding row of the grid. The following characters can occur: * \\".\\" — an empty cell; * \\"F\\" — a cell with a flower patch. Output In the only line print one integer — the minimum number of additional flower patches Carol needs to plant to connect all existing flower patches into one connected component. Examples Input 4 5 F..F. ..... .F.F. ...F. Output 3 Input 3 3 F.. ..F F.. Output 2 Note In the first sample, Carol can plant one flower patch between the two existing patches in the third row and second column. Then, she needs to plant two more flower patches at grid points (4,3) and (4,4) to connect all flower patches into one connected component. In the second sample, Carol can plant one flower patch at grid point (2,2) and another one at grid point (3,2). This way, all flower patches will be connected.","solution":"def minimum_flower_patches(n, m, garden): from collections import deque def bfs(start): queue = deque([start]) visited.add(start) while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and garden[nx][ny] == \'F\': visited.add((nx, ny)) queue.append((nx, ny)) visited = set() components = 0 for i in range(n): for j in range(m): if (i, j) not in visited and garden[i][j] == \'F\': bfs((i, j)) components += 1 return max(0, components - 1) # Example usage: n = 4 m = 5 garden = [ \\"F..F.\\", \\".....\\", \\".F.F.\\", \\"...F.\\" ] print(minimum_flower_patches(n, m, garden)) # Output: 3 n = 3 m = 3 garden = [ \\"F..\\", \\"..F\\", \\"F..\\" ] print(minimum_flower_patches(n, m, garden)) # Output: 2"},{"question":"Given an array of integers A = {a_1, a_2, ..., a_n}, find the subarray with the maximum sum. Constraints * 1 leq n leq 100,000 * -1,000 leq a_i leq 1,000 Input An integer n followed by an array of n integers will be provided in the following format: n a_1 ; a_2 ; ... ; a_n Output Print the maximum sum of any subarray. Example Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6","solution":"def max_subarray_sum(n, array): Finds the maximum sum of any subarray within the array. Args: n (int): The number of elements in the array. array (list): A list of integers representing the array. Returns: int: The maximum sum of any subarray. max_ending_here = max_so_far = array[0] for x in array[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Example usage: # n = 9 # array = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(max_subarray_sum(n, array))"},{"question":"You are organizing a mini hackathon and each participant is required to complete a series of challenges. Participants start in order from the first to the last and each challenge has a time limit within which it must be completed. The moment a participant fails a challenge or takes longer than the provided time limit, they are disqualified from further challenges. A participant who completes all challenges within the time limits is declared a winner. Write a program that determines which participants successfully completed all the challenges. Input Format The first line contains two integers, N (the number of participants) and M (the number of challenges). The next line contains M integers, each representing the time limit for a specific challenge. Then, the next N lines contain M integers each, where the i-th line contains the times taken by participant i to complete each of the M challenges. Output Format The output should contain the participant numbers (starting from 1) who successfully completed all the challenges, each on a new line. If no participant successfully completes all challenges, print \\"No Winners\\". Input Limits 1 <= N, M <= 50 1 <= Time taken for each challenge, Time limit <= 100 SAMPLE INPUT 3 4 10 12 20 15 8 10 18 12 9 11 25 14 12 14 19 13 SAMPLE OUTPUT 1 Explanation In this example, there are 3 participants and 4 challenges. The time limits for the challenges are [10, 12, 20, 15]. The times taken by the participants are: - Participant 1: [8, 10, 18, 12] which are all under the respective time limits. - Participant 2: [9, 11, 25, 14] where the third time is 25 which exceeds the limit of 20. - Participant 3: [12, 14, 19, 13] where the first time is 12 which equals the limit but doesn\'t exceed it, so this participant is still considered. Hence, only Participant 1 successfully completed all the challenges.","solution":"def determine_winners(N, M, time_limits, participants_times): Determines which participants successfully completed all the challenges within the time limits. Args: N : int : Number of participants M : int : Number of challenges time_limits : List[int] : List of time limits for each challenge participants_times : List[List[int]] : Times taken by each participant for each challenge Returns: List[int] : List of participant numbers who successfully completed all challenges winners = [] for i in range(N): if all(participants_times[i][j] <= time_limits[j] for j in range(M)): winners.append(i + 1) return winners if winners else [\\"No Winners\\"]"},{"question":"The mayor of a small town has organized a treasure hunt for charity. Participants are split into teams, and each team is given a map in the form of a grid. The map has a mix of safe and unsafe squares. Teams must navigate from the top-left corner of the grid to the bottom-right corner, only moving in the four cardinal directions (left, right, up, down). Your task is to write a program that checks if there is a safe path from the start to the treasure. A safe path means only traversing safe squares. Each square on the grid is represented by an integer. A \'1\' represents a safe square, while a \'0\' represents an unsafe one. You need to determine if there is at least one safe path from the top-left corner to the bottom-right corner of the grid. **Input:** - An integer `T` (1 ≤ T ≤ 10) representing the number of test cases. - For each test case: - An integer `N` (1 ≤ N ≤ 200) representing the size of the grid (NxN). - `N` lines of space-separated integers (either 0 or 1) representing the grid. **Output:** For each test case, print \\"YES\\" if there is at least one safe path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". **Examples:** ``` Input: 2 4 1 0 0 1 1 1 0 1 0 1 1 0 1 1 1 1 3 1 1 1 0 0 1 1 1 1 Output: YES NO ``` In the first example, there is a path through the safe squares: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2) -> (3,2) -> (3,3). In the second example, there is no safe path from the top-left to the bottom-right corner.","solution":"from collections import deque def is_safe_path(grid): n = len(grid) if grid[0][0] == 0 or grid[-1][-1] == 0: return \\"NO\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (n-1, n-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 1: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" def treasure_hunt(test_cases): results = [] for t in range(test_cases): n = int(input().strip()) grid = [list(map(int, input().strip().split())) for _ in range(n)] results.append(is_safe_path(grid)) return results def main(): T = int(input().strip()) results = treasure_hunt(T) for result in results: print(result)"},{"question":"Alex is working on a large digital library of books. Each book is represented by a string of lowercase letters. Alex wants to categorize the books into groups where each group contains books that are anagrams of each other. Two books are anagrams if you can rearrange the characters of one book to get the other book. Write a program that takes multiple test cases as input. For each test case, you will receive a number representing the number of books followed by that many lines, each containing the title of a book. Your task is to return the number of groups of anagrams for each test case. Input: - The first line contains the number of test cases, T. - For each test case, the first line contains an integer N, the number of book titles. - The following N lines contain one book title each. Output: For each test case, print the number of groups of anagrams. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ length of each book title ≤ 100 SAMPLE INPUT 2 3 listen silent enlist 4 cat dog tac god SAMPLE OUTPUT 1 2 Explanation: In the first test case, all book titles are anagrams of each other so there is 1 group. In the second test case, \'cat\' and \'tac\' are anagrams of each other, and \'dog\' and \'god\' are anagrams of each other, making 2 groups.","solution":"def count_anagram_groups(num_test_cases, test_cases): result = [] for i in range(num_test_cases): num_books = test_cases[i][0] book_titles = test_cases[i][1:] hash_map = {} for title in book_titles: sorted_title = \'\'.join(sorted(title)) if sorted_title in hash_map: hash_map[sorted_title].append(title) else: hash_map[sorted_title] = [title] result.append(len(hash_map)) return result"},{"question":"Find the Middle Character(s) Write a function that takes a string `s` as input and returns the middle character(s). If the length of the string is odd, return the single middle character. If the length is even, return the two middle characters. # Examples ``` get_middle(\\"testing\\") => \\"t\\" get_middle(\\"middle\\") => \\"dd\\" get_middle(\\"A\\") => \\"A\\" get_middle(\\"even\\") => \\"ve\\" ``` # Constraints - The input string `s` will have a length between 1 and 1,000 (inclusive). - The input string will contain only alphabetic characters and spaces.","solution":"def get_middle(s): Returns the middle character(s) of the string s. If the length of the string is odd, returns the middle character. If the length is even, returns the two middle characters. length = len(s) if length % 2 == 0: # Length is even middle_index = length // 2 return s[middle_index - 1: middle_index + 1] else: # Length is odd middle_index = length // 2 return s[middle_index]"},{"question":"Given a string `s`, consisting only of characters \'U\', \'D\', \'L\', and \'R\', representing movements up, down, left, and right respectively on a two-dimensional plane, determine whether the sequence of movements will bring you back to the origin (0, 0). A movement \'U\' increases the y-coordinate by 1, \'D\' decreases the y-coordinate by 1, \'L\' decreases the x-coordinate by 1, and \'R\' increases the x-coordinate by 1. Write a function `is_at_origin(s: str) -> bool` that returns `True` if the sequence brings you back to the origin, and `False` otherwise. For example: ``` is_at_origin(\\"UDLR\\") should return True, because following these movements will bring you back to the origin. is_at_origin(\\"UUDDLLRR\\") should return True for the same reason. is_at_origin(\\"UUDL\\") should return False, because these movements do not bring you back to the origin. ``` # Constraints: - The input string `s` will contain only the characters \'U\', \'D\', \'L\', and \'R\'. - The length of `s` will be between 1 and 1000, inclusive.","solution":"def is_at_origin(s: str) -> bool: Determines if the sequence of movements returns to the origin (0, 0). :param s: A string consisting only of \'U\', \'D\', \'L\', and \'R\'. :return: True if the movements return to the origin, False otherwise. x, y = 0, 0 for char in s: if char == \'U\': y += 1 elif char == \'D\': y -= 1 elif char == \'L\': x -= 1 elif char == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Garnet Software specializes in creating a unique maze for their games. The maze is represented by a grid, where each cell is a square. Each cell can be either passable or impassable. The maze has a starting point and an ending point, and your task is to determine if there is a path from the starting point to the ending point. You must move from cell to cell horizontally or vertically, and you cannot move into an impassable cell. A grid is provided where: - \'.\' represents a passable cell - \'#\' represents an impassable cell - \'S\' represents the starting point - \'E\' represents the ending point The dimensions of the grid are n × m (1 <= n, m <= 100), and there will always be exactly one \'S\' and one \'E\' in the grid. Your task is to write a program to determine if there is a path from the starting point to the ending point. Input The input consists of: - The first line contains two integers n and m — the dimensions of the grid. - The next n lines each contain m characters representing the grid. Output Print \\"YES\\" if there is a path from the starting point \'S\' to the ending point \'E\'. Otherwise, print \\"NO\\". Examples Input 5 5 S..#. .#..# .#..# ..# ...E. Output YES Input 4 4 S.#. #..# ..#. .#E# Output NO Note: In the first example, you can follow the path from \'S\' to \'E\' through passable cells. In the second example, there is no path from \'S\' to \'E\' due to impassable cells blocking the way.","solution":"def find_path(maze, n, m): from collections import deque # Find the starting point \'S\' for i in range(n): for j in range(m): if maze[i][j] == \'S\': start = (i, j) if maze[i][j] == \'E\': end = (i, j) # Directions for moving (right, left, down, up) directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # BFS to find the path queue = deque([start]) visited = set() visited.add(start) while queue: current = queue.popleft() if current == end: return \\"YES\\" for direction in directions: ni, nj = current[0] + direction[0], current[1] + direction[1] if 0 <= ni < n and 0 <= nj < m and (ni, nj) not in visited and maze[ni][nj] != \'#\': queue.append((ni, nj)) visited.add((ni, nj)) return \\"NO\\" # Example usage: n, m = 5, 5 maze = [ \\"S..#.\\", \\".#..#\\", \\".#..#\\", \\"..#\\", \\"...E.\\" ] print(find_path([list(row) for row in maze], n, m)) # Output: YES n, m = 4, 4 maze = [ \\"S.#.\\", \\"#..#\\", \\"..#.\\", \\".#E#\\" ] print(find_path([list(row) for row in maze], n, m)) # Output: NO"},{"question":"Write a program to accept a list of integers and output the second smallest number in the list. -----Input:----- - First line will contain an integer N denoting the number of integers in the list. - Second line will contain N space-separated integers representing the elements of the list. -----Output:----- Output a single line, the second smallest number in the list. -----Constraints----- - 2 leq N leq 1000 - Each integer in the list will be in the range -1000 to 1000 -----Sample Input:----- 5 3 1 5 2 4 -----Sample Output:----- 2 -----EXPLANATION:----- The sorted list is [1, 2, 3, 4, 5]. The second smallest number in this list is 2.","solution":"def second_smallest_number(nums): Returns the second smallest number in the list `nums`. Args: nums: List of integers Returns: Integer: The second smallest number in the list unique_nums = list(set(nums)) # Remove duplicates unique_nums.sort() return unique_nums[1] if len(unique_nums) > 1 else None"},{"question":"Determine if a given string s is a valid palindrome considering only alphanumeric characters and ignoring cases. For this problem, we define a valid palindrome as a string that reads the same forwards and backwards after converting all upper case letters into lower case letters and removing all non-alphanumeric characters. Example 1: Input: s = \\"A man, a plan, a canal: Panama\\" Output: true Example 2: Input: s = \\"race a car\\" Output: false","solution":"def is_palindrome(s): Determine if a given string s is a valid palindrome considering only alphanumeric characters and ignoring cases. # Convert to lower case and filter out non-alphanumeric characters filtered_chars = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the filtered string is equal to its reverse return filtered_chars == filtered_chars[::-1]"},{"question":"You are given a string expression consisting of positive digits, arithmetic operations (\'+\', \'-\', \'*\'), and parentheses \'(\' and \')\'. The goal is to evaluate the expression and return the result as an integer. Input The only line of the input contains a valid expression. The length of the expression does not exceed 200 characters. It is guaranteed that the expression will not have any division. All operations and parentheses are properly spaced. Output The only line of the output should contain the result of the evaluation of the expression. Examples Input 3 * ( 4 + 5 ) - 6 Output 21 Input 12 + 23 * 2 Output 58 Input ( 1 + 2 ) * ( 3 + 4 ) Output 21","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression containing +, -, *, parentheses. def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\': return 2 return 0 def apply_operations(values, operations): b = values.pop() a = values.pop() op = operations.pop() values.append(operate(a, b, op)) values = [] operations = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue elif expression[i] == \'(\': operations.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression)) and (expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operations) != 0 and operations[-1] != \'(\': apply_operations(values, operations) operations.pop() else: while (len(operations) != 0 and precedence(operations[-1]) >= precedence(expression[i])): apply_operations(values, operations) operations.append(expression[i]) i += 1 while len(operations) != 0: apply_operations(values, operations) return values[-1]"},{"question":"Asha is training to become a gourmet chef and wants to organize her schedule efficiently. She has X ingredients available in her kitchen and can prepare a maximum of Y different types of dishes. Each dish requires a specific number of ingredients, designated as Z_i for the i-th dish (1 ≤ i ≤ Y). Asha wants to know if she can prepare at least one dish from the available ingredients, and if so, which one she should prepare to maximize the remaining ingredients after that dish is prepared. Write a program to determine whether Asha can prepare at least one dish, and among the dishes she can prepare, which dish would leave her with the maximum number of remaining ingredients. ------ Input Format ------ - The first line contains an integer T denoting the number of test cases. T test cases then follow. - The first line of each test case contains two space-separated integers X and Y. - The second line of each test case contains Y space-separated integers Z_1, Z_2, ..., Z_Y. ------ Output Format ------ For each test case, output on one line the type of dish (1-based index) Asha should prepare to maximize the remaining ingredients. If Asha cannot prepare any dish, output -1. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ X ≤ 1000 1 ≤ Y ≤ 100 1 ≤ Z_i ≤ 100 ------ Sample Input 1 ------ 2 10 3 8 5 6 5 2 7 3 ------ Sample Output 1 ------ 2 2 ------ Explanation 1 ------ Test Case 1: Asha has 10 ingredients and can prepare up to 3 types of dishes which require 8, 5, and 6 ingredients respectively. - She can prepare dish 1, and have 2 ingredients left. - She can prepare dish 2, and have 5 ingredients left. - She can prepare dish 3, and have 4 ingredients left. The best Asha can do is to prepare dish 2, leaving her with the maximum number of 5 remaining ingredients. Test Case 2: Asha has 5 ingredients and can prepare up to 2 types of dishes which require 7 and 3 ingredients respectively. - She cannot prepare dish 1 due to insufficient ingredients. - She can prepare dish 2, and have 2 ingredients left. Thus, Asha should prepare dish 2, leaving her with 2 ingredients. Note: If multiple dishes leave the same number of remaining ingredients, the dish with the smaller index should be chosen.","solution":"def best_dish(test_cases): results = [] for case in test_cases: X, Y, Z = case[\'X\'], case[\'Y\'], case[\'Z\'] best_dish_index = -1 max_remaining_ingredients = -1 for i in range(Y): if Z[i] <= X: remaining_ingredients = X - Z[i] if (remaining_ingredients > max_remaining_ingredients) or (remaining_ingredients == max_remaining_ingredients and best_dish_index == -1): max_remaining_ingredients = remaining_ingredients best_dish_index = i + 1 results.append(best_dish_index) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): X, Y = map(int, lines[index].split()) Z = list(map(int, lines[index + 1].split())) test_cases.append({\'X\': X, \'Y\': Y, \'Z\': Z}) index += 2 return test_cases"},{"question":"In a distant land, people believe in various mythical creatures, and every creature demonstrates a unique pattern of appearances on a given day. To modernize their belief system and preserve their records, they require a program that can analyze these patterns for them. Here’s how the patterns are defined: * Each creature is represented by a single uppercase letter (A-Z). * A creature’s appearance pattern over a week is captured using a string containing exactly 7 characters, where each character is either \\"0\\" or \\"1\\". * For a given creature’s pattern, the character at the ith position is \\"1\\" if the creature appears on the ith day of the week (where 1 ≤ i ≤ 7) and \\"0\\" if it does not. For example, the string \\"1100000\\" means the creature appears on Monday and Tuesday, but not on the remaining days of the week. Your task is to compute two things: 1. How many days of the week each creature appears in total. 2. The day(s) of the week the creature appears the most. Input The input contains several lines, each representing a creature\'s appearance pattern. The input ends with a line containing a single hyphen (`\\"-\\"`). Each line is formatted as follows: ``` [creature_name] [appearance_pattern] ``` - `creature_name` is a string of uppercase letters (1 ≤ length ≤ 20). - `appearance_pattern` is a string containing exactly 7 characters (`0` or `1`). Output For each creature, print two lines: 1. The first line should show the creature\'s name and the total number of days it appears. 2. The second line should show the day(s) of the week it appears the most, listed as numbers (1 for Monday, 2 for Tuesday, ..., 7 for Sunday). If there is a tie, list all tied days in ascending order, separated by spaces. Format the output as follows: ``` [creature_name]: [total_days] Most appearances on: [day_numbers] ``` Sample Input ``` DRAGON 1101100 PHOENIX 1111111 UNICORN 1000001 MERMAID 0000111 - ``` Sample Output ``` DRAGON: 4 Most appearances on: 1 2 4 5 PHOENIX: 7 Most appearances on: 1 2 3 4 5 6 7 UNICORN: 2 Most appearances on: 1 7 MERMAID: 3 Most appearances on: 5 6 7 ```","solution":"def analyze_pattern(creature_patterns): result = [] week_days = [\\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\"] for line in creature_patterns: if line == \'-\': break creature_name, pattern = line.split() total_days = pattern.count(\'1\') most_days = \\" \\".join([week_days[i] for i, value in enumerate(pattern) if value == \'1\']) result.append(f\\"{creature_name}: {total_days}\\") result.append(f\\"Most appearances on: {most_days}\\") return result"},{"question":"Emma is planning her garden and wants to allocate space optimally for her plants. She has a plot that is divided into n rows and m columns, forming an n × m grid. Some cells might be blocked due to rocks or other obstacles, and Emma cannot use these for planting. A cell is denoted as blocked if it contains a \'1\' and available if it contains a \'0\'. Emma decides to plant q different types of plants. Each plant type requires a certain number of contiguous cells that form a rectangle, but the precise location within the available garden space is flexible. Emma can rotate the rectangle by 90 degrees if necessary to fit it into the available space. Given the garden grid and the required dimensions for each plant, help Emma determine if she can accommodate the plants without overlap and within the allowed cells. If possible, provide a way to plant all types of plants. -----Input----- The first line of input contains three integers n, m, and q (1 ≤ n, m ≤ 50, 1 ≤ q ≤ 10). Then follow n lines, each containing m characters where each character is either \'0\' (available) or \'1\' (blocked). Following this, there are q lines, each containing two integers r and c, representing the dimensions of a rectangle required for each plant type (1 ≤ r, c ≤ max(n, m)). -----Output----- If it\'s possible to plant all q types of plants, print \\"YES\\". For each plant, print the top-left corner coordinates of the place where the plant is planted in two integers (i, j). If a plant type can be placed in multiple ways, print any valid position. If it\'s not possible to fit all plants, print \\"NO\\". -----Examples----- Input 5 6 2 0 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 2 3 3 2 Output YES 1 2 3 1 Input 4 4 2 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 1 2 2 2 3 Output NO -----Note----- In the first example, Emma\'s garden has an available space that can fit both plants. The first plant requires a 2 x 3 rectangle, and it can be planted starting at position (1, 2). The second plant requires a 3 x 2 rectangle, and it can be planted starting at position (3, 1). In the second example, the second plant\'s required dimensions of 2 x 3 do not fit in the available garden space without overlap or using blocked cells, so the output is \\"NO\\".","solution":"def can_place(garden, n, m, r, c, x, y): if x + r > n or y + c > m: return False for i in range(r): for j in range(c): if garden[x + i][y + j] == \'1\': return False return True def mark_taken(garden, r, c, x, y): for i in range(r): for j in range(c): garden[x + i][y + j] = \'1\' def garden_planner(n, m, q, grid, plants): garden = [list(row) for row in grid] for r, c in plants: placed = False for x in range(n): for y in range(m): if can_place(garden, n, m, r, c, x, y): mark_taken(garden, r, c, x, y) placed = True break if can_place(garden, n, m, c, r, x, y): # Try rotating mark_taken(garden, c, r, x, y) placed = True break if placed: break if not placed: return \\"NO\\" return \\"YES\\""},{"question":"Design a function `intersect_dicts` that accepts any number of dictionaries and returns a dictionary containing only the key-value pairs that are present in every input dictionary. The values for each key in the result must match those in the input dictionaries. If a key is present in multiple dictionaries but with different values, it should not be included in the resulting dictionary. The following are examples of how this function would be used and what the expected results would be: ```python intersect_dicts({\'a\': 1, \'b\': 2}, {\'a\': 1, \'c\': 3}, {\'a\': 1, \'b\': 2, \'d\': 4}) # returns {\'a\': 1} intersect_dicts({\'x\': 10, \'y\': 20}, {\'x\': 10, \'y\': 30}, {\'x\': 10}) # returns {\'x\': 10} intersect_dicts({\'p\': 5, \'q\': 8}, {\'r\': 7, \'q\': 8}, {\'q\': 8, \'s\': 9}) # returns {\'q\': 8} ```","solution":"def intersect_dicts(*dicts): Returns a dictionary containing only the key-value pairs that are present in every input dictionary. if not dicts: return {} # Start with all keys and values from the first dictionary common_items = dicts[0].items() # Intersect with the items of each subsequent dictionary for d in dicts[1:]: common_items = common_items & d.items() # Convert the common items back to a dictionary return dict(common_items)"},{"question":"Given an array of integers, rearrange the array in such a way that the odd numbers appear in ascending order at the beginning of the array followed by the even numbers in ascending order. Example: Input: [12, 3, 5, 8, 7, 17, 6] Output: [3, 5, 7, 17, 6, 8, 12] Note: - The relative order of odd and even numbers should be maintained as in their respective sorted order. - You should use O(n) extra space. - The solution should have a time complexity of O(n log n).","solution":"def rearrange_array(arr): Rearrange the given array so that odd numbers appear in ascending order at the beginning followed by the even numbers in ascending order. Parameters: arr (list): List of integers Returns: list: Rearranged list with odd numbers first in ascending order and even numbers later in ascending order. odd_numbers = sorted([x for x in arr if x % 2 != 0]) even_numbers = sorted([x for x in arr if x % 2 == 0]) return odd_numbers + even_numbers"},{"question":"You are given an `n x n` 2D grid representing a maze. The maze cells are either open or blocked. Your task is to determine if there is a path from the top-left corner of the maze (0, 0) to the bottom-right corner (n-1, n-1) and to return the length of the shortest such path. A cell (i, j) of the maze can be traversed if it is open (indicated by a `0`), and a path can only move up, down, left, or right to another open cell. Blocked cells are indicated by a `1`. Implement a function `shortestPathBinaryMatrix(grid: List[List[int]]) -> int` which returns the length of the shortest path from the top-left to the bottom-right corner. If no such path exists, return -1. # Input - A 2D list `grid` of integers representing the maze, where `1 <= len(grid) <= 100` and all rows of the list have the same length. - Each cell in the grid is either `0` (open cell) or `1` (blocked cell). # Output - An integer representing the length of the shortest path from the top-left to the bottom-right corner, or -1 if no such path exists. # Examples Example 1: Input: ```python grid = [[0, 1], [1, 0]] ``` Output: ```python 2 ``` Explanation: There are only two cells and they form the path `[(0, 0) -> (1, 1)]`. Thus, the length of the shortest path from the top-left to the bottom-right is `2`. Example 2: Input: ```python grid = [[0, 0, 0], [1, 1, 0], [1, 1, 0]] ``` Output: ```python 4 ``` Explanation: The path is `[(0, 0) -> (0, 1) -> (0, 2) -> (1, 2) -> (2, 2)]`. Thus, the length of the shortest path from the top-left to the bottom-right is `4`. Example 3: Input: ```python grid = [[1, 0, 0], [1, 1, 0], [1, 1, 0]] ``` Output: ```python -1 ``` Explanation: There is no path from the top-left to the bottom-right corner. # Constraints - The grid will have at least one cell and at most 100 cells in each row and column. - The starting and ending cells (i.e., grid[0][0] and grid[n-1][n-1]) are guaranteed to be `0` representing that they are open cells and it\'s possible to start and end at these positions.","solution":"from collections import deque from typing import List def shortestPathBinaryMatrix(grid: List[List[int]]) -> int: n = len(grid) if grid[0][0] == 1 or grid[n-1][n-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] queue = deque([(0, 0, 1)]) grid[0][0] = 1 while queue: x, y, dist = queue.popleft() if x == n-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0: queue.append((nx, ny, dist + 1)) grid[nx][ny] = 1 return -1"},{"question":"Array Modification. Input: The first line of input contains an integer T - the number of test cases. Each test case contains two lines: - The first line contains a single integer N, representing the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. Output: For each test case, print the modified array where each element is replaced by the sum of all the other elements in the array. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ elements of the array ≤ 1000 SAMPLE INPUT 2 3 1 2 3 4 2 3 4 5 SAMPLE OUTPUT 5 4 3 12 11 10 9 Explanation: In Test Case 1: - For the first element (1), the sum of the remaining elements (2+3) is 5. - For the second element (2), the sum of the remaining elements (1+3) is 4. - For the third element (3), the sum of the remaining elements (1+2) is 3. In Test Case 2: - For the first element (2), the sum of the remaining elements (3+4+5) is 12. - For the second element (3), the sum of the remaining elements (2+4+5) is 11. - For the third element (4), the sum of the remaining elements (2+3+5) is 10. - For the fourth element (5), the sum of the remaining elements (2+3+4) is 9.","solution":"def modify_array(test_cases): This function takes a list of test cases and returns the modified arrays for each test case. Each element in the array is replaced by the sum of all other elements in the array. Args: test_cases : list A list where each element is a dictionary containing the following keys: - \'N\' : int : The number of elements in the array. - \'array\' : list : A list of integers representing the elements of the array. Returns: list A list of modified arrays for each test case. results = [] for case in test_cases: N = case[\'N\'] array = case[\'array\'] total_sum = sum(array) modified_array = [total_sum - x for x in array] results.append(modified_array) return results"},{"question":"Given an array of integers, determine whether there exist three indices i, j, k (i, j and k should be different) such that the product of the elements at these indices is a given target value. Constraints * 1 leq n leq 1000 (n is the length of the array) * -10^9 leq elements of the array leq 10^9 * -10^9 leq target leq 10^9 Input Input will be provided from Standard Input in the following format: n newline array_elements newline target Output If such indices exist, print `Yes`; otherwise, print `No`. Examples Input 5 newline 1 2 3 4 5 newline 6 Output Yes Input 5 newline 1 2 3 4 5 newline 50 Output No","solution":"def exists_triplet_product(arr, target): Determines whether there exist three indices i, j, k (i, j and k should be different) such that the product of the elements at these indices is equal to the given target value. n = len(arr) for i in range(n): for j in range(i + 1, n): for k in range(j + 1, n): if arr[i] * arr[j] * arr[k] == target: return \\"Yes\\" return \\"No\\" # Input reading for the function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:-1])) target = int(data[-1]) result = exists_triplet_product(arr, target) print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of n integers and q queries. Each query asks you to count how many distinct elements from the array appear in a specific subarray. -----Input----- The first line contains two integers n and q (1 le n, q le 1000) — the size of the array and the number of queries, respectively. The second line contains n integers separated by spaces, representing the elements of the array. Each of the next q lines contains two integer numbers l_i and r_i (1 le l_i le r_i le n) — the indices for the i-th query, specifying the subarray. -----Output----- Print q lines — the i-th line should contain the answer to the i-th query, which is the number of distinct elements in the subarray from index l_i to r_i (inclusive). -----Examples----- Input 6 3 1 2 1 3 2 3 1 3 2 4 1 6 Output 2 3 3 Input 5 2 4 4 4 4 4 1 3 2 5 Output 1 1 Input 7 4 7 6 5 7 6 5 7 1 2 2 3 3 5 1 7 Output 2 2 3 3 -----Note----- In the first example: - For the first query, the subarray is [1, 2, 1], which contains 2 distinct elements: 1 and 2. - For the second query, the subarray is [2, 1, 3], which contains 3 distinct elements: 1, 2 and 3. - For the third query, the subarray is [1, 2, 1, 3, 2, 3], which contains 3 distinct elements: 1, 2 and 3.","solution":"def count_distinct_elements(n, q, arr, queries): Returns the number of distinct elements in each subarray specified by the queries. :param int n: The size of the array. :param int q: The number of queries. :param list arr: The array of integers. :param list queries: A list of tuples where each tuple contains two integers representing the 1-based start and end indices of the subarray. :return: A list of integers where each integer represents the count of distinct elements in the corresponding subarray. results = [] for l, r in queries: subarray = arr[l-1:r] # Convert 1-based index to 0-based index distinct_elements = len(set(subarray)) results.append(distinct_elements) return results"},{"question":"Given an integer `n` (2 ≤ n ≤ 20), your task is to create a function that generates all possible permutations of the string made up of the first `n` letters of the English alphabet in sorted order. Each permutation should be represented as a string and the function should return a list containing all these permutation strings. You must ensure that the permutations are sorted lexicographically in the output list. Input - An integer `n` Output - A list of strings, each representing a permutation of the first `n` letters of the English alphabet, sorted lexicographically. Example: Input ``` 3 ``` Output ``` [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] ``` Input ``` 1 ``` Output ``` [\\"a\\"] ```","solution":"from itertools import permutations def generate_permutations(n): Generates all permutations of the first n letters of the English alphabet in sorted order. Args: n: An integer (2 ≤ n ≤ 20) Returns: A list of strings, each representing a permutation of the first n letters. if not (2 <= n <= 20): raise ValueError(\\"The value of n should be in the range 2 ≤ n ≤ 20.\\") alphabet = \'abcdefghijklmnopqrstuvwxyz\' selected_letters = alphabet[:n] perm = [\'\'.join(p) for p in permutations(selected_letters)] return sorted(perm)"},{"question":"Tom is a programmer who loves writing programs to solve mathematical problems. One day, he was challenged by his friend to write a function that checks whether a given number is a \\"perfect number\\". A perfect number is a positive integer that is equal to the sum of its proper divisors (excluding itself). For example: - 6 is a perfect number because 1 + 2 + 3 = 6. - 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28. - 12 is not a perfect number because 1 + 2 + 3 + 4 + 6 neq 12. Write a function to help Tom determine if a given integer is a perfect number or not. ----- Input ----- A single integer n (1 leq n leq 10^5). ----- Output ----- Output \\"YES\\" if the given number is a perfect number, otherwise output \\"NO\\". ----- Examples ----- Input 6 Output YES Input 28 Output YES Input 12 Output NO Input 1 Output NO ----- Note ----- In the first example, 6 is a perfect number because 1 + 2 + 3 = 6. In the second example, 28 is a perfect number because 1 + 2 + 4 + 7 + 14 = 28. In the third example, 12 is not a perfect number because 1 + 2 + 3 + 4 + 6 neq 12. In the fourth example, 1 is not a perfect number because it has no proper divisors.","solution":"def is_perfect_number(n): Determines if a given number n is a perfect number. A perfect number is a number that is equal to the sum of its proper divisors, excluding itself. :param n: Integer to check :return: \\"YES\\" if n is a perfect number, otherwise \\"NO\\" if n <= 1: return \\"NO\\" sum_of_divisors = sum(i for i in range(1, n) if n % i == 0) return \\"YES\\" if sum_of_divisors == n else \\"NO\\""},{"question":"\\"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. For example, the first few numbers of this sequence are 0, 1, 1, 2, 3, 5, 8, and so on. You need to find the N-th Fibonacci number. However, since Fibonacci numbers grow very fast, the N-th Fibonacci number can be very large. Hence, you need to return the answer modulo (10^9 + 7). ---Input--- - The first line contains an integer T, the number of test cases. - The next T lines each contain an integer N, representing the position in the Fibonacci sequence. ---Output--- - For each test case, output a single line containing the N-th Fibonacci number modulo (10^9 + 7). ---Constraints--- - (1 leq T leq 10^5) - (0 leq N leq 10^9) ---Example Input--- 5 0 1 2 10 50 ---Example Output--- 0 1 1 55 12586269025 Note that you must handle large inputs efficiently. You may want to use matrix exponentiation or fast doubling techniques to solve this problem within the given constraints.\\"","solution":"MOD = 10**9 + 7 def matrix_multiply(A, B): return [ [ (A[0][0]*B[0][0] + A[0][1]*B[1][0]) % MOD, (A[0][0]*B[0][1] + A[0][1]*B[1][1]) % MOD ], [ (A[1][0]*B[0][0] + A[1][1]*B[1][0]) % MOD, (A[1][0]*B[0][1] + A[1][1]*B[1][1]) % MOD ] ] def matrix_power(matrix, n): result = [[1, 0], [0, 1]] # Identity matrix base = matrix while n > 0: if n % 2 == 1: result = matrix_multiply(result, base) base = matrix_multiply(base, base) n //= 2 return result def nth_fibonacci(n): if n == 0: return 0 if n == 1: return 1 F = [[1, 1], [1, 0]] result_matrix = matrix_power(F, n-1) return result_matrix[0][0] def process_test_cases(T, test_cases): results = [] for n in test_cases: results.append(nth_fibonacci(n)) return results"},{"question":"In a certain village, there are d houses evenly spaced along one straight street. Each house gets a number from 1 to d, starting from the leftmost house. The village has decided to install water pipes between some of the neighboring houses. Specifically, a water pipe can only be installed between house i and house i+1, for 1 ≤ i < d. Additionally, there are rules on how many water pipes can be installed: - At most k water pipes can be installed along the street. Given the number of houses d and the maximum number of water pipes k, your task is to calculate the number of different ways to install exactly k water pipes. -----Constraints----- - 1 ≤ d ≤ 100 - 0 ≤ k ≤ d-1 -----Input----- Input is given from Standard Input in the following format: d k -----Output----- Print the number of different ways to install exactly k water pipes. -----Sample Input----- 4 2 -----Sample Output----- 3 Explanation: There are 3 ways to install exactly 2 water pipes between the 4 houses: 1-2, 2-3 1-2, 3-4 2-3, 3-4","solution":"def count_ways_to_install_pipes(d, k): from math import comb Calculate the number of different ways to install exactly k water pipes between d houses. :param d: int, the number of houses :param k: int, the maximum number of water pipes that can be installed :return: int, the number of different ways to install exactly k water pipes return comb(d-1, k)"},{"question":"You have a forest with n trees, and each tree has a certain height. Unfortunately, due to a recent storm, some of the trees have been damaged and lost height. You need to determine the total number of trees that have lost their original height after the storm. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of trees in the forest. - The second line contains n space-separated integers, the initial heights of the trees. - The third line contains n space-separated integers, the heights of the trees after the storm. Output - Print a single integer, the number of trees that have lost height due to the storm. Examples Input 5 3 4 1 7 8 2 4 1 5 7 Output 3 Input 4 8 6 3 5 5 6 3 3 Output 2 Explanation In the first example, three trees have lost height: the first tree went from height 3 to 2, the fourth tree went from 7 to 5, and the fifth tree went from 8 to 7. Thus, the output is 3. In the second example, two trees have lost height: the first tree went from height 8 to 5, and the fourth tree went from 5 to 3. Thus, the output is 2.","solution":"def count_trees_lost_height(n, initial_heights, heights_after_storm): Returns the number of trees that have lost height after the storm. count = 0 for initial, after in zip(initial_heights, heights_after_storm): if initial > after: count += 1 return count"},{"question":"You are given an array of integers A[] of size N. You need to find a pair of integers (A[i], A[j]) such that the product of A[i] and A[j] is maximum among all pairs. If there is more than one such pair with the same product, choose the pair with the smallest i. Return the indices i and j of this pair in the form of a list [i, j]. Example 1: Input: N = 5 A[] = {1, 20, 3, 4, 5} Output: [1, 4] Explanation: The product of elements with indices 1 and 4 (20 * 5) is 100, which is the maximum product in the array. Example 2: Input: N = 4 A[] = {10, 2, 5, 2} Output: [0, 2] Explanation: The product of elements with indices 0 and 2 (10 * 5) is 50, which is the maximum product in the array. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxProductPair() which takes an integer N and an array of integers A[] as inputs and returns a list [i, j] representing the indices of the pair whose product is maximum. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 <= N <= 10^5 1 <= A[i] <= 10^9","solution":"def maxProductPair(N, A): Returns the indices of the pair whose product is maximum. max_i = 0 max_j = 1 max_product = A[0] * A[1] for i in range(N): for j in range(i + 1, N): product = A[i] * A[j] if product > max_product or (product == max_product and i < max_i): max_product = product max_i = i max_j = j return [max_i, max_j]"},{"question":"You are a developer tasked with building a new inventory monitoring system. Part of the system should be able to determine if any reorder for a particular product is required based on current stock levels and reorder thresholds. Each product has a unique identifier, a current stock level, and a reorder threshold. Write a program that takes the number of products and their details, and then determines which products need a reorder. A product needs a reorder if its current stock level is less than or equal to its reorder threshold. Input The first line contains one integer P, the number of products. For each of the next P lines, the details of each product are provided in the following format: - A string identifier, representing the unique identifier of the product - An integer S, representing the current stock level of the product - An integer R, representing the reorder threshold of the product Output Output the identifiers of the products that need a reorder, one per line. The identifiers should be listed in the same order as they were provided in the input. If no product requires a reorder, output \\"No reorder needed.\\" Constraints 1 <= P <= 1000 1 <= length(identifier) <= 50 0 <= S <= 1000 1 <= R <= 1000 Example Input: 3 item123 20 15 item456 10 20 item789 5 5 Output: item123 item789 Explanation In the given example: - item123 has a current stock level 20 which is greater than its reorder threshold 15, so it does not need a reorder. - item456 has a current stock level 10 which is less than its reorder threshold 20, so it needs a reorder. - item789 has a current stock level 5 which is exactly equal to its reorder threshold 5, so it needs a reorder.","solution":"def check_reorder(products): reorder_list = [] for product in products: identifier, stock, threshold = product if stock <= threshold: reorder_list.append(identifier) if reorder_list: return reorder_list else: return [\\"No reorder needed\\"] # Function to handle the processing of data from input def process_input(input_str): lines = input_str.strip().split(\'n\') P = int(lines[0]) products = [] for i in range(1, P + 1): parts = lines[i].split() identifier = parts[0] stock = int(parts[1]) threshold = int(parts[2]) products.append((identifier, stock, threshold)) return check_reorder(products)"},{"question":"A small factory uses a robotic arm to organize products on a conveyor belt. The conveyor belt is adorned with a series of numbered slots, positioned sequentially from 1 to N. The factory\'s sorting system receives a list of unsorted product IDs, which the robotic arm must place into the conveyor belt slots in ascending order of IDs. However, the robotic arm has to follow certain constraints: 1) It can pick up a product from the list and place it directly into any empty slot on the conveyor belt. 2) Once a product is placed in a slot, it cannot be moved or removed. 3) The robotic arm must place the products in ascending order while following the above rules. Your task is to determine if it is possible to place all products in the slots in ascending order with the given constraints. Provide a function to check this possibility. Example 1: Input: productList = [4, 2, 1, 3] Output: \\"YES\\" Explanation: The robotic arm can place the products in slots in the order [1, 2, 3, 4]. Example 2: Input: productList = [3, 1, 4, 1] Output: \\"NO\\" Explanation: Due to duplicate product ID, it\'s impossible to place all products in unique slots. Your Task: You don\'t need to read input or print anything. Complete the function canSortProducts() which takes productList as input parameter and returns the string \\"YES\\" if the products can be sorted in ascending order on the conveyor belt, and \\"NO\\" otherwise. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1<= N <=100 1<= productList[i] <= 1000","solution":"def canSortProducts(productList): Determines if it is possible to place all products in the slots in ascending order. :param productList: List of product IDs. :return: \\"YES\\" if products can be sorted in ascending order, \\"NO\\" otherwise. if len(set(productList)) != len(productList): return \\"NO\\" return \\"YES\\" if sorted(productList) == list(range(1, len(productList) + 1)) else \\"NO\\""},{"question":"You are given a list of words where each word contains only lowercase letters. Your task is to determine if the list of words contains any palindromes. A palindrome is a word that reads the same forward and backward, such as racecar or level. -----Input----- The input consists of a single line containing a space-separated list of words. The total number of characters across all words is between 1 and 100. -----Output----- Output a single line. If the list contains at least one palindrome, output the first palindrome found. If there are no palindromes, output no palindrome. -----Examples----- Sample Input 1: apple banana racecar mango Sample Output 1: racecar Sample Input 2: cat dog bird Sample Output 2: no palindrome","solution":"def find_first_palindrome(words): Returns the first palindrome in the list of words. If no palindrome is found, returns \'no palindrome\'. for word in words: if word == word[::-1]: return word return \'no palindrome\'"},{"question":"In a distant galaxy, there exists an ancient machine that generates energy by following a specific sequence of commands. To keep the galaxy from plunging into darkness, the machine requires a valid sequence of commands to operate every day. The sequence of commands is represented as an array of integers. Each command consists of a single non-negative integer. The machine has certain rules for a valid sequence: 1. The sequence must contain N integers. 2. The sum of the command integers must be equal to a specified value S. 3. The greatest common divisor (GCD) of all command integers must be equal to 1. Your task is to help generate a sequence of commands for the machine. The sequence doesn\'t need to be unique, but it must satisfy the rules stated above. -----Input----- The first line of input contains two integers N (1 leq N leq 1000) and S (1 leq S leq 10^6) representing the number of commands and the required sum respectively. -----Output----- Output a single line containing N non-negative integers that form a valid sequence of commands according to the rules. If it\'s impossible to create such a sequence, output \\"Impossible\\". -----Examples----- Sample Input 1: 5 10 Sample Output 1: 1 2 3 2 2 Sample Input 2: 3 6 Sample Output 2: 1 2 3 Sample Input 3: 4 8 Sample Output 3: 1 1 2 4","solution":"from math import gcd from functools import reduce def find_valid_sequence(N, S): Generates a valid sequence of commands for the machine. Parameters: N (int): Number of commands S (int): Required sum of the commands Returns: list: A sequence of N non-negative integers if possible, otherwise \\"Impossible\\" if S < N: return \\"Impossible\\" # Generate a sequence of ones and adjust the last element to match the required sum sequence = [1] * N sequence[-1] = S - (N - 1) # Check if the sequence has a GCD of 1 if reduce(gcd, sequence) == 1: return sequence else: return \\"Impossible\\""},{"question":"A company wants to distribute bonus points to their employees based on their performance throughout the year. Each employee\'s performance is represented in an array of integers, where each integer denotes the performance score of an employee. The company has decided the following rules for distributing the bonus points: 1. Each employee must receive at least one bonus point. 2. Employees with a higher performance score than their adjacent employees must receive more bonus points than those adjacent employees. Determine the minimum number of bonus points the company needs to distribute to its employees based on the given rules. -----Constraints----- - 1 ≤ number of employees ≤ 1000 - 0 ≤ performance score ≤ 1000 -----Input----- Input is given from Standard Input in the following format: n performance_score_1 performance_score_2 ... performance_score_n -----Output----- Output the minimum number of bonus points required. -----Sample Input----- 5 1 2 2 3 1 -----Sample Output----- 7 Explanation: The minimum distribution of bonus points would be: 1 2 1 2 1 Employee 1 with performance score 1 gets 1 point. Employee 2 with performance score 2 gets 2 points (more than employee 1). Employee 3 with performance score 2 gets 1 point. Employee 4 with performance score 3 gets 2 points (more than employee 3). Employee 5 with performance score 1 gets 1 point.","solution":"def distribute_bonus(points): n = len(points) if n == 0: return 0 bonus = [1] * n # Forward pass for i in range(1, n): if points[i] > points[i-1]: bonus[i] = bonus[i-1] + 1 # Backward pass for i in range(n-2, -1, -1): if points[i] > points[i+1]: bonus[i] = max(bonus[i], bonus[i+1] + 1) return sum(bonus) def main(): import sys input = sys.stdin.read().strip().split() n = int(input[0]) performance_scores = list(map(int, input[1:])) print(distribute_bonus(performance_scores)) # Calling main function if __name__ == \\"__main__\\": main()"},{"question":"Read problems statements in Mandarin Chinese and Russian Alice loves playing with strings. She invented a new game where she\'ll take any given string and perform a series of operations to transform it. She can perform two types of operations: 1. Choose any two different characters in the string and swap them. 2. Remove any one character from the string. Alice wants to make the resulting string as small as possible in lexicographical order. Your task is to help Alice by writing a program that performs these operations optimally and returns the smallest possible string. ------ Input ------ The first line of the input contains a single integer ( Q ) denoting the number of queries. For each query, the input consists of a single line containing a string ( S ) of length ( n ) (1 ≤ ( n ) ≤ ( 10^5 )). ------ Output ------ For each query, output the lexicographically smallest string Alice can get after performing the operations optimally. ------ Constraints ------ [ 1 leq Q leq 100 ] [ 1 leq text{Length of } S leq 10^5 ] [ sum (text{Length of all strings}) leq 10^6 ] ------ Sample Input ------ 3 dcba banana abcdefg ------ Sample Output ------ abcd aaabnn abcdefg","solution":"def lexicographical_min_strings(queries): Given a list of queries where each query is a string, return the smallest lexicographical string obtainable by Alice\'s operations. results = [] for s in queries: # The lexicographically smallest string can be obtained by sorting the characters sorted_string = \'\'.join(sorted(s)) results.append(sorted_string) return results"},{"question":"In an effort to automate their scheduling system, a local gym needs a program to manage room bookings and avoid conflicts. Given a list of existing bookings and a new booking request, your task is to determine if the new booking can be accommodated without overlapping any existing bookings. Each booking is represented by a start time and an end time. **Input** You will be provided with a list of existing bookings where each booking is a tuple containing start and end times in the 24-hour format (e.g., \\"09:00\\", \\"11:00\\"). You will also be given a new booking request in the same format. Check example test cases! **Output** The output should be \\"Yes\\" if the new booking can be accommodated without conflicts, and \\"No\\" otherwise. **Example** ```python existing_bookings = [(\\"09:00\\", \\"10:00\\"), (\\"11:00\\", \\"12:00\\"), (\\"14:00\\", \\"15:00\\")] new_booking = (\\"10:30\\", \\"11:30\\") # The output should be \\"No\\" because the new booking overlaps with an existing booking from 11:00 to 12:00. ``` `Show some love ;) Rank and Upvote!`","solution":"from datetime import datetime def can_accommodate(existing_bookings, new_booking): Determines if the new booking can be accommodated without overlapping existing bookings. Parameters: - existing_bookings: list of tuples, each containing the start and end time in \\"HH:MM\\" format. - new_booking: tuple containing start and end time in \\"HH:MM\\" format. Returns: - \\"Yes\\" if the new booking can be accommodated, \\"No\\" otherwise. def parse_time(time_str): return datetime.strptime(time_str, \\"%H:%M\\") new_start, new_end = parse_time(new_booking[0]), parse_time(new_booking[1]) for booking in existing_bookings: existing_start, existing_end = parse_time(booking[0]), parse_time(booking[1]) if not (new_end <= existing_start or new_start >= existing_end): return \\"No\\" return \\"Yes\\""},{"question":"In a certain kingdom, the king wants to build a new palace. The palace will be situated on an open, flat field, and the king wants the palace to be as central as possible to all the towns in the kingdom. The kingdom has N towns, and the distances between these towns and the position where the palace might be built are given as 2D coordinates on a Cartesian plane. The king wants to minimize the maximum distance from the palace to any town. Your task is to find the optimal position of the palace that minimizes this maximum distance to the given towns. -----Input----- The first line of the input contains an integer N (1 ≤ N ≤ 10^5) – the number of towns in the kingdom. The next N lines contain two space-separated integers x and y (|x|, |y| ≤ 10^9) – the coordinates of each town on the Cartesian plane. -----Output----- Print two space-separated floating-point numbers as the optimal coordinates of the palace. The coordinates should have an absolute or relative error of at most 10^-6. -----Example----- Input 3 1 1 2 2 3 3 Output 2.000000 2.000000 Input 4 0 0 0 4 4 0 4 4 Output 2.000000 2.000000 -----Note----- In the first example, the optimal location is the centre of the triangle formed by the points (1,1), (2,2), and (3,3), which is (2,2), minimizing the maximum distance from this point to any of the given points. In the second example, the optimal position of the palace that minimizes the maximum distance to the towns (vertices of the square) is at the center of the square, i.e., (2,2).","solution":"def optimal_palace_location(towns): Calculates the optimal coordinates for the palace such that the maximum distance to any town is minimized. Args: towns (list): A list of tuples containing the coordinates of the towns. Returns: tuple: The optimal (x, y) coordinates for the palace. n = len(towns) if n == 1: return towns[0] sum_x = sum(t[0] for t in towns) sum_y = sum(t[1] for t in towns) return (sum_x / n, sum_y / n)"},{"question":"You are given a list of integers. Your task is to figure out the smallest positive integer that cannot be represented as a sum of any subset of the given list. Input Format The first line contains T, i.e., the number of test cases. T lines follow, each containing a list of space-separated integers. Output Format For each test case, print the smallest positive integer that cannot be represented as a sum of any subset of the given list on a new line. Constraints 1 ≤ T ≤ 20 1 ≤ number of elements in list ≤ 10^5 1 ≤ element of list ≤ 10^6 SAMPLE INPUT 2 1 2 3 1 2 2 7 SAMPLE OUTPUT 7 6 Explanation In the first test case, the integers represented as sums of subsets are {1, 2, 3, 4, 5, 6}. The smallest positive integer that cannot be obtained as a sum of any subset is 7. In the second test case, the integers represented as sums of subsets are {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}. The smallest positive integer that cannot be obtained as a sum of any subset is 6.","solution":"def smallest_positive_integer(cannot_sum_lists): This function takes a list of lists of integers and returns a list of smallest positive integers that cannot be represented as a sum of any subset of the given lists. results = [] for nums in cannot_sum_lists: nums.sort() smallest = 1 for num in nums: if num > smallest: break smallest += num results.append(smallest) return results def process_input(input_string): This function processes the input string and returns the parsed input needed for the solution function. lines = input_string.strip().split(\\"n\\") T = int(lines[0].strip()) cannot_sum_lists = [] for i in range(1, T + 1): cannot_sum_lists.append(list(map(int, lines[i].strip().split()))) return cannot_sum_lists"},{"question":"Write a program to simulate the processing of customer orders in a restaurant. Each order is characterized by its attributes {order_time, cooking_time, priority, customer_name, order_id} represented by {integer, integer, integer, string, integer} respectively. The orders should be processed according to the following priorities. 1. first by priority (higher values first) 2. in case of a tie, by order_time (earlier times first) 3. in case of a tie, by cooking_time (lower values first) 4. in case of a tie, by customer_name (ascending in lexicographic order) 5. in case of a tie, by order_id (ascending) Constraints * 1 ≤ n ≤ 100,000 * 0 ≤ order_time_i, cooking_time_i ≤ 1,000,000,000 * 1 ≤ priority_i ≤ 100 * customer_name is a string of up to 20 uppercase and lowercase English letters * 0 ≤ order_id_i ≤ 1,000,000,000 * customer_name_i is unique Input The input is given in the following format. ``` n order_time_0 cooking_time_0 priority_0 customer_name_0 order_id_0 order_time_1 cooking_time_1 priority_1 customer_name_1 order_id_1 : order_time_{n-1} cooking_time_{n-1} priority_{n-1} customer_name_{n-1} order_id_{n-1} ``` The first line contains the number of orders n. Each of the following n lines describes an order with its attributes given in the aforementioned sequence. Output Print the attributes of each processed order in order, one per line, with attributes separated by a single space. Example Input ``` 5 12 30 3 Alice 101 10 25 5 Bob 102 11 20 5 Charles 103 10 15 4 Diana 104 15 40 3 Eve 105 ``` Output ``` 10 25 5 Bob 102 11 20 5 Charles 103 10 15 4 Diana 104 12 30 3 Alice 101 15 40 3 Eve 105 ```","solution":"def process_orders(n, orders): Processes the orders according to specified priorities: 1. By priority (higher values first) 2. By order_time (earlier times first) 3. By cooking_time (lower values first) 4. By customer_name (ascending in lexicographic order) 5. By order_id (ascending) :param n: Integer, number of orders :param orders: List of orders, where each order is a tuple in the format (order_time, cooking_time, priority, customer_name, order_id) :return: List of processed orders in the required sequence sorted_orders = sorted(orders, key=lambda x: (-x[2], x[0], x[1], x[3], x[4])) return sorted_orders def format_orders(orders): Formats the orders for output. :param orders: List of orders, where each order is a tuple in the format (order_time, cooking_time, priority, customer_name, order_id) :return: List of formatted strings, each string representing an order\'s attributes return [\'{} {} {} {} {}\'.format(*order) for order in orders] # Example usage: if __name__ == \\"__main__\\": n = 5 orders = [ (12, 30, 3, \'Alice\', 101), (10, 25, 5, \'Bob\', 102), (11, 20, 5, \'Charles\', 103), (10, 15, 4, \'Diana\', 104), (15, 40, 3, \'Eve\', 105) ] processed_orders = process_orders(n, orders) formatted_orders = format_orders(processed_orders) for order in formatted_orders: print(order)"},{"question":"Given an undirected graph with `n` nodes and `m` edges, where each edge has a weight associated with it. Your task is to find the minimum cost to connect all the nodes in the graph. If it\'s not possible to connect all the nodes, return -1. ---Input--- The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (0 ≤ m ≤ 200,000) -- representing the number of nodes and edges respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6) -- representing an edge between nodes `u` and `v` with a weight `w`. ---Output--- Output the minimum cost to connect all the nodes in the graph. If it\'s not possible to connect all nodes, print `-1`. ---Examples--- Input 4 5 1 2 1 2 3 2 3 4 4 1 3 3 2 4 2 Output 5 Input 4 2 1 2 1 3 4 2 Output -1 ---Note--- In the first example, you can connect all nodes with edges having weights 1, 2, and 2, giving a total minimum cost of 5. In the second example, it\'s not possible to connect all nodes with the given edges, hence the output is -1.","solution":"def find_minimum_cost_to_connect_all_nodes(n, m, edges): This function returns the minimum cost to connect all nodes in the graph. If it is not possible, it returns -1. # Sort the edges by their weights edges.sort(key=lambda edge: edge[2]) # A function to find the root of a node in the union-find structure def find(parent, i): if parent[i] != i: parent[i] = find(parent, parent[i]) return parent[i] # A function to union two nodes def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Initialization of union-find structure parent = list(range(n)) rank = [0] * n cost = 0 num_edges = 0 for u, v, w in edges: root_u = find(parent, u-1) root_v = find(parent, v-1) if root_u != root_v: union(parent, rank, root_u, root_v) cost += w num_edges += 1 if num_edges == n - 1: break if num_edges != n - 1: return -1 return cost"},{"question":"In a small village, there is a river running through it, dividing the village into two halves. The villagers have decided to build a series of bridges to connect the two halves, but they want to do it in such a way that no two bridges intersect when viewed from above. You\'re given two lists, each containing n integers, representing the positions of possible bridge endpoints on each side of the river. Specifically, list A=[a_1, a_2, dots, a_n] represents the positions on the left bank, and list B=[b_1, b_2, dots, b_n] represents the corresponding positions on the right bank. Each A[i] is supposed to be connected to B[i] to form a bridge. Your task is to determine the maximum number of bridges that can be built without any two bridges intersecting. -----Input----- The first line contains a single integer n (1 le n le 500) — the number of proposed bridge positions on each side of the river. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 1000) — the positions on the left bank. The third line contains n integers b_1, b_2, dots, b_n (1 le b_i le 1000) — the positions on the right bank. -----Output----- Output a single integer — the maximum number of bridges that can be built such that no two bridges intersect. -----Example----- Input 5 1 3 5 2 4 2 4 1 5 3 Output 2 -----Note----- In the example, the possible bridge connections are: - 1 on the left bank to 2 on the right bank - 3 on the left bank to 4 on the right bank - 5 on the left bank to 1 on the right bank - 2 on the left bank to 5 on the right bank - 4 on the left bank to 3 on the right bank The maximum number of bridges that can be built without intersecting is 2: - Connect 1 to 2 and 3 to 4","solution":"def max_bridges(n, A, B): bridges = sorted(zip(A, B)) LIS = [] for bridge in bridges: pos = binary_search(LIS, bridge[1]) if pos == len(LIS): LIS.append(bridge[1]) else: LIS[pos] = bridge[1] return len(LIS) def binary_search(LIS, value): low, high = 0, len(LIS) - 1 while low <= high: mid = (low + high) // 2 if LIS[mid] < value: low = mid + 1 else: high = mid - 1 return low"},{"question":"You are given a string s of length n consisting of lowercase English letters. You need to perform the following operation as many times as you want: Choose any two adjacent characters in the string and swap them. Determine the minimum number of operations required to sort the string in ascending order. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Then, t test cases follow. The first line of each test case contains the single integer n (1 le n le 1000) — the length of the string s. The second line of each test case contains the string s of length n. -----Output----- For each test case, print a single integer — the minimum number of operations required to sort the string in ascending order. -----Examples----- Input 3 4 dcba 5 aeiou 3 cba Output 6 0 3 -----Note----- In the first test case, we need to perform 6 operations to sort the string \\"dcba\\" into \\"abcd\\". One possible sequence is: 1. Swap the first and second characters: \\"cdba\\" 2. Swap the second and third characters: \\"c dba\\" 3. Swap the third and fourth characters: \\"cb da\\" 4. Swap the first and second characters: \\"b cda\\" 5. Swap the second and third characters: \\"bc da\\" 6. Swap the third and fourth characters: \\"bc d a\\" In the second test case, the string is already sorted in ascending order, so no operations are required. In the third test case, we need to perform 3 operations to sort the string \\"cba\\" into \\"abc\\". One possible sequence is: 1. Swap the first and second characters: \\"bca\\" 2. Swap the second and third characters: \\"bac\\" 3. Swap the first and second characters: \\"abc\\"","solution":"def min_operations_to_sort(t, test_cases): Returns the minimum number of operations required to sort the string in ascending order for each test case. results = [] for case in test_cases: n, s = case sorted_s = \'\'.join(sorted(s)) swap_count = 0 s = list(s) # Bubble sort approach to count the minimum number of swaps for i in range(n): for j in range(n - 1): if s[j] > s[j + 1]: s[j], s[j + 1] = s[j + 1], s[j] swap_count += 1 results.append(swap_count) return results"},{"question":"Given an array of N integers a[1], a[2], ldots, a[N] and an integer K, find the maximum number of elements you can choose such that their sum is less than or equal to K. You can choose at most one element from each position. ------ Input Format: - The first line contains an integer T denoting the number of test cases. - Each of the next T lines contains: - Two space-separated integers N and K. - A single line containing N space-separated integers a[1], a[2], ldots, a[N]. Output Format: - For each test case, print a single integer—the maximum number of elements that can be chosen such that their sum does not exceed K. ------ Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - 1 ≤ a[i] ≤ 100 - 1 ≤ K ≤ 100000 ------ Example Input: ``` 2 5 9 1 2 3 4 5 4 7 2 2 2 2 ``` Example Output: ``` 3 3 ``` Hint: Consider sorting the array and then using a greedy approach to pick the smallest elements first until their collective sum reaches the maximum allowed by K.","solution":"def max_elements_with_sum_lte_k(T, test_cases): results = [] for i in range(T): N, K, array = test_cases[i] array.sort() current_sum = 0 count = 0 for num in array: if current_sum + num <= K: current_sum += num count += 1 else: break results.append(count) return results"},{"question":"Sarah is organizing a book reading challenge. Every participant needs to read a certain number of pages each day to stay on track. Given the number of total pages N in the book and the number of days D by when the book should be finished, determine the minimum number of pages a participant should read per day to complete the book in time. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two integers N and D, separated by a space. ------ Output Format ------ For each test case, output the minimum number of pages a participant should read per day to complete the book on time. If it\'s not possible to complete the book in the given time, output -1. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^5 1 ≤ D ≤ 10^3 ------ Sample Input 1 ------ 3 300 5 150 2 1200 15 ------ Sample Output 1 ------ 60 75 80 ------ Explanation 1 ------ Test case 1: To read 300 pages in 5 days, a participant should read at least 60 pages each day (300 / 5 = 60). Test case 2: To read 150 pages in 2 days, a participant should read at least 75 pages each day (150 / 2 = 75). Test case 3: To read 1200 pages in 15 days, a participant should read at least 80 pages each day (1200 / 15 = 80).","solution":"def min_pages_per_day(T, test_cases): For each test case, calculates the minimum number of pages a participant should read per day. Parameters: T (int): The number of test cases. test_cases (list): A list of tuples. Each tuple contains two integers N (total pages) and D (total days). Returns: list: A list of integers representing the minimum number of pages to be read per day for each test case. result = [] for N, D in test_cases: if D == 0: result.append(-1) else: pages_per_day = (N + D - 1) // D # using ceiling division to ensure we round up result.append(pages_per_day) return result"},{"question":"The ticket counter at a railway station has a digital display that shows the number of tickets available for a certain hour. Every hour, the number of tickets decreases linearly based on the demand pattern. The demand can be represented with an integer array `D` where each element `D[i]` represents the number of tickets demanded in the i-th hour. Given the initial number of tickets `T` available at the start of the day and the demand pattern `D`, calculate the number of tickets left after `N` hours. If the tickets run out before `N` hours, return 0. -----Constraints----- - 1 ≤ T ≤ 10^6 - 1 ≤ N ≤ 10^3 - 1 ≤ D[i] ≤ 10^4 for each valid i -----Input----- Input is given from Standard Input in the following format: T N D1 D2 ... DN -----Output----- Print a single integer representing the number of tickets left after `N` hours. -----Sample Input----- 100 5 10 20 30 10 15 -----Sample Output----- 15 In this example, the initial ticket count is 100, and over the course of 5 hours, tickets are subtracted sequentially based on the demand pattern. After accounting for the demands over these hours, the ticket count left is 15. -----Explanation----- 1) Initial tickets: 100 2) After 1st hour: 100 - 10 = 90 3) After 2nd hour: 90 - 20 = 70 4) After 3rd hour: 70 - 30 = 40 5) After 4th hour: 40 - 10 = 30 6) After 5th hour: 30 - 15 = 15","solution":"def tickets_left(T, N, D): Calculate the number of tickets left after N hours. :param int T: Initial number of tickets. :param int N: Number of hours. :param list D: Demand pattern represented as a list of integers. :return: The number of tickets left after N hours or 0 if tickets run out. :rtype: int for demand in D: T -= demand if T <= 0: return 0 return T"},{"question":"Given a list of positive integers, return a list of integers that appear an odd number of times. The output list should be sorted in ascending order. Example 1: Input: arr = [1, 2, 3, 2, 3, 1, 3] Output: [3] Explanation: 3 appears 3 times which is odd. Example 2: Input: arr = [4, 5, 6, 4, 6, 6, 5, 5] Output: [5, 6] Explanation: 5 appears 3 times and 6 appears 3 times, both are odd. Your Task: You don\'t need to read input or print anything. Your task is to complete the function oddOccurrences() that takes a list of integers as input and returns a sorted list of integers that appear an odd number of times. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(arr) <= 10^6 1 <= arr[i] <= 10^6","solution":"def oddOccurrences(arr): Given a list of positive integers, return a list of integers that appear an odd number of times. The output list is sorted in ascending order. from collections import Counter count = Counter(arr) result = [num for num, freq in count.items() if freq % 2 != 0] result.sort() return result"},{"question":"Luke Skywalker is working on restoring the Jedi Order and needs to organize the details of new recruits\' midichlorian counts. He has a list of recruits, each with an associated midichlorian count. As part of his analysis, he wants a segment of these recruits to be arranged in non-decreasing order. To achieve this, he plans to spin his lightsaber to create a whirlwind force, which allows him to sort any subarray range [l, r]. However, he can only spin the lightsaber a limited number of times before it needs recharging. You are given an array of midichlorian counts and m operations, where each operation consists of two integers l and r, specifying the subarray to be sorted. Can you help Luke determine the final state of the array after performing all the sorting operations? -----Input:----- - First line of the input consists of two space-separated integers n and m, where n is the number of recruits and m is the number of sorting operations. - Second line contains n space-separated integers, the midichlorian counts of the recruits. - The next m lines each contain two space-separated integers l and r, representing the subarray [l, r] (1-based index) to be sorted in non-decreasing order. -----Output:----- In a single line, print n space-separated integers, the midichlorian counts of the recruits after performing all the sorting operations. -----Constraints----- - 1 leq n leq 1000 - 1 leq m leq 1000 - 1 leq l leq r leq n - 1 leq midichlorian count leq 10^9 -----Sample Input:----- 5 2 10 5 3 6 2 1 3 2 5 -----Sample Output:----- 3 5 10 2 6 -----EXPLANATION:----- 1. After the first operation (sorting from 1 to 3), the array becomes -> 3 5 10 6 2. 2. After the second operation (sorting from 2 to 5), the array becomes -> 3 2 5 6 10.","solution":"def perform_sort_operations(n, m, array, operations): for operation in operations: l, r = operation # Convert 1-based index to 0-based index array[l-1:r] = sorted(array[l-1:r]) return array"},{"question":"Write a function that takes an integer `n` representing the number of consecutive days a student has completed their homework. The function should return a motivational message based on the number of days: - If the student has completed homework for 7 or more days, return the string \\"Fantastic! Keep up the great work!\\". - If the student has completed homework for less than 7 days, return the string \\"Good start! Try to reach a week.\\"","solution":"def motivational_message(n): Returns a motivational message based on the number of consecutive days a student has completed their homework. Parameters: n (int): Number of consecutive days the homework has been completed. Returns: str: Motivational message. if n >= 7: return \\"Fantastic! Keep up the great work!\\" else: return \\"Good start! Try to reach a week.\\""},{"question":"Chef is an expert in strings and loves to solve problems related to string manipulation. One day, he came across a problem that he found particularly interesting and challenging. He wants to find out whether a given string is a \\"mirror\\" string. A \\"mirror\\" string is a string that looks the same even if it is reversed after replacing each character with a specific counterpart. Chef is busy with another work, and he seeks your help to solve this problem. A \\"mirror\\" string follows these rules: - Letters \'A\', \'H\', \'I\', \'M\', \'O\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\' remain the same when mirrored. - Other letters (like \'B\', \'C\', \'D\', etc.) do not have a mirror counterpart and therefore make the string non-mirable. Determine if a given string is a \\"mirror\\" string. -----Input:----- - The first line contains an integer T denoting the number of test cases. - Each of the following T lines contains a single string S. -----Output:----- For each test case, print \\"YES\\" if the string is a \\"mirror\\" string, otherwise print \\"NO\\". -----Constraints:----- - 1 leq T leq 10^4 - 1 leq |S| leq 10^3 - S contains only uppercase English alphabet letters. -----Sample Input:----- 3 AHA BIM YXY -----Sample Output:----- YES NO YES","solution":"def is_mirror_string(s): Determines if the given string is a \\"mirror\\" string. A \\"mirror\\" string is one that appears the same when reversed and characters are replaced by their mirror counterparts. Only the characters {\'A\', \'H\', \'I\', \'M\', \'O\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\'} are mirror characters. Parameters: - s (str): Input string Returns: - bool: True if the string is a mirror string, False otherwise # Define the set of mirror characters mirror_chars = {\'A\', \'H\', \'I\', \'M\', \'O\', \'T\', \'U\', \'V\', \'W\', \'X\', \'Y\'} # Check if every character in the string is a mirror character if not all(char in mirror_chars for char in s): return False # Check if the string reads the same forwards and backwards return s == s[::-1] def check_mirror_strings(test_cases): Processes multiple test cases to determine if each string is a mirror string. Parameters: - test_cases (list): List of strings to be checked Returns: - list: List of results, each \\"YES\\" or \\"NO\\" for the corresponding string return [\\"YES\\" if is_mirror_string(s) else \\"NO\\" for s in test_cases]"},{"question":"You are given a list of books and the desired number of books each student needs to read. Each book is represented by its difficulty level, and each student has a preferred range of difficulty levels they can read. Your task is to assign books to students such that each student gets the number of books they need, and each assigned book falls within the student\'s preferred difficulty range. The goal is to find out if it is possible to assign books to students while satisfying their constraints. # Constraints - There are N books and M students (1 ≤ N, M ≤ 1000). - Each book has a difficulty level between 1 and 1000. - Each student has a preferred difficulty range [L, R] (1 ≤ L ≤ R ≤ 1000) and a required number of books K (0 ≤ K ≤ N). # Input Input is given from Standard Input in the following format: ``` N M d_1 d_2 ... d_N L_1 R_1 K_1 L_2 R_2 K_2 ... L_M R_M K_M ``` - The first line contains two integers, N and M. - The second line contains N integers representing the difficulty levels of the books. - The next M lines each contain three integers representing each student\'s preferred difficulty range [L, R] and the number of books K they need to read. # Output Print a single line: \\"YES\\" if it is possible to assign the books accordingly, or \\"NO\\" otherwise. # Sample Input ``` 5 3 3 8 7 5 9 1 6 2 5 10 2 7 8 1 ``` # Sample Output ``` YES ``` # Explanation It is possible to assign books as follows: - The first student can read books with difficulties 3 and 5. - The second student can read books with difficulties 8 and 9. - The third student can read the book with difficulty 7.","solution":"def can_assign_books(N, M, books, students): Determines if it\'s possible to assign books to students based on their preferred difficulty range and the number of books they need to read. :param N: Integer, number of books. :param M: Integer, number of students. :param books: List of integers, difficulty levels of the books. :param students: List of tuples, each tuple contains (L, R, K) defining the student\'s constraints. :return: String, \\"YES\\" if it\'s possible to assign the books, \\"NO\\" otherwise. # Sort the books by difficulty books.sort() # Try to assign books to students based on the preferred ranges and required counts for L, R, K in students: count = 0 for book in books: if L <= book <= R: count += 1 if count >= K: break if count < K: return \\"NO\\" return \\"YES\\" # Reading Input def main(): import sys input = sys.stdin.read data = input().split() # Read the number of books and students N = int(data[0]) M = int(data[1]) # Read the difficulty levels of the books books = list(map(int, data[2:N+2])) # Read the students\' constraints students = [] index = N+2 for _ in range(M): L = int(data[index]) R = int(data[index+1]) K = int(data[index+2]) students.append((L, R, K)) index += 3 # Determine if we can assign the books as required result = can_assign_books(N, M, books, students) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Given a sequence of n integers, where each integer represents the number of points a player has won in a series of games, determine the player with the highest total score. Assume that exactly k unique players with IDs from 1 to k have participated in the games. The sequence contains k blocks of integers, each block representing the scores of all the games played by a single player. A player\'s total score is the sum of their individual game scores. The task is to determine the ID of the player with the highest total score. Input The first line contains two integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 10) — the number of total game scores and the number of unique players, respectively. The next line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100) — the sequence of game scores. It is guaranteed that n is a multiple of k. Output Output the ID of the player with the highest total score. If there are multiple players with the highest score, output the smallest ID among them. Examples Input 6 3 10 20 30 15 25 35 Output 3 Input 4 2 5 15 10 20 Output 2","solution":"def highest_scorer(n, k, scores): Given the number of scores `n`, number of players `k`, and a list of scores, determines the ID of the player with the highest total score. :param n: int - number of total game scores :param k: int - number of unique players :param scores: List[int] - sequence of game scores :return: int - ID of the player with the highest total score player_scores = [0] * k games_per_player = n // k for i in range(n): player_id = (i // games_per_player) player_scores[player_id] += scores[i] highest_score = max(player_scores) highest_scorer_id = player_scores.index(highest_score) + 1 return highest_scorer_id"},{"question":"Anna is a university student who wants to create a study group. She has a number of friends, each friend is represented by a unique student ID, and the friendship between them can be represented as an undirected graph where each node is a student, and an edge between two nodes indicates that they are friends. Anna wants to find the largest possible study group (a clique) where every member is friends with every other member. Given the friendship graph, help Anna to find the largest clique in which every student is directly connected to every other student. -----Input----- The first line contains two space-separated integers, n (1 ≤ n ≤ 20) and m (0 ≤ m ≤ n(n-1)/2), representing the number of students and the number of friendships, respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing a friendship between student u and student v. -----Output----- Print a single integer k, representing the size of the largest clique. -----Examples----- Input 5 6 1 2 2 3 3 4 4 1 1 3 2 4 Output 4 Input 4 2 1 2 3 4 Output 2","solution":"from itertools import combinations def is_clique(graph, nodes): for i in range(len(nodes)): for j in range(i + 1, len(nodes)): if nodes[j] not in graph[nodes[i]]: return False return True def largest_clique(n, m, friendships): graph = {i: set() for i in range(1, n + 1)} for u, v in friendships: graph[u].add(v) graph[v].add(u) max_clique_size = 0 for size in range(1, n + 1): for comb in combinations(graph.keys(), size): if is_clique(graph, comb): max_clique_size = max(max_clique_size, len(comb)) return max_clique_size # Example usage: n = 5 m = 6 friendships = [(1, 2), (2, 3), (3, 4), (4, 1), (1, 3), (2, 4)] print(largest_clique(n, m, friendships)) # Output: 4"},{"question":"You are tasked with the development of a sophisticated program that can analyze and manage network traffic in a simulated environment. The network consists of several nodes interconnected by bidirectional links. Each link between two nodes has an associated bandwidth representing the maximum amount of data it can handle per unit time. Your objective is to determine the maximum amount of data that can be transferred from a source node to a destination node in the network. To achieve this, you must simulate a series of data transfer requests. Each request specifies a source node, a destination node, and the amount of data to be transferred. The system should be able to handle multiple transfer requests sequentially. For each transfer request, you must compute and output the maximum data that can be transferred from the source to the destination based on the current state of the network\'s capacities—considering any previous transfers that may have reduced the available bandwidth of the links. Input The input is a sequence of datasets. Each dataset contains the following components: - The first line contains three integers: - `n` (1 ≤ n ≤ 100): the number of nodes in the network. - `m` (0 ≤ m ≤ 1000): the number of bidirectional links between nodes. - `r` (1 ≤ r ≤ 100): the number of transfer requests. - The next `m` lines each contain three integers `u`, `v`, and `b` (0 ≤ u, v < n, 1 ≤ b ≤ 1000), representing a link with bandwidth `b` between nodes `u` and `v`. - The next `r` lines each contain three integers `s`, `d`, and `a` (0 ≤ s, d < n, 1 ≤ a ≤ 1000), where: - `s` is the source node. - `d` is the destination node. - `a` is the amount of data to be transferred. - The end of the input is indicated by a line containing a zero. Output For each dataset, output the maximum data that can be transferred for each request on separate lines. If the transfer is impossible, output `0` for that request. Constraints: - The network\'s capacities are updated after each transfer request is processed. - Each transfer request is independent and sequential. - For each dataset, reset the network to its initial state as described by the input before processing the subsequent dataset. Example Input 4 5 3 0 1 10 0 2 5 1 2 15 1 3 10 2 3 5 0 3 10 1 2 7 0 1 12 3 3 2 0 1 4 1 2 5 2 0 7 0 2 6 1 0 5 0 Output 10 5 12 6 0","solution":"from collections import defaultdict, deque def bfs(capacity, parent, source, sink): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in capacity[u]: if v not in visited and capacity[u][v] > 0: # If there\'s available capacity visited.add(v) queue.append(v) parent[v] = u if v == sink: return True return False def edmonds_karp(capacity, source, sink): parent = {} max_flow = 0 while bfs(capacity, parent, source, sink): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def analyze_network(n, m, r, links, requests): network = defaultdict(lambda: defaultdict(int)) for u, v, b in links: network[u][v] += b network[v][u] += b results = [] for s, d, a in requests: capacity = defaultdict(lambda: defaultdict(int)) for u in range(n): for v in network[u]: capacity[u][v] = network[u][v] max_data_transfer = edmonds_karp(capacity, s, d) results.append(min(max_data_transfer, a)) return results def simulate_datasets(datasets): results = [] for dataset in datasets: n, m, r = dataset[\'meta\'] links = dataset[\'links\'] requests = dataset[\'requests\'] results += analyze_network(n, m, r, links, requests) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 datasets = [] while data[index] != \'0\': n = int(data[index]) m = int(data[index + 1]) r = int(data[index + 2]) index += 3 links = [] for _ in range(m): u = int(data[index]) v = int(data[index + 1]) b = int(data[index + 2]) links.append((u, v, b)) index += 3 requests = [] for _ in range(r): s = int(data[index]) d = int(data[index + 1]) a = int(data[index + 2]) requests.append((s, d, a)) index += 3 datasets.append({ \'meta\': (n, m, r), \'links\': links, \'requests\': requests }) results = simulate_datasets(datasets) for result in results: print(result)"},{"question":"Nina is participating in a competitive programming competition. There are multiple problems, and each problem has a different score assigned to it. Nina wants to maximize her total score by solving a subset of the problems. However, she can solve at most `m` problems. Help Nina find out the maximum possible score she can achieve. -----Input----- The first line contains integer `n` (1 ≤ n ≤ 100) — the number of problems. The second line contains integer `m` (1 ≤ m ≤ n) — the maximum number of problems Nina can solve. The third line contains `n` integers `s_1, s_2, ..., s_n` (1 ≤ s_i ≤ 1000) — the scores assigned to each problem. -----Output----- Output a single integer — the maximum score Nina can achieve by solving at most `m` problems. -----Examples----- Input 5 3 100 200 300 400 500 Output 1200 Input 4 2 10 20 30 10 Output 50 -----Note----- In the first example, Nina can solve at most 3 problems. The maximum possible score is achieved by solving the problems with scores 300, 400, and 500, which totals to 1200. In the second example, Nina can solve at most 2 problems. The maximum possible score is achieved by solving the problems with scores 30 and 20, which totals to 50.","solution":"def max_score(n, m, scores): Returns the maximum possible score Nina can achieve by solving at most m problems. Parameters: n (int): The number of problems. m (int): The maximum number of problems Nina can solve. scores (list of int): The scores assigned to each problem. Returns: int: The maximum score Nina can achieve. # Sort the scores in descending order sorted_scores = sorted(scores, reverse=True) # Sum the top m scores return sum(sorted_scores[:m])"},{"question":"You\'ve been given a list of integers where each integer represents the height of a building in a city skyline. One day, a peculiar event occurs—any two adjacent buildings can exchange their heights at the cost of `1` energy unit. You want to perform the minimum number of adjacent exchanges so that the final heights of the buildings form a non-decreasing order (i.e., each building should be taller or at the same height as the one before it). Write a program that computes the minimum energy required to rearrange the buildings in non-decreasing order. -----Input----- The first line contains an integer T (1 le T le 100) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (1 le n le 1000) — the number of buildings. - The second line contains n integers h_1, h_2, ..., h_n (0 le h_i le 10^6) — the heights of the buildings. -----Output----- For each test case, output a single integer — the minimum energy required to rearrange the buildings into non-decreasing order. -----Example----- Input 3 5 4 3 2 1 5 4 4 3 5 1 3 3 3 3 Output 6 5 0 -----Note----- In the first example, one optimal series of exchanges could be: - Swap (4,3), current order: (3,4,2,1,5), energy used: 1 - Swap (4,2), current order: (3,2,4,1,5), energy used: 2 - Swap (3,2), current order: (2,3,4,1,5), energy used: 3 - Swap (4,1), current order: (2,3,1,4,5), energy used: 4 - Swap (3,1), current order: (2,1,3,4,5), energy used: 5 - Swap (2,1), current order: (1,2,3,4,5), energy used: 6 Total energy used: 6. In the second example, one optimal series of exchanges could be: - Swap (4,3), current order: (3,4,5,1), energy used: 1 - Swap (5,1), current order: (3,4,1,5), energy used: 2 - Swap (4,1), current order: (3,1,4,5), energy used: 3 - Swap (3,1), current order: (1,3,4,5), energy used: 4 Total energy used: 4.","solution":"def min_energy_to_sort_buildings(t, test_cases): This function computes the minimum energy required to rearrange the buildings into non-decreasing order by counting the number of swaps needed using bubble sort strategy. results = [] for i in range(t): n, heights = test_cases[i] energy = 0 swapped = True while swapped: swapped = False for j in range(n - 1): if heights[j] > heights[j + 1]: heights[j], heights[j + 1] = heights[j + 1], heights[j] energy += 1 swapped = True results.append(energy) return results"},{"question":"You are tasked with writing a function that determines if a string contains only valid Roman numeral characters and falls within the range of valid Roman numerals (1 to 3999 inclusive). A valid Roman numeral string can only include the characters \'I\', \'V\', \'X\', \'L\', \'C\', \'D\', and \'M\', and must adhere to the standard rules of Roman numeral construction. The standard rules for constructing Roman numerals are: - The characters \'I\', \'X\', \'C\', and \'M\' can be repeated up to three times in succession. - The characters \'V\', \'L\', and \'D\' can never be repeated. - \'I\' can be subtracted from \'V\' and \'X\' only. - \'X\' can be subtracted from \'L\' and \'C\' only. - \'C\' can be subtracted from \'D\' and \'M\' only. - \'V\', \'L\', and \'D\' can never be subtracted. The output should be `true` if the string is a valid Roman numeral within the range, and `false` otherwise. Function signature: ```python def is_valid_roman_numeral(numeral: str) -> bool: ``` Examples For valid Roman numerals: * \\"XII\\" -> true * \\"MMMCMXCIX\\" -> true * \\"IV\\" -> true For invalid Roman numerals: * \\"IIII\\" -> false (character \'I\' repeated more than 3 times) * \\"MMMM\\" -> false (value exceeds 3999) * \\"VV\\" -> false (character \'V\' repeated) * \\"IC\\" -> false (invalid subtraction rules) For non-Roman numeral strings: * \\"ABC\\" -> false * \\"123\\" -> false * \\"\\" -> false (Empty string)","solution":"def is_valid_roman_numeral(numeral: str) -> bool: Determines if the given string is a valid Roman numeral string and falls within the range of 1 to 3999. import re # Regular expression for valid Roman numerals within 1 to 3999. roman_numeral_pattern = re.compile( ^ # beginning of the string M{0,3} # Match thousands - 0 to 3000 (CM|CD|D?C{0,3}) # Match hundreds - 0 to 900 (XC|XL|L?X{0,3}) # Match tens - 0 to 90 (IX|IV|V?I{0,3}) # Match units - 0 to 9 # end of the string , re.VERBOSE) # If numeral is empty or not matching the pattern then return False if not numeral or not roman_numeral_pattern.match(numeral): return False return True"},{"question":"In a distant galaxy, there is a planet called Calcumia, where intelligent beings called Calcs can communicate using a unique language — a sequence of \'(\' and \')\' characters. The language abides by specific rules that ensure all phrases are balanced. A phrase is considered balanced if: 1. It is an empty string. 2. It can be written as \\"AB\\", where both A and B are balanced phrases. 3. It can be written as \\"(A)\\", where A is a balanced phrase. Your task is to write a program that checks if a given phrase is balanced. Input The input contains a single line – a string s consisting of \'(\' and \')\' characters (1 ≤ |s| ≤ 100). Output Output \\"Yes\\" if the phrase is balanced, otherwise \\"No\\". Examples Input (()) Output Yes Input ((()) Output No Input ()() Output Yes Input )( Output No","solution":"def is_balanced(phrase): This function checks if a given phrase is balanced. Args: phrase (str): The input string consisting of \'(\' and \')\' characters. Returns: str: \\"Yes\\" if the phrase is balanced, otherwise \\"No\\". stack = [] for char in phrase: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"No\\" stack.pop() return \\"Yes\\" if not stack else \\"No\\""},{"question":"You are given an array `a` of `N` positive integers. Your task is to determine the minimum possible value of the maximum difference between any two elements in a subarray of length exactly `K`. ----- Input ----- The first line contains two integers `N` (the length of the array) and `K` (the length of the subarray). The second line contains `N` space-separated integers representing the elements of the array `a`. ----- Output ----- Output a single integer representing the minimum possible value of the maximum difference between any two elements in a subarray of length exactly `K`. ----- Constraints ----- 1 ≤ N ≤ 100,000 1 ≤ K ≤ N 1 ≤ a[i] ≤ 1,000,000 for each valid i ----- Example ----- Input: 6 3 1 3 6 4 1 2 Output: 1 Explanation: - For the subarray [1, 3, 6], the maximum difference is 5. - For the subarray [3, 6, 4], the maximum difference is 3. - For the subarray [6, 4, 1], the maximum difference is 5. - For the subarray [4, 1, 2], the maximum difference is 3. - For the subarray [1, 2, 3], the maximum difference is 1. The minimum possible value of the maximum difference between any two elements in a subarray of length exactly 3 is 1.","solution":"def min_max_diff_in_subarray(arr, N, K): Finds the minimum possible value of the maximum difference between any two elements in a subarray of length exactly K. if K == 1: return 0 arr.sort() min_max_diff = float(\'inf\') for i in range(N - K + 1): current_diff = arr[i + K - 1] - arr[i] min_max_diff = min(min_max_diff, current_diff) return min_max_diff"},{"question":"Given an array of integers where each integer appears exactly three times, except for one integer which appears only once. Find the integer that appears only once. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example 1: Input: [2,2,3,2] Output: 3 Example 2: Input: [0,1,0,1,0,1,99] Output: 99","solution":"def single_number(nums): Find the element in the list that appears exactly once when all other elements appear exactly three times. Args: nums (list): List of integers where every integer appears exactly three times, except for one integer which appears exactly once. Returns: int: The integer that appears only once. # Initialize variables to hold the bits ones, twos = 0, 0 for num in nums: # \'ones\' holds the bitwise xor of all the elements which have appeared only once. ones = (ones ^ num) & ~twos # \'twos\' holds the bitwise xor of all the elements which have appeared exactly twice. twos = (twos ^ num) & ~ones return ones"},{"question":"Given an array of integers and a target value, determine if any three integers in the array sum up to the target value. Return those three integers in ascending order if they exist, otherwise return an empty list. You can assume that each input would have exactly one solution. Example: ``` For example: Given array = [1, 2, 4, 6, 8, 10] and target = 14... find_three_numbers([1, 2, 4, 6, 8, 10], 14) = [2, 4, 8]. The three numbers 2, 4, and 8 sum to 14. find_three_numbers([3, 7, 1, 9, 5, 3], 12) = [1, 3, 8]. The three numbers 1, 3, and 8 sum to 12. find_three_numbers([1, 2, 3, 4, 5], 20) = []. No three numbers exist that sum to 20. ```","solution":"def find_three_numbers(arr, target): Finds three integers in arr that sum up to target. Returns those three integers in ascending order if they exist, otherwise returns an empty list. arr.sort() n = len(arr) for i in range(n-2): left, right = i+1, n-1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == target: return [arr[i], arr[left], arr[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"Crypto messaging service \\"SecuMessage\\" is designed to allow secure communication between users by encrypting messages. Given an encryption mechanism, your task is to implement this encryption and decryption algorithms. The encryption mechanism works as follows: 1. Each letter in the message is shifted by a fixed number of positions in the alphabet. 2. A positive shift moves each letter forward in the alphabet, wrapping around to the beginning if necessary. 3. A negative shift moves each letter backward, also wrapping around if necessary. For example, with a shift of 3: - \'a\' would become \'d\' - \'z\' would become \'c\' - and with a shift of -1: - \'a\' would become \'z\' - \'b\' would become \'a\' Messages only contain lower case alphabetic letters (a-z). Implement the functions `encrypt_message` and `decrypt_message` which will take a message and a shift value. Input: You will be given: - A single string representing the operation (either \\"encrypt\\" or \\"decrypt\\"). - A single integer representing the shift value. - A single string representing the message to be encrypted or decrypted. Output: If the operation is \\"encrypt\\", print the encrypted message. If the operation is \\"decrypt\\", print the decrypted message. Example: Input: ``` encrypt 3 secure ``` Output: ``` vhfxuh ``` Input: ``` decrypt 3 vhfxuh ``` Output: ``` secure ``` Input: ``` encrypt -1 abcd ``` Output: ``` zabc ``` Input: ``` decrypt -1 zabc ``` Output: ``` abcd ``` Ensure that: - All input strings remain as lower case alphabetic characters. - The shift value can be any integer including negative and positive values, as well as zero.","solution":"def encrypt_message(shift, message): Encrypts the message by shifting its letters by the given shift value. encrypted_message = [] for char in message: new_char = chr(((ord(char) - ord(\'a\') + shift) % 26) + ord(\'a\')) encrypted_message.append(new_char) return \'\'.join(encrypted_message) def decrypt_message(shift, message): Decrypts the message by reversing the shift its letters by the given shift value. decrypted_message = [] for char in message: new_char = chr(((ord(char) - ord(\'a\') - shift) % 26) + ord(\'a\')) decrypted_message.append(new_char) return \'\'.join(decrypted_message) def process_message(operation, shift, message): Processes the message depending on the operation. if operation == \\"encrypt\\": return encrypt_message(shift, message) elif operation == \\"decrypt\\": return decrypt_message(shift, message) else: raise ValueError(\\"Invalid operation. Use \'encrypt\' or \'decrypt\'.\\")"},{"question":"In a fantasy game, the player navigates through a series of rooms in a dungeon. Each room contains a certain number of enemies, and the player has the option to either fight the enemies or use a magic potion to instantly clear the room. The player has a limited number of magic potions, and their goal is to minimize the total effort spent clearing the dungeon. Each room has a specified number of enemies that the player must either fight or clear with a potion. The effort to fight the enemies in a room is directly proportional to the number of enemies in that room. The player can choose to use a magic potion to clear the room without any effort, but they cannot refill their potions once they\'re used. Given the layout of the dungeon, the number of enemies in each room, and the number of magic potions the player has, determine the minimum effort required for the player to clear all the rooms in the dungeon. Input The first line contains two integers n and p (1 ≤ n ≤ 100; 0 ≤ p ≤ n) — the number of rooms and the number of magic potions available. The second line contains n integers e_1, e_2, ..., e_n (1 ≤ e_i ≤ 1000) — the number of enemies in each room. Output Print a single integer — the minimum effort required to clear all the rooms in the dungeon. Examples Input 5 2 4 2 3 5 8 Output 10 Input 3 1 3 5 2 Output 5 Note In the first example, the player has 2 magic potions and must clear 5 rooms with enemy counts of 4, 2, 3, 5, and 8. The optimal strategy is to use potions on the rooms with 5 and 8 enemies, and fight the rest. So, the minimum effort is 4 + 2 + 3 = 9. In the second example, the player has 1 magic potion and must clear 3 rooms with enemy counts of 3, 5, and 2. The optimal strategy is to use a potion on the room with 5 enemies, and fight the rest. So, the minimum effort is 3 + 2 = 5.","solution":"def minimum_effort_to_clear_dungeon(n, p, enemies): Calculate the minimum effort required to clear all the rooms in the dungeon. :param n: Number of rooms :param p: Number of magic potions available :param enemies: List containing the number of enemies in each room :return: Minimum effort required to clear all rooms # Sort the list of enemies in descending order enemies_sorted = sorted(enemies, reverse=True) # Use potions on the rooms with the most enemies effort = 0 for i in range(p, n): effort += enemies_sorted[i] return effort"},{"question":"# Problem Description Design a function to find the first non-repeating character in a given string. You need to implement the function such that it traverses the string only once. # Function Signature ```python def first_non_repeating_char(input_string: str) -> str: ``` # Input - **input_string**: a string with alphanumeric characters and possibly spaces. # Output - The function should return the first non-repeating character in the input string. - If all characters repeat or the string is empty, return an empty string. # Example ```python first_non_repeating_char(\\"abracadabra\\") # => \\"c\\" first_non_repeating_char(\\"swiss\\") # => \\"w\\" first_non_repeating_char(\\"aabbcc\\") # => \\"\\" ``` # Constraints - The function must traverse the string only once. - You may use additional data structures to keep track of character counts or positions. # Notes - Consider the efficiency of your solution, as a less efficient solution might not perform well on large inputs. - Remember to handle edge cases, such as when the input string is empty.","solution":"def first_non_repeating_char(input_string: str) -> str: Finds the first non-repeating character in the given string. from collections import OrderedDict # Dictionary to store character counts char_count = OrderedDict() # Traverse the string and count occurrences of each character for char in input_string: char_count[char] = char_count.get(char, 0) + 1 # Find the first character which has a count of 1 for char, count in char_count.items(): if count == 1: return char # If no non-repeating character is found, return an empty string return \\"\\""},{"question":"You have a string of words separated by spaces. Write a function to reverse the order of characters in each word while maintaining the order of the words. Constraints * The string will contain only letters and spaces. * The length of the string will be between 1 and 1000 characters. * Words are separated by exactly one space and there will be no leading or trailing spaces. Input A single string s in the following format: \'s\' Output A single string with each word\'s characters reversed. Examples Input \'Hello World\' Output \'olleH dlroW\' Input \'The quick brown fox jumps over the lazy dog\' Output \'ehT kciuq nworb xof spmuj revo eht yzal god\' Input \'Data Science is fun\' Output \'ataD ecneicS si nuf\' Input \'Python is amazing\' Output \'nohtyP si gnizama\'","solution":"def reverse_characters_in_words(s): Reverses the order of characters in each word while maintaining the order of the words. Parameters: s (str): Input string with words separated by spaces. Returns: str: A new string with each word\'s characters reversed. return \' \'.join(word[::-1] for word in s.split())"},{"question":"A string is a palindrome if it reads the same forward and backward. Given a string S of length N, find the minimum number of characters you need to insert into the string to make it a palindrome. -----Input----- - The first line contains an integer T, the number of test cases. - For each test case, there is a single line containing the string S. -----Output----- For each test case, print a single integer, the minimum number of characters needed to make the string a palindrome. -----Constraints----- - 1 le T le 10 - 1 le N le 1000 - S consists of lowercase English letters -----Example Input----- 2 race google -----Example Output----- 3 2 -----Explanation----- Example case 1: We can add \'r\' at the end and \'e\' twice at the beginning to transform the string \\"race\\" into \\"ecarace\\", which is a palindrome. Example case 2: We can add \'e\' at the start and \'l\' at the end to transform the string \\"google\\" into \\"elgoogle\\", which is a palindrome.","solution":"def min_insertions_to_make_palindrome(s: str) -> int: Returns the minimum number of insertions needed to make the string s a palindrome. n = len(s) dp = [[0]*n for _ in range(n)] for gap in range(1, n): for i in range(n - gap): j = i + gap if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1 return dp[0][n - 1] def process_test_cases(test_cases): results = [] for s in test_cases: results.append(min_insertions_to_make_palindrome(s)) return results # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"=====Problem Statement===== You are given a list of integers. Your task is to write a function that will separate the even and odd numbers from the given list and then sort them in ascending order. Finally, combine the sorted even and odd numbers back into a single list, with all the even numbers coming before the odd numbers. =====Example===== Example >>> numbers = [4, 1, 7, 5, 8, 2, 3, 6] You can separate the even and odd numbers: >>> evens = [4, 8, 2, 6] >>> odds = [1, 7, 5, 3] By sorting them, you get: >>> evens_sorted = sorted(evens) >>> odds_sorted = sorted(odds) Combine the sorted lists: >>> result = evens_sorted + odds_sorted >>> print(result) [2, 4, 6, 8, 1, 3, 5, 7] =====Input Format===== The first line contains a list of integers, `numbers`. =====Output Format===== Print the modified list where all even numbers are sorted first followed by all odd numbers sorted. =====Function Signature===== def separate_and_sort(numbers: List[int]) -> List[int]: # Your code here =====Constraints===== - The list can contain up to 1000 integers. - Each integer will be between -1000 and 1000. =====Example Usage===== Example >>> separate_and_sort([4, 1, 7, 5, 8, 2, 3, 6]) [2, 4, 6, 8, 1, 3, 5, 7] >>> separate_and_sort([10, -3, -15, 0, 12, 7, -8]) [-8, 0, 10, 12, -15, -3, 7]","solution":"from typing import List def separate_and_sort(numbers: List[int]) -> List[int]: Separates even and odd numbers from the input list, sorts each group in ascending order, and combines them with all even numbers first followed by all odd numbers. evens = [num for num in numbers if num % 2 == 0] odds = [num for num in numbers if num % 2 != 0] evens_sorted = sorted(evens) odds_sorted = sorted(odds) return evens_sorted + odds_sorted"},{"question":"Given an undirected graph with nodes represented as integers from 1 to N, and M edges where each edge has a certain weight, determine the shortest path from a starting node S to an ending node E. The graph may contain cycles. Input The first line contains three integers N (1 ≤ N ≤ 10^5) – the number of nodes, M (0 ≤ M ≤ 2·10^5) – the number of edges, and Q (1 ≤ Q ≤ 10^3) – the number of queries. Each of the next M lines contains three integers u, v and w (1 ≤ u, v ≤ N, 1 ≤ w ≤ 10^9), representing an edge between nodes u and v with weight w. Each of the following Q lines contains two integers S and E (1 ≤ S, E ≤ N), representing the starting and ending nodes of a query. Output For each query, output a single integer representing the shortest distance from node S to node E, or -1 if there is no path. Example Input 5 6 3 1 2 2 1 3 4 2 3 1 2 4 7 3 4 3 4 5 1 1 4 4 5 3 1 Output 6 1 4 Note Explanation: The first query asks for the shortest path from node 1 to node 4. One shortest path can be 1 -> 2 -> 3 -> 4 with a total weight of 2 + 1 + 3 = 6. For the second query, the shortest path from node 4 to node 5 is a direct edge with a weight of 1. The third query looks for the shortest path from node 3 to node 1. The shortest path is 3 -> 2 -> 1 with a total weight of 1 + 2 = 3.","solution":"import heapq def dijkstra(n, adj, start): Use Dijkstra\'s algorithm to find shortest paths from start node to all other nodes. dist = [float(\'inf\')] * (n + 1) dist[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in adj[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist def shortest_paths(n, m, edges, queries): # Create adjacency list adj = [[] for _ in range(n + 1)] for u, v, w in edges: adj[u].append((v, w)) adj[v].append((u, w)) results = [] for s, e in queries: dist = dijkstra(n, adj, s) result = dist[e] if dist[e] != float(\'inf\') else -1 results.append(result) return results"},{"question":"You are given a binary tree with each node having a value of either 0 or 1. Your task is to find the length of the longest path consisting of only 1s in the tree. The path may start and end at any node and does not necessarily pass through the root. INPUT The first line contains an integer N denoting the number of nodes in the binary tree. Each of the next N lines contains three integers representing a node in the binary tree and its left and right children: value, left_child_index, right_child_index. If a node has no left or right child, the corresponding index will be -1. Nodes are 0-indexed and the root is always the first node (index 0). OUTPUT Print a single integer in a single line denoting the length of the longest path consisting only of 1s. Constraints 1 ≤ N ≤ 100000 The value of each node is either 0 or 1. SAMPLE INPUT 3 1 1 2 1 -1 -1 1 -1 -1 SAMPLE OUTPUT 3 Explanation The tree has 3 nodes, all with the value 1, and connected in a single path as follows: 1 / 1 1 The longest path consisting of only 1s has a length of 3 (including edges between the nodes).","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(node_list): if not node_list: return None nodes = [None] * len(node_list) for i, (value, left, right) in enumerate(node_list): if nodes[i] is None: nodes[i] = TreeNode(value) if left != -1: nodes[left] = nodes[left] or TreeNode(node_list[left][0]) nodes[i].left = nodes[left] if right != -1: nodes[right] = nodes[right] or TreeNode(node_list[right][0]) nodes[i].right = nodes[right] return nodes[0] def longest_path_of_ones(root): max_path = 0 def dfs(node): nonlocal max_path if not node: return 0 left_length = dfs(node.left) if node.left else 0 right_length = dfs(node.right) if node.right else 0 if node.value == 1: max_path = max(max_path, 1 + left_length + right_length) return 1 + max(left_length, right_length) return 0 dfs(root) return max_path def main(node_list): root = build_tree(node_list) return longest_path_of_ones(root)"},{"question":"In the enchanted forest, there resides a kingdom of mythical creatures. Their communication method involves a series of unique strings that they generate following specific rules. Each string can only contain lowercase English alphabets. However, their magic is fading, and they need to strengthen their communication capabilities. To do this, they have created a special operation called “Shuffle and Replace.” In this operation, they select any substring of a given string and replace it with the reverse of that substring. Your task is to determine if, after a number of such operations, the given string can be transformed into a target string. Input The input consists of two lines: 1. The first line contains the initial string (s). 2. The second line contains the target string (t). Output Output \\"YES\\" if the initial string (s) can be transformed into the target string (t) using the “Shuffle and Replace” operations. Otherwise, output \\"NO\\". Constraints - 1 ≤ length of s, t ≤ 1000 SAMPLE INPUT abcd dcba SAMPLE OUTPUT YES Explanation In the given example, the initial string \\"abcd\\" can be transformed into the target string \\"dcba\\" by reversing the entire string. First operation: reverse the substring \\"abcd\\" -> \\"dcba\\". As a result, the initial string \\"abcd\\" is transformed into the target string \\"dcba\\", so the answer is \\"YES\\".","solution":"def can_transform(s, t): Determines if the initial string s can be transformed into the target string t using any number of \\"Shuffle and Replace\\" operations (reversing any substring). if sorted(s) == sorted(t): return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function that takes three integers representing the sides of a triangle and determines whether the triangle is equilateral, isosceles, or scalene. Ensure your function handles cases where the sides do not form a valid triangle.","solution":"def classify_triangle(a, b, c): Classifies a triangle based on its side lengths. Parameters: a (int): Side length a of the triangle. b (int): Side length b of the triangle. c (int): Side length c of the triangle. Returns: str: \\"equilateral\\" if all sides are equal, \\"isosceles\\" if exactly two sides are equal, \\"scalene\\" if all sides are different, \\"not a triangle\\" if the sides do not form a valid triangle. # Check if the sides can form a triangle if a + b <= c or b + c <= a or c + a <= b: return \\"not a triangle\\" # Check for equilateral triangle if a == b == c: return \\"equilateral\\" # Check for isosceles triangle if a == b or b == c or c == a: return \\"isosceles\\" # If it is not equilateral or isosceles, it is scalene return \\"scalene\\""},{"question":"A company is releasing a new software update, and they want to ensure their versioning system follows the \\"Semantic Versioning\\" format. A semantic version string is in the form `MAJOR.MINOR.PATCH`, where `MAJOR`, `MINOR`, and `PATCH` are non-negative integers (e.g., \'2.1.3\'). When multiple versions are given, to maintain backward compatibility, the company needs to determine the highest version available. Given a list of version strings, write a function to find the highest version. You need to consider that versions are compared based on their MAJOR, MINOR, and PATCH numbers in that order. -----Input:----- - First line will contain `N`, the number of versions. - Each of the next `N` lines contains a single version string. -----Output:----- - Output a single version string that represents the highest version among the given versions. -----Constraints----- - 1 leq N leq 1000 - Each version string strictly follows the format `MAJOR.MINOR.PATCH` where `MAJOR`, `MINOR`, and `PATCH` are non-negative integers without leading zeros and within 0 to 99999. -----Sample Input:----- 5 1.0.0 2.1.0 2.0.1 1.3.4 2.1.1 -----Sample Output:----- 2.1.1 -----Explanation:----- Among the given version strings, \'2.1.1\' is the highest version as its MAJOR (2) is the highest, and for versions with the same MAJOR, we compare the MINOR and then PATCH values.","solution":"def highest_version(versions): Returns the highest version string from the list of version strings. def version_key(version): # Split and convert the version string into a tuple of integers major, minor, patch = map(int, version.split(\'.\')) return (major, minor, patch) # Sort and get the highest version return max(versions, key=version_key)"},{"question":"Sara is an avid cyclist and loves tracking her cycling routes. She rides on a grid composed of N rows and M columns, with each cell representing a location she can pass through. Sara starts her ride at the top-left corner of the grid (cell (1,1)) and wants to end at the bottom-right corner (cell (N,M)). She can only move right or down at each step. Sara wants to know how many unique paths she can take to reach her destination. Your task is to write a program that will calculate the number of unique paths for Sara to reach her goal. INPUT First line contains T, the number of test cases. Each of the next T lines contains two integers N and M, representing the number of rows and columns in the grid respectively. OUTPUT Print T lines of output, each line containing the number of unique paths for the corresponding test case. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 SAMPLE INPUT 2 3 3 2 2 SAMPLE OUTPUT 6 2","solution":"def unique_paths(N, M): Calculate the number of unique paths in a N x M grid. if N == 0 or M == 0: return 0 dp = [[1]*M for _ in range(N)] for i in range(1, N): for j in range(1, M): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[-1][-1] def get_unique_paths_for_test_cases(test_cases): results = [] for N, M in test_cases: results.append(unique_paths(N, M)) return results"},{"question":"Given two strings str1 and str2, your task is to find the minimum number of operations required to convert str1 to str2. You are allowed to perform the following three operations: 1. Insert a character 2. Remove a character 3. Replace a character Each operation counts as 1 step. Example 1: Input: str1 = \\"horse\\", str2 = \\"ros\\" Output: 3 Explanation: horse -> rorse (replace \'h\' with \'r\') rorse -> rose (remove \'r\') rose -> ros (remove \'e\') Example 2: Input: str1 = \\"intention\\", str2 = \\"execution\\" Output: 5 Explanation: intention -> inention (remove \'t\') inention -> enention (replace \'i\' with \'e\') enention -> exention (replace \'n\' with \'x\') exention -> exection (replace \'n\' with \'c\') exection -> execution (insert \'u\') Your Task: This is a functional problem. You only need to complete the function `minDistance()`. The printing is done automatically by the driver code. Expected Time Complexity: O(m * n), where m is the length of str1 and n is the length of str2. Expected Auxiliary Space: O(m * n). Constraints: 1 <= str1.length, str2.length <= 100 str1 and str2 consist of only lowercase English letters.","solution":"def minDistance(str1, str2): Returns the minimum number of operations required to convert str1 to str2. m, n = len(str1), len(str2) # Create a dp matrix dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the dp matrix for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill the dp matrix for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) return dp[m][n]"},{"question":"You are tasked with creating a file management system for a simple operating system. This system needs to support the following commands: 1. `CREATE <filename>` - Create a new file with the given filename. If a file with that name already exists, do nothing. 2. `DELETE <filename>` - Delete the file with the given filename. If a file with that name does not exist, do nothing. 3. `RENAME <old_filename> <new_filename>` - Rename the file from `old_filename` to `new_filename`. If a file with the name `old_filename` does not exist, do nothing. If a file with the name `new_filename` already exists, do nothing. 4. `LIST` - List all filenames currently in the system in alphabetical order. Implement the file management system as a class `FileManager`. You need to implement the following methods: - `create(filename: str) -> None` - `delete(filename: str) -> None` - `rename(old_filename: str, new_filename: str) -> None` - `list_files() -> List[str]` # Input The input is a series of commands. Each command is one of the types specified above. Commands are case-sensitive. # Output For each `LIST` command, output the filenames currently in the system in alphabetical order as a list. For other commands, there is no output. # Example ```python # Initialize our FileManager class fm = FileManager() # Execute a series of commands fm.create(\\"file1\\") fm.create(\\"file2\\") fm.rename(\\"file1\\", \\"file3\\") print(fm.list_files()) # Output: [\\"file2\\", \\"file3\\"] fm.delete(\\"file2\\") print(fm.list_files()) # Output: [\\"file3\\"] fm.create(\\"file2\\") print(fm.list_files()) # Output: [\\"file2\\", \\"file3\\"] ``` Note: - Filenames contain only alphanumeric characters. - Assume the maximum length of a filename is 100 characters. - The total number of commands will be at most 1000.","solution":"class FileManager: def __init__(self): self.files = set() def create(self, filename: str) -> None: if filename not in self.files: self.files.add(filename) def delete(self, filename: str) -> None: if filename in self.files: self.files.remove(filename) def rename(self, old_filename: str, new_filename: str) -> None: if old_filename in self.files and new_filename not in self.files: self.files.remove(old_filename) self.files.add(new_filename) def list_files(self) -> list: return sorted(self.files)"},{"question":"You are given an array of integers. Your task is to split the array into two non-empty subarrays such that the product of the sums of the elements in the subarrays is maximized. If there are multiple ways to split the array, choose the one that gives the maximum product of the sums. If an array cannot be split into two non-empty subarrays, return -1. Write a function `maxProduct` that takes an integer array as input and returns the maximum product of the sums of the two subarrays. Input The first line of the input contains an integer T - the number of test cases. Each of the next T lines contains an integer N (the size of the array) followed by N integers (the elements of the array). Output For each test case, output the maximum product of the sums of the two subarrays. Constraints 1 ≤ T ≤ 100 2 ≤ N ≤ 10^5 1 ≤ Array[i] ≤ 10^4 SAMPLE INPUT 3 5 1 2 3 4 5 3 1 1 1 4 10 5 1 2 SAMPLE OUTPUT 54 1 140 Explanation In the first case, split the array as [1, 2, 3] and [4, 5]. The sums are 6 and 9 respectively, and the product is 54. In the second case, split the array as [1] and [1, 1]. The sums are 1 and 2 respectively, and the product is 2. In the third case, split the array as [10] and [5, 1, 2]. The sums are 10 and 8 respectively, and the product is 80.","solution":"def maxProduct(test_cases): results = [] for case in test_cases: N, array = case if N < 2: results.append(-1) continue total_sum = sum(array) left_sum = 0 max_product = -1 for i in range(N - 1): left_sum += array[i] right_sum = total_sum - left_sum max_product = max(max_product, left_sum * right_sum) results.append(max_product) return results"},{"question":"You are given a grid of digits representing a city map where each digit indicates the height of the building at that position. Your task is to find the number of \\"peaks\\" in the grid. A peak is defined as a building whose height is greater than or equal to the heights of all its adjacent buildings (consider the buildings adjacent horizontally, vertically, and diagonally). If the building is on the edge or corner of the grid and it meets the criteria of being a peak with its existing neighbors, it\'s also considered a peak. Input The first line contains two integers, `n` and `m`, representing the number of rows and columns in the grid, respectively. Each of the next `n` lines contains `m` digits representing the heights of the buildings in that row. Output Print the number of peaks found in the grid. Constraints - 1 ≤ n, m ≤ 100 - Each height digit is within the range [1, 9]. Examples Input 3 3 1 2 1 2 3 2 1 2 1 Output 1 Input 4 4 3 3 3 3 3 4 4 3 3 4 4 3 3 3 3 3 Output 4","solution":"def count_peaks(grid): def is_peak(grid, i, j): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] for di, dj in directions: ni, nj = i + di, j + dj if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and grid[ni][nj] > grid[i][j]: return False return True n = len(grid) m = len(grid[0]) peak_count = 0 for i in range(n): for j in range(m): if is_peak(grid, i, j): peak_count += 1 return peak_count def parse_input(input_str): lines = input_str.strip().split(\'n\') n, m = map(int, lines[0].split()) grid = [list(map(int, line.split())) for line in lines[1:]] return grid def count_peaks_in_city_map(input_str): grid = parse_input(input_str) return count_peaks(grid)"},{"question":"Zappy the kangaroo loves hopping around the Outback. He has a peculiar way of hopping: in every hop, he can move exactly A, B, or C meters forward. Now, he wants to reach exactly D meters, starting from 0 meters. Determine the minimum number of hops Zappy needs to reach exactly D meters. If it\'s not possible to reach exactly D meters using any combination of A, B, and C hops, print \\"Impossible\\". Input The first line contains four integers, A, B, C, and D (1 ≤ A, B, C, D ≤ 1000). Output On the first and only line, print the minimum number of hops required to reach exactly D meters, or print \\"Impossible\\" if it is not possible. Examples Input 2 3 5 11 Output 3 Input 4 6 8 15 Output Impossible Input 1 2 3 5 Output 2 Note In the first sample, Zappy can hop 3 meters, 3 meters, and 5 meters (3 + 3 + 5 = 11) and thus needs 3 hops. In the second sample, it is impossible for Zappy to reach exactly 15 meters using hops of 4, 6, or 8 meters. In the third sample, Zappy can hop 2 meters and then 3 meters (2 + 3 = 5) to reach 5 meters in 2 hops.","solution":"from collections import deque def min_hops(A, B, C, D): Returns the minimum number of hops required to reach exactly D meters, or \\"Impossible\\" if it is not possible. # Queue for BFS containing tuples (current_distance, number_of_hops) queue = deque([(0, 0)]) visited = set() while queue: current_distance, hops = queue.popleft() # If we\'ve reached the exact distance D if current_distance == D: return hops for hop in (A, B, C): next_distance = current_distance + hop if next_distance <= D and next_distance not in visited: visited.add(next_distance) queue.append((next_distance, hops + 1)) return \\"Impossible\\""},{"question":"Vera is an avid book collector who loves categorizing her bookshelves in different ways. She has a large bookshelf with `n` books, each having a unique integer ID ranging from 1 to n. She decided to organize her books into sections such that the sum of the book IDs in each section is the same. To make the task manageable, she decided to have exactly `k` sections with an equal sum of IDs in each section. A section can contain any number of books, but the total number of sections must be exactly `k` and the sum of book IDs in each section should be equal. Write a program that determines if it is possible for Vera to organize her bookshelf as described. If it is possible, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The first line of input contains two integers `n` and `k` (1 ≤ k ≤ n), where `n` is the total number of books, and `k` is the number of sections Vera wants to organize. -----Output----- Print \\"YES\\" if it is possible to organize the books into exactly `k` sections with equal sums of IDs. Otherwise, print \\"NO\\". -----Examples----- Input 6 3 Output YES Input 5 2 Output NO -----Note----- In the first example, Vera has 6 books with IDs [1, 2, 3, 4, 5, 6]. She can organize them into 3 sections each with a sum of 7: [1, 6], [2, 5] and [3, 4]. In the second example, Vera has 5 books with IDs [1, 2, 3, 4, 5]. It is not possible to split them into 2 sections of equal sum.","solution":"def can_organize_books(n, k): Determines if it\'s possible to organize n books into k sections with equal sums of IDs. total_sum = n * (n + 1) // 2 # Sum of the first n natural numbers if total_sum % k == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"You are tasked with developing a new training course for employees at ByteCorp. There are n training modules, each with a list of prerequisites that must be completed before taking that module. Your goal is to determine the shortest time required to complete a specified module t, given that each module takes exactly 1 week to complete, and modules can be taken simultaneously as long as their prerequisites are met. -----Input----- Each input will consist of a single test case. The first line contains two space-separated integers n and t (1 le n le 1000, 1 le t le n). The next n lines contain the prerequisite information for each module. The i-th line describes module i and starts with an integer k_i (0 le k_i < n), the number of prerequisites for module i. Following this are k_i space-separated integers, the module numbers that are prerequisites for module i. -----Output----- Output a single integer, the minimum number of weeks required to complete module t. -----Examples----- Sample Input: 4 3 0 1 1 1 2 2 2 3 Sample Output: 3 Sample Input: 5 5 0 1 1 1 1 1 2 2 3 4 Sample Output: 4","solution":"def minimum_weeks_to_complete(n, t, prerequisites): from collections import deque, defaultdict # Create an adjacency list and calculate indegrees of each module adj_list = defaultdict(list) indegree = [0] * (n + 1) # Using 1-based indexing for i in range(1, n + 1): for pre in prerequisites[i - 1][1:]: adj_list[pre].append(i) indegree[i] += 1 # BFS queue initialization queue = deque() weeks = [0] * (n + 1) # Add modules with no prerequisites to the queue for i in range(1, n + 1): if indegree[i] == 0: queue.append(i) weeks[i] = 1 # Process modules in topological order using BFS while queue: current = queue.popleft() for neighbor in adj_list[current]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) weeks[neighbor] = weeks[current] + 1 return weeks[t]"},{"question":"Given a string consisting of both lowercase and uppercase letters, your task is to find the length of the longest alternating case substring such that no two adjacent characters in the substring are of the same case. Example 1: Input: S = \\"aAbBcCdD\\" Output: 8 Explanation: The entire string is an alternating case substring. Example 2: Input: S = \\"aabbAABB\\" Output: 2 Explanation: The longest alternating case substrings are \\"aA\\", \\"Aa\\", \\"bB\\", and \\"Bb\\", all of length 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxLengthAlternatingSubstr() which takes the string S as input and returns the length of the longest alternating case substring. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5 |S| represents the length of the string S.","solution":"def maxLengthAlternatingSubstr(S): Returns the length of the longest alternating case substring such that no two adjacent characters in the substring are of the same case. max_length = 0 current_length = 0 for i in range(len(S)): if i == 0 or S[i].islower() and S[i - 1].isupper() or S[i].isupper() and S[i - 1].islower(): current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"A large empire in a distant galaxy has recently developed a new communication network. This network connects various planets with directed communication channels. However, some channels are unidirectional and messages can travel in only one specified direction. To ensure the reliability of the network, you need to determine whether it is possible to send a message from one specific planet to another. Input::: The first line contains an integer N, the number of planets, and M, the number of directed communication channels. Each of the next M lines contains two integers u and v, which means there is a communication channel from planet u to planet v. The last line contains two integers S and T, representing the source planet and the target planet respectively. Output::: Print \\"Yes\\" if it\'s possible to send a message from planet S to planet T, otherwise print \\"No\\". Constraints::: 1 ≤ N ≤ 10^5 0 ≤ M ≤ 2*10^5 1 ≤ u, v, S, T ≤ N SAMPLE INPUT 4 4 1 2 2 3 3 4 4 2 1 4 SAMPLE OUTPUT Yes","solution":"def can_send_message(N, M, channels, S, T): from collections import deque, defaultdict graph = defaultdict(list) for u, v in channels: graph[u].append(v) visited = [False] * (N + 1) queue = deque([S]) while queue: node = queue.popleft() if node == T: return \\"Yes\\" if not visited[node]: visited[node] = True for neighbor in graph[node]: if not visited[neighbor]: queue.append(neighbor) return \\"No\\""},{"question":"You are given a list of integers representing the performance scores of students in a class. We categorize the performances as \\"Excellent\\", \\"Good\\", and \\"Needs Improvement\\" based on the following criteria: - \\"Excellent\\" if the score is 85 or above. - \\"Good\\" if the score is between 60 and 84, inclusive. - \\"Needs Improvement\\" if the score is below 60. Write a program that: 1. Reads an integer N (the number of students) followed by N integers representing the scores of the students. 2. Categorizes each score as \\"Excellent\\", \\"Good\\", or \\"Needs Improvement\\". 3. Outputs the number of students in each category. -----Constraints----- - N is a positive integer not exceeding 1000. - Each score is an integer between 0 and 100, inclusive. -----Input----- The input is given from Standard Input in the following format: ``` N score1 score2 score3 ... scoreN ``` -----Output----- Output the number of students in each category in the following format: ``` Excellent: X Good: Y Needs Improvement: Z ``` Where X is the count of students with \\"Excellent\\" scores, Y is the count with \\"Good\\" scores, and Z is the count with \\"Needs Improvement\\" scores. -----Sample Input----- 5 90 75 45 88 62 -----Sample Output----- ``` Excellent: 2 Good: 2 Needs Improvement: 1 ``` In this example, 2 scores are 85 or above (90 and 88), 2 scores are between 60 and 84 (75 and 62), and 1 score is below 60 (45).","solution":"def categorize_students(N, scores): Categorizes student scores into \'Excellent\', \'Good\', and \'Needs Improvement\'. Parameters: N (int): The number of students. scores (list of int): The list of scores of the students. Returns: tuple: A tuple containing counts of \'Excellent\', \'Good\', and \'Needs Improvement\'. excellent_count = 0 good_count = 0 needs_improvement_count = 0 for score in scores: if score >= 85: excellent_count += 1 elif 60 <= score < 85: good_count += 1 else: needs_improvement_count += 1 return (excellent_count, good_count, needs_improvement_count)"},{"question":"You are given two strings, `s` and `t`. The string `s` consists of alphabetic characters and special characters \'#\'. The character \'#\' acts as a backspace, i.e., it removes the last non-special character of `s`. Your task is to determine whether the final processed string `s` is equal to string `t`. Write a function that simulates the backspace operation and checks for equality. Input Format The first line contains the number of test cases T. T test cases follow. Each test case contains two lines: 1. A string `s` which may contain alphabetic characters and the special character \'#\' 2. A string `t` which contains only alphabetic characters Constraints 1 <= T <= 50 1 <= |s|, |t| <= 100 `s` will contain alphabetic characters and \'#\' `t` will contain only alphabetic characters Output Format For each test case, output \\"YES\\" if the final processed string `s` is equal to string `t`. Otherwise, output \\"NO\\". Sample Input 3 ab#c ac ab c a#c b Sample Output YES NO NO Explanation In the first test case, the string `s` becomes \\"ac\\" after processing, which matches `t`. Hence, the output is \\"YES\\". In the second test case, the string `s` becomes \\"\\" after processing, which does not match `t` (\\"c\\"). Hence, the output is \\"NO\\". In the third test case, the string `s` becomes \\"c\\" after processing, which does not match `t` (\\"b\\"). Hence, the output is \\"NO\\".","solution":"def apply_backspace(s): Applies the backspace operation on the string s. result = [] for char in s: if char == \'#\': if result: result.pop() else: result.append(char) return \'\'.join(result) def is_backspace_equal(s, t): Determines if the processed string s is equal to string t. processed_s = apply_backspace(s) return processed_s == t def process_test_cases(test_cases): Processes multiple test cases. results = [] for s, t in test_cases: if is_backspace_equal(s, t): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string s and an integer k. The task is to determine if you can construct a palindrome by rearranging the characters in the string s and inserting k or fewer additional characters anywhere in the string. A palindrome is a string that reads the same forward and backward. Input The input consists of two lines: - The first line contains the string s (1 ≤ |s| ≤ 10^5), consisting only of lowercase English letters. - The second line contains the integer k (0 ≤ k ≤ 10^5). Output Output \\"YES\\" if it is possible to construct a palindrome by rearranging the characters of the string s and inserting k or fewer additional characters. Otherwise, output \\"NO\\". Examples Input annb 1 Output YES Input car 1 Output YES Input aabbcc 0 Output YES Input abcdef 2 Output NO Explanation In the first example, we can rearrange the characters to create \\"nanbn\\" and insert one additional \\"n\\" to get \\"nannb\\" which is a palindrome. In the second example, we can rearrange and insert one additional character, such as creating \\"rcacr\\" by adding \\"c\\", to form a palindrome. In the third example, the string is already the rearranged version of \\"aabbcc\\", a palindrome with no additional characters required. In the fourth example, we need to add at least three characters (\\"e\\", \\"d\\", \\"f\\") to make \\"abcdef\\" a palindrome, which exceeds the limit of 2 additional characters. Hence, the answer is \\"NO\\".","solution":"def can_construct_palindrome(s, k): from collections import Counter # Count occurrences of each character char_counts = Counter(s) # Count characters with odd occurrences odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # Check if we can turn the string into a palindrome with k or fewer additional characters return \\"YES\\" if odd_count // 2 <= k else \\"NO\\""},{"question":"This is a graph traversal problem! You are given a weighted undirected graph with `N` nodes and `M` edges. The nodes are numbered from 1 to N. Each edge has a weight associated with it. Your task is to find the shortest path from a given start node `S` to every other node in the graph. Input The first line contains two integers, `N` and `M` (1≤N,M≤1000), representing the number of nodes and edges, respectively. The next `M` lines each contain three integers `u, v, w` (1≤u,v≤N, 1≤w≤10^6), representing an undirected edge between nodes `u` and `v` with weight `w`. The last line contains a single integer `S` (1≤S≤N), representing the start node. Output Output `N` space-separated integers, where the i-th integer is the minimum distance from the start node `S` to node `i`. If there is no path from `S` to node `i`, output `-1` for that node instead. Example Input 4 4 1 2 1 2 3 2 1 3 4 3 4 7 1 Output 0 1 3 10 Note In the sample, the graph has 4 nodes and 4 edges. The start node is `1`. The shortest paths from node `1` to other nodes are: - Node `1` to node `1`: 0 (itself) - Node `1` to node `2`: 1 (direct edge with weight 1) - Node `1` to node `3`: 3 (path through node `2`: 1 -> 2 -> 3) - Node `1` to node `4`: 10 (path through nodes `2` and `3`: 1 -> 2 -> 3 -> 4)","solution":"import heapq from collections import defaultdict def shortest_paths(N, M, edges, S): graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[S] = 0 priority_queue = [(0, S)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [dist if dist != float(\'inf\') else -1 for dist in distances.values()] # Sample input for an example N = 4 M = 4 edges = [ (1, 2, 1), (2, 3, 2), (1, 3, 4), (3, 4, 7) ] S = 1 # This would produce: [0, 1, 3, 10] print(shortest_paths(N, M, edges, S))"},{"question":"You are given an n x n grid representing a city, where each cell can either be a building (denoted by \'#\') or an empty space (denoted by \'.\'). The task is to determine the size of the largest square block of buildings that can be completely enclosed by a border of empty spaces. Formally, a k x k square block of buildings is completely enclosed by a border of empty spaces if: 1. The entire k x k area is filled with \'#\'. 2. The area surrounding the k x k block (carefully reaching the grid boundaries) is filled with \'.\'. The block does not need to be at the center of the grid, nor does it need to be in the interior. It can be along the edges as well, but it must be completely enclosed by empty spaces. Input: - The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. - The next n lines contain n characters each (either \'#\' or \'.\'). Output: - Print the side length of the largest square block of buildings that can be enclosed by empty spaces. If no such block exists, print 0. Examples Input: 5 ..... .#. .#. .#. ..... Output: 3 Input: 6 ...... ...... .... .... ...... ...... Output: 2 Input: 4 #..# #..# Output: 0 Explanation: In the first example, the largest block of buildings (size 3x3) is surrounded by empty spaces. In the second example, the largest block of buildings (size 2x2) is surrounded by empty spaces. In the third example, no block of buildings is completely enclosed by empty spaces.","solution":"def largest_enclosed_square(n, grid): def is_enclosed_by_spaces(x, y, size): for i in range(size): if x == 0 or y - 1 < 0 or y + size >= n: return False if grid[x-1][y + i] != \'.\': return False if x + size > n: return False if grid[x + size][y + i] != \'.\': return False if y + size >= n or y - 1 < 0: return False if grid[x + i][y-1] != \'.\': return False if y + size >= n or y + size >= n: return False if grid[x + i][y + size] != \'.\': return False return True max_size = 0 for x in range(1, n - 1): for y in range(1, n - 1): if grid[x][y] == \'#\': size = 1 while x + size < n and y + size < n and all(grid[x+i][y+size] == \'#\' and grid[x+size][y+i] == \'#\' for i in range(size)) and grid[x+size][y+size] == \'#\': size += 1 if is_enclosed_by_spaces(x, y, size): max_size = max(size, max_size) return max_size"},{"question":"You are given an array of n integers. Your task is to form a new array by rotating the original array k positions to the right. After rotating, you need to determine the maximum sum of any subsequence that can be obtained from the rotated array. A subsequence is derived by deleting zero or more elements from the array without changing the order of the remaining elements. For example, if the original array is [1, 2, 3, 4, 5] and k = 2, after rotating the array 2 positions to the right, the array becomes [4, 5, 1, 2, 3]. Now, the maximum sum of any subsequence from this rotated array can be derived. Input The first line contains two integers, n (1 ≤ n ≤ 10^5) and k (0 ≤ k ≤ n) — the number of elements in the array, and the number of positions to rotate the array. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_{i} ≤ 10^9) — the elements of the array. Output Output one integer — the maximum sum of any subsequence from the rotated array. Examples Input 5 2 1 2 3 4 5 Output 15 Input 4 0 5 4 3 2 Output 14 Input 6 3 1 6 3 2 7 4 Output 17 Note In the first example, after rotating the array 2 positions to the right, the array becomes [4, 5, 1, 2, 3]. The maximum sum of any subsequence from this array is 4 + 5 + 1 + 2 + 3 = 15.","solution":"def maximum_subsequence_sum(n, k, array): Rotates the array k positions to the right and calculates the maximum sum of any subsequence. Params: - n (int): Number of elements in the array - k (int): Number of positions to rotate the array to the right - array (list): The original array of integers Returns: - int: Maximum sum of any subsequence from the rotated array # Rotate the array k positions to the right k = k % n # To handle cases where k >= n rotated_array = array[-k:] + array[:-k] # The maximum subsequence sum is the sum of all elements max_sum = sum(rotated_array) return max_sum"},{"question":"In a city, there are n buses running on different routes. Each bus has its own route defined by a sequence of stops it visits in order. At each stop, a bus can pick up or drop off passengers. Each route is represented by a string of characters, where each character corresponds to a stop. Some stops have been visited by more than one bus, while others are unique to a specific route. Given a list of bus routes, you need to determine how many pairs of routes have at least one common stop. Input: - The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of bus routes. - The next n lines each contain a string of characters r_i (1 ≤ |r_i| ≤ 10^5), representing the stops for the i-th bus route. The total length of all strings does not exceed 2 * 10^5. Output: - Print a single integer — the number of pairs of bus routes that share at least one common stop. Examples: Input: 3 abc bcd def Output: 2 Input: 4 abcd efgh ijkl mnop Output: 0 Input: 2 hello world Output: 1 Note: In the first example, the pairs of bus routes that have common stops are (\\"abc\\", \\"bcd\\") and (\\"bcd\\", \\"def\\"). Thus, the output is 2. In the second example, no bus routes share any common stops. In the third example, the routes \\"hello\\" and \\"world\\" share the stop \'l\', hence there is one pair.","solution":"def count_common_stop_pairs(n, routes): Counts the number of pairs of routes that have at least one common stop. Parameters: n (int): Number of bus routes. routes (list of str): List of strings representing bus routes. Returns: int: Number of pairs of routes with at least one common stop. # Create a dictionary to map each stop to a set of routes that visit it stop_to_routes = {} for index, route in enumerate(routes): # Use a set to avoid duplicate counting within the same route for stop in set(route): if stop in stop_to_routes: stop_to_routes[stop].add(index) else: stop_to_routes[stop] = {index} # Set to keep track of unique route pairs pairs = set() for route_indices in stop_to_routes.values(): if len(route_indices) > 1: route_indices = list(route_indices) for i in range(len(route_indices)): for j in range(i + 1, len(route_indices)): pairs.add((route_indices[i], route_indices[j])) return len(pairs) # Example use case n = 3 routes = [\\"abc\\", \\"bcd\\", \\"def\\"] print(count_common_stop_pairs(n, routes)) # Expected: 2"},{"question":"Example You are given a string containing digits and an integer `k`. Your task is to find the maximum sum of `k` consecutive digits from the string and output this sum. Input A single line containing a string of digits and an integer `k`, separated by space. Output A single integer representing the maximum sum of `k` consecutive digits from the string. Example Input 123456789 3 Output 24 Explanation The sum of the digits in the best window is 7+8+9 = 24","solution":"def max_consecutive_digit_sum(s, k): Returns the maximum sum of k consecutive digits in the string s. Parameters: s (str): A string containing digits. k (int): The number of consecutive digits to consider. Returns: int: The maximum sum of k consecutive digits. max_sum = 0 n = len(s) for i in range(n - k + 1): current_sum = sum(int(s[j]) for j in range(i, i + k)) if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"The Python Software Foundation (PSF) Developer Survey reveals that among the most commonly used Python libraries are \\"pandas,\\" \\"NumPy,\\" and \\"matplotlib.\\" According to PSF, these libraries are widely used for data analysis and visualization. A hypothetical dataset contains information on various individuals, including their \\"age,\\" \\"income,\\" and \\"height.\\" Write a function that filters out individuals meeting all the following criteria: - Age is between 25 and 40 (inclusive), - Income is greater than 50,000, - Height is at least 160 cm. The function should take a list of dictionaries as the dataset and return a list of dictionaries of the individuals who meet the criteria. Each dictionary in the input list represents an individual with the keys \\"age\\", \\"income\\", and \\"height\\" and their corresponding values. Example input: ```python data = [ {\\"age\\": 30, \\"income\\": 70000, \\"height\\": 175}, {\\"age\\": 23, \\"income\\": 48000, \\"height\\": 170}, {\\"age\\": 35, \\"income\\": 68000, \\"height\\": 160}, {\\"age\\": 40, \\"income\\": 55000, \\"height\\": 158} ] ``` Expected output: ```python [ {\\"age\\": 30, \\"income\\": 70000, \\"height\\": 175}, {\\"age\\": 35, \\"income\\": 68000, \\"height\\": 160} ] ```","solution":"def filter_individuals(data): Filters individuals based on the given criteria: - Age is between 25 and 40 (inclusive) - Income is greater than 50,000 - Height is at least 160 cm Parameters: data (list): List of dictionaries where each dictionary represents an individual Returns: list: List of dictionaries of individuals who meet the criteria result = [] for individual in data: if 25 <= individual[\'age\'] <= 40 and individual[\'income\'] > 50000 and individual[\'height\'] >= 160: result.append(individual) return result"},{"question":"You are given an array of integers representing temperatures recorded over a period of days. You need to find the span of days for each day where the temperature continued to be less than or equal to the current day\'s temperature. The span of the temperature on a given day is defined as the maximum number of consecutive days (starting from that day and moving backward in time) for which the temperatures were less than or equal to the temperature of that day. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of days. The second line contains n integers t_1, t_2, ldots, t_n (1 le t_i le 10^9) — the temperatures recorded on each day. -----Output----- Output n integers s_1, s_2, ldots, s_n, where s_i is the span of the temperature on the i-th day. -----Examples----- Input 7 100 80 60 70 60 75 85 Output 1 1 1 2 1 4 6 ----Explanation----- For the first day, the span is 1 since there are no previous days. For the second day, the span is also 1 because the temperature on the first day (100) is greater than the temperature on the second day (80). For the third day, the span is 1 because the temperature on the second day (80) is greater than the temperature on the third day (60). For the fourth day, the span is 2 because the temperature on the third day (60) is less than the temperature on the fourth day (70), but the temperature on the second day (80) is greater. For the fifth day, the span is 1 because the temperature on the fourth day (70) is greater than the temperature on the fifth day (60). For the sixth day, the span is 4 because the temperatures of the previous four consecutive days (60 le 75, 70 le 75, 60 le 75, 80 le 75) are less than or equal to the temperature on the sixth day (75). For the seventh day, the span is 6 because the temperatures of the previous six consecutive days (100, 80, 60, 70, 60, 75) are all less than or equal to the temperature on the seventh day (85).","solution":"def temperature_span(n, temps): Returns an array of spans of temperatures over the period of days. :param n: Number of days :param temps: List of temperatures recorded each day :return: List of spans for each day result = [0] * n # Create a result list of spans initialized to 0 stack = [] # Stack to keep indexes of the temps array for i in range(n): # Pop elements from the stack while stack is not empty and the top of the stack is less or equal to the current temperature while stack and temps[stack[-1]] <= temps[i]: stack.pop() # If stack is empty, it means there are no previous higher temperature days result[i] = i + 1 if not stack else i - stack[-1] # Push index of the current temperature onto the stack stack.append(i) return result"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. A subarray is defined as a contiguous part of an array. The beauty of a subarray is defined as the sum of its elements. You are required to find the subarray with the maximum beauty value. Additionally, if there are multiple subarrays with the same maximum beauty value, you must choose the shortest one. If there\'s still a tie, choose the one with the smallest starting index. Note: At least one element in the array is positive. -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 200,000), the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9). -----Output----- Print three space-separated integers on a single line: the maximum beauty value, the starting index (1-based) and the ending index (1-based) of the subarray with the maximum beauty value. -----Examples----- Input 8 1 -2 3 10 -4 7 2 -5 Output 18 3 7 Input 5 -1 -1 1 1 -1 Output 2 3 4 -----Note----- In the first sample, the maximum beauty value subarray is [3, 10, -4, 7, 2], which sums to 18. This subarray starts at index 3 and ends at index 7. In the second sample, there are two subarrays with maximum beauty value of 2: [1, 1] and [1, 1, -1]. The subarray [1, 1] is chosen because it is the shortest and starts at index 3.","solution":"def max_beauty_subarray(n, array): Returns the maximum beauty value, and the start and end indices (1-based) of the subarray with the maximum beauty value. max_beauty = -float(\'inf\') current_beauty = 0 current_start = 0 best_start = 0 best_end = 0 min_length = n + 1 for i in range(n): if current_beauty + array[i] > array[i]: current_beauty += array[i] else: current_beauty = array[i] current_start = i if current_beauty > max_beauty or (current_beauty == max_beauty and (i - current_start + 1 < min_length)): max_beauty = current_beauty best_start = current_start best_end = i min_length = best_end - best_start + 1 return max_beauty, best_start + 1, best_end + 1"},{"question":"Implement a function that takes a list of strings, each string representing a person\'s name, and returns a list of names sorted such that all the names starting with a vowel (a, e, i, o, u) appear before the names starting with a consonant. The vowels and consonants should each maintain their original order from the input list. Function signature: `def sort_names(names: List[str]) -> List[str]:` # Input - A list of strings `names` (1 ≤ len(names) ≤ 10^6), where each string is a name of length between 1 and 100 characters. The names are case-insensitive, but the case should be preserved in the output. # Output - The function should return a list of strings sorted as described. # Examples Input: ```python [\\"Alice\\", \\"Bob\\", \\"Eve\\", \\"Charlie\\", \\"Oscar\\"] ``` Output: ```python [\\"Alice\\", \\"Eve\\", \\"Oscar\\", \\"Bob\\", \\"Charlie\\"] ``` Input: ```python [\\"Zachary\\", \\"Yvonne\\", \\"Uma\\", \\"Quincy\\", \\"Ian\\"] ``` Output: ```python [\\"Uma\\", \\"Ian\\", \\"Yvonne\\", \\"Zachary\\", \\"Quincy\\"] ``` # Explanation In the first example, names starting with vowels \\"Alice\\", \\"Eve\\", and \\"Oscar\\" are placed before the names starting with consonants \\"Bob\\" and \\"Charlie\\", while maintaining their original order within their respective groups. In the second example, names starting with vowels \\"Uma\\", \\"Ian\\" are placed before names starting with consonants \\"Yvonne\\", \\"Zachary\\", and \\"Quincy\\", maintaining the original order within their groups.","solution":"from typing import List def sort_names(names: List[str]) -> List[str]: vowels = {\'a\', \'e\', \'i\', \'o\', \'u\'} vowel_names = [name for name in names if name[0].lower() in vowels] consonant_names = [name for name in names if name[0].lower() not in vowels] return vowel_names + consonant_names"},{"question":"Implement a function `find_shortest_path` that takes an undirected graph and two nodes designated as the start and end nodes. The graph will be represented as an adjacency list where the keys are node identifiers and their corresponding values are sets of neighboring node identifiers. The function should return the shortest path (as a list of nodes) from the start node to the end node using breadth-first search (BFS). If there are multiple shortest paths, return any one of them. If there is no path between the start and end nodes, return an empty list. # Function Signature ```python def find_shortest_path(graph: Dict[int, Set[int]], start: int, end: int) -> List[int]: ``` # Parameters - `graph (Dict[int, Set[int])`: A dictionary where the keys are integers representing nodes and the values are sets of integers representing the neighbors of the corresponding node. - `start (int)`: An integer representing the starting node. - `end (int)`: An integer representing the destination node. # Returns - `List[int]`: A list of integers representing the nodes in the shortest path from the start node to the end node. If there is no valid path, return an empty list. # Constraints - There will be no self-loops in the graph. - The graph will not have multiple edges between the same pair of nodes. - Node identifiers are unique. # Example ```python graph = { 1: {2, 3}, 2: {4}, 3: {5}, 4: {5}, 5: {6}, 6: {} } start = 1 end = 6 # The output should be one of the following paths: [1, 3, 5, 6] or [1, 2, 4, 5, 6] print(find_shortest_path(graph, start, end)) ``` # Note In the above example, the adjacency list represents the following graph: ``` 1 - 2 | | 3 4 | | 5 - 6 ``` The shortest path from node 1 to node 6 is either [1, 3, 5, 6] or [1, 2, 4, 5, 6]. The function should return one of these paths.","solution":"from collections import deque from typing import Dict, Set, List def find_shortest_path(graph: Dict[int, Set[int]], start: int, end: int) -> List[int]: if start == end: return [start] queue = deque([(start, [start])]) visited = set([start]) while queue: current_node, path = queue.popleft() for neighbor in graph.get(current_node, []): if neighbor not in visited: if neighbor == end: return path + [end] visited.add(neighbor) queue.append((neighbor, path + [neighbor])) return []"},{"question":"Movie Theater Seat Reservation System You are tasked with creating a simple seat reservation system for a movie theater. The theater has a fixed number of rows and columns of seats. Each seat can either be available or reserved. Implement a function `reserveSeats(seat_request)` that takes a list of seat positions as an argument. Each seat position will be represented as a tuple `(row, col)`. Your function should return a dictionary showing the updated status of each seat after processing the seat reservation request. Input - The function will receive a list of tuples `seat_request`, where each tuple represents the row and column of the seat to be reserved. For example, `[(1, 2), (3, 4)]` indicates a request to reserve the seat at row 1, column 2 and the seat at row 3, column 4. - The theater has a fixed size of `n` rows and `m` columns, specified by constants. - Assume `n = 5` and `m = 7` for simplicity (you can adjust this for more complex scenarios). Output - Return a dictionary where keys are tuples representing seat positions `(row, col)`, and values are strings either `\'available\'` or `\'reserved\'`. Constraints - If a seat in the request list is out of bounds (i.e., the row or column exceeds the theater size), ignore the request for that seat and continue. - If a seat is already reserved, ignore the reservation request for that seat and continue. Example ``` n = 5 m = 7 Input: [(1, 2), (3, 4), (2, 4), (0, 0)] Output: { (0, 0): \'reserved\', (0, 1): \'available\', (0, 2): \'available\', (0, 3): \'available\', (0, 4): \'available\', (0, 5): \'available\', (0, 6): \'available\', (1, 0): \'available\', (1, 1): \'available\', (1, 2): \'reserved\', (1, 3): \'available\', (1, 4): \'available\', (1, 5): \'available\', (1, 6): \'available\', (2, 0): \'available\', (2, 1): \'available\', (2, 2): \'available\', (2, 3): \'available\', (2, 4): \'reserved\', (2, 5): \'available\', (2, 6): \'available\', (3, 0): \'available\', (3, 1): \'available\', (3, 2): \'available\', (3, 3): \'available\', (3, 4): \'reserved\', (3, 5): \'available\', (3, 6): \'available\', (4, 0): \'available\', (4, 1): \'available\', (4, 2): \'available\', (4, 3): \'available\', (4, 4): \'available\', (4, 5): \'available\', (4, 6): \'available\' } ```","solution":"def reserveSeats(seat_request): Reserves seats based on the given seat request list. Parameters: seat_request (list of tuples): A list of (row, col) tuples representing seats to reserve. Returns: dict: A dictionary representing the seat layout with \'available\' and \'reserved\' statuses. n = 5 # number of rows m = 7 # number of columns seats = {(i, j): \'available\' for i in range(n) for j in range(m)} for row, col in seat_request: if 0 <= row < n and 0 <= col < m: # ensure the seat position is within bounds if seats[(row, col)] == \'available\': # if the seat is available, reserve it seats[(row, col)] = \'reserved\' return seats"},{"question":"Task: Create a function that simulates a simplified Unix `chmod` operation. `chmod` changes, and allows it to change, the permissions of a file as represented by a three-digit octal number. The function should take a string representing a three-digit octal number (`sOctalPerms`) and return a string which represents its binary representation. Each digit should be individually converted to a three-digit binary number, and then concatenated together. The permissions octal format represents read (4), write (2), and execute (1) permissions for the file owner, the file owner’s group, and others (everyone else). Example: ``` Input: \\"754\\" Output: \\"111101100\\" ``` Explanation: - The first digit (\'7\') corresponds to the owner’s permissions: read (4) + write (2) + execute (1) = 7, which is binary \\"111\\". - The second digit (\'5\') corresponds to the group’s permissions: read (4) + execute (1) = 5, which is binary \\"101\\". - The third digit (\'4\') corresponds to others’ permissions: read (4) = 4, which is binary \\"100\\". Thus, the combined output is \\"111101100\\". Create a function `chmod_to_binary` which accomplishes this.","solution":"def chmod_to_binary(sOctalPerms): Converts a three-digit octal permission string to its binary representation. Args: sOctalPerms (str): The three-digit octal permission string. Returns: str: The binary representation of the octal permission. binary_representation = \'\'.join(format(int(digit), \'03b\') for digit in sOctalPerms) return binary_representation"},{"question":"You are given an integer n and an array a of n non-negative integers. You can perform the following operation any number of times: - Choose an index i (1 leq i leq n-1) such that a[i] > 0 and a[i-1] > 0. - Decrease a[i] by 1 and increase a[i-1] by 2. Determine the maximum possible value of a[0] after performing any number of the operations described above. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer n. The second line contains n non-negative integers representing the array a. ------ Output ------ For each test case, print a single line containing one integer — the maximum possible value of a[0]. ------ Constraints ------ 1 leq T leq 100 1 leq n leq 10^{5} 0 leq a[i] leq 10^{9} ------- Sample Input 1 ------ 3 5 1 2 3 4 5 3 100 4 1 4 0 0 0 0 ------ Sample Output 1 ------ 25 108 0 ------ Explanation 1 ------ In the first case, we can repeatedly shift values towards the first index. For example, starting with: - Decrease a[1] by 1 and increase a[0] by 2: [3, 1, 3, 4, 5] - Continue this until we transfer all possible values to the start: [25, 0, 0, 0, 0]. In the second case, we will start from the end and transfer values to the start: - Decrease a[2] by 1 and increase a[1] by 2: [100, 6, 0] - Then, decrease a[1] by 3 and increase a[0] by 6: [108, 0, 0]. In the third case, there are no non-zero values to shift. Thus, the maximum possible value of a[0] is 0.","solution":"def max_a0_after_operations(T, test_cases): results = [] for i in range(T): n, a = test_cases[i] total_sum = sum(a) results.append(total_sum) return results"},{"question":"Implement a function `robot_cleaner(commands)` that simulates the movements of a simple robot cleaner on a 5x5 grid. The robot starts at position `(0, 0)`, which is the top-left corner of the grid, and follows a series of commands to move around the grid. The valid commands are `\\"N\\"` for moving north (up), `\\"S\\"` for moving south (down), `\\"E\\"` for moving east (right), and `\\"W\\"` for moving west (left). The robot cannot move beyond the boundaries of the grid. If a command takes the robot outside the grid, the robot will ignore that command and stay at its current position. The function should return a 2D list representing the final state of the grid, with the robot\'s final position marked by an `\\"R\\"` and all other positions by `\\".\\"`. Example input and output: ```python >>> robot_cleaner([\\"N\\", \\"E\\", \\"E\\", \\"S\\", \\"S\\", \\"S\\", \\"W\\", \\"N\\"]) [ [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\"R\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"] ] >>> robot_cleaner([\\"E\\", \\"E\\", \\"E\\", \\"E\\", \\"E\\"]) [ [\\".\\", \\".\\", \\".\\", \\".\\", \\"R\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"] ] >>> robot_cleaner([\\"S\\", \\"S\\", \\"S\\", \\"S\\", \\"S\\", \\"S\\"]) [ [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\".\\"], [\\".\\", \\".\\", \\".\\", \\".\\", \\"R\\"] ] ``` Notes: - The robot always starts at position `(0, 0)`. - The function should handle an arbitrary number of commands. - If no commands are given, the robot remains at the starting position. - The grid size is fixed at 5x5.","solution":"def robot_cleaner(commands): # Initial grid of 5x5 grid = [[\\".\\"] * 5 for _ in range(5)] # Initial position x, y = 0, 0 # Move robot based on the commands for command in commands: if command == \\"N\\" and x > 0: x -= 1 elif command == \\"S\\" and x < 4: x += 1 elif command == \\"E\\" and y < 4: y += 1 elif command == \\"W\\" and y > 0: y -= 1 # Mark the final position grid[x][y] = \\"R\\" return grid"},{"question":"A company wants to distribute gift cards to its employees for the holiday season. Each gift card has a specific value, and the company has a list of all available gift cards. Management wants to ensure that each employee receives a combination of gift cards whose total value is exactly equal to a pre-determined amount. Furthermore, each employee can receive up to three gift cards, no more, no less. Your task is to determine if it is possible to select exactly three gift cards from the list such that their total value equals the pre-determined amount P. If it is possible, return the values of the three gift cards in ascending order. If multiple solutions are possible, return the combination with the smallest first value; if still a tie, return the one with the smaller second value, and so on. If it is not possible to find such a combination, return [-1]. -----Input----- The first line contains two integers, n (3 ≤ n ≤ 10^5) — the number of available gift cards, and P (1 ≤ P ≤ 10^9) — the pre-determined amount. The second line contains n integers representing the values of the available gift cards (1 ≤ gift card value ≤ 10^6). -----Output----- Output a single line with three integers in ascending order if the desired combination exists. If no such combination exists, output -1. -----Examples----- Input 5 100 10 20 30 70 50 Output 10 20 70 Input 4 85 10 25 35 45 Output -1","solution":"def find_gift_cards(n, P, gift_cards): This function determines a combination of exactly three gift cards such that their total value equals P. If such a combination exists, it returns the values of the three gift cards in ascending order. If it is not possible, it returns [-1]. gift_cards.sort() for i in range(n - 2): l, r = i + 1, n - 1 while l < r: current_sum = gift_cards[i] + gift_cards[l] + gift_cards[r] if current_sum == P: return [gift_cards[i], gift_cards[l], gift_cards[r]] elif current_sum < P: l += 1 else: r -= 1 return [-1]"},{"question":"A company is organizing a team-building exercise where employees are divided into teams. Each team has N members, and the N members are identified with unique IDs from 1 to N. The company wants to ensure that the teams can be divided into pairs for a particular activity. If N is odd, one person will not have a pair. Write a function `can_form_pairs(N)` that determines if it is possible to form pairs with the given number of team members. -----Input----- The input is a single integer N with 1 le N le 100. -----Output----- Output “Yes” if it\'s possible to form pairs with all members, otherwise output “No”. -----Examples----- Sample Input: 4 Sample Output: Yes Sample Input: 5 Sample Output: No","solution":"def can_form_pairs(N): Determines if it is possible to form pairs with the given number of team members N. Parameters: - N (int): The number of team members. Returns: - str: \\"Yes\\" if it is possible to form pairs with all members, otherwise \\"No\\". if N % 2 == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"Write a function that determines if all characters in a given string are unique. The function should return `true` if all characters in the string are unique, and `false` otherwise. You are not allowed to use any additional data structures. The function should be case-sensitive. Example 1: Input: s = \\"leetcode\\" Output: false Example 2: Input: s = \\"abc\\" Output: true Example 3: Input: s = \\"Aa\\" Output: true Example 4: Input: s = \\"aA\\" Output: true Example 5: Input: s = \\"abcdefghijklmnopqrstuvwxyz\\" Output: true Constraints: - 1 <= s.length <= 100 - s consists of printable ASCII characters.","solution":"def all_unique_characters(s): Determines if all characters in the given string are unique. Args: s (str): The input string. Returns: bool: True if all characters are unique, False otherwise. # Loop through each character in the string for i in range(len(s)): # Check if there is any identical character in the rest of the string if s[i] in s[i+1:]: return False return True"},{"question":"You are given an array of n integers. Your task is to find two indices i and j such that the elements at these indices are equal and the absolute difference between the indices is maximized. If there are multiple pairs with the same maximum distance, return the pair with the smallest i. If there are no such pairs, return -1. Input Format The first line contains an integer t (the number of test cases). The subsequent lines consist of t test cases. Each test case starts with an integer n (the number of elements in the array), followed by n space-separated integers representing the array elements. Constraints - 1 le t le 10 - 1 le n le 10^5 - 1 le array[i] le 10^9 Output Format For each test case, output the pair of indices (i, j) (1-based index) on a new line. If no such pair exists, output -1. Sample Input ``` 2 6 1 3 1 4 5 1 5 7 7 7 7 7 ``` Sample Output ``` 1 6 1 5 ``` Explanation For the first test case, the maximum distance between two equal elements is between indices 1 and 6 (both elements are 1). For the second test case, all elements are equal and the maximum distance is between indices 1 and 5 (both elements are 7).","solution":"def find_max_distance_indices(n, arr): index_dict = {} max_distance = -1 result_pair = (-1,) for i in range(n): if arr[i] in index_dict: first_occurrence = index_dict[arr[i]] current_distance = i - first_occurrence if current_distance > max_distance: max_distance = current_distance result_pair = (first_occurrence + 1, i + 1) else: index_dict[arr[i]] = i return result_pair if max_distance != -1 else -1 def solve(t, test_cases): results = [] for case in test_cases: n, arr = case results.append(find_max_distance_indices(n, arr)) return results"},{"question":"A popular social media website is trying to enhance its user experience by creating an algorithm to automatically detect and summarize trending topics. Given n posts from users in chronological order, you need to write a function that identifies the top k trending topics. Each post contains some text and a list of hashtags used in the post. A hashtag forms a topic. The trending score of a topic is defined as the number of different posts that use this hashtag. If multiple hashtags have the same score, the one that appeared earlier in the list of posts should be considered more trending. Your task is to return the top k trending topics sorted by their trending score in descending order. If two topics have the same score, the one that appeared first in the posts should appear first in the output. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of posts and the number of top trending topics to return. Each of the next n lines contain the text of a post followed by a space and then a list of hashtags used in the post separated by commas. Each hashtag starts with a \'#\' character. Output Output k lines containing the top trending topics in the format `#hashtag score` where #hashtag is the trending topic and score is its trending score. Example Input 7 3 Enjoying the sunny day #weather #sun Rainy afternoon, perfect for reading #weather #rain Good morning! #morning Lunchtime with colleagues #food Reading tech news #technology #news What a beautiful sunset #weather #sunset Stuck in traffic #commute #traffic Output #weather 3 #sun 1 #rain 1 Note In this example: - The hashtag #weather appears in 3 different posts. - The hashtags #sun and #rain appear in 1 post each but #sun appears first among the posts. - The function should return the top 3 trending topics sorted by their trending score.","solution":"from collections import defaultdict def top_k_trending_topics(n, k, posts): hashtag_count = defaultdict(int) hashtag_first_appearance = {} for i, post in enumerate(posts): parts = post.split(\'#\') hashtags_in_post = set() for part in parts[1:]: hashtag = \'#\' + part.split()[0].split(\',\')[0].strip() if hashtag not in hashtags_in_post: hashtag_count[hashtag] += 1 if hashtag not in hashtag_first_appearance: hashtag_first_appearance[hashtag] = i hashtags_in_post.add(hashtag) sorted_hashtags = sorted(hashtag_count.items(), key=lambda x: (-x[1], hashtag_first_appearance[x[0]])) return sorted_hashtags[:k]"},{"question":"# Problem statement Alice is starting a new job and needs to travel from her home to the office. She has several commuting options, each with a different travel time and cost associated with it. Alice wants to minimize both the total travel time and cost, while ensuring she arrives at the office within a maximum allowable time. You are given a list of commuting options, where each option is defined by its travel time (in minutes) and its cost (in dollars). Determine the minimum cost Alice can spend on her commute without exceeding the maximum allowable travel time. # Constraints - 1 ≤ N ≤ 1000, where N is the number of commuting options. - 1 ≤ T_i ≤ 100, where T_i is the travel time for the i-th option. - 1 ≤ C_i ≤ 100, where C_i is the cost for the i-th option. - 1 ≤ M ≤ 1000, where M is the maximum allowable travel time. # Input / Output **input** Input is given from standard input in the following format: ``` N M T_1 C_1 T_2 C_2 ... T_N C_N ``` **output** Output the minimum cost Alice can spend on her commute without exceeding the maximum allowable travel time. If it\'s not possible to reach the office within the allowed time, output `-1`. # Examples **Input example 1** ``` 5 60 30 10 45 20 60 30 75 40 90 50 ``` **Output example 1** ``` 10 ``` *Explanation*: Alice has several commuting options. The option with travel time 30 minutes and cost 10 dollars is the cheapest that satisfies the maximum allowable travel time of 60 minutes. **Input example 2** ``` 3 50 60 20 70 25 80 30 ``` **Output example 2** ``` -1 ``` *Explanation*: None of the options satisfy the maximum allowable travel time of 50 minutes. Therefore, it is not possible for Alice to reach the office on time, and the output is `-1`.","solution":"def minimum_commute_cost(N, M, options): Determines the minimum cost Alice can spend on her commute without exceeding the maximum allowable travel time. Arguments: N -- Number of commuting options (int) M -- Maximum allowable travel time (int) options -- List of tuples where each tuple contains (travel time, cost) Returns: Minimum cost for commuting without exceeding maximum travel time, or -1 if not possible. min_cost = float(\'inf\') for travel_time, cost in options: if travel_time <= M: min_cost = min(min_cost, cost) return min_cost if min_cost != float(\'inf\') else -1 # Example usage: # N, M = 5, 60 # options = [(30, 10), (45, 20), (60, 30), (75, 40), (90, 50)] # print(minimum_commute_cost(N, M, options)) # Should output 10"},{"question":"The city of Gridland is built on an n x m grid. Some cells have buildings blocking the view, and you need to find the largest possible rectangle of vacant cells in order to build a new park. Vacant cells are denoted by 0, while cells with buildings are denoted by 1. Write a program to determine the area of the largest rectangle of contiguous vacant cells. Input The first input line contains two integers n and m, the dimensions of the grid (1 ≤ n, m ≤ 100). Each of the next n lines contains m integers (either 0 or 1), describing the grid. Output Print a single integer, the area of the largest rectangle of contiguous vacant cells. Examples Input 4 4 1 0 1 0 0 0 1 0 0 0 0 0 1 0 1 1 Output 4 Input 3 5 0 1 0 0 1 1 1 0 0 0 0 0 0 1 0 Output 4 Input 2 2 1 1 1 1 Output 0","solution":"def max_histogram_area(histogram): stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def max_rectangle(grid): if not grid: return 0 n = len(grid) m = len(grid[0]) max_area = 0 height = [0] * m for i in range(n): for j in range(m): height[j] = height[j] + 1 if grid[i][j] == 0 else 0 max_area = max(max_area, max_histogram_area(height)) return max_area"},{"question":"Write a function to determine if a given string is an anagram of another given string. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all original letters exactly once. # Examples ``` \\"cinema\\", \\"iceman\\" -> True \\"hello\\", \\"billion\\" -> False \\"triangle\\", \\"integral\\" -> True ```","solution":"def are_anagrams(str1, str2): Determines if str1 and str2 are anagrams of each other. return sorted(str1) == sorted(str2)"},{"question":"Write a function named `reverse_alternating` which takes a single string as input and returns a new string with alternating words reversed, starting from the second word. Words are considered to be delimited by spaces. All input strings will contain only alphabetic characters and spaces, and will consist of at least one word. # Examples ```python reverse_alternating(\\"hello world\\") # returns \\"hello dlrow\\" reverse_alternating(\\"keep calm and code on\\") # returns \\"keep mlac and edoc on\\" reverse_alternating(\\"a quick brown fox\\") # returns \\"a kciuq brown xof\\" ``` # Constraints - Input strings will contain no punctuation, numbers, or special characters other than spaces. - Words are separated by exactly one space, and there are no leading or trailing spaces.","solution":"def reverse_alternating(s): This function takes a single string as input and returns a new string with alternating words reversed, starting from the second word. words = s.split() for i in range(1, len(words), 2): words[i] = words[i][::-1] return \\" \\".join(words)"},{"question":"You are given two strings, str1 and str2. You have to determine the number of steps required to transform str1 into str2. In one step, you can perform any one of the following operations: 1. Insert a character at any position. 2. Delete a character from any position. 3. Replace any character with another character. The task is to find the minimum number of steps required to transform str1 into str2 using the allowed operations. Input The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines contains two strings, str1 and str2. The lengths of the strings doesn\'t exceed 200. Output For each test case, output a single integer — the minimum number of steps to transform str1 into str2. Example Input 3 abc abd intention execution abc abc Output 1 5 0 Note For the first test case, \'abc\' can be transformed into \'abd\' by replacing the third character \'c\' with \'d\', thus only one operation is needed. For the second test case, \'intention\' can be transformed into \'execution\' through the following sequence of operations: 1. Replace \'i\' with \'e\' (intention -> entention) 2. Replace \'n\' with \'x\' (entention -> extenttion) 3. Replace \'t\' with \'c\' (extenttion -> excertion) 4. Delete \'t\' (excertion -> excerion) 5. Insert \'u\' (excerion -> execution) For the third test case, both strings are identical, so no operations are needed.","solution":"def min_edit_distance(str1, str2): Returns the minimum number of steps required to transform str1 into str2. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) return dp[m][n] def min_steps_to_transform(t, test_cases): results = [] for str1, str2 in test_cases: results.append(min_edit_distance(str1, str2)) return results"},{"question":"You are a skilled carpenter working on various projects. Your next task involves using wooden planks that vary in length. Each project needs a specific length of wood which you can achieve by cutting the provided planks or combining them without any wastage. Given the available planks\' lengths and the required length for each project, you need to determine the minimum number of planks required to complete a project. You can only use each plank once, and you cannot combine more than two planks to achieve the required length for a project. For example, consider the first sample. If you need a plank of length 10, you can use the provided planks of lengths 6 and 4 by combining them. Similarly, you can directly use the plank of length 15 which exceeds the needed length without combining. -----Input----- - The first line contains the number of planks available 1 leq n leq 10^5 and the required length for the project 1 leq L leq 10^9. - Then, n lines follow. Each line i has one integer: the length of the i-th plank 1 leq l_i leq 10^9. -----Output----- Print the minimum number of planks required to complete the project with the required length, following the given constraints. -----Examples----- Sample Input 1: 5 9 5 6 4 7 10 Sample Output 1: 2 Sample Input 2: 4 8 3 8 2 1 Sample Output 2: 1","solution":"def min_planks(n, L, planks): Returns the minimum number of planks required to achieve the required length L. Parameters: - n: Number of available planks - L: Required length for the project - planks: List containing the lengths of available planks Returns: - An integer representing the minimum number of planks required. planks.sort() if L in planks: return 1 left = 0 right = n - 1 while left < right: if planks[left] + planks[right] == L: return 2 if planks[left] + planks[right] < L: left += 1 else: right -= 1 return 2 # As there\'s always a combination for the given constraints. # Function to use when manually testing if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) L = int(data[1]) planks = list(map(int, data[2:2 + n])) print(min_planks(n, L, planks))"},{"question":"You have a rectangular garden grid of dimensions n x m, filled with different types of flowers. Each type has a unique integer identifier, and each cell of the grid can contain exactly one type of flower. Some flowers are not very compatible with others, and touching adjacent cells with incompatible flowers results in those flowers wilting away. Two cells are considered touching if they are directly adjacent horizontally or vertically. Given the garden\'s initial state and a list of incompatibilities, you need to process a series of operations. Each operation can either change the type of flower in a specific cell or query the size of the largest contiguous group of flowers of the same type. **Input** The first line of the input contains three space-separated integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 500), the dimensions of the garden grid and the number of operations, respectively. The next n lines describe the initial state of the garden. Each of these lines contains m space-separated integers representing the flower type in each cell. The following line contains an integer k (0 ≤ k ≤ 1000) – the number of incompatible flower pairs. Each of the next k lines contains two space-separated integers a and b (0 ≤ a, b < 1000) – indicating that flower types a and b are incompatible (both a and b will be different). Finally, the next q lines describe the operations. Each operation is one of the following: - \\"C x y t\\" (1 ≤ x ≤ n, 1 ≤ y ≤ m, 0 ≤ t < 1000): Change the flower type in cell (x, y) to t. - \\"Q x y\\" (1 ≤ x ≤ n, 1 ≤ y ≤ m): Query the size of the largest contiguous group of flowers of the same type containing the flower at cell (x, y). **Output** For each query operation, print a single line containing one integer – the size of the largest contiguous group of flowers of the same type that contains the flower at cell (x, y). **Example** Input ``` 3 3 5 1 2 2 3 1 1 1 3 3 2 1 2 1 3 Q 1 1 C 2 2 2 Q 2 2 C 3 3 2 Q 2 2 ``` Output ``` 1 3 3 ``` **Explanation** The initial garden state is: ``` 1 2 2 3 1 1 1 3 3 ``` Incompatibilities are: 1 with 2 and 1 with 3. - First query (Q 1 1): The largest group containing (1, 1) is just the single flower itself because it\'s incompatible with its neighbors. - First change (C 2 2 2): The garden becomes: ``` 1 2 2 3 2 1 1 3 3 ``` - Second query (Q 2 2): The largest group containing (2, 2) now consists of the flowers at (1, 2), (1, 3), and (2, 2), i.e., size 3. - Second change (C 3 3 2): The garden becomes: ``` 1 2 2 3 2 1 1 3 2 ``` - Third query (Q 2 2): The largest group containing (2, 2) remains of size 3 since an additional change did not affect compatibility with its neighbors.","solution":"class Garden: def __init__(self, n, m, grid, incompatible_pairs): self.n = n self.m = m self.grid = grid self.incompatibilities = {} for a, b in incompatible_pairs: self.incompatibilities.setdefault(a, set()).add(b) self.incompatibilities.setdefault(b, set()).add(a) self.visited = set() def is_incompatible(self, flower1, flower2): return flower2 in self.incompatibilities.get(flower1, set()) def dfs(self, x, y, flower_type): if (x, y) in self.visited or x < 0 or x >= self.n or y < 0 or y >= self.m: return 0 if self.grid[x][y] != flower_type: return 0 self.visited.add((x, y)) size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += self.dfs(x + dx, y + dy, flower_type) return size def change_flower(self, x, y, flower_type): self.grid[x][y] = flower_type def query_largest_group(self, x, y): self.visited = set() return self.dfs(x, y, self.grid[x][y]) def process_operations(n, m, initial_grid, incompatible_pairs, operations): garden = Garden(n, m, initial_grid, incompatible_pairs) result = [] for operation in operations: op = operation.split() if op[0] == \'C\': x, y, t = int(op[1]), int(op[2]), int(op[3]) garden.change_flower(x-1, y-1, t) elif op[0] == \'Q\': x, y = int(op[1]), int(op[2]) result.append(garden.query_largest_group(x-1, y-1)) return result"},{"question":"# **Rotated Sorted Array Search** You are given an array of integers `nums` sorted in ascending order, but the array has been rotated at some pivot unknown to you beforehand (i.e., `[0,1,2,4,5,6,7]` might become `[4,5,6,7,0,1,2]`). You are also given a target value to search for. If the target is found in the array, return its index. If not, return `-1`. You may assume that no duplicate exists in the array. Your algorithm\'s runtime complexity must be in the order of O(log n). # Example 1: ``` Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 ``` # Example 2: ``` Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 ``` # Example 3: ``` Input: nums = [1], target = 0 Output: -1 ``` # Constraints: - `1 <= nums.length <= 5000` - `-10^4 <= nums[i] <= 10^4` - `All values of nums are unique.` - `nums` is an ascending array that is possibly rotated. - `-10^4 <= target <= 10^4` Write a function `search` which takes the following parameters: ```python def search(nums: List[int], target: int) -> int: ``` - Input: `List[int]` `nums` - A rotated sorted array - Input: `int` `target` - The target value to search for - Output: `int` - The index of the target value if present, otherwise `-1`. Implement your function in Python and ensure you test with the given examples.","solution":"from typing import List def search(nums: List[int], target: int) -> int: Search for the target value in a rotated sorted array. Args: nums (List[int]): A list of integers sorted in ascending order, which is rotated at an unknown pivot. target (int): The value to search for. Returns: int: The index of the target if found, otherwise -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid if nums[left] <= nums[mid]: # left part is sorted if nums[left] <= target < nums[mid]: # target in the left part right = mid - 1 else: left = mid + 1 else: # right part is sorted if nums[mid] < target <= nums[right]: # target in the right part left = mid + 1 else: right = mid - 1 return -1"},{"question":"A farmer has a field of n x m grid divided into cells. He wants to plant either carrots or potatoes such that no two adjacent cells (horizontally or vertically) have the same type of crop. Determine if the farmer can plant crops in the field following this rule, and if possible, provide one such arrangement. **Input** - The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. **Output** - If it\'s possible to plant crops following the given rule, print \\"YES\\" and then n lines each containing m characters. Each character should be either \'C\' (carrot) or \'P\' (potato), without spaces in between. - If it\'s not possible, print \\"NO\\". **Examples** ``` Input 2 2 Output YES CP PC Input 3 4 Output YES CPCP PCPC CPCP ``` **Note** In the first example, the farmer can plant crops following the rule: ``` CP PC ``` In the second example, one possible arrangement is: ``` CPCP PCPC CPCP ```","solution":"def plant_crops(n, m): Determines if it is possible to plant crops alternately in a grid of size n x m. Returns \\"YES\\" followed by the grid or \\"NO\\" if it is not possible. grid = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'C\') else: row.append(\'P\') grid.append(\'\'.join(row)) return [\\"YES\\"] + grid"},{"question":"A company wants to optimize their bus routes. They have a set of bus stops and routes between them. Each route has a specific travel time. They want to find out the minimum travel time required to reach each bus stop from a given starting bus stop. The company provides you with an undirected graph where vertices represent bus stops and edges represent bus routes with their respective travel times. Your task is to help them determine the shortest travel time from the starting bus stop to all other bus stops. Input The first line contains two space-separated integers, n (1 ≤ n ≤ 1000) — the number of bus stops (vertices) and m (0 ≤ m ≤ 10000) — the number of bus routes (edges). Each of the next m lines contains three space-separated integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) indicating that there is a bus route between bus stops u and v with a travel time of w. The graph may contain multiple routes between two bus stops, but no route connects a bus stop to itself. The last line contains a single integer s (1 ≤ s ≤ n) denoting the starting bus stop. Output Output consists of a single line with n space-separated integers where the i-th integer represents the minimum travel time from the starting bus stop s to bus stop i. If a bus stop is not reachable from the starting bus stop, output INF for that bus stop. Examples Input 4 4 1 2 4 1 3 2 2 3 1 3 4 5 1 Output 0 3 2 7 Input 6 7 1 2 3 1 3 2 2 3 4 2 4 1 3 4 3 3 5 6 4 5 2 1 Output 0 3 2 4 6 INF","solution":"import heapq def dijkstra(n, graph, start): Compute the shortest travel times from the starting bus stop to all other bus stops. Parameters: n: int - Number of bus stops. graph: List[Tuple[int, int, int]] - List of bus routes (u, v, w). start: int - Starting bus stop. Returns: List[Union[int, str]] - List of shortest travel times from start to each bus stop. \'INF\' if unreachable. adj_list = [[] for _ in range(n)] for u, v, w in graph: adj_list[u-1].append((v-1, w)) adj_list[v-1].append((u-1, w)) distances = [float(\'inf\')] * n distances[start-1] = 0 priority_queue = [(0, start-1)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in adj_list[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return [\'INF\' if dist == float(\'inf\') else dist for dist in distances] def minimum_travel_times(n, m, edges, start): return dijkstra(n, edges, start)"},{"question":"Sara is working on a new encryption algorithm. She uses a string `s` of length `n` which is encrypted in `m` stages. In each stage, a subsequence of the string is reversed. The subsequence is defined by a list of indices. For each 1≤i≤m, during the i-th stage the subsequence of the string `s` with indexes j_{i,1}<j_{i,2}< ...<j_{i,q_i} is reversed. So, the subsequence `s[j_{i,1}], s[j_{i,2}], ..., s[j_{i,q_i}]` is reversed, and all other characters of `s` are left untouched. Your task is to determine if Sara\'s algorithm can generate a specific target string `t` of length `n`. Input: The first line contains two integers `n` and `m` (1≤ n≤ 40, 0≤ m≤ 10) — the length of the strings and the number of stages of Sara\'s algorithm. The second line contains the initial string `s` of length `n`. The third line contains the target string `t` of length `n`. Then `m` lines follow, each describing the subsequence considered in a stage of Sara\'s algorithm. The i-th of these lines contains the integer q_i (1≤ q_i ≤ n) followed by q_i integers j_{i,1}, j_{i,2}, ..., j_{i,q_i} (1≤ j_{i,1}<j_{i,2}< ...<j_{i,q_i}≤ n) — the length of the subsequence considered in the i-th stage and the indices of the subsequence. Output: If Sara\'s encryption algorithm can generate the target string `t`, print \\"POSSIBLE\\". Otherwise, print \\"IMPOSSIBLE\\". Examples: Input: 5 2 abcde acbde 2 2 3 1 4 Output: POSSIBLE Input: 5 3 abcde aecbd 2 2 3 2 1 5 3 3 4 5 Output: IMPOSSIBLE Explanation: For the first example: The initial string is `abcde`. In the first stage, the subsequence [s_2, s_3] (i.e., `bc`) is reversed to become `cb`, resulting in the string `acbde`. In the second stage, the element at index 4 (`d`) is reversed, which does not change the string since it\'s a single character. Thus, the target string `acbde` can be achieved. For the second example: The initial string is `abcde`. Reversing any of the given subsequences does not convert `abcde` to `aecbd`. Hence, forming the target string `aecbd` is \\"IMPOSSIBLE\\".","solution":"def can_generate_target(n, m, s, t, stages): Determines if the target string \'t\' can be generated from the initial string \'s\' using the specified stages of the encryption algorithm. :param n: Length of the strings :param m: Number of stages :param s: Initial string :param t: Target string :param stages: List containing details of each stage :return: \\"POSSIBLE\\" if the target string can be generated, otherwise \\"IMPOSSIBLE\\" s = list(s) for stage in stages: q_i = stage[0] indices = stage[1:] # Create the subsequence to reverse subseq = [s[idx - 1] for idx in indices] subseq.reverse() # Place the reversed subsequence back in the original string for i, idx in enumerate(indices): s[idx - 1] = subseq[i] return \\"POSSIBLE\\" if \\"\\".join(s) == t else \\"IMPOSSIBLE\\""},{"question":"Input 6 Landon 5 Bateman 9 Cardoni 2 Ellison 7 Alford 1 Ponder 3 2 - Ellison 4 + Truong 6 Output Landon is working diligently. Truong is now contributing.","solution":"def update_employees(initial_data, updates): Updates the employee data based on the input and returns the required messages. # parse initial data n = int(initial_data[0].strip()) employees = {} for i in range(1, n + 1): name, workload = initial_data[i].split() employees[name] = int(workload) # parse updates m = int(updates[0].strip()) messages = [] for i in range(1, m + 1): update = updates[i].split() op = update[0] name = update[1] amount = int(update[2]) if op == \'-\': if name in employees: employees[name] -= amount messages.append(f\\"{name} is working diligently.\\") elif op == \'+\': employees[name] = amount messages.append(f\\"{name} is now contributing.\\") return messages"},{"question":"In a magical school, there are N professors, each with a different level of capability in casting spells, from 1 to N. Each professor can cast a spell on k students, where k is a factor of the professor\'s capability level. The power of the spell a professor can cast on a student is equal to the professor\'s capability level. You need to determine the total spell power exerted on each student after all professors have cast their spells. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of a single integer N. -----Output:----- For each test case, output N integers in a single line, where the i^{th} integer is the total spell power exerted on the i^{th} student after all professors have cast their spells. -----Constraints----- - 1 leq T leq 10^5 - 1 leq N leq 10^6 -----Sample Input:----- 1 6 -----Sample Output:----- 1 3 4 7 6 12 -----EXPLANATION:----- - For the 1st student, only professor 1 can cast a spell of power 1. - For the 2nd student, professors 1 and 2 can cast spells of power 1 and 2, respectively. - For the 3rd student, professors 1 and 3 can cast spells of power 1 and 3, respectively. - For the 4th student, professors 1, 2, and 4 can cast spells of power 1, 2, and 4, respectively. - For the 5th student, professors 1 and 5 can cast spells of power 1 and 5, respectively. - For the 6th student, professors 1, 2, 3, and 6 can cast spells of power 1, 2, 3, and 6, respectively. Hence, the total spell power exerted on each student is [1, 3, 4, 7, 6, 12].","solution":"def calculate_total_spell_power(N): total_spell_power = [0] * (N + 1) for professor_capability in range(1, N + 1): for student in range(professor_capability, N + 1, professor_capability): total_spell_power[student] += professor_capability return total_spell_power[1:] def solve_magic_school_problem(test_cases): results = [] for N in test_cases: results.append(calculate_total_spell_power(N)) return results"},{"question":"Bob is planning to develop an app that simplifies dates for his users. The app needs to convert dates from the \\"MM/DD/YYYY\\" format to the \\"Day Month, Year\\" format where: - \\"Day\\" is the numerical day without leading zeros. - \\"Month\\" is the full name of the month. - \\"Year\\" is the four-digit year. For example, the date \\"04/03/2022\\" should be converted to \\"3 April, 2022\\". Write a program to perform this conversion. -----Input----- The first and only line of input contains a single string in the \\"MM/DD/YYYY\\" format. -----Output----- Print the corresponding date in the \\"Day Month, Year\\" format. -----Example----- Input: 04/03/2022 Output: 3 April, 2022 Input: 11/21/1999 Output: 21 November, 1999 Note: You can assume the input will always be a valid date in the \\"MM/DD/YYYY\\" format. The months should be formatted as follows: January, February, March, April, May, June, July, August, September, October, November, December.","solution":"def convert_date(date_str): Converts a date from MM/DD/YYYY format to \\"Day Month, Year\\" format. Parameters: date_str (str): The date in MM/DD/YYYY format. Returns: str: The date in \\"Day Month, Year\\" format. # Define a mapping of month number to month name months = [ \\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\" ] # Split the input date string into components mm, dd, yyyy = date_str.split(\'/\') # Convert month and day to integer month = int(mm) day = int(dd) # Get the month name from the list month_name = months[month - 1] # Format the date in the required format formatted_date = f\\"{day} {month_name}, {yyyy}\\" return formatted_date"},{"question":"Eleanor is managing a network of computers for a scientific research organization. The network consists of n computers (numbered from 1 to n) and m bidirectional cables (numbered from 1 to m) connecting pairs of computers. Each cable has a bandwidth capacity and a cost associated with its usage. Eleanor needs to select a specific subset of these cables to establish a high-speed backbone network such that: 1. The selected cables form a single connected network including all n computers. 2. The total bandwidth capacity of this network is maximized. 3. The total cost of this network does not exceed a given budget B. Due to the constraints of the problem, the solution must ensure efficient distribution of resources without exceeding the financial limit. Input The first line of the input contains three integers n, m, and B (2 ≤ n ≤ 10^4, 1 ≤ m ≤ 10^5, 1 ≤ B ≤ 10^9), the number of computers, the number of cables, and the budget. The next m lines describe the cables. Each line contains four integers ui, vi, bi, and ci (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ bi, ci ≤ 10^6) representing a cable connecting computers ui and vi with a bandwidth capacity of bi and a cost of ci. Output Output a single integer, the maximum bandwidth capacity of a connected network that can be established within the given budget B. If it is not possible to connect all computers within the given budget, print -1. Examples Input 4 5 20 1 2 5 4 2 3 6 5 3 4 4 3 1 3 2 6 1 4 3 8 Output 15 Input 3 3 7 1 2 3 8 2 3 2 5 1 3 5 9 Output -1 Explanation: In the first example, the selected cables can be {1-2, 2-3, 3-4} with a total bandwidth of 5+6+4=15 and a total cost of 4+5+3=12 which is within the budget. In the second example, it is not possible to connect all computers within the budget constraints of 7.","solution":"import heapq def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def maximum_bandwidth_within_budget(n, m, B, cables): cables.sort(key=lambda x: x[3]) max_bandwidth = 0 result = [] parent = list(range(n + 1)) rank = [0] * (n + 1) for cable in cables: if find(parent, cable[0]) != find(parent, cable[1]): union(parent, rank, cable[0], cable[1]) result.append(cable) if sum(x[3] for x in result) <= B: max_bandwidth = max(max_bandwidth, sum(x[2] for x in result)) else: return -1 cost = sum(x[3] for x in result) if cost <= B: return max_bandwidth else: return -1 # Example usage: input_data = [ (4, 5, 20, [(1, 2, 5, 4), (2, 3, 6, 5), (3, 4, 4, 3), (1, 3, 2, 6), (1, 4, 3, 8)]), (3, 3, 7, [(1, 2, 3, 8), (2, 3, 2, 5), (1, 3, 5, 9)]) ] for data in input_data: print(maximum_bandwidth_within_budget(*data)) # Output should be 15 and -1 respectively"},{"question":"A delivery company wants to optimize the route of its delivery truck. The truck starts at its depot and needs to visit a series of delivery points before returning to the depot. Each delivery point must be visited exactly once, and the cost of traveling between any two points is given by a distance matrix. The goal is to find the minimum cost route that visits all delivery points exactly once and returns to the starting depot. You are given a matrix distances where distances[i][j] represents the cost of traveling from point i to point j. The matrix is symmetric, meaning distances[i][j] = distances[j][i], and distances[i][i] = 0 for all i. Your task is to find the minimum cost of completing the tour starting and ending at the depot (delivery point 0). -----Input----- The first line of the input contains a single integer n (2 ≤ n ≤ 20) — the number of delivery points (including the depot). The next n lines each contain n space-separated integers, representing the distance matrix distances where the j-th integer in the i-th line is the distance from point i to point j (0 ≤ distances[i][j] ≤ 100). -----Output----- Output a single integer, the minimum cost of the route that starts and ends at the depot and visits all other delivery points exactly once. -----Examples----- Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 5 0 12 10 19 8 12 0 3 7 2 10 3 0 6 20 19 7 6 0 4 8 2 20 4 0 Output 32 -----Explanation----- For the first example: The optimal route is 0 -> 1 -> 3 -> 2 -> 0 with a total cost of 10 + 25 + 30 + 15 = 80. For the second example: The optimal route is 0 -> 4 -> 2 -> 1 -> 3 -> 0 with a total cost of 8 + 20 + 3 + 7 + 4 = 32.","solution":"from itertools import permutations def find_minimum_cost_route(n, distances): # Function to calculate the minimum cost route using brute force permutation method # Generate all permutations of points except the starting point (0) points = list(range(1, n)) min_cost = float(\'inf\') # Iterate over all possible permutations for perm in permutations(points): # Calculate the cost of each permutation route starting and ending at 0 current_cost = distances[0][perm[0]] for i in range(len(perm) - 1): current_cost += distances[perm[i]][perm[i+1]] current_cost += distances[perm[-1]][0] # Update minimum cost if the current route has a lower cost min_cost = min(min_cost, current_cost) return min_cost # Example usage: # n = 4 # distances = [ # [0, 10, 15, 20], # [10, 0, 35, 25], # [15, 35, 0, 30], # [20, 25, 30, 0] # ] # print(find_minimum_cost_route(n, distances)) # Output: 80"},{"question":"# Task You are given a list of integers. Your task is to find the maximum possible sum of its elements such that no two elements chosen in the sum are adjacent in the list. # Example For `lst = [3, 2, 5, 10, 7]`, the result should be `15` (elements `3, 10, and 2` or `5, 10`). For `lst = [2, 1, 4, 9]`, the result should be `11` (elements `2, 9`). # Input/Output - `[input]` list of integers `lst` `lst is at least 1 and at most 10^5 elements long` `Each integer in lst is at least -10^4 and at most 10^4.` - `[output]` an integer","solution":"def max_non_adjacent_sum(lst): Returns the maximum possible sum of the list elements such that no two elements chosen in the sum are adjacent in the list. if not lst: return 0 incl = 0 # Max sum including the previous element excl = 0 # Max sum excluding the previous element for num in lst: # Current max excluding the current element new_excl = max(excl, incl) # Current max including the current element incl = excl + num excl = new_excl # Return max of incl and excl return max(incl, excl)"},{"question":"You are working with a data processing system where significant overhead is added when performing certain large-scale operations. However, the system supports a batch processing feature which allows you to minimize the overhead by performing actions in bulk. Given the constraints, you must break down a given task into the most efficient batch sizes to minimize the total time taken. For each task, the processing time is composed of two parts: a fixed overhead cost that occurs once per batch, and a variable cost that depends on the number of items in the batch. Write a function that computes the minimum total time required to process a list of tasks while considering the optimal batch size. -----Input----- The input consists of one line with three integers: - t (1 le t le 10^9), the total number of items to process; - f (1 le f le 10^6), the fixed overhead time per batch; - v (1 le v le 10^6), the variable processing time per item. -----Output----- Output the minimum total time to process all items. -----Examples----- Sample Input 1: 1000 10 5 Sample Output 1: 5010 Sample Input 2: 20 15 1 Sample Output 2: 35","solution":"def minimum_total_time(t, f, v): Returns the minimum total time required to process t items with a fixed overhead time f per batch and variable time v per item. # It\'s most efficient to process all items in one batch whenever possible. return f + t * v # Example usage: # print(minimum_total_time(1000, 10, 5)) # Output: 5010 # print(minimum_total_time(20, 15, 1)) # Output: 35"},{"question":"You are given a matrix of characters representing a word search puzzle. Your task is to find if a given word exists in the matrix. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 200) — the number of rows and columns of the matrix. The next n lines describe the matrix, each containing m lowercase alphabet letters. The last line contains the word that you need to search for in the matrix. The length of the word does not exceed 10^3. -----Output----- Print \\"YES\\" (without quotes) if the word exists in the matrix, otherwise print \\"NO\\". -----Example----- Input 3 4 abcd efgh ijkl abcdef Output NO -----Example----- Input 3 4 abce sfcs adee see Output YES -----Note----- In the second example, the word \\"see\\" can be found by the following path: - \'s\' at (2, 1) - \'e\' at (3, 3) - \'e\' at (2, 3)","solution":"def exist(board, word): if not board: return False n, m = len(board), len(board[0]) def dfs(i, j, k): if k == len(word): return True if i < 0 or i >= n or j < 0 or j >= m or board[i][j] != word[k]: return False temp = board[i][j] board[i][j] = \'\' found = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1) board[i][j] = temp return found for i in range(n): for j in range(m): if dfs(i, j, 0): return \\"YES\\" return \\"NO\\""},{"question":"In the kingdom of Westeros, there is a grand castle with multiple rooms connected by corridors. Each room is represented by a unique number from 1 to n. Some rooms are connected directly by a corridor, represented as pairs (u, v) where u and v are room numbers. A network of corridors ensures that all rooms are interconnected either directly or indirectly through other rooms. However, due to a critical event, some corridors need to be removed. A corridor removal involves cutting the direct connection between two rooms. To maintain safety and security, it is required that after removing any corridor, the castle remains fully interconnected (i.e., there must still be a path between any two rooms, either directly or indirectly). Given the number of rooms n and the list of corridors m, your task is to determine whether each corridor can be removed without disconnecting the castle. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 10000), the number of rooms and the number of corridors, respectively. Next, m lines contain two integers each, u and v (1 ≤ u, v ≤ n and u ≠ v), indicating there is a corridor between room u and room v. Output The output should contain m lines, each line having a single integer: - 1 if removing the corresponding corridor does not disconnect the castle. - 0 if removing the corresponding corridor disconnects the castle. Example Input: 4 4 1 2 2 3 3 4 4 1 Output: 1 1 1 1 Explanation: Each corridor in the example can be removed one at a time without disconnecting the castle.","solution":"def can_remove_corridors(n, m, corridors): from collections import defaultdict, deque def is_connected(adj_list): visited = set() queue = deque([1]) visited.add(1) while queue: node = queue.popleft() for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return len(visited) == n # Build adjacency list adj_list = defaultdict(list) for u, v in corridors: adj_list[u].append(v) adj_list[v].append(u) results = [] for u, v in corridors: # Remove the corridor adj_list[u].remove(v) adj_list[v].remove(u) # Check if the castle is still connected if is_connected(adj_list): results.append(1) else: results.append(0) # Add the corridor back adj_list[u].append(v) adj_list[v].append(u) return results"},{"question":"Write a function called `decodeString` to decode a given encoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that k is a positive integer and will not exceed 100. INPUT First line is T, the number of test cases. T encoded strings follow, each string needs to be decoded. OUTPUT Print the decoded string for each test case in a new line. CONSTRAINTS 1 ≤ T ≤ 50 The length of each encoded string will not exceed 200 characters. Each encoded string will contain only lowercase letters, digits, and square brackets. SAMPLE INPUT 2 3[a]2[bc] 3[a2[c]] SAMPLE OUTPUT aaabcbc accaccacc","solution":"def decodeString(encoded): Decode an encoded string with the format k[encoded_string]. stack = [] current_string = \\"\\" current_num = 0 for c in encoded: if c.isdigit(): current_num = current_num * 10 + int(c) elif c == \'[\': stack.append((current_string, current_num)) current_string = \\"\\" current_num = 0 elif c == \']\': last_string, num = stack.pop() current_string = last_string + num * current_string else: current_string += c return current_string def decodeStrings(encoded_list): Given a list of encoded strings, decode each one. return [decodeString(encoded) for encoded in encoded_list] # Handling input and output if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split(\'n\') T = int(data[0]) encoded_strings = data[1:T+1] results = decodeStrings(encoded_strings) for result in results: print(result)"},{"question":"You are given an array a of n integers. You have to process q queries on this array. Each query is of one of two types: 1. Update: Change the value of all elements a_l, a_{l+1}, ldots, a_r to x. 2. Maximum: Find the maximum value in the subarray a_l, a_{l+1}, ldots, a_r. Write a program to handle these operations efficiently. # Input The first line contains two integers n and q (1 leq n, q leq 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the array. The following q lines describe the queries. Each query is one of the following two types: - `1 l r x` — update the elements a_l, a_{l+1}, ldots, a_r to x. - `2 l r` — find the maximum value in the subarray a_l, a_{l+1}, ldots, a_r. # Output For each query of the second type, output a single integer — the maximum value in the corresponding subarray. # Example **Input** ``` 5 4 1 2 3 4 5 2 1 5 1 2 4 10 2 1 5 2 2 4 ``` **Output** ``` 5 10 10 ``` # Note In the first query, the maximum value in the range [1, 5] is 5. After the first update, the array becomes [1, 10, 10, 10, 5]. In the next two maximum queries, the answers are 10 and 10 respectively.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update_range(self, l, r, val): for i in range(l, r + 1): self.update(i, val) def update(self, index, val): pos = index + self.n self.tree[pos] = val while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def query(self, l, r): l += self.n r += self.n + 1 max_val = float(\'-inf\') while l < r: if l % 2: max_val = max(max_val, self.tree[l]) l += 1 if r % 2: r -= 1 max_val = max(max_val, self.tree[r]) l //= 2 r //= 2 return max_val def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, l, r, x = query seg_tree.update_range(l - 1, r - 1, x) elif query[0] == 2: _, l, r = query results.append(seg_tree.query(l - 1, r - 1)) return results"},{"question":"Given a string s consisting of lowercase English letters, you need to determine if you can convert it to a palindrome by changing at most one character. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Example 1: Input: s = \\"abca\\" Output: \\"YES\\" Explanation: By changing \'c\' to \'b\', we get the palindrome \\"abba\\". Example 2: Input: s = \\"racecar\\" Output: \\"YES\\" Explanation: The string \\"racecar\\" is already a palindrome. Example 3: Input: s = \\"abcdef\\" Output: \\"NO\\" Explanation: There is no way to convert \\"abcdef\\" to a palindrome by changing only one character. Your Task: You do not need to read input or print anything. Your task is to complete the function canBePalindrome() which takes s as input and returns \\"YES\\" or \\"NO\\". Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s| ≤ 100","solution":"def canBePalindrome(s): Determines if the string can be converted to a palindrome by changing at most one character. Parameters: s (str): The input string. Returns: str: \\"YES\\" if it is possible to convert to a palindrome by changing at most one character, \\"NO\\" otherwise. left, right = 0, len(s) - 1 mismatch_count = 0 while left < right: if s[left] != s[right]: mismatch_count += 1 if mismatch_count > 1: return \\"NO\\" left += 1 right -= 1 return \\"YES\\""},{"question":"You are working as a software engineer for a global navigation company. The company provides services for drivers to find the fastest route between two locations, taking into account traffic congestion. One component of this service involves predicting the minimum driving time between two points on a weighted directed graph, where nodes represent junctions and edges represent road segments with associated travel times. Your task is to implement an algorithm to find the shortest path between two given nodes in a graph. You will be provided with multiple test cases. Each test case will specify the number of junctions, the number of road segments, the start and end junctions, and a list of road segments. Each road segment will indicate the travel time between two junctions. ------Input------ The first line contains a single integer t (1 le t le 100) — the number of test cases. For each test case: 1. The first line contains three integers n, m, and k (2 le n le 300, 1 le m le n^2, 1 le k le n) — the number of junctions, the number of road segments, and the index of the start junction. 2. The second line contains an integer d (1 le d le n) — the index of the end junction. 3. The next m lines describe the road segments. Each line contains three integers u, v, and w (1 le u, v le n, 1 le w le 1000) — indicating a road segment from the junction u to the junction v with travel time w. ------Output------ For each test case, print a single integer — the minimum travel time from the start junction k to the end junction d. If there is no possible path between k and d, print \\"NO PATH\\". ------Example------ Input 2 4 4 1 4 1 2 5 2 3 10 3 4 1 1 3 15 3 4 2 1 1 2 3 2 3 4 Output 16 7 ------Note------ In the first test case, the fastest path from junction 1 to junction 4 is 1 -> 2 -> 3 -> 4 with a total travel time of 5 + 10 + 1 = 16. In the second test case, the fastest path from junction 3 to junction 1 is 3 -> 2 -> 1 with a total travel time of 4 + 3 = 7.","solution":"import heapq import sys def dijkstra(n, edges, start, end): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n + 1)} dist[start] = 0 while pq: current_dist, u = heapq.heappop(pq) if u == end: return current_dist if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return \\"NO PATH\\" def find_shortest_paths(test_cases): results = [] for n, m, k, d, edges in test_cases: result = dijkstra(n, edges, k, d) results.append(result if result != float(\'inf\') else \\"NO PATH\\") return results"},{"question":"A food delivery startup called FoodLabs has multiple meal plans. Each meal plan has a specific number of meals and a daily cost associated with it. The startup wants to provide a discount based on the total number of meals purchased. They will offer a discount based on the following criteria: - If a customer purchases fewer than 10 meals, there is no discount. - If a customer purchases between 10 and 29 meals, they get a discount of 10%. - If a customer purchases 30 or more meals, they get a discount of 20%. Write a program to calculate the total cost for a given number of days and the associated number of meals per day, after applying the appropriate discount. -----Constraints----- - 1 ≤ days ≤ 365 - 1 ≤ meals_per_day ≤ 100 - 1 ≤ cost_per_day ≤ 1000 - days, meals_per_day, and cost_per_day are integers. -----Input----- Input is given from Standard Input in the following format: days meals_per_day cost_per_day -----Output----- Print the total cost after applying the discount. -----Sample Input----- 15 3 200 -----Sample Output----- 8100 Explanation: - Total meals = 15 * 3 = 45 - Since 45 meals are ≥ 30, a 20% discount is applied. - Total cost before discount = 15 * 200 = 3000 - Discounted cost = 3000 * 0.80 = 2400","solution":"def calculate_total_cost(days, meals_per_day, cost_per_day): Calculate the total cost after applying the appropriate discount based on the number of meals purchased. :param days: int - the number of days :param meals_per_day: int - the number of meals per day :param cost_per_day: int - the daily cost :return: float - the total cost after discount total_meals = days * meals_per_day total_cost = days * cost_per_day if total_meals < 10: discount = 0 elif 10 <= total_meals < 30: discount = 0.10 else: discount = 0.20 discounted_cost = total_cost * (1 - discount) return discounted_cost"},{"question":"In a certain city, there is a building with n floors, numbered from 1 to n, where 1 is the ground floor and n is the top floor. The building has an elevator that stops at each floor, one by one. You are currently on floor s and you want to reach floor t. Each floor i has a button, which when pressed, moves the elevator towards floor t at a speed of vi floors per press. Find out the time it takes to reach from floor s to floor t. Input The input consists of three lines: - The first line contains an integer n (2 ≤ n ≤ 100), representing the number of floors in the building. - The second line contains n integers vi (1 ≤ vi ≤ 100), where vi represents the speed of the elevator at the i-th floor (in floors per press). - The third line contains two integers s and t (1 ≤ s < t ≤ n), the starting and the target floors, respectively. Output Print one integer, which is the minimum number of presses required to get from floor s to floor t. Examples Input 5 1 2 3 2 1 1 3 Output 3 Input 4 1 1 1 1 2 4 Output 2","solution":"def min_presses(n, speeds, s, t): Calculate the minimum number of presses required to reach from floor s to floor t. Parameters: n (int): Number of floors. speeds (list of int): Speed of the elevator at each floor. s (int): Starting floor. t (int): Target floor. Returns: int: Minimum number of presses required. presses = 0 for i in range(s, t): presses += speeds[i-1] return presses"},{"question":"Given an array of positive integers and q queries, write a program to find the greatest common divisor (GCD) of the numbers in the range l to r (inclusive) for each query. The queries are provided in an array `queries[]` of size 2*q, where `queries[2*i]` denotes the starting index `l` and `queries[2*i+1]` denotes the ending index `r` for the i-th query (0 ≤ i < q). Example 1: Input : Arr[] = {12, 15, 18, 24, 30}, Q = 2 queries[] = {1, 3, 0, 4} Output : 3 6 Explanation: - Query 1: l = 1 and r = 3 GCD(15, 18, 24) = 3 - Query 2: l = 0 and r = 4 GCD(12, 15, 18, 24, 30) = 3 Example 2: Input : Arr[] = {7, 14, 21}, Q = 1 queries[] = {0, 2} Output : 7 Explanation: - Query 1: l = 0 and r = 2 GCD(7, 14, 21) = 7 Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `findGCD()` that takes an array `arr`, an array of queries `queries`, the size of array `n`, and the size of queries array `2*q`, and returns the array of size `q` which has the answer for all the queries. The driver code takes care of the printing. Expected Time Complexity: O(q * log(n)) Expected Auxiliary Space: O(n) Constraints: 1 ≤ q, n ≤ 10^5 1 ≤ a[i] ≤ 10^3","solution":"import math from typing import List def findGCD(arr: List[int], queries: List[int], n: int, query_length: int) -> List[int]: result = [] q = query_length // 2 for i in range(q): l = queries[2 * i] r = queries[2 * i + 1] gcd = arr[l] for j in range(l + 1, r + 1): gcd = math.gcd(gcd, arr[j]) if gcd == 1: # Early exit since the GCD of 1 with any number is 1 break result.append(gcd) return result"},{"question":"Given a positive integer n, you need to transform n into 1 using the minimum number of operations. You can perform the following operations on n: 1. If n is even, you can divide n by 2. 2. If n is odd, you can either add 1 or subtract 1. Write a function to determine the minimum number of operations required to transform n into 1. Function Signature: ```python def min_operations_to_one(n: int) -> int: pass ``` Input: - A single integer n where 1 leq n leq 10^6. Output: - An integer representing the minimum number of operations required to transform n into 1. Examples: - Input: `8` - Output: `3` Explanation: Transformations needed are 8 -> 4 -> 2 -> 1 (Total of 3 operations). - Input: `7` - Output: `4` Explanation: Transformations needed are 7 -> 6 -> 3 -> 2 -> 1 or 7 -> 8 -> 4 -> 2 -> 1 (Total of 4 operations). - Input: `15` - Output: `5` Explanation: Transformations needed are 15 -> 16 -> 8 -> 4 -> 2 -> 1 (Total of 5 operations). Note: - For each step of the transformation, you can choose the most optimal operation which will reduce the total number of steps needed to reach 1.","solution":"def min_operations_to_one(n: int) -> int: Returns the minimum number of operations required to transform n into 1. if n == 1: return 0 operations = 0 while n != 1: if n % 2 == 0: n //= 2 else: if (n == 3) or ((n - 1) // 2 % 2 == 0): n -= 1 else: n += 1 operations += 1 return operations"},{"question":"You are given a string containing only characters \'I\', \'V\', \'X\', \'L\', \'C\', \'D\', and \'M\', representing a Roman numeral. Your task is to convert this Roman numeral into its corresponding integer value. The Roman numeral system rules are as follows: - I (1), V (5), X (10), L (50), C (100), D (500), M (1000) - If a smaller numeral appears before a larger one, you subtract the smaller one (e.g., IV = 4) - If a smaller numeral appears after a larger or equal one, you add the smaller one (e.g., VI = 6) Write a function `roman_to_integer(roman: str) -> int` that takes a string representing a Roman numeral and returns the integer it represents. -----Input----- - A single Roman numeral string `roman` (1 ≤ len(roman) ≤ 15). The input will be a valid Roman numeral up to the value of 3999. -----Output----- - An integer that is the decimal representation of the Roman numeral string. -----Examples----- Input: \\"III\\" Output: 3 Input: \\"IX\\" Output: 9 Input: \\"MCMXCIV\\" Output: 1994","solution":"def roman_to_integer(roman: str) -> int: roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(roman): current_value = roman_values[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Design a function which takes an m x n matrix filled with non-negative integers and returns the number of unique paths from the top-left corner to the bottom-right corner of the matrix. You can only move either down or right at any point in time. Write a function: ```python def unique_paths(m: int, n: int) -> int: ``` # Parameters: - ```m```: An integer, the number of rows in the matrix (1 <= m <= 100). - ```n```: An integer, the number of columns in the matrix (1 <= n <= 100). # Output: - Returns an integer, the number of unique paths from the top-left corner to the bottom-right corner of the matrix. # Examples: ```python unique_paths(2, 2) # return 2 (Down->Right, Right->Down) unique_paths(3, 2) # return 3 (Down->Down->Right, Down->Right -> Down, Right->Down->Down) unique_paths(3, 7) # return 28 unique_paths(7, 3) # return 28 unique_paths(1, 1) # return 1 ``` # Notes: - Consider using dynamic programming to find an efficient solution to this problem. - Factorial calculation could help find the number of combinations in a straightforward approach (i.e., combinations formula).","solution":"def unique_paths(m: int, n: int) -> int: Calculate the number of unique paths in an m x n matrix from the top-left corner to the bottom-right corner, moving only right or down. :param m: Number of rows :param n: Number of columns :return: Number of unique paths # using dynamic programming to solve the problem # Create a 2D list (m x n) filled with 1s because there\'s only one way to reach cells in the first row and first column dp = [[1] * n for _ in range(m)] # Calculate paths for each cell in the matrix for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i-1][j] + dp[i][j-1] # The bottom-right corner will have the number of unique paths return dp[-1][-1]"},{"question":"Alice is a keen gardener and has decided to create a special section in her garden where she plants flowers in a rectangular grid. She wants the garden to look as pleasing as possible, so she has decided to ensure that no two adjacent flowers (horizontally or vertically) in the grid can be of the same type. Given the number of rows and columns of the garden grid, and the different types of flowers she has, your task is to find one possible arrangement of the flowers in the grid that meets Alice\'s requirements. Input The first line of the input contains an integer t (1 ≤ t ≤ 10), the number of test cases. Each test case consists of two integers r and c (1 ≤ r, c ≤ 100), the number of rows and columns in the garden grid, followed by an integer f (1 ≤ f ≤ 26), the number of different flower types. The types are represented by the first f uppercase English letters. Output For each test case, output the resulting grid such that no two adjacent flowers are of the same type. If it is impossible to arrange the flowers in such a manner, output \\"Impossible\\". Example Input: 2 3 3 3 2 2 2 Output: ABC BCA CAB AB BA Notes: - You can assume there will always be enough flower types for the given dimensions. - If there are multiple possible arrangements, you can output any of them.","solution":"def arrange_flowers(t, test_cases): results = [] for case in test_cases: r, c, f = case if f < 2 and (r > 1 or c > 1): results.append(\\"Impossible\\") continue # Create grid grid = [[\'\' for _ in range(c)] for _ in range(r)] flowers = [chr(i) for i in range(65, 65 + f)] # Fill grid for i in range(r): for j in range(c): grid[i][j] = flowers[(i + j) % f] results.append(\\"n\\".join([\\"\\".join(row) for row in grid])) return results # Example usage and input t = 2 test_cases = [ (3, 3, 3), # 3x3 grid with 3 different flowers (2, 2, 2), # 2x2 grid with 2 different flowers ] result = arrange_flowers(t, test_cases) for res in result: print(res)"},{"question":"In a programming contest, participants receive scores based on their performance in different problems. A participant\'s total score is the sum of their scores in all problems they attempted. However, the contest organizers consider the participants\' performance across recent contests as well. You are given scores of M participants over the last K contests. Each participant’s performance is represented as a list of K integers, where each integer denotes the total score of the participant in a particular contest. The participants are ranked based on their overall performance across all K contests. For each participant, you need to calculate how many other participants have a higher total score than them. If two participants have the same total score, they are considered equally ranked. Input: - The first line contains two integers M and K (1 ≤ M, K ≤ 1000), the number of participants and the number of contests, respectively. - The next M lines contain K integers each, where the j-th integer on the i-th line represents the score of the i-th participant in the j-th contest. Output: - Output M lines where the ith line contains one integer - the number of participants who have a higher total score than the i-th participant. Constraints: 1 ≤ scores ≤ 1000 Example: Input: 3 2 100 200 150 150 200 100 Output: 1 2 0 Explanation: The total scores for the participants are: 1. 100 + 200 = 300 2. 150 + 150 = 300 3. 200 + 100 = 300 All participants have an equal total score of 300. Each participant is considered to have 0 participants with a higher total score than themselves.","solution":"def count_higher_scores(M, K, scores): Given the number of participants M, the number of contests K, and a list of scores for each participant across K contests, this function returns a list where the ith element represents the number of participants who have a higher total score than the ith participant. :param M: int, number of participants :param K: int, number of contests :param scores: List of List of int, scores of participants in each contest :return: List of int, number of participants with higher total scores for each participant total_scores = [sum(participant_scores) for participant_scores in scores] rank_counts = [0] * M for i in range(M): for j in range(M): if total_scores[j] > total_scores[i]: rank_counts[i] += 1 return rank_counts # Example usage: # M = 3 # K = 2 # scores = [ # [100, 200], # [150, 150], # [200, 100] # ] # print(count_higher_scores(M, K, scores)) # Output: [2, 2, 2]"},{"question":"Date Formatter Introduction You work for a company that maintains a large database of event records, each with a date that must be stored in a specific format. Your manager has asked you to create a utility function to format dates for the events based on a given format string. Task Write a function `format_date(date, format)` that accepts two required arguments: - `date` which is a string in the format \\"YYYY-MM-DD\\" - `format` which is a string that can contain one or more placeholders from the set {YYYY, MM, DD} The function should return the date formatted according to the given format string, replacing placeholders with the appropriate parts of the date. The placeholders are: - `YYYY` - 4-digit year - `MM` - 2-digit month - `DD` - 2-digit day Examples ```python format_date(\\"2023-10-30\\", \\"MM/DD/YYYY\\") -> \\"10/30/2023\\" format_date(\\"2023-10-30\\", \\"DD-MM-YYYY\\") -> \\"30-10-2023\\" format_date(\\"2023-10-30\\", \\"YYYY.MM.DD\\") -> \\"2023.10.30\\" format_date(\\"2023-10-30\\", \\"DD/MM\\") -> \\"30/10\\" format_date(\\"2023-10-30\\", \\"Month: MM, Year: YYYY\\") -> \\"Month: 10, Year: 2023\\" ``` Note: You can assume the date will always be a valid string in the \\"YYYY-MM-DD\\" format and the format string will only contain valid placeholders and separators.","solution":"def format_date(date, format): Formats the date according to the given format string. :param date: a string in the format \\"YYYY-MM-DD\\" :param format: a string containing placeholders {YYYY, MM, DD} :return: the date formatted according to the format string year, month, day = date.split(\\"-\\") formatted_date = format.replace(\\"YYYY\\", year).replace(\\"MM\\", month).replace(\\"DD\\", day) return formatted_date"},{"question":"You are given an integer array nums sorted in non-decreasing order. Build and return an integer array result with the property result[i] being the square of nums[i], and the resulting array result must also be sorted in non-decreasing order. Example 1: Input: nums = [-4, -1, 0, 3, 10] Output: [0, 1, 9, 16, 100] Explanation: After squaring, the array becomes [16, 1, 0, 9, 100]. After sorting, it becomes [0, 1, 9, 16, 100]. Example 2: Input: nums = [-7, -3, 2, 3, 11] Output: [4, 9, 9, 49, 121] Your Task: You don\'t need to read input or print anything. Your task is to complete the function sortedSquares() which takes an integer array as input and returns the squared and sorted array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) (with the exception of the output array) Constraints: 1 <= nums.length <= 10^4 -10^4 <= nums[i] <= 10^4 The array is sorted in non-decreasing order.","solution":"def sortedSquares(nums): Given an integer array nums sorted in non-decreasing order, this function returns an integer array result with the property result[i] being the square of nums[i], where the array result is sorted in non-decreasing order. left = 0 right = len(nums) - 1 result = [0] * len(nums) position = right while left <= right: left_square = nums[left] * nums[left] right_square = nums[right] * nums[right] if left_square > right_square: result[position] = left_square left += 1 else: result[position] = right_square right -= 1 position -= 1 return result"},{"question":"John is organizing a party, and he wants to send out invitation cards. Each card has a unique serial number that consists of exactly 4 uppercase English letters. How many different serial numbers can John generate if the letters on each card must be in lexicographical order? ----Constraints---- - All 4 letters on each card must be unique and sorted in ascending order. - You may assume a standard English alphabet with 26 letters (A-Z). ----Input---- There is no input for this problem. ----Output---- Print the number of possible unique serial numbers. ----Sample Output---- 14950","solution":"import math def count_serial_numbers(): Returns the total number of unique serial numbers that can be generated, where each serial number consists of exactly 4 unique uppercase English letters in lexicographical order. # Number of ways to choose 4 letters from 26 letters return math.comb(26, 4) # Printing the result to directly demonstrate the output print(count_serial_numbers())"},{"question":"Mary is an avid puzzle enthusiast. She recently stumbled upon a problem involving permutations of a string and has been trying to figure out a way to count how many permutations of the string are palindromes. She now seeks your help in writing a program that can solve this efficiently. Note: Only Python language is allowed. Input Format The first line consists of the number of test cases T. Each of the following T lines thereafter comprises a single string S. Output Format For each of the T lines, print an integer P. Here, P is the number of palindromic permutations of the string S. Constraints 1 ≤ T ≤ 10^5 1 ≤ |S| ≤ 18 SAMPLE INPUT 3 aabb abc aaa SAMPLE OUTPUT 2 0 1 Explanation For the string \\"aabb\\", the possible palindromic permutations are \\"abba\\" and \\"baab\\", hence the output is 2. For the string \\"abc\\", there are no palindromic permutations, hence the output is 0. For the string \\"aaa\\", the only possible palindromic permutation is \\"aaa\\", hence the output is 1. Note: A permutation is considered a palindrome if it reads the same forward and backward.","solution":"import math from collections import Counter def count_palindromic_permutations(s): # Count frequency of each character freq = Counter(s) # Check number of odd frequency characters odd_count = sum(1 for count in freq.values() if count % 2 != 0) # More than one character with odd frequency means no palindromic permutation if odd_count > 1: return 0 # Calculate the number of palindromic permutations half_len = sum(count // 2 for count in freq.values()) freq_half = [count // 2 for count in freq.values()] numerator = math.factorial(half_len) denominator = math.prod(math.factorial(x) for x in freq_half) return numerator // denominator def palindromic_permutations_for_strings(strings): return [count_palindromic_permutations(s) for s in strings]"},{"question":"Given an array consisting of N positive integers, where each integer represents the height of a building, and an additional integer K representing the number of ladders you have. You need to climb the buildings in sequence from the first to the last. You can either jump from one building to the next if the next building is not higher, or you can use a ladder to climb up to the next building if it\'s higher. However, you can jump down without any restriction. Write a function to determine the minimum number of ladders needed to climb to the last building. Example 1: Input: N = 5 arr[] = {1, 5, 2, 6, 4} K = 2 Output: 1 Explanation: You can use one ladder to climb from building 1 to building 2, and another ladder to climb from building 3 to building 4. You will have one ladder remaining. Example 2: Input: N = 4 arr[] = {1, 2, 3, 4} K = 2 Output: 2 Explanation: You need one ladder to climb from building 1 to building 2, and another ladder to climb from building 2 to building 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minLadders() which takes integers array arr[], its size N, and K as inputs and returns the minimum number of ladders needed to climb all the buildings. Expected Time Complexity: O(N log k). Expected Auxiliary Space: O(k). Constraints: 1 <= N <= 10^5 1 <= arr[i] <= 10^4 1 <= K <= N","solution":"def minLadders(N, arr, K): import heapq if N == 1: return 0 # Max-Heap to store the largest jumps where we used ladders used_ladders = [] ladder_count = 0 for i in range(N - 1): if arr[i] < arr[i + 1]: # Calculate the jump jump = arr[i + 1] - arr[i] # Always use ladder heapq.heappush(used_ladders, -jump) ladder_count += 1 if ladder_count > K: # We have used more ladders than allowed # Remove the largest ladder used and climb down largest_jump = -heapq.heappop(used_ladders) ladder_count -= 1 return ladder_count"},{"question":"Adam is a computer security analyst who works regularly with honey tokens to detect unauthorized access. A honey token is a unique identifier placed on files, documents, or other pieces of information to help track unauthorized access and identify potential security breaches. Adam is using a grid-based model to place these honey tokens and monitor access events. The grid is of size 500 x 500. Each cell in the grid represents a unique location where a honey token can be placed. There are K access events that indicate when someone has accessed a file at a specific location in the grid. The i-th access event is located at cell (X_i, Y_i) at time T_i. Adam wants to analyze the grid to ensure that each unique honey token is accessed at most once. Given the access events, Adam needs to determine whether there are any duplicate accesses to the same honey token, which means that the same cell has access events at different times. Input The first line contains an integer K (1 ≤ K ≤ 2 ⋅ 10^4), the number of access events. The next K lines each contain three integers X_i, Y_i, and T_i (1 ≤ X_i, Y_i ≤ 500, 0 ≤ T_i ≤ 10^6), representing the coordinates of the cell and the time of access event. Output Output \\"DUPLICATE\\" if any honey token is accessed more than once, otherwise, output \\"UNIQUE\\". Example Input 5 1 1 100 2 2 200 1 1 300 3 3 400 4 4 500 Output DUPLICATE Input 4 1 1 100 2 2 200 3 3 300 4 4 400 Output UNIQUE Note In the first example, the honey token at cell (1, 1) is accessed at two different times (100 and 300), so the output is \\"DUPLICATE\\". In the second example, all honey tokens are accessed only once, so the output is \\"UNIQUE\\".","solution":"def check_access_events(k, events): Checks if there are any duplicate accesses to the same honey token. Args: k : int : Number of access events events : list of tuples : List of tuples where each tuple contains three integers (X_i, Y_i, T_i) representing the coordinates of the cell and the time of access event. Returns: str : \\"DUPLICATE\\" if any honey token is accessed more than once, otherwise \\"UNIQUE\\" seen = set() for x, y, t in events: if (x, y) in seen: return \\"DUPLICATE\\" seen.add((x, y)) return \\"UNIQUE\\""},{"question":"Given a Binary Search Tree (BST), write a function to find the lowest common ancestor (LCA) of two given nodes in the BST. The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself). Example 1: Input: 6 / 2 8 / / 0 4 7 9 / 3 5 p = 2, q = 8 Output: 6 Example 2: Input: 6 / 2 8 / / 0 4 7 9 / 3 5 p = 2, q = 4 Output: 2 Constraints: 1<=Number of Nodes<=1000 0 <= Data of a node <= 10^{6} Your Task: You don\'t need to take input. Just complete the function lowestCommonAncestor() that takes root node and two node values p and q as parameters and returns the value of their lowest common ancestor.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def lowestCommonAncestor(root, p, q): Finds the lowest common ancestor (LCA) of two nodes in a BST. Parameters: root (TreeNode): The root of the binary search tree. p (int): Value of the first node. q (int): Value of the second node. Returns: int: Value of the LCA node. current = root while current: if p < current.val and q < current.val: current = current.left elif p > current.val and q > current.val: current = current.right else: return current.val return None # Just in case there\'s no valid LCA which shouldn\'t happen as per input constraints"},{"question":"Given a binary tree, return the number of paths where the sum of the node values along the path equals a given target sum. The path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes). Example 1: Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8 Output: 3 Explanation: The paths that sum to 8 are: 1. 5 -> 3 2. 5 -> 2 -> 1 3. -3 -> 11 Example 2: Input: root = [1,null,2,null,3,null,4,null,5], targetSum = 3 Output: 2 Explanation: The paths that sum to 3 are: 1. 1 -> 2 2. 3 Constraints: The number of nodes in the tree is in the range [0, 1000]. -10^9 <= Node.val <= 10^9 -10^9 <= targetSum <= 10^9","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def pathSum(root, targetSum): def dfs(node, curr_path): if not node: return 0 # Add current node\'s value to the path curr_path.append(node.val) path_count, path_sum = 0, 0 # Check if there are any paths that sum to targetSum for val in reversed(curr_path): path_sum += val if path_sum == targetSum: path_count += 1 # Traverse left and right subtrees path_count += dfs(node.left, curr_path) path_count += dfs(node.right, curr_path) # Remove current node\'s value from the path curr_path.pop() return path_count return dfs(root, []) # Helper function to build a tree from a list def build_tree(values): if not values: return None nodes = [None if value is None else TreeNode(value) for value in values] kids = nodes[::-1] root = kids.pop() for node in nodes: if node: if kids: node.left = kids.pop() if kids: node.right = kids.pop() return root"},{"question":"In a game, there is a grid with n rows and m columns. Initially, all the cells in the grid are empty. Two players take turns placing tokens in the grid, with Player 1 always starting first. The players place tokens according to the following rules: 1. A token can be placed on an empty cell if and only if no tokens are placed in the cells directly adjacent to that cell (left, right, above, below). 2. Players cannot place tokens on cells where a token violates the adjacency rule. 3. The game continues until no more tokens can be placed on the grid. A player loses if they cannot place a token on their turn. Given the size of the grid, determine which player will win if both play optimally. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. Output For each test case, print \\"Player 1\\" if the first player will win when both play optimally and \\"Player 2\\" otherwise. Examples Input 2 2 2 3 3 Output Player 2 Player 1 Note In the first example, with a 2x2 grid, Player 1 places a token in one of the corners. Player 2 then places a token in one of the remaining, diagonally opposite corners. No more tokens can be placed, and Player 1 loses. In the second example, with a 3x3 grid, Player 1 places a token in the center. No matter how Player 2 places their token, there will always be more moves for Player 1, leading to Player 2 losing.","solution":"def determine_winner(t, test_cases): Determines the winner of the game for each test case. Args: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers n and m representing the grid dimensions. Returns: list of str: \\"Player 1\\" or \\"Player 2\\" for each test case. results = [] for n, m in test_cases: if (n % 2 == 1) or (m % 2 == 1): results.append(\\"Player 1\\") else: results.append(\\"Player 2\\") return results"},{"question":"You are given a string S consisting of only lowercase alphabets and an integer K. Your task is to determine if the string S can be partitioned into K substrings such that each substring is a palindrome. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Note: A palindrome is a string that reads the same backward as forward. Example 1: Input: S = \\"aabb\\", K = 2 Output: YES Explanation: We can partition the string into \\"aa\\" and \\"bb\\". Both substrings are palindromes. Example 2: Input: S = \\"abc\\", K = 2 Output: NO Explanation: It is not possible to partition the string into 2 palindromic substrings. Example 3: Input: S = \\"aaa\\", K = 3 Output: YES Explanation: We can partition the string into \\"a\\", \\"a\\", and \\"a\\". All substrings are palindromes. Your Task: You don\'t need to read input or print anything. Your task is to complete the function canPartition() which takes the string S and integer K as inputs and returns \\"YES\\" if the partitioning is possible, otherwise returns \\"NO\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ N","solution":"def canPartition(S, K): Determines if the string S can be partitioned into K palindromic substrings. from collections import Counter # Check the length constraint if K > len(S): return \\"NO\\" # Count the occurrences for each character in the string counter = Counter(S) # Count the number of characters that have odd occurrences odd_count = sum(1 for count in counter.values() if count % 2 != 0) # It\'s only possible to have K palindromic substrings if the number of odd counts is at most K if odd_count > K: return \\"NO\\" return \\"YES\\""},{"question":"You are given a sequence of positive integers. Your task is to find the length of the longest contiguous subsequence where the difference between the minimum and the maximum elements in the subsequence is less than or equal to a given value K. -----Constraints----- - All values in the input are integers. - 1 leq K leq 10^5 - 1 leq N leq 10^5 - 1 leq a_i leq 10^9 (where a_i is the i-th element of the sequence) -----Input----- Input is given from Standard Input in the following format: N K a1 a2 ... aN -----Output----- Print the length of the longest contiguous subsequence where the difference between the minimum and the maximum elements is less than or equal to K. -----Sample Input----- 6 3 1 3 6 7 9 10 -----Sample Output----- 3 The longest contiguous subsequence where the difference between the minimum and the maximum elements is less than or equal to 3 is {1, 3, 6} or {7, 9, 10}, both of which have a length of 3.","solution":"def longest_contiguous_subsequence(N, K, array): Returns the length of the longest contiguous subsequence where the difference between the minimum and maximum elements is less than or equal to K. max_len = 0 start = 0 for end in range(N): sub_array = array[start:end+1] # Get the current subsequence from start to end if max(sub_array) - min(sub_array) <= K: max_len = max(max_len, end - start + 1) else: while max(array[start:end+1]) - min(array[start:end+1]) > K: start += 1 return max_len"},{"question":"You are given a list of n distinct integers, and you need to determine if there is a subset of these integers whose sum is equal to a target value t. If such a subset exists, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line of the input contains two integers n and t (1 ≤ n ≤ 20, 1 ≤ t ≤ 1000). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), representing the list of distinct integers. -----Output----- Print \\"YES\\" if there is a subset of the given integers whose sum equals the target value t. Otherwise, print \\"NO\\". -----Examples----- Input 4 10 1 2 3 4 Output YES Input 3 7 3 1 2 Output NO -----Note----- In the first test sample, choosing the subset {1, 2, 3, 4} forms the sum 10, which is equal to the target value t. In the second test sample, no subset of {3, 1, 2} can form the sum 7.","solution":"def subset_sum_exists(n, t, integers): Determine if there is a subset of `integers` whose sum equals `t`. :param n: Number of integers :param t: Target sum :param integers: List of n distinct integers :return: \\"YES\\" if such a subset exists, otherwise \\"NO\\" # Utilizing a dynamic programming approach to solve the subset sum problem dp = [False] * (t + 1) dp[0] = True # There is always a subset with sum 0, the empty subset for num in integers: for i in range(t, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[t] else \\"NO\\""},{"question":"In a small village, there is a long, narrow river that villagers need to cross to move between different parts of the village. The river has several fixed-width wooden planks laid across it at various positions. Each plank can be thought of as a horizontal line segment extending from one bank to the other. However, the planks are not infinitely long; they only extend a certain distance out from one bank, leaving gaps between planks where villagers can fall into the river. Villagers want to cross the river safely using the planks without falling into gaps. Given the positions and lengths of the planks and the starting and destination points of a villager, determine if it is possible for the villager to cross the river safely. Represent the plank positions as a set of intervals on the x-axis, and the villagers as a starting x-coordinate and a destination x-coordinate. Your task is to determine if the villager can move from the start to the destination without falling into a gap between the planks. If the villager can cross the river without falling into a gap between the planks, output Safe; otherwise, output Danger. Input The input consists of multiple datasets. Each dataset is given in the following format: n lx1 ly1 lx2 ly2 :: lxn lyn m sx1 dx1 sx2 dx2 :: sxm dxm The first line of each dataset contains an integer n (0 ≤ n ≤ 100), the number of planks across the river. Each of the following n lines contains two integers lx and ly (0 ≤ lx < ly ≤ 255) representing the start and end points of each plank on the x-axis. The next line contains an integer m (m ≤ 100), the number of villagers trying to cross the river. Each of the following m lines contains two integers sxi and dxi (0 ≤ sxi, dxi ≤ 255) representing the starting and destination points of the i-th villager. The end of input is indicated by n = 0. Output For each villager in each dataset, output Safe if the villager can cross the river without falling into a gap between the planks; otherwise, output Danger. Example Input 3 1 5 6 10 12 15 4 0 4 3 9 7 13 10 14 0 Output Safe Safe Danger Danger","solution":"def can_cross(planks, s, d): Determine if a villager can move from the start to the destination without falling into a gap between the planks. Parameters: planks: List of tuples representing the planks as (start, end) s: Starting point of the villager d: Destination point of the villager Returns: \\"Safe\\" if the villager can cross without falling into a gap, \\"Danger\\" otherwise if not planks: return \\"Danger\\" # Sort and merge planks intervals planks.sort() merged_planks = [planks[0]] for current in planks[1:]: last = merged_planks[-1] if current[0] <= last[1]: merged_planks[-1] = (last[0], max(last[1], current[1])) else: merged_planks.append(current) # Check if the entire path from s to d is covered by planks for start, end in merged_planks: if start <= s <= end and start <= d <= end: return \\"Safe\\" return \\"Danger\\" def process_input(data): Process the input data to determine if villagers can cross the river. Parameters: data: List of strings representing the input data Returns: List of strings representing the output for each villager results = [] index = 0 while index < len(data): n = int(data[index].strip()) if n == 0: break index += 1 planks = [] for i in range(n): lx, ly = map(int, data[index].strip().split()) planks.append((lx, ly)) index += 1 m = int(data[index].strip()) index += 1 for i in range(m): sx, dx = map(int, data[index].strip().split()) result = can_cross(planks, sx, dx) results.append(result) index += 1 return results"},{"question":"Rotating a 2D Matrix Given a 2D matrix `M` of size `N x N`, rotate the matrix 90 degrees clockwise. **Input Format** - The first line contains an integer `N`, the size of the 2D matrix. - The next `N` lines contain `N` space-separated integers, representing the elements of the matrix row by row. **Constraints** - 1 leq N leq 100 - -1000 leq M[i][j] leq 1000 **Output Format** - Print the `N x N` matrix after rotating it 90 degrees clockwise. **Sample Input** ``` 3 1 2 3 4 5 6 7 8 9 ``` **Sample Output** ``` 7 4 1 8 5 2 9 6 3 ``` **Explanation** To rotate the given matrix 90 degrees clockwise: Original Matrix: ``` 1 2 3 4 5 6 7 8 9 ``` Rotated Matrix: ``` 7 4 1 8 5 2 9 6 3 ``` To achieve this, we can first transpose the matrix, swapping rows with columns, and then reverse each row to get the desired result.","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given N x N matrix 90 degrees clockwise. :param matrix: list of lists, where each sublist represents a matrix row. :return: rotated matrix. N = len(matrix) # Step 1: Transpose the matrix transposed_matrix = [[matrix[j][i] for j in range(N)] for i in range(N)] # Step 2: Reverse each row in transposed matrix rotated_matrix = [row[::-1] for row in transposed_matrix] return rotated_matrix"},{"question":"A group of friends is planning a gathering where they need to ensure that all participants can directly communicate with each other. To help them figure out the arrangement, they need a program that identifies all the strongly connected components (SCCs) in a given directed graph of friendships, where each node represents a person and each directed edge indicates that a person can communicate with another directly. A strongly connected component (SCC) is a subgraph in which every vertex is reachable from every other vertex in the subgraph. Your task is to write a program that takes as input the number of people, the number of direct communication paths, and the paths themselves, and then outputs the number of strongly connected components in the given graph. -----Input----- The first line contains two integers N and M, where N is the number of people (nodes) and M is the number of direct communication paths (edges). The next M lines each contain two integers u and v, representing a direct communication path from person u to person v. 1 <= N <= 100000 0 <= M <= 200000 1 <= u, v <= N -----Output----- Output a single integer indicating the number of strongly connected components in the graph. -----Example----- Input: 5 5 1 2 2 3 3 1 3 4 4 5 Output: 3 Explanation: There are 3 strongly connected components in the graph: 1) {1, 2, 3} - Every person in this group can communicate directly or indirectly with each other. 2) {4} - Person 4 cannot directly communicate back with any other person. 3) {5} - Person 5 cannot directly communicate back with any other person.","solution":"from collections import defaultdict, deque def find_sccs(n, m, connections): def dfs1(v): visited[v] = True for u in adj[v]: if not visited[u]: dfs1(u) order.append(v) def dfs2(v): visited[v] = True component.append(v) for u in adj_rev[v]: if not visited[u]: dfs2(u) # Build graph and reverse graph adj = defaultdict(list) adj_rev = defaultdict(list) for u, v in connections: adj[u].append(v) adj_rev[v].append(u) # First pass: record the finishing order of the nodes visited = [False] * (n + 1) order = [] for i in range(1, n + 1): if not visited[i]: dfs1(i) # Second pass: reverse graph DFS according to finishing order visited = [False] * (n + 1) scc_count = 0 while order: v = order.pop() if not visited[v]: component = [] dfs2(v) scc_count += 1 return scc_count"},{"question":"Karan has embarked on a new adventure and stumbled upon the Fibonacci sequence. He wants to find out the number of elements in the sequence up to a given integer `N`. Help Karan by writing a program that outputs the Fibonacci sequence until the last number before `N`. Input: An integer `N` (2 ≤ N ≤ 10^18). Output: Print the Fibonacci sequence numbers, each in a new line, that are less than `N`. Constraints: Ensure the sequence doesn\'t include any number greater than or equal to `N`. SAMPLE INPUT 10 SAMPLE OUTPUT 0 1 1 2 3 5 8","solution":"def fibonacci_upto_n(N): Returns the Fibonacci sequence numbers less than N. sequence = [] a, b = 0, 1 while a < N: sequence.append(a) a, b = b, a + b return sequence"},{"question":"The city of Geekville is laid out in a perfect square grid, with `M` rows and `M` columns. Geekville is famous for its beautiful, large public gardens, but unfortunately, building these gardens has become a complex task. Each garden must form a perfect square, and due to various regulations, a garden can be connected only through its north, south, east, or west sides. Geekville\'s council wants to know how many such unique square gardens can be fit in the city. Each garden should start from a cell in the grid and can extend outwards, but still needs to remain within the boundaries of the grid. Considering the large size of the city, the council needs your help to calculate the number of possible gardens. Return the result modulo 1000000007. -----Input:----- - The first line of the input contains `T`, the number of test cases. - The next `T` lines of input contain one integer `M`. -----Output:----- For each test case, output the number of possible unique square gardens modulo 1000000007. -----Constraints:----- - 1 ≤ `T` ≤ 5 - 1 ≤ `M` ≤ 10^9 -----Sample Input:----- 2 2 3 -----Sample Output:----- 5 14 Explanation: For the first test case with `M=2`, we can have gardens of sizes: - 1x1: 4 (each cell can be a garden) - 2x2: 1 (the entire grid is a 2x2 garden) So, total unique gardens = 5 For the second test case with `M=3`, we can have gardens of sizes: - 1x1: 9 (each cell can be a garden) - 2x2: 4 (each 2x2 segment within the 3x3 grid) - 3x3: 1 (the entire grid is a 3x3 garden) So, total unique gardens = 14","solution":"def count_unique_square_gardens(M): MOD = 1000000007 total_squares = 0 # Sum the number of squares of different sizes that can fit within an MxM grid for size in range(1, M+1): total_squares += (M - size + 1) ** 2 total_squares %= MOD return total_squares def unique_square_gardens(t, cases): results = [] for case in cases: results.append(count_unique_square_gardens(case)) return results"},{"question":"Build a Quiz Game using the following guidelines: You will be provided with a list of questions and answers. Your task is to build a command-line quiz game where the user is asked each question in turn and the program records whether the user\'s answer was correct or incorrect. At the end of the quiz, display the total number of correct answers. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of questions in the quiz. Each of the next n lines contains a string question and an answer string separated by a comma. Output Output the results of each question in the following format: \\"Question x: Correct\\" or \\"Question x: Incorrect\\", where x is the question number starting from 1. After all questions have been asked, print \\"You got y out of n correct!\\", where y is the number of correct answers and n is the total number of questions. Example Input 3 What is the capital of France?,Paris What is 2+2?,4 Who wrote \'Hamlet\'?,Shakespeare Output You got 2 out of 3 correct! Note The program assumes the user will type their answers exactly as they appear in the input. The game should be case-sensitive and exact-match for answers. Additionally, handle input and output strictly via the command line interface.","solution":"def run_quiz(questions_and_answers): Runs a quiz game based on a list of (question, answer) tuples. num_correct = 0 for i, (question, answer) in enumerate(questions_and_answers): user_answer = input(f\\"Question {i + 1}: {question} \\") if user_answer == answer: print(f\\"Question {i + 1}: Correct\\") num_correct += 1 else: print(f\\"Question {i + 1}: Incorrect\\") print(f\\"You got {num_correct} out of {len(questions_and_answers)} correct!\\") def parse_input(input_data): Parses the input data to extract the number of questions and a list of (question, answer) tuples. lines = input_data.strip().split(\'n\') n = int(lines[0]) questions_and_answers = [tuple(line.split(\',\')) for line in lines[1:n + 1]] return questions_and_answers"},{"question":"You are given an integer array and a range specified by two integer values. Your task is to determine the length of the longest contiguous subarray within the given range that does not contain any repeated elements. -----Input----- The first line contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) — the elements of the array. The third line contains two integers l and r (-10^9 le l le r le 10^9) — defining the range within which we want to find the subarray. -----Output----- Print a single integer — the length of the longest contiguous subarray within the range [l, r] that does not contain any repeated elements. -----Examples----- Input 10 4 5 2 5 6 2 3 4 1 6 2 5 Output 3 Input 6 1 2 3 1 2 3 1 3 Output 3 -----Note----- In the first example, the subarray [2, 5, 6] is the longest contiguous subarray within the specified range [2, 5] that does not contain any repeated elements. The length of this subarray is 3. In the second example, the subarray [1, 2, 3] is the longest contiguous subarray within the specified range [1, 3] that does not contain any repeated elements. The length of this subarray is 3.","solution":"def longest_unique_subarray_in_range(arr, l, r): Returns the length of the longest contiguous subarray within the range [l, r] that does not contain any repeated elements. n = len(arr) left, right = 0, 0 max_len = 0 seen = {} while right < n: if l <= arr[right] <= r: if arr[right] in seen and seen[arr[right]] >= left: left = seen[arr[right]] + 1 seen[arr[right]] = right max_len = max(max_len, right - left + 1) else: left = right + 1 seen = {} right += 1 return max_len"},{"question":"We have an array of N elements where each element represents the age of a person in a community. Write a function to determine the number of people whose age is both greater than a given X and a prime number. Constraints * All values in input are integers. * 1 leq N leq 100 * 1 leq age_i leq 100 * 1 leq X leq 100 Input Input is given from Standard Input in the following format: N X age_1 age_2 cdots age_N Output Print the number of ages that satisfy both of the conditions. Examples Input 6 10 11 14 17 18 19 21 Output 3 Input 5 20 22 23 24 29 30 Output 2","solution":"import math def is_prime(n): Helper function to check if a number is prime. if n <= 1: return False if n == 2: return True # 2 is the only even prime number if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def count_prime_ages_greater_than_x(N, X, ages): Counts the number of ages that are both greater than X and prime numbers. prime_ages_count = 0 for age in ages: if age > X and is_prime(age): prime_ages_count += 1 return prime_ages_count # Input and output handling if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) X = int(data[1]) ages = list(map(int, data[2:2 + N])) result = count_prime_ages_greater_than_x(N, X, ages) print(result)"},{"question":"A well-known programmer, Alice, has been working on a challenging problem related to gene sequences. Alice wants to find all possible unique subsequences of a given gene sequence, which are valid according to a given list of valid subsequences. A valid subsequence is one that appears in the gene\'s dictionary of valid subsequences. You need to help Alice by writing a program that generates all unique valid subsequences from the gene sequence. # Input The input consists of the following: - The first line contains a single integer `n` (1 ≤ n ≤ 20), which represents the length of the gene sequence. - The second line contains a string of lowercase English letters, representing the gene sequence. - The third line contains a single integer `m` (1 ≤ m ≤ 100), which represents the number of valid subsequences in the gene\'s dictionary. - The next `m` lines each contain a valid subsequence from the dictionary. # Output Print all unique valid subsequences found in the gene sequence, each on a new line. The subsequences should be printed in lexicographical order. # Examples Input: ``` 4 abac 3 ab ac bc ``` Output: ``` ab ac bc ``` Input: ``` 5 abcde 5 abc ace bcd de abcde ``` Output: ``` abc abcde ace bcd de ``` # Note In the first example, we find \\"ab\\", \\"ac\\", and \\"bc\\" as valid subsequences from the given gene sequence `abac`. They all appear in the dictionary and hence they are included in the output. In the second example, the valid subsequences extracted from `abcde` that appear in the dictionary are \\"abc\\", \\"ace\\", \\"bcd\\", \\"de\\", and \\"abcde\\". Subsequences must be derived without reordering characters, only by deleting some characters from the input string. Each subsequence should appear exactly as it is stored in the dictionary.","solution":"def find_unique_valid_subsequences(n, gene_seq, m, valid_subsequences): Given a gene sequence and a list of valid subsequences, this function finds all unique valid subsequences present in the gene sequence and sorts them lexicographically. :param n: int - the length of the gene sequence :param gene_seq: str - the gene sequence :param m: int - the number of valid subsequences :param valid_subsequences: list of str - the valid subsequences :return: list of str - the unique valid subsequences found in the gene sequence # Convert the list of valid subsequences to a set for quick lookup valid_set = set(valid_subsequences) def is_valid_subsequence(seq, sub): Helper function to check if sub is a subsequence of seq. it = iter(seq) return all(char in it for char in sub) # Prepare the output list valid_found = [] # Check each valid subsequence for subseq in valid_set: if is_valid_subsequence(gene_seq, subseq): valid_found.append(subseq) # Sort lexicographically valid_found.sort() return valid_found"},{"question":"Anna is studying permutations and their properties in her discrete mathematics class. She found that given a list of numbers, certain permutations of that list can have special properties, such as being a \\"valley permutation.\\" A valley permutation is defined as a permutation of a list such that every element is either greater than the elements before and after it (a peak) or less than the elements before and after it (a valley), except for the first and the last elements, which are only compared with their single neighbor. You are given a list of distinct integers. Your task is to determine if there exists a valley permutation of the list and, if so, produce one such permutation. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the list. The second line contains n distinct integers a_i (1 ≤ a_i ≤ 10^9), the elements of the list. -----Output----- If there exists a valley permutation, print \\"YES\\" on the first line and the permutation on the second line. If there are multiple solutions, print any. If no such permutation exists, print \\"NO\\". -----Examples----- Input 5 1 2 3 4 5 Output YES 1 3 2 5 4 Input 3 2 1 3 Output YES 1 3 2 Input 2 1 2 Output NO -----Note----- In the first example, one possible valley permutation is [1, 3, 2, 5, 4]. Here, 3 is a peak because it is greater than both 1 and 2, 2 is a valley because it is less than both 3 and 5, and 5 is a peak because it is greater than both 2 and 4. In the second example, the permutation [1, 3, 2] is a valid valley permutation. In the third example, it is impossible to create a valley permutation since there are only two elements.","solution":"def valley_permutation(n, elements): Determines whether there exists a valley permutation for the input list of elements. If it exists, returns a tuple of (\\"YES\\", permutation). Otherwise, returns \\"NO\\". if n < 3: return \\"NO\\" elements.sort() # Create the valley permutation mid = (n + 1) // 2 left_part = elements[:mid] right_part = elements[mid:] # Merge two parts to make a valley permutation result = [] for i in range(len(left_part)): result.append(left_part[i]) if i < len(right_part): result.append(right_part[i]) return \\"YES\\", result"},{"question":"You are given an integer array nums of non-negative integers. Your task is to find the maximum product of any two elements (nums[i] and nums[j]) of the array where i != j. Input format: The first line of the input will contain a single integer n, representing the number of elements in the array. The second line of the input will contain n space-separated integers, representing the elements of the array. Output format: A single integer, the maximum product of any two elements in the array. Constraints: 1 ≤ n ≤ 10^6 0 ≤ nums[i] ≤ 10^4 Example: Input 4 3 4 5 2 Output 20 Explanation To find the maximum product, we can choose the two largest numbers in the array, which are 4 and 5. The product of these numbers is 4 * 5 = 20. Example: Input 5 1 5 3 2 4 Output 20 Explanation To find the maximum product, we can choose the two largest numbers in the array, which are 4 and 5. The product of these numbers is 4 * 5 = 20.","solution":"def max_product_of_two(nums): Returns the maximum product of any two elements in the array nums. if len(nums) < 2: return 0 # Not enough elements to form a pair first_max = second_max = float(\'-inf\') for num in nums: if num > first_max: second_max = first_max first_max = num elif num > second_max: second_max = num return first_max * second_max"},{"question":"A warehouse has a row of shelves numbered from 1 to n (1-indexed). Each shelf can hold a specific number of items. The warehouse manager needs to perform a series of operations, either adding items to a specific shelf or removing items from a specific shelf. When items are added to a shelf, the total number of items on that shelf should be updated. Similarly, when items are removed from a shelf, the total number of items should be decremented accordingly. The manager also wants to know the total number of items on all shelves at any point in time. You need to implement the following functionalities: 1. add_item(shelf_id, count) - Add a given count of items to the specified shelf. 2. remove_item(shelf_id, count) - Remove a given count of items from the specified shelf. If the count of items to remove exceeds the current count on the shelf, remove all items from that shelf. 3. get_total_items() - Return the total number of items across all shelves. Input First line contains an integer n (1 ≤ n ≤ 100000) — the number of shelves. Second line contains n space-separated integers, where the i-th integer represents the initial number of items on the i-th shelf (0 ≤ initial_items ≤ 104). Next line contains an integer q (1 ≤ q ≤ 100000) — the number of operations to be performed. Next q lines contain information about the operations in one of the following formats: * \\"add_item shelf_id count\\" — Add count items to the shelf with ID shelf_id (1 ≤ shelf_id ≤ n, 1 ≤ count ≤ 104). * \\"remove_item shelf_id count\\" — Remove count items from the shelf with ID shelf_id (1 ≤ shelf_id ≤ n, 1 ≤ count ≤ 104). * \\"get_total_items\\" — Output the total number of items across all shelves. Output For each \\"get_total_items\\" operation, print a single integer — the total number of items on all shelves. Examples Input 5 10 20 30 40 50 6 add_item 1 5 get_total_items remove_item 3 15 get_total_items remove_item 2 25 get_total_items Output 155 140 115","solution":"class Warehouse: def __init__(self, shelves): Initialize the warehouse with the given list of shelves. shelves: List of integers representing the initial number of items on each shelf. self.shelves = shelves self.total_items = sum(shelves) def add_item(self, shelf_id, count): Add \'count\' items to the shelf with id \'shelf_id\'. shelf_id: 1-indexed id of the shelf. count: Number of items to add. self.shelves[shelf_id - 1] += count self.total_items += count def remove_item(self, shelf_id, count): Remove \'count\' items from the shelf with id \'shelf_id\'. shelf_id: 1-indexed id of the shelf. count: Number of items to remove. actual_remove = min(self.shelves[shelf_id - 1], count) self.shelves[shelf_id - 1] -= actual_remove self.total_items -= actual_remove def get_total_items(self): Return the total number of items across all shelves. return self.total_items"},{"question":"In a futuristic city, there are several docking stations for flying cars. Each docking station has a set of parking lots, which are utilized by the cars to park. When a car parks at a station, it takes a certain amount of time to safely dock. The docking time can vary depending on the station and the car. Given the number of docking stations and their respective parking lot capacities along with the docking times for the cars at each station, you are required to determine the minimum total docking time required if the cars are parked in the most optimal manner. A single car docks at exactly one station, and at any given time, there could be only one car docking at a station. Input The first line of the input contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 5000) — the number of docking stations and the number of cars respectively. The second line contains n integers where the i-th integer represents the capacity of the i-th docking station. The third line contains m integers where the i-th integer represents the docking time of the i-th car. Output Print a single integer — the minimum total docking time required to dock all the cars in the most optimal manner. Examples Input 3 7 2 3 4 1 2 3 4 5 6 7 Output 18 Input 2 4 2 2 7 8 5 4 Output 24 Note In the first example, the optimal way is to distribute the cars among the docking stations as follows: - Docking Station 1: Car 1 (1 time), Car 4 (4 time) - Docking Station 2: Car 2 (2 time), Car 5 (5 time), Car 6 (6 time) - Docking Station 3: Car 3 (3 time), Car 7 (7 time) Total docking time: 1 + 4 + 2 + 5 + 6 + 3 + 7 = 28 In the second example, the optimal way is to distribute the cars among the docking stations as follows: - Docking Station 1: Car 1 (7 time), Car 3 (5 time) - Docking Station 2: Car 2 (8 time), Car 4 (4 time) Total docking time: 7 + 5 + 8 + 4 = 24","solution":"def min_docking_time(n, m, capacities, docking_times): capacities.sort(reverse=True) docking_times.sort(reverse=True) total_docking_time = 0 car_index = 0 for capacity in capacities: for _ in range(capacity): if car_index < m: total_docking_time += docking_times[car_index] car_index += 1 return total_docking_time"},{"question":"An ancient kingdom has a remarkable tradition of creating beautifully patterned carpets. These carpets are structured based on a magical number grid where each number represents the height of a tile in millimeters. The kingdom\'s artisans have a peculiar way of ensuring the aesthetic symmetry of their carpets—they reflect the grid diagonally. The process involves finding the reflection of each number across the diagonal (from the top-left corner to the bottom-right corner). You have been selected to help automate this reflection process. Given a square grid of numbers, your task is to write a program that computes the diagonally reflected grid. # Input The input consists of multiple test cases. The first line contains an integer `T`, the number of test cases. Each test case starts with an integer `N`, representing the size of the grid (N x N). The next `N` lines contain `N` integers each, representing the numbers in the grid, separated by spaces. # Output For each test case, output the reflected grid. Print the results for each test case directly. Separate the output of different test cases with a blank line. # Example Input ``` 2 3 1 2 3 4 5 6 7 8 9 2 10 20 20 30 ``` Output ``` 1 4 7 2 5 8 3 6 9 10 20 20 30 ``` # Explanation In the first test case, the 3x3 grid given is: ``` 1 2 3 4 5 6 7 8 9 ``` When reflected diagonally, it becomes: ``` 1 4 7 2 5 8 3 6 9 ``` In the second test case, the 2x2 grid remains the same when reflected diagonally since it is symmetric.","solution":"def diagonal_reflect(grid): Given a square grid, reflects the grid diagonally. N = len(grid) reflected_grid = [[None] * N for _ in range(N)] for i in range(N): for j in range(N): reflected_grid[i][j] = grid[j][i] return reflected_grid def process_test_cases(input_data): Processes multiple test cases from provided input data and returns output string. lines = input_data.strip().split(\'n\') T = int(lines[0]) current_line = 1 results = [] for _ in range(T): N = int(lines[current_line]) current_line += 1 grid = [] for _ in range(N): row = list(map(int, lines[current_line].split())) grid.append(row) current_line += 1 reflected_grid = diagonal_reflect(grid) result = \\"n\\".join(\\" \\".join(map(str, row)) for row in reflected_grid) results.append(result) return \\"nn\\".join(results)"},{"question":"Mira loves collecting different sets of colored marbles and displaying them in unique patterns. She creates new patterns by rotating a set of marbles, either left or right, around a circular display. To ensure each set\'s rotation is perfect, she needs your help to simulate the rotations. Given a list of integers representing marbles\' colors and a series of rotation instructions, compute the final arrangement of the marbles. -----Input:----- - The first line contains a single integer T, the number of test cases. - Each test case consists of three lines: - The first line contains an integer N, the number of marbles. - The second line contains N integers, representing the colors of the marbles. - The third line contains an integer R, indicating the number of clockwise or counter-clockwise rotations. If R is positive, it represents clockwise rotations. If R is negative, it represents counter-clockwise rotations. -----Output:----- For each test case, the output contains a single line with the final arrangement of the marbles after applying the given rotations, represented as a space-separated list of integers. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 105 - -105 ≤ R ≤ 105 - 0 ≤ color ≤ 1,000,000 -----Example:----- Input: 2 5 1 2 3 4 5 2 6 10 20 30 40 50 60 -3 Output: 4 5 1 2 3 40 50 60 10 20 30","solution":"def rotate_marbles(N, marbles, R): Returns the final arrangement of marbles after R rotations. R = R % N # Normalize R to ensure it is within the bounds of N if R < 0: # left rotate by R R = -R rotated_marbles = marbles[R:] + marbles[:R] else: # right rotate by R rotated_marbles = marbles[-R:] + marbles[:-R] return rotated_marbles def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] marbles = test_cases[i][1] R = test_cases[i][2] result = rotate_marbles(N, marbles, R) results.append(result) return results"},{"question":"You are given a string consisting of digits from 0 to 9. The task is to find the largest number that can be formed from the digits of the string after removing exactly one digit. Example 1: Input: s = \\"1234\\" Output: \\"234\\" Explanation: After removing \'1\', the largest number that can be formed is \\"234\\". Example 2: Input: s = \\"982756\\" Output: \\"98756\\" Explanation: After removing \'2\', the largest number that can be formed is \\"98756\\". Your Task: You don\'t need to read input or print anything. Complete the function `removeDigit()` which takes a string `s` as the input parameter and returns the largest number as a string that can be formed after removing exactly one digit. Expected Time Complexity: O(n), where n is the length of the string. Expected Auxiliary Space: O(1). Constraints: 1 <= length of string <= 100","solution":"def removeDigit(s): Returns the largest number that can be formed by removing exactly one digit from the string s max_num = \\"\\" for i in range(len(s)): temp_num = s[:i] + s[i+1:] if temp_num > max_num: max_num = temp_num return max_num"},{"question":"Given an array of integers, write a program to find two distinct indices `i` and `j` in the array such that the sum of the elements at these indices equals a given target `S`. Constraints * 1 ≤ N ≤ 100000 * -10^9 ≤ array[i] ≤ 10^9 * -10^9 ≤ S ≤ 10^9 Input In the first line, an integer N is given denoting the number of elements in the array. In the second line, N space-separated integers are given representing the elements of the array. In the third line, an integer S is given denoting the target sum. Output If such a pair of indices exists, print the indices i and j (1-based). If no such pair exists, print -1. Example Input 5 2 7 11 15 1 9 Output 1 2","solution":"def find_two_sum_indices(arr, target): Find two distinct indices i and j in the array such that the sum of the elements at these indices equals the given target sum S. Parameters: arr (list): a list of integers. target (int): the target sum. Returns: tuple: a tuple of 1-based indices (i, j) if such a pair exists, otherwise (-1,). lookup = {} for i, num in enumerate(arr): complement = target - num if complement in lookup: return (lookup[complement] + 1, i + 1) lookup[num] = i return (-1,)"},{"question":"*Your spaceship has been damaged in an asteroid field. In order to repair it, you need to solve the following problem.* Given an array of integers, determine the longest subsequence such that the elements are strictly increasing. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with a line containing a single integer N, the length of the array. - The next line contains N space-separated integers representing the array elements. ------ Output Format ------ For each test case, print a single integer, the length of the longest strictly increasing subsequence. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^{9} ----- Sample Input 1 ------ 2 6 5 8 3 7 9 1 5 10 20 10 30 40 50 ----- Sample Output 1 ------ 3 5 ----- explanation 1 ------ Test case 1: The longest strictly increasing subsequence is [5, 7, 9], so the output is 3. Test case 2: The longest strictly increasing subsequence is [10, 20, 30, 40, 50], so the output is 5.","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the given array. if not arr: return 0 n = len(arr) lis = [1] * n # Initialize LIS values for all indexes to 1 for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) def process_test_cases(test_cases): Processes multiple test cases to find the length of the longest increasing subsequence for each. Input: - test_cases: A list of tuples, each containing the length of the array and the array itself. Output: - A list of integers representing the length of the longest increasing subsequence for each test case. results = [] for n, arr in test_cases: results.append(length_of_lis(arr)) return results"},{"question":"An infrastructure company has a series of road maintenance tasks to complete. Each task can only be done in the specified time window [start, end), which represents the start time and the end time, respectively. Given a list of maintenance tasks, the company wants to know the maximum number of non-overlapping tasks it can accomplish. Given the start and end times of each task, determine the maximum number of tasks that can be performed without any overlap. Input: The input consists of multiple datasets. Each dataset starts with an integer n (0 ≤ n ≤ 1000) on a single line that represents the number of tasks. The next n lines each contain two integers start and end (0 ≤ start < end ≤ 1000000) representing the time window for each task. The input ends with a single line with an integer 0. Output: For each dataset, output a single integer, indicating the maximum number of non-overlapping tasks that can be accomplished. Example: Input: 5 1 3 2 5 3 6 4 7 6 8 3 7 8 2 4 5 9 0 Output: 3 2","solution":"def max_non_overlapping_tasks(datasets): results = [] for tasks in datasets: tasks.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in tasks: if start >= end_time: count += 1 end_time = end results.append(count) return results"},{"question":"A travel blogger, Emma, is planning a road trip across several cities. She wants to visit all the cities while minimizing the total distance traveled. Since Emma loves driving through scenic routes, she decides to avoid direct long stretches and prefers stopping by every city she visits. Given a set of cities connected by roads with known distances, Emma needs to determine the shortest possible path that visits each city exactly once and returns to the starting city. You need to help Emma by calculating the minimum distance of such a route. Input The first line contains a single integer n (2 ≤ n ≤ 15) — the number of cities. The following n lines contain n integers each, where the j-th integer in the i-th line d_ij (1 ≤ d_ij ≤ 1000) represents the distance between city i and city j. Note that d_ij = d_ji and d_ii = 0 for all i, as the distance from a city to itself is zero. Output Print a single integer — the minimum distance Emma needs to travel to visit each city exactly once and return to the starting city. Examples Input 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 Output 80 Input 3 0 5 9 5 0 7 9 7 0 Output 21","solution":"from itertools import permutations def find_minimum_distance(n, distances): # Generate all possible permutations of city visits cities = list(range(n)) min_distance = float(\'inf\') for perm in permutations(cities): current_distance = 0 for i in range(n): current_distance += distances[perm[i]][perm[(i+1) % n]] min_distance = min(min_distance, current_distance) return min_distance"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, the word \\"madam\\" is a palindrome, while the word \\"hello\\" is not. You are given a sequence of characters, and you need to determine the longest palindromic substring within that sequence. A substring is a contiguous block of characters within the sequence. ```Input```: A string consisting of alphanumeric characters. ```Output```: The longest palindromic substring as a string. If there are multiple substrings of the same maximum length, return the one that appears first. Example: ```python longest_palindromic_substring(\\"babad\\") == \\"bab\\" # \\"aba\\" is also a valid answer longest_palindromic_substring(\\"cbbd\\") == \\"bb\\" ```","solution":"def longest_palindromic_substring(s): Find the longest palindromic substring in a given string s. if len(s) == 0: return \\"\\" def expand_around_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left+1:right] max_palindrome = \\"\\" for i in range(len(s)): # odd length palindromes odd_palindrome = expand_around_center(s, i, i) if len(odd_palindrome) > len(max_palindrome): max_palindrome = odd_palindrome # even length palindromes even_palindrome = expand_around_center(s, i, i+1) if len(even_palindrome) > len(max_palindrome): max_palindrome = even_palindrome return max_palindrome"},{"question":"You are given an array of integers and you need to perform operations to make the array elements play a game called \\"Sum Game\\". The rules of the game are: - On each turn, you can select any two different elements from the array and replace them with their sum. - This process continues until only one element remains in the array. Your task is to find out the final element remaining in the array after performing the game optimally. Since the array can be large, and many operations might be needed, ensure that your solution is efficient. Input The first line contains a single integer T, denoting the number of test cases. The first line of each test case contains a single integer N, denoting the number of elements in the array. The next line contains N integers, the i^th integer representing the value of the i^th element in the array. Output For each test case, print a single integer, the final remaining element after performing all the operations. Constraints 1 ≤ T ≤ 10 2 ≤ N ≤ 10^5 1 ≤ ai ≤ 10^9 SAMPLE INPUT 2 3 1 2 3 4 1 2 3 4 SAMPLE OUTPUT 6 10 Explanation For the first test case, we can perform the following operations: - Select elements 1 and 2, replace them with their sum 3. The array becomes [3, 3]. - Now select the remaining two elements (both are 3) and replace them with their sum 6. Thus, the final remaining element is 6. For the second test case, we can perform the following operations: - Select elements 1 and 2, replace them with their sum 3. The array becomes [3, 3, 4]. - Select elements 3 and 4, replace them with their sum 6. The array becomes [6, 4]. - Now select the remaining two elements (6 and 4) and replace them with their sum 10. Thus, the final remaining element is 10.","solution":"def sum_game(T, test_cases): Function to find the final remaining element after performing the sum game. Parameters: T - Number of test cases test_cases - List of tuples where each tuple contains: - N: Number of elements in the array - array: List of integers representing the array Returns: List of results for each test case results = [] for case in test_cases: N, array = case # The optimal strategy is simply summing all elements of the array final_element = sum(array) results.append(final_element) return results"},{"question":"Given a grid of size m x n consisting of \'0\'s (empty spaces) and \'1\'s (boulders). A robot starting at the top-left corner of the grid wants to reach the bottom-right corner. It can only move either down or right at any point in time. Design a function that finds the number of unique paths that the robot can take to get to the bottom-right corner, avoiding all boulders. Example 1: Input: m = 3, n = 3 grid = [ [\'0\', \'0\', \'0\'], [\'0\', \'1\', \'0\'], [\'0\', \'0\', \'0\'] ] Output: 2 Explanation: There are two unique paths (right -> right -> down -> down) and (down -> down -> right -> right). Example 2: Input: m = 3, n = 3 grid = [ [\'0\', \'1\', \'0\'], [\'0\', \'1\', \'0\'], [\'0\', \'0\', \'0\'] ] Output: 1 Explanation: There is only one unique path (down -> down -> right -> right). Your Task: You don\'t need to read input or print anything. Your task is to complete the function uniquePaths() which takes three arguments - an integer m, an integer n, and a 2D list grid, and returns the number of unique paths from the top-left corner to the bottom-right corner. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: 1 <= m, n <= 100","solution":"def uniquePaths(m, n, grid): if grid[0][0] == \'1\' or grid[m-1][n-1] == \'1\': return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == \'1\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"A photographer wants to organize a photo session where each participant is given a unique identification number. During the session, he wants to ensure that participants never have the same ID. Given a list of N integers, each representing a participant\'s current ID, write a program that generates a new ID for each participant such that all participants have unique IDs. The new IDs should be as close as possible to the original ones, and the smallest possible IDs should be used. The new IDs should follow these constraints: * Each new ID must be unique. * The new IDs should be chosen such that the maximum absolute difference between the old ID and the new ID is minimized. Constraints: * 1 leq N leq 100 * 1 leq original ID leq 1000 Input: The input consists of two lines: * The first line contains an integer N, the number of participants. * The second line contains N integers representing the original IDs of the participants. Output: Print N integers representing the new IDs for the participants, separated by spaces. Examples: Input: 4 1 2 3 4 Output: 1 2 3 4 Input: 3 10 10 1 Output: 1 2 3","solution":"def generate_new_ids(n, ids): ids.sort() new_ids = [] current_id = 1 for i in range(n): while current_id in new_ids: current_id += 1 new_ids.append(current_id) return new_ids # Example usage if __name__ == \\"__main__\\": n = 3 ids = [10, 10, 1] new_ids = generate_new_ids(n, ids) print(new_ids) # Output: [1, 2, 3]"},{"question":"A company has implemented a security system based on employee badges for entering the building. Each badge entry is logged in the system. The company wants to analyze the logs to find the most frequent visitor of the month. Each entry log consists of the timestamp of the entry and the employee\'s badge ID. You have to write a program to determine the badge ID of the most frequent visitor for a given month. ---Input--- The input consists of multiple lines. The first line contains an integer N denoting the number of badge entries. Each of the next N lines contains a space-separated string T and an integer badgeID, where T is the timestamp in the format \\"YYYY-MM-DD\\" representing the date and badgeID is the ID of the employee. ---Output--- Output a single integer which is the badge ID of the most frequent visitor of the month. If there are multiple employees with the same highest frequency, return the smallest badge ID. ---Constraints--- - 1 ≤ N ≤ 10000 - 1 ≤ badgeID ≤ 1000000 - The timestamps T are valid dates between \\"2000-01-01\\" and \\"2099-12-31\\" ---Example--- Input: 7 2023-01-01 9999 2023-01-01 1234 2023-01-01 1234 2023-01-02 9999 2023-01-02 9999 2023-01-02 1234 2023-01-03 9999 Output: 9999 ---Explanation--- Employee with badge ID 9999 has the highest frequency of badge entries, so the output is 9999. Employee 9999 has made 4 entries, while employee 1234 has made 3 entries.","solution":"def most_frequent_visitor(logs): from collections import defaultdict badge_counts = defaultdict(int) for log in logs: timestamp, badge_id = log.split() badge_id = int(badge_id) badge_counts[badge_id] += 1 max_visits = max(badge_counts.values()) most_frequent_badges = [badge_id for badge_id, count in badge_counts.items() if count == max_visits] return min(most_frequent_badges) # Example usage: logs = [ \\"2023-01-01 9999\\", \\"2023-01-01 1234\\", \\"2023-01-01 1234\\", \\"2023-01-02 9999\\", \\"2023-01-02 9999\\", \\"2023-01-02 1234\\", \\"2023-01-03 9999\\", ] print(most_frequent_visitor(logs)) # Output: 9999"},{"question":"Given a series of numbers, your task is to help the professor determine the uniqueness of each series. The professor will provide multiple series, and for each series, you need to return a list of numbers that appeared exactly once in the order they were first encountered. -----Input:----- - First line will contain T, the number of series. Then the series data follows. - Each series consists of two lines. The first line contains N, the number of integers in the series. The second line contains the series itself, N integers separated by spaces. -----Output:----- For each series, output a single line containing the integers that appeared exactly once in the given series. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 100 - -1000 leq Each integer in the series leq 1000 -----Sample Input:----- 3 7 4 5 6 5 4 7 8 5 1 2 2 3 4 6 1 2 3 1 2 3 -----Sample Output:----- 6 7 8 1 3 4 None -----EXPLANATION:----- For the first series: 4 and 5 appear twice, so they are not unique. 6, 7, and 8 appear exactly once. For the second series: 2 appears twice, so it is not unique. 1, 3, and 4 appear exactly once. For the third series: All numbers appear more than once, hence no unique numbers. If no numbers appear exactly once in a series, output \\"None\\".","solution":"def find_unique_numbers(T, series_list): results = [] for i in range(T): N, series = series_list[i] num_count = {} unique_nums = [] for num in series: if num in num_count: num_count[num] += 1 else: num_count[num] = 1 for num in series: if num_count[num] == 1: unique_nums.append(num) if unique_nums: results.append(\\" \\".join(map(str, unique_nums))) else: results.append(\\"None\\") return results"},{"question":"In this task, you are required to manipulate strings and determine a specific outcome. You will receive two strings, `string1` and `string2`. The goal is to count how many times `string2` occurs as a substring in `string1`. INPUT First line of the input: `string1` Second line of the input: `string2` OUTPUT A single integer indicating the number of times `string2` appears as a substring in `string1`. Example INPUT hellohello lo OUTPUT 2","solution":"def count_substring_occurrences(string1, string2): Counts and returns the number of times string2 appears as a substring in string1. count = 0 start = 0 while start <= len(string1) - len(string2): pos = string1.find(string2, start) if pos == -1: break count += 1 start = pos + 1 return count # Example usage: # string1 = \\"hellohello\\" # string2 = \\"lo\\" # print(count_substring_occurrences(string1, string2)) # Output should be 2"},{"question":"Write a function that takes an integer `n` and returns the largest palindrome number less than `n`. # Examples ```python largest_palindrome(123) => 121 # 121 is the largest palindrome number less than 123 largest_palindrome(1000) => 999 # 999 is a palindrome and less than 1000 largest_palindrome(10) => 9 # 9 is a palindrome and less than 10 largest_palindrome(1) => 0 # there are no palindrome numbers less than 1, return 0 ``` # Notes: 1. A palindrome is a number that reads the same forward and backward, e.g., 121, 1331, 999. 2. The function should return 0 if there are no palindrome numbers less than `n`. 3. `n` will always be an integer greater than 0.","solution":"def is_palindrome(number): Checks if a given number is a palindrome. str_num = str(number) return str_num == str_num[::-1] def largest_palindrome(n): Returns the largest palindrome number less than n. for num in range(n-1, -1, -1): if is_palindrome(num): return num return 0"},{"question":"Write a function to determine if two strings are Isomorphic: that is, whether you can replace characters from one string to get the other, while preserving the order of characters. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself. For example, given `s = \\"egg\\"` and `t = \\"add\\"`, it would return true because each \'e\' maps to \'a\' and \'g\' maps to \'d\'. However, given `s = \\"foo\\"` and `t = \\"bar\\"`, it would return false because \'f\' maps to \'b\' but \'o\' cannot map to both \'a\' and \'r\'. Constraints: * 1 ≤ |s|, |t| ≤ 10^4 * s and t consist of lowercase English letters. Input Input is given from Standard Input in the following format: s t Output Print \\"true\\" if the two strings are isomorphic, otherwise print \\"false\\". Examples Input egg add Output true Input foo bar Output false Input paper title Output true Input ab aa Output false","solution":"def is_isomorphic(s, t): if len(s) != len(t): return False mapping_s_to_t = {} mapping_t_to_s = {} for char_s, char_t in zip(s, t): if char_s in mapping_s_to_t: if mapping_s_to_t[char_s] != char_t: return False else: mapping_s_to_t[char_s] = char_t if char_t in mapping_t_to_s: if mapping_t_to_s[char_t] != char_s: return False else: mapping_t_to_s[char_t] = char_s return True # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() s = data[0] t = data[1] if is_isomorphic(s, t): print(\\"true\\") else: print(\\"false\\")"},{"question":"Given an array of integers, you need to find a contiguous subarray (containing at least one number) which has the largest sum and return its sum. Additionally, you need to return the indices of the subarray. If there are multiple subarrays with the same maximum sum, return the one with the smallest starting index. If there is still a tie, return the one with the smallest ending index. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^4 ≤ a_i ≤ 10^4), the elements of the array. -----Output----- Print two lines. The first line contains the maximum sum. The second line contains two integers, the starting and ending indices of the subarray (1-based indexing). -----Examples----- Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 4 7 Input 1 -1 Output -1 1 1 Input 10 1 -1 1 -1 1 -1 1 -1 1 -1 Output 1 1 1 -----Note----- In the first sample, the subarray with the maximum sum is [4, -1, 2, 1] with a sum of 6. The starting and ending indices are 4 and 7, respectively. In the second sample, there is only one element, so the maximum sum is -1 and the subarray indices are 1 and 1. In the third sample, all subarrays of length 1 have a sum of 1 or -1. The subarray with the maximum sum is [1], with a sum of 1, starting and ending at index 1.","solution":"def max_subarray_sum_with_indices(nums): Returns the maximum sum of a contiguous subarray and its starting and ending indices (1-based). max_sum = float(\'-inf\') current_sum = 0 start = 0 end = 0 temp_start = 0 for i in range(len(nums)): if current_sum <= 0: current_sum = nums[i] temp_start = i else: current_sum += nums[i] if (current_sum > max_sum or (current_sum == max_sum and temp_start < start) or (current_sum == max_sum and temp_start == start and i < end)): max_sum = current_sum start = temp_start end = i return max_sum, start + 1, end + 1"},{"question":"Example Input 150 2 1 100 200 Output 17.3205","solution":"import math def euclidean_distance_3d(x1, y1, z1, x2, y2, z2): Returns the Euclidean distance between two points in 3-dimensional space. distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) return round(distance, 4)"},{"question":"Polycarp is organizing a programming marathon and has come up with a new scoring system that requires recalculating the scores based on shifting rules. Each participant has an initial score which will be adjusted according to specific shift values. These shifts can affect multiple participants simultaneously, which can result in new scores. Polycarp has a list of participants\' initial scores and a list of shifts. Each shift is defined by three values: `start`, `end`, and `value`. The shift operation indicates that for every participant from `start` to `end` (inclusive), their score should be incremented by the `value` given in the shift. Your task is to compute the final scores for all participants after applying all the shifts in the given order. -----Input----- The first line contains two integers n and m (1 le n, m le 2 cdot 10^5) representing the number of participants and the number of shifts, respectively. The second line contains n integers representing the initial scores of the participants. The following m lines each contain three integers start, `end`, and `value` (1 le start le end le n, -10^9 le value le 10^9), describing the shift operations. -----Output----- Print a single line containing n integers representing the final scores of all participants. -----Examples----- Input 5 3 1 2 3 4 5 1 3 10 2 5 -5 1 5 3 Output 14 10 11 2 3 Input 4 2 10 20 30 40 1 2 5 3 4 -10 Output 15 25 20 30 Input 3 1 5 5 5 1 3 2 Output 7 7 7 -----Note----- In the first example, the operations are as follows: - Add 10 to participants from 1 to 3: [11, 12, 13, 4, 5] - Subtract 5 from participants from 2 to 5: [11, 7, 8, -1, 0] - Add 3 to participants from 1 to 5: [14, 10, 11, 2, 3] In the second example, the operations are: - Add 5 to participants from 1 to 2: [15, 25, 30, 40] - Subtract 10 from participants from 3 to 4: [15, 25, 20, 30] In the third example, the only operation is: - Add 2 to participants from 1 to 3: [7, 7, 7]","solution":"def calculate_final_scores(n, m, initial_scores, shifts): final_scores = initial_scores[:] for start, end, value in shifts: for i in range(start-1, end): final_scores[i] += value return final_scores"},{"question":"Given n cities and m direct flights between them, find if it’s possible to travel between any two cities by only using these flights. If it is possible, determine the minimum number of flights required to visit all cities starting from any city. Each of the cities is numbered from 1 to n. -----Input----- The first line contains two integers n (1 ≤ n ≤ 100) and m (0 ≤ m ≤ 1000) — the number of cities and the number of flights respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) indicating that there is a direct flight from city u to city v. Flights are undirected, which means you can fly from city u to city v and also from city v to city u. -----Output----- If it\'s not possible to travel between every pair of cities using the given flights, print -1. Otherwise, print the minimum number of flights required to visit all cities starting from any city. -----Examples----- Input 4 4 1 2 2 3 3 4 4 1 Output 3 Input 4 2 1 2 2 3 Output -1 -----Note----- In the first example, you can visit all cities starting from any city using 3 flights. 1 -> 2 -> 3 -> 4 or 4 -> 1 -> 2 -> 3 or any other order with 3 flights. In the second example, there is no way to visit city 4 from any other city, hence output is -1.","solution":"def bfs(start, adj_list, visited): Perform BFS on the graph to mark all reachable nodes from the start node. queue = [start] while queue: node = queue.pop(0) for neighbor in adj_list[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) def can_travel_and_min_flights(n, m, flights): from collections import defaultdict if n == 1: return 0 # Only one city, no flights needed. adj_list = defaultdict(list) # Construct the adjacency list. for u, v in flights: adj_list[u].append(v) adj_list[v].append(u) visited = [False] * (n + 1) # Perform BFS from city 1. visited[1] = True bfs(1, adj_list, visited) # Check if all cities are visited. if not all(visited[1:]): return -1 # Not all cities are reachable. # If all cities are connected, the number of flights needed is (n - 1) return n - 1"},{"question":"Given an initially empty binary tree, you need to process queries to update and retrieve information about the tree. The queries are as follows: 1. INSERT x: Insert the integer x into the binary tree. 2. DELETE x: Remove the integer x from the tree. If x is not in the tree, ignore the query. 3. SEARCH x: Check if the integer x is present in the tree. Output \\"YES\\" if it is found and \\"NO\\" otherwise. 4. MINIMUM: Output the smallest value in the tree. If the tree is empty, output -1. 5. MAXIMUM: Output the largest value in the tree. If the tree is empty, output -1. Input The first line contains a single integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains a query, as described above. It will be in one of the five forms: - `1 x` (where x is an integer, 1 ≤ x ≤ 10^9) to denote an INSERT operation, - `2 x` (where x is an integer, 1 ≤ x ≤ 10^9) to denote a DELETE operation, - `3 x` (where x is an integer, 1 ≤ x ≤ 10^9) to denote a SEARCH operation, - `4` to denote a MINIMUM query, - `5` to denote a MAXIMUM query. Output For each SEARCH query, output \\"YES\\" if x is found in the tree, otherwise output \\"NO\\". For each MINIMUM query, output the smallest value in the tree, or -1 if the tree is empty. For each MAXIMUM query, output the largest value in the tree, or -1 if the tree is empty. Examples Input ``` 8 1 10 1 20 3 10 4 5 2 10 3 10 4 ``` Output ``` YES 10 20 NO 20 ``` Note - The first query (1 10) inserts the value 10 into the tree. - The second query (1 20) inserts the value 20 into the tree. - The third query (3 10) searches for the value 10 in the tree and it is found, so the output is \\"YES\\". - The fourth query (4) asks for the minimum value in the tree, which is 10. - The fifth query (5) asks for the maximum value in the tree, which is 20. - The sixth query (2 10) deletes the value 10 from the tree. - The seventh query (3 10) searches for the value 10 in the tree and it is not found, so the output is \\"NO\\". - The eighth query (4) asks for the minimum value in the tree, which is now 20.","solution":"class BinaryTree: def __init__(self): self.tree = set() def insert(self, x): self.tree.add(x) def delete(self, x): self.tree.discard(x) def search(self, x): return \\"YES\\" if x in self.tree else \\"NO\\" def minimum(self): return min(self.tree) if self.tree else -1 def maximum(self): return max(self.tree) if self.tree else -1 def process_queries(queries): bt = BinaryTree() result = [] for query in queries: parts = query.split() command = int(parts[0]) if command == 1: bt.insert(int(parts[1])) elif command == 2: bt.delete(int(parts[1])) elif command == 3: result.append(bt.search(int(parts[1]))) elif command == 4: result.append(bt.minimum()) elif command == 5: result.append(bt.maximum()) return result"},{"question":"Write a function that, given a string, returns the length of the longest substring that contains no more than two distinct characters. SAMPLE INPUT eceba SAMPLE OUTPUT 3 Explanation The longest substring of \\"eceba\\" with no more than two distinct characters is \\"ece\\" with a length of 3.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with no more than two distinct characters. if len(s) == 0: return 0 max_len = 0 start = 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"A string is called a cyclic permutation of another string if it can be obtained by shifting its characters circularly any number of times. Write a program that, given two strings, determines if one is a cyclic permutation of the other. For example, the strings \\"abcd\\" and \\"dabc\\" are cyclic permutations of each other because \\"dabc\\" can be obtained by rotating \\"abcd\\" three positions to the right. The strings \\"abcd\\" and \\"acdb\\" are not cyclic permutations of each other. Input The input consists of a sequence of pairs of strings. Each string consists of lowercase English letters only. Each string has a length between 1 and 100, inclusive. The input is terminated by a string pair where the first string is \\"0\\". Output The output should be a series of lines, one for each pair of input strings (excluding the last pair \\"0\\"), indicating \\"yes\\" if one string is a cyclic permutation of the other, otherwise \\"no\\". Example Input abcd dabc abcd abdc abc cab aa aa abcd abcd 0 Output yes no yes yes yes","solution":"def is_cyclic_permutation(s1, s2): Determines if s1 is a cyclic permutation of s2. if len(s1) != len(s2): return False return s2 in (s1 + s1) def check_cyclic_permutations(pairs): Given a list of string pairs, return a list of \\"yes\\" or \\"no\\" indicating if one string is a cyclic permutation of the other. results = [] for s1, s2 in pairs: if s1 == \\"0\\": break results.append(\\"yes\\" if is_cyclic_permutation(s1, s2) else \\"no\\") return results"},{"question":"Given a grid of letters and a word, your task is to determine if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. The same cell may not be used twice in the construction of the word. # Input The input consists of multiple test cases. Each test case starts with two integers m and n (1 ≤ m, n ≤ 100), which represent the number of rows and columns of the grid. The next m lines each contain n lowercase letters representing the grid. The following line contains a single word consisting of lowercase letters (1 ≤ length of the word ≤ 1,000,000). The input is terminated by a line with two zeros. # Output For each test case, print \\"Yes\\" if the word exists in the grid, otherwise print \\"No\\". # Example Input 3 4 a b c e s f c s a d e e abcced 3 4 a b c e s f c s a d e e see 2 2 a b c d abcd 0 0 Output Yes Yes No","solution":"def exists_in_grid(grid, word): rows = len(grid) cols = len(grid[0]) word_len = len(word) def dfs(x, y, index): if index == word_len: return True if x < 0 or x >= rows or y < 0 or y >= cols or grid[x][y] != word[index]: return False temp = grid[x][y] grid[x][y] = \'#\' found = (dfs(x + 1, y, index + 1) or dfs(x - 1, y, index + 1) or dfs(x, y + 1, index + 1) or dfs(x, y - 1, index + 1)) grid[x][y] = temp return found for i in range(rows): for j in range(cols): if grid[i][j] == word[0]: if dfs(i, j, 0): return True return False def word_exists_in_grids(grids): results = [] for grid, word in grids: if exists_in_grid(grid, word): results.append(\\"Yes\\") else: results.append(\\"No\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") idx = 0 grids = [] while idx < len(lines): m, n = map(int, lines[idx].split()) if m == 0 and n == 0: break grid = [] for i in range(m): grid.append(list(lines[idx + 1 + i].replace(\\" \\", \\"\\"))) word = lines[idx + 1 + m] grids.append((grid, word)) idx += m + 2 return grids def main(input_string): grids = parse_input(input_string) results = word_exists_in_grids(grids) return \\"n\\".join(results)"},{"question":"During a festival, there are several stalls set up in a row, and each stall sells a different type of good. However, the organizer wants to decorate the stalls with a specific type of decoration: \'x\' and \'o\'. The rule for the decoration is that no two same decorations can be adjacent to each other. Initially, the stalls have no decorations. Given an integer n, representing the number of stalls, you need to generate a sequence of \'x\' and \'o\' to decorate them following the rule. Your task is to generate this sequence so that it can be used directly to decorate the stalls. -----Input----- The only line contains an integer: n (1 ≤ n ≤ 50). -----Output----- Output a single string of length n consisting of characters \'x\' and \'o\', adhering to the decoration rule. -----Examples----- Input 5 Output xoxox Input 4 Output xoxo Input 7 Output xoxoxox Input 2 Output xo","solution":"def decorate_stalls(n): Generates a sequence of \'x\' and \'o\' decorations for n stalls such that no two same decorations are adjacent to each other. :param n: int - the number of stalls. :return: str - the sequence of decorations. sequence = [] for i in range(n): if i % 2 == 0: sequence.append(\'x\') else: sequence.append(\'o\') return \'\'.join(sequence)"},{"question":"A squirrel is storing nuts for the winter and wants to distribute them evenly among several storage sites in the forest. However, the squirrel has a peculiar way of distributing: it starts with the first nut, puts it in the first storage site, the second nut in the second storage site, and so on. When it reaches the last storage site, it starts again from the first storage site. The squirrel has n nuts and wants to distribute them among m storage sites. Your task is to determine how many nuts each storage site will have after the distribution and to find out which storage sites will have the highest number of nuts. -----Input----- The input consists of two integers n and m (1 ≤ n, m ≤ 10^6). -----Output----- The first line should contain m space-separated integers, where the i-th integer represents the number of nuts in the i-th storage site after the distribution. The second line should contain the indices of the storage sites (1-based) that have the highest number of nuts, in ascending order. -----Examples----- Input 10 3 Output 4 3 3 1 Input 15 5 Output 3 3 3 3 3 1 2 3 4 5 Input 7 2 Output 4 3 1","solution":"def distribute_nuts(n, m): Distributes `n` nuts among `m` storage sites. Returns two lists: 1. The number of nuts in each storage site after distribution. 2. The indices of the storage sites with the highest number of nuts. # Each storage site initially gets `n // m` nuts base_num_nuts = n // m # The remaining nuts after even distribution remaining_nuts = n % m # Initial distribution of nuts nut_distribution = [base_num_nuts] * m # Distribute the remaining nuts for i in range(remaining_nuts): nut_distribution[i] += 1 # Find the maximum number of nuts in any storage site max_nuts = max(nut_distribution) # Find all sites with the maximum nuts max_nuts_sites = [i + 1 for i, nuts in enumerate(nut_distribution) if nuts == max_nuts] return nut_distribution, max_nuts_sites"},{"question":"Simon and Marla love competitive programming. They both enjoy solving diverse problems and often challenge each other to come up with new and interesting problems. Today, Simon has presented Marla with an intriguing problem involving segment sums. Given an array of n non-negative integers and a positive integer k, Marla is asked to find a contiguous subarray of length exactly k whose sum is the maximum among all possible contiguous subarrays of length k. Can you help Marla solve this problem? -----Input----- The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ n). The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^4). -----Output----- Print a single integer representing the maximum sum of any contiguous subarray of length k. -----Examples----- Input 6 3 1 2 3 4 5 6 Output 15 Input 5 2 1 2 3 1 2 Output 5 -----Note----- In the first sample, the contiguous subarray of length 3 with the maximum sum is [4, 5, 6] which sums to 15. In the second sample, the subarray [3, 2] has the maximum sum among all subarrays of length 2.","solution":"def max_sum_subarray(n, k, array): Given an array of n non-negative integers and a positive integer k, finds a contiguous subarray of length exactly k whose sum is the maximum among all possible contiguous subarrays of length k. Parameters: n (int): The number of elements in the array. k (int): The length of the subarray. array (list of int): The array of non-negative integers. Returns: int: The maximum sum of any contiguous subarray of length k. if n == 0 or k == 0: return 0 # Calculate the sum of the first subarray of length k current_sum = sum(array[:k]) max_sum = current_sum # Use a sliding window to find the maximum sum of any subarray of length k for i in range(k, n): current_sum += array[i] - array[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"You are given a string S consisting of lowercase alphabets and parentheses. Your task is to determine if the parentheses are balanced and properly nested. A string containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is said to be properly nested if: - A matched pair of brackets contains a spread of only balanced nested brackets. - A void pair of brackets is balanced. Write a function isBalanced() that takes the string S and returns true if S is properly nested and balanced, otherwise return false. Example 1: Input: S = \\"{[()]}\\" Output: true Explanation: The string is properly nested. Example 2: Input: S = \\"{[(])}\\" Output: false Explanation: The string is not properly nested. Example 3: Input: S = \\"[]\\" Output: true Explanation: The string is properly nested. Your Task: Complete the function isBalanced(S) which takes a string S as input and returns true if the parentheses are balanced and false otherwise. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ |S| ≤ 10^{4} S[i] contains only \'(\', \')\', \'{\', \'}\', \'[\' and \']\'.","solution":"def isBalanced(S): Returns true if the parentheses in the string S are properly nested and balanced, otherwise returns false. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in S: if char in matching_bracket.values(): stack.append(char) elif char in matching_bracket.keys(): if stack == [] or matching_bracket[char] != stack.pop(): return False else: # in case there are other characters, which shouldn\'t be the case here continue return stack == []"},{"question":"Write a function that takes a single integer n as input and returns all the permutations of the numbers from 1 to n sorted in lexicographic order. If the input is not a positive integer greater than zero, the function should return an empty list. For example: ```python permutations(3) ``` should return: ```python [ [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1] ] ``` **Constraints:** - The function should handle inputs up to 6 efficiently. - Do not use built-in functions that generate permutations directly, such as `itertools.permutations`. **Notes:** - You may assume that the input will fit within the range of what your environment can handle. - Remember to handle edge cases appropriately, such as input being less than 1.","solution":"def permutations(n): Returns all permutations of numbers from 1 to n sorted in lexicographic order. If n is not a positive integer greater than zero, returns an empty list. if not isinstance(n, int) or n <= 0: return [] def generate_permutations(arr, left, right, result): if left == right: result.append(arr[:]) else: for i in range(left, right + 1): arr[left], arr[i] = arr[i], arr[left] generate_permutations(arr, left + 1, right, result) arr[left], arr[i] = arr[i], arr[left] numbers = list(range(1, n + 1)) result = [] generate_permutations(numbers, 0, n - 1, result) return sorted(result)"},{"question":"In a video game, there are N monsters, each with a certain amount of health. You have a powerful attack that can decrease a monster\'s health by a fixed amount K. Each attack is applied to exactly one monster. Your goal is to minimize the number of attacks needed to reduce all monsters\' health to zero or less. Write a program that takes the number of monsters, their respective health values, and the fixed attack power, and returns the minimum number of attacks required. -----Constraints----- - 1 ≦ N ≦ 100 - 1 ≦ health_i ≦ 1000 (where health_i is the initial health of the i-th monster) - 1 ≦ K ≦ 1000 -----Input----- The input is given from Standard Input in the following format: N K health_1 health_2 ... health_N -----Output----- Print the minimum number of attacks required. -----Sample Input----- 5 100 450 900 200 300 700 -----Sample Output----- 26 Explanation: - Health values: 450, 900, 200, 300, 700 - Attack power: 100 - Attack 5 monsters with each attack reducing their health by 100: - 450/100 => 5 attacks - 900/100 => 9 attacks - 200/100 => 2 attacks - 300/100 => 3 attacks - 700/100 => 7 attacks - Total attacks needed = 5 + 9 + 2 + 3 + 7 = 26","solution":"def minimum_attacks_required(N, K, healths): Calculates the minimum number of attacks required to reduce all monsters\' health to zero or less. Parameters: N (int): Number of monsters K (int): Attack power healths (list of int): List containing the health values of the monsters Returns: int: Minimum number of attacks required attacks = 0 for health in healths: attacks += (health + K - 1) // K # Adding K-1 for ceiling effect to avoid float division return attacks # Example function call # N = 5 # K = 100 # healths = [450, 900, 200, 300, 700] # print(minimum_attacks_required(N, K, healths)) # Output: 26"},{"question":"Nina loves playing chess, but she currently only has a 2x2 chessboard and just one knight piece. She enjoys moving the knight around the board. A knight in chess moves in an L-pattern: two squares in a horizontal or vertical direction and then one square in a perpendicular direction, or one square in a horizontal or vertical direction and then two squares in a perpendicular direction. Given the initial position of the knight on the 2x2 chessboard, determine the number of valid moves the knight can make. The cells on the chessboard are labeled from (1,1) to (2,2). -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of a single line containing two integers x and y (1 le x, y le 2) — the initial coordinates of the knight on the 2x2 chessboard. -----Output----- For each test case, print a single integer — the number of valid moves the knight can make from the initial position. -----Examples----- Input 4 1 1 1 2 2 1 2 2 Output 0 0 0 0 -----Note----- In each test case, the knight is placed on a 2x2 chessboard. Since the board is very small, the knight cannot make any valid moves from any position, and hence the number of valid moves is 0 for all the given test cases.","solution":"def count_knight_moves(t, positions): Given the number of test cases and the initial positions for each test case, return the number of valid knight moves for each test case on a 2x2 chessboard. results = [] for x, y in positions: # Since the board is 2x2, no knight move is possible # from any given initial position (1,1), (1,2), (2,1), (2,2). results.append(0) return results"},{"question":"Amira loves playing with strings and grammar. She invented a game involving two strings, s1 and s2, where she needs to transform s1 into s2 using the following allowed operations: 1. **Insert** any character at any position in the string. 2. **Delete** any character from any position in the string. 3. **Replace** any character in the string with any other character. The goal is to find out the minimum number of such operations required to change string s1 into string s2. You are required to help Amira by solving this problem. Input The first line of input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. The following lines contain t cases, each containing two strings s1 and s2. The length of each string is between 1 and 100 (inclusive). Output For each test case, print the minimum number of operations required to transform s1 into s2. Examples Input 3 intention execution horse ros abc def Output 5 3 3","solution":"def min_operations_to_convert(s1, s2): Returns the minimum number of operations required to transform string s1 into string s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # Min. operations = j (all insertions) elif j == 0: dp[i][j] = i # Min. operations = i (all deletions) elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n] def process_test_cases(test_cases): Processes a list of test cases and returns a list of results. results = [] for s1, s2 in test_cases: results.append(min_operations_to_convert(s1, s2)) return results"},{"question":"Lina and Tom are participating in a number transformation game. Lina chooses a positive integer n and an array of k positive integers. Tom\'s goal is to transform n into a new number using a specific operation exactly k times. The operation allowed is as follows: - Choose any digit d (0 through 9) in the current number and increase it by 1 (if it is 9, it wraps around to 0). Given the initial number n and the array of k integers representing the allowable digits that can be chosen for the increment operation, determine if Tom can transform the number into a strictly greater number after exactly k operations. Input The first line of the input contains a single integer n (1 ≤ n ≤ 1 000 000) — the initial number chosen by Lina. The second line contains a single integer k (1 ≤ k ≤ 100) — the number of increment operations available. The third line contains k integers, each between 0 and 9 (inclusive), which denote the digits allowed to be chosen for increment operations. Output Print \\"Yes\\" (without quotes) if Tom can transform n into a strictly greater number after exactly k operations, or \\"No\\" (without quotes) otherwise. Examples Input 54321 3 5 4 3 Output Yes Input 12345 2 0 1 Output No Note In the first sample, Tom can transform \'54321\' into \'65431\' by incrementing \'5\' to \'6\', \'4\' to \'5\', and \'3\' to \'4\', thus resulting in a strictly greater number. In the second sample, Tom cannot make \'12345\' strictly greater using only the digits \'0\' and \'1\' for the incrementing operation.","solution":"def can_transform_number(n, k, digits): Determine if Tom can transform the number n into a strictly greater number after exactly k operations. Parameters: n (int): The initial number chosen by Lina. k (int): The number of increment operations available. digits (list): The allowable digits that can be chosen for the increment operations. Returns: str: \\"Yes\\" if Tom can transform n into a strictly greater number after exactly k operations, \\"No\\" otherwise. n_str = str(n) digit_changes = [False] * len(n_str) # Try to find k distinct digits from the number which can be increased for digit in digits: for i in range(len(n_str)): if k > 0 and not digit_changes[i] and int(n_str[i]) == digit: digit_changes[i] = True k -= 1 if k == 0: break if k == 0: break # If we ran out of operations, check for changes that result in greater number if k == 0: for i in range(len(n_str)): if digit_changes[i] and n_str[i] != \'9\': return \\"Yes\\" elif digit_changes[i] and n_str[i] == \'9\': return \\"Yes\\" return \\"No\\""},{"question":"You are given a rotated sorted array of distinct integers and a target value you need to search. A rotated sorted array means that a sorted array is rotated at some pivot unknown to you beforehand. For example, `[0,1,2,4,5,6,7]` might be rotated at pivot 3 and become `[4,5,6,7,0,1,2]`. Write an algorithm to search for the target in the rotated sorted array. If the target exists in the array, return its index, otherwise, return -1. You must write an algorithm with O(log n) runtime complexity. Input - An array of distinct integers, nums, where 1 <= nums.length <= 10^4. - An integer target where -10^4 <= target <= 10^4. Output - An integer representing the index of the target in the rotated sorted array, or -1 if the target is not present. Examples Input ``` nums = [4,5,6,7,0,1,2] target = 0 ``` Output ``` 4 ``` Input ``` nums = [4,5,6,7,0,1,2] target = 3 ``` Output ``` -1 ```","solution":"def search_rotated_array(nums, target): Searches for a target value in a rotated sorted array. Args: nums (list of int): Rotated sorted array of distinct integers. target (int): Target value to search for. Returns: int: Index of the target if found, otherwise -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid # Determine the sorted part of the array if nums[left] <= nums[mid]: # Left part is sorted if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 else: # Right part is sorted if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"A code-breaking team is attempting to decipher a mysterious signal containing a series of encoded messages. Each message is an array of integers, and the team has found that decoding a message involves identifying special subarrays. A special subarray is defined as a contiguous segment of the array that contains exactly two distinct integers. The team needs your help to write a program that finds and outputs the length of the longest special subarray for each message. -----Input----- The first line contains the integer M (1 leq M leq 500), the number of messages. Each of the following lines describes a message: The first number L (1 leq L leq 10^5) specifies the length of the message. The next L space-separated integers describe the message, with each integer x_i (1 leq x_i leq 10^6). -----Output----- For each message, print a single integer – the length of the longest special subarray. -----Example----- Input 2 7 4 1 2 1 4 4 1 5 1 1 1 1 1 Output 4 0 -----Note----- In the first message, the longest special subarray is [1, 2, 1, 4] with length 4. In the second message, there is no special subarray, so the output is 0.","solution":"def find_longest_special_subarray(messages): def longest_special_subarray_length(array): n = len(array) if n < 2: return 0 left = 0 right = 0 max_len = 0 count = {} while right < n: if len(count) <= 2: count[array[right]] = count.get(array[right], 0) + 1 if len(count) == 2: max_len = max(max_len, right - left + 1) right += 1 while len(count) > 2: count[array[left]] -= 1 if count[array[left]] == 0: del count[array[left]] left += 1 return max_len result = [] for message in messages: result.append(longest_special_subarray_length(message)) return result"},{"question":"You have decided to create a tool to generate random alphanumeric strings for use in passwords. Write a function generate_password(length) that returns a random alphanumeric string of a given length. The string must contain at least one uppercase letter, one lowercase letter, and one digit. The length parameter will always be greater than or equal to 3. For example: generate_password(8) might return \\"aB3dE1Gh\\" generate_password(5) might return \\"A1b2Z\\" Hints: 1. Use the `random` and `string` modules from Python\'s standard library. 2. Ensure the requirements for at least one uppercase letter, one lowercase letter, and one digit are met before returning the password.","solution":"import random import string def generate_password(length): Generates a random alphanumeric string of a given length. The string contains at least one uppercase letter, one lowercase letter, and one digit. if length < 3: raise ValueError(\\"Length of password must be at least 3\\") # Ensure at least one of each required type password = [ random.choice(string.ascii_uppercase), random.choice(string.ascii_lowercase), random.choice(string.digits) ] # Fill the rest of the password length with random choices from all alphanumeric characters while len(password) < length: password.append(random.choice(string.ascii_letters + string.digits)) # Shuffle the list to ensure randomness and convert it back to a string random.shuffle(password) return \'\'.join(password)"},{"question":"In a forest, there are N trees positioned on a 2D grid. Each tree is represented by its coordinates (x_i, y_i). Lumberjacks need to cut down all trees, but they can only move between adjacent trees. The adjacent tree to a tree at (x_i, y_i) is a tree located at any of (x_i+1, y_i), (x_i-1, y_i), (x_i, y_i+1), or (x_i, y_i-1). The cost to move between two adjacent trees is always 1 unit of energy. The goal is to find a path that allows the lumberjacks to cut down all trees and return to the starting tree, using the least amount of energy. Write a program to determine the minimum energy required to cut down all trees and return to the starting tree. -----Constraints----- - 1 ≤ N ≤ 50 - 0 ≤ x_i, y_i ≤ 1000 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N x_1 y_1 x_2 y_2 : x_N y_N -----Output----- Print the minimum energy required to cut down all trees and return to the starting tree. -----Sample Input----- 3 0 0 1 0 0 1 -----Sample Output----- 4 Explanation: Start at (0, 0), move to (1, 0), then to (0, 1), and finally back to (0, 0). The total energy cost is 1 + 1 + 1 + 1 = 4 units.","solution":"import itertools def calculate_distance(point1, point2): Calculate the Manhattan distance between two points. return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1]) def find_min_energy(trees): Find the minimum energy required to cut down all trees and return to the starting tree using the least amount of energy. n = len(trees) # Generate all permutations of the tree indices to evaluate all possible orders of cutting the trees tree_permutations = itertools.permutations(range(1, n)) min_energy = float(\'inf\') for perm in tree_permutations: energy = 0 prev_tree = 0 # starting at the first tree # Calculate the energy for the current permutation for i in perm: energy += calculate_distance(trees[prev_tree], trees[i]) prev_tree = i # Add energy to return to the starting tree (index 0) energy += calculate_distance(trees[prev_tree], trees[0]) # Update minimum energy if the calculated energy is less min_energy = min(min_energy, energy) return min_energy def minimum_energy_required(N, coordinates): Wrapper function to handle input and output formatting. trees = [(coordinates[i][0], coordinates[i][1]) for i in range(N)] return find_min_energy(trees)"},{"question":"In a small village, there is a communal water tank with a fixed capacity. Every day, the villagers use some amount of water, and the water tank is refilled partially by a stream that flows into it. You are given the initial capacity of the water tank, the daily water usage by the villagers, and the amount of water added by the stream each day. Your task is to determine after how many days the water tank will be empty. The water tank is considered empty if the water level becomes zero or negative. If the water tank never gets empty, return -1. Input: The first line contains T denoting the number of test cases. The first line of each test case contains three space-separated integers C, U, and R representing the initial capacity of the tank, daily water usage by villagers, and daily water refilling by the stream respectively. Output: For each test case, print the number of days after which the water tank will be empty. If the tank never gets empty, print -1. Constraints: 1 ≤ T ≤ 20 1 ≤ C, U, R ≤ 10^9 SAMPLE INPUT 2 100 10 5 50 20 25 SAMPLE OUTPUT 20 -1 Explanation For the first test case, the water tank will lose a net amount of 5 units daily (10 usage - 5 refill), thus it will take 20 days for the tank to be empty (100 / 5 = 20). For the second test case, the daily water usage is less than the daily refill, hence the tank will never be empty.","solution":"def days_to_empty_tank(t, test_cases): results = [] for case in test_cases: C, U, R = case if U <= R: results.append(-1) else: net_usage_per_day = U - R days = C // net_usage_per_day if C % net_usage_per_day != 0: days += 1 results.append(days) return results # Read input values for the function below: # T, and the test cases as a list of tuples for each test case (C, U, R) # For example: (2, [(100, 10, 5), (50, 20, 25)])"},{"question":"In a magical forest, there are n stones in a straight line, each with a magical number written on it. A wizard wants to extract the magic from these stones. He can only extract the magic from a stone if it is greater than or equal to all previously extracted stones. The wizard starts from the first stone and moves to the last stone, determining on each step whether he can extract the magic from the current stone or should move to the next one. You are to determine the total number of stones from which the wizard can extract magic. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of stones in the line. The second line contains a sequence of n integers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 100 000), where b_{i} is the magical number written on the i-th stone. -----Output----- Print the total number of stones from which the wizard can extract magic. -----Examples----- Input 5 2 4 1 5 3 Output 3 Input 4 1 2 3 4 Output 4 Input 6 6 5 4 3 2 1 Output 1 -----Note----- In the first example, the wizard first extracts magic from the stone with number 2, then from the stone with number 4. He skips the stone with number 1, since 1 is less than 4. He extracts the magic from the stone with number 5. The stones from which he extracts magic are [2, 4, 5]. Therefore, the total number is 3. In the second example, the wizard extracts the magic from all stones because the numbers are in increasing order. Hence, the answer is 4. In the third example, the wizard only extracts the magic from the first stone with number 6 because every subsequent stone has a smaller number. Consequently, the total number is 1.","solution":"def count_magic_extractable_stones(n, stones): Returns the total number of stones the wizard can extract magic from. Parameters: n (int): Number of stones stones (list): List of integers representing the magical number on each stone Returns: int: Total number of extractable stones if n == 0: return 0 count = 0 max_value = float(\'-inf\') for stone in stones: if stone >= max_value: count += 1 max_value = stone return count"},{"question":"You are given a string s of length n consisting of the characters \'(\', \')\', \'[\', and \']\'. A string is considered valid if all parentheses and square brackets are properly matched and nested. Your task is to find the length of the longest valid substring of s. A valid substring is a contiguous part of the string that is valid according to the above conditions. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the string. The second line contains the string s of length n, made up of the characters \'(\', \')\', \'[\', and \']\'. -----Output----- Output a single integer — the length of the longest valid substring of s. -----Examples----- Input 6 ()[[()] Output 4 Input 10 (()))])([ Output 4 Input 8 ([[]][[]] Output 8 -----Note----- In the first example, the longest valid substring is \\"()\\", and \\"[[]]\\", both of which have a length of 2, but the combined proper substring is \\"()[[]]\\" giving a length of 4. In the second example, the longest valid substring are \\"()\\", \\"()\\", and \\"[]\\", each have a length of 2, but cannot form a longer valid substring together beyond length 4. In the third example, the entire string is already valid and its length is 8.","solution":"def longest_valid_substring(n, s): Finds the length of the longest valid substring consisting of match parentheses and brackets. :param n: Length of the string :param s: String of parentheses and brackets :return: Length of the longest valid substring # Stack to keep track of indices of opening brackets/parentheses stack = [] # Dict to map closing to opening characters mapping = {\')\': \'(\', \']\': \'[\'} # Initialize longest valid substring length max_length = 0 # Initialize start of the current valid substring start = -1 for i, char in enumerate(s): if char in mapping.values(): stack.append(i) else: if stack and s[stack[-1]] == mapping[char]: stack.pop() if stack: max_length = max(max_length, i - stack[-1]) else: max_length = max(max_length, i - start) else: start = i return max_length"},{"question":"You are given a list of integers representing the height of bars in a histogram, where each bar is of unit width. Your task is to find the maximal rectangular area that can be formed using contiguous bars of the histogram. The rectangle can be formed by choosing any set of contiguous bars and taking the minimum height among them to determine the height of the rectangle. The width of the rectangle is determined by the number of contiguous bars chosen. -----Input----- The first line contains an integer n (1 leq n leq 100,000) — the number of bars in the histogram. The second line contains n space-separated integers h_i (1 leq h_i leq 10^5) — the heights of the bars in the histogram. -----Output----- Print a single integer — the maximal rectangular area that can be formed in the histogram. -----Examples----- Input 7 2 1 4 5 1 3 3 Output 8 Input 6 2 1 2 3 1 2 Output 6 -----Notes----- In the first sample test case, the maximal rectangular area is formed by taking the bars of heights 4 and 5. The area of this rectangle is 4 times 2 = 8. In the second sample test case, the maximal rectangular area is formed by taking the bars of heights 2, 1, 2, and 3. The area of this rectangle is 2 times 3 = 6.","solution":"def maximal_rectangle_area(histogram): Function to find the maximal rectangular area in a histogram. n = len(histogram) stack = [] max_area = 0 index = 0 while index < n: if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"In a world of automation, your task is to simulate a basic vending machine. The vending machine has only three items available for sale: chips, soda, and candy. Each item has a different price. - Chips cost 50 cents - Soda costs 75 cents - Candy costs 100 cents The machine accepts only quarters (25 cents). Given the amount of money a customer inserts and the item they want to purchase, determine if the vending machine can dispense the item. If it can, output the item followed by \\"Dispensed\\". If it cannot, output \\"Insufficient funds\\". ------ Input Format ------ A single line of input containing two space-separated values: an integer `amount` (the amount of money inserted in cents) and a string `item` (the item the customer wants to purchase, which will be one of \\"chips\\", \\"soda\\", or \\"candy\\"). ------ Output Format ------ Output a single string: either the item followed by \\"Dispensed\\" or \\"Insufficient funds\\". ------ Constraints ------ - `amount` is a positive integer and a multiple of 25 (i.e., 25, 50, 75, 100, etc). - `item` is one of \\"chips\\", \\"soda\\", or \\"candy\\". ----- Sample Input 1 ------ 50 chips ----- Sample Output 1 ------ chips Dispensed ----- Sample Input 2 ------ 50 soda ----- Sample Output 2 ------ Insufficient funds ----- Sample Input 3 ------ 100 candy ----- Sample Output 3 ------ candy Dispensed","solution":"def vending_machine(amount, item): Determines if the vending machine can dispense the item based on the amount of money inserted. item_prices = { \\"chips\\": 50, \\"soda\\": 75, \\"candy\\": 100 } if item not in item_prices: return \\"Invalid item\\" if amount >= item_prices[item]: return f\\"{item} Dispensed\\" else: return \\"Insufficient funds\\""},{"question":"A warehouse manager needs a program to help manage inventory. The warehouse contains a large number of items, and each item has a unique ID and a specified quantity. The manager frequently needs to perform the following operations: 1. Add a new item with a unique ID and quantity. 2. Update the quantity of an existing item by adding a specified amount. 3. Get the current quantity of an item given its ID. Implement a class `Warehouse` that performs these operations efficiently. The class should support the following methods: - `add_item(item_id: int, quantity: int) -> None`: Adds a new item with the specified `item_id` and `quantity`. It is guaranteed that the `item_id` has not been used before. - `update_quantity(item_id: int, amount: int) -> None`: Updates the quantity of the item with the specified `item_id` by adding the `amount` (positive or negative). It is guaranteed that the `item_id` exists in the warehouse. - `get_quantity(item_id: int) -> int`: Returns the current quantity of the item with the specified `item_id`. It is guaranteed that the `item_id` exists in the warehouse. Input - You don\'t need to handle inputs directly in the function. You need to implement the class and its methods only. Output - There is no direct output. The methods should perform their operations as described. Example ```python # Initialize warehouse warehouse = Warehouse() # Add items warehouse.add_item(101, 50) warehouse.add_item(102, 30) # Update quantities warehouse.update_quantity(101, 20) warehouse.update_quantity(102, -5) # Get quantities print(warehouse.get_quantity(101)) # Output: 70 print(warehouse.get_quantity(102)) # Output: 25 ``` Note: - The method `add_item` should add a new item to the warehouse. - The method `update_quantity` should update the quantity of the existing item. - The method `get_quantity` should return the current quantity of the specified item.","solution":"class Warehouse: def __init__(self): # Initialize an empty dictionary to store items with their quantities. self.inventory = {} def add_item(self, item_id: int, quantity: int) -> None: # Add a new item to the inventory with the given item_id and quantity. self.inventory[item_id] = quantity def update_quantity(self, item_id: int, amount: int) -> None: # Update the quantity of the existing item by the given amount. self.inventory[item_id] += amount def get_quantity(self, item_id: int) -> int: # Return the current quantity of the specified item. return self.inventory[item_id]"},{"question":"You are given a grid of size n x m where each cell contains a number representing the height of a building at that position. A water reservoir is placed over the grid that collects rainwater in the gaps between buildings. Determine the maximum amount of water that can be trapped between the buildings after a rain. The height of water at each cell is determined by the shorter of the tallest buildings to the left and right, and to the top and bottom, minus the height of the building at that cell. If a cell is at the boundary of the grid, it\'s not part of any trapped water. -----Input----- The first line of the input contains a single integer t (1 ≤ t ≤ 10) — the number of test cases. Each test case consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. - The next n lines each contain m integers, representing the heights of the buildings in the grid, where each height h (1 ≤ h ≤ 1000). -----Output----- For each test case, print the maximum amount of trapped water. -----Examples----- Input 2 3 3 1 2 1 2 1 2 1 1 1 3 3 3 3 3 3 0 3 3 3 3 Output 0 3 -----Note----- In the first test case, there are no gaps where water can be trapped since the middle cell is at the boundary and all boundaries are higher. In the second test case, the water can be trapped in the middle cell (total 3 units of water).","solution":"def max_trapped_water(grid, n, m): if n < 3 or m < 3: return 0 left_max = [[0]*m for _ in range(n)] right_max = [[0]*m for _ in range(n)] top_max = [[0]*m for _ in range(n)] bottom_max = [[0]*m for _ in range(n)] for i in range(n): left_max[i][0] = grid[i][0] for j in range(1, m): left_max[i][j] = max(left_max[i][j-1], grid[i][j]) for i in range(n): right_max[i][m-1] = grid[i][m-1] for j in range(m-2, -1, -1): right_max[i][j] = max(right_max[i][j+1], grid[i][j]) for j in range(m): top_max[0][j] = grid[0][j] for i in range(1, n): top_max[i][j] = max(top_max[i-1][j], grid[i][j]) for j in range(m): bottom_max[n-1][j] = grid[n-1][j] for i in range(n-2, -1, -1): bottom_max[i][j] = max(bottom_max[i+1][j], grid[i][j]) trapped_water = 0 for i in range(1, n-1): for j in range(1, m-1): min_height = min(left_max[i][j], right_max[i][j], top_max[i][j], bottom_max[i][j]) if min_height > grid[i][j]: trapped_water += min_height - grid[i][j] return trapped_water def solve_trapped_water(test_cases): results = [] for t in test_cases: n, m = t[0] grid = t[1] result = max_trapped_water(grid, n, m) results.append(result) return results # Example usage with input parsing def parse_input(input_lines): index = 0 num_tests = int(input_lines[index]) index += 1 test_cases = [] for _ in range(num_tests): n, m = map(int, input_lines[index].split()) index += 1 grid = [] for _ in range(n): grid.append(list(map(int, input_lines[index].split()))) index += 1 test_cases.append(((n, m), grid)) return test_cases # Example usage def main(input_lines): test_cases = parse_input(input_lines) results = solve_trapped_water(test_cases) for result in results: print(result)"},{"question":"You\'ve been tasked with writing a program to encode messages into Morse code. Morse code encodes each letter as a sequence of dots and dashes, separated by spaces, and words are separated by \' | \' (space, vertical bar, space). You will receive a string of uppercase English letters and spaces, and must return the corresponding Morse code string. You need to support A-Z and the space character, which should be converted into \' | \'. Here\'s the given Morse code table for reference: ``` A: .- B: -... C: -.-. D: -.. E: . F: ..-. G: --. H: .... I: .. J: .--- K: -.- L: .-.. M: -- N: -. O: --- P: .--. Q: --.- R: .-. S: ... T: - U: ..- V: ...- W: .-- X: -..- Y: -.-- Z: --.. (space): | ``` For example: Input: \\"HELLO WORLD\\" Output: \\".... . .-.. .-.. --- | .-- --- .-. .-.. -..\\"","solution":"def encode_morse(message): Encodes a given message into Morse code. morse_code = { \'A\': \'.-\', \'B\': \'-...\', \'C\': \'-.-.\', \'D\': \'-..\', \'E\': \'.\', \'F\': \'..-.\', \'G\': \'--.\', \'H\': \'....\', \'I\': \'..\', \'J\': \'.---\', \'K\': \'-.-\', \'L\': \'.-..\', \'M\': \'--\', \'N\': \'-.\', \'O\': \'---\', \'P\': \'.--.\', \'Q\': \'--.-\', \'R\': \'.-.\', \'S\': \'...\', \'T\': \'-\', \'U\': \'..-\', \'V\': \'...-\', \'W\': \'.--\', \'X\': \'-..-\', \'Y\': \'-.--\', \'Z\': \'--..\', \' \': \'|\' } encoded_message = \' \'.join(morse_code[char] for char in message) return encoded_message"},{"question":"Description Create a function that determines whether a given string contains all the vowels (a, e, i, o, u) at least once. The string can contain any character, but it must be verified regardless of case (i.e., vowels can be uppercase or lowercase). The function should return a boolean value: `True` if the string contains all the vowels at least once, `False` otherwise. Examples: # Extra info - The input will be a single string. - The function should be case-insensitive, meaning \'A\' and \'a\' should be treated as the same. - The string can contain any standard keyboard character, including whitespace and punctuation.","solution":"def contains_all_vowels(s): Returns True if the input string contains all the vowels (a, e, i, o, u) at least once, case insensitive. Otherwise, returns False. vowels = set(\\"aeiou\\") s_lower = s.lower() return all(vowel in s_lower for vowel in vowels)"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},j={class:"search-container"},Y={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],F={key:0},R={key:1};function z(s,e,l,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",j,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(_,null,w(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",F,"See more"))],8,P)):u("",!0)])}const L=d(A,[["render",z],["__scopeId","data-v-48444586"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"deepseek/9.md","filePath":"deepseek/9.md"}'),M={name:"deepseek/9.md"},B=Object.assign(M,{setup(s){return(e,l)=>(n(),i("div",null,[x(L)]))}});export{G as __pageData,B as default};
