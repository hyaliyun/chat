import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,a,r){return n(),i("div",q,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-65a592ef"]]),S=JSON.parse('[{"question":"A large square field of size n × n is divided into a grid of 1 × 1 cells. The cell at the top-left corner of the field has coordinates (1, 1) and the cell at the bottom-right corner has coordinates (n, n). In this square field, there are k obstacles each positioned at unique coordinates (x_i, y_i) (1 ≤ x_i, y_i ≤ n), and there is a drone starting at (1, 1). The drone wants to reach the bottom-right corner of the field (n, n). Each time the drone tries to move it can move: - Right (increase the y coordinate by 1), - Down (increase the x coordinate by 1) However, the drone cannot move onto a cell that has an obstacle. You need to determine whether it is possible for the drone to reach (n, n) from (1, 1) without hitting any obstacle. Input The first line of input contains two integers n and k (2 ≤ n ≤ 100, 0 ≤ k ≤ n*n - 1) — the size of the field and the number of obstacles. The next k lines each contain two integers x_i and y_i (1 ≤ x_i, y_i ≤ n), indicating the coordinates of an obstacle. Output If it is possible for the drone to reach (n, 1) from (1, 1) print \\"YES\\", otherwise print \\"NO\\". Examples Input 4 3 2 2 3 3 4 2 Output YES Input 3 3 2 1 2 2 2 3 Output NO Input 3 1 3 2 Output YES","solution":"def can_reach_destination(n, k, obstacles): from collections import deque # Initialize the grid grid = [[True] * n for _ in range(n)] for x, y in obstacles: grid[x - 1][y - 1] = False # BFS to find path from (1,1) to (n,n) directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = set([(0, 0)]) while queue: x, y = queue.popleft() if (x, y) == (n - 1, n - 1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" # Example Usage # n = 3, k = 3 # obstacles = [(2, 1), (2, 2), (2, 3)] # print(can_reach_destination(n, k, obstacles)) # Should return \\"NO\\""},{"question":"Create a program that helps a landowner manage the irrigation of her rectangular field. The irrigation system can water a rectangular sub-area of the field, with its sides parallel to the field\'s sides. However, the sub-area can be placed anywhere within the whole field, including along the borders. Given the dimensions of the field and the desired amount of water to use, the landowner wants to know the maximum depth of water that can be achieved if the irrigation area is optimized. The field is defined by its length L and width W, and the irrigation system can cover any rectangular sub-area of the field with sides parallel to the main field\'s sides. You are given the total volume of water V to be used for irrigation. Your task is to write a program that calculates the maximum possible depth of water (in units) that can be achieved if the sub-area is adjusted optimally. Input: - A sequence of multiple datasets. - The end of the input is indicated by three zeroes on a single line. - Each dataset consists of: - The first line with three integers L, W, and V (1 ≤ L, W ≤ 1000; 1 ≤ V ≤ 1000000) representing the length, width, and volume of water, respectively. Output: - For each dataset, output the maximum depth of water that the irrigation sub-area can have, with precision up to 6 decimal places. Example: Input: 10 5 50 20 10 5000 0 0 0 Output: 10.000000 25.000000 Explanation: For the first dataset, the total water volume is 50. The optimal sub-area is the entire field (10x5), and the depth is 50 / (10 * 5) = 1.000000 units. For the second dataset, the total water volume is 5000. The optimal sub-area can still be the entire field (20x10), and the depth is 5000 / (20 * 10) = 25.000000 units. Consider all configurations where the sub-area dimensions are optimized to maximize the depth of water within the given constraints.","solution":"def max_water_depth(L, W, V): Calculate the maximum depth of water that can be achieved if the sub-area is adjusted optimally. Parameters: L (int): Length of the field. W (int): Width of the field. V (int): Volume of water to be used for irrigation. Returns: float: Maximum depth of water achievable with precision up to 6 decimal places. return round(V / (L * W), 6) def process_datasets(datasets): Process multiple datasets to calculate the maximum water depth for each dataset. Parameters: datasets (list of tuple): List of tuples, where each tuple contains (L, W, V). Returns: list of float: List of maximum water depths for each dataset. results = [] for L, W, V in datasets: if L == 0 and W == 0 and V == 0: break results.append(max_water_depth(L, W, V)) return results"},{"question":"Write a function that takes a positive integer n and returns a list of all prime numbers less than or equal to n. Constraints * 1 leq n leq 10^6 Input The input is given as a single integer n. Output Return a list of all prime numbers less than or equal to n in ascending order. Example Input 10 Output [2, 3, 5, 7] Input 20 Output [2, 3, 5, 7, 11, 13, 17, 19] Explanation For the input n = 10, the prime numbers less than or equal to 10 are 2, 3, 5, and 7. For the input n = 20, the prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than or equal to n. if n < 2: return [] is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False p = 2 while p * p <= n: if is_prime[p]: for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 return [p for p in range(2, n + 1) if is_prime[p]] # Example usage: # result = sieve_of_eratosthenes(20) # print(result) # Output: [2, 3, 5, 7, 11, 13, 17, 19]"},{"question":"# BACKGROUND: Emma loves to read and recently, she has joined an online reading club where the club keeps track of each member\'s reading habits and recommends books based on their preferences. Each member has their own set of reading logs that record the time they spent reading each book. Emma wants a program that can process these logs and provide her with a summary of her reading habits. # TECHNICAL DETAILS: Emma’s reading log is stored in a list of dictionaries, where each dictionary represents a single reading session. Each dictionary contains the name of the book, the number of pages read, and the amount of time spent (in hours) during that session. Emma wants to know the total number of books read, the total pages read, the total reading time, and the average reading speed (pages per hour). # TASK: Write a function that accepts a list of reading session logs. Each log is a dictionary with the following keys: ``` - \'book\' : a string representing the name of the book, - \'pages\' : an integer representing the number of pages read in that session, - \'time\' : a float representing the time spent reading in hours. ``` The function should return a dictionary containing: ``` - \'total_books\' : the total number of unique books read, - \'total_pages\' : the total number of pages read, - \'total_time\' : the total amount of time spent reading, - \'avg_speed\' : the average reading speed in pages per hour (rounded to the nearest tenth). ``` # EXAMPLE: Suppose Emma reads according to the following logs: ``` logs = [ {\'book\': \'Book A\', \'pages\': 150, \'time\': 2.5}, {\'book\': \'Book B\', \'pages\': 200, \'time\': 3.0}, {\'book\': \'Book A\', \'pages\': 100, \'time\': 1.5}, {\'book\': \'Book C\', \'pages\': 300, \'time\': 5.0} ] ``` The function call to process these logs would look like: `summarize_reading(logs)` and its output should be: ``` { \'total_books\': 3, \'total_pages\': 750, \'total_time\': 12.0, \'avg_speed\': 62.5 } ``` # NOTES: - If the input list is empty, the function should return zeros for all values. - Ensure to handle divisions by zero where necessary. For example, if the total time is zero, then the average reading speed should also be zero.","solution":"def summarize_reading(logs): Summarizes the reading habits from the logs. Args: logs (list): List of dictionaries with each dictionary containing \'book\' (str), \'pages\' (int), and \'time\' (float). Returns: dict: A dictionary with summary of total books, total pages, total time, and average speed. if not logs: return { \'total_books\': 0, \'total_pages\': 0, \'total_time\': 0.0, \'avg_speed\': 0.0 } unique_books = set() total_pages = 0 total_time = 0.0 for log in logs: unique_books.add(log[\'book\']) total_pages += log[\'pages\'] total_time += log[\'time\'] total_books = len(unique_books) avg_speed = total_pages / total_time if total_time > 0 else 0 return { \'total_books\': total_books, \'total_pages\': total_pages, \'total_time\': round(total_time, 1), \'avg_speed\': round(avg_speed, 1) }"},{"question":"Maggu has started to learn numbers and their properties. This time, he is fascinated by prime numbers. His teacher gave him some tasks related to prime numbers, and he has come to you for help. You need to find all unique prime numbers in a given list and then compute their sum. INPUT: The first line of input contains a single integer t denoting the number of test cases. Each test case consists of two lines. The first line contains a single integer n denoting the number of elements in the list. The second line contains n space-separated integers denoting the elements of the list. OUTPUT: For each test case, output a single line containing the sum of all unique prime numbers in the given list. CONSTRAINTS: t ≤ 10 1 ≤ n ≤ 10^5 1 ≤ element ≤ 10^6 SAMPLE INPUT 3 5 2 3 4 5 6 4 8 9 10 11 6 13 14 15 16 17 18 SAMPLE OUTPUT 10 11 30","solution":"def is_prime(num): Check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def sum_of_unique_primes(test_cases): Calculate the sum of unique prime numbers in each list of test cases. results = [] for case in test_cases: n, elements = case unique_primes = set() for element in elements: if is_prime(element): unique_primes.add(element) results.append(sum(unique_primes)) return results # Function to parse inputs and output results def process_input(t, input_data): test_cases = [] for i in range(t): n = input_data[i * 2] elements = list(map(int, input_data[i * 2 + 1].split())) test_cases.append((n, elements)) return sum_of_unique_primes(test_cases)"},{"question":"You are given an undirected graph with N nodes and M edges. Each edge is weighted with a positive integer. Your task is to find the weight of the maximum spanning tree (MST) of the graph. The graphical representation of a Maximum Spanning Tree is a subgraph of the original graph that connects all the vertices together without any cycles and has the maximum possible total edge weight. If there are multiple such MSTs with the same weight, you only need to find the weight. ------ Input ------ The first line contains two integers N and M. The next M lines each contain three integers u, v, and w, representing an edge between nodes u and v with weight w. ------ Output ------ The first line contains a single integer, denoting the weight of the maximum spanning tree. ------ Example ------ Input: 4 5 1 2 3 1 3 4 4 2 1 3 4 2 1 4 5 Output: 12 ------ Explanation ------ In the provided test case, the graph contains 4 nodes and 5 edges. The maximum spanning tree would consist of the edges (1-4), (1-3), and (1-2) with a total weight of 5 + 4 + 3 = 12. Thus, the output is 12. ------ Scoring ------ Subtask 1 (20 points): 1 ≤ N ≤ 100, 1 ≤ M ≤ 1,000 Subtask 2 (40 points): 1 ≤ N ≤ 1,000, 1 ≤ M ≤ 100,000 Subtask 3 (40 points): 1 ≤ N ≤ 100,000, 1 ≤ M ≤ 1,000,000","solution":"def find_maximum_spanning_tree(N, M, edges): Returns the weight of the maximum spanning tree for a given graph with N nodes and M edges. Parameters: N (int): Number of nodes. M (int): Number of edges. edges (list of tuples): Each tuple contains three integers (u, v, w) denoting an edge between nodes u and v with weight w. Returns: int: Total weight of maximum spanning tree. # Sort edges in descending order based on weights edges.sort(key=lambda x: x[2], reverse=True) # Union-Find (Disjoint Set Union) to detect cycles parent = [i for i in range(N)] rank = [0] * N def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 return True return False max_spanning_tree_weight = 0 edges_added = 0 for u, v, w in edges: if union(u - 1, v - 1): # Adjusting for zero-based index max_spanning_tree_weight += w edges_added += 1 if edges_added == N - 1: # If we already added N-1 edges, we are done break return max_spanning_tree_weight"},{"question":"Alice loves to organize strings. She has a series of operations that she can perform on a string consisting of lowercase English letters. The operations are: 1. Swap any two characters. 2. Reverse the entire string. Given these operations, Alice wants to find the lexicographically smallest string that can be obtained from a given string after performing any sequence of the allowed operations. Input Format The first line contains the number of test cases, T. Each subsequent line contains one test case: a single string, s. Output Format The answer for each test case: Display the lexicographically smallest string that can be obtained. Constraints 1 leq T leq 100 1 leq |s| leq 10^6 Each string s consists only of lowercase English letters (a-z). Sample Input 3 cba xyz abba Sample Output abc xyz aabb","solution":"def lexicographically_smallest_string(s): Returns the lexicographically smallest string that can be obtained from the given string s after performing any sequence of swaps and reversals. return \'\'.join(sorted(s)) def process_test_cases(test_cases): Processes a list of test cases and returns the lexicographically smallest strings for each input. return [lexicographically_smallest_string(tc) for tc in test_cases] def parse_input(input_string): Parses the input string into the number of test cases and the test case strings. lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = lines[1:T+1] return test_cases"},{"question":"Given an array of integers, determine whether the array forms a mountain sequence. An array is said to be a mountain if the following conditions hold: 1. The length of the array is at least 3. 2. There exists some index i (0 < i < len(array) - 1) such that: * array[0] < array[1] < ... < array[i-1] < array[i] * array[i] > array[i+1] > ... > array[len(array) - 1] Write a function that takes an array as input and returns `True` if the array forms a mountain sequence, and `False` otherwise. Input The input consists of: - An integer n (1 ≤ n ≤ 10^4), the number of elements in the array. - An array of n integers, where each integer is in the range [-10^4, 10^4]. Output Return `True` if the array is a mountain sequence, and `False` otherwise. Examples Input 5 2 5 7 3 1 Output True Input 5 1 2 3 4 5 Output False Input 6 0 3 2 1 2 1 Output False Input 3 0 1 0 Output True","solution":"def is_mountain_sequence(array): Determines if the given array forms a mountain sequence. n = len(array) if n < 3: return False # Find the peak at index i i = 0 while i + 1 < n and array[i] < array[i + 1]: i += 1 # Check if there\'s no peak or peak is at the start or end if i == 0 or i == n - 1: return False # Check if descending part is valid while i + 1 < n and array[i] > array[i + 1]: i += 1 return i == n - 1"},{"question":"You work as a software developer, and one of your tasks is to sanitize user input for a chat application. Specifically, the chat application will only allow certain characters in messages, and any disallowed characters must be removed. The allowed characters are defined as follows: all lowercase and uppercase English letters (a-z, A-Z), digits (0-9), space (\' \'), and common punctuation marks (.,!?). Write a function `sanitize_message(message)` that takes a string message as input and returns the sanitized message, where all disallowed characters have been removed. # Input - A single string, `message`, containing the user input to be sanitized. No constraints are given on the length of the message. # Output - A single string representing the sanitized message, with all disallowed characters removed. # Function Signature ```python def sanitize_message(message: str) -> str: # Your code here ``` # Example Input: ``` \\"Hello, World! How\'s everything going @ your side?\\" ``` Output: ``` \\"Hello, World! Hows everything going your side\\" ``` # Explanation In the provided example, the input contains the @ symbol and apostrophe which are not allowed and have been removed in the output. The rest of the characters, which are allowed, remain unchanged. This function ensures that only valid characters make it through to the final message in the chat application.","solution":"def sanitize_message(message: str) -> str: allowed_chars = set(\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 .,!?\\") sanitized_message = \'\'.join(char for char in message if char in allowed_chars) return sanitized_message"},{"question":"Given an array of integers and a target integer, write a function to determine if there are two distinct integers in the array that add up to the target. If such integers exist, return true, otherwise return false. Example 1: Input: array = [2, 7, 11, 15], target = 9 Output: true Explanation: 2 + 7 = 9 Example 2: Input: array = [1, 2, 3, 4], target = 8 Output: false Explanation: No two distinct elements sum up to 8 User Task: Your task is to complete the function checkPairSum() which takes an array of integers and an integer target as inputs and returns a boolean value indicating the presence of such a pair. You do not need to take any input or print anything. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= array.length <= 10^{5} -10^{9} <= array[i], target <= 10^{9}","solution":"def checkPairSum(array, target): Determines if there are two distinct integers in the array that add up to the target. Parameters: array (list of int): The list of integers. target (int): The target sum to check for. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in array: if target - num in seen: return True seen.add(num) return False"},{"question":"Company XYZ organizes a coding competition every year where each participant is given a set of tasks. One of the simplest tasks is to determine if a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Jenny, a participant, needs to quickly determine whether a given number X is prime. Write a program to help her by taking an integer X as input and outputting \\"Prime\\" if X is a prime number, and \\"Not Prime\\" otherwise. -----Constraints----- - X is an integer between 2 and 100 (inclusive). -----Input----- Input is given from Standard Input in the following format: X -----Output----- If X is a prime number, print \\"Prime\\"; otherwise, print \\"Not Prime\\". -----Sample Input----- 7 -----Sample Output----- Prime Explanation: The number 7 is a prime number, so the output should be \\"Prime\\". -----Sample Input----- 10 -----Sample Output----- Not Prime Explanation: The number 10 is not a prime number, so the output should be \\"Not Prime\\".","solution":"def is_prime(X): Determine if the given number X is a prime number. Args: X : int : the input number Returns: str : \\"Prime\\" if X is a prime number, otherwise \\"Not Prime\\" if X <= 1: return \\"Not Prime\\" for i in range(2, int(X**0.5) + 1): if X % i == 0: return \\"Not Prime\\" return \\"Prime\\""},{"question":"> Binary trees are a fundamental data structure used in computer science. In a full binary tree, every node other than the leaves has two children. Write a function that takes in the root node of a full binary tree and returns the number of nodes in the tree.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def count_nodes(root): Returns the number of nodes in a full binary tree. :param root: TreeNode, the root of the binary tree :return: int, the number of nodes if root is None: return 0 return 1 + count_nodes(root.left) + count_nodes(root.right)"},{"question":"Given an integer array `nums` and an integer `k`, you need to find whether there exists a consecutive subarray of length `k` that sums up to `s`. A subarray is a contiguous part of an array. We can define the consecutive subarray as follows: if `nums[i] + nums[i+1] + ... + nums[i+k-1] = s` (where `0 <= i <= n-k`). If such a subarray exists, return True. Otherwise, return False. -----Input----- - The first line of input contains a single integer `t` (1 le t le 10^4) — the number of test cases. For each test case: - The first line contains two integers `n` and `k` (1 le k le n le 10^5) and the integer `s. - The second line contains `n` space-separated integers representing the array `nums`. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output \\"True\\" (without quotes) if there exists a consecutive subarray of length `k` that sums up to `s`, and \\"False\\" otherwise. -----Example----- Input 3 5 3 6 1 2 3 4 5 7 4 14 2 4 2 6 8 2 1 5 2 100 1 2 3 4 5 Output True True False","solution":"def has_consecutive_subarray_sum(nums, k, s): Returns True if there is a consecutive subarray of length k that sums to s, otherwise False. n = len(nums) if n < k: return False # Calculate the sum of the first window of size k current_sum = sum(nums[:k]) # Check if the initial window\'s sum is s if current_sum == s: return True # Slide the window over the rest of the array for i in range(k, n): current_sum += nums[i] - nums[i - k] if current_sum == s: return True return False def process_test_cases(test_cases): Process multiple test cases and return the results. results = [] for n, k, s, nums in test_cases: result = has_consecutive_subarray_sum(nums, k, s) results.append(result) return results"},{"question":"Imagine you are working as a farmer and you have n different types of seeds to plant in your fields. However, due to specific climate conditions, certain seeds can only be planted in certain fields. You are given a list of m constraints, where each constraint specifies that a particular type of seed cannot be planted in a particular field. You need to determine if it is possible to plant each seed in such a way that no constraints are violated, and every field has at least one type of seed planted in it. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000) — the number of seed types and the number of constraints respectively. The next m lines each contain two integers a_i and b_i (1 ≤ a_i ≤ n, 1 ≤ b_i ≤ n), which means that seed type a_i cannot be planted in field b_i. -----Output----- Print \\"YES\\" if it is possible to plant each seed in the fields satisfying all the constraints. Otherwise, print \\"NO\\". -----Examples----- Input 3 2 1 2 3 1 Output YES Input 2 2 1 1 2 2 Output NO -----Note----- In the first example, you can plant seed type 1 in fields 1 and 3, seed type 2 in fields 1 and 3, and seed type 3 in fields 2 and 3. In the second example, with the given constraints, it is impossible to plant seed type 1 in field 1 and seed type 2 in field 2, hence the output is \\"NO\\".","solution":"def can_plant_seeds(n, m, constraints): # Create a list to track which fields are restricted for each seed type restricted_fields = [set() for _ in range(n+1)] # Fill the restricted fields for each seed type based on constraints for a, b in constraints: restricted_fields[a].add(b) # Check each possible arrangement of seed types in the fields for start_field in range(1, n+1): possible = True for seed in range(1, n+1): if start_field in restricted_fields[seed]: possible = False break if possible: return \\"YES\\" return \\"NO\\""},{"question":"Rocky\'s Gym is known for its competitive programming contests. The gym organizes a special challenge called \\"Rocky Run\\". Participants need to pass through multiple checkpoints arranged in a grid. Due to limited resources, some checkpoints may be blocked and cannot be passed through. Rocky wants to ensure that participants can start from the top-left corner of the grid and reach the bottom-right corner. Your task is to help Rocky determine if a path exists from the top-left corner to the bottom-right corner moving only right or down through unblocked checkpoints. Input The first line of the input contains two integers N and M (1 ≤ N, M ≤ 1000) representing the number of rows and columns in the grid respectively. The next N lines contain M characters each. Each character is either \'.\' indicating an unblocked checkpoint or \'#\' indicating a blocked one. Output Output \\"YES\\" if there is a path from the top-left corner to the bottom-right corner, otherwise output \\"NO\\". Example Input 4 4 . # . . . . # . # . . . . # . . Output YES Explanation A possible path through the grid is: (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2) -> (3, 2) -> (3, 3). Constraints - 1 ≤ N, M ≤ 1000 - The starting (0,0) and ending (N-1, M-1) checkpoints are guaranteed to be unblocked. Note Plan your pathfinding algorithm keeping in mind the constraints, specifically focusing on avoiding excessive memory and time usage.","solution":"def can_reach_bottom_right(grid): Determine if a path exists from top-left to bottom-right of the grid. N = len(grid) M = len(grid[0]) def is_valid(x, y): return 0 <= x < N and 0 <= y < M and grid[x][y] == \'.\' from collections import deque queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) directions = [(0, 1), (1, 0)] # Right, Down while queue: x, y = queue.popleft() if x == N-1 and y == M-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a list of n integers. We need to determine whether it is possible to rearrange them such that the difference between any two adjacent numbers is at most 1. Your task is to write a program that checks for one such rearrangement. If it exists, the program should output \\"YES\\" and print one such valid arrangement of the numbers. If no such arrangement is possible, the program should output \\"NO\\". -----Input----- The first line contains an integer n (1 le n le 100) — the number of integers in the list. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 1000) — the elements of the list. -----Output----- If it is possible to rearrange the list such that the difference between any two adjacent numbers is at most 1, print \\"YES\\" in the first line and one valid arrangement of the numbers in the second line. If it is not possible, print \\"NO\\". -----Examples----- Input 5 4 3 2 3 4 Output YES 2 3 3 4 4 Input 3 1 5 3 Output NO -----Note----- In the first example, one valid arrangement is 2, 3, 3, 4, 4. The difference between any two adjacent numbers in this arrangement is at most 1. In the second example, no valid arrangements exist because it is impossible to position the numbers such that the difference between any two adjacent numbers is at most 1.","solution":"def rearrange_possible(n, arr): Checks if it is possible to rearrange the list such that the difference between any two adjacent numbers is at most 1 and returns the appropriate result. arr.sort() for i in range(n - 1): if arr[i + 1] - arr[i] > 1: return \\"NO\\", [] return \\"YES\\", arr"},{"question":"You are given the responsibility of managing a warehouse. The warehouse has a limited capacity, and you have to determine the maximum value of goods you can store without exceeding this capacity. The warehouse has a capacity `W` and you are given `n` items with their weights and values. You need to select items to maximize the total value without exceeding the capacity `W`. Write a function `knapsack(n, W, items)` where: - `n` is the number of items. - `W` is the capacity of the warehouse. - `items` is a list of tuples where each tuple contains two integers - the weight and value of the item, i.e. `(weight, value)`. The function should return the maximum total value that can be stored in the warehouse. -----Input----- The function has the following parameters: 1. An integer `n` - the number of items. 2. An integer `W` - the capacity of the warehouse. 3. A list `items` of size `n` containing tuples of integers, where each tuple `(weight, value)` represents the weight and value of an item. You need to parse the input from the standard input. -----Output----- Return a single integer, which is the maximum total value of goods that can be stored in the warehouse. -----Example----- Input: 4 50 [(10, 60), (20, 100), (30, 120), (40, 240)] Output: 300 -----Note----- In the example, the warehouse has a capacity of 50 units: - Selecting the first and second items (10 + 20 <= 50) yields a total value of 60 + 100 = 160 - Selecting the first and third items (10 + 30 <= 50) yields a total value of 60 + 120 = 180 - Selecting the second and third items (20 + 30 <= 50) yields a total value of 100 + 120 = 220 - Selecting the fourth item alone (40 <= 50) yields a value of 240 The optimal solution is to select the second and fourth items yielding a total value of 240 + 60 = 300. For each item, you can either include it in your selection or exclude it (0-1 knapsack problem). You cannot take partial items.","solution":"def knapsack(n, W, items): Returns the maximum total value that can be stored in the warehouse. Args: n (int): Number of items. W (int): Capacity of the warehouse. items (list of tuple): List of tuples where each tuple contains weight and value of an item. Returns: int: Maximum total value of goods that can be stored in the warehouse. dp = [[0 for _ in range(W+1)] for _ in range(n+1)] for i in range(1, n+1): weight, value = items[i-1] for w in range(W+1): if weight <= w: dp[i][w] = max(dp[i-1][w], dp[i-1][w-weight] + value) else: dp[i][w] = dp[i-1][w] return dp[n][W]"},{"question":"A street in the city has exactly n houses lined up in a row. Each house has a certain value which represents its wealth. There is also an integer k which represents the maximum number of houses a person can choose to rob on that street, but these houses cannot be next to each other to avoid alerting the neighbors. Given the wealth values of the houses, find the maximum amount of wealth a person can rob without robbing two adjacent houses and without robbing more than k houses in total. Input The first line contains two space-separated integers n and k (2 ≤ k ≤ n ≤ 10^4), where n is the number of houses and k is the maximum number of houses a person can rob. The second line contains n space-separated integers representing the wealth values of each house. Each value is a non-negative integer and does not exceed 10^4. Output Output a single integer representing the maximum amount of wealth that can be robbed under the given conditions. Examples Input 6 2 5 1 1 5 10 2 Output 15 Input 5 3 4 3 5 1 6 Output 15 Input 4 1 4 3 2 1 Output 4 Note In the first sample, the maximum wealth can be robbed by choosing houses with wealth values 5 and 10. In the second sample, choosing houses with values 4, 5, and 6 gives the maximum wealth. In the third sample, since only one house can be robbed, the maximum wealth is from the house with wealth value 4.","solution":"def max_wealth(n, k, wealth): Returns the maximum amount of wealth that can be robbed without robbing two adjacent houses and without robbing more than k houses. if k == 1: return max(wealth) dp = [[0 for _ in range(k+1)] for _ in range(n+1)] for i in range(1, n+1): for j in range(1, k+1): dp[i][j] = max(dp[i-1][j], wealth[i-1] + (dp[i-2][j-1] if i > 1 else 0)) return dp[n][k]"},{"question":"Given an array of integers, find the pair of elements that have the smallest absolute difference between them and return that difference. ------ Input Format ------ - First line contains an integer N, the number of elements in the array. - Second line contains N space-separated integers representing the array elements. ------ Output Format ------ Output the smallest absolute difference between any two elements in the array. ------ Constraints ------ 2 ≤ N ≤ 1000 -10^6 ≤ A[i] ≤ 10^6 for each element A[i] in the array. ----- Sample Input 1 ------ 5 3 8 -10 23 19 ----- Sample Output 1 ------ 5 ----- Sample Input 2 ------ 4 1 2 3 4 ----- Sample Output 2 ------ 1 ----- Explanation ------ In Sample Input 1, the smallest absolute difference is between the pair (23, 19) with a difference of 4. In Sample Input 2, the smallest absolute difference is between any two consecutive numbers, all yielding the same difference of 1.","solution":"def smallest_absolute_difference(arr): Returns the smallest absolute difference between any two elements in the array. arr.sort() # Sort the array first min_difference = float(\'inf\') # Iterate through sorted array and find the minimum difference for i in range(len(arr) - 1): difference = abs(arr[i] - arr[i + 1]) if difference < min_difference: min_difference = difference return min_difference"},{"question":"Task Write a function that takes a string containing only digits and returns a new string with the digits sorted in ascending order. If the input string is empty, the function should return an empty string. Examples ```python \\"3141592653\\" => \\"1123345569\\" \\"9876543210\\" => \\"0123456789\\" \\"\\" => \\"\\" ``` Ensure your function handles edge cases, such as an empty string, and strings with duplicate digits correctly.","solution":"def sort_digits(s): Returns a new string with the digits sorted in ascending order. Parameters: s (str): A string containing only digits. Returns: str: A new string with the digits sorted in ascending order. return \'\'.join(sorted(s))"},{"question":"Peter and Paul are working on organizing the books in their library. The library has a unique shelving system where each shelf can hold a maximum of 10 books. The books on each shelf are indexed from 1 to 10. To help them sort the books quickly, they need a program that can find the position and the shelf ID of any given book in the library. The library has a maximum of 100 shelves and the books are numbered consecutively from 1 up to the maximum capacity of the library (i.e., up to 1000 books). Each book can be identified by its unique book number. # Input: - The first line of input contains a single integer `Q`, denoting the number of queries. - Each of the next `Q` lines contains a single integer `B`, the book number whose shelf ID and position needs to be found. # Output: - The output should contain exactly `Q` lines each containing the shelf ID and the position of the corresponding book in the format `ShelfID-Position`. # Constraints: - 1 ≤ Q ≤ 50 - 1 ≤ B ≤ 1000 # Examples: **Input:** ``` 3 1 15 25 ``` **Output:** ``` 1-1 2-5 3-5 ``` (Explanation: Book 1 is on Shelf 1 at Position 1, Book 15 is on Shelf 2 at Position 5, and Book 25 is on Shelf 3 at Position 5.)","solution":"def find_shelf_and_position(Q, queries): results = [] for B in queries: shelf_id = (B - 1) // 10 + 1 position = (B - 1) % 10 + 1 results.append(f\\"{shelf_id}-{position}\\") return results"},{"question":"Tamara is preparing a grand feast for a festival, and she needs to bake n cakes with specific sweetness levels s_1, s_2, ..., s_n. However, Tamara\'s oven can bake only one cake at a time. Each cake has a required temperature t_i to reach its desired sweetness level. Each time Tamara bakes a cake, the oven consumes one unit of energy per minute. The oven has a unique feature: it can adjust the baking temperature in a continuous range. If a cake with initial sweetness s_i needs to reach final sweetness s_i at temperature t_i, it will take exactly t_i minutes to bake fully. To minimize energy consumption and optimize the baking process, Tamara can decide the order in which she bakes her cakes. She wants to find the optimal sequence of baking cakes that minimizes the total energy consumption while ensuring all cakes are baked to their desired sweetness levels. Could you help Tamara determine the minimum total energy required to bake all the cakes? -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 10^5), representing the number of cakes. The second line contains n integers t_1, t_2, ..., t_n (1 ≤ t_i ≤ 10^9), representing the required baking temperatures for each cake. It\'s guaranteed that for each i < j, t_i < t_j. -----Output----- Output a single integer representing the minimum total energy required to bake all the cakes. -----Examples----- Input 4 2 3 5 7 Output 17 Input 3 1 10 20 Output 31","solution":"def minimum_total_energy(n, temperatures): Given an array of temperatures required for baking each cake in the oven, find the minimum total energy required to bake all the cakes, with one cake being baked at a time. Args: n : int: Number of cakes. temperatures : List[int]: List of required temperatures for each cake. Returns: int: Minimum total energy required to bake all cakes. # If no cakes, no energy is needed if n == 0: return 0 # Since temperatures are sorted in ascending order, the total energy used is the sum of all temperatures total_energy = sum(temperatures) return total_energy"},{"question":"The annual coding competition in Sampletown features a unique problem: contestants are given a string of digits and must form the largest possible integer by removing a specified number of digits. The digits removed do not need to be contiguous. Your task is to help the contestants by writing a program that solves this problem optimally. -----Input----- The first line contains two integers N and K separated by a space (1 leq K < N leq 100000): the length of the string of digits and the number of digits to remove. The second line contains the string of N digits (0 leq text{digit} leq 9). -----Output----- Print the largest possible integer obtainable by removing exactly K digits. -----Examples----- Sample Input: 9 3 123456789 Sample Output: 456789 Sample Input: 5 2 54321 Sample Output: 543","solution":"def largest_possible_integer(N, K, digits): Removes K digits from the digit string to form the largest possible integer. stack = [] for digit in digits: while K > 0 and stack and stack[-1] < digit: stack.pop() K -= 1 stack.append(digit) # If there\'s remaining k, pop the last k elements if K > 0: stack = stack[:-K] return \'\'.join(stack) # Example Usage N = 9 K = 3 digits = \'123456789\' print(largest_possible_integer(N, K, digits)) # Outputs: 456789"},{"question":"You have a set of weights (in kilograms) and you need to determine the minimum number of weights required to cumulatively measure up to a target weight. You should use a greedy approach to solve this problem. Your jealous colleague inadvertently altered some lines of your Python code meant to do this. Your task is to fix the code so that it runs correctly and efficiently!","solution":"def min_weights(weights, target): Determine the minimum number of weights required to cumulatively measure up to a target weight. This function uses a greedy approach. Parameters: weights (list of int): List of weights available. target (int): The target weight to be measured. Returns: int: The minimum number of weights required to measure the target weight. weights.sort(reverse=True) num_weights = 0 current_sum = 0 for weight in weights: while current_sum + weight <= target: current_sum += weight num_weights += 1 if current_sum == target: return num_weights if current_sum != target: return float(\'inf\') # target weight cannot be measured with given weights return num_weights"},{"question":"Given a string of text, create a function that finds the longest substring which contains at most two distinct characters. # Input - A single line of text containing lowercase English letters (1 ≤ Length of text ≤ 10^5). # Output - Print the longest substring that contains at most two distinct characters. # Example Sample Input abbcccdddaaa Sample Output cccddd # Explanation In the sample input, \\"cccddd\\" is the longest substring containing at most two distinct characters (\'c\' and \'d\'). While \\"bbcccdddaaa\\" contains more characters overall, it has three distinct characters (\'b\', \'c\', and \'d\') making it invalid by the problem constraints. # Notes: - If there are multiple substrings with the same length, output any one of them.","solution":"def longest_substring_two_distinct(s): Returns the longest substring which contains at most two distinct characters. if len(s) == 0: return \\"\\" start, max_len, max_substr = 0, 0, \\"\\" char_count = {} for end in range(len(s)): if s[end] in char_count: char_count[s[end]] += 1 else: char_count[s[end]] = 1 while len(char_count) > 2: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 current_len = end - start + 1 if current_len > max_len: max_len = current_len max_substr = s[start:end + 1] return max_substr"},{"question":"Given a sequence of integers, determine if it contains a contiguous subsequence of exactly K numbers that have a sum divisible by D. Constraints * 1 ≤ length of sequence ≤ 300 * -10^5 ≤ each integer in the sequence ≤ 10^5 * 1 ≤ K ≤ length of sequence * 1 ≤ D ≤ 1000 Input length_of_sequence integers_in_sequence K D Output Print \\"YES\\" if there is a contiguous subsequence of length K whose sum is divisible by D. Otherwise, print \\"NO\\". Examples Input 6 2 7 5 3 1 9 3 2 Output YES Input 5 1 2 3 4 5 2 4 Output NO","solution":"def has_contiguous_subsequence_divisible_by_k_d(length_of_sequence, integers_in_sequence, K, D): Determines if there is a contiguous subsequence of length K in the given sequence of integers whose sum is divisible by D. Parameters: - length_of_sequence (int): The length of the sequence - integers_in_sequence (list of int): The sequence of integers - K (int): The length of the subsequence - D (int): The divisor Returns: - str: \\"YES\\" if such a subsequence exists, \\"NO\\" otherwise for i in range(length_of_sequence - K + 1): subsequence_sum = sum(integers_in_sequence[i:i+K]) if subsequence_sum % D == 0: return \\"YES\\" return \\"NO\\""},{"question":"Given an NxM matrix Mat. Rotate the matrix by 90 degrees in a clockwise direction. Example 1: Input: N=3, M=3 Mat=[[1,2,3], [4,5,6], [7,8,9]] Output: 7 4 1 8 5 2 9 6 3 Explanation: Rotating the matrix by 90 degrees clockwise gives this result. Example 2: Input: N=2, M=3 Mat=[[1,2,3], [4,5,6]] Output: 4 1 5 2 6 3 Explanation: Rotating the matrix by 90 degrees clockwise gives this result. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateMatrix() which takes the integers N, M and the matrix Mat as input parameters and returns the rotated matrix. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1<=N, M<=1000 1<=Mat[i][j]<=10^{5}","solution":"def rotateMatrix(N, M, Mat): Rotate the given NxM matrix by 90 degrees clockwise. :param N: Number of rows in the matrix :param M: Number of columns in the matrix :param Mat: The matrix to be rotated :return: Rotated matrix # Create a new matrix with dimensions MxN (transposed dimensions) rotated = [[0] * N for _ in range(M)] for i in range(N): for j in range(M): rotated[j][N-1-i] = Mat[i][j] return rotated"},{"question":"Hi all, Today\'s challenge involves prime numbers and a bit of string manipulation. You are given a positive integer `n`. Your task is to write a function `find_nth_prime(n)` that finds the `n`-th prime number and then returns a string composed of the first `n` characters of the string representation of that prime number. For example: - If `n = 1`, the 1st prime number is 2, and the first 1 character of \\"2\\" is \\"2\\". - If `n = 5`, the 5th prime number is 11, and the first 5 characters of \\"11\\" are \\"11\\". - If `n = 10`, the 10th prime number is 29, and the first 10 characters of \\"29\\" are \\"29\\". If the integer for the number of characters requested exceeds the actual length of the prime number string, simply return the entire string representation of the prime number. Remember, creativity counts! Be efficient with your code, as we value both clarity and performance. Good luck, and happy coding!","solution":"def find_nth_prime(n): Finds the `n`-th prime number and returns a string composed of first `n` characters of the string representation of that prime number. def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True count, candidate = 0, 1 while count < n: candidate += 1 if is_prime(candidate): count += 1 prime_str = str(candidate) return prime_str[:n] if n <= len(prime_str) else prime_str"},{"question":"Maria loves solving puzzles, and her latest challenge involves a series of locks that can only be opened by arranging them in a specific sequence. Each lock has its own required sequence of numbers, and each sequence forms an arithmetic progression. The sequence must have a specific length, a given first term, and a given common difference between consecutive terms. Your task is to help Maria by verifying if her attempted sequence for each lock is correct. -----Input----- The input starts with an integer t (1 <= t <= 100), the number of test cases. Each test case consists of four lines: 1. An integer 1 <= n <= 1000, representing the length of the required sequence. 2. An integer a (-100000 <= a <= 100000), the first term of the arithmetic progression. 3. An integer d (-100000 <= d <= 100000), the common difference. 4. A line containing n integers, representing Maria\'s attempted sequence. -----Output----- For each test case, print \\"YES\\" if Maria\'s sequence matches the required arithmetic progression, or \\"NO\\" if it does not. -----Example----- Input: 2 5 1 2 1 3 5 7 9 4 3 -2 3 1 -1 -3 Output: YES YES","solution":"def verify_sequences(t, test_cases): results = [] for i in range(t): n, a, d, attempted_sequence = test_cases[i] required_sequence = [a + j * d for j in range(n)] if attempted_sequence == required_sequence: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given an array of integers, `arr`, and an integer `k`, implement a function `canPartitionKSubsets(arr, k)` that determines if it is possible to partition the array into `k` non-empty subsets whose sums are all equal. ----Function Signature---- ```python def canPartitionKSubsets(arr: List[int], k: int) -> bool: ``` ----Input---- - The input consists of a list of integers, `arr` (1 ≤ len(arr) ≤ 16, 1 ≤ arr[i] ≤ 10^4), and an integer, `k` (1 ≤ k ≤ len(arr)) ----Output---- - The function should return `True` if it is possible to partition the array into `k` non-empty subsets with equal sum, otherwise return `False`. ----Example Input---- ```python canPartitionKSubsets([4, 3, 2, 3, 5, 2, 1], 4) ``` ----Example Output---- ```python True ``` ----Explanation---- It is possible to partition the array into 4 subsets of equal sum: - [5] - [1, 4] - [2, 3] - [2, 3]","solution":"from typing import List def canPartitionKSubsets(arr: List[int], k: int) -> bool: total_sum = sum(arr) # If the total sum is not divisible by k, we cannot partition into k equal subsets if total_sum % k != 0: return False target_sum = total_sum // k used = [False] * len(arr) def backtrack(start_index, number_of_subsets, current_sum): if number_of_subsets == 0: return True if current_sum == target_sum: return backtrack(0, number_of_subsets - 1, 0) for i in range(start_index, len(arr)): if not used[i] and current_sum + arr[i] <= target_sum: used[i] = True if backtrack(i + 1, number_of_subsets, current_sum + arr[i]): return True used[i] = False return False return backtrack(0, k, 0)"},{"question":"You are developing a new application that requires managing a list of tasks. Each task has a due date and a priority level. The due date of each task is given as a number that represents days from today, and the priority is given as an integer, where higher numbers indicate higher priority. Your objective is to implement a function that, given a list of tasks, sorts them primarily by due date (earliest due date first) and secondarily by priority (highest priority first in case of the same due date). -----Input----- The first line contains an integer t (1 le t le 100), the number of test cases. For each test case: - The first line contains an integer n (1 le n le 1000), the number of tasks. - The next n lines each contain two integers d and p (1 le d le 1000, 1 le p le 1000), where d is the due date, and p is the priority of the task. -----Output----- For each test case, output the sorted list of tasks. Each task should be printed on a new line in the format \\"d p\\", with tasks ordered first by due date (ascending), and then by priority (descending) for tasks with the same due date. -----Example----- Input 2 3 3 10 1 5 1 8 4 4 2 3 4 2 6 2 8 Output 1 8 1 5 3 10 2 8 2 6 3 4 4 2 -----Note----- In the first test case, the tasks are initially, (3,10), (1,5), and (1,8). Sorting by due date will prioritize tasks with due dates 1 and 1, then by priority within those due dates gives (1,8) before (1,5). After sorting by due dates (and secondarily by priority), the final order is (1,8), (1,5), (3,10). In the second test case, tasks are sorted first by due date (2,8), then (2,6), followed by (3,4), and (4,2) with the same priorities and ascending order of days.","solution":"def sort_tasks(task_list): Sorts the tasks first by due date in ascending order, then by priority in descending order for tasks with the same due date. :param task_list: List of tuples where each tuple contains (due_date, priority) :return: Sorted list of tasks return sorted(task_list, key=lambda x: (x[0], -x[1])) def process_input_data(input_data): Processes the input data for multiple test cases and returns sorted tasks for each test case. :param input_data: String containing input data :return: List of lists, each containing the sorted tasks for a test case lines = input_data.strip().split(\'n\') t = int(lines[0]) index = 1 results = [] for _ in range(t): n = int(lines[index]) tasks = [] index += 1 for _ in range(n): d, p = map(int, lines[index].split()) tasks.append((d, p)) index += 1 sorted_tasks = sort_tasks(tasks) results.append(sorted_tasks) return results"},{"question":"Given a list of integers, find the smallest missing positive integer. The task must be performed with a time complexity of O(n) and using constant space. Assume the list may contain duplicate values and negative numbers. Example 1: Input: arr = [1, 2, 0] Output: 3 Explanation: The smallest missing positive integer is 3. Example 2: Input: arr = [3, 4, -1, 1] Output: 2 Explanation: The smallest missing positive integer is 2. Example 3: Input: arr = [7, 8, 9, 11, 12] Output: 1 Explanation: The smallest missing positive integer is 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMissingPositive` which takes a single list of integers `arr` and returns the smallest missing positive integer. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: - 1 <= length of the array <= 10^5 - -10^6 <= elements of the array <= 10^6","solution":"def findMissingPositive(arr): n = len(arr) # Step 1: Segregate positive numbers from non-positive numbers for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] # Step 2: Identify the smallest missing positive integer for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"You are given an array of integers. Write a function that identifies the \\"peak elements\\" in the array. A peak element is one that is strictly greater than its neighbors. For corner elements, we need to consider only one neighbor. The function should return a list of the peak elements in the order they appear in the array. If multiple peak elements exist, all should be included in the result. # INPUT - The first line of input contains an integer T, the number of test cases. - Each test case begins with an integer N, the length of the array. - The next line contains N space-separated integers, representing the elements of the array. # OUTPUT - For each test case, output a single line containing space-separated integers, the peak elements of the array. # CONSTRAINTS - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - -10^6 ≤ array[i] ≤ 10^6 # SAMPLE INPUT ``` 2 6 1 3 2 7 9 6 5 10 20 15 2 23 ``` # SAMPLE OUTPUT ``` 3 9 20 23 ``` Ensure to handle the edge cases where the array has only one element or all elements are equal.","solution":"def find_peaks(test_cases): results = [] for case in test_cases: n, arr = case peaks = [] for i in range(n): if (i == 0 and n > 1 and arr[i] > arr[i + 1]) or (i == n - 1 and n > 1 and arr[i] > arr[i - 1]) or (0 < i < n - 1 and arr[i] > arr[i - 1] and arr[i] > arr[i + 1]): peaks.append(arr[i]) elif n == 1: peaks.append(arr[i]) results.append(peaks) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(input_lines[index]) array = list(map(int, input_lines[index + 1].split())) test_cases.append((N, array)) index += 2 return test_cases def output_peaks(peaks_list): return [\\" \\".join(map(str, peaks)) for peaks in peaks_list]"},{"question":"You are given a list of words and a pattern string. Your goal is to write a function that finds all words in the list that match the pattern string. A word matches the pattern if there exists a permutation of letters in the pattern such that the word can be transformed into the pattern by substituting each letter independently. Note that the same letter in pattern must match to the same letter in the word. Write a function that takes a list of words and a pattern string, and returns a list of words from the input list that match the pattern. **Input:** - `words`: a list of strings, where each string is a lowercase word. - `pattern`: a string representing the pattern. **Output:** - A list of strings which are the words that match the given pattern. **Example:** ```python def find_and_replace_pattern(words: List[str], pattern: str) -> List[str]: # Your implementation here # Example words = [\\"abc\\", \\"deq\\", \\"mee\\", \\"aqq\\", \\"dkd\\", \\"ccc\\"] pattern = \\"abb\\" print(find_and_replace_pattern(words, pattern)) # Output: [\\"mee\\", \\"aqq\\"] ``` **Constraints:** - The length of each word and the pattern string is at most 20. - Each word and the pattern string consist of lowercase English letters.","solution":"def find_and_replace_pattern(words, pattern): def match(word): letter_map = {} used_letters = set() for w, p in zip(word, pattern): if p in letter_map: if letter_map[p] != w: return False else: if w in used_letters: return False letter_map[p] = w used_letters.add(w) return True return [word for word in words if match(word)]"},{"question":"Jack has a collection of rare books and he wants to organize them in the most space-efficient way on his shelf. The shelf has a certain fixed length, and each book has a unique width. Jack cannot place a book sideways or stack books on top of each other – they must all be placed side by side. Given the lengths of the books and the length of the shelf, determine the maximum number of books that Jack can fit on the shelf. Constraint: - The number of books, N, is between 1 and 1000. - The length of the shelf, L, and the width of each book are between 1 and 10000. Input: The first line of input consists of an integer L, the length of the shelf. The second line contains an integer N, the number of books. The third line contains N integers, representing the widths of the books. Output: Output a single integer, representing the maximum number of books that can be placed on the shelf. Example: Input: 10 4 4 3 5 7 Output: 2 Explanation: Jack can place up to two books on the shelf, choosing the widths 3 and 7 (or 4 and 5, etc.), which sum up to 10, the length of the shelf.","solution":"def max_books_on_shelf(L, N, widths): Determine the maximum number of books that can fit on the shelf. Parameters: L (int): Length of the shelf. N (int): Number of books. widths (list of int): Widths of the books. Returns: int: Maximum number of books that can fit on the shelf. widths.sort() # Sort the widths in ascending order to try to fit the smallest books first total_width = 0 count = 0 for i in range(N): if total_width + widths[i] <= L: total_width += widths[i] count += 1 else: break return count"},{"question":"Your task is to create a function `second_largest` that takes an array/list of integers `nums` as input and returns the second largest number in that array/list. In case there are duplicate numbers that are the largest, the function should still return the second distinct largest number. #Examples ```python second_largest([4, 6, 2, 1, 9, 9, 63, 566]) returns 63 second_largest([3, 3, 3, 3, 3]) returns None second_largest([1, 5, 5, 5, 4, 0, 0, 0, -1, -3]) returns 4 second_largest([10, 20, 20, 10, 30, 40, 40, 50, 50]) returns 40 ``` #Notes - If the array/list has less than 2 distinct elements, the function should return `None`.","solution":"def second_largest(nums): Returns the second largest number from a list of integers. If there are not enough distinct numbers, returns None. unique_nums = list(set(nums)) # Remove duplicates unique_nums.sort(reverse=True) # Sort in descending order if len(unique_nums) < 2: return None else: return unique_nums[1]"},{"question":"You are working on a shipping logistics system where you need to optimize the transport of goods between various warehouses. The system must determine the minimum number of cargo transfers required to move goods from one specific warehouse to another by utilizing available direct routes. The warehouses and routes can be modeled as a graph with nodes representing the warehouses and edges representing the direct routes between them. Each transfer represents moving goods along one edge. While there may be multiple routes between two warehouses, your goal is to find the shortest possible transfer path. Input The first line contains two integers, n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of warehouses (nodes) and the number of direct routes (edges), respectively. The next m lines each contain two integers, u and v (1 ≤ u, v ≤ n, u ≠ v) describing a direct route between warehouses u and v. The last line contains two integers, s and t (1 ≤ s, t ≤ n, s ≠ t) — the source warehouse s and the destination warehouse t. Output Print one integer — the minimum number of cargo transfers required to move goods from warehouse s to t. If there is no path from s to t, print -1. Examples Input 5 6 1 2 1 3 2 3 2 4 3 4 4 5 1 5 Output 3 Input 4 2 1 2 3 4 1 3 Output -1","solution":"from collections import deque def min_transfers(n, m, edges, s, t): Returns the minimum number of cargo transfers required to move goods from warehouse s to t. If there is no path from s to t, returns -1. graph = {i: [] for i in range(1, n+1)} # Build the graph for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path queue = deque([(s, 0)]) visited = set([s]) while queue: current_node, transfers = queue.popleft() if current_node == t: return transfers for neighbor in graph[current_node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, transfers + 1)) return -1"},{"question":"You are tasked with determining if a given alphanumeric string contains equal counts of digits and letters. For example: - \\"a1b2\\" is valid because it contains two letters (a, b) and two digits (1, 2). - \\"abc123\\" is invalid because it contains three letters (a, b, c) and three digits (1, 2, and 3), but more than six characters in total. You must implement the function **checkBalance** that accepts a string `s` and returns 1 if the string is valid, i.e., has equal numbers of letters and digits, else returns 0. Example 1: Input: s = \\"a1b2\\" Output: 1 Example 2: Input: s = \\"ab12c\\" Output: 0 Your Task: Since this is a function problem, you don\'t need to take any input. Just complete the function **checkBalance(string s)** that outputs 1 if the string is valid, else it outputs 0. In a new line, print 1 if the string is valid else print 0. Expected Time Complexity: O(|s|) Expected Auxiliary Space: O(1) Constraints: 1 <= |s| <= 100","solution":"def checkBalance(s): Function to check if a given alphanumeric string contains equal counts of digits and letters. Arguments: s -- input string Returns: 1 if the string has equal counts of digits and letters, 0 otherwise. count_letters = 0 count_digits = 0 for char in s: if char.isdigit(): count_digits += 1 elif char.isalpha(): count_letters += 1 return 1 if count_letters == count_digits else 0"},{"question":"You have been tasked with developing a system to manage the inventory for a small retail store. The store receives daily stock deliveries of various items represented as unique IDs, and it can also sell items throughout the day. The goal is to create a program that tracks the store’s inventory and checks if any item is sold more than it exists in the inventory, which would indicate an error. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case starts with two integers N and M. N represents the number of stock delivery operations, and M represents the number of sales operations. The next N lines contain two space-separated integers representing each delivery, where the first integer is the item ID and the second integer is the quantity delivered. The following M lines contain two space-separated integers representing each sale, where the first integer is the item ID and the second integer is the quantity sold. ------ Output ------ For each test case, output a single line containing \\"YES\\" if all sales operations are valid, or \\"NO\\" if there is at least one sale of an item exceeding its inventory. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 1 ≤ text{Item ID} ≤ 10^{4} 1 ≤ text{Quantity} ≤ 10^{6} ------ Sample Input 1 ------ 2 3 3 101 10 102 20 103 15 101 5 102 25 103 10 2 2 201 50 202 30 201 20 202 10 ------ Sample Output 1 ------ NO YES ------ Explanation 1 ------ Case 1: - Delivered: 101 (10), 102 (20), 103 (15) - Sold: 101 (5), 102 (25), 103 (10) Item 102 is sold more than the available stock, so the output is \\"NO\\". Case 2: - Delivered: 201 (50), 202 (30) - Sold: 201 (20), 202 (10) All sales operations are valid, so the output is \\"YES\\".","solution":"def inventory_management(test_cases): Process multiple test cases to determine if sales exceed inventory for each test case. :param test_cases: List of test cases with each test case in the form of (deliveries, sales) :return: List of strings \\"YES\\" or \\"NO\\" for each test case. results = [] for deliveries, sales in test_cases: inventory = {} # Process deliveries for item_id, quantity in deliveries: if item_id in inventory: inventory[item_id] += quantity else: inventory[item_id] = quantity # Process sales valid_sales = True for item_id, quantity in sales: if item_id not in inventory or inventory[item_id] < quantity: valid_sales = False break else: inventory[item_id] -= quantity if valid_sales: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): Parse the input string and return the structured test cases. :param input_string: Input string describing the test cases :return: List of parsed test cases lines = input_string.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N, M = map(int, lines[index].split()) index += 1 deliveries = [] sales = [] for _ in range(N): item_id, quantity = map(int, lines[index].split()) deliveries.append((item_id, quantity)) index += 1 for _ in range(M): item_id, quantity = map(int, lines[index].split()) sales.append((item_id, quantity)) index += 1 test_cases.append((deliveries, sales)) return test_cases"},{"question":"Anna is an avid gardener with a vast collection of plant species. She has a garden of dimension m times n, represented as a matrix where each cell is either a plant (denoted by 1) or empty soil (denoted by 0). Anna wants to water all her plants but she needs to minimize her effort. She can water all plants in any row or column by placing a sprinkler at the beginning of that row or column. The sprinkler can water all cells in that row or column in one go. Write a function `min_sprinklers(matrices: List[List[List[int]]]) -> List[int]` that calculates the minimum number of sprinklers needed for each given garden matrix such that every plant in the garden gets watered. The function will receive an input list of matrices, each representing a garden, and should return a list of integers, where each integer is the minimum number of sprinklers required for the corresponding garden matrix. ----Input---- The input consists of a list of garden matrices. Each matrix is in the form: ```python [ [int, int, ...], [int, int, ...], ... ] ``` The number of gardens (test cases) is g (1 le g le 10^2), each having dimensions m times n (1 le m, n le 10^2). Each value in the matrix is either 1 (plant) or 0 (empty soil). ----Output---- The function should return a list of integers. Each integer represents the minimum number of sprinklers needed to ensure every plant gets watered in the corresponding garden matrix. ----Example---- Input ```python [ [ [1, 0, 0], [0, 1, 1], [1, 0, 0] ], [ [1, 1, 0], [0, 0, 0], [1, 0, 1] ] ] ``` Output ```python [3, 2] ``` ----Explanation---- For the first garden matrix: Anna can place sprinklers to water the first row, the second column, and the third row. This will result in all plants being watered with 3 sprinklers. For the second garden matrix: Anna can place a sprinkler to water the first row and the third row, which will result in all plants being watered with 2 sprinklers.","solution":"from typing import List def min_sprinklers(matrices: List[List[List[int]]]) -> List[int]: results = [] for matrix in matrices: m = len(matrix) n = len(matrix[0]) row_covered = [False] * m col_covered = [False] * n for i in range(m): for j in range(n): if matrix[i][j] == 1: row_covered[i] = True col_covered[j] = True # Number of rows and columns that need sprinklers row_sprinklers = sum(row_covered) col_sprinklers = sum(col_covered) # Minimum of rows or columns to cover all plants min_sprinklers_needed = min(row_sprinklers, col_sprinklers) results.append(min_sprinklers_needed) return results"},{"question":"Dijkstra is trying to implement optimal paths between various servers in a network. Each server is represented by a node in a directed graph, and each connection between servers is represented by a directed edge with an associated non-negative weight (time delay). Given the adjacency matrix representation of the graph, Dijkstra wants to determine the minimum time delay to get from a given starting server (node) to all other servers. Implement an algorithm that computes the shortest path from the starting server to every other server using Dijkstra\'s algorithm. -----Input----- The first line contains two integers, n and m (1 leq n leq 1000, 0 leq m leq n times (n-1)/2), representing the number of servers (nodes) and the number of connections (edges) respectively. The next m lines each contain three integers u, v, and w (1 leq u, v leq n, 0 leq w leq 1000), representing a directed edge from server u to server v with a time delay of w. The last line contains an integer s (1 leq s leq n) representing the starting server. -----Output----- Output n space-separated integers, where the i-th integer is the minimum time delay to get from the starting server s to server i. If server i is not reachable from the starting server s, output -1 for that server. -----Examples----- Input 5 7 1 2 10 1 3 5 2 3 2 3 2 3 2 4 1 3 4 9 4 5 4 1 Output 0 8 5 9 13 Input 4 4 1 2 5 1 3 10 2 4 2 3 4 1 1 Output 0 5 10 7 -----Note----- Consider the second example. The adjacency matrix is as follows: begin{matrix} 0 & 5 & 10 & infty infty & 0 & infty & 2 infty & infty & 0 & 1 infty & infty & infty & 0 end{matrix} The shortest paths from server 1 are: - To server 1: 0 (starting point) - To server 2: 5 (direct edge) - To server 3: 10 (direct edge) - To server 4: 7 (1 -> 2 -> 4)","solution":"import heapq def dijkstra(n, m, edges, s): Implementation of Dijkstra\'s algorithm to find the shortest path in a graph. Parameters: n (int): Number of nodes. m (int): Number of edges. edges (list of tuples): Each tuple (u, v, w) represents a directed edge from node u to node v with weight w. s (int): The starting node. Returns: list[int]: List of minimum time delays to get from the starting node to each other node. If a node is unreachable, the time delay for that node is -1. # Create adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) # Initialize distances and priority queue distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) # Convert distances to the required format result = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"Given a list of integers, you are required to find the longest contiguous subarray (containing at least one number) which has the maximum sum. INPUT: - First line contains an integer T representing the number of test cases. - Each test case consists of two lines: - The first line contains an integer n, representing the number of elements in the list. - The second line contains n space-separated integers representing the elements of the list. OUTPUT: For each test case, print a single line containing the maximum sum of the contiguous subarray. Note: - A subarray is a contiguous part of an array. - The elements of the list may include both positive and negative numbers. SAMPLE INPUT 2 5 1 -2 3 4 -5 4 -1 -2 -3 -4 SAMPLE OUTPUT 7 -1 Explanation: For the first test case, the subarray [3, 4] has the maximum sum, which is 7. For the second test case, the subarray [-1] has the maximum sum, which is -1.","solution":"def max_subarray_sum(arr): Function to find the maximum sum of a contiguous subarray. Implements Kadane\'s Algorithm. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far def process_test_cases(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_subarray_sum(arr)) return results"},{"question":"A robot is placed on a 2D grid at the coordinates (0, 0). The robot can move in four directions: up, down, left, and right. Its movements are controlled by a sequence of commands. Each command tells the robot to move one step in one of the four directions. You are given a string of commands, where each character in the string represents a movement direction (\'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right). Write a program to determine the robot\'s final position on the grid after executing all the commands. Input The first line contains an integer n (1 ≤ n ≤ 105) — the length of the command string. The second line contains a string of n characters, where each character is one of \'U\', \'D\', \'L\', or \'R\'. Output Print two integers x and y — the final coordinates of the robot. Examples Input 5 UUDLR Output 0 1 Input 10 UUUDDDLLRR Output 0 0 Input 3 RRD Output 2 -1 Note In the first sample, the robot moves up twice, down once, left once, and right once, ending up at (0, 1). In the second sample, the robot moves up three times, down three times, left twice, and right twice, returning to the starting position (0, 0). In the third sample, the robot moves right twice and down once, ending up at (2, -1).","solution":"def final_position(n, commands): x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"In a certain country, there is a square grid of size N x N (1 ≦ N ≦ 1000). Each cell of the grid is either land or water. You can move to an adjacent cell in 4 possible directions: up, down, left, or right. You would like to check how many distinct islands are present in the grid. An island is defined as a group of connected land cells (cells with \'L\') that are connected 4-directionally (vertical or horizontal). Water cells are represented by \'W\'. Two land cells are part of the same island if they are connected directly. Determine the number of distinct islands in the grid. # Input An integer N followed by N lines of string of length N describing the grid. # Output An integer denoting the number of distinct islands. # Examples Input 4 LLWW LWWW WWLL WWLL Output 2 Input 3 LLL LLL LLL Output 1 Input 5 LWLWL WLWLW LWLWL WLWLW LWLWL Output 13","solution":"def count_islands(N, grid): def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= N or grid[x][y] != \'L\': return grid[x][y] = \'V\' # Mark as visited # Move in all 4 possible directions dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) island_count = 0 for i in range(N): for j in range(N): if grid[i][j] == \'L\': island_count += 1 dfs(i, j) return island_count"},{"question":"A chef is planning to serve various dishes to customers in a restaurant. Each dish has a specific preparation time. Given multiple test cases, the chef wants to determine how many dishes can be prepared within a given time frame. You are given an integer T representing the number of test cases. For each test case, you are given two lines of input. The first line contains two integers N and K, where N denotes the number of dishes and K denotes the total available time to prepare the dishes. The second line contains N integers t_1, t_2, ldots, t_N, where t_i represents the preparation time of the i-th dish. Your task is to calculate the maximum number of dishes that can be prepared within the given total time for each test case. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of two lines: - The first line contains two integers N and K. - The second line contains N integers t_1, t_2, ..., t_N separated by spaces, representing the preparation times of the dishes. ------ Output ------ For each test case, print a single line containing one integer - the maximum number of dishes that can be prepared within the given time limit. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ K ≤ 10^5 1 ≤ t_i ≤ 10^4 ------ Sample Input ------ 2 5 10 2 3 7 1 4 4 7 4 3 2 5 ------ Sample Output ------ 4 2 ------ Explanation ------ Example case 1: The chef can choose dishes with preparation times 1, 2, 3, and 4, making the total preparation time 10. Example case 2: The chef can choose dishes with preparation times 2 and 3, making the total preparation time 5.","solution":"def max_dishes_within_time(test_cases): results = [] for case in test_cases: N, K, prep_times = case prep_times.sort() time_spent = 0 count = 0 for time in prep_times: if time_spent + time <= K: time_spent += time count += 1 else: break results.append(count) return results def prepare_input_output(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, K = map(int, lines[idx].split()) prep_times = list(map(int, lines[idx + 1].split())) test_cases.append((N, K, prep_times)) idx += 2 return T, test_cases"},{"question":"Joanna is a store manager who needs to track the inventory of products. She wants to write a program that helps her easily find how many units of each product are left in the store by the end of the day. She will provide you with a list of products sold throughout the day and you need to deduce the remaining inventory for each product. You will be provided with the initial inventory for each product at the start of the day. You need to write a program that takes the initial inventory and the list of sales as input and outputs the remaining inventory for each product in alphabetical order. Input - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of products in the store. - The next n lines contain the name of the product (a string without spaces) and the initial inventory (an integer 1 ≤ inventory ≤ 1000). - The next line contains an integer m (0 ≤ m ≤ 10000) — the number of sales transactions. - The next m lines contain the name of the product sold (a string that matches one of the product names exactly) and the quantity sold (an integer 1 ≤ quantity ≤ 1000). Output - Output n lines, each containing the name of the product and the remaining inventory in alphabetical order of product names. Example Input 4 apple 100 banana 150 orange 120 pear 90 5 apple 30 banana 50 orange 30 pear 40 banana 20 Output apple 70 banana 80 orange 90 pear 50 Note In this example, the initial inventory for \\"apple\\" is 100, and 30 units were sold, so the remaining inventory for \\"apple\\" is 70. The same process applies for other products, and the final output is sorted by product names alphabetically.","solution":"def compute_remaining_inventory(n, initial_inventory, m, sales): inventory = {} # Initialize the inventory for product, quantity in initial_inventory: inventory[product] = quantity # Process the sales for product, quantity in sales: inventory[product] -= quantity # Create a sorted list of products sorted_products = sorted(inventory.keys()) # Generate the output result = [] for product in sorted_products: result.append((product, inventory[product])) return result"},{"question":"You are given an array of integers and a target value. Your task is to determine if there are two distinct integers in the array whose sum equals the target value. If such a pair exists, return the pair as a tuple (in any order); otherwise, return an empty tuple. -----Input----- The input consists of two lines: 1. The first line contains a single integer n (2 le n le 10^5) — the size of the array. 2. The second line contains n integers a_1, a_2, dots, a_n (-10^9 le a_i le 10^9) — the elements of the array. 3. The third line contains one integer target (-10^9 le target le 10^9) — the target sum. -----Output----- Output a tuple of two integers representing the pair whose sum equals the target value. If no such pair exists, output an empty tuple. -----Examples----- Input 5 2 7 11 15 -2 9 Output (2, 7) Input 6 1 5 3 -4 8 10 6 Output (1, 5) Input 4 3 6 -7 2 10 Output () -----Note----- In the first example, the integers 2 and 7 add up to 9. In the second example, the integers 1 and 5 add up to 6. In the third example, there is no pair of integers that add up to 10.","solution":"def find_pair_with_sum(n, array, target): Determines if there are two distinct integers in the array whose sum equals the target value. Returns the tuple of such pair if exists, else returns an empty tuple. seen = {} for number in array: complement = target - number if complement in seen: return (complement, number) seen[number] = True return ()"},{"question":"Given an array B of integers, return the length of the longest bitonic subsequence in B. A sequence is called bitonic if it is first increasing and then decreasing. Example 1: Input: B = [1, 11, 2, 10, 4, 5, 2, 1] Output: 6 Explanation: The longest bitonic subsequence is [1, 2, 10, 4, 2, 1]. Example 2: Input: B = [12, 11, 40, 5, 3, 1] Output: 5 Explanation: The longest bitonic subsequence is [12, 11, 5, 3, 1]. Example 3: Input: B = [80, 60, 30, 40, 20, 10] Output: 5 Explanation: The longest bitonic subsequence is [80, 60, 30, 20, 10]. Constraints: 1 <= B.length <= 2000 1 <= B[i] <= 10000","solution":"def longest_bitonic_subsequence(B): Given an array B of integers, return the length of the longest bitonic subsequence. A sequence is called bitonic if it is first increasing and then decreasing. n = len(B) # Create an array to store the length of the longest increasing subsequence ending at each index inc = [1] * n # Create an array to store the length of the longest decreasing subsequence starting at each index dec = [1] * n # Fill inc array, inc[i] will contain the length of the longest increasing subsequence ending at i for i in range(1, n): for j in range(0, i): if B[i] > B[j] and inc[i] < inc[j] + 1: inc[i] = inc[j] + 1 # Fill dec array, dec[i] will contain the length of the longest decreasing subsequence starting at i for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if B[i] > B[j] and dec[i] < dec[j] + 1: dec[i] = dec[j] + 1 # Find the maximum length of bitonic subsequence max_length = 0 for i in range(n): max_length = max(max_length, inc[i] + dec[i] - 1) return max_length"},{"question":"A large company with several departments is trying to optimize their employee distribution. They want to ensure that the teams in each department are properly balanced in terms of skills. To do this, they assign a skill level to each employee. Given the current employee distributions across various departments and their skill levels, the company wants to determine if it\'s possible to evenly distribute the employees among departments in such a way that each department has exactly the same total skill level. Write a program that checks whether it is possible to evenly distribute the total skill level across the departments given the current distribution. Each department has a list of the skill levels of all its employees. Input The input is provided in the following format: D E s_{1,1} s_{1,2} ... s_{1,E1} s_{2,1} s_{2,2} ... s_{2,E2} ... s_{D,1} s_{D,2} ... s_{D,ED} The first line contains two integers: the number of departments D (1 ≤ D ≤ 1000) and the total number of employees E (1 ≤ E ≤ 10000). Each of the following D lines contains a series of integers representing the skill levels of employees in each department. Output Output \\"YES\\" if it is possible to reorder employees in such a way that each department has the same total skill level, and \\"NO\\" otherwise. Examples Input 3 6 10 20 30 30 10 20 20 30 10 Output YES Input 3 4 4 2 2 4 4 4 2 Output NO Explanation In the first example, the sum of skill levels in each department is 60. It is possible to evenly distribute employees to maintain the same total skill level per department. In the second example, the departments have different total skill levels which cannot be balanced evenly.","solution":"def can_distribute_evenly(D, E, departments): Determines if it\'s possible to evenly distribute employees such that each department has the same total skill level. total_skill_level = sum(sum(dept) for dept in departments) if total_skill_level % D != 0: return \\"NO\\" target_skill_level = total_skill_level // D def can_balance(skill_levels, target, count): if count == 1: return sum(skill_levels) == target if not skill_levels: return False for i in range(1 << len(skill_levels)): subset_sum = sum(skill_levels[j] for j in range(len(skill_levels)) if (i & (1 << j))) if subset_sum == target: remaining = [skill_levels[j] for j in range(len(skill_levels)) if not (i & (1 << j))] if can_balance(remaining, target, count - 1): return True return False all_skills = [skill for dept in departments for skill in dept] return \\"YES\\" if can_balance(all_skills, target_skill_level, D) else \\"NO\\""},{"question":"# Travel Decisions **Problem Statement:** You are planning a trip with multiple cities to visit. You are given a list of cities, each with the number of attractions it offers. You need to ensure that you visit at least a minimum number of attractions during your trip. Write a program that takes the number of cities, an integer list indicating the number of attractions in each city, and a minimum number of attractions to visit. Determine the minimum number of cities you need to visit to meet or exceed the required number of attractions. If it\'s not possible to meet the required number of attractions even after visiting all cities, return -1. **Input:** - The first line contains two integers, `n` (the number of cities) and `k` (the required minimum number of attractions). - The second line contains `n` integers, where each integer represents the number of attractions in each city. **Output:** - Print the minimum number of cities you need to visit. If it\'s impossible to meet the requirement, print -1. **Constraints:** - 1 <= n <= 100 - 1 <= attractions per city <= 1000 - 1 <= k <= 10000 **Example:** **Input:** ``` 5 10 4 2 5 3 6 ``` **Output:** ``` 2 ``` **Explanation:** You need to visit at least 10 attractions. By visiting the first and the fifth cities (4 + 6), you can meet the requirement. Hence, the minimum number of cities to visit is 2.","solution":"def min_cities_to_visit(n, k, attractions): Determine the minimum number of cities needed to visit to accumulate at least k attractions. Parameters: n (int): The number of cities. k (int): The required minimum number of attractions. attractions (list of int): List of integers where each integer represents the number of attractions in each city. Returns: int: Minimum number of cities to visit to meet or exceed the required number of attractions, or -1 if not possible. # Sort attractions in descending order to consider cities with most attractions first attractions.sort(reverse=True) total_attractions = 0 city_count = 0 for attraction in attractions: total_attractions += attraction city_count += 1 if total_attractions >= k: return city_count # If total attractions are less than required after visiting all cities return -1"},{"question":"You are given an array of integers and a target integer. Find and return the indices of two distinct integers in the array such that their sum equals the target. If no such pair exists, return `[-1, -1]`. You can assume that each input would have exactly one solution, and you may not use the same element twice. Input An integer n (2 ≤ n ≤ 10^4), representing the length of the array. An array of n integers arr (−10^9 ≤ arr[i] ≤ 10^9). An integer target (−10^9 ≤ target ≤ 10^9). Output Return the indices of the two numbers such that they add up to target. Examples Input 5 2 7 11 15 9 Output 0 1 Input 4 1 2 3 4 6 Output 1 3 Note In the first example, the numbers at indices 0 and 1 are 2 and 7, respectively. Their sum equals the target, 9. Therefore, the output is [0, 1]. In the second example, the numbers at indices 1 and 3 are 2 and 4, respectively. Their sum equals the target, 6. Therefore, the output is [1, 3].","solution":"def two_sum(nums, target): Returns the indices of two numbers in nums such that they add up to target. If no such numbers exist, returns [-1, -1]. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return [-1, -1]"},{"question":"In a small town, there is a practice where postal boxes are placed at every street number starting from 1. Each postal box can only hold a specific number of letters, and once that limit is reached, no more letters can be placed in that box until some letters are removed. All street numbers in this town are positive integers. There are M postal boxes in this town, and each box has a maximum capacity denoted by ci, which means that the ith box can hold ci letters at most. The postal man has to deliver L letters and he wants to know if it\'s possible to deliver all letters without exceeding the capacities of any postal box. Each day, the postal man will gather all letters and attempt to fill the postal boxes sequentially starting from box 1 to box M. He can only place letters in a box until its capacity is reached, and must then move on to the next box in sequence. You need to determine whether it will be possible for the postal man to place all L letters in the boxes without exceeding any box’s capacity. Constraints 1 ≤ M ≤ 10^3 1 ≤ L ≤ 10^5 1 ≤ Ci ≤ 10^6 Input The first line contains two integers denoting M and L. The second line contains M integers denoting ci for each postal box. Output Output \\"YES\\" if it is possible to deliver all the letters, else output \\"NO\\". SAMPLE INPUT 4 10 3 4 2 3 SAMPLE OUTPUT YES Explanation The postal man can distribute the 10 letters as follows: - Postal box 1: 3 letters. - Postal box 2: 4 letters. - Postal box 3: 2 letters. - Postal box 4: 1 letter. All postal box capacities are respected, so it is possible to deliver all 10 letters.","solution":"def can_deliver_all_letters(M, L, capacities): Determine if it is possible to deliver all L letters without exceeding the capacities of any postal box. :param M: Number of postal boxes :param L: Number of letters to be delivered :param capacities: List of integers where each integer represents the maximum capacity of a postal box :return: \\"YES\\" if it is possible to deliver all letters, else \\"NO\\" total_capacity = sum(capacities) if total_capacity >= L: return \\"YES\\" else: return \\"NO\\""},{"question":"A group of rogue AI robots are infiltrating a top-secret government facility. Your mission is to prevent them from accessing the main computer system. The robots can only move along a predetermined path, represented by a grid. Each cell in the grid has an associated difficulty level which denotes the time it takes for any robot to navigate through that cell. You need to ensure there is at least one system guard stationed at a strategic cell to prevent the robots from progressing. The strategic cell is predefined and locating the guard there does not occupy any time. You are given a matrix representing the facility layout, the time it takes for robots to move through each cell, and the coordinates for the strategic guard cell. Your task is to determine the minimum time the robots will need to reach the strategic guard cell from their starting location. 1st line -- No. of Test cases T (1 <= T <= 1000). 2nd line -- M and N denoting number of rows and columns in the matrix. M lines -- Each line contains N positive integers denoting the time it takes to navigate through that cell. Last line -- Three positive integers x, y, and t. (x, y) --> coordinates of the strategic guard cell. t --> the amount of time since the robots started moving towards the main computer system. For each test case, print the minimum time required for the robots to reach the strategic guard cell. If they can\'t reach the strategic cell before a guard is stationed there, display \\"SAFE\\". Input constraints: 1 ≤ T ≤ 100 1 ≤ M ≤ 1000 1 ≤ N ≤ 1000 Notes: The guard can block the robots at the exact moment they reach the cell, meaning the robots need to strictly beat the guard\'s time to successfully navigate through. You cannot move diagonally. SAMPLE INPUT 1 3 5 5 3 8 2 6 1 4 7 8 2 3 6 5 9 1 2 4 20 SAMPLE OUTPUT SAFE","solution":"import heapq def minimum_time_to_target(T, test_cases): results = [] for case in test_cases: M, N = case[\'matrix_size\'] grid = case[\'matrix\'] target_x, target_y, guard_time = case[\'guard_pos\'] # Implement Dijkstra\'s shortest path algorithm def dijkstra(grid, start_x, start_y): rows, cols = len(grid), len(grid[0]) directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] min_heap = [(0, start_x, start_y)] visited = set() distances = [[float(\'inf\')] * cols for _ in range(rows)] distances[start_x][start_y] = 0 while min_heap: curr_time, x, y = heapq.heappop(min_heap) if (x, y) in visited: continue visited.add((x, y)) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols: new_time = curr_time + grid[nx][ny] if new_time < distances[nx][ny]: distances[nx][ny] = new_time heapq.heappush(min_heap, (new_time, nx, ny)) return distances start_x, start_y = 0, 0 distances = dijkstra(grid, start_x, start_y) time_to_reach_guard = distances[target_x][target_y] if time_to_reach_guard < guard_time: results.append(time_to_reach_guard) else: results.append(\\"SAFE\\") return results # Reading input and preparing test cases def parse_input(input_str): input_lines = input_str.strip().split(\'n\') idx = 0 T = int(input_lines[idx]) idx += 1 test_cases = [] for _ in range(T): M, N = map(int, input_lines[idx].split()) idx += 1 matrix = [] for _ in range(M): row = list(map(int, input_lines[idx].split())) matrix.append(row) idx += 1 target_x, target_y, guard_time = map(int, input_lines[idx].split()) idx += 1 test_cases.append({ \'matrix_size\': (M, N), \'matrix\': matrix, \'guard_pos\': (target_x - 1, target_y - 1, guard_time) }) return T, test_cases example_input = 1 3 5 5 3 8 2 6 1 4 7 8 2 3 6 5 9 1 2 4 20 T, test_cases = parse_input(example_input) result = minimum_time_to_target(T, test_cases) print(result)"},{"question":"In a distant future, a large city has implemented a new automated traffic control system to manage its traffic lights. The city is divided into a grid of intersections, and each intersection is controlled by a traffic light. Each traffic light can show either a green light, indicating that cars can pass through that intersection, or a red light, indicating that cars must stop. The traffic control system is designed to reduce the total waiting time for cars at red lights. To achieve this, every traffic light has been equipped with sensors that can count the number of cars waiting at each intersection. Each traffic light is also programmed with a set of rules that determine when to switch from red to green or vice versa, based on the number of cars waiting at that and the adjacent intersections. Your task is to simulate the traffic light system for a given number of time steps and determine the total waiting time for cars in the city. # Input The input consists of multiple test cases. Each test case begins with three integers: - `N` and `M` representing the number of rows and columns of the grid, respectively, - `T` representing the number of time steps to simulate. For the next `N` lines, there are `M` integers representing the initial number of cars waiting at each intersection. The next `N` lines contain `M` characters, each being either \'R\' or \'G\', representing the initial state of each traffic light. \'R\' indicates a red light and \'G\' indicates a green light. Each subsequent line contains three integers `a`, `b`, and `c`. This means from time step `a` to `b` (inclusive), if the number of cars waiting at an intersection is `>= c`, then the traffic light will switch to green. These instructions are cumulative and will affect all intersections. Each test case ends with the line `0 0 0`. The end of the input is signaled by a line containing `N = 0`, `M = 0`, and `T = 0`. # Constraints - 1 ≤ N, M ≤ 100 - 0 ≤ initial number of cars ≤ 5000 - 1 ≤ T ≤ 1000 - 1 ≤ a ≤ b ≤ T - 1 ≤ c ≤ 5000 # Output For each test case, output the total waiting time for cars in the city after `T` time steps on a single line. # Example Input ``` 2 2 3 1 2 3 4 R G G R 1 3 3 0 0 0 3 3 2 1 1 1 2 2 2 3 3 3 G G R R G G G R R 2 2 2 0 0 0 0 0 0 ``` Output ``` 27 0 ``` # Explanation In the first example test case, we have a 2x2 grid of intersections and we simulate the traffic system for 3 time steps. Initially, we have 1 car at the top-left intersection, 2 cars at the top-right, 3 cars at the bottom-left, and 4 cars at the bottom-right. The initial traffic light states are also given. For the 3 time steps, we will follow the given rules to switch the lights and update the counts of waiting cars. Finally, we need to calculate the total waiting time (sum of cars at red lights over all intersections and time steps). Repeat this for each test case.","solution":"def simulate_traffic_system(n, m, t, waiting, initial_lights, rules): total_waiting_time = 0 # Process each time step for step in range(1, t + 1): new_lights = [row[:] for row in initial_lights] for rule in rules: a, b, c = rule if a <= step <= b: for i in range(n): for j in range(m): if waiting[i][j] >= c: new_lights[i][j] = \'G\' # Calculate total waiting time at red lights for this time step for i in range(n): for j in range(m): if new_lights[i][j] == \'R\': total_waiting_time += waiting[i][j] # Update the lights for the next time step initial_lights = new_lights return total_waiting_time def process_input(): import sys input = sys.stdin.read data = input().split() idx = 0 results = [] while True: N = int(data[idx]) M = int(data[idx + 1]) T = int(data[idx + 2]) idx += 3 if N == 0 and M == 0 and T == 0: break waiting = [] for i in range(N): waiting.append([int(data[idx + j]) for j in range(M)]) idx += M initial_lights = [] for i in range(N): initial_lights.append([data[idx + j] for j in range(M)]) idx += M rules = [] while True: a = int(data[idx]) b = int(data[idx + 1]) c = int(data[idx + 2]) idx += 3 if a == 0 and b == 0 and c == 0: break rules.append((a, b, c)) total_waiting_time = simulate_traffic_system(N, M, T, waiting, initial_lights, rules) results.append(total_waiting_time) for result in results: print(result) if __name__ == \\"__main__\\": process_input()"},{"question":"You are given a list of N integers. Your task is to find the maximum length of a contiguous subarray such that all elements are unique. -----Input----- The first line contains an integer N (1 ≤ N ≤ 10^5) - the number of elements in the list. The second line contains N integers a_1, a_2, ..., a_N (1 ≤ a_i ≤ 10^9) - the elements of the list. -----Output----- Print the length of the longest contiguous subarray with all unique elements. -----Examples----- Input 5 2 3 2 4 5 Output 4 Input 6 1 2 3 4 5 6 Output 6 Input 5 1 1 1 1 1 Output 1","solution":"def max_length_unique_subarray(arr): Returns the maximum length of a contiguous subarray with all unique elements. start = 0 max_len = 0 seen = {} for end in range(len(arr)): if arr[end] in seen and seen[arr[end]] >= start: start = seen[arr[end]] + 1 seen[arr[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"In a fantasy card game, each player has a deck consisting of N unique cards. Each card has a power value associated with it. Players can perform a combo move by picking a contiguous sequence of cards from their deck such that the sum of the power values of the cards in that sequence is maximized and does not exceed a given limit K. You need to help the player determine the maximum possible sum of power values for any valid contiguous sequence of cards. -----Input:----- - First line contains an integer T, the number of test cases. - Each test case has the following format: - First line contains two space-separated integers N and K, the number of cards in the deck and the maximum allowed sum for any sequence, respectively. - Second line contains N space-separated integers, where each integer a_i represents the power value of the i-th card in the deck. -----Output:----- For each test case output a single integer: the maximum sum of power values of any valid contiguous sequence of cards that does not exceed K. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq |a_i| leq 10^4 - 1 leq K leq 10^9 -----Sample Input:----- 2 5 10 1 2 3 4 5 3 5 2 2 2 -----Sample Output:----- 10 4 -----Explanation:----- In the first test case, the sequence containing all cards yields the maximum sum of 10, which is within the limit K = 10. In the second test case, the sequence containing the first two cards yields the maximum sum of 4, which is within the limit K = 5. Note that selecting all three cards would exceed the limit.","solution":"def max_sum_under_k(N, K, card_values): Finds the maximum sum of a contiguous sequence of card values such that the sum does not exceed K. Parameters: N (int): Number of cards K (int): Maximum allowed sum for any sequence card_values (list[int]): List of integers representing card power values Returns: int: Maximum sum of any valid contiguous sequence of card values max_sum = 0 current_sum = 0 start = 0 for end in range(N): current_sum += card_values[end] while current_sum > K: current_sum -= card_values[start] start += 1 max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(T, test_cases): Processes multiple test cases for the card game problem. Parameters: T (int): Number of test cases test_cases (list[tuple]): A list of tuples where each tuple contains: N (int): Number of cards K (int): Maximum allowed sum card_values (list[int]): List of card power values Returns: list[int]: List of results for each test case results = [] for test in test_cases: N, K, card_values = test results.append(max_sum_under_k(N, K, card_values)) return results"},{"question":"Emily loves to arrange and rearrange her bookshelf based on different criteria. Today, she wants to organize her bookshelf by a very special order. She has a bookshelf that consists of n sections, and each section contains a certain number of books. However, to organize the books, she only swaps the books between two sections at a time. She wants to achieve an arrangement where all sections contain books in non-increasing order. Emily can perform two types of operations: 1. Swap all books in section i with all books in section j. 2. Move m books from section i to section j if section i has at least m books. Given the initial arrangement of books in the n sections, your task is to determine the minimum number of operations required to arrange the bookshelf so that each section contains books in non-increasing order. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of sections on the shelf. The second line contains n integers b_1, b_2, ..., b_n (0 ≤ b_i ≤ 10^5) — the number of books in each section. -----Output----- Print a single integer — the minimum number of operations required to arrange the books in non-increasing order. -----Examples----- Input 5 4 3 5 2 1 Output 3 Input 3 10 20 30 Output 0 Input 6 6 5 4 3 2 1 Output 0 -----Explanation----- In the first example, the initial arrangement is [4, 3, 5, 2, 1]. One possible sequence of operations to sort the bookshelf in non-increasing order: 1. Swap the books in section 1 (4 books) with the books in section 3 (5 books), resulting in the arrangement [5, 3, 4, 2, 1]. 2. Swap the books in section 2 (3 books) with the books in section 3 (4 books), resulting in the arrangement [5, 4, 3, 2, 1]. In the second example, no operations are required as the books are already in non-increasing order. In the third example, no operations are required as the books are already in non-increasing order.","solution":"def min_operations_to_sort_books(n, books): Returns the minimum number of operations required to sort the books in non-increasing order. Operations: - Swap all books in section i with all books in section j. - Move m books from section i to section j if section i has at least m books. sorted_books = sorted(books, reverse=True) count = 0 for i in range(n): if books[i] != sorted_books[i]: target_index = books.index(sorted_books[i]) books[i], books[target_index] = books[target_index], books[i] count += 1 return count"},{"question":"Given a list of integers where every element appears twice except for one, which appears exactly once, write a function that finds the single distinct element. Your function should have linear runtime complexity and use constant extra space. Example 1: Input: [4, 1, 2, 1, 2] Output: 4 Explanation: All elements except 4 appear twice. Example 2: Input: [2, 2, 3, 2] Output: 3 Explanation: All elements except 3 appear twice. Your Task: The task is to complete the function findSingleElement() that takes in a list of integers and returns the single distinct element. Constraints: - The list will have at least one element and at most 100 elements. - Each element in the list is a non-negative integer and will fit into a 32-bit signed integer. - The input list is not sorted.","solution":"def findSingleElement(nums): Finds the single distinct element in a list where every element appears twice except for one which appears exactly once. This solution uses the XOR approach to achieve linear time complexity and constant space complexity. Parameters: nums (list): A list of integers where each integer, except one, appears twice. Returns: int: The single distinct element. single_element = 0 for num in nums: single_element ^= num return single_element"},{"question":"Given an integer `n`, find the `nth` Smith Number. A Smith number is a composite number for which the sum of its digits is equal to the sum of the digits in its prime factorization (excluding 1). Example 1: Input: n = 1 Output: 4 Explanation: The first Smith Number is 4 whose prime factors are 2 and 2. Sum of digits of 4 (4) == Sum of digits of 2 (2) + 2 (2). Example 2: Input: n = 2 Output: 22 Explanation: The second Smith Number is 22 whose prime factors are 2 and 11. Sum of digits of 22 (2+2=4) == Sum of digits of 2 (2) + 11 (1+1=2). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `nthSmithNumber()` which takes an integer `n` and returns the `nth` Smith Number. Expected Time Complexity: O(k * log k) where k is the `nth` Smith Number. Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5","solution":"def prime_factors(n): Helper function to return prime factors of a number i = 2 factors = [] while i * i <= n: while n % i == 0: factors.append(i) n //= i i += 1 if n > 1: factors.append(n) return factors def sum_of_digits(n): Helper function to return sum of digits of a number return sum(int(digit) for digit in str(n)) def is_smith_number(num): Check if a number is a Smith number if num < 2: return False factors = prime_factors(num) if len(factors) == 1: # num is prime return False sum_digits_num = sum_of_digits(num) sum_digits_factors = sum(sum_of_digits(factor) for factor in factors) return sum_digits_num == sum_digits_factors def nthSmithNumber(n): Function to find the nth Smith number count = 0 current_number = 4 # First Smith number while count < n: if is_smith_number(current_number): count += 1 if count == n: return current_number current_number += 1"},{"question":"A city has a circular park with walkways connecting various landmarks. The park consists of `n` landmarks, and every landmark is connected to exactly two other landmarks through bidirectional walkways, forming a single cycle. Each landmark has a unique identifier from 1 to `n`. The walkways have different lengths, and you are given information regarding the length of these walkways. Your task is to find the length of the shortest cycle that can be formed by traversing through some subset of walkways. -----Input----- The first line contains a single integer `n` (3 ≤ n ≤ 1000) — the number of landmarks. Each of the next `n` lines contains three integers `a`, `b`, and `c` (1 ≤ a, b ≤ n, 1 ≤ c ≤ 10^4) — indicating that there is a walkway between landmark `a` and landmark `b` with length `c`. -----Output----- Output a single integer — the length of the shortest cycle in the park. -----Examples----- Input 5 1 2 3 2 3 4 3 4 2 4 5 1 5 1 6 Output 10 Input 4 1 2 5 2 3 10 3 4 4 4 1 6 Output 25 -----Note----- In the first example, the park has 5 landmarks with walkways connecting (1-2 with length 3), (2-3 with length 4), (3-4 with length 2), (4-5 with length 1), and (5-1 with length 6). The shortest cycle that traverses through all walkways is 10 (3 + 4 + 2 + 1 = 10). In the second example, the park has 4 landmarks with longer walkways connecting them. The only cycle available is the one that includes all walkways, resulting in a cycle length of 25 (5 + 10 + 4 + 6 = 25).","solution":"def find_shortest_cycle(n, walkways): Finds the length of the shortest cycle in a circular park with n landmarks connected in a circular manner. :param n: Number of landmarks. :param walkways: List of tuples where each tuple contains three integers (a, b, c) indicating a walkway between landmark a and landmark b with length c. :return: The length of the shortest cycle. import networkx as nx G = nx.Graph() for a, b, c in walkways: G.add_edge(a, b, weight=c) # Since all landmarks form a single cycle, we perform a simple sum of all walkway lengths. shortest_cycle_length = sum(c for _, _, c in G.edges(data=\'weight\')) return shortest_cycle_length # Example usage: # print(find_shortest_cycle(5, [(1, 2, 3), (2, 3, 4), (3, 4, 2), (4, 5, 1), (5, 1, 6)])) # Output: 10 # print(find_shortest_cycle(4, [(1, 2, 5), (2, 3, 10), (3, 4, 4), (4, 1, 6)])) # Output: 25"},{"question":"Jane is organizing a team-building event for her company at a local park. The park has a series of checkpoints, and the goal is to visit as many checkpoints as possible. The checkpoints are numbered 0 to N-1. Teams can travel from one checkpoint to another via a set of predefined paths. Each path has a certain cost associated with it, representing the effort required to travel along that path. To make the challenge more interesting, Jane decided to introduce a budget constraint. Teams have a limited amount of effort they can spend to travel between checkpoints. Given this budget, teams must plan their route efficiently to maximize the number of checkpoints they can visit, starting from checkpoint 0. Your task is to help Jane determine the maximum number of checkpoints a team can visit within the given budget. -----Input----- The first line contains two integers 1 le N le 100 and 0 le M le frac{N(N-1)}{2}, the number of checkpoints and paths respectively. The second line contains an integer 0 le B le 1000, the budget representing the maximum effort available. Then follow M lines, each describing a path with three integers 0 le a, b < N and 1 le c le 100, where a and b are the numbers of the checkpoints the path connects, and c is the cost of the effort needed to travel along the path. -----Output----- Output a single integer, representing the maximum number of checkpoints a team can visit within the given budget. Note that the starting checkpoint (0) is always included in the count. -----Examples----- Sample Input: 3 3 10 0 1 5 1 2 5 0 2 10 Sample Output: 3 Sample Input: 4 4 7 0 1 3 1 2 4 1 3 6 2 3 2 Sample Output: 3","solution":"from heapq import heappush, heappop def max_checkpoints(N, M, B, paths): from collections import defaultdict import heapq # Create a graph from the paths graph = defaultdict(list) for a, b, c in paths: graph[a].append((b, c)) graph[b].append((a, c)) # Use a priority queue to perform a modified Dijkstra\'s algorithm pq = [(0, 0)] # (cost, node) visited = set() max_checkpoints = 0 effort = {i: float(\'inf\') for i in range(N)} effort[0] = 0 while pq: cur_cost, node = heapq.heappop(pq) if node in visited: continue visited.add(node) max_checkpoints += 1 for neighbor, cost in graph[node]: new_cost = cur_cost + cost if new_cost <= B and new_cost < effort[neighbor]: effort[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return max_checkpoints"},{"question":"Kevin has a sequence of n numbered cards, each with a positive integer written on it. Kevin wants to sort these cards in non-decreasing order. However, Kevin can only perform the following operation any number of times: - Choose any subsequence of cards and reverse it. Determine if Kevin can sort the sequence using any number of such operations. -----Input----- The first line of the input contains one integer n (1 ≤ n ≤ 100 000) — the number of cards. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the numbers written on the cards. -----Output----- Print \\"YES\\" (without quotes) if it is possible to sort the sequence using the given operation any number of times. Otherwise, print \\"NO\\" (without quotes). You can print each letter in any case (upper or lower). -----Examples----- Input 5 3 1 2 4 5 Output YES Input 3 3 2 1 Output YES Input 4 4 3 2 1 Output YES Input 6 6 1 2 3 4 5 Output YES -----Note----- In the first sample, you can select the subsequence [3, 1, 2] and reverse it to get [2, 1, 3] and then select the subsequence [2, 1] and reverse it to get [1, 2, 3, 4, 5]. Therefore, the answer is \\"YES\\". In the second sample, you can select the whole sequence and reverse it to get [1, 2, 3]. Therefore, the answer is \\"YES\\". In the third sample, you can select the whole sequence and reverse it to get [1, 2, 3, 4]. Therefore, the answer is \\"YES\\". In the fourth sample, you can select the subsequence [6, 1, 2, 3, 4, 5] and reverse it to get [5, 4, 3, 2, 1, 6] and then select the subsequence [5, 4, 3, 2, 1] and reverse it to get [1, 2, 3, 4, 5, 6]. Therefore, the answer is \\"YES\\".","solution":"def can_sort_sequence(n, sequence): Returns \\"YES\\" if the sequence can be sorted using any number of reverse subsequence operations, otherwise returns \\"NO\\". return \\"YES\\""},{"question":"You\'ve been provided with a queue of integers. Your task is to reverse the first K elements of the queue, leaving the remaining elements in their original order. Implement two functions: `reverse_K_elements()` and `enqueue()`. The `enqueue()` function takes a queue and an array of integers as parameters and enqueues the elements of the array into the queue. The `reverse_K_elements()` function takes the queue and an integer K as parameters and reverses the first K elements of the queue. Example 1: Input: N = 5, K = 3 arr = {10, 20, 30, 40, 50} Output: 30 20 10 40 50 Explanation: After enqueueing the elements, the queue will be: 10 -> 20 -> 30 -> 40 -> 50. Reversing the first 3 elements, the queue becomes: 30 -> 20 -> 10 -> 40 -> 50. Example 2: Input: N = 4, K = 2 arr = {5, 8, 12, 15} Output: 8 5 12 15 Explanation: After enqueueing the elements, the queue will be: 5 -> 8 -> 12 -> 15. Reversing the first 2 elements, the queue becomes: 8 -> 5 -> 12 -> 15. Your Task: Since this is a function problem, you don\'t need to take any input. Just complete the provided functions `enqueue()` and `reverse_K_elements()`. The `enqueue()` function should take a queue and an array as parameters and enqueue the elements of the array into the queue. The `reverse_K_elements()` function should take the queue and an integer K as parameters and return the queue after reversing the first K elements. Expected Time Complexity: O(N). Expected Auxiliary Space: O(K). Constraints: 1 <= K <= N <= 10^5 1 <= arr[i] <= 10^6","solution":"from collections import deque def enqueue(queue, array): Enqueues the elements of the array into the queue. for element in array: queue.append(element) return queue def reverse_K_elements(queue, K): Reverses the first K elements of the queue and returns the modified queue. if K > len(queue) or K <= 0: return queue stack = [] # Step 1: Push the first K elements into a stack for _ in range(K): stack.append(queue.popleft()) # Step 2: Pop from stack and enqueue back to the queue while stack: queue.append(stack.pop()) # Step 3: Move the remaining elements in the queue to the back for _ in range(len(queue) - K): queue.append(queue.popleft()) return queue"},{"question":"You are given an array of n positive integers representing costs associated with n activities. Additionally, there is an array of m pairs of integers representing dependencies between activities. A dependency (a, b) means that activity b is recommended to be performed after activity a. Your task is to determine the minimum cost required to perform all activities, while respecting the dependencies if possible. If adhering to the dependencies makes it impossible to complete all activities, print `-1`. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 10^5). The second line contains n space-separated integers c[1], c[2], ..., c[n] where c[i] represents the cost of performing the i-th activity (1 ≤ c[i] ≤ 10^9). Each of the next m lines contains two space-separated integers a and b describing a dependency where activity b depends on activity a (1 ≤ a, b ≤ n; a ≠ b). -----Output----- If it\'s possible to perform all activities respecting the given dependencies, print the minimum possible total cost as a single integer. Otherwise, print `-1`. -----Examples----- Input 4 3 5 2 4 6 1 2 1 3 2 4 Output 17 Input 3 2 3 1 2 1 2 2 1 Output -1 Input 5 0 10 20 30 40 50 Output 150","solution":"def min_cost_with_dependencies(n, m, costs, dependencies): from collections import defaultdict, deque # Build graph and compute in-degrees graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Perform a topological sort using Kahn\'s algorithm zero_in_degree_queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: zero_in_degree_queue.append(i) topo_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # Check if topological sorting was possible for all nodes if len(topo_order) != n: return -1 # Calculate the minimum cost considering the topological order total_cost = sum(costs) return total_cost"},{"question":"A product on an e-commerce platform has received N reviews, each represented by a pair (R_{i}, A_{i}) where R_{i} is the rating given by the review and A_{i} is the upvotes for that review. The platform wants to display the top review based on the highest weighted score, which is calculated as: [ text{Weighted Score} = R_{i} times A_{i} ] Write a program that helps determine the highest weighted score among the reviews for each product. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. N lines follow. For each valid i, the i-th of these lines contains two space-separated integers R_{i} and A_{i}, representing the rating and upvotes for the i-th review. ------ Output ------ For each test case, print a single line containing one integer - the highest weighted score among the reviews. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 5 cdot 10^4 1 ≤ R_{i}, A_{i} ≤ 10^{6} for each valid i ------ Sample Input 1 ------ 2 3 4 10 1 20 3 15 2 8 5 7 9 ----- Sample Output 1 ------ 45 63 ----- Explanation 1 ------ Example case 1: Among the given reviews, the weighted scores are 4 * 10 = 40, 1 * 20 = 20, and 3 * 15 = 45. The highest weighted score is 45. Example case 2: Among the given reviews, the weighted scores are 8 * 5 = 40 and 7 * 9 = 63. The highest weighted score is 63.","solution":"def highest_weighted_score(test_cases): results = [] for reviews in test_cases: max_score = 0 for rating, upvotes in reviews: max_score = max(max_score, rating * upvotes) results.append(max_score) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) reviews = [] for i in range(1, N+1): R_i, A_i = map(int, lines[index + i].split()) reviews.append((R_i, A_i)) test_cases.append(reviews) index += N + 1 return test_cases def process_input(input_str): test_cases = parse_input(input_str) return highest_weighted_score(test_cases)"},{"question":"Peter is arranging a series of coding classes for beginners, where he wants to track the performance of students in a systematic way. Each student receives a score after their completion of a class. Peter wants to maintain a leaderboard that supports querying for the top k student scores at any point in time. The classes are held sequentially and each score is presented in the order they are obtained. Peter needs your help to efficiently: 1. Register a new score. 2. Query the top k scores at any given time. Input The first line contains two integers n and q (1 ≤ n ≤ 100000, 1 ≤ q ≤ 100000) — the number of scores and the number of queries respectively. The next n lines contain integers representing the scores of students in the order they are presented (1 ≤ score ≤ 1000000). The following q lines each contain an integer k (1 ≤ k ≤ n) representing a query for the top k scores at the current point in the sequence of incoming scores. Output For each query, output the sum of the top k scores at that moment on a new line. Examples Input 6 3 50 30 70 90 40 60 2 4 3 Output 160 250 220 Input 5 4 10 20 40 30 50 1 2 5 3 Output 50 90 150 120 Note In the first example: - After the scores [50, 30, 70, 90, 40, 60]: - Top 2 scores are [90, 70], sum is 160. - Top 4 scores are [90, 70, 60, 50], sum is 270. - Top 3 scores are [90, 70, 60], sum is 220. In the second example: - After the scores [10, 20, 40, 30, 50]: - Top 1 score is [50], sum is 50. - Top 2 scores are [50, 40], sum is 90. - Top 5 scores are [50, 40, 30, 20, 10], sum is 150. - Top 3 scores are [50, 40, 30], sum is 120.","solution":"import heapq class Leaderboard: def __init__(self): self.scores = [] def register_score(self, score): heapq.heappush(self.scores, -score) def top_k_sum(self, k): return -sum(heapq.nsmallest(k, self.scores)) def process_scores_and_queries(n, q, scores, queries): leaderboard = Leaderboard() results = [] # Register all scores for score in scores: leaderboard.register_score(score) # Process all queries for k in queries: results.append(leaderboard.top_k_sum(k)) return results"},{"question":"Given a list of N integers, John wants to play a game where he places the integers in a particular order and then manipulates their positions considering specified rules. John will: 1. Arrange the integers in a way that maximizes their final value according to the rule-based manipulations. 2. Only swap two adjacent integers where the sum of the integers is even. Determine the final sequence that will be formed after John has manipulated the list optimally. Constraints * 1 ≤ N ≤ 2000 * 1 ≤ A_i ≤ 10^8 Input The input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the final sequence that will be produced, in a line. Examples Input 5 1 2 3 4 5 Output 5 1 3 2 4 Input 6 4 7 2 8 5 3 Output 8 4 7 2 5 3","solution":"def maximize_sequence(n, arr): # Sort the array in descending order arr.sort(reverse=True) # Separate the even and odd numbers as we can only swap adjacent elements if their sum is even even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] # Combine alternating even and odd numbers from the highest possible, to maximize sum of adjacent swaps i, j = 0, 0 result = [] while i < len(even) and j < len(odd): result.append(even[i]) result.append(odd[j]) i += 1 j += 1 # Append remaining even or odd numbers while i < len(even): result.append(even[i]) i += 1 while j < len(odd): result.append(odd[j]) j += 1 return result if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) result = maximize_sequence(n, arr) print(\\" \\".join(map(str, result)))"},{"question":"Given a string s and a list of words dict, find all starting indices of substring(s) in s that are a concatenation of each word in dict exactly once without any intervening characters. The words in dict can be used in any order. Example 1: Input: s = \\"barfoothefoobarman\\" dict = [\\"foo\\",\\"bar\\"] Output: [0,9] Explanation: The substring starting at index 0 is \\"barfoo\\". The substring starting at index 9 is \\"foobar\\". Example 2: Input: s = \\"wordgoodgoodgoodbestword\\" dict = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"] Output: [] Explanation: No valid substring exists. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findSubstring() which takes the string s and the list of words dict as parameters and returns a list of integers denoting the starting indices of the concatenation(s). Expected Time Complexity: O(n * m * k) where n is the length of the string, m is the number of words, and k is the length of each word. Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^{4} 1 <= len(dict) <= 500 1 <= len(dict[i]) <= 30","solution":"def findSubstring(s, words): from collections import Counter if not s or not words: return [] word_len = len(words[0]) word_count = len(words) total_len = word_len * word_count s_len = len(s) words_counter = Counter(words) result = [] for i in range(word_len): left = i right = i current_counter = Counter() while right + word_len <= s_len: word = s[right:right + word_len] right += word_len if word in words_counter: current_counter[word] += 1 while current_counter[word] > words_counter[word]: left_word = s[left:left + word_len] current_counter[left_word] -= 1 left += word_len if right - left == total_len: result.append(left) else: current_counter.clear() left = right return result"},{"question":"You are given a string S containing only lowercase alphabetic characters and an integer N. Your task is to find and print the lexicographically smallest subsequence of length N from the string S. Input The input consists of two lines: - The first line contains the string S (1 ≤ |S| ≤ 100), consisting only of lowercase English letters. - The second line contains the integer N (1 ≤ N ≤ |S|), the length of the subsequence to be found. Output Print the lexicographically smallest subsequence of length N. Examples Input abcdef 3 Output abc Input zyxabc 4 Output xabc","solution":"def lexicographically_smallest_subsequence(S, N): Returns the lexicographically smallest subsequence of length N from string S. result = [] stack = [] for i, ch in enumerate(S): while stack and ch < stack[-1] and len(stack) + len(S) - i > N: stack.pop() stack.append(ch) return \'\'.join(stack[:N])"},{"question":"A group of friends are planning a hiking trip and want to ensure they can communicate with each other at all times using their walkie-talkies. Each walkie-talkie has a maximum range, and they need to make sure that they can all stay connected based on these ranges. They have n walkie-talkies, and each walkie-talkie i has a maximum range of ri kilometers. The friends want to form a connected group in such a way that every friend can communicate with at least one other directly, or indirectly through others. To achieve this, they should find the minimum communication range that ensures all friends stay connected, either directly or through a chain of other friends\' walkie-talkies. Input The first line contains an integer n (2 ≤ n ≤ 100) — the number of walkie-talkies. The second line contains n space-separated integers r1, r2, ..., rn (1 ≤ ri ≤ 100) — the maximum communication range of each walkie-talkie. Output Print a single integer — the minimum communication range that ensures all friends can stay connected. SAMPLE INPUT 5 5 3 6 2 4 SAMPLE OUTPUT 4","solution":"def min_comm_range(walkie_ranges): Finds the minimum communication range that ensures all friends stay connected. # Sort the walkie talkie ranges walkie_ranges.sort() # The minimum range that ensures all friends are connected is the maximum range in the sorted list. return walkie_ranges[-1]"},{"question":"Gabriella is learning about numerical palindromes, which are numbers that read the same forwards and backwards. She wants to write a program to find the largest numerical palindrome that can be obtained by multiplying two n-digit numbers. Write a program to help Gabriella by taking in a single integer n and outputting the largest numerical palindrome that can be obtained by multiplying two n-digit numbers. Input A single integer n (1 ≤ n ≤ 3). Output A single integer representing the largest numerical palindrome. Example Input: 2 Output: 9009","solution":"def is_palindrome(num): Check if a number is a palindrome. return str(num) == str(num)[::-1] def largest_palindrome_product(n): Find the largest palindrome product of two n-digit numbers. max_num = 10**n - 1 min_num = 10**(n-1) max_palindrome = 0 for i in range(max_num, min_num - 1, -1): for j in range(i, min_num - 1, -1): product = i * j if is_palindrome(product) and product > max_palindrome: max_palindrome = product return max_palindrome"},{"question":"A certain country has a peculiar communication strategy. The citizens of this country have a daily conversation ritual. Each day, a person sends exactly a_i messages to distinct people in their contact list. Each person has an infinite number of contacts, so they are only limited by the number of messages they are allowed to send exactly each day. However, the message transport network has a constraint. Each message is assigned to a batch, and each batch can handle up to m messages before a new batch has to be created. Your task is to calculate the number of batches created for delivering messages each day. -----Input----- The first line of the input contains two integers n, m (1 le n le 2 cdot 10^5, 1 le m le 10^9) — the number of days of sending messages and the maximum number of messages a single batch can handle. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9), where a_i represents the number of messages sent on the i-th day. -----Output----- Print exactly n integers b_1, b_2, dots, b_n, where b_i is the number of batches created on the i-th day. -----Examples----- Input 3 5 3 7 9 Output 1 2 2 Input 4 20 10 9 19 2 Output 1 1 1 1 Input 1 100 99 Output 1 -----Note----- In the first example, the batches created each day for sending messages will look like this: - On the first day, 3 messages can be sent in 1 batch. - On the second day, 7 messages span across 2 batches (5 messages in the first batch, 2 in the second). - On the third day, 9 messages span across 2 batches (5 messages in the first batch, 4 in the second).","solution":"def calculate_batches(n, m, messages): This function calculates the number of batches required to send messages each day, considering the constraint that each batch can handle up to m messages. :param n: Number of days of sending messages :param m: Maximum number of messages a single batch can handle :param messages: List containing number of messages sent each day :return: List containing number of batches created each day batches = [] for msg in messages: batches.append((msg + m - 1) // m) return batches"},{"question":"You are given an array of N integers A_1, A_2, ldots, A_N. You want to perform exactly K operations on this array. In one operation, you select any two elements of the array A_i and A_j (where 1 leq i, j leq N and i neq j), and replace A_i with A_i + A_j. Your goal is to maximize the sum of the array after performing exactly K operations. ------ Input ------ The first line contains two integers N and K. The second line contains N integers A_1, A_2, ldots, A_N. ------ Output ------ Print a single integer ― the maximum possible sum of the array after performing exactly K operations. ------ Constraints ------ 1 leq N leq 10^5 0 leq K leq 10^9 -10^9 leq A_i leq 10^9 ------ Example Input 1 ------ 4 1 1 2 3 4 ------ Example Output 1 ------ 10 ------ Explanation 1 ------ On the first operation, you can select A_4 and A_3, and replace A_4 by A_4 + A_3 to get the array [1, 2, 3, 7], which sums to 13. ------ Example Input 2 ------ 3 2 -1 7 8 ------ Example Output 2 ------ 30 ------ Explanation 2 ------ On the first operation, you can select A_2 and A_3, and replace A_2 by A_2 + A_3 to get the array [-1, 15, 8]. On the second operation, you can select A_2 and A_3, and replace A_2 by A_2 + A_3 to get the array [-1, 23, 8], which sums to 30.","solution":"def maximize_sum(N, K, A): Maximizes the sum of the array after performing exactly K operations. Args: N (int): The number of elements in the array. K (int): The number of operations to perform. A (list of int): The array of integers. Returns: int: The maximum possible sum of the array. total_sum = sum(A) max_element = max(A) # The maximum sum after K operations can be achieved by adding the maximum element to the # sum K times if K > 0, since adding the maximum element to any other element maximizes the increase. if K > 0: total_sum += max_element * K return total_sum"},{"question":"A group of friends is planning a hiking trip and need to decide on the optimal equipment to carry. They have a list of items, each with a specific weight and a value representing its importance. They want to maximize the total value of the items they carry, but the total weight of the selected items must not exceed a certain limit. Write a program that determines the maximum value of items that can be carried without exceeding the weight limit. Input The first line of input contains two space-separated integers, W (the maximum weight the friends can carry) and N (the number of items available). Each of the next N lines contains two space-separated integers, wi (the weight of the ith item) and vi (the value of the ith item). Output Print a single integer, the maximum value of the items that can be carried without exceeding the weight limit. Constraints 1 ≤ W ≤ 1000 1 ≤ N ≤ 100 1 ≤ wi ≤ 100 1 ≤ vi ≤ 1000 Example Input: 50 3 10 60 20 100 30 120 Output: 220 Explanation: The friends can carry the items with weights 20 and 30, which have a total value of 220, without exceeding the maximum weight limit of 50.","solution":"def knapsack_max_value(W, N, items): Determines the maximum value of items that can be carried without exceeding the weight limit. Parameters: W (int): Maximum weight that can be carried. N (int): Number of items available. items (list of tuples): List of (weight, value) pairs for each item. Returns: int: Maximum value of items that can be carried without exceeding the weight limit. # Initialize a DP table with dimensions (N+1) x (W+1) dp = [[0] * (W + 1) for _ in range(N + 1)] # Populate the DP table for i in range(1, N + 1): weight, value = items[i - 1] for w in range(W + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] # The maximum value is found at dp[N][W] return dp[N][W]"},{"question":"Alice loves cooking for her friends and often organizes weekly dinner gatherings. She always wants to include the most liked dishes. To make sure everyone enjoys the dinner, Alice collects feedback in the form of votes from her friends through a popular voting app. Each friend can cast a vote for any number of dishes they like. Alice wants to finalize the dinner menu by selecting exactly \'k\' dishes that have received the maximum votes. If there are multiple sets of \'k\' dishes with the same vote count, she prefers the lexicographically smallest set. Can you help Alice determine which \'k\' dishes to prepare for the dinner? Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of dishes and the number of dishes to be selected respectively. The second line contains n integers, where the i-th integer represents the number of votes the i-th dish has received. The names of the dishes are represented as distinct lowercase strings in the third line, where the i-th string is the name of the i-th dish. Output Output the selected dish names (k strings) in lexicographical order, each on a new line. Examples Input 5 3 4 2 3 6 1 pasta curry salad burger fries Output burger pasta salad Input 4 2 1 3 3 2 apple banana cherry date Output banana cherry Note In the first example, the dishes with highest votes are \'burger\' with 6 votes, \'pasta\' with 4 votes, and \'salad\' with 3 votes. They are printed in lexicographical order. In the second example, there are two dishes with 3 votes each, which are \'banana\' and \'cherry\'. There\'s no conflict with 2 votes for \'date\', so \'banana\' and \'cherry\' are chosen and printed lexicographically.","solution":"def select_dishes(n, k, votes, names): Selects exactly \'k\' dishes that have received the maximum votes. If there are multiple sets of \'k\' dishes with the same vote count, it prefers the lexicographically smallest set. # Combine the names and votes into a list of tuples and sort by votes and then lexicographically by names dishes = sorted(zip(votes, names), key=lambda x: (-x[0], x[1])) # Extract the top k dish names selected_dishes = [dishes[i][1] for i in range(k)] # Sort the selected dishes lexicographically selected_dishes.sort() return selected_dishes"},{"question":"A pizza delivery company has just introduced a new feature in their service — pizza customization. Customers can create their own pizza by choosing from a set of available toppings. However, the company has imposed two restrictions on the customization — the customer must choose exactly k toppings, and no topping should be used more than once in a pizza. Given an array `t[]` of size `n` where each element of the array represents a unique topping, determine all possible combinations of k distinct toppings that the customers can choose from to customize their pizza. Write a function `generateCombinations(t: List[int], k: int) -> List[List[int]]` that generates all possible combinations of k distinct toppings. -----Input----- - `t`: a list of integers of size `n` (1 ≤ n ≤ 20), representing available toppings. All elements in `t` are unique. - `k`: an integer (1 ≤ k ≤ n), the number of toppings to choose. -----Output----- - A list of lists, where each inner list contains a unique combination of k toppings chosen from the list `t`. The combinations should be in the lexicographical order of the toppings. -----Examples----- Input t = [1, 2, 3] k = 2 Output [[1, 2], [1, 3], [2, 3]] Input t = [4, 5, 6, 7] k = 3 Output [[4, 5, 6], [4, 5, 7], [4, 6, 7], [5, 6, 7]]","solution":"from itertools import combinations from typing import List def generateCombinations(t: List[int], k: int) -> List[List[int]]: Generates all possible combinations of k distinct toppings from the given list. Args: t (List[int]): List of unique toppings. k (int): Number of toppings to choose. Returns: List[List[int]]: List of all possible combinations of k toppings. t.sort() # Ensure the toppings are in lexicographical order return list(map(list, combinations(t, k)))"},{"question":"Given an integer N representing the number of minutes a person spends on an activity, create a program that computes the number of hours and remaining minutes from the given total minutes. Input The input is provided in the following format: N The input line provides the number of minutes N (0 leq N leq 10^4) as an integer. Output Output the number of hours and remaining minutes in the format: hours:minutes Examples Input 123 Output 2:3 Input 60 Output 1:0 Input 150 Output 2:30 Input 0 Output 0:0","solution":"def convert_minutes(N): Converts total minutes to hours and remaining minutes. Args: N: an integer representing the number of minutes (0 <= N <= 10^4) Returns: A string in the format \\"hours:minutes\\" hours = N // 60 minutes = N % 60 return f\\"{hours}:{minutes}\\""},{"question":"Longest Consecutive Sequence Given an unsorted array of integers, find the length of the longest consecutive elements sequence. For example, given `[100, 4, 200, 1, 3, 2]`, the longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore, the length is `4`. Your algorithm should run in O(n) complexity. From LeetCode\'s [Problem #128](https://leetcode.com/problems/longest-consecutive-sequence/ \\"LeetCode - Problem 128\\").","solution":"def longest_consecutive(nums): Finds the length of the longest consecutive elements sequence in an unsorted array. :param nums: List[int] - the list of unsorted integers :return: int - the length of the longest consecutive elements sequence if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Problem statement Yuki is fascinated by binary trees, and she has recently learned about a special kind of binary tree called \\"Balanced Binary Tree\\". A binary tree is considered balanced if, for every node in the tree, the difference in height between its left and right subtrees is at most 1. Yuki has challenged you to help her write a program that determines whether a given binary tree is balanced or not. You are given the binary tree in the form of a list where each element represents a node. The list format is such that the first element is the root of the tree, the second element is the left child, the third element is the right child, and so on in a breadth-first manner. If a node does not have a left or right child, it is represented as `null` in the list. Your task is to determine whether the given binary tree is balanced. # Input The input consists of: - A list `tree` of integers and null values representing the nodes of the binary tree. # Constraints - The list `tree` can contain at most 10,000 elements. - Each element in the list is either an integer or `null`. # Output - Print \\"True\\" if the binary tree is balanced, and \\"False\\" otherwise. # Example Input - `tree = [3, 9, 20, null, null, 15, 7]` Output - `True` Explanation - The given tree can be visualized as: ``` 3 / 9 20 / 15 7 ``` - The maximum height difference between the left and right subtrees of any node in the tree is 1. Hence, the tree is balanced. Input - `tree = [1, 2, 2, 3, 3, null, null, 4, 4]` Output - `False` Explanation - The given tree can be visualized as: ``` 1 / 2 2 / 3 3 / 4 4 ``` - The height difference between the left subtree and the right subtree of node with value 2 is 2, which is greater than 1. Hence, the tree is not balanced.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(index, tree): if index >= len(tree) or tree[index] is None: return None node = TreeNode(tree[index]) node.left = build_tree(2 * index + 1, tree) node.right = build_tree(2 * index + 2, tree) return node def isBalanced(root): def check(node): if not node: return 0, True left_height, left_balanced = check(node.left) right_height, right_balanced = check(node.right) current_height = 1 + max(left_height, right_height) is_balanced = (left_balanced and right_balanced and abs(left_height - right_height) <= 1) return current_height, is_balanced _, balanced = check(root) return balanced def is_balanced_binary_tree(tree): root = build_tree(0, tree) return isBalanced(root)"},{"question":"Given an array of positive integers, split the array into two subarrays such that the difference between the sum of the elements in the first subarray and the sum of the elements in the second subarray is minimized. Return the minimum difference. -----Constraints----- - The length of the array n is between 1 and 20, inclusive. - Each integer in the array is between 1 and 100, inclusive. -----Input----- The input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print the minimum difference between the sums of the two subarrays. -----Sample Input----- 4 1 3 5 9 -----Sample Output----- 0 The array can be split into two subarrays (1, 9) and (3, 5), whose sums are 10 and 8, respectively. The minimum difference is |10 - 8| = 2. Another possible split is (1, 3, 5) and (9), with sums 9 and 9, resulting in a difference of 0. Thus, the minimum difference is 0.","solution":"def min_difference_partition(n, arr): total_sum = sum(arr) half_sum = total_sum // 2 dp = [0] * (half_sum + 1) for num in arr: for i in range(half_sum, num - 1, -1): dp[i] = max(dp[i], dp[i - num] + num) first_subarray_sum = dp[half_sum] second_subarray_sum = total_sum - first_subarray_sum return abs(first_subarray_sum - second_subarray_sum)"},{"question":"Write a function `find_target_sum_pairs` that takes a list of integers and a target sum as inputs. The function should return all unique pairs of integers from the list that add up to the target sum. Each pair should be returned as a tuple, and the pairs should be returned in a list. **Function Signature** `def find_target_sum_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]:` **Input** - `nums` (List[int]): A list of integers. - `target` (int): The target sum. **Output** - List of tuples, where each tuple consists of two integers that add up to the target sum. **Constraints** - The integers in the list are not necessarily unique. - The integers can be positive, negative, or zero. - The list contains at most 10,000 elements. - Each pair should be returned in the format (min_value, max_value), where min_value ≤ max_value. - The pairs should be returned in lexicographical order based on the first then second element of the tuple. **Example** Input ```python find_target_sum_pairs([2, 4, 3, 3, 5, -1, 1], 4) ``` Output ```python [(-1, 5), (1, 3)] ``` Input ```python find_target_sum_pairs([1, 1, 1, 1], 2) ``` Output ```python [(1, 1)] ```","solution":"from typing import List, Tuple def find_target_sum_pairs(nums: List[int], target: int) -> List[Tuple[int, int]]: pairs = set() complements = {} for num in nums: complement = target - num if complement in complements: pairs.add((min(num, complement), max(num, complement))) complements[num] = complements.get(num, 0) + 1 return sorted(list(pairs))"},{"question":"Alice has been given a list of M students\' scores in the form of an array `scores[]` which contains M integers representing the scores of each student. She needs to identify whether a certain target score exists in the list. If it does, she wants to know the first and last positions of that target score in the sorted list of scores. If the target score does not exist in the list, she should return `-1` for both positions. Write a function `findPositionsOfTarget` that takes the following arguments: - M: an integer representing the number of students. - scores: a list of M integers representing the scores of the students. - target: an integer representing the target score Alice is looking for. The function should output a tuple containing two integers: - The first position of the target score in the sorted scores list (0-based index). - The last position of the target score in the sorted scores list (0-based index). If the target score is not found, return `(-1, -1)`. # ------ Input ------ - An integer M (1 ≤ M ≤ 10^5) - A list `scores` of M integers (0 ≤ scores[i] ≤ 1000) - An integer `target` (0 ≤ target ≤ 1000) # ------ Output ------ - A tuple of two integers representing the first and last positions of the target score in the sorted list or `(-1, -1)` if the target is not present. # ------ Example ------ Input: ``` M = 8 scores = [1, 3, 3, 5, 5, 5, 7, 8] target = 5 ``` Output: ``` (3, 5) ``` Explanation: In the sorted list `[1, 3, 3, 5, 5, 5, 7, 8]`, the first occurrence of the target score `5` is at index `3` and the last occurrence is at index `5`. # ------ Constraints ------ 1 ≤ M ≤ 10^{5} 0 ≤ scores[i] ≤ 1000 0 ≤ target ≤ 1000 Note: Ensure that your solution is optimized for large inputs and consider edge cases where the target may not exist in the list.","solution":"def findPositionsOfTarget(M, scores, target): Returns a tuple containing the first and last positions of the target score in the sorted list of scores. scores.sort() first_position = -1 last_position = -1 for i in range(M): if scores[i] == target: if first_position == -1: first_position = i last_position = i return (first_position, last_position)"},{"question":"# Task You are given an array of integers and a target sum. Your goal is to determine whether there are two distinct elements in the array that add up to the target sum. If such a pair exists, return their indices as a tuple. If there is no such pair, return `None`. # Input/Output `[input]` integer array `arr` A list of integers. `[input]` integer `target` The target sum. `[output]` a tuple of two integers, or `None` A tuple of two integers representing the indices of the two elements whose sum is equal to the target. If no such pair exists, return `None`. # Example For `arr = [2, 7, 11, 15]` and `target = 9`, the output should be `(0, 1)` For `arr = [1, 2, 3, 4]` and `target = 8`, the output should be `None` For `arr = [1, 2, 3, 7]` and `target = 10`, the output should be `(2, 3)`","solution":"def two_sum(arr, target): Determines whether there are two distinct elements in the array that add up to the target sum. Returns their indices as a tuple or None if no such pair exists. seen = {} for i, num in enumerate(arr): complement = target - num if complement in seen: return (seen[complement], i) seen[num] = i return None"},{"question":"Given an integer array `nums`, design a function to return the list of all possible *k*-element subsets (combinations) of the array. The solution must not contain duplicate combinations and is not required to be in sorted order. Write a function: ```python def combine(nums: List[int], k: int) -> List[List[int]]: ``` # Parameters: - `nums`: A list of integers representing the input array. - `k`: An integer representing the size of each subset. # Returns: - A list of lists, where each inner list represents a unique combination of `k` elements from `nums`. # Example: ```python Input: nums = [1, 2, 3], k = 2 Output: [[1, 2], [1, 3], [2, 3]] Input: nums = [1, 2, 3, 4], k = 3 Output: [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]] ``` # Constraints: - `1 <= len(nums) <= 20` - `1 <= k <= len(nums)` - All elements of `nums` are unique and within the range `1` to `50`. # Notes: - Combinations should not contain duplicate sets. - The order of subsets and the order of elements within each subset do not matter in the output. # Hints: - Consider using backtracking to explore all possible combinations. - You may find Python’s itertools library helpful, but try implementing a solution without it for practice.","solution":"from typing import List def combine(nums: List[int], k: int) -> List[List[int]]: def backtrack(start, path): if len(path) == k: result.append(path.copy()) return for i in range(start, len(nums)): path.append(nums[i]) backtrack(i + 1, path) path.pop() result = [] backtrack(0, []) return result"},{"question":"Anna is an ambitious archaeologist exploring an ancient ruin. The site is designed as a grid consisting of N times M cells, each containing either a treasure, an obstacle, or empty space. Anna starts at the top-left corner of the grid (cell (0,0)) and wants to reach the bottom-right corner (cell (N-1,M-1)) to retrieve a legendary artifact. Anna can move to cells that are next to her current position, either to the right (rightarrow) or down (downarrow). However, she cannot move into a cell that contains an obstacle, as it would block her path. Your task is to help Anna determine the maximum number of treasures she can collect from the starting point to the ending point of the grid. If it is impossible for Anna to reach the bottom-right corner, output -1. -----Input----- The first line contains two integers 1 le N, M le 1000, representing the number of rows and columns in the grid. The next N lines contain M characters each, representing the grid: - `.` indicates an empty cell, - `#` indicates an obstacle, - `T` indicates a cell that contains a treasure. -----Output----- Output a single integer, the maximum number of treasures Anna can collect, or -1 if she cannot reach the bottom-right corner. -----Examples----- Sample Input: 3 4 .T.. T# ...T Sample Output: 3 Sample Input: 2 2 .T Sample Output: -1","solution":"from collections import deque def max_treasures(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0)] # Right and Down movements visited = [[False] * m for _ in range(n)] treasures = [[0] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True treasures[0][0] = 1 if grid[0][0] == \'T\' else 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\' and not visited[nx][ny]: visited[nx][ny] = True treasures[nx][ny] = treasures[x][y] + (1 if grid[nx][ny] == \'T\' else 0) queue.append((nx, ny)) return treasures[n-1][m-1] if visited[n-1][m-1] else -1"},{"question":"You are given a string `s` composed of lowercase letters and an integer `k`. Your task is to determine whether it\'s possible to rearrange the characters in `s` such that every substring of length `k` has at least `k-1` distinct characters. -----Input----- The first line of the input contains one integer `t` (1 leq t leq 100) — the number of test cases. Each of the next 2*t lines describes a test case: - The first line of each test case contains an integer k (1 leq k leq 50). - The second line contains the string s (1 leq |s| leq 100), where |s| represents the length of `s` and consists only of lowercase letters. -----Output----- For each test case, print \\"Yes\\" if it\'s possible to rearrange the characters in `s` such that every substring of length `k` has at least `k-1` distinct characters, or \\"No\\" otherwise. Each character in the output can be printed in any case. -----Example----- Input 3 3 aabbcc 2 aabb 4 aaaabbbb Output Yes Yes No -----Note----- In the first test case, one possible rearrangement could be \\"abcabc\\", where every substring of length 3 has at least 2 distinct characters. In the second test case, one possible rearrangement could be \\"abab\\". For any substring of length 2, there are 2 distinct characters. In the third test case, no matter how the string is rearranged, there will always be at least one substring of length 4 that does not have at least 3 distinct characters.","solution":"from collections import Counter def can_rearrange(s, k): Determines if it\'s possible to rearrange the characters in `s` such that every substring of length `k` has at least `k-1` distinct characters. if k == 1: return \\"Yes\\" freq = Counter(s) max_freq = max(freq.values()) if max_freq > len(s) - (k - 1) * max(0, max_freq - 1): return \\"No\\" return \\"Yes\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: k, s = case result = can_rearrange(s, k) results.append(result) return results"},{"question":"Toeplitz Matrix Check A matrix is called a Toeplitz matrix if every diagonal from top-left to bottom-right has the same elements. Given a matrix of size M x N, write a program to determine if the matrix is a Toeplitz matrix or not. -----Input:----- - The first line contains two integers M and N, the number of rows and columns of the matrix respectively. - Each of the next M lines contains N integers representing the elements of the matrix. -----Output:----- - Output a single line containing either \\"YES\\" if the matrix is a Toeplitz matrix or \\"NO\\" otherwise. -----Constraints:----- 1 <= M, N <= 1000 0 <= matrix[i][j] <= 1000 -----Example:-----Input: 3 4 1 2 3 4 5 1 2 3 6 5 1 2 Output: YES -----Input: 3 4 1 2 3 4 5 1 9 3 6 5 1 2 Output: NO Explanation: In the first example, all diagonals from top-left to bottom-right have the same elements, so the output is \\"YES\\". In the second example, the second diagonal (starting at position (1,2)) contains different elements (9 does not match 2), so the output is \\"NO\\".","solution":"def is_toeplitz(matrix): Determines if the given matrix is a Toeplitz matrix. M = len(matrix) N = len(matrix[0]) for i in range(M): for j in range(N): if i > 0 and j > 0 and matrix[i][j] != matrix[i-1][j-1]: return \\"NO\\" return \\"YES\\""},{"question":"In a game, you are given a sequence of movements that a player makes on a 2D grid starting from the origin (0,0). The movements are given as a string consisting of the characters \'U\', \'D\', \'L\', and \'R\', which correspond to moving up, down, left, and right by one unit, respectively. Write a program to determine if the player returns to the origin after completing all the movements. -----Constraints----- - The length of the movement string will be between 1 and 1000 characters. - The movement string will only contain the characters \'U\', \'D\', \'L\', and \'R\'. -----Input----- Input is given from Standard Input in the following format: movements -----Output----- If the player returns to the origin, print Yes; otherwise, print No. -----Sample Input----- UDLR -----Sample Output----- Yes The player moves up, down, left, and right, returning to the origin, so the output is Yes.","solution":"def does_return_to_origin(movements): Determines if the player returns to the origin after completing all movements. Parameters: movements (str): The string of movements consisting of \'U\', \'D\', \'L\', and \'R\'. Returns: str: \\"Yes\\" if the player returns to the origin, otherwise \\"No\\". x, y = 0, 0 for move in movements: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"A scientist, Dr. Altrunes, has been fascinated by the concept of time travel and has devised a unique way to track time. She uses a special notation where each unit of time can be represented by a word, and certain words indicate a distinct number of minutes. Using these words, Dr. Altrunes can encode durations of time in terms of their cumulative minutes. For example, in Dr. Altrunes\'s time notation, if the word \\"blip\\" represents 5 minutes, \\"blink\\" represents 15 minutes, and \\"bloop\\" represents 30 minutes, then \\"blipblink\\" would represent 20 minutes (5 minutes from \\"blip\\" plus 15 minutes from \\"blink\\"), while \\"bloopblip\\" would represent 35 minutes (30 minutes from \\"bloop\\" plus 5 minutes from \\"blip\\"). To differentiate between words in a given notation, words may have separators like \'-\' (e.g., \\"blip-blink\\"). Given a dictionary of words and their corresponding minutes, your task is to determine the minimum time duration that can be encoded using the given time notation. The encoding of a time duration must always use separators between different words, but these separators should not be considered as part of the length of words. Input The input consists of multiple test cases. Each test case begins with an integer N (1 ≤ N ≤ 100). The integer N indicates the number of words in the dictionary of time notation. The following N lines give the words in the dictionary. Each line contains a word wi and an integer ti (1 ≤ i ≤ N, 1 ≤ ti ≤ 60), specifying that the word wi expresses a time duration of ti minutes. Each wi consists of at most 100 alphabetical letters. Then a line which contains an expression of a time duration in Altrunes\'s notation follows. The expression consists of at most 200 alphabetical letters. The end of the input is indicated by a line which contains only a single 0. Output For each test case, print a line which contains the case number and the minimum time duration encoded by the given expression in the input. Example Input 3 blip 5 blink 15 bloop 30 blipblink 3 astro 10 flux 20 tempo 50 astroflux 2 tick 1 tock 2 tickticktock 4 quick 1 brown 2 fox 4 jump 8 quickbrownfox 0 Output Case 1: 20 Case 2: 30 Case 3: 4 Case 4: 3","solution":"def calculate_time_durations(input): result = [] case_number = 1 while input: N = int(input.pop(0)) if N == 0: break word_dict = {} for _ in range(N): w, t = input.pop(0).split() word_dict[w] = int(t) encoded_duration = input.pop(0) min_time_duration = 0 words = encoded_duration.split(\'-\') for word in words: min_time_duration += word_dict[word] result.append(f\\"Case {case_number}: {min_time_duration}\\") case_number += 1 return result"},{"question":"The function should return the first non-repeated character in a given string. Can you identify the issue and fix it? ```python first_non_repeated_character(\\"swiss\\") # should return \'w\' ```","solution":"def first_non_repeated_character(s): Returns the first non-repeated character in the given string. # Dictionary to keep the count of each character char_count = {} # First pass to count all characters for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Second pass to find the first character that has a count of 1 for char in s: if char_count[char] == 1: return char # If there\'s no non-repeated character return None"},{"question":"Given a square grid of size N x N, you need to perform Q operations on it. The grid initially contains all zeros. There are two types of operations you can perform: 1. \\"SET X Y VAL\\": Set the value at cell (X, Y) to VAL. 2. \\"SUM X1 Y1 X2 Y2\\": Compute the sum of values in the sub-grid defined by the top-left corner (X1, Y1) and the bottom-right corner (X2, Y2). You are required to process all the operations and output the results of the \\"SUM\\" operations. Input Format: - The first line contains the integer N, the size of the grid. - The second line contains the integer Q, the number of operations. - The following Q lines each describe an operation in one of the following formats: - \\"SET X Y VAL\\" where X and Y are the coordinates (0-indexed) and VAL is the value to set. - \\"SUM X1 Y1 X2 Y2\\" where (X1, Y1) is the top-left corner and (X2, Y2) is the bottom-right corner of the sub-grid. Output Format: - For each \\"SUM\\" operation, output a single integer representing the sum of the values in the specified sub-grid. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ Q ≤ 100000 - 0 ≤ X, Y, X1, Y1, X2, Y2 < N - 0 ≤ VAL ≤ 10^6 SAMPLE INPUT 4 5 SET 1 1 5 SET 2 2 7 SUM 0 0 3 3 SUM 1 1 2 2 SET 3 3 4 SAMPLE OUTPUT 12 12 Explanation: 1. The grid after the first operation is: 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 2. The grid after the second operation is: 0 0 0 0 0 5 0 0 0 0 7 0 0 0 0 0 3. The sum of the entire grid (0,0) to (3,3) is 12. 4. The sum of the sub-grid (1,1) to (2,2) is also 12. 5. The grid after the final operation is: 0 0 0 0 0 5 0 0 0 0 7 0 0 0 0 4","solution":"def process_operations(N, operations): Processes the given operations on an NxN grid initially filled with zeros. Parameters: N (int): The size of the grid. operations (list): A list of operation strings. Returns: list: A list of results from \\"SUM\\" operations. grid = [[0]*N for _ in range(N)] results = [] for operation in operations: parts = operation.split() if parts[0] == \\"SET\\": x, y, val = int(parts[1]), int(parts[2]), int(parts[3]) grid[x][y] = val elif parts[0] == \\"SUM\\": x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) total_sum = 0 for i in range(x1, x2 + 1): for j in range(y1, y2 + 1): total_sum += grid[i][j] results.append(total_sum) return results"},{"question":"Given a sequence defined as follows: The first term a1 is 1. Each subsequent term is the product of the previous term and the position of the term in the sequence (i.e., a2 = a1 * 2, a3 = a2 * 3, and so on). Write a function to find the nth term of this sequence. Example 1: Input: n = 3 Output: 6 Explanation: a1 = 1 a2 = 1 * 2 = 2 a3 = 2 * 3 = 6 Example 2: Input: n = 5 Output: 120 Explanation: a1 = 1 a2 = 1 * 2 = 2 a3 = 2 * 3 = 6 a4 = 6 * 4 = 24 a5 = 24 * 5 = 120 Example 3: Input: n = 1 Output: 1 Explanation: a1 = 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function nthTermOfSequence() which takes an integer n and returns the nth term of the sequence. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^5","solution":"def nthTermOfSequence(n): Returns the nth term of the sequence defined as: a1 = 1, an = a(n-1) * n for n > 1 term = 1 for i in range(2, n + 1): term *= i return term"},{"question":"After receiving the final sales data for the year, a company wants to give a special bonus to the salesperson who had the highest number of distinct sales. They define \\"distinct sales\\" as the number of unique products sold by the salesperson, disregarding the number of units of each product sold. As a software engineer, you have been asked to write a program to determine which salesperson will receive the bonus. -----Input----- The first line of the input contains an integer M (1 leq M leq 500), the number of sales data entries. The next M lines each contain two space-separated integers. The first integer represents the ID of the salesperson, and the second integer represents the ID of the product sold. The IDs are positive integers where the salesperson\'s ID is no larger than 10^4 and the product\'s ID is no larger than 10^5. -----Output----- Output a single integer, the ID of the salesperson with the highest number of distinct sales. If there is a tie, output the smallest salesperson ID. -----Examples----- Sample Input 1: 5 1 101 1 102 2 101 2 103 2 104 Sample Output 1: 2 Sample Input 2: 7 1 201 2 201 3 201 3 202 1 202 2 202 3 203 Sample Output 2: 3","solution":"def find_top_salesperson(sales_data): from collections import defaultdict # Dictionary to keep track of products each salesperson has sold salesperson_products = defaultdict(set) for salesperson_id, product_id in sales_data: salesperson_products[salesperson_id].add(product_id) # Determine the salesperson with the highest number of distinct sales max_distinct_sales = -1 top_salesperson = -1 for salesperson, products in salesperson_products.items(): distinct_sales = len(products) # Check for the highest count of distinct products # Break ties by preferring the smaller salesperson ID if distinct_sales > max_distinct_sales or (distinct_sales == max_distinct_sales and (top_salesperson == -1 or salesperson < top_salesperson)): max_distinct_sales = distinct_sales top_salesperson = salesperson return top_salesperson # Example usage: # M, sales_data = 5, [(1, 101), (1, 102), (2, 101), (2, 103), (2, 104)] # print(find_top_salesperson(sales_data)) # Output should be 2"},{"question":"```markdown The inventors at Techy Toys are working on a new interactive toy robot named RoboBuddy. RoboBuddy is designed to follow a pre-defined sequence of movements and perform actions accordingly. RoboBuddy understands the following simple commands: - \'L\': Move one unit left - \'R\': Move one unit right - \'U\': Move one unit up - \'D\': Move one unit down After executing a series of movements, RoboBuddy must return to its original starting point for the sequence to be valid. Write a function `is_valid_sequence(movements: str) -> bool` that determines if a given sequence of commands will return RoboBuddy to the starting point `(0, 0)`. # Input - A single string `movements` containing the commands for RoboBuddy. The string length can be any value between 1 and 10<sup>5</sup> inclusive. # Output - Return a boolean value `True` if the sequence returns RoboBuddy to the starting point, and `False` otherwise. # Examples ```python assert is_valid_sequence(\\"LRUD\\") == True assert is_valid_sequence(\\"LLRR\\") == True assert is_valid_sequence(\\"UUUU\\") == False assert is_valid_sequence(\\"UDUDUD\\") == True assert is_valid_sequence(\\"RLUDLR\\") == True ``` # Note - The function needs to consider both direction and number of movements. For instance, for every \'L\' there must be a corresponding \'R\', and for every \'U\' there must be a corresponding \'D\' in the sequence. ```","solution":"def is_valid_sequence(movements): Determines if a given sequence of commands will return RoboBuddy to the starting point (0, 0). :param movements: A string containing the commands for RoboBuddy. :return: True if the sequence returns RoboBuddy to the starting point, False otherwise. x, y = 0, 0 for move in movements: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"Create a function that converts a given positive integer n into a special binary representation where the digits are alternately 0s and 1s, starting with 1. For example, if the input is 5, the output should be the binary representation of the number `21`, which is `10101` in binary. You need to implement the function `special_binary_representation(n)` that takes an integer n as input and returns a string representing the number in the special binary format described. For example, for the input 3, the output should be \\"101\\". This is because for n=3, the sequence should be \\"101\\" — a 3-digit number starting with 1 and alternating 0 and 1. -----Input----- The input consists of a single integer n (1 le n le 1000). -----Output----- Output a single string representing the special binary format described. -----Examples----- Input 3 Output 101 Input 5 Output 10101 Input 8 Output 10101010","solution":"def special_binary_representation(n): Returns a special binary representation of length n, starting with 1 and alternating with 0s and 1s. result = \\"\\" for i in range(n): if i % 2 == 0: result += \'1\' else: result += \'0\' return result"},{"question":"Problem Alice loves to ride her bicycle every morning and track her cycling routes. She wants to analyze her performance and improve her skills by reviewing her routes. One thing Alice is particularly interested in is finding out the longest possible segment of her route where the elevation does not decrease. The elevation is given for each meter of her route. To help Alice, you need to write a program that finds the length of the longest segment of her route where the elevation either stays the same or increases. Constraints The input satisfies the following constraints: * 1 ≤ N ≤ 10^5 * 0 ≤ Ei ≤ 10^9 Input An integer N specifying the number of meters in the route, followed by N integers E1, E2, ..., EN indicating the elevation at each meter. Output Output a single integer representing the length of the longest segment where the elevation does not decrease. Examples Input 8 5 1 2 3 2 3 4 5 Output 4 Input 5 7 7 7 7 7 Output 5 Input 6 6 5 4 3 2 1 Output 1","solution":"def longest_non_decreasing_segment(n, elevations): Returns the length of the longest segment where the elevation does not decrease. if n == 0: return 0 max_len = 1 current_len = 1 for i in range(1, n): if elevations[i] >= elevations[i-1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Maria is fond of cryptographic puzzles and has come up with a new challenge. She has a sequence of integers and wants to determine if, through a series of XOR operations, a specified target integer can be achieved. Given an array of integers, you\'re tasked with determining if it\'s possible to select a subset of these integers such that their XOR equals a given target. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 20) — the number of integers in the array. The second line of each test case contains n integers a_1, a_2, ldots, a_n (0 le a_i le 10^5). The third line of each test case contains a single integer x (0 le x le 10^5) — the target XOR value. It is guaranteed that the sum of n for all test cases does not exceed 200. -----Output----- For each test case, print a single line: print YES if a subset of the integers in the array can be selected such that their XOR equals x, otherwise print NO. You may print each letter in any case (for example, YES, Yes, yes, yEs will all be recognized as positive answer). -----Examples----- Input 3 3 1 2 3 0 4 5 2 9 1 6 2 0 0 1 Output YES YES NO -----Note----- In the first test case, the subset {1, 2, 3} is chosen, and 1 XOR 2 XOR 3 equals 0. In the second test case, the subset {5, 1} is chosen, and 5 XOR 1 equals 6. In the third test case, selecting any subset of {0, 0} cannot result in the XOR value of 1 since XORing zeroes will always result in 0.","solution":"def subset_xor_equals_target(t, test_cases): results = [] def can_achieve_xor(arr, x): # Using a set to keep track of possible xor results possible_xors = {0} for num in arr: new_xors = set() for p_xor in possible_xors: new_xors.add(p_xor ^ num) possible_xors.update(new_xors) return \'YES\' if x in possible_xors else \'NO\' for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] x = test_cases[i][2] results.append(can_achieve_xor(arr, x)) return results"},{"question":"You are given a collection of opportunity events, each comprising a start time and an end time. An event can be represented as a tuple of two numbers (s, e), where s is the start time and e is the end time. The times are given in 24-hour format without the colon (i.e., from 0000 to 2359). A person can attend an event if it does not overlap with any other event they are attending. Two events overlap if their times intersect. For example, event (0900, 1100) overlaps with event (1030, 1230) but does not overlap with event (1200, 1300). Given a list of events, determine the maximum number of non-overlapping events one person can attend. -----Input----- The first line of input contains a single integer n, indicating the number of events. The next n lines describe the events. Each line contains two integers s and e, representing the start time and end time of an event. All events have s < e. The total number of events does not exceed 100,000. -----Output----- Display a single integer indicating the maximum number of non-overlapping events one person can attend. -----Examples----- Sample Input 1: 3 0900 1100 1000 1230 1200 1300 Sample Output 1: 2 Sample Input 2: 5 0830 0930 0900 1100 1030 1130 1115 1300 1230 1400 Sample Output 2: 3","solution":"def max_non_overlapping_events(events): Determine the maximum number of non-overlapping events a person can attend. # Sort the events by end time events.sort(key=lambda x: x[1]) max_events = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: max_events += 1 last_end_time = end return max_events def parse_input(input_str): lines = input_str.strip().split(\'n\') n = int(lines[0]) events = [tuple(map(int, line.split())) for line in lines[1:]] return events"},{"question":"Write a function that simulates a simplified version of a command-line search utility. This function will take two arguments: a string `pattern` (the substring to search for) and a list of strings `file_lines` (each string represents a line from a file). For each line in `file_lines`, if the line contains the `pattern` (case-insensitive), return a list of all such lines that contain the `pattern`. If no lines contain the `pattern`, the function should return an empty list. **Function Signature:** ```python def search_pattern(pattern: str, file_lines: List[str]) -> List[str]: ``` # Example ```python pattern = \\"search\\" file_lines = [ \\"This is a simple search example.\\", \\"Just another line in the file.\\", \\"Trying to test the search function.\\", \\"SEARCH should be case insensitive.\\", \\"No match here.\\" ] search_pattern(pattern, file_lines) ``` **Output:** ```python [ \\"This is a simple search example.\\", \\"Trying to test the search function.\\", \\"SEARCH should be case insensitive.\\" ] ``` # Constraints - The pattern and lines should be treated case-insensitively. - `pattern` and each line in `file_lines` contain only printable ASCII characters. - The length of `pattern` will be between 1 and 100. - The number of lines in `file_lines` will be between 1 and 1000, and each line will have a maximum length of 256 characters.","solution":"from typing import List def search_pattern(pattern: str, file_lines: List[str]) -> List[str]: This function takes a string pattern and a list of strings file_lines, and returns a list of lines from file_lines that contain the pattern, case-insensitive. pattern = pattern.lower() result = [line for line in file_lines if pattern in line.lower()] return result"},{"question":"Your task is to determine whether it\'s possible to reorder a given series of tasks such that they all can be completed following specific rules. The rules are as follows: 1. Each task has a designated time to complete. 2. There are dependencies between tasks, meaning certain tasks must be done before others. Given an integer n representing the number of tasks, and an integer m representing the number of dependencies, followed by two arrays t and d. Array t contains n integers where t[i] represents the time to complete the i-th task. The array d contains m pairs of integers (a, b) which indicates that task b depends on task a (task a must be completed before task b). Determine if it\'s possible to reorder the tasks such that all dependencies are satisfied. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000). The second line contains n integers where the i-th integer t[i] (1 ≤ t[i] ≤ 1000) represents the time required to complete the i-th task. Each of the next m lines contains two integers a and b (1 ≤ a, b ≤ n), indicating that task b depends on task a. -----Output----- Print \\"Yes\\" if it is possible to reorder the tasks such that all dependencies are satisfied. Otherwise, print \\"No\\". -----Examples----- Input 5 4 3 2 1 4 5 1 2 2 3 3 4 4 5 Output Yes Input 5 5 3 2 1 4 5 1 2 2 3 3 4 4 5 5 1 Output No -----Note----- In the first example, the tasks can be completed in the order: 1, 2, 3, 4, 5. In the second example, the dependencies form a cycle, making it impossible to complete all tasks.","solution":"def can_complete_tasks(n, m, t, d): Determine if it is possible to reorder tasks to meet all dependencies. :param n: Integer - Number of tasks :param m: Integer - Number of dependencies :param t: List of integers - Times to complete each task :param d: List of tuples - Dependencies (a, b) indicating task b depends on task a :return: String - \\"Yes\\" if possible to complete all tasks, \\"No\\" otherwise from collections import defaultdict, deque # Create adjacency list and in-degree array for tasks adj_list = defaultdict(list) in_degree = [0] * n # Build the graph for a, b in d: adj_list[a-1].append(b-1) # converting to 0-based indexing in_degree[b-1] += 1 # Use a queue for nodes with no dependencies queue = deque([i for i in range(n) if in_degree[i] == 0]) completed_tasks = 0 # Number of tasks that can be completed in order # Process tasks using Kahn\'s Algorithm for Topological Sorting while queue: task = queue.popleft() completed_tasks += 1 for neighbor in adj_list[task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If number of completed tasks equals the number of tasks, return \\"Yes\\" return \\"Yes\\" if completed_tasks == n else \\"No\\""},{"question":"You are given a grid of size MxN consisting of various characters. Your task is to find the length of the longest path in the grid such that all the characters in the path are unique. The path can move in 4 directions (left, right, up, down) from a cell to its adjacent cells. The path should not revisit any cell in the grid more than once. Implement the function `longestUniquePath` which returns the length of the longest path with all unique characters. Example 1: Input: grid = [ [\'A\', \'B\', \'C\', \'D\'], [\'E\', \'F\', \'G\', \'H\'], [\'I\', \'J\', \'K\', \'L\'], [\'M\', \'N\', \'O\', \'P\'] ] Output: 16 Explanation: The longest path with all unique characters is of length 16, containing each character in the grid exactly once. Example 2: Input: grid = [ [\'A\', \'A\', \'C\'], [\'B\', \'B\', \'D\'] ] Output: 4 Explanation: One of the longest paths is \\"A->A->C->D\\", with a length of 4. Your Task: You don\'t need to read input or print anything. Complete the function `longestUniquePath()` which takes a list of lists `grid` as input and returns an integer representing the length of the longest path with all unique characters. Expected Time Complexity: O(4^(M*N)) Expected Auxiliary Space: O(M*N) Constraints: 1 <= M, N <= 10 Grid contains only uppercase English letters.","solution":"def longestUniquePath(grid): def dfs(x, y, visited): # Base case: if out of bounds or character has been visited if x < 0 or x >= M or y < 0 or y >= N or grid[x][y] in visited: return 0 visited.add(grid[x][y]) max_length = 1 # Current cell counts as length 1 # Explore all 4 directions for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy max_length = max(max_length, 1 + dfs(nx, ny, visited)) visited.remove(grid[x][y]) return max_length M, N = len(grid), len(grid[0]) max_path_length = 0 for i in range(M): for j in range(N): max_path_length = max(max_path_length, dfs(i, j, set())) return max_path_length"},{"question":"# Find the Missing Number in an Unsorted Array Your task is to find the single missing number from an unsorted array containing unique integers ranging from 1 to n. The array will have a length of n-1, making it evident that there is exactly one number missing from the continuous range. Example: ``` Input: [3, 7, 1, 2, 8, 4, 5] Output: 6 Explanation: The numbers from 1 to 8 are included in the input except for 6. ``` # Constraints: - The array will never be null and will always have at least one element missing from the continuous range. - Values in the array will always be unique and within the specified range. Write a function to solve the problem and enjoy coding it! 😊","solution":"def find_missing_number(arr): Finds the missing number in an array containing unique integers from 1 to n. n = len(arr) + 1 expected_sum = n * (n + 1) / 2 actual_sum = sum(arr) return int(expected_sum - actual_sum)"},{"question":"A frequently occurring situation in many text processing applications is the need to find the minimum number of operations required to convert a given string into a palindrome. A palindrome is a string that reads the same forward and backward, such as \\"madam\\" or \\"racecar\\". The operations allowed are insertions, deletions, or replacements of characters at any position in the string. Write a function `min_operations_to_palindrome` that takes a string `s` consisting of lowercase English letters and returns the minimum number of operations required to convert `s` into a palindrome. Your solution should utilize dynamic programming to achieve an optimal solution. -----Input----- The input is a single string `s` of length between 1 and 10^3, containing only lowercase English letters. -----Output----- The output is a single integer, representing the minimum number of operations required to convert the input string into a palindrome. -----Examples----- Sample Input 1: abc Sample Output 1: 2 Sample Input 2: race Sample Output 2: 3 Sample Input 3: abbac Sample Output 3: 1 Explanation: - For Input 1, \\"abc\\" can be converted to a palindrome by replacing \'b\' with \'a\' and \'c\' with \'a\', resulting in \\"aaa\\". - For Input 2, \\"race\\" can be converted to a palindrome by replacing \'r\' with \'e\', \'a\' with \'c\', and \'c\' with \'a\', resulting in \\"eacee\\". - For Input 3, \\"abbac\\" can be converted to a palindrome by deleting \'c\', resulting in \\"abba\\".","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to convert the input string into a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] # Build the table in bottom-up manner. for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l+1][r-1] else: dp[l][r] = 1 + min(dp[l+1][r], dp[l][r-1]) return dp[0][n-1]"},{"question":"In a small village, a group of scientists is conducting an experiment to study the spread of a certain contagious disease. There are n people in the village, each represented by a node in a graph. Each person can come into contact with any other person, represented by an edge between two nodes. Over time, the disease can spread from an infected person to any of their direct contacts. The scientists want to determine the minimum time required for the disease to potentially spread from one specific person, the \\"patient zero,\\" to all others in the village. Initially, only the patient zero is infected. Each time unit, the disease spreads from any infected person to all of their direct contacts that are not yet infected. The goal is to calculate how many time units it will take for the disease to infect all n people in the village. Input The first line of the input contains two integers n (2 ≤ n ≤ 100) — the number of people in the village (nodes) and m (1 ≤ m ≤ 4950) — the number of pairwise contacts between people (edges). The next m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) indicating that person ai and person bi are direct contacts. Output Print a single integer representing the minimum number of time units required for the disease to spread from the patient zero, assumed to be person 1, to all other people in the village. If it is impossible for the disease to spread to all people, print -1. Examples Input 4 3 1 2 2 3 3 4 Output 3 Input 5 3 1 2 2 3 4 5 Output -1 Note In the first example, person 1 infects person 2 in the first time unit, person 2 infects person 3 in the second time unit, and person 3 infects person 4 in the third time unit. All people are infected in 3 time units. In the second example, there are two disconnected components in the graph, so it is impossible to infect all people starting from person 1. Thus, the output is -1.","solution":"from collections import deque def min_time_to_infect_all(n, m, edges): # Create adjacency list for the graph adj_list = [[] for _ in range(n + 1)] for a, b in edges: adj_list[a].append(b) adj_list[b].append(a) # BFS to find the minimum time to infect all nodes from node 1 visited = [False] * (n + 1) queue = deque([(1, 0)]) # (node, time) visited[1] = True max_time = 0 while queue: current, time = queue.popleft() max_time = max(max_time, time) for neighbor in adj_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, time + 1)) # Check if all nodes are visited if not all(visited[1:]): return -1 return max_time"},{"question":"Alex is organizing a marathon in his city. The marathon route must be designed such that it visits several key locations and the total distance covered is as minimal as possible. Alex has a list of all the locations and the distances between each pair of locations. Unfortunately, due to city regulations, runners are only allowed to run in one direction between any two locations, so the route needs to be designed as a directed path. Alex wants to ensure that all the key locations are visited at least once in the marathon. The route must start at the first location in the list and should end at the last location. Each location can only be visited once, and all locations except the first and the last can have at most one incoming and one outgoing path. Given the number of locations and the distances between them, help Alex determine the minimal distance required to cover all the key locations in the specified order. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100) – the number of locations. The next n - 1 lines each contain three space-separated integers u, v and d (0 ≤ u, v ≤ n - 1, 1 ≤ d ≤ 10^4), meaning that there is a directed path from location u to location v with a distance d. Alex must start at location 0 and end at location n - 1. It is guaranteed that there is at least one path from location 0 to location n - 1. -----Output----- Output a single integer – the minimal distance required to cover all key locations from 0 to n - 1. -----Examples----- Input 3 0 1 2 1 2 3 Output 5 Input 4 0 1 1 0 2 4 1 2 2 2 3 5 Output 8 Input 5 0 1 3 0 2 10 1 3 2 2 3 1 3 4 4 Output 9","solution":"from collections import defaultdict, deque def find_min_distance(n, paths): # Create a graph adjacency list graph = defaultdict(list) for u, v, d in paths: graph[u].append((v, d)) # Kahn\'s algorithm for topological sorting in_degree = [0] * n for u in graph: for v, _ in graph[u]: in_degree[v] += 1 queue = deque([i for i in range(n) if in_degree[i] == 0]) topo_order = [] while queue: node = queue.popleft() topo_order.append(node) for neighbor, _ in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Initialize distances with infinity INF = float(\'inf\') dist = [INF] * n dist[0] = 0 # distance to the start node is 0 # Relax edges in topological order for u in topo_order: for v, d in graph[u]: if dist[u] != INF and dist[u] + d < dist[v]: dist[v] = dist[u] + d # The distance to the last node return dist[n-1] # Wrapper function to parse the given input def minimal_marathon_distance(n, path_info): return find_min_distance(n, path_info)"},{"question":"You are given a list of n integers, for example: ```python numbers = [4, 2, 7, 1, 3] ``` And another list of queries, where each query is a tuple containing a string (\\"odd\\" or \\"even\\") and an integer k, for example: ```python queries = [(\\"odd\\", 2), (\\"even\\", 1)] ``` For each query, you need to find the k-th smallest odd or even number in the list of integers. The k-th smallest number is determined by sorting the numbers and picking the k-th element from the sorted list of the requested parity. If there are fewer than k odd or even numbers in the list, return -1 for that query. Output a list of integers representing the results of each query. Example: Given the `numbers` list above and the `queries` list provided, the output should be: ```python [3, 2] ``` Explanation: - For the first query (\\"odd\\", 2), the odd numbers are [1, 3, 7], and the 2nd smallest odd number is 3. - For the second query (\\"even\\", 1), the even numbers are [2, 4], and the 1st smallest even number is 2.","solution":"def kth_smallest(numbers, queries): Given a list of integers and queries, return the k-th smallest odd or even number for each query. def get_kth_smallest(nums, k, parity): if parity == \\"odd\\": filtered_nums = sorted([num for num in nums if num % 2 != 0]) elif parity == \\"even\\": filtered_nums = sorted([num for num in nums if num % 2 == 0]) if len(filtered_nums) < k: return -1 else: return filtered_nums[k - 1] results = [] for parity, k in queries: result = get_kth_smallest(numbers, k, parity) results.append(result) return results"},{"question":"Story Your team is working on an automated marketing tool that sends promotional codes to users based on various criteria. However, you\'ve noticed that some users are mistakenly getting multiple codes when they should get only one. After investigation, you found out that there are duplicate entries of users in the email list, where each user may appear more than once. Task You need to write a function that will receive a list of user entries, each represented as a dictionary containing user\'s `email` and `fields` which is another dictionary with some additional information about the user. You need to clean up this list by merging duplicate user entries. For duplicates, combine the fields dictionaries, where duplicate keys will cause those values to be concatenated in a comma-separated manner. Return the cleaned-up list of user entries, sorted by their emails in ascending order. Function Signature ```python def merge_user_entries(user_entries: List[Dict[str, Union[str, Dict[str, str]]]]) -> List[Dict[str, Union[str, Dict[str, str]]]]: ``` Input * A list of user entries where each entry is represented as a dictionary, each dictionary contains a user\'s `email` (string) and a dictionary `fields`. Output * A list of merged user entries, sorted by `email` in ascending order. Example ```python user_entries = [ {\\"email\\": \\"john.doe@example.com\\", \\"fields\\": {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\"}}, {\\"email\\": \\"jane.smith@example.com\\", \\"fields\\": {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\"}}, {\\"email\\": \\"john.doe@example.com\\", \\"fields\\": {\\"age\\": \\"30\\", \\"city\\": \\"New York\\"}}, {\\"email\\": \\"john.doe@example.com\\", \\"fields\\": {\\"city\\": \\"San Francisco\\"}} ] ``` Output: ```python [ {\\"email\\": \\"jane.smith@example.com\\", \\"fields\\": {\\"first_name\\": \\"Jane\\", \\"last_name\\": \\"Smith\\"}}, {\\"email\\": \\"john.doe@example.com\\", \\"fields\\": {\\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"age\\": \\"30\\", \\"city\\": \\"New York, San Francisco\\"}} ] ``` Notes * Any dictionary key can appear in the `fields` and the values are always strings. * Ensure the output list is sorted by `email` in ascending order. * If duplicate keys are encountered in the `fields` dictionaries of duplicate entries, their values should be concatenated into a comma-separated string in the merged dictionary.","solution":"from typing import List, Dict, Union def merge_user_entries(user_entries: List[Dict[str, Union[str, Dict[str, str]]]]) -> List[Dict[str, Union[str, Dict[str, str]]]]: merged_users = {} for entry in user_entries: email = entry[\'email\'] fields = entry[\'fields\'] if email not in merged_users: merged_users[email] = {} for key, value in fields.items(): if key in merged_users[email]: merged_users[email][key] += f\\", {value}\\" else: merged_users[email][key] = value result = [] for email, fields in merged_users.items(): result.append({\\"email\\": email, \\"fields\\": fields}) return sorted(result, key=lambda x: x[\'email\'])"},{"question":"You are given a list of integers where each integer appears exactly twice, except for one integer which appears exactly once. Write a function that finds the integer that appears only once. Your function should have a time complexity of O(n) and a space complexity of O(1). # For example: Given the list `[4, 1, 2, 1, 2]`, the function should return `4` because `4` is the only number that appears exactly once in the list. Given the list `[6, 5, 6, 7, 7]`, the function should return `5` because `5` is the only number that appears exactly once in the list. findUniqueNumber([4, 1, 2, 1, 2]) => 4 findUniqueNumber([6, 5, 6, 7, 7]) => 5","solution":"def findUniqueNumber(nums): Finds the number that appears exactly once in a list where each integer appears exactly twice, except for one integer which appears exactly once. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"A gardener is planning to plant trees in a rectangular garden. He has exactly k trees, and he wants to plant them in such a way that no two trees are in a straight line (horizontally, vertically or diagonally). Assess how large a garden he requires (minimum width and height) to achieve this placement. -----Input----- There will be a single test case in the input. This test case will begin with an integer k (2 le k le 50), indicating the number of trees. -----Output----- Output a single line with two integers separated by a space – the minimum width and height of the garden required, such that all k trees can be planted with no two trees in the same row, column, or diagonal. -----Examples----- Sample Input: 5 Sample Output: 5 5","solution":"def minimum_garden_dimensions(k): Given the number of trees, returns the minimum width and height of the garden required such that no two trees are in a straight line (horizontally, vertically, or diagonally). return k, k"},{"question":"Given a string S containing lowercase English alphabets. Check if the string is a \\"Special Palindrome\\" or not. A string is considered a Special Palindrome if it reads the same backwards and forwards and has an even length. Example 1: Input: S = \\"abba\\" Output: 1 Explanation: S is a palindrome and has an even length, thus it qualifies as a Special Palindrome. Example 2: Input: S = \\"racecar\\" Output: 0 Explanation: S is a palindrome but does not have an even length, thus it does not qualify as a Special Palindrome. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isSpecialPalindrome() which takes the string S as input parameter and returns 1 if the string is a Special Palindrome, otherwise return 0. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"def isSpecialPalindrome(S): Returns 1 if the string S is a special palindrome, otherwise returns 0. A special palindrome is defined as a string that reads the same forwards and backwards and has an even length. # Check if the string length is even if len(S) % 2 != 0: return 0 # Check if the string reads the same forwards and backwards if S == S[::-1]: return 1 return 0"},{"question":"In a certain city, there are N houses lined up in a row on a street. Each house has a certain color represented by an integer. Two houses are considered to be in a \\"harmonious pair\\" if the absolute difference between their colors is exactly K. You are given an array of integers representing the color of each house and an integer K. Your task is to determine the number of harmonious pairs of houses. -----Input----- The first line contains an integer N, representing the number of houses. The second line contains the integer K. The third line contains N integers, representing the colors of the houses. -----Output----- Output a single integer representing the number of harmonious pairs of houses. -----Constraints----- 1 ≤ N ≤ 100000 1 ≤ K ≤ 1000000000 1 ≤ color of each house ≤ 1000000000 -----Example----- Input: 5 3 1 5 2 2 8 Output: 3 -----Explanation----- The harmonious pairs are: (1, 4) -> colors (2, 5) (2, 1) -> colors (5, 2) (3, 5) -> colors (2, 5)","solution":"def harmonious_pairs_count(N, K, colors): Returns the number of harmonious pairs of houses. Parameters: N (int): The number of houses K (int): The required difference between colors colors (list of int): A list representing the colors of each house Returns: int: The number of harmonious pairs count = 0 colors_count = {} for color in colors: if (color - K) in colors_count: count += colors_count[color - K] if (color + K) in colors_count: count += colors_count[color + K] if color in colors_count: colors_count[color] += 1 else: colors_count[color] = 1 return count"},{"question":"John is an avid collector of ancient coins and has just acquired a special coin that has a unique pattern on each side: heads or tails. To determine the balance of this coin, John decides to perform an experiment where he flips the coin multiple times and records the results. After conducting a series of N flips, John wants to analyze the outcomes to determine if the coin is biased or not. To help him with the analysis, you need to write a program that calculates the probability of getting heads in the form of an irreducible fraction. Input The first line of input contains a single integer N, the number of flips (1 ≤ N ≤ 1000). The second line contains a string of length N consisting of characters \'H\' for heads and \'T\' for tails, representing the results of the flips. Output Output the required probability in the form of an irreducible fraction in format «A/B», where A — the numerator, and B — the denominator. If the probability equals zero, output «0/1». If the probability equals one, output «1/1». Examples Input 10 HHHTTTHHTT Output 1/2 Note In the given sample, John flipped the coin 10 times and got heads 5 times and tails 5 times. Therefore, the probability of getting heads is 5/10 which reduces to 1/2.","solution":"import math def calculate_heads_probability(N, results): Calculate the probability of getting heads in the form of an irreducible fraction. :param N: int, the number of flips (1 ≤ N ≤ 1000) :param results: str, a string of length N consisting of characters \'H\' for heads and \'T\' for tails :return: str, the probability in the form of an irreducible fraction «A/B» heads_count = results.count(\'H\') if heads_count == 0: return \\"0/1\\" elif heads_count == N: return \\"1/1\\" else: gcd = math.gcd(heads_count, N) numerator = heads_count // gcd denominator = N // gcd return f\\"{numerator}/{denominator}\\""},{"question":"Given two strings s and t, determine if s is a subsequence of t. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \\"abc\\" is a subsequence of \\"ahbgdc\\" but \\"axc\\" is not). Write a function that takes in two strings s and t and returns a boolean indicating whether s is a subsequence of t. -----Input----- Two strings s and t where: - (0 leq |s| leq 10^5) - (1 leq |t| leq 10^5) - s and t consist only of lowercase English letters. -----Output----- Return True if s is a subsequence of t, otherwise return False. -----Example----- Input s = \\"abc\\", t = \\"ahbgdc\\" Output True Input s = \\"axc\\", t = \\"ahbgdc\\" Output False -----Note----- In the first example, \\"abc\\" is a subsequence of \\"ahbgdc\\". The function returns True. In the second example, \\"axc\\" is not a subsequence of \\"ahbgdc\\". The function returns False.","solution":"def is_subsequence(s, t): Returns True if s is a subsequence of t, otherwise False. s_len, t_len = len(s), len(t) s_idx, t_idx = 0, 0 while s_idx < s_len and t_idx < t_len: if s[s_idx] == t[t_idx]: s_idx += 1 t_idx += 1 return s_idx == s_len"},{"question":"In a labyrinth there are n chambers connected by corridors. Each corridor connects exactly two chambers and all corridors are unidirectional, meaning you can only travel along a corridor in a specified direction. You are given the starting chamber and your task is to determine if there exists a path that leads back to the starting chamber. Input The first line contains two integers n (1 ≤ n ≤ 1000) and m (0 ≤ m ≤ 2000) — the number of chambers and the number of corridors respectively. Each of the next m lines contains two integers u_v (1 ≤ u, v ≤ n) indicating that there is a corridor from chamber u to chamber v. The final line contains a single integer s (1 ≤ s ≤ n) — the starting chamber number. Output Output \\"YES\\" if there is a path from the starting chamber back to itself, or \\"NO\\" if there is not. Examples Input 4 4 1 2 2 3 3 4 4 2 1 Output YES Input 3 2 1 2 2 3 1 Output NO","solution":"def has_cycle(n, m, corridors, s): from collections import defaultdict, deque graph = defaultdict(list) for u, v in corridors: graph[u].append(v) # BFS to detect cycle queue = deque([s]) visited = set() while queue: node = queue.popleft() if node in visited: return \\"YES\\" visited.add(node) for neighbor in graph[node]: queue.append(neighbor) return \\"NO\\""},{"question":"The Mountain Tribe of Xanadu lives in a region filled with mountains and valleys. They have an interesting tradition of holding a race across the mountains. The race is conducted on a set of predetermined paths from one peak to another. Each path has a certain difficulty level associated with it. Every year, the tribe decides on a particular difficulty level \'D\', and the participants need to find the shortest possible route between two predetermined peaks such that the paths they traverse have at most the difficulty level \'D\'. The shorter the route, the more prestigious the win. Your job is to write a program that determines the shortest route across the mountains given the constraints on the difficulty level of the paths. Input: The input consists of multiple datasets. One dataset is formatted as follows: > n m > p1 p2 d > Path 1 > Path 2 > Path 3 > ... > Path m n, m, p1, p2, and d are integers where 2 <= n <= 100, 1 <= m <= 3000, 1 <= p1, p2 <= n, and 0 <= d <= 10000. n represents the number of peaks, m represents the number of paths, p1 and p2 represent the starting and ending peaks, and d represents the maximum allowable difficulty level for the paths. Each path data is given as follows: > x y t x, y, and t are integers that satisfy 1 <= x, y <= n and 0 <= t <= 10000, where x and y are peak numbers connected by the path, and t is the difficulty level of the path. The dataset ends with a line consisting of only two zeros separated by spaces. Output: Output one line for each dataset, the shortest possible distance from p1 to p2 under the given constraints, or -1 if no such path exists. Sample Input: 5 6 1 5 3 1 2 2 2 3 3 1 3 6 3 4 2 4 5 4 3 5 3 0 0 Sample Output: 8 Explanation: There are 5 peaks and 6 paths. The difficulty threshold is 3. The shortest path from peak 1 to peak 5 with path difficulties not exceeding 3 goes through peaks 1 -> 2 -> 3 -> 5 with a total distance of 8.","solution":"import heapq def shortest_route(n, m, p1, p2, d, paths): # Create an adjacency list for the graph graph = {i: [] for i in range(1, n+1)} for x, y, t in paths: if t <= d: graph[x].append((y, t)) graph[y].append((x, t)) # Use Dijkstra\'s algorithm to find the shortest path pq = [(0, p1)] # (cost, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[p1] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == p2: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 # If p2 is unreachable"},{"question":"The local amusement park has recently introduced a new attraction where visitors can win prizes by playing a number guessing game. You decide to participate in the game for a chance to win a special prize. In the game, you are given a list of non-negative integers. Each integer in the list represents the number of tickets you have. You can use these tickets to try to match a target number of points by combining some of the integers in the list. However, you can only combine each integer once. Additionally, there is a restriction on the number of integers you can combine in a single attempt. Your task is to determine if it is possible to match the target number of points by combining exactly three different integers from the given list. -----Input----- On the first line, an integer t representing the target number of points you need to match (1 leq t leq 1000). On the second line, an integer n representing the number of tickets you have (3 leq n leq 100). On the third line, n space-separated non-negative integers representing the list of tickets, where each ticket is between 0 and 1000. -----Output----- A single line containing \\"YES\\" if you can combine exactly three different integers from the given list to match the target number, and \\"NO\\" otherwise. -----Examples----- Sample Input: 15 5 1 2 4 8 9 Sample Output: YES Sample Input: 10 4 5 5 5 5 Sample Output: NO","solution":"def can_match_target_with_three_numbers(t, n, tickets): Determine if it\'s possible to match the target number of points with exactly three different integers from the list. Parameters: t (int): Target number of points. n (int): Number of tickets. tickets (list of int): List of ticket values. Returns: str: \\"YES\\" if the target can be matched, otherwise \\"NO\\". # Sort the tickets for easier combination tickets.sort() # Try to find any combination of three different integers which sum up to the target for i in range(n-2): for j in range(i+1, n-1): for k in range(j+1, n): if tickets[i] + tickets[j] + tickets[k] == t: return \\"YES\\" return \\"NO\\""},{"question":"You are given an integer sequence A of length N. Determine the smallest positive integer k such that all the elements of the sequence can be made divisible by k by adding the same integer k to each element of the sequence exactly once. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ A_i ≤ 10^9 Input The input is given from Standard Input in the following format: ``` N A_1 A_2 ... A_N ``` Output Print the smallest positive integer k. Examples Input ``` 3 2 4 6 ``` Output ``` 2 ``` Input ``` 4 5 10 15 25 ``` Output ``` 5 ``` Input ``` 2 7 13 ``` Output ``` 14 ```","solution":"import math from functools import reduce def smallest_k_to_make_elements_divisible(N, A): Returns the smallest positive integer k such that all elements in A can be made divisible by k by adding k to each element of the sequence exactly once. if N == 1: return A[0] # Calculate the differences between consecutive elements diffs = [A[i] - A[i-1] for i in range(1, N)] # Find the GCD of all differences gcd_of_diffs = reduce(math.gcd, diffs) return gcd_of_diffs"},{"question":"You are given a string containing a mixture of words and numbers separated by spaces. Your task is to find the sum of all the numbers present in the string. If there are no numbers in the string, the function should return 0. # Task Write a function `sum_of_numbers_in_string` which takes a single parameter `s` (a string) and returns the sum of all the numbers in the string. # Examples: `sum_of_numbers_in_string(\\"abc 123 def 456\\")` should return `579` `sum_of_numbers_in_string(\\"no numbers here\\")` should return `0` `sum_of_numbers_in_string(\\"10 apples, 20 oranges, and 30 bananas\\")` should return `60` # Notes - The numbers can be positive or negative integers. - The words and numbers are separated by spaces. - If there are multiple numbers, add them all together to get the result.","solution":"def sum_of_numbers_in_string(s): Returns the sum of all numbers in the given string. # Split the string into a list of words words = s.split() # Initialize the sum total = 0 # Iterate through each word for word in words: # If the word is a number, add it to the sum if word.lstrip(\'-\').isdigit(): total += int(word) return total"},{"question":"# Summary: Given a string `s` and a list of strings `words`, return True if `s` is composed of exactly all the strings in `words` concatenated in any order, and False otherwise. # Description: You will be provided with a string `s` and a list of non-empty strings `words`. Your task is to determine if the string `s` can be formed by concatenating all the strings in `words` in any sequence. - The list `words` will not contain any duplicates. - The strings in `words` can be concatenated in any order to form `s`. You can assume that all characters are lowercase English letters. `1 <= len(s) <= 10^4` Examples: `s = \\"leetcode\\"` and `words = [\\"leet\\", \\"code\\"]` should return `True`: The string `s` is composed of \\"leet\\" and \\"code\\" which are exactly the strings in `words`. `s = \\"abcde\\"` and `words = [\\"a\\", \\"abc\\", \\"de\\"]` should return `False`: The string `s` cannot be formed by concatenating all the strings in `words`. `s = \\"applepie\\"` and `words = [\\"pie\\", \\"pear\\", \\"apple\\"]` should return `False`: Although \\"pie\\" and \\"apple\\" are part of the string, \\"pear\\" is not, so it cannot be composed of exactly all the strings in `words`. `s = \\"applepie\\"` and `words = [\\"pie\\", \\"apple\\"]` should return `True`: The string `s` is composed of \\"pie\\" and \\"apple\\" which are exactly the strings in `words`.","solution":"def can_form_string(s, words): Returns True if s can be formed by concatenating all the strings in words in any order, otherwise returns False. # Count the frequencies of letters in the original string \'s\' from collections import Counter s_counter = Counter(s) # Count the frequencies of letters in words combined words_counter = Counter() for word in words: words_counter.update(word) # Compare the two frequency counts return s_counter == words_counter"},{"question":"Alex has just started learning about sequences and operations on them. He came across a new type of operation called a \\"reverse and append\\" operation defined as follows: 1. Reverse a given sequence. 2. Append the reversed sequence to the end of the original sequence. The operation is performed repeatedly until the sequence reaches the target length or exceeds it. For example, if the initial sequence is `[1, 2]`, after one operation the sequence will be `[1, 2, 2, 1]`. Alex wants to find out what the sequence looks like after performing the operation just enough times to reach or exceed a given target length. Your task is to write a program that will simulate this process and output the final sequence up to the target length. Input The first line contains an integer `t` (1 ≤ t ≤ 100) — the number of test cases. The following lines describe each test case. Each test case consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 10^3) — the initial length of the sequence. - The second line contains n integers `a1, a2... an` (1 ≤ ai ≤ 100) — the integers in the initial sequence. - The third line contains an integer m (n ≤ m ≤ 10^4) — the target length of the sequence. Output For each test case, output a single line containing the sequence after performing the \\"reverse and append\\" operation enough times to reach or exceed the target length. Only print the first `m` elements of the resulting sequence. Examples Input 2 2 1 2 6 3 1 3 5 10 Output 1 2 2 1 1 2 1 3 5 5 3 1 1 3 5 5","solution":"def reverse_append_sequence(n, seq, m): Repeatedly performs the reverse and append operation on the sequence until its length reaches or exceeds m. Parameters: n (int): Initial length of the sequence seq (list of int): The initial sequence m (int): The target length of the sequence Returns: list of int: The sequence after the operations, limited to the first m elements while len(seq) < m: seq = seq + seq[::-1] return seq[:m] def main(test_cases): results = [] for case in test_cases: n, seq, m = case result = reverse_append_sequence(n, seq, m) results.append(result) return results"},{"question":"Bob is once again on a quest to discover a grand treasure. This time, however, he has collected invaluable coordinates of ancient temples across the world, along with sacred keys buried within them. The treasure is buried at a point (P), coordinates of which are to be found out. Bob has traveled far and wide, identifying (n) ancient temples. Each temple holds a key that leads to the same treasure point (P). Every temple (T_i) is located at the integer coordinates ((x_i, y_i)) and contains the key ((k_i, l_i)). The point (P) can be found consistently from all keys such that (P = (x_i + k_i, y_i + l_i)). Given the coordinates of the temples and their corresponding keys, your task is to determine the coordinates of the treasure point (P). If multiple solutions exist, print any of them. # Input - The first line contains an integer (n) ((1 leq n leq 1000)) — the number of ancient temples. - Each of the next (n) lines contains two integers (x_i) and (y_i) ((-10^6 leq x_i, y_i leq 10^6)) — the coordinates of the (i)-th temple. - Each of the next (n) lines contains two integers (k_i) and (l_i) ((-2 cdot 10^6 leq k_i, l_i leq 2 cdot 10^6)) — the key information located at the (i)-th temple. # Output Output a single line containing two integers (P_x, P_y) — the coordinates of the treasure point (P). # Examples Input ``` 3 1 1 2 3 -1 -2 4 0 1 1 -3 2 ``` Output ``` 5 1 ``` # Note For the provided example, calculate the coordinates: Using the information: - From temple ((1, 1)) with key ((4, 0)), possible (P) is ((5, 1)). - From temple ((2, 3)) with key ((1, 1)), possible (P) is ((3, 4)), which should match with temple 1\'s output. - From temple ((-1, -2)) with key ((-3, 2)), possible (P) is ((-4, 0)), which doesn\'t match with the others. Finding each combination where all give the same (P) will lead to the correct answer as ((5, 1)).","solution":"def find_treasure_point(n, temples, keys): # Since all keys lead to the same treasure point P which can be determined using any temple, # We can directly use the first temple and its key to calculate the treasure point. x1, y1 = temples[0] k1, l1 = keys[0] Px = x1 + k1 Py = y1 + l1 return Px, Py"},{"question":"Write a program to manage a dynamic set of integers and support the following queries: 1 X: Add the integer X to the set. 2 X: Remove the integer X from the set. It is guaranteed that X will be present in the set when this query is given. 3 L R: Find the maximum integer in the set that lies within the inclusive range [L, R]. ------ Input ------ First line of the input contains an integer Q. In the next Q lines, each contains one of the queries described above. ------ Output ------ For each query of the type 3, output a single line containing the answer of the query. ------ Constraints ------ 1 ≤ Q ≤ 10^{5} 1 ≤ X ≤ 10^{9} 1 ≤ L ≤ R ≤ 10^{9} ------ Example ------ Input: 6 1 5 1 10 1 15 3 1 10 2 5 3 1 10 Output: 10 10","solution":"class DynamicSetManager: def __init__(self): self.data = set() def add(self, x): self.data.add(x) def remove(self, x): self.data.remove(x) def find_max_in_range(self, l, r): # Filter values in range and find max values_in_range = [val for val in self.data if l <= val <= r] return max(values_in_range) if values_in_range else None def dynamic_set_operations(queries): manager = DynamicSetManager() results = [] for query in queries: parts = query.split() operation = int(parts[0]) if operation == 1: x = int(parts[1]) manager.add(x) elif operation == 2: x = int(parts[1]) manager.remove(x) elif operation == 3: l = int(parts[1]) r = int(parts[2]) result = manager.find_max_in_range(l, r) if result is not None: results.append(result) return results"},{"question":"In a small town, three children, Alice, Bob, and Charlie, are going to the carnival. They each have a distinct preference for the rides they want to try. The carnival has a set number of rides, each identified by unique ride IDs arranged in ascending order. The children make noted lists of the ride IDs they want to try, but their lists are not identical, and each list is ordered by preference (the higher the preference, the earlier in the list). Alice\'s parents have decided to buy tickets only for rides that appear in all three lists to save money. Your task is to help determine which rides meet this criterion. Input format: The first line of the input contains three integers K1, K2, and K3, where K1 is the number of rides in Alice\'s list, K2 is the number of rides in Bob’s list, and K3 is the number of rides in Charlie\'s list. The next K1 lines (lines 2,...,K1+1) contain one positive integer each, specifying the list of rides that Alice wants to try. The following K2 lines (lines K1+2,...,K1+K2+1) specify Bob\'s ride preferences in the same format. The final K3 lines (lines K1+K2+2,..., K1+K2+K3+1) specify Charlie\'s ride preferences. Output format: The first line of the output should contain a single integer L, representing the number of rides that appear in all three lists. The next L lines should contain one positive integer each, describing the IDs of these common rides in ascending order. Constraints: You may assume that 1 ≤ K1, K2, K3 ≤ 50000. Example: Sample input: 4 5 4 10 30 50 70 10 20 30 50 80 10 30 50 90 Sample output: 3 10 30 50 Explanation: Alice\'s list: 10, 30, 50, 70 Bob\'s list: 10, 20, 30, 50, 80 Charlie\'s list: 10, 30, 50, 90 The common ride IDs appearing in all three lists are 10, 30, and 50.","solution":"def find_common_rides(k1, k2, k3, alice_rides, bob_rides, charlie_rides): Returns the list of common rides that appear in all three lists. alice_set = set(alice_rides) bob_set = set(bob_rides) charlie_set = set(charlie_rides) common_rides = list(alice_set & bob_set & charlie_set) common_rides.sort() return [len(common_rides)] + common_rides"},{"question":"Alice is working on a chemical experiment and often ends up with much longer chemical formulas than required. She wants to reduce the length of these chemical formulas by removing all redundant chemicals without changing the order of appearance of the remaining chemicals. A chemical is considered redundant if it appears more than once consecutively in the formula. Given a chemical formula represented as a string where each chemical is denoted by a lowercase letter (a-z), help Alice find the reduced formula by removing the redundant consecutive chemicals. -----Input:----- - The first line contains an integer T, denoting the number of test cases. - Each test case consists of a string F containing only lowercase characters with no spaces, representing the chemical formula. -----Output:----- For each test case on a new line, print the reduced chemical formula. -----Constraints----- - 1<=T<=10 - 1<=|F|<=10^5, where |F| denotes the length of the chemical formula F. -----Sample Input:----- 3 aabbcc abcdef aavvbbvv -----Sample Output:----- abc abcdef avbv -----EXPLANATION:----- For the first test case string = \\"aabbcc\\" - The consecutive chemicals \'aa\' are reduced to \'a\'. - The consecutive chemicals \'bb\' are reduced to \'b\'. - The consecutive chemicals \'cc\' are reduced to \'c\'. So, the output will be \\"abc\\". For the second test case string = \\"abcdef\\" - There are no consecutive redundant chemicals. So, the output will be \\"abcdef\\". For the third test case string = \\"aavvbbvv\\" - The consecutive chemicals \'aa\' are reduced to \'a\'. - The consecutive chemicals \'vv\' are reduced to \'v\'. - The consecutive chemicals \'bb\' are reduced to \'b\'. - The consecutive chemicals \'vv\' are reduced to \'v\'. So, the output will be \\"avbv\\".","solution":"def reduce_chemical_formula(formula): Reduces the chemical formula by removing redundant consecutive chemicals. if not formula: return \\"\\" reduced_formula = [formula[0]] for i in range(1, len(formula)): if formula[i] != formula[i - 1]: reduced_formula.append(formula[i]) return \'\'.join(reduced_formula) def process_test_cases(T, test_cases): Processes multiple test cases for the reduced chemical formula problem. results = [] for case in test_cases: results.append(reduce_chemical_formula(case)) return results"},{"question":"Given an array of distinct integers, find all pairs of elements that sum up to a given target number. Each pair should be returned as a list of two elements, and the result should be a list of lists where each inner list represents a pair. The pairs can be returned in any order. Example 1: Input: arr = [2, 7, 11, 15], target = 9 Output: [[2, 7]] Explanation: 2 + 7 = 9 which is the target value. Example 2: Input: arr = [1, 2, 3, 4, 5], target = 5 Output: [[1, 4], [2, 3]] Explanation: 1 + 4 = 5 and 2 + 3 = 5. Both pairs sum up to the target value. Your Task: You do not need to read input or print anything. Your task is to complete the function pairSum() which takes arr and target as input parameters and returns a list containing all the pairs of elements from arr that sum up to the target value. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 2 ≤ arr length ≤ 10^4 -10^5 ≤ arr[i] ≤ 10^5 -10^5 ≤ target ≤ 10^5","solution":"def pairSum(arr, target): Returns a list of pairs from arr that sum up to the target. # A dictionary to store the number of times each element is seen seen = {} result = [] for num in arr: complement = target - num if complement in seen: result.append([complement, num]) seen[num] = True return result"},{"question":"You are given a string consisting of lowercase Latin letters. You can perform the following operation any number of times: Choose a pair of two neighboring characters that are the same and delete them. Your task is to determine the length of the string after performing the described operations any number of times. -----Input----- The single line contains a string s (1 le |s| le 500) consisting only of lowercase Latin letters. -----Output----- Print the only integer — the length of the string after performing the operation described above any number of times. -----Examples----- Input abbac Output 1 Input aabb Output 0 Input abc Output 3 Input aaaa Output 0 -----Note----- In the first test, this is one of the optimal sequences of operations: \\"abbac\\" → \\"aac\\" → \\"c\\". In the second test, this is the optimal sequence of operations: \\"aabb\\" → \\"\\" (empty string). In the third test, you can\'t perform the operation at all. In the fourth test, this is the optimal sequence of operations: \\"aaaa\\" → \\"\\" (empty string).","solution":"def reduce_string(s: str) -> int: Returns the length of the string after performing reduction operations. Reduction operations involve removing pairs of neighboring identical characters. stack = [] for ch in s: if stack and stack[-1] == ch: stack.pop() else: stack.append(ch) return len(stack)"},{"question":"Troops from different regions use various signals to send messages across the battlefield. Each signal is represented as a string containing uppercase English alphabets. To ensure the security of the messages, the general decided to encode each signal such that the distance between each pair of adjacent characters is maximized. The new encoded message should be a permutation of the original message with the maximum distance between adjacent characters. The distance between two characters \'A\' and \'B\' in an encoded signal is defined as the absolute difference of their positions in the alphabet (e.g., the distance between \'A\' and \'C\' is 2). Given a string representing the original signal, output the encoded message such that the distance between each pair of adjacent characters is maximized. Input The only line of the input contains the original signal. Output Output a single line containing the encoded signal with the maximum adjacent character distance. If there are multiple possible encoded signals, any of them is acceptable. Constraints 1 ≤ |signal| ≤ 100,000. ( |signal| denotes the size of the signal. ) The signal will contain uppercase English letters only. Example Input: BRAVO Output: OVRBA Explanation For the original signal \\"BRAVO\\", one possible permutation that maximizes the distance between adjacent characters is \\"OVRBA\\". The distances between adjacent characters in \\"OVRBA\\" are: O (15) - V (21) = 6 V (21) - R (18) = 3 R (18) - B (2) = 16 B (2) - A (1) = 1 Other permutations like \\"ROVBA\\" may also fulfill the requirement, but \\"OVRBA\\" is one potential output.","solution":"def encode_signal(signal): Encodes the given signal such that the distance between each pair of adjacent characters is maximized. Returns the encoded signal. sorted_signal = \'\'.join(sorted(signal)) n = len(sorted_signal) # We will split the sorted string into two halves and interleave them first_half = sorted_signal[:(n + 1) // 2] second_half = sorted_signal[(n + 1) // 2:] encoded = [] # Interleave the characters from the two halves i, j = 0, len(second_half) - 1 while i < len(first_half) or j >= 0: if i < len(first_half): encoded.append(first_half[i]) i += 1 if j >= 0: encoded.append(second_half[j]) j -= 1 return \'\'.join(encoded)"},{"question":"Given an integer N, calculate the product of all prime numbers less than or equal to N. Print the answer as a single integer. Constraints * 1 leq N leq 50 Input Input is given from Standard Input in the following format: N Output Print the product of all prime numbers less than or equal to N. Print 1 if no prime numbers are less than or equal to N. Examples Input 5 Output 30 Input 10 Output 210","solution":"def is_prime(num): Returns whether a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def product_of_primes(N): Returns the product of all prime numbers less than or equal to N. product = 1 for num in range(2, N + 1): if is_prime(num): product *= num return product"},{"question":"Takahashi is playing a game with N buttons and N lights. Each button i (1 ≤ i ≤ N) is connected to a light j (1 ≤ j ≤ N), and pressing button i will toggle the state of light j. A light\'s state can be either ON or OFF. Initially, all lights are OFF. Takahashi wants to perform exactly K presses on these buttons in such a way that the maximum number of lights are turned ON at the end. Determine the maximum number of lights that can be turned ON after K button presses. -----Constraints----- - 1 ≤ N ≤ 10^5 - 0 ≤ K ≤ 10^5 - Each press of a button will toggle exactly one light. -----Input----- Input is given from Standard Input in the following format: N K -----Output----- Print the maximum number of lights that can be turned ON after K button presses. -----Sample Input----- 5 3 -----Sample Output----- 3 Explanation: With N=5 and K=3, Takahashi can press any three buttons. Each press will toggle one light from OFF to ON, so the maximum number of lights that can be turned ON is 3.","solution":"def max_lights_on(N, K): Determines the maximum number of lights that can be turned ON after K button presses. Parameters: N (int): Number of lights and buttons. K (int): Number of button presses. Returns: int: Maximum number of lights turned ON. # The maximum number of lights that can be turned on is limited by the smaller of N and K. return min(N, K) # Example usage: # N, K = 5, 3 # print(max_lights_on(N, K)) # Output should be 3"},{"question":"Chef has received N gifts. Each gift has a certain value represented by an integer. Chef wants to select exactly K gifts out of the N received gifts such that the sum of the selected gifts\' values is maximized. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K — the total number of gifts and the number Chef wants to select, respectively. - The second line of each test case contains N space-separated integers, where each integer represents the value of a gift. ------ Output Format ------ For each test case print on a new line a single integer — the maximum possible sum of the values of the K gifts that Chef can select. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ K ≤ N ≤ 10^{5} -10^4 ≤ text{value of each gift} ≤ 10^4 ----- Sample Input 1 ------ 2 5 3 1 2 3 4 5 4 2 -1 -2 -3 -4 ----- Sample Output 1 ------ 12 -3 ----- explanation 1 ------ Test Case 1: Chef can select the 3 gifts with the highest values {3, 4, 5}. The sum is 3 + 4 + 5 = 12. Test Case 2: Chef can select the 2 gifts with the highest values {-1, -2}. The sum is -1 + -2 = -3.","solution":"def maximum_gift_sum(t, test_cases): Returns the maximum possible sum for each test case. Arguments: t : int - Number of test cases. test_cases : List of tuples - Each tuple contains two elements (N, K, gifts) where N is the number of gifts, K is the number of gifts to select, gifts is a list of integers representing the gift values. Returns: List of integers - Maximum possible sum for each test case. results = [] for case in test_cases: n, k, gifts = case gifts.sort(reverse=True) # Sort gifts in descending order results.append(sum(gifts[:k])) # Sum of top k gifts return results"},{"question":"You are playing a game where you need to collect points by forming and deleting special sequences from a string of lowercase letters. A sequence is considered special if all its characters are the same. For example, \\"aaa\\" or \\"bb\\" are both special sequences. Each time you delete a special sequence, you collect points equal to the length of that sequence squared. You can only delete one special sequence at a time. After you delete a sequence, the remaining parts of the string will concatenate together, and you can continue deleting more special sequences. Write a program that determines the maximum number of points you can collect by repeatedly deleting special sequences from an initial string. -----Input----- The first line contains a single integer n (1 le n le 2000) representing the length of the string. The second line contains a string of length n consisting of lowercase letters. -----Output----- Output a single integer representing the maximum number of points you can collect. -----Sample Input 1 Explanation----- For the string \\"aaabba\\", you can follow the steps below to maximize your points: 1. Delete \\"aaa\\" (collecting 3^2 = 9 points), resulting in \\"bba\\". 2. Delete \\"bb\\" (collecting 2^2 = 4 points), resulting in \\"a\\". 3. Delete \\"a\\" (collecting 1^2 = 1 point). Total points collected are 9 + 4 + 1 = 14. -----Examples----- Sample Input 1: 6 aaabba Sample Output 1: 14 Sample Input 2: 4 aaaa Sample Output 2: 16","solution":"def max_points(n, s): Returns the maximum number of points by repeatedly deleting special sequences. i = 0 total_points = 0 while i < n: char = s[i] length = 0 while i < n and s[i] == char: i += 1 length += 1 total_points += length**2 return total_points"},{"question":"You are given a series of book pages that have been torn out from a book. Each page in the book is labeled consecutively starting from 1. Each test case gives you a list of individual page numbers and ranges of pages that were torn out. You need to determine how many pages in total are missing. A torn-out page range from m to n indicates that all pages from page m to page n inclusive are missing. -----Input----- The first line contains one integer T (1 le T le 100) — the number of test cases. For each test case, the first line contains a single integer N (1 le N le 1000) which represents the number of torn-out pages or page ranges. The next line contains N space-separated strings. Each string is either an individual page number (e.g., \\"5\\"), or a range of page numbers separated by a hyphen (e.g., \\"3-7\\"). -----Output----- For each test case, print a single integer — the total number of missing pages. -----Example----- Input 3 3 1 4 6 4 2-4 6 8-10 12 2 1-2 2-3 Output 3 8 3","solution":"def count_missing_pages(test_cases): results = [] for case in test_cases: N = case[\'N\'] pages = case[\'pages\'] missing_pages = set() for page in pages: if \'-\' in page: start, end = map(int, page.split(\'-\')) for p in range(start, end + 1): missing_pages.add(p) else: missing_pages.add(int(page)) results.append(len(missing_pages)) return results"},{"question":"Fatima loves cooking and experimenting with recipes. One day, she decided to create a unique dish by mixing ingredients in a specific order. She has a list of ingredients, and she forms the final dish by iterating through this list and appending ingredients to the dish in a particular pattern: she starts adding ingredients from the beginning and from the end alternately until all ingredients are used. For example, if she has ingredients: [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"], she combines them in the following order: 1. Add from the beginning -> \\"apple\\" 2. Add from the end -> \\"date\\" 3. Add from the beginning (next) -> \\"banana\\" 4. Add from the end (next) -> \\"cherry\\" So the final dish will be: [\\"apple\\", \\"date\\", \\"banana\\", \\"cherry\\"] Given the list of ingredients and the order they are combined into the final dish, your task is to find out the sequence Fatima used to arrange the ingredients. -----Input----- The first line contains a positive integer n (1 ≤ n ≤ 1000) — the number of ingredients. The second line contains n space-separated strings representing the ingredients. The third line contains n space-separated strings representing the final dish. -----Output----- Print the sequence of indices (0-based) that Fatima used to combine the ingredients to make the dish. -----Examples----- Input 4 apple banana cherry date apple date banana cherry Output 0 3 1 2 Input 3 tomato onion pepper tomato pepper onion Output 0 2 1 Input 5 lettuce tomato cucumber pepper carrot lettuce carrot tomato pepper cucumber Output 0 4 1 3 2","solution":"def find_combination_sequence(ingredients, final_dish): n = len(ingredients) seq = [] start = 0 end = n - 1 is_start_turn = True for item in final_dish: if is_start_turn: seq.append(ingredients.index(item, start, end + 1)) start += 1 else: seq.append(ingredients.index(item, start, end + 1)) end -= 1 is_start_turn = not is_start_turn return seq"},{"question":"Given a positive integer K, determine if it\'s possible to express K as a sum of exactly T prime numbers (not necessarily distinct). -----Constraints----- - All values in input are integers. - 1 leq K leq 10^6 - 1 leq T leq 100 -----Input----- Input is given from Standard Input in the following format: K T -----Output----- If it is possible to express K as a sum of exactly T prime numbers, print Yes; otherwise, print No. -----Sample Input----- 10 2 -----Sample Output----- Yes - For example, 10 can be expressed as the sum of 5 and 5, both of which are prime numbers (5 + 5 = 10).","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_sum_of_t_primes(k, t): if t == 1: return is_prime(k) if t * 2 > k: return False if t == 2: return True for i in range(2, k + 1): if is_prime(i) and is_sum_of_t_primes(k - i, t - 1): return True return False def main(): import sys input = sys.stdin.read k, t = map(int, input().strip().split()) if is_sum_of_t_primes(k, t): print(\\"Yes\\") else: print(\\"No\\")"},{"question":"You are given a list of people\'s names and their birthdates. Each name is unique. For each name, determine whether the person is born in a leap year or a non-leap year. Leap years are defined as: 1. Years divisible by 4 are leap years. 2. However, years divisible by 100 are not leap years, unless they are also divisible by 400. Write a program that reads multiple test cases and outputs \\"Leap\\" if the person was born in a leap year, and \\"Non-Leap\\" otherwise. ------ Input ------ First line of the input contains T, number of test cases. First line of each test case contains N, number of people. Each of the next N lines contains a name (a single word) and a corresponding birthdate in \\"DD/MM/YYYY\\" format. 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{3} Names contain only alphabets and are case-sensitive. Years are between 1 and 9999 inclusive. ------ Output ------ For each person, print the name followed by \\"Leap\\" or \\"Non-Leap\\" on a new line. ----- Sample Input 1 ------ 2 3 Alice 29/02/1988 Bob 15/08/1990 Charlie 01/01/2000 2 Dave 12/12/1900 Eve 22/02/2004 ----- Sample Output 1 ------ Alice Leap Bob Non-Leap Charlie Leap Dave Non-Leap Eve Leap","solution":"def is_leap_year(year): Determines if the given year is a leap year or not. if year % 4 != 0: return False elif year % 100 != 0: return True elif year % 400 != 0: return False else: return True def leap_year_status(test_cases): For each person\'s birthdate, determine if they were born in a leap year. results = [] for case in test_cases: for person in case: name, birthdate = person.split() year = int(birthdate.split(\'/\')[-1]) if is_leap_year(year): results.append(f\\"{name} Leap\\") else: results.append(f\\"{name} Non-Leap\\") return results"},{"question":"A company has an internal messaging service used by employees to communicate with each other. Each message can be either a text message or a command message. A command message changes the recipient of all subsequent messages until a new command message is sent. A command message has the format: `/to <employee_id>`, where `<employee_id>` is the identifier of the employee receiving the subsequent messages. Your task is to process a list of mixed messages and determine the final recipient of the last text message. If there are no text messages, return \\"No text message\\". Input The first line contains an integer n (1 ≤ n ≤ 100), the number of messages. The next n lines contain either a text message as a string (consisting of printable ASCII characters and not starting with \\"/to\\"), or a command message in the format `/to <employee_id>`. Output Print the identifier of the final recipient of the last text message, or \\"No text message\\" if there are none. Example Input 5 /this is a sample text message /to 3 Hello, how are you? See you tomorrow! /to 2 Output 2 Note In the provided example, the first line is not a valid command message because it does not follow the `/to <employee_id>` format. The valid command message `/to 3` indicates that subsequent text messages should be sent to employee 3. Therefore, the text messages \\"Hello, how are you?\\" and \\"See you tomorrow!\\" are directed to employee 3. The final command message `/to 2` changes the recipient to employee 2, but since there are no text messages following this command, the last text message recipient remains employee 3.","solution":"def final_recipient_of_last_text_message(n, messages): Determine the final recipient of the last text message. Parameters: n (int): The number of messages. messages (list): A list of strings where each string is a message. Returns: str: The identifier of the final recipient of the last text message, or \\"No text message\\" if none exist. current_recipient = None last_recipient = \\"No text message\\" for message in messages: if message.startswith(\'/to \'): current_recipient = message.split()[1] else: if current_recipient is not None: last_recipient = current_recipient return last_recipient # Example use: # n = 5 # messages = [ # \\"/this is a sample text message\\", # \\"/to 3\\", # \\"Hello, how are you?\\", # \\"See you tomorrow!\\", # \\"/to 2\\" # ] # print(final_recipient_of_last_text_message(n, messages)) # Output: 3"},{"question":"You have a collection of `n` books, each belonging to one of the `k` genres. You also have a reading schedule that plans on reading `m` books. Given the genres of the books you have, and the genres specified in your reading schedule, you need to determine if you can fulfill the schedule as planned. Each book belongs to exactly one of k genres. The reading schedule lists the genres in the order they are to be read. Input The first line contains three integers n (1 ≤ n ≤ 100), k (1 ≤ k ≤ 100), and m (1 ≤ m ≤ 100) - the number of books, the number of genres, and the length of the reading schedule respectively. The second line contains n space-separated integers from 1 to k, where the i-th integer represents the genre of the i-th book. The third line contains m space-separated integers from 1 to k, where the j-th integer represents the genre of the j-th position in the reading schedule. Output Output \\"YES\\" if you can fulfill the reading schedule using the available books, otherwise output \\"NO\\". Examples Input 5 3 4 1 2 3 2 1 1 2 3 2 Output YES Input 4 3 5 1 2 1 3 1 2 3 2 1 Output NO","solution":"def can_fulfill_reading_schedule(n, k, m, books_genres, reading_schedule): Returns \\"YES\\" if the reading schedule can be fulfilled with the available books, otherwise \\"NO\\". genre_count = [0] * (k + 1) # Count the number of books in each genre for genre in books_genres: genre_count[genre] += 1 # Check if we can fulfill the reading schedule for genre in reading_schedule: if genre_count[genre] == 0: return \\"NO\\" genre_count[genre] -= 1 return \\"YES\\""},{"question":"Farmer Joe has a number of fields where he grows crops. Each field can grow one type of crop at a time, and Joe wants to experiment with crop rotation to ensure high yields and healthy soil. Joe has a specific plan where he wants each field to grow a different crop each year for the next M years. To simplify this, he has listed out the total types of crops available, which are denoted from 0 to C. Each year, every field should be assigned a different crop, and after M years, each field should have grown exactly once each crop it has available. Your task is to help Farmer Joe distribute the crops over the years according to his plan. It can be shown that there will be at least one valid solution under given constraints. If there are multiple correct solutions, you may output any one of them. -----Input:----- - The first line contains an integer T, denoting the number of test cases. T test cases will follow, each containing two lines. - The first line of each test case contains two space-separated integers F and M. - The second line of each test case contains F integers, representing the crop options available for each field. The i-th integer denotes the number of crop types assigned to the i-th field where 1 leq i leq F and 1 leq crop leq C. -----Output:----- - For each test case, output F lines each containing M space-separated integers. - The i-th line represents the crop types assigned to the i-th field for each of the M years. -----Constraints----- - T=10 - 1 leq F leq 100 - 1 leq M leq 100 - 1 leq C leq 100 - Each field will have crop options represented by a unique list of integers where the length is equal to M. -----Subtasks----- - Subtask 1 [20 points]: 1 leq F leq 10 - Subtask 2 [30 points]: 1 leq M leq 10 - Subtask 3 [50 points]: original constraints -----Sample Input:----- 1 3 3 0 1 2 -----Sample Output:----- 0 1 2 1 2 0 2 0 1 -----Explanation:----- - In the given test case, there are 3 fields and 3 years to plan. - The crop rotation ensures each field grows a different crop each year, covering the crops 0, 1, and 2. - The specified output shows one possible valid assignment of crops for each field over the 3 years.","solution":"def distribute_crops(T, test_cases): results = [] for i in range(T): F, M = test_cases[i][\'FM\'] crops = test_cases[i][\'crops\'] # Generate the crop rotation plan field_rotations = [] for field in range(F): rotation = [] for year in range(M): rotation.append((crops[field] + year) % M) field_rotations.append(rotation) results.append(field_rotations) return results"},{"question":"You need to design a class called `Dictionary` that simulates a basic spell checker. The `Dictionary` class should allow adding words to a dictionary and checking if a given word is spelled correctly. Implement the following methods: 1. `add_word(word: str) -> None`: Adds a word to the dictionary. 2. `check_word(word: str) -> str`: Checks if the given word is in the dictionary. Returns \\"Correct\\" if the word is found, \\"Incorrect\\" if not. Implement a spell-check functionality using a dictionary data structure and ensure the solution is optimized for both add and check operations. Example 1: Input: dictionary = Dictionary() dictionary.add_word(\\"hello\\") dictionary.add_word(\\"world\\") print(dictionary.check_word(\\"hello\\")) # Output: Correct print(dictionary.check_word(\\"python\\")) # Output: Incorrect Example 2: Input: dictionary = Dictionary() dictionary.add_word(\\"apple\\") dictionary.add_word(\\"banana\\") dictionary.add_word(\\"orange\\") print(dictionary.check_word(\\"apple\\")) # Output: Correct print(dictionary.check_word(\\"grape\\")) # Output: Incorrect Your Task: Complete the `add_word` and `check_word` methods in the `Dictionary` class. The `add_word` method should insert the word into the dictionary, and the `check_word` method should verify if the word exists in the dictionary. Expected Time Complexity: O(1) for both methods. Expected Auxiliary Space: O(W) where W is the total number of characters across all words added to the dictionary. Constraints: - The number of words added to the dictionary will not exceed 10^6. - Each word consists of only lowercase English letters. - The length of each word does not exceed 100.","solution":"class Dictionary: def __init__(self): self.words = set() def add_word(self, word: str) -> None: self.words.add(word) def check_word(self, word: str) -> str: return \\"Correct\\" if word in self.words else \\"Incorrect\\""},{"question":"You are given a list of integers and you need to sort the list into non-decreasing order. However, you can only swap adjacent elements, and you can perform at most k swaps. Your task is to determine the lexicographically smallest sequence that can be obtained with at most k adjacent swaps. -----Input----- - The first line contains two integers n (the size of the list) and k (the maximum number of swaps allowed), where 1 leq n leq 1000 and 0 leq k leq 1000. - The second line contains n integers a_1, a_2, ..., a_n representing the list, where 1 leq a_i leq 10000. -----Output----- Print the lexicographically smallest sequence that can be obtained by performing at most k adjacent swaps. -----Examples----- Sample Input 1: 5 3 4 3 2 1 5 Sample Output 1: 2 3 4 1 5 Sample Input 2: 4 2 4 3 2 1 Sample Output 2: 3 2 4 1","solution":"def smallest_sequence_with_k_swaps(n, k, arr): Returns the lexicographically smallest sequence by performing at most k adjacent swaps. for i in range(n): for j in range(i, 0, -1): if k <= 0: break if arr[j] < arr[j-1]: arr[j], arr[j-1] = arr[j-1], arr[j] k -= 1 else: break return arr"},{"question":"The Waffle House chain is planning to improve the efficiency of their order management system. Every branch of the restaurant keeps a log of all the orders in their respective kitchen. Each order undergoes a few changes in its status - either it gets added to the log, deleted from the log, updated with new details, or needs to be outputted as per specific requests. You have been hired to create a program to manage these order logs effectively. Write a program that processes multiple commands to manage and query the order log of a Waffle House branch. Input The input comes in the following format: N O command1 command2 :: commandO Where: - N (1 ≤ N ≤ 100000) represents the number of unique orders possible. - O (1 ≤ O ≤ 100000) represents the number of commands to process. Each command is provided in one of the following formats: ADD order_id time details DELETE order_id UPDATE order_id time details QUERY order_id Where: - \\"ADD order_id time details\\" adds a new order with unique identifier `order_id` (1 ≤ order_id ≤ N), preparation time `time` (1 ≤ time ≤ 1000), and other order `details` (string containing characters including digits, letters, and spaces). - \\"DELETE order_id\\" removes the order with identifier `order_id`. - \\"UPDATE order_id time details\\" updates the existing order with identifier `order_id` to new `time` and `details`. - \\"QUERY order_id\\" retrieves and outputs the details of the order with identifier `order_id`. Output For each QUERY command, output the order details in the format: order_id time details If the order does not exist, output \\"NOT FOUND\\". Examples Input 5 7 ADD 1 15 Pancakes ADD 2 10 Omelette QUERY 1 UPDATE 1 20 Waffles QUERY 1 DELETE 2 QUERY 2 Output 1 15 Pancakes 1 20 Waffles NOT FOUND Input 3 5 ADD 1 5 Coffee QUERY 1 ADD 2 7 Tea DELETE 1 QUERY 1 Output 1 5 Coffee NOT FOUND","solution":"def process_commands(commands): order_log = {} output = [] for command in commands: parts = command.split(maxsplit=3) if parts[0] == \\"ADD\\": order_id = int(parts[1]) time = int(parts[2]) details = parts[3] order_log[order_id] = (time, details) elif parts[0] == \\"DELETE\\": order_id = int(parts[1]) if order_id in order_log: del order_log[order_id] elif parts[0] == \\"UPDATE\\": order_id = int(parts[1]) time = int(parts[2]) details = parts[3] if order_id in order_log: order_log[order_id] = (time, details) elif parts[0] == \\"QUERY\\": order_id = int(parts[1]) if order_id in order_log: time, details = order_log[order_id] output.append(f\\"{order_id} {time} {details}\\") else: output.append(\\"NOT FOUND\\") return output"},{"question":"You are given a string containing a sequence of words separated by spaces. Your task is to construct an acronym from the given string. An acronym is a word formed from the initial letters of each word in the string, written in uppercase. Constraints * The length of the input string will not exceed 1000 characters. * Each word will be separated by a single space. * Words will only contain alphabetic characters. Input The input consists of a single string s containing a sequence of words. Output Output the acronym formed from the initial letters of each word in the string, in uppercase. Example Input hyper text markup language Output HTML","solution":"def create_acronym(s): Returns an acronym formed from the initial letters of each word in the given string, in uppercase. acronym = \'\'.join(word[0].upper() for word in s.split()) return acronym"},{"question":"Professor Alexa has devised a unique exam system for her students in a Data Structures course. There are N students in the class, and each student has scored a certain number of points in the final exam. Let\'s denote the scores of the students by an array S of length N. Given the nature of the course, Professor Alexa is curious to know about the groups of students who have the same score. Specifically, she is interested in identifying the largest group of students scoring the same marks. In case there are multiple groups with the same maximum size, she prefers the group with the highest score. Your task is to help Professor Alexa by writing a function that finds the size of the largest group of students with the same score and the corresponding score of that group. -----Input----- - The first line of the input contains a single integer Q denoting the number of test cases. The description of Q test cases follows. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers S_1, S_2, ldots, S_N representing the scores of the students. -----Output----- For each test case, output a single line containing two space-separated integers: the size of the largest group and the score of that group. In case of ties, select the highest score among them. -----Constraints----- - 1 le Q le 500 - 1 le N le 1,000 - 0 le S_i le 100 for each valid i - the sum of N over all test cases does not exceed 50,000 -----Example Input----- 3 6 70 80 90 90 80 70 10 1 1 1 2 2 2 3 3 3 4 5 50 50 50 50 50 -----Example Output----- 2 90 3 3 5 50 -----Explanation----- Example case 1: The scores 70, 80, and 90 each have groups of size 2. The highest score among them is 90. Example case 2: The scores 1, 2, and 3 each have groups of size 3. The highest score among them is 3. Example case 3: All students have the same score, so the largest group size is 5 and the corresponding score is 50.","solution":"def find_largest_group(Q, test_cases): results = [] for i in range(Q): N = test_cases[i][0] scores = test_cases[i][1] # Creating a frequency dictionary to count occurrences of each score score_counts = {} for score in scores: if score in score_counts: score_counts[score] += 1 else: score_counts[score] = 1 # Finding the largest group and its score max_size = 0 max_score = 0 for score, count in score_counts.items(): if count > max_size or (count == max_size and score > max_score): max_size = count max_score = score results.append((max_size, max_score)) return results"},{"question":"Alice and Bob are playing a game with an array of integers. The game is played in turns, and Alice always goes first. Here\'s how the game works: 1. On each turn, the player can select any two integers from the array and remove them. 2. The player who cannot make a move (because there are fewer than two elements left in the array) loses the game. Both players play optimally, which means they will always make the best move possible to maximize their chances of winning. Your task is to determine the winner of the game if both Alice and Bob play optimally. Input The first line of input contains an integer n (1 ≤ n ≤ 100,000) — the number of integers in the array. The second line contains n integers a1, a2, ..., an ( 1 ≤ ai ≤ 1,000,000) — the integers in the array. Output Print \\"Alice\\" if Alice will win the game, otherwise print \\"Bob\\". Examples Input 5 1 2 3 4 5 Output Bob Input 4 1 2 3 4 Output Alice Input 3 7 8 9 Output Bob Note In the first example, Alice starts with 5 integers. She removes two integers, and Bob is left with 3 integers. Then, Bob removes two integers, and Alice is left with only 1 integer, so Alice loses. In the second example, Alice starts with 4 integers. She removes two integers, and Bob is left with 2 integers. Then, Bob removes the last two integers, so Bob loses. In the third example, Alice starts with 3 integers. She cannot make a move because there are fewer than two integers left, so Alice loses immediately.","solution":"def determine_winner(n, arr): Determines the winner of the game between Alice and Bob. Parameters: n (int): Number of integers in the array arr (list): The list of integers in the array Returns: str: \\"Alice\\" if Alice wins the game, \\"Bob\\" otherwise # If the number of integers in the array is odd, Bob wins because Alice will be # left in the end with less than two integers to pick. if n % 2 == 1: return \\"Bob\\" else: return \\"Alice\\" # Example usage: # n = 5 # arr = [1, 2, 3, 4, 5] # determine_winner(n, arr)"},{"question":"You have been given a grid game that consists of a NxN grid. Initially, the grid is empty. You need to perform some operations on the grid: 1. Set an element at position (i, j) to a value v. 2. Query the sum of all elements in a subgrid from (x1, y1) to (x2, y2). Input: - The first line contains an integer N denoting the size of the grid. - The next line contains an integer Q denoting the number of queries. - The following Q lines contain the queries: - For a set operation: \\"SET i j v\\" (i, j are zero-indexed, v is the value to set) - For a sum query: \\"SUM x1 y1 x2 y2\\" (x1, y1, x2, y2 are the coordinates of the subgrid, all zero-indexed, inclusive). Output: - For each sum query, print the sum of all elements in the specified subgrid. Constraints: - 1 ≤ N ≤ 1000 - 1 ≤ Q ≤ 100000 - 0 ≤ i, j, x1, y1, x2, y2 < N - 1 ≤ v ≤ 10^4 Example Input: 4 5 SET 1 2 5 SET 2 2 3 SUM 1 1 3 3 SET 3 3 7 SUM 0 0 3 3 Example Output: 3 15","solution":"class GridGame: def __init__(self, N): self.N = N self.grid = [[0] * N for _ in range(N)] def set_value(self, i, j, v): self.grid[i][j] = v def sum_subgrid(self, x1, y1, x2, y2): return sum( self.grid[i][j] for i in range(x1, x2 + 1) for j in range(y1, y2 + 1) ) def process_queries(self, queries): results = [] for query in queries: parts = query.split() if parts[0] == \\"SET\\": i, j, v = map(int, parts[1:]) self.set_value(i, j, v) elif parts[0] == \\"SUM\\": x1, y1, x2, y2 = map(int, parts[1:]) results.append(self.sum_subgrid(x1, y1, x2, y2)) return results # Function to simulate and process queries def process_grid_game(N, queries): game = GridGame(N) return game.process_queries(queries)"},{"question":"You are given a string S consisting of lowercase English letters. Your task is to determine the minimum number of operations required to make the string a palindrome. In one operation, you can select any character in the string and replace it with any other character. Example 1: Input: S = \\"abca\\" Output: 1 Explanation: Change \'c\' to \'b\' to make \\"abba\\". Example 2: Input: S = \\"race\\" Output: 2 Explanation: Change \'r\' to \'e\' and \'c\' to \'a\' to make \\"eaae\\". Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function minOperationsToPalindrome(S) that takes a string S as the parameter and returns the minimum number of operations required to make the string a palindrome. Expected Time Complexity: O(N), where N is the length of the string. Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(S) ≤ 10^5","solution":"def minOperationsToPalindrome(S): Returns the minimum number of operations required to make the string S a palindrome. left, right = 0, len(S) - 1 operations = 0 while left < right: if S[left] != S[right]: operations += 1 left += 1 right -= 1 return operations"},{"question":"Sara is an avid reader and has a collection of various books. She wants to categorize her books by their genres and then sort them by their number of pages in ascending order within each genre. Sara decides to write a program that does this task automatically for her. You are given a list of books, where each book is represented by a tuple containing the genre, title, and the number of pages. The genre and title are strings, and the number of pages is an integer. Your task is to categorize the books by their genres and then sort the books within each genre by the number of pages in ascending order. Write a function that receives the list of books and returns a dictionary, where the keys are the genres and the values are the lists of books sorted by the number of pages. Each book in the list is represented as a dictionary with keys \\"title\\" and \\"pages\\". Input The input is a list of n tuples representing the books. Each tuple contains the genre (string), title (string), and number of pages (integer). * 1 ≤ n ≤ 2 * 10^4 * 1 ≤ length of genre, title ≤ 100 * 1 ≤ number of pages ≤ 10^4 Output Print a dictionary where the keys are genres and the values are lists of dictionaries where each dictionary represents a book with keys \\"title\\" and \\"pages\\", sorted by the number of pages in ascending order. Examples Input [(\'Fiction\', \'Book A\', 200), (\'Non-Fiction\', \'Book B\', 150), (\'Fiction\', \'Book C\', 100), (\'Fiction\', \'Book D\', 300), (\'Non-Fiction\', \'Book E\', 100)] Output { \'Fiction\': [{\'title\': \'Book C\', \'pages\': 100}, {\'title\': \'Book A\', \'pages\': 200}, {\'title\': \'Book D\', \'pages\': 300}], \'Non-Fiction\': [{\'title\': \'Book E\', \'pages\': 100}, {\'title\': \'Book B\', \'pages\': 150}] } Input [(\'Biography\', \'Steve Jobs\', 600), (\'Biography\', \'The Wright Brothers\', 320), (\'History\', \'Sapiens\', 430), (\'History\', \'Guns, Germs, and Steel\', 480), (\'Biography\', \'Leonardo da Vinci\', 500), (\'Magazine\', \'National Geographic\', 120)] Output { \'Biography\': [{\'title\': \'The Wright Brothers\', \'pages\': 320}, {\'title\': \'Leonardo da Vinci\', \'pages\': 500}, {\'title\': \'Steve Jobs\', \'pages\': 600}], \'History\': [{\'title\': \'Sapiens\', \'pages\': 430}, {\'title\': \'Guns, Germs, and Steel\', \'pages\': 480}], \'Magazine\': [{\'title\': \'National Geographic\', \'pages\': 120}] }","solution":"def categorize_and_sort_books(books): Categorizes books by their genres and then sorts them by the number of pages. Parameters: books (list of tuples): Each tuple contains the genre (str), title (str) and number of pages (int). Returns: dict: A dictionary where the keys are genres and the values are lists of books (represented as dictionaries with keys \'title\' and \'pages\'), sorted by number of pages. from collections import defaultdict # Create a dictionary to store books by genres genre_dict = defaultdict(list) # Fill the dictionary with books for genre, title, pages in books: genre_dict[genre].append({\'title\': title, \'pages\': pages}) # Sort the books within each genre by the number of pages for genre in genre_dict: genre_dict[genre].sort(key=lambda x: x[\'pages\']) return genre_dict # Test example books = [(\'Fiction\', \'Book A\', 200), (\'Non-Fiction\', \'Book B\', 150), (\'Fiction\', \'Book C\', 100), (\'Fiction\', \'Book D\', 300), (\'Non-Fiction\', \'Book E\', 100)] print(categorize_and_sort_books(books))"},{"question":"Design a program that identifies the longest contiguous subarray where the sum is equal to a given target value from an array of integers. You are given an array arr of size n and an integer target. Your task is to write a function that returns the length of the longest contiguous subarray whose sum equals target. If there is no such subarray, return 0. # Input - The first line contains two integers n and target (1 ≤ n ≤ 100000, -10^9 ≤ target ≤ 10^9) — the size of the array and the target sum. - The second line contains n integers arr[i] (-10^9 ≤ arr[i] ≤ 10^9) — the elements of the array. # Output - Output a single integer representing the length of the longest contiguous subarray whose sum equals target. If no such subarray exists, output 0. # Example Input ``` 5 5 1 2 3 4 -1 ``` Output ``` 2 ``` Description The longest contiguous subarray with sum equals to the target 5 is `[2, 3]`, which has a length of 2. Input ``` 7 3 1 1 1 1 1 1 1 ``` Output ``` 3 ``` Description The longest contiguous subarray with sum equals to the target 3 is `[1, 1, 1]`, which has a length of 3. Input ``` 6 -2 -1 -1 -1 -1 -1 -1 ``` Output ``` 2 ``` Description The longest contiguous subarray with sum equals to the target -2 is `[-1, -1]`, which has a length of 2. # Note **Input Constraints:** - The array contains integers which can have large absolute values up to 10^9. - The size of the array can be large up to 100,000 elements. - The target value can also range from -10^9 to 10^9. Implement an efficient solution to handle the possible large size and value constraints of the input.","solution":"def longest_subarray_with_sum(arr, target): Finds the length of the longest contiguous subarray with a given sum. Parameters: arr (list): List of integers representing the array target (int): The target sum to check for in the subarray Returns: int: The length of the longest contiguous subarray that sums to target, or 0 if no such subarray exists prefix_sum = 0 prefix_sum_index = {0: -1} max_length = 0 for i, num in enumerate(arr): prefix_sum += num if prefix_sum - target in prefix_sum_index: max_length = max(max_length, i - prefix_sum_index[prefix_sum - target]) if prefix_sum not in prefix_sum_index: prefix_sum_index[prefix_sum] = i return max_length"},{"question":"Design a program that mimics a library catalog system. The library contains books that have unique identification numbers, titles, and authors. The system needs to support multiple operations that either add, remove, update or query books within the catalog. Write a program that maintains a catalog of books and supports the following operations: 1. Add a new book to the catalog. 2. Remove a book from the catalog by its ID. 3. Update the title or author of a book by its ID. 4. Query the catalog for a book by its ID. -----Input----- The first line in the input contains an integer m (1 le m le 1000) which is the number of operations. Each of the following m lines represents one operation and can be one of the following four commands: - \\"ADD id title author\\" where id is a unique integer, title is a string (without spaces), and author is a string (without spaces). - \\"REMOVE id\\" where id is an integer. - \\"UPDATE id title/author new_value\\" where id is an integer, title/author indicates what to update, and new_value is the new string value (without spaces). - \\"QUERY id\\" where id is an integer. -----Output----- For each \\"QUERY\\" operation, output the details of the book with the specified ID in the format \\"id title author\\". If the book with the specified ID does not exist, output \\"Book not found\\". -----Examples----- Sample Input 1: 5 ADD 1 Infinite Jest DavidFosterWallace ADD 2 TheRoad CormacMcCarthy QUERY 1 UPDATE 2 title TheRuin QUERY 2 Sample Output 1: 1 Infinite Jest DavidFosterWallace 2 TheRuin CormacMcCarthy Sample Input 2: 6 ADD 1 1984 GeorgeOrwell ADD 2 BraveNewWorld AldousHuxley QUERY 3 REMOVE 1 QUERY 1 QUERY 2 Sample Output 2: Book not found Book not found 2 BraveNewWorld AldousHuxley","solution":"class LibraryCatalog: def __init__(self): self.catalog = {} def add_book(self, id, title, author): if id not in self.catalog: self.catalog[id] = {\'title\': title, \'author\': author} def remove_book(self, id): if id in self.catalog: del self.catalog[id] def update_book(self, id, field, new_value): if id in self.catalog and field in self.catalog[id]: self.catalog[id][field] = new_value def query_book(self, id): if id in self.catalog: book = self.catalog[id] return f\\"{id} {book[\'title\']} {book[\'author\']}\\" return \\"Book not found\\""},{"question":"Write a function, `findLongestSubstring(s: str) -> int`, that takes a string as an input and returns the length of the longest substring without repeating characters. **Input**: - A single string `s` with a length between 1 and 10^5 containing only English letters, digits, symbols, and spaces. **Output**: - An integer representing the length of the longest substring without repeating characters. **Example**: - Input: `\\"abcabcbb\\"` - Output: `3` - Input: `\\"bbbbb\\"` - Output: `1` - Input: `\\"pwwkew\\"` - Output: `3` **Constraints**: - You may assume that the string only contains ASCII characters. - Your solution should have a time complexity of O(n) where n is the length of the string.","solution":"def findLongestSubstring(s: str) -> int: Returns the length of the longest substring without repeating characters. char_index_map = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"You have a collection of coins consisting of different denominations and you aim to determine the minimum number of coins to make up a specific amount of money. If that amount cannot be made up by any combination of the coins, return `-1`. You are given an array `coins` representing the denominations of coins and an integer `amount` representing the total amount of money. You need to implement a function `coinChange(coins, amount)` that returns an integer representing the minimum number of coins required to make up the amount, or `-1` if it\'s not possible. # Function Signature `def coinChange(coins: List[int], amount: int) -> int:` # Parameters - `coins`: List of integers representing the coin denominations. - `amount`: A non-negative integer representing the total amount of money. # Output - An integer indicating the minimum number of coins required to make up the specified amount. If it\'s not possible, return `-1`. # Examples: ``` coinChange([1, 2, 5], 11) => 3 coinChange([2], 3) => -1 coinChange([1], 0) => 0 coinChange([1], 2) => 2 coinChange([1, 4, 5], 8) => 2 ``` # Explanation: - For `coinChange([1, 2, 5], 11)`: The minimum coins required are 3 (5 + 5 + 1). - For `coinChange([2], 3)`: It\'s not possible to make 3 with only denomination 2, so the result is `-1`. - For `coinChange([1], 0)`: The amount is 0, so 0 coins are needed. - For `coinChange([1], 2)`: The minimum coins required are 2 (1 + 1). - For `coinChange([1, 4, 5], 8)`: The minimum coins required are 2 (4 + 4 or 3 + 5). # Note - You can assume that you have an infinite number of each denomination of coin. - You are not allowed to use the same coin multiple times in one solution.","solution":"from typing import List def coinChange(coins: List[int], amount: int) -> int: # Create a list to store the minimum coins needed for each amount from 0 to amount. dp = [amount + 1] * (amount + 1) # Base case: 0 coins needed to make amount 0. dp[0] = 0 # Iterate through each coin and update the dp table. for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) # Return the result. If dp[amount] is still greater than amount, return -1 as it\'s not possible. return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"You are given an array of strings words and a string target. Each word in words has the same length, which is also the length of target. You are allowed to change exactly one character in each word, and you can do this for all words simultaneously. Your goal is to figure out the minimum number of moves required to transform the array of words into a state where all the words are the same as the target string. A move is defined as changing one character in one word. Write a function that takes in the words array and the target string and returns the minimum number of moves required. Example: Input: words = [\\"abc\\", \\"acb\\", \\"bac\\"] target = \\"bca\\" Output: 4 Explanation: - Change the first word \'abc\' to \'bca\' in 2 moves (\'a\' -> \'b\', \'b\' -> \'c\'). - Change the second word \'acb\' to \'bca\' in 2 moves (\'a\' -> \'b\', \'c\' -> \'a\'). - Change the third word \'bac\' to \'bca\' in 2 moves (\'b\' -> \'b\', \'a\' -> \'c\', \'c\' -> \'a\'). Only 2 character changes are needed to make it \'bca\'. Total moves = 2 + 2 + 0 = 4 Note: 1. words contains at least one element and at most 10,000 elements. 2. Each word in words has the same length as the target string. 3. The length of each word and the target string will be between 1 and 100 characters.","solution":"def min_moves_to_transform(words, target): Returns the minimum number of moves required to transform the array of words into the target string. Each move changes one character in one word. :param words: List of strings, where each string is the same length as the target string. :param target: Target string that we want each word to be transformed to. :return: Minimum number of moves required. moves = 0 for word in words: for i in range(len(word)): if word[i] != target[i]: moves += 1 return moves"},{"question":"In a remote village, there exists a unique postal system where each mail delivery across houses follows a specific rule based on the weather conditions. The rules are designed to ensure that every house receives its mail regardless of the distance between them. The village consists of `n` houses, denoted by numbers from 1 to `n`. There are `m` roads, each connecting a pair of houses. Each road has a length associated with it, which indicates the time it takes to travel between two houses in minutes. In addition, given the peculiar weather patterns, the travel time on different days can vary. Specifically, the travel costs may increase or decrease based on whether the day is sunny or rainy. The postal worker is tasked with determining the shortest time required to deliver mail from the central post office, located at house number `1`, to all other houses. On sunny days, the travel time on each road remains as recorded, while on rainy days, the travel time of each road doubles. You are requested to write a program that calculates the shortest delivery time from the post office to each house given the current weather. Input The first line contains two integers `n` and `m`, separated by a space where `1 ≤ n ≤ 1000` and `0 ≤ m ≤ 10000`. The next `m` lines contain three integers `u`, `v`, and `t`, separated by spaces, where `1 ≤ u, v ≤ n` and `1 ≤ t ≤ 100000`. Each line represents a road between houses `u` and `v` with travel time `t` on a sunny day. The last line contains a string `weather` which is either \\"sunny\\" or \\"rainy\\", indicating the current weather condition. Output For each house (from house number `2` to house number `n`), output one line containing a single integer, representing the shortest time required to deliver mail to that house from the post office. If a house is not reachable, output `-1` for that house. Example Input 4 4 1 2 5 1 3 10 2 4 5 3 4 5 sunny Output 5 10 10 Input 4 4 1 2 5 1 3 10 2 4 5 3 4 5 rainy Output 10 20 20","solution":"import heapq def shortest_delivery_time(n, m, roads, weather): Computes the shortest delivery times from the post office (house 1) to all other houses using Dijkstra\'s algorithm. If the weather is rainy, travel times are doubled. Parameters: n (int): Number of houses m (int): Number of roads roads (list): List of tuples where each tuple contains (u, v, t), indicating a road between house u and house v with travel time t on a sunny day weather (str): \'sunny\' or \'rainy\' indicating the weather condition Returns: list: Shortest delivery time to each house from house 1. If the house is not reachable, return -1 for that house. graph = {i: [] for i in range(1, n+1)} for u, v, t in roads: travel_time = t if weather == \\"sunny\\" else 2 * t graph[u].append((travel_time, v)) graph[v].append((travel_time, u)) def dijkstra(source): dist = {i: float(\'inf\') for i in range(1, n+1)} dist[source] = 0 min_heap = [(0, source)] visited = set() while min_heap: current_dist, u = heapq.heappop(min_heap) if u in visited: continue visited.add(u) for travel_time, v in graph[u]: if v not in visited: old_cost = dist[v] new_cost = current_dist + travel_time if new_cost < old_cost: dist[v] = new_cost heapq.heappush(min_heap, (new_cost, v)) return dist distances = dijkstra(1) result = [] for i in range(2, n+1): result.append(distances[i] if distances[i] != float(\'inf\') else -1) return result"},{"question":"At Byteland University, students are organizing a relay race. Each student will run a leg of the race, and the total distance of the race is the sum of all the legs. However, the race must be planned in such a way that each student runs for at least a certain distance. Your task is to calculate the minimum total distance required for each student to satisfy this condition. You are given the number of students n and the minimum distances di each student must cover. Create a program that calculates and outputs the minimum total distance of the race. Input The input consists of multiple datasets. Each dataset is given in the following format: n d1 d2 .. dn The first line gives the number of students n (1 ≤ n ≤ 100). The second line provides n integers di (1 ≤ di ≤ 1000) representing the minimum distances each student must cover. The end of the input is indicated by a single line of zeros. Output For each dataset, output the minimum total distance for the race, such that each student runs at least their minimum distance. Example Input 3 5 10 8 4 3 7 2 6 0 Output 23 18","solution":"def minimum_total_distance(n, distances): Calculates the minimum total distance for the race such that each student runs at least their minimum distance. return sum(distances) def process_input(input_data): Parses the input data and returns a list of results for each dataset. results = [] lines = input_data.strip().split(\\"n\\") i = 0 while i < len(lines): if lines[i] == \'0\': break n = int(lines[i]) distances = list(map(int, lines[i+1].split())) results.append(minimum_total_distance(n, distances)) i += 2 return results"},{"question":"Your task is to implement a Parking Lot system that efficiently manages parking for a given set of vehicles. You need to implement four methods for this system: - `park`: Parks a vehicle in the parking lot. - `leave`: Removes a vehicle from the parking lot. - `status`: Returns the current status of the parking lot. - `getFreeSlots`: Returns the number of free slots in the parking lot. The parking lot is an abstract data structure that should handle vehicles based on the `vehicle_id`. Example 1: Input: park(1001) park(1002) leave(1001) status() getFreeSlots() Output: Vehicle 1002 is parked. Free slots: 1 Explanation: park(1001) the parking lot will have vehicle with ID 1001. park(1002) the parking lot will have vehicles with ID 1001 and 1002. leave(1001) the parking lot will have vehicle with ID 1002. status() returns the ID of vehicles currently parked: \\"Vehicle 1002 is parked.\\" getFreeSlots() returns 1 as there is 1 free slot available. Example 2: Input: park(2001) park(2002) status() getFreeSlots() leave(2002) status() getFreeSlots() Output: Vehicle 2001 is parked. Vehicle 2002 is parked. Free slots: 0 Vehicle 2001 is parked. Free slots: 1 Explanation: park(2001) the parking lot will have vehicle with ID 2001. park(2002) the parking lot will have vehicles with ID 2001 and 2002. status() returns the IDs of vehicles currently parked: \\"Vehicle 2001 is parked. Vehicle 2002 is parked.\\" getFreeSlots() returns 0 as there are no free slots available. leave(2002) the parking lot will have vehicle with ID 2001. status() returns the ID of vehicle currently parked: \\"Vehicle 2001 is parked.\\" getFreeSlots() returns 1 as there is 1 free slot available. Your Task: You don\'t need to read input or print anything. You are required to complete the 4 methods: `park`, `leave`, `status`, `getFreeSlots`. Expected Time Complexity: O(1) for all the four methods. Expected Auxiliary Space: O(1) for all the four methods. Constraints: 1 <= Number of queries <= 10^{4} 1 <= Number of vehicles <= 100 The parking lot capacity < size of the given array.","solution":"class ParkingLot: def __init__(self, capacity): self.capacity = capacity self.vehicles = set() def park(self, vehicle_id): if len(self.vehicles) < self.capacity: self.vehicles.add(vehicle_id) return True return False def leave(self, vehicle_id): if vehicle_id in self.vehicles: self.vehicles.remove(vehicle_id) return True return False def status(self): if self.vehicles: return \\" \\".join(f\\"Vehicle {vid} is parked.\\" for vid in self.vehicles) return \\"Parking lot is empty.\\" def getFreeSlots(self): return self.capacity - len(self.vehicles)"},{"question":"Write a function that takes an array of integers and returns the sum of the elements that appear only once in the array. The result should be a single integer, which is the sum of all unique elements. You can assume that the input array will always contain at least one integer. Examples ~~~if-not:python ``` [1, 2, 3, 2, 1] should return 3 [4, 1, 2, 2, 3, 4] should return 4 [7, 8, 9] should return 24 [0, 1, 1, 0, 99] should return 99 ``` ~~~ ~~~if:python ``` [1, 2, 3, 2, 1] should return 3 [4, 1, 2, 2, 3, 4] should return 4 [7, 8, 9] should return 24 [0, 1, 1, 0, 99] should return 99 ``` ~~~","solution":"def sum_of_unique_elements(arr): Returns the sum of elements that appear only once in the array. from collections import Counter count = Counter(arr) return sum(key for key, value in count.items() if value == 1)"},{"question":"You are given a list of unique integers representing nodes in a binary search tree (BST). Your task is to determine if all the given nodes form a valid BST. A binary search tree has the following properties: 1. The left subtree of a node contains only nodes with keys less than the node\'s key. 2. The right subtree of a node contains only nodes with keys greater than the node\'s key. 3. Both the left and right subtrees must also be binary search trees. Write a function that takes a list of integers and returns \\"YES\\" if the integers can form a valid BST and \\"NO\\" otherwise. Input Format The first line contains the number of cases T. T cases follow. Each case starts with an integer N (the number of nodes), followed by N unique integers. Constraints 1 <= T <= 10 1 <= N <= 1000 1 <= Value of each node <= 10000 Output Format Output T lines, containing \\"YES\\" or \\"NO\\" for each case. Sample Input 3 5 1 3 2 4 5 4 2 1 3 4 6 7 4 6 3 8 10 Sample Output YES YES NO Explanation In the first case, the nodes can be arranged to form a valid BST. For example: ``` 3 / 1 4 5 ``` In the second case, the nodes can be arranged as: ``` 2 / 1 3 4 ``` In the third case, it is not possible to organize the nodes into a valid BST because \'6\' is greater than \'4\' but should be on the right side of \'7\'.","solution":"def can_form_bst(nodes): Returns \\"YES\\" if the given list of integers can form a valid BST. Otherwise, returns \\"NO\\". def is_valid_bst(seq): if not seq: return True root = seq[0] left = [x for x in seq if x < root] right = [x for x in seq if x > root] # Check the continuity of left and right parts in the original sequence left_part = seq[1:len(left)+1] right_part = seq[len(left)+1:] if not (left == left_part and right == right_part): return False return is_valid_bst(left_part) and is_valid_bst(right_part) if is_valid_bst(nodes): return \\"YES\\" else: return \\"NO\\" def check_bsts(cases): results = [] for case in cases: n, nodes = case[0], case[1] results.append(can_form_bst(nodes)) return results"},{"question":"You are given two sorted arrays of integers `arr1` and `arr2`, and an integer `k`. Your task is to write a program that finds the k-th smallest element among the sorted union of `arr1` and `arr2`. Both arrays are sorted in ascending order and may contain duplicate elements. You are guaranteed that the total number of elements in `arr1` and `arr2` is at least `k`. -----Input----- The first line contains two integers `n` and `m` (1 le n, m le 10^5) — the sizes of the arrays `arr1` and `arr2`, respectively. The second line contains `n` integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) — the elements of the array `arr1`. The third line contains `m` integers b_1, b_2, ..., b_m (-10^9 le b_i le 10^9) — the elements of the array `arr2`. The fourth line contains a single integer `k` (1 le k le n + m) — the position (1-based) of the element to find among the sorted union of the two arrays. -----Output----- Print a single integer — the k-th smallest element among the sorted union of `arr1` and `arr2`. -----Example----- Input 5 4 1 3 5 7 9 2 4 6 8 5 Output 5 -----Note----- The sorted union of arrays `arr1` and `arr2` is [1, 2, 3, 4, 5, 6, 7, 8, 9]. The 5th smallest element is 5.","solution":"def find_kth_smallest(arr1, arr2, k): Finds the k-th smallest element in the sorted union of two sorted arrays. Parameters: arr1 (list): First sorted list of integers. arr2 (list): Second sorted list of integers. k (int): The k-th position (1-based). Returns: int: The k-th smallest element in the sorted union of arr1 and arr2. i = j = 0 while k > 0: if i < len(arr1) and (j >= len(arr2) or arr1[i] <= arr2[j]): i += 1 k -= 1 if k == 0: return arr1[i-1] else: j += 1 k -= 1 if k == 0: return arr2[j-1]"},{"question":"You are given an infinite grid of points on the x-y plane. Each point has coordinates (x, y) where x and y are integer values. You start at the point (0,0) at time t=0. Your goal is to reach a target point (X, Y) in the minimum amount of time. You can move from any point (i, j) to any of its 8 neighboring points (i+1, j), (i-1, j), (i, j+1), (i, j-1), (i+1, j+1), (i-1, j-1), (i+1, j-1), or (i-1, j+1). Each move takes 1 second. Write a function that, given the target point coordinates X and Y, returns the minimum time required to reach the point (X, Y) from (0, 0). -----Input:----- - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains two integers X and Y, the coordinates of the target point. -----Output:----- For each test case, output a single integer, the minimum time in seconds to reach the target point (X, Y) from (0, 0). -----Constraints:----- - 1 ≤ T ≤ 10^5 - -10^9 ≤ X, Y ≤ 10^9 -----Sample Input:----- 3 3 4 -1 -3 5 5 -----Sample Output:----- 4 3 5 -----Explanation:----- Test Case 1: To reach (3,4) from (0,0), we can move through the following points: (0,0) -> (1,1) -> (2,2) -> (3,3) -> (3,4). The minimum time required is 4 seconds. Test Case 2: To reach (-1,-3) from (0,0), we can move through the following points: (0,0) -> (-1,-1) -> (-1,-2) -> (-1,-3). The minimum time required is 3 seconds.","solution":"def min_time_to_reach(X, Y): Returns the minimum time required to reach the point (X, Y) from (0, 0). Each move to an adjacent point (including diagonals) takes 1 second. return max(abs(X), abs(Y)) def solve(test_cases): results = [] for x, y in test_cases: results.append(min_time_to_reach(x, y)) return results"},{"question":"Given an array of integers, you need to rearrange the array so that all even numbers come before all odd numbers while maintaining the relative order of the even and odd numbers. Write a program that reads an array of integers and rearranges it according to the given rule. Input The input is given in the following format: N a1 a2 ... aN The first line contains the number of elements N (1 ≤ N ≤ 100). The second line contains the N elements of the array a (1 ≤ ai ≤ 100) separated by spaces. Output Output the rearranged array with all even numbers placed before all odd numbers, maintaining the relative order. Examples Input 8 4 3 1 2 5 8 7 6 Output 4 2 8 6 3 1 5 7 Input 5 1 2 3 4 5 Output 2 4 1 3 5 Input 6 9 7 5 3 1 2 Output 2 9 7 5 3 1","solution":"def rearrange_even_odd(arr): even = [x for x in arr if x % 2 == 0] odd = [x for x in arr if x % 2 != 0] return even + odd"},{"question":"You are given a list of integers that represent the prices of products in a store on different days. The store wants to have at least one discount day in a given period such that the discount day is always sandwiched between two days with higher prices. More formally, a day `i` is a discount day if `prices[i-1] > prices[i] < prices[i+1]`. The store needs to know the maximum number of discount days it can have in a given list of prices. ---- Input ---- The first line contains a single integer T, the number of test cases. The first line of each test case contains a single integer N, the number of days. The second line contains N space-separated integers representing the prices on those days. ---- Output ---- For each test case, output a single line containing the maximum number of discount days that can be obtained. ---- Constraints ---- 1 ≤ T ≤ 100,000 3 ≤ N ≤ 1,000 1 ≤ prices[i] ≤ 1,000 ---- Sample Input ---- 3 5 1 3 2 4 5 4 4 3 2 1 7 12 11 10 9 10 11 12 ---- Sample Output ---- 1 0 1 ---- Explanation ---- In the first test case, the discount day is the third day since `3 > 2 < 4`. In the second test case, there are no valid discount days. In the third test case, the discount day is the fourth day since `9 < 10` and it is surrounded by higher prices. The goal is to help the store to find the right days with the highest potential for discounts without disrupting their regular prices strategy.","solution":"def max_discount_days(T, test_cases): results = [] for i in range(T): N, prices = test_cases[i] discount_days = 0 for j in range(1, N-1): if prices[j-1] > prices[j] < prices[j+1]: discount_days += 1 results.append(discount_days) return results"},{"question":"You are given a list of integers representing different candle heights. Each time you blow out the tallest candle, the height of that candle is set to zero. You can blow out multiple candles in one move if they have the same height. Your task is to determine the number of moves required to blow out all the candles. -----Constraints----- - 1 ≤ number of candles ≤ 10^5 - 1 ≤ height of each candle ≤ 10^9 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: ``` n h1 h2 ... hn ``` Where `n` is the number of candles and `h1, h2, ..., hn` are the heights of the candles. -----Output----- Print the number of moves required to blow out all the candles. -----Sample Input----- 5 2 3 1 3 2 -----Sample Output----- 3 Explanation: The tallest candles are blown out in each move as follows: - Move 1: Blow out candles of height 3 -> Remaining heights: [2, 0, 1, 0, 2] - Move 2: Blow out candles of height 2 -> Remaining heights: [0, 0, 1, 0, 0] - Move 3: Blow out remaining candle of height 1 -> Remaining heights: [0, 0, 0, 0, 0] Thus, it takes 3 moves to blow out all the candles.","solution":"def number_of_moves_to_blow_out_candles(n, heights): Returns the number of moves required to blow out all the candles by repeatedly blowing out the tallest candles. :param n: the number of candles, an integer :param heights: a list of integers representing the heights of the candles :return: an integer, the number of moves required to blow out all the candles moves = 0 while any(heights): max_height = max(heights) heights = [height if height != max_height else 0 for height in heights] moves += 1 return moves"},{"question":"You are given a binary tree where each node has a value of either 0 or 1. Each path from the root to a leaf can be thought of as a binary number formed by concatenating the values of the nodes along the path. Write a function that finds the total sum of all such binary numbers represented by the paths in the binary tree. Each binary number should be considered as a number in base-10. -----Input----- - A binary tree with each node having a value either 0 or 1. -----Output----- - The total sum of all binary numbers represented by all root-to-leaf paths in the tree. -----Function Signature----- ```python class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def sumRootToLeaf(root: TreeNode) -> int: ... ``` -----Examples----- ``` # Example 1: Input: 1 / 0 1 /| / 0 1 0 1 Output: 22 Explanation: The binary numbers from root to leaf are 100, 101, 110, and 111. In decimal, these numbers are: 100 => 4 101 => 5 110 => 6 111 => 7 Total sum: 4 + 5 + 6 + 7 = 22 # Example 2: Input: 1 / 0 / 1 Output: 2 Explanation: The only binary number from root to leaf is 101. In decimal, this number is: 101 => 5 Total sum: 5 ``` Note: You can assume that the binary tree is non-empty and always has at least one node.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def sumRootToLeaf(root: TreeNode) -> int: def dfs(node, current_sum): if node is None: return 0 current_sum = (current_sum << 1) | node.val if node.left is None and node.right is None: # It\'s a leaf node return current_sum return dfs(node.left, current_sum) + dfs(node.right, current_sum) return dfs(root, 0)"},{"question":"Alex is organizing the shelves of a newly launched library in his town. The library has a rule that all the books on the shelf must follow a particular pattern. Alex loves challenges and decides to arrange the books such that the sum of the number of books in odd positions and the number of books in even positions on the shelf are equal. The books are initially arranged in a row, and Alex wants to check if it\'s possible to rearrange them to follow this rule. You are given an array of N integers representing the number of books at each position on the shelf. You need to find out if it\'s possible to rearrange the books such that the sum of the books at odd positions is equal to the sum of the books at even positions. Input constraints: 1 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^4 Input Format: The first line contains an integer N - denoting the number of books. The second line contains N space-separated integers denoting the number of books at each position on the shelf. Output Format: Output a single line \\"YES\\" (without quotes) if the rearrangement is possible, otherwise \\"NO\\" (without quotes). SAMPLE INPUT 5 3 1 4 2 8 SAMPLE OUTPUT YES Explanation: One way to rearrange them is [3, 2, 1, 4, 8], where the sum of books at odd positions (3 + 1 + 8) is equal to the sum of books at even positions (2 + 4).","solution":"def can_rearrange_books(N, books): total_books = sum(books) if total_books % 2 != 0: return \\"NO\\" possible_half_sum = total_books // 2 # Use of a set to track possible sums of subsets possible_sums = {0} for book in books: new_sums = set() for ps in possible_sums: new_sums.add(ps + book) possible_sums.update(new_sums) if possible_half_sum in possible_sums: return \\"YES\\" return \\"NO\\""},{"question":"You are given a grid representing a field with obstacles, empty cells, and a single destination cell. Your task is to navigate through the field from a given starting point to the destination using the shortest possible path. The grid has the following characters: * \'.\' - an empty cell through which you can move. * \'#\' - an obstacle cell through which you cannot move. * \'S\' - the starting cell. * \'D\' - the destination cell. You can move in four directions: up, down, left, and right. Write a program that finds the length of the shortest path from the starting cell to the destination cell. If the destination is unreachable, output \\"Unreachable\\". # Input The input consists of multiple datasets. The end of the input is indicated by a line containing a single number -1. Each dataset is given in the following format: N M grid - The first line contains two integers N and M (1 ≤ N, M ≤ 100), the number of rows and columns of the grid. - The next N lines each contain a string of length M representing the grid. # Output For each dataset, print the length of the shortest path from the starting cell to the destination cell on a new line. If the destination is unreachable, print \\"Unreachable\\". # Sample Input ``` 5 5 S.... ..... ..#.. .#.#. ....D 4 5 S.... # #...# ....D -1 ``` # Sample Output ``` 8 Unreachable ``` # Explanation In the first dataset, the shortest path from \'S\' to \'D\' can be found as follows: `S (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> D (4,4)`. The length 8 indicates the number of steps taken. In the second dataset, the destination \'D\' is unreachable from the starting point \'S\' as there is no valid path that connects them. Implement your solution to solve the problem for the provided constraints.","solution":"from collections import deque def find_shortest_path(grid, start, end): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] rows, cols = len(grid), len(grid[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] in [\'.\', \'D\']: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return \\"Unreachable\\" def find_start_end(grid): start = end = None for i in range(len(grid)): for j in range(len(grid[i])): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'D\': end = (i, j) return start, end def solve_datasets(datasets): results = [] for grid in datasets: start, end = find_start_end(grid) results.append(find_shortest_path(grid, start, end)) return results def parse_input(data): datasets = [] idx = 0 while idx < len(data): if data[idx] == \'-1\': break n, m = map(int, data[idx].split()) grid = [] for i in range(n): grid.append(data[idx + 1 + i]) datasets.append(grid) idx += 1 + n return datasets def main(input_data): data = input_data.splitlines() datasets = parse_input(data) results = solve_datasets(datasets) return results"},{"question":"Given an unsorted array of integers, you need to find the smallest positive integer that is missing from the array. Write a function `findMissingPositive()` that takes an array of integers and returns the smallest positive integer that is not present in the array. # Input: First line of input contains the number of test cases `T`. For each test case, the first line contains an integer `N` (the size of the array). The second line contains `N` space-separated integers representing the elements of the array. # Output: For each test case, output a single line containing the smallest positive integer missing from the array. # User Task: The task is to complete the function `findMissingPositive()` which takes the array as an argument and returns the smallest positive integer missing from the array. # Constraints: 1 ≤ T ≤ 30 1 ≤ N ≤ 100 -10^6 ≤ A[i] ≤ 10^6 # Example: Input: 2 5 1 3 6 4 1 2 4 1 2 3 4 Output: 5 5 Explanation: **Test Case 1:** The smallest positive integer missing from the array `[1, 3, 6, 4, 1, 2]` is 5. **Test Case 2:** The smallest positive integer missing from the array `[1, 2, 3, 4]` is 5.","solution":"def findMissingPositive(arr): This function takes an array of integers and returns the smallest positive integer that is not present in the array. # Filtering the array to only positive numbers arr = [num for num in arr if num > 0] # Using a set for quick look-up of present numbers num_set = set(arr) # Start checking from 1 upwards smallest_missing_positive = 1 while smallest_missing_positive in num_set: smallest_missing_positive += 1 return smallest_missing_positive"},{"question":"You and your friend Alex are playing a game where you take turns picking fruits from a basket. The basket contains different types of fruits, represented by a list of integers where each integer denotes a specific type of fruit. The game works as follows: 1. On each turn, a player picks one fruit from the basket. 2. The goal is to pick fruits that maximize your score, where the score is calculated as the number of unique types of fruits you picked. 3. The game ends when the basket is empty, and the player with the highest score wins. 4. If both players have the same score, the game is considered a draw. You always go first and both players play optimally to maximize their scores. Given the list of fruits in the basket, determine if you can guarantee at least a draw if both you and Alex play optimally. -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Description of the test cases follows. For each test case, the first line contains a single integer n (1 le n le 10^5) — the number of fruits in the basket. The second line contains n integers f_1, f_2, ldots, f_n (1 le f_i le 100) — the types of fruits in the basket. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print \\"YES\\" if you can guarantee at least a draw, otherwise print \\"NO\\". -----Examples----- Input 3 6 1 2 3 4 5 6 5 1 1 1 1 1 4 1 2 2 1 Output YES NO YES -----Note----- In the first test case, you can pick all unique fruits, ensuring at least a draw since Alex can only pick as many unique fruits as you can (3 unique fruits each). In the second test case, no matter how you and Alex play, there is only one type of fruit in the basket and you both will end up with the same score (1 unique fruit each). In the third test case, you and Alex can each pick one of each type of fruit, ensuring a draw (2 unique fruits each).","solution":"def can_guarantee_draw(t, test_cases): results = [] for case in test_cases: n, fruits = case unique_fruits = len(set(fruits)) if unique_fruits >= (n + 1) // 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of n integers. Your task is to perform operations to make all elements of the array equal. In one operation, you can choose any element and decrease it by 1 or increase it by 1. The cost of this operation is equal to the absolute difference between the original value and the new value. Find the minimum total cost required to make all elements of the array equal to the median of the array. -----Input----- The first line contains one integer t (1 leq t leq 1000) — the number of test cases. Then t cases follow. The first line of each test case contains one integer n (1 leq n leq 100) — the number of elements in the array. The second line of each test case contains n space separated integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^7) — the elements of the array. -----Output----- For each test case, output a single integer — the minimum total cost required to make all elements of the array equal to the median. -----Examples----- Input 3 3 1 2 3 4 1 10 2 9 5 3 3 1 2 1 Output 2 16 4 -----Note----- In the first test case, the median is 2. The cost to make all elements equal to 2 is |1-2| + |2-2| + |3-2| = 1 + 0 + 1 = 2. In the second test case, the median is 5.5 but since we need to choose an integer, we use either 5 or 6. Both choices give the same minimum cost: |1-5| + |10-5| + |2-5| + |9-5| = 4 + 5 + 3 + 4 = 16. In the third test case, the median is 2. The cost to make all elements equal to 2 is |3-2| + |3-2| + |1-2| + |2-2| + |1-2| = 1 + 1 + 1 + 0 + 1 = 4.","solution":"def min_cost_to_make_elements_equal_to_median(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] a.sort() median = a[n // 2] if n % 2 != 0 else a[(n // 2) - 1] cost = sum(abs(x - median) for x in a) results.append(cost) return results"},{"question":"You have an array of integers. Your task is to rearrange the elements of the given array in a special way such that every element A[i] is transformed into the sum of elements to its right, including itself. This means every element A[i] should become the sum of the subarray A[i], A[i+1], ..., A[N-1]. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of elements in the array A. The second line contains N space-separated integers A_{1}, A_{2}, ..., A_{N} denoting the array. ------ Output ------ For each test case, output N space-separated integers which represent the modified array. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{5} ----- Sample Input 1 ------ 2 5 1 2 3 4 5 4 10 20 30 40 ----- Sample Output 1 ------ 15 14 12 9 5 100 90 70 40 ----- Explanation 1 ------ In the first case: - Position 1 transforms to 1+2+3+4+5 = 15 - Position 2 transforms to 2+3+4+5 = 14 - Position 3 transforms to 3+4+5 = 12 - Position 4 transforms to 4+5 = 9 - Position 5 remains 5 In the second case: - Position 1 transforms to 10+20+30+40 = 100 - Position 2 transforms to 20+30+40 = 90 - Position 3 transforms to 30+40 = 70 - Position 4 remains 40","solution":"def transform_array(test_cases): result = [] for case in test_cases: N, A = case transformed = [] current_sum = 0 # Calculate the sum of A from right to left to avoid repeated summation for i in range(N-1, -1, -1): current_sum += A[i] transformed.append(current_sum) # Since we fill the transformed array from the end, we need to reverse it transformed.reverse() result.append(transformed) return result # Helper function to parse input data and invoke transform_array def process_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) A = list(map(int, lines[idx + 1].split())) test_cases.append((N, A)) idx += 2 return transform_array(test_cases)"},{"question":"Design a function to simulate a basic bank account system. The bank account starts with a balance of 0. Perform a series of operations which include deposit, withdraw, check balance, and undo the last operation. Operations should be performed from a list of commands provided. The operations can be of four types: - deposit(x) - Deposit `x` amount to the bank account. - withdraw(x) - Withdraw `x` amount from the bank account. The withdraw operation should only be successful if there is enough balance in the account. - balance() - Print the current balance of the bank account. - undo() - Undo the last operation, reverting the bank account balance to the state it was in before the last deposit or withdraw operation. Example: Initial balance = 0 ops = [\\"deposit 100\\", \\"balance\\", \\"withdraw 50\\", \\"balance\\", \\"undo\\", \\"balance\\", \\"undo\\", \\"balance\\"] operation | balance | explanation --------------- | ------- | -------------------------------------------- deposit 100 | 100 | Deposit 100, new balance is 100 balance | 100 | Print the current balance - 100 withdraw 50 | 50 | Withdraw 50, new balance is 50 balance | 50 | Print the current balance - 50 undo | 100 | Undo the last withdraw operation, balance back to 100 balance | 100 | Print the current balance - 100 undo | 0 | Undo the last deposit operation, balance back to 0 balance | 0 | Print the current balance - 0 Input Format The first line contains an integer, `N`, denoting the number of operations. Each of the next `N` lines defines an operation to be performed, as described above. Constraints - 1 ≤ N ≤ 1000 - 1 ≤ x ≤ 1000 Output Format Each `balance` operation must print the current balance on a new line. Sample Input ``` 8 deposit 100 balance withdraw 50 balance undo balance undo balance ``` Sample Output ``` 100 50 100 0 ``` Explanation Initially, the balance is 0. A sequence of 8 operations are performed as described below: - Deposit 100, balance becomes 100. - Print the current balance - 100. - Withdraw 50, balance becomes 50. - Print the current balance - 50. - Undo the last withdraw operation, balance back to 100. - Print the current balance - 100. - Undo the last deposit operation, balance back to 0. - Print the current balance - 0.","solution":"class BankAccount: def __init__(self): self.balance = 0 self.history = [] def deposit(self, amount): self.history.append(self.balance) self.balance += amount def withdraw(self, amount): if self.balance >= amount: self.history.append(self.balance) self.balance -= amount def undo(self): if self.history: self.balance = self.history.pop() def get_balance(self): return self.balance def perform_operations(operations): account = BankAccount() results = [] for operation in operations: if operation.startswith(\\"deposit\\"): amount = int(operation.split()[1]) account.deposit(amount) elif operation.startswith(\\"withdraw\\"): amount = int(operation.split()[1]) account.withdraw(amount) elif operation == \\"undo\\": account.undo() elif operation == \\"balance\\": results.append(account.get_balance()) return results"},{"question":"Charlie is an avid collector of ancient coins. He has a set of n coins, each with a unique year stamp indicating the year it was minted. Charlie wants to arrange these coins in a sequence such that the difference between the consecutive years of minting is minimized. Charlie has asked for your help to find the optimal way to organize these coins. Given the years in which the coins were minted, your task is to generate the sequence that has the smallest possible maximum difference between consecutive years in the sequence. -----Input----- The first line contains an integer n (2 ≤ n ≤ 100000) — the number of coins. The next line contains n integers, where each integer represents the year a coin was minted. These years are distinct and between 1000 and 9999 inclusive. -----Output----- Output a single integer representing the minimum possible maximum difference between consecutive years of minting in the optimal sequence. -----Example----- Input 5 1990 2003 1985 2010 1995 Output 7 -----Note----- For the input, an optimal way to arrange the years is [1985, 1990, 1995, 2003, 2010]. This arrangement results in a maximum difference of 7 between consecutive years (from 1995 to 2003).","solution":"def min_max_diff(n, years): This function returns the minimum possible maximum difference between consecutive years in the optimal sequence. Arguments: n -- integer, the number of coins years -- list of integers, the years the coins were minted Returns: integer -- the minimum possible maximum difference between consecutive years years.sort() min_max_diff = float(\'inf\') for i in range(1, n): min_max_diff = min(min_max_diff, years[i] - years[i - 1]) return min_max_diff"},{"question":"Stan and Dan are playing a different game. They start with an array of N integers. In each move, a player picks any two distinct elements from the array, adds them together, and replaces them with the sum. The game continues until there is only one number left in the array. Stan plays first, and the players alternate moves thereafter. The player who picks the final remaining number wins. Determine the winner of the game if both players play optimally. ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N - the number of integers in the array. - The second line of each test case contains N integers, representing the initial array. ------ Output Format ------ For each test case, output the winning player (Stan or Dan). You may print each character of Stan and Dan in uppercase or lowercase (for example, STAN, dAN, Stan will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 100 1 ≤ text{array elements} ≤ 1000 ----- Sample Input 1 ------ 2 3 2 1 4 4 1 2 3 4 ----- Sample Output 1 ------ Stan Dan ----- explanation 1 ------ Test case-1: The initial array is [2, 1, 4]. - In the first move, Stan can pick 2 and 1, sum them to get 3, resulting in the array [3, 4]. - Dan then must pick 3 and 4, sum them to get 7, resulting in the array [7]. Since Stan picked the final number 7, Stan wins. Test case-2: The initial array is [1, 2, 3, 4]. - In the first move, Stan can pick 1 and 2, sum them to get 3, resulting in the array [3, 3, 4]. - In the second move, Dan can pick either pair of 3s, sum them to get 6, resulting in the array [6, 4]. - In the third move, Stan must pick 6 and 4, sum them to get 10, resulting in the array [10]. Since Dan picked the final number 10, Dan wins.","solution":"def game_winner(t, test_cases): Determines the winner of the game. Args: t: int : number of test cases test_cases: List[Tuple[int, List[int]]] : list of test cases represented by tuple containing the number of integers in the array and the array itself. Returns: List[str] : list of results containing the winner name for each test case results = [] for i in range(t): n, arr = test_cases[i] # If the number of integers (N) is odd, Stan wins. If it is even, Dan wins. if n % 2 == 1: results.append(\\"Stan\\") else: results.append(\\"Dan\\") return results"},{"question":"Given an array of integers, arrange them to form the largest possible concatenated number. -----Description----- You should implement a function, `largestNumber(arr)`, which receives an array of non-negative integers and returns a string representing the largest concatenated number that can be formed by arranging the integers. -----Input----- The input is a single list of non-negative integers text{arr} where 0 leq text{arr}[i] leq 10^9 and 1 leq text{len(arr)} leq 10^5. -----Output----- The function should return a string representing the largest concatenated number. -----Example----- Input [10, 2] Output \\"210\\" Input [3, 30, 34, 5, 9] Output \\"9534330\\" Input [1] Output \\"1\\" Input [10] Output \\"10\\" -----Note----- In the first example, you can get the largest number by arranging the numbers as \\"2\\" + \\"10\\" = \\"210\\". In the second example, the optimum arrangement is to concatenate \\"9\\", \\"5\\", \\"34\\", \\"3\\", \\"30\\" to get \\"9534330\\". In the last two examples, since there\'s only one element, the largest number is the element itself.","solution":"from functools import cmp_to_key def largestNumber(arr): Given an array of integers, arrange them to form the largest possible concatenated number. Args: arr (list): List of non-negative integers Returns: str: String representing the largest concatenated number if not arr: return \\"\\" # Custom comparator to sort numbers in a way that forms largest concatenated number def compare(x, y): if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 # Convert numbers to strings for proper comparison arr = list(map(str, arr)) # Sort array with custom comparator arr.sort(key=cmp_to_key(compare)) # Join sorted array into single string largest_num = \'\'.join(arr) # If the largest number starts with \'0\', the entire number is \'0\' if largest_num[0] == \'0\': return \'0\' return largest_num"},{"question":"Consider a list of integers. Implement a function `find_missing_number` that takes a list of consecutive numbers with one missing number and returns the missing number in the sequence. The given list will contain all integers from a start number to an end number, missing only one integer. For example: ```python find_missing_number([1, 2, 3, 5, 6]) == 4 find_missing_number([10, 11, 12, 14, 15]) == 13 find_missing_number([101, 102, 103, 105]) == 104 ``` **Note:** 1. The input list will at least have two elements. 2. The integers in the list will not be necessarily sorted; however, the sequence will always be consecutive integers with one number missing. ```python def find_missing_number(sequence): total = (len(sequence) + 1) * (min(sequence) + max(sequence)) // 2 return total - sum(sequence) ```","solution":"def find_missing_number(sequence): Finds the missing number in a list of consecutive numbers. Args: sequence (list of int): A list of consecutive numbers with one number missing. Returns: int: The missing number in the list. total = (len(sequence) + 1) * (min(sequence) + max(sequence)) // 2 return total - sum(sequence)"},{"question":"Emma loves collecting marbles and has n boxes, each containing a certain number of marbles. She wants to redistribute the marbles such that each box has the same amount of marbles. However, this may not always be possible due to the constraints of marble transfer rules. Emma can only transfer marbles between two boxes if the transfer results in one of the following conditions: 1. The number of marbles in both boxes involved in the transfer becomes even. 2. The number of marbles in both boxes involved in the transfer becomes odd. Given this, determine whether it is possible for Emma to redistribute the marbles such that each box ends up with the same number of marbles. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input The first line contains an integer n (1 ≤ n ≤ 100), the number of boxes. The second line contains n integers m_1, m_2, ..., m_n (1 ≤ m_i ≤ 10^9) representing the number of marbles in each box. Output Print a single line containing \\"YES\\" if Emma can redistribute the marbles such that each box contains the same number of marbles, otherwise print \\"NO\\". Examples Input 3 2 4 6 Output YES Input 3 1 3 5 Output YES Input 3 2 3 4 Output NO Input 4 1 2 3 4 Output NO","solution":"def can_redistribute_marbles(n, marbles): Determines if it\'s possible to redistribute the marbles such that each box ends up with the same number of marbles. Args: n : int Number of boxes. marbles : list of int Number of marbles in each box. Returns: str \\"YES\\" if it is possible to redistribute, otherwise \\"NO\\". # Check the parity of each element in marbles odd_count = sum(1 for marble in marbles if marble % 2 != 0) even_count = n - odd_count # To be able to make the redistribution work, all counts must be of the same parity. if odd_count == 0 or even_count == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"An employee in a company is working on a new project that involves merging two sorted arrays. He needs to combine them into one sorted array while maintaining the ordering. Your task is to help him with the code to merge these arrays. -----Input:----- - The first line will contain the integer T, the number of test cases. - For each test case: - The first line will contain an integer n, the size of the first array. - The second line will contain n integers, the elements of the first array (sorted in non-decreasing order). - The third line will contain an integer m, the size of the second array. - The fourth line will contain m integers, the elements of the second array (sorted in non-decreasing order). -----Output:----- For each test case, output a single line containing the merged sorted array. -----Constraints----- - 1 leq T leq 100 - 1 leq n, m leq 100 - -10^6 leq text{Element Value} leq 10^6 -----Sample Input:----- 2 3 1 3 5 4 2 4 6 8 2 -1 0 3 -2 3 4 -----Sample Output:----- 1 2 3 4 5 6 8 -2 -1 0 3 4","solution":"def merge_sorted_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. merged_array = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 while i < len(arr1): merged_array.append(arr1[i]) i += 1 while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array def handle_input(input_str): Handles the input for the merge sorted arrays function. inputs = input_str.strip().split(\'n\') T = int(inputs[0]) results = [] index = 1 for _ in range(T): n = int(inputs[index]) arr1 = list(map(int, inputs[index+1].split())) m = int(inputs[index+2]) arr2 = list(map(int, inputs[index+3].split())) index += 4 merged_array = merge_sorted_arrays(arr1, arr2) results.append(\\" \\".join(map(str, merged_array))) return results"},{"question":"# Binary Tree Level Sum Given a binary tree of integers, write a function that computes the sum of the nodes at each level of the tree. The function should return a list of sums where the element at index `i` is the sum of the nodes at level `i` in the tree. # Function Signature ```python def level_sum(root: TreeNode) -> List[int]: pass ``` # Input - The input is the root of the binary tree, a `TreeNode`. # Output - Return a list of integers representing the sum of the nodes at each level. # Constraints - The number of nodes in the tree is in the range [0, 1000]. - The values of the nodes are in the range [-10^4, 10^4]. # Example ```python # Sample Tree Structure # 1 # / # 2 3 # / / # 4 5 6 7 input: root = TreeNode(1, left=TreeNode(2, left=TreeNode(4), right=TreeNode(5)), right=TreeNode(3, left=TreeNode(6), right=TreeNode(7))) output: [1, 5, 22] # Explanation # Level 0: [1] => sum = 1 # Level 1: [2, 3] => sum = 2 + 3 = 5 # Level 2: [4, 5, 6, 7] => sum = 4 + 5 + 6 + 7 = 22 ``` # Notes - Ensure that the tree traversal efficiently captures each level\'s sum. - Consider edge cases such as an empty tree or a single node tree.","solution":"from typing import List, Optional from collections import deque class TreeNode: def __init__(self, value: int = 0, left: Optional[\'TreeNode\'] = None, right: Optional[\'TreeNode\'] = None): self.value = value self.left = left self.right = right def level_sum(root: Optional[TreeNode]) -> List[int]: if not root: return [] result = [] queue = deque([root]) while queue: level_length = len(queue) level_sum = 0 for _ in range(level_length): node = queue.popleft() level_sum += node.value if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level_sum) return result"},{"question":"Sorted List Merging You have been given two sorted lists of integers, `list1` and `list2`. Your task is to merge these two lists into a new sorted list such that the new list contains all the elements from `list1` and `list2` while maintaining the sorted order. **Input:** - The first line contains an integer N, the number of elements in `list1`. - The second line contains N integers, the elements of `list1`, in non-decreasing order. - The third line contains an integer M, the number of elements in `list2`. - The fourth line contains M integers, the elements of `list2`, in non-decreasing order. **Output:** - Output a single line containing the merged sorted list of integers. **Constraints:** - 0 leq N, M leq 100000 (i.e., 0 to 100,000) - -10^9 leq text{list1[i]}, text{list2[j]} leq 10^9 (Each element is in the range -1,000,000,000 to 1,000,000,000) **Example Input:** ``` 5 1 3 5 7 9 4 2 4 6 8 ``` **Example Output:** ``` 1 2 3 4 5 6 7 8 9 ``` **Example Input:** ``` 3 1 3 5 2 2 4 ``` **Example Output:** ``` 1 2 3 4 5 ``` **Example Input:** ``` 4 1 2 2 3 4 2 2 3 4 ``` **Example Output:** ``` 1 2 2 2 2 3 3 4 ``` Write a function or program that accomplishes the above task efficiently, considering the constraints provided.","solution":"def merge_sorted_lists(list1, list2): Merge two sorted lists into a new sorted list. Parameters: list1 (list of int): First sorted list. list2 (list of int): Second sorted list. Returns: list of int: Merged sorted list containing all elements from list1 and list2. merged_list = [] i, j = 0, 0 # Merge the two lists while maintaining sorted order while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Add remaining elements from list1, if any while i < len(list1): merged_list.append(list1[i]) i += 1 # Add remaining elements from list2, if any while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"You are given a task to process a list of students and their scores in several subjects. Your task is to identify each student\'s highest and lowest scores, and then calculate the difference between the highest and lowest scores for each student. -----Input----- The first line of input contains an integer m (1 le m le 100) representing the number of students. The second line contains an integer n (1 le n le 10) representing the number of subjects. Each of the next m lines contains n integers, representing the scores of a student in n subjects. Each score is between 0 and 100 (inclusive). -----Output----- Output m lines, each containing a single integer which is the difference between the highest and lowest scores for the respective student. -----Examples----- Sample Input 1: 3 4 90 85 78 92 88 77 76 84 95 88 89 91 Sample Output 1: 14 12 7 Sample Input 2: 2 5 55 70 67 85 66 92 88 79 85 75 Sample Output 2: 30 17","solution":"def score_differences(m, n, scores): Given the number of students (m), number of subjects (n), and a list of scores for each student, calculates the difference between the highest and lowest scores for each student. :param m: Number of students :param n: Number of subjects :param scores: List of lists containing scores for each student :return: List of differences between highest and lowest scores for each student differences = [] for student_scores in scores: highest = max(student_scores) lowest = min(student_scores) differences.append(highest - lowest) return differences"},{"question":"A company wants to monitor the employee attendance in the office. They have installed new biometric devices at all the entrances and exits to track in and out times accurately. Using the data collected, they want to identify employees who spent the least amount of time in the office during a given month. Given the in and out times of employees for each day of a month, calculate the total time (in minutes) each employee spent in the office and identify the employee who spent the least time. Note: Each employee has at most one entry and one exit record per day. Times are in 24-hour format (e.g., 1300 for 1:00 PM). If an employee has multiple entries on a single day, consider only the first entry and the last exit of the day. An employee must have both an entry and an exit on a given day to be considered present. In case of a tie, output all employee IDs who spent the minimum time. Constraints: 1 ≤ d ≤ 31 (number of days in the month) 1 ≤ n ≤ 100 (number of employees) Input: The first line contains two integers, n and d, representing the number of employees and the number of days in the month, respectively. The next n * d lines contain the employee ID (string of alphanumeric characters), entry time, and exit time in 24-hour format. Output: The employee ID(s) of the employee(s) who spent the least time in the office during the month. SAMPLE INPUT 3 4 emp1 0900 1700 emp2 1000 1500 emp3 1030 1800 emp1 0900 1700 emp2 1000 1500 emp3 1030 1800 emp1 0900 1700 emp2 1000 1500 emp3 1030 1800 emp1 0900 1700 emp2 1000 1500 emp3 1030 1800 SAMPLE OUTPUT emp2","solution":"def least_time_in_office(n, d, records): from collections import defaultdict total_times = defaultdict(int) for record in records: emp_id, entry, exit = record.split() entry_hours, entry_minutes = int(entry[:2]), int(entry[2:]) exit_hours, exit_minutes = int(exit[:2]), int(exit[2:]) entry_time_in_minutes = entry_hours * 60 + entry_minutes exit_time_in_minutes = exit_hours * 60 + exit_minutes total_times[emp_id] += (exit_time_in_minutes - entry_time_in_minutes) min_time = min(total_times.values()) smallest_time_employees = [emp_id for emp_id, time in total_times.items() if time == min_time] return smallest_time_employees # Example usage: n = 3 d = 4 records = [ \\"emp1 0900 1700\\", \\"emp2 1000 1500\\", \\"emp3 1030 1800\\", \\"emp1 0900 1700\\", \\"emp2 1000 1500\\", \\"emp3 1030 1800\\", \\"emp1 0900 1700\\", \\"emp2 1000 1500\\", \\"emp3 1030 1800\\", \\"emp1 0900 1700\\", \\"emp2 1000 1500\\", \\"emp3 1030 1800\\" ] print(least_time_in_office(n, d, records)) # Output: [\'emp2\']"},{"question":"Sam has an array of integers, `arr`. He wants to find out if there is a subarray (contiguous elements) whose sum equals a given integer `target`. If such a subarray exists, return `True`. Otherwise, return `False`. **Example** Input: ``` arr = [1, 2, 3, 4, 5] target = 9 ``` Output: ``` True ``` Explanation: The subarray `[2, 3, 4]` sums to `9`. Input: ``` arr = [1, 2, 3] target = 6 ``` Output: ``` True ``` Explanation: The subarray `[1, 2, 3]` sums to `6`. **Your Task:** You don\'t need to read input or print anything. Your task is to complete the function `has_subarray_sum()` which takes the list of integers `arr` and an integer `target` as input parameters and returns a boolean indicating if such a subarray exists. **Expected Time Complexity:** `O(n)` **Expected Auxiliary Space:** `O(n)` **Constraints:** - `1 <= len(arr) <= 10^5` - `-10^5 <= arr[i] <= 10^5` - `-10^5 <= target <= 10^5`","solution":"def has_subarray_sum(arr, target): Returns True if there exists a subarray with sum equal to target, otherwise False. current_sum = 0 seen_sums = set() for num in arr: current_sum += num if current_sum == target: return True if (current_sum - target) in seen_sums: return True seen_sums.add(current_sum) return False"},{"question":"A group of friends are planning a hike in the mountains. They have a map which consists of N intersections connected by M trails. Each trail between two intersections (a_i, b_i) has a certain difficulty level d_i which can be any positive integer. They want to choose a route from their starting point at intersection 1 to their destination at intersection N, such that no individual trail in the route has a difficulty level greater than D. Moreover, they want to minimize the maximum difficulty level of any trail on their chosen route. Determine the smallest possible value of this maximum difficulty level. -----Input----- The first line contains three integer values N, M, and D with 2 le N le 100000, 1 le M le 200000, and 1 le D le 1000000000. The following M lines each contain three integers a_i, b_i, and d_i indicating an undirected trail between intersections a_i and b_i with difficulty level d_i (1 le a_i, b_i le N, a_i not= b_i, 1 le d_i le 1000000000). All trails in the map are unique. -----Output----- Output the minimum value of the maximum difficulty level of any trail on the route from intersection 1 to intersection N which doesn\'t exceed D. -----Examples----- Sample Input: 4 5 5 1 2 4 1 3 2 2 4 5 3 4 6 2 3 3 Sample Output: 5","solution":"import heapq from collections import defaultdict, deque def min_max_difficulty_route(N, M, D, trails): Determine the smallest possible value of the maximum difficulty level of any trail on the route from intersection 1 to intersection N which doesn\'t exceed D. # A graph dictionary using defaultdict graph = defaultdict(list) for a, b, d in trails: # only include edges with difficulty not exceeding D if d <= D: graph[a].append((b, d)) graph[b].append((a, d)) # Dijkstra\'s algorithm modified to find the minimum of maximum difficulties def dijkstra_max_difficulty(start): min_heap = [(0, start)] max_difficulties = {i: float(\'inf\') for i in range(1, N+1)} max_difficulties[start] = 0 while min_heap: current_max_diff, node = heapq.heappop(min_heap) for neighbor, weight in graph[node]: new_max_diff = max(current_max_diff, weight) if new_max_diff < max_difficulties[neighbor]: max_difficulties[neighbor] = new_max_diff heapq.heappush(min_heap, (new_max_diff, neighbor)) return max_difficulties[N] result = dijkstra_max_difficulty(1) return result if result != float(\'inf\') else -1"},{"question":"Byteland is anticipating a great celebration event. Chef, who is the president, wants to decorate the city\'s key roads with colorful lights. The city consists of N intersections labeled from 1 to N, and M roads connecting the intersections bidirectionally. Each road is decorated with a certain number of lights. Chef has a unique idea: he wants to ensure that there is exactly one path decorated with the exact number of lights between any two intersections in the city. In other words, Chef wants the city\'s roads to form a tree, where each road has a designated number of lights and there is only one unique path between any pair of intersections. To achieve this, Chef needs to remove some roads such that the remaining roads still connect all intersections with exactly one path between any two intersections. Your task is to help Chef identify the remaining roads to form this tree or determine if it is impossible to do so. ----- Input ----- The first line contains a single integer T, the number of test cases. For each test case: - The first line contains two integers N and M, representing the number of intersections and roads, respectively. - The next M lines contain three integers each, u, v, and w, where u and v are the intersections connected by the road, and w is the number of lights on that road. ----- Output ----- For each test case, print \\"YES\\" if it\'s possible to form such a decorated tree by removing some roads. Otherwise, print \\"NO\\". ----- Constraints ----- 1 ≤ T ≤ 100 2 ≤ N ≤ 50 N - 1 ≤ M ≤ 200 1 ≤ w ≤ 1000 ----- Sample Input ----- 2 4 5 1 2 3 1 3 5 2 3 7 2 4 4 3 4 6 6 8 1 2 3 1 3 2 1 4 1 2 5 4 2 6 6 3 5 2 4 6 5 5 6 3 ----- Sample Output ----- YES NO ----- Explanation ----- In the first sample case, one possible solution is to keep roads (1, 2), (1, 3), and (2, 4). These roads form a tree and ensure a unique path with the following lights: 1 - 2 : 3 lights 1 - 3 : 5 lights 2 - 4 : 4 lights In the second sample case, it\'s impossible to remove roads such that the remaining roads form a tree with a unique number of lights between any two intersections.","solution":"def can_form_decorated_tree(test_cases): from heapq import heappop, heappush import sys def mst_kruskal(n, edges): parent = list(range(n)) rank = [0] * n def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 mst = [] edges.sort(key=lambda x: x[2]) for u, v, w in edges: if find(u) != find(v): union(u, v) mst.append((u, v, w)) return mst if len(mst) == n - 1 else None results = [] for n, m, roads in test_cases: mst = mst_kruskal(n, roads) if mst is None: results.append(\\"NO\\") else: mst.sort(key=lambda x: (x[2], x[0], x[1])) unique_weights = set(w for _, _, w in mst) if len(unique_weights) == len(mst): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Main function for reading input and processing def main(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) M = int(data[index + 1]) index += 2 roads = [] for _ in range(M): u = int(data[index]) - 1 v = int(data[index + 1]) - 1 w = int(data[index + 2]) roads.append((u, v, w)) index += 3 test_cases.append((N, M, roads)) results = can_form_decorated_tree(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Alex is fascinated by sequences and number theory. He comes across a sequence problem and needs your help to solve it. Given an integer n and a sequence of n integers b_1, b_2, ..., b_n, Alex needs to perform m operations on this sequence. There are two types of operations: 1. Calculate the greatest common divisor (GCD) of all integers in the subsequence from index l to r (inclusive), where 1 ≤ l ≤ r ≤ n. 2. Update the value of the integer at index i to a new value x. For each operation of the first type, Alex needs the result of the GCD calculation. For the second type, Alex will update the given element and continue with the operations. Input The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the length of the sequence and the number of operations, respectively. The second line contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9) — the initial elements of the sequence. The next m lines contain the operations. Each operation is either of the form: 1 l r — for GCD calculation in the subsequence from index l to r, or 2 i x — for updating the integer at index i to x (1 ≤ l, r, i ≤ n; 1 ≤ x ≤ 10^9). Output For each query of the first type, print a single integer - the GCD of the specified subsequence. Examples Input 5 4 2 4 6 8 10 1 1 5 2 3 12 1 2 4 1 1 5 Output 2 4 2 Note In the example: * For the first query, the GCD of [2, 4, 6, 8, 10] is 2. * For the second operation, the sequence changes to [2, 4, 12, 8, 10]. * For the third query, the GCD of [4, 12, 8] is 4. * For the fourth query, the GCD of the updated sequence [2, 4, 12, 8, 10] is 2. Alex hopes you can solve this efficiently to handle large inputs within the constraints provided.","solution":"from math import gcd from functools import reduce class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize the segment tree for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = gcd(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, idx, value): idx += self.n self.tree[idx] = value while idx > 1: idx //= 2 self.tree[idx] = gcd(self.tree[2 * idx], self.tree[2 * idx + 1]) def query(self, l, r): res = 0 l += self.n r += self.n while l <= r: if l % 2 == 1: res = gcd(res, self.tree[l]) l += 1 if r % 2 == 0: res = gcd(res, self.tree[r]) r -= 1 l //= 2 r //= 2 return res def process_operations(n, m, sequence, operations): # Initialize the segment tree st = SegmentTree(sequence) result = [] for op in operations: if op[0] == 1: # GCD query operation _, l, r = op result.append(st.query(l - 1, r - 1)) elif op[0] == 2: # Update operation _, i, x = op st.update(i - 1, x) return result"},{"question":"The Longest Substring Without Repeating Characters You are given a string. Your task is to write a program to find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string. The length of the longest substring without repeating characters is the maximum number of characters such a substring can have. Input The input consists of a single line, which is a string `s`. The string `s` consists of English letters, digits, symbols, and spaces. The length of the string `s` does not exceed 100 characters. Output Output a single integer, which is the length of the longest substring without repeating characters. Sample Input abcabcbb bbbbb pwwkew dvdf Output for the Sample Input 3 1 3 3 Example Input zxcvbnmasdfghjqwertyuioplkjhgfdx Output 26 Input abcdefgabcdefg Output 7","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. start, max_length = 0, 0 used_char = {} for i, char in enumerate(s): if char in used_char and start <= used_char[char]: start = used_char[char] + 1 else: max_length = max(max_length, i - start + 1) used_char[char] = i return max_length"},{"question":"Given an array of integers, determine whether it is sorted in non-decreasing order (each element is not smaller than the previous one). -----Input----- The first line of the input contains an integer ( n ) (( 1 leq n leq 10^3 )) — the number of test cases. The description of each test case contains two lines. - The first line contains an integer ( m ) (( 1 leq m leq 10^4 )) — the number of elements in the array. - The second line contains ( m ) integers — the elements of the array. -----Output----- For each test case, output \\"YES\\" (without quotes) if the array is sorted in non-decreasing order, and \\"NO\\" (without quotes) otherwise. -----Examples----- Input 3 5 1 2 3 4 5 4 1 3 2 4 6 10 20 20 30 40 50 Output YES NO YES -----Note----- In the first test case, the array [1, 2, 3, 4, 5] is in non-decreasing order. In the second test case, the element 3 is followed by a smaller number 2, so the array [1, 3, 2, 4] is not sorted in non-decreasing order. In the third test case, all elements are in non-decreasing order: [10, 20, 20, 30, 40, 50].","solution":"def is_sorted_non_decreasing(test_cases): Determines if each array in the test cases is sorted in non-decreasing order. Parameters: test_cases (list): A list of test cases, where each test case is a tuple with an integer (number of elements) and a list of integers (the array). Returns: list: A list of strings \\"YES\\" or \\"NO\\" indicating if each array is sorted in non-decreasing order. results = [] for m, array in test_cases: sorted_check = all(array[i] <= array[i + 1] for i in range(m - 1)) results.append(\\"YES\\" if sorted_check else \\"NO\\") return results"},{"question":"You are given a string that contains a mix of different types of braces - `()`, `{}`, `[]`. The string is a sequence of braces that may or may not be balanced. Write a program to check if the braces in the string are balanced. A string is considered balanced if: 1. Each opening brace has a corresponding closing brace of the same type. 2. Brackets close in the correct order (i.e., the most recently opened bracket must be closed first). Your task is to write a function that determines whether the given string of braces is balanced or not. # Function Signature ``` def is_balanced(braces: str) -> bool: pass ``` # Input - A single string `braces` (1 ≤ |braces| ≤ 10^5), consisting only of the characters `()`, `{}`, `[]`. # Output - Return `True` if the string is balanced, otherwise return `False`. # Example Input ``` \\"({[]})\\" ``` Output ``` True ``` Input ``` \\"([)]\\" ``` Output ``` False ``` # Note In the second example, the braces do not close in the correct order. Thus, it is not balanced.","solution":"def is_balanced(braces: str) -> bool: Check if the braces in the string are balanced. Parameters: braces (str): The string containing braces. Returns: bool: True if the braces are balanced, False otherwise. stack = [] brace_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in braces: if char in brace_map.values(): stack.append(char) elif char in brace_map.keys(): if stack == [] or brace_map[char] != stack.pop(): return False else: continue return stack == []"},{"question":"Suppose you have an integer sequence b_1, b_2, dots, b_m of length m. A subsequence p_1, p_2, dots, p_l of the sequence b is defined as a sequence derived from b by deleting some or no elements without changing the order of the remaining elements. You are given q queries, where each query consists of taking a subsequence from b and checking if all its elements are distinct. Formally, for each query, determine whether there exists a subsequence p_1, p_2, dots, p_l such that all p_i are distinct. -----Input----- The first line of input contains a single integer q (1 leq q leq 10^5) — the number of queries. The following lines contain the description of each query. The first line of each query contains an integer m (1 leq m leq 10^5) — the length of the sequence b. The second line of each query contains m integers b_1, b_2, dots, b_m (-10^9 leq b_i leq 10^9 for every 1 leq i leq m). It is guaranteed that the sum of m over all queries does not exceed 10^5. -----Output----- For each query, output \\"YES\\" (without quotes) if it is possible to find a subsequence of distinct elements, and \\"NO\\" (without quotes) otherwise. You can output \\"YES\\" and \\"NO\\" in any case (for example, strings \\"yEs\\", \\"yes\\" and \\"Yes\\" will be recognized as a positive response). -----Examples----- Input 3 5 1 2 3 4 5 5 1 2 2 3 4 4 4 4 4 4 Output YES YES NO -----Note----- In the first query, the whole sequence b = [1, 2, 3, 4, 5] is already distinct. In the second query, we can choose, for example, the subsequence b = [1, 2, 3, 4] which is distinct. In the third query, it is impossible to form a subsequence with distinct elements since all elements are the same.","solution":"def is_distinct_subsequence_possible(m, b): Determines if a subsequence of `b` with all distinct elements is possible. Parameters: m (int): Length of the sequence b. b (list of int): The sequence. Returns: str: \\"YES\\" if such a subsequence is possible, otherwise \\"NO\\". # Use set to track if any duplicates are found distinct_elements = set() for element in b: if element in distinct_elements: return \\"NO\\" distinct_elements.add(element) return \\"YES\\" def process_queries(queries): Processes multiple queries and determines if a subsequence of all distinct elements can be formed for each query. Parameters: queries (list): List of tuples, each containing the sequence length and the sequence. Returns: list: List of results for each query. results = [] for m, b in queries: results.append(is_distinct_subsequence_possible(m, b)) return results"},{"question":"Micro has a collection of unique toys, each identified by a distinct number from 1 to N. He wants to arrange them in a particular sequence based on some comparison rules provided by his friend as a series of pairs. Each pair (X, Y) means that toy X should be placed before toy Y in the sequence. Help Micro find a valid sequence to arrange all the toys, if possible. If there\'s no way to arrange the toys, print \\"No valid arrangement.\\" Input: First line consists of an integer T denoting the number of test cases. First line of each test case consists of an integer N and an integer K separated by a space, where N is the number of toys and K is the number of comparison rules. Each of the next K lines contains two space-separated integers X and Y. Output: For each test case, print either a valid sequence of toy numbers separated by spaces, or \\"No valid arrangement\\" if such a sequence does not exist. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10 0 ≤ K ≤ 100 1 ≤ X, Y ≤ N SAMPLE INPUT 2 3 2 1 2 2 3 3 3 1 2 2 3 3 1 SAMPLE OUTPUT 1 2 3 No valid arrangement","solution":"from collections import defaultdict, deque def find_toys_sequence(N, K, rules): # Create a graph to represent the constraints graph = defaultdict(list) in_degree = {i: 0 for i in range(1, N+1)} # Populate the graph and in_degree counts for X, Y in rules: graph[X].append(Y) in_degree[Y] += 1 # Queue for the nodes with no incoming edges queue = deque() for node in in_degree: if in_degree[node] == 0: queue.append(node) # Perform topological sort sorted_list = [] while queue: node = queue.popleft() sorted_list.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If sorted_list contains all nodes, we have a valid sequence if len(sorted_list) == N: return \\" \\".join(map(str, sorted_list)) else: return \\"No valid arrangement\\" def find_valid_sequences(test_cases): results = [] for N, K, rules in test_cases: results.append(find_toys_sequence(N, K, rules)) return results"},{"question":"**Matrix Rotation:** Matrix rotation is an operation commonly used in computer graphics and image processing. The objective is to rotate a given square matrix (2D array) by 90 degrees in a clockwise direction. **Your Task :** You have to create a function **rotateMatrix** which takes a 2D square matrix as input and returns the matrix rotated by 90 degrees in the clockwise direction. **Input:** - A 2D square matrix (list of lists) **Output:** - A 2D square matrix rotated by 90 degrees clockwise **Examples:** rotateMatrix([ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]) = [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] rotateMatrix([ [1, 2], [3, 4] ]) = [ [3, 1], [4, 2] ] **Constraints:** - The matrix will always be a non-empty square matrix with integer elements.","solution":"def rotateMatrix(matrix): Rotates the given square matrix by 90 degrees clockwise. Args: matrix (list of list of int): A 2D square matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) # Create a new matrix of the same size rotated_matrix = [[0] * n for _ in range(n)] # Populate the new matrix with rotated values for i in range(n): for j in range(n): rotated_matrix[j][n - 1 - i] = matrix[i][j] return rotated_matrix"},{"question":"Sophia is working on a problem related to stock price fluctuations in the market. She has daily stock prices for N days represented in an integer array P. She defines a peak as a day when the stock price is higher than the prices on both its neighboring days. For instance, given three consecutive days i-1, i, i+1, the day i is a peak if P_{i-1} < P_{i} > P_{i+1}. Help Sophia find out the total number of peaks in the given list of stock prices. ------ Input Format ------ - The first line of input contains an integer T — the number of test cases. - Each test case contains two lines of input. - The first line of each test case contains an integer N, the number of days. - The second line contains N space-separated integers P_{1}, P_{2}, ..., P_{N}, the stock prices on each day. ------ Output Format ------ For each test case, output the total number of peaks in the stock prices. ------ Constraints ------ 1 ≤ T ≤ 10 3 ≤ N ≤ 100 1 ≤ P_{i} ≤ 1000 for every 1 ≤ i ≤ N ------ Sample Input 1 ------ 2 5 1 3 2 4 2 6 5 6 1 2 3 4 ------ Sample Output 1 ------ 2 1 ------ Explanation 1 ------ Test case 1: The peaks are on days with prices 3 and 4. Test case 2: The peak is on the day with the price 6.","solution":"def find_peaks(prices): Given a list of prices, find the number of peaks. A peak is defined as an element that is greater than its neighbors. n = len(prices) peaks = 0 for i in range(1, n-1): if prices[i-1] < prices[i] > prices[i+1]: peaks += 1 return peaks def total_peaks(test_cases): Given multiple test cases, find the number of peaks for each case. results = [] for test in test_cases: N, prices = test results.append(find_peaks(prices)) return results"},{"question":"You are given a list of positive integers. For each integer, determine if the digits of the number form a palindrome (read the same forwards and backwards). If the number is a palindrome, print \\"Palindrome\\", otherwise print \\"Not Palindrome\\". Input The first line of the input contains the number of test cases T. Each of the next T lines contains a single positive integer. Output For each test case, print \\"Palindrome\\" or \\"Not Palindrome\\" (without quotes) based on whether the given number is a palindrome. Constraints 1 ≤ T ≤ 1000 1 ≤ integer length ≤ 6 SAMPLE INPUT 4 121 12321 1234 987789 SAMPLE OUTPUT Palindrome Palindrome Not Palindrome Palindrome","solution":"def is_palindrome(num): Determines if the digits of the number form a palindrome. num_str = str(num) return num_str == num_str[::-1] def determine_palindrome_status(numbers): For each number in the list, determine if it is a palindrome and print the result accordingly. results = [] for num in numbers: if is_palindrome(num): results.append(\\"Palindrome\\") else: results.append(\\"Not Palindrome\\") return results"},{"question":"Alice and Bob love playing games with strings. Today, they came up with a new game. They are given two strings, S and T, of equal length. Both strings consist of lowercase English letters. The objective of the game is to determine if the two strings can be made identical by performing the following operations any number of times: 1. Choose a non-empty substring of S and reverse it. 2. Choose a non-empty substring of T and reverse it. A substring is a contiguous sequence of characters within a string. Given this game, Alice and Bob want to know if it\'s possible to make the two strings identical using the operations above. Write a function to help them find out. # Input - The first line contains an integer n (1 ≤ n ≤ 2 * 10^5), the length of the strings S and T. - The second line contains the string S. - The third line contains the string T. # Output Output \\"YES\\" if it is possible to make the strings identical using the operations above. Otherwise, output \\"NO\\". # Examples Example 1: Input: ``` 5 abcdef fedcba ``` Output: ``` YES ``` Example 2: Input: ``` 3 xyz axz ``` Output: ``` NO ``` Example 3: Input: ``` 4 abba abab ``` Output: ``` YES ``` # Note In the first example: - We can reverse the entire string S to get \\"fedcba\\", which is identical to T. In the second example: - There is no way to make S identical to T using the allowed operations. Thus, the output is \\"NO\\". In the third example: - We can reverse the substring \\"bb\\" in T to get \\"abab\\", which is identical to S.","solution":"def can_make_identical(n, S, T): Determines if two strings S and T of equal length n can be made identical by reversing any non-empty substring of them any number of times. Args: n (int): The length of the strings S and T. S (str): The first string. T (str): The second string. Returns: str: \\"YES\\" if the strings can be made identical, \\"NO\\" otherwise. return \\"YES\\" if sorted(S) == sorted(T) else \\"NO\\""},{"question":"James and Lily are playing a game with a string. They have a magic marker that can be used to mark letters and change their case (change lowercase to uppercase or vice versa). Unfortunately, there is an evil warlock who cast a spell that restricts them to marking only contiguous subsequences within the string that follow certain rules. The rules require that each marked subsequence must start and end with the same letter, and the entire subsequence must form a palindrome if reversed. The marker can be used multiple times to mark different subsequences, and each use increments the case of the letters in the subsequence. Given a string `s` consisting of lowercase English letters, determine if it\'s possible to mark at least one valid contiguous subsequence according to the rules. Input The first and only input line contains the string `s` (1 ≤ |s| ≤ 100), consisting of lowercase English letters. Output Print YES if it\'s possible to mark at least one valid contiguous subsequence, and NO otherwise. Examples Input ababa Output YES Input abcdef Output NO Note In the first example, \\"ababa\\" is itself a palindrome and meets the criteria. In the second example, there are no valid contiguous subsequences following the given rules.","solution":"def can_mark_palindromic_subsequence(s): Determine if it\'s possible to mark at least one valid contiguous subsequence according to the given rules. Args: s (str): input string consisting of lowercase English letters Returns: str: \'YES\' if it\'s possible to mark at least one valid subsequence, \'NO\' otherwise n = len(s) for i in range(n): for j in range(i + 1, n): if s[i] == s[j]: substring = s[i:j+1] if substring == substring[::-1]: return \\"YES\\" return \\"NO\\""},{"question":"In a game, two players named Alphonso and Beatrice take turns playing with a stack of stones. The game starts with n stones, and Alphonso always goes first. During each turn, a player can remove 1, 3, or 4 stones from the stack. The player who cannot make a move loses the game. Given the initial number of stones n, determine whether Alphonso can guarantee a win if both players play optimally. Input The only line contains the integer n (1 ≤ n ≤ 10^6) — the initial number of stones. Output Print \\"Alphonso\\" if Alphonso can guarantee a win, and \\"Beatrice\\" otherwise. Examples Input 2 Output Beatrice Input 5 Output Alphonso","solution":"def can_alphonso_win(n): Determines whether Alphonso can guarantee a win if both players play optimally. Parameters: n (int): The initial number of stones. Returns: str: \\"Alphonso\\" if Alphonso can guarantee a win, \\"Beatrice\\" otherwise. # Create a dynamic programming array to store the game\'s outcomes dp = [False] * (n + 1) # Base cases if n == 0: return \\"Beatrice\\" elif n == 1: return \\"Alphonso\\" # Populate the dp array for i in range(1, n + 1): if i >= 1 and not dp[i - 1]: dp[i] = True elif i >= 3 and not dp[i - 3]: dp[i] = True elif i >= 4 and not dp[i - 4]: dp[i] = True # Return the result for n stones return \\"Alphonso\\" if dp[n] else \\"Beatrice\\""},{"question":"# Problem Statement You are given a sequence of integers representing the heights of buildings in a row. Each building is of width 1. You need to calculate the maximum area of a rectangle formed by consecutive buildings in the row. # Constraints * All inputs are integers * 1 leq N leq 10^5 * 1 leq height_i leq 10^4 # Input The input is provided as a single line containing N integers, representing the heights of the buildings: height_1 , height_2 , ldots , height_N # Output Output a single integer: the maximum area of a rectangle that can be formed by consecutive buildings. # Example Input 7 1 5 6 2 3 Output 10 # Explanation The maximum rectangle is formed by the heights [5, 6], which gives an area of (5 times 2 = 10).","solution":"def max_rectangle_area(heights): Calculate the maximum area of a rectangle formed by consecutive buildings in the row. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Problem Statement: Largest Product of Three Numbers Given an integer array `nums`, find three numbers whose product is maximum and return the maximum product. # Function Signature ```python def maximum_product(nums: List[int]) -> int: ``` # Input - An integer array `nums` of size `n` (3 leq n leq 10^4). # Output - An integer representing the maximum product of any three numbers. # Example ```python assert maximum_product([1, 2, 3]) == 6 assert maximum_product([1, 2, 3, 4]) == 24 assert maximum_product([-1, -2, -3]) == -6 assert maximum_product([-100, -98, -1, 2, 3, 4]) == 39200 ``` # Constraints - All numbers in the input array are within the range [-1000, 1000]. # Notes - The solution should consider both negative and positive numbers. - Ensure optimal performance with a time complexity of O(n log n).","solution":"from typing import List def maximum_product(nums: List[int]) -> int: Returns the maximum product of any three numbers in the list nums. # Sort the array in non-decreasing order nums.sort() # The maximum product can be either: # 1. The product of the three largest numbers at the end of the list product1 = nums[-1] * nums[-2] * nums[-3] # 2. The product of the two smallest numbers (which could be negative) and the largest number product2 = nums[0] * nums[1] * nums[-1] return max(product1, product2)"},{"question":"Tom and Jerry play a game on a grid consisting of n rows and m columns. Each cell in the grid initially contains a coin. Tom starts the game at the top-left corner of the grid (cell (1, 1)) and Jerry starts at the bottom-right corner of the grid (cell (n, m)). Both Tom and Jerry can move to the neighboring cells: left, right, up, down, but cannot move out of the grid. Each time Tom or Jerry moves to a new cell, they pick up all the coins in that cell. Tom and Jerry move alternately, with Tom making the first move. The game ends when Tom and Jerry move to the same cell, at which point both stop collecting coins, and the score is the total number of coins collected by both till they meet. The goal is to determine the maximum number of coins collected by both of them together until they meet. **Input** The first line contains two integers n and m (1 ≤ n, m ≤ 100). Each of the next n lines contains m integers, representing the number of coins in the corresponding cell of the grid. **Output** Print a single integer, the maximum number of coins collected by both Tom and Jerry when they meet. **Examples** **Input** 3 4 1 2 3 0 0 0 5 2 1 1 0 2 **Output** 17 **Input** 2 2 1 1 2 3 **Output** 7 **Explanation** In the first example, Tom follows the path: (1, 1) -> (1, 2) -> (1, 3) -> (2, 3) -> (3, 3). Jerry follows the path: (3, 4) -> (2, 4) -> (1, 4) -> (2, 3) -> (3, 3). The maximum number of coins collected is 1 + 2 + 3 + 5 + 2 from Tom\'s path and 2 + 2 from Jerry\'s path making the total 17 when they meet at (3, 3).","solution":"def max_coins(n, m, grid): def dp(x1, y1, x2, y2, memo): if x1 >= n or y1 >= m or x2 >= n or y2 >= m: return 0 if x1 == n-1 and y1 == m-1 and x2 == n-1 and y2 == m-1: return grid[x1][y1] if memo[x1][y1][x2][y2] != -1: return memo[x1][y1][x2][y2] res = grid[x1][y1] if x1 != x2 or y1 != y2: res += grid[x2][y2] res += max( dp(x1+1, y1, x2+1, y2, memo), dp(x1+1, y1, x2, y2+1, memo), dp(x1, y1+1, x2+1, y2, memo), dp(x1, y1+1, x2, y2+1, memo) ) memo[x1][y1][x2][y2] = res return res memo = [[[[ -1 for _ in range(m)] for _ in range(n)] for _ in range(m)] for _ in range(n)] return dp(0, 0, 0, 0, memo)"},{"question":"A well-known mathematician and logician is creating a puzzle for his students to solve. The puzzle is based on a grid of size n×n. The grid is initially empty and the students need to place numbers in the grid according to the following rules: 1. Each cell in the grid must contain a unique number from 1 to n². 2. The sum of the numbers in each row must be equal to a given target R. 3. The sum of the numbers in each column must be equal to a given target C. The mathematician has asked for a program that can determine whether it\'s possible to fill the grid according to these rules, and if it\'s possible, to print a valid solution. Input Format: The first line contains a single integer n, the size of the grid. The second line contains the target row sum R and the target column sum C. Output Format: If it\'s possible to fill the grid according to the rules, print \\"YES\\" on the first line, followed by the grid configuration with each row on a new line. If there are multiple solutions, any valid solution will be accepted. If it\'s not possible to fill the grid according to the rules, print \\"NO\\". Constraints: 1 <= n <= 10 1 <= R, C <= 1000 SAMPLE INPUT 3 15 15 SAMPLE OUTPUT YES 1 5 9 6 7 2 8 3 4 Explanation: In the sample output, the sum of the numbers in each row is 15 and the sum of the numbers in each column is also 15. All numbers from 1 to 9 are used exactly once, meeting all the criteria. Your goal is to write a function that solves this puzzle based on the given constraints and formats.","solution":"import itertools def is_valid_grid(grid, n, target_sum): for row in grid: if sum(row) != target_sum: return False for col in zip(*grid): if sum(col) != target_sum: return False return True def puzzle_grid(n, R, C): numbers = list(range(1, n * n + 1)) all_permutations = itertools.permutations(numbers) if R != C: return \\"NO\\" for perm in all_permutations: grid = [list(perm[i * n:(i + 1) * n]) for i in range(n)] if is_valid_grid(grid, n, R): return \\"YES\\", grid return \\"NO\\" def solve(): n = int(input()) R, C = map(int, input().split()) result = puzzle_grid(n, R, C) if result == \\"NO\\": print(\\"NO\\") else: print(\\"YES\\") grid = result[1] for row in grid: print(\\" \\".join(map(str, row)))"},{"question":"David is playing a game where he has to collect coins in specific sequences to earn the maximum reward. The game board is a grid of size N x M, where each cell contains a certain number of coins. David can start collecting coins from any cell in the first row and can move to the adjacent cells in the row directly below. Specifically, from a cell (i, j), he can move to (i+1, j-1), (i+1, j), or (i+1, j+1), provided he stays within the bounds of the board. David wants to find the maximum number of coins he can collect if he starts from any cell in the first row and moves to the bottom row following the allowed movements. Example 1: Input: grid = [[1, 2, 3], [6, 5, 4], [7, 8, 9]] Output: 17 Explanation: David can start from cell (0,2) and move to (1,1), and then (2,2) to collect 3 + 5 + 9 = 17 coins. Example 2: Input: grid = [[1, 10, 6], [7, 8, 2], [3, 4, 9]] Output: 25 Explanation: David can start from cell (0,1) and move to (1,1), and then (2,2) to collect 10 + 8 + 9 = 27 coins. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function `maxCoins` that takes an 2D array `grid`, `n` (number of rows), and `m` (number of columns), and returns the maximum number of coins David can collect by the time he reaches the last row. The driver code takes care of the printing. Expected Time Complexity: O(N * M). Expected Auxiliary Space: O(M). Constraints: 1 ≤ N, M ≤ 100 1 ≤ grid[i][j] ≤ 1000","solution":"def maxCoins(grid, n, m): Function to calculate the maximum number of coins David can collect from the first row to the last row. Args: grid : list[list[int]] : The grid of coins. n : int : Number of rows. m : int : Number of columns. Returns: int : Maximum number of coins that can be collected. # Dynamic programming table to store the maximum coins up to each cell. dp = [[0] * m for _ in range(n)] # Initialize the first row of the dp table with the values from the grid\'s first row. for j in range(m): dp[0][j] = grid[0][j] # Fill the dp table with the maximum coins collected up to each cell. for i in range(1, n): for j in range(m): # Coins collected if coming from the cell directly above. dp[i][j] = dp[i-1][j] if j > 0: # Coins collected if coming from the cell diagonally left above. dp[i][j] = max(dp[i][j], dp[i-1][j-1]) if j < m - 1: # Coins collected if coming from the cell diagonally right above. dp[i][j] = max(dp[i][j], dp[i-1][j+1]) # Add the coins of the current cell. dp[i][j] += grid[i][j] # The maximum coins collected will be the maximum value in the last row of dp table. return max(dp[n-1])"},{"question":"Haru and the Frogs Haru is training some frogs for a jumping contest. The contest will take place on a long straight line, where the frogs can only jump along straight coordinates. Each frog can jump forward by X meters or backward by Y meters from its current position. Haru wants to find out if a frog starting from coordinate 0 can reach coordinate Z. -----Constraints----- - 1 ≤ X, Y, Z ≤ 1000 - X, Y, and Z are integers. -----Input----- Input is given from Standard Input in the following format: X Y Z -----Output----- Print \\"Yes\\" if the frog can reach coordinate Z, and \\"No\\" otherwise. -----Sample Input----- 3 2 1 -----Sample Output----- Yes Explanation: The frog can start from 0, jump forward 3 meters to reach coordinate 3, then jump backward 2 meters to reach coordinate 1. -----Sample Input----- 2 4 7 -----Sample Output----- No Explanation: The frog cannot reach coordinate 7 with any combination of jumps.","solution":"def can_reach_coordinate(X, Y, Z): Determines if a frog can reach coordinate Z starting from position 0 with jumps of X meters forward or Y meters backward. from math import gcd # Finding the greatest common divisor of X and Y because the achievable # positions are multiples of the gcd. common_divisor = gcd(X, Y) # Z must be a multiple of the gcd of X and Y to be reachable. if Z % common_divisor == 0: return \\"Yes\\" else: return \\"No\\" # Example usage: # print(can_reach_coordinate(3, 2, 1)) # Should print \\"Yes\\" # print(can_reach_coordinate(2, 4, 7)) # Should print \\"No\\""},{"question":"You are organizing a marathon race along a straight path, and you need to provide water stations for the runners. The path is 100000 meters long, and you have some prospective water station locations that you can choose from. Each location specifies the range of meters along the path it can cover. You need to select a set of these locations such that: - Every meter of the path from 1 to 100000 has at least one water station covering it. - You use the least number of water stations possible. If it is possible to cover the entire path with the given stations, determine the minimum number of stations required. If it is not possible, return \\"IMPOSSIBLE\\". -----Input----- The first line of input contains an integer N, the number of prospective water station locations. Then follow N lines, one for each location, each containing two integers A and B where A is the starting meter and B is the ending meter that the water station can cover. 1 leq A leq B leq 100000. You may assume that 1 leq N leq 500. -----Output----- Output one line containing the minimum number of water stations needed, or “IMPOSSIBLE” if it is not possible to cover the entire path. -----Examples----- Sample Input 1: 3 1 30000 25000 70000 65000 100000 Sample Output 1: 3 Sample Input 2: 4 1 20000 10000 40000 30000 70000 60000 100000 Sample Output 2: 4 Sample Input 3: 3 1 50000 45000 75000 70000 100000 Sample Output 3: 3 Sample Input 4: 2 1 40000 60000 100000 Sample Output 4: IMPOSSIBLE","solution":"def min_stations_to_cover_path(stations): Determines the minimum number of water stations required to cover the entire path from 1 to 100,000 meters. If it\'s not possible, returns \\"IMPOSSIBLE\\". stations.sort(key=lambda x: (x[0], -x[1])) target = 100000 current_end = 0 max_reach = 0 index = 0 count = 0 n = len(stations) while current_end < target: while index < n and stations[index][0] <= current_end + 1: max_reach = max(max_reach, stations[index][1]) index += 1 if max_reach == current_end: return \\"IMPOSSIBLE\\" current_end = max_reach count += 1 if current_end >= target: return count return \\"IMPOSSIBLE\\""},{"question":"Write a function that takes a list of strings and a target string, and returns the number of times the target string appears as a substring within the list of strings. The function should be case-insensitive. For example, the list `[\\"hello\\", \\"world\\", \\"HELLO\\", \\"wORLD\\"]` and target `\\"hello\\"` should return `2` because \\"hello\\" appears as a substring in \\"hello\\" and \\"HELLO\\". To clarify, the function should be able to handle different cases and only count the instances where the substring matches regardless of the letter case.","solution":"def count_substrings(strings, target): Returns the number of times the target string appears as a substring within the list of strings, case-insensitive. target_lower = target.lower() count = 0 for string in strings: if target_lower in string.lower(): count += 1 return count"},{"question":"You are helping program an autonomous delivery robot navigate a rectangular grid representing a Mars colony. Each cell in the grid can either be an empty space the robot can move through or an obstacle it cannot cross. The robot starts at a specified cell and needs to reach another specified cell, and it can move one cell at a time up, down, left, or right. Your task is to determine if there is a possible path from the starting cell to the destination cell. The Mars colony grid is represented by a matrix where: - `0` represents an empty space. - `1` represents an obstacle. - The robot\'s starting position and the destination are guaranteed to be empty spaces. -----Input----- The input begins with two integers, n ; m, representing the dimensions of the grid (1 le n, m le 500). This is followed by n lines of m integers each (0 or 1), representing the grid. The next line contains four integers: x_1 ; y_1 ; x_2 ; y_2, where (x_1, y_1) is the starting position and (x_2, y_2) is the target position (0 le x_1, x_2 < n and 0 le y_1, y_2 < m). -----Output----- Output \\"YES\\" if there is a path from the starting position to the target position; otherwise, output \\"NO\\". -----Example----- Sample Input 1: 4 5 0 0 1 0 0 0 1 0 1 0 0 1 1 0 0 0 0 0 0 0 0 0 3 4 Sample Output 1: YES Sample Input 2: 3 3 0 1 0 1 1 0 0 0 0 0 0 2 2 Sample Output 2: NO","solution":"from collections import deque def is_path_possible(n, m, grid, start, end): Determines if there is a path for robot to navigate from start to end in the grid. Parameters: - n (int): Number of rows in grid. - m (int): Number of columns in grid. - grid (list of list of int): Grid representation. 0 for empty spaces, 1 for obstacles. - start (tuple): Starting cell (x1, y1). - end (tuple): Destination cell (x2, y2). Returns: - str: \\"YES\\" if path exists, \\"NO\\" otherwise. # Directions for up, down, left, right movements directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == 0 # BFS to find path from start to end queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"Given an array of integers `arr` and an integer `k`, write a function to check if elements of the array can be partitioned into `k` non-empty subsets with equal sum. Example 1: Input: arr = [4, 3, 2, 3, 5, 2, 1], k = 4 Output: True Explanation: It is possible to divide the array into 4 subsets (5), (1, 4), (2, 3), and (2, 3) which all have equal sums of 5. Example 2: Input: arr = [1, 2, 3, 4], k = 3 Output: False Explanation: It is not possible to divide the array into 3 subsets with equal sum. Your task: This is a function problem. The input is already taken care of by the driver code. You need to implement a function `canPartitionKSubsets(arr, k)` that takes an array (arr) and an integer (k) and returns a boolean whether the array can be partitioned into `k` non-empty subsets with equal sum. Expected Time Complexity: O(2^n) Expected Auxiliary Space: O(n) Constraints: - 1 ≤ arr.length ≤ 16 - 1 ≤ arr[i] ≤ 10^4 - 1 ≤ k ≤ arr.length","solution":"def canPartitionKSubsets(arr, k): Determines if array can be partitioned into k subsets with equal sum. total_sum = sum(arr) if total_sum % k != 0: return False target = total_sum // k arr.sort(reverse=True) buckets = [0] * k def backtrack(index): if index == len(arr): return all(b == target for b in buckets) for i in range(k): if buckets[i] + arr[index] <= target: buckets[i] += arr[index] if backtrack(index + 1): return True buckets[i] -= arr[index] if buckets[i] == 0: break return False return backtrack(0)"},{"question":"We need a function that receives a string and determines whether it can be rearranged to form a palindrome. A palindrome is a word that reads the same forwards and backwards, such as \\"level\\" or \\"radar\\". When a string can be rearranged to form a palindrome, it must satisfy one of the following conditions: - Every character appears an even number of times. - One character appears an odd number of times, and all other characters appear an even number of times. The function `can_form_palindrome(input_string)` should output: 1. A boolean indicating whether the input string can be rearranged to form a palindrome. 2. If it can be rearranged into a palindrome, the function should also output one possible palindrome that can be formed by rearranging the input string. If there is more than one possible palindrome, any one of them is acceptable as output. If it cannot be rearranged into a palindrome, the function should output `None` for the second element. The function should ensure that it handles strings consisting of alphabetic characters and whitespace, and it must ignore the case of characters. # Example ```python input_string = \\"Tact Coa\\" can_form_palindrome(input_string) --------> (True, \\"tacocat\\") input_string = \\"Hello\\" can_form_palindrome(input_string) --------> (False, None) ``` In the first example, the input can be rearranged to form \\"tacocat\\" which is a palindrome. The function returns `True` and one valid palindrome. In the second example, the input cannot be rearranged into a palindrome, so the function returns `False` and `None`.","solution":"def can_form_palindrome(input_string): from collections import Counter # Normalize string: remove spaces and convert to lowercase sanitized_string = \'\'.join(input_string.split()).lower() # Count character frequencies char_count = Counter(sanitized_string) # Count characters with odd frequencies odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # More than one odd character count means it cannot form a palindrome if odd_count > 1: return (False, None) # Construct one possible palindrome left_half = [] middle_char = \\"\\" for char, count in char_count.items(): if count % 2 != 0: middle_char = char left_half.extend([char] * (count // 2)) # Join left half, middle character and reverse of left half to form the palindrome palindrome = \'\'.join(left_half) + middle_char + \'\'.join(left_half[::-1]) return (True, palindrome)"},{"question":"Write a program to find and print the least common multiple (LCM) of pairs of integers. ------ Input ------ An integer t, 1 ≤ t ≤ 20, denoting the number of test cases, followed by t lines, each containing two integers a and b, 1 ≤ a, b ≤ 100. ------ Output ------ For each pair of integers (a, b) provided in the input, display a line with the value of LCM(a, b). ------ Sample Input 1 ------ 3 5 10 7 3 9 6 ------ Sample Output 1 ------ 10 21 18","solution":"from math import gcd def lcm(a, b): Returns the least common multiple (LCM) of a and b. return abs(a * b) // gcd(a, b) def find_lcm_of_pairs(test_cases): Finds and prints the LCM for each pair of integers in the given test cases. results = [] for a, b in test_cases: results.append(lcm(a, b)) return results"},{"question":"You have a list of integers and a target sum. Write a function that determines if any two distinct numbers in the list add up to the target sum. If such a pair exists, return the pair as a tuple (in any order). If there are multiple pairs, return any one of them. If no such pair exists, return None. Make sure the solution is efficient. Function signature: `def find_pair_with_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]:` Example: - Input: nums = [2, 7, 11, 15], target = 9 - Output: (2, 7) - Input: nums = [1, 2, 3, 4, 5], target = 10 - Output: None Constraints: - All elements in the list are unique. - The list can have up to 10^5 elements. - The integers can be positive, negative, or zero. - Each input consists of a list of integers and an integer target.","solution":"from typing import List, Tuple, Optional def find_pair_with_sum(nums: List[int], target: int) -> Optional[Tuple[int, int]]: Returns a tuple of two numbers from nums that add up to target sum. If no such pair exists, return None. seen = set() for num in nums: complement = target - num if complement in seen: return (num, complement) seen.add(num) return None"},{"question":"You are given a grid of size N x M where each cell contains an integer. You need to find the maximum sum of a subgrid of size A x B. Input Format The first line contains two integers N and M (the size of the grid). The next N lines contain M integers each, representing the grid. The following line contains two integers A and B (the size of the subgrid). Output Format Output the maximum sum of a subgrid of size A x B. Constraints 1 <= N, M <= 100 1 <= A <= N 1 <= B <= M -1000 <= grid[i][j] <= 1000 Sample Input 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2 3 Sample Output 99 Explanation The subgrid with the maximum sum of size 2 x 3 is: 7 8 9 12 13 14 The sum of this subgrid is 7 + 8 + 9 + 12 + 13 + 14 = 63","solution":"def max_sum_subgrid(grid, N, M, A, B): Finds the maximum sum of a subgrid of size A x B in an N x M grid. max_sum = float(\'-inf\') # Iterate over starting points of subgrids for i in range(N - A + 1): for j in range(M - B + 1): # Calculate the sum of the subgrid starting at (i, j) subgrid_sum = 0 for k in range(A): for l in range(B): subgrid_sum += grid[i + k][j + l] # Update max_sum if we found a larger sum if subgrid_sum > max_sum: max_sum = subgrid_sum return max_sum # Example usage: # grid = [ # [1, 2, 3, 4, 5], # [6, 7, 8, 9, 10], # [11, 12, 13, 14, 15], # [16, 17, 18, 19, 20] # ] # N, M = 4, 5 # A, B = 2, 3 # print(max_sum_subgrid(grid, N, M, A, B)) # Should output 99"},{"question":"You are given a series of operations to perform on an initially empty set of integers. The operations are of two types: 1. Add a number x to the set. 2. Given a number y, find the largest number in the set that is smaller than or equal to y. If there is no such number in the set, return -1. Input: The first line contains an integer n, the number of operations. Each of the following n lines contains an operation in the format \\"1 x\\" or \\"2 y\\", where: - \\"1 x\\" means add number x to the set. - \\"2 y\\" means find the largest number in the set that is ≤ y. Output: For each operation of the second type, print the result on a new line. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ x, y ≤ 10^9 SAMPLE INPUT 6 1 10 1 20 2 15 1 25 2 20 2 5 SAMPLE OUTPUT 10 20 -1","solution":"import bisect def process_operations(n, operations): sorted_set = [] results = [] for operation in operations: op_type, value = map(int, operation.split()) if op_type == 1: # Add number x to the set if value not in sorted_set: bisect.insort(sorted_set, value) elif op_type == 2: # Find largest number in set ≤ y pos = bisect.bisect_right(sorted_set, value) if pos == 0: results.append(-1) else: results.append(sorted_set[pos - 1]) return results # Example use operations = [ \\"1 10\\", \\"1 20\\", \\"2 15\\", \\"1 25\\", \\"2 20\\", \\"2 5\\" ] print(process_operations(6, operations))"},{"question":"Given a list of integers, return a list with each number squared and sorted in non-decreasing order. Example 1: Input: nums = [-4, -1, 0, 3, 10] Output: [0, 1, 9, 16, 100] Explanation: After squaring, the list becomes [16, 1, 0, 9, 100], which is then sorted to [0, 1, 9, 16, 100]. Example 2: Input: nums = [-7, -3, 2, 3, 11] Output: [4, 9, 9, 49, 121] Explanation: After squaring, the list becomes [49, 9, 4, 9, 121], which is then sorted to [4, 9, 9, 49, 121]. Your task: Your task is to complete the function sortedSquares() which takes a single list of integers as input and returns a new list with the squares of each number sorted in non-decreasing order. You need not take any input or print anything. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 <= nums.length <= 10^4 -10^4 <= nums[i] <= 10^4","solution":"def sortedSquares(nums): Given a list of integers, return a list with each number squared and sorted in non-decreasing order. :param nums: List[int] :return: List[int] squared_nums = [x ** 2 for x in nums] return sorted(squared_nums)"},{"question":"A spaceship is traveling from planet Earth to planet Alpha Centauri. As part of its journey, it must pass by several checkpoints, identified by their distances from Earth. Each checkpoint is represented by an integer k and the spaceship can stop at a particular checkpoint if the total flight distance to that checkpoint is divisible by k. However, the spaceship has a specific fuel capacity f and can only travel a maximum distance of f without refueling. Write a program to determine the closest checkpoint it can reach within its fuel capacity. -----Input----- The input consists of two lines: 1. The first line contains two integers n and f (1 ≤ n, f ≤ 10^3) - where n is the number of checkpoints and f is the fuel capacity. 2. The second line contains n integers, d1, d2, ..., dn (1 ≤ di ≤ 10^4), representing the distances of the checkpoints from Earth. -----Output----- Print the distance of the closest checkpoint that the spaceship can reach without needing to refuel, or -1 if no such checkpoint exists. -----Examples----- Input 5 100 150 300 500 650 700 Output -1 Input 4 600 100 200 300 500 Output 100 -----Note----- In the first sample testcase, all checkpoints are beyond the fuel capacity of 100, so the output is -1. In the second sample testcase, the closest checkpoint within the fuel capacity of 600 is at a distance of 100.","solution":"def closest_checkpoint_within_fuel(n, f, distances): Returns the distance of the closest checkpoint within the fuel capacity. Args: n : int : number of checkpoints f : int : fuel capacity distances : list of int : distances of the checkpoints from Earth Returns: int : distance of the closest checkpoint or -1 if no such checkpoint exists # Filter out distances that are within the fuel capacity within_fuel_distances = [d for d in distances if d <= f] # If there are no such distances, return -1 if not within_fuel_distances: return -1 # Return the minimum of the filtered distances return min(within_fuel_distances) # Example usage: # Read input n, f = 5, 100 distances = [150, 300, 500, 650, 700] # Find the closest checkpoint that can be reached within fuel capacity result = closest_checkpoint_within_fuel(n, f, distances) print(result) # Should print -1"},{"question":"Your task is to implement a software version management system that tracks versions of a software and allows check in, check out, and restoration to previous versions. The system supports the following commands: - `commit(message)` - Save the current state of the software with a commit message. - `checkout(version)` - Revert the software to a specific version. - `list()` - List all versions and their commit messages in chronological order. - `log()` - Print the commit history in reverse chronological order. The initial state is an empty version \\"v0\\" with no commit message. Implement the class `VersionControl` that supports these commands. -----Input----- Each line of input contains one of the following commands: - `commit <message>` - Save the current state with a commit message. - `checkout <version>` - Revert to a specific version. - `list` - List all versions and their commit messages. - `log` - Print the commit history in reverse chronological order. - `exit` - Terminate the commands. The command `commit` is followed by a string without spaces. The command `checkout` is followed by a version identifier like \\"v1\\", \\"v2\\", and so on. -----Output----- For the command `list`, print all versions and their commit messages in the format: ``` v0 - Initial version v1 - <message1> v2 - <message2> ... ``` For the command `log`, print all commit messages in the reverse chronological order: ``` v<latest_version> - <latest_message> ... v1 - <message1> v0 - Initial version ``` -----Examples----- Input ``` commit First commit Second list log checkout v1 list log commit Third list log exit ``` Output ``` v0 - Initial version v1 - First v2 - Second v2 - Second v1 - First v0 - Initial version v0 - Initial version v1 - First v1 - First v0 - Initial version v0 - Initial version v1 - First v2 - Third v2 - Third v1 - First v0 - Initial version ``` -----Note----- After command `commit First`, the system saves the state as version \\"v1\\" with message \\"First\\". After `commit Second`, it saves as version \\"v2\\" with message \\"Second\\". The `list` command prints all commits in chronological order, and `log` prints them in reverse order. If you `checkout` to \\"v1\\" and commit again, the subsequent versions will be based on \\"v1\\" as if \\"v2\\" never existed, resulting in \\"v2\\" with the new commit message.","solution":"class VersionControl: def __init__(self): self.versions = [{\\"version\\": \\"v0\\", \\"message\\": \\"Initial version\\"}] self.current_version = 0 def commit(self, message): self.current_version += 1 new_version = {\\"version\\": f\\"v{self.current_version}\\", \\"message\\": message} self.versions = self.versions[:self.current_version] self.versions.append(new_version) def checkout(self, version): for i, v in enumerate(self.versions): if v[\'version\'] == version: self.current_version = i self.versions = self.versions[:i+1] return raise ValueError(\\"Version not found\\") def list_versions(self): return \'n\'.join([f\\"{v[\'version\']} - {v[\'message\']}\\" for v in self.versions]) def log_versions(self): return \'n\'.join([f\\"{v[\'version\']} - {v[\'message\']}\\" for v in reversed(self.versions)])"},{"question":"\\"Divide and Product!\\" Alex is working on exploring the mathematical properties of numbers. Today, he stumbled upon a peculiar operation and needs your help to understand it better. Here\'s the task: Given two integers A and B, you need to determine the integer result of the division A // B and the product A * B. If the product is greater than or equal to the division result, print \\"SUCCESS\\", otherwise print \\"FAILURE\\". Your mission, should you choose to accept it, is to help Alex by writing a program that performs this operation for multiple test cases. -----Input----- The first line contains an integer T, the number of test cases. Each test case contains two integers, A and B. -----Output----- Output \\"SUCCESS\\" if the product of the two numbers is greater than or equal to the integer division result for each test case, otherwise output \\"FAILURE\\". -----Constraints----- 1 = T = 20 1 <= A <= 10^18 1 <= B<= 10^9 -----Subtasks----- Subtask #1 : (20 points) 1 = T = 20 1 <= A <= 100 1 <= B <= 100 Subtask 2 : (80 points) 1 = T = 20 1 <= A <= 10^18 1 <= B <= 10^9 -----Example----- Input: 2 8 4 10 2 Output: SUCCESS SUCCESS","solution":"def divide_and_product(T, test_cases): results = [] for A, B in test_cases: division_result = A // B product_result = A * B if product_result >= division_result: results.append(\\"SUCCESS\\") else: results.append(\\"FAILURE\\") return results # Example usage: if __name__ == \\"__main__\\": test_cases = [ (8, 4), (10, 2) ] T = len(test_cases) results = divide_and_product(T, test_cases) for result in results: print(result)"},{"question":"Description: A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Your task is to implement a function to check if a given string is a palindrome. The function should be case-insensitive and should ignore spaces and punctuation. If the input string is a palindrome, return `True`; otherwise, return `False`. Examples: Input: `\\"Able, was I ere I saw Elba\\"` --> Output: `True` Input: `\\"Madam, in Eden, I\'m Adam\\"` --> Output: `True` Input: `\\"Hello, World!\\"` --> Output: `False`","solution":"import re def is_palindrome(s: str) -> bool: Checks if the input string is a palindrome. The check is case-insensitive and ignores spaces and punctuation. Args: s (str): The input string. Returns: bool: True if the input string is a palindrome, False otherwise. # Remove non-alphanumeric characters and convert to lowercase cleaned = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Check if cleaned string is equal to its reverse return cleaned == cleaned[::-1]"},{"question":"Consider a grid with N rows and M columns. Each cell in the grid contains an integer. Let the value in the cell at row i and column j be denoted by a_{ij}. You are given Q queries, each consisting of four integers r1, c1, r2, c2, which represent the top-left and bottom-right coordinates of a subgrid. For each query, you need to find the maximum value within the specified subgrid. ------ Input ------ The first line of the input contains two integers N and M separated by a space. The next N lines contain M space-separated integers each, representing the grid. The following line contains a single integer Q, denoting the number of queries. The next Q lines each contain four integers r1, c1, r2, c2. ------ Output ------ For each query, print a single integer representing the maximum value in the specified subgrid. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ Q ≤ 100,000 −10^9 ≤ a_{ij} ≤ 10^9 1 ≤ r1 ≤ r2 ≤ N 1 ≤ c1 ≤ c2 ≤ M ------ Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 2 1 1 2 2 2 2 3 3 ------ Sample Output 1 ------ 5 9","solution":"def max_in_subgrid(grid, queries): Returns the maximum value within the specified subgrid for each query. Args: grid: List[List[int]] - 2D List representing the grid. queries: List[Tuple[int, int, int, int]] - List of tuples representing the queries. Returns: List[int] - List of maximum values for each query. results = [] for r1, c1, r2, c2 in queries: max_val = grid[r1-1][c1-1] for i in range(r1-1, r2): for j in range(c1-1, c2): if grid[i][j] > max_val: max_val = grid[i][j] results.append(max_val) return results def solve(n, m, grid, q, queries): return max_in_subgrid(grid, queries)"},{"question":"Polycarp likes prime numbers. He has a number n and he wants to find out how many prime numbers exist up to and including n. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The task is to write a function that takes an integer n as input and returns the count of prime numbers less than or equal to n. For example, the prime numbers less than or equal to 10 are 2, 3, 5, and 7, so the function should return 4 for n = 10. Input The input contains a single integer n (1 ≤ n ≤ 10^6). Output Print a single integer which is the number of prime numbers less than or equal to n. Examples Input 10 Output 4 Input 30 Output 10 Input 100 Output 25 Note: Your algorithm should be efficient in order to handle the upper limit of n within a reasonable time.","solution":"def count_primes(n): Returns the number of prime numbers less than or equal to n. if n < 2: return 0 is_prime = [True] * (n + 1) is_prime[0] = is_prime[1] = False for i in range(2, int(n**0.5) + 1): if is_prime[i]: for j in range(i * i, n + 1, i): is_prime[j] = False return sum(is_prime)"},{"question":"Given a positive integer `n`, determine the total number of distinct pairs (i, j) where 1 ≤ i < j ≤ n and (i + j) is even. Input The input consists of a single integer `n` (1 ≤ n ≤ 10^6). Output Output a single integer - the total number of distinct pairs (i, j) where 1 ≤ i < j ≤ n and (i + j) is even. Example Input 5 Output 4 Explanation The pairs (i, j) where 1 ≤ i < j ≤ 5 and (i + j) is even are: (1, 3), (1, 5), (2, 4), and (3, 5). Hence, the output is 4.","solution":"def count_distinct_pairs(n): Returns the total number of distinct pairs (i, j) where 1 ≤ i < j ≤ n and (i + j) is even. if n <= 1: return 0 # Calculate the number of even and odd numbers from 1 to n even_count = n // 2 odd_count = (n + 1) // 2 # The number of pairs (i, j) where (i + j) is even is the sum of pairs of even numbers and pairs of odd numbers even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 return even_pairs + odd_pairs"},{"question":"In a fictional country, there are n towns connected by m one-way roads. Each road has a cost associated with traveling through it. You are to determine the cheapest way to travel from the capital, town 1, to all other towns in the country. However, due to constraints in the infrastructure, not all towns can be directly reached from the capital. In such cases, the travel cost should be considered infinite for that town. Write a program that finds the minimum travel cost from the capital to all other towns, or determines that it is impossible to reach a town. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of towns and the number of roads, respectively. Each of the next m lines contains three integers u, v, and c (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000) — indicating there is a one-way road from town u to town v of cost c. Output Print n-1 integers. The i-th integer should be the minimum cost to travel from town 1 to town i+1. If town i+1 cannot be reached from the capital, print -1 for that town. Examples Input 4 5 1 2 10 1 3 20 2 3 5 2 4 1 3 4 1 Output 10 15 11 Input 3 2 1 2 5 3 1 10 Output 5 -1 Note In the first example, the minimum travel costs from the capital (town 1) to the other towns are calculated as follows: - To town 2: via road (1, 2) with cost 10. - To town 3: via road (1, 2) and then (2, 3) with a total cost of 10 + 5 = 15. - To town 4: via road (1, 2) and then (2, 4) with total cost of 10 + 1 = 11. In the second example, town 3 cannot be reached directly or indirectly from the capital (town 1), so the output is -1 for town 3.","solution":"import heapq def min_travel_cost(n, m, roads): graph = {i: [] for i in range(1, n + 1)} for u, v, c in roads: graph[u].append((v, c)) def dijkstra(start): min_cost = {i: float(\'inf\') for i in range(1, n + 1)} min_cost[start] = 0 priority_queue = [(0, start)] while priority_queue: current_cost, u = heapq.heappop(priority_queue) if current_cost > min_cost[u]: continue for v, c in graph[u]: cost = current_cost + c if cost < min_cost[v]: min_cost[v] = cost heapq.heappush(priority_queue, (cost, v)) return min_cost min_costs = dijkstra(1) result = [] for i in range(2, n+1): if min_costs[i] == float(\'inf\'): result.append(-1) else: result.append(min_costs[i]) return result"},{"question":"Rahul is a software developer who loves programming competitions. He has recently participated in a contest where he encountered a problem related to arrays. The problem statement is as follows: You are given an array `A` consisting of `N` integers. You need to perform a series of operations on the array. In each operation, you select any two elements `Ai` and `Aj` (1 ≤ i, j ≤ N, i ≠ j) and replace both elements with the sum of the two elements. You have to determine the minimum possible value of the array after performing the operations. The first line of input contains an integer `N`, denoting the number of elements in the array. The second line contains `N` integers, representing the elements of array `A`. 1 ≤ N ≤ 100000 1 ≤ Ai ≤ 1000 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 6 Explanation: - You can sum the first two elements to get [3, 3]. - Then sum the remaining elements to get [6]. Thus, the minimum possible value of the array is 6.","solution":"def minimum_possible_value(arr): Given an array of integers, perform operations to compute the minimum possible value by summing pairs until one element is left. Parameters: arr (list of int): The input array. Returns: int: The minimum possible value of array after performing the operations. return sum(arr)"},{"question":"You are given a sequence of N integers, a[1], a[2], ..., a[N]. Your task is to rearrange the sequence such that the absolute difference between any two adjacent numbers is minimized. Input: First line of the input contains a single integer T denoting the number of test cases. For each test case, the first line contains a single integer denoting N, the number of elements in the array a. The next line contains N space-separated integers denoting the array a. Output: Print T lines, each containing N space-separated integers denoting the rearranged array with minimized adjacent differences. If there are multiple solutions, print any. Constraints: 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ A[i] ≤ 10^5 Example: Input: 1 5 3 1 2 4 5 Output: 1 2 3 4 5 Explanation: Example case 1. One possible rearrangement of array [3, 1, 2, 4, 5] to minimize adjacent differences is [1, 2, 3, 4, 5], where the absolute difference between each adjacent pair is 1. There can be other valid rearrangements too, like [2, 3, 4, 5, 1].","solution":"def minimize_adjacent_difference(T, test_cases): Rearrange the sequence of each test case to minimize the absolute difference between any two adjacent numbers. results = [] for t in range(T): N = test_cases[t][0] array = test_cases[t][1] array.sort() # Sort the array to minimize the adjacent differences results.append(array) return results"},{"question":"You are given two integers `n` and `m`. Your task is to create an `n x m` matrix where each cell contains unique integers from 1 to `n*m` and the rows and columns are sorted in increasing order. Write a function `generateSortedMatrix(n, m)` that returns the desired matrix. Example 1: Input: n = 3, m = 3 Output: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Explanation: Each row and column is sorted in increasing order. Example 2: Input: n = 2, m = 4 Output: [ [1, 2, 3, 4], [5, 6, 7, 8] ] Example 3: Input: n = 1, m = 5 Output: [ [1, 2, 3, 4, 5] ] Example 4: Input: n = 4, m = 1 Output: [ [1], [2], [3], [4] ] Constraints: 1 <= n, m <= 100","solution":"def generateSortedMatrix(n, m): Generates an n x m matrix where each cell contains unique integers from 1 to n*m and the rows and columns are sorted in increasing order. matrix = [] current = 1 for i in range(n): row = [] for j in range(m): row.append(current) current += 1 matrix.append(row) return matrix"},{"question":"In a prestigious coding competition, each participant receives scores for their n solved problems. These scores are recorded in an array `scores` of length `n`. The problem is to calculate the minimum number of problems a participant needs to solve to achieve a cumulative score of at least M. Write a function `min_problems_to_solve(n: int, M: int, scores: List[int]) -> int` that takes the following input: 1. `n` (1 ≤ n ≤ 10^5): The number of problems solved. 2. `M` (1 ≤ M ≤ 10^9): The target score. 3. `scores` (1 ≤ `scores[i]` ≤ 10^4 for each 0 ≤ i < n): List of scores for each problem. Return the minimum number of problems needed to be included to reach or exceed the target score M. If it is not possible to reach the target score, return `-1`. # Example Example 1 Input: ``` n = 5 M = 15 scores = [5, 3, 9, 7, 2] ``` Output: ``` 2 ``` Explanation: We can achieve a score of at least 15 by solving the problems with scores 9 and 7. Example 2 Input: ``` n = 4 M = 10 scores = [2, 2, 2, 2] ``` Output: ``` -1 ``` Explanation: Even if the participant solves all problems, the total score is 8, which is less than 10. # Constraints 1. The input values are all integers. 2. Ensure that your solution is efficient given the large possible input size.","solution":"from typing import List def min_problems_to_solve(n: int, M: int, scores: List[int]) -> int: Returns the minimum number of problems needed to achieve at least score M. # Sort the scores in descending order scores.sort(reverse=True) current_score = 0 for i, score in enumerate(scores): current_score += score if current_score >= M: return i + 1 # Return the number of problems solved return -1 # If we cannot reach the score M with all problems"},{"question":"------Read problems statements in Hindi, Mandarin chinese , Russian and Vietnamese as well. ------ Rohit has a large wooden board and he wants to cut it into smaller identical pieces for his upcoming art project. The board has a dimension of L meters in length and W meters in width. He wants all the smaller pieces to be perfect squares of the maximum possible side length. You need to help Rohit determine the side length of the largest possible square piece that can be cut from the board, such that no material is wasted. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. Each test case contains two space-separated integers L and W. ------ Output ------ For each test case, print a single line containing one integer — the side length of the largest possible square piece. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ L, W ≤ 10^9 ------ Subtasks ------ Subtask #1 (40 points): 1 ≤ L, W ≤ 10^4 Subtask #2 (60 points): original constraints ----- Sample Input ----- 3 6 9 10 15 7 5 ----- Sample Output ----- 3 5 1 ----- Explanation ----- In the first test case, the largest possible square that can be cut has a side length of 3 meters, as 6 and 9 can both be divided by 3 without leaving any remainder. In the second test case, the largest possible square that can be cut has a side length of 5 meters, as 10 and 15 can both be divided by 5 without leaving any remainder. In the third test case, the largest possible square that can be cut has a side length of 1 meter, as 7 and 5 have no common divisors other than 1.","solution":"import math def largest_square_side_length(test_cases): results = [] for L, W in test_cases: side_length = math.gcd(L, W) results.append(side_length) return results # To use this function, call it with a list of tuples [(L1, W1), (L2, W2), ...] # Example usage: # test_cases = [(6, 9), (10, 15), (7, 5)] # print(largest_square_side_length(test_cases)) # Output: [3, 5, 1]"},{"question":"You are organizing a coding competition with n participants. Each participant is assigned a unique ID from 1 to n. The competition consists of m distinct problems that the participants must attempt to solve. For each problem, participants receive a non-negative score that represents their performance on that problem. At the end of the competition, the total score of each participant is calculated as the sum of their scores for all m problems. Your task is to determine the rank of a specific participant. Given the scores of all participants for each problem, you need to compute the total scores and then determine the rank of a specific participant based on their total score. The rank is determined by comparing the total scores of all participants; a higher total score implies a better rank. If two participants have the same total score, the one with the smaller ID gets the better rank. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines each contain m integers. The j-th integer in the i-th line represents the score of the i-th participant on the j-th problem. The last line contains a single integer p (1 ≤ p ≤ n) — the ID of the participant whose rank you need to determine. Output Output a single integer — the rank of the participant with ID p. Examples Input 5 3 10 20 30 40 50 60 70 80 90 10 50 20 15 25 35 3 Output 1 Input 4 2 10 30 20 40 30 50 15 35 2 Output 2 Input 3 3 10 10 10 20 20 20 30 30 30 1 Output 3","solution":"def participant_rank(n, m, scores, p): Determines the rank of a specific participant based on their total score. Parameters: n (int): Number of participants. m (int): Number of problems. scores (list of list of int): Scores of each participant for each problem. p (int): ID of the participant whose rank is to be determined. Returns: int: The rank of the participant with ID p. # Calculate the total score for each participant total_scores = [(i+1, sum(scores[i])) for i in range(n)] # Sort the participants first by total score in descending order # and then by ID in ascending order total_scores.sort(key=lambda x: (-x[1], x[0])) # Find the rank of participant with ID p for rank, (participant_id, _) in enumerate(total_scores, 1): if participant_id == p: return rank"},{"question":"You are given a string S containing lowercase Latin letters and a string P of the same length containing lowercase Latin letters and question marks. A question mark in P can be replaced by any lowercase Latin letter. Your task is to determine if the string P can be converted to match the string S. If possible, you need to find one such possible conversion of P and output it. If no conversion makes P match S, output \\"No\\". Input format The first line contains one integer t denoting the number of test cases in the input. The first line of each test case description contains the string S. The second line contains the string P. Output format For each test case, output either the modified P that matches S or \\"No\\" if no such modification is possible. Constraints 1 ≤ t ≤ 10 1 ≤ |S| = |P| ≤ 100 SAMPLE INPUT 2 abc a?c banana b?n?n? SAMPLE OUTPUT abc banana Explanation In the first test case, the question mark in P can be replaced with \'b\' to make it equal to S. In the second test case, replacing the question marks with \'a\' makes P equal to S.","solution":"def can_convert(s, p): Determine if string P can be converted to match string S by replacing question marks. Arguments: s -- the target string containing only lowercase Latin letters p -- the string containing lowercase Latin letters and question marks Returns: A string (converted P) if possible, otherwise \\"No\\". if len(s) != len(p): return \\"No\\" result = [] for i in range(len(s)): if p[i] == \'?\': result.append(s[i]) elif p[i] != s[i]: return \\"No\\" else: result.append(p[i]) return \'\'.join(result) def process_test_cases(test_cases): results = [] for s, p in test_cases: result = can_convert(s, p) results.append(result) return results"},{"question":"Challenge: Write a function that takes in an array of integers and a target integer. The function should return a boolean indicating whether there are two distinct elements in the array that add up to the target integer. Example: ``` hasPairWithSum([1, 2, 3, 9], 8); // should return false. hasPairWithSum([1, 2, 4, 4], 8); // should return true. hasPairWithSum([0, -1, 2, -3, 1], -2); // should return true. hasPairWithSum([3, 2, 4], 6); // should return true. hasPairWithSum([1, 2, 3, 4, 5], 10); // should return false. ``` Addendum: The function should handle arrays with both negative and positive integers, including zero. The solution should be optimized for performance, ideally with a time complexity better than O(n^2). If the array has less than two elements, return false. The elements in the array and the target integer can be any valid integers (negative, positive, or zero). Use the standard definition of pairs: Two indices i and j are distinct if i ≠ j.","solution":"def hasPairWithSum(arr, target): Returns True if there are two distinct elements in the array that add up to the target integer, False otherwise. # Create a set to store the complements of the elements we have seen. seen_complements = set() # Iterate through the array. for number in arr: # Check if the current number\'s complement has been seen before. if (target - number) in seen_complements: return True # Add the current number to the set of seen complements. seen_complements.add(number) # If no pair is found, return False. return False"},{"question":"There is a popular game played on a checkerboard consisting of n rows and m columns. Alice and Bob, who are good friends, take turns to place their colors (Alice uses \'A\' and Bob uses \'B\') on the checkerboard. Alice always goes first. She places her colors such that no two adjacent cells (vertically, horizontally, or diagonally) have the same color. The same rule applies to Bob. Please write a program to determine if Alice and Bob can fill the entire checkerboard without violating the rule. -----Input----- The input will contain a single integer t (1 ≤ t ≤ 100), the number of test cases. For each test case, two integers n and m (1 ≤ n, m ≤ 100) represent the dimensions of the checkerboard. -----Output----- For each test case, output \\"YES\\" or \\"NO\\" (without the quotes) indicating whether Alice and Bob can fill the checkerboard according to the rules. If YES, also provide one possible valid configuration of the checkerboard. -----Example----- Input 3 2 2 3 3 4 5 Output YES AB BA YES ABA BAB ABA YES ABABA BABAB ABABA BABAB","solution":"def can_fill_checkerboard(t, cases): results = [] for case in cases: n, m = case checkerboard = [] for i in range(n): row = [] for j in range(m): if (i + j) % 2 == 0: row.append(\'A\') else: row.append(\'B\') checkerboard.append(\'\'.join(row)) results.append((\\"YES\\", checkerboard)) return results def format_output(results): output = [] for result in results: output.append(result[0]) output.extend(result[1]) return \'n\'.join(output)"},{"question":"You are tasked with developing a hiking path for a national park. The park is represented on a grid of M rows and N columns with different terrains. Some terrains are easier to hike through (cost less energy), while others are more difficult (cost more energy). As a hiker, you start at the top-left corner of the grid (0,0) and aim to reach the bottom-right corner of the grid (M-1,N-1) with the minimum total energy spent. Each cell in the grid contains a non-negative integer representing the energy cost to hike through that cell. You can only move in two directions: right or down. You need to write a program to calculate the minimum total energy required to reach the bottom-right corner of the grid from the top-left corner. Input The input begins with a line containing two integers M and N. Then M lines follow, each containing N integers representing the energy costs of the cells in the grid. The input satisfies the following conditions: 1 ≤ M, N ≤ 100, 0 ≤ grid[i][j] ≤ 1000. Output Output a single integer indicating the minimum total energy required to reach the bottom-right corner of the grid. Example Input 3 3 1 3 1 1 5 1 4 2 1 Output 7 Explanation The minimum total energy path is 1 → 3 → 1 → 1 → 1, which gives a total energy cost of 7.","solution":"def min_energy_path(M, N, grid): Calculates the minimum total energy required to reach the bottom-right corner of the grid. Parameters: M (int): Number of rows of the grid. N (int): Number of columns of the grid. grid (list of list of int): The grid representing energy costs. Returns: int: The minimum total energy required. dp = [[0]*N for _ in range(M)] dp[0][0] = grid[0][0] # Initialize top row for j in range(1, N): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize left column for i in range(1, M): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[M - 1][N - 1] # Example usage: # M = 3 # N = 3 # grid = [ # [1, 3, 1], # [1, 5, 1], # [4, 2, 1] # ] # print(min_energy_path(M, N, grid)) # Output: 7"},{"question":"A well-known professional photographer has been hired to document various festivities in a town. The town\'s layout can be represented as an odd grid of size n times n, where 1 le n le 99 and n is always odd. The grid is numbered from 1 to n both horizontally and vertically, and each block in the grid is denoted by its coordinates (i, j) where 1 le i, j le n. The peculiarity of this town is that streets are either north-south or east-west, and form an interconnected grid. The photographer has a special request: he wants to start at a specific block (r, c) and then trace a tour through all blocks, ending up back where he started, without any block being visited more than once. You are required to determine if such a tour is possible and, if so, provide a sequence of moves (up, down, left, right) that would constitute such a tour. Note that the photographer can only move between adjacent blocks (i.e., no diagonal moves are allowed), and he must visit each block exactly once before returning to the starting point. -----Input----- The input consists of a single test case. The first line contains two integers r and c where 1 le r, c le n represent the starting coordinates. The second line contains the integer n, indicating the size of the grid. -----Output----- Display a sequence of moves that describes the possible tour if it exists. Otherwise, display impossible. -----Examples----- Sample Input: 3 3 5 Sample Output: UUDDLRLR Sample Input: 1 1 3 Sample Output: impossible","solution":"def is_hamiltonian_walk_possible(r, c, n): Checks if a Hamiltonian walk (visiting each grid cell exactly once and returning to the start point) is possible on an odd n x n grid starting from (r, c). # For the odd grid n x n when n > 2, there is no possibility to complete the tour return n == 1 def get_hamiltonian_path(r, c, n): Returns the Hamiltonian path if possible in the grid of size n x n starting from (r, c). if n == 1: return \\"\\" else: return \\"impossible\\" def hamiltonian_tour(r, c, n): if is_hamiltonian_walk_possible(r, c, n): return get_hamiltonian_path(r, c, n) else: return \\"impossible\\""},{"question":"In a binary tree, the nodes are colored either red or blue. Your task is to determine the color of the lowest common ancestor (LCA) of two given nodes. The LCA of two nodes p and q in a binary tree is defined as the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself). Each node of the tree contains two properties: its color (either \'red\' or \'blue\') and its value. Note that each node\'s value is unique within the tree. Function Description Complete the function lcaColor in the editor below. It should return a string representing the color of the LCA of two given nodes. lcaColor has the following parameter(s): - TreeNode root: the root node of the binary tree - int p: the value of the first node - int q: the value of the second node Returns - string: the color of the LCA of the two nodes (\'red\' or \'blue\') Input Format The input will be a binary tree represented with TreeNode class, and two integers representing the values of the nodes p and q. Constraints - The number of nodes in the tree is in the range [2, 1000]. - The values of the nodes are unique. - Each node is colored either \'red\' or \'blue\'. - Both p and q are present in the tree. Sample Input ``` Tree: red(1) / blue(2) red(3) / / blue(4) red(5) blue(6) blue(7) p = 4 q = 5 ``` Sample Output ``` red ``` Explanation The LCA of nodes 4 and 5 is node 2 which is colored \'blue\'. Hence the output is \'blue\'.","solution":"class TreeNode: def __init__(self, value=0, color=\'red\', left=None, right=None): self.value = value self.color = color self.left = left self.right = right def findLCA(root, p, q): Helper function to find the lowest common ancestor of two nodes in the binary tree. if root is None: return None if root.value == p or root.value == q: return root left_lca = findLCA(root.left, p, q) right_lca = findLCA(root.right, p, q) if left_lca and right_lca: return root return left_lca if left_lca else right_lca def lcaColor(root, p, q): Returns the color of the lowest common ancestor (LCA) of nodes with values p and q. lca = findLCA(root, p, q) return lca.color if lca else None"},{"question":"# Description: Write a function to verify if an amiable number exists within a given range. An amiable number is part of a pair of numbers where each number is the sum of the proper divisors of the other. Proper divisors of a number are those divisors excluding the number itself. For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55, and 110. The function should return the smallest pair of amiable numbers if they exist in the specified range [low, high] (inclusive). # Examples ``` find_amiable_numbers(200, 300) === (220, 284) find_amiable_numbers(1, 100) === (-1, -1) find_amiable_numbers(1000, 1300) === (1184, 1210) find_amiable_numbers(10, 50) === (-1, -1) ``` Where -1 indicates that no amiable numbers exist in the given range. # Function Signature ```python def find_amiable_numbers(low: int, high: int) -> (int, int): pass ```","solution":"def find_amiable_numbers(low: int, high: int) -> (int, int): def sum_of_proper_divisors(num: int) -> int: divisors_sum = 1 # 1 is a proper divisor for any number > 1 for i in range(2, int(num**0.5) + 1): if num % i == 0: divisors_sum += i if i != num // i: divisors_sum += num // i return divisors_sum for a in range(low, high + 1): b = sum_of_proper_divisors(a) if a != b and low <= b <= high: if sum_of_proper_divisors(b) == a: return (a, b) return (-1, -1)"},{"question":"In a yearbook signing event, there are N students standing in a circle, each with a yearbook. Each student wants every other student to sign their yearbook. You need to simulate this event and determine the number of unique signatures each student gets. Given N as the number of students, and an array A of size N where A[i] represents the number of signatures student i initially has, write a function to update the list with a count of the unique signatures each student received, after all students have signed yearbooks once. Example 1: Input: N = 3, A = [0, 0, 0] Output: [2, 2, 2] Explanation: Initially, each student has 0 signatures. After all students have signed each other\'s yearbooks, each student will have received signatures from the other 2 students. Example 2: Input: N = 4, A = [1, 1, 1, 1] Output: [4, 4, 4, 4] Explanation: Initially, each student has 1 signature. After everyone signs each other\'s yearbooks, each student will end up with signatures from the other 3 students plus their initial signature. Your Task: You don\'t need to read input or print anything. Complete the function updateYearbookSignatures() which takes the integer N and an array A as input parameters and returns the updated array with the number of unique signatures each student received. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1), only updates made in-place to array A. Constraints: 1 ≤ N ≤ 10^6 0 ≤ A[i] ≤ 10^9","solution":"def updateYearbookSignatures(N, A): Updates the list A with the number of unique signatures each student received. Parameters: N - number of students A - an array of size N where A[i] represents the number of signatures student i initially has Returns: Updated array A with the number of unique signatures each student received. for i in range(N): # Each student gets signatures from the other N-1 students A[i] += (N - 1) return A"},{"question":"Jade Delivery Service Jade City is known for its unique delivery service that operates in strict grid patterns. The city is divided into a grid, where delivery points are located at intersections. Each intersection is defined by a pair of non-negative integers (x, y). The distance between any two points can be calculated using the Manhattan Distance, which is the sum of the horizontal and vertical distances between the points. For example, the distance between points (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|. The delivery service currently has its headquarters at (0, 0) and needs to deliver a package to a recipient located at (A, B). However, to minimize time and energy, the service mandates that the package must be handed off to an intermediary point (X, Y) before reaching the final destination. The delivery route is thus from (0, 0) to (X, Y) and then from (X, Y) to (A, B). The goal is to find the optimal intermediary point (X, Y) that minimizes the total Manhattan Distance of the delivery route. If there are multiple points with the same distance, select the one closest to the recipient (A, B) in terms of Manhattan Distance. Input The input consists of a single line containing two integers A and B (0 ≤ A, B ≤ 100), separated by a space. Output Output the coordinates (X, Y) that minimize the total Manhattan Distance for the delivery route. If there are multiple such points, choose the one closest to (A, B) in terms of Manhattan Distance. Sample Input 5 3 Output for Sample Input 2 1 Explanation For the example input of (5, 3), several intermediary points can be considered. Among them: - (2, 1) results in a total distance of |0 - 2| + |0 - 1| + |2 - 5| + |1 - 3| = 7 - (3, 0) results in a total distance of |0 - 3| + |0 - 0| + |3 - 5| + |0 - 3| = 8 - Other points either result in higher total distances or are farther away from (5, 3). Therefore, (2, 1) is the optimal intermediary point.","solution":"def optimal_intermediary_point(A, B): Returns the optimal intermediary point (X, Y) that minimizes the total Manhattan Distance for the delivery route from (0, 0) to (A, B). # The optimal intermediary point (X, Y) can be chosen as (A//2, B//2) X = A // 2 Y = B // 2 return X, Y"},{"question":"GukiZ is now interested in palindromic sequences. Specifically, he wants to know how many k-length palindromic sequences of non-negative integers strictly less than p can be constructed such that their sum of elements is equal to s. A sequence is palindromic if it reads the same backward as forward. Your task is to help GukiZ find out the answer for this new challenge! Input First and the only line of input contains three integers k, p, s (1 ≤ k ≤ 1000, 0 ≤ p ≤ 1000, 0 ≤ s ≤ 10^5). Output Print a single integer: the number of k-length palindromic sequences where the sum of elements is equal to s. Examples Input 3 3 4 Output 2 Input 4 5 8 Output 5 Note In the first sample, the palindromic sequences are {1, 2, 1} and {2, 0, 2}. In the second sample, the palindromic sequences include {1, 3, 3, 1}, {2, 2, 2, 2}, and three others.","solution":"def count_palindromic_sequences(k, p, s): Returns the number of k-length palindromic sequences of non-negative integers strictly less than p that sum to s. def is_palindromic_sequence(seq): return seq == seq[::-1] def dfs(pos, current_sequence, current_sum): if pos == (k + 1) // 2: if is_palindromic_sequence(current_sequence) and current_sum == s: return 1 return 0 count = 0 for i in range(p): if pos <= k // 2: new_sequence = current_sequence[:] new_sequence[pos] = i if pos < k - pos - 1: new_sequence[k - pos - 1] = i count += dfs(pos + 1, new_sequence, current_sum + 2*i if pos < k - pos - 1 else current_sum + i) return count return dfs(0, [0] * k, 0)"},{"question":"A line of n train carriages is parked on a rail track. Each carriage has a unique number assigned to it from 1 to n. The rail track is very narrow so only one carriage can move at a time. Your task is to reorder them from their initial arrangement to a target arrangement given certain conditions about the moves that you can perform. You are allowed to perform the following moves: 1. Move the first carriage to the last position in the line. 2. Move the last carriage to the first position in the line. Given the initial and target arrangements of the carriages, determine the minimum number of moves required to achieve the target configuration from the initial configuration. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of carriages. The second line contains n space-separated integers representing the initial arrangement of the carriages. The third line contains n space-separated integers representing the target arrangement of the carriages. Output Output a single integer, the minimum number of moves required to transform the initial arrangement to the target arrangement. If it is impossible, output -1. Examples Input 5 1 2 3 4 5 3 4 5 1 2 Output 3 Input 4 4 1 2 3 1 2 3 4 Output 1 Input 3 1 2 3 3 2 1 Output -1 Note In the first sample, the sequence of moves is as follows: 1. Move the first carriage (1) to the last position -> [2, 3, 4, 5, 1] 2. Move the first carriage (2) to the last position -> [3, 4, 5, 1, 2] So the total number of moves required is 2. In the second sample, the sequence of moves is as follows: 1. Move the last carriage (3) to the first position -> [3, 4, 1, 2] So the total number of moves required is 1.","solution":"def min_moves_to_reorder(n, initial, target): Returns the minimum number of moves required to transform the initial arrangement to the target arrangement. If it is impossible, returns -1. # Check if the target is a rotation of the initial if sorted(initial) != sorted(target): return -1 # Try to find the rotation point for i in range(n): if initial[i:] + initial[:i] == target: return i if initial[-i:] + initial[:-i] == target: return i return -1"},{"question":"You are given a string of lowercase Latin letters. Your task is to determine if it\'s possible to rearrange the characters of the string to form a palindrome. A string can be rearranged to form a palindrome if, and only if, at most one character in the string has an odd count. Example 1: Input: \\"civic\\" Output: True Explanation: The string \\"civic\\" is already a palindrome. Example 2: Input: \\"ivicc\\" Output: True Explanation: We can rearrange \\"ivicc\\" as \\"civic\\" which is a palindrome. Example 3: Input: \\"hello\\" Output: False Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function canFormPalindrome() that takes a string (str) and returns True if it\'s possible to rearrange the characters to form a palindrome, otherwise returns False. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ |str| ≤ 10^5 str contains only lowercase Latin letters.","solution":"def canFormPalindrome(s): from collections import Counter # Count the frequency of each character char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count return odd_count <= 1"},{"question":"You are given two arrays of integers, `arr1` and `arr2`, of sizes `n` and `m` respectively. Your task is to determine if `arr2` is a subarray of `arr1`. A subarray is a contiguous segment of an array. Input: - The first line contains an integer `n`, the size of the first array `arr1`. - The second line contains `n` space-separated integers representing the elements of `arr1`. - The third line contains an integer `m`, the size of the second array `arr2`. - The fourth line contains `m` space-separated integers representing the elements of `arr2`. Output: - Print \\"YES\\" if `arr2` is a subarray of `arr1`, otherwise print \\"NO\\". Constraints: 1 ≤ n, m ≤ 5000 -10^5 ≤ arr1[i], arr2[i] ≤ 10^5 SAMPLE INPUT 7 1 2 3 4 5 6 7 3 3 4 5 SAMPLE OUTPUT YES","solution":"def is_subarray(arr1, arr2): Determines if arr2 is a subarray of arr1. Parameters: arr1 (list of int): The first array. arr2 (list of int): The second array. Returns: str: \\"YES\\" if arr2 is a subarray of arr1, otherwise \\"NO\\". n, m = len(arr1), len(arr2) for i in range(n - m + 1): if arr1[i:i + m] == arr2: return \\"YES\\" return \\"NO\\""},{"question":"Your task is to write a Python function called `calculate_run_length_encoding` that takes a string as input and returns a compressed representation of the string using run-length encoding. Run-length encoding is a basic form of data compression where consecutive occurrences of the same character are replaced by the character followed by the number of occurrences. For this question, your function should be case-sensitive. For example: - the string \\"aaabcc\\" would be compressed to \\"a3b1c2\\" - the string \\"wwwwaaadexxxxxxywww\\" would be compressed to \\"w4a3d1e1x6y1w3\\" Function Signature: ```python def calculate_run_length_encoding(input_string: str) -> str: pass ``` # Input - A single string `input_string`, which contains only uppercase and lowercase Latin characters (a-z, A-Z). - The length of `input_string` will be at most 10^4. # Output - A single string representing the run-length encoded version of `input_string`. # Example ```python calculate_run_length_encoding(\\"aaabcc\\") # Output: \\"a3b1c2\\" calculate_run_length_encoding(\\"wwwwaaadexxxxxxywww\\") # Output: \\"w4a3d1e1x6y1w3\\" ``` # Constraints - Your solution must run in O(n) time complexity. - Avoid using any built-in Python libraries specifically designed for run-length encoding. Write your solution within the function provided.","solution":"def calculate_run_length_encoding(input_string: str) -> str: if not input_string: return \\"\\" result = [] current_char = input_string[0] count = 1 for char in input_string[1:]: if char == current_char: count += 1 else: result.append(current_char + str(count)) current_char = char count = 1 result.append(current_char + str(count)) # append the last character and its count return \'\'.join(result)"},{"question":"Given an integer array `arr` of size `n`, and an integer `k`, find the number of subarrays whose sum is divisible by `k`. A subarray is a contiguous non-empty sequence of elements within the array. Input: - The first line contains two integers `n` and `k` (1 ≤ n ≤ 105, 1 ≤ k ≤ 100). - The second line contains `n` space-separated integers `arr[i]` (|arr[i]| ≤ 109). Output: - Output a single integer, the number of subarrays whose sum is divisible by `k`. Examples: Input: 5 3 1 2 3 4 1 Output: 4 Input: 6 7 4 2 6 -1 1 9 Output: 3 Note: In the first example, the subarrays that have sums divisible by `k=3` are: [3], [1, 2], [2, 3, 4], and [1, 2, 3, 4, 1]. In the second example, the subarrays that have sums divisible by `k=7` are: [4, 2, 6, -1, 1], [6], and [2, 6, -1].","solution":"def count_subarrays_divisible_by_k(arr, k): from collections import defaultdict # Initialize necessary variables count = 0 prefix_sum = 0 freq = defaultdict(int) freq[0] = 1 # Base case: there\'s one way to have sum % k == 0 initially # Traverse the array and calculate prefix sums for num in arr: prefix_sum += num modulus = prefix_sum % k # Adjust for negative values if modulus < 0: modulus += k # Count the number of times this particular remainder has appeared count += freq[modulus] # Update the frequency of this remainder freq[modulus] += 1 return count"},{"question":"Given a list of distinct integers, find any three integers in the list such that the sum of the three integers is zero. If there are multiple solutions, return any one of them. If no such triplet exists, return an empty list. For example: ```python find_triplet_sum_zero([−1, 0, 1, 2, −1, −4]) → [-1, 0, 1] find_triplet_sum_zero([1, 2, 3, 4, 5]) → [] find_triplet_sum_zero([0, -1, 2, -3, 1]) → [0, -1, 1] ``` # Function Signature ```python def find_triplet_sum_zero(nums: List[int]) -> List[int]: pass ``` # Constraints - The length of the list will be at least 3. - You cannot use the same element multiple times. - Your solution should have a time complexity better than O(n^3).","solution":"from typing import List def find_triplet_sum_zero(nums: List[int]) -> List[int]: nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: return [nums[i], nums[left], nums[right]] elif total < 0: left += 1 else: right -= 1 return []"},{"question":"Kaguya wants to arrange N different books on her shelf. Each book i has a weight W_i (1 <= i <= N). She also has a set of M different colored bookmarks, each with a maximum weight capacity C_j (1 <= j <= M). Kaguya wants to place at most one bookmark in each book such that the weight of the book does not exceed the capacity of the bookmark placed in it. She cannot place a bookmark in more than one book. Determine the maximum number of books that can have bookmarks placed in them without exceeding their weight capacities. Constraints: - 1 le N, M le 50 - 1 le W_i, C_j le 1000 Input: Input is given from Standard Input in the following format: N M W_1 W_2 ... W_N C_1 C_2 ... C_M Output: Print the maximum number of books that can have bookmarks placed in them. Examples: Input: 5 3 2 4 6 8 10 3 7 5 Output: 3 Input: 4 5 1 2 3 4 1 1 1 1 1 Output: 1 Input: 3 3 5 3 8 4 7 5 Output: 2","solution":"def max_books_with_bookmarks(n, m, weights, capacities): Determines the maximum number of books that can have bookmarks placed in them without exceeding their weight capacities. Parameters: - n: Number of books (int) - m: Number of bookmarks (int) - weights: List of integers representing the weight of each book - capacities: List of integers representing the weight capacity of each bookmark Returns: - The maximum number of books that can have bookmarks placed in them (int) # Sort weights of books in ascending order weights.sort() # Sort capacities of bookmarks in ascending order capacities.sort() book_index, bookmark_index, count = 0, 0, 0 # Use two pointers to approach the problem while book_index < n and bookmark_index < m: if weights[book_index] <= capacities[bookmark_index]: count += 1 book_index += 1 bookmark_index += 1 return count"},{"question":"A perfect number is a positive integer that is equal to the sum of its proper divisors, excluding itself. For example: - 6 is a perfect number because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6. - 28 is also a perfect number since its divisors are 1, 2, 4, 7, and 14, and 1 + 2 + 4 + 7 + 14 = 28. Your task is to write a function that finds all perfect numbers up to a given limit `n`. The function signature should be: ```python def find_perfect_numbers(n: int) -> List[int]: pass ``` # Input - An integer `n > 0` which defines the upper limit up to which perfect numbers need to be found. # Output - A list of all perfect numbers up to the integer `n`, inclusive. The list should be empty if there are no perfect numbers up to `n`. # Examples ```python find_perfect_numbers(6) # returns: [6] # Explanation: 6 is the only perfect number less than or equal to 6. find_perfect_numbers(30) # returns: [6, 28] # Explanation: The perfect numbers up to 30 are 6 and 28. find_perfect_numbers(100) # returns: [6, 28] # Explanation: Still only 6 and 28 are the perfect numbers below 100. ``` # Notes - Proper divisors of a number `x` exclude `x` itself. - Ensure the function is optimized to handle larger values of `n` efficiently. - Avoid brute force methods due to their inefficiency for large input ranges. Happy coding!!","solution":"from typing import List def find_perfect_numbers(n: int) -> List[int]: Returns a list of all perfect numbers up to and including n. def is_perfect(number): divisors_sum = sum(i for i in range(1, number) if number % i == 0) return divisors_sum == number perfect_numbers = [] for num in range(1, n + 1): if is_perfect(num): perfect_numbers.append(num) return perfect_numbers"},{"question":"Given an array of integers that represents stock prices on different days, return the maximum profit you can achieve by making at most two transactions. A transaction is defined as buying and then selling one share of the stock on different days. For example: ```Python maxProfit([3,3,5,0,0,3,1,4]) = 6 Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. Total profit = 3 + 3 = 6. maxProfit([1,2,3,4,5]) = 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit = 4 since there is only one transaction allowed. maxProfit([7,6,4,3,1]) = 0 Explanation: No transactions are made, so the maximum profit is 0. maxProfit([1]) = 0 Explanation: No transactions can be made with a single day of prices, so the maximum profit is 0. ``` If it is not possible to make any profit, return 0. Each element in the array represents the price of the stock on that day. You may not engage in multiple transactions simultaneously (you must sell the stock before you buy again). Note: you are only allowed up to two transactions.","solution":"def maxProfit(prices): n = len(prices) if n == 0: return 0 # Initialize arrays to store the maximum profit profit1 = [0] * n profit2 = [0] * n # Forward pass to calculate maximum profit for the first transaction min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit1[i] = max(profit1[i-1], prices[i] - min_price) # Backward pass to calculate maximum profit for the second transaction max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) profit2[i] = max(profit2[i+1], max_price - prices[i]) # Calculate the maximum profit by combining the two transactions max_profit = 0 for i in range(n): max_profit = max(max_profit, profit1[i] + profit2[i]) return max_profit"},{"question":"Sam is a math teacher who likes to challenge his students with interesting numerical problems. During one of his classes, he posed a question about special numbers he called “Zigzag numbers.” A Zigzag number is defined as a number in which every pair of adjacent digits alternates between increasing and decreasing. In other words, a number is considered a Zigzag number if for every three consecutive digits x, y, z: (x < y > z) or (x > y < z). Your task is to write a program that determines whether a given number is a Zigzag number. # Input: - The input consists of a single integer n (1 ≤ n ≤ 10^18). # Output: - Print \\"YES\\" if the given number is a Zigzag number. - Print \\"NO\\" otherwise. # Examples: Input: ``` 123 ``` Output: ``` NO ``` Input: ``` 121 ``` Output: ``` YES ``` Input: ``` 132 ``` Output: ``` YES ``` # Note: - In the first example, the digits (1, 2) and (2, 3) do not alternate between increasing and decreasing. - In the second example, the digits (1, 2, 1) alternate between increasing and decreasing. - In the third example, the digits (1, 3, 2) alternate between increasing and decreasing.","solution":"def is_zigzag_number(n): Determines if the given number is a Zigzag number. A number is considered a Zigzag number if for every three consecutive digits x, y, z: (x < y > z) or (x > y < z). Args: n (int): The number to be checked. Returns: str: \\"YES\\" if the given number is a Zigzag number, \\"NO\\" otherwise. s = str(n) length = len(s) if length < 3: return \\"NO\\" for i in range(1, length - 1): if not ((s[i-1] < s[i] > s[i+1]) or (s[i-1] > s[i] < s[i+1])): return \\"NO\\" return \\"YES\\""},{"question":"A library wants to implement a system to manage their book borrowing service. Each book and user has a unique ID. The library maintains records of each loan, and a book can be loaned to multiple users over time. The system should allow querying of both the book loan history and the user\'s borrowing history. Your task is to write a program that processes loan records and answers queries about book and user histories. Input The input consists of multiple datasets: - The first line contains three integers: N, M, Q (1 ≤ N, M ≤ 1000, 1 ≤ Q ≤ 1000), where N is the number of books, M is the number of loans, and Q is the number of queries. - Each of the next M lines contains two integers B and U (1 ≤ B ≤ N, 1 ≤ U ≤ 1000), indicating that book B was loaned to user U. - Each of the next Q lines contains a query which is in one of the following formats: - \\"Book B\\": which asks for the list of users who have borrowed book B. - \\"User U\\": which asks for the list of books that have been borrowed by user U. Output For each query, print the list of users or books (depending on the query). Each list should be sorted in ascending order and the elements should be separated by a single space. If there are no records for a query, print \\"None\\". Example Input 5 6 4 1 101 2 102 1 103 3 101 4 104 5 105 Book 1 User 101 Book 6 User 102 Output 101 103 1 3 None 2","solution":"def process_library_data(N, M, Q, loans, queries): book_loans = {} user_loans = {} for B, U in loans: if B not in book_loans: book_loans[B] = [] if U not in user_loans: user_loans[U] = [] book_loans[B].append(U) user_loans[U].append(B) results = [] for query in queries: type_, ID = query.split() ID = int(ID) if type_ == \\"Book\\": if ID in book_loans: results.append(\\" \\".join(map(str, sorted(book_loans[ID])))) else: results.append(\\"None\\") elif type_ == \\"User\\": if ID in user_loans: results.append(\\" \\".join(map(str, sorted(user_loans[ID])))) else: results.append(\\"None\\") return results"},{"question":"A string is considered valid if the number of characters that have odd occurrences in it is no more than one. Given a string s, determine whether it can be rearranged into a palindrome. Example 1: Input: s = \\"civic\\" Output: true Example 2: Input: s = \\"ivicc\\" Output: true Example 3: Input: s = \\"hello\\" Output: false Example 4: Input: s = \\"aabbc\\" Output: true Explanation: A palindrome reads the same forward and backward. For a string to be rearranged into a palindrome, at most one character should have an odd number of occurrences (which will be the middle character in the palindrome), and all other characters must have even occurrences.","solution":"def can_form_palindrome(s): Checks if a string can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For the string to be rearranged into a palindrome, at most one character # should have an odd number of occurrences return odd_count <= 1"},{"question":"Given a string S consisting of lowercase letters only, the task is to find the number of letters that can be arranged as palindromes. That means finding out how many times we can rearrange the string to form a palindrome at least once. Example 1: Input: S = \\"aabb\\" Output: 2 Explanation: We can form two palindromes \\"abba\\" and \\"baab\\". Example 2: Input: S = \\"abc\\" Output: 0 Explanation: We cannot form any palindromes using these letters. Example 3: Input: S = \\"aaa\\" Output: 1 Explanation: We can form one palindrome \\"aaa\\". User Task: Your task is to complete the function countPalindromicPermutations() which takes a string S as input and returns an integer representing the number of distinct palindromes that can be formed. You do not need to take any input or print anything. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^5","solution":"from collections import Counter def countPalindromicPermutations(S): Returns the number of distinct palindromic permutations that can be formed from the given string S. char_count = Counter(S) # Count how many characters have an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # If more than one character has an odd number of occurrences, we can\'t form a palindrome if odd_count > 1: return 0 # Calculate distinct palindromic permutations by factorial (only one possible for an odd count) return 1 if odd_count <= 1 else 0"},{"question":"A certain university has a unique way of organizing its classrooms and hallways. Each hallway can connect two classrooms, and students may travel from one classroom to another through these hallways. However, the university has a strict rule: for every pair of classrooms connected by a hallway, energy can only flow in one direction. The university administration wants to ensure that there is never a scenario where energy can circulate indefinitely through a set of classrooms. Formally: * The university\'s layout is represented as a list of classrooms and a list of directed hallways. Each hallway starts from one classroom and ends in another classroom. * A proposal for arranging the university is obtained from the layout by reversing the directions of some hallways (possibly none or all of them). * A proposal is valid if it is possible to arrange the classrooms in such a way that energy flows correspond to a valid tree structure. In other words, there should be no cycles, and exactly one student should be able to reach any classroom from the main entrance without retracing their steps. * The cost of a proposal is the number of hallways whose directions were reversed. For a given layout, find and report the smallest cost of any valid proposal. If no valid proposal exists, output -1. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 18, 0 ≤ m ≤ n(n-1)/2) – the number of classrooms and the number of hallways, respectively. The classrooms are numbered 1 through n. The next m lines each contain two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n) denoting a directed hallway from classroom a_i to classroom b_i. You may assume that: * There are no self-loops. (For each i: a_i ≠ b_i.) * No hallway appears twice. (For all i ≠ j: a_i ≠ a_j or b_i ≠ b_j.) * No pair of classrooms is connected in both directions. (The unordered pairs {a_i, b_i} are distinct.) Output Output one line with a single integer, the minimum cost of any valid proposal, or -1 if no valid proposal exists. Examples Input 3 2 1 2 2 3 Output 0 Input 3 3 1 2 2 3 3 1 Output 1 Input 4 4 1 2 2 3 3 4 4 2 Output 1 Note In the first example, the original directions form a valid tree structure with no cycles, so the cost is 0. In the second example, the original directions form a cycle. By reversing the direction of any one hallway, we can achieve a valid tree structure. For instance, reversing the hallway from 3 to 1 results in a valid tree with a cost of 1. In the third example, to break the cycle, we can reverse the hallway from 4 to 2 or any other hallway to create a tree structure. Thus, the minimal cost is 1.","solution":"from itertools import combinations import networkx as nx def find_min_reversal_cost(n, m, hallways): def is_valid_proposal(graph): # A valid proposal should be a Directed Acyclic Graph (DAG) with exactly one source. in_degrees = {node: 0 for node in range(1, n+1)} for u, v in graph.edges(): in_degrees[v] += 1 # Check for cycles and exactly one source (node with in-degree 0) sources = [node for node, degree in in_degrees.items() if degree == 0] if len(sources) != 1: return False try: nx.find_cycle(graph, orientation=\'original\') return False except nx.NetworkXNoCycle: return True G = nx.DiGraph() G.add_edges_from(hallways) if is_valid_proposal(G): return 0 min_cost = float(\'inf\') for r in range(1, m+1): for rev_set in combinations(hallways, r): reversed_edges = [(v, u) for u, v in rev_set] G_rev = nx.DiGraph() G_rev.add_edges_from([edge for edge in hallways if edge not in rev_set] + reversed_edges) if is_valid_proposal(G_rev): min_cost = min(min_cost, r) return min_cost if min_cost != float(\'inf\') else -1 # Parsing the input and calling the function def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) hallways = [(int(data[i * 2 + 2]), int(data[i * 2 + 3])) for i in range(m)] print(find_min_reversal_cost(n, m, hallways))"},{"question":"Given a list of integers, rearrange the list in such a way that the even-indexed elements are sorted in ascending order and the odd-indexed elements are sorted in descending order. Your task is to write a function that takes the list of integers as input, rearranges it according to the mentioned rule, and returns the modified list. # Input - An integer `N` (1 ≤ N ≤ 10^4) representing the length of the list. - A list of `N` integers (each integer `a_i` in the range 1 ≤ ai ≤ 10^6). # Output - A list of `N` integers, rearranged so that elements at even indices (0-based) are sorted in ascending order and elements at odd indices (0-based) are sorted in descending order. # Example Input 8 9 4 6 7 3 8 5 10 Output 3 10 5 8 6 7 9 4 # Explanation - The elements at even indices before sorting: [9, 6, 3, 5] - The elements at odd indices before sorting: [4, 7, 8, 10] - Sorted even-indexed elements in ascending order: [3, 5, 6, 9] - Sorted odd-indexed elements in descending order: [10, 8, 7, 4] - Combined list: [3, 10, 5, 8, 6, 7, 9, 4] # Constraints - Your solution should work efficiently with the given constraint on `N`.","solution":"def rearrange_list(lst): even_indexed = sorted(lst[::2]) odd_indexed = sorted(lst[1::2], reverse=True) result = [] even_iter = iter(even_indexed) odd_iter = iter(odd_indexed) for i in range(len(lst)): if i % 2 == 0: result.append(next(even_iter)) else: result.append(next(odd_iter)) return result"},{"question":"Samantha has a series of meetings in a single day, each with a specific start and end time. However, due to some scheduling issues, some of her meetings overlap. She wants to figure out the maximum number of non-overlapping meetings that she can attend. Help Samantha by writing a program that finds the maximum number of non-overlapping meetings she can attend on that day. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^6), the number of meetings. Each of the next n lines contains two integers s_i and e_i (1 ≤ s_i, e_i ≤ 10^9), the start and end times of the ith meeting. -----Output----- Print a single integer — the maximum number of non-overlapping meetings Samantha can attend. -----Examples----- Input 3 1 3 2 4 3 5 Output 2 Input 5 1 2 2 3 3 4 1 5 4 5 Output 4","solution":"def max_non_overlapping_meetings(meetings): Given a list of meetings with their start and end times, returns the maximum number of non-overlapping meetings. meetings: List of tuples, where each tuple contains two integers (start, end) representing the start and end times of a meeting. Returns: Maximum number of non-overlapping meetings. # Sort meetings based on their end times meetings.sort(key=lambda x: x[1]) # Initialize counters count = 0 end_time = 0 # Iterate over meetings for start, end in meetings: # If meeting does not overlap with the last attended one if start >= end_time: # Attend this meeting count += 1 end_time = end return count"},{"question":"Write a function to determine the nth term in a sequence defined by the following rule: The sequence starts with 1, and the next term is generated by reading off the digits of the former term, counting the number of digits in groups of the same digit. For example: - The sequence starts with \\"1\\" - \\"1\\" is read off as \\"one 1\\" or \\"11\\" - \\"11\\" is read off as \\"two 1s\\" or \\"21\\" - \\"21\\" is read off as \\"one 2, then one 1\\" or \\"1211\\" - And so on... Given a positive integer n (1 ≤ n ≤ 40), your task is to return the nth term of this sequence. Input: An integer n. Output: A single string representing the nth term of the sequence. Example: Input: 5 Output: 111221 Explanation: Sequence: 1. 1 2. 11 3. 21 4. 1211 5. 111221","solution":"def count_and_say(n): Returns the nth term of the \'count and say\' sequence. if n == 1: return \\"1\\" # Helper function to generate the next term in the sequence def next_term(s): result = [] i = 0 while i < len(s): count = 1 while i + 1 < len(s) and s[i] == s[i + 1]: i += 1 count += 1 result.append(str(count) + s[i]) i += 1 return \'\'.join(result) current_term = \\"1\\" for _ in range(1, n): current_term = next_term(current_term) return current_term"},{"question":"You are given a grid of NxN cells. Each cell can either contain a coin (represented by a 1) or be empty (represented by a 0). Your task is to find the largest square subgrid that contains only coins. -----Input----- The first line contains an integer T denoting the number of test cases. For each test case, the first line contains an integer N denoting the size of the grid. The next N lines each contain N integers (0 or 1), representing the grid. -----Output----- For each test case, output the size of the largest square subgrid that contains only coins. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 1000 - Each grid cell value is either 0 or 1 -----Example----- Input: 2 4 1 1 1 0 1 1 0 0 1 1 1 1 0 1 1 1 5 1 0 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 1 Output: 2 3","solution":"def largest_square_with_coins(grid): N = len(grid) dp = [[0] * N for _ in range(N)] max_side = 0 for i in range(N): for j in range(N): if grid[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side def solve_large_square_with_coins(test_cases): results = [] for grid in test_cases: results.append(largest_square_with_coins(grid)) return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] curr_line = 1 for _ in range(T): N = int(lines[curr_line]) grid = [] for i in range(curr_line + 1, curr_line + 1 + N): grid.append(list(map(int, lines[i].split()))) test_cases.append(grid) curr_line += 1 + N return test_cases"},{"question":"Given a positive integer n, determine the number of trailing zeroes in the factorial of n (denoted as n!). Input Format A single line containing an integer n. Constraints 1 ≤ n ≤ 10^9 Output Format Print the number of trailing zeroes in n! as a single integer. Sample Input 10 Sample Output 2 Explanation The factorial of 10 is 3628800, which has 2 trailing zeroes. To determine the number of trailing zeroes in the factorial of a number, we count the number of times 10 is a factor in the factorial. Since 10 is the product of 2 and 5, and there are typically more factors of 2 than 5 in factorials, counting the number of times 5 is a factor will determine the number of trailing zeroes. Steps to count trailing zeroes: 1. Divide n by 5, strip out the integer part and add to count. 2. Repeat the division until n becomes less than 5. For the given input (10), the number of trailing zeroes in 10! is calculated as follows: - 10/5 = 2 (there are 2 factors of 5) - As 10 < 25, we stop. Thus, the number of trailing zeroes in 10! is 2. Print this number as the result.","solution":"def trailing_zeroes_in_factorial(n): Returns the number of trailing zeroes in the factorial of n (n!). count = 0 power_of_5 = 5 while n >= power_of_5: count += n // power_of_5 power_of_5 *= 5 return count"},{"question":"Write a function that takes a string as an argument and returns True if the brackets in the string are properly nested and balanced. The string may contain the following types of brackets: (), [], {}, <>. ```python is_balanced(\\"(a + b) * [c - {d/e} + <f * g>]\\") # True is_balanced(\\"[{(<a + b> + c) * d}]\\") # True is_balanced(\\"(<a + b>\\") # False is_balanced(\\"{a * (b + c})\\") # False is_balanced(\\"a + b + c\\") # True ``` SPECIAL THANKS: @JulianKolbe !","solution":"def is_balanced(s): Checks if the brackets in the string are properly nested and balanced. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\', \'>\': \'<\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False return stack == []"},{"question":"Given an integer array, you are required to determine the minimum number of deletions needed to make all the elements in the array unique. Input Format: The first line of the input contains an integer {T} - the number of test cases. {T} test cases follow. Each test case contains two lines: - The first line contains an integer {N} - the size of the array. - The second line contains {N} space-separated integers denoting the elements of the array. Constraints: 1 leq T leq 100 1 leq N leq 1000 1 leq arr[i] leq 1000 Output Format: For each test case, Output exactly one line containing a single integer - the minimum number of deletions required to make the array elements unique. Sample Input: 2 5 2 3 2 2 2 3 1 2 2 Sample Output: 3 1 Explanation: In the first test case, one possible way to make all elements unique is to delete three \'2\' values, resulting in the array [2, 3]. In the second test case, one possible way to make all elements unique is to delete one occurrence of \'2\', resulting in the array [1, 2].","solution":"def min_deletions_to_make_unique(arr): This function calculates the minimum number of deletions required to make all the elements in the array unique. from collections import Counter elements_count = Counter(arr) deletions_required = 0 seen = set() for num, count in elements_count.items(): while count > 1: count -= 1 deletions_required += 1 return deletions_required def solve(test_cases): results = [] for n, arr in test_cases: results.append(min_deletions_to_make_unique(arr)) return results def main(input_data): data = input_data.strip().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) arr = list(map(int, data[index + 1: index + 1 + N])) test_cases.append((N, arr)) index += N + 1 results = solve(test_cases) for result in results: print(result)"},{"question":"You are given an expression involving variables, addition, and subtraction operations. Write a function to evaluate the integer value of the expression. The syntax for these expressions is defined as follows: - An expression can be a positive or negative integer, or a variable that represents an integer. - Addition and subtraction operations are represented by \\"+\\" and \\"-\\", respectively. - Expressions can be nested within parentheses. For the purposes of this question, variable names are strings of lowercase English letters, and their values are given in a dictionary. To evaluate an expression: - Replace each variable with its corresponding value from the dictionary. - Compute the result by evaluating the nested addition and subtraction operations. Note: 1. It is guaranteed that each variable in the expression has a corresponding integer value in the dictionary. 2. The input expression string is well-formatted (no leading, trailing or multiple intermediate spaces, and well-matched parentheses). 3. It is guaranteed that intermediate results and the final answer will fit in a 32-bit integer. Evaluation Examples: Input: expression = \\"a + b\\", variables = {\\"a\\": 2, \\"b\\": 3} Output: 5 Input: expression = \\"(a + b) - (c - d)\\", variables = {\\"a\\": 2, \\"b\\": 3, \\"c\\": 7, \\"d\\": 4} Output: 2 Input: expression = \\"(a - (b - c)) + d\\", variables = {\\"a\\": 5, \\"b\\": 3, \\"c\\": 1, \\"d\\": 7} Output: 10 Input: expression = \\"(x1 + (x2 - x3))\\", variables = {\\"x1\\": 4, \\"x2\\": 6, \\"x3\\": 2} Output: 8 Input: expression = \\"((q + w) - (e + r))\\", variables = {\\"q\\": 5, \\"w\\": 2, \\"e\\": 3, \\"r\\": 1} Output: 3","solution":"def evaluate_expression(expression, variables): Evaluate the integer value of the given expression using the provided variables. Parameters: expression (str): The expression to evaluate. variables (dict): A dictionary mapping variable names to their integer values. Returns: int: The integer result of evaluating the expression. def eval_replace(expr): # Replace variables with their values from the dictionary for var, value in variables.items(): expr = expr.replace(var, str(value)) return expr def eval_expression(expr): # Evaluate the expression string safely replaced_expr = eval_replace(expr) return eval(replaced_expr) # Call the evaluation function return eval_expression(expression)"},{"question":"You are organizing a marathon with N participants, each having a unique ID number from 1 to N. Each participant runs a distance, and you have recorded their distances in an array. However, due to some error, the distances were accidentally shuffled. You need to sort the distances to analyze the performance accurately. You can use a bubble sort algorithm to sort the distances. However, the marathon organizers want to know the number of swaps that the bubble sort algorithm will make to sort the array. Can you help determine the number of swaps required? -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains an integer N. - The second line of each test case contains N space-separated integers representing the distances run by each participant. -----Output:----- - For each test case, print the number of swaps bubble sort would make to sort the array in ascending order. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq Distance_i leq 10000 -----Sample Input:----- 2 3 3 2 1 4 4 3 2 1 -----Sample Output:----- 3 6 -----EXPLANATION:----- - Example case 1: Initially, the array is [3, 2, 1]. Bubble sort will make the following swaps to sort the array in ascending order: 1. Swap 3 and 2 -> [2, 3, 1] 2. Swap 3 and 1 -> [2, 1, 3] 3. Swap 2 and 1 -> [1, 2, 3] Total swaps = 3 - Example case 2: Initially, the array is [4, 3, 2, 1]. Bubble sort will make the following swaps to sort the array in ascending order: 1. Swap 4 and 3 -> [3, 4, 2, 1] 2. Swap 4 and 2 -> [3, 2, 4, 1] 3. Swap 4 and 1 -> [3, 2, 1, 4] 4. Swap 3 and 2 -> [2, 3, 1, 4] 5. Swap 3 and 1 -> [2, 1, 3, 4] 6. Swap 2 and 1 -> [1, 2, 3, 4] Total swaps = 6","solution":"def count_bubble_sort_swaps(distances): Returns the number of swaps made by bubble sort to sort the distances array. n = len(distances) swaps = 0 for i in range(n): for j in range(0, n-i-1): if distances[j] > distances[j+1]: distances[j], distances[j+1] = distances[j+1], distances[j] swaps += 1 return swaps def solve_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] distances = test_cases[i][1] results.append(count_bubble_sort_swaps(distances)) return results"},{"question":"You are given an undirected graph with n nodes and m edges. Each node i has a weight w_i. Define the distance between two nodes u and v as the smallest sum of weights of the nodes in any path from u to v. For each edge (u, v), calculate and print the distance between node u and node v. Input Format The first line contains two integers, n (the number of nodes) and m (the number of edges). The second line contains n space-separated integers, w_1, w_2, ldots, w_n, where w_i denotes the weight of node i. Each of the m subsequent lines contains two space-separated integers, u and v, representing an undirected edge between nodes u and v. Constraints 1 leq n leq 10^4 1 leq m leq 10^5 1 leq w_i leq 10^4 Output Format Print m lines, where the i^mathrm{th} line contains a single integer denoting the distance between node u and node v for the i^mathrm{th} edge in the input. Sample Input 4 3 3 2 1 4 1 2 1 3 3 4 Sample Output 5 4 5 Explanation The Sample Input defines a graph as follows: 1 - (3) - 2 | (1) | 3 - (4) - 4 For each edge: - The distance between node 1 and node 2 is 3 + 2 = 5 - The distance between node 1 and node 3 is 3 + 1 = 4 - The distance between node 3 and node 4 is 1 + 4 = 5","solution":"def calculate_edge_distances(n, m, weights, edges): Calculates the distance between nodes for each edge in the graph. Args: n (int): Number of nodes. m (int): Number of edges. weights (list): List of node weights. edges (list): List of edges. Returns: list: List of distances for each edge. distances = [] for edge in edges: u, v = edge distance = weights[u-1] + weights[v-1] distances.append(distance) return distances # Parse input def parse_input(input_string): lines = input_string.split(\'n\') n, m = map(int, lines[0].split()) weights = list(map(int, lines[1].split())) edges = [tuple(map(int, line.split())) for line in lines[2:] if line] return n, m, weights, edges # Main function to be called with input def main(input_string): n, m, weights, edges = parse_input(input_string) distances = calculate_edge_distances(n, m, weights, edges) return distances"},{"question":"Marcus and Holly are exploring different towns, each represented as a grid of equal-sized cells. A town can be represented as an `m x n` grid with the possibility for some cells to be impassable due to obstacles. Each player starts in the top left cell of the grid and wants to reach the bottom right cell. They can move either to the right or down to an adjacent cell if it is passable. Given the grid, determine the number of unique paths from the top left to the bottom right of the grid for each player. Both players are independent and do not interact with each other on the grid. ---Task--- Given the description of the town grid, determine the number of unique paths from the top left cell to the bottom right cell. If there is no passable path, return 0. The grids are provided as m times n matrices where `0` represents a passable cell and `1` represents an obstacle. ---Input--- The first line contains two integers `m` and `n`, where 1 leq m, n leq 100, representing the dimensions of the grid. The next `m` lines each contain `n` integers, either `0` or `1`, representing the grid. ---Output--- Output a single integer representing the number of unique paths from the top left to the bottom right of the grid. ---Examples--- Sample Input 1: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 3 0 1 0 0 1 0 0 0 0 Sample Output 2: 1","solution":"def uniquePathsWithObstacles(grid): m = len(grid) n = len(grid[0]) # If the start or end point is blocked, return 0 if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Initialize a dp array with the same dimensions as the grid dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Fill the dp array for i in range(m): for j in range(n): if grid[i][j] == 0: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[m - 1][n - 1]"},{"question":"You are given an array of integers, and you need to perform a specific operation to convert it into a non-decreasing array. In one operation, you can increase any single element by 1. Your task is to determine the minimum number of operations required to make the array non-decreasing. A non-decreasing array is an array where each element is greater than or equal to the previous element. ------Input------ The first line of the input contains one integer T, the number of test cases. Then T test cases follow, each of which starts with an integer n (the length of the array), followed by n integers representing the elements of the array. ------Output------ T lines, each of which contains a single integer - the minimum number of operations required for the corresponding test case. ------Constraints------ 1 ≤ T ≤ 10 1 ≤ n ≤ 1000 0 ≤ array elements ≤ 1000 ------Example------ Input: 2 5 1 2 3 2 5 3 3 2 1 Output: 1 3","solution":"def min_operations_to_non_decreasing(arr): Returns the minimum number of operations required to make the array non-decreasing. An operation consists of increasing a single element by 1. operations = 0 for i in range(1, len(arr)): if arr[i] < arr[i - 1]: operations += arr[i - 1] - arr[i] arr[i] = arr[i - 1] return operations def solve(test_cases): Processes multiple test cases and returns the results for each in a list. test_cases : list of tuples, where each tuple is (n, array) Returns a list of integers representing the minimum number of operations required for each test case. results = [] for n, array in test_cases: results.append(min_operations_to_non_decreasing(array)) return results"},{"question":"Vertebrate Classifier Create a function, classify_animal, that takes in a dictionary with keys \'name\', \'vertebral_column\' (boolean), \'warm_blooded\' (boolean), and \'live_birth\' (boolean). Based on the properties of the animal, determine which vertebrate class the animal belongs to by returning one of the following strings: \'Fish\', \'Amphibian\', \'Reptile\', \'Bird\', \'Mammal\', or \'Invertebrate\'. The classification rules are as follows: - If \'vertebral_column\' is False, return \'Invertebrate\'. - If \'vertebral_column\' is True and \'warm_blooded\' is True: - If \'live_birth\' is True, return \'Mammal\'. - If \'live_birth\' is False, return \'Bird\'. - If \'vertebral_column\' is True and \'warm_blooded\' is False: - If \'live_birth\' is True, return \'Amphibian\'. - If \'live_birth\' is False, return \'Reptile\' (Assuming reptiles lay eggs as an exception). Note that fish do not have a \'warm_blooded\' and \'live_birth\' combination directly categorized, but can be deduced as remaining vertebrate without those characteristics. If no category fits the given properties, default the return to \'Fish\'. # Example: ```python # Input animal = { \'name\': \'Platypus\', \'vertebral_column\': True, \'warm_blooded\': True, \'live_birth\': False } # Expected Output \'Mammal\' ```","solution":"def classify_animal(animal): Classifies an animal into one of the vertebrate classes or as an invertebrate. Parameters: animal (dict): A dictionary with the following keys: - \'name\' (string): The name of the animal - \'vertebral_column\' (boolean): Whether the animal has a vertebral column - \'warm_blooded\' (boolean): Whether the animal is warm-blooded - \'live_birth\' (boolean): Whether the animal gives live birth Returns: string: The classification of the animal (\'Fish\', \'Amphibian\', \'Reptile\', \'Bird\', \'Mammal\', or \'Invertebrate\') if not animal[\'vertebral_column\']: return \'Invertebrate\' if animal[\'warm_blooded\']: if animal[\'live_birth\']: return \'Mammal\' return \'Bird\' else: if animal[\'live_birth\']: return \'Amphibian\' return \'Reptile\' # If no condition matches, return \'Fish\' by default return \'Fish\'"},{"question":"Given an array of integers where every element appears twice except for one, find that single one. Implement a function singleUnique() to solve this problem. Example 1: Input: N = 5 a[] = {2,1,4,5,1,2,4} Output: 5 Explanation: In this array, all elements except 5 appear twice. Therefore, 5 is the element that appears only once. Example 2: Input: N = 3 a[] = {6,3,3} Output: 6 Explanation: In this array, all elements except 6 appear twice. Thus, 6 is the element that appears only once. Your Task: You don\'t need to read input or print anything. Your task is to complete the function singleUnique() which takes the array arr[] and the size of the array as inputs and returns the element that appears only once. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 0 <= a[i] <= 10^{5}","solution":"def singleUnique(arr): Finds the element that appears only once in an array where every other element appears twice. Uses XOR to achieve O(N) time complexity and O(1) space complexity. unique = 0 for num in arr: unique ^= num return unique"},{"question":"In the fictional country Z, there are n cities connected by m two-way flight routes. Each city has a single significant landmark that is a point of interest for tourists. The tourism board of Z has a problem: tourists wish to visit as many distinct landmarks as possible within a given period of k days. The tour must start and end in the capital city, city 1. Each day a tourist can either stay in the current city or take a flight to another connected city. When a tourist stays in a city, they are counted as visiting the city\'s landmark that day. You have to design a route such that the number of distinct landmarks visited within the k days is maximized. Note that visiting a landmark again on a different day does not count as visiting a new landmark. Input The first line contains three integers n, m, and k (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000, 1 ≤ k ≤ 50), the number of cities, the number of flight routes, and the number of days available. Each of the next m lines contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), denoting a two-way flight route between city u_i and city v_i. Output Print a single integer — the maximum number of distinct landmarks that can be visited, starting and ending the trip in the capital city within the given k days. Examples Input 4 4 3 1 2 1 3 2 4 3 4 Output 3 Input 5 6 4 1 2 1 3 2 3 2 4 3 5 4 5 Output 4 Note Explanation of the first example: The maximum number of distinct landmarks to visit is 3. It\'s possible to visit 3 landmarks, for example, in the way described below. * Day 1. Start at city 1 and visit landmark 1. Take a flight to city 3. * Day 2. Visit landmark 3. Take a flight to city 4. * Day 3. Visit landmark 4. Return to city 1 on the last day. Explanation of the second example: The maximum number of distinct landmarks to visit is 4. It\'s possible to visit 4 landmarks, for example, in the way described below. * Day 1. Start at city 1 and visit landmark 1. Take a flight to city 2. * Day 2. Visit landmark 2. Take a flight to city 3. * Day 3. Visit landmark 3. Take a flight to city 5. * Day 4. Visit landmark 5. Return to city 1 on the last day.","solution":"def bfs_max_landmarks(n, adj, k, start=1): from collections import deque queue = deque([(start, 0, 0)]) # (current_city, days_spent, bitmask_visited) visited = {(start, 0): 0} max_landmarks = 0 while queue: city, days, bm = queue.popleft() landmarks_visited = bin(bm).count(\'1\') max_landmarks = max(max_landmarks, landmarks_visited) if days < k: # Stay at the current city if (city, days + 1) not in visited or visited[(city, days + 1)] < bm | (1 << (city - 1)): visited[(city, days + 1)] = bm | (1 << (city - 1)) queue.append((city, days + 1, bm | (1 << (city - 1)))) for neighbor in adj[city]: if (neighbor, days + 1) not in visited or visited[(neighbor, days + 1)] < bm | (1 << (neighbor - 1)): visited[(neighbor, days + 1)] = bm | (1 << (neighbor - 1)) queue.append((neighbor, days + 1, bm | (1 << (neighbor - 1)))) return max_landmarks def max_landmarks_visited(n, m, k, routes): from collections import defaultdict adj = defaultdict(list) for u, v in routes: adj[u].append(v) adj[v].append(u) return bfs_max_landmarks(n, adj, k) # Example usage: n = 5 m = 6 k = 4 routes = [(1, 2), (1, 3), (2, 3), (2, 4), (3, 5), (4, 5)] print(max_landmarks_visited(n, m, k, routes))"},{"question":"In this problem, you need to determine the longest subsequence of ascending integers in a given sequence of integers. The subsequence does not need to be contiguous, but the order must be preserved. -----Input----- Input begins with a line that contains a single integer 1 le n le 100000 – the length of the input sequence. Each of the following n lines contains a single integer -100000 le a[i] le 100000, the i-th input sequence element. -----Output----- Prints a single line containing an integer number l, the length of the longest ascending subsequence. -----Examples----- Sample Input: 6 10 20 10 30 40 50 Sample Output: 5 Sample Input: 5 3 10 2 1 20 Sample Output: 3","solution":"def longest_ascending_subsequence(n, sequence): Determines the length of the longest ascending subsequence in the sequence. Parameters: n (int): Length of the input sequence. sequence (list): The input sequence of integers. Returns: int: Length of the longest ascending subsequence. if n == 0: return 0 # DP array to store the length of the longest subsequence at each position dp = [1] * n for i in range(1, n): for j in range(0, i): if sequence[i] > sequence[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 return max(dp)"},{"question":"A company has a product sales tracking system which keeps records in the form of a list of tuples. Each tuple contains two elements - the product ID (an integer) and the quantity sold (an integer). The system automatically adds a new record each time a sale is made. The sales data can have multiple records for the same product with different quantities. Your task is to write a function that consolidates the sales data for a given product ID. The function should take the sales data list and a specific product ID as input, and return the total quantity sold for that product. -----Input----- The function will receive: 1. A list of tuples, where each tuple contains two integers. The first integer is the product ID and the second integer is the quantity sold. 2. An integer representing the product ID for which the total quantity sold needs to be calculated. -----Output----- Return an integer representing the total quantity sold for the given product ID. -----Function Signature----- ```python def total_sales(sales_data: List[Tuple[int, int]], product_id: int) -> int: ``` -----Examples----- Input sales_data = [(1, 5), (2, 3), (1, 2), (3, 5), (1, 3)] product_id = 1 Output 10 Input sales_data = [(1, 7), (2, 3), (2, 4), (3, 6), (2, 1)] product_id = 2 Output 8","solution":"from typing import List, Tuple def total_sales(sales_data: List[Tuple[int, int]], product_id: int) -> int: Returns the total quantity sold for the specified product ID. Parameters: sales_data (List[Tuple[int, int]]): The list of sales records as tuples (product ID, quantity sold). product_id (int): The product ID for which the total quantity sold needs to be calculated. Returns: int: The total quantity sold for the specified product ID. total_quantity = 0 for record in sales_data: if record[0] == product_id: total_quantity += record[1] return total_quantity"},{"question":"A frog is trying to cross a river. The river has stones represented by an array of non-negative integers where each stone\'s position is represented by the array index. The value at each index represents the maximum jump length the frog can make from that stone. The frog can only move to the right from the current stone. Determine if the frog can reach the last stone from the first stone. If the frog can reach the last stone, print \\"Possible\\" (without quotes). Otherwise, print \\"Impossible\\" (without quotes). -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N, the number of stones. The second line of each test case contains N non-negative integers representing the maximum jump lengths from each stone. -----Output----- For each test case, output a single line containing \\"Possible\\" or \\"Impossible\\" (without quotes). -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^4 - 0 ≤ jump_length ≤ 10^3 Subtask 1 (50 points): - N ≤ 10 Subtask 2 (50 points): - 1 ≤ N ≤ 10^4 -----Example----- Input: 2 5 2 3 1 1 4 6 3 2 1 0 4 2 Output: Possible Impossible","solution":"def can_frog_cross(stones): Determines if the frog can reach the last stone from the first stone n = len(stones) reachable = 0 for i in range(n): if i > reachable: return \\"Impossible\\" reachable = max(reachable, i + stones[i]) if reachable >= n - 1: return \\"Possible\\" return \\"Possible\\" if reachable >= n - 1 else \\"Impossible\\" def process_test_cases(test_cases): results = [] for case in test_cases: n, stones = case result = can_frog_cross(stones) results.append(result) return results def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) stones = list(map(int, data[index + 1: index + 1 + N])) index += N + 1 test_cases.append((N, stones)) results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"On a rectangular grid, Santa wants to place as many presents as possible for the kids. The grid has `R` rows and `C` columns. However, some cells are blocked and Santa cannot place a present in those cells. Santa needs your help to count the number of cells in which he can place a present. You are given the dimensions of the grid and a list of blocked cells. Determine the count of cells available for placing the presents. ------ Input Format ------ - The first line of input consists of two integers, `R` and `C`, representing the number of rows and columns in the grid, respectively. - The second line contains an integer `N`, representing the number of blocked cells. - The next `N` lines each contain two space-separated integers, `r_i` and `c_i`, representing the row and column index of the `i-th` blocked cell. ------ Output Format ------ Output a single integer, the number of cells available for placing presents. ------ Constraints ------ - 1 ≤ R, C ≤ 100 - 1 ≤ N ≤ R times C - 1 ≤ r_i ≤ R - 1 ≤ c_i ≤ C ------ Sample Input 1 ------ 5 5 3 1 2 3 3 4 5 ------ Sample Output 1 ------ 22 ------ Explanation 1 ------ There are 25 cells in total on the grid, and 3 cells are blocked. Thus, there are 22 cells available for placing presents.","solution":"def count_available_cells(R, C, blocked_cells): Calculates the number of available cells for placing presents. Parameters: R (int): Number of rows in the grid C (int): Number of columns in the grid blocked_cells (list of tuples): List of blocked cell coordinates (r_i, c_i) Returns: int: Number of cells available for placing presents total_cells = R * C blocked_count = len(blocked_cells) return total_cells - blocked_count"},{"question":"Chef has recently launched a new feature where participants can mark their favorite snacks in his app. To promote this feature, he wants to send push notifications to his users suggesting that they update their favorite snacks if they haven\'t done so in a while. There are a total of M participants on the platform. Each participant either has updated their favorite snack in the last month or they haven\'t. Chef only wants to send push notifications to those who haven\'t updated their favorite snack in the last month. Write a program that calculates the number of participants who should receive the push notification. ------ Input Format ------ - The first and only line of input will contain two space-separated integers M (the total number of participants) and A (the number of participants who have updated their favorite snack in the last month). ------ Output Format ------ Output in a single line the number of participants who should receive the push notification. ------ Constraints ------ 1 ≤ A ≤ M ≤ 10^{6} ----- Sample Input 1 ------ 200 50 ----- Sample Output 1 ------ 150 ----- Explanation 1 ------ Out of 200 users, 50 have updated their favorite snack in the last month. Hence, Chef needs to send push notifications to 150 users. ----- Sample Input 2 ------ 1250 750 ----- Sample Output 2 ------ 500 ----- Explanation 2 ------ Out of 1250 users, 750 have updated their favorite snack in the last month. Hence, Chef needs to send push notifications to 500 users.","solution":"def calculate_notifications(M, A): Calculate the number of participants who should receive the push notification. Parameters: M (int): The total number of participants. A (int): The number of participants who have updated their favorite snack in the last month. Returns: int: The number of participants to send notifications to. return M - A"},{"question":"Tony lives in a country called Tonystan, which has n cities connected by n-1 bidirectional roads, ensuring that every city is reachable from every other city. Each city has a unique id between 1 and n. Some cities have specific attraction points that are famous among tourists, and each attraction point comes with a certain interest value i. The roads differ in distances and are given as distances d between the cities. Tony wants to organize m trips for the tourists, where each trip involves traveling between two different cities. For each trip, Tony needs to determine the maximum interest value of any attraction point that can be found along the shortest path between the start and destination cities, including the cities themselves at both ends of the trip. Write a program to help Tony with this task. For each trip, your program should output the maximum interest value that can be found along the shortest path between the given start and destination cities. Input The first line consists of two integers n and m (2 ≤ n, m ≤ 2⋅10^5), representing the number of cities and the number of trips, respectively. The second line contains n integers i_1, i_2, ..., i_n (1 ≤ i_k ≤ 10^9), representing the interest values of the attraction points in each city. The next n-1 lines each contain three integers a, b, and d (1 ≤ a, b ≤ n, 1 ≤ d ≤ 10^9), indicating a road of distance d between city a and city b. The next m lines each contain two integers x and y (1 ≤ x, y ≤ n), representing the start and destination cities for each trip. Output Output m lines, where the i-th line should contain an integer: the maximum interest value that can be found on the shortest path between the two cities for the i-th trip. Example Input 5 3 5 3 6 8 7 1 2 4 2 3 1 3 4 2 4 5 3 1 5 2 4 3 5 Output 8 8 8 Explanation In the first trip from city 1 to city 5, the shortest path is 1-2-3-4-5 with interest values 5, 3, 6, 8, 7. Thus, the maximum interest value is 8. In the second trip from city 2 to city 4, the shortest path is 2-3-4 with interest values 3, 6, 8. Here, the maximum interest value is 8. In the third trip from city 3 to city 5, the shortest path is 3-4-5 with interest values 6, 8, 7, giving a maximum interest value of 8.","solution":"import heapq from collections import defaultdict from sys import maxsize as inf def max_interest_trip(n, m, interest_values, roads, trips): # Build the graph graph = defaultdict(list) for a, b, d in roads: graph[a].append((b, d)) graph[b].append((a, d)) # Function to get the shortest path and maximum interest value along the path def find_max_interest(start, end): pq = [(0, start)] distances = {i: inf for i in range(1, n+1)} max_interest = {i: 0 for i in range(1, n+1)} distances[start] = 0 max_interest[start] = interest_values[start-1] while pq: current_dist, u = heapq.heappop(pq) if u == end: return max_interest[u] for v, weight in graph[u]: if distances[v] > current_dist + weight: distances[v] = current_dist + weight max_interest[v] = max(max_interest[u], interest_values[v-1]) heapq.heappush(pq, (distances[v], v)) elif distances[v] == current_dist + weight: if max_interest[v] < max(max_interest[u], interest_values[v-1]): max_interest[v] = max(max_interest[u], interest_values[v-1]) return max_interest[end] result = [] for start, end in trips: result.append(find_max_interest(start, end)) return result # Example usage: n, m = 5, 3 interest_values = [5, 3, 6, 8, 7] roads = [(1, 2, 4), (2, 3, 1), (3, 4, 2), (4, 5, 3)] trips = [(1, 5), (2, 4), (3, 5)] print(max_interest_trip(n, m, interest_values, roads, trips)) # [8, 8, 8]"},{"question":"Alicia has an array, mathbf{A}, consisting of N integers. She wants to perform Q operations on this array. Each operation contains one query of one of the following types: 1. Update: Given two integers i and x, update the element at index i of array mathbf{A} to x. 2. Query: Given two integers L and R, find the minimum element in the subarray from index L to index R (inclusive). Help Alicia by processing all the Q operations on the array mathbf{A}. Input Format The first line contains a single integer N (the number of elements in the array). The second line contains N space-separated integers, representing the elements of array mathbf{A}. The third line contains a single integer Q (the number of operations). Each of the Q subsequent lines contains one of the following operations: - \\"1 i x\\" (1 means update the element at index i to x) - \\"2 L R\\" (2 means query the minimum element in the subarray from L to R) Constraints 1 leq N leq 10^5 1 leq mathbf{A}[i] leq 10^9 1 leq i < N 1 leq Q leq 10^5 1 leq L leq R < N Output Format For each query operation, print the minimum element in the subarray from L to R on a new line. Sample Input 5 10 2 5 7 4 4 2 1 3 1 2 1 2 1 3 2 0 4 Sample Output 2 1 1 Explanation The initial array mathbf{A} = [10, 2, 5, 7, 4] Q_1: Query the minimum element from index 1 to 3. The subarray is [2, 5, 7], and the minimum element is 2. Q_2: Update the element at index 2 to 1. The array becomes [10, 2, 1, 7, 4]. Q_3: Query the minimum element from index 1 to 3. The subarray is [2, 1, 7] and the minimum element is 1. Q_4: Query the minimum element from index 0 to 4. The subarray is [10, 2, 1, 7, 4], and the minimum element is 1.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Build the segment tree for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, index, value): # Update the leaf node index += self.n self.tree[index] = value # Update internal nodes while index > 1: index //= 2 self.tree[index] = min(self.tree[2 * index], self.tree[2 * index + 1]) def query(self, left, right): # Query the minimum value in the range [left, right] result = float(\'inf\') left += self.n right += self.n + 1 while left < right: if left % 2 == 1: result = min(result, self.tree[left]) left += 1 if right % 2 == 1: right -= 1 result = min(result, self.tree[right]) left //= 2 right //= 2 return result def process_operations(n, array, operations): seg_tree = SegmentTree(array) results = [] for operation in operations: if operation[0] == 1: # Update operation _, i, x = operation seg_tree.update(i, x) elif operation[0] == 2: # Query operation _, l, r = operation results.append(seg_tree.query(l, r)) return results # Example usage: n = 5 array = [10, 2, 5, 7, 4] operations = [(2, 1, 3), (1, 2, 1), (2, 1, 3), (2, 0, 4)] print(process_operations(n, array, operations))"},{"question":"Alice loves arrays, especially those involving interesting properties. She recently encountered a specific type of array called a \\"beautiful\\" array. An array a of length n is beautiful if the greatest common divisor (gcd) of all elements of a is greater than 1. Alice wants to determine if an array can be transformed into a beautiful array by removing at most one element. Help her figure out if it\'s possible for each test case. -----Input----- The first line contains a single integer t (1 le t le 10^4) – the number of test cases. The following t lines describe each test case. Each test case consists of two lines: - The first line contains an integer n (2 le n le 10^5) – the length of the array. - The second line contains n integers a_i (1 le a_i le 10^9) – the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output \\"YES\\" if Alice can remove at most one element to make the array beautiful, otherwise output \\"NO\\". You can output the answer in any case (for example, the strings \\"yEs\\", \\"yes\\", \\"Yes\\" and \\"YES\\" will be recognized as a positive answer). -----Examples----- Input 3 3 4 6 8 4 7 5 9 11 5 15 10 5 10 5 Output YES NO YES -----Note----- In the first example, the array [4, 6, 8] has a gcd of 2 which is greater than 1, and hence is beautiful. In the second example, if we remove any one element, we still cannot achieve a gcd greater than 1 for all remaining elements. In the third example, the array [15, 10, 5, 10, 5] is not beautiful initially (gcd is 5), but if we remove the first element, the remaining array [10, 5, 10, 5] has a gcd of 5, which is beautiful.","solution":"import math from functools import reduce def gcd_of_list(nums): return reduce(math.gcd, nums) def can_be_beautiful_array(n, arr): overall_gcd = gcd_of_list(arr) if overall_gcd > 1: return \\"YES\\" for i in range(n): temp_arr = arr[:i] + arr[i+1:] if gcd_of_list(temp_arr) > 1: return \\"YES\\" return \\"NO\\" def process_input(t, cases): results = [] for case in cases: n, arr = case results.append(can_be_beautiful_array(n, arr)) return results"},{"question":"Professor Snape assigns Harry a challenging task to test his magical abilities. He gives him a list of integers and asks him to find the largest subarray that has an equal number of even and odd numbers. This, according to Snape, ensures a perfect balance in the world of magic. Harry, knowing his skills, asks you for help to solve this puzzle. ------ Input ------ - The first line contains an integer T denoting the number of test cases. - The first line of each test case contains an integer N, the length of the array. - The second line of each test case contains N space-separated integers, representing the elements of the array. ------ Output ------ For each test case, print the length of the longest subarray with an equal number of even and odd numbers on a new line. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{9} ------ Sample Input ------ 2 6 1 2 3 4 5 6 4 1 4 2 3 ------ Sample Output ------ 6 4 ------ Explanation ------ For the first test case: [1, 2, 3, 4, 5, 6] is the longest subarray with 3 even and 3 odd numbers. For the second test case: [1, 4, 2, 3] is the longest subarray with 2 even and 2 odd numbers.","solution":"def longest_balanced_subarray(arr): Returns the length of the longest subarray with an equal number of even and odd numbers. count = 0 max_length = 0 index_map = {0: -1} # balance : index for i, num in enumerate(arr): if num % 2 == 0: count += 1 else: count -= 1 if count in index_map: max_length = max(max_length, i - index_map[count]) else: index_map[count] = i return max_length def process_test_cases(T, test_cases): results = [] for n, arr in test_cases: results.append(longest_balanced_subarray(arr)) return results # Example Usage: # T = 2 # test_cases = [ # (6, [1, 2, 3, 4, 5, 6]), # (4, [1, 4, 2, 3]), # ] # print(process_test_cases(T, test_cases))"},{"question":"You are given a m x n matrix `board` representing the current state of a board containing cells filled with either \'X\' or \'O\'. A region is a maximal group of connected cells that are filled with \'O\'. Two cells are connected if they are adjacent and both contain \'O\'. The boundary of the region is considered to be those cells that touch the edge of the board. Write a function that flips (i.e., changes \'O\' to \'X\') all regions that are surrounded by \'X\'. A region is surrounded if it is completely surrounded by \'X\', meaning that any \'O\' cell in the region cannot touch the boundary of the board. Example 1: Input: board = [ [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'O\', \'O\', \'X\'], [\'X\', \'X\', \'O\', \'X\'], [\'X\', \'O\', \'X\', \'X\'] ] Output: [ [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'X\', \'X\', \'X\'], [\'X\', \'O\', \'X\', \'X\'] ] Explanation: Surrounded regions should not be on the border, which means that any \'O\' on the border of the board and their connected \'O\'s will not be flipped to \'X\'. Any \'O\' that is surrounded by \'X\' will be flipped to \'X\'. Example 2: Input: board = [ [\'X\', \'X\', \'X\'], [\'X\', \'O\', \'X\'], [\'X\', \'X\', \'X\'] ] Output: [ [\'X\', \'X\', \'X\'], [\'X\', \'X\', \'X\'], [\'X\', \'X\', \'X\'] ] Constraints: * m == board.length * n == board[i].length * 1 <= m, n <= 200 * board[i][j] is \'X\' or \'O\'","solution":"def solve(board): if not board or not board[0]: return m, n = len(board), len(board[0]) def dfs(i, j): if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != \'O\': return board[i][j] = \'T\' dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) for i in range(m): if board[i][0] == \'O\': dfs(i, 0) if board[i][n - 1] == \'O\': dfs(i, n - 1) for j in range(n): if board[0][j] == \'O\': dfs(0, j) if board[m - 1][j] == \'O\': dfs(m - 1, j) for i in range(m): for j in range(n): if board[i][j] == \'O\': board[i][j] = \'X\' elif board[i][j] == \'T\': board[i][j] = \'O\'"},{"question":"Sam is a huge fan of palindrome numbers and he loves playing with them. One day, while playing with a sequence of numbers, he thought of a game involving palindromes. He wants your help to write a program to solve it. The game is as follows: Sam provides a sequence of numbers and you need to find out how many palindrome numbers are present in that sequence. A palindrome number is a number that reads the same backward as forward, for example, 121, 131, 1221, etc. Your task is to write a program that takes a sequence of numbers and determines the count of palindrome numbers in that sequence. Input: - The first line contains an integer N, denoting the number of elements in the sequence (1 ≤ N ≤ 1000). - The second line contains N integers separated by spaces, representing the sequence (each integer is guaranteed to be in the range 0 to 99999). Output: - Print the count of palindrome numbers in the sequence. Example Input: 5 121 131 20 33 454 Example Output: 4 Explanation: Out of the given numbers, 121, 131, 33, and 454 are palindrome numbers. Hence, the output is 4.","solution":"def count_palindromes(numbers): Returns the count of palindrome numbers in the given list of numbers. def is_palindrome(num): # Convert the number to string and check if it reads the same backwards return str(num) == str(num)[::-1] palindrome_count = sum(1 for num in numbers if is_palindrome(num)) return palindrome_count"},{"question":"You are given an array of integers, and your task is to determine the number of subarrays that have a sum equal to a given value `k`. For example, consider the array `nums = [1, 1, 1]` and `k = 2`. There are two subarrays whose sum equals `2`: - [1, 1] starting at index `0` and ending at index `1` - [1, 1] starting at index `1` and ending at index `2` Input Format The first line contains an integer `t`, the number of test cases. Each test case contains two lines: - The first line contains two space-separated integers `n` (the length of the array) and `k` (the target sum). - The second line contains `n` space-separated integers representing the elements of the array. Constraints - 1 leq t leq 100 - 1 leq n leq 10^4 - -10^4 leq nums[i] leq 10^4 - -10^9 leq k leq 10^9 Output Format For each test case, print the number of subarrays whose sum equals `k`. Sample Input 2 3 2 1 1 1 4 0 1 2 -2 3 Sample Output 2 1 Explanation In the first test case, there are two subarrays of `nums` with a sum of `2`: [1, 1] and [1, 1]. In the second test case, there is one subarray of `nums` with a sum of `0`: [2, -2]. Hints - A naive solution is to consider all subarrays and calculate their sums, but since the array length can be up to `10^4`, an efficient approach involving prefix sums or hash maps for storing intermediate sums can be used to achieve the desired complexity.","solution":"def subarray_sum(nums, k): Returns the number of subarrays whose sum equals k. count = 0 cum_sum = 0 sum_dict = {0: 1} # Dictionary to store cumulative sums and their counts for num in nums: cum_sum += num if (cum_sum - k) in sum_dict: count += sum_dict[cum_sum - k] if cum_sum in sum_dict: sum_dict[cum_sum] += 1 else: sum_dict[cum_sum] = 1 return count def process_input(t, test_cases): results = [] for case in test_cases: n, k = case[0] nums = case[1] result = subarray_sum(nums, k) results.append(result) return results def main(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, k = map(int, lines[index].split()) nums = list(map(int, lines[index + 1].split())) test_cases.append(((n, k), nums)) index += 2 results = process_input(t, test_cases) for result in results: print(result)"},{"question":"In a distant land, the king has a collection of magical pearls arranged in a circle. Each pearl has a magical integer value associated with it. These pearls must be divided into two contiguous groups in such a way that the absolute difference in the sum of the values in the two groups is minimized. Can you help the king determine the minimum possible absolute difference? -----Input----- The first line contains an integer n (2 ≤ n ≤ 100) — the number of pearls. The second line contains n integers a_i (-10^4 ≤ a_i ≤ 10^4) — the individual values of the pearls, given in the order they are arranged in the circle. -----Output----- Print a single integer — the minimum possible absolute difference between the sums of the two groups. -----Examples----- Input 4 1 2 3 4 Output 0 Input 5 1 3 -2 8 -7 Output 1 -----Note----- In the first example, dividing the pearls into two groups [1, 2, 3] and [4] gives a difference of abs((1+2+3) - 4) = 0. In the second example, dividing the pearls into two groups [1, 3, -2] and [8, -7] gives a difference of abs((1+3-2) - (8-7)) = 1.","solution":"def min_diff_pearl_groups(n, pearls): total_sum = sum(pearls) min_diff = float(\'inf\') for i in range(n): current_sum = 0 for j in range(n): current_sum += pearls[(i + j) % n] other_sum = total_sum - current_sum min_diff = min(min_diff, abs(current_sum - other_sum)) return min_diff"},{"question":"You are given an undirected graph representing a network of servers and connections between them. The graph consists of `n` servers and `m` bidirectional connections, where the cost of maintaining each connection is given. Your task is to optimize the network in such a way that the total maintenance cost of the connections is minimized and the network remains fully connected. In other words, you need to find a minimum spanning tree (MST) of the graph. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of servers and the number of connections, respectively. The next `m` lines each contain three integers `a`, `b`, and `c` (1 ≤ a, b ≤ n, a ≠ b, 1 ≤ c ≤ 1000), where `a` and `b` are the endpoints of a connection, and `c` is the maintenance cost of that connection. Output Print a single integer — the minimum total maintenance cost of the network. Example Input 4 5 1 2 1 1 3 4 2 3 1 2 4 2 3 4 3 Output 4 Input 3 3 1 2 3 2 3 2 1 3 1 Output 3","solution":"def find(parent, i): A function to find the set of an element i using path compression. if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): A function that does union of two sets of x and y using rank. rootX = find(parent, x) rootY = find(parent, y) if rank[rootX] < rank[rootY]: parent[rootX] = rootY elif rank[rootX] > rank[rootY]: parent[rootY] = rootX else: parent[rootY] = rootX rank[rootX] += 1 def kruskal(n, edges): Main function to perform Kruskal\'s algorithm to find the MST of a graph. edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_cost = 0 mst_edges = 0 for edge in edges: u, v, w = edge rootU = find(parent, u) rootV = find(parent, v) if rootU != rootV: mst_cost += w mst_edges += 1 union(parent, rank, rootU, rootV) if mst_edges == n - 1: break return mst_cost def minimum_total_maintenance_cost(n, m, connections): edges = [(a-1, b-1, c) for a, b, c in connections] return kruskal(n, edges)"},{"question":"A company is organizing a team-building event in which employees are grouped into teams based on their ranks. Each team must consist of a consecutive sequence of employees with ranks [l, l+1, ..., r-1, r], and should not include any other ranks. Additionally, every employee rank must be contained within exactly one team. The company wants to maximize the number of teams while ensuring every team has at least one employee with each rank from its start to end rank. -----Constraints----- - 1 ≤ N ≤ 10^5 (number of employees) - 1 ≤ Rank[i] ≤ 10^5 (rank of the i-th employee) -----Input----- The input is given from Standard Input in the following format: N Rank[1] Rank[2] ... Rank[N] -----Output----- Print the maximum number of teams that can be formed. -----Sample Input----- 7 1 2 3 4 5 6 7 -----Sample Output----- 1 The consecutive sequence [1, 2, 3, 4, 5, 6, 7] forms one team. -----Sample Input 2----- 10 1 2 3 4 6 7 8 9 10 12 -----Sample Output 2----- 3 The consecutive sequences [1, 2, 3, 4], [6, 7, 8, 9, 10], and [12] form three teams.","solution":"def max_teams_count(ranks): Returns the maximum number of teams that can be formed based on the given ranks. ranks = sorted(set(ranks)) # Sort and remove duplicates n = len(ranks) if n == 0: return 0 teams = 0 i = 0 while i < n: teams += 1 while i < n - 1 and ranks[i] + 1 == ranks[i + 1]: i += 1 i += 1 return teams"},{"question":"You are working on a personal finance tool where users can track their expenses. An important feature is to categorize the expense transactions based on their description. The tool uses three predefined categories: `Food`, `Transport`, and `Entertainment`. Any transaction that does not fall into these categories should be categorized as `Misc`. Your task is to write a function that takes a list of expenses in the format `amount_description` (e.g., `15.50_dinner`, `2.75_bus`, `20_movies`) and categorizes them. By default, keywords associated with the categories are: - `Food`: dinner, lunch, breakfast, snack, grocery - `Transport`: bus, taxi, train, fuel - `Entertainment`: movies, concert, game The function should return the total amount spent per category in a dictionary format. For example, given: ```python [ \\"15.50_dinner\\", \\"2.75_bus\\", \\"8.20_grocery\\", \\"10_movies\\", \\"5.00_snack\\", \\"12.30_train\\", \\"4.50_taxi\\", \\"3.00_coffee\\" ] ``` output: ```python { \\"Food\\": 28.70, \\"Transport\\": 19.55, \\"Entertainment\\": 10.00, \\"Misc\\": 3.00 } ``` Assume that: 1. Only strings in the format `amount_description` will be passed in 2. Descriptions and amounts will always be valid and properly formatted 3. Location of keywords within the description can vary (e.g., `bus ticket` or `ticket bus`) 4. All amounts will be positive decimal values 5. There will be no duplicate transactions Your task is to implement the function `categorize_expenses(expenses: List[str]) -> Dict[str, float]` that accomplishes the above requirements.","solution":"from typing import List, Dict def categorize_expenses(expenses: List[str]) -> Dict[str, float]: # Keywords associated with each category categories = { \\"Food\\": [\\"dinner\\", \\"lunch\\", \\"breakfast\\", \\"snack\\", \\"grocery\\"], \\"Transport\\": [\\"bus\\", \\"taxi\\", \\"train\\", \\"fuel\\"], \\"Entertainment\\": [\\"movies\\", \\"concert\\", \\"game\\"], } # Initialize totals for each category totals = { \\"Food\\": 0.0, \\"Transport\\": 0.0, \\"Entertainment\\": 0.0, \\"Misc\\": 0.0, } # Helper function to find the category for a given description def find_category(description: str) -> str: for category, keywords in categories.items(): if any(keyword in description for keyword in keywords): return category return \\"Misc\\" # Process each expense for expense in expenses: amount_str, description = expense.split(\'_\', 1) amount = float(amount_str) category = find_category(description) totals[category] += amount return totals"},{"question":"A robot is located at the top-left corner of an `m x n` grid (marked \'Start\' in the diagram below): ``` [Start] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ End ] ``` The robot can only move either right or down at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'End\' in the diagram above). However, the grid contains obstacles, and the robot cannot move to those cells. The obstacles are represented as \'1\' and the empty spaces as \'0\' in a 2D grid. Write a program to count the number of unique paths that the robot can take to reach the bottom-right corner. The following example demonstrates the grid format: ------ Input ------ Several test cases are given. The first line of the input contains an integer T - the number of test cases. For each test case, the first line contains two integers, `m` and `n` (indicating the grid dimensions). The next `m` lines each contain `n` integers (either `0` or `1`) representing the grid. ------ Output ------ For each test case output a single integer - the number of unique paths from top-left corner to bottom-right corner of the grid. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ m, n ≤ 100 The grid values are only 0 or 1, where 0 indicates an empty cell and 1 indicates an obstacle. ------ Sample Input 1 ------ 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 1 0 ------ Sample Output 1 ------ 2 0","solution":"def unique_paths_with_obstacles(m, n, grid): if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0 for _ in range(n)] for _ in range(m)] dp[0][0] = 1 # Starting point for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1] def solve(t, cases): results = [] for case in cases: m, n, grid = case results.append(unique_paths_with_obstacles(m, n, grid)) return results"},{"question":"You are given a list of strings and an integer k. Your task is to sort the strings based on their lengths in descending order and then return the k-th longest string. If multiple strings have the same length, maintain their relative order from the input list. Input The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 50) — the number of strings and the position of the desired string, respectively. The next n lines each contain one string. Each string consists of between 1 and 1000 lowercase English letters. Output A single line containing the k-th longest string after sorting by length. Examples Input 5 2 apple banana kiwi watermelon grape Output banana Input 4 1 cat dog bird elephant Output elephant","solution":"def kth_longest_string(strings, k): Sorts the list of strings by their lengths in descending order and returns the k-th longest string. If multiple strings have the same length, maintains their relative order from the input list. # Sort strings by their lengths in descending order; if lengths are the same, maintain original order sorted_strings = sorted(strings, key=lambda x: len(x), reverse=True) return sorted_strings[k-1]"},{"question":"A company warehouse has a pallet rack system consisting of N rows, each with a capacity for K pallets. Each pallet contains a crate that can be labeled with a unique identifier. The warehouse manager wants to randomly place M unique pallets with their identifiers into the racks while ensuring that each row does not exceed its capacity. Write a program that randomly generates a valid configuration fitting this criteria and returns it. -----Constraints----- - 1 leq N leq 10^3 - 1 leq K leq 10^3 - 1 leq M leq N times K - Identifiers are distinct integers from 1 to M -----Input----- Input is given from Standard Input in the following format: N K M -----Output----- Print N lines, each containing space-separated integers representing the identifiers of the pallets in that row. Rows with fewer than K identifiers should still have the printed identifiers separated by spaces, and the remaining space should be left blank. -----Sample Input----- 3 4 10 -----Sample Output----- 1 2 3 4 5 6 7 8 9 10 (Note: This is a sample output. The actual output could differ each time due to the random placement.)","solution":"import random def randomly_place_pallets(N, K, M): Randomly places M unique pallets with identifiers from 1 to M into racks with N rows and K capacity per row. pallet_ids = list(range(1, M + 1)) random.shuffle(pallet_ids) warehouse = [] index = 0 for _ in range(N): row = [] for _ in range(K): if index < M: row.append(pallet_ids[index]) index += 1 else: row.append(\'\') warehouse.append(row) return warehouse def print_warehouse(warehouse): for row in warehouse: print(\' \'.join(map(str, row)).rstrip())"},{"question":"Given a list of temperatures recorded over a week, compute the average of the three highest unique temperatures. *Parameters*: `temperature` array. *Example input*: ``` temperatures = [30, 30, 32, 33, 31, 29, 28] ``` *Output*: `32.0` In this example, the top three highest unique temperatures are 33, 32, and 31. The average of these values is `(33 + 32 + 31) / 3 = 32.0`. # Constraints: * The array will contain at least three temperatures. * All temperatures are integers and can be positive or negative. # Notes: * Ensure to consider only unique temperatures. * Output should be a floating-point number even if the result is a whole number. ___ Examples: ``` temperatures = [25, 28, 32, 29, 35, 30, 28, 31] // returns 32.666666666666664 - three highest unique temperatures are [35, 32, 31] and their average is (35 + 32 + 31) / 3 = 32.666666666666664 temperatures = [-10, 20, 20, 15, 5, 10, 8] // returns 15.0 - three highest unique temperatures are [20, 15, 10] and their average is (20 + 15 + 10) / 3 = 15.0 temperatures = [10, 15, 10, 15, 10, 15, 10, 15] // returns 15.0 - three highest unique temperatures (which themselves repeat) are [15, 10] but here [15, 10, <duplicate>] and their average is (15 + 10 + 10) / 3 = 11.666666666666666 ```","solution":"def average_of_top_three_unique_temperatures(temperatures): Returns the average of the top three highest unique temperatures from a given list. Args: temperatures (list of int): List of temperatures recorded. Returns: float: Average of the top three highest unique temperatures. unique_temperatures = list(set(temperatures)) unique_temperatures.sort(reverse=True) top_three_temperatures = unique_temperatures[:3] average = sum(top_three_temperatures) / len(top_three_temperatures) return average"},{"question":"You have been given three dates, each represented by a tuple containing three integers: year, month, and day respectively. These tuples represent significant events on a particular calendar. Your task is to find the date that comes in between the earliest and the latest of the three dates. Write a function that, given three dates, determines the middle date. -----Input----- The input contains three tuples. Each tuple contains three integers in the format ((yyyy, mm, dd)). 1. (yyyy) (1000 ≤ yyyy ≤ 9999) - a four-digit year 2. (mm) (1 ≤ mm ≤ 12) - a month of the year 3. (dd) (1 ≤ dd ≤ 31) - a day of the month Note: The input data will guarantee that no two dates will be the same, and the day, month combination will always be valid for the given year. -----Output----- Output the middle date in the same format (yyyy, mm, dd). -----Examples----- Sample Input: (2020, 5, 17) (2019, 11, 1) (2021, 1, 25) Sample Output: (2020, 5, 17) Sample Input: (1700, 6, 5) (1800, 1, 20) (1600, 12, 31) Sample Output: (1700, 6, 5)","solution":"def find_middle_date(date1, date2, date3): Returns the middle date from the given three dates. Each date is a tuple in the format (yyyy, mm, dd). dates = [date1, date2, date3] dates.sort() return dates[1]"},{"question":"Given an array of integers and a target integer value, write a function to determine if there are two distinct numbers in the array whose sum equals the target value. The function should return a boolean value: `True` if such a pair exists and `False` otherwise. # Input - An array of integers `arr` (0 ≤ length of arr ≤ 10^4, -10^5 ≤ arr[i] ≤ 10^5) - An integer `target` (-10^5 ≤ target ≤ 10^5) # Output - A boolean value indicating whether the array contains two distinct elements whose sum equals the target value. # Example For example, if the input array is `[2, 7, 11, 15]` and the target is `9`, the function should return `True` because 2 + 7 equals 9. Similarly, if the input array is `[1, 2, 3, 4]` and the target is `8`, the function should return `False` because no two distinct numbers in the array add up to 8.","solution":"def has_pair_with_sum(arr, target): Determines if there are two distinct numbers in the array whose sum equals the target value. Parameters: arr (list of int): The array of integers. target (int): The target sum. Returns: bool: True if a pair with the target sum exists, False otherwise. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"```markdown # Task Consider a function that takes two strings `str1` and `str2`, and returns the length of their longest common subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example, consider the strings `str1` = \\"abcde\\" and `str2` = \\"ace\\": - The longest common subsequence is \\"ace\\", which has a length of 3. Your task is to implement this function. # Input / Output - `[input]` string `str1` A string with length 1 ≤ len(str1) ≤ 1000 - `[input]` string `str2` A string with length 1 ≤ len(str2) ≤ 1000 - `[output]` an integer The length of the longest common subsequence of `str1` and `str2` ```","solution":"def longest_common_subsequence(str1, str2): Returns the length of the longest common subsequence of str1 and str2. m, n = len(str1), len(str2) # Create a 2D table to store lengths of longest common subsequence dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array from bottom up for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n]"},{"question":"In this task, you will be given a series of operations to perform on a stack. Initially, the stack is empty. Each operation will be one of the following: 1. `push X` — Push the integer X onto the stack. 2. `pop` — Remove the top element from the stack. 3. `max` — Output the maximum element currently in the stack. Implement a function `stack_operations` that takes a list of operations and returns the results of all `max` operations as a list. ``` Examples: stack_operations([\\"push 3\\", \\"push 2\\", \\"max\\", \\"pop\\", \\"max\\"]) = [3, 3] stack_operations([\\"push 1\\", \\"push 2\\", \\"push 3\\", \\"max\\", \\"pop\\", \\"max\\"]) = [3, 2] stack_operations([\\"push 5\\", \\"push 1\\", \\"max\\", \\"pop\\", \\"max\\", \\"pop\\", \\"max\\"]) = [5, 5, None] ``` Notes: - If a `pop` operation is called on an empty stack, ignore it. - If the stack is empty when `max` is called, return `None` for that operation.","solution":"def stack_operations(operations): Perform a series of stack operations and return the results of \'max\' operations. Parameters: operations (list): A list of operations to perform on the stack. Returns: list: The results of all \'max\' operations. stack = [] max_stack = [] result = [] for operation in operations: if operation.startswith(\\"push\\"): _, value = operation.split() value = int(value) stack.append(value) if not max_stack or value >= max_stack[-1]: max_stack.append(value) elif operation == \\"pop\\": if stack: value = stack.pop() if max_stack and value == max_stack[-1]: max_stack.pop() elif operation == \\"max\\": if max_stack: result.append(max_stack[-1]) else: result.append(None) return result"},{"question":"You are given a list of N integers. Your task is to partition the list into two subarrays such that the absolute difference between the sums of the two subarrays is minimized. Return the minimized absolute difference. Example 1: Input: N = 4 Arr[] = {1, 6, 11, 5} Output: 1 Explanation: We can partition the list into {1, 6, 5} and {11}. The sums of these subarrays are 12 and 11, and their absolute difference is 1, which is minimized. Example 2: Input: N = 5 Arr[] = {3, 1, 4, 2, 2} Output: 0 Explanation: We can partition the list into {1, 4, 2} and {3, 2}. The sums of these subarrays are 7 and 7, and their absolute difference is 0, which is minimized. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minPartitionDifference() which takes the array of integers arr and n as parameters and returns an integer representing the minimized absolute difference. Expected Time Complexity: O(N*sum(Arr)) Expected Auxiliary Space: O(N*sum(Arr)) Constraints: 1 <= N <= 100 1 <= Arr[i] <= 100","solution":"def minPartitionDifference(arr, n): Returns the minimized absolute difference between the sums of two subarrays. total_sum = sum(arr) half_sum = total_sum // 2 # DP array to track achievable sums dp = [False] * (half_sum + 1) dp[0] = True for num in arr: for j in range(half_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] # Find the largest value j <= half_sum that can be achieved for j in range(half_sum, -1, -1): if dp[j]: sum1 = j sum2 = total_sum - sum1 return abs(sum2 - sum1)"},{"question":"Anagram Checker Given two strings, determine if one is an anagram of the other. Input Two lowercase strings s1 and s2 separated by a space character are given in a line. Output Print \\"YES\\" if s1 is an anagram of s2, otherwise print \\"NO\\". Constraints * 1 leq |s1|, |s2| leq 10^6 * s1 and s2 will consist of lowercase alphabets only. Sample Input 1 listen silent Sample Output 1 YES Sample Input 2 hello world Sample Output 2 NO Sample Input 3 anagram nagaram Sample Output 3 YES Sample Input 4 rat car Sample Output 4 NO Example Input listen silent Output YES","solution":"def are_anagrams(s1, s2): Returns \\"YES\\" if s1 is an anagram of s2, otherwise \\"NO\\". if len(s1) != len(s2): return \\"NO\\" return \\"YES\\" if sorted(s1) == sorted(s2) else \\"NO\\""},{"question":"You are given a rectangular grid of size `n` by `m` where each cell in the grid contains a number representing its height. Your task is to find the coordinates of the lowest point in the grid, i.e., the cell that contains the minimum height. If there are multiple cells with the same minimum height, return the coordinates of the lexicographically smallest one. Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the number of rows and columns in the grid. Each of the next `n` lines contains `m` integers each, representing the height of the corresponding cell in the grid. Each height is a non-negative integer not exceeding `10^9`. Output Output two integers `x` and `y`, the coordinates of the lowest point in the grid. The coordinates are 1-based; `x` represents the row number and `y` represents the column number. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 1 1 Input 4 4 10 20 30 40 50 5 60 70 5 80 90 100 5 110 120 130 Output 2 2 Input 2 5 3 3 3 3 3 3 3 3 2 3 Output 2 4 Note: In the last example, the lowest point (minimum height) is `2` and its coordinates are `(2, 4)` since it appears at row 2, column 4.","solution":"def find_lowest_point(n, m, grid): Returns the coordinates of the lowest point in the grid. min_height = float(\'inf\') min_coords = (1, 1) for i in range(n): for j in range(m): if grid[i][j] < min_height: min_height = grid[i][j] min_coords = (i + 1, j + 1) elif grid[i][j] == min_height: if (i + 1, j + 1) < min_coords: min_coords = (i + 1, j + 1) return min_coords"},{"question":"You are given a list of integers where each integer represents the number of units sold for a product on a specific day. You want to know the maximum units sold for any contiguous subarray of the days. Write a program that, given an array of integers, finds the contiguous subarray (containing at least one number) which has the largest sum and returns its sum. Input The input consists of a single test case. The first line contains an integer N (1 ≤ N ≤ 100,000) indicating the number of integers in the array. The second line contains N integers A1, A2, ..., AN (−10,000 ≤ Ai ≤ 10,000) representing the number of units sold on each day. Output Print a single integer, which is the sum of the contiguous subarray with the largest sum. Example Input: 8 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum of 6.","solution":"def max_subarray_sum(nums): Finds the sum of the contiguous subarray with the largest sum. Args: nums: List of integers representing the number of units sold each day. Returns: An integer representing the maximum sum of the contiguous subarray. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"You are given a 2-dimensional rectangular grid of n rows and m columns. Each cell of the grid can either be empty or contain an obstacle. Natasha starts from the top-left cell (1, 1) and wants to reach the bottom-right cell (n, m). From any cell (i, j), she can move to the adjacent cells directly to the right (i, j+1) or directly down (i+1, j), provided these cells are within the grid and are not blocked by an obstacle. Natasha’s goal is to reach the bottom-right cell using the minimum number of moves possible. Help Natasha determine this minimum number of moves. If it is not possible for Natasha to reach the bottom-right cell, return -1. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the grid. The next n lines each contain m characters, representing the grid. A \'.\' character indicates an empty cell, and a \'#\' character indicates a cell with an obstacle. Output Output a single integer, representing the minimum number of moves required for Natasha to reach the bottom-right cell, or -1 if it is not possible. Examples Input 3 4 ...# ..#. #... Output 5 Input 2 2 .# #. Output -1 Note In the first example, Natasha can move as follows: (1, 1) → (1, 2) → (2, 2) → (2, 3) → (3, 3) → (3, 4) In the second example, it is impossible for Natasha to reach (2, 2) due to obstacles blocking her path.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, moves) visited[0][0] = True while queue: row, col, moves = queue.popleft() if row == n - 1 and col == m - 1: return moves for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, moves + 1)) return -1"},{"question":"You are given an undirected graph with `N` nodes and `M` edges. Each edge `i` has a weight `W_i` and connects two distinct nodes `U_i` and `V_i`. Your task is to determine if there exists a cycle in the graph such that the sum of the weights of the edges in the cycle is an even number. ------ Input: ------ First line will contain two integers `N` and `M`, representing the number of nodes and edges in the graph respectively. Next `M` lines will each contain three integers `U_i`, `V_i` and `W_i` representing an edge between nodes `U_i` and `V_i` with weight `W_i`. ------ Output: ------ Output \\"YES\\" if such a cycle exists, otherwise output \\"NO\\". ------ Constraints ------ ``` 2 ≤ N ≤ 10^5 0 ≤ M ≤ 2 * 10^5 1 ≤ W_i ≤ 10^9 ``` ----- Sample Input 1 : ------ ``` 5 5 1 2 3 2 3 4 3 4 5 4 5 6 5 1 7 ``` ----- Sample Output 1 : ------ ``` YES ``` ----- Sample Input 2 : ------ ``` 4 3 1 2 1 2 3 3 3 4 5 ``` ----- Sample Output 2 : ------ ``` NO ``` ----- Explanation 1 : ------ In Sample Input 1, there exists a cycle `1-2-3-4-5-1` with edge weights `3, 4, 5, 6, 7`, summing to `25`, which is an odd number. However, there are cycles such as `2-3-4-2` with edge weights `4, 5, 4`, summing to `13` but no even sum cycles exist. Thus, the result is \\"NO\\". In Sample Input 2, there is no cycle at all as there are only three edges, and they\'re not forming a cycle. Thus, the result is \\"NO\\".","solution":"def find_cycle_with_even_weight(n, m, edges): from collections import defaultdict import sys sys.setrecursionlimit(200000) graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) visited = [False] * (n + 1) start = [0] * (n + 1) def dfs(node, parent, weight): visited[node] = True start[node] = weight % 2 for neighbor, edge_weight in graph[node]: if not visited[neighbor]: if dfs(neighbor, node, weight + edge_weight): return True elif neighbor != parent: if (weight + edge_weight) % 2 == 0: return True return False for i in range(1, n + 1): if not visited[i]: if dfs(i, -1, 0): return \\"YES\\" return \\"NO\\""},{"question":"**Problem Statement** You are given an n x n grid, where each cell is initially empty. The coordinates (i, j) of the grid are represented with (1,1) being the top-left corner and (n,n) being the bottom-right corner. You have a drone that can take off from any empty cell, and your task is to move the drone to a target cell while encountering the least possible number of obstacles. The drone can move up, down, left, or right, taking one step at a time. Each cell on the grid may contain: * Empty cell (\'.\') * An obstacle (\'#\') You will be given a starting position (sx, sy) and a target position (tx, ty). Your objective is to calculate the minimum number of steps required to move the drone from the starting position to the target position, avoiding obstacles. If there is no possible route, return -1. # Input - The first line contains an integer n (2 ≤ n ≤ 100), the size of the grid. - The next n lines each contain a string of length n, representing the grid. - The last line contains four integers sx, sy, tx, ty (1 ≤ sx, sy, tx, ty ≤ n), which are the starting and target positions respectively. It is guaranteed that the starting and target positions are empty cells (\'.\'). # Output - Output a single integer, the minimum number of steps required to reach the target, or -1 if there is no possible route. # Sample Input 5 ..... ..#.. ..... ..#.. ..... 1 1 5 5 # Sample Output 8 **Explanation:** In the given example, the drone needs to navigate from position (1,1) to (5,5). The optimal route can be: (1,1) -> (2,1) -> (3,1) -> (4,1) -> (5,1) -> (5,2) -> (5,3) -> (5,4) -> (5,5) Hence, the minimum number of steps required is 8.","solution":"from collections import deque def min_steps_to_target(n, grid, sx, sy, tx, ty): Returns the minimum number of steps required to move the drone from the starting position (sx, sy) to the target position (tx, ty), avoiding obstacles. If there is no path, returns -1. # Adjust for 0-based indexing as per Python\'s list handling sx -= 1 sy -= 1 tx -= 1 ty -= 1 # Directions for moving in 4 possible ways: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < n and grid[x][y] == \'.\' queue = deque([(sx, sy, 0)]) # The queue stores tuples of (current_x, current_y, current_steps) visited = set((sx, sy)) while queue: x, y, steps = queue.popleft() if (x, y) == (tx, ty): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"In a distant land, there exists a phrase made up of N lowercase English letters. The king of this land has tasked you with finding the most frequent letter in the phrase. If there are multiple letters with the same highest frequency, you must return the lexicographically smallest letter among them. ------ Input ------ The first line contains the number of test cases, T. Each of the following T lines contains a phrase made up of lowercase English letters. Each phrase will contain at least one letter and at most 1000 letters. ------ Output ------ For each test case, output on a new line the most frequent letter. If there is a tie in frequency, output the lexicographically smallest letter. ------ Constraints: ------ 1 ≤ T ≤ 10 1 ≤ |phrase| ≤ 1000 ----- Sample Input 1 ------ 2 abacab zzyyxx ----- Sample Output 1 ------ a x","solution":"def most_frequent_letter(phrases): Takes a list of phrases and returns the most frequent letter from each phrase. If there are multiple letters with the same highest frequency, the lexicographically smallest letter among them is returned. results = [] for phrase in phrases: # Create a dictionary to count the frequency of each letter frequency = {} for letter in phrase: if letter in frequency: frequency[letter] += 1 else: frequency[letter] = 1 # Find the maximum frequency max_frequency = max(frequency.values()) # Identify all letters with the maximum frequency max_letters = [letter for letter in frequency if frequency[letter] == max_frequency] # Find the lexicographically smallest letter among those with the maximum frequency most_frequent = min(max_letters) results.append(most_frequent) return results"},{"question":"Lily loves numbers and has recently developed a fascination with prime numbers and their occurrence within ranges. She has challenged you to help her find the closest prime numbers around a given number `n`. You need to write a program to determine the nearest prime numbers less than or equal to `n` and greater than or equal to `n`. If `n` itself is a prime, it should be included in both calculations. If no prime number exists in the respective range, indicate it accordingly. -----Input----- An integer `n` (1 ≤ n ≤ 10^6). -----Output----- Print two lines. The first line should contain the nearest prime number less than or equal to `n` or \\"None\\" if there is no such prime in the range. The second line should contain the nearest prime number greater than or equal to `n` or \\"None\\" if there is no such prime in the range. -----Examples----- Input 10 Output 7 11 Input 17 Output 17 17 Input 1 Output None 2","solution":"def is_prime(num): Returns True if num is a prime number, otherwise False. if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num ** 0.5) + 1, 2): if num % i == 0: return False return True def closest_primes(n): Returns the closest prime numbers less than or equal to `n` and greater than or equal to `n`. lower_prime, higher_prime = None, None # Find lower prime for i in range(n, 0, -1): if is_prime(i): lower_prime = i break # Find higher prime i = n while not higher_prime: if is_prime(i): higher_prime = i break i += 1 return (lower_prime, higher_prime) def find_closest_primes(n): lower, higher = closest_primes(n) print(lower if lower is not None else \\"None\\") print(higher if higher is not None else \\"None\\")"},{"question":"Linda is working on an assignment to compress a list of integers. She needs to replace each integer in the list with its rank within the list. The rank of a number is its position in the sorted list of the unique elements. The smallest element gets the rank 1, the second smallest gets the rank 2, and so on. Duplicate elements should receive the same rank. Can you help Linda write a function to achieve this? -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the list. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9) — the elements of the list. -----Output----- Output a single line with n integers — the ranks replacing the original list elements. -----Examples----- Input 5 100 50 50 70 60 Output 4 1 1 3 2 Input 4 20 10 40 30 Output 2 1 4 3 Input 6 1 2 3 2 1 3 Output 1 2 3 2 1 3 -----Note----- In the first example, the unique elements in sorted order are [50, 60, 70, 100]. Thus, 50 gets rank 1, 60 gets rank 2, 70 gets rank 3, and 100 gets rank 4. So the ranks are [4, 1, 1, 3, 2]. In the second example, the unique elements in sorted order are [10, 20, 30, 40]. So their ranks are [1, 2, 3, 4]. Thus, the ranks of the list elements are [2, 1, 4, 3]. In the third example, the unique elements in sorted order are [1, 2, 3], so their ranks are [1, 2, 3]. Thus, the ranks of the list elements are [1, 2, 3, 2, 1, 3].","solution":"def replace_with_ranks(numbers): Replaces each integer in the list with its rank within the list. Parameters: numbers (list of int): A list of integers to be replaced with their ranks. Returns: list of int: The list of integers replaced with their ranks. sorted_unique_nums = sorted(set(numbers)) rank_map = {num: rank for rank, num in enumerate(sorted_unique_nums, start=1)} return [rank_map[num] for num in numbers]"},{"question":"For a given integer array A of length N, we define the \\"frequency spread\\" as the maximum frequency of any element in the array minus the minimum frequency of any element in the array. Given N and array A, compute the frequency spread of A. Constraints: 2 ≤ N ≤ 10^5 1 ≤ A[i] ≤ 10^9 for 1 ≤ i ≤ N Input format: The first line contains an integer N (length of the array). The second line contains N integers representing the array A. Output format: In one line, output the frequency spread of the array A. SAMPLE INPUT 6 4 5 6 4 6 4 SAMPLE OUTPUT 2 Explanation Element 4 appears 3 times, element 6 appears 2 times, and element 5 appears 1 time. The maximum frequency is 3 and the minimum frequency is 1. Therefore, the frequency spread is 3 - 1 = 2.","solution":"def frequency_spread(N, A): from collections import Counter # Count the frequency of each element in the array frequency = Counter(A) # Get the maximum and minimum frequency max_freq = max(frequency.values()) min_freq = min(frequency.values()) # Return the frequency spread return max_freq - min_freq"},{"question":"Reverse Words in a Given String Overview In this task, you are required to write a function that takes a string as input and returns the string with the words in reverse order. For example: - If the input string is `\\"Hello World\\"`, the output should be `\\"World Hello\\"`. - If the input string is `\\"Coding is fun\\"`, the output should be `\\"fun is Coding\\"`. Detailed Requirements - The function should maintain the original word order within the string. - Words are separated by one or more spaces. - The input string may contain leading or trailing spaces. - The returned string should not have any leading or trailing spaces. - There should be exactly one space between each word in the returned string. Function Signature (Python) ```python def reverse_words(s: str) -> str: ``` # Example ```python assert reverse_words(\\"Hello World\\") == \\"World Hello\\" assert reverse_words(\\" Coding is fun \\") == \\"fun is Coding\\" assert reverse_words(\\"SingleWord\\") == \\"SingleWord\\" assert reverse_words(\\"\\") == \\"\\" ``` Additional Challenge The basic requirement is to write a function that produces the correct output. Once you have done that, consider optimizing it. **Extension:** What if the input string is very large? How would you handle the performance considerations around memory and processing time?","solution":"def reverse_words(s: str) -> str: This function takes a string `s` and returns the string with words in reverse order. Leading and trailing spaces are removed and there is exactly one space between words in the output. # Split the string by spaces to get words words = s.split() # Reverse the list of words reversed_words = words[::-1] # Join the reversed list of words with a single space return \\" \\".join(reversed_words)"},{"question":"Two friends, Alice and Bob, are playing a game with numbers. Alice likes even numbers, and Bob likes odd numbers. They have an array of n integers. Each friend takes turns picking a number from either end of the array. Alice always goes first. The goal of the game is to maximize their score, which is the sum of all the numbers they have picked at the end of the game. Alice can only pick even numbers, and Bob can only pick odd numbers. If it\'s a player\'s turn and no valid number is available for them to pick, they skip their turn. Given the initial array, determine the final score for both Alice and Bob. Input The first line of input is a single integer n (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n space-separated integers, a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1,000,000), representing the elements of the array. Output Output two space-separated integers: the final scores of Alice and Bob, respectively. Example Input 6 2 3 5 8 7 4 Output 14 15 Explanation The array is [2, 3, 5, 8, 7, 4]. The game plays out as follows: - Alice picks 2 from the left (array becomes [3, 5, 8, 7, 4]). - Bob picks 3 from the left (array becomes [5, 8, 7, 4]). - Alice picks 8 from the right (array becomes [5, 8, 7]). - Bob picks 5 from the left (array becomes [7, 4]). - Alice picks 4 from the right (array becomes [7]). - Bob picks 7 from the left (array becomes []). Final scores are: Alice = 2 + 8 + 4 = 14, Bob = 3 + 5 + 7 = 15.","solution":"def game_with_numbers(n, arr): alice_score = 0 bob_score = 0 left = 0 right = n - 1 is_alice_turn = True while left <= right: if is_alice_turn: # Alice\'s turn to pick if arr[left] % 2 == 0: alice_score += arr[left] left += 1 elif arr[right] % 2 == 0: alice_score += arr[right] right -= 1 else: is_alice_turn = False continue else: # Bob\'s turn to pick if arr[left] % 2 != 0: bob_score += arr[left] left += 1 elif arr[right] % 2 != 0: bob_score += arr[right] right -= 1 else: is_alice_turn = True continue is_alice_turn = not is_alice_turn return alice_score, bob_score"},{"question":"Given an integer array nums representing the stock prices on different days, your task is to find the maximum profit you can achieve by buying and selling one share only. You cannot engage in multiple transactions (i.e., buy one share and then later sell it once). Given are n, representing the number of elements in the array, and nums, representing the array of stock prices. Write a function maxProfit which takes an integer n and an array of integers nums as input and returns the maximum profit you can achieve from this transaction. If no profit can be achieved, return 0. # Example ```plaintext >>> maxProfit(6, [7, 1, 5, 3, 6, 4]) 5 >>> maxProfit(5, [7, 6, 4, 3, 1]) 0 ``` # Constraints - 1 <= n <= 10^5 - 0 <= nums[i] <= 10^4 # Explanation In the first example, the optimal solution is to buy on day 2 (price = 1) and sell on day 5 (price = 6), providing a maximum profit of 6 - 1 = 5. In the second example, no transaction is done as no profit is possible.","solution":"def maxProfit(n, nums): Returns the maximum profit that can be achieved from a single buy and sell transaction. Parameters: n : int : Number of elements in the array nums : list : Array of stock prices Returns: int : Maximum profit that can be achieved if n <= 1: return 0 min_price = float(\'inf\') max_profit = 0 for price in nums: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You are given two strings, `s` and `t`, that are both non-empty and of the same length. You need to check if you can make the string `t` by rotating the string `s` any number of times. Note that rotating a string by one position means moving the first character to the end of the string. For example, if you rotate the string \\"abcde\\" one time, you get \\"bcdea\\"; rotating it two times yields \\"cdeab\\", and so on. ------ Input ------ The first line of input contains a single integer `T` denoting the number of test cases. For each test case, there are two subsequent lines: - The first line contains the string `s`. - The second line contains the string `t`. ------ Output ------ For each test case, output \\"YES\\" if string `t` can be obtained by rotating string `s` any number of times, otherwise output \\"NO\\". ----- Constraints ------ 1 ≤ T ≤ 100 1 ≤ len(s), len(t) ≤ 100 ----- Sample Input 1 ------ 2 abcde cdeab abcde abced ----- Sample Output 1 ------ YES NO ----- Explanation ------ In the first test case, \\"cdeab\\" can be obtained by rotating \\"abcde\\" to the right by two positions. Therefore, the output is \\"YES\\". In the second test case, no amount of rotations of \\"abcde\\" can produce the string \\"abced\\". Therefore, the output is \\"NO\\".","solution":"def can_obtain_by_rotation(s, t): Checks if string `t` can be obtained by rotating string `s`. if len(s) != len(t): return \\"NO\\" # Concatenate s with itself and check if t is a substring of it doubled_s = s + s if t in doubled_s: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): results = [] for s, t in test_cases: results.append(can_obtain_by_rotation(s, t)) return results"},{"question":"You are tasked with implementing a task scheduler to manage and execute a set of tasks with certain dependencies. A task cannot be executed until all of its prerequisite tasks have been completed. Given a list of tasks and a list of dependencies between the tasks, you need to determine the order in which to execute the tasks. If it\'s impossible to execute all tasks due to a cyclic dependency, the program should return an error message. Constraints: * 1 leq t leq 1000: Number of tasks. * 0 leq d leq 10000: Number of dependencies. Input: The input is given in the following format: ``` t ; d dep_1 dep_2 : dep_d ``` Each dependency dep_i is given by: ``` a ; b ``` which indicates that task b depends on task a (i.e., task a must be completed before task b can be started). Output: If it is possible to execute all tasks, print a list of tasks in the order they should be executed (one task per line). If it\'s not possible, print \\"Cyclic dependency detected\\". Example: Input: ``` 5 4 0 1 1 2 2 3 3 4 ``` Output: ``` 0 1 2 3 4 ``` Input: ``` 3 3 0 1 1 2 2 0 ``` Output: ``` Cyclic dependency detected ```","solution":"def find_task_order(num_tasks, dependencies): from collections import defaultdict, deque # Initializing graph structures adj_list = defaultdict(list) in_degree = defaultdict(int) # Building the graph for dep in dependencies: a, b = dep adj_list[a].append(b) in_degree[b] += 1 # Queue for nodes with no incoming edges zero_in_degree_queue = deque([i for i in range(num_tasks) if in_degree[i] == 0]) topo_order = [] # Processing nodes with zero in-degree while zero_in_degree_queue: current = zero_in_degree_queue.popleft() topo_order.append(current) # Decrement in-degree for all neighbors for neighbor in adj_list[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # Check if we were able to order all tasks if len(topo_order) == num_tasks: return topo_order else: return \\"Cyclic dependency detected\\""},{"question":"You are given a string which represents a notebook with several pages. Each page contains lowercase English letters written continuously without spaces. The notebook also contains random noise characters represented by \\"#\\" which should be ignored as they do not contribute to the page content. However, the separator for pages is represented by a newline \\"n\\". Your task is to determine the longest page (in terms of the number of letters) in the notebook and return the count of distinct characters on that page. ------ Input Format ------ - The input consists of a single string representing the notebook. ------ Output Format ------ - Print a single integer representing the count of distinct characters on the longest page in the notebook. ------ Constraints ------ 1 leq |notebook| leq 10^5 ------ Sample Input 1 ------ abc#dnefghinjklmn#opn ------ Sample Output 1 ------ 6 ------ Explanation 1 ------ The notebook is divided into pages as follows: 1. \\"abcd\\" = distinct characters: 4 (a, b, c, d) 2. \\"efghi\\" = distinct characters: 5 (e, f, g, h, i) 3. \\"jklmnop\\" = distinct characters: 6 (j, k, l, m, n, o, p) The second page \\"jklmnop\\" is the longest with 6 distinct characters. Hence, the output is 6.","solution":"def count_distinct_chars_on_longest_page(notebook): Returns the count of distinct characters on the longest page in the notebook. # Split the notebook by pages pages = notebook.split(\'n\') # Initialize variables to track the longest page and its distinct character count max_length = 0 distinct_count = 0 # Process each page for page in pages: # Remove the noise characters clean_page = page.replace(\'#\', \'\') # Check if the current page is the longest if len(clean_page) > max_length: max_length = len(clean_page) distinct_count = len(set(clean_page)) return distinct_count"},{"question":"In a nearby galaxy, there is a planet named Zog where the inhabitants have a peculiar way of calculating the distance between two cities. The planet is represented as an infinite 2D grid. Each city is located at an integer coordinate point (x, y). The distance between two cities located at (x1, y1) and (x2, y2) is defined as the sum of the absolute differences of their coordinates: |x2 - x1| + |y2 - y1|. Zogonian travelers frequently need to find the shortest path distance from the central city, located at (0, 0), to other cities spread across the planet. Given a list of destinations, can you help them determine the distance from (0, 0) to each city? ------ Input ------ The first line of the input contains a single integer T representing the number of test cases. Each of the next T lines contains two space-separated integers x and y, representing the coordinates of a destination city. ------ Output ------ For each test case, output a single integer - the distance from the central city (0, 0) to the city at (x, y). ------ Constraints ------ 1 ≤ T ≤ 10^{5} |x|, |y| ≤ 10^{9} ----- Sample Input 1 ------ 3 1 2 -3 4 5 -6 ----- Sample Output 1 ------ 3 7 11 ------ Explanation 1 ------ Example case 1: The distance from (0, 0) to (1, 2) is |1 - 0| + |2 - 0| = 1 + 2 = 3. Example case 2: The distance from (0, 0) to (-3, 4) is |-3 - 0| + |4 - 0| = 3 + 4 = 7. Example case 3: The distance from (0, 0) to (5, -6) is |5 - 0| + |-6 - 0| = 5 + 6 = 11.","solution":"def calculate_distances(test_cases): Calculate the distance from the central city (0, 0) to each given city. :param test_cases: List of tuples where each tuple contains the coordinates (x, y) of a city. :return: List of distances from the central city to each given city. distances = [] for x, y in test_cases: distance = abs(x) + abs(y) distances.append(distance) return distances"},{"question":"You are given an array of non-negative integers. Your task is to find the maximum sum of its non-contiguous subsequence. By non-contiguous, we mean that no two elements in the subsequence should be adjacent elements in the array. ------ Input ------ The first line contains an integer T, the number of test cases. Descriptions of test cases follow. The first line of each test case contains an integer n, the number of elements in the array. The second line of each test case contains n non-negative integers, the elements of the array. ------ Output ------ For each test case, output a single line containing the maximum sum of its non-contiguous subsequence. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10^{4} 0 ≤ text{array[i]} ≤ 10^{6} ------ Sample Input 1 ------ 2 4 3 2 5 10 3 3 2 7 ------ Sample Output 1 ------ 13 10 ------ Explanation 1 ------ For the first test case, the maximum sum is achieved by picking elements 3, 10 (3 + 10 = 13). For the second test case, the maximum sum is achieved by picking elements 3, 7 (3 + 7 = 10). Note that selecting adjacent elements is not allowed. For instance, even though {2, 5, 10} adds up to 17, it is not allowed since 5 and 10 are adjacent.","solution":"def max_non_contiguous_subsequence_sum(arr): incl = 0 # Max sum including the last element excl = 0 # Max sum excluding the last element for num in arr: # Current max excluding num is the max of the previous inclusive and exclusive sums new_excl = max(incl, excl) # Update incl to include the current number incl = excl + num excl = new_excl # Return the max of incl and excl return max(incl, excl) def solve_max_non_contiguous_subsequence_sum(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(max_non_contiguous_subsequence_sum(arr)) return results"},{"question":"# Problem Statement You are participating in a coding competition where one of the problems involves managing a list of tasks with specified priorities and durations. The challenge is to maximize the number of high-priority tasks you can complete within a given time limit. Each task has a unique priority and takes a certain amount of time to complete. Higher priority tasks should be prioritized over lower priority tasks if possible. # Task You are given a list of tasks, each with a priority and duration. Your objective is to determine the maximum number of high-priority tasks that can be completed within a given total time limit. # Input The input consists of a single test case formatted as follows: - The first line contains two integers ( n ) and ( T ) (( 1 leq n leq 100 ), ( 1 leq T leq 10,000 )) representing the number of tasks and the total time available, respectively. - The next ( n ) lines each contain two integers ( p_i ) and ( t_i ) (( 1 leq p_i leq 100 ), ( 1 leq t_i leq 1,000 )) representing the priority and duration of the ( i )-th task. # Output Output the maximum number of tasks that can be completed while maximizing the sum of their priorities within the given time limit. # Sample Input 1 ``` 5 10 3 3 4 2 2 4 5 1 1 6 ``` # Sample Output 1 ``` 4 ``` # Sample Explanation 1 The optimal way to maximize the number of high-priority tasks within the given time limit of 10 units is as follows: - Select task with priority 5 and duration 1. - Select task with priority 4 and duration 2. - Select task with priority 3 and duration 3. Thus, the total priority sum is ( 5 + 4 + 3 = 12 ) within 6 units of time, leaving 4 units, within which the next highest priority task 4 can be done. # Sample Input 2 ``` 4 7 7 2 6 1 5 3 4 4 ``` # Sample Output 2 ``` 3 ``` # Sample Explanation 2 The optimal way within the given time limit of 7 units is: - Select task with priority 4 and duration 4. - Select task with priority 6 and duration 3. Thus, the highest priority sum is ( 4 + 6 = 10 ).","solution":"def max_high_priority_tasks(n, T, tasks): # Sort tasks first by priority in decreasing order, then by duration in increasing order tasks.sort(key=lambda x: (-x[0], x[1])) total_time = 0 task_count = 0 for priority, duration in tasks: if total_time + duration <= T: total_time += duration task_count += 1 else: break return task_count"},{"question":"# Task Mary is throwing a party, and she decided to give away candies to her guests. However, she wants the distribution to be fair. She has a list of the number of candies each guest wants and wants to distribute candies such that no one gets more than they want, and the total number of candies distributed is maximized. Given the list `candies` where `candies[i]` represents the number of candies guest `i` wants, and an integer `total`, representing the total number of candies available, write a function to determine the maximum number of candies that can be fairly distributed. # Example For `candies = [2, 3, 7, 5]` and `total = 10`, the result should be `10`. The maximum number of candies that can be distributed is `10`. For `candies = [1, 1, 1, 1]` and `total = 5`, the result should be `4`. The maximum number of candies that can be distributed is `4`. # Input/Output - `[input]` array of integers `candies` The number of candies each guest wants. It will be an array of integers, with each integer representing the number of candies one guest wants. `1 <= candies.length <= 100` `1 <= candies[i] <= 100` - `[input]` integer `total` The total number of candies available. `1 <= total <= 10000` - `[output]` an integer The maximum number of candies that can be fairly distributed.","solution":"def max_candies_distributed(candies, total): This function determines the maximum number of candies that can be fairly distributed to guests given a list of candies each guest wants and the total number of candies available. # Sort the candies list to start distributing from those who want the least candies.sort() distributed = 0 for candy in candies: if total >= candy: distributed += candy total -= candy else: distributed += total break return distributed"},{"question":"You have been tasked with assessing the strength of passwords based on certain criteria. A strong password should satisfy the following conditions: 1. It contains at least one uppercase letter. 2. It contains at least one lowercase letter. 3. It contains at least one digit. 4. It contains at least one special character from this set: `!@#%^&*()-+` Given a password, determine whether it is strong or not. Your program should be able to process `t` different passwords. -----Input----- The first line contains one integer `t` (1 le t le 100) — the number of passwords to evaluate. Then the passwords follow, each represented by a separate line containing a string `s` (1 le |s| le 100) — the password to be tested. -----Output----- For each password, print `Strong` if the password meets all the criteria above, otherwise print `Weak`. -----Example----- Input 3 HelloWorld1! weakpassword123 AnotherPass2 Output Strong Weak Strong","solution":"def is_strong_password(password): Determines whether a password is strong based on the given criteria. has_upper = any(c.isupper() for c in password) has_lower = any(c.islower() for c in password) has_digit = any(c.isdigit() for c in password) has_special = any(c in \\"!@#%^&*()-+\\" for c in password) return has_upper and has_lower and has_digit and has_special def evaluate_passwords(passwords): Evaluates each of the provided passwords and returns \'Strong\' or \'Weak\' for each. results = [] for password in passwords: if is_strong_password(password): results.append(\'Strong\') else: results.append(\'Weak\') return results"},{"question":"In a distant land, there is a magical sequence known as the \\"Mystical Fibonacci Sequence,\\" which is slightly different from the usual Fibonacci sequence. The Mystical Fibonacci Sequence is defined as follows: - F(1) = 1 - F(2) = 1 - For n geq 3: F(n) = (F(n-1) + F(n-2) + n^2) mod 10^9+7 Given an integer t, determine the F(t) in this sequence. Input Format The first line contains an integer t (1 ≤ t ≤ 10^{18}) specifying the position in the sequence we want to compute. Output Format Print the value of F(t) modulo 10^9 + 7. Sample Input 5 Sample Output 35 Explanation The first five terms of the Mystical Fibonacci Sequence are: - F(1) = 1 - F(2) = 1 - F(3) = (1 + 1 + 3^2) = 11 - F(4) = (11 + 1 + 4^2) = 28 - F(5) = (28 + 11 + 5^2) = 64 Thus, F(5) = 64 modulo 10^9 + 7 = 35.","solution":"MOD = 10**9 + 7 def mystical_fibonacci(t): if t == 1 or t == 2: return 1 a, b = 1, 1 for n in range(3, t + 1): c = (a + b + n * n) % MOD a, b = b, c return b"},{"question":"You are working as a software engineer and are responsible for implementing a filtering system that matches certain products with their respective categories based on specific characteristics provided in a database. The characteristics are stored as key-value pairs, and each product can have multiple characteristics. The challenge is to filter the products effectively based on the provided category characteristics. Each product is represented as a dictionary with a unique identifier. Create a function `filter_products` that takes in two arguments: 1. `products`: A list of dictionaries where each dictionary represents a product with various characteristics. 2. `category_characteristics`: A dictionary where the keys are the characteristics and the values are the required values for the characteristics to match the category. The function should return a list of product identifiers (i.e., the values associated with the key \\"id\\") that match all of the characteristics specified in `category_characteristics`. # Input - `products`: A list of dictionaries, each containing product characteristics. - Example: ```python [ {\\"id\\": 101, \\"color\\": \\"blue\\", \\"size\\": \\"M\\", \\"brand\\": \\"BrandA\\"}, {\\"id\\": 102, \\"color\\": \\"red\\", \\"size\\": \\"L\\", \\"brand\\": \\"BrandB\\"}, {\\"id\\": 103, \\"color\\": \\"blue\\", \\"size\\": \\"S\\", \\"brand\\": \\"BrandA\\"}, {\\"id\\": 104, \\"color\\": \\"green\\", \\"size\\": \\"M\\", \\"brand\\": \\"BrandC\\"} ] ``` - `category_characteristics`: A dictionary specifying the required characteristics for the category. - Example: ```python { \\"color\\": \\"blue\\", \\"brand\\": \\"BrandA\\" } ``` # Output - A list of integers representing the identifiers of products that match all the specified characteristics. # Example ```python products = [ {\\"id\\": 101, \\"color\\": \\"blue\\", \\"size\\": \\"M\\", \\"brand\\": \\"BrandA\\"}, {\\"id\\": 102, \\"color\\": \\"red\\", \\"size\\": \\"L\\", \\"brand\\": \\"BrandB\\"}, {\\"id\\": 103, \\"color\\": \\"blue\\", \\"size\\": \\"S\\", \\"brand\\": \\"BrandA\\"}, {\\"id\\": 104, \\"color\\": \\"green\\", \\"size\\": \\"M\\", \\"brand\\": \\"BrandC\\"} ] category_characteristics = { \\"color\\": \\"blue\\", \\"brand\\": \\"BrandA\\" } filtered_ids = filter_products(products, category_characteristics) print(filtered_ids) # Output: [101, 103] ```","solution":"def filter_products(products, category_characteristics): Filters products based on category characteristics. Args: - products (list of dict): List of product dictionaries. - category_characteristics (dict): Characteristics that products must match. Returns: - list of int: List of product ids that match all category characteristics. filtered_ids = [] for product in products: match = True for key, value in category_characteristics.items(): if product.get(key) != value: match = False break if match: filtered_ids.append(product[\\"id\\"]) return filtered_ids"},{"question":"A company wants to send a packet of data over the network. The packet of data can be represented by a string consisting of lowercase English letters. Due to security reasons, the packet can only be transmitted if all characters in the string are unique. Your task is to determine if the packet can be safely transmitted and, if not, to format the string by removing the minimum number of characters such that all remaining characters in the string are unique. You should return the resultant string in lexicographical order. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a string s (1 le |s| le 100) consisting of lowercase English letters. -----Output----- For each test case, print the resultant string after removing the minimum number of characters such that all remaining characters in the string are unique. The resultant string should be in lexicographical order. -----Examples----- Input 3 hello programming abcd Output ehlo agimnopr abcd -----Note----- In the first test case of the example, by removing one of the \'l\' characters, we obtain \\"helo\\". The lexicographically sorted version of this string is \\"ehlo\\". In the second test case, by removing the repeated characters we obtain \\"progamin\\", and sorting \\"agimnopr\\". The third case already has all unique characters, so it remains unchanged.","solution":"def make_unique_sorted_string(s): Given a string s, removes duplicate characters and returns the string with unique characters in lexicographical order. unique_characters = \'\'.join(sorted(set(s))) return unique_characters def process_test_cases(test_cases): Processes a list of test case strings and returns a list of results after making each string unique and sorted. results = [] for s in test_cases: results.append(make_unique_sorted_string(s)) return results"},{"question":"Write a function `findPeakElement` which takes an integer array `nums` and returns the index of a peak element. A peak element is an element that is greater than its neighbors. The provided array has valid peaks ensured by the input conditions, where `nums[i]` is not necessarily unique. You may assume that `nums[-1] = nums[n] = -∞`, where `n` is the length of the input array. The function must run in O(log n) time, making binary search a suitable approach. Implement the `findPeakElement` function in Python. ```python def findPeakElement(nums): This function finds the index of a peak element in the input array `nums`. Args: nums (List[int]): The input list of integers. Returns: int: The index of a peak element. # Implementation here left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left # Example Usage: # Input: [1, 2, 3, 1] # Output: 2 (index of the peak element which is 3) ```","solution":"def findPeakElement(nums): This function finds the index of a peak element in the input array `nums`. Args: nums (List[int]): The input list of integers. Returns: int: The index of a peak element. left, right = 0, len(nums) - 1 while left < right: mid = (left + right) // 2 if nums[mid] > nums[mid + 1]: right = mid else: left = mid + 1 return left"},{"question":"Professor Dumbledore has a new idea for encouraging teamwork among Hogwarts students. He has decided to organize a treasure hunt in the Forbidden Forest. Each team, consisting of n students, is required to find hidden treasures. The location of these treasures is described by a list of positions on a number line. Dumbledore will provide k queries to check the progress of each team. Each query consists of two integers, l and r, and asks for the number of treasures found within the positions from l to r inclusive. Your task is to help the teams by preprocessing the given treasure positions and efficiently answering the queries. Input: The first line contains an integer T, the number of test cases. T test cases follow. The first line of each test case contains two integers n and k. The second line contains n integers (p1, p2, p3, ..., pn) representing the positions of the treasures. Each of the next k lines contains two integers l and r. Output: For each query, output the number of treasures found in the specified range [ l, r ]. Constraints: 1 ≤ T ≤ 10 1 ≤ n, k ≤ 10^5 1 ≤ pi ≤ 10^9 (for all 1 ≤ i ≤ n) 1 ≤ l ≤ r ≤ 10^9 SAMPLE INPUT 1 5 3 2 5 7 10 12 1 6 5 10 7 15 SAMPLE OUTPUT 2 3 3","solution":"from bisect import bisect_left, bisect_right def preprocess_positions(positions): Preprocess the positions to allow efficient range queries. return sorted(positions) def count_treasures_in_range(positions, l, r): Counts the number of treasure positions within the range [l, r]. start = bisect_left(positions, l) end = bisect_right(positions, r) return end - start def process_test_case(test_case): Process a single test case. n, k = test_case[\'n\'], test_case[\'k\'] positions = preprocess_positions(test_case[\'positions\']) results = [] for query in test_case[\'queries\']: l, r = query result = count_treasures_in_range(positions, l, r) results.append(result) return results def solve(T, test_cases): results = [] for test_case in test_cases: results.append(process_test_case(test_case)) return results"},{"question":"Given an array of integers and an integer `k`, find the k-th smallest element in the array. Note that it is the k-th smallest element in the sorted order, not the k-th distinct element. You may assume k is always valid, 1 ≤ k ≤ the array\'s length. Example 1: Input: [3,2,1,5,6,4], k = 2 Output: 2 Example 2: Input: [3,2,3,1,2,4,5,5,6], k = 4 Output: 3 Example 3: Input: [7,10,4,3,20,15], k = 3 Output: 7","solution":"def kth_smallest_element(arr, k): Returns the k-th smallest element in the sorted order of the array. Args: arr: List of integers. k: Integer representing the k-th position. Returns: The k-th smallest element in the array. arr_sorted = sorted(arr) return arr_sorted[k-1]"},{"question":"Given an array of integers where each element appears exactly twice except for one element which appears exactly once, find the single element that appears only once. Example: Input: [4, 1, 2, 1, 2] Output: 4","solution":"def single_number(nums): Finds the element that appears exactly once in the list where every other element appears exactly twice. :param nums: List[int] :return: int result = 0 for num in nums: result ^= num return result"},{"question":"Polycarp loves chocolate and has a sweet tooth. He has a collection of n chocolate bars, and he decided that each day he will eat exactly one chocolate bar. However, Polycarp has a peculiar way of choosing which chocolate bar to eat based on the sweetness levels of the chocolate bars. Each chocolate bar has a sweetness level denoted by an integer. On the first day, he will eat the chocolate bar with the lowest sweetness level. On the second day, he will eat the chocolate bar with the next lowest sweetness level, and so on, until he has eaten all chocolate bars. Given the list of sweetness levels, determine the order in which Polycarp will eat the chocolate bars. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 100) — the number of chocolate bars. The second line contains n integers, where each integer a_i (1 ≤ a_i ≤ 1000) represents the sweetness level of the i-th chocolate bar. -----Output----- Print a single line containing n integers, where the i-th integer represents the sweetness level of the chocolate bar that Polycarp will eat on the i-th day. -----Examples----- Input 5 7 3 2 8 5 Output 2 3 5 7 8 Input 3 10 1 2 Output 1 2 10 -----Note----- In the first example, the chocolate bars have sweetness levels 7, 3, 2, 8, and 5. Polycarp will eat them in the order 2, 3, 5, 7, and 8.","solution":"def eating_order(n, sweetness_levels): Return the sweetness levels in the order Polycarp will eat the chocolate bars. Args: n (int): Number of chocolate bars. sweetness_levels (list of int): List of sweetness levels of the chocolate bars. Returns: list of int: Sorted sweetness levels in ascending order. return sorted(sweetness_levels)"},{"question":"Story Mary\'s new startup company arranges various workshops on different topics. Each workshop has a registration fee and a cost to organize it. To assess the financial performance of each workshop, Mary has recorded all workshops in the following format: ``` [[100, 200], [150, 180], [120, 120]] ``` Each sub-array consists of two numbers: the first number is the total registration fees collected for that workshop, and the second number is the total cost to organize it. In the example above, the first workshop generated 100 in registration fees at a cost of 200, resulting in a loss. The second workshop generated 150 in registration fees at a cost of 180, resulting in a loss. The third workshop generated 120 in registration fees at a cost of 120, resulting in a break-even. Mary wants to know her company\'s overall financial outcome from all workshops combined. Rules Write a function ```financialOutcome```, argument ```workshops``` is a list of workshops. Return a number (positive, negative, or zero), rounded to two decimal places, indicating the total financial outcome. Examples ```python financialOutcome([[100, 200], [150, 180], [120, 120]]) -> -130.00 financialOutcome([[200, 150], [150, 160], [220, 220]]) -> 40.00 financialOutcome([[300, 300], [200, 200]]) -> 0.00 financialOutcome([[120, 100], [140, 90], [80, 120]]) -> 30.00 ```","solution":"def financialOutcome(workshops): Returns the overall financial outcome from all workshops combined, rounded to two decimal places. total_outcome = sum(fee - cost for fee, cost in workshops) return round(total_outcome, 2)"},{"question":"story Alice loves sequences and often plays with different sequence problems. One day, she encountered a challenging one and thought to take help from you. The sequence Alice is interested in is defined as follows: - Start with an integer x. - If x is even, divide it by 2. - If x is odd, multiply it by 3 and add 1. - Repeat this process until you reach the number 1. The resulting sequence is called the \\"Collatz sequence\\" of x. Alice is particularly interested in finding the length of the longest Collatz sequence generated by any integer between a given range [L, R], inclusive. problem Given two integers L and R, write a program to determine the length of the longest Collatz sequence for any integer in the range [L, R]. Input format The input consists of only one line with two space-separated integers L and R. It can be assumed that: - 1 ≤ L ≤ R ≤ 10^6 Output format Print a single integer representing the length of the longest Collatz sequence for any integer in the given range. Input example 1 1 10 Output example 1 20 Input example 2 100 200 Output example 2 125 Input example 3 201 210 Output example 3 89 Input example 4 900 1000 Output example 4 174 Example Input 1 10 Output 20","solution":"def collatz_length(n): length = 1 while n != 1: if n % 2 == 0: n = n // 2 else: n = 3 * n + 1 length += 1 return length def longest_collatz_sequence(L, R): max_length = 0 for i in range(L, R + 1): length = collatz_length(i) if length > max_length: max_length = length return max_length # Example usage if __name__ == \\"__main__\\": L, R = map(int, input().strip().split()) print(longest_collatz_sequence(L, R))"},{"question":"Given an integer n, compute the sum of squares of the first n natural numbers. The sum of squares of the first n natural numbers can be calculated using the formula S(n) = n(n + 1)(2n + 1) / 6. Input The only line of input contains an integer n (1 ≤ n ≤ 100). Output Output the sum of squares of the first n natural numbers. Examples Input 4 Output 30 Input 7 Output 140","solution":"def sum_of_squares(n): Returns the sum of squares of the first n natural numbers. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"You manage a construction site where you have a number of tasks to complete. Each task requires a specific number of hours to finish. However, there are certain conditions you must adhere to while assigning the tasks: 1. Some tasks can only start after other specific tasks are completed. These dependencies are given as a prerequisite list. 2. You can work on at most one task at any given hour. Given the total number of tasks, their respective durations, and the list of prerequisites, determine the minimum number of hours required to complete all tasks. -----Input----- The first line of input will contain an integer n (1 ≤ n ≤ 100), the number of tasks. The next line will contain n space-separated integers where the ith integer represents the number of hours required to complete the ith task. The third line will contain an integer m (0 ≤ m ≤ 1000), the number of prerequisites. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) meaning task v cannot start until task u is completed. -----Output----- Print a single integer, the minimum number of hours required to complete all tasks. -----Examples----- Input 3 3 2 1 2 1 2 2 3 Output 6 Input 4 1 2 3 2 3 1 2 1 3 3 4 Output 6 Input 5 1 2 3 4 5 4 1 2 2 3 3 4 4 5 Output 15 -----Note----- Consider the first example: There are 3 tasks, taking 3, 2, and 1 hours respectively. Task 2 cannot start until task 1 is completed, and task 3 cannot start until task 2 is completed. Hence, you will spend 3 hours on task 1, 2 hours on task 2, and finally 1 hour on task 3, giving a total of 6 hours.","solution":"from collections import defaultdict, deque def min_hours_to_complete_tasks(n, hours, m, prerequisites): graph = defaultdict(list) in_degree = [0] * n for u, v in prerequisites: graph[u-1].append(v-1) in_degree[v-1] += 1 queue = deque() completion_time = [0] * n for i in range(n): if in_degree[i] == 0: queue.append(i) completion_time[i] = hours[i] while queue: task = queue.popleft() for neighbor in graph[task]: in_degree[neighbor] -= 1 completion_time[neighbor] = max(completion_time[neighbor], completion_time[task] + hours[neighbor]) if in_degree[neighbor] == 0: queue.append(neighbor) return max(completion_time) # Example usage if __name__ == \\"__main__\\": n = 4 hours = [1, 2, 3, 2] m = 3 prerequisites = [(1, 2), (1, 3), (3, 4)] print(min_hours_to_complete_tasks(n, hours, m, prerequisites)) # Output: 6"},{"question":"Given a list of integers, return all possible subsets of the list. Note: The solution set must not contain duplicate subsets. Return the solution in any order. Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]] Example 2: Input: nums = [0] Output: [[],[0]]","solution":"from itertools import combinations def subsets(nums): Given a list of integers, return all possible subsets of the list. The solution set must not contain duplicate subsets. Return the solution in any order. Args: nums (list): List of integers. Returns: list: List of all possible subsets. res = [] for i in range(len(nums) + 1): for subset in combinations(nums, i): res.append(list(subset)) return res"},{"question":"You are given an array of n integers. You need to decide if it is possible to partition the array into several (possibly zero) subarrays such that each subarray is strictly increasing or strictly decreasing. In other words, you need to check if it is possible to split the original array into several segments such that each segment is a strictly monotonic sequence. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 leq a_i leq 10^9), the elements of the array. -----Output----- Print \\"YES\\" if it is possible to partition the array in the described way. Otherwise, print \\"NO\\". -----Examples----- Input 5 1 2 3 2 1 Output YES Input 4 5 4 3 2 Output YES Input 6 1 2 3 4 3 4 Output NO -----Note----- In the first example, the array can be partitioned as follows: [1, 2, 3], [2, 1]. In the second example, the array can be considered as a single segment: [5, 4, 3, 2]. In the third example, it is not possible to partition the array such that each segment is strictly increasing or strictly decreasing.","solution":"def can_partition_monotonic(arr): Determine if the given array can be partitioned into segments where each segment is strictly increasing or strictly decreasing. n = len(arr) if n == 1: return \\"YES\\" increasing = False decreasing = False for i in range(n - 1): if arr[i] < arr[i + 1]: if decreasing: return \\"NO\\" increasing = True elif arr[i] > arr[i + 1]: if increasing: increasing = False decreasing = True else: return \\"NO\\" # No equal elements allowed return \\"YES\\""},{"question":"You are given a positive integer n. The task is to generate a list of all unique permutations of integers from 1 to n (inclusive) that do not contain three consecutive integers. You should output the total number of such unique permutations modulo 1,000,000,007. Permutations are considered unique based on their ordering sequence. -----Input----- The first and only line contains a single integer n (1 leq n leq 1,000). -----Output----- Print one integer — the total number of unique permutations of integers from 1 to n that do not contain three consecutive integers modulo 1,000,000,007. -----Examples----- Input 3 Output 4 Input 4 Output 10 -----Note----- In the first test case, n = 3, the valid permutations are: - 1, 2, 3 - 1, 3, 2 - 2, 1, 3 - 2, 3, 1 The invalid permutation is 3, 2, 1 because it contains three consecutive integers in reverse order. In the second test case, n = 4, valid permutations include: - 1, 2, 4, 3 - 1, 4, 2, 3 - 2, 1, 3, 4 - 2, 3, 4, 1 - 3, 1, 2, 4 - 3, 4, 1, 2 And a few more, totaling 10 valid unique permutations without consecutive integers in sequence.","solution":"MOD = 1000000007 def count_permutations(n): if n == 1: return 1 elif n == 2: return 2 elif n == 3: return 4 # Dynamic programming table to store results dp = [0] * (n + 1) # Base cases dp[1] = 1 dp[2] = 2 dp[3] = 4 for i in range(4, n + 1): dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % MOD return dp[n]"},{"question":"You have a network of computers represented as an undirected graph with N nodes and M edges. Each computer (node) has a unique integer ID from 1 to N. The connections (edges) between computers can have different communication times represented by positive integers. You need to find the minimum time required for a packet of information to be transferred from the first computer (ID 1) to the last computer (ID N). Assume that there might be multiple paths between the first and last computer, and you should select the path that minimizes the total communication time. In case there is no possible path, return -1. Input Format - The first line contains two integers, N and M, the number of computers and the number of connections. - The next M lines each contain three integers, u, v, and w, describing a connection between u and v with a communication time of w. Output Format - One line with a single integer, representing the minimum communication time from computer 1 to computer N. If no path exists, output -1. Constraints 1 <= N <= 10^5 1 <= M <= 2*10^5 1 <= u, v <= N 1 <= w <= 10^9 Sample Input 5 6 1 2 3 1 3 2 2 4 4 3 4 1 4 5 2 2 5 7 Sample Output 5 Explanation The minimum communication time path from 1 to 5 is 1 -> 3 -> 4 -> 5 with a total time of 2 + 1 + 2 = 5. Your task is to implement an algorithm to solve this problem efficiently given the constraints.","solution":"import heapq from collections import defaultdict def minimum_communication_time(N, M, connections): Finds the minimum communication time from computer 1 to computer N. Args: N : int : number of computers (nodes) M : int : number of connections (edges) connections : list of tuples : each tuple contains (u, v, w) representing an edge from u to v with weight w Returns: int : minimum communication time or -1 if no path exists # Create adjacency list for the graph graph = defaultdict(list) for u, v, w in connections: graph[u].append((v, w)) graph[v].append((u, w)) # Priority queue for Dijkstra\'s algorithm pq = [(0, 1)] # (current_time, start_node) min_time = {i: float(\'inf\') for i in range(1, N+1)} min_time[1] = 0 while pq: current_time, u = heapq.heappop(pq) if u == N: return current_time if current_time > min_time[u]: continue for v, time in graph[u]: new_time = current_time + time if new_time < min_time[v]: min_time[v] = new_time heapq.heappush(pq, (new_time, v)) return -1 if min_time[N] == float(\'inf\') else min_time[N] # Sample Input connections = [ (1, 2, 3), (1, 3, 2), (2, 4, 4), (3, 4, 1), (4, 5, 2), (2, 5, 7) ] print(minimum_communication_time(5, 6, connections)) # Output should be 5"},{"question":"Two research teams are collaborating to analyze genomic sequences. Each team produces a list of n integers corresponding to the sequence of DNA segments they are studying. They want to merge their lists and remove any duplicate segments, maintaining the relative order of segments from the original lists. Write a program that combines two lists of integers and removes duplicates while preserving the order from the original lists. -----Input----- The first line contains an integer n (1 le n le 1000), the number of integers in the first list. The second line contains n integers representing the first list. The third line contains an integer m (1 le m le 1000), the number of integers in the second list. The fourth line contains m integers representing the second list. -----Output----- Output a single line containing the merged list of integers, with duplicates removed and the original order preserved. -----Explanation of Sample Data----- In the first example, the merged list is composed of integers from both lists, while duplicates are removed. The order must be maintained as they appeared in the input lists. -----Examples----- Sample Input 1: 3 1 2 3 4 3 4 5 6 Sample Output 1: 1 2 3 4 5 6 Sample Input 2: 5 4 5 6 7 8 4 5 8 9 10 Sample Output 2: 4 5 6 7 8 9 10","solution":"def merge_and_remove_duplicates(n, list1, m, list2): Merges two lists and removes duplicates while preserving the order from the original lists. Args: n (int): Number of integers in the first list. list1 (list of int): The first list of integers. m (int): Number of integers in the second list. list2 (list of int): The second list of integers. Returns: list of int: The merged list with duplicates removed. seen = set() merged_list = [] for num in list1 + list2: if num not in seen: seen.add(num) merged_list.append(num) return merged_list"},{"question":"A warehouse manager needs to optimize a set of boxes with different weights to be loaded into trucks. Each truck has a maximum capacity, and the goal is to find the minimum number of trucks required to load all the boxes without exceeding any truck\'s capacity. You are given the number of boxes, their weights, and the maximum capacity of each truck. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N (the number of boxes) and C (the maximum capacity of each truck). - The second line contains N space-separated integers representing the weights of the boxes. -----Output----- For each test case, print a single integer, which is the minimum number of trucks required to load all the boxes. -----Constraints----- - 1 le T le 100 - 1 le N le 10^4 - 1 le text{weight of each box} le 10^9 - 1 le C le 10^9 - The total weight of all boxes in each test case does not exceed 10^9 -----Subtasks----- Subtask #1 (20 points): N le 10 Subtask #2 (30 points): Total weight of all boxes does not exceed 10^5 Subtask #3 (50 points): Original constraints -----Example Input----- 2 5 10 1 2 3 4 5 3 8 2 3 6 -----Example Output----- 2 2","solution":"def min_trucks_required(T, test_cases): results = [] for case in test_cases: N, C = case[0] weights = case[1] weights.sort(reverse=True) trucks = 0 while weights: current_capacity = C trucks += 1 i = 0 while i < len(weights): if weights[i] <= current_capacity: current_capacity -= weights.pop(i) else: i += 1 results.append(trucks) return results"},{"question":"Given an array B consisting of M integers B_{1}, B_{2}, ..., B_{M}, determine the smallest positive integer X such that there exists at least one contiguous subarray within B whose sum equals X. For example, if B = [1, -2, 3, 4], the smallest positive integer X for which there is a subarray with sum X is 1, corresponding to the subarray [1]. ------ Input Format ------ - The first line of input contains a single integer Q, denoting the number of test cases. The description of Q test cases follows. - The first line of each test case contains a single integer M. - The second line contains M space-separated integers B_{1}, B_{2}, ..., B_{M}. ------ Output Format ------ For each test case, output a single line containing the smallest positive integer X for which there exists a contiguous subarray in B with a sum equal to X. ------ Constraints ------ 1 ≤ Q ≤ 10^{3} 1 ≤ M ≤ 10^{3} -10^{6} ≤ B_{i} ≤ 10^{6} for each 1 ≤ i ≤ M ------ subtasks ------ Subtask #1 (100 points): Original constraints ----- Sample Input 1 ------ 3 3 1 2 3 4 1 -2 3 4 5 -1 -1 -1 -1 -1 ----- Sample Output 1 ------ 1 1 Not Possible ----- explanation 1 ------ Test case 1: The smallest positive integer X for which there is a subarray with sum X is 1, which corresponds to the subarray [1]. Test case 2: The smallest positive integer X can be 1, which corresponds to the subarray [1] or [3 - 2]. Test case 3: There is no positive integer X for which a subarray sum is equal to X. So the output is \\"Not Possible\\".","solution":"def find_smallest_positive_sum(B): Returns the smallest positive integer X such that there exists at least one contiguous subarray within B whose sum equals X. If no such sum exists, returns \\"Not Possible\\". M = len(B) min_positive_sum = float(\'inf\') possible = False # Check all subarrays for start in range(M): current_sum = 0 for end in range(start, M): current_sum += B[end] if current_sum > 0: possible = True min_positive_sum = min(min_positive_sum, current_sum) return min_positive_sum if possible else \\"Not Possible\\" def process_test_cases(Q, test_cases): Process Q test cases where each test case is a list of integers B. Returns a list of results for each test case. results = [] for i in range(Q): B = test_cases[i] result = find_smallest_positive_sum(B) results.append(result) return results"},{"question":"Write a function that takes a string containing a valid mathematical expression with non-negative integers and operators `+`, `-`, and `*`, and evaluates it following the normal operator precedence. For example: ```python evaluate_expression(\\"3+5*2\\") == 13 evaluate_expression(\\"10+2*6-5\\") == 17 evaluate_expression(\\"100\\") == 100 ```","solution":"def evaluate_expression(expression): Evaluates a given mathematical expression containing non-negative integers and operators +, -, *. The input expression is assumed to be valid. def apply_operator(operators, values): right = values.pop() left = values.pop() operator = operators.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) def precedence(op): if op == \'+\' or op == \'-\': return 1 if op == \'*\': return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue elif expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while (i < len(expression) and expression[i].isdigit()): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while len(operators) > 0 and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (len(operators) > 0 and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while len(operators) != 0: apply_operator(operators, values) return values[-1]"},{"question":"Given a list of integers representing a queue, your task is to process a sequence of operations and finally return the state of the queue after all operations have been performed. The operations can be \'enqueue\' or \'dequeue\'. An \'enqueue X\' operation adds the integer X to the end of the queue. A \'dequeue\' operation removes the integer at the front of the queue if the queue is not empty. Input Format: 1. First line contains an integer N, the number of operations. 2. Next N lines contain either \'enqueue X\' or \'dequeue\' commands where X is an integer. Output Format: Print the state of the queue after all operations, where each element is separated by a space. If the queue is empty, print \'Empty Queue\'. Constraints: 1 <= N <= 1000 -10^5 <= X <= 10^5 Example Input 1: 6 enqueue 5 enqueue 3 dequeue enqueue 7 enqueue 8 dequeue Example Output 1: 7 8 Example Input 2: 5 dequeue enqueue 4 dequeue dequeue dequeue Example Output 2: Empty Queue","solution":"def process_queue_operations(n, operations): Processes a sequence of queue operations and returns the final state of the queue. Parameters: n : int Number of operations operations : list of str List of operations, either \'enqueue X\' or \'dequeue\' Returns: str Final state of the queue as a space separated string, or \'Empty Queue\' if the queue is empty. queue = [] for operation in operations: if operation.startswith(\'enqueue\'): _, x = operation.split() queue.append(int(x)) elif operation == \'dequeue\': if queue: queue.pop(0) if queue: return \' \'.join(map(str, queue)) else: return \'Empty Queue\'"},{"question":"Help Jenny with her Flower Garden. Jenny is planning her flower garden and wants to plant flowers in such a way that they are aesthetically pleasing. To achieve this, Jenny arranges flowers in a straight line and laterally packs them. However, she has only a certain number of flower seeds of specific types, and she must ensure that each flower of type i should be followed immediately by a flower of type j (i ≠ j). She needs your help to find the number of such beautiful arrangements for her garden. Input: The first line contains an integer T, the number of test cases. Each test case consists of a single integer N, which represents the length of the garden (i.e., the number of positions available for planting flowers). Output: For each test case, output the number of ways to beautifully arrange the flowers modulo 10^9+7. If it\'s not possible to arrange them aesthetically, output 0. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^18 Example: Input: 3 1 2 3 Output: 0 2 6 Explanation: Example case 1: If the length of the garden is 1, it\'s not possible to arrange flowers aesthetically because there are no neighboring positions. Example case 2: If the length of the garden is 2, flowers can be arranged as (type 1, type 2) or (type 2, type 1), independently of the actual flower types. Example case 3: The total number of arrangements for N=3 considering beautiful arrangements as permutations of different types with the constraint provided.","solution":"def beautiful_arrangements(N): Returns the number of beautiful arrangements of flowers for garden length N modulo 10^9 + 7. MOD = 10**9 + 7 # If N is 1, it\'s not possible to arrange flowers aesthetically if N == 1: return 0 # If N is 2, we have 2 beautiful arrangements (1-2, 2-1) elif N == 2: return 2 else: result = 2 for i in range(3, N+1): result = (result * i) % MOD return result"},{"question":"You are given a shelf with N books, each having a different height. The books are initially stacked in random order. You want to rearrange these books in ascending order based on their height by performing a series of swaps. However, you can only swap two adjacent books in one move. Write a program to determine the minimum number of moves required to sort the books. -----Input:----- - The first line will contain an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains the integer N, the number of books. - The second line contains N space-separated integers representing the heights of the books in the current order. -----Output:----- - For each test case, output a single integer indicating the minimum number of adjacent swaps required to sort the books in ascending order. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 1000 - 1 leq height of each book leq 10^6 -----Sample Input:----- 2 3 3 2 1 4 4 3 2 1 -----Sample Output:----- 3 6 -----EXPLANATION:----- In the first test case, the sequence can be sorted with 3 swaps: (3, 2, 1) -> (2, 3, 1) -> (2, 1, 3) -> (1, 2, 3). In the second test case, the sequence can be sorted with 6 swaps: (4, 3, 2, 1) -> (3, 4, 2, 1) -> (3, 2, 4, 1) -> (3, 2, 1, 4) -> (2, 3, 1, 4) -> (2, 1, 3, 4) -> (1, 2, 3, 4).","solution":"def minimum_swaps_to_sort(books): Returns the minimum number of adjacent swaps required to sort the books. n = len(books) swaps = 0 # Using bubble sort to count the number of swaps for i in range(n): for j in range(0, n-i-1): if books[j] > books[j+1]: # Swap books[j] and books[j+1] books[j], books[j+1] = books[j+1], books[j] swaps += 1 return swaps def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] books = test_cases[i][1] results.append(minimum_swaps_to_sort(books)) return results"},{"question":"Given the infinite sequence of numbers where each term is generated by doubling the previous term and adding 1, starting from 1: ``` 1, 3, 7, 15, 31, 63, ... ``` Write a function that calculates the nth term of this sequence from the term index (starting at index 1) e.g.: ```python nth_term_sequence(1); # 1 nth_term_sequence(2); # 3 nth_term_sequence(3); # 7 ``` # Constraints: - You may assume `n` is always a positive integer.","solution":"def nth_term_sequence(n): Returns the nth term of the sequence where each term is generated by doubling the previous term and adding 1, starting from 1. if n == 1: return 1 return (2 ** n) - 1"},{"question":"Alice is working as a software engineer at TechWorks, where she is responsible for maintaining the company\'s database. The database consists of n records, each containing a unique integer identifier. Over time, new records can be added or removed, and Alice often needs to find the median record identifier from the current set of records. The median of a list of numbers is the middle element when the list is sorted. If the number of elements is even, the median is the average of the two middle elements. To help Alice with her task, write a program that supports the following operations: 1. `add x` - Add a record with identifier `x` to the database. 2. `remove x` - Remove a record with identifier `x` from the database if it exists. 3. `median` - Print the median of the current set of record identifiers. -----Input----- The first line contains an integer q (1 le q le 100,000) — the number of operations. Each of the following q lines contains an operation, which can be one of the following: - `add x` (1 le x le 1,000,000) - Add a record with identifier `x`. - `remove x` (1 le x le 1,000,000) - Remove a record with identifier `x`. - `median` - Output the median of the current set of identifiers. It is guaranteed that: - `remove x` operation will only be called if the record with identifier `x` exists. - There will be at least one `median` operation and it will only be called when there is at least one record in the database. -----Output----- For every `median` operation, output a single floating point number representing the median of the current set of identifiers. If the median is an integer, output it as a floating point number with one decimal place (e.g., `3.0` instead of `3`). -----Examples----- Input 8 add 1 add 3 median add 5 median remove 3 median add 2 median Output 2.0 3.0 3.0 2.0","solution":"from bisect import insort, bisect_left class MedianDatabase: def __init__(self): self.records = [] def add(self, x): insort(self.records, x) def remove(self, x): pos = bisect_left(self.records, x) if pos != len(self.records) and self.records[pos] == x: del self.records[pos] def median(self): n = len(self.records) if n % 2 == 1: return float(self.records[n // 2]) else: mid1, mid2 = self.records[(n // 2) - 1], self.records[n // 2] return (mid1 + mid2) / 2.0"},{"question":"Smallest Subarray with Given Sum You are given an array of positive integers representing the sizes of books on a shelf and an integer S representing the total size that you want to achieve by selecting a contiguous subarray of books. Your task is to find the length of the smallest contiguous subarray whose sum is greater than or equal to S. If there is no such subarray, return 0. # Input The input consists of multiple datasets. Each dataset is provided in the following format: - The first line contains an integer n representing the number of books (1 ≤ n ≤ 10000). - The second line contains an integer S representing the target sum (1 ≤ S ≤ 100000). - The third line contains n space-separated positive integers representing the sizes of the books. The end of the input is represented by a line consisting of only one zero. # Output For each dataset, print a single line containing the length of the smallest contiguous subarray whose sum is greater than or equal to S. If no such subarray exists, print 0. # Example ``` Input: 10 15 1 2 3 4 5 6 7 8 9 10 5 11 1 2 3 4 5 0 Output: 2 3 ``` # Explanation **Example 1:** - We need the smallest contiguous subarray whose sum is at least 15. - Subarray [7, 8] has a sum of 15 and is the smallest possible, so the result is 2. **Example 2:** - We need the smallest contiguous subarray whose sum is at least 11. - Subarray [4, 5] has a sum of 9, and adding 3 as well, [3, 4, 5] has a sum of 12, so the result is 3. Remember, output each result on a new line as specified.","solution":"def smallest_subarray_with_given_sum(arr, S): Returns the length of the smallest contiguous subarray whose sum is greater than or equal to S. If no such subarray exists, return 0. n = len(arr) min_length = float(\'inf\') current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\'inf\') else 0 def process_input(input_data): results = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break i += 1 S = int(lines[i]) i += 1 arr = list(map(int, lines[i].split())) i += 1 results.append(smallest_subarray_with_given_sum(arr, S)) return results"},{"question":"Alice is organizing a contest in which participants will be awarded points based on their performance. She needs to implement a ranking system that satisfies the following conditions: 1. Participants will be ranked based on their points in descending order. 2. In case of a tie in points, participants who registered earlier will be ranked higher. 3. After calculating the ranks, she wants to print the rank of each participant along with their ID. Alice has a list of participants where each participant is represented by a tuple (ID, points, registration_time), where: - ID is a unique identifier for each participant. - points indicates the points scored by the participant. - registration_time represents the time when the participant registered for the contest (a timestamp). Your task is to help Alice by writing a function `calculate_ranks(participants)` that takes the list of participants and returns a list of tuples where each tuple contains the participant\'s ID and their rank after sorting. -----Input----- A list of tuples `participants`, where each tuple contains three elements (ID, points, registration_time). The range of integer values is as follows: - ID (1 ≤ ID ≤ 10^6) - points (0 ≤ points ≤ 10^6) - registration_time (1 ≤ registration_time ≤ 10^9) -----Output----- A sorted list of tuples, where each tuple contains two elements: (ID, rank). -----Examples----- Input [(1, 100, 5), (2, 200, 3), (3, 100, 2), (4, 200, 1)] Output [(4, 1), (2, 2), (3, 3), (1, 4)] Input [(1, 150, 4), (2, 150, 7), (3, 200, 2), (4, 150, 5)] Output [(3, 1), (1, 2), (4, 3), (2, 4)]","solution":"def calculate_ranks(participants): Returns the rank of each participant based on their points and registration time. Parameters: participants (list of tuples): Each tuple contains (ID, points, registration_time). Returns: list of tuples: Each tuple contains (ID, rank). # Sort participants first by points in descending order, then by registration_time in ascending order sorted_participants = sorted(participants, key=lambda x: (-x[1], x[2])) # Generate the ranks ranked_participants = [(participant[0], idx + 1) for idx, participant in enumerate(sorted_participants)] return ranked_participants"},{"question":"Write a program to obtain a list of integers and compute its sum if the list contains more even numbers; otherwise, if the list contains more odd numbers, compute the product of all the elements in the list. -----Input:----- - First line will contain an integer T, the number of elements in the list. - Second line will contain T space-separated integers representing the elements of the list. -----Output:----- Output a single line, the computed sum or product of the list based on the given condition. -----Constraints----- - 1 leq T leq 50 - 0 leq each element of the list leq 100 -----Sample Input:----- 4 1 2 3 4 -----Sample Output:----- 10 -----EXPLANATION:----- In the given list [1, 2, 3, 4], there are 2 even numbers (2 and 4) and 2 odd numbers (1 and 3). Since there are more even numbers, the sum of the list (1 + 2 + 3 + 4) is 10.","solution":"def compute_list_result(T, elements): This function takes an integer T which is the number of elements in the list and a list of integers. It returns the computed sum if the list contains more even numbers or more even numbers tie with odd numbers, and it returns the computed product if the list contains more odd numbers. if T != len(elements): raise ValueError(\\"The number of elements does not match T.\\") even_count = sum(1 for x in elements if x % 2 == 0) odd_count = T - even_count if even_count >= odd_count: return sum(elements) else: product = 1 for number in elements: product *= number return product"},{"question":"A company is holding a competition in which participants need to build toy cars from parts. Each toy car consists of 4 wheels, 2 windows, and 1 chassis. Given the quantities of wheels, windows, and chassis that the company has at its disposal, determine the maximum number of toy cars that can be built. -----Constraints----- - All input values are integers. - 0≤wheels, windows, chassis≤10^5 -----Input----- The input is given from Standard Input in the following format: wheels windows chassis -----Output----- Print the maximum number of toy cars that can be built. -----Sample Input----- 10 8 3 -----Sample Output----- 2 From the input values, the company has: - 10 wheels, which can form up to `10 // 4 = 2.5` cars (rounded down to 2). - 8 windows, which can form up to `8 // 2 = 4` cars. - 3 chassis, which can form up to `3` cars. Thus, the limiting factor is the wheels, and the company can build a maximum of 2 toy cars.","solution":"def max_toy_cars(wheels, windows, chassis): Returns the maximum number of toy cars that can be built given the quantities of wheels, windows, and chassis. return min(wheels // 4, windows // 2, chassis) # Testing the function with an example print(max_toy_cars(10, 8, 3)) # Expected output: 2"},{"question":"You are given an array of unique integers where each integer is present exactly twice, except for one integer which is present only once. Write a function to find and return the unique integer that is present only once. You are required to complete the `findUnique` function, which takes an array of integers as its parameter and returns the unique integer. Input Format - The input is a single array of integers `arr` where the length of the array is odd, and every integer except for one is repeated exactly twice. Constraints - The length of the array is between 1 and 10^5. - Each element of the array is an integer where |arr[i]| leq 10^9. - The array length is odd, ensuring that there is exactly one unique element. Output Format - Return the unique integer. Example Input ```python arr = [4, 1, 2, 1, 2] ``` Output ```python 4 ``` Explanation In the input array, every number except for 4 appears twice. Hence 4 is the unique number in the array.","solution":"def findUnique(arr): Function to find the unique integer in an array where every other integer is repeated twice. Parameters: arr (list): List of integers Returns: int: The unique integer that is not repeated unique = 0 for num in arr: unique ^= num return unique"},{"question":"Create a function named `flatten_dict` that takes a nested dictionary and returns a flattened dictionary where the keys are the path to each value in the original dictionary. For example: ```python input_dict = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": { \\"e\\": 3, \\"f\\": 4 } } } ``` The output should look like: ```python { \\"a\\": 1, \\"b.c\\": 2, \\"b.d.e\\": 3, \\"b.d.f\\": 4 } ``` If the input dictionary is empty, the function should return an empty dictionary. ```python input_dict = {} Output: {} ``` Handle nested dictionaries of arbitrary depth. If any non-dictionary type is encountered, assume it is a valid value and include it directly in the flattened result.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. d: The dictionary to flatten. parent_key: The key string built so far (used for recursion). sep: The separator between key segments. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Farmer John has a large field where he grows various crops in rectangular parcels. He wants to fence each parcel with a rope but since he aims to minimize waste, he wants to know the minimum length of rope required to completely enclose each parcel. Each parcel is defined by its length l and width w. Your task is to write a program that calculates the minimum length of rope needed for each parcel. Input The first line of the input contains an integer N denoting the number of test cases. The description of N test cases follows. Each test case consists of a single line with values l and w. Each value is given with up to 2 decimal places. Output For each test case, output a single line containing the required length of rope. The value should be correct up to 2 decimal places. Constraints 1 ≤ N ≤ 100 0 < l, w ≤ 100 Example Input: 2 10.00 5.00 4.20 3.10 Output: 30.00 14.60","solution":"def calculate_rope_length(test_cases): Calculate the required length of rope for each test case. Args: test_cases (list of tuples): A list where each element is a tuple (l, w) Returns: list of floats: The length of the rope required for each parcel in the same order as input. results = [] for l, w in test_cases: rope_length = 2 * (l + w) results.append(rope_length) return results def format_rope_length(test_cases): Format the output of rope lengths to be correct up to 2 decimal places. Args: test_cases (list of tuples): A list where each element is a tuple (l, w) Returns: list of strings: The formatted length of the rope required for each parcel. results = calculate_rope_length(test_cases) return [f\\"{result:.2f}\\" for result in results]"},{"question":"Many people enjoy playing with number games and puzzles. One popular puzzle is finding the largest prime number less than a given number n. The definition of a prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Given an integer n (2 le n le 10^{12}), find the largest prime number that is less than n. -----Input----- The input consists of a single integer n. -----Output----- Output the largest prime number that is less than n. If there is no prime number smaller than n, output \\"No prime number found\\". -----Examples----- Sample Input 1: 10 Sample Output 1: 7 Sample Input 2: 20 Sample Output 2: 19 Sample Input 3: 2 Sample Output 3: No prime number found","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def largest_prime_less_than(n): if n <= 2: return \\"No prime number found\\" for i in range(n - 1, 1, -1): if is_prime(i): return i return \\"No prime number found\\""},{"question":"You are given an array of coins with different denominations and a total amount of money. Write a function to compute the minimum number of coins required to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. -----Constraints----- - 1 leq coins.length leq 10^4 - 1 leq coins[i] leq 10^9 - 0 leq amount leq 10^9 -----Input----- Input is given from Standard Input in the following format: coins amount where: - `coins` is a space-separated list of integers indicating the denominations. - `amount` is an integer representing the total amount of money. -----Output----- Print the minimum number of coins required to make up the amount, or -1 if it\'s not possible. -----Sample Input----- 1 2 5 11 -----Sample Output----- 3 Explanation: 11 can be made up with 5 + 5 + 1, so a total of 3 coins.","solution":"def coinChange(coins, amount): Returns the minimum number of coins that you need to make up the given amount. If that amount of money cannot be made up by any combination of the coins, return -1. # Initialize the DP table to amount + 1 (Since this is higher than any possible answer) dp = [amount + 1] * (amount + 1) dp[0] = 0 # Base case: 0 coins needed to make amount 0 for coin in coins: for x in range(coin, amount + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != amount + 1 else -1"},{"question":"The Great Wall of China is one of the most iconic symbols of China’s rich history. Various sections of the wall attract vast numbers of tourists throughout the year. In order to manage the influx of visitors more effectively, the authorities need a system that can perform quick analyses based on given data. Specifically, they want to know the average number of visitors per section over a given period. Input The input consists of multiple datasets, each representing the number of visitors to various sections of the Great Wall over a series of days. Each dataset is given in the following format: d, s v11 v12 ... v1s v21 v22 ... v2s :: vd1 vd2 ... vds The first line gives two integers, d and s (1 ≤ d, s ≤ 1000), where d is the number of days and s is the number of sections. The following d lines each contain s integers, where each integer vij (0 ≤ vij ≤ 10000) represents the number of visitors to the j-th section on the i-th day. The end of the input is indicated by a single line \\"0 0\\". Output For each dataset, output s lines, where the i-th line contains the average number of visitors in the i-th section over the d days rounded to two decimal places. Example Input 3 4 120 130 140 150 130 140 150 160 140 150 160 170 2 3 60 70 80 90 100 110 0 0 Output 130.00 140.00 150.00 160.00 75.00 85.00 95.00","solution":"def average_visitors(data): result = [] for dataset in data: d, s = dataset[0] visitors = dataset[1:] averages = [] for section in range(s): total_visitors = sum(visitors[day][section] for day in range(d)) average = total_visitors / d averages.append(f\\"{average:.2f}\\") result.append(averages) return result def parse_input(input_str): data = [] lines = input_str.strip().split(\'n\') idx = 0 while idx < len(lines): first_line = list(map(int, lines[idx].split())) if first_line[0] == 0 and first_line[1] == 0: break d, s = first_line dataset = [first_line] for _ in range(d): idx += 1 dataset.append(list(map(int, lines[idx].split()))) data.append(dataset) idx += 1 return data def format_output(result): return \'n\'.join([\'n\'.join(dataset) for dataset in result]) def process_great_wall_of_china_data(input_str): data = parse_input(input_str) result = average_visitors(data) return format_output(result)"},{"question":"You are given two strings, s and t. You need to find the minimum number of operations required to convert string s into string t using the following operations: 1. Insert a character 2. Delete a character 3. Replace a character You may assume that both s and t are non-empty strings of lowercase English letters. Input format The first line contains the string s. The second line contains the string t. Output format Output a single integer — the minimum number of operations required to convert s into t. Constraints 1 ≤ |s|, |t| ≤ 1000 SAMPLE INPUT horse ros SAMPLE OUTPUT 3 Explanation The minimum number of operations to convert \\"horse\\" into \\"ros\\" is 3. The sequence of operations is as follows: 1. Replace \'h\' with \'r\' -> rorse 2. Remove \'e\' from rorse -> rors 3. Remove \'o\' from rors -> ros","solution":"def minDistance(s, t): Returns the minimum number of operations required to convert string s into string t. m, n = len(s), len(t) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s is empty, insert all characters of t. elif j == 0: dp[i][j] = i # If t is empty, remove all characters of s. elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters are the same, no operation needed. else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Given a string S consisting of lowercase English letters, you need to determine the minimum number of manipulations required to make all the characters of the string the same. You can only perform the following manipulation: **select one character from the string and replace it with another character using a cost of 1 unit per manipulation.** Example 1: Input: S = \\"aabb\\" Output: 2 Explanation: You can replace the two \'b\'s with \'a\' using 2 manipulations. Example 2: Input: S = \\"abcde\\" Output: 4 Explanation: You need to replace each character with \'a\'. Total manipulations needed are 4. Your Task: You do not need to read input or print anything. Your task is to complete the function `minimumManipulations(S)` which takes the input string S and returns the minimum number of manipulations required. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 1000","solution":"def minimumManipulations(S): Returns the minimum number of manipulations required to make all characters of the string the same. from collections import Counter # Count the frequencies of each character count = Counter(S) # Find the character with the maximum frequency max_freq = max(count.values()) # The minimum manipulations needed will be the length of the string # minus the highest frequency since we can convert all other characters # to the most frequent one min_manipulations = len(S) - max_freq return min_manipulations"},{"question":"``` Alice is playing a game where she needs to navigate through a sequence of positions on a line. Initially, Alice is at position 0. There are n positions on the line, labeled from 1 to n, and each of these positions has a value 1 if it contains a step and 0 otherwise. Alice can make a move in one of the following two ways: 1. She can move from position p to position (p + 1) (if (p + 1) exists). 2. She can jump from position p to position (p + 2) (if (p + 2) exists) but only if both positions p and (p + 1) contain steps. Alice can make as many moves as required but must not skip a position without stepping on it. Determine if Alice can reach the nth position considering the possible moves and jumps, given the sequence of steps. -----Input----- The first line of input contains an integer t (1 ≤ t ≤ 100 000) — the number of test cases. The first line of each test case contains an integer n (1 ≤ n ≤ 100 000) — the number of positions on the line. The second line contains a sequence of n integers a_1, a_2, ..., a_n (0 ≤ a_{i} ≤ 1), where a_{i} indicates if there is a step on the i-th position (1 if there is a step, 0 otherwise). Sum of all n across the test cases does not exceed 100 000. -----Output----- For each test case, print \\"YES\\" if Alice can reach position n from position 0, and \\"NO\\" otherwise. -----Examples----- Input 2 5 1 1 0 1 1 3 1 0 1 Output NO NO -----Note----- In the first test case, Alice starts at position 0 and cannot move to position 1 as there is no step at position 1 (a_0 = 0). Thus, Alice will never be able to reach position 5. In the second test case, although there is a step at position 1, she cannot move to position 3 as the jump from position 0 to position 2 would require both positions 1 and 2 to contain steps (a_1 = 0). ```","solution":"def can_alice_reach_n(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] positions = test_cases[i][1] if positions[0] == 0: results.append(\\"NO\\") continue reachable = [False] * n reachable[0] = True for j in range(n - 1): if reachable[j]: if j + 1 < n and positions[j + 1] == 1: reachable[j + 1] = True if j + 2 < n and positions[j + 1] == 1 and positions[j + 2] == 1: reachable[j + 2] = True if reachable[-1]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A candy factory produces candies in different batches every day. Each batch may contain a different number of candies. The company wants to find the maximum number of candies they can distribute fairly among the employees such that each employee receives the same number of candies without having any leftovers. Your task is to determine this maximum number. Input The first line of the input contains an integer k (1 ≤ k ≤ 10^5) - the number of employees. The second line contains an integer b (1 ≤ b ≤ 100) - the number of candy batches. Each of the next b lines contains an integer ci (1 ≤ ci ≤ 10^9) - the number of candies in the i-th batch. Output Output the maximum number of candies each employee can receive. Examples Input 5 4 10 20 25 30 Output 17 Input 3 3 6 9 12 Output 9","solution":"def max_candies_per_employee(k, b, candy_batches): Determines the maximum number of candies each employee can receive without any leftovers. Args: k (int): The number of employees. b (int): The number of candy batches. candy_batches (list of int): List of integers where each integer represents the number of candies in a batch. Returns: int: The maximum number of candies each employee can receive without any leftovers. total_candies = sum(candy_batches) return total_candies // k"},{"question":"Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one. Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? Example 1: Input: nums = [2, 2, 1] Output: 1 Example 2: Input: nums = [4, 1, 2, 1, 2] Output: 4 Example 3: Input: nums = [1] Output: 1 Constraints: - Your algorithm should have a linear runtime complexity. - Could you implement it without using extra memory? - The `nums` array will have at least one element. - Every element in the array `nums` will appear twice except for one.","solution":"def single_number(nums): Returns the single number in the list where every other number appears twice. Uses XOR to achieve O(n) complexity without extra memory. result = 0 for num in nums: result ^= num return result"},{"question":"You are given a sequence of brackets consisting of \'(\' and \')\'. The length of the sequence is N. Write a function to determine the longest length of balanced brackets that can be found in the sequence. A string of brackets is considered balanced if every opening bracket has a corresponding closing bracket and they are correctly ordered. # Constraints - (1 leq N leq 10^5) # Input The input consists of a single line containing the sequence of brackets. # Output Print the length of the longest balanced bracket subsequence. # Examples Example 1 **Input:** ``` (()( ``` **Output:** ``` 2 ``` Example 2 **Input:** ``` )()()) ``` **Output:** ``` 4 ``` Example 3 **Input:** ``` ((()))() ``` **Output:** ``` 8 ``` # Explanation In Example 1, the longest balanced bracket subsequence is `()`, which has a length of 2. In Example 2, the longest balanced bracket subsequence is `()()`, which has a length of 4. In Example 3, the entire sequence is already balanced, and its length is 8.","solution":"def longest_balanced_brackets(seq): max_len = 0 stack = [] start = -1 for i, char in enumerate(seq): if char == \'(\': stack.append(i) else: if stack: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: max_len = max(max_len, i - start) else: start = i return max_len"},{"question":"Tom has a habit of rearranging his bookshelf. His bookshelf can be represented as a string `b` consisting of lowercase English letters where each letter represents a distinct book. He wants to rearrange the books in such a way that no two adjacent books are of the same type. Given a string `b`, determine if it is possible to rearrange the books to meet Tom\'s condition. If it is possible, return any valid rearrangement of the string. If it is not possible, return \\"Not Possible\\". -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single string b (1 ≤ |b| ≤ 10^5). -----Output:----- For each test case, output a single line containing either the rearranged string or \\"Not Possible\\". -----Constraints----- - 1 leq T leq 1000 - The string b will always consist of lowercase English letters. -----Sample Input:----- 3 aabb aab aaabc -----Sample Output:----- abab aba abaca -----Explanation:----- - test case 1: One possible rearrangement is \\"abab\\" which ensures no two adjacent books are the same. - test case 2: One possible rearrangement is \\"aba\\". - test case 3: One possible rearrangement is \\"abaca\\". If we tried to put the same books next to each other, e.g., \\"aaa\\", there would be duplication, hence alternative rearrangements are necessary. The goal is to check the frequency of each character and determine if a valid rearrangement is possible where no two adjacent books are the same, then output such an arrangement or \\"Not Possible\\".","solution":"from collections import Counter import heapq def rearrange_books(s): Given a string s of lowercase English letters, rearrange it so that no two adjacent characters are the same. If it is not possible, return \\"Not Possible\\". if not s: return \\"Not Possible\\" # Count frequency of each character counter = Counter(s) # Max heap based on character frequency max_heap = [(-freq, char) for char, freq in counter.items()] heapq.heapify(max_heap) previous_char = None previous_freq = 0 result = [] while max_heap or previous_freq: if previous_freq: if not max_heap: return \\"Not Possible\\" current_freq, current_char = heapq.heappop(max_heap) result.append(current_char) current_freq += 1 # since current_freq is negative, incrementing adjusts frequency if previous_freq < 0: heapq.heappush(max_heap, (previous_freq, previous_char)) previous_char = current_char previous_freq = current_freq return \'\'.join(result) def process_test_cases(test_cases): results = [] for b in test_cases: res = rearrange_books(b) results.append(res) return results"},{"question":"An automated email service is designed to handle a specified number of email templates. Each email template comprises a subject line and a message body with placeholders that need to be substituted with actual values before being sent out. The email service also has the functionality to queue email requests and process them in the order they are received. Your task is to write a program that accepts multiple email templates and multiple email requests. Each email request references a specific template and provides the necessary values for the placeholders in the template. The goal is to generate the final emails by replacing the placeholders with corresponding values provided in the requests. Input The input consists of multiple datasets. Each dataset begins with: - An integer T (1 ≤ T ≤ 5), the number of email templates. - The following T lines contain a string representing the subject line of the email template. - For each template, there is: - An integer P (1 ≤ P ≤ 5), the number of placeholders in the template. - The next P lines contain a placeholder. Following the templates, the same dataset includes: - An integer R (1 ≤ R ≤ 10), the number of email requests. - For each request, the following: - An integer template_id (1 ≤ template_id ≤ T), indicating which template to use. - P values that will replace the placeholders in the chosen template. The sequence of email templates and email requests is repeated for multiple datasets, and it ends with a line containing a single zero. Output For each request, output the final email subject line and body after replacing the placeholders with the actual values. Separate the output for different datasets with a blank line. Example Input 2 New Year Offer 2 {discount_code} {expiry_date} Meeting Reminder 1 {date} 3 1 SAVE20 31/12/2023 1 DISCOUNT10 15/01/2024 2 12/11/2023 0 Output New Year Offer SAVE20 31/12/2023 New Year Offer DISCOUNT10 15/01/2024 Meeting Reminder 12/11/2023","solution":"def process_email_requests(datasets): Processes multiple datasets of email templates and email requests. Replaces placeholders in the templates with actual values from the requests and generates list of final email subjects and bodies. result = [] for dataset in datasets: # Email templates processing template_count = dataset[0] templates = [] idx = 1 for _ in range(template_count): subject = dataset[idx] idx += 1 placeholder_count = dataset[idx] idx += 1 placeholder_list = [] for _ in range(placeholder_count): placeholder = dataset[idx] placeholder_list.append(placeholder) idx += 1 templates.append((subject, placeholder_list)) # Email requests processing request_count = dataset[idx] idx += 1 for _ in range(request_count): template_id = dataset[idx] idx += 1 values = [] for _ in range(len(templates[template_id - 1][1])): values.append(dataset[idx]) idx += 1 subject = templates[template_id - 1][0] body = \\"n\\".join(values) result.append(f\\"{subject}n{body}\\") return \\"nn\\".join(result)"},{"question":"Write a function that takes a list of lists as input and returns a list containing the maximum values from each sublist. If a sublist is empty, skip it. Example: ```python max_values([[1, 3, 5], [4, 6, 2], [], [-1, -5, -3], [10, 15, 5]]) # [5, 6, -1, 15] max_values([[7], [0], [2, 8], []]) # [7, 0, 8] ``` Note: - You can assume the input list will contain only integers. - Make sure to handle the case where some of the sublists might be empty.","solution":"def max_values(list_of_lists): Returns a list containing the maximum values from each non-empty sublist in list_of_lists. result = [] for sublist in list_of_lists: if sublist: # Check if sublist is not empty result.append(max(sublist)) return result"},{"question":"Sarah is a fan of number sequences. She recently learned about the Fibonacci sequence and became fascinated by it. The Fibonacci sequence is defined as follows: - F(0) = 0 - F(1) = 1 - F(n) = F(n-1) + F(n-2) for n ≥ 2 Sarah wants to create a program that finds the sum of the first `N` Fibonacci numbers (from F(0) to F(N-1)). Help Sarah by writing a program that computes the sum. -----Input----- The input consists of a single integer `N` (0 ≤ N ≤ 30), the number of Fibonacci numbers to sum. -----Output----- Output the sum of the first `N` Fibonacci numbers. -----Examples----- Sample Input: 5 Sample Output: 7 Sample Input: 10 Sample Output: 88","solution":"def sum_fibonacci(N): Returns the sum of the first N Fibonacci numbers. if N == 0: return 0 elif N == 1: return 0 # only F(0) = 0 elif N == 2: return 1 # F(0) + F(1) = 0 + 1 = 1 fib = [0, 1] # Starting point # Building the Fibonacci sequence for i in range(2, N): fib.append(fib[i-1] + fib[i-2]) return sum(fib)"},{"question":"You are given a list of integers which either contains all unique elements or exactly one element is repeated. Your task is to identify the repeated element if it exists, otherwise return \\"No repetition\\". -----Input----- The first line contains an integer n (2 le n le 2 cdot 10^5) — the number of elements in the list. The second line contains n integers separated by a space representing the elements of the list. -----Output----- Print the repeated element if there is exactly one, otherwise print \\"No repetition\\". -----Examples----- Input 5 1 2 3 4 2 Output 2 Input 4 4 1 3 2 Output No repetition Input 6 7 8 9 7 10 6 Output 7 -----Note----- In the first example, the number 2 is repeated. In the second example, all elements are unique. In the third example, the number 7 is repeated.","solution":"def find_repeated_element(n, elements): Identifies the repeated element if it exists in the list, otherwise returns \\"No repetition\\". :param n: int, the number of elements in the list. :param elements: list of int, the elements in the list. :return: the repeated element or \\"No repetition\\". element_count = {} for element in elements: if element in element_count: return element element_count[element] = 1 return \\"No repetition\\""},{"question":"John is interested in analyzing weather patterns and wants to identify the longest sequence of consecutive days with a temperature above a given threshold. You are to help him by writing a program that takes a list of temperatures and a threshold value and returns the length of the longest sequence of consecutive days where the temperature is above the threshold. -----Input----- The first line of input consists of an integer T, the number of test cases. Each test case starts with a line containing two integers N and K — the number of days in the sequence and the temperature threshold, respectively. The second line of each test case contains N space-separated integers representing the temperatures of each day. -----Output----- For each test case, output the length of the longest sequence of consecutive days with a temperature above the threshold. -----Constraints----- 1 <= T <= 100 1 <= N <= 10^5 -100 <= Temperature <= 100 -100 <= K <= 100 -----Example----- Input: 2 7 30 31 32 33 29 28 30 31 5 10 11 12 9 14 15 Output: 3 2","solution":"def longest_sequence_above_threshold(T, test_cases): Returns the length of the longest sequence of consecutive days where the temperature is above the given threshold for each test case. Parameters: T (int): The number of test cases. test_cases (list of tuples): Each tuple contains (N, K, temperatures) where N is the number of days, K is the temperature threshold, and temperatures is a list of temperatures for each day. Returns: list: A list of integers representing the length of the longest sequence of consecutive days with temperature above the threshold for each test case. result = [] for i in range(T): N, K, temperatures = test_cases[i] max_length = 0 current_length = 0 for temp in temperatures: if temp > K: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 result.append(max_length) return result"},{"question":"Charlie is a software developer working on optimizing a large system for real-time data processing. One of his tasks is to analyze the system logs to identify overlapping time intervals where multiple data processing tasks are running simultaneously. The logs provide the start and end times for each task. Charlie needs to determine the maximum number of overlapping tasks at any given point in time. -----Input----- The first line contains one integer n (1 ≤ n ≤ 2 * 10^5) — the number of tasks logged. Each of the following n lines contains two integer numbers s_{i} and e_{i} (1 ≤ s_{i} ≤ e_{i} ≤ 10^9), representing the start time and end time of the i-th task. -----Output----- Print one integer — the maximum number of overlapping tasks. -----Examples----- Input 5 1 5 2 6 8 10 3 7 5 9 Output 3 Input 3 1 3 2 5 4 6 Output 2","solution":"def max_overlapping_tasks(n, tasks): events = [] for s, e in tasks: events.append((s, 1)) # Task starts events.append((e, -1)) # Task ends # Sorting events, with starting events before ending events if times are same events.sort(key=lambda x: (x[0], x[1])) max_overlap = 0 current_overlap = 0 for event in events: current_overlap += event[1] max_overlap = max(max_overlap, current_overlap) return max_overlap"},{"question":"In a certain city, there is a unique system of public transportation where a single train travels along a circular track with n stations numbered from 1 to n in a clockwise direction. Each hour, the train moves from its current station to the next station in the sequence (for example, from station 3 to station 4), and after station n, the train continues again from station 1. Two friends, Alice and Eve, want to meet at one of the stations. However, they start at different stations and can each decide to stay at their current station or move to the next station every hour. Given the starting stations of Alice and Eve, you need to determine the minimum number of hours required for them to meet at the same station. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of stations. The second line contains two integers a and e (1 ≤ a, e ≤ n) — the starting stations of Alice and Eve, respectively. Output Output a single integer — the minimum number of hours required for Alice and Eve to meet at the same station. Examples Input 5 1 3 Output 2 Input 6 2 5 Output 3 Input 7 4 4 Output 0","solution":"def min_hours_to_meet(n, a, e): Returns the minimum number of hours required for Alice and Eve to meet at the same station. Parameters: n (int): number of stations. a (int): starting station of Alice. e (int): starting station of Eve. if a == e: return 0 distance_clockwise = (e - a) % n distance_counterclockwise = (a - e) % n return min(distance_clockwise, distance_counterclockwise)"},{"question":"You are organizing a music concert with a list of songs. Each song has a specific duration. You want to create a playlist such that the total duration is as close as possible to a given target duration without exceeding it. ___ # Input You will be given two arguments: 1. durations A list of positive integers where each integer represents the duration (in seconds) of a song. Example: `[300, 180, 200, 150]` 2. target The target duration (in seconds) for the playlist. Example: `450` ___ # Output Return the list of song durations that make up the playlist. If multiple playlists have the same total duration closest to the target, return any one of them. If no valid playlist exists, return an empty list. Example: `[300, 150]` ___ # Example ```python durations = [300, 180, 200, 150] target = 450 ``` Output: ```python [300, 150] ``` ___ Notes - You may assume that each song duration is unique. - The maximum length of the `durations` list is 1000. - The playlist can contain zero or more songs.","solution":"def closest_playlist(durations, target): Finds a subsequence of durations that is as close as possible, but does not exceed the given target duration. from itertools import combinations # Initialize the best playlist found best_playlist = [] best_duration = 0 # Check all possible combinations for r in range(1, len(durations) + 1): for combo in combinations(durations, r): total_duration = sum(combo) if total_duration <= target and total_duration > best_duration: best_playlist = combo best_duration = total_duration return list(best_playlist)"},{"question":"There is a string T consisting of lowercase letters. Alex, the Turtle, aims to identify the longest substring of T where no character repeats. Determine the length of this substring. -----Constraints----- - T is a string with length between 1 and 100 (inclusive). - Each character in T is a lowercase letter (a to z). -----Input----- Input is given from Standard Input in the following format: T -----Output----- Print the length of the longest substring of T where no character repeats. -----Sample Input----- abcabcbb -----Sample Output----- 3 The substring with no repeating characters is \\"abc\\", which has a length of 3. The answer cannot be larger, as every substring with more than 3 characters will have repeating characters.","solution":"def longest_unique_substring_length(T): Finds the length of the longest substring in T where no character repeats. Parameters: T (str): The input string consisting of lowercase letters. Returns: int: The length of the longest substring with no repeating characters. n = len(T) max_len = 0 start = 0 char_index_map = {} for end in range(n): if T[end] in char_index_map: start = max(start, char_index_map[T[end]] + 1) char_index_map[T[end]] = end max_len = max(max_len, end - start + 1) return max_len"},{"question":"Given an array of integers, you need to find the length of the longest subsequence such that all elements of the subsequence are sorted in increasing order, and the difference between any two consecutive elements is at least k. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 1000) — the number of elements in the array and the minimum difference between any two consecutive elements of the subsequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^4) — the elements of the array. Output Print a single integer — the length of the longest valid subsequence. Examples Input 5 3 1 5 3 9 7 Output 3 Input 6 2 10 20 30 40 50 60 Output 6 Note In the first example, one of the longest subsequences is [1, 5, 9], so the answer is 3. In the second example, the entire array is already sorted and all elements differ by at least 2, so the longest subsequence has a length of 6.","solution":"def longest_subsequence(n, k, arr): Finds the longest subsequence where the elements are sorted in increasing order and the difference between any two consecutive elements is at least k. # Sort the array first arr.sort() # The dp array where dp[i] represents the longest subsequence ending with arr[i] dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] - arr[j] >= k: dp[i] = max(dp[i], dp[j] + 1) # The length of the longest subsequence return max(dp)"},{"question":"Given a string composed of lowercase English letters, let\'s define the beauty of a substring as the number of distinct characters it contains. Your task is to find and output the maximum beauty among all substrings of a given string. Input - The first line contains an integer `n` (1 ≤ n ≤ 200,000), the length of the string. - The second line contains the string `s` of length `n`. Output - Print a single integer — the maximum beauty among all substrings of the given string. Example Input 7 abcabc Output 3 Input 10 aaaaabbbbb Output 2 Input 3 xyz Output 3","solution":"def max_beauty(n, s): Given a string `s` of length `n`, this function returns the maximum beauty among all substrings. Beauty is defined as the number of distinct characters in a substring. return len(set(s))"},{"question":"Jenna has a collection of N identical-looking boxes, each containing a certain integer number of marbles. She wants to reorganize her collection so that, ultimately, every box contains the same number of marbles. The only operation she can perform is to transfer marbles between two boxes. This operation is defined as follows: select any two boxes and move marbles from one box to the other until one of the boxes becomes empty. Find the maximum number of marbles that can be left in each box after Jenna finishes reorganizing her collection. Example 1: Input: N = 3 A[] = {6, 8, 10} Output: 8 Explanation: - Select boxes with 6 and 8 marbles: Move 6 marbles to the box with 8 marbles. - Remaining boxes: {0, 14, 10} - Select boxes with 0 and 14 marbles: No movement needed since one box is empty. - Select boxes with 10 and 14 marbles: Move 10 marbles to the box with 14 marbles. - Remaining boxes: {0, 0, 24} All non-empty boxes now contain 24 marbles. Since the goal is to find the maximum number of marbles that can be left in each box, the answer is 8. Example 2: Input: N = 4 A[] = {3, 3, 3, 3} Output: 3 Explanation: All boxes are already the same, so no transfers are needed. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxMarblesPerBox() which takes an Integer N and an Array A[] as input and returns the answer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= A[i] <= 10^8","solution":"def maxMarblesPerBox(N, A): Returns the maximum number of marbles that can be left in each box after redistributing the marbles such that all boxes have the same number of marbles. total_marbles = sum(A) return total_marbles // N"},{"question":"Given a string S consisting of lowercase English letters, you are allowed to replace exactly one character in the string with any other lowercase English letter. Your task is to determine the length of the longest substring with at most two distinct characters after performing the replacement operation. ------ Input Format ------ - The first line contains an integer T, the number of test cases. Then the test cases follow. - Each test case consists of a single line containing the string S. ------ Output Format ------ For each test case, output in a single line the length of the longest substring with at most two distinct characters after performing one character replacement. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 ------ Sample Input 1 ------ 3 eceba ccaabbb aaa ------ Sample Output 1 ------ 4 6 3 ------ Explanation 1 ------ Test Case 1: By replacing \'b\' with \'e\' in the string \\"eceba\\", we get the string \\"eceea\\" with the longest substring \\"ecee\\" having length 4. Test Case 2: By replacing one of the \'a\'s with \'c\', we get the string \\"cccabbb\\" with the longest substring \\"ccc\\" or \\"bbb\\" or \\"aa\\" having length 6. Test Case 3: The string \\"aaa\\" already consists of only one distinct character, any replacement will not change its length, so the longest substring is \\"aaa\\" with length 3.","solution":"def longest_substring_two_distinct_after_replacement(S): Given a string S, return the length of the longest substring that contains at most two distinct characters after one character replacement. from collections import defaultdict def at_most_k_distinct(s, k): count = defaultdict(int) left = 0 max_len = 0 distinct_count = 0 for right in range(len(s)): if count[s[right]] == 0: distinct_count += 1 count[s[right]] += 1 while distinct_count > k: count[s[left]] -= 1 if count[s[left]] == 0: distinct_count -= 1 left += 1 max_len = max(max_len, right - left + 1) return max_len # First compute the longest substring with at most 2 distinct characters in current string original_length = at_most_k_distinct(S, 2) # Check if replacing each character can extend the substring max_len_with_replacement = original_length for i in range(len(S)): for replacement in range(26): new_char = chr(ord(\'a\') + replacement) if S[i] != new_char: modified_string = S[:i] + new_char + S[i+1:] max_len_with_replacement = max(max_len_with_replacement, at_most_k_distinct(modified_string, 2)) return max_len_with_replacement def solve(T, test_cases): results = [] for case in test_cases: results.append(longest_substring_two_distinct_after_replacement(case)) return results # Function to parse the input and call the solve function def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T + 1] results = solve(T, test_cases) for result in results: print(result)"},{"question":"Given an array arr[] of N integers, find the minimum number of steps required to make all elements equal. In one step, you can increase or decrease any element of the array by 1. Example 1: Input: N = 4 arr[] = {1, 2, 3, 6} Output: 6 Explanation: We can make all elements equal to 3. Steps for each element: (1 to 3) + (2 to 3) + (3 to 3) + (6 to 3) = 2 + 1 + 0 + 3 = 6. Example 2: Input: N = 3 arr[] = {10, 10, 10} Output: 0 Explanation: All elements are already equal, so no steps are required. Your Task: You don’t need to read input or print anything. Your task is to complete the function minSteps() which takes an integer N and an array arr of size N as input and returns the minimum number of steps required to make all elements equal. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 -10^6 <= arr[i] <= 10^6","solution":"def minSteps(N, arr): Returns the minimum number of steps required to make all elements of the array equal. :param N: int, number of elements in the array :param arr: list of int, the array elements :return: int, minimum number of steps required arr.sort() median = arr[N//2] steps = sum(abs(x - median) for x in arr) return steps"},{"question":"You are given a list of non-negative integers representing the heights of a set of buildings arranged in a row. Each building is of unit width and the building heights are given in a 1-D array `heights` where `heights[i]` is the height of the `i-th` building. The rainwater problem is to find out how much water these buildings can trap after raining. Write a function `trapWater(heights: List[int]) -> int` that takes the list of heights as input and returns the total amount of water that can be trapped. Example 1: Input: heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] Output: 6 Example 2: Input: heights = [4, 2, 0, 3, 2, 5] Output: 9 Constraints: * 1 <= heights.length <= 2 * 10^4 * 0 <= heights[i] <= 10^5","solution":"from typing import List def trapWater(heights: List[int]) -> int: if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Masha and Petya are playing a game with sequences. They came up with an operation called \\"beautiful alteration\\". A beautiful alteration for sequence a of length n is defined as rearranging elements of the sequence such that: - No two equal elements are adjacent. - The resulting sequence has the maximum possible number of beautiful pairs. A beautiful pair is defined as any two consecutive elements in the rearranged sequence. Masha and Petya want to know the maximum number of beautiful pairs they can achieve by creating a beautiful alteration for sequence a. If it\'s not possible to rearrange the sequence without two equal elements being adjacent, they want to know that too. Input The first line contains an integer n (1 ≤ n ≤ 100000) — the length of array a. The second line contains n integers: a1, a2, ..., an (1 ≤ ai ≤ 100000). Output Print a single integer — the maximum number of beautiful pairs in the rearranged sequence, or -1 if it\'s not possible to rearrange the sequence without two equal elements being adjacent. Examples Input 5 1 2 2 3 3 Output 4 Input 6 1 1 1 1 1 1 Output -1","solution":"def max_beautiful_pairs(n, array): from collections import Counter if n == 0: return 0 if n == 1: return 0 counts = Counter(array) max_freq = max(counts.values()) if max_freq > (n + 1) // 2: return -1 return n - 1 # Maximum number of beautiful pairs is n-1 when no element is adjacent to itself."},{"question":"You are given an array of integers. Your task is to find the maximum sum of a contiguous subarray with at least four elements. For clarification, a contiguous subarray is a sequence of consecutive elements that share space within the array. Your solution should ensure that the contiguous subarray considered for the maximum sum contains a minimum length of four elements. Input Format: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains: - The first integer N, the number of elements in the array. - N integers representing the elements of the array. Output Format: - For each test case, print the maximum sum of a contiguous subarray with at least four elements. Constraints: - 1 <= T <= 50 - 4 <= N <= 1000 - -10^5 <= Array Elements <= 10^5 Sample Input: 3 5 1 2 3 -2 5 6 -2 -3 4 -1 -2 1 5 -3 8 -1 -2 -3 -4 -5 -6 -7 -8 Sample Output: 9 7 -10 Explanation: For the first test case, the subarray [1, 2, 3, -2, 5] has a maximum sum of 9. For the second test case, the subarray [4, -1, -2, 1, 5] has a maximum sum of 7. For the third test case, the subarray [-1, -2, -3, -4] has a maximum sum of -10.","solution":"def max_subarray_sum_with_min_four_elements(nums): n = len(nums) if n < 4: return 0 # Should not happen due to problem constraints max_sum = float(\'-inf\') current_sum = 0 for i in range(4, n + 1): current_sum = sum(nums[:i]) max_sum = max(max_sum, current_sum) for j in range(i, n): current_sum += nums[j] - nums[j - i] max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(test_cases): results = [] for n, array in test_cases: results.append(max_subarray_sum_with_min_four_elements(array)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) array = list(map(int, lines[idx + 1].split())) test_cases.append((N, array)) idx += 2 return test_cases def main(input_str): test_cases = parse_input(input_str) results = process_test_cases(test_cases) return results"},{"question":"Write a function named `count_duplicates` that takes a list of integers and returns the count of distinct integers that appear more than once in the list. For example, given the list `[1, 2, 3, 1, 2, 2]`, the function should return `2` because the integers `1` and `2` appear more than once.","solution":"def count_duplicates(lst): Returns the count of distinct integers that appear more than once in the list. :param lst: List of integers :return: Number of distinct integers with duplicates from collections import Counter count = Counter(lst) return sum(1 for value in count.values() if value > 1)"},{"question":"Robot Path Planning You are designing a path-planning algorithm for a simple 2D grid-based world in which a robot navigates from a start position to a goal position. The world is represented by an N x M grid where certain cells are marked as obstacles that the robot cannot pass through. The robot can move up, down, left, or right and may not move diagonally. It moves one cell per step. Your task is to determine the shortest path from the start position to the goal position, if such a path exists. If no path exists, you should indicate that as well. # Input The input consists of multiple datasets. Each dataset is represented in the following format: - The first line contains two integers N and M separated by a blank space, where 1 ≤ N, M ≤ 1000. N represents the number of rows in the grid, and M represents the number of columns. - The next N lines each contain M characters. Each character represents a cell in the grid and can be one of the following: - \'.\' (dot) indicates a free cell. - \'#\' (hash) indicates an obstacle. - \'S\' indicates the start position and appears exactly once in the grid. - \'G\' indicates the goal position and appears exactly once in the grid. The end of the input is represented by a line containing two zeros separated by a blank space. # Output For each dataset, output a single integer which is the minimum number of steps required to reach the goal from the start. If no such path exists, output -1. # Example Input 3 4 S... .#.G .... 5 5 S.. ..#.G .#. ..... ..... 0 0 # Example Output 5 -1","solution":"from collections import deque def find_shortest_path(grid, n, m): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = None goal = None for r in range(n): for c in range(m): if grid[r][c] == \'S\': start = (r, c) elif grid[r][c] == \'G\': goal = (r, c) if not start or not goal: return -1 queue = deque([(start, 0)]) visited = set([start]) while queue: (current_r, current_c), steps = queue.popleft() for dr, dc in directions: new_r, new_c = current_r + dr, current_c + dc if 0 <= new_r < n and 0 <= new_c < m and (new_r, new_c) not in visited: if grid[new_r][new_c] == \'G\': return steps + 1 if grid[new_r][new_c] == \'.\': queue.append(((new_r, new_c), steps + 1)) visited.add((new_r, new_c)) return -1 def robot_path_planning(data): results = [] i = 0 while i < len(data): n, m = map(int, data[i].split()) if n == 0 and m == 0: break grid = [] for j in range(1, n + 1): grid.append(list(data[i + j])) results.append(find_shortest_path(grid, n, m)) i += n + 1 return results"},{"question":"Given a large grid of size `N x M` (1 ≤ N, M ≤ 1000), your task is to find the number of distinct islands present in the grid. An island is formed by connecting adjacent \'1\'s horizontally or vertically (diagonals do not count). Consider the grid boundaries to determine connectivity. # Input - First line contains two integers, `N` and `M`, the dimensions of the grid. - The next `N` lines contain `M` characters each, describing the grid. Each character is either \'1\' (land) or \'0\' (water). # Output - A single integer, the number of distinct islands. # Sample Input 1 ``` 4 5 11000 11000 00100 00011 ``` # Sample Output 1 ``` 3 ``` # Sample Input 2 ``` 3 3 111 010 111 ``` # Sample Output 2 ``` 1 ``` # Explanation In the first example, there are three distinct islands: - The first island is in the top-left corner connected through cells (1,1), (1,2), (2,1), and (2,2). - The second island is a single cell at (3,3). - The third island is in the bottom-right corner connected through cells (4,4) and (4,5). In the second example, all \'1\'s are connected either directly or indirectly forming a single island.","solution":"def count_islands(N, M, grid): Count the number of distinct islands in a grid of \'0\'s and \'1\'s. def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= M or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark the land as visited by sinking the island # Check all four directions (up, down, left, right) dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) num_islands = 0 for i in range(N): for j in range(M): if grid[i][j] == \'1\': num_islands += 1 dfs(i, j) return num_islands"},{"question":"In a remote village, the local people are fascinated by unique gifts. Each gift is represented by an integer, and every gift must be distinct to ensure its uniqueness. During the festive season, the head of the village distributes a list of n gifts each represented by an integer. However, the distribution process is chaotic, and some gifts might appear more than once in the list. Your task is to sort the gift list in ascending order so that no gift is repeated. If a gift appears multiple times, it should only appear once in the sorted list of gifts. Input: - The first line contains a single integer n, the number of gifts (1 ≤ n ≤ 10^5). - The second line contains n space-separated integers, the gift identifiers (1 ≤ gift identifier ≤ 10^9). Output: - Print the sorted list of unique gift identifiers in ascending order. Example Input: 5 4 1 2 3 3 Output: 1 2 3 4 Input: 6 10 5 5 5 1 7 Output: 1 5 7 10","solution":"def get_unique_sorted_gifts(n, gifts): Given a number n and a list of gifts represented by integers, return a sorted list of unique gifts. unique_gifts = sorted(set(gifts)) return unique_gifts"},{"question":"In the realm of coding challenges, you embark on a mission to optimize the process of search query predictions. Imagine you are working on a cutting-edge project to enhance the search functionality of a vast online platform. One crucial feature to implement is a highly efficient autocomplete system that predicts and completes user queries based on a pre-defined list of words. You are given two types of inputs: 1. A set of dictionary words, which consist of lowercase English letters. 2. A series of input queries, which you are required to autocomplete based on the dictionary words. For each query, you should return a list of all dictionary words that start with the given query string, sorted lexicographically. If no dictionary words match the query, return an empty list. Let\'s dive into the example: Suppose the dictionary contains the following words: ``` apple, application, apricot, banana, berry, cherry, date ``` And the input queries are: ``` app, ban, ca, z ``` For the given dictionary words and queries, your program should output the following predictions: ``` [\'apple\', \'application\'] [\'banana\'] [] [] ``` Input Specifications: - The first line contains an integer \'D\', the number of dictionary words. - The next \'D\' lines each contain a single word, representing the dictionary. - After the dictionary words, an integer \'Q\' is provided, indicating the number of queries. - The following \'Q\' lines contain one query each. Output Specifications: - For each query, print a list of strings which are the autocompleted words, sorted lexicographically. Constraints: - 1 ≤ D, Q ≤ 1000 - Each word is a non-empty string of maximum length 100, consisting of lowercase English letters only. Example: Input: ``` 7 apple application apricot banana berry cherry date 4 app ban ca z ``` Output: ``` [\'apple\', \'application\'] [\'banana\'] [] [] ``` Your task is to implement this autocomplete prediction feature in a highly efficient manner, ensuring that the system quickly and accurately returns the predictions for each user query.","solution":"def autocomplete(dictionary_words, queries): Autocompletes the queries based on the dictionary words. Returns a list of predictions for each query. :param dictionary_words: List of words in the dictionary :param queries: List of query strings :return: List of lists, where each sublist contains the matched dictionary words for a query # Sort the dictionary words lexicographically dictionary_words.sort() results = [] for query in queries: matched_words = [] for word in dictionary_words: if word.startswith(query): matched_words.append(word) elif word > query: break results.append(matched_words) return results"},{"question":"You are tasked with finding the longest consecutive sequence of integers present in an unsorted array. A consecutive sequence is a range of numbers where each number appears exactly once in the array and is in ascending order without any gaps. Write a function `longestConsecutiveSequence(arr)` that takes a single list of integers `arr` and returns the length of the longest consecutive element sequence. # Input - A single list of integers, `arr`, where 0 leq arr.length leq 10^5 and -10^9 leq arr[i] leq 10^9. # Output - An integer representing the length of the longest consecutive sequence. # Function Signature ```python def longestConsecutiveSequence(arr: List[int]) -> int: pass ``` # Example Input: `arr = [100, 4, 200, 1, 3, 2]` Output: `4` *Explanation:* The longest consecutive elements sequence is `[1, 2, 3, 4]`, so its length is 4. # Additional Constraints: - The function should handle arrays with very large numbers efficiently. - Optimize for time complexity as much as possible, ideally, the solution should run in O(n) time. # Example Input: `arr = [0, -1, 1, 2, 3, -2, -3, -4]` Output: `8` *Explanation:* The longest consecutive elements sequence is `[-4, -3, -2, -1, 0, 1, 2, 3]`, so the length is 8. Note that each element in the array can only be used once in determining the consecutive sequence.","solution":"def longestConsecutiveSequence(arr): Return the length of the longest consecutive sequence in an unsorted array. if not arr: return 0 nums_set = set(arr) longest_streak = 0 for num in nums_set: # Only start counting when you see the beginning of a sequence if num - 1 not in nums_set: current_num = num current_streak = 1 while current_num + 1 in nums_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"Vera is a librarian at a local library and she needs your help to organize a new section. She wants to arrange books according to the Dewey Decimal Classification system used in libraries around the world. You are given a list of books that Vera needs to organize. Each book is represented by a string with its title and a Dewey Decimal number separated by a comma. Vera wants to sort the books in ascending order based on the Dewey Decimal number. If two books have the same Dewey Decimal number, they should be sorted alphabetically by their title. Your task is to help Vera achieve this by writing a program that sorts the list of books accordingly. Input The first line contains a single integer n (1 ≤ n ≤ 1000) – the number of books. The following n lines each contain a string representing a book in the format \\"title,dewey_decimal\\", where `title` is a non-empty string with at most 100 characters, and `dewey_decimal` is a floating point number between 0 and 999.999 inclusive. Output Output the sorted list of book titles, one per line. Examples Input 3 The Great Gatsby,823.912 To Kill a Mockingbird,813.54 1984,823.912 Output 1984 The Great Gatsby To Kill a Mockingbird Input 2 Introduction to Algorithms,005.1 Artificial Intelligence: A Modern Approach,006.3 Output Introduction to Algorithms Artificial Intelligence: A Modern Approach","solution":"def sort_books(n, books): Sort books based on Dewey Decimal number, and alphabetically by title if numbers are the same. Args: n (int): Number of books books (list): List of strings representing books with title and Dewey Decimal number Returns: list: Sorted list of book titles # Define a key function to extract the sorting criteria from each book string def sorting_key(book): title, dewey_decimal = book.rsplit(\',\', 1) return float(dewey_decimal), title # Sort the books using the sorting key sorted_books = sorted(books, key=sorting_key) # Extract and return only the titles in sorted order return [book.rsplit(\',\', 1)[0] for book in sorted_books]"},{"question":"You are given a sequence of N integers. An integer in this sequence is called \\"Lonely\\" if it appears exactly once. Write a function to find all Lonely integers in the sequence. Input: - The first line contains an integer N, the number of integers in the sequence. - The second line contains N space-separated integers representing the sequence. Output: - Print space-separated Lonely integers in ascending order. If there are no Lonely integers, print -1. Constraints: 1 ≤ N ≤ 10^5 1 ≤ each integer ≤ 10^9 SAMPLE INPUT 1 7 4 3 2 7 8 3 2 SAMPLE OUTPUT 1 4 7 8 SAMPLE INPUT 2 6 1 2 2 3 3 4 SAMPLE OUTPUT 2 1 4","solution":"def find_lonely_integers(N, sequence): Returns all lonely integers in ascending order. from collections import Counter # Create a counter to count occurrences of each integer count = Counter(sequence) # Extract lonely integers lonely_integers = [num for num in count if count[num] == 1] if not lonely_integers: return [-1] # Return the sorted list of lonely integers return sorted(lonely_integers)"},{"question":"Write a function to determine the minimum number of operations required to convert a given string `S1` into another string `S2`. You can only use the following three operations: 1. Insert a character 2. Delete a character 3. Replace a character Task Your program should output the minimum number of operations required to convert the first string into the second string. Constraints 1 ≤ length(S1), length(S2) ≤ 100 S1 and S2 will contain only lowercase English letters. Input Format Two lines, each containing one string, `S1` and `S2`. Output Format A single integer denoting the minimum number of operations required. SAMPLE INPUT kitten sitting SAMPLE OUTPUT 3 Explanation To convert \\"kitten\\" into \\"sitting\\", you need to perform 3 operations: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' Therefore, the output is 3.","solution":"def min_operations(S1, S2): Returns the minimum number of operations required to convert S1 into S2 using insert, delete, and replace operations. m, n = len(S1), len(S2) # Initialize a matrix to store the minimum number of operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases for i in range(m + 1): dp[i][0] = i # Deleting all characters from S1 for j in range(n + 1): dp[0][j] = j # Inserting all characters into S1 # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if S1[i - 1] == S2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min( dp[i - 1][j], # Deletion dp[i][j - 1], # Insertion dp[i - 1][j - 1] # Replacement ) + 1 return dp[m][n]"},{"question":"Given a list of words, create a function that finds and returns the longest word that can be formed by deleting some characters of the given string `s` without reordering the remaining characters. input ==== Two values: - `s` : The string from which we want to form words. - `word_list` : A list containing words to be checked. output ==== One value: - __longest_word__ : The longest word that can be formed by deleting some characters of `s`. notes ==== If there are more than one possible results, return the one which appears first in the `word_list`. If no words from the `word_list` can be formed, return an empty string. examples ==== input ==== ``` s = \\"abpcplea\\" word_list = [\\"ale\\",\\"apple\\",\\"monkey\\",\\"plea\\"] ``` output ==== ``` apple ``` input ==== ``` s = \\"abpcplea\\" word_list = [\\"a\\",\\"b\\",\\"c\\"] ``` output ==== ``` a ```","solution":"def can_form(word, s): Helper function to determine if a word can be formed by deleting some characters of string s without reordering the remaining characters. it = iter(s) return all(char in it for char in word) def longest_word(s, word_list): Returns the longest word that can be formed by deleting some characters of the given string `s` without reordering the remaining characters. If there are multiple words with the same length, returns the one that appears first in the `word_list`. eligible_words = [word for word in word_list if can_form(word, s)] eligible_words.sort(key=lambda x: (-len(x), word_list.index(x))) return eligible_words[0] if eligible_words else \\"\\""},{"question":"Write a program to calculate the total number of distinct substrings of a given string. Input - A single line string `s` (1 ≤ |s| ≤ 100) Output - An integer representing the number of distinct substrings of the given string `s`. Example Input: `ababa` Output: 15 Explanation: The distinct substrings of `ababa` are: `a, b, ab, ba, aba, ab, aba, bab, bab, abab, baba, ababa` There are 15 in total.","solution":"def count_distinct_substrings(s): Calculates the total number of distinct substrings of a given string `s`. n = len(s) substrings = set() # Generate all possible substrings for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) # The number of distinct substrings return len(substrings)"},{"question":"# Number Transformations You are given a number n and an initial array of n elements. The problem is to make all the elements of the array equal by performing a specific transformation operation zero or more times. In one transformation, you can choose any three consecutive elements of the array and either: - Decrease the middle element by 1 if the middle element is greater than the minimum of its neighbors. - Increase the middle element by 1 if the middle element is less than the maximum of its neighbors. Your task is to determine the minimum number of transformations needed to make all elements of the array equal. If it is not possible, return -1. **Input** The first line contains an integer T, the number of test cases. Each test case begins with an integer n, the number of elements in the array. The second line contains n integers representing the elements of the array. **Output** For each test case, print the minimum number of transformations required to make all elements equal or -1 if it is not possible. **Constraints** - 1 ≤ T ≤ 20 - 3 ≤ n ≤ 50 - 1 ≤ text{Array element} ≤ 100 **SAMPLE INPUT** ``` 2 4 1 2 3 2 5 1 3 2 4 1 ``` **SAMPLE OUTPUT** ``` 3 -1 ``` **Explanation** Test case #1: By performing the following transformations: 1. Select the subarray [1, 2, 3] and decrease 2 to 1. 2. Select the subarray [2, 3, 2] and decrease 3 to 2. 3. All elements become [1, 2, 2, 1], and there is no way to make all elements equal. Test case #2: It is not possible to make all elements equal due to the disparity in the array structure.","solution":"def min_transformations(T, test_cases): results = [] for test in test_cases: n, arr = test # A helper function to check if all elements are the same if len(set(arr)) == 1: results.append(0) else: possible = False for i in range(1, n-1): if arr[i] != arr[i-1] or arr[i] != arr[i+1]: possible = True break if possible: # If transformations would be possible in some scenario where neighbors are sorted around the center value. results.append(-1) else: results.append(0) return results"},{"question":"Design and implement a function that simulates the operations of an elevator in a multi-story building. Task: Given the current position of the elevator, a list of requests for floors, and the direction of movement (up or down), write a function that returns the optimal order in which the elevator should visit the floors. # Elevator System - The building has `n` floors numbered from `1` to `n`. - The elevator can move in two directions: `UP` and `DOWN`. - The elevator starts at a given floor. - The elevator has to serve requests optimally in the current direction as much as possible before reversing direction if needed. # Function Signature ```python def elevator_system(current_floor: int, direction: str, requests: List[int], total_floors: int) -> List[int]: pass ``` # Input 1. `current_floor (int)`: The current floor at which the elevator is positioned. (`1 <= current_floor <= total_floors`) 2. `direction (str)`: The current moving direction of the elevator (`UP` or `DOWN`). 3. `requests (List[int])`: A list of floor requests that the elevator has to serve. (`1 <= request <= total_floors`) 4. `total_floors (int)`: The total number of floors in the building. # Output - Returns a List of `int` representing the order of floors the elevator will visit. # Examples Example 1: ```python current_floor = 5 direction = \\"UP\\" requests = [1, 3, 7, 9] total_floors = 10 Output: [7, 9, 3, 1] ``` Example 2: ```python current_floor = 2 direction = \\"DOWN\\" requests = [8, 6, 4, 1] total_floors = 10 Output: [1, 4, 6, 8] ``` # Notes - The elevator should serve as many requests as possible in the current direction before reversing direction. - If there are no requests in the current direction, the elevator should immediately reverse direction and serve the pending requests.","solution":"def elevator_system(current_floor: int, direction: str, requests: list, total_floors: int) -> list: up_requests = sorted([floor for floor in requests if floor > current_floor]) down_requests = sorted([floor for floor in requests if floor < current_floor], reverse=True) if direction == \\"UP\\": if not up_requests: return down_requests + up_requests return up_requests + down_requests else: # direction == \\"DOWN\\" if not down_requests: return up_requests + down_requests return down_requests + up_requests"},{"question":"You are given a grid of N times M cells. Each cell contains an integer. You need to find the sum of all unique integer values that are present in the cells of the grid. # Input - The first line contains two integers N (number of rows) and M (number of columns). - The next N lines each contain M integers representing the cells of the grid. # Output - Output a single integer which is the sum of all unique integer values present in the grid. # Constraints - 1 leq N, M leq 100 - Each value in the grid is an integer between -10^3 and 10^3 inclusive. # Example ----- Input ----- ``` 3 3 1 2 3 4 1 5 6 7 2 ``` ----- Output ----- ``` 28 ``` # Explanation The unique values present in the grid are {1, 2, 3, 4, 5, 6, 7}, and their sum is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.","solution":"def sum_of_unique_numbers(N, M, grid): Returns the sum of all unique integer values present in the N x M grid. :param N: Number of rows in the grid :param M: Number of columns in the grid :param grid: List of lists containing integers representing the grid :return: Sum of unique integers in the grid unique_numbers = set() for row in grid: for num in row: unique_numbers.add(num) return sum(unique_numbers)"},{"question":"The ancient city of Archora is known for its labyrinthine garden filled with winding paths and towering hedges. The city is planning to host its annual garden festival, and one of the highlights is the illuminating path walk, where visitors will walk through a path lit by beautiful lanterns. The path is represented by an n-by-m grid where each cell can either be an open path (\'O\') or an obstacle (\'X\'). Your goal is to find the shortest path from the entrance, located at the top-left corner (cell (0, 0)), to the exit, which is at the bottom-right corner (cell (n-1, m-1)). You can move from a cell to its adjacent cell in four possible directions: up, down, left, or right. If it is not possible to find such a path, you should return -1. -----Input----- The first line contains two integers n and m (1 le n, m le 50): the dimensions of the grid. Each of the following n lines contains m characters: the map of the garden. Each character is either \'O\' (an open path) or \'X\' (an obstacle). -----Output----- Print one integer, the minimum number of steps to reach the exit from the entrance. If it is not possible to reach the exit, print -1. -----Examples----- Sample Input 1: 5 5 OOOOO OXOXO OOOOO OXOXO OOOOO Sample Output 1: 8 Sample Input 2: 3 3 OXO XOX OXO Sample Output 2: -1","solution":"from collections import deque def shortest_path(n, m, grid): # Directions: Up, Down, Left, Right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if the starting or ending point is an obstacle if grid[0][0] == \'X\' or grid[n-1][m-1] == \'X\': return -1 # Initialize the queue for BFS and visited set queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set((0, 0)) while queue: x, y, steps = queue.popleft() # Check if we\'ve reached the end if x == n-1 and y == m-1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'O\': visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1 # Example usage # n = 5 # m = 5 # grid = [ # \\"OOOOO\\", # \\"OXOXO\\", # \\"OOOOO\\", # \\"OXOXO\\", # \\"OOOOO\\" # ] # print(shortest_path(n, m, grid)) # Output: 8"},{"question":"A librarian wants to create a simplified catalog system for a section of books. Each book belongs to exactly one genre but can also be tagged with multiple keywords to describe its content. The librarian wants to create a summary of the library section based on genres and keywords. For each genre, output the list of unique keywords associated with books in that genre in alphabetical order. ------ Input ------ Input begins with an integer T, the number of test cases. Each test case starts with an integer N, the number of books. Each of the next N lines describes a book with two parts: - a string G, the genre of the book; - a sequence of space-separated strings K, the keywords associated with the book. ------ Output ------ For each test case, output the genres and their associated keywords in alphabetical order. For each genre, output the list of unique sorted keywords. The output should be formatted with the genre on one line, followed by its keywords on the next line, indented by a space. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ length of G ≤ 50 1 ≤ number of keywords K per book ≤ 20 1 ≤ length of each keyword ≤ 20 ----- Sample Input 1 ------ 1 3 ScienceFiction alien spaceship future Fantasy magic dragon adventure ScienceFiction future space travel ----- Sample Output 1 ------ Fantasy adventure dragon magic ScienceFiction alien future space spaceship travel","solution":"def summarize_catalog_system(T, test_cases): results = [] for case in test_cases: N, books = case genre_keywords = {} for book in books: G, *K = book.split() if G not in genre_keywords: genre_keywords[G] = set() genre_keywords[G].update(K) for genre in sorted(genre_keywords.keys()): results.append(genre) results.append(\\" \\" + \\" \\".join(sorted(genre_keywords[genre]))) return results"},{"question":"You are given a list of integers. You are allowed to swap any two elements at most once. Your task is to find the smallest possible lexicographical order of the list after at most one swap operation. Lexicographical comparison of two sequences is based on comparing the elements in the sequences from left to right. For example, the sequence [1, 2, 3] is smaller than [1, 3, 2] because the first non-matching element (2 vs 3) is smaller in the first sequence. -----Input----- The first line contains an integer n (1 le n le 1000) — the size of the list. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 1000) — the elements of the list. -----Output----- Print a single line containing the smallest possible lexicographical order of the list after at most one swap. -----Example----- Input 5 3 2 1 4 5 Output 1 2 3 4 5 Input 4 4 3 2 1 Output 1 3 2 4","solution":"def smallest_lexicographical_order(n, lst): Returns the smallest lexicographical order of the list after at most one swap operation. sorted_lst = sorted(lst) if lst == sorted_lst: return lst for i in range(n): if lst[i] != sorted_lst[i]: break min_pos = i for j in range(i + 1, n): if lst[j] <= sorted_lst[i] and (j == n - 1 or lst[j] < sorted_lst[i + 1]): min_pos = j lst[i], lst[min_pos] = lst[min_pos], lst[i] return lst"},{"question":"You are tasked with creating a new virtual banking system that ensures all user transactions are secure. One important feature you need to implement is a transaction history sorter. Each transaction record contains a timestamp and an amount. Your goal is to sort the transaction history by the timestamp in ascending order. Additionally, if there are multiple transactions with the same timestamp, they should be sorted by the amount in descending order within that timestamp. Input Format The first line contains an integer mathbf{N}, the number of transactions. Each of the next mathbf{N} lines contains two space-separated values: an integer mathbf{T} (the timestamp) and an integer mathbf{A} (the transaction amount). Output Format Output the sorted list of transactions, where each transaction is printed on a new line, formatted as \\"<T> <A>\\". Constraints 1 leq N leq 10^5 1 leq T leq 10^9 1 leq A leq 10^9 Sample Input 5 1001 500 1002 800 1001 200 1002 400 1003 700 Sample Output 1001 500 1001 200 1002 800 1002 400 1003 700 Sample Input 3 500 300 500 900 500 100 Sample Output 500 900 500 300 500 100 The transaction history should be sorted primarily by the timestamp in ascending order, and for transactions with the same timestamp, by the amount in descending order.","solution":"def sort_transactions(transactions): Sorts the transaction history by the timestamp in ascending order and by the amount in descending order within that timestamp. Args: transactions (list of tuples): A list where each tuple contains two integers, a timestamp and a transaction amount. Returns: list of tuples: The sorted list of transactions. # Sorting by timestamp (ascending) and amount (descending) return sorted(transactions, key=lambda x: (x[0], -x[1])) # Example input transactions = [ (1001, 500), (1002, 800), (1001, 200), (1002, 400), (1003, 700) ] # Function call to test sorted_transactions = sort_transactions(transactions) # Output the sorted list for t in sorted_transactions: print(f\\"{t[0]} {t[1]}\\")"},{"question":"Your task is to find the shortest distance from the starting point to the destination in a 2D grid. The 2D grid is represented by a list of lists, where a `0` represents an empty cell you can pass through, and a `1` represents an obstacle you cannot pass through. You can move in four possible directions: up, down, left, and right. # Input: * A 2D grid of size `m x n` where `1 <= m, n <= 50` * A starting coordinate `(start_x, start_y)` * A destination coordinate `(dest_x, dest_y)` # Output: * The shortest distance from the starting point to the destination. If no path exists, output `-1`. # Examples: ``` shortest_path([[0, 0, 1], [0, 0, 0], [1, 0, 0]], (0, 0), (2, 2)) -> 4 # Path: (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2) with 4 steps ``` ``` shortest_path([[0, 1, 1], [1, 1, 0], [1, 0, 0]], (0, 0), (2, 2)) -> -1 # No path exists from (0,0) to (2,2) ``` Do not expect any out-of-bound coordinates or invalid grids.","solution":"from collections import deque def shortest_path(grid, start, end): Finds the shortest path in a 2D grid from start to end. :param grid: List of lists of `0` and `1`, where `0` is empty cell and `1` is obstacle. :param start: Tuple (start_x, start_y) representing the start coordinates. :param end: Tuple (end_x, end_y) representing the end coordinates. :return: The shortest path length or `-1` if no path exists. if not grid or not grid[0] or grid[start[0]][start[1]] == 1 or grid[end[0]][end[1]] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A gardening project involves exactly N types of plants. Each type of plant has a specific growth cycle. The gardeners want to plant all types of plants in such a way that they bloom on the same day. For a plant of type A, it blooms every A days. The goal is to determine the minimum number of days after which all plants bloom simultaneously. -----Input----- - The first line of the input contains an integer T, the number of test cases. Each test case consists of two lines. - The first line of each test case contains an integer N, the number of plant types. - The second line contains N positive integers separated by spaces, representing the growth cycles of each type of plant. -----Output----- For each test case, print a single line containing one integer — the minimum number of days after which all plants bloom simultaneously. -----Constraints----- - 1 le T le 20 - 1 le N le 50 - 1 le Growth cycle of each type le 10^3 -----Example Input----- 2 3 2 3 4 2 3 5 -----Example Output----- 12 15 -----Explanation----- Example case 1: The plants with growth cycles 2, 3, and 4 days respectively, will all bloom simultaneously after 12 days. Example case 2: The plants with growth cycles 3 and 5 days respectively, will both bloom simultaneously after 15 days.","solution":"import math def lcm(a, b): return abs(a * b) // math.gcd(a, b) def find_min_bloom_days(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] cycles = test_cases[i][1] result = cycles[0] for j in range(1, N): result = lcm(result, cycles[j]) results.append(result) return results"},{"question":"You are working on a project that requires you to parse mathematical expressions in their infix notation and evaluate them. However, the expressions can have nested parentheses, making the evaluation complex. Your task is to write a function that evaluates a given mathematical expression string in infix notation. The string will contain integers and the operators `+`, `-`, `*`, `/` as well as parentheses for nested operations. The expression will be well-formed with no spaces between characters unless they are part of the integers. - `1+2*(3+4)` should return 15 - `(2+3)*(4+(5*6))` should return 148 - `10/(5-3)` should return 5 You should handle integer division by truncating towards zero. **Function Signature:** ```python def evaluate_expression(expression: str) -> int: pass ``` **Constraints:** - You can assume the input string is a valid expression and it will always be a non-empty string containing only digits and the specified operators. - The integers will fit within the range of a 32-bit signed integer, i.e., [-2^31, 2^31 - 1]. Write the `evaluate_expression` function to solve the problem.","solution":"def evaluate_expression(expression: str) -> int: def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': # Integer division that truncates towards zero values.append(int(left / right)) def precedence(operator): if operator in (\'+\', \'-\'): return 1 if operator in (\'*\', \'/\'): return 2 return 0 operators = [] values = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = val * 10 + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() # remove \'(\' else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Alex, being a data science enthusiast, loves working with statistics. He has gathered some height data of students in his class and wants to perform a basic statistical analysis. He needs your help to determine the average height as well as the median height of the students. The average height is calculated as the sum of all heights divided by the number of students. The median height is the middle value when the heights are arranged in non-decreasing order. If the number of students is even, the median is the average of the two middle values. Given a list of heights, your task is to calculate and print the average and median heights. ------ Input Format ------ The first line of input consists of a single integer N denoting the number of students. The second line of input consists of N space-separated integers H1, H2, ..., HN, where Hi denotes the height of the ith student. ------ Output Format ------ Print two lines: 1. The first line should contain the average height, rounded to two decimal places. 2. The second line should contain the median height, rounded to two decimal places. ------ Constraints ------ 1 ≤ N ≤ 100 100 ≤ Hi ≤ 250 ----- Sample Input 1 ------ 5 150 160 170 180 190 ----- Sample Output 1 ------ 170.00 170.00 ----- explanation 1 ------ For the first example, N = 5 and the heights are [150, 160, 170, 180, 190]. The average height is (150 + 160 + 170 + 180 + 190) / 5 = 170.00. The median height is the middle value in the sorted list which is 170.00. ----- Sample Input 2 ------ 4 160 162 171 165 ----- Sample Output 2 ------ 164.50 163.50 ----- explanation 2 ------ For the second example, N = 4 and the heights are [160, 162, 171, 165]. The average height is (160 + 162 + 171 + 165) / 4 = 164.50. The median height is the average of the two middle values in the sorted list [160, 162, 165, 171], which is (162 + 165) / 2 = 163.50. ----- Sample Input 3 ------ 3 155 160 165 ----- Sample Output 3 ------ 160.00 160.00 ----- explanation 3 ------ For the third example, N = 3 and the heights are [155, 160, 165]. The average height is (155 + 160 + 165) / 3 = 160.00. The median height is the middle value in the sorted list which is 160.00.","solution":"def calculate_average_and_median(N, heights): Computes the average and median heights from a list of heights. Args: N (int): The number of students. heights (list of int): The heights of each student. Returns: tuple: A tuple containing the average height and the median height, rounded to two decimal places. # Calculate average average_height = round(sum(heights) / N, 2) # Calculate median sorted_heights = sorted(heights) if N % 2 == 1: median_height = round(sorted_heights[N // 2], 2) else: median_height = round((sorted_heights[N // 2 - 1] + sorted_heights[N // 2]) / 2, 2) return average_height, median_height"},{"question":"Implement a function that determines if a given directed graph contains a cycle. ------ Input Format ------ - First line contains T, the number of test cases. Then the test cases follow. - First line of each test case contains two integers N and M, the number of nodes and edges in the graph. - Each of the next M lines contains two integers u and v, indicating a directed edge from node u to node v. ------ Output Format ------ - For each test case, output a single line \\"YES\\" if the graph contains a cycle, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N, M ≤ 10^3 1 ≤ u, v ≤ N - Each pair (u, v) is unique. ----- Sample Input ------ 2 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 ----- Sample Output ------ YES NO ----- Explanation ------ Test case 1: The graph contains a cycle: 2 -> 3 -> 4 -> 2. Test case 2: The graph does not contain any cycles.","solution":"def detect_cycle_in_graph(num_nodes, edges): from collections import defaultdict # Create graph using adjacency list representation graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = set() rec_stack = set() # to keep track of the nodes in the current recursion stack def is_cyclic(v): visited.add(v) rec_stack.add(v) for neighbour in graph[v]: if neighbour not in visited: if is_cyclic(neighbour): return True elif neighbour in rec_stack: return True rec_stack.remove(v) return False for node in range(1, num_nodes + 1): if node not in visited: if is_cyclic(node): return \\"YES\\" return \\"NO\\" def graph_has_cycle(T, cases): results = [] for num_nodes, num_edges, edges in cases: result = detect_cycle_in_graph(num_nodes, edges) results.append(result) return results"},{"question":"Johnny and Lisa play a game called the divide-subtract game. Johnny starts by choosing his favorite integer x, and then they take turns with Johnny starting first. On each player\'s turn, the player must choose an integer y such that 2 ≤ y ≤ x, and either: 1. Subtract y from x, or 2. Divide x by y (if x is divisible by y). The player who cannot make a move loses. Can you determine the winner if both play optimally? -----Input----- The only line contains an integer x (2 ≤ x ≤ 10^9), the initial number for the game. -----Output----- Output \\"Johnny\\" (without quotes) if Johnny wins and \\"Lisa\\" (without quotes) otherwise. -----Examples----- Input 2 Output Johnny Input 8 Output Lisa -----Note----- In the first sample, Johnny can subtract 2 from 2 to make x equal to 0, Lisa has no moves left, so Johnny wins. In the second sample, Johnny can choose to divide 8 by 2 to make x equal to 4. Then Lisa can subtract 2 to make x equal to 2. Lisa will win because any further play from Johnny will result in Lisa making the winning move.","solution":"def determine_winner(x): Determine the winner of the game if both play optimally :param x: initial number for the game :return: \\"Johnny\\" if Johnny wins, \\"Lisa\\" otherwise # If x is 2, Johnny wins directly by subtracting 2 if x == 2: return \\"Johnny\\" # For all x greater than 2, the winner is determined by the number of moves: # Johnny wins if the number of moves (or turns) is odd # Lisa wins if the number of moves (or turns) is even # The game reduces the problem to checking if the sequence can be kept even/odd accordingly # Trick: If x is a multiple of 2, Lisa wins by always reducing x to 2 multiple times # Else, Johnny can force the game to be multiple of 2 and take advantage if x % 2 == 0: return \\"Lisa\\" else: return \\"Johnny\\""},{"question":"A social media company tracks the number of likes a user receives on their posts. To celebrate a milestone, they want to give users a special mention when they receive a prime number of likes on any of their posts. A prime number is a natural number greater than 1 which has no positive divisors other than 1 and itself. Your task is to write a function that takes an integer (the number of likes) and returns whether or not the number is prime. If the number of likes is prime, the function should output \\"Special Mention!\\" otherwise it should output \\"Keep Trying!\\". To make the computation efficient, the function should handle numbers up to 10**6. Function Signature: ```python def check_prime_likes(n: int) -> str: pass ``` # Input - An integer `n` (1 ≤ n ≤ 1,000,000): the number of likes a post has received. # Output - A string: \\"Special Mention!\\" if `n` is a prime number, \\"Keep Trying!\\" otherwise. # Examples - `check_prime_likes(5)` should return `\\"Special Mention!\\"` - `check_prime_likes(10)` should return `\\"Keep Trying!\\"` - `check_prime_likes(29)` should return `\\"Special Mention!\\"` - `check_prime_likes(100)` should return `\\"Keep Trying!\\"`","solution":"def check_prime_likes(n: int) -> str: Determine if the number of likes is a prime number. Parameters: n (int): The number of likes (1 ≤ n ≤ 1,000,000) Returns: str: \\"Special Mention!\\" if n is a prime number, \\"Keep Trying!\\" otherwise. if n < 2: return \\"Keep Trying!\\" if n == 2: return \\"Special Mention!\\" if n % 2 == 0: return \\"Keep Trying!\\" sqrt_n = int(n ** 0.5) + 1 for i in range(3, sqrt_n, 2): if n % i == 0: return \\"Keep Trying!\\" return \\"Special Mention!\\""},{"question":"John has launched a new delivery service and he needs to manage his delivery trucks efficiently. John has N delivery trucks where each truck can carry up to W kilograms of parcels. On a particular day, there are M parcels to be delivered where each parcel weighs P kilograms. Given that John earns Q rupees for each parcel delivered, find the maximum amount he can earn on that day. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of four space-separated integers N, W, M, and P — the number of delivery trucks, the weight capacity of each truck, the number of parcels to be delivered, and the weight of each parcel respectively. - The last integer Q is the rupees earned per parcel. ------ Output Format ------ For each test case, output on a new line, the maximum amount John can earn on that day. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, M, P, W, Q ≤ 100 ------ Sample Input 1 ------ 4 3 50 20 5 30 2 100 10 10 50 5 40 50 8 20 1 60 9 15 25 ------ Sample Output 1 ------ 600 500 800 225 ------ Explanation 1 ------ Test case 1: John has 3 delivery trucks and each truck can carry up to 50 kilograms. Thus, there are a total of 3 cdot 50 = 150 kilograms capacity. There are 20 parcels, each weighing 5 kilograms, so the total weight of all parcels is 20 cdot 5 = 100 kilograms. Since John can carry all the parcels, he earns 20 cdot 30 = 600 rupees. Test case 2: John has 2 delivery trucks and each truck can carry up to 100 kilograms. Thus, there are a total of 2 cdot 100 = 200 kilograms capacity. There are 10 parcels, each weighing 10 kilograms, so the total weight of all parcels is 10 cdot 10 = 100 kilograms. Since John can carry all the parcels, he earns 10 cdot 50 = 500 rupees. Test case 3: John has 5 delivery trucks and each truck can carry up to 40 kilograms. Thus, there are a total of 5 cdot 40 = 200 kilograms capacity. There are 50 parcels, each weighing 8 kilograms, so the total weight of all parcels is 50 cdot 8 = 400 kilograms. Since John can only carry up to 200 kilograms, he can deliver at most 200 / 8 = 25 parcels. He earns 25 cdot 20 = 500 rupees. Test case 4: John has 1 delivery truck and it can carry up to 60 kilograms. There are 9 parcels each weighing 15 kilograms, so the total weight of all parcels is 9 cdot 15 = 135 kilograms. Since John can only carry up to 60 kilograms, he can deliver at most 60 / 15 = 4 parcels. He earns 4 cdot 25 = 100 rupees.","solution":"def max_earnings(t, test_cases): results = [] for case in test_cases: N, W, M, P, Q = case total_capacity = N * W total_parcel_weight = M * P if total_parcel_weight <= total_capacity: earnings = M * Q else: max_parcels_capacity = total_capacity // P earnings = max_parcels_capacity * Q results.append(earnings) return results"},{"question":"A telecommunications company has a system that routes calls through a network of servers. Each server can directly connect to a specific set of other servers. Given the current network structure, the company wants to determine if there is a way to route a call from one server to another. You are tasked with writing a program that will check for the existence of a path between two servers in the network. The network is represented as a directed graph where servers are nodes and direct connections are edges. For a given pair of servers, determine if there exists a path from the start server to the end server using the available connections. Input - The first line contains three integers n, m, and q (1 ≤ n, m, q ≤ 1000) — the number of servers, the number of direct connections, and the number of queries, respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that there is a direct connection from server u to server v. - The next q lines each contain two integers a and b (1 ≤ a, b ≤ n), representing a query to check if there is a path from server a to server b. Output - For each query, output \\"YES\\" if there is a path from server a to server b, otherwise print \\"NO\\". SAMPLE INPUT 4 4 3 1 2 2 3 3 4 1 3 1 4 4 1 2 4 SAMPLE OUTPUT YES NO YES","solution":"def path_exists(n, m, q, edges, queries): from collections import defaultdict, deque def bfs(start, end, graph): queue = deque([start]) visited = set() while queue: node = queue.popleft() if node == end: return True if node not in visited: visited.add(node) for neighbor in graph[node]: queue.append(neighbor) return False # Build the graph from edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) results = [] for a, b in queries: if bfs(a, b, graph): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"**Problem:** Clever Detective Sly Fox has been assigned to decode a top-secret message encrypted by the notorious hacker group, MysticCrypt. The message is a string encoded with a combination of letters (a-z) and special placeholders. The placeholders are: - \'#\' representing a consonant (any letter that is not a vowel). - \'@\' representing a vowel (a, e, i, o, u). Detective Fox\'s mission is to determine how many unique valid messages can be generated by replacing the placeholders with the corresponding alphabetic characters. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\', and consonants are all remaining letters in the English alphabet. The encoded message will always be of length 1 to 100, inclusive. The placeholders \'#\' and \'@\' can appear in any position and any number of times, but the message will always contain at least one such placeholder. **Input** - A string `s` of length between 1 and 100, inclusive, which includes lowercase letters (a-z) and the placeholders \'#\' and \'@\'. **Output** - Print a single integer which represents the number of unique valid messages that can be generated. **Example** Input: ``` h#ll@ ``` Output: ``` 105 ``` Input: ``` myst@crypt# ``` Output: ``` 1050 ``` **Explanation** For the first example: - \'#\' can be replaced by any one of the 21 consonants. - \'@\' can be replaced by any one of the 5 vowels. Therefore, the total number of valid messages is ( 21 times 5 = 105 ). For the second example: - \'@\' can be replaced by 5 vowels. - \'#\' can be replaced by 21 consonants. There are 2 such placeholders. Therefore, the total number of valid messages is ( 5 times 21 = 1050 ).","solution":"def count_unique_messages(s): Counts the number of unique valid messages that can be generated by replacing the placeholders \'#\' (for consonants) and \'@\' (for vowels) in the given string s. consonants_count = 21 vowels_count = 5 unique_messages = 1 for char in s: if char == \'#\': unique_messages *= consonants_count elif char == \'@\': unique_messages *= vowels_count return unique_messages"},{"question":"The town of Zebulon is new and is being planned out in a grid. Your task is to design roads that connect all the important locations in the town, represented by a grid with `n` rows and `m` columns. There are some obstacles in the grid which means a road cannot go through these cells. The objective is to find the shortest path from the top-left corner of the grid to the bottom-right corner. The grid is represented as follows: - \'S\' represents the starting location (top-left corner). - \'E\' represents the ending location (bottom-right corner). - \'.\' represents an empty space that a road can pass through. - \'#\' represents an obstacle. You can move from one cell to another if they share a side (i.e., move left, right, up, or down). Determine the length of the shortest path from the starting location to the ending location. If there is no valid path, return -1. -----Input:----- - The first line contains two integers, `n` and `m`, representing the number of rows and columns in the grid. - The next `n` lines contain a string of length `m`, representing the grid. -----Output:----- Output a single integer, the length of the shortest path from \'S\' to \'E\'. If no such path exists, output -1. -----Constraints----- - 1 leq n, m leq 1000 - The grid will always contain exactly one \'S\' and one \'E\'. - The grid will only contain the characters \'S\', \'E\', \'.\', and \'#\'. -----Sample Input:----- 5 5 S...# ..#.# #.. ..#.E .....# -----Sample Output:----- 9","solution":"from collections import deque def shortest_path(n, m, grid): Calculate the shortest path from \'S\' to \'E\' in the given grid. Returns the length of the path if a valid path exists, otherwise returns -1. # Directions for moving right, left, up, down directions = [(0, 1), (0, -1), (-1, 0), (1, 0)] # BFS initialization queue = deque() visited = [[False] * m for _ in range(n)] # Find the start \'S\' and end \'E\' positions start = end = None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'E\': end = (i, j) # Enqueue the start position with a distance of 0 queue.append((start[0], start[1], 0)) visited[start[0]][start[1]] = True while queue: x, y, dist = queue.popleft() # If we reach the end position, return the distance if (x, y) == end: return dist # Check for all possible movements for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] != \'#\': queue.append((nx, ny, dist + 1)) visited[nx][ny] = True # If no path is found, return -1 return -1"},{"question":"Aman loves working with number sequences. One day, he came across a sequence of n non-negative integers. He decided to perform some operations on this sequence and called these operations \\"shifts\\". In one shift operation, Aman can choose a pair of consecutive elements in the sequence and add the left element to the right element. Aman wants to transform the sequence such that each element in the sequence is as large as possible after exactly k shift operations. Help Aman determine the largest possible value of the maximum element in the sequence after k shifts. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^5), where n is the length of the sequence and k is the number of shift operations Aman wants to perform. The second line contains n non-negative integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9), representing the initial sequence. Output Print a single integer - the largest possible value of the maximum element in the sequence after k shifts. Examples Input 5 3 1 2 3 4 5 Output 12 Input 6 5 1 1 1 1 1 1 Output 5 Explanation: In the first example, one way to achieve the result is: 1. Choose the pair (4, 5), adding 4 to 5 to get [1, 2, 3, 4, 9]. 2. Choose the pair (3, 9), adding 3 to 9 to get [1, 2, 3, 12, 9]. 3. Choose the pair (3, 12), adding 3 to 12 to get [1, 2, 3, 12, 12]. In the second example, one way to achieve the result is: 1. Choose the pair (1, 1), adding 1 to 1 to get [1, 1, 1, 1, 2]. 2. Choose the pair (1, 2), adding 1 to 2 to get [1, 1, 1, 1, 3]. 3. Choose the pair (1, 3), adding 1 to 3 to get [1, 1, 1, 1, 4]. 4. Choose the pair (1, 4), adding 1 to 4 to get [1, 1, 1, 1, 5]. 5. Choose the pair (1, 5), adding 1 to 5 to get [1, 1, 1, 1, 5]. Thus, the maximum achievable value is 12 for the first example and 5 for the second example.","solution":"def max_element_after_shifts(n, k, sequence): Returns the largest possible value of the maximum element in the sequence after k shift operations. In one shift operation, a pair of consecutive elements in the sequence can be chosen and the left element\'s value added to the right element\'s value. Parameters: n (int): The length of the sequence. k (int): The number of shift operations to perform. sequence (list of int): The initial list of non-negative integers. Returns: int: The maximum possible value of any element in the sequence after k shifts. # Sum all elements in the sequence total_sum = sum(sequence) # Since we can make k shifts, the largest possible single element after k shifts # would be the sum of all elements in the sequence plus the number of shifts. result = total_sum + k return result"},{"question":"Given a string s, determine if it can be reordered to form a palindrome. A string is a palindrome if it reads the same backward as forward. You don\'t need to consider case sensitivity and non-alphanumeric characters shouldn\'t be counted. For example: ```python is_palindrome_permutation(\\"A man, a plan, a canal: Panama\\") == True is_palindrome_permutation(\\"race a car\\") == False is_palindrome_permutation(\\"civic\\") == True is_palindrome_permutation(\\"ivicc\\") == True is_palindrome_permutation(\\"hello\\") == False is_palindrome_permutation(\\"Able was I Ere I Saw Elba\\") == True ``` Write the function `is_palindrome_permutation(s)`, which receives a string s and returns a boolean indicating whether any permutation of the string can form a palindrome. Only consider alphanumeric characters and ignore cases. Here is the function signature: ```python def is_palindrome_permutation(s: str) -> bool: pass ``` Hints: 1. You can ignore characters that are not alphanumeric. 2. Consider converting all characters to a single case (either lowercase or uppercase) to simplify the process. 3. Use a frequency counter or a dictionary to track the occurrence of each character and determine if a permutation can form a palindrome based on the frequency of characters.","solution":"def is_palindrome_permutation(s: str) -> bool: from collections import Counter import re # Remove non-alphanumeric characters and convert to lower case filtered_s = re.sub(r\'[^A-Za-z0-9]\', \'\', s).lower() # Count the frequency of each character freq = Counter(filtered_s) # A string can be permuted to a palindrome if at most one character has an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) return odd_count <= 1"},{"question":"In a remote village, there is a unique tradition during the harvest festival where the villagers arrange pumpkins in a grid pattern of size n × n. According to the tradition, they always start with an empty grid and place pumpkins one by one. The rule is that each pumpkin cannot be placed in a row or column that already contains a pumpkin. After placing all the pumpkins, each row and each column must contain exactly one pumpkin. Your task is to determine the number of ways the villagers can arrange n pumpkins in an n × n grid following this rule. Input The first and only line contains one integer n (1 ≤ n ≤ 15). Output Print a single integer — the number of ways to arrange the pumpkins in the grid. Examples Input 1 Output 1 Input 3 Output 6 Input 4 Output 24 Note In the first sample, there is only one way to place a single pumpkin in a 1 × 1 grid. In the second sample, there are 6 ways to arrange 3 pumpkins in a 3 × 3 grid, which corresponds to the number of permutations of 3 elements. In the third sample, there are 24 ways to arrange 4 pumpkins in a 4 × 4 grid, which is equal to 4! (4 factorial).","solution":"def count_arrangements(n): Return the number of ways to arrange n pumpkins in an n x n grid. This is simply the number of permutations of n elements, which is n!. from math import factorial return factorial(n)"},{"question":"A social network platform has a feature that allows its users to follow each other. You are given the follower-followee relationships in the network. We say that a follow loop of length K exists if there is a sequence of K different users such that user 1 follows user 2, user 2 follows user 3, ..., and user K follows user 1. Write a program that determines the length of the smallest follow loop in the network. If there is no follow loop, the program should output -1. Input The first line contains two integers n and m — the number of users and the number of following relationships. The following m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n; ai ≠ bi) indicating that user ai follows user bi. Output Print a single integer, the length of the smallest follow loop in the network, or -1 if no follow loop exists. Examples Input 5 6 1 2 2 3 3 4 4 5 5 1 2 4 Output 4 Input 4 3 1 2 2 3 3 4 Output -1","solution":"from collections import defaultdict, deque def find_smallest_loop(n, m, relationships): def bfs(start, graph): visited = [-1] * (n + 1) queue = deque([(start, 0)]) while queue: node, dist = queue.popleft() for neighbor in graph[node]: if neighbor == start: return dist + 1 if visited[neighbor] == -1: visited[neighbor] = dist + 1 queue.append((neighbor, dist + 1)) return float(\'inf\') graph = defaultdict(list) for ai, bi in relationships: graph[ai].append(bi) min_loop_length = float(\'inf\') for user in range(1, n + 1): min_loop_length = min(min_loop_length, bfs(user, graph)) return min_loop_length if min_loop_length != float(\'inf\') else -1"},{"question":"Write a function `flatten_dict()` that takes a dictionary with nested dictionaries and returns a new dictionary with no nesting. The keys of the new dictionary should be the full paths to the values in the original dictionary, with each level of nesting represented by a period `.`. ```python >>> data = { ... \'name\': \'John\', ... \'details\': { ... \'email\': \'john@example.com\', ... \'address\': { ... \'city\': \'New York\', ... \'zip\': \'10001\' ... } ... } ... } >>> flatten_dict(data) {\'name\': \'John\', \'details.email\': \'john@example.com\', \'details.address.city\': \'New York\', \'details.address.zip\': \'10001\'} ``` Both keys and values in the dictionary are always strings, and there are no lists or other data types within the dictionary. The input dictionary can have an arbitrary depth.","solution":"def flatten_dict(d, parent_key=\'\', sep=\'.\'): Flattens a nested dictionary. Parameters: d (dict): The dictionary to flatten. parent_key (str): The base key to use for all keys in the flattened dictionary. sep (str): The separator between parent keys and nested keys. Returns: dict: A new flattened dictionary. items = [] for k, v in d.items(): new_key = f\\"{parent_key}{sep}{k}\\" if parent_key else k if isinstance(v, dict): items.extend(flatten_dict(v, new_key, sep=sep).items()) else: items.append((new_key, v)) return dict(items)"},{"question":"Ferry Loading You are operating a ferry that can carry vehicles between two shores of a river. Each vehicle has a certain length, and the ferry has a maximum length it can accommodate in a single trip. Vehicles arrive at the ferry one by one, and you need to decide whether to load the vehicle onto the ferry or wait for the next trip. The goal is to determine the minimum number of trips required to transport all vehicles across the river. The order of the vehicles must remain the same and the ferry must always carry the vehicles in the order they arrived. Input The input consists of multiple datasets. Each dataset has the following format: > L N > l1 l2 ... lN The first line of the dataset contains two integers, L and N, separated by spaces. L is the length of the ferry and N is the number of vehicles waiting to be loaded, where 1 ≤ L ≤ 10^6 and 1 ≤ N ≤ 1,000. The second line contains N integers l1, l2, ..., lN separated by spaces, where li represents the length of the i-th vehicle (1 ≤ li ≤ L). The end of the input is represented by a dataset where L = N = 0. Do not output for this dataset. Output For each dataset, output the minimum number of trips required to transport all vehicles across the river on one line. Sample Input ``` 10 4 4 4 4 4 10 5 6 5 4 3 2 15 3 6 7 5 0 0 ``` Output for Sample Input ``` 2 3 2 ```","solution":"def ferry_loading(datasets): results = [] for L, N, vehicles in datasets: if L == 0 and N == 0: break trips = 0 current_length = 0 for vehicle in vehicles: if current_length + vehicle > L: trips += 1 current_length = vehicle else: current_length += vehicle if current_length > 0: trips += 1 results.append(trips) return results"},{"question":"Your task is to find the sum of all unique numbers in an array. Given an array of integers, you need to identify which numbers appear only once and calculate the sum of these unique numbers. Input The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 100) representing the number of elements in the array. - The second line contains n space-separated integers a1, a2, ..., an, where each integer is between -1000 and 1000. Output Output a single integer representing the sum of all unique numbers in the array. Example Input 6 1 2 2 3 4 4 Output 4 Explanation In the example input, the unique numbers are 1 and 3. Their sum is 1 + 3 = 4.","solution":"def sum_of_unique_numbers(n, array): Returns the sum of all unique numbers in the input array. from collections import Counter counts = Counter(array) unique_sum = sum([num for num, count in counts.items() if count == 1]) return unique_sum"},{"question":"You are given two arrays `arr1` and `arr2`, both containing `n` positive integers. You need to form a new array `arr3` of size `n` such that for each valid index `i`, the value of `arr3[i]` is the sum of the square roots of the values from `arr1` and `arr2` at index `i`. Specifically, `arr3[i] = sqrt(arr1[i]) + sqrt(arr2[i])`. Write a function `calculate_sum_of_square_roots` that takes the following parameters: - `arr1`: a list of `n` positive integers (1 ≤ arr1[i] ≤ 10^9) - `arr2`: a list of `n` positive integers (1 ≤ arr2[i] ≤ 10^9) The function should return the new array `arr3` as a list of `n` floating-point numbers formatted to 4 decimal places. # Input - A list of integers `arr1` representing the first array. - A list of integers `arr2` representing the second array. # Output - A list of `n` floating-point numbers formatted to 4 decimal places representing the array `arr3`. # Example Input ```python arr1 = [1, 4, 9, 16] arr2 = [1, 4, 9, 16] ``` Output ```python [2.0000, 4.0000, 6.0000, 8.0000] ``` Write the complete function implementation in Python.","solution":"import math def calculate_sum_of_square_roots(arr1, arr2): Returns a new array arr3 such that for each valid index i, arr3[i] = sqrt(arr1[i]) + sqrt(arr2[i]), formatted to 4 decimal places. Parameters: - arr1: List[int] - arr2: List[int] Returns: - List[float] arr3 = [] for i in range(len(arr1)): sum_of_roots = math.sqrt(arr1[i]) + math.sqrt(arr2[i]) arr3.append(round(sum_of_roots, 4)) return arr3"},{"question":"Problem Statement: Alice and Bob love prime numbers and they have decided to play a game with them. They will define a special kind of prime number sequence and need your help to find it. A sequence of length N is considered special if it contains exactly M prime numbers and these M prime numbers are maximized in the sequence. Given two integers N and M, determine the lexicographically smallest sequence of length N that contains exactly M prime numbers. If no such sequence exists, print \\"SEQUENCE IMPOSSIBLE\\". Note: - A sequence is considered lexicographically smaller if for the first position where the sequences differ, the sequence with the smaller number at that position is considered smaller. Input Format: The first line of input contains a single integer T, denoting the number of test cases. Each of the T subsequent lines contains 2 space-separated integers describing the respective N and M values for a test case. Output Format: On a new line for each test case, print the lexicographically smallest sequence of length N containing exactly M prime numbers. If no such sequence exists, print \\"SEQUENCE IMPOSSIBLE\\". Constraints: SubTask#1 1 <= T <= 10 1 <= N <= 10^5 0 <= M <= N SubTask#2 Original Constraints. Sample Input: 3 2 1 4 2 5 6 Sample Output: 2 1 2 3 1 1 SEQUENCE IMPOSSIBLE Explanation: Case 1: N=2, M=1 Lexicographically smallest sequence with 1 prime is [2, 1]. Case 2: N=4, M=2 Lexicographically smallest sequence with 2 primes is [2, 3, 1, 1]. Case 3: N=5, M=6 Impossible to have a sequence of length 5 containing 6 primes, therefore \\"SEQUENCE IMPOSSIBLE\\".","solution":"def is_prime(n): Check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def generate_primes_up_to(n): Generate all prime numbers up to a given number n. primes = [2] candidate = 3 while candidate <= n: if is_prime(candidate): primes.append(candidate) candidate += 2 return primes def lexicographically_smallest_sequence(N, M): Generates the lexicographically smallest sequence of length N with exactly M primes. if M > N: return \\"SEQUENCE IMPOSSIBLE\\" sequence = [] primes = generate_primes_up_to(100000) # Generate a list of primes up to some large number if M > len(primes): return \\"SEQUENCE IMPOSSIBLE\\" primes_needed = primes[:M] non_primes_needed = [1] * (N - M) sequence = primes_needed + non_primes_needed return \\" \\".join(map(str, sequence)) def special_prime_sequences(T, test_cases): results = [] for N, M in test_cases: result = lexicographically_smallest_sequence(N, M) results.append(result) return results"},{"question":"Andrei has a circular conveyor belt in his factory. The belt is divided into n adjacent segments each having a unique integer id from 1 to n arranged in clockwise order. Every segment contains a certain number of items placed in it. Andrei now wants to rearrange the items within these segments by rotating the entire conveyor belt clockwise a certain number of times. Your task is to help Andrei find out how the items will be arranged in the segments after rotating the belt k times. One rotation operation moves all items from the current segment to the next segment in a clockwise direction. As the belt is circular, the items from the last segment move to the first segment after one rotation. Implement the function that performs the rotation of the belt and returns the new order of items in the segments. -----Input----- The first line contains two integers, n and k (1 ≤ n, k ≤ 1000) — the number of segments in the conveyor belt and the number of times Andrei wants to rotate the belt. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the number of items in each segment from id 1 to id n. -----Output----- Print n integers — the number of items in each segment after rotating the belt k times. -----Examples----- Input 5 2 10 20 30 40 50 Output 40 50 10 20 30 Input 7 3 1 2 3 4 5 6 7 Output 5 6 7 1 2 3 4","solution":"def rotate_conveyor_belt(n, k, items): Function to rotate the conveyor belt k times and return the new order of items. Parameters: n (int): number of segments k (int): number of rotations items (list): the current items in each segment Returns: list: new order of items after k rotations # Since the belt is circular, rotating k times is the same as rotating k % n times k = k % n # Rotate the list k times clockwise return items[-k:] + items[:-k]"},{"question":"Arpa is trying to solve a grid-based puzzle game. The objective is to determine if a rectangular path exists within a given grid. A rectangular path is formed by picking four grid points (cells) (r1, c1), (r1, c2), (r2, c1), (r2, c2) such that the four grid points form the corners of a rectangle. The grid is represented as a matrix of characters. Each cell of the matrix contains a character which can be either \'1\' or \'0\'. Arpa needs to find out if there exists a rectangular path in the matrix such that all the cells along the path are \'1\'s. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100), indicating the number of rows and columns in the grid, respectively. Each of the next n lines contains a string of m characters, where each character is either \'1\' or \'0\', representing the grid. -----Output----- Print \\"Yes\\" if there exists at least one rectangular path made up entirely of \'1\'s, otherwise print \\"No\\". You can print each letter in any case (upper or lower). -----Examples----- Input 4 5 11011 11011 11111 01110 Output Yes Input 3 3 100 010 001 Output No -----Note----- In the first sample test, you can find a rectangle with corners at (1,1), (1,2), (3,1), and (3,2). In the second sample test, there is no rectangle made up of all \'1\'s.","solution":"def check_rectangular_path(n, m, grid): This function checks if there exists a rectangular path such that all the cells along the path are \'1\'s. for r1 in range(n): for r2 in range(r1 + 1, n): for c1 in range(m): for c2 in range(c1 + 1, m): if grid[r1][c1] == \'1\' and grid[r1][c2] == \'1\' and grid[r2][c1] == \'1\' and grid[r2][c2] == \'1\': return \\"Yes\\" return \\"No\\""},{"question":"Toy Blocks Andre loves building structures out of blocks. He has a collection of n blocks that he arranges in a line. Each block has a certain height, and Andre wants to determine how many blocks he needs to add to make all of the blocks the same height as the tallest one in the line. Your task is to determine the total number of blocks Andre needs to add to achieve this. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000), the number of blocks in the line. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 10^6), where hi represents the height of the i-th block. -----Output----- Output a single integer, the number of blocks Andre needs to add to make all blocks the same height as the tallest block. -----Examples----- Input 4 1 3 2 4 Output 6 Input 3 5 5 5 Output 0 Input 5 2 2 2 2 2 Output 0 -----Note----- In the first example case, we have blocks with heights 1, 3, 2, and 4. The tallest block is 4 units high. To make all blocks 4 units high, Andre needs to add 3 units to the first block, 1 unit to the second block, and 2 units to the third block, which totals to 6 units. In the second example, all blocks are already 5 units high, so no additional blocks are needed. In the third example, all blocks are already 2 units high, so no additional blocks are needed.","solution":"def total_blocks_to_add(n, heights): Returns the total number of blocks needed to add to make all blocks of the same height as the tallest block. Parameters: n (int): The number of blocks. heights (list of int): The heights of the blocks. Returns: int: The total number of blocks to add. max_height = max(heights) total_adds = sum(max_height - height for height in heights) return total_adds"},{"question":"You are given a large warehouse with multiple sections in it. Each section contains a specific number of boxes stacked one on top of the other. Each box contains a certain number of items. Your task is to move a specified number of items to the delivery area and keep track of the number of sections from which you\'ve taken boxes. To make the moving process easier, you will always take whole boxes from the top of a section (and you can only take boxes vertically from one section at a time). Write a program that will determine the minimum number of sections you need to take boxes from to obtain at least M items. -----Input----- The first line of input contains two integers N and M: the number of sections in the warehouse and the total number of items needed, respectively (1 leq N leq 100000, 1 leq M leq 10^9). The second line contains N integers, where the i-th integer represents the total number of items in the i-th section (1 leq items_i leq 100000). -----Output----- The first and only line of output should contain one integer, the minimum number of sections required to gather at least M items. -----Examples----- Sample Input 1: 4 10 3 8 2 1 Sample Output 1: 2 Sample Input 2: 6 15 5 5 5 5 5 5 Sample Output 2: 3 Note that in Sample Input 1, choosing sections with 8 items and 3 items will total 11 items (which is at least 10) requiring 2 sections.","solution":"def min_sections_to_collect_items(N, M, items): Determine the minimum number of sections needed to collect at least M items. Parameters: N (int): The number of sections. M (int): The total number of items needed. items (list of int): The number of items in each section. Returns: int: The minimum number of sections required. # Sort sections by the number of items in descending order items.sort(reverse=True) total_items = 0 sections_count = 0 for num in items: total_items += num sections_count += 1 if total_items >= M: return sections_count return sections_count # Example usage # N, M = 4, 10 # items = [3, 8, 2, 1] # print(min_sections_to_collect_items(N, M, items)) # Output: 2"},{"question":"Task Given an array of integers, your task is to rotate the array to the right by a given number of steps. You need to implement a function that performs this rotation and returns the resulting array. Ensure that the function handles edge cases, such as when the number of steps is greater than the size of the array or when the array is empty. # Example For `arr = [1, 2, 3, 4, 5]` and `steps = 2`, the result should be `[4, 5, 1, 2, 3]` For `arr = [0, -1, 2, 3]` and `steps = 3`, the result should be `[-1, 2, 3, 0]` For `arr = [7, 8, 9, 10]` and `steps = 0`, the result should be `[7, 8, 9, 10]` # Input/Output - `[input]` array of integers `arr` An array of integers to be rotated. The length of the array can be from 0 to 10^5. - `[input]` integer `steps` The number of steps to rotate the array to the right. The value of `steps` is non-negative and can be as large as 10^5. - `[output]` an array of integers The resulting array after rotating to the right by the given number of steps.","solution":"def rotate_array(arr, steps): Rotates the array to the right by a given number of steps. Parameters: arr (list of int): The array of integers to be rotated. steps (int): The number of steps to rotate the array to the right. Returns: list of int: The rotated array. if not arr: return arr n = len(arr) steps = steps % n # Handle steps greater than the length of the array return arr[-steps:] + arr[:-steps]"},{"question":"Write a function that reverses the characters in each word within a sentence while still preserving whitespace and initial word order. Example Input: \\"The quick brown fox\\" Output: \\"ehT kciuq nworb xof\\" The sentence will not include any leading or trailing whitespace, and the words will be separated by a single space. Function Description Complete the reverseWords function in the editor below. reverseWords has the following parameters: - string s: the input sentence Returns - string: the modified sentence with characters of each word reversed Input Format A single line containing the string s. Constraints 1 ≤ len(s) ≤ 1000 Sample Input 1 \\"The quick brown fox\\" Sample Output 1 \\"ehT kciuq nworb xof\\" Sample Input 2 \\"hello world\\" Sample Output 2 \\"olleh dlrow\\" Explanation In the first example, the function reverses the characters in each word but keeps the words in their original order.","solution":"def reverseWords(s): Reverses the characters in each word within a sentence while preserving whitespace and initial word order. :param s: the input sentence :type s: str :return: the modified sentence with characters of each word reversed :rtype: str # Split the sentence into words words = s.split() # Reverse each word and join them back with a space reversed_words = \' \'.join(word[::-1] for word in words) return reversed_words"},{"question":"Problem You are given a binary tree, and your task is to write a function that returns the level order traversal of its nodes\' values in reverse order. That is, the values should be returned from the bottom level to the top level, with each level\'s values from left to right. Input The input is given as a sequence of integers where `None` represents a missing node. The sequence represents a level order traversal of the binary tree. For example, the input representation for the following tree: ``` 3 / 9 20 / 15 7 ``` would be `[3, 9, 20, None, None, 15, 7]`. Output Return a list of lists, where each sub-list contains the values of the tree at a specific level, in reverse order. Example Input `[3, 9, 20, None, None, 15, 7]` Output `[[15, 7], [9, 20], [3]]` Input `[1, 2, 3, 4, 5, None, 6, None, None, 7, 8]` Output `[[7, 8], [4, 5, 6], [2, 3], [1]]` Constraints The input satisfies the following conditions: - The number of nodes in the tree is in the range `[0, 1000]`. - The input list has a length in the range `[1, 1000]`. - Each node\'s value is an integer in the range `[-1000, 1000]`.","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(nodes): Builds a binary tree from a list of integers where None represents missing nodes. if not nodes: return None root = TreeNode(nodes[0]) queue = deque([root]) i = 1 while queue and i < len(nodes): current = queue.popleft() if nodes[i] is not None: current.left = TreeNode(nodes[i]) queue.append(current.left) i += 1 if i < len(nodes) and nodes[i] is not None: current.right = TreeNode(nodes[i]) queue.append(current.right) i += 1 return root def level_order_bottom(root): Returns the level order traversal of a binary tree in reverse order. if not root: return [] levels = [] queue = deque([(root, 0)]) while queue: node, level = queue.popleft() if level == len(levels): levels.append([]) levels[level].append(node.val) if node.left: queue.append((node.left, level + 1)) if node.right: queue.append((node.right, level + 1)) return levels[::-1] def reverse_level_order_traversal(nodes): Wrapper function that constructs the tree and returns its reverse level order traversal. tree = build_tree(nodes) return level_order_bottom(tree)"},{"question":"You are given a directed weighted graph with `n` nodes and `m` edges. Each edge has a weight associated with it, which represents the cost of traveling along that edge. Your task is to find the shortest path from a given start node `s` to a target node `t`. The graph is represented by an adjacency list, where each entry defines an edge from node `u` to node `v` with an edge weight `w`. Input The first line contains two integers `n` and `m` (1 ≤ n ≤ 200, 1 ≤ m ≤ 5000) — the number of nodes and the number of edges, respectively. The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — an edge from node `u` to node `v` with weight `w`. The last line contains two integers `s` and `t` (1 ≤ s, t ≤ n) — the start node and the target node. Output Output the length of the shortest path from `s` to `t`. If there is no path from `s` to `t`, print `-1`. Examples Input 4 6 1 2 4 1 3 2 3 2 1 2 4 7 3 4 3 2 3 2 1 4 Output 5 Input 3 2 1 2 3 2 3 4 1 3 Output 7 Input 3 1 1 2 1 2 3 Output -1 Note In the first sample, the shortest path from node 1 to node 4 is 1 -> 3 -> 4, with a total weight of 5. In the second sample, the shortest path from node 1 to node 3 is 1 -> 2 -> 3, with a total weight of 7. In the last sample, there is no path from node 1 to node 3, so the output is `-1`.","solution":"import heapq def dijkstra(n, edges, start, target): Finds the shortest path from start to target in a directed graph using Dijkstra\'s algorithm. Parameters: n (int): number of nodes edges (list): list of edges represented as tuples (u, v, w) start (int): start node target (int): target node Returns: int: shortest path length from start to target, or -1 if no path exists # Create an adjacency list adj = [[] for _ in range(n)] for u, v, w in edges: adj[u-1].append((v-1, w)) # Dijkstra\'s algorithm pq = [(0, start - 1)] # Priority queue of (distance, node) distances = [float(\'inf\')] * n distances[start - 1] = 0 visited = [False] * n while pq: current_distance, current_node = heapq.heappop(pq) if visited[current_node]: continue visited[current_node] = True for neighbor, weight in adj[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[target - 1] if distances[target - 1] != float(\'inf\') else -1 # Example usage n = 4 m = 6 edges = [ (1, 2, 4), (1, 3, 2), (3, 2, 1), (2, 4, 7), (3, 4, 3), (2, 3, 2) ] start, target = 1, 4 print(dijkstra(n, edges, start, target)) # Output: 5"},{"question":"Alyssa is participating in a treasure hunt game. The treasure hunt takes place in a forest that\'s represented as an undirected graph with n nodes and m edges. Each edge has an associated weight which represents the time in minutes it takes to traverse that edge. Alyssa starts at node 1 and wants to reach node n. However, the direct route may not always be the best choice. She can take shortcuts through alternative routes that may reduce her total travel time. Alyssa can use one of the two following strategies: 1. Take a direct path (if available) from node 1 to node n. 2. Take two separate paths: - First to node i, where i is any node other than 1 and n. - Then from node i to node n. Alyssa needs to determine the shortest possible time to travel from node 1 to node n using the best possible strategy. You must output the shortest travel time for each test case. -----Input----- Each test contains multiple test cases. The first line contains an integer t (1 leq t leq 100) — the number of test cases. The following lines contain the description of each test case. The first line of each test case contains two integers n and m (2 leq n leq 10^3, 1 leq m leq 5 cdot 10^3) — the number of nodes and edges in the graph. The next m lines contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^6) — representing an edge between nodes u and v with weight w. It is guaranteed that the sum of n over all test cases does not exceed 10^4 and the sum of m over all test cases does not exceed 5 cdot 10^4. -----Output----- For each test case, output the shortest possible travel time from node 1 to node n. -----Examples----- Input 2 4 4 1 2 4 2 3 3 3 4 2 1 4 10 3 3 1 2 1 2 3 1 1 3 3 Output 9 2 -----Note----- In the first test case, the shortest time can be achieved via the path 1-2-3-4 with a total travel time of 9. In the second test case, the shortest time can be achieved via the direct path 1-3 with a total travel time of 2.","solution":"import heapq import sys def find_shortest_path(n, edges, start, end): graph = [[] for _ in range(n + 1)] for edge in edges: u, v, w = edge graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(source): distances = [sys.maxsize] * (n + 1) distances[source] = 0 priority_queue = [(0, source)] # (distance, node) while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances from_start = dijkstra(start) from_end = dijkstra(end) direct_path = from_start[end] if direct_path == sys.maxsize: return -1 best_path = direct_path for i in range(2, n): if from_start[i] != sys.maxsize and from_end[i] != sys.maxsize: best_path = min(best_path, from_start[i] + from_end[i]) return best_path def solve(t, test_cases): results = [] for i in range(t): n, m = test_cases[i][0] edges = test_cases[i][1:] result = find_shortest_path(n, edges, 1, n) results.append(result) return results"},{"question":"Task You have an array of integers, `arr`, and another integer, `sum_val`. Your task is to find whether there is a subset of the array that adds up to `sum_val`. If such a subset exists, return the subset in any order. If no such subset exists, return an empty array. Examples ```python arr = [3, 34, 4, 12, 5, 2], sum_val = 9 # return [4, 5] because 4+5=9 arr = [1, 2, 3, 7, 8], sum_val = 11 # return [3, 8] because 3+8=11 arr = [1, 5, 3, 7], sum_val = 17 # return [] because no subset sums to 17 ``` **Notes:** - You may assume all integers in the array are non-negative. - Assume there is only one unique solution if a subset exists. - If there are multiple correct subsets, returning any one of them is acceptable. - The length of the array will not exceed 20, and elements can range from 0 to 50.","solution":"def find_subset_sum(arr, sum_val): Finds a subset of arr that adds up to sum_val, if any exists. Returns the subset in any order, or an empty list if no such subset exists. def subset_sum_recursive(arr, sum_val, n, current_set): if sum_val == 0: return current_set if n == 0: return [] if arr[n-1] > sum_val: return subset_sum_recursive(arr, sum_val, n-1, current_set) included = subset_sum_recursive(arr, sum_val - arr[n-1], n-1, current_set + [arr[n-1]]) if included: return included excluded = subset_sum_recursive(arr, sum_val, n-1, current_set) return excluded return subset_sum_recursive(arr, sum_val, len(arr), [])"},{"question":"Palindrome Permutation A string is a permutation of a palindrome if it can be rearranged to form a palindrome. Given a string, write a function `isPalindromePermutation(str)` that determines whether any permutation of the characters in the string forms a palindrome. The function should return `true` if a permutation of the string is a palindrome, and `false` otherwise. You may assume the input string contains only lowercase alphabets. # Examples: 1. Input: `\\"civic\\"` Output: `true` Explanation: The string \\"civic\\" itself is a palindrome, hence a permutation of it can form a palindrome. 2. Input: `\\"ivicc\\"` Output: `true` Explanation: The string \\"ivicc\\" can be rearranged to form the palindrome \\"civic\\". 3. Input: `\\"hello\\"` Output: `false` Explanation: There is no permutation of the string \\"hello\\" that can form a palindrome. 4. Input: `\\"aabb\\"` Output: `true` Explanation: The string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\". # Constraints: - The input string will have a length of at most 1000 characters. - The function should ignore whitespaces and consider only the lowercase alphabets. # Note: A palindrome reads the same forwards and backwards. To determine if a permutation of the string can form a palindrome, each character must appear an even number of times, with at most one character allowed to appear an odd number of times.","solution":"def isPalindromePermutation(s): from collections import Counter # Remove whitespace and convert to lowercase s = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character char_count = Counter(s) # Check the count of characters with odd occurrences odd_count = 0 for count in char_count.values(): if count % 2 != 0: odd_count += 1 # For a string to be a palindrome permutation, # no more than one character can have an odd count return odd_count <= 1"},{"question":"Alex is an avid hiker and a nature lover. He often goes on week-long hiking trips during which he records his elevation changes each day. Alex wants to determine the total elevation gain and loss from the data he collected during his adventure to better understand the difficulty of his hikes. Your task is to write a program that calculates the total gain and loss in elevation over the trip. -----Input:----- - The first line contains an integer T which denotes the number of test cases. - Each test case comprises of two lines: the first line contains an integer n which denotes the number of days in the hiking trip. - The second line consists of n space separated integers which indicate the daily changes in elevation (positive value for gain, negative for loss). -----Output:----- The output for each test case should be two space-separated integers: the total elevation gain and the total elevation loss. -----Constraints:----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 10^4 - -500 ≤ daily elevation change ≤ 500 -----Example:----- Input: 2 7 100 -20 30 -10 -50 60 40 5 -10 20 -30 40 -50 Output: 230 -80 60 -90","solution":"def calculate_elevation_changes(T, cases): result = [] for i in range(T): n = cases[i][0] elevation_changes = cases[i][1] total_gain = sum(change for change in elevation_changes if change > 0) total_loss = sum(change for change in elevation_changes if change < 0) result.append((total_gain, total_loss)) return result def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) cases = [] current_line = 1 for _ in range(T): n = int(lines[current_line]) elevation_changes = list(map(int, lines[current_line + 1].split())) cases.append((n, elevation_changes)) current_line += 2 return T, cases def format_output(results): return \'n\'.join(f\\"{gain} {loss}\\" for gain, loss in results)"},{"question":"Write a function `anagram_pairs(strs)` that takes a list of strings and returns the number of pairs of indices `(i, j)` (i < j) such that the strings at those indices are anagrams of each other. Two strings are anagrams if they contain the exact same characters but in different orders. For example, for input `[\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\"]`, the output should be 4, because there are 4 pairs of indices (0, 1), (0, 2), (1, 2), and (3, 4) where the strings are anagrams of each other. ```python # Example usage: # anagram_pairs([\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"gooegl\\"]) should return 4 ```","solution":"def anagram_pairs(strs): Returns the number of pairs of indices (i, j) (i < j) such that the strings at those indices are anagrams of each other. :param strs: List of strings :return: Number of anagram pairs as integer def sorted_string(s): return \'\'.join(sorted(s)) sorted_strs = [sorted_string(s) for s in strs] count = 0 for i in range(len(sorted_strs)): for j in range(i + 1, len(sorted_strs)): if sorted_strs[i] == sorted_strs[j]: count += 1 return count"},{"question":"An e-commerce platform has come up with a sales campaign offering discounts on a variety of products. The platform\'s database stores information about products, categories, and discounts in the following structure: - A `Product` has a unique `product_id`, a `category_id` it belongs to, and its price before discount. - A `Category` contains a unique `category_id` and a discount percentage for all products within that category. - A `Sale` contains a unique `sale_id` and a product being sold along with the final price during the campaign. Your task is to write a program to calculate the final price for each sale based on the discount provided for the category of the product. ------ Input ------ The first line of the input contains two integers: P (number of products) and C (number of categories). Each of the next P lines contains three space-separated values: product_id, category_id, and price. The next C lines contain two space-separated values: category_id and discount (a percentage). The last line contains an integer S followed by S space-separated product IDs, representing the list of products sold. ------ Output ------ Print S lines, each containing two values: the corresponding sale_id (1-based index) and the final price after applying the discount. Prices should be rounded to 2 decimal places. ------ Constraints ------ 1 ≤ P, C ≤ 100 1 ≤ price ≤ 10^4 0 ≤ discount ≤ 100 1 ≤ S ≤ 100 Each product belongs to exactly one category. ------ Example Input ------ 3 2 1 1 100 2 1 200 3 2 300 1 10 2 20 2 1 3 ------ Example Output ------ 1 90.00 2 240.00 ------ Explanation ------ Example case 1: The first product belongs to category 1 which has a 10% discount. The final price for this product during the sale will be 100 - 10% of 100 = 90.00. Example case 2: The third product belongs to category 2 which has a 20% discount. The final price for this product during the sale will be 300 - 20% of 300 = 240.00. The second product is not included in the sales campaign and thus is not in the result list.","solution":"def calculate_final_prices(P, C, products, categories, S, sale_product_ids): category_discounts = {} product_details = {} for category_id, discount in categories: category_discounts[category_id] = discount for product_id, category_id, price in products: product_details[product_id] = (category_id, price) final_prices = [] for sale_id, product_id in enumerate(sale_product_ids, start=1): category_id = product_details[product_id][0] price = product_details[product_id][1] discount = category_discounts[category_id] discounted_price = price * (1 - discount / 100) final_prices.append((sale_id, round(discounted_price, 2))) return final_prices"},{"question":"Andy is very fond of playing with sequences. Today, he came up with a new game where he defines a sequence of integers and applies a series of operations on the sequence. Each operation involves adding a specific integer to a specific range of indices in the sequence. After applying all the operations, Andy wants to know the value of certain elements in the modified sequence. Your task is to help Andy perform the operations and answer his queries efficiently. -----Input----- - The first line contains two integers n and q, which represent the length of the sequence and the number of operations respectively. - The second line contains n integers, the initial elements of the sequence. - The next q lines each contain three integers l, r, and v, where l and r denote the range of indices (inclusive) and v is the value to add to all elements in that range. -----Output----- - Print the modified sequence after all operations have been applied. -----Constraints----- - 1 ≤ n ≤ 100000 - 1 ≤ q ≤ 100000 - 1 ≤ l ≤ r ≤ n - -1000 ≤ v ≤ 1000 - -10^9 ≤ initial sequence element ≤ 10^9 -----Example----- Input 1: 5 3 1 2 3 4 5 1 3 2 2 4 3 1 5 -1 Output 1: 2 6 7 6 4 Input 2: 4 2 5 5 5 5 1 2 3 3 4 -1 Output 2: 8 8 4 4 -----Explanation----- Testcase 1: - After the first operation, the sequence becomes [3, 4, 5, 4, 5]. - After the second operation, the sequence becomes [3, 7, 8, 7, 5]. - After the third operation, the sequence becomes [2, 6, 7, 6, 4]. Testcase 2: - After applying both operations, the sequence becomes [8, 8, 4, 4].","solution":"def apply_operations(n, q, sequence, operations): # Create prefix sum array with an additional element for easier range updates prefix_sum = [0] * (n + 1) # Apply each operation in the form of a range update for (l, r, v) in operations: prefix_sum[l - 1] += v # Increment at start of the range if r < n: prefix_sum[r] -= v # Decrement just after the end of the range # Apply the prefix sum to get the final sequence values current_addition = 0 for i in range(n): current_addition += prefix_sum[i] sequence[i] += current_addition return sequence"},{"question":"You are given a string which only contains digits and letters. Determine if the string is a palindrome, ignoring cases (upper or lower) and non-alphanumeric characters. A string is considered a palindrome if it reads the same forwards and backwards when considering only alphanumeric characters and ignoring cases. Input The only line of input contains a string s (1 ≤ |s| ≤ 1000), where |s| represents the length of the string. Output Output \\"YES\\" if the given string is a palindrome, and \\"NO\\" otherwise. Examples Input A man, a plan, a canal: Panama Output YES Input race a car Output NO","solution":"def is_palindrome(s): Determine if the string is a palindrome, ignoring cases and non-alphanumeric characters. :param s: Input string containing digits and letters. :return: \\"YES\\" if the string is a palindrome, \\"NO\\" otherwise. # Filter out non-alphanumeric characters and convert to lower case filtered_chars = [char.lower() for char in s if char.isalnum()] # Check if the filtered list is the same forwards and backwards if filtered_chars == filtered_chars[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"The marketing team at a software company is analyzing the effectiveness of their email campaigns. To do this, they have a log that records the time each email was sent and the time the first response to each email was received. They want to determine how long it took to get the first response for each email and also identify the email that received the quickest response. Your task is to process this log and compute both of these metrics. The log contains N entries, each with a unique identifier for the email, the timestamp when it was sent, and the timestamp when the first response was received. All timestamps are given in the format \\"YYYY-MM-DD HH:MM:SS\\". Write a program that takes the log entries as input, calculates the response time for each email, and identifies the email with the fastest response. Input: - The first line of the input contains an integer N, the number of log entries. - The next N lines contain three space-separated values: a string representing the email identifier, a string representing the send timestamp, and a string representing the response timestamp. Output: - For each log entry, output the email identifier and the response time in seconds on a new line. - After all log entries, output a single line with the email identifier of the email that received the quickest response and the response time in seconds. Constraints: - 1 ≤ N ≤ 1000 - Timestamps are within a valid range and in the correct format. SAMPLE INPUT: 3 email1 2022-09-15 10:34:50 2022-09-15 10:36:50 email2 2022-09-15 11:00:00 2022-09-15 11:10:30 email3 2022-09-15 12:15:45 2022-09-15 12:15:55 SAMPLE OUTPUT: email1 120 email2 630 email3 10 email3 10","solution":"from datetime import datetime def calculate_response_times(logs): Calculates response times for emails and identifies the email with the fastest response. Parameters: logs (list of tuples): Each tuple contains (email_identifier, send_timestamp, response_timestamp) Returns: result (list of tuples): Each tuple contains (email_identifier, response_time in seconds) fastest_email (tuple): Contains (email_identifier, response_time in seconds) for the email with the fastest response response_times = [] for email_id, send_time, response_time in logs: send_dt = datetime.strptime(send_time, \\"%Y-%m-%d %H:%M:%S\\") response_dt = datetime.strptime(response_time, \\"%Y-%m-%d %H:%M:%S\\") response_duration = int((response_dt - send_dt).total_seconds()) response_times.append((email_id, response_duration)) # Identify the email with the quickest response fastest_email = min(response_times, key=lambda x: x[1]) return response_times, fastest_email # Example usage: logs = [ (\\"email1\\", \\"2022-09-15 10:34:50\\", \\"2022-09-15 10:36:50\\"), (\\"email2\\", \\"2022-09-15 11:00:00\\", \\"2022-09-15 11:10:30\\"), (\\"email3\\", \\"2022-09-15 12:15:45\\", \\"2022-09-15 12:15:55\\"), ] response_times, fastest_email = calculate_response_times(logs) for email_id, response_time in response_times: print(f\\"{email_id} {response_time}\\") print(f\\"{fastest_email[0]} {fastest_email[1]}\\")"},{"question":"Python: Palindrome Substrings Count problem Given a string `S`, you are required to find the number of substrings of `S` that are palindromes. A palindrome is a string that reads the same backward as forward, for example, \\"aba\\" or \\"racecar\\". You need to return the total count of substrings that are palindromes. Input format A single line containing the string `S`. Constraint * 1 leq |S| leq 10^3 * `S` consists of lowercase English letters only. Output format Print a single integer — the number of substrings of `S` that are palindromes. Input example 1 abc Output example 1 3 Input example 2 aaa Output example 2 6 Input example 3 racecar Output example 3 10 Explanation In the first example, the substrings that are palindromes are \\"a\\", \\"b\\", and \\"c\\". In the second example, the substrings that are palindromes are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", and \\"aaa\\". In the third example, the substrings that are palindromes are \\"r\\", \\"a\\", \\"c\\", \\"e\\", \\"c\\", \\"a\\", \\"r\\", \\"cec\\", \\"aceca\\", and \\"racecar\\". Example Input abc Output 3","solution":"def count_palindromic_substrings(S): n = len(S) count = 0 # Create a 2D array to store palindromic substrings. dp = [[False] * n for _ in range(n)] for length in range(1, n + 1): for i in range(n - length + 1): j = i + length - 1 if S[i] == S[j]: if length == 1 or length == 2: dp[i][j] = True else: dp[i][j] = dp[i + 1][j - 1] if dp[i][j]: count += 1 else: dp[i][j] = False return count"},{"question":"Given a list of N integers, you need to determine the length of the shortest subarray, such that the AND of all the elements in this subarray is greater than or equal to a given integer K. The AND of a set of integers is the result of applying the bitwise AND operation to all the integers in the set. If no such subarray exists, return -1. ------ Input Format ------ - The first line of input contains a single integer T, representing the number of test cases. - Each test case consists of two lines: - The first line of each test case contains two integers N and K. - The second line contains N space-separated integers A_1, A_2, ..., A_N. ------ Output Format ------ For each test case, output the length of the shortest subarray with an AND greater than or equal to K. If no such subarray exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10^9 1 ≤ A_i ≤ 10^9 - The sum of N over all test cases will not exceed 5 cdot 10^5. ----- Sample Input 1 ------ 2 5 4 5 1 2 3 4 3 6 1 2 3 ----- Sample Output 1 ------ 1 -1 ----- Explanation 1 ------ Test case 1: The subarrays that have an AND greater than or equal to 4 are [5], [4]; the shortest of them is of length 1. Test case 2: There is no subarray with an AND greater than or equal to 6. Hence, the output is -1.","solution":"def shortest_subarray_length(test_cases): from sys import maxsize results = [] for test in test_cases: N, K = test[0] A = test[1] min_length = maxsize found = False for i in range(N): current_and = A[i] if current_and >= K: min_length = 1 found = True break for j in range(i + 1, N): current_and &= A[j] if current_and >= K: min_length = min(min_length, j - i + 1) found = True break if found: results.append(min_length) else: results.append(-1) return results # Reading input def read_input(): T = int(input().strip()) test_cases = [] for _ in range(T): N, K = map(int, input().strip().split()) A = list(map(int, input().strip().split())) test_cases.append(((N, K), A)) return test_cases # main function to read input and produce output if __name__ == \\"__main__\\": test_cases = read_input() results = shortest_subarray_length(test_cases) for result in results: print(result)"},{"question":"Two players are playing a game with an array of integers. They take turns alternately, picking either the first or last element of the array and removing it. Each player\'s goal is to maximize the sum of the integers they have picked. Write a function that determines the maximum possible sum that the first player can collect assuming both players play optimally. Input: The first line contains the integer `t`, the number of test cases. For each test case, the first line contains the integer `n`, the number of elements in the array, followed by `n` integers denoting the elements of the array. Output: For each test case, output a single line containing the maximum possible sum that the first player can collect. SAMPLE INPUT 2 4 1 2 9 4 3 4 4 5 SAMPLE OUTPUT 10 9 Explanation In the first test case: - The optimal strategy for the first player is to pick 4 (remaining array: [1 2 9]) - The second player will pick 9 (remaining array: [1 2]) - The first player will pick 2 (remaining array: [1]) - The second player will pick 1 The sums of the first player would be 4 + 2 = 6 while the second player would be 9 + 1 = 10. This is not optimal for the first player. Instead, the first player should pick 1 (remaining array: [2 9 4]) - The second player will pick 4 (remaining array: [2 9]) - The first player will pick 9 (remaining array: [2]) - The second player will pick 2 The sums would be: First player: 1 + 9 = 10, Second player: 4 + 2 = 6 Input Constraints are: 1 ≤ t ≤ 100 1 ≤ n ≤ 1000 1 ≤ array elements ≤ 10000","solution":"def max_first_player_sum(test_cases): results = [] for array in test_cases: n = len(array) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = array[i] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 dp[i][j] = max(array[i] - dp[i + 1][j], array[j] - dp[i][j - 1]) first_player_sum = (sum(array) + dp[0][n - 1]) // 2 results.append(first_player_sum) return results # Helper function to parse input and return output in correct format def game_solver(t, cases): test_cases = [case[1:] for case in cases] results = max_first_player_sum(test_cases) return results"},{"question":"There are N friends who want to participate in Secret Santa this year. Each friend should gift exactly one other friend, and no one should be left out. Your goal is to determine if it is possible to organize the gift exchange such that the criteria are met. ------ Input Format ------ - The first line contains a single integer N — the number of friends. - The second line contains N integers where the i-th integer represents the ID of the friend that the i-th friend wants to gift (1-indexed). ------ Output Format ------ Output \\"Yes\\" if it is possible to organize the Secret Santa such that each friend gifts exactly one other friend and every friend receives exactly one gift. Otherwise, output \\"No\\". ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ ID ≤ N ----- Sample Input 1 ------ 4 2 3 4 1 ----- Sample Output 1 ------ Yes ----- Sample Input 2 ------ 5 2 3 4 5 3 ----- Sample Output 2 ------ No ----- Explanation 1 ------ - In Sample Input 1, it is possible to organize the gift exchange as follows: Friend 1 -> Friend 2 Friend 2 -> Friend 3 Friend 3 -> Friend 4 Friend 4 -> Friend 1 every friend receives and gives exactly one gift. - In Sample Input 2, it is not possible to organize the gift exchange because: - Friend 3 is desired by both Friend 2 and Friend 5, meaning Friend 3 receives more than one gift and Friend 5 receives no gift. Therefore, the output for the first sample is \\"Yes\\", and for the second sample, it is \\"No\\".","solution":"def can_organize_secret_santa(N, friend_ids): if len(friend_ids) != N: return \\"No\\" received = [0] * N for friend in friend_ids: if friend < 1 or friend > N: return \\"No\\" received[friend - 1] += 1 for count in received: if count != 1: return \\"No\\" return \\"Yes\\" # Sample usage sample_input1 = (4, [2, 3, 4, 1]) print(can_organize_secret_santa(*sample_input1)) # Output should be \\"Yes\\" sample_input2 = (5, [2, 3, 4, 5, 3]) print(can_organize_secret_santa(*sample_input2)) # Output should be \\"No\\""},{"question":"In a distant galaxy, there is a circular space race track used by various alien racers. Each point on the track can be represented as a point on the circumference of a circle of radius ( r ). The coordinates of ( n ) checkpoints on the track are given. The race periodically requires the calculation of the minimum enclosing circle that can cover all checkpoints to ensure the track\'s safety barriers are appropriately set. Your task is to compute the radius of the minimum enclosing circle of the given checkpoints. -----Input----- The first line contains an integer ( n ) (( 1 leq n leq 10^5 )), the number of checkpoints. The second line contains an integer ( r ) (( 1 leq r leq 10^9 )), the radius of the circular track. Each of the next ( n ) lines contains two integers ( x_i ) and ( y_i ) (( -r leq x_i, y_i leq r )), the coordinates of the ( i )-th checkpoint on the track. It is guaranteed that all checkpoints lie on the boundary (circumference) of the circle. -----Output----- Output a single integer, the radius of the minimum enclosing circle that covers all the given checkpoints. -----Examples----- Input 3 10 10 0 0 10 -10 0 Output 10 Input 2 5 5 0 -5 0 Output 5 Input 4 8 8 0 0 8 -8 0 0 -8 Output 8 -----Note----- In the first sample, all points lie on the boundary of a circle with radius 10, which is the minimum enclosing circle. So the output is 10. In the second sample, the point\'s radius is already minimal, so the output is 5. In the third sample, the points lie on the boundary of a circle with radius 8, so the output is 8.","solution":"def min_enclosing_circle_radius(n, r, checkpoints): Computes the minimum enclosing circle\'s radius that can cover all given checkpoints. Parameters: n (int): Number of checkpoints. r (int): Radius of the given circular track. checkpoints (list): List of tuples where each tuple contains coordinates (x_i, y_i) of a checkpoint. Returns: int: The radius of the minimum enclosing circle covering all checkpoints. # All points lie on the boundary of the circle, hence # the radius of the minimum enclosing circle is simply the given radius r. return r"},{"question":"You are the manager of a parking lot with multiple rows of parking spaces. Each parking space can be either empty or occupied by a car. Cars are arriving at the parking lot one by one, and you want to park them in the most efficient way. Specifically, you want to ensure that the cars are parked as close to the entrance as possible. The parking lot is represented by a 2D grid with \'E\' representing an empty space and \'C\' representing an occupied space. The entrance to the parking lot is always at the top-left corner, i.e., position (0,0). When a car arrives, it should be parked in the nearest empty space to the entrance. If there are multiple such positions, any one of them is acceptable. You need to write a program that reads the initial state of the parking lot grid, and processes a series of car arrivals by updating the grid accordingly and printing the new state of the grid after each car is parked. Input The input consists of multiple test cases. Each test case begins with two integers n and m, the number of rows and columns of the parking lot grid respectively. This is followed by n lines, each containing m characters (\'E\' or \'C\') representing the initial state of the grid. Then, an integer q is given, the number of cars arriving. The end of the input is indicated by a line containing two zeros separated by a space. Output For each car arrival, print the state of the parking lot grid after the car is parked. An output line should not contain extra characters. Example Input 4 5 EEEEE ECECE EEEEE ECEEE 3 4 4 ECCE EECE EEEE EEE 2 0 0 Output CEEEE ECECE EEEEE ECEEE CEEEE CCCCE EEEEE ECEEE CEEEE CCCCE CEEEE ECEEE ECCE CECE EEEE EEE ECCE CECE CEEE EEE","solution":"def find_nearest_empty(parking_lot): This function finds the coordinates of the nearest empty parking space from the top-left corner. It returns a tuple (row, column) of the nearest empty space. for i in range(len(parking_lot)): for j in range(len(parking_lot[0])): if parking_lot[i][j] == \'E\': return i, j return -1, -1 def park_car(parking_lot): This function parks a car in the nearest available empty space and updates the parking lot grid accordingly. i, j = find_nearest_empty(parking_lot) if i != -1 and j != -1: parking_lot[i][j] = \'C\' return parking_lot def process_parking_lot(parking_lot, arrivals): This function processes the car arrivals and prints the parking lot state after each arrival. for _ in range(arrivals): parking_lot = park_car(parking_lot) for row in parking_lot: print(\\"\\".join(row)) print() def main(): import sys input = sys.stdin.read data = input().split(\\"n\\") idx = 0 while True: n, m = map(int, data[idx].strip().split()) if n == 0 and m == 0: break idx += 1 parking_lot = [] for i in range(n): parking_lot.append(list(data[idx + i].strip())) idx += n arrivals = int(data[idx].strip()) idx += 1 process_parking_lot(parking_lot, arrivals)"},{"question":"You are provided a list of non-negative integers. Your task is to find the largest possible difference between two elements in the list, where one element is strictly greater than the other and appears after it in the list. For example, if the input list is `[2, 3, 1, 7]`, the largest possible difference is `6` (difference between `7` and `1`). Input: First line consists of an integer n representing the number of elements in the list. Next line consists of n space-separated non-negative integers. 1 ≤ n ≤ 1000 0 ≤ List elements ≤ (2^30) Output: Single integer representing the largest possible difference. SAMPLE INPUT 4 2 3 1 7 SAMPLE OUTPUT 6","solution":"def largest_possible_difference(arr): Function to find the largest possible difference between two elements in the list where one element is greater than the other and appears after it. if not arr or len(arr) < 2: return 0 # No valid difference can be found if there are less than 2 elements min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) else: min_element = arr[i] return max_diff"},{"question":"In a certain city, there is a system of public transportation comprising several bus lines. Each bus line is a direct route between two bus stops, and no two bus lines overlap at any segment. Citizens of the city are concerned about the efficiency of the transportation system and want to know if there are ways to travel between two specific bus stops using a few intermediate bus lines. You have been asked to write a program that determines the shortest path, in terms of the number of bus lines, between two given bus stops. # Input The input consists of multiple datasets. Each dataset is given as follows: ``` n m Bus Line 1 Bus Line 2 Bus Line 3 ... Bus Line m s t ``` - `n` is the number of bus stops (`2 <= n <= 100`). - `m` is the number of bus lines (`1 <= m <= 1000`). - Each bus line is described by two integers `u` and `v` (`1 <= u, v <= n`), representing a direct route between bus stop `u` and bus stop `v`. - `s` and `t` are integers (`1 <= s, t <= n`) representing the starting and ending bus stops respectively. The input ends with a dataset where `n` and `m` are both zero, which should not be processed. # Output For each dataset, output a single integer representing the minimum number of bus lines needed to travel from bus stop `s` to bus stop `t`. If there is no possible route, output `-1`. # Sample Input ``` 5 5 1 2 2 3 3 4 4 5 1 5 1 5 4 4 1 2 2 3 3 4 1 4 1 3 0 0 ``` # Sample Output ``` 1 2 ``` # Explanation In the first dataset: - There is a direct bus line from bus stop `1` to bus stop `5`. The minimum number of bus lines is `1`. In the second dataset: - To travel from bus stop `1` to bus stop `3`, you can transfer at bus stop `2`. The minimum number of bus lines is `2`.","solution":"from collections import deque, defaultdict def find_shortest_path(n, m, bus_lines, s, t): if s == t: return 0 # Create an adjacency list to represent the bus stops and bus lines graph = defaultdict(list) for u, v in bus_lines: graph[u].append(v) graph[v].append(u) # Perform BFS to find the shortest path queue = deque([(s, 0)]) # (current stop, bus lines taken) visited = set() visited.add(s) while queue: current_stop, distance = queue.popleft() for neighbor in graph[current_stop]: if neighbor not in visited: if neighbor == t: return distance + 1 queue.append((neighbor, distance + 1)) visited.add(neighbor) return -1"},{"question":"You are tasked with writing a program that processes a string containing letters and underscore symbols and finds properties of the words within the string. For this task, we define a word as a maximal sequence of consecutive letters (either uppercase or lowercase English letters), separated by underscore symbols. Additionally, consider words that are reversed for special counting. Here\'s what you need to accomplish: 1. Calculate the total number of words in the string. 2. Identify the longest word that appears in the string. 3. Count how many words are still valid if reversed; that is, a word that remains the same even when its letters are reversed (e.g., \\"level\\", \\"radar\\"). -----Input----- - The input consists of a single line containing a string. - The string contains only lowercase English letters and underscores. The length of the string is between 1 and 255, inclusive. -----Output----- - Print three space-separated integers: - The first integer is the total number of words in the string. - The second integer is the length of the longest word. - The third integer is the count of words that remain the same when reversed. -----Examples----- Input: hello_world Output: 2 5 0 Input: racecar_anna_civic Output: 3 7 3 Input: simple_string_example Output: 3 7 0 Input: palindrome_emordnilap Output: 2 10 0 -----Note----- In the first example, \\"hello\\" and \\"world\\" are two words with lengths 5 each. Neither of the words \\"hello\\" and \\"world\\" remain the same when reversed. In the second example, there are three words: \\"racecar\\", \\"anna\\", and \\"civic\\". All three remain the same when reversed. Among them, \\"racecar\\" is the longest with 7 characters.","solution":"def process_string(s): Processes the input string according to the task requirements. Parameters: s (str): The input string containing lowercase English letters and underscores. Returns: tuple: A tuple containing three integers: - Total number of words in the string. - The length of the longest word in the string. - The count of words that remain the same when reversed. words = s.split(\'_\') total_words = len(words) longest_word_length = max(len(word) for word in words) palindrome_count = sum(1 for word in words if word == word[::-1]) return total_words, longest_word_length, palindrome_count"},{"question":"Aegeana is a security consultant tasked with analyzing potential vulnerabilities in a social media platform. One important aspect of her job is to evaluate the strength of user passwords. She needs to determine if a password is secure enough by ensuring it meets specific criteria. The criteria for a strong password are: 1. It must be at least 8 characters long. 2. It must contain at least one lowercase letter, one uppercase letter, and one digit. 3. It must have at least one special character from the set: \\"!@#%^&*()-+\\" Write a function `is_strong_password` that takes a password as input and returns \\"STRONG\\" if it meets all the criteria mentioned above, and \\"WEAK\\" otherwise. Input The input consists of a single string `password` which represents the password to be checked. The length of the password is between 1 and 100 characters inclusive. Output The output is a single string: \\"STRONG\\" if the password meets all the given criteria, otherwise it is \\"WEAK\\". Examples Input 1faB9#c1d Output STRONG Input abc123 Output WEAK Input A1!aaaaa Output WEAK Input Ab1!Az@Y Output STRONG Note: In the first example, the password \\"1faB9#c1d\\" meets all the criteria: it is more than 8 characters long, includes at least one lowercase letter (f, a, c, d), one uppercase letter (B), one digit (1, 9), and one special character (#). In the second example, \\"abc123\\" does not meet several criteria: it’s shorter than 8 characters, lacks an uppercase letter, and lacks a special character. In the third example, \\"A1!aaaaa\\" does not meet the criteria because it lacks a special character from the specified set. In the fourth example, \\"Ab1!Az@Y\\" meets all the criteria and is therefore \\"STRONG\\".","solution":"def is_strong_password(password): Determines if the given password is strong based on specific criteria. Args: password (str): The password to be checked. Returns: str: \\"STRONG\\" if the password meets all criteria, \\"WEAK\\" otherwise. if len(password) < 8: return \\"WEAK\\" has_lower = has_upper = has_digit = has_special = False special_characters = \\"!@#%^&*()-+\\" for char in password: if char.islower(): has_lower = True elif char.isupper(): has_upper = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True if has_lower and has_upper and has_digit and has_special: return \\"STRONG\\" return \\"WEAK\\""},{"question":"There is a need to develop a new feature for the messaging app \'ChaTalk\'. The feature needs to identify conversations with a potential word or phrase that has been excessively repeated. Given a conversation, determine if there is any word that appears more than N times in a single sentence. A conversation is a multiline input, with sentences ending in a period (\'.\') and N is provided as an input. Your task is to count and flag such sentences. Input Format: The first line contains an integer T, the number of test cases. T blocks follow. Each block consists of: - An integer N. - An integer M, the number of sentences in the conversation. - M lines each containing a sentence with words separated by spaces and ending with a period (\'.\'). Output Format: For each test case, print \\"FLAG\\" if any sentence contains a word repeated more than N times. Otherwise, print \\"OK\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10 1 ≤ M ≤ 1000 A sentence may contain up to 100 words, with each word having a maximum length of 15 characters. SAMPLE INPUT: 2 2 3 Hello Hello world. This is a test sentence. Goodbye Goodbye Goodbye friends. 1 2 Hey there this is a test. Hello Hello this is a flag test. SAMPLE OUTPUT: FLAG FLAG Explanation: In the first test case, the first and third sentences have words (\\"Hello\\" and \\"Goodbye\\" respectively) repeated more than twice. Therefore, the output is \\"FLAG\\". In the second test case, the second sentence contains \\"Hello\\" repeated more than once (since N=1), thus the output is \\"FLAG\\".","solution":"def check_repeated_words(T, test_cases): results = [] for i in range(T): N, M, sentences = test_cases[i] flag = False for sentence in sentences: words = sentence[:-1].split() # Remove the period and split words word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 if word_count[word] > N: flag = True break if flag: break if flag: results.append(\\"FLAG\\") else: results.append(\\"OK\\") return results"},{"question":"In an amusement park, there is an attraction area represented by a square grid of size N x N (1-indexed). Each cell in the grid can hold a limited number of people, which is given in the input as a 2D array grid of size N x N. Additionally, the park has M different groups of visitors. Each group wants to visit a specific cell in the grid. Each group i arrives at time t_i and contains p_i people. Your task is to determine whether it is possible to accommodate all groups in their preferred cells without exceeding the capacity of any cell at any point in time. Constraints: * 1 ≤ N ≤ 10^3 * 1 ≤ M ≤ 10^5 * 1 ≤ grid[i][j] ≤ 10^6 for 1 ≤ i, j ≤ N * 1 ≤ t_i ≤ 10^9 * 1 ≤ p_i ≤ 10^2 Input Input is given from Standard Input in the following format: ``` N M grid_1_1 grid_1_2 ... grid_1_N ... grid_N_1 grid_N_2 ... grid_N_N t_1 x_1 y_1 p_1 ... t_M x_M y_M p_M ``` The first line of input contains the integers N (size of the grid) and M (number of groups). The next N lines each contain N integers representing the grid, where the j-th integer in the i-th line represents the capacity of the cell at (i, j). The next M lines each contain four integers `t_i x_i y_i p_i`, where t_i is the arrival time of group i, (x_i, y_i) is the preferred cell of group i, and p_i is the number of people in group i. Output Print `YES` if all groups can be accommodated in their preferred cells without exceeding any cell\'s capacity. Otherwise, print `NO`. Examples: Input ``` 3 3 5 5 5 5 5 5 5 5 5 1 1 1 2 2 1 1 1 3 2 2 3 ``` Output ``` YES ``` Input ``` 2 2 2 3 3 3 1 1 1 1 2 1 1 2 ``` Output ``` NO ```","solution":"def can_accommodate_groups(n, m, grid, groups): # A dictionary to hold the future reservations in each cell reservations = {} for t, x, y, p in groups: if (x, y) not in reservations: reservations[(x, y)] = [] reservations[(x, y)].append((t, p)) for x in range(1, n + 1): for y in range(1, n + 1): if (x, y) in reservations: reserved_people = 0 reservations[(x, y)].sort() # Sort by time for t, p in reservations[(x, y)]: reserved_people += p if reserved_people > grid[x-1][y-1]: return \\"NO\\" return \\"YES\\" # Input reading and function execution import sys input = sys.stdin.read def main(): data = input().split() index = 0 n = int(data[index]) m = int(data[index + 1]) index += 2 grid = [] for i in range(n): grid.append([int(data[index + j]) for j in range(n)]) index += n groups = [] for i in range(m): t = int(data[index]) x = int(data[index + 1]) y = int(data[index + 2]) p = int(data[index + 3]) groups.append((t, x, y, p)) index += 4 print(can_accommodate_groups(n, m, grid, groups)) if __name__ == \'__main__\': main()"},{"question":"Create a function `sort_even_numbers` that takes a list of integers as an input and returns a new list where all the even numbers are sorted in ascending order, while the odd numbers retain their original positions. For example: ```python sort_even_numbers([5, 3, 2, 8, 1, 4]) == [5, 3, 2, 4, 1, 8] sort_even_numbers([2, 1, 2, 1, 2, 1]) == [2, 1, 2, 1, 2, 1] sort_even_numbers([6, 5, 4, 3, 1, 2]) == [2, 5, 4, 3, 1, 6] ``` The function should preserve the index positions of the odd numbers and only sort the even numbers relative to each other.","solution":"def sort_even_numbers(nums): # Extract the even numbers and sort them evens_sorted = sorted([num for num in nums if num % 2 == 0]) # Initialize an index for the sorted even numbers even_index = 0 # Create a new list to hold the results result = [] for num in nums: if num % 2 == 0: # Replace even numbers with sorted even numbers result.append(evens_sorted[even_index]) even_index += 1 else: # Keep odd numbers in their original positions result.append(num) return result"},{"question":"You are given a 2D grid of size m x n made up of zeros (0) and ones (1). Your task is to write a function that finds the largest square containing all ones and returns its area. To solve this problem, you can use dynamic programming. Define a 2D array `dp` where `dp[i][j]` represents the side length of the largest square whose bottom-right corner is the cell `(i, j)`. The value of `dp[i][j]` is determined by: - `dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1` if `matrix[i][j] == 1` - `dp[i][j] = 0` if `matrix[i][j] == 0` Initialize the `dp` array and iterate through the matrix to fill it. The area of the largest square found will be the maximum value in the `dp` array squared. # Function Signature ```python def maximalSquare(matrix: List[List[int]]) -> int: pass ``` # Input - `matrix` (List[List[int]]): A list of lists of integers representing the 2D grid. # Output - Returns an integer representing the area of the largest square containing all ones. # Example ```python # Example 1 matrix = [ [1,0,1,1,1], [1,0,1,1,1], [1,1,1,1,1], [1,0,0,1,0] ] print(maximalSquare(matrix)) # Output: 9 (3x3 square) # Example 2 matrix = [ [0,1], [1,0] ] print(maximalSquare(matrix)) # Output: 1 # Example 3 matrix = [ [0,0,0,1] ] print(maximalSquare(matrix)) # Output: 1 ``` # Constraints - The dimensions of the matrix are between 1 and 300. - The elements in the matrix are either 0 or 1.","solution":"from typing import List def maximalSquare(matrix: List[List[int]]) -> int: if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[0] * n for _ in range(m)] max_side = 0 for i in range(m): for j in range(n): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 # On the first row/column, the largest square ends here is the cell itself if it is 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side"},{"question":"Write a program that reads a series of integers and determines whether each integer is prime or not. The program will read a list of integers terminated by the input value -1, which should not be processed. For each integer, print \\"Prime\\" if the number is a prime number, otherwise print \\"Not Prime\\". Constraints * -1 ≤ N ≤ 10000 * The input ends with the integer -1. Input The input consists of multiple integers, each on a new line. The input ends with -1. Output For each integer (except -1), print \\"Prime\\" or \\"Not Prime\\" on a new line. Example Input 11 15 18 23 -1 Output Prime Not Prime Not Prime Prime","solution":"def is_prime(n): Determines if n is a prime number. Returns True if n is prime, else False. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True def process_numbers(numbers): Takes a list of integers and determines if each is a prime. Prints \\"Prime\\" or \\"Not Prime\\" for each number until -1 is encountered. for number in numbers: if number == -1: break if is_prime(number): print(\\"Prime\\") else: print(\\"Not Prime\\")"},{"question":"You are given an undirected graph with N nodes (numbered from 1 to N) and M edges. Each edge has a certain weight associated with it. The graph is not necessarily connected, meaning there can be disconnected components within the graph. Your task is to implement a function to determine the shortest path from a given start node to a target node using Dijkstra\'s algorithm. If there is no path between the start node and the target node, return -1. Input format: - The first line contains two integers, N (the number of nodes) and M (the number of edges). - The next M lines each contain three integers u, v, and w, representing an edge between nodes u and v with weight w. - The last line contains two integers, start and target, representing the start node and the target node. Output format: - Output a single integer representing the shortest path from the start node to the target node. If there is no such path, output -1. Constraints: 1 ≤ N, M ≤ 10,000 1 ≤ u, v ≤ N 1 ≤ w ≤ 10,000 1 ≤ start, target ≤ N SAMPLE INPUT 5 6 1 2 4 1 3 2 2 3 1 2 4 5 3 4 8 3 5 10 1 5 SAMPLE OUTPUT 12","solution":"import heapq def dijkstra(N, edges, start, target): Return the shortest distance from start node to target node using Dijkstra\'s Algorithm. If there is no path, return -1. Parameters: N (int): Number of nodes edges (list of tuples): Each tuple contains (u, v, w) representing an edge between nodes u and v with weight w. start (int): Starting node target (int): Target node Returns: int: Shortest path from start to target, or -1 if no such path exists. graph = {i: [] for i in range(1, N + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, start)] distances = {i: float(\'inf\') for i in range(1, N + 1)} distances[start] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == target: return current_distance if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 if distances[target] == float(\'inf\') else distances[target]"},{"question":"In a magic land, there are wizards who maintain an inventory of potions in bottles. Each potion bottle has a certain volume, which is a non-negative integer. To keep the inventory sorted, the wizards need to rearrange the potion bottles according to a specific rule. The rule is as follows: - Each wizard can swap any two bottles in the inventory. - The aim is to sort the potion volumes in non-decreasing order with the minimum number of swaps. You are given an array of non-negative integers representing the potion volumes in the bottles. Write a function that determines the minimum number of swaps required to sort the potion volumes. # Input The input consists of multiple test cases. The first line contains an integer t (1 le t le 10^3) — the number of test cases. Each test case starts with an integer n (1 le n le 10^5) — the number of bottles. The next line contains n integers, which are the volumes in the potion bottles. # Output For each test case, output a single integer — the minimum number of swaps required to sort the potion volumes in non-decreasing order. # Examples Input ``` 2 5 4 3 1 2 5 3 3 1 2 ``` Output ``` 3 2 ``` Note In the first test case, the wizard can sort the bottles with the following swaps: 1. Swap positions 1 and 3: [1, 3, 4, 2, 5] 2. Swap positions 2 and 4: [1, 2, 4, 3, 5] 3. Swap positions 3 and 4: [1, 2, 3, 4, 5] In the second test case, the wizard can sort the bottles with the following swaps: 1. Swap positions 1 and 2: [1, 3, 2] 2. Swap positions 2 and 3: [1, 2, 3]","solution":"def min_swaps(arr): Returns the minimum number of swaps required to sort the array. n = len(arr) arrpos = [(value, i) for (i, value) in enumerate(arr)] arrpos.sort() # Sort the array by value vis = {i: False for i in range(n)} # Mark all nodes as not visited ans = 0 for i in range(n): # already in the correct place or already visited if vis[i] or arrpos[i][1] == i: continue cycle_size = 0 j = i while not vis[j]: vis[j] = True j = arrpos[j][1] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans def solve_magic_land(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(min_swaps(arr)) return results"},{"question":"You are given a list of non-negative integers representing the elevation at each unit of distance along a 2D elevation map. Your task is to compute the amount of rainwater that can be trapped after it rains. Each unit of distance represents one unit of width, and each elevation value represents the height of the terrain at that point. Water can only be trapped between the elevations if there are elevations on both sides that create a container. You need to return the total amount of water that can be trapped along the elevation map. Constraints * 1 leq text{length of elevation list} leq 10^5 * 0 leq text{elevation value} leq 10^4 Inputs The input consists of: * A single integer, N, representing the number of units of distance. * A list of N non-negative integers representing the elevation at each unit of distance. Output Print a single integer representing the total amount of water that can be trapped. Examples Input 9 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Input 5 4 2 0 3 2 5 Output 9","solution":"def trap_rainwater(heights): Calculate the amount of trapped rainwater given the heights of elevation at each unit of distance. :param heights: List of non-negative integers representing elevation heights :return: Total amount of trapped rainwater if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 # Compute the maximum height to the left of each position left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Compute the maximum height to the right of each position right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Compute the trapped water at each position for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Given an array of integers `arr` of size `n`, and an integer `k`, find the number of pairs of array elements that add up to `k`. Example 1: Input: arr = [1, 5, 7, 1], k = 6 Output: 2 Explanation: Pairs with sum 6 are (1, 5) and (5, 1). Example 2: Input: arr = [1, 1, 1, 1], k = 2 Output: 6 Explanation: Pairs with sum 2 are (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), and (1, 1). Your Task: You don\'t need to read or print anything. Your task is to complete the function `count_pairs_with_sum()` which takes the array `arr`, its size `n`, and the integer `k` as input parameters and returns the number of pairs in the array whose sum is equal to `k`. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: - 1 <= n <= 10^5 - -10^5 <= arr[i], k <= 10^5","solution":"def count_pairs_with_sum(arr, n, k): Returns the number of pairs in the array whose sum is equal to k. count = 0 freq = {} for num in arr: complement = k - num if complement in freq: count += freq[complement] if num in freq: freq[num] += 1 else: freq[num] = 1 return count"},{"question":"There is a warehouse that needs to be managed by a supervisor. The layout of the warehouse can be represented as a grid, where each cell in the grid either contains an item or is empty. The supervisor can start at any position (i, j) in the grid and can move to an adjacent cell (up, down, left, right) to collect items. The goal of the supervisor is to collect as many items as possible, but there is a constraint on the number of steps he can take. You are given the layout of the warehouse as a 2D grid of integers where 1 represents an item and 0 represents an empty cell. You are also given an integer k which represents the maximum number of steps the supervisor can take. Write a program to determine the maximum number of items the supervisor can collect starting from any cell in the grid, without exceeding k steps. Input: The first line of the input contains three integers n, m, and k (1 ≤ n, m ≤ 50, 1 ≤ k ≤ 2500) — the number of rows and columns in the warehouse, and the maximum number of steps the supervisor can take. Each of the next n lines contains m integers (either 0 or 1) representing the layout of the warehouse. Output: Print a single integer — the maximum number of items the supervisor can collect. Examples: Input: 3 4 5 1 0 0 1 0 1 0 0 1 0 1 1 Output: 4 Explanation: Starting at the cell (1, 1), the supervisor can collect 4 items within 5 steps by following this path: (1, 1) → (2, 1) → (3, 1) → (3, 2) → (3, 3). Therefore, the maximum number of items collected is 4.","solution":"def max_items_collected(n, m, k, grid): def dfs(x, y, steps, collected): if steps > k: return 0 max_collected = collected + grid[x][y] visited.add((x, y)) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: max_collected = max(max_collected, dfs(nx, ny, steps + 1, collected + grid[x][y])) visited.remove((x, y)) return max_collected max_items = 0 for i in range(n): for j in range(m): visited = set() max_items = max(max_items, dfs(i, j, 0, 0)) return max_items"},{"question":"You are given a list of integers representing the difficulty levels of various puzzles. Your task is to determine the maximum possible sum of difficulties you can achieve by selecting a contiguous subarray of puzzles such that the sum of puzzles\' difficulties in the subarray is strictly positive. Input - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of puzzles. - The second line contains N space-separated integers representing the difficulty levels of the puzzles. Output For each test case, output a single integer, the maximum sum of difficulties for any contiguous subarray that has a strictly positive sum. If no such subarray exists, return 0. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 -10^4 ≤ difficulty level ≤ 10^4 SAMPLE INPUT 3 5 -1 2 3 -5 4 6 -2 1 -3 4 -1 2 1 -5 4 3 -4 -3 -2 SAMPLE OUTPUT 5 6 0 Explanation For the first test case, the subarray [2, 3] has the maximum sum of 5. For the second test case, the subarray [4, -1, 2, 1] has the maximum sum of 6. For the third test case, no subarray has a strictly positive sum, so the result is 0.","solution":"def max_sum_of_positive_subarray(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] difficulties = test_cases[i][1] maximum_sum = 0 current_sum = 0 for difficulty in difficulties: current_sum += difficulty if current_sum > maximum_sum: maximum_sum = current_sum if current_sum < 0: current_sum = 0 results.append(maximum_sum) return results"},{"question":"You are given a rectangular grid with H rows and W columns. Each cell in the grid can either be empty or contain an obstacle. Your goal is to find the number of different paths from the top-left corner (1,1) to the bottom-right corner (H,W). You can only move to the right or down to an adjacent cell in each step and cannot move into cells that contain obstacles. ---Constraints--- - All values in input are integers. - 1 ≤ H, W ≤ 100 - The grid cells are either empty (\'.\') or contain an obstacle (\'#\'). ---Input--- Input is given from Standard Input in the following format: H W grid[1][1] grid[1][2] ... grid[1][W] grid[2][1] grid[2][2] ... grid[2][W] ... grid[H][1] grid[H][2] ... grid[H][W] ---Output--- Print the number of different paths from the top-left corner to the bottom-right corner. If there is no such path, print 0. ---Sample Input--- 3 3 . . . . # . . . . ---Sample Output--- 2 In the given grid, there are two possible paths from the top-left to the bottom-right corner - each avoiding the obstacle in the middle.","solution":"def num_paths(H, W, grid): # Return 0 if the start or end points are obstacles if grid[0][0] == \'#\' or grid[H-1][W-1] == \'#\': return 0 dp = [[0] * W for _ in range(H)] dp[0][0] = 1 # Start point # Fill in the dp table for i in range(H): for j in range(W): if grid[i][j] == \'#\': dp[i][j] = 0 elif i == 0 and j > 0: dp[i][j] = dp[i][j-1] elif i > 0 and j == 0: dp[i][j] = dp[i-1][j] elif i > 0 and j > 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[H-1][W-1]"},{"question":"Given a string s consisting of lowercase English letters, return the first non-repeating character in it. If there isn\'t any non-repeating character, return an underscore (\'_\'). Example: Input: s = \\"leetcode\\" Output: \'l\' Input: s = \\"aabb\\" Output: \'_\' Follow up: Try to solve the problem using only one traversal of the string.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in the string s. If there isn\'t any non-repeating character, returns \'_\'. from collections import Counter counter = Counter(s) for char in s: if counter[char] == 1: return char return \'_\'"},{"question":"Given an array of integers textbf{A} of length N, and M queries to process. The queries are of the following types: 1. UPDATE i x: update the element at index i in the array to x. 2. SUM l r: output the sum of elements in the subarray starting from index l to r. 3. MIN l r: output the minimum element in the subarray starting from index l to r. Input Format The first line of input contains a single integer N textbf{-} the length of the array. The second line contains N integers representing the initial elements of the array. The third line of input contains a single integer M textbf{-} the number of queries. Then, there are M lines, each denotes a query of one of the types above. Constraints 1 leq N leq 10^5 1 leq M leq 10^5 1 leq A[i] leq 10^9 For UPDATE-type queries: 1 leq i leq N, 1 leq x leq 10^9 For SUM-type and MIN-type queries: 1 leq l leq r leq N Output Format For each query of the type SUM or MIN, output an answer on a separate line of output. Sample Input 0 8 5 3 8 6 3 7 4 2 5 UPDATE 3 10 SUM 2 5 MIN 4 7 UPDATE 6 1 MIN 5 8 Sample Output 0 22 3 1 Explanation 0 Initial Array: [5, 3, 8, 6, 3, 7, 4, 2] UPDATE 3 10 Array becomes: [5, 3, 10, 6, 3, 7, 4, 2] SUM 2 5 Sum of elements from index 2 to 5: 3 + 10 + 6 + 3 = 22 MIN 4 7 Minimum element from index 4 to 7: min(6, 3, 7, 4) = 3 UPDATE 6 1 Array becomes: [5, 3, 10, 6, 3, 1, 4, 2] MIN 5 8 Minimum element from index 5 to 8: min(3, 1, 4, 2) = 1","solution":"class SegmentTree: def __init__(self, data, func, default_value): self.n = len(data) self.tree = [default_value] * (2 * self.n) self.func = func self.default_value = default_value # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.func(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, idx, value): idx += self.n self.tree[idx] = value while idx > 1: idx //= 2 self.tree[idx] = self.func(self.tree[2 * idx], self.tree[2 * idx + 1]) def query(self, left, right): result = self.default_value left += self.n right += self.n while left <= right: if left % 2 == 1: result = self.func(result, self.tree[left]) left += 1 if right % 2 == 0: result = self.func(result, self.tree[right]) right -= 1 left //= 2 right //= 2 return result def process_queries(N, A, M, queries): sum_tree = SegmentTree(A, lambda x, y: x + y, 0) min_tree = SegmentTree(A, min, float(\'inf\')) result = [] for query in queries: parts = query.split() if parts[0] == \\"UPDATE\\": idx = int(parts[1]) - 1 value = int(parts[2]) sum_tree.update(idx, value) min_tree.update(idx, value) elif parts[0] == \\"SUM\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 result.append(sum_tree.query(l, r)) elif parts[0] == \\"MIN\\": l = int(parts[1]) - 1 r = int(parts[2]) - 1 result.append(min_tree.query(l, r)) return result"},{"question":"Alex is participating in a coding competition, and he is given a problem involving linked lists. The problem requires Alex to detect if there is a cycle in a given linked list. A cycle occurs if a node\'s next reference points to a previous node in the sequence, causing an infinite loop. Alex needs to implement a function that takes the head of a linked list and returns a boolean indicating whether the linked list contains a cycle. To help Alex, write a function `hasCycle` that takes a singly linked list and detects if there is a cycle in the list. -----Input----- Construct a singly linked list using the `ListNode` class provided below: ``` class ListNode: def __init__(self, x): self.val = x self.next = None ``` The function `hasCycle` accepts the head of the linked list: ``` def hasCycle(head: ListNode) -> bool: # Your code here ``` -----Output----- Return `True` if there is a cycle in the linked list, otherwise return `False`. -----Examples----- Example 1: ``` Input: head = [3,2,0,-4] pos = 1 Explanation: The linked list contains a cycle because the tail\'s next points to the second node. Output: True ``` Example 2: ``` Input: head = [1,2] pos = 0 Explanation: The linked list contains a cycle because the tail\'s next points to the first node. Output: True ``` Example 3: ``` Input: head = [1] pos = -1 Explanation: The linked list does not contain a cycle. Output: False ``` -----Notes----- - For the linked list in the examples, the `pos` parameter denotes the index of the node (0-indexed) from which the cycle begins. If `pos` is -1, there is no cycle in the linked list. - The function should run in O(n) time complexity and use O(1) memory.","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def hasCycle(head: ListNode) -> bool: Detects if there is a cycle in the linked list. :param head: ListNode, the head of the linked list :return: Boolean, True if there is a cycle, False otherwise if not head or not head.next: return False slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"You are given a string S consisting of lowercase Latin letters. A subsequence of S is called balanced if it contains equal number of \'a\'s and \'b\'s. Your task is to determine the length of the longest balanced subsequence in the given string. Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a single string S. Output: - For each test case, output the length of the longest balanced subsequence. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ |S| ≤ 10^5 - S consists of only lowercase Latin letters (\'a\'-\'z\') Sample Input: ``` 3 abba aabb ababab ``` Sample Output: ``` 4 4 6 ``` Explanation: - For the first case, the longest balanced subsequence is \\"abba\\" itself with length 4. - For the second case, the longest balanced subsequence is \\"aabb\\" with length 4. - For the third case, the longest balanced subsequence is \\"ababab\\" with length 6.","solution":"def longest_balanced_subsequence_length(S): Given a string S, find the length of the longest balanced subsequence, which contains equal number of \'a\'s and \'b\'s. count_a = S.count(\'a\') count_b = S.count(\'b\') # The longest balanced subsequence can only be twice the number of pairs of \'a\' and \'b\' return 2 * min(count_a, count_b) def solve(T, test_cases): results = [] for S in test_cases: results.append(longest_balanced_subsequence_length(S)) return results"},{"question":"Alice is participating in a cryptography challenge where she needs to encode and decode messages using a special technique. The technique involves shifting characters in the alphabet by a fixed number of positions. This method is a variant of the Caesar Cipher. Alice needs your help to automate the process of encoding and decoding messages based on a given shift value. -----Input----- The input consists of: 1. An integer T, the number of test cases. 2. For each test case: - A character \'E\' or \'D\' indicating whether to encode or decode the message. - A string S, the message to encode or decode. The message contains only uppercase letters. - An integer K, the shift value. -----Output----- For each test case, output the encoded or decoded message on a separate line. -----Constraints----- 1 <= T <= 1000 1 <= |S| <= 100 0 <= K <= 25 -----Example----- Input: 3 E HELLO 3 D KHOOR 3 E ABC 1 Output: KHOOR HELLO BCD","solution":"def caesar_cipher_char(char, shift): Shift a character by the specified number of positions in the alphabet. Wraps around the alphabet if necessary. return chr(((ord(char) - ord(\'A\') + shift) % 26) + ord(\'A\')) def caesar_cipher(message, shift, encode=True): Encodes or decodes a message using a Caesar Cipher with the given shift. If encode is True, it encodes the message. If False, it decodes the message. if not encode: shift = -shift return \'\'.join(caesar_cipher_char(char, shift) for char in message) def process_messages(test_cases): Processes multiple test cases of encoding and decoding messages. Args: - test_cases: A list of tuples where each tuple contains: - a character \'E\' or \'D\' indicating whether to encode or decode the message - a string, the message to encode or decode - an integer, the shift value Returns: A list of results where each result is the encoded or decoded message. results = [] for action, message, shift in test_cases: encode = (action == \'E\') result = caesar_cipher(message, shift, encode) results.append(result) return results"},{"question":"Problem description. Given a sequence of cards where each card has a color on both sides, we want to determine the minimum number of card flips to ensure that all visible cards display the same color on top. Input Input description. The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a string made up of \'R\' and \'B\' where \'R\' represents the card having red color on top and \'B\' represents the card having blue color on top. Output Output description. For each test case, output a single line containing an integer denoting the minimum number of card flips required to make all cards showing the same color on top. Constraints 1 ≤ T ≤ 1000 1 ≤ length of each string ≤ 1000 String only contains \'R\' and \'B\' Example Input: 3 RBRB RRBB BBBB Output: 2 2 0 Explanation CASE 1: To make all cards show the same color, we can either flip two \'R\'s to \'B\' or two \'B\'s to \'R\'. Hence, the minimum number of flips required is 2. CASE 2: We can either flip two \'R\'s to \'B\' or two \'B\'s to \'R\'. The minimum number of flips required is 2. CASE 3: All cards are already showing the same color on top, so no flips are needed. The minimum number of flips required is 0.","solution":"def min_flips(cards): Given a string of \'R\' and \'B\', this function returns the minimum number of card flips required to make all cards show the same color on top. # Count the occurrences of \'R\' and \'B\' count_R = cards.count(\'R\') count_B = cards.count(\'B\') # The minimum number of flips needed will be the minimum of the two counts return min(count_R, count_B) def process_test_cases(T, test_cases): Processes multiple test cases and returns the list of results. results = [] for case in test_cases: results.append(min_flips(case)) return results"},{"question":"You are tasked with helping your friend set up a fantasy football league. Each player must form a team consisting of exactly 11 members from the provided pool of players. Each player in the pool has a designated skill level and a position they play on the field (e.g., goalkeeper, defender, midfielder, forward). Your friend wants to ensure that their team not only has the highest possible total skill level but also meets specific position requirements: - 1 goalkeeper - 4 defenders - 4 midfielders - 2 forwards Write a function `select_team(players)` that takes a list of tuples, where each tuple contains a player\'s name, skill level, and position, and returns a list of names of the selected 11 players maximizing the team\'s total skill level. If it\'s not possible to form a valid team, return an empty list. # Constraints - Each player\'s position will be one of the following: \'goalkeeper\', \'defender\', \'midfielder\', \'forward\'. - There will be at most 100 players. - Skill levels are integers greater than 0. - No two players have the same name. - There will be at least one valid team configuration. # Examples ```python players = [ (\\"Alice\\", 85, \\"goalkeeper\\"), (\\"Bob\\", 90, \\"defender\\"), (\\"Charlie\\", 95, \\"defender\\"), (\\"David\\", 85, \\"defender\\"), (\\"Eve\\", 80, \\"defender\\"), (\\"Frank\\", 70, \\"midfielder\\"), (\\"Grace\\", 75, \\"midfielder\\"), (\\"Heidi\\", 85, \\"midfielder\\"), (\\"Ivan\\", 90, \\"midfielder\\"), (\\"Judy\\", 60, \\"forward\\"), (\\"Mallory\\", 95, \\"forward\\"), (\\"Niaj\\", 60, \\"goalkeeper\\"), ] print(select_team(players)) ``` Output: `[\'Alice\', \'Bob\', \'Charlie\', \'David\', \'Eve\', \'Frank\', \'Grace\', \'Heidi\', \'Ivan\', \'Judy\', \'Mallory\']` In this example, `select_team(players)` returns the names of the players forming the highest skill level team while meeting the positional requirements. # Note If more than one valid team configuration is possible, return any one of them.","solution":"def select_team(players): # Separate players by position goalkeepers = [player for player in players if player[2] == \'goalkeeper\'] defenders = [player for player in players if player[2] == \'defender\'] midfielders = [player for player in players if player[2] == \'midfielder\'] forwards = [player for player in players if player[2] == \'forward\'] # Sort each position list by skill level in descending order goalkeepers.sort(key=lambda x: x[1], reverse=True) defenders.sort(key=lambda x: x[1], reverse=True) midfielders.sort(key=lambda x: x[1], reverse=True) forwards.sort(key=lambda x: x[1], reverse=True) # Check if there are enough players for each position if len(goalkeepers) < 1 or len(defenders) < 4 or len(midfielders) < 4 or len(forwards) < 2: return [] # Select the top-skilled players to form the team selected_team = [ goalkeepers[0], # 1 goalkeeper *defenders[:4], # 4 defenders *midfielders[:4], # 4 midfielders *forwards[:2] # 2 forwards ] # Extract and return the names of the selected players return [player[0] for player in selected_team]"},{"question":"Given an array of N integers and two types of queries, perform the operations as described: sum_range l r: Report the sum of the elements from index l to index r (inclusive). increment x y: Increment each element in the array from index x to index y (inclusive) by 1. Input Format The first line contains an integer N, the size of the array. The second line contains N space-separated integers which represent the elements of the array. The next line contains Q, the number of queries to process. The next Q lines contain either a sum_range or increment query as described above. Constraints 1 leq N leq 10^5 1 leq Q leq 10^5 1 leq l, r, x, y leq N 1 leq Array elements leq 10^4 Output Format For each sum_range query, output the answer in a separate line. Sample Input 5 1 2 3 4 5 6 sum_range 1 3 increment 2 4 sum_range 2 5 increment 1 5 sum_range 1 5 sum_range 3 4 Sample Output 6 18 25 9 Explanation Initially, the array is [1, 2, 3, 4, 5]. Queries are performed in the following way: sum_range 1 3 // sum of elements from index 1 to 3 is 1+2+3=6 increment 2 4 // increment elements from index 2 to 4, array becomes [1, 3, 4, 5, 5] sum_range 2 5 // sum of elements from index 2 to 5 is 3+4+5+5=17 increment 1 5 // increment all elements, array becomes [2, 4, 5, 6, 6] sum_range 1 5 // sum of all elements is 2+4+5+6+6=23 sum_range 3 4 // sum of elements from index 3 to 4 is 5+5=10","solution":"def sum_range(arr, l, r): Returns the sum of the elements from index l to r (inclusive). return sum(arr[l-1:r]) def increment(arr, x, y): Increment each element in the array from index x to index y (inclusive) by 1. for i in range(x-1, y): arr[i] += 1 def process_queries(N, arr, queries): This function processes the queries and prints the result for sum_range queries. :param N: Size of the array :param arr: List of integers :param queries: List of queries to process results = [] for query in queries: parts = query.split() if parts[0] == \\"sum_range\\": l, r = int(parts[1]), int(parts[2]) results.append(sum_range(arr, l, r)) elif parts[0] == \\"increment\\": x, y = int(parts[1]), int(parts[2]) increment(arr, x, y) return results"},{"question":"You are given two arrays, `students` and `answers`, where `students[i]` represents the number of hours a student has studied, and `answers[i]` represent the scores they achieved in a quiz. All students receive the same quiz. Due to some errors in the quiz, it has been decided that the scores will be re-calculated based on the number of hours each student studied. The new score for a student would be calculated as the maximum score among all students who studied fewer or the same number of hours as the student in question. Your task is to update the `answers` array based on the new scoring method. Example 1: Input: n = 6 students[] = {2, 4, 6, 1, 3, 5} answers[] = {10, 12, 14, 8, 11, 13} Output: answers[] = {10, 12, 14, 8, 11, 13} Explanation: Since the scores are already in order of increasing study hours, they remain the same. Example 2: Input: n = 5 students[] = {10, 20, 30, 40, 50} answers[] = {40, 30, 20, 10, 50} Output: answers[] = {40, 40, 40, 40, 50} Explanation: The new scores are the highest score up to that number of hours studied. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `adjustScores()` which takes the arrays `students[]`, `answers[]`, and their size `n` as inputs and modifies the `answers[]` array in place. Expected Time Complexity: O(nLogn). Expected Auxiliary Space: O(n). Constraints: 1 <= n <= 10^5 1 <= students[i], answers[i] <= 10^4","solution":"def adjustScores(n, students, answers): Function to adjust the score of each student based on the new methodology. :param n: int, number of students :param students: list of int, hours studied by each student :param answers: list of int, scores each student received initially # Combine students and answers into a list of tuples combined = list(zip(students, answers)) # Sort the combined list based on hours studied combined.sort() # Initialize the maximum score so far max_score = -float(\'inf\') # Traverse the sorted list and update the answers for i in range(n): max_score = max(max_score, combined[i][1]) combined[i] = (combined[i][0], max_score) # Put the adjusted scores back in the answers array in original order student_to_score = {student: score for student, score in combined} for i in range(n): answers[i] = student_to_score[students[i]] # Example usage n1 = 6 students1 = [2, 4, 6, 1, 3, 5] answers1 = [10, 12, 14, 8, 11, 13] adjustScores(n1, students1, answers1) print(answers1) # Output should be [10, 12, 14, 8, 11, 13] n2 = 5 students2 = [10, 20, 30, 40, 50] answers2 = [40, 30, 20, 10, 50] adjustScores(n2, students2, answers2) print(answers2) # Output should be [40, 40, 40, 40, 50]"},{"question":"A delivery company wants to optimize its route planning by determining whether there exists a loop in the route that could result in infinite travels between cities. Specifically, they want to determine if there is a cycle in their planned delivery route between different cities. The company has a planned route consisting of N cities and M direct delivery routes between cities. The delivery routes are represented as an undirected graph where each city is a node and each delivery route is an edge. Your task is to determine whether there is a cycle in this graph (i.e., if the delivery route forms a loop). # Input The input consists of a single test case formatted as follows: ``` N M U1 V1 U2 V2 ... UM VM ``` - The first line consists of two integers N (1 leq N leq 100,000) and M (0 leq M leq 100,000), where N is the number of cities and M is the number of direct delivery routes. - Each of the next M lines consists of two integers Ui and Vi (1 leq Ui, Vi leq N), which means there is a direct delivery route between city Ui and city Vi. # Output If there is a cycle in the delivery route, output \\"YES\\". Otherwise, output \\"NO\\". # Examples Example 1 Input: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output: ``` YES ``` Example 2 Input: ``` 4 3 1 2 2 3 3 4 ``` Output: ``` NO ``` # Explanation In Example 1, the delivery routes form a cycle (1-2-3-4-1). Therefore, the output is \\"YES\\". In Example 2, the delivery routes do not form a cycle. Thus, the output is \\"NO\\". # Note - An undirected graph contains a cycle if there is a path that starts from a node and comes back to the same node without traversing the same edge twice. This should be detected efficiently given the constraints.","solution":"def detect_cycle(n, m, edges): from collections import defaultdict def dfs(v, parent): visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: if dfs(neighbor, v): return True elif neighbor != parent: return True return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) for i in range(1, n + 1): if not visited[i]: if dfs(i, -1): return \\"YES\\" return \\"NO\\""},{"question":"Mary loves playing with strings and numbers. She has found a unique way to look at strings by associating numbers with each character. She assigns each lowercase letter of the alphabet a distinct prime number, starting from the smallest prime number, 2. For instance: \'a\' -> 2, \'b\' -> 3, \'c\' -> 5, \'d\' -> 7, and so on up to \'z\'. Mary calls a string \\"Product-Equalizable\\" if the product of the prime numbers associated with the characters in its first half is equal to the product of the prime numbers in its second half. For instance, the string \\"emmo\\" is Product-Equalizable because: \'e\' -> 11, \'m\' -> 41 : 11 * 41 = 451 \'m\' -> 41, \'o\' -> 47 : 41 * 47 = 1927 The products of \'emm\' and \'mo\' are equal when considering their associated prime values. Mary wants to break down the string she has into the minimum number of substrings where each substring is Product-Equalizable. If this is not possible for a given string, she wants to know as well. Write a function that takes an integer T as the number of test cases and an array of strings. For each string, output the minimum number of Product-Equalizable substrings it can be divided into. If it is not possible to divide a string into Product-Equalizable substrings, return -1 for that string. # Input: - An integer T, the number of test cases. - An array of strings where each string consists of lowercase alphabets only. # Output: For each test case, output the minimum number of Product-Equalizable substrings. If it’s not possible, output -1. # Constraints: 1. ( 1 le T le 10^5 ) 2. ( 1 le |S| le 10^5 ) 3. S consists of lowercase alphabets only. 4. The sum of |S| over all test cases will not exceed ( 10^6 ) # Example Input: 3 aabb cdeffedc abcdef # Example Output: -1 1 -1 # Explanation: - Example 1: The string \\"aabb\\" cannot be divided into Product-Equalizable substrings. - Example 2: The string \\"cdeffedc\\" is already Product-Equalizable. - Example 3: The string \\"abcdef\\" cannot be divided into Product-Equalizable substrings.","solution":"def get_prime_numbers(n): Generates a list of the first n prime numbers using the Sieve of Eratosthenes. primes = [] candidate = 2 while len(primes) < n: is_prime = all(candidate % prime != 0 for prime in primes) if is_prime: primes.append(candidate) candidate += 1 return primes def is_product_equalizable(s, prime_map): Checks if a given string s can be divided into Product-Equalizable substrings. Returns the minimum number of such substrings. n = len(s) if n % 2 != 0: return -1 # Odd length strings can\'t be perfectly split in the middle # Split the string into two halves first_half = s[:n//2] second_half = s[n//2:] # Calculate the products of prime values in both halves product_first_half = 1 product_second_half = 1 for char in first_half: product_first_half *= prime_map[char] for char in second_half: product_second_half *= prime_map[char] # If products are equal, it\'s already product-equalizable if product_first_half == product_second_half: return 1 else: return -1 def min_product_equalizable_substrings(t, strings): For each string in strings, determine the minimum number of Product-Equalizable substrings it can be divided into, or -1 if not possible. # Calculate the prime numbers for each alphabet letter primes = get_prime_numbers(26) prime_map = {chr(i + ord(\'a\')): primes[i] for i in range(26)} results = [] for s in strings: result = is_product_equalizable(s, prime_map) results.append(result) return results # Example input T = 3 strings = [\\"aabb\\", \\"cdeffedc\\", \\"abcdef\\"] # Function call result = min_product_equalizable_substrings(T, strings) print(result) # Output: [-1, 1, -1]"},{"question":"The International Space Station (ISS) is monitoring the traffic of alien spacecrafts in the galaxy. The spacecrafts are sailing in a straight line at fixed intervals. The ISS has detected a series of coordinates representing positions of these spacecrafts along a 1D path at specific timestamps. Each coordinate is unique and sorted by timestamp. The ISS needs to estimate the minimum additional distance necessary to cover any potential narrow gaps between the detected spacecraft positions. To determine if a position is a narrow gap, you should find the smallest gap between two consecutive coordinates and sum all such gaps. Write a function to help the ISS calculate this minimal distance. ------ Input ------ The first line of input contains an integer N denoting the number of detected coordinates. The second line contains N space-separated integers denoting the positions of the spacecrafts detected. ------ Output ------ Print the minimum additional distance necessary to cover all gaps. ------ Constraints ------ 2 ≤ N ≤ 1000 1 ≤ P_i ≤ 10000 ----- Sample Input 1 ------ 5 1 3 7 10 15 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ The minimum gap between any two consecutive coordinates is 2 (between 1 and 3). Thus, the sum of the minimal additional distance necessary to cover each gap is 2.","solution":"def calculate_min_distance(n, positions): Calculate the minimum additional distance necessary to cover all narrow gaps. positions.sort() min_gap = float(\'inf\') for i in range(1, n): gap = positions[i] - positions[i - 1] if gap < min_gap: min_gap = gap return min_gap"},{"question":"Aisha is trying to master dynamic programming concepts and came across an interesting problem involving palindromic substrings. The problem is as follows: Given a string S of length N, she needs to determine the minimum number of cuts required to partition the string into substrings such that each substring is a palindrome. Your task is to write a function that takes the string S and returns the minimum number of cuts needed for palindromic partitioning. Input First line of input contains an integer N which represents the length of the string. Second line of input contains the string S of length N. The string consists of lowercase English letters. Output An integer representing the minimum number of cuts required to partition the string such that each substring is a palindrome. Constraints 1 ≤ N ≤ 1000 SAMPLE INPUT 7 abcbmna SAMPLE OUTPUT 1 Explanation In the given sample case you can make the entire string palindromic by partitioning as follows: Method 1: \'abcbmna\' can be partitioned into the substrings \'abcba\' and \'na\'. Both \'abcba\' and \'na\' are palindromes, so only 1 cut is needed. Method 2: \'abcbmna\' can be partitioned into the substrings \'a\' and \'bcbmna\'. The entire right substring \'bcbmna\' is not a palindrome, so this method would require more cuts. Thus, the minimum number of cuts required is 1.","solution":"def minPalPartion(S): n = len(S) C = [0] * n P = [[False] * n for _ in range(n)] for i in range(n): P[i][i] = True for L in range(2, n + 1): for i in range(n - L + 1): j = i + L - 1 if L == 2: P[i][j] = (S[i] == S[j]) else: P[i][j] = (S[i] == S[j]) and P[i + 1][j - 1] for i in range(n): if P[0][i] == True: C[i] = 0 else: C[i] = float(\'inf\') for j in range(i): if P[j + 1][i] == True and 1 + C[j] < C[i]: C[i] = 1 + C[j] return C[n - 1]"},{"question":"Write a function that takes in an array of integers, and returns an array of integers where each element is the product of all the elements in the input array except the element at the same index. For example: Example 1: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Example 2: Input: [0, 1, 2, 3, 4] Output: [24, 0, 0, 0, 0] Note: - The length of the array will always be at least 1. - All elements in the input array are guaranteed to be integers (both positive and negative). - You must solve it without using division and in O(n) time complexity.","solution":"def product_except_self(nums): Returns an array where each element is the product of all the elements in the input array except the element at the same index. n = len(nums) # Initialize the output array with 1s output = [1] * n # Calculate the prefix products prefix_product = 1 for i in range(n): output[i] = prefix_product prefix_product *= nums[i] # Calculate the suffix products suffix_product = 1 for i in range(n-1, -1, -1): output[i] *= suffix_product suffix_product *= nums[i] return output"},{"question":"You are organizing a competition where participants are given the task of decorating a cake. Each participant can decorate the cake using exactly one type of decoration. The competition rules dictate that each type of decoration must be used by a contiguous group of participants standing in a line. Participants are numbered from 1 to n, and the i-th participant has a popularity score p_i. You want to select the best possible group of participants such that all of them use the same type of decoration and the sum of their popularity scores is maximized. Input The first line contains an integer n (1 ≤ n ≤ 200,000) — the number of participants. The second line contains n integers p_1, p_2, ..., p_n (−10^9 ≤ p_i ≤ 10^9) — the popularity scores of the participants. Output Print a single integer — the maximum possible sum of popularity scores of a contiguous group of participants using the same type of decoration. If all scores are negative, assuming at least one type must be used, the result will be 0 (indicating separating the contest for this group). Examples Input 5 -1 2 -3 4 5 Output 9 Input 8 -2 -3 4 -1 -2 1 5 -3 Output 7 Input 3 -1 -2 -3 Output 0 Note In the first test, the optimal group is participants 4 and 5, giving a total sum of 9. In the second test, the optimal group is participants 3 through 7, giving a total sum of 7. In the third test, all popularity scores are negative, so the optimal solution is selecting no participants, which gives the result 0.","solution":"def max_possible_popularity_sum(n, popularity_scores): Returns the maximum possible sum of popularity scores of a contiguous group of participants using the same type of decoration. If all scores are negative, the result is 0. max_ending_here = 0 max_so_far = 0 for score in popularity_scores: max_ending_here = max(0, max_ending_here + score) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a sequence of questions from a database. Each question is represented by a unique integer ID and tagged with multiple categories. The categories relate the questions to different topics, and each question can have multiple tags. Your task is to implement a system that efficiently organizes and retrieves questions by their tags. You need to support two key operations: 1. Adding a new question with its associated tags. 2. Querying for a set of questions that contain all of a given list of tags. # Input The first line contains an integer ( Q ) denoting the number of operations. The following ( Q ) lines describe the operations. Each operation is one of the following: 1. `ADD id k tag_1 tag_2 ... tag_k` - add a question with ID `id` and `k` associated tags. 2. `QUERY t tag_1 tag_2 ... tag_t` - retrieve all question IDs that contain all `t` given tags. Output the IDs in ascending order. # Output For each `QUERY` operation, output a single line containing space-separated question IDs that match all the given tags. If no such question exists, output `-1`. # Constraints - ( 1 leq Q leq 10^5 ) - ( 1 leq ID leq 10^6 ) - ( 1 leq k, t leq 10 ) - Tag names consist of lowercase letters and are at most 20 characters long. - Each question will have unique ID for the `ADD` operations. # Example Input ``` 5 ADD 1 2 math science ADD 2 3 math physics chemistry ADD 3 2 science chemistry QUERY 2 math science QUERY 1 chemistry ``` Output ``` 1 2 3 ``` # Explanation 1. The first operation adds question `1` with tags `math` and `science`. 2. The second operation adds question `2` with tags `math`, `physics`, and `chemistry`. 3. The third operation adds question `3` with tags `science` and `chemistry`. 4. The fourth operation queries for questions with both `math` and `science` tags, returning question `1`. 5. The fifth operation queries for questions with `chemistry` tag, returning questions `2` and `3`, sorted in ascending order.","solution":"from collections import defaultdict class QuestionTagSystem: def __init__(self): self.tag_to_questions = defaultdict(set) def add_question(self, question_id, tags): for tag in tags: self.tag_to_questions[tag].add(question_id) def query(self, tags): if not tags: return [] # Get the intersection of question sets for all provided tags result_set = self.tag_to_questions[tags[0]] for tag in tags[1:]: result_set = result_set.intersection(self.tag_to_questions[tag]) # Convert to a sorted list sorted_result = sorted(result_set) return sorted_result if sorted_result else [-1] def process_operations(operations): system = QuestionTagSystem() results = [] for operation in operations: parts = operation.split() if parts[0] == \'ADD\': question_id = int(parts[1]) tags = parts[3:] system.add_question(question_id, tags) elif parts[0] == \'QUERY\': tags = parts[2:] result = system.query(tags) results.append(\' \'.join(map(str, result))) return results"},{"question":"In a small library, books are arranged on shelves in a specific order. Each book has a unique identifier and the shelves follow a particular pattern. Each set of shelves is numbered 1 to N, and each shelf in the set can hold a certain number of books. The pattern is such that shelf 1 can hold 1 book, shelf 2 can hold 2 books, shelf 3 can hold 3 books, and so on up to shelf N which can hold N books. However, when a book is removed from any shelf, all books to the right of it on the same shelf must be shifted one position to the left to fill the gap. Given the initial arrangement of books, determine the final configuration of the shelves after a sequence of remove operations. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of multiple lines. The first line contains a single integer N, which denotes the number of shelves. - The next N lines each contain a series of space-separated integers representing the unique identifiers of books on that shelf in their initial order. - The next line contains an integer Q, the number of remove operations. - The following Q lines each contain two space-separated integers i and j, indicating that the book in the j-th position on the i-th shelf is to be removed. ------ Output Format ------ For each test case, output the final configuration of the shelves after performing all the remove operations. Each shelf\'s configuration should be printed on a new line. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Q ≤ 100 1 ≤ i ≤ N 1 ≤ j ≤ length of shelf i ----- Sample Input 1 ------ 2 3 1 2 3 4 5 6 2 1 1 3 2 4 1 2 3 4 5 6 7 8 4 2 1 2 2 1 1 3 3 ----- Sample Output 1 ------ 3 2 4 6 7 8 5 ----- Explanation 1 ------ Test Case 1: Initial shelves: 1 2 3 4 5 6 - Remove book at shelf 1, position 1: no change (shelf becomes empty) - Remove book at shelf 3, position 2: 4 6 Final shelves: 3 2 4 6 Test Case 2: Initial shelves: 1 2 3 4 5 6 7 8 - Remove book at shelf 2, position 1: 3 4 - Remove book at shelf 2, position 2: 3 - Remove book at shelf 1, position 1: (shelf becomes empty) - Remove book at shelf 3, position 3: 5 6 8 Final shelves: (empty) 3 5 6 8","solution":"def update_shelves_after_removals(shelves, removals): for i, j in removals: shelves[i-1].pop(j-1) return shelves def final_configuration_after_operations(test_cases): results = [] for shelves, removals in test_cases: updated_shelves = update_shelves_after_removals(shelves, removals) results.append(updated_shelves) return results"},{"question":"Write a function to check if a given list of n words can form a valid word square. A word square is an arrangement of words in a grid, such that the words read the same horizontally and vertically. In other words, the ith row and ith column should be the same. Example Input: words = [ \\"ball\\", \\"area\\", \\"lead\\", \\"lady\\" ] Output: true Explanation: The input words form a valid word square: b a l l a r e a l e a d l a d y Input: words = [ \\"ball\\", \\"area\\", \\"lead\\", \\"lad\\" ] Output: false Explanation: The input words form an invalid word square: b a l l a r e a l e a d l a d The fourth row has fewer characters than the fourth column. Function Description Complete the function word_square below. word_square has the following parameters: - string words[n]: a list of strings, each representing a word Return: - boolean: true if the given words form a valid word square, otherwise false Input Format The first line contains a single integer, n, the number of words in the list. Each of the next n lines contains a single string, words[i]. Constraints 1 leq n leq 500 1 leq text{len(words[i])} leq 500 Each word consists of lowercase English letters only. Sample Input STDIN Function ----- -------- 4 words[] size n = 4 ball words = [\'ball\', \'area\', \'lead\', \'lady\'] area lead lady Sample Output true Explanation The words read the same horizontally and vertically. The first row and first column both have the word \'ball\', the second row and second column both have the word \'area\', etc.","solution":"def word_square(words): Checks if the given list of words forms a valid word square. n = len(words) for i in range(n): # Check if the current word\'s length matches the expected length if len(words[i]) != n: return False for j in range(len(words[i])): if j < n and i < len(words[j]) and words[i][j] != words[j][i]: return False return True"},{"question":"You are given an array of n integers representing the intelligence level of various wizards at Hogwarts. The array is indexed from 0 to n-1. Now, Harry wants to identify any subarrays where the number of distinct intelligence levels is exactly k. Given the array and an integer k, return the number of such subarrays. Formally, a subarray is a contiguous part of the array, and it has exactly k distinct elements if there are exactly k different numbers present in that subarray. Input - The first line contains two space-separated integers n (1 ≤ n ≤ 100000) and k (1 ≤ k ≤ n). - The second line contains n space-separated integers representing the intelligence levels of the wizards. Output - Output a single integer representing the number of subarrays with exactly k distinct elements. Examples Input 5 2 1 2 1 2 3 Output 7 Input 6 3 1 2 1 3 4 3 Output 4 Input 4 1 1 2 3 4 Output 4 Explanation In the first example, the subarrays with exactly 2 distinct elements are: - [1, 2] - [2, 1] - [1, 2] - [2, 3] - [1, 2, 1] - [2, 1, 2] - [1, 2, 3] So the output is 7.","solution":"def count_subarrays_with_k_distinct(arr, k): from collections import defaultdict def at_most_k_distinct(k): if k == 0: return 0 count_map = defaultdict(int) left = 0 count = 0 for right in range(len(arr)): count_map[arr[right]] += 1 while len(count_map) > k: count_map[arr[left]] -= 1 if count_map[arr[left]] == 0: del count_map[arr[left]] left += 1 count += right - left + 1 return count return at_most_k_distinct(k) - at_most_k_distinct(k - 1)"},{"question":"Romina is learning about data streams in her computer science class. She decides to implement a basic integer stream processor that supports a few different operations: insertion of a new integer, finding the current median, and calculating the average of all inserted integers so far. The stream processor should maintain the integers in such a way that it can efficiently answer queries about the median and average. The median of a stream with an odd number of integers is the middle integer when they are sorted, and for an even number of integers, it is the average of the two middle integers. The average is simply the sum of all integers divided by the number of integers. Help Romina by implementing this stream processor which supports the following operations: 1. `insert(x)` - Insert the integer x into the stream. 2. `findMedian()` - Return the median of the current stream of integers. 3. `findAverage()` - Return the average of the current stream of integers. The input starts with the number of operations q (1 ≤ q ≤ 105). Each of the following q lines describes an operation in one of the following formats: - \\"insert x\\" where x is an integer (|x| ≤ 109). - \\"median\\" to query the median of the stream. - \\"average\\" to query the average of the stream. Output the result of each \\"median\\" and \\"average\\" operation. Each result should be on a new line, with medians printed as integers (or floating-point if necessary for even cardinalities) and averages printed as floating-point numbers with exactly 6 decimal places. Examples Input 7 insert 1 insert 2 median insert 3 median average insert 4 average Output 2 2 2.000000 10.000000 2.500000","solution":"import bisect class StreamProcessor: def __init__(self): self.nums = [] self.total_sum = 0 def insert(self, x): bisect.insort(self.nums, x) self.total_sum += x def findMedian(self): n = len(self.nums) if n % 2 == 1: return float(self.nums[n // 2]) else: return (self.nums[n // 2 - 1] + self.nums[n // 2]) / 2 def findAverage(self): if len(self.nums) == 0: return 0.0 return self.total_sum / len(self.nums)"},{"question":"A company is planning to build a linear array of N solar panels on the roof of their building. Each solar panel has an efficiency value given in an array E of size N. Due to technical constraints, it\'s required that any two adjacent solar panels in the array must have a difference in efficiency that does not exceed a given threshold K. The task is to determine the maximum number of solar panels that can be installed while satisfying this constraint. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ 10^9 - 1 ≤ E_i ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N K E_1 E_2 ... E_N -----Output----- Print the maximum number of solar panels that can be installed in a valid configuration. -----Sample Input----- 5 3 10 12 14 9 18 -----Sample Output----- 3 A valid configuration is using the solar panels with efficiencies 10, 12, and 14.","solution":"def max_solar_panels(N, K, E): Returns the maximum number of solar panels that can be installed while satisfying the constraint that any two adjacent solar panels in the array must have a difference in efficiency that does not exceed K. # Step 1: Sort the efficiencies array E.sort() # Step 2: Use a sliding window approach to find the longest subarray max_length = 1 start = 0 for end in range(1, N): while E[end] - E[start] > K: start += 1 max_length = max(max_length, end - start + 1) return max_length # Read from standard input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) E = list(map(int, data[2:])) print(max_solar_panels(N, K, E))"},{"question":"In a distant land, there is a kingdom where magic is controlled through secret codes. Each secret code is a word, and each word can summon a magical artifact. However, to ensure that no two sorcerers summon the same artifact at the same time, a unique rule is enforced: no two secret codes can be anagrams of each other. You, as the kingdom\'s royal programmer, have been tasked with creating a system to check if any two secret codes in a list are anagrams of each other, to prevent them from being used at the same time. Given a list of secret codes, determine if there are any pairs of codes that are anagrams of each other. If there are such pairs, output \\"Anagrams found\\". If there are no anagrams, output \\"Unique codes\\". Input: The first line contains an integer N, the number of secret codes. The next N lines each contain a single secret code. Output: A single line containing \\"Anagrams found\\" if any two codes are anagrams, or \\"Unique codes\\" if none are. Constraints: 1 ≤ N ≤ 10^5 1 ≤ length of each code ≤ 100 \'all characters in each code are lowercase English alphabets\' SAMPLE INPUT 5 listen silent enlist hello world SAMPLE OUTPUT Anagrams found Explanation In the given input, the codes \\"listen\\", \\"silent\\", and \\"enlist\\" are anagrams of each other. Hence, the output is \\"Anagrams found\\".","solution":"def check_anagrams(secret_codes): Determines if any two secret codes in the list are anagrams. Args: secret_codes: List of strings, where each string is a secret code. Returns: \\"Anagrams found\\" if any two codes are anagrams, else \\"Unique codes\\". seen = set() for code in secret_codes: sorted_code = \'\'.join(sorted(code)) if sorted_code in seen: return \\"Anagrams found\\" seen.add(sorted_code) return \\"Unique codes\\" # Example usage: # N = 5 # secret_codes = [\\"listen\\", \\"silent\\", \\"enlist\\", \\"hello\\", \\"world\\"] # print(check_anagrams(secret_codes)) # Output: Anagrams found"},{"question":"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different. You may assume that all input numbers are non-negative. For example: Input: candidates = [2,3,6,7], target = 7 Output: [[2,2,3],[7]] Input: candidates = [2,3,5], target = 8 Output: [[2,2,2,2],[2,3,3],[3,5]]","solution":"def combination_sum(candidates, target): Returns a list of all unique combinations of candidates where the chosen numbers sum to target. The same number may be chosen from candidates an unlimited number of times. result = [] def backtrack(remain, combo, start): if remain == 0: result.append(list(combo)) return elif remain < 0: return for i in range(start, len(candidates)): combo.append(candidates[i]) backtrack(remain - candidates[i], combo, i) combo.pop() backtrack(target, [], 0) return result"},{"question":"You are given a list of integers and you need to write a function that finds the second largest number in the list. Your function should return `None` if there is no second largest number (for example, if the list contains fewer than 2 unique numbers). To clarify, here\'s how your function should work: - For the list `[4, 6, 1, 7, 6, 2, 6]`, it should return `6` because it is the second largest unique number. - For the list `[4]`, it should return `None` because there is no second largest number. - For the list `[7, 7, 7]`, it should also return `None` as there aren\'t two unique numbers.","solution":"def second_largest(numbers): Returns the second largest number in the list of integers. If there is no second largest number, returns None. if len(set(numbers)) < 2: return None unique_numbers = list(set(numbers)) unique_numbers.sort(reverse=True) return unique_numbers[1]"},{"question":"Problem Statement You are tasked with organizing a company\'s network of computers. The company has a structured hierarchy, where each employee is connected to exactly one manager, and the CEO has no manager. The connection forms a tree-like structure. Each computer connected to the network has an integer ID and connects to the computer of the manager. Your task is to determine the maximum distance between any two computers in the network. Distance between two computers is defined as the number of connections in the shortest path that connects the two computers. Input The input consists of a single dataset formatted as follows: > n > u_2 v_2 > u_3 v_3 > : > : > u_n v_n The first line contains an integer n (2 le n le 10^5), which denotes the number of computers in the network including the CEO\'s computer. Each of the next n-1 lines contains two integers u_i and v_i (1 le u_i, v_i le n), where u_i represents a computer and v_i represents the computer of its manager. The computers (u_i) are indexed by integers 1 to n. It is guaranteed that the given structure forms a tree rooted at the CEO\'s computer. Output Output a single integer denoting the maximum distance between any two computers in the network. Constraints - The number of computers will not exceed 100,000. - Each computer ID is a positive integer between 1 and n. Sample Input 1 6 1 2 1 3 2 4 3 5 3 6 Sample Output 1 4 Sample Input 2 5 1 2 2 3 2 4 4 5 Sample Output 2 3 Explanation In the first sample test case, the network hierarchy is as follows: ``` 1 / 2 3 / / 4 5 6 ``` The maximum distance between any two computers is between computer 4 and computer 5 (or computer 4 and computer 6) which is 4 connections (4 -> 2, 2 -> 1, 1 -> 3, 3 -> 5). In the second sample test case, the network hierarchy is: ``` 1 | 2 / 3 4 | 5 ``` The maximum distance is between computer 3 and computer 5, which is 3 connections (3 -> 2, 2 -> 4, 4 -> 5).","solution":"def max_distance(n, edges): from collections import defaultdict, deque def bfs(start_node): max_dist = 0 farthest_node = start_node visited = [False] * (n + 1) queue = deque([(start_node, 0)]) visited[start_node] = True while queue: node, dist = queue.popleft() for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) if dist + 1 > max_dist: max_dist = dist + 1 farthest_node = neighbor return farthest_node, max_dist tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Perform BFS twice to get the maximum diameter of the tree. start_node = 1 farthest_node, _ = bfs(start_node) _, max_dist = bfs(farthest_node) return max_dist"},{"question":"A well-established e-commerce company, FullCart, has a demand to optimize their product selection on the homepage. They have n products to choose from, and each product has a designated rating score. FullCart’s marketing team wants to ensure that the homepage displays exactly k products and that the total rating score of the products on the homepage is maximized. FullCart has decided to impose some constraints due to layout restrictions: no more than m consecutive products from the original sorted list of products can be chosen. This means if the company has a sequence of products [P1, P2, ..., Pn], and P_i is chosen, then P_{i+m+1}, P_{i+m+2}, ... are possible choices for any subsequent product on the homepage such that their total selections count to k products. Given the number n of products, the constraint m, the exact number k of products to be displayed on the homepage, and the rating values of the n products (where the rating values are provided in sorted order), determine the maximum total rating score of the selected k products. Function Description Complete the showcase_products function which should return an integer representing the maximum possible rating score. showcase_products has the following parameter(s): - an integer n: the number of products - an integer m: the maximum number of consecutive products that cannot be bypassed - an integer k: the exact number of products to display - an integer array ratings: an array where the element at index i represents the rating of the product i Input Format The first line contains three space-separated integers, n (number of products), m (break constraint), and k (number of products to display). The second line contains n space-separated integers representing the ratings of the products in sorted order. Constraints 1leq nleq 10^4 1leq mleq n-1 1leq kleq n 1leq text{rating value of any product} leq 10^3 Output Format Print a single integer denoting the maximum possible total rating score of the selected k products that satisfies the given constraints. Sample Input 0 7 2 3 1 2 3 4 5 6 7 Sample Output 0 18 Explanation 0 There are 7 products, and the company wants to display exactly 3 products ensuring no more than 2 consecutive products can be chosen from the sorted list. One possible selection is choosing products with ratings 5, 6, and 7 leading to a maximum possible rating score of 18. This selection ensures that the constraint of not exceeding 2 consecutive products is always met. Sample Input 1 5 1 2 2 4 6 8 10 Sample Output 1 18 Explanation 1 There are 5 products and FullCart wants to display exactly 2 products ensuring no more than 1 consecutive product can be chosen. One possible selection is choosing products with ratings 6 and 10 leading to a maximum possible rating score of 18. This meets the constraint of not exceeding 1 consecutive product.","solution":"def showcase_products(n, m, k, ratings): Return the maximum possible rating score for displaying exactly k products. Parameters: n (int): Total number of products. m (int): Maximum number of consecutive products to bypass. k (int): Number of products to display. ratings (list): A list of integers representing the ratings of products. Returns: int: Maximum possible rating score for the selected k products. # Dynamic programming table where dp[i][j] represents the max score by selecting # j products from the first i+1 products with the given constraints. dp = [[0] * (k + 1) for _ in range(n + 1)] # Initialize the first product selection possibilities for i in range(1, n + 1): dp[i][0] = 0 # Fill the dynamic programming table for i in range(1, n + 1): for j in range(1, k + 1): max_score = 0 # Check all possible previous selections considering the constraint m. for x in range(max(0, i - m), i): max_score = max(max_score, dp[x][j - 1] + ratings[i - 1]) dp[i][j] = max_score # Max value for selecting k products ending at any point max_rating_score = 0 for i in range(k, n + 1): max_rating_score = max(max_rating_score, dp[i][k]) return max_rating_score"},{"question":"A company needs to track the stock prices of multiple companies over a series of days to determine which companies\' stock prices are non-decreasing over the given period. You are given the daily stock prices of `m` companies over `n` days. Your task is to identify which companies\' stock prices do not decrease on any day over the specified period. Input The first line of input contains two integers `m` and `n` (1 ≤ m, n ≤ 1000), representing the number of companies and the number of days, respectively. The next `m` lines each contain `n` integers. The i-th line contains the stock prices of the i-th company over the `n` days. Output Print the indices (1-based) of all companies whose stock prices do not decrease over the n days. Print the indices in ascending order. If no such company exists, print -1. Examples Input 3 5 100 101 102 102 103 110 109 108 107 105 95 95 96 96 97 Output 1 3 Input 2 4 50 49 48 47 60 61 60 59 Output -1","solution":"def non_decreasing_stock_prices(m, n, prices): This function returns the 1-based indices of companies whose stock prices do not decrease over n days. If no such company exists, returns -1. :param m: number of companies :param n: number of days :param prices: list of lists of integers, where each inner list contains stock prices of a company over n days :return: a list of 1-based indices or [-1] if no company is found non_decreasing_companies = [] for i in range(m): is_non_decreasing = True for j in range(n-1): if prices[i][j] > prices[i][j+1]: is_non_decreasing = False break if is_non_decreasing: non_decreasing_companies.append(i + 1) # Convert to 1-based index if not non_decreasing_companies: return [-1] return non_decreasing_companies"},{"question":"# Background String compression algorithms are essential in reducing the amount of memory space used for storing large blocks of text. One simple form of string compression is run-length encoding (RLE), where consecutive identical elements are replaced with a single instance of the element followed by a count of repetitions. # Task You need to implement a function that performs run-length encoding on a given string. The function should compress the string by replacing sequences of identical consecutive characters with that character followed by the count of repetitions. If a character appears only once consecutively, it should not be followed by a number. For example, the string `aaabbccccd` would be compressed to `a3b2c4d`. Implement a function named `compress` with the following signature: ```python def compress(s: str) -> str: ``` Examples ```python compress(\\"aabcccccaaa\\") # returns \\"a2b1c5a3\\" compress(\\"abcd\\") # returns \\"abcd\\" compress(\\"wwwwwwww\\") # returns \\"w8\\" compress(\\"\\") # returns \\"\\" compress(\\"a\\") # returns \\"a\\" compress(\\"aa\\") # returns \\"a2\\" ``` Notes: - The input string `s` will only contain lowercase English letters. - The function should return an empty string if the input string is empty. - Ensure that the compressed string is as short as possible. If a character appears consecutively only once, it should just be that character, not followed by the number 1. For instance, \\"abc\\" should remain \\"abc\\" not \\"a1b1c1\\".","solution":"def compress(s: str) -> str: if not s: return \\"\\" compressed = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: if count > 1: compressed.append(f\\"{s[i-1]}{count}\\") else: compressed.append(s[i-1]) count = 1 if count > 1: compressed.append(f\\"{s[-1]}{count}\\") else: compressed.append(s[-1]) return \\"\\".join(compressed)"},{"question":"You are given an array of integers. Find the length of the longest subarray that contains only even numbers. -----Input----- The first line contains an integer n (1 le n le 1000) - the size of the array. The second line contains n integers separated by space that form the array. Each integer ranges from 1 le a[i] le 10^5. -----Output----- Print the length of the longest subarray that contains only even numbers. -----Examples----- Input 10 1 2 4 6 3 8 10 12 1 2 Output 3 Input 6 1 3 5 7 9 11 Output 0 -----Note----- In the first example, the longest subarray that contains only even numbers is [8, 10, 12] which has a length of 3. In the second example, there are no even numbers in the array, so the output is 0.","solution":"def longest_even_subarray_length(arr): Function to find the length of the longest subarray that contains only even numbers. max_length = 0 current_length = 0 for num in arr: if num % 2 == 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"In a distant kingdom, there is a festival of lights held annually. Every year, the organizing committee hires volunteers to string lights up in different zones. They are very particular about the arrangement and present a challenge to the volunteers: they have to string the lights in such a way that no two consecutive zones have more than a certain number of bulbs. Given the number of bulbs each zone requires, volunteers need to figure out a valid arrangement or report that it is impossible to do so. Specifically, you are given n integers representing the number of bulbs needed in each of the n zones in a linear sequence. You must check if there exists a way to order the bulbs such that the difference in the number of bulbs between any two consecutive zones does not exceed a given integer d. If it is possible, you should provide the order of the bulbs for the zones; otherwise, you should return that it is not possible. -----Input----- The first line contains an integer n (1 leq n leq 10^5), the number of zones, and an integer d (0 leq d leq 10^5), the maximum allowed difference in the number of bulbs between two consecutive zones. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^5), where a_i is the number of bulbs required for the i-th zone. -----Output----- If it is not possible to arrange the zones according to the given conditions, output “impossible”. Otherwise, output “possible” on the first line. On the second line, print the n integers in the order that satisfies the condition. -----Examples----- Sample Input 1: 5 3 1 4 5 2 6 Sample Output 1: possible 1 2 4 5 6 Sample Input 2: 3 1 1 2 3 Sample Output 2: possible 1 2 3 Sample Input 3: 3 0 1 2 3 Sample Output 3: impossible","solution":"def organize_bulbs(n, d, bulbs): Determines if it is possible to arrange bulbs in zones with the given constraints and returns the arrangement if possible. bulbs.sort() for i in range(1, n): if bulbs[i] - bulbs[i - 1] > d: return \\"impossible\\" return \\"possible\\", bulbs"},{"question":"Given a string of lowercase characters. The task is to calculate the frequency of each character and return a list of tuples sorted by the frequency of the characters in descending order. If two characters have the same frequency, they should be sorted in alphabetical order. Example 1: Input: \\"aabbcc\\" Output: [(\'a\', 2), (\'b\', 2), (\'c\', 2)] Explanation: Here we have a string \\"aabbcc\\" where \'a\', \'b\', and \'c\' each appear 2 times. So the result is [(\'a\', 2), (\'b\', 2), (\'c\', 2)]. Example 2: Input: \\"abbccc\\" Output: [(\'c\', 3), (\'b\', 2), (\'a\', 1)] Explanation: Here we have a string \\"abbccc\\" where \'c\' appears 3 times, \'b\' appears 2 times, and \'a\' appears 1 time. So the result is [(\'c\', 3), (\'b\', 2), (\'a\', 1)]. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function frequency_count() that takes a string (str) and returns the list of tuples with character frequencies sorted as mentioned. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ length of the string ≤ 10^5","solution":"def frequency_count(s): Returns a list of tuples with the frequency of each character sorted by frequency in descending order. If two characters have the same frequency, they are sorted in alphabetical order. from collections import Counter # Counting the frequency of each character freq_counter = Counter(s) # Sorting the counter by frequency first (in descending order) and then by character (in ascending order) sorted_freq = sorted(freq_counter.items(), key=lambda x: (-x[1], x[0])) return sorted_freq"},{"question":"You are given an integer N which represents the number of nodes in a tree. Construct a tree with N nodes, such that each node has a unique integer label from 1 to N, and the tree has the following property: * The depth of each node is less than or equal to 2. (The root node is at depth 0, its children are at depth 1, and so on.) Constraints * All values in input are integers. * 3 ≤ N ≤ 100 Input Input is given from Standard Input in the following format: N Output In the first line, print the number of edges, M, in the tree you constructed. In each of the following M lines, print two integers a_i and b_i, representing an edge between nodes a_i and b_i. The output will be judged correct if the tree satisfies the conditions. Example Input 5 Output 4 1 2 1 3 1 4 1 5 Input 7 Output 6 1 2 1 3 1 4 2 5 2 6 2 7","solution":"def construct_tree(N): Constructs a tree with N nodes such that each node has a unique integer label from 1 to N, and the depth of each node is less than or equal to 2. Parameters: N (int): The number of nodes. Returns: List[Tuple[int, int]]: A list of edges (a_i, b_i) representing the tree. edges = [] if N <= 0: return edges # Add edges for the root node (node 1) and its children (nodes 2, 3, ..., min(N, X+1)) for i in range(2, N + 1): # Node 2 to N will be direct children of node 1 edges.append((1, i)) return edges"},{"question":"In a mysterious and enchanted forest, there exist mystical treehouses where magical creatures live. Each treehouse is connected to another treehouse by a wooden bridge. The treehouses and bridges form a connected acyclic graph (i.e., a tree). The treehouses are numbered from 1 to N, and each bridge has an associated safety score indicating how safe it is to cross. The total safety of a path from one treehouse to another is the sum of the safety scores of the bridges along that path. The creatures want to find the safest path between any two treehouses. However, due to the magical nature of the forest, every day the safety scores of the bridges change. Your task is to determine the total safety of paths between multiple pairs of treehouses for a single day\'s configuration of safety scores. INPUT: The first line contains an integer N (2 ≤ N ≤ 100), the number of treehouses. The next N-1 lines each contain three integers U, V, and S (1 ≤ U, V ≤ N, 1 ≤ S ≤ 100), indicating a bridge between treehouse U and treehouse V with safety score S. The next line contains an integer Q (1 ≤ Q ≤ 1000), the number of queries. Each of the next Q lines contains two integers A and B (1 ≤ A, B ≤ N), indicating a query where you need to find the total safety of the path between treehouses A and B. OUTPUT: For each query, print the total safety of the path between treehouses A and B on a new line. SAMPLE INPUT: 5 1 2 4 1 3 3 2 4 2 2 5 1 3 1 4 1 5 3 4 SAMPLE OUTPUT: 6 5 9 Explanation: The forest has five treehouses and four bridges: - Bridge with safety score 4 between 1 and 2 - Bridge with safety score 3 between 1 and 3 - Bridge with safety score 2 between 2 and 4 - Bridge with safety score 1 between 2 and 5 For the queries: - The total safety of the path from 1 to 4 is 4 + 2 = 6. - The total safety of the path from 1 to 5 is 4 + 1 = 5. - The total safety of the path from 3 to 4 is 3 + 4 + 2 = 9.","solution":"from collections import defaultdict, deque def find_safety_paths(N, bridges, queries): # Build the adjacency list adj_list = defaultdict(list) for u, v, s in bridges: adj_list[u].append((v, s)) adj_list[v].append((u, s)) def bfs_find_path_safety(start, end): queue = deque([(start, 0)]) visited = set() while queue: current, safety_score = queue.popleft() if current == end: return safety_score visited.add(current) for neighbor, score in adj_list[current]: if neighbor not in visited: queue.append((neighbor, safety_score + score)) return -1 # this line should not be reached because the graph is connected results = [] for a, b in queries: results.append(bfs_find_path_safety(a, b)) return results # Example usage: # N = 5 # bridges = [(1, 2, 4), (1, 3, 3), (2, 4, 2), (2, 5, 1)] # queries = [(1, 4), (1, 5), (3, 4)] # print(find_safety_paths(N, bridges, queries)) # Output: [6, 5, 9]"},{"question":"Given an array A of N integers, a subarray is defined as any contiguous segment of the array. Define the XOR sum of a subarray as the result of performing a bitwise XOR operation on all elements of the subarray. The task is to find the maximum XOR sum that can be obtained from any subarray of the given array. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the length of the array. - The second line contains N space-separated integers A1, A2, ..., AN representing the array A. ------ Output Format ------ For each test case, output the maximum XOR sum that can be obtained from any subarray. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 0 ≤ A_i < 2^{30} - The sum of N over all testcases does not exceed 5 cdot 10^5 ----- Sample Input 1 ------ 2 3 1 2 3 4 8 1 2 12 ----- Sample Output 1 ------ 3 15 ----- Explanation 1 ------ Test Case 1: The subarrays are [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]. The maximum XOR sum is obtained from subarray [1, 2, 3] which is 1 ^ 2 ^ 3 = 0. Test Case 2: The subarrays are [8], [1], [2], [12], [8, 1], [1, 2], [2, 12], [8, 1, 2], [1, 2, 12], [8, 1, 2, 12]. The maximum XOR sum is obtained from subarray [1, 2, 12] which is 1 ^ 2 ^ 12 = 15.","solution":"class TrieNode: def __init__(self): self.children = {} self.value = 0 class Trie: def __init__(self): self.root = TrieNode() def insert(self, num): node = self.root for i in range(29, -1, -1): bit = (num >> i) & 1 if bit not in node.children: node.children[bit] = TrieNode() node = node.children[bit] node.value = num def query(self, num): if not self.root.children: return num node = self.root max_xor = 0 for i in range(29, -1, -1): bit = (num >> i) & 1 toggled_bit = 1 - bit if toggled_bit in node.children: max_xor |= (1 << i) node = node.children[toggled_bit] else: node = node.children[bit] return max_xor def max_xor_subarray(arr): trie = Trie() prefix_xor = 0 max_xor = float(\'-inf\') trie.insert(0) for num in arr: prefix_xor ^= num trie.insert(prefix_xor) max_xor = max(max_xor, trie.query(prefix_xor)) return max_xor def process_test_cases(test_cases): results = [] for arr in test_cases: results.append(max_xor_subarray(arr)) return results # Implementing the input/output according to the problem\'s requirement def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) index = 1 test_cases = [] for _ in range(T): N = int(data[index]) array = list(map(int, data[index + 1:index + 1 + N])) test_cases.append(array) index += 1 + N results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"Emma is an avid reader and loves collecting books. She groups her books on shelves in a manner that each shelf can hold exactly `n` books placed in a single row. Emma wants to perform specific operations on her shelves which involve either adding a book or removing a book from specific positions on different shelves. Each book is identified by a unique integer ID. Initially, all shelves are empty. Emma can perform the following operations: 1. Operation to add a book: Given a shelf `s`, a position `p` in the shelf, and a book ID `b`, Emma places the book with ID `b` at position `p` on shelf `s`. If there is already a book at position `p`, the old book is replaced by the new one. 2. Operation to get a book: Given a shelf `s` and a position `p`, Emma queries which book is located at position `p` on shelf `s`. Your task is to implement these operations and help Emma manage her book collection. Input The first line contains two integers `m` and `q` (1 ≤ m, q ≤ 100,000) — the number of shelves and the number of operations, respectively. Each of the following `q` lines describes an operation in one of the following formats: - \\"1 s p b\\" (1 ≤ s ≤ m, 1 ≤ p ≤ n, 1 ≤ b ≤ 1,000,000), representing an add-book operation where `s` is the shelf number, `p` is the position on the shelf, and `b` is the book ID. - \\"2 s p\\" (1 ≤ s ≤ m, 1 ≤ p ≤ n), representing a get-book operation where `s` is the shelf number and `p` is the position on the shelf. Output For each get-book operation, print the ID of the book at the specified position on the specified shelf. If there is no book at the position, print \\"0\\". Example Input ``` 2 6 1 1 2 101 1 1 3 102 2 1 2 2 1 3 1 2 1 201 2 2 1 ``` Output ``` 101 102 201 ``` Notes In the example above: - The first operation places book with ID 101 at position 2 on shelf 1. - The second operation places book with ID 102 at position 3 on shelf 1. - The third operation queries the book at position 2 on shelf 1, which is 101. - The fourth operation queries the book at position 3 on shelf 1, which is 102. - The fifth operation places book with ID 201 at position 1 on shelf 2. - The sixth operation queries the book at position 1 on shelf 2, which is 201.","solution":"def initialize_shelves(m, n): return [[0] * n for _ in range(m)] def add_book(shelves, s, p, b): shelves[s-1][p-1] = b def get_book(shelves, s, p): return shelves[s-1][p-1] def manage_books(m, n, operations): shelves = initialize_shelves(m, n) results = [] for operation in operations: if operation[0] == 1: _, s, p, b = operation add_book(shelves, s, p, b) elif operation[0] == 2: _, s, p = operation results.append(get_book(shelves, s, p)) return results"},{"question":"# Problem: Re-arrange to Form a Palindrome Given a string `str`, determine if you can re-arrange the characters of the string to form a palindrome. A palindrome is a word that reads the same forwards and backwards. Input: - The input consists of a single string `str` (1 ≤ length of str ≤ 100,000). The string consists only of lowercase English letters. Output: - Output \\"YES\\" if you can re-arrange the characters to form a palindrome, and \\"NO\\" otherwise. Examples: Input: ``` civic ``` Output: ``` YES ``` Input: ``` ivicc ``` Output: ``` YES ``` Input: ``` hello ``` Output: ``` NO ``` Input: ``` aabb ``` Output: ``` YES ``` Explanation: - In the first example, the given string \\"civic\\" is already a palindrome. - In the second example, the string \\"ivicc\\" can be re-arranged to form \\"civic\\" which is a palindrome. - In the third example, there is no way to re-arrange \\"hello\\" to form a palindrome. - In the fourth example, \\"aabb\\" can be re-arranged to form \\"abba\\" which is a palindrome.","solution":"def can_form_palindrome(s): Determines if the characters of the string can be re-arranged to form a palindrome. A palindrome can have at most one character with an odd frequency. from collections import Counter count = Counter(s) odd_count = sum(1 for char, freq in count.items() if freq % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"A farmer wants to build a fence around his rectangular farm to protect his crops from wild animals. He plans to use wooden stakes to hold up the fence wire. The stakes will be placed at each corner of the rectangle and along the length of the sides. To ensure the fence is strong, he will use a stake at each meter mark along the boundary. However, if two stakes are at the same position, he will use only one stake at that position. Given the dimensions of the farm, length l meters and width w meters, determine the total number of stakes the farmer needs. -----Input:----- - The first line contains an integer T, the number of test cases. - The next T lines each contain two integers l and w, representing the length and width of the rectangular farm. -----Output:----- For each test case, output the total number of stakes required in a single line. -----Constraints----- - 1 leq T leq 1000 - 1 leq l, w leq 10^9 -----Sample Input:----- 3 3 1 2 2 4 4 -----Sample Output:----- 8 8 16 -----Explanation:----- For the first case, the dimensions are 3 meters by 1 meter, and the stakes are placed at positions: - Corners: (0,0), (0,1), (3,0), (3,1) - Along the length: (1,0), (2,0), (1,1), (2,1) Therefore, total 8 stakes. For the second case, the dimensions are 2 meters by 2 meters, and stakes are placed at positions: - Corners: (0,0), (0,2), (2,0), (2,2) - Along the length and width: (1,0), (1,2), (0,1), (2,1), (1,1) Therefore, total 8 stakes. For the third case, the dimensions are 4 meters by 4 meters, and stakes are placed at positions: - Corners: (0,0), (0,4), (4,0), (4,4) - Along the length and width: (1,0), (2,0), (3,0), (1,4), (2,4), (3,4), (0,1), (0,2), (0,3), (4,1), (4,2), (4,3) Therefore, total 16 stakes.","solution":"def total_stakes_required(T, dimensions): results = [] for l, w in dimensions: stakes = (2 * l + 2 * w) results.append(stakes) return results"},{"question":"Write a function `character_replacement` that takes two arguments: a string `s` and an integer `k`. Your task is to return the length of the longest substring of `s` that can be obtained by replacing at most `k` characters in the original string `s` with any other character. For example, given `s = \\"AABABBA\\"` and `k = 1`, the longest substring formed by replacing 1 character is \\"AABABAA\\" or \\"AAABBAA\\" which both have a length of 4. Function Signature: ```python def character_replacement(s: str, k: int) -> int: pass ```","solution":"def character_replacement(s: str, k: int) -> int: from collections import defaultdict max_len = 0 count = defaultdict(int) max_count = 0 start = 0 for end in range(len(s)): count[s[end]] += 1 max_count = max(max_count, count[s[end]]) if (end - start + 1) - max_count > k: count[s[start]] -= 1 start += 1 max_len = max(max_len, end - start + 1) return max_len"},{"question":"Alice is hosting a charity auction and has a list of items to be auctioned. Each item has a starting bid and a quality score. Alice wants to maximize the proceeds from the auction while maintaining a certain quality threshold for each item. She can only keep items that have a quality score of at least q. Help Alice select the items that should be kept for the auction to maximize the total starting bid while respecting the quality threshold. Input The first line contains two integers n and q (1 ≤ n ≤ 100, 1 ≤ q ≤ 100), where n is the number of items and q is the minimum required quality score for an item to be kept. Then follow n lines. Each line describes an item with two integers s and k: * 1 ≤ s ≤ 1000 is the starting bid in dollars * 1 ≤ k ≤ 100 is the quality score Output Print the total starting bid of the items kept for the auction. If no items meet the quality threshold, print 0. Examples Input 5 50 200 40 300 60 150 50 400 55 100 30 Output 850 Note In the second sample, Alice considers only the items with quality scores of 50 or higher. These are the second, third, and fourth items. The total starting bid of these items is 300 + 150 + 400 = 850. Thus, Alice selects items with a total starting bid of 850.","solution":"def maximize_starting_bid(n, q, items): Returns the total starting bid of the items that meet at least the minimum required quality score. Parameters: n (int): number of items q (int): minimum required quality score items (list of tuples): each tuple contains (starting bid, quality score) Returns: int: total starting bid of the items that meet the quality threshold total_bid = sum(s for s, k in items if k >= q) return total_bid"},{"question":"You are given a list of integers a = [a_1, a_2, dots, a_n]. We define a window as any contiguous subarray of the list a. The \\"window sum\\" is the sum of all elements within the window. The \\"window median\\" is the median value of the elements within the window. A median is the middle element of a sorted list; if there is an even number of elements, it is the smaller of the two middle elements. You are given m queries. Each query consists of an integer w_j which represents the size of the window. For each query, find the maximum \\"window median\\" among all possible windows of size w_j. For example, if the array a = [2, 1, 5, 7, 2, 0, 5] and w_j = 3, the maximum \\"window median\\" would be 5, from the window [5, 7, 2]. -----Input----- The first line contains an integer n (1 le n le 2 cdot 10^5) — the length of the sequence a. The second line contains elements of the sequence a: integer numbers a_1, a_2, dots, a_n (1 le a_i le 10^9). The third line contains an integer m (1 le m le 10^4) — the number of queries. The following m lines contain integers w_j (1 le w_j le n) — the size of each window for the queries. -----Output----- Print m integers, each representing the maximum \\"window median\\" for the corresponding query. -----Examples----- Input 7 2 1 5 7 2 0 5 3 1 2 3 Output 7 5 5 Input 5 1 3 4 1 5 4 1 4 3 2 Output 5 3 4 3","solution":"def find_max_window_median(array, queries): def median(window): sorted_window = sorted(window) k = (len(sorted_window) - 1) // 2 return sorted_window[k] result = [] for w in queries: max_median = float(\'-inf\') for i in range(len(array) - w + 1): median_value = median(array[i:i+w]) if median_value > max_median: max_median = median_value result.append(max_median) return result"},{"question":"You are given a string containing a mix of alphabets and digits. You need to segregate the alphabets and digits into two separate substrings while maintaining the original order. Input: The first line of input contains an integer T representing the number of test cases. The following T lines each contain a string S consisting of lowercase alphabets and digits. Output: For each test case, print two substrings separated by a space. The first substring should contain all the alphabets and the second substring should contain all the digits from the original string, both in the order they appear in the input. Constraints: 1 ≤ T ≤ 50 1 ≤ |S| ≤ 100 SAMPLE INPUT 3 a1b2c3 abc123 4d5e6f SAMPLE OUTPUT abc 123 abc 123 def 456 Explanation: Case 1: The given input string is \\"a1b2c3\\". The output substrings are \\"abc\\" (all alphabets) and \\"123\\" (all digits) in their original order. Case 2: The given input string is \\"abc123\\". The output substrings are \\"abc\\" (all alphabets) and \\"123\\" (all digits) in their original order. Case 3: The given input string is \\"4d5e6f\\". The output substrings are \\"def\\" (all alphabets) and \\"456\\" (all digits) in their original order.","solution":"def segregate_alphabets_and_digits(strings): Takes a list of strings and segregates alphabets and digits for each string. Returns a list of tuples, each containing two strings: one with all the alphabets and the other with all the digits. result = [] for s in strings: alphabets = \\"\\" digits = \\"\\" for char in s: if char.isalpha(): alphabets += char elif char.isdigit(): digits += char result.append((alphabets, digits)) return result"},{"question":"Alex is working on a project that involves processing strings. He needs to identify if there exists a substring within a given string S that appears at least K times. Can you help Alex solve this problem efficiently? Input The first line of input contains an integer T denoting the number of test cases. Each of the next T lines contains two space-separated values: - A string S consisting of lowercase English letters. - An integer K. Output For each test case, output \\"YES\\" if there exists a substring of S that appears at least K times, otherwise output \\"NO\\". Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 1 ≤ K ≤ |S| Example Input 3 abracadabra 3 banana 2 aaaaa 3 Output YES YES YES Explanation Test 1: The substring \\"a\\" appears 5 times in the string \\"abracadabra\\", which is more than 3 times. Test 2: The substring \\"ana\\" appears 2 times in the string \\"banana\\", which is exactly 2 times. Test 3: The substring \\"a\\" appears 5 times in the string \\"aaaaa\\", which is more than 3 times.","solution":"def has_repeating_substring(S, K): Function to check if there exists a substring in S that appears at least K times. from collections import defaultdict # Frequency dictionary to store substrings\' counts substr_count = defaultdict(int) # Loop to create all possible substrings and count occurrences for start in range(len(S)): for end in range(start, len(S)): substr = S[start:end + 1] substr_count[substr] += 1 if substr_count[substr] >= K: return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): Function to process multiple test cases. results = [] for i in range(T): S, K = test_cases[i] result = has_repeating_substring(S, int(K)) results.append(result) return results"},{"question":"Given a matrix with dimensions NxN, rotate the matrix 90 degrees clockwise. Input: A 2D list of size NxN representing the matrix. Output: A 2D list of size NxN representing the rotated matrix. Example 1: Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Example 2: Input: [ [5, 1], [2, 9] ] Output: [ [2, 5], [9, 1] ] Your Task: You need to complete the function rotateMatrix() which takes a 2D list representing the matrix as input and returns a new 2D list representing the matrix rotated 90 degrees clockwise. Expected Time Complexity: O(N^2) Expected Space Complexity: O(1) (do in-place rotation if possible) Constraints: 1 <= N <= 1000","solution":"def rotateMatrix(matrix): Rotates the given NxN matrix 90 degrees clockwise in place. N = len(matrix) # Step 1: Transpose the matrix for i in range(N): for j in range(i+1, N): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Step 2: Reverse each row for i in range(N): matrix[i].reverse() return matrix"},{"question":"Given a string s consisting of alphabets and digits, find the length of the longest substring that contains only digits. The substring \\"12345\\" is an example of a substring that contains only digits. Examples: Input: s = \\"abc1234xyz98765pqrs\\" Output: 5 Explanation: The longest substring with only digits is \\"98765\\" which has length 5. Input: s = \\"abcd\\" Output: 0 Explanation: There is no substring with only digits. Your Task: You do not need to read input or print anything. Your task is to implement the function longestDigitSubstring() which takes a string s as input and returns an integer denoting the length of the longest substring with only digits. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s| ≤ 10^5","solution":"def longestDigitSubstring(s): Returns the length of the longest substring with only digits. max_len = 0 current_len = 0 for char in s: if char.isdigit(): current_len += 1 max_len = max(max_len, current_len) else: current_len = 0 return max_len"},{"question":"Farmer John is planning to build a fence around his rectangular field. He wants to know the minimum length of the fence required, given the length and the width of his field. However, due to certain regulations, the perimeter of the fence must be an even number. Write a program to calculate the minimum length of the fence required. ------ Input Format ------ - The first line will contain an integer T - number of test cases. Then the test cases follow. - Each test case contains two integers L and W - the length and width of the field. ------ Output Format ------ For each test case, output the minimum length of the even perimeter required. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ L, W ≤ 1000 ----- Sample Input 1 ------ 3 3 4 5 6 7 8 ----- Sample Output 1 ------ 14 22 30 ----- Explanation 1 ------ Test case-1: The perimeter of the field is (2*3 + 2*4) = 14 which is already even. Test case-2: The perimeter of the field is (2*5 + 2*6) = 22 which is already even. Test case-3: The perimeter of the field is (2*7 + 2*8) = 30 which is already even. (Note: If in any case, the calculated perimeter is odd, you would need to adjust it to the next even number, but in these examples, all calculated perimeters are already even.)","solution":"def minimum_even_perimeter(test_cases): results = [] for L, W in test_cases: perimeter = 2 * (L + W) # Ensure the perimeter is even (though it will naturally be even in this scenario) if perimeter % 2 != 0: perimeter += 1 results.append(perimeter) return results # Function to parse input, process and print output def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [(int(data[i*2+1]), int(data[i*2+2])) for i in range(T)] results = minimum_even_perimeter(test_cases) for result in results: print(result)"},{"question":"You are given an array `arr` of n integers and an index k. Your task is to modify the array `arr` so that it becomes non-decreasing (i.e., sorted in non-decreasing order) by changing at most k entries in the array. You have to determine if it is possible to achieve this within the given constraints and, if possible, produce a valid modified array. If there are multiple solutions, you can return any of them. -----Input----- The first line of the input contains one integer t (1 le t le 10) — the number of test cases. Then t test cases follow. For each test case, the first line contains two integers n and k (1 le n le 10^5, 0 le k le n) — the number of elements in the array and the maximum number of changes allowed, respectively. The second line contains n integers arr_1, arr_2, ldots, arr_n (-10^9 le arr_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, if it is possible to make the array non-decreasing by modifying at most k elements, print \\"YES\\" on the first line and the modified array on the second line. If it is not possible, print \\"NO\\". -----Example----- Input 2 5 1 5 3 4 8 2 4 0 1 2 3 4 Output YES 5 4 4 8 8 YES 1 2 3 4 Explanation: In the first test case, one possible way to achieve a non-decreasing array with at most 1 change is to change the element `3` (at index 2) to `4` or any value between `4` and `8`. In the end, the array will become `[5, 4, 4, 8, 8]` which is non-decreasing. In the second test case, the array is already non-decreasing, so no changes are needed.","solution":"def can_modify_array(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] original_arr = arr[:] arr.sort() min_change_needed = sum(1 for i in range(n) if arr[i] != original_arr[i]) if min_change_needed <= k: results.append((\\"YES\\", arr)) else: results.append((\\"NO\\", [])) return results"},{"question":"Task Given a string and a list of words, find all substrings in the given string that are a concatenation of all the given words exactly once without any intervening characters. Each word in the list is of the same length. Example: For `s = \\"barfoothefoobarman\\"`, `words = [\\"foo\\", \\"bar\\"]` The output should be `[0, 9]` because the substring starting at index `0` is \\"barfoo\\" and the substring starting at index `9` is \\"foobar\\". For `s = \\"wordgoodgoodgoodbestword\\"`, `words = [\\"word\\",\\"good\\",\\"best\\",\\"word\\"]` The output should be `[]` because no substring matches concatenation of all words exactly once. Input/Output - `[input]` string `s` The string to search for substrings. - `[input]` string array `words` An array containing the words to concatenate. - `[output]` integer array The starting indices of substrings in the given string that are concatenations of all the given words exactly once. Indices are zero-based.","solution":"def find_substring(s, words): Find all starting indices of substring(s) in s that are a concatenation of each word in words exactly once and without any intervening characters. if not s or not words or not words[0]: return [] word_length = len(words[0]) num_words = len(words) substring_length = word_length * num_words s_length = len(s) if s_length < substring_length: return [] words_count = {} for word in words: words_count[word] = words_count.get(word, 0) + 1 indices = [] for i in range(word_length): left = i right = i current_count = {} while right + word_length <= s_length: word = s[right:right+word_length] right += word_length if word in words_count: current_count[word] = current_count.get(word, 0) + 1 while current_count[word] > words_count[word]: left_word = s[left:left+word_length] current_count[left_word] -= 1 left += word_length if right - left == substring_length: indices.append(left) else: current_count.clear() left = right return indices"},{"question":"Given an unsorted list of integers, find the highest product you can arrange from any three of the numbers. Example 1: Input: nums = [1, 10, 2, 6, 5, 3] Output: 300 Explanation: The highest product can be obtained by 10 * 6 * 5 = 300. Example 2: Input: nums = [-10, -10, 5, 2] Output: 500 Explanation: The highest product can be obtained by -10 * -10 * 5 = 500. Your Task: You do not need to read input or print anything. Your task is to complete the function maxProductOfThree() which takes nums as input parameter and returns the highest product you can arrange from any three of the numbers. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 3 ≤ nums.length ≤ 10^5 -10^4 ≤ nums[i] ≤ 10^4","solution":"def maxProductOfThree(nums): Returns the highest product of any three numbers in the given list of integers. nums.sort() return max(nums[-1]*nums[-2]*nums[-3], nums[0]*nums[1]*nums[-1])"},{"question":"You are given a string consisting of lowercase letters and digits. Write a function that determines if this string can be rearranged to form a palindrome. A palindrome is a word that reads the same forward and backward. Return `True` if it is possible, otherwise return `False`. ``` canFormPalindrome(s) canFormPalindrome(\\"aabb\\") The string can be rearranged to \\"abba\\" which is a palindrome. Therefore the answer is True canFormPalindrome(\\"abc\\") The string cannot be rearranged to form a palindrome. Therefore the answer is False ``` The input string length is in the range [1, 1000].","solution":"from collections import Counter def canFormPalindrome(s): Determine if the string can be rearranged to form a palindrome. Args: s (str): The input string consisting of lowercase letters and digits. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. # Count the frequency of each character freq = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in freq.values() if count % 2 != 0) # For the string to be able to form a palindrome, at most one character can have an odd frequency return odd_count <= 1"},{"question":"You are given a string containing only the characters \'A\' and \'B\'. The string represents a sequence of cells, where each cell either contains an \'A\' or a \'B\'. In one operation, you can select a contiguous subsegment of the string containing an equal number of \'A\'s and \'B\'s and remove it. After removing the selected subsegment, the remaining parts of the string are concatenated together to form a new string. Determine the maximum number of operations you can perform to remove equal \'A\'-\'B\' subsegments from the given string. -----Input----- The input consists of a single string of characters \'A\' and \'B\' of length between 1 and 10^6. -----Output----- Output a single integer, the maximum number of operations that can be performed. -----Examples----- Input AABBAB Output 2 Input ABABAB Output 3 -----Explanation----- In the first test case, you can perform the following operations: 1. Remove \\"AABB\\" from \\"AABBAB\\" to get \\"AB\\" (1 operation). 2. Remove \\"AB\\" to get an empty string (1 more operation, total 2 operations). In the second test case, you can perform the following operations: 1. Remove \\"AB\\" from \\"ABABAB\\" to get \\"ABAB\\" (1 operation). 2. Remove \\"AB\\" from \\"ABAB\\" to get \\"AB\\" (1 more operation, total 2 operations). 3. Remove \\"AB\\" to get an empty string (1 more operation, total 3 operations).","solution":"def max_operations(s): Determine the maximum number of operations to remove equal \'A\'-\'B\' subsegments. :param s: A string containing only characters \'A\' and \'B\' :return: The maximum number of operations countA, countB = 0, 0 operations = 0 for char in s: if char == \'A\': countA += 1 elif char == \'B\': countB += 1 if countA == countB: operations += 1 countA, countB = 0, 0 return operations"},{"question":"In a grid-based game, a player starts at the top-left corner of a grid and aims to reach the bottom-right corner. The player can only move right or down at any point in time. However, certain cells in the grid contain obstacles that the player cannot pass through. Determine the number of unique paths the player can take to reach the bottom-right corner of the grid, given the obstacles. -----Input----- The first line contains two integers m and n, the number of rows and columns in the grid, respectively. The next m lines each contain n integers, representing the grid. A value of 0 represents an open cell while a value of 1 represents an obstacle. -----Output----- Output a single integer, the number of unique paths from the top-left to the bottom-right of the grid. -----Examples----- Sample Input 1: 3 3 0 0 0 0 1 0 0 0 0 Sample Output 1: 2 Sample Input 2: 3 3 0 1 0 0 0 0 0 1 0 Sample Output 2: 1","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) # Edge case: Start or end is an obstacle if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 # Allocate a 2D dp array dp = [[0] * n for _ in range(m)] # Initialize starting point dp[0][0] = 1 # Fill dp array for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"A large tech company has several departments, and employees within each department are identified by unique integer IDs ranging from 0 to n-1. Each department has a ranking that indicates the importance of each department. The company wants to conduct a series of consultations between employees of different departments, ensuring that higher-ranked departments are more involved in the consultative process. To facilitate this, the company\'s management decided to hold a certain number of meetings. Each meeting must include at least one representative from each department to ensure that all perspectives are considered. Similarly, the frequency of consultative meetings should be optimized to give more opportunities to higher-ranked departments. The company has provided you with the following information: - A list of employees for each department, where employees are identified by their unique IDs. - The ranking of each department. - The constraints on the total number of meetings. Your task is to design an algorithm that outputs a list of meetings, ensuring that employees from higher-ranked departments participate more frequently in the consultative meetings. Each meeting should include at least one employee from each department and should maximize the participation of higher-ranked departments within the given constraints. Input The input consists of: - An integer `d` (1 ≤ d ≤ 100) denoting the number of departments. - An integer `n` (1 ≤ n ≤ 100) denoting the total number of employees. - A list of `d` integers where the i-th integer represents the ranking of the i-th department (higher value means higher rank). - A 2D list where the i-th list contains the IDs of employees in the i-th department. - An integer `m` (1 ≤ m ≤ 100) denoting the total number of meetings that need to be scheduled. Output Print `m` meetings, where each meeting is represented by a list of `d` integers. Each integer in the meeting represents the ID of an employee from the corresponding department. Ensure that higher-ranked departments have representatives in the meetings as frequently as possible. Example Input 4 10 5 3 4 2 [[0, 1], [2, 3], [4, 5], [6, 7, 8, 9]] 3 Output [[0, 2, 4, 6], [1, 2, 5, 7], [0, 3, 4, 8]] Note In the example provided, department 1 (rank 5) is represented more frequently in the meetings than department 4 (rank 2) while ensuring that every department is included in each meeting.","solution":"def schedule_meetings(d, n, rankings, employees, m): # Sort departments by their rankings in descending order departments = sorted(range(d), key=lambda x: rankings[x], reverse=True) # Prepare meetings list meetings = [] counters = [0] * d # To keep track of how many employees we have used from each department for i in range(m): meeting = [] for dept in departments: emp_id = employees[dept][counters[dept] % len(employees[dept])] meeting.append(emp_id) counters[dept] += 1 meetings.append(meeting) return meetings # Generate meetings using the input provided in the problem d = 4 n = 10 rankings = [5, 3, 4, 2] employees = [[0, 1], [2, 3], [4, 5], [6, 7, 8, 9]] m = 3 print(schedule_meetings(d, n, rankings, employees, m))"},{"question":"Anna loves playing with arrays. This time she is interested in finding an \\"almost equal\\" array. Given an array `a` of length `n`, we say an array `b` of length `n` is \\"almost equal\\" to `a` if and only if: - The array `b` contains the same elements as `a`, but possibly in a different order. - The sum of absolute differences of corresponding elements of `a` and `b` is exactly 2. In other words, ∑_{i=1}^{n} | a_i - b_i | = 2. You are to determine if such an array `b` exists for a given array `a`. Input: The first line contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. The next `t` lines each describe a test case. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 10^5) — the length of the array. The second line contains `n` integers `a_1, a_2, …, a_n` (1 ≤ a_i ≤ 10^9) — the elements of the array `a`. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. Output: For each test case, output \\"YES\\" if an \\"almost equal\\" array `b` exists, otherwise output \\"NO\\". Example: Input: 4 3 1 2 3 4 1 1 1 1 5 5 5 5 5 5 6 1 2 2 3 3 4 Output: YES NO NO YES","solution":"def is_almost_equal_possible(t, test_cases): results = [] for n, array in test_cases: array.sort() possible = False for i in range(1, n): if array[i] == array[i-1] + 1: possible = True break if possible: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a doubly linked list where each node also has a child pointer which may or may not point to a separate doubly linked list, the task is to flatten the list so that all nodes appear in a single, depth-first traversal linked list. Example 1: Input: 1 - 2 - 3 - 4 - 5 - 6 - NULL | 7 - 8 - 9 - 10 - NULL | 11 - 12 - NULL Output: 1 - 2 - 7 - 8 - 11 - 12 - 9 - 10 - 3 - 4 - 5 - 6 - NULL Example 2: Input: 1 - 2 - NULL | 3 - NULL Output: 1 - 2 - 3 - NULL Your Task: The task is to complete the function flatten() which should flatten the given doubly linked list and return the head of the flattened list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 0 <= Number of nodes <= 10^{5}","solution":"class Node: def __init__(self, val, next=None, prev=None, child=None): self.val = val self.next = next self.prev = prev self.child = child def flatten(head): if not head: return head dummy = Node(0) dummy.next = head prev = dummy stack = [head] while stack: curr = stack.pop() prev.next = curr curr.prev = prev if curr.next: stack.append(curr.next) if curr.child: stack.append(curr.child) curr.child = None prev = curr dummy.next.prev = None return dummy.next"},{"question":"Implement a function `findAnagrams` that takes in a string `s` and a non-empty string `p`, and returns a list of starting indices of `p`\'s anagrams in `s`. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Constraints: - The input strings only contain lowercase English letters. - The length of both strings will not exceed 20,000. Examples: Example 1: ``` Input: s = \\"cbaebabacd\\", p = \\"abc\\" Output: [0, 6] Explanation: The substring starting at index 0 is \\"cba\\", which is an anagram of \\"abc\\". The substring starting at index 6 is \\"bac\\", which is an anagram of \\"abc\\". ``` Example 2: ``` Input: s = \\"abab\\", p = \\"ab\\" Output: [0, 1, 2] Explanation: The substring starting at index 0 is \\"ab\\", which is an anagram of \\"ab\\". The substring starting at index 1 is \\"ba\\", which is an anagram of \\"ab\\". The substring starting at index 2 is \\"ab\\", which is an anagram of \\"ab\\". ``` Note: - The order of output does not matter. - Aim to achieve a time complexity of O(n) where n is the length of string `s`.","solution":"from collections import Counter def findAnagrams(s, p): Finds starting indices of the anagrams of p in s. result = [] len_p = len(p) len_s = len(s) if len_p > len_s: return result # Create a frequency counter for the characters in p p_count = Counter(p) s_count = Counter(s[:len_p-1]) # Iterate through the string s using a sliding window approach for i in range(len_p-1, len_s): # Add the new character to the current window\'s count s_count[s[i]] += 1 # Compare window with p\'s character count if s_count == p_count: result.append(i - len_p + 1) # Remove the oldest character from the window start_char = s[i - len_p + 1] s_count[start_char] -= 1 if s_count[start_char] == 0: del s_count[start_char] return result"},{"question":"In a remote area, there\'s a shared well that provides water for the entire village. The well can be accessed by the villagers during specific time slots. Your task is to manage the scheduling of the villagers so that the well is used efficiently. Each villager requires a specific amount of time to fetch water, and they have a preferred time slot they want to start fetching. The well can serve only one villager at a time, and whenever a villager starts fetching water, they continue until they have finished. If a villager\'s preferred time slot is already occupied or a villager arrives too late to use their preferred slot, they have to wait until the well is available. You need to determine the maximum number of villagers that can fetch water from the well without conflicting with each other\'s preferred time slots. -----Input:----- - The first line contains a single integer n, representing the number of villagers. - The next n lines each contain two integers s_i and d_i, where s_i is the preferred start time of the i-th villager and d_i is the time they require to fetch water from the well. -----Output:----- Output a single integer denoting the maximum number of villagers that can fetch water sequentially without conflicts. -----Constraints----- - 1 leq n leq 10^5 - 0 leq s_i leq 10^9 - 1 leq d_i leq 10^9 -----Sample Input:----- 5 1 3 2 2 3 1 6 1 7 2 -----Sample Output:----- 3","solution":"def max_villagers(n, intervals): # Sort intervals based on ending times intervals.sort(key=lambda x: x[0] + x[1]) count = 0 end_time = -1 for start, duration in intervals: if start >= end_time: count += 1 end_time = start + duration return count # Example usage n = 5 intervals = [(1, 3), (2, 2), (3, 1), (6, 1), (7, 2)] print(max_villagers(n, intervals)) # Output: 3"},{"question":"You are given an array of integers and a target integer. Determine if there are two distinct indices i and j in the array such that the absolute difference between the elements at these indices is exactly the target integer. For example, given the array [1, 5, 3, 4, 7] and the target integer 2, there exist indices i=0 and j=2 (1 and 3), or i=1 and j=3 (5 and 3), where the absolute difference between elements is 2. INPUT First line of input contains t, the total number of test cases. Then t sets of lines follow, each containing: - The first line has an integer n, which is the length of the array. - The second line contains n space-separated integers constituting the array. - The third line contains the target integer. 0<t<100 0<n<10^5 Each element of the array is a positive integer less than 10^5. OUTPUT For each test case, output \\"YES\\" if there are two such indices, otherwise output \\"NO\\". SAMPLE INPUT 2 5 1 5 3 4 7 2 4 2 4 6 8 3 SAMPLE OUTPUT YES NO","solution":"def find_pair_with_target_difference(arr, target): Determines if there are two distinct indices i and j in the array such that the absolute difference between the elements at these indices is exactly the target integer. seen = set() for num in arr: if (num + target) in seen or (num - target) in seen: return \\"YES\\" seen.add(num) return \\"NO\\" def process_test_cases(test_cases): Processes multiple test cases and returns a list of results for each test case. results = [] for n, arr, target in test_cases: result = find_pair_with_target_difference(arr, target) results.append(result) return results"},{"question":"Valeria loves cooking and experimenting with recipes. She is working on a new recipe that requires exactly p different spices but only has access to q different spices at any given time. Each spice can either be included in the recipe or not. Valeria wants to count how many different ways she can select exactly p spices out of the q she has available. Your task is to determine the number of different combinations in which she can choose exactly p spices out of q available spices. -----Input----- First line of the input consists of two integers p and q (0 ≤ p ≤ q ≤ 1000), separated by space — the number of spices required for the recipe, and the number of spices available. -----Output----- On the only line of the output print one integer – the number of different combinations in which Valeria can choose exactly p spices out of q available spices. -----Examples----- Input 2 4 Output 6 Input 3 5 Output 10 Input 0 0 Output 1 -----Note----- In the first sample, Valeria needs to choose exactly 2 spices out of 4 available ones. The combinations are pairs of 2 spices, which include: (1st & 2nd), (1st & 3rd), (1st & 4th), (2nd & 3rd), (2nd & 4th), and (3rd & 4th). Hence, there are 6 different ways. In the third sample, choosing 0 spices out of 0 is possible in exactly one way - by choosing nothing at all. Hence, the output is 1.","solution":"import math def count_combinations(p, q): Returns the number of ways to choose p spices out of q available spices. This is calculated using the binomial coefficient C(q, p) = q! / (p! * (q-p)!) return math.comb(q, p)"},{"question":"A local amusement park is planning a new ride that features a circular track with N stations. Each station has a different set of thrill levels associated with it. Riders can board the ride at any station, but once they start, they can only travel in the clockwise direction around the track. Riders can alight at any station of their choice after completing their ride. The goal is to find the most thrilling ride for a rider by maximizing the sum of thrill levels between the boarding and alighting stations. Write a program to help riders determine the maximum thrill they can experience on the ride. -----Input----- The first line of input contains the integer N (2 le N le 10^5), the number of stations. The second line contains N integers separated by single spaces, where the i^{th} integer represents the thrill level at the i^{th} station. Thrill levels can be positive, negative, or zero and will be between -10^4 and 10^4 inclusive. -----Output----- Output a single integer, the maximum thrill level a rider can achieve by boarding and alighting at any stations of their choice. -----Examples----- Sample Input: 5 1 -2 3 -1 2 Sample Output: 5","solution":"def maximum_thrill(N, thrill_levels): Finds the maximum thrill level that can be achieved by riding between two stations. Parameters ---------- N : int The number of stations. thrill_levels : List[int] A list of integers representing thrill levels of each station. Returns ------- int The maximum thrill level achieved. # Helper function to find max subarray sum using Kadane\'s algorithm def kadane(array): max_so_far = array[0] max_ending_here = array[0] for i in range(1, len(array)): max_ending_here = max(array[i], max_ending_here + array[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far # Directly get the max subarray sum for the thrill levels max_sum_kadane = kadane(thrill_levels) # Now we need to consider the circular nature of the array. total_sum = sum(thrill_levels) inverted_thrill_levels = [-x for x in thrill_levels] min_sum_kadane = kadane(inverted_thrill_levels) max_sum_circular = total_sum + min_sum_kadane # Handle the case where all elements are negative if max_sum_circular == 0: return max_sum_kadane return max(max_sum_kadane, max_sum_circular)"},{"question":"A large medieval city needs to develop a new road maintenance system. Each segment of road has an associated wear level, which determines how urgently it needs to be repaired. The project manager wants to ensure that no road segment is skipped, so he decides to represent the roads and their wear levels using a binary heap where each node corresponds to a road segment. As an assistant software engineer, your task is to help build this system. You need to implement an algorithm that sorts the road segments in descending order of their wear levels utilizing a min-heap. Input Format The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, denoting the number of road segments. - The next line contains N space-separated integers, where each integer represents the wear level of a road segment. Output Format For each test case, output a single line with the wear levels sorted in descending order. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 0 ≤ Wear level ≤ 1000 Sample Input 2 5 10 20 15 30 40 3 5 4 7 Sample Output 40 30 20 15 10 7 5 4 Explanation For the first test case: - The wear levels are [10, 20, 15, 30, 40]. - When sorted in descending order, they are [40, 30, 20, 15, 10]. For the second test case: - The wear levels are [5, 4, 7]. - When sorted in descending order, they are [7, 5, 4].","solution":"import heapq def sort_road_segments_desc(test_cases): results = [] for case in test_cases: N, wear_levels = case min_heap = [] for wear in wear_levels: heapq.heappush(min_heap, -wear) sorted_wear_levels = [-heapq.heappop(min_heap) for _ in range(N)] results.append(sorted_wear_levels) return results"},{"question":"In most programming languages, strings are a basic data type and are used to represent text. One common operation that is performed on strings is finding the longest substring that contains only unique characters. Task You need to write a function called **longest_unique_substring** which takes a string as input and returns the longest substring that contains only unique characters. If there are multiple substrings with the same maximum length, return the one which appears first. Example ```python longest_unique_substring(\\"abcabcbb\\") # returns \\"abc\\" longest_unique_substring(\\"bbbbb\\") # returns \\"b\\" longest_unique_substring(\\"pwwkew\\") # returns \\"wke\\" ``` Notes: 1. The input string will contain only ASCII characters and will have at least one character. 2. You must ensure that the function handles both uppercase and lowercase letters, numerals, and punctuation equally. 3. The solution must be efficient enough to handle large input strings. Constraints: - The input string length is at most 1000 characters. Good luck!","solution":"def longest_unique_substring(s): Returns the longest substring that contains only unique characters. max_len = 0 max_substr = \\"\\" start = 0 char_index_map = {} for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i current_len = i - start + 1 if current_len > max_len: max_len = current_len max_substr = s[start:i+1] return max_substr"},{"question":"A robot is placed on a grid of size nxn starting at position (1, 1). The robot can move right or down to reach the bottom-right corner (n, n). However, it may encounter obstacles at certain grid positions which it cannot move onto. Given the dimensions of the grid and the positions of the obstacles, determine the number of distinct paths the robot can take to reach the destination. If there is no possible path, output 0. ------ Input: ------ First line will contain T, number of testcases. Then the testcases follow. Each testcase contains: - The first line containing two integers n and m, where n is the grid size and m is the number of obstacles. - The following m lines each contain two integers x and y representing the positions of the obstacles. It is guaranteed that (1, 1) and (n, n) will not be obstacles. ------ Output: ------ For each test case, output a single line containing the number of distinct paths the robot can take to reach the bottom-right corner. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n ≤ 100 0 ≤ m ≤ n^2 - 2 ----- Sample Input 1 ------ 2 2 0 3 1 2 2 ----- Sample Output 1 ------ 2 2 ----- Explanation 1 ------ In the first test case, the grid is 2x2 with no obstacles. The robot can either move right and down or down and right. Therefore, there are 2 paths. In the second test case, the grid is 3x3 with an obstacle at (2, 2). The robot can only move (1,1) -> (1,2) -> (2,2) -> (3,2) -> (3,3) or (1,1) -> (2,1) -> (2,2) -> (2,3) -> (3,3). Therefore, there are 2 paths.","solution":"def uniquePaths(n, m, obstacles): Returns the number of unique paths in an n x n grid starting from (1, 1) to (n, n) avoiding obstacles. grid = [[0] * n for _ in range(n)] if m > 0: for x, y in obstacles: grid[x - 1][y - 1] = -1 if grid[0][0] == -1 or grid[n-1][n-1] == -1: return 0 grid[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == -1: continue if i > 0 and grid[i-1][j] != -1: grid[i][j] += grid[i-1][j] if j > 0 and grid[i][j-1] != -1: grid[i][j] += grid[i][j-1] return grid[n-1][n-1] def process_test_cases(test_cases): results = [] for case in test_cases: n, m, obstacles = case results.append(uniquePaths(n, m, obstacles)) return results"},{"question":"A software company is developing a new feature for one of their products: a warehouse management system. This system includes a pathfinding algorithm to help robots navigate the warehouse efficiently. Each warehouse has multiple obstacles and the robots need to find the shortest path from a starting point to a destination. Your task is to implement the pathfinding algorithm for the robots. The warehouse is represented as a grid of size `n x m` where each cell is either open (represented by \'.\') or blocked (represented by \'#\'). The robot can move one cell at a time up, down, left, or right, but cannot move diagonally or through blocked cells. Write a program to determine the minimum number of moves required for the robot to reach the destination from the starting point. If there is no valid path, return -1. Input: The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100), the dimensions of the warehouse grid. The next `n` lines each contain `m` characters, representing the grid cells. The following line contains two integers `sx` and `sy` (0 ≤ sx < n, 0 ≤ sy < m), the starting position of the robot. The last line contains two integers `dx` and `dy` (0 ≤ dx < n, 0 ≤ dy < m), the destination position. It is guaranteed that both the starting and destination cells are open. Output: If a path exists, print the minimum number of moves required for the robot to reach the destination. If no path exists, print -1. Example: Input: 5 5 ..... .#.#. ..#.. .#. ..... 0 0 4 4 Output: 8 Input: 3 3 .#. # .#. 0 0 2 2 Output: -1","solution":"from collections import deque def min_moves(n, m, grid, sx, sy, dx, dy): def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(sx, sy, 0)]) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (dx, dy): return dist for direction in directions: nx, ny = x + direction[0], y + direction[1] if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"You are given a string consisting of lowercase English letters. You want to create a new string by picking some characters from the given string (possibly none) and reordering them in such a way that no two adjacent characters in the new string are the same. Write a function to determine whether it is possible to create such a string. If it is possible, return any valid string that can be created. If it is not possible, return an empty string. -----Input----- - The input consists of a single string, s (1 leq |s| leq 10^4), where s contains only lowercase English letters. -----Output----- - Return a single string which is a reordering of the input string with no two adjacent characters being the same. If no such reordering is possible, return an empty string. -----Example----- Input aab Output aba Input aaab Output `` (an empty string) -----Note----- In the first example, the input string is \\"aab\\". By rearranging the string to \\"aba\\", we ensure that no two adjacent characters are the same. In the second example, the input string is \\"aaab\\". It is not possible to rearrange the string such that no two adjacent characters are the same, so the output is an empty string.","solution":"from collections import Counter import heapq def reorganize_string(s): Reorganizes the string so that no two adjacent characters are the same. :param s: The input string consisting of lowercase English letters. :return: A rearranged string or empty string if it\'s not possible. counter = Counter(s) max_heap = [(-value, key) for key, value in counter.items()] heapq.heapify(max_heap) prev_char, prev_freq = None, 0 result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 result_string = \'\'.join(result) if len(result_string) != len(s): return \'\' # impossible to reorganize return result_string"},{"question":"There is a programming competition where N participants take part. Each participant solves some number of problems, and each participant can be uniquely identified by an integer ID ranging from 1 to N. You need to process Q queries of two types: 1. \\"1 X Y\\" - This query indicates a participant with ID X solved Y more problems than previously. 2. \\"2 K L R\\" - This query requires you to find the K-th smallest number of problems solved among the participants whose IDs lie between L and R (both inclusive). Input format The first line contains a single integer N, the number of participants. The second line contains N space-separated integers where the i-th integer indicates the initial number of problems solved by the participant with ID i. The third line contains a single integer Q, the number of queries. Each of the next Q lines contain one query in one of the two formats explained above. Output format For each query of the second type, print the required K-th smallest number of problems solved in a separate line. Constraints 1 ≤ N, Q ≤ 100000 1 ≤ Problems solved, Y ≤ 1000000 1 ≤ X ≤ N 1 ≤ K ≤ (R - L + 1) SAMPLE INPUT 5 3 1 6 4 2 4 2 3 1 5 1 2 3 2 1 2 4 2 2 1 5 SAMPLE OUTPUT 3 4 3 Explanation Given the list of problems solved by the participants initially: [3, 1, 6, 4, 2] Query #1: Find the 3rd smallest number of problems solved among participants with IDs from 1 to 5. The sorted list of problems solved is [1, 2, 3, 4, 6]. The 3rd smallest number is 3. Query #2: Participant with ID 2 solves 3 more problems, so the list updates to [3, 4, 6, 4, 2]. Query #3: Find the 1st smallest number of problems solved among participants with IDs from 2 to 4. The sorted list of problems solved is [4, 4, 6]. The 1st smallest number is 4. Query #4: Find the 2nd smallest number of problems solved among participants with IDs from 1 to 5. The sorted list of problems solved is [2, 3, 4, 4, 6]. The 2nd smallest number is 3.","solution":"def solve_competition(N, initial_problems, Q, queries): problems_solved = initial_problems[:] result = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": X = int(parts[1]) Y = int(parts[2]) problems_solved[X - 1] += Y elif parts[0] == \\"2\\": K = int(parts[1]) L = int(parts[2]) R = int(parts[3]) sorted_problems = sorted(problems_solved[L - 1:R]) result.append(sorted_problems[K - 1]) return result"},{"question":"Catherine is participating in a computer science competition. One segment of the competition involves problems related to integer manipulation and arithmetic operations. She encounters the following problem: Given a positive integer n, Catherine needs to find the smallest number of steps required to reduce n to 0. In each step, she is allowed to perform one of the following operations: 1. If n is even, divide n by 2. 2. If n is odd, subtract 1 from n. Help Catherine by writing a program that calculates the minimum number of steps needed to reduce n to 0. Input Format A single positive integer denoting n. Constraints 1leq nleq10^{6} Output Format Print a single integer denoting the minimum number of steps needed to reduce n to 0. Sample Input 0 8 Sample Output 0 4 Explanation 0 The smallest number of steps to reduce 8 to 0 is 4: Step 1: 8 is even, divide it by 2 to get 4. Step 2: 4 is even, divide it by 2 to get 2. Step 3: 2 is even, divide it by 2 to get 1. Step 4: 1 is odd, subtract 1 to get 0.","solution":"def min_steps_to_reduce_to_zero(n): Function to calculate the minimum number of steps to reduce n to 0. steps = 0 while n > 0: if n % 2 == 0: n //= 2 else: n -= 1 steps += 1 return steps"},{"question":"You are given a sequence a=[a_1,a_2,dots,a_n] consisting of n positive integers. Each integer a_i represents the height of a building in a skyline. Let\'s define a rectangle in the skyline as an area formed between two or more buildings with the same height from a[l,r], where all buildings between the indices l and r (inclusive) are of the same height. For example, if a=[3,1,3,3,3,5,3], then: - Rectangle [1,1] has height 3 and width 1 (corresponding area = 3 times 1 = 3). - Rectangle [2,2] has height 1 and width 1 (corresponding area = 1 times 1 = 1). - Rectangle [3,5] has height 3 and width 3 (corresponding area = 3 times 3 = 9). Find the area of the largest rectangle that can be formed in the skyline described by the sequence a. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case is described by two lines. The first line of each test case contains a single integer n (1 le n le 2000) — the number of buildings in the sequence a. The second line of each test case contains exactly n integers: a_1, a_2, dots, a_n (1 le a_i le 10^6) — the heights of the buildings in the sequence a. It is guaranteed that the sum of n for all test cases does not exceed 2000. -----Output----- For each test case, output one integer — the area of the largest possible rectangle that can be formed in the sequence a. -----Examples----- Input 3 6 2 1 5 6 2 3 7 6 2 5 4 5 1 6 5 2 4 2 1 10 Output 10 12 10 -----Note----- In the first test case, the largest possible rectangle that can be formed contains buildings [5, 6] with heights 5 and 6, respectively, forming a rectangle of area 5 (height) x 2 (width) = 10. In the second test case, the largest possible rectangle that can be formed contains buildings [4, 5, 4] with heights 4, 5 and 4, respectively, forming a rectangle of area 4 (height) x 3 (width) = 12. In the third test case, the largest possible rectangle that can be formed is [10] with height 10 and breadth 1, forming a rectangle of area 10 x 1 = 10.","solution":"def largest_rectangle_area(heights): Given a list of heights representing a skyline, this function calculates the maximum rectangular area in the skyline. stack = [] max_area = 0 index = 0 while index < len(heights): # If this bar is higher than the bar at stack top, push it to the stack if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: # Pop the top top_of_stack = stack.pop() # Calculate the area with heights[top_of_stack] as the smallest (or minimum height) bar \'h\' h = heights[top_of_stack] # Calculate the width w = index if not stack else index - stack[-1] - 1 # Update max_area, if needed max_area = max(max_area, h * w) # Now pop the remaining bars from stack and calculate area with each popped bar as the smallest bar while stack: top_of_stack = stack.pop() h = heights[top_of_stack] w = index if not stack else index - stack[-1] - 1 max_area = max(max_area, h * w) return max_area def largest_rectangle_from_skyline(t, test_cases): Processes multiple test cases to determine the largest rectangle area in each provided skyline. Parameters: t (int): The number of test cases. test_cases (list): List of tuples where each tuple contains: - n (int): Number of buildings. - heights (list): List of heights of the buildings. Returns: list: List of integers where each integer represents the maximum rectangular area for the respective test case. results = [] for n, heights in test_cases: results.append(largest_rectangle_area(heights)) return results"},{"question":"In the city of Programmistan, there is a famous candy shop called \\"Sweet Algorithms.\\" This candy shop specializes in producing customized candy bags for corporate events. The candies are packaged and sold in boxes, each box containing a number of candies, and the number of candies per box may vary from one box to another. The shop\'s owner has an interesting challenge for you: Given a specific number of candies that a corporate client desires, and given the list of available boxes with their respective candy counts, calculate the minimum number of boxes required to exactly match or exceed the desired number of candies. If it is not possible to meet or exceed the exact number of candies with the given boxes, return -1. Input - The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. - Each test case consists of two lines: - The first line contains two integers: N (1 ≤ N ≤ 100) and M (1 ≤ M ≤ 10000), where N is the number of available boxes, and M is the desired number of candies. - The second line contains N integers `b1, b2, ..., bN `(1 ≤ bi ≤ 1000), representing the number of candies in each box. Output For each test case, output a single integer: the minimum number of boxes required to meet or exceed the desired number of candies, or -1 if it is not possible. Examples Input 3 5 9 1 2 3 4 5 4 10 1 1 1 1 3 7 10 20 30 Output 2 -1 1 Explanation - In the first test case, the minimum number of boxes required to get at least 9 candies are the boxes with 4 and 5 candies, resulting in a total of 9 candies. - In the second test case, it is impossible to accumulate 10 candies using any combination of the boxes since the total sum is 4. - In the third test case, selecting the box with 10 candies meets the requirement of at least 7 candies with just one box.","solution":"def minimum_boxes(T, cases): results = [] for case in cases: N, M, boxes = case boxes.sort(reverse=True) # Sort boxes by the number of candies in descending order total_candies = 0 count = 0 for box in boxes: total_candies += box count += 1 if total_candies >= M: results.append(count) break else: results.append(-1) return results"},{"question":"Given three integers x, y, and z, print the maximum of x, y, and z. -----Constraints----- - 1 leq x, y, z leq 100 - x, y, and z are integers. -----Input----- Input is given from Standard Input in the following format: x y z -----Output----- Print the maximum value among x, y, and z as an integer. -----Sample Input----- 5 12 8 -----Sample Output----- 12 When x = 5, y = 12, and z = 8, the maximum value among them is 12.","solution":"def max_of_three(x, y, z): Returns the maximum of three integers x, y, and z. return max(x, y, z)"},{"question":"Implement a function to merge two sorted arrays into a single sorted array. Input: In this problem, the function takes 2 arguments: two sorted arrays \'arr1\' and \'arr2\' each of size \'m\' and \'n\' respectively. The function should not read any input from stdin/console. Output: Return the merged sorted array. User Task: The task is to complete the function mergeArrays() which takes two sorted arrays \'arr1\' and \'arr2\' and returns a single sorted array. Constraints: 1 <= m, n <= 1000 -10^6 <= arr1[i], arr2[i] <= 10^6 Note: If you use \\"Test\\" or \\"Expected Output Button\\" use below example format Example: Input: arr1 = [3, 5, 7] arr2 = [1, 4, 6] Output: [1, 3, 4, 5, 6, 7] Explanation: The merged array will be [1, 3, 4, 5, 6, 7] after merging arr1 and arr2.","solution":"def merge_arrays(arr1, arr2): Merges two sorted arrays into a single sorted array. Parameters: arr1 (list): The first sorted array. arr2 (list): The second sorted array. Returns: list: A merged and sorted array. merged_array = [] i, j = 0, 0 # Use a two-pointer technique to merge the two sorted arrays while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged_array.append(arr1[i]) i += 1 else: merged_array.append(arr2[j]) j += 1 # Append remaining elements from arr1, if any while i < len(arr1): merged_array.append(arr1[i]) i += 1 # Append remaining elements from arr2, if any while j < len(arr2): merged_array.append(arr2[j]) j += 1 return merged_array"},{"question":"# Lucky Number Given an integer `n`, your task is to write a function that determines whether `n` is a \\"lucky number.\\" A lucky number is defined as follows: - Split the integer `n` into digits. - For `n` to be a lucky number, each digit must be unique when considered on their own or when combined with at least one adjacent digit to form a new number. For example, the number `1234` is a lucky number because all digits (1, 2, 3, 4) and all combinations of adjacent digits (12, 23, 34) are unique. However, the number `1124` is not a lucky number because the digit `1` is repeated, and the combinations `11` is also not unique. # Input The function will receive a single integer `n` where `1 <= n <= 10^9`. # Output The function should return `True` if the integer `n` is a lucky number, otherwise, it should return `False`. # Examples ```python is_lucky_number(1234) # True is_lucky_number(1124) # False is_lucky_number(13579) # True is_lucky_number(4321) # True is_lucky_number(987789) # False ```","solution":"def is_lucky_number(n): Determines whether the given integer n is a lucky number. A lucky number has all its digits and the combinations of adjacent digits unique. str_n = str(n) seen = set() # Check each digit for digit in str_n: if digit in seen: return False seen.add(digit) # Check each pair of adjacent digits for i in range(len(str_n) - 1): adj_pair = str_n[i:i+2] if adj_pair in seen: return False seen.add(adj_pair) return True"},{"question":"# Context and Definitions You are developing a new intricate Python library aimed at manipulating data streams, rivalling existing libraries such as `Pandas` and `Dask`. The ultimate goal is to efficiently handle large and potentially infinite streams of data with minimal memory overhead. To begin with, you introduced a new **data stream type** designed to work seamlessly with iterable data of any size. This data stream will be realized with a structure that conceptually parallels Python\'s generators. ```python class Stream: def __init__(self, iterable): self.iterator = iter(iterable) def next(self): return next(self.iterator) def take(self, n): result = [] try: for _ in range(n): result.append(next(self.iterator)) except StopIteration: pass return result ``` This fine new class can be employed to create a stream of data like this: ```python numbers = Stream(range(1, 6)) print(numbers.take(3)) # yields [1, 2, 3] print(numbers.take(3)) # yields [4, 5] ``` During a recent tech talk, you demonstrated that each **Stream** object allows consuming data chunk by chunk, which excited your peers. Consequently, they are eager to see additional features integrated. # The New Requirements The team demands new features in order to leverage this data stream type effectively. Specifically, they are interested in functions similar to those provided by Python\'s itertools like **filter**, **map** and **reduce** and also a utility method **from_iterable** that creates a `Stream` from any iterable source. Your next task is to implement the following functionalities: - `filter`: create a new `Stream` containing only the elements that satisfy a predicate function. - `map`: create a new `Stream` where every element is the result of applying a function provided as an argument. - `reduce`: combine all elements in the stream by repeatedly applying a binary function, until only a single value is left. - `from_iterable`: a convenient class method that produces a new `Stream` from any given iterable (such as a list, range, or generator). # Examples of Usage ```python numbers = Stream.from_iterable(range(1, 6)) evens = numbers.filter(lambda x: x % 2 == 0) print(evens.take(2)) # yields [2, 4] numbers = Stream.from_iterable(range(1, 6)) squares = numbers.map(lambda x: x ** 2) print(squares.take(3)) # yields [1, 4, 9] characters = Stream.from_iterable(\\"abcdef\\") ascii_values = characters.map(ord) .filter(lambda x: x % 2 == 0) .take(3) # yields [98, 100, 102] numbers = Stream.from_iterable([1, 2, 3, 4, 5]) total = numbers.reduce(lambda acc, x: acc + x, 0) print(total) # yields 15 ``` In other words: - The class method `Stream.from_iterable` should instantiate a new `Stream` from any iterable, such as `Stream.from_iterable(range(1, 6))`. - The `filter` method returns a new `Stream` including only the elements for which the provided function returns `True`. - The `map` method returns a new `Stream` resulting from applying a function to each element in the input stream. - The `reduce` method combines elements start-to-end using an accumulator and a binary function, ultimately producing a single value. Implement these functionalities in the `Stream` class to meet the requirements.","solution":"from functools import reduce as functools_reduce class Stream: def __init__(self, iterable): self.iterator = iter(iterable) def next(self): return next(self.iterator) def take(self, n): result = [] try: for _ in range(n): result.append(next(self.iterator)) except StopIteration: pass return result def filter(self, predicate): return Stream(x for x in self if predicate(x)) def map(self, func): return Stream(func(x) for x in self) def reduce(self, func, initializer=None): if initializer is None: return functools_reduce(func, self) else: return functools_reduce(func, self, initializer) def __iter__(self): return self def __next__(self): return self.next() @classmethod def from_iterable(cls, iterable): return cls(iterable)"},{"question":"Problem Statement Given a list of integers, determine the length of the longest consecutive sequence of integers within the list. Input The first line contains an integer T, the number of test cases. Each of the following T lines contains a list of space-separated integers. Output Output T lines, each line indicating the length of the longest consecutive sequence for the corresponding test case. Example Input 2 100 4 200 1 3 2 0 7 8 1 2 3 4 5 Output 4 6","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive sequence of integers in the list nums. if not nums: return 0 nums = set(nums) longest_streak = 0 for num in nums: # Only start counting streak if num is the beginning of a sequence if (num - 1) not in nums: current_num = num current_streak = 1 while (current_num + 1) in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak def process_input(input_string): Processes the input string and returns the output as specified in the problem. input_lines = input_string.strip().split(\\"n\\") T = int(input_lines[0]) output_lines = [] for i in range(1, T + 1): nums = list(map(int, input_lines[i].strip().split())) result = longest_consecutive_sequence(nums) output_lines.append(str(result)) return \\"n\\".join(output_lines)"},{"question":"You are given a bookshelf with N books. Each book is characterized by its width and height. You are required to arrange the books on shelves such that: - Each shelf can hold books with a total width of up to W. - There is no requirement on the number of shelves, as long as the arrangement adheres to the width constraint. - The total height of all shelves used to stack the books should be minimized. - The books should be placed on the shelves in the given order. Write a function that, given N books (where each book is represented as a pair of integers indicating width and height) and the maximum allowable width W of each shelf, returns the minimum total height of the bookshelf. ------ Input ------ The input consists of: - An integer N indicating the number of books. - A list of N pairs of integers where the i-th pair (W_i, H_i) represents the width and height of the i-th book. - An integer W representing the maximum allowable width of each shelf. ------ Output ------ Output a single integer indicating the minimum total height of the bookshelf. ------ Constraints ------ 1 ≤ N ≤ 10^3 1 ≤ W_i, H_i, W ≤ 10^3 ------ Example Input 1 ------ 4 (1, 3) (2, 4) (3, 2) (1, 6) 5 ------ Example Output 1 ------ 10 ------ Explanation 1 ------ One possible way to arrange the books is: - Shelf 1: [(1, 3), (2, 4)], height of this shelf is max(3, 4) = 4 - Shelf 2: [(3, 2), (1, 6)], height of this shelf is max(2, 6) = 6 Total height = 4 + 6 = 10 Another arrangement might not minimize the total height, hence the minimum total height for this example is 10.","solution":"def min_total_height(N, books, W): dp = [0] * (N + 1) for i in range(1, N + 1): width_sum = 0 height_max = 0 dp[i] = float(\'inf\') for j in range(i, 0, -1): width_sum += books[j-1][0] if width_sum > W: break height_max = max(height_max, books[j-1][1]) dp[i] = min(dp[i], dp[j-1] + height_max) return dp[N]"},{"question":"Given a list of integers, find the length of the longest subarray where the sum of the elements is less than a specified target value. If no such subarray exists, return 0. # Example Input: ``` 7 3 1 2 3 4 5 6 7 ``` Output: ``` 4 ``` Explanation: The subarrays and their sums are: - [1] = 1 (sum < 3) - [1, 2] = 3 (sum == 3, not less than) - [2] = 2 (sum < 3) - [2, 3] = 5 (sum > 3) - [3] = 3 (sum == 3, not less than) - [3, 4] = 7 (sum > 3) - [4] = 4 (sum > 3) - [4, 5] = 9 (sum > 3) - [5] = 5 (sum > 3) - [5, 6] = 11 (sum > 3) - [6] = 6 (sum > 3) - [6, 7] = 13 (sum > 3) - [7] = 7 (sum > 3) The longest subarrays that meet the condition are [1] and [2], both with lengths of 1. The maximum length of any such subarray is 1. # Input Format: - The first line contains two integers n and target, where n is the number of elements in the array and target is the target sum. - The second line contains n space-separated integers representing the elements of the array. # Constraints: - 1 <= n <= 10^5 - 1 <= elements of the array <= 10^4 - 1 <= target <= 10^9 # Output Format: - A single integer representing the length of the longest subarray with sum less than the target. If no such subarray exists, return 0.","solution":"def longest_subarray_with_sum_less_than_target(arr, target): Finds the length of the longest subarray where the sum of the elements is less than a specified target value. n = len(arr) max_length = 0 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum >= target and start <= end: current_sum -= arr[start] start += 1 max_length = max(max_length, end - start + 1) # If max_length is still 0, we return 0 since no valid subarray exists return max_length if max_length > 0 else 0 # Example usage if __name__ == \\"__main__\\": arr = [1, 2, 3, 4, 5, 6, 7] target = 3 print(longest_subarray_with_sum_less_than_target(arr, target)) # Output: 1"},{"question":"Spike and his friends want to explore the Dragon Lands, which are divided into N distinct regions. Each region is governed by a different dragon and every year, the dragons decide to exchange gifts among each other. A dragon prefers to give a gift to a dragon in a neighboring region if possible. A neighboring region is any region directly connected by a road. To facilitate this, you need to help the dragons determine the fewest number of gifts each dragon needs to send to make sure that every region receives at least one gift and as few total gifts are sent as possible. The regions are connected by M bidirectional roads, ensuring that they can all be reached from any starting region (i.e., the regions form a connected graph). Your task is to output the minimum number of gifts required. -----Input----- The first line of input contains two integers, N (1 leq N leq 100000) and M (0 leq M leq 200000), the number of regions and roads, respectively. The next M lines each contain two integers U_ i and V_ i (1leq U_ i, V_ i leq N; U_ i neq V_ i), representing that there is a road between regions U_ i and V_ i. It is guaranteed that the regions form a connected undirected graph. -----Output----- Output a single integer, the minimum number of gifts that need to be sent. -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 Sample Output 1: 2 Sample Input 2: 3 2 1 2 1 3 Sample Output 2: 1","solution":"def minimum_gifts(N, M, roads): This function returns the minimum number of gifts that need to be sent. :param N: int - the number of regions :param M: int - the number of roads :param roads: List[Tuple[int, int]] - list of tuples representing roads between regions :return: int - the minimum number of gifts # For a connected graph, the minimal spanning tree has exactly N-1 edges return N - 1"},{"question":"You are given a list of integers representing the heights of a group of students. You need to determine the maximum difference in height between any two students while ensuring that all taller students are standing behind shorter students when counted from any two positions in the list. In other words, find the maximum difference `max(height_j - height_i)` where `j > i`. Write a function `max_height_difference(heights)` that returns the maximum difference under the given constraints. If the list is empty or contains only one element, return 0. # Function Signature ```python def max_height_difference(heights: List[int]) -> int: ``` # Input - `heights (List[int])`: A list of integers representing the heights of students (0 <= heights[i] <= 1000). # Output - `int`: The maximum difference in height between any two students such that the taller student should come after the shorter one in the list. Return 0 if no such pair exists. # Example ```python # Example 1 heights = [1, 2, 10, 4, 5] # The maximum difference is `10 - 1 = 9` print(max_height_difference(heights)) # Output: 9 # Example 2 heights = [1, 1, 1, 1] # All heights are the same, so the maximum difference is 0 print(max_height_difference(heights)) # Output: 0 # Example 3 heights = [20] # Only one student, so the maximum difference is 0 print(max_height_difference(heights)) # Output: 0 ```","solution":"from typing import List def max_height_difference(heights: List[int]) -> int: Returns the maximum difference in height between any two students such that the taller student comes after the shorter one in the list. if not heights or len(heights) < 2: return 0 min_height = heights[0] max_diff = 0 for height in heights[1:]: max_diff = max(max_diff, height - min_height) min_height = min(min_height, height) return max_diff"},{"question":"Sam is inspired by geometrical shapes and was asked to create a program that prints a diamond shape using stars (\'*\'). Given an integer n, write a function that prints a diamond with 2n-1 rows. The diamond should have the widest point of 2n-1 stars in the middle row. Example 1: Input: 3 Output: * *** ***** *** * Example 2: Input: 4 Output: * *** ***** ******* ***** *** * Your Task: You don\'t need to input anything. Complete the function printDiamond which takes an integer n as the input parameter and prints the diamond pattern. Constraints: 1 <= N <= 10","solution":"def printDiamond(n): Prints a diamond shape with 2n-1 rows using stars (\'*\'). The widest point will have 2n-1 stars. :param n: An integer representing the half-width of the diamond shape. if n < 1 or n > 10: raise ValueError(\\"The input n must be between 1 and 10 inclusive.\\") for i in range(n): print(\' \' * (n - i - 1) + \'*\' * (2 * i + 1)) for i in range(n-2, -1, -1): print(\' \' * (n - i - 1) + \'*\' * (2 * i + 1))"},{"question":"Given a list of city coordinates and their respective temperatures in Celsius, one hot day in summer, your goal is to determine the warmest city from the list. If there are multiple cities with the same highest temperature, select the one that comes first in the list. Input: The input begins with a positive integer N (1 ≤ N ≤ 10^5), indicating the number of cities. The next N lines each contain a string representing the city name (no spaces, up to 50 characters) followed by an integer Ti (−50 ≤ Ti ≤ 50), indicating the temperature in Celsius for that city. Output: Print the name of the warmest city. SAMPLE INPUT 3 London 25 Berlin 30 Madrid 30 SAMPLE OUTPUT Berlin","solution":"def find_warmest_city(n, city_data): Determines the warmest city from given city data. Parameters: n (int): Number of cities. city_data (list of tuples): List containing tuples with city names and their respective temperatures. Returns: str: The name of the warmest city. warmest_city = None max_temperature = -51 # Temperature less than the lowest possible value to ensure comparison works for city, temp in city_data: if temp > max_temperature: max_temperature = temp warmest_city = city return warmest_city # To use the function: n = 3 city_data = [(\\"London\\", 25), (\\"Berlin\\", 30), (\\"Madrid\\", 30)] print(find_warmest_city(n, city_data)) # Expected Output: Berlin"},{"question":"Polycarpus is exploring the concept of \\"islands\\" in a matrix. He has a matrix of dimensions n x m where each cell contains either \'1\' (land) or \'0\' (water). An island is defined as a group of vertically or horizontally adjacent cells containing \'1\'. Diagonally adjacent cells do not count as part of the same island. Help Polycarpus find the number of islands in the given matrix. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 500), the dimensions of the matrix. - The following n lines contain m characters each (\'0\' or \'1\'), representing the matrix. Output: - Print a single integer, the number of islands in the given matrix. Examples Input: 4 5 11000 11000 00100 00011 Output: 3 Input: 3 3 111 010 111 Output: 1 Note: In the first sample, the islands are: - Top-left island (cells with coordinates (1, 1), (1, 2), (2, 1), (2, 2)) - Middle island (cell with coordinates (3, 3)) - Bottom-right island (cells with coordinates (4, 4), (4, 5)) In the second sample, all \'1\'s are connected either directly or indirectly via adjacent cells, forming a single island.","solution":"def count_islands(matrix): n = len(matrix) m = len(matrix[0]) def dfs(x, y): if x < 0 or x >= n or y < 0 or y >= m or matrix[x][y] == \'0\': return matrix[x][y] = \'0\' directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dx, dy in directions: dfs(x + dx, y + dy) island_count = 0 for i in range(n): for j in range(m): if matrix[i][j] == \'1\': dfs(i, j) island_count += 1 return island_count"},{"question":"You are given a list of integers nums and an integer target. Your task is to determine whether there are two distinct indices i and j in nums such that nums[i] + nums[j] is equal to target. If such indices exist, return a tuple (i, j) where i should be less than j. If no such pair exists, return an empty tuple. -----Input----- - The first line of the input contains an integer n (1 ≤ n ≤ 100,000) representing the number of elements in the list. - The second line contains n integers representing the elements of the list nums (−10^9 ≤ nums[i] ≤ 10^9). - The third line contains a single integer target representing the desired sum (−10^9 ≤ target ≤ 10^9). -----Output----- Print a tuple (i, j) where 0 ≤ i < j < n and nums[i] + nums[j] = target. If no such indices exist, print an empty tuple. -----Examples----- Input 5 2 7 11 15 1 9 Output (0, 1) Input 3 3 3 4 6 Output (0, 1) Input 4 1 2 3 4 8 Output () -----Note----- In the first example, nums[0] + nums[1] = 2 + 7 = 9, which is equal to the target. In the second example, nums[0] + nums[1] = 3 + 3 = 6, which is equal to the target. In the third example, there are no two distinct indices that sum up to 8, so the result is an empty tuple.","solution":"def find_two_sum_indices(nums, target): Returns a tuple (i, j) where nums[i] + nums[j] equals to the target, and i < j. If no such pair exists, returns an empty tuple. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"Given a string S and a pattern P, determine if the pattern matches the entire string. The pattern may contain \'.\' which matches any single character and \'*\' which matches zero or more of the preceding element. The matching should cover the entire input string (not partial). Examples: 1. Input: S = \\"aa\\" P = \\"a\\" Output: false Explanation: \\"a\\" does not match the entire string \\"aa\\". 2. Input: S = \\"aa\\" P = \\"a*\\" Output: true Explanation: \'*\' means zero or more of the preceding element, \'a\'. Therefore, by repeating \'a\' once, \'aa\' is matched. 3. Input: S = \\"ab\\" P = \\".*\\" Output: true Explanation: \\".*\\" means \\"zero or more (*) of any character (.)\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isMatch` which takes two strings S and P as parameters and returns a boolean. `isMatch` should return true if the pattern matches the entire string and false otherwise. Expected Time Complexity: O(N*M) where N is the length of the string and M is the length of the pattern. Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ S.length ≤ 1000 1 ≤ P.length ≤ 100","solution":"def isMatch(s, p): Returns whether the pattern p matches the entire string s. m, n = len(s), len(p) # DP table where dp[i][j] will be True if the first i characters in s match the first j characters in p dp = [[False] * (n + 1) for _ in range(m + 1)] # Empty string and empty pattern are a match dp[0][0] = True # Handle patterns like a*, a*b*, a*b*c* etc. for j in range(1, n + 1): if p[j - 1] == \'*\': dp[0][j] = dp[0][j - 2] for i in range(1, m + 1): for j in range(1, n + 1): if p[j - 1] == \'.\' or p[j - 1] == s[i - 1]: dp[i][j] = dp[i - 1][j - 1] elif p[j - 1] == \'*\': dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] if p[j - 2] == s[i - 1] or p[j - 2] == \'.\' else False) return dp[m][n]"},{"question":"Given a list of integers, determine if the list is sorted in non-decreasing order. If the list is sorted, output \\"YES\\", otherwise output \\"NO\\". -----Constraints----- - The list contains integers within the range (-10^9) to (10^9). - The list can have 1 to (10^5) elements. -----Input----- Input is given from Standard Input in the following format: n a1 a2 a3 ... an Where: - n is the number of elements in the list. - (a1, a2, ..., an) are the elements of the list. -----Output----- Print \\"YES\\" if the list is sorted in non-decreasing order, otherwise print \\"NO\\". -----Sample Input----- 5 1 2 2 4 5 -----Sample Output----- YES","solution":"def is_sorted(lst): Determines if the list is sorted in non-decreasing order. :param lst: List of integers. :return: \\"YES\\" if sorted, otherwise \\"NO\\". for i in range(1, len(lst)): if lst[i] < lst[i - 1]: return \\"NO\\" return \\"YES\\""},{"question":"Given a binary tree, you need to implement a function to determine the diameter of the tree. The diameter (or width) of a binary tree is the number of nodes on the longest path between two end nodes in the tree. Input: - A binary tree representation. Output: - An integer which is the diameter of the binary tree. Implementation: - You are required to implement a function `findDiameter(root)` which takes the root node of the binary tree as an input and returns the diameter of the tree. Example: ```python class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def findDiameter(root): # Your code goes here # Example Input root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5) # Example Output print(findDiameter(root)) # Output should be 4 ``` Constraints: - The number of nodes in the tree will be in the range `[1, 10^4]`. - The value of each node will be in the range `[-10^4, 10^4]`. Note: - In the given example, the longest path is from node 4 to node 5 through node 2, which includes nodes 4, 2, 1, and 3. Thus, there are 4 nodes on this path and hence the diameter of the tree is 4.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def findDiameter(root): Returns the diameter of the binary tree. def depth(node): nonlocal diameter if not node: return 0 left_depth = depth(node.left) right_depth = depth(node.right) diameter = max(diameter, left_depth + right_depth + 1) return max(left_depth, right_depth) + 1 diameter = 0 depth(root) return diameter"},{"question":"Shapur is known to be a coding genius, but his younger sister Roya is known for her exceptional pattern-recognition skills. One day, Roya was given a special type of problem by her teacher. Roya\'s teacher provided her with a text and a specific pattern. The goal is for Roya to count the number of times this pattern appears as a subsequence in the given text. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \\"abc\\", \\"abg\\", \\"bdf\\" are subsequences of \\"abcdefg\\", but not \\"acb\\". Roya must write a program to help her solve this task efficiently. Input The input consists of two lines. The first line contains a single string `text` with length between 1 and 1000, inclusive. The second line contains a single string `pattern` with length between 1 and 100, inclusive. Both strings contain only lowercase Latin letters. Output Output a single integer indicating the number of times the `pattern` appears as a subsequence in the `text`. Examples: Input abcabc abc Output 4 Input abbab ab Output 4 Input xyz y Output 1 Explanation of Examples: 1. In the first example, \\"abc\\" appears as a subsequence in the following ways: (abc), (abc), (abc), and (abc). Thus, the output is 4. 2. In the second example, \\"ab\\" appears as a subsequence in \\"abbab\\" in the following ways: (ab), (a-bb), (a-bab), and (abb-ab). Thus, the output is 4. 3. In the third example, \\"y\\" appears as a subsequence in \\"xyz\\" exactly 1 time. Thus, the output is 1. Note: You can use dynamic programming to solve this problem efficiently.","solution":"def count_subsequences(text, pattern): Return the number of times `pattern` appears as a subsequence in `text`. len_text = len(text) len_pattern = len(pattern) # Create a DP table with (len_pattern + 1) rows and (len_text + 1) columns dp = [[0] * (len_text + 1) for _ in range(len_pattern + 1)] # Every substring can match with an empty subsequence for j in range(len_text + 1): dp[0][j] = 1 for i in range(1, len_pattern + 1): for j in range(1, len_text + 1): if pattern[i - 1] == text[j - 1]: dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1] else: dp[i][j] = dp[i][j - 1] return dp[len_pattern][len_text]"},{"question":"Write a function that takes in a string of space-separated words and returns the length of the shortest word(s). The string will never be empty and you do not need to account for different data types. More generally: Given a string `s` of space-separated words, the task is to identify the length of the shortest word in the string. **Input:** - `s`: A single string of space-separated words (1 <= len(s) <= 10^4). **Output:** - Return an integer representing the length of the shortest word. Examples: ``` find_shortest_word(\\"The quick brown fox jumps over the lazy dog\\") => 3 find_shortest_word(\\"Silicon Valley coding challenges are really fun\\") => 3 find_shortest_word(\\"To be or not to be that is the question\\") => 2 find_shortest_word(\\"Lorem ipsum dolor sit amet consectetur adipiscing elit\\") => 2 ```","solution":"def find_shortest_word(s): Returns the length of the shortest word in a string of space-separated words. Parameters: s (str): A string of space-separated words. Returns: int: The length of the shortest word in the string. words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"A city is planning to host a marathon race and they need to categorize roads based on their lengths. There are n roads in the city, and each road has a length associated with it. The city\'s planning committee has decided that any road with a length greater than or equal to the average length of all roads is considered a \\"long road\\". Your task is to determine how many \\"long roads\\" are present in the city. Input The first line of input contains an integer n (1 ≤ n ≤ 100) — the number of roads in the city. The next line contains n integers ranging from 1 to 1000 (inclusive) representing the lengths of each road. Output Print a single number — the number of roads that are categorized as \\"long roads\\". SAMPLE INPUT 5 100 200 300 400 500 SAMPLE OUTPUT 3 Explanation The average length of the roads is (100 + 200 + 300 + 400 + 500) / 5 = 300. The roads with lengths 300, 400, and 500 are considered \\"long roads\\".","solution":"def count_long_roads(n, roads): Returns the number of \\"long roads\\", i.e., roads with length greater than or equal to the average length of all roads. Parameters: n (int): The number of roads in the city. roads (list of int): The lengths of each road. Returns: int: The number of \\"long roads\\". average_length = sum(roads) / n long_road_count = sum(1 for road in roads if road >= average_length) return long_road_count"},{"question":"A large software distribution company has a series of warehouses strategically placed to handle different regions. The warehouses need to exchange inventory information at the end of each day to ensure balanced stock levels across the network. The company uses a specific protocol to relay messages between these warehouses. Each warehouse is represented by a node in a network graph. A directed edge between two nodes means that the warehouse at the start of the edge can send a direct message to the warehouse at the end of the edge. The time it takes to send a message is represented by a weight on the edge. Your task is to determine the minimum total time required to send an update from a given source warehouse to all other warehouses in the network. The network is guaranteed to have a directed path from the source warehouse to every other warehouse, ensuring that it is possible to send updates to all warehouses. Input The first line contains two integers n and m (1 ≤ n ≤ 100000, 1 ≤ m ≤ 500000), where n is the number of warehouses (nodes) and m is the number of direct communication links (edges). The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing that there is a directed edge from node u to node v with a weight of w. The last line contains a single integer s (1 ≤ s ≤ n), the source warehouse from which updates are sent. Output Print the minimum total time required to send an update from the source warehouse s to all other warehouses. If a warehouse cannot be reached from the source warehouse, print -1 for that warehouse. Examples Input 5 6 1 2 2 1 3 4 2 4 7 2 5 1 3 5 5 5 4 3 1 Output 0 2 4 6 3","solution":"import heapq def dijkstra(n, m, edges, s): adj_list = [[] for _ in range(n + 1)] for u, v, w in edges: adj_list[u].append((v, w)) dist = [float(\'inf\')] * (n + 1) dist[s] = 0 min_heap = [(0, s)] while min_heap: current_dist, u = heapq.heappop(min_heap) if current_dist > dist[u]: continue for v, weight in adj_list[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(min_heap, (distance, v)) return [0 if i == s else (dist[i] if dist[i] != float(\'inf\') else -1) for i in range(1, n + 1)] # Example Usage: # n = 5 # m = 6 # edges = [(1, 2, 2), (1, 3, 4), (2, 4, 7), (2, 5, 1), (3, 5, 5), (5, 4, 3)] # s = 1 # print(dijkstra(n, m, edges, s)) # Output: [0, 2, 4, 6, 3]"},{"question":"Problem Statement In the quaint town of Pascalville, the local library computer runs on a very unique scheduling system. Instead of conventional date and time, it keeps track of events using \\"complexity intervals.\\" Each complexity interval is defined by two numbers: a starting complexity and an ending complexity. Many users have reported issues with booking overlapping intervals and the library has tasked you with generating a program to ensure no two events overlap. They define two intervals [a, b] and [c, d] as overlapping if there exists some complexity x such that a <= x <= b and c <= x <= d. Your task is to write a program that takes a list of event intervals and checks if any two intervals overlap. If so, output `YES`; otherwise, output `NO`. Constraints * 1 <= N <= 100 * 0 <= a < b <= 10000 * 0 <= c < d <= 10000 Input Each data set is input in the following format: N a1 b1 a2 b2 ... aN bN N is an integer representing the number of complexity intervals. The intervals are input over N lines with each line containing two integers ai and bi representing the starting and ending complexities of an event. Output Output `YES` if any two intervals overlap and `NO` otherwise. Example Input 3 1 5 6 10 5 6 Output NO Input 4 1 5 2 6 8 9 5 7 Output YES Note: In the first example, there are no overlapping intervals. In the second example, the first interval [1, 5] overlaps with the second interval [2, 6], so the output is `YES`.","solution":"def check_intervals_overlap(intervals): Returns \'YES\' if any two intervals overlap, otherwise \'NO\'. intervals.sort(key=lambda x: x[0]) for i in range(len(intervals) - 1): if intervals[i][1] > intervals[i+1][0]: return \\"YES\\" return \\"NO\\" def parse_input(input_string): input_lines = input_string.strip().split(\'n\') N = int(input_lines[0]) intervals = [] for i in range(1, N + 1): a, b = map(int, input_lines[i].split()) intervals.append((a, b)) return intervals"},{"question":"Implement a function that takes a string input and returns the first non-repeating character. If all characters are repeating, return an underscore (_). ```JS Examples: 1) \\"leetcode\\" => \'l\' (the first non-repeating character) 2) \\"loveleetcode\\" => \'v\' (the first non-repeating character) 3) \\"aabbcc\\" => \'_\' (all characters are repeating) 4) \\"abcdabcd\\" => \'_\' (all characters are repeating) ```","solution":"def first_non_repeating_character(s): Returns the first non-repeating character from the string s, or \'_\' if all characters are repeating. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first non-repeating character for char in s: if char_count[char] == 1: return char # If all characters are repeating return \'_\'"},{"question":"Mike is working on a project where he needs to synchronize data between two systems. He is writing a script to monitor changes in a list of integers. Every time an integer in the list changes, Mike\'s script should recognize the change and keep the list updated by making the necessary modifications in another system. The script needs to handle a special set of commands efficiently. Commands: - \\"add x\\" - Add the integer x to the end of the list. - \\"del x\\" - Delete the first occurrence of the integer x from the list. - \\"mod x y\\" - Replace the first occurrence of the integer x with integer y in the list. - \\"rep\\" - Output the current state of the list. Initially, the list is empty. Your task is to implement the script in such a way that it efficiently executes the commands and maintains the list\'s integrity through the operations. Input - The number of commands n (1 ≤ n ≤ 100,000). - n lines, each of which contains one of the commands described above. Output - For each \\"rep\\" command, output the current state of the list as a space-separated sequence of integers. If the list is empty, output an empty line. Example Input ``` 10 add 4 add 2 add 7 rep del 2 rep mod 7 3 rep del 5 rep ``` Output ``` 4 2 7 4 7 4 3 4 3 ``` Note In this scenario, Mike needs to continuously add, remove, and modify the integers in the list based on the commands given. After each \\"rep\\" command, the current state of the list is output. The goal is to process each command efficiently to keep the list updated and accurate.","solution":"def process_commands(n, commands): lst = [] result_lines = [] for command in commands: parts = command.split() cmd = parts[0] if cmd == \\"add\\": x = int(parts[1]) lst.append(x) elif cmd == \\"del\\": x = int(parts[1]) if x in lst: lst.remove(x) elif cmd == \\"mod\\": x = int(parts[1]) y = int(parts[2]) try: index = lst.index(x) lst[index] = y except ValueError: pass # x not in list, do nothing elif cmd == \\"rep\\": result_lines.append(\' \'.join(map(str, lst))) return result_lines"},{"question":"Implement a function that takes an integer as input and returns its representation in Roman numerals. The input integer will be between 1 and 3999, inclusive. Example: ```python int_to_roman(58) # => returns \\"LVIII\\" int_to_roman(1994) # => returns \\"MCMXCIV\\" ``` ```f# intToRoman 58 // => returns \\"LVIII\\" intToRoman 1994 // => returns \\"MCMXCIV\\" ``` The Roman numeral system uses the following symbols: - I: 1 - V: 5 - X: 10 - L: 50 - C: 100 - D: 500 - M: 1000 And these combinations are used for subtraction: - IV: 4 - IX: 9 - XL: 40 - XC: 90 - CD: 400 - CM: 900","solution":"def int_to_roman(num): Converts an integer to its Roman numeral representation. :param num: integer value to be converted to Roman numeral (1 <= num <= 3999) :type num: int :return: Roman numeral as a string :rtype: str val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = \'\' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"question":"Suppose you are managing a database of popular songs. Each song has a unique identifier, a title, and a duration in seconds. You are tasked with creating a system to store the songs and perform specific operations efficiently. Your system should support the following operations: 1. Add a new song to the database. 2. Delete an existing song from the database by its unique identifier. 3. Find the total duration of all songs currently in the database. 4. Find the song with the longest duration in the database. You need to implement a class named `SongDatabase` with the following methods: - `add_song(song_id: int, title: str, duration: int) -> None`: Adds a new song with the given unique identifier, title, and duration. - `delete_song(song_id: int) -> None`: Removes the song with the specified unique identifier from the database. - `total_duration() -> int`: Returns the sum of the durations of all songs currently in the database. - `longest_song() -> Tuple[int, str, int]`: Returns a tuple containing the unique identifier, title, and duration of the song with the longest duration in the database. If there are multiple songs with the same longest duration, return the one that was added first. You can assume that all song titles are unique strings and that no two songs will have the same unique identifier. Here\'s an example of how your class should behave: ```python db = SongDatabase() db.add_song(1, \\"Song One\\", 210) db.add_song(2, \\"Song Two\\", 320) db.add_song(3, \\"Song Three\\", 300) print(db.total_duration()) # Output: 830 print(db.longest_song()) # Output: (2, \\"Song Two\\", 320) db.delete_song(2) print(db.total_duration()) # Output: 510 print(db.longest_song()) # Output: (3, \\"Song Three\\", 300) ``` # Constraints: - Unique identifier `song_id` is a positive integer (1 ≤ song_id ≤ 109). - Song title `title` is a string with a length between 1 and 100 characters. - Duration `duration` is an integer representing the duration of the song in seconds (1 ≤ duration ≤ 104). - All method calls will be valid, i.e., no deletion will be attempted for a non-existent `song_id`.","solution":"from typing import Tuple class SongDatabase: def __init__(self): self.songs = {} def add_song(self, song_id: int, title: str, duration: int) -> None: self.songs[song_id] = (title, duration) def delete_song(self, song_id: int) -> None: if song_id in self.songs: del self.songs[song_id] def total_duration(self) -> int: return sum(duration for title, duration in self.songs.values()) def longest_song(self) -> Tuple[int, str, int]: if not self.songs: return () longest = max(self.songs.items(), key=lambda item: item[1][1]) return (longest[0], longest[1][0], longest[1][1])"},{"question":"XOR Subarrays You are given an array of integers A of length n and an integer k. Your task is to find the number of subarrays of A such that the XOR of every element in the subarray is exactly equal to k. Recall that the XOR of a sequence of numbers is calculated by performing the bitwise XOR operation on all the numbers in the sequence. For example, the XOR of the sequence [1, 2, 3] is 1 oplus 2 oplus 3 = 0. Input The input consists of a single test case. The first line contains two space-separated integers n and k (1 leq n, k leq 100000). The second line contains n space-separated integers A_i (0 leq A_i leq 100000) representing the array. Output Output a single integer representing the number of subarrays such that the XOR of every element in the subarray is exactly equal to k. Sample Input 1 5 4 3 4 7 3 0 Sample Output 1 3 Sample Input 2 3 1 1 2 3 Sample Output 2 2 Explanation In the first sample, the subarrays with XOR equal to 4 are: - [4] - [3, 4, 7, 3] - [3, 0] In the second sample, the subarrays with XOR equal to 1 are: - [1] - [2, 3] Each output corresponds to the number of valid subarrays.","solution":"def count_xor_subarrays(n, k, A): count = 0 prefix_xor = 0 freq = {0: 1} for num in A: prefix_xor ^= num required_xor = prefix_xor ^ k if required_xor in freq: count += freq[required_xor] if prefix_xor in freq: freq[prefix_xor] += 1 else: freq[prefix_xor] = 1 return count"},{"question":"Write a program that determines if a string containing only parentheses is valid. A string is considered valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. An empty string is also considered valid. Examples of valid strings: `()`, `()[]{}` Examples of invalid strings: `(}`, `([)]` -----Input:----- The input contains a single string containing only the characters `\'(\'`, `\')\'`, `\'[\'`, `\']\'`, `\'{\'`, and `\'}\'`. The length of the string is between 1 and 10^4. -----Output:----- Output a single line containing the word `\\"VALID\\"` if the string is valid, and the word `\\"INVALID\\"` otherwise. -----Constraints:----- - The length of the string is between 1 and 10^4. -----Sample input----- ([]){()} -----Sample output----- VALID -----Sample input----- ([)] -----Sample output----- INVALID","solution":"def is_valid_parentheses(s): Determine if the input string containing only parentheses is valid. stack = [] matching_parentheses = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching_parentheses.values(): stack.append(char) elif char in matching_parentheses: if stack == [] or stack.pop() != matching_parentheses[char]: return \\"INVALID\\" else: return \\"INVALID\\" return \\"VALID\\" if stack == [] else \\"INVALID\\""},{"question":"There is a rectangular field with dimensions `length` and `width`. A farmer wants to divide this field into smaller plots of equal size such that: 1. The areas of all smaller plots are integers. 2. The sides of the smaller plots must be parallel to the sides of the original field. 3. The size of each smaller plot should be as large as possible. Given the integers `length` and `width`, determine the side length of the largest possible square plot that can be evenly divided from the field. -----Constraints----- - 1 ≤ length, width ≤ 100 -----Input----- Input is given from Standard Input in the following format: length width -----Output----- Print the side length of the largest square plot. -----Sample Input----- 12 15 -----Sample Output----- 3 The largest square plot that evenly divides both sides has a side length of 3.","solution":"import math def largest_square_plot(length, width): Returns the side length of the largest possible square plot that can evenly divide the given rectangular field. return math.gcd(length, width)"},{"question":"-----Input----- The first line of input contains three non-negative integers n, m, and k (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 10^{5}), where n is the number of rows and m is the number of columns in a grid, and k is the number of operations. Each of the next k lines contains an operation of the following types: 1. \\"0 x y\\": painting the cell at row x and column y black (0 ≤ x < n, 0 ≤ y < m). 2. \\"1 x y\\": painting the cell at row x and column y white (0 ≤ x < n, 0 ≤ y < m). Initially, all cells in the grid are white. -----Output----- The output should start with an integer denoting the number of cells that are black in the grid after all the operations are performed. Then the output should contain exactly that many lines, each containing two integers x and y, denoting the row and column of each black cell. The cells should be listed in lexicographical order (i.e., first by row, then by column). -----Examples----- Sample Input 1: 3 3 5 0 0 0 0 1 1 1 0 0 0 2 2 0 0 1 Sample Output 1: 3 0 1 1 1 2 2 Sample Input 2: 2 2 4 0 0 0 0 0 1 1 0 0 0 1 1 Sample Output 2: 2 0 1 1 1","solution":"def process_operations(n, m, k, operations): Processes the given operations on an n x m grid and returns the number of black cells and their coordinates in lexicographical order. :param int n: number of rows in the grid :param int m: number of columns in the grid :param int k: number of operations :param list operations: list of operations (each as a list of format [type, row, col]) :return: tuple of the number of black cells and list of their coordinates (row, col) :rtype: (int, list of tuple) grid = [[0 for _ in range(m)] for _ in range(n)] # Initialize all cells to white (0) for operation in operations: t, x, y = operation if t == 0: grid[x][y] = 1 # Paint cell black elif t == 1: grid[x][y] = 0 # Paint cell white # Collect coordinates of black cells black_cells = [] for i in range(n): for j in range(m): if grid[i][j] == 1: black_cells.append((i, j)) black_cells.sort() # Sort lexicographically (first by row, then by column) return len(black_cells), black_cells # Example usage: n, m, k = 3, 3, 5 operations = [ [0, 0, 0], [0, 1, 1], [1, 0, 0], [0, 2, 2], [0, 0, 1] ] # Expected output: (3, [(0, 1), (1, 1), (2, 2)]) result = process_operations(n, m, k, operations) print(result)"},{"question":"Write a function that takes a list of integers and returns the length of the longest subarray where the difference between the maximum and minimum values is exactly 1. For example, given the list `[1, 2, 2, 1, 3, 4, 2, 1]`, the function should return `4` because the longest subarray where the maximum minus the minimum is `1` is `[1, 2, 2, 1]`. If the list is empty or does not contain such a subarray, return `0`. You can assume that the list contains only non-negative integers.","solution":"def longest_subarray_with_difference_one(nums): if not nums: return 0 max_len = 0 count = {} left = 0 for right in range(len(nums)): count[nums[right]] = count.get(nums[right], 0) + 1 while max(count.keys()) - min(count.keys()) > 1: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 if max(count.keys()) - min(count.keys()) == 1: max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are given a list of integers `nums` and an integer `target`. Your task is to find all unique pairs of integers in the list that add up to the `target`. Return the pairs as a list of tuples, where each tuple represents a pair. The pairs should be sorted in ascending order within the list, but the numbers within each pair should also be sorted in ascending order. For example, given the list `nums = [4, 7, 11, -1, 4, -6, -5, 2, 8]` and the `target = 3`, the pairs that add up to `3` are: - (4, -1) - (-5, 8) So the result should be `[(-5, 8), (-1, 4)]`. Note: - If the same pair appears twice, such as (4,-1) and (-1,4), consider them the same and include only one of them. - Each number in the input list can be used at most once in forming pairs. - The result should not include duplicate pairs. Write a function: ```python def find_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: pass ``` # Example ```python assert find_pairs_with_sum([4, 7, 11, -1, 4, -6, -5, 2, 8], 3) == [(-5, 8), (-1, 4)] assert find_pairs_with_sum([1, 5, 2, -2, 3, -1], 4) == [(1, 3), (2, 2), (-2, 6)] ```","solution":"from typing import List, Tuple def find_pairs_with_sum(nums: List[int], target: int) -> List[Tuple[int, int]]: Finds all unique pairs in the list that sum up to the target. nums_sorted = sorted(nums) seen = set() pairs = set() for num in nums_sorted: complement = target - num if complement in seen: pair = tuple(sorted((num, complement))) pairs.add(pair) seen.add(num) return sorted(pairs)"},{"question":"Valeria is exploring palindrome strings and their fascinating properties. She is tasked with writing a program that can transform any given string into a palindrome. The transformation involves only two allowed operations: inserting a character at any position in the string or deleting a character from any position in the string. Valeria aims to minimize the number of operations required to make the initial string a palindrome. Your task is to help Valeria by writing a program that determines the minimum number of insertions or deletions required to convert the given string into a palindrome. -----Input----- You are given a single string s (1 ≤ |s| ≤ 100), consisting of lowercase English letters. -----Output----- Print a single integer — the minimum number of operations required to transform the given string into a palindrome. -----Examples----- Input abc Output 2 Input aebcbda Output 2","solution":"def min_operations_to_palindrome(s): Returns the minimum number of operations required to make the string s a palindrome. def lcs(X, Y, m, n): dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][j] # Reverse the string reversed_s = s[::-1] # Find the length of the longest common subsequence lcs_length = lcs(s, reversed_s, len(s), len(s)) # Minimum operations to make the string palindrome return len(s) - lcs_length"},{"question":"**Problem: Shipping Container Optimization** You are given a list of containers with their dimensions (length, width, height) in meters. Each container can contain up to a specified weight (in kilograms). Your task is to determine the optimal way to ship a given set of items, such that you minimize the total number of containers used. Each item has a specified volume (length, width, height) in meters and weight in kilograms. Write a function that takes a list of containers and their properties, and a list of items with their properties. The function should return the minimum number of containers required to ship all the items. If it is not possible to fit all the items within the given containers, return -1. **Constraints:** - You cannot split items between containers. - Items and containers must be placed in such a way that they fit entirely within a container (considered 3D orthogonal packing problem). - You can assume that rotations of items and containers are not allowed (i.e., items and containers must be placed in the given orientation). **Function Signature:** ```python def minimum_containers(containers: List[Tuple[int, int, int, int]], items: List[Tuple[int, int, int, int]]) -> int: ``` - `containers` is a list of tuples where each tuple contains four integers representing the dimensions (length, width, height) and weight limit of a container. - `items` is a list of tuples where each tuple contains four integers representing the dimensions (length, width, height) and weight of an item. **Example:** Input: ```python containers = [ (2, 2, 2, 50), (3, 2, 2, 75) ] items = [ (1, 1, 1, 10), (2, 1, 1, 20), (1, 2, 1, 25), (3, 2, 1, 50) ] ``` Output: ```python 2 ``` Explanation: - One possible way to pack the items optimally is: - Container 1 with (3, 2, 2, 75): contains items with weights 10, 20, 25 -> total weight 55. - Container 2 with (2, 2, 2, 50): contains items with weight 50 -> total weight 50. - This requires 2 containers in total.","solution":"from typing import List, Tuple def minimum_containers(containers: List[Tuple[int, int, int, int]], items: List[Tuple[int, int, int, int]]) -> int: # Helper function to check if an item can fit in a container def can_fit(item, container): return (item[0] <= container[0] and item[1] <= container[1] and item[2] <= container[2] and item[3] <= container[3]) # Sort containers by volume (descending) and weight limit (descending) containers = sorted(containers, key=lambda x: (x[0] * x[1] * x[2], x[3]), reverse=True) # Sort items by volume (descending) and weight (descending) items = sorted(items, key=lambda x: (x[0] * x[1] * x[2], x[3]), reverse=True) # Initialize the container count container_count = 0 while items: container_found = False for i, container in enumerate(containers): total_weight = 0 volume = container[0] * container[1] * container[2] remaining_items = [] for item in items: if can_fit(item, container) and total_weight + item[3] <= container[3]: total_weight += item[3] volume -= item[0] * item[1] * item[2] else: remaining_items.append(item) if total_weight > 0: container_count += 1 items = remaining_items container_found = True break if not container_found: return -1 return container_count"},{"question":"You are given an array of integers where elements may occur more than once. Your task is to print the x most frequently occurring elements in descending order of their frequency. If two elements have the same frequency, print the smaller element first. Input First line contains T (number of test cases). 1 ≤ T ≤ 100. For each test case: - First line contains an integer n (number of elements in the array). 1 ≤ n ≤ 1000. - Second line contains n space-separated integers (elements of the array). Each integer is between -1000 and 1000. - Third line contains an integer x (number of top frequent elements to print). 1 ≤ x ≤ n. Output For each test case, print the x most frequent elements in descending order of their frequency. If two elements have the same frequency, the smaller element should appear first. SAMPLE INPUT 2 10 1 2 2 3 3 3 4 4 4 4 3 8 8 8 9 9 9 6 6 6 6 2 SAMPLE OUTPUT 4 3 2 6 9","solution":"from collections import Counter def top_frequent_elements(arr, x): Returns the x most frequently occurring elements in descending order of their frequency. If two elements have the same frequency, returns the smaller element first. freq_counter = Counter(arr) sorted_elements = sorted(freq_counter.items(), key=lambda pair: (-pair[1], pair[0])) return [el[0] for el in sorted_elements[:x]] def solve_top_frequent_elements(T, test_cases): results = [] for i in range(T): n, arr, x = test_cases[i] results.append(top_frequent_elements(arr, x)) return results"},{"question":"Problem You are given an initially empty string S and Q queries. The queries are of three types: 1. Insert a character c at the end of S. 2. Remove the last character from S (if S is not empty). 3. Find the k-th character in the string S (1-based index). For each query of type 3, output the k-th character of S or -1 if k is out of bounds. Constraints * 1 ≤ Q ≤ 10^5 * 1 ≤ k ≤ 10^5 * c is a lowercase English letter (\'a\' to \'z\'). Input The input is given in the following format: Q query1 query2 ... queryQ Each query is one of the following: 1 c or 2 or 3 k Output For each query of type 3, output the k-th character or -1 if k is out of bounds. Examples Input 5 1 a 1 b 1 c 3 2 2 Output b Input 8 1 x 1 y 1 z 3 1 3 3 2 3 3 3 2 Output x z -1 y Input 6 1 m 2 1 n 1 o 3 2 3 3 Output o -1","solution":"def process_queries(queries): S = [] results = [] for query in queries: parts = query.split() if parts[0] == \'1\': S.append(parts[1]) elif parts[0] == \'2\': if S: S.pop() elif parts[0] == \'3\': k = int(parts[1]) if 1 <= k <= len(S): results.append(S[k-1]) else: results.append(-1) return results def batch_process(input_string): lines = input_string.strip().split(\'n\') Q = int(lines[0]) queries = lines[1:Q+1] return process_queries(queries)"},{"question":"Your task is to implement a function that takes a list of non-negative integers and splits it into the minimum number of contiguous sublists, where each sublist is strictly increasing. Each element in the original array must be included in exactly one sublist. Input Format - The first line contains an integer ( t ) denoting the number of test cases. - Each of the next ( t ) lines contains a space-separated list of non-negative integers. Constraints 1. ( 1 leq t leq 50 ) 2. The length of each list will be between 1 and 100 (inclusive). 3. Each element in the list will be between 0 and 1000 (inclusive). Output Format For each test case, output the minimum number of strictly increasing contiguous sublists. Sample Input ```text 2 1 2 1 2 3 2 1 ``` Sample Output ```text 2 3 ``` Explanation In the first test case, the input list is [1, 2, 1, 2]. The minimum number of strictly increasing contiguous sublists is 2: [1, 2] and [1, 2]. In the second test case, the input list is [3, 2, 1]. Since no element is greater than its preceding element, the minimum number of strictly increasing contiguous sublists is 3, each containing a single element: [3], [2], [1].","solution":"def min_sublists_increasing(arr): Returns the minimum number of strictly increasing contiguous sublists. if not arr: return 0 count = 1 for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: count += 1 return count def process_input(t, test_cases): results = [] for case in test_cases: results.append(min_sublists_increasing(case)) return results"},{"question":"Given two integers, Y and B, which are within the range of 1 to 100 (inclusive), your task is to determine whether their sum is a prime number. If their sum is a prime number, print \\"Prime\\"; otherwise, print \\"Not Prime\\". -----Constraints----- - 1 leq Y, B leq 100 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: Y B -----Output----- If the sum of Y and B is a prime number, print \\"Prime\\"; otherwise, print \\"Not Prime\\". -----Sample Input----- 5 4 -----Sample Output----- Prime 5 + 4 is 9, which is not prime, so we should print \\"Not Prime\\". -----Sample Input----- 11 12 -----Sample Output----- Prime 11 + 12 is 23, which is prime, so we should print \\"Prime\\".","solution":"def is_prime(n): Returns True if n is a prime number, otherwise False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def prime_sum_result(Y, B): Checks if the sum of Y and B is a prime number. If it is, returns \\"Prime\\"; otherwise \\"Not Prime\\". sum_value = Y + B if is_prime(sum_value): return \\"Prime\\" else: return \\"Not Prime\\" # Example usage: if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip().split() Y = int(input_data[0]) B = int(input_data[1]) print(prime_sum_result(Y, B))"},{"question":"You are given a collection of N integers. Your task is to determine the minimum difference between the sum of two non-overlapping subsets that the collection can be divided into. Input: The first line contains a single integer T, the number of test cases. For each test case: - The first line contains a single integer N, the number of integers in the collection. - The second line contains N space-separated integers representing the elements of the collection. Output: For each test case, output a single integer, the minimum difference of the sums of two subsets, in a new line. Constraints: 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ Integer Value ≤ 1000 SAMPLE INPUT 2 4 1 6 11 5 3 1 2 3 SAMPLE OUTPUT 1 0 Explanation In test case 1, the collection [1, 6, 11, 5] can be divided into two subsets [1, 6, 5] and [11] with sums 12 and 11 respectively. The resulting difference is 1. In test case 2, the collection [1, 2, 3] can be divided into two subsets [1, 2] and [3] with sums 3 and 3 respectively. The resulting difference is 0.","solution":"def minimum_subset_sum_diff(arr): total_sum = sum(arr) n = len(arr) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] for j in range(total_sum // 2, -1, -1): if dp[n][j]: subset_sum_1 = j break subset_sum_2 = total_sum - subset_sum_1 return abs(subset_sum_2 - subset_sum_1) def solve(T, test_cases): results = [] for i in range(T): N, arr = test_cases[i] results.append(minimum_subset_sum_diff(arr)) return results"},{"question":"Given an integer array `nums` and an integer `k`, return true if the array has a continuous subarray of size at least two whose elements sum up to a multiple of `k`, otherwise return false. An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. Zero is always a multiple of `k`. Example 1: Input: nums = [23, 2, 4, 6, 7], k = 6 Output: True Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6. Example 2: Input: nums = [23, 2, 6, 4, 7], k = 6 Output: True Explanation: [23, 2, 6, 4, 7] is a continuous subarray of size 5 whose elements sum up to 42, which is a multiple of 6. Example 3: Input: nums = [23, 2, 6, 4, 7], k = 13 Output: False Note: The 1 <= nums.length <= 10^4 The 0 <= nums[i] <= 10^9 The 0 <= k <= 2^31 - 1","solution":"def checkSubarraySum(nums, k): Returns true if the array has a continuous subarray of size at least two whose elements sum up to a multiple of k, otherwise returns false. prefix_sum = 0 mod_map = {0: -1} # Dictionary to store prefix sum % k for i in range(len(nums)): prefix_sum += nums[i] if k != 0: prefix_sum %= k if prefix_sum in mod_map: if i - mod_map[prefix_sum] > 1: return True else: mod_map[prefix_sum] = i return False"},{"question":"# Calculate the Sum of Unique Elements Write a function that takes a list of integers and returns the sum of unique elements in the list. An element is considered unique if it appears exactly once in the list. Function Signature ```python def sum_of_unique_elements(lst: List[int]) -> int: ``` Input - A list of integers, `lst`, where `1 <= len(lst) <= 10^4` and `-10^4 <= lst[i] <= 10^4`. Output - An integer representing the sum of unique elements in `lst`. Example ```python assert sum_of_unique_elements([1, 2, 2, 3, 4, 4, 5]) == 9 assert sum_of_unique_elements([1, 1, 1, 1]) == 0 assert sum_of_unique_elements([10, -10, 10, -10, 20]) == 20 ``` Explanation - In the first example, the unique elements are `[1, 3, 5]` and their sum is `1 + 3 + 5 = 9`. - In the second example, there are no unique elements, so the sum is `0`. - In the third example, the unique element is `[20]` and its sum is `20`.","solution":"from typing import List from collections import Counter def sum_of_unique_elements(lst: List[int]) -> int: Returns the sum of unique elements in the list. count = Counter(lst) unique_sum = sum(k for k, v in count.items() if v == 1) return unique_sum"},{"question":"Sarah loves gardening and has a beautiful garden with many rows of flower beds. Each row has a variety of flowers, and each flower has its own beauty value. Sarah wants to know the total beauty value of a continuous sub-segment of the flower bed for a given row. You are given an array of integers representing the beauty values of each flower in a row. You need to find the maximum possible beauty value of any continuous sub-segment in that row. A continuous sub-segment is defined as a subset of consecutive elements from the array. Input The first line of the input contains an integer T, the number of test cases. Each of the following T test cases contains two lines: - The first line contains an integer n, the number of flowers in the row. - The second line contains n integers representing the beauty values of the flowers in that row. Output For each test case, output a single integer in a separate line, the maximum possible beauty value of any continuous sub-segment of the flower bed. Constraints 1 ≤ T ≤ 1000 1 ≤ n ≤ 10^5 -10^4 ≤ beauty value of each flower ≤ 10^4 SAMPLE INPUT 2 5 1 2 -1 2 3 4 -1 -2 -3 -4 SAMPLE OUTPUT 7 -1 Explanation First test Case: The maximum beauty value can be obtained by the sub-segment [1, 2, -1, 2, 3] which sums to 7. Second test Case: The maximum beauty value is -1, which is the largest element itself as all other sub-segments have more negative sums.","solution":"def max_beauty_segment(t, test_cases): Calculate the maximum beauty value of any continuous sub-segment of the flower bed for each row. Args: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer n and a list of ints representing beauty values. Returns: list of int: Maximum beauty value for each test case. def max_subarray_sum(arr): Helper function to compute maximum sum of continuous sub-segment using Kadane\'s algorithm max_so_far = arr[0] max_ending_here = arr[0] for x in arr[1:]: max_ending_here = max(x, max_ending_here + x) max_so_far = max(max_so_far, max_ending_here) return max_so_far results = [] for i in range(t): n, flowers = test_cases[i] results.append(max_subarray_sum(flowers)) return results"},{"question":"Write a function to generate the list of the first n happy numbers. Happy numbers are defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1, where it will stay, or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Example 1: Input: n = 5 Output: [1, 7, 10, 13, 19] Explanation: The first 5 happy numbers are 1, 7, 10, 13, and 19. Example 2: Input: n = 8 Output: [1, 7, 10, 13, 19, 23, 28, 31] Explanation: The first 8 happy numbers are 1, 7, 10, 13, 19, 23, 28, and 31. Example 3: Input: n = 1 Output: [1] Explanation: The first happy number is 1. Example 4: Input: n = 10 Output: [1, 7, 10, 13, 19, 23, 28, 31, 32, 44] Constraints: 1 <= n <= 10^4","solution":"def is_happy(number): seen = set() while number != 1 and number not in seen: seen.add(number) number = sum(int(digit) ** 2 for digit in str(number)) return number == 1 def first_n_happy_numbers(n): happy_numbers = [] num = 1 while len(happy_numbers) < n: if is_happy(num): happy_numbers.append(num) num += 1 return happy_numbers # Example usages: # print(first_n_happy_numbers(5)) # Output: [1, 7, 10, 13, 19] # print(first_n_happy_numbers(8)) # Output: [1, 7, 10, 13, 19, 23, 28, 31]"},{"question":"Given a string of text from a book, determine the number of sentences in the text. A sentence is defined as ending with a period (\'.\'), exclamation mark (\'!\'), or question mark (\'?\'). Input - A single string containing text from a book (1 ≤ length ≤ 10^5) Output - An integer representing the number of sentences. Example ```python Input: \\"It was a bright cold day in April, and the clocks were striking thirteen. Winston Smith, his chin nuzzled into his breast in an effort to escape the vile wind, slipped quickly through the glass doors of Victory Mansions, though not quickly enough to prevent a swirl of gritty dust from entering along with him.\\" Output: 2 ``` ```python Input: \\"Hello! How are you doing today? I hope you have a wonderful day.\\" Output: 3 ``` ^ Note: Only valid input will be passed, and a sentence is defined precisely by the listed punctuation.","solution":"def count_sentences(text): Counts the number of sentences in a given text. Args: text (str): Input text containing sentences. Returns: int: The number of sentences in the text. # Define sentence ending punctuation sentence_endings = {\'.\', \'!\', \'?\'} # Initialize sentence count sentence_count = 0 # Traverse through the text and count sentence endings for char in text: if char in sentence_endings: sentence_count += 1 return sentence_count"},{"question":"You are given a positive integer N. Your task is to calculate and print the sum of the digits of N. Input Format A single line containing the integer N. Output Format Print the sum of the digits of N on a single line. Constraints 1 ≤ N ≤ 10^18 Note N is a positive integer. SAMPLE INPUT 12345 SAMPLE OUTPUT 15","solution":"def sum_of_digits(N): Returns the sum of the digits of the positive integer N. return sum(int(digit) for digit in str(N))"},{"question":"Eva has recently started learning about data compression algorithms and is fascinated by the concept of Run-Length Encoding (RLE). RLE is a simple form of data compression where consecutive repeated characters in a string are stored as a single character along with the count of consecutive repetitions. Eva wants to automate this process and needs your help. Given a string, you need to implement the Run-Length Encoding algorithm and return the encoded string. Input First line contains the number of test cases T. The description of T test cases follows. Each test case consists of a single line: a string S containing lower case English letters only. Output For each test case, output a single line: the Run-Length Encoded string for the given input string. Constraints 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 Sum of lengths of S across all test cases in a test file will not exceed 10^6 Example Input: 3 aaabccdddda zzzzyyyx aabbcc Output: a3b1c2d4a1 z4y3x1 a2b2c2","solution":"def run_length_encode(string): Returns the Run-Length Encoded string for the given input string. if not string: return \\"\\" encoded_string = [] count = 1 for i in range(1, len(string)): if string[i] == string[i - 1]: count += 1 else: encoded_string.append(string[i - 1] + str(count)) count = 1 encoded_string.append(string[-1] + str(count)) # Append the last character and its count return \\"\\".join(encoded_string) def process_test_cases(test_cases): Process multiple test cases of run-length encoding. return [run_length_encode(test_case) for test_case in test_cases]"},{"question":"Write a function that accepts a list of integers and returns a new list where each integer is squared, but only if the integer is even. If the integer is odd, it should remain unchanged in the new list. For example, given the input list `[1, 2, 3, 4, 5, 6]`, the function should return `[1, 4, 3, 16, 5, 36]`. In another example, with input list `[7, 8, 9]`, the function should return `[7, 64, 9]`. Note: You are not supposed to use any built-in functions that directly perform these transformations. Writing a loop and conditional statements is expected.","solution":"def transform_list(int_list): Returns a new list where each even integer is squared, and each odd integer remains unchanged. :param int_list: List of integers :return: List of transformed integers result_list = [] for num in int_list: if num % 2 == 0: result_list.append(num ** 2) else: result_list.append(num) return result_list"},{"question":"Given an undirected graph with `n` nodes and `m` edges, an essential operation is to determine if the graph is connected (i.e., there is a path between any pair of nodes). You will be given a description of the graph in the form of an adjacency list. Your task is to determine if the graph is connected. Function Description Complete the `isConnected` function in the editor below. It should return `True` if the graph is connected and `False` otherwise. `isConnected` has the following parameter(s): - `adjList`: a dictionary describing the adjacency list of the graph. Each key represents a node, and each value is a list of nodes to which it is directly connected. Input Format The first line contains an integer `n`, the number of nodes. The second line contains an integer `m`, the number of edges. Each of the next `m` lines contains two space-separated integers, `u` and `v`, indicating an edge between node `u` and node `v`. Constraints 1 leq n leq 10^5 1 leq m leq 10^5 1 leq u, v leq n Output Format Print `True` if the graph is connected and `False` otherwise. Sample Input 0 4 3 1 2 2 3 3 4 Sample Output 0 True Explanation 0 The graph is: ``` 1 -- 2 -- 3 -- 4 ``` All nodes are reachable from each other, so the graph is connected. Sample Input 1 4 2 1 2 3 4 Sample Output 1 False Explanation 1 The graph is: ``` 1 -- 2 3 -- 4 ``` Nodes 1 and 2 are not reachable from nodes 3 and 4, so the graph is not connected.","solution":"def isConnected(adjList): Returns True if the graph described by adjList is connected, otherwise False. if not adjList: return True # An empty graph with no nodes is considered connected. # Function to perform DFS and mark visited nodes def dfs(node): stack = [node] while stack: current = stack.pop() for neighbor in adjList[current]: if neighbor not in visited: visited.add(neighbor) stack.append(neighbor) # Start from any node start_node = next(iter(adjList)) visited = {start_node} dfs(start_node) # If visited all nodes in the graph, then graph is connected return len(visited) == len(adjList)"},{"question":"You are planning a road trip with multiple friends. Each friend has a specific location where they want to spend some time, and each location has a unique point value. You have a limited number of hours to allocate across all locations to maximize the total points you can get. Each location, however, can be revisited multiple times. Write a program to determine the maximum points you can earn given the number of hours you have. -----Constraints----- - You will be given an integer indicating the total hours you can spend. - You will be given a list of integers where each integer represents the time required at a specific location. - You will be given a list of integers where each integer represents the points awarded for spending time at a specific location. - All input values are integers. - 1 leq total_hours leq 20 - 1 leq len(locations) = len(points) leq 10 - 1 leq time_required, points_awarded leq 10 -----Input----- Input is given from Standard Input in the following format: total_hours time_required (list of integers) points_awarded (list of integers) -----Output----- Print the maximum points you can earn within the given hours. -----Sample Input----- 5 [1, 3] [2, 5] -----Sample Output----- 10 - You have 5 hours to allocate. - At the first location, you earn 2 points per hour; you can spend up to 5 hours here if you want. - At the second location, you earn 5 points per 3 hours. - The optimal solution is to visit the first location for 5 hours yielding (5 * 2) = 10 points.","solution":"def max_points(total_hours, times, points): Determine the maximum points that can be earned with the given hours and locations. Parameters: total_hours (int): The total hours available. times (list): List of integers where each integer represents the time required at a specific location. points (list): List of integers where each integer represents the points awarded for spending time at a specific location. Returns: int: The maximum points that can be earned. # Create a DP array to store maximum points for each hour count dp = [0] * (total_hours + 1) # Dynamic programming to calculate the maximum points for h in range(1, total_hours + 1): for t, p in zip(times, points): if t <= h: dp[h] = max(dp[h], dp[h - t] + p) # The last element of dp array contains the maximum points for the given total hours return dp[total_hours]"},{"question":"A software company employs n engineers, each having different skill levels. The skill levels are unique integers ranging from 1 to n. Every month, to boost productivity, they form various teams consisting of exactly three engineers. The efficiency of a team is defined as the product of the skill levels of its members. The company wants to find out the maximum efficiency of any team that can be formed. Given the skill levels of the n engineers, find the maximum possible efficiency for any one of the teams. Input Format The first line contains an integer n, denoting the number of engineers. The second line contains n space-separated integers, representing the skill levels of the engineers. Constraints 3 leq n leq 10^5 1 leq text{skill}_i leq n Output Format Print a single integer denoting the maximum possible efficiency of any team. Sample Input 5 1 2 3 4 5 Sample Output 60 Explanation There are 5 engineers with skill levels 1, 2, 3, 4, 5. We need to form a team of three engineers such that their efficiency is maximized. The best team would be the one with the highest skill levels: 5, 4, and 3. The efficiency for this team is 5 times 4 times 3 = 60. Hence, the output is 60.","solution":"def max_team_efficiency(n, skill_levels): Returns the maximum possible efficiency for any team that can be formed. Parameters: n (int): The number of engineers skill_levels (list): A list of integers representing the skill levels of the engineers Returns: int: The maximum efficiency for any one of the teams # Sort skill levels in descending order to get the highest levels easily sorted_skill_levels = sorted(skill_levels, reverse=True) # The maximum efficiency team will be the product of the top 3 skill levels return sorted_skill_levels[0] * sorted_skill_levels[1] * sorted_skill_levels[2]"},{"question":"Given an array of integers \'nums\' and an integer \'target\', return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Write a function `twoSum` that takes an array of integers `nums` and an integer `target`, and returns a list of two integers that represent the indices of the numbers that add up to the target. Input - `nums`: a list of integers, where 2 ≤ |nums| ≤ 10<sup>4</sup> and -10<sup>9</sup> ≤ nums[i] ≤ 10<sup>9</sup> - `target`: an integer, where -10<sup>9</sup> ≤ target ≤ 10<sup>9</sup> Output - A list of two integers that represent the indices of the numbers that add up to the target. Example Input ``` [2, 7, 11, 15] 9 ``` Output ``` [0, 1] ``` Note In the first example, the array contains the numbers 2, 7, 11, and 15. The indices 0 and 1 represent the elements 2 and 7, which add up to the target value 9. Therefore, the output is [0, 1]. Input ``` [3, 2, 4] 6 ``` Output ``` [1, 2] ``` Explanation In the second example, the pair of indices 1 and 2 represent the elements 2 and 4, which add up to the target value 6. Therefore, the output is [1, 2].","solution":"def twoSum(nums, target): Returns indices of the two numbers such that they add up to target. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i"},{"question":"Write a function `sublist_index(main_list, sublist)` which takes two lists as input and returns the starting index of the first occurrence of `sublist` within `main_list`. If `sublist` does not exist within `main_list`, the function should return `-1`. - Both `main_list` and `sublist` will contain only integers. - The implementation should handle the case efficiently even if `main_list` or `sublist` is large. - The function should return the first occurrence of `sublist` within `main_list` if there are multiple matches. Examples: ```python sublist_index([1, 2, 3, 4, 5], [3, 4]) # Should return 2 ``` ```python sublist_index([1, 2, 3, 4, 5], [6]) # Should return -1 ``` ```python sublist_index([1, 2, 3, 1, 2, 3], [1, 2]) # Should return 0 ``` # Constraints: - `main_list` and `sublist` will have lengths in the range [0, 10^5].","solution":"def sublist_index(main_list, sublist): Returns the starting index of the first occurrence of sublist within main_list. If sublist does not exist within main_list, returns -1. len_main = len(main_list) len_sub = len(sublist) if len_sub == 0: return 0 if len_main == 0 or len_sub > len_main: return -1 for i in range(len_main - len_sub + 1): if main_list[i:i+len_sub] == sublist: return i return -1"},{"question":"Leia is visiting a park that is represented as a 2D grid of size n times m. Each cell in the grid has a certain amount of flowers. Leia wants to collect as many flowers as possible while walking from the top-left corner to the bottom-right corner of the grid. However, she can only move to the right or down from any cell. Given the number of flowers in each cell, calculate the maximum number of flowers Leia can collect on her way to the bottom-right corner. -----Input----- The first line contains two integers n and m (1 le n, m le 500) — the dimensions of the grid. The next n lines contain m integers each, representing the number of flowers in each cell of the grid. The flower count for any cell is a positive integer not exceeding 1000. -----Output----- Print one integer — the maximum number of flowers Leia can collect. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 2 2 3 1 4 Output 9 -----Note----- In the first example, the optimal path is to follow [1,3,5,2,1], which gives a total of 12 flowers. In the second example, the optimal path is to follow [2,3,4], which gives a total of 9 flowers.","solution":"def max_flowers(n, m, grid): # Initialize dp array where dp[i][j] means the maximum flowers can collect to reach cell (i, j) dp = [[0]*m for _ in range(n)] dp[0][0] = grid[0][0] # Starting point # Fill the first row of the dp array for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column of the dp array for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"A company wants to encode their data using a transformation technique. The technique involves replacing each character in a string with its corresponding position number in the alphabet (i.e., \'a\' -> 1, \'b\' -> 2, ..., \'z\' -> 26). Given an encoded string, the task is to decode it back to its original form. The encoded string is represented as a sequence of numbers separated by spaces. Write a program that performs the following operations: 1. Receives an encoded string of numbers. 2. Decodes the string back to its original alphanumeric form. INPUT: The input consists of multiple lines: - The first line contains a single integer T, the number of encoded strings. - The next T lines contain an encoded string, where each encoded string is a sequence of number tokens separated by spaces. OUTPUT: For each encoded string, print the decoded string in a new line. Constraints: 1 ≤ T ≤ 100 1 ≤ Length of each encoded string ≤ 1000 SAMPLE INPUT: 3 8 5 12 12 15 23 15 18 12 4 3 15 4 5 SAMPLE OUTPUT: hello world code Explanation: For the first string: 8 -> \'h\', 5 -> \'e\', 12 -> \'l\', 12 -> \'l\', 15 -> \'o\', thus decoding to \\"hello\\". For the second string: 23 -> \'w\', 15 -> \'o\', 18 -> \'r\', 12 -> \'l\', 4 -> \'d\', thus decoding to \\"world\\". For the third string: 3 -> \'c\', 15 -> \'o\', 4 -> \'d\', 5 -> \'e\', thus decoding to \\"code\\".","solution":"def decode_string(encoded_string): Decodes an encoded string where each number corresponds to a letter in the alphabet. Parameters: encoded_string (str): A string of numbers separated by spaces. Returns: str: The decoded alphanumeric string. decoded_chars = [chr(int(num) + 96) for num in encoded_string.split()] return \'\'.join(decoded_chars) def decode_multiple_strings(T, encoded_strings): Decodes multiple encoded strings. Parameters: T (int): The number of encoded strings. encoded_strings (list of str): A list of encoded strings. Returns: list of str: A list of decoded strings. return [decode_string(encoded_string) for encoded_string in encoded_strings]"},{"question":"You are tasked with organizing a tournament with P players participating. Each player is assigned a unique skill level. The tournament is conducted in a knockout format where in each round, players are paired up and the player with the higher skill level in each pair advances to the next round, while the other is eliminated. The tournament continues in rounds until only one player remains. Given the skill levels of the players, you need to determine the expected winner of the tournament. In each round, the pairs can be formed arbitrarily such that there are no constraints on the pairing order. You should assume an ideal setup where pairing is done optimally to give the highest overall skill level player the best chance of winning each pair. -----Input----- Input is a list of integers representing the skill levels of P players, separated by spaces. -----Output----- Output a single integer indicating the skill level of the expected winner of the tournament. -----Limits----- - 1 leq P leq 10^5 - Skill levels are distinct integers between 1 and 10^6 -----Examples----- Sample Input: 4 2 5 3 1 Sample Output: 5 Sample Input: 7 2 9 4 1 8 6 Sample Output: 9","solution":"def expected_winner(skill_levels): Returns the skill level of the expected winner of the tournament. Parameters: skill_levels (list): A list of integers representing the skill levels of players. Returns: int: The skill level of the expected winner. return max(skill_levels)"},{"question":"Given a positive integer N, generate a list of all prime numbers up to and including N. ------ Input Format ------ A single line of input containing a positive integer N. ------ Output Format ------ Output all prime numbers up to and including N in a single line, separated by a space. If there are no prime numbers up to N, output an empty line. ------ Constraints ------ 1 ≤ N ≤ 100 ----- Sample Input 1 ------ 10 ----- Sample Output 1 ------ 2 3 5 7 ----- Explanation 1 ------ The prime numbers less than or equal to 10 are 2, 3, 5, and 7. ----- Sample Input 2 ------ 1 ----- Sample Output 2 ------ (empty line) ----- Explanation 2 ------ There are no prime numbers less than or equal to 1, so the output is an empty line. ----- Sample Input 3 ------ 7 ----- Sample Output 3 ------ 2 3 5 7 ----- Explanation 3 ------ The prime numbers less than or equal to 7 are 2, 3, 5, and 7. ----- Sample Input 4 ------ 20 ----- Sample Output 4 ------ 2 3 5 7 11 13 17 19 ----- Explanation 4 ------ The prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19.","solution":"def generate_primes(N): Generates a list of all prime numbers up to and including N. :param N: int - A positive integer :return: list - List of prime numbers up to and including N if N < 2: return [] primes = [] sieve = [True] * (N + 1) sieve[0], sieve[1] = False, False for p in range(2, N + 1): if sieve[p]: primes.append(p) for i in range(p * p, N + 1, p): sieve[i] = False return primes"},{"question":"In a large office building, there are numerous floors and various keys that allow access to different floors. Each floor has a unique security access key, and some keys can open multiple floors. The office manager has a list of keys labeled from 1 to N, where each key can open one or more floors. The list follows these rules: - Key 1 can open floors 1 to K. - Key 2 can open floors 2 to 2K. - Key 3 can open floors 3 to 3K. - And so on, until key N, which can open floors N to NK. Your task is to find and list all the floors that can be accessed by at least one key from the given keys. Input Format The first line contains an integer, mbox{N}, the number of keys. The second line contains an integer, mbox{K}, the multiple range for each key\'s access. Constraints 1 leq N leq 100 1 leq K leq 100 Output Format Print a sorted list of all unique floors that can be accessed by at least one key. Sample Input 5 3 Sample Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Explanation With N = 5 and K = 3, the keys (and the floors they can access) are: - Key 1: Floors 1 to 3 - Key 2: Floors 2 to 6 - Key 3: Floors 3 to 9 - Key 4: Floors 4 to 12 - Key 5: Floors 5 to 15 The union of all these floor ranges results in the list of unique floors from 1 to 15. Hence, the output is the sorted list of all floors from 1 to 15.","solution":"def accessible_floors(N, K): Returns a sorted list of all unique floors that can be accessed by at least one key. Parameters: N (int): Number of keys. K (int): The multiple range for each key\'s access. Returns: List[int]: List of unique accessible floors. floors = set() for i in range(1, N + 1): for j in range(i, i * K + 1): floors.add(j) return sorted(floors)"},{"question":"You are given an array consisting of n integers. Your task is to find the minimum number of operations to transform the array into a \\"good\\" array. An array is considered \\"good\\" if every element in the array is equal to its index value (1-based index, i.e., the first element is in index 1). In each operation, you can choose any two elements of the array and swap them. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ n) — the elements of the array. Output Print a single integer representing the minimum number of operations required to transform the array into a \\"good\\" array. Examples Input 5 3 5 4 1 2 Output 3 Input 4 2 1 4 3 Output 2 Note In the first example, we can transform the array as follows: - Swap elements at index 1 and index 3 to obtain [4, 5, 3, 1, 2] - Swap elements at index 2 and index 5 to obtain [4, 2, 3, 1, 5] - Swap elements at index 1 and index 4 to obtain [1, 2, 3, 4, 5] In the second example, we can transform the array as follows: - Swap elements at index 1 and index 2 to obtain [1, 2, 4, 3] - Swap elements at index 3 and index 4 to obtain [1, 2, 3, 4]","solution":"def minimum_swaps_to_good_array(n, arr): Find the minimum number of swaps to transform the array into a good array. A good array is defined as an array where each element is equal to its index value (1-based index). :param n: Length of the array :param arr: List of integers :return: Minimum number of swaps required # Create a list to keep track of visited elements visited = [False] * n swaps = 0 for i in range(n): if not visited[i]: cycle_length = 0 x = i while not visited[x]: visited[x] = True x = arr[x] - 1 cycle_length += 1 if cycle_length > 1: swaps += cycle_length - 1 return swaps"},{"question":"A robotics company has developed a system where multiple robots work together to complete a series of tasks. Each task consists of several subtasks, and each robot can work on only one subtask at a time. The company wants to optimize the task completion process to minimize the overall time taken to complete all the tasks. Each robot has a unique ID and each subtask has a fixed duration. The order in which subtasks should be performed is strictly defined. A subtask cannot start until the previous subtask in the sequence has been completed. Moreover, after completing a subtask, a robot can immediately start working on the next subtask if it is available. Given the number of tasks and the number of subtasks per task, your goal is to calculate the time each task will be completed. -----Input----- The first line of the input contains two integers n (1 ≤ n ≤ 50000) and k (1 ≤ k ≤ 5), where n is the number of tasks and k is the number of subtasks per task. Then follow the descriptions of the tasks, one per line. Each line contains k integers t_{i1}, t_{i2}, ..., t_{ik} (1 ≤ t_{ij} ≤ 1000), where t_{ij} is the time the robot takes to complete the j-th subtask of the i-th task. -----Output----- Print the sequence of n integers r_1, r_2, ..., r_{n}, where r_{i} is the time when the i-th task is completed. -----Examples----- Input 3 2 5 3 2 4 8 1 Output 8 10 15","solution":"def calculate_completion_times(n, k, tasks): Given the number of tasks and the number of subtasks per task, calculates the time each task will be completed assuming the robots can process subtasks in sequence as soon as previous one completes. Parameters: - n (int): number of tasks - k (int): number of subtasks per task - tasks (list of list of int): each inner list contains k integers representing the duration of subtasks in the task Returns: - list of int: completion times for each task completion_times = [] for task in tasks: completion_time = 0 for subtask in task: completion_time += subtask completion_times.append(completion_time) return completion_times # Example usage n = 3 k = 2 tasks = [ [5, 3], [2, 4], [8, 1] ] print(calculate_completion_times(n, k, tasks)) # Output: [8, 10, 9]"},{"question":"Given a list of `N` integers, you are required to answer `Q` queries. Each query consists of two integers `L` and `R`. For each query, you need to find the sum of the elements from the `L`th to the `R`th element in the list. ------ Input Format ------ The first line contains an integer `N`, the number of integers in the list. The second line contains `N` space-separated integers. The third line contains an integer `Q`, the number of queries. The next `Q` lines each contain two space-separated integers `L` and `R`. ------ Output Format ------ For each query, output the sum of the elements from the `L`th to the `R`th element (both inclusive) on a new line. ------ Constraints ------ 1 ≤ N ≤ 10^5 1 ≤ each integer in the list ≤ 10^3 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N Sample Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Sample Output 6 9 15 Explanation: For the first query, sum of elements from position 1 to 3 is 1 + 2 + 3 = 6. For the second query, sum of elements from position 2 to 4 is 2 + 3 + 4 = 9. For the third query, sum of elements from position 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15.","solution":"def sum_queries(arr, queries): Calculate the sum of elements for each query from L to R. Parameters: arr (list): List of integers. queries (list): List of tuples where each tuple contains two integers representing L and R. Returns: list: List of integers representing the sum for each query. # Precompute the prefix sums prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(arr) + 1): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] # Answer each query using prefix sums results = [] for L, R in queries: results.append(prefix_sums[R] - prefix_sums[L - 1]) return results"},{"question":"# Binary Tree Maximum Path Sum You are given a binary tree where each node contains an integer value. Find the maximum path sum. A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can be part of one or two non-overlapping paths in the tree. The path does not need to go through the root. # Input Format: ``` - Integer n, the number of nodes in the binary tree. - n Integers, the values of the nodes in level-order (BFS) traversal of the tree. For an absent node, use \'null\'. ``` # Output Format: ``` - A single integer representing the maximum path sum. ``` # Constraints: ``` - The number of nodes in the binary tree is at least 1 and does not exceed 100,000. - Node values are in the range of [-1,000,000,000, 1,000,000,000]. ``` # Sample Input: ``` 5 1 -2 3 null -1 ``` # Sample Output: ``` 4 ``` # Explanation: In the binary tree: ``` 1 / -2 3 -1 ``` The maximum path sum is: 3 (from node 3) + 1 (from the root node 1) = 4 # Function Signature: ```python def max_path_sum(n: int, nodes: List[Union[int, None]]) -> int: pass ```","solution":"from typing import List, Union class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes: List[Union[int, None]]) -> TreeNode: if not nodes: return None from collections import deque it = iter(nodes) root = TreeNode(next(it)) queue = deque([root]) while queue: node = queue.popleft() try: left_val = next(it) if left_val is not None: node.left = TreeNode(left_val) queue.append(node.left) right_val = next(it) if right_val is not None: node.right = TreeNode(right_val) queue.append(node.right) except StopIteration: break return root def max_path_sum(n: int, nodes: List[Union[int, None]]) -> int: if n == 0: return 0 root = build_tree(nodes) def helper(node): nonlocal max_sum if not node: return 0 left_max = max(helper(node.left), 0) # max path sum on the left right_max = max(helper(node.right), 0) # max path sum on the right current_max_path_sum = node.val + left_max + right_max max_sum = max(max_sum, current_max_path_sum) return node.val + max(left_max, right_max) max_sum = float(\'-inf\') helper(root) return max_sum"},{"question":"In a certain digital warehouse, items are stored in containers, each with a unique identifier and a set of items within it. Each container has both a maximum weight it can carry and an arbitrary number of items that can be stored within it. The warehouse management system needs a way to optimize the distribution of items to containers to ensure efficiency in storage and retrieval. Each item has a weight, and we need to assign items to containers such that the total weight of items in any container does not exceed the container\'s maximum weight capacity. Moreover, every item must be assigned to exactly one container. Write a program that reads a list of containers with their maximum weight capacities and a list of items with their weights. The program should determine an efficient way to assign items to containers without violating the weight constraints. Input Details: - The first line contains a single integer C (1 ≤ C ≤ 1,000), the number of containers. - The next C lines each contain an integer representing the maximum weight capacity of each container. - The next line contains a single integer I (1 ≤ I ≤ 1,000), the number of items. - The following I lines each contain an integer representing the weight of each item. Output Details: - Output a single line with \\"YES\\" if it is possible to assign all items to the containers without any container exceeding its weight capacity. - Otherwise, output \\"NO\\". Example Input: ``` 3 50 60 70 5 20 30 50 10 40 ``` Example Output: ``` YES ``` Example Input: ``` 2 100 150 4 100 75 80 90 ``` Example Output: ``` NO ``` The program should ensure to allocate the items to the containers in a way that respects the constraints, and if it’s not possible to allocate all items in any configuration, it should correctly respond with \\"NO\\".","solution":"def can_assign_items_to_containers(container_weights, item_weights): Determines if items can be efficiently assigned to containers without exceeding each container\'s maximum weight capacity. :param container_weights: List of integers representing the maximum weight capacity of each container. :param item_weights: List of integers representing the weight of each item. :return: \\"YES\\" if items can be assigned efficiently, otherwise \\"NO\\". container_weights.sort(reverse=True) item_weights.sort(reverse=True) for item in item_weights: placed = False for i in range(len(container_weights)): if container_weights[i] >= item: container_weights[i] -= item placed = True break if not placed: return \\"NO\\" return \\"YES\\" def handle_input_output(): import sys input = sys.stdin.read data = input().split() index = 0 C = int(data[index]) index += 1 container_weights = [] for _ in range(C): container_weights.append(int(data[index])) index += 1 I = int(data[index]) index += 1 item_weights = [] for _ in range(I): item_weights.append(int(data[index])) index += 1 result = can_assign_items_to_containers(container_weights, item_weights) print(result)"},{"question":"A bakery wants to categorize its orders based on the quantity of a specific item ordered by various customers. Given a list of integers representing the quantity of an item in each order, the goal is to categorize the orders into three different types: small, medium, and large. Each category has a specified range of order quantities: small (1-10), medium (11-50), and large (51-100). Write a function that takes a list of integers and returns the number of orders that fall into each category. -----Constraints----- - Each integer in the list is between 1 and 100 inclusive. - The length of the list does not exceed 1000. -----Input----- The function should take a single argument: - A list of integers representing the quantities of the item in each order. -----Output----- The function should return a tuple of three integers, where: - The first integer is the count of small orders. - The second integer is the count of medium orders. - The third integer is the count of large orders. -----Example----- Input: [1, 5, 11, 23, 50, 70, 90, 100] Output: (2, 3, 3) Explanation: - There are 2 small orders (1, 5) - There are 3 medium orders (11, 23, 50) - There are 3 large orders (70, 90, 100)","solution":"def categorize_orders(orders): Categorize orders into small, medium, and large. Parameters: orders (list): A list of integers representing the quantities of the item in each order. Returns: tuple: A tuple of three integers representing the count of small orders, medium orders, and large orders respectively. small = 0 medium = 0 large = 0 for order in orders: if order >= 1 and order <= 10: small += 1 elif order >= 11 and order <= 50: medium += 1 elif order >= 51 and order <= 100: large += 1 return (small, medium, large)"},{"question":"Write a function that takes an array of integers and returns the length of the longest contiguous subarray where all elements have the same value. For example, given the array [1, 2, 2, 3, 3, 3, 1], the function should return 3, corresponding to the subarray [3, 3, 3]. More examples in test cases. Good luck! Please also try [Longest Consecutive Sequence](https://www.codewars.com/kata/5ba38ba180824a86850000f7)","solution":"def longest_subarray_length(arr): Returns the length of the longest contiguous subarray where all elements have the same value. :param arr: List[int] - list of integers :return: int - length of the longest contiguous subarray with the same value if not arr: return 0 max_len = current_len = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_len += 1 else: if current_len > max_len: max_len = current_len current_len = 1 # Check for the last subarray if current_len > max_len: max_len = current_len return max_len"},{"question":"You are given a list of integer intervals representing the busy time slots for a number of employees in a company. Each interval is a tuple of two integers, representing the start and end of a time slot `[start, end]`. Your objective is to identify the minimum number of meeting rooms required to accommodate all the meetings without any overlap. A meeting room can only be occupied by one meeting at a time. Overlapping meetings cannot occur in the same room. Write a function `minMeetingRooms(intervals)` that returns the minimum number of meeting rooms required. # Input - An array of tuples (intervals), where each tuple contains two integers `[start, end]` representing the start and end time of a busy slot. # Output - An integer representing the minimum number of meeting rooms required. # Constraints - 1 <= len(intervals) <= 10^4 - 0 <= start < end <= 10^6 # Example ```python def minMeetingRooms(intervals): # Your code here print(minMeetingRooms([(30, 75), (0, 50), (60, 150)])) # Output: 2 print(minMeetingRooms([(0, 30), (5, 10), (15, 20)])) # Output: 2 print(minMeetingRooms([(1, 5), (6, 10), (11, 15)])) # Output: 1 ``` # Hints - Consider separate arrays to store start times and end times. - Sorting both arrays and using two-pointers may help in simulating the meeting room allocation. # Note Ensure your solution is optimized for the potentially large input size.","solution":"def minMeetingRooms(intervals): if not intervals: return 0 # Initialize separate lists for start times and end times start_times = sorted([interval[0] for interval in intervals]) end_times = sorted([interval[1] for interval in intervals]) # Initialize pointers for start times and end times start_pointer = 0 end_pointer = 0 # Initialize variable to keep track of current rooms needed current_rooms = 0 max_rooms = 0 # Iterate over all the intervals while start_pointer < len(intervals): # If there is a new meeting before the meeting at the end_pointer finishes if start_times[start_pointer] < end_times[end_pointer]: current_rooms += 1 start_pointer += 1 else: current_rooms -= 1 end_pointer += 1 # Update the maximum number of rooms needed max_rooms = max(max_rooms, current_rooms) return max_rooms"},{"question":"A village is planning to build a network of water pipes to ensure every house has access to water. The village consists of N houses connected by M possible pipes. Each pipe can be installed to connect two houses and has a cost associated with it. Due to budget constraints, they need to minimize the total cost of installing these pipes while still ensuring that every house gets water. Help the village find the minimum cost to achieve this. -----Input----- The first line of input contains two integers N and M (1 ≤ N ≤ 100,000, 0 ≤ M ≤ 200,000). The next M lines describe the pipes, each containing three integers u, v, and c (1 ≤ u, v ≤ N, 1 ≤ c ≤ 1,000,000), where u and v are the houses that the pipe connects, and c is the cost of the pipe. -----Output----- Output a single integer, the minimum cost to connect all houses. If it\'s impossible, output -1. -----Constraints----- - 1 ≤ N ≤ 100,000 - 0 ≤ M ≤ 200,000 - 1 ≤ c ≤ 1,000,000 for all pipes -----Example----- Input: 4 5 1 2 1 2 3 4 3 4 2 4 1 3 1 3 5 Output: 6 -----Explanation----- The four houses can be connected with pipes of costs 1, 4, and 2. This would ensure all houses are connected at a total cost of 6. The pipe with cost 3 and the pipe with cost 5 are not chosen as they would increase the total cost.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 def min_cost_to_provide_water(N, M, pipes): if N == 1: return 0 pipes.sort(key=lambda x: x[2]) parent = list(range(N + 1)) rank = [0] * (N + 1) cost = 0 edges_used = 0 for u, v, c in pipes: if find(parent, u) != find(parent, v): union(parent, rank, u, v) cost += c edges_used += 1 if edges_used == N - 1: return cost return -1 # Unable to connect all houses # Example usage: # N = 4 # M = 5 # pipes = [ # (1, 2, 1), # (2, 3, 4), # (3, 4, 2), # (4, 1, 3), # (1, 3, 5) # ] # print(min_cost_to_provide_water(N, M, pipes)) # Output: 6"},{"question":"*Alice is exploring a labyrinth and she encounters a magical door that blocks her path. The door will only open if she can solve the following problem. Can you help her?* Given a string S, you need to determine if it is possible to rearrange the characters in S to form a palindrome. ------ Input Format ------ - The first line of input consists of an integer T, the number of test cases. - Each of the next T lines contains a string S. ------ Output Format ------ For each test case, print YES if it is possible to rearrange the characters in S to form a palindrome, otherwise print NO. You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |S| ≤ 10^{5} The sum of the lengths of all strings in the input will not exceed 10^{6}. ----- Sample Input 1 ------ 4 civic ivicc hello aabb ----- Sample Output 1 ------ YES YES NO YES ----- Explanation 1 ------ Test case 1: \'civic\' is already a palindrome. Test case 2: The characters can be rearranged to form \'civic\' or \'icvci\', both of which are palindromes. Test case 3: There is no way to rearrange \'hello\' to form a palindrome. Test case 4: The characters can be rearranged to form \'abba\' or \'baab\', both of which are palindromes.","solution":"def can_form_palindrome(s): from collections import Counter # Count the occurrences of each character in the string char_count = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve_labyrinth(t, strings): results = [] for s in strings: results.append(can_form_palindrome(s)) return results # Function to handle input and output for the above logic def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) strings = data[1:t+1] results = solve_labyrinth(t, strings) for result in results: print(result)"},{"question":"Samantha is working on a photo gallery web application. To enhance the user experience, she is implementing a feature that organizes photos into albums sorted by their creation date. Each album should display its most recent photo as a cover image. However, if an album has no photos, it should be left out. Your task is to help Samantha by writing a function that processes a list of albums and their associated photos, and returns a sorted list of cover images. Each photo has a unique ID and a timestamp indicating its creation date. -----Input----- The first line contains an integer n, the number of albums. The next n lines each contain an album name and a list of photos. Each photo is represented as a pair (photo_id, creation_timestamp). -----Output----- Output a list of photo_ids representing the cover images of the albums, sorted by the creation date of their latest photo. -----Limits----- - 1 leq n leq 100 - An album can contain between 0 and 50 photos. - Each photo_id is a positive integer. - Each creation_timestamp is an integer representing Unix timestamp (seconds since Epoch). -----Examples----- Sample Input 1: 2 \\"Vacation\\" [(1, 1636025600), (2, 1636112000)] \\"Birthday\\" [(3, 1635842800)] Sample Output 1: [2, 3] Sample Input 2: 3 \\"Holiday\\" [(5, 1636025600)] \\"Office\\" [] \\"Family\\" [(6, 1636112000), (7, 1635756800)] Sample Output 2: [5, 6] Sample Input 3: 1 \\"Nature\\" [(10, 1636112000), (11, 1636025600), (12, 1636208400)] Sample Output 3: [12]","solution":"def get_cover_images(n, albums): Returns a sorted list of photo_ids representing the cover images of the albums, sorted by the creation date of their latest photo. :param n: number of albums :param albums: list of tuples where each tuple contains an album name and a list of photos :return: sorted list of photo_ids representing the cover images cover_images = [] for album in albums: album_name, photos = album if not photos: continue # Find the latest photo in the album latest_photo = max(photos, key=lambda x: x[1]) cover_images.append(latest_photo) # Sort the cover images by the creation date of their latest photo cover_images.sort(key=lambda x: x[1], reverse=True) # Extract the photo_ids for the final result result = [photo[0] for photo in cover_images] return result"},{"question":"Given a string `s`, find the length of the longest substring with all distinct characters. A substring is defined as a contiguous sequence of characters within a string. INPUT First line will contain t, the total number of test cases. Next t lines will contain a single string `s` for each test case. 0 < t ≤ 100 0 < |s| ≤ 10^5 OUTPUT For each test case, output the length of the longest substring with all distinct characters. SAMPLE INPUT 2 abcabcbb bbbbb SAMPLE OUTPUT 3 1","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_map = {} left = 0 max_length = 0 for right, char in enumerate(s): if char in char_map and char_map[char] >= left: left = char_map[char] + 1 char_map[char] = right max_length = max(max_length, right - left + 1) return max_length def find_lengths_of_longest_substrings(test_cases): Given test cases, returns a list containing the length of longest substring with all distinct characters for each case. return [length_of_longest_substring(s) for s in test_cases]"},{"question":"You are given a list of integers representing the stock prices of a company in chronological order. You need to determine the maximum profit that can be made by buying one stock on a given day and selling it on a later day. If no profit can be made, return 0. You are required to write a function `maximizeProfit` which takes in a list of integers `prices` and returns an integer representing the maximum profit. Input: - An integer T representing the number of test cases. - For each test case, an integer N representing the number of days and a list of N integers representing the stock prices for those days. Output: - For each test case, an integer representing the maximum profit or 0 if no profit can be made. Input Format: - First line contains an integer T, the number of test cases. - For each test case, the first line contains an integer N, the number of days. - The second line contains N space-separated integers representing the stock prices. Output Format: - For each test case, print a single integer, the maximum profit that can be achieved or 0 if no profit can be made. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 0 ≤ prices[i] ≤ 10^4 Example Input: 2 6 7 1 5 3 6 4 5 7 6 4 3 1 Example Output: 5 0 Explanation: For the first test case: - The maximum profit can be achieved by buying on day 2 (price = 1) and selling on day 5 (price = 6), thus the profit is 6 - 1 = 5. For the second test case: - No profit can be made since the stock prices keep decreasing.","solution":"def maximizeProfit(prices): Given a list of stock prices, find the maximum profit that can be made by buying one stock on a given day and selling it on a later day. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit def processTestCases(T, testCases): Process the given test cases and return a list of maximum profits for each. results = [] for i in range(T): N, prices = testCases[i] results.append(maximizeProfit(prices)) return results"},{"question":"You are given a list of integers and you need to find the second largest integer in the list. If there is no second largest integer (i.e., all elements are the same), return -1. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains a single integer N - the number of elements in the list. - The second line contains N space-separated integers representing the elements of the list. ------ Output Format ------ For each test case, output in a single line, the second largest integer in the list. If there is no second largest integer, output -1. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 1 ≤ element in the list ≤ 1000 ----- Sample Input 1 ------ 3 5 2 3 6 6 5 3 1 1 1 4 7 7 8 8 ----- Sample Output 1 ------ 5 -1 7 ----- Explanation 1 ------ Test case 1: The list is [2, 3, 6, 6, 5]. The largest integer is 6 and the second largest integer is 5. Test case 2: The list is [1, 1, 1]. All elements are the same, so there is no second largest integer. Test case 3: The list is [7, 7, 8, 8]. The largest integer is 8 and the second largest integer is 7.","solution":"def second_largest_in_list(test_cases): This function takes a list of test cases, each containing a list of integers, and returns the second largest integer from each list. If there is no second largest integer, it returns -1 for that case. results = [] for case in test_cases: N, lst = case unique_elements = list(set(lst)) if len(unique_elements) < 2: results.append(-1) else: unique_elements.sort() results.append(unique_elements[-2]) return results"},{"question":"Sonia works for a logistics company that transports goods across a network of cities connected by bidirectional roads. Each road has a travel time associated with it. She needs to determine the shortest time required to travel from the warehouse city to multiple destination cities to ensure timely delivery. Given a network of `n` cities, the warehouse city is represented as city `1`, and the roads are described by `m` connections where each connection is a tuple of three integers `(u, v, w)` representing a road between cities `u` and `v` with a travel time of `w` minutes. You are given `q` destination cities, and for each of these cities, you need to find the shortest travel time from the warehouse city. If a destination city is unreachable from the warehouse city, return `-1` for that destination city. Write a function `find_shortest_travel_times` to solve this problem. The function has the following signature: ```python def find_shortest_travel_times(n: int, m: int, roads: List[Tuple[int, int, int]], q: int, destinations: List[int]) -> List[int]: pass ``` # Input - `n` : an integer representing the number of cities `n` (2 leq n leq 1000). - `m` : an integer representing the number of roads `m` (1 leq m leq 10000). - `roads` : a list of `m` tuples, where each tuple `(u, v, w)` represents a road between cities `u` and `v` with a travel time of `w` (1 leq u, v leq n and 1 leq w leq 10000). - `q` : an integer representing the number of destination cities `q` (1 leq q leq 1000). - `destinations` : a list of `q` integers representing the destination cities. # Output - A list of `q` integers where each integer is the shortest travel time from the warehouse city (city `1`) to the corresponding city in the `destinations` list. If a city is unreachable, the corresponding travel time should be `-1`. # Examples ```python print(find_shortest_travel_times(5, 6, [(1, 2, 10), (1, 3, 20), (2, 3, 15), (2, 4, 25), (3, 4, 30), (4, 5, 10)], 3, [2, 4, 5])) # Output: [10, 35, 45] print(find_shortest_travel_times(3, 2, [(1, 2, 10), (2, 3, 15)], 2, [2, 3])) # Output: [10, 25] print(find_shortest_travel_times(4, 2, [(1, 2, 10), (3, 4, 15)], 2, [2, 4])) # Output: [10, -1] ``` # Note: For the first example: - The shortest travel time from city 1 to city 2 is directly through the road (1, 2) with a time of 10 minutes. - The shortest travel time from city 1 to city 4 is through cities 1 -> 2 -> 4 with a total time of 10 + 25 = 35 minutes. - The shortest travel time from city 1 to city 5 is through cities 1 -> 2 -> 4 -> 5 with a total time of 10 + 25 + 10 = 45 minutes. For the third example: - The shortest travel time from city 1 to city 2 is directly through the road (1, 2) with a time of 10 minutes. - City 4 is unreachable from city 1, thus the output is `-1`.","solution":"import heapq from typing import List, Tuple, Dict def find_shortest_travel_times(n: int, m: int, roads: List[Tuple[int, int, int]], q: int, destinations: List[int]) -> List[int]: # Create adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in roads: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find the shortest path from node 1 def dijkstra(start: int) -> Dict[int, int]: min_heap = [(0, start)] shortest_paths = {i: float(\'inf\') for i in range(1, n + 1)} shortest_paths[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_distance > shortest_paths[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < shortest_paths[neighbor]: shortest_paths[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return shortest_paths # Get shortest paths from the warehouse city (1) shortest_paths_from_warehouse = dijkstra(1) # Determine shortest travel times to each destination result = [] for dest in destinations: travel_time = shortest_paths_from_warehouse[dest] result.append(travel_time if travel_time != float(\'inf\') else -1) return result"},{"question":"A popular online game is to navigate a character through a minefield grid. The grid is represented by an N x M matrix where each cell can either be clear (represented by \'.\') or contain a mine (represented by \'*\'). The player can move the character up, down, left, or right one cell per move, but cannot move into a cell containing a mine. The goal is to navigate the character from the top-left corner (0,0) to the bottom-right corner (N-1,M-1). Your task is to determine if it is possible to navigate the character from the top-left corner to the bottom-right corner without stepping on a mine, and if so, find the minimum number of moves required. If it is not possible, return -1. Input The input starts with a line containing two integers, N and M (2 ≤ N, M ≤ 1000), which represent the dimensions of the grid. The next N lines each contain a string of M characters where each character is either \'.\' or \'*\'. Output Output a single integer representing the minimum number of moves required to navigate the character from the top-left to the bottom-right corner. If it is not possible, output -1. Examples Input 5 5 ..... .*.*. .*.*. .*.*. ...*. Output 8 Input 3 3 .*. .*. .*. Output -1 Input 4 4 .... .*** .... .... Output 6 Note Explanation for the sample input/output #1 It is possible to navigate from the top-left corner to the bottom-right corner in 8 moves. Explanation for the sample input/output #2 It is not possible to navigate from the top-left corner to the bottom-right corner due to mines blocking all possible paths. Explanation for the sample input/output #3 It is possible to navigate from the top-left corner to the bottom-right corner in 6 moves.","solution":"from collections import deque def min_moves_in_minefield(N, M, grid): if grid[0][0] == \'*\' or grid[N-1][M-1] == \'*\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) visited = set((0, 0)) while queue: x, y, moves = queue.popleft() if x == N-1 and y == M-1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, moves + 1)) return -1"},{"question":"A research lab is developing a new algorithm to process sequences of integers. As part of their analysis, they want to know the length of the longest subsequence where each element is exactly one greater than the previous element. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. For example, in the sequence [1, 2, 3, 5, 6, 7, 8], one of the longest subsequences where each element is exactly one greater than the previous element is [5, 6, 7, 8], having a length of 4. Your task is to determine the length of the longest subsequence that fulfills the given conditions. -----Input----- The input contains two lines: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in the sequence. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 1000) — the sequence of integers. -----Output----- Output a single integer — the length of the longest subsequence where each element is exactly one greater than the previous one. -----Examples----- Input 7 1 2 3 5 6 7 8 Output 4 Input 10 1 9 8 2 3 5 7 6 4 10 Output 2","solution":"def longest_increasing_subsequence(n, sequence): Returns the length of the longest subsequence where each element is exactly one greater than the previous element. Parameters: n (int): The number of elements in the sequence. sequence (list of int): The sequence of integers. Returns: int: The length of the longest such subsequence. if not sequence: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sequence[i] == sequence[i - 1] + 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"# Recursive Sum of Digits Write a recursive function that computes the sum of the digits of a given non-negative integer. The function should keep summing the digits until a single-digit number is obtained. # Example: Input: 12345 Output: 6 (Explanation: 1+2+3+4+5 = 15, 1+5 = 6) Input: 99999 Output: 9 (Explanation: 9+9+9+9+9 = 45, 4+5 = 9) Write a program that takes a non-negative integer as input and outputs the single-digit sum of its digits.","solution":"def recursive_sum_of_digits(n): Recursively finds the sum of digits until a single-digit number is obtained. Args: n (int): A non-negative integer. Returns: int: A single-digit number that is the sum of the digits of the input. if n < 10: return n else: # Calculate the sum of digits of n sum_digits = sum(int(digit) for digit in str(n)) # Recursively sum the digits of the result return recursive_sum_of_digits(sum_digits)"},{"question":"Alice, an avid mountain climber, likes to plan her climbing routes meticulously. For this, she gathers data about a particular trail, which can be thought of as a sequence of segments, each having an elevation gain (positive value) or loss (negative value). To optimize her climbs, she wants to understand certain properties of these elevation segments. Specifically, she is interested in finding the maximum cumulative elevation gain over any contiguous sub-segment of the trail. This will help her better plan her rest stops and the effort required between them. You are to help Alice by writing a program that computes this maximum cumulative elevation gain given the elevation changes along the trail. # Input The first line contains a single integer `n` (1 ≤ n ≤ 100,000), the number of elevation changes. The second line contains `n` integers, each representing the change in elevation at a particular segment of the trail. The elevation changes are given in the order they occur along the trail and can be any integer from -10,000 to 10,000. # Output Output a single integer, the maximum cumulative elevation gain over any contiguous sub-segment of the trail. If all changes are negative, return 0 instead, as Alice can choose to skip the trail entirely. # Examples Example 1: **Input:** ``` 6 -1 2 4 -3 5 2 ``` **Output:** ``` 10 ``` **Explanation:** The optimum sub-segment is from index 1 to 5 in 0-based index, which adds up to 2 + 4 - 3 + 5 + 2 = 10. Example 2: **Input:** ``` 5 -5 -2 -3 -4 -1 ``` **Output:** ``` 0 ``` **Explanation:** As all segments have negative changes, Alice would choose to skip the trail entirely, resulting in a maximum elevation gain of 0. Example 3: **Input:** ``` 4 3 -2 3 -1 ``` **Output:** ``` 4 ``` **Explanation:** The optimum sub-segment is the entire trail, summed up as 3 - 2 + 3 - 1 = 3. # Note - The maximum cumulative elevation gain is akin to finding the maximum sum of a subarray, with the additional constraint that any negatives should be ignored by Alice preferring not to take those segments at all. Thus, if all elevation changes are negative, the result is zero.","solution":"def max_cumulative_elevation_gain(n, elevation_changes): Function to compute the maximum cumulative elevation gain over any contiguous sub-segment of the trail. max_gain = 0 current_gain = 0 for change in elevation_changes: current_gain += change if current_gain < 0: current_gain = 0 if current_gain > max_gain: max_gain = current_gain return max_gain"},{"question":"Write a function that takes a string containing a series of space-separated words and returns a new string with each word reversed. The order of the words should remain unchanged. Function Signature: ```python def reverse_each_word(sentence: str) -> str: ``` # Input - A single string `sentence` containing a series of space-separated words. The string will not be empty and will not contain leading or trailing spaces. # Output - A string with each word in the input `sentence` reversed. # Example Input: ```python \\"This is a test\\" ``` Output: ```python \\"sihT si a tset\\" ```","solution":"def reverse_each_word(sentence: str) -> str: Returns a new string with each word in the sentence reversed. The order of the words remains unchanged. words = sentence.split() reversed_words = [word[::-1] for word in words] return \' \'.join(reversed_words)"},{"question":"Given an integer array `arr` of size `n` and an integer `s`, find if there exists a subset in `arr` which sums exactly to `s`. Additionally, the subset should contain exactly `m` elements. Example 1: Input: n = 5, m = 2, s = 10 arr = {2, 4, 6, 8, 10} Output: True Explanation: Subset {6, 4} sums to 10. Example 2: Input: n = 4, m = 3, s = 25 arr = {7, 3, 5, 12} Output: False Explanation: No subset of 3 elements can sum to 25. Your Task: This is a function problem. You only need to complete the function `isSubsetSum()` that takes integers `n`, `m`, `s`, and an array `arr` as parameters and returns True or False indicating whether a subset of size `m` that sums to `s` exists. Expected Time Complexity: O(n*2^n) Expected Space Complexity: O(n*2^n) Constraints: 1 <= n, m <= 20 1 <= arr[i], s <= 100","solution":"from itertools import combinations def isSubsetSum(n, m, s, arr): Determine if there exists a subset of exactly m elements in the array that sums to s. if m > n: return False for subset in combinations(arr, m): if sum(subset) == s: return True return False"},{"question":"Create a program that reads a series of employees\' names and their working hours and outputs the total working hours and the average working hours. Input The input is given in the following format: Employee name: hours worked Employee name: hours worked :: :: A colon-separated pair of employee name and hours worked is given across multiple lines. Hours worked are between 0 and 168 (inclusive), and the number of employees does not exceed 200. Output Output the total working hours (integer) on the first line and the average working hours (integer) on the second line. If the average working hours have a fraction, round it to the nearest integer. Example Input John Doe: 40 Jane Smith: 55 Robert Brown: 32 Output 127 42","solution":"def calculate_working_hours(data): Function to calculate total and average working hours given a list of \\"name: hours\\" strings. total_hours = 0 count = 0 for line in data: if line.strip(): name, hours = line.split(\\":\\") total_hours += int(hours.strip()) count += 1 average_hours = round(total_hours / count) if count > 0 else 0 return total_hours, average_hours"},{"question":"Alice has a collection of N coins, each of which can show either heads or tails. She wants to check how many ways there are to arrange these N coins such that there are exactly K heads. Input Format The input starts with a single integer T, the number of test cases. This is followed by T lines, each containing two integers N and K. Output Format For each test case, print the number of ways to arrange N coins such that exactly K of them are heads. Constraints 1 leq T leq 100 1 leq N leq 30 0 leq K leq N Sample Input 3 5 3 4 2 6 0 Sample Output 10 6 1 Explanation In the first case, there are 10 ways to arrange 5 coins to get exactly 3 heads. In the second case, there are 6 ways to arrange 4 coins to get exactly 2 heads. In the third case, there is exactly 1 way to have all 6 coins show tails.","solution":"from math import comb def count_ways_to_get_k_heads(test_cases): results = [] for N, K in test_cases: results.append(comb(N, K)) return results def parse_input(input_data): lines = input_data.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T + 1): N, K = map(int, lines[i].split()) test_cases.append((N, K)) return test_cases"},{"question":"The country Z is famous for its intricate railway system and bustling trade. There are n cities in Z connected by m two-way railway tracks. Each city hosts a weekly market on certain days. A prominent trade company wants to maximize their profits by visiting as many unique markets as possible during any given trip, starting from the city\'s primary city, city number 1, on the first day of the week. The sales representatives are allowed to make one journey per night between cities that are directly connected by a railway track. The journey must start in city number 1, and each journey day corresponds to one day of the week. The representatives aim to maximize the number of distinct markets they can visit in any single trip. Input The first line contains three integers n, m, and d (1 ≤ n ≤ 100 000, 0 ≤ m ≤ 100 000, 1 ≤ d ≤ 50), the number of cities, the number of railway tracks, and the number of days in a week, respectively. Each of the next m lines contains two integers u_i and v_i (1 ≤ u_i, v_i ≤ n, u_i ≠ v_i), indicating a two-way railway track between cities u_i and v_i. The next n lines contain the market days schedule. The market days of the i-th city are described in the i-th of these lines. Each line consists of exactly d characters \\"0\\" or \\"1\\", where the j-th character equals to \\"1\\" if the market in that city is open on the j-th day of a week, and \\"0\\" otherwise. It\'s guaranteed that for each pair of cities (u, v) there exists no more than one railway track connecting them. Output Print a single integer — the maximum number of distinct markets that can be visited starting a trip in the first city on the first day of the week. Examples Input 5 5 7 1 2 1 3 2 4 3 5 4 5 1010101 0101010 1110000 0001111 1000001 Output 4 Input 4 3 5 1 2 1 3 2 4 11111 11100 00011 00111 Output 3 Note Explanation of the first example: The maximum number of distinct markets visited in the first example is 4. One possible route: - Day 1: Start at city 1 (market closed). Move to city 2 at night. - Day 2: In city 2 (market open). Move to city 4 at night. - Day 3: In city 4 (market open). Move to city 3 at night. - Day 4: In city 3 (market open). Move to city 5 at night. - Day 5: In city 5 (market open). Explanation of the second example: The maximum number of distinct markets visited in the second example is 3. One possible route: - Day 1: Start at city 1 (market open). Move to city 2 at night. - Day 2: In city 2 (market open). Move to city 4 at night. - Day 3: In city 4 (market open). The trip ends here, as the representatives have visited the maximum number of distinct markets within the week.","solution":"from collections import deque def max_distinct_markets(n, m, d, tracks, market_days): adj = [[] for _ in range(n + 1)] for u, v in tracks: adj[u].append(v) adj[v].append(u) def bfs(start_city): # Queue will have tuples of (current_city, day, visited_markets) q = deque([(start_city, 0, set())]) max_markets = 0 visited = set([(start_city, 0)]) while q: city, day, visited_markets = q.popleft() new_visited_markets = visited_markets.copy() if market_days[city - 1][day] == \'1\': new_visited_markets.add(city) max_markets = max(max_markets, len(new_visited_markets)) for neighbor in adj[city]: new_day = (day + 1) % d state = (neighbor, new_day) if state not in visited: visited.add(state) q.append((neighbor, new_day, new_visited_markets)) return max_markets return bfs(1)"},{"question":"Alyssa loves to collect gemstones and categorize them in different containers. Each gemstone has a weight, and each container can hold a certain maximum weight. She wants to determine the minimum number of containers needed to store all her gemstones. You are given two arrays. The first array contains the weights of the gemstones, and the second array contains the capacities of the containers. Each container can hold any combination of gemstones as long as their total weight does not exceed the container\'s capacity. Write a function that, given the two arrays, returns the minimum number of containers required to store all the gemstones. You can assume that each gemstone can only be placed in one container. Input: The first line contains two integers, N and M, where N (1 ≤ N ≤ 1000) is the number of gemstones and M (1 ≤ M ≤ 1000) is the number of containers. The second line contains N space-separated integers, representing the weights of the gemstones. The third line contains M space-separated integers, representing the capacities of the containers. Output: Print the minimal number of containers required to store all the gemstones. If it is not possible to store all the gemstones in the given containers, print -1. Sample Input: 3 3 4 8 1 5 5 10 Sample Output: 2","solution":"def minimum_containers(gem_weights, container_capacities): Returns the minimum number of containers required to store all gemstones. If it\'s not possible, returns -1. gem_weights.sort(reverse=True) # Sort gemstones from heaviest to lightest container_capacities.sort(reverse=True) # Sort containers from largest to smallest used_containers = 0 used_capacity = [0] * len(container_capacities) for gem in gem_weights: for i in range(len(container_capacities)): if used_capacity[i] + gem <= container_capacities[i]: used_capacity[i] += gem break else: return -1 return len([c for c in used_capacity if c > 0]) def parse_input(input_string): lines = input_string.strip().split(\'n\') _, _ = map(int, lines[0].split()) gem_weights = list(map(int, lines[1].split())) container_capacities = list(map(int, lines[2].split())) return gem_weights, container_capacities"},{"question":"In this problem, you are tasked with finding all valid scrambled versions of a given word that exist in a specified list of words. -----Input----- The first line contains an integer W denoting the number of words in the list. The following W lines each contain a word that is part of the list. The next line contains a single word S for which you need to find all valid scrambled versions from the list. -----Output----- Output all valid scrambled versions of the word S that appear in the list, each on a new line. The output words should be in lexicographical order. If no valid scrambled version is found, print \\"No valid scrambled words found\\". -----Constraints----- - 1 ≤ W ≤ 1000 - 1 ≤ length of each word ≤ 100 - All words in the list and the word S consist only of lowercase English letters. -----Example----- Input: 6 tea eat tan ate nat bat eat Output: ate eat tea Explanation: The word \\"eat\\" can be scrambled to form \\"tea\\", \\"eat\\", and \\"ate\\", all of which are present in the list. They are output in lexicographical order.","solution":"def find_scrambled_words(word_list, target_word): Returns a list of valid scrambled versions of the target_word that exist in the word_list. The returned list is sorted in lexicographical order. target_sorted = sorted(target_word) valid_scrambled_words = [] for word in word_list: if sorted(word) == target_sorted: valid_scrambled_words.append(word) if not valid_scrambled_words: return [\\"No valid scrambled words found\\"] return sorted(valid_scrambled_words)"},{"question":"Suppose you are given a text string that may contain various characters, including alphabets, digits, and special characters. Your task is to determine if it is possible to rearrange the characters of the string to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). If such a rearrangement is possible, you should return \\"YES\\"; otherwise, return \\"NO\\". -----Input----- The input consists of a single line containing a string `S` (1 ≤ |S| ≤ 10^5). The string can contain any visible ASCII characters. -----Output----- Output \\"YES\\" if the string can be rearranged to form a palindrome. Otherwise, output \\"NO\\". -----Examples----- Input aabbcc Output YES Input aabbc Output YES Input aabbcd Output NO","solution":"from collections import Counter def can_form_palindrome(s): Determines if characters of the string can be rearranged to form a palindrome. Args: s (str): Input string containing visible ASCII characters. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. # Count the frequency of each character char_count = Counter(s) # Check the number of characters with odd frequency odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if odd_count is at most 1 if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Remove all consecutive duplicate characters from a string, resulting in a string where no two adjacent characters are the same. -----Constraints----- - The input string will only contain lowercase alphabets. - The length of input string will be between 1 to 10^6. -----Input----- Input is given as a single string from Standard Input. -----Output----- Print the resulting string after removing all consecutive duplicate characters. -----Sample Input----- aaabccddddde -----Sample Output----- abcde - \'aaabccddddde\' -> \'aabccddddde\' -> \'abccddddde\' -> \'abccddddde\' -> \'abcddddde\' -> \'abcddddde\' -> \'abcdde\' -> \'abcdde\' -> \'abcde\'","solution":"def remove_consecutive_duplicates(s): Remove all consecutive duplicate characters from the input string. :param s: input string containing only lowercase alphabets :return: resulting string after removing consecutive duplicates if not s: return s result = [s[0]] for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result) # Example usage: # s = \\"aaabccddddde\\" # print(remove_consecutive_duplicates(s)) # Output: \\"abcde\\""},{"question":"Anna is an avid reader and loves organizing her personal library. She has n racks, and each rack contains a certain number of books. Anna wants to organize her library by moving books from one rack to another but in such a way that each rack ends up with exactly the same number of books. However, she dislikes having empty racks, so after redistribution, no racks should be left empty. Given the initial number of books on each rack, determine if it is possible to redistribute the books such that every rack has the same number of books without any rack being empty. If it is possible, output the number of books on each rack after the redistribution. Otherwise, output -1. Input The first line of input contains a single integer n (1 ≤ n ≤ 100), the number of racks. The second line contains n space-separated integers b1, b2, ..., bn (0 ≤ bi ≤ 1000), the initial number of books on each rack. Output Output a single integer — the number of books on each rack if it is possible to redistribute them evenly without any racks being empty. If it is not possible, output -1. Examples Input 5 6 9 3 6 6 Output 6 Input 4 0 4 4 4 Output -1 Input 3 2 4 6 Output 4 Note Sample 1. The total number of books is 30, and it can be evenly distributed across 5 racks with each rack having 6 books. Sample 2. Since there’s a rack with 0 books, it’s not possible to redistribute such that no rack is empty. Sample 3. The total number of books is 12, and it can be evenly distributed across 3 racks with each rack having 4 books.","solution":"def redistribute_books(n, books): Determines if it is possible to redistribute books so each rack has the same number of books without any rack being empty. Returns the number of books on each rack after redistribution if possible, otherwise returns -1. total_books = sum(books) if total_books % n != 0: return -1 books_per_rack = total_books // n if any(book == 0 for book in books): return -1 return books_per_rack"},{"question":"You are given a string s of length n consisting of lowercase English letters. You can apply the following operation to the string as many times as you want: - Choose a substring of s that is a palindrome and remove it. The characters to the left and right of the removed substring concatenate together after the removal. Your task is to find the maximum number of characters that you can remove from the string s by applying this operation any number of times. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the string s. The second line contains the string s consisting of lowercase English letters only. Output Print a single integer, the maximum number of characters that can be removed from the string s. Example Input 7 abacaba Output 7 Input 4 abba Output 4","solution":"def max_chars_removed_palindrome(n, s): Returns the maximum number of characters that can be removed from the string s by repeatedly removing palindromic substrings. # A string is always removable entirely by removing palindromic substrings in steps return n"},{"question":"Given a list of meeting events each with a start and end time, determine the minimum number of meeting rooms required to host all the meetings without conflict. -----Input----- The first line of input will contain a single integer N (1 leq N leq 1000) representing the number of meetings. Each of the next N lines contains two integers S and E (0 leq S < E leq 10000) representing the start and end times of a meeting. -----Output----- Output a single integer representing the minimum number of meeting rooms required. -----Examples----- Sample Input 1: 3 0 30 5 10 15 20 Sample Output 1: 2 Sample Input 2: 2 2 10 6 15 Sample Output 2: 2 Sample Input 3: 4 1 5 2 6 8 9 5 9 Sample Output 3: 2","solution":"def min_meeting_rooms(meetings): Returns the minimum number of meeting rooms required to host all the meetings without conflict. if not meetings: return 0 # Separate out the start and end times and sort them start_times = sorted(meeting[0] for meeting in meetings) end_times = sorted(meeting[1] for meeting in meetings) start_pointer = 0 end_pointer = 0 used_rooms = 0 while start_pointer < len(meetings): # If there is a meeting that has ended before the current meeting starts if start_times[start_pointer] >= end_times[end_pointer]: used_rooms -= 1 end_pointer += 1 # We do this irrespective of whether a room frees up or not. # If a room got free, then this used_rooms += 1 wouldn\'t have any effect. # used_rooms would remain the same in that case. used_rooms += 1 start_pointer += 1 return used_rooms"},{"question":"Jane is participating in a competitive programming contest. One of the problems requires finding the longest contiguous subsequence of days where the stock prices stayed equal or went up. Given a list of integers representing stock prices over several days, determine the length of this longest contiguous subsequence. Input The first line contains an integer n (1 ≤ n ≤ 500) — the number of days. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10^9) — the stock prices on these days. Output Print a single integer — the length of the longest contiguous subsequence where the stock prices stayed equal or went up. Examples Input 6 1 2 2 2 3 1 Output 5 Input 5 5 4 3 2 1 Output 1","solution":"def longest_non_decreasing_subsequence_length(n, prices): Returns the length of the longest contiguous subsequence where stock prices stayed equal or went up. Args: n : int : number of days prices : list : stock prices over several days Returns: int : the length of the longest contiguous subsequence where the stock prices stayed equal or went up if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if prices[i] >= prices[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Create a function ```python longest_subarray_with_sum(arr, target) ``` that given an array `arr` of integers and an integer `target`, returns the length of the longest contiguous subarray that sums to `target`. For example: ```python longest_subarray_with_sum([1, -1, 5, -2, 3], 3) == 4 longest_subarray_with_sum([-2, -1, 2, 1], 1) == 2 longest_subarray_with_sum([1, 2, 3], 6) == 3 ``` ```haskell longestSubarrayWithSum [1, -1, 5, -2, 3] 3 `shouldBe` 4 longestSubarrayWithSum [-2, -1, 2, 1] 1 `shouldBe` 2 longestSubarrayWithSum [1, 2, 3] 6 `shouldBe` 3 ``` If there is no such subarray, return 0.","solution":"def longest_subarray_with_sum(arr, target): Returns the length of the longest contiguous subarray that sums to `target`. Parameters: arr (list): The list of integers. target (int): The target sum for the subarray. Returns: int: The length of the longest subarray that sums to `target`. If no such subarray exists, returns 0. sum_map = {} curr_sum = 0 max_len = 0 for i in range(len(arr)): curr_sum += arr[i] # If current sum is equal to the target, update max_len if curr_sum == target: max_len = i + 1 # Check if current sum - target is seen before if (curr_sum - target) in sum_map: max_len = max(max_len, i - sum_map[curr_sum - target]) # Store current sum with index only if current sum is not present in the map if curr_sum not in sum_map: sum_map[curr_sum] = i return max_len"},{"question":"Given an array A[] of size n. The task is to find the smallest element in it. Example 1: Input: n = 6 A[] = {3, 1, 4, 1, 5, 9} Output: 1 Explanation: The smallest element of given array is 1. Example 2: Input: n = 4 A[] = {-5, -10, 3, 2} Output: -10 Explanation: The smallest element of given array is -10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallest() which takes the array A[] and its size n as inputs and returns the minimum element in the array. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{3} -10^{3} <= A[i] <= 10^{3} Array may contain duplicate elements.","solution":"def smallest(A, n): Returns the smallest element in the array A of size n. # Initialize the minimum element as the first element of the array min_element = A[0] # Iterate through the array to find the minimum element for i in range(1, n): if A[i] < min_element: min_element = A[i] return min_element"},{"question":"You are given an array of integers and a target difference k. Your task is to determine the number of unique pairs (i, j) in the array such that the difference between array[i] and array[j] is exactly k. A pair (i, j) is considered unique if and only if: 1. i < j and 2. There is no other pair (x, y) such that array[i] == array[x] and array[j] == array[y] or array[i] == array[y] and array[j] == array[x]. Input: - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 0 ≤ k ≤ 10^9) — the number of elements in the array and the target difference. - The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. Output: - Print a single integer — the number of unique pairs with the given difference. Examples: Input: 5 3 1 5 3 4 2 Output: 2 Input: 4 0 1 2 3 4 Output: 0 Note: In the first example, there are two pairs with a difference of 3: (1, 4) and (2, 5). In the second example, there are no pairs with difference 0 (since all elements are distinct).","solution":"def count_pairs_with_difference(arr, k): Returns the number of unique pairs (i, j) such that the difference between arr[i] and arr[j] is exactly k. count = 0 seen = set() for num in arr: if (num - k) in seen: count += 1 if (num + k) in seen: count += 1 seen.add(num) return count def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) arr = list(map(int, data[2:n+2])) print(count_pairs_with_difference(arr, k)) if __name__ == \\"__main__\\": main()"},{"question":"Implement a function `remove_duplicates` that takes in a single string consisting of lowercase alphabetic characters and returns a new string with all duplicate characters removed, while preserving the order of their first occurrence. For example: - `remove_duplicates(\\"programming\\")` should return `\\"progamin\\"` - `remove_duplicates(\\"hello\\")` should return `\\"helo\\"` - `remove_duplicates(\\"aabbcc\\")` should return `\\"abc\\"` - `remove_duplicates(\\"\\")` should return `\\"\\"` Constraints: - The length of the input string will be between 0 and 1000 characters.","solution":"def remove_duplicates(input_string): Removes duplicate characters from the input string while preserving the order of first occurrence. Parameters: input_string (str): The string from which to remove duplicate characters. Returns: str: A new string with duplicates removed. seen = set() result = [] for char in input_string: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Anna is a professional puzzle solver. She loves analyzing different sequences and patterns. One day, she came across a sequence problem that intrigued her. The problem is defined as follows: Given an integer n, generate a sequence of integers a_1, a_2, ..., a_n such that: - Each element a_i (for 1 ≤ i ≤ n) is a positive integer. - Each element a_i is greater than or equal to its 1-based index i. - The sum of the elements in the sequence is minimized. Help Anna find the sequence and its sum. -----Input----- A single line containing a positive integer n (1 ≤ n ≤ 10^6). -----Output----- Print a single integer which is the sum of the sequence with the given properties for the given n. -----Examples----- Input 3 Output 6 Input 5 Output 15 Input 1 Output 1","solution":"def minimal_sequence_sum(n): Returns the sum of the sequence where each element a_i is at least i and the sum is minimized. return n * (n + 1) // 2"},{"question":"A restaurant is organizing a chef competition where chefs will be cooking dishes to earn points based on the quality of their dishes. The competition is such that there are two types of cooking sessions - a primary session and a secondary session. Each chef will participate in both types of sessions but with different sets of dishes and points for each session. Given the points that each chef can earn in the primary session and the secondary session, we need to determine the maximum total points each chef can earn, considering that each chef can select only one of their best scores from each type of session. -----Input----- The input contains the performance scores of the chefs in four lines. Each line contains two space-separated integers p_{i} and s_{i} (1 ≤ p_{i}, s_{i} ≤ 100) — the points that the i-th chef can earn in the primary and secondary sessions, respectively. -----Output----- Print a single integer representing the maximum total points that can be earned when the best scores from the primary and secondary sessions for each chef are considered. -----Example----- Input 80 90 70 85 95 65 100 60 Output 300 -----Note----- In the provided example, here\'s how we calculate the maximum total points: - Chef 1: Choose the higher score between 80 and 90 → 90 - Chef 2: Choose the higher score between 70 and 85 → 85 - Chef 3: Choose the higher score between 95 and 65 → 95 - Chef 4: Choose the higher score between 100 and 60 → 100 The total points = 90 + 85 + 95 + 100 = 370","solution":"def max_total_points(points): Returns the maximum total points that can be earned by selecting the best score from each session for all chefs. Args: points (list of tuples): A list of tuples where each tuple contains two integers p_i and s_i, representing the points that the i-th chef can earn in the primary and secondary sessions respectively. Returns: int: The maximum total points. total_points = 0 for p_i, s_i in points: total_points += max(p_i, s_i) return total_points"},{"question":"You are given an array of integers representing scores. Your task is to compute the longest contiguous subsequence of scores where the difference between the highest and lowest scores in that subsequence is less than or equal to a given integer K. If no such subsequence exists, return 0. Constraints * 1 leq N leq 10^5 * 1 leq K leq 10^9 * 1 leq text{score}_i leq 10^7 Input The input is given in the following format. N K text{score}_1 text{score}_2 ... text{score}_N Output Print the length of the longest subsequence in a line. Examples Input 7 4 5 3 8 6 7 4 2 Output 4 Input 5 3 1 5 9 2 4 Output 2 Input 4 1 3 3 3 3 Output 4","solution":"def longest_subsequence_within_k(scores, K): Returns the length of the longest contiguous subsequence where the difference between the highest and lowest scores is less than or equal to K. n = len(scores) if n == 0: return 0 longest = 0 start = 0 # Maintain a list to get min and max in O(1) sorted_window = [] for end in range(n): sorted_window.append(scores[end]) sorted_window.sort() # Shrink window from start if max - min > K while sorted_window[-1] - sorted_window[0] > K: sorted_window.remove(scores[start]) sorted_window.sort() start += 1 # Calculate the current valid subsequence length longest = max(longest, end - start + 1) return longest"},{"question":"Write a function `matrix_spiral_sum` that takes an `n x n` integer matrix as input and returns the sum of its elements when traversed in a spiral order, starting from the top-left corner and moving clockwise. For example, given the matrix: ``` [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] ``` The spiral order traversal is `[1, 2, 3, 6, 9, 8, 7, 4, 5]`, and the sum of these elements is `45`. Constraints: - `1 <= n <= 50` - The elements of the matrix are integers between `-10^3` and `10^3`. Function signature: `def matrix_spiral_sum(matrix: List[List[int]]) -> int:`","solution":"def matrix_spiral_sum(matrix): if not matrix: return 0 rows, cols = len(matrix), len(matrix[0]) startRow, endRow = 0, rows - 1 startCol, endCol = 0, cols - 1 spiral_sum = 0 while startRow <= endRow and startCol <= endCol: # Traverse right for col in range(startCol, endCol + 1): spiral_sum += matrix[startRow][col] startRow += 1 # Traverse down for row in range(startRow, endRow + 1): spiral_sum += matrix[row][endCol] endCol -= 1 if startRow <= endRow: # Traverse left for col in range(endCol, startCol - 1, -1): spiral_sum += matrix[endRow][col] endRow -= 1 if startCol <= endCol: # Traverse up for row in range(endRow, startRow - 1, -1): spiral_sum += matrix[row][startCol] startCol += 1 return spiral_sum"},{"question":"You are given a list of integers representing the strengths of participants in a competition. Each participant has a distinct strength value. Your goal is to form the largest possible number of teams. A team is valid if and only if: - Each team consists of exactly three participants. - The strengths of the participants in each team have the property that the sum of any two strengths is greater than the strength of the remaining participant. Write a program to determine the maximum number of valid teams that can be formed. -----Input----- The first line contains one integer n (1 ≤ n ≤ 500), the number of participants. The second line contains n integer numbers s_1, s_2, ... , s_{n} (1 ≤ s_{i} ≤ 10^9), representing the strengths of the participants. -----Output----- Print one integer number — the maximum number of valid teams that can be formed. -----Examples----- Input 7 10 20 30 40 50 60 70 Output 2 Input 5 1 2 3 4 5 Output 1 -----Note----- In the first example, the valid teams can be (10, 20, 30) and (40, 50, 60). The participant with strength 70 cannot be placed in a team as there are not enough remaining participants to form another valid team. In the second example, the only valid team is (1, 4, 5). Other combinations do not satisfy the condition that the sum of any two strengths must be greater than the strength of the remaining participant.","solution":"def max_valid_teams(n, strengths): Returns the maximum number of valid teams that can be formed from the given strengths of participants. if n < 3: return 0 strengths.sort() teams = 0 i = n - 1 # Start from the strongest participant and move downwards while i >= 2: # Check for a valid team (a, b, c) where a <= b <= c if strengths[i] < strengths[i-1] + strengths[i-2]: teams += 1 i -= 3 # Move back by three, as these three participants form a team else: i -= 1 # Move back by one, as the current strongest does not form a valid team return teams"},{"question":"A meteorological institute wants to track the hottest temperature recorded in a series of days. They have n days of data, but they accidentally misplaced the temperature values. Fortunately, they do have a record of comparisons between some days. Each comparison shows that the temperature on day i was greater than the temperature on day j. You need to determine a possible maximum temperature value for each day based on the comparisons provided. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of days of data available. The second line contains an integer k (0 ≤ k ≤ 2*10^5) — the number of comparisons. Each of the next k lines contains two integers i and j (1 ≤ i, j ≤ n, i ≠ j) which means that the temperature on day i was greater than the temperature on day j. Output If there are inconsistencies in the comparisons such that no valid temperature sequence can be constructed, print -1. Otherwise, print n integers representing a possible sequence of temperatures for the n days in non-decreasing order. Examples Input 4 3 1 2 2 3 3 4 Output 4 3 2 1 Input 3 3 1 2 2 3 3 1 Output -1","solution":"def find_max_temperatures(n, k, comparisons): from collections import defaultdict, deque # Create adjacency list and in-degrees count adj_list = defaultdict(list) in_degrees = [0] * (n + 1) for i, j in comparisons: adj_list[i].append(j) in_degrees[j] += 1 # Topological Sort using Kahn\'s Algorithm queue = deque() for i in range(1, n + 1): if in_degrees[i] == 0: queue.append(i) topo_order = [] while queue: current = queue.popleft() topo_order.append(current) for neighbor in adj_list[current]: in_degrees[neighbor] -= 1 if in_degrees[neighbor] == 0: queue.append(neighbor) # If topo_order doesn\'t contain all nodes, then there is a cycle if len(topo_order) != n: return [-1] # We can assign decreasing values from n to 1 based on the topological order temperatures = [0] * n for i in range(n): temperatures[topo_order[i] - 1] = n - i return temperatures"},{"question":"Your friend has developed a new encryption algorithm. This algorithm takes a string and a character shift value as input and outputs the encrypted string using the given shift value. Here\'s how the encryption works: 1. For each letter in the input string, shift the letter by the given number of positions in the alphabet. 2. The shift wraps around the alphabet, so if shifting a letter by a certain number of positions results in moving past \'z\', it wraps back around to \'a\'. Similarly, for uppercase letters, if shifting past \'Z\', it wraps back to \'A\'. 3. Non-alphabetic characters are not shifted and remain in their original position. For example, if the input string is \\"Hello, World!\\" with a shift value of 3, the encrypted string will be \\"Khoor, Zruog!\\". Write a function that performs this encryption. ----- Input Format ----- - The first line contains an integer T, denoting the number of test cases. - Each of the next T lines contains a string S and an integer K, denoting the input string and the shift value respectively. The string S will contain only printable ASCII characters. ----- Output Format ----- - For each test case, output the encrypted string on a new line. ----- Constraints ----- - 1 leq T leq 10^4 - 1 leq len(S) leq 10^4 - 0 leq K leq 100 ----- Sample Input ----- 3 abc 1 XYZ 3 Hello, World! 5 ----- Sample Output ----- bcd ABC Mjqqt, Btwqi! ----- Explanation ----- Test case 1: Each character is shifted by 1 position. \'a\' becomes \'b\', \'b\' becomes \'c\', and \'c\' becomes \'d\'. Test case 2: Each character is shifted by 3 positions. \'X\' becomes \'A\', \'Y\' becomes \'B\', and \'Z\' becomes \'C\'. Test case 3: Each character is shifted by 5 positions. \'H\' becomes \'M\', \'e\' becomes \'j\', \'l\' becomes \'q\', \'l\' becomes \'q\', \'o\' becomes \'t\', the comma remains the same, \' \' (space) remains the same, \'W\' becomes \'B\', \'o\' becomes \'t\', \'r\' becomes \'w\', \'l\' becomes \'q\', and \'d\' becomes \'i\'. The exclamation mark remains the same.","solution":"def encrypt_string(s, k): Encrypts the input string s by shifting its characters by k positions in the alphabet. Non-alphabet characters remain unchanged. :param s: The input string to be encrypted. :param k: The shift value for the encryption. :return: The encrypted string. encrypted = [] for char in s: if char.isalpha(): shift = k % 26 if char.islower(): encrypted.append(chr((ord(char) - ord(\'a\') + shift) % 26 + ord(\'a\'))) elif char.isupper(): encrypted.append(chr((ord(char) - ord(\'A\') + shift) % 26 + ord(\'A\'))) else: encrypted.append(char) return \'\'.join(encrypted) def process_test_cases(test_cases): Processes multiple test cases and returns their encrypted results. :param test_cases: A list of tuples, each containing a string and an integer shift value. :return: A list of encrypted strings corresponding to each test case. results = [] for s, k in test_cases: results.append(encrypt_string(s, k)) return results"},{"question":"Given an array of integers and a target number, find all unique combinations in the array where the integers sum up to the target number. Each number in the array may be used multiple times in the combination. Return all possible combinations as a list of lists. The solution set must not contain duplicate combinations. -----Input----- The input consists of two lines: - The first line contains a space-separated list of integers. - The second line contains the target integer. -----Output----- Output the list of unique combinations that add up to the target integer. -----Constraints----- - Each integer in the input array is positive. - The integers in the array are sorted in non-descending order. - 1 ≤ length of the array ≤ 50 - 1 ≤ each integer in the array ≤ 100 - 1 ≤ target ≤ 500 -----Example----- Input: 2 3 5 8 Output: [ [2, 2, 2, 2], [2, 3, 3], [3, 5] ] Explanation: - The possible unique combinations that sum up to 8 are [2, 2, 2, 2], [2, 3, 3], and [3, 5].","solution":"def combination_sum(candidates, target): res = [] def backtrack(remain, comb, start): if remain == 0: res.append(list(comb)) return if remain < 0: return for i in range(start, len(candidates)): comb.append(candidates[i]) backtrack(remain - candidates[i], comb, i) comb.pop() candidates.sort() backtrack(target, [], 0) return res"},{"question":"You are given an integer sequence b_1, b_2, ldots, b_m. Your task is to rearrange this sequence in a specific way: split it into k subarrays such that each subarray is a strictly decreasing sequence. Each element from the original sequence must be part of exactly one subarray. After splitting, the sum of the lengths of all subarrays should be greater than or equal to half of the length of the original sequence. For instance, consider the sequence [10, 3, 8, 5, 7, 2]. If we split it into subarrays [10, 3], [8, 5], [7, 2], each subarray is strictly decreasing, and the sum of lengths is 2 + 2 + 2 = 6, which is greater than 3 (half of 6). You must determine if there exists such a way to split the sequence b. -----Input----- The first line contains a single integer q (1 le q le 100) — the number of test cases. The first line of each test case contains a single integer m (2 le m le 10^4). The second line of each test case contains m integers b_1, b_2, ldots, b_m (1 le b_i le 10^9). It is guaranteed that the sum of m over all test cases doesn\'t exceed 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to split the sequence into the described subarrays, print \\"NO\\" otherwise. -----Examples----- Input 3 6 10 3 8 5 7 2 5 1 2 3 4 5 4 9 8 7 6 Output YES NO YES -----Note----- In the first test case, the sequence can be split as [10, 3], [8, 5], [7, 2], each of which is strictly decreasing, and the sum of their lengths = 6 geq 3. In the second test case, there is no possible way to split the sequence into subarrays where each is strictly decreasing. In the third test case, the entire sequence [9, 8, 7, 6] is strictly decreasing, and its length = 4 geq 2.","solution":"def split_sequence(q, test_cases): results = [] for test in test_cases: m, sequence = test subarrays = [] current_subarray = [sequence[0]] for i in range(1, m): if sequence[i] < current_subarray[-1]: current_subarray.append(sequence[i]) else: if len(current_subarray) >= 2: subarrays.append(current_subarray) current_subarray = [sequence[i]] if len(current_subarray) >= 2: subarrays.append(current_subarray) total_length = sum(len(subarray) for subarray in subarrays) if total_length >= m / 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example input q = 3 test_cases = [ (6, [10, 3, 8, 5, 7, 2]), (5, [1, 2, 3, 4, 5]), (4, [9, 8, 7, 6]) ] # Example output print(split_sequence(q, test_cases)) # Output: [\'YES\', \'NO\', \'YES\']"},{"question":"A company is offering a special discount on its products. To determine if a customer is eligible for the discount, the following conditions must be met: The total amount spent by the customer (denoted by S) is at least P. The customer must have made at least Q purchases. Determine if the customer is eligible for the discount based on their total spending and number of purchases. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, containing three integers P, Q, and S, followed by the number of purchases R the customer has made. ------ Output Format ------ For each test case, output YES if the customer is eligible for the discount, NO otherwise. You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 100 ≤ P ≤ 10000 1 ≤ Q ≤ 100 0 ≤ S ≤ 20000 0 ≤ R ≤ 200 ----- Sample Input 1 ------ 4 500 10 600 11 1000 5 800 10 300 2 400 2 750 8 750 7 ----- Sample Output 1 ------ YES NO YES NO ----- explanation 1 ------ Test case 1: The total amount spent by the customer is 600, which is at least 500. Additionally, the customer has made 11 purchases, which is at least 10. Hence, the customer is eligible for the discount. Test case 2: The total amount spent by the customer is 800, which is less than 1000. Although the customer has made 10 purchases (which is at least 5), the total spending criterion is not met. Hence, the customer is not eligible for the discount. Test case 3: The total amount spent by the customer is 400, which is at least 300. Additionally, the customer has made 2 purchases, exactly meeting the criterion. Hence, the customer is eligible for the discount. Test case 4: The total amount spent by the customer is 750, exactly meeting the amount criterion. However, the customer has made 7 purchases, fewer than the required 8. Hence, the customer is not eligible for the discount.","solution":"def check_discount_eligibility(test_cases): results = [] for case in test_cases: P, Q, S, R = case if S >= P and R >= Q: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] for line in lines[1:]: P, Q, S, R = map(int, line.split()) test_cases.append((P, Q, S, R)) return T, test_cases def main(input_string): T, test_cases = parse_input(input_string) results = check_discount_eligibility(test_cases) for result in results: print(result)"},{"question":"All the employees of a company work in a single linear office and their desks are numbered 0, 1, 2, ..., N-1. One day, as a part of a team-building activity, the manager randomly rearranges their seating and provides each employee with a list of \\"desired desk neighbors\\". Each employee desires to sit directly next to a particular set of specific colleagues. The manager allows the employees to swap seats exactly once in an attempt to satisfy as many employees\' neighbor desires as possible. Determine the maximum number of employees who can have at least one desired neighbor after one swap of seats. Input: - An integer N - Total number of employees (2 ≤ N ≤ 10^6) - Next line contains a permutation of N integers (from 0 to N-1) where the ith number represents the current desk of the ith employee. - Next N lines each contain a space-separated list of integers representing the desired neighbors for the corresponding employee (or an empty line if they have no specific preferences). Output: Output a single integer containing the maximum number of employees who can have at least one desired neighbor after one swap. Example: Input: 4 0 2 3 1 1 3 0 1 2 0 Output: 3","solution":"def max_satisfied_employees(n, seating, desires): Returns the maximum number of employees who can have at least one desired neighbor after one swap of seats. def has_desired_neighbor(employee, seating): pos = seating.index(employee) if pos > 0 and seating[pos - 1] in desires[employee]: return True if pos < n - 1 and seating[pos + 1] in desires[employee]: return True return False # Count initial satisfied employees initial_satisfied = 0 for i in range(n): if has_desired_neighbor(i, seating): initial_satisfied += 1 max_satisfied = initial_satisfied # Try each possible swap for i in range(n): for j in range(i + 1, n): # Swap employees i and j seating[i], seating[j] = seating[j], seating[i] satisfied_after_swap = 0 for k in range(n): if has_desired_neighbor(k, seating): satisfied_after_swap += 1 max_satisfied = max(max_satisfied, satisfied_after_swap) # Swap back seating[i], seating[j] = seating[j], seating[i] return max_satisfied"},{"question":"Two famous collectors, Alice and Bob, are planning to exchange their collectible cards. Each card has a value and belongs to different sets denoted by a unique lowercase letter. Alice and Bob want to know the minimum number of cards each has to give away in order to collect one card each from every possible set without ending up with any duplicate cards from the same set. Write a function `min_cards_to_exchange` that calculates the minimum number of cards Alice and Bob have to exchange to ensure that both of them end up with one card from each set. Function Signature: ```python def min_cards_to_exchange(alice_cards: str, bob_cards: str) -> int: pass ``` # Input Format - `alice_cards`: A string of lowercase letters representing the sets of Alice\'s cards. - `bob_cards`: A string of lowercase letters representing the sets of Bob\'s cards. # Output Format - Return an integer representing the minimum number of cards they need to exchange. # Constraints - The length of the string `alice_cards` and `bob_cards` can be up to 10^5. - Each card belongs to exactly one set denoted by a lowercase letter. # Sample Input 1 ``` alice_cards = \\"aabcc\\" bob_cards = \\"dbbb\\" ``` # Sample Output 1 ``` 3 ``` # Explanation 1 Alice has cards from sets {a, b, c}. Bob has cards from sets {d, b}. To complete each set: - Alice can give one card from set \'a\' and \'c\' to Bob. - Bob can give one card from set \'d\' to Alice. Alice will receive cards from sets {d} and give away cards from sets {a, c}, while Bob will receive cards from sets {a, c} and give away cards from set {d}. # Sample Input 2 ``` alice_cards = \\"abc\\" bob_cards = \\"xyz\\" ``` # Sample Output 2 ``` 6 ``` # Explanation 2 There are no common sets between Alice and Bob\'s cards. Alice needs cards from sets {x, y, z} and Bob needs cards from sets {a, b, c}. They need to exchange a total of 6 cards to cover all possible sets.","solution":"def min_cards_to_exchange(alice_cards: str, bob_cards: str) -> int: # Find the unique sets each one has alice_sets = set(alice_cards) bob_sets = set(bob_cards) # Calculate sets that only Alice has and Bob needs alice_unique_sets = alice_sets - bob_sets # Calculate sets that only Bob has and Alice needs bob_unique_sets = bob_sets - alice_sets # The minimum number of cards to exchange is the sum of unique sets each needs from the other return len(alice_unique_sets) + len(bob_unique_sets)"},{"question":"You are given a grid with `n` rows and `m` columns. Each cell in the grid contains a value which can be either 0, indicating an unblocked cell, or 1, indicating a blocked cell. You need to find the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, m-1). You can move in four possible directions: up, down, left, and right. Note that you cannot move through blocked cells, and you must find the shortest path if it exists. If there is no path, return -1. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000). The next n lines each contain m integers, where the j-th integer is the value of the cell (0 or 1) in the i-th row. Output Output the length of the shortest path from the top-left corner to the bottom-right corner. If no such path exists, output -1. Examples Input 5 5 0 1 0 0 0 0 1 0 1 0 0 0 0 1 0 0 1 1 1 0 0 0 0 0 0 Output 9 Input 3 3 0 1 1 1 1 0 1 0 0 Output -1 Note In the first example, the shortest path from the top-left corner to the bottom-right corner has length 9, as shown below: ```plaintext (0, 0) -> (1, 0) -> (2, 0) -> (2, 1) -> (2, 2) -> (3, 2) -> (4, 2) -> (4, 3) -> (4, 4) ``` In the second example, there is no path from the top-left corner to the bottom-right corner.","solution":"from collections import deque def shortest_path(grid): Returns the length of the shortest path from the top-left corner to the bottom-right corner in a grid. If no such path exists, returns -1. n = len(grid) m = len(grid[0]) if grid[0][0] == 1 or grid[n-1][m-1] == 1: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 1)]) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0 and (nx, ny) not in visited: queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1"},{"question":"A company is developing its own file system, and you are tasked with implementing a basic version of it. The file system should keep track of directories and the number of files they contain. Each directory can contain subdirectories, and you need to be able to count the total number of files in a given directory, including all its subdirectories. -----Input----- The first line contains an integer n (1 le n le 10^4) – the number of operations you have to perform on the file system. Each of the next n lines contains a command that can be one of the following: - \\"CREATE directory_name\\" – create a directory with the given name. - \\"ADD filename directory_name\\" – add a file with the given name to the specified directory. - \\"MOVE src_directory dest_directory\\" – move the contents of the source directory to the destination directory. - \\"COUNT directory_name\\" – print the total number of files in the specified directory, including all its subdirectories. All directory names and file names used will be alphanumeric strings with lengths up to 100 characters. -----Output----- For each \\"COUNT\\" command, you need to print the total number of files in the specified directory. -----Examples----- Input 6 CREATE root ADD file1 root CREATE sub MOVE root sub COUNT sub ADD file2 sub Output 1 Explanation: 1. Create the root directory. 2. Add file1 to the root directory. 3. Create a sub directory. 4. Move content of the root directory to the sub directory. 5. Count the total number of files in the sub directory, which is 1 (file1). 6. Add file2 to the sub directory. Thus, the total number of files in the sub directory is 1 after the commands are executed. -----Note----- Directories can be nested within each other, and moving a directory means transferring all its contents, including files and subdirectories, to another directory. Consider edge cases, such as trying to add files to or count files in a non-existent directory.","solution":"class FileSystem: def __init__(self): self.directories = {} def create(self, directory_name): if directory_name not in self.directories: self.directories[directory_name] = {\\"files\\": set(), \\"subdirs\\": {}} def add(self, filename, directory_name): if directory_name in self.directories: self.directories[directory_name][\\"files\\"].add(filename) def move(self, src_directory, dest_directory): if src_directory in self.directories and dest_directory in self.directories: dest_subdirs = self.directories[dest_directory][\\"subdirs\\"] if src_directory in dest_subdirs: raise Exception(f\\"Cyclic move detected: {src_directory} to {dest_directory}\\") else: dest_files = self.directories[dest_directory][\\"files\\"] src_files = self.directories[src_directory][\\"files\\"] dest_files.update(src_files) dest_subdirs[src_directory] = self.directories[src_directory] del self.directories[src_directory] def count(self, directory_name): def count_files(directory): files = set(directory[\\"files\\"]) for subdir in directory[\\"subdirs\\"].values(): files.update(count_files(subdir)) return files if directory_name in self.directories: return len(count_files(self.directories[directory_name])) return 0 def execute(self, commands): for command in commands: parts = command.split() if parts[0] == \\"CREATE\\": self.create(parts[1]) elif parts[0] == \\"ADD\\": self.add(parts[1], parts[2]) elif parts[0] == \\"MOVE\\": self.move(parts[1], parts[2]) elif parts[0] == \\"COUNT\\": print(self.count(parts[1])) # Example usage: # fs = FileSystem() # commands = [ # \\"CREATE root\\", # \\"ADD file1 root\\", # \\"CREATE sub\\", # \\"MOVE root sub\\", # \\"COUNT sub\\", # \\"ADD file2 sub\\" # ] # fs.execute(commands)"},{"question":"You have a list of integers representing the prices of items in a store. You want to buy exactly K items such that their total price is maximized but not exceeding a given budget B. Your task is to determine the maximum sum of prices of any such combination of K items. Input The first line contains three integers n, K, and B (1 ≤ n ≤ 50, 1 ≤ K ≤ n, 1 ≤ B ≤ 2500) — the number of items in the store, the number of items to buy, and the budget respectively. The second line contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 50), where p_i represents the price of the i-th item. Output Output one integer — the maximum sum of prices of any combination of exactly K items that does not exceed the budget B. If no such combination exists, output 0. Examples Input ``` 5 3 100 20 30 50 10 40 ``` Output ``` 100 ``` Input ``` 4 2 60 25 35 45 55 ``` Output ``` 60 ``` Input ``` 3 1 10 15 20 30 ``` Output ``` 0 ``` Note In the first example, you can buy items with prices 20, 30, and 50 which sums up to 100. In the second example, you can buy items with prices 25 and 35 which sums up to 60. In the third example, there is no combination to buy exactly 1 item with a price not exceeding the budget of 10.","solution":"from itertools import combinations def max_sum_of_k_items_within_budget(n, K, B, prices): Determines the maximum sum of prices of any combination of exactly K items that does not exceed the budget B. max_sum = 0 for combo in combinations(prices, K): combo_sum = sum(combo) if combo_sum <= B: max_sum = max(max_sum, combo_sum) return max_sum"},{"question":"As a software engineer at a smart home company, you have been tasked to implement a new security feature. This feature prompts users to create a security PIN that follows specific rules. The PIN must be validated based on the following criteria: 1. The PIN must be exactly N digits long. 2. The PIN can only contain numeric digits (0-9). 3. The PIN must contain at least one even digit. 4. The PIN must not contain any repeating digits. You need to write a function that takes in a PIN and checks whether it meets these criteria. If the PIN is valid, the function should return `True`. If the PIN is invalid, the function should return `False`. # Input The input consists of a single line containing two arguments: - An integer N (1 ≤ N ≤ 10) representing the required length of the PIN. - A string representing the user-provided PIN. # Output Output a boolean value: `True` if the provided PIN meets all the criteria, and `False` otherwise. # Example Input: `4 1234` Output: `True` Input: `4 1123` Output: `False` Input: `5 12345` Output: `True` Input: `6 123456` Output: `False`","solution":"def validate_pin(N, pin): Validates a security PIN based on specified criteria. Args: N (int): The required length of the PIN. pin (str): The user-provided PIN. Returns: bool: True if the pin is valid, False otherwise. if len(pin) != N: return False if not pin.isdigit(): return False if not any(int(digit) % 2 == 0 for digit in pin): return False if len(set(pin)) != len(pin): return False return True"},{"question":"You are given a list of integers, and you need to find the second smallest integer in the list. If the list contains less than two unique integers, output -1. Input The input is a single line containing space-separated integers. The number of integers will be between 1 and 1000, inclusive. Each integer can range from -1000 to 1000, inclusive. Output Output the second smallest integer in the list, or -1 if there are not enough unique integers. Examples Input 5 3 9 1 4 3 Output 3 Input 1 1 1 1 Output -1 Input 7 -2 4 -2 0 -1 5 Output -1","solution":"def second_smallest(nums): Returns the second smallest unique integer in the list, or -1 if there are less than two unique integers. unique_nums = list(set(nums)) if len(unique_nums) < 2: return -1 unique_nums.sort() return unique_nums[1] def parse_input(input_string): Parses the input string into a list of integers. return list(map(int, input_string.split()))"},{"question":"A company wants to reward its most efficient employees with a bonus. Efficiency is defined based on a metric `W`, which is the sum of all prime factors of an employee\'s unique identification number `ID`. Given the `ID`, determine the metric `W`. -----Input----- The single line contains a single integer `ID` (1 ≤ `ID` ≤ 10^12). -----Output----- Print the metric `W`. -----Examples----- Input 12 Output 7 Input 29 Output 29 -----Note----- In the first example, the prime factors of 12 are 2 and 3. Since 2 appears twice, the sum is 2 + 2 + 3 = 7. In the second example, 29 is a prime number, so the sum of its prime factors is 29.","solution":"def get_prime_factors_sum(n): Returns the sum of all prime factors of n. def prime_factors(n): factors = [] d = 2 while d * d <= n: while (n % d) == 0: factors.append(d) n //= d d += 1 if n > 1: factors.append(n) return factors factors = prime_factors(n) return sum(factors) # Example usage # print(get_prime_factors_sum(12)) # Outputs 7 # print(get_prime_factors_sum(29)) # Outputs 29"},{"question":"You are given a sequence of distinct integers representing the heights of people standing in a line from left to right. The task is to determine if it\'s possible to break this sequence into three contiguous subarrays such that each subarray is strictly increasing. -----Input----- The first line contains a single integer t (1 le t le 100), denoting the number of test cases. The first line of each test case contains a single integer n (3 le n le 10^5), denoting the number of elements in the sequence. The second line of each test case contains n distinct integers h_1, h_2, ldots, h_n (1 le h_i le 10^9), representing the heights of the people. It is guaranteed that the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output \\"YES\\" if it is possible to break the sequence into three contiguous strictly increasing subarrays; otherwise, output \\"NO\\". -----Examples----- Input 3 5 1 2 3 4 5 7 1 3 2 5 6 7 4 4 1 3 2 4 Output NO YES NO -----Note----- - In the first test case, it is not possible to break the sequence into three strictly increasing contiguous subarrays. - In the second test case, the sequence can be divided into [1, 3], [2, 5, 6], [7, 4], even though the last segment is not strictly increasing, the sequence [4] can be considered with [7] as another increasing segment. - In the third test case, it is also not possible to divide the sequence into three strictly increasing contiguous subarrays.","solution":"def can_split_into_increasing_subarrays(t, cases): results = [] for i in range(t): n = cases[i][0] heights = cases[i][1] if n < 3: results.append(\\"NO\\") continue peak_count = 0 peak_position = [] # Find peaks in the array for j in range(1, n - 1): if heights[j - 1] < heights[j] > heights[j + 1]: peak_count += 1 peak_position.append(j) if peak_count < 2: results.append(\\"NO\\") else: peak_a = peak_position[0] peak_b = peak_position[1] if peak_a >= 1 and peak_b <= n - 2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to read input and call the solution function def solve(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 cases = [] for _ in range(t): n = int(data[index]) heights = list(map(int, data[index + 1: index + n + 1])) cases.append((n, heights)) index += n + 1 results = can_split_into_increasing_subarrays(t, cases) for result in results: print(result)"},{"question":"Ravi has a jar full of marbles of different colors. Each marble is either red, blue, green, or yellow. He likes to count and record the number of each color of marble. He decides to do this using a unique integer value for each marble color: red as 1, blue as 2, green as 3, and yellow as 4. Ravi\'s little brother plays with the marbles and misplaces some of them such that the count of each color might get changed. However, Ravi remembers the original count of each color before his brother played with them. Ravi wants to know how many marbles of each color are missing. Write a program to help Ravi calculate the discrepancy of each color. Input: The first line contains four integers R1, B1, G1, and Y1 denoting the original number of red, blue, green, and yellow marbles respectively. The second line contains four integers R2, B2, G2, and Y2 denoting the current number of red, blue, green, and yellow marbles respectively. Output: Print four integers denoting the number of red, blue, green, and yellow marbles that are missing. Constraints: 0 ≤ R1, R2, B1, B2, G1, G2, Y1, Y2 ≤ 10^6 SAMPLE INPUT 5 7 8 6 3 6 7 4 SAMPLE OUTPUT 2 1 1 2","solution":"def missing_marbles(R1, B1, G1, Y1, R2, B2, G2, Y2): Returns the number of missing marbles of each color. Parameters: R1, B1, G1, Y1 (int): original counts of red, blue, green, and yellow marbles R2, B2, G2, Y2 (int): current counts of red, blue, green, and yellow marbles Returns: tuple: number of red, blue, green, and yellow marbles that are missing missing_red = R1 - R2 missing_blue = B1 - B2 missing_green = G1 - G2 missing_yellow = Y1 - Y2 return (missing_red, missing_blue, missing_green, missing_yellow)"},{"question":"You are given a string containing multiple words separated by spaces. Your task is to write a function that reverses the words in the string and returns the modified string. Note that you should maintain the original order of characters within each word, but reverse the sequence of words in the string. Example 1: ``` Input: \\"hello world\\" Output: \\"world hello\\" ``` Example 2: ``` Input: \\"coding is fun\\" Output: \\"fun is coding\\" ``` Constraints: - The input string will consist only of lowercase letters and spaces. - There will be exactly one space between words and no leading or trailing spaces.","solution":"def reverse_words(s): Reverses the sequence of words in the given string. Parameters: s (str): A string containing multiple words separated by spaces. Returns: str: A string with the words in reverse order. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Given a list of positive integers, determine if there are any three numbers in the list that can form the sides of a right-angled triangle. A right-angled triangle satisfies the Pythagorean theorem, `a^2 + b^2 = c^2`. You can assume the list contains at least three integers. Examples ``` [3, 4, 5, 6] ==> true // (3, 4, 5) form a right-angled triangle [1, 2, 3, 4] ==> false // no combination forms a right-angled triangle [5, 12, 13, 7, 24, 25] ==> true // (5, 12, 13) or (7, 24, 25) form right-angled triangles ```","solution":"def is_right_angled_triangle(nums): Determine if there are any three numbers in the list that can form the sides of a right-angled triangle. Parameters: nums (list of int): The list of positive integers. Returns: bool: True if there exist three numbers that can form a right-angled triangle, False otherwise. nums = sorted(nums) n = len(nums) # Use the sorted property to check combinations for i in range(n-1, 1, -1): c = nums[i] a = 0 b = i-1 while a < b: if nums[a]**2 + nums[b]**2 == c**2: return True elif nums[a]**2 + nums[b]**2 < c**2: a += 1 else: b -= 1 return False"},{"question":"Write a function `countPaths` that takes an integer `n` and an integer `m`. The function should return the number of distinct ways to go from square `(0,0)` to square `(n,m)` on an n x m grid. You can only move right or down. Input - An integer `n` (1 <= n <= 1000) representing the number of rows. - An integer `m` (1 <= m <= 1000) representing the number of columns. Output - Return the number of distinct ways to go from square `(0,0)` to square `(n,m)`. Examples Input 2 2 Output 6 Input 3 3 Output 20 Note In the first example, there are six distinct paths from `(0,0)` to `(2,2)`: 1. Right, Right, Down, Down 2. Right, Down, Right, Down 3. Right, Down, Down, Right 4. Down, Right, Right, Down 5. Down, Right, Down, Right 6. Down, Down, Right, Right","solution":"import math def countPaths(n, m): Returns the number of distinct ways to go from square (0,0) to square (n, m) on an n x m grid. You can only move right or down. return math.comb(n + m, n)"},{"question":"You are given a string consisting of lowercase English letters. A contiguous substring is defined as a palindrome if it reads the same forwards and backwards. Your task is to determine the longest palindromic contiguous substring within the given string. If there are multiple longest palindromic contiguous substrings of the same length, return the one which appears first in the string. Implement a function `longest_palindromic_substring(s: str) -> str` to find the required result. **Function Signature:** ```python def longest_palindromic_substring(s: str) -> str: pass ``` **Input:** - A single string s (1 le text{len}(s) le 1000). **Output:** - A single string representing the longest palindromic contiguous substring. **Example:** Input: ``` babad ``` Output: ``` bab ``` (Note: \\"aba\\" is also a valid output, but \\"bab\\" appears first) Input: ``` cbbd ``` Output: ``` bb ``` **Explanation:** In the first example, \\"bab\\" and \\"aba\\" are both palindromes with length 3. Since \\"bab\\" appears first, it is the result. In the second example, \\"bb\\" is the longest palindromic contiguous substring with length 2.","solution":"def longest_palindromic_substring(s: str) -> str: n = len(s) if n == 0: return \\"\\" start, max_length = 0, 1 for i in range(1, n): # Check for even length palindrome low, high = i - 1, i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindrome low, high = i - 1, i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"Write a function that takes a list of integers and returns the length of the longest contiguous subarray containing at most two distinct integers. ```python longest_subarray([1, 2, 1]) => returns 3 longest_subarray([1, 2, 2, 3, 3, 4, 4, 4]) => returns 5 ``` Explanation: In the first case, the longest contiguous subarray with at most two distinct integers is `[1, 2, 1]`, which has length 3. In the second case, the longest contiguous subarray with at most two distinct integers is `[3, 3, 4, 4, 4]`, which has length 5.","solution":"def longest_subarray(arr): Returns the length of the longest contiguous subarray containing at most two distinct integers. if not arr: return 0 left = 0 right = 0 max_length = 0 counts = {} while right < len(arr): if arr[right] in counts or len(counts) < 2: counts[arr[right]] = counts.get(arr[right], 0) + 1 right += 1 else: counts[arr[left]] -= 1 if counts[arr[left]] == 0: del counts[arr[left]] left += 1 max_length = max(max_length, right - left) return max_length"},{"question":"A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). However, in this challenge, we are interested in a modified version of the palindrome concept, where we check if the given string can be rearranged to form a palindrome. Given a string, write a function to determine if it can be rearranged to form a palindrome. If it can, return \\"Possible Palindrome\\", otherwise return \\"Not Possible Palindrome\\". Example s = \'civic\' In this case, \'civic\' is already a palindrome, so the answer is \\"Possible Palindrome\\". s = \'ivicc\' The characters of \'ivicc\' can be rearranged to form \'civic\', which is a palindrome, so the answer is \\"Possible Palindrome\\". s = \'hello\' The characters of \'hello\' cannot be rearranged to form a palindrome, so the answer is \\"Not Possible Palindrome\\". Function Description Complete the `canFormPalindrome` function below. `canFormPalindrome` has the following parameter(s): string s: a string to test Returns string: either \\"Possible Palindrome\\" or \\"Not Possible Palindrome\\" Input Format The first line contains an integer textit{q}, the number of queries. The next textit{q} lines each contain a string boldsymbol{mathrm{s}}. Constraints 1 leq q leq 10 1 leq text{length of} s leq 1000 Sample Input STDIN Function ----- -------- 3 q = 3 civic s = \'civic\' ivicc s = \'ivicc\' hello s = \'hello\' Sample Output Possible Palindrome Possible Palindrome Not Possible Palindrome Explanation In the first query, \'civic\' is already a palindrome form. In the second query, \'ivicc\' can be rearranged to form \'civic\', which is a palindrome. In the third query, \'hello\' cannot be rearranged to form any palindrome. Thus, the answer is \\"Not Possible Palindrome\\".","solution":"from collections import Counter def canFormPalindrome(s): Determine if the given string can be rearranged to form a palindrome. Parameters: s (str): the input string Returns: str: \\"Possible Palindrome\\" if the string can be rearranged to form a palindrome, otherwise \\"Not Possible Palindrome\\" # Create a counter for each character in the string char_count = Counter(s) # Count characters with an odd number of occurrences odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one # character with an odd number of occurrences if odd_count <= 1: return \\"Possible Palindrome\\" else: return \\"Not Possible Palindrome\\""},{"question":"Given a binary tree, write a function to evaluate to true if the tree is height-balanced, otherwise false. A binary tree is height-balanced if for each node, the height difference between the left and right subtree is at most 1. You are provided with the structure definition of a tree node as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` Example 1: Input: ```plaintext root = [3, 9, 20, None, None, 15, 7] ``` Output: ```plaintext True ``` Explanation: The input binary tree is: ``` 3 / 9 20 / 15 7 ``` The tree is height-balanced since for each node, the height difference between left and right subtree is at most 1. Example 2: Input: ```plaintext root = [1, 2, 2, 3, 3, None, None, 4, 4] ``` Output: ```plaintext False ``` Explanation: The input binary tree is: ``` 1 / 2 2 / 3 3 / 4 4 ``` The tree is not height-balanced since the height difference at node 2 (left child of root) is more than 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isBalanced` which takes the root of a binary tree as input and returns a boolean value indicating whether the tree is height-balanced or not. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H), where H is the height of the tree. Constraints: - The number of nodes in the tree is in the range [0, 5000]. - The value format of node.val is integer.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isBalanced(root): Determine if the tree is height-balanced. def check_balance(node): if not node: return 0, True left_height, left_balanced = check_balance(node.left) right_height, right_balanced = check_balance(node.right) current_height = 1 + max(left_height, right_height) height_difference = abs(left_height - right_height) <= 1 return current_height, left_balanced and right_balanced and height_difference _, is_balanced_tree = check_balance(root) return is_balanced_tree"},{"question":"Given an integer N, determine if it is a perfect cube. An integer X is a perfect cube if there exists an integer Y such that Y^3 = X. ------ Input Format ------ - The first line of the input contains T, the number of test cases. - Each test case contains a single integer N. ------ Output Format ------ For each test case, print \\"YES\\" if the integer N is a perfect cube, otherwise print \\"NO\\". You may print each character of the string in uppercase or lowercase (for example, the strings yEs, yes, Yes, and YES will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 1000 -10^{12} ≤ N ≤ 10^{12} ----- Sample Input 1 ------ 3 27 45 -64 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ - Test Case 1: 27 is a perfect cube because 3^3 = 27. Hence, the output is YES. - Test Case 2: 45 is not a perfect cube as there is no integer Y such that Y^3 = 45. Hence, the output is NO. - Test Case 3: -64 is a perfect cube because -4^3 = -64. Hence, the output is YES.","solution":"def is_perfect_cube(n): Determine if the given integer n is a perfect cube. if n < 0: n = -n return round(n ** (1/3)) ** 3 == n else: return round(n ** (1/3)) ** 3 == n def check_perfect_cubes(test_cases): results = [] for n in test_cases: if is_perfect_cube(n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a string containing only the characters \'A\' and \'B\', write a function that determines the length of the longest contiguous segment of \'A\'s in the string. The function should take the string as an argument and return the length of the longest segment. Examples ```python \\"AAABBA\\" Should return: 3 (the longest segment of \'A\'s is \\"AAA\\") \\"BBAAABB\\" Should return: 3 (the longest segment of \'A\'s is \\"AAA\\") \\"BBBAAAAB\\" Should return: 4 (the longest segment of \'A\'s is \\"AAAA\\") ```","solution":"def longest_contiguous_A_segment(s): Returns the length of the longest contiguous segment of \'A\'s in the string. Args: s: A string containing only characters \'A\' and \'B\'. Returns: int: The length of the longest contiguous segment of \'A\'s. max_count = 0 current_count = 0 for char in s: if char == \'A\': current_count += 1 max_count = max(max_count, current_count) else: current_count = 0 return max_count"},{"question":"In this problem, you are given a list of integers and you need to find the smallest positive integer that is not present in the list. For example, if the list is [1, 2, 3], the smallest missing positive integer is 4. If the list is [3, 4, -1, 1], the smallest missing positive integer is 2. You should aim for an efficient solution, preferably with a time complexity of O(n). Input: The first line of the input contains an integer t, the number of test cases (1 ≤ t ≤ 100). Each of the next t lines contains a single test case, starting with an integer n (1 ≤ n ≤ 100,000) denoting the number of elements in the list. The next n integers follow, representing the elements in the list. Output: For each test case, output a single line containing the smallest positive integer that is not present in the list. Example Sample Input: 2 3 1 2 0 4 3 4 -1 1 Sample Output: 3 2","solution":"def smallest_missing_positive(nums): Returns the smallest positive integer that is not present in the nums list. n = len(nums) # Place each number in its right place if possible for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first index which doesn\'t have the correct number for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1 def process_test_cases(t, test_cases): results = [] for i in range(t): n, nums = test_cases[i] result = smallest_missing_positive(nums) results.append(result) return results"},{"question":"Given a sequence of integers, determine the number of contiguous subsequences (including the sequence itself) that are palindromes. A subsequence is defined as any sequence that can be derived by deleting some or no elements from the sequence without changing the order of the remaining elements. A palindrome is a sequence that reads the same backward as forward. Write a program that, given a sequence of integers, outputs the count of contiguous palindromic subsequences. Input The first line contains a single integer N (1 ≤ N ≤ 1,000) indicating the length of the sequence. The second line contains N space-separated integers denoting the sequence itself. Each integer in the sequence is in the range -10^5 ≤ a[i] ≤ 10^5. Output Output the number of contiguous palindromic subsequences in the sequence. Example Input 5 1 2 3 2 1 Output 7 Explanation: The 7 palindromic subsequences are (1), (2), (3), (2), (1), (2 3 2), and (1 2 3 2 1).","solution":"def count_palindromic_subsequences(seq): Counts the number of contiguous palindromic subsequences in the given sequence. :param seq: List[int] - A list of integers representing the sequence. :return: int - The count of palindromic subsequences. n = len(seq) dp = [[False] * n for _ in range(n)] count = 0 for i in range(n): dp[i][i] = True count += 1 for length in range(2, n + 1): for start in range(n - length + 1): end = start + length - 1 if seq[start] == seq[end]: if length == 2 or dp[start + 1][end - 1]: dp[start][end] = True count += 1 return count"},{"question":"You are given a string `s` and an alphabet subset `T`. You should answer `q` queries of two types: * 1 l r — count the occurrences of characters from subset `T` in substring `s[l:r]` inclusive. * 2 v c — replace the character at the `v`-th position of `s` with character `c`. Input The first line of the input contains the string `s` (1 ≤ |s| ≤ 100000) and the alphabet subset `T` which consists of unique characters from the alphabet of `s` (1 ≤ |T| ≤ 26). The next line contains an integer `q` (1 ≤ q ≤ 100000) — the number of queries. Next `q` lines contain the description of queries of the format described above (1 ≤ l ≤ r ≤ |s|, 1 ≤ v ≤ |s|). Output For each query of the first type print the count of characters from subset `T` in the substring `s[l:r]` in a separate line. For queries of the second type, perform the character replacement in string `s`. Example Input abcabcabc ab 5 1 1 3 2 2 d 1 1 3 2 5 e 1 1 5 Output 2 1 2","solution":"def process_queries(s, T, queries): Processes the given queries on string s and alphabet subset T. from collections import Counter # Convert string to list for mutable operations s = list(s) n = len(s) # Precompute counts of T characters in prefix sums prefix_count = [[0] * (n + 1) for _ in range(26)] def char_to_index(c): return ord(c) - ord(\'a\') for i in range(n): for j in range(26): prefix_count[j][i + 1] = prefix_count[j][i] if s[i] in T: prefix_count[char_to_index(s[i])][i + 1] += 1 result = [] for query in queries: query_type = query[0] if query_type == 1: l, r = query[1], query[2] count = 0 for char in T: count += prefix_count[char_to_index(char)][r] - prefix_count[char_to_index(char)][l - 1] result.append(count) elif query_type == 2: v, c = query[1], query[2] v -= 1 if s[v] in T: char_idx = char_to_index(s[v]) for i in range(v, n): prefix_count[char_idx][i + 1] -= 1 s[v] = c if c in T: char_idx = char_to_index(c) for i in range(v, n): prefix_count[char_idx][i + 1] += 1 return result"},{"question":"Alice is organizing a game night for her friends and decides to introduce a new game involving cards. Each card has a positive integer written on it, and Alice has a total of n cards. The game involves choosing a subset of cards in such a way that the sum of the integers on these cards is as close as possible to a given target value T. Help Alice by determining the subset (or one of the subsets) of cards whose total sum is closest to T. If there are multiple subsets with sums equally close to T, any of them will be accepted. -----Input----- The first line contains two integers n and T — the number of cards and the target value respectively (1 ≤ n ≤ 100, 1 ≤ T ≤ 10^5). The second line contains n space-separated positive integers a_{i} (1 ≤ a_{i} ≤ 10^4) representing the values on the cards. -----Output----- In the first line print two integers — the sum of the chosen subset of cards and the number of cards in that subset k. In the second line print k integers — the values of the chosen cards. If there are multiple solutions, print any of them. -----Examples----- Input 5 10 2 3 7 1 5 Output 10 2 3 7 Input 4 15 8 4 5 9 Output 14 2 5 9","solution":"from itertools import combinations def closest_subset_sum(n, T, card_values): This function takes in the number of cards n, the target value T, and the list of card values, then returns the sum of the chosen subset of cards closest to T, the number of cards in that subset, and the card values. # Initialize the best result with an empty subset best_sum = 0 best_subset = [] # Check all possible subsets for r in range(1, n + 1): for subset in combinations(card_values, r): current_sum = sum(subset) if abs(current_sum - T) < abs(best_sum - T): best_sum = current_sum best_subset = subset elif abs(current_sum - T) == abs(best_sum - T) and current_sum > best_sum: best_sum = current_sum best_subset = subset # Destructure the result k = len(best_subset) return best_sum, k, list(best_subset)"},{"question":"You are given a string containing only lowercase letters. You need to check if the string can be rearranged to form a palindrome. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). To determine if a string can be rearranged to form a palindrome: 1. The characters of the string must have even frequencies (pairs) to form mirrored halves. 2. One character can have an odd frequency while all others must have even frequencies if the length of the string is odd (this character will be placed in the middle of the palindrome). Write a function `can_form_palindrome(s: str) -> bool` that returns `True` if the string can be rearranged to form a palindrome, otherwise returns `False`. # Example ``` can_form_palindrome(\\"civic\\") # True, \\"civic\\" is already a palindrome can_form_palindrome(\\"ivicc\\") # True, rearranged to \\"civic\\" can_form_palindrome(\\"hello\\") # False, cannot be rearranged to form a palindrome can_form_palindrome(\\"aabbhijkkjih\\") # True, rearranged to \\"aabbbkijkh\\") ``` # Constraints - `1 <= len(s) <= 10^5` - The string contains only lowercase letters. # Note - Your function should have a time complexity of O(n) where n is the length of the string. - Any auxiliary space used should be proportional to the number of unique letters in the input string.","solution":"def can_form_palindrome(s: str) -> bool: Determine if a string can be rearranged to form a palindrome. from collections import Counter count = Counter(s) odd_count = sum(1 for freq in count.values() if freq % 2 != 0) return odd_count <= 1"},{"question":"You\'re given a 2D array representing a grid with dimensions N x M filled with non-negative integers. You need to determine the length of the shortest path from the top-left corner to the bottom-right corner, moving only through cells with a value of 0, such that you can only move right, left, up, or down. If such a path does not exist, return -1. ------ Input Format ------ - The first line will contain T, the number of test cases. The description of test cases follow. - The first line of each test case consists of two space-separated integers N and M, the dimensions of the grid. - The next N lines consist of M space-separated integers representing the grid. ------ Output Format ------ - For each test case, output a single integer representing the length of the shortest path, or -1 if no such path exists. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N, M ≤ 1000 0 ≤ grid[i][j] ≤ 1 ----- Sample Input 1 ------ 1 3 3 0 0 1 0 1 0 0 0 0 ----- Sample Output 1 ------ 4","solution":"from collections import deque def shortest_path_in_grid(grids): def bfs(grid): n, m = len(grid), len(grid[0]) if grid[0][0] != 0 or grid[n-1][m-1] != 0: return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] q = deque([(0, 0, 0)]) # (row, col, distance) visited = set() visited.add((0, 0)) while q: x, y, dist = q.popleft() if x == n-1 and y == m-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == 0: visited.add((nx, ny)) q.append((nx, ny, dist + 1)) return -1 results = [] for grid in grids: results.append(bfs(grid)) return results def parse_input(data): lines = data.split(\'n\') index = 0 test_cases = [] T = int(lines[index].strip()) index += 1 for _ in range(T): N, M = map(int, lines[index].strip().split()) index += 1 grid = [] for _ in range(N): grid.append(list(map(int, lines[index].strip().split()))) index += 1 test_cases.append(grid) return test_cases def main(input_data): grids = parse_input(input_data) results = shortest_path_in_grid(grids) for result in results: print(result)"},{"question":"You are given an undirected and unweighted graph with n nodes and m edges. The nodes are numbered from 1 to n. There is a cat located at node s that wants to catch a mouse located at node t. The cat can move between nodes through edges, and it will take 1 unit of time to move from one node to an adjacent node. Meanwhile, the mouse can move every k units of time along the same edges. Determine if the cat can catch the mouse, considering that the mouse starts moving k units of time after the cat starts moving. Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 2 ⋅ 10^5; 0 ≤ k ≤ 10^6) — the number of nodes, the number of edges, and the time interval for the mouse\'s movement. The second line contains two integers s and t (1 ≤ s, t ≤ n) — the starting nodes for the cat and the mouse, respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) — indicating an edge between nodes u and v. Output Print \\"Yes\\" if the cat can catch the mouse and \\"No\\" otherwise. Examples Input 6 7 2 1 6 1 2 2 3 3 4 4 5 5 6 2 4 2 5 Output Yes Input 4 4 1 1 4 1 2 2 3 3 4 2 4 Output No Input 5 5 0 3 5 1 2 2 3 3 4 4 5 1 5 Output Yes Note In the first example, the cat starts at node 1 and moves toward node 6. The mouse, starting at node 6, moves every 2 units of time. The cat can catch the mouse because it takes less time to reach node 6 than for the mouse to move away. In the second example, both the cat and the mouse move at the same rate. The cat cannot catch the mouse because by the time the cat reaches node 4, the mouse would have already moved. In the third example, the cat starts at node 3 and moves toward node 5. Despite there being no delay for the mouse\'s movement, the cat can directly catch the mouse since it takes the shortest path from node 3 to node 5.","solution":"from collections import deque def can_cat_catch_mouse(n, m, k, s, t, edges): def bfs(start): distances = [-1] * (n + 1) queue = deque([start]) distances[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if distances[neighbor] == -1: distances[neighbor] = distances[node] + 1 queue.append(neighbor) return distances graph = [[] for _ in range(n + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) cat_distances = bfs(s) mouse_distances = bfs(t) time_to_catch = cat_distances[t] if time_to_catch == -1: return \\"No\\" if k == 0: return \\"Yes\\" mouse_time = time_to_catch / k if mouse_time.is_integer(): return \\"No\\" return \\"Yes\\""},{"question":"Given a list of integers, write a function to determine if any two numbers in the list sum up to a specific target. Return a boolean value (True/False) indicating whether such a pair exists. Note: - The function should return `True` if there are two distinct numbers in the list that add up to the target sum, otherwise `False`. - The input list may contain both positive and negative numbers as well as duplicates. - The list can be unsorted and may contain from 1 to 10^5 elements. Example: ``` nums = [3, 4, 7, 1, 12] target = 10 ``` There are two numbers `3` and `7` which sum up to the target `10`. The function should return `True`. ``` nums = [1, 2, 3, 9] target = 8 ``` There are no two numbers that sum up to the target `8`. The function should return `False`.","solution":"def has_pair_with_sum(nums, target): Checks if there are any two distinct numbers in the list that add up to the target sum. :param nums: List of integers. :param target: Target sum. :return: Boolean value indicating whether such a pair exists. seen = set() for num in nums: if target - num in seen: return True seen.add(num) return False"},{"question":"Write a function that simplifies a fraction. You will be given two integers, the numerator and the denominator. Your task is to return the simplified fraction in the format `\\"numerator/denominator\\"`. To simplify a fraction, divide the numerator and the denominator by their greatest common divisor (GCD). Notes: * The numerator and denominator will always be positive integers. * The output should be a string in the format `\\"numerator/denominator\\"`. * Ensure the fraction is in its simplest form. Examples ``` 8, 12 --> \\"2/3\\" 25, 5 --> \\"5/1\\" 14, 28 --> \\"1/2\\" 49, 21 --> \\"7/3\\" 10, 100 --> \\"1/10\\" ```","solution":"import math def simplify_fraction(numerator, denominator): Simplifies a fraction given by numerator and denominator. Returns the fraction in the form of \\"numerator/denominator\\". gcd = math.gcd(numerator, denominator) simplified_numerator = numerator // gcd simplified_denominator = denominator // gcd return f\\"{simplified_numerator}/{simplified_denominator}\\""},{"question":"# Description: Given a string, find the length of the longest substring without repeating characters. # Examples ``` length_of_longest_substring(\\"\\") == 0 length_of_longest_substring(\\"bbbbb\\") == 1 length_of_longest_substring(\\"abcabcbb\\") == 3 length_of_longest_substring(\\"pwwkew\\") == 3 length_of_longest_substring(\\"abcdefg\\") == 7 length_of_longest_substring(\\"aab\\") == 2 ```","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) if n == 0: return 0 char_map = {} max_length = 0 left = 0 for right in range(n): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"A company wants to optimize their shipment of packages to customers using a fleet of delivery robots. Each robot has a maximum capacity to carry a specific number of kilograms. You are tasked with assigning weights to the robots such that the number of robots used is minimized and each robot\'s load does not exceed its capacity. Each robot can carry a maximum weight of W kilograms. You are given the weights of the packages that need to be shipped. Write a function that determines the minimum number of robots required to carry all the packages. The function should return -1 if it is not possible for the robots to carry all the packages within the given constraints. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of packages. The second line contains an integer W (1 ≤ W ≤ 1000), the maximum weight capacity of each robot. The third line contains n integers, the weights of the packages (each at least 1 and at most 1000). Output Output a single integer, the minimum number of robots required to carry all the packages, or -1 if it\'s not possible. Examples Input 5 15 5 10 15 5 5 Output 3 Input 4 20 9 9 9 9 Output 2 Input 3 10 11 9 5 Output -1 Input 6 10 2 3 5 6 4 2 Output 3","solution":"def min_robots(n, W, weights): Determines the minimum number of robots required to carry all the packages. Returns -1 if it is not possible within the given constraints. Parameters: n (int): The number of packages. W (int): Maximum weight capacity of each robot. weights (list of int): Weights of the packages. Returns: int: Minimum number of robots required or -1 if not possible. if any(weight > W for weight in weights): return -1 weights.sort(reverse=True) robots_used = 0 while weights: robots_used += 1 remaining_capacity = W i = 0 while i < len(weights): if weights[i] <= remaining_capacity: remaining_capacity -= weights[i] weights.pop(i) else: i += 1 return robots_used"},{"question":"You are given a list of N positive integers representing the heights of different buildings. You are in charge of placing billboards on top of these buildings. The goal is to place the maximum number of billboards in such a way that each billboard is shorter than the building it\'s placed on by at least H units, and no two adjacent billboards can be placed on buildings of the same height. You are required to determine the maximum number of billboards that can be placed following these rules. Constraints: * 1 le N le 10^5 * 1 le H le 10^9 * 1 le heights[i] le 10^9 Input: The input is given from standard input in the following format: ``` N H heights_1 heights_2 ... heights_N ``` Output: Print a single integer, the maximum number of billboards that can be placed. Examples: Input: ``` 6 2 3 5 1 4 8 2 ``` Output: ``` 3 ``` Input: ``` 5 1 6 6 6 6 6 ``` Output: ``` 1 ``` Input: ``` 8 3 4 7 10 3 6 8 5 9 ``` Output: ``` 4 ```","solution":"def max_billboards(N, H, heights): This function calculates the maximum number of billboards that can be placed on the buildings where each billboard is shorter than the building it\'s placed on by at least H units, and no two adjacent billboards can be on buildings of the same height. max_billboards_count = 0 for i in range(len(heights)): # Check the adjacent buildings for the height condition if i == 0 or heights[i] != heights[i - 1]: max_billboards_count += 1 return max_billboards_count if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) H = int(data[1]) heights = list(map(int, data[2:])) result = max_billboards(N, H, heights) print(result)"},{"question":"Megan has recently taken up gardening and she is particularly fond of creating beautiful flower arrangements. She has a large collection of flowers of different colors, and each type of flower can have many colors. She wants to create a bouquet that looks the most colorful by including as many different colors as possible. However, she has a limitation: she can only take one flower of each type, so she needs to carefully choose which flowers to include in her bouquet. You need to help Megan find out how many different colors she can have in her bouquet. Given a list of flowers, where each flower is represented by an object containing the type of flower and its color: `[flower1, flower2, ..., flowerN]` Your task is to determine the maximum number of different colors Megan can have in her bouquet if she can only pick one flower of each type. -----Input----- The input contains a single integer n (1 le n le 10^5) representing the number of flowers. The next n lines each contain a space-separated pair of strings type_i and color_i indicating the type and color of a flower. It is guaranteed that both type_i and color_i are non-empty strings consisting of lowercase English letters and their lengths do not exceed 20 characters. -----Output----- Output a single integer, the maximum number of different colors in the bouquet if Megan can only pick one flower of each type. -----Example----- Input 5 rose red rose yellow lily white lily pink tulip purple Output 3 -----Explanation----- In the given example, Megan can pick one of the \'rose\' flowers (\'red\' or \'yellow\'), one of the \'lily\' flowers (\'white\' or \'pink\'), and the \'tulip\' flower (\'purple\'). So, she can have up to 3 different colors in her bouquet. Note: Each flower type is unique, and she can select at most one flower per type for the most colorful bouquet possible.","solution":"def max_different_colors(n, flowers): Determines the maximum number of different colors in the bouquet if Megan can only pick one flower of each type. Parameters: n (int): The number of flowers. flowers (list of tuples): Each tuple contains two strings representing the type and color of a flower. Returns: int: The maximum number of different colors in the bouquet. flower_dict = {} for flower_type, flower_color in flowers: if flower_type not in flower_dict: flower_dict[flower_type] = flower_color return len(flower_dict)"},{"question":"**Task: Design a Shopping Cart System** Description In this coding challenge, you are required to design a simple shopping cart system for an e-commerce application. Your task is to write a function that manages the shopping cart through various operations. More formally about each of the tasks: - The cart should be able to: - Add an item to the cart. - Remove an item from the cart. - Calculate the total cost of the items in the cart. - Each item in the cart has: - A unique item id. - A quantity. - A price per unit. - Your function must handle the following operations: - \\"add item_id quantity price\\" - Add the specified quantity of the item with the given price to the cart. - \\"remove item_id quantity\\" - Remove the specified quantity of the item from the cart. - \\"total\\" - Return the total cost of the items in the cart. Here\'s a more detailed functionality description: 1. **Add Item** - If the item already exists in the cart, increase its quantity. - If the item does not exist, add it to the cart with the specified quantity and price. 2. **Remove Item** - If the item exists and the quantity to be removed is less than the current quantity, decrease its quantity. - If the item exists and the quantity to be removed is equal to or greater than the current quantity, remove the item completely from the cart. - If the item does not exist in the cart, return \\"Item not found\\". 3. **Total** - Calculate the total cost of the items in the cart by summing the product of quantity and price for all items in the cart. Example: ```python class ShoppingCart: def __init__(self): # Initialize the cart as an empty dictionary self.cart = {} def process_command(self, command): # Split the command into parts parts = command.split() if parts[0] == \\"add\\": item_id = parts[1] quantity = int(parts[2]) price = float(parts[3]) if item_id in self.cart: self.cart[item_id][\'quantity\'] += quantity else: self.cart[item_id] = {\'quantity\': quantity, \'price\': price} elif parts[0] == \\"remove\\": item_id = parts[1] quantity = int(parts[2]) if item_id in self.cart: if self.cart[item_id][\'quantity\'] > quantity: self.cart[item_id][\'quantity\'] -= quantity elif self.cart[item_id][\'quantity\'] == quantity: del self.cart[item_id] else: return \\"Item not found\\" else: return \\"Item not found\\" elif parts[0] == \\"total\\": total_cost = sum(item[\'quantity\'] * item[\'price\'] for item in self.cart.values()) return total_cost else: return \\"Invalid command\\" # Example usage: cart = ShoppingCart() cart.process_command(\\"add 1 2 10.0\\") cart.process_command(\\"add 2 1 20.0\\") print(cart.process_command(\\"total\\")) # Output: 40.0 cart.process_command(\\"remove 1 1\\") print(cart.process_command(\\"total\\")) # Output: 30.0 ``` Design the `ShoppingCart` class to ensure it effectively implements the described functionality. Review the given examples and ensure your solution is comprehensive enough to handle similar cases.","solution":"class ShoppingCart: def __init__(self): # Initialize the cart as an empty dictionary self.cart = {} def process_command(self, command): # Split the command into parts parts = command.split() if parts[0] == \\"add\\": item_id = parts[1] quantity = int(parts[2]) price = float(parts[3]) if item_id in self.cart: self.cart[item_id][\'quantity\'] += quantity else: self.cart[item_id] = {\'quantity\': quantity, \'price\': price} elif parts[0] == \\"remove\\": item_id = parts[1] quantity = int(parts[2]) if item_id in self.cart: if self.cart[item_id][\'quantity\'] > quantity: self.cart[item_id][\'quantity\'] -= quantity elif self.cart[item_id][\'quantity\'] == quantity: del self.cart[item_id] else: return \\"Item not found\\" else: return \\"Item not found\\" elif parts[0] == \\"total\\": total_cost = sum(item[\'quantity\'] * item[\'price\'] for item in self.cart.values()) return total_cost else: return \\"Invalid command\\" # Example usage: cart = ShoppingCart() cart.process_command(\\"add 1 2 10.0\\") cart.process_command(\\"add 2 1 20.0\\") print(cart.process_command(\\"total\\")) # Output: 40.0 cart.process_command(\\"remove 1 1\\") print(cart.process_command(\\"total\\")) # Output: 30.0"},{"question":"The city librarian needs your help in organizing their book collection. The collection contains books that are categorized into different genres. Each genre has a set number of shelves specifically allocated to it, and every shelf can hold a specific number of books. Given the details about how many shelves and books per shelf each genre has, you need to determine if all the books of each genre can be properly organized on its allocated shelves without exceeding the shelf capacity for any genre. -----Input:----- - The first line contains an integer T, the number of test cases. Then, T test cases follow. - For each test case: - The first line contains an integer G, the number of genres. - The next G lines contain two integers s_i and b_i each, representing the number of shelves allocated to the i-th genre and the number of books in the i-th genre, respectively. -----Output:----- For each test case, print \\"YES\\" if all books can be organized properly, otherwise print \\"NO\\". -----Constraints----- - 1 leq T leq 1000 - 1 leq G leq 100 - 1 leq s_i leq 10^5 - 1 leq b_i leq 10^6 - Each shelf can hold up to 100 books. -----Sample Input:----- 3 2 10 800 5 450 1 7 700 3 15 1500 20 1700 5 400 -----Sample Output:----- YES NO YES -----EXPLANATION:----- In the first test case: - Genre 1: 10 shelves, 100 books per shelf, can hold up to 1000 books, so 800 books fit. - Genre 2: 5 shelves, 100 books per shelf, can hold up to 500 books, so 450 books fit. All books can be organized, thus the output is \\"YES\\". In the second test case: - Genre 1: 7 shelves, 100 books per shelf, can hold up to 700 books, but there are 700 books exactly fitting into the available space. All books can be organized, thus the output is \\"YES\\". In the third test case: - Genre 1: 15 shelves, can hold up to 1500 books, so 1500 books fit. - Genre 2: 20 shelves, can hold up to 2000 books, so 1700 books fit. - Genre 3: 5 shelves, can hold up to 500 books, so 400 books fit. All books can be organized, thus the output is \\"YES\\".","solution":"def can_organize_books(T, test_cases): results = [] for case in test_cases: G = case[0] genres = case[1] can_organize = True for s, b in genres: if s * 100 < b: can_organize = False break results.append(\\"YES\\" if can_organize else \\"NO\\") return results # Input Parsing Function def parse_input(input_data): input_lines = input_data.strip().split(\'n\') T = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(T): G = int(input_lines[idx]) genres = [] idx += 1 for _ in range(G): s, b = map(int, input_lines[idx].split()) genres.append((s, b)) idx += 1 test_cases.append((G, genres)) return T, test_cases"},{"question":"**Forest Paths** You are working as a forest ranger and are responsible for overseeing the maintenance of a network of paths within a forest. The forest can be represented as a collection of `n` trees, each tree having an ID from 1 to n. The paths in the forest can be bidirectional and may connect any two trees. Your job is to construct a series of paths such that: 1. It is possible to travel between any two trees either directly or through a series of interconnected paths. 2. Ensure that the total number of paths used is minimized (since maintaining paths is costly). Additionally, due to forest preservation rules: - The maximum number of paths you can construct between trees cannot exceed `m`. Your task is to determine if it\'s possible to maintain the forest connectivity under the given constraints. If it is possible, you should outline a way to do it. -----Input----- The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 100, 0 ≤ m ≤ 10^4) — the number of trees and the maximum number of possible paths you can establish. -----Output----- - If it\'s possible to ensure connectivity under the given constraints, print \\"Yes\\" followed by `n-1` lines each containing two integers `u` and `v` indicating a path between tree `u` and tree `v`. - If it\'s not possible to ensure the required connectivity, print \\"No\\". -----Examples----- Input 5 4 Output No Input 5 10 Output Yes 1 2 2 3 3 4 4 5 -----Note----- In the second sample, we can create a connectivity between trees using 4 paths which is well within the given 10 maximum paths. However, in the first sample, we have only a maximum of 4 paths to use and for 5 trees at minimum, we would need 4 paths just for connectivity, making it impossible to ensure the connectivity with the given constraints.","solution":"def forest_paths(n, m): Determines if it\'s possible to maintain connectivity in the forest with given constraints. Parameters: n (int): number of trees m (int): maximum number of paths Returns: str and list of tuples: \\"Yes\\" followed by list of paths if possible, \\"No\\" otherwise # Minimum number of paths to connect n nodes in a single connected component is n-1 if m >= n - 1: return [\\"Yes\\"] + [(i, i + 1) for i in range(1, n)] else: return [\\"No\\"] # Example usage: # print(forest_paths(5, 10)) # Example 1: Should return \\"Yes\\" followed by the paths # print(forest_paths(5, 4)) # Example 2: Should return \\"No\\""},{"question":"The Sprint Corporation has a network of interconnected computers. Each computer can communicate with others through direct connections. However, due to security reasons, some of the connections are one-way. Sprint Corporation needs to determine if a key file can be transferred from one computer to another using the existing network connections. The network is represented as a directed graph where each node represents a computer, and each directed edge represents a one-way connection from one computer to another. Write a program that determines if there is a path from a source computer to a destination computer. Input The first input line contains two integers, n and m, separated by a space: n (1 ≤ n ≤ 10^5) is the number of computers, and m (1 ≤ m ≤ 2 * 10^5) is the number of direct connections. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating a directed connection from computer u to computer v. The last line contains two integers, s and d (1 ≤ s, d ≤ n), where s is the source computer and d is the destination computer. Output Print \\"YES\\" if there is a path from the source computer to the destination computer. Otherwise, print \\"NO\\". Examples Input 4 4 1 2 2 3 3 4 4 2 1 4 Output YES Input 3 2 1 2 2 3 3 1 Output NO Note In the first example, there is a path from computer 1 to computer 4: (1 -> 2 -> 3 -> 4). In the second example, there is no path from computer 3 to computer 1, despite the existence of connections in the opposite direction.","solution":"def can_transfer_file(n, m, connections, s, d): from collections import deque, defaultdict # Create a graph from the connections using adjacency list representation graph = defaultdict(list) for u, v in connections: graph[u].append(v) # Use BFS to check if there is a path from source (s) to destination (d) queue = deque([s]) visited = set() while queue: current = queue.popleft() if current == d: return \\"YES\\" if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return \\"NO\\""},{"question":"Create a `MyQueue` class that simulates a queue (FIFO) data structure using two stacks. The `MyQueue` class should have the following methods: - `enqueue(x)`: Insert an element `x` into the queue. - `dequeue()`: Remove the element at the front of the queue and return it. - `peek()`: Return the element at the front of the queue without removing it. - `is_empty()`: Return `True` if the queue is empty, otherwise return `False`. Ensure all operations are performed maintaining the queue\'s order properties. You may assume that all operations are valid and are called in a logical sequence. For example: ```python >>> q = MyQueue() >>> q.enqueue(1) >>> q.enqueue(2) >>> q.peek() 1 >>> q.dequeue() 1 >>> q.is_empty() False >>> q.dequeue() 2 >>> q.is_empty() True ```","solution":"class MyQueue: def __init__(self): self.stack_in = [] self.stack_out = [] def enqueue(self, x): Insert an element x into the queue. self.stack_in.append(x) def dequeue(self): Remove the element at the front of the queue and return it. if not self.stack_out: while self.stack_in: self.stack_out.append(self.stack_in.pop()) return self.stack_out.pop() def peek(self): Return the element at the front of the queue without removing it. if not self.stack_out: while self.stack_in: self.stack_out.append(self.stack_in.pop()) return self.stack_out[-1] def is_empty(self): Return True if the queue is empty, otherwise return False. return not self.stack_in and not self.stack_out"},{"question":"You are organizing a coding competition. Each participant needs to solve a series of problems. Each problem has a specific difficulty level, and participants should attempt them in order from the easiest to the hardest. The difficulty level of a problem is represented as an integer, and problems must be solved in non-decreasing order of their difficulty levels. If two problems have the same difficulty level, they can be solved in any order relative to each other. Given a list of integers representing the difficulty levels of the problems, formulate an algorithm to determine the minimum number of rounds participants need to complete all problems in the required order. A round is defined as a sequence of problems solved by a participant in one go if the difficulties of these problems form a non-decreasing subsequence of the input list. Input The first line contains a single integer n (1 ≤ n ≤ 2⋅10^5) — the number of problems. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10^9) — the difficulty levels of the problems. Output Print a single integer, the minimum number of rounds required to solve all the problems in non-decreasing order of difficulty. Example Input 6 4 2 3 1 5 6 Output 3 Note In the example, the list of difficulties is [4, 2, 3, 1, 5, 6]. The participant can solve the problems in the following 3 rounds: 1. Round 1: solves the problems with difficulties [2, 3] 2. Round 2: solves the problem with difficulty [1] 3. Round 3: solves the problems with difficulties [4, 5, 6]","solution":"def min_rounds_to_solve_problems(problems): Returns the minimum number of rounds required to solve all problems in non-decreasing order of difficulty. :param problems: A list of integers representing the difficulty levels of the problems. :return: Minimum number of rounds to solve all problems. if not problems: return 0 rounds = 1 for i in range(1, len(problems)): if problems[i] < problems[i - 1]: # This indicates the start of a new round rounds += 1 return rounds"},{"question":"Write a function to find the first missing positive integer in an unsorted array. Given an unsorted integer array, find the smallest missing positive integer. The function should have a time complexity of O(n) and utilize constant extra space. Example: Input: [3, 4, -1, 1] Output: 2 Input: [1, 2, 0] Output: 3","solution":"def first_missing_positive(nums): Finds the first missing positive integer in an unsorted list of integers. n = len(nums) # Shift numbers to their corresponding indices for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] # Find the first number that is not at the correct index for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"A vending machine dispenses two types of snacks: chips and candy bars. Each snack type has its respective price: chips cost 2 and candy bars cost 3. The machine accepts only 1-dollar coins, and it does not provide any change. You are to simulate a sequence of purchase attempts at the vending machine. Each purchase attempt consists of: 1. A string that represents the snack type (\'chips\' or \'candy\') being requested. 2. An integer representing the number of 1-dollar coins inserted into the machine. Implement a function to keep track of the number of snacks dispensed, the total amount of money collected, and any unsuccessful purchase attempts due to insufficient coins. -----Input----- The input consists of multiple lines. Each line represents a purchase attempt and is formatted as follows: - The first part is either the string \\"chips\\" or \\"candy\\". - The second part is an integer representing the number of 1-dollar coins inserted into the machine by the user. The input ends when there are no more lines to be processed, indicated by \\"END\\". You may assume the maximum number of total purchase attempts is 100. -----Output----- For each purchase attempt, output a message indicating whether the purchase was successful, along with the remaining coins if the purchase failed due to insufficient money. Finally, output the total number of chips and candy bars dispensed and the total amount of money collected once all purchase attempts have been processed. -----Examples----- Sample Input: chips 3 candy 2 chips 1 candy 3 END Sample Output: Dispensed 1 chips Insufficient coins: 2 Insufficient coins: 1 Dispensed 1 candy Total snacks dispensed: Chips: 1, Candy: 1 Total money collected: 5","solution":"def vending_machine(purchase_attempts): chip_price = 2 candy_price = 3 chips_count = 0 candy_count = 0 total_money_collected = 0 result = [] for attempt in purchase_attempts: if attempt == \\"END\\": break snack, coins = attempt.split() coins = int(coins) if snack == \\"chips\\": if coins >= chip_price: chips_count += 1 total_money_collected += chip_price result.append(f\\"Dispensed 1 chips\\") else: result.append(f\\"Insufficient coins: {coins}\\") elif snack == \\"candy\\": if coins >= candy_price: candy_count += 1 total_money_collected += candy_price result.append(f\\"Dispensed 1 candy\\") else: result.append(f\\"Insufficient coins: {coins}\\") result.append(f\\"Total snacks dispensed: Chips: {chips_count}, Candy: {candy_count}\\") result.append(f\\"Total money collected: {total_money_collected}\\") return result"},{"question":"Tom is organizing a sports event in his neighborhood. He has a list of N participants, each participant is either a coach or a player. Every participant has a unique skill level represented by an integer. Tom wants to form teams such that each team comprises exactly one coach and one player. The total skill level of a team is the sum of the skill levels of the coach and the player. Given the list of participants and their respective roles, find the maximum total skill level of the teams that can be formed. If no valid team can be formed, return -1. Example 1: Input: participants = [(\'C\', 5), (\'P\', 3), (\'P\', 8), (\'C\', 2), (\'C\', 6)] Output: 14 Explanation: One possible way to form teams is to pair the coach with skill 6 with the player with skill 8 to get a total skill level of 14. This is the maximum possible total skill level. Example 2: Input: participants = [(\'P\', 4), (\'P\', 5), (\'P\', 1)] Output: -1 Explanation: As there are no coaches, no team can be formed. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxTeamSkill() that takes an array (participants) of tuples and an integer (n) representing the number of participants and returns an integer representing the maximum total skill level of the teams that can be formed. If no team can be formed, return -1. The driver code takes care of the printing. Expected Time Complexity: O(N log N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 1 ≤ skill level ≤ 10^3","solution":"def maxTeamSkill(participants): # Separate participants into coaches and players coaches = [skill for role, skill in participants if role == \'C\'] players = [skill for role, skill in participants if role == \'P\'] # If there are no coaches or no players, we can\'t form a team if not coaches or not players: return -1 # Get the max skill levels max_coach_skill = max(coaches) max_player_skill = max(players) # Return the maximum total skill level by forming one team with the best coach and the best player return max_coach_skill + max_player_skill"},{"question":"# Find Missing Number You are given an array of unique integers that is supposed to contain all the numbers from 1 to `n`, but one number is missing. Write a function that finds and returns the missing number. The array will have a length of `n-1` and contain distinct integers in the range of 1 to `n`. Example ``` [1, 2, 4, 5, 6] => 3 [7, 2, 3, 6, 5, 1] => 4 ``` Constraints - The array will always contain exactly `n-1` elements. - The input will always be valid; no need to check for edge cases such as empty arrays or arrays with duplicate numbers. - Do not use any pre-built library functions that directly solve the problem.","solution":"def find_missing_number(arr): Given an array containing n-1 unique integers in the range 1 to n, returns the missing number in the range. n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"In a city grid, there are multiple intersections and one-way streets connecting them. The city government wants to ensure that it is possible to travel between any two intersections via the one-way streets. You are tasked to write a program that will determine whether this condition is satisfied. The city consists of `n` intersections and `m` one-way streets. Each one-way street connects two intersections in one direction. You need to check if, starting from any intersection, it is possible to reach any other intersection following the one-way streets. Input The first line contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of intersections and the number of one-way streets, respectively. The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — indicating a one-way street from intersection `u` to intersection `v`. Output Print \\"YES\\" if it is possible to travel between any two intersections, otherwise, print \\"NO\\". Examples Input 5 6 1 2 2 3 3 4 4 5 5 1 2 4 Output YES Input 5 4 1 2 2 3 3 4 4 5 Output NO Explanation In the first example, despite some directions being more complex, it is still possible to travel between any two intersections. For example, from intersection 1, you can reach any other by following the streets in a specific sequence. In the second example, there is no way to get from intersection 5 to intersection 1 (or any intersection backwards in the list), thus not fulfilling the condition.","solution":"def is_strongly_connected(n, m, streets): from collections import defaultdict, deque def bfs(start, adj): visited = [False] * (n + 1) queue = deque([start]) while queue: node = queue.popleft() if not visited[node]: visited[node] = True for neighbor in adj[node]: if not visited[neighbor]: queue.append(neighbor) return visited # Build adjacency lists for the original graph and the transposed graph adj = defaultdict(list) radj = defaultdict(list) for u, v in streets: adj[u].append(v) radj[v].append(u) # Perform BFS from any node, here we choose node 1 visited_from_first = bfs(1, adj) # Check if we can reach all nodes from the first node if not all(visited_from_first[1:]): return \\"NO\\" # Perform BFS in the transposed graph from the same node visited_from_first_transposed = bfs(1, radj) # Check if all nodes can reach the first node if not all(visited_from_first_transposed[1:]): return \\"NO\\" return \\"YES\\""},{"question":"Aisha is fascinated by prime numbers and their unique properties. Recently, she encountered a problem and now she wants you to solve it for her. Given a positive integer, m, she wants to find the smallest prime number greater than m. Input Format A single integer denoting m. Constraints 0 < m leq 10^6 Output Format Print the smallest prime number greater than m. Sample Input 0 10 Sample Output 0 11 Explanation 0 The prime number greater than 10 is 11, as 11 is a prime and there are no prime numbers between 10 and 11. Sample Input 1 29 Sample Output 1 31 Explanation 1 The prime number greater than 29 is 31.","solution":"def is_prime(n): Checks if a number n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def smallest_prime_greater_than(m): Returns the smallest prime number greater than m. candidate = m + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"The Kingdom of Numeria has a unique celebration where they select a number and transform it in a special way to reveal its \\"Festive Spirit\\". The \\"Festive Spirit\\" of a number is derived by performing the following operations: 1. Sum the digits of the number. 2. If the resulting sum is a single digit, consider it the Festive Spirit. 3. If not, repeat the process with the resulting sum until a single-digit number is obtained. Write a program that takes a positive integer `n` as input and outputs the \\"Festive Spirit\\" of that number. # Input - A single integer `n` where `1 <= n <= 10^18`. # Output - A single integer which is the \\"Festive Spirit\\" of the input number. # Example Input ``` 9875 ``` Output ``` 2 ``` Input ``` 12345 ``` Output ``` 6 ``` # Note In the first example, the sum of digits of 9875 is 9 + 8 + 7 + 5 = 29. Since 29 is not a single-digit number, the process is repeated: 2 + 9 = 11, and again: 1 + 1 = 2. Hence, the \\"Festive Spirit\\" is 2. In the second example, the sum of digits of 12345 is 1 + 2 + 3 + 4 + 5 = 15. Since 15 is not a single-digit number, the process is repeated: 1 + 5 = 6. Hence, the \\"Festive Spirit\\" is 6.","solution":"def festive_spirit(n): Calculates the \'Festive Spirit\' of the given number n. Args: n (int): A positive integer. Returns: int: The single-digit \'Festive Spirit\' of n. while n >= 10: n = sum(int(digit) for digit in str(n)) return n"},{"question":"You are given a 2D grid of integers where each cell contains either a 0 or a 1. The grid has N rows and M columns. You need to find the largest rectangle containing only 1\'s and return its area. ------ Input Format ------ - The first line of input will contain two space-separated integers, N and M, representing the number of rows and columns in the grid respectively. - Each of the next N lines contains M space-separated integers (either 0 or 1), representing the grid. ------ Output Format ------ - Output a single integer, representing the area of the largest rectangle containing only 1\'s. ------ Constraints ------ 1 ≤ N, M ≤ 200 ------ subtasks ------ Subtask 1 (10 points): N, M ≤ 10 Subtask 2 (40 points): N, M ≤ 100 Subtask 3 (50 points): Original constraints ----- Sample Input 1 ------ 4 4 1 0 1 0 1 0 1 1 1 1 1 1 0 0 1 0 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ In this grid, the largest rectangle of 1\'s has an area of 4, formed by the submatrix from (2,3) to (3,4): ``` 1 1 1 1 ```","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 n = len(matrix) m = len(matrix[0]) heights = [0] * (m + 1) for row in matrix: for i in range(m): if row[i] == 0: heights[i] = 0 else: heights[i] += row[i] stack = [-1] for j in range(m + 1): while heights[j] < heights[stack[-1]]: h = heights[stack.pop()] w = j - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(j) return max_area def parse_input(input_str): lines = input_str.strip().split(\'n\') N, M = map(int, lines[0].split()) grid = [] for i in range(1, N + 1): grid.append(list(map(int, lines[i].split()))) return N, M, grid def find_largest_rectangle_area(input_str): N, M, grid = parse_input(input_str) return maximalRectangle(grid) # Example use: # input_str = \\"4 4n1 0 1 0n1 0 1 1n1 1 1 1n0 0 1 0\\" # print(find_largest_rectangle_area(input_str)) # Output: 4"},{"question":"A newly opened school wants to create a system to distribute candies to students on special occasions. Each student should receive candies such that no two students in the same class receive the same number of candies. If there are N students in a class, the teacher has to distribute candies optimally to ensure fairness. Write a function that determines the minimum number of candies the teacher needs to have to distribute among N students such that no two students get the same number of candies. Input: The input consists of a single integer N, the number of students in the class. Output: Print the minimum number of candies required. Constraints: 1 ≤ N ≤ 10^5 SAMPLE INPUT 3 SAMPLE OUTPUT 6 Explanation: If there are 3 students, the minimum candies required are 1, 2, and 3 which sums to 6. Note: For N students, the minimum required candies are the sum of the first N natural numbers. The sum of the first N natural numbers is given by the formula N*(N+1)/2.","solution":"def minimum_candies(N): Returns the minimum number of candies required to distribute among N students such that no two students receive the same number of candies. # Using the sum of the first N natural numbers formula: N * (N + 1) // 2 return N * (N + 1) // 2"},{"question":"Task Determine if a given string follows a given pattern. Write a function that takes a pattern and a string and returns `True` if the string follows the same pattern as the pattern provided, and `False` otherwise. The pattern will consist of lowercase letters and the string will consist of lowercase words separated by single spaces. Examples ``` pattern_match(\\"abba\\", \\"dog cat cat dog\\") == True pattern_match(\\"abba\\", \\"dog cat cat fish\\") == False pattern_match(\\"aaaa\\", \\"dog dog dog dog\\") == True pattern_match(\\"abba\\", \\"dog dog dog dog\\") == False ``` Constraints - Both the pattern and string will have at least one character/word. - The string will contain at most 1000 words. - The words in the string and the pattern will both be non-empty.","solution":"def pattern_match(pattern, string): Determines if the string follows the same pattern. :param pattern: A string representing the pattern, e.g., \\"abba\\" :param string: A string of words separated by spaces, e.g., \\"dog cat cat dog\\" :return: True if the string follows the pattern, False otherwise words = string.split() if len(pattern) != len(words): return False pattern_to_word = {} word_to_pattern = {} for p, w in zip(pattern, words): if p in pattern_to_word and pattern_to_word[p] != w: return False if w in word_to_pattern and word_to_pattern[w] != p: return False pattern_to_word[p] = w word_to_pattern[w] = p return True"},{"question":"The development team at Alpha Corp is working on a search engine, and they need to implement an algorithm to find the most frequent words in a text stream efficiently. A word is defined as a sequence of alphabetical characters. Words are case-insensitive, and punctuation should be ignored. They also want to support a real-time update to this word frequency list as new words are streamed in. Your task is to write a program that reads a series of words from a text stream, processes them to maintain a frequency count, and then answers queries about the most frequent words. Each query will ask for the top K most frequent words at that current state of the stream. ------ Input ------ The first line contains an integer Q, the number of lines following it. Each of the next Q lines contains either: - \\"ADD <word>\\", to add the word to the stream. - \\"QUERY <K>\\", to query the top K most frequent words at that moment. ------ Output ------ For each \\"QUERY\\" command, output the top K most frequent words in descending order of their frequency. If there are ties, they should be resolved in lexicographical order. Each word should appear on its own line. If there are fewer than K different words in the stream, return all the words sorted by frequency then alphabetically. ------ Constraints ------ 1 ≤ Q ≤ 10^{4} 1 ≤ K ≤ 100 Text streams can contain up to 10^5 words, and words can be of lengths ranging from 1 to 100 characters. ------ Sample Input ------ 8 ADD google ADD google ADD yahoo ADD google ADD bing QUERY 2 ADD yahoo QUERY 2 ------ Sample Output ------ google yahoo google yahoo","solution":"import heapq from collections import defaultdict class WordFrequency: def __init__(self): self.word_count = defaultdict(int) def add(self, word): Adds the word to the frequency count. word = word.lower() self.word_count[word] += 1 def query(self, k): Returns the top k most frequent words. sorted_words = sorted(self.word_count.items(), key=lambda x: (-x[1], x[0])) return [word for word, count in sorted_words[:k]] def process_stream(queries): Processes a list of queries and returns the result for each \\"QUERY\\" instruction. queries: List of query strings results = [] word_freq = WordFrequency() for query in queries: parts = query.split() if parts[0] == \\"ADD\\": word_freq.add(parts[1]) elif parts[0] == \\"QUERY\\": k = int(parts[1]) top_words = word_freq.query(k) results.extend(top_words) results.append(\\"\\") # To separate results for each query return results"},{"question":"You are given an undirected graph with n vertices and m edges. The graph might have loops and multiple edges between two vertices. Your task is to determine whether there exists a cycle of length exactly k in the graph or not. A cycle of length k is a sequence of k distinct vertices v_1, v_2, ldots, v_k such that there is an edge between v_i and v_{i+1} for 1 leq i < k and an edge between v_k and v_1. -----Input----- The first line contains two integers n and m (1 leq n leq 100, 0 leq m leq 1000) — the number of vertices and edges, respectively. The second line contains a single integer k (3 leq k leq n) — the length of the cycle you need to find. Each of the next m lines contains two integers u and v (1 leq u, v leq n) — representing an edge between vertex u and vertex v. -----Output----- Output \\"YES\\" if there exists a cycle of length exactly k in the graph. Otherwise, output \\"NO\\". -----Example----- Input 5 7 4 1 2 2 3 3 4 4 5 5 1 2 4 1 3 Output YES Input 4 4 3 1 2 2 3 3 4 4 1 Output NO -----Note----- For the first example, the cycle of length 4 exists: 1 -> 2 -> 4 -> 5 -> 1. For the second example, there is no cycle of length 3 in the graph.","solution":"from itertools import combinations def does_cycle_exist_of_length_k(n, m, k, edges): from collections import defaultdict # Building the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Helper function to find all cycles of length k starting from each vertex def find_cycles(v, visited, path, target_length): if len(path) == target_length: return path[0] in graph[path[-1]] result = False visited[v] = True for neighbor in graph[v]: if not visited[neighbor]: path.append(neighbor) result = result or find_cycles(neighbor, visited, path, target_length) path.pop() visited[v] = False return result # Check for each vertex if we can find a cycle of length k starting from it for vertex in range(1, n + 1): visited = [False] * (n + 1) if find_cycles(vertex, visited, [vertex], k): return \\"YES\\" return \\"NO\\" # Example Usage: # n, m, k = 5, 7, 4 # edges = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 1), (2, 4), (1, 3)] # print(does_cycle_exist_of_length_k(n, m, k, edges))"},{"question":"Write a program that reads a string and removes all the vowels from it. Input A single string of text, containing only lower-case letters and spaces. The length of the string is less than or equal to 200 characters. Output Print the modified string after removing all the vowels (\'a\', \'e\', \'i\', \'o\', \'u\'). Example Input programming is fun Output prgrmmng s fn","solution":"def remove_vowels(s): Removes all vowels from the input string s. Parameters: s (str): Input string containing only lower-case letters and spaces. Returns: str: A string with all vowels removed. vowels = \\"aeiou\\" return \'\'.join([char for char in s if char not in vowels])"},{"question":"In a faraway land called Techland, there are n houses labeled from 1 to n. There are m two-way roads connecting some of these houses such that there is always a path between any two houses. Each house also has a unique cost of delivery associated with it, which is given as an array C where C[i] is the cost of delivery to house i+1. One day, the mayor of Techland decided to hold a contest to determine the best delivery route. The contest\'s task is to find the total minimum delivery cost needed to deliver goods from house s to house t, and the rules are such that you must select the path that minimizes the total delivery cost by summing up the costs of all houses on that path (including the starting and ending houses). Can you help determine the minimum delivery cost? Input The first line contains three space-separated integers n, m, s, and t (2 ≤ n ≤ 1000, 1 ≤ m ≤ 5000, 1 ≤ s, t ≤ n) — the number of houses, the number of roads, the starting house, and the ending house, respectively. The second line contains n space-separated integers where the ith integer is C[i] (1 ≤ C[i] ≤ 1000) — the cost of delivery to the ith house. The following m lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n) indicating that there is a road connecting house u and house v. Output Output a single integer — the minimum delivery cost from house s to house t. Example Input 4 4 1 4 2 3 5 1 1 2 2 3 3 4 1 4 Output 9 Explanation The path 1 -> 4 has a cost of 2 + 1 = 3, while the path 1 -> 2 -> 3 -> 4 has a cost of 2 + 3 + 5 + 1 = 11. The minimum delivery cost to travel from house 1 to house 4 is 3.","solution":"import heapq def minimum_delivery_cost(n, m, s, t, C, roads): Returns the minimum delivery cost from house s to house t. Parameters: n: int - number of houses m: int - number of roads s: int - starting house index (1-based) t: int - ending house index (1-based) C: List[int] - cost of delivery to each house roads: List[Tuple[int, int]] - list of roads represented as tuples of houses Returns: int - minimum delivery cost # Adjust indices to be 0-based for easier indexing s -= 1 t -= 1 C = [0] + C # Transform the list of roads into an adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v in roads: graph[u].append(v) graph[v].append(u) # Dijkstra\'s algorithm using priority queue pq = [(C[s + 1], s + 1)] # (cost to reach this node, node index) costs = {i: float(\'inf\') for i in range(1, n + 1)} costs[s + 1] = C[s + 1] visited = set() while pq: current_cost, u = heapq.heappop(pq) if u in visited: continue visited.add(u) for neighbor in graph[u]: new_cost = current_cost + C[neighbor] if new_cost < costs[neighbor]: costs[neighbor] = new_cost heapq.heappush(pq, (new_cost, neighbor)) return costs[t + 1]"},{"question":"You are given a string S consisting of N characters that is potentially garbled, and a dictionary of valid words. A valid sequence is a contiguous subsequence of the string S that can be found in the dictionary. Your task is to find the minimum number of valid sequences into which the string S can be partitioned. If it is impossible to do so, return -1. ------ Input Format ------ - The first line of input contains an integer T, the number of test cases. - For each test case: - The first line contains a single integer N, the length of the string S. - The second line contains the string S consisting of lower-case English letters. - The third line contains an integer M, the number of words in the dictionary. - The next M lines each contain a valid word in the dictionary. ------ Output Format ------ For each test case, output a single integer on a new line, representing the minimum number of valid sequences required to partition the string S, or -1 if it cannot be partitioned. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ 1000 Each word in the dictionary has a length between 1 and N. S contains only lower-case English letters. All words in the dictionary are unique. ----- Sample Input 1 ------ 2 5 apple 3 app le pla 6 abcdef 3 ab cd ef ----- Sample Output 1 ------ 2 3 ----- Explanation 1 ------ Test Case 1: The string \\"apple\\" can be partitioned into \\"app\\" and \\"le\\", which are both valid sequences from the dictionary. Therefore, the minimum number of valid sequences is 2. Test Case 2: The string \\"abcdef\\" can be partitioned into \\"ab\\", \\"cd\\", and \\"ef\\", all of which are valid words in the dictionary, and thus the minimum number of valid sequences is 3.","solution":"def min_valid_sequences(S, dictionary): n = len(S) dp = [-1] * (n + 1) dp[0] = 0 for i in range(n): if dp[i] != -1: for word in dictionary: if S[i:i + len(word)] == word: if dp[i + len(word)] == -1 or dp[i + len(word)] > dp[i] + 1: dp[i + len(word)] = dp[i] + 1 return dp[n] def min_partition(T, test_cases): results = [] for case in test_cases: N, S, M, dictionary = case if (result := min_valid_sequences(S, set(dictionary))) == -1: results.append(-1) else: results.append(result) return results"},{"question":"# Fibonacci Sequence The Fibonacci sequence is a series of numbers in which each number (Fibonacci number) is the sum of the two preceding ones, usually starting with 0 and 1. Implement a function that takes an integer `n` as input and returns the `n-th` Fibonacci number. Examples ``` fibonacci(0) ==> 0 fibonacci(1) ==> 1 fibonacci(5) ==> 5 fibonacci(10) ==> 55 ```","solution":"def fibonacci(n): Returns the n-th Fibonacci number. if n == 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b"},{"question":"John is fascinated by the idea of generating random passwords and wants to create a program that helps him generate secure, random passwords based on specific criteria. The program should generate passwords that meet the following conditions: 1. **Length**: The password should be of length `L`, which ranges from 8 to 16 characters. 2. **Characters**: The password must contain at least one uppercase letter, one lowercase letter, one digit, and one special character. The special characters include: `!@#%^&*()-_=+[]{}|;:,.<>?/` Write a program that generates a password given the length `L`. Ensure that the program generates a password which is random and satisfies all the conditions mentioned above. If the input length `L` is outside the valid range, the program should print \\"Invalid length\\". Input The input consists of a single integer `L` which represents the length of the password. Output The program should output a single string which is the generated password. Example Input 12 Output A possible output could be: `aB3!kY8%LmN` (Note that the actual output should be a randomly generated password that meets all criteria.) Input 5 Output Invalid length","solution":"import random import string def generate_password(L): Generates a random password of length L. Password must include at least one uppercase letter, one lowercase letter, one digit, and one special character. if L < 8 or L > 16: return \\"Invalid length\\" special_characters = \\"!@#%^&*()-_=+[]{}|;:,.<>?/\\" # Ensure password meets conditions password = [ random.choice(string.ascii_lowercase), random.choice(string.ascii_uppercase), random.choice(string.digits), random.choice(special_characters) ] # Fill the rest of the password length with random choices from all allowed characters all_characters = string.ascii_letters + string.digits + special_characters password.extend(random.choices(all_characters, k=L-4)) # Shuffle the list to avoid any predictable ordering random.shuffle(password) return \'\'.join(password)"},{"question":"You are given a forest graph with n nodes and m edges. A forest is an undirected graph with no cycles. Your task is to determine the minimum number of edges required to convert the forest into a single connected tree. In other words, you need to connect all the nodes into one connected component ensuring there is exactly one path between any two nodes. -----Input----- The first line contains two integers n and m (1 le n le 10^5, 0 le m le 10^5) - the number of nodes and edges respectively. Each of the following m lines contains two integers u and v (1 le u, v le n) denoting an edge between nodes u and v. -----Output----- Output a single integer denoting the minimum number of edges required to connect all nodes into a single tree. -----Examples----- Input 6 3 1 2 2 3 4 5 Output 2 Input 5 0 Output 4 Input 4 3 1 2 2 3 3 4 Output 0 -----Note----- In the first example, there are 3 connected components: {1, 2, 3}, {4, 5}, and {6}. To connect all nodes, we can add two edges: {3, 4} and {5, 6}. In the second example, there are no edges. Therefore, we need to add 4 edges to connect all 5 nodes. In the third example, the graph is already a tree and no additional edges are needed.","solution":"def find_connected_components(n, edges): Find the number of connected components in the forest graph. from collections import defaultdict, deque graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) components = 0 for i in range(1, n + 1): if not visited[i]: bfs(i) components += 1 return components def min_edges_to_connect_all_nodes(n, m, edges): Calculate the minimum number of edges required to connect all nodes in the graph. if n == 1: return 0 components = find_connected_components(n, edges) return components - 1"},{"question":"Given an array of integers and a target integer, determine the indices of the two unique numbers in the array that add up to the target. Assume exactly one solution exists, and you may not use the same element twice. Example 1: Input: arr[] = [2, 7, 11, 15], target = 9 Output: 0 1 Explanation: arr[0] + arr[1] = 2 + 7 = 9 Example 2: Input: arr[] = [1, 5, 3, 7], target = 8 Output: 1 2 Explanation: arr[1] + arr[2] = 5 + 3 = 8 Your Task: You do not need to read input or print anything. Implement the function twoSum() that takes the array and the target value as input parameters and returns a list of two integers representing the indices of the numbers that add up to the target. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 2 ≤ len(arr) ≤ 10^4 -10^9 ≤ arr[i] ≤ 10^9 -10^9 ≤ target ≤ 10^9","solution":"def twoSum(arr, target): Returns the indices of the two unique numbers in the array that add up to the target. num_to_index = {} for index, num in enumerate(arr): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index"},{"question":"Write a function to simulate a 4-input logical gate that performs the following operation: (A and B) OR (C XOR D) AND (not(A) or B) where A, B, C, and D are the inputs to the 4-input gate. Example 1: Input: A = 0, B = 1, C = 1, D = 0 Output: 1 Explanation: (A and B) OR (C XOR D) AND (not(A) or B) = (0 and 1) OR (1 XOR 0) AND (not(0) or 1) = 0 OR 1 AND (1 or 1) = 0 OR 1 AND 1 = 0 OR 1 = 1 Example 2: Input: A = 1, B = 0, C = 1, D = 1 Output: 0 Explanation: (A and B) OR (C XOR D) AND (not(A) or B) = (1 and 0) OR (1 XOR 1) AND (not(1) or 0) = 0 OR 0 AND (0 or 0) = 0 OR 0 = 0 Your Task: You don\'t need to read input or print anything. Implement the function logicalOperation(A, B, C, D) which takes A, B, C, D as inputs and returns the result of the operation. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 0 <= A, B, C, D <= 1","solution":"def logicalOperation(A, B, C, D): Simulates the 4-input logical gate operation described. (A AND B) OR (C XOR D) AND (NOT A OR B) return (A and B) or ((C ^ D) and (not A or B))"},{"question":"Define a method that accepts an integer array which represents the temperatures recorded over several days. The method returns an array where each element represents the number of days you would have to wait until a warmer temperature. If there is no future day with a warmer temperature, the output should be 0 for that day. ```python days_until_warmer([73, 74, 75, 71, 69, 72, 76, 73]) == [1, 1, 4, 2, 1, 1, 0, 0] days_until_warmer([70, 68, 72, 76, 73, 75]) == [2, 1, 1, 0, 1, 0] days_until_warmer([60, 60, 60, 60]) == [0, 0, 0, 0] ```","solution":"def days_until_warmer(temperatures): Given a list of temperatures, returns a list of integers where each integer represents the number of days you would have to wait until a warmer temperature. If no such day exists, return 0 for that day. n = len(temperatures) result = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: index = stack.pop() result[index] = i - index stack.append(i) return result"},{"question":"You are given a sequence of n integers. A subarray is defined as any consecutive segment of the array. The subarray sum is simply the sum of all elements within the subarray. Your task is to find the maximum possible subarray sum from the given sequence. However, the challenge is that you must ignore all subarrays that consist solely of negative numbers. If all possible subarrays include at least one positive number, you should return the maximum sum for such subarrays. If no positive number is present in the sequence, you should return 0. **Input:** - A single integer n (1 ≤ n ≤ 10^5) - the number of elements in the sequence. - A sequence of n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). **Output:** - A single integer representing the maximum subarray sum considering the rules mentioned above. **Example:** ``` Input: 8 -2 -3 4 -1 -2 1 5 -3 Output: 7 Explanation: The maximum subarray is [4, -1, -2, 1, 5] which has a sum of 7. Input: 5 -5 -3 -1 -7 -8 Output: 0 Explanation: All subarrays contain only negative numbers, so the output is 0. ``` Note: This problem requires you to implement an efficient algorithm with a time complexity of O(n).","solution":"def max_subarray_sum(n, arr): Returns the maximum subarray sum ignoring subarrays consisting only of negative numbers. # Edge case: if all numbers are negative, return 0 if max(arr) < 0: return 0 # Apply Kadane\'s algorithm to find the maximum subarray sum max_ending_here = max_so_far = arr[0] for i in range(1, n): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are given a string S, which consists of lowercase alphabets and an integer N. You need to form a new string by repeatedly pushing the first character of the current string to the end of the string and then removing it from the front exactly N times. Write a function modifyString(S, N) that takes in the string S and the integer N and returns the modified string after N operations. Example 1: Input: S = \\"abcde\\", N = 3 Output: \\"deabc\\" Example 2: Input: S = \\"hello\\", N = 2 Output: \\"llohe\\" Example 3: Input: S = \\"python\\", N = 6 Output: \\"python\\" Your Task: You don\'t need to read input or print anything. Complete the function modifyString(S, N) which takes the string S and integer N as input and returns the modified string. Constraints: 1 <= |S| <= 100 1 <= N <= 100","solution":"def modifyString(S, N): Modify the string S by moving the first character to the end of the string exactly N times. Parameters: S (str): The initial string. N (int): The number of operations to perform. Returns: str: The modified string after N operations. length = len(S) # Since rotating the string length times results in the same string, # We can optimize by using N % length effective_rotations = N % length # Perform the rotation modified_string = S[effective_rotations:] + S[:effective_rotations] return modified_string"},{"question":"Server Load Management You are managing a data center with a certain number of servers. Each server has a specific capacity that indicates the maximum load (number of requests) it can handle. You need to ensure that at any given time, the load on each server does not exceed its capacity. A request can be sent to a specific server, and it will increase its load by 1. Additionally, a request can be completed from a specific server, and it will decrease its load by 1. You are given a sequence of Q events of the following form: - + i : It denotes that a request is sent to the server (i). - - i : It denotes that a request is completed from the server (i). Determine whether the sequence of events is *valid* or not (i.e., no request is completed from a server before it was sent to that server, and the load on any server does not exceed its capacity at any point). ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case contains Q + 2 lines of input. - The first line of each test case contains two space-separated integers S (total number of servers) and Q (number of events). - The second line contains S space-separated integers representing the capacity of each server. - Q lines follow. For each valid j, (j^{th}) of these lines contains a character ch, followed by a space and an integer i (server index starting from 1). Here ch is either \'+\' or \'-\' and 1 ≤ i ≤ S. ------ Output Format ------ For each test case, print a single line containing one string - \\"Valid\\" (without quotes) if the sequence is valid, \\"Invalid\\" (without quotes) otherwise. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ S ≤ 10^{4} 1 ≤ Q ≤ 10^{4} 1 ≤ text{Server Capacity} le 10^{4} ----- Sample Input 1 ------ 2 2 5 3 2 + 1 + 2 + 1 - 1 + 2 3 4 2 3 1 + 1 + 3 + 2 + 3 ----- Sample Output 1 ------ Valid Invalid ----- explanation 1 ------ - Test case 1: The loads on the servers never exceed their capacities and no request completion happens without a prior request sent to the server. - Test case 2: The load on server 3 exceeds its capacity at the 4th event.","solution":"def check_events_validity(test_cases): results = [] for servers, events, capacities, operations in test_cases: load = [0] * servers valid = True for op, idx in operations: idx -= 1 # Convert to 0-based index if op == \'+\': if load[idx] < capacities[idx]: load[idx] += 1 else: valid = False break elif op == \'-\': if load[idx] > 0: load[idx] -= 1 else: valid = False break results.append(\\"Valid\\" if valid else \\"Invalid\\") return results"},{"question":"In a number game, players are interested in finding out how many multiples of a given integer can be found in a sequence. Given an integer N and a number K , count how many multiples of K are present among N integers A_1, A_2, dots, A_N . __Input__ On the first line, two integers N and K are given. On the second line, N integers A_1, A_2, dots, A_N are given, separated by spaces. __Output__ Output the count of multiples of K . Output the result on a new line. __Constraints__ * 1 leq N leq 100 * 1 leq K leq 100 * 1 leq A_i leq 100 for 1 leq i leq N __Input Example 1__ 5 2 4 3 5 2 6 __Output Example 1__ 3 __Explanation__ A_1 = 4 , A_4 = 2 , and A_5 = 6 are multiples of 2 . Therefore, the count of multiples of 2 is 3 . __Input Example 2__ 4 3 9 7 12 18 __Output Example 2__ 3 __Explanation__ A_1 = 9 , A_3 = 12 , and A_4 = 18 are multiples of 3 . Therefore, the count of multiples of 3 is 3 .","solution":"def count_multiples_of_k(N, K, A): Counts how many multiples of K are present in the list A of length N. Args: - N (int): The number of elements in A. - K (int): The integer to find multiples of. - A (List[int]): A list of integers. Returns: - int: The count of multiples of K in the list A. return sum(1 for x in A if x % K == 0)"},{"question":"A new online shoe retailer is organizing its inventory system. They have a list of shoe models identified by unique integers and their corresponding quantities. Unfortunately, a server error caused some inventory records to get corrupted, and now they have a partial list of their shoe models with quantities and another mismatched list with some additional shoe models and quantities. You need to determine which shoe models need to be restocked based on the difference in quantities between the two lists. If a shoe model appears in both lists but with different quantities, the difference in quantities should be printed. If a shoe model appears in only one list, the corresponding quantity should be returned as a deficit. Input There will be four lines of input: n - the size of the first list This is followed by n space-separated pairs of integers where each pair represents a shoe model and its quantity. m - the size of the second list This is followed by m space-separated pairs of integers where each pair represents a shoe model and its quantity. Output Print the shoe models that need to be restocked along with their deficit quantities in ascending order of the shoe model IDs. Constraints 1 ≤ n, m ≤ 100000 1 ≤ shoe_model ≤ 1000000 1 ≤ quantity ≤ 1000 SAMPLE INPUT 5 101 10 102 5 103 20 104 15 105 8 6 101 5 103 25 106 10 105 10 107 3 108 7 SAMPLE OUTPUT 101 5 102 5 103 5 104 15 106 10 107 3 108 7 Explanation Shoe model 101 appears in both lists, but quantities are 10 and 5, respectively. The deficit is 5. Shoe model 103 also appears in both lists, but quantities are 20 and 25, respectively. The deficit is 5. Shoe model 102, 104 appear only in the first list with quantities 5, and 15. Shoe models 106, 107, 108 appear only in the second list with quantities 10, 3, and 7.","solution":"def restock_shoes(n, list1, m, list2): Determine which shoe models need to be restocked based on the difference in quantities between the two lists. Parameters: n (int): Size of the first list list1 (list): List of tuples where each tuple represents a shoe model and its quantity. m (int): Size of the second list list2 (list): List of tuples where each tuple represents a shoe model and its quantity. Returns: list of tuples: Shoe models and their deficit quantities in ascending order of shoe model IDs. from collections import defaultdict inventory_1 = defaultdict(int) inventory_2 = defaultdict(int) # Fill defaultdicts with respective lists for i in range(n): model, quantity = list1[i] inventory_1[model] += quantity for j in range(m): model, quantity = list2[j] inventory_2[model] += quantity # Combine all keys all_models = set(inventory_1.keys()).union(set(inventory_2.keys())) result = [] for model in sorted(all_models): if model in inventory_1 and model in inventory_2: if inventory_1[model] != inventory_2[model]: result.append((model, abs(inventory_1[model] - inventory_2[model]))) elif model in inventory_1: result.append((model, inventory_1[model])) else: result.append((model, inventory_2[model])) return result"},{"question":"Task You are given a string containing only letters `(both lowercase and uppercase)` and digits. Write a function that reorders the string so that all letters appear before the digits, while maintaining the relative order of both letters and digits from the original string. Return the resulting string. **Example** For the input string `\\"a1b2c3d4\\"`, the output should be `\\"abcd1234\\"`. For the input string `\\"A2B3C4\\"`, the output should be `\\"ABC234\\"`.","solution":"def reorder_string(s): Reorders the string so that all letters appear before the digits, while maintaining the relative order of both letters and digits from the original string. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) return \'\'.join(letters) + \'\'.join(digits)"},{"question":"Given an array of integers where each element represents the height of a histogram bar, write a function to compute the largest rectangular area possible in the histogram. For example, given the histogram represented by the array [2, 1, 5, 6, 2, 3], the function should return 10. The largest possible rectangular area is formed by the bars of heights 5 and 6, which together span a width of 2 units (each width being the horizontal distance between bars). Example: Input: [2, 1, 5, 6, 2, 3] Output: 10","solution":"def largest_rectangle_area(hist): Computes the largest rectangular area in a histogram. Parameters: hist (list of int): A list of non-negative integers representing the heights of histogram bars. Returns: int: The area of the largest rectangle that can be formed in the histogram. stack = [] max_area = 0 index = 0 while index < len(hist): if not stack or hist[index] >= hist[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() current_area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, current_area) while stack: top_of_stack = stack.pop() current_area = (hist[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, current_area) return max_area"},{"question":"*** Nova polynomial integration *** This kata extends the series on polynomial handling with integration. ([#1](http://www.codewars.com/kata/nova-polynomial-1-add-1), [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe), [#3](http://www.codewars.com/kata/5714041e8807940ff3001140), [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5)) Consider a polynomial represented as a list where each element in the list corresponds to the coefficients. The coefficient order is the position in the list, with the 0th position representing the constant term. p = [a0, a1, a2, a3] signifies the polynomial a0 + a1*x + a2*x^2 + a3*x^3 In this kata, you are to return the indefinite integral of a polynomial, including the constant of integration as the last element in the result list. The constant of integration, represented as `C`, can be provided as the second argument to the function. ```python poly_integral([1, 2]) = [0, 1, 1] poly_integral([9, 3, 6], 5) = [0, 9, 1.5, 2, 5] ``` # Example - For `poly_integral([1, 2])`, the original polynomial is 1 + 2x. The integral is x + x^2 + C. - For `poly_integral([9, 3, 6], 5)`, the original polynomial is 9 + 3x + 6x^2. The integral is 9x + (3/2)x^2 + 2x^3 + C. Given C is 5, the result is [0, 9, 1.5, 2, 5]. # Constraints 1. All elements in the input polynomial list are integers or floats. 2. The constant of integration is optional and will default to 0 if not provided.","solution":"def poly_integral(poly, C=0): Calculate the indefinite integral of a polynomial with a constant of integration. :param poly: List of coefficients of the polynomial in ascending order of power. :param C: Constant of integration. :return: List of coefficients of the integrated polynomial. integrated_poly = [0] # Start with the coefficient of the indefinite integral for i in range(len(poly)): integrated_poly.append(poly[i] / (i + 1)) integrated_poly.append(C) # Add the constant of integration return integrated_poly"},{"question":"You are given a string representing a sequence of characters, and your task is to determine the minimum number of operations required to transform the given string into a string containing no consecutive identical characters. An operation is defined as changing a single character in the string to any other character. The goal is to ensure that no two adjacent characters are the same. Input Format: The first line contains an integer T, i.e., the number of test cases. The next T lines each contain a string without spaces, composed of lowercase English letters. Output Format: For each test case, output a single line containing the minimum number of operations required. Constraints: 1 ; ≤ ; T; ≤; 20 1 ≤ length of string ≤ 10 ^ 5 SAMPLE INPUT 3 aab abba abcde SAMPLE OUTPUT 1 1 0 Explanation For test case 1, aab -> abb would require 1 change (changing the second \'a\' to \'b\'). For test case 2, abba -> abca or abna would require 1 change (changing the second \'b\' to \'c\' or \'n\'). For test case 3, abcde already has no consecutive identical characters, so the result is 0.","solution":"def min_operations_to_avoid_consecutive_chars(T, strings): results = [] for s in strings: count = 0 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 results.append(count) return results"},{"question":"There is an endless grid, and a robot is placed at the origin (0, 0). The robot can move left, right, up, or down one step at a time. You are given a string consisting of characters \'L\', \'R\', \'U\', and \'D\', representing the directions left, right, up, and down respectively. Determine the final coordinates of the robot after executing all the moves in the string. Input format: The first line contains an integer T, the number of test cases. Each test case consists of one string that contains the directions. Output format: For each test case, output the final coordinates of the robot in the form \\"(x, y)\\". Constraints: 1 ≤ T ≤ 100 1 ≤ length of each direction string ≤ 10^5 SAMPLE INPUT 3 LLRR UUDD LURDLURD SAMPLE OUTPUT (0, 0) (0, 0) (0, 0)","solution":"def final_coordinates(directions): Returns the final coordinates after executing the moves. Parameters: directions (str): A string consisting of characters \'L\', \'R\', \'U\', \'D\' Returns: tuple: The final coordinates (x, y) x, y = 0, 0 for move in directions: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return (x, y) def handle_multiple_cases(T, cases): Process multiple test cases and returns their final coordinates. Parameters: T (int): Number of test cases cases (list of str): A list of direction strings Returns: list of tuple: A list containing final coordinates for each test case results = [] for directions in cases: results.append(final_coordinates(directions)) return results"},{"question":"Given an array A of size n, you need to answer q queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n). For each query, compute the number of distinct elements in the subarray A[l...r]. Input Format: The first line contains an integer n, the size of the array. The second line contains n integers, representing the elements of the array A. The third line contains an integer q, the number of queries. The next q lines each contain two integers l and r, representing the indices of the subarray. Output Format: For each query, output the number of distinct elements in the subarray A[l...r]. Constraints: 1 ≤ n ≤ 10^5 1 ≤ A[i] ≤ 10^6 1 ≤ q ≤ 10^5 SAMPLE INPUT 5 1 2 1 3 4 3 1 3 2 4 1 5 SAMPLE OUTPUT 2 3 4 Explanation: In the first query, the subarray is [1, 2, 1], which has 2 distinct elements: 1 and 2. In the second query, the subarray is [2, 1, 3], which has 3 distinct elements: 1, 2, and 3. In the third query, the subarray is [1, 2, 1, 3, 4], which has 4 distinct elements: 1, 2, 3, and 4.","solution":"def count_distinct_elements(A, queries): Returns the number of distinct elements in the subarray A[l...r] for each query. Parameters: A (list): The input array. queries (list of tuples): Each tuple contains two integers, l and r, representing the indices of the subarray. Returns: results (list): The number of distinct elements for each query subarray. results = [] for l, r in queries: results.append(len(set(A[l-1:r]))) return results"},{"question":"You are developing a new online multiplayer game. Each player in your game is assigned an integer skill level. The algorithm you need to implement will help form balanced teams based on these skill levels. A balanced team is defined as two teams where the sum of skill levels of players in each team is as close as possible. To achieve this you need to divide the players into two teams such that the absolute difference between the sums of the skill levels of the players in the two teams is minimized. Input The input will begin with an integer N (1 ≤ N ≤ 500), the number of players. The second line contains N integers, s1, s2, ..., sN (1 ≤ si ≤ 1000), representing the skill levels of the players. Output Print a single integer that represents the minimum difference between the sums of the skill levels of the two teams. Examples Input 4 1 2 3 4 Output 0 Input 6 3 1 4 2 2 1 Output 1 Note For the first example, you can divide the players into two teams: {1, 4} and {2, 3}. Both teams have a sum of skill levels equal to 5, so the absolute difference is 0. For the second example, you can divide the players into two teams: {1, 2, 2} and {3, 4, 1}. The sums of skill levels are 5 and 6, respectively, so the absolute difference is 1.","solution":"def balanced_teams(N, skills): total_sum = sum(skills) target = total_sum // 2 dp = [0] * (target + 1) for skill in skills: for j in range(target, skill - 1, -1): dp[j] = max(dp[j], dp[j - skill] + skill) team1_sum = dp[target] team2_sum = total_sum - team1_sum return abs(team1_sum - team2_sum)"},{"question":"You are given an integer array `nums` and an integer `k`. Your task is to find the number of unique pairs `(i, j)` where `0 <= i < j < nums.length` such that `nums[i] + nums[j] == k`. Each test case is independent of the others. ----- Input ----- The first line contains an integer `t` (1 le t le 1000), the number of test cases. Each test case consists of two lines: - The first line contains integers `n` and `k` (1 le n le 10^5, -10^9 le k le 10^9), where `n` is the length of the array `nums` and `k` is the target sum. - The second line contains `n` integers `nums[i]` (-10^9 le nums[i] le 10^9), the elements of the array. It is guaranteed that the sum of `n` over all test cases does not exceed 10^5. ----- Output ----- For each test case, output a single integer — the number of unique pairs `(i, j)` where `nums[i] + nums[j] == k`. ----- Examples ----- Input 3 4 5 1 2 3 4 5 6 3 1 4 1 5 3 0 -1 1 0 Output 2 1 1 ----- Explanation ----- In the first test case, the pairs that sum to `5` are `(1, 4)` and `(2, 3)`. In the second test case, the pairs that sum to `6` are `(1, 5)`. In the third test case, the pairs that sum to `0` are `(-1, 1)`.","solution":"def count_unique_pairs(nums, k): seen = set() pairs = set() for num in nums: target = k - num if target in seen: pairs.add((min(num, target), max(num, target))) seen.add(num) return len(pairs) def process_test_cases(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] nums = test_cases[i][1] result = count_unique_pairs(nums, k) results.append(result) return results # Example usage: # t = 3 # test_cases = [ # [(4, 5), [1, 2, 3, 4]], # [(5, 6), [3, 1, 4, 1, 5]], # [(3, 0), [-1, 1, 0]] # ] # print(process_test_cases(t, test_cases)) # Output: [2, 1, 1]"},{"question":"On a 10 times 10 grid, some horizontal rows have been painted red, and some vertical columns have been painted green. The stripes are drawn sequentially, one after the other. When the stripe is drawn, it repaints all the cells through which it passes. Determine which color was used last. The red stripe was painted after the green one, so the answer is R. -----Input----- The first line of the input contains a single integer t (1 leq t leq 3000) — the number of test cases. The description of test cases follows. There is an empty line before each test case. Each test case consists of 10 lines, each containing 10 characters. Each of these characters is either \'R\', \'G\', or \'.\', denoting a red square, a green square, and an unpainted square, respectively. It is guaranteed that the given field is obtained from a colorless one by drawing horizontal red rows and vertical green columns. At least one stripe is painted. -----Output----- For each test case, output \'R\' if a red stripe was painted last, and \'G\' if a green stripe was painted last (without quotes). -----Examples----- Input 4 .......... .G........ .G........ RRRRRRRRRR .......... .G........ .G........ .G........ .G........ .G........ ..........GR G..........R G..........R G..........R G..........R G..........R G..........R RRRRRRRRRR RRRRRRRRRR .......... RR.GRR.GGR .G......G. RRRRRRRRRR .G......G. .G......G. .G......G. RRRRRRRRRR .G......G. .G......G. .......... .......... .......... RRRRRRRRRR .......... .......... .......... .......... Output R R G R -----Note----- The first test case is pictured in the statement. In the second test case, the first green column is painted first, then the first and last red rows, and finally the last green column. Since a green stripe is painted last, the answer is G.","solution":"def determine_last_paint(grid): Determines which color was used last on a 10x10 grid. Args: grid: a list of lists containing \'R\', \'G\', and \'.\' characters, where each list represents a row. Returns: \'R\' if a red stripe was painted last, \'G\' if a green stripe was painted last. last_red_row = -1 last_green_col = -1 for r in range(10): if \'R\' in grid[r]: last_red_row = r for c in range(10): for r in range(10): if grid[r][c] == \'G\': last_green_col = c break if last_red_row == -1: return \'G\' if last_green_col == -1: return \'R\' # Check if the last painted red row was after the last green column painted return \'R\' if last_red_row > last_green_col else \'G\' def process_test_cases(test_cases): Processes multiple test cases. Args: test_cases: a list of test cases, each test case being a 10x10 grid of \'R\', \'G\', and \'.\' characters. Returns: A list of results for each test case. results = [] for grid in test_cases: results.append(determine_last_paint(grid)) return results"},{"question":"![Sample Image](image-link) Problem Statement Luna has a beautiful garden with a variety of flowers planted in a rectangular grid. Each cell in the grid can either contain a flower or be empty. Luna wants to watermark her garden layout image to prevent unauthorized distribution. To do so, she wants to fill all remaining empty cells in each row with numbers from a given sequence in such a way that none of the numbers repeat in any row or column. 1. Luna\'s garden grid is represented by a matrix where each element is either a flower represented by -1 or an empty cell represented by 0. 2. Fill in the empty cells using the numbers given in a sequence, ensuring that each number appears at most once per row and at most once per column. Constraints * The grid size is n x m (2 ≤ n, m ≤ 15). * Each row and column of the grid will have at least one empty cell initially. * The sequence of numbers used to fill the grid is a range of integers from 1 to n*m, inclusive. Input * The first line contains two integers, n and m, denoting the dimensions of the grid. * The next n lines contain m integers each, describing the grid. Output Output the filled grid satisfying the given constraints. The output should be n lines with m integers each, representing the final grid. Examples Input 3 3 0 -1 0 -1 0 -1 0 -1 0 Output 1 -1 2 -1 3 -1 2 -1 1 Input 2 2 0 0 -1 0 Output 1 2 -1 1","solution":"def fill_garden_grid(n, m, grid): Fill the empty cells in the garden grid such that each number from 1 to n*m appears at most once per row and column, while respecting the pre-filled flowers (-1). Args: n : int : number of rows m : int : number of columns grid : list of list of int : the garden grid with -1 representing flowers and 0 representing empty cells Returns: list of list of int : the filled garden grid from itertools import product def is_valid(grid, row, col, num): for i in range(n): if grid[i][col] == num: return False for j in range(m): if grid[row][j] == num: return False return True # List of all possible numbers to fill in the grid numbers = list(range(1, n * m + 1)) used = set() # Get positions of all empty cells (0s) empty_positions = [(i, j) for i, j in product(range(n), range(m)) if grid[i][j] == 0] def backtrack(idx): if idx == len(empty_positions): return True row, col = empty_positions[idx] for number in numbers: if number not in used and is_valid(grid, row, col, number): grid[row][col] = number used.add(number) if backtrack(idx + 1): return True # Reset the cell and the used number grid[row][col] = 0 used.remove(number) return False backtrack(0) return grid"},{"question":"Alice loves coding and mathematics. She is currently studying about various types of number sequences. One of the most fascinating sequences she discovered is the pattern of \\"Zigzag Sequence\\". A sequence is called a Zigzag Sequence if and only if each element in the sequence is either strictly greater than or strictly less than the previous element. For example, the sequence [1, 3, 2, 4] is a Zigzag Sequence because 3 > 1, 2 < 3, and 4 > 2, but the sequence [1, 2, 2] is not because 2 is not strictly greater than or strictly less than 2. Alice wants to find the longest Zigzag subsequence in a given array. Your task is to write an algorithm to find the length of the longest Zigzag subsequence for a given array `arr` of n integers. -----Input----- The first line contains a single integer n (1 le n le 1000) — the size of the array. The second line contains n integers arr_i (1 le arr_i le 10000) — the elements of the array. -----Output----- Print one integer — the length of the longest Zigzag subsequence. -----Examples----- Input 6 1 7 4 9 2 5 Output 6 Input 5 1 4 7 2 5 Output 4 Input 3 1 2 3 Output 2","solution":"def longest_zigzag_subsequence(arr): n = len(arr) if n < 2: return n inc = 1 dec = 1 for i in range(1, n): if arr[i] > arr[i - 1]: inc = dec + 1 elif arr[i] < arr[i - 1]: dec = inc + 1 return max(inc, dec)"},{"question":"*** Count the Vowels *** You are given a string (s). Your task is to return the count of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive and should not use any loop structures including but not limited to for, while, or do-while loops. String can contain any characters, including special characters and numbers. Use only built-in string and array methods, but no looping structures directly in your code. For more fun with loop limitations, try these other challenges: https://www.codewars.com/kata/no-loops-1-small-enough https://www.codewars.com/kata/no-loops-3-copy-within Example: countVowels(\\"Hello World\\") => 3 countVowels(\\"A quick brown fox jumps over the lazy dog\\") => 11","solution":"def count_vowels(s): Returns the count of vowels (a, e, i, o, u) present in the input string s. vowels = \\"aeiouAEIOU\\" return sum(s.count(vowel) for vowel in vowels)"},{"question":"In a given city, there are M different warehouses storing different quantities of a particular product. Due to logistic reasons, you want to minimize the inventory levels step by step. In each step, you find the median quantity of the product across all warehouses and subtract it from the inventory in each warehouse. For instance, if the quantities in the warehouses are: 7 8 3 4 6 For the first step, the median is 6, so you subtract 6 from all values: 1 2 -3 -2 0 Now you only consider the non-zero values and again find the median to repeat the operation until all the values become zero. Write a program to print the number of warehouses with inventory greater than zero after each step. Input Format The first line contains an integer M, indicating the number of warehouses. The next line contains M integers representing the initial inventory quantities in each warehouse. Output Format For each step, print the number of warehouses that have a positive inventory remaining after the operation, until all warehouses reach zero inventory. Constraints 1 ≤ M ≤ 1000 1 ≤ Inventory[i] ≤ 1000 SAMPLE INPUT 5 7 8 3 4 6 SAMPLE OUTPUT 5 4 3 1 0","solution":"def count_warehouses(M, inventories): Print number of warehouses with inventory greater than zero after each step. inventories = sorted(inventories) while any(inventory > 0 for inventory in inventories): median = inventories[M // 2] if M % 2 != 0 else inventories[M // 2 - 1] for i in range(M): inventories[i] -= median inventories = [inventory for inventory in inventories if inventory > 0] M = len(inventories) print(M)"},{"question":"Write a program that takes a positive integer `n` and prints the sum of the digits of each number from 1 to `n`. Return the results as a list of integers. Make sure your solution handles large values efficiently. Input n - a single positive integer. Output A list of integers where each integer is the sum of the digits of the corresponding number in the range from 1 to n. Constraints 1 ≤ n ≤ 10000 SAMPLE INPUT 5 SAMPLE OUTPUT [1, 2, 3, 4, 5] SAMPLE INPUT 13 SAMPLE OUTPUT [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]","solution":"def digit_sum(n): Returns a list where each element is the sum of the digits of the corresponding number from 1 to n. def sum_of_digits(num): return sum(int(digit) for digit in str(num)) return [sum_of_digits(i) for i in range(1, n+1)]"},{"question":"Given an input string, create a function that returns the longest substring without repeating characters. If there are multiple longest substrings with the same length, return the one that appears first. Example: `\\"abcabcbb\\"` -> `\\"abc\\"` `\\"bbbbb\\"` -> `\\"b\\"` `\\"pwwkew\\"` -> `\\"wke\\"` Create the function that accomplishes this task, ensuring efficiency even for longer strings.","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. If there are multiple substrings with the same length, returns the first one. char_index_map = {} start = 0 max_length = 0 max_substring = \\"\\" for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i current_length = i - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:i+1] return max_substring"},{"question":"A magical forest contains various species of plants, each characterized by their growth rate. Every day, the magical dew that falls on these plants increases their height linearly. You are given the height of each plant species in the forest at the beginning of day 0 and their respective growth rates. You need to determine the height of the tallest plant at the end of each given day specified in the input. ------ Input ------ The first line contains an integer T, the number of test cases. Each test case begins with an integer N, representing the number of plant species. The next line contains N integers, the initial heights of the plants. The third line contains N integers, the growth rates of the plants. The fourth line contains an integer D, the number of days you need to calculate the tallest plant\'s height for. The fifth line contains D integers, representing the specific days. ------ Output ------ For each test case, print D integers, each representing the height of the tallest plant at the end of the corresponding day. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ Initial height ≤ 100 1 ≤ Growth rate ≤ 100 1 ≤ D ≤ 100 0 ≤ Day ≤ 100 ----- Sample Input 1 ------ 2 3 5 10 3 1 2 2 2 1 3 2 20 30 4 2 2 5 10 ----- Sample Output 1 ------ 12 16 38 50 Explanation: For the first test case, the plants\' initial heights are [5, 10, 3] and their growth rates are [1, 2, 2]. On day 1: - Heights are: [5 + 1*1, 10 + 2*1, 3 + 2*1] = [6, 12, 5] - The tallest plant is 12 units tall. On day 3: - Heights are: [5 + 1*3, 10 + 2*3, 3 + 2*3] = [8, 16, 9] - The tallest plant is 16 units tall. For the second test case, the plants\' initial heights are [20, 30] and their growth rates are [4, 2]. On day 5: - Heights are: [20 + 4*5, 30 + 2*5] = [40, 40] - The tallest plant is 40 units tall. On day 10: - Heights are: [20 + 4*10, 30 + 2*10] = [60, 50] - The tallest plant is 60 units tall.","solution":"def calculate_tallest_plant_heights(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] initial_heights = test_cases[i][1] growth_rates = test_cases[i][2] D = test_cases[i][3] days = test_cases[i][4] tallest_per_day = [] for day in days: heights_on_day = [initial + rate * day for initial, rate in zip(initial_heights, growth_rates)] tallest = max(heights_on_day) tallest_per_day.append(tallest) results.append(tallest_per_day) return results"},{"question":"Implement a To-Do List You are required to implement a simple text-based To-Do list application. Your task is to create a class `ToDoList` that allows users to add tasks, remove tasks, and retrieve all tasks. The class should have the following methods: 1. `add_task(task: str)`: Adds a task to the list. Duplicate tasks should be ignored. 2. `remove_task(task: str)`: Removes a task from the list. If the task does not exist, raise a `ValueError` with the message \\"Task not found\\". 3. `get_tasks() -> List[str]`: Returns a list of all tasks in the order they were added. Example: ```python todo = ToDoList() todo.add_task(\\"Buy groceries\\") todo.add_task(\\"Clean the house\\") print(todo.get_tasks()) # Output: [\\"Buy groceries\\", \\"Clean the house\\"] todo.remove_task(\\"Buy groceries\\") print(todo.get_tasks()) # Output: [\\"Clean the house\\"] ``` Constraints: - The `task` string will be non-empty and contain only letters and spaces. - The To-Do list can hold a maximum of 100 tasks.","solution":"class ToDoList: def __init__(self): self.tasks = [] def add_task(self, task: str): Adds a task to the list. Duplicate tasks should be ignored. if len(self.tasks) >= 100: raise IndexError(\\"Task list is full\\") if task not in self.tasks: self.tasks.append(task) def remove_task(self, task: str): Removes a task from the list. If the task does not exist, raise a ValueError with the message \\"Task not found\\". try: self.tasks.remove(task) except ValueError: raise ValueError(\\"Task not found\\") def get_tasks(self) -> list: Returns a list of all tasks in the order they were added. return self.tasks"},{"question":"Write a program which reads a line of text and prints the number of vowels (a, e, i, o, u) present in the text. The count should be case-insensitive and only consider alphabetic characters. Input A single line of text containing at least one character and no more than 100 characters. Output An integer representing the number of vowels in the text. Example Input Hello World Output 3","solution":"def count_vowels(text): Returns the number of vowels (a, e, i, o, u) in the given text. The count is case-insensitive. vowels = \'aeiou\' text = text.lower() count = sum(1 for char in text if char in vowels) return count"},{"question":"You are tasked with assembling a binary tree from its given inorder and preorder traversals. Inorder and preorder traversals of a binary tree can uniquely determine the structure of the tree, as no two distinct binary trees can have both the same inorder and preorder traversals. Write a function to construct the binary tree from its inorder and preorder traversal sequences and then return the root node of this tree. The tree node used for the tree is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of nodes in the binary tree. The second line contains `n` distinct integers representing the preorder traversal of the binary tree. The third line contains `n` distinct integers representing the inorder traversal of the binary tree. -----Output----- Output the root node of the constructed binary tree. -----Examples----- Sample Input 1: 7 3 9 20 15 7 8 12 9 3 15 20 8 12 7 Sample Output 1: TreeNode(3) ``` Tree structure: 3 / 9 20 / 15 7 / 8 12 ``` Sample Input 2: 3 2 1 3 1 2 3 Sample Output 2: TreeNode(2) ``` Tree Structure: 2 / 1 3 ```","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def buildTree(preorder, inorder): if not preorder or not inorder: return None root_val = preorder.pop(0) root = TreeNode(root_val) inorder_index = inorder.index(root_val) root.left = buildTree(preorder, inorder[:inorder_index]) root.right = buildTree(preorder, inorder[inorder_index + 1:]) return root"},{"question":"Real estate companies often provide developers with outlines of properties represented as buildings with varying heights. These heights are presented by skyline silhouettes, where each outline has multiple buildings with peak heights. Imagine a cityscape represented by a list of building outlines, where each building includes three pieces of information: the left x-coordinate, the right x-coordinate, and the height. Two buildings overlap if their x-coordinates intersect. We\'re given a list of these building outlines, and we want to simplify the skyline silhouette. Simplification involves merging overlapping building outlines into a single outline that maintains the highest height at any given x-coordinate. In other words, if two buildings overlap on the x-axis, the resultant silhouette should reflect the building with the maximum height at overlapped points. Write a program to determine the simplified form of the skyline silhouette by merging any overlapping buildings. If buildings only touch by their edges without any area of overlap between them, they should not be merged. Input The input is given in the following format. N l1 r1 h1 l2 r2 h2 :: lN rN hN The first line contains the integer N (1 ≤ N ≤ 500) representing the number of building outlines. The next N lines contain three integers each, li, ri, and hi (1 ≤ li < ri ≤ 1000, 1 ≤ hi ≤ 1000) representing the left x-coordinate, right x-coordinate, and height of the i-th building outline, respectively. Output Output the simplified form of the skyline silhouette in the same format as the input. Examples Input 3 1 3 4 2 5 3 6 8 5 Output 2 1 5 4 6 8 5 Input 4 1 2 1 2 4 2 3 5 3 5 6 1 Output 1 1 6 3","solution":"def simplify_skyline(buildings): This function simplifies the skyline silhouette by merging overlapping buildings while maintaining the highest height at any given x-coordinate. :param buildings: A list of tuples (left, right, height) representing the buildings. :return: A list of tuples (left, right, height) representing the simplified silhouette. if not buildings: return [] # Sort buildings by their left coordinate first, and if equal by their right coordinate buildings.sort() result = [] current_left, current_right, current_height = buildings[0] for left, right, height in buildings[1:]: if left <= current_right: # Overlapping if right > current_right: # Update current_right to the max of current right or new right current_right = right # Update current_height to the max height between overlapping buildings if height > current_height: current_height = height else: # No overlap result.append((current_left, current_right, current_height)) current_left, current_right, current_height = left, right, height result.append((current_left, current_right, current_height)) return result def process_skyline_input(input_string): This function processes the input string to read the buildings and return the simplified skyline silhouette. :param input_string: The input string with the building outlines in the specified format. :return: A list of tuples (left, right, height) representing the simplified skyline silhouette. lines = input_string.strip().split(\\"n\\") N = int(lines[0]) buildings = [] for i in range(1, N + 1): l, r, h = map(int, lines[i].split()) buildings.append((l, r, h)) return simplify_skyline(buildings)"},{"question":"You are provided with a collection of items, each having a specific weight and value. The task is to determine the maximum value of items that can be included in a knapsack of a particular capacity. Each item can be included in the knapsack only once, and you cannot break items to take a fraction of any item. # Input - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `W` (1 ≤ W ≤ 10000) — the number of items and the capacity of the knapsack. - Each of the next `n` lines contains two integers `weight` and `value` (1 ≤ weight, value ≤ 1000) describing the weight and value of an item. # Output Output a single integer, the maximum value that can be achieved within the given constraints. # Examples Example 1 **Input:** ``` 4 10 5 10 4 40 6 30 3 50 ``` **Output:** ``` 90 ``` Example 2 **Input:** ``` 3 50 10 60 20 100 30 120 ``` **Output:** ``` 220 ``` Example 3 **Input:** ``` 2 5 3 20 2 15 ``` **Output:** ``` 35 ``` # Note In the first example, the optimal choice is to take the items with weights 4 and 3, obtaining a total value of 90. In the second example, the optimal choice is to take all three items, with a total weight of 50 and value of 220. In the third example, the optimal solution involves taking both items, achieving a total value of 35.","solution":"def knapsack(n, W, items): Given the number of items n, the capacity of the knapsack W, and a list of tuples where each tuple contains (weight, value), this function returns the maximum value that can be achieved within the given constraints. dp = [0] * (W + 1) for i in range(n): weight, value = items[i] # Traverse the dp array backwards to ensure we do not use an item more than once for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W]"},{"question":"Kata Task You are a zookeeper, and you need to create a feeding schedule for your animals based on the number of days they have been in your care. You need to write a function that takes the number of days `days` and the type of animal `animalType` and returns the total amount of food (in kilograms) that should have been consumed by that animal type over that period. Rules for feeding amounts: - **Elephants**: intake 50 kg of food per day. - **Lions**: intake is as follows: - 3 kg for the first day - +1.5 kg increment each subsequent day (e.g., 4.5 kg on the second day, 6 kg on the third day, etc.) - **Monkeys**: intake is as follows: - 0.3 kg for the first day - +0.1 kg increment each subsequent day (e.g., 0.4 kg on the second day, 0.5 kg on the third day, etc.) Input: - `days` >= 1 - `animalType` is a string that can be either \\"elephant\\", \\"lion\\", or \\"monkey\\" The function should return the total food consumed by the specified animal over the given period. Example usage: ```python total_food(3, \\"elephant\\") -> 150 total_food(3, \\"lion\\") -> 13.5 total_food(3, \\"monkey\\") -> 1.2 ```","solution":"def total_food(days, animalType): Returns the total amount of food consumed by an animal type over a number of days. if animalType == \\"elephant\\": return days * 50 elif animalType == \\"lion\\": return 3 * days + 1.5 * (days * (days - 1)) / 2 elif animalType == \\"monkey\\": return 0.3 * days + 0.1 * (days * (days - 1)) / 2 else: raise ValueError(\\"Invalid animal type\\")"},{"question":"Problem In a coding competition, participants are awarded points based on their performance. Each participant’s final score is calculated based on the attempts they make and the time they take to solve each problem. The scoring system works as follows: 1. Each problem solved correctly on the first attempt gets 10 points. 2. If a participant fails on the first attempt but succeeds on the second attempt, they get 7 points. 3. If a participant fails on the first and second attempts but succeeds on the third attempt, they get 5 points. 4. If a participant fails on all attempts or does not attempt a problem, they get 0 points. 5. Additionally, each participant’s time taken for each problem also affects their score. For every minute taken to solve a problem, 1 point is deducted from their total score for that problem. If the deduction exceeds the points for that problem, their score for that problem becomes 0. Given these rules, compute the final scores for a list of participants. Input The input is given in the following format: N M a11 t11 a12 t12 ... a1M t1M a21 t21 a22 t22 ... a2M t2M ... aN1 tN1 aN2 tN2 ... aNM tNM Where: - N (1 ≤ N ≤ 100) is the number of participants. - M (1 ≤ M ≤ 10) is the number of problems - aij (0 ≤ aij ≤ 3) is the number of attempts participant i took to solve problem j. - tij (0 ≤ tij ≤ 100) is the time in minutes participant i took to solve problem j. Output Output the final scores of the participants on separate lines. Example Input 3 2 1 4 3 20 2 10 1 5 0 0 2 5 Output 15 11 2 Explanation In the first example, for the first participant: - For the first problem: 10 points (first attempt) - 4 (minutes) = 6 points. - For the second problem: 5 points (third attempt) - 20 (minutes) = 0 points. Total score: 6 + 0 = 6 points. For the second participant: - For the first problem: 7 points (second attempt) - 10 (minutes) = 0 points. - For the second problem: 10 points (first attempt) - 5 (minutes) = 5 points. Total score: 0 + 5 = 5 points. For the third participant: - For the first problem: 0 points (not attempted). - For the second problem: 7 points (second attempt) - 5 (minutes) = 2 points. Total score: 0 + 2 = 2 points.","solution":"def calculate_final_scores(N, M, data): scores = [] for i in range(N): total_score = 0 for j in range(M): attempts = data[i][2*j] time = data[i][2*j + 1] if attempts == 1: points = 10 elif attempts == 2: points = 7 elif attempts == 3: points = 5 else: points = 0 final_points = max(0, points - time) total_score += final_points scores.append(total_score) return scores"},{"question":"Sara is fascinated by numbers and sequences. She recently discovered a special sequence called \\"Alternating Prime Sequence\\". In an Alternating Prime Sequence, every pair of consecutive numbers has different parity (one is odd and the other is even) and both numbers in the pair are prime. Sara wants to know if it\'s possible to split a given list of numbers into two subsequences where each subsequence is an Alternating Prime Sequence. Write a program to help Sara determine if such a split is possible. -----Input:----- - First line will contain a single integer T, the number of test cases. - Each test case consists of two lines: first line contains an integer N (length of the sequence) and the second line contains N integers representing the sequence. -----Output:----- For each test case, print \\"YES\\" (without quotes) if the sequence can be split into two subsequences that are Alternating Prime Sequences, otherwise print \\"NO\\" (without quotes). -----Constraints----- - 1 leq T leq 10^4 - 1 leq N leq 50 - 1 leq text{Sequence Elements} leq 100 -----Sample Input:----- 2 6 3 2 5 11 7 13 4 4 6 8 10 -----Sample Output:----- YES NO -----Explanation:----- For the first test case: - The sequence [3, 2, 5, 11, 7, 13] has prime numbers and can be split as follows: - Subsequence 1: [3, 2, 5] (Odd, Even, Odd) - Subsequence 2: [11, 7, 13] (Odd, Odd, Odd) - Note: Both subsequences can be split into a valid Alternating Prime Sequence by the pairs 3-2, 2-5 in the first part and by considering only valid pairs in the second. For the second test case: - The sequence [4, 6, 8, 10] contains no prime numbers, hence it cannot be split into Valid Alternating Prime Sequences.","solution":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def can_split_to_alternating_prime_seq(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] sequence = test_cases[i][1] # Filter prime numbers from the sequence primes = [x for x in sequence if is_prime(x)] # If less than 2 primes, it can\'t form any alternating sequence if len(primes) < 2: results.append(\\"NO\\") continue # Check if we can split primes into two alternating sequences odd_count = sum(1 for x in primes if x % 2 != 0) even_count = len(primes) - odd_count # At minimum, each subsequence should have atleast 1 even and 1 odd prime to make alternating sequence if odd_count >= 1 and even_count >= 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A Caesar cipher is a type of substitution cipher in which each letter in the plaintext is shifted a certain number of places down the alphabet. For example, with a shift of 3, \'A\' would be replaced by \'D\', \'B\' would become \'E\', and so on. The method is named after Julius Caesar, who used it in his private correspondence. Write a program that decodes a given string that has been encoded using a Caesar cipher. The program will receive two inputs: a string representing the encoded message and an integer representing the shift used to encode it. The program should return the original message before it was encoded. Note that the encoded message will only contain uppercase letters and no spaces or punctuation.","solution":"def caesar_cipher_decode(encoded_message, shift): Decodes a given encoded string using the Caesar cipher technique. Parameters: encoded_message (str): The encoded message to be decoded. shift (int): The number of positions each letter in the plaintext was shifted. Returns: str: The original message before it was encoded. decoded_message = [] for char in encoded_message: # Calculate the original position in the alphabet original_position = (ord(char) - ord(\'A\') - shift) % 26 original_char = chr(original_position + ord(\'A\')) decoded_message.append(original_char) return \'\'.join(decoded_message)"},{"question":"In a remote village, there is a tradition in which the villagers plant trees in specific patterns to celebrate their harvest festival. There are N people in the village, and each person has their unique planting style, represented by integers from 0 to N-1. During the festival, each person plants a tree in a way that follows certain rules. The planting style of each person and the relationships between the different planting styles are given in a list. You need to determine if the relationships form a non-cyclical pattern and if it is possible to plant all trees according to the given rules. If it is possible, you should output \\"YES\\"; otherwise, output \\"NO\\". Input: The input consists of the following: ``` N M a1 b1 a2 b2 ... aM bM ``` Where: - N (1 ≤ N ≤ 200) denotes the number of villagers. - M (1 ≤ M ≤ N(N-1)/2) denotes the number of relationships between the villagers\' planting styles. - For each `i` (1 ≤ i ≤ M), `ai bi` denotes a relationship where the planting style `ai` must come before style `bi` (0 ≤ ai, bi < N, ai ≠ bi). Output: Output a single line containing \\"YES\\" if it is possible to plant all trees following the given rules without any cycles, otherwise output \\"NO\\". Examples: Input: ``` 3 2 0 1 1 2 ``` Output: ``` YES ``` Input: ``` 3 3 0 1 1 2 2 0 ``` Output: ``` NO ``` Input: ``` 4 2 2 3 1 3 ``` Output: ``` YES ```","solution":"def can_plant_trees_no_cycles(N, M, relationships): from collections import defaultdict, deque # Create adjacency list for the graph adjacency_list = defaultdict(list) indegree = [0] * N for a, b in relationships: adjacency_list[a].append(b) indegree[b] += 1 # Topological sort using Kahn\'s algorithm queue = deque([i for i in range(N) if indegree[i] == 0]) visited_count = 0 while queue: node = queue.popleft() visited_count += 1 for neighbor in adjacency_list[node]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) # If visited count equals N, then no cycle detected return \\"YES\\" if visited_count == N else \\"NO\\""},{"question":"A renowned toy manufacturer is launching a new product, which has a special feature that allows it to take actions based on particular commands. The toy is controlled through a sequence of instructions, similar to a simple interpreter or virtual machine. Each instruction modifies the toy\'s internal state, which, for simplicity, is a single integer value initially set to 0. The toy recognizes three types of instructions: 1) ADD X: Add the integer X to the current state. 2) SUB X: Subtract the integer X from the current state. 3) MUL X: Multiply the current state by the integer X. The toy\'s state must be updated sequentially based on the provided set of instructions. Your task is to determine the final state of the toy after executing all the instructions. Input: The first line contains an integer N, the number of instructions. N lines follow, each containing one of the three types of instructions described above. Output: Print the final state of the toy after all instructions have been executed. Constraints: 1 ≤ N ≤ 10^5 -10^5 ≤ X ≤ 10^5 for each ADD, SUB, or MUL operation SAMPLE INPUT 5 ADD 5 MUL 3 SUB 2 ADD 10 MUL -1 SAMPLE OUTPUT -21 Explanation Initially, the state is 0. Executing \\"ADD 5\\" modifies the state to 0 + 5 = 5. Executing \\"MUL 3\\" modifies the state to 5 * 3 = 15. Executing \\"SUB 2\\" modifies the state to 15 - 2 = 13. Executing \\"ADD 10\\" modifies the state to 13 + 10 = 23. Executing \\"MUL -1\\" modifies the state to 23 * -1 = -23.","solution":"def toy_final_state(n, instructions): state = 0 for instruction in instructions: cmd, x = instruction.split() x = int(x) if cmd == \\"ADD\\": state += x elif cmd == \\"SUB\\": state -= x elif cmd == \\"MUL\\": state *= x return state # Example usage: n = 5 instructions = [\\"ADD 5\\", \\"MUL 3\\", \\"SUB 2\\", \\"ADD 10\\", \\"MUL -1\\"] print(toy_final_state(n, instructions)) # Output: -23"},{"question":"This is a functional problem. Your task is to sort an array of integers in non-decreasing order and return the sorted array. Example: Input: 2 5 3 1 2 5 4 3 3 2 1 Output: 1 2 3 4 5 1 2 3 Input: The first line of input contains T denoting the number of test cases. For each test case, the first line contains a single positive integer N denoting the number of elements in the array. The next N lines contain integer elements of the array. Output: For each test case, return the sorted array of integers in non-decreasing order in a single line separated by spaces. Constraints: 1<=T<=100 1<=N<=10^4 -10^5<=ar[i]<=10^5","solution":"def sort_arrays(test_cases): Sorts the arrays in non-decreasing order for each test case. Parameters: test_cases (list of lists): List of test cases where each test case contains a list of integers. Returns: list of lists: List of sorted arrays. sorted_arrays = [] for arr in test_cases: sorted_arrays.append(sorted(arr)) return sorted_arrays def parse_input(input_str): Parse the input string to extract the number of test cases and the arrays. Parameters: input_str (str): The input string containing number of test cases, followed by integers in each test case. Returns: list of lists: List of extracted arrays from the input string. lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append(arr) index += 2 return test_cases def format_output(sorted_arrays): Formats the sorted arrays for output. Parameters: sorted_arrays (list of lists): List of sorted arrays. Returns: str: Formatted string of sorted arrays for each test case separated by newlines. return \\"n\\".join(\\" \\".join(map(str, arr)) for arr in sorted_arrays)"},{"question":"Tina has a string made up of lowercase English letters. She has a special operation where she can select any substring of the string and reverse it in place. Tina wants to check if it\'s possible to transform her string into a palindrome using zero or more of these operations. A palindrome is a string that reads the same backward as forward. Write a function that takes Tina\'s string and returns \\"YES\\" if she can transform it into a palindrome using the special reverse operation, otherwise return \\"NO\\". -----Input----- - A single string s consisting of lowercase English letters (1 le |s| le 100,000). -----Output----- - A single string \\"YES\\" if it\'s possible to transform the string into a palindrome, otherwise \\"NO\\". -----Example----- Input aabb Output YES Input abc Output NO Input racecar Output YES Explanation: - In the first example, \\"aabb\\" can be rearranged into \\"abba\\", which is a palindrome. - In the second example, \\"abc\\" can\'t be rearranged to form a palindrome. - The third example, \\"racecar\\" is already a palindrome.","solution":"def can_form_palindrome(s): Returns \\"YES\\" if the string can be transformed into a palindrome using zero or more substring reverse operations, otherwise returns \\"NO\\". from collections import Counter # Count the frequency of each character in the string char_counts = Counter(s) # Count how many characters have an odd frequency odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd frequency if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"A group of friends is planning a complex sequence of events for a treasure hunt. Each event is represented by an object with a unique identifier and a list of prerequisites, which are the identifiers of other events that must be completed before this event. Your task is to write a function `find_event_order(events)` that takes a list of event objects and returns a list of event IDs in the order they should be completed, such that all prerequisites for each event are satisfied before the event itself. If it is impossible to complete all events (i.e., there is a cycle in the prerequisites), the function should return an empty list. Each event is represented as a dictionary with two keys: - `id`: a unique identifier for the event (a string). - `prerequisites`: a list of identifiers (strings) of other events that must be completed before this event. # Example Input: ```python events = [ {\\"id\\": \\"event1\\", \\"prerequisites\\": [\\"event2\\", \\"event3\\"]}, {\\"id\\": \\"event2\\", \\"prerequisites\\": [\\"event4\\"]}, {\\"id\\": \\"event3\\", \\"prerequisites\\": []}, {\\"id\\": \\"event4\\", \\"prerequisites\\": []} ] ``` # Example Output: ```python find_event_order(events) # Output: [\\"event4\\", \\"event2\\", \\"event3\\", \\"event1\\"] ``` In this example, \\"event4\\" and \\"event3\\" can be completed first since they have no prerequisites. \\"event2\\" depends on \\"event4\\", and \\"event1\\" depends on \\"event2\\" and \\"event3\\". # Constraints: - The number of events will not exceed 1000. - The length of the `id` string for any event will not exceed 20 characters. - The total size of all prerequisite lists in the input will not exceed 10000 entries.","solution":"def find_event_order(events): from collections import defaultdict, deque event_map = {event[\'id\']: event[\'prerequisites\'] for event in events} indegree = {event[\'id\']: 0 for event in events} # Calculate the indegree (number of prerequisites) for each event for event in events: for prereq in event[\'prerequisites\']: indegree[event[\'id\']] += 1 # Initialize queue with events having no prerequisites queue = deque([event_id for event_id, degree in indegree.items() if degree == 0]) order = [] while queue: current_event = queue.popleft() order.append(current_event) for event in events: if current_event in event[\'prerequisites\']: indegree[event[\'id\']] -= 1 if indegree[event[\'id\']] == 0: queue.append(event[\'id\']) if len(order) == len(events): return order else: return []"},{"question":"Petya loves palindromic sequences. He often plays with two sequences of numbers and tries to find common subsequences that form palindromes. Given two sequences of numbers, Petya wants to find the longest common palindromic subsequence (LCPS) between them. A subsequence is obtained by deleting some or none of the elements from the original sequence without changing the order of the remaining elements. Help Petya to find the length of the longest common palindromic subsequence of the given two sequences. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the length of the first sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the first sequence. The third line contains an integer m (1 ≤ m ≤ 1000) — the length of the second sequence. The fourth line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 1000) — the elements of the second sequence. Output Print a single number — the length of the longest common palindromic subsequence of the given two sequences. If no such subsequence exists, print 0. Examples Input 4 1 2 3 4 4 3 2 1 3 Output 3 Input 3 1 2 3 3 4 5 6 Output 0 Input 5 1 2 3 4 3 5 3 4 3 2 1 Output 5","solution":"def lcs(X, Y): Helper function to find the length of Longest Common Subsequence (LCS) of sequences X and Y. n = len(X) m = len(Y) L = [[0] * (m + 1) for i in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0 or j == 0: L[i][j] = 0 elif X[i - 1] == Y[j - 1]: L[i][j] = L[i - 1][j - 1] + 1 else: L[i][j] = max(L[i - 1][j], L[i][j - 1]) return L[n][m] def longest_common_palindromic_subsequence(seq1, seq2): Returns the length of the Longest Common Palindromic Subsequence (LCPS) of the given two sequences. seq2_reversed = seq2[::-1] return lcs(seq1, seq2_reversed)"},{"question":"Given a non-negative integer n, you need to find if it\'s possible to rearrange the digits of n to form a multiple of 3. If it\'s possible, print \\"YES\\" along with the rearranged number that is a multiple of 3. Otherwise, print \\"NO\\". Input The input contains a single non-negative integer n (0 ≤ n ≤ 10^18). Output If it\'s possible, print \\"YES\\" in the first line followed by the rearranged number in the second line. If it\'s not possible, print \\"NO\\". Examples Input 123 Output YES 321 Input 5 Output NO","solution":"def is_multiple_of_3_possible(n): Determines if it\'s possible to rearrange digits of n to form a multiple of 3. Returns \\"YES\\" and the number if possible, otherwise \\"NO\\". # Convert the number to a string to easily manipulate digits digits = [int(d) for d in str(n)] # Check sum of digits for divisibility by 3 if sum(digits) % 3 != 0: return \\"NO\\" # Sort digits in descending order to form the largest possible number digits.sort(reverse=True) rearranged_number = int(\'\'.join(map(str, digits))) return f\\"YESn{rearranged_number}\\""},{"question":"Given a string S consisting of lowercase characters. The task is to find the length of the longest substring without repeating characters. Example 1: Input: S = \\"abcabcbb\\" Output: 3 Explanation: The longest substring without repeating characters is \\"abc\\", which has a length of 3. Example 2: Input: S = \\"bbbbb\\" Output: 1 Explanation: The longest substring without repeating characters is \\"b\\", which has a length of 1. Example 3: Input: S = \\"pwwkew\\" Output: 3 Explanation: The longest substring without repeating characters is \\"wke\\", which has a length of 3. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findLongestSubstring() which takes a string S as input and returns the length of the longest substring without repeating characters. Expected Time Complexity: O(N) Expected Space Complexity: O(M), where M is the number of unique characters in S. Constraints: 1 <= |S| <= 1000 Hints: 1. Use a sliding window approach to keep track of the current substring without repeating characters. 2. Use a set or dictionary to check and store the characters within the current window.","solution":"def findLongestSubstring(S): Returns the length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for end, char in enumerate(S): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = end longest = max(longest, end - start + 1) return longest"},{"question":"Write a function `minimum_cost_to_connect_houses(n, pipes)` that finds the minimum cost to provide water to all houses. There are `n` houses and `m` pipes where each `pipe[i] = [house1, house2, cost]` denotes a pipe that can connect house1 and house2 with a cost. You need to construct a network of pipes to connect all the houses with minimum total cost. If it is impossible to connect all the houses, return -1. Input format - The first line contains an integer n, the number of houses. - The second line contains an integer m, the number of pipes. - The next m lines contain three integers each, `house1`, `house2`, and `cost`, describing the available pipes. Output format - Return the minimum cost to connect all houses, or -1 if it is impossible. Constraints - 2 ≤ n ≤ 1000 - 1 ≤ m ≤ 2000 - 1 ≤ cost ≤ 10000 Example Input 4 4 1 2 1 2 3 4 3 4 2 1 4 3 Example Output 6 Explanation The optimal way to connect the houses is: - Connect house 1 to house 2 with cost 1 - Connect house 3 to house 4 with cost 2 - Connect house 1 to house 4 with cost 3 Total minimum cost to connect all the houses is 6.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_cost_to_connect_houses(n, pipes): # Sorting edges based on cost pipes.sort(key=lambda x: x[2]) parent = [i for i in range(n)] rank = [0] * n mst_cost = 0 edges_used = 0 for pipe in pipes: house1, house2, cost = pipe house1 -= 1 house2 -= 1 if find(parent, house1) != find(parent, house2): union(parent, rank, house1, house2) mst_cost += cost edges_used += 1 if edges_used == n - 1: return mst_cost return -1"},{"question":"Create a function that evaluates the expression of a given string containing a mathematical expression with only non-negative integers and the operators +, -, *, /. Use the integer division for / operator. The function should parse the string and return the calculated result. Examples ```python evaluate(\\"3+5*2\\") = 13 # Evaluates as 3 + (5 * 2) = 13 evaluate(\\"10+20/4\\") = 15 # Evaluates as 10 + (20 / 4) = 15 # Integer division is used evaluate(\\"2*3+4/2\\") = 8 # Evaluates as (2 * 3) + (4 / 2) = 8 ``` *Hint: You may need to consider the order of operations (precedence of operators).*","solution":"def evaluate(expression): def parse_expression(expression): num_stack = [] op_stack = [] precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} i = 0 while i < len(expression): if expression[i].isdigit(): num = 0 while i < len(expression) and expression[i].isdigit(): num = num * 10 + int(expression[i]) i += 1 num_stack.append(num) i -= 1 elif expression[i] in precedence: while (op_stack and precedence[op_stack[-1]] >= precedence[expression[i]]): apply_operation(num_stack, op_stack) op_stack.append(expression[i]) i += 1 while op_stack: apply_operation(num_stack, op_stack) return num_stack[0] def apply_operation(num_stack, op_stack): if not num_stack or len(num_stack) < 2: return b = num_stack.pop() a = num_stack.pop() op = op_stack.pop() if op == \'+\': num_stack.append(a + b) elif op == \'-\': num_stack.append(a - b) elif op == \'*\': num_stack.append(a * b) elif op == \'/\': num_stack.append(a // b) return parse_expression(expression)"},{"question":"Alice has recently become fascinated with palindromes and decided to create her own game. The rules of the game are simple: given a string `s`, you can remove any number of characters from the string, including none, to form a palindrome. Alice wants to find out the maximum length of a palindromic subsequence that can be obtained from the string. A palindromic subsequence is a subsequence of the string that reads the same forwards and backwards. Input The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the length of the string `s`. The second line contains the string `s` of length `n`, consisting only of lowercase English letters. Output Print the maximum length of a palindromic subsequence that can be obtained from the string. Examples Input 7 character Output 5 Input 6 abacdg Output 3 Note In the first example, one of the longest palindromic subsequences is \\"carac\\" of length 5. In the second example, one of the longest palindromic subsequences is \\"aca\\" of length 3.","solution":"def longest_palindromic_subsequence(s): Given a string s, returns the length of the longest palindromic subsequence. n = len(s) dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the dp array for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp[0][n - 1]"},{"question":"Johnny has a peculiar friend named Alice who loves sorting as much as Johnny loves bitwise operations. She enjoys sorting arrays in lexicographical order just for fun. One day, she came up with a new challenge for Johnny. She gave Johnny an array of lowercase strings and asked him to find the longest common prefix among the strings after sorting them lexicographically. Help Johnny find the longest common prefix among the strings in the array when sorted lexicographically. Formally, given an array of lowercase strings, find the longest common prefix among the strings after sorting them lexicographically. -----Input----- The first line of input contains a single integer t (1 leq t leq 100), the number of test cases. In the next lines, t test cases follow. Each of them consists of two lines. The first line contains a single integer n (1 leq n leq 100) denoting the number of strings in the array. The second line contains n space-separated lowercase strings with lengths between 1 and 100 inclusive. -----Output----- Print t lines; i-th line should contain the answer to the i-th test case, the longest common prefix among the lexicographically sorted strings. If there is no common prefix, print an empty string. -----Example----- Input 3 3 flower flow flight 4 dog racecar car dove 2 apple apron Output fl d ap -----Note----- In the first test case, after sorting lexicographically, the array becomes [\\"flight\\", \\"flow\\", \\"flower\\"]. The longest common prefix is \\"fl\\". In the second test case, after sorting lexicographically, the array becomes [\\"car\\", \\"dog\\", \\"dove\\", \\"racecar\\"]. There is no common prefix among all strings. In the third test case, after sorting lexicographically, the array becomes [\\"apple\\", \\"apron\\"]. The longest common prefix is \\"ap\\".","solution":"def longest_common_prefix(sorted_strings): Returns the longest common prefix among the lexicographically sorted array of strings. if not sorted_strings: return \\"\\" # Take the first string in the sorted list as the base prefix = sorted_strings[0] for string in sorted_strings: prefix_length = min(len(prefix), len(string)) # Compare characters of base string and current string until they differ i = 0 while i < prefix_length and prefix[i] == string[i]: i += 1 # Update the prefix to the common prefix found with the current string prefix = prefix[:i] if not prefix: return \\"\\" return prefix def find_longest_common_prefix(t, test_cases): Processes each test case to find the longest common prefix of the sorted strings. results = [] for i in range(t): n = test_cases[i][0] strings = test_cases[i][1] strings.sort() # Sort strings lexicographically results.append(longest_common_prefix(strings)) return results"},{"question":"Given an integer n, return a list of all prime numbers up to and including n. A prime number is a natural number greater than 1 that is not divisible by any number other than 1 and itself. The order in the output list should be from smallest to largest prime. Example 1: Input: n = 10 Output: [2, 3, 5, 7] Explanation: The prime numbers less than or equal to 10 are 2, 3, 5, and 7. Example 2: Input: n = 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] Explanation: The prime numbers less than or equal to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Your Task: You don\'t need to read input or print anything. Complete the function getPrimeNumbers() which takes n as input and returns a list of all prime numbers up to and including n. Expected Time Complexity: O(n * sqrt(n)) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 1000","solution":"import math def getPrimeNumbers(n): Returns a list of all prime numbers up to and including n. primes = [] if n < 2: return primes # Create a boolean array \\"prime[0..n]\\" and initialize all entries it as true. prime = [True for _ in range(n+1)] p = 2 while p * p <= n: if prime[p] == True: for i in range(p * p, n + 1, p): prime[i] = False p += 1 for p in range(2, n + 1): if prime[p]: primes.append(p) return primes"},{"question":"You are given a binary tree represented as a list of integers, where each element corresponds to a node value in a level-order traversal. Null values indicating the absence of children are represented by `None`. Write a function named `collect_leaves` that takes the binary tree as input and returns a list of the values of all the leaf nodes, ordered from left to right. A leaf node is one that has no children. -----Input----- An array of integers, where each value represents a node in a binary tree using level-order traversal. Each node value is given by an integer, and missing children are represented by `None`. The length of the array is between 1 and 10^4. -----Output----- A list of integers representing the values of all the leaf nodes from left to right. -----Example----- Input [1, 2, 3, None, 5, None, 4] Output [5, 4] -----Explanation----- In the example, the binary tree structure is: ``` 1 / 2 3 5 4 ``` The leaf nodes are 5 and 4, so the output is `[5, 4]`. -----Note----- The input array `[1, 2, 3, None, 5, None, 4]` translates to this binary tree: - Level 0: root with value 1 - Level 1: left child 2, right child 3 - Level 2: None as left child of 2, 5 as right child of 2; None as left child of 3, 4 as right child of 3","solution":"def collect_leaves(arr): if not arr: return [] from collections import deque result = [] nodes = deque([(0, arr[0])]) while nodes: i, value = nodes.popleft() if value is None: continue left_index = 2 * i + 1 right_index = 2 * i + 2 has_left = left_index < len(arr) and arr[left_index] is not None has_right = right_index < len(arr) and arr[right_index] is not None if not has_left and not has_right: result.append(value) if has_left: nodes.append((left_index, arr[left_index])) if has_right: nodes.append((right_index, arr[right_index])) return result"},{"question":"Given an integer array `arr`, your task is to create a function that rearranges the array such that every `i-th` (0-based index) position contains the `i-th` smallest element of `arr`. The task is to rearrange the array in-place without using extra space for another array or collection, but temporary variables for swapping are allowed. For example: Input: [3, 5, 2, 1, 6] Output: [1, 2, 3, 5, 6] Input: [10, 7, 9, 3, 2] Output: [2, 3, 7, 9, 10] Make sure to handle edge cases and large arrays efficiently. Good luck!","solution":"def rearrange_in_place(arr): Rearranges the array in-place such that every i-th position contains the i-th smallest element of arr. Args: arr (list): The list of integers to be rearranged. Returns: None: The function modifies the list in-place. arr.sort()"},{"question":"Nathan is playing a card game with his friends. The rules of the game are as follows: - There are N cards arranged in a line, and each card has a number written on it. - Nathan and his friends take turns one by one to pick a card from either end (leftmost or rightmost). - Each player must pick exactly one card on their turn. - The goal is to maximize the sum of the numbers on the cards collected by each player. - Nathan goes first, and all players play optimally. Help Nathan determine the maximum sum of the numbers on the cards he can achieve if he plays first and everyone else plays optimally. -----Input----- - The first line contains a single integer N, the number of cards. - The second line contains N space-separated integers, where the ith integer represents the number on the ith card. -----Output----- - The maximum sum Nathan can achieve if he plays first. -----Constraints----- - 1 <= N <= 1000 - 1 <= number on each card <= 10^6 -----Example----- Input: 4 1 2 9 4 Output: 10 Explanation: Nathan picks 4 first, his friend picks 9, Nathan picks 2, and his friend picks 1. Nathan\'s sum is 4 + 2 = 6. Alternatively, Nathan picks 1 first, his friend picks 4, Nathan picks 9, and his friend picks 2. Nathan\'s sum is 1 + 9 = 10. The optimal strategy gives Nathan a maximum sum of 10.","solution":"def max_sum(cards): Returns the maximum sum Nathan can achieve if he plays first and everyone plays optimally. N = len(cards) # dp[i][j] will be the maximum sum Nathan can get if it\'s his turn to play with the cards in range [i, j] dp = [[0]*N for _ in range(N)] for gap in range(N): for i in range(N - gap): j = i + gap if i == j: dp[i][j] = cards[i] else: # Two choices for Nathan: pick leftmost (cards[i]) or rightmost (cards[j]) # dp[i+1][j] is the outcome if Nathan picks cards[i] # dp[i][j-1] is the outcome if Nathan picks cards[j] pick_i = cards[i] + min(dp[i+2][j] if i+2 <= j else 0, dp[i+1][j-1] if i+1 <= j-1 else 0) pick_j = cards[j] + min(dp[i+1][j-1] if i+1 <= j-1 else 0, dp[i][j-2] if i <= j-2 else 0) dp[i][j] = max(pick_i, pick_j) return dp[0][N-1]"},{"question":"Your task is to compress a given string using Run-Length Encoding (RLE). In RLE, consecutive occurrences of the same character are replaced with a single instance of the character followed by the number of occurrences. For example, the string \'aaabbcaa\' would be compressed to \'a3b2c1a2\'. Write a program that reads a string and outputs its Run-Length Encoded version. Constraints * The length of the string ≤ 200 Input The input consists of a single dataset given as follows: A string which represents the data to be compressed Output Print the Run-Length Encoded version of the string. Example Input aaabbcaa Output a3b2c1a2","solution":"def run_length_encode(input_string): Encodes the input_string using Run-Length Encoding (RLE). Parameters: input_string (str): The string to be encoded Returns: str: The RLE encoded string if not input_string: return \\"\\" encoded_string = [] count = 1 previous_char = input_string[0] for char in input_string[1:]: if char == previous_char: count += 1 else: encoded_string.append(f\\"{previous_char}{count}\\") previous_char = char count = 1 encoded_string.append(f\\"{previous_char}{count}\\") return \'\'.join(encoded_string)"},{"question":"You are given a series of operations to be performed on an array of integers initially set to zero. Each operation is defined by three integers `a`, `b`, and `k`, which means adding the value `k` to all elements of the array whose indexes are between `a` and `b` (inclusive). You need to determine the maximum value in the array after performing all the operations. -----Input----- The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^7, 1 ≤ m ≤ 10^5), representing the size of the array and the number of operations, respectively. The next `m` lines each contain three integers `a`, `b`, and `k` (1 ≤ a ≤ b ≤ n, 1 ≤ k ≤ 10^9), representing an operation that adds `k` to each element of the array from index `a` to `b`. -----Output----- Print a single integer representing the maximum value in the array after applying all the operations. -----Examples----- Input 5 3 1 2 100 2 5 100 3 4 100 Output 200 Input 10 2 1 5 10 6 10 15 Output 15 -----Note----- In the first example, the sequence of operations will make the array [100, 200, 200, 100, 100]. The maximum value is 200. In the second example, the array after the operations will be [10, 10, 10, 10, 10, 15, 15, 15, 15, 15]. The maximum value is 15.","solution":"def find_max_value(n, operations): Returns the maximum value in the array after performing the given operations. Parameters: - n: int, the size of the array - operations: a list of tuples (a, b, k) representing the operations Each tuple (a, b, k) means adding k to each element of the array with indexes between a and b (inclusive). Returns: - int, the maximum value in the array after performing all the operations arr = [0] * (n + 1) for a, b, k in operations: arr[a] += k if b + 1 <= n: arr[b + 1] -= k max_value = 0 current_value = 0 for value in arr: current_value += value if current_value > max_value: max_value = current_value return max_value"},{"question":"The local bakery is preparing an arrangement of cakes for a special event. They want the cakes to be placed in a visually appealing triangular formation. The bakery has a specific number of cakes, N, to be arranged, and they need your help to write a program to visualize the arrangement. -----Input:----- - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case contains a single line of input, one integer N. -----Output:----- For each test case, display the triangular arrangement of cakes using the symbol `C`. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 15 -----Sample Input:----- 3 2 4 6 -----Sample Output:----- C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C C","solution":"def print_cakes_triangle(T, test_cases): results = [] for N in test_cases: count = 0 result = [] for i in range(1, N+1): row = \\" \\".join([\\"C\\"] * i) result.append(row) count += 1 if count == N: break results.append(\\"n\\".join(result)) return results def format_output(results): return \\"nn\\".join(results) # Example usage: if __name__ == \\"__main__\\": T = 3 test_cases = [2, 4, 6] results = print_cakes_triangle(T, test_cases) output = format_output(results) print(output)"},{"question":"You are given a list of students and their marks in three subjects: Mathematics, Science, and Literature. Your task is to process this data and determine the grade of each student based on the average of their marks. The grading criteria are as follows: - Average marks >= 90: Grade \'A\' - 80 <= Average marks < 90: Grade \'B\' - 70 <= Average marks < 80: Grade \'C\' - 60 <= Average marks < 70: Grade \'D\' - Average marks < 60: Grade \'F\' Write a function `assign_grades` that takes a list of dictionaries where each dictionary represents a student with the following format: ```python { \'name\': student_name, \'math\': math_marks, \'science\': science_marks, \'literature\': literature_marks } ``` and returns a new list of dictionaries with each student\'s name and their corresponding grade. # Input A list of dictionaries where each dictionary represents a student\'s name and their marks in Mathematics, Science, and Literature. # Output A list of dictionaries, each containing the student\'s name and their grade. # Example ```python input_data = [ {\'name\': \'Alice\', \'math\': 85, \'science\': 90, \'literature\': 88}, {\'name\': \'Bob\', \'math\': 78, \'science\': 74, \'literature\': 80}, {\'name\': \'Charlie\', \'math\': 65, \'science\': 60, \'literature\': 58}, ] assign_grades(input_data) ``` Expected output: ```python [ {\'name\': \'Alice\', \'grade\': \'B\'}, {\'name\': \'Bob\', \'grade\': \'C\'}, {\'name\': \'Charlie\', \'grade\': \'D\'}, ] ``` # Notes - Ensure that all marks are valid integers between 0 and 100. - The average should be calculated as the mean of the three subject marks. - You may assume that the input list will always have at least one student.","solution":"def assign_grades(students): Assign grades to students based on the average of their marks in three subjects. Parameters: students (list): A list of dictionaries where each dictionary contains a student\'s name and their marks in mathematics, science, and literature. Returns: list: A new list of dictionaries where each dictionary contains the student\'s name and their grade. def calculate_grade(avg): if avg >= 90: return \'A\' elif 80 <= avg < 90: return \'B\' elif 70 <= avg < 80: return \'C\' elif 60 <= avg < 70: return \'D\' else: return \'F\' result = [] for student in students: avg = (student[\'math\'] + student[\'science\'] + student[\'literature\']) / 3 grade = calculate_grade(avg) result.append({\'name\': student[\'name\'], \'grade\': grade}) return result"},{"question":"Eve and her friends are playing a game with a string of length n. They each take turns choosing a contiguous substring from the given string and spell it out loud. Once a substring has been spelled out, it cannot be chosen again in any subsequent turn. Eve, being very strategic, wants to calculate how many distinct substrings exist in the string before they start the game. Write a program to help Eve count the total number of distinct substrings in the given string modulo p, where p is a large prime number. ------Input------ The input consists of two lines: 1. The first line contains two space-separated integers n (1 leq n leq 1000) and p (10^8 leq p leq 10^9+7, p is a prime number), where n is the length of the string and p is a large prime modulus. 2. The second line contains a single string of length n composed of lowercase English letters. ------Output------ Output a single integer, which is the number of distinct substrings of the given string modulo p. ------Examples------ Sample Input 1: 4 1000000007 abcd Sample Output 1: 10 Sample Input 2: 5 1000000007 aaaaa Sample Output 2: 5","solution":"def count_distinct_substrings(n, p, s): Counts the number of distinct substrings in a given string s modulo p. Parameters: n (int): Length of the string s. p (int): The prime modulus. s (str): The input string. Returns: int: Number of distinct substrings modulo p. substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) % p # Example of how to call the function # print(count_distinct_substrings(4, 1000000007, \\"abcd\\")) # Expected output: 10 # print(count_distinct_substrings(5, 1000000007, \\"aaaaa\\")) # Expected output: 5"},{"question":"In a town, there are n intersections, connected by m bidirectional streets. Each street has a length, represented by an integer. The mayor wants to set up a new public transportation system, and to start off, they need to determine the shortest possible path between two given intersections. You need to help the mayor determine this. Input The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10^5) - the number of intersections and the number of streets respectively. The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing a street between intersections u and v with length w. It\'s guaranteed that there are no self-loops or multiple streets between the same pair of intersections. The last line contains two integers s and t (1 ≤ s, t ≤ n) - the source and destination intersections. Output Print a single integer representing the length of the shortest path between intersection s and intersection t. If there is no path, print `-1`. Examples Input 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 2 1 5 Output 8 Input 4 2 1 2 1 3 4 2 1 4 Output -1 Note In the first example, the shortest path from 1 to 5 is 1->2->3->5 with length 2+1+3=6. In the second example, there is no path from intersection 1 to intersection 4. Therefore the output is `-1`.","solution":"import heapq def shortest_path(n, m, streets, s, t): Finds the shortest path between intersections s and t using Dijkstra\'s algorithm. :param n: Number of intersections :param m: Number of streets :param streets: List of tuples (u, v, w) representing streets between intersections u and v with length w :param s: Source intersection :param t: Target intersection :return: Length of the shortest path from s to t, or -1 if no such path exists graph = {i: [] for i in range(1, n+1)} for u, v, w in streets: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, s)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[s] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[t] if distances[t] != float(\'inf\') else -1"},{"question":"Given a string, find the longest substring with all distinct characters. Input The input consists of one line containing a string of characters \'a\'-\'z\', \'A\'-\'Z\' and digits \'0\'-\'9\'. The length of the string is between 1 and 100 characters, inclusive. Output Output the length of the longest substring with all distinct characters. Examples Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3","solution":"def length_of_longest_substring(s): Returns the length of the longest substring with all distinct characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. The mapping is as follows: ``` 2 -> \\"abc\\" 3 -> \\"def\\" 4 -> \\"ghi\\" 5 -> \\"jkl\\" 6 -> \\"mno\\" 7 -> \\"pqrs\\" 8 -> \\"tuv\\" 9 -> \\"wxyz\\" ``` Implement a function: ```python def letter_combinations(digits): ``` The function will take in a single parameter: - `digits` (str): a string containing the digits between 2 to 9. The function should return a list of strings (List[str]) representing all possible letter combinations that the number could represent. The order of the letters in the output does not matter. # Example ```python assert letter_combinations(\\"23\\") == [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] assert letter_combinations(\\"\\") == [] assert letter_combinations(\\"2\\") == [\\"a\\",\\"b\\",\\"c\\"] ``` # Constraints * `0 <= digits.length <= 4` * `digits[i]` is a digit in the range [\'2\', \'9\'].","solution":"def letter_combinations(digits): if not digits: return [] digit_to_letters = { \\"2\\": \\"abc\\", \\"3\\": \\"def\\", \\"4\\": \\"ghi\\", \\"5\\": \\"jkl\\", \\"6\\": \\"mno\\", \\"7\\": \\"pqrs\\", \\"8\\": \\"tuv\\", \\"9\\": \\"wxyz\\" } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return letters = digit_to_letters[digits[index]] for letter in letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"Write a function that takes a string `s` and a list of words `words`, and returns the starting indices of all substrings in `s` that are a concatenation of each word in `words` exactly once and without any intervening characters. The words consist of lowercase English letters. Each word in `words` has the same length. Your function should return the indices in ascending order. **Examples:** ```python findSubstring(\\"barfoothefoobarman\\", [\\"foo\\",\\"bar\\"]) => [0,9] findSubstring(\\"wordgoodgoodgoodbestword\\", [\\"word\\",\\"good\\",\\"best\\",\\"word\\"]) => [] findSubstring(\\"barfoofoobarthefoobarman\\", [\\"bar\\",\\"foo\\",\\"the\\"]) => [6,9,12] ``` **Notes:** 1. The length of `s` will be between 1 and 10,000. 2. The length of `words` will be between 1 and 5000. 3. The length of each word in `words` will be between 1 and 100. 4. The expected time complexity is O(n) where n is the length of string `s`.","solution":"from collections import Counter def findSubstring(s, words): Finds the starting indices of all substrings in `s` that are a concatenation of each word in `words` exactly once and without any intervening characters. if not s or not words or not words[0]: return [] word_len = len(words[0]) word_count = len(words) substring_len = word_len * word_count total_len = len(s) if total_len < substring_len: return [] word_map = Counter(words) result_indices = [] for i in range(word_len): left, right = i, i tmp_map = Counter() while right + word_len <= total_len: word = s[right:right + word_len] right += word_len if word in word_map: tmp_map[word] += 1 while tmp_map[word] > word_map[word]: tmp_map[s[left:left + word_len]] -= 1 left += word_len if right - left == substring_len: result_indices.append(left) else: tmp_map.clear() left = right return result_indices"},{"question":"Ben and Susan are playing a number game. They have an array of integers and they take turns in removing exactly k consecutive elements from the array. Ben always goes first. The game ends when there are fewer than k elements left in the array and the player who cannot make a move loses the game. Both players play optimally. Determine who will be the winner given the array and k. Input The input consists of two lines: - The first line contains two space-separated integers n and k (1 ≤ k ≤ n ≤ 100), where n is the length of the array. - The second line contains n space-separated integers representing the elements of the array. Output Output a single word, either \\"Ben\\" or \\"Susan\\", denoting the winner of the game if both players play optimally. Example Input 5 2 1 2 3 4 5 Output Ben Input 6 3 1 2 3 4 5 6 Output Susan","solution":"def find_winner(n, k, array): Determines the winner of the game given the parameters. if n % k == 0: return \\"Susan\\" else: return \\"Ben\\" Explanation: 1. If the number of elements n in the array is exactly divisible by the number k of elements to be removed in each move, Susan will be able to make the last move and Ben will have no more elements left to remove in his turn. Hence, Susan wins. 2. Otherwise, Ben will always be able to make the last move. Therefore, Ben wins. # Example usage: # print(find_winner(5, 2, [1, 2, 3, 4, 5])) # Ben # print(find_winner(6, 3, [1, 2, 3, 4, 5, 6])) # Susan # print(find_winner(7, 4, [1, 2, 3, 4, 5, 6, 7])) # Ben"},{"question":"In a coding competition, a participant needs to solve a problem involving arrays. You are given an array of integers of length N. Your task is to find a subarray of length exactly K that has the maximum possible sum. A subarray is a contiguous part of an array. For example, given the array [3, 2, 1, 4, 5] and K = 2, valid subarrays of length K are [3, 2], [2, 1], [1, 4] and [4, 5]. -----Constraints----- - 1 leq K leq N leq 10^5 - -10^9 leq a_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N K a_1 a_2 a_3 ... a_N -----Output----- Print the maximum possible sum of a subarray of length K. -----Sample Input----- 6 3 1 2 3 4 5 6 -----Sample Output----- 15 The subarray [4, 5, 6] has the maximum sum 15.","solution":"def max_sum_subarray_of_length_k(N, K, arr): Finds the maximum possible sum of a subarray of length K. current_sum = sum(arr[:K]) max_sum = current_sum for i in range(K, N): current_sum = current_sum + arr[i] - arr[i - K] max_sum = max(max_sum, current_sum) return max_sum if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) K = int(data[1]) arr = list(map(int, data[2:])) print(max_sum_subarray_of_length_k(N, K, arr))"},{"question":"A palindrome is a string that reads the same backward as forward. You are given a 5-letter string S consisting of lowercase alphabetical characters. Determine if S is a palindrome. -----Constraints----- - S consists of exactly 5 lowercase alphabetical characters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- If S is a palindrome, print Yes; otherwise, print No. -----Sample Input----- radar -----Sample Output----- Yes The string S is a palindrome, since it reads the same backwards \'radar\'.","solution":"def is_palindrome(s): Checks if the given 5-letter string s is a palindrome. Parameters: s (str): A 5-letter string. Returns: str: \\"Yes\\" if s is a palindrome, otherwise \\"No\\". if s == s[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given an integer array `nums` consisting of `n` elements, and an integer `k`. You are tasked with creating a partition of the array into `k` non-empty contiguous subarrays such that the sum of the maximum of each subarray is minimized. A contiguous subarray is a subarray where the elements are consecutive elements from the original array. Return the minimized sum of the maximum values from each subarray. Example 1: Input: nums = [1, 3, 2, 5, 8, 7, 4], k = 3 Output: 12 Explanation: One optimal way to partition the array is [1, 3, 2] [5, 8] [7, 4]. The sum of maximums from each subarray is 3 + 8 + 4 = 15. On the other hand, partitioning it as [1, 3] [2, 5, 8] [7, 4], the sum of maximums from each subarray is 3 + 8 + 4 = 15 which is also the minimum that can be achieved. Example 2: Input: nums = [10, 1, 2, 7, 4, 9], k = 2 Output: 19 Explanation: One optimal way to partition the array is [10] [1, 2, 7, 4, 9]. The sum of maximums from each subarray is 10 + 9 = 19. Example 3: Input: nums = [3, 2, 1, 6, 4, 5], k = 4 Output: 15 Explanation: One optimal way to partition the array is [3] [2] [1] [6, 4, 5]. The sum of maximums from each subarray is 3 + 2 + 1 + 6 = 12. Constraints: - 1 <= nums.length <= 10^4 - 1 <= nums[i] <= 10^4 - 1 <= k <= nums.length","solution":"def minimize_sum_of_maximums(nums, k): import math def can_partition(mid): partitions = 1 current_max = -math.inf for num in nums: current_max = max(current_max, num) if current_max > mid: partitions += 1 current_max = num if partitions > k: return False return True left, right = max(nums), sum(nums) while left < right: mid = (left + right) // 2 if can_partition(mid): right = mid else: left = mid + 1 return left"},{"question":"Task You are given a list of integers representing the heights of buildings on a street. You need to determine the number of buildings that have an unobstructed view to the right. A building has an unobstructed view if there are no taller buildings to its right. Example For `heights = [3, 7, 8, 3, 6, 1]`, the output should be `3`. Input/Output - `[input]` integer array `heights` Constraints: `1 ≤ heights.length ≤ 100,` `1 ≤ heights[i] ≤ 1000.` - `[output]` an integer The number of buildings that have an unobstructed view to the right.","solution":"def count_unobstructed_views(heights): Determines the number of buildings that have an unobstructed view to the right. Parameters: heights (list): A list of integers representing the heights of the buildings. Returns: int: The number of buildings with unobstructed views to the right. count = 0 max_height_to_the_right = 0 # Traverse the list from right to left for height in reversed(heights): if height > max_height_to_the_right: count += 1 max_height_to_the_right = height return count"},{"question":"You are given a linked list of integers. The linked list is considered circular if the last node points to the first node. Your task is to determine if a given linked list is circular or not. -----Input----- The first line contains one integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines. The first line contains one integer n (1 le n le 1000) — the number of nodes in the linked list. The second line contains n integers — the values of the nodes in the linked list. For each test case, the linked list is provided with the assumption that the list ends at the last integer provided. -----Output----- For each test case, print YES if the linked list is circular, or NO otherwise. You may print each letter in any case (YES, yes, Yes will all be recognized as positive answer, NO, no and nO will all be recognized as negative answer). -----Examples----- Input 3 5 1 2 3 4 5 3 7 8 9 4 10 20 30 40 Output NO NO NO -----Note----- None","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def is_circular_linked_list(head): Function to check if a linked list is circular. :param head: ListNode, the head of the linked list :return: True if the linked list is circular, False otherwise if not head: return False slow_ptr = head fast_ptr = head # Using Floyd\'s Tortoise and Hare algorithm to detect cycle while fast_ptr is not None and fast_ptr.next is not None: slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next if slow_ptr == fast_ptr: return True return False # Helper function to create linked list from list of values def create_linked_list(values): if not values: return None head = ListNode(values[0]) current = head for val in values[1:]: current.next = ListNode(val) current = current.next return head def check_circular_linked_lists(test_cases): results = [] for n, values in test_cases: head = create_linked_list(values) if n > 0: current = head while current.next: current = current.next # If the last node points to the first node if current.val == head.val: # Assuming circular means last node points to first node current.next = head if is_circular_linked_list(head): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers. You need to fold the array by adding corresponding elements from both ends towards the center and find the resulting array. The process of folding should continue until you end up with only one element. -----Input----- - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of elements in the array. - The second line of each test case contains N space-separated integers representing the elements of the array. -----Output----- For each test case, print a single integer which is the remaining element after folding the array. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10,000 - -10^4 le a_i le 10^4 for each valid i -----Example Input----- 2 5 1 2 3 4 5 4 -1 -2 -3 -4 -----Example Output----- 15 -10 -----Explanation----- In the first test case, the folding process is as follows: - Fold [1, 2, 3, 4, 5] to get [6, 6, 3] - Fold [6, 6, 3] to get [9, 6] - Fold [9, 6] to get [15] In the second test case, the folding process is as follows: - Fold [-1, -2, -3, -4] to get [-5, -5] - Fold [-5, -5] to get [-10]","solution":"def fold_array(arr): Folds the array by adding corresponding elements from both ends towards the center until one element is left. while len(arr) > 1: new_arr = [] for i in range((len(arr) + 1) // 2): if i == len(arr) - i - 1: # Handle middle element in an odd-length array new_arr.append(arr[i]) else: new_arr.append(arr[i] + arr[-i-1]) arr = new_arr return arr[0] def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(fold_array(arr)) return results"},{"question":"You are given a set of n servers and m connections (representing communication links), forming an undirected graph. Each server has a unique integer ID ranging from 1 to n. You need to identify the minimum number of additional connections required to make the graph connected. A graph is connected if there is a path between any two distinct servers. -----Input----- The first line contains two integers n and m (1 leq n leq 10^5, 0 leq m leq 2 cdot 10^5) – the number of servers and the number of existing connections. Each of the next m lines contains two integers a_i and b_i (1 leq a_i, b_i leq n) indicating that there is a connection between servers a_i and b_i. It is guaranteed that there are no self-loops and no multiple edges. -----Output----- Print a single integer – the minimum number of additional connections required to make the graph connected. -----Example----- **Input** 6 3 1 2 3 4 4 5 **Output** 2 **Note** In the example above, we have 6 servers and 3 existing connections forming 3 disjoint sets: {1, 2}, {3, 4, 5}, and {6}. To make the graph connected, we can add connections (2, 3) and (5, 6), making the graph fully connected with 2 additional links.","solution":"def minimum_additional_connections(n, m, connections): from collections import defaultdict, deque if m == 0: return n - 1 # No connections, we need to connect all nodes graph = defaultdict(list) for a, b in connections: graph[a].append(b) graph[b].append(a) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) components = 0 for server in range(1, n + 1): if not visited[server]: bfs(server) components += 1 return components - 1"},{"question":"In a certain computer game, there are `n` heroes standing in a line, each with a unique strength value. The players can swap the position of any two adjacent heroes any number of times. However, a hero can only be moved to the right if their strength is less than the hero immediately to their right. Similarly, a hero can be moved to the left if their strength is greater than the hero immediately to their left. Write a function that checks if every hero can be moved such that their initial positions in the line are sorted in ascending order of their strength values. -----Input----- The first line contains an integer `n` (2 ≤ n ≤ 100), representing the number of heroes. The second line contains `n` integers, where the `i`-th integer `a_i` (1 ≤ `a_i` ≤ 10^4) represents the strength of the `i`-th hero. -----Output----- Print \\"YES\\" if the heroes can be sorted in ascending order using the allowed moves, otherwise print \\"NO\\". -----Examples----- Input 4 1 3 2 4 Output YES Input 3 3 1 2 Output NO -----Note----- In the first example, the initial order is [1, 3, 2, 4]. The hero with strength 2 can move to the left and swap with the hero with strength 3 to achieve [1, 2, 3, 4], which is in ascending order. In the second example, the initial order is [3, 1, 2]. The hero with strength 1 cannot move to the left since they cannot swap with a stronger hero, making it impossible to sort the heroes.","solution":"def can_sort_heroes(n, strengths): Determines if the heroes can be sorted in ascending order using the allowed moves. :param n: int, number of heroes :param strengths: list of int, strengths of heroes :return: str, \\"YES\\" if the heroes can be sorted else \\"NO\\" # A sequential increasing index means a character can never move left more than initial position # and also can never move right more than final position. Hence, indexes would not overlap when sorted. if sorted(strengths) == strengths: return \\"YES\\" inv_count = 0 for i in range(n): for j in range(i + 1, n): if strengths[i] > strengths[j]: inv_count += 1 return \\"YES\\" if inv_count == 1 else \\"NO\\""},{"question":"We have a sequence of integers and you need to perform a series of operations. Each operation is one of the following two types: 1. **Update**: Set the value at a specific index in the sequence. 2. **Range Sum**: Compute the sum of integers within a given range. Your task is to implement a system that accepts these operations and outputs the results for the range sum queries. # Function Signature ```python def process_operations(n, q, sequence, operations): # Your code here ``` # Input - `n`: An integer, the length of the sequence ( 1 leq n leq 10^5 ). - `q`: An integer, the number of operations ( 1 leq q leq 10^5 ). - `sequence`: A list of ( n ) integers ( 1 leq text{sequence}[i] leq 10^9 ). - `operations`: A list of ( q ) tuples representing the operations. Each operation is one of the following: - `(1, index, value)`: Set `sequence[index]` to `value`. - `(2, left, right)`: Compute the sum of `sequence[left]` to `sequence[right]` (both inclusive). # Output For each range sum query, return a list of results as integers representing the sum of integers from `sequence[left]` to `sequence[right]`. # Example ```python n = 5 q = 4 sequence = [1, 2, 3, 4, 5] operations = [(2, 1, 3), (1, 2, 10), (2, 1, 3), (2, 0, 4)] print(process_operations(n, q, sequence, operations)) ``` # Expected Output ``` [9, 17, 22] ``` # Explanation 1. The initial sequence is `[1, 2, 3, 4, 5]`. 2. Range sum from index 1 to 3 is `2 + 3 + 4 = 9`. 3. Update the value at index 2 to 10, so the sequence becomes `[1, 2, 10, 4, 5]`. 4. Range sum from index 1 to 3 is `2 + 10 + 4 = 16`. 5. Range sum from index 0 to 4 is `1 + 2 + 10 + 4 + 5 = 22`. # Constraints - The sum queries might have overlapping ranges, so ensure that your solution is efficient. - Updates and queries should ideally be handled in logarithmic time complexity to handle the upper constraint limits effectively.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) # Initialize segment tree self.build(data) def build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Update leaf node pos += self.n self.tree[pos] = value # Update internal nodes while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def range_sum(self, left, right): left += self.n right += self.n + 1 sum_ = 0 while left < right: if left % 2: sum_ += self.tree[left] left += 1 if right % 2: right -= 1 sum_ += self.tree[right] left //= 2 right //= 2 return sum_ def process_operations(n, q, sequence, operations): seg_tree = SegmentTree(sequence) result = [] for op in operations: if op[0] == 1: # Update operation _, index, value = op seg_tree.update(index, value) elif op[0] == 2: # Range sum query _, left, right = op sum_range = seg_tree.range_sum(left, right) result.append(sum_range) return result"},{"question":"Alice and Bob are playing a game called \\"Ball Splitting\\". Initially, there is a pile of balls represented by a single integer `n` (1 ≤ n ≤ 1000,000). The game proceeds in turns, starting with Alice. On each turn, a player must choose a divisor of the current number of balls that is less than the number itself, and remove that many balls from the pile. The player who cannot make a move loses the game. Alice and Bob are both very good at this game and play optimally. Your task is to determine which player will win if both players play optimally. Input The input contains a single integer `n` (1 ≤ n ≤ 1000,000) which represents the initial number of balls in the pile. Output Print \\"Alice\\" if Alice has a winning strategy and \\"Bob\\" otherwise. Examples Input 4 Output Bob Input 7 Output Alice Input 30 Output Alice Note In the first example, Alice can remove 1, 2, or 3 balls on her turn. Regardless of her choice, Bob can always make the number of balls a prime number on his turn (3 after Alice removes 1, 2 after Alice removes 2, or 2, 1 after Alice removes 3 balls respectively) which guarantees Bob\'s win. In the second example, any move Alice makes will leave Bob in the position to make another move that traps Alice, ensuring Bob wins. In the third example, Alice can immediately gain an advantage by removing 1 ball, leaving Bob with 29 balls, which makes Alice the winner since 29 is a prime number and forces Bob into a losing position.","solution":"def ball_splitting_winner(n): Determines the winner of the ball splitting game if both play optimally. Alice starts the game. Parameters: n (int): the initial number of balls Returns: str: \\"Alice\\" if Alice has a winning strategy, \\"Bob\\" otherwise if n % 2 == 0: return \\"Bob\\" else: return \\"Alice\\""},{"question":"You are given a grid of size n times n where each cell contains a lowercase English letter. You have to find the largest square subgrid where all the letters are the same. Note that the subgrid should be contiguous. -----Input----- The first line contains an integer n (1 le n le 1000) representing the size of the grid. Each of the next n lines contains a string of length n consisting of lowercase English letters representing the grid. -----Output----- Output an integer representing the side length of the largest square subgrid where all the letters are the same. -----Examples----- Input 4 aaaa aabb aabb aabb Output 2 Input 5 abcde fghij klmno pqrst uvwxy Output 1 -----Note----- In the first example, the largest square subgrid where all letters are the same is a 2 times 2 square. There are multiple such squares, but you only need to find the size. In the second example, each letter is different in every cell; thus the largest square subgrid where all the letters are the same is a 1 times 1 cell.","solution":"def largest_square_with_same_letters(grid, n): Returns the side length of the largest square subgrid where all the letters are the same. if n == 1: return 1 dp = [[0] * n for _ in range(n)] max_len = 1 for i in range(n): dp[i][0] = 1 dp[0][i] = 1 for i in range(1, n): for j in range(1, n): if grid[i][j] == grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_len = max(max_len, dp[i][j]) else: dp[i][j] = 1 return max_len"},{"question":"Ghazu is an avid reader and he has a list of books he wants to read. However, he sometimes finds that a book has prerequisites, meaning he should read another book before starting this one. Given a list of books and their prerequisites, help Ghazu determine an order in which he can read all the books, if possible. If it\'s not possible to read all books due to a circular dependency, return \\"Not possible\\". Input The first line contains an integer \\"B\\" (1 ≤ B ≤ 100) which represents the number of books. Each of the next B lines contains: - A string for the book ID. - An integer \\"P\\" (0 ≤ P ≤ B-1) representing the number of prerequisites for this book. - Followed by P strings, each representing a book ID that is a prerequisite for this book. Output Output either a single line with a possible reading order of book IDs separated by spaces or \\"Not possible\\" if no valid order exists. SAMPLE INPUT 4 Book1 2 Book2 Book3 Book2 1 Book3 Book3 0 Book4 1 Book1 SAMPLE OUTPUT Book3 Book2 Book1 Book4","solution":"from collections import defaultdict, deque def find_reading_order(num_books, book_info): indegree = defaultdict(int) adjacency_list = defaultdict(list) books = set() for book_id, P, *prerequisites in book_info: books.add(book_id) indegree[book_id] += 0 # Initialize indegree for each book for prereq in prerequisites: books.add(prereq) indegree[book_id] += 1 adjacency_list[prereq].append(book_id) # Queue of courses with no prerequisites zero_indegree_queue = deque([book for book in books if indegree[book] == 0]) reading_order = [] while zero_indegree_queue: current_book = zero_indegree_queue.popleft() reading_order.append(current_book) for neighbor in adjacency_list[current_book]: indegree[neighbor] -= 1 if indegree[neighbor] == 0: zero_indegree_queue.append(neighbor) if len(reading_order) == len(books): return \\" \\".join(reading_order) else: return \\"Not possible\\" def process_input(input_data): lines = input_data.strip().split(\\"n\\") B = int(lines[0]) book_info = [line.split() for line in lines[1:B+1]] book_info = [(info[0], int(info[1]), *info[2:]) for info in book_info] return find_reading_order(B, book_info)"},{"question":"Alice has recently learned about binary trees in her data structures class. She is given a binary tree and she would like to find out the maximum sum of values from the root node to any leaf node in this tree. Write a program to help Alice find this maximum sum. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N representing the number of nodes in the binary tree. - The following N lines each contain three space-separated integers val, left, and right: val is the value of the node, left is the index of the left child (using 1-based indexing, `-1` if there is no left child), and right is the index of the right child (`-1` if there is no right child). -----Output----- For each test case, print a single line containing one integer — the maximum sum from root to any leaf node in the tree. -----Constraints----- - 1 le T le 10 - 1 le N le 100 - -100 le val le 100 for each node value -----Example Input----- 1 5 5 2 3 3 -1 -1 4 4 5 -10 -1 -1 20 -1 -1 -----Example Output----- 9 -----Explanation----- Example case 1: The binary tree is structured as follows: ``` 5 / 3 4 / -10 20 ``` Possible paths and their sums are: - 5 -> 3: sum is 8 - 5 -> 4 -> -10: sum is -1 - 5 -> 4 -> 20: sum is 29 Therefore, the maximum sum from root to any leaf node is 29.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def build_tree(nodes): if not nodes: return None tree_nodes = [None] * (len(nodes) + 1) for i, (val, left, right) in enumerate(nodes, 1): if tree_nodes[i] is None: tree_nodes[i] = TreeNode(val) else: tree_nodes[i].val = val if left != -1: if tree_nodes[left] is None: tree_nodes[left] = TreeNode() tree_nodes[i].left = tree_nodes[left] if right != -1: if tree_nodes[right] is None: tree_nodes[right] = TreeNode() tree_nodes[i].right = tree_nodes[right] return tree_nodes[1] def max_path_sum(root): if not root: return float(\'-inf\') if not root.left and not root.right: return root.val left_sum = max_path_sum(root.left) right_sum = max_path_sum(root.right) return root.val + max(left_sum, right_sum) def solve(test_cases): results = [] for nodes in test_cases: root = build_tree(nodes) results.append(max_path_sum(root)) return results"},{"question":"Alice loves playing with words. She has a bag that contains a mixture of letters and she wants to create the longest possible word from the letters in her bag. However, the word must be a palindrome. A palindrome is a word that reads the same backward as forward. Given the letters in her bag, help Alice determine the length of the longest possible palindrome she can form. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000), representing the letters in Alice\'s bag. The string contains only lowercase English letters. Output Output a single integer — the length of the longest palindromic word she can form with the given letters. Examples Input abccccdd Output 7 Input a Output 1 Input aaabbb Output 5 Note Sample 1. The longest palindrome that can be formed is \\"dccaccd\\" or \\"dccbccd\\" of length 7. Sample 2. Since there is only one letter \'a\', the longest palindrome that can be formed is \\"a\\" of length 1. Sample 3. The longest palindrome that can be formed is \\"abbba\\" of length 5.","solution":"def longest_palindrome_length(s): from collections import Counter letter_counts = Counter(s) length = 0 odd_found = False for count in letter_counts.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 return length"},{"question":"You are an archaeologist, exploring ancient ruins deep in the jungle. As you venture through the corridors, you discover a mysterious device that controls the entrance to a hidden chamber. This device has a screen displaying a sequence of symbols, and you realize that you need to decode this sequence to gain access. The sequence on the device is represented as a string consisting of lowercase English letters. The device seems to respond to some form of pattern or regularity in the sequence. You suspect that the device will unlock when the sequence is transformed into a palindrome. Your task is to write a program that determines the minimum number of character insertions necessary to make the given string a palindrome. A palindrome is a string that reads the same forward and backward. For example, \\"radar\\" and \\"aibohphobia\\" are palindromes. Input The input consists of a single line containing a string of length n (1 ≤ n ≤ 1000) composed of lowercase English letters. Output Output a single integer representing the minimum number of insertions needed to make the string a palindrome. Example **Input** ``` race ``` **Output** ``` 3 ``` Explanation: By inserting \\"c\\" at the beginning, \\"a\\" at the end, and another \\"r\\" at the end, the string \\"race\\" can be transformed into \\"ecarace\\", which is a palindrome.","solution":"def min_insertions_to_palindrome(s): Returns the minimum number of insertions needed to make the string s a palindrome. n = len(s) # Create a DP table to store the results of subproblems dp = [[0 for x in range(n)] for y in range(n)] # Fill DP table # The gap represents the gap between the starting and ending indices for gap in range(1, n): for l in range(n - gap): r = l + gap if s[l] == s[r]: dp[l][r] = dp[l + 1][r - 1] else: dp[l][r] = min(dp[l][r - 1], dp[l + 1][r]) + 1 return dp[0][n - 1]"},{"question":"Amit has recently taken up gardening as a hobby and is excited to build a flower bed in his backyard. He wants to create a rectangular flower bed using a fixed perimeter. Given the perimeter, he wants to maximize the area of the rectangular flower bed. He needs your help to determine the largest possible area for a given perimeter. Input: The first line of input contains an integer T, which represents the number of test cases. Each of the next T lines contains an integer P, which is the perimeter of the flower bed. Output: Print T lines, each containing an integer which is the largest possible area of the rectangular flower bed with the given perimeter. Constraints: 1 ≤ T ≤ 10^5 1 ≤ P ≤ 10^9 SAMPLE INPUT 2 20 30 SAMPLE OUTPUT 25 56","solution":"def max_area_with_fixed_perimeter(perimeter): Given a perimeter, returns the maximum possible area of a rectangular flower bed. # The optimal shape for maximizing the area is a square # For a given perimeter P, the sides of the optimal rectangle are P/4 side_length = perimeter / 4 # Calculating the maximum area using side_length * side_length max_area = int(side_length * side_length) return max_area def solve_max_areas(T, perimeters): results = [] for perimeter in perimeters: results.append(max_area_with_fixed_perimeter(perimeter)) return results"},{"question":"Farmer John is planning to assign his cows to protect his barn from wolves. He has n cows and there are m time intervals where wolves are likely to attack. Each cow has a specific duration it can stay active before it needs to rest, and each cow can only be assigned to one time interval. To maximize the effective use of his cows, FJ wants to ensure that each interval has at least one cow protecting it. Additionally, he wants to maximize the number of cows that are used, as cows also enjoy the activity and become more experienced. Given a list of cows with their active durations and a list of time intervals with their start and end times, determine the maximum number of cows that can be assigned to protect the intervals, ensuring no interval is left unprotected. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of cows and the number of time intervals, respectively. The second line contains n integers d_1, d_2, ..., d_n (1 ≤ d_i ≤ 10000) — the active durations of the cows. The following m lines each contain two integers s_j and e_j (0 ≤ s_j < e_j ≤ 10000) — the start and end times of the j-th interval. Output Output a single integer — the maximum number of cows that can be assigned to protect the intervals. Example Input ``` 4 3 5 10 6 8 0 3 4 7 5 10 ``` Output ``` 3 ``` Note In the example, one possible assignment is: - The cow with active duration 5 can be assigned to the interval [0, 3]. - The cow with active duration 6 can be assigned to the interval [4, 7]. - The cow with active duration 10 can be assigned to the interval [5, 10]. Thus, 3 cows can be used, maximizing the number of cows while ensuring all intervals are protected.","solution":"def assign_cows(n, m, cow_durations, intervals): # Sort intervals by their end time intervals.sort(key=lambda x: x[1]) # Sort cow durations cow_durations.sort() count = 0 # Count of cows assigned used = [False] * n # Array to check if a cow is already used for start, end in intervals: for i in range(n): if not used[i] and cow_durations[i] >= (end - start): used[i] = True count += 1 break # Move to the next interval return count"},{"question":"You are given two strings, s1 and s2. You need to write a function that finds the smallest window in the string s1 which contains all the characters of the string s2. If no such window exists, return an empty string. If there are multiple such windows, return the first occurring one. Example 1: Input: s1 = \\"ADOBECODEBANC\\", s2 = \\"ABC\\" Output: \\"BANC\\" Explanation: The smallest window in \\"ADOBECODEBANC\\" which contains all the characters of \\"ABC\\" is \\"BANC\\". Example 2: Input: s1 = \\"a\\", s2 = \\"a\\" Output: \\"a\\" Explanation: The smallest, and the only, window in \\"a\\" which contains all the characters of \\"a\\" is \\"a\\". Example 3: Input: s1 = \\"a\\", s2 = \\"aa\\" Output: \\"\\" Explanation: Since the string \\"a\\" does not contain both \'a\' characters, the output is an empty string. Note: 1. If there is no such window in s1 that covers all characters in s2, return an empty string. 2. If there are multiple such windows, return the first occurring one that meets the requirement. 3. The characters case should be considered as is, i.e., \'A\' and \'a\' are treated differently. Write a function `min_window(s1: str, s2: str) -> str` to solve the above examples. Your implementation should have a time complexity better than O(n * m), where n and m are the lengths of s1 and s2 respectively.","solution":"from collections import Counter, defaultdict def min_window(s1: str, s2: str) -> str: if not s1 or not s2 or len(s2) > len(s1): return \\"\\" s2_count = Counter(s2) window_count = defaultdict(int) have, need = 0, len(s2_count) res, res_len = [-1, -1], float(\\"infinity\\") left = 0 for right in range(len(s1)): character = s1[right] window_count[character] += 1 if character in s2_count and window_count[character] == s2_count[character]: have += 1 while have == need: if (right - left + 1) < res_len: res = [left, right] res_len = (right - left + 1) window_count[s1[left]] -= 1 if s1[left] in s2_count and window_count[s1[left]] < s2_count[s1[left]]: have -= 1 left += 1 l, r = res return s1[l:r+1] if res_len != float(\\"infinity\\") else \\"\\""},{"question":"You are a cat lover and you have multiple cat feeding stations distributed across a 2D grid. Each feeding station can hold a limited amount of food. Your cats can only move up, down, left, or right. When a cat moves to a new feeding station, it increases the amount of food at that station. You want to find out the minimum number of moves needed for all cats to gather at a single feeding station. The cats move one at a time, and there’s only one cat per station initially. Input The first line contains an integer N (2 ≤ N ≤ 10,000), which denotes the number of cats. The following N lines describe the initial coordinates of the feeding stations. The i-th line contains three integers xi (1 ≤ xi ≤ 1,000), yi (1 ≤ yi ≤ 1,000), and fi (0 ≤ fi ≤ 100), which indicate the coordinates of the i-th feeding station and the amount of food available at that station, respectively. Output Output the minimum number of moves required for all cats to be in one place. Examples Input 3 1 1 2 1 3 3 3 3 1 Output 4 Input 2 2 2 5 3 3 5 Output 2","solution":"def min_moves_to_meet(N, positions): Returns the minimum number of moves needed for all cats to gather at a single feeding station. :param N: int - number of cats and feeding stations :param positions: List of tuples, each containing (xi, yi, fi) :return: int - minimum number of moves # Extract the (x, y) positions since the food amount \\"fi\\" is not relevant for movement coordinates = [(pos[0], pos[1]) for pos in positions] # Sorting the x and y coordinates to find the median positions coordinates.sort() x_sorted = sorted(coord[0] for coord in coordinates) y_sorted = sorted(coord[1] for coord in coordinates) # The optimal meeting point will be at the median coordinates to minimize the total distance median_x = x_sorted[N // 2] median_y = y_sorted[N // 2] # Calculate the sum of Manhattan distances to the meeting point (median_x, median_y) total_moves = sum(abs(x - median_x) + abs(y - median_y) for x, y in coordinates) return total_moves # Example usage, will not run during pytest if __name__ == \\"__main__\\": N = 3 positions = [(1, 1, 2), (1, 3, 3), (3, 3, 1)] print(min_moves_to_meet(N, positions)) # Expected output: 4"},{"question":"In a certain country, people are given a unique identification number consisting of exactly N digits. A valid identification number must meet the following criteria: 1. The number should not start with the digit `0`. 2. The identification number should contain at least one even digit. You are tasked to write a program that determines whether a given identification number is valid or not. **Input** - The first line contains an integer N (1 leq N leq 100), the length of the identification number. - The second line contains a string of N digits representing the identification number. **Output** - Print `\\"VALID\\"` if the identification number meets all the criteria. - Otherwise, print `\\"INVALID\\"`. **Examples** Sample Input 1: 5 12345 Sample Output 1: VALID Sample Input 2: 4 5671 Sample Output 2: INVALID Sample Input 3: 6 009876 Sample Output 3: INVALID","solution":"def validate_id_number(N, id_number): Validates the identification number based on the given criteria: 1. The number should not start with the digit \'0\'. 2. The identification number should contain at least one even digit. Args: N : int : Length of the identification number id_number : string : Identification number Returns: string : \\"VALID\\" if the number meets all criteria else \\"INVALID\\" if id_number[0] == \'0\': return \\"INVALID\\" if any(digit in \'02468\' for digit in id_number): return \\"VALID\\" return \\"INVALID\\""},{"question":"Write a function that, given a string of alphabetic characters, returns the length of the longest substring without repeating characters. Here\'s an example to get you started: ```python longest_unique_substring(\\"abcabcbb\\") == 3 # The answer is \\"abc\\", which has a length of 3. longest_unique_substring(\\"bbbbb\\") == 1 # The answer is \\"b\\", which has a length of 1. longest_unique_substring(\\"pwwkew\\") == 3 # The answer is \\"wke\\", which has a length of 3. longest_unique_substring(\\" \\") == 1 # The answer is \\" \\", which has a length of 1. longest_unique_substring(\\"dvdf\\") == 3 # The answer is \\"vdf\\", which has a length of 3. ``` Your function should be optimized to handle long strings efficiently.","solution":"def longest_unique_substring(s): Returns the length of the longest substring without repeating characters. n = len(s) char_index = {} longest = 0 start = 0 for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"A palindrome is a string that reads the same forward and backward, like \\"racecar\\" or \\"level.\\" Given a positive integer n, generate a palindrome of length n using only lowercase English letters (\'a\' to \'z\'). If there are multiple possible solutions, you may print any of them. If it is impossible to generate such a palindrome of length n, return \\"-1\\". -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains a single integer n (1 le n le 1000), the length of the palindrome to generate. -----Output----- Print t lines, each containing the resulting palindrome of length n. If it is not possible to generate a palindrome for a given length, print \\"-1\\" instead. -----Example----- Input 5 3 4 2 1 5 Output aaa abba aa a aaaaa","solution":"def generate_palindrome(n): if n <= 0: return \\"-1\\" if n == 1: return \'a\' if n % 2 == 0: half = \'a\' * (n // 2) return half + half[::-1] else: half = \'a\' * (n // 2) return half + \'a\' + half def process_test_cases(t, cases): results = [] for n in cases: results.append(generate_palindrome(n)) return results"},{"question":"Subsequence Anagrams Alice and Bob are playing a game with strings. The game involves determining if one string is an anagram of a contiguous subsequence of another string. A subsequence is defined as a sequence derived by deleting some or no elements from a string without disturbing the relative positions of the remaining elements. An anagram is a rearrangement of the letters of a string. Given two strings `s1` and `s2`, determine if there exists a contiguous subsequence of `s1` that is an anagram of `s2`. If such a subsequence exists, print \\"YES\\". Otherwise, print \\"NO\\". Input: - The first line of input contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains the string `s1`. - The second line contains the string `s2`. Output: For each test case, output \\"YES\\" if there exists a contiguous subsequence of `s1` that is an anagram of `s2`, otherwise output \\"NO\\". Sample Input: 3 abcdef bca aaaaaa aaa abcbac bca Sample Output: YES YES YES Explanation: - In the first test case, \\"bca\\" is an anagram of the contiguous subsequence \\"b\\", \\"c\\", \\"a\\" of \\"abcdef\\". - In the second test case, \\"aaa\\" is obviously an anagram of itself in the string \\"aaaaaa\\" (multiple occurrences). - In the third test case, \\"bca\\" is an anagram of the contiguous subsequence \\"b\\", \\"c\\", \\"a\\" of \\"abcbac\\".","solution":"def is_anagram_subsequence(s1, s2): from collections import Counter len1, len2 = len(s1), len(s2) if len2 > len1: return \\"NO\\" s2_counter = Counter(s2) window_counter = Counter(s1[:len2]) if window_counter == s2_counter: return \\"YES\\" for i in range(len2, len1): window_counter[s1[i]] += 1 window_counter[s1[i - len2]] -= 1 if window_counter[s1[i - len2]] == 0: del window_counter[s1[i - len2]] if window_counter == s2_counter: return \\"YES\\" return \\"NO\\" def solve_subsequence_anagrams(test_cases): results = [] for s1, s2 in test_cases: results.append(is_anagram_subsequence(s1, s2)) return results"},{"question":"Logan is working on building a novel collaborative text editor. In this editor, multiple users can edit text files simultaneously. To manage changes, whenever a user makes a change, the editor records the exact timestamp and the type of change (addition or deletion). Logan wants to build a feature to track the total number of characters present in the text file at the end of the day. Given the changes made throughout the day, can you help Logan determine the final number of characters in the text file? Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of changes made during the day. Each of the next n lines contains a string representing the timestamp of the change in the format \\"hh:mm:ss\\", followed by a space and a string representing the type of change (\\"add\\" or \\"delete\\"), and another space followed by an integer k (1 ≤ k ≤ 100) indicating the number of characters added or deleted. Output Print a single integer — the total number of characters in the text file at the end of the day. If the total number of characters is 0 or less at any point, print 0. Example Input 5 08:15:30 add 10 08:20:45 delete 5 09:10:22 add 5 10:00:00 delete 20 11:45:00 add 30 Output 20 Note Consider the example. Initially, the text file is empty. - At 08:15:30, 10 characters are added. Total = 10 - At 08:20:45, 5 characters are deleted. Total = 5 - At 09:10:22, 5 characters are added. Total = 10 - At 10:00:00, 20 characters are deleted. Total = -10 (since the total becomes zero or less, print 0 and stop further calculations) - At 11:45:00, 30 characters are added (ignored due to previous zero total check) Therefore, the final output is 0.","solution":"def final_character_count(n, changes): Determines the final count of characters in the text file. Args: n (int): The number of changes made during the day. changes (list of tuples): Each tuple contains a timestamp (str), a change type (str: \'add\' or \'delete\'), and the number of characters (int). Returns: int: The total number of characters in the text file at the end of the day, capped at 0. total_characters = 0 for timestamp, change_type, k in changes: if change_type == \'add\': total_characters += k elif change_type == \'delete\': total_characters -= k if total_characters <= 0: return 0 return total_characters"},{"question":"Mr. Wayne owns a collection of N coins, each with a certain value represented in an array V[]. He wants to find out the smallest sum of money that cannot be formed using any subset of these coins. Help Mr. Wayne determine this value. Example 1: Input: N=5 V[] = {1, 1, 3, 4, 6} Output: 16 Explanation: All sums from 1 to 15 can be created using subsets of the given coins, but 16 cannot. Example 2: Input: N=3 V[] = {1, 2, 2} Output: 6 Explanation: All sums from 1 to 5 can be created using subsets of the given coins, but 6 cannot. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestNonRepresentableSum() which takes the array V[] and its size N as inputs and returns the smallest sum that cannot be represented using any subset of the coins. Expected time complexity: O(N log N) Expected space complexity: O(1) Constraints: 1 ≤ N ≤ 10^6 1 ≤ V[i] ≤ 10^9","solution":"def smallestNonRepresentableSum(N, V): V.sort() # Initialize the smallest sum that cannot be represented smallest_sum = 1 for coin in V: if coin > smallest_sum: break smallest_sum += coin return smallest_sum"},{"question":"You are given a string S as input. Output the number of unique characters in the string. -----Constraints----- - The string S consists only of lowercase alphabetical characters. - 1 ≤ length of S ≤ 100 -----Input----- Input is given from Standard Input in the following format: S -----Output----- Print the number of unique characters in the string. -----Sample Input----- hello -----Sample Output----- 4","solution":"def unique_characters_count(S): Returns the number of unique characters in the string S. return len(set(S))"},{"question":"Given an integer array `arr` and a target value `x`, write a function to find a pair of elements in the array that sums up to `x`. If such a pair exists, return the indices of the two elements. If no such pair exists, return an empty array. Input The first line of the input delineates the number of test cases `t`. For each test case: - The first line contains two integers - the number of elements `n` in the array and the target value `x`. - The second line contains `n` integers separated by spaces, representing the array `arr`. Output For each test case, output a single line: - If a pair of elements is found, output their zero-based indices separated by a single space. - If no such pair exists, output an empty string. Note: If multiple pairs are possible, any one pair can be returned. Example Input: 3 4 9 2 7 11 15 3 6 3 2 4 3 10 3 7 1 Output: 0 1 1 2 0 1 Explanation: In the first test case, the pair (2, 7) adds up to 9. Their indices are 0 and 1. In the second test case, the pair (2, 4) adds up to 6. Their indices are 1 and 2. In the third test case, the pair (3, 7) adds up to 10. Their indices are 0 and 1.","solution":"def find_pair(arr, x): Returns indices of a pair of elements in arr that sum up to x. If no such pair exists, returns an empty list. num_indices = {} for i, num in enumerate(arr): complement = x - num if complement in num_indices: return [num_indices[complement], i] num_indices[num] = i return [] def solve(test_cases): Processes multiple test cases to find pairs of elements summing to target values. results = [] for n, x, arr in test_cases: pair = find_pair(arr, x) if pair: results.append(f\\"{pair[0]} {pair[1]}\\") else: results.append(\\"\\") return results"},{"question":"Given an array of integers nums with possible duplicates, return all unique subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order. Examples: Input: nums = [1,2,2] Output: [ [2], [1], [1,2,2], [2,2], [1,2], [] ] Input: nums = [0] Output: [ [0], [] ] Your Task: The task is to complete the function `uniqueSubsets(nums)` which takes the list `nums` as input and returns a list of lists representing all unique subsets of the input list. Expected Time Complexity: O(2^N * N) Expected Auxiliary Space: O(N) Constraints: - 1 <= nums.length <= 10 - -10 <= nums[i] <= 10","solution":"from typing import List def uniqueSubsets(nums: List[int]) -> List[List[int]]: Returns all unique subsets of the provided list of numbers, including duplicates. nums.sort() # Sort the array to handle duplicates results = [] def backtrack(start, path): results.append(path[:]) for i in range(start, len(nums)): # If the current element is the same as the previous and we are at the starting point of the subset, skip it if i > start and nums[i] == nums[i - 1]: continue path.append(nums[i]) backtrack(i + 1, path) path.pop() backtrack(0, []) return results"},{"question":"You are given an array of integers. Your task is to count how many distinct prime factors exist in the product of all the elements in the array. A prime factor of a number is a prime number that divides the number exactly. ------ Input ------ The first line of the input contains a single integer T, the number of test cases. For each test case, the first line contains an integer N, the number of elements in the array. The second line contains N space-separated integers, which are the elements of the array. ------ Output ------ For each test case, print a single line containing an integer, the number of distinct prime factors of the product of all elements in the array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 1 ≤ A[i] ≤ 10^6 for each valid i ------ Sample Input 1 ------ 2 3 2 4 8 3 3 5 10 ------ Sample Output 1 ------ 1 3 ------ Explanation 1 ------ In the first example, the product of all elements is 64. The only prime factor of 64 is 2. In the second example, the product is 150, and the distinct prime factors are 2, 3, and 5.","solution":"def distinct_prime_factors(arr): Returns the number of distinct prime factors of the product of the array elements. def prime_factors(n): Returns the set of prime factors of a given number n. factors = set() # Test for number 2 while n % 2 == 0: factors.add(2) n //= 2 # Test for odd numbers from 3 to sqrt(n) for i in range(3, int(n**0.5) + 1, 2): while n % i == 0: factors.add(i) n //= i if n > 2: factors.add(n) return factors total_factors = set() for num in arr: total_factors.update(prime_factors(num)) return len(total_factors) def process_cases(input_data): Processes multiple test cases and returns the results. results = [] input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 for _ in range(T): N = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) results.append(distinct_prime_factors(arr)) index += 2 return results"},{"question":"Your task is to implement a program to convert a given time represented in a 24-hour format to a 12-hour format with AM/PM. The input format consists of two integers representing the hour and minutes. Function Signature: ```python def convert_to_12hr_format(hour: int, minute: int) -> str: ``` # Input - Two integers: `hour` (0 ≤ hour < 24) and `minute` (0 ≤ minute < 60). # Output - A string representing the given time in 12-hour format followed by AM or PM. # Examples 1. Input: hour = 13, minute = 30 Output: \\"01:30 PM\\" 2. Input: hour = 0, minute = 15 Output: \\"12:15 AM\\" 3. Input: hour = 23, minute = 45 Output: \\"11:45 PM\\" 4. Input: hour = 12, minute = 0 Output: \\"12:00 PM\\" # Note: - 12:00 AM represents midnight. - 12:00 PM represents noon. Your task is to complete the function `convert_to_12hr_format` to produce the expected output for the given inputs.","solution":"def convert_to_12hr_format(hour: int, minute: int) -> str: Converts time from 24-hour format to 12-hour format with AM/PM. Arguments: hour -- an integer (0 ≤ hour < 24) representing the hour minute -- an integer (0 ≤ minute < 60) representing the minutes Returns: A string representing the given time in 12-hour format followed by AM or PM. period = \\"AM\\" if hour < 12 else \\"PM\\" hour_12 = hour % 12 hour_12 = 12 if hour_12 == 0 else hour_12 return f\\"{hour_12:02}:{minute:02} {period}\\""},{"question":"You are given a sequence of integers where each integer is either positive or negative. You are required to compute the maximum sum of a subsequence such that no two consecutive integers in the subsequence have the same sign. # Examples For the input sequence: `[1, -2, 3, -4, 5]` The maximum sum subsequence respecting the rule is `[1, -2, 3, -4, 5]`, and the sum is 3. For the input sequence: `[1, -2, -3, 4, -5, 6]` The maximum sum subsequence respecting the rule is `[1, -2, 4, -5, 6]`, and the sum is 4. # Input - The first line of the input contains a single integer `T`, the number of test cases. - Each of the next `T` lines contains a space-separated list of integers representing the sequence. # Output For each test case, output the maximum sum of the subsequence that follows the given rule. # Constraints - (1 leq T leq 100) - Each sequence will have at most 100 integers. - Each integer in the sequence will be between (-10^4) and (10^4) inclusive. # Example **Input:** ``` 2 1 -2 3 -4 5 1 -2 -3 4 -5 6 ``` **Output:** ``` 3 4 ``` # Explanation For the first test case, we can pick the sequence `[1, -2, 3, -4, 5]`, which sums up to 3. For the second test case, a valid subsequence would be `[1, -2, 4, -5, 6]`, which sums up to 4.","solution":"def max_sum_subsequence(arr): Returns the maximum sum of a subsequence such that no two consecutive integers have the same sign. if not arr: return 0 n = len(arr) max_sum = arr[0] for i in range(1, n): if arr[i] * arr[i-1] < 0: # Check if the current and previous elements have different signs max_sum += arr[i] return max_sum def process_test_cases(T, test_cases): results = [] for case in test_cases: results.append(max_sum_subsequence(case)) return results"},{"question":"Your company is working on text manipulation techniques, and one of the requirements is to ensure consistency in formatting phone numbers in a standardized format. Write a function that takes a string representing a phone number and formats it to the standard form: \\"(XXX) XXX-XXXX\\". The input string can have various delimiters, spaces, or no delimiters at all but will always contain exactly 10 digits. For example: - Input: \\"1234567890\\" - Output: \\"(123) 456-7890\\" - Input: \\"123-456 7890\\" - Output: \\"(123) 456-7890\\" Handle the common cases of how phone numbers might be written, ensuring that the return format is consistent and properly formatted as described above.","solution":"def format_phone_number(phone_number): Formats a phone number string to the \\"(XXX) XXX-XXXX\\" format. Parameters: phone_number (str): A string containing exactly 10 digits and various possible delimiters. Returns: str: The phone number formatted as \\"(XXX) XXX-XXXX\\". # Remove all non-digit characters from the input string digits = \'\'.join(filter(str.isdigit, phone_number)) # Ensure there are exactly 10 digits if len(digits) != 10: raise ValueError(\\"Phone number must contain exactly 10 digits\\") # Format the digits into the standard phone number format formatted_number = f\\"({digits[:3]}) {digits[3:6]}-{digits[6:]}\\" return formatted_number"},{"question":"HackerLand is experiencing a power-outage problem and you are asked to write a program to help. The power grid in HackerLand is represented by a series of substations connected in a straight line. Each substation can be represented by a node in a graph and each connection between substations by an edge. The power-outage is caused by a fault at one of the substations, causing all downstream substations (in terms of topological order) to lose power. Given the total number of substations, the edges representing the connections, and the faulty substation, determine the number of substations that will lose power including the faulty one. Each substation is labeled from 1 to n (inclusive), where n is the number of substations. The edges are directed and each line connection can be represented as a pair a and b, indicating that power flows from substation a to substation b. Write a function `countPowerOutage` that determines the extent of the power-outage in HackerLand. Function Description Complete the `countPowerOutage` function below which takes the following parameters: - `int n`: the number of substations. - `list[list[int]] edges`: a list of integers where each element is a pair representing a directed edge. - `int faulty`: the substation that has the fault. Returns - `int`: the number of substations that will lose power. Input Format - The first line contains an integer, n, the number of substations. - The second line contains an integer, m, the number of edges. - Each of the next m lines contains two space-separated integers, a and b, that describe a directed connection from substation a to substation b. - The last line contains an integer, faulty, the faulty substation. Constraints - 2 leq n leq 100 - 1 leq m leq 500 - 1 leq a, b, faluty leq n Sample Input ``` 6 5 1 2 1 3 3 4 4 5 5 6 3 ``` Sample Output ``` 4 ``` Explanation The faulty substation is 3. Thus, substations 3, 4, 5, and 6 will lose power, making a total of 4 substations without power.","solution":"def countPowerOutage(n, edges, faulty): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for a, b in edges: graph[a].append(b) # Perform BFS to count all reachable nodes from the faulty substation to_visit = deque([faulty]) visited = set([faulty]) while to_visit: current = to_visit.popleft() for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) to_visit.append(neighbor) return len(visited)"},{"question":"You are given an online ticket reservation system for a cinema. The system maintains two lists: one for reserved seats and another for available seats. Each seat is identified by a unique seat number which is a positive integer. Users can reserve or cancel reservations for seats. The system should be able to quickly respond to the following types of queries: 1. Reserve a seat. 2. Cancel a reservation. 3. Find the next available seat. 4. Check if a specific seat is available. Write a program to handle these operations efficiently. Input The first line of the input contains a single integer T, the number of queries. Each of the next T lines contains a query, which can be one of the following types: - \\"RESERVE x\\", where x is the seat number to be reserved. - \\"CANCEL x\\", where x is the seat number to cancel the reservation for. - \\"NEXT\\", to find the next available seat with the smallest seat number. - \\"AVAILABLE x\\", where x is the seat number to check availability for. Output For each \\"NEXT\\" query, output the next available seat number. For each \\"AVAILABLE x\\" query, output \\"YES\\" if the seat is available, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 10^5 1 ≤ x ≤ 10^5 It is guaranteed that the seat number x in \\"RESERVE x\\" and \\"CANCEL x\\" queries will be within the total possible seat range (1 to 10^5). SAMPLE INPUT 6 RESERVE 3 RESERVE 1 AVAILABLE 2 CANCEL 3 NEXT AVAILABLE 1 SAMPLE OUTPUT YES 2 NO","solution":"class CinemaReservationSystem: def __init__(self): self.reserved_seats = set() self.total_seats = 10**5 self.available_seats = set(range(1, self.total_seats + 1)) self.next_seat = 1 def reserve(self, x): if x in self.available_seats: self.available_seats.remove(x) self.reserved_seats.add(x) while self.next_seat in self.reserved_seats: self.next_seat += 1 def cancel(self, x): if x in self.reserved_seats: self.reserved_seats.remove(x) self.available_seats.add(x) if x < self.next_seat: self.next_seat = x def next(self): return self.next_seat def available(self, x): return \\"YES\\" if x in self.available_seats else \\"NO\\" def handle_queries(queries): system = CinemaReservationSystem() results = [] for query in queries: parts = query.split() if parts[0] == \\"RESERVE\\": system.reserve(int(parts[1])) elif parts[0] == \\"CANCEL\\": system.cancel(int(parts[1])) elif parts[0] == \\"NEXT\\": results.append(system.next()) elif parts[0] == \\"AVAILABLE\\": results.append(system.available(int(parts[1]))) return results"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},Y={class:"search-container"},F={class:"card-container"},C={key:0,class:"empty-state"},P=["disabled"],j={key:0},R={key:1};function M(s,e,l,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",Y,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",F,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",C,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",R,"Loading...")):(n(),i("span",j,"See more"))],8,P)):u("",!0)])}const D=d(A,[["render",M],["__scopeId","data-v-185aab08"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/26.md","filePath":"quotes/26.md"}'),L={name:"quotes/26.md"},U=Object.assign(L,{setup(s){return(e,l)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,U as default};
