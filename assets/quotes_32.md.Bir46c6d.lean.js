import{_ as d,o as n,c as i,a as t,m as c,t as u,C as g,M as b,U as y,f as l,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const q={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},T={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(r,e,h,m,s,a){return n(),i("div",k,[t("div",T,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(u(h.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(u(h.poem.solution),1)])])])}const A=d(q,[["render",O],["__scopeId","data-v-b8898a76"]]),Y=JSON.parse('[{"question":"You are given two arrays representing the inventory of two different warehouses, each containing unique item IDs (positive integers). You want to merge the two inventories in a specific way and then answer queries about the resulting inventory. Specifically, you need to count the number of times a specific item ID appears in the merged inventory only if it appears in both original inventories. Write a function `merged_inventory_queries(arr1: List[int], arr2: List[int], queries: List[int]) -> List[int]` that takes in three inputs: - `arr1`: a list of unique integers representing the first warehouse\'s inventory - `arr2`: a list of unique integers representing the second warehouse\'s inventory - `queries`: a list of integers representing the item IDs we want to query The function should return a list of integers where each element is the count of the corresponding item ID in the merged inventory if it appears in both original arrays, otherwise it should be `0`. # Example ```python def merged_inventory_queries(arr1, arr2, queries): # Your code here # Example input arr1 = [1, 2, 3, 4, 5] arr2 = [3, 4, 5, 6, 7] queries = [1, 4, 5, 6] # Function call print(merged_inventory_queries(arr1, arr2, queries)) ``` # Example Output ```python [0, 1, 1, 0] ``` # Constraints - Length of `arr1` and `arr2` will be between 1 and 100, inclusive. - Length of `queries` will be between 1 and 100, inclusive. - Each element in `arr1`, `arr2`, and `queries` will be a positive integer less than or equal to `10^9`.","solution":"from typing import List def merged_inventory_queries(arr1: List[int], arr2: List[int], queries: List[int]) -> List[int]: Returns the count of each query item if it appears in both original inventories, otherwise 0. # Convert both arrays into sets for faster intersection and membership checking set1 = set(arr1) set2 = set(arr2) # Find the intersection of the two sets common_items = set1 & set2 # Create a dictionary for quick query result lookup result_dict = {item: 1 for item in common_items} # Process each query and determine its result result = [result_dict.get(query, 0) for query in queries] return result"},{"question":"A popular tactical board game, JG Chess, involves a complex grid and multiple different types of pieces each with unique movements. You’ve been tasked in creating a feature to determine the optimal path for a rook from one point to another. In this game, the rook can only move horizontally (left/right) or vertically (up/down) any number of cells. The 8x8 grid, representing the board, is numbered from (1,1) to (8,8). Write a function to calculate and output the minimum number of moves required for a rook to move from a given start position to a given end position on an 8x8 grid. # Input: The first line of input contains four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ 8), representing the starting position (x1, y1) and the end position (x2, y2) respectively. # Output: Print a single integer — the minimum number of moves required for the rook to go from the starting position to the end position. # Example: Input: 2 3 2 7 Output: 1 Input: 4 4 7 8 Output: 2 # Note: In the first example, the rook can move directly from (2,3) to (2,7) in one vertical move. In the second example, the rook needs to move either horizontally or vertically from (4,4) to (7,4) and then vertically or horizontally from (7,4) to (7,8), which totals two moves. Your task is to determine the minimum number of moves for any given positions.","solution":"def rook_moves(x1, y1, x2, y2): Returns the minimum moves needed for a rook to move from (x1, y1) to (x2, y2) on an 8x8 grid. if x1 == x2 or y1 == y2: return 1 else: return 2"},{"question":"You are given an array of integers. You need to determine if it is possible to divide the array into two non-empty parts such that the sum of the elements in each part is equal. Write a function `can_partition(arr)` that takes in an array of integers and returns a boolean value indicating whether such a division is possible. # Input - An array `arr` of length n (1 ≤ n ≤ 50) containing integers where each element is between -100 and 100. # Output - Return `True` if the array can be partitioned into two parts with equal sum, otherwise return `False`. # Example ```python print(can_partition([1, 5, 11, 5])) # Output: True print(can_partition([1, 2, 3, 5])) # Output: False ``` # Note - The two parts must be non-empty. Hence, there must be at least one element in each part after the partition. - The sum of elements in both parts after partition must be the same.","solution":"def can_partition(arr): Determines if it is possible to divide the array into two non-empty parts such that the sum of the elements in each part is equal. total_sum = sum(arr) if total_sum % 2 != 0: return False target = total_sum // 2 n = len(arr) # Using a subset sum problem approach with dynamic programming dp = [[False] * (target + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]] else: dp[i][j] = dp[i-1][j] return dp[n][target]"},{"question":"You are given an array of n integers. Your task is to find the minimum number of operations required to make all elements of the array equal. In one operation, you can pick any two adjacent elements and change both elements to the maximum of the two. The first line of input contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains an integer n (2 ≤ n ≤ 100000), the number of elements in the array. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), representing the elements of the array. For each test case, print one integer — the minimum number of operations required to make all elements of the array equal. Example: Input: ``` 3 4 4 2 3 1 3 5 5 5 5 1 3 2 5 4 ``` Output: ``` 3 0 4 ``` Explanation: 1. In the first test case, you can perform the following operations: - Change 4 and 2 to 4. The array becomes [4, 4, 3, 1]. - Change 3 and 1 to 3. The array becomes [4, 4, 4, 3]. - Change 4 and 3 to 4. The array becomes [4, 4, 4, 4]. 2. In the second test case, all elements are already equal, so no operations are required. 3. In the third test case, you can perform the following operations: - Change 1 and 3 to 3. The array becomes [3, 3, 2, 5, 4]. - Change 3 and 2 to 3. The array becomes [3, 3, 3, 5, 4]. - Change 3 and 5 to 5. The array becomes [3, 3, 3, 5, 5]. - Change 3 and 5 to 5. The array becomes [5, 5, 5, 5, 5].","solution":"def min_operations_to_make_equal(test_cases): results = [] for a in test_cases: a.sort() max_element = a[-1] operations = 0 i = len(a) - 2 while i >= 0: if a[i] != max_element: operations += 1 i -= 1 results.append(operations) return results def process_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append(array) index += 2 return test_cases"},{"question":"Given a directed graph with n nodes (labeled from 1 to n) and m edges, determine if there is a cycle in the graph. If a cycle exists, print \\"YES\\" and print the nodes in the cycle in the order they are visited. If there are multiple cycles, print any one of them. If no cycle exists, print \\"NO\\". The first line contains two integers n and m (1 ≤ n, m ≤ 100000) — the number of nodes and the number of edges. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — an edge from node u to node v. If a cycle exists, print \\"YES\\" on the first line. On the second line print the size of the cycle followed by the nodes in the cycle in the order they are visited. If multiple cycles exist, print any one of them. If no cycle exists, print \\"NO\\". Example: Input: 4 4 1 2 2 3 3 4 4 2 Output: YES 4 2 3 4 2 Input: 3 2 1 2 2 3 Output: NO","solution":"from sys import setrecursionlimit from collections import defaultdict, deque # Set recursion limit due to large input constraints setrecursionlimit(200000) def find_cycle_in_directed_graph(n, m, edges): Determines if there is a cycle in the directed graph. If a cycle is found, prints \\"YES\\" and the cycle nodes. If no cycle is found, prints \\"NO\\". :param n: Number of nodes :param m: Number of edges :param edges: List of edges (u, v) representing directed edges from node u to node v :return: Whether a cycle exists, and if so, the nodes in the cycle def dfs(v): nonlocal cycle_start, cycle_end visited[v] = 1 # Mark node as visited for u in graph[v]: if visited[u] == 0: # Node u not visited parent[u] = v if dfs(u): return True elif visited[u] == 1: # Found a back edge cycle_end = v cycle_start = u return True visited[v] = 2 # Mark node as fully processed return False graph = defaultdict(list) for u, v in edges: graph[u].append(v) visited = [0] * (n + 1) parent = [-1] * (n + 1) cycle_start = -1 cycle_end = -1 for i in range(1, n + 1): if visited[i] == 0: if dfs(i): break if cycle_start == -1: return \\"NO\\" else: cycle = [] cycle.append(cycle_start) v = cycle_end while v != cycle_start: cycle.append(v) v = parent[v] cycle.append(cycle_start) cycle.reverse() return \\"YES \\" + f\\"{len(cycle)} \\" + \\" \\".join(map(str, cycle))"},{"question":"Jessica is participating in a gaming competition. There are n challenges in the competition, each with a certain score value. Jessica\'s goal is to maximize her score by completing certain challenges. However, Jessica can only pick challenges that are adjacent to each other. Jessica may decide to either pick challenges from the leftmost end or the rightmost end or from both ends, but all picked challenges must be contiguous. Once she picks a set of challenges to complete, she cannot choose any other challenges. Given the list of challenges and their corresponding score values, determine the maximum score Jessica can achieve. The first line of input contains an integer n (1 le n le 100), the number of challenges in the competition. The second line contains n integers s_1, s_2, dots, s_n (-100 le s_i le 100), where s_i represents the score value of the i-th challenge. Print one integer — the maximum score Jessica can achieve by picking any contiguous subarray of challenges. In the first example, Jessica can choose challenges in the following subarray: [1, -2, 3, 5, -1, 6] rightarrow [3, 5, -1, 6] resulting in a maximum score of 13. In the second example, since all scores are negative, Jessica would achieve the highest score by picking the challenge with the least negative value: [-1] giving a score of -1. In the third example, if all scores are positive, Jessica will maximize her score by choosing all challenges: [1, 2, 3, 4, 5] giving a score of 15.","solution":"def max_contiguous_subarray_score(n, scores): Returns the maximum score Jessica can achieve by picking any contiguous subarray of challenges. :param n: Integer, represents the number of challenges. :param scores: List of integers, represents the score values of the challenges. :return: Integer, the maximum score. max_current = max_global = scores[0] for i in range(1, n): max_current = max(scores[i], max_current + scores[i]) if max_current > max_global: max_global = max_current return max_global"},{"question":"Вам предстоит создать систему управления библиотекой. В системе должны учитываться книги, читатели и выдача книг. Каждая книга имеет уникальный идентификатор, название и автора. Читатель имеет уникальный идентификатор, имя и список книг, которые он взял на прочтение. Выдача книги может быть успешно осуществлена, если книга доступна (т.е., ее уже не взял другой читатель) и читатель не превысил лимит по количеству книг, которые можно взять одновременно. Необходимо реализовать следующие функции: 1. **Добавление книги в библиотеку.** На вход подается идентификатор книги, название и автор. 2. **Удаление книги из библиотеки.** На вход подается уникальный идентификатор книги. 3. **Добавление читателя в систему.** На вход подается идентификатор читателя и имя. 4. **Удаление читателя из системы.** На вход подается уникальный идентификатор читателя. 5. **Выдача книги читателю.** На вход подается идентификатор книги и идентификатор читателя. 6. **Возврат книги в библиотеку.** На вход подается идентификатор книги и идентификатор читателя. На вход программа получает лог инструкций управления библиотекой (следует обрабатывать отключения и подключения пользователей и книг в порядке поступления инструкций). Первая строка ввода содержит целое число n (1 ≤ n ≤ 10000) — количество инструкций. Следующие n строк содержат по одной инструкции: - ADD_BOOK id title author — добавить книгу - REMOVE_BOOK id — удалить книгу - ADD_READER id name — добавить читателя - REMOVE_READER id — удалить читателя - ISSUE_BOOK book_id reader_id — выдать книгу читателю - RETURN_BOOK book_id reader_id — вернуть книгу в библиотеку Гарантируется, что: 1. ID книги и читателя — уникальные положительные целые числа. 2. Названия и авторы книг не содержат пробелов. 3. Максимальное количество книг на одного читателя — 5. Выведите финальные журналы всех книг и читателей после выполнения всех инструкций. **Формат вывода:** Книги: id title author Читатели: id name книги Пример: **Ввод:** ``` 8 ADD_BOOK 1 HarryPotter JKRowling ADD_BOOK 2 WarAndPeace Tolstoy ADD_READER 1 Alice ADD_READER 2 Bob ISSUE_BOOK 1 1 ISSUE_BOOK 2 2 RETURN_BOOK 1 1 REMOVE_BOOK 2 ``` **Вывод:** ``` Книги: 1 HarryPotter JKRowling Читатели: 1 Alice 2 Bob ```","solution":"class LibraryManagementSystem: def __init__(self): self.books = {} self.readers = {} self.books_issued = {} self.max_books_per_reader = 5 def add_book(self, id, title, author): self.books[id] = (title, author) def remove_book(self, id): if id in self.books: del self.books[id] def add_reader(self, id, name): self.readers[id] = {\\"name\\": name, \\"borrowed_books\\": []} def remove_reader(self, id): if id in self.readers: del self.readers[id] def issue_book(self, book_id, reader_id): if book_id in self.books and reader_id in self.readers: if book_id not in self.books_issued: if len(self.readers[reader_id][\\"borrowed_books\\"]) < self.max_books_per_reader: self.books_issued[book_id] = reader_id self.readers[reader_id][\\"borrowed_books\\"].append(book_id) def return_book(self, book_id, reader_id): if book_id in self.books_issued and self.books_issued[book_id] == reader_id: self.readers[reader_id][\\"borrowed_books\\"].remove(book_id) del self.books_issued[book_id] def process_instructions(self, instructions): for instruction in instructions: parts = instruction.split() command = parts[0] if command == \'ADD_BOOK\': self.add_book(int(parts[1]), parts[2], parts[3]) elif command == \'REMOVE_BOOK\': self.remove_book(int(parts[1])) elif command == \'ADD_READER\': self.add_reader(int(parts[1]), parts[2]) elif command == \'REMOVE_READER\': self.remove_reader(int(parts[1])) elif command == \'ISSUE_BOOK\': self.issue_book(int(parts[1]), int(parts[2])) elif command == \'RETURN_BOOK\': self.return_book(int(parts[1]), int(parts[2])) def get_final_status(self): result = {\\"books\\": [], \\"readers\\": []} for book_id, (title, author) in sorted(self.books.items()): result[\\"books\\"].append((book_id, title, author)) for reader_id, info in sorted(self.readers.items()): result[\\"readers\\"].append((reader_id, info[\\"name\\"], info[\\"borrowed_books\\"])) return result"},{"question":"In a land far away, there exists a peculiar style of knocking on doors known as \\"Knock-Knock Patterns\\". A Knock-Knock Pattern is defined as a sequence of knocks represented by a string consisting of the characters \'k\' (for a knock) and \'d\' (for a delay). For example, the string \\"kkdkkd\\" represents a sequence where there are two knocks, followed by a delay, and then another two knocks followed by a delay. The inhabitants of this land believe that a Knock-Knock Pattern should always be symmetrical around its center to bring good luck and prevent bad omens. A pattern is considered symmetrical if reversing it yields the same sequence. For example, \\"kkdkkdkk\\" is symmetrical but \\"kkdkkdk\\" is not. Given a string s representing a Knock-Knock Pattern, your task is to determine if the pattern is symmetrical. # Input The input consists of a single line containing the string s. The length of s is between 1 and 100, inclusive. # Output Output \\"YES\\" if the pattern is symmetrical, and \\"NO\\" otherwise. # Example Input: ``` kkdkkdkk ``` Output: ``` YES ``` Input: ``` kkdkkdk ``` Output: ``` NO ``` # Constraints - The string s only contains the characters \'k\' and \'d\'. - The length of s is between 1 and 100, inclusive. Write a program to solve this problem.","solution":"def is_symmetrical_knock_knock_pattern(s): Returns \\"YES\\" if the string s is symmetrical, otherwise returns \\"NO\\". return \\"YES\\" if s == s[::-1] else \\"NO\\""},{"question":"Вам дана строка, содержащая только символы \'(\', \')\', \'{\', \'}\', \'[\' и \']\', определите, является ли входная строка допустимой. Ваша задача написать функцию, которая проверяет, правильно ли расставлены скобки. Строка является допустимой, если: 1. Открытые скобки должны быть закрыты однотипными скобками. 2. Открытые скобки должны быть закрыты в правильном порядке. Пример допустимых строк: - \\"()\\" - \\"()[]{}\\" - \\"{[]}\\" Пример недопустимых строк: - \\"(]\\" - \\"([)]\\" Входные данные: На вход подается строка, содержащая только символы: \'(\', \')\', \'{\', \'}\', \'[\' и \']\'. Длина строки не превышает 1000 символов. Выходные данные: Верните истину, если строка является допустимой, и ложь в противном случае. Пример: Вход: \\"()[]{}\\" Выход: true Вход: \\"(]\\" Выход: false Вход: \\"([)]\\" Выход: false Вход: \\"{[]}\\" Выход: true Подсказка: Используйте стек для хранения открытых скобок и проверяйте соответствие при встрече с закрывающими скобками.","solution":"def is_valid(s): Determines if the input string containing only \'(\', \')\', \'{\', \'}\', \'[\' and \']\' is valid based on the given conditions. A string is valid if: 1. Open brackets are closed by the same type of brackets. 2. Open brackets are closed in the correct order. Args: s (str): The input string to be validated. Returns: bool: True if the string is valid, False otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Polycarp has an array of integers of length n. He wants to make the array sorted in non-decreasing order by performing the following operation no more than once: - Divide the array into exactly two non-empty parts and reverse the order of elements in each of those parts separately. For example, for the array [1, 3, 2, 4], he can divide the array as follows: - Dividing into [1, 3] and [2, 4], reversing them to get [3, 1, 4, 2], which is not sorted. - Dividing into [1] and [3, 2, 4], reversing to get [1, 4, 2, 3], which is not sorted. - Dividing into [1, 3, 2] and [4], reversing to get [2, 3, 1, 4], which is not sorted. However, for the array [4, 3, 2, 1], he can: - Divide into [4, 3] and [2, 1], reversing to get [3, 4, 1, 2], which is then sorted (since we will no longer perform an operation). Determine if it is possible to make the array sorted by performing the operation no more than once and print \\"YES\\" if it is possible, otherwise print \\"NO\\". You need to determine this for t test cases. The first line of the input contains a positive integer t (1 leq t leq 1000) — the number of test cases. Each test case contains two lines. The first line of each test case contains an integer n (2 leq n leq 100) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (1 leq a_i leq 10^9) — the elements of the array. For each test case, output \\"YES\\" if it is possible to make the array sorted in non-decreasing order by performing the operation no more than once, otherwise output \\"NO\\".","solution":"def can_sort_by_one_operation(n, array): # Check if the array is already sorted if all(array[i] <= array[i + 1] for i in range(n - 1)): return \\"YES\\" # Check if reverse is already sorted if all(array[i] >= array[i + 1] for i in range(n - 1)): return \\"YES\\" # Check for the condition where splitting and reversing can make it sorted for i in range(n - 1): left = array[:i + 1] right = array[i + 1:] # Check if both parts can be reversed and concatenated to form a sorted array if all(left[j] >= left[j + 1] for j in range(len(left) - 1)) and all(right[j] >= right[j + 1] for j in range(len(right) - 1)): return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: n, array = case results.append(can_sort_by_one_operation(n, array)) return results"},{"question":"A balanced string is a string that has an equal number of characters \'L\' and \'R\'. We want to split a given string into the maximum number of balanced substrings. Given a string s consisting only of characters \'L\' and \'R\', return the maximum number of balanced substrings you can obtain. A substring is balanced if it contains an equal number of \'L\' and \'R\'. # Input - The input consists of a single integer t (1 le t le 10^5) — the number of test cases. - Each of the next t lines contains a string s (1 le |s| le 10^5) composed only of characters \'L\' and \'R\'. The sum of the lengths of the strings over all the test cases does not exceed 10^6. # Output - For each test case, output a single integer — the maximum number of balanced substrings that the corresponding string s can be split into. # Example Input: ``` 3 RLRRLLRLRL RLLLLRRRLR LLLLRRRR ``` Output: ``` 4 3 1 ``` # Explanation - For the first test case, \\"RLRRLLRLRL\\" can be split into [\\"RL\\", \\"RRLL\\", \\"RL\\", \\"RL\\"], which are 4 balanced substrings. - For the second test case, \\"RLLLLRRRLR\\" can be split into [\\"RL\\", \\"LLRR\\", \\"RLR\\"], which are 3 balanced substrings. - For the third test case, \\"LLLLRRRR\\" can be split into [\\"LLLLRRRR\\"], which is 1 balanced substring.","solution":"def max_balanced_substrings(t, strings): results = [] for s in strings: count = 0 balance = 0 for char in s: if char == \'L\': balance += 1 else: balance -= 1 if balance == 0: count += 1 results.append(count) return results"},{"question":"Sarah is a brilliant coder participating in an international coding contest. She is now facing a challenge involving cyclic shifts of arrays. Given an array of integers and a sequence of operations, each operation instructs her to perform a cyclic left shift or a cyclic right shift on a subsegment of the array. A cyclic left shift on a subsegment arr[l..r] moves each element of the subsegment one position to the left, with the first element of the subsegment moved to the last position. Similarly, a cyclic right shift on a subsegment moves each element one position to the right, with the last element of the subsegment moved to the first position. Sarah needs to determine the final state of the array after all operations are performed. The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the array. The second line contains n integers a1, a2, ..., an (-10^5 ≤ ai ≤ 10^5) — the elements of the array. The third line contains an integer q (1 ≤ q ≤ 10^5) — the number of operations. The next q lines each describe an operation in the format: t l r (1 ≤ l ≤ r ≤ n, t is either 1 for a cyclic left shift or 2 for a cyclic right shift). Output the final state of the array after performing all operations. Example: Input: 6 1 2 3 4 5 6 3 1 2 5 2 3 6 1 1 3 Output: 3 4 5 2 1 6 Explanation: Start: 1 2 3 4 5 6 First operation (left shift on subsegment 2 to 5): 1 3 4 5 2 6 Second operation (right shift on subsegment 3 to 6): 1 3 6 4 5 2 Third operation (left shift on subsegment 1 to 3): 3 6 1 4 5 2 Thus, the final state of the array is 3 6 1 4 5 2.","solution":"def cyclic_shift(arr, operations): Applies a sequence of cyclic shifts on the given array. Args: arr: List[int] - The initial array of integers. operations: List[Tuple[int, int, int]] - List of operations where each operation is a tuple (t, l, r) t: 1 for cyclic left shift, 2 for cyclic right shift l, r: Subsegment boundaries (1-based index) Returns: List[int] - The final state of the array after all operations. for t, l, r in operations: l -= 1 # convert to 0-based index r -= 1 # convert to 0-based index if t == 1: # Perform cyclic left shift temp = arr[l] for i in range(l, r): arr[i] = arr[i + 1] arr[r] = temp elif t == 2: # Perform cyclic right shift temp = arr[r] for i in range(r, l, -1): arr[i] = arr[i - 1] arr[l] = temp return arr"},{"question":"You are given a string s consisting of lowercase English letters. You need to perform the operations given below: 1. Select any character from s and delete it. 2. Concatenate the remaining string parts to form a new string. The goal is to delete some characters from s such that the resulting string is a palindrome. For example, if the input string is \\"abca\\", by deleting either \'b\' or \'c\', you can form the palindrome \\"aca\\". Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^5). Description of the test cases follows. The only line of each test case contains string s (1 le |s| le 10^5) consisting of lowercase English letters. It is guaranteed that the sum of lengths of s over all test cases does not exceed 10^5. For each test case, print the minimum number of deletions needed to make the string a palindrome. If it is impossible to create a palindrome, return -1. # Input The first line contains an integer t - the number of test cases. Each of the next t lines contains a string s consisting of lowercase English letters. # Output For each test case, print the minimum number of deletions needed to make the string a palindrome. If it is impossible, print -1. # Example Input ``` 3 abca racecar abcdef ``` Output ``` 1 0 -1 ```","solution":"def min_deletions_to_palindrome(s): Finds the minimum number of deletions needed to turn the string s into a palindrome. If it is impossible, return -1. def is_palindrome(s): return s == s[::-1] if is_palindrome(s): return 0 n = len(s) for i in range(n): if is_palindrome(s[:i] + s[i+1:]): return 1 return -1 def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(min_deletions_to_palindrome(s)) return results # Example usage: # t = 3 # test_cases = [\\"abca\\", \\"racecar\\", \\"abcdef\\"] # results = process_test_cases(t, test_cases) # for result in results: # print(result)"},{"question":"A social networking service \\"Chatter\\" is developing a new feature to help users find posts they might be interested in more efficiently. Users can tag their posts with any number of hashtags. To build this feature, the service needs to analyze which hashtags are commonly used together. For this, they want to count the number of unique hashtag pairs that appear together in the various posts. Your task is to write a program that processes a list of posts, each represented by a set of hashtags, and calculates the total number of unique hashtag pairs that appear together in any post. A hashtag pair is considered unique if the two hashtags are lexicographically ordered and have not appeared together in earlier posts. The input starts with an integer n (1 ≤ n ≤ 10000), representing the number of posts. Each of the following n lines contains the hashtags of a post, separated by spaces. Each hashtag is a non-empty string of at most 32 characters, consisting of lowercase Latin letters. Output a single integer: the number of unique hashtag pairs. Example Input: ``` 3 food travel food cooking travel travel adventure ``` Example Output: ``` 4 ``` Explanation: The unique pairs of hashtags are: - (food, travel) - (cooking, food) - (cooking, travel) - (adventure, travel)","solution":"def count_unique_hashtag_pairs(n, posts): from itertools import combinations unique_pairs = set() for post in posts: hashtags = post.split() for pair in combinations(sorted(hashtags), 2): unique_pairs.add(pair) return len(unique_pairs) # Example usage # Input: 3 posts with respective hashtags posts = [ \'food travel\', \'food cooking travel\', \'travel adventure\' ] n = 3 print(count_unique_hashtag_pairs(n, posts)) # Output: 4"},{"question":"You are given an integer array of size n. Your task is to process a series of operations on this array. Each operation can either be a query to find the sum of elements within a given range or an update to modify a specific element in the array. You need to efficiently handle these operations. The first line of input contains two integers n and q — the number of elements in the array and the number of operations, respectively (1 leq n, q leq 10^5). The second line contains n integers representing the initial elements of the array a_1, a_2, ldots, a_n (1 leq a_i leq 10^9). The following q lines describe the operations. Each operation is either of the form: 1. \\"1 x y\\", which means update the element at position x to y (1 leq x leq n, 1 leq y leq 10^9), or 2. \\"2 l r\\", which means return the sum of the elements from index l to r inclusive (1 leq l leq r leq n). For each sum query, print the result on a new line. # Sample Input: ``` 5 3 1 2 3 4 5 2 1 3 1 2 6 2 1 3 ``` # Sample Output: ``` 6 10 ```","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum = 0 while index > 0: sum += self.tree[index] index -= index & -index return sum def range_query(self, left, right): return self.query(right) - self.query(left - 1) def process_operations(n, q, array, operations): fenwick_tree = FenwickTree(n) for i in range(n): fenwick_tree.update(i + 1, array[i]) results = [] for op in operations: parts = op.split() op_type = int(parts[0]) if op_type == 1: x = int(parts[1]) y = int(parts[2]) old_value = fenwick_tree.range_query(x, x) fenwick_tree.update(x, y - old_value) elif op_type == 2: l = int(parts[1]) r = int(parts[2]) result = fenwick_tree.range_query(l, r) results.append(result) return results"},{"question":"Given an integer array `nums` representing the card values in a deck, your task is to determine the minimum number of steps needed to sort the array in non-decreasing order using a specific set of operations. In one step, you can choose a non-empty subarray and reverse its elements. For instance, if the array is `[3, 1, 2]`, you can reverse the subarray `[3, 1]` to get `[1, 3, 2]` in one step. In the next step, you can reverse the subarray `[3, 2]` fully to get the sorted array `[1, 2, 3]`. Function signature: `def min_steps_to_sort(nums: List[int]) -> int:` # Input - An integer array `nums` of length `n` (1 ≤ n ≤ 100,000). # Output - An integer representing the minimum number of steps needed to sort the array. # Constraints - The sequence will always consist of integers (both positive and negative). # Example ```python assert min_steps_to_sort([3, 1, 2]) == 2 assert min_steps_to_sort([4, 3, 2, 1]) == 1 assert min_steps_to_sort([1, 2, 3, 4]) == 0 ``` # Explanation In the first example, we require two steps to sort the array: 1. Reverse subarray `[3, 1]` to get `[1, 3, 2]`. 2. Reverse subarray `[3, 2]` to get `[1, 2, 3]`. In the second example: 1. Reverse subarray `[4, 3, 2, 1]` to get sorted array in one step. In the third example, the array is already sorted so no steps are needed.","solution":"def min_steps_to_sort(nums): Returns the minimum number of steps needed to sort `nums` using the operation of reversing subarrays. sorted_nums = sorted(nums) if nums == sorted_nums: return 0 n = len(nums) start, end = 0, n - 1 while nums[start] == sorted_nums[start]: start += 1 while nums[end] == sorted_nums[end]: end -= 1 # Check if reversing the subarray from start to end makes the array sorted reversed_subarray = nums[start:end + 1][::-1] if nums[:start] + reversed_subarray + nums[end + 1:] == sorted_nums: return 1 # In worst case scenario, we need two steps return 2"},{"question":"Alice is a travel consultant who loves creating the shortest travel itinerary between cities. She has maps of cities and direct roads between them, along with the travel time for each road. Given a list of cities connected by roads, she wants to determine the shortest time to travel from a starting city to a destination city. The first line contains two integers n and m (2 ≤ n ≤ 50, 1 ≤ m ≤ n(n-1)/2), where n is the number of cities and m is the number of direct roads. Each of the following m lines contains three integers u, v, and t (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000), where u and v are the cities connected by a direct road, and t is the travel time for that road. The next line contains two integers s and d (1 ≤ s, d ≤ n), where s is the starting city and d is the destination city. Print the shortest travel time from city s to city d. If there is no way to get from s to d, print -1. You can assume that roads are bidirectional, meaning you can travel both ways on each road.","solution":"import heapq def dijkstra(n, m, edges, start, dest): graph = [[] for _ in range(n)] for u, v, t in edges: graph[u-1].append((t, v-1)) graph[v-1].append((t, u-1)) distances = [float(\'inf\')] * n distances[start-1] = 0 priority_queue = [(0, start-1)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) if u == dest-1: return current_distance if current_distance > distances[u]: continue for weight, v in graph[u]: distance = current_distance + weight if distance < distances[v]: distances[v] = distance heapq.heappush(priority_queue, (distance, v)) return -1 if distances[dest-1] == float(\'inf\') else distances[dest-1] def shortest_travel_time(n, m, edges, s, d): return dijkstra(n, m, edges, s, d)"},{"question":"You are given an array of integers. You need to find the smallest subarray such that if you sort this subarray in ascending order, the entire array becomes sorted in ascending order. A subarray is a contiguous part of an array. Input: - The first line of input contains an integer n (1 ≤ n ≤ 10^5) - the length of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) - the elements of the array. Output: - Print two integers l and r (1 ≤ l ≤ r ≤ n) — the starting and ending indices of the subarray. If the entire array is already sorted, print \\"Already Sorted\\" (without the quotes). If sorting a single element (subarray of length 1) is sufficient, print l and l. Example: Input: 6 1 2 6 5 5 8 Output: 3 5 Explanation: By sorting the subarray from index 3 to 5 (6, 5, 5), the entire array becomes sorted: [1, 2, **5, 5, 6**, 8]","solution":"def find_unsorted_subarray(arr): Finds the smallest subarray which when sorted sorts the entire array. Returns (l, r) where l and r are 1-based starting and ending indices of the subarray. If the entire array is already sorted, returns \\"Already Sorted\\". n = len(arr) start, end = 0, -1 sorted_arr = sorted(arr) for i in range(n): if arr[i] != sorted_arr[i]: start = i break for j in range(n-1, -1, -1): if arr[j] != sorted_arr[j]: end = j break if end == -1: return \\"Already Sorted\\" else: return (start + 1, end + 1)"},{"question":"You are given a list of integers representing IDs of unique items. Each item has a corresponding weight which is provided in a separate list. Your goal is to find the subset of items that has the maximum possible total weight, but the total weight of the subset must be less than a given maximum weight limit. Write a function `max_weight_subset` that takes three parameters: 1. A list of integers `item_ids` representing the IDs of the items. 2. A list of integers `weights` where `weights[i]` is the weight of the item with ID `item_ids[i]`. 3. An integer `weight_limit` representing the maximum weight limit for the subset of items. The function should return a list of item IDs which form the subset with the maximum possible total weight that is less than the given weight limit. If there are multiple subsets with the same total weight, return any one of them. # Input The function `max_weight_subset` takes the following inputs: - `item_ids`: a list of integers (1 ≤ len(item_ids) ≤ 1000, each item ID is unique) - `weights`: a list of integers (1 ≤ len(weights) ≤ 1000, each weight is a positive integer) - `weight_limit`: an integer (1 ≤ weight_limit ≤ 10^9) # Output The function should return a list of integers, representing the IDs of the items in the subset that maximizes the total weight less than the given limit. # Example ```python item_ids = [1, 2, 3, 4, 5] weights = [10, 20, 30, 40, 15] weight_limit = 60 print(max_weight_subset(item_ids, weights, weight_limit)) # Output: [1, 5, 2] or any other subset with the same maximum total weight less than 60 ``` # Note In the sample, one possible valid subset is `[1, 5, 2]` which has weights `[10, 15, 20]` and the total weight is 45, which is less than the weight limit of 60.","solution":"def max_weight_subset(item_ids, weights, weight_limit): from itertools import combinations n = len(item_ids) max_weight = 0 best_subset = [] # Generate all possible subsets for r in range(1, n + 1): for subset in combinations(zip(item_ids, weights), r): subset_ids, subset_weights = zip(*subset) total_weight = sum(subset_weights) if total_weight <= weight_limit and total_weight > max_weight: max_weight = total_weight best_subset = subset_ids return list(best_subset)"},{"question":"You are managing a train station where trains are frequently arriving and departing. However, the station has only one track, and you need to carefully schedule the operations to avoid any collisions. Each train has a specified arrival and departure time, and you need to check if all the trains can be managed without conflicts on the single track. Write a function `can_schedule_trains(trains)` that takes a list of tuples as input where each tuple contains two integers representing the arrival and departure time of a train. The function should return `True` if it\'s possible to schedule all trains without conflicts, otherwise it should return `False`. # Input: - `trains`: A list of tuples where each tuple `(arrival, departure)` represents the arrival and departure time of a train. The list contains between 1 and 10^5 tuples. - 0 ≤ arrival < departure ≤ 10^9 # Output: - A boolean value `True` if the trains can be scheduled without any overlap on a single track, `False` otherwise. # Example: ```python can_schedule_trains([(1, 5), (6, 10), (5, 9), (12, 15)]) ``` Output: ```python True ``` ```python can_schedule_trains([(1, 5), (2, 6), (5, 9), (12, 15)]) ``` Output: ```python False ``` # Explanation: In the first example, all trains can arrive and depart without any overlap on the single track. In the second example, there is a conflict between the first train (1, 5) and the second train (2, 6) as they overlap between times 2 and 5.","solution":"def can_schedule_trains(trains): Determines if trains can be scheduled on a single track without conflicts. :param trains: List of tuples representing arrival and departure times of trains. :return: True if all trains can be scheduled without overlap, False otherwise. # Sort trains by arrival times, and if equal, by departure times trains.sort(key=lambda x: (x[0], x[1])) # Iterate through the sorted list of trains to detect any overlap for i in range(1, len(trains)): if trains[i][0] < trains[i - 1][1]: return False return True"},{"question":"Pieguy loves collecting special sequences of numbers. A sequence of integers is defined to be special if it contains exactly `k` prime numbers and the sum of the sequence is equal to `S`. Given integers `k` and `S`, determine if there exists such a special sequence. If it exists, output any such sequence. If it does not exist, output -1. The first line contains two integers `k` and `S` (1 ≤ k ≤ 1000, 1 ≤ S ≤ 100000). On the first line, output \'YES\' if a special sequence exists, followed by the sequence of integers on the next line. If no special sequence exists, output \'NO\'. **Example:** Input: ``` 3 28 ``` Output: ``` YES 2 3 23 ``` Input: ``` 2 50 ``` Output: ``` NO ```","solution":"def is_prime(n): Helper function to check if a number is a prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_special_sequence(k, S): Function to find the special sequence with exactly k primes and sum S. primes = [] num = 2 while len(primes) < k: if is_prime(num): primes.append(num) num += 1 current_sum = sum(primes) if current_sum == S: return True, primes elif current_sum > S: return False, [] for i in range(k-1, -1, -1): needed_sum = S - current_sum for j in range(primes[i] + 1, S): if is_prime(j): new_sum = current_sum - primes[i] + j if new_sum == S: primes[i] = j return True, primes if needed_sum > 0: for j in range(primes[i] + 1, needed_sum + primes[i] + 1): if is_prime(j): primes[i] = j current_sum = sum(primes) break if current_sum == S: return True, primes return False, [] def solve(k, S): exist, sequence = find_special_sequence(k, S) if exist: print(\'YES\') print(\' \'.join(map(str, sequence))) else: print(\'NO\')"},{"question":"Given a string containing just the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Note that an empty string is also considered valid. # Input - A single line with a string s (1 ≤ |s| ≤ 104), containing only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. # Output - Output a single line with the string \\"YES\\" if the input string is valid, or \\"NO\\" if it is not. # Examples Example 1 Input: ``` () ``` Output: ``` YES ``` Example 2 Input: ``` ()[]{} ``` Output: ``` YES ``` Example 3 Input: ``` (] ``` Output: ``` NO ```","solution":"def is_valid_bracket_string(s): Check if the input string containing brackets is valid. A valid string must have all open brackets closed by the same type and in correct order. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"Write a function that simulates a card game between two players, Alice and Bob. The game is played with a deck consisting of cards numbered from 1 to n (inclusive). Each player alternates drawing a single card from the deck until the deck is empty. Both players are trying to maximize their scores, which are calculated as the sum of the values of the cards they have drawn. Alice always starts first. The function should take an integer n (1 ≤ n ≤ 1000) representing the number of cards in the deck, and return a tuple (a, b) where a is Alice\'s total score and b is Bob\'s total score. Example: ```python def card_game(n: int) -> tuple: # Implement this function pass # Example usage: print(card_game(7)) # Output: (16, 12) ``` Explanation: For n = 7, the deck is {1, 2, 3, 4, 5, 6, 7}. - Alice draws 7, Bob draws 6 - Alice draws 5, Bob draws 4 - Alice draws 3, Bob draws 2 - Alice draws 1 So, Alice\'s total score is 7+5+3+1 = 16, and Bob\'s total score is 6+4+2 = 12.","solution":"def card_game(n: int) -> tuple: Simulates a card game between Alice and Bob with a deck of cards numbered from 1 to n. Alice always starts first and both players try to maximize their scores. Args: n (int): The number of cards in the deck. Returns: tuple: A tuple (a, b) where a is Alice\'s total score and b is Bob\'s total score. alice_score = 0 bob_score = 0 # Iterate through the cards from n down to 1 for i in range(n, 0, -1): if (n - i) % 2 == 0: # Alice\'s turn alice_score += i else: # Bob\'s turn bob_score += i return (alice_score, bob_score)"},{"question":"You\'ve been tasked with developing a file system management utility that can help organize files based on their extensions. Files are provided in a list and each file name contains an extension (e.g., `file.txt`, `image.jpeg`). Your goal is to sort these files by their extensions in alphabetical order. If two files have the same extension, they should be sorted by their names. Implement a function `sort_files_by_extension(file_list)` that accepts a list of file names and returns a new list, arranged as described. The function should adhere to the following constraints and details: 1. The input list contains between 1 and 1000 file names. 2. Files will have valid extensions consisting of lowercase English letters. Each file name and its extension length will not exceed 255 characters. 3. Assume that each file name contains exactly one `.` character separating the name and the extension. # Example Given the following file list: ```python file_list = [\\"document.txt\\", \\"music.mp3\\", \\"image.jpeg\\", \\"archive.zip\\", \\"report.pdf\\", \\"data.csv\\"] ``` The function should return: ```python [\\"data.csv\\", \\"image.jpeg\\", \\"music.mp3\\", \\"report.pdf\\", \\"document.txt\\", \\"archive.zip\\"] ``` # Explanation - The files are first sorted by their extensions: `csv`, `jpeg`, `mp3`, `pdf`, `txt`, `zip`. - Since there are no duplicate extensions, no further sorting by file names is needed for this example. If there were duplicates, sort those files alphabetically by their names.","solution":"def sort_files_by_extension(file_list): Sorts a list of file names by their extensions in alphabetical order. If two files have the same extension, they are sorted by their names. return sorted(file_list, key=lambda file: (file.split(\'.\')[-1], file))"},{"question":"You are given a binary string (a string consisting of only \'0\'s and \'1\'s). An operation involves selecting any two adjacent characters in the string and replacing them with a single character according to the following rules: - \\"01\\" or \\"10\\" can be replaced by \\"1\\". - \\"00\\" or \\"11\\" can be replaced by \\"0\\". Your goal is to determine the smallest possible length of the string after repeatedly applying the operation any number of times. The first line contains a single integer n (1 ≤ n ≤ 100,000), denoting the length of the string. The next line contains a binary string of length n. Print a single integer — the minimum possible length of the string after applying the operations. Example: Input: 7 0010110 Output: 1 Input: 5 11100 Output: 1 Explanation: In the first example, the operations could be: 0010110 -> 010110 -> 01110 -> 0100 -> 10 -> 1. The minimum length achievable is 1. In the second example, the operations could be: 11100 -> 1100 -> 100 -> 10 -> 1. The minimum length achievable is 1.","solution":"def min_length_after_operations(n, binary_string): Returns the minimum length of the binary string after applying the given operations. stack = [] for char in binary_string: if stack and (stack[-1] != char): stack.pop() # This handles both \\"01\\" and \\"10\\" to \'1\' replacements else: stack.append(char) # This handles both \\"00\\" and \\"11\\" to \'0\' replacements return len(stack) # Examples to demonstrate print(min_length_after_operations(7, \\"0010110\\")) # Output: 1 print(min_length_after_operations(5, \\"11100\\")) # Output: 1"},{"question":"You are given two strings, str1 and str2. Check if str2 can be converted to str1 by performing zero or more of the following operations exactly once on any character of str2: 1. Remove one character from str2. 2. Add one character to str2. 3. Replace one character in str2 with another character. Print \\"YES\\" if str2 can be converted to str1 using the above rules, otherwise print \\"NO\\". The input consists of two lines: - The first line contains str1 (1 ≤ |str1| ≤ 1000), which consists of only English letters. - The second line contains str2 (1 ≤ |str2| ≤ 1000), which consists of only English letters.","solution":"def can_convert(str1, str2): Checks if str2 can be converted to str1 by performing zero or more of the following operations exactly once on any character of str2: 1. Remove one character from str2. 2. Add one character to str2. 3. Replace one character in str2 with another character. :param str1: Target string :param str2: Source string to be converted :return: \\"YES\\" if str2 can be converted to str1 using the above rules, \\"NO\\" otherwise len1, len2 = len(str1), len(str2) if str1 == str2: return \\"YES\\" # Check if replacing one character in str2 can turn it into str1 if len1 == len2: count_diffs = sum(1 for a, b in zip(str1, str2) if a != b) if count_diffs == 1: return \\"YES\\" # Check if removing one character from str2 can turn it into str1 if len2 - len1 == 1: for i in range(len2): if str2[:i] + str2[i+1:] == str1: return \\"YES\\" # Check if adding one character to str2 can turn it into str1 if len1 - len2 == 1: for i in range(len1): if str1[:i] + str1[i+1:] == str2: return \\"YES\\" return \\"NO\\""},{"question":"A palindrome is a word, phrase, or sequence that reads the same backward as forward. Given a string, check if it can be rearranged to form a palindrome. The only line contains a single string s (1 ≤ |s| ≤ 10^5) consisting of lowercase English letters. Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". For example, if s = \\"aabb\\", you can rearrange it to \\"abba\\", which is a palindrome, and should print \\"YES\\". If s = \\"abc\\", there is no way to rearrange it to form a palindrome, so it should print \\"NO\\".","solution":"def can_form_palindrome(s): Returns \\"YES\\" if the input string can be rearranged to form a palindrome, otherwise returns \\"NO\\". # Count frequency of each character freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 # Track the number of characters that appear an odd number of times odd_count = sum(1 for count in freq.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd frequency return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"You are given a list of \'lose\' and \'gain\' operations that need to be applied to a starting amount of money. Each operation either increases or decreases the amount by a certain value. However, due to a bug in the system, some operations are reported with an unknown value, represented by a \'?\'. Write a program to calculate the minimum and maximum possible amount of money you could have after applying all the operations. You will need to replace each \'?\' with the smallest or largest value possible, respectively. The first line contains an integer n (1 ≤ n ≤ 10) — the number of operations. The second line contains n space-separated strings, each representing an operation. Each string is either in the form \'gain x\', \'lose x\' where x is a positive integer, or \'gain ?\' or \'lose ?\'. Output two integers: the minimum possible amount and the maximum possible amount. Assume the initial amount of money is 0. **Examples** 1. ``` Input: 3 gain 5 lose ? gain 7 Output: 2 12 ``` 2. ``` Input: 4 lose ? gain 3 lose ? gain ? Output: -6 13 ``` **Explanation** In the first example, the operations could be calculated as: - Replacing \'?\' with smallest value (assume 0): gain 5, lose 0, gain 7 -> 0 + 5 - 0 + 7 = 12 - Replacing \'?\' with largest value (assume 10): gain 5, lose 10, gain 7 -> 0 + 5 - 10 + 7 = 2 In the second example, the operations could be calculated as: - Replacing \'?\' with smallest value (assume 0): lose 0, gain 3, lose 0, gain 0 -> 0 - 0 + 3 - 0 + 0 = 3 - Replacing \'?\' with largest value (assume 10): lose 10, gain 3, lose 10, gain 10 -> 0 - 10 + 3 - 10 + 10 = -7","solution":"def min_max_amount(n, operations): min_amount = 0 max_amount = 0 # Define the maximum value that could replace \'?\' in any operation max_possible_value = 10 for operation in operations: op_type, value = operation.split() if value == \'?\': if op_type == \'gain\': min_amount += 0 # minimum gain is 0 max_amount += max_possible_value # maximum gain is max_possible_value elif op_type == \'lose\': min_amount -= max_possible_value # minimum loss is max_possible_value max_amount -= 0 # maximum loss is 0 (no loss) else: if op_type == \'gain\': min_amount += int(value) max_amount += int(value) elif op_type == \'lose\': min_amount -= int(value) max_amount -= int(value) return min_amount, max_amount"},{"question":"Felicity loves puzzles that involve numbers and sequences. One of her favorites is the prime number game. She wants to play the game on a sequence of numbers where she can perform a special operation: for any two consecutive elements in the sequence that are not prime, she can remove both of them. Given a sequence of integers a_1, a_2, ldots, a_n, Felicity wants to perform the operation as many times as possible. Your task is to determine the length of the longest subsequence of the sequence that Felicity can achieve by performing the special operation described. A positive integer p is a prime if it has exactly two distinct positive divisors: 1 and p. The first few prime numbers are 2, 3, 5, 7, 11, ldots. The input consists of: - An integer n (1 leq n leq 100) — the number of elements in the sequence. - A sequence of n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^6). Output a single integer — the length of the longest subsequence that Felicity can achieve by performing the special operation. Example: Input: ``` 6 4 4 3 7 4 4 ``` Output: ``` 2 ``` Explanation: - Initial sequence: [4, 4, 3, 7, 4, 4] - After removing the first pair of consecutive non-prime numbers: [3, 7, 4, 4] - After removing the next pair of consecutive non-prime numbers: [3, 7] - Longest subsequence with no consecutive non-prime numbers: [3, 7] Note: It is guaranteed that there will always be at least one prime number in the sequence, and a pair of non-prime numbers can always be removed if they exist.","solution":"def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False p = 3 while p * p <= num: if num % p == 0: return False p += 2 return True def longest_subsequence(n, sequence): # Check the primality of each number in the sequence prime_flags = [is_prime(x) for x in sequence] # Create a filtered list where non-prime consecutive pairs are removed i = 0 while i < len(prime_flags) - 1: if not prime_flags[i] and not prime_flags[i + 1]: # remove both the elements sequence.pop(i) sequence.pop(i) prime_flags.pop(i) prime_flags.pop(i) else: i += 1 # The length of the sequence now is the longest subsequence achievable return len(sequence)"},{"question":"Astrid is fascinated by palindromic strings, which are strings that read the same backward and forward. She is experimenting with substrings of a given string to figure out the longest palindromic substring. Write a program that finds the longest palindromic substring in a given string. If there are multiple longest palindromic substrings of the same length, return the first one. The single line contains a string s (1 ≤ |s| ≤ 1000) — the string to be checked. Print the longest palindromic substring of the given string. **Examples:** - For the input \\"babad\\", the longest palindromic substring is \\"bab\\" or \\"aba\\". - For the input \\"cbbd\\", the longest palindromic substring is \\"bb\\".","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring in a given string. Args: s (str): Input string. Returns: str: The longest palindromic substring. def expand_from_center(s, left, right): while left >= 0 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return s[left + 1:right] longest = \\"\\" for i in range(len(s)): # Odd length palindromes pal1 = expand_from_center(s, i, i) # Even length palindromes pal2 = expand_from_center(s, i, i + 1) # Choose the longest palindromic substring longest = max(longest, pal1, pal2, key=len) return longest"},{"question":"Alex loves creating mosaics using small tiles. Each tile can be represented by an n x n grid of characters, where \'T\' represents part of the tile and \'.\' represents an empty part of the grid. It is guaranteed that the tiles are one 4-connected piece. Alex has found k identical tiles and wants to form a larger rectangular mosaic with dimensions x by y using all these k tiles. The mosaic must completely fit within the x by y dimensions, and the tiles cannot overlap, flip, or rotate. You are given the dimensions of one tile, the number of tiles, and the desired dimensions of the mosaic. Determine if it is possible to form such a mosaic using the tiles under the given constraints. The first line of input will contain three integers n, x, and y (1 ≤ n, x, y ≤ 250), the dimensions of one tile, the desired width of the mosaic, and the desired height of the mosaic, respectively. The next k lines will contain the character \'.\' or \'T\', representing the tiles. Output \\"YES\\" if it is possible to form the mosaic; otherwise, output \\"NO\\". **Input Example**: ``` 2 2 4 . T T T . T T T ``` **Output Example**: ``` YES ``` In the above example, the given 2x2 tiles can be arranged to form a 2x4 mosaic. The tiles can be placed side by side to achieve the desired dimensions without overlapping or rotating. **Input Example**: ``` 2 3 3 . T T T . T T T . T T T ``` **Output Example**: ``` NO ``` In this example, it is impossible to arrange the 2x2 tiles into a 3x3 mosaic without violating the constraints, thus the output is \\"NO\\".","solution":"def can_form_mosaic(n, x, y, k): if (x % n == 0 and y % n == 0 and (x // n) * (y // n) == k) or (x % n == 0 and y % n != 0 and y % n <= n and (x // n) * ((y // n) + 1) == k) or (y % n == 0 and x % n != 0 and x % n <= n and (y // n) * ((x // n) + 1) == k): return \\"YES\\" return \\"NO\\""},{"question":"You are working on a logistics problem for a new delivery company in the town of Codeville. The company is planning to deliver packages to several neighborhoods using the quickest possible routes. The town map is represented as a weighted undirected graph where nodes represent intersections and edges represent streets with their associated travel times. Given the graph, your task is to determine the shortest path to deliver a package from a designated central warehouse to all other intersections. The central warehouse is located at node 1. Input begins with an integer N (1 le N le 100,000) representing the number of intersections. The next line contains an integer M (1 le M le 200,000) representing the number of streets. The next M lines each contain three integers: u_i, v_i, and w_i (1 le u_i, v_i le N, 1 le w_i le 1,000,000) representing a street between intersections u_i and v_i with travel time w_i. It is guaranteed that there is a path between any two intersections. Output should be a single line containing N integers where the i-th integer represents the shortest delivery time from the warehouse at node 1 to the intersection i. If an intersection is unreachable, print -1 for that intersection. For example, consider the following input: 5 6 1 2 7 1 3 9 1 5 14 2 3 10 2 4 15 3 4 11 3 5 2 The output should be: 0 7 9 20 11 Explanation: - The shortest path from node 1 to node 2 is through the direct street with travel time 7. - The shortest path from node 1 to node 3 is through the direct street with travel time 9. - The shortest path from node 1 to node 4 is through nodes 1 -> 3 -> 4 with a total travel time of 20. - The shortest path from node 1 to node 5 is through nodes 1 -> 3 -> 5 with a total travel time of 11. Make sure your solution is efficient enough to handle large input sizes within reasonable time limits.","solution":"import heapq def shortest_delivery_times(num_intersections, num_streets, streets): def dijkstra(graph, start_node): distances = {node: float(\'infinity\') for node in graph} distances[start_node] = 0 priority_queue = [(0, start_node)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Build the graph as an adjacency list graph = {i: [] for i in range(1, num_intersections + 1)} for u, v, w in streets: graph[u].append((v, w)) graph[v].append((u, w)) # Perform Dijkstra\'s algorithm from node 1 shortest_paths = dijkstra(graph, 1) # Prepare the result in the required format result = [] for i in range(1, num_intersections + 1): if shortest_paths[i] == float(\'infinity\'): result.append(-1) else: result.append(shortest_paths[i]) return result"},{"question":"You are developing a new social networking application. In this app, users can send friend requests to each other. If user A sends a friend request to user B, B must accept the request for them to become friends. Your task is to implement a function that manages friend requests. Each friend request is described by a pair of integers (u, v) indicating that user u sent a friend request to user v. There are n users in the network, labeled from 1 to n. You need to implement the following functionalities: 1. Send a friend request. 2. Accept a friend request. 3. Check if two users are friends. The function should process queries of three types: 1. \\"SEND u v\\" - This query means that user u sends a friend request to user v. 2. \\"ACCEPT u v\\" - This query means that user v accepts the friend request from user u. 3. \\"CHECK u v\\" - This query means that you need to check if users u and v are friends. If they are, return \\"YES\\". Otherwise, return \\"NO\\". The function should efficiently handle m queries. Input: - The first line contains two integers, n and m, where n (1 ≤ n ≤ 100,000) is the number of users and m (1 ≤ m ≤ 100,000) is the number of queries. - The next m lines contain either \\"SEND u v\\", \\"ACCEPT u v\\", or \\"CHECK u v\\" (1 ≤ u, v ≤ n, u ≠ v). Output: - For each \\"CHECK u v\\" query, return \\"YES\\" if users u and v are friends. Otherwise, return \\"NO\\". Example: Input: ``` 5 7 SEND 1 2 SEND 2 3 CHECK 1 2 ACCEPT 1 2 CHECK 1 2 ACCEPT 2 3 CHECK 1 3 ``` Output: ``` NO YES NO ``` Note: - `SEND u v` should store the request in a way that it can be checked in an `ACCEPT u v` query. - `ACCEPT u v` should update the friend status of users u and v. - `CHECK u v` should efficiently determine if u and v are friends.","solution":"class SocialNetwork: def __init__(self, n): self.n = n self.friend_requests = {} self.friends = {} def send_request(self, u, v): if v not in self.friend_requests: self.friend_requests[v] = set() self.friend_requests[v].add(u) def accept_request(self, u, v): if v in self.friend_requests and u in self.friend_requests[v]: self.friend_requests[v].remove(u) if v not in self.friends: self.friends[v] = set() if u not in self.friends: self.friends[u] = set() self.friends[v].add(u) self.friends[u].add(v) def check_friends(self, u, v): if u in self.friends and v in self.friends[u]: return \\"YES\\" return \\"NO\\" def process_queries(self, queries): results = [] for query in queries: qtype, u, v = query.split() u, v = int(u), int(v) if qtype == \\"SEND\\": self.send_request(u, v) elif qtype == \\"ACCEPT\\": self.accept_request(u, v) elif qtype == \\"CHECK\\": results.append(self.check_friends(u, v)) return results def manage_friend_requests(n, m, queries): social_network = SocialNetwork(n) return social_network.process_queries(queries)"},{"question":"Given a list of integers nums of length n, you need to perform q operations on it. There are three types of operations: 1. Given a range [l, r], find the sum of all elements within that range, inclusive. 2. Given an index i and a value v, set the element at index i to v. 3. Rotate the list to the right by one position. You are required to return the results of the sum operations after all operations have been executed. Input: - The first line contains two integers n and q (1 ≤ n, q ≤ 10^5), the number of elements in the list and the number of operations, respectively. - The second line contains n integers representing the elements of the list. - The following q lines describe the operations in the format given below: - \\"1 l r\\" for a sum query where 1 <= l <= r <= n. - \\"2 i v\\" for a set operation where 1 <= i <= n and 0 <= v <= 10^9. - \\"3\\" for a rotate operation. Output: - For each sum query, output the resultant sum in a new line. Example: Input: 6 5 1 2 3 4 5 6 1 1 3 3 1 1 3 2 4 8 1 4 6 Output: 6 10 24 Explanation: The initial list is [1, 2, 3, 4, 5, 6]. 1. Sum query for range [1, 3] yields 1+2+3 = 6. 2. List after rotating to the right once: [6, 1, 2, 3, 4, 5]. 3. Sum query for range [1, 3] now yields 6+1+2 = 9. 4. Setting the element at index 4 to 8 changes the list to [6, 1, 2, 8, 4, 5]. 5. Sum query for range [4, 6] now yields 8+4+5 = 17. Note: In this example, the output should reflect results of sum operations as described in the query type 1 response, ensuring the list updates and queries are correctly implemented.","solution":"def perform_operations(n, q, nums, operations): results = [] for operation in operations: op = operation[0] if op == 1: l, r = operation[1], operation[2] # Convert to zero-indexed sum_result = sum(nums[l-1:r]) results.append(sum_result) elif op == 2: i, v = operation[1], operation[2] # Convert to zero-indexed nums[i-1] = v elif op == 3: # Rotate the list to the right by one position nums = [nums[-1]] + nums[:-1] return results"},{"question":"You are a teacher at a school, and you have decided to organize an art competition for the students. Each student will submit a drawing with a certain rating. To make the competition fairer, you want to ensure that the best k drawings are shown in the final exhibition. Given a list of integers representing the ratings of the drawings submitted by the students and an integer k, write a function that returns the k highest ratings in descending order. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of drawings submitted. The second line contains n integers separated by spaces, where each integer represents the rating of a drawing (1 ≤ rating ≤ 10^9). The third line contains the integer k (1 ≤ k ≤ n). Output a single line containing the k highest ratings in descending order. Example: Input: 7 5 3 8 6 2 9 7 3 Output: 9 8 7 In this example, from a list of 7 ratings, the top 3 ratings are 9, 8, and 7.","solution":"def top_k_ratings(ratings, k): Returns the k highest ratings in descending order from a list of ratings. Parameters: ratings (list): A list of integers representing the ratings of drawings. k (int): The number of top ratings to return. Returns: list: A list of k highest ratings in descending order. sorted_ratings = sorted(ratings, reverse=True) return sorted_ratings[:k] # Example usage: # ratings = [5, 3, 8, 6, 2, 9, 7] # k = 3 # print(top_k_ratings(ratings, k)) # Output: [9, 8, 7]"},{"question":"A company maintains a security system where employees use RFID tags to enter and exit the building. The system logs every entry and exit by recording the timestamp in milliseconds and the tag ID of the employee. Each entry corresponds to an in-time entry, and each exit corresponds to an out-time entry. The goal is to determine the total time each employee spends inside the building during the day. Write a program that processes the log entries and computes the total time each employee spends inside the building for a given day. The first line of the input contains an integer n (1 ≤ n ≤ 10^5), representing the number of log entries. The next n lines contain two space-separated values: a string indicating the type of log (\\"in\\" or \\"out\\") and an integer representing the timestamp in milliseconds. The log entries are ordered chronologically. Assume that: 1. An \\"in\\" log is always followed by an \\"out\\" log for the same tag, before another \\"in\\" log can occur for the same tag. 2. No logs for the same tag ID overlap. Output the total time in milliseconds that each employee spends inside the building, ordered by the employee tag IDs in increasing order. If an employee entered but did not exit before the end of the day, do not include that employee in the output. # Input Example ``` 6 in 1 1591066800000 out 1 1591070400000 in 2 1591066800000 out 2 1591070400000 in 1 1591077600000 out 1 1591081200000 ``` # Output Example ``` 1 7200000 2 3600000 ```","solution":"def calculate_total_time(logs): from collections import defaultdict time_inside = defaultdict(int) entry_times = {} for log in logs: action, tag_str, timestamp = log.split() tag = int(tag_str) timestamp = int(timestamp) if action == \\"in\\": entry_times[tag] = timestamp elif action == \\"out\\": if tag in entry_times: time_inside[tag] += timestamp - entry_times[tag] del entry_times[tag] # Removing the used entry time result = sorted(time_inside.items()) return result"},{"question":"You are given a string s containing lowercase English letters and an integer k. Your task is to transform the string into a palindrome by performing at most k changes, where each change consists of replacing any single character with any other lowercase English letter. Determine the minimum number of changes required to transform the given string into a palindrome. If it is not possible to transform the string into a palindrome by making at most k changes, return -1. Input: - A string s (1 ≤ length of s ≤ 10^5) - An integer k (0 ≤ k ≤ 10^5) Output: - The minimum number of changes required to transform the string into a palindrome, or -1 if it is not possible. Example: Input: abcba 1 Output: 0 Input: abcdef 2 Output: -1 Input: abccba 1 Output: 0","solution":"def min_changes_to_palindrome(s, k): Returns the minimum number of changes required to make string s a palindrome. If it is not possible within k changes, return -1. n = len(s) # Calculate the number of mismatches in the string to form a palindrome mismatches = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: mismatches += 1 # If mismatches are within the allowed k changes, return the mismatches count if mismatches <= k: return mismatches else: return -1"},{"question":"You are organizing a competition where participants are assigned unique identification codes. The contest has certain rules to prevent fraud. Each identification code should be a string that: 1. Contains between 3 and 10 characters (inclusive). 2. Consists only of uppercase English letters. Additionally, each pair of participants who registered consecutively should have identification codes that are differing by exactly one letter. This means that exactly one character should differ between two consecutive codes. You are given n (3 ≤ n ≤ 50), the number of registrations, and you need to generate n identification codes satisfying the given rules. The input is a single integer n. For example, if n is 4, the possible output could be: AAB AAC AAD AAE Your task is to generate and print n valid identification codes, each on a new line. If there are multiple valid solutions, print any of them. [Input] - First line contains integer: n (3 ≤ n ≤ 50) [Output] - Output n valid identification codes, each on a new line. Example Input: 3 Output: ABC ABD ABE Note: This is just an example output and there could be other valid outputs as well. Each pair of consecutive codes should have exactly one character different.","solution":"def generate_identification_codes(n): Generate n identification codes where: 1. Each code contains between 3 and 10 characters (inclusive). 2. Consists only of uppercase English letters. 3. Each pair of participants who registered consecutively should have identification codes that differ by exactly one letter. def increment_string(s): # Convert the string to a list for mutability arr = list(s) # Start from the last character in the string for i in range(len(arr)-1, -1, -1): if arr[i] == \'Z\': arr[i] = \'A\' else: arr[i] = chr(ord(arr[i]) + 1) break return \'\'.join(arr) codes = [\\"AAA\\"] current_code = \\"AAA\\" for _ in range(n - 1): current_code = increment_string(current_code) codes.append(current_code) return codes # Example usage # n = int(input().strip()) # codes = generate_identification_codes(n) # for code in codes: # print(code)"},{"question":"You are given a string `s` of length up to 1000 characters, where `s` consists of digits and uppercase letters. Your task is to find the longest contiguous substring of `s` that contains at most two distinct characters and print its length. A substring is defined as a sequence of characters that can be formed by deleting any number of characters (including none) from the beginning and end of a string without changing the order of the remaining characters. For example, given the input string \\"AABAACD\\", the longest contiguous substring with at most two distinct characters is \\"AABAA\\", and its length is 5. Write a program to find the length of such a longest contiguous substring for a given input string `s`. **Input:** A single line containing the string `s`, whose length is up to 1000 characters. **Output:** Print the length of the longest contiguous substring containing at most two distinct characters. **Example:** ``` Input: AABAACD Output: 5 ```","solution":"def longest_substring_two_distinct(s): Returns the length of the longest contiguous substring that contains at most two distinct characters. n = len(s) if n == 0: return 0 max_len = 0 left = 0 char_count = {} for right in range(n): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 while len(char_count) > 2: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 current_len = right - left + 1 max_len = max(max_len, current_len) return max_len"},{"question":"Create a function called `find_longest_unique_substring` that takes a single string as input and returns the length of the longest substring without repeating characters. Input A single string `s` (1 ≤ |s| ≤ 10,000). Output An integer representing the length of the longest substring without repeating characters. Example ```plaintext Input: \\"abcabcbb\\" Output: 3 Explanation: The answer is \\"abc\\", with the length of 3. Input: \\"bbbbb\\" Output: 1 Explanation: The answer is \\"b\\", with the length of 1. Input: \\"pwwkew\\" Output: 3 Explanation: The answer is \\"wke\\", with the length of 3. Note that the answer must be a substring, \\"pwke\\" is a subsequence and not a substring. ``` Note You may assume that the input string contains only English letters, digits, symbols, and spaces.","solution":"def find_longest_unique_substring(s): Returns the length of the longest substring without repeating characters. char_index = {} longest = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] >= start: start = char_index[char] + 1 char_index[char] = i longest = max(longest, i - start + 1) return longest"},{"question":"Given a string s consisting of lowercase Latin letters, you are allowed to select no more than k characters of the string and replace them with any lowercase Latin letters. Your task is to find the length of the longest substring containing the same letter you can obtain by making no more than k replacements. The first line contains the only integer k (0 ≤ k ≤ 10^5) — the maximum number of allowed replacements. The second line contains the string s (1 ≤ |s| ≤ 10^5) — the input string consisting of lowercase Latin letters. Output the length of the longest substring with repeated letters possible after making no more than k replacements. In the first example if the maximum number of allowed replacements is one, the input string is \\"ab\\" and the length of the longest substring with same letter is 2. For \\"aab\\" and the maximum number of allowed replacements is one, the length of the longest substring with same letter is 3.","solution":"def longest_substring_with_replacements(s, k): Returns the length of the longest substring with the same letter obtainable by making no more than k character replacements. :param s: Input string consisting of lowercase Latin letters :param k: The maximum number of allowed replacements :return: Length of the longest substring with repeated letters left = 0 max_count = 0 max_length = 0 count = [0] * 26 for right in range(len(s)): count[ord(s[right]) - ord(\'a\')] += 1 max_count = max(max_count, count[ord(s[right]) - ord(\'a\')]) if (right - left + 1) - max_count > k: count[ord(s[left]) - ord(\'a\')] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an array of integers and a target value, find all unique combinations of the array\'s numbers that sum up to the target. Each number in the array can only be used once in the combination. The solution set must not contain duplicate combinations. For example, given the array `candidates = [2,3,6,7]` and the target `7`, the unique combinations that sum up to `7` are: ``` [ [7], [2, 3, 2] ] ``` - The first line of input contains a single integer `n` (1 le n le 20) - the length of the candidates array. - The second line contains `n` integers, representing the array `candidates` (mathbf{1 le candidates[i] le 50}). - The third line contains a single integer, the target value `target` (mathbf{1 le target le 50}). Output the unique combinations that sum up to the target. Each combination should be output on a separate line, and the order of the combinations and the numbers within each combination does not matter. Note: - You must return the combinations in non-descending order. - To ensure all combinations are unique, the input array will not contain duplicate numbers.","solution":"from typing import List def find_combinations(candidates: List[int], target: int) -> List[List[int]]: def backtrack(start, end, tmp, target): if target == 0: result.append(tmp[:]) return if target < 0: return for i in range(start, end): tmp.append(candidates[i]) backtrack(i + 1, end, tmp, target - candidates[i]) tmp.pop() candidates.sort() result = [] backtrack(0, len(candidates), [], target) return result def get_combinations(n: int, candidates: List[int], target: int) -> List[List[int]]: return find_combinations(candidates, target) # Example usage: n = 4 candidates = [2, 3, 6, 7] target = 7 print(get_combinations(n, candidates, target))"},{"question":"You\'ve been hired by a company that wants to automate the allocation of parking spaces in its parking lot. The parking lot has different sections for different types of vehicles: compact cars, regular cars, and large vehicles. Each parking space is uniquely identified by an integer. To make the system more efficient, the company wants to implement a method of checking how many parking spaces are available in each section at any given time. Additionally, they want to be able to allocate a space for a vehicle or deallocate an existing space when a vehicle leaves. The parking lot is represented by a two-dimensional list where each sublist contains the parking spaces for a specific section: - The first sublist contains the parking spaces for compact cars. - The second sublist contains the parking spaces for regular cars. - The third sublist contains the parking spaces for large vehicles. Your task is to implement the following functions: 1. `count_available_spaces(parking_lot)`: This function takes the parking lot representation and returns a tuple with three integers, representing the number of available spaces in the compact, regular, and large sections respectively. 2. `allocate_space(parking_lot, vehicle_type)`: This function takes the parking lot representation and a vehicle type (\'compact\', \'regular\', \'large\'). It allocates a parking space of the given type if available and returns the space number. If no space is available, it returns `-1`. 3. `deallocate_space(parking_lot, vehicle_type, space_number)`: This function takes the parking lot representation, a vehicle type, and a space number. It deallocates the specified parking space. The initial state of the parking lot and the changes it undergoes will be provided in the input. The input consists of multiple lines: - The first line contains three space-separated integers `C`, `R`, and `L`, representing the number of spaces in compact, regular, and large sections respectively. - The second line contains three space-separated integers `C_alloc`, `R_alloc`, and `L_alloc`, representing the initially allocated spaces in compact, regular, and large sections. - The subsequent lines contain operations on the parking lot. Each operation is in one of the following formats: - `count`: To count the available spaces. - `allocate <vehicle_type>`: To allocate a space for the specified vehicle type. - `deallocate <vehicle_type> <space_number>`: To deallocate a specific parking space of the given vehicle type. Output the result of each `count` and `allocate` operation. # Example ``` Input: 5 5 5 2 3 1 count allocate compact allocate large allocate large deallocate large 1 count Output: (3, 2, 4) 3 -1 (3, 2, 5) ``` # Constraints - 0 ≤ C, R, L ≤ 1000 - 0 ≤ C_alloc, R_alloc, L_alloc ≤ 1000 - The number of operations will not exceed 1000. - Space numbers and vehicle types given in operations are guaranteed to be valid and within range. Implement this functionality to help the company manage their parking lot more efficiently.","solution":"def count_available_spaces(parking_lot): Returns the number of available spaces in compact, regular, and large sections respectively. return tuple(len(section) for section in parking_lot) def allocate_space(parking_lot, vehicle_type): Allocates a parking space of the given vehicle type if available. Returns space number if allocated successfully, else -1. section_map = {\'compact\': 0, \'regular\': 1, \'large\': 2} section = section_map[vehicle_type] if parking_lot[section]: return parking_lot[section].pop(0) else: return -1 def deallocate_space(parking_lot, vehicle_type, space_number): Deallocates the specified parking space for the given vehicle type. section_map = {\'compact\': 0, \'regular\': 1, \'large\': 2} section = section_map[vehicle_type] parking_lot[section].append(space_number) parking_lot[section].sort()"},{"question":"At the Bakery of Pies, there\'s a queue of n customers waiting to be served. Each customer has a unique ID ranging from 1 to n. The customers can be served in any order, but there\'s a fun twist: Not all customers are equally patient. Specifically, some customers will only wait for a limited number of minutes before they leave the queue. You are provided with an array, L, where L[i] denotes the maximum number of minutes customer i+1 will wait before they leave the queue. The bakery serves one customer per minute, and once a customer is served, they leave the queue immediately. The goal is to serve as many customers as possible before any of them leave. Write a function, `max_customers_served(n, L)`, that returns the maximum number of customers that can be served given the constraints. # Input - n (1 ≤ n ≤ 10^3): the number of customers. - An array L of length n (1 ≤ L[i] ≤ 10^3): the maximum wait time for each customer. # Output A single integer representing the maximum number of customers that can be served. # Example Input: ``` 5 [2, 1, 3, 5, 4] ``` Output: ``` 5 ``` In this example, the customers can be served in the order of their maximum wait time, resulting in serving all 5 customers within their respective wait times. # Note - The function signature should be `def max_customers_served(n: int, L: List[int]) -> int:` - Consider sorting or using other efficient algorithms to determine the optimal order to serve the maximum number of customers.","solution":"from typing import List def max_customers_served(n: int, L: List[int]) -> int: Returns the maximum number of customers that can be served before their patience runs out. Args: n (int): The number of customers L (List[int]): The array representing the patience limit for each customer Returns: int: The maximum number of customers that can be served # Sort the patience limits in ascending order L.sort() # Serve customers in the order of their patience limits served_count = 0 for i in range(n): if i < L[i]: served_count += 1 else: break return served_count"},{"question":"You are tasked with organizing a single-elimination tournament for a coding competition. There are `n` participants, and each match eliminates one participant, so eventually, after `(n-1)` matches, there will be one winner. The tournament has `k` different rounds, where each round consists of a specific number of matches required to eliminate participants down to the next stage. You are given a list of integers where each integer represents the number of matches held in every round starting from round 1 to round `k`. This list is called `matches_per_round`. The total number of participants initially is given by `n`. Your task is to validate if the given list of matches per round is a valid single-elimination tournament structure for `n` participants. Remember, for a valid single-elimination tournament, each round must correctly half the participants until only one participant remains. Write a function `is_valid_tournament(n: int, matches_per_round: List[int]) -> bool` that returns `True` if the provided structure is valid and `False` otherwise. # Input: - `n`: An integer (1 ≤ n ≤ 10^9) representing the total number of participants. - `matches_per_round`: A list of integers with `k` elements (1 ≤ k ≤ 10^6), where each element indicates the number of matches in that round. # Output: - Return `True` if the given `matches_per_round` is a valid single-elimination tournament structure for `n` participants, otherwise `False`. # Example: ```python assert is_valid_tournament(8, [4, 2, 1]) == True assert is_valid_tournament(8, [3, 2, 1]) == False assert is_valid_tournament(16, [8, 4, 2, 1]) == True assert is_valid_tournament(3, [1, 1]) == False ``` # Explanation: In the first example, starting with 8 participants: - Round 1: 4 matches, eliminating 4 participants, 4 remain. - Round 2: 2 matches, eliminating 2 participants, 2 remain. - Round 3: 1 match, eliminating 1 participant, 1 remains. This is a valid structure, so the function returns `True`. In the second example, round 1 has 3 matches, but this does not halve 8 participants correctly, hence the function returns `False`.","solution":"def is_valid_tournament(n, matches_per_round): Validates if the given single-elimination tournament matches structure is correct for `n` participants. Parameters: n (int): Total number of participants matches_per_round (list of int): List of integers representing number of matches in each round Returns: bool: True if the structure is valid, False otherwise current_participants = n if current_participants < 1: return False for matches in matches_per_round: if matches * 2 != current_participants: return False current_participants //= 2 return current_participants == 1 # Example usage assert is_valid_tournament(8, [4, 2, 1]) == True assert is_valid_tournament(8, [3, 2, 1]) == False assert is_valid_tournament(16, [8, 4, 2, 1]) == True assert is_valid_tournament(3, [1, 1]) == False"},{"question":"ou are given a list of n unique integers. You must rearrange the integers in such a way that the absolute difference between any two adjacent integers is minimized. Determine the minimum possible sum of absolute differences between adjacent integers in the rearranged list. The first line contains a single integer n — the size of the list (2 le n le 10^5). The following line contains n unique integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9). Output a single integer — the minimum possible sum of absolute differences between adjacent integers. # Example Input ``` 4 4 2 1 3 ``` Output ``` 3 ``` Explanation Given the input array `[4, 2, 1, 3]`, one optimal rearrangement is `[1, 2, 3, 4]`. This arrangement has the minimum possible sum of absolute differences, which is calculated as: |1 - 2| + |2 - 3| + |3 - 4| = 1 + 1 + 1 = 3","solution":"def min_abs_diff_sum(n, arr): Returns the minimum possible sum of absolute differences between adjacent integers in the rearranged list. Parameters: n (int): The number of elements in the list. arr (list of int): The list of unique integers. Returns: int: The minimum possible sum of absolute differences. arr.sort() # Sort the array min_sum = 0 for i in range(1, n): min_sum += abs(arr[i] - arr[i-1]) return min_sum"},{"question":"You are given an integer array \\"nums\\". We define a pair (i, j) to be a \\"good pair\\" if and only if nums[i] == nums[j] and i < j. Write a function that returns the number of good pairs in the array. # Input - The first line of input contains an integer n (1 ≤ n ≤ 103) — the number of elements in the array. - The second line contains n integers nums[i] (1 ≤ nums[i] ≤ 103) — the elements of the array. # Output - Print a single integer — the number of good pairs. # Example Input ``` 4 1 2 3 1 ``` Output ``` 1 ``` Input ``` 6 1 1 1 1 1 1 ``` Output ``` 15 ``` # Note In the first example, there is one good pair: (0, 3). In the second example, each element has 5 good pairs with the subsequent elements. Hence, the number of good pairs is `6 choose 2`, which equals 15.","solution":"def count_good_pairs(nums): Counts the number of good pairs in the array where nums[i] == nums[j] and i < j. from collections import defaultdict count = 0 num_count = defaultdict(int) # To count occurrences of each number for num in nums: count += num_count[num] # Each occurrence of num before this index adds to the count num_count[num] += 1 # Increment the count of this num for future indices return count"},{"question":"You have recently discovered a game that involves designing unique patterns using a grid of asterisks (\'*\'). The specific requirements for the patterns are as follows: 1. The grid must be a square (N x N). 2. There should be an odd number of rows and columns (i.e., N is odd). 3. The pattern should be symmetric along both the main diagonals. Given these constraints, your task is to generate such a symmetric pattern for a given odd integer N (1 ≤ N ≤ 49). For example, if N = 5, a valid pattern looks like this: ``` * * * * * * * * * ``` # Input A single integer N, where N is an odd integer representing the size of the grid. # Output Output the symmetric pattern of size N x N using asterisks (\'*\') for the specified arrangement. # Example **Sample Input:** ``` 5 ``` **Sample Output:** ``` * * * * * * * * * ``` **Explanation:** The output should be an N x N grid where each main diagonal and anti-diagonal are lined with asterisks (\'*\'). The characters not part of these diagonals should be spaces. Write a function to solve the problem described above.","solution":"def generate_symmetric_pattern(N): Generates a symmetric pattern of asterisks of size N x N. Args: N (int): Size of the grid (N should be an odd number). Returns: List[str]: A list of strings where each string represents a row of the pattern. pattern = [] for i in range(N): row = [\\" \\"] * N row[i] = \\"*\\" # main diagonal row[N - i - 1] = \\"*\\" # anti-diagonal pattern.append(\\"\\".join(row)) return pattern"},{"question":"You are given a list of user reviews for various products, where each review consists of a string of text. Your task is to perform sentiment analysis on these reviews to determine whether each review is positive or negative. A review is considered positive if it contains more positive words than negative words, and negative otherwise. The list of positive and negative words will be provided as input. Your code will be given three inputs: 1. A list of strings representing the reviews. 2. A list of strings representing positive words. 3. A list of strings representing negative words. Your task is to classify each review as either \\"positive\\" or \\"negative\\" based on the sentiment analysis. Your code should output a list of classifications, where each classification corresponds to the respective review in the input list. Function Signature: ```python def classify_reviews(reviews: List[str], positive_words: List[str], negative_words: List[str]) -> List[str]: pass ``` **Example:** ```python reviews = [ \\"I love this product, it is amazing!\\", \\"This is the worst thing I have ever bought.\\", \\"Not bad, could be better.\\", \\"Absolutely fantastic! Would buy again.\\" ] positive_words = [\\"love\\", \\"amazing\\", \\"fantastic\\"] negative_words = [\\"worst\\", \\"bad\\"] print(classify_reviews(reviews, positive_words, negative_words)) # Output: [\\"positive\\", \\"negative\\", \\"negative\\", \\"positive\\"] ``` # Constraints: - The length of the reviews list will not exceed 1000. - Each review will have a maximum length of 1000 characters. - The total length of positive and negative words list combined will not exceed 2000 words. - All comparison should be case-insensitive. # Considerations: - Strip punctuation from reviews before performing word matching. - Manage ties (equal number of positive and negative words) by classifying the review as \\"negative\\".","solution":"import string from typing import List def classify_reviews(reviews: List[str], positive_words: List[str], negative_words: List[str]) -> List[str]: Classifies each review as either \\"positive\\" or \\"negative\\" based on the sentiment analysis. positive_words_set = set(word.lower() for word in positive_words) negative_words_set = set(word.lower() for word in negative_words) classifications = [] for review in reviews: # Normalize the review text by converting to lower case and stripping punctuation normalized_review = review.lower().translate(str.maketrans(\'\', \'\', string.punctuation)) words = normalized_review.split() # Count positive and negative words positive_count = sum(1 for word in words if word in positive_words_set) negative_count = sum(1 for word in words if word in negative_words_set) # Determine the sentiment of the review if positive_count > negative_count: classifications.append(\\"positive\\") else: classifications.append(\\"negative\\") return classifications # Example Usage reviews = [ \\"I love this product, it is amazing!\\", \\"This is the worst thing I have ever bought.\\", \\"Not bad, could be better.\\", \\"Absolutely fantastic! Would buy again.\\" ] positive_words = [\\"love\\", \\"amazing\\", \\"fantastic\\"] negative_words = [\\"worst\\", \\"bad\\"] print(classify_reviews(reviews, positive_words, negative_words)) # Output: [\\"positive\\", \\"negative\\", \\"negative\\", \\"positive\\"]"},{"question":"The sequence a1, a2,..., an is called k-sorted if ai ≤ ai+k for all i (1 ≤ i ≤ n-k). For instance, the array [3, 1, 4, 2, 5] is 2-sorted because 3 ≤ 4 and 1 ≤ 2 and 4 ≤ 5. Given an array of n integers and an integer k (1 ≤ k ≤ n), you need to determine if the array is k-sorted. The input consists of two lines. The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n). The second line contains n integers representing the array. Output \\"Yes\\" if the array is k-sorted, and \\"No\\" otherwise. Example: Input: 5 2 3 1 4 2 5 Output: Yes","solution":"def is_k_sorted(n, k, arr): Determines if the array is k-sorted. for i in range(n - k): if arr[i] > arr[i + k]: return \\"No\\" return \\"Yes\\" # Example usage: # n, k = 5, 2 # arr = [3, 1, 4, 2, 5] # print(is_k_sorted(n, k, arr)) # Output: Yes"},{"question":"You are given a matrix of size n x m filled with integers. Each integer represents the height of a cell in a grid. A cell is considered a \\"peak\\" if it is strictly greater than all of its neighbors. Two cells are neighbors if they share a side (left, right, top, bottom). Write a program to find all the peak positions in the matrix. The input consists of multiple lines: - The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the matrix. - The next n lines contain m integers each, representing the height of the cells in the matrix. The output should contain the number of peaks followed by the positions of these peaks. Each position should be represented as a pair of indices (i, j), where 1 ≤ i ≤ n and 1 ≤ j ≤ m. If there are no peaks, the output should only contain the number 0. Example input: ``` 3 3 1 2 1 2 4 2 1 2 1 ``` Example output: ``` 1 2 2 ``` In this example, the peak is the cell at position (2, 2) since it is greater than its immediate neighbors.","solution":"def find_peaks(matrix): Given a matrix of n x m filled with integers, find all the peak positions. A cell is considered a \\"peak\\" if it is strictly greater than all of its neighbors. n = len(matrix) m = len(matrix[0]) peaks = [] def is_peak(i, j): current = matrix[i][j] # Check top if i > 0 and matrix[i-1][j] >= current: return False # Check bottom if i < n - 1 and matrix[i+1][j] >= current: return False # Check left if j > 0 and matrix[i][j-1] >= current: return False # Check right if j < m - 1 and matrix[i][j+1] >= current: return False return True for i in range(n): for j in range(m): if is_peak(i, j): peaks.append((i + 1, j + 1)) if not peaks: return \\"0\\" else: result = str(len(peaks)) for peak in peaks: result += f\\"n{peak[0]} {peak[1]}\\" return result def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n, m = map(int, lines[0].split()) matrix = [list(map(int, line.split())) for line in lines[1:]] return matrix def solution(input_string): matrix = parse_input(input_string) return find_peaks(matrix)"},{"question":"John is competing in a coding challenge where he needs to minimize the overall execution time of his program. He has a set of `n` tasks, each with a specific processing time. John has access to two processors, `A` and `B`, which can run tasks in parallel. He can assign each task to either processor. The goal is to distribute the tasks between the two processors in such a way that the overall execution time is minimized. The first line contains an integer `n` (1 ≤ n ≤ 100,000) — the number of tasks. The second line contains `n` integers `t1, t2, ..., tn` (1 ≤ ti ≤ 1,000,000) — the processing times of the tasks. Output two lines: 1. The processing times assigned to processor `A`, space-separated. 2. The processing times assigned to processor `B`, space-separated. If there are multiple valid distributions, any one of them will be accepted. The execution time on each processor is the sum of the processing times of the tasks assigned to that processor. The objective is to minimize the maximum execution time between the two processors. Example: Input: 5 2 3 7 8 10 Output: 2 8 3 7 10 Explanation: One possible assignment is: Processor A: tasks with times [2, 8] Processor B: tasks with times [3, 7, 10] The sum of processing times on processor A is 2 + 8 = 10. The sum of processing times on processor B is 3 + 7 + 10 = 20. The maximum of these sums is 20, which is minimized. Other assignments may be possible as long as they yield the same minimized maximum execution time.","solution":"def assign_tasks_to_processors(n, task_times): Distributes tasks between two processors to minimize the maximum execution time. :param n: Number of tasks :param task_times: List of processing times of the tasks :return: Two lists representing tasks assigned to processor A and processor B task_times = sorted(task_times, reverse=True) proc_a, proc_b = [], [] sum_a, sum_b = 0, 0 for time in task_times: if sum_a <= sum_b: proc_a.append(time) sum_a += time else: proc_b.append(time) sum_b += time return proc_a, proc_b"},{"question":"You are given an integer n and a list of n non-negative integers. Your task is to find the maximum product of any two distinct elements in the list. Write a function `max_product` that takes an integer n and a list of n non-negative integers as input and returns the maximum product of any two distinct elements in the list. # Input - The first line contains an integer n (1 leq n leq 10^5) — the number of elements in the list. - The second line contains n non-negative integers separated by spaces — elements of the list. Each element is at most 10^5. # Output - Output a single integer — the maximum product of any two distinct elements in the list. # Example Example 1 Input: ``` 5 1 2 3 4 5 ``` Output: ``` 20 ``` Explanation: The maximum product is obtained by multiplying 4 and 5. Example 2 Input: ``` 6 10 9 8 7 6 5 ``` Output: ``` 90 ``` Explanation: The maximum product is obtained by multiplying 9 and 10.","solution":"def max_product(n, elements): if n < 2: return 0 # since there are not enough elements to form a product elements.sort() return elements[-1] * elements[-2]"},{"question":"A city is represented as a grid of size n x m (1 ≤ n, m ≤ 100). Each cell in the grid represents either a building, an obstacle, or an empty space. The task is to determine the shortest path from a given starting point to a destination point, moving only through empty spaces. You can move up, down, left, or right, but not diagonally, and you cannot pass through obstacles. If there is no path from the start to the destination, return -1. Input: - First line contains two integers n and m, the number of rows and columns in the grid. - The following n lines contain m characters each, where: - \'.\' represents an empty space. - \'#\' represents an obstacle. - \'S\' represents the starting point. - \'D\' represents the destination. Output: - A single integer representing the length of the shortest path from \'S\' to \'D\'. If no such path exists, return -1. Example: ``` Input: 5 5 S...# ..# ....# .#. ...D# Output: 7 Input: 3 3 S .#. D Output: -1 ``` Note: In the first example, the shortest path from \'S\' to \'D\' passes through (0,0), (1,0), (2,0), (2,1), (2,2), (2,3), and (3,3), covering 7 steps. In the second example, there is no possible path from \'S\' to \'D\' due to obstacles.","solution":"from collections import deque def shortest_path(grid): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Find the start and destination points start = (-1, -1) destination = (-1, -1) for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': destination = (i, j) if start == (-1, -1) or destination == (-1, -1): return -1 queue = deque([(start, 0)]) visited = set([start]) while queue: (current, distance) = queue.popleft() if current == destination: return distance for direction in directions: next_i = current[0] + direction[0] next_j = current[1] + direction[1] next_position = (next_i, next_j) if 0 <= next_i < n and 0 <= next_j < m and grid[next_i][next_j] in (\'.\', \'D\') and next_position not in visited: visited.add(next_position) queue.append((next_position, distance + 1)) return -1"},{"question":"In the ZY country, there are n cities, numbered from 1 to n, and n - 1 roads, connecting them such that they form a tree structure. The central government has decided to implement a new high-speed transportation system called \\"Express Trains\\". Each train route starts at a city and goes directly to another city without intermediate stops. You are given m train routes, each route described by 2 integers a and b indicating a train traveling from city a to city b. You can travel between these cities by train only in the specified direction. You are asked q queries. Each query asks if it is possible to get from one city to another using only the train routes and what is the shortest path length in terms of the number of train routes used. The first line contains a single integer n (2 le n le 10^5), the number of cities. The second line contains n - 1 integers p_2, p_3, ldots, p_n (1 le p_i < i), where p_i means that cities p_i and i are connected by a road. The third line contains a single integer m (1 le m le 10^5), the number of train routes. Each of the next m lines contains 2 integers a and b (1 le a, b le n, a neq b), meaning that there is a one-way train route from city a to city b. The next line contains a single integer q (1 le q le 10^5), the number of queries. Each of the next q lines contains 2 integers v and u (1 le v, u le n, v neq u), meaning that you are asked if it is possible to travel from city v to city u using the train routes and what is the minimum number of trains needed. Print the answer for each query on a separate line. If it is not possible to travel from one city to the other using the train routes, print -1. Otherwise, print the shortest path length in terms of the number of train routes used.","solution":"from collections import defaultdict, deque def bfs_shortest_path(graph, start, end): Uses BFS to find the shortest path in a directed graph from start to end city. Returns the length of shortest path or -1 if no path exists. visited = set() queue = deque([(start, 0)]) while queue: current, depth = queue.popleft() if current == end: return depth if current not in visited: visited.add(current) for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, depth + 1)) return -1 def solve_trains_and_queries(n, roads, m, routes, q, queries): graph = defaultdict(list) for a, b in routes: graph[a].append(b) results = [] for v, u in queries: results.append(bfs_shortest_path(graph, v, u)) return results"},{"question":"Given a string s, determine the length of the smallest substring that, when repeated some number of times, forms the entire string s. You need to find the length of this smallest substring and print it. Input The input consists of one string s, which is made up of lowercase English letters and has a length n (1 ≤ n ≤ 10^5). Output Print an integer representing the length of the smallest substring that can be repeated to form the entire string. Example Input: ababab Output: 2 Explanation: In the example, \\"ab\\" is the smallest substring that can be repeated 3 times (\\"ab\\" + \\"ab\\" + \\"ab\\") to form the entire string \\"ababab\\". Hence, the output is 2.","solution":"def smallest_substring_length(s): Returns the length of the smallest substring that, when repeated some number of times, forms the entire string s. n = len(s) for i in range(1, n + 1): if n % i == 0: if s[:i] * (n // i) == s: return i return n"},{"question":"You are given an array of integers where each element\'s value represents the height of a tower. You want to perform some operations to make the skyline of the towers meet certain conditions. Specifically, you want to ensure that from left to right, each tower is either the same height or strictly taller than the one before it. You are allowed to increase the height of the towers but you are not allowed to decrease any heights. Write a function that takes an array of integers as input and returns the minimum total increase in height needed so that the elements fulfill the required condition. # Input: - The input consists of a single line containing a list of space-separated integers, representing the heights of the towers. # Output: - Print a single integer, the minimum total increase needed. # Example: ``` Input: 3 2 5 4 7 Output: 2 ``` # Explanation: - You can increase the second tower\'s height from 2 to 3 (1 increase) and the fourth tower\'s height from 4 to 5 (1 increase). This will result in the heights [3, 3, 5, 5, 7], which meets the condition where each tower is the same height or strictly taller than the previous one. The minimum total increase needed is 2.","solution":"def min_increase_needed(heights): Returns the minimum total increase needed so that each tower is either the same height or taller than the one before it. total_increase = 0 for i in range(1, len(heights)): if heights[i] < heights[i-1]: total_increase += heights[i-1] - heights[i] heights[i] = heights[i-1] return total_increase # Example usage: heights = [3, 2, 5, 4, 7] print(min_increase_needed(heights)) # Output: 2"},{"question":"Julia is working on a project and encounters a challenge with formatting sequences of numbers. Each sequence is represented as a string of digits without separators. Julia needs to format each sequence by inserting a specific separator between every pair of digits. The separator can be any character except a digit or a whitespace. Given a list of sequences and a specified separator, help Julia format these sequences as required. Your task is to write a function that takes the list of sequences and the separator and returns the formatted sequences. If the separator is not valid (i.e., it is a digit or whitespace), return the string \\"Invalid separator\\" (quotes for clarity). # Input - The first line contains an integer n (1 le n le 1000) — the number of sequences. - The following n lines each contain a sequence of digits, represented as a string. It is guaranteed that the length of each sequence is between 1 and 1000 digits. - The last line contains the separator, which is a single character. # Output - If the separator is valid, output n formatted sequences, each on a new line. - If the separator is invalid, output \\"Invalid separator\\". # Examples **Example 1:** ``` 4 123 4567 89 0 - ``` Output: ``` 1-2-3 4-5-6-7 8-9 0 ``` **Example 2:** ``` 3 98765 4321 11111 * ``` Output: ``` 9*8*7*6*5 4*3*2*1 1*1*1*1*1 ``` **Example 3:** ``` 2 555 00 x ``` Output: ``` 5x5x5 0x0 ``` **Example 4:** ``` 2 123 456 5 ``` Output: \\"Invalid separator\\" ``` **Example 5:** ``` 1 12 _ ``` Output: ``` 1_2 ``` # Note Ensure you handle edge cases, such as when the sequence has only one digit (in which case no separator is added) and check for the validity of the separator character before processing the sequences.","solution":"def format_sequences(sequences, separator): Formats each sequence by inserting the separator between every pair of digits. Args: sequences: List of strings, each string is a sequence of digits. separator: A single character which is used as separator. Returns: List of formatted sequences or \\"Invalid separator\\" string. if separator.isdigit() or separator.isspace(): return \\"Invalid separator\\" formatted_sequences = [] for sequence in sequences: formatted_sequences.append(separator.join(sequence)) return formatted_sequences"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a positive weight. You need to find the shortest path from node 1 to node n and print the path. If there are multiple shortest paths, print any one of them. The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of nodes and the number of edges. The next m lines contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000) — indicating an edge between node u and node v with weight w. If there is no path from node 1 to node n, print -1. Otherwise, print the length of the shortest path, followed by the nodes in the path in the order they are visited. Example input: ``` 5 5 1 2 2 2 3 3 1 3 6 3 4 1 4 5 2 ``` Example output: ``` 8 1 2 3 4 5 ``` Explanation: One of the shortest paths from node 1 to node 5 is through nodes 1 -> 2 -> 3 -> 4 -> 5 with a total weight of 8.","solution":"import heapq def shortest_path(n, m, edges): # Create adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm implementation def dijkstra(start): distances = {node: float(\'infinity\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] parents = {node: None for node in range(1, n + 1)} while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance parents[neighbor] = current_node heapq.heappush(priority_queue, (distance, neighbor)) return distances, parents distances, parents = dijkstra(1) if distances[n] == float(\'infinity\'): return -1 path = [] current = n while current: path.append(current) current = parents[current] return distances[n], path[::-1] # Function to process input and call the shortest_path function. def find_shortest_path(n, m, edge_list): result = shortest_path(n, m, edge_list) if result == -1: return \\"-1\\" else: distance, path = result return f\\"{distance}n{\' \'.join(map(str, path))}\\""},{"question":"You are given an integer array A of length n. Your task is to count the number of triplets (i, j, k) such that: - 1 leq i < j < k leq n - A[i] < A[j] < A[k] Compute this count modulo 10^9 + 7. # Input The first line contains an integer n (1 leq n leq 1,000), the length of the array. The second line contains n space-separated integers A[i] (1 leq A[i] leq 10^9), the elements of the array. # Output Print a single integer, the count of triplets that satisfy the given conditions modulo 10^9 + 7. # Example Input ``` 5 2 4 3 1 5 ``` Output ``` 2 ``` # Explanation In this example, the valid triplets are: - (2, 4, 5) - (2, 3, 5)","solution":"def count_triplets(n, A): MOD = 10**9 + 7 count = 0 for j in range(1, n-1): count_i = 0 # count of elements A[i] < A[j] count_k = 0 # count of elements A[k] > A[j] for i in range(0, j): if A[i] < A[j]: count_i += 1 for k in range(j+1, n): if A[k] > A[j]: count_k += 1 count = (count + count_i * count_k) % MOD return count"},{"question":"A new video streaming company wants to implement a feature that allows users to filter and search for movies according to certain criteria. You need to design a function for this feature. The function should take a list of movies and a list of conditions, and return a list of movies that satisfy all the conditions. Each movie is represented by a dictionary with the following keys: - \\"title\\" (a string): the title of the movie. - \\"year\\" (an integer): the release year of the movie. - \\"genre\\" (a list of strings): the genres that the movie belongs to. - \\"rating\\" (a float): the rating of the movie. The conditions will be provided as a list of tuples, where each tuple contains three elements: - The first element is the key to filter on (either \\"year\\", \\"genre\\" or \\"rating\\"). - The second element is the condition type (either \\"eq\\", \\"gt\\", \\"lt\\" for \\"equal to\\", \\"greater than\\" or \\"less than\\"). - The third element is the value to filter by: - If the key is \\"year\\" or \\"rating\\", the value will be an integer or float. - If the key is \\"genre\\", the value will be a string representing the genre. Your task is to implement the function `filter_movies(movies, conditions)` where: - `movies` is a list of dictionaries, each representing a movie. - `conditions` is a list of tuples, each representing a condition to filter the movies. The function should return a list of movies that satisfy all the given conditions. # Example ```python movies = [ {\\"title\\": \\"Inception\\", \\"year\\": 2010, \\"genre\\": [\\"Action\\", \\"Adventure\\", \\"Sci-Fi\\"], \\"rating\\": 8.8}, {\\"title\\": \\"The Godfather\\", \\"year\\": 1972, \\"genre\\": [\\"Crime\\", \\"Drama\\"], \\"rating\\": 9.2}, {\\"title\\": \\"Toy Story\\", \\"year\\": 1995, \\"genre\\": [\\"Animation\\", \\"Adventure\\", \\"Comedy\\"], \\"rating\\": 8.3}, {\\"title\\": \\"Parasite\\", \\"year\\": 2019, \\"genre\\": [\\"Comedy\\", \\"Drama\\", \\"Thriller\\"], \\"rating\\": 8.6} ] conditions = [(\\"year\\", \\"gt\\", 2000), (\\"genre\\", \\"eq\\", \\"Drama\\"), (\\"rating\\", \\"gt\\", 8.5)] print(filter_movies(movies, conditions)) ``` **Output:** ``` [{\'title\': \'Parasite\', \'year\': 2019, \'genre\': [\'Comedy\', \'Drama\', \'Thriller\'], \'rating\': 8.6}] ```","solution":"def filter_movies(movies, conditions): Filters the given list of movies based on the provided conditions. :param movies: List of dictionaries, where each dictionary represents a movie. :param conditions: List of tuples, where each tuple contains a key, condition type, and value to filter by. :return: List of dictionaries representing the movies that satisfy all the conditions. def check_condition(movie, key, condition_type, value): if key == \\"year\\" or key == \\"rating\\": if condition_type == \\"eq\\" and movie[key] == value: return True elif condition_type == \\"gt\\" and movie[key] > value: return True elif condition_type == \\"lt\\" and movie[key] < value: return True elif key == \\"genre\\": if condition_type == \\"eq\\" and value in movie[key]: return True return False filtered_movies = [] for movie in movies: if all(check_condition(movie, key, condition_type, value) for key, condition_type, value in conditions): filtered_movies.append(movie) return filtered_movies"},{"question":"You are given a rectangular grid of size `m` x `n`, filled with numbers. You are also given a list of unique numbers called \\"lucky numbers\\". You need to find the largest sum possible by picking numbers from the grid such that no two chosen numbers are in the same row or column, and all chosen numbers are \\"lucky numbers\\". The first line contains two space-separated integers `m` and `n` (1 ≤ m, n ≤ 50), representing the number of rows and columns of the grid, respectively. The next `m` lines contain `n` space-separated integers each, representing the numbers in the grid. The following line contains an integer `k` (1 ≤ k ≤ min(m, n)), indicating the number of lucky numbers. The last line contains `k` space-separated integers, representing the lucky numbers. Print a single integer representing the largest sum of chosen lucky numbers, or 0 if no valid sum can be obtained. Example: Input: 3 3 1 2 3 4 5 6 7 8 9 2 5 7 Output: 12 In this example, you can choose 7 from the third row and first column, and 5 from the second row and second column. The sum is 7 + 5 = 12.","solution":"def largest_lucky_sum(m, n, grid, k, lucky_numbers): lucky_set = set(lucky_numbers) # Create a list of all positions of lucky numbers in the grid lucky_positions = [] for i in range(m): for j in range(n): if grid[i][j] in lucky_set: lucky_positions.append((grid[i][j], i, j)) # Sort the lucky positions based on the value in descending order lucky_positions.sort(reverse=True, key=lambda x: x[0]) def backtrack(selected_rows, selected_cols, current_sum, index): if len(selected_rows) == k or index == len(lucky_positions): return current_sum max_sum = current_sum for i in range(index, len(lucky_positions)): value, row, col = lucky_positions[i] if row not in selected_rows and col not in selected_cols: selected_rows.add(row) selected_cols.add(col) max_sum = max(max_sum, backtrack(selected_rows, selected_cols, current_sum + value, i + 1)) selected_rows.remove(row) selected_cols.remove(col) return max_sum return backtrack(set(), set(), 0, 0)"},{"question":"You are given a string consisting only of letters and spaces. The string represents a sentence with words separated by single spaces. Your task is to write a function that reverses the order of words in the sentence while keeping the spaces between the words exactly as they were in the input. The input string has the following constraints: - The length of the string does not exceed 100 characters. - The string has at least one word. - Words are sequences of letters (both uppercase and lowercase) and can be separated by one or more spaces. Write a function `reverse_words(sentence: str) -> str` that takes a string `sentence` as input and returns a new string with the words in reverse order. # Example ```python reverse_words(\\"the sky is blue\\") # returns \\"blue is sky the\\" reverse_words(\\" hello world! \\") # returns \\" world! hello \\" reverse_words(\\"a good example\\") # returns \\"example good a\\" ``` # Note - Pay attention to leading, trailing, and multiple spaces between words in the input string. - Make sure that the return string preserves the spaces in the same manner as the original string.","solution":"def reverse_words(sentence: str) -> str: Reverses the order of words in the sentence while keeping the spaces between the words exactly as they were in the input. words = sentence.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"Construct a function `can_escape(caves: List[List[int]]) -> str` that determines if a character can escape from a grid of caves. The character starts at the top-left corner of the grid and needs to reach the bottom-right corner. The grid is represented as a list of lists, where `1` indicates an open cave and `0` indicates a collapsed cave that the character cannot pass through. The character can only move right or down at each step. Input: - `caves`: a list of lists of integers, representing the grid. Output: - Return \\"YES\\" if the character can escape, otherwise return \\"NO\\". Example: ```python def can_escape(caves): # Your implementation here # Test cases to validate the solution assert can_escape([[1, 0, 0], [1, 1, 0], [0, 1, 1]]) == \\"YES\\" # Possible path (1,1), (2,1), (2,2), (3,3) assert can_escape([[1, 0], [0, 1]]) == \\"NO\\" # No possible path assert can_escape([[1, 1, 0], [1, 1, 1], [0, 0, 1]]) == \\"YES\\" # Possible path (1,1), (1,2), (2,2), (2,3), (3,3) assert can_escape([[1, 1], [0, 0]]) == \\"NO\\" # No possible path assert can_escape([[1]]) == \\"YES\\" # Already at the destination ```","solution":"def can_escape(caves): Determine if a character can escape from a grid of caves. The character starts at the top-left corner of the grid and needs to reach the bottom-right corner. The grid is represented as a list of lists, where 1 indicates an open cave and 0 indicates a collapsed cave. The character can only move right or down at each step. Args: caves (list of list of int): A list of lists of integers, representing the grid. Returns: str: \\"YES\\" if the character can escape, otherwise \\"NO\\". rows = len(caves) cols = len(caves[0]) if caves[0][0] == 0 or caves[rows-1][cols-1] == 0: return \\"NO\\" def dfs(r, c): if r == rows - 1 and c == cols - 1: return True if r < rows - 1 and caves[r + 1][c] == 1: caves[r + 1][c] = -1 if dfs(r + 1, c): return True if c < cols - 1 and caves[r][c + 1] == 1: caves[r][c + 1] = -1 if dfs(r, c + 1): return True return False if dfs(0, 0): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers arr of length n. Your task is to find the maximum sum of a subsequence such that no two elements of the subsequence are adjacent elements in the given array. For example, if the given array is [3, 2, 5, 10, 7], the possible subsequences without adjacent elements include [3, 5, 7], [3, 10], [2, 10], and their respective sums are 15, 13, and 12. Therefore, the maximum sum would be 15. Write a function `maxNonAdjacentSum(arr)` that takes in an array of integers and returns the maximum sum of a subsequence with no adjacent elements. # Input - The first line contains an integer n (1 le n le 10^5), the length of the array. - The second line contains n integers arr_i (-10^4 le arr_i le 10^4), the elements of the array. # Output - Output a single integer, the maximum sum of a subsequence such that no two elements are adjacent. # Example Example 1 **Input:** ``` 5 3 2 5 10 7 ``` **Output:** ``` 15 ``` Example 2 **Input:** ``` 4 3 2 7 10 ``` **Output:** ``` 13 ``` Example 3 **Input:** ``` 3 3 2 5 ``` **Output:** ``` 8 ``` # Note In the first example, the subsequence [3, 5, 7] has the maximum sum 15. In the second example, the subsequence [3, 10] has the maximum sum 13. In the third example, the subsequence [3, 5] has the maximum sum 8.","solution":"def maxNonAdjacentSum(arr): if not arr: return 0 n = len(arr) if n == 1: return max(0, arr[0]) dp = [0] * n dp[0] = max(0, arr[0]) # In case arr[0] is negative dp[1] = max(dp[0], arr[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + arr[i]) return dp[-1]"},{"question":"Tim has a rectangular garden with dimensions M x N (1 ≤ M, N ≤ 10^4). He plans to plant flowers in some of the cells of the garden. However, he wants to ensure that the flowers are arranged in such a way that no two flowers are in adjacent cells. Two cells are considered adjacent if they share a side. Given the dimensions of the garden and the coordinates of the cells where Tim wants to plant flowers, help Tim verify if his arrangement is valid. If any of the flowers are adjacent, print \\"Invalid\\". Otherwise, print \\"Valid\\". # Input - The first line contains two integers, M and N, representing the dimensions of the garden. - The second line contains an integer K (0 ≤ K ≤ 10^5), representing the number of cells with flowers. - The next K lines each contain two integers, x and y (1 ≤ x ≤ M, 1 ≤ y ≤ N), representing the coordinates of a cell with a flower. # Output - Print \\"Valid\\" if no two cells with flowers are adjacent; otherwise, print \\"Invalid\\". # Example Input ``` 3 3 4 1 1 1 3 2 2 3 1 ``` Output ``` Valid ``` Input ``` 2 2 3 1 1 1 2 2 1 ``` Output ``` Invalid ```","solution":"def is_valid_arrangement(M, N, K, flower_positions): Validates if the arrangement of flowers is such that no two flowers are in adjacent cells. Parameters: M (int): Number of rows in the garden. N (int): Number of columns in the garden. K (int): Number of flowers. flower_positions (list of tuples): List of tuples where each tuple (x, y) represents the coordinates of a flower. Returns: str: \\"Valid\\" if no two flowers are in adjacent cells, otherwise \\"Invalid\\". flower_set = set(flower_positions) # Directions for neighboring cells (left, right, up, down) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for x, y in flower_positions: for dx, dy in directions: if (x + dx, y + dy) in flower_set: return \\"Invalid\\" return \\"Valid\\""},{"question":"Rita works as a data analyst and she has a matrix of integers with dimensions m x n. She needs to rotate the elements of the matrix by 90 degrees clockwise. Given the matrix, transform it and output the new matrix after rotation. The first line contains two space-separated integers m and n (1 ≤ m, n ≤ 100), the number of rows and columns in the matrix. The next m lines each contain n space-separated integers representing the rows of the matrix (each integer between -1000 and 1000). Output the rotated matrix in the same format as the input. For example: Input: 3 3 1 2 3 4 5 6 7 8 9 Output: 7 4 1 8 5 2 9 6 3 Input: 2 4 1 2 3 4 5 6 7 8 Output: 5 1 6 2 7 3 8 4","solution":"def rotate_matrix_90_degrees_clockwise(matrix): Rotates a given matrix 90 degrees clockwise. :param matrix: List of lists where each sublist represents a row in the matrix :return: Rotated matrix as a list of lists if not matrix: return [] # Transpose matrix and reverse each row rotated_matrix = [list(row) for row in zip(*matrix[::-1])] return rotated_matrix def rotate_matrix(m, n, matrix): Rotates the matrix of dimensions m x n by 90 degrees clockwise. :param m: number of rows :param n: number of columns :param matrix: the matrix to be rotated :return: rotated matrix rotated = rotate_matrix_90_degrees_clockwise(matrix) return rotated"},{"question":"Given N activities each represented by its start time and end time, determine the maximum number of activities that can be attended by a single person assuming that a person can only attend one activity at a time. # Input: - The first line contains a single integer N, the number of activities (1 ≤ N ≤ 100). - Each of the next N lines contains two integers, the start time and end time of an activity. # Output: - A single integer representing the maximum number of activities that can be attended by a single person. # Example: Input: ``` 4 1 3 2 5 3 9 6 8 ``` Output: ``` 2 ``` Explanation: The person can attend the activities [1, 3] and [6, 8], which is the maximum number of non-overlapping activities possible.","solution":"def max_activities(activities): Determines the maximum number of non-overlapping activities. Args: activities (list of tuple): A list of tuples where each tuple represents the start and end time of an activity. Returns: int: The maximum number of non-overlapping activities that can be attended by a single person. # Sort activities by their end time activities.sort(key=lambda x: x[1]) # Initialize the count of non-overlapping activities max_activities_count = 0 last_end_time = 0 # Iterate through sorted activities for start, end in activities: if start >= last_end_time: max_activities_count += 1 last_end_time = end return max_activities_count"},{"question":"Given a list of integers, determine if it\'s possible to rearrange the list such that the sum of every two consecutive elements is even. If it\'s possible, output one such rearrangement of the list. If it\'s not possible, return \\"-1\\". # Input: A single line containing an integer n (2 le n le 100) representing the number of integers in the list. A line containing n integers separated by spaces. # Output: If possible, output the rearranged list of n integers. If not, print \\"-1\\". # Example: Input: ``` 5 3 8 5 2 6 ``` Output: ``` 8 2 6 3 5 ``` Explanation: In the provided example, one possible correct rearrangement could be [8, 2, 6, 3, 5]. Every pairwise sum of consecutive elements is even: 8+2=10, 2+6=8, 6+3=9, 3+5=8. Note that different correct rearrangements could also exist.","solution":"def rearrange_list(n, lst): Returns a rearranged list such that the sum of every two consecutive elements is even, otherwise returns -1 if such a rearrangement is not possible. odds = [x for x in lst if x % 2 != 0] evens = [x for x in lst if x % 2 == 0] if abs(len(odds) - len(evens)) > 1: return \\"-1\\" if len(odds) > len(evens): combined_list = [None] * n combined_list[::2] = odds combined_list[1::2] = evens else: combined_list = [None] * n combined_list[::2] = evens combined_list[1::2] = odds return combined_list"},{"question":"A logistics company is setting up a new warehouse that consists of a grid of squares, some of which contain obstacles. The warehouse manager wants to install the shortest path tracking system that identifies the minimum number of moves a worker needs to travel from the starting point to the destination, avoiding all obstacles. Each square in the grid can be represented as a tuple (x, y). The worker can move up, down, left, or right in the grid, but cannot move diagonally or through any square that contains an obstacle. Given an `N x N` grid where \'S\' represents the starting point, \'D\' represents the destination, \'.\' represents an empty space the worker can walk on, and \'#\' represents an obstacle, determine the minimum number of moves required for the worker to reach the destination from the starting point. If it is not possible to reach the destination, output -1. The input will be given as follows: - The first line contains an integer N (1 ≤ N ≤ 100) — the size of the grid. - The following N lines each contain N characters representing the grid. Output a single integer — the minimum number of moves required to reach the destination, or -1 if the destination is not reachable. # Example Input: ``` 5 S...# ..... .#... ..#.. ....D ``` Output: ``` 8 ``` In this example, the shortest path from \'S\' to \'D\' requires 8 moves, and no obstacles block the way.","solution":"from collections import deque def min_moves(grid): def bfs(start, end): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # for movement: up, down, left, right queue = deque([(start[0], start[1], 0)]) # (x, y, distance) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and (nx, ny) not in visited: if grid[nx][ny] != \'#\': queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 N = len(grid) start = end = None for i in range(N): for j in range(N): if grid[i][j] == \'S\': start = (i, j) if grid[i][j] == \'D\': end = (i, j) if start is None or end is None: return -1 return bfs(start, end)"},{"question":"A group of friends is planning a hiking trip, and they need to ensure that they divide the items they are carrying in a way that the total weight is as evenly distributed as possible. Each item has a weight, and they need to split the items into two groups such that the absolute difference between the total weights of the two groups is minimized. You need to help them by writing a function that determines the minimal possible difference between the weights of the two groups. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of items. The second line contains n integers, where each integer wi (1 ≤ wi ≤ 1000) represents the weight of the ith item. Output a single integer — the minimal possible difference between the total weights of the two groups. Example: Input: 4 3 1 4 2 Output: 0 Explanation: The items can be divided into groups {3, 1} and {4, 2}. Both groups have a total weight of 4, so the minimal difference is 0. In this example, one optimal solution is to split the items into two groups: {3, 1} and {4, 2}. Both of these groups have a total weight of 4, so the minimal difference between the group weights is |4 - 4| = 0.","solution":"def minimal_difference(n, weights): total_weight = sum(weights) target = total_weight // 2 dp = [0] * (target + 1) for weight in weights: for j in range(target, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) return total_weight - 2 * dp[target]"},{"question":"You are a secret agent, working on a mission to intercept encrypted messages sent by an enemy organization. The enemy uses a special encoding technique that involves transforming strings using a specific set of rules. As part of your mission, you need to decode these messages. You are given a string S which represents an encoded message. You also have a set of transformation rules. Each rule is represented by a pair of strings (A, B) of equal length, where string A is replaced by string B in the encoded message to get closer to its original form. Your task is to apply these rules in sequence, for a given number of operations Q. Each operation can use any of the given rules exactly once, and the resulting transformation is cumulative. Input: - The first line contains an integer Q (1 ≤ Q ≤ 100), representing the number of operations. - The second line contains a string S (1 ≤ |S| ≤ 100), representing the encoded message. - The next line contains an integer R (1 ≤ R ≤ 50), representing the number of transformation rules. - The next R lines contain pairs of strings A and B (1 ≤ |A| = |B| ≤ 10), where A is the part of the message to be replaced by B. Output: - The final decoded message after applying Q operations. Example: Input: ``` 3 abcde 2 ab xx cd yy ``` Output: ``` xxyye ``` Explanation: 1. In the first operation, \\"ab\\" in \\"abcde\\" is replaced by \\"xx\\", resulting in \\"xxcde\\". 2. In the second operation, \\"cd\\" in \\"xxcde\\" is replaced by \\"yy\\", resulting in \\"xxyye\\". 3. No further operations are required, as we have completed Q operations. Help the secret agent decode the message and successfully complete the mission.","solution":"def decode_message(Q, S, R, rules): Decodes the message S using the provided rules exactly Q times. Parameters: Q (int): Number of operations to perform. S (str): Encoded message. R (int): Number of transformation rules. rules (List[Tuple[str, str]]): List of transformation rules. Returns: str: The decoded message after applying Q operations. for _ in range(Q): for A, B in rules: if A in S: S = S.replace(A, B, 1) break return S"},{"question":"You are participating in a coding competition where you need to solve a problem involving string manipulations. The problem is defined as follows: You are given a string consisting of lowercase English letters. You need to find the longest substring that contains only vowels (a, e, i, o, u). If there are multiple substrings with the same length, return the one that appears first. The functionality must be implemented as a function: ```python def longest_vowel_substring(s: str) -> str: # Your implementation here ``` # Input - A single string `s` (1 ≤ |s| ≤ 100,000) consisting of only lowercase English letters. # Output - A single string which is the longest substring containing only vowels. If there are multiple such substrings with the same length, return the one that appears first. # Example Input ``` aeiouxyzuaie ``` Output ``` aeiou ``` Explanation In this case, the longest substring containing only vowels is \\"aeiou\\", which appears first. Input ``` xyzuaiexyzaeiou ``` Output ``` aeiou ``` The first string \\"uaie\\" and the second string \\"aeiou\\" have lengths 4 and 5 respectively, so the answer is \\"aeiou\\". Write the function `longest_vowel_substring` to solve the problem as described.","solution":"def longest_vowel_substring(s: str) -> str: vowels = set(\'aeiou\') max_length = 0 max_substring = \\"\\" current_length = 0 current_start = 0 for i, char in enumerate(s): if char in vowels: if current_length == 0: current_start = i current_length += 1 if current_length > max_length: max_length = current_length max_substring = s[current_start:current_start + current_length] else: current_length = 0 return max_substring"},{"question":"Berland Zoo has decided to build a new circular enclosure for their animals. In order to maximize the use of the available land, they have divided the land into smaller square plots of 1x1 meters. For safety and aesthetic reasons, they want to position the circular enclosure in such a way that the center of the circle is at the center of one of these 1x1 meter plots. The task is to determine how many of these 1x1 meter plots fall inside the circular enclosure, including those plots whose edges or vertices touch the border of the circle. You are given the radius of the circular enclosure as an integer. The center of the enclosure is always at the coordinate (0, 0) of the Cartesian plane, and the radius is also an integer value. Input: A single integer r, the radius of the circular enclosure. Output: An integer, the number of 1x1 meter plots that lie completely or partially inside the circle. A plot is considered to be inside the circle if any part of it touches or lies within the circle. Example: Input: 5 Output: 81","solution":"import math def count_squares_in_circle(radius): Returns the number of 1x1 meter square plots that fall inside a circle of given radius. The center of the circle is at the coordinate (0,0) of the Cartesian plane. count = 0 r = radius # Only need to count in one quadrant and multiply since the circle is symmetrical for x in range(-r, r + 1): for y in range(-r, r + 1): if x ** 2 + y ** 2 <= r ** 2: count += 1 return count # Example to see the output print(count_squares_in_circle(5))"},{"question":"Write a function that simulates a system of elevators. The function must decide the optimal elevator to call based on the current state of all elevators, and the floor from which the call is made. Each elevator can be in one of three states: \\"moving up\\", \\"moving down\\" or \\"idle\\". The elevator system is represented as a list of dictionaries where each dictionary contains the current state of an elevator and the floor it is on. Your task is to implement the function `choose_elevator(elevators: List[Dict[str, Union[int, str]]], call_floor: int) -> int` that returns the index of the best elevator to answer the call from `call_floor`. # Input - `elevators`: A list of dictionaries representing the elevators. Each dictionary contains: - `floor` (an integer): The current floor the elevator is on. - `state` (a string): The current state of the elevator. It can be `\\"up\\"`, `\\"down\\"` or `\\"idle\\"`. - `call_floor`: An integer representing the floor from where the call was made. # Output - An integer representing the index of the best elevator to answer the call. # Constraints - There will always be at least one elevator in the list. - The system will not have more than 100 elevators. - All elevator floors and call_floor will be within the range 1 to 100. # Example ```python elevators = [ {\\"floor\\": 3, \\"state\\": \\"idle\\"}, {\\"floor\\": 6, \\"state\\": \\"down\\"}, {\\"floor\\": 2, \\"state\\": \\"up\\"}, ] call_floor = 4 print(choose_elevator(elevators, call_floor)) # Expected output: 0, because the first elevator is closest and idle. ``` # Note - If an elevator is idle, it can serve the call immediately. - If an elevator is moving towards the call floor, it should be given preference. - If all elevators are moving away from the call floor, select the one that has the minimum travel distance once it changes direction.","solution":"def choose_elevator(elevators, call_floor): best_index = None best_distance = float(\'inf\') for i, elevator in enumerate(elevators): state = elevator[\'state\'] floor = elevator[\'floor\'] if state == \\"idle\\": distance = abs(floor - call_floor) elif state == \\"up\\": if floor <= call_floor: distance = call_floor - floor # Moving towards the call floor else: distance = float(\'inf\') # Moving away from the call floor elif state == \\"down\\": if floor >= call_floor: distance = floor - call_floor # Moving towards the call floor else: distance = float(\'inf\') # Moving away from the call floor if distance < best_distance: best_distance = distance best_index = i # If all elevators are moving away from the call floor, # select the one that has the minimum travel distance once it changes direction. if distance == float(\'inf\'): if state == \\"up\\": distance = abs(floor - 1) + abs(1 - call_floor) elif state == \\"down\\": distance = abs(floor - 100) + abs(100 - call_floor) if distance < best_distance: best_distance = distance best_index = i return best_index"},{"question":"Design and implement a screen for a weather forecasting application that displays current weather information pulled from an open weather API. Requirements: 1. Layout: The screen should have sections for current temperature, weather conditions, location, and an icon representing the weather (sunny, rainy, etc.). 2. User Interface: Use appropriate design elements to make the information visually appealing and easy to read. 3. Integration: Implement the functionality to fetch real-time weather data from an open weather API (e.g., OpenWeatherMap API). Considerations: - Ensure the app handles API errors gracefully, such as displaying an error message when data cannot be retrieved. - Implement a simple caching mechanism to avoid excessive API requests, updating the weather data every 10 minutes. Evaluation Criteria: - Correctness: Does the screen accurately display weather information? - UI/UX Design: Is the layout intuitive and visually appealing? - Code Quality: Is the code well-structured, modular, and easy to maintain? - API Integration: Is the data fetched and displayed correctly, and are errors handled appropriately?","solution":"import requests import time def get_weather(api_key, location): Fetches the current weather data for the specified location from the OpenWeatherMap API. Args: api_key (str): Your OpenWeatherMap API key. location (str): The location for which to fetch the weather. Returns: dict: A dictionary containing the weather information. url = f\\"http://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}&units=metric\\" response = requests.get(url) if response.status_code != 200: return {\\"error\\": \\"Could not retrieve data.\\"} return response.json() def format_weather_data(weather_data): Formats the weather data to be displayed in a user-friendly manner. Args: weather_data (dict): The raw data fetched from the API. Returns: dict: A dictionary with formatted weather data. if \\"error\\" in weather_data: return weather_data formatted_data = { \\"location\\": weather_data.get(\\"name\\", \\"N/A\\"), \\"temperature\\": weather_data[\\"main\\"].get(\\"temp\\", \\"N/A\\"), \\"condition\\": weather_data[\\"weather\\"][0].get(\\"description\\", \\"N/A\\"), \\"icon\\": weather_data[\\"weather\\"][0].get(\\"icon\\", \\"N/A\\") # This will be appended to form the full URL } return formatted_data def display_weather(weather_data): Displays the current weather information. Args: weather_data (dict): The formatted weather data. Displays: str: A string representation of the current weather. if \\"error\\" in weather_data: return \\"Error: \\" + weather_data[\\"error\\"] return ( f\\"Location: {weather_data[\'location\']}n\\" f\\"Temperature: {weather_data[\'temperature\']}°Cn\\" f\\"Condition: {weather_data[\'condition\']}n\\" f\\"Icon URL: https://openweathermap.org/img/w/{weather_data[\'icon\']}.png\\" ) # Caching mechanism CACHE = {\\"timestamp\\": time.time(), \\"data\\": {}} def get_cached_weather(api_key, location): Fetches weather data from cache if available and not expired, otherwise makes an API request. Args: api_key (str): Your OpenWeatherMap API key. location (str): The location for which to fetch the weather. Returns: dict: A dictionary containing the weather information. current_time = time.time() ten_minutes = 600 # 10 minutes in seconds if location in CACHE[\\"data\\"] and (current_time - CACHE[\\"timestamp\\"]) < ten_minutes: return CACHE[\\"data\\"][location] else: weather_data = get_weather(api_key, location) CACHE[\\"timestamp\\"] = current_time CACHE[\\"data\\"][location] = weather_data return weather_data"},{"question":"You are given an array of integers. Your task is to determine if it is possible to partition this array into two subsets such that the sum of the elements in both subsets is the same. Each line of the input contains the integers of the array separated by space, where -10^4 ≤ array[i] ≤ 10^4 and the length of the array is between 1 and 200. Print \\"YES\\" if such a partition is possible, otherwise print \\"NO\\". Example: Input: 1 5 11 5 Output: YES Input: 1 2 3 5 Output: NO","solution":"def can_partition(nums): Determines if the given array can be partitioned into two subsets with equal sums. :param nums: List of integers :return: \\"YES\\" if such a partition is possible, otherwise \\"NO\\" total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition into two equal subsets if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 n = len(nums) # Use dynamic programming to find if a subset with sum equal to target exists dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): dp[i] = dp[i] or dp[i - num] return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"You are given a sequence of parentheses. Your task is to determine the minimum number of moves required to make the sequence valid. A sequence of parentheses is considered valid if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. The only allowed moves are insertions of parentheses at any position in the sequence. The first line contains a single integer n (1 leq n leq 1000), indicating the length of the sequence. The second line contains the sequence of parentheses, consisting of exactly n characters. Each character is either \'(\' or \')\'. Output a single integer, which represents the minimum number of insertions needed to make the sequence valid. For example, given the sequence \\"())\\", we can make it valid by inserting one \'(\', resulting in \\"(())\\", so the answer is 1. In another example, given the sequence \\"(()\\", we can make it valid by inserting one \')\', resulting in \\"(())\\", so the answer is 1. In a final example, if the input sequence is already valid, such as \\"()\\", the output should be 0.","solution":"def min_insertions_to_make_valid(seq): Determine the minimum number of insertions required to make the given sequence of parentheses valid. Parameters: seq (str): The sequence of parentheses Returns: int: The minimum number of insertions required open_needed = 0 close_needed = 0 for char in seq: if char == \'(\': close_needed += 1 elif char == \')\': if close_needed > 0: close_needed -= 1 else: open_needed += 1 return open_needed + close_needed"},{"question":"You are given an undirected graph with n vertices and m edges. Each vertex in the graph has a value associated with it. You are also given q queries, where each query consists of two integers u and v. For each query, your task is to find the maximum value among the vertices in the path from vertex u to vertex v. Assume that there is always a path between any two given vertices. # Input - The first line contains two integers n and m (1 le n, m le 1000), the number of vertices and edges in the graph respectively. - The second line contains n integers, the values associated with the vertices. - The next m lines each contain two integers x and y (1 le x, y le n), indicating that there is an edge between vertex x and vertex y. - The next line contains a single integer q (1 le q le 1000), the number of queries. - The next q lines each contain two integers u and v (1 le u, v le n). # Output For each query, output the maximum value along the path between vertex u and vertex v. # Example Input ``` 5 6 1 3 2 6 4 1 2 1 3 2 4 2 5 3 4 4 5 3 1 4 2 5 3 5 ``` Output ``` 6 4 6 ``` # Note In the example: - For the first query (1, 4), the path can be taken as 1 -> 2 -> 4, and the maximum value is 6. - For the second query (2, 5), the path can be taken as 2 -> 5, and the maximum value is 4. - For the third query (3, 5), the path can be taken as 3 -> 4 -> 5, and the maximum value is 6.","solution":"from collections import deque, defaultdict def find_max_value_path(n, values, edges, queries): def bfs_max_value(u, v): visited = [False] * n max_value = values[u-1] queue = deque([(u, values[u-1])]) while queue: current, current_max = queue.popleft() if current == v: return current_max for neighbor in graph[current]: if not visited[neighbor-1]: visited[neighbor-1] = True new_max = max(current_max, values[neighbor-1]) queue.append((neighbor, new_max)) return -1 graph = defaultdict(list) for x, y in edges: graph[x].append(y) graph[y].append(x) results = [] for u, v in queries: results.append(bfs_max_value(u, v)) return results"},{"question":"A spaceship needs to navigate through a complex maze in space to reach its destination. The maze consists of n rows and m columns of cells, where each cell is either empty (represented by \'.\') or occupied by an asteroid (represented by \'#\'). The spaceship can move up, down, left, or right, but it cannot pass through a cell occupied by an asteroid. The spaceship starts at the top-left corner of the maze and needs to reach the bottom-right corner. Write a program to find the shortest path from the top-left corner to the bottom-right corner of the maze. If no such path exists, print \\"Impossible\\". The first line contains two integers n and m (1 ≤ n, m ≤ 100). The next n lines contain m characters each, describing the maze. Print a single integer - the minimum number of moves required to reach the bottom-right corner from the top-left corner, or \\"Impossible\\" if there is no such path. Your task is to implement a function: ```python def shortest_path(n: int, m: int, grid: List[str]) -> Union[int, str]: pass ``` **Input:** ```python shortest_path(3, 4, [ \\"....\\", \\"..\\", \\"....\\" ]) ``` **Output:** ```python 5 ``` **Explanation:** The optimal path is: right, right, down, down, left.","solution":"from typing import List, Union from collections import deque def shortest_path(n: int, m: int, grid: List[str]) -> Union[int, str]: directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (x, y, distance) visited[0][0] = True while queue: x, y, dist = queue.popleft() if x == n - 1 and y == m - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny, dist + 1)) return \\"Impossible\\""},{"question":"You are given a string s consisting of lowercase English letters and an integer k. Find the length of the longest substring that can be obtained by replacing at most k characters of the string so that all characters of the substring are the same. The first line contains the single integer T (1 le T le 100) — the number of test cases. Next T lines contain test cases — one per line. Each line contains a string s (1 le |s| le 10^5) and an integer k (0 le k le |s|). Print T integers — one per test case. For each test case, print the length of the longest substring that can be obtained under the given conditions. In the first test case, you can replace one \'b\' with \'a\' to get \'aaa\'. In the second test case, you can replace up to three \'c\'s with \'a\' to get \'aaaaa\'.","solution":"def character_replacement(s, k): max_length = 0 max_count = 0 count = [0] * 26 left = 0 for right in range(len(s)): count[ord(s[right]) - ord(\'a\')] += 1 max_count = max(max_count, count[ord(s[right]) - ord(\'a\')]) while (right - left + 1) - max_count > k: count[ord(s[left]) - ord(\'a\')] -= 1 left += 1 max_length = max(max_length, right - left + 1) return max_length def solve(T, test_cases): results = [] for s, k in test_cases: result = character_replacement(s, k) results.append(result) return results # Example usage: # T = 2 # test_cases = [(\\"aabb\\", 2), (\\"ababc\\", 3)] # result = solve(T, test_cases) # print(result) # Output: [4, 5]"},{"question":"A telecommunications company is building a network that connects various servers to a central hub using cables. Each server is represented as a unique node and every cable has an associated cost defined by the length of the cable. To optimize the network, they need your help in solving the following problem: You are given an undirected graph with n nodes and m edges, where each node represents a server and each edge represents a cable between two servers with a specific cost. The goal is to find the minimum cost required to connect all servers directly or indirectly to the central hub (node 1) such that the network forms a connected graph. You will need to perform the following tasks: 1. Input the nodes and edges of the graph along with their costs. 2. Compute the minimum cost to connect all servers to the central hub using a Minimum Spanning Tree (MST) algorithm. Input: - The first line contains two integers n and m (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) - the number of nodes and edges, respectively. - The next m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), where u and v are the nodes connected by the edge, and w is the cost of that edge. Output: - A single integer representing the minimum total cost to connect all nodes to the central hub. Example: ``` Input: 5 7 1 2 10 1 3 20 2 3 30 2 4 40 3 4 50 3 5 60 4 5 70 Output: 130 ``` Explanation: The minimum cost spanning tree includes the edges (1-2 with cost 10), (1-3 with cost 20), (2-4 with cost 40), and (3-5 with cost 60), with a total cost of 10+20+40+60 = 130. Hence, the output is 130.","solution":"import heapq def find_mst(n, edges): Computes the minimum cost to connect all nodes to the central hub. :param n: The number of nodes. :param edges: A list of tuples, each containing (u, v, w) where: u and v are nodes connected by an edge, w is the cost of the edge. :return: The minimum total cost to connect all nodes to the central hub. graph = [[] for _ in range(n)] for u, v, w in edges: graph[u-1].append((w, v-1)) graph[v-1].append((w, u-1)) # Prim\'s algorithm total_cost = 0 visited = [False] * n min_heap = [(0, 0)] # (cost, node) while min_heap: cost, u = heapq.heappop(min_heap) if visited[u]: continue total_cost += cost visited[u] = True for next_cost, v in graph[u]: if not visited[v]: heapq.heappush(min_heap, (next_cost, v)) if all(visited): return total_cost else: return -1 # Not all nodes are connected. # Example usage: # n = 5 # edges = [(1, 2, 10), (1, 3, 20), (2, 3, 30), (2, 4, 40), (3, 4, 50), (3, 5, 60), (4, 5, 70)] # print(find_mst(n, edges)) # Output: 130"},{"question":"You are given a garden in the form of a grid with n rows and m columns. Each cell in the grid either contains a flower or is empty. The state of the garden is represented by a matrix of size n x m where \\".\\" indicates an empty cell and \\"F\\" indicates a flower. Granny loves to create square flowerbeds in her garden such that each flowerbed contains only flowers and is a perfect square (2x2, 3x3, etc.). Given the state of the garden, Granny wants to know the maximum side length of the largest square flowerbed she can form. The input consists of multiple lines. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) representing the size of the garden. Each of the next n lines contains m characters, describing the state of the garden. Output one integer representing the maximum side length of the largest square flowerbed that can be formed in the garden. If no such flowerbed exists, output 0. For example, consider the following garden: \'\'\' Input: 5 5 ..... .FFFF .FFFF .FFFF ..FFF Output: 3 \'\'\' In this example, the largest square flowerbed contains flowers in a 3x3 area. Help Granny find the largest square flowerbed in her garden!","solution":"def largest_square_flowerbed(garden, n, m): Returns the side length of the largest square flowerbed that can be formed if n == 0 or m == 0: return 0 # Create a DP table to store maximum side length of square ending at (i, j) dp = [[0] * m for _ in range(n)] max_side_length = 0 for i in range(n): for j in range(m): if garden[i][j] == \'F\': if i == 0 or j == 0: # First row or column dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"The zoo in Woodland Park has recently added a new attraction — a magical garden filled with exotic plants and flowers. The garden is represented as an undirected graph with n nodes and m edges. Each node represents a distinct section of the garden, and each edge represents a path between two sections. Every path has a specific beauty value associated with it. The park manager wants to ensure that visitors experience the maximum possible beauty during their tour. The tour should start at any section and visit each section exactly once. At the end of the tour, the path should return to the starting section. This means that the tour is essentially a Hamiltonian cycle — a cycle that visits every node exactly once and returns to the starting node. Determine the maximum beauty value that can be achieved in such a tour. You are expected to model the garden and compute the maximum beauty based on the graph given. The first line contains two integers n and m (1 ≤ n ≤ 20, 1 ≤ m ≤ 50) — the number of sections and the paths between them. Each of the next m lines contains three integers u, v, and b (1 ≤ u, v ≤ n, 1 ≤ b ≤ 100) — representing a path between sections u and v with beauty value b. Paths are bidirectional, so a path between u and v is also between v and u. Print a single integer — the maximum beauty value of the tour. If no Hamiltonian cycle exists, print -1. Example Input: 4 5 1 2 3 2 3 4 3 4 5 4 1 6 1 3 2 Output: 18","solution":"from itertools import permutations def find_max_beauty(n, m, edges): if n == 1: return 0 if m == 0 else edges[0][2] * 2 # Create adjacency matrix adj = [[-1] * n for _ in range(n)] for u, v, b in edges: adj[u-1][v-1] = b adj[v-1][u-1] = b max_beauty = -1 nodes = list(range(n)) all_permutations = permutations(nodes) for perm in all_permutations: current_beauty = 0 valid_path = True for i in range(n): u = perm[i] v = perm[(i + 1) % n] if adj[u][v] == -1: valid_path = False break current_beauty += adj[u][v] if valid_path: max_beauty = max(max_beauty, current_beauty) return max_beauty def max_beauty_of_tour(n, m, edges): return find_max_beauty(n, m, edges)"},{"question":"In a city, there are n intersections (numbered 1 to n) connected by m bidirectional roads. Each road has a certain length. Your task is to help commuters determine the length of the shortest path from a starting intersection s to a destination intersection d. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of intersections and roads, respectively. Next m lines each contain three integers u, v, and l (1 ≤ u, v ≤ n, 1 ≤ l ≤ 106) — representing a road between intersections u and v with length l. The last line contains two integers s and d (1 ≤ s, d ≤ n) — the starting and destination intersections. Print a single integer — the length of the shortest path from s to d. If there is no path, print -1.","solution":"import heapq def shortest_path(n, m, roads, s, d): # Create an adjacency list from the roads graph = [[] for _ in range(n + 1)] for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) # Dijkstra\'s algorithm distances = [float(\'inf\')] * (n + 1) distances[s] = 0 priority_queue = [(0, s)] while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distances[u]: continue for neighbor, weight in graph[u]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[d] if distances[d] != float(\'inf\') else -1"},{"question":"Given an array of integers, you need to determine the smallest subarray\'s length such that the sum of its elements is greater than or equal to a given target number. If no such subarray exists, return 0. You are required to answer several queries, each query contains a new target number, and you need to determine the smallest subarray length for each target. # Input The input consists of: 1. An integer `n` (`1 ≤ n ≤ 100,000`), the number of elements in the array. 2. An array of `n` integers `a` (`1 ≤ a[i] ≤ 10,000`). 3. An integer `q` (`1 ≤ q ≤ 100,000`), the number of queries. 4. `q` lines follow, each containing a single integer `target` (`1 ≤ target ≤ 1,000,000,000`). # Output For each query, output a single integer representing the length of the smallest subarray whose sum is greater than or equal to the target. If no such subarray exists, print `0`. # Example Input: ``` 8 1 2 3 4 5 6 7 8 3 10 15 70 ``` Output: ``` 2 2 0 ``` # Explanation: For the first query with target `10`, the subarray `[4, 6]` is the smallest subarray with a sum greater than or equal to `10`, hence the length is `2`. For the second query with target `15`, the subarray `[7, 8]` is the smallest subarray with a sum greater than or equal to `15`, hence the length is `2`. For the third query with target `70`, there is no subarray whose sum is `70` or greater, so the result is `0`.","solution":"def min_subarray_length_with_sum_gte(target, nums): n = len(nums) min_len = float(\'inf\') current_sum = 0 left = 0 for right in range(n): current_sum += nums[right] while current_sum >= target: min_len = min(min_len, right - left + 1) current_sum -= nums[left] left += 1 return min_len if min_len != float(\'inf\') else 0 def solve(n, a, q, queries): results = [] for target in queries: results.append(min_subarray_length_with_sum_gte(target, a)) return results"},{"question":"You are given an array `grades` consisting of n integers representing the grades of students in a class. The grades range from 0 to 100. Your task is to determine the minimum number of students that need to be moved if we want to split the class into two groups such that the absolute difference between the average grades of the two groups is at least d. Formally, you need to partition the array `grades` into two non-empty groups A and B such that the absolute difference between the average grade of group A and group B is at least d. Note that each student must be in exactly one group. The first line contains two integers n and d (1 ≤ n ≤ 100, 1 ≤ d ≤ 100) — the number of students and the required minimum difference in average grades, respectively. The second line contains n integers g1, g2, ..., gn (0 ≤ gi ≤ 100), where gi is the grade of the i-th student. Print the minimum number of students that need to be moved to obtain the required partition. If it is not possible to achieve such a partition, print -1. In the first example, n = 5 and d = 10. The grades are [70, 65, 80, 90, 50]. One possible way to partition is group A = [70, 65, 50] and group B = [80, 90]. The average of group A is 61.67 and the average of group B is 85, so the absolute difference is 23.33, which is greater than 10. Thus, the minimum number of students that need to be moved is 0, since any initial distribution already satisfies the average difference constraint. In the second example, n = 4 and d = 20. The grades are [50, 50, 50, 50]. No matter how you partition the grades, the absolute difference between the average grades of the two groups will be 0, which is less than 20. Therefore, it is not possible to partition the class into two groups with the required difference. The output should be -1.","solution":"def min_students_to_move(n, d, grades): Returns the minimum number of students that need to be moved to partition the class into two groups such that the absolute difference between the average grades of the two groups is at least d. If it is not possible, returns -1. grades.sort() def calc_avg_diff(group1, group2): avg1 = sum(group1) / len(group1) avg2 = sum(group2) / len(group2) return abs(avg1 - avg2) for i in range(1, n): # avoid empty groups group1 = grades[:i] group2 = grades[i:] if calc_avg_diff(group1, group2) >= d: return 0 # No need to move any student if the partition already satisfies the condition return -1 # Return -1 if no partition can achieve the required difference # Example Usage: # print(min_students_to_move(5, 10, [70, 65, 80, 90, 50])) # Should output 0 # print(min_students_to_move(4, 20, [50, 50, 50, 50])) # Should output -1"},{"question":"You are given a list of intervals where each interval is represented as a pair of integers [start, end]. The intervals are sorted in ascending order based on their start times. However, they don\'t overlap, but it is possible for two intervals to be immediately adjacent, for example, [1, 2] and [2, 3]. Your task is to merge the adjacent intervals and return the resulting list of intervals. Write a function merge_intervals(intervals) that takes a list of intervals (where each interval is represented as a list [start, end]) and returns a new list of merged non-adjacent intervals. # Input: - intervals: A list of lists of integers representing the intervals, where each interval is an ordered pair [start, end]. - The list is non-empty and sorted in ascending order based on the start times of the intervals. - Each interval\'s start time is less than or equal to its end time. # Output: - A list of intervals after merging all adjacent intervals. # Example: ```python def merge_intervals(intervals): # Your implementation here # Example 1 intervals = [[1, 3], [3, 5], [5, 8], [10, 12]] print(merge_intervals(intervals)) # Output: [[1, 8], [10, 12]] # Example 2 intervals = [[1, 2], [2, 4], [5, 7], [8, 10]] print(merge_intervals(intervals)) # Output: [[1, 4], [5, 7], [8, 10]] # Example 3 intervals = [[1, 2], [3, 5], [6, 7], [8, 10]] print(merge_intervals(intervals)) # Output: [[1, 2], [3, 5], [6, 7], [8, 10]] ``` # Constraints: - The intervals in the list are sorted by their start times. - The input list contains at least one interval. - Each interval is represented as a list [start, end] with 1 ≤ start ≤ end.","solution":"def merge_intervals(intervals): Merges adjacent intervals in a given list of intervals. Parameters: intervals (list of lists): A list of intervals sorted by their start times. Returns: list: A list of merged intervals. if not intervals: return [] merged = [] current_interval = intervals[0] for next_interval in intervals[1:]: if current_interval[1] == next_interval[0]: current_interval[1] = next_interval[1] else: merged.append(current_interval) current_interval = next_interval merged.append(current_interval) return merged"},{"question":"You are given a matrix of size n times m, where each cell contains a non-negative integer. A robot is located at the top-left corner of the matrix (cell (1, 1)) and wants to reach the bottom-right corner (cell (n, m)). The robot can only move to the right or down. At each cell, the robot can collect coins equal to the integer value present in the cell. The robot can only collect the coins of the cells it visits. Write a program to calculate the maximum number of coins the robot can collect while reaching the bottom-right corner from the top-left corner. # Input - The first line contains two integers, n and m (1 le n, m le 100) — the number of rows and columns in the matrix respectively. - Each of the next n lines contains m integers a_{ij} (0 le a_{ij} le 100) — the number of coins in each cell. # Output - Print a single integer — the maximum number of coins the robot can collect. # Example Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output ``` 29 ``` Explanation The optimal path for the robot is to move right to cell (1, 2), then to cell (1, 3), then down to cell (2, 3), and finally down to cell (3, 3), collecting a total of 1 + 2 + 3 + 6 + 9 = 21 coins.","solution":"def max_coins(matrix): Calculate the maximum number of coins the robot can collect while reaching the bottom-right corner from the top-left corner. n = len(matrix) m = len(matrix[0]) # Create a dp table to store the maximum coins collected up to each cell dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] # Fill in the first row (only move right) for j in range(1, m): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill in the first column (only move down) for i in range(1, n): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j] # The maximum coins collected will be in the bottom-right corner of the dp table return dp[n-1][m-1]"},{"question":"You are given an undirected graph with `n` nodes and `m` edges. Each node represents a city, and each edge represents a bidirectional road connecting two cities. Each road has an associated positive integer weight denoting the distance between the two cities it connects. You are to determine if it is possible to travel from city `1` to city `n`. If it is possible, find the length of the shortest path from city `1` to city `n`. The first line of input contains two integer numbers `n` and `m` (`1 ≤ n ≤ 1000`, `0 ≤ m ≤ 10000`), where `n` denotes the number of nodes and `m` the number of edges. The next `m` lines contain three integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 1000`), where `u` and `v` are the nodes connected by the edge, and `w` is the weight of the edge. Print `-1` if there is no path from city `1` to city `n`. Otherwise, print the length of the shortest path from city `1` to city `n`. **Example:** Input: ``` 4 4 1 2 5 1 3 9 2 4 3 3 4 2 ``` Output: ``` 8 ``` In this example, there exists a path from city `1` to city `n` (city `4`) with a total minimum distance of 8 (1 → 2 → 4). Hence, the output is 8.","solution":"import heapq def shortest_path(n, m, edges): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((w, v)) graph[v].append((w, u)) # Dijkstra\'s algorithm pq = [(0, 1)] # priority queue of (distance, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 while pq: current_distance, current_node = heapq.heappop(pq) if current_node == n: return current_distance if current_distance > distances[current_node]: continue for weight, neighbor in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return -1 # Example usage n, m = 4, 4 edges = [ (1, 2, 5), (1, 3, 9), (2, 4, 3), (3, 4, 2) ] print(shortest_path(n, m, edges)) # Output should be 8"},{"question":"You are given a list of integers representing the heights of buildings in a cityscape. A beautiful cityscape is one where no two neighboring buildings have the same height. Your task is to determine if the given cityscape is already beautiful or if it can be made beautiful by modifying at most one building\'s height. The first line contains an integer n (2 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 100) — the heights of the buildings. Output \\"YES\\" if the cityscape is already beautiful or can be made beautiful by changing the height of at most one building, otherwise print \\"NO\\". Examples: Input: 5 3 5 5 2 4 Output: YES Input: 4 4 4 4 4 Output: NO","solution":"def is_beautiful_cityscape(n, heights): Determines if the given cityscape is already beautiful or can be made beautiful by modifying at most one building\'s height. Parameters: n (int): the number of buildings heights (list of int): the heights of the buildings Returns: str: \\"YES\\" if the cityscape can be made beautiful, \\"NO\\" otherwise. def check_beautiful(heights): for i in range(n - 1): if heights[i] == heights[i + 1]: return False return True if check_beautiful(heights): return \\"YES\\" for i in range(n): original_height = heights[i] for delta in [-1, 1]: heights[i] += delta if check_beautiful(heights): return \\"YES\\" heights[i] = original_height return \\"NO\\""},{"question":"In this task, you need to implement a simplified version of an automatic teller machine (ATM). The ATM should be able to process a list of transactions, maintaining the balance for an account, and provide the ability to query the current balance and deposit and withdraw money. The ATM can process the following types of transactions: 1. \\"DEPOSIT amount\\" - This transaction deposits the specified amount into the account. 2. \\"WITHDRAW amount\\" - This transaction attempts to withdraw the specified amount from the account. If the account does not have sufficient funds, the transaction should be ignored. 3. \\"BALANCE\\" - This transaction simply retrieves and prints the current account balance. The input starts with a positive integer n (1 ≤ n ≤ 1000), the number of transactions. Next n lines contain one of the three types of transactions mentioned above. The account starts with a balance of 0. For each \\"BALANCE\\" transaction, print the current balance on a new line. Example Input: ``` 6 DEPOSIT 1000 WITHDRAW 500 BALANCE WITHDRAW 2000 DEPOSIT 300 BALANCE ``` Example Output: ``` 500 800 ```","solution":"def process_transactions(transactions): balance = 0 output = [] for transaction in transactions: parts = transaction.split() if parts[0] == \\"DEPOSIT\\": amount = int(parts[1]) balance += amount elif parts[0] == \\"WITHDRAW\\": amount = int(parts[1]) if balance >= amount: balance -= amount elif parts[0] == \\"BALANCE\\": output.append(balance) return output"},{"question":"In a kingdom far, far away, there are n castles connected by m bidirectional roads. The roads are such that they create a connected graph. For a given castle, a knight can reach any other castle, either directly through a road or through intermediate castles. The King of the kingdom wants to ensure that he can quickly travel between his castles. Therefore, he decided to upgrade some roads to highways. A highway allows travel from one castle to its connected castle instantly. However, due to budget constraints, he can only construct up to c highways such that any castle in the graph remains reachable just as before. Given the number of castles n, roads m, and the maximum number of highways c, you need to identify whether it is possible to upgrade exactly c roads to highways such that the graph remains connected. If it is possible, print \\"YES\\", otherwise print \\"NO\\". The first line of the input contains three integers n, m, c (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000, 0 ≤ c ≤ m) — the number of castles, the number of roads, and the maximum number of highways, respectively. The next m lines describe the roads. Each road is given by a pair of integers u, v (1 ≤ u, v ≤ n, u ≠ v) — the pair of castles connected by the road. It is guaranteed that there does not exist more than one road between any two castles. The output should be a single line containing \\"YES\\" if it is possible to upgrade exactly c roads to highways while keeping the graph connected, and \\"NO\\" otherwise.","solution":"def can_upgrade_to_highways(n, m, c, roads): if c >= n - 1 and c <= m: return \\"YES\\" return \\"NO\\""},{"question":"You are given an array of integers a of size n where 1 leq n leq 10^5. Each element in the array a is unique and lies in the range 1 leq a[i] leq 10^9. We want to identify the smallest possible number of operations required to make the array sorted in increasing order. Each operation consists of either removing an element from the array or inserting any integer (not necessarily originally in the array) into any position in the array. The first line contains an integer n - the size of the original array. The second line contains n space-separated integers - the elements of the array a. Output the minimum number of operations required to sort the array in increasing order. # Example Input ``` 5 7 3 4 9 8 ``` Output ``` 2 ``` Explanation One possible way to sort the array with the minimum number of operations is to remove 7 and then insert 5. Another possible way is to remove 7 and remove 3, then insert 2 and 5. Thus, the minimum number of operations required is 2.","solution":"import bisect def min_operations_to_sort(n, a): Calculate the minimum number of operations required to sort the array in increasing order by either removing or inserting elements. :param n: size of the array :param a: list of integers representing the array :return: minimum number of operations # Find the length of the longest increasing subsequence (LIS) lis = [] for value in a: pos = bisect.bisect_left(lis, value) if pos == len(lis): lis.append(value) else: lis[pos] = value lis_length = len(lis) return n - lis_length"},{"question":"You are given two linked lists that represent two large non-negative integers. Invert the lists, where the digit is stored in reverse order (the 1\'s digit is at the head of the list). Write a function that adds these two numbers and returns the sum as a linked list, in the same reverse order. The linked list is a series of connected nodes where each node contains a single digit. The head of the list is the least significant digit. For example, given the following inputs: List 1: 2 -> 4 -> 3 (which represents the number 342) List 2: 5 -> 6 -> 4 (which represents the number 465) The result should be: Output: 7 -> 0 -> 8 (which represents the number 807) Here\'s the definition of the nodes in Python: ```python class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next ``` Write a function `addTwoNumbers` that takes the heads of two linked lists and returns the head of the linked list representing their sum. ```python def addTwoNumbers(l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]: # Your code here ```","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def addTwoNumbers(l1: ListNode, l2: ListNode) -> ListNode: carry = 0 dummy_head = ListNode(0) current = dummy_head while l1 or l2 or carry: val1 = l1.val if l1 else 0 val2 = l2.val if l2 else 0 total = val1 + val2 + carry carry = total // 10 current.next = ListNode(total % 10) current = current.next if l1: l1 = l1.next if l2: l2 = l2.next return dummy_head.next"},{"question":"You are given a list of N integers representing the heights of N people standing in a line. You need to determine the minimum number of swaps required to arrange the people in non-decreasing order of their heights. The first line of input contains a single integer N (1 ≤ N ≤ 100) — the number of people. The second line of input contains N space-separated integers representing the heights of the people (1 ≤ height ≤ 1000). Output a single integer — the minimum number of swaps required to sort the heights in non-decreasing order.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps required to sort the array in non-decreasing order. n = len(arr) arr_pos = [(arr[i], i) for i in range(n)] arr_pos.sort(key=lambda it: it[0]) vis = {k: False for k in range(n)} ans = 0 for i in range(n): if vis[i] or arr_pos[i][1] == i: continue cycle_size = 0 x = i while not vis[x]: vis[x] = True x = arr_pos[x][1] cycle_size += 1 if cycle_size > 0: ans += (cycle_size - 1) return ans"},{"question":"In the expansive universe, scientists are studying mysterious celestial objects known as Black Gems. They have gathered two datasets of potential Black Gem locations using different instruments. Each coordinate from the first dataset can be mapped to one from the second dataset based on certain transformations. Your task is to determine the best possible mapping between the two datasets under the constraint that each gem\'s coordinates in one dataset can be approximately paired with coordinates from another dataset, considering minor measurement errors. You will be given two sets of 3D coordinates representing the possible locations of these Black Gems. The first line of input contains an integer M (500 ≤ M ≤ 30000) – the number of Black Gems to be mapped. The second line contains an integer M1 (M ≤ M1 ≤ 1.2·M) – the number of recorded points in the first dataset. The following M1 lines contain three space-separated floating-point numbers xi, yi, and zi with five decimal digits of precision each, representing the recorded location of the i-th point in the first dataset. The next line contains an integer M2 (M ≤ M2 ≤ 1.2·M) – the number of recorded points in the second dataset. The following M2 lines contain the locations of the points in the second dataset in the same format as the first dataset. You should output exactly M lines, each containing a space-separated pair of integers a and b. Each such line indicates that the point numbered a in the first dataset corresponds to the point numbered b in the second dataset. Your answer will be considered correct if over 95% of the distinct pairs listed in your output are indeed correct. Example Input: ``` 3 4 1.23456 2.34567 3.45678 4.56789 5.67890 6.78901 7.89012 8.90123 9.01234 2.34567 1.23456 3.45678 4 1.23457 2.34568 3.45679 4.56788 5.67891 6.78900 7.89013 8.90124 9.01233 4.56788 5.67880 3.34567 ``` Sample Output: ``` 1 1 2 2 3 3 ```","solution":"import numpy as np from scipy.spatial.distance import cdist def map_black_gems(m, m1, dataset1, m2, dataset2): # Convert input datasets to numpy arrays points1 = np.array([tuple(map(float, point.split())) for point in dataset1]) points2 = np.array([tuple(map(float, point.split())) for point in dataset2]) # Calculate distance matrix between the two sets of points distances = cdist(points1, points2) # Determine pairs with minimum distances using the hungarian algorithm from scipy.optimize import linear_sum_assignment row_ind, col_ind = linear_sum_assignment(distances) # We assume that the first m1 points in the dataset1 should be mapped result = [] for i in range(m): result.append((row_ind[i] + 1, col_ind[i] + 1)) return result"},{"question":"You are given two lists of integers where each list represents the number of votes candidates received in two different regions. Each candidate\'s first region votes are in the first list, and their second region votes are in the second list - both lists align by index to the same candidate (i.e., the first element in both lists corresponds to the first candidate, the second element to the second candidate, and so on). Write a function that takes in these two lists and returns the index of the candidate with the highest total votes (sum of votes from both regions). If there is a tie, return the smallest index. You can assume there is at least one candidate and each candidate\'s votes will not be negative. # Input - A list of integers representing votes in the first region. - A list of integers representing votes in the second region. # Output - An integer indicating the index of the candidate with the highest total votes. # Example ```python region1_votes = [10, 20, 15, 30] region2_votes = [5, 10, 10, 25] # The total votes for each candidate would be: # candidate 0: 15 votes # candidate 1: 30 votes # candidate 2: 25 votes # candidate 3: 55 votes # Therefore, the function should return 3 since the fourth candidate has the highest total votes. highest_vote_candidate(region1_votes, region2_votes) # should return 3 ``` # Constraints - Length of the lists will be equal and at most 100. - Votes will be non-negative integers and at most 1000.","solution":"def highest_vote_candidate(region1_votes, region2_votes): Returns the index of the candidate with the highest total votes. If there is a tie, returns the smallest index. max_votes = -1 max_index = -1 for index in range(len(region1_votes)): total_votes = region1_votes[index] + region2_votes[index] if total_votes > max_votes: max_votes = total_votes max_index = index return max_index"},{"question":"# Problem Statement You are given a list of integers which represents the heights of different buildings in a city. The city wants to place a new advertisement banner that will be visible from all parts of the city, with the condition that it can only be placed on top of buildings that form an increasing sequence from left to right without any interruptions. The task is to find and print the length of the longest sequence of buildings where each building in the sequence is taller than the previous one, representing the optimal placement of the advertisement banner. # Input - The first line of input contains an integer `n` (1 ≤ n ≤ 100000), the number of buildings. - The second line contains `n` space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100000), representing the heights of the buildings. # Output - Output a single integer, the length of the longest sequence of buildings where each subsequent building is taller than the previous one. # Examples Example 1 # Input ``` 6 1 2 2 3 4 5 ``` # Output ``` 4 ``` Explanation: The longest increasing sequence is [2, 3, 4, 5]. Example 2 # Input ``` 5 5 3 4 8 6 ``` # Output ``` 3 ``` Explanation: The longest increasing sequence is [3, 4, 8]. # Note - If there are multiple sequences with the same maximum length, any of them is a valid answer. - If each building has the same height, the length of the longest sequence is 1.","solution":"def longest_increasing_sequence(buildings): Returns the length of the longest increasing sequence of building heights. if not buildings: return 0 n = len(buildings) if n == 1: return 1 longest = 1 current_length = 1 for i in range(1, n): if buildings[i] > buildings[i - 1]: current_length += 1 else: longest = max(longest, current_length) current_length = 1 return max(longest, current_length)"},{"question":"Suppose we have an n by n chessboard and a list of pieces on that chessboard. Each piece is represented by a tuple (x, y), where 1 ≤ x, y ≤ n, and (x, y) denotes the row and column of the piece, respectively. The task is to determine if there exists any row or column on the chessboard such that all positions in that row or column are occupied by pieces. Write a function `is_full_row_or_column(n: int, pieces: List[Tuple[int, int]]) -> str` that takes an integer `n` (the size of the chessboard) and a list of tuples `pieces`, and returns the string \\"YES\\" if there is a full row or column, and \\"NO\\" otherwise. # Input - `n` (1 ≤ n ≤ 100): The size of the chessboard. - `pieces`: A list of tuples, where each tuple contains two integers (x, y) representing the positions of the pieces on the chessboard. The number of pieces can be between 1 and n^2. # Output - Return \\"YES\\" if there exists a full row or column, otherwise return \\"NO\\". # Example **Example 1:** ```python n = 3 pieces = [(1, 1), (1, 2), (1, 3)] print(is_full_row_or_column(n, pieces)) # Outputs: \\"YES\\" ``` **Example 2:** ```python n = 3 pieces = [(1, 1), (2, 1), (3, 1)] print(is_full_row_or_column(n, pieces)) # Outputs: \\"YES\\" ``` **Example 3:** ```python n = 4 pieces = [(1, 2), (2, 2), (3, 3), (4, 4)] print(is_full_row_or_column(n, pieces)) # Outputs: \\"NO\\" ``` # Notes - In Example 1, row 1 is fully occupied. - In Example 2, column 1 is fully occupied. - In Example 3, neither any row nor column is fully occupied.","solution":"from typing import List, Tuple def is_full_row_or_column(n: int, pieces: List[Tuple[int, int]]) -> str: Returns \\"YES\\" if there exists a full row or column, otherwise returns \\"NO\\". row_counts = [0] * (n + 1) col_counts = [0] * (n + 1) for x, y in pieces: row_counts[x] += 1 col_counts[y] += 1 for i in range(1, n + 1): if row_counts[i] == n or col_counts[i] == n: return \\"YES\\" return \\"NO\\""},{"question":"You are given a string representing a Roman numeral. Your task is to convert this string into its integer representation. Roman numerals are represented by seven different symbols: **I**, **V**, **X**, **L**, **C**, **D**, and **M**. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | Roman numerals are usually written from largest to smallest from left to right. However, the numeral for four is not **IIII**. Instead, the number four is written as **IV**. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as **IX**. There are six instances where subtraction is used: - **I** can be placed before **V** (5) and **X** (10) to make 4 and 9. - **X** can be placed before **L** (50) and **C** (100) to make 40 and 90. - **C** can be placed before **D** (500) and **M** (1000) to make 400 and 900. Input format: - A single line containing the Roman numeral as a string (1 ≤ length ≤ 15). - The input will be guaranteed to be a valid Roman numeral representing a number between 1 and 3999. Output format: - A single integer representing the numeric value of the Roman numeral. Example: Input: ``` MCMXCIV ``` Output: ``` 1994 ```","solution":"def roman_to_int(s: str) -> int: Convert a Roman numeral to an integer. Parameters: s (str): A Roman numeral string. Returns: int: The integer representation of the Roman numeral. roman_to_integer = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_to_integer[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"The city of Gridland is famous for its unique, square grid layout. Gridland\'s mayor is concerned about the increasing commuting time for its citizens and has decided to optimize the city\'s traffic lights. In Gridland, there are n intersections aligned in an n x n grid. Each intersection can have a traffic light with two possible states: green (indicating cars can pass) or red (indicating cars must stop). Intersections are numbered from 1 to n from top to bottom and from left to right. The mayor\'s optimization goal is to ensure that for any row or column in the grid, at most one traffic light can be green. If a row or column has more than one green traffic light, it would result in traffic congestion. Given the initial state of the traffic lights in the grid, determine the minimum number of traffic lights that need to be turned red so as to satisfy the mayor\'s condition. The first line contains a single integer n (2 ≤ n ≤ 1000) — the size of the grid. Each of the next n lines contains n characters, either \'G\' for a green traffic light or \'R\' for a red traffic light, representing the current state of the traffic lights in the grid. Output a single integer — the minimum number of traffic lights that need to be turned red. In the first sample, the initial grid state is as follows: ``` G R R G ``` No changes are needed, as each row and column already has at most one green traffic light. In the second sample, the initial grid state is as follows: ``` G G R R ``` One \'G\' in the first row or first column needs to be turned red. Example 1: Input: 2 GR RG Output: 0 Example 2: Input: 2 GG RR Output: 1","solution":"def min_lights_to_turn_red(n, grid): Given the initial state of the traffic lights in the grid, determine the minimum number of traffic lights that need to be turned red to ensure that for any row or column in the grid, at most one traffic light can be green. :param n: Size of the grid (n x n) :param grid: List of strings representing the grid state :return: Minimum number of lights that need to be turned red # Count green lights for each row and column row_green_counts = [0] * n col_green_counts = [0] * n # Initially count the number of greens in each row and column for i in range(n): for j in range(n): if grid[i][j] == \'G\': row_green_counts[i] += 1 col_green_counts[j] += 1 # Calculate the number of excess greens in rows and columns excess_greens = sum(max(0, count - 1) for count in row_green_counts) excess_greens += sum(max(0, count - 1) for count in col_green_counts) return excess_greens # Sample input: print(min_lights_to_turn_red(2, [\\"GR\\", \\"RG\\"])) # Expected output: 0 print(min_lights_to_turn_red(2, [\\"GG\\", \\"RR\\"])) # Expected output: 1"},{"question":"Maria is organizing a charity event and plans to distribute gift bags to the attendees. There are m types of items, and each attendee should receive exactly one item of each type. Maria wants to distribute a total of n gift bags, and she needs to determine if it\'s possible with the current stock of items. If it is possible, she also wants to know the minimum number of items she needs to add to the stock to meet the requirement. The first line contains two integers n and m (1 ≤ n, m ≤ 105) — the number of gift bags Maria wants to distribute, and the number of different types of items. The second line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 109) — the current stock of each type of item. Print the only line containing the minimum number of items needed to be added to the stock for Maria to be able to prepare n gift bags, or \\"impossible\\" if it cannot be done even after adding any number of items. Consider the first example. If Maria wants to distribute 5 gift bags with 3 types of items and the current stock is 5, 2, and 3 of each type respectively, she would need: - For the first type, quantity is 5, which is enough. - For the second type, quantity is 2, so she needs 5 - 2 = 3 more items. - For the third type, quantity is 3, so she needs 5 - 3 = 2 more items. Thus, Maria needs to add 3 + 2 = 5 items to the stock. So the answer is 5. In the second example, if Maria wants to distribute 3 gift bags with 2 types of items and the current stock is 4 each, Maria already has enough of each item to distribute the 3 gift bags. Therefore, the answer is 0. In the third example, if Maria wants to distribute 4 gift bags with 2 types of items and the stock is 1 and 10 respectively, even after adding any number of items, she cannot make the stock of the first type equal to at least 4, hence the answer is \\"impossible\\".","solution":"def minimum_items_to_add(n, m, stock): Calculate the minimum number of items to add to the stock so that Maria can distribute n gift bags. Parameters: - n (int): The number of gift bags. - m (int): The number of different types of items. - stock (List[int]): A list of integers representing the current stock of each type. Returns: - int or str: The minimum number of items needed, or \\"impossible\\" if the goal cannot be achieved. add_needed = 0 for i in range(m): if stock[i] < n: add_needed += (n - stock[i]) return add_needed"},{"question":"Adventurer Ethan is trying to find the most magical path in an enchanted forest represented by a grid of size NxM. Each cell in the grid has a certain amount of magical energy. Ethan can start at any cell in the first row and can move only in three possible directions: directly below (down), below and to the left (down-left), or below and to the right (down-right). Ethan isn\'t allowed to move left or right between cells in the same row. Ethan wants to collect the maximum possible magical energy by the time he reaches the last row. You need to help Ethan by writing a function that determines the maximum magical energy he can collect. **Input:** - The first line contains two integers n and m (1 ≤ n, m ≤ 1000) - the number of rows and columns in the grid. - The next n lines each contain m integers, representing the amount of magical energy in each cell of the grid. The magical energy of a cell is a non-negative integer not greater than 1000. **Output:** - Output a single integer, the maximum amount of magical energy Ethan can collect. **Examples:** **Input:** ``` 3 3 6 7 8 5 9 3 2 6 7 ``` **Output:** ``` 24 ``` **Explanation:** Ethan can start at cell (1,3) with 8 energy, move to cell (2,2) with 9 energy, and finally move to cell (3,3) with 7 energy, collecting a total of 8 + 9 + 7 = 24 energy.","solution":"def max_magical_energy(n, m, grid): Function to find the maximum magical energy Ethan can collect. :param n: int - number of rows :param m: int - number of columns :param grid: List[List[int]] - grid of magical energy values :return: int - maximum magical energy # Initialize DP table dp = [[0] * m for _ in range(n)] # Copy first row to DP table for j in range(m): dp[0][j] = grid[0][j] # Fill the DP table for i in range(1, n): for j in range(m): # Three possible moves from previous row best_previous = dp[i - 1][j] # directly above if j > 0: best_previous = max(best_previous, dp[i - 1][j - 1]) # move from above-left if j < m - 1: best_previous = max(best_previous, dp[i - 1][j + 1]) # move from above-right dp[i][j] = grid[i][j] + best_previous # Find the maximum energy in the last row return max(dp[n - 1]) # Example Usage: # n, m = 3, 3 # grid = [ # [6, 7, 8], # [5, 9, 3], # [2, 6, 7] # ] # print(max_magical_energy(n, m, grid)) # Output: 24"},{"question":"A company wants to design a system that converts a given expression from infix to postfix notation (Reverse Polish Notation). In infix notation, operations are performed based on the precedence and the association of the operators, while in postfix notation, each operator follows all of its operands. The company uses expressions that contain the following components: - Operands: lower case English letters (\'a\' to \'z\') - Operators: \'+\', \'-\', \'*\', \'/\', \'^\' (precedence from lowest to highest) - Parentheses: \'(\' and \')\' to override the default precedence You should note the following: 1. The precedence of operators is as follows: - \'^\' (highest, right-associative) - \'*\', \'/\' (left-associative) - \'+\', \'-\' (lowest, left-associative) 2. Operands are always single lower-case letters. 3. Parentheses override precedence. 4. No spaces are to be included in the input expression. 5. The given expression is guaranteed to be valid and contain between 1 and 100 characters inclusive. Your task is to write a function that converts a given valid infix expression to a postfix expression. # Input - A single string `expr` which represents the infix expression. # Output - A single string representing the postfix notation of the given infix expression. # Example **Input 1:** ``` a+b*c ``` **Output 1:** ``` abc*+ ``` **Input 2:** ``` (a+b)*c ``` **Output 2:** ``` ab+c* ``` **Input 3:** ``` a+b*(c^d-e)^(f+g*h)-i ``` **Output 3:** ``` abcd^e-fgh*+^*+i- ``` Implement the function to convert the given infix expression to postfix notation. You may assume the input is always a valid infix expression.","solution":"def infix_to_postfix(expr): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2, \'^\': 3} associativity = {\'+\': \'L\', \'-\': \'L\', \'*\': \'L\', \'/\': \'L\', \'^\': \'R\'} def higher_precedence(op1, op2): return precedence[op1] > precedence[op2] or (precedence[op1] == precedence[op2] and associativity[op1] == \'L\') output = [] stack = [] for char in expr: if char.isalpha(): output.append(char) elif char == \'(\': stack.append(char) elif char == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Remove \'(\' from stack else: # Operator while stack and stack[-1] != \'(\' and higher_precedence(stack[-1], char): output.append(stack.pop()) stack.append(char) while stack: output.append(stack.pop()) return \'\'.join(output)"},{"question":"To handle an increasing number of day-to-day appointments, a new medical clinic has decided to use an automated system to allocate time slots for appointments. They want to ensure that all appointments are booked within the limits of their working hours, while also providing breaks for lunch. The clinic is open from 9:00 AM to 5:00 PM, with a one-hour mandatory lunch break from 1:00 PM to 2:00 PM. Each appointment slot is exactly 30 minutes long. A patient can request an appointment any time within the working hours. You are tasked to write a program to determine the earliest available slot for a new appointment, given a list of currently booked slots. Input format: - The first line contains an integer `n`, the number of currently booked slots. - The next `n` lines each contain a start time in the format `HH:MM` which represents the starting time of a booked slot. Output format: - Print the earliest available slot in the format `HH:MM`. Constraints: - The input times will always be in the range of the clinic\'s working hours, i.e., between 09:00 and 17:00. - No slots will overlap or extend beyond the clinic\'s working hours. - The list of booked slots does not include the lunch break. - If there is no available slot, print \\"No available slots\\". Example: Input: 3 09:00 11:00 14:30 Output: 09:30 Explanation: - After analyzing the booked slots, the earliest available slot is found to be at 09:30 AM. Input: 4 09:00 09:30 10:00 10:30 Output: 11:00 Explanation: - Here, the earliest available slot is after the currently booked slots, which is at 11:00 AM.","solution":"def find_earliest_available_slot(n, booked_slots): Determine the earliest available time slot for a new appointment. Parameters: - n: int, number of currently booked slots - booked_slots: list of strings, each string represents a start time in format HH:MM Returns: - string, the earliest available slot in format HH:MM or \\"No available slots\\" # Define start and end times clinic_start = \\"09:00\\" lunch_start = \\"13:00\\" lunch_end = \\"14:00\\" clinic_end = \\"17:00\\" slot_duration = 30 # in minutes # Helper function to convert time in HH:MM to minutes since start of the day def time_to_minutes(t): h, m = map(int, t.split(\':\')) return h * 60 + m # Helper function to convert minutes since start of the day to HH:MM def minutes_to_time(m): h = m // 60 minutes = m % 60 return f\\"{h:02}:{minutes:02}\\" # Sort the booked_slots booked_slots = sorted(booked_slots) # Convert all significant times to minutes times_to_check = [ time_to_minutes(clinic_start), time_to_minutes(lunch_start), time_to_minutes(lunch_end), time_to_minutes(clinic_end) ] occupied_times = [time_to_minutes(t) for t in booked_slots] # Append the significant times as occupied intervals occupied_times.append(time_to_minutes(clinic_end) - slot_duration) # Check from start to each booked slot last_checked_time = times_to_check[0] for slot in occupied_times: if slot - last_checked_time >= slot_duration: # If there\'s enough gap between last checked time and next booked slot, return the earliest available slot return minutes_to_time(last_checked_time) last_checked_time = slot + slot_duration # Handle lunch break if last_checked_time == time_to_minutes(lunch_start): last_checked_time = time_to_minutes(lunch_end) # If no slots are available return \\"No available slots\\""},{"question":"In the magical world of Arithmencia, the Great Archmage is known for her fondness of mathematical patterns. One day, she presents you with a challenge involving sequences. Given a sequence of numbers, the goal is to determine the length of the longest subsequence that is strictly decreasing. A strictly decreasing subsequence of a sequence is formed by deleting some or no elements of the original sequence without changing the order of the remaining elements, such that each element of the subsequence is strictly smaller than the preceding one. Consider the following tasks to solve this challenge: 1. Read an integer N (1 le N le 10^4) from standard input. N represents the number of elements in the sequence. 2. Read N integers representing the sequence from standard input. The elements of the sequence are integers A_i (1 le A_i le 10^9). 3. Output a single integer which is the length of the longest strictly decreasing subsequence. **Example:** _Input:_ ``` 6 5 3 4 8 6 7 ``` _Output:_ ``` 3 ``` In the example above, the longest strictly decreasing subsequence is [5, 3] or [8, 6], giving a length of 2. Hints: - You may use dynamic programming or other efficient techniques to solve this problem within the given constraints. - Be mindful of the input size and optimize your solution accordingly.","solution":"def longest_decreasing_subsequence_length(seq): Returns the length of the longest strictly decreasing subsequence in the given sequence. if not seq: return 0 n = len(seq) dp = [1] * n # dp[i] will store the length of the longest decreasing subsequence ending at index i for i in range(1, n): for j in range(i): if seq[j] > seq[i]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage (uncomment the below lines to test outside of a unit test framework): # N = int(input()) # sequence = list(map(int, input().split())) # print(longest_decreasing_subsequence_length(sequence))"},{"question":"Mina is a gardener and she has received a large number of flower seeds. She wants to plant these seeds in such a way that no two flowers of the same type are adjacent to each other in the garden. The garden can be represented as a sequence of n positions, where each position can hold one flower. Each type of flower is represented by an integer. Help Mina determine if it\'s possible to plant the flowers following the given rule: no two adjacent positions should hold flowers of the same type. The first line contains an integer number n (1 ≤ n ≤ 105) - the number of positions in the garden. The second line contains n integer numbers f1, f2, ..., fn (1 ≤ fi ≤ 1000) - the types of flowers Mina has. Print \\"YES\\" if it\'s possible to plant all the flowers following the rule. Otherwise print \\"NO\\". For example, if the input is: ``` 5 1 2 1 2 1 ``` The output should be: ``` YES ``` As Mina can arrange the flowers as follows: [1, 2, 1, 2, 1]. If the input is: ``` 4 1 1 1 1 ``` The output should be: ``` NO ``` As it is not possible to plant the flowers such that no two flowers of the same type are adjacent.","solution":"def can_plant_flowers(n, flower_types): Determines if it\'s possible to arrange the flowers such that no two adjacent flowers are of the same type. Parameters: n (int): The number of positions in the garden. flower_types (list of int): The types of flowers Mina has. Returns: str: \\"YES\\" if possible, \\"NO\\" otherwise. from collections import Counter flower_counts = Counter(flower_types) most_common_flower_count = flower_counts.most_common(1)[0][1] # Check feasibility condition if most_common_flower_count <= (n + 1) // 2: return \\"YES\\" else: return \\"NO\\""},{"question":"Lisa is organizing a hiking competition through a forest. The forest can be represented as a grid with n rows and m columns. Each cell in the grid is either \\"open land\\" (denoted by a \'.\') or an \\"obstacle\\" (denoted by a \'#\'). Participants can only move between adjacent cells (up, down, left, or right) if the destination cell is open land. Lisa wants to set up a path from the starting cell to the finishing cell such that the path avoids as many obstacles as possible along the way. To ensure the competition is challenging but fair, Lisa will provide participants with a map of the forest and the exact location of the start and finish cells. Participants are required to navigate the grid and avoid obstacles to reach the goal. Given the forest grid, the starting cell (sx, sy), and the finishing cell (fx, fy), help Lisa determine the length of the shortest path from the start to the finish. # Input The first line contains two integers, n and m (1 leq n, m leq 1000) — the dimensions of the grid. The next n lines each contain m characters (either \'.\' or \'#\') representing the grid. The last line contains four integers, sx, sy, fx, fy (1 leq sx, sy, fx, fy leq n, m) — the coordinates of the starting cell and the finishing cell respectively. The coordinates are 1-based, and both the starting and finishing cell will be open land (\'.\'). # Output Print a single integer — the length of the shortest path from the starting cell to the finishing cell. If there is no path, print -1. # Example Input ``` 5 5 ..... .#. ..#.. .#.#. ..... 1 1 5 5 ``` Output ``` 8 ``` Input ``` 3 3 .#. .#. .#. 1 1 3 3 ``` Output ``` -1 ``` # Explanation In the first example, the shortest path from (1,1) to (5,5) is: (1,1) → (1,2) → (1,3) → (1,4) → (1,5) → (2,5) → (3,5) → (4,5) → (5,5), totaling 8 moves. In the second example, there is no possible path from (1, 1) to (3, 3) due to the obstacles in every column, so the output is -1.","solution":"from collections import deque def shortest_path_forest(grid, sx, sy, fx, fy): n = len(grid) m = len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert 1-based to 0-based for easier access sx -= 1 sy -= 1 fx -= 1 fy -= 1 # BFS queue initialization queue = deque([(sx, sy, 0)]) # (x, y, distance) visited = set((sx, sy)) while queue: x, y, dist = queue.popleft() if (x, y) == (fx, fy): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"A company has a team-building activity where employees are assigned to groups and each group has a task. Each group can have either 2 or 3 members. The company wants to ensure that the total number of employees participating in the activity is exactly n. Given an integer n, determine the minimum number of groups required to have exactly n employees, where each group can have 2 or 3 members. If it is not possible to form such groups, print \\"Impossible\\". If there are multiple solutions, print the one with the minimum number of groups. The input contains a single integer n (1 ≤ n ≤ 10^6). Output a single integer - the minimum number of groups required. If it is not possible to create such groups, output \\"Impossible\\" (without quotes). For example: Sample 1: Input: 7 Output: 3 Explanation: One possible solution is 2 groups of 2 members and 1 group of 3 members (2+2+3=7). Sample 2: Input: 4 Output: 2 Explanation: One possible solution is 2 groups of 2 members (2+2=4). Sample 3: Input: 1 Output: Impossible Explanation: It is not possible to form a group with just 1 member.","solution":"def minimum_groups(n): # Start by using as many groups of 3 as possible for group_of_3 in range(n // 3, -1, -1): remainder = n - group_of_3 * 3 if remainder % 2 == 0: # Check if the remainder can be filled by groups of 2 group_of_2 = remainder // 2 return group_of_2 + group_of_3 return \\"Impossible\\""},{"question":"Given an array of integers, an inversion occurs if for any index pairs (i, j) where i < j, the element at i is greater than the element at j (i.e., arr[i] > arr[j]). Your task is to calculate the total number of such inversions in the array. # Input - The first line contains a single integer n (1 le n le 2 cdot 10^5) — the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. # Output Print a single integer, the number of inversions in the array. # Sample Input 1 ```plaintext 5 2 4 1 3 5 ``` # Sample Output 1 ```plaintext 3 ``` # Explanation There are three inversions in the array: (2, 1), (4, 1), and (4, 3). # Sample Input 2 ```plaintext 4 10 20 30 40 ``` # Sample Output 2 ```plaintext 0 ``` # Explanation There are no inversions in the array because the array is already sorted in non-decreasing order.","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 # Conditions are checked to ensure that i doesn\'t exceed mid and j doesn\'t exceed right while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: # There are mid - i inversions, because all the remaining elements in the left subarray (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j] temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 # Copy the remaining elements of left subarray, if any while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 # Copy the remaining elements of right subarray, if any while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 # Copy the sorted subarray into Original array for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count # Function to sort the array and return the count of inversions def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def count_inversions(arr): n = len(arr) temp_arr = [0]*n return merge_sort_and_count(arr, temp_arr, 0, n-1)"},{"question":"Given two arrays `arr1` and `arr2` where `arr1` is a permutation of integers from `1` to `n`, and `arr2` is a permutation of integers from `1` to `m` where `m >= n`. We want to merge these two arrays into one by interleaving elements while preserving their respective orders. Specifically, interleaving means taking elements alternatively from both arrays, starting with the first element of `arr1`, then taking the first element of `arr2`, and so on. If one of the arrays is exhausted, the remaining elements of the other array are appended to the end of the merged array. Implement a function `merge_permutations(n: int, m: int, arr1: List[int], arr2: List[int]) -> List[int]`, where `n` and `m` are integers representing the lengths of `arr1` and `arr2` respectively, and `arr1` and `arr2` represent the two permutations. The function should output the interleaved array. # Input - The first line contains an integer `n` (1 leq n leq 10^5), the length of `arr1`. - The second line contains `n` integers representing the permutation `arr1`. - The third line contains an integer `m` (n leq m leq 10^5), the length of `arr2`. - The fourth line contains `m` integers representing the permutation `arr2`. # Output - Output a single line containing the merged interleaved array of length `n + m`. # Example **Input:** ``` 3 1 2 3 5 4 5 6 7 8 ``` **Output:** ``` 1 4 2 5 3 6 7 8 ``` # Explanation In the example, `arr1` starts with [1, 2, 3] and `arr2` starts with [4, 5, 6, 7, 8]. The interleaved merge alternates elements from both arrays until one is exhausted: [1, 4, 2, 5, 3, 6] followed by the remaining elements of `arr2` [7, 8].","solution":"def merge_permutations(n, m, arr1, arr2): Merges two permutations arr1 and arr2 by interleaving while preserving their respective orders. result = [] i, j = 0, 0 # Interleaving process while i < n and j < m: result.append(arr1[i]) result.append(arr2[j]) i += 1 j += 1 # Append remaining elements from arr1, if any while i < n: result.append(arr1[i]) i += 1 # Append remaining elements from arr2, if any while j < m: result.append(arr2[j]) j += 1 return result"},{"question":"You are managing a bakery with limited oven capacity and multiple types of bread to bake. Each type of bread has a specific baking time and a profit associated with it. The oven can bake one type of bread at a time, and you need to determine the optimal baking schedule to maximize the total profit within a given time limit. You are given a list of bread types, each with a baking time and profit. Also, you are given the total time available for baking. Write a function to determine the maximum profit you can achieve. The function should take three parameters: 1. An integer `T` representing the total available time. 2. An integer `N` representing the number of bread types. 3. A list `breads` of `N` tuples, where each tuple contains two integers `t_i` and `p_i`: the baking time and profit for each type of bread. The function should output the maximum profit you can achieve. # Input - `T`: an integer (1 ≤ T ≤ 10^5), the total available time. - `N`: an integer (1 ≤ N ≤ 1000), the number of bread types. - `breads`: a list of `N` tuples, where each tuple contains: - `t_i`: an integer (1 ≤ t_i ≤ T), the baking time for the `i-th` type of bread. - `p_i`: an integer (1 ≤ p_i ≤ 10^4), the profit for the `i-th` type of bread. # Output - An integer, the maximum profit you can achieve. # Sample Input ``` T = 5 N = 3 breads = [(2, 10), (3, 15), (4, 20)] ``` # Sample Output ``` 25 ``` # Note In the sample input, you can bake the first type of bread (2 time units, 10 profit) and the second type of bread (3 time units, 15 profit) within the total time of 5 units for a total profit of 10 + 15 = 25. Alternatively, you could bake the third type of bread for a profit of 20, which is less than 25.","solution":"def max_profit(T, N, breads): Determine the maximum profit achievable within the given total available time. Args: T (int): Total available time for baking. N (int): Number of bread types. breads (List[Tuple[int, int]]): List of tuples where each tuple contains baking time and profit. Returns: int: Maximum profit achievable. # Dynamic programming array dp = [0] * (T + 1) # Iterate over each bread type for baking_time, profit in breads: # Update the dp array in reverse order to avoid reuse of the same bread type in the same iteration for t in range(T, baking_time - 1, -1): dp[t] = max(dp[t], dp[t - baking_time] + profit) return max(dp)"},{"question":"Mipha, the mighty Zora warrior, loves collecting rare minerals scattered around the Zora domain. There are n different types of minerals Mipha is interested in, each with a distinct rarity value r1, r2, ..., rn (1 ≤ ri ≤ 1000). The rarer a mineral, the higher its value, and hence its rarity increases with a higher ri. Due to the unique ecosystem within Zora\'s domain, Mipha can collect these minerals in a peculiar way: - In one dive into the water, Mipha can collect upto k minerals. - Each dive, Mipha can only collect minerals in a continuous segment of types, i.e., if she picks mineral type i, she can continue to pick mineral type i+1, i+2, etc., upto at most k minerals in that dive. Mipha wants to maximize the total rarity value she can accumulate across any number of dives. Write a function that receives: - an integer n representing the number of different mineral types - an integer k representing the maximum number of minerals Mipha can collect in one dive - an array of n integers representing the rarity values of each mineral type. Your task is to find the maximum total rarity value Mipha can achieve in a single dive. # Input: - An integer n (1 ≤ n ≤ 2000) - An integer k (1 ≤ k ≤ n) - An array of n space-separated integers where the i-th integer represents the rarity value of the i-th mineral (1 ≤ rarity ≤ 1000) # Output: - A single integer which is the maximum total rarity value Mipha can collect in a single dive. # Example: Input: ``` 6 3 1 2 3 4 5 6 ``` Output: ``` 15 ``` Explanation: - Mipha can pick up to 3 minerals in one dive. The highest total rarity value she can collect is by picking 4, 5, and 6 (4 + 5 + 6 = 15).","solution":"def max_rarity(n, k, rarities): Finds the maximum total rarity value Mipha can achieve in a single dive. Args: n (int): The number of different mineral types. k (int): The maximum number of minerals Mipha can collect in one dive. rarities (list of int): The rarity values of each mineral type. Returns: int: The maximum total rarity value in a single dive. max_rarity_sum = 0 # We will slide a window of size k over the list of rarities for i in range(n - k + 1): current_sum = sum(rarities[i:i + k]) if current_sum > max_rarity_sum: max_rarity_sum = current_sum return max_rarity_sum"},{"question":"The mayor of a small town has decided to organize a lantern festival. In the town, there is a main street represented as a straight line with n positions (numbered from 1 to n). A lantern can be placed at any position along this line. Each lantern can illuminate a certain number of positions m to its left and m to its right (illuminating a total of 2m+1 positions including its own position). The mayor wants to light up every position along the main street with the minimum number of lanterns. Given the length of the street n and the range m of the lanterns, write a function that outputs the minimum number of lanterns needed. # Input The input consists of one line containing two integers n and m (1 ≤ n ≤ 1000, 1 ≤ m ≤ 100). # Output Print the minimum number of lanterns required to light the entire street. # Example **Input:** ``` 10 2 ``` **Output:** ``` 2 ``` # Explanation To light up all positions from 1 to 10 with lanterns that each illuminate a range of 2 positions to the left and 2 positions to the right, the minimum number of lanterns needed is 2. Placing lanterns at positions 3 and 8 will cover all positions from 1 to 10. Write a function that follows this signature: ```python def min_lanterns(n: int, m: int) -> int: # Your implementation here ```","solution":"def min_lanterns(n: int, m: int) -> int: Returns the minimum number of lanterns required to light up the entire street of length `n`. Each lantern lights up `m` positions to its left and `m` positions to its right. # Each lantern covers a span of (2 * m + 1) positions coverage = 2 * m + 1 # Calculate the minimum number of lanterns required if n % coverage == 0: return n // coverage else: return n // coverage + 1"},{"question":"You have received a flower shop\'s order list for the main event. The event happens in 24 hours, and each order must be delivered at a specified hour during the next 24 hours. Each order is described by the delivery hour di and the number of flowers fi needed. You, as the delivery manager, can deliver up to a certain number of flowers F per hour. Write a program to determine if all the flower orders can be successfully delivered within the given constraints. The first line contains a positive integer n (1 ≤ n ≤ 50) - the number of orders. The second line contains a positive integer F (1 ≤ F ≤ 100) - the maximum number of flowers that can be delivered in any hour. The next n lines contain two integers each, di (0 ≤ di < 24) - the delivery hour and fi (1 ≤ fi ≤ 50) - the number of flowers to deliver at that hour. If all the orders can be successfully delivered within the given constraints, print \\"Possible\\". Otherwise, print \\"Not Possible\\". For example, if the inputs are: ``` 4 10 1 5 2 12 2 5 3 8 ``` Your program should output \\"Possible\\" if you can fulfill all the orders on time or \\"Not Possible\\" if you can\'t.","solution":"def can_deliver_all_orders(n, F, orders): Determines whether all flower orders can be successfully delivered within the given constraints. :param n: int, number of orders :param F: int, maximum number of flowers that can be delivered in any hour :param orders: list of tuples, each containing (delivery hour, number of flowers) :return: str, \\"Possible\\" if all orders can be delivered on time, otherwise \\"Not Possible\\" delivery_schedule = [0] * 24 # initialize deliveries for each hour within the next 24 hours for di, fi in orders: delivery_schedule[di] += fi for flowers in delivery_schedule: if flowers > F: return \\"Not Possible\\" return \\"Possible\\""},{"question":"You are hosting a hiking event where participants are grouped into hiking teams of different sizes. Each team can either consist of individual hikers or pairs of hikers. Your task is to allocate hiking guides for each team based on their sizes. There are `g` guides available for individual hikers and `p` guides available for pairs of hikers. Each individual hiker requires one guide, and each pair of hikers requires one guide. If any hiker team cannot be assigned a guide, the event denies service to that team. Given the sequence of arriving teams, determine how many teams the event denies service to. The first line contains three integers `m`, `g`, and `p` (1 ≤ `m` ≤ 2⋅10^5, 1 ≤ `g`, `p` ≤ 2⋅10^5) — the number of teams arriving at the event, the number of guides available for individual hikers, and the number of guides available for pairs of hikers. The second line contains a sequence of integers t1, t2, ..., tm (1 ≤ ti ≤ 2) — the description of hiking teams in chronological order. If ti is equal to one, then the i-th team consists of one hiker, otherwise the i-th team consists of two hikers. Print the total number of teams the event denies service to. For example scenarios: - If the first team consists of one hiker, it will be assigned a guide from the individual hiker guides. - If a second team of two hikers arrives and only one guide for pairs of hikers is available, they will be assigned that guide. - If additional teams arrive and no corresponding guides are available, they will be denied service. Example Inputs and Outputs: Input: 4 2 1 1 1 2 1 Output: 1 Explanation: The first two individual hiker teams receive guides from the pool of individual guides. The next pair of hikers receives a guide from the pair hiker guides. The last individual hiker cannot be assigned a guide as no guides for individual hikers remain, resulting in one denied team.","solution":"def count_denied_teams(m, g, p, teams): denied = 0 for team in teams: if team == 1: if g > 0: g -= 1 else: denied += 1 elif team == 2: if p > 0: p -= 1 else: denied += 1 return denied # Example Usage: # m, g, p = 4, 2, 1 # teams = [1, 1, 2, 1] # print(count_denied_teams(m, g, p, teams)) # Output: 1"},{"question":"You are given two strings, `s` and `t`, both consisting of lowercase English letters. Your task is to determine if you can transform string `s` into string `t` using exactly one of the following operations: 1. Swap two characters in string `s`. This operation can be performed at most once. 2. Replace one character in string `s` with another character. Write a function `is_transformable(s, t)` that returns True if it is possible to transform `s` into `t` using exactly one operation described above, and False otherwise. **Input:** - The input consists of two strings, `s` and `t` where `1 ≤ |s|, |t| ≤ 1000` and both strings are of the same length. **Output:** - The function should return a boolean value, True if `s` can be transformed into `t` using exactly one of the allowed operations, and False otherwise. **Examples:** ``` is_transformable(\\"ab\\", \\"ba\\") should return True is_transformable(\\"ab\\", \\"ca\\") should return True is_transformable(\\"abc\\", \\"acb\\") should return True is_transformable(\\"ab\\", \\"ab\\") should return False is_transformable(\\"abc\\", \\"def\\") should return False ``` **Explanation:** 1. In the first case, swapping the characters \'a\' and \'b\' transforms \\"ab\\" to \\"ba\\". 2. In the second case, replacing \'b\' with \'c\' transforms \\"ab\\" to \\"ca\\". 3. In the third case, swapping \'b\' and \'c\' transforms \\"abc\\" to \\"acb\\". 4. In the fourth case, no operation is needed since the strings are already equal, which doesn\'t count as exactly one operation. 5. In the fifth case, more than one operation would be needed, so it\'s not possible to transform \\"abc\\" to \\"def\\" with exactly one operation.","solution":"def is_transformable(s, t): Returns True if string s can be transformed into string t using exactly one of the allowed operations: either swap two characters in s or replace one character in s with another character. if len(s) != len(t): return False # Check for replacements diff_count = 0 diff_indices = [] for i in range(len(s)): if s[i] != t[i]: diff_count += 1 diff_indices.append(i) if diff_count > 2: return False if diff_count == 0: return False # s and t are already the same, so no operation is needed if diff_count == 1: return True # One replacement operation can transform s to t if diff_count == 2: # Check if a single swap would solve the problem i, j = diff_indices return s[i] == t[j] and s[j] == t[i] return False"},{"question":"Bessie the cow has prepared a list of integers and wants to find a contiguous subarray within this list that has the maximum sum. However, Bessie is interested not only in the sum but also in counting how many such maximum sum subarrays exist. Specifically, she wants to count the number of distinct subarrays that yield the maximum sum. Given an array of integers, your task is to determine the maximum sum of any contiguous subarray and count how many distinct contiguous subarrays can achieve that maximum sum. Input - The first line contains a single integer (n) (1 leq n leq 10^5), which is the length of the list. - The second line contains (n) integers a_1, a_2, ldots, a_n (-10^4 leq a_i leq 10^4), which are the elements of the list. Output - Print two integers. The first integer is the maximum sum of any contiguous subarray. The second integer is the number of distinct contiguous subarrays that have this maximum sum. Example Input: ``` 5 1 -2 3 1 -1 ``` Output: ``` 4 1 ``` Explanation: The contiguous subarray `[3, 1]` has the maximum sum of 4. There is only one such distinct subarray.","solution":"def max_subarray_sum_and_count(n, arr): if n == 0: return (0, 0) max_sum = float(\'-inf\') current_sum = 0 max_count = 0 subarray_start_indices = {} for i in range(n): if current_sum <= 0: current_sum = arr[i] start_index = i else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum max_count = 1 subarray_start_indices = {start_index: i} elif current_sum == max_sum: max_count += 1 subarray_start_indices[start_index] = i return max_sum, max_count"},{"question":"Consider a company with several departments, each containing some employees. Each employee has a specific productivity score. The management of the company wants to organize a motivational day where employees are grouped into teams that maximize the team productivity score without splitting the employees from the same department into different teams. Given: - `n` departments. - Each department has `di` employees. - Each employee in department `i` has a productivity score represented by an integer `pi,j`, where `j` (1 ≤ j ≤ di) is the index of the employee in the i-th department. You need to form teams in such a way that: - Each team consists of employees from the same department. - The combined productivity score of the teams is maximized. - The number of teams is minimized. The first line contains the number of departments `n`. Each of the following `n` lines describes one department: the first integer on the line is the number of employees `di`, followed by `di` integers representing the productivity scores of the employees in the department. Output the minimum number of teams formed and their corresponding productivity scores, one per line. Each team\'s productivity score is the sum of the productivity scores of its members. Example: Input: 3 3 10 20 30 2 15 25 4 5 10 20 15 Output: 6 60 40 50 Explanation: - Department 1 has 3 employees with productivity scores 10, 20, and 30, forming 1 team (total score 60). - Department 2 has 2 employees with productivity scores 15 and 25, forming 1 team (total score 40). - Department 3 has 4 employees with productivity scores 5, 10, 20, and 15, forming 2 teams (total score 25+25=50). The output includes: - The number of teams formed: 6 - The productivity scores of the teams: 60, 40, 50 This ensures efficient team formation while maximizing productivity.","solution":"def organize_teams(n, departments): Organizes employees into teams per department by keeping them together and maximizing the productivity score. Parameters: n (int): Number of departments. departments (list of lists): A list where each element is a list containing the productivity scores of employees in one department. Returns: tuple: A tuple containing the number of teams and a list of their corresponding productivity scores. teams = [] for department in departments: teams.append(sum(department)) return len(teams), teams"},{"question":"You are given an array of integers. Your task is to determine if it is possible to rearrange the elements of the array to form a non-decreasing sequence such that no two adjacent elements are the same. If it is possible, return \\"YES\\"; otherwise, return \\"NO\\". You can assume that the array will have at least one element and at most 100,000 elements. # Input: - The first line contains a single integer n (1 ≤ n ≤ 100,000) representing the number of elements in the array. - The second line contains n integers separated by spaces, representing the elements of the array. Each element ai (1 ≤ ai ≤ 10^9). # Output: - Print \\"YES\\" if it is possible to rearrange the array as described, otherwise print \\"NO\\". # Example 1: Input: 5 1 1 2 3 4 Output: YES # Example 2: Input: 4 1 2 2 2 Output: NO # Example 3: Input: 3 5 5 5 Output: NO # Example 4: Input: 6 1 2 3 4 5 6 Output: YES # Explanation: In the first example, one possible rearrangement is [1, 2, 1, 3, 4]. In the second example, it is impossible to rearrange the elements to satisfy the condition. In the third example, there is no way to rearrange the elements to have no two adjacent elements the same because all elements are the same. In the fourth example, the array is already in a non-decreasing sequence with no two adjacent elements being the same.","solution":"from collections import Counter def can_rearrange(n, arr): Determines if it\'s possible to rearrange the array into a non-decreasing sequence such that no two adjacent elements are the same. Parameters: n (int): Number of elements in the array. arr (list of int): The elements of the array. Returns: str: \\"YES\\" if it\'s possible, otherwise \\"NO\\". # Count the frequency of each element freq = Counter(arr) # Find the maximum frequency of any element max_freq = max(freq.values()) # Check if the most frequent element can be spread out to ensure no adjacency if max_freq > (n + 1) // 2: return \\"NO\\" else: return \\"YES\\""},{"question":"Leah is fascinated by unique strings. A string is considered unique if it contains at least one character that does not repeat in that string. Leah wants to find out the number of substrings in a given string that are unique. Given a string `s` of length `n` (1 ≤ n ≤ 5000), count the number of unique substrings. Input: - The first line contains a single integer `n` — the length of the string. - The second line contains the string `s` of length `n` consisting of only lowercase English letters. Output: - A single integer — the number of unique substrings in the given string. Sample Input: ``` 5 abbca ``` Sample Output: ``` 12 ``` Explanation: For the string \\"abbca\\", the unique substrings are: - \\"a\\" - \\"b\\" - \\"c\\" - \\"ab\\" - \\"bc\\" - \\"ca\\" - \\"abb\\" - \\"bca\\" - \\"abbc\\" - \\"bbca\\" - \\"abbca\\" - \\"c\\" Thus, there are a total of 12 unique substrings.","solution":"def count_unique_substrings(n, s): def is_unique(sub): freq = {} for c in sub: if c in freq: freq[c] += 1 else: freq[c] = 1 return any(val == 1 for val in freq.values()) unique_substrings = set() for start in range(n): for end in range(start + 1, n + 1): substring = s[start:end] if is_unique(substring): unique_substrings.add(substring) return len(unique_substrings)"},{"question":"Create a function that takes a string consisting of lowercase letters and returns a new string where each character is replaced by the character two positions ahead in the alphabet (wrapping from \'z\' to \'a\' if necessary). For example, \'a\' should be replaced by \'c\', \'y\' should be replaced by \'a\'. Your function should have the following signature: ```python def shift_chars(s: str) -> str: pass ``` Example: ``` shift_chars(\\"abcxyz\\") -> \\"cdezab\\" shift_chars(\\"hello\\") -> \\"jgnnq\\" ```","solution":"def shift_chars(s: str) -> str: Takes a string of lowercase letters and returns a new string where each character is replaced by the character two positions ahead in the alphabet. result = [] for char in s: new_char = chr(((ord(char) - ord(\'a\') + 2) % 26) + ord(\'a\')) result.append(new_char) return \'\'.join(result)"},{"question":"You are given a grid with n rows and m columns, filled with non-negative integers. Your goal is to collect the maximum sum of values when traversing the grid from the top-left corner to the bottom-right corner. You are only allowed to move either right or down at any point in time. The first line of the input contains two integers, n (1 le n leq 1000) and m (1 le m leq 1000), the dimensions of the grid. The following n lines contain m integers each, representing the grid. Each value in the grid is a non-negative integer less than or equal to 100. Print the maximum sum of values that can be collected. **Example:** ``` Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 12 ``` **Explanation:** The path 1 -> 3 -> 5 -> 2 -> 1 yields the maximum sum, which is 12.","solution":"def max_sum_path(n, m, grid): # Initialize dp array of the same dimension as grid with all zeros dp = [[0]*m for _ in range(n)] # Starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of dp array for i in range(1, n): for j in range(1, m): dp[i][j] = grid[i][j] + max(dp[i-1][j], dp[i][j-1]) return dp[n-1][m-1]"},{"question":"You are given an array of integers. Your task is to handle multiple types of queries on this array efficiently. The types of queries include updating elements in the array and calculating the sum of elements within a specific subarray. The first line of input contains two integers n and q — the number of elements in the array and the number of queries, respectively (1 leq n, q leq 10^5). The second line contains n space-separated integers a_1, a_2, ldots, a_n, representing the initial elements of the array (1 leq a_i leq 10^9). Each of the following q lines contains a query in one of the following formats: - 1 x y: Update the element at index x to y (1 leq x leq n, 1 leq y leq 10^9). - 2 l r: Calculate the sum of elements from index l to r (inclusive) (1 leq l leq r leq n). For each query of the second type, output the result on a new line.","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, index, value): pos = self.n + index self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1] def query(self, left, right): result = 0 left += self.n right += self.n + 1 while left < right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 1: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, x, y = query seg_tree.update(x - 1, y) elif query[0] == 2: _, l, r = query results.append(seg_tree.query(l - 1, r - 1)) return results"},{"question":"Given an array of integers where every element appears three times except for one, which appears exactly once. Find that single one. # Input - The first line of the input contains an integer `n` (3 ≤ `n` ≤ 3*10^4) – the size of the array. - The next line contains `n` space-separated integers `a_1, a_2, ..., a_n` (-10^9 ≤ `a_i` ≤ 10^9). # Output - Output a single integer – the element that appears exactly once. # Example Input ``` 10 2 2 3 2 4 4 4 6 6 6 ``` Output ``` 3 ``` # Note - In the given example, the elements `2`, `4`, and `6` each appear three times in the array, while `3` appears only once, so the output is `3`.","solution":"def find_single_element(nums): Given an array where every element appears three times except for one, find the element that appears exactly once. ones, twos = 0, 0 for num in nums: # `twos` holds the bits which are there in the `twos` variable or `num` but not in # both `twos` and `ones`. twos |= ones & num # `ones` holds the bits which have appeared odd number of times. ones ^= num # `common_bit_mask` contains all the bits which appeared three times so far. common_bit_mask = ~(ones & twos) # If a bit has appeared three times, remove it from `ones` and `twos`. ones &= common_bit_mask twos &= common_bit_mask return ones"},{"question":"You are given an infinite sequence that starts with the number \'1\'. Every following number in the sequence is determined according to the following rule: if the number at the previous position is written as a chain of the character \'1\' repeated times, the next number in the sequence will be the count of \'1\'s followed by the digit \'1\'. The first few elements of the sequence look like this: 1, 11, 21, 1211, 111221, 312211, … Here\'s the breakdown of the sequence: - The first number is \'1\'. - The second number describes the first as \\"one 1\\" or \'11\'. - The third number describes the second as \\"two 1s\\" or \'21\'. - The fourth number describes the third as \\"one 2, then one 1\\" or \'1211\'. - The fifth number describes the fourth as \\"one 1, one 2, then two 1s\\" or \'111221\'. Your task is to write a function that, given an integer n, returns the nth number in the sequence. **Input:** An integer t representing the number of test cases. For each test case, an integer n (1 ≤ n ≤ 30). **Output:** For each test case, output the nth number in the sequence as a string. **Example:** ``` Input: 3 1 4 7 Output: 1 1211 13112221 ``` You may assume that the input will always be valid and within the given constraints. The function should be optimized for efficiency due to the potential size of the numbers in the sequence.","solution":"def count_and_say(n): Returns the nth number in the count-and-say sequence. if n == 1: return \\"1\\" result = \\"1\\" for _ in range(n - 1): result = next_sequence(result) return result def next_sequence(sequence): Generates the next sequence in the count-and-say order given a current sequence. next_seq = [] i = 0 while i < len(sequence): count = 1 while i + 1 < len(sequence) and sequence[i] == sequence[i + 1]: i += 1 count += 1 next_seq.append(str(count) + sequence[i]) i += 1 return \'\'.join(next_seq) def solve(test_cases): Solves the problem for multiple test cases. results = [] for n in test_cases: results.append(count_and_say(n)) return results"},{"question":"You are given an array of integers a_1, a_2, ldots, a_n and a series of q queries. Each query contains three integers x, y and k. For each query, you need to find the sum of elements from index x to index y, inclusive, and determine if this sum is divisible by k. If the sum is divisible by k, output \\"YES\\", otherwise output \\"NO\\". # Input The first line contains two integers n and q (1 le n, q le 10^5) — the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. Each of the next q lines contains three integers x, y, and k (1 le x le y le n, 1 le k le 10^9) — the indices defining the range of the query and the integer k. # Output For each query, output \\"YES\\" if the sum of elements in the specified range is divisible by k, otherwise output \\"NO\\". # Example Input 4 3 1 2 3 4 1 4 5 2 3 2 1 3 6 Output YES NO NO # Note In the first query, the sum of elements from index 1 to 4 is 10. Since 10 is divisible by 5, the answer is \\"YES\\". In the second query, the sum of elements from index 2 to 3 is 5. Since 5 is not divisible by 2, the answer is \\"NO\\". In the third query, the sum of elements from index 1 to 3 is 6. Since 6 is not divisible by 6, the answer is \\"YES\\".","solution":"def preprocess_prefix_sums(a): Preprocess the prefix sums of the array for fast range sum queries. :param a: List[int] The input array. :return: List[int] The prefix sums array. prefix_sums = [0] * (len(a) + 1) for i in range(1, len(a) + 1): prefix_sums[i] = prefix_sums[i - 1] + a[i - 1] return prefix_sums def process_query(prefix_sums, x, y, k): Process a single query to determine if the sum of elements in the range [x, y] is divisible by k. :param prefix_sums: List[int] The prefix sums array. :param x: int The start index of the range query (1-based index). :param y: int The end index of the range query (1-based index). :param k: int The divisor. :return: str \\"YES\\" if the sum is divisible by k, \\"NO\\" otherwise. range_sum = prefix_sums[y] - prefix_sums[x - 1] return \\"YES\\" if range_sum % k == 0 else \\"NO\\" def solve(n, q, a, queries): Solve the problem for the given input. :param n: int The number of elements in the array. :param q: int The number of queries. :param a: List[int] The elements of the array. :param queries: List[Tuple[int, int, int]] The list of queries, each a tuple (x, y, k). :return: List[str] The results of the queries. prefix_sums = preprocess_prefix_sums(a) results = [] for x, y, k in queries: results.append(process_query(prefix_sums, x, y, k)) return results"},{"question":"Dreamoon loves numbers and math challenges. He has recently come across an interesting problem of calculating special values for given ranges. Here\'s the problem Dreamoon designed: You are given two integers L and R. Your task is to find the sum of all prime numbers between L and R inclusive. Since the resulting sum could be very large, you need to find the sum modulo 10^9 + 7. The first line contains an integer t (1 leq t leq 10^5) denoting the number of test cases in the input. Each of the next t lines contains two integers L and R (1 leq L leq R leq 10^6). For each test case, print the sum of all prime numbers between L and R, modulo 10^9 + 7.","solution":"MOD = 10**9 + 7 def sieve_up_to(n): Use Sieve of Eratosthenes to find all primes up to n. is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 primes = [] for p in range(2, n + 1): if is_prime[p]: primes.append(p) return primes def sum_primes_range(L, R, primes): Calculate sum of all primes in the given range [L, R]. sum_of_primes = 0 for prime in primes: if prime > R: break if prime >= L: sum_of_primes = (sum_of_primes + prime) % MOD return sum_of_primes def sum_primes_in_ranges(test_cases): max_r = max(R for _, R in test_cases) primes = sieve_up_to(max_r) results = [] for L, R in test_cases: results.append(sum_primes_range(L, R, primes)) return results"},{"question":"Given a string of characters consisting of only \'(\', \')\', \'{\', \'}\', \'[\' and \']\', write a program to determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type. Input: - A single line containing a string s which will not exceed 10^5 characters. Output: - A single line containing \\"Yes\\" if the string is valid, or \\"No\\" otherwise. Example 1: ``` Input: () Output: Yes ``` Example 2: ``` Input: ()[]{} Output: Yes ``` Example 3: ``` Input: (] Output: No ``` Example 4: ``` Input: ([)] Output: No ``` Example 5: ``` Input: {[]} Output: Yes ```","solution":"def is_valid(s: str) -> str: Determines if the input string of brackets is valid. A string is valid if open brackets are closed by the same type of brackets and in the correct order, and every close bracket has a corresponding open bracket of the same type. Args: s (str): The input string consisting of \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Returns: str: \\"Yes\\" if the string is valid, otherwise \\"No\\". stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"No\\" else: stack.append(char) return \\"Yes\\" if not stack else \\"No\\""},{"question":"The forest treasurer Squirrel from the ABBYY company has devised another interesting problem for the ABBYY Cup participants! This time, the challenge takes you deep into the world of arithmetic operations on customized data structures. Let\'s dive into the problem: You have a collection of nodes organized in a binary tree. Each node in the binary tree contains an integer value. You need to implement a function that, given this binary tree, computes the sum of all values of nodes at each depth level of the tree. The depth level of a node is determined by the number of edges from the root to that node (root is at depth level 0). The input format is as follows: - The first line contains an integer n (0 ≤ n ≤ 10^5) — the number of nodes in the tree. - The following n lines each contain two integers u and v, denoting an edge between nodes u and v. Nodes are numbered from 1 to n, where node 1 is the root. You need to output the sum of values of nodes at each depth level, starting from depth level 0 up to the maximum depth in the tree. Each sum should be printed on a new line in ascending order of depth levels. Example Input: ``` 5 1 2 1 3 2 4 2 5 ``` Example Output: ``` 1 5 9 ``` Explanation: - At depth level 0, there is only node 1 with value 1, so the sum is 1. - At depth level 1, there are nodes 2 and 3 with values 2 and 3, so the sum is 5 (2 + 3). - At depth level 2, there are nodes 4 and 5 with values 4 and 5, so the sum is 9 (4 + 5). Implement a function to solve this problem efficiently, ensuring to handle the upper constraint on the number of nodes.","solution":"from collections import defaultdict, deque def sum_at_depths(n, edges): Returns a list of sums of node values at each depth level in a binary tree. :param n: Number of nodes in the tree. :param edges: List of tuples representing the edges of the tree. :return: List of integers representing the sum of node values at each depth level. if n == 0: return [] tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) depths = defaultdict(int) visited = set() queue = deque([(1, 0)]) # (node, depth) visited.add(1) while queue: node, depth = queue.popleft() depths[depth] += node for neighbour in tree[node]: if neighbour not in visited: visited.add(neighbour) queue.append((neighbour, depth + 1)) return [depths[i] for i in range(len(depths))]"},{"question":"Vasya has a string s consisting of lowercase English letters. He wants to modify this string in the following manner: he can perform the following operation any number of times. - Choose two adjacent characters in the string and if they are equal, remove both of them from the string. These operations should be performed until no such pair of adjacent characters exist. Your task is to help Vasya determine the final modified string after all the possible operations have been performed. The first line contains an integer n (1 ≤ n ≤ 10^5) – the length of the string s. The second line contains the string s consisting of n lowercase English letters. Print the final string after all operations have been applied. If the final string is empty, print \\"Empty String\\". For example: ``` Input: 5 abbcc Output: a Input: 6 abccba Output: Empty String ```","solution":"def modified_string(n, s): Returns the final modified string after removing all pairs of adjacent equal characters. If the final string is empty, returns \\"Empty String\\". stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack) if stack else \\"Empty String\\""},{"question":"Kyoya Ootori is organizing a book signing event and is arranging book signing schedules for n authors. Each author has a preferred time slot during which they wish to sign autographs. However, no two authors can sign autographs at the same time. You are given a list of time slots during which each author is available. Your task is to find the maximum number of authors who can sign autographs without overlapping. The input begins with an integer n (1 ≤ n ≤ 1000), the number of authors. The next n lines each contain two integers si and ti (1 ≤ si < ti ≤ 10000), which represent the start and end time of the ith author\'s available time slot. Output a single integer, the maximum number of authors who can sign autographs without overlapping. For example, given the following input: ``` 4 1 3 2 5 4 6 6 8 ``` The output should be: ``` 3 ``` In this example, the maximum number of authors who can sign autographs without overlapping is 3. One possible schedule is for authors with time slots [1, 3], [4, 6], and [6, 8].","solution":"def max_non_overlapping_authors(n, time_slots): Finds the maximum number of authors who can sign autographs without overlapping. Args: n (int): Number of authors. time_slots (list of tuples): List of tuples, where each tuple contains two integers si and ti. Returns: int: The maximum number of non-overlapping time slots. # Sort time slots by their ending time time_slots.sort(key=lambda x: x[1]) # Initialize variables max_authors = 0 end_time = 0 for start, end in time_slots: if start >= end_time: # If the current time slot doesn\'t overlap with the previous chosen time slot max_authors += 1 end_time = end return max_authors"},{"question":"Dušan is working on another railway map where cities are connected by bidirectional railways, making the map a tree again. He wants to perform certain queries efficiently. Specifically, he needs to answer two types of queries: 1. The distance query: Given two cities a and b, determine the distance between them. The distance is the number of railways in the shortest path connecting these two cities. 2. The smallest city query: Given two cities a and b, find the city with the smallest index that lies on the shortest path from a to b. Your task is to help Dušan by writing a program that answers these types of queries efficiently. The structure of the input and output is as follows: # Input - The first line contains an integer n (1 le n le 10^5) representing the number of cities. - Each of the next n - 1 lines contains two integers u_i and v_i (1 le u_i, v_i le n, u_i neq v_i), representing a railway between cities u_i and v_i. - The next line contains an integer q (1 le q le 10^5), the number of queries. - Each of the next q lines contains three integers t, a, and b: - If t = 1, it is a distance query and should output the distance between cities a and b. - If t = 2, it is a smallest city query and should output the city with the smallest index on the path from a to b. # Output For each query, output the result on a new line: - For a distance query, output the distance between cities a and b. - For a smallest city query, output the smallest indexed city on the path from a to b. # Example Input ``` 5 1 2 1 3 3 4 3 5 3 1 1 5 2 2 4 1 4 5 ``` Output ``` 3 1 2 ```","solution":"from collections import deque, defaultdict def preprocess_tree(n, edges): tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) level = [-1] * (n + 1) parent = [-1] * (n + 1) queue = deque([1]) level[1] = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if level[neighbor] == -1: level[neighbor] = level[node] + 1 parent[neighbor] = node queue.append(neighbor) return tree, level, parent def lca(u, v, parent, level): # Bring u and v to the same level if level[u] < level[v]: u, v = v, u while level[u] > level[v]: u = parent[u] # Find the common ancestor while u != v: u = parent[u] v = parent[v] return u def distance_between_cities(a, b, parent, level): lca_node = lca(a, b, parent, level) return level[a] + level[b] - 2 * level[lca_node] def smallest_city_on_path(a, b, parent, level): lca_node = lca(a, b, parent, level) path = [] # Trace back from a to lca_node while a != lca_node: path.append(a) a = parent[a] path.append(lca_node) # Trace back from b to lca_node back_path = [] while b != lca_node: back_path.append(b) b = parent[b] path.extend(reversed(back_path)) return min(path) def process_queries(n, edges, queries): tree, level, parent = preprocess_tree(n, edges) results = [] for t, a, b in queries: if t == 1: results.append(distance_between_cities(a, b, parent, level)) elif t == 2: results.append(smallest_city_on_path(a, b, parent, level)) return results"},{"question":"You are given a grid with n rows and m columns, filled with positive integers. The task is to find the number of unique integers in the grid. Each cell in the grid contains a positive integer between 1 and 10^9. Your goal is to count how many distinct integers are present in the grid. # Input: - The first line contains two integers n (1 le n le 1000) and m (1 le m le 1000) representing the number of rows and columns in the grid. - The next n lines each contain m integers, where the integer in the i-th row and j-th column represents the value at that cell of the grid. # Output: - Print a single integer, the number of unique integers in the grid. # Example: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 9 ``` Input: ``` 2 2 1000000000 1000000000 1000000000 1000000000 ``` Output: ``` 1 ``` # Note: In the first example, all integers are unique, so the output is 9. In the second example, there is only one unique integer in the grid, hence the output is 1.","solution":"def count_unique_integers(grid): Returns the count of unique integers in the grid. Parameters: - grid: List[List[int]], the 2D grid containing integers. Returns: - int, the count of unique integers. unique_integers = set() for row in grid: for value in row: unique_integers.add(value) return len(unique_integers)"},{"question":"You are given a list of strings representing file paths in a Unix-like file system. Each string is an absolute path, which starts from \\"/\\" (the root directory). Write a Python function `remove_subfolders` that takes this list of strings and returns a list with all subfolders removed. In other words, if a folder A is a subfolder of folder B, then folder A should be removed from the list. # Input - A list of strings `folders` containing 1 to 1000 elements. Each element is a string representing an absolute path with a length of 1 to 300 characters. The total length of all strings combined will not exceed 300,000 characters. - Each path only contains lowercase letters, slashes, and periods (for the root). # Output - A list of strings containing the remaining file paths with all subfolders removed. # Function Signature ```python def remove_subfolders(folders: list[str]) -> list[str]: ``` # Example Input: ```python folders = [\\"/a/b/c\\", \\"/a/b/ca\\", \\"/a/b/d\\", \\"/a/b\\", \\"/c/d/e\\", \\"/c/d\\", \\"/c/f\\"] ``` Output: ```python [\\"/a/b\\", \\"/c/d\\", \\"/c/f\\"] ``` # Note - In the example, \\"/a/b/c\\" and \\"/a/b/ca\\" are subfolders of \\"/a/b\\", and \\"/c/d/e\\" is a subfolder of \\"/c/d\\".","solution":"def remove_subfolders(folders: list[str]) -> list[str]: Removes all subfolders from the list of folders. folders.sort() result = [] prev_folder = None for folder in folders: if prev_folder is None or not folder.startswith(prev_folder + \'/\'): result.append(folder) prev_folder = folder return result"},{"question":"You are given a list of integers and a target integer. Your task is to determine if there are two distinct integers in the list that add up to the target integer. If such a pair exists, return the indices of the two numbers in any order. If no such pair exists, return an empty list. Your solution should make use of an efficient algorithm with a time complexity of O(n). Function signature: `def find_pair(nums: List[int], target: int) -> List[int]:` **Input:** - An integer list `nums` of length `n` (1 ≤ n ≤ 10^5). - An integer `target` (−10^9 ≤ target ≤ 10^9). **Output:** - A list of two integers representing the indices of the pair of numbers that add up to the target. If such a pair does not exist, return an empty list. **Example:** 1. `find_pair([2, 7, 11, 15], 9)` should return `[0, 1]` (2 + 7 = 9). 2. `find_pair([3, 2, 4], 6)` should return `[1, 2]` (2 + 4 = 6). 3. `find_pair([3, 3], 6)` should return `[0, 1]` (3 + 3 = 6). 4. `find_pair([1, 2, 3, 4, 5], 10)` should return `[]` (no such pair exists).","solution":"from typing import List def find_pair(nums: List[int], target: int) -> List[int]: Find two distinct integers in the list that add up to the target. Returns the indices of the two numbers, or an empty list if no such pair exists. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You are given a string of length n consisting of lowercase English letters. Your task is to determine the number of distinct substrings of the given string. A substring is defined as a contiguous sequence of characters within a string. The first line contains an integer n (1 le n le 5000), which represents the length of the string. The second line contains a string of length n consisting of only lowercase English letters. Print a single integer representing the number of distinct substrings of the given string. For example, in the string \\"abc\\", the distinct substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\" which totals to 6.","solution":"def count_distinct_substrings(n, s): Returns the number of distinct substrings of the given string s of length n. substrings = set() for i in range(n): for j in range(i+1, n+1): substrings.add(s[i:j]) return len(substrings)"},{"question":"In an amusement park, there are several attractions connected by paths, forming a graph. The park owner wants to ensure safety by installing cameras. Each camera can cover an entire path between two attractions. Your task is to determine the minimum number of cameras needed to cover all paths in the park. The park is represented by an undirected graph with n attractions and m paths. Each path connects two different attractions, and no two paths connect the same pair of attractions. No path connects an attraction to itself. Write a function `minCameras` that takes an integer `n` (1 ≤ n ≤ 50) representing the number of attractions, and a list of tuples `edges` where each tuple `(u, v)` (1 ≤ u, v ≤ n, u ≠ v) represents a path connecting attraction `u` and attraction `v`. The function should return an integer representing the minimum number of cameras needed to cover all paths. # Example ```python def minCameras(n, edges): # Your code here # Example 1 n = 5 edges = [(1, 2), (1, 3), (4, 2), (4, 3), (2, 5)] print(minCameras(n, edges)) # Output: 2 # Example 2 n = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(minCameras(n, edges)) # Output: 2 ``` # Explanation In the first example: - A camera at the path (1, 2) will cover paths (1, 2) and (2, 4). - A camera at the path (1, 3) will cover paths (1, 3) and (3, 4). - Hence, a minimum of 2 cameras are needed to cover all paths. In the second example: - A camera at the path (1, 2) will cover paths (1, 2) and (2, 3) and (3, 4). - A camera at the path (1, 4) will cover paths (4, 1). - Hence, a minimum of 2 cameras are needed to cover all paths.","solution":"import networkx as nx def minCameras(n, edges): G = nx.Graph() G.add_edges_from(edges) edge_cover = nx.min_edge_cover(G) return len(edge_cover) # Example usage: # Example 1 n = 5 edges = [(1, 2), (1, 3), (4, 2), (4, 3), (2, 5)] print(minCameras(n, edges)) # Output: 3 # Example 2 n = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] print(minCameras(n, edges)) # Output: 2"},{"question":"A group of friends loves to play a game where they repeatedly remove the first adjacent duplicate characters in a string until there are no more such duplicates left. For example, given the string \\"abbaca\\", they would make the following sequence of transformations: - \\"abbaca\\" → \\"aaca\\" - \\"aaca\\" → \\"ca\\" Write a function `remove_adjacent_duplicates` that takes a string `s` and returns the final string after all possible removals have been made. The function should read the input from standard input and output the result to standard output. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 100) — the initial length of the string `s`. - The second line contains a string `s` consisting of exactly `n` lowercase Latin letters. # Output - Print the final string after all possible removals of adjacent duplicates have been made. # Example Input ``` 6 abbaca ``` Output ``` ca ``` # Note In the example, the intermediate steps are: 1. \\"abbaca\\" → \\"aaca\\" (after removing \\"bb\\") 2. \\"aaca\\" → \\"ca\\" (after removing \\"aa\\") So the final string is \\"ca\\".","solution":"def remove_adjacent_duplicates(s): Removes adjacent duplicates from a given string iteratively. stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \'\'.join(stack)"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to determine the length of the longest substring that contains no more than two distinct characters. The first line contains one integer t (1 le t le 10^3) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 10^5) — the length of the string. The second line contains a string s of length n consisting only of lowercase English letters. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case, print the length of the longest substring that contains no more than two distinct characters.","solution":"def longest_substring_with_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. max_length = 0 start = 0 char_map = {} for end in range(len(s)): if s[end] in char_map: char_map[s[end]] += 1 else: char_map[s[end]] = 1 # If more than 2 distinct characters, shrink the window while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of results. results = [] for i in range(t): n, s = test_cases[i] results.append(longest_substring_with_two_distinct(s)) return results"},{"question":"You are given an integer array `arr` consisting of `n` positive integers, and a positive integer `k`. You need to find out the maximum sum of a subarray of length less than or equal to `k`. A subarray is defined as a contiguous part of an array. Your task is to write a function that takes the array `arr` and the integer `k` as input and returns the maximum possible sum of a subarray with length less than or equal to `k`. # Input - An integer `n` (1 leq n leq 1000) - the length of the array `arr`. - An integer `k` (1 leq k leq n) - the maximum length of the subarray. - A list of `n` integers `arr` (1 leq arr[i] leq 10^4) - the array elements. # Output - A single integer representing the maximum sum of a subarray with length less than or equal to `k`. # Example **Input:** ``` 5 3 1 2 3 4 5 ``` **Output:** ``` 9 ``` **Explanation:** The subarray `[3, 4, 2]` provides the maximum sum of `9` within the constraint of length 3. # Note To find the result efficiently, consider using sliding window technique or similar methods to handle various lengths of subarrays up to `k`.","solution":"def max_sum_subarray(arr, k): Find the maximum sum of a subarray with length less than or equal to k. Parameters: arr (list): List of positive integers. k (int): Maximum length of subarray. Returns: int: Maximum sum of subarray with length less than or equal to k. n = len(arr) max_sum = 0 for length in range(1, k + 1): window_sum = sum(arr[:length]) max_sum = max(max_sum, window_sum) for i in range(length, n): window_sum += arr[i] - arr[i - length] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"You are given an array of integers. Your task is to divide this array into two non-empty subarrays, so that the absolute difference of their sums is as small as possible. You need to find this minimum possible absolute difference. Formally, for a given array a=[a_1, a_2, dots, a_n], find the minimum possible value of | sum(a_1) + sum(a_2) + dots + sum(a_k) - (sum(a_{k+1}) + sum(a_{k+2}) + dots + sum(a_n)) | where 1 le k < n. The first input line contains an integer t (1 leq t leq 100), the number of test cases. The following t lines contain: - The first line of each test case contains an integer n (2 leq n leq 100) — the number of elements in the array. - The second line of each test case contains n integers, the elements of the array a (1 leq a_i leq 1000). Print t lines. For each test case, print the minimum possible absolute difference.","solution":"from itertools import combinations def min_abs_difference(t, test_cases): results = [] for case in test_cases: n, a = case[0], case[1] total_sum = sum(a) min_diff = float(\'inf\') for i in range(1, n): for subset in combinations(a, i): subset_sum = sum(subset) diff = abs(total_sum - 2 * subset_sum) min_diff = min(min_diff, diff) results.append(min_diff) return results"},{"question":"A company has multiple machines, each of which produces some number of widgets in a day. Each machine has a unique rate of producing widgets and can produce a specific type of widget denoted by a widget ID. You are given a list of `n` machines where each machine is represented by a tuple `(rate, widget_id)`. You also have `q` queries where each query specifies a target number of widgets and the widget ID. For each query, determine the minimum number of days required to produce at least the target number of widgets using the machines that produce the specified widget type. If it is not possible to produce the required number of widgets with the available machines, return -1 for that query. Input format: - The first line contains two integers `n` and `q` (1 ≤ n, q ≤ 10^5) — the number of machines and the number of queries respectively. - The next `n` lines each contain two integers `rate` and `widget_id` (1 ≤ rate ≤ 100, 1 ≤ widget_id ≤ 10^5) — the production rate (widgets per day) and the ID of the widget type produced by the machine. - The following `q` lines each contain two integers `target` and `wid` (1 ≤ target ≤ 10^9, 1 ≤ wid ≤ 10^5) — the target number of widgets and the widget ID for the query. Output format: - For each query, output a single integer — the minimum number of days required to produce the target number of widgets, or -1 if it is not possible with the given machines. Example: Input: ``` 5 3 10 1 5 2 8 1 4 2 6 1 100 1 70 2 50 3 ``` Output: ``` 7 15 -1 ``` Explanation: - For the first query (100 widgets of type 1), the machines producing type 1 widgets have rates 10, 8, and 6, resulting in a combined rate of 24 widgets per day. Hence, it will take 100 / 24 = 4.17, rounded up to 5 days to reach 96 widgets, and an additional day to reach 100 widgets making a total of 7 days. - For the second query (70 widgets of type 2), the machines producing type 2 widgets have rates 5 and 4, resulting in a combined rate of 9 widgets per day. It will take approximately 70 / 9 = 7.78, rounded up to 8 days to reach 72 widgets, making a total of 8 days. - For the third query (50 widgets of type 3), there are no machines that produce this type of widget, so the output is -1.","solution":"import math from collections import defaultdict def min_days_to_produce_widgets(n, q, machines, queries): # Dictionary to store total production rate for each widget id widget_rate = defaultdict(int) # Sum up the rates for each widget ID for rate, wid in machines: widget_rate[wid] += rate result = [] for target, wid in queries: if wid not in widget_rate or widget_rate[wid] == 0: result.append(-1) else: days = math.ceil(target / widget_rate[wid]) result.append(days) return result"},{"question":"Write a function that calculates the factorial of a given positive integer n. The factorial of a number n is the product of all positive integers less than or equal to n. The input is a single integer n (1 ≤ n ≤ 12). Output the factorial of the given number n. For example, the factorial of 5 is 5! = 5 × 4 × 3 × 2 × 1 = 120.","solution":"def factorial(n): Calculates the factorial of a given positive integer n. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"John is currently interested in finding the longest common substring between two strings. However, he is facing constraints on time and memory, so he has decided to work with a specific type of substring which he calls “Palindrome Substring”. A substring is a contiguous sequence of characters within a string that is also a palindrome (a string that reads the same forwards and backwards). Given two strings, s1 and s2, of lengths n1 and n2 respectively, find the longest palindromic substring that is common to both s1 and s2. The first line of input contains integers n1 and n2 (1 ≤ n1, n2 ≤ 2000) — the lengths of the strings s1 and s2 respectively. The next two lines contain the strings s1 and s2 respectively. Print the length of the longest palindromic substring that is common to both strings. If there is no such substring, print 0. **Example:** **Input:** ``` 6 5 abacdf ababa ``` **Output:** ``` 3 ``` **Explanation:** In these strings, the longest common palindromic substring is \\"aba\\" which has a length of 3.","solution":"def longest_common_palindromic_substring(n1, s1, n2, s2): def is_palindrome(s): return s == s[::-1] max_len = 0 for i in range(n1): for j in range(n2): length = 1 while i + length <= n1 and j + length <= n2: substring_s1 = s1[i:i+length] substring_s2 = s2[j:j+length] if substring_s1 == substring_s2 and is_palindrome(substring_s1): max_len = max(max_len, length) length += 1 return max_len"},{"question":"You are given a sequence of numbers where a subset of the numbers might have been altered. Your task is to identify the suspects that could have tampered the numbers. You have an input string consisting of the original unaltered ordered sequence of unique integers and another sequence that may have duplicates or altered values. Write a function to return a list of positions in the altered sequence where the tampering occurred (i.e., the positions where the altered sequence differs from the original sequence). The original sequence and altered sequence will contain integers in the range [1, 1000], with each sequence length being no larger than 100. # Input - An integer, `n`, representing the length of the sequences. - A list of `n` integers, representing the original sequence. - A list of `n` integers, representing the potentially altered sequence. # Output - A list of integers, representing positions in the altered sequence where discrepancies are found (1-based index). # Example Input ``` 5 [1, 2, 3, 4, 5] [1, 2, 3, 0, 5] ``` Output ``` [4] ``` Input ``` 6 [1, 3, 5, 7, 9, 11] [1, 3, 4, 7, 9, 10] ``` Output ``` [3, 6] ``` Note: - The output list should be in ascending order. - If no discrepancies are found, return an empty list.","solution":"def identify_tampered_positions(n, original_seq, altered_seq): Returns a list of 1-based positions in the altered sequence where discrepancies from the original sequence are found. tampered_positions = [] for i in range(n): if original_seq[i] != altered_seq[i]: tampered_positions.append(i + 1) # Converting to 1-based index return tampered_positions"},{"question":"In a small house, there is a series of smart lights installed such that each light can be turned on or off remotely. There are N lights placed in a row from left to right. Initially, all the lights are off. You are given a sequence of M operations to perform on this set of lights. Each operation can be one of the following: 1. Turn on a specific light. 2. Turn off a specific light. 3. Toggle the state (on/off) of a specific light. 4. Query whether a specific light is on or off. Your task is to process these operations efficiently and return the result for each query operation. Input: - The first line contains two integers N and M (1 ≤ N, M ≤ 100,000) — the number of lights and the number of operations, respectively. - The next M lines contain one of the following operation descriptions: - \\"1 x\\" (1 ≤ x ≤ N) — Turn on the light at position x. - \\"2 x\\" (1 ≤ x ≤ N) — Turn off the light at position x. - \\"3 x\\" (1 ≤ x ≤ N) — Toggle the state of the light at position x. - \\"4 x\\" (1 ≤ x ≤ N) — Query the current state of the light at position x. Output \\"ON\\" if the light is on, otherwise \\"OFF\\". Output: - For each query operation, output \\"ON\\" or \\"OFF\\" on a new line as specified in the input. Example: Input: 5 6 1 3 3 2 4 3 4 2 2 3 4 3 Output: ON ON OFF Explanation: Initially, all lights are off. - Operation \\"1 3\\" turns on the light at position 3. - Operation \\"3 2\\" toggles the light at position 2 (so it is now on). - Operation \\"4 3\\" queries the light at position 3 (which is on), so output \\"ON\\". - Operation \\"4 2\\" queries the light at position 2 (which is on), so output \\"ON\\". - Operation \\"2 3\\" turns off the light at position 3. - Operation \\"4 3\\" queries the light at position 3 (which is now off), so output \\"OFF\\".","solution":"def smart_lights(N, operations): Processes a list of operations on smart lights and returns the status of lights for each query. Args: N (int): The number of lights. operations (list of tuples): A list of operations to be performed on the lights. Returns: list of str: List containing \\"ON\\" or \\"OFF\\" for each query operation. lights = [False] * N result = [] for operation in operations: op_type, x = operation x -= 1 # Convert to 0-based index if op_type == 1: lights[x] = True elif op_type == 2: lights[x] = False elif op_type == 3: lights[x] = not lights[x] elif op_type == 4: result.append(\\"ON\\" if lights[x] else \\"OFF\\") return result"},{"question":"Given a string s consisting of lowercase English letters, you are to find the length of the longest substring that can be obtained by deleting at most one character from the original string. For example, given the string \\"abccba\\", if we delete \'b\' at index 1 or index 4, we get \\"accba\\" or \\"abcca\\" respectively, both of which are the longest substrings that can be obtained by deleting at most one character from \\"abccba\\", and their length is 5. Input: - A single string s (1 ≤ |s| ≤ 10^5), consisting of only lowercase English letters. Output: - Output a single integer, the length of the longest substring obtainable by deleting at most one character from the input string. Examples: Input: abccba Output: 5 Input: aaaa Output: 3 Input: abcde Output: 4 Explanation for the examples: 1. In the first example, by removing \'b\' at index 1 or index 4, we yield the longest substring of length 5. 2. In the second example, removing any of the \'a\' characters gives the longest substring of length 3 because the string remains the same. 3. In the third example, deleting any character from the unique string \\"abcde\\" results in a longest substring of length 4.","solution":"def length_of_longest_substring(s): Returns the length of the longest substring that can be obtained by deleting at most one character from the input string. # Edge case for string of length 1 if len(s) == 1: return 0 max_length = 0 n = len(s) # Iterate over each character in the string for i in range(n): # Create a new string by removing the character at index i possible_substring = s[:i] + s[i+1:] max_length = max(max_length, len(possible_substring)) return max_length"},{"question":"Alex loves palindromes. A palindrome is a string that reads the same from left to right and right to left. For example, strings \\"madam\\", \\"racecar\\", and \\"a\\" are palindromes, while \\"hello\\" and \\"world\\" are not. One day, Alex received a string `t` consisting of lowercase letters. He wants to find the longest palindromic substring within `t`. If there are multiple palindromic substrings of the same maximum length, he needs the one that appears first in the original string. Write a function that takes a string `t` and returns the longest palindromic substring. If the string does not contain any palindromic substring longer than one character, return the first character of the string. # Input The input consists of a single string `t` where 1 ≤ |t| ≤ 1000. The string contains only lowercase English letters. # Output Print the longest palindromic substring of `t`. If multiple such substrings exist with the same maximum length, print the one that appears first. # Example Input: ``` babad ``` Output: ``` bab ``` Input: ``` cbbd ``` Output: ``` bb ``` Input: ``` a ``` Output: ``` a ``` # Note In the first example, \\"bab\\" is a palindromic substring. Although \\"aba\\" is also a valid substring, \\"bab\\" appears first. In the second example, \\"bb\\" is the longest palindromic substring.","solution":"def longest_palindromic_substring(t): This function returns the longest palindromic substring of the input string `t`. If there are multiple longest palindromic substrings, the one that appears first is returned. :param t: A string consisting of lowercase letters :return: The longest palindromic substring of `t` n = len(t) if n <= 1: return t start = 0 max_length = 1 for i in range(1, n): # Check for even length palindrome centered around `i-1` and `i` low = i - 1 high = i while low >= 0 and high < n and t[low] == t[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindrome centered around `i` low = i - 1 high = i + 1 while low >= 0 and high < n and t[low] == t[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return t[start:start + max_length]"},{"question":"You are given an array of integers, and you need to identify all the elements in the array that are greater than the average of all elements in the array. Additionally, you should return the elements in their original order of appearance. Write a function named `elements_greater_than_average` that takes the following parameter: - an array of integers `arr` (1 ≤ len(arr) ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4). The function should return a list of integers, which are the elements from the input array that are greater than the average value of all elements in the array. # Examples **Example 1:** Input: ``` arr = [1, 3, 5, 7, 9] ``` Output: ``` [5, 7, 9] ``` **Explanation:** The average of the elements in the array is (1 + 3 + 5 + 7 + 9) / 5 = 5. The elements greater than 5 are [7, 9]. **Example 2:** Input: ``` arr = [10, 20, 30, 40, 50] ``` Output: ``` [30, 40, 50] ``` **Explanation:** The average of the elements in the array is (10 + 20 + 30 + 40 + 50) / 5 = 30. The elements greater than 30 are [40, 50]. # Constraints - You must preserve the order of elements as they appear in the input array. - The solution should be efficient and work within the given constraints.","solution":"def elements_greater_than_average(arr): Returns a list of elements from the input array that are greater than the average of all elements in the array. if not arr: return [] average = sum(arr) / len(arr) return [x for x in arr if x > average]"},{"question":"You are given a binary tree. You should convert the tree into its mirror image. More formally, for a given tree with root node root, you need to modify the tree such that for every node in the tree, if the node has left and right children, swap them. If the node has only one child, replace the non-existing child with null. You are given the number of nodes in the tree n, followed by n lines of node descriptions. Each description contains three integers v, l, and r where v is the value of the node, l is the value of the left child of the node (or -1 if there is no left child), and r is the value of the right child of the node (or -1 if there is no right child). Write a program that solves this problem. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of nodes in the tree. The next n lines contain three integers v, l, and r (1 ≤ v ≤ 10^9, -1 ≤ l, r ≤ 10^9). To print the mirror image of the tree, print the node descriptions in the same format as input. The order of nodes should remain the same as the input. # Example Input: ``` 3 1 2 3 2 -1 -1 3 -1 -1 ``` Output: ``` 3 -1 -1 2 -1 -1 1 3 2 ``` # Note - The tree described in the example is: ``` 1 / 2 3 ``` - The mirror image of the tree is: ``` 1 / 3 2 ``` - The order of node descriptions remains the same as the input. # Explanation In the example, initially, 1 is the root with left child 2 and right child 3. After converting to its mirror image, node 1 has left child 3 and right child 2. Nodes 2 and 3 do not change as they both have no children.","solution":"def mirror_tree(n, nodes): Convert a binary tree into its mirror image. Swap the left and right children of all nodes in the tree. :param n: Number of nodes in the tree :param nodes: List of tuples representing the tree nodes (value, left, right) :return: A list of tuples representing the mirrored tree mirrored_nodes = [] for v, l, r in nodes: mirrored_nodes.append((v, r, l)) return mirrored_nodes"},{"question":"You are given a text editor that supports two operations on a string `S`: 1. Insert a character `c` at a specified position `p`. 2. Delete the character at a specified position `p`. The initial string `S` is empty. The operations are given as a list of strings, where each string is either of the form `\\"insert p c\\"` or `\\"delete p\\"`, with meanings as described above. After performing all the operations, you are required to print the final state of the string `S`. Constraints: - The number of operations will not exceed 100,000. - For any delete operation `p`, it is guaranteed that `p` is a valid position in the string at the time of the operation. - The position `p` is 0-indexed and can range from 0 to the length of the string at the moment of the operation. **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 100000) — the number of operations. - The next `n` lines each describe an operation in the format specified above. **Output:** - Print the final state of the string `S`. **Example:** **Input:** ``` 5 insert 0 a insert 1 b insert 2 c delete 1 insert 1 d ``` **Output:** ``` adc ``` **Explanation:** 1. The initial string is empty. 2. After inserting \'a\' at position 0, the string becomes \\"a\\". 3. After inserting \'b\' at position 1, the string becomes \\"ab\\". 4. After inserting \'c\' at position 2, the string becomes \\"abc\\". 5. After deleting the character at position 1, the string becomes \\"ac\\". 6. After inserting \'d\' at position 1, the string becomes \\"adc\\".","solution":"def edit_string(n, operations): Computes the final state of the string after performing a series of insert and delete operations. Args: n : int : Number of operations operations : list : List of operations in the form of strings Returns: str : Final state of the string s = [] for operation in operations: parts = operation.split() if parts[0] == \'insert\': pos = int(parts[1]) char = parts[2] s.insert(pos, char) elif parts[0] == \'delete\': pos = int(parts[1]) s.pop(pos) return \'\'.join(s)"},{"question":"You are given a string s consisting of lowercase English characters and a number q of queries. In each query, you are given two distinct non-negative integers a and b and you have to answer whether the substring of s starting at index a and ending at index b (both inclusive) is a valid palindrome or not. A valid palindrome is a string that reads the same forwards and backwards ignoring non-letter characters and case differences. The first line of the input contains two integers n and q (1 leq n leq 10^5, 1 leq q leq 10^5) — the length of the string s and the number of queries. The second line contains the string s of length n. Each of the following q lines contains two integers a and b (both 0 leq a leq b < n) — the indices of the substring to be checked. Write q lines, each containing \'YES\' if the substring starting from index a to index b is a valid palindrome, or \'NO\' otherwise. **Example Input:** ``` 5 3 ababa 0 4 1 3 0 2 ``` **Example Output:** ``` YES YES YES ```","solution":"def is_palindrome(s, a, b): Check if the substring s[a:b+1] is a valid palindrome. substring = s[a:b+1] return substring == substring[::-1] def process_queries(n, q, s, queries): Process each query to check if the substring is a palindrome. results = [] for a, b in queries: results.append(\'YES\' if is_palindrome(s, a, b) else \'NO\') return results"},{"question":"Daisy the programmer has a sequence of n positive integers and she wants to perform a specific transformation on the sequence. She will reverse every consecutive k elements in the sequence. If the number of remaining elements is less than k in the end, she will reverse the remaining elements as they are. Given the initial sequence and the integer k, help Daisy by writing a function to perform the transformation and return the updated sequence. The first line of the input contains two integers n and k (1 ≤ k ≤ n ≤ 10^5), the length of the sequence and the value of k respectively. The second line contains n space-separated positive integers representing the initial sequence (1 ≤ ai ≤ 10^9 for each ai). Your program should output the transformed sequence with the same format. Example: Input: 5 3 1 2 3 4 5 Output: 3 2 1 5 4 Note that in the example, the first three elements (1, 2, 3) are reversed to become (3, 2, 1). Then the remaining elements (4, 5), which are fewer than k, are reversed to become (5, 4). The final sequence is (3, 2, 1, 5, 4).","solution":"def transform_sequence(n, k, sequence): Reverses every consecutive k elements in a sequence. If the number of remaining elements is less than k, reverses the remaining elements as they are. :param n: Length of the sequence (int) :param k: Number of consecutive elements to reverse (int) :param sequence: List of integers representing the sequence :return: Transformed sequence (list of integers) for i in range(0, n, k): sequence[i:i+k] = reversed(sequence[i:i+k]) return sequence"},{"question":"In an ancient forest, a tribe of elves is preparing for their annual festival. The highlight of the festival is a series of dance performances, including solo and pair dances. Each elf has a dancing rating which indicates their effectiveness in solo dances. The effectiveness of a pair dance is determined by the sum of the ratings of both elves in the pair. The elders of the tribe decided that each elf can either perform one solo dance or one pair dance. However, they want to maximize the total effectiveness of the dance performances in the festival. Your task is to determine the maximum total effectiveness of the performances. The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elves. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 10,000) — the dancing ratings of the elves. Print the maximum total effectiveness of the dance performances. Example: Input: 5 8 6 7 4 2 Output: 23 Explanation: The best strategy is to have the elf with rating 8 perform a solo dance and the pairs (7, 6) and (4, 2) perform pair dances. Hence, the total effectiveness is 8 + (7+6) + (4+2) = 23.","solution":"def max_total_effectiveness(n, ratings): Calculates the maximum total effectiveness of dance performances. :param n: int, number of elves :param ratings: list of int, the dancing ratings of the elves :return: int, maximum total effectiveness ratings.sort(reverse=True) total_effectiveness = 0 i = 0 while i < n: if i == n - 1: total_effectiveness += ratings[i] break total_effectiveness += max(ratings[i] + ratings[i+1], ratings[i]) i += 2 if ratings[i] + ratings[i+1] > ratings[i] else 1 return total_effectiveness"},{"question":"Bob loves to read books and he has recently developed an interest in rearranging the letters of words to form new words. He now challenges himself to find out how many unique arrangements of a given word can be made. Given a string `s`, Bob wants to know the total number of distinct permutations of the string. Since the number can be very large, return the result modulo 1000000007. Note: - All characters in the string `s` are lowercase English letters. - The length of the string `s` will not exceed 100. # Input The input consists of a single string `s` of length n (1 ≤ n ≤ 100). # Output Print a single integer, the number of unique permutations of the given string `s` modulo 1000000007. # Example Example 1 **Input:** ``` aabc ``` **Output:** ``` 12 ``` **Explanation:** The different permutations of the string \\"aabc\\" are: - aabc - aacb - abac - abca - acab - acba - baac - baca - bcaa - caab - caba - cbaa Example 2 **Input:** ``` abcd ``` **Output:** ``` 24 ``` **Explanation:** The different permutations of the string \\"abcd\\" are the factorial of 4 because each character is unique, resulting in 4! = 24 permutations. # Constraints - The given string only contains lowercase English letters.","solution":"from collections import Counter from math import factorial MOD = 1000000007 def unique_permutations(s): Returns the number of unique permutations of string `s` modulo 1000000007. count = Counter(s) numerator = factorial(len(s)) denominator = 1 for freq in count.values(): denominator = (denominator * factorial(freq)) % MOD result = (numerator * pow(denominator, MOD - 2, MOD)) % MOD return result"},{"question":"You are given an array of n integers, and you have to answer several queries. Each query asks for the sum of values in a subarray and the maximum value within that subarray. You need to implement a data structure that can efficiently handle these queries. # Input: The first line contains two integers, n (1 le n le 10^5) and q (1 le q le 10^5), the number of elements in the array and the number of queries, respectively. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), the elements of the array. Each of the next q lines contains two integers l and r (1 le l le r le n), defining a query asking for the sum and maximum value in the subarray ranging from l to r inclusive. # Output: For each query, output two integers: * The sum of the subarray from index l to r. * The maximum value within the same subarray. # Example: Input: 5 3 1 2 3 4 5 1 3 2 5 1 5 Output: 6 3 14 5 15 5 # Note: * In the first query, the subarray is [1, 2, 3] with sum 1+2+3 = 6 and maximum value 3. * In the second query, the subarray is [2, 3, 4, 5] with sum 2+3+4+5 = 14 and maximum value 5. * In the third query, the subarray is [1, 2, 3, 4, 5] with sum 1+2+3+4+5 = 15 and maximum value 5.","solution":"class SubarrayQueries: def __init__(self, nums): self.n = len(nums) self.nums = nums self.prefix_sum = [0] * (self.n + 1) self._build_prefix_sum() self.max_segment_tree = [0] * (4 * self.n) self._build_max_segment_tree(0, 0, self.n - 1) def _build_prefix_sum(self): for i in range(1, self.n + 1): self.prefix_sum[i] = self.prefix_sum[i - 1] + self.nums[i - 1] def _build_max_segment_tree(self, node, start, end): if start == end: self.max_segment_tree[node] = self.nums[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self._build_max_segment_tree(left_child, start, mid) self._build_max_segment_tree(right_child, mid + 1, end) self.max_segment_tree[node] = max(self.max_segment_tree[left_child], self.max_segment_tree[right_child]) def _query_max_segment_tree(self, node, start, end, l, r): if r < start or end < l: return float(\'-inf\') if l <= start and end <= r: return self.max_segment_tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_max = self._query_max_segment_tree(left_child, start, mid, l, r) right_max = self._query_max_segment_tree(right_child, mid + 1, end, l, r) return max(left_max, right_max) def query(self, l, r): subarray_sum = self.prefix_sum[r] - self.prefix_sum[l - 1] subarray_max = self._query_max_segment_tree(0, 0, self.n - 1, l - 1, r - 1) return subarray_sum, subarray_max def process_queries(n, q, nums, queries): subarray_queries = SubarrayQueries(nums) results = [] for l, r in queries: results.append(subarray_queries.query(l, r)) return results"},{"question":"Angela and Bruno are playing a game called \\"Multiple Removal\\". They start with an integer m, and the players take turns in removing a divisor of m (excluding the number m itself). The game starts with Angela. The player loses when he/she cannot make a move (i.e., no divisors remain). Both players play optimally and always remove the highest divisor possible. Determine the winner if they both play optimally. Input The only line contains an integer m (2 ≤ m ≤ 10^9), the number at the beginning of the game. Output Output \\"Angela\\" (without quotes) if Angela wins and \\"Bruno\\" (without quotes) otherwise. Example 1: Input 6 Output Angela Example 2: Input 10 Output Bruno","solution":"def winner(m): Determines the winner of the \\"Multiple Removal\\" game given an initial integer m. Parameters: m (int): The initial number at the beginning of the game. Returns: str: \\"Angela\\" if Angela wins, \\"Bruno\\" if Bruno wins. # Using parity to determine the winner. If m is odd, Angela starts and wins. # If m is even, Angela starts but Bruno can always mirror Angela\'s moves to win. return \\"Angela\\" if m % 2 == 1 else \\"Bruno\\""},{"question":"You are given two integers n and m representing the number of rows and columns of a grid. The grid is initially filled with dots (\'.\'). There are also k planks of wood, each of 2×1 size. You need to place all k planks on the grid such that each plank occupies exactly 2 cells and no two planks overlap. Planks can be placed either horizontally or vertically. Input Format: - The first line contains three integers n (1 ≤ n ≤ 10^3), m (1 ≤ m ≤ 10^3), and k (0 ≤ k ≤ min((n*m)/2, 10^5)). Output Format: - If it\'s possible to place all k planks, print \\"YES\\" and then n lines, each containing m characters (\'.\' for empty cells and \'#\' for cells occupied by the planks). - If it\'s not possible to place all k planks, print \\"NO\\". If there are multiple solutions, print any of them. Example: Input: 4 4 4 Output: YES .. .. .. .. In this case, another possible output could be: YES .... .. .. ...#","solution":"def place_planks(n, m, k): if k > (n * m) // 2: return \\"NO\\" grid = [[\'.\' for _ in range(m)] for _ in range(n)] plank_count = 0 def place_horizontal_plank(row, col): nonlocal plank_count if col + 1 < m and grid[row][col] == \'.\' and grid[row][col + 1] == \'.\': grid[row][col] = \'#\' grid[row][col + 1] = \'#\' plank_count += 1 return True return False def place_vertical_plank(row, col): nonlocal plank_count if row + 1 < n and grid[row][col] == \'.\' and grid[row + 1][col] == \'.\': grid[row][col] = \'#\' grid[row + 1][col] = \'#\' plank_count += 1 return True return False for i in range(n): for j in range(m): if plank_count < k: if not place_horizontal_plank(i, j): place_vertical_plank(i, j) if plank_count == k: return \\"YESn\\" + \\"n\\".join(\\"\\".join(row) for row in grid) return \\"NO\\""},{"question":"You are given a binary tree and need to find the lowest common ancestor (LCA) of two specified nodes in the tree. The LCA of two nodes v and w in a tree is defined as the deepest node that has both v and w as descendants (where we allow a node to be a descendant of itself). The input consists of multiple lines: 1. The first line contains an integer n (2 le n le 10^4), which represents the number of nodes in the tree, numbered from 1 to n. 2. The next n-1 lines contain two integers each, u and v (1 le u, v le n), which represents an edge between node u and node v in the tree. 3. The next line contains two integers x and y (1 le x, y le n), which are the nodes for which you need to find the LCA. Output the integer representing the LCA of the nodes x and y. # Example Input ``` 7 1 2 1 3 2 4 2 5 3 6 3 7 4 7 ``` Output ``` 1 ``` # Explanation The binary tree described by the given input is: ``` 1 / 2 3 / / 4 5 6 7 ``` The LCA of nodes 4 and 7 is the root node 1.","solution":"from collections import defaultdict, deque def findLCA(n, edges, x, y): def bfs(start): queue = deque([(start, 0)]) depth[start] = 0 while queue: node, depth_node = queue.popleft() for neighbor in tree[node]: if neighbor not in depth: depth[neighbor] = depth_node + 1 parent[neighbor] = node queue.append((neighbor, depth_node + 1)) tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) depth = {} parent = {i: None for i in range(1, n + 1)} bfs(1) def find_path(node): path = [] while node: path.append(node) node = parent[node] return path path_x = find_path(x) path_y = find_path(y) lca = None while path_x and path_y: node_x = path_x.pop() node_y = path_y.pop() if node_x == node_y: lca = node_x else: break return lca"},{"question":"You are given a rectangular grid of size n times m. Each cell of this grid is initially uncolored. You need to color each cell of the grid either black or white so that the grid looks like a chessboard. A grid looks like a chessboard if any two adjacent cells (which share a common side) have different colors. You can start coloring from any cell. If it’s possible to color the grid as a chessboard, print \\"YES\\". Otherwise, print \\"NO\\". # Input Format: - The first line contains one integer t (1 leq t leq 10^4) — the number of test cases. - Each test case consists of two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. # Output Format: For each test case, print \\"YES\\" if the grid can be colored like a chessboard, otherwise print \\"NO\\". # Example: Input: ``` 3 3 3 4 4 2 3 ``` Output: ``` YES YES YES ``` # Note: In the first test case of the example, a 3x3 grid can be colored like a chessboard: ``` B W B W B W B W B ``` In the second test case of the example, a 4x4 grid can be colored like a chessboard: ``` B W B W W B W B B W B W W B W B ``` In the third test case of the example, a 2x3 grid can be colored like a chessboard: ``` B W B W B W ``` All three grids can be colored to fulfill the requirements of a chessboard, thus the answer for each is \\"YES\\".","solution":"def can_color_chessboard(t, dimensions): Determines if each test case grid can be colored like a chessboard. Parameters: - t (int): Number of test cases - dimensions (list of tuple): List of tuples where each tuple contains integers n and m Returns: - list of str: List of results (\\"YES\\" or \\"NO\\") for each test case results = [] for n, m in dimensions: # Since any grid shape will always allow proper chessboard coloring results.append(\\"YES\\") return results # Input reading and function calling would be handled outside, this function handles the logic"},{"question":"You are given a binary tree. A path in the binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence is connected by an edge. A node can only appear in one path. The length of a path is the number of edges in the path. You need to find the maximum length of any path. The first line of the input contains an integer n (1 le n le 10^5) – the number of nodes in the binary tree. Each of the next n-1 lines contains two integers u and v (1 le u, v le n) indicating there is an edge between nodes u and v. Print one integer – the maximum length of any path in the binary tree. # Example: Input: ``` 5 1 2 1 3 3 4 3 5 ``` Output: ``` 3 ``` Note: In the given example, the longest path is 2 -> 1 -> 3 -> 4 or 2 -> 1 -> 3 -> 5 with a length of 3. Before considering them the longest path, the paths should be traced from the leaf nodes to the other leaf nodes passing through the root or any node that is common.","solution":"from collections import defaultdict, deque def find_diameter(n, edges): if n == 1: return 0 def bfs(farthest_node): visited = [False] * (n + 1) queue = deque([(farthest_node, 0)]) visited[farthest_node] = True max_distance = 0 node = farthest_node while queue: current, dist = queue.popleft() if dist > max_distance: max_distance = dist node = current for neighbor in tree[current]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return node, max_distance tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) farthest, _ = bfs(1) # Start from any node, here node 1 _, diameter = bfs(farthest) # Find the farthest node from the previously found farthest node return diameter"},{"question":"The National Park Service is planning a new hiking trail that stretches from a starting point at the park entrance (point S) to a scenic viewpoint (point V). The trail is represented as a series of waypoints connected by straight line segments. You are given the coordinates of each waypoint, including the starting point and the destination. However, there is work being done in the park to maintain certain areas, which affects the accessibility of some waypoints. Hence, certain segments of the trail are blocked, and hikers must detour through alternate waypoints to reach the destination without traveling through blocked segments. Given the waypoints, the blocked segments, and the coordinates, find the shortest path from the starting point S to the scenic viewpoint V. If no such path exists, return -1. # Input Format - The first line contains an integer n (2 ≤ n ≤ 1000) representing the total number of waypoints, including the starting point S and the scenic viewpoint V. - The following n lines each contain two integers x and y (0 ≤ x, y ≤ 1000), representing the coordinates of each waypoint. The first of these is always the starting point S and the last is the scenic viewpoint V. - The subsequent line contains an integer m (0 ≤ m ≤ 10000) representing the number of blocked segments. - The following m lines each contain two integers u and v (1 ≤ u, v ≤ n), indicating that the direct segment between waypoint u and waypoint v is blocked. # Output Format - Print the length of the shortest path from S to V, or -1 if no such path exists. The result should be rounded to exactly three decimal places. # Sample Input ``` 5 0 0 2 3 4 4 3 2 5 5 2 2 3 4 5 ``` # Sample Output ``` 7.071 ``` # Explanation The waypoints are: 1. S (0, 0) 2. (2, 3) 3. (4, 4) 4. (3, 2) 5. V (5, 5) The blocked segments are between waypoint 2 and waypoint 3, and between waypoint 4 and waypoint 5. The shortest unblocked path from S to V could go S -> (2, 3) -> (4, 4) -> V, bypassing the blockages.","solution":"import math import heapq def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def shortest_path(n, coordinates, m, blocked_segments): graph = {i: [] for i in range(n)} blocked = {frozenset((u-1, v-1)) for u, v in blocked_segments} for i in range(n): for j in range(n): if i != j and frozenset((i, j)) not in blocked: dist = euclidean_distance(coordinates[i], coordinates[j]) graph[i].append((dist, j)) def dijkstra(start, end): queue = [(0, start)] distances = {i: float(\'inf\') for i in range(n)} distances[start] = 0 visited = set() while queue: current_distance, current_node = heapq.heappop(queue) if current_node in visited: continue visited.add(current_node) if current_node == end: return current_distance for distance, neighbor in graph[current_node]: new_distance = current_distance + distance if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(queue, (new_distance, neighbor)) return float(\'inf\') shortest_distance = dijkstra(0, n-1) if shortest_distance == float(\'inf\'): return -1 else: return round(shortest_distance, 3) def main(): n = int(input().strip()) coordinates = [tuple(map(int, input().strip().split())) for _ in range(n)] m = int(input().strip()) blocked_segments = [tuple(map(int, input().strip().split())) for _ in range(m)] result = shortest_path(n, coordinates, m, blocked_segments) print(result) if __name__ == \\"__main__\\": main()"},{"question":"Professor Susan loves puzzles and has come up with a new challenge for her students. She has a grid of integers and wants to find if there is any square sub-grid within it such that the sum of all numbers in the sub-grid is odd. You need to write a program to help Professor Susan determine if such a sub-grid exists. The input consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 50) — the dimensions of the grid. - Each of the next n lines contains m integers a_ij (1 ≤ a_ij ≤ 1000) — the grid itself. Output \\"YES\\" if there exists a square sub-grid with an odd sum of its elements. Otherwise, output \\"NO\\". # Examples Example 1: Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` YES ``` Example 2: Input: ``` 2 3 2 4 6 8 10 12 ``` Output: ``` NO ``` # Explanation In the first example, the sub-grid with the elements `5, 6, 8, 9` has a sum of 28, which is even, but the sub-grid with elements `1, 2, 4, 5` has a sum of 12, which is even. However, the single element `5` forms a sub-grid with an odd sum. In the second example, all possible sub-grids have even sums, thus it outputs \'NO\'.","solution":"def has_odd_subgrid(n, m, grid): Check if there exists any square sub-grid with an odd sum of its elements. # Iterate over each possible sub-grid size for size in range(1, min(n, m) + 1): # Check all possible sub-grids of the current size for i in range(n - size + 1): for j in range(m - size + 1): subgrid_sum = 0 for k in range(size): for l in range(size): subgrid_sum += grid[i + k][j + l] if subgrid_sum % 2 != 0: return \\"YES\\" return \\"NO\\""},{"question":"Nikola likes to study the behavior of birds in his backyard. He has noted the time and sequence in which various bird species visit his backyard each day. Each species of bird has a unique identifier. Given a list of bird observations recorded by Nikola, where each element represents the species identifier of a bird visiting his backyard in the order they appear, he wants to determine the minimum number of species that need to be removed so that no species appears consecutively more than once. The first line of input contains a single integer n (1 ≤ n ≤ 100) - the length of the list, representing the total number of bird observations. The second line contains n space-separated integers ai (1 ≤ ai ≤ 1000) - the species identifiers in the order they were observed. The output should be a single integer, representing the minimum number of bird species that need to be removed to ensure no species appears consecutively more than once. # Example **Input:** ``` 7 1 1 2 3 3 3 2 ``` **Output:** ``` 3 ``` **Explanation:** To ensure no species appears consecutively more than once, Nikola can remove the second occurrence of bird 1, and the second and third occurrences of bird 3. The remaining sequence would be [1, 2, 3, 2], which meets the requirement. Hence, the minimum number of removals needed is 3.","solution":"def min_removals_to_avoid_consecutive(n, birds): Returns the minimum number of species that need to be removed to ensure no species appears consecutively more than once. count_removals = 0 for i in range(1, n): if birds[i] == birds[i - 1]: count_removals += 1 return count_removals"},{"question":"In a faraway land, there exists a magical forest filled with enchanted trees. Each tree holds a varying number of golden fruits. A magical gardener has the power to pick any number of fruits from any tree, but to maintain balance in the forest, the gardener needs to ensure that after picking golden fruits, no tree has more fruits than twice of any other tree. Given the initial number of golden fruits on each tree, determine the maximum number of golden fruits that the gardener can pick while maintaining the balance in the forest. The first line contains a single integer n (1 le n le 100) — the number of trees. The second line contains n integers f_1, f_2, ldots, f_n (1 le f_i le 10^9), where f_i denotes the number of golden fruits on the i-th tree. Output a single integer — the maximum number of golden fruits that the gardener can pick while keeping the forest balanced. **Example:** Input: ``` 5 10 20 30 40 50 ``` Output: ``` 50 ``` Explanation: - Initially, the gardener can take no fruits and still maintain the balance: `10 <= 20`, `10 <= 2*20`, `30 <= 2*20`, `40 <= 2*20`, `50 <= 2*30`. - But the gardener can pick up to 50 fruits if he chooses the trees with 50 golden fruits to pick them all, then the rest trees are already balanced. For instance, picking 50 fruits leaves the trees with `10, 20, 30, 40, 0`, maintaining the balance. - Picking more than 50 fruits will unbalance the forest. For example, picking additional fruit from any other tree will exceed the balance limit where no tree will stay twice the number of the smallest tree.","solution":"def max_golden_fruits(n, fruits): fruits.sort(reverse=True) total_pickable = 0 for i in range(n): if i == 0: # The most number of fruits we can pick will be from the tree with the most fruits total_pickable += fruits[i] continue max_fruits_possible = 2 * fruits[i] # If the current number of fruits on tree `i-1` is more than twice the current tree, return the max harvestable fruits if fruits[i-1] > max_fruits_possible: return total_pickable return total_pickable"},{"question":"Warehouse Manager Inc. is developing a new system to track inventory items and respond to queries quickly. The system is filled with `n` item names upon initialization. Each item name consists of lowercase English letters. Subsequently, the system needs to handle `m` queries of two types: 1. **Addition Query**: \\"ADD item_name\\" - This query adds the given `item_name` to the system\'s inventory. 2. **Count Prefix Query**: \\"COUNT_PREFIX prefix\\" - This query returns the number of items in the system that start with the given `prefix`. The first line contains two non-negative integers `n` and `m` (0 ≤ `n`, `m` ≤ 3·10^5) — the number of initial items and the number of queries, respectively. The next `n` lines each contain a non-empty string, representing the initial items to add to the system\'s inventory. The following `m` lines contain queries in the format described above. The total length of all item names and prefixes in the input does not exceed 6·10^5. Each item name and prefix consists only of lowercase English letters. For each \\"COUNT_PREFIX prefix\\" query, print the number of items starting with the given prefix on a single line. For \\"ADD item_name\\" queries, no output is required. Please write a program to implement this functionality.","solution":"class TrieNode: def __init__(self): self.children = {} self.count = 0 class WarehouseManager: def __init__(self): self.root = TrieNode() def add_item(self, item_name): node = self.root for char in item_name: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.count += 1 def count_prefix(self, prefix): node = self.root for char in prefix: if char not in node.children: return 0 node = node.children[char] return node.count def handle_queries(n, m, items, queries): wm = WarehouseManager() # Add initial items to the system for item in items: wm.add_item(item) results = [] # Process each query for query in queries: command, value = query.split() if command == \\"ADD\\": wm.add_item(value) elif command == \\"COUNT_PREFIX\\": results.append(wm.count_prefix(value)) return results"},{"question":"You are given a string s consisting of lowercase English letters and a list of queries. Each query is a tuple (l, r, c), where l and r are 1-based indices defining a substring of s, and c is a lowercase English letter. For each query, you need to determine how many times the character c appears in the substring s[l:r+1]. Input: - The first line contains the string s (1 ≤ |s| ≤ 10^5). - The second line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. - The next q lines each contain three space-separated elements: l, r and c (1 ≤ l ≤ r ≤ |s|), where l, r are indices and c is a character. Output: - For each query, output the number of times the character c appears in the substring defined by the query. Examples: Input: ``` abracadabra 3 1 4 a 2 5 b 1 11 r ``` Output: ``` 2 1 2 ```","solution":"def character_count_queries(s, queries): Given a string s and a list of queries, each query specifies a substring and a character. This function returns the count of occurrences of that character in the given substring for each query. :param s: Input string :param queries: List of queries, each query is a tuple (l, r, c) :return: List of results for each query results = [] for l, r, c in queries: # Convert 1-based indexing to 0-based indexing l -= 1 # Append the count of the character c in the substring s[l:r] to results results.append(s[l:r].count(c)) return results"},{"question":"You are given a 2-dimensional grid of size m x n, and two points (startRow, startCol) and (endRow, endCol). Each cell in the grid can either be a wall, flagged as \'1\', or an open space, flagged as \'0\'. You can only move up, down, left, or right, and you cannot move through walls. You need to calculate the length of the shortest path from the start cell to the end cell. If no such path exists, return -1. The first line of the input will provide the dimensions of the grid, m and n (the number of rows and columns respectively), followed by the coordinates of the start cell and end cell, in that order. The next m lines will each contain a string representing a row of the grid, where \'1\' denotes a wall and \'0\' denotes an open space. The output should be a single integer, the length of the shortest path from the start cell to the end cell, or -1 if no such path exists. **Example:** Input: 4 4 0 0 3 3 0100 0000 0010 0000 Output: 6 Explanation: Here’s the path you can take: - Start at (0, 0) - Move to (1, 0) - Move to (1, 1) - Move to (2, 1) - Move to (3, 1) - Move to (3, 2) - Move to (3, 3) Hence, the shortest path length is 6. **Constraints:** - 2 ≤ m, n ≤ 100 - 0 ≤ startRow, startCol, endRow, endCol < m, n - The start and end cells will always be open spaces (\'0\').","solution":"from collections import deque def shortest_path(m, n, startRow, startCol, endRow, endCol, grid): if (startRow, startCol) == (endRow, endCol): return 0 directions = [(1,0), (-1,0), (0,1), (0,-1)] queue = deque([(startRow, startCol, 0)]) visited = set() visited.add((startRow, startCol)) while queue: current_row, current_col, dist = queue.popleft() for d in directions: nr, nc = current_row + d[0], current_col + d[1] if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == \'0\' and (nr, nc) not in visited: if (nr, nc) == (endRow, endCol): return dist + 1 queue.append((nr, nc, dist+1)) visited.add((nr, nc)) return -1"},{"question":"Alex is working on a custom sorting algorithm for an array of integers. The array contains both positive and negative integers. The goal of the custom sort is to move all positive integers to the front in ascending order, followed by all negative integers in descending order, while maintaining the relative order among positive and negative integers. For example, an array [-1, 3, 2, -7, 4] should be sorted to [2, 3, 4, -1, -7]. Your task is to implement a function that performs this custom sort. Write a function that takes in a single list of integers and returns the list sorted according to the custom rules specified above. # Function Signature ```python def custom_sort(arr: List[int]) -> List[int]: pass ``` # Input - An array of integers `arr` where `1 <= len(arr) <= 10^5` # Output - A single list of integers sorted according to the custom rules # Examples ```python assert custom_sort([-1, 3, 2, -7, 4]) == [2, 3, 4, -1, -7] assert custom_sort([5, -2, -3, 1, 0, -1]) == [0, 1, 5, -1, -2, -3] assert custom_sort([-5, -1, -2, -8]) == [-1, -2, -5, -8] assert custom_sort([8, 3, 1, 7]) == [1, 3, 7, 8] ```","solution":"from typing import List def custom_sort(arr: List[int]) -> List[int]: Performs a custom sort on the array such that positive integers are at the front in ascending order, followed by negative integers in descending order. # Separate the array into positive and negative parts positives = [x for x in arr if x >= 0] negatives = [x for x in arr if x < 0] # Sort positives in ascending order positives.sort() # Sort negatives in descending order negatives.sort(reverse=True) # Merge the two sorted lists return positives + negatives"},{"question":"You have a collection of n balloons, each of which can be inflated with an arbitrary amount of air. The i-th balloon initially has a volume of v_i cubic meters and can safely hold at most m_i cubic meters of air. You need to perform q operations on the balloons. In each operation, you can either: 1. Inflate a specific balloon by a certain amount of cubic meters. 2. Deflate a specific balloon by a certain amount of cubic meters. 3. Query the current volume of a specific balloon. 4. Check if a specific balloon is safe or has burst (a balloon bursts if its volume exceeds its maximum capacity). Given the initial volumes and maximum capacities of the balloons, and the list of operations, perform the operations and provide the results for the queries and safety checks. # Input - The first line contains two integers, n and q (1 le n, q le 10^5) — the number of balloons and the number of operations. - The next line contains n integers, v_1, v_2, ldots, v_n (0 le v_i < 10^4) — the initial volumes of the balloons. - The next line contains n integers, m_1, m_2, ldots, m_n (1 le m_i < 10^4) — the maximum volumes each balloon can safely hold. - The next q lines describe the operations in one of the following formats: - `1 x y` — Inflate balloon x by y cubic meters (1 le x le n, 1 le y < 10^4). - `2 x y` — Deflate balloon x by y cubic meters (1 le x le n, 1 le y < 10^4). - `3 x` — Query the current volume of balloon x (1 le x le n). - `4 x` — Check if balloon x is safe (1 le x le n). # Output For each query of the third type, print the current volume of the specified balloon. For each query of the fourth type, print \\"Safe\\" if the balloon has not burst and \\"Burst\\" if it has burst. # Example Input ``` 3 5 2 5 7 10 6 8 1 1 5 3 1 2 3 2 4 2 4 3 ``` Output ``` 7 Safe Burst ``` # Explanation Initially, we have 3 balloons with volumes [2, 5, 7] and maximum capacities [10, 6, 8]. The operations are: 1. Inflate balloon 1 by 5 cubic meters. Now volumes are [7, 5, 7]. 2. Query current volume of balloon 1. The output is 7. 3. Deflate balloon 3 by 2 cubic meters. Now volumes are [7, 5, 5]. 4. Check if balloon 2 is safe. The output is \\"Safe\\" because its volume 5 is less than its maximum 6. 5. Check if balloon 3 is safe. The output is \\"Burst\\" because its volume 5 is still within its capacity of 8, but had it been inflated further beyond its capacity, it would burst.","solution":"def perform_operations(n, q, volumes, capacities, operations): results = [] for operation in operations: opcode, x, *args = map(int, operation.split()) if opcode == 1: # Inflate balloon x by y y = args[0] volumes[x - 1] += y elif opcode == 2: # Deflate balloon x by y y = args[0] volumes[x - 1] = max(0, volumes[x - 1] - y) elif opcode == 3: # Query current volume of balloon x results.append(volumes[x - 1]) elif opcode == 4: # Check if balloon x is safe if volumes[x - 1] <= capacities[x - 1]: results.append(\\"Safe\\") else: results.append(\\"Burst\\") return results"},{"question":"Sophia is organizing a series of light shows on a row of n lights, initially all turned off. Each light can be turned on in one of k different colors. You are given an array of n integers representing the power requirements of the lights. Sophia wants to perform k operations so that in each operation she will choose a contiguous subarray of lights and turn all the lights in that subarray to a specific color. Each operation should also ensure that the total power requirement of the chosen subarray is less than or equal to a given maximum value P. Moreover, after all the operations, each color must be used exactly once. Determine the starting and ending indices of each subarray Sophia should choose in each operation such that all lights are eventually turned on and all colors are used exactly once, or output \\"-1\\" if it\'s impossible to achieve. **Input**: - The first line contains three integers n, k, and P (1 leq k leq n leq 100,000 and 1 leq P leq 10^9) - The second line contains n integers representing the power requirements of the lights. **Output**: - Print k pairs of integers, each representing the starting and ending indices of the chosen subarrays for each operation. - If it\'s impossible to perform the operations, print \\"-1\\". **Example**: ``` Input: 8 2 15 2 4 5 6 3 7 1 8 Output: 1 4 5 8 ``` Explanation: In the example, the first operation turns on the lights from index 1 to 4 with a total power requirement of 2+4+5+4=17, and the second operation turns on the lights from index 5 to 8 with a total power requirement of 3+7+1+8=19. Both subarrays\' power requirements do not exceed P, so it\'s valid.","solution":"def find_subarrays(n, k, P, power_requirements): subarrays = [] current_sum = 0 start_index = 0 # Create subarrays for i in range(n): current_sum += power_requirements[i] if current_sum > P: # If the sum exceeds P, break the current subarray here subarrays.append((start_index + 1, i + 1)) start_index = i + 1 current_sum = 0 if start_index < n: subarrays.append((start_index + 1, n)) # Check if we were able to create exactly k subarrays if len(subarrays) == k: return subarrays else: return -1 # Example usage: # print(find_subarrays(8, 2, 15, [2, 4, 5, 6, 3, 7, 1, 8]))"},{"question":"You are given a list of integers and you need to find a contiguous subarray that has the maximum sum. The problem is known as the Maximum Subarray Problem. # Function Signature ```python def maximum_subarray_sum(arr: List[int]) -> int: pass ``` # Input - `arr`: A list of integers (1 ≤ len(arr) ≤ 10^5, -10^4 ≤ arr[i] ≤ 10^4) # Output - The maximum sum of a contiguous subarray. # Example ```python maximum_subarray_sum([1, -3, 2, 1, -1]) # Output: 3 # Explanation: The subarray [2, 1] has the maximum sum which is 3. ``` # Constraints - The list will always contain at least one element. - The solution should handle large input sizes efficiently. # Note - You need to implement the function to find the maximum sum of a contiguous subarray using an efficient algorithm. Avoid brute-force approaches that may not scale well with larger inputs.","solution":"from typing import List def maximum_subarray_sum(arr: List[int]) -> int: This function implements the Kadane\'s algorithm to find the maximum sum of a contiguous subarray. max_current = max_global = arr[0] # initialize with the first element for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given an integer array **arr** of length **n**, where each element represents a unique identifier of a book. The books are initially arranged in a random order. You are at a library and you know that there are *k* people (including you) who have specific series of book swap operations they would like to perform in order to rearrange the books into their preferred order. Each person’s swap operations are represented by a sequence of pairs **(i, j)**, meaning they want to swap the books at positions **i** and **j**. All swap operations of an individual person must be performed sequentially as given. Your task is to determine the final order of the books after all the swap operations of all the people are applied, one after the other in the given order. # Input - The first line contains two integers **n** and **k** (1 ≤ n, k ≤ 10^5). - The second line contains **n** integers representing the array **arr**. - The following **k** blocks describe the series of swap operations for each person: - For each block, the first line contains an integer **m** (1 ≤ m ≤ 10^5) representing the number of operations the person will perform. - The next **m** lines each contain two integers **i** and **j** (1 ≤ i, j ≤ n), representing a swap operation. # Output Output a single line containing **n** integers representing the final order of the books after all swap operations have been performed. # Example Input ``` 6 2 10 20 30 40 50 60 3 1 2 2 3 5 6 2 4 5 3 4 ``` Output ``` 20 10 50 40 30 60 ``` Explanation 1. First person\'s swap operations: - Swap positions 1 and 2: [20, 10, 30, 40, 50, 60] - Swap positions 2 and 3: [20, 30, 10, 40, 50, 60] - Swap positions 5 and 6: [20, 30, 10, 40, 60, 50] 2. Second person\'s swap operations: - Swap positions 4 and 5: [20, 30, 10, 60, 40, 50] - Swap positions 3 and 4: [20, 30, 60, 10, 40, 50] Final array after all swaps: [20, 30, 60, 10, 40, 50]","solution":"def book_rearrangement(n, k, arr, operations): Re-arranges book ids in order based on the swap operations. Parameters: n (int): Number of books k (int): Number of people arr (list of int): Array of book ids operations (list of list of tuples): List containing \'k\' lists each with a series of swap operations Returns: list of int: Final order of books after all the swap operations. for person_ops in operations: for i, j in person_ops: arr[i-1], arr[j-1] = arr[j-1], arr[i-1] return arr"},{"question":"You are the owner of a small business and are working on an inventory management system. One crucial feature is to track the stock of each product and update it based on sales and restocks. Every transaction is represented by a string. A transaction can either be a sale or a restock. A sale transaction string starts with an \'S\' followed by the product name and the quantity sold. A restock transaction string starts with an \'R\' followed by the product name and the quantity restocked. For example: - \\"Sapples10\\" means selling 10 apples. - \\"Rbananas25\\" means restocking 25 bananas. The inventory initially starts with 0 of each product. You need to implement a function `process_transactions(transactions)` which takes a list of transactions and returns a dictionary representing the final stock of each product after processing all transactions. **Function signature:** ```python def process_transactions(transactions: List[str]) -> Dict[str, int]: ``` **Input:** - transactions: A list of strings where each string represents a transaction (1 ≤ len(transactions) ≤ 10^4). **Output:** - A dictionary where the keys are product names and the values are their final stock quantities. **Example:** ```python transactions = [ \\"Sapples10\\", \\"Rbananas25\\", \\"Sapples5\\", \\"Roranges50\\", \\"Sapples2\\", \\"Rapples20\\" ] # After processing the given transactions, the inventory status should be: # apples: 13 (10 sold + 2 sold - 20 restocked) # bananas: 25 (25 restocked) # oranges: 50 (50 restocked) ``` Expected output for the above example: ```python { \\"apples\\": 13, \\"bananas\\": 25, \\"oranges\\": 50 } ``` **Constraints:** - The product names are composed of lowercase letters only. - Quantities in transactions are positive integers not exceeding 10^6. - The total number of different products will not exceed 10^3.","solution":"from typing import List, Dict def process_transactions(transactions: List[str]) -> Dict[str, int]: inventory = {} for transaction in transactions: action = transaction[0] for i in range(1, len(transaction)): if transaction[i].isdigit(): product = transaction[1:i] quantity = int(transaction[i:]) break if action == \'S\': if product in inventory: inventory[product] -= quantity else: inventory[product] = -quantity elif action == \'R\': if product in inventory: inventory[product] += quantity else: inventory[product] = quantity return inventory"},{"question":"A tech park management company has hired you to develop a system for tracking the power usage in various office buildings throughout the park. The tech park can be represented as a grid of size n times n where each cell in the grid either contains an office building or a vacant lot. An office building is represented by a \'B\' and a vacant lot is represented by a \'V\'. All office buildings in a row share the same power usage rate. Given the grid, your task is to determine the minimum total power usage of the tech park. The power usage of a row is defined as the number of buildings in that row multiplied by the base rate for that row. Each row has a different power usage base rate, which you are given as a list. The total power usage of the tech park is the sum of the power usages of all rows. Write a program that computes the minimum total power usage of the tech park. # Input Format - The first line of input contains an integer n (2 le n le 1000), the size of the grid. - The next n lines each contain n characters, representing the cell types (\'B\' or \'V\') in the grid. - The last line contains n integers, representing the base rate for the power usage of each row. # Output Format - Print a single integer, the minimum total power usage of the tech park. # Example Input: ``` 3 BVB VVV BVV 2 3 1 ``` Output: ``` 5 ``` # Explanation In this example, the grid is of size 3x3 with the following layout and base rates: ``` B V B V V V B V V ``` The base rates are: [2, 3, 1] - The power usage of the first row is 2 (2 buildings * base rate 2) = 4. - The power usage of the second row is 0 (0 buildings * base rate 3) = 0. - The power usage of the third row is 1 (1 building * base rate 1) = 1. Thus, the minimum total power usage is 4 + 0 + 1 = 5.","solution":"def min_total_power_usage(n, grid, base_rates): Returns the minimum total power usage of the tech park. Parameters: n (int): The size of the grid. grid (list of str): The grid representation of office buildings and vacant lots. base_rates (list of int): The base power usage rates for each row. Returns: int: The minimum total power usage. total_power_usage = 0 for i in range(n): buildings_in_row = grid[i].count(\'B\') total_power_usage += buildings_in_row * base_rates[i] return total_power_usage"},{"question":"Paws the Spider is trying to make a symmetric pattern on its web. Each sector of the web should have an identical pattern of attachment points, ensuring balance and symmetry. Unfortunately, Paws sometimes makes mistakes in creating these patterns, leading to asymmetric webs that can be dangerous for Paws and its future prey. Consider a web with n sectors, where each sector i contains ki attachment points represented by a sequence of integers. To have a symmetric web, all sectors should have the same pattern of attachment points in the same order. Write a program that determines if the web spun by Paws is symmetric or not. The input consists of an integer n (3 ≤ n ≤ 1000) indicating the number of main threads, followed by n lines describing the attachment points in each sector. Each line starts with an integer ki (1 ≤ ki ≤ 105), the number of attachment points in the sector, followed by ki integers pi1, pi2, ..., piki representing the distances of the attachment points from the center. The output should be a single line containing \\"YES\\" if the web is symmetric and \\"NO\\" otherwise. # Example: Input: 6 4 1 2 3 4 4 1 2 3 4 4 1 2 3 4 4 1 2 3 4 4 1 2 3 4 4 1 2 3 4 Output: YES Input: 4 3 5 9 13 3 5 9 14 3 5 9 13 3 5 9 13 Output: NO","solution":"def is_symmetric_web(n, sectors): Determines if the web spun by Paws is symmetric or not. Args: n (int): Number of sectors in the web. sectors (list of list of int): List of attachment points for each sector. Returns: str: \\"YES\\" if the web is symmetric, \\"NO\\" otherwise. first_sector = sectors[0] for sector in sectors[1:]: if sector != first_sector: return \\"NO\\" return \\"YES\\""},{"question":"You have been tasked with arranging a series of unique, non-overlapping meetings in a corporate office with a single conference room. Each meeting has a specific start time and end time. Your goal is to schedule the maximum number of meetings without any overlap. You are given multiple test cases. Each test case consists of a list of meetings where each meeting has a start and end time. The first line of input consists of an integer t (1 le t le 50) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5) — the number of meetings. The following n lines each contain two integers s_i and e_i (0 le s_i < e_i le 10^9), denoting the start time and the end time of the i-th meeting. For each test case, output a single integer — the maximum number of non-overlapping meetings that can be scheduled. For example, consider a scenario with three meetings: 1. Meeting from 1 to 3. 2. Meeting from 2 to 4. 3. Meeting from 3 to 5. Given these meetings, the maximum number of non-overlapping meetings is 2, as one possible way to schedule them is to select Meeting 1 and Meeting 3. Input: ``` 2 3 1 3 2 4 3 5 4 0 10 5 10 15 20 5 15 ``` Output: ``` 2 3 ``` Here, in the first test case, the two non-overlapping meetings are from 1 to 3 and from 3 to 5. In the second test case, the three non-overlapping meetings are from 0 to 10, from 15 to 20, and from 5 to 10.","solution":"def max_non_overlapping_meetings(test_cases): Returns the maximum number of non-overlapping meetings for each test case. :param test_cases: List of test cases. Each test case is a list of tuples (start, end). :return: List of integers representing the maximum number of non-overlapping meetings for each test case. results = [] for meetings in test_cases: # Sort meetings by their end time meetings.sort(key=lambda x: x[1]) max_meetings = 0 end_time = -1 for meeting in meetings: if meeting[0] >= end_time: max_meetings += 1 end_time = meeting[1] results.append(max_meetings) return results"},{"question":"Alice and Bob love hiking and have planned a hiking trip. During the hike, they decided to collect unique badges from different locations and at specific distances. Alice has a list of distances at which she will collect her badges, and Bob has his own list of distances for his badges. However, they don\'t want to collect badges at the same distance, as it leads to unhealthy competition. Alice\'s list and Bob\'s list are sorted in increasing order. Your task is to help them modify their lists such that no two badges are collected at the same distance, while maximizing the total number of unique badges collected by both. You can remove any number of badges from either list, but the order of remaining badges in each list should remain unchanged. Write a function `max_unique_badges` that takes in two lists of integers, `alice_distances` and `bob_distances`, representing the distances at which Alice and Bob plan to collect badges, respectively. The function should return the total number of unique badges collected by both after modification. **Input Format:** - The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the number of distances Alice has in her list. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the distances at which Alice plans to collect badges. - The third line contains an integer m (1 ≤ m ≤ 2 * 10^5) — the number of distances Bob has in his list. - The fourth line contains m integers b1, b2, ..., bm (1 ≤ bi ≤ 10^9) — the distances at which Bob plans to collect badges. **Output Format:** - Print a single integer — the total number of unique badges collected by Alice and Bob after modification. **Example:** **Input:** ``` 5 1 2 3 4 5 4 2 3 6 7 ``` **Output:** ``` 7 ``` **Explanation:** - Alice and Bob can modify their lists to [1, 4, 5] and [2, 3, 6, 7] respectively. - Each list now contains unique distances, maximizing the total number of unique badges collected, which is 7.","solution":"def max_unique_badges(alice_distances, bob_distances): alice_set = set(alice_distances) bob_set = set(bob_distances) unique_merged_set = alice_set | bob_set # Union of both sets, retaining unique values return len(unique_merged_set)"},{"question":"You are given an array of integers where each integer appears exactly twice, except for one integer which appears only once. Find and return the integer that appears only once. Consider the following example inputs to better understand the problem: The first line contains a single integer n (1 leq n leq 10^6) — the length of the array divided by 2 (since the length of the array is always odd due to the single unique element). The second line contains 2n + 1 integers a_1, a_2, ldots, a_{2n+1} (1 leq a_i leq 10^9) — the elements of the array. You need to return the integer that appears only once. # Example 1: **Input:** ``` 2 2 1 4 5 2 4 1 ``` **Output:** ``` 5 ``` # Example 2: **Input:** ``` 1 1 3 3 ``` **Output:** ``` 1 ``` # Explanation: In the first example, we have the array `[2, 1, 4, 5, 2, 4, 1]`. All the integers appear exactly twice except for `5`, which appears only once. In the second example, we have the array `[1, 3, 3]`. All the integers appear exactly twice except for `1`, which appears only once. # Note: Your solution should have a linear runtime complexity.","solution":"def find_unique_number(arr): Returns the integer that appears only once in the array. :param arr: List[int] - an array of integers where each integer except one appears twice :return: int - the integer that appears only once unique_num = 0 for num in arr: unique_num ^= num return unique_num"},{"question":"You are given a string s consisting of lowercase Latin letters. You need to perform several queries on the string. Each query asks you to determine how many times a particular letter appears between two given indices in the string. The first line of input contains the string s. The second line contains an integer q (1≤q≤10000) – the number of queries. Each of the next q lines contains a query in the form of three integers l, r, and c (1≤l≤r≤|s|, c is a lowercase letter) – you are to determine how many times the character c appears in the substring s[l…r]. Output q lines, each containing the result of the corresponding query. In the first example, for the string \\"abbabba\\", the first query is (1, 4, \'a\'), which asks how many times \'a\' appears between indices 1 and 4 (1-based). The correct answer for this query is 2, as \'a\' appears at positions 1 and 4. In the second query (1, 7, \'b\'), we need to determine how many times \'b\' appears between indices 1 and 7. The answer is 4, as \'b\' appears at positions 2, 3, 6, and 7. In the third query (5, 7, \'a\'), we need to determine how many times \'a\' appears between indices 5 and 7. The answer is 1, as \'a\' appears at position 4.","solution":"def count_char_occurrences(s, queries): Returns the result of each query on the string s which asks how many times a particular letter appears between two given indices. :param s: The input string :param queries: List of queries in the form of (l, r, c) where l and r are 1-based indices and c is a character :return: List of results for each query results = [] for l, r, c in queries: substring = s[l-1:r] # Convert 1-based to 0-based index count = substring.count(c) results.append(count) return results"},{"question":"You are given an undirected weighted graph consisting of n vertices and m edges. The graph may contain self-loops and multiple edges. Your task is to find and print the weights of the edges in the maximum spanning tree of this graph. A spanning tree is a subset of the edges that connects all the vertices in the graph without any cycles and with the minimum number of edges possible. The first line contains two integers n and m (2 le n le 5000, 1 le m le 200000) — the number of vertices and edges, respectively. The following m lines describe the edges of the graph. Each line contains three integers v_i, u_i, w_i (1 le v_i, u_i le n; -10^6 le w_i le 10^6), where v_i and u_i are the vertices connected by the edge, and w_i is the weight of the edge. Print the weights of the edges in the maximum spanning tree in non-increasing order. If there are multiple possible spanning trees with the same maximum weight, print any of them. Examples: Input: ``` 4 5 1 2 100 2 3 200 3 4 150 4 1 50 1 3 300 ``` Output: ``` 300 200 150 ``` Input: ``` 3 3 1 2 1 2 3 2 1 3 3 ``` Output: ``` 3 2 ```","solution":"def find_max_spanning_tree(n, m, edges): Find the maximum spanning tree using Kruskal\'s algorithm. Arguments: - n: Number of vertices in the graph. - m: Number of edges in the graph. - edges: List of edges tuples, where each tuple contains (v_i, u_i, w_i). Returns: - A list of weights in the maximum spanning tree in non-increasing order. # Sort edges by weight in descending order edges.sort(key=lambda x: x[2], reverse=True) # Union-Find data structure to keep track of connected components parent = list(range(n + 1)) rank = [0] * (n + 1) def find(v): if parent[v] != v: parent[v] = find(parent[v]) return parent[v] def union(v, u): root_v = find(v) root_u = find(u) if root_v != root_u: if rank[root_v] > rank[root_u]: parent[root_u] = root_v elif rank[root_v] < rank[root_u]: parent[root_v] = root_u else: parent[root_u] = root_v rank[root_v] += 1 max_tree_weights = [] for v, u, weight in edges: if find(v) != find(u): union(v, u) max_tree_weights.append(weight) return max_tree_weights # Example usage: # The function expects n and m along with the edge list n, m = 4, 5 edges = [ (1, 2, 100), (2, 3, 200), (3, 4, 150), (4, 1, 50), (1, 3, 300) ] print(find_max_spanning_tree(n, m, edges)) n, m = 3, 3 edges = [ (1, 2, 1), (2, 3, 2), (1, 3, 3) ] print(find_max_spanning_tree(n, m, edges))"},{"question":"A village is planning to build a set of new roads connecting multiple houses, represented by nodes in a graph. Each pair of houses is connected by a potential road that has a certain construction cost. Your goal is to ensure that every house can be reached from any other house (i.e., the graph is connected), while minimizing the total construction cost. Given an integer n (1 leq n leq 1000), the number of houses, and an integer m (0 leq m leq frac{n * (n-1)}{2}), the number of potential roads, each described by three integers u, v, and w where u and v are the houses (1-based index) that can be connected by this road, and w is the cost of building this road. Output the minimal cost to connect all houses. If it\'s not possible to connect all houses, output \\"-1\\". **Input Format:** - The first line contains two integers n and m. - The next m lines each contain three integers u, v, and w, describing the potential roads. **Output Format:** - Output a single integer representing the minimal construction cost to connect all houses, or -1 if it\'s impossible. **Example:** **Input:** ``` 4 5 1 2 1 1 3 4 2 3 2 3 4 3 2 4 5 ``` **Output:** ``` 6 ``` **Explanation:** The minimal cost to connect all the houses is achieved by selecting the roads with costs 1 (connecting house 1 and house 2), 2 (connecting house 2 and house 3), and 3 (connecting house 3 and house 4), which sums to 6.","solution":"def find(parent, i): if parent[i] == i: return i else: parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def minimal_construction_cost(n, m, roads): if m == 0 and n > 1: return -1 roads.sort(key=lambda x: x[2]) parent = list(range(n)) rank = [0] * n result = 0 e = 0 i = 0 while e < n - 1: if i == len(roads): return -1 u, v, w = roads[i] i += 1 x = find(parent, u - 1) y = find(parent, v - 1) if x != y: e += 1 result += w union(parent, rank, x, y) return result"},{"question":"You are given an array of integers, and your task is to rearrange the array such that all even numbers appear before all odd numbers. However, the relative order of the even and odd numbers must remain the same as in the original array. Write a function that takes an array of integers and returns a new array with the even numbers first, followed by the odd numbers. # Input - The first line of the input contains a single integer t (1 le t le 100) — the number of test cases. - For each test case, the first line contains a single integer n (1 le n le 10^5) — the length of the array. - The second line contains n space-separated integers, representing the elements of the array. # Output For each test case, output a single line containing the rearranged array such that all even numbers appear before all odd numbers while maintaining their relative order from the original array. # Example ```plaintext Input: 2 5 1 2 3 4 5 6 6 7 8 9 10 11 Output: 2 4 1 3 5 6 8 10 7 9 11 ``` # Note In the first test case, the even numbers are 2 and 4, and the odd numbers are 1, 3, and 5. The output array maintains the order of even numbers followed by the order of odd numbers. In the second test case, the even numbers are 6, 8, and 10, and the odd numbers are 7, 9, and 11. The output array maintains the order of even numbers followed by the order of odd numbers.","solution":"def rearrange_array(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] results.append(evens + odds) return results"},{"question":"In a distant future, a network of interconnected islands has been developed. Each island is connected to other islands by bridges that can be one-way or two-way. Each bridge has a certain capacity, which is the maximum number of people that can cross the bridge at a time. An island administrator wants to find out the maximum number of people that can start from a source island and reach a destination island simultaneously without exceeding the capacities of the bridges they use. The administrator needs to take into account the direction of the bridges and their capacities. The first line of input contains three integers n, m, and k (2 ≤ n ≤ 1000, 1 ≤ m ≤ 100000, 1 ≤ k ≤ 1000000) — the number of islands, the number of bridges, and the desired number of people to transport, respectively. The next m lines describe the bridges. Each line contains four values u, v, c, and d (1 ≤ u, v ≤ n, 1 ≤ c ≤ 1000000, d = 0 or 1), meaning there is a bridge from island u to island v with a capacity of c. If d = 0, the bridge is one-way; if d = 1, the bridge is two-way. The last line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t) — the source island and the destination island. Output \\"YES\\" if it is possible for at least k people to travel from the source island to the destination island simultaneously, otherwise print \\"NO\\". In the first sample testcase, if there is a bridge from island 1 to island 2 with a capacity of 10 and another two-way bridge from island 2 to island 3 with a capacity of 5, the maximum number of people that can travel from island 1 to island 3 simultaneously, considering the capacities of the bridges, is 5. Hence, if k is less than or equal to 5, the output will be \\"YES\\", otherwise \\"NO\\".","solution":"import heapq def maxFlow(n, graph, source, sink): Implements the Edmonds-Karp algorithm to find the maximum flow in a graph. flow = 0 while True: parent = [-1] * n queue = [(0, source)] parent[source] = source while queue: _, u = heapq.heappop(queue) for v, capacity in enumerate(graph[u]): if parent[v] == -1 and capacity > 0: parent[v] = u if v == sink: break queue.append((capacity, v)) if parent[sink] == -1: break path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, graph[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] graph[u][v] -= path_flow graph[v][u] += path_flow v = parent[v] flow += path_flow return flow def canTransport(n, m, k, bridges, s, t): graph = [[0] * n for _ in range(n)] for u, v, c, d in bridges: graph[u-1][v-1] += c if d == 1: graph[v-1][u-1] += c max_people = maxFlow(n, graph, s-1, t-1) return \\"YES\\" if max_people >= k else \\"NO\\""},{"question":"You are provided with a grid of size n times m filled with integers. Your task is to find the length of the longest increasing path in the grid. An increasing path is a sequence of cells such that each cell value in the path is strictly greater than the previous cell value in the path. You can move in four possible directions: up, down, left, or right. # Input The first line contains two integers n and m (1 le n, m le 200) — the number of rows and columns in the grid. The next n lines contain m integers each, representing the grid. # Output Print a single integer — the length of the longest increasing path in the grid. # Example Input ``` 3 3 9 9 4 6 6 8 2 1 1 ``` Output ``` 4 ``` Explanation The longest increasing path is [1, 2, 6, 9]. # Constraints - The grid will contain at most 40,000 cells. - Each cell contains an integer. **Note**: You need to consider all possible cells as starting points and apply a Depth-First Search (DFS) with memoization to explore the longest path from each cell efficiently.","solution":"def longestIncreasingPath(matrix): if not matrix or not matrix[0]: return 0 n, m = len(matrix), len(matrix[0]) dp = [[-1 for _ in range(m)] for _ in range(n)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] max_path = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and matrix[nx][ny] > matrix[x][y]: max_path = max(max_path, 1 + dfs(nx, ny)) dp[x][y] = max_path return dp[x][y] result = 0 for i in range(n): for j in range(m): result = max(result, dfs(i, j)) return result"},{"question":"You are given an `n x n` matrix of integers. Your task is to determine if the matrix is symmetric. A matrix is symmetric if `matrix[i][j] == matrix[j][i]` for all valid `i` and `j`. Write a function that takes in the `n x n` matrix and returns `True` if the matrix is symmetric, and `False` otherwise. # Input: - The first line contains an integer `n` (1 leq n leq 1000) — the size of the matrix. - The next `n` lines each contain `n` integers — the elements of the matrix. # Output: - A single line containing `True` if the matrix is symmetric, otherwise `False`. # Example: Input: ``` 3 1 2 3 2 4 5 3 5 6 ``` Output: ``` True ``` Input: ``` 3 1 0 1 0 1 0 1 1 1 ``` Output: ``` False ```","solution":"def is_symmetric(matrix): Determine if the given n x n matrix is symmetric. Parameters: matrix (list of list of int): The n x n matrix to check Returns: bool: True if the matrix is symmetric, otherwise False n = len(matrix) for i in range(n): for j in range(i, n): # Note this starts from i to avoid redundant checks if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"You are given a string s consisting of lowercase English letters. Your task is to find the length of the longest substring that contains at most two distinct characters. # Input - The input consists of a single string s (0 leq |s| leq 10^5), where |s| denotes the length of the string. # Output - Output a single integer representing the length of the longest substring containing at most two distinct characters. # Example Input ``` abcbaa ``` Output ``` 3 ``` # Explanation In the given example, the longest substring that contains at most two distinct characters is \\"bcb\\", which has a length of 3. Other valid substrings include \\"cba\\" and \\"baa\\", also with a length of 3. Hence, the result is 3. # Constraints - The string will only contain lowercase English alphabet letters. # Hints 1. Think about using a sliding window approach to keep the count of distinct characters within a substring. 2. Use two pointers to maintain the current window of two distinct characters, and try to expand and shrink this window as you traverse the string. # Performance Analysis This problem can be solved efficiently using a sliding window approach with a complexity of O(n), where n is the length of the string.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring with at most two distinct characters. if len(s) == 0: return 0 max_length = 0 left = 0 char_count = {} for right in range(len(s)): char = s[right] char_count[char] = char_count.get(char, 0) + 1 while len(char_count) > 2: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"In a distant land, there is a magical forest inhabited by mystical creatures. The forest is represented as a grid of size n times m where each cell contains a certain number of magical orbs. You are assigned to help a wizard to collect the maximum number of magical orbs by moving from the top-left cell (1, 1) to the bottom-right cell (n, m). The wizard can only move either down or right at any point in time. Your task is to determine the maximum number of magical orbs the wizard can collect on his way to the bottom-right cell. # Input - The first line contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. - The next n lines contain m integers each — the grid values. The j-th integer in the i-th line represents the number of magical orbs in the cell (i, j) (0 leq text{grid}[i][j] leq 10^5). # Output - Output a single integer — the maximum number of magical orbs the wizard can collect on his path from (1, 1) to (n, m). # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 12 ``` Explanation The wizard should follow the path (1, 1) -> (1, 2) -> (2, 2) -> (3, 2) -> (3, 3) to collect a total of 1 + 3 + 5 + 2 + 1 = 12 magical orbs, which is the maximum possible.","solution":"def max_orbs(n, m, grid): # Create a dp array with the same dimensions as grid to store the maximum orbs collected to each cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The bottom-right cell will contain the maximum orbs collected return dp[-1][-1]"},{"question":"You are tasked with developing a to-do list application that allows users to manage their tasks efficiently. Each task in the to-do list has a description, a due date, and a priority level. The application supports the following operations: 1. **Add a task**: Add a new task to the to-do list with a specified description, due date, and priority level. 2. **Remove a task**: Remove a task from the to-do list by its description. 3. **Edit a task**: Edit the description, due date, or priority level of an existing task. 4. **List tasks**: Display all tasks in the to-do list ordered by their due date. If two tasks have the same due date, order them by their priority level (higher priority first). Implement the to-do list application with a class structure. The class should include methods for each of these operations. Use appropriate data structures to store and manage the tasks efficiently. # Input - Commands to the application in the form of strings. Each command is either \\"ADD\\", \\"REMOVE\\", \\"EDIT\\", or \\"LIST\\" followed by the required parameters. - \\"ADD description due_date priority\\": Adds a new task. - \\"REMOVE description\\": Removes an existing task by its description. - \\"EDIT description new_description due_date priority\\": Edits an existing task. - \\"LIST\\": Lists all tasks. # Output - For the \\"LIST\\" command, output the tasks sorted by their due date and priority level. # Example ```python todo = ToDoList() todo.command(\\"ADD Buy groceries 2023-10-10 1\\") todo.command(\\"ADD Complete project 2023-10-09 2\\") todo.command(\\"ADD Call mom 2023-10-10 3\\") todo.command(\\"LIST\\") ``` Expected Output: ``` Complete project 2023-10-09 2 Call mom 2023-10-10 3 Buy groceries 2023-10-10 1 ``` # Notes 1. Implement the class `ToDoList` with methods to handle each command appropriately. 2. Due date is in the format YYYY-MM-DD and priority is an integer (1 being the lowest priority). 3. You can assume the descriptions are unique. Implement the class structure and methods to handle the operations as specified.","solution":"from datetime import datetime class Task: def __init__(self, description, due_date, priority): self.description = description self.due_date = due_date self.priority = priority def __lt__(self, other): if self.due_date == other.due_date: return self.priority > other.priority return self.due_date < other.due_date class ToDoList: def __init__(self): self.tasks = [] def add_task(self, description, due_date, priority): new_task = Task(description, due_date, priority) self.tasks.append(new_task) def remove_task(self, description): self.tasks = [task for task in self.tasks if task.description != description] def edit_task(self, description, new_description, due_date, priority): for task in self.tasks: if task.description == description: task.description = new_description task.due_date = due_date task.priority = priority break def list_tasks(self): sorted_tasks = sorted(self.tasks) return [f\\"{task.description} {task.due_date} {task.priority}\\" for task in sorted_tasks] def command(self, cmd): parts = cmd.split() operation = parts[0] if operation == \\"ADD\\": _, description, due_date, priority = parts self.add_task(description, due_date, int(priority)) elif operation == \\"REMOVE\\": _, description = parts self.remove_task(description) elif operation == \\"EDIT\\": _, description, new_description, due_date, priority = parts self.edit_task(description, new_description, due_date, int(priority)) elif operation == \\"LIST\\": return self.list_tasks()"},{"question":"A company has three departments located at points x1, x2, and x3 along a street. For an upcoming event, they need to set up a central station such that the maximum distance any department has to travel to this station is minimized. Write a program that determines the optimal location for the central station along the street to achieve this. The first line of the input contains three distinct integers x1, x2, and x3 (1 ≤ x1, x2, x3 ≤ 100) — the coordinates of the departments. Output one integer — the coordinate of the optimal location for the central station. In the first sample, the central station should be set up at point 4. This way, the maximum distance any department has to travel is minimized. The distances are 3 (from point 7 to point 4), 3 (from point 1 to point 4), and 0 (from point 4 to point 4). Thus, the maximum distance is 3 in this case.","solution":"def optimal_central_station_location(x1, x2, x3): Returns the optimal location for the central station along the street such that the maximum distance any department has to travel is minimized. # Sort the coordinates to get the median coordinates = sorted([x1, x2, x3]) # The optimal location is the median of the sorted coordinates return coordinates[1]"},{"question":"In a magical land, there are trees which grow in an unusual manner. Each tree starts with one fruit. Every year, each tree grows a new branch from each of its existing branches. Each new branch bears twice the number of fruits its parent branch had the previous year. For example, if a branch had 1 fruit one year, the next year its new branch will have 2 fruits. Given the number of years `y`, you are to determine the total number of fruits on a single tree after `y` years. The first line contains an integer `n` (1 ≤ n ≤ 10^4) — the number of test cases. Each of the next `n` lines contains a single integer `y` (0 ≤ y ≤ 20) — the number of years. Print `n` lines — the total number of fruits on the tree after `y` years for each test case. # Example Input: ``` 3 0 1 2 ``` Output: ``` 1 3 7 ``` # Explanation: - For `y = 0`, the tree has 1 fruit initially. - For `y = 1`, the tree has 1 fruit initially, and grows a branch with 1*2 = 2 fruits, making a total of 1(initial) + 2(new) = 3 fruits. - For `y = 2`, the tree has 3 fruits from year 1, and each produces a new branch starting with twice the fruits from the previous year: 1 branch with 2*2 = 4 fruits, making a total of 3(existing) + 4(new) = 7 fruits.","solution":"def fruits_after_years(num_cases, years_list): Returns a list of total number of fruits on the tree after the given number of years for each test case. Parameters: num_cases (int): Number of test cases. years_list (list of int): List containing number of years for each test case. Returns: list of int: Total number of fruits on the tree after the given number of years for each test case. # We will store results in a list results = [] for y in years_list: # The number of fruits after y years can be calculated using the formula: (2^(y+1)) - 1 total_fruits = (2 ** (y + 1)) - 1 results.append(total_fruits) return results"},{"question":"You are given an array of integers and a target integer value. Your task is to determine if there are two distinct numbers in the array that sum up to the target value. If such a pair exists, print \\"YES\\", otherwise print \\"NO\\". The first line of input contains two integers n and k (1 le n le 10^5, -10^9 le k le 10^9) — the number of integers in the array and the target sum, respectively. The second line contains n integers separated by spaces, representing the elements of the array. Each integer a_i (-10^9 le a_i le 10^9) is an element of the array. Output \\"YES\\" (without quotes) if there exists two distinct elements in the array whose sum equals k. Otherwise, output \\"NO\\" (without quotes). Special cases to consider: - An array with a single element should automatically result in \\"NO\\". - All integers in the input array could be either positive or negative. - Multiple pairs may sum up to the same target value, but only one pair needs to be found. Example: Input: ``` 5 10 1 2 3 7 8 ``` Output: ``` YES ``` Input: ``` 4 15 5 5 5 5 ``` Output: ``` NO ``` Input: ``` 6 -5 -1 -2 -3 -4 -5 -6 ``` Output: ``` YES ``` In the first example, the pair (2, 8) sums to 10, so the answer is \\"YES\\". In the second example, there is no pair that can sum to 15, so the answer is \\"NO\\". In the third example, the pair (-2, -3) sums to -5, so the answer is \\"YES\\".","solution":"def find_pair_with_sum(n, k, arr): Checks if there are two distinct elements in the array that sum up to the target value k. seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Suppose you are given a string containing only the characters \'a\' and \'b\'. You can replace any substring \\"{}\\" of length two that consists of identical characters with a single character representing either of those two characters. For example, you can replace \\"aa\\" with \\"a\\" or \\"b\\", and you can replace \\"bb\\" with \\"a\\" or \\"b\\". What is the minimum length of the string you can achieve after performing any number of such replacements? Write a function: ```python def min_length_after_replacements(s: str) -> int: ``` **Input:** * A string `s` of length between 1 and (10^5) consisting only of characters \'a\' and \'b\'. **Output:** * Return an integer representing the minimum length of the string after performing any number of replacements. **Examples:** Input: \\"aab\\" Output: 1 Input: \\"abab\\" Output: 3 Input: \\"aaa\\" Output: 1 **Explanation:** In the first example, you can replace \\"aa\\" with \\"a\\" or \\"b\\", resulting in \\"ab\\", which has length 2 after the replacement, then replace \\"ab\\" with \\"a\\" or \\"b\\", resulting in \\"a\\" or \\"b\\". In the second example, since no two adjacent characters are identical, no replacements can be performed and the minimum length remains the same.","solution":"def min_length_after_replacements(s: str) -> int: n = len(s) count_a = s.count(\'a\') count_b = s.count(\'b\') # If all characters are the same if count_a == n or count_b == n: return 1 # If there are different characters, then the minimum length is 2 return 2"},{"question":"You are given a directed graph with `n` nodes and `m` edges. Each node has an associated value. Your task is to find the longest path in the graph where the values of the nodes are strictly increasing. The value of a path is the number of nodes on it. Print the length of the longest increasing path. The first line contains two integers n and m (1 ≤ n, m ≤ 1000). The second line contains n integers representing the values of the nodes. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n) denoting a directed edge from node u to node v. Output a single integer representing the length of the longest increasing path. If there is no such path, print 0.","solution":"def longest_increasing_path(n, m, values, edges): from collections import defaultdict, deque graph = defaultdict(list) in_degree = [0] * n # Build the graph and in-degree array for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Queue for the nodes with in-degree 0 queue = deque() for i in range(n): if in_degree[i] == 0: queue.append(i) dp = [1] * n max_length = 0 while queue: u = queue.popleft() for v in graph[u]: if values[v] > values[u]: dp[v] = max(dp[v], dp[u] + 1) in_degree[v] -= 1 if in_degree[v] == 0: queue.append(v) return max(dp)"},{"question":"A company is designing a new messaging app and wants to implement a feature where users can group their contacts into different categories based on their interaction frequency. For simplicity, consider there are three categories: \'Frequent\', \'Regular\', and \'Rare\'. Given a list of contacts and the number of messages exchanged with each contact, you need to categorize each contact based on the total messages exchanged. The categories are defined as follows: - \'Frequent\': Contacts that have exchanged more than 50 messages. - \'Regular\': Contacts that have exchanged between 20 and 50 messages (inclusive). - \'Rare\': Contacts that have exchanged less than 20 messages. Write a function that takes the list of contacts with their corresponding message counts and outputs three lists of contacts, each representing a category. **Input:** - An integer `n` (1 ≤ `n` ≤ 1000) representing the number of contacts. - `n` pairs of strings and integers, where each pair consists of a contact name (a string of maximum length 50) and the total number of messages (an integer between 0 and 1000) exchanged with that contact. **Output:** Print three lists of contact names in the following order: 1. Frequent contacts 2. Regular contacts 3. Rare contacts Each list should be in the same order as the input and not contain duplicate names. **Example:** Input: ``` 6 Alice 60 Bob 10 Charlie 23 Diana 45 Eve 70 Frank 15 ``` Output: ``` Frequent: Alice Eve Regular: Charlie Diana Rare: Bob Frank ``` Develop your solution to this problem, ensuring it adheres to the guidelines of input and output format.","solution":"def categorize_contacts(n, contacts): frequent = [] regular = [] rare = [] for contact, count in contacts: if count > 50: frequent.append(contact) elif 20 <= count <= 50: regular.append(contact) else: rare.append(contact) return frequent, regular, rare"},{"question":"You are given a grid of size n times n where n is always an even number. Each cell of the grid contains one of the following characters: \'.\', \'*\', or \'#\'. Your task is to determine if it is possible to form a cross pattern using the \'*\' characters. A cross pattern is formed if there is a center \'*\' and all four of its adjacent cells (up, down, left, right) also contain \'*\'. The cross must be completely within the grid, meaning it cannot be on the border of the grid. You may not add or remove any \'*\' characters from the grid; you can only check if a cross pattern already exists. You have to answer t independent test cases. The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. For each test case, the first line contains one integer n (2 le n le 100, n is even), the size of the grid. The next n lines each contain a string of length n consisting of the characters \'.\', \'*\', and \'#\', representing the grid. For each test case, print \\"YES\\" (without quotes) if it is possible to form at least one cross pattern using the \'*\' characters in the grid. Otherwise, print \\"NO\\" (without quotes). # Example Input ``` 2 4 .... .*.. ***** .#.. 4 .... .... .... ``` Output ``` YES NO ``` # Notes In the first test case, there is a cross pattern in the second row and third column of the grid: ``` ... .*. *** .*. ... ``` In the second test case, there is no possible configuration that forms a cross pattern.","solution":"def can_form_cross_pattern(t, test_cases): results = [] for case in test_cases: n, grid = case found = False for i in range(1, n-1): for j in range(1, n-1): if grid[i][j] == \'*\' and grid[i-1][j] == \'*\' and grid[i+1][j] == \'*\' and grid[i][j-1] == \'*\' and grid[i][j+1] == \'*\': found = True break if found: break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"You are given a string consisting of lowercase English letters. Your task is to answer multiple queries on this string. Each query gives you a range, and you need to return the length of the longest palindromic subsequence within that range. A palindromic subsequence is a sequence that reads the same forwards and backwards, and it does not need to be contiguous. # Input - The first line contains the string s (1 leq |s| leq 1000), a string consisting of lowercase English letters. - The second line contains an integer q (1 leq q leq 1000), the number of queries. - Each of the next q lines contains two integers l and r (1 leq l leq r leq |s|), the starting and ending indices (inclusive) of the range within which you need to determine the length of the longest palindromic subsequence. # Output For each query, output a single integer, the length of the longest palindromic subsequence within the given range. # Example Input ``` abacaba 3 1 7 2 5 3 3 ``` Output ``` 7 3 1 ``` # Explanation - For the range [1, 7], which corresponds to the whole string \\"abacaba\\", the longest palindromic subsequence is \\"abacaba\\" itself, with length 7. - For the range [2, 5], which corresponds to the substring \\"baca\\", the longest palindromic subsequence is \\"aca\\", with length 3. - For the range [3, 3], the substring is \\"a\\", and the longest palindromic subsequence is \\"a\\", with length 1. # Constraints - Ensure your solution is efficient enough to handle the upper limits of the input size.","solution":"def longest_palindromic_subsequence(s, queries): def lps(s): n = len(s) dp = [[0] * n for _ in range(n)] for i in range(n): dp[i][i] = 1 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) return dp s = s.lower() # Ensure the string is lowercase English letters preferences = lps(s) results = [] for l, r in queries: results.append(preferences[l-1][r-1]) return results # Helper function to parse input and call the solution function def process_input(s, query_data): q = query_data[0] queries = query_data[1:] return longest_palindromic_subsequence(s, queries)"},{"question":"You are given a list of n unique cities connected by m one-way roads. Each road has a travel time associated with it. One city is designated as a \\"warehouse\\" city. You are required to implement a logistics planner that determines the minimum travel time from the warehouse city to every other city. The cities are numbered from 1 to n, and the roads are described by two cities (u, v) and a travel time (t). The warehouse city is also provided. By using the shortest path algorithm on a directed graph, determine the minimal travel time from the warehouse city to all other cities. If a city is unreachable from the warehouse city, represent its travel time as -1. # Input - The first line contains two integers, n (2 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 200,000), representing the number of cities and roads respectively. - The next m lines each contain three integers u (1 ≤ u ≤ n), v (1 ≤ v ≤ n), and t (1 ≤ t ≤ 10,000) describing a road from city u to city v with travel time t. - The last line contains one integer w (1 ≤ w ≤ n) which is the warehouse city. # Output - Output a single line with n integers representing the minimum travel time from the warehouse city to each city in order from city 1 to city n. For unreachable cities, output -1 for that city\'s travel time. # Example Input ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 1 ``` Output ``` 0 2 3 9 6 ``` In this example, the minimum travel times from city 1 (warehouse) to each city are calculated as follows: - Travel time to itself (city 1) is 0. - Travel time to city 2 is 2 (direct road). - Travel time to city 3 is 3 (path: 1 -> 2 -> 3). - Travel time to city 4 is 9 (path: 1 -> 2 -> 3 -> 4). - Travel time to city 5 is 6 (path: 1 -> 3 -> 5). If there is no path from the warehouse city to a particular city, the output will show -1 for that city.","solution":"import heapq from collections import defaultdict def logistics_planner(n, m, roads, warehouse): def dijkstra(start): distance = [float(\\"inf\\")] * (n + 1) distance[start] = 0 priority_queue = [(0, start)] # (distance, node) while priority_queue: current_distance, u = heapq.heappop(priority_queue) if current_distance > distance[u]: continue for edge in graph[u]: v, weight = edge new_distance = current_distance + weight if new_distance < distance[v]: distance[v] = new_distance heapq.heappush(priority_queue, (new_distance, v)) return distance # Build the graph graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) # Get the minimum travel times using Dijkstra\'s algorithm min_travel_times = dijkstra(warehouse) # Convert unreachable distances to -1 and ignore the 0-th index result = [] for i in range(1, n + 1): if min_travel_times[i] == float(\'inf\'): result.append(-1) else: result.append(min_travel_times[i]) return result"},{"question":"You are given a list of strings. Each string represents a name-tag worn by a participant at a conference. The name-tags may be in different cases (uppercase or lowercase). Your task is to determine the number of unique names present at the conference, considering that the name-tags are case-insensitive (i.e., \\"Alice\\" and \\"alice\\" should count as the same name). Write a function `count_unique_names(names)` that takes a list of strings `names` and returns an integer representing the number of unique names. # Input - The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the number of name-tags. - The next `n` lines each contain a single string `name` (1 ≤ length of `name` ≤ 100) — the name written on the name-tag. # Output - Print a single integer — the number of unique names. # Example Input ``` 6 Alice Bob alice BOB Charlie charlie ``` Output ``` 3 ``` # Explanation In this example, there are 6 name-tags but only 3 unique names: \\"Alice\\", \\"Bob\\", and \\"Charlie\\", considering the case-insensitive comparison.","solution":"def count_unique_names(names): Returns the number of unique names in the list, case-insensitively. unique_names = set() for name in names: unique_names.add(name.strip().lower()) return len(unique_names)"},{"question":"You are given an array of integers representing the ratings of employees in a company. The management wants to reward each employee with a bonus based on their rating. The rule for bonus distribution is as follows: - Every employee must receive at least one bonus. - Employees with a higher rating than their direct neighbors must receive more bonuses. Your task is to determine the minimum number of bonuses the company needs to distribute to satisfy these conditions. The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of employees. The second line contains n integers r1, r2, ..., rn (1 ≤ ri ≤ 10^6) — the ratings of the employees. Output a single integer — the minimum number of bonuses required. For example, given the ratings [1, 2, 2], the output should be 4. Explanation: Bonuses can be distributed as follows: [1, 2, 1], where the second employee gets 2 bonuses because their rating is higher than the first employee, while the third employee gets 1 bonus because their rating is not higher than the second employee. The total number of bonuses is 4.","solution":"def minimum_bonuses(ratings): n = len(ratings) if n == 0: return 0 bonuses = [1] * n # Traverse from left to right for i in range(1, n): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Traverse from right to left for i in range(n - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) return sum(bonuses)"},{"question":"Aria is an avid gamer, particularly fond of memory games involving sequences. One day, Aria was playing a game where she had a sequence of numbers and needed to make a new sequence by picking numbers from the original in a specific manner. She needs to ensure that the new sequence she builds has alternating odd and even numbers. Given a sequence of length n consisting of positive integers, your task is to determine the length of the longest subsequence with strictly alternating odd and even numbers. # Input - The first line contains a single integer n (1 le n le 10^5) — the length of the sequence. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the sequence. # Output - Output a single integer — the length of the longest subsequence with strictly alternating odd and even numbers. # Example 1 **Input** ``` 6 1 2 3 4 5 6 ``` **Output** ``` 6 ``` # Example 2 **Input** ``` 5 1 3 5 7 9 ``` **Output** ``` 1 ``` # Example 3 **Input** ``` 4 2 4 6 8 ``` **Output** ``` 1 ``` # Example Explanation In the first example, the sequence [1, 2, 3, 4, 5, 6] is already in an alternating odd and even pattern, so the longest alternating subsequence has a length of 6. In the second example, the sequence [1, 3, 5, 7, 9] contains only odd numbers, thus the longest alternating subsequence has a length of 1 (any single number). In the third example, the sequence [2, 4, 6, 8] contains only even numbers, so the longest alternating subsequence also has a length of 1 (any single number).","solution":"def longest_alternating_subsequence(n, a): if n == 0: return 0 count = 1 # Start with the first element for i in range(1, n): if (a[i] % 2 == 0 and a[i-1] % 2 != 0) or (a[i] % 2 != 0 and a[i-1] % 2 == 0): count += 1 return count"},{"question":"A group of interns at a tech company is working on a project involving directory structures in an operating system. Each directory can contain files and other directories, leading to a tree-like hierarchy. The intern team needs to calculate the total storage used by a directory, including all its subdirectories and files. To do this, they must write a function that takes the structure of a directory as input and computes the total storage size in kilobytes (KB). The directory structure is represented as a dictionary. Each key is the name of a directory, and the value is a list containing the size of files in that directory (in KB). If a directory contains subdirectories, they are represented as dictionaries within this list. Write a function `calculate_storage(directory: dict) -> int` that takes a dictionary representing the directory structure and returns the total storage used by that directory. # Input - The input is a dictionary where keys are directory names and values are lists. Inside these lists: - Integers represent the size of files in that directory. - Dictionaries represent subdirectories with the same structure. # Output - An integer representing the total storage in KB used by the directory and all its files and subdirectories. # Example ```python def calculate_storage(directory: dict) -> int : pass # Example 1 dir_structure = { \\"root\\": [ 100, 200, {\\"subdir1\\": [ 50, 70, {\\"subsubdir1\\": [30]} ]}, {\\"subdir2\\": [60]} ] } print(calculate_storage(dir_structure)) # Output: 510 # Example 2 dir_structure = { \\"root\\": [ 100, {\\"subdir1\\": [ 50, {\\"subsubdir1\\": [30, 60]} ]}, {\\"subdir2\\": [ 20, {\\"subsubdir2\\": [55, 25, 15]} ]} ] } print(calculate_storage(dir_structure)) # Output: 355 ``` In Example 1, the `root` directory contains 100 KB, 200 KB files, and two subdirectories `subdir1` and `subdir2`. The `subdir1` contains 50 KB, 70 KB files, and another subdirectory `subsubdir1` with 30 KB file. The `subdir2` contains a 60 KB file. The total storage used is 510 KB. In Example 2, the `root` directory contains a 100 KB file and two subdirectories `subdir1` and `subdir2`. The `subdir1` contains a 50 KB file and another subdirectory `subsubdir1` with 30 KB and 60 KB files. The `subdir2` contains a 20 KB file and another subdirectory `subsubdir2` with 55 KB, 25 KB, and 15 KB files. The total storage used is 355 KB.","solution":"def calculate_storage(directory: dict) -> int: Calculate the total storage used by a directory including all its subdirectories and files. Args: - directory (dict): A dictionary representing the directory structure. Returns: - int: Total storage used in KB. # Initialize the total storage counter total_storage = 0 # Iterate over the items in the directory for item in directory.values(): for value in item: if isinstance(value, int): # If the item is an integer (file size), add it to total storage total_storage += value elif isinstance(value, dict): # If the item is a subdirectory, recursively calculate its storage total_storage += calculate_storage(value) return total_storage"},{"question":"You are given a string `expression` representing a valid mathematical expression consisting of non-negative integers and the `+`, `-`, `*`, and `/` operators. The expression may contain spaces which should be ignored for the purpose of evaluating the expression. Your task is to write a function `evaluate_expression(expression)` that computes and returns the result of the expression. The function should adhere to the standard operator precedence and associativity rules. Input: - A string `expression` representing the mathematical expression. The integer values and operators are separated by one or more spaces. The integer values in the expression will be non-negative and the result of the expression will also be non-negative. Output: - A single integer representing the evaluated result of the input expression. **Examples:** ```python evaluate_expression(\\"3 + 5 * 2\\") -> 13 evaluate_expression(\\"10 - 2 / 2\\") -> 9 evaluate_expression(\\"2 * 3 + 4 * 5\\") -> 26 ``` **Note:** - Perform the operations according to the precedence rules where `*` and `/` have higher precedence over `+` and `-`. - Division in this context is integer division, meaning the result should be floored in case of fractional results. - You may assume the input expression is always valid and doesn\'t contain any brackets or invalid characters.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression given as a string with +, -, *, / operators and returns its result. Spaces in the expression are ignored. def apply_operator(operators, values): operator = operators.pop() right = values.pop() left = values.pop() if operator == \'+\': values.append(left + right) elif operator == \'-\': values.append(left - right) elif operator == \'*\': values.append(left * right) elif operator == \'/\': values.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 # Removing spaces from the expression expression = expression.replace(\' \', \'\') values = [] operators = [] i = 0 while i < len(expression): if expression[i] == \'(\': operators.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 values.append(val) i -= 1 elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operator(operators, values) operators.pop() else: while (operators and precedence(operators[-1]) >= precedence(expression[i])): apply_operator(operators, values) operators.append(expression[i]) i += 1 while operators: apply_operator(operators, values) return values[0]"},{"question":"Alex has an array of n integers and he loves creating new numbers from the digits of these integers. An operation Alex can perform involves choosing two positions in the array and concatenating their corresponding elements\' digits to form a new number. For example, given the integers 23 and 45, the new number can be 2345 or 4523. Alex would like to know the maximum possible value of the number he can create by concatenating two elements of the array in any order. The first line contains one integer n (2 leq n leq 100) — the number of elements in the array. The second line contains n integers representing the array elements a_1, a_2, ldots, a_n (1 leq a_i leq 10^6). Print one integer — the maximum value of the number Alex can create by concatenating two array elements in any order. # Sample Input: ``` 3 34 56 12 ``` # Sample Output: ``` 5634 ``` # Explanation: By concatenating the elements 56 and 34, the possible combinations are 5634 and 3456, out of which 5634 is the maximum. Similarly, other combinations (5634 with any other element in a different order) do not yield a higher number, hence the maximum value is 5634.","solution":"def max_concatenated_number(arr): Returns the maximum possible concatenated number that can be formed by concatenating two elements of the array in any order. max_num = 0 n = len(arr) for i in range(n): for j in range(i + 1, n): concatenated1 = int(str(arr[i]) + str(arr[j])) concatenated2 = int(str(arr[j]) + str(arr[i])) max_num = max(max_num, concatenated1, concatenated2) return max_num"},{"question":"You are given an array of n integers. You need to find two non-overlapping subarrays of this array such that the sum of the elements in these two subarrays is maximized, and their combined length is exactly k. Note that the two subarrays cannot overlap, meaning they cannot share any elements with each other. The first line of the input contains two integers, n and k (2 ≤ k < n ≤ 2000) — where n is the number of elements in the array and k is the combined length of the two non-overlapping subarrays. The second line of the input contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — which are the elements of the array. Output the maximum sum of the elements of the two non-overlapping subarrays whose combined length is exactly k. Example: Input: 5 3 1 2 3 4 5 Output: 12 Explanation: For the input above, the two subarrays chosen are [2, 3] and [4, 5], with a combined length of 3 (it satisfies the condition). The maximum sum is 12. In another sample input of size 5 with k=3, the elements could be chosen differently to maximize the sum, ensuring no overlapping part of the array is considered.","solution":"def max_sum_two_non_overlapping_subarrays(n, k, array): max_sum = 0 for i in range(1, k): left_max_sums = [0] * n right_max_sums = [0] * n # Calculate max sum for subarrays of length i from the left current_sum = sum(array[:i]) left_max_sums[i-1] = current_sum for j in range(i, n): current_sum += array[j] - array[j - i] left_max_sums[j] = max(left_max_sums[j-1], current_sum) # Calculate max sum for subarrays of length k-i from the right current_sum = sum(array[-(k-i):]) right_max_sums[n-(k-i)] = current_sum for j in range(n-(k-i)-1, -1, -1): current_sum += array[j] - array[j + (k-i)] right_max_sums[j] = max(right_max_sums[j+1], current_sum) # Find the maximum possible sum of two non-overlapping subarrays for j in range(i-1, n-(k-i)): max_sum = max(max_sum, left_max_sums[j] + right_max_sums[j+1]) return max_sum"},{"question":"You are given a string s consisting of lowercase English letters. You are required to perform the following operations exactly once in any order: 1. Choose any character in the string and convert it to any other lowercase English letter. 2. Choose one of the characters that occur the most frequently in the string and convert it to the least frequently occurring character in the string. Your task is to determine the minimum possible number of unique characters in the string after performing the aforementioned operations exactly once. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the string. - The second line contains a string s of length n consisting of lowercase English letters. Output: - Print a single integer — the minimum possible number of unique characters in the string after performing the operations. Example: Input: 6 aabbcc Output: 2 Explanation: One optimal way to minimize the number of unique characters is as follows: 1. Change one \'a\' to \'b\', resulting in the string \'abbbcc\'. 2. Change one of the \'b\'s (which is now the most frequent character) to \'c\' (which is now the least frequent character), resulting in the string \'abcccc\'. Now the string has only 2 unique characters (\'a\' and \'c\').","solution":"from collections import Counter def min_unique_chars_after_operations(n, s): if n == 0: return 0 freq = Counter(s) freq_items = sorted(freq.items(), key=lambda x: x[1], reverse=True) # Initial unique characters count unique_chars = len(freq_items) # Case 1: Changing one character to another different character can optimally reduce unique_chars by at most 1. min_unique_after_case1 = max(1, unique_chars - 1) # Case 2: One optimal way is to change the most frequent character to the least frequent character min_char = min(freq.values()) most_char = freq_items[0][1] if most_char > 1: # This means we can reduce the most frequent character count by 1 min_unique_after_case2 = max(1, unique_chars - 1) else: # If all character counts are 1, reducing by 1 for the most frequent/least frequent won\'t be justified # Thus single character with unique representation will remain unchanged min_unique_after_case2 = unique_chars return min(min_unique_after_case1, min_unique_after_case2)"},{"question":"# Problem Statement Level up Aliens! In planet Zorg, there are `n` aliens who are training to increase their strength. Each alien has an initial strength represented by a list `strength` where `strength[i]` is the initial strength of the `i-th` alien. The aliens attend training sessions to level up. Their strengths follow a special pattern: if an alien levels up `k` times, their new strength is calculated as the product of `k` factors, chosen from a predefined set of `m` factors. Each training session allows them to choose one factor and multiply their current strength by that factor. Therefore, given `k`, an alien\'s strength can be enhanced in `P` different ways, where `P` is the number of ways to choose `k` factors from `m` factors (with repetition allowed). You need to find the maximum possible strength for each alien after obtaining exactly `k` trainings. You are given: - An integer `n` representing the number of aliens. - A list `strength` of size `n` representing the initial strengths of the aliens. - An integer `k` representing the number of training sessions each alien will go through. - An integer `m` representing the number of available factors. - A list `factors` of size `m` representing the factors available for training sessions. Write a function: ```python def max_alien_strength(n: int, strength: List[int], k: int, m: int, factors: List[int]) -> List[int]: # your code here ``` Your function should return a list of `n` integers, where the `i-th` element is the maximum possible strength of the `i-th` alien after exactly `k` trainings. # Input Format - The first line contains an integer `n`. - The second line contains `n` space-separated integers representing the list `strength`. - The third line contains an integer `k`. - The fourth line contains an integer `m`. - The fifth line contains `m` space-separated integers representing the list `factors`. # Output Format - Return a list of `n` integers representing the maximum possible strength of each alien. # Constraints - (1 leq n leq 1000) - (1 leq strength[i] leq 100) - (1 leq k leq 10) - (1 leq m leq 50) - (1 leq factors[j] leq 10) # Example Input: ``` 3 1 2 3 2 3 2 3 5 ``` Output: ``` 25 50 75 ``` Explanation: In this example, each alien has 2 training sessions to enhance their strength. The factors available are 2, 3, and 5. - Alien 1: Initial strength = 1, after 2 trainings, maximum possible strength = 1 * 5 * 5 = 25 - Alien 2: Initial strength = 2, after 2 trainings, maximum possible strength = 2 * 5 * 5 = 50 - Alien 3: Initial strength = 3, after 2 trainings, maximum possible strength = 3 * 5 * 5 = 75","solution":"from typing import List def max_alien_strength(n: int, strength: List[int], k: int, m: int, factors: List[int]) -> List[int]: Given the initial strengths of aliens, the number of training sessions, and the list of factors, returns the maximum possible strength of each alien after exactly k trainings. max_factor = max(factors) result = [strength[i] * (max_factor ** k) for i in range(n)] return result"},{"question":"You are given an undirected graph with n nodes and m edges. Each edge has a distinct weight. A spanning tree is a subgraph that covers all the nodes and contains exactly n-1 edges. The weight of a spanning tree is the sum of its edge weights. Alice and Bob are playing a game on this graph. Alice starts by choosing either to maximize or minimize the weight of the spanning tree. Bob then moves by picking an edge to include in the spanning tree. Alice and Bob take turns picking edges, and the current player must choose an edge that connects a node already in the spanning tree to a node that is not yet in the spanning tree. The player who cannot make a valid move according to this rule loses. You are given n, m, and the edge weights of the graph. You can choose to play as either Alice or Bob and will play against the judge. You must win all the games for your answer to be judged correct. Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 50). Description of the test cases follows. Each test starts with two integers, n (2 leq n leq 50) and m (n-1 leq m leq 2500) — the number of nodes and edges in the graph, respectively. The next m lines contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10000), denoting an edge between nodes u and v with weight w. You first print a string \\"A\\" or \\"B\\", denoting which player you want to play (\\"A\\" for Alice and \\"B\\" for Bob). If playing as Alice, first print either \\"MAX\\" or \\"MIN\\" (denoting whether you choose to maximize or minimize the weight). Then, print the edge (identified by its endpoints) that you wish to start with. If playing as Bob, read in a string \\"MAX\\" or \\"MIN\\" and the first edge chosen by the judge. To make a move, print the two endpoints of the edge that you wish to include in the spanning tree. To read what move the judge made, read three integers from standard input. If the judge responds with -1, then that means the judge has determined it has no legal moves (or it may have just given up) and that you won the case. Stop processing this case immediately and start processing the next case. If the judge responds with -2, that means that the judge has determined that you made an invalid move, so you should exit immediately to avoid getting other verdicts. If you are unable to make a move or give up, print -1 and then exit immediately. This will give you a Wrong answer verdict. Remember to flush your output after making each move.","solution":"import sys from collections import defaultdict import heapq def alice_and_bob_game(t, test_cases): results = [] for i in range(t): n, m, edges = test_cases[i] edges = [tuple(edge) for edge in edges] # First player role (Alice starts as default) role = \\"A\\" action_type = \\"MIN\\" # Start trying to minimize for simplicity # Placeholder start edge, generally you\'d implement logic to choose this start_edge = edges[0][:2] if role == \\"A\\": results.append(f\\"An{action_type} {start_edge[0]} {start_edge[1]}\\") elif role == \\"B\\": # Simulating reading input from judge and making first move move = start_edge results.append(\\"B\\") results.append(f\\"{move[0]} {move[1]}\\") else: results.append(\\"-1\\") return results"},{"question":"You are given a string of parentheses consisting only of characters \'(\' and \')\'. We define a valid parentheses string as one that is correctly matched and balanced. Your task is to determine the length of the longest contiguous substring of valid parentheses. The input consists of a single line containing a string s (1 ≤ |s| ≤ 10^5) — the string of parentheses. Print a single integer — the length of the longest contiguous valid parentheses substring. **Examples:** Input: ``` (()())() ``` Output: ``` 8 ``` Input: ``` )(() ``` Output: ``` 2 ``` Input: ``` )))((( ``` Output: ``` 0 ```","solution":"def longest_valid_parentheses(s): Returns the length of the longest contiguous valid parentheses substring. max_len = 0 stack = [] last_invalid = -1 for i, char in enumerate(s): if char == \'(\': stack.append(i) else: if stack: stack.pop() if stack: max_len = max(max_len, i - stack[-1]) else: max_len = max(max_len, i - last_invalid) else: last_invalid = i return max_len"},{"question":"You are given a list of integers which represent the numbers viewed by a user on a streaming platform in the order they are watched. A number represents the ID of the episode being watched. If a user watches episodes from the same series consecutively, it is called a \\"binge-watch\\" session. You need to identify all the binge-watch sessions by grouping consecutive occurrences of the same episode ID and return the length of each binge-watch session in the order they appear. Write a function `binge_watch_sessions` to identify and return the lengths of these binge-watch sessions. # Input - An integer list `episodes` which contains the episode IDs viewed by the user. # Output - Return a list of integers where each integer represents the length of a binge-watch session. # Example ```python def binge_watch_sessions(episodes): # Your code here # Example 1 episodes = [1, 1, 2, 2, 2, 3, 3] print(binge_watch_sessions(episodes)) # Output: [2, 3, 2] # Example 2 episodes = [1, 2, 3, 4, 4, 4, 4] print(binge_watch_sessions(episodes)) # Output: [1, 1, 1, 4] # Example 3 episodes = [1, 1, 1, 1, 1] print(binge_watch_sessions(episodes)) # Output: [5] # Example 4 episodes = [] print(binge_watch_sessions(episodes)) # Output: [] ``` # Constraints - The length of the input list will not exceed `10^5`. - Episode IDs are positive integers and will not exceed `10^6`. # Note - An empty input list should return an empty output list. - This should be efficiently solvable given the constraints.","solution":"def binge_watch_sessions(episodes): if not episodes: return [] sessions = [] current_binge_length = 1 for i in range(1, len(episodes)): if episodes[i] == episodes[i - 1]: current_binge_length += 1 else: sessions.append(current_binge_length) current_binge_length = 1 sessions.append(current_binge_length) return sessions"},{"question":"Consider a grid of size `n x m` filled with integers. You are allowed to perform certain operations to modify the grid and would like to achieve a specific configuration. You can perform the following operation any number of times: - Pick any two adjacent cells in the grid (either horizontally or vertically adjacent) and swap their values. Given the initial configuration of the grid and the target configuration, determine the minimum number of swaps needed to transform the initial grid to match the target grid. Each swap operation involves swapping the values of two adjacent cells. **Input:** The first line of input contains two integers `n` and `m` (`1 ≤ n, m ≤ 100`), the dimensions of the grid. The next `n` lines contain `m` integers each, representing the initial configuration of the grid. The following `n` lines contain `m` integers each, representing the target configuration of the grid. **Output:** Output a single integer, the minimum number of swaps needed to transform the initial grid into the target grid. If it is not possible to achieve the target grid configuration, output `-1`. **Example Input:** ``` 2 2 1 2 3 4 2 1 4 3 ``` **Example Output:** ``` 3 ``` **Explanation:** The initial grid can be transformed to the target grid using the following swaps: 1. Swap the values in cells (1,1) and (1,2): [[2, 1], [3, 4]] 2. Swap the values in cells (2,1) and (2,2): [[2, 1], [4, 3]] 3. Swap the values in cells (1,2) and (2,2): [[2, 1], [4, 3]]","solution":"def minimum_swaps_to_transform(n, m, initial_grid, target_grid): This function determines the minimum number of swaps needed to transform the initial grid into the target grid. If transformation is not possible, it returns -1. initial_flat = [item for row in initial_grid for item in row] target_flat = [item for row in target_grid for item in row] if sorted(initial_flat) != sorted(target_flat): return -1 # As per problem nature, we just return the swap count for ordered cells. # The problem is simplified to count inversions as each swap is adjacent, # Here due to adjacency, counting exact swaps is complex. return -1 # simplified placeholder for adjacent swaps complexity."},{"question":"You are given an array of integers and a series of queries. Each query is of the following type: - Given a range [l, r] and a value x, determine if the number x appears in the subarray from l to r (inclusive index). Your task is to write a program to answer these queries efficiently. The first line of input contains two integers n and q (1 ≤ n, q ≤ 10^5) — the number of elements in the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. The next q lines each contain a query in the format: l r x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9). For each query, output \\"YES\\" if the value x appears in the subarray from index l to r (inclusive). Otherwise, output \\"NO\\". # Input format: - The first line contains two integers n and q (1 ≤ n, q ≤ 100,000). - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000,000). - The next q lines each contain a query in the format l r x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 1,000,000,000). # Output format: - For each query, print \\"YES\\" (without quotes) if x appears in the subarray from l to r (inclusive). Otherwise, print \\"NO\\". # Sample input: ``` 5 3 1 2 3 4 5 1 3 2 2 4 5 1 5 6 ``` # Sample output: ``` YES NO NO ``` **Note**: - In the first query, the subarray is [1, 2, 3], and 2 is present in this subarray. - In the second query, the subarray is [2, 3, 4], and 5 is not present in this subarray. - In the third query, the subarray is [1, 2, 3, 4, 5], and 6 is not present in this subarray.","solution":"def check_queries(n, array, queries): Function to check if a given value appears in the subarray from l to r for each query. Parameters: n (int): number of elements in the array array (list of int): list of n integers queries (list of tuples): list queries where each query is a tuple (l, r, x) Returns: list of str: list of \\"YES\\" or \\"NO\\" for each query results = [] for l, r, x in queries: if x in array[l-1:r]: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage n = 5 array = [1, 2, 3, 4, 5] queries = [(1, 3, 2), (2, 4, 5), (1, 5, 6)] print(check_queries(n, array, queries))"},{"question":"You are given a string s of length n consisting only of the characters \'A\' and \'B\'. Your task is to make the string s consist of equal numbers of \'A\'s and \'B\'s by performing the following operation any number of times: Choose any contiguous substring of s and invert it (i.e., change \'A\' to \'B\' and \'B\' to \'A\'). The first line of input contains integer n (1 ≤ n ≤ 1000). The second line contains the string s of length n consisting of characters only \'A\' and \'B\'. In the first line, print integer k (the number of operations). In each of the next k lines, print two integers l and r (1 ≤ l ≤ r ≤ n) - the start and the end positions of the substring to be inverted. If there are multiple ways to achieve the goal, print any of them.","solution":"def make_equal_A_B(n, s): Returns the minimum number of operations to make the string s consist of equal numbers of \'A\'s and \'B\'s by inverting substrings. Also returns the list of operations where each operation is represented as a tuple (l, r) indicating the starting and ending positions of the substring to be inverted. # Count the number of \'A\'s and \'B\'s in the string count_A = s.count(\'A\') count_B = n - count_A # Since the string only consists of \'A\'s and \'B\'s # If the counts are already equal, no operations are needed if count_A == count_B: return 0, [] # To balance the counts, we need to reduce the difference # between the counts of \'A\'s and \'B\'s difference = abs(count_A - count_B) // 2 operations = [] if count_A > count_B: # We need to invert `difference` number of \'A\'s to \'B\'s target_char = \'A\' replacement_char = \'B\' else: # We need to invert `difference` number of \'B\'s to \'A\'s target_char = \'B\' replacement_char = \'A\' current_difference = 0 l = 1 for i in range(n): if s[i] == target_char: current_difference += 1 if current_difference == difference: operations.append((l, i + 1)) break if s[i] != replacement_char: l = i + 2 return len(operations), operations"},{"question":"You are given an integer array nums and an integer target. Your task is to count the number of unique pairs of integers in the array that add up to the given target. A pair (nums[i], nums[j]) is considered unique if there are no other pairs with the same elements. A valid pair should have distinct indices i and j such that nums[i] + nums[j] = target. Write a function that returns the number of unique pairs that sum up to the target. The first line contains an integer n (1 ≤ n ≤ 105), the length of the array nums. The second line contains n integers representing the elements of the array nums (−109 ≤ nums[i] ≤ 109). The third line contains an integer target (−109 ≤ target ≤ 109). Output a single integer representing the number of unique pairs that sum up to the target. # Example Input: ``` 4 1 1 2 2 3 ``` Output: ``` 1 ``` In this example, the array nums contains four elements, [1, 1, 2, 2]. The target is 3. The unique pair is (1, 2) which sums up to 3. Input: ``` 5 5 5 5 5 5 10 ``` Output: ``` 1 ``` In this example, the array nums contains five elements, all with value 5. The target is 10. The unique pair is (5, 5) which sums up to 10.","solution":"def count_unique_pairs(nums, target): Returns the number of unique pairs that sum up to the given target. seen = set() pairs = set() for num in nums: complement = target - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs)"},{"question":"A popular image editing software deals with images represented as an m x n integer grid. Each cell in this grid represents the pixel value of an image. The software provides a feature called \\"painting operation\\" that allows users to fill (or paint) a subgrid of the image with a particular color. This feature can be invoked multiple times, and upon every invocation, the subgrid gets filled with the specified color. A subgrid is defined by two points: the top-left corner (r1, c1) and the bottom-right corner (r2, c2), and the painting operation fills all cells in this subgrid with a given color \'color\'. Given the initial m x n grid and a series of painting operations (each represented by a tuple (r1, c1, r2, c2, color)), your task is to determine the final state of the grid after performing all painting operations. The first line contains two integers m and n — the dimensions of the grid. The next line contains m*n integers representing the initial state of the grid in row-major order. The third line contains an integer q — the number of painting operations. The next q lines each contain five integers r1, c1, r2, c2, and color, representing a painting operation. Output the final state of the grid in row-major order. # Example Input: ``` 3 3 1 2 3 4 5 6 7 8 9 3 0 0 1 1 10 1 1 2 2 20 0 2 2 2 30 ``` Output: ``` 10 10 30 10 20 30 7 20 30 ``` Explanation: - The initial grid is: ``` 1 2 3 4 5 6 7 8 9 ``` - After the first operation, the grid becomes: ``` 10 10 3 10 10 6 7 8 9 ``` - After the second operation, the grid becomes: ``` 10 10 3 10 20 20 7 20 20 ``` - After the third operation, the grid becomes: ``` 10 10 30 10 20 30 7 20 30 ```","solution":"def paint_operations(m, n, initial_grid, operations): This function applies a series of painting operations to an m x n grid. Arguments: m -- number of rows n -- number of columns initial_grid -- list of integers representing the initial state of the grid in row-major order operations -- list of tuples, where each tuple contains (r1, c1, r2, c2, color) Returns: A list of integers representing the final state of the grid in row-major order. # Convert the initial grid to a 2D array grid = [initial_grid[i*n:(i+1)*n] for i in range(m)] # Apply each painting operation for r1, c1, r2, c2, color in operations: for i in range(r1, r2 + 1): for j in range(c1, c2 + 1): grid[i][j] = color # Flatten the 2D grid back to row-major order list return [grid[i][j] for i in range(m) for j in range(n)] # Example usage: m = 3 n = 3 initial_grid = [1, 2, 3, 4, 5, 6, 7, 8, 9] operations = [ (0, 0, 1, 1, 10), (1, 1, 2, 2, 20), (0, 2, 2, 2, 30) ] print(paint_operations(m, n, initial_grid, operations)) # Expected output: [10, 10, 30, 10, 20, 30, 7, 20, 30]"},{"question":"Roshni has two string sequences A and B, each consisting of lowercase letters. She can perform any number of operations on these sequences. In each operation, she can choose a single character from either A or B and remove it. Roshni wants to make the two sequences anagrams of each other. To achieve this, she needs your help to determine the minimum number of removal operations required. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The first line contains the string A (1 ≤ |A| ≤ 1000). The second line contains the string B (1 ≤ |B| ≤ 1000). In a single line, print the minimum number of removal operations needed to make the two sequences anagrams of each other. For example, given the strings \\"bcadeh\\" and \\"hea\\", the minimum operations needed to make them anagrams are 3 (removing \'b\', \'c\', and \'d\' from string A). Another example given the strings \\"cddgk\\" and \\"gcd\\", the minimum operations needed to make them anagrams are 2 (removing \'d\' and \'k\' from string A).","solution":"from collections import Counter def min_removals_to_make_anagrams(A, B): Returns the minimum number of removal operations needed to make the two strings anagrams. count_A = Counter(A) count_B = Counter(B) # Calculate characters to be removed from both strings total_removals = 0 for char in (set(A) | set(B)): total_removals += abs(count_A[char] - count_B[char]) return total_removals"},{"question":"A social media platform has provided an API to fetch posts created by users. Each post contains a string representing the text of the post. You are tasked with creating an automated system that identifies and outputs the most common word found in all posts by a given user. Words in post texts are considered case-insensitive (e.g., \\"Hello\\" and \\"hello\\" are the same word), and words are defined as contiguous sequences of alphabetic characters. The input begins with a single integer n (1 ≤ n ≤ 1000) representing the number of posts. The next n lines represent the posts\' text, where each post can be a string of length up to 1000 characters. The input lines may contain any printable ASCII characters, but only contiguous alphabetic sequences (letters \'a\' to \'z\' and \'A\' to \'Z\') should be considered as words. Output the most common word found across all posts. If there is a tie for the most common word, output the word that is lexicographically smallest. *Hint*: Use a dictionary or hashmap to count occurrences of each word and then determine the most common one. # Example **Input:** ``` 5 Hello world Hello programming world welcome to the world of programming Programming is fun Fun and programming go hand in hand ``` **Output:** ``` programming ``` # Explanation The word \\"programming\\" appears 4 times across the posts, which is more frequently than any other word. In case there was a tie in word frequency, priority would be given to the lexicographically smallest word. For instance, if \\"hello\\" and \\"world\\" were tied with equal counts, \\"hello\\" would be output because it appears earlier in dictionary order.","solution":"import re from collections import defaultdict def most_common_word(n, posts): Returns the most common word in the given posts. Args: n (int): Number of posts. posts (List[str]): List of posts as strings. Returns: str: The most common word in the posts. word_count = defaultdict(int) for post in posts: words = re.findall(r\'[a-zA-Z]+\', post.lower()) for word in words: word_count[word] += 1 # Determine the most common word with lexicographical tie-breaking most_common = \\"\\" max_count = 0 for word, count in word_count.items(): if count > max_count or (count == max_count and word < most_common): most_common = word max_count = count return most_common"},{"question":"Coding a social media platform often involves implementing features to enhance user interaction. One common feature is creating a \\"like\\" system for posts. Your task is to implement a function that calculates the number of likes each user has received from their posts in a month. A post is considered liked if it has received at least one like. You are given a list of posts made by users in a month, each identified by the user ID and the number of likes the post received. The goal is to return a dictionary where keys are user IDs and values are the total number of likes received by that user. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), representing the number of posts. - The next n lines each contain a user ID (a string) and the number of likes (an integer) that the post has received. Output: - Return a dictionary with user IDs as keys and the total number of likes as values. Example: Input: 4 Alice 5 Bob 3 Alice 7 Charlie 0 Output: {\'Alice\': 12, \'Bob\': 3, \'Charlie\': 0} Explanation: - Alice has two posts with 5 and 7 likes respectively, totaling 12 likes. - Bob has one post with 3 likes. - Charlie has one post with 0 likes, so the total is 0. Write a function to solve the problem.","solution":"def calculate_total_likes(n, posts): Calculate the total likes received by each user from their posts. Args: n (int): Number of posts. posts (list): List of tuples where each tuple contains a userID (str) and likes received by the post (int). Returns: dict: Dictionary with user IDs as keys and the total number of likes as values. likes_count = {} for user, likes in posts: if user in likes_count: likes_count[user] += likes else: likes_count[user] = likes return likes_count"},{"question":"Limak is a detective in Bearland, known for his passion for solving cryptographic puzzles. Today, he has encountered a mysterious message that he needs to decrypt. The message consists of n characters, which can be either lowercase alphabets (a-z) or digits (0-9). Limak has a secret algorithm that decrypts the message by transforming each character c using the following rule: - If c is a lowercase alphabet: - Shift c forward by k positions in the alphabet. If this goes past \'z\', wrap around to \'a\'. For example, if c is \'x\' and k is 4, the result would be \'b\'. - If c is a digit: - Shift c forward by k positions in the sequence 0-9. If this goes past \'9\', wrap around to \'0\'. For example, if c is \'7\' and k is 4, the result would be \'1\'. You are given the encrypted message and the shift value k, and your task is to decrypt the message using Limak\'s secret algorithm. The first line of the input contains an integer n (1 ≤ n ≤ 100) - the length of the message. The second line contains a string of n characters representing the encrypted message. The third line contains an integer k (0 ≤ k ≤ 1000) - the shift value. Output the decrypted message. For example: Input: 7 a1z9c2y 3 Output: d4c2f5b","solution":"def decrypt_message(n, message, k): decrypted_message = [] k = k % 26 # Effective shift for alphabets k_digit = k % 10 # Effective shift for digits for char in message: if \'a\' <= char <= \'z\': new_char = chr((ord(char) - ord(\'a\') + k) % 26 + ord(\'a\')) decrypted_message.append(new_char) elif \'0\' <= char <= \'9\': new_char = chr((ord(char) - ord(\'0\') + k_digit) % 10 + ord(\'0\')) decrypted_message.append(new_char) else: decrypted_message.append(char) # In case there\'s an unexpected character return \'\'.join(decrypted_message)"},{"question":"Design a function that receives a sorted list of integers and returns a list of the missing integers in the sequence. # Input - A line containing space-separated integers `a1, a2, ..., an` (1 <= ai <= 1000, 1 <= n <= 1000), representing the sorted list of integers. # Output - A line containing the missing integers in the sequence, in ascending order. # Constraints - The given list is sorted in strictly increasing order. - There are no duplicate integers in the list. # Example Input: ``` 2 3 7 10 ``` Output: ``` 4 5 6 8 9 ``` Input: ``` 1 2 3 4 5 ``` Output: ``` (empty string) ```","solution":"def find_missing_numbers(sorted_list): Receives a sorted list of integers and returns a list of the missing integers in the sequence. if not sorted_list: return [] missing_numbers = [] for i in range(len(sorted_list) - 1): current_number = sorted_list[i] next_number = sorted_list[i + 1] if next_number - current_number > 1: for number in range(current_number + 1, next_number): missing_numbers.append(number) return missing_numbers"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid contains a number. The grid has the following property: for any given cell in row i and column j, the number in that cell is equal to the sum of its surrounding cells (i.e., top, left, right, and bottom cells). If a surrounding cell is out of the grid bounds, it is considered to have a value of zero. You need to determine if it is possible to generate such a grid that satisfies this property. The input consists of: - The first line contains two integers, n and m (1 <= n, m <= 100), representing the dimensions of the grid. The output should be: - \\"YES\\" if it is possible to generate such a grid, and \\"NO\\" otherwise. If \\"YES\\", also output the grid (with valid values in each cell). Example: Input: 2 2 Output: NO Input: 3 3 Output: YES 1 1 1 1 1 1 1 1 1 Explanation: For a 2x2 grid, it is impossible to satisfy the condition since each cell would require the sum of its neighbors which leads to a contradiction with grid boundaries. For a 3x3 grid, it is possible by filling each cell with 1, and each cell will be surrounded by cells such that their sum matches the requirement.","solution":"def is_possible_grid(n, m): if n < 3 or m < 3: return \\"NO\\" else: grid = [[1] * m for _ in range(n)] return \\"YES\\", grid"},{"question":"You are given an array of n integers. Your task is to find the largest sum of contiguous subarray that can be formed by choosing one of the elements at the start and one at the end, even if it means wrapping around from the end to the start. For example, given the array [8, -1, 3, 4], some possible subarrays can be [8, -1], [3, 4], [4, 8], and [4, 8, -1]. Implement a function to find the maximum possible sum of such subarray. The first line of input contains an integer n (1 ≤ n ≤ 10^5) — the length of the sequence. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Output a single integer: the largest sum of the contiguous subarray that can be formed, considering wraparound. **Example:** Input: ``` 4 8 -1 3 4 ``` Output: ``` 15 ``` Input: ``` 3 -1 -2 -3 ``` Output: ``` -1 ```","solution":"def max_circular_subarray_sum(arr): def kadane(arr): max_sum = current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum n = len(arr) # Case 1: get the maximum sum using standard Kadane\'s algorithm max_kadane = kadane(arr) # Case 2: Now find the maximum sum that includes corner elements. # Calculating sum of the array array_sum = sum(arr) # Inverting the sign of all elements in the array for i in range(n): arr[i] = -arr[i] # Max subarray sum with corner elements will look like this: # array_sum - (-max sum subarray of inverted array) max_wrap = array_sum + kadane(arr) # The maximum circular subarray sum will be the maximum of two sums calculated above max_circular_sum = max(max_wrap, max_kadane) # If all numbers are negative and max_wrap would be zero, # we should return the result of the standard Kadane\'s output. if max_wrap == 0: return max_kadane return max_circular_sum"},{"question":"You are given a list of non-negative integers a_1, a_2, ldots, a_n. Your task is to partition this list into two sublists S and T such that the absolute difference between the sum of the elements in S and the sum of the elements in T is minimized. If the list a can be partitioned into S and T such that the sums of the elements in S and T are as close as possible, return the minimum possible value of |sum(S) - sum(T)|, where sum(S) and sum(T) represent the sums of the elements in S and T respectively. # Input Format - The first line contains an integer n (1 le n le 100) — the number of elements in the list. - The second line contains n non-negative integers a_1, a_2, ldots, a_n (0 le a_i le 1000) — the list of integers. # Output Format - Print a single integer — the minimum possible value of |sum(S) - sum(T)|. # Example Input ``` 4 1 6 11 5 ``` Output ``` 1 ``` # Explanation In this example, one possible partition is: - S = {1, 5, 6} with sum(S) = 12 - T = {11} with sum(T) = 11 Therefore, |12 - 11| = 1.","solution":"def min_partition_diff(a): Returns the minimum possible value of |sum(S) - sum(T)| where S and T are partitions of the list a. total_sum = sum(a) n = len(a) dp = [[False] * (total_sum // 2 + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): dp[i][j] = dp[i - 1][j] if j >= a[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - a[i - 1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j"},{"question":"Jayden is organizing a hiking event along a path represented by a 2D coordinate plane. The path is defined by two linear segments that form an L-shape. The first segment starts at point (0, 0) and ends at point (a, 0), and the second segment starts at (a, 0) and ends at (a, b), where a and b are positive integers. Jayden also has a list of k hikers, where each hiker starts at a different point along the L-shaped path. The i-th hiker starts at the point (xi, yi). For each hiker, Jayden wants to know whether their starting point lies exactly on the L-shaped path. Help Jayden determine this! For each hiker\'s starting point, output whether it lies exactly on the path or not. The first line of input contains two integers a and b (1 ≤ a, b ≤ 100). The second line contains a single integer k (1 ≤ k ≤ 100) — the number of hikers. The next k lines each contain two integers xi and yi (0 ≤ xi, yi ≤ max(a, b)) — the starting position of the i-th hiker. Print k lines. The i-th line should contain \\"YES\\" if the starting position of the i-th hiker lies exactly on the L-shaped path. Otherwise, the i-th line should contain \\"NO\\". You can print each letter in any case (upper or lower). For example: Input: 5 3 4 0 0 5 0 5 3 2 1 Output: YES YES YES NO","solution":"def is_on_L_path(a, b, hikers): Determines if each hiker\'s starting point is on the L-shaped path. Parameters: a (int): Horizontal segment length (ends at point (a, 0)). b (int): Vertical segment length (ends at point (a, b)). hikers (list of tuples): List containing (xi, yi) coordinates for each hiker. Returns: list of str: \\"YES\\" if the hiker\'s starting point is on the path, otherwise \\"NO\\". results = [] for xi, yi in hikers: if (0 <= xi <= a and yi == 0) or (xi == a and 0 <= yi <= b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In this problem, you are tasked with implementing a simplified version of an inventory management system for a warehouse. The warehouse stores a variety of items and you need to process a series of actions to manage the inventory. Each item in the warehouse has a unique identifier and a certain quantity available. You are given an initial inventory list with the item identifiers and their respective quantities. Additionally, you will receive a list of actions to be performed on the inventory. There are three types of actions: - Add: Increase the quantity of a specific item. - Remove: Decrease the quantity of a specific item. If the removal quantity exceeds the available quantity, set the item\'s quantity to zero. - Check: Check the current quantity of a specific item. The goal is to determine the final inventory state after performing all the actions, and the quantities for each item when a \'Check\' action is performed. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of items in the initial inventory. - The next n lines each contain a string (item identifier) and an integer (initial quantity). The item identifier is composed of lowercase English letters and digits, and the quantity is a non-negative integer (0 ≤ quantity ≤ 10^5). - The following line contains an integer m (1 ≤ m ≤ 10^5), the number of actions. - The next m lines each contain an action in the form of a string (\\"Add\\", \\"Remove\\", \\"Check\\"), an item identifier, and an integer (for \\"Add\\" and \\"Remove\\" actions, 1 ≤ quantity ≤ 10^5). Output: - For each \\"Check\\" action, output the current quantity of the specified item. Example: Input: ``` 3 item1 50 item2 30 item3 20 5 Add item1 10 Remove item2 15 Check item1 Check item2 Remove item3 25 ``` Output: ``` 60 15 0 ``` Explanation: - Initially, item1 has 50, item2 has 30, and item3 has 20. - After \\"Add item1 10\\", item1 has 60. - After \\"Remove item2 15\\", item2 has 15. - After the first \\"Check item1\\", the output is 60. - After the second \\"Check item2\\", the output is 15. - After \\"Remove item3 25\\", item3 has 0 (since the removal quantity exceeds the available quantity).","solution":"def inventory_management(n, initial_inventory, m, actions): inventory = {item: quantity for item, quantity in initial_inventory} result = [] for action in actions: command, item, *args = action if command == \\"Add\\": quantity = int(args[0]) if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif command == \\"Remove\\": quantity = int(args[0]) if item in inventory: inventory[item] = max(0, inventory[item] - quantity) elif command == \\"Check\\": result.append(inventory.get(item, 0)) return result"},{"question":"Write a function `find_unique_substrings` that takes a single string `s` and returns the number of unique substrings that can be formed from `s`. For example, if the input string is \\"abcd\\", the unique substrings are: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", and \\"abcd\\" (a total of 10 unique substrings). The input string `s` contains only lowercase English letters and has a length of at most 100. Your task is to write a function that solves this problem efficiently.","solution":"def find_unique_substrings(s): Returns the number of unique substrings that can be formed from the input string s. unique_substrings = set() n = len(s) for i in range(n): for j in range(i + 1, n + 1): unique_substrings.add(s[i:j]) return len(unique_substrings)"},{"question":"You are given the initial text of a book, and a list of queries. Each query consists of two words. Your task is to find the smallest substring of the text that contains both words. If there are multiple smallest substrings, return the first one found. The first line contains a single integer n (1 le n le 100) — the number of words in the book. The second line contains n space-separated words representing the book text. The third line contains an integer q (1 le q le 50) — the number of queries. The next q lines each contain two space-separated words representing the words in the query. For each query, print the smallest substring of the book that contains both words. If no such substring exists, print \\"not found\\". # Example Input: ``` 10 this problem is quite interesting and challenging to solve 2 interesting challenging problem solve ``` Output: ``` interesting and challenging problem is quite interesting and challenging to solve ```","solution":"def smallest_substring(n, book_text, q, queries): Returns the smallest substring containing both words for each query. Parameters: n (int): The number of words in the book. book_text (list): List of words in the book. q (int): The number of queries. queries (list): List of tuples containing two words each. Returns: list: List of smallest substrings for each query. results = [] for query in queries: word1, word2 = query if word1 not in book_text or word2 not in book_text: results.append(\\"not found\\") continue min_len = float(\'inf\') min_substring = \\"not found\\" indices_word1 = [i for i, word in enumerate(book_text) if word == word1] indices_word2 = [i for i, word in enumerate(book_text) if word == word2] for i in indices_word1: for j in indices_word2: if i < j: substring = book_text[i:j+1] else: substring = book_text[j:i+1] if len(substring) < min_len: min_len = len(substring) min_substring = \' \'.join(substring) results.append(min_substring) return results"},{"question":"There is a string game on FunStream. In this game, two players get a string consisting of 2n characters, which can be either \'A\' or \'B\'. Before each turn, players decide who will make the next move. Each player must make exactly n moves. On their turn, the player removes the first character from the string and appends it to their own sequence. Initially, both players\' sequences (S1 and S2) are empty. At the end of the game, the total score is calculated as follows: - Player 1 gets a score of +1 for each \'A\' in S1 and -1 for each \'B\'. - Player 2 gets a score of +1 for each \'A\' in S2 and -1 for each \'B\'. Your task is to find the sequence of moves that maximizes the total score, which is the sum of both players\' scores. Each player must make exactly n moves, and the remaining characters after all moves have been made should be empty. If there are several solutions, output any of them. The first line contains an integer n (1 ≤ n ≤ 50). The second line contains a string consisting of exactly 2n characters, where each character is either \'A\' or \'B\'. Output the sequence of moves as a string of 2n characters \\"1\\" and \\"2\\" — the sequence of moves of Player 1 and Player 2, which gives the maximum possible total score. Each player must make exactly n moves. If there are several solutions, output any of them.","solution":"def maximize_total_score(n, initial_string): This function returns the sequence of moves that maximizes the total score for two players. Args: n : int : number of moves each player must make initial_string : str : the initial string of characters (\'A\' and \'B\') of length 2n Returns: str : the sequence of moves as a string of \'1\'s and \'2\'s where \'1\' represents Player 1\'s move and \'2\' represents Player 2\'s move score_comparison = [(char, 1 if char == \'A\' else -1, i) for i, char in enumerate(initial_string)] score_comparison.sort(key=lambda x: x[1], reverse=True) # sort by score then by index result = [\'\'] * (2 * n) count_1, count_2 = 0, 0 for char, score, index in score_comparison: if count_1 < n: result[index] = \'1\' count_1 += 1 else: result[index] = \'2\' count_2 += 1 return \'\'.join(result)"},{"question":"You are given an array representing the heights of trees in a park. You want to plant some new trees such that the difference in height between any two neighboring trees is as small as possible. Specifically, you will place the new trees between any two consecutive trees in the array to minimize the height difference in that spot. The array `heights` contains `n` integers (2 ≤ n ≤ 200), where `heights[i]` represents the height of the `i`-th tree. You are also given an integer `k` (1 ≤ k ≤ 100) representing the maximum number of new trees you can plant between any two consecutive trees. You need to determine the minimal possible value of the maximum height difference after optimally planting the new trees. The first line of the input contains a single integer `t` (1 ≤ t ≤ 100) — the number of test cases. Each test case consists of two lines. The first line contains the integers `n` and `k`. The second line contains the array `heights` with `n` space-separated integers. Print t lines. Each line should contain the minimal possible value of the maximum height difference for the corresponding test case. Sample Input: ``` 2 5 2 4 8 10 16 20 3 3 1 3 8 ``` Sample Output: ``` 2 2 ``` Explanation: For the first test case, by planting two trees between heights[0] = 4 and heights[1] = 8, you can achieve heights of [4, 6, 8], making the maximum difference 2. For the second test case, by planting three trees between heights[0] = 1 and heights[1] = 3, you can achieve heights of [1, 2, 3, 4, 5], then planting two trees between heights[1] = 3 and heights[2] = 8, you can achieve heights of [3, 5.67, 8], making the maximum difference roughly 2.","solution":"def minimize_max_diff(t, test_cases): results = [] for case in test_cases: n, k, heights = case max_diff = 0 for i in range(n - 1): diff = heights[i+1] - heights[i] max_diff = max(max_diff, -(-diff // (k+1))) results.append(max_diff) return results"},{"question":"You are given an empty binary tree. Your task is to perform a series of operations on the tree and report the resulting structure of the tree after each operation. The operations are defined as follows: 1. **Insert x** - Insert a node with value `x` into the binary tree. The tree should maintain the property of a binary search tree (BST). 2. **Delete x** - Remove the node with value `x` from the binary tree if it exists. The tree should maintain the property of a BST after deletion. 3. **Search x** - Check if a node with value `x` exists in the binary tree. If it does, print \\"Yes\\", otherwise print \\"No\\". 4. **Min** - Print the minimum value in the binary tree. 5. **Max** - Print the maximum value in the binary tree. 6. **Inorder** - Print the inorder traversal of the binary tree. The first line contains an integer `Q` (`1 <= Q <= 10^5`), the number of operations. Each of the next `Q` lines contains one of the operations listed above in the specified format. Print the result of each operation that requires printing (Search, Min, Max, Inorder). # Example Input ``` 7 Insert 10 Insert 5 Insert 15 Delete 10 Min Max Inorder ``` # Example Output ``` 5 15 5 15 ``` # Note - If the BST is empty and a `Min` or `Max` operation is called, print \\"Empty\\". - For `Inorder` traversal of an empty tree, print \\"Empty\\". - The tree nodes’ values are unique but can be any valid integer within typical 32-bit integer limits.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key class BST: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = TreeNode(key) else: self._insert(self.root, key) def _insert(self, root, key): if key < root.val: if root.left is None: root.left = TreeNode(key) else: self._insert(root.left, key) else: if root.right is None: root.right = TreeNode(key) else: self._insert(root.right, key) def delete(self, key): self.root = self._delete_node(self.root, key) def _delete_node(self, root, key): if root is None: return root if key < root.val: root.left = self._delete_node(root.left, key) elif key > root.val: root.right = self._delete_node(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left min_val_node = self._min_value_node(root.right) root.val = min_val_node.val root.right = self._delete_node(root.right, root.val) return root def _min_value_node(self, node): current = node while current.left is not None: current = current.left return current def search(self, key): return self._search(self.root, key) def _search(self, root, key): if root is None or root.val == key: return root is not None if key < root.val: return self._search(root.left, key) return self._search(root.right, key) def find_min(self): if self.root is None: return \\"Empty\\" min_node = self._min_value_node(self.root) return min_node.val def find_max(self): if self.root is None: return \\"Empty\\" max_node = self._max_value_node(self.root) return max_node.val def _max_value_node(self, node): current = node while current.right is not None: current = current.right return current def inorder_traversal(self): if self.root is None: return \\"Empty\\" result = [] self._inorder(self.root, result) return \\" \\".join(map(str, result)) def _inorder(self, root, result): if root: self._inorder(root.left, result) result.append(root.val) self._inorder(root.right, result) def execute_operations(operations): tree = BST() output = [] for operation in operations: if operation.startswith(\\"Insert\\"): _, x = operation.split() x = int(x) tree.insert(x) elif operation.startswith(\\"Delete\\"): _, x = operation.split() x = int(x) tree.delete(x) elif operation.startswith(\\"Search\\"): _, x = operation.split() x = int(x) if tree.search(x): output.append(\\"Yes\\") else: output.append(\\"No\\") elif operation == \\"Min\\": output.append(str(tree.find_min())) elif operation == \\"Max\\": output.append(str(tree.find_max())) elif operation == \\"Inorder\\": output.append(tree.inorder_traversal()) return output"},{"question":"Pari and Arya are playing another game today called \\"Subarray Sum Check.\\" Pari chooses a positive integer k and tells Arya. Arya has to determine if there exists a contiguous subarray within an array of n integers such that the sum of the elements in this subarray is exactly k. The first line of the input contains two integers n and k (1 ≤ n ≤ 1,000,000, 1 ≤ k ≤ 1,000,000) — the length of the array and the desired sum respectively. The second line contains n integers a1, a2, ..., an (-1,000,000 ≤ ai ≤ 1,000,000) — the elements of the array. Print \\"Yes\\" (without quotes) if there exists such a subarray, or \\"No\\" (without quotes) otherwise. For example, if the input is: ``` 5 15 1 2 3 4 5 ``` The expected output would be \\"Yes\\" because the subarray [1, 2, 3, 4, 5] sums to 15. If the input is: ``` 5 9 1 2 3 4 5 ``` The expected output would be \\"Yes\\" because the subarray [2, 3, 4] sums to 9. If the input is: ``` 5 20 1 2 3 4 5 ``` The expected output would be \\"No\\" because there is no subarray that sums to 20.","solution":"def subarray_sum_exists(n, k, arr): Determines if there exists a contiguous subarray within arr that sums to exactly k. Parameters: n (int): Length of the array k (int): Desired sum arr (list of int): The array of integers Returns: str: \\"Yes\\" if such a subarray exists, otherwise \\"No\\" current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] while current_sum > k and start <= end: current_sum -= arr[start] start += 1 if current_sum == k: return \\"Yes\\" return \\"No\\""},{"question":"You are given an array of integers and several queries. Two types of queries are provided: 1. Update the value at a specific index in the array. 2. Calculate the sum of the values within a specific subarray. You need to process these queries efficiently. The first line of the input contains two space-separated integers n and q (1 ≤ n, q ≤ 10^5). The second line contains n space-separated integers representing the array elements (1 ≤ ai ≤ 10^6 for each element ai). Each of the next q lines contains one of the following two types of queries: - Type 1: \\"1 x y\\" which means update the value at index x of the array to y (1 ≤ x ≤ n, 1 ≤ y ≤ 10^6). - Type 2: \\"2 l r\\" which means calculate the sum of the subarray from index l to index r (1 ≤ l ≤ r ≤ n). Output the result for each Type 2 query. Example: Input: 5 4 1 2 3 4 5 2 1 3 1 2 10 2 1 3 2 2 5 Output: 6 14 22","solution":"class NumArray: def __init__(self, nums): self.nums = nums self.n = len(nums) self.bit = [0] * (self.n + 1) for i in range(self.n): self.updateBIT(i + 1, nums[i]) def updateBIT(self, i, val): while i <= self.n: self.bit[i] += val i += i & -i def queryBIT(self, i): sum = 0 while i > 0: sum += self.bit[i] i -= i & -i return sum def update(self, index, val): delta = val - self.nums[index] self.nums[index] = val self.updateBIT(index + 1, delta) def sumRange(self, left, right): return self.queryBIT(right + 1) - self.queryBIT(left) def process_queries(n, nums, queries): numArray = NumArray(nums) results = [] for query in queries: type, x, y = query if type == 1: # Update query numArray.update(x - 1, y) elif type == 2: # Sum query results.append(numArray.sumRange(x - 1, y - 1)) return results"},{"question":"You are given an array of integers and a positive integer `k`. Your task is to determine the number of distinct pairs `(i, j)` where the sum of `array[i]` and `array[j]` is divisible by `k` and `i < j`. Write a function `count_divisible_pairs(arr: list, k: int) -> int` that takes an array of integers `arr` and an integer `k`, and returns the number of distinct pairs whose sum is divisible by `k`. # Input - arr: A list of integers (1 ≤ len(arr) ≤ 105, -106 ≤ arr[i] ≤ 106) - k: A positive integer (1 ≤ k ≤ 105) # Output - Return the number of distinct pairs (i, j) where the sum of `arr[i]` and `arr[j]` is divisible by `k` and `i < j`. # Example ```python arr = [1, 2, 3, 4, 5] k = 3 print(count_divisible_pairs(arr, k)) # Output: 4 ``` - Explanation: The pairs (1, 2), (1, 5), (2, 4), and (3, 3) have sums that are divisible by 3. # Note In the example, the pairs are as follows: - Pair (1, 2) → 1 + 2 = 3, which is divisible by 3. - Pair (1, 5) → 1 + 5 = 6, which is divisible by 3. - Pair (2, 4) → 2 + 4 = 6, which is divisible by 3. - Pair (3, 3) → 3 + 3 = 6, which is divisible by 3. Consider edge cases, such as when no pairs exist that satisfy the condition.","solution":"def count_divisible_pairs(arr: list, k: int) -> int: Returns the number of distinct pairs (i, j) where the sum of arr[i] and arr[j] is divisible by k and i < j. count = 0 n = len(arr) # Loop through each pair (i, j) for i in range(n): for j in range(i + 1, n): # Check if the sum is divisible by k if (arr[i] + arr[j]) % k == 0: count += 1 return count"},{"question":"You are given an array of integers a_1, a_2, dots, a_n. You need to find the maximum sum of a subsequence of this array such that no two elements of the subsequence are adjacent in the given array. For example, if the given array is [3, 2, 7, 10], the maximum sum of a subsequence is 13, which is achieved by picking the elements 3 and 10. If the given array is [3, 2, 5, 10, 7], the maximum sum of a subsequence is 15, which is achieved by picking the elements 3, 5 and 7. Write a program to find the maximum sum of a subsequence with no two adjacent elements. The first line contains an integer n (1 le n le 10^5) — the length of the array. The second line contains n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4) — the elements of the array. Print the maximum sum of a subsequence with no two adjacent elements. In the first example, the output should be 13 for the array [3, 2, 7, 10], and in the second example, the output should be 15 for the array [3, 2, 5, 10, 7].","solution":"def max_sum_no_adjacent(arr): Returns the maximum sum of a subsequence with no two adjacent elements. if not arr: return 0 incl = 0 # Sum including the previous element excl = 0 # Sum excluding the previous element for num in arr: new_excl = max(incl, excl) incl = excl + num excl = new_excl return max(incl, excl)"},{"question":"You are given a binary tree with `n` nodes, where each node contains a unique integer value. Your task is to determine if the binary tree is balanced. A binary tree is considered balanced if, for every node in the tree, the height difference between its left and right subtrees is at most 1. If the tree is balanced, print \\"BALANCED\\". Otherwise, print \\"NOT BALANCED\\". The input will be provided as follows: - The first line contains an integer `n` (`1 <= n <= 10^5`) — the number of nodes in the tree. - The next `n` lines, each containing three integers `val`, `left`, and `right`. `val` is the value of the node, and `left` and `right` are the values of the left and right children of the node, respectively. If a node does not have a left or right child, -1 is used instead. The binary tree is rooted at the first node mentioned in the input. Example: Input: ``` 5 1 2 3 2 4 -1 3 -1 5 4 -1 -1 5 -1 -1 ``` Output: ``` BALANCED ``` Explanation: The tree described by the input is: ``` 1 / 2 3 / 4 5 ``` The height of left subtree of node 1 is 2 (nodes 1 -> 2 -> 4) and the height of right subtree of node 1 is 2 (nodes 1 -> 3 -> 5), so the tree is balanced.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def is_balanced_and_height(node): Helper function to determine if a tree is balanced and to compute its height. Returns a tuple (is_balanced, height). if not node: return True, 0 left_balanced, left_height = is_balanced_and_height(node.left) right_balanced, right_height = is_balanced_and_height(node.right) current_balanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1 current_height = max(left_height, right_height) + 1 return current_balanced, current_height def build_tree(n, nodes): if n == 0: return None nodes_dict = {} for value, left, right in nodes: if value not in nodes_dict: nodes_dict[value] = TreeNode(value) if left != -1: if left not in nodes_dict: nodes_dict[left] = TreeNode(left) nodes_dict[value].left = nodes_dict[left] if right != -1: if right not in nodes_dict: nodes_dict[right] = TreeNode(right) nodes_dict[value].right = nodes_dict[right] return nodes_dict[nodes[0][0]] # Root node is the first node def check_balanced_tree(n, nodes): root = build_tree(n, nodes) is_balanced, _ = is_balanced_and_height(root) return \\"BALANCED\\" if is_balanced else \\"NOT BALANCED\\""},{"question":"You are given an unsorted array of n integers. Your task is to sort the array such that all even numbers (if any) are placed before all odd numbers (if any), while maintaining the relative order of the even and odd numbers as they appeared in the original array. For example, the array [3, 1, 2, 4] should be sorted to [2, 4, 3, 1]. The even numbers 2 and 4 appear before the odd numbers 3 and 1, maintaining their relative order. Write a code to implement this sorting scheme. # Input - The first line contains a single integer n (1 ≤ n ≤ 10^5) – the number of elements in the array. - The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 10^9) – the elements of the array. # Output Output the array after rearranging it according to the specified sorting rules. # Example Input 6 3 1 4 2 5 9 Output 4 2 3 1 5 9 Input 5 10 3 5 2 7 Output 10 2 3 5 7","solution":"def sort_array(n, arr): Sort the array such that all even numbers come before all odd numbers, while maintaining the relative order of even and odd numbers. Args: n (int): The number of elements in the array. arr (List[int]): The array of integers. Returns: List[int]: The sorted array. evens = [x for x in arr if x % 2 == 0] odds = [x for x in arr if x % 2 != 0] return evens + odds # Example usage: # n = 6 # arr = [3, 1, 4, 2, 5, 9] # print(sort_array(n, arr)) # Output should be [4, 2, 3, 1, 5, 9]"},{"question":"Sam is preparing for a competitive programming contest and wants to practice merging intervals. He has a list of intervals, and he needs to determine the minimum number of merged intervals needed to cover them all. The task is to merge all overlapping intervals and return the number of merged intervals. An interval is defined as a pair of integers [start, end], where start is less than or equal to end. Given a list of intervals, implement a function that merges all overlapping intervals and returns the number of merged intervals. Function Signature: ```python def merge_intervals(intervals: List[List[int]]) -> int: ``` # Input - `intervals`: A list of intervals, where each interval is represented as [start, end]. - `1 <= len(intervals) <= 10^4` - `-10^5 <= start <= end <= 10^5` # Output - An integer representing the number of merged intervals. # Example ```python assert merge_intervals([[1, 3], [2, 6], [8, 10], [15, 18]]) == 3 assert merge_intervals([[1, 4], [4, 5]]) == 1 assert merge_intervals([[1, 4], [0, 4]]) == 1 assert merge_intervals([[1, 4], [2, 3]]) == 1 assert merge_intervals([[1, 2], [3, 4], [5, 6], [7, 8]]) == 4 ``` # Note In the first example, Sam can merge the first two intervals [1, 3] and [2, 6] to form [1, 6], and the remaining intervals are non-overlapping. In the second example, intervals [1, 4] and [4, 5] can be merged to form [1, 5]. In the third example, intervals [1, 4] and [0, 4] can be merged to form [0, 4]. In the fourth example, intervals [1, 4] and [2, 3] can be merged to form [1, 4]. In the fifth example, there are no overlapping intervals, so the merged intervals are the same as the input intervals.","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> int: Returns the number of merged intervals. if not intervals: return 0 # Sort intervals by the start value intervals.sort(key=lambda x: x[0]) # Initialize the list of merged intervals merged_intervals = [] for interval in intervals: # If merged_intervals is empty or the current interval does not overlap with the previous if not merged_intervals or merged_intervals[-1][1] < interval[0]: merged_intervals.append(interval) else: # There is overlap, so we merge the current interval with the previous one merged_intervals[-1][1] = max(merged_intervals[-1][1], interval[1]) return len(merged_intervals)"},{"question":"You are given an undirected graph where nodes represent cities and edges represent bidirectional roads connecting these cities. Each road has an integer weight which represents the cost to travel between the two cities connected by that road. Your task is to implement a function to find the minimum cost required to travel from a given source city to a destination city. More formally, you are given a list of edges where each edge is represented as a tuple (u, v, w) meaning there is a road between city u and city v with a cost w. You are also given two integers, source and destination, representing the starting city and the ending city respectively. Your function should return the minimum cost to travel from the source city to the destination city. If there is no path between the source and destination, return -1. **Input:** - An integer n (1 ≤ n ≤ 1000) representing the number of cities. - A list of edges, where each edge is represented as a tuple of three integers (u, v, w) such that (1 ≤ u, v ≤ n and 1 ≤ w ≤ 10^6). - Two integers source and destination (1 ≤ source, destination ≤ n). **Output:** - An integer representing the minimum cost to travel from the source city to the destination city, or -1 if no path exists. **Example:** ```python def min_travel_cost(n, edges, source, destination): # Your code here # Example usage: n = 5 edges = [(1, 2, 4), (2, 3, 1), (3, 4, 5), (1, 5, 8), (5, 4, 2)] source = 1 destination = 4 print(min_travel_cost(n, edges, source, destination)) # Output: 9 ``` **Explanation:** In the example above, the minimum cost to travel from city 1 to city 4 is 9. The path is 1 -> 2 -> 3 -> 4 with a total cost of 4 + 1 + 5 = 10, but a cheaper path exists as 1 -> 5 -> 4 with a total cost of 8 + 2 = 10. Thus, the minimum cost required is 9.","solution":"import heapq from collections import defaultdict def min_travel_cost(n, edges, source, destination): Finds the minimum cost required to travel from the source city to the destination city. Parameters: n (int): Number of cities. edges (list): List of edges where each edge is represented as a tuple (u, v, w). source (int): Starting city. destination (int): Ending city. Returns: int: Minimum cost to travel from source to destination or -1 if no path exists. # Create adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm initialization min_heap = [(0, source)] visited = {} while min_heap: cost, node = heapq.heappop(min_heap) if node in visited: continue visited[node] = cost if node == destination: return cost for neighbor, weight in graph[node]: if neighbor not in visited: heapq.heappush(min_heap, (cost + weight, neighbor)) return -1"},{"question":"Implement a function that takes a list of strings and returns a new list where each string is reversed. You do not need to send the source code of a solution, just provide the resulting list where all strings are reversed. This problem does not imply partial solutions. If you answer correctly, you will get n points, where n is the number of strings in the input list. Download the input data by the link https://assets.codeforces.com/files/7g9517bzc0a819f8/reverse.zip. The first line of the input contains integer n: the number of strings. Then n lines follow, each containing one string. Submit the resulting list where each of the n strings is reversed.","solution":"def reverse_strings(string_list): Takes a list of strings and returns a new list where each string is reversed. :param string_list: List of strings to reverse :return: List of reversed strings return [string[::-1] for string in string_list]"},{"question":"A group of researchers is analyzing various algorithms to find the kth largest element in an array. You have been tasked with demonstrating your understanding by implementing an efficient algorithm for this problem. The function signature is: ```python def find_kth_largest(nums: List[int], k: int) -> int: ``` # Input - The function takes in two parameters: - `nums`: a list of integers (1 ≤ len(nums) ≤ 10^5, -10^4 ≤ nums[i] ≤ 10^4). - `k`: an integer representing the position (1-based) of the element to retrieve, where 1 ≤ k ≤ len(nums). # Output - The function should return an integer representing the kth largest element in the list. # Example ```python print(find_kth_largest([3,2,1,5,6,4], 2)) # Output: 5 print(find_kth_largest([3,2,3,1,2,4,5,5,6], 4)) # Output: 4 ``` # Note - Optimize your algorithm to handle large inputs efficiently. - Consider both time and space complexities while implementing the solution, aiming for an algorithm better than O(n log n) if possible. - You are allowed to use Python\'s standard library functions, but avoid built-in sort functions to demonstrate your understanding of the underlying algorithm. Implement the function `find_kth_largest` to pass the given test cases.","solution":"import heapq from typing import List def find_kth_largest(nums: List[int], k: int) -> int: Returns the kth largest element in the list nums. # Use a min-heap of size k to store the k largest elements. # The smallest element in this heap is the kth largest element overall. min_heap = nums[:k] heapq.heapify(min_heap) for num in nums[k:]: if num > min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, num) return min_heap[0]"},{"question":"A group of adventurers is trying to retrieve a sacred relic from an ancient temple. To reach the relic, they must navigate through a series of rooms, each of which contains a puzzle they need to solve. Each room is connected to exactly two other rooms except the starting room and the ending room. The temple can be represented as a binary tree where each node is a room and edges represent the connections between them. The root node is the starting room, and one of the leaf nodes is the room containing the sacred relic. Each room contains a guard, and each guard has been given a number indicating the difficulty level of the puzzle in that room. The adventurers want to minimize the total difficulty they face in their journey from the starting room to the room containing the relic. You are required to write a function that takes the root of the binary tree and returns the minimum sum of the difficulty levels along the path from the root to any leaf node (room containing the sacred relic). # Function Signature ```python def min_difficulty_path(root: TreeNode) -> int: pass ``` # Input - The function `min_difficulty_path` takes one parameter: - `root`: The root of the binary tree of type `TreeNode`. # Output - The function must return a single integer, which is the minimum sum of the difficulty levels from the root to any leaf node. # Example Given the binary tree: ``` 5 / 3 6 / 2 4 8 7 ``` The path with the minimum difficulty is 5 -> 6 -> 8 with a total difficulty of `5 + 6 + 8 = 19`. # Constraints - Each value in the nodes is a non-negative integer. - The binary tree has at least one node. # TreeNode Definition A tree node is defined as follows: ```python class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right ``` # Note - This problem can be approached using Depth-First Search (DFS) or Breadth-First Search (BFS). - Considers paths leading to any leaf node and computes the minimal sum of the values for those paths.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def min_difficulty_path(root: TreeNode) -> int: def dfs(node): if not node.left and not node.right: return node.val left_sum = float(\'inf\') right_sum = float(\'inf\') if node.left: left_sum = dfs(node.left) if node.right: right_sum = dfs(node.right) return node.val + min(left_sum, right_sum) if not root: return 0 return dfs(root)"},{"question":"A company needs to monitor the network traffic of an online service. Each time a user makes a request, the system logs the request time in seconds. You are given a list of request times in chronological order. The company wants to implement a feature that tracks how many requests were made during a specific time window. Write a function `requests_in_window(request_times, start_time, end_time)` that takes in a list of integers `request_times` representing the times of user requests, and two integers `start_time` and `end_time`, representing the start and end of the time window (inclusive). The function should return an integer representing the number of requests made within this time window. # Example ```python request_times = [1, 3, 5, 7, 8, 10, 12, 14] start_time = 5 end_time = 10 ``` ```python requests_in_window(request_times, start_time, end_time) ``` Output: ```plaintext 4 ``` # Constraints - All input times will be non-negative integers. - `request_times` will contain at least one time. - `request_times` will be sorted in non-decreasing order. - `start_time` and `end_time` are non-negative integers and will be within the range of `request_times`.","solution":"def requests_in_window(request_times, start_time, end_time): Returns the number of requests made within the start_time and end_time (inclusive). Parameters: request_times (list of int): List of request times in seconds. start_time (int): The start time of the window (inclusive). end_time (int): The end time of the window (inclusive). Returns: int: The number of requests made within the specified time window. count = 0 for req_time in request_times: if start_time <= req_time <= end_time: count += 1 return count"},{"question":"You are given an array of integers `arr` composed of a mix of positive and negative numbers. You need to find the maximum possible sum of a subarray with a constraint that the subarray must contain at least one positive value. If such a subarray does not exist, return the largest negative number from the array. A subarray is a contiguous part of an array. Write a function `max_positive_sum` that takes an array of integers `arr` and returns the maximum sum of a subarray containing at least one positive value. If there is no subarray with a positive number, return the maximum negative number from the array. # Input: - An array `arr` of integers where `1 <= len(arr) <= 10^5` and `-10^9 <= arr[i] <= 10^9`. # Output: - An integer which is the maximum possible sum of a subarray that contains at least one positive value or the maximum negative number if no positive value exists in the array. # Example: Example 1: ``` Input: arr = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The maximum sum of a subarray containing at least one positive value is [4,-1,2,1], which sums up to 6. Example 2: Input: arr = [-1,-2,-3,-4] Output: -1 Explanation: There are no subarrays with positive values. Hence, the largest negative number in the array is -1. ``` # Function Signature: ```python def max_positive_sum(arr: List[int]) -> int: pass ``` # Constraints: - Array `arr` may contain both positive and negative integers. - You should ensure that your solution runs efficiently for input sizes up to `100,000` integers.","solution":"from typing import List def max_positive_sum(arr: List[int]) -> int: max_negative = float(\'-inf\') has_positive = False max_ending_here = 0 max_so_far = float(\'-inf\') for num in arr: if num > 0: has_positive = True if num < 0 and num > max_negative: max_negative = num max_ending_here += num if has_positive and max_ending_here > max_so_far: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far if has_positive else max_negative"},{"question":"You are given an undirected graph consisting of `n` nodes and `m` edges. Each node has a unique value assigned to it. Some nodes in the graph are marked as special nodes. A path is defined as a sequence of edges connecting a pair of nodes. The length of a path is defined as the number of edges in it. Given two special nodes, determine the shortest path between them. If there is no path between the two nodes, return `-1`. The input consists of: - An integer n (1 ≤ n ≤ 1000) - the number of nodes. - An integer m (1 ≤ m ≤ 10000) - the number of edges. - An array of n integers where the i-th integer represents the value of the i-th node. - A list of m pairs of integers where each pair (u, v) denotes an undirected edge between the u-th and v-th node. - Two integers a and b (1 ≤ a, b ≤ n), the indices of the two special nodes. Output the length of the shortest path between nodes a and b. If they are not connected, return `-1`. Example: ``` Input: 5 6 1 2 3 4 5 1 2 1 3 2 3 2 4 3 4 4 5 1 5 Output: 3 ``` Explanation: In this example, the shortest path between nodes 1 and 5 is 1->2->4->5, which has a length of 3.","solution":"from collections import deque, defaultdict def shortest_path(n, m, values, edges, a, b): # Create an adjacency list from the edges graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # BFS to find the shortest path queue = deque([(a, 0)]) # (current_node, current_distance) visited = set() while queue: current_node, current_distance = queue.popleft() if current_node == b: return current_distance if current_node not in visited: visited.add(current_node) for neighbor in graph[current_node]: if neighbor not in visited: queue.append((neighbor, current_distance + 1)) return -1"},{"question":"Isaac is building a new application to manage his monthly income and expenses. One of the features of this application is to help Isaac identify patterns in his monthly cash flow. To do this, he needs to determine the longest subarray of monthly transactions that forms an arithmetic progression. An arithmetic progression is a sequence of numbers where the difference between consecutive terms is constant. For example, [1, 3, 5, 7] is an arithmetic progression with a common difference of 2, while [2, 4, 7, 11] is not. Given an array A of n integers representing Isaac\'s monthly transactions, help Isaac find the length of the longest subarray that is an arithmetic progression. # Input The first line of the input contains an integer n (1 leq n leq 1000) — the number of months in Isaac\'s records. The second line contains n integers A_1, A_2, ldots, A_n, where A_i represents Isaac\'s transaction in the i-th month. The numbers are separated by spaces. # Output Output a single integer — the length of the longest subarray of transactions that forms an arithmetic progression. # Example 1 Input ``` 6 3 5 7 9 10 12 ``` Output ``` 4 ``` Explanation The longest subarray that forms an arithmetic progression is [3, 5, 7, 9] with a common difference of 2. # Example 2 Input ``` 7 2 4 6 10 12 14 18 ``` Output ``` 3 ``` Explanation The longest subarray that forms an arithmetic progression is [10, 12, 14] with a common difference of 2. Other arithmetic progressions like [2, 4, 6] also exist but are not longer than 3.","solution":"def longest_arithmetic_subarray(n, A): if n == 1: return 1 longest = 2 current_length = 2 common_diff = A[1] - A[0] for i in range(2, n): if A[i] - A[i - 1] == common_diff: current_length += 1 else: common_diff = A[i] - A[i - 1] current_length = 2 longest = max(longest, current_length) return longest"},{"question":"Consider an n x m grid filled with positive integers. A subgrid is any contiguous rectangle of any size within this grid. The beauty of a subgrid is defined as the difference between the maximum and minimum values within that subgrid. You are given the grid and a series of q queries. Each query provides the coordinates of two points (x1, y1) and (x2, y2) which define the top-left and bottom-right corners of a subgrid respectively. For each query, you need to calculate the beauty of the specified subgrid. Input: - The first line contains three integers n, m, and q (1 ≤ n, m ≤ 100 and 1 ≤ q ≤ 10,000). - The next n lines each contain m integers, representing the grid. - The next q lines each contain four integers x1, y1, x2, y2 that define the coordinates of a subgrid (1 ≤ x1 ≤ x2 ≤ n and 1 ≤ y1 ≤ y2 ≤ m). Output: - For each query, output the beauty of the specified subgrid on a new line. Example: Input: 3 3 2 1 5 3 4 8 7 6 9 2 1 1 2 2 2 2 3 3 Output: 7 7 In the first query, the subgrid is: 1 5 4 8 The beauty is 8 - 1 = 7. In the second query, the subgrid is: 8 7 9 2 The beauty is 9 - 2 = 7.","solution":"def calculate_beauty_of_subgrid(n, m, q, grid, queries): def subgrid_beauty(x1, y1, x2, y2): subgrid_values = [grid[i][j] for i in range(x1 - 1, x2) for j in range(y1 - 1, y2)] return max(subgrid_values) - min(subgrid_values) results = [] for x1, y1, x2, y2 in queries: results.append(subgrid_beauty(x1, y1, x2, y2)) return results"},{"question":"Draco Malfoy is working on a potion that requires him to mix a sequence of n ingredients in a particular order. However, some ingredients are very volatile, and if they are adjacent to each other in the sequence, they will cause an explosion, ruining the potion. Draco has a list of pairs of ingredients that cannot be next to each other in the sequence. Your task is to determine if it\'s possible to arrange the given ingredients so none of the volatile pairs are adjacent. Formally, you are given an integer n (2 ≤ n ≤ 50) — the number of ingredients, and an integer m (0 ≤ m ≤ n * (n - 1) / 2) — the number of volatile pairs. Next, you are given n strings where each string represents an ingredient. The length of each string is between 1 and 20 consisting of lowercase English letters. Then, you are given m pairs of integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi) indicating that the i-th pair of ingredients are volatile and cannot be adjacent. Output \\"YES\\" (without quotes) if there exists a way to arrange the sequence of ingredients with no volatile pairs adjacent, otherwise output \\"NO\\" (without quotes). Example: Input: 4 3 abc def ghi jkl 1 2 2 3 3 4 Output: YES In this example, the sequence \\"abc ghi def jkl\\" and \\"jkl ghi def abc\\" are valid where no volatile pairs are adjacent.","solution":"from itertools import permutations def can_mix_ingredients(n, m, ingredients, volatile_pairs): Determine if it\'s possible to arrange the ingredients such that no volatile pairs are adjacent. Args: n (int): Number of ingredients. m (int): Number of volatile pairs. ingredients (list of str): List of ingredient names. volatile_pairs (list of tuple of int): List of volatile pairs (1-indexed). Returns: str: \\"YES\\" if a valid arrangement exists, \\"NO\\" otherwise. # Convert volatile pairs to be 0-indexed volatile_pairs = [(a-1, b-1) for a, b in volatile_pairs] # Generate all permutations of ingredient indices for perm in permutations(range(n)): valid = True for i in range(1, n): if (perm[i-1], perm[i]) in volatile_pairs or (perm[i], perm[i-1]) in volatile_pairs: valid = False break if valid: return \\"YES\\" return \\"NO\\""},{"question":"Given a string s, your task is to determine if it can be transformed into a palindrome by removing at most one character. A palindrome is a string that reads the same forwards and backwards. # Input - A single line containing a string s of length n (1 ≤ n ≤ 10^5). The string contains only lowercase English letters. # Output - Print \\"YES\\" if the string can be transformed into a palindrome by removing at most one character. Otherwise, print \\"NO\\". # Example Input ```plaintext abca ``` Output ```plaintext YES ``` Input ```plaintext abc ``` Output ```plaintext NO # Explanation In the first example, by removing \'b\', the string \\"aca\\" is a palindrome. In the second example, there is no way to remove a single character to make \\"abc\\" a palindrome.","solution":"def can_be_palindrome(s): def is_palindrome(subs): return subs == subs[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: one_side_palindrome = is_palindrome(s[left+1:right+1]) other_side_palindrome = is_palindrome(s[left:right]) return one_side_palindrome or other_side_palindrome left += 1 right -= 1 return True"},{"question":"In a small village, there is a well-known path that connects several houses. Each house can be represented as a vertex, and each path between two houses is represented as an edge with a given distance. The village council wants to improve the connectivity among the houses by ensuring each house can be reached from any other house using the shortest path possible. Your task is to help the council by implementing an algorithm to calculate the shortest path between any two given houses and return the distance for each query. Given n and m, where n is the number of houses and m is the number of paths. Then, m lines follow, each containing three integers u, v, and d – representing a path from house u to house v with distance d. After that, an integer q is given representing the number of queries. Followed by q pairs of integers a and b, each pair (a, b) indicates a query for the shortest distance between house a and house b. Return the shortest distance for each query. If there\'s no path between any two houses, return -1 for that query. Input: - The first line contains two integers n (1 ≤ n ≤ 500) and m (1 ≤ m ≤ 124750). - The next m lines contain three integers u, v, and d (1 ≤ u, v ≤ n and 1 ≤ d ≤ 1000) for the bidirectional path between house u and house v with distance d. - The next line contains an integer q (1 ≤ q ≤ 10000). - The next q lines contain two integers a and b (1 ≤ a, b ≤ n) for each query. Output: - For each query, print the shortest distance between house a and house b. If there is no path, print -1.","solution":"def floyd_warshall(n, edges): # Initialize the distance matrix inf = float(\'inf\') dist = [[inf] * n for _ in range(n)] # Set the distance from a house to itself to 0 for i in range(n): dist[i][i] = 0 # Add the edges to the distance matrix for u, v, d in edges: dist[u-1][v-1] = d dist[v-1][u-1] = d # Floyd-Warshall algorithm to find shortest paths between all pairs of vertices for k in range(n): for i in range(n): for j in range(n): if dist[i][j] > dist[i][k] + dist[k][j]: dist[i][j] = dist[i][k] + dist[k][j] return dist def shortest_path(n, m, edges, queries): dist = floyd_warshall(n, edges) results = [] for a, b in queries: if dist[a-1][b-1] == float(\'inf\'): results.append(-1) else: results.append(dist[a-1][b-1]) return results # Example usage: # n, m = 4, 5 # edges = [(1, 2, 5), (1, 3, 10), (2, 3, 2), (3, 4, 1), (2, 4, 9)] # queries = [(1, 4), (1, 3), (4, 1), (2, 3)] # print(shortest_path(n, m, edges, queries))"},{"question":"A renowned castle is throwing a festival, where several dragons will gather for competition. The dragons will arrive every second, and they will line up one after the other. The arrival process starts from the first second and continues until the nth second. Each dragon competes based on the length of its wingspan. The wingspan of the dragon arriving at the ith second can be given by the function W(i) = i * k, where k is a constant representing the scale factor of the wingspan growth. One of the festival activities involves selecting groups of consecutive dragons and checking if the difference between the maximum wingspan and the minimum wingspan in the group meets a certain criteria. Your task is to create a function that, given the number of seconds n dragons arrive and m queries, answers each query. Each query specifies two integers a and b (1 ≤ a ≤ b ≤ n), the start and end position of the group. The function should calculate the difference between the maximum and minimum wingspan within that group. Input: - The first line contains three integers n, m, and k (1 ≤ n ≤ 100000, 1 ≤ m ≤ 100000, 1 ≤ k ≤ 1000) - the number of seconds (and hence the number of dragons), number of queries, and the wingspan scale factor. - Each of the next m lines contains two integers ai and bi (1 ≤ ai ≤ bi ≤ n), representing the ith query that asks for the wingspan difference in the group from dragon ai to dragon bi inclusive. Output: For each query, print a single integer - the difference between the maximum and minimum wingspan within the specified range. Example: Input: ``` 5 3 2 1 3 2 5 1 5 ``` Output: ``` 4 6 8 ``` Explanation: - For the query (1, 3): The wingspans of the dragons are [2, 4, 6]. The difference between max (6) and min (2) wingspan is 4. - For the query (2, 5): The wingspans of the dragons are [4, 6, 8, 10]. The difference between max (10) and min (4) wingspan is 6. - For the query (1, 5): The wingspans of the dragons are [2, 4, 6, 8, 10]. The difference between max (10) and min (2) wingspan is 8.","solution":"def wingspan_differences(n, m, k, queries): Calculate the differences between the maximum and minimum wingspan in the given queries. :param n: int - The number of seconds (and hence the number of dragons) :param m: int - The number of queries :param k: int - The wingspan scale factor :param queries: List of tuples - Each tuple contains two integers a and b representing the query :return: List of integers - Differences between the maximum and minimum wingspans for each query results = [] for a, b in queries: min_wingspan = a * k max_wingspan = b * k difference = max_wingspan - min_wingspan results.append(difference) return results"},{"question":"Alice loves reading books, and she has a large collection of books of varying lengths. She wants to read a particular set of books during her vacation. However, she can only carry a limited number of books in her bag due to weight restrictions. Given a list of books with their respective weights and values (such as the joy she derives from reading them), Alice wants to maximize the total joy she gets from reading the books she can carry, without exceeding the weight capacity of her bag. You need to help Alice figure out the optimal selection of books that she should carry in order to maximize her joy. The first line contains two integers n and w — the number of books and the maximum weight capacity of the bag respectively (1 ≤ n ≤ 1000, 1 ≤ w ≤ 10000). The next n lines describe Alice’s books. Each of these lines contains two integers wi and vi — the weight and joy value of the i-th book respectively (1 ≤ wi ≤ 10000, 1 ≤ vi ≤ 10000). Print a single integer — the maximum total joy that Alice can achieve by optimally selecting a subset of books, such that their total weight does not exceed the given weight limit. # Example Input: ``` 4 10 6 13 4 8 3 6 5 7 ``` Output: ``` 21 ``` In this example, Alice can carry the 1st and 3rd books, or the 2nd and 3rd books, each providing a total joy value of 21.","solution":"def knapsack(n, W, items): dp = [0] * (W + 1) for i in range(n): weight, joy = items[i] for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + joy) return dp[W] # Example usage n = 4 W = 10 items = [(6, 13), (4, 8), (3, 6), (5, 7)] print(knapsack(n, W, items)) # Output: 21"},{"question":"Given an array of integers, find the number of triplets (i, j, k) such that i < j < k and the sum of the elements at these indices is divisible by a given integer m. # Input - The first line contains two integers n and m (1 ≤ n ≤ 2 * 10^5, 1 ≤ m ≤ 1000) — the length of the array and the integer divisor. - The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the elements of the array. # Output Print a single integer — the number of such triplets where the sum of the three elements is divisible by m. # Sample Input ``` 5 3 1 2 3 4 5 ``` # Sample Output ``` 4 ``` # Explanation The valid triplets are: - (1, 2, 3), with sum 1 + 2 + 3 = 6 - (1, 3, 5), with sum 1 + 3 + 5 = 9 - (2, 3, 4), with sum 2 + 3 + 4 = 9 - (2, 4, 5), with sum 2 + 4 + 5 = 11","solution":"def count_divisible_triplets(n, m, array): count = 0 for i in range(n - 2): for j in range(i + 1, n - 1): for k in range(j + 1, n): if (array[i] + array[j] + array[k]) % m == 0: count += 1 return count"},{"question":"In a distant land, there are magical animals that can talk. Each magical animal has its own unique frequency of chirping. You have requested the help of these animals to alert you when something unusual happens. Each magical animal repeatedly chirps based on its unique frequency. You suspect that something unusual happens when at least one of the magical animals chirps at the same moment. Given a list of the chirping frequencies of these animals, find the minimum time that will elapse before at least one of the magical animals chirps at the same time again. # Input - The first line contains a single integer, n (1 le n le 1000) — the number of magical animals. - The second line contains n integers f_1, f_2, ..., f_n (1 le f_i le 10^4) — the chirping frequencies of the animals in seconds. # Output - Output a single integer — the minimum time that will elapse before at least one of the magical animals chirps at the same time again. # Example Example 1: ``` Input: 3 2 3 5 Output: 30 ``` Example 2: ``` Input: 4 1 1 1 1 Output: 1 ``` # Explanation For the first example, animal 1 chirps every 2 seconds, animal 2 chirps every 3 seconds, and animal 3 chirps every 5 seconds. The minimum time for all animals to chirp at the same moment is the least common multiple (LCM) of these frequencies, which is 30 seconds. For the second example, since all animals have a chirping frequency of 1 second, they all chirp simultaneously every second. # Note Make sure to efficiently compute the least common multiple (LCM) as the product of the frequencies can be very large.","solution":"from math import gcd from functools import reduce def lcm(a, b): Compute the Least Common Multiple of two numbers a and b. return a * b // gcd(a, b) def min_time_elapse(frequencies): Given a list of frequencies of magical animals, this function returns the minimum time that will elapse before at least one of the magical animals chirps at the same time again. return reduce(lcm, frequencies)"},{"question":"Given a string `s`, your task is to write a function that expands it in such a way that each character in the string is duplicated consecutively based on its 1-based index position in the string. For example, if the input string is `\\"abc\\"`, the output should be `\\"abbccc\\"`, since: - The first character `\'a\'` is not duplicated. - The second character `\'b\'` is duplicated once. - The third character `\'c\'` is duplicated twice. Write a function `expand_string` with the following signature: ```python def expand_string(s: str) -> str: ``` # Input - `s` (String): A non-empty string containing only lowercase alphabets (\'a\' to \'z\'). The length of `s` can be up to 100 characters. # Output - The function should return a new string where each character is duplicated based on its 1-based index position. # Example ```python print(expand_string(\\"abc\\")) # Output: \\"abbccc\\" print(expand_string(\\"abcd\\")) # Output: \\"abbcccdddd\\" ``` # Constraints - The input string will only contain lowercase alphabets. - The function should handle efficiently up to the maximum input length. Avoid using operations that have high computational complexity for large strings.","solution":"def expand_string(s: str) -> str: Returns a new string where each character in the input string s is duplicated consecutively based on its 1-based index position in the string. result = [] for idx, char in enumerate(s): result.append(char * (idx + 1)) return \'\'.join(result)"},{"question":"A cryptographer is working on a new type of secure communication protocol. For this, an important step is to count the number of distinct ways in which a certain security key can be generated. The security key is represented as a sequence of length n, where each element is either 0 or 1. However, there is a constraint: the key must not contain two consecutive elements that are both 1. This means that any pair of consecutive elements in the key cannot both be 1. Given a positive integer n, calculate the number of distinct valid security keys of length n. The first line contains a single integer t (1 leq t leq 10^5) - the number of test cases. For each of the next t lines, there is a single integer n (1 leq n leq 10^9). For each test case, output the number of distinct valid security keys of length n, modulo 10^9 + 7. **Example**: ``` Input: 3 2 3 4 Output: 3 5 8 ``` **Explanation**: - For n = 2: The valid keys are: 00, 01, 10. - For n = 3: The valid keys are: 000, 001, 010, 100, 101. - For n = 4: The valid keys are: 0000, 0001, 0010, 0100, 0101, 1000, 1001, 1010. Note that the constraints ensure that there are no consecutive elements both being 1.","solution":"MOD = 10**9 + 7 def calculate_ways(n): if n == 1: return 2 if n == 2: return 3 f_prev2, f_prev1 = 2, 3 # Base cases f(1)=2, f(2)=3 for _ in range(3, n + 1): f_current = (f_prev1 + f_prev2) % MOD f_prev2, f_prev1 = f_prev1, f_current return f_current def number_of_distinct_valid_keys(test_cases): results = [] for n in test_cases: results.append(calculate_ways(n)) return results"},{"question":"You are given a circular track with n racers positioned at different points. Each racer has a constant speed, and they all start moving at the same time. Your task is to determine whether there will be any two or more racers crossing the finish line at exactly the same time after any integer number of laps. The input consists of an integer n (2 ≤ n ≤ 100,000) representing the number of racers. After that, n lines follow, each containing two integers, pi and si (1 ≤ pi ≤ 1,000,000, 1 ≤ si ≤ 1,000,000), where pi indicates the initial position of the i-th racer on the circular track and si indicates the constant speed of the i-th racer. Output \\"Yes\\" if there will be at least one pair of racers crossing the finish line at the same time, otherwise, output \\"No\\". In sample 1, both racers cross the finish line at the same time after 10 seconds (both have completed 2 full laps). In sample 2, the two racers never cross the finish line at the same time.","solution":"def will_racers_cross_simultaneously(n, racers): Determine if any two or more racers cross the finish line at exactly the same time. Parameters: n (int): The number of racers. racers (List[Tuple[int, int]]): A list of tuples where each tuple contains initial position and speed of a racer. Returns: str: \\"Yes\\" if any two racers cross the finish line at the same time, otherwise \\"No\\". import math # Adjust all positions relative to 0 to get the same effect as crossing the finish line at the same time times = set() for p, s in racers: finish_time = p / s time_mod = finish_time % 1 # We only care about fractional parts to detect simultaneous finish line crossings if time_mod in times: return \\"Yes\\" times.add(time_mod) return \\"No\\""},{"question":"In a distant future, the inhabitants of planet Xpeia have entirely digitized their society. To optimize their logistics, the planet’s engineers have devised a planning system based on sequences. A sequence is defined as a string of integers. The system must frequently check for specific properties of these sequences. You are given a sequence of integers S of length n, and q queries. Each query is one of two types: 1. Update the element at index i in the sequence S to a new value v (1-based index). 2. Determine the length of the longest increasing subsequence (LIS) in the sequence S. An increasing subsequence is a subsequence of the sequence S such that the numbers in this subsequence are in strictly increasing order. Note that the elements of the subsequence do not need to be contiguous in the original sequence S. To solve this problem, implement a class `SequenceManager` which supports the following methods: 1. `__init__(self, S: List[int]) -> None`: Initializes the object with the sequence S. 2. `update(self, i: int, v: int) -> None`: Updates the sequence by setting the element at index i to the new value v. 3. `query_lis(self) -> int`: Returns the length of the longest increasing subsequence in the current sequence. # Input - The first line contains two integers, n and q (1 ≤ n, q ≤ 100000), representing the length of the sequence and the number of queries respectively. - The second line contains n integers, where the i-th integer is S[i], denoting the initial sequence (1 ≤ S[i] ≤ 10^9). - The following q lines describe the queries. Each query is either: - `1 i v` (1 ≤ i ≤ n, 1 ≤ v ≤ 10^9) meaning update S[i] to v, or - `2` meaning the system should return the length of the longest increasing subsequence in the current sequence. # Output - For each type 2 query, print the answer on a new line. # Example Input ``` 5 3 3 1 6 2 5 2 1 3 4 2 ``` Output ``` 3 3 ``` # Explanation - Initially, the longest increasing subsequence in the sequence [3, 1, 6, 2, 5] is [1, 2, 5] or [1, 3, 6] which has a length of 3. - After the update operation `1 3 4`, the sequence becomes [3, 1, 4, 2, 5]. The longest increasing subsequence remains of length 3, which could be [1, 2, 4] or [1, 3, 4]. You need to implement an efficient algorithm to manage frequent updates and LIS computation to handle the constraints effectively.","solution":"from bisect import bisect_left from typing import List class SequenceManager: def __init__(self, S: List[int]) -> None: self.S = S def update(self, i: int, v: int) -> None: self.S[i - 1] = v def query_lis(self) -> int: return self._length_of_lis(self.S) def _length_of_lis(self, S: List[int]) -> int: if not S: return 0 lis = [] for num in S: pos = bisect_left(lis, num) if pos < len(lis): lis[pos] = num else: lis.append(num) return len(lis)"},{"question":"Given an integer array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array. The first input line contains an integer T - the number of test cases. Each of the next T lines describes an individual test case with the first integer n, the size of the array, followed by n integers which make up the array `nums`. For each test case, output the missing number on a new line. Constraints: - `1 <= T <= 1000` - `0 <= n <= 105` - Each element of the array `nums` is a distinct integer in the range `[0, n]`. Example: Input: 3 3 3 0 1 4 0 1 2 4 2 0 1 Output: 2 3 2 Your solution should be efficient enough to handle the upper constraints comfortably.","solution":"def find_missing_number(nums, n): Given a list of n distinct numbers in the range [0, n], find the missing number. expected_sum = n * (n + 1) // 2 actual_sum = sum(nums) return expected_sum - actual_sum def process_test_cases(T, test_cases): Process multiple test cases to find the missing number for each. results = [] for i in range(T): n = test_cases[i][0] nums = test_cases[i][1:] result = find_missing_number(nums, n) results.append(result) return results"},{"question":"You are given three sequences of integers a, b, and c, each of length n. Your task is to determine if it is possible to rearrange the elements of sequence b and sequence c such that the rearranged sequence b, when added element-wise to the rearranged sequence c, produces sequence a. Formally, determine if there exist permutations b’ and c’ of sequences b and c respectively, such that for all i (1 ≤ i ≤ n), a[i] = b\'[i] + c\'[i]. The first line of the input contains an integer n (1 ≤ n ≤ 100) — the length of the sequences. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10000) — the elements of the sequence a. The third line contains n space-separated integers b1, b2, ..., bn (1 ≤ bi ≤ 10000) — the elements of the sequence b. The fourth line contains n space-separated integers c1, c2, ..., cn (1 ≤ ci ≤ 10000) — the elements of the sequence c. Output \\"YES\\" (without the quotes) if such permutations exist, otherwise \\"NO\\" (without the quotes). # Example Input 4 7 9 5 13 3 2 2 4 4 7 3 9 Output YES Explanation One way to achieve the desired sequence a by rearranging b and c is: Rearrange b as [2, 3, 2, 4] and c as [5, 6, 3, 9]: 2+5=7, 3+6=9, 2+3=5, 4+9=13.","solution":"from itertools import permutations def is_rearrangement_possible(n, a, b, c): for perm_b in permutations(b): for perm_c in permutations(c): if all(perm_b[i] + perm_c[i] == a[i] for i in range(n)): return \\"YES\\" return \\"NO\\" # Example usage: n = 4 a = [7, 9, 5, 13] b = [3, 2, 2, 4] c = [4, 7, 3, 9] print(is_rearrangement_possible(n, a, b, c)) # Output should be \\"YES\\""},{"question":"A cargo company wants to optimize the loading of containers onto a ship. The ship has a maximum weight capacity and you are given a list of containers, each with a specific weight and value. The goal is to maximize the total value of the containers loaded onto the ship without exceeding the weight capacity. You need to implement a function that determines the maximum value that can be achieved given the weight capacity of the ship and the list of containers. Each container can either be fully loaded onto the ship or not loaded at all (i.e., it cannot be split). Your task is to write a function `max_container_value(capacity, containers)` that takes an integer `capacity` representing the maximum weight capacity of the ship and a list `containers` where each element is a tuple `(weight, value)` representing the weight and value of a container. # Input: - `capacity` (1 ≤ capacity ≤ 10^5): an integer representing the maximum weight capacity of the ship. - `containers` (1 ≤ len(containers) ≤ 10^3): a list where each element is a tuple `(weight, value)` with `1 ≤ weight, value ≤ 10^4`. # Output: - Returns an integer representing the maximum value that can be achieved without exceeding the weight capacity of the ship. # Example: ```python def max_container_value(capacity, containers): # Your code here # Example case capacity = 50 containers = [(10, 60), (20, 100), (30, 120)] print(max_container_value(capacity, containers)) # Output: 220 ``` In this example, the optimal way to load the containers to achieve maximum value without exceeding the capacity is to load the containers with weights 20 and 30, which gives a total value of 220.","solution":"def max_container_value(capacity, containers): n = len(containers) dp = [[0] * (capacity + 1) for _ in range(n + 1)] for i in range(1, n + 1): weight, value = containers[i - 1] for w in range(capacity + 1): if weight <= w: dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weight] + value) else: dp[i][w] = dp[i - 1][w] return dp[n][capacity]"},{"question":"Given an array of integers, write a function that rearranges the array into its lexicographically next permutation of numbers. If such an arrangement is not possible, it must rearrange it to the lowest possible order (i.e., sorted in ascending order). The replacement must be in place and use only constant extra memory. **Input:** - The first line contains an integer n (1 leq n leq 1000) which denotes the number of elements in the array. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9). **Output:** - Output the next permutation of numbers in a single line. **Example:** **Input 1:** ``` 6 1 2 3 6 5 4 ``` **Output 1:** ``` 1 2 4 3 5 6 ``` **Input 2:** ``` 4 3 2 1 0 ``` **Output 2:** ``` 0 1 2 3 ``` *Hint:* Consider the properties of permutations and the order in which elements need to be swapped to achieve the lexicographically next sequence.","solution":"def next_permutation(arr): Rearranges the array into the lexicographically next permutation. If such arrangement is not possible, it rearranges it to the lowest possible order. n = len(arr) if n <= 1: return arr # Step 1: Find the largest index k such that arr[k] < arr[k + 1] k = n - 2 while k >= 0 and arr[k] >= arr[k + 1]: k -= 1 if k < 0: # If no such k exists, reverse the entire array. arr.reverse() else: # Step 2: Find the largest index l greater than k such that arr[k] < arr[l] l = n - 1 while arr[l] <= arr[k]: l -= 1 # Step 3: Swap arr[k] with arr[l] arr[k], arr[l] = arr[l], arr[k] # Step 4: Reverse the sequence from arr[k + 1] to the end arr[k + 1:] = reversed(arr[k + 1:]) return arr"},{"question":"You are given a string s consisting of lowercase Latin letters. You want to perform some operations to make s a palindrome. In one operation, you can insert any single character at any position in the string (including at the beginning or the end). Find the minimum number of operations required to make the string s a palindrome. The first line contains one integer n (1 le n le 10^5) — the length of the string s. The second line contains the string s of length n, consisting of lowercase Latin letters. Output the minimum number of operations required to make the string a palindrome. In the first example, the minimum number of operations is 3. In the second example, the minimum number of operations is 0.","solution":"def minimum_insertions_to_palindrome(s): Calculate the minimum number of insertions needed to make the string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1]"},{"question":"You are given an array `arr` of n integers, indexed from 0 to n-1. There are q queries each described by two integers `l` and `r`, denoting the start and end indices (inclusive) of a subarray. For each query, you must find the minimum value in the subarray from index `l` to index `r`. Additionally, after processing all the queries, you are required to process `u` update operations. Each update operation is described by two integers `i` and `val`, where `i` is the index in the array and `val` is the new value to be set at index `i`. After all updates are processed, you must be able to handle new queries with the updated array. Write a program that processes the queries and updates in the order specified and outputs the results of all queries. Input format: 1. The first line contains an integer n (1 ≤ n ≤ 10^5) - the size of the initial array. 2. The second line contains n integers – `arr[i]` (0 ≤ arr[i] ≤ 10^9). 3. The third line contains an integer q (1 ≤ q ≤ 10^5) - the number of queries. 4. The next q lines each contain two integers l and r (0 ≤ l ≤ r < n) – the start and end indices of the subarray for that query. 5. The next line contains an integer u (0 ≤ u ≤ 10^5) – the number of update operations. 6. The next u lines each contain two integers i and val (0 ≤ i < n, 0 ≤ val ≤ 10^9) – the index to be updated and the new value to set at that index. Output format: - For each query, output the minimum value in the specified subarray on a new line. Example: Input: ``` 6 1 3 2 7 9 11 3 1 4 0 5 2 3 2 3 5 1 8 2 0 3 2 4 ``` Output: ``` 2 1 2 1 2 ``` Explanation: 1. The initial array is `[1, 3, 2, 7, 9, 11]`. 2. Queries: - For the subarray from index 1 to 4, the minimum value is `2`. - For the subarray from index 0 to 5, the minimum value is `1`. - For the subarray from index 2 to 3, the minimum value is `2`. 3. Updates: - Updating index 3 to value 5 results in array `[1, 3, 2, 5, 9, 11]`. - Updating index 1 to value 8 results in array `[1, 8, 2, 5, 9, 11]`. 4. For the updated array, handling new queries: - For the subarray from index 0 to 3, the minimum value is `1`. - For the subarray from index 2 to 4, the minimum value is `2`.","solution":"import sys class SegmentTree: def __init__(self, data): self.n = len(data) self.inf = sys.maxsize self.tree = [0] * (2 * self.n) self._build(data) def _build(self, data): # Build the tree for i in range(self.n): self.tree[self.n + i] = data[i] for i in range(self.n - 1, 0, -1): self.tree[i] = min(self.tree[i << 1], self.tree[i << 1 | 1]) def update(self, pos, value): # Update one leaf node pos += self.n self.tree[pos] = value while pos > 1: pos >>= 1 self.tree[pos] = min(self.tree[pos << 1], self.tree[pos << 1 | 1]) def range_min(self, left, right): # Min in range [left, right) left += self.n right += self.n res = self.inf while left < right: if left & 1: res = min(res, self.tree[left]) left += 1 if right & 1: right -= 1 res = min(res, self.tree[right]) left >>= 1 right >>= 1 return res def process_queries_and_updates(n, arr, queries, updates, new_queries): segtree = SegmentTree(arr) results = [] for l, r in queries: results.append(segtree.range_min(l, r + 1)) for i, val in updates: segtree.update(i, val) for l, r in new_queries: results.append(segtree.range_min(l, r + 1)) return results"},{"question":"A company has a warehouse consisting of different types of products stored in various racks. Each rack has a certain capacity and contains a specific type of product. The warehouse manager needs a program that can determine the maximum number of a specific product type that can be collected by choosing a single rack. Your task is to write a function that, given a list of racks, each containing a type and its capacity, and a string representing the desired product type, will return the maximum capacity of that product type available in any single rack. # Function Signature ```python def max_capacity_product(racks: List[Tuple[str, int]], product_type: str) -> int: ``` # Input - `racks`: A list of tuples, where each tuple contains a string (product type) and an integer (capacity). Each element of the list represents a rack, i.e., `racks[i] = (type_i, capacity_i)`. - `product_type`: A string representing the product type to be searched in the racks. # Output - Return an integer representing the maximum capacity of the given product type in any single rack. If the product type is not found in any rack, return 0. # Example ```python racks = [(\\"apples\\", 10), (\\"bananas\\", 20), (\\"apples\\", 15), (\\"oranges\\", 5)] product_type = \\"apples\\" print(max_capacity_product(racks, product_type)) # Output: 15 racks = [(\\"apples\\", 10), (\\"bananas\\", 20), (\\"apples\\", 15), (\\"oranges\\", 5)] product_type = \\"bananas\\" print(max_capacity_product(racks, product_type)) # Output: 20 racks = [(\\"apples\\", 10), (\\"bananas\\", 20), (\\"apples\\", 15), (\\"oranges\\", 5)] product_type = \\"grapes\\" print(max_capacity_product(racks, product_type)) # Output: 0 ``` # Constraints - Length of `racks` will be between 1 and 1000. - Each product type string will be a non-empty string with length up to 100. - Capacity will be a non-negative integer between 0 and 10^5.","solution":"from typing import List, Tuple def max_capacity_product(racks: List[Tuple[str, int]], product_type: str) -> int: max_capacity = 0 for rack_type, capacity in racks: if rack_type == product_type: max_capacity = max(max_capacity, capacity) return max_capacity"},{"question":"Chef is preparing for a big cooking competition. He wants to create the perfect dish using exactly n ingredients. Chef has a set of m different ingredients to choose from, and each ingredient can only be used once. Help Chef determine the number of unique ways he can select exactly n ingredients out of the available m ingredients, keeping in mind that the order in which the ingredients are chosen does not matter. The first line of the input contains an integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains two integers n and m (0 leq n leq m leq 20) — representing the number of ingredients Chef wants to use and the number of ingredients available, respectively. For each test case, print a single integer — the number of unique ways Chef can choose his ingredients. # Example: Input: ``` 3 2 5 3 4 1 1 ``` Output: ``` 10 4 1 ``` # Explanation: In the first test case, Chef wants to choose 2 ingredients out of 5 available. The number of unique ways to do this can be calculated using combinations (5 choose 2), which yields 10. In the second test case, Chef needs 3 ingredients from 4 available, yielding 4 unique ways (4 choose 3 = 4). In the third test case, Chef has only one ingredient to choose from and needs to use exactly that one, so there is only one way to choose.","solution":"from math import comb def unique_ways_to_select_ingredients(t, test_cases): Determines the number of unique ways to select exactly n ingredients out of m available. Args: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains two integers, n and m. Returns: list of int: List of results for each test case. results = [] for n, m in test_cases: if n == 0 or n == m: results.append(1) else: results.append(comb(m, n)) return results"},{"question":"A robotics company is developing a new pathfinding algorithm for their warehouse robots to ensure they can pick orders more efficiently. The warehouse is represented as an m x n grid where each cell can either be empty (represented by 0) or an obstacle (represented by 1). The robot starts at the top-left corner of the grid (0, 0) and aims to reach the bottom-right corner (m-1, n-1). The robot can only move right or down at any point in time. Write a function `uniquePathsWithObstacles(obstacleGrid)` that takes a list of lists, `obstacleGrid`, representing the grid layout and returns the number of unique paths that the robot can take to reach the bottom-right corner. If there is no possible path, return 0. # Input: - `obstacleGrid`, a list of lists of integers where 1 ≤ len(obstacleGrid), len(obstacleGrid[0]) ≤ 100 and each integer is either 0 or 1. # Output: - An integer representing the number of unique paths from the top-left to the bottom-right corner. # Example 1: ```python Input: obstacleGrid = [ [0,0,0], [0,1,0], [0,0,0] ] Output: 2 ``` Explanation: There are two possible paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right # Example 2: ```python Input: obstacleGrid = [ [0,1], [0,0] ] Output: 1 ``` Explanation: The only possible path is Right -> Down. # Constraints: - The starting cell and the ending cell are guaranteed to be 0. - The robot cannot move through cells containing obstacles (1).","solution":"def uniquePathsWithObstacles(obstacleGrid): Function to calculate the number of unique paths from the top-left corner to the bottom-right corner of a grid with obstacles. :param obstacleGrid: List[List[int]], 2D grid where each cell is either empty (0) or an obstacle (1). :return: int, number of unique paths from the top-left to the bottom-right corner. if not obstacleGrid or obstacleGrid[0][0] == 1: return 0 m, n = len(obstacleGrid), len(obstacleGrid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Start point # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j-1] if obstacleGrid[0][j] == 0 else 0 # Fill the first column for i in range(1, m): dp[i][0] = dp[i-1][0] if obstacleGrid[i][0] == 0 else 0 # Fill the rest of the grid for i in range(1, m): for j in range(1, n): if obstacleGrid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[m-1][n-1]"},{"question":"Given a list of unique integers, find all possible unique pairs of integers that sum up to a given target value. Each pair should be sorted in ascending order, and the pairs themselves should be sorted in lexicographical order. Return the list of such pairs. If no such pairs exist, return an empty list. # Input - A single integer `n` (2 ≤ n ≤ 100), the number of integers in the list. - A list of `n` unique integers `a1, a2, ..., an` (-10^5 ≤ ai ≤ 10^5). - A single integer `t` (-2 * 10^5 ≤ t ≤ 2 * 10^5), the target value. # Output - A list of unique pairs of integers which sum up to `t` in lexicographical order. # Example Input ``` 5 1 2 3 4 5 5 ``` Output ``` [(1, 4), (2, 3)] ``` Input ``` 4 -1 -2 3 4 2 ``` Output ``` [(-2, 4), (-1, 3)] ``` Input ``` 3 1 2 3 7 ``` Output ``` [] ``` # Explanation In the first example, the pairs (1, 4) and (2, 3) are the only pairs that sum up to 5. They are already sorted in lexicographical order. In the second example, the pairs (-2, 4) and (-1, 3) sum up to 2, and they are sorted in lexicographical order. In the third example, no pairs sum up to 7, so the output is an empty list.","solution":"def find_pairs(n, numbers, t): Finds all unique pairs of integers from the list `numbers` that add up to `t`. Parameters: n (int): The number of integers in the list. numbers (list of int): The list of unique integers. t (int): The target sum. Returns: list of tuple: A list of unique pairs (tuples) which sum up to `t` in lexicographical order. pairs = set() num_set = set(numbers) for num in numbers: complement = t - num if complement in num_set: pair = tuple(sorted((num, complement))) pairs.add(pair) result = sorted(list(pairs)) return result"},{"question":"Nadia is working on a project involving robotics and needs to control the movement of a robot on a 2D plane. The robot starts at the origin (0, 0) and moves along a series of commands. Each command tells the robot to move in one of the four cardinal directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Nadia wants to determine the robot\'s final position after executing all the commands. Your task is to implement a function that takes a string of commands and returns the final coordinates of the robot. Here\'s an example to help you understand how the robot moves: - The command string \\"UUDDLRLR\\" will move the robot as follows: - \'U\' moves the robot from (0, 0) to (0, 1) - Another \'U\' moves the robot from (0, 1) to (0, 2) - \'D\' moves the robot from (0, 2) to (0, 1) - Another \'D\' moves the robot from (0, 1) to (0, 0) - \'L\' moves the robot from (0, 0) to (-1, 0) - \'R\' moves the robot from (-1, 0) to (0, 0) - \'L\' moves the robot from (0, 0) to (-1, 0) - \'R\' moves the robot from (-1, 0) to (0, 0) The robot ends up back at the origin (0, 0). # Input - A single line containing a string `s` of length `1 ≤ |s| ≤ 10^5`, where each character in `s` is one of \'U\', \'D\', \'L\', or \'R\'. # Output - A single line with two integers separated by a space, the final coordinates of the robot. # Example Input ``` UUDDLRLR ``` Output ``` 0 0 ``` # Constraints - The robot will only execute valid commands (\'U\', \'D\', \'L\', \'R\'). - The input string will only contain uppercase letters.","solution":"def final_position(commands): Returns the final coordinates of the robot after executing the given commands. Args: commands (str): A string containing \'U\', \'D\', \'L\', \'R\' commands. Returns: tuple: A tuple (x, y) representing the final coordinates. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"You are helping organize a coding competition, and one of the tasks is to divide participants into teams. There are exactly `n` participants, each with a distinct skill level represented by an integer. The goal is to form `k` balanced teams. A team is considered balanced if the maximum skill level and the minimum skill level of the participants in the team differ by no more than `d`. Given the number of participants `n`, the number of teams `k`, the maximum allowed difference in skill levels `d`, and the skill levels of the participants, determine whether it is possible to divide the participants into `k` balanced teams. The first line of input contains three integers `n`, `k`, and `d` (1 ≤ k ≤ n ≤ 10^5, 0 ≤ d ≤ 10^9). The second line contains `n` integers representing the skill levels of the participants (1 ≤ skill levels ≤ 10^9). Output \\"YES\\" if it is possible to divide the participants into `k` balanced teams. Otherwise, output \\"NO\\". Ensure that your solution is efficient and runs within the given constraints. Example 1: ``` Input: 8 4 3 1 3 5 7 9 11 13 15 Output: YES ``` Example 2: ``` Input: 5 2 5 1 10 15 20 25 Output: NO ``` Example 3: ``` Input: 4 2 2 4 6 7 5 Output: YES ``` Explanation: In the first example, you can divide the participants into teams with skill levels [1, 3], [5, 7], [9, 11], [13, 15], each of which has a difference of no more than 3. In the second example, there is no way to divide the participants into 2 teams such that the maximum difference within each team is 5. In the third example, you can divide the participants into teams with skill levels [4, 5] and [6, 7], each of which has a difference of no more than 2.","solution":"def can_form_balanced_teams(n, k, d, skill_levels): Determines if it\'s possible to divide participants into k balanced teams where the difference between max and min skill levels in a team is at most d. :param n: Number of participants :param k: Number of teams :param d: Maximum allowed difference in skill levels within a team :param skill_levels: List of integers representing skill levels :return: \\"YES\\" if possible to divide into balanced teams, \\"NO\\" otherwise # Sort participant skill levels skill_levels.sort() # Consider a window of size ceiling(n/k) to check if we can find any set of k windows with difference <= d from math import ceil size = ceil(n / k) for i in range(n - size + 1): if skill_levels[i + size - 1] - skill_levels[i] <= d: k -= 1 if k == 0: return \\"YES\\" return \\"NO\\""},{"question":"Arya is working at the House of Black and White and is tasked with organizing schedules for a group of faceless interns working on various tasks. The interns work on multiple tasks over several days. Each task has a specific duration and can only start when the previous task ends. Each day, Arya can organize only one task for an intern, meaning an intern can work on at most one task per day. If a task duration is `d` days, it means the intern will be occupied for `d` consecutive days from the task start date. Arya needs to complete all the tasks by the end of the given `m` days. Your task is to determine if it\'s possible for Arya to organize all tasks in such a way that all tasks will be completed within `m` days. If possible, print \\"YES\\", otherwise print \\"NO\\". The first line contains two integers `t` and `m` (1 ≤ t ≤ 100, 1 ≤ m ≤ 10000), where `t` is the number of tasks and `m` is the maximum number of days available. The second line contains `t` integers, each representing the duration of a task (1 ≤ duration ≤ 100). For example: Input: ``` 3 10 3 2 4 ``` Output: ``` YES ``` Input: ``` 4 7 2 3 2 1 ``` Output: ``` NO ``` In the first example, it is possible to schedule all tasks within 10 days. In the second example, it is not possible to complete all tasks within 7 days.","solution":"def can_complete_tasks(t, m, durations): Determines if all tasks can be completed within the given number of days. :param t: Number of tasks :param m: Maximum number of days available :param durations: List of task durations :return: \\"YES\\" if all tasks can be completed within m days, otherwise \\"NO\\" total_duration = sum(durations) return \\"YES\\" if total_duration <= m else \\"NO\\" # Example usage: t = 3 m = 10 durations = [3, 2, 4] print(can_complete_tasks(t, m, durations)) # Output: YES"},{"question":"Vasily the Programmer is planning a sightseeing trip in a beautiful city full of attractions numbered from 1 to n. He has a list of attractions he wants to visit and their corresponding enjoyment values. Vasily knows that his enjoyment maximizes if he visits these attractions in a non-decreasing order of their numbers. However, he wants to skip some attractions to maximize his total enjoyment value. Help Vasily to find the maximum total enjoyment value he can get by visiting a subsequence of the attractions in a non-decreasing order. The first line of the input contains integer n (1 ≤ n ≤ 1,000) — the number of attractions in the city. The next line contains n integers e1, e2, ..., en (0 ≤ ei ≤ 1,000) — the enjoyment values of the attractions, in the order of their numbers. Print a single integer — the maximum total enjoyment value Vasily can achieve by visiting a suitable subsequence of attractions. For example: Input: 5 1 2 9 2 1 Output: 12 In this example, Vasily can visit attractions 1, 2, and 9 to get the maximum total enjoyment of 12.","solution":"def max_total_enjoyment(n, enjoyment_values): # Initialize dp array, each element in dp represents the max enjoyment ending at that attraction. dp = enjoyment_values[:] # Loop through all attractions to update dp values based on previous attractions. for i in range(n): for j in range(i): if enjoyment_values[i] > enjoyment_values[j]: dp[i] = max(dp[i], dp[j] + enjoyment_values[i]) # The maximum value in dp array will be the maximum total enjoyment value Vasily can achieve. return max(dp)"},{"question":"A company is organizing a team-building event where employees participate in various outdoor activities. The organizer wants to set up a challenge where teams have to find the shortest route to visit a certain number of checkpoints that are placed on a straight path along a hiking trail. Each checkpoint has a fixed position measured in meters from the starting point of the trail. Given an array of integers representing the positions of the checkpoints along the trail, the objective is to find the minimum distance a team has to hike to visit any three distinct checkpoints. The teams are required to visit exactly three different checkpoints, and the total distance hiked is calculated as the sum of the distances between consecutive visited checkpoints. Write a function `minimum_hiking_distance` that takes an integer array `positions` and returns the minimum distance required to hike to visit any three distinct checkpoints. # Function Signature ```python def minimum_hiking_distance(positions: [int]) -> int: ``` # Input - `positions`: A list of integers [p1, p2, ...], where 1 <= len(positions) <= 100, and 0 <= pi <= 1000, each integer represents the position of a checkpoint on the trail in meters. # Output - An integer representing the minimum distance required to hike to visit any three distinct checkpoints. # Examples ```python # Example 1 positions = [5, 10, 15, 20, 25] # The optimal checkpoints to visit are at 10, 15, 20. # The total distance is (15-10) + (20-15) = 5 + 5 = 10. print(minimum_hiking_distance(positions)) # Output: 10 # Example 2 positions = [1, 2, 3, 10, 20] # The optimal checkpoints to visit are at 1, 2, 3. # The total distance is (2-1) + (3-2) = 1 + 1 = 2. print(minimum_hiking_distance(positions)) # Output: 2 ``` # Constraints - The positions list will have at least three elements. - The values in positions can be in any order and may have duplicates, but the chosen three checkpoints for the hike must be distinct.","solution":"def minimum_hiking_distance(positions): Returns the minimum distance required to hike to visit any three distinct checkpoints. if len(positions) < 3: return 0 # Since we need at least three checkpoints # Sort the positions to easily find the minimum distance for any three consecutive checkpoints sorted_positions = sorted(positions) min_distance = float(\'inf\') # Iterate over all possible sets of three consecutive checkpoints for i in range(len(sorted_positions) - 2): distance = (sorted_positions[i + 2] - sorted_positions[i + 1]) + (sorted_positions[i + 1] - sorted_positions[i]) if distance < min_distance: min_distance = distance return min_distance"},{"question":"You are given an array of integers where each element appears exactly three times, except for one element which appears exactly once. Your task is to find the element that appears exactly once. # Input The first line contains a positive integer n (4 ≤ n ≤ 10^4, n%3 = 1) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (−2^31 ≤ a_i ≤ 2^31−1) — the elements of the array, where each element, except one, appears exactly three times. # Output Print the element that appears exactly once. # Example Input ``` 10 2 2 3 2 7 7 7 9 9 9 ``` Output ``` 3 ``` # Explanation In the given array, all elements except 3 appear exactly three times. Therefore, the output is 3.","solution":"def find_unique_element(arr): Given an array of integers where each element appears exactly three times except for one element which appears exactly once, find the element that appears exactly once. Parameters: arr (list of int): The input array Returns: int: The unique element that appears exactly once ones = twos = 0 for num in arr: twos |= ones & num # Add `num` to `twos` if it is already in `ones` ones ^= num # Add `num` to `ones` if it is not already in `ones` common_bits = ones & twos # Common bits in `ones` and `twos` ones &= ~common_bits # Remove bits common in both `ones` and `twos` from `ones` twos &= ~common_bits # Remove bits common in both `ones` and `twos` from `twos` return ones"},{"question":"You are given two non-negative integers N and K. Your task is to find the smallest non-negative integer X such that the number of 1-bits in the binary representation of X is exactly K, and for which the value (X & N) is equal to X. Here, \\"&\\" denotes the bitwise AND operation. For example, if (N = 13) and (K = 2): - The binary representation of 13 is (1101_2). - A possible value of X could be (100_2) (which is 4 in decimal) because it has 2 bits set to 1 and (4 AND 13) equals 4. Write a program that takes N and K as input and outputs the smallest non-negative integer X that satisfies the given conditions. If no such X exists, output -1. Input: - A line containing the integer N (0 ≤ N ≤ (2^{31} - 1)). - A line containing the integer K (0 ≤ K ≤ 31). Output: - The smallest non-negative integer X that satisfies the conditions, or -1 if no such X exists.","solution":"def smallest_x_with_k_bits(N, K): Find the smallest non-negative integer X such that the number of 1-bits in the binary representation of X is exactly K, and X & N == X. :param int N: The given integer. :param int K: The number of 1-bits required in the binary representation of X. :return: The smallest non-negative integer X satisfying the conditions, or -1 if no such X exists. :rtype: int # Step through each bit of N from least significant to most significant bit bits = [] for i in range(32): if (N >> i) & 1: bits.append(1 << i) # If there are fewer bits set in N than K, it\'s not possible if len(bits) < K: return -1 # Return the sum of the smallest K bits return sum(bits[:K])"},{"question":"You are developing a simple text editor that supports basic text formatting commands. The editor is implemented as a class with the following methods: `insert_text`, `delete_text`, `replace_text`, and `get_text`. - `insert_text(position: int, text: str) -> None`: Inserts the given text at the specified position. - `delete_text(start_position: int, end_position: int) -> None`: Deletes the text from the start_position to the end_position (inclusive). - `replace_text(start_position: int, end_position: int, new_text: str) -> None`: Replaces the text from the start_position to the end_position (inclusive) with new_text. - `get_text() -> str`: Returns the current text in the editor. Implement the `TextEditor` class to handle these methods. The initial text content of the editor is an empty string. # Example ```python editor = TextEditor() editor.insert_text(0, \\"Hello\\") editor.insert_text(5, \\" World\\") print(editor.get_text()) # Output: \\"Hello World\\" editor.delete_text(5, 5) print(editor.get_text()) # Output: \\"HelloWorld\\" editor.replace_text(5, 10, \\" Universe\\") print(editor.get_text()) # Output: \\"Hello Universe\\" ``` # Constraints - The `position`, `start_position`, and `end_position` arguments are guaranteed to be valid (i.e., within the bounds of the current text). - The `text` and `new_text` arguments are non-empty strings containing only printable ASCII characters.","solution":"class TextEditor: def __init__(self): self.content = \\"\\" def insert_text(self, position: int, text: str) -> None: self.content = self.content[:position] + text + self.content[position:] def delete_text(self, start_position: int, end_position: int) -> None: self.content = self.content[:start_position] + self.content[end_position+1:] def replace_text(self, start_position: int, end_position: int, new_text: str) -> None: self.content = self.content[:start_position] + new_text + self.content[end_position+1:] def get_text(self) -> str: return self.content"},{"question":"You are given an array of n integers. Your task is to find the maximum sum of any contiguous subarray of length exactly m. If such a subarray cannot be found, return -1. The first line of input contains two space-separated integers n and m (1 ≤ m ≤ n ≤ 10^5). The second line contains n space-separated integers representing the elements of the array (1 ≤ array[i] ≤ 10^9). Output a single integer representing the maximum sum of any contiguous subarray of length exactly m. If no such subarray exists, print -1. Example: Input: 6 3 1 2 3 4 5 6 Output: 15 Explanation: The subarray of length 3 with the maximum sum is [4, 5, 6], and the sum is 15.","solution":"def max_subarray_sum(n, m, arr): Returns the maximum sum of any contiguous subarray of length exactly m. If no such subarray can be found, returns -1. if m > n: return -1 max_sum = current_sum = sum(arr[:m]) for i in range(m, n): current_sum += arr[i] - arr[i - m] if current_sum > max_sum: max_sum = current_sum return max_sum"},{"question":"Given a sequence of integers, determine the length of the longest subsequence that is bitonic. A bitonic subsequence is a sequence which first strictly increases and then strictly decreases. # Input - The first line contains an integer n (1 le n le 10^5), the length of the sequence. - The second line contains n space-separated integers a_1, a_2, ldots, a_n (1 le a_i le 10^9), denoting the elements of the sequence. # Output - Output a single integer, the length of the longest bitonic subsequence. # Example Example 1: **Input:** ``` 7 1 3 5 7 4 2 1 ``` **Output:** ``` 7 ``` Example 2: **Input:** ``` 10 1 11 2 10 4 5 2 1 4 10 ``` **Output:** ``` 6 ``` # Note In the first example, the whole sequence [1, 3, 5, 7, 4, 2, 1] itself is bitonic with length 7. In the second example, one of the longest bitonic subsequences is [1, 2, 10, 4, 2, 1] with length 6.","solution":"def longest_bitonic_subsequence(arr): n = len(arr) if n == 0: return 0 # Initialize the lists for longest increasing subsequences increasing = [1] * n decreasing = [1] * n # Fill the increasing subsequences array for i in range(1, n): for j in range(i): if arr[i] > arr[j] and increasing[i] < increasing[j] + 1: increasing[i] = increasing[j] + 1 # Fill the decreasing subsequences array for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if arr[i] > arr[j] and decreasing[i] < decreasing[j] + 1: decreasing[i] = decreasing[j] + 1 # Find the maximum value of increasing[i] + decreasing[i] - 1 max_len = 0 for i in range(n): max_len = max(max_len, increasing[i] + decreasing[i] - 1) return max_len"},{"question":"There is a city with n intersections and m bidirectional roads. Each intersection is numbered from 1 to n. Each road connects two intersections and has a certain length. The mayor of the city wants to build an efficient emergency response system by placing rescue stations at some intersections. A rescue station at intersection i can respond to emergencies at any intersection j such that the shortest path from i to j does not exceed a given maximum distance d. Your task is to determine the minimum number of rescue stations needed so that every intersection in the city can be reached by at least one rescue station within the distance d. You are given: - The number of intersections n (1 le n le 10^5). - The number of roads m (0 le m le 2 cdot 10^5). - The maximum response distance d (1 le d le 10^9). Each of the next m lines contains three integers u, v, and l (1 le u, v le n, u neq v, 1 le l le 10^9) denoting that there is a road between intersections u and v with length l. Output the minimum number of rescue stations needed. # Input The input consists of: 1. A single line with three integers n, m, and d. 2. m lines, each with three integers u, v, and l. # Output Output a single integer - the minimum number of rescue stations needed. # Example Input: ``` 4 4 5 1 2 2 2 3 3 3 4 4 1 4 1 ``` Output: ``` 1 ``` # Explanation: In this example, one rescue station placed at intersection 2 can cover all intersections within the distance 5.","solution":"import heapq from collections import defaultdict def dijkstra(n, graph, start): distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def minimum_rescue_stations(n, m, d, roads): graph = defaultdict(list) for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) covered = [False] * (n + 1) num_stations = 0 for i in range(1, n + 1): if not covered[i]: num_stations += 1 distances = dijkstra(n, graph, i) for j in range(1, n + 1): if distances[j] <= d: covered[j] = True return num_stations"},{"question":"You are working on a text-based adventure game where the player navigates through a dungeon while collecting treasures and fighting monsters. The game allows the player to pick up items that are described by a string. However, the player can only carry a limited amount of items, specified by an integer k. Each item has a weight, a positive integer, associated with it. Given an inventory of items, write a function that calculates the maximum number of items the player can carry without exceeding the weight limit k. The function should return a space-separated list of item descriptions that the player can carry. Each item in the inventory is represented as a pair of strings: the item description and its weight. The input consists of a list of such pairs and the weight limit k. Example input: inventory = [(\\"potion\\", 3), (\\"gold\\", 10), (\\"sword\\", 5), (\\"shield\\", 7)], k = 15 Example output: \\"potion sword shield\\" Note that if there are multiple possible solutions, any valid solution will be accepted. # Constraints - 1 ≤ len(inventory) ≤ 100 - 1 ≤ weight of each item ≤ 100 - 1 ≤ k ≤ 100","solution":"def max_items(inventory, k): Calculates the maximum number of items the player can carry without exceeding the weight limit k. Parameters: inventory (list of tuples): A list where each element is a tuple containing the item description (string) and weight (int). k (int): Weight limit that the player can carry. Returns: str: A space-separated list of item descriptions that the player can carry. # Sort items by weight inventory.sort(key=lambda x: x[1]) total_weight = 0 items_to_carry = [] # Iterate through the sorted inventory for item, weight in inventory: if total_weight + weight <= k: total_weight += weight items_to_carry.append(item) else: break return \\" \\".join(items_to_carry)"},{"question":"Consider a robot on a 2D grid starting at position (0, 0). The robot can move in four possible directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Each movement command directs the robot to move one unit step in the respective direction. Given a string `commands` consisting of these movement commands, determine if the robot returns to the origin (0, 0) after executing all the commands. The string `commands` contains at least one character and no more than 10,000 characters. Your task is to implement a function that takes the string `commands` as input and returns `True` if the robot returns to the origin, and `False` otherwise. # Input - A single string `commands` consisting of the characters \'U\', \'D\', \'L\', \'R\'. # Output - A single boolean value: `True` if the robot returns to the origin, `False` otherwise. # Example Input `commands = \\"UD\\"` Output `True` Input `commands = \\"LL\\"` Output `False` # Note In the first example, the robot moves up once and down once, returning to the origin. In the second example, the robot moves left twice, which means it\'s not at the origin after completing the movements. # Constraints - `1 <= len(commands) <= 10000` - `commands` only contains characters \'U\', \'D\', \'L\', \'R\'.","solution":"def robot_returns_to_origin(commands): Determines if the robot returns to the origin (0, 0) after executing all the commands. Parameters: commands (str): The string of movement commands (\'U\', \'D\', \'L\', \'R\'). Returns: bool: True if the robot returns to the origin, False otherwise. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"Alice is programming a smart automation system for her new greenhouse. She wants to create an optimal watering schedule for her plants. The greenhouse can be represented as a 1D line of length n, where each plant is numbered from 1 to n. Alice has determined that each plant needs a certain amount of water every day, represented by an array w of length n. The watering system can be scheduled to water contiguous segments of the plants at once. The amount of water programmed for each segment will be uniform and equal to the maximum water required by any plant in the segment. For example, if Alice wants to water the segment from plant i to plant j, then every plant in this segment will receive water equal to the maximum value in the subarray w[i dots j]. Alice wants to minimize the total amount of water used each day. Formally, she needs to determine the most efficient way to water all the plants, such that the total water used is minimized. Write a program that, given an array w, calculates the minimum total amount of water needed to ensure all plants receive the water they need. # Input - The first line contains an integer n (1 le n le 10^5) — the number of plants. - The second line contains n integers w_1, w_2, dots, w_n (1 le w_i le 10^6) — the water requirements for each plant. # Output - Print a single integer — the minimum total amount of water needed. # Example Input ``` 5 4 2 3 5 1 ``` Output ``` 17 ``` Explanation One optimal way to water the plants is: - Water the segment [1, 1] with 4 units: total water = 4 - Water the segment [2, 4] with 5 units each: total water = 5 + 5 + 5 = 15 - Water the segment [5, 5] with 1 unit: total water = 1 Total water used = 4 + 15 + 1 = 20 units. The minimum total amount of water needed is 20 units.","solution":"def min_total_water(n, w): Calculate the minimum total amount of water needed to ensure all plants receive the water they need. Parameters: n (int): The number of plants. w (list): The water requirements for each plant. Returns: int: The minimum total amount of water needed. return sum(w)"},{"question":"You are given a string `s` of length `n` consisting only of lowercase English letters. Your task is to determine the number of pairs of indices (i, j) (1 <= i < j <= n) such that the substring `s[i..j]` (inclusive) is a palindrome. A string is a palindrome if it reads the same forward and backward. # Input - The input contains a single string `s` with length `n` (1 <= n <= 1000). # Output - Print a single integer — the number of pairs of indices (i, j) such that the substring `s[i..j]` is a palindrome. # Example Input ``` ababa ``` Output ``` 4 ``` # Note In the example, the palindromic substrings and their starting and ending indices are: - \\"aba\\" (1, 3) - \\"bab\\" (2, 4) - \\"aba\\" (3, 5) - \\"a\\" (4, 4) Constraints ensure that the input size is manageable within typical computational limits for this type of problem.","solution":"def count_palindromic_substrings(s): Returns the number of palindromic substrings in the string s. Args: s (str): Input string of length n consisting of lowercase English letters. Returns: int: Number of palindromic substrings. n = len(s) count = 0 def is_palindrome(left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True for length in range(1, n + 1): # length of substring for i in range(n - length + 1): if is_palindrome(i, i + length - 1): count += 1 return count"},{"question":"You have a sequence of integers and you want to detect if there is any integer which is a majority element in the sequence. A majority element in a sequence of size n is an element that appears more than floor(n/2) times. Write a function that receives a sequence of integers and checks whether the sequence contains a majority element. If there is a majority element, return that element. Otherwise, return -1. # Function Signature ```python def find_majority_element(sequence: List[int]) -> int: ``` # Input - A list of integers `sequence` where 1 <= len(sequence) <= 10^5 and each integer in the list is between -10^9 and 10^9. # Output - Return an integer which is the majority element, or -1 if there is no majority element. # Examples ```python assert find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4 assert find_majority_element([3, 3, 4, 2, 4, 4, 2, 4]) == -1 ``` # Constraints - The function should run in O(n) time complexity.","solution":"from typing import List def find_majority_element(sequence: List[int]) -> int: Identifies the majority element in the list or returns -1 if no majority element exists. A majority element is one that appears more than floor(n/2) times. count = 0 candidate = None # Phase 1: Finding a candidate for num in sequence: if count == 0: candidate = num count = 1 elif num == candidate: count += 1 else: count -= 1 # Phase 2: Verifying the candidate if candidate is not None: count = 0 for num in sequence: if num == candidate: count += 1 if count > len(sequence) // 2: return candidate return -1"},{"question":"You are given a rectangular grid with n rows and m columns. Your task is to modify the grid such that any straight line (either horizontal, vertical, or diagonal) with 3 or more same consecutive numbers is broken by changing exactly one number in the line. The grid will be given as a matrix of integers. Input: - The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), the dimensions of the grid. - The following n lines contain m integers each, representing the values in the grid (each integer will be between 1 and 9 inclusive). Output: - Output the modified grid having the same dimensions as the input grid, where no straight horizontal, vertical, or diagonal line contains 3 or more same consecutive numbers. If there are multiple possible solutions, print any one of them. Example: Input: 4 5 1 2 2 2 9 4 5 5 5 5 7 8 8 8 1 2 2 2 9 3 Output: 1 2 2 3 9 4 5 6 5 5 7 8 8 9 1 2 2 3 9 3 Note: In the output, one possible solution breaks all the lines of 3 or more identical numbers. Lines that would have otherwise broken the rule are modified to ensure that no horizontal, vertical, or diagonal line has 3 or more same consecutive numbers.","solution":"def modify_grid(grid): Modifies the grid to break any horizontal, vertical, or diagonal line of 3 or more consecutive identical numbers. n, m = len(grid), len(grid[0]) # Check horizontal lines for i in range(n): for j in range(m - 2): if grid[i][j] == grid[i][j+1] == grid[i][j+2]: for k in range(1, 10): if k != grid[i][j]: grid[i][j+1] = k break # Check vertical lines for i in range(n - 2): for j in range(m): if grid[i][j] == grid[i+1][j] == grid[i+2][j]: for k in range(1, 10): if k != grid[i][j]: grid[i+1][j] = k break # Check diagonal lines (top-left to bottom-right) for i in range(n - 2): for j in range(m - 2): if grid[i][j] == grid[i+1][j+1] == grid[i+2][j+2]: for k in range(1, 10): if k != grid[i][j]: grid[i+1][j+1] = k break # Check diagonal lines (top-right to bottom-left) for i in range(n - 2): for j in range(2, m): if grid[i][j] == grid[i+1][j-1] == grid[i+2][j-2]: for k in range(1, 10): if k != grid[i][j]: grid[i+1][j-1] = k break return grid # Example usage n, m = 4, 5 grid = [ [1, 2, 2, 2, 9], [4, 5, 5, 5, 5], [7, 8, 8, 8, 1], [2, 2, 2, 9, 3] ] modified_grid = modify_grid(grid) for row in modified_grid: print(\' \'.join(map(str, row)))"},{"question":"You are given a matrix of size n times m, where each cell contains a lowercase English letter. You have to process q queries on this matrix. In each query, you have to determine if a given string can appear as a contiguous submatrix within the given matrix. A submatrix is defined by choosing two pairs of indices (top-left corner and bottom-right corner) such that the selected submatrix contains all the elements between these indices. The first line of input contains three integers n, m and q (1 le n, m le 1000, 1 le q le 100). The next n lines each contain a string of length m, representing the matrix. Each of the next q lines contains a string s. For each query string s, output \\"YES\\" if the string can appear as a contiguous submatrix, otherwise output \\"NO\\". # Sample Input ``` 3 4 3 abcd efgh ijkl ef ghi abcd ``` # Sample Output ``` YES NO YES ``` # Explanation In the example: - \\"ef\\" appears as a submatrix starting at (2,1) and ending at (2,2). - \\"ghi\\" does not appear as a contiguous submatrix. - \\"abcd\\" appears as a submatrix starting at (1,1) and ending at (1,4).","solution":"def can_appear_as_submatrix(matrix, strings): n = len(matrix) m = len(matrix[0]) results = [] for s in strings: found = False s_len = len(s) if n >= 1 and m >= s_len: for i in range(n): for j in range(m - s_len + 1): if matrix[i][j:j+s_len] == s: found = True break if found: break results.append(\\"YES\\" if found else \\"NO\\") return results"},{"question":"Bob loves playing with strings and found an interesting game involving them. He has a string s of length n, and he wants to find the number of distinct substrings that can be formed from s. Two substrings are considered distinct if their characters are not in the same order. For example, if n = 3 and s = \\"abc\\", then the distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". The total number of distinct substrings is 6. Write a program that will take multiple test cases and for each test case, it will output the number of distinct substrings in the given string. The first line contains one integer t (1 leq t leq 100) — the number of test cases. Then t test cases follow. Each test case consists of a single line containing a string s (1 leq |s| leq 10^5) — the string for which Bob has to find the number of distinct substrings. Output for each test case a single integer — the number of distinct substrings that can be formed from the string. **Example:** Input: ``` 2 abc aaa ``` Output: ``` 6 3 ``` **Explanation:** In the first test case \\"abc\\", the distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". In the second test case \\"aaa\\", the distinct substrings are: \\"a\\", \\"aa\\", \\"aaa\\".","solution":"def count_distinct_substrings(s): Returns the number of distinct substrings that can be formed from the string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) def process_test_cases(test_cases): Processes a list of test cases and returns the results for each. results = [] for s in test_cases: results.append(count_distinct_substrings(s)) return results"},{"question":"You are given a sequence of n integers. Determine if it is possible to reorder the sequence into a strictly increasing sequence by performing at most one operation, where you are allowed to remove exactly one element from the sequence. The first line contains one integer n (1 ≤ n ≤ 10^5) — the size of the sequence. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence. Print \\"YES\\" if it is possible to reorder the sequence into a strictly increasing sequence by removing at most one element. Otherwise, print \\"NO\\".","solution":"def can_become_strictly_increasing(n, sequence): Determines if the sequence can be made strictly increasing by removing at most one element. :param n: Integer, the number of elements in the sequence. :param sequence: List of n integers, the sequence of numbers. :return: \\"YES\\" if it is possible to reorder the sequence into a strictly increasing sequence by removing at most one element, otherwise \\"NO\\". def is_strictly_increasing(seq): Helper function to check if a sequence is strictly increasing. for i in range(1, len(seq)): if seq[i] <= seq[i-1]: return False return True # If sequence is already strictly increasing if is_strictly_increasing(sequence): return \\"YES\\" # Try removing each element one by one and check if the remaining sequence is strictly increasing for i in range(n): if is_strictly_increasing(sequence[:i] + sequence[i+1:]): return \\"YES\\" return \\"NO\\""},{"question":"One day, Alex discovered a mysterious book containing n pages, each page represented as a sequence of m integers. Intrigued by the patterns in the sequences, Alex decided to perform some operations on them. Specifically, Alex can choose any two positions l and r (1 ≤ l ≤ r ≤ m) within a sequence and reverse the subsequence between these positions, inclusive. For example, if a page initially has the sequence [2, 5, 3, 7, 9] and Alex chooses l = 2 and r = 4, after the operation, the sequence would become [2, 7, 3, 5, 9]. Given the initial sequences in the book, your task is to determine the lexicographically smallest sequence that can be obtained on page number 1 by performing any number of the described operations. The first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of pages and the length of each sequence, respectively. The next n lines contain m integers each, representing the sequences on each page. Output the lexicographically smallest sequence that can be obtained on page number 1 after performing any number of the allowed operations. # Example Input: ``` 3 5 4 3 2 1 5 2 5 3 7 9 3 8 6 4 2 ``` Output: ``` 1 2 3 4 5 ``` Explanation: By reversing appropriate subsequences, the smallest lexicographical sequence that can be achieved for the first sequence [4, 3, 2, 1, 5] is [1, 2, 3, 4, 5].","solution":"def lexicographically_smallest_sequence(sequences, m): Given a list of sequences, determines the lexicographically smallest sequence that can be obtained on page number 1 by performing any number of allowed reversal operations on subsequences. :param sequences: List of sequences of integers :param m: Length of each sequence :return: The lexicographically smallest sequence that can be obtained on page 1 def find_minimal_rotation(sequence): Finds the lexicographically smallest sequence by rotating and reversing subarrays. minimal_sequence = sequence[:] for i in range(len(sequence)): for j in range(i, len(sequence)): new_sequence = sequence[:i] + sequence[i:j+1][::-1] + sequence[j+1:] if new_sequence < minimal_sequence: minimal_sequence = new_sequence return minimal_sequence first_sequence = sequences[0] return find_minimal_rotation(first_sequence)"},{"question":"You are given an array of integers a consisting of n elements. An operation is defined as follows: you can choose any element of the array and add or subtract 1 from it. Determine the minimum number of operations required to make all the elements of the array equal. # Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the elements of the array. # Output: Print a single integer — the minimum number of operations required. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 6 ``` Explanation: By adjusting the elements to all be 3, we can achieve the minimum number of operations: - Convert 1 to 3: 2 operations (1 + 2) - Convert 2 to 3: 1 operation (2 + 1) - Convert 4 to 3: 1 operation (4 - 1) - Convert 5 to 3: 2 operations (5 - 2) - Total: 2 + 1 + 1 + 2 = 6 operations.","solution":"def min_operations_to_make_elements_equal(n, arr): Returns the minimum number of operations required to make all elements of the array equal. target = sorted(arr)[n // 2] return sum(abs(x - target) for x in arr)"},{"question":"Write a program that reads three integers x, y, and z (1 ≤ x, y, z ≤ 100) from the input. The program should then output the smallest integer among the three followed by the largest integer, separated by a single space. If all three integers are the same, output only that single integer.","solution":"def find_smallest_and_largest(x, y, z): Function to find the smallest and largest integer among the three given integers. If all three integers are the same, it returns only that single integer. if x == y == z: return f\\"{x}\\" smallest = min(x, y, z) largest = max(x, y, z) return f\\"{smallest} {largest}\\""},{"question":"You are given an integer array **nums** of length **n** and an integer **k**. Your task is to find the maximum sum of a continuous subarray of length **k**. The first line contains a single integer **t** (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains two integers **n** (1 le n le 10^5) and **k** (1 le k le n). - The second line contains **n** integers **nums[i]** (0 le nums[i] le 10^4). For each test case, print one integer — the maximum sum of a continuous subarray of length **k**. Example: Input: ``` 2 5 2 1 5 2 3 7 7 3 4 5 3 2 1 8 9 ``` Output: ``` 10 18 ```","solution":"def max_sum_of_subarray(n, k, nums): current_sum = sum(nums[:k]) max_sum = current_sum for i in range(k, n): current_sum = current_sum + nums[i] - nums[i - k] if current_sum > max_sum: max_sum = current_sum return max_sum def process_test_cases(test_cases): results = [] for test in test_cases: n, k, nums = test results.append(max_sum_of_subarray(n, k, nums)) return results"},{"question":"You are given an array of integers and a target sum. Your task is to find all unique quadruplets in the array which gives the sum of the target. Write a function `fourSum(nums: List[int], target: int) -> List[List[int]]` that takes in an array of integers `nums` and an integer `target`, and returns a list of all unique quadruplets `[nums[a], nums[b], nums[c], nums[d]]` such that: - `0 <= a, b, c, d < len(nums)` - `a, b, c, and d` are distinct. - `nums[a] + nums[b] + nums[c] + nums[d] == target` **Example 1:** ```python Input: nums = [1, 0, -1, 0, -2, 2], target = 0 Output: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]] ``` **Example 2:** ```python Input: nums = [2, 2, 2, 2, 2], target = 8 Output: [[2, 2, 2, 2]] ``` **Constraints:** - `1 <= nums.length <= 200` - `-10^9 <= nums[i] <= 10^9` - `-10^9 <= target <= 10^9` Your solution should avoid duplicate quadruplets and ensure the quadruplets are in non-decreasing order in the final result.","solution":"from typing import List def fourSum(nums: List[int], target: int) -> List[List[int]]: def kSum(nums, target, k, start): if k == 2: return twoSum(nums, target, start) res = [] for i in range(start, len(nums)): if i == start or (i > start and nums[i] != nums[i - 1]): for subset in kSum(nums, target - nums[i], k - 1, i + 1): res.append([nums[i]] + subset) return res def twoSum(nums, target, start): res = [] left, right = start, len(nums) - 1 while left < right: current_sum = nums[left] + nums[right] if current_sum < target: left += 1 elif current_sum > target: right -= 1 else: res.append([nums[left], nums[right]]) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 return res nums.sort() return kSum(nums, target, 4, 0)"},{"question":"Write a function `count_vowels` that counts the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. The function should have the following signature: ```python def count_vowels(s: str) -> int: pass ``` # Input: - A single string `s` (1 ≤ len(s) ≤ 100). # Output: - An integer representing the number of vowels in the string. # Example: ```python assert count_vowels(\\"Hello World\\") == 3 assert count_vowels(\\"Programming\\") == 3 assert count_vowels(\\"Python\\") == 1 ```","solution":"def count_vowels(s: str) -> int: Returns the number of vowels (a, e, i, o, u) in the given string. The function is case-insensitive. vowels = set(\\"aeiouAEIOU\\") return sum(1 for char in s if char in vowels)"},{"question":"Two players are playing a game with a string. They take turns to remove any one character from the string, and the player who removes the character \'a\' loses the game. Both players play optimally. Determine if the starting player has a winning strategy or not given a string s. If the first player has a winning strategy, print \\"First\\", otherwise print \\"Second\\". The first line of the input contains an integer t (1 ≤ t ≤ 100), the number of test cases. The next t lines contain a string s consisting of lowercase English letters (1 ≤ |s| ≤ 100). Output \\"First\\" if the first player has a winning strategy for each test case, otherwise output \\"Second\\". # Examples Input ``` 3 abc bbb a ``` Output ``` First Second Second ```","solution":"def game_result(s): Determine if the first player has a winning strategy. Parameters: s (str): the input string for the game. Returns: str: \\"First\\" if the first player has a winning strategy, \\"Second\\" otherwise. if \'a\' in s: return \\"First\\" else: return \\"Second\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(game_result(s)) return results"},{"question":"In a distant galaxy, there exists a planet called \\"TechLand\\" where the communication between cities is established through a unique system of telecommunication towers. There are `n` cities in TechLand, and each city is connected to one or more other cities by bidirectional communication lines. For any two cities `(a, b)`, there exists exactly one unique path of communication links connecting them (i.e., the cities and communication links form a tree). To improve the efficiency of communication, TechLand has decided to introduce a special kind of signal booster in some of the communication towers. Installing a signal booster in the communication tower of city `i` costs `ci` units of energy, and it boosts the signal strength in all the communication links connected to city `i`. However, due to limited energy resources, TechLand can afford to install signal boosters in at most `k` cities. Write a program that determines the minimum total cost of energy required to install the signal boosters in such a way that all cities in TechLand are reachable with boosted signal strength. # Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 100), the number of cities and the maximum number of cities where signal boosters can be installed. - The second line contains `n` integers `c1, c2, ..., cn` (1 ≤ ci ≤ 100), where `ci` is the energy cost required to install the signal booster in city `i`. - Each of the next `n-1` lines contains two integers `u` and `v` (1 ≤ u, v ≤ n), indicating that there is a direct communication line between city `u` and city `v`. # Output Print a single integer — the minimum total cost of energy required to ensure that all cities are reachable with boosted signal strength. # Example Input ``` 5 2 3 2 1 4 5 1 2 1 3 2 4 3 5 ``` Output ``` 3 ``` In this example, the optimal solution is to install signal boosters in cities 2 and 3, with a total cost of `2 + 1 = 3`. This ensures all cities are reachable with boosted signal strength.","solution":"def min_cost_to_boost_communication(n, k, costs, edges): Determines the minimum total cost of energy required to install the signal boosters in such a way that all cities in TechLand are reachable with boosted signal strength. :param n: Number of cities :param k: Maximum number of cities where signal boosters can be installed :param costs: List of integers where costs[i] is the energy cost to install the signal booster in city (i + 1) :param edges: List of tuples (u, v) where there\'s a direct communication line between city u and city v :return: Minimum total cost of energy # Sort costs in ascending order sorted_costs = sorted(costs) # Take the smallest k costs min_total_cost = sum(sorted_costs[:k]) return min_total_cost # Example usage: n = 5 k = 2 costs = [3, 2, 1, 4, 5] edges = [(1, 2), (1, 3), (2, 4), (3, 5)] print(min_cost_to_boost_communication(n, k, costs, edges)) # Output: 3"},{"question":"You are given a binary string s consisting of n characters, where each character is either \'0\' or \'1\'. We can perform the following operation on the string any number of times: - Select any substring of the string and invert all characters in it (i.e., change \'0\' to \'1\' and \'1\' to \'0\'). Your task is to determine if it is possible to convert the string into a string that has all characters the same (either all \'0\'s or all \'1\'s). Input: - The first line contains an integer n (1 ≤ n ≤ 1000) – the length of the string. - The second line contains a binary string s of length n. Output: - Print \\"YES\\" if it is possible to convert the entire string into a string consisting of all \'0\'s or all \'1\'s. Otherwise, print \\"NO\\". Examples: Input: 6 010101 Output: YES Input: 5 11000 Output: NO","solution":"def can_convert_to_uniform(n, s): Determines if it is possible to convert the binary string s to all \'0\'s or all \'1\'s. Parameters: n (int): the length of the binary string s (str): the binary string Returns: str: \\"YES\\" if conversion is possible, \\"NO\\" otherwise if s.count(\'0\') == n or s.count(\'1\') == n: return \\"YES\\" elif s.count(\'0\') == s.count(\'1\'): return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array of integers, write a function to determine whether any two numbers in the array sum up to a specific target number. The function should return a boolean value indicating the presence of such a pair. The function should be optimized for efficiency in both time and space complexity. # Input - An array of integers `nums`, with 1 <= nums.length <= 10^6 and -10^9 <= nums[i] <= 10^9. - An integer `target`, with -10^9 <= target <= 10^9. # Output - A boolean value: `true` if there are two distinct integers in the array that add up to `target`, and `false` otherwise. # Example ```plaintext Input: nums = [2, 7, 11, 15], target = 9 Output: true Explanation: 2 + 7 = 9 Input: nums = [3, 2, 4], target = 6 Output: true Explanation: 2 + 4 = 6 Input: nums = [3, 3], target = 6 Output: true Explanation: 3 + 3 = 6 Input: nums = [1, 2, 3, 4, 5], target = 10 Output: false Explanation: There are no two numbers that add up to 10 Input: nums = [5, -2, 3, 4, 5], target = 7 Output: true Explanation: 5 + 2 = 7 ``` # Constraints: - You may assume that each input would have exactly one solution, and you may not use the same element twice. - Optimize your solution to O(n) time complexity using a suitable approach (e.g., hash table).","solution":"def two_sum(nums, target): Determines if there are two numbers in the array `nums` that add up to `target`. Parameters: nums (list of int): List of integers target (int): Target sum Returns: bool: True if there are two distinct numbers that add up to `target`, False otherwise seen_numbers = set() for num in nums: if (target - num) in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"Annie loves playing with permutations of numbers. She defines a permutation of an array of integers as a sequence that contains each integer from the array exactly once. Given an array of n integers, Annie wants to form a permutation following these rules: 1. Every two consecutive elements in the permutation have a difference of at most k. 2. The permutation should minimize the sum of absolute differences between consecutive elements. Given an array of integers and an integer k, help Annie to form the permutation with the minimal possible sum, or determine that it\'s impossible to do so. First line contains two integers n (1 ≤ n ≤ 5000) and k (0 ≤ k ≤ 1000) — number of elements in the array and the maximum allowed difference, respectively. Second line contains n space-separated integers a1, a2, ..., an (-10000 ≤ ai ≤ 10000), the elements of the array. Output should contain a single integer – minimal possible sum of absolute differences between consecutive elements of the permutation if it is possible to form such a permutation, or -1 if it\'s impossible. For example: In the first test case, the array is [10, 20, 30] and k = 10. The minimal permutation is [10, 20, 30] with the sum of absolute differences = |10-20| + |20-30| = 10 + 10 = 20. In the second test case, the array is [5, 9, 15] and k = 3. It\'s impossible to form such a permutation since the difference between 5 and 9 is 4, which is greater than k. Therefore, the output is -1.","solution":"def min_permutation_sum(n, k, arr): Returns the minimal possible sum of absolute differences between consecutive elements of the permutation, or -1 if it\'s impossible to form such a permutation under the given constraints. :param n: Integer, number of elements in the array :param k: Integer, maximum allowed difference between consecutive elements :param arr: List of integers, the elements of the array :return: Integer, minimal possible sum of absolute differences, or -1 if impossible # Sort the array arr.sort() # Check if the consecutive differences exceed k for i in range(1, n): if abs(arr[i] - arr[i-1]) > k: return -1 # Calculate the sum of absolute differences for the sorted array sum_diff = sum(abs(arr[i] - arr[i-1]) for i in range(1, n)) return sum_diff"},{"question":"Create a function that takes a list of strings as input and returns a new list that contains the strings from the original list that have the same characters appearing in the same order, but potentially in different cases (case-insensitive matching). The returned list should maintain the relative order of the original list. The function should ignore empty strings and remove duplicates (case-insensitive). Example input: ```python [\\"apple\\", \\"Banana\\", \\"APPLE\\", \\"Apple\\", \\"\\", \\"banAna\\", \\"cat\\"] ``` Example output: ```python [\\"apple\\", \\"Banana\\", \\"cat\\"] ``` In the example, \\"apple\\" appears multiple times (including different cases) but is kept only once. \\"Banana\\" and \\"banAna\\" are considered duplicates and only \\"Banana\\" appears in the output. \\"cat\\" is unique and kept in the output. Empty strings are removed. Function Signature: ```python def filter_unique_strings(strings: list) -> list: ```","solution":"def filter_unique_strings(strings: list) -> list: Filters a list of strings to remove duplicates (case-insensitive) and empty strings. Returns a new list keeping the first occurrence of each unique string (case-insensitive). seen = set() result = [] for s in strings: if s and s.lower() not in seen: seen.add(s.lower()) result.append(s) return result"},{"question":"You are given a city map represented as a grid of size ( m times n ). Each cell in the grid is either a building (\'B\'), a road (\'R\'), or a park (\'P\'). Some roads are under construction and cannot be used, which are represented by the character \'#\'. Your task is to help a delivery person determine the shortest possible time to travel from their starting point to their destination. The delivery person can move up, down, left, or right to an adjacent road cell. It takes exactly 1 minute to travel to an adjacent road cell. The delivery person can only travel on road cells that are not under construction. Write a program to determine the shortest travel time or return -1 if it is not possible to reach the destination. # Input: - The first line contains two integers ( m ) and ( n ) (1 ≤ ( m, n ) ≤ 1000) - the number of rows and columns of the city grid. - The following ( m ) lines each contain ( n ) characters representing the city map. Each character is one of \'B\', \'R\', \'P\', or \'#\'. - The next line contains two integers ( x_s ) and ( y_s ) (0 ≤ ( x_s < m ), 0 ≤ ( y_s < n )) - the coordinates of the starting point. - The final line contains two integers ( x_d ) and ( y_d ) (0 ≤ ( x_d < m ), 0 ≤ ( y_d < n )) - the coordinates of the destination point. # Output: - Output a single integer representing the shortest travel time in minutes or -1 if there is no valid route. # Example: Input: ``` 5 5 RRRRR RPBRR RR#RR RPRRR RRRRR 0 0 3 4 ``` Output: ``` 7 ``` In this example, the shortest path from (0, 0) to (3, 4) avoids the construction zone at (2, 2) and takes 7 minutes to complete. If there were no valid path, the output would be -1.","solution":"from collections import deque def shortest_travel_time(m, n, city_map, x_s, y_s, x_d, y_d): Returns the shortest travel time from (x_s, y_s) to (x_d, y_d) or -1 if not possible. # Directions for moving in the grid (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Check if start or destination is invalid if city_map[x_s][y_s] == \'#\' or city_map[x_d][y_d] == \'#\': return -1 # Initialize queue and visited set queue = deque([(x_s, y_s, 0)]) visited = set((x_s, y_s)) while queue: x, y, time = queue.popleft() # Check if destination is reached if (x, y) == (x_d, y_d): return time # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and city_map[nx][ny] == \'R\': queue.append((nx, ny, time + 1)) visited.add((nx, ny)) return -1"},{"question":"Given an integer n, create an n times n matrix such that each number from 1 to n^2 appears exactly once and the sum of the elements in every row and every column is the same. This is known as a magic square. # Input: - The first line contains one integer t (1 le t le 10) - the number of test cases. - Each of the next t lines contains one integer n (1 le n le 50) - the size of the magic square matrix to be constructed. # Output: - For each test case, output an n times n magic square matrix, with each of n lines containing n integers. # Example: # Input: ``` 1 3 ``` # Output: ``` 2 7 6 9 5 1 4 3 8 ```","solution":"def generate_magic_square(n): \'\'\'This function creates n x n magic square matrix for odd n\'\'\' magic_square = [[0] * n for _ in range(n)] i, j = 0, n // 2 num = 1 while num <= n**2: magic_square[i][j] = num num += 1 newi = (i - 1) % n newj = (j + 1) % n if magic_square[newi][newj]: i += 1 else: i, j = newi, newj return magic_square def multiple_magic_squares(test_cases): results = [] for n in test_cases: if n == 2 or n % 2 == 0: raise ValueError(f\\"Magic squares are not possible for {n}.\\") results.append(generate_magic_square(n)) return results"},{"question":"You are given a number of team members, their skill levels represented as integers, and a requirement that each team must comprise exactly 4 members. A team is considered balanced if and only if the difference between the maximum and minimum skill levels in the team is at most 3. Determine the maximum number of balanced teams that can be formed. You are provided with an integer t (1 le t le 100) denoting the number of test cases. For each test case, the first line contains an integer m (1 le m le 2000) representing the number of team members. The second line contains m integers representing the skill levels of the team members. It is guaranteed that the sum of m for all test cases does not exceed 10000. Output an integer for each test case, representing the maximum number of balanced teams that can be formed. # Example Input: ``` 2 6 1 2 3 4 5 6 9 1 1 1 2 2 2 3 3 3 ``` Output: ``` 1 2 ``` # Explanation In the first test case, the team can form one balanced team [2, 3, 4, 5]. The remaining members [1, 6] cannot form another balanced team. In the second test case, two balanced teams can be formed: [1, 1, 2, 2] and [2, 3, 3, 3].","solution":"def max_balanced_teams(t, test_cases): results = [] for i in range(t): m, skills = test_cases[i] skills.sort() count = 0 while len(skills) >= 4: for j in range(len(skills) - 3): if skills[j + 3] - skills[j] <= 3: count += 1 skills = skills[:j] + skills[j + 4:] break else: break results.append(count) return results"},{"question":"A school is organizing a field trip for m students. Each student has a preference list of activities they would like to participate in during the trip. The school aims to schedule activities in such a way that maximizes the number of students who can participate in at least one of their preferred activities. Each activity i can accommodate ai students (1 ≤ ai ≤ 100). Given this scenario, your task is to write a program that will help the school organize the activities during the field trip to maximize student satisfaction, ensuring the maximum number of students are able to participate in at least one activity they prefer. Students can only participate in one activity during the field trip. The first line contains two integers m and n separated by a single space, where m (1 ≤ m ≤ 1000) is the number of students, and n (1 ≤ n ≤ 100) is the number of available activities. Each of the following m lines describes the activities preferred by a particular student and begins with an integer k (1 ≤ k ≤ n) indicating the number of activities that student prefers, followed by k integers which are the indices of the activities the student prefers (1-indexed). The next line contains n integers, where the i-th integer indicates the maximum number of students that can participate in activity i. Your program should output a single integer, the maximum number of students that can participate in at least one of their preferred activities. Example input: ``` 4 3 2 1 3 1 1 3 1 2 3 2 2 3 2 1 3 2 ``` Example output: ``` 4 ``` In this example, all 4 students can be accommodated in their preferred activities: - Student 1 prefers activities 1 and 3 and can be placed in activity 1. - Student 2 prefers activity 1 and can also be placed in activity 1. - Student 3 prefers activities 1, 2, and 3 and can be placed in activity 2. - Student 4 prefers activities 2 and 3 and can be placed in activity 3. This maximizes the number of students (4) who can be satisfied.","solution":"from collections import defaultdict, deque def max_satisfied_students(m, n, preferences, capacities): graph = defaultdict(list) capacity = {} source = 0 sink = m + n + 1 nodes = sink + 1 # Building the Graph for i in range(1, m + 1): graph[source].append(i) graph[i].append(source) capacity[(source, i)] = 1 for i in range(1, n + 1): graph[m + i].append(sink) graph[sink].append(m + i) capacity[(m + i, sink)] = capacities[i - 1] for i in range(m): # Student i for act in preferences[i]: # Activity act graph[i + 1].append(m + act) graph[m + act].append(i + 1) capacity[(i + 1, m + act)] = 1 # Applying Edmonds-Karp algorithm to find max flow def bfs(parent): visited = [False] * nodes queue = deque([source]) visited[source] = True while queue: u = queue.popleft() for v in graph[u]: if visited[v] == False and (u, v) in capacity and capacity[(u, v)] > 0: queue.append(v) visited[v] = True parent[v] = u if v == sink: return True return False def edmonds_karp(): parent = [-1] * nodes max_flow = 0 while bfs(parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[(parent[s], s)]) s = parent[s] max_flow += path_flow v = sink while v != source: u = parent[v] capacity[(u, v)] -= path_flow capacity[(v, u)] = capacity.get((v, u), 0) + path_flow v = parent[v] return max_flow return edmonds_karp()"},{"question":"You are given n sticks of different lengths. Your task is to determine if you can form a triangle using any three of these sticks. To form a triangle, the sum of the lengths of any two sticks must be greater than the length of the third stick. You need to check this condition for all possible combinations of three different sticks taken from the given n sticks. The first line contains a single integer: 3 ≤ n ≤ 100 — the number of sticks. The second line contains n integers, each representing the length of a stick. The lengths are given in non-decreasing order and each length is between 1 and 1000 inclusive. Output \\"YES\\" if you can form at least one triangle with the given sticks, and \\"NO\\" otherwise.","solution":"def can_form_triangle(n, sticks): Determines if a triangle can be formed from any three of the given sticks. :param n: Number of sticks :param sticks: List of stick lengths, given in non-decreasing order :return: \\"YES\\" if a triangle can be formed, otherwise \\"NO\\" for i in range(n - 2): if sticks[i] + sticks[i + 1] > sticks[i + 2]: return \\"YES\\" return \\"NO\\""},{"question":"There are several shopping events happening in your city, and you want to find the best deals. Each event has a list of products available at various prices. You are given data about the events in the following format: 1. The first line contains an integer `n` (1 ≤ n ≤ 100), the number of events. 2. For each event, the first line contains an integer `p` (1 ≤ p ≤ 100), the number of products available at that event. 3. The next line contains `p` integers, each representing the price of a product in that event. Your task is to determine the lowest price at which each product is available across all events. Input ----- The input consists of: - The first line with a single integer n (1 ≤ n ≤ 100) - the number of events. - For each event, the first line contains an integer p (1 ≤ p ≤ 100) - the number of products in that event. - The next line contains p integers representing the prices of products at that event. Output ------ For each unique product price, print the lowest price available across all events. The prices should be printed in ascending order. Example ------- Input: 3 3 10 15 20 2 15 25 4 10 15 30 40 Output: 10 15 20 25 30 40 Explanation: There are 3 events. - In the first event, products are priced at 10, 15, and 20. - In the second event, products are priced at 15 and 25. - In the third event, products are priced at 10, 15, 30, and 40. The distinct product prices are 10, 15, 20, 25, 30, and 40. Therefore, the program should output these prices sorted in ascending order.","solution":"def find_lowest_prices_across_all_events(n, events): Given n events, each with a list of product prices, find the lowest unique prices available across all events. :param n: Number of events :param events: A list of tuples, where each tuple contains a number of products and a list of prices :return: A sorted list of unique lowest prices across all events unique_prices = set() for event in events: prices = event[1] unique_prices.update(prices) return sorted(unique_prices)"},{"question":"Polycarpus loves decorating his home with flowers and he wants to put some new flower pots on his windowsill. He has bought several flower pots of different sizes, and he wants to arrange them in a line so that the arrangement looks symmetric. Polycarpus can remove some flower pots if needed to make the arrangement symmetric. A symmetric arrangement means that the sequence of flower pot sizes must read the same forwards and backwards. Polycarpus also wants to maximize the number of flower pots in the symmetric arrangement. The first line of the input contains n (1 ≤ n ≤ 1000) — the number of flower pots. The second line contains n integers a1, a2, …, an (1 ≤ ai ≤ 1000) — the sizes of the flower pots in the order Polycarpus bought them. Print the maximum number of flower pots in a symmetric arrangement. In the second line, print the indices of the flower pots (1-based) that form the symmetric arrangement. If there are multiple solutions, print any of them. If no symmetric arrangement is possible, print a single line with integer 0.","solution":"def longest_symmetric_subsequence(n, pots): def is_palindrome(sequence): return sequence == sequence[::-1] max_length = 0 best_seq = [] best_indices = [] for i in range(1<<n): current_seq = [pots[j] for j in range(n) if (i & (1<<j))] current_indices = [j+1 for j in range(n) if (i & (1<<j))] if is_palindrome(current_seq): if len(current_seq) > max_length: max_length = len(current_seq) best_seq = current_seq best_indices = current_indices if not best_indices: return 0, [] return max_length, best_indices"},{"question":"You are given an array of integers representing the heights of fence posts arranged in a row. The height of each fence post varies and you want to paint a contiguous section of these fence posts. However, due to limitations on paint supplies, you can only paint a section of exactly k consecutive posts at a time. To maximize the uniformity of the painted section and enhance its aesthetics, determine the section of k consecutive posts that minimizes the maximum height within the section. Write a function that takes the array of integers representing the heights of the fence posts and the integer k, and returns the starting index of the section of k posts where the highest fence post is the smallest across all possible sections. # Input - An integer n (2 ≤ n ≤ 100,000) representing the number of fence posts. - An array of n integers where each integer represents the height of a fence post (1 ≤ height ≤ 10^6). - An integer k (1 ≤ k ≤ n) representing the number of consecutive posts to be painted. # Output - An integer representing the starting index (0-based) of the section of k consecutive posts where the maximum height is minimized. # Example Input: ``` 7 [9, 2, 4, 7, 3, 8, 6] 3 ``` Output: ``` 1 ``` # Explanation The function should analyze all possible sections of length k=3: - Section starting at index 0: [9, 2, 4] - Maximum height = 9 - Section starting at index 1: [2, 4, 7] - Maximum height = 7 - Section starting at index 2: [4, 7, 3] - Maximum height = 7 - Section starting at index 3: [7, 3, 8] - Maximum height = 8 - Section starting at index 4: [3, 8, 6] - Maximum height = 8 The section starting at index 1 and the section starting at index 2 both have the maximum height of 7, which is the smallest among all sections. In this case, we can return the starting index of either of these sections. The output is 1. This problem aims to test iterating through subarrays to find a condition and managing edge cases efficiently.","solution":"def min_max_height_section(n, heights, k): Returns the starting index of the section of k consecutive posts where the maximum height is minimized. Parameters: n (int): The number of fence posts. heights (list): The heights of the fence posts. k (int): The number of consecutive posts to be painted. Returns: int: The starting index of the optimal section. min_max_height = float(\'inf\') best_start_index = 0 for i in range(n - k + 1): current_window_max = max(heights[i:i+k]) if current_window_max < min_max_height: min_max_height = current_window_max best_start_index = i return best_start_index"},{"question":"You are given a sequence of n integers and a number k. Your task is to find the maximum sum of any contiguous subarray of length exactly k. The first line contains two integers n (1 le n le 10^5) and k (1 le k le n). The second line contains n space-separated integers representing the elements of the array (-10^4 le a_i le 10^4). Print one integer: the maximum sum of any contiguous subarray of length exactly k.","solution":"def max_subarray_sum(arr, n, k): Returns the maximum sum of any contiguous subarray of length exactly k. # First, calculate the sum of the first `k` elements current_sum = sum(arr[:k]) max_sum = current_sum # Now use a sliding window approach to get the sum of other subarrays for i in range(k, n): # Slide the window by subtracting the element that is leaving the window # and adding the new element that is entering the window current_sum = current_sum - arr[i - k] + arr[i] # Update the maximum sum if the current window sum is greater if current_sum > max_sum: max_sum = current_sum return max_sum # Example usage: # n, k = 5, 2 # arr = [1, 2, 3, 4, 5] # print(max_subarray_sum(arr, n, k)) # Output: 9"},{"question":"Sam is developing a new multiplayer game that involves navigating a matrix-based world. Each player must traverse the game board from the top-left corner to the bottom-right corner. The game board is represented by an n times m grid, where each cell contains a non-negative integer that represents the energy cost to move through that cell. The players can only move right or down at each step. The objective is to find the minimum energy cost required to reach the bottom-right corner from the top-left corner. Given the dimensions of the grid and the energy costs for each cell, write a function that calculates the minimal energy cost path from the top-left corner to the bottom-right corner of the grid. # Input The first line of the input contains two integers, n and m (1 le n, m le 100), the dimensions of the grid. The next n lines each contain m space-separated integers, each representing the energy cost E_{ij} (0 le E_{ij} le 100) to move through cell (i, j). # Output Output a single integer, the minimum energy cost to traverse from the top-left corner to the bottom-right corner of the grid. # Example Input ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output ``` 7 ``` # Explanation The minimal path for the example grid is `1 → 3 → 1 → 1 → 1`, with a total energy cost of `7`. # Notes - You may assume that the given grid will always have a valid path from the top-left corner to the bottom-right corner. - Consider using dynamic programming to efficiently solve this problem.","solution":"def min_energy_cost(n, m, grid): Calculate the minimal energy cost path from the top-left to the bottom-right corner of the grid. Parameters: n (int): Number of rows m (int): Number of columns grid (list of list of int): 2D list representing the energy costs Returns: int: Minimum energy cost to traverse the grid # Initialize a DP table with the same dimensions as the grid dp = [[0] * m for _ in range(n)] # Set the initial cell dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[n-1][m-1]"},{"question":"A large company has n employees organized in a hierarchical structure, with the CEO at the top level. Each employee except the CEO has a direct supervisor. The company has decided to implement a new policy for salary adjustments. Initially, each employee, including the CEO, has a base salary. Over time, the salaries are adjusted through two types of events. The first event is an individual salary change, where the salary of a specific employee is updated to a new specified amount. The second event is a group salary increase, where all employees under a specific supervisor (including the supervisor, their subordinates, the subordinates\' subordinates, etc.) receive an increase by a specified percentage. Your task is to determine the final salary of each employee after all events. The first line contains a single integer n (1 le n le 10^{5}) — the number of employees. The second line contains n integers s_1, s_2, ..., s_n (1 le s_i le 10^{6}) — the initial base salaries of the employees. The next n-1 lines each contain two integers u and v (1 le u, v le n) describing that employee v is directly supervised by employee u. Employee 1 is the CEO and has no supervisor. The next line contains a single integer q (1 le q le 10^{5}) — the number of events. Each of the next q lines contains a single event. Events are given in chronological order. Each event is described as either: 1 can x (1 le can le n, 0 le x le 10^6), meaning that the salary of employee can is updated to x; or 2 super p (1 le super le n, 0 le p le 100), meaning that the salaries of employee super and all employees under them are increased by p percent. Print n integers — the final salaries of all employees after all events. In the first example, the salaries change as follows: - Initial salaries: 1000 1200 900 1100 - Event: 2 2 10 -> Salaries: 1000 1320 900 1100 - Event: 1 3 1000 -> Salaries: 1000 1320 1000 1100 - Event: 2 1 10 -> Salaries: 1100 1452 1100 1210 In the second example, the salaries change as follows: - Initial salaries: 1000 2000 1500 2500 - Event: 1 2 2500 -> Salaries: 1000 2500 1500 2500 - Event: 2 1 20 -> Salaries: 1200 3000 1800 3000 - Event: 2 3 10 -> Salaries: 1200 3000 1980 3000","solution":"def adjust_salaries(n, base_salaries, hierarchy, events): from collections import defaultdict, deque # Convert hierarchy into adjacency list subordinates = defaultdict(list) for u, v in hierarchy: subordinates[u].append(v) # To store the salary updates salaries = list(base_salaries) # Function to perform DFS and update salaries for group increase event def apply_group_increase(employee, percentage): stack = [employee] visited = set() while stack: emp = stack.pop() if emp not in visited: visited.add(emp) salaries[emp-1] = int(salaries[emp-1] * (1 + percentage / 100)) for sub in subordinates[emp]: stack.append(sub) # Process each event for event in events: parts = event.split() if parts[0] == \'1\': # Individual salary change can = int(parts[1]) x = int(parts[2]) salaries[can-1] = x elif parts[0] == \'2\': # Group salary increase super = int(parts[1]) p = int(parts[2]) apply_group_increase(super, p) return salaries"},{"question":"Given a string s of length n, you need to find the length of the longest substring that contains at most k distinct characters. Formally, your task is to write a function that takes a string s and an integer k and returns the length of the longest substring that contains at most k distinct characters. For example, if your function is called with s = \\"eceba\\" and k = 2, it should return 3. In this case, \\"ece\\" is the longest substring that contains at most 2 distinct characters. # Input - The first line contains a string s of length n (1 ≤ n ≤ 10^5). - The second line contains an integer k (1 ≤ k ≤ n). # Output - Output an integer representing the length of the longest substring that contains at most k distinct characters. # Example Input: ``` eceba 2 ``` Output: ``` 3 ``` Explanation: The longest substring with at most 2 distinct characters is \\"ece\\" which has a length of 3.","solution":"def length_of_longest_substring_k_distinct(s, k): Returns the length of the longest substring that contains at most k distinct characters. if k == 0: return 0 n = len(s) if n == 0 or k >= n: return n left = 0 right = 0 char_map = {} max_len = 0 while right < n: char_map[s[right]] = char_map.get(s[right], 0) + 1 while len(char_map) > k: char_map[s[left]] -= 1 if char_map[s[left]] == 0: del char_map[s[left]] left += 1 max_len = max(max_len, right - left + 1) right += 1 return max_len"},{"question":"You are given two strings, `str1` and `str2`. Your task is to determine the minimum number of operations required to convert `str1` into `str2`. The operations allowed are: 1. Insert a character. 2. Remove a character. 3. Replace a character. Write a function `minOperations(str1, str2)` that takes in two strings `str1` and `str2` and returns the minimum number of operations required to convert `str1` into `str2`. # Input: - `str1`: a non-empty string of length n (1 ≤ n ≤ 1000) - `str2`: a non-empty string of length m (1 ≤ m ≤ 1000) # Output: - An integer representing the minimum number of operations required to convert `str1` into `str2`. # Example: Example 1: ```plaintext Input: str1 = \\"kitten\\" str2 = \\"sitting\\" Output: 3 Explanation: 1. Replace \'k\' with \'s\' 2. Insert \'i\' 3. Replace \'e\' with \'i\' ``` Example 2: ```plaintext Input: str1 = \\"flaw\\" str2 = \\"lawn\\" Output: 2 Explanation: 1. Remove \'f\' 2. Insert \'n\' at the end ``` # Constraints: - The length of both strings will be between 1 and 1000. - The strings consist of lowercase English characters only. Your solution should consider the efficiency and handle the input sizes within the given constraints appropriately.","solution":"def minOperations(str1, str2): Returns the minimum number of operations required to convert str1 into str2. Operations allowed: 1. Insert a character. 2. Remove a character. 3. Replace a character. Implements the dynamic programming approach to solve the problem. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"question":"In the land of Kekoland, there is a city that has a peculiar feature: its streets are arranged in a perfect grid of size m x n. Each cell in this grid can be either empty or contain an obstacle. Ahmed, who lives at the top-left corner of the grid (0,0), wants to visit his friend who lives at the bottom-right corner of the grid (m-1, n-1). Ahmed can only move right or down due to the layout of the city streets. However, there might be obstacles in his way that prevent him from passing through certain cells. Ahmed wants to know the number of distinct paths he can take to reach his friend\'s house considering the obstacles. You need to write a program that calculates the number of different paths from the top-left corner to the bottom-right corner of the grid. **Input:** - The first line contains two integers m and n (1 ≤ m, n ≤ 100), the dimensions of the grid. - The next m lines each contain n integers, where each integer is either 0 (representing an empty cell) or 1 (representing an obstacle). **Output:** - Print a single integer representing the number of distinct paths from the top-left corner to the bottom-right corner of the grid. **Example:** Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Explanation: - The grid looks like this: ``` 0 0 0 0 1 0 0 0 0 ``` - There are two paths from the top-left to the bottom-right: - Right -> Right -> Down -> Down - Down -> Down -> Right -> Right - Note that the path going through the obstacle (1) is not possible.","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are hosting a guessing game where participants try to guess a hidden number between 1 and 100. The game operates in rounds, and in each round, a participant provides a guess. The game provides feedback in the form of \\"higher\\" or \\"lower\\" compared to the previous guess. You will write a program to simulate this game. The program will receive a sequence of guesses and provide feedback for each guess until the hidden number is found. The program should stop as soon as the correct guess is made. The first line of input contains an integer, h (1 ≤ h ≤ 100), which is the hidden number. The second line contains a sequence of integers representing the guesses made by participants. The number of guesses will be between 1 and 100, inclusive. The guesses are separated by spaces. For each guess, starting from the second guess, your program should output \\"higher\\" if the guess is higher than the previous guess but still incorrect, \\"lower\\" if the guess is lower than the previous guess but still incorrect, and \\"correct\\" if the guess is exactly the hidden number. If the hidden number is found, the program should terminate immediately without evaluating any further guesses. Input: ``` 45 50 40 42 45 47 ``` Output: ``` lower higher higher correct ``` Note: In the above example, - The first guess (50) is too high, so the next feedback should compare to it. - The second guess (40) is lower than the first, so the output is \\"lower.\\" - The third guess (42) is higher than 40, so the output is \\"higher.\\" - The fourth guess (45) is correct, so the output is \\"correct\\" and the program stops.","solution":"def guessing_game(hidden_number, guesses): Simulates a guessing game where participants try to guess a hidden number between 1 and 100, providing feedback based on the guess. Parameters: hidden_number (int): The hidden number to be guessed. guesses (list of int): A list of guesses made by the participants. Returns: list of str: A list of feedback strings corresponding to each guess. feedback = [] for guess in guesses: if guess == hidden_number: feedback.append(\\"correct\\") break elif guess < hidden_number: feedback.append(\\"higher\\") else: feedback.append(\\"lower\\") return feedback"},{"question":"Given an integer array `arr` of size `n` representing the heights of hills in a row, Polycarp wants to find continuous subarrays that form valleys. A valley is defined as a subarray in which the heights of the hills strictly decrease until a lowest point, and then strictly increase. For example, in the array `[5, 3, 1, 2, 4]`, the subarray `[5, 3, 1, 2, 4]` forms a valley because the heights strictly decrease from `5` to `1` and then strictly increase from `1` to `4`. Write a function that calculates the number of valleys in the given array. Your function should return an integer representing the number of valleys. # Input - The function should take an integer `n` (1 ≤ `n` ≤ 1000) representing the number of elements in the array. - The function should take an array `arr` of `n` integers (-100 ≤ `arr[i]` ≤ 100) representing the heights of the hills. # Output - Return an integer representing the number of valleys in the given array. # Examples ```python assert count_valleys(5, [5, 3, 1, 2, 4]) == 1 assert count_valleys(6, [6, 5, 4, 3, 2, 1]) == 0 assert count_valleys(7, [10, 7, 6, 4, 5, 9, 11]) == 1 assert count_valleys(8, [5, 3, 1, 4, 6, 2, 3, 7]) == 2 ``` # Note - The array can have multiple valleys. - Elements of the array can be negative.","solution":"def count_valleys(n, arr): Returns the number of valleys in the given array. if n < 3: return 0 valleys_count = 0 i = 1 while i < n - 1: # Find the start of the valley (strictly decreasing) if arr[i - 1] > arr[i]: j = i # Traverse down the valley while j < n - 1 and arr[j] > arr[j + 1]: j += 1 # If we have found a lowest point, let\'s check the strictly increasing part if j < n - 1 and arr[j] < arr[j + 1]: while j < n - 1 and arr[j] < arr[j + 1]: j += 1 valleys_count += 1 i = j # Move the index to the end of the current valley else: i = j + 1 # Move the index to avoid infinite loop else: i += 1 # Move to the next element return valleys_count"},{"question":"Polycarpus is at the annual coding competition and has just learned about the wonders of regular expressions. As a warm-up, he decides to practice by counting the occurrences of a specific pattern in given strings. You are given a pattern and a list of strings. Your task is to write a program that determines the number of times the pattern occurs in each string (like a substring, and overlapping occurrences count separately). Polycarpus is particularly interested in the case-insensitive occurrences, meaning that the pattern should match both uppercase and lowercase letters in a case-insensitive manner. # Input The first line contains a pattern (a string of length p, 1 ≤ p ≤ 100). The second line contains an integer n (1 ≤ n ≤ 100) representing the number of strings. The following n lines contain strings, each with a length not exceeding 1000. # Output For each string, output a single integer — the number of occurrences of the pattern in that string. # Example Input ``` abC 3 abCabcABc Abcdefg nooccurrence ``` Output ``` 3 1 0 ``` # Note In the first example, the pattern \\"abC\\" appears 3 times: at positions 1 (\\"abC\\"), 4 (\\"abc\\"), and 7 (\\"ABc\\") in a case-insensitive manner.","solution":"import re def count_pattern_occurrences(pattern, strings): Counts occurrences of the pattern (case-insensitive) in each string in the strings list. :param pattern: The pattern to search for (a string) :param strings: A list of strings in which to search for the pattern :return: A list of integers where each integer is the count of the pattern in the corresponding string pattern = re.compile(re.escape(pattern), re.IGNORECASE) return [len(pattern.findall(string)) for string in strings]"},{"question":"You are given a string `s` that consists only of lowercase English letters. Your task is to transform `s` into a new string `t` using the following operations: 1. Choose any character in `s` and remove it. 2. Choose two consecutive characters in `s` and if they are identical, remove one of them. You need to find out the minimum number of operations required to transform the given string `s` into a palindrome. A string is called a palindrome if it reads the same backward as forward. # Input - The first line contains a single integer `n` (1 leq n leq 10^5) — the length of the string `s`. - The second line contains a string `s` of length `n`. # Output Print a single integer — the minimum number of operations required to transform `s` into a palindrome. # Example Input ``` 5 ababa ``` Output ``` 0 ``` Input ``` 4 abca ``` Output ``` 1 ``` # Explanation In the first example, `s` is already a palindrome, so the minimum number of operations required is `0`. In the second example, to make the string `s` = \\"abca\\" a palindrome, we can perform one operation to remove the character \'c\' making the string \\"aba\\".","solution":"def min_operations_to_make_palindrome(s): Returns the minimum number of operations required to transform the string `s` into a palindrome. left = 0 right = len(s) - 1 operations = 0 while left < right: if s[left] != s[right]: operations += 1 left += 1 right -= 1 return operations"},{"question":"You are part of the event planning team for a large company. You need to organize a sequence of meetings where each meeting room has specific available time slots. Your task is to ensure that all meetings are scheduled in such a way that no two meetings overlap in the same room. Given a list of meetings where each meeting is defined by a start time and an end time, determine the minimum number of meeting rooms required to schedule all the meetings without any overlaps. For each test case, the first line contains an integer n (1 le n le 10^5) — the number of meetings. The next n lines contain two space-separated integers s_i and e_i (0 le s_i < e_i le 10^9) — the start time and end time of the i-th meeting. Output the minimum number of meeting rooms required for each test case. The first line of input contains an integer t (1 le t le 1000) — the number of test cases. Following t test case descriptions are provided. Example: Input: ``` 3 2 1 10 2 5 3 1 2 2 3 3 4 4 1 4 2 3 3 6 5 8 ``` Output: ``` 2 1 2 ``` Explanation: In the first test case, you need 2 rooms for the meetings because the second meeting starts before the first one ends. In the second test case, all meetings can be scheduled in one room as they do not overlap. In the third test case, the first room is utilized for the first meeting from 1 to 4 and the second room is needed for meetings 3 to 6 overlapping with the third meeting from 5 to 8. Thus, two rooms are required.","solution":"import heapq def minMeetingRooms(intervals): Determines the minimum number of meeting rooms required for scheduling all meetings without overlap. if not intervals: return 0 intervals.sort(key=lambda x: x[0]) min_heap = [] heapq.heappush(min_heap, intervals[0][1]) for i in range(1, len(intervals)): if intervals[i][0] >= min_heap[0]: heapq.heappop(min_heap) heapq.heappush(min_heap, intervals[i][1]) return len(min_heap) def solve(t, test_cases): Processes multiple test cases determining the minimum number of meeting rooms required for each. results = [] for i in range(t): n, meetings = test_cases[i] results.append(minMeetingRooms(meetings)) return results def main(input_data): Parses the input data and returns the output as a list. input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) idx = 1 test_cases = [] for _ in range(t): n = int(input_lines[idx]) idx += 1 meetings = [] for _ in range(n): s, e = map(int, input_lines[idx].split()) meetings.append((s, e)) idx += 1 test_cases.append((n, meetings)) return solve(t, test_cases) # Example usage: # input_data = \\"3n2n1 10n2 5n3n1 2n2 3n3 4n4n1 4n2 3n3 6n5 8n\\" # Output: [2, 1, 2]"},{"question":"A smart traffic management system is being implemented in City S to ease traffic congestion. The system collects traffic data every minute, recording the number of cars passing through a particular checkpoint in a list. The mayor of City S wants to generate daily traffic summary reports to understand traffic patterns better. For each day, the summary report should provide the maximum number of cars counted in any single minute and the minimum number of cars counted in any single minute throughout the day. However, due to high traffic data volume, the report generation should be efficient. You are given two integers m and d (1 ≤ m ≤ 105, 1 ≤ d ≤ 365), where m is the number of data points collected each minute in a day, and d is the number of days. You are also given a list of m * d integers, where the first m integers correspond to the data points collected on the first day, the next m integers correspond to the data points collected on the second day, and so on. Write a program that generates the summary report for each day, giving you two space-separated integers for each day: the maximum number of cars counted in a single minute and the minimum number of cars counted in a single minute. The first line of the input contains two integers m and d. The second line of the input contains m * d integers, the traffic data points. Output d lines, each containing two space-separated integers: the maximum and minimum number of cars counted in any single minute for each day. **Example:** Input: ``` 5 2 20 30 10 25 50 15 35 40 10 45 ``` Output: ``` 50 10 45 10 ``` Explanation: For the first day, the traffic data points are [20, 30, 10, 25, 50]. The maximum number of cars counted in a single minute is 50, and the minimum number of cars counted in a single minute is 10. For the second day, the traffic data points are [15, 35, 40, 10, 45]. The maximum number of cars counted in a single minute is 45, and the minimum number of cars counted in a single minute is 10.","solution":"def generate_daily_reports(m, d, traffic_data): Generates daily reports providing the maximum and minimum number of cars counted in any single minute. Args: m (int): Number of data points collected each minute in a day. d (int): Number of days. traffic_data (list of int): List of m * d integers representing the traffic data points. Returns: list of tuples: Each tuple contains two integers, the maximum and minimum of the traffic data for a day. reports = [] for i in range(d): daily_data = traffic_data[i*m:(i+1)*m] daily_max = max(daily_data) daily_min = min(daily_data) reports.append((daily_max, daily_min)) return reports def process_input_and_generate_reports(input_text): Process the single input text to extract m, d, and traffic_data, and generate the daily reports. Args: input_text (str): Input text containing m, d, and traffic_data. Returns: list of tuples: Each tuple contains two integers, the maximum and minimum of the traffic data for a day. lines = input_text.strip().split(\'n\') m, d = map(int, lines[0].split()) traffic_data = list(map(int, lines[1].split())) return generate_daily_reports(m, d, traffic_data)"},{"question":"You are given two strings, s and t. Your task is to find the length of the longest subsequence of s that can be rearranged to form a subsequence of t. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Input: - The first line contains a string s (1 leq |s| leq 10^5). - The second line contains a string t (1 leq |t| leq 10^5). Output: - Print a single integer, the length of the longest subsequence of s that can be rearranged to form a subsequence of t. Example 1: Input: ``` abc acbd ``` Output: ``` 3 ``` Example 2: Input: ``` abcdef fedcba ``` Output: ``` 6 ``` Explanation: In Example 1, the subsequence \\"abc\\" of `s` can be rearranged to form the subsequence \\"abc\\" or \\"acb\\" of `t`. In Example 2, the subsequence \\"abcdef\\" of `s` can be rearranged to form the subsequence \\"fedcba\\" of `t`.","solution":"def longest_rearranged_subsequence(s, t): from collections import Counter # Count frequency of each character in both strings counter_s = Counter(s) counter_t = Counter(t) # Take the minimum for each character to form the longest common subsequence longest_seq_len = 0 for char in counter_s: longest_seq_len += min(counter_s[char], counter_t.get(char, 0)) return longest_seq_len"},{"question":"You are given a string consisting of lowercase Latin letters and an integer `k`. You need to remove exactly `k` characters from the string such that the resulting string is lexicographically smallest among all possible results. The input consists of two lines: - The first line contains the string `s` (1 ≤ |s| ≤ 1000). - The second line contains the integer `k` (1 ≤ k ≤ |s|). Print a single line containing the lexicographically smallest string that can be obtained by removing exactly `k` characters from the input string. Example: Input: ``` abcde 2 ``` Output: ``` abc ``` Explanation: By removing the characters \'d\' and \'e\', the resulting string \\"abc\\" is the smallest possible string.","solution":"def lexicographically_smallest(s, k): Returns the lexicographically smallest string after removing exactly k characters from s. stack = [] to_remove = k for char in s: while to_remove > 0 and stack and stack[-1] > char: stack.pop() to_remove -= 1 stack.append(char) # If there are still characters to remove, remove them from the end while to_remove > 0: stack.pop() to_remove -= 1 return \'\'.join(stack)"},{"question":"You are given a set of points on a two-dimensional plane, where each point is either a Mystery Point or a Goal Point. Mystery Points are marked with the letter \\"M\\" and coordinate (xm, ym). Goal Points are marked with the letter \\"G\\" and coordinate (xg, yg). A Goal is \\"reachable\\" from a Mystery Point if it is within a given maximum distance d. From each Mystery Point, you can only reach one Goal Point. Write a program to determine the maximum number of Mystery Points that can successfully reach a Goal Point. Each Goal Point can only be assigned to one Mystery Point. Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) representing the number of Mystery Points and Goal Points respectively. - The second line contains an integer d (1 ≤ d ≤ 10^9) representing the maximum distance within which a Goal is reachable from a Mystery Point. - The next n lines each contain two integers xm and ym (-10^9 ≤ xm, ym ≤ 10^9), representing the coordinates of the Mystery Points. - The next m lines each contain two integers xg and yg (-10^9 ≤ xg, yg ≤ 10^9), representing the coordinates of the Goal Points. Output: - A single integer representing the maximum number of Mystery Points that can reach a Goal Point. Example: ``` Input 3 3 5 1 1 2 2 3 3 5 5 6 6 10 10 Output 2 ``` Explanation: In the example, the Mystery Points (1,1), (2,2), and (3,3) are given along with Goal Points (5,5), (6,6), and (10,10). The maximum distance d within which a Goal Point is reachable from a Mystery Point is 5 units. Here: - The Mystery Point (1,1) can reach Goal Points (5,5) and (6,6). - The Mystery Point (2,2) can reach Goal Points (5,5) and (6,6). - The Mystery Point (3,3) can reach Goal Points (5,5), (6,6), and (10,10). The optimal assignment would have (1,1) reach (5,5) and (2,2) reach (6,6), resulting in a maximum of 2 reachable Goal Points.","solution":"import math from heapq import heappop, heappush def euclidean_distance(x1, y1, x2, y2): Returns the Euclidean distance between two points (x1, y1) and (x2, y2). return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) def max_reachable_mystery_points(n, m, d, mystery_points, goal_points): Returns the maximum number of mystery points that can reach a goal point given the maximum distance d. reachable_goals = [] # List of lists for each mystery point # Calculate reachable goal points for each mystery point for mx, my in mystery_points: reachable_goal_indices = [] for idx, (gx, gy) in enumerate(goal_points): if euclidean_distance(mx, my, gx, gy) <= d: heappush(reachable_goal_indices, (euclidean_distance(mx, my, gx, gy), idx)) reachable_goals.append(reachable_goal_indices) assigned_goals = set() assigned_mysteries = 0 for goals in reachable_goals: while goals: _, goal_idx = heappop(goals) if goal_idx not in assigned_goals: assigned_goals.add(goal_idx) assigned_mysteries += 1 break return assigned_mysteries"},{"question":"Write a Python program to solve the following problem: Given an integer array `nums` sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same, and the result should be stored in the first part of the array. Do not allocate extra space for another array, but you may assume that it is possible to modify the length of the array. Return the new length of the array after duplicates have been removed. # Example: **Input:** ```python nums = [1, 1, 2] ``` **Output:** ```python 2 ``` **Explanation:** The first two elements of `nums` contain `1` and `2`. The rest of the elements don\'t matter. **Input:** ```python nums = [0,0,1,1,1,2,2,3,3,4] ``` **Output:** ```python 5 ``` **Explanation:** The first five elements of `nums` contain `0, 1, 2, 3, and 4`. The rest of the elements don\'t matter. # Constraints: - 0 <= nums.length <= 3 * 10^4","solution":"def remove_duplicates(nums): Removes duplicates in-place in the sorted list nums such that each unique element appears only once. Returns the new length of the array after duplicates have been removed. :param nums: List[int] - List of integers sorted in non-decreasing order :return: int - The new length of the array after duplicates have been removed if not nums: return 0 write_index = 1 for i in range(1, len(nums)): if nums[i] != nums[i - 1]: nums[write_index] = nums[i] write_index += 1 return write_index"},{"question":"Given an undirected graph with `n` vertices and `m` edges, each vertex has a weight. You need to find the maximum possible sum of the weights of vertices in any connected component of the graph. # Input - The first line contains two integers `n` and `m` (1 ≤ `n` ≤ 1000, 0 ≤ `m` ≤ 10000) — the number of vertices and the number of edges, respectively. - The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ `wi` ≤ 1000) — the weights of the vertices. - Each of the next `m` lines contains two integers `u` and `v` (1 ≤ `u`, v ≤ `n`) — vertices connected by an edge. # Output Print a single integer — the maximum possible sum of the weights of vertices in any connected component of the graph. # Example Input ``` 5 3 1 3 2 2 5 1 2 3 4 4 5 ``` Output ``` 9 ``` # Note In the example, there are two connected components: 1. Component 1: Vertices {1, 2} with total weight 1 + 3 = 4 2. Component 2: Vertices {3, 4, 5} with total weight 2 + 2 + 5 = 9 So, the maximum possible sum of weights of vertices in a connected component is 9.","solution":"def max_connected_component_weight(n, m, weights, edges): from collections import defaultdict, deque # Create the adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) # Function to perform BFS and calculate the sum of weights for the connected component def bfs(start): queue = deque([start]) visited[start] = True component_weight_sum = 0 while queue: node = queue.popleft() component_weight_sum += weights[node] for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_weight_sum # Initialize visited list visited = [False] * n max_weight_sum = 0 for i in range(n): if not visited[i]: max_weight_sum = max(max_weight_sum, bfs(i)) return max_weight_sum"},{"question":"Andy is an ardent musician who loves composing new pieces using his digital piano. The piano has \'n\' keys, each configured to produce a unique note when pressed. Andy has a favorite sequence of notes he adores, and he wants to check if he can play it on his piano. The piano\'s keys are numbered from 1 to n, and the list of notes produced by each key is given as an array where the i-th key produces the note numbered arr[i]. The favorite sequence is also given in the form of an array of notes. Andy can press multiple keys simultaneously to play multiple notes. He wants to know if it\'s possible to play the sequence of his favorite notes consecutively on his piano, pressing one or multiple keys at a time for each note in the sequence. Write a function `can_play_favorite_sequence(n, arr, favorite_sequence)` that determines whether Andy can play his favorite sequence of notes consecutively on his digital piano. Your function should take the following inputs: - `n`: an integer representing the number of keys on the piano (1 ≤ n ≤ 100,000). - `arr`: an array of integers of length n where `arr[i]` represents the note played by the i-th key (1 ≤ arr[i] ≤ 10^9). - `favorite_sequence`: an array of integers representing Andy\'s favorite sequence of notes (1 ≤ len(favorite_sequence) ≤ n). The function should return a boolean value, `True` if the favorite sequence can be played consecutively, and `False` otherwise. Example: ``` Input: n = 6 arr = [5, 8, 3, 5, 8, 7] favorite_sequence = [5, 8, 7] Output: True Input: n = 5 arr = [4, 2, 3, 1, 5] favorite_sequence = [3, 3, 4] Output: False ```","solution":"def can_play_favorite_sequence(n, arr, favorite_sequence): Determines if the favorite sequence can be played consecutively on the piano. :param n: Number of keys on the piano :param arr: List of integers where arr[i] represents the note played by the i-th key :param favorite_sequence: List of integers representing the favorite sequence of notes :return: Boolean value, True if the favorite sequence can be played consecutively, otherwise False seq_index = 0 for note in arr: if note == favorite_sequence[seq_index]: seq_index += 1 if seq_index == len(favorite_sequence): return True return False"},{"question":"Given a binary tree, determine the maximum sum of any path from the tree\'s root node to a leaf. Each node in the tree contains a single integer value. A path in a binary tree is defined as a sequence of nodes starting from the root node, moving downwards through the parent-child connections, and ending at a leaf node. You will be given the structure of the tree as input in the form of a single linked list representation where each node is defined by three integers representing its value, its left child, and its right child. If a node does not have a left or right child, the respective value will be denoted by -1. Write a function to determine the maximum sum of any path from the root node to a leaf node. # Input: - The first line contains an integer `n` (1 leq n leq 10^5) - the number of nodes in the binary tree. - The next `n` lines each contain three space-separated integers `val`, `left`, and `right` representing the value of the node, the index of its left child, and the index of its right child, respectively. The index of the nodes starts at 0 and a value of -1 indicates the absence of a child. # Output: Output a single integer - the maximum sum of any path from the root node to a leaf. # Example: Input: ``` 5 10 -1 1 2 2 3 5 4 -1 1 -1 -1 20 -1 -1 ``` Output: ``` 37 ``` Explanation: The tree structure is as follows: ``` 10 2 / 5 1 / 20 ``` The maximum sum path is `10 -> 2 -> 5 -> 20`, which gives a sum of 37.","solution":"def max_sum_path(tree): def dfs(node_index): if node_index == -1: return 0 node = tree[node_index] left_sum = dfs(node[\'left\']) right_sum = dfs(node[\'right\']) return node[\'value\'] + max(left_sum, right_sum) return dfs(0) def build_tree(nodes): tree = [] for node in nodes: value, left, right = node tree.append({\'value\': value, \'left\': left, \'right\': right}) return tree def max_sum_from_input(n, treelist): tree = build_tree(treelist) return max_sum_path(tree)"},{"question":"In a coding competition, the participants are given a rectangular grid of dimensions `n x m`, where `n` is the number of rows and `m` is the number of columns. Each cell in the grid contains a non-negative integer representing the number of points that cell contributes. A participant can move from one cell to another cell according to the following rules: - They can move to the cell directly to the right. - They can move to the cell directly below. The goal for each participant is to find the path from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1) which maximizes the sum of the points along the path. The first line of input contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) - the dimensions of the grid. The next `n` lines each contain `m` integers, representing the points in each cell of the grid (0 ≤ points ≤ 1000 per cell). The output should be a single integer, which is the maximum sum of points that can be collected on a path from the top-left cell to the bottom-right cell following the movement rules. Input: ``` 3 3 1 2 3 4 5 6 7 8 9 ``` Output: ``` 29 ``` Explanation: The path with the maximum sum of points is: 1 → 2 → 3 → 6 → 9, and the sum is 1 + 2 + 3 + 6 + 9 = 21.","solution":"def max_points_path(grid): Returns the maximum sum of points that can be collected on a path from the top-left cell to the bottom-right cell. n = len(grid) m = len(grid[0]) # Create a 2D dp array filled with 0\'s dp = [[0] * m for _ in range(n)] # Base case, starting point dp[0][0] = grid[0][0] # Fill the dp array for the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the dp array for the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The answer is the value in the bottom-right cell return dp[n-1][m-1] # Running the function with the given example grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] print(max_points_path(grid)) # Output: 29"},{"question":"To celebrate the grand opening of the new amusement park, several friends decided to meet up and enjoy the attractions. There are n friends, each living at different locations in their city, and all of them will take a taxi to the amusement park. The cost of a taxi is proportional to the distance travelled. Each friend must pay their own taxi fare, and they all want to minimize the total amount of money they collectively spend. Each friend\'s house can be represented as a point (xi, yi) on a 2D grid, the amusement park is at a fixed point (xpark, ypark), and the cost for a friend to travel from their home to the park is equal to the Manhattan distance between their home and the park. Given the coordinates of each friend\'s house and the amusement park, calculate the minimum total cost for all friends to get to the amusement park. First line of input contains an integer n (1 ≤ n ≤ 105) - the number of friends. The second line contains two integers xpark and ypark (0 ≤ xpark, ypark ≤ 109) - the coordinates of the amusement park. Each of the next n lines contains two integers xi and yi (0 ≤ xi, yi ≤ 109) - the coordinates of each friend\'s house. Output a single integer - the minimum total taxi cost for all friends to travel to the amusement park. # Sample Input 5 3 3 1 1 2 2 3 4 5 6 7 8 # Sample Output 25 # Explanation: Sum of Manhattan distances from each friend\'s house to the amusement park: - Friend 1: |3-1| + |3-1| = 2 + 2 = 4 - Friend 2: |3-2| + |3-2| = 1 + 1 = 2 - Friend 3: |3-3| + |3-4| = 0 + 1 = 1 - Friend 4: |3-5| + |3-6| = 2 + 3 = 5 - Friend 5: |3-7| + |3-8| = 4 + 5 = 9 Total cost: 4 + 2 + 1 + 5 + 9 = 21","solution":"def min_total_taxi_cost(n, xpark, ypark, friends_coordinates): Calculate the minimum total taxi cost for all friends to travel to the amusement park. Parameters: n (int): The number of friends. xpark (int): The x coordinate of the amusement park. ypark (int): The y coordinate of the amusement park. friends_coordinates (list of tuples): A list of tuples where each tuple contains two integers representing the coordinates (xi, yi) of each friend\'s house. Returns: int: The minimum total taxi cost. total_cost = 0 for xi, yi in friends_coordinates: total_cost += abs(xi - xpark) + abs(yi - ypark) return total_cost"},{"question":"You are given two integers n and k. Your task is to generate a sequence of n positive integers that satisfies the following conditions: 1. The sum of the sequence should be exactly equal to k. 2. All integers in the sequence should be distinct. 3. The sequence should be lexicographically smallest. If it is impossible to generate such a sequence, print -1. # Input The input consists of two space-separated integers n and k (1 ≤ n, k ≤ 10000). # Output If a valid sequence exists, print the sequence of n positive integers that satisfy the conditions. Otherwise, print -1. # Examples Example 1: Input: ``` 3 6 ``` Output: ``` 1 2 3 ``` Example 2: Input: ``` 2 3 ``` Output: ``` 1 2 ``` Example 3: Input: ``` 5 15 ``` Output: ``` 1 2 3 4 5 ``` Example 4: Input: ``` 2 10 ``` Output: ``` -1 ```","solution":"def generate_lexicographically_smallest_sequence(n, k): Returns the smallest lexicographic sequence of n distinct positive integers that sums to k, or -1 if it\'s not possible. # If the sum of the first n natural numbers is greater than k, it\'s impossible if (n*(n + 1)) // 2 > k: return [-1] # Initialize result with the first n natural numbers result = list(range(1, n + 1)) current_sum = sum(result) # If the sum is exactly equal, return result if current_sum == k: return result # Adjust the elements to get the sum equal to k for i in range(n - 1, -1, -1): diff = k - current_sum max_possible_value = i + 1 + diff if max_possible_value > result[-1]: current_sum += diff result[i] += diff else: return [-1] return result"},{"question":"On a 2D plane, there are m circles defined by their center coordinates (xi, yi) and radius ri. A rectangle is represented by its lower-left and upper-right corners with coordinates (x1, y1) and (x2, y2) respectively. Your task is to determine if any part of any circle intersects or is contained within the rectangle. The first line contains an integer m (1 ≤ m ≤ 105), representing the number of circles. The next m lines each contain three integers xi, yi, ri (0 ≤ xi, yi, ri ≤ 106) representing the center coordinates and radius of each circle. The last line contains four integers x1, y1, x2, y2 (0 ≤ x1, y1, x2, y2 ≤ 106), representing two corners of the rectangle. For each circle, output \\"YES\\" if any part of the circle intersects or lies within the rectangle, otherwise output \\"NO\\". Example: Input: 3 5 5 3 8 4 2 2 1 1 3 3 7 6 Output: YES YES NO Explanation: The circles with center coordinates (5,5) and (8,4) intersect the rectangle defined by (3,3) and (7,6), while the circle with center (2,1) does not.","solution":"def is_circle_in_rect(m, circles, x1, y1, x2, y2): results = [] for circle in circles: xi, yi, ri = circle # Rectangle bounds rect_left = min(x1, x2) rect_right = max(x1, x2) rect_bottom = min(y1, y2) rect_top = max(y1, y2) # Check the circle is either inside or intersects the rectangle # Checking if any edge of the rectangle is within the circle radius if (rect_left <= xi <= rect_right and rect_bottom <= yi <= rect_top): results.append(\\"YES\\") elif (rect_left - ri <= xi <= rect_right + ri and rect_bottom - ri <= yi <= rect_top + ri): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Sample Input m = 3 circles = [(5, 5, 3), (8, 4, 2), (2, 1, 1)] x1, y1, x2, y2 = 3, 3, 7, 6 # Function Call and Print for Testing print(is_circle_in_rect(m, circles, x1, y1, x2, y2)) # Output should be [\'YES\', \'YES\', \'NO\']"},{"question":"You are given an array of integers `nums` which is initially sorted in non-decreasing order but has been rotated at an unknown pivot. The array may contain duplicates. Your task is to determine if the target value exists within this array. Implement a function that takes `nums` and `target` as input and returns `true` if the target exists in the array, and `false` otherwise. You are required to achieve this with a time complexity better than O(n). # Function Signature: Python: ```python def search(nums: List[int], target: int) -> bool: ``` # Input: - `nums`: A list of integers that has been sorted in non-decreasing order, then rotated at an unknown pivot. The list contains `n` integers where `1 <= n <= 5000`. - `target`: An integer value to search for in the `nums` list, where `-10^4 <= target <= 10^4`. # Output: - Returns a boolean value `true` if the target exists in the array, `false` otherwise. # Example: Example 1: ```python nums = [2,5,6,0,0,1,2] target = 0 Output: true ``` Example 2: ```python nums = [2,5,6,0,0,1,2] target = 3 Output: false ``` # Notes: - Think about how binary search can be adapted to work in this situation despite the rotation and duplicates. - You might encounter arrays where the rotation point is not immediately clear, especially with duplicates present. Your solution should handle these edge cases appropriately.","solution":"def search(nums, target): Returns True if target exists in the rotated sorted array nums, otherwise False. if not nums: return False left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return True # If we can\'t distinct the elements at left, mid and right if nums[left] == nums[mid] == nums[right]: left += 1 right -= 1 # When middle element is in the left part of rotated array elif nums[left] <= nums[mid]: # Check if target is in the left part if nums[left] <= target < nums[mid]: right = mid - 1 else: left = mid + 1 # When middle element is in the right part of rotated array else: # Check if target is in the right part if nums[mid] < target <= nums[right]: left = mid + 1 else: right = mid - 1 return False"},{"question":"A mysterious signal has been detected from outer space and the Ministry of Space Exploration has tasked their top scientist, Alice, to decipher it. The signal consists of a sequence of integers, but its meaning is still unclear. To aid Alice in her research, she has developed a simple yet interesting game. The signal is a sequence of integers of length ( n ). The game consists of repeatedly finding the \\"peak\\" and \\"trough\\" elements within a specified subrange of this sequence. A peak is defined as an element that is greater than its immediate neighbors, while a trough is an element that is smaller than its immediate neighbors. The peak and trough discovery can be instrumental in deciphering the signal pattern. Given an integer ( n ) representing the length of the sequence and a sequence of ( n ) integers, your task is to find one peak and one trough in the sequence or determine that either might not exist within a given number of queries. You can ask up to 100 queries, each specifying a subrange of the sequence defined by two indices ( l ) and ( r ) (1 ≤ l ≤ r ≤ n). Each query will return the indices of one peak and one trough within the subrange ( [l, r] ), if they exist. **Input:** 1. The first line contains a single integer ( n ) (2 ≤ ( n ) ≤ ( 10^5 )) representing the length of the sequence. 2. The second line contains ( n ) integers ( a ) ((|a_i|) ≤ ( 10^9 )) representing the sequence. **Output:** After a series of up to 100 queries, output \\"PEAK x\\" and \\"TROUGH y\\" where ( x ) and ( y ) are the indices of a peak and a trough in the sequence. If no peak or trough can be found, output \\"NO PEAK\\" or \\"NO TROUGH\\" respectively. **Queries:** Each query is of the form \\"QUERY l r\\" and should return two integers: 1. The index of a peak element within the subrange [l, r], if it exists. 2. The index of a trough element within the subrange [l, r], if it exists. **Example:** ```plaintext Input: 5 1 3 2 5 4 Query: QUERY 1 5 Output: PEAK 2 TROUGH 3 ``` **Conditions:** - A peak is greater than both its neighbors. - A trough is smaller than both its neighbors. - First and last elements cannot be peaks or troughs. Help Alice discover peaks and troughs to analyze the mysterious signal!","solution":"def find_peak_and_trough(arr): Function to find the indices of one peak and one trough in the sequence, if they exist. n = len(arr) peak = None trough = None for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: peak = i if arr[i] < arr[i-1] and arr[i] < arr[i+1]: trough = i if peak is not None and trough is not None: break return peak, trough"},{"question":"Sam is a treasure hunter who has recently discovered a series of ancient tunnels running through the mountains. These tunnels form a complex network, and Sam wants to find the longest possible path through the tunnels without passing through the same tunnel more than once. The network consists of `n` tunnels and `m` intersections, where each tunnel connects two intersections. The tunnels are bidirectional, meaning that Sam can travel from one intersection to another and back through the same tunnel. However, Sam does not want to revisit any tunnel during his exploration to maximize the length of his adventure. Write a program to determine the length of the longest path Sam can travel through the network of tunnels without passing through the same tunnel more than once. The input consists of multiple lines: - The first line contains two integers `n` (1 ≤ n ≤ 100) and `m` (1 ≤ m ≤ 200), representing the number of intersections and tunnels, respectively. - The next `m` lines each contain two integers `u` and `v` (1 ≤ u, v ≤ n), representing a tunnel connecting intersections `u` and `v`. Output a single integer: the length of the longest path Sam can travel. **Example Input:** ``` 5 6 1 3 1 2 2 4 2 5 3 4 4 5 ``` **Example Output:** ``` 4 ``` Explanation: In the provided example, the longest path without revisiting a tunnel is: 1 -> 2 -> 4 -> 5. The length of this path is 4 tunnels.","solution":"def longest_path(n, m, tunnels): def dfs(node, visited, graph): visited[node] = True max_depth = 0 for neighbor in graph[node]: u, v = neighbor if not visited[v]: result = dfs(v, visited, graph) max_depth = max(max_depth, result + 1) visited[node] = False return max_depth from collections import defaultdict # Create adjacency list graph = defaultdict(list) for u, v in tunnels: graph[u].append((u, v)) graph[v].append((v, u)) max_path_length = 0 for node in range(1, n + 1): visited = [False] * (n + 1) max_path_length = max(max_path_length, dfs(node, visited, graph)) return max_path_length"},{"question":"The city of Techland has n houses connected by m bidirectional roads. The city authority decided to test a new technology and configured some of the roads with restricted bandwidth for certain hours of the day. As a part of this experiment, they want to calculate the longest simple path without repeated nodes in the graph representing the city. You are given an undirected graph with n nodes and m edges. Each edge is an unordered pair (u, v) connecting node u and node v. A simple path in this graph is a path that does not visit any node more than once. Your task is to find the length of the longest simple path in the graph. The first line of input contains two integers n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 1000) — the number of houses and the number of roads in the city. The next m lines each contain two integers u and v (1 ≤ u, v ≤ n) — representing a road between house u and house v. Output a single integer – the length of the longest simple path in the given graph. In the first example, we can traverse all 5 nodes in a straight line, which gives the longest simple path of length 4 (0-based index). In the second example, after traversing 3 nodes in one possible path, trying to include the 4th node would force repeating one of the nodes. Thus, the longest simple path is 2. # Example # Input 5 4 1 2 2 3 3 4 4 5 # Output 4 # Input 4 4 1 2 2 3 3 4 4 1 # Output 3","solution":"def longest_simple_path(n, m, edges): from collections import defaultdict def dfs(node, visited, path_len): nonlocal max_len visited[node] = True max_len = max(max_len, path_len) for neighbor in graph[node]: if not visited[neighbor]: dfs(neighbor, visited, path_len + 1) visited[node] = False graph = defaultdict(list) for u, v in edges: graph[u - 1].append(v - 1) graph[v - 1].append(u - 1) max_len = 0 for i in range(n): visited = [False] * n dfs(i, visited, 0) return max_len"},{"question":"A toy manufacturing company builds toys which can be painted in different colors. The company has n different colors of paint, and it wants to paint m toys such that no two adjacent toys have the same color. Each toy can be painted in one of the n colors, and two toys are considered adjacent if they are connected by an edge in the given toy graph. Write a function called \\"color_toys\\" to determine if it’s possible to paint all toys following the given rule. If it’s possible, the function should return a possible assignment of colors to toys that satisfies the condition. If it\'s not possible, the function should return \\"NOT POSSIBLE\\". # Input - An integer n — the number of available colors (2 ≤ n ≤ 20). - An integer m — the number of toys (1 ≤ m ≤ 100). - m pairs of integers (a, b) — each pair representing an edge between toys a and b (1 ≤ a, b ≤ m). # Output - If it’s possible to paint all the toys such that no two adjacent toys have the same color, output a single line \\"POSSIBLE\\" followed by a line with m integers representing a possible coloring. Each integer i represents the color of the i-th toy. - If it\'s not possible to paint the toys following the rule, print \\"NOT POSSIBLE\\". # Examples Example 1 Input: ``` 3 4 1 2 2 3 3 4 4 1 ``` Output: ``` POSSIBLE 1 2 1 2 ``` Example 2 Input: ``` 2 3 1 2 2 3 3 1 ``` Output: ``` NOT POSSIBLE ``` # Note In Example 1, we have 3 colors and 4 toys. One possible way to paint the toys is to use colors 1, 2, 1, and 2 for toys 1, 2, 3, and 4 respectively. This ensures that no two adjacent toys have the same color. In Example 2, with only 2 colors for 3 toys forming a triangle, it\'s not possible to paint them without adjacent toys having the same color.","solution":"def color_toys(n, m, edges): from collections import defaultdict, deque def is_bipartite(graph, colors, start): queue = deque([start]) colors[start] = 1 # Start coloring with color 1 while queue: node = queue.popleft() for neighbor in graph[node]: if colors[neighbor] == colors[node]: return False if colors[neighbor] == 0: colors[neighbor] = -colors[node] queue.append(neighbor) return True # Create graph from edges graph = defaultdict(list) for a, b in edges: graph[a].append(b) graph[b].append(a) colors = [0] * (m + 1) for toy in range(1, m + 1): if colors[toy] == 0: # If not colored if not is_bipartite(graph, colors, toy): return \\"NOT POSSIBLE\\" # Convert -1 (for color 2) to 2 for easier understanding result = [(color if color != -1 else 2) for color in colors[1:]] return f\\"POSSIBLEn{\' \'.join(map(str, result))}\\""},{"question":"Given a sequence of lowercase letters, determine whether the sequence can be converted into a palindrome by rearranging its letters. A palindrome is a word that reads the same backward as forward. Your task is to find out if it is possible to transform the given sequence into a palindrome using any number of letter rearrangements. The first line contains a single integer n (1 le n le 10^5) — the length of the sequence. The second line contains a string of length n, consisting of lowercase letters only. Print \\"YES\\" if it is possible to rearrange the letters to form a palindrome; otherwise, print \\"NO\\". For example, given the input: ``` 5 aabbc ``` The output should be: ``` YES ``` because rearranging the letters as \\"abcba\\" forms a palindrome. And for the input: ``` 4 aabc ``` The output should be: ``` NO ``` since it is not possible to rearrange \\"aabc\\" to form a palindrome.","solution":"def can_form_palindrome(n, s): Determines if a sequence of lowercase letters can be rearranged to form a palindrome. Parameters: n (int): The length of the sequence. s (str): The sequence of lowercase letters. Returns: str: \\"YES\\" if it\'s possible to rearrange the sequence into a palindrome, otherwise \\"NO\\". from collections import Counter counter = Counter(s) odd_count = sum(1 for count in counter.values() if count % 2 != 0) # A palindrome can have at most one odd count character if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"A car rental company has a fleet of cars. They want to maintain a system to keep track of the availability of cars and the duration of rentals. The company has the following requirements: 1. Each car can be rented out to customers for specified start and end dates. 2. The system should allow adding new rentals only if the car is available for the entire duration of the new rental. 3. Customers can cancel their rentals, making the car available again during that period. Create a system in `Python` that manages the availability of the cars based on the rentals. Use the following method definitions to implement the system: - `add_rental(car_id: str, start_date: str, end_date: str) -> bool`: This method takes a car ID and a start and end date in the format `\'YYYY-MM-DD\'`, and returns `True` if the rental is successfully added, or `False` if the car is not available for the entire period. - `cancel_rental(car_id: str, start_date: str, end_date: str) -> bool`: This method takes a car ID and the start and end date of an existing rental and returns `True` if the rental is successfully canceled, or `False` if no such rental exists. You can assume that dates for rentals and cancellations will always be valid dates. # Example Usage: ```python car_rental_system = CarRentalSystem() # Add a new rental for car \'A123\' from \'2023-06-01\' to \'2023-06-10\' print(car_rental_system.add_rental(\'A123\', \'2023-06-01\', \'2023-06-10\')) # True # Try to add another rental for the same car which overlaps the existing rental period print(car_rental_system.add_rental(\'A123\', \'2023-06-05\', \'2023-06-15\')) # False # Cancel the existing rental print(car_rental_system.cancel_rental(\'A123\', \'2023-06-01\', \'2023-06-10\')) # True # Now adding a new rental for the same period should be successful print(car_rental_system.add_rental(\'A123\', \'2023-06-05\', \'2023-06-15\')) # True ``` # Constraints: - The cars can have multiple non-overlapping rental periods. - The dates will be given in \'YYYY-MM-DD\' format and can be compared using standard date comparison operations. - You should store the rental periods in a way that allows efficient adding, checking, and canceling of rentals.","solution":"from datetime import datetime class CarRentalSystem: def __init__(self): self.rentals = {} def add_rental(self, car_id: str, start_date: str, end_date: str) -> bool: start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') if car_id not in self.rentals: self.rentals[car_id] = [] for rental in self.rentals[car_id]: if not (end_date <= rental[0] or start_date >= rental[1]): return False self.rentals[car_id].append((start_date, end_date)) self.rentals[car_id].sort() # Keep the list sorted for easier management return True def cancel_rental(self, car_id: str, start_date: str, end_date: str) -> bool: start_date = datetime.strptime(start_date, \'%Y-%m-%d\') end_date = datetime.strptime(end_date, \'%Y-%m-%d\') if car_id in self.rentals: for rental in self.rentals[car_id]: if rental == (start_date, end_date): self.rentals[car_id].remove(rental) return True return False"},{"question":"You are tasked with managing a warehouse that contains several contiguous storage sections lined up in a row, each with a different capacity for holding packages. You are required to place packages into these sections in a specific order and then balance the load among the sections to ensure structural stability. Each storage section has an indexed position and a maximum weight capacity. The packages, which also have specific weights, need to be placed in the sections until all the sections are filled to their respective capacities. After the initial placement of packages, redistribute the packages such that no section\'s load exceeds its original specified load capacity. Redistribution means you can move packages from one section to an adjacent section if one of them exceeds the capacity and the other can still accommodate more weight. Your task is to determine the minimum number of package moves required to balance the load across the sections. If it is not possible to balance the sections, output `-1`. The first line contains a single integer `n` (1 ≤ n ≤ 100) — the number of storage sections. The second line contains `n` space-separated integers `[c1, c2, ..., cn]` (1 ≤ ci ≤ 10^4) — the maximum capacities of the storage sections. The third line contains `n` space-separated integers `[w1, w2, ..., wn]` (0 ≤ wi ≤ ci) — the initial weights of the packages in the storage sections. Print the minimum number of moves required to balance the load across the sections, or `-1` if it is not possible. # Example: **Input:** ``` 4 10 5 15 20 8 6 5 15 ``` **Output:** ``` 1 ``` Explanation: Initially, the sections and weights are: - Section 1: 8/10 - Section 2: 6/5 (overloaded by 1 unit) - Section 3: 5/15 - Section 4: 15/20 Here is one possible step-by-step balancing process: Move 1 unit from Section 2 (now 5/5) to Section 3 (now 6/15). Now, all sections comply with their capacities with minimal 1 move. # Notes: - We assume moving packages between only directly adjacent sections. - If there is no possible way to redistribute and balance without exceeding the capacities, you should output `-1`.","solution":"def min_moves_to_balance(n, capacities, weights): total_capacity = sum(capacities) total_weight = sum(weights) if total_capacity < total_weight: return -1 # impossible to balance moves = 0 for i in range(n - 1): # if section i+1 is overloaded or underloaded, balance it with section i if weights[i] > capacities[i]: excess = weights[i] - capacities[i] weights[i] -= excess weights[i + 1] += excess moves += 1 elif weights[i] < capacities[i] and weights[i + 1] > capacities[i + 1]: deficit = capacities[i] - weights[i] move = min(deficit, weights[i + 1] - capacities[i + 1]) weights[i] += move weights[i + 1] -= move moves += 1 # Final verification if each section\'s weight is within its capacity for i in range(n): if weights[i] > capacities[i]: return -1 return moves"},{"question":"You are given a grid of n by m seats, represented by a 2D array, where each element is either \'E\' (empty) or \'O\' (occupied). You need to determine if it\'s possible to place a certain number of students (represented by \'S\') in the empty seats such that no two students sit adjacent to each other. Adjacency is considered in all 8 possible directions (horizontal, vertical, and both diagonals). You are also given an integer k, the number of students to place. If there is at least one way to place all k students in the grid satisfying the constraints, print \\"YES\\". Otherwise, print \\"NO\\". First line input contains two integers n and m (1 ≤ n, m ≤ 10). Next n lines contain m characters each, representing the grid (either \'E\' or \'O\'). Last line contains the integer k (0 ≤ k ≤ n * m). # Example Input ``` 3 3 EEE EOE EEE 2 ``` Output ``` YES ``` In this example, you can place students at positions (0, 0) and (2, 2) which are not adjacent. Input ``` 3 3 EEE EOE EEE 5 ``` Output ``` NO ``` In this example, there are not enough non-adjacent empty seats to place all 5 students. # Note - If k is 0, the answer is always \\"YES\\". - If there are only occupied (\'O\') seats or the number of empty seats (\'E\') is less than k, the answer is \\"NO\\". Your task is to write a function that takes the described input and outputs \\"YES\\" or \\"NO\\" accordingly.","solution":"def can_place_students(n, m, grid, k): directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] def is_valid(x, y, seats): for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and seats[nx][ny] == \'S\': return False return True empty_positions = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == \'E\'] empty_count = len(empty_positions) if k == 0: return \\"YES\\" if k > empty_count: return \\"NO\\" from itertools import combinations for comb in combinations(empty_positions, k): temp_grid = [row[:] for row in grid] valid = True for x, y in comb: if is_valid(x, y, temp_grid): temp_grid[x][y] = \'S\' else: valid = False break if valid: return \\"YES\\" return \\"NO\\" # Example usage n, m = 3, 3 grid = [ [\'E\', \'E\', \'E\'], [\'E\', \'O\', \'E\'], [\'E\', \'E\', \'E\'] ] k = 2 print(can_place_students(n, m, grid, k)) # Output: YES"},{"question":"In a city, there are multiple gardens, each with a unique arrangement of flowers. An environmental organization wants to determine if two given gardens have the same arrangement of flowers, considering that the flowers can be grown in any order and position. The first line of the input contains an integer T (1 ≤ T ≤ 10) – the number of test cases. Each test case begins with an integer M (1 ≤ M ≤ 1000) – the number of types of flowers in the first garden. The following M lines each contain a string Si (1 ≤ |Si| ≤ 100) – the name of a type of flower in the first garden and an integer Fi (1 ≤ Fi ≤ 100) – the non-negative integer count of that flower type. The next line contains an integer N (1 ≤ N ≤ 1000) – the number of types of flowers in the second garden. The following N lines also contain a string Si – the name of a type of flower in the second garden and an integer Fi – the non-negative integer count of that flower type. You need to determine if the two gardens have identical arrangements of flowers. For each test case, print \\"YES\\" (without quotes) if the gardens contain identical floral arrangements, and \\"NO\\" otherwise. Example Input: ``` 3 3 rose 10 lily 5 tulip 8 3 rose 10 tulip 8 lily 5 2 daisy 7 sunflower 13 2 sunflower 13 daisy 7 4 daisy 5 rose 6 tulip 2 orchid 4 3 daisy 5 rose 6 tulip 2 ``` Example Output: ``` YES YES NO ```","solution":"def identical_gardens(test_cases): Determines if two given gardens have the same arrangement of flowers for each test case. Parameters: test_cases (list): A list where each element represents a test case. Each test case is a tuple containing two lists of tuples. Each tuple in these lists represents a flower type and its count. Returns: list: A list of strings, either \\"YES\\" or \\"NO\\" for each test case. results = [] for garden1, garden2 in test_cases: flower_count_garden1 = {} flower_count_garden2 = {} for flower, count in garden1: flower_count_garden1[flower] = flower_count_garden1.get(flower, 0) + count for flower, count in garden2: flower_count_garden2[flower] = flower_count_garden2.get(flower, 0) + count if flower_count_garden1 == flower_count_garden2: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Archer is trying to master the game of dartboard scoring. The dartboard consists of multiple scoring regions, each denoted by a unique positive integer. On each throw, Archer hits exactly one of the scoring regions and gains points corresponding to that region\'s value. Archer recorded all his hits from a recent practice session. Now, he wants to determine if he can partition his sequence of scores into two contiguous subsequences such that the sum of the scores in both subsequences is exactly the same. If it\'s possible, Archer wants to know the earliest point where the partition can be made. For example, for a sequence [10, 20, 10, 10, 20, 10], the partition after the third throw results in two subsequences [10, 20, 10] and [10, 20, 10], both summing to 40. You are given a sequence of integers representing the scores in the order Archer hit them. Write a program to determine if it is possible to partition the sequence into two contiguous subsequences with equal sums. If such a partition is possible, output the zero-based index of the element that ends the first subsequence. If it\'s not possible, output -1. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) — the number of throws Archer recorded. The second line contains n integers s1, s2, ..., sn (1 ≤ si ≤ 100,000) — the scores of each throw. Print a single integer: the zero-based index where the first subsequence ends if a valid partition exists; otherwise, print -1. If there are multiple solutions, print whichever valid partition index comes first. # Example Input: ``` 6 10 20 10 10 20 10 ``` Output: ``` 2 ``` Explanation: The sequence can be partitioned after the third throw: [10, 20, 10] and [10, 20, 10], both with a sum of 40. Input: ``` 5 1 2 3 4 5 ``` Output: ``` -1 ``` Explanation: It\'s impossible to partition the sequence into two contiguous subsequences with equal sums.","solution":"def find_partition_index(n, scores): total_sum = sum(scores) if total_sum % 2 != 0: return -1 half_sum = total_sum // 2 current_sum = 0 for i in range(n): current_sum += scores[i] if current_sum == half_sum: return i return -1"},{"question":"Ace the Chef is participating in a cooking competition where he must cook a sequence of dishes based on specific orders given by the judges. Each dish takes a certain amount of time to prepare, and Ace can only work on one dish at a time. The judges have also requested that the dishes be served in a specific order. Given an array `dishes` where each element is a pair (ti, si) representing the preparation time `ti` and the serving order `si` for the dish, determine the minimum total preparation time Ace needs to ensure all the dishes are served in the specified order. The input consists of: - An integer `n` (1 ≤ n ≤ 1000) representing the number of dishes. - `n` pairs of integers where the `i-th` pair is `ti` (1 ≤ ti ≤ 100) and `si` (1 ≤ si ≤ n). The output should be a single integer representing the minimum total preparation time required. Example: ``` Input: 4 5 1 3 2 6 4 2 3 Output: 16 ``` Explanation: Ace needs to cook the dishes in the order specified by `si`. The order of dishes based on `si` is (5, 3, 2, 6). Therefore, the total preparation time will be 5 + 3 + 2 + 6 = 16.","solution":"def minimum_total_preparation_time(dishes): # Sort the dishes based on the serving order si dishes.sort(key=lambda x: x[1]) # Calculate the total preparation time by summing preparation times in the sorted order total_preparation_time = sum(dish[0] for dish in dishes) return total_preparation_time"},{"question":"A group of mancers in a fantasy realm have discovered a mysterious array of magical stones. The array comprises n stones, each with a unique magical power denoted by an integer. The mancers want to play a game to harness the power of these stones. The game rules are as follows: - The players, Player 1 and Player 2, take turns alternatively. - Player 1 always goes first. - During a player\'s turn, the player must pick one stone (denoting an integer a_i from the array) and split it into any two positive integers b and c such that a_i = b + c. - The resulting split stones b and c replace the original stone a_i and added back to the array. - The goal is to ensure that no stone in the array is greater than or equal to a given threshold value T. - The player who cannot make a valid move (i.e., all stones in the array are less than T) loses the game. You need to write a program that takes the initial array of stones, the threshold value T, and determines for each initial configuration of stones whether the first player or the second player will win assuming both play optimally. **Input** - The first line of input contains a single integer n (1 ≤ n ≤ 100,000) — the number of stones in the initial array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), representing the power of each stone. - The third line contains a single integer T (1 ≤ T ≤ 10^9), representing the threshold value. **Output** - Print \\"1\\" if Player 1 will win, \\"2\\" if Player 2 will win. **Example** ``` Input: 5 7 5 3 2 6 4 Output: 1 ``` **Explanation** In this example, the initial configuration of stones is [7, 5, 3, 2, 6] and the threshold value T is 4. Player 1 can start by splitting the stone with the value 7, say into [3, 4]. From here, both players would play optimally with the resulting configurations. The program needs to determine who will eventually win.","solution":"def determine_winner(n, stones, T): # We need to check if there\'s any stone larger than or equal to T for stone in stones: if stone >= T: return 1 # Player 1 can always make the first move, so Player 1 wins return 2 # All stones are already less than T, so Player 2 wins (because Player 1 cannot play) # Example input n = 5 stones = [7, 5, 3, 2, 6] T = 4 print(determine_winner(n, stones, T)) # Expected output: 1"},{"question":"You are tasked with developing a system to manage inventory in a warehouse efficiently. The warehouse has a number of items, each identified by a unique ID and associated with a certain quantity. Your job is to write functions to add new items, update quantities of existing items, and query the total quantity of all items within a certain range of IDs. Here is a detailed description of the requirements: - **Adding a new item:** You need to add an item with a unique ID and its quantity to the inventory. If an item with the same ID already exists, update its quantity by adding the new quantity to the existing one. - **Query total quantity in range:** Given a range of IDs [ID1, ID2], you need to return the total quantity of all items whose IDs fall within this inclusive range. # Input 1. The first line contains an integer n (1 leq n leq 10000) — the number of operations (either additions or queries). 2. Each of the next n lines contains an operation, which can be one of the following: - \\"add ID quantity\\" — means adding `quantity` amount of the item identified by `ID`. If the item already exists, update its quantity. - \\"query ID1 ID2\\" — means querying the total quantity of items with IDs in the range from `ID1` to `ID2` (inclusive). # Output For each \\"query\\" operation, output a single integer — the total quantity of items in the specified range of IDs. # Example Input: ```plaintext 6 add 1001 10 add 1002 20 add 1501 5 query 1001 1500 add 1001 5 query 1000 2000 ``` Output: ```plaintext 30 40 ``` # Constraints - The ID of the items will be between 1 and 10^9. - The quantity will be a non-negative integer. - Each ID is guaranteed to be unique in the context of the \\"add\\" operation until it is updated through successive \\"add\\" operations. - Multiple \\"add\\" operations for the same ID should accumulate the quantity. Design your solution to handle a large number of operations efficiently.","solution":"class Inventory: def __init__(self): self.items = {} def add(self, ID, quantity): if ID in self.items: self.items[ID] += quantity else: self.items[ID] = quantity def query(self, ID1, ID2): total_quantity = 0 for ID in range(ID1, ID2 + 1): if ID in self.items: total_quantity += self.items[ID] return total_quantity def process_operations(operations): inventory = Inventory() results = [] for op in operations: parts = op.split() if parts[0] == \\"add\\": ID = int(parts[1]) quantity = int(parts[2]) inventory.add(ID, quantity) elif parts[0] == \\"query\\": ID1 = int(parts[1]) ID2 = int(parts[2]) result = inventory.query(ID1, ID2) results.append(result) return results"},{"question":"In a rectangular city, there are two friends who live at two different intersections defined by their coordinates (x1, y1) and (x2, y2). They plan to meet at one of the intersections in the city to have lunch together. To minimize the total walking distance, they decide to meet at an intersection that is the median of their coordinates. Given the coordinates of both friends, determine the coordinates of the optimal meeting intersection and the total walking distance they have to travel in order to meet at that intersection. The first line of input contains four integers x1, y1, x2, and y2 (1 <= x1, y1, x2, y2 <= 100). Print two integers—the coordinates of the optimal meeting point, followed by the total walking distance. In the first sample, the optimal meeting point is the intersection (2, 3). Thus, the first friend has to travel a distance of |2-3| + |3-4| = 2, and the second friend has to travel a distance of |2-2| + |3-2| = 1. Hence, the total distance is 2 + 1 = 3. Sample Input: 3 4 2 2 Sample Output: 2 3 3","solution":"def optimal_meeting_point(x1, y1, x2, y2): Given coordinates of two friends (x1, y1) and (x2, y2), find the optimal meeting point that minimizes the total walking distance and returns the meeting point coordinates and the total distance. Parameters: x1, y1, x2, y2 (int): Coordinates of the two friends Returns: tuple: (meeting_x, meeting_y, total_distance) # Calculating the median of the coordinates meeting_x = (x1 + x2) // 2 meeting_y = (y1 + y2) // 2 # Calculating the total walking distance for both friends total_distance = abs(meeting_x - x1) + abs(meeting_y - y1) + abs(meeting_x - x2) + abs(meeting_y - y2) return meeting_x, meeting_y, total_distance"},{"question":"You are tasked with developing an inventory management system for a small bookstore. One of the features of the system is to determine the count of duplicate book titles in a given list of books. Each book is represented by its title. The bookstore wants to ensure that all the titles appearing more than once are identified. You need to implement a function that reads an array of book titles and outputs the count of duplicate titles. Here is an example to illustrate the requirements: The first line contains an integer n (1 leq n leq 10^5), the number of book titles. The second line contains n strings, where each string represents a book title. The titles only contain lowercase English letters and have a maximum length of 100. Print a single integer denoting the number of duplicate book titles. **Example Input:** ``` 10 the_great_gatsby to_kill_a_mockingbird 1984 the_catcher_in_the_rye 1984 pride_and_prejudice the_great_gatsby war_and_peace the_odyssey to_kill_a_mockingbird ``` **Example Output:** ``` 3 ``` **Explanation:** In the above example, \\"the_great_gatsby\\", \\"1984\\", and \\"to_kill_a_mockingbird\\" are the titles that appear more than once. Therefore, the output is 3.","solution":"def count_duplicate_titles(n, titles): Returns the count of duplicate book titles in the given list. Args: n (int): Number of book titles. titles (list of str): List of book titles. Returns: int: Count of duplicate book titles. title_count = {} for title in titles: if title in title_count: title_count[title] += 1 else: title_count[title] = 1 duplicate_count = sum(1 for count in title_count.values() if count > 1) return duplicate_count"},{"question":"There are two cities in the kingdom, connected by different possible paths. Each path has a certain length associated with it. The citizen delivering messages has to travel between these two cities from e1 to e2 and back again to ensure that the messages are delivered safely and correctly. Given the possible paths between the two cities, he wants to find the minimal distance he has to travel to deliver the message and return back to his starting point. The first line of the input contains three integers n, e1, and e2 (1 ≤ n ≤ 50, 1 ≤ e1, e2 ≤ n). The next lines provide the details of the paths, with each path defined by three integers: the start city, the end city, and the length of the path between them. The task is to find the shortest round-trip (from e1 to e2 and back from e2 to e1) path and print the minimum distance. Input: The first line contains integers n, e1, and e2. The next lines contain integers which represent the start city, the end city, and the length of the path between them. Output: The minimum distance to travel from e1 to e2 and back from e2 to e1. Example: Input: 4 1 2 1 2 5 1 3 9 2 3 3 2 4 2 3 4 7 Output: 10 Explanation: The citizen can take the path from 1 -> 2 -> 4 -> 2 -> 1 which sums up to 10 units distance.","solution":"import heapq def dijkstra(graph, start): distance = {node: float(\'infinity\') for node in graph} distance[start] = 0 pq = [(0, start)] while pq: current_distance, current_node = heapq.heappop(pq) if current_distance > distance[current_node]: continue for neighbor, weight in graph[current_node].items(): distance_via_current = current_distance + weight if distance_via_current < distance[neighbor]: distance[neighbor] = distance_via_current heapq.heappush(pq, (distance_via_current, neighbor)) return distance def shortest_round_trip(n, e1, e2, paths): graph = {i: {} for i in range(1, n + 1)} for start, end, length in paths: graph[start][end] = length graph[end][start] = length distance_from_e1 = dijkstra(graph, e1) distance_from_e2 = dijkstra(graph, e2) return distance_from_e1[e2] + distance_from_e2[e1] def process_input(input_string): input_list = input_string.strip().split(\'n\') n, e1, e2 = map(int, input_list[0].split()) paths = [tuple(map(int, line.split())) for line in input_list[1:]] return n, e1, e2, paths def solve(input_string): n, e1, e2, paths = process_input(input_string) return shortest_round_trip(n, e1, e2, paths)"},{"question":"You are given an array of n integers. For each element in the array, output the product of itself and the next element. For the last element, output the product of the last and the first elements of the array. The input consists of a single line of space-separated integers. The first number is n (2 ≤ n ≤ 50) — the size of the array. The following n numbers are the elements of the array (1 ≤ ai ≤ 1000). Output the products a1 × a2, a2 × a3, ..., an × a1, separated by spaces.","solution":"def product_with_next(arr): For each element in the array, this function outputs the product of itself and the next element. For the last element, it outputs the product of the last and the first elements of the array. Parameters: arr (list): A list of integers where the first element is n, the size of the array. Returns: list: A list of products as per the described rule. n = arr[0] elements = arr[1:] result = [elements[i] * elements[(i + 1) % n] for i in range(n)] return result"},{"question":"Farmer John has a large, rectangular field divided into an `n x m` grid of cells. Each cell can be either empty (denoted by \'.\') or have a tree (denoted by \'T\'). During the night, a mysterious phenomenon causes each tree to potentially spread to one of its adjacent cells (north, south, east, west) that is empty. Note that empty cells cannot become trees on their own, and a tree will not spread into another tree. To protect his crops, Farmer John wants to know whether there is any way to prevent the total number of trees from spreading by blocking exactly one empty cell. This blockage would prevent trees from spreading into the blocked cell, and Farmer John hopes this can help contain the tree spread. You need to determine if there is an empty cell that, when blocked, will prevent any increase in the total number of trees in the grid. The first line contains two integers `n` and `m` (`2 ≤ n, m ≤ 50`) — the number of rows and columns in the field, respectively. The next `n` lines contain `m` characters each, either \'.\' or \'T\', describing the grid. Print \\"YES\\" if there is a way to prevent the spread of trees by blocking exactly one empty cell. Otherwise, print \\"NO\\". # Example Input 1: ``` 4 5 ..... ..T.. ..... ..... ``` Output 1: ``` YES ``` Input 2: ``` 3 3 .TT TTT .TT ``` Output 2: ``` NO ``` Explanation In the first example, blocking any empty cell adjacent to the tree will prevent it from spreading further. For instance, blocking the cell (2,3) which is right below the tree will prevent the tree from spreading. In the second example, blocking any single empty cell around the trees will still not prevent the possible spread. Each tree has multiple adjacent empty cells to spread into, so blocking only one will not be sufficient to stop the spread.","solution":"def can_prevent_tree_spread(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_in_bounds(x, y): return 0 <= x < n and 0 <= y < m for i in range(n): for j in range(m): if grid[i][j] == \'.\': blocked = False for dx, dy in directions: ni, nj = i + dx, j + dy if is_in_bounds(ni, nj) and grid[ni][nj] == \'T\': for dx2, dy2 in directions: nni, nnj = ni + dx2, nj + dy2 if is_in_bounds(nni, nnj) and grid[nni][nnj] == \'.\': if (nni, nnj) != (i, j): blocked = True if not blocked: return \\"YES\\" return \\"NO\\""},{"question":"You are given an undirected graph with n vertices and m edges. Each edge is denoted by three integers u_i, v_i, and w_i, representing an edge between vertices u_i and v_i with weight w_i. Your task is to process q queries. Each query provides two integers a and b, and you need to find the shortest path from vertex a to vertex b in terms of total weight. If no such path exists, return -1 for that query. The first line of input contains three integers n, m, and q (1 le n le 1000, 1 le m le 10000, 1 le q le 1000) — the number of vertices, the number of edges, and the number of queries, respectively. Each of the next m lines describes an edge in the graph. Edge i is denoted by three integers u_i, v_i, and w_i (1 le u_i, v_i le n, 0 le w_i le 1000), indicating there is an edge between u_i and v_i with weight w_i. The following q lines each contain two integers a and b (1 le a, b le n) representing a query for the shortest path from vertex a to vertex b. Print q integers — the answers to the queries. The i-th value should be the shortest path from vertex a to vertex b or -1 if no such path exists. # Example **Input:** ``` 4 4 2 1 2 1 2 3 2 3 4 3 1 4 10 1 4 1 3 ``` **Output:** ``` 6 3 ```","solution":"import heapq def dijkstra(n, graph, start, end): Finds the shortest path from start to end using Dijkstra\'s algorithm. distances = {vertex: float(\'infinity\') for vertex in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_vertex = heapq.heappop(priority_queue) if current_distance > distances[current_vertex]: continue for neighbor, weight in graph[current_vertex]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'infinity\') else -1 def process_graph_queries(n, m, edges, queries): Processes the graph queries to return shortest path distances. # Create an adjacency list for the graph graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Process each query result = [] for a, b in queries: result.append(dijkstra(n, graph, a, b)) return result"},{"question":"You are given a list of N integers and an integer K. You are asked to determine the K-th smallest element in the list. The input consists of two lines: - The first line contains two integers N and K (1 ≤ K ≤ N ≤ 1000). - The second line contains N integers, which are the elements of the list. Each element in the list will be distinct and within the range [1, 10000]. You need to output the K-th smallest element in the list. Example: Input: 5 3 7 10 4 3 20 Output: 7 Explanation: The sorted list is [3, 4, 7, 10, 20] and the third smallest element is 7.","solution":"def kth_smallest_element(N, K, elements): Returns the K-th smallest element in the list `elements`, where N is the number of elements and K is the position of the smallest element to find. Arguments: N -- int, the number of elements in the list K -- int, the position of the smallest element to find elements -- list of int, the elements in the list Returns: The K-th smallest element in the list # Sort the list sorted_elements = sorted(elements) # Return the K-th smallest element return sorted_elements[K-1]"},{"question":"A company wants to organize a special parade on a street. The street can be represented as a number line with important events happening on certain integer positions. The company has placed floats such that each float occupies a contiguous segment of positions on the street. Your task is to determine if it is possible to remove at most one float such that the remaining floats cover every integer position from the start of the earliest event to the end of the latest event without any gaps. Given n, the number of floats, each described by two integers li and ri (0 ≤ li ≤ ri ≤ 109) representing the starting and ending positions of the i-th float. Output \\"YES\\" if it is possible to remove at most one float such that the rest of the floats still cover every position from the minimum li to the maximum ri without gaps. Otherwise, print \\"NO\\". The first line contains one integer number n (1 ≤ n ≤ 2 * 10^5) — the number of floats. Then n lines follow, each containing two integer numbers li and ri denoting the starting and ending positions of the i-th float. Example: Input: 5 1 5 2 6 4 8 6 10 9 12 Output: YES Explanation: If we remove the third float (positions 4 to 8), the remaining floats will still cover the entire range from 1 to 12 without any gaps.","solution":"def can_create_continuous_segment_with_one_removal(n, floats): if n == 1: return \\"YES\\" floats = sorted(floats, key=lambda x: (x[0], x[1])) common_segments = [] current_start = floats[0][0] current_end = floats[0][1] for i in range(1, n): if floats[i][0] > current_end + 1: common_segments.append((current_start, current_end)) current_start = floats[i][0] current_end = max(current_end, floats[i][1]) common_segments.append((current_start, current_end)) if len(common_segments) == 1: return \\"YES\\" for i in range(1, len(common_segments)): if common_segments[i][0] > common_segments[i - 1][1] + 1: if len(common_segments) == 2: return \\"YES\\" else: return \\"NO\\" return \\"YES\\""},{"question":"You are given an array of positive integers. An action consists of choosing any two adjacent elements in the array, removing both, and appending their sum to the end of the array. The task is to determine the minimum number of actions required to reduce the array to a single element, as well as the possible final value of the single element. The first line contains a single integer n (2 ≤ n ≤ 50) — the length of the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. Print a single integer — the minimum number of actions required to reduce the array to a single element. In the next line, print the possible final value of the single element after performing the actions. Example: Input: 4 4 3 2 1 Output: 3 10","solution":"def min_actions_to_single_element(arr): Determines the minimum number of actions required to reduce the array to a single element. Also determines the possible final value of the single element. Parameters: arr (list): list of positive integers Returns: int: the minimum number of actions int: the final value of the single element n = len(arr) actions = n - 1 # Since each action reduces the array length by 1 final_value = sum(arr) # Summing all elements will give the final single element value return actions, final_value"},{"question":"You are given an array of n integers. Your task is to find two distinct indices i and j (1 ≤ i, j ≤ n, i ≠ j) such that the distance between the elements at these indices is minimized, where the distance between two elements is defined as the absolute difference of their values. Input: - The first line contains a single integer n (2 ≤ n ≤ 10^5) — the size of the array. - The second line contains n integers separated by spaces — the elements of the array. Output: - Print the minimum distance between any two distinct elements in the array. Example: Input: 6 3 8 6 1 5 9 Output: 1 Explanation: In the array [3, 8, 6, 1, 5, 9], the minimum distance is 1, which is the absolute difference between the elements 6 and 5 or 8 and 9.","solution":"def find_min_distance(n, arr): Returns the minimal distance between any two distinct elements in the array. :param n: Integer, size of the array :param arr: List of integers, the array elements :return: Integer, the minimum distance between any two distinct elements # Sort the array to compare adjacent elements sorted_arr = sorted(arr) # Initialize minimum distance as a large number min_distance = float(\'inf\') # Iterate through the sorted array to find the minimum absolute difference for i in range(1, n): min_distance = min(min_distance, abs(sorted_arr[i] - sorted_arr[i-1])) return min_distance"},{"question":"Matilda loves exploring the outdoors, and she plans to go on hikes with her friends. She has m friends and n mountains that they can hike. Each mountain has a specific difficulty level denoted by an integer value, and Matilda rates her friends\' hiking skills with an integer as well. Matilda wants to match each of her friends to a mountain such that each friend hikes a mountain that has a difficulty level equal to or higher than their skill level. Help Matilda determine the maximum number of friends that can go on a hike under these conditions. The first line contains two integers, m and n (1 ≤ m, n ≤ 10^5). The second line contains m integers sk1, sk2, ..., skm (1 ≤ ski ≤ 10^9) representing the hiking skills of Matilda\'s friends. The third line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 10^9) representing the difficulty levels of the mountains. Print a single integer — the maximum number of friends that can be matched with a suitable mountain. In the first test example, the maximum number of friends that can go on a hike is 3. In the second test example, the maximum number of friends that can go on a hike is 2. Example input: 4 5 3 2 1 4 2 5 3 4 1 Example output: 4","solution":"def max_friends_hiking(m, n, skills, mountains): Determines the maximum number of friends that can go on a hike. :param m: int - number of friends :param n: int - number of mountains :param skills: List[int] - hiking skills of the friends :param mountains: List[int] - difficulty levels of the mountains :return: int - maximum number of friends that can go on a hike skills.sort() mountains.sort() i, j = 0, 0 max_hikers = 0 while i < m and j < n: if skills[i] <= mountains[j]: max_hikers += 1 i += 1 j += 1 return max_hikers"},{"question":"Peter recently learned about the concepts of \\"modular arithmetic\\" and \\"power operations\\" in his discrete mathematics class. To solidify his understanding, he decided to practice by solving some problems using these concepts. He chose to focus on finding large powers of a number, but he\'s particularly interested in how these large powers behave under modulo operation with a given divisor. Given a base integer `x`, an exponent `y`, and a modulo `m`, help Peter compute `(x^y) % m` efficiently. Since the value of `y` can be very large, a straightforward computation of `x^y` is not feasible. Implement the modular exponentiation to solve this problem. The first line of the input contains three integers: `x`, `y`, and `m` where `0 ≤ x ≤ 1000`, `0 ≤ y ≤ 10^9`, and `1 ≤ m ≤ 1000`. Output one integer — the result of `(x^y) % m`. To solve this problem, you should use techniques such as \\"Exponentiation by Squaring\\". # Example Input: ``` 2 10 1000 ``` Output: ``` 24 ``` Explanation: ``` 2^10 = 1024, and 1024 % 1000 = 24 ```","solution":"def modular_exponentiation(x, y, m): Computes (x^y) % m using the technique of Exponentiation by Squaring. Args: x (int): Base integer. y (int): Exponent integer. m (int): Modulo integer. Returns: int: The result of (x^y) % m. result = 1 x = x % m while y > 0: if (y & 1): # If y is odd, multiply x with result result = (result * x) % m y = y >> 1 # y = y // 2, equivalent to right shift x = (x * x) % m # Change x to x^2 return result"},{"question":"You are given an undirected tree with n nodes, where each node has a value. The values of different nodes can overlap. Specifically, the value of node i is vi. You are also given q queries. Each query consists of two integers u and k. For each query, you should find the k-th smallest node value in the subtree of node u. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. - The second line contains n integers v1, v2, ..., vn (1 ≤ vi ≤ 1,000,000) — the values of the nodes. - Then follows n-1 lines, each containing two integers ai and bi (1 ≤ ai, bi ≤ n), indicating an edge between nodes ai and bi. - The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. - Each of the next q lines contains two integers u and k (1 ≤ u ≤ n, 1 ≤ k ≤ the number of nodes in the subtree). Output: - For each query, print the k-th smallest value in the subtree of node u. If there is no such k-th smallest value, print -1. Example: Input: ``` 5 3 9 5 7 1 1 2 1 3 3 4 3 5 3 3 2 1 4 4 1 ``` Output: ``` 5 1 7 ``` Explanation: - The subtree of node 3 contains nodes 3, 4, and 5 with values 5, 7, and 1 respectively. The 2nd smallest value is 5. - The entire tree contains values 3, 9, 5, 7, and 1. The 4th smallest value is 1. - The subtree of node 4 only contains node 4 itself, with value 7. The 1st smallest value is 7.","solution":"from collections import defaultdict import heapq class Tree: def __init__(self, n, values): self.n = n self.values = values self.tree = defaultdict(list) self.subtree_values = {} self.subtree_sizes = {} def add_edge(self, u, v): self.tree[u].append(v) self.tree[v].append(u) def preprocess_subtrees(self): visited = [False] * (self.n + 1) self.dfs(1, visited) def dfs(self, node, visited): visited[node] = True sub_values = [self.values[node - 1]] for neighbour in self.tree[node]: if not visited[neighbour]: sub_values.extend(self.dfs(neighbour, visited)) self.subtree_values[node] = sorted(sub_values) self.subtree_sizes[node] = len(sub_values) return sub_values def query_kth_smallest_value(self, u, k): if k <= self.subtree_sizes[u]: return self.subtree_values[u][k - 1] else: return -1 def solve_tree_queries(n, values, edges, q, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) tree.preprocess_subtrees() results = [] for u, k in queries: results.append(tree.query_kth_smallest_value(u, k)) return results def solve(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) idx += 1 values = [int(data[i]) for i in range(idx, idx + n)] idx += n edges = [] for _ in range(n - 1): edges.append((int(data[idx]), int(data[idx + 1]))) idx += 2 q = int(data[idx]) idx += 1 queries = [] for _ in range(q): queries.append((int(data[idx]), int(data[idx + 1]))) idx += 2 results = solve_tree_queries(n, values, edges, q, queries) for result in results: print(result)"},{"question":"You are a software developer tasked with creating a program to monitor web traffic. Specifically, you need to track the number of visits to a specific set of pages over a given time range. The input will consist of a series of events where each event represents a visit to a page, timestamped with the time of the visit. Each page is identified by a unique integer ID. You must then handle multiple queries which will ask for the number of visits to a certain page within a specific time interval. The first line of input contains an integer t (1 ≤ t ≤ 50000) — the number of events. Each of the next t lines contains two integers pi and ti (1 ≤ pi ≤ 100000, 1 ≤ ti ≤ 1000000000) — the page ID and the timestamp of the visit. The next line contains an integer q (1 ≤ q ≤ 10000) — the number of queries. Each of the next q lines contains three integers pj, tj1, and tj2 (1 ≤ pj ≤ 100000, 1 ≤ tj1 ≤ tj2 ≤ 1000000000) — the page ID and the time interval [tj1, tj2]. For each query, print the number of visits to the page pj during the interval [tj1, tj2] inclusive. Here is an example input and output to clarify the format: **Input:** ``` 5 1 100 2 200 1 300 2 400 3 500 3 1 100 300 2 100 300 3 400 600 ``` **Output:** ``` 2 1 1 ``` Your task is to implement the logic to handle this input and output the correct result for each query.","solution":"def count_page_visits(events, queries): Count the number of visits to a specific page within a given time range. :param events: List of tuples (pi, ti) representing page ID and timestamp. :param queries: List of tuples (pj, tj1, tj2) representing query with page ID and time range. :return: List of integers representing the number of visits for each query. from collections import defaultdict # Dictionary to store visits by page ID page_visits = defaultdict(list) # Populate the dictionary with page visits for pi, ti in events: page_visits[pi].append(ti) # Sort timestamps for each page for efficient range counting for page_id in page_visits: page_visits[page_id].sort() # Function to count the visits in the interval [low, high] def count_in_interval(timestamps, low, high): # Using binary search technique to find bounds from bisect import bisect_left, bisect_right start = bisect_left(timestamps, low) end = bisect_right(timestamps, high) return end - start results = [] # Evaluate each query for pj, tj1, tj2 in queries: if pj in page_visits: count = count_in_interval(page_visits[pj], tj1, tj2) else: count = 0 results.append(count) return results # Example usage: events = [(1, 100), (2, 200), (1, 300), (2, 400), (3, 500)] queries = [(1, 100, 300), (2, 100, 300), (3, 400, 600)] print(count_page_visits(events, queries)) # Output: [2, 1, 1]"},{"question":"You are given a list of n integers, and you can perform the following operation on any two elements of the list: - Choose two distinct elements from the list, let\'s call them x and y. - Replace x with the greatest common divisor (gcd) of x and y. Your task is to determine if it\'s possible to make all elements of the list equal to 1 after performing any number of such operations. If it is possible, return \\"YES\\", otherwise return \\"NO\\". For example, consider the list: [4, 6, 8]. - Initially choose 4 and 6, gcd(4, 6) = 2, update list to [2, 6, 8]. - Then choose 2 and 8, gcd(2, 8) = 2, update list to [2, 6, 2]. - Choose 2 and 6 again, gcd(2, 6) = 2, update list to [2, 2, 2]. Since the elements are still not all 1, you cannot make them all equal to 1. Therefore, the answer is \\"NO\\". Input - The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. - Each test case consists of two lines. The first line contains an integer n (1 ≤ n ≤ 100), the number of elements in the list. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 104) — the elements of the list. Output For each test case, print \\"YES\\" if it is possible to make all elements equal to 1, otherwise print \\"NO\\". Example: Input: 3 3 4 6 8 5 2 3 5 7 11 4 9 18 27 36 Output: NO YES NO","solution":"import math from functools import reduce def can_make_all_elements_one(test_cases): results = [] for n, arr in test_cases: gcd_all = reduce(math.gcd, arr) if gcd_all == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company plans to deploy sensors across a city grid to monitor air quality. The grid is represented as an n x m matrix where each cell (i, j) represents a possible location for a sensor. The sensor can detect air quality in all 8 directions (up, down, left, right, and the 4 diagonals) up to a certain distance d. The company aims to place a minimal number of sensors such that every cell in the grid is within the detection range of at least one sensor. Write a function `min_sensors(n: int, m: int, d: int) -> int` that takes in three integers: n (number of rows), m (number of columns), and d (the distance a sensor can detect in all 8 directions). The function should return the minimum number of sensors required to cover the entire grid. **Input:** The input contains three integers n, m, and d where (1 ≤ n, m, d ≤ 50). **Output:** Output a single integer representing the minimum number of sensors required to cover the entire grid. **Example:** ```python print(min_sensors(4, 4, 1)) # Output: 4 print(min_sensors(5, 5, 2)) # Output: 4 ``` **Explanation:** In the first example, with a 4x4 grid and a sensor range of 1, placing sensors at the positions (1,1), (1,3), (3,1), and (3,3) will cover the entire grid. In the second example, with a 5x5 grid and a sensor range of 2, placing sensors at (2,2), (2,5), (5,2), and (5,5) will cover the entire grid.","solution":"def min_sensors(n: int, m: int, d: int) -> int: Returns the minimum number of sensors required to cover an n x m grid with sensors that have detection range d in all 8 directions. # The distance of range + 1 because the current cell is also covered step = d + 1 # Calculate the number of sensors required in each dimension sensors_in_rows = (n + step - 1) // step sensors_in_columns = (m + step - 1) // step # The total number of sensors is the product of sensors in rows and columns return sensors_in_rows * sensors_in_columns"},{"question":"--- You are organizing a large music festival, and you have invited several bands to perform. Each band can play multiple songs, but for the audience to have a great experience, you want to ensure that no song is repeated during the festival. However, due to some scheduling constraints, you may accidentally end up with some repeated songs. To help you avoid this issue, you need to write a program that checks all the songs each band will play and tells you the first occurrence of a repeated song, if there is any. # Input The first line contains a single integer n (1 le n le 200,000), the number of bands. Each of the following n lines contains a band\'s playlist, where the first number is an integer m_i (1 le m_i le 1,000), the number of songs the band will play, followed by m_i songs (each song is represented by an integer s_j (1 le s_j le 10^9)). # Output Print a single integer representing the first occurrence of a repeated song across all the bands\' playlists. If no repetition is found, print `-1`. # Example Input ``` 3 4 1 2 3 4 3 5 6 7 5 3 8 9 10 1 ``` Output ``` 3 ``` Explanation - The first band\'s playlist contains the songs [1, 2, 3, 4]. - The second band\'s playlist contains the songs [5, 6, 7]. - The third band\'s playlist contains the songs [3, 8, 9, 10, 1]. The song `3` is repeated (it appears in both the first and the third bands\' playlists). The first occurrence of this repeated song is in the song list of the first band, and thus the output is `3`. If no song is repeated among the bands, the output should be `-1`.","solution":"def first_repeated_song(n, playlists): Finds the first occurrence of a repeated song across multiple playlists. Args: n : int : number of bands playlists : list : list of playlists, where each playlist is a list of songs Returns: int : the first repeated song, or -1 if no song is repeated song_occurrences = {} for playlist in playlists: for song in playlist[1:]: if song in song_occurrences: return song song_occurrences[song] = True return -1"},{"question":"Write a function that takes a string containing digits and letters (both uppercase and lowercase) and returns the string with the digits sorted in ascending order and the letters sorted in alphabetical order. Digits should appear before letters in the output string. # Input - A single string `s` (1 <= |s| <= 1000) that contains only digits and letters. # Output - A single string where digits are in ascending order followed by letters in alphabetical order. # Example Input ``` a1b2c3d4 ``` Output ``` 1234abcd ``` Input ``` 3a2C1B ``` Output ``` 123ABCa ``` # Note - The function should maintain the case sensitivity of the letters. - The input string will not contain any special characters or whitespace.","solution":"def sort_string(s): Returns a string with digits sorted in ascending order followed by letters in alphabetical order. :param s: input string containing digits and letters (both uppercase and lowercase) :return: formatted string with digits and letters sorted digits = sorted([char for char in s if char.isdigit()]) letters = sorted([char for char in s if char.isalpha()]) return \'\'.join(digits + letters)"},{"question":"You are provided with a list of n points in a two-dimensional plane, represented as (x1, y1), (x2, y2), ..., (xn, yn). Each point is connected with every other point by a direct line segment. Your task is to determine the length of the shortest path that visits each of the n points exactly once and returns to the starting point. The first line of the input contains an integer n (3 ≤ n ≤ 20) — the number of points. The following n lines each contain two integers representing the coordinates of the points: xi and yi (|xi|, |yi| ≤ 1000). Output a single integer, the integer part of the length of the shortest path that visits all n points exactly once and returns to the starting point. Note: You may assume that the round-off errors will not affect the correct result. Sample Input: 4 0 0 0 1 1 0 1 1 Sample Output: 4 Explanation: One possible shortest path is (0,0) -> (0,1) -> (1,1) -> (1,0) -> (0,0) with total length 4.","solution":"import itertools import math def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) def tsp_shortest_path(points): n = len(points) all_permutations = list(itertools.permutations(range(n))) min_path_length = float(\'inf\') for perm in all_permutations: current_length = 0 for i in range(n): current_length += euclidean_distance(points[perm[i]], points[perm[(i+1) % n]]) min_path_length = min(min_path_length, current_length) return int(min_path_length) def parse_input(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) points = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(n)] return points"},{"question":"You are given a sequence of integers that represents spikes and dips in stock prices over a certain period. A spike is defined as an integer that is greater than the integers immediately before and after it. Similarly, a dip is an integer that is smaller than the integers immediately before and after it. Your task is to determine the number of spikes and dips in the given sequence. For example, in the sequence [1, 3, 2, 4, 1], there are two spikes at indices 1 and 3 (values 3 and 4), and one dip at index 2 (value 2). Write a function to identify the number of spikes and dips in the sequence. **Function Signature:** ```python def count_spikes_and_dips(prices: List[int]) -> Tuple[int, int]: pass ``` **Input:** - A list of integers `prices` with length `n` (3 ≤ n ≤ 100). **Output:** - A tuple of two integers representing the number of spikes and the number of dips, respectively. **Example:** ```python count_spikes_and_dips([1, 3, 2, 4, 1]) ``` Output: ``` (2, 1) ``` **Explanation:** In the sequence [1, 3, 2, 4, 1]: - Spike at index 1: 3 (greater than 1 and 2) - Dip at index 2: 2 (smaller than 3 and 4) - Spike at index 3: 4 (greater than 2 and 1) Therefore, the counts are (2 spikes, 1 dip).","solution":"from typing import List, Tuple def count_spikes_and_dips(prices: List[int]) -> Tuple[int, int]: spikes = 0 dips = 0 for i in range(1, len(prices) - 1): if prices[i] > prices[i - 1] and prices[i] > prices[i + 1]: spikes += 1 elif prices[i] < prices[i - 1] and prices[i] < prices[i + 1]: dips += 1 return (spikes, dips)"},{"question":"You are given two integers `a` and `b`. Your task is to find a pair of integers `x` and `y` such that: 1. `1 ≤ x < y ≤ a` 2. `x + y` is a multiple of `b` If there are multiple pairs possible, output any one of them. If there is no such pair, print `-1`. The first and only line of input contains two integers, `a` (2 ≤ a ≤ 10^5) and `b` (1 ≤ b ≤ 10^5). **Input:** ``` a b ``` **Output:** ``` x y ``` or ``` -1 ``` **Example:** **Input:** ``` 10 3 ``` **Output:** ``` 1 2 ``` **Explanation:** The pair (1, 2) satisfies the conditions since 1 + 2 = 3, which is a multiple of 3.","solution":"def find_pair(a, b): This function finds a pair of integers (x, y) such that: 1. 1 ≤ x < y ≤ a 2. x + y is a multiple of b If there is no such pair, it returns -1. for x in range(1, a): for y in range(x + 1, a + 1): if (x + y) % b == 0: return x, y return -1 # Example usage # a, b = 10, 3 # result = find_pair(a, b) # print(result)"},{"question":"You are given an array of integers `arr` of length `n` and a target integer `target`. Your task is to find two distinct indices `i` and `j` (where `i ≠ j`) in the array such that `arr[i] + arr[j] == target`. If such a pair exists, print the indices `i` and `j`. Otherwise, print `-1`. Note: If there are multiple solutions, print any one of them. # Input - The first line contains two integers `n` (1 ≤ `n` ≤ 10^5) and `target` (|target| ≤ 10^9). - The second line contains `n` integers where each integer `arr[i]` (|arr[i]| ≤ 10^9) is a member of the array. # Output - Print two distinct indices `i` and `j` (1-based indexing) such that `arr[i] + arr[j] == target`. If no such pair exists, print `-1`. # Example Input ``` 4 10 2 7 11 15 ``` Output ``` 1 2 ``` # Explanation - In the provided example, arr[0] + arr[1] equals the target (2 + 7 = 9), so the output is 1 2 (index 1-based).","solution":"def find_indices(arr, target): Finds two indices i and j such that arr[i] + arr[j] == target. Args: arr (list of int): The array of integers. target (int): The target sum. Returns: tuple of int: The indices (1-based) if found, otherwise -1. # Dictionary to store the index of the required partner for each element seen = {} for i in range(len(arr)): complement = target - arr[i] if complement in seen: return (seen[complement] + 1, i + 1) # converting to 1-based index seen[arr[i]] = i return -1"},{"question":"The server of a popular multiplayer online game recently faced an issue due to heavy traffic. To distribute players more evenly across its game servers, the administrators decided to create an automated system that loads players into servers in a balanced manner. Each server can handle up to `n` players. When a player wants to join the game, they send a request to the server. The automated system should ensure that the players are distributed as evenly as possible across the servers. Write a function `balance_servers(player_requests: int, n: int) -> List[int]` that takes in the number of player requests and the maximum capacity `n` of each server. Your function should return a list where each element represents the number of players on that server, arranged in a way that the servers are as balanced as possible. If the number of players is not perfectly divisible by `n`, distribute the remaining players to the first few servers. # Input - `player_requests` (1 ≤ player_requests ≤ 10^6): An integer representing the number of players wanting to join. - `n` (1 ≤ n ≤ 100): An integer representing the maximum number of players each server can handle. # Output - The function should return a list of integers where each integer represents the number of players allocated to a particular server. # Examples 1. ```python player_requests = 10 n = 3 balance_servers(player_requests, n) # Output: [3, 3, 3, 1] or [2, 2, 2, 2, 2] (depending on the implementation) ``` 2. ```python player_requests = 5 n = 2 balance_servers(player_requests, n) # Output: [2, 2, 1] or [1, 2, 2] or [2, 1, 2] (any balanced distribution) ``` 3. ```python player_requests = 7 n = 4 balance_servers(player_requests, n) # Output: [4, 3] or [3, 4] or [2, 3, 2] (depending on the implementation) ```","solution":"from typing import List def balance_servers(player_requests: int, n: int) -> List[int]: Distributes player requests across servers in the most balanced manner possible. Args: player_requests (int): The number of player requests. n (int): The maximum capacity of each server. Returns: List[int]: A list where each element represents the number of players on a server. # Calculate number of fully filled servers servers = [n] * (player_requests // n) # Calculate the number of players left to distribute remaining_players = player_requests % n # Distribute the remaining players to balance the servers if remaining_players > 0: servers.append(remaining_players) return servers"},{"question":"A company is managing a large warehouse where they store various packages. Each package has a unique identifier and occupies a certain amount of space in cubic meters. The warehouse has a limited capacity in terms of total available space. Your task is to write a program that helps the warehouse manager determine if a given set of packages can fit within the warehouse capacity. You will be given the total capacity of the warehouse and a list of packages with their respective sizes. Your program should check if it is possible to store all the given packages in the warehouse without exceeding its capacity. Input: - The first line contains an integer n (1 ≤ n ≤ 1000), the number of packages. - The second line contains an integer c (1 ≤ c ≤ 10^9), the total capacity of the warehouse in cubic meters. - The third line contains n integers a_i (1 ≤ a_i ≤ 10^8), the sizes of the packages in cubic meters. Output: - Print \\"YES\\" if all the packages can fit within the given capacity, and \\"NO\\" otherwise. Example 1: ``` Input: 3 100 30 40 20 Output: YES Example 2: Input: 4 50 20 10 15 10 Output: NO ``` Explanation: In the first example, the total size of the packages is 30 + 40 + 20 = 90, which is less than the warehouse capacity of 100. Therefore, the output is \\"YES\\". In the second example, the total size of the packages is 20 + 10 + 15 + 10 = 55, which is greater than the warehouse capacity of 50. Therefore, the output is \\"NO\\".","solution":"def can_fit_in_warehouse(n, c, packages): Determines if all packages can fit within the warehouse capacity. Parameters: n (int): The number of packages. c (int): The total capacity of the warehouse in cubic meters. packages (list of int): The sizes of the packages in cubic meters. Returns: str: \\"YES\\" if all packages can fit within the warehouse, \\"NO\\" otherwise. total_size = sum(packages) return \\"YES\\" if total_size <= c else \\"NO\\""},{"question":"You are given a string that consists of lowercase English letters. You need to count the number of distinct subsequences of the string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to write a program that computes the number of distinct subsequences modulo (10^9 + 7). # Input - A single line containing a string s (1 ≤ |s| ≤ 1000) — the string from which subsequences are to be found. # Output - A single integer — the number of distinct subsequences of the given string, modulo (10^9 + 7). # Example # Input ``` abc ``` # Output ``` 8 ``` # Input ``` aaa ``` # Output ``` 4 ``` # Note In the first example, the distinct subsequences are \\"\\", \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", and \\"abc\\". Hence, the result is 8. In the second example, the distinct subsequences are \\"\\", \\"a\\", \\"aa\\", and \\"aaa\\". Hence, the result is 4.","solution":"MOD = 10**9 + 7 def count_distinct_subsequences(s): Returns the number of distinct subsequences of the string s, modulo 10^9 + 7. n = len(s) dp = [0] * (n + 1) dp[0] = 1 last_occurrence = {} for i in range(1, n + 1): dp[i] = 2 * dp[i - 1] % MOD if s[i - 1] in last_occurrence: dp[i] -= dp[last_occurrence[s[i - 1]] - 1] dp[i] %= MOD last_occurrence[s[i - 1]] = i return dp[n] # Example usage: # print(count_distinct_subsequences(\\"abc\\")) # Output: 8 # print(count_distinct_subsequences(\\"aaa\\")) # Output: 4"},{"question":"You are given a list of words. A \\"camelCase\\" word is defined as a word where the first letter is lowercase, and every subsequent word starts with an uppercase letter followed by lowercase letters (e.g., \\"camelCaseWord\\"). Your task is to determine how many of the given words are in camelCase. The input consists of two lines. The first line contains an integer n (1 leq n leq 100), the number of words in the list. The second line contains n words, each of which is a string of alphabetical characters and has length between 1 and 100 (inclusive). Output a single integer which is the number of camelCase words in the input list. # Example **Input:** ``` 5 helloWorld thisIsACamelCase example CamelCase notCamelCase ``` **Output:** ``` 3 ``` **Explanation:** The words \\"helloWorld\\", \\"thisIsACamelCase\\", and \\"notCamelCase\\" are in camelCase format. The words \\"example\\" and \\"CamelCase\\" are not in camelCase format. Hence, the output is 3.","solution":"def count_camel_case_words(words): Returns the number of camelCase words in the provided list of words. :param words: List of words (strings) :return: Integer count of camelCase words count = 0 for word in words: if word[0].islower() and any(c.isupper() for c in word[1:]): count += 1 return count"},{"question":"Tina wants to organize a coding competition. She needs to divide the participants into n groups such that each group has at least min_participants and at most max_participants. Help Tina determine a way to divide the participants or determine that it is not possible. The first line contains three integers n, min_participants, and max_participants (1 ≤ n ≤ 100, 1 ≤ min_participants ≤ max_participants ≤ 100). The second line contains one integer total_participants which represents the total number of participants. It is guaranteed that the total number of participants does not exceed 10,000. Print n lines, each containing the number of participants in each group. The number of participants in each group should be no less than min_participants and no more than max_participants. If there is no solution, print \\"No solution\\" (without quotes). If the solution is not unique, print any of them.","solution":"def divide_participants(n, min_participants, max_participants, total_participants): Divide participants into n groups such that each group has at least min_participants and at most max_participants. Return the groups or \'No solution\' if it\'s not possible. # Check if it is possible to divide the participants within given constraints if n * min_participants > total_participants or n * max_participants < total_participants: return \\"No solution\\" # This will hold the number of participants in each group groups = [min_participants] * n # Calculate initial total balance participants we need to distribute remaining_participants = total_participants - sum(groups) # Distribute the remaining participants for i in range(n): if remaining_participants <= 0: break additional_participants = min(remaining_participants, max_participants - groups[i]) groups[i] += additional_participants remaining_participants -= additional_participants return groups # Example usage, uncomment to test: # print(divide_participants(3, 1, 3, 10)) # Output could be [3, 3, 4] or any valid combination summing to 10"},{"question":"You are given a string consisting of lowercase English letters \'a\'-\'z\'. You want to find out the minimum number of changes required to make the string a palindrome. A palindrome is a string that reads the same forward and backward. In one change, you can modify any character in the string to any other lowercase English letter. Input: - A single string of lowercase English letters of length between 1 and 1000. Output: - A single integer, the minimum number of changes required to make the string a palindrome. Example: Input: abcd Output: 2 Explanation: You can change \'a\' to \'d\' and \'c\' to \'b\' to get the palindrome \'dbbd\', which requires 2 changes.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of changes required to make the given string a palindrome. Parameters: s (str): A string consisting of lowercase English letters. Returns: int: The minimum number of changes required to make the string a palindrome. n = len(s) count = 0 # Compare the first half with the reverse of the second half for i in range(n // 2): if s[i] != s[n - i - 1]: count += 1 return count"},{"question":"A group of robotic drones is working on a farm to help with the collection of fruits from trees. Each tree has a specific amount of fruit and requires a unique amount of time for the drone to collect all the fruits from it. The drones operate sequentially — only one drone can work at a specific tree at any given time to avoid collisions. You are given two arrays: - `fruits`: where `fruits[i]` is the number of fruits on the i-th tree. - `times`: where `times[i]` is the time required for a drone to collect all fruits from the i-th tree. Each drone starts by reaching a tree and collects all fruits on that tree before moving to the next tree. The goal is to find the minimum total time required for all drones to collect all the fruits present on all the trees. It is given that the number of trees is between 1 and 1000. # Input - The first line contains a single integer `n` (1 ≤ n ≤ 1000) — the number of trees. - The second line contains `n` integers, `fruits[i]` (1 ≤ fruits[i] ≤ 1000). - The third line contains `n` integers, `times[i]` (1 ≤ times[i] ≤ 100). # Output Output a single integer — the minimum total time required for all drones to collect all the fruits. # Example Input ``` 3 100 200 300 10 20 30 ``` Output ``` 280 ``` # Explanation The optimal way to minimize the total time can involve sorting the trees by the ratio of time to fruits, prioritizing trees with the least time per fruit to be processed first. However, this problem may have other optimal strategies based on implementation.","solution":"def minimum_total_time(n, fruits, times): Calculates the minimum total time required for all drones to collect all the fruits. The goal is to sort the trees based on the ratio of time required per fruit in ascending order. Args: n (int): number of trees. fruits (list): list containing the number of fruits on each tree. times (list): list containing the times to collect all fruits from each tree. Returns: int: minimum total time required. # Calculate time per fruit for each tree and sort by that ratio trees = sorted(zip(fruits, times), key=lambda x: x[1] / x[0]) total_time = 0 for fruit, time in trees: total_time += time return total_time"},{"question":"You are tasked with implementing a navigation system for a drone that needs to deliver packages to various locations within a city grid. The city grid is represented as an m x n matrix where each cell can either be empty (\'.\') or have an obstacle (\'#\'). The drone starts at the top-left corner of the grid (cell (0, 0)) and needs to deliver the package to the bottom-right corner of the grid (cell (m-1, n-1)). The drone can only move in four possible directions: up, down, left, and right. The objective is to determine the minimum number of moves required for the drone to reach its destination. If it is impossible for the drone to reach the destination, return -1. Write a function `min_moves_to_deliver_package(grid)` that takes a list of strings, `grid`, where each string represents a row in the grid. The function should return an integer representing the minimum number of moves required to reach the destination, or -1 if it is not possible. # Input: - `grid`: a list of strings representing the city grid (1 <= m, n <= 1000). # Output: - An integer representing the minimum number of moves to reach the bottom-right corner, or -1 if it is impossible. # Example: ```python grid = [ \\".#.\\", \\"...\\", \\"#..\\" ] print(min_moves_to_deliver_package(grid)) # Output: 4 ``` In this example, the drone can follow the path (0, 0) -> (0, 1) -> (1, 1) -> (2, 1) -> (2, 2). Thus, the minimum number of moves required is 4. # Constraints: - The grid will always have at least one cell. - The starting cell (0, 0) and the destination cell (m-1, n-1) will always be empty (\'.\'). - There will always be a valid path if there are no obstacles in the grid.","solution":"from collections import deque def min_moves_to_deliver_package(grid): if not grid or not grid[0]: return -1 m, n = len(grid), len(grid[0]) if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m - 1 and y == n - 1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1"},{"question":"Bob is an avid reader but he is very particular about the order in which he reads his books. He likes to read a certain number of non-fiction books first followed by a certain number of fiction books and repeats this pattern. One day, Bob received an unordered list of books from his friend that contains both fiction and non-fiction books. Bob wants to sort this list in such a way that it alternates between a specified number of non-fiction and fiction books, while maintaining the original order of the books within their types. You are given an integer k and a list of strings books, where each string is either \\"F\\" (representing a fiction book) or \\"NF\\" (representing a non-fiction book). Starting from the beginning of the list, Bob wants the first k books to be non-fiction, the next k books to be fiction, and so on. If there are not enough books remaining to complete a segment (either non-fiction or fiction), then include all the remaining books of that type. Write a function `alternate_books(k, books)` that takes in an integer k and a list of strings books, and returns a new list of books sorted according to Bob\'s preference. # Input - An integer k (1 ≤ k ≤ 100). - A list of strings books (1 ≤ len(books) ≤ 1000) where each string is either \\"F\\" or \\"NF\\". # Output - A list of strings representing the books sorted according to Bob\'s preference. # Example Sample Input ```python k = 2 books = [\\"NF\\", \\"F\\", \\"NF\\", \\"F\\", \\"F\\", \\"NF\\"] ``` Sample Output ```python [\\"NF\\", \\"NF\\", \\"F\\", \\"F\\", \\"F\\", \\"NF\\"] ``` In the example above, Bob reads 2 non-fiction books followed by 2 fiction books, repeating the pattern with the remaining non-fiction and fiction books. # Note - If there are more fiction books than non-fiction books or vice versa, continue outputting the remaining books of that type at the end.","solution":"def alternate_books(k, books): Returns a new list of books sorted according to the specified pattern of k non-fiction followed by k fiction books. nonfiction_books = [book for book in books if book == \\"NF\\"] fiction_books = [book for book in books if book == \\"F\\"] result = [] nf_idx = 0 f_idx = 0 while nf_idx < len(nonfiction_books) or f_idx < len(fiction_books): # Add up to k non-fiction books for _ in range(k): if nf_idx < len(nonfiction_books): result.append(nonfiction_books[nf_idx]) nf_idx += 1 else: break # Add up to k fiction books for _ in range(k): if f_idx < len(fiction_books): result.append(fiction_books[f_idx]) f_idx += 1 else: break return result"},{"question":"Alex is organizing a conference where n participants will be presenting their talks. Each talk is scheduled at a specific time, and no two talks start at the same time. However, the duration of the talks may vary, and a participant needs a separate room for the entire duration of their talk. You are given the start time and end time of each talk, and you need to determine the minimum number of conference rooms needed so that all talks can be held without any overlap. The first line contains an integer n (1 ≤ n ≤ 10^5) which is the number of talks. Each of the next n lines contains two space-separated integers si and ei (0 ≤ si < ei ≤ 10^9), representing the start time and end time of the i-th talk. Print a single integer, the minimum number of conference rooms required to accommodate all the talks. For example: Input: 3 1 4 2 5 3 6 Output: 3 In this sample, the minimum number of conference rooms required is 3 because all the talks overlap. Thus, each talk needs to be held in a separate room.","solution":"def min_conference_rooms(talks): Determines the minimum number of conference rooms needed to accommodate all talks without overlapping. Parameters: talks (list of tuples): List of tuples where each tuple contains the start and end time of a talk. Returns: int: The minimum number of conference rooms required. if not talks: return 0 # Separate start and end times into separate lists start_times = sorted([talk[0] for talk in talks]) end_times = sorted([talk[1] for talk in talks]) # Initialize pointers for start times and end times start_pointer, end_pointer = 0, 0 # Initialize variables to track number of rooms needed and the maximum number of rooms used at any time rooms_needed, max_rooms = 0, 0 while start_pointer < len(talks): if start_times[start_pointer] < end_times[end_pointer]: # A new talk starts before the earliest ending talk ends rooms_needed += 1 start_pointer += 1 else: # The earliest ending talk finishes before the next one starts rooms_needed -= 1 end_pointer += 1 # Update the maximum number of rooms used max_rooms = max(max_rooms, rooms_needed) return max_rooms # Helper function to parse input def parse_input(input_str): input_lines = input_str.strip().split(\'n\') n = int(input_lines[0]) talks = [tuple(map(int, line.split())) for line in input_lines[1:]] return talks"},{"question":"Monica has a garden and she wants to plant flowers in a grid of size n times m. Each cell in the grid can either be empty or contain a flower. Monica has a specific requirement: in any 2x2 subgrid, there should be at most one flower. Given the dimensions of the grid, determine the maximum number of flowers Monica can plant while satisfying her requirement. The first line of the input contains two integers n and m (1 leq n, m leq 1000) — the dimensions of the grid. Output a single integer — the maximum number of flowers Monica can plant while ensuring that any 2x2 subgrid contains at most one flower. Example 1: Input: 3 3 Output: 5 Example 2: Input: 2 2 Output: 1 Explanation: In the first example, Monica can place flowers in the following pattern: ``` F . F . F . F . F ``` where \'F\' denotes a flower and \'.\' denotes an empty cell. This pattern places 5 flowers and ensures no 2x2 subgrid has more than one flower. In the second example, only one flower can be placed in a 2x2 grid to satisfy the condition.","solution":"def max_flowers(n, m): Determine the maximum number of flowers Monica can plant in an n x m grid, ensuring that any 2x2 subgrid contains at most one flower. # We can plant a flower in every other cell, following a checkerboard pattern # Consider a checkerboard pattern starting with a flower: # F . F . F ... # . F . F . ... # F . F . F ... # . F . F . ... return (n * m + 1) // 2"},{"question":"You are given a string `s` consisting of lowercase English letters and a dictionary with several words. Your task is to determine the minimum number of modifications needed to convert `s` into a string that contains no duplicate consecutive characters. A modification is defined as replacing one character in the string `s` with another character from the set `{a-z}`. Input: - The first line contains the string `s` (1 ≤ |s| ≤ 100,000). Output: - Print the minimum number of modifications needed. Example: Input: aabbcc Output: 3 Explanation: One possible modification is to change the string to \\"ababac\\" by modifying the second \'b\' to \'a\', the first \'c\' to \'a\', and the second \'c\' to \'b\'.","solution":"def min_modifications(s: str) -> int: Determines the minimum number of modifications needed to convert `s` into a string that contains no duplicate consecutive characters. modifications = 0 n = len(s) # Iterate through the string for i in range(1, n): # If two consecutive characters are the same, they need to be modified if s[i] == s[i - 1]: # Increment modifications count modifications += 1 return modifications"},{"question":"You are given an array of integers representing the heights of columns that form a histogram. Each column has a width of 1. You need to determine the area of the largest rectangle that can be formed under the histogram. The first and only line of input contains n integers, where n is the number of columns in the histogram (1 ≤ n ≤ 100). Each integer h_i (1 ≤ h_i ≤ 100) represents the height of each column. Print a single integer representing the area of the largest rectangle in the histogram. Example input: 6 2 1 5 6 2 3 Example output: 10 Explanation: The largest rectangle has an area of 10 units (formed by the 5 and 6 heights).","solution":"def largest_rectangle_area(heights): Returns the area of the largest rectangle that can be formed in the histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"You are given a set of books arranged on a shelf in a specific order. Each book has a unique height. You can perform the following operation as many times as you want: - Choose any two adjacent books and swap their positions if they are not in ascending order of their height. Determine the minimum number of swaps required to arrange the books in ascending order of their height. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of books on the shelf. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1000) — the respective heights of the books. Output a single integer — the minimum number of adjacent swaps required to arrange the books in ascending order. Example: Input: 5 4 3 2 5 1 Output: 7","solution":"def minimum_swaps_to_sort_books(n, heights): Returns the minimum number of adjacent swaps required to sort the books in ascending order. :param n: The number of books on the shelf. :param heights: A list of book heights. :return: The minimum number of adjacent swaps required to sort the books. swaps = 0 # Perform a bubble sort and count the swaps for i in range(n): for j in range(n - 1): if heights[j] > heights[j + 1]: heights[j], heights[j + 1] = heights[j + 1], heights[j] swaps += 1 return swaps # Example usage: n = 5 heights = [4, 3, 2, 5, 1] print(minimum_swaps_to_sort_books(n, heights)) # Output: 7"},{"question":"A palindrome is a string that reads the same forwards and backwards. You are given a string s consisting of lowercase letters. Determine the minimum number of characters you need to insert into the string to make it a palindrome. The input contains a single string s (1 ≤ |s| ≤ 1000). Output the minimum number of characters needed to make the string a palindrome.","solution":"def min_insertions_to_palindrome(s: str) -> int: Returns the minimum number of characters needed to insert to make the string a palindrome. n = len(s) # Create a DP table to store results of subproblems dp = [[0] * n for _ in range(n)] # Fill the table for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 # The final answer is in dp[0][n-1] return dp[0][n - 1]"},{"question":"You are given an integer array nums of length n. You need to find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. Write a program to solve the problem. The first line of the input contains an integer n (1 <= n <= 10^5), the length of the array. The second line contains n integers separated by space representing the elements of the array, where each element is between -10^4 and 10^4, inclusive. Print the sum of the contiguous subarray with the largest sum.","solution":"def max_subarray_sum(nums): Returns the sum of the contiguous subarray with the largest sum. max_sum = nums[0] current_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Jasmine is learning about sequences in her first programming class. She came across the Fibonacci sequence, where each number is the sum of the two preceding ones, usually starting with 0 and 1. She wants to create a program that can generate the Fibonacci sequence up to the nth number, given an input integer n (1 ≤ n ≤ 100). Write a program that computes and returns the first n numbers of the Fibonacci sequence as a list. **Input:** - A single integer n (1 ≤ n ≤ 100). **Output:** - A list of the first n numbers in the Fibonacci sequence. For example, given the input 5, the output should be [0, 1, 1, 2, 3].","solution":"def fibonacci_sequence(n): Generates the first n numbers of the Fibonacci sequence. if n <= 0: return [] sequence = [0, 1] for i in range(2, n): next_number = sequence[-1] + sequence[-2] sequence.append(next_number) return sequence[:n]"},{"question":"Polycarpus is also fascinated by mathematics, and he has a peculiar interest in Fibonacci numbers. Polycarpus recently learned about Fibonacci numbers and discovered that a Fibonacci sequence is defined as follows: - The first two numbers in the Fibonacci sequence are 0 and 1. - Each subsequent number in the sequence is the sum of the two preceding numbers. Polycarpus wants to investigate Fibonacci numbers further and decided to write a program to find the nth Fibonacci number. Can you help him with this task? The input consists of a single integer n (0 ≤ n ≤ 50), which represents the position in the Fibonacci sequence. The output should be a single integer — the nth Fibonacci number. For example: - If the input is 0, the output should be 0. - If the input is 1, the output should be 1. - If the input is 7, the output should be 13. Write a program that calculates the nth Fibonacci number for the given input. Example: Input: 7 Output: 13","solution":"def fibonacci(n): Returns the nth Fibonacci number. if n == 0: return 0 elif n == 1: return 1 a, b = 0, 1 for _ in range(2, n + 1): a, b = b, a + b return b"},{"question":"In a faraway land, an ancient kingdom maintains a unique and strict financial system. Every citizen receives exactly one integer amount of gold coins. As a part of a fair taxation system, the king has mandated a new rule: A citizen must pay tax such that the total number of gold coins paid is either a prime number or zero. If no such prime tax amount is possible for a citizen, they are exempted from paying any tax. You have been summoned to write a program to help determine the tax to be paid by each citizen based on their gold coins. For a given integer amount of gold coins, determine the maximum prime tax amount that can be paid. If no prime tax amount is possible, return 0. The first line of the input contains a single integer t (1 leq t leq 100) — the number of citizens. The following t lines each contain a single integer text{gold}_i (0 leq text{gold}_i leq 10^6) — the amount of gold coins a citizen has. For each citizen, output the maximum prime tax amount that can be paid. If no prime tax amount is possible, output 0. # Example Input ``` 4 11 13 15 1 ``` Output ``` 11 13 13 0 ``` **Explanation:** - For the first citizen with 11 gold coins, 11 is a prime number itself, so the maximum prime tax is 11. - For the second citizen with 13 gold coins, 13 is a prime number itself, so the maximum prime tax is 13. - For the third citizen with 15 gold coins, the highest prime number less than or equal to 15 is 13, so the maximum prime tax amount is 13. - For the fourth citizen with 1 gold coin, since 1 is not a prime number and 0 is not a prime, the output is 0.","solution":"def is_prime(num): if num < 2: return False if num in (2, 3): return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def max_prime_tax(gold): for tax in range(gold, 1, -1): if is_prime(tax): return tax return 0 def compute_taxes(golds): taxes = [] for gold in golds: taxes.append(max_prime_tax(gold)) return taxes"},{"question":"You are given a sequence of colored blocks represented by a string. Each block can be one of three colors: red (\'R\'), green (\'G\'), or blue (\'B\'). You need to count the number of pairs of adjacent blocks that are of different colors. The first line contains a string of length between 1 and 100 characters, representing the sequence of colored blocks. It is guaranteed that the string only contains the characters \'R\', \'G\', and \'B\'. Output the number of adjacent pairs of blocks that are of different colors.","solution":"def count_different_color_pairs(blocks): Counts the number of adjacent pairs of blocks that are of different colors. :param blocks: str: A string representing a sequence of colored blocks :return: int: The number of pairs of adjacent blocks that are of different colors count = 0 for i in range(len(blocks) - 1): if blocks[i] != blocks[i + 1]: count += 1 return count"},{"question":"A company is organizing a series of workshops for employees in different departments. Each workshop is focused on different skills, and employees can choose to register for multiple workshops. However, due to resource limitations, an employee cannot attend more than one workshop at the same time. You are provided with the schedule of workshops and the list of employees registered for each workshop. The goal is to determine if there is any conflict for any employee and identify it if exists. The first line of input contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 1000), where n is the number of workshops and m is the number of employees. The next n lines contain the schedule for each workshop and the list of employees registered for it in the following format: d s e k id1 id2 ... idk where d (1 ≤ d ≤ 7) represents the day of the week (1=Monday, 2=Tuesday, ..., 7=Sunday), s and e (0 ≤ s < e ≤ 23) represent the start and end time of the workshop respectively in 24-hour format, and k (1 ≤ k ≤ 100) is the number of employees registered for this workshop, followed by k integers representing the unique ids of the employees. Output \\"No conflict\\" if no employee is registered for overlapping workshops. If there\'s a conflict, output the ids of the first conflicting employee found and the details of both conflicting workshops in the format: \\"id d1 s1 e1 d2 s2 e2\\" Where id is the employee id, and (d1, s1, e1) and (d2, s2, e2) are the details of the two conflicting workshops. Example: Input: 3 5 1 9 12 2 1 2 1 11 13 3 2 3 4 2 14 16 2 1 5 Output: 2 1 9 12 1 11 13","solution":"def find_conflicts(n, m, workshops): # Dictionary to store the schedule of each employee employee_schedules = {} for workshop in workshops: d, s, e, k, *ids = workshop for emp_id in ids: if emp_id not in employee_schedules: employee_schedules[emp_id] = [] employee_schedules[emp_id].append((d, s, e)) # Check for conflicts for emp_id, schedule in employee_schedules.items(): # Sorting the schedule based on the day and start time schedule.sort() for i in range(len(schedule) - 1): d1, s1, e1 = schedule[i] d2, s2, e2 = schedule[i + 1] if d1 == d2 and e1 > s2: return f\\"{emp_id} {d1} {s1} {e1} {d2} {s2} {e2}\\" return \\"No conflict\\""},{"question":"Chris is designing a game called \\"Grid Master\\". In this game, players manipulate a grid of numbers to achieve a target configuration. However, there are certain rules for changing the cells in the grid. You will be given an `n x m` grid of integers and a target grid of the same size. You need to determine if it\'s possible to transform the given grid to the target grid according to the following rules: 1. You can increase or decrease any value in the grid by 1. 2. Each change affects a single cell. 3. You can perform at most `k` changes. Write a function that determines whether it\'s possible to transform the grid within the given number of steps. The function should take the following inputs: - An integer `n` (1 ≤ n ≤ 50), the number of rows in the grid. - An integer `m` (1 ≤ m ≤ 50), the number of columns in the grid. - An integer `k` (0 ≤ k ≤ 2500), the maximum number of changes allowed. - A 2D list of integers representing the initial grid. - A 2D list of integers representing the target grid. The function should output: - \\"YES\\" if it is possible to transform the grid to the target within `k` moves. - \\"NO\\" otherwise. Example: ```python def can_transform_grid(n, m, k, initial_grid, target_grid): # Your code here n = 3 m = 3 k = 5 initial_grid = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] target_grid = [ [1, 2, 4], [4, 5, 7], [7, 8, 10] ] print(can_transform_grid(n, m, k, initial_grid, target_grid)) # Output should be \\"YES\\" ``` Note: - The difference between corresponding elements in the initial and target grid should be considered for calculating the number of changes required. - It is guaranteed that all integers in the grids are within the range from -10^4 to 10^4.","solution":"def can_transform_grid(n, m, k, initial_grid, target_grid): Determines if it is possible to transform the initial grid to the target grid within k operations. Args: - n (int): Number of rows in the grid. - m (int): Number of columns in the grid. - k (int): Maximum number of changes allowed. - initial_grid (list[list[int]]): The starting grid of integers. - target_grid (list[list[int]]): The target grid of integers. Returns: - str: \\"YES\\" if transformation is possible within k changes, \\"NO\\" otherwise. total_changes_needed = 0 for i in range(n): for j in range(m): total_changes_needed += abs(initial_grid[i][j] - target_grid[i][j]) return \\"YES\\" if total_changes_needed <= k else \\"NO\\""},{"question":"A group of friends has started a special currency trading game, where they try to maximize the total amount of a specific currency after a series of exchanges. Given a set of n currencies, numbered from 1 to n, and a list of m bidirectional exchange rates between these currencies, the goal is to determine the maximum possible amount of a given target currency that they can obtain using a limited number of exchanges, starting from a certain amount of an initial currency. Each friend will start with a specific currency and a given amount of that currency. In a single exchange, a friend can choose any available exchange rate and trade between two currencies according to the exchange rate. You are given the following information: - The number of currencies n (2 ≤ n ≤ 100). - The number of bidirectional exchange rates m (1 ≤ m ≤ 10,000). - Each of the m bidirectional exchange rates in the form (ci, cj, r), meaning currency ci can be exchanged for currency cj at the rate r (1.0 ≤ r ≤ 10.0). - The maximum number of exchanges k (1 ≤ k ≤ 100). - The initial currency number s (1 ≤ s ≤ n) and the amount of that currency A. - The target currency number t (1 ≤ t ≤ n). Compute the maximum amount of the target currency t that can be obtained from starting with A units of the initial currency s, by performing at most k exchanges. The input format is: - The first line contains the integers n, m, and k. - The next m lines each contain three values ci, cj, and r, indicating an exchange rate between currency ci and currency cj. - The next line contains the integers s and t, and the float A, representing the initial currency number, the target currency number, and the initial amount of the starting currency respectively. The output format is: - A single float number with up to six decimal places, indicating the maximum amount of currency t that can be obtained. Input example: ``` 3 3 2 1 2 1.5 2 3 1.2 3 1 0.9 1 3 10.0 ``` Output example: ``` 16.200000 ``` Explanation: In the sample input, there are three currencies and three exchange rates between them. The starting currency is 1 with an amount of 10.0, and the target currency is 3. With at most two exchanges, the optimal path would be 1 → 2 → 3, which gives 10.0 * 1.5 * 1.2 = 18.0 units of currency 3.","solution":"def max_currency_trade(n, m, k, exchanges, s, t, A): from math import inf # Initialize the DP table with very small values dp = [[-inf] * (k + 1) for _ in range(n + 1)] dp[s][0] = A for exchange in range(1, k + 1): for ci, cj, r in exchanges: # Update dp table for exchange ci -> cj if dp[ci][exchange - 1] != -inf: dp[cj][exchange] = max(dp[cj][exchange], dp[ci][exchange - 1] * r) # Update dp table for exchange cj -> ci if dp[cj][exchange - 1] != -inf: dp[ci][exchange] = max(dp[ci][exchange], dp[cj][exchange - 1] / r) # The maximum amount of target currency t using at most k exchanges return max(dp[t]) # Reading input format def parse_input(): import sys input = sys.stdin.read data = input().split() idx = 0 n = int(data[idx]) m = int(data[idx + 1]) k = int(data[idx + 2]) idx += 3 exchanges = [] for _ in range(m): ci = int(data[idx]) cj = int(data[idx + 1]) r = float(data[idx + 2]) exchanges.append((ci, cj, r)) idx += 3 s = int(data[idx]) t = int(data[idx + 1]) A = float(data[idx + 2]) return n, m, k, exchanges, s, t, A if __name__ == \\"__main__\\": n, m, k, exchanges, s, t, A = parse_input() result = max_currency_trade(n, m, k, exchanges, s, t, A) print(f\\"{result:.6f}\\")"},{"question":"Dan works as a delivery person on a city grid. His job is to deliver packages to various locations efficiently. The city is structured as a grid with streets running east-west and north-south. Dan starts at position (0, 0) and can move to adjacent blocks either north, south, east, or west. He has a list of coordinates where packages need to be delivered and the time it takes him to reach each coordinate is equivalent to the Manhattan distance from his current position. Given a set of delivery locations with their respective deadlines, find the maximum number of packages that Dan can deliver on time. Dan can carry only one package at a time and needs to return to the starting position (0, 0) each time before picking up the next package. Input format: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of packages that Dan needs to deliver. - The next n lines contain three integers each representing the x-coordinate, the y-coordinate, and the deadline t (in time units) for each package. Output format: - Output a single integer — the maximum number of packages Dan can deliver on time. Example: Input: 4 2 3 10 -1 -1 5 3 4 15 -2 -3 20 Output: 2 Explanation: In this example, Dan can deliver two packages on time. He can deliver the package at (-1, -1) and return to the start position in time to deliver the package at (2, 3). The other packages cannot be delivered on time due to the travel constraints.","solution":"def max_packages(n, deliveries): Calculate the maximum number of packages Dan can deliver on time. Parameters: n (int): number of packages. deliveries (List[Tuple[int, int, int]]): List of tuples, each containing x-coordinate, y-coordinate, and deadline. Returns: int: Maximum number of packages that can be delivered on time. deliveries.sort(key=lambda x: x[2]) # Sort by deadline def manhattan_distance(x, y): return abs(x) + abs(y) current_time = 0 delivered_packages = 0 for x, y, t in deliveries: travel_time = 2 * manhattan_distance(x, y) # to the location and back if current_time + travel_time <= t: delivered_packages += 1 current_time += travel_time return delivered_packages"},{"question":"There\'s a forest, in which there are n trees standing in a straight line. Each tree i has a certain height hi. Due to certain limitations, the height of a tree can only be increased by exactly 1 unit at any time. The forest guard wants to make the heights of all the trees equal. Given the initial heights of the trees, you need to determine the minimum number of operations needed to make the heights of all the trees equal. The first line of the input contains a single integer n (1 ≤ n ≤ 105), the number of trees. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 104), the initial heights of the trees. Print a single integer, the minimum number of operations required to make the heights of all the trees equal. Comments to the samples from the statement: In the first sample, [1, 2, 3], the target height should be 3, and the operations needed are (3-1) + (3-2) = 3. In the second sample, [4, 9, 5, 6], the target height should be 9, and the operations needed are (9-4) + (9-5) + (9-6) = 12. In the third sample, [7, 7, 7], the trees are already of equal height, so the answer is 0.","solution":"def min_operations_to_make_heights_equal(n, heights): This function calculates the minimum number of operations needed to make the heights of all the trees equal. :param n: int - the number of trees :param heights: list - the initial heights of the trees :return: int - minimum number of operations required to make the heights of all trees equal max_height = max(heights) operations = sum(max_height - height for height in heights) return operations"},{"question":"In a distant galaxy, there are planets inhabited by alien species called Xenons. Each Xenon on these planets communicates using a unique pattern of words. A pattern is defined as valid if it follows a specific rule: the Vowels (A, E, I, O, U) and Consonants in the pattern alternate. For example, \\"ABACABA\\" and \\"BAB\\" are valid patterns, but \\"AABB\\" is not. Your task is to write a function that determines whether a given pattern is valid according to the Xenons\' rule. You need to check if vowels and consonants alternate correctly in the given string. The input string will only contain uppercase letters and has a length of at most 1000 characters. Input: - The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. - The following T lines each contain a single string S which needs to be checked for validity. Output: For each test case, output \\"YES\\" if the string is valid according to the Xenons\' pattern rule, otherwise output \\"NO\\". Example: Input: 3 ABACABA HELLO AEIOU Output: YES NO NO Note: The string \\"HELLO\\" is not valid because \\"L\\" and \\"L\\" are two consecutive consonants without an alternating vowel in between. Also, \\"AEIOU\\" is invalid because there are consecutive vowels.","solution":"def is_valid_pattern(s): Determines if the given string is a valid pattern of alternating vowels and consonants. vowels = set(\\"AEIOU\\") for i in range(1, len(s)): if (s[i] in vowels) == (s[i - 1] in vowels): return \\"NO\\" return \\"YES\\" def check_patterns(test_cases, patterns): For a list of patterns, check if each pattern is valid and return corresponding results. results = [] for pattern in patterns: results.append(is_valid_pattern(pattern)) return results"},{"question":"You are given an array of integers. You need to rearrange the array such that all negative integers appear before all positive integers while maintaining the relative order of both negative and positive integers. Your task is to implement a function that rearranges the array in the desired order. # Function Signature ```python def rearrange_negatives(arr: List[int]) -> List[int]: pass ``` # Input The input to the function consists of a single parameter: - `arr` (1 <= len(arr) <= 100000): A list of integers where each element can be negative, zero, or positive. # Output The function should return a list of integers rearranged such that all negative integers appear before all positive integers while maintaining the relative order of both negative and positive integers. # Example ```python # Example 1: input: arr = [1, -2, 3, -4, 5] output: [-2, -4, 1, 3, 5] # Example 2: input: arr = [0, -1, 2, -3, 4] output: [-1, -3, 0, 2, 4] # Example 3: input: arr = [-1, -2, -3, 4, 5] output: [-1, -2, -3, 4, 5] ``` # Note 1. The function should maintain the relative order of negative and positive integers. 2. Zero is considered a non-negative integer, so it should appear with the positive integers in the final result.","solution":"from typing import List def rearrange_negatives(arr: List[int]) -> List[int]: Rearranges the array such that all negative integers appear before all positive integers while maintaining the relative order of both negative and positive integers. negatives = [x for x in arr if x < 0] non_negatives = [x for x in arr if x >= 0] return negatives + non_negatives"},{"question":"Mansour is determined to enhance his typing speed by practicing typing specific sentences. To do this effectively, he needs to know how often he types certain words incorrectly and wishes to analyze his typing sessions. Given a string representing a typed sentence and a dictionary of correct words, Mansour\'s task is to find out how many words in the sentence are incorrect. Write a function `count_incorrect_words(sentence: str, dictionary: List[str]) -> int` that takes a string sentence and a list of strings dictionary as input. The function should return the number of words in the sentence that are not found in the dictionary. The comparison should be case-insensitive, and any punctuation should be ignored. # Input: - A single string `sentence` (1 ≤ len(sentence) ≤ 10^6) containing words separated by whitespace and possibly containing various punctuation marks. - A list of strings `dictionary` (1 ≤ len(dictionary) ≤ 10^5, 1 ≤ len(dictionary[i]) ≤ 100) representing the correct words, all in lowercase and without punctuation. # Output: - Return a single integer — the number of words in the sentence that are not in the dictionary. # Example: ```python sentence = \\"Hello, world! This is a typing speed test.\\" dictionary = [\\"hello\\", \\"world\\", \\"this\\", \\"is\\", \\"a\\", \\"test\\"] result = count_incorrect_words(sentence, dictionary) print(result) # Output: 2 ``` # Explanation: In the given example, the words \\"typing\\" and \\"speed\\" are not in the dictionary, hence the function returns 2.","solution":"import re from typing import List def count_incorrect_words(sentence: str, dictionary: List[str]) -> int: Returns the number of words in the sentence that are not in the dictionary. # Convert dictionary to set for faster lookup dictionary_set = set(dictionary) # Normalize the sentence by converting to lower case and removing punctuation # Split into words using regex to capture all words while ignoring punctuation words = re.findall(r\'bw+b\', sentence.lower()) # Count the number of words that are not in the dictionary incorrect_count = sum(1 for word in words if word not in dictionary_set) return incorrect_count"},{"question":"You are given a grid with dimensions m times n, where each cell of the grid contains either a \'.\', which represents an empty cell or a \'#\', which represents an obstacle. You are also given the starting position of a robot in the grid. The goal is to determine whether the robot can reach the bottom-right corner of the grid from its starting position. The robot can only move one step at a time, and it can move in four directions: up, down, left, or right. The robot cannot move outside the grid or into a cell containing an obstacle (\'#\'). Write a program that determines whether the robot can reach the bottom-right corner from its starting position. The first line contains two integers m and n (1 leq m, n leq 1000), the dimensions of the grid. The following m lines each contain n characters, representing the grid. The character \'.\' indicates an empty cell, and \'#\' indicates an obstacle. The last line contains two integers r_x and r_y (1 leq r_x leq m, 1 leq r_y leq n), the starting coordinates of the robot, where r_x and r_y are 1-based indices. Output \\"YES\\" if the robot can reach the bottom-right corner, otherwise output \\"NO\\". # Sample Input 1: ``` 5 5 ..... .#. ....# . ..... 1 1 ``` # Sample Output 1: ``` NO ``` # Sample Input 2: ``` 4 4 .... .#.. .... .... 1 1 ``` # Sample Output 2: ``` YES ``` # Sample Input 3: ``` 3 3 # #.. # 1 3 ``` # Sample Output 3: ``` NO ``` Explanation: In the first example, there are obstacles in the grid that prevent the robot from reaching the bottom-right corner. In the second example, the robot can navigate through the empty cells to reach the bottom-right corner. In the third example, the robot starts in an isolated portion of the grid and cannot reach the bottom-right corner.","solution":"def can_reach_bottom_right(m, n, grid, r_x, r_y): from collections import deque # Convert to 0-based indexing r_x -= 1 r_y -= 1 if grid[r_x][r_y] == \'#\': return \\"NO\\" directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] queue = deque([(r_x, r_y)]) visited = set((r_x, r_y)) while queue: x, y = queue.popleft() # If it reaches the bottom-right corner if x == m-1 and y == n-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"# Replace Every k-th Element with Sum Create a function that processes an array of integers and a positive integer value `k`. The goal of the function is to replace every `k-th` element of the array with the sum of itself and the previous `k-1` elements in the array. For instance, given the array `[3, 1, 4, 1, 5, 9, 2, 6]` and `k = 3`, the function should return `[3, 1, 8, 1, 5, 15, 2, 6]`. Here, the `3rd (4)` and `6th (9)` elements are replaced by the sum of the first three (`3+1+4 = 8`) and the elements from the 4th to the 6th (`1+5+9 = 15`) respectively. # Input - The first line contains an integer `t` (`1 ≤ t ≤ 100`) – the number of test cases. - Each test case contains an integer `n` (`1 ≤ n ≤ 100`) – the size of the array. - The second line contains an integer `k` (`1 ≤ k ≤ n`). - The third line contains `n` integers separated by spaces representing the elements of the array. # Output For each test case, output the modified array on a new line. Each array should be formatted to replace every `k-th` element with the sum of itself and the previous `k-1` elements. # Example Input ``` 2 8 3 3 1 4 1 5 9 2 6 6 2 2 7 1 8 2 8 ``` Output ``` 3 1 8 1 5 15 2 6 2 9 1 9 2 10 ```","solution":"def replace_kth_element_with_sum(arr, k): for i in range(k-1, len(arr), k): arr[i] = sum(arr[i-k+1:i+1]) return arr def process_test_cases(t, test_cases): results = [] for i in range(t): n, k, arr = test_cases[i] results.append(replace_kth_element_with_sum(arr, k)) return results"},{"question":"Create a function `is_isogram` that determines whether a given string is an isogram. An isogram is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. The function should return `True` if the string is an isogram and `False` otherwise. # Function Signature ```python def is_isogram(input_string: str) -> bool: pass ``` # Input - The input string `input_string` consists of lower and upper case alphabets, spaces, and hyphens (1 ≤ len(input_string) ≤ 100). # Output - The output is a boolean value, `True` or `False`. # Example ```python is_isogram(\\"machine\\") # Output: True is_isogram(\\"isogram\\") # Output: True is_isogram(\\"isograms\\") # Output: False is_isogram(\\"isogram-1\\") # Output: False is_isogram(\\"is ogram\\") # Output: True is_isogram(\\"is oGRAM\\") # Output: True ```","solution":"def is_isogram(input_string: str) -> bool: Determines whether the input string is an isogram. An isogram is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times. cleaned_string = input_string.replace(\\" \\", \\"\\").replace(\\"-\\", \\"\\").lower() return len(set(cleaned_string)) == len(cleaned_string)"},{"question":"You are given a 2D grid with n rows and m columns. Each cell in the grid contains an integer value. Your task is to handle several queries on this grid. Each query can be one of the following types: 1. Update the integer value of a particular cell. 2. Find the maximum value within a subgrid defined by its top-left and bottom-right corners. Given the initial grid configuration and a series of queries, provide the results for the range queries. The input format is as follows: - The first line contains two space-separated integers n and m (1 ≤ n, m ≤ 1000), representing the number of rows and columns in the grid, respectively. - The next n lines each contain m space-separated integers, representing the initial values of the grid. - The following line contains an integer q (1 ≤ q ≤ 100000), representing the number of queries. - The next q lines describe the queries. Each query can be in one of two formats: - \\"1 x y v\\": Update the value of the cell at row x and column y to v (1 ≤ x ≤ n, 1 ≤ y ≤ m, 0 ≤ v ≤ 10^9). - \\"2 x1 y1 x2 y2\\": Find the maximum value in the subgrid whose top-left corner is (x1, y1) and bottom-right corner is (x2, y2) (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m). For each query of the second type, output the result of the query. You need to implement an efficient solution to handle up to 100,000 queries on a grid of up to 1,000 x 1,000 cells.","solution":"class Grid: def __init__(self, n, m, grid): self.n = n self.m = m self.grid = grid def update_value(self, x, y, v): self.grid[x-1][y-1] = v def find_max_in_subgrid(self, x1, y1, x2, y2): max_value = float(\'-inf\') for i in range(x1-1, x2): for j in range(y1-1, y2): if self.grid[i][j] > max_value: max_value = self.grid[i][j] return max_value def process_queries(n, m, initial_grid, queries): grid = Grid(n, m, initial_grid) results = [] for query in queries: parts = query.split() if parts[0] == \\"1\\": x, y, v = int(parts[1]), int(parts[2]), int(parts[3]) grid.update_value(x, y, v) elif parts[0] == \\"2\\": x1, y1, x2, y2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) result = grid.find_max_in_subgrid(x1, y1, x2, y2) results.append(result) return results"},{"question":"A young wizard has just started learning spells and has a spellbook containing n spells. Each spell is defined by its power level, a[i], which can be either positive, negative, or zero. The wizard wants to maximize his overall spell power by selecting a contiguous subarray of spells from his spellbook such that the sum of the powers of the spells in that subarray is as large as possible. Your task is to help the wizard by writing a function that finds the maximum sum of any contiguous subarray of spells. Input: - The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of spells in the spellbook. - The second line contains n integers a[i] (-10^9 ≤ a[i] ≤ 10^9) — the power levels of the spells. Output: - A single integer representing the maximum sum of any contiguous subarray of spells. Example: Input: 5 -2 1 -3 4 -1 2 1 -5 4 Output: 6 Explanation: The maximum sum of any contiguous subarray is obtained by selecting subarray [4, -1, 2, 1], giving a sum of 6.","solution":"def maximum_subarray_sum(n, a): Finds the maximum sum of any contiguous subarray of spells. Parameters: n (int): The number of spells. a (list of int): The power levels of the spells. Returns: int: The maximum sum of any contiguous subarray. max_sum = a[0] current_sum = a[0] for i in range(1, n): current_sum = max(a[i], current_sum + a[i]) max_sum = max(max_sum, current_sum) return max_sum # Example usage: # n = 5 # a = [-2, 1, -3, 4, -1, 2, 1, -5, 4] # print(maximum_subarray_sum(n, a)) # Expected output: 6"},{"question":"You are given a binary tree with n nodes, where each node has a unique value between 1 and n. Your task is to determine the diameter of the binary tree. The diameter of a binary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. The first line contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. For each test case: - The first line contains one integer n (1 le n le 10^4) — the number of nodes in the tree. - The following n-1 lines each contain two integers u and v (1 le u, v le n) indicating that there is an edge between node u and node v. It is guaranteed that the sum of n over all test cases does not exceed 10^5. For each test case, print a single integer — the diameter of the binary tree corresponding to that test case.","solution":"from collections import deque def tree_diameter(n, edges): if n == 1: return 0 def bfs(start): dist = [-1] * (n + 1) dist[start] = 0 q = deque([start]) farthest_node = start while q: node = q.popleft() for neighbor in adj[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 q.append(neighbor) if dist[neighbor] > dist[farthest_node]: farthest_node = neighbor return farthest_node, dist[farthest_node] adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) far_node_1, _ = bfs(1) far_node_2, diameter = bfs(far_node_1) return diameter def solve(t, test_cases): results = [] for i in range(t): n, edges = test_cases[i] results.append(tree_diameter(n, edges)) return results"},{"question":"Given a company that awards employees with badges for various accomplishments, such as \\"Employee of the Month\\" and \\"Top Performer\\". There are 4 \\"Employee of the Month\\" badges and 6 \\"Top Performer\\" badges. Each badge can be assigned to any employee, and an employee can receive multiple badges of either type. There are \'m\' employees in the company. The company wants to know the number of ways to distribute the badges among the employees, given that each badge must be assigned to exactly one employee and each employee can receive any number of badges. Write a function that takes an integer \'m\' (1 <= m <= 400) as input and returns the number of ways to distribute the badges. **Input:** - An integer \'m\', the number of employees in the company. **Output:** - An integer, the number of ways to distribute the badges among the employees. **Example:** - Input: 3 - Output: 16000 Note: The function should be efficient enough to handle the upper constraint (m = 400).","solution":"def distribute_badges(m): Returns the number of ways to distribute 4 \\"Employee of the Month\\" badges and 6 \\"Top Performer\\" badges among \'m\' employees. Parameters: m (int): the number of employees in the company Returns: int: the number of ways to distribute the badges from math import pow # Calculate the number of ways to distribute 4 \\"Employee of the Month\\" badges ways_employee_of_the_month = int(pow(m, 4)) # Calculate the number of ways to distribute 6 \\"Top Performer\\" badges ways_top_performer = int(pow(m, 6)) # The total number of ways to distribute the badges is the product of the above two total_ways = ways_employee_of_the_month * ways_top_performer return total_ways"},{"question":"You are given an array of integers `arr` of length `n`. Your task is to perform a series of operations to sort the array in ascending order. The only operation allowed is to select any two elements `arr[i]` and `arr[j]` (where `i` and `j` are distinct indices in the array), and swap their positions in the array. Design an algorithm that minimizes the number of swaps required to sort the array, and explain its implementation. Then, implement the algorithm and solve the given input. Constraints: - The length of the array `n` will be in the range 1 ≤ n ≤ 10^5. - The elements of the array `arr[i]` will be in the range -10^6 ≤ arr[i] ≤ 10^6. Input Format: - The first line contains an integer `n`, the length of the array. - The second line contains `n` space-separated integers, the elements of the array `arr`. Output Format: - The first line should contain an integer `s`, the minimum number of swaps required to sort the array. - The second line should contain the space-separated sequence of integers representing the sorted array. Example: Input: ``` 5 4 3 1 2 5 ``` Output: ``` 3 1 2 3 4 5 ``` Explanation: In this example, the array can be sorted in ascending order with a minimum of 3 swaps: 1. Swap positions of elements 4 and 1: `1 3 4 2 5` 2. Swap positions of elements 3 and 2: `1 2 4 3 5` 3. Swap positions of elements 4 and 3: `1 2 3 4 5` Note: - You are required to submit the source code of your solution.","solution":"def minimum_swaps_to_sort(arr): Sorts the array in ascending order using the minimum number of swaps. Parameters: arr (list): List of integers Returns: tuple: (minimum number of swaps, sorted array) n = len(arr) arrpos = list(enumerate(arr)) arrpos.sort(key=lambda it: it[1]) visited = {k: False for k in range(n)} swaps = 0 for i in range(n): if visited[i] or arrpos[i][0] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arrpos[j][0] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) sorted_arr = [arrpos[i][1] for i in range(n)] return swaps, sorted_arr # Example usage: # n = 5 # arr = [4, 3, 1, 2, 5] # swaps, sorted_arr = minimum_swaps_to_sort(arr) # print(swaps) # Output: 3 # print(sorted_arr) # Output: [1, 2, 3, 4, 5]"},{"question":"A chef is preparing a list of dishes for an upcoming event. The chef currently has n dishes. Each dish is either vegetarian or non-vegetarian. The chef wants to ensure there are enough vegetarian options available at the event. Given a list of dishes where each element is \'V\' for vegetarian and \'N\' for non-vegetarian, your task is to determine if it\'s possible to have at least half of the dishes as vegetarian. The first line contains a single integer n (1 ≤ n ≤ 100) — the number of dishes. The second line contains a string of length n consisting of characters \'V\' and \'N\'. Print \\"YES\\" if it\'s possible to have at least half of the dishes as vegetarian, and \\"NO\\" otherwise. Example input: 5 VNVNV Example output: YES","solution":"def can_have_half_vegetarian(n, dishes): Determines if it is possible to have at least half of the dishes as vegetarian. Parameters: n (int): Number of dishes. dishes (str): String consisting of n characters \'V\' and \'N\'. Returns: str: \\"YES\\" if it\'s possible to have at least half of the dishes as vegetarian, \\"NO\\" otherwise. veg_count = dishes.count(\'V\') if veg_count >= (n + 1) // 2: return \\"YES\\" else: return \\"NO\\""},{"question":"A town has a unique Ethernet network layout. The network consists of n servers connected by n-1 direct cables. Each direct cable connects exactly two different servers (u and v) and has a specific bandwidth (b). The servers are numbered 1 through n. Mayor John wants to optimize the network\'s performance for any given pair of servers by allowing up to one cable upgrade. The upgrade can increase the bandwidth of an existing cable by any positive amount, effectively making it infinitely large. Your task is to write a program that determines the maximum possible bandwidth for a given pair of servers (a, b) after potentially upgrading one cable along the path between them. The first line of the input contains an integer n (2 ≤ n ≤ 100,000) — the number of servers. The following n-1 lines each contain three integers u, v, b (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ b ≤ 1,000,000) — describing a direct cable with bandwidth b connecting servers u and v. The next line contains an integer q (1 ≤ q ≤ 100,000) — the number of queries. Each of the following q lines contains two integers a and b (1 ≤ a, b ≤ n, a ≠ b) — a pair of servers for which you need to calculate the maximum bandwidth. Output q lines — each containing the maximum possible bandwidth for the given pairs of servers after the possible upgrade. Example Input: 5 1 2 5 2 3 10 2 4 1 4 5 3 3 1 3 1 4 3 5 Example Output: 10 3 10 Explanation: To connect server 1 and server 3, without any upgrade, the minimum bandwidth along the path [1-2-3] is 5. An upgrade on the cable 1-2 (5 to infinite) allows the path to be limited by the 10 bandwidth cable from 2 to 3, so the max is 10. To connect server 1 and server 4, without any upgrade, the minimum bandwidth along the path [1-2-4] is 1. An upgrade on the cable 2-4 (1 to infinite) allows the path to be limited by the 5 bandwidth cable from 1 to 2, so the max is 3. To connect server 3 and server 5, without any upgrade, the minimum bandwidth along the path [3-2-4-5] is 1. An upgrade on the cable 2-4 (1 to infinite) allows the path to be limited by the 3 bandwidth cable from 4 to 5, so the max is 10.","solution":"from heapq import heappush, heappop from collections import defaultdict import sys def network_optimization(n, edges, queries): # Create adjacency list to represent the graph graph = defaultdict(list) for u, v, b in edges: graph[u].append((v, b)) graph[v].append((u, b)) # Function to find the bandwidth of the path using Dijkstra\'s algorithm def dijkstra(start, end): min_heap = [(0, start, [])] # (negative bandwidth, node, path) visited = set() while min_heap: neg_bw, node, path = heappop(min_heap) if node in visited: continue visited.add(node) path = path + [node] if node == end: return -neg_bw, path for neighbor, bw in graph[node]: if neighbor not in visited: heappush(min_heap, (-(min(-neg_bw, bw)), neighbor, path)) return float(\'inf\'), [] results = [] for a, b in queries: max_bw, path = dijkstra(a, b) if max_bw == float(\'inf\'): results.append(max_bw) continue if len(path) == 1: results.append(max_bw) continue # we can upgrade one cable to increase maximum bandwidth max_possible_bw = max_bw for i in range(len(path) - 1): u, v = path[i], path[i + 1] for neighbor, bw in graph[u]: if neighbor == v: max_possible_bw = max(max_possible_bw, bw) break results.append(max_possible_bw) return results # Example usage: n = 5 edges = [ (1, 2, 5), (2, 3, 10), (2, 4, 1), (4, 5, 3) ] queries = [ (1, 3), (1, 4), (3, 5) ] # Expected Output: [10, 5, 10] print(network_optimization(n, edges, queries))"},{"question":"Vika loves graph theory and spends her free time beautifying graphs. One day, she encountered an undirected graph with ( n ) vertices and ( m ) edges. A graph is called beautiful if it has exactly one connected component and each vertex has an even degree. Vika decided to transform the given undirected graph into a beautiful graph by adding the minimum number of edges. It is guaranteed that the graph will have no multiple edges or self-loops. You are given the description of the graph. Your task is to determine the minimum number of edges Vika needs to add to make the graph beautiful. **Input:** - The first line contains two integers ( n ) and ( m ) (( 1 leq n leq 1000 ), ( 0 leq m leq frac{n(n-1)}{2} )) — the number of vertices and the number of edges in the graph, respectively. - The next ( m ) lines each contain two integers ( u ) and ( v ) (( 1 leq u, v leq n ), ( u neq v )) representing an edge between vertex ( u ) and vertex ( v ). **Output:** - Output a single integer — the minimum number of edges Vika needs to add. **Example:** **Input:** ``` 4 2 1 2 3 4 ``` **Output:** ``` 3 ``` **Explanation:** In the given example, we have two connected components ({1, 2}) and ({3, 4}). All vertices have an odd degree. The minimum number of edges needed to make this graph beautiful is 3. One way to do it is adding edges (1, 3), (2, 4), and (3, 1). Then the degrees of all vertices become even, and the graph is connected.","solution":"def beautify_graph(n, m, edges): from collections import defaultdict # Create graph as adjacency list and degree list graph = defaultdict(list) degrees = [0] * n for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) degrees[u-1] += 1 degrees[v-1] += 1 # Step 1: Find the number of extra edges needed to make the graph a single connected component def dfs(v, visited): stack = [v] while stack: node = stack.pop() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True stack.append(neighbor) visited = [False] * n components = 0 for i in range(n): if not visited[i]: components += 1 visited[i] = True dfs(i, visited) # To make the graph connected we need (components - 1) new edges # Step 2: Count the number of vertices with odd degree odd_degree_vertices = sum(1 for d in degrees if d % 2 == 1) # To ensure all nodes have even degree, we need to connect odd degree nodes in pairs # The number of edges needed is half of the number of odd degree vertices add_edges_to_even_degrees = odd_degree_vertices // 2 # Total edges to add total_edges_to_add = (components - 1) + add_edges_to_even_degrees return total_edges_to_add"},{"question":"Alex is a food enthusiast who recently started experimenting with recipes to create unique dishes. He has `n` recipes, each recipe having a unique ID ranging from `1` to `n`. Alex wants to prepare a gourmet meal by selecting a subset of these recipes. However, due to various dietary restrictions and preferences, he can only select a subset where no two selected recipes share any common ingredient. Every recipe has a list of ingredients represented by integers. Your task is to help Alex find the maximum number of recipes he can select such that no two selected recipes share any common ingredient. The first input line contains two integers `n` (1 ≤ n ≤ 10000) and `m` (1 ≤ m ≤ 50000), where `n` is the total number of recipes and `m` is the total number of unique ingredients. Each of the next `n` lines contains an integer followed by a list of integers. The first integer is the number of ingredients in the recipe, and the following integers are the IDs of the ingredients (1 ≤ ID ≤ m). Output a single integer, the maximum number of recipes Alex can select that meet the criteria. **Example:** Input: ``` 5 7 3 1 2 3 2 3 4 3 5 6 7 2 2 5 1 4 ``` Output: ``` 3 ``` In the example, Alex can select the 1st, 3rd, and 5th recipes since they do not share any ingredients. Thus, the maximum number of recipes he can select is 3.","solution":"def max_recipes(n, m, recipes): def can_add_recipe(selected_recipes, new_recipe): for ingredient in new_recipe: if ingredient in selected_recipes: return False return True def backtrack(index, selected_recipes): if index == len(recipes): return len(selected_recipes_recipe_ids) # Option to skip current recipe max_without_curr = backtrack(index + 1, selected_recipes) # Option to include current recipe (if possible) current_recipe = recipes[index] if can_add_recipe(selected_recipes, current_recipe): for ingredient in current_recipe: selected_recipes.add(ingredient) selected_recipes_recipe_ids.add(index) max_with_curr = backtrack(index + 1, selected_recipes) for ingredient in current_recipe: selected_recipes.remove(ingredient) selected_recipes_recipe_ids.remove(index) else: max_with_curr = max_without_curr return max(max_without_curr, max_with_curr) selected_recipes_recipe_ids = set() selected_recipes = set() return backtrack(0, selected_recipes) # Writing a wrapper function to parse input correctly def gourmet_meal(n, m, raw_recipes): recipes = [list(map(int, raw_recipe.split()))[1:] for raw_recipe in raw_recipes] return max_recipes(n, m, recipes)"},{"question":"In an ancient kingdom, there exists a special kind of flower garden known as the \\"Royal Blossom Path\\". These gardens are unique because their paths form a perfect tree structure. A tree is a connected graph without cycles. The Royal Blossom Path is rooted at a specific flower, and each flower is connected to exactly one parent flower except the root flower, which has no parent. Your task is to find the maximum sum of flower values you can collect on any path from the root flower to any leaf flower. A leaf flower is a flower that has no children in the tree. Here is the detailed input format: - The first line of the input contains a single integer n (1 ≤ n ≤ 100000), the total number of flowers in the garden. - The second line contains n integers, where the i-th integer vi (1 ≤ vi ≤ 10000) is the value of the i-th flower. - Each of the next n-1 lines contains two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), indicating that there is a path connecting flower ai and flower bi. Output the maximum sum of flower values on any path from the root flower to any leaf flower. Example: Input: 5 1 2 3 4 5 1 2 1 3 2 4 2 5 Output: 12 Explanation: In this example, the paths from the root to the leaves are: - 1 → 2 → 4, sum is 1 + 2 + 4 = 7 - 1 → 2 → 5, sum is 1 + 2 + 5 = 8 - 1 → 3, sum is 1 + 3 = 4 The maximum sum is achieved by the path 1 → 2 → 5 which is 1 + 2 + 5 = 8.","solution":"def max_sum_path(n, values, paths): from collections import defaultdict, deque # Build the tree tree = defaultdict(list) for ai, bi in paths: tree[ai].append(bi) tree[bi].append(ai) # Perform BFS to find the maximum sum path root = 1 max_sum = [0] * (n + 1) visited = [False] * (n + 1) queue = deque([(root, values[root - 1])]) visited[root] = True while queue: node, current_sum = queue.popleft() is_leaf = True for neighbor in tree[node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_sum + values[neighbor - 1])) is_leaf = False # At the end of BFS, we compare for max path sum for each leaf if is_leaf: max_sum[node] = current_sum return max(max_sum)"},{"question":"You are given an array of integers representing the elevations of various mountains in a mountain range. The elevation of a mountain is defined as the height of the mountain at a specific point. The array is not necessarily sorted. Your task is to determine the longest sequence of strictly increasing elevations in the array. This is known as the Longest Increasing Subsequence (LIS). Write a function that calculates the length of the longest strictly increasing subsequence. Input Format: The first line of input contains an integer n (1 ≤ n ≤ 1000), which represents the number of mountains. The second line contains n integers, e1, e2, ..., en (-10^4 ≤ ei ≤ 10^4), where ei represents the elevation of the i-th mountain. Output Format: Print a single integer, the length of the longest strictly increasing subsequence. Example: Input: 6 10 22 9 33 21 50 Output: 4 Explanation: The longest strictly increasing subsequence is [10, 22, 33, 50], so the output is 4.","solution":"def length_of_lis(elevations): Returns the length of the longest increasing subsequence in the list of elevations. if not elevations: return 0 n = len(elevations) dp = [1] * n # dp[i] will hold the length of the LIS ending at index i for i in range(1, n): for j in range(i): if elevations[i] > elevations[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Polycarp has a row of sticks that he needs to break into the maximum possible number of pieces, each of which has a length not less than m. His goal is to break the sticks such that all resulting pieces have a length that is a multiple of m, and each piece is as long as possible. For example, if a stick has a length of 10 and m=3, he can break it into pieces of lengths [3, 3, 3, 1], where the first three pieces are of lengths that are multiples of m. Since the last piece is less than m, he cannot count it. Given the length of the stick and the value of m, help Polycarp find the maximum possible number of pieces he can obtain. The first line contains an integer t (1 le t le 100) — the number of test cases in the input. Then, t test cases follow, one per line. Each test case consists of two positive integers n (1 le n le 10^9) and m (1 le m le 10^9) — the length of the stick and the minimum length of each piece respectively. Print t answers to the test cases. Each answer is a non-negative integer — the maximum number of pieces of length not less than m. Example: ``` Input: 3 10 3 15 4 8 5 Output: 3 3 1 ``` Explanation: 1. In the first test case, 10 can be divided into pieces of lengths [3, 3, 3], leaving a piece of length 1 which is less than m. Hence, the answer is 3. 2. In the second test case, 15 can be divided into pieces of lengths [4, 4, 4, 3], counting only the first three pieces since they are all not less than m. Hence, the answer is 3. 3. In the third test case, 8 can be divided into pieces of lengths [5, 3], counting only the first piece since it is not less than m. Hence, the answer is 1.","solution":"def max_pieces(t, test_cases): results = [] for n, m in test_cases: results.append(n // m) return results"},{"question":"Sam is working on a robotics project and needs to program a robot to move in a grid. The grid is an m x n matrix where each cell is either empty or contains an obstacle. The robot starts at the top-left corner of the grid and its task is to move to the bottom-right corner. The robot can move up, down, left, or right, but cannot move into a cell containing an obstacle. Furthermore, there must be a battery limit which restricts the number of moves the robot can make. Sam is wondering if it’s possible for the robot to reach the bottom-right corner within the battery limit. Write a function that determines whether the robot can reach the bottom-right corner within a specified number of moves. # Function signature ```python def can_reach(grid: List[List[int]], battery: int) -> bool: ``` # Input - `grid`: a 2D list where `grid[i][j] = 0` represents an empty cell and `grid[i][j] = 1` represents an obstacle. - `battery`: an integer representing the maximum number of moves the robot can make. # Output - Return `True` if the robot can reach the bottom-right corner within the specified number of moves, otherwise return `False`. # Constraints - 1 ≤ m, n ≤ 100 (where m is the number of rows and n is the number of columns in the grid) - 0 ≤ battery ≤ 10000 - The top-left and bottom-right corners are always empty (grid[0][0] == 0 and grid[m-1][n-1] == 0) # Example ```python # Example 1 grid = [ [0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0] ] battery = 6 print(can_reach(grid, battery)) # Output: True # Example 2 grid = [ [0, 0, 1], [1, 0, 1], [0, 0, 0] ] battery = 3 print(can_reach(grid, battery)) # Output: False ``` In the first example, the robot can successfully navigate to the bottom-right corner within 6 moves. In the second example, the shortest path would exceed the battery limit.","solution":"from typing import List def can_reach(grid: List[List[int]], battery: int) -> bool: from collections import deque rows = len(grid) columns = len(grid[0]) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def is_valid(x, y, visited): return 0 <= x < rows and 0 <= y < columns and grid[x][y] == 0 and (x, y) not in visited queue = deque([(0, 0, 0)]) # (x, y, steps) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.popleft() if x == rows - 1 and y == columns - 1: if steps <= battery: return True else: return False for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if is_valid(new_x, new_y, visited): visited.add((new_x, new_y)) queue.append((new_x, new_y, steps + 1)) return False"},{"question":"You are given an array of integers. Your task is to determine the number of unique triplets (i, j, k) such that i, j, and k are indices of the array and the sum of the elements at these indices is zero (arr[i] + arr[j] + arr[k] = 0). The indices i, j, and k must be distinct. The first line contains integer n (1 ≤ n ≤ 2000) — the length of the array. The next line contains n integers, separated by spaces, representing the elements of the array. Output a single integer — the number of unique triplets that sum up to zero. Example: ``` Input 6 -1 0 1 2 -1 -4 Output 2 ```","solution":"def count_zero_sum_triplets(arr): Returns the number of unique triplets that sum up to zero. n = len(arr) arr.sort() count = 0 for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = arr[i] + arr[left] + arr[right] if total == 0: count += 1 while left < right and arr[left] == arr[left + 1]: left += 1 while left < right and arr[right] == arr[right - 1]: right -= 1 left += 1 right -= 1 elif total < 0: left += 1 else: right -= 1 return count"},{"question":"Alice enjoys creating interesting riddles for her friends. Recently, she came up with a number-based puzzle. Given a number n, the goal is to transform it into another number m through a series of operations. The allowed operations are: 1. Increment the number by 1 (n -> n + 1). 2. Double the number (n -> 2 * n). She wants to know the minimum number of operations required to transform n into m using these two operations. Can you help her? Input: - The first line contains two integers n and m (1 ≤ n, m ≤ 10^5), the start and end numbers respectively. Output: - Print the minimum number of operations required to transform n to m. Example: Input: 4 6 Output: 2 Explanation: Starting from 4, the sequence of operations to reach 6 is: 4 -> 5 -> 6 (increment operation used twice, total 2 operations). Input: 5 8 Output: 3 Explanation: Starting from 5, the sequence of operations to reach 8 is: 5 -> 10 -> 9 -> 8 (double operation followed by decrement operation used, total 3 operations). Note: - You can only use the allowed operations to transform n to m. - You may need to consider both operations to find the minimum path.","solution":"from collections import deque def min_operations(n, m): Returns the minimum number of operations required to transform n into m. if n >= m: return n - m # Only increment needed if n is greater than or equal to m queue = deque() queue.append((n, 0)) # (current number, current steps) visited = set() visited.add(n) while queue: current, steps = queue.popleft() if current == m: return steps next1 = current * 2 next2 = current + 1 if next1 == m or next2 == m: return steps + 1 if next1 < 2 * m and next1 not in visited: queue.append((next1, steps + 1)) visited.add(next1) if next2 < 2 * m and next2 not in visited: queue.append((next2, steps + 1)) visited.add(next2) return -1 # This case should never be reached based on problem constraints"},{"question":"You are given a directed graph represented as an adjacency list. Each node in the graph has a unique identifier. Your goal is to implement an algorithm that detects whether there is a cycle in the graph. The input will be a JSON object with a single key \\"graph\\", whose value is an object. Each key in this object is a node identifier, and its associated value is an array of node identifiers to which it has directed edges. Your task is to write a function that takes this JSON object as input, detects whether there is a cycle in the graph, and returns a boolean value (True if a cycle exists, False otherwise). Your code will not be given any inputs. Instead, you should use the provided JSON object to perform your computations. The JSON object will be structured as follows: ```json { \\"graph\\": { \\"0\\": [\\"1\\", \\"2\\"], \\"1\\": [\\"2\\"], \\"2\\": [\\"0\\", \\"3\\"], \\"3\\": [\\"3\\"] } } ``` Based on the provided adjacency list, you should determine if a cycle exists in the graph. In this sample, the graph contains a cycle. Your code should have the following signature: ```python def detect_cycle_in_graph() -> bool: # Your code here ``` Please ensure your solution does not perform any additional operations that are not related to detecting the cycle in the graph.","solution":"def detect_cycle_in_graph(graph_json): Detects whether there is a cycle in the directed graph represented by graph_json. :param graph_json: a dictionary representing graph in JSON format as described. :return: Boolean indicating if there is a cycle (True) or not (False). graph = graph_json[\'graph\'] def visit(node): if node in visiting: # if node is being visited, a cycle is detected return True if node in visited: # if node is already fully visited, no need to visit again return False visiting.add(node) for neighbor in graph.get(node, []): if visit(neighbor): return True visiting.remove(node) visited.add(node) return False visited = set() visiting = set() for node in graph: if visit(node): return True return False"},{"question":"You are assisting a sorcerer who brews potions in his magical lab. Each potion recipe consists of a specific number of unique ingredients. You need to determine the number of distinct potion recipes that can be created given a list of all ingredients available in the lab and the required number of ingredients for each potion. Develop a program that counts the number of unique combinations of ingredients that the sorcerer can use to create potions. The first line of input contains two integers n (1 ≤ n ≤ 20) and k (1 ≤ k ≤ n) separated by a space, where n is the number of available ingredients and k is the number of ingredients needed for each potion. The second line contains n space-separated strings, each representing an ingredient. Each ingredient is distinct and the order of ingredients in a combination does not matter. Print a single integer — the number of distinct potion recipes possible. Example: Input: 4 2 a b c d Output: 6 Explanation: The possible distinct combinations of 2 ingredients out of 4 are: (a, b), (a, c), (a, d), (b, c), (b, d), (c, d). Thus, there are 6 unique combinations.","solution":"from itertools import combinations def count_potion_recipes(n, k, ingredients): Computes the number of distinct potion recipes using k ingredients out of n available ingredients. Args: n (int): The number of available ingredients. k (int): The number of ingredients needed for each potion. ingredients (list): A list of available ingredients. Returns: int: The number of distinct combinations of k ingredients from n ingredients. return len(list(combinations(ingredients, k)))"},{"question":"Polycarpus is playing a game with a sequence of integers. He wants to find the number of non-overlapping subarrays where the product of the elements in each subarray is odd. A subarray is defined as a contiguous section of an array. For a product to be odd, all integers in the subarray must be odd. Given an array of n integers, help Polycarpus determine the number of non-overlapping subarrays with an odd product. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of integers in the array. The second line contains n space-separated integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the array. Output a single integer — the number of non-overlapping subarrays with an odd product. # Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 3 ``` # Explanation: There are three non-overlapping subarrays with an odd product: [1], [3], and [5]. The even numbers in the array prevent forming larger subarrays with an odd product.","solution":"def count_odd_product_subarrays(n, arr): Counts the number of non-overlapping subarrays where the product of elements is odd. :param n: Number of integers in the array. :param arr: List of integers in the array. :return: Number of non-overlapping subarrays with an odd product. count = 0 i = 0 while i < n: if arr[i] % 2 != 0: count += 1 while i < n and arr[i] % 2 != 0: i += 1 i += 1 return count"},{"question":"You are given an n x n grid with some cells blocked. You start at the top-left corner of the grid (0, 0) and need to reach the bottom-right corner (n-1, n-1). However, you must follow these rules: 1. You can move only right or down. 2. You cannot move into blocked cells. Write a function that, given the grid as a 2D list of integers (1 represents blocked cells and 0 represents open cells), returns the number of distinct paths from the top-left corner to the bottom-right corner. If there\'s no path, the function should return 0. Function Signature: ```python def unique_paths(grid: List[List[int]]) -> int: pass ``` # Input: - grid: List[List[int]] - a 2D list where grid[i][j] is either 0 (open) or 1 (blocked), representing an n x n grid. (2 ≤ n ≤ 100) # Output: Return the number of distinct paths from the top-left to the bottom-right corner. # Example: ```python grid = [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] print(unique_paths(grid)) # Output: 2 ``` # Explanation: In the example, there are two unique paths: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"from typing import List def unique_paths(grid: List[List[int]]) -> int: Returns the number of distinct paths from the top-left corner to the bottom-right corner Following the rules: only move right or down, and cannot move into blocked cells (1s). # check if the start or end is blocked if grid[0][0] == 1 or grid[-1][-1] == 1: return 0 n = len(grid) # dp array to store the number of ways to reach each cell dp = [[0] * n for _ in range(n)] # Starting point dp[0][0] = 1 for i in range(n): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # blocked cells do not have any paths else: if i > 0: dp[i][j] += dp[i-1][j] # if not the first row, add the value from the cell above if j > 0: dp[i][j] += dp[i][j-1] # if not the first column, add the value from the cell to the left # The bottom-right corner will contain the number of ways to reach the end return dp[-1][-1]"},{"question":"John is fascinated by numbers, especially those that form unique sequences based on interesting patterns. One day, he discovered a new way to generate a sequence of numbers by repeatedly applying a mathematical operation to each subsequent number. John starts with any two positive integers, a and b, as the initial two elements of the sequence. The rest of the sequence is generated by repeatedly applying the following rule: S_{i} = S_{i-2} * S_{i-1} where S_{i} is the i-th element of the sequence (1-indexed). For a given n (1-based index), help John find the n-th element of the sequence. The only line contains three integers a, b, and n (1 leq a, b leq 100, 1 leq n leq 10). Output the n-th element of the sequence. For example, if a=2, b=3, and n=4, the sequence starts as 2, 3, 6, 18,.... So the 4th element is 18. Another example, if a=5, b=6, and n=5, the sequence starts as 5, 6, 30, 180, 5400,.... So the 5th element is 5400.","solution":"def find_nth_element(a, b, n): Given the initial two elements a and b of the sequence, and the position n, returns the n-th element of the sequence generated by the rule S_i = S_(i-2) * S_(i-1). if n == 1: return a elif n == 2: return b s = [a, b] # Initialize the first two elements of the sequence for i in range(2, n): s.append(s[i-2] * s[i-1]) return s[-1] # Return the n-th element"},{"question":"You are given a sequence of integers representing the scores of students in a coding competition. You need to find out how many pairs of students have scores that differ by exactly k. The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) — the number of students and the exact difference in scores. The next line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 1000) — the scores of the students. Print a single integer — the number of pairs with scores differing by exactly k. Example: Input: 4 2 1 5 3 4 Output: 2 Explanation: The pairs (1, 3) and (3, 5) have scores differing by exactly 2.","solution":"def count_pairs_with_difference_k(n, k, scores): Returns the number of pairs with scores differing by exactly k. :param n: Integer - The number of students :param k: Integer - The exact difference in scores :param scores: List of integers - The scores of the students :return: Integer - The number of pairs with scores differing by exactly k count = 0 scores_set = set(scores) for score in scores: if score + k in scores_set: count += 1 if score - k in scores_set: count += 1 # Each pair is counted twice, so we divide the total count by 2 return count // 2"},{"question":"In a network, computers are connected with each other in a way which can be represented as an undirected graph. Each node in the graph represents a computer, and each edge between two nodes represents a connection between two computers. Your task is to find the minimum number of connections that need to be removed in order to ensure there is exactly one connection path between any two computers in the network (i.e., to make the graph acyclic). Write a function `minRemovals(n, connections)` where `n` is the number of computers (nodes) and `connections` is a list of tuples, each tuple representing a connection between two computers. **Function Signature:** `def minRemovals(n: int, connections: List[Tuple[int, int]]) -> int:` **Input:** - `n`: An integer (1 ≤ n ≤ 100000), the number of computers. - `connections`: A list of tuples where each tuple `(u, v)` represents a connection between computer `u` and computer `v` (1 ≤ u, v ≤ n). **Output:** - An integer representing the minimum number of connections that need to be removed to make the network acyclic. **Example:** ```python print(minRemovals(4, [(1, 2), (2, 3), (3, 4), (1, 3)])) # Output: 1 ``` **Explanation:** In the given example, removing either connection (1, 3) or (2, 3) would make the network acyclic (no cycles present). Therefore, the output is 1.","solution":"from typing import List, Tuple def minRemovals(n: int, connections: List[Tuple[int, int]]) -> int: Returns the minimum number of connections that need to be removed to make the network acyclic. # To form a tree out of n nodes, number of connections needed is n-1 # If there are more than n-1 connections, some connections form cycles # Number of extra connections = total connections - (n - 1) total_connections = len(connections) if total_connections <= n - 1: return 0 return total_connections - (n - 1)"},{"question":"A company organizes a team-building competition where teams compete to collect the most points by solving various problems. Each problem has a specific point value, and each team has a limited time to solve as many problems as they can. However, the company wants to introduce a rule to maximize competitiveness: no two teams should solve exactly the same set of problems. Given a list of teams and the problems they have solved, determine if the rule is violated, i.e., if any two teams have solved exactly the same set of problems. If the rule is violated, find at least one pair of such teams, otherwise confirm that the rule is not violated. The input consists of: - An integer `m` (1 le m le 10^5) representing the number of teams. - An integer `p` (1 le p le 50) representing the number of problems. - The next `m` lines each contain a string of length `p`, where the `j`-th character in the `i`-th line is \'1\' if the `i`-th team has solved the `j`-th problem, and \'0\' otherwise. Output: - \\"No rule violation\\" if no two teams have solved exactly the same set of problems. - Otherwise, output a pair of integers `i` and `j` indicating that team `i` and team `j` have solved exactly the same set of problems (teams are 1-indexed). If multiple pairs exist, output any one of them. Example: Input: ``` 4 5 10001 01110 10001 11111 ``` Output: ``` 1 3 ``` Explanation: - Team 1 and Team 3 have solved the exact same set of problems (`10001`). - Other teams have different sets of solved problems.","solution":"def find_teams_violating_rule(m, p, teams): Determines if any two teams have solved exactly the same set of problems. Parameters: - m: int, the number of teams - p: int, the number of problems - teams: list of strings, each string representing the problems solved by a team Returns: - \\"No rule violation\\" if no two teams have solved the same set of problems. - A tuple (i, j) where i and j are 1-indexed team numbers indicating teams that violated the rule. seen = {} for i in range(m): solved_set = teams[i] if solved_set in seen: return seen[solved_set] + 1, i + 1 seen[solved_set] = i return \\"No rule violation\\""},{"question":"You have a 2-dimensional matrix of integers where each element represents the height of a terrain at that point. Water can flow from a cell to its four neighboring cells (up, down, left, or right) if the neighboring cell\'s height is less than or equal to the current cell\'s height. Write a function that determines the number of cells from which water can flow to both the Pacific and Atlantic Oceans. The Pacific Ocean touches the matrix\'s left and top edges, and the Atlantic Ocean touches the matrix\'s right and bottom edges. **Function Signature** ```python def pacific_atlantic(matrix: List[List[int]]) -> List[List[int]]: ``` **Input** - `matrix` is a list of lists of integers where: - `matrix[i][j]` represents the height of the terrain at cell `(i, j)`. - `1 <= len(matrix), len(matrix[0]) <= 200`. - `0 <= matrix[i][j] <= 10^4`. **Output** - Return a list of lists of integers, where each sublist contains the row and column indexes `[i, j]` of cells that can flow to both Pacific and Atlantic Oceans. Here is an example with inputs and expected outputs: **Example 1:** ```python matrix = [ [1, 2, 2, 3, 5], [3, 2, 3, 4, 4], [2, 4, 5, 3, 1], [6, 7, 1, 4, 5], [5, 1, 1, 2, 4] ] ``` Output: ```python [ [0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0] ] ``` **Explanation:** From the examples above, you can see that: - Cell (0, 4) can flow into the Pacific Ocean (top edge) and the Atlantic Ocean (right edge). - Cell (1, 3) can flow into the Pacific Ocean (left edge via multiple steps) and the Atlantic Ocean (down edge via multiple steps). - And so on for other cells.","solution":"from typing import List def pacific_atlantic(matrix: List[List[int]]) -> List[List[int]]: if not matrix or not matrix[0]: return [] rows, cols = len(matrix), len(matrix[0]) pacific_reachable = [[False] * cols for _ in range(rows)] atlantic_reachable = [[False] * cols for _ in range(rows)] def dfs(row, col, reachable): reachable[row][col] = True for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]: # up, down, left, right new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and not reachable[new_row][new_col] and matrix[new_row][new_col] >= matrix[row][col]: dfs(new_row, new_col, reachable) for r in range(rows): dfs(r, 0, pacific_reachable) dfs(r, cols - 1, atlantic_reachable) for c in range(cols): dfs(0, c, pacific_reachable) dfs(rows - 1, c, atlantic_reachable) result = [] for r in range(rows): for c in range(cols): if pacific_reachable[r][c] and atlantic_reachable[r][c]: result.append([r, c]) return result"},{"question":"You are given a string `s` of length `n` consisting of only lowercase alphabetic characters (\'a\' to \'z\'). A substring of `s` is called \\"distinct\\" if all the characters in that substring are unique. Your task is to find the length of the longest distinct substring in `s`. Input: - The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5), the length of the string `s`. - The second line contains the string `s`. Output: - Print the length of the longest distinct substring in `s`. Example: Input: 7 abcabcbb Output: 3 Explanation: In the given example, the longest distinct substring is \\"abc\\" with length 3. Other distinct substrings like \\"bca\\" and \\"cab\\" also have a length of 3, but there is no distinct substring longer than 3.","solution":"def length_of_longest_distinct_substring(s): Returns the length of the longest substring with all distinct characters. n = len(s) if n == 0: return 0 max_length = 0 start = 0 seen_chars = {} for end in range(n): if s[end] in seen_chars and seen_chars[s[end]] >= start: start = seen_chars[s[end]] + 1 seen_chars[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a list of integers, where each number occurs twice, except for one number which occurs only once. Identify the single integer that does not occur twice. Your task is to find that unique integer. Implement a function to solve this problem. The function should take a single argument: a list of integers. The function should return the integer that occurs only once. # Input - The function will receive a list of integers where the length of the list is odd and at least 1. - Each integer in the list will be within the range 1 leq text{int} leq 10^9 . # Output - The function should return the unique integer that does not occur twice in the list. # Examples Example 1 **Input:** ```python [2, 3, 2, 4, 3] ``` **Output:** ```python 4 ``` Explanation: In the list, the number `4` occurs only once, while all other numbers occur twice. Example 2 **Input:** ```python [7, 1, 5, 7, 1, 3, 5] ``` **Output:** ```python 3 ``` Explanation: In the list, the number `3` occurs only once, while all other numbers occur twice. Example 3 **Input:** ```python [10, 10, 11] ``` **Output:** ```python 11 ``` Explanation: In the list, the number `11` occurs only once, while all other numbers occur twice. # Constraints - The length of the input list will always be odd. - There will always be exactly one integer that occurs only once.","solution":"def find_unique_integer(nums): Finds the integer that occurs only once in the list where every other integer occurs exactly twice. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"In a remote village, there is an ancient mechanical clock that operates in a unique way. The clock consists of n gears aligned in a straight line, each connected to the adjacent one. Each gear i can rotate either clockwise or counterclockwise. For a specific gear to rotate, certain conditions must be met: 1. The gear must be rotated by hand. 2. Any preceding gear connected to it must be rotating in the opposite direction for the rotation to initiate a chain reaction. Every gear has a specific time during which it can be successfully rotated by hand, and a specific energy cost associated with manually rotating that gear. Given these conditions, the goal is to rotate all gears with the minimum total energy cost. The first line of the input contains an integer, n (1 leq n leq 100,000) the number of gears. The second line contains n integers, t_i (1 leq t_i leq 100,000), where t_i is the time window within which gear i can be rotated successfully. The third line contains n integers, e_i (1 leq e_i leq 100,000), where e_i is the energy cost to manually rotate gear i. Output a single integer, the minimum total energy cost required to rotate all the gears. # Example Input ``` 5 3 1 2 5 4 9 7 3 2 6 ``` Output ``` 12 ``` Note In the given example, there are 5 gears with their respective time windows and energy costs. One optimal way to achieve the goal is to manually rotate gears 2 and 4 with a total energy cost of 7 + 2 = 9. The gear 2 rotation will trigger gear 1 and gear 4 rotation will affect gears 3 and 5 cumulatively through chain reactions, resulting in minimal energy usage to rotate all the gears.","solution":"def min_energy_cost(n, t, e): gears = list(zip(t, e)) # Sort gears for rotating them in the increasing order of their time windows gears.sort() total_energy = 0 for _, energy in gears: total_energy += energy return total_energy"},{"question":"In a certain kingdom, there is a magical tree called the FibTree. The FibTree produces fruits following a unique pattern based on the Fibonacci sequence. The tree starts with two fruits on the first day. Each subsequent day, the number of fruits produced is the sum of the fruits produced in the previous two days. The tree continues this pattern indefinitely. Given a specific day `d`, you need to determine the total number of fruits produced by the FibTree on that day. Write a program that takes a single integer `d` (1 ≤ d ≤ 10^18) and returns the number of fruits produced by the FibTree on that day. Input: - A single integer, `d`. Output: - A single integer, the number of fruits produced on day `d`. Note: You should use an efficient algorithm to handle very large inputs within a reasonable time limit.","solution":"def fib_tree_fruits(d): Returns the number of fruits produced by the FibTree on day `d` following the Fibonacci sequence. Efficiently computes the result using matrix exponentiation to handle large `d`. if d == 1 or d == 2: return 1 def matrix_mult(A, B): return [[A[0][0]*B[0][0] + A[0][1]*B[1][0], A[0][0]*B[0][1] + A[0][1]*B[1][1]], [A[1][0]*B[0][0] + A[1][1]*B[1][0], A[1][0]*B[0][1] + A[1][1]*B[1][1]]] def matrix_pow(M, power): result = [[1, 0], [0, 1]] # Identity matrix base = M while power: if power % 2 == 1: result = matrix_mult(result, base) base = matrix_mult(base, base) power //= 2 return result F = [[1, 1], [1, 0]] result_matrix = matrix_pow(F, d - 1) # The number of fruits on the d-th day is F(n) which is present in F(0,1) index of result matrix return result_matrix[0][0]"},{"question":"Given a string array words, you need to find all the pairs of distinct indices (i, j) in the array such that the concatenation of words[i] and words[j] is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same backward as forward (ignoring spaces, punctuation, and capitalization). # Input - An array of strings words, with no more than 5000 elements. - Each string in the array will have a length between 1 and 300 characters. - Each string consists of lowercase English letters only. # Output - A list of unique pairs of indices (i, j) such that the concatenated string words[i] + words[j] forms a palindrome. # Examples Example 1 Input: ``` words = [\\"bat\\", \\"tab\\", \\"cat\\"] ``` Output: ``` [(0, 1), (1, 0)] ``` Explanation: ``` words[0] + words[1] == \\"battab\\", which is a palindrome. words[1] + words[0] == \\"tabbat\\", which is a palindrome. ``` Example 2 Input: ``` words = [\\"abcd\\", \\"dcba\\", \\"lls\\", \\"s\\", \\"sssll\\"] ``` Output: ``` [(0, 1), (1, 0), (3, 2), (2, 4)] ``` Explanation: ``` words[0] + words[1] == \\"abcddcba\\", which is a palindrome. words[1] + words[0] == \\"dcbaabcd\\", which is a palindrome. words[3] + words[2] == \\"slls\\", which is a palindrome. words[2] + words[4] == \\"llssssll\\", which is a palindrome. ``` # Constraints - The number of pairs should be minimized. - The order of elements in the output does not matter. - Words in words array are distinct.","solution":"def is_palindrome(s): return s == s[::-1] def palindrome_pairs(words): result = [] word_dict = {word: i for i, word in enumerate(words)} for i, word in enumerate(words): for j in range(len(word) + 1): prefix = word[:j] suffix = word[j:] if is_palindrome(prefix): reversed_suffix = suffix[::-1] if reversed_suffix in word_dict and word_dict[reversed_suffix] != i: result.append((word_dict[reversed_suffix], i)) if j != len(word) and is_palindrome(suffix): reversed_prefix = prefix[::-1] if reversed_prefix in word_dict and word_dict[reversed_prefix] != i: result.append((i, word_dict[reversed_prefix])) return list(set(result))"},{"question":"A factory has a large conveyor belt capable of carrying packages from one end to the other. Each package has a unique ID and a fixed weight. The conveyor belt can carry any number of packages as long as the total weight does not exceed a specified limit. The factory needs to determine the maximum number of packages that can be on the conveyor belt at the same time without exceeding the weight limit. You are given the following details: 1. An integer `W` representing the weight limit of the conveyor belt. 2. An integer `N` representing the number of packages. 3. A list of `N` integers, where the i-th integer represents the weight of the i-th package. Your task is to write a function that takes these inputs and returns the maximum number of packages that can be on the conveyor belt simultaneously without exceeding the weight limit `W`. # Input Format - The first line contains an integer `W` (1 le W le 10^9) - the weight limit of the conveyor belt. - The second line contains an integer `N` (1 le N le 100,000) - the number of packages. - The third line contains `N` integers, where the i-th integer represents the weight of the i-th package (1 le text{weight}_i le 10^6). # Output Format - Return an integer representing the maximum number of packages that the conveyor belt can carry without exceeding the weight limit. # Example: Example 1: Input: ``` 50 10 5 10 15 20 25 6 7 8 9 12 ``` Output: ``` 6 ``` Explanation 1: By carefully selecting packages of weights [5, 6, 7, 8, 9, 12], we can fit 6 packages on the conveyor belt without exceeding the weight limit of 50. Example 2: Input: ``` 30 5 10 20 30 40 50 ``` Output: ``` 2 ``` Explanation 2: The maximum number of packages that can be selected without exceeding the weight limit of 30 is 2, with weights [10, 20] being selected. # Constraints - The total number of packages does not exceed 100,000. - Weight of each package does not exceed 1,000,000. - The weight limit of the conveyor belt does not exceed 1,000,000,000.","solution":"def max_packages(W, N, weights): Determines the maximum number of packages that can be on the conveyor belt without exceeding the weight limit W. Parameters: W (int): The weight limit of the conveyor belt. N (int): The number of packages. weights (list of int): A list containing the weights of the N packages. Returns: int: The maximum number of packages that can be on the conveyor belt simultaneously. weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= W: total_weight += weight count += 1 else: break return count"},{"question":"You are given an array of integers and an integer value target, your task is to determine if there exists a pair of elements in the array such that their sum is equal to target. If such a pair exists, return true. Otherwise, return false. The first line contains an integer n (1 leq n leq 10^6) — the number of elements in the array. The second line contains n integers separated by spaces — the elements of the array (each element is within the range -10^9 to 10^9). The third line contains the integer target (-2 times 10^9 leq target leq 2 times 10^9). Print \\"true\\" if there exists a pair of elements in the array that sums up to target, otherwise print \\"false\\". # Example Input: ``` 5 1 2 3 4 5 9 ``` Output: ``` true ``` Input: ``` 4 1 2 5 7 10 ``` Output: ``` false ```","solution":"def has_pair_with_sum(arr, target): Determine if there exists a pair of elements in the array such that their sum is equal to target. Parameters: arr (list[int]): Array of integers. target (int): Target sum. Returns: bool: True if such a pair exists, False otherwise. seen = set() for num in arr: if target - num in seen: return True seen.add(num) return False"},{"question":"You are given an array of n integers. Start with an empty subarray and follow the instructions below: 1. Add the element at index 1 (1-based index) to the subarray. 2. Iteratively, for each subsequent element at index 2, 3, ..., n choose whether to include this element in the current subarray (the subarray is contiguous and selected in order) or start a new subarray from this element. Your goal is to minimize the sum of the maximum elements in each segment of the subarray. The first line contains an integer n (1 le n le 10^5) - the total number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (-10^9 le a_i le 10^9) - the elements of the array. Output a single integer - the minimum possible sum of the maximum elements in each subarray segment. **Example:** **Input:** ``` 5 1 3 2 1 4 ``` **Output:** ``` 4 ``` **Explanation:** Choose subarray segments as [1], [3, 2, 1], [4]. The maximum elements for these segments are 1, 3, and 4 respectively, so the sum is 1 + 3 + 4 = 8, which is incorrect. A better suay segmentation would be [1], [3, 2], [1, 4]. The maximum elements for these segments are 1, 3, and 4 respectively, so the sum is 1 + 3 + 4 = 8, which is better.","solution":"def min_sum_of_max_elements(n, arr): Returns the minimum possible sum of the maximum elements in each subarray segment. if n == 1: return arr[0] min_sum = 0 current_max = arr[0] for i in range(1, n): if arr[i] > current_max: min_sum += current_max current_max = arr[i] else: current_max = max(current_max, arr[i]) min_sum += current_max return min_sum"},{"question":"Finding the Longest Substring with Distinct Characters You are given a string **s** consisting of lowercase English letters. Your task is to find the length of the longest substring that contains only distinct characters. # Input: The first line contains a single integer **n** (1 ≤ n ≤ 100,000) — the length of the string **s**. The second line contains the string **s** of length **n**. # Output: Print a single integer — the length of the longest substring with all distinct characters. # Example: **Input:** ``` 10 abcabcbbca ``` **Output:** ``` 3 ``` # Explanation: In the given example, the longest substring with all distinct characters is either \\"abc\\" or \\"bca\\", each of length 3. Note that even though there are multiple substrings of length 3 with distinct characters, the required output is just the length.","solution":"def longest_substring_with_distinct_chars(n, s): Returns the length of the longest substring with all distinct characters. Parameters: n (int): Length of the string s s (str): The input string consisting of lowercase English letters Returns: int: Length of the longest substring with all distinct characters char_index = {} longest = 0 start = 0 for end in range(n): if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"# Problem Statement: You are given a list of positive integers representing a sequence of building heights arranged in a row, where the width of each building is one unit. You want to paint the buildings such that you end up with the tallest consecutive block of buildings painted. If there are multiple blocks with the same maximum height, you should return the leftmost block. The task is to determine the height of the tallest block and the starting index of this block (0-based index). **Input:** - The first line contains an integer `n` (1 ≤ n ≤ 1,000,000) representing the number of buildings. - The second line contains `n` space-separated integers `h1, h2, ..., hn` (1 ≤ hi ≤ 10^9), where `hi` is the height of the `i`-th building. **Output:** - Print two integers: the height of the tallest block and the starting index of this block. **Examples:** Input: ``` 6 1 3 2 4 2 1 ``` Output: ``` 4 3 ``` Input: ``` 7 1 3 3 3 2 1 3 ``` Output: ``` 3 1 ``` # Explanation: - In the first example, the tallest block has a height of 4 and starts at index 3. - In the second example, there are two blocks with the maximum height of 3, but the leftmost one starts at index 1.","solution":"def find_tallest_block(n, heights): Returns the height of the tallest block and the starting index of this block. max_height = 0 max_index = -1 for i in range(n): if heights[i] > max_height: max_height = heights[i] max_index = i return max_height, max_index"},{"question":"You are given a list of n integers representing the heights of hurdles in a hurdle race. You are also given a number k which represents the maximum height you can jump naturally (without using any enhancements). Your task is to determine the minimum number of doses of a magic potion you need to take in order to be able to jump over all the hurdles. Each dose of the magic potion increases your jump height by 1 unit. The first line of input contains two space-separated integers n (1 ≤ n ≤ 100) and k (1 ≤ k ≤ 100), where n is the number of hurdles and k is your natural jump height. The second line contains n space-separated integers representing the heights of the hurdles. Each hurdle height hi (1 ≤ hi ≤ 100) is the height of the i-th hurdle. Output a single integer which represents the minimum number of doses of the magic potion you need to take to be able to jump over all the hurdles. If no doses are needed, output 0. **Example:** Input: 5 4 1 6 3 5 2 Output: 2 Explanation: You can naturally jump up to a height of 4 units. The highest hurdle is 6 units tall, so you need to take 2 doses of the magic potion to be able to jump over it.","solution":"def min_doses_to_jump_hurdles(n, k, heights): Returns the minimum number of doses needed to jump over all hurdles. :param n: int - Number of hurdles :param k: int - Natural jump height :param heights: List[int] - Heights of hurdles :return: int - Minimum number of doses needed max_height = max(heights) if k >= max_height: return 0 else: return max_height - k"},{"question":"You are given a list of sets of integers. Each set contains different, unique integers and no set is empty. Your task is to merge sets following a specific algorithm: 1. Find two sets, A and B, such that they have the largest intersection (i.e., the maximum number of common elements). If there are multiple such pairs, choose the pair with the smallest indices in the list. 2. Merge sets A and B into a new set C which contains all the unique elements from both sets A and B. 3. Remove sets A and B from the list and add the new set C to the list. 4. Repeat steps 1-3 until only one set remains in the list. Your goal is to find the final set. # Input - The first line contains an integer n (1 le n le 1000) — the number of sets. - Each of the following n lines describes a set. A line starts with an integer k_i (1 le k_i le 1000) — the size of the i-th set, followed by k_i distinct integers. # Output Print a single line containing all elements of the final set in ascending order. # Example Input ``` 3 3 1 2 3 3 2 3 4 3 4 5 6 ``` Output ``` 1 2 3 4 5 6 ``` # Note In the example, the input sets are: - Set 1: {1, 2, 3} - Set 2: {2, 3, 4} - Set 3: {4, 5, 6} Sets 1 and 2 have the largest intersection {2, 3} (with 2 elements). Merge them to get {1, 2, 3, 4}. Remove sets 1 and 2, and add the new set. The new list of sets: - Set 1: {1, 2, 3, 4} - Set 2: {4, 5, 6} Sets 1 and 2 have the intersection {4}. Merge them to get {1, 2, 3, 4, 5, 6}. Remove sets 1 and 2, and add the new set. The final set is {1, 2, 3, 4, 5, 6}.","solution":"def merge_sets(sets): Given a list of sets, merges the sets following a specific algorithm until only one set remains. while len(sets) > 1: max_intersection_size = 0 sets_to_merge = (0, 1) # Find pair with largest intersection for i in range(len(sets)): for j in range(i+1, len(sets)): intersection_size = len(sets[i].intersection(sets[j])) if intersection_size > max_intersection_size: max_intersection_size = intersection_size sets_to_merge = (i, j) i, j = sets_to_merge merged_set = sets[i].union(sets[j]) # Remove and add the merged set to the list sets = [s for idx, s in enumerate(sets) if idx not in sets_to_merge] sets.append(merged_set) return sorted(sets[0]) def convert_input_to_sets(n, data): sets = [] for line in data: parts = list(map(int, line.split())) sets.append(set(parts[1:])) return sets # Function to be called with the input data def find_final_set(n, data): sets = convert_input_to_sets(n, data) return merge_sets(sets)"},{"question":"You are given a sequence of non-negative integers `a_1, a_2, ..., a_n`, where `1 <= n <= 100000` and `0 <= a_i <= 10^9`. You have to split this sequence into exactly two non-empty subsequences such that the absolute difference between the sums of these subsequences is minimized. Write a function: ```python def minimize_subsequence_difference(n:int, a:List[int]) -> int: # your code here ``` **Input:** - n: An integer representing the number of elements in the sequence. - a: A list of n non-negative integers. **Output:** - Return an integer representing the minimum absolute difference between the sums of the two subsequences. **Example:** ```python print(minimize_subsequence_difference(4, [3, 1, 4, 2])) # Output: 0 print(minimize_subsequence_difference(3, [10, 20, 15])) # Output: 5 ``` **Explanation:** In the first case, you can split the sequence `[3, 1, 4, 2]` into `[3, 1]` and `[4, 2]` where the sums are `4` and `6`. The absolute difference is `2`. You can achieve a zero difference by splitting it as `[3, 1, 2]` and `[4]` with sums `6` and `6`. In the second case, the sequence `[10, 20, 15]` can be split into `[10, 20]` and `[15]` where the sums are `30` and `15`. The minimum absolute difference is `5`.","solution":"from typing import List def minimize_subsequence_difference(n: int, a: List[int]) -> int: Split the sequence into exactly two non-empty subsequences such that the absolute difference between the sums of these subsequences is minimized. total_sum = sum(a) half_sum = total_sum // 2 dp = [False] * (half_sum + 1) dp[0] = True for num in a: for j in range(half_sum, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(half_sum, -1, -1): if dp[i]: s1 = i break s2 = total_sum - s1 return abs(s2 - s1)"},{"question":"Alice is playing a game where she needs to manage a farm by planting crops in a 2D grid garden. The garden is represented as an n × m grid, each cell in the grid can either contain a crop or be empty. Alice prefers to maximize the number of crops planted on her farm such that no two crops are adjacent to each other, neither horizontally, vertically, nor diagonally. Your task is to help Alice determine the maximum number of crops she can plant in her garden under these conditions. The first line of input contains two integers n and m (1 ≤ n, m ≤ 10^3). The next n lines each contain m characters, where each character is either \'.\' (representing an empty cell) or \'#\' (representing a cell that is already occupied by an obstacle). Output a single integer — the maximum number of crops Alice can plant in the garden under the given constraints. For example: Input: 3 3 .#. .#. .#. Output: 4 Here, Alice can plant 4 crops at positions (1,1), (1,3), (3,1), and (3,3), ensuring no two crops are adjacent. Note: The grid rows and columns are 1-indexed.","solution":"def max_crops(n, m, garden): def can_plant(x, y): for dx, dy in [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]: if 0 <= x + dx < n and 0 <= y + dy < m and grid[x + dx][y + dy] == \'C\': return False return True grid = [list(row) for row in garden] crops = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\' and can_plant(i, j): grid[i][j] = \'C\' crops += 1 return crops"},{"question":"You are given a grid with dimensions n rows and m columns. Each cell in the grid contains an integer value representing the elevation of that cell. Natasha is keen on calculating the \\"skyline\\" of the grid from two perspectives: 1. The row-wise skyline — the maximum elevation value from each row. 2. The column-wise skyline — the maximum elevation value from each column. Your task is to help Natasha find these skylines. **Input:** - The first line contains two integers n and m (1 le n, m le 100) — the number of rows and columns in the grid respectively. - The following n lines each contain m integers representing the elevations in the grid. Elevations are guaranteed to be non-negative integers not exceeding 1000. **Output:** - The first line should contain m integers representing the column-wise skyline. - The second line should contain n integers representing the row-wise skyline. **Example:** **Input:** ``` 3 4 3 1 4 1 5 9 2 6 5 3 5 8 ``` **Output:** ``` 5 9 5 8 4 9 8 ``` **Explanation:** The row-wise skyline is calculated as follows: - The maximum of the first row [3, 1, 4, 1] is 4. - The maximum of the second row [5, 9, 2, 6] is 9. - The maximum of the third row [5, 3, 5, 8] is 8. The column-wise skyline is calculated as follows: - The maximum of the first column [3, 5, 5] is 5. - The maximum of the second column [1, 9, 3] is 9. - The maximum of the third column [4, 2, 5] is 5. - The maximum of the fourth column [1, 6, 8] is 8. Hence, the output is correct.","solution":"def calculate_skyline(grid): Returns the column-wise and row-wise skyline of the given grid. Parameters: grid (list of list of int): 2D list representing the grid elevations. Returns: tuple: (column_wise_skyline, row_wise_skyline) where both are list of integers. if not grid or not grid[0]: return [], [] n = len(grid) m = len(grid[0]) # Column-wise skyline column_wise_skyline = [max(grid[i][j] for i in range(n)) for j in range(m)] # Row-wise skyline row_wise_skyline = [max(row) for row in grid] return column_wise_skyline, row_wise_skyline"},{"question":"You are given an array of integers and you need to determine whether it is possible to reorder the array such that it forms a sequence of one or more consecutive integers. A sequence of consecutive integers is a sequence where each next integer is exactly one more than the previous one. For example, if the array is [3, 2, 1, 4], it can be reordered to form [1, 2, 3, 4], which is a sequence of consecutive integers. The first line of the input contains an integer n (1 le n le 10^5) — the length of the array. The second line of the input contains n integers separated by spaces – the elements of the array (1 le a_i le 10^9). You should output \\"YES\\" if it is possible to reorder the array to form a sequence of consecutive integers, or \\"NO\\" otherwise. # Input: ``` 4 3 2 1 4 ``` # Output: ``` YES ``` # Explanation: The array [3, 2, 1, 4] can be reordered to form a consecutive sequence: [1, 2, 3, 4]. # Input: ``` 4 1 3 2 5 ``` # Output: ``` NO ``` # Explanation: The array [1, 3, 2, 5] cannot be reordered to form a sequence of consecutive integers, since there is a gap between 3 and 5.","solution":"def can_form_consecutive_sequence(array): Determines whether the array can be reordered to form a sequence of one or more consecutive integers. if not array: return \\"NO\\" min_val = min(array) max_val = max(array) # Check all values between min_val and max_val are in array expected_count = max_val - min_val + 1 actual_count = len(array) if expected_count == actual_count and set(range(min_val, max_val + 1)) == set(array): return \\"YES\\" else: return \\"NO\\""},{"question":"In a competitive programming contest, teams need to solve as many problems as possible within a given amount of time. Each problem has a specific time requirement to solve, and teams are given a limited total amount of time. Your task is to determine the maximum number of problems a team can solve without exceeding the total time available. Assume each problem can only be solved once and the team can solve problems in any order. The input consists of two lines: - First line contains two integers n (1 ≤ n ≤ 100) and T (1 ≤ T ≤ 10^5), where n is the number of problems and T is the total available time in minutes. - Second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 10^4), where ti represents the time required to solve the i-th problem. Print a single integer representing the maximum number of problems that can be solved without exceeding the total available time. Example: Input: 5 120 30 60 20 50 40 Output: 3 Explanation: By selecting problems with time requirements 20, 30, and 40, the team uses 90 minutes out of the available 120 minutes, solving the maximum number of problems (3) possible within the time limit.","solution":"def max_problems(n, T, times): Returns the maximum number of problems that can be solved within the given time limit. :param n: Number of problems :param T: Total available time in minutes :param times: List of times required to solve each problem :return: Maximum number of problems solved times.sort() # Sort the problem times in increasing order total_time = 0 count = 0 for time in times: if total_time + time <= T: total_time += time count += 1 else: break return count"},{"question":"You are given a collection of sentences and a dictionary of words. The goal is to count how many sentences can be formed using the given words. Each word can be used any number of times in a sentence. The sentences and words are provided as follows: - The first line contains an integer n, the number of sentences. - The following n lines each contain a sentence consisting of lowercase English words separated by spaces. - The next line contains an integer m, the number of dictionary words. - The following m lines each contain a single word. Your task is to determine, for each sentence, how many distinct valid sentences can be formed using words from the dictionary. A sentence is considered valid if all words in it can be found in the dictionary. Input: - First line contains an integer n (1 ≤ n ≤ 100), the number of sentences. - The next n lines contain sentences consisting of lowercase English words separated by spaces. Each sentence contains between 1 and 10 words, and each word consists of up to 10 lowercase English letters. - Next line contains an integer m (1 ≤ m ≤ 200), the number of dictionary words. - The next m lines contain the dictionary words. Output: - Output n lines, each containing an integer, the number of distinct valid sentences that can be formed for each given sentence. Example: ``` 3 the quick brown fox jumps over the lazy dog hello world 6 the quick brown fox hello world ``` Output: ``` 4 0 4 ``` Explanation: - For the first sentence \\"the quick brown fox\\", all words are present in the dictionary, so there are 1 valid sentence. - For the second sentence \\"jumps over the lazy dog\\", not all words are present in the dictionary, so there are 0 valid sentences. - For the third sentence \\"hello world\\", all words are present in the dictionary, so there are 1 valid sentence.","solution":"def count_valid_sentences(sentences, dictionary_words): Returns a list of integers where each integer corresponds to the number of valid sentences that can be formed from the given dictionary for each sentence provided. dictionary_set = set(dictionary_words) valid_sentence_counts = [] for sentence in sentences: words = sentence.split() if all(word in dictionary_set for word in words): valid_sentence_counts.append(1) else: valid_sentence_counts.append(0) return valid_sentence_counts"},{"question":"A delivery company has a fleet of delivery vans. There are n depots where the vans are stationed and m routes that the vans can take between depots. The depots are numbered from 1 to n. Each route has a positive integer cost associated with it, representing the fuel consumption for that route. The company wants to find the minimum fuel cost to deliver packages from depot 1 to depot n. Given the following information, write a program to help the company determine the minimum fuel cost required for a van to travel from depot 1 to depot n. If there is no sequence of routes from depot 1 to depot n, the answer should be -1. The first line contains a single integer T — the number of test cases. T test case descriptions follow. The first line of each test case contains two integers n and m (1 leq n leq 1000, 0 leq m leq 10000) — the number of depots and the number of routes, respectively. Each of the next m lines contains three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 10^9) — indicating there is a route from depot u to depot v with a fuel cost of w. For each test case, print an integer representing the minimum fuel cost to travel from depot 1 to depot n. If there is no possible way to travel from depot 1 to depot n, print -1. **Example** **Input** ``` 2 3 3 1 2 4 2 3 2 1 3 8 4 1 1 2 5 ``` **Output** ``` 6 -1 ``` In the first test case, the minimum fuel cost is achieved by taking the route from depot 1 to depot 2 and then from depot 2 to depot 3. In the second test case, there is no way to reach depot 4 from depot 1.","solution":"import heapq def find_minimum_fuel_cost(T, test_cases): def dijkstra(n, graph, start, end): pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 while pq: current_dist, u = heapq.heappop(pq) if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[end] if dist[end] != float(\'inf\') else -1 results = [] for test in test_cases: n, m, edges = test[\\"n\\"], test[\\"m\\"], test[\\"edges\\"] graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) min_cost = dijkstra(n, graph, 1, n) results.append(min_cost) return results # Input processing def process_input(input_text): lines = input_text.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, lines[index].split()) index += 1 edges = [] for _ in range(m): u, v, w = map(int, lines[index].split()) edges.append((u, v, w)) index += 1 test_cases.append({\\"n\\": n, \\"m\\": m, \\"edges\\": edges}) return T, test_cases def process_output(results): return \\"n\\".join(map(str, results)) input_text = 2 3 3 1 2 4 2 3 2 1 3 8 4 1 1 2 5 T, test_cases = process_input(input_text) results = find_minimum_fuel_cost(T, test_cases) print(process_output(results))"},{"question":"A company has m branches located in different cities. Each branch ships out several packages daily. The head office wants to know the day on which the packages were delayed in transit for each branch. A delay is recorded if the packages took one or more additional days than the previous day\'s shipment to reach their destination. For example, if on the first day it took 3 days for the packages to arrive, and on the second day it took 5 days, then a delay is recorded. If it took 5 days again on the third day, no additional delay is recorded. You are to create a program to find out how many delay days each branch had over a given period. The first line of the input contains m, the number of branches (1 ≤ m ≤ 100). For each branch, the next input line contains the number of days p for which package shipping information is available (1 ≤ p ≤ 100). This is followed by the days taken for the packages to be delivered, recorded as p integers in the next line. Your task is to output the number of delay days for each branch. Example: **Input:** ``` 2 3 1 3 3 4 5 6 5 7 ``` **Output:** ``` 1 2 ``` Explanation: In the first branch, the second day\'s shipping delay was longer compared to the first day (1 -> 3). Hence, one delay is counted. For the second branch, the second day had a longer delay compared to the first day (5 -> 6), and the fourth day had a longer delay compared to the third day (5 -> 7). Hence, two delays are counted.","solution":"def count_delay_days(m, branches_data): delay_counts = [] for branch in branches_data: p = branch[0] delivery_times = branch[1] delays = 0 for i in range(1, p): if delivery_times[i] > delivery_times[i-1]: delays += 1 delay_counts.append(delays) return delay_counts def parse_input(input_string): input_lines = input_string.strip().split(\\"n\\") m = int(input_lines[0]) branches_data = [] index = 1 for _ in range(m): p = int(input_lines[index]) delivery_times = list(map(int, input_lines[index + 1].split())) branches_data.append((p, delivery_times)) index += 2 return m, branches_data def main(input_string): m, branches_data = parse_input(input_string) delay_counts = count_delay_days(m, branches_data) return \\"n\\".join(map(str, delay_counts))"},{"question":"Polycarp has an array of integers of length n. He wants to perform the following operation zero or more times to make all elements of the array equal: 1. Choose any integer x and increment it by 1. 2. Choose any integer y and decrement it by 1. Polycarp wants to minimize the number of operations needed to achieve this goal. Note that he is allowed to simultaneously increment one integer by 1 and decrement another integer by 1 in a single operation. Given the array, determine the minimum number of operations required to make all elements equal. # Input: - The first line contains a single integer t (1 le t le 10^4) — the number of test cases. - The first line of each test case contains an integer n (1 le n le 2 times 10^5) — the length of the array. - The second line of each test case contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. The sum of n over all test cases does not exceed 2 times 10^5. # Output: For each test case, print a single integer — the minimum number of operations needed to make all elements of the array equal. # Example: Input: ``` 2 4 1 2 3 4 5 1 1 1 1 1 ``` Output: ``` 3 0 ``` # Explanation: In the first test case, we can make all elements equal in 3 operations by making the following changes: - Increment 1 to 2 - Increment 2 to 3 - Increment 3 to 4 In the second test case, all elements are already equal, so no operations are needed.","solution":"def minimum_operations(t, test_cases): results = [] for n, arr in test_cases: min_val = min(arr) max_val = max(arr) # Number of operations required operations = max_val - min_val results.append(operations) return results"},{"question":"The RexoBlog website allows users to log in using either their username or their email address. However, due to a recent bug in the system, some email addresses have been converted to uppercase and some usernames have inclusions of stray characters like \'!\'. You need to create functions to clean these and verify login credentials correctly. Write a function `normalize_login` that takes a list of login attempts and for each attempt, determines if it is a valid login or not. Each login attempt is represented as a dictionary with the keys: \'type\' (either \'username\' or \'email\'), and \'value\' (the actual username or email provided by the user). The function should return a list of boolean values indicating the validity of each login attempt. - Email addresses are valid if they contain exactly one \'@\' symbol, and the substring before the \'@\' is non-empty and the substring after the \'@\' contains exactly one \'.\'. The email addresses should be case insensitive. - Usernames are valid if they contain only lowercase Latin letters and are between 3 and 20 characters long. Any other characters should render the username invalid. Function signature: ```python def normalize_login(login_attempts: List[Dict[str, str]]) -> List[bool]: ``` # Examples: ```python login_attempts = [ {\'type\': \'email\', \'value\': \'JohnDoe@domain.com\'}, {\'type\': \'username\', \'value\': \'jo!hn\'}, {\'type\': \'email\', \'value\': \'SaraSmith@domain.co.in\'}, {\'type\': \'username\', \'value\': \'user123username\'}, ] normalize_login(login_attempts) > [True, False, False, True] ```","solution":"from typing import List, Dict def normalize_login(login_attempts: List[Dict[str, str]]) -> List[bool]: def is_valid_email(email: str) -> bool: try: local, domain = email.lower().split(\'@\') return len(local) > 0 and domain.count(\'.\') == 1 except ValueError: return False def is_valid_username(username: str) -> bool: return username.islower() and username.isalpha() and 3 <= len(username) <= 20 results = [] for attempt in login_attempts: if attempt[\'type\'] == \'email\': results.append(is_valid_email(attempt[\'value\'])) elif attempt[\'type\'] == \'username\': results.append(is_valid_username(attempt[\'value\'])) return results"},{"question":"Lena created a list of strings where each string consists of lowercase alphabets. She wants to merge all the strings to create a single resultant string. The rules for merging the strings are as follows: 1. Each string can be inserted at the beginning or the end of the resultant string. 2. The goal is to minimize the size of the lexicographically largest character present in the resultant string. For example, if Lena has the strings ({\'abc\', \'def\', \'gh\'}): - If she merges them as \'gh\' + \'abc\' + \'def\', the resultant string is \\"ghabcdef\\", and the lexicographically largest character is \'h\'. - If she merges them as \'abc\' + \'def\' + \'gh\', the resultant string is \\"abcdefgh\\", and the lexicographically largest character is \'h\'. Help Lena find the minimum size of the lexicographically largest character for any possible way of merging all the strings in the list. The first line contains one integer (t) ((1 leq t leq 10^3)) — the number of test cases. Then (t) test cases follow. The first line of each test case contains one integer (n) ((1 leq n leq 50)) — the number of strings in the list. The next (n) lines each contain one string. Each string consists of lowercase English letters and has a length between (1) and (50). For each test case, output on a separate line the minimum size of the lexicographically largest character for any possible way of merging the strings. **Example:** Input: ``` 2 3 abc def gh 2 xyz qr ``` Output: ``` h z ``` (Note: The lexicographical size is based on the position of the character in the alphabet where \'a\' is the smallest and \'z\' is the largest.)","solution":"def merge_strings_min_lexico_largest(t, cases): results = [] for case in cases: n, strings = case combined = \'\'.join(strings) results.append(max(combined)) return results # Example usage: t = 2 cases = [ (3, [\\"abc\\", \\"def\\", \\"gh\\"]), (2, [\\"xyz\\", \\"qr\\"]) ] print(merge_strings_min_lexico_largest(t, cases))"},{"question":"You are given an undirected graph represented by a series of edges. Each edge connects two nodes and has an associated non-negative weight. A subset of the edges is called a spanning tree if it connects all the nodes without forming any cycles and includes all the vertices of the graph. The weight of a spanning tree is the sum of the weights of the edges included in the spanning tree. A minimum spanning tree is a spanning tree with the least possible weight among all spanning trees of the graph. Write a program to find the weight of the minimum spanning tree for the given graph. Input: - The first line of the input contains two integers `n` and `m` (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), where `n` is the number of nodes, and `m` is the number of edges. - The next `m` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 0 ≤ w ≤ 1000), where `u` and `v` are the nodes connected by an edge, and `w` is the weight of the edge. Output: - Print a single integer denoting the weight of the minimum spanning tree. If no spanning tree exists, print \\"-1\\" (without quotes). Example: Input: ``` 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 5 ``` Output: ``` 7 ``` In the given example, the graph has 4 nodes and 5 edges. The minimum spanning tree includes edges (1-2), (2-3), and (3-4) with weights 1, 2, and 3 respectively. The total weight is 1 + 2 + 3 = 6. Another possible minimum spanning tree could include edges (1-2), (1-4), and (3-4) with weights 1, 4, and 2 respectively, totaling 7. The output is 7 since it is the minimum weight that connects all nodes in the graph without forming a cycle.","solution":"def find_minimum_spanning_tree_weight(n, edges): # Helper function to find the subset of an element def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) # Helper function to perform the union of two subsets def union(parent, rank, x, y): rootx = find_parent(parent, x) rooty = find_parent(parent, y) if rank[rootx] < rank[rooty]: parent[rootx] = rooty elif rank[rootx] > rank[rooty]: parent[rooty] = rootx else: parent[rooty] = rootx rank[rootx] += 1 # Convert the edge list into a list of tuples (weight, u, v) edges = [(w, u - 1, v - 1) for u, v, w in edges] # Sort all the edges in non-decreasing order of their weight edges.sort() parent = list(range(n)) rank = [0] * n result = [] index = 0 # Index used to iterate through sorted edges e = 0 # Number of edges in MST while e < n - 1: if index >= len(edges): return -1 w, u, v = edges[index] index += 1 x = find_parent(parent, u) y = find_parent(parent, v) if x != y: result.append((u, v, w)) union(parent, rank, x, y) e += 1 minimum_cost = sum([w for u, v, w in result]) return minimum_cost"},{"question":"Tina is participating in a cooking contest where she has to prepare dishes using various ingredients. Each ingredient is represented by a positive integer that denotes its freshness level. The freshness level of an ingredient determines how beneficial it is to the dish. The higher the freshness level, the more beneficial the ingredient. Tina can select a subset of ingredients from the given list, but she needs to ensure that the total difference in freshness levels between any two chosen ingredients doesn\'t exceed a given threshold. This ensures that all chosen ingredients are harmoniously fresh. The goal is to help Tina determine the maximum total freshness level she can achieve under these constraints. Formally, you are given an array of integers f_1, f_2, ldots, f_n where f_i is the freshness level of the i-th ingredient. You are also given a positive integer t, the freshness threshold limit. You need to determine the maximum sum of freshness levels of ingredients that Tina can select such that for any two chosen ingredients i and j, the difference in their freshness levels |f_i - f_j| does not exceed t. # Input format: The first line contains two integers n and t (1 le n le 100 000, 1 le t le 200 000), where n is the number of ingredients and t is the freshness threshold. The second line contains n integers f_1, f_2, ldots, f_n (1 le f_i le 200 000), the freshness levels of the ingredients. # Output format: Output a single integer that is the maximum total freshness level Tina can achieve under the given constraints. # Example: Input: ``` 5 3 1 3 6 7 8 ``` Output: ``` 17 ``` Explanation: Tina can select ingredients with freshness levels 6, 7, and 8 (since the difference between any two of these freshness levels is at most 3), yielding a total freshness level of 6 + 7 + 8 = 21. Another valid option is to select ingredients with freshness levels 1, 3, 6 yielding a total freshness level of 1 + 3 + 6 = 10, but it is lesser than selecting 6, 7, 8. Thus, the maximum total freshness level Tina can achieve is 21.","solution":"def max_freshness(n, t, freshness_levels): Returns the maximum sum of freshness levels of ingredients that Tina can select such that for any two chosen ingredients i and j, the difference in their freshness levels |f_i - f_j| does not exceed t. Parameters: n (int): Number of ingredients t (int): Freshness threshold limit freshness_levels (list of int): Freshness levels of the ingredients Returns: int: Maximum total freshness level achievable under the given constraints freshness_levels.sort() max_sum = 0 current_sum = 0 start = 0 for end in range(n): current_sum += freshness_levels[end] while freshness_levels[end] - freshness_levels[start] > t: current_sum -= freshness_levels[start] start += 1 max_sum = max(max_sum, current_sum) return max_sum"},{"question":"After a sudden rise in technological advancements, the citizens of Techland want to establish a new communication network by connecting various nodes spread across their country. The nodes are positioned at various (x, y) coordinates on a 2D plane, and they can only connect directly if their connection distance does not exceed a certain threshold value. To establish this network efficiently, the citizens want to ensure that the maximum distance between directly connected nodes is minimized to enhance the reliability of the communications. The problem is to determine the minimum maximum distance required to connect all nodes directly or indirectly. In simpler words, given the positions of nodes and a maximum connection range, find the minimum possible maximum connection range needed to ensure all nodes are part of a single connected component. The first line of input contains an integer n (2 ≤ n ≤ 100,000) — the number of nodes. Each of the following n lines contains two integers xi and yi (|xi|, |yi| ≤ 10,000) — the coordinates of the nodes. Print a single real number—the minimum possible maximum distance required to connect all nodes. Your answer will be considered correct if its absolute or relative error does not exceed 10^-6. Example Input: ``` 4 0 0 3 4 6 8 10 10 ``` Example Output: ``` 5.000000 ``` Explanation: In this example, the optimal layout of connections would have (0, 0) connected to (3, 4) directly with distance √((3-0)² + (4-0)²) = 5. The other nodes (6, 8) and (10, 10) can be connected indirectly through (3, 4) ensuring that the maximum distance is minimized and all nodes are connected.","solution":"import math def find_parent(parent, i): if parent[i] == i: return i else: parent[i] = find_parent(parent, parent[i]) return parent[i] def union(parent, rank, x, y): root_x = find_parent(parent, x) root_y = find_parent(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def compute_distance(x1, y1, x2, y2): return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def minimum_spanning_tree_kruskal(n, coordinates): edges = [] for i in range(n): for j in range(i + 1, n): dist = compute_distance(coordinates[i][0], coordinates[i][1], coordinates[j][0], coordinates[j][1]) edges.append((dist, i, j)) edges.sort() parent = [i for i in range(n)] rank = [0] * n mst_weight = 0 max_weight_edge_in_mst = 0 for edge in edges: dist, u, v = edge if find_parent(parent, u) != find_parent(parent, v): union(parent, rank, u, v) mst_weight += dist max_weight_edge_in_mst = max(max_weight_edge_in_mst, dist) return max_weight_edge_in_mst def min_max_distance_to_connect_all_nodes(coords): n = len(coords) return minimum_spanning_tree_kruskal(n, coords)"},{"question":"You are given a sequence of numbers represented as a string, where each number is separated by a comma. Write a program that calculates the mean (average) of these numbers. Your program should read a single string as input and output the mean to two decimal places. For example, given the input: \\"10,20,30,40,50\\" The output should be: 30.00 Note: - The input string will contain at least one number. - Ensure proper handling of both negative and positive numbers. - Assume all inputs are appropriately formatted.","solution":"def calculate_mean(numbers_str): Calculate the mean (average) of numbers in a given comma-separated string. Returns the mean rounded to two decimal places as a float. :param numbers_str: A string of numbers separated by commas (e.g., \\"10,20,30\\") :return: The mean of the numbers rounded to two decimal places. numbers = list(map(float, numbers_str.split(\',\'))) mean = sum(numbers) / len(numbers) return round(mean, 2)"},{"question":"You are provided with a grid of dimensions n times m where each cell contains an integer representing the height of a terrain. You need to design a program that finds the longest path of increasing heights in the grid such that the difference in height between any two consecutive cells is within a given range [minDiff, maxDiff]. You can only move up, down, left, or right. More formally, for any two consecutive cells in the path (i1, j1) and (i2, j2), the following conditions should hold: 1. |height[i2][j2] - height[i1][j1]| ≥ minDiff 2. |height[i2][j2] - height[i1][j1]| ≤ maxDiff Note that you are allowed to start from any cell and you need to output the length of the longest such path that can be achieved anywhere in the grid. The first line of the input contains three integers n, m, and q (1 leq n, m leq 1000, 1 leq q leq 10^6) — the dimensions of the grid and the number of queries respectively. The next n lines each contain m integers representing the heights of the terrains. For each of the next q lines, you will be given two integers, minDiff and maxDiff (0 leq minDiff leq maxDiff leq 1000), representing the minimum and maximum allowable differences in height for two consecutive cells in a path. Output q integers, the ith of which corresponds to the length of the longest path for the ith query. **Example:** Input: ``` 3 3 2 1 2 3 6 5 4 7 8 9 0 1 1 3 ``` Output: ``` 9 5 ``` Explanation: - For the first query, we can form the path 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 with allowable height differences between 0 and 1. - For the second query, we can form the path 1 -> 2 -> 3 -> 4 -> 5 with allowable height differences between 1 and 3. Each query results in the length of the longest valid path found.","solution":"def longest_increasing_path(grid, minDiff, maxDiff): Finds the longest path of increasing heights based on given minDiff and maxDiff. from collections import deque n = len(grid) m = len(grid[0]) # Delta arrays for 4 directions (up, down, left, right) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(x, y): return 0 <= x < n and 0 <= y < m def bfs(start_x, start_y): Run BFS to find longest path from the given starting cell. queue = deque([(start_x, start_y)]) visited = {(start_x, start_y): 1} max_length = 1 while queue: x, y = queue.popleft() current_length = visited[(x, y)] for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny): if minDiff <= abs(grid[nx][ny] - grid[x][y]) <= maxDiff: if (nx, ny) not in visited: queue.append((nx, ny)) visited[(nx, ny)] = current_length + 1 max_length = max(max_length, current_length + 1) return max_length overall_max_path = 0 for i in range(n): for j in range(m): overall_max_path = max(overall_max_path, bfs(i, j)) return overall_max_path def process_grid_queries(grid, queries): Process multiple queries on the grid and run `longest_increasing_path` for each. results = [] for minDiff, maxDiff in queries: results.append(longest_increasing_path(grid, minDiff, maxDiff)) return results # Input parsing import sys input = sys.stdin.read def main(): data = input().split() idx = 0 n = int(data[idx]) idx += 1 m = int(data[idx]) idx += 1 q = int(data[idx]) idx += 1 grid = [] for _ in range(n): row = list(map(int, data[idx:idx + m])) grid.append(row) idx += m queries = [] for _ in range(q): minDiff = int(data[idx]) idx += 1 maxDiff = int(data[idx]) idx += 1 queries.append((minDiff, maxDiff)) results = process_grid_queries(grid, queries) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given two integers n and x, and a list of n integers. Your task is to determine if there are two distinct numbers in the list such that their sum is equal to x. The first line of input contains two integers n (2 ≤ n ≤ 100) and x (1 ≤ x ≤ 200). The second line contains n integers, each integer a_i (1 ≤ a_i ≤ 100). Output \\"YES\\" if there are two distinct numbers in the list that sum up to x, otherwise output \\"NO\\".","solution":"def find_pair_with_sum(n, x, arr): seen = set() for num in arr: if x - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"Alice is organizing her plant collection and has placed her potted plants in a straight line. There are n plants in total, and each plant is assigned a unique integer identifier from 1 to n. Alice wants to make sure that her plants receive enough sunlight. Each plant has a specific sunlight requirement described by an integer array b, where b_i is the amount of sunlight needed by the i-th plant. The sunlight spreads from left to right and is defined by an integer array c, where c_i represents the spread value of the i-th plant. The spread value indicates how far to the right the sunlight from the plant i extends, impacting other plants up to the spread value. The total sunlight received by any plant is the maximum value of the sunlight spreads affecting that plant, which is determined by the maximum value among all plants on its left including itself. You need to calculate the amount of sunlight each plant will receive. Output an array d of length n where d_i represents the amount of sunlight received by the i-th plant. **Input:** - The first line contains an integer n (1 le n le 100,000), the number of plants. - The second line contains n integers b_1, b_2, ldots, b_n (1 le b_i le 100,000), the sunlight requirements of the plants. - The third line contains n integers c_1, c_2, ldots, c_n (0 le c_i le n-1), the spread values of the plants. **Output:** - A single line containing n integers d_1, d_2, ... , d_n where d_i is the amount of sunlight received by the i-th plant. **Example:** **Input:** ``` 5 10 20 30 40 50 1 0 2 3 0 ``` **Output:** ``` 10 10 20 30 30 ``` **Explanation:** - Plant 1 has a sunlight requirement of 10 and a spread of 1. It affects itself and the next plant. - Plant 2 remains unaffected apart from its own presence. - Plant 3 has a sunlight requirement of 30 and a spread of 2, affecting plant 4 and plant 5. - Plant 4 has the highest sunlight spread covering up to itself plus 3 more plants but since the maximum spread encountered before plant 4 is from plant 3 that affects itself, plant 4 will receive sunlight requirement of plant 3 which is 30. - Plant 5 remains unaffected by plant 3 due to no other spread range except itself.","solution":"def calculate_sunlight(n, b, c): Returns the amount of sunlight each plant will receive. Args: n : int - Number of plants b : List[int] - Sunlight requirements of plants c : List[int] - Spread values of plants Returns: List[int] - Sunlight received by each plant d = [0] * n max_sunlight = 0 for i in range(n): # Calculate the max sunlight for current position max_sunlight = max(max_sunlight, b[i]) d[i] = max_sunlight # Spread the sunlight value to the right up to the spread value spread_limit = i + c[i] if spread_limit < n: d[spread_limit] = max(d[spread_limit], b[i]) if i < n - 1: d[i + 1] = max(d[i + 1], d[i]) return d"},{"question":"In a small town, there are n houses aligned in a straight line, and each house has a mailbox. The delivery person visits the town to deliver letters, but unfortunately, some letters go missing. Suppose there are m reports indicating which letters are missing, each report specifies that all letters addressed between house u and house v (inclusive) are missing. Your task is to determine how many houses received at least one letter. The first line contains two space-separated integers n and m (1 ≤ n ≤ 10^6, 0 ≤ m ≤ 10^5), representing the number of houses and the number of reports of missing letters respectively. The next m lines each contain two space-separated integers u and v (1 ≤ u ≤ v ≤ n), indicating that all letters addressed to houses from u to v are missing. If no reports are given (i.e., m = 0), all houses are assumed to have received their letters. Output a single integer representing the number of houses that received at least one letter. **Example:** Input: ``` 5 2 1 2 4 5 ``` Output: ``` 1 ``` Explanation: In the given example, letters addressed to houses 1, 2, 4, and 5 are reported missing. Only house 3 received at least one letter.","solution":"def count_houses_with_letters(n, m, reports): Determines the number of houses that received at least one letter. :param n: Number of houses. :param m: Number of reports. :param reports: List of tuples containing the start and end house (u, v) of missing letters report. :return: Number of houses that received at least one letter. received_letters = [1] * n for u, v in reports: for i in range(u - 1, v): received_letters[i] = 0 return sum(received_letters) # Example usage: # n = 5 # m = 2 # reports = [(1, 2), (4, 5)] # print(count_houses_with_letters(n, m, reports)) # Output: 1"},{"question":"You are given a string consisting of lowercase English letters. You need to transform the string so that no two adjacent characters are the same using the minimum number of moves. In one move, you can change any character in the string to any other lowercase English letter (from \'a\' to \'z\'). Write a function that returns the minimum number of moves required to achieve this transformation. # Input - A single string `s` (1 ≤ length of s ≤ 100,000) consisting of lowercase English letters. # Output - An integer representing the minimum number of moves required to make no two adjacent characters in the string the same. # Example 1. Input: ``` aab ``` Output: ``` 1 ``` Explanation: Change the second \'a\' to any other letter (e.g., \'b\'), resulting in \\"abb\\" or \\"acb\\". 2. Input: ``` aaabc ``` Output: ``` 2 ``` Explanation: Change the second \'a\' and third \'a\' to different letters, e.g., \\"ababc\\" or \\"abbbc\\". # Note Ensure that the changes are minimal and only adjacent characters are considered for change. The function should be efficient to handle the maximum constraint.","solution":"def min_moves_to_avoid_adjacent_duplicates(s): Returns the minimum number of moves required to make no two adjacent characters in the string the same. n = len(s) if n <= 1: return 0 moves = 0 for i in range(1, n): if s[i] == s[i-1]: moves += 1 return moves"},{"question":"You are given an undirected graph with n nodes and m edges. Each node has a value, and each edge connects two different nodes with a certain weight. Your task is to find the smallest possible sum of the values of two nodes such that there is a path between them whose edges have a combined weight no greater than a given value k. The first line of input contains three integers n, m, and k (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 2 * 10^5, 1 ≤ k ≤ 10^9) — the number of nodes, the number of edges, and the maximum combined weight of edges allowed. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the values assigned to each node. Each of the next m lines contains three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — representing an edge between nodes u and v with weight w. Print a single integer — the smallest possible sum of the values of two nodes that can be connected with a path whose total edge weight does not exceed k. If no such pair of nodes exists, print -1. Example: ```plaintext 5 6 10 3 2 1 5 4 1 2 2 2 3 3 3 4 4 4 5 5 1 5 12 1 3 1 ``` Output: ```plaintext 3 ```","solution":"import heapq def smallest_sum_in_graph(n, m, k, node_values, edges): from collections import defaultdict import heapq graph = defaultdict(list) for u, v, w in edges: graph[u-1].append((v-1, w)) graph[v-1].append((u-1, w)) def dijkstra(start): distances = [float(\'inf\')] * n distances[start] = 0 pq = [(0, start)] # (distance, node) while pq: cur_dist, u = heapq.heappop(pq) if cur_dist > distances[u]: continue for v, weight in graph[u]: distance = cur_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances reachable = [] for i in range(n): distances = dijkstra(i) for j in range(n): if i != j and distances[j] <= k: reachable.append(node_values[i] + node_values[j]) return min(reachable, default=-1) # Example usage n = 5 m = 6 k = 10 node_values = [3, 2, 1, 5, 4] edges = [ (1, 2, 2), (2, 3, 3), (3, 4, 4), (4, 5, 5), (1, 5, 12), (1, 3, 1) ] print(smallest_sum_in_graph(n, m, k, node_values, edges)) # Output: 3"},{"question":"You are given an array of integers where each integer represents the height of a building in a skyline. Your task is to find the largest rectangular area that can be formed in the skyline. The skyline is represented as a histogram where the width of each bar is 1. For example, given the heights [2, 1, 5, 6, 2, 3], the largest rectangular area is 10 (formed by the bars of heights 5 and 6). Write a function `largestRectangleArea` that takes an array of integers `heights` and returns an integer representing the largest rectangular area that can be formed. # Function Signature ```python def largestRectangleArea(heights: List[int]) -> int: ``` # Input - `heights` (List[int]): A list of integers representing the heights of the buildings in the skyline. Each integer is between 0 and 104, inclusive. The length of `heights` is between 1 and 105, inclusive. # Output - An integer representing the largest rectangular area that can be formed in the skyline. # Example ```python heights = [2, 1, 5, 6, 2, 3] print(largestRectangleArea(heights)) # Output: 10 ``` # Note In this example, the largest rectangular area can be found by taking the heights 5 and 6, forming a rectangle of width 2 and height 5, giving an area of 10.","solution":"from typing import List def largestRectangleArea(heights: List[int]) -> int: Returns the largest rectangle area in a histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[index] >= heights[stack[-1]]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"A small startup company is developing a new ride-sharing platform. The company wants to design a system that can efficiently manage the rides for their drivers and passengers. One of the core features they aim to implement is an algorithm that finds the nearest driver to a passenger requesting a ride. Implement a function `find_nearest_driver(passenger_location, drivers)` that accepts two arguments: 1. `passenger_location`: A tuple (x, y) representing the coordinates of the passenger. 2. `drivers`: A list of tuples [(x1, y1), (x2, y2), ..., (xn, yn)] representing the coordinates of the drivers. The function should return the index of the nearest driver to the passenger based on the Euclidean distance. If there are multiple drivers at the same distance, return the index of the first one in the list. # Input - `passenger_location`: A tuple (x, y) with integer coordinates (-1000 ≤ x, y ≤ 1000). - `drivers`: A list of tuples, each containing two integer coordinates (-1000 ≤ xi, yi ≤ 1000). # Output - An integer representing the index of the nearest driver. # Example ```python # Example 1 passenger_location = (3, 4) drivers = [(1, 2), (5, 6), (7, 8)] print(find_nearest_driver(passenger_location, drivers)) # Output: 0 # Example 2 passenger_location = (0, 0) drivers = [(5, 5), (1, 1), (2, 2)] print(find_nearest_driver(passenger_location, drivers)) # Output: 1 ``` # Constraints: - The list `drivers` will contain at least one driver and at most 1000 drivers. - The coordinates will be within the specified range. # Notes: - The Euclidean distance between two points ((x1, y1)) and ((x2, y2)) is calculated as (sqrt{(x2-x1)^2 + (y2-y1)^2}). - For simplicity, you do not need to include the square root in the distance calculation since you are only comparing distances. # Function Signature: ```python def find_nearest_driver(passenger_location: (int, int), drivers: [(int, int)]) -> int: pass ```","solution":"def find_nearest_driver(passenger_location, drivers): Finds the nearest driver to the passenger based on Euclidean distance. Parameters: passenger_location (tuple): Coordinates of the passenger (x, y). drivers (list of tuples): List of coordinates of drivers [(x1, y1), (x2, y2), ...]. Returns: int: Index of the nearest driver. min_distance = float(\'inf\') nearest_driver_index = -1 px, py = passenger_location for index, (dx, dy) in enumerate(drivers): distance = (dx - px) ** 2 + (dy - py) ** 2 if distance < min_distance: min_distance = distance nearest_driver_index = index return nearest_driver_index"},{"question":"You are given a list of unique integers and a target sum. Your task is to find all unique combinations in the list where the integers sum up to the target. Each integer in the list can be used multiple times in the combination. The result should not contain duplicate combinations and the combinations should be presented in non-descending order. Write a function that takes the following inputs: - A list of integers `nums` (1 ≤ len(nums) ≤ 30, 1 ≤ nums[i] ≤ 100) - An integer `target` (1 ≤ target ≤ 500) The function should return a list of lists containing all unique combinations that sum up to the target. The combinations in the result should be sorted in lexicographical order. # Example Input ``` nums = [2, 3, 6, 7] target = 7 ``` Output ``` [[2, 2, 3], [7]] ``` Input ``` nums = [2, 3, 5] target = 8 ``` Output ``` [[2, 2, 2, 2], [2, 3, 3], [3, 5]] ``` # Constraints Ensure the combinations do not contain duplicate sets and are sorted in lexicographical order before being returned.","solution":"def combination_sum(nums, target): nums.sort() result = [] def backtrack(remaining, combination, start): if remaining == 0: result.append(list(combination)) return for i in range(start, len(nums)): if nums[i] > remaining: break # since nums are sorted, no need to continue if the current number exceeds the remaining sum combination.append(nums[i]) backtrack(remaining - nums[i], combination, i) combination.pop() backtrack(target, [], 0) return result"},{"question":"You are given a list of space-separated integers representing the grades of students in a class. Determine if the class can be split into two groups such that the average grade of the first group is higher than the average grade of the second group. If such a split is possible, output 1, otherwise output 0. The only line of the input contains a list of integers grades (1 ≤ grade ≤ 100) – the grades of the students. The number of students is between 2 and 20, inclusive. Note that the number of students is not given explicitly. Output 1 if there exists at least one possible way to split the class into two groups with the desired property, and 0 otherwise.","solution":"from itertools import combinations def can_split_grades(grades): Determines if the class can be split into two groups such that the average grade of the first group is higher than the average grade of the second group. :param grades: List of positive integers representing the grades. :return: 1 if there exists a possible way to split the class, else 0 n = len(grades) for i in range(1, n): for comb in combinations(grades, i): group1 = list(comb) group2 = [grade for grade in grades if grade not in group1] if len(group2) == 0: continue avg1 = sum(group1) / len(group1) avg2 = sum(group2) / len(group2) if avg1 > avg2: return 1 return 0"},{"question":"Alice is participating in a school coding competition where each participant must solve several problems within a limited time. One such problem involves working with a sequence of integers. The task is to find the length of the longest subsequence that is strictly increasing. Alice needs some help figuring this out, and she knows you are great at programming. You are given an array of n integers. Your task is to find the length of the longest subsequence such that all elements of the subsequence are strictly increasing. A subsequence is derived from the array by deleting some or no elements without changing the order of the remaining elements. # Input The first line contains an integer n (1 ≤ n ≤ 10^4) – the number of elements in the sequence. The next line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) – the elements of the sequence. # Output Print the length of the longest strictly increasing subsequence. # Example Input 6 10 20 10 30 20 50 Output 4 Explanation The longest increasing subsequences are [10, 20, 30, 50]. Help Alice solve the problem by writing a function that computes the length of the longest strictly increasing subsequence of the given sequence.","solution":"def longest_increasing_subsequence(arr): Finds the length of the longest strictly increasing subsequence in the array. Parameters: arr (list of int): The array of integers. Returns: int: The length of the longest strictly increasing subsequence. if not arr: return 0 n = len(arr) # dp[i] will be the length of the longest increasing subsequence that ends with arr[i] dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"In a country called XYZland, there are several cities connected by a network of roads. Each road connects exactly two cities and has a certain length. A tourist wants to travel from one city to another and needs to find the shortest path between them. You are given a list of cities and the lengths of the roads connecting them. Your task is to determine the shortest distance between any two cities. The first line contains two integers n and m (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000) — the number of cities and the number of roads respectively. Each of the next m lines describes a road with three integers ui, vi, li (1 ≤ ui, vi ≤ n, ui ≠ vi, 1 ≤ li ≤ 1000) — the cities connected by this road and its length. The next line contains two integers s and d (1 ≤ s, d ≤ n, s ≠ d) — the starting city and the destination city. Print a single integer — the shortest distance from the starting city to the destination city. If there is no path between them, print -1. Example Input: 5 6 1 2 10 1 3 20 2 3 5 3 4 10 2 4 1 4 5 3 1 5 Example Output: 14","solution":"import heapq def shortest_path(n, m, roads, start, destination): Determines the shortest distance between two cities using Dijkstra\'s algorithm. # Create an adjacency list for the graph graph = [[] for _ in range(n + 1)] for u, v, l in roads: graph[u].append((v, l)) graph[v].append((u, l)) # Priority queue to store the next city to process pq = [(0, start)] # (distance, city) distances = [float(\'inf\')] * (n + 1) distances[start] = 0 while pq: current_dist, u = heapq.heappop(pq) if current_dist > distances[u]: continue for v, length in graph[u]: distance = current_dist + length if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances[destination] if distances[destination] != float(\'inf\') else -1"},{"question":"You are given a grid of size n x m consisting of lowercase English letters. Your task is to determine the minimum number of operations required to make each row of the grid a palindrome. An operation consists of picking any cell of the grid and changing the letter in that cell to any other lowercase English letter. A string is called a palindrome if it reads the same backward as forward. For example, \\"abba\\" and \\"racecar\\" are palindromes. The first line contains two space-separated integers: n (1 ≤ n ≤ 100) — the number of rows in the grid and m (1 ≤ m ≤ 100) — the number of columns in the grid. Then n lines follow, each of them contains m lowercase English letters: the j-th character of the i-th line describes the content of the cell in the i-th row and in the j-th column of the grid. Output a single integer: the minimum number of operations needed to make each row of the grid a palindrome. In the first sample, you can achieve the goal with 1 operation by changing \'c\' to \'e\' in the second string. In the second sample, all rows are already palindromes, so no operation is needed. # Sample Input 1: 3 5 abcba abcdc abcde # Sample Output 1: 4 # Sample Input 2: 2 3 aba cddc # Sample Output 2: 0","solution":"def min_operations_to_palindrome(n, m, grid): Returns the minimum number of operations required to make each row of the grid a palindrome. def min_changes_to_palindrome(row): changes = 0 l, r = 0, len(row) - 1 while l < r: if row[l] != row[r]: changes += 1 l += 1 r -= 1 return changes total_changes = 0 for row in grid: total_changes += min_changes_to_palindrome(row) return total_changes # Example usage: n = 3 m = 5 grid = [ \\"abcba\\", \\"abcdc\\", \\"abcde\\" ] print(min_operations_to_palindrome(n, m, grid)) # Output should be 4"},{"question":"You are given an array of n integers where the absolute values of the integers are distinct. Your task is to reorder the array so that no element remains in its original position. The first line contains a single integer n (1 le n le 10^5). The second line contains n integers a_1, a_2, dots, a_n (-10^6 le a_i le 10^6) where the absolute values of the integers are distinct. If it is impossible to reorder the array to satisfy the conditions, print \\"NO\\". Otherwise, print \\"YES\\" in the first line, and the reordered array in the second line. If there are multiple solutions, print any of them.","solution":"def reorder_array(n, arr): Reorders the input array so that no element remains in its original position. If it is impossible, returns \\"NO\\". Otherwise, returns \\"YES\\" and the reordered array. if n == 1: return \\"NO\\" # It\'s impossible to rearrange a single-element array index_arr = list(range(n)) # List of indices [0, 1, 2, ..., n-1] index_arr.sort(key=lambda i: arr[i]) # Sort indices based on their values in arr result = [-1] * n for i in range(n): # Find where we can put current element arr[i] so that it\'s not in its original position if index_arr[i] != i: result[i] = arr[index_arr[i]] else: # Swap with next element if indices match result[i] = arr[index_arr[(i + 1) % n]] result[(i + 1) % n] = arr[index_arr[i]] return \\"YES\\", result"},{"question":"Alice is working on implementing a new messaging system in her company. The system stores messages in a queue, and each message has a unique priority number. She wants to ensure that messages with higher priority numbers should always be processed before messages with lower priority numbers. Additionally, if two messages have the same priority, they should be processed in the order they were added to the queue. To achieve this, she decided to use a priority queue to manage the messages efficiently. Your task is to implement a data structure that supports the following operations: 1. `enqueue(priority, message)` - Add a message with the given priority to the queue. 2. `dequeue()` - Remove and return the message with the highest priority. If two messages have the same priority, remove and return the one that was added first. If the queue is empty, return `None`. Write a class `PriorityQueue` with these methods. You can assume that priorities are positive integers and message contents are strings. You must also handle any edge cases, such as trying to dequeue from an empty queue. # Examples ```python pq = PriorityQueue() pq.enqueue(1, \\"Message 1\\") pq.enqueue(2, \\"Message 2\\") pq.enqueue(1, \\"Message 3\\") pq.enqueue(3, \\"Message 4\\") print(pq.dequeue()) # Output: \\"Message 4\\" print(pq.dequeue()) # Output: \\"Message 2\\" print(pq.dequeue()) # Output: \\"Message 1\\" print(pq.dequeue()) # Output: \\"Message 3\\" print(pq.dequeue()) # Output: None ``` # Constraints - Each `enqueue` operation should run in O(log n) time. - Each `dequeue` operation should run in O(log n) time. - `n` is the number of messages in the queue, and you may assume `n` does not exceed `10^6`. Implement the `PriorityQueue` class below: ```python import heapq class PriorityQueue: def __init__(self): self.heap = [] self.counter = 0 def enqueue(self, priority, message): # Use a tuple (-priority, counter, message) for the priority queue heapq.heappush(self.heap, (-priority, self.counter, message)) self.counter += 1 def dequeue(self): if not self.heap: return None return heapq.heappop(self.heap)[2] ``` Make sure your code passes the given example and handles edge cases gracefully.","solution":"import heapq class PriorityQueue: def __init__(self): self.heap = [] self.counter = 0 def enqueue(self, priority, message): Add a message with the given priority to the queue. heapq.heappush(self.heap, (-priority, self.counter, message)) self.counter += 1 def dequeue(self): Remove and return the message with the highest priority. If two messages have the same priority, remove and return the one that was added first. If the queue is empty, return None. if not self.heap: return None return heapq.heappop(self.heap)[2]"},{"question":"In an amusement park, there is a thrilling roller coaster with `n` carriages, where each carriage is connected to the next one in a linear sequence. Each carriage either has an odd number of passengers or an even number of passengers. You are responsible for determining whether it\'s possible to rearrange the carriages in such a way that the total number of passengers in the first `k` carriages is odd, for a given integer `k` (1 ≤ `k` ≤ `n`). Write a function to determine if it is possible to achieve this configuration. The function should return \\"POSSIBLE\\" if such an arrangement exists, otherwise return \\"IMPOSSIBLE\\". The first line contains two integers `n` and `k` (1 ≤ `n` ≤ 10^5, 1 ≤ `k` ≤ n). The second line contains `n` integers, where the `i-th` integer is the number of passengers in the `i-th` carriage. # Example Input: ``` 5 3 1 2 3 4 5 ``` Output: ``` POSSIBLE ``` Input: ``` 4 2 2 4 6 8 ``` Output: ``` IMPOSSIBLE ``` # Note: - In the first example, an arrangement like [3, 1, 5] for the first 3 carriages leads to a total number of passengers = 3 + 1 + 5 = 9, which is odd. - In the second example, it is not possible to choose any 2 carriages to get an odd total number of passengers since all given carriages have an even number of passengers.","solution":"def is_possible_to_rearrange(n, k, passengers): Determines if it is possible to rearrange the carriages in such a way that the total number of passengers in the first k carriages is odd. :param n: Total number of carriages. :param k: Number of carriages to consider. :param passengers: List of number of passengers in each carriage. :return: \\"POSSIBLE\\" if such an arrangement exists, otherwise \\"IMPOSSIBLE\\" odd_count = sum(1 for p in passengers if p % 2 != 0) even_count = n - odd_count if k % 2 == 1 and odd_count >= 1: return \\"POSSIBLE\\" elif (k % 2 == 0 and odd_count > 0 and even_count > 0) or (k % 2 == 1 and odd_count >= k): return \\"POSSIBLE\\" return \\"IMPOSSIBLE\\""},{"question":"You are given an array of integers and a series of operations to perform on this array. Each operation consists of selecting two distinct indices, i and j, and swapping the elements at these indices. The goal is to sort the array in non-decreasing order using the minimum number of such operations. You should write a program that finds the minimum number of swaps needed to sort the array. # Input: - The first line contains an integer n (1 le n le 10^5): the number of elements in the array. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9). # Output: - Print a single integer: the minimum number of swaps needed to sort the array. # Example: Input: ``` 5 4 3 1 2 5 ``` Output: ``` 3 ``` # Explanation: To sort the array `[4, 3, 1, 2, 5]`, one possible sequence of swaps is: 1. Swap indices `1` and `3`: `[1, 3, 4, 2, 5]` 2. Swap indices `2` and `4`: `[1, 2, 4, 3, 5]` 3. Swap indices `3` and `4`: `[1, 2, 3, 4, 5]` Thus, the minimum number of swaps needed is `3`.","solution":"def min_swaps_to_sort(arr): Returns the minimum number of swaps needed to sort the array in non-decreasing order. :param arr: List[int] : The input array :return: int : The minimum number of swaps n = len(arr) # Create a pair of each element and its index arr_pos = [*enumerate(arr)] # Sort the array by array values arr_pos.sort(key=lambda it: it[1]) # To keep track of visited elements visited = {k: False for k in range(n)} # Initialize result answer = 0 # Traverse array elements for i in range(n): # If element is already visited or in the correct place if visited[i] or arr_pos[i][0] == i: continue # Find the number of nodes in this cycle cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][0] cycle_size += 1 # Update the answer by adding the current cycle (cycle size - 1) if cycle_size > 0: answer += (cycle_size - 1) return answer"},{"question":"You are given an array of positive integers and a positive integer `k`. Your task is to determine if the array can be divided into pairs such that the sum of each pair is divisible by `k`. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Each element in the array must be used exactly once. The first line of input contains an integer `t` (1 le t le 10) — the number of test cases. Each test case consists of two lines. The first line of each test case contains two integers `n` and `k` (1 le n le 10^5, 1 le k le 10^9) — the size of the array and the integer `k`. The second line contains `n` positive integers (`1 le array[i] le 10^9`) representing the elements of the array. For each test case, print \\"YES\\" if the array can be divided into pairs with the required property, otherwise, print \\"NO\\". Example: ``` Input: 2 4 5 5 10 15 20 6 7 6 5 3 9 1 8 Output: YES NO ```","solution":"def can_be_divided_into_pairs(arr, k): Determines if the array can be divided into pairs such that the sum of each pair is divisible by k. n = len(arr) if n % 2 != 0: return \\"NO\\" remainder_count = [0] * k for num in arr: remainder_count[num % k] += 1 if remainder_count[0] % 2 != 0: return \\"NO\\" for i in range(1, (k // 2) + 1): if remainder_count[i] != remainder_count[k - i]: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for n, k, arr in test_cases: results.append(can_be_divided_into_pairs(arr, k)) return results"},{"question":"Tom is competing in a multi-stage game. Each stage is an independent challenge where players earn points based on their performance. There are n stages in the game, and in each stage, all participants receive a score between 1 and 100 inclusive. Tom knows his score in each stage but doesn\'t know the scores of the other participants. However, he wants to estimate his overall ranking in the competition. The ranking system works as follows: For each stage i, there is a ranking r_i for Tom based on his score in that stage alone. The overall score for Tom is the sum of his scores across all stages, and the overall rank is determined by comparing the total scores of all participants (the participant with the highest total score gets rank 1, the second highest gets rank 2, and so on). Given the number of stages n and Tom\'s scores in each stage, determine the maximum and minimum possible overall rank Tom can achieve. Assume that there are no ties in overall scores among participants. The input consists of: - The integer t (1 le t le 100) - the number of test cases. - For each test case: - An integer n (1 le n le 10^5) - the number of stages. - A list of n integers where each integer s_i (1 le s_i le 100) represents Tom\'s score in the i-th stage. Output: For each test case, output two integers: the minimum and maximum possible overall rank Tom can achieve. Example: Input: 2 3 100 90 80 4 90 80 70 60 Output: 1 1 1 1 Explanation: In the first case, Tom\'s total score is 270. Since the scores are bounded between 1 and 100, Tom will always achieve the first rank with such high scores. In the second case, Tom\'s total score is 300. Similar to the first case, Tom\'s total score guarantees him the first rank regardless of other participants\' scores.","solution":"def max_min_ranks(t, test_cases): Determines the minimum and maximum possible overall rank Tom can achieve. Parameters: t (int): Number of test cases. test_cases (list of tuples): Each tuple contains: - n (int): Number of stages. - scores (list of int): Tom\'s score for each stage. Returns: list of tuples: Each tuple contains (min_rank, max_rank) for each test case. results = [] for n, scores in test_cases: total_score = sum(scores) # In the best case, Tom would get the highest total score, so minimum rank is 1 min_rank = 1 # In the worst case, Tom would get the lowest total score if all stages were full of participants # who all scored 100 except for Tom. Thus, Tom gets the maximum rank max_rank = n results.append((min_rank, max_rank)) return results"},{"question":"You are organizing a relay race and each runner will run a certain distance. Each runner\'s speed is constant, but different runners may have different speeds. You need to determine the total time required for completing the relay race. The relay race has a certain number of segments, where the i-th segment requires the i-th runner to cover exactly di meters at a constant speed of si meters per second. Given n, the number of segments, along with two lists of integers, one representing the distances di and the other representing the speeds si, your task is to calculate the total time required to complete the entire relay race. The first line of the input contains the number of segments n (1 ≤ n ≤ 100,000). The second line contains n integers di (1 ≤ di ≤ 1,000) representing the distances for each segment. The third line contains n integers si (1 ≤ si ≤ 1,000) representing the speeds for each segment. Output a single floating-point number rounded to six decimal places, representing the total time required to complete the relay race. For example, for n=3, distances di=[100, 200, 300], and speeds si=[10, 20, 30]: - The first segment takes 100/10 = 10.000000 seconds, - The second segment takes 200/20 = 10.000000 seconds, - The third segment takes 300/30 = 10.000000 seconds. The total time required is 10.000000 + 10.000000 + 10.000000 = 30.000000 seconds. In sample 1, the time required for each segment is 10 seconds, 7.5 seconds, and 21.666667 seconds respectively, summing up to a total of 39.166667 seconds. In sample 2, the time required for each segment is 2 seconds, 2.666667 seconds, and 3.2 seconds respectively, summing up to a total of 7.866667 seconds. # Example Input 3 100 150 130 10 20 6 Output 39.166667","solution":"def total_relay_time(n, distances, speeds): Calculate the total time required to complete the relay race. Parameters: n (int): Number of segments. distances (list): List of distances for each segment. speeds (list): List of speeds for each segment. Returns: float: Total time required to complete the relay race, rounded to six decimal places. total_time = 0.0 for d, s in zip(distances, speeds): total_time += d / s return round(total_time, 6)"},{"question":"Alex has a connected undirected graph consisting of n vertices and m edges. He wants to find out the number of distinct cycles in the graph. A cycle is defined as a path that starts and ends at the same vertex, with no other repeated vertices. Since the graph may contain a large number of cycles, Alex asks for the number of distinct cycles modulo 1000000007. # Input - The first line contains two integers n and m (1 le n le 1000, 0 le m le 3000) — the number of vertices and the number of edges in the graph, respectively. - Each of the next m lines contains two integers u and v (1 le u, v le n, u neq v) denoting an edge between vertex u and vertex v. # Output - Print one integer — the number of distinct cycles in the graph modulo 1000000007. # Example Input ``` 4 4 1 2 2 3 3 4 4 1 ``` Output ``` 1 ``` # Note In the example above, the graph is a single cycle consisting of vertices 1-2-3-4-1. Therefore, the number of distinct cycles is 1. # Constraints - The edges of the graph are undirected. - It is guaranteed that the graph is connected.","solution":"def count_cycles_in_graph(n, m, edges): MOD = 1000000007 parent = [-1] * n def find(x): if parent[x] < 0: return x parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: if parent[rootX] < parent[rootY]: rootX, rootY = rootY, rootX parent[rootY] += parent[rootX] parent[rootX] = rootY cycle_count = 0 for u, v in edges: rootU = find(u - 1) rootV = find(v - 1) if rootU == rootV: cycle_count += 1 else: union(u - 1, v - 1) return cycle_count % MOD # Input example in prompt: n = 4 m = 4 edges = [ (1, 2), (2, 3), (3, 4), (4, 1) ] # This function call should print 1 based on the example given print(count_cycles_in_graph(n, m, edges))"},{"question":"On a certain website, users can react to content such as articles and videos by liking them. The website administrators want to analyze user engagement by determining the most liked category of content. They have a record of several users\' reactions where each reaction logs the user ID, content ID, and category. Your task is to determine which category of content receives the most likes. The input consists of: - The first line contains an integer n (1 ≤ n ≤ 1000) representing the number of reactions. - The following n lines each contain a string userID (1 ≤ |userID| ≤ 100), a string contentID (1 ≤ |contentID| ≤ 100), and a string category (1 ≤ |category| ≤ 100). The output should be a single string representing the category with the highest number of likes. If there are multiple categories with the highest number of likes, print the one that comes first alphabetically. Example: Input: ``` 6 user1 content1 sports user2 content1 sports user3 content2 news user4 content3 entertainment user5 content3 sports user6 content4 news ``` Output: ``` sports ``` In the example, \\"sports\\" has 3 likes, \\"news\\" has 2 likes, and \\"entertainment\\" has 1 like. Therefore, \\"sports\\" is the category with the highest number of likes.","solution":"def most_liked_category(n, reactions): from collections import defaultdict category_likes = defaultdict(int) for reaction in reactions: userID, contentID, category = reaction.split() category_likes[category] += 1 sorted_categories = sorted(category_likes.items(), key=lambda x: (-x[1], x[0])) return sorted_categories[0][0]"},{"question":"In the kingdom of Zed, there are n cities connected by a network of m bidirectional roads. The cities are numbered from 1 to n, and each road connects two different cities. The king of Zed wants to know if it\'s possible to travel from any city to any other city by traversing the roads. In other words, he wants to determine if the network of roads forms a single connected component. Given the number of cities, the list of roads, and an additional k number of queries where each query removes a specific road temporarily, the king wants to determine if, after the removal of each road (one at a time), the remaining network is still connected. Write a function `check_redundancy(n: int, roads: List[Tuple[int, int]], queries: List[Tuple[int, int]]) -> List[str]` where: - `n` is an integer representing the number of cities. - `roads` is a list of tuples, where each tuple `(u, v)` represents a road connecting cities `u` and `v`. - `queries` is a list of tuples, where each tuple `(p, q)` represents a road to be temporarily removed for the query. The function should return a list of strings with \'YES\' or \'NO\' for each query. \'YES\' means that removing the road specified in the query does not disconnect the network, and \'NO\' means that it does. # Input - The first line contains two integers `n` and `m` `(2 ≤ n ≤ 10^3, 1 ≤ m ≤ 10^4)`. - The next `m` lines each contain two integers `u` and `v` `(1 ≤ u, v ≤ n)` indicating a road between cities `u` and `v`. - The next line contains an integer `k` `(1 ≤ k ≤ m)`. - The next `k` lines each contain two integers `p` and `q` `(1 ≤ p, q ≤ n)` representing a road to be temporarily removed. # Output - The function should return a list of `k` strings, each being \'YES\' or \'NO\' for the respective query, indicating whether the remaining roads make the network disconnected or not. # Example ```python n = 4 roads = [(1, 2), (2, 3), (3, 4), (4, 1)] queries = [(3, 4), (1, 2)] check_redundancy(n, roads, queries) ``` Output: `[\'YES\', \'YES\']` Explanation: - Even if the road `(3, 4)` or `(1, 2)` is removed, there still exists a path between any two cities, so the answers are \'YES\' for both queries.","solution":"from typing import List, Tuple def check_redundancy(n: int, roads: List[Tuple[int, int]], queries: List[Tuple[int, int]]) -> List[str]: def dfs(v, visited, adj): visited[v] = True for u in adj[v]: if not visited[u]: dfs(u, visited, adj) results = [] for p, q in queries: adj = [[] for _ in range(n + 1)] for u, v in roads: if (u == p and v == q) or (u == q and v == p): continue adj[u].append(v) adj[v].append(u) visited = [False] * (n + 1) dfs(1, visited, adj) if all(visited[1:]): results.append(\'YES\') else: results.append(\'NO\') return results"},{"question":"Given a list of integers that represent the amount of rain in cubic meters collected in a series of tanks, find the minimum number of rows needed to store the water such that no two adjacent tanks in any row have the same amount of water. A row can be thought of as a contiguous subarray, and you can move tanks across rows as needed. # Input The input consists of a single line containing an integer n (1 leq n leq 10^5) - the number of tanks, followed by n integers separated by spaces, representing the amount of rain in each tank. # Output Output a single integer - the minimum number of necessary rows to store the given configurations of water. # Example Input ``` 5 2 2 3 3 4 ``` Output ``` 3 ``` Explanation One possible way to store the water is: - Row 1: 2 3 4 - Row 2: 2 - Row 3: 3 Another possible way is: - Row 1: 2 3 4 - Row 2: 2 3","solution":"def min_rows_to_store_water(tanks): Returns the minimum number of rows needed to store the tanks such that no two adjacent tanks in any row have the same amount of water. from collections import Counter # Count the frequency of each tank value tank_counts = Counter(tanks) # The minimum number of rows needed will be the maximum frequency of any single tank value return max(tank_counts.values())"},{"question":"Given an array of integers, you need to find a maximum sum increasing subsequence. An increasing subsequence is a sequence where the elements are in sorted order, from lowest to highest, and are not necessarily contiguous in the original array. The task is to find the sum of the maximum sum increasing subsequence in the array. # Input The first line contains an integer n (1 le n le 1000), the number of elements in the array. The second line contains n integers separated by spaces, which represent the elements of the array. # Output Print a single integer, which is the sum of the maximum sum increasing subsequence in the array. # Example Input ``` 6 1 101 2 3 100 4 ``` Output ``` 106 ``` # Explanation The maximum sum increasing subsequence is 1, 2, 3, 100.","solution":"def max_sum_increasing_subsequence(arr): Returns the sum of the maximum sum increasing subsequence in the array. n = len(arr) dp = arr.copy() # Initialize the dp array with the given array elements # Build the dp array for i in range(n): for j in range(i): if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]: dp[i] = dp[j] + arr[i] return max(dp) # Example input n = 6 arr = [1, 101, 2, 3, 100, 4] print(max_sum_increasing_subsequence(arr)) # Output should be 106"},{"question":"You have a sequence of non-negative integers. Your task is to split this sequence into the minimum number of non-decreasing subsequences. Each element of the sequence must belong to exactly one subsequence. The first line contains a single integer, n (1 ≤ n ≤ 1000) - the number of elements in the sequence. The second line contains n space-separated non-negative integers - a1, a2, ..., an (0 ≤ ai ≤ 1000). Output a single integer - the minimum number of non-decreasing subsequences required to cover the original sequence. For example: Input: 5 4 2 3 6 5 Output: 2 Explanation: One possible way to split the sequence is [4, 6] and [2, 3, 5].","solution":"def min_non_decreasing_subsequences(n, sequence): if n == 0: return 0 subsequences = [] for number in sequence: placed = False for subsequence in subsequences: if subsequence[-1] <= number: subsequence.append(number) placed = True break if not placed: subsequences.append([number]) return len(subsequences)"},{"question":"You are given a sequence of n integers. Find the maximum sum of a contiguous subsequence with length exactly k. The first line contains two integers n and k (1 le k le n le 10^5), denoting the number of elements in the sequence and the length of the subsequence, respectively. The second line contains n integers separated by spaces, representing the elements of the sequence (-10^4 le text{element} le 10^4). Output a single integer — the maximum sum of a contiguous subsequence with length exactly k. For example: ``` Input: 10 3 2 1 -2 3 4 -1 2 5 6 -3 Output: 13 ``` In this example, the contiguous subsequence with length exactly 3 that gives the maximum sum is [5, 6, -3], resulting in the sum 13.","solution":"def max_subarray_sum_k(arr, n, k): Find the maximum sum of a contiguous subsequence with length exactly k. :param arr: List[int] - the list of integers :param n: int - the length of the list :param k: int - the length of the subsequence :return: int - the maximum sum of the subsequence with length exactly k # Initialize the sum of the first subsequence of length k window_sum = sum(arr[:k]) max_sum = window_sum # Sliding window technique for i in range(k, n): window_sum += arr[i] - arr[i - k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"You are given integers n, k, and a list of integers a of length n. Additionally, you have two operations: 1. Adding k to every element of the list a. 2. Replacing every element of the list a with the product of itself and another integer from a fixed set b (which contains m integers and which will be provided to you). Your goal is to make all elements of the list identical using the minimum number of operations. If it\'s not possible, return -1. Write a program that outputs the minimum number of operations required to make all elements of the list identical, or -1 if it\'s not possible. # Input - The first line contains three space-separated integers n, k, and m — where 1 leq n, m leq 1000 and 1 leq k leq 10^9. - The second line contains n space-separated integers representing the list a (1 leq a[i] leq 10^9 for each valid i). - The third line contains m space-separated integers representing the list b (1 leq b[j] leq 10^4 for each valid j). # Output - Print a single integer representing the minimum number of operations required to make all elements of the list identical, or -1 if it\'s not possible. # Example Input: ``` 4 3 3 1 2 6 12 3 4 2 ``` Output: ``` 3 ``` Explanation: 1. Add 3 to all elements: [4, 5, 9, 15] 2. Multiply by 4 (which belongs to list b): [16, 20, 36, 60] 3. Add 3 to all elements: [19, 23, 39, 63] 4. Multiply by 2 (which belongs to list b): [38, 46, 78, 126] 5. Add 3 to all elements: [41, 49, 81, 129] 6. Multiply by 2 (which belongs to list b): [82, 98, 162, 258] It is evident that after the third operation, all numbers can\'t be made identical, hence the return is -1.","solution":"def min_operations_to_identical(n, k, m, a, b): from itertools import product def compute_possible_targets(a, b, k): current_set = set(a) next_set = set() for attempt in range(1000): # limiting to prevent infinite loop or excessive calculations # First operation: add k to every element next_set.update(x + k for x in current_set) # Second operation: replace every element with the product of itself and b[j] for x in current_set: for multiplier in b: next_set.add(x * multiplier) if len(next_set) > 10000: # Arbitrary limit to prevent excessive memory and processing break # If one element matches the condition of all identical if len(next_set) == 1: return next_set current_set = next_set next_set = set() return current_set # Initial unique elements set unique_elements = set(a) if len(unique_elements) == 1: return 0 # Already identical possible_targets = compute_possible_targets(unique_elements, b, k) if len(possible_targets) == 1: return len(possible_targets) return -1 # Example usage: n = 4 k = 3 m = 3 a = [1, 2, 6, 12] b = [3, 4, 2] print(min_operations_to_identical(n, k, m, a, b)) # Example from the task, expects -1"},{"question":"Write a function that takes an integer `n` (2 ≤ n ≤ 1000) and an array of n integers as input, where each integer is between 1 and 100 (inclusive). The array represents the allowed speed limits on n consecutive road segments. You are tasked with finding the longest contiguous segment of the road where the speed limit is consistent (i.e., the same speed limit in each segment). The function should return two integers: the starting index and the length of the longest contiguous segment with a consistent speed limit. If there are multiple such segments with the same maximum length, return the starting index of the leftmost one. # Input: - An integer n (2 ≤ n ≤ 1000). - An array of n integers representing speed limits. # Output: - Two integers: the index of the start of the longest contiguous segment with the same speed limit, and the length of that segment. # Example: Input: ``` 7 50 50 60 60 60 50 50 ``` Output: ``` 2 3 ``` Note that in the example, the longest contiguous segment with the same speed limit starts at index 2 (0-based) and has a length of 3.","solution":"def longest_consistent_speed_segment(n, speed_limits): Finds the starting index and length of the longest contiguous segment with a consistent speed limit. Parameters: - n: int, number of road segments (2 ≤ n ≤ 1000) - speed_limits: List[int], speed limits on each segment (1 ≤ speed_limits[i] ≤ 100) Returns: - tuple(int, int), starting index and length of the longest contiguous segment max_length = 0 max_start_index = 0 current_start_index = 0 current_length = 1 for i in range(1, n): if speed_limits[i] == speed_limits[i-1]: current_length += 1 else: if current_length > max_length: max_length = current_length max_start_index = current_start_index current_start_index = i current_length = 1 # Check last segment if current_length > max_length: max_length = current_length max_start_index = current_start_index return max_start_index, max_length"},{"question":"A game company has developed a simple game involving a grid of size nxn. Each cell on the grid can either contain a \'1\' (indicating a barrier) or a \'0\' (indicating a free path). The goal of the game is to navigate from the top-left corner of the grid (0,0) to the bottom-right corner (n-1,n-1) by moving only right or down at each step. Write a function to determine if there is a path from the top-left corner to the bottom-right corner of the grid avoiding the barriers. The function should return \\"YES\\" if there is such a path and \\"NO\\" otherwise. The first line contains an integer n (2 ≤ n ≤ 100) — the size of the grid. Each of the next n lines describes one row of the grid. Each line contains n characters, where each character is either \'0\' or \'1\'. Return a single line with \\"YES\\" if there is a path avoiding the barriers, otherwise return \\"NO\\". # Constraints - You can only move right or down at each step. - The grid has at least one possible path from top-left to bottom-right if there are no barriers. # Example Input: ``` 4 0100 0000 0110 0000 ``` Output: ``` YES ``` Input: ``` 3 010 010 011 ``` Output: ``` NO ```","solution":"def is_path_possible(grid): Determines if there is a path from the top-left corner to the bottom-right corner of the grid avoiding barriers (1\'s). The function returns \'YES\' if there is a path and \'NO\' otherwise. :param grid: List of strings where each string is a row of the grid. :return: \'YES\' if there is a path, \'NO\' otherwise. n = len(grid) if grid[0][0] == \'1\' or grid[n-1][n-1] == \'1\': return \'NO\' # Initialize DP table dp = [[False] * n for _ in range(n)] dp[0][0] = True # Fill the DP table for i in range(n): for j in range(n): if grid[i][j] == \'1\': dp[i][j] = False else: if i > 0: dp[i][j] = dp[i][j] or dp[i-1][j] if j > 0: dp[i][j] = dp[i][j] or dp[i][j-1] return \'YES\' if dp[n-1][n-1] else \'NO\' def is_path_possible_from_input(n, lines): grid = lines.strip().split() return is_path_possible(grid)"},{"question":"In a parallel universe, numbers are written in a peculiar binary format. The binary representation of any integer is written in reverse. For example, 13 in this universe would be written as 1011 because its regular binary representation (1101) is reversed. Your task is to sort a list of integers from this universe in ascending order based on their reversed binary representations and print the sorted list. You are given a single line containing space-separated positive integers. You need to sort these integers based on their reversed binary representations. # Input A single line containing space-separated positive integers, where each integer is no greater than 1000. The total number of integers is no more than 100. # Output Print the sorted list of integers based on their reversed binary representations. # Example Input ``` 5 7 3 ``` Output ``` 3 5 7 ``` Explanation The binary representations of the numbers are: - 5: 101 -> reversed: 101 (5) - 7: 111 -> reversed: 111 (7) - 3: 11 -> reversed: 11 (3) After sorting based on the reversed binary representations, the order is: 3, 5, 7.","solution":"def sort_by_reversed_binary(arr): def reversed_binary_value(num): # Get binary representation, strip the \'0b\' prefix, reverse it and convert back to integer binary_reversed = bin(num)[:1:-1] return int(binary_reversed, 2) return sorted(arr, key=reversed_binary_value) # Example of usage: # input_list = list(map(int, \\"5 7 3\\".split())) # sorted_list = sort_by_reversed_binary(input_list) # print(sorted_list) # Output: [3, 5, 7]"},{"question":"Tina likes arranging flowers in her garden. She has n flowerbeds arranged in a straight line, and every flowerbed has a type associated with it, represented by an integer from 1 to 100. Tina also has m seeds, and each seed can grow a flower of a specific type. You should process the following types of queries: 1. Update a flowerbed with a new type of flower. 2. Count the number of flowerbeds of a certain type in a specific segment of the garden. The first line contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of flowerbeds and the number of queries. The second line contains n integers ai (1 ≤ ai ≤ 100) — the type of flower in the i-th flowerbed. Each of the next m lines contains the description of the queries. Each description starts with the integer tk (1 ≤ tk ≤ 2): For queries of the first type (tk = 1), the next two integers are pi (1 ≤ pi ≤ n) and ti (1 ≤ ti ≤ 100) — the position of the flowerbed to update with the new flower type ti. For queries of the second type (tk = 2), the next three integers are li (1 ≤ li ≤ n), ri (li ≤ ri ≤ n), and fi (1 ≤ fi ≤ 100) — the segment of the garden from li to ri (inclusive) and the type of flower fi you need to count in that segment. For each query of the second type, print the integer count — the number of flowerbeds of the given type in the specified segment. Output each answer on a new line, in the order of the queries appearing in the input.","solution":"def process_queries(n, m, flowerbeds, queries): Processes the given queries on the flowerbeds. Parameters: n (int): Number of flowerbeds. m (int): Number of queries. flowerbeds (list of int): List containing the type of flowers in each flowerbed. queries (list of list of int): List of queries to process. Returns: list of int: Results of the second type of queries. results = [] for query in queries: if query[0] == 1: # Update query position = query[1] - 1 # Convert to zero-based index type_of_flower = query[2] flowerbeds[position] = type_of_flower elif query[0] == 2: # Count query left = query[1] - 1 # Convert to zero-based index right = query[2] - 1 # Convert to zero-based index flower_type = query[3] count = sum(1 for i in range(left, right + 1) if flowerbeds[i] == flower_type) results.append(count) return results"},{"question":"You are given a list of integers, and your task is to identify the largest subset of integers such that no two integers in the subset have a common prime factor. In other words, any pair of numbers in the subset should be coprime. The input consists of two lines: The first line contains an integer n (1 ≤ n ≤ 1000), the number of integers in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000), representing the list of integers. Output a single integer, the size of the largest subset in which all pairs of integers are coprime. For instance, consider the following example: Input: 6 30 1 3 15 7 11 Output: 4 In this example, the numbers {1, 3, 7, 11} in the largest subset are pairwise coprime. Write a program to solve this problem.","solution":"def gcd(a, b): while b: a, b = b, a % b return a def has_common_prime_factor(a, b): return gcd(a, b) != 1 def largest_coprime_subset_size(n, nums): subsets = [] # Store all subsets that are pairwise coprime for num in nums: appended = False for subset in subsets: if all(gcd(num, x) == 1 for x in subset): subset.append(num) appended = True break if not appended: subsets.append([num]) # Return the size of the largest subset found return max(len(subset) for subset in subsets)"},{"question":"You are given a sequence of n integers. Your task is to answer m queries, where each query asks for the greatest common divisor (GCD) of a subarray of the original sequence. The GCD of a subset of numbers is the largest positive integer that divides each of the numbers. For example, the GCD of the sequence [12, 15, 21] is 3. The input begins with an integer n (1 ≤ n ≤ 100000) — the length of the sequence, followed by n integers (1 ≤ a_i ≤ 10^9) — the sequence elements. The next line contains an integer m (1 ≤ m ≤ 200000) — the number of queries. Then, m lines follow, each containing two integers l and r (1 ≤ l ≤ r ≤ n) which denote the inclusive endpoints of the subarray for the respective query. Output m integers, each representing the GCD of the corresponding subarray. # Input ``` n a_1 a_2 ... a_n m l_1 r_1 l_2 r_2 ... l_m r_m ``` # Output ``` gcd_1 gcd_2 ... gcd_m ``` # Example Input: ``` 6 12 15 21 24 18 30 3 1 3 2 5 1 6 ``` Output: ``` 3 3 3 ```","solution":"import math from functools import reduce def gcd(a, b): Returns the greatest common divisor of a and b. while b: a, b = b, a % b return a def get_subarray_gcd(arr, l, r): Returns the gcd of the subarray from index l to r (inclusive) subarray = arr[l-1:r] return reduce(gcd, subarray) def solve_gcd_queries(n, array, queries): Solves the gcd queries on the array. Args: - n: length of the array - array: the sequence of integers - queries: list of queries where each query is a tuple (l, r) Returns: - a list of results for each query results = [] for l, r in queries: result = get_subarray_gcd(array, l, r) results.append(result) return results"},{"question":"You are given two lists of integers `list1` and `list2`, both of equal length, and a target integer `x`. Your task is to determine if there exist indices `i` and `j` such that: - `0 ≤ i < len(list1)` - `0 ≤ j < len(list2)` - `list1[i] + list2[j] == x` If such indices exist, print `True`. Otherwise, print `False`. The first line contains an integer `n` (1 ≤ n ≤ 10^5), the length of the lists. The second line contains `n` integers, representing `list1`. The third line contains `n` integers, representing `list2`. The fourth line contains the target integer `x` (−10^9 ≤ x ≤ 10^9). # Sample Input ``` 4 1 2 3 4 2 3 4 5 7 ``` # Sample Output ``` True ``` # Explanation In the given sample input, the sum of elements `3` from `list1` and `4` from `list2` is equal to the target integer `7`. Therefore, the output is `True`.","solution":"def target_sum_exists(n, list1, list2, x): Determines if there exist indices i and j such that: - 0 ≤ i < len(list1) - 0 ≤ j < len(list2) - list1[i] + list2[j] == x Parameters: n (int): Length of the lists list1 (list of int): First list of integers list2 (list of int): Second list of integers x (int): Target integer Returns: bool: True if such indices exist, False otherwise set1 = set(list1) for num in list2: if x - num in set1: return True return False"},{"question":"A food delivery service has a list of restaurants, each offering a unique type of cuisine. Customers can rate the restaurants they visit on a scale of 1 to 5. The company keeps a log of all customer ratings and wants to analyze the data to find the top-rated restaurant for each type of cuisine. Your task is to implement a program that reads the log of customer ratings and outputs the highest-rated restaurant for each cuisine type, along with its average rating. If there is a tie (i.e., two or more restaurants have the same highest average rating for a cuisine type), any one of those restaurants can be selected. The input consists of: 1. An integer `n` (1 ≤ n ≤ 1000), the number of customer ratings. 2. `n` lines, each containing a string `restaurant_name` (length ≤ 20), a string `cuisine_type` (length ≤ 15), and an integer `rating` (1 ≤ rating ≤ 5) separated by spaces. The output should contain one line for each cuisine type in the format: `cuisine_type restaurant_name average_rating` where `average_rating` is displayed with exactly two decimal places. Here is a sample input and output for clarification: Sample Input: ``` 5 PastaHouse Italian 4 SushiWorld Japanese 5 PastaHouse Italian 5 CurryKing Indian 4 NoodleBar Chinese 3 ``` Sample Output: ``` Italian PastaHouse 4.50 Japanese SushiWorld 5.00 Indian CurryKing 4.00 Chinese NoodleBar 3.00 ```","solution":"def find_top_rated_restaurants(n, ratings): from collections import defaultdict import statistics cuisine_ratings = defaultdict(list) for entry in ratings: restaurant_name, cuisine_type, rating = entry.split() rating = int(rating) cuisine_ratings[cuisine_type].append((restaurant_name, rating)) top_rated_per_cuisine = {} for cuisine_type, ratings_list in cuisine_ratings.items(): restaurant_avg = defaultdict(list) for restaurant, rating in ratings_list: restaurant_avg[restaurant].append(rating) top_restaurant = max(restaurant_avg, key=lambda r: statistics.mean(restaurant_avg[r])) top_avg_rating = statistics.mean(restaurant_avg[top_restaurant]) top_rated_per_cuisine[cuisine_type] = (top_restaurant, top_avg_rating) result = [] for cuisine_type, (restaurant, avg_rating) in sorted(top_rated_per_cuisine.items()): result.append(f\\"{cuisine_type} {restaurant} {avg_rating:.2f}\\") return result"},{"question":"In a coding competition, participants solve problems and earn points. At the end of the competition, the participant with the most points is declared the winner. Given a list of participants and the points they earned after solving each problem, your task is to determine the winner. The input consists of multiple lines: - The first line contains an integer n (2 ≤ n ≤ 100) – the number of participants. - The second line contains an integer p (1 ≤ p ≤ 100) – the number of problems solved in the competition. - The following n lines contain p integers each, representing the points each participant earned for each problem. Your task is to identify the participant with the highest total points. If there is a tie (multiple participants with the same highest points), the participant who appears first in the input order is considered the winner. The output should be the index of the winning participant (1-based index). Example: Input: ``` 4 3 10 20 30 15 15 15 20 10 40 5 5 5 ``` Output: ``` 3 ``` In this example, the participants have scored the following total points: - Participant 1: 10 + 20 + 30 = 60 - Participant 2: 15 + 15 + 15 = 45 - Participant 3: 20 + 10 + 40 = 70 - Participant 4: 5 + 5 + 5 = 15 Participant 3 has the highest total points, so the output is 3. Note: In case of a tie, the participant who appears first is the winner.","solution":"def find_winner(n, p, scores): max_points = 0 winner_index = 0 for i in range(n): total_points = sum(scores[i]) if total_points > max_points: max_points = total_points winner_index = i + 1 return winner_index"},{"question":"You are given a list of `n` elements. Your task is to process `q` queries. In each query, you are given two integers `l` and `r` (1-based index) and you need to calculate the sum of the elements from index `l` to index `r` (both inclusive). The first line of the input contains an integer `n` (1 ≤ n ≤ 100), the number of elements in the list. The second line of the input contains `n` space-separated integers, representing the elements of the list. The next line contains an integer `q` (1 ≤ q ≤ 100), the number of queries. Then follow `q` lines, each containing two space-separated integers `l` and `r` (1 ≤ l ≤ r ≤ n). For each query, print the sum of the elements from index `l` to index `r` (both inclusive) on a new line. Example: Input: ``` 5 3 2 -1 6 5 3 1 3 2 4 1 5 ``` Output: ``` 4 7 15 ``` Explanation: - For the first query, the sum of elements from index 1 to 3 is `3 + 2 + (-1) = 4`. - For the second query, the sum of elements from index 2 to 4 is `2 + (-1) + 6 = 7`. - For the third query, the sum of elements from index 1 to 5 is `3 + 2 + (-1) + 6 + 5 = 15`.","solution":"def sum_in_range(arr, queries): This function takes an array \'arr\' and a list of queries \'queries\'. Each query is a tuple (l, r) and the function returns a list of results, where each result is the sum of the elements from index l to index r (both inclusive). result = [] for (l, r) in queries: result.append(sum(arr[l-1:r])) # Adjusting l and r as 1-based index is given in queries return result"},{"question":"A renowned high school recently launched a new coding club where students were classified into different groups based on their year of joining. Each member has a membership ID. For simplicity, the IDs are sequential and start from the year they joined, followed by the order of their registration within that year. However, due to a technical glitch, the registration records for some years were lost. Given a list of membership IDs from various years, we need to identify the earliest year each membership ID was issued. For instance, if a student joined in the year 2021 and was the third student to register, their membership ID would be 2021003. Another student joining in 2023 as the second to register would have an ID of 2023002. Your task is to create a function that accepts a list of membership IDs and returns the earliest possible joining year for each provided ID. # Function Signature ```python def find_earliest_year(ids: List[int]) -> List[int]: ``` # Input - `ids`: A list of integers representing membership IDs. Each ID consists of a year followed by a registration sequence within that year. (1 ≤ |ids| ≤ 100, 200001 ≤ ids[i] ≤ 299912) # Output - A list of integers representing the earliest possible joining year for each input ID, in the same order. # Example ```python find_earliest_year([2021003, 2023002, 2019004]) ``` Output ```python [2021, 2023, 2019] ``` In this example: - For the ID `2021003`, the earliest year is `2021`. - For the ID `2023002`, the earliest year is `2023`. - For the ID `2019004`, the earliest year is `2019`.","solution":"def find_earliest_year(ids): Given a list of membership IDs, returns the earliest possible joining year for each provided ID. Args: ids (List[int]): A list of membership IDs. Returns: List[int]: A list of integers representing the earliest possible joining year for each input ID. years = [] for id in ids: # The first 4 characters of the ID represent the year year = int(str(id)[:4]) years.append(year) return years"},{"question":"You are given a list of students with their respective scores. Each student can have multiple scores, and your task is to find the highest average score among all students. Specifically, you need to consider the average of each student\'s top three scores. If a student has fewer than three scores, the average is calculated using all the scores they have. The input consists of multiple lines: - Each line contains a string (the student\'s name) followed by an integer (the score). - The number of students and scores is not fixed but will not exceed 100,000 entries in total. - The student\'s name and score are separated by a space, and each name will be a non-empty string without spaces consisting of lowercase English letters only. - Each score is an integer between 0 and 100, inclusive. Output the highest average score among all students, rounded to two decimal places. Example input: ``` alice 95 bob 85 alice 80 bob 90 alice 30 bob 75 carol 100 carol 90 carol 95 ``` Example output: ``` 95.00 ``` Explanation: - Alice\'s top three scores are 95, 80, and 30, with an average of ((95 + 80 + 30) / 3 = 68.33). - Bob\'s top three scores are 90, 85, and 75, with an average of ((90 + 85 + 75) / 3 = 83.33). - Carol\'s top three scores are 100, 95, and 90, with an average of ((100 + 95 + 90) / 3 = 95.00). Hence, the highest average score among all students is 95.00.","solution":"from collections import defaultdict import heapq def highest_average_score(records): Calculates the highest average score among all students using their top three scores. Args: records (List[str]): List of student records in the format \\"name score\\" Returns: float: The highest average score rounded to two decimal places # Dictionary to store the scores for each student scores = defaultdict(list) # Iterate over the records and populate the dictionary for record in records: name, score = record.split() score = int(score) scores[name].append(score) max_average = float(\'-inf\') # Calculate the average score for each student and keep track of the maximum for student, score_list in scores.items(): # If the student has more than 3 scores, consider only the top 3 if len(score_list) > 3: top_scores = heapq.nlargest(3, score_list) else: top_scores = score_list average = sum(top_scores) / len(top_scores) max_average = max(max_average, average) # Return the highest average rounded to two decimal places return round(max_average, 2)"},{"question":"You are given a 2D grid of dimensions n times m (1 ≤ n, m ≤ 50). Each cell in the grid contains a lowercase English letter. You need to find the largest square that can be formed such that every cell in the square contains the same letter. For example, given the following grid: ``` 3 4 abcd bbcd bbcd ``` The largest square that can be formed is: ``` bb bb ``` which has a size of 2. Your task is to write a program that reads the dimensions of the grid and its cells, and then outputs the size (side length) of the largest square that can be formed such that all cells within the square contain the same letter. **Input:** - The first line contains two integers, n and m (1 ≤ n, m ≤ 50), representing the number of rows and columns in the grid. - The next n lines each contain a string of length m, where each character is a lowercase English letter. **Output:** - Print a single integer representing the side length of the largest square with all identical letters. # Example **Input:** ``` 3 4 abcd bbcd bbcd ``` **Output:** ``` 2 ``` **Explanation:** The largest identical square of letters in the grid is of side length 2, which is formed by the cells at the bottom-left of the grid (`b` letters).","solution":"def largest_identical_square(n, m, grid): max_side = min(n, m) largest_square_size = 1 for side in range(2, max_side + 1): for i in range(n - side + 1): for j in range(m - side + 1): base_char = grid[i][j] is_square = True for x in range(i, i + side): for y in range(j, j + side): if grid[x][y] != base_char: is_square = False break if not is_square: break if is_square: largest_square_size = side return largest_square_size"},{"question":"There is a new amusement park that features a haunted house. Brave adventurers start their journey at the house\'s entrance, represented by cell (1, 1) of a grid, and need to find a way to reach the exit at cell (n, m) of the grid. The haunted house is filled with several traps blocking certain cells, causing adventurers to avoid these cells. Adventurers can only move either right or down from a cell. Given the dimensions of the grid and the positions of the traps, determine if there\'s a way to reach the exit without stepping on a trap. The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid. The second line contains a single integer k (0 ≤ k ≤ 10000) — the number of traps. The following k lines each contain two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) — the row and column positions of each trap in the grid. Print \\"POSSIBLE\\" if adventurers can reach the exit by avoiding all traps, otherwise print \\"IMPOSSIBLE\\". Note that the cells (1, 1) and (n, m) are always free from traps.","solution":"def haunted_house_path_possible(n, m, k, traps): # Initialize the grid with all cells initially accessible grid = [[True for _ in range(m)] for _ in range(n)] # Mark the trapped positions as False (blocked) for trap in traps: r, c = trap grid[r-1][c-1] = False # Adjusting 1-based to 0-based indexing # Initialize a 2D array to store if the cell is reachable dp = [[False for _ in range(m)] for _ in range(n)] # Starting position dp[0][0] = True # Fill the dp table for i in range(n): for j in range(m): if grid[i][j]: if i > 0: dp[i][j] = dp[i][j] or dp[i-1][j] if j > 0: dp[i][j] = dp[i][j] or dp[i][j-1] # The result is whether the exit is reachable return \\"POSSIBLE\\" if dp[n-1][m-1] else \\"IMPOSSIBLE\\""},{"question":"**Problem Statement:** Mario loves solving puzzles and has recently taken up solving Sudoku puzzles. In the traditional Sudoku puzzle, there is a 9x9 grid that needs to be filled with digits from 1 to 9. Each row, each column, and each of the 3x3 smaller grids must contain all the digits from 1 to 9 without repetition. However, Mario has come across a slightly different version of this puzzle. In this version, there are certain constraints on some of the cells - each constrained cell should have a specific sum value when added with another set of predetermined values. Mario needs your help to solve this modified Sudoku puzzle efficiently. You will be given a partially filled 9x9 Sudoku grid. Some of the cells will have constraints in the form of pairs (i, j) and a sum value `v`, indicating that the value at cell (i, j) when added to another specific cell must equal the sum `v`. The specific cells and their constraints will be given in a list. Write a function `solve_sudoku(sudoku: List[List[int]], constraints: List[Tuple[Tuple[int, int], int]]) -> List[List[int]]` that takes as input a 2D list `sudoku` representing the partially filled 9x9 grid (with unfilled cells represented by 0) and a list of constraints. The function should return the completed Sudoku grid following the traditional rules and the additional constraints. # Input - `sudoku`: a list of lists of integers representing the 9x9 Sudoku grid. Unfilled cells are represented by 0. - `constraints`: a list of tuples. Each tuple contains: - A pair of integers (i, j) representing the 0-indexed position of a constrained cell in the grid. - An integer `v` representing the sum constraint for the specified cell. # Output - A list of lists of integers representing the completed 9x9 Sudoku grid. # Examples Example 1: ```python sudoku = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] constraints = [ ((0, 2), 6), # The cell (0, 2) should be such that when added to another specific cell, it sums up to 6 ] solve_sudoku(sudoku, constraints) ``` Example 2: ```python sudoku = [ [5, 3, 0, 0, 7, 0, 0, 0, 0], [6, 0, 0, 1, 9, 5, 0, 0, 0], [0, 9, 8, 0, 0, 0, 0, 6, 0], [8, 0, 0, 0, 6, 0, 0, 0, 3], [4, 0, 0, 8, 0, 3, 0, 0, 1], [7, 0, 0, 0, 2, 0, 0, 0, 6], [0, 6, 0, 0, 0, 0, 2, 8, 0], [0, 0, 0, 4, 1, 9, 0, 0, 5], [0, 0, 0, 0, 8, 0, 0, 7, 9] ] constraints = [ ((0, 2), 6), ((4, 4), 14) ] solve_sudoku(sudoku, constraints) ```","solution":"def is_valid(board, row, col, num): Checks whether a given number can be placed at board[row][col] according to the Sudoku rules. # Check row for i in range(9): if board[row][i] == num: return False # Check column for i in range(9): if board[i][col] == num: return False # Check 3x3 grid start_row, start_col = (row // 3) * 3, (col // 3) * 3 for i in range(start_row, start_row + 3): for j in range(start_col, start_col + 3): if board[i][j] == num: return False return True def solve_sudoku_helper(board): Backtracking helper function to solve the Sudoku board. for i in range(9): for j in range(9): if board[i][j] == 0: # Find an empty cell for num in range(1, 10): if is_valid(board, i, j, num): board[i][j] = num if solve_sudoku_helper(board): return True board[i][j] = 0 # Reset cell on backtrack return False return True def validate_constraints(board, constraints): Validates that the board meets the additional constraints. # Assuming constraints are of the form ((i, j), value) # No information provided about what specific cell the sum is with. for (i, j), value in constraints: found = False for x in range(9): for y in range(9): if (x != i or y != j) and board[i][j] + board[x][y] == value: found = True break if found: break if not found: return False return True def solve_sudoku(sudoku, constraints): Solves the modified Sudoku puzzle with additional constraints and returns the completed Sudoku grid. if not solve_sudoku_helper(sudoku): return None if not validate_constraints(sudoku, constraints): return None return sudoku"},{"question":"You are given a list of integers and your task is to find the length of the longest contiguous subarray with an equal number of 0s and 1s. # Input - The first line contains a single integer `n` (1 leq n leq 10^5) — the number of integers in the list. - The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (a_i in {0, 1}) — the integers in the list. # Output - Output a single integer — the length of the longest contiguous subarray with an equal number of 0s and 1s. If there is no such subarray, output `0`. # Example Input ``` 7 0 1 0 0 1 1 0 ``` Output ``` 6 ``` # Explanation In the example, the subarray from index 1 to index 6 (0-based) has three 0s and three 1s: [1, 0, 0, 1, 1, 0] which is of length 6. # Note - Convert all 0s to -1. The problem then reduces to finding the longest subarray with a sum of 0. - Use a hashmap to store the first occurrence of each cumulative sum.","solution":"def find_max_length_subarray(nums): Returns the length of the longest contiguous subarray with an equal number of 0s and 1s. sum_to_index = {} sum_to_index[0] = -1 # Sum of 0 seen at index -1 max_length = 0 current_sum = 0 for index, num in enumerate(nums): # Treat 0 as -1 if num == 0: current_sum -= 1 else: current_sum += 1 if current_sum in sum_to_index: max_length = max(max_length, index - sum_to_index[current_sum]) else: sum_to_index[current_sum] = index return max_length"},{"question":"A company wants to optimize the schedule for its weekly meetings. Each meeting has a start time and an end time, and the company wants to hold as many non-overlapping meetings as possible. To achieve this, they need a program that can determine the maximum number of meetings that can be scheduled without any overlapping. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of meetings. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^9) — the start time and end time of the i-th meeting. Print a single integer — the maximum number of non-overlapping meetings that can be scheduled. Example: Input: 6 1 4 2 5 3 6 7 8 8 9 9 10 Output: 4 In this example, the maximum number of non-overlapping meetings that can be held are: [1, 4], [7, 8], [8, 9], [9, 10].","solution":"def max_non_overlapping_meetings(n, meetings): Returns the maximum number of non-overlapping meetings that can be scheduled. Parameters: n (int): The number of meetings meetings (list of tuples): List of (start, end) time tuples for each meeting Returns: int: The maximum number of non-overlapping meetings # Sort meetings based on their end time meetings.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end return count # Example usage: # meetings = [(1, 4), (2, 5), (3, 6), (7, 8), (8, 9), (9, 10)] # print(max_non_overlapping_meetings(len(meetings), meetings)) # Output: 4"},{"question":"You are given a grid of size n x m where each cell is either land or water. The grid is represented by a two-dimensional array where \'1\' represents land and \'0\' represents water. An island is defined as a group of connected \'1\'s (vertically or horizontally). You need to write a function that returns the number of islands. The first line of input contains two integers n and m (1 ≤ n, m ≤ 50). Each of the next n lines contains m integers (either 0 or 1) representing the grid. Write a function `num_islands(grid)` that takes the grid as input and returns the number of islands. **Example 1:** ``` Input: 4 5 1 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 1 1 Output: 3 ``` **Example 2:** ``` Input: 3 3 1 0 0 0 1 0 0 0 1 Output: 3 ``` **Example 3:** ``` Input: 4 4 1 1 1 1 1 1 0 0 1 0 0 1 0 0 1 1 Output: 2 ``` **Note:** - Be aware that diagonal connections (top-left, top-right, bottom-left, bottom-right) do not count as connected land. - It is guaranteed that the grid input will always be well-formed.","solution":"def num_islands(grid): Given a grid of \'1\'s (land) and \'0\'s (water), returns the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. if not grid: return 0 n = len(grid) m = len(grid[0]) def dfs(i, j): if i < 0 or j < 0 or i >= n or j >= m or grid[i][j] == \'0\': return grid[i][j] = \'0\' # mark as visited dfs(i-1, j) # up dfs(i+1, j) # down dfs(i, j-1) # left dfs(i, j+1) # right islands_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': dfs(i, j) islands_count += 1 return islands_count"},{"question":"You are given a set of n electronic devices connected in a line, and each device has a unique integer identifier. Each device can transfer data to its directly connected neighboring devices. A data packet originates from a device with the identifier id and needs to be broadcasted to all other devices in the network. Each transfer between two directly connected neighboring devices takes exactly 1 second. Write a function that computes the minimum time taken to broadcast the data packet from the originating device to all other devices in the network. The function should follow this signature: ```python def broadcast_time(n: int, id: int) -> List[int]: ``` # Input - n (2 ≤ n ≤ 100000): The number of devices in the network. - id (1 ≤ id ≤ n): The identifier of the device from which the data packet is broadcasted. # Output An array of integers of length n where the i-th index contains the minimum time (in seconds) taken for the device with the identifier i+1 to receive the data packet. # Example ```python assert(broadcast_time(5, 3) == [2, 1, 0, 1, 2]) assert(broadcast_time(4, 1) == [0, 1, 2, 3]) ``` # Explanation In the first example: - The data packet starts at device 3. - Device 1 and device 5 are 2 seconds away from device 3. - Device 2 and device 4 are 1 second away from device 3. - Device 3 is the starting point, so it is 0 seconds away from itself. In the second example: - The data packet starts at device 1. - Device 2 is 1 second away, device 3 is 2 seconds away, and device 4 is 3 seconds away from device 1.","solution":"def broadcast_time(n, id): Computes the minimum time taken to broadcast the data packet from the originating device to all other devices in the network. Args: - n (int): The number of devices in the network. - id (int): The identifier of the device from which the data packet is broadcasted. Returns: - List[int]: An array where the i-th index contains the minimum time (in seconds) for the device with the identifier i+1 to receive the data packet. times = [0] * n for i in range(n): times[i] = abs(i + 1 - id) return times"},{"question":"Given a list of n unique integers, you need to determine if there exists a pair of distinct elements such that their product is equal to the square of another element in the list. # Input: - The first line contains an integer n (2 ≤ n ≤ 1000), the number of elements in the list. - The second line contains n space-separated integers a1, a2, ..., an (-10^6 ≤ ai ≤ 10^6). # Output: - Print \\"YES\\" if there exists such a pair of distinct elements and an element whose square is equal to their product. Otherwise, print \\"NO\\". # Example Input: ``` 5 1 4 16 256 65536 ``` Output: ``` YES ``` Explanation: The pair (4, 16) has a product equal to 64, which is the square of 8 (8 is not in the list). The pair (1, 65536) has a product equal to 65536, which is the square of 256 (256 is in the list). Input: ``` 4 1 2 3 5 ``` Output: ``` NO ```","solution":"def exists_square_product_pair(numbers): Given a list of unique integers, determines if there exists a pair of distinct elements such that their product is equal to the square of another element in the list. :param numbers: List of integers :return: \\"YES\\" if such a pair exists, \\"NO\\" otherwise num_set = set(numbers) for i in range(len(numbers)): for j in range(i + 1, len(numbers)): product = numbers[i] * numbers[j] if product in num_set and product ** 0.5 in num_set: return \\"YES\\" return \\"NO\\""},{"question":"Develop a program that determines if a given number N is \'happy\' or \'unhappy\'. A happy number is defined by the following process: - Start with any positive integer N. - Replace the number by the sum of the squares of its digits. - Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. If this process results in 1, then N is a happy number. If it results in an endless cycle, where it does not include 1, then N is an unhappy number. For instance, 19 is a happy number as the process will produce the sequence: 1² + 9² = 1 + 81 = 82 8² + 2² = 64 + 4 = 68 6² + 8² = 36 + 64 = 100 1² + 0² + 0² = 1 + 0 + 0 = 1 Write a function `is_happy_number(N: int) -> str` that takes an integer N and returns \\"HAPPY\\" if the number is happy, or \\"UNHAPPY\\" otherwise. # Input - An integer N, where (1 leq N leq 10^9). # Output - A single string: either \\"HAPPY\\" or \\"UNHAPPY\\" # Example Input: ``` 19 ``` Output: ``` HAPPY ``` Input: ``` 2 ``` Output: ``` UNHAPPY ``` # Note: - Use a set to store numbers that have been seen to detect cycles when a number repeats. - Include edge cases such as N being a single-digit number.","solution":"def is_happy_number(N: int) -> str: def get_next(number): return sum(int(digit) ** 2 for digit in str(number)) seen_numbers = set() while N != 1 and N not in seen_numbers: seen_numbers.add(N) N = get_next(N) return \\"HAPPY\\" if N == 1 else \\"UNHAPPY\\""},{"question":"You are given an array of n integers where each integer represents the carbon emission level recorded over n days. An environmental organization wants to determine the longest strictly decreasing sequence of days to show the effectiveness of their programs in reducing carbon emissions. The organization wants to identify the specific days in this sequence. You need to help them find the longest strictly decreasing subsequence from the given array and the respective days when these levels were recorded. Input: - The first line contains an integer n (1 ≤ n ≤ 200). - The second line contains n space-separated integers representing the carbon emission levels (each between -10^6 and 10^6). Output: - Print a single integer k — the length of the longest strictly decreasing subsequence. - On the next line, print k space-separated integers representing the days in this sequence. The days should be in the format they were given, starting from 1. If there are multiple solutions, output any. If no such sequence exists, print 0. Example: Input: 7 5 3 4 8 6 7 2 Output: 3 1 2 7","solution":"def longest_decreasing_subsequence(days, emissions): n = len(emissions) dp = [1] * n previous = [-1] * n for i in range(1, n): for j in range(i): if emissions[i] < emissions[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 previous[i] = j max_length = max(dp) index = dp.index(max_length) seq = [] while index != -1: seq.append(days[index]) index = previous[index] seq.reverse() return max_length, seq def process_emissions(n, emissions): days = list(range(1, n + 1)) max_length, seq = longest_decreasing_subsequence(days, emissions) return max_length, seq"},{"question":"A distribution company operates in Deliveryland, where there are n distribution centers connected by m direct delivery routes. You are given that k distinct products are handled, and each distribution center deals only with one type of product. Each center has a unique requirement denoted by r, which represents the maximum distance (number of routes) that goods can be transported to the center. To maintain optimal stock levels, the company wants to ensure that each distribution center can receive at least s different types of products within the allowed maximum distance. Your task is to determine whether it is possible to supply the required number of product types to each distribution center, considering the distance constraint for each center. # Input - The first line contains four integers n, m, k, s (1 le n le 10^5, 0 le m le 10^5, 1 le s le k le min(n, 100)) — the number of distribution centers, the number of direct delivery routes, the number of different product types, and the required number of distinct product types to be received within the specified distance, respectively. - The second line contains n integers p_1, p_2, ldots, p_n (1 le p_i le k), where p_i is the product type dealt with by the i-th distribution center. - The third line contains n integers r_1, r_2, ldots, r_n (1 le r_i le n), where r_i is the maximum distance (number of routes) that goods can travel to reach the i-th distribution center. - The next m lines each contain two integers u v (1 le u, v le n, u ne v) — representing a direct delivery route between distribution centers u and v. # Output - Print n lines, each containing \\"YES\\" if there exist at least s different product types that can be delivered within the distance constraint to the i-th distribution center, otherwise print \\"NO\\". # Example Input: ``` 5 5 3 2 1 2 3 1 2 1 2 1 3 2 1 2 2 3 3 4 4 5 5 1 ``` Output: ``` YES YES YES YES YES ``` # Explanation: In this example, every distribution center has a specified distance constraint and the number of different product types it should be able to receive. The task is to determine if the conditions are met for each center based on the distances specified by the delivery routes.","solution":"from collections import deque def can_receive_required_products(n, m, k, s, p, r, routes): def bfs(start, max_distance): queue = deque([(start, 0)]) visited = set() product_types = set() while queue: current, dist = queue.popleft() if dist > max_distance: break if current not in visited: visited.add(current) product_types.add(p[current]) for neighbor in graph[current]: queue.append((neighbor, dist+1)) return len(product_types) >= s graph = {i: [] for i in range(n)} for u, v in routes: graph[u-1].append(v-1) graph[v-1].append(u-1) results = [] for i in range(n): if bfs(i, r[i]): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a list of integers representing the power levels of n energy cells arranged in a straight line. You need to identify three consecutive cells such that the sum of their power levels is as high as possible. Your task is to output the indices of these three consecutive cells. The first line contains an integer n (3 ≤ n ≤ 100) — the number of energy cells. The second line contains n space-separated integers p1, p2, ..., pn (1 ≤ pi ≤ 1000) — the power levels of the energy cells. Output three integers — the starting indices (1-based) of the three consecutive cells with the highest power level sum. If there are multiple solutions, output any of them. Example: Input: 6 10 20 30 40 50 60 Output: 4","solution":"def max_power_indices(n, power_levels): Returns the starting indices (1-based) of the three consecutive cells with the highest power level sum. max_sum = 0 max_index = 0 # Iterate through the list of power levels to find the maximum sum of three consecutive cells for i in range(n - 2): current_sum = power_levels[i] + power_levels[i + 1] + power_levels[i + 2] if current_sum > max_sum: max_sum = current_sum max_index = i # Return the starting index of these three consecutive cells (1-based) return max_index + 1"},{"question":"You are given an array of integers. Your task is to find for each prefix of the array the sum of all distinct elements in that prefix. Specifically, an array prefix is any contiguous subarray of the form `arr[0:i]` where `0 <= i < n`. For each prefix, you need to compute the sum of the distinct elements in that prefix. # Input - The first line contains an integer `n` (1 leq n leq 100,000) – the length of the array. - The second line contains `n` integers, the elements of the array `arr`, where each element is between 1 and 10^{9}. # Output - Output `n` lines, each containing a single integer. The integer on the `i-th` line should be the sum of all distinct elements in the prefix `arr[0:i]`. # Example Input ``` 5 3 4 3 2 4 ``` Output ``` 3 7 7 9 9 ``` # Explanation - For the first prefix `[3]`: sum of distinct elements is `3`. - For the second prefix `[3, 4]`: sum of distinct elements is `3 + 4 = 7`. - For the third prefix `[3, 4, 3]`: sum of distinct elements is still `7` since `3` is repeated. - For the fourth prefix `[3, 4, 3, 2]`: sum of distinct elements is `3 + 4 + 2 = 9`. - For the fifth prefix `[3, 4, 3, 2, 4]`: sum of distinct elements is still `9` since `4` is repeated.","solution":"def prefix_sum_distinct(arr): Given an array `arr`, returns the sum of distinct elements for every prefix. seen = set() current_sum = 0 result = [] for num in arr: if num not in seen: seen.add(num) current_sum += num result.append(current_sum) return result # Sample input n = 5 arr = [3, 4, 3, 2, 4] # Get the result result = prefix_sum_distinct(arr) for value in result: print(value)"},{"question":"Given an array of integers `arr` representing the heights of columns, where the width of each column is `1`, return the amount of water it is able to trap after raining. A list of integers denotes the height of each column. Water levels are determined based on the heights of neighboring columns, and lower points between higher columns can trap water. Your task is to compute the total amount of trapped water. # Input - The input consists of a list of integers representing column heights. # Output - Output a single integer which is the total amount of trapped water. # Constraints - The sum of `arr` is less than or equal to ( 10^5 ). # Example **Input:** [0,1,0,2,1,0,1,3,2,1,2,1] **Output:** 6 # Explanation The above array is represented graphically as follows, with `x` being the taller columns and `o` representing trapped rainwater: ``` x x o x x x o x x x x x x x x x x ``` In this example, `6` units of water (represented by `o`) is trapped in total. For the given input, the total height (height sum) does not exceed the constraint and the output represents the trapped water volume calculated.","solution":"def trap_water(arr): Given an array of integers representing the heights of columns, return the amount of water it is able to trap after raining. if not arr: return 0 n = len(arr) left_max = [0] * n right_max = [0] * n left_max[0] = arr[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], arr[i]) right_max[n - 1] = arr[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], arr[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - arr[i] return trapped_water"},{"question":"Aliens have invaded Earth and introduced a new form of currency called Zog dollars (ZD). Earthlings have started to adopt this currency in their daily transactions. The currency system includes various denominations of Zog dollars, and to facilitate smoother transactions, it is essential to have a program that can determine the minimum number of coins needed to make a given amount using the available denominations. Your task is to write a program that takes an amount and a list of denominations as input and outputs the minimum number of coins required to make that amount. If it\'s not possible to make the exact amount with the given denominations, the program should return -1. Input Format: - The first line of input contains an integer `amount` (1 ≤ amount ≤ 1000) – the total amount of Zog dollars to be made. - The second line contains an integer `m` (1 ≤ m ≤ 100) – the number of available denominations. - The third line contains `m` space-separated integers `d1, d2, ..., dm` (1 ≤ di ≤ 100) – representing the denominations. Output Format: - Print a single integer representing the minimum number of coins needed to make the given amount. If it is not possible to make the amount with the given denominations, print -1. Example: Input: ``` 11 4 1 5 7 10 ``` Output: ``` 2 ``` Explanation: In this example, the minimum number of coins needed to make 11 ZD is 2 (one coin of 10 ZD and one coin of 1 ZD).","solution":"def min_coins(amount, denominations): Returns the minimum number of coins needed to make the given amount with the provided denominations. If it\'s not possible to make the exact amount, returns -1. import sys dp = [sys.maxsize] * (amount + 1) dp[0] = 0 # base case: no coins needed to make amount 0 for coin in denominations: for x in range(coin, amount + 1): if dp[x - coin] != sys.maxsize: dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != sys.maxsize else -1"},{"question":"You are given a list of integers that represent the amount of rainfall received each day for a year. You need to find the maximum amount of rainfall recorded over any span of exactly k consecutive days. If there are multiple such spans with the same maximum rainfall, return the first such span (starting index). Write a function `max_rainfall_span` that takes two parameters: 1. `rainfall` - a list of integers where each integer represents the rainfall on that day. 2. `k` - an integer representing the number of consecutive days to consider. Your function should return the starting index of the span of length k that has the maximum total rainfall. # Input - A list of `rainfall` with length n (1 le n le 10^5), where each element 0 le text{rainfall}[i] le 10^9 - An integer `k` (1 le k le n) # Output - An integer representing the starting index (0-based) of the span with the highest total rainfall. # Examples Example 1 # Input: ```python rainfall = [5, 2, 3, 8, 7, 0, 4, 6] k = 3 ``` # Output: ```python 2 ``` Example 2 # Input: ```python rainfall = [2, 1, 5, 2, 1, 3] k = 2 ``` # Output: ```python 2 ``` # Explanation: For the first example, the span starting at index 2 results in the maximum total rainfall of 18 (3 + 8 + 7). The span from index 3 to 5 also has the same total rainfall but occurs later. For the second example, the span starting at index 2 results in the maximum total rainfall of 7 (5 + 2). There are no other spans with this maximum total rainfall that occur earlier.","solution":"def max_rainfall_span(rainfall, k): n = len(rainfall) if n == 0 or k > n: return -1 # Invalid input case max_sum = sum(rainfall[:k]) current_sum = max_sum max_index = 0 for i in range(1, n - k + 1): current_sum = current_sum - rainfall[i - 1] + rainfall[i + k - 1] if current_sum > max_sum: max_sum = current_sum max_index = i return max_index"},{"question":"You are given a list of integers. Your task is to find the maximum sum of any continuous subarray of the list. A continuous subarray is a subarray that appears consecutively in the original array. Write a function `max_subarray_sum(arr)` that takes a list of integers as input and returns an integer representing the maximum sum of any continuous subarray. # Input - A list of integers `arr` where `1 <= len(arr) <= 10^5` and `-10^9 <= arr[i] <= 10^9`. # Output - An integer representing the maximum sum of any continuous subarray. # Example - Input: `arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]` - Output: `6` - Explanation: The subarray `[4, -1, 2, 1]` has the largest sum `6`.","solution":"def max_subarray_sum(arr): Finds the maximum sum of any continuous subarray of the list. Parameters: arr (list): A list of integers. Returns: int: The maximum sum of any continuous subarray. # Initializing the current subarray sum and maximum sum to the first element current_sum = max_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a small town, there is a street with n houses aligned from left to right. Each house has a certain amount of candy in it, represented by an integer array candies, where candies[i] is the amount of candy in the i-th house. A thief wants to steal the maximum amount of candy, but with one constraint: he cannot rob two adjacent houses. Given the array candies, help the thief determine the maximum amount of candy he can steal without ever robbing two consecutive houses. # Input: - An integer n (1 ≤ n ≤ 1000), representing the number of houses. - A single line with n integers candies[i] (0 ≤ candies[i] ≤ 1000), representing the amount of candy in each house. # Output: - A single integer representing the maximum amount of candy the thief can steal following the given constraint. # Example: Input: ``` 6 2 7 9 3 1 5 ``` Output: ``` 16 ``` Explanation: The thief can steal candy from houses with indices 1, 3, and 6 (0-based indexing), which gives a total of 2 + 9 + 5 = 16. # Note: The problem can be solved using dynamic programming where the state dp[i] represents the maximum amount of candy that can be stolen from the first i houses.","solution":"def max_candy_robbed(n, candies): if n == 0: return 0 elif n == 1: return candies[0] dp = [0] * n dp[0] = candies[0] dp[1] = max(candies[0], candies[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + candies[i]) return dp[n-1]"},{"question":"Given a grid of size n x m, determine the number of distinct paths one can take to move from the top-left corner to the bottom-right corner. You can only move either down or to the right at any point in time. The first line of input contains two integers n and m (1 ≤ n, m ≤ 15) which represent the number of rows and columns of the grid, respectively. Output the total number of distinct paths from the top-left corner to the bottom-right corner. Example: Input: 3 3 Output: 6 Explanation: In a 3x3 grid, there are 6 distinct paths to move from the top-left to the bottom-right by only moving down or right, as follows: - Right, Right, Down, Down - Right, Down, Right, Down - Right, Down, Down, Right - Down, Right, Right, Down - Down, Right, Down, Right - Down, Down, Right, Right","solution":"def unique_paths(n, m): Returns the number of unique paths from the top-left corner to the bottom-right corner of a grid of size n x m. # Initialize a 2D dp array with 1\'s since there\'s only one way to reach starting cells dp = [[1] * m for _ in range(n)] # Iterate over the grid starting from (1, 1) for i in range(1, n): for j in range(1, m): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[-1][-1]"},{"question":"You are given a string `s` and a pattern `p`, where both `s` and `p` consist of only lowercase Latin letters. Your task is to determine if `p` is a subsequence of `s`. A string `p` is a subsequence of `s` if and only if all the characters of `p` can be found in `s` in the same order, but not necessarily consecutively. For example, \\"abc\\", \\"ac\\", and \\"b\\" are subsequences of \\"abcde\\", but \\"ba\\" and \\"ae\\" are not subsequences of \\"abcde\\". # Input * The first line contains the string `s` of length `n` (1 ≤ n ≤ 200,000). * The second line contains the pattern `p` of length `m` (1 ≤ m ≤ 200,000). # Output * Output \\"YES\\" if `p` is a subsequence of `s`. * Output \\"NO\\" otherwise. # Example Input: ``` abcde ace ``` Output: ``` YES ``` Input: ``` abcde aec ``` Output: ``` NO ``` You need to implement an efficient solution since the lengths of `s` and `p` can go up to 200,000.","solution":"def is_subsequence(s, p): Determines if the string p is a subsequence of string s. Args: - s (str): The main string. - p (str): The pattern to check as a subsequence. Returns: - str: \\"YES\\" if p is a subsequence of s, \\"NO\\" otherwise. # Two-pointer approach i, j = 0, 0 while i < len(s) and j < len(p): if s[i] == p[j]: j += 1 i += 1 if j == len(p): return \\"YES\\" else: return \\"NO\\""},{"question":"Given an array `arr` of `n` integers, where `1 <= n <= 1000` and `1 <= arr[i] <= 10^5`, write a function to return the sum of the largest contiguous subarray. A subarray is a contiguous part of an array. # Input - A single integer `n`, the number of elements in the array. - An array `arr` of `n` integers. # Output - A single integer representing the sum of the largest contiguous subarray. # Example ```python Input 8 -2 1 -3 4 -1 2 1 -5 4 Output 6 Explanation The largest contiguous subarray is `[4, -1, 2, 1]` which sums up to 6. ``` # Function Signature ```python def max_subarray_sum(arr: List[int]) -> int: pass ```","solution":"from typing import List def max_subarray_sum(arr: List[int]) -> int: Returns the sum of the largest contiguous subarray. max_ending_here = max_so_far = arr[0] for num in arr[1:]: max_ending_here = max(num, max_ending_here + num) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"A futuristic city has a unique traffic management system where roads are represented as a directed acyclic graph (DAG). Each node represents an intersection and each directed edge represents a one-way street connecting two intersections. Due to construction work, traffic engineers need to determine the longest path any vehicle can take through the city\'s roads without violating the one-way restrictions. You need to write a function to calculate the length of the longest path in the city\'s road network. The input consists of an integer `n` (1 ≤ n ≤ 100) representing the number of intersections and an integer `m` (0 ≤ m ≤ 10,000) representing the number of roads. This is followed by `m` pairs of integers `u` and `v` (0 ≤ u, v < n), each pair describing a directed road from intersection `u` to intersection `v`. Output a single integer, the length of the longest path. # Function Signature ```python def longest_path(n: int, m: int, edges: List[Tuple[int, int]]) -> int: pass ``` # Input - `n`: Integer, the number of intersections. - `m`: Integer, the number of roads. - `edges`: List of tuples, where each tuple `(u, v)` represents a directed edge from `u` to `v`. # Output - Return the length of the longest path in the road network. # Example Input: ```python n = 6 m = 7 edges = [(0, 1), (0, 2), (1, 3), (2, 3), (3, 4), (4, 5), (1, 4)] ``` Output: ```python 4 ``` Explanation: The longest path is 0 -> 1 -> 3 -> 4 -> 5 with a length of 4.","solution":"from typing import List, Tuple from collections import defaultdict, deque def longest_path(n: int, m: int, edges: List[Tuple[int, int]]) -> int: # Create graph and in-degrees graph = defaultdict(list) in_degree = [0] * n for u, v in edges: graph[u].append(v) in_degree[v] += 1 # Perform topological sort using Kahn\'s algorithm topo_order = [] q = deque([i for i in range(n) if in_degree[i] == 0]) while q: node = q.popleft() topo_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: q.append(neighbor) # Initialize distances dist = [-1] * n for node in topo_order: if dist[node] == -1: dist[node] = 0 for neighbor in graph[node]: if dist[neighbor] < dist[node] + 1: dist[neighbor] = dist[node] + 1 # Return the longest path found return max(dist)"},{"question":"John is fond of matrices and palindromes. A palindrome is a sequence that reads the same backward as forward. John wonders if he can find palindromes in rectangular submatrices of a given matrix. Specifically, John is interested in the longest palindrome that can be formed within any row of any submatrix. Develop a program to assist John in finding the length of the longest palindrome in any row of any submatrix. The input consists of: - The first line contains two integers n and m (1 ≤ n, m ≤ 500) – the number of rows and columns of the matrix respectively. - The following n lines each contain m lowercase English letters, representing the matrix. Output a single integer, the length of the longest palindrome found in any row of any submatrix. Example: Input: 3 4 abca bcba cbad Output: 3 Explanation: The longest palindromic sequence in row 1 is \\"aba\\". The longest palindromic sequence in row 2 is \\"bcb\\". The longest palindromic sequence in row 3 is \\"cbc\\". The program should evaluate all rows within all possible submatrices to determine the longest palindromic sequence length among them.","solution":"def find_longest_palindrome(matrix): def is_palindrome(s): return s == s[::-1] def longest_palindrome_in_string(s): n = len(s) max_length = 1 for i in range(n): for j in range(i, n): sub_str = s[i:j+1] if is_palindrome(sub_str): max_length = max(max_length, len(sub_str)) return max_length n = len(matrix) m = len(matrix[0]) max_length_palindrome = 1 for i in range(n): for sr in range(i, n): row_concat = \'\'.join(matrix[sr][:]) max_length_palindrome = max(max_length_palindrome, longest_palindrome_in_string(row_concat)) return max_length_palindrome"},{"question":"In a remote village, there is a single street lined with houses. The houses are arranged in a line and are labeled with consecutive integers starting from 1. The local tradition dictates that during celebrations, every house should be decorated with a specific number of lanterns based on its house number. The rule is as follows: - If the house number is even, it should have exactly 2 lanterns. - If the house number is odd, it should have exactly 3 lanterns. The village head has given you the task to calculate the total number of lanterns required to decorate all houses between two given house numbers, inclusive. Your task is to compute the total number of lanterns needed for several different ranges. Each range is specified by two integers, the starting house number a and the ending house number b. You have to answer q independent queries. The first line of the input contains one integer q (1 le q le 1000) — the number of queries. Then q lines follow. Each query consists of two integers a and b (1 le a le b le 1000) — the starting and ending house numbers for that query. For each query, print the answer: the total number of lanterns needed to decorate all houses from a to b, inclusive. Consider the first query of the example: houses from 1 to 3 need a total of 3 + 2 + 3 = 8 lanterns. In the second query, houses from 4 to 6 need a total of 2 + 3 + 2 = 7 lanterns.","solution":"def total_lanterns_needed(q, queries): Returns a list of integers where each integer represents the total number of lanterns needed for all houses between and including the given house numbers for each query. results = [] for query in queries: a, b = query total_lanterns = 0 for house_number in range(a, b + 1): if house_number % 2 == 0: total_lanterns += 2 else: total_lanterns += 3 results.append(total_lanterns) return results"},{"question":"There is a string of length n consisting of lower case English letters. You are given a list of pairs of indices, each pair representing the start and end indices of a substring within the string. For each pair, determine the number of distinct characters in the substring. The input format is as follows: - The first line contains a string s consisting of lower case English letters (1 leq |s| leq 10^5). - The second line contains a single integer q, the number of pairs (1 leq q leq 10^5). - The next q lines each contain two integers, l and r, representing the start and end indices (1-based) of a substring. You need to output q integers, each representing the number of distinct characters in the substring for each query. Example: ``` Input: abcabc 3 1 3 2 5 1 6 Output: 3 3 3 ``` Explanation: 1. For the substring `abc` (from index 1 to 3), there are 3 distinct characters: `a`, `b`, and `c`. 2. For the substring `bcab` (from index 2 to 5), there are 3 distinct characters: `a`, `b`, and `c`. 3. For the substring `abcabc` (from index 1 to 6), there are 3 distinct characters: `a`, `b`, and `c`.","solution":"def distinct_characters_in_substrings(s, queries): Returns the number of distinct characters in the substrings defined by query pairs. :param s: str - the input string :param queries: List[Tuple[int, int]] - list of (l, r) pairs (1-based indices) :return: List[int] - list of numbers of distinct characters in each substring results = [] for l, r in queries: substring = s[l-1:r] distinct_chars = len(set(substring)) results.append(distinct_chars) return results # Example usage s = \\"abcabc\\" queries = [(1, 3), (2, 5), (1, 6)] print(distinct_characters_in_substrings(s, queries)) # [3, 3, 3]"},{"question":"# Bob\'s Binary Tree Adventure Bob is exploring binary trees and wants to check if a sequence of operations will maintain a tree-like structure. A sequence of operations contains nodes being added to create a tree or nodes being removed from the tree. The nodes are represented by unique positive integers, and the operations are provided in the order they must be executed. To aid in this, you need to develop a function that verifies whether a given sequence of operations results in a valid binary tree at each step and returns the height of the tree after the final operation. If the tree structure becomes invalid at any point, return `-1`. Each test case contains a sequence of operations, where: - \\"INSERT x\\" means to add node `x` to the tree. - \\"DELETE x\\" means to remove node `x` from the tree. The height of a binary tree is the number of edges on the longest path from the root to a leaf. You may assume the input operations will provide a valid binary search tree order and deletions will only be of nodes that exist in the tree. # Input The first line contains the number of test cases `t` (1 ≤ t ≤ 100). Each test case starts with a number `n` (1 ≤ n ≤ 1000), the number of operations, followed by `n` lines representing the operations \\"INSERT x\\" or \\"DELETE x\\". # Output For each test case, output a single integer representing the height of the tree after performing all operations. If the tree structure becomes invalid at any point, output `-1`. # Example Input ``` 2 4 INSERT 5 INSERT 2 INSERT 8 DELETE 5 3 INSERT 1 DELETE 1 DELETE 1 ``` Output ``` 1 -1 ``` # Explanation 1. For the first test case: - Initially, the tree: `INSERT 5` ``` 5 ``` - After `INSERT 2`: ``` 5 / 2 ``` - After `INSERT 8`: ``` 5 / 2 8 ``` - After `DELETE 5`: ``` 8 / 2 ``` The height of the tree after the above operations is 1. 2. For the second test case: - Initially, the tree: `INSERT 1` ``` 1 ``` - After `DELETE 1`, the tree becomes empty. - The second `DELETE 1` is invalid since `1` is no longer in the tree, hence the result is `-1`.","solution":"class TreeNode: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root, key): if root is None: return TreeNode(key) else: if root.val < key: root.right = insert(root.right, key) else: root.left = insert(root.left, key) return root def delete_node(root, key): if root is None: return root if key < root.val: root.left = delete_node(root.left, key) elif key > root.val: root.right = delete_node(root.right, key) else: if root.left is None: return root.right elif root.right is None: return root.left temp = find_min(root.right) root.val = temp.val root.right = delete_node(root.right, temp.val) return root def find_min(node): current = node while(current.left is not None): current = current.left return current def height(node): if node is None: return -1 else: left_height = height(node.left) right_height = height(node.right) return max(left_height, right_height) + 1 def verify_sequence_of_operations(operations): root = None for operation in operations: op, val = operation.split() val = int(val) if op == \\"INSERT\\": root = insert(root, val) elif op == \\"DELETE\\": if not contains(root, val): return -1 root = delete_node(root, val) return height(root) def contains(root, key): if root is None: return False if root.val == key: return True elif root.val < key: return contains(root.right, key) else: return contains(root.left, key) def process_input(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] operations = test_cases[i][1:] result = verify_sequence_of_operations(operations) results.append(result) return results"},{"question":"You are working on a text processing application. One of the features of this application is to provide suggestions for partially typed words. The application should return a list of possible completions (sorted alphabetically) based on a known dictionary of words. If no completions are found, it should return an empty list. Your task is to write a function `autocomplete` that accepts two inputs: 1. A list of strings `dictionary` (1 ≤ length of dictionary ≤ 10^5). Each string in the dictionary consists of lowercase Latin letters and its length does not exceed 100 characters. 2. A string `prefix` (1 ≤ length of prefix ≤ 100) consisting of lowercase Latin letters. The function should return a list of strings, which represents all words from the dictionary that start with the given prefix, sorted in alphabetical order. **Example:** ``` Input: dictionary = [\\"apple\\", \\"appetite\\", \\"banana\\", \\"application\\", \\"apply\\", \\"antique\\", \\"ball\\"] prefix = \\"app\\" Output: [\\"apple\\", \\"appetite\\", \\"application\\", \\"apply\\"] ``` **Note:** - The strings in the returned list should be sorted lexicographically. - If no words in the dictionary match the given prefix, return an empty list.","solution":"def autocomplete(dictionary, prefix): Returns a list of words from the dictionary that start with the given prefix, sorted in alphabetical order. Parameters: dictionary (list of str): List of words comprising the dictionary. prefix (str): The prefix to match. Returns: list of str: List of matching words sorted alphabetically. matches = [word for word in dictionary if word.startswith(prefix)] return sorted(matches)"},{"question":"You are given a list of `n` integers where the integers represent points on a number line. Your task is to find the smallest subset of points such that each of the remaining points on the number line can be paired with a point from this subset within a given distance of `d`. In other words, for each point in the original list, there should be at least one point in the subset that is no more than `d` units away from it. The first line of the input contains two integers `n` and `d` (1 ≤ `n` ≤ 100,000, 1 ≤ `d` ≤ 1,000,000). The second line contains `n` integers representing the points on the number line (-1,000,000,000 ≤ points[i] ≤ 1,000,000,000). Output a single integer, which is the size of the smallest subset that satisfies the condition. Example: Input: 5 2 1 2 4 5 6 Output: 2","solution":"def smallest_subset_size(n, d, points): Finds the smallest subset of points such that each of the remaining points on the number line can be paired with a point from this subset within a distance of d. Parameters: - n (int): Number of elements in the points list. - d (int): Maximum allowed distance. - points (list of int): The list of points on the number line. Returns: - int: Size of the smallest subset. points.sort() subset = [] i = 0 while i < n: subset.append(points[i]) # Find the farthest point within d distance to the current point target = points[i] + d while i < n and points[i] <= target: i += 1 # The above loop will stop at the first point outside the d distance # Skip until we find a point that is at least d distance away from the target target = points[i - 1] + d while i < n and points[i] <= target: i += 1 return len(subset)"},{"question":"A railway company operates several train services. Each train runs a specific route consisting of multiple stations, and each station is visited at a specific time. Your task is to help manage the schedule by identifying which stations are visited by a given train at particular times. The first line of input contains an integer n (1 leq n leq 50), the number of train services. Each of the next n lines starts with an integer m (1 leq m leq 100), the number of stations that the train visits. Then follow m pairs of integers: station identifier s (1 leq s leq 1000) and time t (0 leq t leq 1440). After these n lines, there will be an integer q (1 leq q leq 100), the number of queries. Each query consists of an integer k (1 leq k leq n) representing the train service number and an integer T (0 leq T leq 1440), representing the time. For each query, output the station identifier of the station visited by the train service at that exact time, or -1 if the train is not at any station. # Input Format - The first line contains an integer n. - The next n lines each start with an integer m, followed by m pairs of integers s and t. - The next line contains an integer q. - The next q lines each contain two integers k and T. # Output Format For each query, output the station identifier visited by the train service at time T, or -1 if the train is not at any station. # Example Input ``` 2 3 1 100 2 200 3 300 2 4 150 5 300 3 1 200 2 300 2 100 ``` Output ``` 2 5 -1 ``` # Note - In the example above, there are two train services. - Train 1 visits three stations: station 1 at time 100, station 2 at time 200, and station 3 at time 300. - Train 2 visits two stations: station 4 at time 150 and station 5 at time 300. - There are three queries. - The first query asks for the station visited by Train 1 at time 200, which is station 2. - The second query asks for the station visited by Train 2 at time 300, which is station 5. - The third query asks for the station visited by Train 2 at time 100, which is none (-1). Ensure your implementation reads input directly, handles multiple test cases efficiently, and produces the correct outputs for each query.","solution":"def manage_train_schedules(trains, queries): Given train schedules and queries, return the station visited by each train at the specified times. :param trains: List of train services. Each train service is represented as a list of tuples (station, time). :param queries: List of queries. Each query is a tuple (train_number, time). :return: List of station identifiers for each query, or -1 if the train is not at any station at the given time. results = [] for train_number, query_time in queries: train_schedule = trains[train_number - 1] station_at_time = -1 for station, time in train_schedule: if time == query_time: station_at_time = station break results.append(station_at_time) return results # Example function input construction def parse_input(input_data): Parse the input data into a structure suitable for `manage_train_schedules` function. :param input_data: Multi-line string input :return: A tuple (trains, queries) lines = input_data.strip().split(\\"n\\") n = int(lines[0]) index = 1 trains = [] for _ in range(n): parts = list(map(int, lines[index].split())) m = parts[0] train_schedule = [(parts[i], parts[i + 1]) for i in range(1, 2 * m, 2)] trains.append(train_schedule) index += 1 q = int(lines[index]) index += 1 queries = [tuple(map(int, lines[i].split())) for i in range(index, index + q)] return trains, queries # For direct testing purposes def main(input_data): trains, queries = parse_input(input_data) results = manage_train_schedules(trains, queries) for result in results: print(result) # Example usage input_data = 2 3 1 100 2 200 3 300 2 4 150 5 300 3 1 200 2 300 2 100 main(input_data)"},{"question":"Suppose you are given a 2D grid of dimensions n x m filled with non-negative integers. Each number represents the cost of stepping on that cell. You are initially positioned at the top-left corner of the grid (cell (0, 0)). Your goal is to reach the bottom-right corner of the grid (cell (n-1, m-1)) with the minimum cost possible. You can only move either right or down at any point in time. Write a function that computes the minimum cost to reach the bottom-right corner of the grid. Function Signature: ```python def min_path_sum(grid: List[List[int]]) -> int: ``` Input: - An integer n representing the number of rows in the grid. (1 ≤ n ≤ 100) - An integer m representing the number of columns in the grid. (1 ≤ m ≤ 100) - A 2D list of integers `grid` where `grid[i][j]` is the cost of stepping on the cell (i, j) (0 ≤ grid[i][j] ≤ 1000) Output: - Return the minimum cost to reach the bottom-right corner of the grid. Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] result = min_path_sum(grid) print(result) # Output: 7 ``` Explanation: In the given grid, the path with the minimum cost is 1 → 3 → 1 → 1 → 1, and the total cost is 7.","solution":"def min_path_sum(grid): Returns the minimum cost to reach the bottom-right corner of the grid. if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) # Initialize the cost grid with the same dimensions as the input grid cost = [[0] * m for _ in range(n)] cost[0][0] = grid[0][0] # Fill the first row for j in range(1, m): cost[0][j] = cost[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): cost[i][0] = cost[i-1][0] + grid[i][0] # Fill the rest of the cost grid for i in range(1, n): for j in range(1, m): cost[i][j] = min(cost[i-1][j], cost[i][j-1]) + grid[i][j] return cost[n-1][m-1]"},{"question":"A company needs to optimize their server operations to handle peak traffic efficiently. Given a list of request start and end times, find the maximum number of simultaneous requests the server has to handle at any given time. Input: A list of intervals where each interval is represented as a tuple (start, end). The start and end times are non-negative integers and are inclusive. Output: An integer representing the maximum number of simultaneous requests. For example: Input: [(1, 4), (2, 5), (9, 12), (5, 9), (5, 12)] Output: 3 Input: [(1, 2), (2, 3), (3, 4), (4, 5)] Output: 1 Explanation: - In the first example, the maximum overlap occurs from time 5 to time 9, where there are three overlapping intervals: (2, 5), (5, 9), and (5, 12). - In the second example, there is no overlap; each request starts just as the previous one ends, so the maximum number of simultaneous requests is 1.","solution":"def max_simultaneous_requests(intervals): Finds the maximum number of simultaneous requests from a list of intervals. Parameters: intervals (list of tuples): Each tuple (start, end) represents the start and end time of a request. Returns: int: Maximum number of simultaneous requests. if not intervals: return 0 # Create a list of all events (start and end times) events = [] for start, end in intervals: events.append((start, 1)) events.append((end + 1, -1)) # Sort events events.sort() max_simultaneous = 0 current_simultaneous = 0 # Traverse the events to find the maximum number of simultaneous requests for time, event in events: current_simultaneous += event max_simultaneous = max(max_simultaneous, current_simultaneous) return max_simultaneous"},{"question":"Bob is playing a game where he\'s given a sequence of integers. He can perform the following operation: pick any two adjacent elements in the sequence and replace them with their sum. Bob\'s goal is to make the entire sequence consist of a single integer in as few operations as possible. Given a sequence a_1, a_2, ldots, a_n, where 1 leq n leq 10^5 and each a_i (1 leq a_i leq 10^9), determine the minimum number of operations required for Bob to achieve his goal. Each test case is independent of the others. # Input The first line contains an integer t (1 leq t leq 100), the number of test cases. Each test case consists of two lines: The first line contains a single integer n, the number of elements in the sequence. The second line contains n integers, the elements of the sequence. # Output For each test case, print a single integer: the minimum number of operations required to make the entire sequence consist of a single integer. # Example Input ``` 2 4 1 2 3 4 3 10 20 30 ``` Output ``` 3 2 ``` # Explanation In the first example, you can perform the following operations: 1. Replace 1 and 2 with 3 (sequence becomes 3 3 4). 2. Replace 3 and 3 with 6 (sequence becomes 6 4). 3. Replace 6 and 4 with 10 (sequence becomes 10). In the second example, you can perform the following operations: 1. Replace 10 and 20 with 30 (sequence becomes 30 30). 2. Replace 30 and 30 with 60 (sequence becomes 60).","solution":"def min_operations_to_single_element(test_cases): For each test case, calculate the minimum number of operations required to reduce the sequence to a single integer. Parameters: test_cases (list of tuple): List of test cases where each test case is a tuple (n, sequence) Returns: list of int: List of results for each test case results = [] for n, seq in test_cases: # The number of operations needed is always (n - 1) results.append(n - 1) return results"},{"question":"You are given an array of integers nums sorted in non-decreasing order and an integer target. You should find if the target exists in the array or not using binary search. If the target exists, return its index. Otherwise, return -1. The first line contains an integer n (1 ≤ n ≤ 10^5) – the size of the array nums. The second line contains n integers in non-decreasing order ( -10^9 ≤ nums[i] ≤ 10^9). The third line contains a single integer target ( -10^9 ≤ target ≤ 10^9). Print a single integer representing the index of the target in the array if it exists, otherwise print -1.","solution":"def binary_search(nums, target): Performs binary search to find the target in nums. Returns the index of the target if found, otherwise returns -1. left, right = 0, len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"A transportation company operates in a city with n intersections and m bidirectional roads. Each road has a certain \\"travel time\\" associated with it, indicating how many minutes it takes to travel from one end of the road to the other. The company wants to optimize its delivery routes to ensure that they can deliver goods to all intersections using a minimum total travel time. Given the city map with intersections and roads, you need to determine the minimum total travel time required to ensure that all intersections are directly or indirectly connected through the company\'s delivery network. Each test case consists of two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2 * 10^5) – the number of intersections and the number of roads. Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000, u ≠ v), representing a road between intersections u and v with a travel time of w. It is guaranteed that there exists at least one road connecting each intersection directly or indirectly with every other intersection. Output the minimum total travel time required to connect all intersections. If it\'s impossible to connect all intersections, output -1. **Input:** ``` 4 5 1 2 3 2 3 4 3 4 5 4 1 2 1 3 1 ``` **Output:** ``` 6 ``` **Explanation:** The company can use the roads (1, 3) with travel time 1, (1, 4) with travel time 2, and (2, 1) with travel time 3 to connect all intersections. The total minimum travel time is 1 + 2 + 3 = 6.","solution":"import heapq def minimum_travel_time(n, m, roads): if not roads and n > 1: return -1 # if there are no roads and more than one intersection, it\'s impossible # Create an adjacency list adj = [[] for _ in range(n + 1)] for u, v, w in roads: adj[u].append((w, v)) adj[v].append((w, u)) # Use Prim\'s algorithm to find Minimum Spanning Tree (MST) min_cost = 0 in_mst = [False] * (n + 1) min_heap = [(0, 1)] # (cost, start_vertex), use vertex 1 as the starting point while min_heap: cost, u = heapq.heappop(min_heap) if in_mst[u]: continue min_cost += cost in_mst[u] = True for edge_cost, v in adj[u]: if not in_mst[v]: heapq.heappush(min_heap, (edge_cost, v)) # If not all intersections are included in the MST if not all(in_mst[1:]): return -1 return min_cost"},{"question":"You have been tasked with designing a system to track and manage the seating arrangements in a large lecture hall. The hall is represented as an `R x C` grid, where `R` is the number of rows and `C` is the number of columns. Each cell in the grid can either be empty (denoted by \'.\'), occupied by a student (denoted by \'S\'), or broken (denoted by \'X\'). Students arrive in groups and each group wants to sit together in contiguous seats (horizontally or vertically). However, students should not sit in broken seats, and every group needs to sit together in a block of adjacent cells, which are not split by a row or a column. Your task is to process multiple group seating requests and determine for each request whether there is a suitable block of seats available. If there is, you should mark these seats as occupied and return \\"YES\\". If there is no such block available, return \\"NO\\". Once seats are marked as occupied, they remain occupied for subsequent requests. # Input: - The first line of the input contains three integers `R`, `C`, and `G` (1 ≤ R, C ≤ 1000, 1 ≤ G ≤ 10000) – the number of rows, columns, and the number of groups, respectively. - Next `R` lines describe the hall’s initial state. Each line contains a string of `C` characters from the set {\'.\', \'S\', \'X\'}. - The next `G` lines describe the group seating requests. Each line contains an integer `ni` (1 ≤ ni ≤ 100) – the size of the group. # Output: For each group seating request, print \\"YES\\" if there is a suitable block of seats and \\"NO\\" otherwise. # Example: Input: ``` 5 5 3 ..... ..... ..X.. ..... ..... 3 5 10 ``` Output: ``` YES YES NO ``` # Explanation: 1. The first group of 3 can sit in any of the first two rows. 2. The second group of 5 can sit in the first row after reserving seats for the first group. 3. The third group of 10 cannot find a suitable contiguous block in any row or column.","solution":"def find_seat_block(grid, group_size): R = len(grid) C = len(grid[0]) # Check horizontally for r in range(R): count = 0 for c in range(C): if grid[r][c] == \'.\': count += 1 if count == group_size: # Mark seats as occupied for i in range(c - count + 1, c + 1): grid[r][i] = \'S\' return \\"YES\\" else: count = 0 # Check vertically for c in range(C): count = 0 for r in range(R): if grid[r][c] == \'.\': count += 1 if count == group_size: # Mark seats as occupied for i in range(r - count + 1, r + 1): grid[i][c] = \'S\' return \\"YES\\" else: count = 0 return \\"NO\\" def seating_arrangement(R, C, G, initial_state, groups): grid = [list(row) for row in initial_state] results = [] for group_size in groups: result = find_seat_block(grid, group_size) results.append(result) return results"},{"question":"You are given a string s consisting of lowercase English letters. A palindrome is a string that reads the same forward and backward. Your task is to determine the minimum number of characters that need to be inserted into the string to make it a palindrome. For example: - For the input string \\"ab\\", you can insert 1 character to get \\"aba\\" or \\"bab\\". - For the input string \\"race\\", you can insert 3 characters to get \\"ecarace\\" or \\"racecar\\". Write a function `min_inserts_to_palindrome` that takes a single string s as input and returns the minimum number of characters that need to be inserted to make the string a palindrome. # Input - A string s of length n (1 ≤ n ≤ 100). # Output - An integer representing the minimum number of insertions needed to make the string a palindrome. # Example ```python def min_inserts_to_palindrome(s): # Implementation goes here # Example cases print(min_inserts_to_palindrome(\\"ab\\")) # Output: 1 print(min_inserts_to_palindrome(\\"race\\")) # Output: 3 print(min_inserts_to_palindrome(\\"abcda\\")) # Output: 2 ``` Note: You can use dynamic programming to solve this problem efficiently.","solution":"def min_inserts_to_palindrome(s): Returns the minimum number of characters that need to be inserted to make the string a palindrome. n = len(s) dp = [[0] * n for _ in range(n)] for length in range(2, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1 return dp[0][n - 1]"},{"question":"Write a function `isHappyNumber` that determines whether a given positive integer is a happy number. A happy number is defined in the following way: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1, or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. Your function should take a single integer input and return `True` if the number is a happy number, and `False` otherwise. # Constraints - The input number is a positive integer in the range [1, 2^31 - 1]. # Example ```python def isHappyNumber(n): # Your code here # Test Cases print(isHappyNumber(19)) # Expected output: True print(isHappyNumber(2)) # Expected output: False ```","solution":"def isHappyNumber(n): Determines whether a given positive integer is a happy number. Args: n (int): A positive integer. Returns: bool: True if n is a happy number, False otherwise. def getNext(number): return sum(int(char) ** 2 for char in str(number)) slow = n fast = getNext(n) while fast != 1 and slow != fast: slow = getNext(slow) fast = getNext(getNext(fast)) return fast == 1"},{"question":"In a logging system, each log entry consists of a timestamp and a message. However, sometimes the log entries might get mixed up and need to be sorted by timestamp for accurate interpretation. Your task is to implement a function that takes a list of log entries, each represented by a tuple (timestamp, message), and returns the log entries sorted by their timestamps. A timestamp is an integer, and a message is a string. Assume all timestamps are unique. Write a function `sort_logs` that takes a list of tuples `(timestamp, message)` as input and returns a new list of log entries sorted by timestamp. The function signature should be: ```python def sort_logs(logs: List[Tuple[int, str]]) -> List[Tuple[int, str]]: ``` **Example:** ```python logs = [(3, \\"Error Detected\\"), (1, \\"System Boot\\"), (2, \\"User Login\\"), (4, \\"System Shutdown\\")] sorted_logs = sort_logs(logs) print(sorted_logs) ``` **Output:** ``` [(1, \\"System Boot\\"), (2, \\"User Login\\"), (3, \\"Error Detected\\"), (4, \\"System Shutdown\\")] ``` **Constraints:** - The list `logs` contains between 1 and 10^6 log entries. - Timestamps are unique and range from 1 to 10^18. - The message is a string of length between 1 and 100 characters.","solution":"from typing import List, Tuple def sort_logs(logs: List[Tuple[int, str]]) -> List[Tuple[int, str]]: Sorts a list of log entries by their timestamp. :param logs: List of tuples where each tuple contains a timestamp and a log message. :return: List of log entries sorted by timestamp. return sorted(logs, key=lambda x: x[0])"},{"question":"You are given a grid of size `n x m` where each cell contains a value representing the height of the terrain at that point. The terrain is described by an `n x m` matrix of integers. You want to plant trees such that each tree has a scenic view of the valley. A tree is considered to have a scenic view if the height of the terrain decreases in all four directions - left, right, up, and down - from the location of the tree. Write a function to find the number of valid locations where a tree with a scenic view can be planted. Function Signature: ```python def count_scenic_tree_locations(grid: List[List[int]]) -> int: ``` # Input - The first line contains two integers `n` and `m`, which represent the number of rows and columns in the grid. - The next `n` lines each contain `m` integers representing the grid where each integer is the height of the terrain at that position. # Output - Output a single integer - the number of valid tree locations. # Constraints - 1 ≤ n, m ≤ 1000 - 0 ≤ grid[i][j] ≤ 10^9 # Example ```python assert count_scenic_tree_locations([ [5, 3, 4, 1], [3, 2, 1, 6], [4, 1, 2, 4], [1, 6, 4, 3] ]) == 2 ``` **Explanation:** - Valid scenic tree locations (0-based index) are at (1, 1) and (2, 1).","solution":"from typing import List def count_scenic_tree_locations(grid: List[List[int]]) -> int: n = len(grid) m = len(grid[0]) count = 0 for i in range(1, n-1): for j in range(1, m-1): if (grid[i][j] < grid[i-1][j] and grid[i][j] < grid[i+1][j] and grid[i][j] < grid[i][j-1] and grid[i][j] < grid[i][j+1]): count += 1 return count"},{"question":"You are given an array of integers. An operation consists of choosing any subarray of the array and sorting it in non-decreasing order. Your task is to determine the minimum number of operations required to sort the entire array in non-decreasing order. Input The first line contains an integer t (1 le t le 100), the number of test cases. Each test case consists of two lines. The first line contains an integer n (1 le n le 10^5), the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9), the elements of the array. Output For each test case, output a single integer, the minimum number of operations required to sort the array in non-decreasing order. Example Input ``` 2 5 5 4 3 2 1 6 1 3 2 6 4 5 ``` Output ``` 1 1 ``` Explanation In the first test case, we can select the entire array [5, 4, 3, 2, 1] as a subarray and sort it in one operation to get [1, 2, 3, 4, 5]. In the second test case, we can select the subarray [3, 2, 6, 4, 5], sort it in one operation to get [1, 2, 3, 4, 5, 6].","solution":"def min_operations_to_sort(t, test_cases): results = [] for case in test_cases: n, arr = case if arr == sorted(arr): results.append(0) else: results.append(1) return results"},{"question":"You are given a string consisting of lowercase letters. Rearrange the characters of the string so that no two adjacent characters are the same. If there are multiple possible rearrangements, return any of them. If it\'s impossible to rearrange the string in such a way, return an empty string. # Input - A single line containing a string `s` of length `n` (1 leq n leq 50000). # Output - A single line containing the rearranged string such that no two adjacent characters are the same, or an empty string if such arrangement is impossible. # Example Input ``` aaabbc ``` Output ``` ababac ```","solution":"from collections import Counter import heapq def rearrange_string(s): count = Counter(s) max_heap = [] for char, freq in count.items(): heapq.heappush(max_heap, (-freq, char)) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char rearranged_string = \'\'.join(result) return rearranged_string if len(rearranged_string) == len(s) else \'\'"},{"question":"Alice loves playing with numbers and patterns. One of her favorite pastimes is creating and exploring Pascal\'s Triangle. Pascal\'s Triangle is an array of numbers arranged in a triangular fashion, where each number is the sum of the two directly above it in the previous row. The first few rows of Pascal’s Triangle are: ``` 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 ``` Given an integer `n`, write a function `generate_pascals_triangle` to generate the first `n` rows of Pascal\'s Triangle. The function should take an integer `n` as an argument and return a list of lists, where each inner list represents a row of Pascal\'s Triangle. # Input: - An integer `n` (1 ≤ n ≤ 30), representing the number of rows of Pascal\'s Triangle to generate. # Output: - A list of lists, where each inner list contains the elements of a row in Pascal\'s Triangle. # Example: ```python generate_pascals_triangle(5) ``` Expected output: ```python [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` # Constraints: - The solution should be optimized to handle the upper limit within a reasonable time frame. - Ensure that the function handles edge cases like `n = 1` gracefully. # Notes: - The function should be implemented using basic looping constructs and arithmetic operations. - Do not use any library functions specifically designed to generate Pascal\'s Triangle. # Solution Template: ```python def generate_pascals_triangle(n): triangle = [] for row_num in range(n): row = [1] * (row_num + 1) for j in range(1, row_num): row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j] triangle.append(row) return triangle ```","solution":"def generate_pascals_triangle(n): Generate the first n rows of Pascal\'s Triangle. Parameters: n (int): number of rows to generate Returns: List[List[int]]: the first n rows of Pascal\'s Triangle triangle = [] for row_num in range(n): row = [1] * (row_num + 1) for j in range(1, row_num): row[j] = triangle[row_num - 1][j - 1] + triangle[row_num - 1][j] triangle.append(row) return triangle"},{"question":"A popular online game\'s leaderboard keeps track of the top players\' scores. Each player can end up with a unique score after playing multiple rounds, and the leaderboard shows the rank of each player accordingly. The rank is calculated based on the scores such that the player with the highest score gets the highest rank (rank 1), the second highest score gets rank 2, and so on. If two players have the same score, they share the same rank. Given a list of players with their scores, you need to compute the rank of each player. Write a function `compute_ranks(players_scores)` that takes a list of tuples, where each tuple consists of a player\'s name and their score, and returns a list of tuples where each tuple consists of a player\'s name and their rank. # Input - `players_scores`: A list of tuples where each tuple contains a string (player\'s name) and an integer (player\'s score). (1 ≤ len(players_scores) ≤ 1000, 1 ≤ score ≤ 1000) # Output - A list of tuples where each tuple contains the player\'s name and their rank. # Example ```python players_scores = [(\\"Alice\\", 50), (\\"Bob\\", 75), (\\"Charlie\\", 50), (\\"Dave\\", 100)] result = compute_ranks(players_scores) print(result) # Output: [(\'Dave\', 1), (\'Bob\', 2), (\'Alice\', 3), (\'Charlie\', 3)] ``` # Note In the example, player \\"Dave\\" has the highest score, so he gets rank 1. \\"Bob\\" has the second highest score, so he gets rank 2. Both \\"Alice\\" and \\"Charlie\\" have the same score and thus share the same rank 3. Ranks are assigned in descending order of scores, and players with the same scores share the same rank. The list of player names and ranks should be returned in the same order as the input list.","solution":"def compute_ranks(players_scores): Computes the rank of each player based on their score. Args: players_scores (list of tuples): Each tuple contains a player\'s name and their score. Returns: list of tuples: Each tuple contains a player\'s name and their rank. # Sorting players based on scores in descending order with player names as a secondary sort key. sorted_scores = sorted(players_scores, key=lambda x: (-x[1], x[0])) ranks = {} current_rank = 1 last_score = None for index, (name, score) in enumerate(sorted_scores): if last_score is None or score != last_score: ranks[score] = current_rank last_score = score current_rank += 1 return [(name, ranks[score]) for name, score in players_scores]"},{"question":"In a parallel universe, people use a unique measurement system called \\"PLANIC.\\" Measurements in PLANIC can be directly converted to standard metric units through a series of custom-defined linear equations. You have been given a series of conversion pairs between PLANIC units and metric units. Your task is to write a function that, given a new measurement in PLANIC units, converts it into the corresponding metric units using the known conversion pairs. The first line of input contains a single integer n (1 ≤ n ≤ 100) — the number of conversion pairs. Each of the next n lines contain two floats p_i and m_i — the measurement in PLANIC units and the corresponding measurement in metric units respectively. The last line of input contains a single float p_new — the new measurement in PLANIC units that needs to be converted to metric units. The output should be the converted value in metric units with a precision of 6 decimal places. You may assume that the given conversion pairs represent a linear relationship; in other words, there exists a and b such that for each pair (p_i, m_i), m_i = a * p_i + b. Here is the structure of the input and the expected output: Input: ``` n p1 m1 p2 m2 ... pn mn p_new ``` Output: ``` m_new ``` Example: Input: ``` 3 1.0 2.5 2.0 4.5 3.0 6.5 4.0 ``` Output: ``` 8.500000 ``` Write a function that reads this input, computes the conversion, and outputs the converted measurement in metric units.","solution":"def convert_planic_to_metric(conversion_pairs, p_new): Converts a new measurement from PLANIC units to metric units using given conversion pairs. Parameters: conversion_pairs (list of tuples): A list of (p_i, m_i) pairs representing the conversion pairs. p_new (float): The new measurement in PLANIC units to be converted. Returns: float: The converted measurement in metric units. n = len(conversion_pairs) # Summation for calculating a and b sum_p = sum([pair[0] for pair in conversion_pairs]) sum_m = sum([pair[1] for pair in conversion_pairs]) sum_p2 = sum([pair[0] ** 2 for pair in conversion_pairs]) sum_pm = sum([pair[0] * pair[1] for pair in conversion_pairs]) # Calculating slope (a) and intercept (b) of the linear equation m = a * p + b a = (n * sum_pm - sum_p * sum_m) / (n * sum_p2 - sum_p ** 2) b = (sum_m - a * sum_p) / n # Converting the new PLANIC measurement to metric units m_new = a * p_new + b return round(m_new, 6)"},{"question":"You are managing a network of computers in an office. Each computer is assigned a unique ID starting from 1 to n. Every computer is connected to some other computers forming a network. The network can be represented as an undirected graph where each computer is a node, and each connection between two computers is an edge. To ensure the network\'s security, you need to periodically perform checks to see if all computers are still connected, directly or indirectly. In other words, you want to determine whether the graph is connected, i.e., there is a path between any two nodes in the network. Write a function `is_network_connected(n, connections)` that takes in two arguments: 1. `n`: an integer representing the number of computers. 2. `connections`: a list of tuples where each tuple `(a, b)` represents a direct connection between computers `a` and `b`. The function should return a boolean value: `True` if the network is connected, and `False` otherwise. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100), the number of computers. - The second line contains an integer `m` (0 ≤ m ≤ 4950), the number of connections. - Each of the next `m` lines contains two integers `a` and `b` (1 ≤ a, b ≤ n), representing a direct connection between computers `a` and `b`. # Output - A single boolean value `True` or `False`. # Example Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` True ``` Input ``` 4 2 1 2 3 4 ``` Output ``` False ``` # Note In the first example, there is a path connecting all computers: 1-2-3-4, so the network is connected. In the second example, there are two separate sets of connected computers (1-2) and (3-4), so the network is not connected.","solution":"def is_network_connected(n, connections): from collections import defaultdict, deque if n <= 1: return True adj_list = defaultdict(list) for a, b in connections: adj_list[a].append(b) adj_list[b].append(a) def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in adj_list[node]: if neighbor not in visited: queue.append(neighbor) return visited visited_nodes = bfs(1) return len(visited_nodes) == n"},{"question":"You are given an array of n integers, where each integer represents the height of a building. The builders are asked to paint the buildings such that each building receives a unique color and no two adjacent buildings have the same color. Determine the minimum number of colors needed to achieve this. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the buildings. Output a single integer — the minimum number of colors needed. Note: Two buildings are considered adjacent if they are next to each other in the given array.","solution":"def min_colors(n, heights): Returns the minimum number of colors required such that no two adjacent buildings have the same color. Parameters: n (int): Number of buildings heights (list): List of building heights Returns: int: Minimum number of colors needed # For an array with only one building, only one color is needed. if n == 1: return 1 # Initialize the minimum number of colors. min_colors_needed = 1 # Loop through the heights to compare adjacent buildings. for i in range(1, n): if heights[i] != heights[i - 1]: # Increment the number of colors whenever there\'s a change in height. min_colors_needed += 1 return min_colors_needed"},{"question":"In a distant city, there is a beautiful rectangular garden with n rows and m columns. Each cell of the garden is filled either with a flower or with grass. The garden is represented as a 2D matrix of characters \'F\' for flowers and \'G\' for grass. The city council wants to preserve rectangular subgardens that only contain flowers. They need you to determine the area of the largest rectangular subgarden that contains only flowers. Given the dimensions of the garden and the garden\'s layout, provide the maximum area of a rectangular subgarden composed entirely of flowers. The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000), representing the number of rows and columns of the garden respectively. The next n lines contain m characters each (\'F\' or \'G\'), representing the garden\'s layout. Print a single integer representing the maximum area of a rectangular subgarden consisting solely of flowers. Example: Input: 4 5 FGFFF FFFFF FFFGG FFFFG Output: 9","solution":"def max_rectangle_of_flowers(n, m, garden): Returns the maximum area of a rectangular subgarden containing only \'F\'. if n == 0 or m == 0: return 0 max_area = 0 heights = [0] * m for row in garden: for j in range(m): if row[j] == \'F\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largest_rectangle_area(heights)) return max_area def largest_rectangle_area(heights): Helper function to calculate the largest rectangle area in a list of heights. stack = [] max_area = 0 heights.append(0) # Sentinel value to make sure to pop all elements from the stack for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: H = heights[stack.pop()] W = i if not stack else i - stack[-1] - 1 max_area = max(max_area, H * W) stack.append(i) heights.pop() return max_area"},{"question":"You are given a list of integers representing the energy levels of various devices. Each device has an initial energy level, and it consumes energy over time according to a specific pattern. If a device\'s energy level drops to zero or below, the device stops functioning. You can perform an operation where you transfer a unit of energy from one device to another. Your goal is to ensure that all devices continue to function for as long as possible. Write a function `max_operational_time` that takes a list of integers as input, where each integer represents the initial energy level of a device. The function should return the maximum possible time during which all devices can remain operational without any device\'s energy level dropping to zero or below. Each device consumes exactly one unit of energy per time unit. The transfer operation can be performed at any time between the devices. The objective is to balance the energy levels to maximize the operational time of all devices. # Input - A list of integers `energy` representing the initial energy levels of the devices, where 1 ≤ len(energy) ≤ 1000 and 1 ≤ energy[i] ≤ 10^6. # Output - An integer representing the maximum possible operational time for all devices. # Example ```python def max_operational_time(energy): # Your code here # Example 1 energy = [4, 7, 5] print(max_operational_time(energy)) # Output: 5 # Example 2 energy = [1, 1, 1] print(max_operational_time(energy)) # Output: 1 ```","solution":"def max_operational_time(energy): Returns the maximum possible time during which all devices can remain operational. Parameters: energy (list): A list of integers representing initial energy levels of the devices. Returns: int: The maximum operational time. total_energy = sum(energy) num_devices = len(energy) # The maximum time is limited by either the average energy or the total energy divided by the number of devices. return total_energy // num_devices"},{"question":"You are given an orderless deck of 52 playing cards. Each card has a rank and a suit. Ranks are the numbers 2 to 10 and the face cards Jack (J), Queen (Q), King (K), and Ace (A). The suits are Hearts (H), Diamonds (D), Clubs (C), and Spades (S). Each card in the deck is represented as a tuple (rank, suit). For example, the Ace of Spades is represented as (\'A\', \'S\') and the 10 of Hearts as (\'10\', \'H\'). You need to write a function that simulates drawing cards from the deck. The function should accept two arguments: a list of cards representing the deck, and an integer n representing the number of cards to draw. The function should randomly (uniformly) select n cards from the deck without replacement and return them. If n is greater than the number of cards in the deck, return all the cards in the deck in random order. # Input - A list of tuples where each tuple is a string pair (rank, suit) representing a card. - An integer n (1 ≤ n ≤ 52). # Output - A list of n tuples, each representing a drawn card. # Examples ``` deck = [(\'2\', \'H\'), (\'3\', \'H\'), (\'4\', \'H\'), ..., (\'A\', \'S\')] n = 5 Expected output: [(\'8\', \'D\'), (\'K\', \'H\'), (\'3\', \'S\'), (\'10\', \'C\'), (\'6\', \'H\')] (or any other combination of 5 cards from the deck) deck = [(\'2\', \'H\'), (\'3\', \'H\')] n = 3 Expected output: [(\'2\', \'H\'), (\'3\', \'H\')] (if n is more than the number of cards in the deck, return all cards in random order) ``` # Constraints - The input deck will always have distinct cards and a maximum length of 52. - The suits will be one of \'H\', \'D\', \'C\', \'S\'. - The ranks will be one of \'2\', \'3\', \'4\', ..., \'10\', \'J\', \'Q\', \'K\', \'A\'. - The function should handle drawing cards randomly without replacement. # Note Consider using the Python `random` library to implement the functionality of drawing random cards.","solution":"import random def draw_cards(deck, n): Draw n random cards from the deck without replacement. Parameters: deck (list of tuples): A list of tuples representing the deck of cards, where each tuple is (rank, suit). n (int): The number of cards to draw. Returns: list of tuples: A list of n randomly drawn cards. if n > len(deck): n = len(deck) return random.sample(deck, n)"},{"question":"Twilight Sparkle is exploring different ways to celebrate the completion of the Summer Sun Celebration preparations. She has n different activities planned, and she wants to find the best sequence to complete them. Each activity is represented by a node and a directed edge between node i and node j signifies that activity i must be completed before activity j. However, some activities can be completed in parallel. Given the list of prerequisites for these activities, can you help Twilight Sparkle determine one valid sequence in which she can follow her plan? If it is not possible to complete all activities due to a cycle in the prerequisites, return -1. If there are multiple sequences, return any valid one. The input consists of two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) on the first line — the number of activities and the number of prerequisites. Each of the following m lines contains two integers ui, vi (1 ≤ ui, vi ≤ n), indicating that activity ui must be completed before activity vi. Output one possible sequence of integers indicating the order in which the activities should be completed. If no such sequence exists, output -1.","solution":"from collections import defaultdict, deque def find_activity_order(n, m, prerequisites): Determines the sequence of activities satisfying the given prerequisites. Args: n (int): The number of activities. m (int): The number of prerequisites. prerequisites (list of tuples): List of prerequisite pairs (ui, vi). Returns: list or int: A valid sequence of activities or -1 if no valid sequence exists. # Build the graph and in-degree list graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n+1)} for u, v in prerequisites: graph[u].append(v) in_degree[v] += 1 # Initialize the deque with nodes having zero in-degree zero_in_degree = deque([node for node in in_degree if in_degree[node] == 0]) order = [] while zero_in_degree: node = zero_in_degree.popleft() order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) # If the order includes all nodes, we return the order if len(order) == n: return order else: return -1"},{"question":"You are given two strings A and B, both composed of lowercase Latin letters. Your task is to determine the length of the longest subsequence that is common to both strings. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. For example, given the strings \\"abcdef\\" and \\"acdf\\", the longest common subsequence is \\"acdf\\" with a length of 4. Input Format: The first line contains the string A (1 le |A| le 1000). The second line contains the string B (1 le |B| le 1000). Output Format: Print one integer — the length of the longest subsequence that is common to both strings. Example 1: Input: ``` abcde ace ``` Output: ``` 3 ``` Explanation: The longest common subsequence is \\"ace\\" and its length is 3. Example 2: Input: ``` abc abc ``` Output: ``` 3 ``` Explanation: The longest common subsequence is \\"abc\\" and its length is 3. Example 3: Input: ``` abc def ``` Output: ``` 0 ``` Explanation: There is no common subsequence, hence the output is 0.","solution":"def longest_common_subsequence(A, B): Returns the length of the longest subsequence that is common to both strings A and B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp table for i in range(m): for j in range(n): if A[i] == B[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) return dp[m][n]"},{"question":"Chef loves to prepare different dishes using various ingredients. One day, he decided to make a special mixed salad using n different types of vegetables. Chef likes his salad to have different percentages of each vegetable, calculated based on their weights. Given the weights and the percentage of each vegetable type in relation to the total weight, determine what fraction (in percent) of the total weight each vegetable contributes to the salad. The first input line contains a single integer n (1 ≤ n ≤ 100) — the number of vegetables Chef uses in the salad. The second line contains n integers wi (1 ≤ wi ≤ 1000) — the weight of the i-th vegetable in grams. The third line contains n integers pi (0 ≤ pi ≤ 100) — the percentage of the total weight that i-th vegetable contributes to the salad. The numbers are separated by a space. Print the actual weight (in grams) of each vegetable in the salad in separate lines. The answer will be considered correct if the absolute or relative error does not exceed 10^(-4). Note to the sample: let\'s assume that Chef uses the given weights and percentages to mix the salad. The actual weight of each vegetable can be calculated based on these percentages to accurately represent their contribution to the total weight of the salad.","solution":"def calculate_actual_weights(n, weights, percentages): Returns the actual weights of each vegetable in grams based on given weights and their percentages. Parameters: n (int): The number of vegetables. weights (list of int): List of weights of the vegetables. percentages (list of int): List of percentages each vegetable contributes to the total weight. Returns: list of float: The actual weight of each vegetable in grams calculated based on the desired percentages. total_weight = sum(weights) actual_weights = [(total_weight * (p / 100)) for p in percentages] return actual_weights"},{"question":"On the competitive programming platform CodeCook, a special kind of problem involves evaluating sequences. You are now tasked with creating a program that can handle these sequences as described below. Given an array of integers a of length n and an integer m, your program needs to fill another array b of length m with integers based on the following rules: 1. If the number of elements with the same value in a is greater than or equal to m, fill the value b_i with the integer, repeating it m times. 2. Otherwise, fill the array b with modulo values. More formally, for an array a of length n and an integer m, construct the array b of length m as: - If there exists an integer x where the number of occurrences of x in a is greater than or equal to m, then set all elements of b as x. - Otherwise, set b_i = (a[i % n]) % m for 0 le i < m. Write a program to construct the array b for each test case. The first line contains a single integer t (1 le t le 10^4) — the number of test cases. The first line of the description of each test case contains two integers n and m (1 le n, m le 10^5) — the length of the array a and the length of the array b. The second line of the description of each test case contains n integers a_1, ldots, a_n (1 le a_i le 10^9) — the elements of the array a. It is guaranteed that the sum of n for all test cases does not exceed 10^6. For each test case, print the array b. For example, for a test case where n=5 and m=4 with a=[1, 2, 3, 2, 1]: - Since there is no element that appears at least m times, calculate b as [(1%4), (2%4), (3%4), (2%4)] = [1, 2, 3, 2].","solution":"def construct_b(n, m, a): from collections import Counter # Count the frequency of each value in array a counter = Counter(a) # Check if there is an element with frequency greater than or equal to m for key, value in counter.items(): if value >= m: return [key] * m # Otherwise, construct b with (a[i % n]) % m for 0 <= i < m b = [(a[i % n]) % m for i in range(m)] return b def solve(test_cases): results = [] for n, m, a in test_cases: results.append(construct_b(n, m, a)) return results"},{"question":"Little Y has m distinct integers: q1, q2, ..., qm. He wants to find a way to partition these integers into two groups X and Y such that the sum of elements in group X is equal to the sum of elements in group Y. Help Little Y determine if it is possible to make such a partition. The first line contains an integer m (1 ≤ m ≤ 100). The second line contains m space-separated distinct integers q1, q2, ..., qm (1 ≤ qi ≤ 10^9). If it is possible to partition the integers into two groups with equal sums, print \\"YES\\" on the first line. Then print m integers: c1, c2, ..., cm (ci equals either 0 or 1), describing the partition. If ci equals 0, then qi belongs to group X; otherwise, it belongs to group Y. If it is impossible to partition the integers into two groups with equal sums, print \\"NO\\" (without the quotes).","solution":"def can_partition(m, q): total_sum = sum(q) # If the total sum is odd, it cannot be partitioned into two equal sums if total_sum % 2 != 0: return \\"NO\\" target_sum = total_sum // 2 dp = [False] * (target_sum + 1) dp[0] = True for num in q: for j in range(target_sum, num - 1, -1): if dp[j - num]: dp[j] = True if not dp[target_sum]: return \\"NO\\" # Backtrack to find the partition result = [0] * m remaining_sum = target_sum for i in range(m-1, -1, -1): if remaining_sum >= q[i] and dp[remaining_sum - q[i]]: result[i] = 1 remaining_sum -= q[i] return \\"YES\\", result"},{"question":"In a town called Nara, there is a unique way to manage the water supply for its residents. The town has a large water tank, and water from this tank is supplied to its residents through a series of connected pipes. Each pipe has a specific capacity, which represents the maximum amount of water it can transport per hour. The residents want to know the maximum amount of water that can be supplied from the tank to their houses. The town\'s water distribution network is represented as a directed graph with `n` nodes and `m` edges, where nodes represent junctions (including the water tank and the houses), and edges represent the pipes connecting these junctions. Node `1` is the water tank, and node `n` is the house that needs to receive the water. Each of the `m` edges is described by three integers `u`, `v`, and `c`, indicating there is a pipe from node `u` to node `v` with capacity `c`. Write a program that determines the maximum amount of water that can be delivered from node `1` to node `n` considering the capacities and structure of the pipes. # Input - The first line contains two integers `n` and `m` (2 leq n leq 500, 1 leq m leq 10000), representing the number of nodes and the number of edges respectively. - The next `m` lines each contain three integers `u`, `v`, and `c` (1 leq u, v leq n, 1 leq c leq 1000). These values describe a directed edge from node `u` to node `v` with capacity `c`. # Output - Output a single integer representing the maximum amount of water that can be delivered from node `1` to node `n`. # Example Input ``` 5 7 1 2 10 1 3 10 2 4 25 3 4 15 2 3 10 4 5 10 3 5 10 ``` Output ``` 20 ``` # Explanation In this example, the maximum flow from the water tank (node `1`) to the house (node `5`) is `20`. The possible paths are `1 -> 2 -> 4 -> 5` and `1 -> 3 -> 5` ensuring the maximum flow considering the capacity constraints. You may assume that the graph does not contain multiple edges between the same pair of nodes in the same direction and that there\'s always at least one path from the tank to the house.","solution":"from collections import defaultdict, deque def bfs(capacity, source, sink, parent): visited = set() queue = deque([source]) visited.add(source) while queue: u = queue.popleft() for v in capacity[u]: if v not in visited and capacity[u][v] > 0: queue.append(v) visited.add(v) parent[v] = u if v == sink: return True return False def edmonds_karp(capacity, source, sink): parent = {} max_flow = 0 while bfs(capacity, source, sink, parent): path_flow = float(\'Inf\') s = sink while s != source: path_flow = min(path_flow, capacity[parent[s]][s]) s = parent[s] v = sink while v != source: u = parent[v] capacity[u][v] -= path_flow capacity[v][u] += path_flow v = parent[v] max_flow += path_flow return max_flow def max_water_flow(n, m, edges): capacity = defaultdict(lambda: defaultdict(int)) for u, v, c in edges: capacity[u][v] += c return edmonds_karp(capacity, 1, n)"},{"question":"Given a matrix of size n x m consisting of only 0s and 1s. You are also provided with two integers a and b, where a and b denote the number of rows and columns, respectively. Your task is to check if there exists a submatrix of size a x b in the given matrix that contains only 1s. Write a function that takes: - an integer n (number of rows) and m (number of columns) - a 2D list of integers representing the matrix - integers a and b Return \\"YES\\" if there exists a submatrix of size a x b that contains only 1s. Otherwise, return \\"NO\\". Example: ``` Input: n = 4, m = 5 matrix = [[1, 0, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 1, 1, 0], [1, 1, 1, 1, 1]] a = 2, b = 2 Output: YES Explanation: A 2x2 submatrix of all 1s exists at position (2,2) to (3,3) in the given matrix. ``` Example: ``` Input: n = 3, m = 3 matrix = [[1, 0, 1], [0, 1, 0], [1, 0, 1]] a = 2, b = 2 Output: NO Explanation: There is no 2x2 submatrix of all 1s in the given matrix. ``` Function Signature: ```python def find_all_ones_submatrix(n: int, m: int, matrix: List[List[int]], a: int, b: int) -> str: ```","solution":"from typing import List def find_all_ones_submatrix(n: int, m: int, matrix: List[List[int]], a: int, b: int) -> str: # Iterate through the possible starting points of the submatrix for i in range(n - a + 1): for j in range(m - b + 1): # Check if the submatrix starting at (i, j) contains only 1s all_ones = True for k in range(a): for l in range(b): if matrix[i + k][j + l] != 1: all_ones = False break if not all_ones: break if all_ones: return \\"YES\\" return \\"NO\\""},{"question":"The Union of Social Coders (USC) decided to create a social network for programmers. Each programmer can be identified by a unique integer ID starting from 1. The programmers form a hierarchical structure based on direct mentorship where one programmer can mentor multiple others, but each programmer can have only one direct mentor. This structure forms a tree with the founder of USC being the root of the tree. The USC wants to implement a feature that for any two programmers in the network, outputs their least common mentor (LCM). The least common mentor of two programmers a and b is defined as the lowest (in terms of hierarchy level) programmer who is a mentor to both a and b, either direct or indirect. The USC would like you to write a program that processes multiple queries on the network to find the LCM for given pairs of programmers. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of programmers. The next n-1 lines describe the mentorship relations. Each line contains two integers u and v (1 ≤ u, v ≤ n), where v is directly mentored by u. The following line contains an integer q (1 ≤ q ≤ 10^5) — the number of queries. Each of the next q lines contains two integers a and b (1 ≤ a, b ≤ n) — the IDs of two programmers for which the LCM needs to be determined. Output q lines, each containing the LCM of the corresponding programmers. Example Input: 5 1 2 1 3 3 4 3 5 3 2 4 4 5 2 3 Example Output: 1 3 1 The hierarchical structure is: ``` 1 ├── 2 ├── 3 │ ├── 4 │ └── 5 ``` The LCM for (2, 4) is 1, (4, 5) is 3, and (2, 3) is 1.","solution":"from collections import defaultdict, deque def preprocess_lca(n, edges): # Initialize adjacency list, parents and depth adj_list = defaultdict(list) parent = [0] * (n + 1) depth = [0] * (n + 1) # Building adjacency list from edges for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) # BFS to determine parent and depth def bfs(start): queue = deque([start]) visited = set() visited.add(start) while queue: node = queue.popleft() for neighbor in adj_list[node]: if neighbor not in visited: visited.add(neighbor) parent[neighbor] = node depth[neighbor] = depth[node] + 1 queue.append(neighbor) # Start BFS from root (considering root is 1) bfs(1) return parent, depth def find_lca(u, v, parent, depth): # Lift u and v to the same depth while depth[u] > depth[v]: u = parent[u] while depth[v] > depth[u]: v = parent[v] # Lift u and v together until they meet at the same ancestor while u != v: u = parent[u] v = parent[v] return u def usc_least_common_mentor(n, edges, queries): parent, depth = preprocess_lca(n, edges) results = [] for a, b in queries: results.append(find_lca(a, b, parent, depth)) return results # Example usage n = 5 edges = [(1, 2), (1, 3), (3, 4), (3, 5)] queries = [(2, 4), (4, 5), (2, 3)] print(usc_least_common_mentor(n, edges, queries)) # Output: [1, 3, 1]"},{"question":"You are given an array of integers, where each integer represents the height of a person. You have k ladders, and you need to determine the maximum possible height difference you can overcome between two people standing next to each other in a line, using the given ladders optimally. Each ladder can be used to overcome any height difference. For example, if two people have a height difference of 5, you can use a ladder to make them stand level. Your goal is to minimize the maximum height difference after using the ladders. Write a function that takes in the list of heights and the integer k, and returns the minimized maximum height difference. The function signature should be: ```python def minimize_max_diff(heights: List[int], k: int) -> int: pass ``` # Input: - heights: a list of integers representing the heights of people `1 ≤ len(heights) ≤ 10^4, 1 ≤ heights[i] ≤ 10^9`. - k: an integer representing the number of ladders `0 ≤ k ≤ len(heights) - 1`. # Output: - An integer which is the minimized maximum height difference after optimally using the ladders. # Example: ```python heights = [1, 5, 9, 3, 10] k = 2 print(minimize_max_diff(heights, k)) # Output: 4 ``` # Explanation: In the given example, the heights array is [1, 5, 9, 3, 10]. - Without any ladders, the height differences are [4, 4, 6, 7] with a maximum difference of 7. - After optimally using the two ladders: - Use one ladder between 9 and 3, level the height to make the difference 0, now the array looks like [1, 5, 9, 9, 10] - Use the second ladder between 1 and 5 or 3 and 10, to level the next most significant difference. - The maximum height difference that remains is 4. # Note: - The function should handle edge cases and large inputs efficiently. - Consider using a priority queue or binary search to optimize the solution.","solution":"from typing import List import heapq def minimize_max_diff(heights: List[int], k: int) -> int: if len(heights) == 1: return 0 # Compute height differences between each consecutive person diff = [heights[i + 1] - heights[i] for i in range(len(heights) - 1)] # Use a max-heap for the k largest differences # However, since heapq in python only supports min-heap, # we use negative values to have a max-heap effect max_heap = [-d for d in diff] heapq.heapify(max_heap) # Remove the k largest differences by using ladders for _ in range(k): if max_heap: heapq.heappop(max_heap) # The remaining max difference will be the answer return -max_heap[0] if max_heap else 0"},{"question":"Given a matrix of size `m x n`, return all elements of the matrix in spiral order starting from the top-left corner of the matrix. # Function Signature ```python def spiralOrder(matrix: List[List[int]]) -> List[int]: ``` # Input - A matrix `matrix` of size `m x n` containing integers. # Output - A list of integers representing the elements of the matrix in spiral order. # Examples ```python spiralOrder([ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]) # returns [1, 2, 3, 6, 9, 8, 7, 4, 5] spiralOrder([ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12] ]) # returns [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7] ``` # Constraints - `m == len(matrix)` - `n == len(matrix[0])` - `0 <= m, n <= 10^2` - `-100 <= matrix[i][j] <= 100`","solution":"from typing import List def spiralOrder(matrix: List[List[int]]) -> List[int]: Returns all elements of the matrix in a spiral order starting from the top-left corner. result = [] while matrix: # Add the first row result += matrix.pop(0) # Add the last element of each remaining row if matrix and matrix[0]: for row in matrix: result.append(row.pop()) # Add the last row in reverse order if matrix: result += matrix.pop()[::-1] # Add the first element of each remaining row in reverse order if matrix and matrix[0]: for row in matrix[::-1]: result.append(row.pop(0)) return result"},{"question":"You work for a logistics company that needs to optimize the delivery route of a truck that has to visit a set of delivery points scattered around a city. The truck starts at the company\'s central depot, and the goal is to visit each delivery point exactly once and return to the central depot while minimizing the total distance traveled. You will be provided with the coordinates of the central depot and the delivery points in a JSON file. Your task is to write code to find the shortest possible route that visits all delivery points and returns to the depot, known as the Traveling Salesman Problem (TSP). The JSON file will contain an object with two keys: - \\"Depot\\": an array with 2 elements representing the coordinates [x, y] of the depot. - \\"DeliveryPoints\\": an array of arrays, where each inner array has 2 elements representing the coordinates [x, y] of a delivery point. Example of the input JSON file: ```json { \\"Depot\\": [0, 0], \\"DeliveryPoints\\": [[1, 2], [3, 4], [5, 1]] } ``` Your code should read the input JSON file, solve the TSP, and return the order of visiting points starting and ending at the depot along with the minimum total distance traveled. Your code should have the following signature: ```python def find_optimal_route(filepath: str) -> dict: # Implement the function here ``` The function should read the input JSON file from the provided `filepath` and return a dictionary with: - \\"Order\\": an array representing the order of visiting points, starting and ending at the depot, where indices correspond to the positions in the input \\"DeliveryPoints\\" list. - \\"TotalDistance\\": the minimum total distance traveled. Example output for the given input might look like this: ```json { \\"Order\\": [0, 2, 1, 3], \\"TotalDistance\\": 12.34 } ``` Note: The index 0 represents the depot, and indices 1, 2, and 3 represent the three delivery points in the order they were initially presented in the \\"DeliveryPoints\\" array. The total distance should be rounded to two decimal places.","solution":"import json import itertools import math def calculate_distance(point1, point2): Calculate Euclidean distance between two points. return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) def calculate_route_distance(route, points): Calculate the total distance of the given route. total_distance = 0 for i in range(len(route) - 1): total_distance += calculate_distance(points[route[i]], points[route[i + 1]]) return total_distance def find_optimal_route(filepath: str) -> dict: with open(filepath, \'r\') as file: data = json.load(file) depot = data[\'Depot\'] delivery_points = data[\'DeliveryPoints\'] points = [depot] + delivery_points # Generate all permutations of delivery points n = len(delivery_points) possible_routes = itertools.permutations(range(1, n+1)) min_distance = float(\'inf\') best_route = None # Check each route and find the one with the minimum distance for route in possible_routes: route = [0] + list(route) + [0] # start and end at depot distance = calculate_route_distance(route, points) if distance < min_distance: min_distance = distance best_route = route result = { \\"Order\\": best_route, \\"TotalDistance\\": round(min_distance, 2) } return result"},{"question":"In a distant land, there is a peculiar type of tree known as the \'*Sync-Trees*\'. These trees have a unique ability - each leaf in a *Sync-Tree* is associated with a distinct integer value. What\'s truly fascinating is that these trees can synchronize in a special way. If a leaf node is connected directly to another node with a higher value by an edge, the leaf node\'s value will synchronize to be the same as the higher value node\'s value via a transformation process that takes a certain amount of time. You are given a tree with `n` nodes. Each node has an integer value `vi` (1 ≤ vi ≤ 10^9). The nodes are connected by `n-1` edges with varying transformation times `ti` (1 ≤ ti ≤ 10^9). When you synchronize a node, all immediate leaf nodes connected to it will also synchronize. The task is to determine the minimum time required to synchronize all nodes in the tree such that all nodes have the same value as the node which initially had the highest value. The first line of the input contains an integer `n` (1 ≤ n ≤ 10^5), representing the number of nodes in the tree. The second line contains `n` integers representing the values `vi` of the nodes. The following `n-1` lines each contain three integers `a`, `b`, and `t` representing an edge between nodes `a` and `b` with transformation time `t`. You need to output a single integer which is the minimum time required to synchronize all nodes in the tree. Note: 1. The tree structure guarantees that there is exactly one path between any two nodes. 2. Assume nodes are 1-indexed. Input: ``` 5 1 3 3 2 5 1 2 2 1 3 4 2 4 3 2 5 1 ``` Output: ``` 10 ``` Explanation: The node with the highest value is node 5 with value 5. The minimum time to synchronize all nodes involves transforming nodes along the paths to the highest value node. For example: - Synchronize node 1 to 2: takes time 2 (new values 2, 3, 3, 2, 5) - Synchronize node 4 to 2: takes time 3 (new values 2, 3, 5, 5, 5) - Synchronize node 2 to 5: takes time 1 (new values 5, 5, 5, 5, 5) - Synchronize node 1 to 5: takes time 4 (new values 5, 5, 5, 5, 5) - Synchronize node 3 to 5: takes time 4 (new values 5, 5, 5, 5, 5) Total time = 2 + 3 + 1 + 4 = 10","solution":"import heapq from collections import defaultdict, deque def min_sync_time(n, values, edges): # Create adjacency list for the tree tree = defaultdict(list) for u, v, t in edges: tree[u].append((v, t)) tree[v].append((u, t)) # Find the node with the maximum value max_value_node = values.index(max(values)) + 1 # Initialize the priority queue for Dijkstra\'s algorithm pq = [(0, max_value_node)] visited = [False] * (n + 1) total_time = 0 while pq: time, node = heapq.heappop(pq) if visited[node]: continue visited[node] = True total_time += time for neighbor, transformation_time in tree[node]: if not visited[neighbor]: heapq.heappush(pq, (transformation_time, neighbor)) return total_time # Example input n = 5 values = [1, 3, 3, 2, 5] edges = [ (1, 2, 2), (1, 3, 4), (2, 4, 3), (2, 5, 1) ] print(min_sync_time(n, values, edges)) # Output: 10"},{"question":"Arthur loves managing his warehouse inventory and is always keen on finding ways to optimize it. He has a new shipment of items arriving, and he wants to distribute these items as evenly as possible across his warehouse shelves. Architecturally, his warehouse has several sections, each with a fixed number of shelves, and Arthur must place the items such that each shelf in a section contains the same number of items. The warehouse has m sections, and each section i contains s_i shelves. Arthur would like to know the minimum number of additional items he needs to purchase so that he can place an equal number of items on each shelf of every section, making sure no shelf is left empty. The first line of the input contains a single integer m (1 le m le 10^5) — the number of sections in the warehouse. The second line of the input contains m integers s_1, s_2, dots, s_m (1 le s_i le 10^9) — the number of shelves in each section. Print a single integer — the minimum number of additional items Arthur needs to purchase. **Example:** Input: ``` 3 4 5 6 ``` Output: ``` 3 ``` **Explanation:** For the example provided: - For section 1 with 4 shelves, Arthur needs the number of items to be a multiple of 4. - For section 2 with 5 shelves, Arthur needs the number of items to be a multiple of 5. - For section 3 with 6 shelves, Arthur needs the number of items to be a multiple of 6. Arthur must buy items in such a way that he achieves the least common multiple (LCM) of the shelves\' numbers in each section. Here LCM(4, 5, 6) = 60, so he needs his total number of items to be 60. If he already has 57 items, he needs to purchase 3 more items to reach the next multiple of 60.","solution":"from math import gcd from functools import reduce def lcm(a, b): return a * b // gcd(a, b) def min_additional_items(m, shelves): if m == 1: return 0 overall_lcm = reduce(lcm, shelves) return overall_lcm # Example usage: #m = 3 #shelves = [4, 5, 6] #print(min_additional_items(m, shelves)) # Output should be 60 in this case."},{"question":"You are given an array of integers and a target integer. Your task is to determine if there are any three integers in the array that add up to the target. If such a combination exists, return the combination as a list of the three integers. If there are multiple such combinations, return any one of them. If no such combination exists, return an empty list. Write a function `find_three_sum(nums, target)` that accepts two parameters: - `nums` (a list of integers) - `target` (an integer) The function should return a list of three integers that add up to the target, or an empty list if no such combination exists. # Input - The first line contains an integer n, the size of the array (3 ≤ n ≤ 10^4). - The second line contains n integers representing the elements of the array. - The third line contains an integer target. # Output - A list with three integers if a valid combination is found, or an empty list if no such combination exists. # Example Input ``` 6 3 0 -2 1 2 -1 1 ``` Output ``` [-2, 0, 3] ``` # Note In the given example, the three integers -2, 0, and 3 add up to 1. # Constraints - Elements of the array can be positive, negative, or zero. - There can be multiple correct answers; you only need to return one.","solution":"def find_three_sum(nums, target): Finds any three integers in the list that add up to the target. Parameters: nums (list): List of integers target (int): Target sum Returns: list: The list containing the three integers that add up to the target or an empty list if no such combination exists. nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return [nums[i], nums[left], nums[right]] elif current_sum < target: left += 1 else: right -= 1 return []"},{"question":"You are given a n x n matrix M representing distances between several points on a 2D plane. The entry M[i][j] is the Euclidean distance between point i and point j. Given the distance matrix, reconstruct the coordinates of the points in a 2D plane. The Euclidean distance between two points (x1, y1) and (x2, y2) is defined as sqrt((x2 - x1)^2 + (y2 - y1)^2). The first line contains the number n (1 ≤ n ≤ 100) — the number of points. The next n lines each contain n space-separated real numbers — the distance matrix M, where M[i][j] is the distance between point i and point j. The distances are guaranteed to form a valid distance matrix for some set of points. Output n lines, each containing two space-separated real numbers — the coordinates of points. If there are multiple solutions, you are allowed to print any of them.","solution":"import numpy as np def reconstruct_coordinates(dist_matrix): Given a squared distance matrix, reconstruct the coordinates of the points in a 2D plane. n = len(dist_matrix) # Convert distance matrix to a numpy array for ease of computation D = np.array(dist_matrix) # Centering matrix J = np.eye(n) - np.ones((n, n)) / n # Double centering the distance matrix B = -0.5 * J @ (D ** 2) @ J # Eigen decomposition eigenvalues, eigenvectors = np.linalg.eigh(B) # Sort by eigenvalue in descending order idx = np.argsort(eigenvalues)[::-1] eigenvalues = eigenvalues[idx] eigenvectors = eigenvectors[:, idx] # Select eigenvalues and eigenvectors corresponding to the 2 largest eigenvalues L = np.diag(np.sqrt(eigenvalues[:2])) V = eigenvectors[:, :2] # Coordinates X = V @ L return X.tolist() # Helper function to parse input matrix from list of strings def parse_input(n, input_strings): matrix = [] for i in range(n): row = list(map(float, input_strings[i].split())) matrix.append(row) return matrix"},{"question":"You are given an array of n positive integers, and you need to determine the median of the array. Note that the median is the middle number in a sorted, ascending list of numbers. If there is an even number of elements in the array, the median is the average of the two middle numbers. Given the number of elements n (1 ≤ n ≤ 105), followed by n positive integers (1 ≤ value ≤ 106), your task is to find the median of the array. If n is even, and the median is not an integer, return the floor value of the median. Implement a function `findMedian` which takes in an integer n and a list of integers, and returns the median. # Input - The first line contains an integer n. - The second line contains n space-separated positive integers. # Output - Print a single integer, the median of the array. # Examples Example 1: ``` Input: 5 3 1 2 5 4 Output: 3 ``` Example 2: ``` Input: 4 1 2 3 4 Output: 2 ``` Instructions 1. Read the input values. 2. Sort the array. 3. Compute the median. 4. Print the median to the console.","solution":"def findMedian(n, arr): Determines the median of the array of positive integers. :param n: int, number of elements in the array :param arr: list of int, the elements in the array :return: The median value arr.sort() mid = n // 2 if n % 2 == 1: return arr[mid] else: return (arr[mid - 1] + arr[mid]) // 2"},{"question":"You are given an undirected, unweighted graph with n vertices and m edges. Your task is to determine the number of unique simple cycles in the graph. A simple cycle is a cycle that does not repeat vertices or edges, except for starting and ending at the same vertex. A graph is described by m edges, each edge connects a pair of vertices. Your task is to count the number of unique simple cycles in the graph. The first line of the input contains two integers, n (2 le n le 10) and m (1 le m le frac{n(n-1)}{2}) — the number of vertices and edges in the graph. The following m lines each contain two integers u and v (1 le u, v le n, u neq v) — representing an edge between vertices u and v. It is guaranteed that there are no duplicate edges. Print a single integer — the number of unique simple cycles in the graph. # Example Input 1: ``` 5 6 1 2 2 3 3 4 4 1 3 1 4 5 ``` Output 1: ``` 3 ``` Explanation: The graph contains the following 3 unique simple cycles: - 1-2-3-1 - 1-3-4-1 - 3-4-5-3 Input 2: ``` 4 4 1 2 2 3 3 4 4 1 ``` Output 2: ``` 1 ``` Explanation: The graph contains the following unique simple cycle: - 1-2-3-4-1","solution":"from itertools import permutations def count_unique_simple_cycles(n, edges): def is_simple_cycle(cycle): if cycle[0] != cycle[-1]: return False visited = set() for vertex in cycle[:-1]: if vertex in visited: return False visited.add(vertex) return True # Generate adjacency list adj = {i: [] for i in range(1, n + 1)} for u, v in edges: adj[u].append(v) adj[v].append(u) all_vertices = list(range(1, n + 1)) unique_cycles = set() for length in range(3, n + 1): for cycle in permutations(all_vertices, length): cycle = list(cycle) + [cycle[0]] if is_simple_cycle(cycle): is_fill_edge = all(cycle[i] in adj[cycle[i + 1]] or cycle[i + 1] in adj[cycle[i]] for i in range(len(cycle) - 1)) if is_fill_edge: cycle_rep = tuple(sorted(cycle[:-1])) unique_cycles.add(cycle_rep) return len(unique_cycles) # Example usage: if __name__ == \\"__main__\\": n, m = 5, 6 edges = [(1, 2), (2, 3), (3, 4), (4, 1), (3, 1), (4, 5)] print(count_unique_simple_cycles(n, edges)) # Output: 3"},{"question":"Write a function called `reverse_words` that takes a string of words separated by spaces and returns a new string with the order of words reversed. The order of characters within the words should remain unchanged. Handle multiple spaces between words by keeping only one space in the output. Assume the input string does not have leading or trailing spaces. **Function Signature:** ```python def reverse_words(input_string: str) -> str: pass ``` **Examples:** ```python reverse_words(\\"hello world\\") # should return \\"world hello\\" reverse_words(\\"a b c\\") # should return \\"c b a\\" reverse_words(\\" The quick brown fox \\") # should return \\"fox brown quick The\\" ``` **Constraints:** - The input string consists of printable ASCII characters only. - The length of the input string is at most 10,000 characters.","solution":"def reverse_words(input_string: str) -> str: Takes a string of words separated by spaces and returns a new string with the order of words reversed. Multiple spaces between words are reduced to a single space in the output. Parameters: input_string (str): The input string to be processed. Returns: str: The string with words in reversed order. # Split the input string by spaces to handle multiple spaces words = input_string.split() # Reverse the list of words words.reverse() # Join the reversed list of words with a single space return \' \'.join(words)"},{"question":"A company is developing a delivery service and wants to create an optimal route for their delivery vehicle. They have a list of delivery locations, each characterized by its coordinates (xi, yi) on a 2D plane and the urgency of the delivery (ui). The vehicle starts at the origin point (0, 0) and must plan a route that minimizes the total travel distance while also fulfilling the most urgent deliveries first. The total travel distance is defined as the sum of Euclidean distances between consecutive points visited by the vehicle. If the vehicle moves from (xi, yi) to (xj, yj), the distance is calculated as √((xi - xj)² + (yi - yj)²). The vehicle must visit each delivery location exactly once and return to the origin point at the end of the route. Input format: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of delivery locations. - The next n lines each contain three integers xi, yi, ui (|xi|, |yi| ≤ 10^6, 1 ≤ ui ≤ 1000) — the coordinates and urgency of the delivery location. Output format: - Print the order in which the delivery vehicle should visit the locations to minimize total travel distance and maximize the urgency of the visited locations. The order of visiting should be output as a sequence of integers from 1 to n, representing the indices of the delivery locations as given in the input. The last output number should be 0, indicating the return to the origin. Example: Input: 4 3 4 10 1 2 5 -1 -1 15 2 2 20 Output: 3 2 1 4 0","solution":"import math def calculate_distance(x1, y1, x2, y2): Calculates the Euclidean distance between two points (x1, y1) and (x2, y2). return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) def optimal_route(delivery_locations): Determines the optimal route for the delivery vehicle. n = len(delivery_locations) delivery_locations = [(i+1, *location) for i, location in enumerate(delivery_locations)] # Sort delivery locations based on urgency first, then by distance from the origin delivery_locations.sort(key=lambda loc: (-loc[3], calculate_distance(0, 0, loc[1], loc[2]))) # Extract the indices in the specified order order = [loc[0] for loc in delivery_locations] # Append 0 at the end to signify return to origin order.append(0) return order # Example usage: n = 4 delivery_locations = [(3, 4, 10), (1, 2, 5), (-1, -1, 15), (2, 2, 20)] print(optimal_route(delivery_locations))"},{"question":"Vova loves playing chess on a standard 8x8 chessboard. However, he has invented his own special piece called a **Chameleon Knight**. The Chameleon Knight behaves similarly to a standard knight in chess, with two exceptions: 1. It can move like a regular knight: two squares in one direction and one square perpendicular to that direction. 2. Additionally, at any point, Vova can cast a spell to instantly move the Chameleon Knight to any square on the chessboard. Given the initial position of the Chameleon Knight on the chessboard, Vova wants to know the minimum number of moves needed for the Chameleon Knight to reach a series of target positions on the chessboard. Each target position is given as part of a series of queries. The task is to calculate the minimum number of moves needed for the Chameleon Knight to reach each target position starting from its initial position, considering that Vova can use the spell at most once per target position. The first line of the input contains two integers, x and y (1 ≤ x, y ≤ 8), where (x, y) is the initial position of the Chameleon Knight. The second line contains an integer q (1 ≤ q ≤ 10^5), the number of queries. Each of the following q lines contains two integers xi and yi (1 ≤ xi, yi ≤ 8), representing the target position for the ith query. Print q integers, each representing the minimum number of moves required to reach the target position for the corresponding query. **Example** Input: ``` 1 1 3 2 3 4 5 6 6 ``` Output: ``` 1 2 2 ``` Explanation: - For the first query, the Chameleon Knight can move from (1, 1) to (2, 3) in one knight move. - For the second query, the Chameleon Knight can move from (1, 1) to (3, 2) in one move, and then from (3, 2) to (4, 5) in another move. - For the third query, the Chameleon Knight can move from (1, 1) to (2, 3) in one move, then from (2, 3) to (4, 4), and finally from (4, 4) to (6, 6) in a third move. But using the spell, it can be moved directly to (6, 6) in one spell cast and zero moves, so the total moves are still 2 as the spell is counted as one move.","solution":"def min_moves(initial_position, queries): def knight_moves(from_pos, to_pos): # It can move either as a knight or instant teleport with spell # Distance calculation: Manhattan distance if from_pos == to_pos: return 0 return 1 # You can always move directly with the spell x, y = initial_position results = [] for (xi, yi) in queries: results.append(knight_moves((x, y), (xi, yi))) return results # Initial position from inputs initial_position = (1, 1) # List of queries from inputs queries = [(2, 3), (4, 5), (6, 6)] # Function call print(min_moves(initial_position, queries)) # This will output [1, 1, 1]"},{"question":"You are asked to implement a special compression algorithm for alphabets in strings. In this algorithm, each alphabet in the string is replaced by a corresponding number from the sequence \'a\'=1, \'b\'=2, \'c\'=3, ..., \'z\'=26. However, there’s a twist: if an alphabet appears consecutively two or more times in a row, it’s replaced with a single number representing the alphabet, followed by the count of its occurrences. For example, the string \\"aabbcc\\" should be compressed as \\"a2b2c2\\", and the string \\"abbbccddd\\" should be compressed as \\"a1b3c2d3\\". Write a function that performs the described compression. Input: - The first line contains an integer n (1 ≤ n ≤ 200,000) – the length of the string. - The second line contains a string s consisting of lowercase English letters. Output: - Output the compressed form of this string according to the rules specified. Note: The compressed string should be concatenated numbers and counts without any additional separators. **Example:** **Input:** ``` 10 aaabbcccdd ``` **Output:** ``` a3b2c3d2 ``` **Input:** ``` 7 xxyzzz ``` **Output:** ``` x2y1z3 ``` Write a function `compress_string(n: int, s: str) -> str` that takes in an integer n and a string s, and returns the compressed string as specified.","solution":"def compress_string(n: int, s: str) -> str: if n == 0: return \\"\\" compressed = [] count = 1 for i in range(1, n): if s[i] == s[i - 1]: count += 1 else: compressed.append(f\\"{s[i - 1]}{count}\\") count = 1 compressed.append(f\\"{s[-1]}{count}\\") return \'\'.join(compressed)"},{"question":"Given an array of integers `nums`, you need to find the number of unique triplets `(i, j, k)` such that `i < j < k` and the sum of the elements at these indices is zero. The array may contain both positive and negative numbers, and values may repeat. # Input: - The first line contains an integer `n` (0 ≤ n ≤ 1000), the length of the array. - The second line contains `n` space-separated integers, representing the elements of the array. # Output: - Output a single integer representing the number of unique triplets `(i, j, k)` where `i < j < k` and `nums[i] + nums[j] + nums[k] == 0`. # Example: Input: ``` 6 -1 0 1 2 -1 -4 ``` Output: ``` 2 ``` Explanation: The unique triplets are: 1. (-1, 0, 1) — indices (0, 1, 2) 2. (-1, -1, 2) — indices (0, 4, 3) # Constraints: - Try to solve this problem with an efficient algorithm, like the two-pointer technique or using hashmaps, to ensure that the solution can handle the upper limits efficiently.","solution":"from itertools import combinations def count_unique_triplets(nums): Returns the number of unique triplets (i, j, k) such that i < j < k and nums[i] + nums[j] + nums[k] == 0. triplets = set() nums.sort() n = len(nums) for i in range(n): left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 # Avoid duplicates while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif current_sum < 0: left += 1 else: right -= 1 return len(triplets) def unique_triplets(n, nums): Entry point to the solution. if n == 0: return 0 return count_unique_triplets(nums)"},{"question":"Given an array of positive integers, you are to perform a specific operation to transform the array into a single element array. The operation you can perform is selecting any two elements a_i and a_j (i neq j), and replace them with their sum a_i + a_j. This operation counts as a move. Your task is to determine the minimum number of moves required to transform the given array into a single element array. # Input - The first line contains a single integer n (2 leq n leq 1000) - the number of elements in the array. - The second line contains n positive integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) - the elements of the array. # Output - Output a single integer which denotes the minimum number of moves required to transform the array into a single element array. # Example: Example 1: Input: ``` 3 1 2 3 ``` Output: ``` 2 ``` Explanation: - Move 1: Combine 1 and 2 to form [3, 3] - Move 2: Combine the two 3s to form [6] Total moves required: 2. Example 2: Input: ``` 5 1 1 1 1 1 ``` Output: ``` 4 ``` Explanation: - Move 1: Combine any two 1s to form [2, 1, 1, 1] - Move 2: Combine any two 1s to form [2, 2, 1] - Move 3: Combine any two 2s to form [4, 1] - Move 4: Combine 4 and 1 to form [5] Total moves required: 4.","solution":"def min_moves_to_single_element_array(n, arr): Determines the minimum number of moves required to transform the given array into a single element array. Parameters: n (int): The number of elements in the array arr (list of int): The elements of the array Returns: int: The minimum number of moves required # The minimum number of moves is always n - 1 return n - 1"},{"question":"You are given a list of integers. Your task is to check whether the list can be split into two non-empty subsequences such that the sum of the elements in one subsequence is equal to the sum of the elements in the other subsequence. The input consists of two lines: - The first line contains a single integer n (1 ≤ n ≤ 50) — the number of integers in the list. - The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the integers in the list. If it is possible to split the list as described, output \\"YES\\"; otherwise, output \\"NO\\". Example: Input: 4 1 5 11 5 Output: YES Explanation: The list can be split into [1, 5, 5] and [11], both of which sum to 11. Note: Each number in the list must be used exactly once, and the two subsequences must be non-empty. The order of elements within each subsequence does not matter.","solution":"def can_split_into_equal_sum_subsequences(n, nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to split into two equal parts if total_sum % 2 != 0: return \\"NO\\" target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in nums: for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"Given a series of positive integer terms following the pattern: 1, -2, 3, -4, 5, -6, dots. Where odd-indexed terms are positive integers (1, 3, 5, ...) and even-indexed terms are negative integers (-2, -4, -6, ...). You are required to implement a function that, given a positive integer n (1 le n le 10^6), returns the sum of the first n terms of this series. # Function Signature ```python def calculate_sum(n: int) -> int: pass ``` # Input - An integer n (1 le n le 10^6). # Output - The function should return an integer, which is the sum of the first n terms of the series. # Example ```python assert calculate_sum(5) == 3 # (1) + (-2) + (3) + (-4) + (5) = 3 assert calculate_sum(6) == -3 # (1) + (-2) + (3) + (-4) + (5) + (-6) = -3 assert calculate_sum(1) == 1 # (1) = 1 ``` # Explanation - For n = 5, the first 5 terms are 1, -2, 3, -4, 5, and their sum is 3. - For n = 6, the first 6 terms are 1, -2, 3, -4, 5, -6, and their sum is -3. - For n = 1, the first term is 1, and its sum is 1.","solution":"def calculate_sum(n: int) -> int: Returns the sum of the first n terms of the series: 1, -2, 3, -4, 5, -6, ... odd_sum = sum(i for i in range(1, n+1, 2)) even_sum = sum(-i for i in range(2, n+1, 2)) return odd_sum + even_sum"},{"question":"Riley loves organizing fruits. She has two baskets, each containing an equal number of fruits. The types of fruits are apples, oranges, and bananas. Riley wants to evenly distribute the fruits from both baskets into three new baskets such that each new basket gets the same number of fruits of each type from the original baskets combined. Given the number of apples, oranges, and bananas in the first basket, and the number of apples, oranges, and bananas in the second basket, determine if it is possible to evenly distribute the fruits into the three new baskets. The input contains three lines. The first line contains three integers a1, o1, b1 (1 ≤ a1, o1, b1 ≤ 1000), representing the number of apples, oranges, and bananas in the first basket. The second line contains three integers a2, o2, b2 (1 ≤ a2, o2, b2 ≤ 1000), representing the number of apples, oranges, and bananas in the second basket. If it is possible to evenly distribute the fruits into the three new baskets, print \\"YES\\". Otherwise, print \\"NO\\". In the first sample, with 3 apples and 6 oranges in the first basket and 3 apples and 3 bananas in the second basket, it is possible to distribute them evenly, so the output should be \\"YES\\". In another sample, with 5 apples and 5 oranges in the first basket and 5 apples and 5 bananas in the second basket, it is not possible to distribute them evenly because 5 is not divisible by 3, so the output should be \\"NO\\".","solution":"def can_distribute_evenly(a1, o1, b1, a2, o2, b2): Determines if it\'s possible to evenly distribute the fruits into three new baskets. Parameters: a1, o1, b1 (int): Apples, Oranges, and Bananas in the first basket. a2, o2, b2 (int): Apples, Oranges, and Bananas in the second basket. Returns: str: \\"YES\\" if it\'s possible to distribute the fruits evenly, \\"NO\\" otherwise. total_apples = a1 + a2 total_oranges = o1 + o2 total_bananas = b1 + b2 if total_apples % 3 == 0 and total_oranges % 3 == 0 and total_bananas % 3 == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"A new social network \\"FeedFriends\\" allows users to post photos, comment on them, and like them. Every user has a unique ID represented by an integer. Each post also has a unique ID, and each like is identified by a user ID and a post ID. You are tasked with finding out the post (or posts) with the highest number of unique likes. The input consists of: - The first line contains an integer p (1 ≤ p ≤ 10^4), the number of posts. - The second line contains an integer l (1 ≤ l ≤ 10^5), the number of likes. - Each of the next l lines contains two integers, ui and pi (1 ≤ ui ≤ 10^5, 1 ≤ pi ≤ p), the user ID who liked the post and the post ID that was liked. Output the post ID (or IDs) with the highest number of unique likes. If there are multiple such posts, output them in ascending order. # Example Input ``` 4 8 1 1 2 1 1 2 3 2 2 3 1 3 2 4 3 4 ``` Output ``` 1 2 3 4 ``` Explanation Post 1, Post 2, Post 3, and Post 4 all have 2 unique likes each, so all of them should be returned in ascending order.","solution":"def find_most_liked_posts(p, l, likes): from collections import defaultdict post_likes = defaultdict(set) # Process each like entry for user_id, post_id in likes: post_likes[post_id].add(user_id) max_likes = 0 most_liked_posts = [] # Find the maximum number of unique likes any post has for post_id, user_ids in post_likes.items(): unique_like_count = len(user_ids) if unique_like_count > max_likes: max_likes = unique_like_count most_liked_posts = [post_id] elif unique_like_count == max_likes: most_liked_posts.append(post_id) return sorted(most_liked_posts) # Example usage p = 4 l = 8 likes = [ (1, 1), (2, 1), (1, 2), (3, 2), (2, 3), (1, 3), (2, 4), (3, 4) ] print(find_most_liked_posts(p, l, likes))"},{"question":"Given an array of integers nums, return an array where each element at index i of the output array is the product of all the elements in nums except nums[i]. Solve it without using division and in O(n) time complexity. Constraints: - 2 <= nums.length <= 105 - -30 <= nums[i] <= 30 - The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. Input: - A single line of input containing a list of integers nums separated by spaces. Output: - A single line of output containing the resulting list of integers separated by spaces. Example: Input: 1 2 3 4 Output: 24 12 8 6 Explanation: For nums [1, 2, 3, 4], the output should be [24, 12, 8, 6]. The output at each index i is the product of all the nums elements except nums[i], which can be computed as follows: - For index 0: 2 * 3 * 4 = 24 - For index 1: 1 * 3 * 4 = 12 - For index 2: 1 * 2 * 4 = 8 - For index 3: 1 * 2 * 3 = 6","solution":"def product_except_self(nums): Given an array nums, returns an array such that each element at index i is the product of all elements in nums except nums[i]. n = len(nums) result = [1] * n # Calculate left product for each index left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate right product for each index and combine with left product right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result def read_input(input_str): Parses the input string into a list of integers. return list(map(int, input_str.strip().split())) def format_output(output_list): Converts the output list of integers into a space-separated string. return \' \'.join(map(str, output_list))"},{"question":"Katie is organizing an event and wants to create a seating arrangement for her guests. She wants it to be perfect, such that no guest feels uncomfortable. The event has n guests and Katie knows which guests are friends with each other. To make everyone comfortable, she wants to form the seating arrangement as follows: - Each guest must be seated at a round table. - Each guest must be seated adjacent to at least one of their friends. Given the list of friendships between the guests, determine whether such a seating arrangement is possible. If possible, output one such arrangement. The input consists of: - The first line containing an integer n (2 leq n leq 10^5) — the number of guests. - The second line containing an integer m (1 leq m leq 2 times 10^5) — the number of friendships. - The next m lines each containing two integers a and b (1 leq a, b leq n, a neq b) — indicating that guest a and guest b are friends. Output: - If such a seating arrangement is possible, output a single line containing \\"YES\\". - In the next line, output the arrangement as a permutation of integers from 1 to n — the guests\' seating arrangement in clockwise order. - If such an arrangement is not possible, output a single line containing \\"NO\\". Example: Input: ``` 6 5 1 2 2 3 3 4 4 5 5 6 ``` Output: ``` YES 1 2 3 4 5 6 ```","solution":"def seating_arrangement(n, m, friendships): from collections import defaultdict, deque # Create adjacency list for graph representation adjacent = defaultdict(list) for a, b in friendships: adjacent[a].append(b) adjacent[b].append(a) # Check if all nodes are part of a single connected component visited = [False] * (n + 1) order = [] def bfs(node): queue = deque([node]) while queue: current = queue.popleft() if visited[current]: continue visited[current] = True order.append(current) for neighbor in adjacent[current]: if not visited[neighbor]: queue.append(neighbor) # Perform BFS bfs(1) # If not all nodes are visited, seating arrangement is not possible if len(order) != n: return \\"NO\\" # Check if the order is a valid round arrangement for i in range(len(order)): if order[i-1] not in adjacent[order[i]] and order[(i+1)%n] not in adjacent[order[i]]: return \\"NO\\" return f\\"YESn{\' \'.join(map(str, order))}\\""},{"question":"You are given a weighted, undirected graph with n vertices and m edges. Each edge has a positive integer weight. Your task is to find the shortest path between two given vertices s and t. If there are multiple paths with the same shortest distance, your task is to return any of them. Input format: - The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of vertices and the number of edges, respectively. - The next m lines each contain three integers u, v, w (1 ≤ u, v ≤ n, u ≠ v, 1 ≤ w ≤ 10^9) — denoting an edge between vertices u and v with weight w. - The last line contains two integers s and t (1 ≤ s, t ≤ n, s ≠ t) — the source and destination vertices. Output format: - The first line should contain a single integer d — the length of the shortest path from s to t. If there is no path between s and t, output -1. - The second line should contain the vertices in the shortest path in order from s to t. If there are multiple solutions, print any. If there is no path, do not output this line. Example: Input: 5 6 1 2 3 1 3 1 2 4 5 3 4 2 4 5 2 3 5 4 1 5 Output: 5 1 3 4 5 In this example, there are multiple shortest paths from vertex 1 to vertex 5. One such path is 1 -> 3 -> 4 -> 5 with a minimum distance of 5.","solution":"import heapq def shortest_path(n, m, edges, s, t): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start, end): dist = {i: float(\'inf\') for i in range(1, n+1)} prev = {i: None for i in range(1, n+1)} dist[start] = 0 pq = [(0, start)] while pq: current_dist, u = heapq.heappop(pq) if u == end: path = [] while u != None: path.append(u) u = prev[u] return dist[end], path[::-1] if current_dist > dist[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < dist[v]: dist[v] = distance prev[v] = u heapq.heappush(pq, (distance, v)) return -1, [] dist, path = dijkstra(s, t) if dist == float(\'inf\'): return -1, [] else: return dist, path"},{"question":"In a galaxy far, far away, there is a spacecraft navigation system that relies on sequence of commands to move a spacecraft through a series of sectors in space. The navigation system interprets a sequence of commands consisting of the characters \'L\', \'R\', \'U\', and \'D\', which correspond to movements in a two-dimensional grid: Left, Right, Up, and Down, respectively. Due to certain space anomalies, the spacecraft must return to its initial position after executing the sequence of commands. If the spacecraft does not end up at its initial starting point, it cannot complete its mission and could be lost in space forever. Write a function that takes a string of commands and returns whether the spacecraft returns to its initial starting position. The input consists of a single string s (1 ≤ |s| ≤ 10^5) representing the sequence of commands. Output \\"YES\\" if the spacecraft returns to its initial position after executing the sequence of commands. Otherwise, print \\"NO\\". # Example Input ``` LURD ``` Output ``` YES ``` Input ``` LURL ``` Output ``` NO ```","solution":"def does_return_to_initial_position(commands): Function to determine if the spacecraft returns to its initial position given a sequence of commands. Args: commands (str): A sequence of commands (\'L\', \'R\', \'U\', \'D\') Returns: str: \\"YES\\" if the spacecraft returns to its initial position, \\"NO\\" otherwise x, y = 0, 0 for command in commands: if command == \'L\': x -= 1 elif command == \'R\': x += 1 elif command == \'U\': y += 1 elif command == \'D\': y -= 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"The Technovians are advanced beings with a unique technological landscape. One of their favorite devices is a \\"transmitter,\\" which can broadcast binary messages. The messages are arrays of binary numbers (0s and 1s), and there’s a special festival where the Technovians participate in a contest to create the longest array of consecutive bits that contain equal numbers of 0s and 1s. One day, during the festival, Mr. Tech introduced a challenge: given a binary array, find the longest contiguous subarray that contains an equal number of 0s and 1s. Determine the length of such a subarray. The first line contains an integer n (1 ≤ n ≤ 105). The next line contains n integers, each either 0 or 1, that represent the binary array. Output a single integer — the length of the longest contiguous subarray with equal numbers of 0s and 1s. Example: Input: 8 1 0 1 0 1 1 0 0 Output: 8 In the example, the longest subarray is the full array itself. Note: You are expected to achieve this in linear time with respect to the size of the array.","solution":"def longest_equal_subarray(arr): Returns the length of the longest contiguous subarray with equal number of 0s and 1s. prefix_sum = 0 max_length = 0 index_map = {0: -1} # To handle the case when subarray starts from the index 0 for i, num in enumerate(arr): # Compute the prefix sum where 0 is -1 and 1 is +1 prefix_sum += -1 if num == 0 else 1 if prefix_sum in index_map: # Calculate the length of the subarray max_length = max(max_length, i - index_map[prefix_sum]) else: # Store the first occurrence of this prefix sum index_map[prefix_sum] = i return max_length"},{"question":"Given an array of n integers, your task is to determine if you can make all elements of the array equal by only performing a specific type of operation. In one operation, you can pick any two distinct elements of the array and decrease one of them by 1 while increasing the other by 1. You need to answer multiple test cases. The first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. The next t lines describe the test cases. Each test case is given on a new line and consists of two lines. The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. For each test case, print \\"YES\\" if you can make all elements of the array equal by performing the described operation any number of times. Otherwise, print \\"NO\\".","solution":"def can_make_elements_equal(test_cases): results = [] for n, array in test_cases: if sum(array) % n == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) test_cases = [] for i in range(1, 2 * t, 2): n = int(lines[i]) array = list(map(int, lines[i + 1].split())) test_cases.append((n, array)) return test_cases def handle_input(input_string): test_cases = parse_input(input_string) results = can_make_elements_equal(test_cases) return \\"n\\".join(results) # Example Input - you can run the function `handle_input` with proper formatted input string to test # input_string = \\"2n3n3 2 1n4n1 1 1 1n\\" # print(handle_input(input_string))"},{"question":"You are given a string s = s1s2... s|s| of length |s|, consisting of lowercase English letters. You are to process q queries, each query given by two integers li, ri (1 ≤ li ≤ ri ≤ |s|). The answer to each query is the number of distinct characters in the substring s[li... ri]. String s[l... r] = slsl + 1... sr (1 ≤ l ≤ r ≤ |s|) is a substring of string s = s1s2... s|s|. The first line contains the string s (1 ≤ |s| ≤ 5000). The second line contains a single integer q (1 ≤ q ≤ 200000) — the number of queries. Each of the next q lines contains two space-separated integers li, ri (1 ≤ li ≤ ri ≤ |s|) — the indices of the substring for the i-th query. Output q integers — the answers to the queries. Print the answers in the order they appear in the input. Separate the printed numbers by whitespaces. For example, given the string \'ababc\', and queries: 1 3 2 5 1 5 The output should be: 2 3 3 Explanation: - For the substring s[1...3] = \\"aba\\", there are 2 distinct characters: \'a\' and \'b\'. - For the substring s[2...5] = \\"babc\\", there are 3 distinct characters: \'a\', \'b\', and \'c\'. - For the substring s[1...5] = \\"ababc\\", there are 3 distinct characters: \'a\', \'b\', and \'c\'.","solution":"def count_distinct_characters(s, queries): Returns the number of distinct characters in the specified substrings of s. Args: s (str): Input string. queries (list of tuple): List of tuples where each tuple contains two integers (li, ri). Returns: list: List of integers where each integer is the number of distinct characters in the substring s[li...ri]. results = [] for li, ri in queries: substring = s[li-1:ri] distinct_characters = len(set(substring)) results.append(distinct_characters) return results"},{"question":"Given two strings, implement a function that determines if the second string is an anagram of the first string. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Your function should take the two strings as input and return a boolean value indicating if the second string is an anagram of the first. **Function Signature:** `def is_anagram(s1: str, s2: str) -> bool:` # Input - Two strings (s1 and s2) consisting of lowercase Latin letters. Length of each string is between 1 and 100 inclusive. # Output - Return True if s2 is an anagram of s1, otherwise return False. # Example Example 1: Input: ``` s1 = \\"listen\\" s2 = \\"silent\\" ``` Output: ``` True ``` Explanation: \\"silent\\" is an anagram of \\"listen\\". Example 2: Input: ``` s1 = \\"hello\\" s2 = \\"bello\\" ``` Output: ``` False ``` Explanation: \\"bello\\" is not an anagram of \\"hello\\".","solution":"def is_anagram(s1: str, s2: str) -> bool: Determines if s2 is an anagram of s1. Args: s1 (str): The first string. s2 (str): The second string. Returns: bool: True if s2 is an anagram of s1, False otherwise. # An anagram must be the same length as the original string if len(s1) != len(s2): return False # Count the occurrences of each character in both strings from collections import Counter return Counter(s1) == Counter(s2)"},{"question":"Polycarpus loves arrays and has an array-based problem for you. Given an array `a` of `n` integers, an \\"interesting subsequence\\" is defined as a subsequence of `a` that is in strictly increasing order and contains the maximum element of the array. Your task is to find the number of different interesting subsequences of `a`. Note that two subsequences are different if their indices are different. For example, consider the array `a = [3, 1, 4, 2]`. Here, the number `4` is the maximum element. Some interesting subsequences would be `[3, 4]`, `[1, 4]`, and `[2, 4]`. The input consists of two lines. The first line contains an integer `n` (1 ≤ n ≤ 2000), the number of elements in the array. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), the elements of the array. Output a single integer, the number of different interesting subsequences. Example: Input 4 3 1 4 2 Output 3","solution":"def count_interesting_subsequences(n, a): Returns the number of different interesting subsequences. An interesting subsequence is defined as a subsequence that is in strictly increasing order and contains the maximum element of the array. # Find the maximum element in the array max_element = max(a) # Count the number of times the maximum element appears in the array max_count = a.count(max_element) # The number of interesting subsequences is the number of different ways to choose the index # positions of the maximum elements return max_count"},{"question":"The Biologist\'s Dilemma Dr. Gene is a biologist studying the growth of bacterial colonies. Each colony is represented by a string of lowercase letters. A colony grows by transforming according to specific rules. Dr. Gene can perform the following operation on a colony string any number of times: 1. Choose one position in the string and replace the character at that position with any character that is lexicographically larger than the current character. Dr. Gene wants to know the minimum number of operations required to transform a colony string into another string such that the resulting string is strictly lexicographically greater than the initial string but smaller or equal in size. The first line contains one integer T (1 le T le 100) — the number of test cases. Each test case consists of a single string s (1 le |s| le 100). For each test case, print the minimum number of operations required to achieve the transformation, or -1 if it\'s not possible. **Example Input:** ``` 2 abc zzz ``` **Example Output:** ``` 1 -1 ``` **Explanation:** In the first test case, Dr. Gene can transform `c` to `d`, resulting in the string `abd`, which is lexicographically greater than `abc`. In the second test case, it\'s not possible to make `zzz` greater with the allowed operations, hence the output is `-1`.","solution":"def min_operations_to_greater_string(T, test_cases): Determines the minimum number of operations to make each string in test cases lexicographically greater. Parameters: T (int): the number of test cases. test_cases (list of str): a list of strings representing the test cases. Returns: list of int: the minimum number of operations for each test case, or -1 if not possible. results = [] for s in test_cases: n = len(s) is_possible = False for i in range(n - 1, -1, -1): if s[i] != \'z\': is_possible = True break if not is_possible: results.append(-1) else: results.append(1) return results"},{"question":"Consider an office building where a certain number of employees work. Each employee has a specific arrival and departure time. During lunch hours, at exactly 12:00 PM, the security system needs to calculate the maximum number of employees present in the building at any given minute within the provided timespan to ensure that the cafeteria is properly staffed and food is prepared accordingly. You are given the total number of employees, and for each employee, you are given their arrival and departure times in the format of hours and minutes. The time is represented in 24-hour format, and all employees arrive and leave on the same day. Your task is to determine the maximum number of employees present in the office at any single minute to better manage and prepare for the lunch crowd. **Input:** - The input starts with an integer n (1 le n le 10^4) representing the number of employees. - The next n lines contain two time stamps, each in HH:MM format, representing the arrival and departure times of the employees. **Output:** - A single integer representing the maximum number of employees present at any single minute within their working hours on that day. **Example:** Input: ``` 5 09:00 11:00 10:00 12:30 09:30 11:30 11:00 13:00 12:00 14:00 ``` Output: ``` 3 ``` **Explanation:** - At 09:00, employee 1 arrives (1 employee). - At 09:30, employee 3 arrives (2 employees). - At 10:00, employee 2 arrives (3 employees). - At 11:00, employee 4 arrives, employee 1 leaves (3 employees). - At 11:30, employee 3 leaves (2 employees). - At 12:00, employee 5 arrives (3 employees). - At 12:30, employee 2 leaves (2 employees). - At 13:00, employee 4 leaves (1 employee). - At 14:00, employee 5 leaves (0 employees). The maximum number of employees in the building at any single minute during these times is 3.","solution":"def max_employees_present(n, intervals): from collections import defaultdict time_points = defaultdict(int) for interval in intervals: arrival, departure = interval.split() arrival_hour, arrival_minute = map(int, arrival.split(\\":\\")) departure_hour, departure_minute = map(int, departure.split(\\":\\")) arrival_minutes = arrival_hour * 60 + arrival_minute departure_minutes = departure_hour * 60 + departure_minute time_points[arrival_minutes] += 1 time_points[departure_minutes] -= 1 max_emps = 0 current_emps = 0 for time_point in sorted(time_points): current_emps += time_points[time_point] if current_emps > max_emps: max_emps = current_emps return max_emps"},{"question":"In a mysterious realm, there exists a magical forest with n trees connected by m paths. Each path has a specific magical energy cost associated with it. An apprentice wizard is trying to collect magical herbs from several trees to complete a powerful potion. The apprentice starts from a specific tree and needs to visit exactly k distinct trees to gather enough herbs. The forest is represented as an undirected graph with n vertices and m edges. The apprentice can start from any tree and move along the paths, but must visit exactly k distinct trees, including the starting tree, without reusing any tree. Your task is to decide the starting tree and the sequence of k distinct trees to visit. Additionally, you need to minimize the total magical energy cost expended along the paths. Provide a possible sequence with the minimized magical energy cost. The first line contains three integers n, m, and k (1 ≤ n ≤ 105, 0 ≤ m ≤ 105, 1 ≤ k ≤ n) — the number of trees, paths, and distinct trees to visit, respectively. Each of the next m lines contains three integers xi, yi, and ci (1 ≤ xi, yi ≤ n, 1 ≤ ci ≤ 109) — indicating that there\'s a path between tree xi and tree yi with an energy cost of ci. The last line contains a single integer s (1 ≤ s ≤ n) — the tree the apprentice starts from initially. Print one line containing k integers representing the sequence of trees visited by the apprentice. If there are multiple valid sequences with the same minimum cost, any of them will be acceptable. It is guaranteed that at least one valid sequence exists. # Examples: **Input:** ``` 5 6 3 1 2 4 1 3 2 2 3 1 3 4 7 2 4 3 4 5 6 1 ``` **Output:** ``` 1 3 4 ``` **Input:** ``` 4 3 4 1 2 3 1 3 2 3 4 1 2 ``` **Output:** ``` 2 1 3 4 ``` # Note: In the first example, the apprentice starts at tree 1, travels to tree 3 with an energy cost of 2, and then to tree 4 with an additional energy cost of 7, totaling 9 magical energy cost. Another possible sequence could be 1 2 4 with the same or different cost depending on paths chosen. Only one sequence that results in the minimal magical energy cost for the given graph and constraints needs to be output.","solution":"import heapq def magical_forest_trip(n, m, k, paths, s): # Creating the graph as adjacency list graph = {i: [] for i in range(1, n+1)} for x, y, c in paths: graph[x].append((c, y)) graph[y].append((c, x)) # Dijkstra\'s algorithm to find the shortest paths from the starting node s def dijkstra(start, n, graph): distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] visited = set() while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_node in visited: continue visited.add(current_node) for distance, neighbor in graph[current_node]: if neighbor in visited: continue new_distance = current_distance + distance if new_distance < distances[neighbor]: distances[neighbor] = new_distance heapq.heappush(priority_queue, (new_distance, neighbor)) return distances # Get the distances from the start node distances = dijkstra(s, n, graph) # Pick k nodes with the smallest distances, including the start node distances = sorted([(dist, node) for node, dist in distances.items()]) selected_nodes = [node for dist, node in distances[:k]] return selected_nodes # Example usage n = 5 m = 6 k = 3 paths = [ (1, 2, 4), (1, 3, 2), (2, 3, 1), (3, 4, 7), (2, 4, 3), (4, 5, 6) ] s = 1 print(magical_forest_trip(n, m, k, paths, s)) n = 4 m = 3 k = 4 paths = [ (1, 2, 3), (1, 3, 2), (3, 4, 1) ] s = 2 print(magical_forest_trip(n, m, k, paths, s))"},{"question":"You are given a list of cities and the distances between each pair of cities. You are to plan a trip starting from a given city such that each city is visited exactly once, with the goal of minimizing the total travel distance. This is a classic Traveling Salesman Problem (TSP). Given a matrix `d` of size `n x n` where `d[i][j]` represents the distance between the `i`-th city and the `j`-th city, and an integer `start` representing the index of the starting city (0-indexed), your task is to find the minimum travel distance starting from the given city and visiting all cities exactly once and returning to the starting city. # Input - An integer `n` (2 leq n leq 15), the number of cities. - A `n x n` matrix `d` where `0 leq d[i][j] leq 1000` for `1 leq i,j leq n` and `d[i][i] = 0`. - An integer `start` (0 leq start < n), the starting city index. # Output - A single integer representing the minimum travel distance to visit all cities exactly once starting and ending at the given city. # Example Input ``` 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 0 ``` Output ``` 80 ``` Explanation One possible route for the given example is starting at city 0, visiting cities 1, 3, 2 in order, and returning to city 0. The distances are ``` 0 -> 1: 10 1 -> 3: 25 3 -> 2: 30 2 -> 0: 15 Total: 10 + 25 + 30 + 15 = 80 ``` So the minimum travel distance is 80.","solution":"import itertools def tsp_min_distance(n, d, start): Solves the Traveling Salesman Problem using brute force approach. Parameters: n (int): Number of cities. d (list of list of int): Distance matrix. start (int): Starting city index. Returns: int: Minimum travel distance. # Generate all permutations of cities excluding the starting city cities = list(range(n)) cities.remove(start) min_distance = float(\'inf\') # Check all possible permutations of visiting cities for perm in itertools.permutations(cities): current_distance = 0 current_city = start # Compute the distance for the current permutation for next_city in perm: current_distance += d[current_city][next_city] current_city = next_city # Add distance back to the starting city current_distance += d[current_city][start] # Update the minimum distance if current total distance is smaller if current_distance < min_distance: min_distance = current_distance return min_distance"},{"question":"You are given a sequence of positive integers a_1, a_2, dots, a_n. You need to partition the sequence into a minimal number of non-decreasing subsequences. A sequence b_1, b_2, dots, b_k is a non-decreasing sequence if b_i leq b_{i+1} for all valid i. For example, if the sequence is [3, 2, 1, 4, 3, 5, 6], one possible partition into the minimal number of non-decreasing subsequences is [3, 4, 5, 6] and [2, 3] and [1]. # Input - The first line contains a single integer n (1 leq n leq 10^5) — the length of the sequence a. - The second line contains n integers a_i (1 leq a_i leq 10^9) — the elements of the sequence. # Output Print a single integer — the minimal number of non-decreasing subsequences you can partition the sequence into. # Example Input ``` 7 3 2 1 4 3 5 6 ``` Output ``` 3 ``` # Explanation - You can partition the sequence into [3, 4, 5, 6], [2, 3], and [1], resulting in 3 non-decreasing subsequences.","solution":"import heapq def minimal_non_decreasing_subsequences(n, a): subsequences_end = [] for num in a: pos = -1 for i in range(len(subsequences_end)): if subsequences_end[i] <= num: pos = i break if pos == -1: subsequences_end.append(num) else: subsequences_end[pos] = num subsequences_end.sort() return len(subsequences_end) # Example usage n = 7 a = [3, 2, 1, 4, 3, 5, 6] print(minimal_non_decreasing_subsequences(n, a)) # Output: 3"},{"question":"You are given an array of integers and a set of instructions to modify the array and query certain segments. The instructions can be of two types: 1. Set all elements in a given range to a specific value. 2. Find the maximum value in a given range. Implement the required operations and respond to each query. The first line of input contains two integers n (1 ≤ n ≤ 100000) and q (1 ≤ q ≤ 50000), where n is the size of the array and q is the number of queries. The second line contains n space-separated integers representing the initial values of the array. Each of the following q lines contains one query in one of the following two formats: 1. \\"1 l r x\\" - Set all elements in the range from index l to index r (inclusive) to the value x (1 ≤ l ≤ r ≤ n, 1 ≤ x ≤ 10^9). 2. \\"2 l r\\" - Find the maximum value in the range from index l to index r (inclusive) and print it (1 ≤ l ≤ r ≤ n). Input: ``` n q a1 a2 a3 ... an t1 l1 r1 [x1] (for each query) t2 l2 r2 [x2] (for each query) ``` Output: For each maximum value query (type 2), print the result on a new line. Example: Input: ``` 5 4 1 3 2 5 4 2 1 3 1 2 4 10 2 1 5 2 2 5 ``` Output: ``` 3 10 10 ``` Explanation: - Query 1: Find the maximum value from index 1 to 3 -> Output: 3 - Query 2: Set all values from index 2 to 4 to 10 -> Array becomes [1, 10, 10, 10, 4] - Query 3: Find the maximum value from index 1 to 5 -> Output: 10 - Query 4: Find the maximum value from index 2 to 5 -> Output: 10","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Build the segment tree for i in range(self.n): self.tree[self.n + i] = array[i] for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1]) def update_range(self, l, r, value): # Update elements in the range [l,r] to value for i in range(l, r + 1): self.update_point(i, value) def update_point(self, pos, value): # Update the value at position pos to value pos += self.n - 1 self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[pos * 2], self.tree[pos * 2 + 1]) def query_range(self, l, r): # Query for the max value in the range [l, r] l += self.n - 1 r += self.n - 1 res = float(\'-inf\') while l <= r: if l % 2 == 1: res = max(res, self.tree[l]) l += 1 if r % 2 == 0: res = max(res, self.tree[r]) r -= 1 l //= 2 r //= 2 return res def process_queries(n, q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, l, r, x = query seg_tree.update_range(l, r, x) elif query[0] == 2: _, l, r = query result = seg_tree.query_range(l, r) results.append(result) return results"},{"question":"A large, rectangular garden is divided into a grid of n rows and m columns, populated with flowers. Each grid cell contains one flower of a certain color. You discover that the garden forms a magic grid if the color of the flowers in each row and each column follows a periodic sequence. A sequence is periodic with period k if for any position i in the sequence, the color at position i is the same as the color at position (i + k). Ralph found that the garden forms a valid magic grid only if every row and every column is periodic with the same period p, and the periodicity must cover the entire length of the row and column. In other words, both n and m must be multiples of the period p. Given n, m, and p, determine the number of ways to fill the garden such that it forms a magic grid. The result can be large, so return the result modulo 1000000007 (10^9 + 7). The first line contains three integers n, m, and p (1 ≤ n, m ≤ 10^18; 1 ≤ p ≤ min(n, m)). Output a single integer representing the number of ways to populate the garden to form a magic grid modulo 1000000007. For example: If n = 6, m = 6, and p = 3, one possible way is to fill the garden grid as follows (where A, B, C denote different flower colors): A B C A B C A B C A B C A B C A B C A B C A B C A B C A B C A B C A B C In this example, the periodic sequence A B C is repeated across both rows and columns. If the input is n = 2, m = 4, and p = 2, one possible way is: X Y X Y X Y X Y where X and Y represent two different colors.","solution":"def magic_grid_patterns(n, m, p): Determine the number of ways to populate the garden to form a magic grid with the given conditions. :param n: Number of rows :param m: Number of columns :param p: Period of the periodic sequence :return: Number of ways to populate the garden modulo 1000000007 MOD = 1000000007 # If n and m are not multiples of p, it\'s not possible to form a valid magic grid if n % p != 0 or m % p != 0: return 0 # The number of ways to populate each repeated block is p^p result = pow(p, p, MOD) return result"},{"question":"Write a function to compute the editing distance (Levenshtein distance) between two strings. The editing distance between two strings is the smallest number of insertions, deletions, and substitutions needed to transform one string into the other. The function should have the following signature: ```python def levenshtein_distance(str1: str, str2: str) -> int: ``` **Input:** - The function receives two strings `str1` and `str2`, each having a maximum length of 1000 characters. **Output:** - The function should return an integer that represents the minimum number of single-character edits required to change `str1` into `str2`. **Example:** ```python levenshtein_distance(\\"kitten\\", \\"sitting\\") # returns 3 levenshtein_distance(\\"flaw\\", \\"lawn\\") # returns 2 levenshtein_distance(\\"intention\\", \\"execution\\") # returns 5 ``` **Explanation:** 1. The first example requires 3 edits: substitute \'k\' with \'s\', substitute \'e\' with \'i\', and add \'g\' at the end. 2. The second example requires 2 edits: substitute \'f\' with \'l\' and substitute \'w\' with \'n\'. 3. The third example requires 5 edits: substitute \'i\' with \'e\', substitute \'n\' with \'x\', and append \'c\', \'u\', \'t\' to the string.","solution":"def levenshtein_distance(str1: str, str2: str) -> int: len_str1 = len(str1) len_str2 = len(str2) # Initialize matrix dp = [[0 for _ in range(len_str2 + 1)] for _ in range(len_str1 + 1)] # Set up base cases for i in range(len_str1 + 1): dp[i][0] = i for j in range(len_str2 + 1): dp[0][j] = j # Compute distances for i in range(1, len_str1 + 1): for j in range(1, len_str2 + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j] + 1, # Deletion dp[i][j - 1] + 1, # Insertion dp[i - 1][j - 1] + 1) # Substitution return dp[len_str1][len_str2]"},{"question":"You are given a balanced binary tree. Your task is to determine the maximum depth of this tree, which is the number of nodes along the longest path from the root node down to the farthest leaf node. Write a function `maxDepth` that takes the root node of a binary tree and returns its maximum depth. The binary tree is represented by the following structure: ``` class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` The input consists of a single line containing the representation of the tree in level-order traversal, where \'null\' represents the absence of a node. For example, the binary tree ``` 3 / 9 20 / 15 7 ``` is represented as: ``` [3, 9, 20, null, null, 15, 7] ``` Return an integer indicating the maximum depth of the tree. **Example:** - Input: `root = [3, 9, 20, null, null, 15, 7]` - Output: `3` **Constraints:** - The number of nodes in the tree is in the range `[0, 10^4]`. - The tree is guaranteed to be balanced, meaning the heights of the two child subtrees of any node differ by no more than 1.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def maxDepth(root): Returns the maximum depth of the binary tree. if not root: return 0 left_depth = maxDepth(root.left) right_depth = maxDepth(root.right) return max(left_depth, right_depth) + 1 # Helper function to build tree from level-order representation def build_tree(level_order): if not level_order or level_order[0] == \'null\': return None root = TreeNode(level_order[0]) queue = [root] i = 1 while i < len(level_order): current = queue.pop(0) if level_order[i] != \'null\': current.left = TreeNode(level_order[i]) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] != \'null\': current.right = TreeNode(level_order[i]) queue.append(current.right) i += 1 return root"},{"question":"Samantha loves working with arrays, and recently she stumbled upon the concept of \\"valleys.\\" An array a1, a2, ..., an (n is the length of the array) is considered a valley if there exists an index i (1 ≤ i ≤ n) such that the following conditions are met: 1. Array elements strictly decrease from the start to the ith element. 2. Array elements strictly increase from the ith element to the end. For example, arrays [5, 4, 3, 4, 5] and [6, 3, 2, 3] are valleys, but [3, 2, 1] and [4, 5, 6, 7] are not. Samantha has a collection of n integers and wants to find the longest possible valley from these numbers. Your task is to help Samantha determine the length of the longest valley that can be formed and to provide the sequence of numbers that constitute the valley. The first line contains an integer n (1 ≤ n ≤ 105) — the number of integers in Samantha\'s collection. The second line contains n integers ai (1 ≤ ai ≤ 5000) — the numbers in Samantha\'s collection. In the first line print the length of the longest valley you can form. In the second line print the resulting valley sequence. If there are multiple solutions, print any of them.","solution":"def longest_valley(arr): n = len(arr) if n < 3: return 0, [] # Calculate the longest decreasing subsequence ending at each index dec = [1] * n for i in range(1, n): if arr[i] < arr[i-1]: dec[i] = dec[i-1] + 1 # Calculate the longest increasing subsequence starting from each index inc = [1] * n for i in range(n-2, -1, -1): if arr[i] < arr[i+1]: inc[i] = inc[i+1] + 1 max_len = 0 idx = -1 # Find the point where both sequences meet and form the longest valley for i in range(n): if dec[i] > 1 and inc[i] > 1: if dec[i] + inc[i] - 1 > max_len: max_len = dec[i] + inc[i] - 1 idx = i if max_len == 0: return 0, [] # Reconstruct the longest valley valley = [] # Get the decreasing part for i in range(idx - dec[idx] + 1, idx + 1): valley.append(arr[i]) # Get the increasing part without the peak element ( which is already added ) for i in range(idx + 1, idx + inc[idx]): valley.append(arr[i]) return max_len, valley"},{"question":"You are given a tree with n nodes. Each node has an integer value a_i associated with it. You will perform several queries on this tree. Each query asks you to find the maximum value of the integers in the subtree of a given node. The tree is rooted at node 1. The subtree of a node v consists of v and all its descendants. You need to efficiently process the following types of queries: 1. 1 v x: Update the value of the node v to x. 2. 2 v: Find the maximum value in the subtree of the node v. Input: - The first line contains a single integer n (1 leq n leq 10^5) — the number of nodes in the tree. - The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the initial values of the nodes. - Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n) — indicating that there is an edge between nodes u and v. After that, the next line contains a single integer q (1 leq q leq 10^5) — the number of queries. - Each of the next q lines contains one of the following types of queries: - 1 v x: Update the value of node v to x. - 2 v: Find the maximum value in the subtree of node v. Output: For each query of type 2, print the maximum value in the subtree of the corresponding node. Example: Input: ``` 5 1 2 3 4 5 1 2 1 3 3 4 3 5 3 2 3 1 3 10 2 3 ``` Output: ``` 5 10 ```","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[i << 1], self.tree[i << 1 | 1]) def update(self, index, value): # Update leaf node index += self.n self.tree[index] = value # Update internal nodes i = index while i > 1: i >>= 1 self.tree[i] = max(self.tree[i << 1], self.tree[i << 1 | 1]) def query(self, left, right): # Query on range [left, right) left += self.n right += self.n result = -float(\'inf\') while left < right: if left & 1: result = max(result, self.tree[left]) left += 1 if right & 1: right -= 1 result = max(result, self.tree[right]) left >>= 1 right >>= 1 return result def dfs(node, parent, adj, in_time, out_time, pos, value, flat): in_time[node] = pos[0] flat[pos[0]] = value[node - 1] # nodes are 1-indexed, hence node - 1 pos[0] += 1 for neighbor in adj[node]: if neighbor != parent: dfs(neighbor, node, adj, in_time, out_time, pos, value, flat) out_time[node] = pos[0] def solve(tree_info, queries): n = tree_info[\'n\'] values = tree_info[\'values\'] edges = tree_info[\'edges\'] adj = [[] for _ in range(n + 1)] for u, v in edges: adj[u].append(v) adj[v].append(u) in_time = [0] * (n + 1) out_time = [0] * (n + 1) pos = [0] flat = [0] * n # Perform DFS to calculate in_time, out_time and the flat tree dfs(1, -1, adj, in_time, out_time, pos, values, flat) # Initialize the segment tree with the flattened tree values seg_tree = SegmentTree(flat) results = [] for query in queries: if query[0] == 1: # Update value query _, v, x = query # Update the value in the original array idx = in_time[v] seg_tree.update(idx, x) elif query[0] == 2: # Max value in subtree query _, v = query l = in_time[v] r = out_time[v] results.append(seg_tree.query(l, r)) return results"},{"question":"You are given a forest consisting of n nodes and n-1 edges. In a forest, each tree is an undirected connected acyclic graph. Your task is to determine the number of trees within this forest. The first line contains an integer n (1 ≤ n ≤ 1000) — the number of nodes in the forest. The next n-1 lines each contain two space-separated integers u and v (1 ≤ u, v ≤ n, u ≠ v) — an edge connecting nodes u and v. Output a single integer — the number of trees in the forest. Example: Input: ``` 9 1 2 3 4 5 6 7 8 8 9 9 7 4 5 6 1 ``` Output: ``` 2 ``` Explanation: The given edges form two trees. One tree connects nodes {1, 2, 6, 5, 4} and the other tree connects nodes {3, 7, 8, 9}.","solution":"def count_trees(n, edges): Returns the number of trees in the forest given n nodes and n-1 edges. from collections import defaultdict def dfs(node): stack = [node] while stack: u = stack.pop() for v in graph[u]: if not visited[v]: visited[v] = True stack.append(v) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) # To keep track of visited nodes tree_count = 0 for node in range(1, n + 1): if not visited[node]: visited[node] = True tree_count += 1 dfs(node) return tree_count"},{"question":"A software company is designing a new application that must efficiently handle customer queries regarding their purchase history. The customers\' purchase data is stored in a system which can be visualized as a tree structure where each node represents a purchase event. You are tasked with developing a feature that allows a customer to determine the total value of purchases in a certain period. Each purchase event is associated with a value and a timestamp. Given this tree structure and a specific time range, you need to calculate the sum of the purchase values for all events within that range. The input consists of: 1. An integer n (1 ≤ n ≤ 100,000), the number of purchase events. 2. n lines where each line contains three integers ai, ti, and pi (1 ≤ ai ≤ n, 0 ≤ ti, pi ≤ 100,000). `ai` indicates the parent event of the i-th event (with `ai = 0` for the root event), `ti` is the timestamp of the event, and `pi` is the value of the purchase. 3. Two integers t1 and t2 (0 ≤ t1 ≤ t2 ≤ 100,000), representing the time range [t1, t2]. Output a single integer representing the sum of the purchase values of all events whose timestamps fall within the given time range. Note: The root event will always have a timestamp and a value assigned. Example: Input: ``` 5 0 5 10 1 3 20 1 8 30 2 6 40 3 10 50 3 9 ``` Output: ``` 120 ``` Explanation: - Purchase events 1, 2, and 4 occur at timestamps 5, 3, and 6 respectively, with values 10, 20, and 40 respectively, which fall within the range [3, 9]. - Purchase event 3 occurs at timestamp 8 with value 30 and falls within the range [3, 9]. - Purchase event 5 occurs at timestamp 10 and does not fall within the range [3, 9]. - The total sum of values for events within the range is 10 + 20 + 30 + 40 = 100.","solution":"def calculate_sum_in_time_range(n, events, t1, t2): Calculates the sum of purchase values for all events within a specific time range. :param n: int, number of purchase events :param events: list of tuples, each tuple consists of (ai, ti, pi) :param t1: int, start of time range :param t2: int, end of time range :return: int, sum of purchase values within time range total_sum = 0 for _, ti, pi in events: if t1 <= ti <= t2: total_sum += pi return total_sum # Example usage: n = 5 events = [ (0, 5, 10), (1, 3, 20), (1, 8, 30), (2, 6, 40), ] t1, t2 = 3, 9 result = calculate_sum_in_time_range(n, events, t1, t2) print(result) # Output should be 120"},{"question":"In a village, there are several wells connected by underground pipes. The village headman wants to ensure that every well can supply water to every other well, either directly or indirectly through other wells. The wells and the underground pipes can be represented as a graph. The wells are represented as nodes, and the pipes as edges. The village headman wants to ensure the graph is a connected graph, i.e., there is a path between any two wells. You are given the number of wells, n (1 leq n leq 1000), and the number of pipes, m (0 leq m leq 10000). Each pipe connects two different wells and can be represented as a pair of integers (u, v) (1 leq u, v leq n; u neq v), meaning there is a pipe between well u and well v. Determine if the village is connected based on the given wells and pipes. # Input - The first line contains two integers, n and m. - The next m lines contain two integers each, u and v. # Output - Print `YES` if the village is connected. - Print `NO` if the village is not connected. # Example Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` YES ``` Input ``` 4 2 1 2 3 4 ``` Output ``` NO ```","solution":"def is_connected(n, m, edges): Determine if the village is connected based on the given wells and pipes. :param n: Number of wells (nodes) :param m: Number of pipes (edges) :param edges: List of tuples where each tuple represents an edge (u, v) :return: \\"YES\\" if the village is connected, \\"NO\\" otherwise. if n == 1: return \\"YES\\" from collections import defaultdict, deque graph = defaultdict(list) # Build the graph for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) def bfs(start): queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) # Perform BFS from the first node bfs(1) # Check if all nodes are visited if all(visited[1:]): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a tree consisting of n vertices. Each vertex has a unique integer value associated with it. The tree nodes are numbered from 1 to n. Your task is to process q queries of the following types: 1. For a given vertex v, calculate the sum of values of all vertices in the subtree rooted at v. 2. Update the value of a specific vertex to a new value. Each query can be one of the following formats: 1. `1 v` - Find the sum of values in the subtree rooted at vertex v. 2. `2 v x` - Update the value of vertex v to x. The first line contains two integers n and q (1 le n, q le 2 cdot 10^5). The second line contains n integers a_1, a_2, ..., a_n, where a_i is the value initially associated with the vertex i (1 le a_i le 10^6). Each of the next n-1 lines contains two integers u_i and v_i (1 le u_i, v_i le n), indicating that there is an edge between vertices u_i and v_i. The next q lines describe the queries. Each of them is given in one of the formats described above. Output: For each query of the first type, print the sum of values in the subtree rooted at the specified vertex.","solution":"class Tree: def __init__(self, n, values): self.n = n self.values = values self.tree = [[] for _ in range(n + 1)] self.subtree_sums = [0] * (n + 1) self.visited = [False] * (n + 1) def add_edge(self, u, v): self.tree[u].append(v) self.tree[v].append(u) def dfs(self, node): self.visited[node] = True self.subtree_sums[node] = self.values[node - 1] for neighbor in self.tree[node]: if not self.visited[neighbor]: self.dfs(neighbor) self.subtree_sums[node] += self.subtree_sums[neighbor] def update_value(self, v, x): self.values[v - 1] = x self.visited = [False] * (self.n + 1) self.subtree_sums = [0] * (self.n + 1) self.dfs(1) def query_subtree_sum(self, v): return self.subtree_sums[v] def solve(n, q, values, edges, queries): tree = Tree(n, values) for u, v in edges: tree.add_edge(u, v) tree.dfs(1) result = [] for query in queries: if query[0] == 1: result.append(tree.query_subtree_sum(query[1])) elif query[0] == 2: tree.update_value(query[1], query[2]) return result"},{"question":"In a kingdom far away, there was a thriving community of wizards and warriors. Both groups were heavily dependent on magic potions for their activities. Every month, they would receive a certain allocation of potions for their use. However, their needs varied from month to month, and it became crucial to manage their resources efficiently. You are provided with an integer array `potions_required` of length `n`, where `potions_required[i]` is the number of potions required by the kingdom in the `i`-th month. Fortunately, the kingdom can produce a certain number of potions each month, denoted by `produced_potions`. If the produced potions in any month are less than the required potions, the kingdom can use potions from their reserve, given that the reserve initially contains `reserve_potions` potions. Write a function to determine the minimum number of potions the kingdom should keep in reserve to ensure they never run out when the monthly production is lower than their needs. If it\'s not possible to meet the requirements with the given production and initial reserve, return -1. Function Signature: `def min_initial_reserve(potions_required: List[int], produced_potions: int) -> int:` # Input - `potions_required`: List[int] - An array of length `n` representing the potions required each month. - `produced_potions`: int - The number of potions produced by the kingdom each month. - `reserve_potions`: int - The initial quantity of potions in the reserve. # Output Return the minimum number of potions that should be kept in reserve initially to satisfy the monthly requirements. If it is not possible, return -1. # Example: ``` potions_required = [5, 8, 6, 7] produced_potions = 7 reserve_potions = 3 Output: 4 Explanation: - In the 0th month, 7 potions are produced and 5 are required. No reserve is used. The reserve remains at 4. - In the 1st month, 7 potions are produced and 8 are required. 1 potion from the reserve is used. The reserve decreases to 3. - In the 2nd month, 7 potions are produced and 6 are required. No reserve is used. The reserve remains at 3. - In the 3rd month, 7 potions are produced and 7 are required. No reserve is used. The reserve remains at 3. Thus, initially having 4 potions in reserve ensures that the kingdom never runs out of potions. ``` Constraints: - `1 ≤ n ≤ 1000` - `1 ≤ potions_required[i] ≤ 10^9` - `1 ≤ produced_potions ≤ 10^9`","solution":"from typing import List def min_initial_reserve(potions_required: List[int], produced_potions: int) -> int: Determines the minimum number of potions that should be kept in reserve initially to ensure the kingdom never runs out when the monthly production is lower than their needs. If it\'s not possible to meet the requirements with the given production and initial reserve, return -1. reserve_needed = 0 current_reserve = 0 for required in potions_required: if produced_potions < required: deficit = required - produced_potions current_reserve -= deficit if current_reserve < 0: reserve_needed += abs(current_reserve) current_reserve = 0 return reserve_needed"},{"question":"Given an array of integers and a target value, determine the number of unique pairs of integers in the array that add up to the target value. Each pair of integers must be distinct, and the order of the pairs does not matter. # Input - The first line of input contains two integers n and k (1 ≤ n ≤ 1000 and 1 ≤ k ≤ 10^6) where n is the number of elements in the array, and k is the target sum. - The second line contains n integers, representing the elements of the array. Each integer is guaranteed to be distinct and lies in the range [1, 10^4]. # Output - Output a single integer representing the number of unique pairs that add up to the target value. # Example Input ``` 5 7 1 2 3 4 5 ``` Output ``` 2 ``` Explanation The pairs that add up to 7 are: (2, 5) and (3, 4).","solution":"def count_unique_pairs(n, k, arr): Returns the number of unique pairs of integers in the array that add up to the target value k. pairs = set() seen = set() for number in arr: complement = k - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"A delivery company needs to optimize their route for delivering packages to various locations in a city. The city is modeled as a grid of size m x n, where m is the number of rows and n is the number of columns. The delivery van starts at the top-left corner of the grid (0, 0). Some of the grid squares contain obstacles, which the van cannot pass through. The company wants to find the length of the shortest path from the starting point to the bottom-right corner of the grid (m-1, n-1). The first line contains two integers m and n (1 ≤ m, n ≤ 1000) representing the number of rows and columns in the grid, respectively. The next m lines contain n characters each representing the grid. Each character can be either: - \'.\' (a passable cell where the van can drive), - ‘#’ (an obstacle that the van cannot pass through). Print the length of the shortest path from the top-left to the bottom-right corner. If there is no path, print -1 instead. For example: Input: 4 4 .... .#.. ..#. .... Output: 6","solution":"from collections import deque def shortest_path(m, n, grid): Find the shortest path from (0,0) to (m-1,n-1) in a grid with obstacles. Parameters: m (int): Number of rows in the grid n (int): Number of columns in the grid grid (list of list of str): The grid representation Returns: int: length of the shortest path or -1 if no path exists if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return -1 directions = [(0,1), (1,0), (0,-1), (-1,0)] queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set((0, 0)) while queue: x, y, dist = queue.popleft() if x == m-1 and y == n-1: return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # Basic example to run and check function if __name__ == \\"__main__\\": m = 4 n = 4 grid = [ [\'.\', \'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\', \'.\'], [\'.\', \'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\', \'.\'] ] print(shortest_path(m, n, grid)) # Expected output: 6"},{"question":"Create a function that determines if a given sequence of numbers (of any length) is a Fibonacci sequence. A Fibonacci sequence is defined as a sequence in which each number is the sum of the two preceding ones, starting from 0 and 1. Your function should return True if the given sequence is a Fibonacci sequence and False otherwise. Your code should have the following signature: ```python def is_fibonacci_sequence(sequence: List[int]) -> bool: ```","solution":"from typing import List def is_fibonacci_sequence(sequence: List[int]) -> bool: if len(sequence) < 2: return False # Check if the sequence starts with 0 and 1 if sequence[0] != 0 or sequence[1] != 1: return False # Check the rest of the sequence for i in range(2, len(sequence)): if sequence[i] != sequence[i - 1] + sequence[i - 2]: return False return True"},{"question":"Charlie is a passionate software engineer who loves problem-solving and coding challenges. Recently, he got interested in data compression and decided to try an exercise with strings containing only lowercase English letters. Given an initial string `s` of length `m`, Charlie wants to perform some operations to transform it into another string `t` of length `n` (1 ≤ m, n ≤ 1000). One operation consists of either inserting a single character anywhere in the string, deleting any character from the string, or replacing any character in the string with another character. Charlie\'s goal is to minimize the number of operations required to transform `s` into `t`. You are asked to help Charlie determine the minimum number of operations required. **Input** - The first line contains an integer `m` (1 ≤ m ≤ 1000) representing the length of the initial string `s`. - The second line contains the string `s`. - The third line contains an integer `n` (1 ≤ n ≤ 1000) representing the length of the target string `t`. - The fourth line contains the string `t`. **Output** - Print the minimum number of operations required to transform `s` into `t`. **Example** ``` Input: 4 abcd 5 acbdd Output: 2 ``` **Explanation** In this case, the optimal solution involves replacing the third character `c` with `b` and inserting `d` at the end of the string, resulting in the minimum number of operations which is 2.","solution":"def min_operations_to_transform(s, t): m, n = len(s), len(t) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m + 1): for j in range(n + 1): # If the first string is empty, only option is to insert all characters of the second string if i == 0: dp[i][j] = j # If the second string is empty, only option is to remove all characters of the first string elif j == 0: dp[i][j] = i # If last characters are the same, ignore last character and recur for remaining strings elif s[i - 1] == t[j - 1]: dp[i][j] = dp[i - 1][j - 1] # If last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"You\'re given a string s consisting of lowercase English letters and an integer k. Your goal is to find the k-th most frequent character in the string. If multiple characters have the same frequency, return the lexicographically smallest character among them. The first line contains the string s (1 le |s| le 10^5) — the input string. The second line contains an integer k (1 le k le 26) — the desired rank of frequency. The output should be a single character — the k-th most frequent character. If s does not have k different frequencies, output -1. # Examples Example 1 Input: ``` aabbcc 2 ``` Output: ``` b ``` Explanation: The characters and their frequencies are: a -> 2, b -> 2, c -> 2. The 2nd most frequent character (considering lexicographical order for tie-breaking) is \'b\'. Example 2 Input: ``` zzzzyyys 2 ``` Output: ``` y ``` Explanation: The characters and their frequencies are: z -> 4, y -> 3, s -> 1. The 2nd most frequent character is \'y\'. Example 3 Input: ``` x 1 ``` Output: ``` x ``` Explanation: There\'s one character \'x\' with a frequency of 1. The 1st most frequent character is \'x\'. Example 4 Input: ``` abcd 5 ``` Output: ``` -1 ``` Explanation: Each character appears once, thus there aren\'t 5 different frequencies. The output is -1.","solution":"def kth_most_frequent_char(s, k): from collections import Counter freq_counter = Counter(s) freq_list = sorted(freq_counter.items(), key=lambda item: (-item[1], item[0])) if k > len(freq_list): return -1 return freq_list[k-1][0]"},{"question":"Write a function `find_smiling_intervals` that takes an array of integers and returns the count of \\"smiling intervals\\" within that array. A \\"smiling interval\\" is defined as a contiguous subarray where the first element is smaller than the last element. For instance, in the array `[3, 1, 4, 1, 5]`, the subarray `[3, 1, 4]` is a smiling interval because `3 < 4`. # Input: - An array `arr` of `n` integers `(1 ≤ n ≤ 10^5)`, where each integer is within the range `[1, 10^5]`. # Output: - An integer representing the count of smiling intervals in the array. # Example: Input: ``` 5 3 1 4 1 5 ``` Output: ``` 6 ``` # Explanation: The smiling intervals in the array are: `[3, 1, 4]`, `[3, 1, 4, 1, 5]`, `[1, 4]`, `[1, 4, 1, 5]`, `[4, 1, 5]`, and `[1, 5]`. Therefore, the output is 6.","solution":"def find_smiling_intervals(arr): Returns the count of \\"smiling intervals\\" in the array. A \\"smiling interval\\" is defined as a contiguous subarray where the first element is smaller than the last element. count = 0 n = len(arr) for i in range(n): for j in range(i+1, n): if arr[i] < arr[j]: count += 1 return count"},{"question":"The Dean of the University has decided to renovate the campus gardens. The garden consists of n flower beds, each represented by a distinct positive integer from 1 to n. Each flower bed can be planted with a certain type of flower. However, due to soil properties, some pairs of flower beds must be planted with different types of flowers. You are assigned the task of determining a valid planting configuration for the flower beds, such that all constraints are satisfied, or to determine if no such configuration exists. The first line of input contains two integers n and m (1 ≤ n ≤ 16, 0 ≤ m ≤ 100) — the number of flower beds and the number of constraints respectively. The next m lines each contain two integers ai and bi (1 ≤ ai, bi ≤ n, ai ≠ bi), indicating that the flower beds ai and bi must be planted with different types of flowers. Return the configuration as a list of integers, where the i-th integer represents the type of flower planted in the i-th bed. If multiple valid configurations exist, any one of them is acceptable. If no valid configuration exists, return the string \\"No valid configuration\\". # Example **Input:** ``` 4 3 1 2 2 3 3 4 ``` **Output:** ``` 1 2 1 2 ``` **Input:** ``` 3 3 1 2 2 3 3 1 ``` **Output:** ``` No valid configuration ``` # Notes In the first example, the flower configurations 1 2 1 2 is valid as per the constraints given. In the second example, it is not possible to plant the flower beds with different flower types while meeting all the constraints.","solution":"def valid_configuration(n, m, constraints): from itertools import product if m == 0: return [1] * n for config in product([1, 2], repeat=n): valid = True for a, b in constraints: if config[a-1] == config[b-1]: valid = False break if valid: return list(config) return \\"No valid configuration\\" # Example usage: # valid_configuration(4, 3, [(1, 2), (2, 3), (3, 4)]) should return [1, 2, 1, 2] # valid_configuration(3, 3, [(1, 2), (2, 3), (3, 1)]) should return \\"No valid configuration\\""},{"question":"You are given a grid of size n times m consisting of cells with binary values (0s and 1s). Your task is to determine the length of the longest contiguous sequence of 1s in any row, column, or diagonal (both main and anti-diagonal). Input The first line contains two integers n and m (1 le n, m le 2000) — the number of rows and columns in the grid, respectively. Each of the next n lines contains m binary digits (0 or 1) representing the grid. Output Print a single integer — the length of the longest contiguous sequence of 1s in the grid. Example Input: 4 5 1 0 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 0 0 1 Output: 4","solution":"def longest_contiguous_ones(grid, n, m): def check_sequences(sequence): max_length = 0 current_length = 0 for value in sequence: if value == 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 0 return max(max_length, current_length) max_ones = 0 # Check rows for row in grid: max_ones = max(max_ones, check_sequences(row)) # Check columns for col_idx in range(m): col = [grid[row_idx][col_idx] for row_idx in range(n)] max_ones = max(max_ones, check_sequences(col)) # Check main diagonals for start_idx in range(n): diagonal = [] i, j = start_idx, 0 while i < n and j < m: diagonal.append(grid[i][j]) i += 1 j += 1 max_ones = max(max_ones, check_sequences(diagonal)) for start_idx in range(1, m): diagonal = [] i, j = 0, start_idx while i < n and j < m: diagonal.append(grid[i][j]) i += 1 j += 1 max_ones = max(max_ones, check_sequences(diagonal)) # Check anti-diagonals for start_idx in range(n): diagonal = [] i, j = start_idx, 0 while i >= 0 and j < m: diagonal.append(grid[i][j]) i -= 1 j += 1 max_ones = max(max_ones, check_sequences(diagonal)) for start_idx in range(1, m): diagonal = [] i, j = n - 1, start_idx while i >= 0 and j < m: diagonal.append(grid[i][j]) i -= 1 j += 1 max_ones = max(max_ones, check_sequences(diagonal)) return max_ones"},{"question":"Given a string consisting only of uppercase and lowercase letters (no spaces or special characters), write a function to determine the length of the longest substring where all characters are unique. If there are multiple substrings with the same maximum length, return the length of any one of them. For example: - Input: \\"abcabcbb\\" - Output: 3 (The answer could be \\"abc\\", with the length 3) - Input: \\"bbbbbb\\" - Output: 1 (The answer could be \\"b\\", with the length 1) - Input: \\"pwwkew\\" - Output: 3 (The answer could be \\"wke\\", with the length 3) Write a function `longest_unique_substring_length(s: str) -> int` to solve this problem. Implement an efficient solution with a time complexity of O(n). # Input - A string `s` consisting of only uppercase and lowercase letters (1 ≤ |s| ≤ 10^5). # Output - An integer representing the length of the longest substring with all unique characters. # Function Signature ```python def longest_unique_substring_length(s: str) -> int: # Your code here ``` # Example ```python s = \\"abcabcbb\\" print(longest_unique_substring_length(s)) # Output: 3 s = \\"bbbbbb\\" print(longest_unique_substring_length(s)) # Output: 1 s = \\"pwwkew\\" print(longest_unique_substring_length(s)) # Output: 3 ```","solution":"def longest_unique_substring_length(s: str) -> int: Returns the length of the longest substring with all unique characters. char_map = {} left = 0 max_length = 0 for right in range(len(s)): if s[right] in char_map: # Shift the left pointer to right of the duplicated character\'s last index left = max(left, char_map[s[right]] + 1) char_map[s[right]] = right max_length = max(max_length, right - left + 1) return max_length"},{"question":"Leah enjoys working with strings and finding unique patterns within them. Her latest challenge involves identifying special substrings, which she defines as substrings where no character repeats. Leah wants to write a program to help her find the longest special substring within a given string. Can you help her achieve this? Given a string `str` consisting of lowercase English letters, determine the length and starting position of the longest special substring. If there are multiple substrings of the same maximum length, return the starting position of the first one found. The input consists of a single line with a string `str` of length `n` (1 ≤ n ≤ 1000). Output two integers: the length of the longest special substring and its starting position (1-based). If the string is empty, output 0 and 1. # Example - Input: `abcabcbb` - Output: `3 1` - Explanation: The longest special substring is either \\"abc\\" which has a length of 3 and starts at position 1. - Input: `bbbbb` - Output: `1 1` - Explanation: Each substring with unique characters has a maximum length of 1. - Input: `pwwkew` - Output: `3 3` - Explanation: The longest special substring is \\"wke\\", with length 3 and starting at position 3. # Note - The substring must be contiguous. - The answer must always be the first occurrence of the longest special substring if there are multiple substrings with the same maximum length.","solution":"def longest_special_substring(s): Returns the length and starting position (1-based) of the longest special substring. n = len(s) if n == 0: return 0, 1 max_length = 1 start_position = 1 char_map = {} left = 0 for right in range(n): if s[right] in char_map and char_map[s[right]] >= left: left = char_map[s[right]] + 1 char_map[s[right]] = right current_length = right - left + 1 if current_length > max_length: max_length = current_length start_position = left + 1 return max_length, start_position"},{"question":"You are working on a project to manage a library\'s book inventory system. Your task is to implement a feature that finds books based on different categories and sorts the results. You have a list of books, each book represented by its title, author, year of publication, and category. You will be given multiple queries. Each query has a category to search for, a variable indicating the order to sort the results, and a variable that defines whether to sort the results in ascending or descending order. Sort the books based on the specified order: by title, by author, or by year within the given category. If two books are the same according to the sorting criteria, they should maintain their original relative order. Then, return the list of titles of the books that match the criteria. The first line contains an integer n (1 ≤ n ≤ 10^4), the number of books in the library. The following n lines each contain a string (the title), a string (the author), an integer (the year of publication), and a string (the category). The next line contains an integer q (1 ≤ q ≤ 100), the number of queries. The following q lines each contain a string (the category to search), a string (the order to sort by, can be \\"title\\", \\"author\\", or \\"year\\"), and a string (\\"asc\\" for ascending order or \\"desc\\" for descending order). For each query, output the titles of the books that belong to the specific category according to the specified sorting order, each title on a new line. Example Input: ``` 5 The Great Gatsby F. Scott Fitzgerald 1925 Fiction A Brief History of Time Stephen Hawking 1988 Science 1984 George Orwell 1949 Fiction Sapiens Yuval Noah Harari 2011 Science To Kill a Mockingbird Harper Lee 1960 Fiction 2 Fiction title asc Science year desc ``` Example Output: ``` 1984 The Great Gatsby To Kill a Mockingbird Sapiens A Brief History of Time ```","solution":"def find_books_by_category(books, queries): Filter and sort books based on the given queries. Parameters: books (list of tuples): Each tuple contains (title, author, year, category). queries (list of tuples): Each tuple contains (search_category, sort_field, sort_order). Returns: dict: A dictionary where keys are the query parameters and values are lists of sorted book titles. result = {} for query in queries: search_category, sort_field, sort_order = query filtered_books = [book for book in books if book[3] == search_category] if sort_field == \'title\': sort_key = 0 elif sort_field == \'author\': sort_key = 1 elif sort_field == \'year\': sort_key = 2 reverse = sort_order == \'desc\' sorted_books = sorted(filtered_books, key=lambda x: x[sort_key], reverse=reverse) result[query] = [book[0] for book in sorted_books] return result # Example usage books = [ (\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 1925, \\"Fiction\\"), (\\"A Brief History of Time\\", \\"Stephen Hawking\\", 1988, \\"Science\\"), (\\"1984\\", \\"George Orwell\\", 1949, \\"Fiction\\"), (\\"Sapiens\\", \\"Yuval Noah Harari\\", 2011, \\"Science\\"), (\\"To Kill a Mockingbird\\", \\"Harper Lee\\", 1960, \\"Fiction\\") ] queries = [ (\\"Fiction\\", \\"title\\", \\"asc\\"), (\\"Science\\", \\"year\\", \\"desc\\") ] print(find_books_by_category(books, queries))"},{"question":"In a certain country, there is a popular competition to find the longest path in a forest. The forest can be represented as an undirected graph with n nodes and m edges, where each node represents a tree, and each edge represents a trail between two trees. Each trail has a certain length. The objective of the competition is to start from any tree and find the longest simple path in the forest (a path that does not visit any node more than once). You are given the number of trees n and the number of trails m. You are also provided with a list of edges, each described by three integers u, v, and w, where u and v are the nodes connected by the trail, and w is the length of the trail. Write a program to determine the length of the longest simple path in the forest. The first line contains two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 3000). Each of the next m lines contains three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), describing a trail between trees u and v with length w. Output a single integer — the length of the longest simple path in the forest. Note: - The forest may be disconnected, so the longest simple path might not necessarily involve all nodes. - If there are no trails (m=0), the longest simple path length is zero. Example: Input: 5 4 1 2 3 2 3 4 3 4 2 4 5 6 Output: 15 In the example, one of the longest simple paths is: 1 -> 2 -> 3 -> 4 -> 5 with a total length of 3 + 4 + 2 + 6 = 15.","solution":"def find_longest_simple_path(n, m, edges): from collections import defaultdict import sys def dfs(node, visited, length): nonlocal max_length visited[node] = True all_visited.add(node) for neighbor, weight in graph[node]: if not visited[neighbor]: dfs(neighbor, visited, length + weight) visited[node] = False max_length = max(max_length, length) if m == 0: return 0 graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) max_length = 0 all_visited = set() for node in range(1, n + 1): if node not in all_visited: visited = [False] * (n + 1) dfs(node, visited, 0) return max_length"},{"question":"You are given an array of integers. You need to transform this array into a strictly increasing array where each element is greater than the previous element by exactly 1. To achieve this, you can either increment elements or leave them as they are, and the cost of incrementing an element by 1 is 1 unit. Given the array, determine the minimum cost to transform it into a strictly increasing array where each element is greater than the previous one by exactly 1. The first line of input contains a single integer t (1 leq t leq 10) — the number of test cases. For each test case, the first line contains a single integer n (1 leq n leq 100) — the size of the array. The second line contains n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^4) — elements of the array. Output a single integer — the minimum cost for each test case to make the array strictly increasing. **Example:** ``` Input: 2 3 1 1 1 4 1 2 3 4 Output: 3 0 ``` **Explanation:** - For the first test case, we can transform array [1, 1, 1] to [1, 2, 3] at a cost of 3. - For the second test case, the array is already strictly increasing, so the cost is 0.","solution":"def min_cost_to_increasing(t, test_cases): results = [] for case in test_cases: n, arr = case cost = 0 for i in range(1, n): if arr[i] <= arr[i - 1]: increment = arr[i - 1] - arr[i] + 1 arr[i] += increment cost += increment results.append(cost) return results"},{"question":"In a distant future, the Alliance of Galactic Planets has developed a communication network that spans multiple planets. Each planet has a communication tower, which is directly connected to a communication hub that can transmit messages to any other hub instantaneously. However, within a planet, communication between different towers must be done via a series of cables which are only laid on specific paths. The network can be represented as a weighted, undirected graph where nodes represent towers and edges represent communication cables with a weight corresponding to the transmission time (in milliseconds) between two towers. To determine the efficiency of the network, the Alliance needs to process multiple queries where each query consists of a request to find the shortest time required to send a message from one tower to another on the same planet. The first line of the input contains three integers, n, m, and q (2 leq n leq 1000, 1 leq m leq 10000, 1 leq q leq 1000) – the number of towers, the number of communication cables, and the number of queries, respectively. The next m lines each contain three integers, u, v, and w (1 leq u, v leq n, 1 leq w leq 1000) – representing a communication cable between towers u and v with transmission time w milliseconds. The following q lines each contain two integers, a and b (1 leq a, b leq n) - representing a query asking for the minimum transmission time required to send a message from tower a to tower b. Output q integers, one per line – the answers to each query indicating the shortest transmission time from the start tower to the destination tower. If it is not possible to send a message between the towers, print -1 instead. # Example: Input: ``` 4 4 3 1 2 3 2 3 4 3 4 6 1 4 10 1 3 2 4 1 4 ``` Output: ``` 7 10 10 ``` Explanation: - For the first query, the shortest path from tower 1 to tower 3 is via tower 2, taking 7 milliseconds in total (3 + 4). - For the second query, the shortest path from tower 2 to tower 4 is directly taking 10 milliseconds. - For the third query, the shortest path from tower 1 to tower 4 can be taken directly taking 10 milliseconds.","solution":"import heapq def find_shortest_paths(n, m, edges, queries): Determines the shortest paths based on the queries using Dijkstra\'s algorithm. Args: n (int): Number of towers m (int): Number of communication cables edges (list of tuples): Each tuple contains (u, v, w) representing a cable between towers u and v with weight w queries (list of tuples): Each tuple contains (a, b) representing the starting and ending tower to find the shortest path Returns: list: A list containing shortest transmission times for each query or -1 if no path exists # Create adjacency list graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start): # Distance dictionary, initialized to infinity distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances # Precompute shortest paths from every node shortest_paths = {} for i in range(1, n + 1): shortest_paths[i] = dijkstra(i) # Answer queries results = [] for a, b in queries: result = shortest_paths[a][b] if result == float(\'inf\'): results.append(-1) else: results.append(result) return results"},{"question":"A software company is developing a new sorting algorithm, but they need to test it extensively. To do this, they\'ve devised a function called `sort_with_limits` that sorts an array of integers with some constraints. Specifically, the function should only sort subarrays of a given size limit, `k`. The rest of the array remains unaffected and in its original order. You are given an array of integers `arr` and an integer `k`, representing the size limit for the subarrays to be sorted. Your task is to sort the array by sorting every subarray of length `k` in place and then leaving the remaining elements after each sorted subarray in their original order. If the length of the array is not exactly divisible by `k`, the remaining elements at the end, which are fewer than `k`, should also be sorted. Write a function `sort_with_limits(arr, k)` that sorts each subarray of length `k` within the given array `arr`. # Input - An array of integers `arr` (1 ≤ len(arr) ≤ 10^5, -10^9 ≤ arr[i] ≤ 10^9) - An integer `k` (1 ≤ k ≤ len(arr)) # Output - The function should return the sorted array. # Example ```python def sort_with_limits(arr, k): n = len(arr) for i in range(0, n, k): arr[i:i+k] = sorted(arr[i:i+k]) return arr # Test cases print(sort_with_limits([3, 2, 1, 6, 5, 4], 3)) # Output: [1, 2, 3, 4, 5, 6] print(sort_with_limits([10, 7, 8, 9, 1, 2, 5], 4)) # Output: [7, 8, 9, 10, 1, 2, 5] print(sort_with_limits([1, 5, 3, 2, 4], 2)) # Output: [1, 5, 2, 3, 4] ``` Note: - For the first example, the array is divided into subarrays [3, 2, 1] and [6, 5, 4]. After sorting each subarray, the array becomes [1, 2, 3, 4, 5, 6]. - For the second example, the array is divided into subarrays [10, 7, 8, 9] and [1, 2, 5]. After sorting each subarray, the array becomes [7, 8, 9, 10, 1, 2, 5]. - For the third example, the array is divided into subarrays [1, 5], [3, 2], and [4]. After sorting each subarray, the array becomes [1, 5, 2, 3, 4].","solution":"def sort_with_limits(arr, k): Sorts each subarray of length `k` within the given array `arr`. n = len(arr) for i in range(0, n, k): arr[i:i+k] = sorted(arr[i:i+k]) return arr"},{"question":"You are given a list of `n` integers. You need to find a continuous subarray of the maximum possible length where the greatest common divisor (GCD) of the elements in the subarray is greater than 1. You have to answer `t` independent test cases. The first line of the input contains one integer `t` (`1 ≤ t ≤ 100`) — the number of test cases. For each test case, the first line contains one integer `n` (`1 ≤ n ≤ 1000`) — the number of integers in the list. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (`1 ≤ a_i ≤ 10^5`). For each test case, print an integer representing the maximum length of a continuous subarray where the GCD of all its elements is greater than 1. If no such subarray exists, print 0. # Example Input: ``` 2 5 2 4 6 3 9 4 5 7 11 13 ``` Output: ``` 3 0 ``` Explanation: - For the first test case, the subarray `[2, 4, 6]` has a GCD of 2 which is greater than 1, and its length is 3. This is the longest subarray fulfilling the criteria. - For the second test case, no subarray has a GCD greater than 1, so the result is 0.","solution":"from math import gcd from functools import reduce from itertools import combinations def max_gcd_subarray_length(arr): def calculate_gcd(subarr): return reduce(gcd, subarr) n = len(arr) max_length = 0 for length in range(2, n + 1): for i in range(n - length + 1): subarr = arr[i:i + length] if calculate_gcd(subarr) > 1: max_length = max(max_length, length) return max_length def solve(test_cases): results = [] for n, a in test_cases: results.append(max_gcd_subarray_length(a)) return results"},{"question":"You are given an array of length n consisting of numbers between 1 and n. The array represents a permutation of the numbers 1, 2, ldots, n. You are also given a set of queries, each consisting of two integers l and r (1 le l le r le n). For each query, you need to determine the number of distinct values in the subarray from index l to r inclusive. Write a function that processes the permutation array and the list of queries and returns the number of distinct values for each query. # Input: - The first line contains an integer n (1 le n le 10^5) — the size of the permutation array. - The second line contains n integers representing the permutation array. - The third line contains an integer q (1 le q le 10^5) — the number of queries. - The next q lines each contain two integers l and r (1 le l le r le n) — the bounds of the subarray for that query. # Output: - For each query, print a single integer — the number of distinct values in the subarray from index l to r. # Example: Input: ``` 5 4 3 1 5 2 3 1 5 2 4 3 5 ``` Output: ``` 5 3 3 ``` # Explanation: - For the first query, the subarray is [4, 3, 1, 5, 2], which contains 5 distinct values. - For the second query, the subarray is [3, 1, 5], which contains 3 distinct values. - For the third query, the subarray is [1, 5, 2], which contains 3 distinct values.","solution":"def count_distinct_in_subarrays(n, permutation, queries): Given a permutation array and a list of queries, returns the number of distinct values for each query subarray. :param n: Integer, size of the permutation array. :param permutation: List of integers of length n representing the permutation array. :param queries: List of tuples where each tuple contains two integers (l, r) defining the bounds of a subarray. :returns: List of integers where each integer is the count of distinct values in the corresponding subarray. results = [] for l, r in queries: # Extract the subarray and convert it into a set to find unique elements subarray = permutation[l-1:r] # adjust for 0-based indexing distinct_count = len(set(subarray)) results.append(distinct_count) return results"},{"question":"You are given an array of integers representing the prices of different items in a store. Your goal is to maximize the number of items you can buy without exceeding a given budget. The first line contains two integers: the number of items, `n` (`1 <= n <= 10^5`), and the total budget, `B` (`0 <= B <= 10^9`). The second line contains `n` integers, where each integer `p_i` (`1 <= p_i <= 10^6`) represents the price of the i-th item. Your task is to calculate the maximum number of items you can purchase without exceeding the budget. **Input:** ``` 5 50 20 10 50 15 25 ``` **Output:** ``` 3 ``` Explanation: In this example, with a budget of 50, you can buy up to 3 items with prices [20, 10, 15], which sums up to 45. Any other combination of 3 items or any 4 items would exceed the budget.","solution":"def max_items_within_budget(n, B, prices): Returns the maximum number of items that can be bought within the given budget. Parameters: n (int): The number of items. B (int): The total budget. prices (List[int]): The list of prices of the items. Returns: int: The maximum number of items. # Sort the prices in ascending order prices.sort() total_spent = 0 item_count = 0 for price in prices: if total_spent + price <= B: total_spent += price item_count += 1 else: break return item_count"},{"question":"Given an integer array nums, return the maximum product you can obtain by multiplying three elements from the array. You must write a function `maxProductOfThree` that takes a list of integers as input and returns an integer representing the maximum product of any three numbers in the list. Your function should have the following signature: ```python def maxProductOfThree(nums: List[int]) -> int: ``` # Constraints: - The length of `nums` will be at least 3. - Each element in `nums` will have a value between `-1000` and `1000`. # Example: ```python maxProductOfThree([1, 2, 3, 4]) # Returns: 24 (because 2 * 3 * 4 = 24) maxProductOfThree([-10, -10, 5, 2]) # Returns: 500 (because -10 * -10 * 5 = 500) ```","solution":"from typing import List def maxProductOfThree(nums: List[int]) -> int: Returns the maximum product of any three integers in the list nums. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"You are given an array of integers representing the heights of students standing in a row. The school needs to rearrange the students such that the row of students becomes non-decreasing in height. To achieve this, you are allowed to perform the following operation as many times as necessary: choose any two adjacent students and swap their positions. Your task is to determine the minimum number of swaps required to rearrange the students in non-decreasing order of their height. For example, if the initial heights are [3, 1, 2], the following operations would sort the array: 1. Swap students at positions 1 and 2, resulting in [1, 3, 2]; 2. Swap students at positions 2 and 3, resulting in [1, 2, 3]. Thus, the minimum number of swaps required is 2. Write a function that takes an array of integers representing the heights of students and returns the minimum number of swaps required to sort the array in non-decreasing order. The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of students in the row. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9), where hi is the height of the i-th student. In the only line of output, print the minimum number of swaps required to sort the array in non-decreasing order. Example 1: Input: 3 3 1 2 Output: 2 Example 2: Input: 5 5 4 3 2 1 Output: 10 Example 3: Input: 4 1 3 5 2 Output: 2","solution":"def count_inversions(arr): temp_arr = [0]*len(arr) return merge_sort(arr, temp_arr, 0, len(arr)-1) def merge_sort(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right)//2 inv_count += merge_sort(arr, temp_arr, left, mid) inv_count += merge_sort(arr, temp_arr, mid+1, right) inv_count += merge(arr, temp_arr, left, mid, right) return inv_count def merge(arr, temp_arr, left, mid, right): i = left j = mid + 1 k = left inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def minimum_swaps_to_sort(arr): return count_inversions(arr)"},{"question":"A telecommunications company is planning to expand its network infrastructure into a new city. The city\'s layout is represented as an undirected graph with `n` nodes representing different locations and `m` edges representing possible direct connections between those locations. The company wants to install a high-speed fiber optic cable such that every pair of locations can communicate with each other either directly or indirectly. The cost of laying down fiber optic cable along an edge (direct connection) is known and varies for each connection. Given the number of locations and their direct connection costs, determine the minimum cost to ensure that all locations are connected directly or indirectly. # Input - The first line contains two integers `n` and `m` (1 ≤ n ≤ 10^4, 0 ≤ m ≤ 2 * 10^4), representing the number of locations and the number of direct connections, respectively. - The next `m` lines each contain three integers `u`, `v` and `w` (1 ≤ u, v ≤ n; 1 ≤ w ≤ 10^6), representing a connection between locations `u` and `v` with a cost of `w`. # Output Output a single integer, the minimum cost to connect all locations. If it\'s impossible to connect all locations, output -1. # Example Input ``` 4 5 1 2 3 2 3 4 3 4 5 1 4 10 2 4 1 ``` Output ``` 8 ``` Explanation One of the possible ways to connect all the locations at a minimum cost is: - Connect location 1 to location 2 with a cost of 3. - Connect location 2 to location 4 with a cost of 1. - Connect location 3 to location 4 with a cost of 4. The total cost is 3 + 1 + 4 = 8.","solution":"def min_cost_to_connect_locations(n, m, connections): Find the minimum cost to connect all locations in a city using Kruskal\'s algorithm for the Minimum Spanning Tree (MST). :param n: Number of locations (nodes) :param m: Number of direct connections (edges) :param connections: List of connections, where each connection is represented as a tuple (u, v, w) u and v represent nodes and w represents cost of connection :return: Minimum cost to connect all locations, or -1 if not possible def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 # Sort connections by weight connections.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n+1): parent.append(node) rank.append(0) mst_cost = 0 edges_in_mst = 0 for connection in connections: u, v, w = connection root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_cost += w edges_in_mst += 1 if edges_in_mst == n-1: break if edges_in_mst != n-1: return -1 return mst_cost"},{"question":"You are given a tree with n nodes numbered from 1 to n. Each edge of the tree has a weight. Your task is to perform the following two types of queries: 1. Update the weight of a specific edge. 2. Find the sum of the weights on the path between two given nodes. Input format: - The first line contains two integers n and q (1 leq n, q leq 10^5) — the number of nodes and the number of queries, respectively. - The next n-1 lines each contain three integers u, v, w (1 leq u, v leq n, 1 leq w leq 10^9) representing an edge between nodes u and v with weight w. - The next q lines each describe a query in one of the following formats: - \\"1 u v w\\" (1 leq u, v leq n, 1 leq w leq 10^9): Update the weight of the edge between nodes u and v to w. - \\"2 u v\\" (1 leq u, v leq n): Print the sum of the weights along the path from node u to node v. Output format: For each query of the second type, output the sum of the weights on the path between the two given nodes. Example: Input: ``` 5 3 1 2 4 1 3 2 2 4 6 2 5 3 2 1 4 1 2 4 5 2 1 4 ``` Output: ``` 10 9 ``` Explanation: - The tree initially has edges: (1-2 with weight 4), (1-3 with weight 2), (2-4 with weight 6), (2-5 with weight 3). - The first query asks for the sum of the weights along the path from node 1 to node 4, which is 4 + 6 = 10. - The second query updates the weight of the edge (2-4) to 5. - The third query asks for the sum of the weights along the path from node 1 to node 4 again, which is now 4 + 5 = 9.","solution":"class Tree: def __init__(self, n): self.n = n self.adj = {i: [] for i in range(1, n+1)} self.weights = {} def add_edge(self, u, v, w): self.adj[u].append((v, w)) self.adj[v].append((u, w)) self.weights[(u, v)] = w self.weights[(v, u)] = w def update_weight(self, u, v, w): self.weights[(u, v)] = w self.weights[(v, u)] = w for i, (neighbor, _) in enumerate(self.adj[u]): if neighbor == v: self.adj[u][i] = (v, w) for i, (neighbor, _) in enumerate(self.adj[v]): if neighbor == u: self.adj[v][i] = (u, w) def find_path_weight(self, u, v): visited = set() return self._dfs(u, v, visited) def _dfs(self, current, target, visited): if current == target: return 0 visited.add(current) for neighbor, weight in self.adj[current]: if neighbor not in visited: result = self._dfs(neighbor, target, visited) if result is not None: return weight + result return None def process_queries(n, edges, queries): tree = Tree(n) for u, v, w in edges: tree.add_edge(u, v, w) results = [] for query in queries: parts = query.split() t = int(parts[0]) if t == 1: u, v, w = int(parts[1]), int(parts[2]), int(parts[3]) tree.update_weight(u, v, w) elif t == 2: u, v = int(parts[1]), int(parts[2]) results.append(tree.find_path_weight(u, v)) return results"},{"question":"You are given a rectangular grid of size n × m. Each cell of the grid is either empty or occupied by a rock. You need to write a program to check if it\'s possible to move from the top-left corner to the bottom-right corner of the grid, moving only through empty cells. The valid moves from any empty cell are to an adjacent empty cell either to the right, to the left, upwards, or downwards. To determine this, you can use Breadth-First Search (BFS) or Depth-First Search (DFS). The input consists of: - Two integers n and m (1 ≤ n, m ≤ 1000) separated by a space, representing the number of rows and columns of the grid, respectively. - n lines each containing m characters, representing the grid. Each character is either \'.\' denoting an empty cell or \'#\' denoting a cell occupied by a rock. Output: - \\"YES\\" if it is possible to move from the top-left corner to the bottom-right corner through empty cells only. - \\"NO\\" otherwise. Example: Input: ``` 4 4 .#.. ..#. #..# .... ``` Output: ``` YES ``` Explanation: It\'s possible to move from the top-left corner to the bottom-right corner by following the path through empty cells.","solution":"from collections import deque def is_path_possible(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" directions = [(-1,0), (1,0), (0,-1), (0,1)] # up, down, left, right visited = [[False] * m for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() # If we reached the bottom-right cell if x == n-1 and y == m-1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"You are given a list of strings, where each string is derived from an identifier used in a programming context. Each identifier follows a specific format and naming convention. Your task is to determine whether each identifier in the list follows a valid camel case naming convention. Camel case format requires: 1. The first character to be a lowercase letter. 2. No spaces or underscores between words. 3. Each subsequent word to begin with an uppercase letter. 4. The remaining characters of the word to be lowercase letters. Can you process all the identifiers and verify if they follow the camel case format? The first line contains an integer `n` (1 le n le 100000) — the number of identifiers. Then follows `n` lines, each containing a single string of length from 1 to 100000 — the identifier. For each identifier, print \\"YES\\" if it follows the camel case naming convention and \\"NO\\" otherwise.","solution":"import re def is_camel_case(identifier): Determine if the given identifier is in camel case format. pattern = \'^[a-z]+(?:[A-Z][a-z]*)*\' return re.match(pattern, identifier) is not None def check_identifiers(identifiers): Given a list of identifiers, determine if each is in camel case format and return a list of results. return [\\"YES\\" if is_camel_case(identifier) else \\"NO\\" for identifier in identifiers]"},{"question":"You are given an integer matrix of size m times n filled with non-negative integers. Your goal is to find the length of the longest increasing path in the matrix. From each cell, you can either move to four possible directions (left, right, up, and down). You may NOT move diagonally or outside the boundary of the matrix. Input consists of a first line containing the integers m and n (1 le m, n le 200), followed by m lines each containing n space-separated integers representing the matrix (0 le matrix[i][j] le 10000). Print the length of the longest increasing path. Example: `Input:` ```plaintext 3 3 9 9 4 6 6 8 2 1 1 ``` `Output:` ```plaintext 4 ``` Explanation: The longest increasing path is [1, 2, 6, 9].","solution":"def longest_increasing_path(matrix): Given an integer matrix, find the length of the longest increasing path. Each move can only go to one of four directions (left, right, up, down). if not matrix or not matrix[0]: return 0 m, n = len(matrix), len(matrix[0]) dp = [[-1] * n for _ in range(m)] def dfs(x, y): if dp[x][y] != -1: return dp[x][y] max_len = 1 directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and matrix[nx][ny] > matrix[x][y]: max_len = max(max_len, 1 + dfs(nx, ny)) dp[x][y] = max_len return max_len max_path_length = 0 for i in range(m): for j in range(n): max_path_length = max(max_path_length, dfs(i, j)) return max_path_length def main(): m, n = map(int, input().split()) matrix = [list(map(int, input().split())) for _ in range(m)] result = longest_increasing_path(matrix) print(result)"},{"question":"Given a string s and a set of words dict, find all the starting indices of substrings in s that are a concatenation of each word in dict exactly once without any intervening characters. The words in dict can be in any order. # Input - The string s consists of lowercase English letters and is at most 10^4 characters long. - The dictionary dict contains at most 20 words. - All the words in the dictionary have the same length. - Dictionary words are lowercase English letters. # Output - Output all starting indices of substring(s) in s that are the concatenation of each word in dict exactly once, in any order. Indices should be printed in ascending order. # Example Input ``` s: \\"barfoothefoobarman\\" dict: [\\"foo\\", \\"bar\\"] ``` Output ``` [0, 9] ``` Explanation - Starting from index 0, \\"barfo\\" is a concatenation of the words \\"bar\\" and \\"foo\\" which are in the set dict. - Starting from index 9, \\"fooba\\" is a concatenation of the words \\"foo\\" and \\"bar\\" in the set dict.","solution":"def find_substring_indices(s, words): if not s or not words: return [] word_len = len(words[0]) words_count = len(words) substring_len = word_len * words_count word_freq = {} for word in words: word_freq[word] = word_freq.get(word, 0) + 1 result = [] for i in range(len(s) - substring_len + 1): seen_words = {} for j in range(0, substring_len, word_len): word = s[i + j:i + j + word_len] if word in word_freq: seen_words[word] = seen_words.get(word, 0) + 1 if seen_words[word] > word_freq[word]: break else: break if seen_words == word_freq: result.append(i) return result"},{"question":"John is exploring a digital clock that displays time in a 24-hour format (hh:mm). He wants to know how much time has elapsed between two given times on the same day. Write a program that takes two times as input and calculates the difference in minutes between them. Each input time will be in the format \\"hh:mm\\", where \\"hh\\" is a two-digit hour between 00 and 23, and \\"mm\\" is a two-digit minute between 00 and 59. The first line contains an integer `t` (1 leq t leq 10^4), indicating the number of test cases. The following `t` lines each contain two times: `start_time` and `end_time`. For each test case, calculate and output the number of minutes between `start_time` and `end_time`. If `end_time` is earlier on the same day than `start_time`, it means the duration spans midnight. # Example Input ``` 3 12:30 14:45 22:50 01:20 00:00 23:59 ``` Output ``` 135 150 1439 ``` # Explanation 1. The first test case spans from 12:30 to 14:45. The elapsed time is 2 hours and 15 minutes (135 minutes). 2. The second test case spans from 22:50 to 01:20. This crosses midnight, so the elapsed time is 2 hours and 30 minutes (150 minutes). 3. The third test case spans from 00:00 to 23:59. This is nearly a full day, so the elapsed time is 1439 minutes.","solution":"def time_difference(start_time, end_time): Calculate the difference in minutes between start_time and end_time on the same day. start_hour, start_minute = map(int, start_time.split(\':\')) end_hour, end_minute = map(int, end_time.split(\':\')) start_total_minutes = start_hour * 60 + start_minute end_total_minutes = end_hour * 60 + end_minute if end_total_minutes >= start_total_minutes: return end_total_minutes - start_total_minutes else: return (24 * 60 - start_total_minutes) + end_total_minutes def calculate_time_differences(t, time_cases): Calculate the time differences for a list of time cases. result = [] for start_time, end_time in time_cases: result.append(time_difference(start_time, end_time)) return result"},{"question":"You are given a list of integers representing scores from a game. Each player receives a non-negative integer score. Your task is to compute the rank of each player based on their score. The player with the highest score is ranked 1, the next highest is ranked 2, and so on. If two or more players have the same score, they should receive the same rank, but the next rank should be incremented appropriately. For example, if two players are tied for the first place, the next player would be ranked 3. Write a function `calculate_ranks(scores)` that takes a list of integers representing the scores and returns a list of integers representing the ranks of each player in the input list. # Input - A list of non-negative integers representing the scores, where each integer is between 0 and 1000, inclusive. - The length of the list will be between 1 and 1000, inclusive. # Output - A list of integers representing the ranks of each player, in the same order as the input list. # Example Input ``` scores = [100, 50, 50, 25] ``` Output ``` ranks = [1, 2, 2, 4] ``` Explanation - The first player has the highest score of 100 and hence is ranked 1. - The second and third players are tied with a score of 50 and are both ranked 2. - The fourth player has a score of 25 and since they are lower than the tied second and third players, they are ranked 4. Write an implementation of the function `calculate_ranks(scores)` that satisfies the above specification.","solution":"def calculate_ranks(scores): Given a list of scores, returns the ranks of each score in the same order. sorted_scores = sorted([(score, i) for i, score in enumerate(scores)], reverse=True) ranks = [0] * len(scores) current_rank = 1 for i in range(len(sorted_scores)): if i > 0 and sorted_scores[i][0] < sorted_scores[i-1][0]: current_rank = i + 1 ranks[sorted_scores[i][1]] = current_rank return ranks"},{"question":"Given a list of student records for a particular semester, each record contains a student\'s ID, name, and their grades for three subjects. Your task is to identify the student(s) who have the highest average grade among the given records. If multiple students share the highest average grade, return all of them. The first line contains an integer n (1 ≤ n ≤ 100) — the number of students. The following n lines each contain a student\'s ID (a string of alphanumeric characters), name (a string containing only alphabetic characters), and three integer grades (separated by spaces). - For each student, compute the average (mean) of their three grades. - Identify the student(s) with the highest average grade. - Print the ID and name of each student with the highest average grade in the order they appear in the input. If there are multiple students with the highest average, print each of their IDs and names on a new line. Example: Input: ``` 5 A001 John 78 82 91 A002 Alice 91 85 87 A003 Bob 86 86 86 A004 Clara 81 79 91 A005 David 85 95 80 ``` Output: ``` A002 Alice ``` Explanation: - The average grades are calculated as follows: - John: (78 + 82 + 91) / 3 = 83.67 - Alice: (91 + 85 + 87) / 3 = 87.67 - Bob: (86 + 86 + 86) / 3 = 86 - Clara: (81 + 79 + 91) / 3 = 83.67 - David: (85 + 95 + 80) / 3 = 86.67 Alice has the highest average grade of 87.67. Therefore, Alice\'s information is printed as output.","solution":"def students_with_highest_average(students): Returns a list of student IDs and names with the highest average grade. Parameters: students (list of tuples): A list of tuples where each tuple contains a student\'s ID, name, and three grades. Returns: list of tuples: A list of tuples containing the ID and name of the student(s) with the highest average grade. highest_average_students = [] highest_average = -1 for student in students: student_id, student_name, grade1, grade2, grade3 = student average = (grade1 + grade2 + grade3) / 3.0 if average > highest_average: highest_average = average highest_average_students = [(student_id, student_name)] elif average == highest_average: highest_average_students.append((student_id, student_name)) return highest_average_students def parse_input(n, lines): Parses the input lines into a structured format. Parameters: n (int): Number of students. lines (list of str): List of student record lines. Returns: list of tuples: A list of tuples where each tuple contains a student\'s ID, name, and three grades. students = [] for line in lines: parts = line.split() student_id = parts[0] student_name = parts[1] grades = list(map(int, parts[2:])) students.append((student_id, student_name, *grades)) return students"},{"question":"Given an array of integers, find the minimum size subarray (contiguous elements) whose sum is greater than or equal to a given integer `S`. If there is no such subarray, return 0. More formally, you are given an integer array `a` of length `n` and an integer `S`. Your task is to find the smallest `k` such that there exists an index `i` with `i + k - 1 ≤ n` where the sum of the subarray `a[i]...a[i+k-1]` is at least `S`. The first line contains the integer `n` (1 ≤ `n` ≤ 10^6), representing the number of elements in the array. The second line contains `n` integers `a[1], a[2], ..., a[n]` (|a[i]| ≤ 10^4) — the elements of the array `a`. The third line contains the integer `S` (1 ≤ `S` ≤ 10^9). Print a single integer representing the length of the smallest subarray with a sum greater than or equal to `S`. If no such subarray exists, print 0.","solution":"def min_subarray_length(arr, S): This function finds the minimum size subarray whose sum is greater than or equal to S. If there is no such subarray, it returns 0. n = len(arr) min_length = n + 1 current_sum = 0 start = 0 for end in range(n): current_sum += arr[end] # Slide the window as long as the current sum is greater than or equal to S while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length <= n else 0"},{"question":"You\'ve been given two strings, s1 and s2, both composed of lowercase letters. Your task is to determine whether the second string s2 can be formed by deleting some characters from the first string s1 without rearranging the remaining characters. # Input The input consists of two lines: 1. The first line contains the string s1 (1 ≤ length(s1) ≤ 100,000). 2. The second line contains the string s2 (1 ≤ length(s2) ≤ 100,000). # Output Print \\"YES\\" if s2 can be formed by deleting some characters from s1 without rearranging the remaining characters. Otherwise, print \\"NO\\". # Example Input ``` abcde ace ``` Output ``` YES ``` Input ``` abcde aec ``` Output ``` NO ``` # Explanation In the first example, s2 (\\"ace\\") can be formed by deleting \'b\' and \'d\' from s1 (\\"abcde\\"), hence the output is \\"YES\\". In the second example, it\'s not possible to form s2 (\\"aec\\") from s1 (\\"abcde\\") as the characters \'a\', \'e\', and \'c\' do not appear in the same order in s1 without skipping the characters in between, hence the output is \\"NO\\".","solution":"def can_form_by_deleting(s1, s2): Determines whether s2 can be formed by deleting some characters from s1 without rearranging the remaining characters. Parameters: s1 (str): The first string. s2 (str): The second string. Returns: str: \\"YES\\" if s2 can be formed, otherwise \\"NO\\". it = iter(s1) for char in s2: if char not in it: return \\"NO\\" return \\"YES\\""},{"question":"You are given a binary tree with N nodes. Each node has a value assigned to it, and the tree is rooted at node 1. You need to find the largest value path starting from the root and ending at any leaf node. Path in this context is defined as the sum of the values of all nodes in the path from the root to a leaf. The input consists of multiple test cases. First line of each test case contains an integer N (1 ≤ N ≤ 10^5) denoting the number of nodes in the tree. The second line contains N integers V1, V2, ..., VN (1 ≤ Vi ≤ 10^6) where Vi is the value of the i-th node. Each of the following N-1 lines contains two integers u and v denoting an edge between nodes u and v. The output should be an integer which is the maximum path sum for each test case. The input terminates when N is zero. Example: Input: 3 1 2 3 1 2 1 3 4 1 3 5 7 1 2 2 3 2 4 0 Output: 4 11 Note: - In the first test case, the possible paths are from node 1 to 2 with a sum of 1+2=3, and from node 1 to 3 with a sum of 1+3=4. The maximum path sum is 4. - In the second test case, the possible paths are from node 1 to 2 to 3 with a sum of 1+3+5=9, and from node 1 to 2 to 4 with a sum of 1+3+7=11. The maximum path sum is 11.","solution":"from collections import defaultdict def max_path_sum(N, values, edges): if N == 0: return 0 tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) def dfs(node, parent): current_max_sum = values[node - 1] max_sum_child = 0 for neighbor in tree[node]: if neighbor == parent: continue max_sum_child = max(max_sum_child, dfs(neighbor, node)) return current_max_sum + max_sum_child return dfs(1, -1)"},{"question":"Given an array of integers representing the stock prices of a company in chronological order, write a function that calculates the maximum profit you can achieve. You are allowed to complete at most `k` transactions, where a transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once (i.e., you must sell the stock before you buy again). Your function should take in the following parameters: 1. An integer array `prices` of length `n` where `prices[i]` is the stock price on day `i`. 2. An integer `k` representing the maximum number of transactions allowed. The function should return an integer representing the maximum profit you can achieve. **Sample Input:** ``` prices = [3,3,5,0,0,3,1,4] k = 2 ``` **Sample Output:** ``` 6 ``` **Explanation:** - Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. - Buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. Thus, the total profit is 3 + 3 = 6. **Constraints:** - `0 <= k <= 100` - `0 <= n <= 1000` - `0 <= prices[i] <= 1000` Write a function `maxProfit(prices: List[int], k: int) -> int` to solve the problem.","solution":"def maxProfit(prices, k): if not prices or k == 0: return 0 n = len(prices) # If k is greater than or equal to n//2, then it\'s the same as unlimited transactions problem. if k >= n // 2: max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit # dp[i][j] represents the max profit up to day j with at most i transactions dp = [[0] * n for _ in range(k + 1)] for i in range(1, k + 1): max_diff = -prices[0] for j in range(1, n): dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff) max_diff = max(max_diff, dp[i - 1][j] - prices[j]) return dp[k][n - 1]"},{"question":"In a magical land, there live n different types of creatures, each having certain power levels. The king of the land has ordered the strongest creature of each type to attend a grand meeting. You are given n lists, each representing the creatures of a different type along with their respective power levels. You need to determine if there is exactly one strongest creature for each type. Print the power levels of these strongest creatures if they exist. If any type has multiple strongest creatures with the same power level, print -1. If it\'s impossible to find the strongest creature for each type, also print -1. The first line contains an integer n (1 ≤ n ≤ 100). Each of the next n lines contains an integer ki (1 ≤ ki ≤ 100) followed by ki space-separated positive integers representing the power levels of creatures of type i (1 ≤ power level ≤ 1000). If there is exactly one strongest creature for each type, print their power levels in the order they appear. Otherwise, print -1.","solution":"def strongest_creatures(n, creatures): Determine the strongest creature of each type if there is exactly one. Parameters: n (int): Number of different types of creatures creatures (list of lists): List of lists representing each type of creatures Returns: list or int: List of power levels of the strongest creatures if unique, otherwise -1 result = [] for creature_list in creatures: max_power = max(creature_list) # Check if there are multiple creatures with the same max power if creature_list.count(max_power) > 1: return -1 result.append(max_power) return result"},{"question":"A company manages a data center consisting of n servers and m directed communication channels connecting them. Each server is represented by a node, and each communication channel is represented by a directed edge with a specific latency. Due to security protocols, it\'s required that any data transfer from one server to another should avoid using more than a specific number of intermediate servers, known as hops. Given q queries, each involving a data transfer request from server u_i to server v_i with a maximum allowable hops h_i, determine the shortest possible latency to transfer data for each query. However, if it\'s not possible to transfer the data within the specified number of hops, return -1 for that query. The first line of input contains three integers n, m and q (2 le n le 100 and 1 le m, q le 2000). The next m lines each contain three integers a_i, b_i and l_i (1 le a_i, b_i le n, a_i neq b_i, 1 le l_i le 1000), representing a directed communication channel from server a_i to server b_i with latency l_i. The following q lines each contain three integers u_i, v_i and h_i (1 le u_i, v_i le n, 0 le h_i le n-1), representing a data transfer request from server u_i to server v_i with maximum allowable hops h_i. Output should be q lines, each containing a single integer: the shortest possible latency for the corresponding query, or -1 if the data transfer is not feasible within the specified hops. # Example Input: ``` 4 4 3 1 2 5 2 3 3 3 4 4 4 2 1 1 3 1 1 4 2 2 4 0 ``` Output: ``` 8 12 -1 ``` Explanation: For the query (1, 3, 1), the shortest path from server 1 to server 3 within at most 1 hop is 1 -> 2 -> 3 with a total latency of 8. For the query (1, 4, 2), the shortest path from server 1 to server 4 within at most 2 hops is 1 -> 2 -> 3 -> 4 with a total latency of 12. For the query (2, 4, 0), it\'s not possible to reach server 4 from server 2 within 0 hops, hence the output is -1.","solution":"from collections import defaultdict, deque import heapq def shortest_latency(n, m, q, edges, queries): Finds the shortest possible latency to transfer data for each query within the specified number of hops. Parameters: n (int): number of servers m (int): number of directed communication channels q (int): number of queries edges (list): list of edges where each edge is a tuple (a_i, b_i, l_i) queries (list): list of queries where each query is a tuple (u_i, v_i, h_i) Returns: list: list of integers where each integer is the result of the corresponding query graph = defaultdict(list) for a, b, l in edges: graph[a].append((b, l)) result = [] for u, v, h in queries: heap = [(0, u, h + 1)] # latency, current node, hops remaining distances = {(u, h + 1): 0} while heap: current_latency, current_node, hops_remaining = heapq.heappop(heap) if current_node == v: result.append(current_latency) break if hops_remaining > 0: for neighbor, weight in graph[current_node]: new_latency = current_latency + weight new_hops_remaining = hops_remaining - 1 if (neighbor, new_hops_remaining) not in distances or new_latency < distances[(neighbor, new_hops_remaining)]: distances[(neighbor, new_hops_remaining)] = new_latency heapq.heappush(heap, (new_latency, neighbor, new_hops_remaining)) else: result.append(-1) return result"},{"question":"In a small village, there is a single road with n houses aligned in a row. Each house has a certain number of candies available for trick-or-treaters on Halloween night. The houses are numbered from 1 to n in a single line. A group of friends is planning to go trick-or-treating and they want to maximize the total number of candies they collect. However, they have a particular strategy in mind—they will only visit a contiguous subsequence of houses in one go to make their gathering more efficient. You are given the number of houses n and an array candies where candies[i] represents the number of candies at the i-th house. Your task is to determine the maximum number of candies they can collect by visiting a contiguous subsequence of houses. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of houses. The second line contains n integers candies[i] (0 ≤ candies[i] ≤ 1000) — the number of candies at the i-th house. Print a single integer — the maximum number of candies that can be collected from a contiguous subsequence of houses. **Example:** Input: ``` 5 1 3 2 5 4 ``` Output: ``` 14 ``` Explanation: The group can visit the entire sequence of houses from the first house to the last house, collecting 1 + 3 + 2 + 5 + 4 = 15 candies in this case.","solution":"def max_candies(n, candies): Returns the maximum number of candies that can be collected from a contiguous subsequence of houses. :param n: The number of houses :param candies: A list of integers where each integer represents the number of candies at the i-th house :return: The maximum number of candies that can be collected if n == 0: return 0 max_candies = 0 current_sum = 0 for candy in candies: current_sum += candy if current_sum > max_candies: max_candies = current_sum if current_sum < 0: current_sum = 0 return max_candies"},{"question":"You are given an array of n integers, where the integers can be both positive and negative. Your task is to find out if there exists a subarray (containing at least one number) that sums to zero. The first line contains a single positive integer n (1 ≤ n ≤ 10^5) — the number of integers. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9). Print \\"YES\\" if there exists such a subarray and \\"NO\\" otherwise.","solution":"def has_subarray_with_sum_zero(n, arr): Determines if there exists a subarray with sum zero. :param n: Integer, the number of elements in the array. :param arr: List of integers, the array elements. :return: String, \\"YES\\" if there exists a subarray with sum zero, \\"NO\\" otherwise. # Dictionary to store the prefix sums and their frequency prefix_sums = set() current_sum = 0 for num in arr: current_sum += num # If current sum is zero, or if current sum was seen before, we found a subarray with sum zero if current_sum == 0 or current_sum in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"You are given a string consisting of the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. Your task is to determine if the given string is a valid expression. An expression is considered valid if all types of brackets are matched correctly and do not misalign with each other. Here are the rules for a valid expression: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Write a function that takes a string as input and returns `true` if the string is a valid expression and `false` otherwise. Function signature: ``` def isValid(s: str) -> bool: ``` # Input - A single string `s` consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. - The length of the string `s` will be at most 1000. # Output - Return `true` if the string is a valid expression. - Return `false` otherwise. # Example ```python print(isValid(\\"()\\")) # Output: true print(isValid(\\"()[]{}\\")) # Output: true print(isValid(\\"(]\\")) # Output: false print(isValid(\\"([)]\\")) # Output: false print(isValid(\\"{[]}\\")) # Output: true ```","solution":"def isValid(s: str) -> bool: Determine if the input string s is a valid expression consisting of characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket: top_element = stack.pop() if stack else \'#\' if matching_bracket[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"You are given an integer array representing the initial configuration of a circular game board, where each element in the array represents the number of points at that position. Two players, Alice and Bob, take turns moving. Alice always goes first. During a player\'s turn, they can move in either direction (clockwise or counterclockwise) to an adjacent position and collect all the points from the starting position. They then update the position to zero and continue in the chosen direction during their next turn. The game ends when there are no more points left to collect. The player with the highest total score at the end of the game wins. If both players have the same score, the game is a draw. Your task is to determine, given the initial configuration of the game board, if Alice wins, Bob wins, or the game ends in a draw if both players play optimally. The input consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 100,000) — the number of positions on the board. - The second line contains n integers separated by spaces, with each integer ai (0 ≤ ai ≤ 10,000) representing the points at position i on the game board. Print \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Draw\\" if the game ends in a draw. Print the answers without the quotes.","solution":"def determine_winner(n, points): Determines the winner of the game given the initial configuration of points on the board. Parameters: n (int): Number of positions on the game board. points (list of int): List of integers representing points at each position. Returns: str: \\"Alice\\" if Alice wins, \\"Bob\\" if Bob wins, or \\"Draw\\" if the game is a draw. total_sum = sum(points) alice_sum = 0 # Iterate over the points array to simulate the game for i, point in enumerate(points): if i % 2 == 0: alice_sum += point bob_sum = total_sum - alice_sum if alice_sum > bob_sum: return \\"Alice\\" elif alice_sum < bob_sum: return \\"Bob\\" else: return \\"Draw\\""},{"question":"Given a binary array, you need to perform a series of operations to maximize the number of consecutive 1s in the array. Each operation allows you to flip (change a 0 to 1 or change a 1 to 0) exactly one element of the array. You are provided with the binary array and the number of operations you can perform. # Input 1. The first line contains two integers n and k, where n is the length of the binary array and k is the number of operations you can perform. 2. The second line contains n integers (either 0 or 1) representing the binary array. # Output Output a single integer, the maximum number of consecutive 1s obtainable after performing at most k flip operations. # Example Input ``` 10 2 1 0 0 1 1 0 1 1 0 1 ``` Output ``` 7 ``` # Explanation In the example above: - Flipping the third element from 0 to 1. - Flipping the fifth element from 0 to 1. The resulting array is `[1, 1, 0, 1, 1, 1, 1, 1, 0, 1]` which has a maximum of 7 consecutive 1s. # Notes - If there are multiple ways to achieve the maximum number of consecutive 1s, any of them is acceptable. - If no operations are necessary, return the number of consecutive 1s in the original array.","solution":"def max_consecutive_ones(n, k, arr): max_ones = 0 left = 0 zeros_count = 0 for right in range(n): if arr[right] == 0: zeros_count += 1 while zeros_count > k: if arr[left] == 0: zeros_count -= 1 left += 1 max_ones = max(max_ones, right - left + 1) return max_ones"},{"question":"You are given a forest of n trees, described by an array `parents`. Forest means a collection of unconnected trees. Each tree has vertices labeled from 1 through m (such that 1 ≤ m ≤ n). The array `parents` has n elements and describes the parent-child relationships of the vertices: - If `parents[i] == -1`, it means vertex i+1 is a root of a tree. - If `parents[i] > 0`, it means vertex `i+1`\'s parent is vertex `parents[i]`. Your objective is to determine whether the forest described by the `parents` array is valid. A forest is considered valid if each tree is acyclic, every node (1 through m) has exactly one parent except the root nodes which have no parents, and there are no loops or multiple roots for a single tree. Write a function `is_valid_forest(parents: List[int]) -> bool` that returns a boolean indicating whether the given forest is valid. # Input - An integer array `parents` of length `n` (1 ≤ n ≤ 100,000). # Output - A boolean value indicating whether the forest described by the `parents` array is valid (True) or not (False). # Example ``` python def is_valid_forest(parents: List[int]) -> bool: # Implement the function here pass # Example Usage parents = [-1, 1, 1, -1, 4] print(is_valid_forest(parents)) # Output: True parents = [2, 3, 1, -1, -1] print(is_valid_forest(parents)) # Output: False ``` # Constraints - The input array `parents` contains elements from the set {-1, 1, 2, ..., n}. - The array represents a valid forest if all the conditions for tree connectivity and parent relationships are satisfied (no cycles, single parent except root, etc.).","solution":"from typing import List def is_valid_forest(parents: List[int]) -> bool: Check if the forest represented by the parents array is valid. n = len(parents) # Each node (1 to n) must have at most one parent and exactly one root node per tree parent_count = [0] * (n + 1) # Index 0 is dummy, vertex labels are 1 to n for i in range(n): if parents[i] != -1: parent_count[parents[i]] += 1 for i in range(n): if parents[i] != -1 and parent_count[i + 1] > 1: return False # Detect cycles and ensure each node can be reached from exactly one root visited = [False] * n def has_cycle(v): if visited[v]: return True visited[v] = True if parents[v] != -1: if has_cycle(parents[v] - 1): return True visited[v] = False return False for i in range(n): if parents[i] == -1: continue if has_cycle(i): return False return True"},{"question":"You are tasked with defending a castle from an oncoming horde of enemies. The castle is equipped with a single cannon that can fire at one enemy at a time. The cannon requires a certain amount of cooldown time after each shot before it can be fired again. The enemies approach the castle in a straight line, and you know the exact time each enemy will arrive. Your objective is to determine the maximum number of enemies that the cannon can destroy given its cooldown period. The input consists of two lines: - The first line contains two integers n and c (1 ≤ n ≤ 100, 1 ≤ c ≤ 100) — the number of approaching enemies and the cooldown time of the cannon. - The second line contains n integers t1, t2, ..., tn (1 ≤ ti ≤ 1000) — the times (in seconds) when each enemy will arrive. Output a single integer representing the maximum number of enemies that the cannon can destroy. Here’s an example: Input: ``` 7 3 1 2 3 6 7 10 14 ``` Output: ``` 4 ``` Explanation: - The cannon can shoot the first enemy at time 1 and then needs 3 seconds to cool down, so it can next shoot at time 4. - The cannon can shoot the fourth enemy at time 6 (skipping the second and third enemies because they arrive during the cooldown period). - The next cooldown allows a shot at time 10 for the sixth enemy. - Finally, the cannon can destroy the seventh enemy arriving at time 14. So, the total number of destroyed enemies is 4.","solution":"def max_enemies_destroyed(n, c, enemy_times): Determines the maximum number of enemies that can be destroyed given the cooldown period. Parameters: n (int): Number of approaching enemies. c (int): Cooldown time of the cannon. enemy_times (List[int]): List of times when each enemy arrives. Returns: int: Maximum number of enemies that can be destroyed. destroyed_count = 0 last_shot_time = -c # Initialize to allow firing at the first enemy for time in enemy_times: if time >= last_shot_time + c: destroyed_count += 1 last_shot_time = time return destroyed_count"},{"question":"After spending hours on social media, Emily has decided to uninstall those apps and spend more time on her favorite activity, reading books. To better organize her readings, Emily wants an algorithm that categorizes and counts words in her digital library. Given a string of text, write a program to calculate the frequency of each word in the text and determine the most frequent word. If multiple words have the highest frequency, return the lexicographically smallest one. # Input The input consists of a single string t (1 le |t| le 10^5), which represents the text. The text contains only lowercase English letters and spaces. Words are separated by one or more spaces. # Output Print the word with the highest frequency in the text. If there is a tie, print the lexicographically smallest word among them. # Sample Input 1 ``` the quick brown fox jumps over the lazy dog the the quick ``` # Sample Output 1 ``` the ``` # Sample Input 2 ``` hello hello world world ``` # Sample Output 2 ``` hello ``` # Note In the first sample, the word \\"the\\" appears 4 times, while all other words appear fewer times. In the second sample, both \\"hello\\" and \\"world\\" appear twice, but \\"hello\\" is lexicographically smaller.","solution":"def most_frequent_word(text): Returns the most frequent word in the text. If multiple words have the highest frequency, returns the lexicographically smallest one. from collections import Counter words = text.split() word_count = Counter(words) max_freq = max(word_count.values()) most_frequent_words = [word for word, count in word_count.items() if count == max_freq] return min(most_frequent_words)"},{"question":"You are given a set of transactions in the form of an array of strings, where each transaction has the following format: \\"ID,Time,Amount,City\\". Each \\"ID\\" is a unique identifier for a cardholder, \\"Time\\" is the time of the transaction in minutes from some reference time, \\"Amount\\" is the transaction amount in dollars, and \\"City\\" is the city where the transaction took place. Your task is to identify potentially fraudulent transactions on the basis that any two transactions within the same 10-minute window for a single cardholder in different cities are considered suspicious. Write a function `find_suspicious_transactions(transactions: List[str]) -> List[str]` that takes in an array of transaction strings and returns an array of transaction IDs that are deemed suspicious. Your solution should focus on efficiency, given the constraints that there could be up to 100,000 transactions provided. To illustrate, consider the example below: Input: ```python transactions = [ \\"card1,10,50,NewYork\\", \\"card2,20,20,Boston\\", \\"card1,15,10,Chicago\\", \\"card1,25,30,NewYork\\", \\"card2,35,50,Boston\\", \\"card1,40,10,Chicago\\" ] ``` Output: ```python [\\"card1\\", \\"card1\\"] ``` In the above example, the first and third transactions for `card1` both fall within a 10-minute window (from time 10 to time 15) in different cities (NewYork and Chicago), making them suspicious. The fourth and sixth transactions for `card1` also fall into the same category. Thus, the output contains these suspicious transaction IDs. Your function should look like this: ```python def find_suspicious_transactions(transactions: List[str]) -> List[str]: # Your code here ```","solution":"def find_suspicious_transactions(transactions): from collections import defaultdict card_transactions = defaultdict(list) for transaction in transactions: ID, Time, Amount, City = transaction.split(\',\') card_transactions[ID].append((int(Time), City)) suspicious_ids = [] for ID, transactions in card_transactions.items(): transactions.sort() for i in range(len(transactions)): for j in range(i + 1, len(transactions)): if transactions[j][0] - transactions[i][0] > 10: break if transactions[i][1] != transactions[j][1]: suspicious_ids.append(ID) break return suspicious_ids"},{"question":"You are given a string consisting of lowercase English letters and you need to perform multiple operations on it. In each operation, you need to answer whether the given substring has all unique characters or not. The first line of the input contains a single integer n (1 ≤ n ≤ 100,000) – the length of the string. The second line contains the string s of length n, consisting of only lowercase English letters. The third line contains a single integer q (1 ≤ q ≤ 100,000) – the number of queries. Next, q lines follow, each containing two integers li and ri (1 ≤ li ≤ ri ≤ n) – representing the 1-based inclusive positions of the substring. For each query, print \\"Yes\\" if the substring consists of all unique characters, otherwise print \\"No\\". # Input ``` 5 abcde 3 1 3 2 4 1 5 ``` # Output ``` Yes Yes Yes ``` In the first query, the substring is \\"abc\\", which has all unique characters. In the second query, the substring is \\"bcd\\", which has all unique characters. In the third query, the substring is \\"abcde\\", which has all unique characters.","solution":"def all_unique_substrings(n, s, q, queries): results = [] for li, ri in queries: substring = s[li-1:ri] if len(substring) == len(set(substring)): # Check if all characters are unique results.append(\\"Yes\\") else: results.append(\\"No\\") return results # Example usage n = 5 s = \'abcde\' q = 3 queries = [(1, 3), (2, 4), (1, 5)] print(all_unique_substrings(n, s, q, queries)) # Output: [\'Yes\', \'Yes\', \'Yes\']"},{"question":"A robot is navigating a grid-based maze represented by a 2D matrix of size m x n. The robot starts at the top-left corner of the maze (at position (0, 0)) and needs to reach the bottom-right corner (at position (m-1, n-1)). Each cell in the maze can either be empty (represented by 0) or filled with an obstacle (represented by 1). The robot can only move right or down at each step. You need to determine the length of the shortest path from the start to the destination. If there is no path, the function should return -1. The input format is as follows: - The first line contains two integers m and n (1 ≤ m, n ≤ 1000) — the dimensions of the maze. - The next m lines each contain n space-separated integers (either 0 or 1) representing the maze. The output should be a single integer indicating the minimum number of steps required for the robot to reach the bottom-right corner, or -1 if there is no such path. Example input: 4 4 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 Example output: 6","solution":"from collections import deque def shortest_path_in_maze(m, n, maze): Returns the length of the shortest path from the top-left to the bottom-right corner of the maze. If no such path exists, returns -1. :param int m: Number of rows in the maze :param int n: Number of columns in the maze :param List[List[int]] maze: 2D list representing the maze :return int: Length of the shortest path or -1 if there is no path if maze[0][0] == 1 or maze[m-1][n-1] == 1: return -1 directions = [(1, 0), (0, 1)] queue = deque([(0, 0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y, steps = queue.popleft() if x == m - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and maze[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return -1"},{"question":"A new social media platform, SocioChat, wants to enhance user engagement by giving users a special badge called \\"Hyperactive\\" if they post very frequently. A user is deemed \\"Hyperactive\\" if they make at least one post every day for a consecutive period of at least `d` days. Given the posting history of several users, you are required to determine whether each user is \\"Hyperactive\\" or not. # Input: - The first line contains an integer `t` (1 leq t leq 100) — the number of test cases. - The description of each test case follows: - The first line of each test case contains two integers `n` and `d` (1 leq d leq n leq 10^5) — the total number of days in the user\'s posting history and the minimum number of consecutive days required to be deemed \\"Hyperactive\\", respectively. - The next line contains a binary string of length `n`, where \'1\' at the `i-th` position means the user made a post on the `i-th` day, and \'0\' means they did not. # Output: For each test case, output \\"Yes\\" if the user is \\"Hyperactive\\", otherwise output \\"No\\". # Example: Input: ``` 3 10 3 1101110111 5 5 11111 7 4 1001100 ``` Output: ``` Yes Yes No ``` # Explanation: - In the first test case, the user posts on days 1, 2, 4, 5, 6, 8, 9, and 10. The user makes posts on three consecutive days from day 4 to day 6 and again from day 9 to day 10. Thus, they are \\"Hyperactive\\". - In the second test case, the user posts every day for 5 days. Thus, they are \\"Hyperactive\\". - In the third test case, the longest streak of consecutive posting is only 2 days. Thus, they are not \\"Hyperactive\\".","solution":"def is_hyperactive(n, d, binary_string): max_consecutive_days = 0 current_count = 0 for char in binary_string: if char == \'1\': current_count += 1 if current_count >= d: return \\"Yes\\" else: current_count = 0 return \\"No\\" def process_test_cases(t, test_cases): results = [] for i in range(t): n, d = test_cases[i][:2] binary_string = test_cases[i][2] results.append(is_hyperactive(n, d, binary_string)) return results"},{"question":"A locksmith needs to generate secure codes for his clients. He wants to ensure each code is exactly of length `n` and should follow these rules: 1. The code can only contain the characters \'A\', \'B\', and \'C\'. 2. No character should appear consecutively more than once. For example, \\"ABCA\\" is valid but \\"AABB\\" is not since \'A\' and \'B\' appear consecutively more than once. Given an integer `n`, your task is to write a program that finds the total number of valid codes that can be generated following the above rules. # Input: - The input consists of a single integer n (1 ≤ n ≤ 20). # Output: - Output a single integer, the total number of valid codes of length n. # Examples: Example 1: **Input:** ``` 1 ``` **Output:** ``` 3 ``` **Explanation:** The valid codes of length 1 are \\"A\\", \\"B\\", and \\"C\\". Example 2: **Input:** ``` 2 ``` **Output:** ``` 6 ``` **Explanation:** The valid codes of length 2 are \\"AB\\", \\"AC\\", \\"BA\\", \\"BC\\", \\"CA\\", \\"CB\\". Example 3: **Input:** ``` 3 ``` **Output:** ``` 12 ``` **Explanation:** The valid codes of length 3 are \\"ABA\\", \\"ABC\\", \\"ACA\\", \\"ACB\\", \\"BAB\\", \\"BAC\\", \\"BCA\\", \\"BCB\\", \\"CAB\\", \\"CAC\\", \\"CBA\\", \\"CBC\\". Note that you only need to output the count of such valid codes, not the actual codes.","solution":"def count_valid_codes(n): if n == 1: return 3 # Dynamic Programming table to store the valid code counts dp = [[0]*3 for _ in range(n)] # Initialize base case dp[0][0] = dp[0][1] = dp[0][2] = 1 # Considering \'A\', \'B\', \'C\' respectively # Populate the dp table for i in range(1, n): dp[i][0] = dp[i-1][1] + dp[i-1][2] # Ending with \'A\' dp[i][1] = dp[i-1][0] + dp[i-1][2] # Ending with \'B\' dp[i][2] = dp[i-1][0] + dp[i-1][1] # Ending with \'C\' # Sum of all the possible combinations of length n total_valid_codes = dp[n-1][0] + dp[n-1][1] + dp[n-1][2] return total_valid_codes"},{"question":"You are given an integer array `nums` of length `n`. The array is initially sorted in ascending order, but can include some duplicate elements. Your task is to find and return the first missing positive integer that does not appear in the array. A positive integer is defined as any integer greater than or equal to 1. For example, the first missing positive integer in the array `[1, 2, 0]` is 3, and in the array `[3, 4, -1, 1]` it is 2. Write a function `findFirstMissingPositive(nums)`. The function should take an array of integers `nums` and return the smallest positive integer that is not present in the array. Your solution should have an O(n) time complexity. # Input - An integer `n` (1 ≤ n ≤ 10^5) indicating the number of elements in the array. - A list of `n` integers `nums` where each element is in the range [-10^6, 10^6]. # Output - Return a single integer representing the smallest positive integer that is not present in the array. # Examples ``` findFirstMissingPositive([1, 2, 0]) -> 3 findFirstMissingPositive([3, 4, -1, 1]) -> 2 findFirstMissingPositive([7, 8, 9, 11, 12]) -> 1 findFirstMissingPositive([1, 1, 1, 1, 1]) -> 2 ``` # Constraints - The input array can contain negative numbers and zeros. - The length of the array will be at least 1 and at most 10^5.","solution":"def findFirstMissingPositive(nums): Returns the smallest positive integer that is missing from the array. n = len(nums) # Mark numbers out of range and negative numbers with a placeholder (n + 1) for i in range(n): if nums[i] <= 0 or nums[i] > n: nums[i] = n + 1 # Use the index as a hash key using absolute values for i in range(n): num = abs(nums[i]) if num <= n: nums[num - 1] = -abs(nums[num - 1]) # Find the first missing positive integer for i in range(n): if nums[i] > 0: return i + 1 return n + 1"},{"question":"You are given an array of integers which represents the height of walls, and the width of each wall is 1 unit. The water trapped between the walls after rain can be stored in areas where the height of the wall on both ends is taller than the central area. Write a function that calculates the total amount of water that can be trapped between the walls. The function should take an array of non-negative integers `height` as input, where the i-th element represents the height of the i-th wall. The function should return a single integer representing the total units of water that can be trapped between the walls after raining. # Input: - An integer array `height` where 0 ≤ height[i] ≤ 1000. # Output: - An integer representing the total amount of trapped water. # Example: ``` Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Input: height = [4,2,0,3,2,5] Output: 9 ``` # Note: In the first example, 6 units of water are trapped, demonstrated as follows: - Between index 1 and 3: 1 unit. - Between index 3 and 7: 4 units. - Between index 7 and 10: 1 unit. In the second example, 9 units of water are trapped, demonstrated as follows: - Between index 0 and 5: 4 units. - Between index 1 and 3: 3 units. - Between index 2 and 4: 1 unit. - Between index 3 and 5: 1 unit.","solution":"def trap(height): if not height: return 0 n = len(height) left_max = [0] * n right_max = [0] * n left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) water_trap = 0 for i in range(n): water_trap += min(left_max[i], right_max[i]) - height[i] return water_trap"},{"question":"Given an array of non-negative integers and an integer `target`, you are to determine if there exists any combination of elements in the array that sum up to `target`. Each element in the array can be used multiple times. The first line contains two integers `n` and `target` (1 ≤ `n` ≤ 1000, 0 ≤ `target` ≤ 10^6) — the number of elements in the array and the target sum. The second line contains `n` non-negative integers representing the elements of the array. Output \\"YES\\" if there exists a combination of elements in the array that sum up to `target`, otherwise output \\"NO\\". # Examples Input ``` 3 8 2 3 5 ``` Output ``` YES ``` Input ``` 2 7 2 4 ``` Output ``` NO ``` # Explanation In the first example, one possible combination is `3 + 5 = 8`. In the second example, no combination of 2 and 4 (even repeated use) can sum up to 7.","solution":"def can_sum_to_target(arr, target): Determines if there exists any combination of elements in the array that sum up to the target. Each element in the array can be used multiple times. :param arr: List of non-negative integers. :param target: Target sum integer. :return: \'YES\' if the target sum can be achieved by any combination of elements, otherwise \'NO\'. dp = [False] * (target + 1) dp[0] = True for i in range(target + 1): if dp[i]: for num in arr: if i + num <= target: dp[i + num] = True return \\"YES\\" if dp[target] else \\"NO\\""},{"question":"In a faraway kingdom, there exists a magical orchard with n distinct trees arranged in a straight line, each bearing a different type of mystical fruit. Each tree is associated with a certain number of magical attributes ai that define the quality of the fruit it bears. However, due to a magical imbalance, some trees have lost parts of their magical attributes. The kingdom\'s royal scientist wants to restore the orchard to its former glory by redistributing the magical attributes among the trees. He has a memory of the highest total amount of magical attributes a contiguous subsequence of trees had at some mystical point in history. A contiguous subsequence of trees is defined as any sequence of consecutive trees in the orchard. Your task is to help the royal scientist identify this highest total amount of magical attributes for any contiguous subsequence of trees. Given the current magical attributes of the trees, determine the maximum sum of any contiguous subsequence of the trees. # Input - The first line contains an integer n (1 ≤ n ≤ 100000), the number of trees. - The second line contains n integers a1, a2, ..., an (-1000000 ≤ ai ≤ 1000000) — the current magical attributes of the trees, listed in order from the first tree to the last tree. # Output - Output a single integer, the maximum sum of any contiguous subsequence of trees. # Example Input ``` 5 -2 1 -3 4 -1 2 1 -5 4 ``` Output ``` 6 ``` Explanation The maximum sum of a contiguous subsequence of trees is achieved by the subsequence [4, -1, 2, 1], which sums up to 6.","solution":"def max_contiguous_sum(n, attributes): Given the number of trees and their magical attributes, determine the maximum sum of any contiguous subsequence of trees. Parameters: n (int): Number of trees attributes (list of int): List containing the magical attributes of the trees. Returns: int: The maximum sum of any contiguous subsequence of trees. max_sum = current_sum = attributes[0] for attribute in attributes[1:]: current_sum = max(attribute, current_sum + attribute) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Fiona is organizing a competition where n participants will compete in m different activities. Each activity will have only one winner, and a participant can win multiple activities. Fiona wants to distribute medals to the winners such that the total number of gold medals distributed is equal to the total number of silver medals distributed, and the total number of bronze medals distributed is twice the number of gold or silver medals distributed. Given the number of participants n and the number of activities m, find the number of possible ways Fiona can distribute the medals satisfying the above conditions. The input consists of two integers n (1 ≤ n ≤ 103) and m (1 ≤ m ≤ 103) — the number of participants and the number of activities, respectively. Print a single integer representing the number of ways to distribute the medals. If no valid distribution is possible, print 0. Example: Input: 5 3 Output: 1 In this example, there are 3 activities. One possible medal distribution could be 1 gold, 1 silver, and 2 bronze, which satisfies the condition: 1 gold = 1 silver, 2 bronze = 2 * 1 gold or silver.","solution":"def count_medal_distributions(n, m): Returns the number of ways Fiona can distribute medals satisfying the given conditions. Parameters: n (int): The number of participants. m (int): The number of activities. Returns: int: The number of valid distributions. if m % 4 == 0: return 1 else: return 0"},{"question":"Derek loves playing with strings. He has recently learned about the concepts of substrings and the longest common subsequence (LCS). While practicing, he encountered the following problem and needs your help to solve it. Derek has two strings, string1 and string2. He wants to find the length of the shortest string that has both string1 and string2 as their subsequences. Can you help him find this length? Input: - The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. - Each of the next t lines contains two space-separated strings, string1 and string2 (1 ≤ |string1|, |string2| ≤ 1000), the strings Derek is working with. Output: For each test case, output a single integer, the length of the shortest string that has both string1 and string2 as subsequences. Example: Input: 2 abc ab geeks geks Output: 3 5 Explanation: In the first test case, the shortest string that has both \\"abc\\" and \\"ab\\" as subsequences is \\"abc\\" (length = 3). In the second test case, the shortest string that has both \\"geeks\\" and \\"geks\\" as subsequences is \\"geeks\\" (length = 5).","solution":"def lcs(string1, string2): m = len(string1) n = len(string2) # Create a 2D array to store the lengths of the longest common subsequences dp = [[0] * (n + 1) for _ in range(m + 1)] # Populate the dp array for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif string1[i - 1] == string2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def shortest_common_supersequence_length(t, test_cases): results = [] for i in range(t): string1, string2 = test_cases[i] lcs_length = lcs(string1, string2) scs_length = len(string1) + len(string2) - lcs_length results.append(scs_length) return results"},{"question":"Petya has recently started learning about strings and is very curious about them. He loves to experiment with transforming one string into another using the minimum number of operations. Given two strings s1 and s2, Petya can perform the following types of operations: 1. Replace a character in s1 with another character. 2. Insert a new character into s1. 3. Delete a character from s1. Each operation takes one second. Petya wants to know the minimum number of seconds required to transform s1 into s2 using the above operations. The only line contains two strings s1 and s2 (1 ≤ |s1|, |s2| ≤ 1000). Print a single integer — the minimum number of seconds needed to transform string s1 into string s2. # Example: Input: ``` kitten sitting ``` Output: ``` 3 ``` Explanation: To transform \\"kitten\\" into \\"sitting\\", Petya can perform the following operations: 1. Replace \'k\' with \'s\' (kitten -> sitten) 2. Replace \'e\' with \'i\' (sitten -> sittin) 3. Insert \'g\' at the end (sittin -> sitting) Therefore, 3 operations are required.","solution":"def min_distance(s1, s2): Calculate the minimum number of operations required to transform s1 into s2. m, n = len(s1), len(s2) # Create a DP table of size (m+1)x(n+1) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize the DP table for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, insert all characters of s2 elif j == 0: dp[i][j] = i # If s2 is empty, delete all characters of s1 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete dp[i][j - 1], # Insert dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"John loves arithmetic puzzles. One of his favorites involves sequences of numbers. Specifically, he is fascinated by a type of sequence called an arithmetic progression. An arithmetic progression is a sequence where each term after the first is the sum of the previous term and a fixed, constant difference. John\'s challenge for you is to determine if a given sequence of integers forms an arithmetic progression. The first line contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the sequence. The second line contains n integers a1, a2, …, an (−1000 ≤ ai ≤ 1000) — the elements of the sequence. In the only line, print \\"YES\\" (without the quotes), if the sequence is an arithmetic progression. Otherwise, print \\"NO\\" (without the quotes). Note that a sequence with only two elements is always considered an arithmetic progression, since there is no second difference to compare. In the first sample, 1 3 5 7 is an arithmetic progression with a common difference of 2. In the second sample, 1 2 4 does not maintain a consistent difference—between 1 and 2 it is 1, but between 2 and 4 it is 2.","solution":"def is_arithmetic_progression(sequence): Determines if the given sequence is an arithmetic progression. Args: sequence (list): A list of integers representing the sequence. Returns: str: \\"YES\\" if the sequence is an arithmetic progression, otherwise \\"NO\\". n = len(sequence) if n == 2: return \\"YES\\" common_difference = sequence[1] - sequence[0] for i in range(2, n): if sequence[i] - sequence[i-1] != common_difference: return \\"NO\\" return \\"YES\\""},{"question":"Mia is participating in a robotics competition. She needs to program her robot to navigate through a grid filled with obstacles. The grid is represented as an n x m matrix, where some cells contain obstacles, represented by \'X\', and others are free cells, represented by \'.\'. The robot starts at the top-left corner of the grid and aims to reach the bottom-right corner. Mia can reprogram her robot to move in four possible directions: up, down, left, and right. The robot cannot pass through cells containing obstacles. The objective is to find the minimum steps required for the robot to reach the bottom-right corner from the top-left corner, or determine if it is impossible. The first line of input contains two space-separated integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns of the grid, respectively. Each of the next n lines contains a string of m characters representing the grid. Output the minimum number of steps required for the robot to reach the bottom-right corner. If it is impossible, output \\"Impossible\\" (without quotes). Example Input: 4 4 .... .XX. ..X. .... Example Output: 6 Example Input: 3 3 ... .X. ..X Example Output: Impossible","solution":"from collections import deque def min_steps_to_exit(grid, n, m): Returns the minimum steps required for the robot to reach the bottom-right corner from the top-left corner of the grid. If it is impossible, returns \\"Impossible\\". if grid[0][0] == \'X\' or grid[n-1][m-1] == \'X\': return \\"Impossible\\" directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == n-1 and col == m-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < n and 0 <= new_col < m and (new_row, new_col) not in visited and grid[new_row][new_col] == \'.\': visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return \\"Impossible\\""},{"question":"In a remote village, there are n houses lined up in a row and each house has a certain number of units of food storage. The village is under threat from bandits who plan to attack and loot food from certain houses. However, the bandits have a specific pattern of attack to avoid getting caught. They will loot food from every alternate house. Given the array of food units in each house, calculate the maximum units of food the bandits can loot without alerting the village, i.e., without looting from two consecutive houses. # Input: - The first line contains an integer n (1 leq n leq 10^5) – the number of houses. - The second line contains n integers f_1, f_2, ldots, f_n (0 leq f_i leq 10^5) – the units of food in each house. # Output: - Print a single integer – the maximum units of food the bandits can loot without alerting the village. # Example: Input: ``` 6 5 3 4 11 2 8 ``` Output: ``` 24 ``` # Explanation: The bandits can loot from houses 1, 3, and 6, which gives the total food units as 5 + 4 + 8 = 17. Instead, if they loot from houses 2, 4, and 6, they get 3 + 11 + 8 = 22. The maximum possible sum without looting consecutive houses is obtained by looting from houses 1, 4, and 6, which gives 5 + 11 + 8 = 24.","solution":"def max_loot(n, food_units): if n == 0: return 0 if n == 1: return food_units[0] dp = [0] * n dp[0] = food_units[0] dp[1] = max(food_units[0], food_units[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + food_units[i]) return dp[n-1]"},{"question":"**Question: Analyzing Consecutive Subarrays in a Sequence** Given an array of integers, determine if there exists a consecutive subarray such that the sum of its elements is zero. If such a subarray exists, print \\"Yes\\" (without quotes). Otherwise, print \\"No\\". The first line of input contains a positive integer `n` (1 ≤ n ≤ 1000) — the number of elements in the array. The second line contains `n` space-separated integers `a1, a2, ..., an` (-1000 ≤ ai ≤ 1000) — the elements of the array. For example, in the first example, with an array of elements `2, -3, 1, 4, -4`, there exists a subarray `1, 4, -4` whose sum is zero. In the second example, with an array of elements `3, 1, 2, 5, 6`, no such subarray exists that sums to zero. # Example Input/Output **Input 1:** ``` 5 2 -3 1 4 -4 ``` **Output 1:** ``` Yes ``` **Input 2:** ``` 5 3 1 2 5 6 ``` **Output 2:** ``` No ``` **Notes:** - Your solution should efficiently determine if such a subarray exists. - Consider the constraints to devise a solution that runs in a reasonable time.","solution":"def has_zero_sum_subarray(n, arr): Returns \\"Yes\\" if there exists a consecutive subarray with sum zero, otherwise returns \\"No\\". prefix_sum = set() current_sum = 0 for num in arr: current_sum += num if current_sum == 0 or current_sum in prefix_sum: return \\"Yes\\" prefix_sum.add(current_sum) return \\"No\\""},{"question":"You are given a collection of intervals on the real number line. Each interval is defined by two endpoints [L, R]. Your task is to merge all overlapping intervals and return the resultant merged intervals in ascending order based on the left endpoint of each interval. The first line of the input contains a single integer n (1 ≤ n ≤ 1000) — number of intervals. Each of the next n lines contains a pair of integers L and R (−10000 ≤ L ≤ R ≤ 10000) — the endpoints of an interval. Output the resultant merged intervals in ascending order based on their left endpoint. Each merged interval should be printed on a new line in the format \\"L R\\". Example: Input: 4 1 3 2 4 5 7 6 8 Output: 1 4 5 8","solution":"def merge_intervals(intervals): Merge all overlapping intervals and return the merged intervals in ascending order based on the left endpoint of each interval. :param intervals: List of intervals, each interval is a list [L, R] :return: List of merged intervals if not intervals: return [] intervals.sort(key=lambda x: x[0]) merged_intervals = [intervals[0]] for current in intervals[1:]: last_merged = merged_intervals[-1] if current[0] <= last_merged[1]: last_merged[1] = max(last_merged[1], current[1]) else: merged_intervals.append(current) return merged_intervals"},{"question":"Given an integer array `nums`, your task is to find the length of the longest subarray with elements that, when sorted, form a consecutive sequence. A subarray is a contiguous part of the array and the elements in the consecutive sequence should differ by exactly 1. For example, in the array `[1, 3, 5, 2, 4]`, the subarray `[1, 3, 5, 2, 4]` forms the consecutive sequence `[1, 2, 3, 4, 5]` when sorted. The input consists of a single line containing space-separated integers of the array `nums` (1 ≤ |nums| ≤ 200, -1000 ≤ nums[i] ≤ 1000). Output the length of the longest subarray that, when sorted, forms a consecutive sequence. If no such subarray exists, output 0. Example: ``` Input: 1 3 5 2 4 Output: 5 Input: 10 12 11 Output: 3 Input: 1 2 8 Output: 2 ```","solution":"def longest_consecutive_subarray(nums): def is_consecutive(sub): sub_sorted = sorted(sub) for i in range(1, len(sub_sorted)): if sub_sorted[i] != sub_sorted[i - 1] + 1: return False return True max_length = 0 n = len(nums) for i in range(n): for j in range(i, n): if is_consecutive(nums[i:j+1]): max_length = max(max_length, j - i + 1) return max_length"},{"question":"You are given a list of integers. Your task is to split the list into the minimum number of sublists such that each sublist is sorted in non-decreasing order. The order of elements in the original list should be maintained. The first line contains an integer n (1 ≤ n ≤ 100) which represents the number of elements in the list. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) which are the elements of the list. Print the minimum number of sublists needed and each sublist in a new line. Example: Input: 6 5 2 3 4 1 2 Output: 3 [5] [2, 3, 4] [1, 2] Explanation: The first element forms the first sublist [5]. The next three elements form the second sublist [2, 3, 4]. The last two elements form the third sublist [1, 2]. In total, three sublists are needed to split the original list into non-decreasing order sublists.","solution":"def split_into_sublists(lst): Splits the input list into minimum number of sublists such that each sublist is sorted in non-decreasing order. result = [] current_sublist = [] for i in range(len(lst)): if not current_sublist or lst[i] >= current_sublist[-1]: current_sublist.append(lst[i]) else: result.append(current_sublist) current_sublist = [lst[i]] if current_sublist: result.append(current_sublist) return result def process_input(n, lst): Processes the input and returns the required output. sublists = split_into_sublists(lst) print(len(sublists)) for sublist in sublists: print(sublist)"},{"question":"You are given a multi-dimensional array representing data collected from a sensor over time. Each sub-array contains integers representing measurements at a specific timestamp. Your task is to identify and return the timestamp which contains the highest sum of its measurements. If two timestamps have the same sum, return the one that appears first. Write a function `find_max_sum_timestamp(data)` where `data` is a list of lists, and each sub-list contains integers representing measurements. # Example ```python data = [ [1, 2, 3], [3, 4, 1, 6], [0, 0, 0], [9, 1] ] ``` In this example, the function should return `1`, because the sum of the second sub-list (index 1) is the highest (`3+4+1+6=14`). # Constraints: - `data` will have at least one sub-list. - Each sub-list will have at least one integer. - The length of `data` will not exceed `10^3` and individual sub-lists will have lengths not exceeding `10^3`. Implement the function and ensure it passes the given example and meets the constraints.","solution":"def find_max_sum_timestamp(data): Returns the index of the sub-list (timestamp) with the highest sum of its measurements. max_sum = None max_index = -1 for i, measurements in enumerate(data): current_sum = sum(measurements) if max_sum is None or current_sum > max_sum: max_sum = current_sum max_index = i return max_index"},{"question":"A vending machine dispenses n types of candies. Each type of candy has a unique identifier from 1 to n. When a customer chooses a type of candy, the machine dispenses one candy of that type. Over time, certain types of candies may become unavailable. The vending machine receives a sequence of k requests, each denoted by a unique identifier of the candy type requested. Every time a request is made, the machine checks if that type of candy is available. If so, it dispenses the candy and marks it as unavailable for future requests. If the requested type of candy is unavailable, it skips the request. Your task is to maintain an updated list of which candy types are available after processing all the requests. Input: The first line contains two integers n and k (1 ≤ n, k ≤ 100) — the number of candy types and the number of requests, respectively. The following line contains k integers ri (1 ≤ ri ≤ n), denoting the sequence of candy type requests. Output: Output a single line containing n integers, where the i-th integer is 1 if the candy type i is still available after processing all the requests, and 0 otherwise. Example: Input: 5 8 1 3 5 2 1 4 3 4 Output: 1 0 0 0 0 Explanation: Initially, all candy types (1 to 5) are available. - The first request is for candy type 1, which is dispensed and marked unavailable. - The second request is for candy type 3, which is dispensed and marked unavailable. - The third request is for candy type 5, which is dispensed and marked unavailable. - The fourth request is for candy type 2, which is dispensed and marked unavailable. - The fifth request is for candy type 1, which is skipped because it is already unavailable. - The sixth request is for candy type 4, which is dispensed and marked unavailable. - The seventh request is for candy type 3, which is skipped because it is already unavailable. - The eighth request is for candy type 4, which is skipped because it is already unavailable. After processing all the requests, only candy type 1 is still available, and thus the output is \\"1 0 0 0 0\\".","solution":"def update_candy_availability(n, k, requests): availability = [1] * n # All candies are initially available for req in requests: if availability[req - 1] == 1: # Check if the candy is available availability[req - 1] = 0 # Mark the candy as unavailable return availability"},{"question":"You are given a rectangular grid with dimensions N times M, filled with integers. You need to calculate the maximum sum of a sub-grid (contiguous subarray in 2D) within the given grid. The first line contains two integers N and M (1 leq N, M leq 500) - the dimensions of the grid. The next N lines each contain M integers – the elements of the grid, where each element a_{i,j} ( -10^9 leq a_{i,j} leq 10^9 ). Output a single integer: the maximum sum of any sub-grid (contiguous subarray in 2D) within the given grid. # Example **Input:** ``` 4 5 1 2 -1 -4 -20 -8 -3 4 2 1 3 8 10 1 3 -4 -1 1 7 -6 ``` **Output:** ``` 29 ``` **Explanation:** The sub-grid (2,2) to (3,4) has the maximum sum, which is 29.","solution":"def max_sum_subgrid(N, M, grid): This function finds the maximum sum of any sub-grid within a given NxM grid. def max_subarray_sum(arr): max_sum = float(\'-inf\') current_sum = 0 for value in arr: current_sum = max(value, current_sum + value) max_sum = max(max_sum, current_sum) return max_sum max_sum = float(\'-inf\') # Temporary array to store sum of elements between two rows. temp = [0] * M for left in range(N): # initializing all elements of temp as 0 for i in range(M): temp[i] = 0 for right in range(left, N): # sum between left and right for every column for i in range(M): temp[i] += grid[right][i] # Use Kadane\'s algorithm to find the maximum sum subarray in temp max_sum = max(max_sum, max_subarray_sum(temp)) return max_sum"},{"question":"You are given an array of integers which is guaranteed to have exactly one peak element. An element is a peak if it is greater than its neighbors. Your task is to find and return the index of the peak element. The array may contain multiple peaks, but you need to return the index of any one of them. You have to implement an operation which takes an array of integers as input and returns an integer representing the index of a peak element. Your code should have the following signature: ```python def find_peak(nums: List[int]) -> int: # Your code here pass ``` **Example:** ```python find_peak([1, 3, 20, 4, 1, 0]) -> 2 # nums[2] = 20 is a peak element find_peak([1, 2, 3, 4, 5]) -> 4 # nums[4] = 5 is a peak element find_peak([5, 4, 3, 2, 1]) -> 0 # nums[0] = 5 is a peak element ```","solution":"from typing import List def find_peak(nums: List[int]) -> int: Returns the index of any one peak element in the array. n = len(nums) left, right = 0, n - 1 while left < right: mid = (left + right) // 2 if nums[mid] < nums[mid + 1]: left = mid + 1 else: right = mid return left"},{"question":"Given an array of integers representing the working hours logged by an employee over a number of days, you are required to determine the average working hours per day and return the difference between the maximum and minimum deviation from this average. For each test case, you\'ll be given an integer array representing the working hours for each day. You need to calculate the average working hours and subsequently, for each day, find the absolute deviation from the average. Finally, you need to determine the maximum and minimum of these deviations and return their difference. You need to print the difference between the maximum and minimum deviations for each test case. The first line contains a single integer t (1 le t le 1000) — the number of test cases. The first line of each test case contains an integer n (1 le n le 100) — the number of days in the array. The second line of each test case contains n integers h_1, h_2, dots, h_n (0 le h_i le 24) — the number of working hours logged on each day. For each test case, print a single integer — the difference between the maximum and minimum deviations from the average working hours. Example: ``` Input: 2 5 8 7 9 6 10 3 2 8 5 Output: 2 3 ``` Explanation: In the first test case, the average working hours are frac{8 + 7 + 9 + 6 + 10}{5} = 8. The deviations are |8-8|, |7-8|, |9-8|, |6-8|, |10-8| which are 0, 1, 1, 2, 2. The maximum deviation is 2 and the minimum deviation is 0. Hence, the difference is 2 - 0 = 2. In the second test case, the average working hours are frac{2 + 8 + 5}{3} approx 5. The deviations are |2-5|, |8-5|, |5-5| which are 3, 3, 0. The maximum deviation is 3 and the minimum deviation is 0. Hence, the difference is 3 - 0 = 3.","solution":"def calculate_deviation_diff(num_cases, cases): results = [] for i in range(num_cases): num_days = cases[i][0] hours = cases[i][1] avg_hours = sum(hours) / num_days deviations = [abs(hour - avg_hours) for hour in hours] max_deviation = max(deviations) min_deviation = min(deviations) results.append(int(max_deviation - min_deviation)) return results"},{"question":"You are given an array of integers. Your task is to find the pair of integers (pi, pj) such that the absolute difference |pi - pj| is minimized, where 1 ≤ i < j ≤ n. The first line contains integer n — the number of elements in the array (2 ≤ n ≤ 2·10^5). The second line contains n space-separated integers pi (1 ≤ pi ≤ 10^9). Print the minimum absolute difference found.","solution":"def find_min_abs_difference(arr): Returns the minimum absolute difference between any two elements in the array. # Sort the array first arr.sort() # Initialize the minimum difference to a large number min_diff = float(\'inf\') # Loop through the sorted array and find the minimum difference for i in range(1, len(arr)): diff = abs(arr[i] - arr[i - 1]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"Bobby is writing a novel and wants to transform the words in his book to make them easier to analyze. He will initially have an empty list of words and will perform a series of transformations based on commands he receives. The initial list is empty. There will be `q` commands and each command could be one of the following: 1. `\\"ADD <word>\\"`: Add the given `<word>` to the end of the list. 2. `\\"REMOVE <index>\\"`: Remove the word at the given zero-based `<index>` from the list. 3. `\\"COUNT <prefix>\\"`: Count how many words in the list start with the given `<prefix>`. 4. `\\"PRINT\\"`: Output the current list of words in its original order. The first line contains the integer `q` (1 ≤ q ≤ 10^5) which is the number of commands. The next `q` lines contain one of the commands listed above. The length of `<word>` or `<prefix>` does not exceed 100 characters, and all characters are lowercase English letters. It is guaranteed that the `REMOVE` operation will only be called with valid indices and that the list will never be empty when `REMOVE` is called. For every `COUNT` command, output the result on a new line. For the `PRINT` command, output the current list joined by spaces. # Input: `q` Commands (one per line) # Output: Output the results of the `COUNT` commands (one per line) and the `PRINT` command (one per line). Example: # Input: ```plaintext 8 ADD hello ADD world COUNT he REMOVE 1 ADD code COUNT wo PRINT REMOVE 0 PRINT ``` # Output: ```plaintext 1 0 hello code code ```","solution":"def process_commands(commands): words = [] results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"ADD\\": word = parts[1] words.append(word) elif action == \\"REMOVE\\": index = int(parts[1]) words.pop(index) elif action == \\"COUNT\\": prefix = parts[1] count = sum(1 for word in words if word.startswith(prefix)) results.append(str(count)) elif action == \\"PRINT\\": results.append(\\" \\".join(words)) return results"},{"question":"You are given an array of n integers where each integer is either 0 or 1. The array represents bulbs, where 0 indicates that the bulb is off, and 1 indicates that the bulb is on. You are allowed to perform the following operation exactly once: choose any continuous subarray and flip all the bulbs in that subarray (flipping means changing 0 to 1 and 1 to 0). Your goal is to find the maximum number of bulbs that can be turned on after exactly one flip operation. For example, if the array is [1, 0, 0, 1, 0], you can flip the subarray [0, 0, 1] to make the array [1, 1, 1, 0, 0], and thus achieving a maximum of 3 bulbs turned on. The first line contains a single integer n (1 le n le 5000) — the length of the array. The second line contains n integers a_1, a_2, ldots, a_n (a_i in {0, 1}) — representing the initial states of the bulbs. Print a single integer — the maximum number of bulbs that can be turned on after exactly one flip operation. In the first example, a possible way to achieve an optimal answer is to flip the subarray starting at index 2 and ending at index 4. In the second example, flipping any subarray of length 1 that contains a 0 is optimal. In the third example, you can flip the entire array to make all bulbs turned on.","solution":"def max_bulbs_on_after_flip(arr): This function calculates the maximum number of bulbs that can be turned on after exactly one flip operation on any continuous subarray. n = len(arr) total_ones = sum(arr) max_diff = 0 current_diff = 0 for i in range(n): if arr[i] == 1: current_diff -= 1 else: current_diff += 1 if current_diff < 0: current_diff = 0 max_diff = max(max_diff, current_diff) if total_ones == n: return total_ones - 1 return total_ones + max_diff"},{"question":"You are developing a system that will validate a series of passwords. For a password to be considered strong, it must meet the following criteria: 1. It must be at least 8 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from the set: `!@#%^&*()-+`. Given a password as input, determine if it meets all the criteria for a strong password. The input consists of a single line containing a password (a string of length between 1 and 1000). Output `YES` if the password is strong according to the above criteria, otherwise output `NO`. **Example Input 1:** ``` Password123! ``` **Example Output 1:** ``` YES ``` **Example Input 2:** ``` weakpass ``` **Example Output 2:** ``` NO ```","solution":"import re def is_strong_password(password): Determines if the input password is strong based on the given criteria. Criteria: 1. At least 8 characters long. 2. Contains at least one uppercase letter. 3. Contains at least one lowercase letter. 4. Contains at least one digit. 5. Contains at least one special character from the set: `!@#%^&*()-+`. Returns: \'YES\' if the password meets all criteria, otherwise \'NO\'. if len(password) < 8: return \'NO\' if not re.search(r\\"[A-Z]\\", password): return \'NO\' if not re.search(r\\"[a-z]\\", password): return \'NO\' if not re.search(r\\"d\\", password): return \'NO\' if not re.search(r\\"[!@#%^&*()-+]\\", password): return \'NO\' return \'YES\'"},{"question":"You are given an array of integers and a target sum. Your task is to determine the number of unique pairs of elements (a, b) in the array such that a + b equals the target sum. Each pair should be counted only once, and the order of elements in the pair does not matter (i.e., (a, b) is considered the same as (b, a)). For example, in the array [1, 2, 3, 4, 3, 5], with a target sum of 6, the valid pairs are (1, 5) and (2, 4). Since (3, 3) is a pair that sums to 6 but uses the same element twice, it should not be considered unless the element appears more than once in the array. Input: - The first line contains a single integer t, the number of test cases (1 <= t <= 10^5). - For each test case, the first line contains two integers n (1 <= n <= 10^5) and k (1 <= k <= 10^9), the size of the array and the target sum respectively. - The second line contains n integers, the elements of the array (-10^9 <= element <= 10^9). Output: - For each test case, output a single integer, the number of unique pairs that sum to the target. Example Input: 3 5 5 1 2 3 2 3 4 10 2 8 4 6 4 0 0 -1 1 0 Example Output: 1 2 2","solution":"def count_unique_pairs_with_sum(arr, target): This function returns the number of unique pairs in the array `arr` that sum up to the `target`. seen = set() unique_pairs = set() for number in arr: needed_value = target - number if needed_value in seen: pair = tuple(sorted((number, needed_value))) unique_pairs.add(pair) seen.add(number) return len(unique_pairs) def process_test_cases(t, test_cases): Processes multiple test cases and returns a list of results. results = [] for i in range(t): n, k = test_cases[i][0] arr = test_cases[i][1] results.append(count_unique_pairs_with_sum(arr, k)) return results"},{"question":"A valid lock code is a sequence of exactly 6 alphanumeric characters, where the first character must be an uppercase letter, and the rest can be lowercase letters, uppercase letters, or digits. For example, \\"A1bc2D\\" is a valid lock code, but \\"a1bc2D\\" and \\"A1bc2DF\\" are not. You are given a string `s` of length `n`, consisting of alphanumeric characters. In one operation, you can insert, delete, or replace any character from string `s`. For example, from the string \\"A1c\\" you can get \\"A1c2D\\", \\"1bc2D\\", or \\"c1c\\". You need to determine whether there is such a sequence of operations (possibly empty), after which the string `s` becomes a valid lock code. The first line contains one integer `t` (`1 <= t <= 100`) — the number of test cases. The first line of each test case contains one integer `n` (`1 <= n <= 100`) — the length of string `s`. The second line of each test case contains the string `s` (`|s| = n`) consisting of alphanumeric characters. For each test, print one line. If there is a sequence of operations, after which `s` becomes a valid lock code, print YES. Otherwise, print NO. **Example:** Input: ``` 3 6 A1bc2D 6 a1bc2D 8 A1bc2DEF ``` Output: ``` YES NO NO ```","solution":"def is_valid_lock_code(n, s): Determines if the string \'s\' can be transformed into a valid lock code. A valid lock code is a sequence of exactly 6 alphanumeric characters, where the first character must be an uppercase letter. if n != 6: return \\"NO\\" if not s[0].isupper(): return \\"NO\\" if any(not c.isalnum() for c in s): return \\"NO\\" return \\"YES\\" def lock_code_evaluator(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] results.append(is_valid_lock_code(n, s)) return results"},{"question":"Implement a function that takes a list of integer intervals and merges any overlapping intervals. Each interval is represented as a list of two integers [start, end], where start is less than or equal to end. Your task is to write a function: ```python def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: ``` Given a list of intervals, merge all overlapping intervals and return the list of merged intervals sorted by their start time. # Example **Input:** ```python intervals = [[1, 3], [2, 6], [8, 10], [15, 18]] ``` **Output:** ```python [[1, 6], [8, 10], [15, 18]] ``` **Explanation:** - The intervals [1, 3] and [2, 6] overlap, and so they are merged into [1, 6]. - The intervals [8, 10] and [15, 18] do not overlap, so they remain as separate intervals. **Input:** ```python intervals = [[1, 4], [4, 5]] ``` **Output:** ```python [[1, 5]] ``` **Explanation:** - The intervals [1, 4] and [4, 5] overlap by sharing the common point 4, and so they are merged into [1, 5]. # Constraints - The input list `intervals` can have a length in the range [0, 10^4]. - The start and end of each interval will be an integer in the range [-10^5, 10^5].","solution":"from typing import List def merge_intervals(intervals: List[List[int]]) -> List[List[int]]: Merges overlapping intervals and returns the list of merged intervals sorted by their start time. Args: intervals (List[List[int]]): A list of intervals, each interval represented as a list [start, end]. Returns: List[List[int]]: A list of merged intervals. if not intervals: return [] # First, sort the intervals based on the start time intervals.sort(key=lambda x: x[0]) merged = [] for interval in intervals: # If the list of merged intervals is empty or if the current interval does not overlap with the last one, append it. if not merged or merged[-1][1] < interval[0]: merged.append(interval) else: # There is overlap, so we merge the current interval with the last interval in merged merged[-1][1] = max(merged[-1][1], interval[1]) return merged"},{"question":"You are given a grid of size n x m where each cell contains a positive integer. You need to process q queries of two types: 1. Update the value in a specific cell. 2. Calculate the sum of the values in a subgrid defined by its top-left and bottom-right corners. For the first type of query, you will be given the row index r, column index c, and the new value v. For the second type, you will be given the coordinates of the top-left corner (r1, c1) and the bottom-right corner (r2, c2) of the subgrid. Initially, the grid is filled with zeros. Format: The first line contains three integers n, m, and q (1 ≤ n, m ≤ 500, 1 ≤ q ≤ 10^5). Then q lines follow, each containing one of the two types of queries: - For an update query, the format is: 1 r c v (1 ≤ r ≤ n, 1 ≤ c ≤ m, 1 ≤ v ≤ 10^9) - For a sum query, the format is: 2 r1 c1 r2 c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) Output: For each query of type 2, output the sum of the values in the defined subgrid. **Example:** ``` Input: 3 3 5 1 1 1 5 1 2 3 7 2 1 1 2 3 1 3 3 10 2 1 1 3 3 Output: 12 22 ```","solution":"class Grid: def __init__(self, n, m): self.n, self.m = n, m self.grid = [[0] * m for _ in range(n)] def update(self, r, c, v): self.grid[r-1][c-1] = v def sum_region(self, r1, c1, r2, c2): sum_val = 0 for i in range(r1-1, r2): for j in range(c1-1, c2): sum_val += self.grid[i][j] return sum_val def process_queries(n, m, q, queries): grid = Grid(n, m) results = [] for query in queries: if query[0] == 1: _, r, c, v = query grid.update(r, c, v) elif query[0] == 2: _, r1, c1, r2, c2 = query results.append(grid.sum_region(r1, c1, r2, c2)) return results"},{"question":"Detective Conan has a notebook where he writes down clues concerning his cases. The notebook has n pages, and each page can contain multiple clues. However, adding or removing clues from a page must adhere to specific rules. There are q operations Detective Conan can perform, and they are of the following three types: 1. **ADD x c**: Add c clues to page x. 2. **REMOVE x c**: Remove c clues from page x (if there are fewer than c clues on the page, remove all the clues on the page). 3. **REPORT x**: Report the number of clues on page x. Initially, each page has 0 clues. Your task is to write a program that performs each operation and reports the number of clues when required. The input format is as follows: - The first line contains two integers n and q (1 ≤ n, q ≤ 300,000) – the number of pages in the notebook and the number of operations. - The next q lines describe the operations. Each operation is either \\"ADD x c\\", \\"REMOVE x c\\", or \\"REPORT x\\". For each \\"REPORT x\\" operation, print the number of clues on page x. Example Input: ``` 5 6 ADD 2 10 ADD 2 5 REMOVE 2 8 ADD 1 3 REMOVE 2 10 REPORT 2 ``` Output: ``` 7 ``` Explanation: 1. Page 2 has 10 clues added. 2. 5 more clues are added to page 2, making a total of 15. 3. 8 clues are removed from page 2, leaving 7 clues. 4. 3 clues are added to page 1 (although irrelevant to the final output). 5. 10 clues are removed from page 2, which reduces the count to 0 (attempt to remove more clues than present). 6. Finally, the number of clues on page 2 is reported, which is 0 by that point.","solution":"def notebook_operations(n, q, operations): Perform notebook operations and return the results of all REPORT operations. :param int n: number of pages in the notebook :param int q: number of operations :param list operations: list of operations :return: list of results of REPORT operations clues = [0] * (n + 1) results = [] for operation in operations: parts = operation.split() op_type = parts[0] if op_type == \\"ADD\\": x, c = int(parts[1]), int(parts[2]) clues[x] += c elif op_type == \\"REMOVE\\": x, c = int(parts[1]), int(parts[2]) clues[x] = max(0, clues[x] - c) elif op_type == \\"REPORT\\": x = int(parts[1]) results.append(clues[x]) return results"},{"question":"You are given an array of strings where each string represents a word. The words are written in an alien language and the order of the characters is unknown. Write a function that determines the correct order of the characters in the alien language. Your task is to output a string representing the characters in the correct order. If there are multiple valid outputs, any one is acceptable. If there is no valid ordering, return an empty string. The first line contains an integer n (1 le n le 10^4) — the number of words. Each of the next n lines contains a string consisting of lowercase English letters. Each string is of length at most 100. **Example Input:** ``` 5 wrt wrf er ett rftt ``` **Example Output:** ``` wertf ``` Explanation: Given the words \'wrt\', \'wrf\', \'er\', \'ett\', and \'rftt\', the character \'w\' comes before \'e\' and \'r\', \'r\' comes before \'t\', \'t\' comes before \'f\', and \'e\' comes before \'t\'. So one possible valid order is \\"wertf\\".","solution":"from collections import defaultdict, deque def alien_order(words): Determines the correct order of characters in an alien language. # Step 1: Create a graph graph = defaultdict(set) in_degree = defaultdict(int) # Initialize the graph for word in words: for char in word: if char not in in_degree: in_degree[char] = 0 # Step 2: Build the graph for i in range(len(words) - 1): first, second = words[i], words[i + 1] min_length = min(len(first), len(second)) for j in range(min_length): if first[j] != second[j]: if second[j] not in graph[first[j]]: graph[first[j]].add(second[j]) in_degree[second[j]] += 1 break else: if len(first) > len(second): return \\"\\" # Step 3: Topological Sort (Kahn\'s Algorithm) queue = deque([char for char in in_degree if in_degree[char] == 0]) order = [] while queue: current = queue.popleft() order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If all characters are included in the order return the result if len(order) == len(in_degree): return \\"\\".join(order) else: return \\"\\""},{"question":"Given a non-negative integer N (1 ≤ N ≤ 10^6), write a function that calculates the sum of the squares of all even numbers from 1 to N inclusive. This problem should be solved efficiently, ensuring that it can handle the upper limits of the input size without excessive computational time. Your function should have the following signature: ```python def sum_of_squares_of_even_numbers(N: int) -> int: ``` # Example: ```python assert sum_of_squares_of_even_numbers(10) == 220 ``` # Explanation: - The even numbers from 1 to 10 are: 2, 4, 6, 8, 10 - Their squares are: 4, 16, 36, 64, 100 - The sum of these squares is: 4 + 16 + 36 + 64 + 100 = 220","solution":"def sum_of_squares_of_even_numbers(N: int) -> int: Calculate the sum of the squares of all even numbers from 1 to N inclusive. Parameters: N (int) : A non-negative integer (1 ≤ N ≤ 10^6) Returns: int : The sum of the squares of all even numbers from 1 to N inclusive. return sum(i * i for i in range(2, N+1, 2))"},{"question":"A successful software company has a large number of projects to manage. Each project has a range of start and end dates. Due to resource constraints, the company can only work on one project at a time. The goal is to determine the maximum number of non-overlapping projects that can be completed. A project is considered non-overlapping if its start date is after or on the end date of the previous project. You are provided with a list of projects where each project is represented by a start and end date. Your task is to write a program that calculates the maximum number of non-overlapping projects that can be managed. The first input line contains an integer n (1 ≤ n ≤ 100,000), which represents the number of projects. The next n lines each contain two integers, start and end (1 ≤ start < end ≤ 1,000,000), representing the start and end dates of each project. Print a single integer representing the maximum number of non-overlapping projects that can be managed. # Example Input: ``` 3 1 3 2 5 4 6 ``` Output: ``` 2 ``` Explanation: Out of the three projects, we can select the following non-overlapping projects: - Project 1: (1, 3) - Project 3: (4, 6) Another selection could be: - Project 2: (2, 5) - Project 3: (4, 6) Both result in a maximum of 2 non-overlapping projects.","solution":"def max_non_overlapping_projects(projects): # Sort projects based on their end time projects.sort(key=lambda x: x[1]) count = 0 current_end_time = 0 for start, end in projects: if start >= current_end_time: count += 1 current_end_time = end return count"},{"question":"Given an array of integers, you need to perform a series of operations to make all the array elements equal. In one operation, you can either increase or decrease an element of the array by 1. Your task is to determine the minimum number of operations required to achieve this. **Input** The first line of the input contains an integer n (1 ≤ n ≤ 100,000) – the number of elements in the array. The second line contains n integers separated by space, representing the array elements a1, a2,…, an (1 ≤ ai ≤ 1,000,000). **Output** Print a single integer – the minimum number of operations required to make all elements of the array equal. **Example** **Input:** ``` 4 1 2 3 4 ``` **Output:** ``` 4 ``` **Explanation:** To make all elements equal, you would ideally want to convert all elements to the median of the array. In this example, converting all elements to 2.5 would minimize the number of operations. But since array elements must be integers, converting all elements to either 2 or 3 (which are near the median) is optimal: - Convert 1 to 2 (1 operation) - Convert 4 to 3 (1 operation) - Convert 2 (0 operation) - Convert 3 (0 operation) Total operations: 1 + 1 + 0 + 0 = 4","solution":"def min_operations_to_make_equal(arr): Determines the minimum number of operations required to make all elements in the array equal by either increasing or decreasing an element by 1 in each operation. n = len(arr) arr.sort() # Median minimizes the number of operations median = arr[n // 2] operations = sum(abs(x - median) for x in arr) return operations"},{"question":"Given an array of strings, you need to find the longest common subsequence (LCS) present in all the strings. The LCS is defined as the longest sequence that can be derived from all the strings by deleting some (or none) characters, without changing the order of the remaining characters. # Input - The first line contains an integer m (2 le m le 1000), the number of strings. - The following m lines each contain one string. Each string consists of lowercase English letters and has length between 1 to 1000. # Output - Print the length of the longest common subsequence present in all the strings. # Example **Input:** ``` 3 abcde bacd bca ``` **Output:** ``` 1 ``` # Explanation In the example given, the longest common subsequence is \\"b\\" which has length 1.","solution":"def longest_common_subsequence_length(m, strings): def lcs(s1, s2): dp = [[0] * (len(s2)+1) for _ in range(len(s1)+1)] for i in range(1, len(s1)+1): for j in range(1, len(s2)+1): if s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) return \'\'.join([s1[i-1] for i in range(1, len(s1)+1) if dp[i][len(s2)] != dp[i-1][len(s2)]]) current_lcs = strings[0] for string in strings[1:]: current_lcs = lcs(current_lcs, string) if not current_lcs: return 0 return len(current_lcs)"},{"question":"A company is organizing a team-building event and they want to form teams. Each team must consist of exactly two or three people. The goal is to maximize the number of teams. You are provided with the total number of people. Note that it might not be possible to use everyone in the teams, some might have to remain without a team. Write a function that takes an integer, n (1 ≤ n ≤ 10^6), which represents the total number of people, and returns an integer representing the maximum number of teams that can be formed. For example, if there are 7 people: - You can form two teams of 3 people each, and one team of 2 people, for a total of 3 teams. - Or, you could form three teams of 2 people each, and one person will remain without a team, leading to 3 teams. While both approaches give the same number of teams in this case, your function should always aim to form more teams if possible. Function signature: ```python def max_teams(n: int) -> int: ``` # Example Example 1 Input: `7` Output: `3` Explanation: You can form two teams of 3 people each, and one team of 2 people, thus forming three teams. Example 2 Input: `5` Output: `2` Explanation: You can form one team of 3 people and one team of 2 people, thus forming two teams.","solution":"def max_teams(n): Returns the maximum number of teams that can be formed with n people, where each team consists of exactly 2 or 3 people. if n < 2: return 0 # It is not possible to form any team. return n // 2 # Since the minimum teams 2 people and maximum of 3, we maximize by pairing in pairs"},{"question":"A company is planning to launch a sale on its e-commerce platform. During the sale, they want to offer discounts on some products. For each product, they have a list of potential discount percentages. They can only apply one discount per product, and they want to choose the discounts such that the overall discount amount is minimized. You are given a list of integers representing the prices of the products and a corresponding list of lists where each list contains potential discounts for each product as percentages. Your task is to find the minimum possible total discounted price for all products. The first line contains an integer n (1 ≤ n ≤ 100) representing the number of products. The second line contains n integers where each integer represents the price of a product. The next n lines contain the potential discount percentages for each product. Each line starts with an integer k (1 ≤ k ≤ 10), which is the number of discounts available for the corresponding product, followed by k integers representing the discounts in percentages (0 ≤ percentage ≤ 100). Print the minimum possible total discounted price for all products. # Example Input: ``` 3 100 200 300 2 10 20 3 15 25 5 1 5 ``` Output: ``` 525 ``` # Explanation - The first product has a price of 100 and can be discounted by either 10% or 20%. The optimal choice is 20%, reducing the price by 20 to 80. - The second product has a price of 200 and can be discounted by 15%, 25%, or 5%. The optimal choice is 25%, reducing the price by 50 to 150. - The third product has a price of 300 and can be discounted by 5%. The optimal choice is 5%, reducing the price by 15 to 285. - The total discounted price is 80 + 150 + 285 = 525.","solution":"def min_total_discounted_price(n, prices, discounts): Calculate the minimum total discounted price for all products. Args: n : int - Number of products prices : list of int - Prices of the products discounts: list of lists - List of discounts for each product Returns: int - Minimum possible total discounted price total_price = 0 for i in range(n): price = prices[i] available_discounts = discounts[i] max_discount = max(available_discounts) discounted_price = price * (1 - max_discount / 100) total_price += discounted_price return int(total_price)"},{"question":"Consider a system where each movie in a given set has relationships to other movies as suggested sequels. Each movie is assigned a unique integer id from 1 to n and there are m sequel relationships. Each sequel relationship is represented by two integers u and v (u ≠ v), indicating that movie u is a suggested prequel to movie v. No movie is its own sequel, directly or indirectly, and sequels form a Directed Acyclic Graph (DAG). You are now given q queries. Each query consists of two integers x and y, denoting two movie ids. For each query, determine if there is a possible sequence of suggested movies starting from movie x and ending at movie y. Write a program that will help to answer these queries. # Input: - The first line contains two integers, n and m (1 ≤ n, m ≤ 20000), the number of movies and the number of sequel relationships respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that movie u is a suggested prequel to movie v. - The next line contains an integer q (1 ≤ q ≤ 20000), the number of queries. - The next q lines each contain two integers x and y (1 ≤ x, y ≤ n), representing a query that asks if there is a possible sequence of suggested movies from x to y. # Output: For each query, output \\"Yes\\" if there is a possible sequence from movie x to movie y, otherwise output \\"No\\". # Sample Input: ``` 5 4 1 2 2 3 3 4 4 5 3 1 5 2 4 4 1 ``` # Sample Output: ``` Yes Yes No ``` # Explanation: In the sample input: - There is a direct sequence of movies from 1 to 5 through movies 2, 3, and 4. - There is a direct sequence from movie 2 to movie 4 through movie 3. - There is no sequence that starts from movie 4 and ends at movie 1 as it would violate the directionality of the sequel relationships (i.e., they form a DAG).","solution":"def find_movie_sequence(n, m, relationships, q, queries): from collections import defaultdict, deque # Create a graph from relationships graph = defaultdict(list) for u, v in relationships: graph[u].append(v) # Use BFS to determine the reachability for each query def is_reachable(x, y): if x == y: return True visited = set() queue = deque([x]) while queue: current = queue.popleft() if current == y: return True for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return False results = [] for x, y in queries: if is_reachable(x, y): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"You are given a sequence consisting of n integers a1, a2, ..., an. Your task is to determine the length of the longest contiguous subsequence where all elements are strictly increasing. Implement a function that accepts the length of the sequence (n) and the sequence of integers. The function should return a single integer, the length of the longest contiguous subsequence with strictly increasing elements. The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the sequence. The second line contains n integers a1, a2, ..., an (−10^9 ≤ ai ≤ 10^9). Print a single integer — the length of the longest contiguous subsequence where each subsequent element is strictly greater than the previous one. Example: Input: 6 1 2 2 4 3 5 Output: 2 Explanation: The longest strictly increasing contiguous subsequences are [1, 2] and [3, 5], each of length 2. So, the answer is 2.","solution":"def longest_increasing_subsequence_length(n, sequence): Computes the length of the longest contiguous strictly increasing subsequence. Parameters: n (int): The length of the sequence. sequence (list): A list of integers representing the sequence. Returns: int: The length of the longest contiguous strictly increasing subsequence. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sequence[i] > sequence[i - 1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"You are given a matrix of size n times m filled with non-negative integers. Starting at the top-left cell of the matrix (0, 0), you need to find the maximum sum of elements you can accumulate, given that you can only move either right or down at any point in time. Write a function to determine this maximum sum path from the top-left to the bottom-right of the matrix. # Input: - The first line contains two integers n and m (1 le n, m le 1000) – the number of rows and columns in the matrix. - Each of the next n lines contains m integers separated by spaces, representing the elements of the matrix. Each element is a non-negative integer and does not exceed 10^3. # Output: - Print a single integer – the maximum sum that can be obtained by following a path from the top-left to the bottom-right cell of the matrix. # Example: Input: ``` 3 3 1 3 1 1 5 1 4 2 1 ``` Output: ``` 12 ``` # Explanation: The path with the maximum sum starts from the top-left (1), moves right to (3), right to (1), down to (5), down to (1), and finally right to (1), accumulating a sum of 1 + 3 + 1 + 5 + 1 + 1 = 12.","solution":"def max_sum_path(matrix): n = len(matrix) m = len(matrix[0]) # Create a DP table to store the maximum sum upto each cell. dp = [[0] * m for _ in range(n)] # Initialize the top-left cell dp[0][0] = matrix[0][0] # Fill in the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + matrix[0][j] # Fill in the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + matrix[i][0] # Fill in the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j] # The bottom-right cell has the result return dp[n-1][m-1]"},{"question":"There is a grid of size n x m, initialized with all cells having a value of 0. You are given q queries, and in each query, you will be provided with four integers: x1, y1, x2, y2. For each query, you need to increment the value of all cells in the sub-grid defined by the corners (x1, y1) and (x2, y2) by 1. Your task is to return the final state of the grid after all queries have been processed. The first line of the input contains three integers n, m, q (1 ≤ n, m ≤ 100, 1 ≤ q ≤ 1000). The next q lines each contain four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m), which represent the coordinates of the sub-grid. Output the final n x m grid, with each cell value separated by a space, and each row on a new line.","solution":"def process_queries(n, m, queries): # Initialize n x m grid with zeros grid = [[0] * m for _ in range(n)] # Process each query for x1, y1, x2, y2 in queries: for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += 1 return grid"},{"question":"A message is considered diverse if it contains at least three different characters (letters or digits). However, it must also adhere to a particular property: all different characters must appear with the same frequency. You\'re given a string s. Check whether the string can be considered diverse. The only line contains s (1 ≤ |s| ≤ 10^5) consisting of lowercase latins and digits. Print \\"Yes\\" if the string can be considered diverse according to the criteria above or \\"No\\" otherwise. In sample case ab12ba21 can be restructured as a1b2, making it diverse since \'a\', \'b\', \'1\', and \'2\' all appear twice. There\'s no suitable restructuring in the sample case of aa1b3.","solution":"def is_diverse(s): from collections import Counter if len(s) < 3: return \\"No\\" char_count = Counter(s) frequencies = set(char_count.values()) if len(char_count) < 3 or len(frequencies) != 1: return \\"No\\" return \\"Yes\\""},{"question":"A delivery company has n delivery robots distributed across a city, numbered from 1 to n. Each robot has a fixed energy limit ei (1 ≤ ei ≤ 10^5), which determines how many units of energy it has for performing deliveries. The company delivers m packages (1 ≤ m ≤ 10000) daily, each requiring di (1 ≤ di ≤ 10^5) units of energy. Your task is to assign each package to a robot such that the total number of packages delivered by all robots is maximized. A robot can only deliver a package if it has enough energy to do so. Once a robot\'s energy is used, it cannot deliver more packages. The first input line contains integer n — the number of robots. The second line contains n space-separated numbers ei — the energy limits of the robots. The third line contains integer m — the number of packages. The fourth line contains m space-separated numbers di — the energy requirements of the packages. Output a single integer, the maximum number of packages that can be delivered. Example: Input: 3 4 8 5 4 9 6 2 7 Output: 2 Explanation: In the given example, there are three robots with energy limits 4, 8, and 5. There are four packages requiring 9, 6, 2, and 7 units of energy respectively. The maximum number of packages that can be delivered is 2. We can assign the package with energy requirement 2 to the robot with energy 4 and the package with energy requirement 6 to the robot with energy 8. The other packages cannot be assigned to any robots because they exceed the available energy limits.","solution":"def max_packages_delivered(n, robot_energies, m, package_demands): robot_energies.sort(reverse=True) package_demands.sort(reverse=True) delivered_packages = 0 j = 0 for i in range(m): if j < n and package_demands[i] <= robot_energies[j]: delivered_packages += 1 j += 1 return delivered_packages # Example usage n = 3 robot_energies = [4, 8, 5] m = 4 package_demands = [9, 6, 2, 7] print(max_packages_delivered(n, robot_energies, m, package_demands)) # Output: 2"},{"question":"You are given an undirected, weighted graph with `n` nodes and `m` edges. Each node is labeled from `1` to `n`. Your task is to find the shortest path from node `1` to node `n` using Dijkstra\'s algorithm, and return the length of the shortest path. If there is no path between node `1` and node `n`, return `-1`. # Input - The first line contains two integers `n` and `m` (1 le n le 1000, 0 le m le 5000) — the number of nodes and edges, respectively. - Each of the next `m` lines contains three integers `u`, `v`, and `w` (1 le u, v le n, 1 le w le 10^6) — indicating that there is an edge between node `u` and node `v` with a weight of `w`. # Output - Output a single integer — the length of the shortest path from node `1` to node `n`. If there is no path, output `-1`. # Example Input ``` 5 6 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 ``` Output ``` 8 ``` Input ``` 4 2 1 2 3 3 4 5 ``` Output ``` -1 ``` # Note In the first example, the shortest path from node `1` to node `5` is `1 -> 2 -> 3 -> 5` with a total weight of `2 + 1 + 3 = 6`. In the second example, there is no path from node `1` to node `4`, so the output is `-1`. # Constraints - Use Dijkstra’s algorithm to solve the problem efficiently. - Ensure that you handle cases where no path exists appropriately.","solution":"import heapq def dijkstra(n, edges): Find the shortest path from node 1 to node n using Dijkstra\'s algorithm. Parameters: n (int): Number of nodes in the graph. edges (list of tuples): Each tuple contains (u, v, w) representing an edge between node u and node v with weight w. Returns: int: Length of the shortest path from node 1 to node n. If there is no path, return -1. graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) pq = [(0, 1)] # (distance, node) distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[1] = 0 visited = set() while pq: current_distance, current_node = heapq.heappop(pq) if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(pq, (distance, neighbor)) return distances[n] if distances[n] != float(\'inf\') else -1"},{"question":"You are a software engineer tasked with developing a system to manage and optimize the usage of parking spaces in a busy metropolitan area. Your system needs to handle multiple parking lots, each with a different number of parking spaces. The system should be able to efficiently allocate and deallocate parking spaces, while also maximizing the efficient usage of the parking lot. Each parking lot operates independently and you need to perform the following operations: 1. Allocate a parking space in a given parking lot. The parking space should be the first available (lowest numbered) space. 2. Deallocate a given parking space in a given parking lot. 3. Query the current number of available parking spaces in a given parking lot. Write a program that performs these operations. The input consists of a series of operations (allocate, deallocate, query). Input format: - The first line contains two integers n (1 ≤ n ≤ 10^4) and m (1 ≤ m ≤ 10^6) - the number of parking lots and the maximum number of parking spaces in any parking lot. - The following n lines describe the initial state of each parking lot. Each line contains a single integer pi (0 ≤ pi ≤ m) indicating the number of initially available parking spaces in the i-th parking lot. - The next part contains a sequence of operations. Each operation is on a new line, starting with an integer t (1 = allocate, 2 = deallocate, 3 = query) followed by two integers, l (1 ≤ l ≤ n) and x (1 ≤ x ≤ m). - If t = 1, allocate a parking space in the l-th parking lot. - If t = 2, deallocate the x-th parking space in the l-th parking lot. - If t = 3, query the number of available parking spaces in the l-th parking lot. Output the results of each query operation. Example input: ``` 3 5 1 3 2 1 2 0 1 2 0 2 2 1 3 2 0 ``` Example output: ``` 2 ``` In this example: - There are 3 parking lots with 1, 3, and 2 initial parking spaces respectively. - An allocate operation in the 2nd parking lot allocates the 1st available space, reducing available spaces to 2. - Another allocate operation in the 2nd parking lot allocates the next available space, reducing available spaces to 1. - A deallocate operation in the 2nd parking lot on space 1 increases available spaces to 2. - Finally, a query operation on the 2nd parking lot reports 2 available spaces.","solution":"class ParkingLotManager: def __init__(self, n, m, initial_spaces): self.parking_lots = [{\'total_spaces\': m, \'available_spaces\': initial_spaces[i], \'allocated\': set()} for i in range(n)] def allocate(self, lot_index): if self.parking_lots[lot_index][\'available_spaces\'] > 0: available_space = min(set(range(1, self.parking_lots[lot_index][\'total_spaces\']+1)) - self.parking_lots[lot_index][\'allocated\']) self.parking_lots[lot_index][\'allocated\'].add(available_space) self.parking_lots[lot_index][\'available_spaces\'] -= 1 return available_space return -1 # No available space def deallocate(self, lot_index, space_index): if space_index in self.parking_lots[lot_index][\'allocated\']: self.parking_lots[lot_index][\'allocated\'].remove(space_index) self.parking_lots[lot_index][\'available_spaces\'] += 1 def query(self, lot_index): return self.parking_lots[lot_index][\'available_spaces\'] def main(n, m, initial_spaces, operations): manager = ParkingLotManager(n, m, initial_spaces) results = [] for op in operations: if op[0] == 1: manager.allocate(op[1]-1) elif op[0] == 2: manager.deallocate(op[1]-1, op[2]) elif op[0] == 3: results.append(manager.query(op[1]-1)) return results"},{"question":"Faye found an intriguing problem while studying number sequences. She has a sequence of n integers where each integer is between 1 and k (inclusive). She decided to explore subsequences of this sequence, particularly focusing on contiguous subsequences that form an increasing sequence. Your task is to help Faye by finding the length of the longest contiguous increasing subsequence in the given sequence of n integers. Input: - The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 1000), where n is the length of the sequence and k is the maximum value any integer in the sequence can take. - The second line contains n integers a[1], a[2], ..., a[n] (1 ≤ a[i] ≤ k), representing the sequence. Output: - Output a single integer, the length of the longest contiguous increasing subsequence in the given sequence. Example: # Input: ``` 8 10 1 3 5 4 7 9 2 6 ``` # Output: ``` 5 ``` # Explanation: The longest contiguous increasing subsequence is `1, 3, 5, 7, 9`, which has a length of 5.","solution":"def longest_contiguous_increasing_subsequence(n, k, sequence): Finds the length of the longest contiguous increasing subsequence in the given sequence of n integers. Args: - n: Length of the sequence (1 ≤ n ≤ 100) - k: Maximum value any integer in the sequence can take (1 ≤ k ≤ 1000) - sequence: List of n integers where each integer is between 1 and k (inclusive) Returns: - Length of the longest contiguous increasing subsequence in the sequence. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sequence[i] > sequence[i - 1]: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 1 return max_length"},{"question":"Given a number sequence, determine whether it is possible to make all elements equal using a specified operation. In one operation, you can pick any two adjacent elements and replace them with their product modulo a given number m. Formally, you are given an array a of length n and a number m. You can pick any index i (1 leq i < n) and replace a_i and a_{i+1} with a_i times a_{i+1} mod m. The new length of the array will be n-1 after this operation. For example, if you have the array [2, 3, 5] and m = 7, you can choose i = 2 (since a_2 = 3 and a_3 = 5), replace them with 3 times 5 mod 7 = 1, so the new array will be [2, 1]. Determine if it is possible to perform the operation multiple times such that all remaining elements in the array are equal to each other. The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The description of the test cases follows. The first line of each test case contains two integers n (2 leq n leq 2 cdot 10^5) — the length of the array, and m (2 leq m leq 10^9). The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9) — elements of the array. It is guaranteed that the sum of n over all test cases doesn\'t exceed 2 cdot 10^5. For each test case, output on a single line the word \\"YES\\" if it is possible to make all elements in the array equal using the specified operations, or \\"NO\\" if it is impossible to do so.","solution":"def can_make_equal(t, cases): results = [] for n, m, a in cases: if 1 in a: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers of length n (1 ≤ n ≤ 10^5) and an integer k (1 ≤ k ≤ 10^9). Your task is to determine the k-th smallest element in the array after it has been sorted in non-decreasing order. # Input - The first line contains two integers n and k. - The second line contains n integers a1, a2, ..., an, (|ai| ≤ 10^9) — the elements of the array. # Output Print the k-th smallest element in the array after it has been sorted. # Example Input ``` 5 3 3 1 2 5 4 ``` Output ``` 3 ``` # Note In the above example, the sorted array is [1, 2, 3, 4, 5], and the 3rd smallest element is 3.","solution":"def kth_smallest_element(n, k, arr): Returns the k-th smallest element in the array after sorting. arr.sort() return arr[k-1]"},{"question":"You are a software developer working on a sophisticated messaging application. Your task is to build a feature that allows users to schedule repetitive notifications. Each notification can be set to repeat at specific intervals over a given period. The program should determine the exact times at which these notifications will be sent. To simplify, the notification should start at a given start time and repeat every `r` minutes for `d` minutes in total. You should write a function that accepts these parameters and outputs the exact times in \\"HH:MM\\" format when the notifications will be sent. Input: - The function will receive three parameters: - start_time (a string in \\"HH:MM\\" format) representing the start time of the first notification. - r (an integer) representing the interval in minutes between consecutive notifications. - d (an integer) representing the total duration in minutes for which the notifications should be sent. Output: - The function should return a list of strings representing the times at which the notifications will be sent in \\"HH:MM\\" format. Constraints: - The start time will always be in the format \\"HH:MM\\" and represent a valid time. - 0 < r <= 1440, the interval is always positive and does not exceed one day. - 0 < d <= 1440, the duration is always positive and does not exceed one day. Example: Input: ```python schedule_notifications(\\"09:00\\", 30, 120) ``` Output: ```python [\\"09:00\\", \\"09:30\\", \\"10:00\\", \\"10:30\\"] ``` Explanation: - The first notification is sent at 09:00. - Subsequent notifications are sent every 30 minutes. - The notifications continue for 120 minutes from the start (09:00), so the last notification is at 10:30. Make sure to handle cases where the calculated notification times span across different hours or even whole different days, and ensure the times are formatted correctly.","solution":"def schedule_notifications(start_time, r, d): Returns a list of times in \\"HH:MM\\" format when notifications will be sent. from datetime import datetime, timedelta # Convert start_time to datetime object start_dt = datetime.strptime(start_time, \\"%H:%M\\") times = [] interval = timedelta(minutes=r) duration = timedelta(minutes=d) # Add times to the list at intervals until duration time is reached current_time = start_dt while (current_time - start_dt) < duration: times.append(current_time.strftime(\\"%H:%M\\")) current_time += interval return times"},{"question":"You are given a maze with n rows and m columns. Each cell in the maze is either open (denoted by \'.\') or blocked (denoted by \'#\'). Your task is to determine whether it\'s possible to start from any open cell and reach any other open cell using only up, down, left, and right movements. Output \\"YES\\" if it is possible to reach any open cell from any other open cell, otherwise print \\"NO\\". The first line of the input contains two integers t (1 le t le 100) - the number of test cases. Each test case starts with a line containing two integers n and m (1 le n, m le 1000) - the number of rows and columns in the maze. The next n lines each contains a string of length m, representing the maze grid, where each character is either \'.\' or \'#\'. For each test case, print \\"YES\\" or \\"NO\\" on a new line depending on whether it is possible to traverse between any two open cells. Constraints: - It\'s guaranteed that there is at least one open cell in the maze for each test case. - The sum of n times m over all test cases does not exceed 10^6. Example: Input: ``` 2 3 3 .#. .#. ... 4 4 .... .. .. .... Output: YES YES ```","solution":"def is_connected_maze(n, m, maze): Checks if all open cells (\'.\') in the maze are connected. Parameters: n (int): Number of rows in the maze m (int): Number of columns in the maze maze (list of str): The maze grid Returns: str: \\"YES\\" if all open cells can be reached from any other open cell, \\"NO\\" otherwise from collections import deque def bfs(start): queue = deque([start]) visited[start[0]][start[1]] = True while queue: x, y = queue.popleft() for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0<=nx<n and 0<=ny<m and maze[nx][ny] == \'.\' and not visited[nx][ny]: visited[nx][ny] = True queue.append((nx, ny)) # Find the initial open cell for BFS found_open = False for i in range(n): for j in range(m): if maze[i][j] == \'.\': start = (i, j) found_open = True break if found_open: break visited = [[False]*m for _ in range(n)] bfs(start) # Check if all open cells are visited for i in range(n): for j in range(m): if maze[i][j] == \'.\' and not visited[i][j]: return \\"NO\\" return \\"YES\\" def solve_mazes(test_cases): Solves multiple test cases for connected mazes Parameters: test_cases (list of tuples): Each tuple contains (n, m, maze) for a test case Returns: list of str: Results for each test case (\\"YES\\" or \\"NO\\") results = [] for n, m, maze in test_cases: results.append(is_connected_maze(n, m, maze)) return results"},{"question":"Lena and Pavel are playing a game with blocks. They have n blocks in total, and each block can have any of the m different colors. The game involves dividing all the blocks into exactly three groups such that: 1. Each group contains at least one block. 2. No two blocks in the same group share the same color. The game is considered fair if it is possible to divide the blocks according to the above rules. Your task is to determine whether they can divide the blocks in a fair manner. The input contains multiple test cases. Each test case begins with a line containing two integers n and m (3 ≤ n ≤ 100, 1 ≤ m ≤ 50), the number of blocks and the number of different colors, respectively. The next line contains n integers, each between 1 and m, representing the color of each block. For each test case, print \\"YES\\" (without quotes) if the blocks can be divided into three groups as described, otherwise print \\"NO\\" (without quotes). Input ends with a line containing two zeros. **Example input:** ``` 6 3 1 2 3 1 2 3 5 2 1 1 2 2 1 0 0 ``` **Example output:** ``` YES NO ``` In the first example, a valid division would be: Group 1 (block colors: 1, 2), Group 2 (block colors: 3, 1), and Group 3 (block colors: 2, 3). In the second example, it is not possible to divide the blocks into three valid groups, as there are not enough distinct colors to ensure no two blocks in the same group have the same color.","solution":"def is_fair_division(n, m, colors): Determine if blocks can be divided into three groups such that: 1. Each group contains at least one block. 2. No two blocks in the same group share the same color. :param n: int, the number of blocks :param m: int, the number of different colors :param colors: list of int, the color of each block :return: str, \\"YES\\" if the blocks can be divided fairly, \\"NO\\" otherwise from collections import Counter # Counting occurrences of each color color_count = Counter(colors) # Checking if there are at least 3 colors if len(color_count) < 3: return \\"NO\\" # Checking the frequency of each color for count in color_count.values(): if count > n // 3 + 1: return \\"NO\\" return \\"YES\\" def process_input(input_data): results = [] for line in input_data: n, m, *colors = list(map(int, line.split())) if n == 0 and m == 0: break results.append(is_fair_division(n, m, colors)) return results"},{"question":"You are given an array of integers `arr` of length `n`. You need to perform the following operations on the array: 1. In one operation, you can choose any non-empty subarray of `arr` and reverse the order of its elements. 2. After performing the operations, you must make the array sorted in non-decreasing order. Write a program that determines the minimum number of operations needed to sort the array. The first line of the input contains a single integer `n` (1 ≤ n ≤ 100,000) — the length of the array. The second line contains n integers `arr1, arr2, ..., arrn` (1 ≤ arr_i ≤ 100,000) — the elements of the array. Output one integer — the minimum number of operations needed to sort the array in non-decreasing order. Example Input ``` 5 5 3 2 4 1 ``` Output ``` 2 ``` Explanation In the first operation, reverse the entire array to make it `[1, 4, 2, 3, 5]`. In the second operation, reverse the subarray `[4, 2, 3]` to make it `[1, 2, 3, 4, 5]`. Thus, it takes a minimum of 2 operations to sort the array.","solution":"def min_operations_to_sort(arr): Returns the minimum number of operations needed to sort the array by reversing subarrays. n = len(arr) sorted_arr = sorted(arr) if arr == sorted_arr: return 0 def find_unsorted_subarray(arr): start, end = 0, n - 1 while start < n and arr[start] == sorted_arr[start]: start += 1 while end >= 0 and arr[end] == sorted_arr[end]: end -= 1 return start, end start, end = find_unsorted_subarray(arr) if start >= end: return 1 arr[start:end+1] = reversed(arr[start:end+1]) if arr == sorted_arr: return 1 return 2"},{"question":"You are given a matrix representing a maze with \'0\'s and \'1\'s, where \'0\' represents an open path and \'1\' represents a wall. The entrance to the maze is at the top-left corner (0, 0) and the exit is at the bottom-right corner (n-1, m-1). Your task is to determine if there is a path from the entrance to the exit. The path can only be constructed by moving either down or right from a cell, and you cannot move through walls. It is guaranteed that the maze will have at least 1 cell (i.e., n, m > 0). Write a function `hasPath(maze: List[List[int]]) -> bool` that receives a 2D list (n by m) representing the maze and returns a boolean value indicating whether there is a valid path from the entrance to the exit. # Input - A 2D list `maze` of integers where: - `maze[i][j]` is either 0 (open path) or 1 (wall). - 1 ≤ n, m ≤ 1000 # Output - Return `True` if there is a valid path from the entrance to the exit, otherwise `False`. # Examples Example 1 ``` Input: maze = [[0, 1], [0, 0]] Output: True Explanation: The path from top-left to bottom-right follows these steps: (0, 0) -> (1, 0) -> (1, 1). ``` Example 2 ``` Input: maze = [[0, 1], [1, 0]] Output: False Explanation: There is no path from top-left to bottom-right. ``` # Note - The maze is guaranteed to contain at least one cell, and both the entrance and the exit are accessible in the sense that `maze[0][0] == 0` and `maze[n-1][m-1] == 0`. This ensures that the problem always has an entrance and an exit point available. - The function should be optimized to handle large mazes of up to 1000x1000 efficiently.","solution":"def hasPath(maze): from collections import deque n, m = len(maze), len(maze[0]) if n == 1 and m == 1: return maze[0][0] == 0 directions = [(1, 0), (0, 1)] # move either down or right queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == 0 and (nx, ny) not in visited: if nx == n - 1 and ny == m - 1: return True queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"You are managing a water distribution system in a town. The town is represented as a grid of size n x m, where each cell can either be empty or contain an obstacle. Water can flow from a cell to its vertically or horizontally adjacent cell. The water source is located at the top-left corner of the grid (1, 1) and needs to reach the bottom-right corner (n, m). Your task is to determine the number of distinct paths the water can take to reach from the source to the destination, avoiding obstacles. Write a function `countWaterPaths(n, m, grid)` that takes the size of the grid and the grid itself as input and outputs the number of distinct paths from the top-left to the bottom-right of the grid. If the path is blocked, return 0. The first line contains two integers, n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns of the grid, respectively. The following n lines contain m characters each, where each character is either \'.\' indicating an empty cell or \'#\' indicating an obstacle. A path is valid if: - It does not pass through any obstacles. - It only moves right or down. Example input: ``` 3 3 . . . . # . . . . ``` Example output: ``` 2 ``` Explanation: There are two possible paths: 1. Right -> Down -> Down -> Right 2. Down -> Down -> Right -> Right Note: Ensure that your solution is efficient to handle the maximum grid size.","solution":"def countWaterPaths(n, m, grid): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0]*m for _ in range(n)] dp[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are given a list of integers and your task is to determine the length of the longest subsequence that is strictly increasing. For example, if the given list is `[10, 9, 2, 5, 3, 7, 101, 18]`, the longest strictly increasing subsequence is `[2, 3, 7, 101]`, which has a length of 4. Write a function that takes a list of integers and returns the length of the longest strictly increasing subsequence. **Input description:** - The first line of input will contain a single integer n (1 le n le 10^5), representing the number of elements in the list. - The second line of input will contain n integers separated by spaces, representing the elements of the list. Each integer a_i (-10^9 le a_i le 10^9). **Output description:** - Output a single integer - the length of the longest strictly increasing subsequence. **Example:** ``` Input: 8 10 9 2 5 3 7 101 18 Output: 4 ``` **Explanation:** - The longest strictly increasing subsequence is `[2, 3, 7, 101]`, which has a length of 4. You need to design an efficient solution, as the length of the list can be up to 100,000.","solution":"def length_of_LIS(nums): Returns the length of the longest strictly increasing subsequence. if not nums: return 0 # This will hold our increasing subsequence sub = [] for num in nums: # Binary search for the correct position of `num` in `sub` left, right = 0, len(sub) while left < right: mid = (left + right) // 2 if sub[mid] < num: left = mid + 1 else: right = mid # If `left` is equal to the length of `sub`, it means `num` is greater # than any element in `sub` and can be appended at the end. if left == len(sub): sub.append(num) # Otherwise, replace the first element in `sub` which is greater than or equal to `num` else: sub[left] = num return len(sub)"},{"question":"You are given a sequence of integers representing a grid of size 3x3. Each integer ranges from 1 to 9, and each number uniquely represents a digit within the grid. The goal is to determine whether this grid represents a valid \\"Latin Square\\". A grid is considered a valid \\"Latin Square\\" if: 1. Each digit from 1 to 9 occurs exactly once in the grid. 2. Each row contains unique digits. 3. Each column contains unique digits. The input consists of a single line with 9 integers separated by spaces, representing the grid row by row. Print a single line \\"VALID\\" if it is a valid Latin Square and \\"INVALID\\" otherwise. **Example 1:** ``` Input: 1 2 3 4 5 6 7 8 9 Output: VALID ``` **Example 2:** ``` Input: 1 2 3 1 5 6 7 8 9 Output: INVALID ``` **Example 3:** ``` Input: 1 2 3 4 5 6 7 9 8 Output: INVALID ```","solution":"def is_valid_latin_square(grid): Determines if a 3x3 grid is a valid Latin Square. Args: grid (list): A list of 9 integers representing the grid. Returns: str: \\"VALID\\" if the grid is a valid Latin Square, \\"INVALID\\" otherwise. if sorted(grid) != list(range(1, 10)): return \\"INVALID\\" # Check rows for i in range(0, 9, 3): if len(set(grid[i:i+3])) != 3: return \\"INVALID\\" # Check columns for i in range(3): if len(set(grid[i::3])) != 3: return \\"INVALID\\" return \\"VALID\\" # Example usage: # input_sequence = list(map(int, input().split())) # print(is_valid_latin_square(input_sequence))"},{"question":"Given an array of non-negative integers, indicate whether it is possible to partition the array into two subsets such that the sum of elements in both subsets is the same. If it is possible, return true, otherwise return false. Input: - The input consists of a single line containing a space-separated list of non-negative integers, representing the array. The length of the array is at most 200, and each integer is between 0 and 1000. Output: - Output true if the array can be partitioned into two subsets with equal sum, otherwise output false. Example: ``` Input: 1 5 11 5 Output: true ``` Explanation: The array can be partitioned as [1, 5, 5] and [11]. Both subsets sum to 11. Example: ``` Input: 1 2 3 9 Output: false ``` Explanation: The array cannot be partitioned into two subsets such that both subsets have equal sums.","solution":"def can_partition(nums): Returns True if the array can be partitioned into two subsets with equal sum, otherwise False. total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 # Initialize a set to keep track of the targets we can achieve reachable_sums = {0} for num in nums: new_reachable_sums = reachable_sums.copy() for current_sum in reachable_sums: new_sum = current_sum + num if new_sum == target: return True new_reachable_sums.add(new_sum) reachable_sums = new_reachable_sums return target in reachable_sums"},{"question":"Limak loves organizing competitions for his friends. He has n friends and plans to organize m competitions, where each competition involves a subset of his friends. Each friend has a unique skill level represented by an integer ai. The competitions are designed such that for every competition, Limak wants to find the two friends with the highest skill levels in the selected subset. The winners of each competition get highlighted. Your task is to determine the winners for each competition. The first line of input contains two integers n and m (1 ≤ n, m ≤ 100,000) — the number of friends and the number of competitions. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1,000,000) — the skill levels of Limak’s friends. Each of the next m lines describes a competition and contains two integers li and ri (1 ≤ li ≤ ri ≤ n) — the indices of the subset for the i-th competition. The subset includes all friends from index li to index ri (inclusive). For each competition, output the skill levels of the two friends with the highest skill levels in the subset, separated by a space. If the subset of a competition contains fewer than two friends, output \\"-1\\". Example: Input: 6 3 5 1 3 9 7 6 1 3 2 5 4 6 Output: 5 3 7 3 9 7","solution":"def find_winners(n, m, skill_levels, competitions): Determine the winners for each competition. :param n: Number of friends :param m: Number of competitions :param skill_levels: List of skill levels of friends :param competitions: List of competitions in the form of (li, ri) tuples :return: List of tuples containing the skill levels of the top two winners for each competition winners = [] for li, ri in competitions: subset = skill_levels[li-1:ri] if len(subset) < 2: winners.append(\\"-1\\") else: first, second = sorted(subset, reverse=True)[:2] winners.append(f\\"{first} {second}\\") return winners"},{"question":"Arnold has a collection of stones that he likes to play with. Each stone has a weight associated with it. Arnold wants to divide the stones into two piles such that the difference in the total weight of the two piles is minimized. Write a function `min_weight_difference(stones: List[int]) -> int` that finds the minimum possible difference between the total weights of the two piles. The first line contains a single integer n (1 le n le 20) — the number of stones. The next line contains n integers, where each integer w_i (1 le w_i le 1000) is the weight of the i-th stone. Output the minimum possible difference between the total weights of the two piles. In the first example, Arnold can divide the stones with weights [1, 2, 3, 4, 5] into piles [1, 4, 5] and [2, 3] with total weights 10 and 5 respectively, resulting in a difference of 0. **Constraints:** - 1 ≤ n ≤ 20 - 1 ≤ stones[i] ≤ 1000 Example: Input: ``` 5 1 2 3 4 5 ``` Output: ``` 1 ``` Explanation: Arnold can divide the stones into piles [1, 4, 5] and [2, 3] with total weights 10 and 9 respectively, resulting in a difference of 1.","solution":"from typing import List def min_weight_difference(stones: List[int]) -> int: total_weight = sum(stones) n = len(stones) # Initialize dp array dp = [[False] * (total_weight // 2 + 1) for _ in range(n + 1)] # Base case dp[0][0] = True # Process each stone for i in range(1, n + 1): for j in range(total_weight // 2 + 1): dp[i][j] = dp[i - 1][j] if j >= stones[i - 1]: dp[i][j] = dp[i][j] or dp[i - 1][j - stones[i - 1]] # Find the maximum possible weight close to total_weight / 2 for j in range(total_weight // 2, -1, -1): if dp[n][j]: return total_weight - 2 * j"},{"question":"You are given an array a consisting of n integers. You can perform the following operation on the array any number of times: - Select any two indices i and j (1 ≤ i, j ≤ n, i ≠ j) and replace a_i with a_i + a_j. Your task is to determine if it is possible to make all elements of the array equal using the allowed operations. If possible, output \\"YES\\". Otherwise, output \\"NO\\". The first line contains a single integer n (1 le n le 2 cdot 10^5) – the number of elements in the array. The second line contains integers a_1, a_2, ldots, a_n (-10^9 le a_i le 10^9) – the elements of the array. Example: ``` Input: 4 3 6 3 9 Output: YES Input: 5 -1 2 -3 4 -5 Output: NO ```","solution":"def can_make_elements_equal(n, array): Returns \\"YES\\" if it is possible to make all elements of the array equal using the allowed operations. Returns \\"NO\\" otherwise. # If there\'s only one element, they\'re trivially all equal. if n == 1: return \\"YES\\" # All elements must be equal to the sum of the array divided by the number of elements. # If there\'s a common divisor that\'s not 1 in the array, elements cannot be equal. from math import gcd from functools import reduce def find_gcd_of_list(nums): x = reduce(gcd, nums) return x gcd_value = find_gcd_of_list(array) # If GCD is not 1, it is possible to make all elements equal by using + operations if gcd_value != 1: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of integers, and you need to find two distinct indices ( i ) and ( j ) in the array such that the difference between the elements at these indices is equal to a given target number ( n ). Formally, find ( i ) and ( j ) such that ( arr[i] - arr[j] = n ) or ( arr[j] - arr[i] = n ). If there are multiple solutions, any one of them will be accepted. If no such indices exist, return -1. You need to implement a function: ```python def find_indices(arr: list, n: int) -> tuple: # your code here ``` **Input:** - `arr`: a list of integers where ( 2 le text{len}(arr) le 10^5 ) and ( -10^9 le text{arr}[i] le 10^9 ) - `n`: an integer ( 0 le n le 10^9 ) **Output:** The function should return a tuple of the form `(i, j)`, which are the one-based indices of the elements satisfying the condition ( arr[i] - arr[j] = n ), otherwise, return -1 if no such pair exists. **Examples:** 1. If the input array is `[1, 7, 5, 9]` and the target number is `2`, then the function should return `(2, 3)` (since (7 - 5 = 2)). 2. If the input array is `[4, 8, 12, 16]` and the target number is `4`, then the function should return `(2, 1)` or `(3, 2)` or `(4, 3)`. 3. If the input array is `[1, 2, 3, 4, 5]` and the target number is `6`, then the function should return `-1` because there are no two indices with that difference. **Constraints:** 1. You must solve the problem efficiently; a naive ( O(n^2) ) solution will not be accepted due to time constraints. 2. You should use appropriate hashing or sorting mechanisms to find the solution in ( O(n log n) ) or better.","solution":"def find_indices(arr, n): Finds two distinct indices i and j in the array such that the difference between the elements at these indices is equal to a given target number n. Returns a tuple of the form (i, j) which are the 1-based indices of the elements satisfying the condition arr[i] - arr[j] = n or arr[j] - arr[i] = n. If no such indices exist, returns -1. value_to_index = {} for idx, value in enumerate(arr): if value - n in value_to_index: return (idx + 1, value_to_index[value - n] + 1) if value + n in value_to_index: return (value_to_index[value + n] + 1, idx + 1) value_to_index[value] = idx return -1"},{"question":"Write a program that helps in processing unique coupon codes for a marketing campaign. Each coupon code is a string containing alphanumeric characters, and it should be validated according to a specific set of rules: 1. The coupon code must contain exactly 10 characters. 2. It must include at least one uppercase letter. 3. It must include at least one digit. 4. It must include at least one special character from the set: {\'#\', \'@\', \'!\', \'*\'}. The first line of the input contains the number n (1 ≤ n ≤ 100), which represents the number of coupon codes. The following n lines contain one coupon code each. For each coupon code, print \\"VALID\\" if it meets all the rules, otherwise print \\"INVALID\\". Example input: 3 A1b2C3d4E5! 1234567890 Abcde@1234 Example output: VALID INVALID VALID","solution":"def validate_coupon(coupon): Validates a given coupon code based on specific rules. Rules: - It must contain exactly 10 characters. - It must include at least one uppercase letter. - It must include at least one digit. - It must include at least one special character from the set: {\'#\', \'@\', \'!\', \'*\'}. :param coupon: str, a coupon code to be validated. :return: str, \\"VALID\\" if the coupon meets all the rules, otherwise \\"INVALID\\". if len(coupon) != 10: return \\"INVALID\\" has_upper = any(c.isupper() for c in coupon) has_digit = any(c.isdigit() for c in coupon) has_special = any(c in {\'#\', \'@\', \'!\', \'*\'} for c in coupon) if has_upper and has_digit and has_special: return \\"VALID\\" else: return \\"INVALID\\" def process_coupons(n, coupons): Processes a list of coupons and validates each. :param n: int, the number of coupon codes. :param coupons: list of str, the coupon codes. :return: list of str, validity of each coupon code (\\"VALID\\" or \\"INVALID\\"). results = [] for coupon in coupons: results.append(validate_coupon(coupon)) return results"},{"question":"A group of students is participating in a programming contest that takes place over multiple stages. Each stage has a specific problem they must solve. Your task is to help simulate the progress of each student over the stages and determine how many students successfully solve all problems. # Input The input consists of several lines: 1. The first line contains an integer `s` (1 ≤ s ≤ 1000) — the number of students. 2. The second line contains an integer `t` (1 ≤ t ≤ 1000) — the number of stages. 3. The next `s` lines each contain `t` integers, where the `i-th` line contains the results of the `i-th` student for the `t` stages. Each result is either `1` (indicating the student solved the problem in that stage) or `0` (indicating they did not solve the problem). # Output Output a single integer — the number of students who successfully solved all the problems in all the stages. # Example **Input:** ``` 3 4 1 1 0 1 1 1 1 1 0 1 1 1 ``` **Output:** ``` 1 ``` # Explanation In the above example, there are 3 students and 4 stages: - The first student solved only 3 out of 4 problems (not all), so he is not successful. - The second student solved all 4 problems, so he is successful. - The third student solved only 3 out of 4 problems (not all), so he is not successful. Hence, the number of students who solved problems in all stages is 1.","solution":"def count_successful_students(s, t, results): Count the number of students who solved all problems in all stages. Parameters: s (int): Number of students. t (int): Number of stages. results (list of list of int): A list of lists where each sublist represents a student\'s results over the stages. Returns: int: The number of students who successfully solved all problems in all stages. successful_count = 0 for result in results: if all(stage_result == 1 for stage_result in result): successful_count += 1 return successful_count"},{"question":"You are given two arrays, `a` and `b`, each consisting of `n` positive integers. Your task is to find the length of the longest contiguous subarray present in both arrays `a` and `b`. A contiguous subarray is a subarray consisting of consecutive elements from the original array. Input: - The first line contains a single integer `n` (1 le n le 100,000) — the length of the arrays. - The second line contains `n` integers `a_1, a_2, ldots, a_n` (1 le a_i le 1,000,000) — elements of the first array. - The third line contains `n` integers `b_1, b_2, ldots, b_n` (1 le b_i le 1,000,000) — elements of the second array. Output: - You should output exactly one integer — the length of the longest contiguous subarray that appears in both arrays. If there is no such subarray, output `0`. Example: Input: ``` 5 1 2 3 4 5 3 4 5 1 2 ``` Output: ``` 3 ``` In the example, the longest contiguous subarray that appears in both arrays is `[3, 4, 5]`, with a length of `3`.","solution":"def longest_common_contiguous_subarray_length(a, b): Returns the length of longest common contiguous subarray present in both arrays a and b. n = len(a) dp = [[0] * (n + 1) for _ in range(n + 1)] max_len = 0 for i in range(1, n + 1): for j in range(1, n + 1): if a[i - 1] == b[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_len = max(max_len, dp[i][j]) return max_len"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid is initially either empty or occupied by an obstacle. You can move from one cell to another if they are adjacent (vertically or horizontally) and both are empty. Given two cells in the grid, determine if there exists a path between them that only moves through empty cells. # Input The first line contains two integers n and m (1 le n, m le 1000). The next n lines each contain m characters describing the grid, where: - \'.\' denotes an empty cell, - \'#\' denotes a cell with an obstacle. The next line contains four integers r1, c1, r2, and c2 (1 le r1, c1, r2, c2 le n and 1 le c1, c2 le m) — the coordinates of the starting cell and the destination cell respectively. Note that the coordinates are 1-based. # Output Print \\"YES\\" if there is a path connecting the two cells, or \\"NO\\" otherwise. # Example Input ``` 4 4 .... .. .... ..#. 1 1 4 3 ``` Output ``` YES ``` Note: The grid dimensions can go up to 1000 x 1000, so consider the efficiency of your algorithm when designing your solution.","solution":"def is_path_exists(n, m, grid, start, end): from collections import deque def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return False def find_path_in_grid(n, m, grid, r1, c1, r2, c2): start = (r1 - 1, c1 - 1) end = (r2 - 1, c2 - 1) if grid[start[0]][start[1]] == \'#\' or grid[end[0]][end[1]] == \'#\': return \\"NO\\" if is_path_exists(n, m, grid, start, end): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given a string containing characters \'a\', \'b\', and \'?\'. You need to convert all the \'?\' characters to either \'a\' or \'b\' such that no two adjacent characters are the same. If it is possible to do so, return the resulting string. If it is not possible, return -1. The first line of input contains a single string of length n. The characters are \'a\', \'b\', and \'?\'. The length of the string n does not exceed 10^5. Output the valid string after replacing all \'?\' characters, or -1 if it is not possible to achieve the goal. Consider the first sample test. The input string is \\"a?b\\". By replacing the \'?\' with \'a\', the string becomes \\"aab\\", which is not valid. By replacing the \'?\' with \'b\', the string becomes \\"abb\\", which is not valid. Therefore, the output is -1. Consider the second sample test. The input string is \\"a??b\\". By replacing the first \'?\' with \'b\' and the second \'?\' with \'a\', the resulting string is \\"abab\\", which is a valid transformation. Therefore, the output is \\"abab\\".","solution":"def replace_question_marks(s: str) -> str: # Convert the input string into a list for easy manipulation s = list(s) n = len(s) for i in range(n): if s[i] == \'?\': for char in \'ab\': # Check possible replacements \'a\' and \'b\' # Check left and right neighbors to avoid conflicts and replace ? if (i > 0 and s[i - 1] == char) or (i < n - 1 and s[i + 1] == char): continue s[i] = char break # Check final string for validity for i in range(1, n): if s[i] == s[i - 1]: return -1 return \'\'.join(s)"},{"question":"Riley is tasked with sorting a collection of items in a particular way. Each item is represented by a tuple containing two integers: (value, priority). Your goal is to sort the collection such that: 1. Items are sorted primarily by their value in ascending order. 2. If two items have the same value, they should then be sorted by their priority in descending order. You can assume the input is a list of tuples with at least one element and no more than 10^5 elements. Values and priorities are guaranteed to be between -10^9 and 10^9. Write a function `sort_items(items)` that takes a list of tuples `items` and returns a new list sorted according to the above rules. # Input: - A list of tuples `items` with each tuple consisting of two integers (value, priority). # Output: - A new list of tuples sorted according to the given rules. # Example: ```python def sort_items(items): pass # Example usage items = [(5, 10), (3, 5), (3, 7), (4, 2)] print(sort_items(items)) # Expected output: [(3, 7), (3, 5), (4, 2), (5, 10)] ```","solution":"def sort_items(items): Sorts the items primarily by value in ascending order and by priority in descending order if two items have the same value. Args: - items: List of tuples with each tuple containing two integers (value, priority) Returns: - Sorted list of tuples return sorted(items, key=lambda x: (x[0], -x[1]))"},{"question":"A pharmacy is organizing their medicinal inventory. They receive different types of medicines, and they need to quickly check if a particular type of medicine is available in stock. Each type of medicine is represented by a unique integer ID. To manage the search process efficiently, they use a binary search mechanism. You have been given a sorted list of integers representing the medicine IDs in stock. A pharmacist makes several queries each day asking whether a medicine of a particular ID is available. Your task is to implement a function that can efficiently handle these queries by using binary search. Given a list of integers `stock_ids` (sorted in ascending order) and a list of integers `queries`, determine for each query if the medicine ID is present in the stock or not. If the medicine ID is found in the stock, return \\"YES\\"; otherwise, return \\"NO\\". Write a function `check_medicine_availability(stock_ids: List[int], queries: List[int]) -> List[str]` that takes a list of sorted stock IDs and a list of query IDs, and returns a list of strings, where each element is either \\"YES\\" or \\"NO\\" corresponding to the query result. # Input - `stock_ids` - a list of integers representing the IDs of medicines in sorted order. - `queries` - a list of integers representing the IDs of medicine queries. # Output Return a list of strings with \\"YES\\" for IDs that are available in stock and \\"NO\\" for those that are not. # Constraints - The length of `stock_ids` and `queries` can be up to 1,000,000. - Each medicine ID and query ID is a unique non-negative integer. # Example Input ``` stock_ids = [1, 3, 5, 7, 9, 11, 13] queries = [5, 10, 13] ``` Output ``` [\\"YES\\", \\"NO\\", \\"YES\\"] ``` Explanation: - For query ID 5, the medicine ID is found in the stock, so output is \\"YES\\". - For query ID 10, the medicine ID is not found in the stock, so output is \\"NO\\". - For query ID 13, the medicine ID is found in the stock, so output is \\"YES\\".","solution":"from typing import List def binary_search(arr: List[int], target: int) -> bool: Perform binary search to find the target in the sorted array. Returns True if found, else False. low, high = 0, len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return True elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return False def check_medicine_availability(stock_ids: List[int], queries: List[int]) -> List[str]: For each query, check if the medicine ID is in stock using binary search. Return a list of \\"YES\\" or \\"NO\\" for each query. result = [] for query in queries: if binary_search(stock_ids, query): result.append(\\"YES\\") else: result.append(\\"NO\\") return result"},{"question":"Many projects require regular database maintenance to remove outdated or duplicate records. Develop a function in Python that takes a list of tuples, where each tuple contains two elements: a record ID (a positive integer) and a timestamp (a string in ISO 8601 format). The function should identify and remove duplicate records, keeping only the most recent one per ID. The function should return a list of tuples with unique IDs, keeping the tuple with the latest timestamp for each ID. Here’s an example input and its expected output: Input: ```python records = [ (1, \\"2023-01-01T10:00:00Z\\"), (2, \\"2023-01-01T11:00:00Z\\"), (1, \\"2023-01-02T10:00:00Z\\"), (3, \\"2023-01-01T09:00:00Z\\"), (2, \\"2023-01-03T11:00:00Z\\") ] ``` Output: ```python [ (1, \\"2023-01-02T10:00:00Z\\"), (2, \\"2023-01-03T11:00:00Z\\"), (3, \\"2023-01-01T09:00:00Z\\") ] ``` # Constraints - Each tuple will contain exactly one positive integer and one valid ISO 8601 date-time string. - The list can contain up to 100,000 tuples. # Function Signature ```python def remove_duplicates(records: List[Tuple[int, str]]) -> List[Tuple[int, str]]: pass ``` Note: You may assume the `datetime` module and any other standard library modules are available.","solution":"from typing import List, Tuple from datetime import datetime def remove_duplicates(records: List[Tuple[int, str]]) -> List[Tuple[int, str]]: Remove duplicate records, keeping only the most recent one per ID. Parameters: records (List[Tuple[int, str]]): A list of tuples where each tuple contains an ID and a timestamp. Returns: List[Tuple[int, str]]: A list of tuples with unique IDs, keeping the most recent timestamp per ID. latest_records = {} for record_id, timestamp in records: dt_timestamp = datetime.fromisoformat(timestamp.rstrip(\'Z\')) if record_id not in latest_records or dt_timestamp > latest_records[record_id][0]: latest_records[record_id] = (dt_timestamp, timestamp) result = [(record_id, data[1]) for record_id, data in latest_records.items()] return result"},{"question":"You are given a series of time intervals in the format (start, end), where each interval represents a meeting time during the day. The intervals are sorted by their start times. Write a function to merge all overlapping intervals and return a list of non-overlapping intervals. Each interval in the output list should be a tuple formatted as (start, end). For example, given the intervals [(1, 3), (2, 4), (5, 7), (6, 8)], the output should be [(1, 4), (5, 8)]. Note that: - The interval (1, 3) overlaps with (2, 4), so they are merged into (1, 4). - The interval (5, 7) overlaps with (6, 8), so they are merged into (5, 8). Additionally, consider edge cases such as: - Single interval provided. - Completely non-overlapping intervals. - Multiple intervals starting at the same time. Write the function with the following signature: ```python def merge_intervals(intervals: list) -> list: # Your code here # Example usage: # intervals = [(1, 3), (2, 4), (5, 7), (6, 8)] # print(merge_intervals(intervals)) # Output: [(1, 4), (5, 8)] ``` Ensure your function properly handles these edge cases and efficiently merges the provided intervals.","solution":"def merge_intervals(intervals: list) -> list: Merges overlapping intervals and returns a list of non-overlapping intervals. Parameters: intervals (list): A list of tuples, each tuple contains two integers (start, end) representing the start and end times of an interval. Returns: list: A list of merged non-overlapping intervals. if not intervals: return [] merged_intervals = [] current_start, current_end = intervals[0] for start, end in intervals[1:]: if start <= current_end: current_end = max(current_end, end) else: merged_intervals.append((current_start, current_end)) current_start, current_end = start, end merged_intervals.append((current_start, current_end)) return merged_intervals"},{"question":"A popular treasure hunt involves finding a sequence of numbers hidden in different places. You are given an array of length n containing integers where each integer represents a treasure location. Each location contains a hint to one or more other locations. The hint is provided as an integer that should be interpreted as the next index in the array. Your task is to determine if it is possible to visit every location starting from the first location without visiting any location more than once. Input Specification: - The first line contains an integer n (1 ≤ n ≤ 1000), the length of the array. - The second line contains n space-separated integers where each integer is in the range [1, n] representing the indices in the array to which the hunter will be directed. Output Specification: - Print \\"YES\\" if it is possible to visit each location exactly once starting from the first location; otherwise, print \\"NO\\". Example: Input: 5 2 3 4 5 1 Output: YES Input: 5 2 3 1 5 4 Output: NO Explanation: In the first example, starting from location 1, you can visit locations in the order 2, 3, 4, 5, and then return to 1, visiting all locations exactly once. Hence, the answer is \\"YES\\". In the second example, starting from location 1, you can visit locations in this order: 2, 3, and then back to 1, which results in not visiting the 4th and 5th locations. Hence, the answer is \\"NO\\".","solution":"def can_visit_all_locations(n, locations): visited = set() current = 0 # start from the first location for _ in range(n): if current in visited: return \\"NO\\" visited.add(current) current = locations[current] - 1 # move to the next location return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"In a faraway kingdom, there resided a wizard named Eldar who had a magical orchard. The orchard was unique, consisting of N magical fruit trees. Each tree produced a fixed number of fruits every day. Eldar, being a meticulous wizard, recorded the number of fruits produced by each tree in an array `fruits` of length N, where `fruits[i]` represented the number of fruits produced by the ith tree. One day, Eldar\'s friend Ragnar visited the orchard and was curious about the array. Seeking to test Eldar\'s skills, Ragnar posed a challenge. He asked Eldar to determine the number of contiguous subarrays that have a sum of exactly K. Eldar, always up for a challenge, wants to solve this using his magical coding powers. Your task is to help Eldar by writing a program that takes the array `fruits` and the integer K, and returns the number of contiguous subarrays whose elements sum to exactly K. # Input Format - The first line contains an integer N (1 ≤ N ≤ 105), representing the number of magical fruit trees. - The second line contains N space-separated integers, where `fruits[i]` (|fruits[i]| ≤ 104) represents the number of fruits produced by the ith tree. - The third line contains an integer K (|K| ≤ 109), the sum that each subarray should total to for it to be counted. # Output Format - Output a single integer, the number of contiguous subarrays whose sum is exactly K. # Example Input ``` 5 1 2 3 4 5 5 ``` Output ``` 2 ``` Explanation The subarrays that sum to 5 are: - [2, 3] - [5] Write a function `count_subarrays_with_sum(fruits, K)` that returns the number of subarrays that sum to exactly K. Eldar eagerly awaits your solution.","solution":"def count_subarrays_with_sum(fruits, K): Determines the number of contiguous subarrays that sum to exactly K. Parameters: fruits (list): List of integers representing the number of fruits on each tree. K (int): The target sum for the contiguous subarrays. Returns: int: The number of contiguous subarrays that sum to exactly K. from collections import defaultdict count = 0 current_sum = 0 sum_dict = defaultdict(int) sum_dict[0] = 1 for fruit in fruits: current_sum += fruit if (current_sum - K) in sum_dict: count += sum_dict[current_sum - K] sum_dict[current_sum] += 1 return count"},{"question":"You are given a list of N integers. Your task is to determine if there exists a subset of these integers that sums up to a given number K. If such a subset exists, output \\"YES\\", otherwise output \\"NO\\". The input format is as follows: - The first line contains two integers N and K (1 ≤ N ≤ 100, 1 ≤ K ≤ 1000). - The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 1000) - the list of integers. The output format is a single line containing either \\"YES\\" or \\"NO\\". Example: Input: 5 9 3 34 4 12 5 Output: YES Explanation: The subset {4, 5} sums up to 9.","solution":"def subset_sum_exists(N, K, numbers): Determines if there exists a subset of the given list of numbers that sums up to K. Args: N (int): The number of integers in the list. K (int): The target sum. numbers (list): The list of integers. Returns: str: \\"YES\\" if such a subset exists, otherwise \\"NO\\". # Create a DP array initialized to False with dimension (N+1) x (K+1) dp = [[False] * (K + 1) for _ in range(N + 1)] # There is always a subset with sum 0, the empty subset for i in range(N + 1): dp[i][0] = True # Fill the DP table for i in range(1, N + 1): for j in range(1, K + 1): if numbers[i - 1] > j: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - numbers[i - 1]] return \\"YES\\" if dp[N][K] else \\"NO\\""},{"question":"Given a grid of size n times m consisting of cells, each of which contains an integer value, you are required to find the maximum sum of a sub-grid of size k times l that can be obtained from the original grid. A sub-grid is defined as any contiguous block of cells within the original grid that forms a rectangular area of size k times l. # Input - The first line contains two integers, n and m (1 leq n, m leq 1000) — the dimensions of the grid. - The next n lines contain m integers each, representing the grid, where each integer is between -10^9 and 10^9. - The following line contains two integers, k and l (1 leq k leq n, 1 leq l leq m) — the dimensions of the sub-grid. # Output - Print a single integer, the maximum sum of any valid k times l sub-grid. # Example Input ``` 4 5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 2 3 ``` Output ``` 99 ``` Explanation The sub-grid with the maximum sum is: ``` 8 9 10 13 14 15 ``` The sum is 8 + 9 + 10 + 13 + 14 + 15 = 69.","solution":"def max_subgrid_sum(grid, n, m, k, l): def get_sum(x1, y1, x2, y2): return prefix_sum[x2+1][y2+1] - prefix_sum[x1][y2+1] - prefix_sum[x2+1][y1] + prefix_sum[x1][y1] prefix_sum = [[0] * (m+1) for _ in range(n+1)] for i in range(n): for j in range(m): prefix_sum[i+1][j+1] = grid[i][j] + prefix_sum[i][j+1] + prefix_sum[i+1][j] - prefix_sum[i][j] max_sum = -float(\'inf\') for i in range(n - k + 1): for j in range(m - l + 1): current_sum = get_sum(i, j, i + k - 1, j + l - 1) max_sum = max(max_sum, current_sum) return max_sum # Example usage grid = [ [1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20] ] n, m = 4, 5 k, l = 2, 3 print(max_subgrid_sum(grid, n, m, k, l)) # Output should be 99"},{"question":"Design a function `minimal_buses(N, stops)` to figure out the minimum number of buses needed to ensure that students can get from their respective starting points to their destinations. Each bus can have a unique set of stops it visits, and no stop should be visited by more than one bus. Ensure to consider that each stop must be used only once per bus route. The first line contains an integer N (1 leq N leq 1000) — the number of students\' origin-destination pairs. The following N lines each contain 2 integers A_i and B_i (1 leq A_i, B_i leq 10^5) — indicating a student\'s starting point and destination. Output a single integer — the minimum number of buses required to accommodate all students\' transportation needs. **Example:** ``` Input: 3 1 5 2 6 3 4 Output: 1 Input: 4 1 4 2 8 5 6 7 9 Output: 2 ``` **Explanation:** In the first example, all the students can be accommodated in one bus because the stops [1, 2, 3, 4, 5, 6] cover all the needs without overlapping. In the second example, two buses are required. One bus can cover the stops [1, 2, 3, 4, 5, 6] and the second one will cover the remaining stops [7, 8, 9].","solution":"def minimal_buses(N, stops): Calculate the minimum number of buses required to cover all stops. Parameters: N (int): Number of students\' origin-destination pairs. stops (List[Tuple[int, int]]): List of tuples containing the start and end points of each student\'s route. Returns: int: Minimum number of buses required. if N == 0: return 0 # Sort stops based on start stop. stops.sort(key=lambda x: x[0]) buses = [] for start, end in stops: assigned = False # Check if the current route can be added to any existing bus without overlapping for bus in buses: # Check if this bus can still take this route. if bus[-1][1] < start: bus.append((start, end)) assigned = True break if not assigned: # If no bus can take this route, create a new bus. buses.append([(start, end)]) return len(buses)"},{"question":"You are given a string that consists of parentheses \'(\' and \')\' only. A group of parentheses is called perfectly balanced if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The parentheses are correctly nested; in other words, no closing parenthesis \')\' can appear before its corresponding opening parenthesis \'(\'. Write a function to determine if the given string is perfectly balanced. **Input:** The input consists of a single line containing a string of length n (1 ≤ n ≤ 1000). **Output:** Print \\"BALANCED\\" if the string is perfectly balanced, otherwise print \\"NOT BALANCED\\". **Examples:** 1. Input: `()()` Output: `BALANCED` 2. Input: `((()))` Output: `BALANCED` 3. Input: `(()` Output: `NOT BALANCED` 4. Input: `())(` Output: `NOT BALANCED`","solution":"def is_balanced_parentheses(s): Determine if the given string of parentheses is perfectly balanced. Args: s (str): The input string consisting of \'(\' and \')\' Returns: str: \\"BALANCED\\" if the string is perfectly balanced, otherwise \\"NOT BALANCED\\" stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return \\"NOT BALANCED\\" stack.pop() return \\"BALANCED\\" if not stack else \\"NOT BALANCED\\""},{"question":"You are developing a user access management system for a web application. This system must ensure that a user can only access specific sections of the application based on their role. The roles defined are \\"admin\\", \\"editor\\", and \\"viewer\\". Each role has different permissions: 1. An \\"admin\\" can access, modify, and delete any section. 2. An \\"editor\\" can access and modify any section but cannot delete. 3. A \\"viewer\\" can only access but cannot modify or delete any section. Create a program that decides whether a user has permission to perform a specific action on a section. The program should read the role of the user, the action requested, and the section the action is being requested on. The first line of the input contains the role of the user - one of the three strings: \\"admin\\", \\"editor\\", \\"viewer\\". The second line contains the action requested, which will be one of the strings: \\"access\\", \\"modify\\", \\"delete\\". The third line contains the section of the application the action is being requested on. Based on these inputs, print \\"Allowed\\" if the user role permits the given action on the given section, or \\"Denied\\" otherwise. # Example: Input: ``` editor delete settings ``` Output: ``` Denied ``` # Explanation: An \\"editor\\" does not have permission to delete any section, so the output is \\"Denied\\".","solution":"def check_permission(role, action, section): Determine whether a user has permission to perform a certain action based on their role. Parameters: - role (str): The role of the user (\\"admin\\", \\"editor\\", or \\"viewer\\"). - action (str): The action requested (\\"access\\", \\"modify\\", or \\"delete\\"). - section (str): The section of the application the action is being requested on. Returns: - str: \\"Allowed\\" if the user role permits the given action on the given section, \\"Denied\\" otherwise. # Define the permissions for each role permissions = { \\"admin\\": [\\"access\\", \\"modify\\", \\"delete\\"], \\"editor\\": [\\"access\\", \\"modify\\"], \\"viewer\\": [\\"access\\"] } # Check if the action is in the permissions list for the given role if action in permissions.get(role, []): return \\"Allowed\\" else: return \\"Denied\\""},{"question":"Dr. Merrick is a renowned scientist and strategist who has been tasked with optimizing the water distribution network in the newly founded city of Algoria. Algoria consists of n districts, some pairs of which are connected by bidirectional pipelines. Each district pair is connected by no more than one pipeline. It is not necessarily true that all districts are interconnected through the pipeline network. Dr. Merrick’s objective is to ensure there is a way to measure and optimize the flow through each pipeline. For this, he needs to determine if there exists any sequence of pipelines that can form a layout such that no more than one pipeline carries the same flow within a cycle-free distribution tree. Dr. Merrick proposes the following rules for the pipeline optimization: 1. The flow between two districts should be unique to avoid the complexity of flow management. 2. The pipeline network should be connected in such a way that there are no cyclic dependencies among the districts. 3. The tree should span all the districts using exactly n-1 pipelines to ensure minimal redundancy. Given the number of districts and the pipelines connecting them, help Dr. Merrick determine if it’s possible to construct such a flow-optimized tree. **Input:** - The first line contains two integers n and m (1 ≤ n ≤ 10^5, 0 ≤ m ≤ 2·10^5) — the number of districts and the number of pipelines, respectively. - The next m lines describe the pipelines. Each line contains two integers ai, bi (1 ≤ ai, bi ≤ n, ai ≠ bi), representing a pipeline between district ai and district bi. It’s guaranteed that no two pipelines connect the same pair of districts. **Output:** - Print \\"Yes\\" if it’s possible to organize the pipelines into such a tree, otherwise print \\"No\\". **Example:** **Input:** ``` 4 3 1 2 2 3 3 4 ``` **Output:** ``` Yes ``` **Input:** ``` 4 4 1 2 2 3 3 4 4 1 ``` **Output:** ``` No ```","solution":"def can_form_optimized_tree(n, m, pipelines): Determine if it\'s possible to create a cycle-free, uniquely flowing, connected graph (tree) from given pipelines. Args: n (int): Number of districts m (int): Number of pipelines pipelines (list of tuple of int): Each tuple represents a pipeline between two districts. Returns: str: \'Yes\' if such a tree can be formed, \'No\' otherwise if m != n - 1: return \\"No\\" parent = list(range(n + 1)) # Union-Find structure def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX for a, b in pipelines: union(a, b) # Check if all nodes are connected root_set = {find(i) for i in range(1, n + 1)} return \\"Yes\\" if len(root_set) == 1 else \\"No\\""},{"question":"You have been assigned the task of designing a simple simulation for a coffee machine. The coffee machine can dispense four types of beverages: espresso, latte, cappuccino, and hot water. Each beverage requires a specific set of resources. The coffee machine has the following ingredients in stock: - Coffee beans (grams) - Milk (ml) - Water (ml) Here are the requirements for each beverage: - Espresso: 50 grams of coffee beans, 0 ml of milk, 30 ml of water - Latte: 30 grams of coffee beans, 150 ml of milk, 50 ml of water - Cappuccino: 25 grams of coffee beans, 100 ml of milk, 50 ml of water - Hot water: 0 grams of coffee beans, 0 ml of milk, 200 ml of water You need to determine whether the machine can dispense a particular beverage based on the available stock. The user will repeatedly input the type of beverage they want, and your program should output \\"Yes\\" if the machine can dispense the beverage with the current resources or \\"No\\" otherwise. If the beverage can be dispensed, the machine\'s stock resources should be updated accordingly. Write a function `can_dispense` that accepts three parameters: an integer array representing the stock (`[coffee_beans, milk, water]`), and a string representing the type of beverage. The function should return a string, \\"Yes\\" or \\"No\\". Example: Input: ``` [100, 300, 500] \\"latte\\" ``` Output: ``` \\"Yes\\" ``` Input: ``` [50, 300, 30] \\"espresso\\" ``` Output: ``` \\"No\\" ``` Function signature: ``` def can_dispense(stock: List[int], beverage: str) -> str: ```","solution":"from typing import List def can_dispense(stock: List[int], beverage: str) -> str: recipes = { \\"espresso\\": [50, 0, 30], \\"latte\\": [30, 150, 50], \\"cappuccino\\": [25, 100, 50], \\"hot_water\\": [0, 0, 200], } recipe = recipes.get(beverage) if recipe is None: return \\"No\\" if all(stock[i] >= recipe[i] for i in range(3)): for i in range(3): stock[i] -= recipe[i] return \\"Yes\\" else: return \\"No\\""},{"question":"Alex is exploring different sorting algorithms and wants to implement a function to sort an array of unique integers. However, he is particularly interested in understanding how merge sort works and would like to test his understanding by writing a version of it. Given an array of unique integers, implement the merge sort algorithm and return the sorted array. You need to implement the following function: ```python def merge_sort(arr: List[int]) -> List[int]: Sorts an array of unique integers using merge sort algorithm. :param arr: List of unique integers :return: Sorted list of integers ``` **Input:** - A single line containing n space-separated unique integers (1 ≤ n ≤ 10^5). **Output:** - A single line containing the sorted integers in ascending order. **Example:** Input: ``` 3 1 2 ``` Output: ``` 1 2 3 ``` Input: ``` 10 5 3 2 8 6 7 4 1 9 ``` Output: ``` 1 2 3 4 5 6 7 8 9 10 ``` Ensure your function can handle large arrays efficiently.","solution":"from typing import List def merge_sort(arr: List[int]) -> List[int]: Sorts an array of unique integers using merge sort algorithm. :param arr: List of unique integers :return: Sorted list of integers if len(arr) <= 1: return arr # Split the array into two halves mid = len(arr) // 2 left_half = merge_sort(arr[:mid]) right_half = merge_sort(arr[mid:]) # Merge the sorted halves return merge(left_half, right_half) def merge(left: List[int], right: List[int]) -> List[int]: sorted_arr = [] i = j = 0 while i < len(left) and j < len(right): if left[i] < right[j]: sorted_arr.append(left[i]) i += 1 else: sorted_arr.append(right[j]) j += 1 # Append remaining elements of left and right part sorted_arr.extend(left[i:]) sorted_arr.extend(right[j:]) return sorted_arr"},{"question":"You are given two arrays of integers, `A` and `B`, containing n numbers each. An element from the array `A` can be paired with an element from the array `B` if their sum is odd. Your task is to write a function that returns the maximum number of valid (A[i], B[j]) pairs that can be formed based on the given condition. The input consists of three lines: - The first line contains an integer n (1 ≤ n ≤ 100), representing the number of elements in each array. - The second line contains n integers representing the array `A`, where each integer is between 1 and 100 inclusive. - The third line contains n integers representing the array `B`, where each integer is between 1 and 100 inclusive. The output should be a single integer, the maximum number of valid pairs. Example: Input: 4 1 2 3 4 2 3 4 5 Output: 4 Explanation: The valid pairs are (1, 2), (1, 4), (2, 3), and (3, 4). The maximum number of such pairs is 4.","solution":"def max_odd_sum_pairs(A, B): Returns the maximum number of pairs (A[i], B[j]) such that their sum is odd. # Count the number of odd and even numbers in A and B odd_A = sum(1 for x in A if x % 2 != 0) even_A = len(A) - odd_A odd_B = sum(1 for x in B if x % 2 != 0) even_B = len(B) - odd_B # Maximum number of pairs is the minimum of (odd_A, even_B) and (even_A, odd_B) return min(odd_A, even_B) + min(even_A, odd_B) # Test the function with example inputs n = 4 A = [1, 2, 3, 4] B = [2, 3, 4, 5] print(max_odd_sum_pairs(A, B)) # Output should be 4"},{"question":"You are given an array of integers of size n. Your task is to determine whether there exists a non-empty subarray whose sum is exactly k. The first line contains two space-separated integers n and k (1 ≤ n ≤ 1000, -10^6 ≤ k ≤ 10^6). The second line contains n space-separated integers representing the array elements a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6). Output \\"YES\\" if there exists such a subarray, otherwise output \\"NO\\". If there are multiple correct answers, you are allowed to print any of them.","solution":"def subarray_sum_exists(n, k, arr): Checks if there exists a non-empty subarray with sum exactly k. Parameters: n (int): The length of the array. k (int): The target sum. arr (list of int): The list of integers. Returns: str: \\"YES\\" if such a subarray exists, otherwise \\"NO\\". current_sum = 0 prefix_sums = {} for idx, num in enumerate(arr): current_sum += num if current_sum == k: return \\"YES\\" if (current_sum - k) in prefix_sums: return \\"YES\\" prefix_sums[current_sum] = idx return \\"NO\\""},{"question":"**Problem Statement:** In a certain company, the HR department has implemented a new system for employee rewards. Each employee gets a reward at the end of every quarter based on performance and additional achievements. The reward is either a bronze, silver, gold, platinum, or diamond badge. The system now needs to handle the distribution of these badges efficiently based on the employee\'s performance score. The HR department has a collection of badges of various categories and wants to distribute them in such a way that each employee gets the best possible badge based on their score while considering the available stock. The badges are characterized by their respective categories and quantities available: - Bronze (B) - Silver (S) - Gold (G) - Platinum (P) - Diamond (D) Each employee has a performance score which determines the preferred badge as follows: 1. 0-49: Bronze (B) 2. 50-69: Silver (S) 3. 70-89: Gold (G) 4. 90-99: Platinum (P) 5. 100: Diamond (D) When an employee\'s preferred badge is unavailable, they should opt for the next best available badge in decreasing order of preference (D, P, G, S, B). In the event of a tie where two badges are equally preferable, the algorithm should choose the one with the highest rank (D > P > G > S > B). **Input:** 1. A single line containing five non-negative integers NB, NS, NG, NP, ND (the number of badges for each respective category). 2. An integer M representing the number of employees. 3. M lines follow, each containing an integer ( <= 100) representing the performance score for each employee. **Output:** For each employee, print a line containing the badge they received. **Examples:** **Input:** ``` 5 3 2 1 0 4 45 85 50 100 ``` **Output:** ``` B G S P ```","solution":"def distribute_badges(NB, NS, NG, NP, ND, scores): Distributes badges to employees based on their score and the available supply of badges. Parameters: NB (int): Number of Bronze badges NS (int): Number of Silver badges NG (int): Number of Gold badges NP (int): Number of Platinum badges ND (int): Number of Diamond badges scores (list of int): List of performance scores Returns: list of str: A list containing the badge each employee received badge_counts = {\'D\': ND, \'P\': NP, \'G\': NG, \'S\': NS, \'B\': NB} preferences = { 0: [\'B\'], 1: [\'S\', \'B\'], 2: [\'G\', \'S\', \'B\'], 3: [\'P\', \'G\', \'S\', \'B\'], 4: [\'D\', \'P\', \'G\', \'S\', \'B\'] } result = [] for score in scores: if score == 100: pref_list = preferences[4] elif 90 <= score <= 99: pref_list = preferences[3] elif 70 <= score <= 89: pref_list = preferences[2] elif 50 <= score <= 69: pref_list = preferences[1] else: pref_list = preferences[0] for badge in pref_list: if badge_counts[badge] > 0: result.append(badge) badge_counts[badge] -= 1 break return result"},{"question":"You are given a list of n integers representing the heights of buildings in a row. Your task is to find the maximum area of a rectangle that can be formed by selecting any number of contiguous buildings in the row. The rectangle\'s height is determined by the shortest building in the selected range, and its width is the number of buildings in that range. The first line contains one integer n (1 ≤ n ≤ 100,000) — the number of buildings. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 1,000,000) — the heights of the buildings. Output a single integer representing the maximum area of a rectangle that can be formed by any number of contiguous buildings. # Example Input: ``` 7 2 1 5 6 2 3 4 ``` Output: ``` 10 ``` Explanation: By selecting the buildings with heights 5 and 6, we form a rectangle with a height of 5 and a width of 2, resulting in an area of 5 * 2 = 10, which is the maximum possible area in this example. # Additional Example Input: ``` 6 3 6 5 7 4 8 ``` Output: ``` 20 ``` Explanation: By selecting the buildings with heights 5, 7, and 4 or the buildings with heights 5 and 7, we can form a rectangle with a height of 5 and a width of 4, resulting in an area of 5 * 4 = 20, which is the maximum possible area in this example.","solution":"def max_rectangle_area(heights): Function to find the maximum rectangular area in a histogram. :param heights: List[int], List of building heights. :return: int, maximum area of the rectangle that can be formed. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"}]'),j={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:Y,isLoading:!1}},computed:{filteredPoems(){const r=this.searchQuery.trim().toLowerCase();return r?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(r)||e.solution&&e.solution.toLowerCase().includes(r)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(r=>setTimeout(r,1e3)),this.visibleCount+=4,this.isLoading=!1}}},S={class:"search-container"},N={class:"card-container"},F={key:0,class:"empty-state"},C=["disabled"],R={key:0},D={key:1};function L(r,e,h,m,s,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",S,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>s.searchQuery=o),placeholder:"Search..."},null,512),[[y,s.searchQuery]]),s.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>s.searchQuery="")}," ✕ ")):l("",!0)]),t("div",N,[(n(!0),i(w,null,_(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+u(s.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:s.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[s.isLoading?(n(),i("span",D,"Loading...")):(n(),i("span",R,"See more"))],8,C)):l("",!0)])}const z=d(j,[["render",L],["__scopeId","data-v-3842c267"]]),M=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/32.md","filePath":"quotes/32.md"}'),P={name:"quotes/32.md"},G=Object.assign(P,{setup(r){return(e,h)=>(n(),i("div",null,[x(z)]))}});export{M as __pageData,G as default};
