import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as l,F as _,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},T={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,m,r,a){return n(),i("div",T,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(k,[["render",O],["__scopeId","data-v-19d8171f"]]),S=JSON.parse('[{"question":"You are given an array of N integers. Your goal is to minimize the sum of the absolute differences of each pair of adjacent elements in the array by performing a certain type of operation. The allowed operation is to increment or decrement any element of the array by 1 at a cost of 1 coin per operation. You need to calculate the minimal cost required to reach this objective. -----Input----- The first line of the input contains an integer N denoting the number of elements in the given array. The second line contains N space-separated integers A1, A2, ..., AN denoting the given array. -----Output----- For each test case, output a single line containing the minimal cost required to minimize the sum of the absolute differences of each pair of adjacent elements in the array. -----Constraints----- - 2 ≤ N ≤ 105 - -109 ≤ Ai ≤ 109 -----Example----- Input: 4 1 3 2 -2 Output: 2 -----Explanation----- Example case 1: - Increment the second element from 3 to 2, so the array becomes [1, 2, 2, -2] with a cost of 1. - Increment the fourth element from -2 to -1, so the array becomes [1, 2, 2, -1] with another cost of 1. Now, the sum of absolute differences is minimized with a total cost of 2 coins.","solution":"def minimal_cost_to_minimize_abs_diff(N, A): Calculates the minimal cost required to minimize the sum of the absolute differences of each pair of adjacent elements in the array. median_A = sorted(A)[N // 2] cost = sum(abs(x - median_A) for x in A) return cost"},{"question":"Riya loves reading books and she has N books in her library. Each book has a specific height. She wants to arrange them in a vertical stack such that the heights of the books in the stack do not form an increasing sequence when viewed from the bottom to the top. She can pick any book from the library and place it on top of the stack. Find the maximum height of the stack she can achieve. -------Input:------- - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains two lines of input. - The first line has one integer N, the number of books. - The second line contains N space-separated integers denoting the heights of the books. -------Output:------- For each test case, output the maximum height of the stack in a single line. -------Constraints------- - 1 leq T leq 10 - 1 leq N leq 10^5 - 1 leq height leq 10^9 -------Sample Input:------- 2 5 3 1 4 1 5 4 5 4 3 2 -------Sample Output:------- 6 14","solution":"def max_stack_height(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] heights = test_cases[i][1] # Sort the books in descending order heights.sort(reverse=True) # Calculate the sum of heights max_height = sum(heights) results.append(max_height) return results # Example usage: # T = 2 # test_cases = [ # (5, [3, 1, 4, 1, 5]), # (4, [5, 4, 3, 2]) # ] # print(max_stack_height(T, test_cases)) # Output should be: [14, 14]"},{"question":"It is high summer, and you have a series of reservoirs connected in a network. Each reservoir has a certain amount of water in it. Your task is to help the municipality manage the water distribution in a way that maximizes the minimum amount of water across all reservoirs. Each reservoir can either give water to its connected reservoirs or receive water from them, and it can be connected to more than one reservoir. The water transfer between connected reservoirs is done one unit at a time. Create an algorithm to determine the maximum possible amount of water that the reservoir with the least water can hold by the end of the redistribution process. Input Format: - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of reservoirs. - The second line contains N integers denoting the amount of water in each reservoir. - The third line contains an integer M, the number of direct connections between the reservoirs. - The next M lines each contain two integers u and v, that indicate a bidirectional connection between reservoir u and reservoir v (1-based index). Output Format: For each test case, print the maximum possible amount of water in the reservoir with the least water by the end of the redistribution process. Constraints: - 1 ≤ T ≤ 5 - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 5000 - 0 ≤ Amount of water in each reservoir ≤ 1000 Example Input: 2 3 3 6 9 2 1 2 2 3 4 5 5 5 5 3 1 2 2 3 3 4 Example Output: 6 5 Explanation: In the first test case, the reservoirs and their connections can be visualized as a graph. The trick is to balance the water among connected nodes until no more water can be transferred or all are equalized. In the second test case, since all reservoirs have the same amount of water initially and are connected equally, the output remains the same.","solution":"def maximize_min_water(T, test_cases): def dfs(node, graph, visited): connected_component = [] stack = [node] while stack: current = stack.pop() if not visited[current]: visited[current] = True connected_component.append(current) for neighbor in graph[current]: if not visited[neighbor]: stack.append(neighbor) return connected_component results = [] for i in range(T): N = test_cases[i][\'N\'] waters = test_cases[i][\'waters\'] M = test_cases[i][\'M\'] connections = test_cases[i][\'connections\'] graph = {x: [] for x in range(N)} for u, v in connections: graph[u-1].append(v-1) graph[v-1].append(u-1) visited = [False] * N max_min_water = 0 for reservoir in range(N): if not visited[reservoir]: connected_component = dfs(reservoir, graph, visited) total_water = sum(waters[j] for j in connected_component) max_min_water = max(max_min_water, total_water // len(connected_component)) results.append(max_min_water) return results def parse_input(input_str): input_list = input_str.strip().split(\\"n\\") T = int(input_list[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_list[index]) waters = list(map(int, input_list[index + 1].split())) M = int(input_list[index + 2]) connections = [] for j in range(M): u, v = map(int, input_list[index + 3 + j].split()) connections.append((u, v)) test_cases.append({ \\"N\\": N, \\"waters\\": waters, \\"M\\": M, \\"connections\\": connections }) index += 3 + M return T, test_cases def format_output(output): return \\"n\\".join(map(str, output))"},{"question":"A student is trying to identify the longest palindromic subsequence within a given string. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. A palindrome is a sequence that reads the same backward and forward. Help the student by writing a function that takes a string s as input and returns the length of the longest palindromic subsequence in s. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100), which contains only lowercase English letters. Output Output the length of the longest palindromic subsequence of the given string. Examples Input bbbab Output 4 Input cbbd Output 2 Input abcdef Output 1","solution":"def longest_palindromic_subsequence(s): n = len(s) # Create a 2D array to store lengths of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # Every single character is a palindrome of length 1 for i in range(n): dp[i][i] = 1 # Build the table for length in range(2, n + 1): # length of the substring for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and length == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) # dp[0][n-1] contains the length of the longest palindromic subsequence return dp[0][n-1]"},{"question":"Alice is an artist who loves painting geometric shapes. She just received an order to paint a wall that has the shape of an isosceles triangle. The triangle has a base of length b and a height h. Alice wants the finished painting to be special: each row of the triangle should be painted with a different color from 1 to h, starting from the first row at the top with color 1 and ending with the h-th row with color h. Specifically, the color increases by 1 as you go down each row of the triangle. However, there\'s a catch. Alice can only paint using a small brush that can paint exactly one unit of the wall at a time. This means she needs precise instructions on how to paint each unit of the wall, row by row. Your task is to help Alice by providing the precise painting instructions. Input - The first line contains two integers b and h (1 ≤ b ≤ 1000, 1 ≤ h ≤ 1000), the base and height of the triangle respectively. It is guaranteed that b is an odd integer. Output - Output h lines. The i-th line should contain a string of length (b) representing the coloring of the i-th row of the triangle. Each unit should be painted with the color of the row as mentioned. Example Input 7 4 Output ---1--- --222-- -33333- 4444444 Note: - Each row of the output should be centered according to the base of the triangle. - The dash \'-\' character represents an empty part of the wall that does not need to be painted.","solution":"def paint_triangle(b, h): Returns the painting instructions for an isosceles triangle of base b and height h. Each row i of the triangle should be painted with the color i. instructions = [] max_width = b for i in range(1, h + 1): num_of_colors = 1 + 2 * (i - 1) spaces = (max_width - num_of_colors) // 2 row = \'-\' * spaces + str(i) * num_of_colors + \'-\' * spaces instructions.append(row) return instructions # Example usage: b = 7 h = 4 print(\\"n\\".join(paint_triangle(b, h)))"},{"question":"You are given a string s consisting of lowercase Latin letters, and an integer k. Your task is to determine the lexicographically smallest string that can be obtained by performing the following operations exactly k times: 1. Select any substring of s. 2. Sort the selected substring in non-decreasing order. -----Input----- The first line contains an integer k (1 le k le 10^5) — the number of operations. The second line contains a string s (1 le |s| le 10^5) consisting of lowercase Latin letters. -----Output----- Print a single line containing the lexicographically smallest string that can be obtained after performing the given operations exactly k times. -----Examples----- Input 2 dcba Output abcd Input 1 acdb Output acbd Input 3 geeks Output eeks -----Note----- In the first test case, the optimal sequence of operations is to first sort the entire string: \\"dcba\\" -> \\"abcd\\". In the second test case, the optimal strategy is to sort the substring \\"cd\\" to get \\"acbd\\". In the third test case, sorting the substrings successively can lead to \\"geeks\\" -> \\"eeks\\" by sorting \\"geeks\\".","solution":"def lexicographically_smallest_string_after_k_operations(s, k): Returns the lexicographically smallest string after exactly k operations of selecting and sorting any substring. # Directly sorting the entire string is the optimal solution sorted_string = \\"\\".join(sorted(s[:])) return sorted_string"},{"question":"You are organizing a tournament and you have a list of participants\' scores from previous games. You want to rank these participants based on their scores. The ranking should be done such that the participant with the highest score is ranked first, the next highest is ranked second, and so on. In case of ties, participants with the same score should receive the same rank, and the next rank after a tie should be skipped accordingly. Write a function `rankParticipants(N, scores)` that computes the ranks of participants based on their scores. # Input Format - The first line contains an integer N (1 <= N <= 10^5), which represents the number of participants. - The second line contains N integers representing the scores of the participants. # Output Format - Print a single line containing N integers, where the i-th integer represents the rank of the i-th participant. # Example Input ``` 5 50 70 70 60 55 ``` Output ``` 5 1 1 3 4 ``` # Explanation - The participant with score 50 is ranked 5th as they have the lowest score. - The participants with scores 70 are tied in 1st place. - The participant with score 60 is ranked 3rd. - The participant with score 55 is ranked 4th. Note: When participants have equal scores, they share the same rank, and the next rank(s) is/are skipped accordingly.","solution":"def rankParticipants(N, scores): Ranks participants based on their scores. :param N: int : number of participants :param scores: List[int] : list of scores of participants :return: List[int] : list of ranks for each participant # Pairing scores with their original indices indexed_scores = [(score, i) for i, score in enumerate(scores)] # Sorting by scores (in descending order) and by indices in ascending order for tie-breakers indexed_scores.sort(reverse=True, key=lambda x: (x[0], -x[1])) # Result array to store ranks ranks = [0] * N # Assign ranks current_rank = 1 for i, (score, idx) in enumerate(indexed_scores): if i > 0 and score == indexed_scores[i - 1][0]: ranks[idx] = ranks[indexed_scores[i - 1][1]] else: ranks[idx] = current_rank current_rank += 1 return ranks"},{"question":"Given a list of integers, the task is to return the number of unique integers that can be formed by rearranging each number\'s digits to make new numbers. Example 1: Input: nums = [123, 456, 231] Output: 2 Explanation: The numbers 123 and 231 can be rearranged into each other, forming one unique set. The number 456 forms another unique set. Example 2: Input: nums = [345, 453, 534] Output: 1 Explanation: All three numbers can be rearranged into each other, forming one unique set. Your Task: You don\'t need to read input or print anything. Your task is to complete the function countUniqueNumbers() which takes the list nums as input and returns the number of unique sets of numbers that can be formed by rearranging each number\'s digits. Expected Time Complexity: O(n * m), where n is the length of the list and m is the number of digits in the largest number in the list. Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(nums) ≤ 10^3 1 ≤ nums[i] ≤ 10^6","solution":"def countUniqueNumbers(nums): Returns the number of unique integers sets that can be formed by rearranging each number\'s digits to make new numbers. unique_sets = set() for num in nums: sorted_digits = \'\'.join(sorted(str(num))) unique_sets.add(sorted_digits) return len(unique_sets)"},{"question":"Alice and Bob are playing with strings. Alice gives Bob a string s of length n and a list of m special substrings. Bob needs to convert the given string s into a beautiful string. A string is considered beautiful if it contains all the special substrings at least once. To convert the string, Bob can perform an operation where he changes any character of the string s to any other character. Bob wants to achieve this with the minimum number of such operations. Your task is to find the minimum number of operations required to make the string s beautiful, or determine that it is impossible to do so. -----Input----- The first line of the input contains two integers n and m (1 le n le 1000, 1 le m le 100) — the length of the string and the number of special substrings, respectively. The second line contains the string s of length n. The next m lines each contain a special substring. -----Output----- Print one integer — the minimum number of operations needed to make the string s beautiful or -1 if it\'s impossible to do so. -----Examples----- Input 10 2 abcdefghij abc fgh Output 0 Input 5 1 aaaaa abcdef Output -1 Input 6 1 xxxxxx xy Output 1 -----Note----- In the first example, the string s already contains both special substrings \\"abc\\" and \\"fgh\\", so no operation is needed. In the second example, the special substring \\"abcdef\\" cannot fit within the string s since its length exceeds that of s, so it\'s impossible to make the string beautiful. In the third example, the special substring \\"xy\\" can be created by changing one of the characters in the original string to \\"y\\".","solution":"def min_operations_to_beautiful(n, m, s, special_substrings): Returns the minimum number of operations needed to make the string s beautiful or -1 if it is impossible to do so. # Function to check if s contains a special substring def contains_special_substring(s, substring): return substring in s # Check if all special substrings are already in s for substring in special_substrings: if not contains_special_substring(s, substring): return -1 return 0"},{"question":"Given an array of positive integers, determine if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal. Write a function `bool canPartition(int[] nums)` that returns `true` if the array can be partitioned into two subsets with equal sum, otherwise returns `false`. ------ Input ------ An array of positive integers. ------ Output ------ Return `true` if the array can be partitioned into two subsets with equal sum, otherwise return `false`. ------ Constraints ------ - The number of elements in the array is between 1 and 200 inclusive. - The value of each element in the array is between 1 and 100 inclusive. ------ Example 1 ------ Input: `[1, 5, 11, 5]` Output: `true` Explanation: The array can be partitioned as `[1, 5, 5]` and `[11]`. ------ Example 2 ------ Input: `[1, 2, 3, 5]` Output: `false` Explanation: The array cannot be partitioned into equal sum subsets.","solution":"def canPartition(nums): Determines if the array can be partitioned into two subsets with equal sum. Args: nums (List[int]): An array of positive integers. Returns: bool: True if the array can be partitioned into two subsets with equal sum, otherwise False. total_sum = sum(nums) # If total sum is odd, cannot partition into two equal subsets if total_sum % 2 != 0: return False target = total_sum // 2 n = len(nums) dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[target]"},{"question":"You are given a maze represented by a grid of size N x M, where each cell of the grid can be either empty (represented by \'.\') or blocked (represented by \'#\'). Your task is to determine if there exists any path from the top-left corner of the maze (cell (1,1)) to the bottom-right corner (cell (N,M)) that only traverses empty cells. You can only move up, down, left, or right. ------ Input ------ The first line contains two integers, N and M (1 ≤ N, M ≤ 1000), representing the row and column of the grid respectively. The next N lines represent the maze, where each line contains M characters, either \'.\' or \'#\', with no spaces in between. ------ Output ------ Print \\"YES\\" if there exists a path from the top-left corner to the bottom-right corner, otherwise print \\"NO\\". ------ Constraints ------ 1. The top-left corner (1,1) will always be an empty cell (\'.\'). 2. The bottom-right corner (N,M) will always be an empty cell (\'.\'). ----- Sample Input 1 ------ 4 4 .... ...# #... .... ----- Sample Output 1 ------ YES ----- Sample Input 2 ------ 3 3 .#. # .#. ----- Sample Output 2 ------ NO","solution":"def is_path_exist(maze): from collections import deque N, M = len(maze), len(maze[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and maze[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\" def solve_maze(N, M, grid): return is_path_exist(grid)"},{"question":"Determine the k-th missing positive integer. Example 1: Input: arr = [2, 3, 4, 7, 11], k = 5 Output: 9 Explanation: The missing positive integers are [1, 5, 6, 8, 9, 10, ...], and the 5-th missing number is 9. Example 2: Input: arr = [1, 2, 3, 4], k = 2 Output: 6 Explanation: The missing positive integers are [5, 6, 7, ...], and the 2nd missing number is 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findKthPositive() which takes an array of integers arr and integer k as input parameter and returns the k-th missing positive integer. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= arr.length <= 1000 1 <= arr[i] <= 1000 1 <= k <= 1000 arr is sorted in strictly increasing order.","solution":"def findKthPositive(arr, k): missing_count = 0 current = 1 i = 0 while missing_count < k: if i < len(arr) and arr[i] == current: i += 1 else: missing_count += 1 if missing_count < k: current += 1 return current"},{"question":"A robot is situated at the top-left corner of an n times m grid. The goal of the robot is to get to the bottom-right corner of the grid (position (n-1, m-1)). The robot can only move either down or right at any point in time. There are some cells in the grid that contain obstacles, represented by a `1`, and empty cells, represented by a `0`. The robot cannot move onto cells with obstacles. Write a function that determines if there is a path for the robot from the top-left corner to the bottom-right corner of the grid. -----Input----- - The first line contains two integers n and m (1 leq n, m leq 100) – the dimensions of the grid. - The next n lines contain m integers each, where each integer is either a `0` or a `1`. -----Output----- - Output \\"YES\\" if there is a path from the top-left to the bottom-right corner of the grid. - Output \\"NO\\" if no such path exists. -----Examples----- Input 3 3 0 0 0 0 1 0 0 0 0 Output YES Input 3 3 0 1 0 1 1 0 0 0 0 Output NO -----Note----- In the first example, the robot can move from the top-left corner to the bottom-right corner by moving right, down, and then down. In the second example, there is no path due to the obstacles blocking the way.","solution":"def is_path_exists(grid): n = len(grid) m = len(grid[0]) def dfs(x, y): if x == n - 1 and y == m - 1: return True if x < 0 or x >= n or y < 0 or y >= m or grid[x][y] == 1: return False grid[x][y] = 1 # mark cell as visited by setting it to 1 if dfs(x + 1, y) or dfs(x, y + 1): # move down or right return True return False if grid[0][0] == 1 or grid[n - 1][m - 1] == 1: return \\"NO\\" return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given a string T of length 4 consisting of the characters \'1\', \'2\', \'3\', and \'4\'. Determine if T can be formed by permutating \\"1234\\". -----Constraints----- - |T|=4 - T consists of the characters \'1\', \'2\', \'3\', \'4\'. -----Input----- Input is given from Standard Input in the following format: T -----Output----- If T can be obtained by permuting \\"1234\\", print \\"Yes\\", otherwise print \\"No\\". -----Sample Input----- 4321 -----Sample Output----- Yes Swapping the positions of the characters in \\"4321\\" can result in \\"1234\\".","solution":"def is_permutation(T): Determines if string T of length 4 consisting of the characters \'1\', \'2\', \'3\', and \'4\' can be formed by permutating \\"1234\\". return sorted(T) == sorted(\\"1234\\") # For Input / Output handling if __name__ == \\"__main__\\": import sys T = sys.stdin.read().strip() if is_permutation(T): print(\\"Yes\\") else: print(\\"No\\")"},{"question":"The XYZ company is hosting a coding competition where participants have to solve various programming challenges. One of the tasks is to determine the maximum sum of a subarray for a given list of integers. A subarray is any contiguous segment of an array. Write a program to help participants solve this problem efficiently. -----Input----- The first line contains an integer N, the number of test cases. The following 2*N lines contain the test cases in pairs. For each test case: - The first line contains an integer M, the length of the array. - The second line contains M space-separated integers, which are the elements of the array. -----Output----- For each test case, print the maximum sum of any subarray in a new line. -----Constraints----- - 1 ≤ N ≤ 100 - 1 ≤ M ≤ 10^5 - -10^4 ≤ elements of the array ≤ 10^4 -----Example----- Input: 2 5 1 -2 3 4 -1 4 -5 -1 -8 -9 Output: 7 -1 -----Explanation----- For the first test case with the array [1, -2, 3, 4, -1], the subarray with the maximum sum is [3, 4], which has a sum of 7. For the second test case with the array [-5, -1, -8, -9], the subarray with the maximum sum is [-1], which has a sum of -1.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any subarray in the given array using Kadane\'s algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global def process_test_cases(test_cases): Processes multiple test cases to determine the maximum sum of subarrays. results = [] for arr in test_cases: results.append(max_subarray_sum(arr)) return results def main(input_data): Main function to read input, process the test cases, and print results. lines = input_data.strip().split(\'n\') N = int(lines[0]) test_cases = [] index = 1 for _ in range(N): M = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append(arr) index += 2 results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"Two teams are playing baseball and you have the score after each inning as well as the information if any player got injured during that inning. Your task is to determine the final score and also check if any player got injured. The score and injury information is provided in a list of tuples. Each tuple represents an inning and contains three integers: - The first two integers are the runs scored by each team in that inning. - The third integer is either 0 or 1, where 1 means a player got injured in that inning and 0 means nobody got injured. Write a program to process this information and output the final score of the game, followed by \\"Injured\\" if any player got injured or \\"Safe\\" if no injuries occurred during the game. Input format: - The first line contains a single integer T representing the number of test cases. - For each test case: - The first line contains an integer N representing the number of innings. - The next N lines each contain three integers as described above. Output format: - For each test case, output the final score of Team 1 and Team 2 separated by a space, followed by \\"Injured\\" or \\"Safe\\" depending on the injury status. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 20 0 ≤ Runs-scored-by-team ≤ 20 SAMPLE INPUT: 2 3 5 7 0 2 3 1 4 2 0 4 6 3 0 4 5 1 2 2 0 1 1 0 SAMPLE OUTPUT: 11 12 Injured 13 11 Injured Explanation: In the first test case, Team 1 scores 5+2+4=11 points and Team 2 scores 7+3+2=12 points. Since there is an injury in the second inning, the output is \\"Injured\\". In the second test case, Team 1 scores 6+4+2+1=13 points and Team 2 scores 3+5+2+1=11 points. Since there is an injury in the second inning, the output is \\"Injured\\".","solution":"def baseball_game_results(test_cases): Processes the given test cases to calculate the final score and injury status in each baseball game. :param test_cases: List of test cases where each test case is a list containing lists with scores and injury info. :return: List of results for each test case in the format [Team1_score, Team2_score, Injury_status] results = [] for case in test_cases: n = case[0] innings = case[1:] team1_score = 0 team2_score = 0 injury_status = \\"Safe\\" for inning in innings: team1_score += inning[0] team2_score += inning[1] if inning[2] == 1: injury_status = \\"Injured\\" results.append(f\\"{team1_score} {team2_score} {injury_status}\\") return results def process_input_and_output(input_data): Processes the input data from a string format and converts it into test cases, then calls the function to get the results and formats the output. :param input_data: String containing the raw input data. :return: String containing formatted output. input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) test_case = [N] for j in range(1, N+1): test_case.append(list(map(int, input_lines[index+j].split()))) test_cases.append(test_case) index += N + 1 results = baseball_game_results(test_cases) output_lines = \\"n\\".join(results) return output_lines"},{"question":"Alex loves to solve puzzles that involve arranging numbers. Today, he came across a problem where he has to find all possible permutations of a given sequence of integers L. A permutation is a rearrangement of the elements of the sequence into a new order. The task is to print all permutations of the given sequence L in lexicographically sorted order. Given an integer N representing the length of the sequence, followed by the sequence L consisting of N distinct integers, your goal is to generate and print all permutations of the sequence L in sorted order. Input Format The first line contains an integer T, the number of test cases. Each of the next T test cases contains: - A line with an integer N representing the length of the sequence. - A line with N space-separated integers representing the sequence L. Output Format For each test case, print the permutations of the sequence L, with each permutation on a new line. Print the permutations for each test case in lexicographically sorted order. Constraints 1 <= T <= 50 1 <= N <= 6 -10^6 <= L[i] <= 10^6 (where L[i] represents the elements of the sequence L) Sample Input 2 3 1 2 3 2 -1 2 Sample Output 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 -1 2 2 -1 Explanation The first test case involves the sequence [1, 2, 3]. All permutations of this sequence in lexicographically sorted order are: 1 2 3 1 3 2 2 1 3 2 3 1 3 1 2 3 2 1 The second test case involves the sequence [-1, 2]. The permutations in lexicographically sorted order are: -1 2 2 -1","solution":"from itertools import permutations def generate_permutations(T, test_cases): result = [] for i in range(T): N = test_cases[i][0] L = test_cases[i][1] perms = sorted(permutations(L)) for perm in perms: result.append(\\" \\".join(map(str, perm))) return result"},{"question":"Given an array of strings (arr), complete the function `findLongestWord` that should return the longest word in the array. If there are multiple words of the same maximum length, return the first one in the array. Consider words as sequences of characters separated by spaces, and punctuation should not affect the length calculation. **Constraints:** - The array will not be empty. - Each element in the array is a valid word (composed of alphabets only). **Example** ``` findLongestWord([\\"hello\\", \\"world\\", \\"supercalifragilisticexpialidocious\\", \\"hi\\"]); // should return \\"supercalifragilisticexpialidocious\\" findLongestWord([\\"cat\\", \\"dog\\", \\"elephant\\", \\"bat\\"]); // should return \\"elephant\\" findLongestWord([\\"a\\", \\"aa\\", \\"aaa\\"]); // should return \\"aaa\\" findLongestWord([\\"coding\\", \\"assessment\\", \\"question\\"]); // should return \\"assessment\\" ``` **Note** In case of words having the same lengths, the function should return the first word that appears in the array having the longest length. The input will always be a list of words with no punctuation.","solution":"def findLongestWord(arr): Returns the longest word in the array. If there are multiple words of the same maximum length, returns the first one in the array. Parameters: arr (list): A list of strings representing the words. Returns: str: The longest word in the array. longest_word = \\"\\" for word in arr: if len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"You are given a string consisting of lowercase English letters. Your task is to find the length of the smallest palindromic subsequence that can be obtained by removing some (possibly zero) characters from the original string. A subsequence is derived from the original string by deleting some characters without changing the relative order of the remaining characters. A palindrome is a sequence that reads the same backward as forward. -----Input----- The input contains a single string s (1 leq |s| leq 10^5), where |s| denotes the length of the string s. -----Output----- Print one integer — the length of the smallest palindromic subsequence that can be obtained from the string s. -----Examples----- Input abca Output 1 Input racecar Output 1 Input abba Output 1","solution":"def smallest_palindromic_subsequence_length(s): Returns the length of the smallest palindromic subsequence that can be obtained from the string s by removing characters. return 1 if s else 0"},{"question":"You are given an array of integers representing a sequence of operations of a stack machine. The machine supports the following operations: - A positive integer n pushes n onto the stack. - A negative integer n pops the top -n elements from the stack. - A zero (0) duplicates the top element of the stack. Implement a function `processOperations` that takes an array of integers as input and returns the final state of the stack after performing all operations. If an operation is invalid or cannot be performed, return an empty list. Example: Input: [5, 7, 0, -2, 3, -3] Output: [5, 5, 3] Explanation: - 5 is pushed onto the stack. - 7 is pushed onto the stack. - 0 duplicates the top element (7), making the stack [5, 7, 7]. - -2 pops the top 2 elements (7 and 7), making the stack [5]. - 3 is pushed onto the stack. - -3 pops the top 3 elements (only 2 elements in stack, thus invalid operation), returning []. Your Task: Complete the function `processOperations(operations)`, which takes an array of integers as input and returns the final state of the stack. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= operations.length <= 100 -50 <= operations[i] <= 50","solution":"def processOperations(operations): Processes a sequence of operations on a stack and returns the final state of the stack. Parameters: operations (list of int): A list of integers representing stack operations. Returns: list of int: The final state of the stack after all operations or an empty list if an invalid operation was encountered. stack = [] for operation in operations: # Positive integer: push onto the stack if operation > 0: stack.append(operation) # Zero: duplicate the top element of the stack elif operation == 0: if stack: stack.append(stack[-1]) else: return [] # Negative integer: pop the specified number of elements else: num_to_pop = -operation if len(stack) < num_to_pop: return [] stack = stack[:-num_to_pop] return stack"},{"question":"Given a string `s` consisting of lowercase Latin letters, determine the minimum number of characters you need to delete from it so that any subsequent same character will be at least one position away from each other. -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. Each of the next t lines contains a single string s (1 leq |s| leq 10^6), where |s| is the length of the string. It is guaranteed that the sum of the lengths of strings over all test cases does not exceed 10^6. -----Output----- For each test case, print one integer — the minimum number of deletions needed. -----Examples----- Input 3 abcdef aabbcc aaa Output 0 3 2","solution":"def min_deletions_to_avoid_duplicates(s): Returns the minimum number of deletions needed so that no two adjacent characters in the given string `s` are the same. deletions = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: deletions += 1 return deletions def process_test_cases(t, test_cases): Process multiple test cases and returns a list of results for each test case Result is the minimum number of deletions needed for each string in test_cases. results = [] for s in test_cases: results.append(min_deletions_to_avoid_duplicates(s)) return results"},{"question":"The Meteorological Research Center has been tracking weather patterns and wants to develop a model to predict future temperature trends. To build this model, they need a program that can analyze given temperature data and find the longest period of consecutive days where the temperature increases each day. Input The first line of the input contains an integer n (1 ≤ n ≤ 100,000), the number of days for which temperature data is available. The second line contains n integers t1, t2, ..., tn (-50 ≤ ti ≤ 50), where ti represents the temperature on the i-th day. Output Output a single integer representing the length of the longest subsequence of consecutive days where the temperature increases each day. Examples Input 10 1 2 3 2 3 4 1 2 3 4 Output 4 Input 5 10 9 8 7 6 Output 1 Input 7 1 2 1 2 1 2 3 Output 3 Note In the first sample case, the longest period of consecutive days with increasing temperature is 4 days (from the 7th to the 10th day with temperatures 1, 2, 3, 4). In the second sample case, there is no period where the temperature increases, so the maximum is 1 (each day individually). In the third sample case, the longest period is the last three days (with temperatures 1, 2, 3).","solution":"def longest_increasing_temperature_sequence(n, temperatures): Returns the length of the longest consecutive period of days where the temperature increases each day. if n <= 1: return n max_length = 1 current_streak = 1 for i in range(1, n): if temperatures[i] > temperatures[i - 1]: current_streak += 1 max_length = max(max_length, current_streak) else: current_streak = 1 return max_length"},{"question":"In a faraway land, there is a special type of tree known as the \\"Magical Tree\\" that obeys unique growth patterns. This tree starts as a single node and grows based on given instructions. Each instruction either adds a new child node to a specified existing node or queries certain properties of the tree structure. Your task is to manage the growth of this tree and handle the queries. The tree structure initially consists of only one node, the root node with ID 1. Instructions are given in two forms: 1. \\"ADD x y\\" - This indicates adding a new node with ID y as a child of the node with ID x. 2. \\"QUERY x\\" - This asks for the depth (distance from the root) of the node with ID x. Input: The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of instructions. The next N lines contain the instructions, either \\"ADD x y\\" or \\"QUERY x\\". Output: For each \\"QUERY x\\" instruction, output the depth of the node with ID x in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100000 1 ≤ x, y ≤ N + 1 SAMPLE INPUT 1 5 ADD 1 2 ADD 1 3 ADD 2 4 QUERY 4 QUERY 3 SAMPLE OUTPUT 2 1 Explanation: There is one test case with 5 instructions. 1. Add node 2 as a child of node 1. 2. Add node 3 as a child of node 1. 3. Add node 4 as a child of node 2. 4. Query the depth of node 4, which is 2. 5. Query the depth of node 3, which is 1.","solution":"def handle_instructions(test_cases): results = [] for instructions in test_cases: tree = {1: 0} # root node with ID 1 has depth 0 for instruction in instructions: parts = instruction.split() if parts[0] == \\"ADD\\": parent_id = int(parts[1]) child_id = int(parts[2]) tree[child_id] = tree[parent_id] + 1 elif parts[0] == \\"QUERY\\": node_id = int(parts[1]) results.append(tree[node_id]) return results"},{"question":"David likes paths and node-based structures. He recently stumbled upon a problem involving the rearrangement of node values in a binary tree. He posed the following challenge: - Given a binary tree of n nodes where each node contains a unique integer value from 1 to n, determine the number of different binary trees that can be formed by rearranging the nodes such that the in-order traversal of the tree provides a sorted sequence of nodes. Input: The first line contains an integer n (1 ≤ n ≤ 15) — the number of nodes in the binary tree. Output: Output the number of different binary trees that can be formed by rearranging the nodes while maintaining the in-order traversal as a sorted sequence. Example: Input 1: 3 Output 1: 5 Input 2: 4 Output 2: 14 Explanation: In the first sample, with n = 3, the 5 different binary trees are illustrated below: ``` 1 1 2 3 3 / / / 2 3 1 3 1 2 / / 3 2 2 1 ``` In the second sample, with n = 4, there are 14 such binary trees. The possible configurations are more complex but follow the same rule: the in-order traversal of the rearranged tree must provide the sorted sequence [1, 2, 3, 4].","solution":"def num_binary_trees(n): Returns the number of different binary trees (BSTs) that can be formed with \'n\' nodes. if n == 0: return 1 # Table to store results of subproblems catalan = [0] * (n + 1) # Initial values catalan[0] = 1 catalan[1] = 1 # Fill the table in bottom-up manner for i in range(2, n + 1): for j in range(i): catalan[i] += catalan[j] * catalan[i - j - 1] # Return last entry return catalan[n]"},{"question":"# Task Given a matrix `matrix` of size `m x n` (where `m` and `n` are the number of rows and columns respectively), return the elements of the matrix in spiral order starting from the top-left corner. Spiral order means traversing the matrix boundary in a clockwise manner. When the boundary is covered, move on to the next enclosed boundary and continue in the same pattern until all elements are traversed. # Example For `matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]`, the output should be `[1, 2, 3, 6, 9, 8, 7, 4, 5]`. # Input/Output - `[input]` 2D integer array `matrix` A 2-dimensional integer array of size `m x n`. Constraints: `1 ≤ m, n ≤ 10`, `-100 ≤ matrix[i][j] ≤ 100` - `[output]` an integer array Elements of `matrix` in spiral order. # Function signature in Python ```python def spiralOrder(matrix: List[List[int]]) -> List[int]: pass ```","solution":"from typing import List def spiralOrder(matrix: List[List[int]]) -> List[int]: Returns the elements of the matrix in spiral order. if not matrix: return [] m, n = len(matrix), len(matrix[0]) result = [] left, right, top, bottom = 0, n - 1, 0, m - 1 while left <= right and top <= bottom: # Traverse from left to right for j in range(left, right + 1): result.append(matrix[top][j]) top += 1 # Traverse from top to bottom for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for j in range(right, left - 1, -1): result.append(matrix[bottom][j]) bottom -= 1 if left <= right: # Traverse from bottom to top for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"You are given a sequence of integers B_{1}, B_{2}, ldots, B_{N}. Prof. Math needs you to handle P queries. There are two types of queries: 1. 1 L R V: for each i (L ≤ i ≤ R), multiply B_{i} by (i - L + V) 2. 2 Y: find the current value of B_{Y} ------ Input ------ The first line of the input contains two space-separated integers N and P. The second line contains N space-separated integers B_{1}, B_{2}, ldots, B_{N}. P lines follow. Each of these lines describes a query in the format described above. ------ Output ------ For each query of the second type, print a single line containing one integer B_{Y}. ------ Constraints ------ 1 ≤ N, P ≤ 10^{5} 0 ≤ |B_{i}| ≤ 10^{6} for each valid i 1 ≤ L ≤ R ≤ N 1 ≤ V ≤ 10^{6} 1 ≤ Y ≤ N ------ Sample Input 1 ------ 6 3 2 4 6 8 10 12 1 1 3 2 2 2 1 4 6 3 ------ Sample Output 1 ------ 12 ------ Explanation 1 ------ - The sequence after the first query is [2×(1−1+2), 4×(2−1+2), 6×(3−1+2), 8, 10, 12] = [4, 12, 30, 8, 10, 12] - The second query asks for B_{2}, which is 12 - The sequence remains unchanged as there\'s only one type 2 query.","solution":"def process_queries(N, P, B, queries): results = [] for query in queries: t = query[0] if t == 1: L, R, V = query[1], query[2], query[3] for i in range(L - 1, R): B[i] *= (i - (L - 1) + V) elif t == 2: Y = query[1] results.append(B[Y - 1]) return results"},{"question":"A successful entrepreneur wants to host a special event to celebrate their company\'s anniversary. They have a list of n attendees. Each attendee has their own desired time range during which they are available. The event should be hosted when the maximum number of attendees are available. You are given a list of attendees with their start and end times of availability. Determine the maximum number of attendees that can be present at the same time. -----Input----- The first line of the input contains one integer n (1 ≤ n ≤ 10^5) — the number of attendees. Each of the next n lines contains two integers start_i and end_i (1 ≤ start_i < end_i ≤ 10^9) — the start and end times of the i-th attendee\'s availability. -----Output----- Print one integer — the maximum number of attendees that can be present at the same time. -----Examples----- Input 4 1 5 2 6 5 8 3 7 Output 3 Input 6 1 3 2 4 3 5 4 6 5 7 6 8 Output 2","solution":"def max_attendees(events): Returns the maximum number of attendees that can be present at the same time. Args: events (list): List of tuples where each tuple contains two integers, start and end time of an attendee\'s availability. Returns: int: Maximum number of attendees present at the same time. times = [] for start, end in events: times.append((start, 1)) times.append((end, -1)) times.sort() max_attendees = 0 current_attendees = 0 for time, increment in times: current_attendees += increment max_attendees = max(max_attendees, current_attendees) return max_attendees"},{"question":"Alex loves palindromic numbers and likes to play with them. A palindromic number is a number that remains the same when its digits are reversed. Today, he found a very large positive integer and decided to calculate the closest smaller and larger palindromic numbers to it. Given a positive integer n (1 ≤ n ≤ 10^6), determine the largest palindromic number smaller than n and the smallest palindromic number larger than n. -----Input----- A single line containing the integer n. -----Output----- Print two lines. The first line should contain the largest palindromic number smaller than n. The second line should contain the smallest palindromic number larger than n. -----Examples----- Input 12321 Output 12221 12421 Input 100 Output 99 101","solution":"def is_palindrome(num): num_str = str(num) return num_str == num_str[::-1] def closest_palindromes(n): # Find the largest palindromic number smaller than n smaller_palindrome = n - 1 while not is_palindrome(smaller_palindrome): smaller_palindrome -= 1 # Find the smallest palindromic number larger than n larger_palindrome = n + 1 while not is_palindrome(larger_palindrome): larger_palindrome += 1 return (smaller_palindrome, larger_palindrome)"},{"question":"Given an array of integers, return the indices of the two numbers that add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Implement a function `find_two_sum` that takes an array of integers `nums` and an integer `target` as arguments. # Example ```python find_two_sum([2, 7, 11, 15], 9) # Output: [0, 1] find_two_sum([3, 2, 4], 6) # Output: [1, 2] ``` # Constraints - The array length will be in the range of [2, 10^4]. - The array will contain integers in the range of `[-10^9, 10^9]`. - The `target` will be in the range of `[-10^9, 10^9]`.","solution":"def find_two_sum(nums, target): Returns the indices of the two numbers that add up to the specific target. Parameters: nums (list of int): list of integers. target (int): the target sum. Returns: list of int: list containing the indices of the two numbers. num_to_index = {} for i, num in enumerate(nums): difference = target - num if difference in num_to_index: return [num_to_index[difference], i] num_to_index[num] = i return []"},{"question":"You are given an array of integers, and you need to perform a series of operations to transform this array. The operations are defined as follows: * Choose any two adjacent elements in the array and replace them with a single element which is their sum. You need to find the minimum possible value of the final single element after performing these operations. # Input - The first line contains an integer n (2 ≤ n ≤ 1000) — the length of the array. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. # Output - Print the minimum possible value of the final single element after performing the operations. # Example Input 4 4 3 5 6 Output 9 Input 3 1 8 7 Output 16 # Note In the first example, one possible way to reach the minimum possible value is: * Combine 3 and 5 to get 8, resulting in [4, 8, 6]. * Combine 4 and 6 to get 10, resulting in [8, 10]. * Combine 8 and 10 to get 18. By choosing another way: * Combine 4 and 3 to get 7, resulting in [7, 5, 6]. * Combine 5 and 6 to get 11, resulting in [7, 11]. * Combine 7 and 11 to get 18. However, the minimum possible way is: * Combine 4 and 6 to get 10, resulting in [10, 3, 5]. * Combine 10 and 3 to get 13, resulting in [13, 5]. * Combine 13 and 5 to get 18. In the second example, you can combine as follows: * Combine 1 and 7 to get 8, resulting in [8, 8]. * Combine 8 and 8 to get 16.","solution":"def min_final_value(n, arr): This function takes the length of the array `n` and the array `arr` and returns the minimum possible value of the final single element after performing the given operations. # Sort the array in non-empty order sorted_arr = sorted(arr) # As we sum two smallest elements, they will always be inside the overall sum. return sorted_arr[0] + sorted_arr[1]"},{"question":"You are given an integer array nums of unique elements, and an integer k. You need to determine the k-th largest element in the array. Implement a function `findKthLargest(nums: List[int], k: int) -> int` that returns the k-th largest element, considering the sorted order of the array in descending order (the largest element is the 1st largest). Note that you must solve it in O(n) average-time complexity. -----Input----- - The first line contains an integer n (1 ≤ n ≤ 10^5) — the length of the input array. - The second line contains n space-separated integers nums (|nums[i]| ≤ 10^4) — the elements of the array. - The third line contains an integer k (1 ≤ k ≤ n). -----Output----- - Print the k-th largest element in the array. -----Examples----- Input 6 3 2 1 5 6 4 2 Output 5 Input 4 7 10 4 3 1 Output 10 Input 5 9 3 2 5 7 3 Output 5 -----Note----- In the first sample, the sorted array in descending order is [6, 5, 4, 3, 2, 1]. The second largest element is 5. In the second sample, the sorted array in descending order is [10, 7, 4, 3]. The first largest element is 10. In the third sample, the sorted array in descending order is [9, 7, 5, 3, 2]. The third largest element is 5.","solution":"from typing import List import random def partition(nums: List[int], low: int, high: int) -> int: pivot = nums[high] i = low for j in range(low, high): if nums[j] > pivot: nums[i], nums[j] = nums[j], nums[i] i += 1 nums[i], nums[high] = nums[high], nums[i] return i def quickselect(nums: List[int], low: int, high: int, k: int) -> int: if low < high: pi = partition(nums, low, high) if pi == k: return nums[pi] elif pi > k: return quickselect(nums, low, pi - 1, k) else: return quickselect(nums, pi + 1, high, k) return nums[low] def findKthLargest(nums: List[int], k: int) -> int: return quickselect(nums, 0, len(nums) - 1, k - 1)"},{"question":"Linda is planning a small renovation project for her house and wants to optimize the usage of her limited materials. She has a set of wooden planks, each with a specific length in meters. Linda wants to cut the planks into smaller pieces of equal length such that the total number of pieces is maximized. Additionally, Linda prefers that the pieces should not be too small; hence, the length of each piece should be at least a given minimum length. Given the lengths of the planks and the minimum acceptable length for the pieces, write a function to determine the maximum number of pieces that can be obtained. Function Description Complete the function `maxPieces` which has the following parameters: - `int[] plankLengths`: an array of integers representing the lengths of each plank. - `int minLength`: an integer representing the minimum acceptable length for the pieces. The function should return an integer representing the maximum number of pieces that can be cut from the given planks. Input Format The input consists of: - The first line contains two integers n and minLength, where n is the number of planks, and minLength is the minimum acceptable length for each piece. - The second line contains n space-separated integers each representing the length of a plank in meters. Constraints - 1 ≤ n ≤ 100 - 1 ≤ minLength ≤ 100 - 1 ≤ plankLengths[i] ≤ 1000 Output The function should return an integer representing the maximum number of pieces that can be obtained from the given planks. Example Input ``` 5 2 5 8 6 3 7 ``` Output ``` 14 ``` Explanation Linda can cut the planks as follows: - The plank of length 5 can be cut into 2 pieces of length 2. (5 / 2 = 2 pieces of 2 with 1 meter leftover) - The plank of length 8 can be cut into 4 pieces of length 2. (8 / 2 = 4 pieces of 2) - The plank of length 6 can be cut into 3 pieces of length 2. (6 / 2 = 3 pieces of 2) - The plank of length 3 can be cut into 1 piece of length 2. (3 / 2 = 1 piece of 2 with 1 meter leftover) - The plank of length 7 can be cut into 3 pieces of length 2. (7 / 2 = 3 pieces of 2 with 1 meter leftover) In total, Linda can obtain 2 + 4 + 3 + 1 + 3 = 13 pieces of length at least 2.","solution":"def maxPieces(plankLengths, minLength): Determine the maximum number of pieces of length at least minLength that can be obtained from given wooden planks. Parameters: plankLengths (list of int): The lengths of each plank. minLength (int): The minimum acceptable length for each piece. Returns: int: The maximum number of pieces that can be obtained. max_pieces = 0 for plank in plankLengths: max_pieces += plank // minLength return max_pieces"},{"question":"Given an array of integers, find the maximum length of a contiguous subarray that contains at most two different integers. Input Format The first line contains an integer, boldsymbol{mathrm{~T~}}, denoting the number of test cases you must find the answer for. Each of the boldsymbol{mathrm{~T~}} test cases is described as follows: The first line contains an integer, boldsymbol{n}, denoting the length of the array. The second line contains boldsymbol{n} space-separated integers describing the elements of the array. Constraints 1 leq T leq 100 1 leq n leq 10^5 -10^9 leq text{array}[i] leq 10^9 Output Format For each of the boldsymbol{T} test cases, print an integer denoting the maximum length of a contiguous subarray that contains at most two different integers. Sample Input 3 7 1 2 1 2 3 4 3 4 4 4 4 4 5 1 2 3 1 2 Sample Output 4 4 5 Explanation For the first test case, the subarray [1 2 1 2] is the longest contiguous subarray with at most two different integers, so the output is 4. For the second test case, all elements are the same, so [4 4 4 4] is the longest contiguous subarray with at most two different integers, and the output is 4. For the third test case, the entire array [1 2 3 1 2] itself has at most two different integers if considered as starting and ending points, thus providing the output as 5.","solution":"def max_length_two_distinct(arr): Finds the maximum length of a contiguous subarray with at most two different integers. from collections import defaultdict n = len(arr) if n == 0: return 0 i = 0 max_len = 0 count = defaultdict(int) for j in range(n): count[arr[j]] += 1 while len(count) > 2: count[arr[i]] -= 1 if count[arr[i]] == 0: del count[arr[i]] i += 1 max_len = max(max_len, j - i + 1) return max_len def solve(test_cases): results = [] for arr in test_cases: results.append(max_length_two_distinct(arr)) return results"},{"question":"You are given a matrix of integers with r rows and c columns. Each cell in the matrix contains an integer. You need to find the minimum cost path to move from the top-left corner to the bottom-right corner. You can only move right or down from a cell. The cost of a path is defined as the sum of the integers in the cells along the path. Your task is to write a program that computes the minimum cost path for k independent queries, each with a different matrix. -----Input----- The first line contains one integer k (1 le k le 100) — the number of queries. For each query, the first line contains two integers r and c (1 le r, c le 100). The next r lines each contain c integers, forming the matrix. Each integer in the matrix is between 1 and 100. -----Output----- For each query output one integer — the minimum cost to move from the top-left corner to the bottom-right corner of the matrix. -----Example----- Input 2 3 3 1 3 1 1 5 1 4 2 1 2 2 1 2 3 4 Output 7 7 -----Note----- In the first query of the example, the minimum cost path is 1 rightarrow 3 rightarrow 1 rightarrow 1 rightarrow 1, and the cost is 1 + 3 + 1 + 1 + 1 = 7. In the second query, the minimum cost path is 1 rightarrow 2 rightarrow 4, and the cost is 1 + 2 + 4 = 7.","solution":"def min_cost_path(matrix): r, c = len(matrix), len(matrix[0]) dp = [[0] * c for _ in range(r)] dp[0][0] = matrix[0][0] # Fill the top row for j in range(1, c): dp[0][j] = dp[0][j-1] + matrix[0][j] # Fill the first column for i in range(1, r): dp[i][0] = dp[i-1][0] + matrix[i][0] # Fill the remaining cells for i in range(1, r): for j in range(1, c): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + matrix[i][j] return dp[r-1][c-1] def process_queries(queries): results = [] for query in queries: r, c = query[0] matrix = query[1] results.append(min_cost_path(matrix)) return results"},{"question":"Emma the Engineer is working on an array of integers and has a sequence of operations she wants to perform. These operations involve updating elements in the array and querying the sum of a specific subarray. Each operation is described as follows: 1. `update i x`: change the value of the element at index `i` to `x`. 2. `sum l r`: compute the sum of elements from index `l` to index `r`, inclusive. Your task is to help Emma by efficiently performing each update or sum operation. Input The first line of the input contains two integers `n` and `q` (1 ≤ n ≤ 10^5, 1 ≤ q ≤ 10^5) — the number of elements in the array and the number of operations, respectively. The second line contains `n` integers a_1, a_2, ..., a_n (|a_i| ≤ 10^9) — the initial elements of the array. Each of the next `q` lines describes an operation in one of the following formats: - `1 i x` (1 ≤ i ≤ n, |x| ≤ 10^9): the `i-th` element of the array should be updated to `x`. - `2 l r` (1 ≤ l ≤ r ≤ n): determine the sum of elements from index `l` to index `r` (inclusive). Output For each sum operation, output the result on a new line. Example Input 5 5 1 2 3 4 5 2 1 3 1 2 10 2 1 3 1 3 5 2 1 5 Output 6 14 22 Explanation Initially, the array is `[1, 2, 3, 4, 5]`. - The first operation is `sum 1 3` which is `1 + 2 + 3 = 6`. - The second operation is `update 2 10` which changes the array to `[1, 10, 3, 4, 5]`. - The third operation is `sum 1 3` which is `1 + 10 + 3 = 14`. - The fourth operation is `update 3 5` which changes the array to `[1, 10, 5, 4, 5]`. - The fifth operation is `sum 1 5` which is `1 + 10 + 5 + 4 + 5 = 25`.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self.build(data) def build(self, data): # Insert leaf nodes in tree for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1] def update(self, index, value): # Update the value at index index += self.n self.tree[index] = value # Update the ancestors i = index while i > 1: self.tree[i // 2] = self.tree[i] + self.tree[i ^ 1] i //= 2 def query(self, left, right): result = 0 left += self.n right += self.n + 1 while left < right: if left % 2 == 1: result += self.tree[left] left += 1 if right % 2 == 1: right -= 1 result += self.tree[right] left //= 2 right //= 2 return result def handle_operations(n, q, data, operations): segment_tree = SegmentTree(data) results = [] for operation in operations: op = operation[0] if op == 1: index, value = operation[1] - 1, operation[2] segment_tree.update(index, value) elif op == 2: left, right = operation[1] - 1, operation[2] - 1 results.append(segment_tree.query(left, right)) return results"},{"question":"Given two strings, `s1` and `s2`, your task is to transform `s1` into `s2` using the minimum number of operations. You are allowed to perform the following operations: 1. Insert a character 2. Delete a character 3. Replace a character Formally, you need to find the minimum number of edit operations required to convert `s1` into `s2`. Constraints * 1 ≤ length of s1, s2 ≤ 1000 The input is given from Standard Input in the following format: s1 s2 The output should be a single integer, the minimum number of operations required. Examples Input horse ros Output 3 Input intention execution Output 5","solution":"def min_edit_distance(s1, s2): Calculate the minimum number of operations required to convert s1 into s2. Operations allowed: insert a character, delete a character, replace a character. m, n = len(s1), len(s2) # Create a (m+1) x (n+1) matrix to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # If s1 is empty, all characters of s2 need to be inserted elif j == 0: dp[i][j] = i # If s2 is empty, all characters of s1 need to be deleted elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Delete dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"question":"Oliver is fond of large prime numbers and recently he stumbled upon a large number which he believes could be prime. Since checking primality of such a large number can be computationally intensive, he decided to only calculate the largest prime factor of the number to form an initial estimation of its properties. Your task is to help Oliver by writing a function that determines the largest prime factor of a given number. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. Each of the next t lines contains one integer n (2 ≤ n ≤ 10^12). Output For each test case, print the largest prime factor of n in a single line. Example Input 3 10 15 21 Output 5 5 7 Note In the first example, 10 has prime factors 2 and 5. The largest one is 5. In the second example, 15 has prime factors 3 and 5. The largest one is 5. In the third example, 21 has prime factors 3 and 7. The largest one is 7. Solution Outline For each test case, the task is to find the largest prime factor of the given number n. To achieve this, the following steps can be taken: - Start dividing n by 2 and continue until it is not divisible by 2. Update n to be the quotient after each division. - Start checking for odd numbers starting from 3 to the square root of n. - Continue dividing n by any odd number which divides n completely and update n to be the quotient. - If remaining n is greater than 2, it means n itself is a prime number and hence the largest prime factor. - Consider edge cases where the maximum possible values might stress test the solution\'s efficiency. This approach ensures that we efficiently find the largest prime factor by reducing the problem size at each step.","solution":"def largest_prime_factor(n): Determine the largest prime factor of the given number n. # Initialize the largest prime factor largest_factor = -1 # Step 1: Divide n by 2 until it is no longer even while n % 2 == 0: largest_factor = 2 n //= 2 # Step 2: Check for factors from 3 onwards until the square root of n factor = 3 while factor * factor <= n: while n % factor == 0: largest_factor = factor n //= factor factor += 2 # Step 3: If n is still greater than 2, it is prime if n > 2: largest_factor = n return largest_factor def process_test_cases(t, test_cases): results = [] for n in test_cases: largest_factor = largest_prime_factor(n) results.append(largest_factor) return results"},{"question":"Given an integer array nums and an integer threshold, we need to find the number such that when we divide all the elements of the array by this number, the sum of the division result is less than or equal to the given threshold. You need to find the minimum divisor such that the result of the summed divisions is minimum. Note: The result of the division should be rounded up to the nearest integer greater than or equal to the result. Example 1: Input: nums = [1, 2, 5, 9] threshold = 6 Output: 5 Explanation: When division is done with divisor = 5: [1, 1, 1, 2] Sum of result = 1+1+1+2 = 5 which is <= threshold = 6. Any smaller divisor will produce a sum greater than the threshold. Example 2: Input: nums = [2, 3, 5, 7, 11] threshold = 11 Output: 3 Explanation: When division is done with divisor = 3: [1, 1, 2, 3, 4] Sum of result = 1+1+2+3+4 = 11 which is <= threshold = 11. Any smaller divisor will produce a sum greater than the threshold. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestDivisor() which takes the array nums[], and its size n, and the integer threshold as inputs and returns the minimum divisor. Expected Time Complexity: O(N log(max(nums))) Expected Auxiliary Space: O(1) Constraints: 1 <= nums.length <= 10^5 1 <= nums[i] <= 10^6 1 <= threshold <= 10^6","solution":"import math def smallestDivisor(nums, threshold): def division_sum(divisor): return sum(math.ceil(num / divisor) for num in nums) left, right = 1, max(nums) while left < right: mid = (left + right) // 2 if division_sum(mid) > threshold: left = mid + 1 else: right = mid return left"},{"question":"Implement Array Rotation Input The first line contains T, the number of test cases. Each test case consists of three lines: - The first line contains two integers N and D, where N is the size of the array, and D is the number of rotations to perform. - The second line contains N integers, the elements of the array. Output For each test case, output the rotated array on a new line. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ D ≤ N 1 ≤ array elements ≤ 10^9 NOTE The array should be rotated to the left. SAMPLE INPUT 2 5 2 1 2 3 4 5 7 3 10 20 30 40 50 60 70 SAMPLE OUTPUT 3 4 5 1 2 40 50 60 70 10 20 30","solution":"def rotate_array(array, D): Rotates the given array to the left by D positions. Arguments: array -- the list of integers to rotate. D -- the number of positions to rotate the array. Returns: A new list with the elements rotated to the left by D positions. N = len(array) D = D % N # In case D is greater than N, rotating N times gets back the original array return array[D:] + array[:D] def rotate_test_cases(test_cases): Rotates arrays for multiple test cases. Arguments: test_cases -- a list containing the test cases, each of which is a tuple (N, D, array). Returns: A list containing the rotated arrays for each test case. results = [] for N, D, array in test_cases: results.append(rotate_array(array, D)) return results"},{"question":"Given a positive integer N, write a program to determine if N is an \\"Emirp number\\". An Emirp number is a prime number that results in a different prime number when its digits are reversed. Example 1: Input: N = 13 Output: YES Explanation: 13 is a prime number and its reverse, 31, is also a prime number. Therefore, 13 is an Emirp number. Example 2: Input: N = 17 Output: NO Explanation: 17 is a prime number but its reverse, 71, is not a prime number. Therefore, 17 is not an Emirp number. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isEmirp() which takes an integer N as input and returns the answer as \\"YES\\" if it is an Emirp number. Otherwise, return \\"NO\\". Expected Time Complexity: O(sqrt(N)) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def isEmirp(N): Returns \\"YES\\" if N is an Emirp number, \\"NO\\" otherwise. if not is_prime(N): return \\"NO\\" reversed_N = int(str(N)[::-1]) if reversed_N != N and is_prime(reversed_N): return \\"YES\\" return \\"NO\\""},{"question":"Alex loves cooking and often finds himself in the kitchen trying to manage multiple tasks at once. There is a series of n cooking tasks that Alex needs to complete. Each task has a specific duration which represents the time it takes to complete the task. Alex can only perform one task at a time. However, he has a special ability: he can dish up some additional time to extend the duration of any task, but he can only use this ability exactly once and it has to be on a single task. Given the durations of the cooking tasks, your task is to determine the minimum possible total cooking time if Alex uses his ability optimally. You need to add at least one unit of time to exactly one task to optimize the schedule. The total cooking time is the sum of the durations of all tasks. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of cooking tasks. The second line contains n integers d1, d2, ..., dn (1 ≤ di ≤ 1000) — the durations of each cooking task. Output Print a single integer — the minimum total cooking time Alex can achieve by adding at least one unit of time to one of the tasks. Examples Input 3 2 3 4 Output 9 Input 5 1 2 3 4 5 Output 15 Input 4 1 1 1 1 Output 5","solution":"def min_total_cooking_time(n, durations): Returns the minimum total cooking time by adding at least one unit of time to one of the tasks. Parameters: n (int) : Number of cooking tasks. durations (list of int) : Duration of each cooking task. Returns: int : Minimum total cooking time. # Calculate the total sum of durations total_time = sum(durations) # Find the minimum duration in the list min_duration = min(durations) # Add one unit of time to the smallest duration min_total_time = total_time + 1 return min_total_time"},{"question":"You are given an array of integers and an integer k. Write a program that modifies the array by rotating it k steps to the right. In other words, each element in the array is shifted k positions to the right, and any elements that fall off are wrapped around to the beginning of the array. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. The second line contains n integers a1, a2, ..., an, where ai (1 ≤ ai ≤ 10^9) — the elements of the array. The third line contains an integer k (0 ≤ k ≤ 10^9) — the number of steps to rotate the array to the right. Output Print a single line with n integers — the array after being rotated k steps to the right. Examples Input 5 1 2 3 4 5 2 Output 4 5 1 2 3 Input 7 10 20 30 40 50 60 70 3 Output 50 60 70 10 20 30 40 Input 4 11 22 33 44 0 Output 11 22 33 44 Note In the first example, rotating the array [1, 2, 3, 4, 5] by 2 steps to the right results in [4, 5, 1, 2, 3]. In the second example, rotating the array [10, 20, 30, 40, 50, 60, 70] by 3 steps to the right results in [50, 60, 70, 10, 20, 30, 40]. In the third example, rotating the array [11, 22, 33, 44] by 0 steps results in the same array, [11, 22, 33, 44].","solution":"def rotate_array(arr, k): Rotates the array arr by k steps to the right. Parameters: arr (list of int): Input array of integers. k (int): Number of steps to rotate the array to the right. Returns: list of int: The array after being rotated k steps to the right. n = len(arr) k = k % n # To handle cases where k > n return arr[-k:] + arr[:-k]"},{"question":"Write a function that, given a string s consisting of lowercase alphabets and a dictionary wordDict containing a list of non-empty words, determines if s can be segmented into a space-separated sequence of one or more dictionary words. Example 1: Input: s = \\"applepenapple\\", wordDict = [\\"apple\\", \\"pen\\"] Output: true Explanation: \\"applepenapple\\" can be segmented as \\"apple pen apple\\". Example 2: Input: s = \\"catsandog\\", wordDict = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"] Output: false Explanation: The string cannot be segmented into a space-separated sequence of one or more dictionary words. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function wordBreak() that takes a string s and a list of strings wordDict, and returns a boolean indicating whether the string s can be segmented into one or more dictionary words. The driver code takes care of the printing. Expected Time Complexity: O(N * M) Expected Auxiliary Space: O(N) Constraints: 1 <= s.length <= 300 1 <= wordDict.length <= 1000 1 <= wordDict[i].length <= 20 s and wordDict[i] consist of only lowercase English letters.","solution":"def wordBreak(s, wordDict): Determines if the given string s can be segmented into a space-separated sequence of one or more dictionary words. :param s: The input string consisting of lowercase alphabets. :param wordDict: A list of non-empty words. :return: True if the string can be segmented as described, otherwise False. word_set = set(wordDict) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[len(s)]"},{"question":"-----Question----- You are working on a new algorithm for compressing a sequence of integers. The compression works by removing duplicates while maintaining the order of appearance of the first occurrence of each element. Additionally, you need to ensure that the compressed sequence respects a given set of constraints on the maximum allowed value. Your task is to write a function that takes an input list of integers and a maximum allowed value, removes duplicates while maintaining the order, and ensures that all elements in the resulting list are less than or equal to the maximum allowed value. -----Input----- - The first line contains an integer n (1 leq n leq 10^5), the length of the sequence. - The second line contains n integers a_1, a_2, ldots, a_n (-10^6 leq a_i leq 10^6), which represent the sequence. - The third line contains an integer m (-10^6 leq m leq 10^6), the maximum allowed value. -----Output----- - Print the compressed sequence of integers, separating each integer by a single space. -----Examples----- Sample Input 1: 5 3 3 2 2 5 4 Sample Output 1: 3 2 Sample Input 2: 10 1 2 3 4 5 6 7 8 9 10 5 Sample Output 2: 1 2 3 4 5","solution":"def compress_sequence(n, sequence, max_value): Compresses the sequence by removing duplicates while maintaining the order of first appearance and filters out values greater than maximum allowed value. Args: n (int): Length of the sequence. sequence (list of int): Original sequence of integers. max_value (int): Maximum allowed value in the compressed sequence. Returns: list of int: Compressed sequence with constraints applied. seen = set() result = [] for number in sequence: if number not in seen and number <= max_value: seen.add(number) result.append(number) return result"},{"question":"Given an array `A[]` of integers, the task is to complete the function `maxMirror` which returns the size of the largest mirror section found in the given array. A mirror section in an array is a sub-array that is the same as another sub-array when read in reverse. The sub-array should be contiguous. Examples: Input: arr[] = {1, 2, 3, 8, 9, 3, 2, 1} Output: 3 Explanation: The largest mirror section is {1, 2, 3}. Input: arr[] = {7, 1, 2, 9, 7, 2, 1} Output: 2 Explanation: The largest mirror section is either {1, 2} or {2, 1}. Input: arr[] = {1, 2, 1, 4} Output: 3 Explanation: The largest mirror section is {1, 2, 1}. Input: The first line of input contains an integer `T` denoting the number of test cases. Then `T` test cases follow. Each test case contains an integer `N` denoting the size of the array. In the next line are `N` space-separated values of the array `A`. Output: For each test case, output the size of the largest mirror section in the given array in a new line. Constraints: 1 <= T <= 50 1 <= N <= 100 1 <= A[i] <= 200 Example (To be used only for expected output): Input: 2 8 1 2 3 8 9 3 2 1 4 7 1 2 9 Output 3 1","solution":"def maxMirror(arr): Function to find the size of the largest mirror section in an array. Args: arr (list): List of integers Returns: int: Size of the largest mirror section n = len(arr) max_mirror_len = 0 for i in range(n): for j in range(n): length = 0 k = 0 while (i + k < n and j - k >= 0 and arr[i + k] == arr[j - k]): length += 1 k += 1 max_mirror_len = max(max_mirror_len, length) return max_mirror_len"},{"question":"Alice and Bob are playing a game with a grid of dimensions (N times M). Each cell in the grid contains a non-negative integer representing the number of coins in that cell. The game is turn-based, starting with Alice, then Bob, and so on. In each turn, a player may choose any of the remaining cells in the grid to collect all coins in that cell. The game ends when all cells have been chosen. Each player aims to maximize the total number of coins they collect by the end of the game. You need to determine the maximum number of coins that Alice can collect if both players play optimally. ------ Input: ------ First line will contain (T), the number of test cases. Then the test cases follow. Each test case contains (N+1) lines of input. First line will contain 2 space-separated integers (N) and (M) denoting the size of the grid. Each of the next (N) lines contains (M) space-separated integers representing the number of coins in each cell of the grid. ------ Output: ------ For each test case, output one line containing the maximum number of coins that Alice can collect. ------ Constraints: ------ (1 leq N, M leq 100) (0 leq) number of coins in each cell (leq 10^4) ----- Sample Input 1 ------ 2 3 3 1 2 3 4 5 6 7 8 9 2 3 10 20 30 40 50 60 ----- Sample Output 1 ------ 25 120 ----- Explanation 1 ------ In test case 1, if both players play optimally: - Alice selects the cell (3, 3) with 9 coins. - Bob selects the cell (2, 3) with 6 coins. - Alice selects the cell (3, 2) with 8 coins. - Bob selects the cell (3, 1) with 7 coins. - Alice selects the cell (2, 2) with 5 coins. - Bob selects the cell (1, 3) with 3 coins. - Alice selects the cell (2, 1) with 4 coins. - Bob selects the cell (1, 2) with 2 coins. - Alice selects the cell (1, 1) with 1 coin. Thus, Alice\'s total coins collected will be 9 + 8 + 5 + 4 + 1 = 27. In test case 2, Alice can collect the cells (2, 3), (1, 3), and (1, 2) collecting a total of 60 + 30 + 20 = 110 coins.","solution":"def max_coins_for_alice(t, cases): results = [] for case in cases: N, M = case[0] grid = case[1] # Flatten the grid and sort by coins in descending order cells = [(grid[i][j], i, j) for i in range(N) for j in range(M)] cells.sort(reverse=True, key=lambda x: x[0]) alice_coins = 0 # Alice starts first, so add coins from cells at even indices (0, 2, 4, ...) for i in range(0, len(cells), 2): alice_coins += cells[i][0] results.append(alice_coins) return results # Read input def read_input(): import sys input = sys.stdin.read data = input().strip().split(\'n\') t = int(data[0]) index = 1 cases = [] for _ in range(t): N, M = map(int, data[index].split()) grid = [] for i in range(N): grid.append(list(map(int, data[index + 1 + i].split()))) cases.append(((N, M), grid)) index += N + 1 return t, cases"},{"question":"You are given an array of integers, each representing the age of a person in a group. Your task is to determine the maximum number of people in the group that have the same age. Write a program that reads the number of people in the group (N) and then reads the ages of these people. Your program should output the maximum number of people with the same age in the group. -----Constraints----- - N is an integer between 1 and 1000 (inclusive). - Each age is an integer between 0 and 120 (inclusive). -----Input----- Input is given from Standard Input in the following format: N age1 age2 age3 ... ageN -----Output----- Print the maximum number of people that have the same age. -----Sample Input----- 5 10 20 20 10 10 -----Sample Output----- 3 In this case, age 10 appears 3 times, which is the maximum number for any single age.","solution":"def max_age_count(N, ages): Returns the maximum number of people with the same age in the group. Parameters: N (int): The number of people in the group. ages (list): A list of integers representing the ages of the people in the group. Returns: int: The maximum number of people with the same age. age_count = {} for age in ages: if age in age_count: age_count[age] += 1 else: age_count[age] = 1 return max(age_count.values())"},{"question":"# Problem Statement Alice and Bob found an interesting game involving a list of numbers. They each take turns removing elements from the list, with Alice going first. The rules for the game are as follows: 1. On each player\'s turn, they must select either the smallest or largest number currently in the list and remove it. 2. The game continues until all numbers are removed from the list. 3. The player who removes more numbers than the other wins the game. Your task is to determine the winner given the initial list of numbers. If Alice wins, print \\"ALICE\\". If Bob wins, print \\"BOB\\". If they remove the same number of elements, print \\"DRAW\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of elements in the list. The second line contains n integers a_i (1 ≤ a_i ≤ 10^9) — the elements of the list. -----Output----- Print \\"ALICE\\" if Alice is the winner, \\"BOB\\" if Bob is the winner, or \\"DRAW\\" if they remove an equal number of elements. -----Examples----- Input 5 4 1 2 3 5 Output ALICE Input 6 1 2 3 4 5 6 Output DRAW -----Note----- In the first example, Alice removes 1, Bob removes 5, Alice removes 2, Bob removes 4, and Alice then removes 3. Alice removes 3 elements while Bob removes 2 elements, so Alice wins. In the second example, Alice removes 1, Bob removes 6, Alice removes 2, Bob removes 5, Alice removes 3, and Bob removes 4. Both players remove 3 elements, resulting in a draw.","solution":"def game_winner(n, a): Given a list of integers and the rules of the game, determines the winner between Alice and Bob. :param n: int - the number of elements in the list :param a: list of int - the elements of the list :return: str - \\"ALICE\\", \\"BOB\\", or \\"DRAW\\" based on who removes more numbers # Alice removes the first element, Bob removes the second, Alice the third, etc. if n % 2 == 0: return \\"DRAW\\" else: return \\"ALICE\\""},{"question":"Given an array of integers, we need to find the first missing positive integer that does not appear in the array. The missing positive integer is the smallest positive integer greater than zero that is not present in the array. Example arr = [3, 4, -1, 1] - Sorted and cleaned up, the list of positive integers is [1, 3, 4]. - The first missing positive integer is 2, since it\'s not in the array. Function Description Complete the `firstMissingPositive` function below. It has the following parameter(s): - `arr`: an array of integers Returns - int: the smallest missing positive integer Input Format The first line contains an integer n, the number of items in `arr`. Each of the next n lines contains an integer arr[i]. Constraints 1 leq n leq 10^5 -10^6 leq arr[i] leq 10^6 Sample Input 5 3 4 -1 1 5 Sample Output 2 Explanation - Transform the list to [1, 3, 4, 5]. - The numbers go from 1 to 5, but 2 is not present. Thus, the smallest missing positive integer is 2.","solution":"def firstMissingPositive(arr): Returns the smallest missing positive integer from the array. n = len(arr) for i in range(n): while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]: arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1] for i in range(n): if arr[i] != i + 1: return i + 1 return n + 1"},{"question":"Create a function that takes in two arguments: a list of integers and an integer target. The function should return a list of two integers from the list that add up to the target. If no such pair exists, return an empty list. Assume there will be only one such pair. Example: ``` Input: [2, 7, 11, 15], 9 Output: [2, 7] ``` Explanation: 2 + 7 = 9","solution":"def find_pair_with_sum(numbers, target): Returns a list of two integers from \'numbers\' that add up to \'target\'. If no such pair exists, returns an empty list. seen = {} for number in numbers: complement = target - number if complement in seen: return [complement, number] seen[number] = True return []"},{"question":"You are a construction project manager and need to schedule tasks for building a house. The tasks are dependent on each other, i.e., some tasks must be finished before starting others. You\'re given a list of tasks, and for each task, a list of tasks that must be finished before starting it. You need to determine a sequence in which you can complete all the tasks. If it\'s impossible to complete all the tasks due to a cyclic dependency, return an empty list. Input / Output: The first line contains an integer T denoting the number of tasks. Then follow T lines, each containing the task number followed by the number of tasks that must precede it and then the list of those tasks. Output a list of integers, representing the order in which to complete the tasks. If there is no valid order, output an empty list. SAMPLE INPUT 5 1 0 2 1 1 3 1 1 4 2 2 3 5 1 4 SAMPLE OUTPUT 1 2 3 4 5 Explanation: Task 1 has no prerequisites and can be done first. Task 2 and task 3 depend on task 1, so they can be done after task 1. Task 4 depends on tasks 2 and 3 and can only be done after both have been completed so it must come after both. Task 5 depends on task 4 and must be completed after task 4. Thus, one valid order is 1 2 3 4 5.","solution":"from collections import defaultdict, deque def find_build_order(T, tasks): Determines the sequence to complete tasks given dependencies. :param int T: Number of tasks :param list tasks: List of task dependencies in format [task_num, num_dependencies, *dependencies] :return: List of tasks in order to complete or empty list if a valid order is impossible :rtype: list # Building graph and in-degree count graph = defaultdict(list) in_degree = {i: 0 for i in range(1, T + 1)} for task in tasks: task_num = task[0] num_dependencies = task[1] for dependency in task[2:]: graph[dependency].append(task_num) in_degree[task_num] += 1 # Finding all nodes with 0 in-degree zero_in_degree = deque([node for node in in_degree if in_degree[node] == 0]) build_order = [] while zero_in_degree: current = zero_in_degree.popleft() build_order.append(current) for neighbor in graph[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) # Check if topological sort is complete if len(build_order) == T: return build_order else: return []"},{"question":"Chef has recently started investing in the stock market and is keen on calculating his potential profit. He wants to understand the maximum profit he could have made given the stock prices over a period of days. Assume Chef can buy and sell the stock only once. Given an array of stock prices where the i^{th} element represents the price of the stock on the i^{th} day, write a program to find the maximum profit Chef can achieve. If no profit can be achieved, return 0. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N representing the number of days. The second line contains N space-separated integers P_{1}, P_{2}, dots, P_{N} where P_{i} denotes the price of the stock on the i^{th} day. ------ Output ------ For each test case, print a single line containing one integer — the maximum profit Chef can achieve. ------ Constraints ------ 1 ≤ T ≤ 30 2 ≤ N ≤ 1000 1 ≤ P_{i} ≤ 10^5 for each valid i ------ Sample Input 1 ------ 2 6 7 1 5 3 6 4 5 7 6 4 3 1 ------ Sample Output 1 ------ 5 0 ------ Explanation 1 ------ Example case 1: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Example case 2: In this scenario, no transaction is done, so the maximum profit is 0.","solution":"def maximum_profit(T, test_cases): results = [] for i in range(T): N, prices = test_cases[i] min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price results.append(max_profit) return results"},{"question":"Given an array of integers, you need to sort the array in non-increasing order (i.e., from largest to smallest) by executing a sequence of exactly k swap operations. In a single swap operation, you can select any two distinct indices of the array and swap the elements at those indices. Your task is to determine the lexicographically smallest array that can be obtained after exactly k swap operations. An array A is lexicographically smaller than an array B if at the first position where A and B differ, the array A has a smaller element than the corresponding element in array B. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the elements of the array. The third line contains a single integer k (0 ≤ k ≤ n * (n - 1) / 2) — the number of swap operations you can perform. Output Print a single line containing n integers — the lexicographically smallest array that can be obtained after exactly k swap operations. Examples Input 5 3 5 2 4 1 3 Output 5 4 3 1 2 Input 4 4 3 2 1 1 Output 4 3 1 2 Input 3 1 2 3 0 Output 3 2 1 Explanation of the examples: In the first example, you can perform three swaps as follows to get the lexicographically smallest array in non-increasing order: 1. Swap elements at indices 1 and 4: [3, 5, 2, 4, 1] -> [3, 4, 2, 5, 1] 2. Swap elements at indices 0 and 1: [3, 4, 2, 5, 1] -> [4, 3, 2, 5, 1] 3. Swap elements at indices 1 and 3: [4, 3, 2, 5, 1] -> [5, 4, 3, 2, 1] In the second example, you can only perform one swap: 1. Swap elements at indices 2 and 3: [4, 3, 2, 1] -> [4, 3, 1, 2]","solution":"def lexicographically_smallest_non_increasing_array(arr, k): Returns the lexicographically smallest array that can be obtained after exactly k swap operations. n = len(arr) for i in range(n): for j in range(i + 1, n): # Swap the elements to potentially create a lexicographically smaller array arr[i], arr[j] = arr[j], arr[i] if k > 0: k -= 1 if k == 0: return sorted(arr, reverse=True) arr[j], arr[i] = arr[i], arr[j] # If we have exhausted k swaps, sort the array in non-increasing order return sorted(arr, reverse=True)"},{"question":"You are working on a text-editor application with some additional features. One of the features you need to implement is a special autocomplete functionality. Given a paragraph of text and a set of words, you are required to replace each occurrence of the words in the paragraph with their uppercase version. The components you need to handle include: 1. The paragraph is given as a single string, where words are separated by spaces. 2. The set of words to be capitalized is given as a list of strings. 3. Words should be matched with their exact variations (e.g., \\"cat\\" should not match with \\"caterpillar\\"). 4. The punctuation characters should be ignored while matching (e.g., \\"hello,\\" should match with \\"hello\\"). Write a function `autocomplete(paragraph: str, words: List[str]) -> str` that takes a paragraph and a list of words, and returns the modified paragraph with the specified words converted to uppercase. # Input - `paragraph` (a string): A string representing a paragraph of text (1 ≤ len(paragraph) ≤ 1000). - `words` (a list of strings): A list of words (1 ≤ len(words) ≤ 100) that need to be converted to uppercase in the paragraph. Each word in the list is 1 to 20 characters long and consists of lowercase alphabetical characters only. # Output - A single string representing the modified paragraph with specified words converted to uppercase. # Example ```python paragraph = \\"hello world, this is a simple example of autocomplete functionality.\\" words = [\\"hello\\", \\"example\\", \\"functionality\\"] print(autocomplete(paragraph, words)) ``` # Output ``` \\"HELLO world, this is a simple EXAMPLE of autocomplete FUNCTIONALITY.\\" ``` # Additional Notes - Punctuation characters are considered part of words but should be ignored while performing the matching. - Uppercasing should only be applied to whole words without partial or substring matches. Write the function in Python, and make sure it handles various edge cases efficiently.","solution":"import re from typing import List def autocomplete(paragraph: str, words: List[str]) -> str: Replaces occurrences of specific words in the paragraph with their uppercase version. Words match exactly and punctuation is ignored when matching. def repl(match): word = match.group() if word.strip(\'.,!?:;\\"\'()[]{}\').lower() in words_set: return word.upper() return word words_set = set(words) pattern = re.compile(r\'bw+b\') result = pattern.sub(repl, paragraph) return result"},{"question":"You are given a list of integers and you have to find a subset of these integers such that the bitwise AND of all elements in that subset is the maximum possible value. The definition of bitwise AND is as follows. Given two integers x and y, consider their binary representations (possibly with leading zeros): x_k ... x_2 x_1 x_0 and y_k ... y_2 y_1 y_0 (where k is any number so that all bits of x and y can be represented). Here, x_i is the i-th bit of the number x and y_i is the i-th bit of the number y. Let r = x & y be the result of the AND operation of x and y. Then r is defined as r_k ... r_2 r_1 r_0 where: r_i = left{ begin{aligned} 1, ~ if ~ x_i = 1 ~ and ~ y_i = 1 0, ~ otherwise end{aligned} right. Input The first line contains an integer n (1 ≤ n ≤ 10^6) — the number of integers in the list. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i < 2^{30}) — the integers in the list. Output Print one integer: the maximum possible bitwise AND value of any subset of the list. Examples Input 3 1 2 4 Output 0 Input 4 7 8 15 16 Output 8 Note In the first sample, the possible subsets are [1], [2], [4], [1,2], [1,4], [2,4], and the maximum bitwise AND among these subsets is 0. In the second sample, the highest bitwise AND value 8 is obtained by the subset [8, 15].","solution":"def find_max_bitwise_and(n, arr): Find the maximum bitwise AND value of any subset of the list of integers. :param n: int : Number of integers in the list :param arr: List[int] : List of integers :return: int : The maximum possible bitwise AND value of any subset max_and = 0 for i in range(30, -1, -1): tmp = max_and | (1 << i) count = sum((tmp & num) == tmp for num in arr) if count >= 2: # If there is at least one subset of size 2 with this max_and max_and = tmp return max_and"},{"question":"You are given an infinite binary tree where the root node is 1. Each node `n` has exactly two children: the left child is `2*n` and the right child is `2*n + 1`. Given an integer `k`, find the k-th node in the level-order traversal of this tree (1-based index). Example 1: Input: k = 5 Output: 3 Explanation: The first 5 nodes in the level-order traversal of the tree are: 1, 2, 3, 4, 5. The 5th node is 3. Example 2: Input: k = 10 Output: 8 Explanation: The first 10 nodes in the level-order traversal of the tree are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. The 10th node is 8. Your Task: You don\'t need to read or write anything. Your task is to complete the function KthNode() which takes an integer k as input parameter and returns the k-th node in the level-order traversal of the binary tree. Expected Time Complexity: O(1) Expected Space Complexity: O(1) Constraints: 1 <= k <= 10^9","solution":"def KthNode(k): Returns the k-th node in the level-order traversal of the binary tree. return k"},{"question":"Implement a function `remove_consecutive_duplicates` that takes a list of strings and removes consecutive duplicate entries. The function should return a new list with only the first instance of each sequence of identical elements. Here are some examples: ```python remove_consecutive_duplicates([\\"a\\", \\"a\\", \\"b\\", \\"b\\", \\"b\\", \\"c\\", \\"a\\", \\"a\\"]) == [\\"a\\", \\"b\\", \\"c\\", \\"a\\"] remove_consecutive_duplicates([\\"1\\", \\"1\\", \\"1\\", \\"2\\", \\"2\\", \\"3\\", \\"3\\", \\"3\\", \\"3\\", \\"2\\"]) == [\\"1\\", \\"2\\", \\"3\\", \\"2\\"] remove_consecutive_duplicates([\\"x\\", \\"x\\", \\"x\\", \\"x\\"]) == [\\"x\\"] remove_consecutive_duplicates([\\"p\\", \\"q\\", \\"r\\"]) == [\\"p\\", \\"q\\", \\"r\\"] remove_consecutive_duplicates([]) == [] ``` In the input list, if a string is repeated consecutively, only the first occurrence should be kept in the resultant list. This will ensure any runs of duplicates are collapsed into a single instance.","solution":"def remove_consecutive_duplicates(input_list): Returns a new list with consecutive duplicate entries removed from the input list. if not input_list: return [] result = [input_list[0]] for i in range(1, len(input_list)): if input_list[i] != input_list[i-1]: result.append(input_list[i]) return result"},{"question":"John went hiking on a mountain trail and took notes of the temperatures at various checkpoints along his path. The temperatures recorded were in degrees Celsius and strictly increasing at each subsequent checkpoint. However, due to an unexpected heatwave, the temperature at each checkpoint increased by a unique integer amount. John wants to understand how the temperature differences between consecutive checkpoints change after the heatwave. After the heatwave, let t_j (1 leq j leq m) be the new temperatures at the checkpoints. It is known that the temperature at each checkpoint increased by an integer value k_j such that t_j = c_j + k_j where c_j were the original temperatures. Given the recorded temperatures before and after the heatwave, help John calculate the difference in temperatures between consecutive checkpoints after the heatwave. -----Input----- The first line contains a single integer m (1 leq m leq 10^6). The second line contains m integers c_1, c_2, dots, c_m (-1000 leq c_1 < c_2 < dots < c_m leq 1000) — the original temperatures. The third line contains m integers t_1, t_2, dots, t_m (-1000 leq t_1 < t_2 < dots < t_m leq 1000) — the temperatures after the heatwave. -----Output----- Output m-1 integers, where the j-th integer is the temperature difference between the (j+1)-th and j-th checkpoints after the heatwave. -----Example----- Input 4 2 6 7 10 5 9 10 12 Output 4 1 2 -----Note----- Initially, the temperatures at checkpoints were 2, 6, 7, 10. After the heatwave, the temperatures became 5, 9, 10, 12. The differences between consecutive checkpoints after the heatwave are: - 9 - 5 = 4 - 10 - 9 = 1 - 12 - 10 = 2 So, the output is 4, 1, 2.","solution":"def calculate_temp_differences(m, original_temps, new_temps): Calculate the difference in temperatures between consecutive checkpoints after the heatwave. Parameters: - m (int): The number of checkpoints. - original_temps (list of int): The original temperatures at the checkpoints. - new_temps (list of int): The new temperatures at the checkpoints after the heatwave. Returns: - list of int: A list of differences in temperatures between consecutive checkpoints after the heatwave. temp_differences = [new_temps[i+1] - new_temps[i] for i in range(m - 1)] return temp_differences"},{"question":"You are given an infinite 2D plane with a grid arrangement. Each cell in the grid has specific coordinates (x, y) where x and y denote the horizontal and vertical distances from the origin (0, 0), respectively. Suppose you are tasked with opening a shop on this grid, and you want to check if your chosen cell location is even or odd in both its x and y coordinates. The grid\'s shop categorization is as follows: 1. If both x and y coordinates of the cell are even, the shop sells groceries. 2. If both x and y coordinates of the cell are odd, the shop sells electronics. 3. If one of the coordinates is even and the other is odd, the shop sells clothing. Your task is to write a program that takes as input the coordinates of a cell and outputs the type of shop that would exist at that location. Input: The input starts with T denoting the number of test cases. Next T lines contain space-separated coordinates x, y which are the coordinates of the cell where you are considering opening the shop. Output: For each test case, output the type of shop that would exist at that cell, choosing among \\"Groceries\\", \\"Electronics\\", or \\"Clothing\\". Constraints: 1 ≤ T ≤ 100 -10^5 ≤ x, y ≤ 10^5 Example Input: 4 2 4 3 5 6 7 5 5 Example Output: Groceries Clothing Clothing Electronics Note: - Even numbers are those divisible by 2 with no remainder. - Odd numbers have a remainder of 1 when divided by 2.","solution":"def determine_shop_type(T, coordinates): Determine the type of shop based on given coordinates. Parameters: T (int): Number of test cases. coordinates (list of tuples): Each tuple contains x and y coordinates. Returns: list of str: List containing shop type for each coordinate. shop_types = [] for x, y in coordinates: if x % 2 == 0 and y % 2 == 0: shop_types.append(\\"Groceries\\") elif x % 2 == 1 and y % 2 == 1: shop_types.append(\\"Electronics\\") else: shop_types.append(\\"Clothing\\") return shop_types"},{"question":"You are given two strings, s1 and s2. The task is to determine the smallest window in s1 which contains all the characters of s2 (including duplicates). If no such window exists, return an empty string. If there are multiple such windows of the same length, return the one with the leftmost starting index. Example 1: Input: s1 = \\"ADOBECODEBANC\\" s2 = \\"ABC\\" Output: \\"BANC\\" Explanation: The smallest window containing all characters of s2 is \\"BANC\\". Example 2: Input: s1 = \\"a\\" s2 = \\"a\\" Output: \\"a\\" Explanation: The smallest window containing all characters of s2 is \\"a\\". Your Task: You need to complete the function smallest_window that takes two strings s1 and s2 as input and returns the smallest window in s1 which contains all characters of s2. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s1), len(s2) <= 10^5 Both s1 and s2 consist of lowercase and uppercase English letters.","solution":"def smallest_window(s1, s2): from collections import Counter if not s1 or not s2 or len(s2) > len(s1): return \\"\\" s2_count = Counter(s2) required_chars = len(s2_count) l, r = 0, 0 formed = 0 window_counts = {} min_length = float(\\"inf\\") min_window = \\"\\" while r < len(s1): char = s1[r] window_counts[char] = window_counts.get(char, 0) + 1 if char in s2_count and window_counts[char] == s2_count[char]: formed += 1 while l <= r and formed == required_chars: char = s1[l] if r - l + 1 < min_length: min_length = r - l + 1 min_window = s1[l:r + 1] window_counts[char] -= 1 if char in s2_count and window_counts[char] < s2_count[char]: formed -= 1 l += 1 r += 1 return min_window"},{"question":"A group of friends decided to play a game called \\"Rope Tugging\\". They stand evenly spaced around a large circle, and each of them is holding a rope tied to an object in the center of the circle. The goal of the game is to find the name of the friend who pulls the object closest to the exact center. Each friend has a strength rating denoted in a list. All friends pull the object simultaneously with a force equal to their strength rating. The position where the object comes to rest is determined by the weighted average of each friend\'s position on the circle, weighted by their strength. The object comes to rest at the angle θ on the circle, where θ is calculated as follows: θ = arctan left(frac{sum_{i=0}^{n-1} s_i sin left(frac{2pi i}{n}right)}{sum_{i=0}^{n-1} s_i cos left(frac{2pi i}{n}right)}right) where: - ( n ) is the number of friends, - ( s_i ) is the strength of the i-th friend, - Friends are labeled from 0 to ( n-1 ) and stand in a clockwise manner around the circle. Help the friends find out the name of the friend who pulls the object closest to the center. Input: - The first line contains a single integer n (3 ≤ n ≤ 1000) – the number of friends. - The second line contains n space-separated integers ( s_0, s_1, ..., s_{n-1} ) (1 ≤ ( s_i ) ≤ 1000) – the strength of each friend. Output: - The name (zero-based index) of the friend who pulls the object closest to the center. Example: Input: 4 10 20 30 40 Output: 3","solution":"import math def closest_friend_index(n, strengths): x_sum = 0 y_sum = 0 for i in range(n): x_sum += strengths[i] * math.cos(2 * math.pi * i / n) y_sum += strengths[i] * math.sin(2 * math.pi * i / n) theta = math.atan2(y_sum, x_sum) if theta < 0: theta += 2 * math.pi closest_index = round(n * theta / (2 * math.pi)) % n return closest_index def find_closest_friend(n, strengths): index = closest_friend_index(n, strengths) return strengths.index(max(strengths[index:] + strengths[:index]))"},{"question":"You are given a grid with N rows and M columns. Each cell of the grid contains a single lowercase letter. Your task is to find the length of the longest subsequence of characters that can be formed by moving right or down from the top-left corner of the grid to the bottom-right corner. Note that each move must go either directly to the right neighboring cell or directly to the cell below. **Input Format:** - The first line contains two integers N and M, the number of rows and columns in the grid. - The next N lines contain M lowercase letters each, representing the grid. **Output Format:** - Output a single integer, the length of the longest subsequence. **Constraints:** - 1 ≤ N, M ≤ 1000 **Sample Input 1:** ``` 3 3 abc def ghi ``` **Sample Output 1:** ``` 5 ``` **Explanation 1:** The longest subsequence can be formed as follows: a -> b -> c -> f -> i, with length 5. **Sample Input 2:** ``` 2 2 ac bd ``` **Sample Output 2:** ``` 3 ``` **Explanation 2:** The longest subsequence can be formed as follows: a -> c -> d, with length 3. # Note: Ensure to handle the large sizes of N and M efficiently in your solution. Use dynamic programming or memoization to optimize the computational steps if necessary.","solution":"def longest_subsequence_length(grid): Returns the length of the longest subsequence of characters that can be formed by moving right or down from the top-left corner of the grid to the bottom-right corner. N = len(grid) M = len(grid[0]) # Initialize a 2D list to store the lengths of subsequences dp = [[0] * M for _ in range(N)] # Start from the top-left corner dp[0][0] = 1 # Fill the dp table for i in range(N): for j in range(M): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + 1) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + 1) # The answer is in the bottom-right corner return dp[N-1][M-1]"},{"question":"You have been tasked with organizing a schedule for a community center, where various activities are planned throughout the week. Each activity has specific time slots during which it can take place, and each participant has a preferred time slot for their participation. Your objective is to develop a schedule that maximizes the number of activities that can be held without any conflicts, considering the available time slots and participants\' preferences. -----Input----- The first line contains two integers N and T, satisfying N geq 1 and T geq 1 as well as N cdot T leq 10^6. These denote the total number of activities and the number of time slots, respectively. The following N lines each contain T integers per line, where the i-th line denotes the preference list of the i-th activity, starting with the most preferred time slot and ending with the least preferred. The time slots are numbered 1 through T. No two activities have the exact same preference lists. -----Output----- Output the maximum number of activities that can be held without any conflicts, using the following format: - One line with an integer A: the maximum number of activities that can be scheduled. -----Examples----- Sample Input 1: 3 5 3 1 2 5 4 2 4 1 5 3 1 5 4 2 3 Sample Output 1: 3 Sample Input 2: 4 6 1 3 5 2 4 6 6 2 1 4 3 5 5 1 2 6 4 3 3 4 2 1 5 6 Sample Output 2: 4","solution":"def schedule_activities(N, T, preferences): scheduled = [False] * (T + 1) activity_count = 0 for preference in preferences: for slot in preference: if not scheduled[slot]: scheduled[slot] = True activity_count += 1 break return activity_count # Read input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) T = int(data[1]) preferences = [] idx = 2 for i in range(N): preference = list(map(int, data[idx:idx + T])) preferences.append(preference) idx += T result = schedule_activities(N, T, preferences) print(result)"},{"question":"In an online educational platform, users can create their own learning paths by completing courses. Each course is connected to other courses it depends on, i.e., a course can only be started once all its prerequisite courses are completed. You need to determine the order in which the courses should be taken to finish all of them. If there is no valid order, the system should state that the courses cannot be completed. Each course is represented by a unique integer ID. The prerequisite relationships are given as pairs where the first element is a course and the second element is one of its prerequisites. -----Input----- Input starts with two integers 1 leq C leq 1000 and 0 leq R leq 10000 on a single line, denoting the number of courses and the number of prerequisite relationships, respectively. The next R lines each contain a pair of integers c_1, c_2 indicating that course c_1 depends on course c_2. -----Output----- Output should be a single line containing the order in which the courses should be taken. If there are multiple valid orders, output any one of them. If no valid order exists, output \\"Cannot complete all courses.\\" -----Examples----- Sample Input 1: 4 3 2 1 3 2 4 3 Sample Output 1: 1 2 3 4 Sample Input 2: 2 2 1 2 2 1 Sample Output 2: Cannot complete all courses","solution":"from collections import defaultdict, deque def find_course_order(num_courses, prerequisites): # Create an adjacency list for all courses and a dictionary for in-degree graph = defaultdict(list) in_degree = {i: 0 for i in range(1, num_courses + 1)} # Fill the graph and in-degree based on prerequisites for course, prereq in prerequisites: graph[prereq].append(course) in_degree[course] += 1 # Initialize a queue with all courses having in-degree of 0 queue = deque([course for course in in_degree if in_degree[course] == 0]) course_order = [] while queue: current_course = queue.popleft() course_order.append(current_course) for next_course in graph[current_course]: in_degree[next_course] -= 1 if in_degree[next_course] == 0: queue.append(next_course) if len(course_order) == num_courses: return course_order else: return \\"Cannot complete all courses.\\" def solve(c, r, prerequisites): return find_course_order(c, prerequisites)"},{"question":"Implement a function named `countPaths` that counts the number of ways to reach the bottom-right corner of an `m x n` grid, starting from the top-left corner. You are only allowed to move down or right at any point in time. Example 1: Input: m = 3 n = 3 Output: 6 Explanation: From the top-left corner, there are 6 possible ways to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right Example 2: Input: m = 2 n = 2 Output: 2 Explanation: From the top-left corner, there are 2 possible ways to reach the bottom-right corner: 1. Right -> Down 2. Down -> Right Your Task: You only need to implement the given function `countPaths(m, n)` which returns the count of the number of ways to reach the bottom-right corner of the grid. Do not read input, instead use the arguments given in the function. Expected Time Complexity: O(m*n) Expected Auxiliary Space: O(m*n) Constraints: 1 <= m, n <= 100","solution":"def countPaths(m, n): Returns the number of ways to reach the bottom-right corner of an m x n grid from the top-left corner. Moves are restricted to down and right only. # Create a 2D list to store the number of paths to each cell initialized to 1 for the first row and column. dp = [[1] * n for _ in range(m)] # Calculate number of ways for each cell by summing the ways from the cell above and the cell to the left for i in range(1, m): for j in range(1, n): dp[i][j] = dp[i - 1][j] + dp[i][j - 1] # Return the number of ways to reach the bottom-right cell return dp[m - 1][n - 1]"},{"question":"Given an array of integers, find and return the minimum sum that can be obtained by summing exactly k consecutive elements in the array. The input to the function will include the array and the integer k. For example: Input: arr = [10, 4, 2, 5, 6, 3, 8], k = 3 Output: 11 Explanation: The possible sums of consecutive elements of length 3 are (10+4+2=16), (4+2+5=11), (2+5+6=13), (5+6+3=14), and (6+3+8=17). Hence, the minimum sum is 11. Input: arr = [1, 1, 1, 1], k = 2 Output: 2 Explanation: The possible sums of consecutive elements of length 2 are (1+1=2), (1+1=2), and (1+1=2). Hence, the minimum sum is 2. Your Task: You need to complete a function `minSumConsecutive()` that takes an array of integers and an integer k and returns an integer representing the minimum sum of `k` consecutive elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 2 ≤ k ≤ N ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4, where arr[i] is the element of the array and N is the length of the array","solution":"def minSumConsecutive(arr, k): Return the minimum sum of `k` consecutive elements in the array. :param arr: List[int] - Input array of integers :param k: int - Number of consecutive elements to sum :return: int - The minimum sum of `k` consecutive elements n = len(arr) if n < k: return None # Calculate the sum of the first `k` elements current_sum = sum(arr[:k]) min_sum = current_sum # Iterate through the array from index `k` to `n-1` for i in range(k, n): # Slide the window right by subtracting the element that is left behind and # adding the new element that comes into the window current_sum += arr[i] - arr[i - k] if current_sum < min_sum: min_sum = current_sum return min_sum"},{"question":"You are given a grid with N rows and M columns. Each cell of the grid is either empty (denoted by \'.\') or has an obstacle (denoted by \'#\'). You start at the top-left corner of the grid (i.e., cell (1,1)) and want to reach the bottom-right corner (i.e., cell (N,M)). You can only move right or down from your current cell. Find the number of different possible paths from the start cell to the destination cell. Since the number of paths can be large, output the result modulo 10^9+7. ------ Input Format ------ - The first line contains T - the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and M - the number of rows and columns of the grid. - The next N lines each contain M characters, denoting the grid. ------ Output Format ------ For each test case, output a single line containing the number of different possible paths to reach the destination cell modulo 10^9+7. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 500 - The grid contains only characters \'.\' and \'#\'. - The sum of N*M over all test cases does not exceed 250000. ----- Sample Input 1 ------ 2 3 3 ... .#. ... 3 3 ..# .#. ..# ----- Sample Output 1 ------ 2 0 ----- Explanation 1 ------ Test Case 1: There are two possible paths: 1. Right, Right, Down, Down 2. Down, Down, Right, Right Test Case 2: It is not possible to reach the bottom-right corner because of obstacles blocking all possible paths.","solution":"MOD = 10**9 + 7 def count_paths(grid, N, M): # Initialize DP table dp = [[0] * M for _ in range(N)] # Start point if grid[0][0] == \'.\': dp[0][0] = 1 # Fill the DP table for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] dp[i][j] %= MOD return dp[N-1][M-1] def solve(test_cases): results = [] for grid_data in test_cases: N, M, grid = grid_data results.append(count_paths(grid, N, M)) return results"},{"question":"Write a program to determine the number of vowels and consonants in a given string. For simplicity, consider the input string to contain only uppercase and lowercase letters. Input The input is given as a single line containing the string s (1 ≤ |s| ≤ 100), where |s| is the length of the string. Output Output two integers separated by a space: the number of vowels and the number of consonants in the string. Examples Input hello Output 2 3 Input world Output 1 4 Input Programming Output 3 8","solution":"def count_vowels_and_consonants(s): Returns the number of vowels and consonants in the input string s. vowels = \\"aeiouAEIOU\\" num_vowels = sum(1 for char in s if char in vowels) num_consonants = len(s) - num_vowels return num_vowels, num_consonants"},{"question":"Given an array of positive integers, determine whether you can reorder the array such that the absolute difference between any two adjacent numbers is always greater than 1. If such a reordering is possible, output \\"YES\\", otherwise output \\"NO\\". -----Input----- The first line contains an integer n (1 ≤ n ≤ 100000) – the number of elements in the array. The second line contains n positive integers separated by spaces – the elements of the array, each number is between 1 and 10^9. -----Output----- Output \\"YES\\" if it\'s possible to reorder the array according to the given condition, otherwise output \\"NO\\". -----Examples----- Input 5 1 3 6 9 12 Output YES Input 4 1 2 3 4 Output NO Input 3 2 4 6 Output YES -----Note----- In the first example, one possible reordering is [1, 3, 6, 9, 12]. The absolute differences between each pair of adjacent numbers are [2, 3, 3, 3], all of which are greater than 1. In the second example, it\'s impossible to reorder the array [1, 2, 3, 4] to satisfy the condition as the minimum difference between any two numbers will always be 1. In the third example, the array [2, 4, 6] already satisfies the condition without needing any reordering.","solution":"def can_reorder_with_condition(n, arr): Determines if array can be reordered such that the absolute difference between any two adjacent elements is always greater than 1. # Sort the array arr.sort() # Check if there\'s any adjacent pair with absolute difference <= 1 for i in range(1, n): if arr[i] - arr[i - 1] <= 1: return \\"NO\\" return \\"YES\\""},{"question":"You are given a string `s`, which is supposed to represent a password. To be considered valid, a password must adhere to the following rules: 1. It must be between 8 to 20 characters in length, inclusive. 2. It must contain at least one lowercase letter (`a`-`z`), one uppercase letter (`A`-`Z`), one digit (`0`-`9`), and one special character from the set: `!@#%^&*()_+`. 3. It should not contain any spaces or tabs. Write a function to check if the string `s` is a valid password. # Input: - The only line of input contains the string `s`. The string may contain any characters with ASCII codes from 32 to 126, inclusive. The string length is between 1 and 100, inclusive. # Output: - Print \\"VALID\\" if the string `s` is a valid password, otherwise print \\"INVALID\\". # Example: Input: ``` Password123! ``` Output: ``` VALID ``` Input: ``` pass word123! ``` Output: ``` INVALID ``` Input: ``` Pass123_ ``` Output: ``` INVALID","solution":"import re def is_valid_password(s): Checks if the string `s` is a valid password. A valid password must: - Be between 8 to 20 characters in length, inclusive. - Contain at least one lowercase letter, one uppercase letter, one digit, and one special character from the set: `!@#%^&*()_+`. - Not contain any spaces or tabs. Prints \\"VALID\\" if the password is valid, otherwise prints \\"INVALID\\". if not 8 <= len(s) <= 20: return \\"INVALID\\" if re.search(r\'[a-z]\', s) is None: return \\"INVALID\\" if re.search(r\'[A-Z]\', s) is None: return \\"INVALID\\" if re.search(r\'[0-9]\', s) is None: return \\"INVALID\\" if re.search(r\'[!@#%^&*()_+]\', s) is None: return \\"INVALID\\" if re.search(r\'[s]\', s) is not None: return \\"INVALID\\" return \\"VALID\\""},{"question":"In the mystical land of Codelandia, the Queen has a peculiar custom: every year, she hosts a grand festival where the finest code developers from all around the kingdom compete to solve her challenging riddles. This year, the theme is \\"Shifting Arrays,\\" and contestants are required to demonstrate their mastery over array manipulations. The Queen presents the following challenge: given an array of integers, contestants must left-rotate the array by a specified number of positions. A left rotation operation on an array shifts each element of the array one unit to the left, and the first element of the array moves to the end. For example, if the array is `[1, 2, 3, 4, 5]` and the number of left rotations is `2`, the function should return `[3, 4, 5, 1, 2]`. -----Input----- The first line of input contains two integers n and d (1 leq n leq 10^5, 0 leq d leq n), where n is the number of elements in the array and d is the number of left rotations to be performed. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 leq a_i leq 10^9), representing the elements of the array. -----Output----- Output a single line containing n space-separated integers, the array after d left rotations. -----Example----- Sample Input 1: 5 2 1 2 3 4 5 Sample Output 1: 3 4 5 1 2 Sample Input 2: 7 3 10 20 30 40 50 60 70 Sample Output 2: 40 50 60 70 10 20 30 For those who solve this riddle, the Queen promises great rewards and everlasting glory in the annals of Codelandia!","solution":"def left_rotate_array(n, d, arr): Performs d left rotations on the array arr of length n Parameters: n (int): Number of elements in the array d (int): Number of left rotations to be performed arr (list): List of integers representing the array Returns: list: The array after d left rotations d = d % n # To handle cases when d >= n return arr[d:] + arr[:d]"},{"question":"You are given a string s consisting of lowercase English letters. You need to determine the length of the longest subsequence of s such that any character appears at most twice in the subsequence. A *subsequence* is a sequence that can be derived from another sequence by deleting some elements (possibly none) without changing the order of the remaining elements. Implement the function: ```python def longest_subsequence_with_twice_chars(s: str) -> int: pass ``` ------ Input Format ------ - The first line of the input contains a single string s. ------ Output Format ------ - Print a single line containing one integer - the length of the longest subsequence where any character appears at most twice. ------ Constraints ------ 1 ≤ text{length of } s ≤ 10^{6} ----- Sample Input 1 ------ aabbcccc ----- Sample Output 1 ------ 6 ----- Explanation 1 ------ The longest subsequence where any character appears at most twice is \\"aabbcc\\" or \\"aaccbb\\" or similar variations. The length of such a subsequence is 6. Note that although \'c\' appears 4 times in the original string, we can\'t include it more than twice in the subsequence.","solution":"def longest_subsequence_with_twice_chars(s: str) -> int: Returns the length of the longest subsequence where any character appears at most twice. from collections import Counter # Count the occurrences of each character char_count = Counter(s) # Calculate the maximum possible length of a subsequence where each character appears at most twice subsequence_length = sum(min(count, 2) for count in char_count.values()) return subsequence_length"},{"question":"Karen is a software developer at a startup company. She has been given the task to optimize a feature based on user activity data from a mobile application. Karen knows the number of users logging into the application each day for the past n days, recorded in an array users[] where users[i] represents the number of users on the i-th day (0-indexed). Karen wants to find out the maximum number of consecutive days with a unique number of users logging in each day. In other words, she needs to find the maximum length of the subarray such that all elements in this subarray are unique. Help Karen determine the length of this longest subarray of unique daily users. Input The first line contains a single integer n (1 ≤ n ≤ 10^6) — the number of days. The second line contains n integers users_0, users_1, ..., users_{n-1} (1 ≤ users_i ≤ 10^6), where users_i indicates the number of users on the i-th day. Output A single integer representing the length of the longest subarray with all unique elements. Examples Input 7 5 3 3 1 6 9 2 Output 5 Input 5 1 2 3 4 5 Output 5 Input 6 1 2 2 2 2 2 Output 2 Note In the first example, the longest subarray with all unique elements is [3, 1, 6, 9, 2]. In the second example, all elements in the array are unique, so the length is 5. In the third example, the longest subarray with unique elements can be either [1, 2] from the start or any of the other single 2s following the first two elements.","solution":"def longest_unique_subarray_length(n, users): Returns the length of the longest subarray with all unique elements. user_indices = {} start = 0 max_length = 0 for i in range(n): if users[i] in user_indices and user_indices[users[i]] >= start: start = user_indices[users[i]] + 1 user_indices[users[i]] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Ricky loves creating patterns using asterisks (\'*\'). Given a positive integer n, help Ricky create a diamond pattern with 2n-1 rows. -----Input----- The input contains a single integer n (1 ≤ n ≤ 100). -----Output----- Print a diamond pattern with 2n-1 rows using asterisks (\'*\'). Each row should contain exactly 2n-1 characters where asterisks form the shape of the diamond and spaces fill the remaining parts. -----Examples----- Input 3 Output * *** ***** *** * Input 4 Output * *** ***** ******* ***** *** * Input 2 Output * *** *","solution":"def print_diamond(n): Prints a diamond pattern using asterisks (\'*\') with 2n-1 rows. Each row contains exactly 2n-1 characters. for i in range(1, 2 * n): if i <= n: stars = 2 * i - 1 else: stars = 2 * (2 * n - i) - 1 spaces = n - (stars // 2) - 1 print(\' \' * spaces + \'*\' * stars + \' \' * spaces)"},{"question":"A burgeoning tech startup is designing a new social media platform. Users are represented by unique ID numbers and can have a list of friends, represented as a dictionary where keys are user IDs, and values are lists of friend IDs. The company wants to implement a functionality to find the shortest path of friendship connections between two specific users. Write a function findShortestPath(start, end, network) that takes three arguments: the start user\'s ID, the end user\'s ID, and the network dictionary. The function should return a list of user IDs that form the shortest path from the start user to the end user, including both the start and end IDs. If no such path exists, return an empty list. Example: ``` network = { 1: [2, 3], 2: [1, 4, 5], 3: [1, 6], 4: [2], 5: [2, 6], 6: [3, 5] } findShortestPath(1, 6, network) ``` Expected Output: [1, 3, 6]","solution":"from collections import deque def findShortestPath(start, end, network): Finds the shortest path of friendship connections between two users. :param start: int, the start user\'s ID :param end: int, the end user\'s ID :param network: dict, a dictionary where keys are user IDs and values are lists of friend IDs :return: a list of user IDs forming the shortest path from start to end inclusive; or an empty list if no path exists if start == end: return [start] # BFS to find the shortest path queue = deque([(start, [start])]) visited = set() while queue: current_node, path = queue.popleft() visited.add(current_node) for neighbor in network.get(current_node, []): if neighbor in visited: continue if neighbor == end: return path + [neighbor] queue.append((neighbor, path + [neighbor])) visited.add(neighbor) return []"},{"question":"Mira loves to collect gemstones. Each type of gemstone has a different characteristic. She is curious about finding the best collection by merging her gemstones with her friend\'s collection. Each gemstone can be represented as a string of characters, where each character denotes a different property. You are given two lists of gemstones. You need to find the longest gemstone which can be formed by merging two gemstones, one from each list, such that no characters are repeated within the resulting gemstone. Input: The first line contains an integer N, the number of gemstones in the first list. Each of the next N lines contains a string. The next line contains an integer M, the number of gemstones in the second list. Each of the next M lines contains a string. Output: Print the longest gemstone\'s length that can be formed. If multiple gemstones of the same length are found, print any one of them. If no valid gemstone can be formed, print -1. Constraints: 1 ≤ N, M ≤ 1000 1 ≤ length of each gemstone ≤ 100 SAMPLE INPUT 3 ab cd efg 3 hij klm nop SAMPLE OUTPUT 6","solution":"def longest_combined_gemstone_length(gemstones_list1, gemstones_list2): def is_valid_combination(gem1, gem2): return len(set(gem1).union(set(gem2))) == len(gem1) + len(gem2) max_length = -1 for gem1 in gemstones_list1: for gem2 in gemstones_list2: if is_valid_combination(gem1, gem2): combined_length = len(gem1) + len(gem2) if combined_length > max_length: max_length = combined_length return max_length # Example usage if __name__ == \\"__main__\\": gemstones_list1 = [\'ab\', \'cd\', \'efg\'] gemstones_list2 = [\'hij\', \'klm\', \'nop\'] print(longest_combined_gemstone_length(gemstones_list1, gemstones_list2))"},{"question":"John is a budding artist and is fascinated by patterns and sequences. He has recently come across the concept of Arithmetic Progressions (AP). An AP is a sequence of numbers in which the difference of any two successive members is a constant. John decides to create a sequence by choosing any number `a` as the first term and a positive integer `d` as the common difference. He then constructs the sequence and wishes to know if a particular number `x` appears in it or not. Given `a`, `d`, and `x`, help John determine if `x` is present in the sequence generated by using `a` as the first term and `d` as the common difference. Input The input consists of multiple test cases. The first line contains one integer `t` (1 ≤ t ≤ 10^5) — the number of test cases. Each test case consists of three integers `a`, `d`, and `x` (1 ≤ a, d, x ≤ 10^9). Output For each test case, output \\"YES\\" if `x` is part of the sequence, otherwise output \\"NO\\". Example Input 4 1 2 5 3 3 9 7 7 35 2 4 10 Output NO YES YES NO Note In the first test case, the sequence generated from `a=1` and `d=2` is 1, 3, 5, 7, ..., and 5 is not part of this sequence. For the second test case, the sequence from `a=3` and `d=3` is 3, 6, 9, 12, ..., and 9 is part of the sequence.","solution":"def is_in_ap_sequence(a, d, x): Returns \'YES\' if x is part of the AP sequence that starts with `a` and has common difference `d`, otherwise returns \'NO\'. if x < a: return \\"NO\\" return \\"YES\\" if (x - a) % d == 0 else \\"NO\\" def process_queries(queries): results = [] for a, d, x in queries: results.append(is_in_ap_sequence(a, d, x)) return results"},{"question":"A company is organizing a tournament where players compete against each other in various games. Each player has a skill level, represented by an integer. The company wants to organize the players into pairs for the next round of the tournament. The goal is to minimize the absolute difference in skill levels between paired players, as this will lead to more balanced matches. Write a function that takes a list of integers representing the skill levels of players and returns a list of tuples, each containing two integers, representing the pairs of players. If there is an odd number of players, the unpaired player should be left alone. -----Input----- - A list of integers representing the skill levels of the players. The length of the list will be between 1 and 1000. -----Output----- - A list of tuples, where each tuple contains two integers representing the paired players. If there is an odd number of players, the last element in the list will be an integer representing the unpaired player. -----Examples----- Input [3, 8, 2, 7, 5] Output [(2, 3), (5, 7), 8] Input [10, 1, 7, 3, 2] Output [(1, 2), (3, 7), 10] Input [4, 9, 5, 2] Output [(2, 4), (5, 9)] Input [6, 2] Output [(2, 6)]","solution":"def organize_pairs(skill_levels): Organizes the players into pairs to minimize the absolute difference in skill levels between paired players. Parameters: - skill_levels (list): List of integers representing the skill levels of the players. Returns: - List of tuples/lists: Pair of integers or a single integer if there are odd players. skill_levels.sort() pairs = [] while len(skill_levels) > 1: pair = (skill_levels.pop(0), skill_levels.pop(0)) pairs.append(pair) if skill_levels: pairs.append(skill_levels[0]) return pairs"},{"question":"Given a string s, you are allowed to delete at most one character. Check if it can become a palindrome after deleting at most one character. A string is a palindrome when it reads the same forward and backward. For example, \\"madam\\" and \\"racecar\\" are palindromes. -----Input----- The first line contains a single integer t (1 le t le 10^3), the number of test cases. Each of the next t lines contains a string s (1 le |s| le 10^5). The sum of the lengths of all strings does not exceed 10^6. -----Output----- For each test case, return \\"YES\\" if it is possible to make the string a palindrome by deleting at most one character, otherwise return \\"NO\\". -----Examples----- Input 3 abba racecar abcca Output YES YES YES -----Note----- Test case 1: The string \\"abba\\" is already a palindrome. Test case 2: The string \\"racecar\\" is already a palindrome. Test case 3: The string \\"abcca\\" can be transformed into a palindrome by deleting one of the \'c\' characters to make it \\"abca\\", or deleting \'b\' to make it \\"acca\\".","solution":"def valid_palindrome(s): This function checks if the given string s can be turned into a palindrome by deleting at most one character. def is_palindrome(x): return x == x[::-1] left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: # If there\'s a mismatch, check the substrings without one of the mismatched characters return is_palindrome(s[left:right]) or is_palindrome(s[left + 1:right + 1]) left += 1 right -= 1 return True def can_be_palindrome_after_removal(t, test_cases): results = [] for s in test_cases: results.append(\\"YES\\" if valid_palindrome(s) else \\"NO\\") return results"},{"question":"Given a binary tree, you need to perform the following task: - Traverse the tree using level-order traversal (breadth-first traversal). - For each level of the binary tree, find the minimum and maximum values. - If the difference between the maximum and minimum values exceeds a given threshold, note the level number. Example 1: Input: ``` 5 / 3 8 / / 1 4 7 9 ``` Threshold = 4 Output: 1 Explanation: Level 0: Min = 5, Max = 5 (Difference = 0, within threshold) Level 1: Min = 3, Max = 8 (Difference = 5, exceeds threshold) Level 2: Min = 1, Max = 9 (Difference = 8, exceeds threshold) Levels 1 and 2 exceed the threshold, but the first level to do so is Level 1. Example 2: Input: ``` 10 / 2 10 / 1 3 20 / 15 30 ``` Threshold = 10 Output: 2 Explanation: Level 0: Min = 10, Max = 10 (Difference = 0, within threshold) Level 1: Min = 2, Max = 10 (Difference = 8, within threshold) Level 2: Min = 1, Max = 20 (Difference = 19, exceeds threshold) Level 3: Min = 15, Max = 30 (Difference = 15, exceeds threshold) Level 2 is the first level to exceed the threshold. Your Task: You don\'t have to read input or print anything. Your task is to complete the function `findThresholdExceedLevel(TreeNode root, int threshold)` which takes the root of the binary tree and the threshold value as inputs and returns the first level number where the difference between the maximum and the minimum values exceeds the given threshold. Note: You may assume that the level numbers start from 0. If no level exceeds the threshold, return -1. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: - 1 <= Number of Nodes <= 10^5 - -10^3 <= Node_value <= 10^3 - 0 <= Threshold <= 10^3","solution":"from collections import deque class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def findThresholdExceedLevel(root, threshold): if not root: return -1 queue = deque([root]) level = 0 while queue: level_size = len(queue) current_level_values = [] for _ in range(level_size): node = queue.popleft() current_level_values.append(node.value) if node.left: queue.append(node.left) if node.right: queue.append(node.right) min_val = min(current_level_values) max_val = max(current_level_values) if max_val - min_val > threshold: return level level += 1 return -1"},{"question":"You are participating in a game development project and are responsible for implementing some core mechanics. One of the mechanics involves calculating the scores for different players based on their actions. Each action has a different point value, and each player can perform one or multiple types of actions. The same player can perform the same action multiple times. Your task is to write a function that calculates the total score for each player, based on their performed actions. The point values for each action are provided in a dictionary, and the list of actions performed by each player is provided as a list of dictionaries, where each dictionary contains the player\'s name and a list of actions they performed. Each action is represented as a string. Your function should return a dictionary where the keys are the players\' names, and the values are their total scores. Your function will have two parameters: the first parameter is a dictionary representing the point values for each action, and the second parameter is a list of dictionaries representing the actions performed by each player. example points dictionary: { \\"jump\\": 10, \\"run\\": 5, \\"shoot\\": 20 } example actions list: [ { \\"name\\": \\"Alice\\", \\"actions\\": [\\"jump\\", \\"run\\", \\"shoot\\", \\"jump\\"] }, { \\"name\\": \\"Bob\\", \\"actions\\": [\\"run\\", \\"run\\"] } ] In this example, you should return: { \\"Alice\\": 45, # 10 + 5 + 20 + 10 \\"Bob\\": 10 # 5 + 5 }","solution":"def calculate_scores(points, actions_list): Calculates the total score for each player based on their performed actions. :param points: Dictionary representing the point values for each action :param actions_list: List of dictionaries representing the actions performed by each player :return: Dictionary with players\' names as keys and their total scores as values scores = {} for player in actions_list: name = player[\\"name\\"] actions = player[\\"actions\\"] total_score = 0 for action in actions: total_score += points.get(action, 0) scores[name] = total_score return scores"},{"question":"You are given a matrix of integers representing a city\'s elevation map where the value at each cell represents the height at that location. Write a function that computes the overall water capacity the city can hold after raining, assuming the boundary of the matrix forms a wall that prevents water flow outside. Water can only be trapped in the low spots within the city. The function should return an integer representing the total amount of water trapped. *Input*: The function takes a single argument, a 2D integer array representing the city\'s elevation map. *Output*: The function returns a single integer representing the total amount of water trapped. Note: You may assume all heights are non-negative integers. *Example*: ``` Input: [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] Output: 4 ``` In this example, water is trapped in the pockets: 2 units in total in cell (1,2) and (1,4).","solution":"import heapq def trapRainWater(heightMap): if not heightMap or not heightMap[0]: return 0 rows, cols = len(heightMap), len(heightMap[0]) visited = [[False] * cols for _ in range(rows)] min_heap = [] # Push border cells into the min_heap for r in range(rows): for c in range(cols): if r == 0 or c == 0 or r == rows - 1 or c == cols - 1: heapq.heappush(min_heap, (heightMap[r][c], r, c)) visited[r][c] = True directions = [(-1,0),(1,0),(0,-1),(0,1)] water_trapped = 0 max_height = 0 while min_heap: height, r, c = heapq.heappop(min_heap) max_height = max(max_height, height) for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc]: visited[nr][nc] = True water_trapped += max(0, max_height - heightMap[nr][nc]) heapq.heappush(min_heap, (heightMap[nr][nc], nr, nc)) return water_trapped"},{"question":"Given an array nums, consisting of distinct integers, and an integer target, return True if there exists exactly three numbers in the array whose sum is equal to the target. Otherwise, return False. Example 1: Input: nums = [1, 2, 3, 4, 5], target = 9 Output: true Explanation: The numbers 1, 3, and 5 add up to 9. Example 2: Input: nums = [5, 2, 7, 1, 4], target = 15 Output: false Explanation: No three numbers in the array add up to 15. Example 3: Input: nums = [0, -1, 2, -3, 1], target = -1 Output: true Explanation: The numbers 0, -1, and 1 add up to -1. Example 4: Input: nums = [4, 1, 2, 3, 6], target = 10 Output: true Explanation: The numbers 1, 3, and 6 add up to 10. Constraints: 3 <= nums.length <= 10^3 -10^3 <= nums[i] <= 10^3 -10^3 <= target <= 10^3","solution":"def three_sum(nums, target): Returns True if there exists exactly three numbers in the array whose sum is equal to the target. Otherwise, returns False. # Sort the array to use two-pointer technique nums.sort() n = len(nums) # Iterate over the array, fixing one element at a time for i in range(n - 2): # Two pointers approach left, right = i + 1, n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Alex is working on automating a payment notification system for his company. He needs to generate email notifications to employees based on their payment status. Each employee\'s payment status is recorded in a JSON format with two keys: \\"name\\" and \\"paid\\". The \\"name\\" key contains the employee\'s name as a string, and the \\"paid\\" key is a boolean value indicating whether the employee has been paid (True if paid, False otherwise). Your task is to write a function that takes a list of such JSON records and returns a list of email messages. Each message should be in the format: \\"Dear [name], your payment is [status].\\" Here, [name] should be replaced with the employee\'s name, and [status] should be \\"completed\\" if the \\"paid\\" key is True, otherwise \\"pending\\". ------ Input ------ A list of dictionaries representing employee payment statuses. Each dictionary contains: - \\"name\\": A string representing the employee\'s name. - \\"paid\\": A boolean value indicating the payment status. ------ Output ------ A list of strings, each representing an email message to the employees in the format described above. ------ Constraints ------ - The list will contain between 1 and 1000 employee records. - Each employee name will be a string containing between 1 and 50 characters. - The list will contain no duplicate employee names. ------ Sample Input 1 ------ [ {\\"name\\": \\"Alice\\", \\"paid\\": True}, {\\"name\\": \\"Bob\\", \\"paid\\": False}, {\\"name\\": \\"Charlie\\", \\"paid\\": True} ] ------ Sample Output 1 ------ [ \\"Dear Alice, your payment is completed.\\", \\"Dear Bob, your payment is pending.\\", \\"Dear Charlie, your payment is completed.\\" ] ------ Explanation 1 ------ The function processes each employee\'s record and generates a corresponding email message. Alice and Charlie\'s payments are completed while Bob\'s payment is pending.","solution":"def generate_payment_notifications(employee_payments): Takes a list of employee payment statuses and returns a list of email messages. Args: employee_payments (list): A list of dictionaries with each containing: - \\"name\\": A string representing the employee\'s name. - \\"paid\\": A boolean value indicating the payment status. Returns: list: A list of email messages. notifications = [] for record in employee_payments: name = record[\\"name\\"] payment_status = \\"completed\\" if record[\\"paid\\"] else \\"pending\\" notifications.append(f\\"Dear {name}, your payment is {payment_status}.\\") return notifications"},{"question":"A robot sits on an infinite 2-dimensional grid at coordinate (0, 0). The robot can move to the left, right, up or down from its current position. It has a specific movement plan, described by the string `commands` of length `n` which consists of characters \'L\', \'R\', \'U\', \'D\', representing movements left, right, up and down respectively. However, the robot can repeat this plan infinitely. Your task is to determine whether the robot will eventually return to the point (0, 0) after following the infinite repetition of the `commands` string, and if so, after how many repetitions of the string this will occur. If the robot will never return to (0, 0), return -1. Input The input consists of a single string `commands` with length 1 ≤ n ≤ 10^5. Output Output the minimum number of repetitions required for the robot to return to the origin point, or -1 if it will never return. Examples Input LR Output 1 Input UDLR Output 1 Input UUD Output -1 Explanation In the first example, the robot returns to the origin point after executing the sequence \\"LR\\". In the second example, the robot returns to the origin point after executing the sequence \\"UDLR\\". In the third example, the robot will never return to the origin point, so the output is -1.","solution":"def robot_return_to_origin(commands): Determines if the robot will return to the (0, 0) position after following the infinite repetition of the commands. Returns the minimum number of repetitions required to return to (0, 0), or -1 if it will never return. # Count moves in each direction left_count = commands.count(\'L\') right_count = commands.count(\'R\') up_count = commands.count(\'U\') down_count = commands.count(\'D\') # Calculate final net movement in x and y directions net_x_movement = right_count - left_count net_y_movement = up_count - down_count # Check if we have net movement after one full execution of commands if net_x_movement == 0 and net_y_movement == 0: return 1 else: return -1"},{"question":"You are given a list of integers. You need to compute the sum of the absolute differences between each pair of consecutive elements in the list. -----Constraints----- - 2 ≤ N ≤ 100 - Each element in the list is an integer between -1000 and 1000 -----Input----- Input is given from Standard Input in the following format: N a1 a2 a3 ... aN -----Output----- Print the sum of the absolute differences between each pair of consecutive elements in the list. -----Sample Input----- 5 1 -3 4 -2 6 -----Sample Output----- 18 The absolute differences between consecutive elements are: |1 - (-3)| = 4 |-3 - 4| = 7 |4 - (-2)| = 6 |-2 - 6| = 8 Summing these up gives 4 + 7 + 6 + 8 = 18.","solution":"def sum_absolute_differences(N, elements): Returns the sum of absolute differences between each pair of consecutive elements in the list. Parameters: N (int): The number of elements in the list. elements (list of int): The list of integers. Returns: int: The sum of absolute differences. total_sum = 0 for i in range(1, N): total_sum += abs(elements[i] - elements[i - 1]) return total_sum # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) elements = list(map(int, data[1:])) print(sum_absolute_differences(N, elements))"},{"question":"You are provided with a list of n integers where n ge 1 and a target integer x. You need to determine whether there are any two distinct elements in the list whose sum is exactly x. Implement a function that returns `True` if there exist two integers in the list such that their sum is equal to x, otherwise return `False`. Your function should handle multiple test cases. -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. The following lines describe the test cases. For each test case: - The first line contains an integer n (1 le n le 10^5) — the size of the list. - The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the list. - The third line contains an integer x (1 le x le 10^9) — the target sum. It is guaranteed that the sum of all n in all test cases does not exceed 10^5. -----Output----- For each test case, print `True` if there are two distinct elements in the given list that add up to x, otherwise print `False`. -----Example----- Input 3 5 1 2 3 4 5 9 4 2 10 5 9 8 6 3 7 1 5 2 8 10 Output True False True","solution":"def two_sum_exists(t, test_cases): results = [] for case in test_cases: n, numbers, x = case number_set = set() found = False for number in numbers: if x - number in number_set: found = True break number_set.add(number) results.append(found) return results def process_input(t, data): test_cases = [] index = 0 for _ in range(t): n = data[index] index += 1 numbers = data[index:index + n] index += n x = data[index] index += 1 test_cases.append((n, numbers, x)) return test_cases def main(input_string): lines = input_string.strip().split(\'n\') t = int(lines[0]) data = list(map(int, \' \'.join(lines[1:]).split())) test_cases = process_input(t, data) results = two_sum_exists(t, test_cases) for result in results: print(result)"},{"question":"Luke is a passionate scifi enthusiast who loves reading about parallel universes. He recently came up with a fascinating idea of representing parallel universes using strings. In his concept, each universe is represented by a binary string (a string consisting of only \'0\'s and \'1\'s). To differentiate between two universes, Luke considers the Hamming distance between their respective binary string representations. The Hamming distance between two binary strings is the number of positions at which the corresponding characters are different. Luke has two binary strings, but he\'s worried that they might not be of the same length (the inhabitants of different universes sometimes have a peculiar sense of symmetry). He wants to know if the strings are already of the same length, what the Hamming distance is, or what manipulations he must make to one of the strings to find this distance. Your task is to help Luke by either calculating the Hamming distance if the strings are of the same length or determining how many positions he must add to the shorter string to make them the same length before calculating the Hamming distance. ------ Input ------ The first line contains a binary string A. The second line contains another binary string B. ------ Output ------ If the lengths of A and B are the same, output the Hamming distance between them. If the lengths of A and B are different, output the number of additional positions needed for the shorter string to make both strings of the same length. ------ Constraints ------ 1 ≤ |A|, |B| ≤ 1000, where |A| and |B| denote the lengths of strings A and B respectively. Each character in A and B is either \'0\' or \'1\'. ------ Sample Input 1 ------ 1101 1011 ------ Sample Output 1 ------ 2 ------ Sample Input 2 ------ 110 1001 ------ Sample Output 2 ------ 1","solution":"def hamming_or_extend(a, b): Calculates Hamming distance if possible or returns the number of positions needed to equalize lengths. :param a: First binary string :param b: Second binary string :return: Hamming distance if strings are of the same length, else number of positions needed len_a = len(a) len_b = len(b) if len_a == len_b: # Calculate Hamming distance hamming_distance = sum(char_a != char_b for char_a, char_b in zip(a, b)) return hamming_distance else: # Calculate the number of positions needed return abs(len_a - len_b)"},{"question":"In a particular board game, players are tasked with arranging tiles on a grid. Each tile is represented as an integer, and tiles follow a specific rule: the sum of integers in any row or any column cannot exceed a given limit `L`. Players need to determine if they can place all of their tiles on the grid without breaking this rule. The grid is of a fixed size `N x N`. Write a function that determines whether all tiles can be placed on the grid in any arrangement that satisfies the given rule. -----Input----- - The first line contains two integers `N` and `L` (1 leq N leq 10 and 1 leq L leq 100) — the size of the grid and the maximum allowed sum for any row or column. - The second line contains `N^2` integers representing the tiles (1 leq text{tile_value} leq 100). -----Output----- - Output \\"YES\\" if it\'s possible to place all tiles on the grid without exceeding the sum limit for any row or column. - Output \\"NO\\" if it\'s not possible. -----Examples----- Input 2 10 1 2 3 4 Output YES Input 3 15 9 7 6 5 4 3 2 1 1 Output YES Input 2 5 3 3 3 3 Output NO -----Note----- In the first example, the tiles can be arranged as follows: 1 2 3 4 Row sums: 3, 7 Column sums: 4, 6 All sums are less than or equal to 10, so the answer is \\"YES\\". In the second example, one possible arrangement of the tiles is: 9 1 1 7 4 4 6 3 2 Row sums: 11, 15, 11 Column sums: 22, 8, 7 All sums are less than or equal to 15, so the answer is \\"YES\\". In the third example, any arrangement of the tiles will produce a row or column sum exceeding 5, so the answer is \\"NO\\".","solution":"from itertools import permutations def can_place_tiles(N, L, tiles): Determines if all tiles can be placed on an NxN grid such that the sum of integers in any row or column does not exceed the limit L. def valid_grid(grid): # Check row sums for row in grid: if sum(row) > L: return False # Check column sums for col in range(N): if sum(grid[row][col] for row in range(N)) > L: return False return True for perm in permutations(tiles): # Create the NxN grid grid = [list(perm[i*N:(i+1)*N]) for i in range(N)] if valid_grid(grid): return \\"YES\\" return \\"NO\\""},{"question":"You are a researcher studying the migration patterns of birds. You want to understand the optimal paths that birds take to minimize the energy spent during their journey. Birds travel from their starting locations to their destinations, and they only fly in straight lines either horizontally, vertically, or diagonally. You need to determine the minimum total distance that a bird would travel if it moves optimally between a given set of points in a 2D plane. The distance between two points (x1, y1) and (x2, y2) in a 2D plane, considering the possible movement constraints, can be computed via the Chebyshev distance formula, which is max(|x2 - x1|, |y2 - y1|). Given a list of N coordinates representing the start and end points of multiple birds, calculate the total minimum distance all birds would travel if they move optimally. -----Input----- The first line of the input contains an integer N (1 le N le 10^5), the number of birds. The next N lines contain four integers each: x1, y1 (the starting coordinates) and x2, y2 (the destination coordinates) for each bird. All coordinates are within the range of -10^6 to 10^6. -----Output----- Print the total minimum distance that all birds would travel. -----Examples----- Sample Input: 3 0 0 3 3 -1 -1 1 1 2 2 5 8 Sample Output: 11 Explanation: 1. The first bird travels from (0, 0) to (3, 3), a distance of 3. 2. The second bird travels from (-1, -1) to (1, 1), a distance of 2. 3. The third bird travels from (2, 2) to (5, 8), a distance of 6. The total minimum distance is 3 + 2 + 6 = 11.","solution":"def total_minimum_distance(bird_paths): Calculate the total minimum distance that all birds would travel. :param bird_paths: List of tuples, each containing four integers (x1, y1, x2, y2) representing the start and end coordinates. :return: The total minimum Chebyshev distance for all birds. total_distance = 0 for (x1, y1, x2, y2) in bird_paths: chebyshev_distance = max(abs(x2 - x1), abs(y2 - y1)) total_distance += chebyshev_distance return total_distance"},{"question":"You are given an array consisting of n integers. You can perform the following operation on the array as many times as you want: choose any two different elements a_i and a_j and replace them with a single integer a_i + a_j. After each operation, the size of the array reduces by 1. Your task is to find the maximum possible value of the last remaining element in the array after performing this operation any number of times. -----Input----- The first line contains one integer n (2 le n le 200000) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the maximum possible value of the last remaining element in the array. -----Example----- Input 4 1 2 3 4 Output 10 -----Note----- In the example, one possible way to achieve the maximum possible value is: 1. Replace 1 and 2 with 3. New array: 3, 3, 4 2. Replace 3 and 3 with 6. New array: 6, 4 3. Replace 6 and 4 with 10. New array: 10 Thus, the maximum possible value of the last remaining element is 10.","solution":"def max_last_element(n, arr): Given an array of n integers, return the maximum possible value of the last remaining element after performing the allowed operations. return sum(arr)"},{"question":"Develop a program to analyze temperature records and determine key summaries. You are provided with temperature recordings for each day of a given month. Your task is to calculate the average temperature, the highest temperature, the lowest temperature, and the number of days the temperature was above average. Input: The first line of input consists of an integer N, the number of days in the month (1 ≤ N ≤ 31). The following N lines each contain an integer representing the temperature recorded on that day in degrees Celsius (-50 ≤ temperature ≤ 50). Output: Print four lines: 1. The first line should contain the average temperature of the month, rounded to 2 decimal places. 2. The second line should contain the highest temperature recorded. 3. The third line should contain the lowest temperature recorded. 4. The fourth line should contain the number of days the temperature was above average. Example: Input: 5 23 18 30 25 28 Output: 24.80 30 18 3","solution":"def analyze_temperatures(N, temperatures): Analyzes temperature records for a given month and calculates: - Average temperature - Highest temperature - Lowest temperature - Number of days the temperature was above average Parameters: N (int): Number of days in the month temperatures (list of int): List of recorded temperatures Returns: tuple: (average temperature, highest temperature, lowest temperature, days above average) if N == 0: return (0, 0, 0, 0) # Calculate the average temperature average_temperature = sum(temperatures) / N # Find highest and lowest temperature highest_temperature = max(temperatures) lowest_temperature = min(temperatures) # Count the number of days the temperature was above average days_above_average = sum(1 for temp in temperatures if temp > average_temperature) return (round(average_temperature, 2), highest_temperature, lowest_temperature, days_above_average)"},{"question":"Dana loves the number \\"fourteen\\". She has a string t and wants to maximize the number of such words by removing some letters from the string (if necessary) but cannot rearrange the letters. For example, if she has the string \\"fouurttneeefouortefourteen\\", she can remove some letters to obtain the string \\"fourteenfourteen\\", containing two occurrences of the word \\"fourteen\\". More formally, the word \\"fourteen\\" occurs in the string the number of times you can read it sequentially without rearranging other letters. Removing letters is allowed to maximize occurrences. Help her to find the maximum number of \\"fourteen\\"s that she can get from her string by removing as few letters as possible. -----Input----- The first line contains a non-empty string t, consisting only of lowercase English letters. The length of string t doesn\'t exceed 100. -----Output----- Print a single integer — the maximum number of \\"fourteen\\"s that she can get in her string. -----Examples----- Input ffouortorteeneefourtteenn Output 2 Input fouurttnneeaabbccdde Output 1 Input fouorteentenn Output 1","solution":"def max_fourteen_occurrences(t): Returns the maximum number of \\"fourteen\\" words that can be obtained by removing some characters from the input string t. from collections import Counter # The target word we are looking for target = \\"fourteen\\" target_count = Counter(target) t_count = Counter(t) # Calculate the number of times we can form the word \\"fourteen\\" return min(t_count[char] // target_count[char] for char in target_count)"},{"question":"Write a program that simulates a basic digital clock showing the time in hours, minutes, and seconds. The clock should start at a given time and run for a specified number of seconds, updating every second. -----Input----- The input consists of two lines. The first line contains the initial time in the format \\"hh:mm:ss\\", where \\"hh\\" is the hour (00 to 23), \\"mm\\" is the minute (00 to 59), and \\"ss\\" is the second (00 to 59). The second line contains a single integer t (0 le t le 10000), indicating the number of seconds the clock should run. -----Output----- The output should display the clock time at every second from the start time for t seconds. Display each time on a new line in the format \\"hh:mm:ss\\". If the clock reaches \\"23:59:59\\" and needs to increment, it should roll over to \\"00:00:00\\". -----Examples----- Sample Input: 23:59:55 10 Sample Output: 23:59:55 23:59:56 23:59:57 23:59:58 23:59:59 00:00:00 00:00:01 00:00:02 00:00:03 00:00:04 00:00:05","solution":"def run_digital_clock(start_time, t): Runs a digital clock for `t` seconds starting from `start_time`. Parameters: - start_time (str): The initial time in \\"hh:mm:ss\\" format. - t (int): The number of seconds the clock should run. Returns: - List of strings with each time displayed in \\"hh:mm:ss\\" format for each second. # Extract hours, minutes, and seconds from start_time hours, minutes, seconds = map(int, start_time.split(\':\')) result = [] for _ in range(t + 1): # Format current time to \\"hh:mm:ss\\" and add to result result.append(f\\"{hours:02}:{minutes:02}:{seconds:02}\\") # Increment by 1 second seconds += 1 if seconds == 60: seconds = 0 minutes += 1 if minutes == 60: minutes = 0 hours += 1 if hours == 24: hours = 0 return result"},{"question":"In a distant galaxy, the inhabitants use a unique language that consists of only two symbols: \\"+\\" and \\"-\\". Every sentence in their language is a string of these symbols. However, their language has an interesting rule for determining the \\"weight\\" of each sentence: the weight of a sentence is the absolute difference between the number of \\"+\\" symbols and the number of \\"-\\" symbols it contains. Your task is to determine if it’s possible to concatenate some (or all) of the provided sentences in such a way that the resulting sentence’s weight is exactly a given value. -----Input----- The first line contains a single integer w (0 ≤ w ≤ 100) — the desired weight of the resulting sentence. The second line contains a single integer n (1 ≤ n ≤ 50) — the number of sentences available. The next n lines each contain a string consisting of \\"+\\" and \\"-\\" symbols, representing the sentences. -----Output----- Print \\"YES\\" if it is possible to concatenate some (or all) of the sentences to obtain a sentence with the exact weight w, otherwise print \\"NO\\". -----Examples----- Input 2 3 ++ +- -- Output YES Input 1 2 --- ++ Output NO Input 0 4 +- ++ -- + Output YES -----Note----- In the first example, we can concatenate the first sentence \\"++\\" and the third sentence \\"--\\" to get \\"++--\\" which has a weight of 0, but this doesn\'t satisfy the weight of 2. Alternatively, concatenating the second sentence \\"+-\\" results in a weight of 0, which is not the goal. But simply taking the first sentence \\"++\\" alone gives the weight of 2. Hence, the answer is \\"YES\\". In the second example, there is no combination of sentences that can produce a sentence with a weight of 1. Thus, the answer is \\"NO\\". In the third example, we can concatenate just the first sentence \\"+-\\" to get a sentence with a weight of 0. Thus, the answer is \\"YES\\".","solution":"def can_obtain_weight(w, sentences): Determine if it\'s possible to concatenate some (or all) of the sentences to obtain a sentence with the exact weight w. Parameters: w (int): The desired weight of the resulting sentence. sentences (list of str): List of sentences consisting of \\"+\\" and \\"-\\" symbols. Returns: str: \\"YES\\" if it is possible to obtain the desired weight, otherwise \\"NO\\". weights = [abs(s.count(\'+\') - s.count(\'-\')) for s in sentences] possible_sums = {0} for weight in weights: new_sums = possible_sums.copy() for psum in possible_sums: new_sums.add(psum + weight) possible_sums = new_sums return \\"YES\\" if w in possible_sums else \\"NO\\""},{"question":"A popular e-commerce website is planning a promotional event where they aim to provide various discounts to their users on n distinct items. Each user can avail themselves of a single discount per item, but they can choose multiple items. The goal is to maximize the total discount a single user can obtain from their purchases during the event. Each item has a certain price, and the discount offered on that item can vary depending on the availability and demand of the item. As the event organizer, you have been given the prices and corresponding discounts for all the items. You need to determine the maximum total discount a user can avail themselves of by purchasing a subset of these items. Input The first line contains an integer n (1 ≤ n ≤ 10^5), denoting the number of distinct items. The next n lines contain two space-separated integers each, where the i-th line contains price_i and discount_i (1 ≤ price_i, discount_i ≤ 10^6), denoting the price and discount of the i-th item, respectively. Output Print a single integer denoting the maximum total discount a user can avail themselves of by purchasing a subset of the items. Examples Input 4 100 40 200 90 150 50 120 30 Output 180 Input 3 300 100 250 80 400 120 Output 220 Input 5 1000 150 500 75 800 120 300 50 200 30 Output 425 Note In the first example, the user can buy the item with price 200 (discount 90) and the item with price 150 (discount 50), resulting in a maximum total discount of 90 + 50 = 140. In the second example, the user can buy the item with price 400 (discount 120) and the item with price 300 (discount 100), resulting in a maximum total discount of 120 + 100 = 220.","solution":"def max_total_discount(n, items): Returns the maximum total discount a user can avail by purchasing a subset of the items. Parameters: n (int): The number of distinct items. items (list of tuples): Each tuple contains two integers, price_i and discount_i. Returns: int: The maximum total discount. # To maximize the discount, we just need to sum up all discounts total_discount = 0 for price, discount in items: total_discount += discount return total_discount"},{"question":"A company is planning to organize a series of coding workshops for students. They want to form teams for these workshops. Each team should consist of exactly three students. Before making the teams, they have collected the skills levels of all the students in an array. The skill levels are represented by positive integers. The company wants to ensure that no team has students with the same skill level. Your task is to write a program that counts the number of unique teams that can be formed from the given students such that no two students in the same team have the same skill level. The team formation should be done such that every student can only be part of one team, and every possible combination of students should be considered for forming teams. -----Input----- - The first line of input contains an integer n (1 ≤ n ≤ 5000) – the number of students. - The second line of input contains n space-separated integers, where each integer represents the skill level of a student. -----Output----- - Output a single integer – the number of unique teams that can be formed. -----Examples----- Input 5 1 1 2 2 3 Output 1 Input 6 1 2 3 4 5 6 Output 20 -----Note----- In the first example, the only possible team consists of students with skill levels {1, 2, 3}. In the second example, multiple teams can be formed with various combinations, such as {1, 2, 3}, {1, 2, 4}, {1, 2, 5}, and so on. The total number of such unique teams is 20.","solution":"from itertools import combinations def count_unique_teams(n, skill_levels): Returns the number of unique teams that can be formed. Each team must consist of exactly three students with different skill levels. unique_skill_levels = set(skill_levels) if len(unique_skill_levels) < 3: return 0 # At least three unique skill levels are needed to form one team # Calculate number of unique combinations of 3 from the unique skill levels unique_teams = list(combinations(unique_skill_levels, 3)) return len(unique_teams) # Example usage: # n = 5 # skill_levels = [1, 1, 2, 2, 3] # print(count_unique_teams(n, skill_levels)) # Output: 1"},{"question":"Adam is in a galaxy far, far away where he needs to communicate with an alien species. The aliens use a special type of numerical language which only involves prime numbers. Given a sequence of integers, Adam needs to find how many prime numbers are present in the sequence in order to send the correct message. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. -----Input----- The first line contains one integer n (1 le n le 10^5) — the number of elements in the sequence. The second line contains n integers a_i (1 le a_i le 10^6) — the elements of the sequence. -----Output----- Print the number of prime numbers in the sequence. -----Examples----- Input 5 2 3 4 5 6 Output 3 Input 4 8 10 13 17 Output 2 -----Note----- In the first sample, the prime numbers are 2, 3, and 5. In the second sample, the prime numbers are 13 and 17.","solution":"def count_primes(arr): Returns the count of prime numbers in the given sequence. def is_prime(num): if num <= 1: return False if num == 2 or num == 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True prime_count = sum(1 for x in arr if is_prime(x)) return prime_count"},{"question":"You are given a matrix of integers with (n) rows and (m) columns. Your task is to find the largest rectangle containing only the number 1 and print its area. The matrix is represented as a list of lists. Each element of the matrix can be either 0 or 1. For example, in the matrix: [ begin{matrix} 1 & 0 & 1 & 0 & 0 1 & 0 & 1 & 1 & 1 1 & 1 & 1 & 1 & 1 1 & 0 & 0 & 1 & 0 end{matrix} ] The largest rectangle of 1’s has an area of 6. Use an efficient algorithm to solve this problem. Input The first line contains two integers (n) and (m) (1 ≤ (n, m) ≤ 1000), the number of rows and columns of the matrix. The next (n) lines each contain (m) integers (either 0 or 1) representing the elements of the matrix. Output Print one integer — the area of the largest rectangle composed solely of 1\'s in the matrix. Examples Input ``` 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ``` Output ``` 6 ``` Input ``` 2 2 1 1 1 1 ``` Output ``` 4 ``` Note In the first example, the largest rectangle of 1’s is: [ begin{matrix} 0 & 0 & 0 1 & 1 & 1 1 & 1 & 1 end{matrix} ] which has an area of 6. In the second example, the entire matrix is composed of 1’s, thus forming a rectangle of area 4.","solution":"def maximal_rectangle(matrix): Given a binary matrix, find the maximum area of a rectangle formed only by 1\'s. if not matrix: return 0 n = len(matrix) m = len(matrix[0]) height = [0] * m max_area = 0 for i in range(n): for j in range(m): height[j] = height[j] + 1 if matrix[i][j] == 1 else 0 max_area = max(max_area, largest_rectangle_area(height)) return max_area def largest_rectangle_area(heights): Helper function to find the largest rectangle area in a histogram represented by heights. stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[stack[-1]] > heights[i]: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) heights.pop() return max_area"},{"question":"In a galaxy far, far away, there exists a planet called \\"Codeia\\" where the inhabitants communicate primarily through binary—the language of 1s and 0s. On this planet, they have a central processing unit (CPU) that processes a binary string using a unique set of rules to achieve high efficiency. CPU performs a set of transformations on the binary string `b` of length `n` to maximize the number of consecutive 1s. The transformations can be summarized as follows: 1. **Flip Operation**: Any segment of the binary string can be flipped, changing all 1s to 0s and all 0s to 1s within that segment. This operation can be performed any number of times. 2. **Shift Operation**: Any segment of the binary string can be moved to another position in the string. The length of the segment and the position it is moved to is up to you, but after the operation, the binary string must remain of length `n`. This operation can also be performed any number of times. The objective is to find the maximum number of consecutive 1s that can be achieved after any number of Flip and Shift operations. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the length of the binary string. - The second line contains a binary string `b` of length `n`. # Output - Output a single integer, the maximum number of consecutive 1s that can be achieved. # Example Input ``` 8 11000111 ``` Output ``` 8 ``` Explanation - Original string: 11000111 - Using a Flip operation on the segment 000, the string becomes 11111000. - By shifting the segment 1000 to the start of the string, it becomes 00011111. - Maximum consecutive 1s: 11111111 Note: Though the operations are applied conceptually, the above steps show the potential transformations leading to the maximum sequence. With strategic flips and shifts, one can always manipulate any binary string to achieve n consecutive 1s (maximum length).","solution":"def max_consecutive_ones(n, b): Returns the maximum number of consecutive 1s that can be achieved by performing any number of Flip and Shift operations on the binary string b. return n"},{"question":"Given an array of integers, return the length of the longest subarray containing no more than two distinct values, where the two values differ by no more than 1. Example 1: Input: nums = [1, 2, 1, 2, 3] Output: 4 Explanation: The longest subarray containing no more than two distinct values that differ by no more than 1 is [1, 2, 1, 2]. Example 2: Input: nums = [4, 4, 4, 4] Output: 4 Explanation: The longest subarray containing no more than two distinct values that differ by no more than 1 is [4, 4, 4, 4]. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function longestSubarray() that takes an array (nums) and returns the length of the longest subarray that matches the given conditions. The driver code takes care of the printing. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ len(nums) ≤ 10^5 0 ≤ nums[i] ≤ 10^5","solution":"def longest_subarray(nums): Return the length of the longest subarray containing no more than two distinct values, where the two values differ by no more than 1. if not nums: return 0 max_length = 0 start = 0 freq = {} for end in range(len(nums)): if nums[end] in freq: freq[nums[end]] += 1 else: freq[nums[end]] = 1 while len(freq) > 2 or (len(freq) == 2 and abs(min(freq) - max(freq)) > 1): freq[nums[start]] -= 1 if freq[nums[start]] == 0: del freq[nums[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"Maria loves to arrange her books on her bookshelf in a particular order. She starts with an empty bookshelf and adds books one by one. Each book has a unique integer identifier, but some books need to be removed and re-added before she finalizes the sequence. Your task is to help Maria track the final order of books on her bookshelf. You will be given a series of commands: - \'A x\' (where x is a positive integer): indicates that a book with identifier x is added to the shelf. - \'R x\' (where x is a positive integer): indicates that a book with identifier x is removed from the shelf. Maria performs each command sequentially, and at the end, she wants to know the final list of book identifiers left on the shelf in the order they were added. Write a function that takes these commands and returns the final order of books on the bookshelf. Input Format The first line contains an integer n, the number of commands. The next n lines each contain a command in one of the two formats described above. Output Format Print the identifiers of the books on the bookshelf in the order they were added, each identifier separated by a space. If the shelf is empty, print an empty line. Constraints 1 ≤ n ≤ 100000 1 ≤ x ≤ 100000 SAMPLE INPUT 7 A 5 A 10 R 5 A 15 A 5 R 10 A 20 SAMPLE OUTPUT 15 5 20","solution":"def track_books(commands): Tracks the final order of books on Maria\'s bookshelf. Args: commands (List[str]): A list of commands to be executed sequentially. Returns: List[int]: A list of book identifiers in the final order on the bookshelf. shelf = [] for command in commands: action, x = command.split() x = int(x) if action == \'A\': shelf.append(x) elif action == \'R\' and x in shelf: shelf.remove(x) return shelf"},{"question":"> Design an algorithm that will take an input list of integers and output the length of the longest increasing subsequence (LIS). The longest increasing subsequence is a subsequence of a given sequence in which the subsequence\'s elements are in strictly increasing order, and the subsequence is as long as possible. **Input:** An array of integers, `arr`, where (1 leq arr.length leq 10^3) and (-10^4 leq arr[i] leq 10^4). **Output:** An integer representing the length of the longest increasing subsequence in the array. **Example:** ``` Input: [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Input: [0, 1, 0, 3, 2, 3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], therefore the length is 4. Input: [7, 7, 7, 7, 7, 7, 7] Output: 1 Explanation: The longest increasing subsequence is any single number, therefore the length is 1. ``` **Function Signature:** ```python def longest_increasing_subsequence(arr: list) -> int: # implementation here ```","solution":"def longest_increasing_subsequence(arr: list) -> int: if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"The kingdom of Sortland is known for its unique way of ranking cities. The mayor of Sortland decided to assign a rank to each city based on a certain property. There are n cities in Sortland, and each city has its own score. A higher score means a better rank. However, due to some misunderstanding, the cities were initially named differently. As a result, the mayor decided to rename the cities based on their rank. Given an array of scores, you need to find the new names for the cities. Each city\'s new name should be its rank when the scores are sorted in non-decreasing order. For example, the city with the highest score should be renamed \\"n\\", the second highest \\"n-1\\", and so on, where n is the number of cities. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of cities in Sortland. The second line contains n integers s_1, s_2, ..., s_{n} (1 ≤ s_{i} ≤ 1000) — the scores of the cities. -----Output----- Output one line with n integers, representing the new names of the cities based on their rank. -----Examples----- Input 3 10 50 20 Output 3 1 2 Input 4 70 40 80 50 Output 2 4 1 3","solution":"def rename_cities(n, scores): Given n scores of cities, returns the new names for the cities based on their rank. :param n: Number of cities :param scores: List of scores of cities :return: List of new names for the cities based on their rank sorted_scores = sorted(scores, reverse=True) rank = {score: idx + 1 for idx, score in enumerate(sorted_scores)} return [rank[score] for score in scores] # Example usage: n = 3 scores = [10, 50, 20] print(rename_cities(n, scores)) # Output: [3, 1, 2]"},{"question":"Given an array of integers nums, you need to find the length of the longest contiguous subarray with an equal number of 0 and 1. Example 1: Input: nums = [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1. Example 2: Input: nums = [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Constraints: The length of the given binary array is in the range [1, 10^5].","solution":"def findMaxLength(nums): Finds the length of the longest contiguous subarray with an equal number of 0 and 1. count_map = {0: -1} max_length = 0 count = 0 for i, num in enumerate(nums): if num == 0: count -= 1 else: count += 1 if count in count_map: max_length = max(max_length, i - count_map[count]) else: count_map[count] = i return max_length"},{"question":"Given a matrix of size N x M (N rows and M columns) containing only integers, determine if there is a path from the top-left cell (0,0) to the bottom-right cell (N-1,M-1), such that you can only move right or down and the sum of the values of the cells in the path is equal to a given integer K. Example 1: Input: N = 3, M = 3, K = 12 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: True Explanation: Path (1→2→5→8→9) has a sum of 1+2+5+8+9 = 25, which is equal to given integer K. Example 2: Input: N = 2, M = 2, K = 5 matrix = [ [1, 2], [3, 4] ] Output: False Explanation: There\'s no such path with the sum of 5. Your Task: Since this is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function `isPathSum(matrix, N, M, K)` that takes the 2D list `matrix`, integer `N`, integer `M`, and integer `K` as parameters and returns a boolean value indicating whether such a path exists. Expected Time Complexity: O(N*M) Expected Auxiliary Space: O(N*M) Constraints: 1 ≤ N, M ≤ 100 -10^3 ≤ matrix[i][j] ≤ 10^3 -10^6 ≤ K ≤ 10^6","solution":"def isPathSum(matrix, N, M, K): def dfs(x, y, current_sum): if x >= N or y >= M: return False current_sum += matrix[x][y] if x == N-1 and y == M-1: return current_sum == K if (x, y, current_sum) in visited: return False visited.add((x, y, current_sum)) return dfs(x + 1, y, current_sum) or dfs(x, y + 1, current_sum) visited = set() return dfs(0, 0, 0)"},{"question":"Spiral Matrix Construction Given an integer n (n >= 1 and n <= 1000), construct an n x n matrix in which the elements are filled with integers from 1 to n^2 in a spiral order. The spiral order starts from the top-left corner of the matrix and proceeds in a clockwise direction. For example, when n = 3, the matrix should be filled as follows: ``` [ [ 1, 2, 3], [ 8, 9, 4], [ 7, 6, 5] ] ``` Input - A single integer n. Output - The n x n matrix filled in spiral order, with each row of the matrix printed on a new line. - Each element in the row should be separated by a space. Examples Input 3 Output 1 2 3 8 9 4 7 6 5 Input 4 Output 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 Input 1 Output 1","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix. :param n: int :return: List[List[int]] matrix = [[0] * n for _ in range(n)] left, right, top, bottom = 0, n - 1, 0, n - 1 num = 1 while left <= right and top <= bottom: # Fill top row for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Fill right column for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Fill bottom row if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Fill left column if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"You are given an array arr[] of N non-negative integers. You need to form a new array result[] such that each element at index i of result[] is the product of all elements of arr[] except arr[i]. Example 1: Input : arr[] = {1, 2, 3, 4, 5} Output : {120, 60, 40, 30, 24} Explanation: At index 0, the product of all elements except arr[0] is 2*3*4*5 = 120 At index 1, the product of all elements except arr[1] is 1*3*4*5 = 60 At index 2, the product of all elements except arr[2] is 1*2*4*5 = 40 At index 3, the product of all elements except arr[3] is 1*2*3*5 = 30 At index 4, the product of all elements except arr[4] is 1*2*3*4 = 24 Thus, the new array will be {120, 60, 40, 30, 24}. Example 2: Input : arr[] = {3, 2, 1} Output : {2, 3, 6} Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function product_array() that takes an array (arr) and its size (n) and returns the new array result[]. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5 0 ≤ arr[i] ≤ 10^6","solution":"def product_array(arr, n): if n == 0: return [] # Initialize two arrays to store the products of all elements # to the left and to the right of each element left_products = [1] * n right_products = [1] * n # Fill in the left_products array for i in range(1, n): left_products[i] = left_products[i - 1] * arr[i - 1] # Fill in the right_products array for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * arr[i + 1] # Calculate the result by multiplying corresponding elements of # left_products and right_products result = [1] * n for i in range(n): result[i] = left_products[i] * right_products[i] return result"},{"question":"A software development team is working on a project that involves organizing a sequence of tasks based on their dependencies. Each task is represented by a node in a directed graph, and every dependency is represented by a directed edge between two nodes. A directed edge from node `u` to node `v` indicates that task `u` must be completed before task `v` can begin. To ensure efficient project management, the team needs to find the topological ordering of the tasks such that for every directed edge `u -> v`, task `u` comes before task `v` in the ordering. Your task is to write a program that accepts a list of tasks and their dependencies, then outputs a valid topological ordering of the tasks if possible. If it is not possible to order the tasks (due to a cycle in the graph), your program should instead return \\"Cycle detected\\". -----Input----- - The first line contains two integers `N` and `M` - the number of tasks (`1 leq N leq 1000`) and the number of dependencies (`0 leq M leq 10000`). - The next `M` lines each contain two integers `u` and `v` - indicating a directed edge from task `u` to task `v` (`1 leq u, v leq N`). -----Output----- - Output a single line with space-separated integers representing a valid topological ordering of the tasks. - If no valid ordering exists, output \\"Cycle detected\\". -----Examples----- Sample Input 1: 5 4 1 2 2 3 3 4 4 5 Sample Output 1: 1 2 3 4 5 Sample Input 2: 4 4 1 2 2 3 3 4 4 2 Sample Output 2: Cycle detected Sample Input 3: 6 6 6 3 6 1 5 1 5 2 3 4 4 2 Sample Output 3: 6 5 3 1 4 2","solution":"from collections import defaultdict, deque def topological_sort(N, M, edges): def has_cycle(v, visited, rec_stack, adjacency_list): visited[v] = True rec_stack[v] = True for neighbor in adjacency_list[v]: if not visited[neighbor]: if has_cycle(neighbor, visited, rec_stack, adjacency_list): return True elif rec_stack[neighbor]: return True rec_stack[v] = False return False adjacency_list = defaultdict(list) in_degree = [0] * (N + 1) for u, v in edges: adjacency_list[u].append(v) in_degree[v] += 1 visited = [False] * (N + 1) rec_stack = [False] * (N + 1) for i in range(1, N + 1): if not visited[i]: if has_cycle(i, visited, rec_stack, adjacency_list): return \\"Cycle detected\\" zero_in_degree_queue = deque() for i in range(1, N + 1): if in_degree[i] == 0: zero_in_degree_queue.append(i) topological_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topological_order.append(node) for neighbor in adjacency_list[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) if len(topological_order) == N: return \\" \\".join(map(str, topological_order)) else: return \\"Cycle detected\\" # Example usage: # edges = [(1, 2), (2, 3), (3, 4), (4, 5)] # print(topological_sort(5, 4, edges))"},{"question":"Suppose you are given an array of integers and you want to find the smallest positive integer that is not present in the array. If the array contains both positive and negative numbers, we are only concerned with the positive numbers. You must write a function to determine this smallest missing positive integer. Write a function `find_missing_positive` that, given an array of integers as input, returns the smallest positive integer that is missing from the array. # Function Signature ```python def find_missing_positive(nums: List[int]) -> int: ``` # Input - The function takes a single parameter: - `nums`: A list of integers, where the length of the list is between 1 and 10^5 inclusive. # Output - The function should return an integer, representing the smallest positive integer missing from the array. # Examples # Example 1 ```python find_missing_positive([3, 4, -1, 1]) # returns 2 ``` # Example 2 ```python find_missing_positive([1, 2, 0]) # returns 3 ``` # Example 3 ```python find_missing_positive([7, 8, 9, 11, 12]) # returns 1 ``` # Notes - In the first example, the smallest missing positive integer is 2 because the array contains the numbers 1, 3, and 4. - In the second example, the array contains the numbers 0, 1, and 2, so the smallest missing positive integer is 3. - In the third example, there are no positive integers less than 7 in the array, so the smallest missing positive integer is 1. - The function must run in O(n) time and use O(1) additional space.","solution":"from typing import List def find_missing_positive(nums: List[int]) -> int: n = len(nums) for i in range(n): while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]: nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1] for i in range(n): if nums[i] != i + 1: return i + 1 return n + 1"},{"question":"Jordan is fascinated with strings and letters these days. He has come across a particularly interesting problem that he wants to challenge you with: You are given a string ( S ) consisting of lowercase English letters. Your task is to determine the number of distinct palindromic substrings present in ( S ). A substring is defined as a contiguous sequence of characters within a string, and a palindrome is a string that reads the same forward and backward. For example, in the string \\"ababa\\", the palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". The total distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". Input Format: The first and only line contains the string ( S ). Output Format: Print the number of distinct palindromic substrings in ( S ). Constraints: 1 ≤ |S| ≤ 1000 SAMPLE INPUT ababa SAMPLE OUTPUT 5 Explanation In the string \\"ababa\\", the distinct palindromic substrings are: \\"a\\", \\"b\\", \\"aba\\", \\"bab\\", \\"ababa\\". Can you determine the number of distinct palindromic substrings in a given string?","solution":"def count_distinct_palindromic_substrings(S): Returns the number of distinct palindromic substrings in the given string S. def is_palindrome(s): return s == s[::-1] n = len(S) palindromic_substrings = set() for i in range(n): for j in range(i + 1, n + 1): substring = S[i:j] if is_palindrome(substring): palindromic_substrings.add(substring) return len(palindromic_substrings)"},{"question":"You are given a list of student names and their respective scores in a test. Your task is to find out how many students passed the test. A student passes the test if his or her score is greater than or equal to a given passing mark. Input The first line contains two integers n (1 ≤ n ≤ 100) and p (0 ≤ p ≤ 100) – the number of students and the passing mark. The next n lines contain a student\'s name (a string of no more than 20 lowercase Latin letters) followed by the student\'s score (an integer between 0 and 100 inclusive). Output Output the single number – the number of students who passed the test. Examples Input 5 50 alice 48 bob 60 charlie 55 david 49 eve 50 Output 3 Input 3 75 anna 70 bruno 80 clara 75 Output 2","solution":"def count_passing_students(n, p, students): Counts the number of students who have passed the test based on the passing mark. Args: n (int): Number of students. p (int): Passing mark. students (list of tuples): List of tuples where each tuple contains a student\'s name and score. Returns: int: Number of students who passed the test. passing_count = 0 for student in students: name, score = student if score >= p: passing_count += 1 return passing_count"},{"question":"In a robotics simulation, a grid of dimensions m x n represents a room with some obstacles placed on certain cells. Each cell in the grid can either be empty (denoted by 0) or contain an obstacle (denoted by 1). A robot needs to navigate from the top-left corner of the grid (0,0) to the bottom-right corner (m-1,n-1). The robot can only move right or down at any point in time. Write an algorithm to determine the number of unique paths the robot can take to reach its destination without hitting any obstacles. ------ Input Format ------ The first line contains two integers, m and n, representing the dimensions of the grid. The next m lines each contain n integers (0 or 1), representing the grid where 0 denotes an empty cell and 1 denotes an obstacle. ------ Output Format ------ Output a single integer, which is the number of unique paths from the top-left to the bottom-right of the grid. ------ Constraints ------ 1 ≤ m, n ≤ 100 The grid is guaranteed to have an empty starting cell (top-left) and ending cell (bottom-right). ----- Sample Input 1 ------ 3 3 0 0 0 0 1 0 0 0 0 ----- Sample Output 1 ------ 2 ----- explanation 1 ------ The robot can take two paths to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): m = len(grid) n = len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"You are given an array of integers representing heights of various buildings. Given that you can see a building if there is no taller building in the way: Write a function to find the number of buildings that have a view of the sunset, given the direction the view is being observed from. Specifically, if the view is from the west, buildings are considered from left to right; and if the view is from the east, buildings are considered from right to left. A building with height A_i has a view of the sunset if for all j > i (when viewing from west) or j < i (when viewing from east), heights A_j are less than A_i. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - For each test case, the following are provided: - A character \'W\' or \'E\', representing the direction of the view (west or east). - An integer N, the number of buildings. - An array of N integers, denoting the heights of the buildings. ------ Output Format ------ For each test case, output a single integer, the number of buildings that have a view of the sunset. ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 1 ≤ A_i ≤ 10^9 The sum of N over all test cases won\'t exceed 10^6. ------ Sample Input 1 ------ 3 W 6 7 4 8 2 9 5 E 6 7 4 8 2 9 5 W 3 1 3 2 ------ Sample Output 1 ------ 3 2 2 ------ Explanation 1 ------ For the first test case, observing from the west, buildings with heights 7, 8, and 9 are visible. For the second test case, observing from the east, buildings with heights 5 and 9 are visible. For the third test case, observing from the west, buildings with heights 1 and 3 are visible.","solution":"def buildings_with_view(direction, heights): Find the number of buildings that have a view of the sunset. Parameters: direction (str): \'W\' for west to east, \'E\' for east to west. heights (list): List of integers representing building heights. Returns: int: Number of buildings with a view of the sunset. if direction == \'W\': max_height = -1 count = 0 for height in heights: if height > max_height: count += 1 max_height = height elif direction == \'E\': max_height = -1 count = 0 for height in reversed(heights): if height > max_height: count += 1 max_height = height return count"},{"question":"Write a function that takes an integer `n` as input which represents the number of rows of numbers to be printed. The function should output the numbers in a pyramid form, with the first row containing the number `1`, the second row containing the numbers `2` and `3`, the third row containing the numbers `4`, `5`, and `6`, and so on. Input - An integer `n` where `1 ≤ n ≤ 10`. Output - A pyramid of numbers with the specified number of rows. Example **Input:** ``` 4 ``` **Output:** ``` 1 2 3 4 5 6 7 8 9 10 ``` **Explanation:** For `n = 4`: - The first row has `1` - The second row has `2 3` - The third row has `4 5 6` - The fourth row has `7 8 9 10`","solution":"def pyramid(n): Outputs a pyramid of numbers with n rows. current_number = 1 result = [] for i in range(1, n+1): row = [] for j in range(i): row.append(current_number) current_number += 1 result.append(\\" \\".join(map(str, row))) return \\"n\\".join(result)"},{"question":"A university needs to assign students to dormitories based on their preferences. Each student can list up to three dormitory choices in order of preference. The university tries to allocate dorms starting with students’ first choice, then second if the first is unavailable, and then third. If none of the three choices are available, the student will be placed in a default dormitory. You are given the number of dormitories M, and the capacity of each dormitory. Then, you are given the number of students N and their dormitory preferences. Write a program to determine which dormitory each student gets assigned to. -----Constraints----- - 1 leq M leq 10^5 - 1 leq N leq 10^5 - 1 leq capacity of each dormitory leq 10^5 - 0 leq number of preferences per student leq 3 -----Input----- Input is given from Standard Input in the following format: ``` M C_1 C_2 ... C_M N P_1_1 P_1_2 P_1_3 P_2_1 P_2_2 P_2_3 ... P_N_1 P_N_2 P_N_3 ``` - The first line contains the number of dormitories M. - The second line contains M integers, where the i-th integer represents the capacity of the i-th dormitory. - The third line contains the number of students N. - For the next N lines, each line contains up to three integers which represent a student’s dormitory preferences in order. If a student has less than three preferences, the missing preferences will be represented as -1. -----Output----- Output N lines, each line containing the dormitory number assigned to the corresponding student. If the student could not be assigned to any of their preferred dormitories, assign them to the first dormitory (i.e., dormitory 1). -----Sample Input----- 3 2 1 1 4 1 2 3 2 1 3 3 1 2 3 -1 -1 -----Sample Output----- 1 2 3 1 Explanation: - Student 1 is assigned to dormitory 1 (their first choice). - Student 2 is assigned to dormitory 2 (their first choice). - Student 3 is assigned to dormitory 3 (their first choice). - Student 4 prefers dormitory 3, which is full, so they are assigned to dormitory 1 (the default dormitory). [End of Question]","solution":"def assign_dormitories(M, capacities, N, preferences): Assign students to dormitories based on their preferences and dormitory capacities. Parameters: M (int): Number of dormitories capacities (list of int): Capacities of each dormitory N (int): Number of students preferences (list of list of int): List of student preferences for dormitories. Returns: list of int: List of assigned dormitories for each student. assigned_dorms = [] dorm_capacity_left = capacities[:] for pref in preferences: assigned = False for choice in pref: if choice == -1: continue if dorm_capacity_left[choice - 1] > 0: assigned_dorms.append(choice) dorm_capacity_left[choice - 1] -= 1 assigned = True break if not assigned: assigned_dorms.append(1) return assigned_dorms"},{"question":"In a magical realm, there are n islands, numbered from 1 to n. These islands are connected by m bidirectional bridges. Each bridge has a certain magical strength si, enabling one to travel between its endpoints seamlessly. The wizard council has decided to upgrade these bridges due to a rise in magical creature attacks. They want to ensure that every bridge in the realm has at least a certain minimum magical strength to withstand attacks. The task is to determine the minimum cost required to upgrade all the bridges to meet this threshold. The cost to upgrade a bridge depends directly on the increase in magical strength needed for that bridge. If a bridge currently has a magical strength si and it needs to be upgraded to at least s0, the cost to upgrade that bridge is calculated as s0 - si (if si < s0). Input The first line contains three space-separated integers n, m, and s0 (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ s0 ≤ 1000) denoting the number of islands, the number of bridges, and the minimum required magical strength of each bridge, respectively. The following m lines describe the bridges. The i-th of them (1 ≤ i ≤ m) contains three space-separated integers ai, bi, and si (1 ≤ ai, bi ≤ n, ai ≠ bi, 1 ≤ si ≤ 1000), denoting that there is a bridge between island ai and island bi with a current magical strength of si. Output Print the minimum cost required to upgrade all the bridges to meet the desired magical strength. Examples Input 3 3 8 1 2 5 2 3 7 3 1 6 Output 6 Input 4 4 10 1 2 9 2 3 12 3 4 5 4 1 8 Output 8 Note For the first sample, we need to upgrade the bridges as follows: - Bridge 1-2 needs an upgrade from 5 to 8, costing 3. - Bridge 2-3 needs an upgrade from 7 to 8, costing 1. - Bridge 3-1 needs an upgrade from 6 to 8, costing 2. Thus, the total cost is 3 + 1 + 2 = 6. For the second sample, the upgrades required: - Bridge 1-2 needs an upgrade from 9 to 10, costing 1. - Bridge 3-4 needs an upgrade from 5 to 10, costing 5. - Bridge 4-1 needs an upgrade from 8 to 10, costing 2. Thus, the total cost is 1 + 5 + 2 = 8. The bridge 2-3 already meets the required strength and requires no upgrade.","solution":"def minimum_upgrade_cost(n, m, s0, bridges): Computes the minimum cost to upgrade all bridges to at least the required minimum strength s0. Parameters: n (int): Number of islands. m (int): Number of bridges. s0 (int): The required minimum magical strength. bridges (List[Tuple[int, int, int]]): List of tuples where each tuple contains three integers a, b, and si denoting a bridge between island a and island b with current strength si. Returns: int: The minimum cost to upgrade all bridges. total_cost = 0 for a, b, si in bridges: if si < s0: total_cost += s0 - si return total_cost"},{"question":"You are given an NxN grid representing a city map, where each cell contains a positive integer representing the height of a building at that location. Your task is to determine whether it\'s possible to traverse from the top-left corner of the grid to the bottom-right corner. The traversal must be done by moving to adjacent cells (up, down, left, or right), and the difference in height between two adjacent cells must not exceed a given value `k`. Write a program that determines if such a traversal is possible. Input The input is given in the following format: N k h11 h12 ... h1N h21 h22 ... h2N ... hN1 hN2 ... hNN The first line contains the size of the grid `N` (2 ≤ N ≤ 100) and the maximum allowed difference `k` (0 ≤ k ≤ 1000). The next N lines each contain N positive integers representing the height of the buildings in the grid. Output Output \\"YES\\" if it is possible to traverse from the top-left corner to the bottom-right corner of the grid under the given conditions. Otherwise, output \\"NO\\". Examples Input 4 3 1 4 2 3 2 3 3 4 3 5 4 2 4 2 3 2 Output YES Input 3 1 1 2 3 4 5 6 7 8 9 Output NO","solution":"def traverse_city(N, k, grid): Determines whether there is a path from the top-left to the bottom-right corner of the grid where the height difference between adjacent cells does not exceed k. from collections import deque # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # BFS initialization queue = deque([(0, 0)]) visited = set((0, 0)) def valid_move(x1, y1, x2, y2): return 0 <= x2 < N and 0 <= y2 < N and (x2, y2) not in visited and abs(grid[x1][y1] - grid[x2][y2]) <= k while queue: x, y = queue.popleft() # If we reached the bottom-right corner if x == N-1 and y == N-1: return \\"YES\\" # Explore all possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if valid_move(x, y, nx, ny): queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" # Example usage: # N, k = 4, 3 # grid = [ # [1, 4, 2, 3], # [2, 3, 3, 4], # [3, 5, 4, 2], # [4, 2, 3, 2] # ] # print(traverse_city(N, k, grid)) # Output: YES"},{"question":"Given an integer N, determine whether it is a prime number. Input: First and only line of the input contains an integer N. Output: Print \\"Yes\\" if N is a prime number, otherwise print \\"No\\". Constraints: 1 ≤ N ≤ 10^6 SAMPLE INPUT 7 SAMPLE OUTPUT Yes","solution":"import math def is_prime(N): Determines if the given number N is a prime. Args: N: int - The number to check for primality. Returns: str - \\"Yes\\" if N is a prime number, otherwise \\"No\\". if N <= 1: return \\"No\\" if N <= 3: return \\"Yes\\" if N % 2 == 0 or N % 3 == 0: return \\"No\\" i = 5 while i * i <= N: if N % i == 0 or N % (i + 2) == 0: return \\"No\\" i += 6 return \\"Yes\\""},{"question":"Given a chessboard of size N x N with N being any positive integer, imagine that each square can either be empty or contain a knight. The knights move according to the standard chess rules for a knight, which means they can jump in an L-shape: two squares in one direction and then one square perpendicular to that direction, or one square in one direction and then two squares perpendicular to that direction. Your task is to determine the minimum number of moves required for a knight to move from a starting square (sx, sy) to an ending square (ex, ey). Knights can move freely across the board unless they encounter the edges of the chessboard. # Input - The input consists of multiple datasets. - Each dataset is described by a single line containing five space-separated integers: N, sx, sy, ex, and ey. - N (2 ≤ N ≤ 100): The size of the chessboard (NxN). - sx, sy (1 ≤ sx, sy ≤ N): The starting position of the knight. - ex, ey (1 ≤ ex, ey ≤ N): The ending position of the knight. The end of the input is specified by a line with a single zero. # Output - For each dataset, output the minimum number of moves required for the knight to reach the ending square from the starting square. If it is not possible, output `-1`. # Example Input ``` 8 1 1 8 8 8 1 1 2 2 8 2 3 3 7 0 ``` Output ``` 6 4 3 ``` # Explanation - The first dataset describes an 8x8 chessboard with the knight starting at (1, 1) and moving to (8, 8). The minimum number of moves is `6`. - The second dataset describes an 8x8 chessboard with the knight starting at (1, 1) and moving to (2, 2). The minimum number of moves is `4`. - The third dataset describes an 8x8 chessboard with the knight starting at (2, 3) and moving to (3, 7). The minimum number of moves is `3`. Use the breadth-first search (BFS) algorithm to explore the minimum path due to its suitability for finding the shortest path in an unweighted graph, where each move of the knight represents an edge between nodes.","solution":"from collections import deque def knight_min_moves(N, sx, sy, ex, ey): Returns the minimum number of moves required for a knight to move from (sx, sy) to (ex, ey) on a NxN chessboard. if (sx, sy) == (ex, ey): return 0 moves = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)] visited = [[False for _ in range(N)] for _ in range(N)] queue = deque([(sx - 1, sy - 1, 0)]) # store (x, y, distance) visited[sx - 1][sy - 1] = True while queue: x, y, dist = queue.popleft() for dx, dy in moves: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]: if (nx, ny) == (ex - 1, ey - 1): return dist + 1 queue.append((nx, ny, dist + 1)) visited[nx][ny] = True return -1 def process_input(input_data): results = [] for line in input_data.strip().split(\'n\'): if line == \'0\': break N, sx, sy, ex, ey = map(int, line.split()) result = knight_min_moves(N, sx, sy, ex, ey) results.append(result) return results # Example Usage: input_data = 8 1 1 8 8 8 1 1 2 2 8 2 3 3 7 0 print(process_input(input_data))"},{"question":"In a certain social network, users can post messages and reply to messages. Each message (either a post or a reply) has a unique identifier. Messages can be nested, meaning a reply can have replies of its own, creating a hierarchy of messages. Given a list of messages in this social network, determine the depth of the deepest nested reply. The depth of a message is defined as follows: - Posts have a depth of 1. - Replies have a depth of 1 more than the depth of the message they are replying to. For example, consider the following messages: - `Message 1` (Post) - `Message 2` (Reply to Message 1) - `Message 3` (Reply to Message 2) - `Message 4` (Reply to Message 1) - `Message 5` (Post) In this example, the deepest nested reply is `Message 3`, which has a depth of 3. -----Input----- The first line contains an integer M (1 le M le 100) denoting the number of messages. Each of the next M lines contains two integers a_ i and b_ i (0 le b_ i < i), where a_ i is the identifier of the i^textrm {th} message and b_ i is the identifier of the message to which it is replying. If a message is a post (not a reply), b_ i will be 0. -----Output----- The output contains an integer denoting the depth of the deepest nested reply. -----Examples----- Sample Input 1: 5 1 0 2 1 3 2 4 1 5 0 Sample Output 1: 3 Sample Input 2: 3 1 0 2 0 3 2 Sample Output 2: 2","solution":"def deepest_reply_depth(messages): Determine the depth of the deepest nested reply in a list of messages. Parameters: messages (list of tuples): A list where each tuple contains (a_i, b_i) representing the message id and the id it replies to. Returns: int: The depth of the deepest nested reply. depth = {} # Dictionary to store the depth of each message max_depth = 0 for a_i, b_i in messages: if b_i == 0: depth[a_i] = 1 # It\'s a post with depth 1 else: depth[a_i] = depth[b_i] + 1 # It\'s a reply with depth one more than the one it replies to if depth[a_i] > max_depth: max_depth = depth[a_i] return max_depth # Example usage: # messages = [(1, 0), (2, 1), (3, 2), (4, 1), (5, 0)] # print(deepest_reply_depth(messages)) # Output should be 3"},{"question":"Matrix Transposition: A matrix is a rectangular array of numbers arranged in rows and columns. The transpose of a matrix is a new matrix where the rows of the original are the columns of the new, and vice versa. Write a function that takes a square matrix (a 2D list) as input and returns the transposed matrix. For example, given the following matrix: ```[[1, 2, 3], [4, 5, 6], [7, 8, 9]]``` The function should return: ```[[1, 4, 7], [2, 5, 8], [3, 6, 9]]``` Note that this problem can be solved more straightforwardly using built-in functions, but for this task, you\'re required to implement the transposition logic manually. Your function should be named `transpose_matrix` and should take a single input `matrix` (list of lists) and return the transposed `matrix`. Ensure your function handles errors gracefully, such as non-square matrices or empty input.","solution":"def transpose_matrix(matrix): Returns the transpose of a given square matrix. if not matrix or not all(len(row) == len(matrix) for row in matrix): raise ValueError(\\"Input must be a non-empty square matrix\\") n = len(matrix) transposed = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): transposed[j][i] = matrix[i][j] return transposed"},{"question":"Write a function that accepts a list of integers and returns a dictionary. The key of each dictionary entry should be the integer from the list, and the value should be a list of all unique pairs (as tuples) from the original list that sum up to the integer key. If no pairs sum up to a specific integer, the value should be an empty list for that key. Ensure the pairs (tuples) in the dictionary do not contain duplicate pairs or mirror pairs (e.g., (1,2) is the same as (2,1)). Here\'s the detailed specification of the function: ```python def find_sum_pairs(numbers: List[int], sums: List[int]) -> Dict[int, List[Tuple[int, int]]]: # your code here ``` # Example ```python numbers = [1, 2, 3, 4, 5, 6] sums = [5, 7, 9] ``` # Function output ```python { 5: [(1, 4), (2, 3)], 7: [(1, 6), (2, 5), (3, 4)], 9: [(3, 6), (4, 5)] } ``` In this example: - For the sum key `5`, possible pairs are `(1, 4)` and `(2, 3)`. - For the sum key `7`, possible pairs are `(1, 6)`, `(2, 5)`, and `(3, 4)`. - For the sum key `9`, possible pairs are `(3, 6)` and `(4, 5)`. Ensure that your solution is efficient and avoids unnecessary computations.","solution":"from typing import List, Dict, Tuple def find_sum_pairs(numbers: List[int], sums: List[int]) -> Dict[int, List[Tuple[int, int]]]: result = {s: [] for s in sums} # Initialize dictionary with empty lists for each sum pairs_checked = set() for i in range(len(numbers)): for j in range(i + 1, len(numbers)): pair = (numbers[i], numbers[j]) reverse_pair = (numbers[j], numbers[i]) pair_sum = numbers[i] + numbers[j] if pair in pairs_checked or reverse_pair in pairs_checked: continue # Skip if pair or its reverse has already been considered if pair_sum in result: result[pair_sum].append(pair) pairs_checked.add(pair) pairs_checked.add(reverse_pair) return result"},{"question":"You are given a list of integers representing the amount of rainfall recorded for different days. Your task is to determine the first day (index) such that the cumulative rainfall from the start of the list up to (and including) that day is equal to or exceeds a given threshold. If no such day exists, return -1. Input Format The first line contains an integer N, the number of days. The second line contains N integers, representing the rainfall on each day. The third line contains an integer T, the threshold. Output Format Output a single integer, the index of the first day where the cumulative rainfall meets or exceeds the threshold, or -1 if no such day exists. Sample Input 5 2 1 3 1 1 5 Sample Output 2 Explanation The cumulative rainfall is calculated as follows: - Day 0: 2 - Day 1: 2 + 1 = 3 - Day 2: 2 + 1 + 3 = 6 (threshold met) - Day 3: 6 + 1 = 7 - Day 4: 7 + 1 = 8 The first day where the cumulative rainfall meets or exceeds the threshold of 5 is day 2 (index 2). Note: The index of days starts from 0.","solution":"def find_threshold_day(rainfalls, threshold): Determines the first day (index) such that the cumulative rainfall up to and including that day meets or exceeds the given threshold. Parameters: rainfalls (list of int): List containing the amount of rainfall recorded for each day. threshold (int): The rainfall threshold to be met or exceeded. Returns: int: The index of the first day where the cumulative rainfall meets or exceeds the threshold, or -1 if no such day exists. cumulative_rainfall = 0 for i, rainfall in enumerate(rainfalls): cumulative_rainfall += rainfall if cumulative_rainfall >= threshold: return i return -1"},{"question":"------ Problem Statement ------ Berland State University plans to hold a series of lectures in various lecture halls. Each hall will host one lecture per day, and each lecture runs for a fixed duration. The university administration wants to ensure the efficient use of each hall to prevent scheduling conflicts. The university has M lecture halls, and they receive N lecture requests. Each request specifies the start and end time of the lecture. The administration needs to assign the lectures to lecture halls in such a way that no two lectures assigned to the same hall overlap. Your task is to determine the minimum number of lecture halls required to accommodate all the lecture requests without any overlap. ------ Input Format ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains: - The first line contains an integer N denoting the number of lecture requests. - Each of the next N lines contains two integers Si and Ei, where Si is the start time and Ei is the end time of the ith lecture (inclusive). ------ Output Format ------ For each test case, output a single integer denoting the minimum number of lecture halls required. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ Si < Ei ≤ 10^9 ------ Sample Input ------ 2 3 1 4 2 6 8 9 4 1 4 2 3 3 5 9 10 ------ Sample Output ------ 2 2 ------ Explanation ------ In the first test case: - The first lecture runs from 1 to 4. - The second lecture runs from 2 to 6. - The third lecture runs from 8 to 9. We can use two lecture halls: - Assign the first hall to the first and third lectures. - Assign the second hall to the second lecture. In the second test case: - The first lecture runs from 1 to 4. - The second lecture runs from 2 to 3. - The third lecture runs from 3 to 5. - The fourth lecture runs from 9 to 10. We can use two lecture halls: - Assign the first hall to the first and third lectures. - Assign the second hall to the second and fourth lectures. Thus, the minimum number of lecture halls required in both cases is 2.","solution":"from heapq import heappop, heappush def min_lecture_halls(lectures): if not lectures: return 0 # Sort the lectures by start time lectures.sort(key=lambda x: x[0]) # Initialize a min heap to keep track of end times of lectures min_heap = [] # Start with the first lecture and add its end time to the heap heappush(min_heap, lectures[0][1]) # Iterate through the rest of the lectures for i in range(1, len(lectures)): # If the current lecture starts after or exactly when the earliest ending lecture ends, # they can use the same hall, pop the end time from heap if lectures[i][0] >= min_heap[0]: heappop(min_heap) # Push the end time of the current lecture into the heap heappush(min_heap, lectures[i][1]) # The size of the heap represents the minimum number of halls required return len(min_heap) def process_test_cases(T, test_cases): results = [] for case in test_cases: N, lectures = case[\'N\'], case[\'lectures\'] results.append(min_lecture_halls(lectures)) return results"},{"question":"A vending machine dispenses different kinds of snacks, each costing a certain amount of money. You have some coins of different denominations, and you need to determine whether you can use a combination of these coins to buy a specific snack. If there are multiple ways to make the exact payment, you want to find the one that uses the minimum number of coins. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer M denoting the number of different coin denominations. - The second line contains M space-separated integers C_1, C_2, ldots, C_M representing the denominations of the available coins. - The third line contains a single integer P denoting the price of the snack. -----Output----- For each test case, print a single line containing one integer - the minimum number of coins needed to buy the snack. If it is not possible to buy the snack using the available coins, print -1. -----Constraints----- - 1 le T le 10 - 1 le M le 100 - 1 le C_i le 100 for each valid i - 1 le P le 10^5 -----Example Input----- 3 4 1 2 5 10 6 3 3 6 9 4 5 1 6 9 12 15 16 -----Example Output----- 2 2 2 -----Explanation----- Example case 1: - You can use the coins of denomination 1 and 5 to make the exact payment of 6 which require 2 coins. Example case 2: - You can use two coins of denomination 3 to make the exact payment of 4. Example case 3: - You can use coins of denomination 1 and 15 to make the exact payment of 16 which require 2 coins.","solution":"def min_coins(denominations, price): # Maximum value to simulate INF in this scenario INF = float(\'inf\') dp = [INF] * (price + 1) dp[0] = 0 for coin in denominations: for x in range(coin, price + 1): dp[x] = min(dp[x], dp[x - coin] + 1) return dp[price] if dp[price] != INF else -1 def solve_vending_machine(T, test_cases): results = [] for i in range(T): M = test_cases[i][0] coins = test_cases[i][1] price = test_cases[i][2] result = min_coins(coins, price) results.append(result) return results"},{"question":"Implement a function `parse_equation` that takes a string representing a mathematical equation containing only addition and multiplication operations and returns the result of the equation. The equation will be properly formatted with single-digit positive integers (from 1 to 9), `+` and `*` operators, and no spaces. The operations should follow standard precedence rules, where multiplication is performed before addition. # Input - A string `equation` (1 ≤ length of equation ≤ 100) containing digits (1-9) and operators (+, *). # Output - An integer representing the result of the evaluated equation. # Example ```python parse_equation(\\"2+3*4\\") # Should return 14 because 3*4=12 and 2+12=14 parse_equation(\\"1*2+3*4\\") # Should return 14 because 1*2=2, 3*4=12, and 2+12=14 parse_equation(\\"7*1+9\\") # Should return 16 because 7*1=7 and 7+9=16 parse_equation(\\"2+3+4*5*6\\") # Should return 122 because 4*5=20, 20*6=120, 2+3=5, and 5+120=125 ``` You are not allowed to use any built-in library functions for parsing or evaluating the equation. Implement the function yourself, respecting the operator precedence manually.","solution":"def parse_equation(equation): Evaluates a mathematical equation following the standard operator precedence. This method handles only + and * operations. # First process the multiplication operations terms = equation.split(\'+\') sum_result = 0 for term in terms: product = 1 for factor in term.split(\'*\'): product *= int(factor) sum_result += product return sum_result"},{"question":"A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Given a string s consisting of characters \'a\' to \'z\', we define the \\"beauty\\" of a non-empty subsequence as the number of distinct characters in the subsequence. Your task is to compute the maximum beauty of any subsequence of the string s. Input Format The first line contains an integer {T}, the number of test cases. Each of the following {T} lines contains a string s. Constraints 1 leq T leq 100 1 leq |s| leq 10^5 Output Format For each test case, output a single integer, the maximum beauty of any subsequence of the string s. Sample Input 2 ababc abcd Sample Output 3 4 Explanation In the first test case, the maximum subsequence beauty is achieved by subsequence \\"abc\\", which has 3 distinct characters. In the second test case, the maximum subsequence beauty is achieved by the subsequence \\"abcd\\", which has 4 distinct characters.","solution":"def max_beauty_of_subsequence(s): Returns the maximum beauty of any subsequence of the string s. The beauty of a subsequence is defined as the number of distinct characters in the subsequence. # Using a set to store distinct characters in the string s distinct_characters = set(s) # The number of distinct characters is the maximum beauty of any subsequence of s. return len(distinct_characters) def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(max_beauty_of_subsequence(s)) return results"},{"question":"Alex is a huge fan of chess and loves geometric patterns. He has a chessboard of size n x n, where each cell can either be empty or contain a bishop. Bishops can move diagonally any number of squares as long as their path is unobstructed. Alex wants to know the maximum number of bishops that can be placed on the chessboard such that no bishop can attack one another. Input The first line of input contains a single integer, t (1 ≤ t ≤ 10), the number of test cases. Each of the next t lines contains an integer, n (1 ≤ n ≤ 10^4), indicating the size of the chessboard. Output For each test case, print a single integer representing the maximum number of bishops that can be placed on the chessboard of size n x n without being able to attack each other. SAMPLE INPUT 4 1 2 3 4 SAMPLE OUTPUT 1 2 4 4 Explanation - For n = 1, you can place one bishop. - For n = 2, you can place two bishops on squares (1,1) and (2,2). - For n = 3, you can place four bishops on squares (1,2), (2,1), (2,3), and (3,2). - For n = 4, you can place four bishops on squares (1,1), (2,2), (3,3), and (4,4).","solution":"def max_bishops(t, board_sizes): Calculates the maximum number of bishops that can be placed on an n x n chessboard such that no bishop can attack one another. :param t: Number of test cases :param board_sizes: List of integers indicating the sizes of the chessboards :return: List of integers representing the maximum number of bishops for each board size results = [] for n in board_sizes: results.append(max_bishops_on_board(n)) return results def max_bishops_on_board(n): Helper function to calculate the maximum number of bishops on a single n x n chessboard. :param n: Size of the chessboard :return: Maximum number of bishops if n == 1: return 1 elif n == 2: return 2 else: return 2 * (n - 1)"},{"question":"Kate is playing with a toy robot and a series of commands on a 2D grid. The robot starts at the coordinate (x, y) and follows a list of commands that control its movement in the grid. Each command consists of a direction (\'N\', \'S\', \'E\', \'W\') and a distance the robot should move. - \'N\' (north) moves the robot up by the specified distance, i.e., (x, y) → (x, y+distance) - \'S\' (south) moves the robot down by the specified distance, i.e., (x, y) → (x, y-distance) - \'E\' (east) moves the robot to the right by the specified distance, i.e., (x, y) → (x+distance, y) - \'W\' (west) moves the robot to the left by the specified distance, i.e., (x, y) → (x-distance, y) The robot should execute each command one by one in the given order. Determine whether the robot will return to its starting point after executing all the commands. Input The first line contains two integers x and y ( - 10^9 ≤ x, y ≤ 10^9) — the starting point coordinates of the robot. The second line contains an integer n (1 ≤ n ≤ 100) — the number of commands. Each of the next n lines contains a command in the form of a character c (\'N\', \'S\', \'E\', \'W\') followed by an integer distance (1 ≤ distance ≤ 1000). Output Print \\"Yes\\" if the robot returns to its starting point after executing all the commands, and \\"No\\" otherwise. Examples Input 0 0 4 N 1 S 1 E 2 W 2 Output Yes Input 0 0 3 N 3 E 4 W 4 Output No Note In the first example, the robot follows the commands (0, 0) → (0, 1) → (0, 0) → (2, 0) → (0, 0) and returns to the starting point. In the second example, the robot follows the commands (0, 0) → (0, 3) → (4, 3) → (0, 3) and does not return to the starting point.","solution":"def will_return_to_start(x, y, commands): Determines if the robot returns to the starting point (x, y) after executing all the commands. :param x: Integer, starting x coordinate of the robot. :param y: Integer, starting y coordinate of the robot. :param commands: List of tuples, each containing a direction (\'N\', \'S\', \'E\', \'W\') and a distance. :return: \\"Yes\\" if the robot returns to the starting point, \\"No\\" otherwise. # Initial position start_x, start_y = x, y # Iterate over each command and update position for command in commands: direction, distance = command if direction == \'N\': y += distance elif direction == \'S\': y -= distance elif direction == \'E\': x += distance elif direction == \'W\': x -= distance # Check if the robot is back to the starting coordinates return \\"Yes\\" if x == start_x and y == start_y else \\"No\\""},{"question":"In a distant land, there is a kingdom where the most popular game is a version of rock-paper-scissors played with strings. The rules are as follows: - A string \'a\' can defeat string \'b\' in a round if and only if \'a\' is a subsequence of \'b\'. - The game consists of multiple rounds, with players submitting their strings simultaneously and comparing all pairs. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Given a list of strings, determine the maximum number of rounds a string can win. A string wins a round if it can defeat all other strings in that round except itself. Input Each test contains multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100), denoting the number of test cases. Description of the test cases follows. The first line of each test case contains a positive integer n (1 ≤ n ≤ 500), denoting the number of strings. The next n lines contain one string each. Strings consist of lowercase Latin letters, and their lengths do not exceed 50 characters. Output For each test case, output a single integer — the maximum number of rounds a string can win. Example Input 3 3 abc ab a 4 rock paper scissors string 2 aaa aa Output 2 1 1 Explanation - In the first test case, the string \'a\' can defeat both \'ab\' and \'abc\', hence it can win 2 rounds. - In the second test case, no string is a subsequence of the other, hence the maximum number of rounds a string can win is 1. - In the third test case, the string \'aa\' can defeat \'aaa\', so it can win 1 round.","solution":"def is_subsequence(a, b): Determines if a is a subsequence of b. it = iter(b) return all(char in it for char in a) def max_wins_in_game(test_cases): outputs = [] for n, strings in test_cases: max_wins = 1 # the minimum rounds any string can win is itself for i in range(n): wins = 0 for j in range(n): if i != j and is_subsequence(strings[i], strings[j]): wins += 1 max_wins = max(max_wins, wins) outputs.append(max_wins) return outputs"},{"question":"You are given a collection of books identified by numbers. Each book has a weight associated with it. Your task is to move all books from one shelf to another using the minimum number of operations. You are allowed to move multiple books in one operation, but the total weight of the books moved in a single operation cannot exceed a given maximum weight limit. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N (the number of books) and W (the maximum weight limit for one operation). - The second line of each test case contains N space-separated integers, where each integer represents the weight of a book. ------ Output Format ------ For each test case, print the minimum number of operations required to move all books. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 1 ≤ N ≤ 100 1 ≤ W ≤ 10^4 1 ≤ weight of each book ≤ W ----- Sample Input 1 ------ 2 5 10 3 3 3 3 3 4 12 6 4 8 10 ----- Sample Output 1 ------ 2 3 ----- Explanation 1 ------ Test Case 1: You can move the books in two operations; - Move books with weights 3, 3, and 3 (total weight = 9 ≤ 10). - Move the remaining books with weights 3 and 3 (total weight = 6 ≤ 10). Test Case 2: You can move the books in three operations; - Move the book with weight 10 (total weight = 10 ≤ 12). - Move books with weights 6 and 4 (total weight = 10 ≤ 12). - Move the remaining book with weight 8 (total weight = 8 ≤ 12).","solution":"def minimum_operations(T, test_cases): Calculate the minimum number of operations to move all books from one shelf to another. Parameters: T (int): The number of test cases test_cases (list of tuples): Each tuple contains two elements - a tuple of integers and a list of integers. The first element is a tuple (N, W) where N is the number of books and W is the maximum weight limit. The second element is a list of integers representing the weights of the books. Returns: list: A list containing the minimum number of operations for each test case. results = [] for case in test_cases: (N, W), weights = case weights.sort(reverse=True) operations = 0 while weights: current_weight = 0 i = 0 while i < len(weights): if current_weight + weights[i] <= W: current_weight += weights.pop(i) else: i += 1 operations += 1 results.append(operations) return results"},{"question":"Given an array of integers representing the heights of a series of bars, where the width of each bar is 1, write a function to calculate how much water it is able to trap after raining. Example: Input: heights = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The array [0,1,0,2,1,0,1,3,2,1,2,1] represents a series of bars at various heights. The structure will trap 6 units of rain water. Illustration: | | | | | | | | | | | | | | | | |__|__|__|__|__|__|__|__|__| Note: The array contains non-negative integers representing the heights. Follow up: Could you solve it in O(n) time complexity?","solution":"def trap(height): Calculate how much water can be trapped after raining. Args: - height (List[int]): List of non-negative integers representing the heights of bars. Returns: - int: The total units of trapped water. if not height or len(height) < 3: return 0 n = len(height) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = height[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) right_max[n - 1] = height[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - height[i] return water_trapped"},{"question":"Peter is organizing a coding competition and wants to find the top programmers. He has a list of all participants, each with a score. Peter wants you to write a program to find out the names of the top k participants, sorted by their scores in descending order. In case of ties (i.e., participants with the same score), the names should be sorted lexicographically. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of participants and the required number of top participants. The next n lines each contain a string and an integer separated by a space — the name of the participant and their score. The name consists only of English uppercase and lowercase letters, and the length of the name is between 1 and 50. The score is an integer between -1000 and 1000. Output Print the names of the top k participants, each on a new line. Examples Input 7 3 Alice 86 Bob 92 Charlie 92 David 85 Eve 91 Frank 89 Grace 85 Output Bob Charlie Eve Explanation The participants with the highest scores are Bob and Charlie, both with a score of 92. Since their scores are the same, they are sorted lexicographically. Next is Eve with a score of 91. Input 5 2 Zelda -30 Link 50 Mario -10 Peach 50 Bowser 0 Output Link Peach Explanation The participants with the highest scores are Link and Peach, both with a score of 50. Since their scores are the same, they are sorted lexicographically.","solution":"def top_k_participants(n, k, participants): Returns a list of names of the top k participants sorted by their scores in descending order. In case of ties, names are sorted lexicographically. # Sort first by score in descending order, then by name lexicographically participants.sort(key=lambda x: (-x[1], x[0])) # Extract top k participants\' names top_k = [name for name, score in participants[:k]] return top_k"},{"question":"Write a function called ```python def decode_string(s: str) -> str: ``` that takes a string encoded following a decoding pattern and returns the decoded version of the string. The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer. For example: ```python decode_string(\\"3[a]2[bc]\\") === \\"aaabcbc\\" decode_string(\\"3[a2[c]]\\") === \\"accaccacc\\" decode_string(\\"2[abc]3[cd]ef\\") === \\"abcabccdcdcdef\\" ```","solution":"def decode_string(s: str) -> str: Decodes a string encoded with the pattern k[encoded_string]. :param s: Encoded string to decode. :return: Decoded string. stack = [] current_num = 0 current_string = \\"\\" for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append(current_string) stack.append(current_num) current_string = \\"\\" current_num = 0 elif char == \']\': num = stack.pop() prev_string = stack.pop() current_string = prev_string + num * current_string else: current_string += char return current_string"},{"question":"To keep the complex and logical problem-solving nature, here\'s a new question that aligns well with the given sample: ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then T test cases follow. - The first line of each test case contains two space-separated integers N and X — the size of the array and the target sum. - The second line of each test case contains N space-separated integers denoting the elements of the array. ------ Output Format ------ For each test case, output either \\"YES\\" if there exists such a pair of distinct elements that add up to X, or \\"NO\\" if there isn\'t. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 1000 -10^5 ≤ text{array elements} ≤ 10^5 -10^5 ≤ X ≤ 10^5 ------ Sample Input 1 ------ 3 5 9 1 2 3 4 5 4 8 2 3 5 7 3 10 1 2 4 ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test case 1: The pairs (4, 5) and (3, 6) sum to 9. Test case 2: The pair (3, 5) sums to 8. Test case 3: There is no pair that sums to 10.","solution":"def find_pair_sum(T, test_cases): results = [] for case in test_cases: N, X, array = case seen = set() found = False for num in array: if X - num in seen: results.append(\\"YES\\") found = True break seen.add(num) if not found: results.append(\\"NO\\") return results # Function to parse input and call the matching function def process_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N, X = map(int, lines[idx].split()) array = list(map(int, lines[idx + 1].split())) test_cases.append((N, X, array)) idx += 2 return find_pair_sum(T, test_cases)"},{"question":"You are given a string S consisting of lowercase English letters and/or digits. Another string T is initially empty. Determine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times: - Append one of the following at the end of T: apple, banana, 321 and xyz. -----Constraints----- - 1≦|S|≦10^5 - S consists of lowercase English letters and digits. -----Input----- The input is given from Standard Input in the following format: S -----Output----- If it is possible to obtain S = T, print YES. Otherwise, print NO. -----Sample Input----- 321applebanana -----Sample Output----- YES Append 321, then apple, and finally banana at the end of T in this order, to obtain S = T.","solution":"def can_form_string(S): Determines if the string S can be obtained by performing the described operations an arbitrary number of times. # List of substrings that can be appended substrings = [\\"apple\\", \\"banana\\", \\"321\\", \\"xyz\\"] # Using dynamic programming to keep track if we can form the substring up to index i dp = [False] * (len(S) + 1) dp[0] = True # We can form the empty string for i in range(1, len(S) + 1): for sub in substrings: if i >= len(sub) and S[i - len(sub):i] == sub and dp[i - len(sub)]: dp[i] = True break return \\"YES\\" if dp[-1] else \\"NO\\""},{"question":"You are given an integer array and a set of operations that need to be performed on this array. Each operation consists of two integers, l and r, and requires you to find the sum of squares of the elements of the array from index l to r inclusive. Note that the array is 1-indexed. Consider the following example: let the array be a = [1, 2, 3, 4, 5]. If an operation specifies l = 2 and r = 4, then we need to find the sum of squares of elements a[2], a[3], a[4], which is 2^2 + 3^2 + 4^2 = 4 + 9 + 16 = 29. -----Input----- The first line contains an integer n (1 le n le 2 cdot 10^5) representing the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^4) — the elements of the array. The third line contains an integer q (1 le q le 10^5) — the number of queries. Each of the next q lines contain two integers l and r (1 le l le r le n), representing the indices for the query. -----Output----- For each query, print a single integer representing the sum of squares of the array elements between indices l and r inclusive. -----Examples----- Input 5 1 2 3 4 5 3 1 3 2 4 1 5 Output 14 29 55 -----Note----- In the first query of the sample, the sum of squares of elements from index 1 to index 3 is 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14. In the second query of the sample, the sum of squares of elements from index 2 to index 4 is 2^2 + 3^2 + 4^2 = 4 + 9 + 16 = 29. In the third query of the sample, the sum of squares of elements from index 1 to index 5 is 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 1 + 4 + 9 + 16 + 25 = 55.","solution":"def precompute_sum_of_squares(arr): Precomputes the prefix sum of squares array. n = len(arr) prefix_sum_squares = [0] * (n + 1) for i in range(1, n + 1): prefix_sum_squares[i] = prefix_sum_squares[i - 1] + arr[i - 1] ** 2 return prefix_sum_squares def query_sum_of_squares(prefix_sum_squares, l, r): Returns the sum of squares of elements from index l to r (inclusive) using precomputed prefix sums. return prefix_sum_squares[r] - prefix_sum_squares[l - 1] def main(n, arr, queries): prefix_sum_squares = precompute_sum_of_squares(arr) results = [] for l, r in queries: results.append(query_sum_of_squares(prefix_sum_squares, l, r)) return results"},{"question":"Alex is participating in a game where he has to construct the word \\"PYTHON\\" using a set of operations. He starts with any of the characters \'P\', \'Y\', \'T\', \'H\', \'O\', or \'N\'. He can perform two types of operations: 1. Append: He can append a character (P, Y, T, H, O, or N) to the existing string. 2. Replace: He can replace any character in the string with another character (P, Y, T, H, O, or N). The goal is to transform the starting character into the word \\"PYTHON\\" with the minimum number of operations. Write a function that takes the starting character and determines the minimum number of operations required to transform it into \\"PYTHON\\". # Input: - A single character c (one of \'P\', \'Y\', \'T\', \'H\', \'O\', \'N\') which is the starting character. # Output: - A single integer representing the minimum number of operations needed to transform the starting character into the word \\"PYTHON\\". # Examples: Example 1: Input: ``` P ``` Output: ``` 5 ``` Explanation: - Starting with \'P\', the required operations are: append \'Y\', append \'T\', append \'H\', append \'O\', append \'N\'. Example 2: Input: ``` Y ``` Output: ``` 6 ``` Explanation: - Starting with \'Y\', the required operations are: append \'P\', replace \'Y\' with \'P\', append \'Y\', append \'T\', append \'H\', append \'O\', append \'N\'. Example 3: Input: ``` N ``` Output: ``` 6 ``` Explanation: - Starting with \'N\', the required operations are: replace \'N\' with \'P\', append \'Y\', append \'T\', append \'H\', append \'O\', append \'N\'. # Note In each example, the minimum number of operations is calculated to form the exact word \\"PYTHON\\" starting with any given character.","solution":"def min_operations_to_python(start_char): Determines the minimum number of operations required to transform the starting character into the word \\"PYTHON\\". Parameters: start_char (str): the starting character, one of \'P\', \'Y\', \'T\', \'H\', \'O\', \'N\'. Returns: int: minimum number of operations needed to transform start_char into \\"PYTHON\\". target = \\"PYTHON\\" # If the starting character is \'P\', compute operations to append the rest if start_char == \'P\': return len(target) - 1 # Otherwise, compute operations: replace start_char with \'P\' and append the rest return len(target)"},{"question":"A group of friends is planning to play a unique game with dominoes. They have a rectangular table with some dimensions. The game requires them to place dominoes on the table without overlapping or going off the edge. Each domino is a 2x1 rectangle. Your task is to determine how many dominoes can be placed on the table. Input:- The first line of input contains T, the number of test cases. Each of the next T lines contains two space-separated integers W and H, representing the width and height of the table respectively. Output:- Output T lines, each containing a single integer indicating the maximum number of dominoes that can be placed on the table for each test case. Constraints: 1 ≤ T ≤ 10^5 1 ≤ W, H ≤ 10^9 SAMPLE INPUT 3 2 3 4 4 2 2 SAMPLE OUTPUT 3 8 2","solution":"def max_dominoes(t, dimensions): This function calculates the maximum number of 2x1 dominoes that can be placed on a WxH table. :param t: Integer, the number of test cases. :param dimensions: List of tuples, where each tuple contains two integers W and H. :return: List of integers, each representing the maximum number of dominoes for each test case. results = [] for w, h in dimensions: max_dominoes = (w * h) // 2 results.append(max_dominoes) return results"},{"question":"A developer is working on a project management software and needs to implement a task scheduler which respects dependencies among tasks. Each task is represented by a node in a Directed Acyclic Graph (DAG), and a directed edge from task `u` to task `v` indicates that task `u` must be completed before task `v`. The developer needs a function that will return a valid order in which the tasks can be completed. Given the number of tasks `N` and a list of dependencies, determine a valid task order or detect if such an order is not possible. Input: The first line contains an integer `T`, denoting the number of test cases. Each test case will contain the following: - The first line contains an integer `N`, the number of tasks. - The second line contains an integer `M`, the number of dependencies. - The next `M` lines each contain two integers `u` and `v`, indicating that task `u` must be completed before task `v`. Output: For each test case: - If a valid order exists, print a single line containing the tasks in a valid order separated by a space. - If no valid order exists, print \\"NO\\" (quotes for clarity). Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 0 ≤ M ≤ (N * (N - 1)) - 1 ≤ u, v ≤ N - No self loops or multiple edges between the same nodes. SAMPLE INPUT 2 5 4 1 2 2 3 3 4 4 5 4 4 1 2 2 3 3 4 4 1 SAMPLE OUTPUT 1 2 3 4 5 NO Explanation: For the first case, the valid order of tasks is straightforward: \\"1 2 3 4 5\\". For the second case, there is a cycle in the dependencies, making it impossible to complete all tasks in any order.","solution":"from collections import defaultdict, deque def find_task_order(N, deps): # Build the graph and in-degree array graph = defaultdict(list) in_degree = [0] * (N + 1) for u, v in deps: graph[u].append(v) in_degree[v] += 1 # Queue for the nodes with in-degree 0 queue = deque() for i in range(1, N + 1): if in_degree[i] == 0: queue.append(i) # Result array to store the task order result = [] while queue: node = queue.popleft() result.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # If result contains all tasks, return it; otherwise, there\'s a cycle if len(result) == N: return result else: return \\"NO\\" def task_scheduler(T, test_cases): results = [] for i in range(T): N, M, deps = test_cases[i] result = find_task_order(N, deps) if result == \\"NO\\": results.append(\\"NO\\") else: results.append(\\" \\".join(map(str, result))) return results"},{"question":"Alex is practicing for an upcoming coding competition and wants to improve his skills with 2D arrays. He came up with the following problem: Given a 2D array of integers with \'n\' rows and \'m\' columns, he needs to calculate the sum of all unique elements in the matrix. Two elements are considered unique if they appear only once in the array. Help Alex by writing a program that reads the matrix and determines the sum of all unique elements. -----Input----- The first line contains two integers n (1 ≤ n ≤ 1000) and m (1 ≤ m ≤ 1000), the dimensions of the matrix. The next n lines contain m space-separated integers each representing the elements of the matrix. Each element of the matrix a_{ij} ( -10^9 ≤ a_{ij} ≤ 10^9). -----Output----- Print a single integer, the sum of all unique elements in the matrix. -----Examples----- Input 3 3 1 2 3 4 5 2 6 7 1 Output 25 Input 2 2 1 1 1 1 Output 0 -----Note----- In the first sample, the unique elements are [3, 4, 5, 6, 7]. Their sum is 25. In the second sample, there are no unique elements in the matrix, so the output is 0.","solution":"def sum_of_unique_elements(n, m, matrix): from collections import Counter # Flatten the matrix into a single list flattened_matrix = [element for row in matrix for element in row] # Count the occurrences of each element element_count = Counter(flattened_matrix) # Find elements that occur only once and sum them unique_elements_sum = sum(element for element, count in element_count.items() if count == 1) return unique_elements_sum"},{"question":"Elena is participating in a sports tournament where she has to complete a series of obstacle courses. There are N courses in the tournament, each with a different difficulty level. The difficulty level of the i-th course is represented by a positive integer D_i (1 leq D_i leq 10^6). Elena wants to complete all courses in such a way that the difference in difficulty between any two consecutive courses is minimal. To achieve her goal, Elena is allowed to rearrange the courses in any order she prefers. Your task is to help Elena find the optimal ordering of the courses such that the maximum difference in difficulty between any two consecutive courses is minimized. Write a program to determine this minimal possible maximum difference. # Input The input consists of two lines: 1. The first line contains a single integer N (2 leq N leq 100,000), representing the number of obstacle courses. 2. The second line contains N space-separated integers D_1, D_2, ldots, D_N, representing the difficulty levels of the courses. # Output Output a single integer representing the minimal possible maximum difference in difficulty between any two consecutive courses in the optimal ordering. # Example Input ``` 5 4 2 9 7 5 ``` Output ``` 2 ``` # Explanation An optimal ordering of the courses could be `2, 4, 5, 7, 9`. The differences between consecutive courses would be `2, 1, 2, 2`. The maximum difference is `2`, which is the minimal possible maximum difference for this set of courses.","solution":"def minimize_max_difference(N, difficulties): Returns the minimized maximum difference between the difficulties of consecutive courses. # Sort the courses based on difficulty difficulties.sort() # The minimal possible maximum difference is the maximum difference # found in the sorted list of difficulties between consecutive elements min_max_diff = float(\'inf\') for i in range(1, N): min_max_diff = min(min_max_diff, difficulties[i] - difficulties[i - 1]) return min_max_diff # Example usage N = 5 difficulties = [4, 2, 9, 7, 5] print(minimize_max_difference(N, difficulties)) # Outputs 1"},{"question":"You are given an integer array a of length n. Let f(x) of an array be the number of unique values in the array. For example, f([1, 2, 3, 1]) = 3 because there are three unique values (1, 2, and 3). You have to solve q queries on the array. Each query is of the form (l, r), and you need to return the value of f(a[l], a[l+1], ldots, a[r]). The number of `distinct` values in an array is the number of different integer values in the array. # Input The first line of input contains two integers n and q (1 le n, q le 10^5) — the length of the array and the number of queries. The next line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^5) — the elements of the array. The next q lines contain two integers l and r (1 le l le r le n) — the indices of the subsegment for each query. # Output For each query, output a single integer — the number of unique values in the subsegment defined by (l, r). # Example Input: ``` 5 3 1 2 1 3 2 1 3 2 4 1 5 ``` Output: ``` 2 3 3 ``` # Note: In the first query, f([a_1, a_2, a_3]) = 2 because the subsegment [1, 2, 1] has 2 unique values: 1 and 2. In the second query, f([a_2, a_3, a_4]) = 3 because the subsegment [2, 1, 3] has 3 unique values: 1, 2, and 3. In the third query, f([a_1, a_2, a_3, a_4, a_5]) = 3 because the subsegment [1, 2, 1, 3, 2] has 3 unique values: 1, 2, and 3.","solution":"def count_unique_values_for_queries(n, q, a, queries): Returns the list of results for each query. Each result is the number of unique values in the subsegment of the array. :param n: int - Length of the array :param q: int - Number of queries :param a: list of int - The array of elements :param queries: list of tuples - Each tuple contains (l, r) representing the indices of the subsegment :return: list of int - Results for each query results = [] for l, r in queries: subsegment = a[l-1:r] unique_values = set(subsegment) results.append(len(unique_values)) return results"},{"question":"In Python, you can use a `for` loop to iterate over a sequence (such as a list, tuple, string) or other iterable objects. Here is an example of using a `for` loop to iterate over a list: ```python fruits = [\\"apple\\", \\"banana\\", \\"cherry\\"] for fruit in fruits: print(fruit) ``` This code will print each item in the list `fruits` in order. In this example, `fruit` takes the value of each element in `fruits` sequentially. Task: Write a function `sum_even_numbers(arr)` that takes a list of integers `arr` and returns the sum of all the even numbers in the list. If there are no even numbers, the function should return 0. You can assume all elements in the list are integers. # Examples: ```python sum_even_numbers([1, 2, 3, 4, 5, 6]) # returns 12 sum_even_numbers([1, 3, 5, 7]) # returns 0 sum_even_numbers([2, 4, 6, 8]) # returns 20 sum_even_numbers([]) # returns 0 ``` # Note: 1. Use a `for` loop to iterate through the list. 2. Use conditional statements to check if a number is even. 3. Use an accumulator variable to keep track of the sum of even numbers.","solution":"def sum_even_numbers(arr): Returns the sum of all the even numbers in the list. If there are no even numbers, returns 0. sum_of_evens = 0 for num in arr: if num % 2 == 0: sum_of_evens += num return sum_of_evens"},{"question":"Write a function that, given an integer n (1 <= n <= 10^6), returns the sum of all its proper divisors (excluding the number itself). Random tests go up to n = 1000000. Examples ```python sum_of_proper_divisors(6) == 6 # 1 + 2 + 3 sum_of_proper_divisors(12) == 16 # 1 + 2 + 3 + 4 + 6 sum_of_proper_divisors(15) == 9 # 1 + 3 + 5 sum_of_proper_divisors(28) == 28 # 1 + 2 + 4 + 7 + 14 ```","solution":"def sum_of_proper_divisors(n): Returns the sum of all proper divisors of n (excluding the number itself). if n <= 1: return 0 divisors_sum = 1 # 1 is always a proper divisor for i in range(2, int(n**0.5) + 1): if n % i == 0: if i == n // i: divisors_sum += i else: divisors_sum += i + n // i return divisors_sum"},{"question":"Alice has recently started to work as a software developer and wants to impress her new employer by solving a coding puzzle. The task is to find the length of the longest contiguous subarray of distinct integers from a given array of integers. More formally, you are given an array of integers a_1, a_2, ..., a_{n}. Find the longest subarray such that all elements in the subarray are distinct. -----Input----- The first line contains one integer n (1 ≤ n ≤ 100). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (-10^5 ≤ a_{i} ≤ 10^5). -----Output----- Print one integer — the length of the longest contiguous subarray of distinct integers. -----Examples----- Input 5 2 1 2 1 3 Output 3 Input 6 1 2 3 4 5 6 Output 6 Input 4 1 1 1 1 Output 1","solution":"def longest_contiguous_subarray_length(n, arr): Returns the length of the longest contiguous subarray of distinct integers. Parameters: n (int): The number of elements in the array arr (list of int): The list of integers Returns: int: The length of the longest contiguous subarray of distinct integers. max_length = 0 current_subarray = [] seen = set() start = 0 for end in range(n): while arr[end] in seen: seen.remove(arr[start]) start += 1 seen.add(arr[end]) current_length = end - start + 1 max_length = max(max_length, current_length) return max_length"},{"question":"Given a matrix of size MxN, consisting of non-negative integers, where each cell contains an amount of gold. Your task is to determine the maximum amount of gold you can collect starting from any cell in the first column to any cell in the last column. You can move to the cell diagonally up-right, right, and diagonally down-right from the current cell. Example 1: Input: matrix = [ [1, 3, 3], [2, 1, 4], [0, 6, 4] ] Output: 12 Explanation: The path to get the maximum amount of gold is 1 -> 3 -> 4 -> 4, and the total amount collected is 12. Example 2: Input: matrix = [ [1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2] ] Output: 16 Explanation: The path to get the maximum amount of gold is 2 -> 2 -> 4 -> 5 -> 2, and the total amount collected is 16. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxGold() which takes the matrix as an argument and returns the maximum amount of gold collected. Expected Time Complexity: O(MxN), where M is the number of rows and N is the number of columns. Expected Auxiliary Space: O(MxN) Constraints: 1 <= M, N <= 100 0 <= matrix[i][j] <= 100","solution":"def maxGold(matrix): Given a matrix of size MxN, this function calculates the maximum amount of gold one can collect starting from any cell in the first column to any cell in the last column. M = len(matrix) N = len(matrix[0]) # dp array to store results of subproblems dp = [[0 for _ in range(N)] for _ in range(M)] # Fill the dp array for col in range(N-1, -1, -1): for row in range(M): # Gold collected on going to the cell on the right (->) if col == N-1: right = 0 else: right = dp[row][col+1] # Gold collected on going to the cell to right up (/->) if row == 0 or col == N-1: right_up = 0 else: right_up = dp[row-1][col+1] # Gold collected on going to the cell to right down (->) if row == M-1 or col == N-1: right_down = 0 else: right_down = dp[row+1][col+1] # Maximum gold collected from taking either of the three paths dp[row][col] = matrix[row][col] + max(right, right_up, right_down) # The maximum amount of gold collected will be the maximum # value in the first column of all rows return max(dp[row][0] for row in range(M)) # Example Usage: # matrix = [ # [1, 3, 3], # [2, 1, 4], # [0, 6, 4] # ] # print(maxGold(matrix)) # Output: 12"},{"question":"Bob is exploring the concept of prime factorization and he stumbled upon an interesting problem. He has a natural number N and he wants to break it down into its constituent prime factors, but not just that, he is interested in using these prime factors to answer Q queries. Each query consists of a type identifier T and a natural number K. Based on the type of query, Bob needs to perform one of the following operations: - If T = 1, find the maximum power of K that divides N. - If T = 2, find the smallest prime factor of N which is greater than or equal to K. - If T = 3, determine whether K divides N, and if so, find the number of distinct prime factors of N/K. Bob can solve these queries on his own, but he prefers to be efficient in whatever he does. Help Bob by writing a program to handle these queries for him. ------ Input ------ The first line will have the natural number N and integer Q, representing the number of queries. Each of the next Q lines contains two integers T and K, representing the type of the query and the natural number. ------ Output ------ For each of the Q lines, output the result for the corresponding query in separate lines. ------ Constraints ------ 1 ≤ N ≤ 10^12 1 ≤ Q ≤ 10^5 1 ≤ T ≤ 3 1 ≤ K ≤ 10^12 ------ Sample Input ------ 1000 3 1 2 2 3 3 5 ------ Sample Output ------ 3 5 2 ------ Explanation ------ - For the first query, the maximum power of 2 that divides 1000 is 3 (since 1000 = 2^3 * 5^3). - For the second query, the smallest prime factor of 1000 greater than or equal to 3 is 5. - For the third query, 5 divides 1000 and the number of distinct prime factors of 1000/5 (which is 200) is 2 (since 200 = 2^3 * 5^2).","solution":"import math from collections import Counter def prime_factors(n): Return a dictionary with prime factors as keys and their powers as values. i = 2 factors = {} while i * i <= n: while (n % i) == 0: if i in factors: factors[i] += 1 else: factors[i] = 1 n //= i i += 1 if n > 1: factors[n] = 1 return factors def get_smallest_prime_greater_equal(n, k): if k <= 2: return 2 if n % 2 == 0 else 3 prime = k if k % 2 == 1 else k + 1 while prime * prime <= n: if all(prime % d != 0 for d in range(3, int(math.sqrt(prime)) + 1, 2)): if n % prime == 0: return prime prime += 2 return n def handle_queries(n, queries): results = [] factors = prime_factors(n) for t, k in queries: if t == 1: # max power of k that divides n if k in factors: results.append(factors[k]) else: results.append(0) elif t == 2: # smallest prime factor >= k results.append(get_smallest_prime_greater_equal(n, k)) elif t == 3: # does k divide n and how many distinct prime factors of n/k if n % k == 0: remaining_factors = prime_factors(n // k) results.append(len(remaining_factors)) else: results.append(0) return results"},{"question":"Calculate the minimum number of increments needed to convert an array into a non-decreasing array by incrementing its elements. You are allowed to increment any element of the array any number of times. Each increment operation on a single element increases the cost by 1. ---Input--- The first line contains an integer n (1 le n le 2 cdot 10^5) — the number of elements in the array. The second line contains n space-separated integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the initial values of the array. ---Output--- Print one integer — the minimum cost to make the array non-decreasing. ---Examples--- Input 5 4 2 3 1 5 Output 6 Input 4 1 5 2 4 Output 4 ---Note--- In the first example, incrementing the 2nd element from 2 to 4 costs 2 operations, incrementing the 4th element from 1 to 4 costs 3 operations, and incrementing the 3rd element from 3 to 4 costs 1 operation. So, the total cost is 6. In the second example, incrementing the 3rd element from 2 to 5 costs 3 operations and the 4th element from 4 to 5 costs 1 operation. So, the total cost is 4.","solution":"def min_increments_to_non_decreasing(arr): Calculate the minimum number of increments needed to convert an array into a non-decreasing array by incrementing its elements. Args: arr (list): List of integers representing the array. Returns: int: The minimum cost to make the array non-decreasing. cost = 0 for i in range(1, len(arr)): if arr[i] < arr[i-1]: cost += arr[i-1] - arr[i] arr[i] = arr[i-1] return cost"},{"question":"In the world of \\"Land of the Odd\\", there lives a genius named Jane who loves to work with odd numbers. She has recently encountered a problem and needs your help to solve it. Jane has a list of N integers and she wants to know the number of distinct pairs (i, j) where 1 ≤ i < j ≤ N such that the sum of the i-th and j-th integers is odd. ------ Input ------ The first line contains a single integer T, the number of test cases (1 ≤ T ≤ 100). Each test case starts with an integer N (1 ≤ N ≤ 100000), the number of integers in the list. The next line contains N integers A1, A2, ..., AN (1 ≤ Ai ≤ 1000000000), representing the list. ------ Output ------ For each test case, output the number of distinct pairs (i, j) such that the sum of the i-th and j-th integers is odd. ----- Sample Input ------ 2 3 1 2 3 4 2 2 4 6 ----- Sample Output ------ 2 0","solution":"def count_odd_sum_pairs(test_cases): results = [] for N, A in test_cases: odd_count = sum(1 for number in A if number % 2 != 0) even_count = N - odd_count results.append(odd_count * even_count) return results"},{"question":"Given an array of integers, return true if there exists a triplet (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exist, return false. Example 1: Input: [1, 2, 3, 4, 5] Output: true Explanation: There is a triplet (1, 2, 3) or (2, 3, 4) which satisfies the condition. Example 2: Input: [5, 4, 3, 2, 1] Output: false Explanation: No triplet exists which satisfies the condition. Example 3: Input: [2, 1, 5, 0, 4, 6] Output: true Explanation: There is a triplet (2, 5, 6) which satisfies the condition. Constraints: 1 <= nums.length <= 1000 -10^9 <= nums[i] <= 10^9","solution":"def increasing_triplet(nums): Returns true if there exists a triplet (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k], otherwise false. first = second = float(\'inf\') for num in nums: if num <= first: first = num elif num <= second: second = num else: return True return False"},{"question":"In a programming competition, participants are asked to solve a problem of tracking and scoring, involving a series of events and tracking a group of players\' scores. Each event either results in a player gaining or losing points, and the players\' standings need to be updated continually. Your task is to determine the player with the highest score after a given series of events. -----Input----- The first line of input contains an integer `n` (`1 ≤ n ≤ 1000`) — the number of events. Each of the next `n` lines contains a string and an integer separated by a space. The string `name` (which will be a single word with up to 30 lowercase English letters) is the name of the player, and the integer `points` (which can range from `-100` to `100`) indicates the change in the player\'s score for that event. -----Output----- Print the name of the player who has the highest score after all the events. If there are multiple players with the highest score, return the lexicographically smallest name. -----Examples----- Input 5 alice 10 bob -5 alice -3 bob 20 charlie 22 Output charlie Input 3 david 8 erin 5 david 3 Output david Input 4 tom -2 jack 4 tom 1 jack 3 Output jack -----Note----- In the first example, player `charlie` has the highest score of 22 after all events, even though `alice` and `bob` also participated. In the second example, `david` has a score of 11, which is higher than `erin`\'s score of 5. In the third example, although both `tom` and `jack` have participated, `jack` has the highest score of 7.","solution":"def highest_scoring_player(events): scores = {} for event in events: name, points = event.split() points = int(points) if name in scores: scores[name] += points else: scores[name] = points max_score = max(scores.values()) winners = [name for name, score in scores.items() if score == max_score] return min(winners)"},{"question":"The Ancient Library of Alexandria was renowned for its vast collection of scrolls, manuscripts, and other documents. Over the centuries, some parts of the collection have become jumbled, and the librarians seek to restore order. One of their major challenges is to identify and collect all scrolls authored by a single prominent author whose style includes the usage of specific key phrases. They need your help to do so. You need to write a program that processes a long text document and finds all occurrences of a specific key phrase. The document is given as multiple lines of text. Your task is to count how many times the key phrase appears in the text, where a key phrase is defined as a sequence of words separated by spaces. -----Input----- The input starts with two integers, n and m, where 1 leq n leq 1000 and 1 leq m leq 100, representing the number of lines in the text document and the number of words in the key phrase respectively. The following n lines each contain a string of words (with a maximum line length of 1000 characters). The last line contains the key phrase, which consists of m words separated by single spaces. Each word in the text and the key phrase consists of only lowercase alphabetic characters. -----Output----- Print a single integer denoting the total number of occurrences of the key phrase in the text document. -----Examples----- Sample Input: 5 3 the quick brown fox jumps over the lazy dog the quick brown fox is very quick and the fox is clever the quick brown fox is jumping and quick the quick brown Sample Output: 3","solution":"def count_key_phrase_occurrences(n, m, text_lines, key_phrase): Count the number of occurrences of the key phrase in the given text document. Parameters: n (int): Number of lines in the text document. m (int): Number of words in the key phrase. text_lines (list): List of strings representing lines of the text document. key_phrase (string): The key phrase to search for. Returns: int: Total number of occurrences of the key phrase in the text document. combined_text = \' \'.join(text_lines) return combined_text.count(key_phrase) # Example usage: # n = 5 # m = 3 # text_lines = [ # \\"the quick brown fox jumps\\", # \\"over the lazy dog the quick\\", # \\"brown fox is very quick\\", # \\"and the fox is clever\\", # \\"the quick brown fox is jumping and quick\\" # ] # key_phrase = \\"the quick brown\\" # print(count_key_phrase_occurrences(n, m, text_lines, key_phrase)) # Output: 3"},{"question":"Given a matrix of size MxN filled with integers, your task is to complete the function `diagonalTraversal()` that prints the matrix in a diagonal order. The diagonals traverse from each element of the last row to the first column (left to right). Each diagonal should be printed from top to bottom. Input: - The function takes two arguments as input: an integer M representing the number of rows and an integer N representing the number of columns of the matrix, followed by the matrix elements in row-wise order. - The function will be called separately for each test case. Output: - For each test case, print the elements of the matrix in diagonal order. User Task: - The task is to complete the function `diagonalTraversal(M, N, matrix)` which should print the matrix in the required diagonal order. Constraints: - 1 <= T <= 50 - 1 <= M, N <= 100 - -1000 <= matrix[i][j] <= 1000 Example: Input: 2 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 3 1 2 3 4 5 6 7 8 9 Output: 1 5 2 9 6 3 13 10 7 4 14 11 8 15 12 16 1 4 2 7 5 3 8 6 9 Explanation: In the first test case, the diagonals of the matrix are: 1 5 2 9 6 3 13 10 7 4 14 11 8 15 12 16 In the second test case, the diagonals of the matrix are: 1 4 2 7 5 3 8 6 9","solution":"def diagonalTraversal(M, N, matrix): Prints the matrix in diagonal order from the bottom row to the top row. result = [] # Traverse from the bottom-left to the top-right for k in range(M): i, j = k, 0 diagonal = [] while i >= 0 and j < N: diagonal.append(matrix[i][j]) i -= 1 j += 1 result.append(diagonal) # Traverse from the first column in the bottom-right for k in range(1, N): i, j = M - 1, k diagonal = [] while i >= 0 and j < N: diagonal.append(matrix[i][j]) i -= 1 j += 1 result.append(diagonal) # Return the formatted result to be more testable formatted_result = [] for diag in result: formatted_result.append(\\" \\".join(map(str, diag))) return formatted_result"},{"question":"Alice loves sorting numbers, and she has a new sorting game she plays with Bob. Given a list of integers, Alice and Bob take turns picking any number from the list and moving it to the front of the list. The game continues until no more moves are needed and the list is sorted in strictly increasing order. Alice always takes the first turn. Your task is to help Alice determine if it is possible to get the list sorted in strictly increasing order. -----Input----- The first line of the input contains an integer m — the number of test cases (1 leq m leq 10000). The following m lines each contain a single test case. Each test case consists of a list of integers. The length of the list is at least 1 and at most 50, and each integer is between -10^6 and 10^6. -----Output----- Output m lines to the output — a single line for each test case. Output \\"YES\\" if it is possible to get the list sorted in strictly increasing order. Output \\"NO\\" otherwise. -----Examples----- Input 4 3 1 2 5 4 3 2 1 2 2 2 2 1 9 2 8 3 7 Output YES YES NO YES -----Note----- In the first example, Alice can pick 1 and move it to the front, then 2 can be moved after 1, resulting in [1, 2, 3]. In the second example, Alice should keep picking the smallest current number and moving it to the front to get [1, 2, 3, 4, 5]. In the third example, the list cannot be sorted in strictly increasing order as all elements are the same.","solution":"def is_sorting_possible(test_cases): results = [] for lst in test_cases: # A list with duplicates cannot be sorted in strictly increasing order if len(lst) != len(set(lst)): results.append(\\"NO\\") continue # If the list and the sorted version of the list is the same, it\'s possible if lst == sorted(lst): results.append(\\"YES\\") else: results.append(\\"YES\\") return results def parse_input(user_input): lines = user_input.split(\'n\') m = int(lines[0]) test_cases = [] for i in range(1, m + 1): test_cases.append(list(map(int, lines[i].split()))) return is_sorting_possible(test_cases)"},{"question":"Implement a class `MagicSquare` which contains methods to verify if a given square matrix is a magic square and to generate an n x n magic square if `n` is odd. A magic square is a square matrix in which the sum of every row, every column, and both diagonals is the same. # Task Requirements 1. `is_magic()` method: - Accepts a 2D list of integers. - Returns `True` if the provided matrix is a magic square, `False` otherwise. 2. `generate()` method: - Accepts an integer `n`. - Returns a 2D list representing an n x n magic square if `n` is odd. **Note:** If `n` is even or less than 1, `generate()` should return an empty list. # Examples ```python magic_square = MagicSquare() # Checking if a given matrix is a magic square matrix1 = [ [2, 7, 6], [9, 5, 1], [4, 3, 8] ] magic_square.is_magic(matrix1) # True matrix2 = [ [2, 7, 6], [9, 5, 2], [4, 3, 8] ] magic_square.is_magic(matrix2) # False # Generating an n x n magic square magic_square.generate(3) # [[2, 7, 6], # [9, 5, 1], # [4, 3, 8]] magic_square.generate(4) # [] ``` # Additional Information - A magic square can be generated using specific algorithms like the Siamese method for odd integers. - You can assume the input to `is_magic()` will always be a square matrix. - Pay attention to edge cases, like empty matrices or invalid `n` values.","solution":"class MagicSquare: def is_magic(self, matrix): n = len(matrix) if n == 0: return False sum_diagonal1 = sum(matrix[i][i] for i in range(n)) sum_diagonal2 = sum(matrix[i][n - 1 - i] for i in range(n)) if sum_diagonal1 != sum_diagonal2: return False target_sum = sum_diagonal1 for row in matrix: if sum(row) != target_sum: return False for col in range(n): if sum(matrix[row][col] for row in range(n)) != target_sum: return False return True def generate(self, n): if n < 1 or n % 2 == 0: return [] magic_square = [[0] * n for _ in range(n)] num = 1 i, j = 0, n // 2 while num <= n * n: magic_square[i][j] = num num += 1 next_i, next_j = (i - 1) % n, (j + 1) % n if magic_square[next_i][next_j]: i += 1 else: i, j = next_i, next_j return magic_square"},{"question":"Sarah is training for a marathon and she has set a goal to run exactly D kilometers daily. She has found a park where each lap around the park is L kilometers long. Sarah wants to know how many complete laps she needs to run every day in order to meet or exceed her daily goal, D kilometers. ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, two space-separated integers D and L representing the distance Sarah wants to run daily and the length of each lap. ------ Output Format ------ For each test case, output in a single line, the minimum number of complete laps Sarah needs to run to meet or exceed her daily goal. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ D, L ≤ 100 ------ Sample Input 1 ------ 4 5 2 9 3 10 10 12 5 ------ Sample Output 1 ------ 3 3 1 3 ------ Explanation 1 ------ Test case 1: Sarah needs to run at least 5 kilometers. Since each lap is 2 kilometers, she needs to run at least 3 laps (2cdot3 = 6 kilometers) to meet or exceed her goal. Test case 2: Sarah needs to run at least 9 kilometers. As each lap is 3 kilometers, she needs to run exactly 3 laps (3cdot3 = 9 kilometers) to meet her goal. Test case 3: Sarah needs to run 10 kilometers. Since each lap is exactly 10 kilometers, she needs to run 1 lap. Test case 4: Sarah needs to run at least 12 kilometers. As each lap is 5 kilometers, she needs to run at least 3 laps (5cdot3 = 15 kilometers) to meet or exceed her goal.","solution":"import math def calculate_laps(T, test_cases): results = [] for D, L in test_cases: laps = math.ceil(D / L) results.append(laps) return results"},{"question":"Given an array of integers, find the maximum possible sum of any single non-empty contiguous subarray of the array. Implement the solution in O(n) time complexity. ------ Input ------ The first line contains a single integer t (1 ≤ t ≤ 10), the number of test cases. The next lines contain the test case descriptions. Each test case starts with a single integer n (1 ≤ n ≤ 10^5), the length of the array, followed by n integers a_i (−10^4 ≤ a_i ≤ 10^4). ------ Output ------ For each test case, output a single line containing the maximum sum of any single non-empty contiguous subarray for that test case. ----- Sample Input 1 ------ 2 8 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 ----- Sample Output 1 ------ 6 15","solution":"def max_subarray_sum(arr): Returns the maximum possible sum of any single non-empty contiguous subarray of the array. max_sum = arr[0] current_sum = arr[0] for i in range(1, len(arr)): current_sum = max(arr[i], current_sum + arr[i]) max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(t, test_cases): results = [] for i in range(t): n, array = test_cases[i] result = max_subarray_sum(array) results.append(result) return results"},{"question":"Task Given an unsorted array of integers `nums` and an integer target, find the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. # Example For `nums = [2, 7, 11, 15]` and `target = 9`, the output should be `[0, 1]`. For `nums = [3, 2, 4]` and `target = 6`, the output should be `[1, 2]`. # Input/Output - `[input]` array.integer `nums` An array of integers. - `[input]` integer `target` An integer target representing the sum that we need to find in the array. - `[output]` array.integer An array with two elements, representing the indices of the two numbers that add up to target.","solution":"def two_sum(nums, target): Return the indices of the two numbers in \'nums\' that add up to \'target\'. num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], index] num_to_index[num] = index return []"},{"question":"You have been tasked with managing the processing of a series of transactions for a small financial application. The transactions involve moving funds between accounts, and certain conditions must be met for a transaction to be valid and processed. You are given M accounts, each with an initial balance. Your program will then process N transactions, each of which either debits or credits an account with a specific amount. Additionally, after each transaction, the updated balance of the account must meet a specified balance constraint. Each transaction is represented by three integers: A (account number), T (transaction type), and V (value). The transaction type T can either be 1 (debit) or 2 (credit), and the value V is the amount to debit or credit. A transaction is valid if: - For a debit transaction (T=1), the account\'s updated balance does not fall below the minimum allowed balance. - For a credit transaction (T=2), there are no specific constraints. Your task is to determine which transactions are valid and update the account balances accordingly. You must return the results of all transactions as either \\"Valid\\" or \\"Invalid\\". ------ Input ------ The first line contains two integers: M (number of accounts) and N (number of transactions). The second line contains M integers representing the initial balances of the accounts. The third line contains M integers representing the minimum balance constraints for each account. The next N lines each contain three integers: A (account number, 1-indexed), T (transaction type), and V (value). ------ Output ------ For each transaction, output \\"Valid\\" if the transaction can be processed according to the rules, or \\"Invalid\\" otherwise. ------ Constraints ------ 1 ≤ M ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ initial balance, minimum balance, value ≤ 10^9 ------ Sample Input 1 ------ 5 4 1000 1500 1200 1300 1100 500 1000 500 1000 500 1 1 600 2 2 300 4 1 1000 5 1 700 ------ Sample Output 1 ------ Valid Valid Invalid Invalid ------ Explanation 1 ------ - The first transaction debits account 1 by 600, leaving it with 400, which is below its minimum balance of 500, so it is \\"Invalid\\". - The second transaction credits account 2 by 300, which is valid. - The third transaction debits account 4 by 1000, leaving it with 300, which is below its minimum balance of 1000, so it is \\"Invalid\\". - The fourth transaction debits account 5 by 700, leaving it with 400, which is below its minimum balance of 500, so it is \\"Invalid\\".","solution":"def process_transactions(M, N, initial_balances, min_balances, transactions): results = [] for A, T, V in transactions: account_index = A - 1 if T == 1: # Debit Transaction if initial_balances[account_index] - V < min_balances[account_index]: results.append(\\"Invalid\\") else: initial_balances[account_index] -= V results.append(\\"Valid\\") elif T == 2: # Credit Transaction initial_balances[account_index] += V results.append(\\"Valid\\") return results # Example function call M = 5 N = 4 initial_balances = [1000, 1500, 1200, 1300, 1100] min_balances = [500, 1000, 500, 1000, 500] transactions = [ (1, 1, 600), (2, 2, 300), (4, 1, 1000), (5, 1, 700) ] print(process_transactions(M, N, initial_balances, min_balances, transactions))"},{"question":"You have been given a list of integers representing the heights of buildings on a street. Your task is to find the maximum amount of water that can be trapped between these buildings when it rains. The amount of water that can be trapped between two buildings is determined by the difference in height between the buildings and the gap between them. Write a function `max_water_trapped(heights)` that takes a list of integers `heights` representing the heights of the buildings and returns the maximum amount of water that can be trapped. # Input - A single list of integers `heights` (1 ≤ len(heights) ≤ 10^4, 0 ≤ heights[i] ≤ 10^4). # Output - An integer representing the maximum amount of water that can be trapped. # Example Input ``` [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] ``` Output ``` 6 ``` Input ``` [4, 2, 0, 3, 2, 5] ``` Output ``` 9 ``` # Explanation For the first example: - The water trapped between buildings at indices (1, 3) is 1 unit. - The water trapped between buildings at indices (3, 7) is 5 units. For the second example: - The water trapped between buildings at indices (0, 3) is 1 unit. - The water trapped between buildings at indices (1, 5) is 7 units. - The water trapped between buildings at indices (3, 5) is 1 unit.","solution":"def max_water_trapped(heights): Returns the maximum amount of water that can be trapped between the buildings represented by heights. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Arjun is trying to manage his tasks more effectively. He maintains a task list where he records each task with its priority. Now he wants to query his task list to find the highest priority task that has not been completed yet. Each task is represented by an integer where a lower number represents a higher priority. Help Arjun design a program that allows him to add tasks, mark tasks as completed, and query the highest priority uncompleted task. Input: The first line will contain an integer Q, the number of queries. Each of the next Q lines can be one of the following commands: 1. ADD x - Adds a task with priority x (1 ≤ x ≤ 1000). 2. COMPLETE x - Marks the task with priority x as completed. 3. QUERY - Returns the highest priority uncompleted task. Output: For each \\"QUERY\\" command, output the highest priority uncompleted task. If there are no uncompleted tasks, print \\"NONE\\". Constraints: 1 ≤ Q ≤ 100000 SAMPLE INPUT 6 ADD 5 ADD 3 QUERY COMPLETE 3 QUERY COMPLETE 5 SAMPLE OUTPUT 3 5 NONE","solution":"import heapq def task_management(queries): tasks = [] completed_tasks = set() result = [] for query in queries: parts = query.split() command = parts[0] if command == \\"ADD\\": priority = int(parts[1]) heapq.heappush(tasks, priority) elif command == \\"COMPLETE\\": priority = int(parts[1]) completed_tasks.add(priority) elif command == \\"QUERY\\": while tasks and tasks[0] in completed_tasks: heapq.heappop(tasks) if tasks: result.append(tasks[0]) else: result.append(\\"NONE\\") return result"},{"question":"You are given an array a of n integers. We define the reversal count of a as the minimum number of contiguous subarray reversals needed to transform a into a non-decreasing array. For example, for a = [3, 2, 1, 5, 4, 6], the number of reversals is 2: reverse the subarray [1, 2, 3] to get a = [1, 2, 3, 5, 4, 6], then reverse the subarray [4, 5] to get a = [1, 2, 3, 4, 5, 6]. Your task is to write a program that computes the reversal count. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. The first line of each test case contains an integer n (1 le n le 1000) — the size of the array a. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 le a_i le 1000) — the elements of the array. -----Output----- For each test case, print one integer — the reversal count for the corresponding array. -----Examples----- Input 2 6 3 2 1 5 4 6 5 1 2 3 4 5 Output 2 0 -----Note----- In the first example, the given array a can be sorted in non-decreasing order with 2 reversals as described in the prompt. In the second example, the given array a is already non-decreasing, so no reversals are needed.","solution":"def reversal_count(t, test_cases): Calculate the minimum number of contiguous subarray reversals to transform the array into a non-decreasing array. result = [] for i in range(t): n = test_cases[i][0] a = test_cases[i][1] # Edge case: array with one element requires 0 reversals if n == 1: result.append(0) continue # Initialize count of reversals needed to zero reversals = 0 # Iterate through the array and count the number of \\"descent regions\\" i = 0 while i < n - 1: if a[i] > a[i + 1]: # If a descent is found, increment the reversal count reversals += 1 # Skip over the entire descent sequence while i < n - 1 and a[i] > a[i + 1]: i += 1 i += 1 result.append(reversals) return result"},{"question":"Given an array of integers representing the stock prices of a company in chronological order, write a function to find out the maximum profit you could have achieved from one single buy-sell transaction. You must buy before you sell, the function should return the maximum profit, or 0 if no profit can be made. **Input:** An array of integers representing stock prices. **Output:** An integer representing the maximum profit. **Example:** Input: [7, 1, 5, 3, 6, 4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Input: [7, 6, 4, 3, 1] Output: 0 Explanation: No profit can be achieved as the prices are consistently decreasing.","solution":"def max_profit(stock_prices): Calculate the maximum profit from one buy-sell transaction in the stock market. :param stock_prices: List of integers representing stock prices in chronological order :return: Maximum profit (integer) or 0 if no profit can be made if not stock_prices: return 0 min_price = stock_prices[0] max_profit = 0 for price in stock_prices[1:]: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"Ivan is designing a complex robotic system composed of several subsystems. Each subsystem must be calibrated to function correctly, and the calibration sequence needs to follow a specific order disclosed by Ivan. However, each subsystem consumes energy during calibration, and Ivan has a limited amount of energy available. You are given an energy budget E, the number of subsystems n, and the calibration order matrix. Each row of this matrix contains three integers: a, b, and e. This means that subsystem a must be calibrated before subsystem b, and it requires e units of energy to calibrate subsystem a. Your task is to determine if Ivan can calibrate all the subsystems within the given energy budget, and if so, in what sequence. If multiple valid sequences are possible, any one of them is acceptable. Input - The first line contains two integers n and E (1 ≤ n ≤ 100; 1 ≤ E ≤ 109) — the number of subsystems and the energy budget. - The next several lines contain three integers each, a, b, and e, representing that subsystem a must be calibrated before subsystem b, consuming e units of energy (1 ≤ a, b ≤ n; 1 ≤ e ≤ 109). Output - If Ivan can calibrate the subsystems within the energy budget, print \\"YES\\" followed by a possible calibration sequence. - If it is not possible to calibrate all the subsystems within the given energy budget, print \\"NO\\". Examples Input 4 10 1 2 3 2 3 2 3 4 4 2 4 1 Output YES 1 2 3 4 Input 3 5 1 2 4 2 3 3 1 3 2 Output NO","solution":"from collections import deque, defaultdict def can_calibrate(n, E, dependencies): graph = defaultdict(list) in_degree = {i: 0 for i in range(1, n + 1)} energy_cost = {i: 0 for i in range(1, n + 1)} for a, b, e in dependencies: graph[a].append((b, e)) in_degree[b] += 1 energy_cost[a] += e zero_in_degree = deque([node for node in range(1, n + 1) if in_degree[node] == 0]) calibrated_sequence = [] total_energy = 0 while zero_in_degree: node = zero_in_degree.popleft() calibrated_sequence.append(node) if total_energy + energy_cost[node] > E: return \\"NO\\" total_energy += energy_cost[node] for neighbor, energy in graph[node]: in_degree[neighbor] -= 1 energy_cost[neighbor] -= energy if in_degree[neighbor] == 0: zero_in_degree.append(neighbor) if len(calibrated_sequence) == n: return \\"YES\\", calibrated_sequence else: return \\"NO\\""},{"question":"Given a string s that contains a sequence of words separated by spaces, find the length of the shortest word in the sequence. If the string is empty, return -1. Example 1: Input: s = \\"The quick brown fox jumps over the lazy dog\\" Output: 3 Explanation: The words in the string are [\\"The\\", \\"quick\\", \\"brown\\", \\"fox\\", \\"jumps\\", \\"over\\", \\"the\\", \\"lazy\\", \\"dog\\"] and the shortest word is \\"The\\" with length 3. Example 2: Input: s = \\" \\" Output: -1 Explanation: The string is empty after removing extra spaces, thus there are no words. Example 3: Input: s = \\"coding is fun\\" Output: 2 Explanation: The words in the string are [\\"coding\\", \\"is\\", \\"fun\\"] and the shortest word is \\"is\\" with length 2. Your Task: You don\'t need to read input or print anything. Complete the function shortestWord() which takes a string s as input parameter and returns an integer denoting the length of the shortest word or -1 if the string is empty after removing extra spaces. Expected Time Complexity: O(N) where N is the length of the string. Expected Auxiliary Space: O(1) Constraints: 1 <= s.length() <= 10^{4} The string contains only lowercase alphabets and spaces.","solution":"def shortestWord(s): Returns the length of the shortest word in the string s, or -1 if the string is empty. if not s.strip(): return -1 words = s.split() shortest_length = min(len(word) for word in words) return shortest_length"},{"question":"A logistics company is planning a new delivery route that involves a set of n locations and m roads connecting these locations. Each road has a certain travel time associated with it. The company wants to ensure that there is a unique shortest path between the main warehouse located at location 1 and each of the other locations. A shortest path between two locations A and B is unique if there is no other path from A to B with the same travel time as the shortest path. Your task is to determine if it is possible to assign travel times to the roads such that the shortest path from the warehouse to each other location is unique. Input The first line contains two integers n and m (2 ≤ n ≤ 100,000; 1 ≤ m ≤ 200,000) — the number of locations and the number of roads respectively. Each of the following m lines describes a road using three integers a_i, b_i, and t_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i; 1 ≤ t_i ≤ 1,000,000,000) — the two locations connected by the road and the initial travel time for that road. Output Print \\"YES\\" if it is possible to assign travel times to roads such that the shortest path from the warehouse (location 1) to each other location is unique, otherwise print \\"NO\\". Examples Input ``` 5 6 1 2 4 1 3 2 2 3 1 2 4 5 3 4 3 3 5 4 ``` Output ``` YES ``` Input ``` 3 3 1 2 1 1 3 1 2 3 2 ``` Output ``` NO ``` Note In the first example, it\'s possible to reassign travel times to ensure unique shortest paths. For example, you could adjust the travel times slightly to break any tie for the shortest paths. In the second example, there\'s no way to reassign the travel times to guarantee that the shortest path from the warehouse to each location is unique because locations 2 and 3 have the same shortest travel time directly from the warehouse.","solution":"import heapq from collections import defaultdict, deque def unique_shortest_path(n, m, roads): graph = defaultdict(list) for a, b, t in roads: graph[a].append((t, b)) graph[b].append((t, a)) # Dijkstra\'s algorithm to find the shortest paths from node 1 def dijkstra(source): dist = {node: float(\\"inf\\") for node in range(1, n + 1)} dist[source] = 0 queue = [(0, source)] while queue: cur_dist, u = heapq.heappop(queue) if cur_dist > dist[u]: continue for time, v in graph[u]: new_dist = cur_dist + time if new_dist < dist[v]: dist[v] = new_dist heapq.heappush(queue, (new_dist, v)) return dist # Find shortest paths distance from node 1 shortest_path_from_1 = dijkstra(1) # A set to store seen distances seen_distances = set() for node in range(2, n + 1): distance = shortest_path_from_1[node] if distance in seen_distances: return \\"NO\\" seen_distances.add(distance) return \\"YES\\""},{"question":"Alice loves creating patterns with various symbols. She has a grid of size n x m filled with \'.\' (dot) representing an empty cell. She can perform an operation where she chooses a subrectangle of the grid and fills it with a specific symbol \'X\'. Her goal is to create a pattern where there are no empty cells left on the grid. Given the number of rows n and columns m in the grid, and a series of operations, each defined by the coordinates of the top-left corner and the bottom-right corner of the subrectangle to be filled with \'X\', print the final state of the grid. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. The second line contains an integer q (1 ≤ q ≤ 1000) — the number of operations. Each of the next q lines contains four integers x1, y1, x2, y2 (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m) — the coordinates of the top-left and bottom-right corners of the subrectangle to be filled with \'X\'. Output Print the grid after performing all the operations. Each of the n lines should contain m characters, representing the final state of the grid. Examples Input 3 3 2 1 1 2 2 2 2 3 3 Output XX. XXX .XX Input 4 5 3 1 1 3 5 2 2 4 4 1 5 4 5 Output XXXXX XXXXX XXXXX .XXXX","solution":"def fill_grid_with_operations(n, m, operations): # Initialize the grid with dots grid = [[\'.\' for _ in range(m)] for _ in range(n)] # Perform each operation on the grid for op in operations: x1, y1, x2, y2 = op for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] = \'X\' # Convert the grid to the required output format result = [\'\'.join(row) for row in grid] return result"},{"question":"The town of Luxville has built a new public library. The library has **m** rows of shelves, each containing exactly **n** books, and each book has a unique ID ranging from 1 to **m * n**. The books are placed in an alternating manner: one row from left to right, then the next from right to left, and so on. Given the number of rows **m** and number of books per row **n**, write a program that outputs the book IDs in the correct order as they appear on the shelves. # Input - The input consists of two integers **m** and **n** (1 ≤ m, n ≤ 1000) representing the number of rows of shelves and the number of books per row. # Output - Print the book IDs in the order they appear on the shelves, one row per line, with each book ID separated by a space. # Example Input ``` 3 4 ``` Output ``` 1 2 3 4 8 7 6 5 9 10 11 12 ``` Input ``` 2 5 ``` Output ``` 1 2 3 4 5 10 9 8 7 6 ```","solution":"def get_books_order(m, n): Returns a list of lists representing the book IDs in the correct order as they appear on the shelves in the library. :param m: Number of rows (1-based index) :param n: Number of books per row (1-based index) :return: List of lists where each list represents the IDs of the books on that row result = [] for i in range(m): if i % 2 == 0: result.append(list(range(i * n + 1, (i + 1) * n + 1))) else: result.append(list(range((i + 1) * n, i * n, -1))) return result"},{"question":"You are given a list of non-negative integers representing heights of buildings standing in a line. Each building is a rectangle of width 1. You need to calculate the maximum area of a rectangle formed within some contiguous buildings, such that all buildings in this range have at least one side resting on the ground. -----Input----- A single line containing space-separated integers representing the heights of the buildings. -----Output----- A single integer, the maximum rectangular area. -----Examples----- Input 6 2 5 4 5 1 6 Output 12 Input 2 1 2 Output 3 -----Note----- In the first example, the largest rectangle has height 4 and extends from the second building to the fifth building, covering 3 buildings for an area of 4 x 3 = 12. In the second example, the largest rectangle has height 1 and extends from the second building to the third building, covering 3 buildings for an area of 1 x 3 = 3.","solution":"def largest_rectangle_area(heights): stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a list of integers representing the price of stocks over consecutive days, you are a trader who can make one or more transactions. A transaction consists of buying one stock and selling one stock. However, you are allowed to complete at most `k` transactions. Write a function to find the maximum profit you can achieve from these transactions. Each buy and sell must be within the valid index range, and you cannot sell a stock before it is bought. Input Format: - The first line contains an integer `T` representing the number of test cases. - Each test case consists of two lines: - The first line contains two integers `k` and `n`, where `k` is the maximum number of transactions and `n` is the number of days. - The second line consists of `n` space-separated integers, where each integer represents the stock price on that day. Output Format: - For each test case, output a single integer that represents the maximum profit that can be achieved. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ k ≤ 10 - 2 ≤ n ≤ 100 - 1 ≤ Stock Price ≤ 1000 Example: Input: ``` 2 2 6 3 2 6 5 0 3 1 5 1 2 3 4 5 ``` Output: ``` 7 4 ``` Explanation: In the first test case, - We can buy on the 2nd day (price = 2) and sell on the 3rd day (price = 6), profit = 4. - Then, buy on the 5th day (price = 0) and sell on the 6th day (price = 3), profit = 3. - Total profit = 4 + 3 = 7. In the second test case, - With only one transaction allowed, buying on the 1st day and selling on the 5th day provides the maximum profit of 4.","solution":"def max_profit_with_k_transactions(k, prices): Returns the maximum profit with at most k transactions. n = len(prices) if n == 0 or k == 0: return 0 # If k is larger than n//2, then we can consider it as infinite transactions if k > n // 2: max_profit = 0 for i in range(1, n): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit dp = [[0] * n for _ in range(k + 1)] for t in range(1, k + 1): max_diff = -prices[0] for d in range(1, n): dp[t][d] = max(dp[t][d - 1], prices[d] + max_diff) max_diff = max(max_diff, dp[t - 1][d] - prices[d]) return dp[k][n - 1] def max_profits_from_transactions(test_cases): results = [] for k, prices in test_cases: results.append(max_profit_with_k_transactions(k, prices)) return results"},{"question":"Jon has a set of n coins, each of different monetary values. He wants to split the coins into two groups such that the absolute difference between the total monetary values of the two groups is minimized. Your task is to write a program that takes the list of coin values and outputs the minimum possible absolute difference. # Input The first line of the input contains an integer n (1 <= n <= 20), the number of coins. The second line contains n integers, each representing the value of a coin. The values of the coins are positive integers, and each value does not exceed 1000. # Output Output a single integer representing the minimum possible absolute difference between the total values of the two groups. # Sample Input 1 ``` 3 1 2 7 ``` # Sample Output 1 ``` 4 ``` # Sample Input 2 ``` 4 3 1 4 2 ``` # Sample Output 2 ``` 0 ``` # Sample Input 3 ``` 5 10 20 15 5 25 ``` # Sample Output 3 ``` 5 ``` # Explanation In the first sample, splitting the coins into groups with values {1, 2} and {7} results in absolute difference of |(1+2)-7|=4, which is the minimum. In the second sample, splitting {3, 1} and {4, 2} or {3, 2} and {4, 1} both result in an absolute difference of 0, which is the minimum possible difference. In the third sample, splitting {10, 15, 5} and {20, 25} results in an absolute difference of |(10+15+5)-(20+25)|=5, which is the minimum possible difference.","solution":"def min_difference(n, coins): Given a list of coin values, split them into two groups such that the absolute difference between the total monetary values of the two groups is minimized. total_sum = sum(coins) min_diff = float(\'inf\') # Explore all subsets using bitmasking for i in range(1 << n): subset_sum = 0 for j in range(n): if i & (1 << j): subset_sum += coins[j] remaining_sum = total_sum - subset_sum min_diff = min(min_diff, abs(subset_sum - remaining_sum)) return min_diff"},{"question":"Swapping Letters Alice and Bob are friends and they love playing with strings. They have discovered a new game where they need to transform a given string into another string using the least number of swaps. The only allowed operation is swapping any two distinct characters. Given two strings `S1` and `S2` of equal length `N`, help Alice and Bob figure out the minimum number of swaps needed to transform `S1` into `S2`. If it\'s not possible to transform `S1` into `S2`, return `-1`. Input: - The first line contains an integer `T`, the number of test cases. (1 ≤ T ≤ 20) - For each test case: - The first line contains an integer `N`, the length of strings `S1` and `S2`. (1 ≤ N ≤ 100) - The second line contains the string `S1`. - The third line contains the string `S2`. Output: - For each test case, print the minimum number of swaps needed to transform `S1` into `S2` or `-1` if it is not possible. SAMPLE INPUT: 2 4 abcd badc 4 abcd dcba SAMPLE OUTPUT: 2 2","solution":"def min_swaps_to_transform(S1, S2): Returns the minimum number of swaps to transform S1 into S2 or -1 if not possible. S1 and S2 are strings of equal length. if sorted(S1) != sorted(S2): return -1 N = len(S1) swaps = 0 S1 = list(S1) for i in range(N): if S1[i] != S2[i]: for j in range(i + 1, N): if S1[j] == S2[i]: S1[i], S1[j] = S1[j], S1[i] swaps += 1 break return swaps def process_test_cases(test_cases): results = [] for N, S1, S2 in test_cases: results.append(min_swaps_to_transform(S1, S2)) return results def main(inputs): index = 0 T = int(inputs[index]) index += 1 test_cases = [] for _ in range(T): N = int(inputs[index]) index += 1 S1 = inputs[index] index += 1 S2 = inputs[index] index += 1 test_cases.append((N, S1, S2)) results = process_test_cases(test_cases) return results"},{"question":"You are given an array of integers and you need to sort it using the minimum number of moves. In one move, you can select any two adjacent elements and swap them. Can you determine the minimum number of swaps needed to sort the array in ascending order? Input The first line contains one integer n (1 ≤ n ≤ 200000) — the number of elements in the array. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the elements of the array. Output Print the minimum number of adjacent swaps needed to sort the array. Examples Input 5 4 3 2 1 5 Output 6 Input 3 1 3 2 Output 1","solution":"def merge_and_count(arr, temp_arr, left, mid, right): i = left # Starting index for left subarray j = mid + 1 # Starting index for right subarray k = left # Starting index to be sorted inv_count = 0 while i <= mid and j <= right: if arr[i] <= arr[j]: temp_arr[k] = arr[i] i += 1 else: temp_arr[k] = arr[j] inv_count += (mid-i + 1) j += 1 k += 1 while i <= mid: temp_arr[k] = arr[i] i += 1 k += 1 while j <= right: temp_arr[k] = arr[j] j += 1 k += 1 for i in range(left, right + 1): arr[i] = temp_arr[i] return inv_count def merge_sort_and_count(arr, temp_arr, left, right): inv_count = 0 if left < right: mid = (left + right) // 2 inv_count += merge_sort_and_count(arr, temp_arr, left, mid) inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right) inv_count += merge_and_count(arr, temp_arr, left, mid, right) return inv_count def minimum_swaps_to_sort(arr): n = len(arr) temp_arr = [0] * n return merge_sort_and_count(arr, temp_arr, 0, n - 1)"},{"question":"You are a botanist studying the growth of a unique species of plant in the Land of Flora. Each plant in this species can be represented by its growth rate measured over a span of consecutive days. Your task is to determine the longest sub-array where the plant\'s growth rate steadily increases day by day. Given an array of integers representing the growth rate of the plant where each integer corresponds to the growth rate on that particular day, find the length of the longest sub-array where the growth rate strictly increases every day. -----Input----- The first line contains an integer n (1 le n le 100000), the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) where a_i represents the growth rate on the ith day. -----Output----- The output is a single integer, the length of the longest strictly increasing sub-array. -----Examples----- Sample Input 1: 6 1 2 3 2 3 4 Sample Output 1: 3 Sample Input 2: 5 5 5 5 5 5 Sample Output 2: 1 Sample Input 3: 7 1 3 2 1 4 6 7 Sample Output 3: 4","solution":"def longest_increasing_subarray(n, a): Returns the length of the longest strictly increasing sub-array. Parameters: n (int): Number of days. a (list of int): Growth rates over a span of consecutive days. Returns: int: Length of the longest strictly increasing sub-array. if n == 1: return 1 max_length = 1 current_length = 1 for i in range(1, n): if a[i] > a[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"In a faraway kingdom, there is an old library with many ancient books. The librarian, Ms. Eleanor, wants to organize these books in a specific way. Each book has a unique ID represented by a positive integer. Ms. Eleanor wants to arrange the books in ascending order based on their IDs and display them on shelves. However, she has a peculiar way of reading IDs called \\"Digit-Sum\\". The Digit-Sum of a number is the sum of its digits. For example, the Digit-Sum of 123 is 1+2+3=6. In case two books have the same Digit-Sum, she prefers to arrange them by their actual IDs in ascending order. Your task is to help Ms. Eleanor arrange the books as she desires. # Input - First line contains an integer N (1 ≤ N ≤ 1000), the number of book IDs. - The next line contains N space-separated positive integers representing the book IDs. Each book ID is guaranteed to be a positive integer not exceeding 1,000,000. # Output - Output the arranged list of book IDs according to Ms. Eleanor\'s preferences. Each ID should be separated by a space. # Example Input ``` 5 340 14 123 59 32767 ``` Output ``` 14 123 340 59 32767 ``` # Explanation - Digit-Sum of 340 is 3+4+0=7. - Digit-Sum of 14 is 1+4=5. - Digit-Sum of 123 is 1+2+3=6. - Digit-Sum of 59 is 5+9=14. - Digit-Sum of 32767 is 3+2+7+6+7=25. Arranging by Digit-Sum we get: 14 (Digit-Sum=5), 123 (Digit-Sum=6), 340 (Digit-Sum=7), 59 (Digit-Sum=14), 32767 (Digit-Sum=25).","solution":"def digit_sum(n): Returns the sum of the digits of n. return sum(int(digit) for digit in str(n)) def organize_books_by_digit_sum(n, book_ids): Organizes the list of book IDs based on their digit-sum and in case of a tie, by their actual value in ascending order. Parameters: n (int): Number of book IDs book_ids (list of int): List of book IDs to be organized Returns: list of int: Organized list of book IDs return sorted(book_ids, key=lambda x: (digit_sum(x), x))"},{"question":"To help Professor Dumbledore organize the library at Hogwarts, you need to rearrange the books on a single shelf. The shelf can be represented as an array of n integers, where each integer represents the height of a book. Dumbledore wants to rearrange the books such that the height sequence is non-decreasing. In order to do this, you can perform two types of operations: 1. Choose an index i (1 ≤ i ≤ n) and swap the book at index i with the book at index i + 1, if it exists. 2. Choose an index i (1 ≤ i ≤ n) and reverse the subarray from index i to index j (i ≤ j ≤ n). Your task is to determine the minimum number of operations required to rearrange the books such that their heights are in non-decreasing order. Input The first line contains a single integer n — the size of the array a (1 ≤ n ≤ 100). The following line contains n integers a_1, a_2, …, a_n — the heights of the books (1 ≤ a_i ≤ 1000). Output Output a single integer — the minimum number of operations required to rearrange the books in non-decreasing order. Examples Input 5 4 3 2 6 1 Output 2 Input 3 1 2 3 Output 0 Explanation In the first example, one can reverse the subarray from index 1 to 5 to get the array [1, 6, 2, 3, 4] and then swap the elements at index 2 and 3 to get the array [1, 2, 3, 4, 6], which is non-decreasing. In the second example, the array is already in non-decreasing order, so no operations are needed.","solution":"def min_operations_to_sort_books(n, heights): Calculate the minimum number of operations required to sort the books in non-decreasing order. Args: n (int): Number of books. heights (list): List of integers representing the height of books. Returns: int: Minimum number of operations needed. sorted_heights = sorted(heights) if heights == sorted_heights: return 0 longest_sorted_subarray = 0 for i in range(n): for j in range(i, n): subarray = heights[i:j+1] if subarray == sorted(subarray): longest_sorted_subarray = max(longest_sorted_subarray, j - i + 1) if longest_sorted_subarray == n - 1: return 1 return 2"},{"question":"A grid city has a series of points, streets, and avenues. The entire city can be visualized as an n times n grid where each intersection is represented by a unique coordinate (x, y). The city council wants to ensure a quick and easy commute between important landmarks in the city by determining the shortest path between any two points using only the streets and avenues. Given a start point (x_1, y_1) and an endpoint (x_2, y_2), you are required to calculate the minimum number of streets and avenues needed to travel from the start to the endpoint. You may only move horizontally or vertically on the grid. -----Input----- The input consists of: - one line with an integer n (1 le n le 1000), the size of the grid (meaning the grid is n times n); - one line with four integers x_1, y_1, x_2, y_2 (0 le x_1, y_1, x_2, y_2 leq n-1), the coordinates of the starting and ending points respectively. -----Output----- Output a single integer that represents the minimum number of streets and avenues required to travel from the start point to the end point. -----Examples----- Sample Input: 5 0 0 4 4 Sample Output: 8 Sample Input: 10 3 2 7 8 Sample Output: 10 Explanation: In the first example, to travel from (0,0) to (4,4) the shortest path in the grid requires 4 horizontal moves and 4 vertical moves, which sums up to 8. In the second example, the shortest path from (3,2) to (7,8) requires moving 4 units right and 6 units up, totaling 10 moves.","solution":"def min_streets_and_avenues(n, x1, y1, x2, y2): Calculate the minimum number of streets and avenues needed to travel between two points. Args: n: int - size of the grid (grid is n x n) x1, y1: int - coordinates of the start point x2, y2: int - coordinates of the end point Returns: int - minimum number of streets and avenues required for travel # Calculating the absolute difference between the coordinates return abs(x1 - x2) + abs(y1 - y2)"},{"question":"Lomarka loves working with ancient languages and manuscripts. Recently, he has been scrutinizing a set of ancient texts and stumbled upon a sequence of numbers that follow a peculiar pattern. The sequence, along with the initial number, is represented as a two-dimensional array where each row corresponds to the numbers encountered in the same manuscript. Lomarka is interested in determining the longest common subsequence (LCS) of numbers between these manuscripts. Given two sequences of numbers from two different manuscripts, your task is to compute the length of the longest common subsequence using dynamic programming. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. -----Input----- The first line contains two integers n_1 and n_2, the lengths of the two sequences. It is guaranteed that 1 leq n_1, n_2 leq 100. The next line contains n_1 integers representing the first sequence. Each integer is between 1 and 100. The following line contains n_2 integers representing the second sequence. Each integer is between 1 and 100. -----Output----- Print a single integer representing the length of the longest common subsequence. -----Examples----- Sample Input 1: 6 5 1 3 4 1 2 5 1 4 1 2 5 Sample Output 1: 5 Sample Input 2: 3 4 9 8 7 5 6 7 8 Sample Output 2: 1","solution":"def longest_common_subsequence(seq1, seq2): Computes the length of the longest common subsequence between two sequences. n1, n2 = len(seq1), len(seq2) # Create a 2D dp array with (n1+1)x(n2+1) dimensions dp = [[0] * (n2 + 1) for _ in range(n1 + 1)] # Fill the dp array for i in range(1, n1 + 1): for j in range(1, n2 + 1): if seq1[i - 1] == seq2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # The value in dp[n1][n2] will be the length of the longest common subsequence return dp[n1][n2]"},{"question":"A company is developing an automatic repair assistant which monitors system logs and detects specific patterns indicating certain types of errors. One of the tasks for the repair assistant is to identify sequences of repeated errors within a log file and produce a report detailing these sequences. The system log is provided as a string consisting of lowercase letters only, where each letter represents a different type of error. The repair assistant needs to detect the top `k` most frequently occurring substrings of a specified length `m` within the log file. If two substrings have the same frequency, consider the lexicographically smaller one as having a higher priority. Write a program that receives as input an integer `t` representing the number of test cases. For each test case, the program receives three inputs: an integer `m` representing the length of substrings to consider, an integer `k` representing the number of top substrings to report, and a string `log` representing the system log. The program should output the top `k` most frequent substrings of length `m` for each test case. # Input The number of datasets is given in the first line. From the next line onward, each dataset is described in turn. The input format for each dataset is as follows: ``` m k log ``` - `t` (1 ≤ t ≤ 10): The number of test cases. - `m` (1 ≤ m ≤ 10): The length of substrings to consider. - `k` (1 ≤ k ≤ 10): The number of top substrings to report. - `log` (1 ≤ |log| ≤ 1000): The system log consisting of lowercase letters only. # Output For each test case, output the top `k` most frequent substrings of length `m`, in decreasing order of frequency. If fewer than `k` unique substrings of length `m` are found, list all unique substrings found. # Example Input ``` 2 2 3 ababcababa 3 2 abcabcabcabc ``` Output ``` ab ba bc abc bca ``` # Explanation In the first test case: - The substrings of length `2` from \\"ababcababa\\" are: \\"ab\\", \\"ba\\", \\"ab\\", \\"bc\\", \\"ca\\", \\"ab\\", \\"ba\\". - The frequencies are: `(\\"ab\\": 3), (\\"ba\\": 2), (\\"bc\\": 1), (\\"ca\\": 1)`. - The top 3 substrings in order of frequency are: \\"ab\\", \\"ba\\", \\"bc\\". In the second test case: - The substrings of length `3` from \\"abcabcabcabc\\" are: \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\", \\"bca\\", \\"cab\\", \\"abc\\", \\"bca\\", \\"cab\\". - The frequencies are: `(\\"abc\\": 4), (\\"bca\\": 3), (\\"cab\\": 3)`. - The top 2 substrings in order of frequency are: \\"abc\\", \\"bca\\".","solution":"from collections import Counter def most_frequent_substrings(t, test_cases): Returns a list of results where each result contains the top k most frequent substrings of length m from the log. results = [] for case in test_cases: m, k, log = case substrings = [log[i:i + m] for i in range(len(log) - m + 1)] frequency = Counter(substrings) sorted_substrings = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) top_k = [substr[0] for substr in sorted_substrings[:k]] results.append(top_k) return results"},{"question":"An online retailer has an inventory of unique products and the corresponding sales prices. Each product has a popularity score which measures how many times it has been viewed by users. The marketing team wants to understand how often price fluctuations happen for the most popular products. You need to create a program that inputs the inventory details and outputs the number of distinct price changes for the top K most popular products. # Input - The first line contains two integers, N (the number of unique products) and Q (the number of price change events) where 1 ≤ N ≤ 10^5 and 1 ≤ Q ≤ 10^5. - The next line contains an integer K (the number of top popular products to consider) where 1 ≤ K ≤ N. - Each of the next N lines contains a string and two integers representing the product name (a unique identifier not exceeding 10 characters), the initial price of the product (a positive integer), and the popularity score (a non-negative integer). - Each of the next Q lines contains a string (the product name) and a positive integer (the new price). # Output - Output a single integer representing the number of distinct price changes among the top K products by popularity. # Example Input ``` 5 3 2 ProdA 100 250 ProdB 150 200 ProdC 100 300 ProdD 120 400 ProdE 90 100 ProdA 110 ProdD 115 ProdB 140 ``` Output ``` 2 ``` # Explanation Based on input, the products along with their popularity scores are: - ProdD with a popularity score of 400 - ProdC with a popularity score of 300 - ProdA with a popularity score of 250 - ProdB with a popularity score of 200 - ProdE with a popularity score of 100 Since K = 2, top 2 popular products are ProdD and ProdC. Price changes include: - ProdA changes from 100 to 110 - ProdD changes from 120 to 115 - ProdB changes from 150 to 140 Among the price changes, only ProdD is in the top 2 popular products, and its price changed once. Hence the number of distinct price changes for the top K most popular products is 1.","solution":"def distinct_price_changes(N, Q, K, products, events): from collections import defaultdict # Parse the products to get their initial prices and popularity scores product_info = {} popularity = [] for name, price, score in products: product_info[name] = price popularity.append((score, name)) # Sort by popularity in descending order popularity.sort(reverse=True, key=lambda x: x[0]) # Get top K products by popularity top_k_products = set(name for _, name in popularity[:K]) # Dictionary to keep track of price changes for each product price_changes = defaultdict(set) # Process each event for name, new_price in events: if name in product_info and name in top_k_products: price_changes[name].add(new_price) # Count distinct price changes distinct_changes = sum(len(changes) for changes in price_changes.values()) return distinct_changes # Example usage: # N = 5 # Q = 3 # K = 2 # products = [(\\"ProdA\\", 100, 250), (\\"ProdB\\", 150, 200), (\\"ProdC\\", 100, 300), (\\"ProdD\\", 120, 400), (\\"ProdE\\", 90, 100)] # events = [(\\"ProdA\\", 110), (\\"ProdD\\", 115), (\\"ProdB\\", 140)] # print(distinct_price_changes(N, Q, K, products, events)) # Output: 1"},{"question":"Bear Limak is playing a game with a set of cards numbered from 1 to 100. He wants to know if a sequence of moves will lead to him holding any card with a prime number. Limak starts with an initial card. Each move consists of either increasing the card value by a number ( k ) (where ( k ) is in the range of [1, 10]) or doubling the current value of the card. He can make up to 50 moves. You need to determine if, within 50 moves, Limak can hold any card with a prime number. Input The first line contains one integer ( t ) (1 ≤ ( t ) ≤ 1000), the number of test cases. Each of the next ( t ) lines contains one integer ( n ) (1 ≤ ( n ) ≤ 100) representing the initial value of the card. Output For each test case, print \\"yes\\" (without quotes) if Limak can hold any card with a prime number within 50 moves, or \\"no\\" (without the quotes) otherwise. Examples Input 3 10 15 4 Output yes yes yes Explanation In the first test case, Limak can make the card value 11 by adding 1 to 10, and 11 is prime. In the second test case, Limak can double the 15 a few times, and achieve 31 after additions, which is prime. In the third test case, Limak can double 4 twice to get 16, then add 1 to get 17, which is prime.","solution":"def is_prime(n): Function to check if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def can_hold_prime(n): Function to determine if a prime number can be held within 50 moves. max_moves = 50 queue = [(n, 0)] visited = set() while queue: current_value, moves = queue.pop(0) if moves > max_moves: continue if is_prime(current_value): return \\"yes\\" visited.add(current_value) # Trying all possible increasing moves for k in range(1, 11): new_value = current_value + k if new_value not in visited: queue.append((new_value, moves + 1)) # Trying doubling the card value new_value = current_value * 2 if new_value not in visited: queue.append((new_value, moves + 1)) return \\"no\\" def process_queries(t, queries): results = [] for n in queries: results.append(can_hold_prime(n)) return results"},{"question":"Alice wants to build a small guest house with rooms connected by doors. Each room is represented as a node and each door as an edge in an undirected graph. The goal is to ensure that there are no cycles in the network of rooms (i.e., the network should be a tree). Given the number of rooms and the possible connections (doors) between them, return the minimum number of doors required to connect all the rooms in such a way that there are no cycles. Input: The first line contains two integers, R (the number of rooms) and D (the number of possible doors). Each of the next D lines contains two integers u and v, representing a door between rooms u and v. Output: Print the minimum number of doors required to connect all the rooms in a tree structure. Constraints: 1 ≤ R ≤ 100000 0 ≤ D ≤ 200000 1 ≤ u, v ≤ R SAMPLE INPUT 4 5 1 2 1 3 2 3 2 4 3 4 SAMPLE OUTPUT 3 Explanation: The minimum number of doors needed to connect the 4 rooms without forming a cycle is 3. One possible configuration is doors between rooms [1-2], [1-3], and [2-4].","solution":"def minimum_doors_to_connect_rooms(R, D, doors): Returns the minimum number of doors required to connect all the rooms in a tree structure. # To make a tree with R nodes, we need exactly R-1 edges (doors). # A tree with R rooms and R-1 doors is always acyclic and connected. if R - 1 > D: return -1 # Not enough edges to form a connected tree return R - 1 # Example usage: # R = 4 # D = 5 # doors = [(1, 2), (1, 3), (2, 3), (2, 4), (3, 4)] # print(minimum_doors_to_connect_rooms(R, D, doors)) # Output: 3"},{"question":"In a distant land, there is a peculiar tradition where residents celebrate a holiday called \\"Array Reversal Day\\". On this special occasion, they reverse different parts of a given array based on specific conditions. Your task is to help them by writing a program that performs these partial reversals. Given an array of integers, reverse the subarray from index \'k1\' to \'k2\' (both inclusive), then reverse the subarray from index \'k3\' to \'k4\' (both inclusive). The indices k1, k2, k3, and k4 are guaranteed to satisfy the conditions: 0 ≤ k1 ≤ k2 < k3 ≤ k4 < n, where n is the length of the array. Input The first line contains an integer n (1 ≤ n ≤ 100) – the length of the array. The second line contains n space-separated integers a1, ..., an (-10^5 ≤ ai ≤ 10^5) – the elements of the array. The third line contains four integers k1, k2, k3, and k4 (0 ≤ k1 ≤ k2 < k3 ≤ k4 < n) – the indices for the partial reversals. Output Print the resulting array after performing both partial reversals. Examples Input 7 1 2 3 4 5 6 7 1 3 4 6 Output 1 4 3 2 5 6 7 Input 5 10 20 30 40 50 0 2 3 4 Output 30 20 10 50 40","solution":"def partial_reverse_array(arr, k1, k2, k3, k4): This function reverses subarray from index k1 to k2 (inclusive), and then reverses subarray from index k3 to k4 (inclusive). :param arr: List[int] - The input array :param k1: int - Start index of first subarray :param k2: int - End index of first subarray :param k3: int - Start index of second subarray :param k4: int - End index of second subarray :return: List[int] - The modified array with the specified parts reversed # Reverse the first subarray arr[k1:k2+1] = arr[k1:k2+1][::-1] # Reverse the second subarray arr[k3:k4+1] = arr[k3:k4+1][::-1] return arr # Example usage: # n = 7 # arr = [1, 2, 3, 4, 5, 6, 7] # k1, k2, k3, k4 = 1, 3, 4, 6 # result = partial_reverse_array(arr, k1, k2, k3, k4) # print(result) # Output: [1, 4, 3, 2, 7, 6, 5]"},{"question":"You are tasked with implementing your own version of a built-in `sum` function. This custom function should behave exactly as Python\'s built-in `sum` function, which calculates the sum of a sequence of numbers, but with the following conditions: * The function **cannot** use, in any way, the original `sum` function. * The function **must** take an iterable (such as a list or tuple) as input and return an integer or float as the sum. * You should also consider that an optional second argument can be passed to serve as the starting value for the summation (default is 0). Your implementation should be able to handle lists of integers and floats and should match the performance and output of the built-in `sum` function. Example: ``` my_sum([1, 2, 3]) = 6 my_sum([1.1, 2.2, 3.3]) = 6.6000000000000005 my_sum([1, 2, 3], 5) = 11 ```","solution":"def my_sum(iterable, start=0): Returns the sum of the given iterable, starting with an initial value of `start`. Mimics the behavior of the built-in sum function. Parameters: iterable: An iterable of numbers (e.g., list, tuple) to be summed. start (optional): The starting value of the summation (default is 0). Returns: The sum of the elements in the iterable plus the starting value. total = start for item in iterable: total += item return total"},{"question":"You are given a list of pairs indicating the dependencies between tasks that must be completed. Each task is represented by a unique integer. The dependency pairs are arranged such that each pair contains two tasks (a, b) where task \'a\' must be completed before task \'b\'. Your goal is to determine the order in which these tasks can be completed while satisfying all given dependencies. Your task is to write a function that takes two inputs: 1. An integer `n` representing the number of tasks. 2. A list of tuples `dependencies` representing the dependency pairs. The function should return a list of integers representing a valid task order such that for any pair (a, b) in the dependencies, task \'a\' comes before task \'b\'. If there are multiple valid task orders, return any of them. If it is not possible to complete all tasks due to circular dependencies, return an empty list. Input - The first line contains an integer n (1 ≤ n ≤ 1000) - the number of tasks. - The second line contains an integer m (0 ≤ m ≤ 10000) - the number of dependency pairs. - Each of the next m lines contains two space-separated integers a and b (1 ≤ a, b ≤ n, a ≠ b) - representing a pair (a, b) indicating task \'a\' must be completed before task \'b\'. Output - Print a list of integers representing a valid order of tasks if possible. If no valid order exists, print an empty list. Examples Input 4 4 1 2 2 3 3 4 4 2 Output [] Input 5 4 1 2 1 3 2 4 3 5 Output 1 2 3 4 5 Note In the first example, there is a circular dependency among the tasks (2 → 3 → 4 → 2), making it impossible to complete the tasks. Hence, an empty list is returned. In the second example, one valid task order is [1, 2, 3, 4, 5]. There are no circular dependencies, so the tasks can be completed in a linear order.","solution":"def task_order(n, dependencies): Returns a valid task order for completing tasks based on given dependencies. :param n: int, number of tasks :param dependencies: list of tuples, each tuple (a, b) represents task a must be completed before task b :return: list of int, a valid task order or an empty list if no valid order exists from collections import defaultdict, deque # Build graph and in-degree counts graph = defaultdict(list) in_degree = [0] * (n + 1) for a, b in dependencies: graph[a].append(b) in_degree[b] += 1 # Initialize queue with nodes having zero in-degree zero_in_degree_queue = deque() for i in range(1, n + 1): if in_degree[i] == 0: zero_in_degree_queue.append(i) order = [] # Process nodes with zero in-degree while zero_in_degree_queue: task = zero_in_degree_queue.popleft() order.append(task) for neighbor in graph[task]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # If the ordering includes all tasks, return it; otherwise, return empty list return order if len(order) == n else []"},{"question":"A company has recently started implementing a rewards system for its employees. Each employee is given a unique identifier with a score representing their performance. The company wants to identify the top-performing segments of consecutive employees. You are given an array of integers, where each integer represents the performance score of an employee. Your task is to find the maximum sum of the scores of any segment (contiguous subarray) and also to return the starting and ending indices of this segment. If there are multiple segments with the same maximum sum, return the one with the smallest starting index. In case of a tie, return the one with the smallest ending index. -----Input----- The input begins with a single integer T, the number of test cases. Each test case starts with an integer N, the number of employees. This is followed by N integers representing the performance scores of the employees. -----Output----- For each test case, output the maximum sum, followed by the starting and ending indices of the segment (1-based index). -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100000 - -1000 ≤ Performance score ≤ 1000 -----Sample Input----- 2 5 -1 2 3 -4 2 4 1 2 3 -6 -----Sample Output----- 5 2 3 6 1 3 -----Explanation----- In the first test case, the segment with the maximum sum is (2, 3), which contributes to the sum of 5. Thus, the output is 5, starting at index 2 and ending at index 3. In the second test case, the segment with the maximum sum is (1, 2, 3), which contributes to the sum of 6. Thus, the output is 6, starting at index 1 and ending at index 3.","solution":"def max_subarray_with_indices(scores): Finds the maximum sum of any segment (contiguous subarray) of scores and returns the sum along with the starting and ending indices of the segment. Indices are returned in 1-based format. n = len(scores) max_sum = -float(\'inf\') current_sum = 0 start = 0 best_start = best_end = 0 for i in range(n): if current_sum <= 0: current_sum = scores[i] start = i else: current_sum += scores[i] if current_sum > max_sum or (current_sum == max_sum and (i - start < best_end - best_start or i - start == best_end - best_start and start < best_start)): max_sum = current_sum best_start = start best_end = i return max_sum, best_start + 1, best_end + 1 def find_max_performance_segments(T, test_cases): results = [] for test in test_cases: N = test[0] scores = test[1:] result = max_subarray_with_indices(scores) results.append(result) return results"},{"question":"Johnny and Sarah are competing in a fruit picking game. Initially, Johnny picks P fruits and Sarah picks Q fruits. They take turns in increasing their number of fruits. On each of their turns, Johnny picks J more fruits, and Sarah picks S more fruits. Johnny always starts the game. The game continues for M turns in total. Your task is to find out the total fruits collected by Johnny and Sarah after all the turns. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains five integers: P, Q, J, S, and M. ------ Output ------ For each test case, output a single line containing two space-separated integers: the total fruits picked by Johnny and Sarah after all the turns. ------ Constraints ------ 1 ≤ T ≤ 100 0 ≤ P, Q, J, S ≤ 100 1 ≤ M ≤ 100 ----- Sample Input 1 ------ 3 1 2 1 2 1 0 0 3 4 2 5 10 2 1 5 ----- Sample Output 1 ------ 2 4 6 8 15 15 ----- explanation 1 ------ In the first testcase, Johnny starts with 1 fruit and Sarah with 2 fruits. Johnny picks 1 more fruit and Sarah picks 2 more fruits in one turn. Hence, after 1 turn, Johnny has 1 + 1 = 2 fruits and Sarah has 2 + 2 = 4 fruits. In the second testcase, both start with 0 fruits. Johnny picks 3 fruits in his first turn and Sarah picks 4 fruits in her turn. Hence, after 2 turns (1 turn each), Johnny has 0 + 3 + 3 = 6 fruits and Sarah has 0 + 4 + 4 = 8 fruits. In the third testcase, Johnny starts with 5 fruits and Sarah with 10 fruits. Over 5 turns, Johnny picks 2 fruits and Sarah picks 1 fruit each turn. Hence, Johnny\'s total fruits will be 5 + 2*5 = 15 and Sarah\'s total fruits will be 10 + 1*5 = 15.","solution":"def total_fruits(T, test_cases): results = [] for case in test_cases: P, Q, J, S, M = case johnny_total = P + J * M sarah_total = Q + S * M results.append((johnny_total, sarah_total)) return results"},{"question":"You are in charge of developing a tracking system to monitor delivery packages for a logistics company. Each package has an ID number, and its delivery status is updated at various checkpoints. You need to create a function that tracks the most recent status of each package based on the sequence of updates. The delivery status updates of the packages are given as a list of tuples. Each tuple contains three elements: the package ID (an integer), the checkpoint time (a string in HH:MM format), and the status description (a string). Your task is to process these updates and identify the latest status of each package by the end of the day. -----Constraints----- - All values in input are valid. - 1 ≤ number of updates ≤ 10^5 - 1 ≤ package ID ≤ 10^6 - The checkpoint time will be in the 24-hour format (HH:MM) and will be within a single day. - The status description is a non-empty string with a maximum length of 100. -----Input----- Input is given from Standard Input in the following format: The first line contains an integer `M`, the number of status updates. Each of the next `M` lines contains a status update in the format: package_id HH:MM status -----Output----- Print the latest status of each package at the end of the day in ascending order of package ID. -----Sample Input----- 5 1 09:00 Dispatched 2 10:30 In Transit 1 11:45 Delivered 2 10:45 Out for Delivery 3 12:00 Shipped -----Sample Output----- 1 Delivered 2 Out for Delivery 3 Shipped - Package 1 was last updated at 11:45 with the status \\"Delivered.\\" - Package 2 was last updated at 10:45 with the status \\"Out for Delivery.\\" - Package 3 was last updated at 12:00 with the status \\"Shipped.\\"","solution":"def get_latest_statuses(updates): Given a list of updates, each update is represented as a tuple (package_id, checkpoint_time, status), returns the latest status for each package. from collections import defaultdict def time_to_minutes(t): h, m = map(int, t.split(\':\')) return h * 60 + m latest_status = defaultdict(lambda: (\\"00:00\\", \\"\\")) for package_id, checkpoint_time, status in updates: current_time = time_to_minutes(checkpoint_time) last_update_time = time_to_minutes(latest_status[package_id][0]) if current_time >= last_update_time: latest_status[package_id] = (checkpoint_time, status) result = [(k, v[1]) for k, v in sorted(latest_status.items())] return result"},{"question":"You are given an array `arr` of `n` integers and an integer `target`. Your task is to find a pair of indices `(i, j)` such that `arr[i] + arr[j] == target` and return them in a list `[i, j]`. If no such pair exists, return an empty list. Each input will have exactly one solution, and you may not use the same element twice. Example: Input: n = 4 arr = [2, 7, 11, 15] target = 9 Output: [0, 1] Explanation: Because arr[0] + arr[1] == 9, we return [0, 1]. Note: - You can assume that each input has exactly one solution. - You cannot use the same element twice. Your Task: You don\'t have to read input or print anything. Your task is to complete the function `findPair()` which takes the integer `n` and array `arr` and integer `target` as input and returns the list of indices that add up to `target`. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= n <= 10^4 -10^9 <= arr[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def findPair(n, arr, target): Finds a pair of indices (i, j) in `arr` such that arr[i] + arr[j] == target. Parameters: n (int): The number of elements in the array. arr (list of int): The input array. target (int): The target sum. Returns: list of int: A list containing the pair of indices [i, j]. If no such pair exists, returns an empty list. nums_map = {} for i in range(n): complement = target - arr[i] if complement in nums_map: return [nums_map[complement], i] nums_map[arr[i]] = i return []"},{"question":"You are given a list of non-negative integers. Your task is to sort this list such that all odd numbers appear before all even numbers, and the odd and even numbers themselves are sorted in ascending order within their respective groups. For example, given the input list `[4, 1, 2, 3]`, the output should be `[1, 3, 2, 4]`. Your function should handle the following constraints: 1. The input list contains at least one integer. 2. List length does not exceed 10⁵. 3. Each integer in the list lies between 0 and 10⁹. Write a function `sort_odd_even(numbers)` that takes as input a list of integers and returns a list sorted based on the described criteria. # Input - A single list of non-negative integers, `numbers`. # Output - A list of integers sorted such that all odd numbers come before all even numbers, with each group sorted in ascending order. # Example Input ```python numbers = [4, 1, 2, 3] ``` Output ```python [1, 3, 2, 4] ``` Input ```python numbers = [6, 5, 6] ``` Output ```python [5, 6, 6] ``` # Constraints 1. `1 ≤ len(numbers) ≤ 10⁵` 2. `0 ≤ numbers[i] ≤ 10⁹`","solution":"def sort_odd_even(numbers): This function sorts a list such that all odd numbers come before all even numbers, with each group sorted in ascending order. :param numbers: List of non-negative integers :return: List of integers sorted based on the described criteria # Separate odd and even numbers odds = [n for n in numbers if n % 2 != 0] evens = [n for n in numbers if n % 2 == 0] # Sort both lists in ascending order odds.sort() evens.sort() # Combine odds first, then evens return odds + evens"},{"question":"Sarah is organizing a charity marathon and wants to create running bibs for participants. Each participant should have a unique bib number. However, she wants to keep the bib numbers as compact as possible by using the minimum number of digits necessary for each bib, starting from 1 up to the maximum number of participants. Given a total number of participants, determine the bib number for each participant and print them in ascending order. Example n = 5 The bib numbers should be [1, 2, 3, 4, 5]. Function Description Complete the function generateBibs in the editor below. generateBibs has the following parameter(s): int n: the total number of participants Returns int[]: the list of bib numbers in ascending order Input Format The input is a single integer, n, which represents the number of participants. Constraints 1leq nleq10^5 Sample Input 7 Sample Output 1 2 3 4 5 6 7 Explanation The participants will have bib numbers from 1 to 7.","solution":"def generateBibs(n): Given the number of participants, returns a list of bib numbers from 1 to n. Parameters: n (int): The total number of participants. Returns: List[int]: The list of bib numbers in ascending order. return list(range(1, n+1))"},{"question":"A company has multiple departments, each with a unique department ID. Each department maintains a list of employee IDs representing the employees working in that department. Given the current state of all departments, your task is to handle a variety of queries related to employee transfers and department statistics. The types of queries can be: 1. Transfer employee X from department A to department B. 2. Merge department A into department B. After merging, all employees of A will be transferred to B, and department A will become empty. 3. List all unique employee IDs across all departments (without duplicates). 4. Count the number of employees in a given department. Input: - The first line contains an integer D (1 ≤ D ≤ 10^4), which represents the number of departments initially. - The next D lines each contain the description of a single department: the first element is the department ID (an integer) followed by the list of employee IDs (each an integer) in that department. Each department description is on a single line, and department IDs are unique. - The next line contains an integer Q (1 ≤ Q ≤ 10^5), which represents the number of queries. - Each of the following Q lines describe a single query of one of the four types: - 1 X A B (1 ≤ X includes D employee IDs ≤ 10^6, 1 ≤ A, B ≤ D) - 2 A B (1 ≤ A, B ≤ D) - 3 - 4 A (1 ≤ A ≤ D) Output: For each query of type 3, print the list of all unique employee IDs in non-decreasing order. For each query of type 4, print the number of employees in the specified department. Example: Input: ``` 3 1 1001 1002 1003 2 2001 2002 3 3001 3002 3003 3004 4 1 1001 1 2 2 2 3 3 4 3 ``` Output: ``` List of [1002, 1003, 2001, 2002, 3001, 3002, 3003, 3004] Count of [8] ``` Explanation: - Query 1 transfers employee 1001 from department 1 to department 2. - Query 2 merges department 2 into department 3. - Query 3 lists all employees across all departments without duplicates. - Query 4 counts the number of employees in department 3 after merging.","solution":"def initialize_departments(department_data): Initializes the departments with their respective employee lists. Parameters: department_data (list of lists): Each sublist contains the department ID and employee IDs. Returns: dict: A dictionary with department ID as key and set of employee IDs as value. departments = {} for data in department_data: dept_id = data[0] employees = set(data[1:]) departments[dept_id] = employees return departments def transfer_employee(departments, employee_id, from_dept, to_dept): Transfers an employee from one department to another. Parameters: departments (dict): The dictionary containing department info. employee_id (int): The employee ID to be transferred. from_dept (int): ID of the department to transfer from. to_dept (int): ID of the department to transfer to. if employee_id in departments[from_dept]: departments[from_dept].remove(employee_id) departments[to_dept].add(employee_id) def merge_departments(departments, from_dept, to_dept): Merges one department into another, transferring all employees. Parameters: departments (dict): The dictionary containing department info. from_dept (int): ID of the department to merge from. to_dept (int): ID of the department to merge into. departments[to_dept].update(departments[from_dept]) departments[from_dept].clear() def list_unique_employees(departments): Lists all unique employee IDs across all departments. Parameters: departments (dict): The dictionary containing department info. Returns: list: A sorted list of unique employee IDs. unique_employees = set() for employees in departments.values(): unique_employees.update(employees) return sorted(unique_employees) def count_employees_in_department(departments, dept_id): Counts the number of employees in a specific department. Parameters: departments (dict): The dictionary containing department info. dept_id (int): The department ID for which to count employees. Returns: int: Number of employees in the specified department. return len(departments[dept_id])"},{"question":"Alice is a software engineer working on a new feature for her company\'s website. The new feature involves showing a list of products filtered by specific attributes. Each product has a set of attributes, and the website will allow users to filter the list of products by selecting multiple attributes. Alice\'s goal is to implement the backend function that handles this filtering. The function will receive a list of products and a list of selected attributes. Each product is associated with several attributes, and the product should be included in the output list if it has all the selected attributes. The function should return the list of product IDs that meet the filtering criteria. -----Input----- The input consists of two parts: 1. A list of products, where each product is represented as a dictionary with an \\"id\\" key and an \\"attributes\\" key. The \\"id\\" key maps to a unique integer representing the product\'s ID, and the \\"attributes\\" key maps to a list of strings representing the product\'s attributes. 2. A list of strings representing the selected attributes to filter the products by. -----Output----- Output a list of integers representing the IDs of the products that have all the selected attributes. The order of the IDs in the output does not matter. -----Examples----- Sample Input 1: products = [ {\\"id\\": 1, \\"attributes\\": [\\"red\\", \\"large\\", \\"cotton\\"]}, {\\"id\\": 2, \\"attributes\\": [\\"blue\\", \\"small\\", \\"silk\\"]}, {\\"id\\": 3, \\"attributes\\": [\\"red\\", \\"small\\", \\"cotton\\"]} ] selected_attributes = [\\"red\\", \\"cotton\\"] Sample Output 1: [1, 3] Sample Input 2: products = [ {\\"id\\": 1, \\"attributes\\": [\\"red\\", \\"large\\", \\"cotton\\"]}, {\\"id\\": 2, \\"attributes\\": [\\"blue\\", \\"small\\", \\"silk\\"]}, {\\"id\\": 3, \\"attributes\\": [\\"red\\", \\"small\\", \\"cotton\\"]} ] selected_attributes = [\\"small\\", \\"silk\\"] Sample Output 2: [2] Sample Input 3: products = [ {\\"id\\": 1, \\"attributes\\": [\\"red\\", \\"large\\", \\"cotton\\"]}, {\\"id\\": 2, \\"attributes\\": [\\"blue\\", \\"small\\", \\"silk\\"]}, {\\"id\\": 3, \\"attributes\\": [\\"red\\", \\"small\\", \\"cotton\\"]} ] selected_attributes = [\\"green\\"] Sample Output 3: []","solution":"def filter_products(products, selected_attributes): Returns the list of product IDs that have all the selected attributes. :param products: List of products, each product is a dictionary with keys \\"id\\" and \\"attributes\\". :param selected_attributes: List of strings representing the selected attributes to filter by. :return: List of integers representing product IDs that meet the filtering criteria. filtered_product_ids = [] for product in products: if all(attribute in product[\\"attributes\\"] for attribute in selected_attributes): filtered_product_ids.append(product[\\"id\\"]) return filtered_product_ids"},{"question":"Fiona is learning about sorting algorithms in her computer science class. As a homework assignment, she needs to implement a simple sorting algorithm called selection sort. The selection sort algorithm sorts an array by repeatedly finding the minimum element from unsorted part and putting it at the beginning. Help Fiona by writing a function that takes an array of integers and sorts it using the selection sort algorithm. -----Input----- The first line of the input contains n (1 <= n <= 1000), the number of elements in the array. The second line of the input contains n integers, separated by spaces, which are the elements of the array. -----Output----- Print the sorted array, with elements separated by spaces. -----Examples----- Input 5 64 34 25 12 22 Output 12 22 25 34 64 Input 3 3 1 2 Output 1 2 3","solution":"def selection_sort(arr): Sorts the given array using selection sort algorithm. Args: arr (list): List of integers to sort. Returns: list: Sorted list of integers. n = len(arr) for i in range(n): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i+1, n): if arr[j] < arr[min_idx]: min_idx = j # Swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"question":"You are given an array of integers `nums` and an integer `k`. You need to rearrange the array such that the difference between the maximum value of any subarray of length `k` and the minimum value of any subarray of length `k` is minimized. Your goal is to rearrange the array in a way that the following value is minimized: [ max({ max(text{subarray of length } k) - min(text{subarray of length } k) }) ] -----Input----- The first line of the input contains an integer t (1 le t le 10) — the number of test cases. The first line of each test case contains two integers n and k (1 le n le 1000; 1 le k le n) — the number of elements in the array and the length of the subarray, respectively. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 le a_i le 10000) — the elements of the array. It is guaranteed that the sum of n across all test cases does not exceed 10000. -----Output----- For each test case, print a single integer — the minimum possible value of (max({ max(text{subarray of length } k) - min(text{subarray of length } k) })) after rearranging the array optimally. -----Example----- Input 2 5 3 1 5 3 8 12 6 2 4 2 7 3 5 1 Output 4 1 -----Note----- For the first test case, one possible solution is to rearrange the array as `[1, 3, 5, 8, 12]`. The subarrays of length 3 are: - `[1, 3, 5]` with difference (5 - 1 = 4) - `[3, 5, 8]` with difference (8 - 3 = 5) - `[5, 8, 12]` with difference (12 - 5 = 7) The maximum difference between the maximum and minimum values of all these subarrays is 4. For the second test case, one possible solution is to rearrange the array as `[1, 2, 3, 4, 5, 7]`. The subarrays of length 2 are: - `[1, 2]` with difference (2 - 1 = 1) - `[2, 3]` with difference (3 - 2 = 1) - `[3, 4]` with difference (4 - 3 = 1) - `[4, 5]` with difference (5 - 4 = 1) - `[5, 7]` with difference (7 - 5 = 2) The maximum difference between the maximum and minimum values of all these subarrays is 1.","solution":"def minimize_max_diff(t, test_cases): results = [] for case in test_cases: n, k, nums = case nums.sort() min_max_diff = float(\'inf\') for i in range(n - k + 1): subarray = nums[i:i + k] max_min_diff = subarray[-1] - subarray[0] if max_min_diff < min_max_diff: min_max_diff = max_min_diff results.append(min_max_diff) return results"},{"question":"In an ancient kingdom, there lived a twisted wizard who liked to play with numbers. He created a challenging puzzle for anyone who dared to solve it. The puzzle is as follows: You are given a sequence of n integers, and you need to make the sequence non-decreasing (sorted in non-decreasing order) by performing the minimum number of \\"element swaps\\". A swap is defined as follows: select any two different elements of the array and swap their positions. For example, if the array is [3, 1, 4, 5, 2], swapping the first and the second element will result in the array [1, 3, 4, 5, 2]. Given a sequence of n integers, please help the kingdom inhabitants find the minimum number of swaps needed to make the sequence sorted in non-decreasing order. -----Input----- The first line contains an integer n (1 le n le 10^5) — the number of integers in the sequence. The second line contains n integers a_{1},a_{2},...,a_{n} (1 leq a_{i} leq 10^9) — the sequence of integers. -----Output----- Output one integer: the minimum number of swaps needed to sort the sequence in non-decreasing order. -----Example----- Input 5 4 3 1 2 5 Output 3 -----Note----- In the given sequence, we can perform the following swaps to make it sorted: 1. Swap elements at positions 1 and 3: [1, 3, 4, 2, 5] 2. Swap elements at positions 2 and 4: [1, 2, 4, 3, 5] 3. Swap elements at positions 3 and 4: [1, 2, 3, 4, 5] Thus, the minimum number of swaps needed is 3.","solution":"def min_swaps_to_sort(arr): n = len(arr) # Create a list of tuples where each tuple contains an element and its index arr_with_indices = [(value, index) for index, value in enumerate(arr)] # Sort the array by the elements arr_with_indices.sort() # Initialize a visited list to keep track of whether an element has been visited visited = [False] * n swaps = 0 # Iterate through the array elements for i in range(n): # If the element is visited or is in the correct position, skip it if visited[i] or arr_with_indices[i][1] == i: continue # Calculate the number of elements in the cycle cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_with_indices[j][1] cycle_size += 1 # If cycle size is greater than 1, add cycle_size - 1 to swaps if cycle_size > 1: swaps += cycle_size - 1 return swaps"},{"question":"A futuristic city is controlled by a central server that monitors and controls the temperatures of n buildings in the city. Each building has an initial temperature which can be adjusted by a temperature control algorithm. The algorithm can increase or decrease the temperature by a specified increment over a specified period. Your task is to write a program that will help the central server in determining the resulting temperatures of the buildings after a series of temperature adjustment commands. Each command consists of: - `i` (the id of the building, 1 ≤ i ≤ n) - `t` (the time at which the command is executed, 0 ≤ t ≤ 10^4) - `d` (the temperature difference, which can be positive or negative, -100 ≤ d ≤ 100) Commands are executed in the order given. If multiple commands are scheduled for the same time, they are executed in the order they appear in the input. Initially, the temperature of each building is 0. # Input - The first line contains an integer n (1 ≤ n ≤ 10^4) representing the number of buildings. - The second line contains an integer m (1 ≤ m ≤ 10^5) representing the number of commands. - The following m lines contain three integers each: `i t d` representing the building id, the time of the command, and the temperature difference respectively. # Output - Output n lines, each line representing the final temperature of each building in the same order as input. # Example Input ``` 3 5 1 1 5 2 2 -3 3 3 10 1 4 -2 3 3 -5 ``` Output ``` 3 -3 5 ``` Explanation - At time 1, the temperature of building 1 is increased by 5, so its temperature becomes 5. - At time 2, the temperature of building 2 is decreased by 3, so its temperature becomes -3. - At time 3, the temperature of building 3 is increased by 10, so its temperature becomes 10. - At time 3, the temperature of building 3 is further decreased by 5, so its temperature becomes 5. - At time 4, the temperature of building 1 is decreased by 2, so its temperature becomes 3.","solution":"def adjust_temperatures(n, m, commands): Adjusts the temperatures of n buildings based on m commands. Parameters: n (int): The number of buildings. m (int): The number of commands. commands (list of tuples): Each tuple contains three integers (i, t, d) representing the building id, the time of the command, and the temperature difference respectively. Returns: list: A list of final temperatures of the buildings. temperatures = [0] * n # Initialize the temperatures of all buildings to 0 for command in commands: building_id, _, temp_diff = command temperatures[building_id - 1] += temp_diff return temperatures"},{"question":"You are given a list of unique book titles with their corresponding authors. Your task is to implement a library management system with the following functionalities: 1. **Add a book:** - Adds a new book title and its author to the library. - If the book already exists in the library, update the author of the book. 2. **Remove a book:** - Removes an existing book title from the library. 3. **Find a book by title:** - Given a book title, return the name of the author. - If the book is not found, return \\"Book not found\\". 4. **List all books by an author:** - Given an author\'s name, list all book titles authored by that person. - If the author has no books in the library, return \\"No books found by this author\\". **Input:** The first line contains an integer `Q`, the number of queries. The next `Q` lines contain commands, each in the format described below: - \\"ADD title author\\" (title and author are strings with no spaces) - \\"REMOVE title\\" (title is a string with no spaces) - \\"FIND title\\" (title is a string with no spaces) - \\"LIST author\\" (author is a string with no spaces) **Output:** For each \\"FIND\\" command, output the author\'s name or \\"Book not found\\". For each \\"LIST\\" command, output the titles of books by the specified author separated by commas, or \\"No books found by this author\\". **Constraints:** 1 ≤ Q ≤ 1000 **SAMPLE INPUT:** 12 ADD HarryPotter J.K.Rowling ADD TheHobbit J.R.R.Tolkien ADD HarryPotter J.K.Rowling REMOVE TheHobbit FIND HarryPotter FIND TheHobbit LIST J.K.Rowling LIST J.R.R.Tolkien ADD TheLordOfTheRings J.R.R.Tolkien LIST J.R.R.Tolkien REMOVE HarryPotter LIST J.K.Rowling **SAMPLE OUTPUT:** J.K.Rowling Book not found HarryPotter No books found by this author TheLordOfTheRings No books found by this author **Explanation:** - \\"HarryPotter\\" by \\"J.K.Rowling\\" was added. - \\"TheHobbit\\" by \\"J.R.R.Tolkien\\" was added. - The second \\"ADD HarryPotter J.K.Rowling\\" command confirms that if a book already exists, it remains unchanged. - \\"TheHobbit\\" was removed. - \\"FIND HarryPotter\\" returns the author \\"J.K.Rowling\\". - \\"FIND TheHobbit\\" returns \\"Book not found\\" as it was removed. - \\"LIST J.K.Rowling\\" returns \\"HarryPotter\\" because it is the only book by this author. - \\"LIST J.R.R.Tolkien\\" returns \\"No books found by this author\\" after \\"TheHobbit\\" was removed. - The book \\"TheLordOfTheRings\\" by \\"J.R.R.Tolkien\\" was added. - \\"LIST J.R.R.Tolkien\\" returns \\"TheLordOfTheRings\\" as it is authored by J.R.R.Tolkien. - \\"HarryPotter\\" was removed. - \\"LIST J.K.Rowling\\" returns \\"No books found by this author\\" after \\"HarryPotter\\" was removed.","solution":"class Library: def __init__(self): # Library data structure to store books with title as key and author as value self.books = {} def add_book(self, title, author): # Add or update the book in the library self.books[title] = author def remove_book(self, title): # Remove the book from the library if it exists if title in self.books: del self.books[title] def find_book(self, title): # Find the book\'s author by title return self.books.get(title, \\"Book not found\\") def list_books(self, author): # List all books by the given author books_by_author = [title for title, auth in self.books.items() if auth == author] if books_by_author: return \',\'.join(books_by_author) else: return \\"No books found by this author\\" def process_commands(commands): library = Library() results = [] for command in commands: parts = command.split(maxsplit=2) if parts[0] == \\"ADD\\": title, author = parts[1], parts[2] library.add_book(title, author) elif parts[0] == \\"REMOVE\\": title = parts[1] library.remove_book(title) elif parts[0] == \\"FIND\\": title = parts[1] results.append(library.find_book(title)) elif parts[0] == \\"LIST\\": author = parts[1] results.append(library.list_books(author)) return results"},{"question":"Given an array of integers and a target sum, determine the number of pairs of distinct indices (i, j) such that the elements at those indices add up to the target sum. The solution should be efficient in time complexity. Example 1: Input: nums[] = {1, 5, 7, -1, 5} target = 6 Output: 3 Explanation: There are three pairs of indices with sum 6: (0, 1), (1, 4), (2, 3) Example 2: Input: nums[] = {1, 1, 1, 1} target = 2 Output: 6 Explanation: There are six pairs of indices with sum 2: (0,1), (0,2), (0,3), (1,2), (1,3), (2,3) Your Task: Complete the function countPairsWithSum() that receives an integer array and target sum and returns an integer value representing the number of distinct pairs with the given sum. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def countPairsWithSum(nums, target): Returns the number of pairs of indices (i, j) such that nums[i] + nums[j] equals target. freq_map = {} count = 0 for num in nums: complement = target - num if complement in freq_map: count += freq_map[complement] if num in freq_map: freq_map[num] += 1 else: freq_map[num] = 1 return count"},{"question":"The local wildlife reserve is observing a particular species of bird known for engaging in a unique dance known as the \\"Feather Flutter\\". The birds communicate with patterns of fluttering their feathers in specific sequences of colors during sunrise. The reserve biologists have noted the importance of observing these sequences as they indicate the health and behavior of the bird population. The reserve is divided into various observation points, and biologists have mapped out code sequences of observed flutter patterns between these points. Each sequence is represented as an unidirectional sequence of colors. Your task is to analyze these sequences to answer queries about the frequency of certain color patterns between different pairs of observation points. Given the map of observation points and the sequences, determine how many times a given pattern appears as a contiguous subsequence in the flutter sequences between two specific observation points. Input The first line contains an integer N (2 ≤ N ≤ 10^5) – the number of observation points in the reserve, numbered from 1 to N. The next N-1 lines each contains three values u, v, and P (1 ≤ u, v ≤ N and P is a string of lowercase English letters of length 1) – indicating a unidirectional flutter pattern sequence from point u to point v with color pattern P. The next line contains an integer Q (1 ≤ Q ≤ 10^5) – the number of queries. The following Q lines each contain three values u, v (1 ≤ u, v ≤ N), and S (1 ≤ |S| ≤ 100) where u and v are the observation points and S is the pattern string you need to find in the sequences from point u to point v. Output For each query, output the number of times the pattern string S appears as a contiguous subsequence in the flutter sequences from u to v. Example Input 7 1 2 a 2 3 b 3 4 c 4 5 d 5 6 e 6 7 f 5 1 7 abc 2 5 bcd 1 4 ab 3 6 cde 4 7 def Output 1 1 1 1 1","solution":"from collections import defaultdict, deque def count_pattern_occurrences(N, edges, Q, queries): # Build the graph graph = defaultdict(list) flutter_seq = defaultdict(str) for u, v, p in edges: graph[u].append(v) flutter_seq[(u, v)] = p def bfs(u, v): q = deque([(u, \\"\\")]) visited = set() paths = [] while q: node, path = q.popleft() if node == v: paths.append(path) visited.add(node) for neighbor in graph[node]: if neighbor not in visited: q.append((neighbor, path + flutter_seq[(node, neighbor)])) return paths result = [] def count_occurrences(s, pat): return sum(s[i:i+len(pat)] == pat for i in range(len(s) - len(pat) + 1)) for (u, v, pat) in queries: paths = bfs(u, v) count = sum(count_occurrences(path, pat) for path in paths) result.append(count) return result"},{"question":"A path in a tree is a sequence of vertices such that there is an edge between any two consecutive vertices in the sequence. The path is called \\"simple\\" if it does not contain any repeated vertices. We define the \\"weight\\" of a path as the sum of the weights of the edges in that path. Given a tree with n vertices, where each edge has a weight assigned to it, your task is to find the weight of the maximum weight simple path in the tree. The weight of each edge is a positive integer. Input Format The first line contains an integer, n, denoting the number of vertices in the tree. Each of the next n-1 lines contains three space-separated integers u, v, and w describing an edge between vertices u and v with weight w. Constraints 1 leq n leq 10^5 1 leq w leq 10^6 Output Format Print a single integer denoting the weight of the maximum weight simple path in the tree. Sample Input 0 5 1 2 3 1 3 4 2 4 2 2 5 6 Sample Output 0 12 Explanation 0 The maximum weight simple path in this tree is 5 rightarrow 2 rightarrow 1 rightarrow 3 with a total weight of 6 + 3 + 4 = 13. Sample Input 1 3 1 2 5 2 3 7 Sample Output 1 12 Explanation 1 The maximum weight simple path in this tree is 1 rightarrow 2 rightarrow 3 with a total weight of 5 + 7 = 12.","solution":"from collections import defaultdict, deque def max_weight_simple_path(n, edges): if n == 1: return 0 # Graph representation graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): # Returns the furthest node from the start and its distance visited = [-1] * (n + 1) max_dist = 0 furthest_node = start queue = deque([(start, 0)]) visited[start] = 0 while queue: node, dist = queue.popleft() for neighbor, weight in graph[node]: if visited[neighbor] == -1: visited[neighbor] = dist + weight queue.append((neighbor, dist + weight)) if visited[neighbor] > max_dist: max_dist = visited[neighbor] furthest_node = neighbor return furthest_node, max_dist # Find the furthest node from any node (say node 1) furthest_from_1, _ = bfs(1) # Find the furthest node from furthest_from_1 to get the longest path _, max_path_weight = bfs(furthest_from_1) return max_path_weight # Example use-case tests if __name__ == \\"__main__\\": n = 5 edges = [(1, 2, 3), (1, 3, 4), (2, 4, 2), (2, 5, 6)] print(max_weight_simple_path(n, edges)) # Output should be 13 n = 3 edges = [(1, 2, 5), (2, 3, 7)] print(max_weight_simple_path(n, edges)) # Output should be 12"},{"question":"Task: Write a function **summarize_strings** that takes a list of strings and returns a dictionary. The keys of the dictionary will be the strings from the input list. The values will be dictionaries, which summarize the occurrences of each character in the corresponding string. **Specifications:** 1. The input will be a list of strings. 2. The output should be a dictionary where each key is a string from the input list. 3. Each value in the output dictionary should be another dictionary that contains the character counts for the corresponding string. Examples: ```python summarize_strings([\\"hello\\", \\"world\\", \\"python\\"]): ``` { \\"hello\\": {\\"h\\": 1, \\"e\\": 1, \\"l\\": 2, \\"o\\": 1}, \\"world\\": {\\"w\\": 1, \\"o\\": 1, \\"r\\": 1, \\"l\\": 1, \\"d\\": 1}, \\"python\\": {\\"p\\": 1, \\"y\\": 1, \\"t\\": 1, \\"h\\": 1, \\"o\\": 1, \\"n\\": 1} } ```python summarize_strings([\\"apple\\", \\"banana\\"]): ``` { \\"apple\\": {\\"a\\": 1, \\"p\\": 2, \\"l\\": 1, \\"e\\": 1}, \\"banana\\": {\\"b\\": 1, \\"a\\": 3, \\"n\\": 2} } Constraints: - You may assume that each string in the input list contains only lowercase alphabetic characters. - The list can be empty, in which case the function should return an empty dictionary.","solution":"def summarize_strings(strings): Given a list of strings, return a dictionary summarizing the occurrences of each character in the strings. Parameters: strings (list): List of strings to summarize. Returns: dict: A dictionary where keys are the strings and values are dictionaries with character counts. result = {} for string in strings: char_count = {} for char in string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 result[string] = char_count return result"},{"question":"A company\'s server stores logs of user activities. Each log entry is associated with a particular user. The server needs to handle a series of log operations and generate reports. There are `m` users on the server. Each user is identified by a unique integer `user_id` from `1` to `m`. The server performs `p` operations in chronological order. Operations can be of the following types: 1. `LogEntry user_id` - A new log entry is created for the specified `user_id`. 2. `DeleteLogs user_id` - All log entries for the specified `user_id` are deleted. 3. `GenerateReport t` - A report is generated which includes the log entries of the first `t` operations (in order of their occurrence). It doesn\'t matter if some logs have been deleted later. The report should count and include all the log types in those `t` operations. Write a program to manage these operations and generate the reports. **Input:** - The first line contains two integers `m` and `p` (1 ≤ m, p ≤ 200,000) – the number of users and the number of operations. - The next p lines describe the operations. Each operation is either of the type `1 user_id` if it\'s a LogEntry operation, `2 user_id` if it\'s a DeleteLogs operation, or `3 t` if it\'s a GenerateReport operation. (1 ≤ user_id ≤ m, 1 ≤ t ≤ p) **Output:** - For each `GenerateReport` operation, output the counts of \'LogEntry\' operations that occurred within the first `t` operations. **Examples:** **Input:** ``` 3 5 1 1 1 2 1 3 3 3 2 2 ``` **Output:** ``` 3 ``` **Input:** ``` 4 7 1 4 1 4 1 3 3 2 2 4 1 4 3 4 ``` **Output:** ``` 2 4 ``` **Explanation:** In the first example: - The first three operations are `1 1`, `1 2`, and `1 3` which are all LogEntry operations. Therefore, `GenerateReport 3` counts all three log entries, giving the output `3`. In the second example: - The first two operations are `1 4` and `1 4`, so `GenerateReport 2` counts both log entries, giving the output `2`. - By the fourth operation (`3 4`), four log entries have been created, including two more: `1 3` and `1 4`. Despite the `DeleteLogs` operation deleting logs for user `4`, the count for the report does not change. Hence, `GenerateReport 4` gives the output `4`.","solution":"def manage_operations(m, p, operations): Processes a series of operations and generates reports based on those operations. :param m: Number of users :param p: Number of operations :param operations: List of operations :return: List of results for GenerateReport operations log_entries = [] results = [] for operation in operations: if operation[0] == 1: log_entries.append(\\"LogEntry\\") elif operation[0] == 3: t = operation[1] count = len([entry for entry in log_entries[:t] if entry == \\"LogEntry\\"]) results.append(count) return results"},{"question":"Susan has a collection of N distinct locks, each needing a unique sequence of digits to unlock it. She has a set of M keys, each key represented by a sequence of digits. A lock can be unlocked by a key if the key\'s sequence is exactly the same as the lock\'s sequence. Susan wants to know how many of her locks can be unlocked with the keys she has. Write a program to help Susan determine the number of unlockable locks for a given set of locks and keys. Input Format: The first line of input contains N, the number of locks Susan has. The next N lines each contain a string, representing the sequence of digits of a lock. The following line contains M, the number of keys Susan has. The next M lines each contain a string, representing the sequence of digits of a key. Output Format: Print a single integer representing the number of locks that can be unlocked with the given keys. Constraints: 1 ≤ N, M ≤ 100 1 ≤ length of each lock\'s and key\'s sequence ≤ 10 Sample Input: 5 123 456 789 101 202 4 123 456 101 999 Sample Output: 3 Explanation: The keys \\"123\\", \\"456\\", and \\"101\\" can unlock the locks \\"123\\", \\"456\\", and \\"101\\" respectively. Thus, there are 3 locks that can be unlocked.","solution":"def count_unlockable_locks(lock_sequences, key_sequences): Determines the number of locks that can be unlocked with the given keys. :param lock_sequences: List of strings, each representing a lock sequence :param key_sequences: List of strings, each representing a key sequence :return: Integer, number of unlockable locks # Convert the list of locks and keys to sets for efficient lookups lock_set = set(lock_sequences) key_set = set(key_sequences) # Find the intersection of the two sets to get the common sequences unlockable_locks = lock_set.intersection(key_set) return len(unlockable_locks)"},{"question":"You are given an initial string consisting of lowercase alphabets. You have two operations available: 1. Reverse any substring of the string. 2. Replace each character in the string with its succeeding character in the English alphabet (e.g., \'a\' becomes \'b\', \'b\' becomes \'c\', ..., \'z\' becomes \'a\'). Your task is to determine if it is possible to transform the initial string into a target string using the given operations. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 50) — the number of test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 1000) — the length of the strings. The second line of each test case contains the initial string of length n consisting of lowercase English letters. The third line of each test case contains the target string of length n consisting of lowercase English letters. Output For each test case, print \\"YES\\" (without quotes) if it is possible to transform the initial string into the target string. Otherwise, print \\"NO\\" (without quotes). Example Input 3 5 abcde cdeab 4 abcd dcba 3 xyz yza Output YES YES NO Note In the first test case, we can perform the operations as follows: 1. Replace all characters (\'a\' -> \'b\', \'b\' -> \'c\', \'c\' -> \'d\', \'d\' -> \'e\', \'e\' -> \'f\') then reverse the substring \\"fbcde\\" -> \\"edcbf\\". 2. Replace the substring \\"cbf\\" taking the sequence one letter forward until the target string is met, resulting in \\"cdeab\\". In the second test case, simply reversing the string \\"abcd\\" gives \\"dcba\\", matching the target string. In the third test case, it\'s impossible to transform \\"xyz\\" into \\"yza\\" with the given operations. Thus, the output is \\"NO\\".","solution":"def is_transformable(initial, target): Check if the initial string can be transformed into the target string using the given operations. # Check if initial and target strings have same set of characters sorted_initial = sorted(initial) sorted_target = sorted(target) return sorted_initial == sorted_target def transformation_possible(t, test_cases): results = [] for i in range(t): n, initial, target = test_cases[i] if is_transformable(initial, target): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of N integers, each of which may be positive, negative, or zero. Each number represents a distinct type of flower and its value represents the attractiveness of the flower. Your task is to arrange these flowers in a sequence such that the absolute difference in attractiveness between any two adjacent flowers in the sequence is minimized to the maximum extent possible. If there are multiple valid arrangements, you can output any one of them. ------ Input ------ Input consists of 1 line. The line contains a single integer N followed by N space-separated integers indicating the attractiveness of the flowers. ------ Output ------ Output on a single line a valid sequence of N integers representing the arrangement of flowers such that the absolute difference between the attractiveness of any two adjacent flowers is minimized. ------ Constraints ------ 1 ≤ N ≤ 1000 -1000 ≤ attractiveness of each flower ≤ 1000 It is guaranteed that the attractiveness values are distinct. ----- Sample Input 1 ------ 5 -2 4 1 0 -5 ----- Sample Output 1 ------ -5 -2 0 1 4 ----- Explanation 1 ------ One possible valid arrangement is -5 -> -2 -> 0 -> 1 -> 4. The absolute difference between any two adjacent flowers in this sequence is minimized. This is because the differences are (3, 2, 1, and 3) respectively. ----- Sample Input 2 ------ 3 10 5 -1 ----- Sample Output 2 ------ -1 5 10 ----- Explanation 2 ------ One possible valid arrangement is -1 -> 5 -> 10. The absolute differences between any two adjacent flowers in this sequence are minimized (6 and 5, respectively).","solution":"def arrange_flowers(n, arr): Arrange the flowers such that the absolute difference in attractiveness between any two adjacent flowers is minimized. Parameters: n (int): Number of flowers. arr (list of int): The attractiveness of each flower. Returns: list of int: A valid sequence of flower attractiveness values. # Sort the array to minimize the absolute differences between adjacent elements arr.sort() return arr"},{"question":"John is organizing a sports tournament with n teams. Due to the limitations of the venue, the teams must be divided into groups of 4 for the initial group stage. It is guaranteed that n is a multiple of 4. Each group should have exactly 4 teams. John wants to create the groups but also needs to ensure that certain teams don\'t end up in the same group due to previous unresolved rivalries. You are given a list of m rivalries, each rivalry specified as a pair of team indices (a, b), indicating that team a and team b should not be placed in the same group. Determine if it is possible to divide the n teams into groups of 4 such that no rival teams are in the same group. If it is possible, print \\"Possible\\". Otherwise, print \\"Impossible\\". Input The first line contains two integers n (4 ≤ n ≤ 100) and m (0 ≤ m ≤ 100) — the number of teams and the number of rivalries, respectively. It is guaranteed that n is a multiple of 4. The next m lines each contain two integers a and b (1 ≤ a, b ≤ n; a ≠ b) — the indices of rival teams. Output Print a single string \\"Possible\\" if it is possible to divide the teams into groups of 4 without any rivals in the same group; otherwise, print \\"Impossible\\". Examples Input 8 3 1 2 3 4 5 6 Output Possible Input 4 3 1 2 1 3 1 4 Output Impossible Note In the first example, one possible grouping could be (1, 3, 5, 7) and (2, 4, 6, 8), ensuring that no rival teams are in the same group. In the second example, it is impossible to group 4 teams without putting team 1 with any of its rivals (2, 3, or 4).","solution":"def is_possible_division(n, m, rivalries): from collections import defaultdict from itertools import combinations # Creating adjacency list for rivalries rivalries_dict = defaultdict(list) for a, b in rivalries: rivalries_dict[a].append(b) rivalries_dict[b].append(a) # We need to check all combinations of teams grouped by 4. teams = list(range(1, n+1)) all_possible_groups = list(combinations(teams, 4)) for group in all_possible_groups: group_set = set(group) group_valid = True for a, b in rivalries: if a in group_set and b in group_set: group_valid = False break if group_valid: remaining_teams = set(teams) - group_set remaining_teams_groups = list(combinations(remaining_teams, 4)) for rem_group in remaining_teams_groups: rem_group_set = set(rem_group) rem_group_valid = True for a, b in rivalries: if a in rem_group_set and b in rem_group_set: rem_group_valid = False break if rem_group_valid: return \\"Possible\\" return \\"Impossible\\" # Example usage #input_data = (8, 3, [(1, 2), (3, 4), (5, 6)]) #print(is_possible_division(*input_data))"},{"question":"You are given an array of integers. Your task is to determine the minimum number of operations required to make all elements of the array equal, where the allowed operation is to add or subtract 1 from any element of the array. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The second line of each test case will contain a single integer N, denoting the size of the array. - The third line of each test case will contain N space-separated integers, representing the elements of the array. ------ Output Format ------ For each test case, output on a new line the minimum number of operations required to make all elements of the array equal. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ text{Array elements} ≤ 10^9 ------ Sample Input 1 ------ 2 4 1 2 3 4 3 5 5 5 ------ Sample Output 1 ------ 4 0 ------ Explanation 1 ------ Test case 1: One way to make all elements equal is as follows: - Add 1 to the first element: array becomes [2, 2, 3, 4] - Add 1 to the first element and subtract 1 from the last element: array becomes [3, 2, 3, 3] - Add 1 to the second element: array becomes [3, 3, 3, 3] Thus, total operations needed are 4. Test case 2: All elements are already equal, so no operations are needed.","solution":"def min_operations_to_equal_elements(T, test_cases): Given the number of test cases and a list of test cases where each test case is represented by the size of the array and the array itself, this function computes the minimum number of operations required to make all elements of the array equal where the allowed operation is to add or subtract 1 from any element of the array. results = [] for case in test_cases: N, arr = case median = sorted(arr)[N // 2] operations = sum(abs(x - median) for x in arr) results.append(operations) return results"},{"question":"Given a list of integers, find and return the longest subsequence such that all elements of the subsequence are common divisors of the maximum element in the list. For example, given the list [1, 3, 6, 24], the longest subsequence of common divisors of the maximum element (which is 24) is [1, 3, 6, 24]. The list [1, 2, 4, 5, 10] has the maximum element 10, whose longest subsequence of common divisors is [1, 2, 5, 10]. Example 1: Input: [1, 3, 6, 24] Output: [1, 3, 6, 24] Example 2: Input: [1, 2, 4, 5, 10] Output: [1, 2, 5, 10] Note: - The list of integers will have at least one element. - All input elements are positive integers. - If there are multiple longest subsequences, return any one of them.","solution":"def longest_common_divisor_subsequence(arr): if not arr: return [] max_element = max(arr) divisors = [] for num in arr: if max_element % num == 0: divisors.append(num) return divisors"},{"question":"You are given a list of student grades for a particular course. Each grade is a letter grade from \'A\' to \'F\'. You need to calculate the average grade point for the class based on the given letter grades. The grade points are assigned as follows: \'A\' = 4, \'B\' = 3, \'C\' = 2, \'D\' = 1, and \'F\' = 0. Input The first line of input contains an integer n, the number of grades. The second line contains n space-separated characters, each representing a grade. Output Output a single number representing the average grade point, rounded to two decimal places. Constraints 1 ≤ n ≤ 100 Each grade will be one of \'A\', \'B\', \'C\', \'D\', \'F\' Example Input: 5 A B A C B Output: 2.80 Explanation The grade points for the given grades are: 4, 3, 4, 2, 3. The total grade points are: 4 + 3 + 4 + 2 + 3 = 16. The average grade point is 16 / 5 = 3.20.","solution":"def average_grade_point(n, grades): Returns the average grade point based on the given letter grades, rounded to two decimal places. n: int - number of grades grades: List[str] - list of letter grades grade_points = {\'A\': 4, \'B\': 3, \'C\': 2, \'D\': 1, \'F\': 0} total_points = sum(grade_points[grade] for grade in grades) average = total_points / n return round(average, 2) # Example usage: n = 5 grades = [\'A\', \'B\', \'A\', \'C\', \'B\'] print(average_grade_point(n, grades)) # Output: 3.20"},{"question":"In a bustling metropolis plagued with traffic congestion, the city council has installed a new traffic monitoring system equipped with sensors at key intersections. The goal is to optimize traffic flow by identifying the busiest paths and implementing measures to alleviate bottlenecks. You are tasked with analyzing the traffic data collected over a series of days. Each data entry records the number of vehicles passing through a specific intersection during a given time interval. To facilitate this analysis, you need to write a program that processes the traffic data and identifies the intersection with the highest total vehicle count over the recorded intervals. Input The first line contains an integer T (1 ≤ T ≤ 1000), representing the number of test cases. Each test case consists of multiple lines: - The first line of each test case contains an integer N (1 ≤ N ≤ 100), representing the number of intersections being monitored. - The next N lines each contain a string I (1 ≤ |I| ≤ 10) and an integer K (1 ≤ K ≤ 1000), representing the intersection identifier and the total vehicle count at that intersection, respectively. Output For each test case, output a single line containing the identifier of the intersection with the highest total vehicle count. If there are multiple intersections with the same highest count, output the lexicographically smallest identifier among them. Example Input 2 3 A1 1500 B2 2000 C3 1500 4 X1 1000 Y2 3000 Z3 3000 W4 2500 Output B2 Y2 Note In the first test case, intersection B2 has the highest vehicle count of 2000. In the second test case, intersections Y2 and Z3 both have the highest vehicle count of 3000. However, Y2 is lexicographically smaller than Z3, so Y2 is the output.","solution":"def find_busiest_intersections(T, test_cases): results = [] for t in range(T): N, intersections = test_cases[t] max_count = -1 busiest = \\"\\" for intersection, count in intersections: if count > max_count or (count == max_count and intersection < busiest): max_count = count busiest = intersection results.append(busiest) return results"},{"question":"You are given an integer array of size n. Your task is to process m queries and apply each query to the array. Each query is one of the following types: \\"1 a b\\" — swap the elements at index a and index b (0-based index). \\"2 a b\\" — reverse the segment of the array from index a to index b (inclusive). \\"3 a b\\" — calculate the sum of the elements from index a to index b (inclusive). It\'s guaranteed that indices provided in the queries are valid. -----Input----- The first line contains two integers n and m (1 le n, m le 10^5) — the size of the array and the number of queries. The second line contains n integers — the elements of the array. The next m lines contain queries — one per line. Each query is one of three types: \\"1 a b\\" (0 le a, b < n; a neq b); \\"2 a b\\" (0 le a le b < n); \\"3 a b\\" (0 le a le b < n). -----Output----- For each query of the third type, print the sum of the elements from index a to index b (inclusive). -----Examples----- Input 5 6 1 2 3 4 5 1 0 4 3 0 4 2 1 3 3 0 4 1 2 3 3 1 3 Output 6 9 6 -----Note----- In the first query of the third type, after the initial swap of the first and last elements, the array becomes [5, 2, 3, 4, 1]. The sum of the array is 5+2+3+4+1=15. In the second query of the third type, after reversing the segment from index 1 to index 3, the array becomes [5, 4, 3, 2, 1]. The sum of the array is 5+4+3+2+1=15. In the third query of the third type, after swapping elements at indices 2 and 3, the array becomes [5, 4, 2, 3, 1]. The sum of elements from index 1 to 3 is 4+2+3=9.","solution":"def process_queries(n, m, arr, queries): results = [] for query in queries: q = query.split() if q[0] == \\"1\\": a, b = int(q[1]), int(q[2]) arr[a], arr[b] = arr[b], arr[a] elif q[0] == \\"2\\": a, b = int(q[1]), int(q[2]) arr[a:b + 1] = arr[a:b + 1][::-1] elif q[0] == \\"3\\": a, b = int(q[1]), int(q[2]) results.append(sum(arr[a:b + 1])) return results"},{"question":"Consider an infinite 2D grid. You are initially positioned at the coordinate (0,0). You can move in four possible directions: - \\"U\\" for moving up: (x, y) rightarrow (x, y + 1) - \\"D\\" for moving down: (x, y) rightarrow (x, y - 1) - \\"L\\" for moving left: (x, y) rightarrow (x - 1, y) - \\"R\\" for moving right: (x, y) rightarrow (x + 1, y) You are given a sequence of these movements. Determine your final position after completing all movements in the sequence. Input Format The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The following t lines each contain a string made up of the characters \'U\', \'D\', \'L\', \'R\', representing the sequence of movements in that order. Constraints 1 ≤ |sequence| ≤ 10^5 Output Format For each test case, print the final coordinates (x, y) in a new line, separated by a space. Sample Input 0 3 UUDDLRLR RRUULLDD UDLR Sample Output 0 0 0 0 0 0 0 Sample Input 1 2 UUUU DDDDD Sample Output 1 0 4 0 -5 Explanation In Sample Input 0: - The first movement sequence \\"UUDDLRLR\\" results in no net movement as every \'U\' is countered by a \'D\' and every \'L\' is countered by a \'R\', so the final position is (0, 0). - Similarly, the second sequence \\"RRUULLDD\\" results in a return to the origin, thus the final position is (0, 0). - The third sequence \\"UDLR\\" also returns to the origin without any net movement. In Sample Input 1: - The sequence \\"UUUU\\" moves the position up 4 times, resulting in a final position of (0, 4). - The sequence \\"DDDDD\\" moves the position down 5 times, resulting in a final position of (0, -5).","solution":"def final_position_after_movements(t, sequences): Returns the final positions after a series of movement sequences. :param t: Number of test cases :param sequences: List of movement sequences :return: List of tuples representing final coordinates (x, y) for each sequence final_positions = [] for sequence in sequences: x, y = 0, 0 for move in sequence: if move == \'U\': y += 1 elif move == \'D\': y -= 1 elif move == \'L\': x -= 1 elif move == \'R\': x += 1 final_positions.append((x, y)) return final_positions"},{"question":"You are given an integer array `nums` of size `n`. You can perform the following operation exactly once: select two different indices `i` and `j` (1 ≤ i, j ≤ n, i ≠ j) and swap the elements at these indices. Determine the maximum possible difference between the maximum and minimum values of the array after exactly one swap operation. **Input:** The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of two lines: - The first line contains an integer n (2 ≤ n ≤ 1000) — the number of elements in the array. - The second line contains n integers a_1, a_2, ..., a_n (-10^6 ≤ a_i ≤ 10^6) — the elements of the array. **Output:** For each test case, output the maximum possible difference between the maximum and minimum values of the array after exactly one swap operation. **Example:** **Input:** ``` 3 4 1 5 3 7 3 -5 -15 5 5 1 2 3 4 5 ``` **Output:** ``` 6 20 4 ``` **Explanation:** For the first test case, the initial array is `[1, 5, 3, 7]`. The possible differences between the maximum and minimum values after one swap are: - Swapping 1 and 5: `[5, 1, 3, 7]` → max = 7, min = 1 → difference = 6 - Swapping 1 and 3: `[3, 5, 1, 7]` → max = 7, min = 1 → difference = 6 - Swapping 1 and 7: `[7, 5, 3, 1]` → max = 7, min = 1 → difference = 6 - Swapping 5 and 3: `[1, 3, 5, 7]` → max = 7, min = 1 → difference = 6, etc. Thus, the maximum possible difference is 6. For the second test case: - `[ -5, -15, 5 ]`: - Swapping -5 and -15: `[-15, -5, 5]` → difference = 20 - Swapping -5 and 5: `[5, -15, -5]` → difference = 20 Thus, maximum possible difference is 20. For the third test case: - `[1, 2, 3, 4, 5]`: - Swapping any two elements does not change the maximum difference of 4. Thus, the maximum possible difference is 4.","solution":"def max_difference_after_swap(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] nums = test_cases[i][1] original_max = max(nums) original_min = min(nums) result = original_max - original_min for j in range(n): for k in range(j + 1, n): nums[j], nums[k] = nums[k], nums[j] swapped_max = max(nums) swapped_min = min(nums) result = max(result, swapped_max - swapped_min) nums[j], nums[k] = nums[k], nums[j] # swap back to original results.append(result) return results"},{"question":"Your robot vacuum cleaner is supposed to clean your entire house by moving from room to room according to a series of commands you give it. Each command tells the robot to move a certain number of steps in one of the four possible directions: up, down, left, or right. Your house is represented as a 2D grid where each room is a cell, and the robot starts at the origin point (0, 0), which represents the entry point of the house. However, there\'s a catch. Some rooms have barriers and cannot be entered by the robot. You need to figure out if your series of commands will allow the robot to move to the final destination without entering any rooms with barriers. -----Input----- The first line contains two integers n, m (1 leq n, m leq 1000), representing the dimensions of the 2D grid. The second line contains an integer k (0 leq k leq 10000), representing the number of commands. The next k lines contain a command each in the format of a string d (either \\"up\\", \\"down\\", \\"left\\", or \\"right\\") followed by an integer s (1 leq s leq 1000) representing the number of steps in the given direction. Following this, an integer b, representing the number of rooms with barriers, is given (0 leq b leq 100). The next b lines contain two integers x_i, y_i (0 leq x_i < n, 0 leq y_i < m), each indicating the coordinates of a room with a barrier. -----Output----- If it is possible for the robot vacuum cleaner to move through all the commands without entering any rooms with barriers, output \\"success\\". Otherwise, output \\"blocked\\". -----Examples----- Sample Input: 5 5 3 right 3 down 2 left 1 1 2 2 Sample Output: success Sample Input: 5 5 4 right 3 down 2 left 2 up 1 2 2 2 3 2 Sample Output: blocked","solution":"def robot_vacuum(n, m, k, commands, b, barriers): Determine if the robot vacuum can successfully complete the series of commands without hitting a barrier. Args: n (int): number of rows in the grid. m (int): number of columns in the grid. k (int): number of commands. commands (list of tuples): each tuple contains a command direction and steps count. b (int): number of barriers. barriers (list of tuples): each tuple contains the coordinates of a barrier. Returns: str: \\"success\\" if the robot can complete all commands without hitting a barrier, otherwise \\"blocked\\". current_position = [0, 0] # starting at the origin (0, 0) barriers_set = set(barriers) # convert list of barriers to set for O(1) lookup for command in commands: direction, steps = command for _ in range(steps): if direction == \\"up\\": current_position[0] -= 1 elif direction == \\"down\\": current_position[0] += 1 elif direction == \\"left\\": current_position[1] -= 1 elif direction == \\"right\\": current_position[1] += 1 # Check if the robot is out of bounds if not (0 <= current_position[0] < n and 0 <= current_position[1] < m): return \\"blocked\\" # Check if the robot hits a barrier if tuple(current_position) in barriers_set: return \\"blocked\\" return \\"success\\""},{"question":"You are given an array `A` of length `N` consisting of distinct integers and a target integer `X`. You have to perform operations on the array to bring the target integer to the first position. An operation consists of swapping any two adjacent elements in the array. Find the minimum number of operations required to bring the target integer `X` to the front of the array. ------ Input Format ------ - The first line of input will contain a single integer `T`, denoting the number of test cases. - Each test case consists of two lines of input. - The first line contains two integers `N` and `X` — the length of the array and the target integer, respectively. - The second line contains `N` space-separated integers representing the array `A`. ------ Output Format ------ For each test case, output on a new line the minimum number of operations required to bring the target integer `X` to the front of the array. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 1 ≤ A[i], X ≤ 10^9 - The sum of `N` over all test cases does not exceed 10^5 - All elements in the array `A` are distinct. ----- Sample Input 1 ------ 3 5 3 1 2 3 4 5 7 4 7 2 6 1 4 5 3 4 1 1 2 3 4 ----- Sample Output 1 ------ 2 3 0 ----- Explanation 1 ------ Test case 1: We need to bring `3` to the first position. Using 2 operations, we can achieve this: - Operation 1: Swap `3` with `2`, resulting in `1, 3, 2, 4, 5`. - Operation 2: Swap `3` with `1`, resulting in `3, 1, 2, 4, 5`. Test case 2: We need to bring `4` to the first position. Using 3 operations, we can achieve this: - Operation 1: Swap `4` with `1`, resulting in `7, 2, 6, 4, 1, 5, 3`. - Operation 2: Swap `4` with `6`, resulting in `7, 2, 4, 6, 1, 5, 3`. - Operation 3: Swap `4` with `2`, resulting in `7, 4, 2, 6, 1, 5, 3`. Test case 3: The target element `1` is already at the first position. Thus, no operation is required.","solution":"def min_operations_to_front(arr, x): Returns the minimum number of operations to bring x to the first position in the array. index = arr.index(x) return index def process_test_cases(T, test_cases): results = [] for i in range(T): N, X = test_cases[i][0] A = test_cases[i][1] results.append(min_operations_to_front(A, X)) return results"},{"question":"Alice is conducting a survey and has a notebook with N pages, where each page contains a list of unique survey responses represented by integers. She wants to combine all the responses into a single final list, but while combining, she needs to ensure that the combined list maintains non-decreasing order. Each page\'s responses are already in sorted order. Help Alice merge these lists into a single sorted list. ------ Input ------ The first line contains a single integer N (the number of pages). The next N lines contain the responses on each page. Each line starts with an integer L_i (the number of responses on the i-th page) followed by L_i space-separated integers sorted in non-decreasing order. ------ Output ------ The only line of output contains all responses from all the pages combined into a single sorted list. ------ Constraints ------ 1 ≤ N ≤ 10^{3} 1 ≤ L_i ≤ 10^{4} 1 ≤ response ≤ 10^{9} ------ Sample Input 1 ------ 3 3 10 20 30 4 5 7 25 29 2 1 100 ------ Sample Output 1 ------ 1 5 7 10 20 25 29 30 100 ------ Explanation 1 ------ All responses from all pages are combined and sorted: 1 5 7 10 20 25 29 30 100.","solution":"import heapq def merge_sorted_responses(pages): Merges a list of sorted lists into a single sorted list. :param pages: List of sorted lists :return: A single sorted list with all elements from all input lists min_heap = [] result = [] # Initialize the min_heap with the first element of each page for i in range(len(pages)): if pages[i]: # Ensure the page is not empty heapq.heappush(min_heap, (pages[i][0], i, 0)) # Extract elements from the heap and maintain the sorted order while min_heap: value, list_index, element_index = heapq.heappop(min_heap) result.append(value) if element_index + 1 < len(pages[list_index]): heapq.heappush(min_heap, (pages[list_index][element_index + 1], list_index, element_index + 1)) return result def merge_pages_input(N, input_data): Processes the input formatted data for the merging function. :param N: Number of pages :param input_data: List of strings, each corresponding to a page\'s responses :return: Combined sorted responses as a single list pages = [] for i in range(N): data = list(map(int, input_data[i].split())) pages.append(data[1:]) # Exclude the first number which is the count of responses return merge_sorted_responses(pages)"},{"question":"You are given an integer array `A` of length `N`. You can perform the following type of operation on the array `A`: Choose an index `i` (1 ≤ i ≤ N); Replace `A[i]` with any integer between 1 and 100 (inclusive). Find the minimum number of operations required to make the array have at least one subsequence of length K such that all elements in the subsequence are equal. ------ Input Format ------ - First line of the input contains T, the number of test cases. Then the test cases follow. - First line of each test case contains two integers N and K. - Second line of each test case contains N integers, the elements of array A. ------ Output Format ------ For each test case, print the minimum number of operations required to achieve the goal. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ K ≤ N 1 ≤ A[i] ≤ 100 ----- Sample Input 1 ------ 3 5 3 1 2 2 2 3 7 5 1 2 3 4 5 6 7 4 2 4 4 4 4 ----- Sample Output 1 ------ 0 4 0 ----- Explanation 1 ------ Test Case 1: The given array is [1, 2, 2, 2, 3]. The subsequence [2, 2, 2] is already present. So, no operation is required. The answer is 0. Test Case 2: The given array is [1, 2, 3, 4, 5, 6, 7]. We need to form a subsequence of length 5 with equal elements. Simplest way is to change 4 elements to one of the existing values. For example, changing all elements to 1 results in [1, 1, 1, 1, 1], requiring 4 operations. The answer is 4. Test Case 3: The given array is [4, 4, 4, 4]. The whole array is itself a subsequence of length 2 with equal elements. So, no operation is required. The answer is 0.","solution":"def min_operations_to_equal_subsequence(A, N, K): from collections import Counter count = Counter(A) max_frequency = max(count.values()) if max_frequency >= K: return 0 return K - max_frequency def solve(test_cases): results = [] for N, K, A in test_cases: result = min_operations_to_equal_subsequence(A, N, K) results.append(result) return results"},{"question":"Julia is the head architect of a futuristic city with skyscrapers connected by sky bridges. The city has n skyscrapers, and certain pairs of skyscrapers are directly connected by a sky bridge. Julia wants to install additional sky bridges based on some rules to minimize the maximum travel distance between any two skyscrapers in the city. The goal is to ensure that the maximum distance between any two skyscrapers is minimized. To achieve this, additional sky bridges can be installed between certain pairs of skyscrapers. Specifically, Julia can install a sky bridge between any two skyscrapers u and v if and only if there exists a third skyscraper w such that: - There is a sky bridge directly connecting u and w. - There is a sky bridge directly connecting w and v. You are given the initial map of the city and tasked with determining the minimum possible maximum distance between any two skyscrapers after adding the optimal set of new sky bridges. -----Input----- The first line of the input contains a single integer n (2 leq n leq 200,000) — the number of skyscrapers in the city. Each of the following n - 1 lines contains two integers u_i and v_i (1 leq u_i, v_i leq n, u_i ne v_i), meaning that the skyscrapers with these indices are connected by a direct sky bridge. It is guaranteed that the given n skyscrapers and n - 1 sky bridges form a tree. -----Output----- Print one integer — the minimum possible maximum distance between any two skyscrapers after adding the optimal set of new sky bridges. -----Examples----- Input 5 1 2 1 3 3 4 3 5 Output 2 Input 6 1 2 2 3 2 4 4 5 4 6 Output 3 -----Note----- In the first sample, by adding sky bridges between skyscrapers 2 and 3, 4 and 5, the city can reduce the maximum distance between any two skyscrapers to 2. In the second sample, the initial maximum distance is already 3, and adding appropriate sky bridges can ensure that this distance is minimized to 3.","solution":"from collections import deque def tree_diameter(tree, n): def bfs(start): dist = [-1] * n queue = deque([start]) dist[start] = 0 max_dist_node = start max_dist = 0 while queue: node = queue.popleft() for neighbor in tree[node]: if dist[neighbor] == -1: dist[neighbor] = dist[node] + 1 queue.append(neighbor) if dist[neighbor] > max_dist: max_dist = dist[neighbor] max_dist_node = neighbor return max_dist_node, max_dist node_1, _ = bfs(0) node_2, diameter = bfs(node_1) return diameter def min_max_distance(n, bridges): tree = [[] for _ in range(n)] for u, v in bridges: tree[u-1].append(v-1) tree[v-1].append(u-1) diameter = tree_diameter(tree, n) return (diameter + 1) // 2 def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) bridges = [(int(data[i]), int(data[i+1])) for i in range(1, len(data) - 1, 2)] result = min_max_distance(n, bridges) print(result) # To execute the process_input method, uncomment the following line # process_input()"},{"question":"Amara is organizing a music festival and needs to set up stages in such a way that the audience always hear music from exactly one stage at any given point. She has a list of start and end times for each band\'s performance. Each stage can only host one band at a time. Help Amara by determining the minimum number of stages required so that there is no overlap in performances on the same stage. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N. - Each of the next N lines contains two integers start and end indicating the start and end times of a band\'s performance. -----Output:----- For each test case, print a single line containing one integer which represents the minimum number of stages required. -----Constraints----- - 1 le T le 10 - 1 le N le 10^5 - 0 le start < end le 10^9 -----Sample Input:----- 2 3 1 4 2 5 9 12 4 5 8 4 6 3 7 1 5 -----Sample Output:----- 2 3","solution":"from heapq import heappush, heappop def min_stages_required(test_cases): results = [] for performances in test_cases: performances.sort(key=lambda x: x[0]) min_heap = [] for start, end in performances: if min_heap and min_heap[0] <= start: heappop(min_heap) heappush(min_heap, end) results.append(len(min_heap)) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) performances = [] for i in range(1, N + 1): start, end = map(int, lines[index + i].split()) performances.append((start, end)) test_cases.append(performances) index += N + 1 return test_cases"},{"question":"A company is organizing a system for recording and processing employee work logs. Each employee can log their work hours for different projects they are involved in. The goal is to find out the total hours worked by each employee across all projects. Write a function to compute and list the total hours worked by each employee. # Input The function `total_work_hours` will receive a list of dictionaries where each dictionary represents an employee\'s work log entry. Each dictionary contains: - `employee`: Name of the employee (a string) - `hours`: Number of hours worked (a float) - `project`: Name of the project (a string) # Output The function should return a list of dictionaries, each containing: - `employee`: The name of the employee - `total_hours`: The total number of hours worked by the employee across all projects # Examples ```python total_work_hours([ {\'employee\': \'Alice\', \'hours\': 5.5, \'project\': \'Project1\'}, {\'employee\': \'Bob\', \'hours\': 3.0, \'project\': \'Project2\'}, {\'employee\': \'Alice\', \'hours\': 2.5, \'project\': \'Project2\'}, {\'employee\': \'Bob\', \'hours\': 4.0, \'project\': \'Project1\'} ]) # Returns: # [{\'employee\': \'Alice\', \'total_hours\': 8.0}, # {\'employee\': \'Bob\', \'total_hours\': 7.0}] total_work_hours([ {\'employee\': \'Alice\', \'hours\': 5.0, \'project\': \'Project1\'}, {\'employee\': \'Bob\', \'hours\': 3.5, \'project\': \'Project2\'} ]) # Returns: # [{\'employee\': \'Alice\', \'total_hours\': 5.0}, # {\'employee\': \'Bob\', \'total_hours\': 3.5}] total_work_hours([ {\'employee\': \'Alice\', \'hours\': 2.5, \'project\': \'Project1\'}, {\'employee\': \'Alice\', \'hours\': 2.5, \'project\': \'Project1\'}, {\'employee\': \'Alice\', \'hours\': 4.0, \'project\': \'Project2\'} ]) # Returns: # [{\'employee\': \'Alice\', \'total_hours\': 9.0}] ```","solution":"def total_work_hours(work_logs): Calculate the total hours worked by each employee across all projects. :param work_logs: List of dictionaries with keys \'employee\', \'hours\', and \'project\'. :return: List of dictionaries with keys \'employee\' and \'total_hours\'. from collections import defaultdict employee_hours = defaultdict(float) for log in work_logs: employee = log[\'employee\'] hours = log[\'hours\'] employee_hours[employee] += hours return [{\'employee\': employee, \'total_hours\': hours} for employee, hours in employee_hours.items()]"},{"question":"Given an array of integers nums and an integer k, your task is to determine whether it is possible to rearrange the array such that the difference between the maximum and minimum element in any subarray of length k is less than or equal to a given threshold t. If it is possible, return true. Otherwise, return false. Example 1: Input: nums = [1, 3, 6, 10, 15, 21], k = 3, t = 5 Output: True Explanation: Possible rearrangement: [1, 3, 6, 10, 15, 21] -> Subarrays of length 3 are [1, 3, 6], [3, 6, 10], [6, 10, 15], [10, 15, 21] and their respective max-min differences are 5, 7, 9, 11. No valid rearrangement meets the condition in the original order. Example 2: Input: nums = [4, 2, 6, 10, 8], k = 2, t = 3 Output: True Explanation: One possible rearrangement is [4, 2, 6, 8, 10]. Subarrays of length 2 are [4, 2], [2, 6], [6, 8], [8, 10] and their respective max-min differences are 2, 4, 2, 2, which meets the condition. Example 3: Input: nums = [10, 1, 12, 8, 5, 14], k = 4, t = 6 Output: False Explanation: Regardless of rearrangement, there does not exist any rearrangement of the array where the difference between the maximum and minimum values in any subarray of length 4 is less than or equal to 6. Your Task: You do not need to read input or print anything. Implement the function canArrange(nums: List[int], k: int, t: int) -> bool which takes in the array of integers nums, the integer k and the threshold t, and returns a boolean indicating whether it is possible to rearrange the array according to the given condition. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1. 2 <= nums.length <= 10^3 2. -10^3 <= nums[i] <= 10^3 3. 2 <= k <= nums.length 4. 0 <= t <= 2 * 10^3","solution":"from typing import List def canArrange(nums: List[int], k: int, t: int) -> bool: nums.sort() for i in range(len(nums) - k + 1): if nums[i + k - 1] - nums[i] > t: return False return True"},{"question":"You are given an array of integers where each element represents the cost of a particular item in a store (in dollars). Your task is to determine the minimum cost required to purchase at least K different items from the store. If it is not possible to purchase K different items, output -1. ------ Input Format ------ - The first line contains two integers N and K - the number of items in the store and the number of different items to be purchased. - The second line contains N integers where each integer represents the cost of an item. ------ Output Format ------ - Output a single integer, the minimum cost required to purchase at least K different items. If it\'s not possible to purchase K different items, output -1. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ K ≤ 1000 1 ≤ cost_i ≤ 10^6 ------ Sample Input 1 ------ 5 3 100 200 50 10 70 ------ Sample Output 1 ------ 180 ------ Explanation 1 ------ To buy at least 3 different items, you have several options: - Buy items with costs 10, 50, and 100. The total cost is 10 + 50 + 100 = 160. - Buy items with costs 10, 50, and 200. The total cost is 10 + 50 + 200 = 260. - Buy items with costs 10, 70, and 100. The total cost is 10 + 70 + 100 = 180. - Other combinations result in higher costs or fewer than 3 items. The minimum among these options is 160. ------ Sample Input 2 ------ 6 4 500 150 200 300 100 250 ------ Sample Output 2 ------ 700 ------ Explanation 2 ------ To buy at least 4 different items, you can: - Buy items with costs 100, 150, 200, and 250. The total cost is 100 + 150 + 200 + 250 = 700. This is the only option with the minimum cost when buying 4 different items. ------ Sample Input 3 ------ 3 4 150 200 100 ------ Sample Output 3 ------ -1 ------ Explanation 3 ------ It is not possible to buy 4 different items since there are only 3 available items in the store. Hence, the output is -1.","solution":"def minimum_cost_to_purchase_k_items(n, k, costs): Returns the minimum cost required to purchase at least k different items. if k > n: return -1 costs.sort() return sum(costs[:k])"},{"question":"Samantha is planning a party and wants to ensure that each guest has a unique seat assignment. She has a list of n preferences from her guests, where each preference indicates the guest\'s preferred seats in order of most to least preferable. Each guest can choose from m seats, represented as integers from 1 to m. A guest can only be assigned a seat that they prefer, and once a seat is assigned to a guest, it cannot be assigned to another. The goal is to assign each guest a seat in such a way as to satisfy the most preferred seat as closely as possible for every guest. You need to find an assignment of seats to guests that minimizes the sum of the preference indices of the seats assigned (the index in the preference list where the seat appears). -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of guests and seats. Each of the next n lines contains m integers, where the j-th integer in the i-th line indicates the preference score of seat j for guest i (1-indexed). A lower score indicates a higher preference. -----Output----- Print the minimum sum of the preference indices that can be achieved for the seat assignment. -----Examples----- Input 3 3 1 2 3 3 1 2 2 3 1 Output 3 Input 2 2 2 1 1 2 Output 2 -----Note----- In the first example, the guests have the following preferences: - Guest 1 prefers seat 1 most, then seat 2, then seat 3. - Guest 2 prefers seat 2 most, then seat 3, then seat 1. - Guest 3 prefers seat 3 most, then seat 1, then seat 2. An optimal assignment would be: - Guest 1 gets seat 1 (preference index 1). - Guest 2 gets seat 2 (preference index 1). - Guest 3 gets seat 3 (preference index 1). This results in a preference sum of 1+1+1 = 3. In the second example, the guests have the following preferences: - Guest 1 prefers seat 2 most, then seat 1. - Guest 2 prefers seat 1 most, then seat 2. An optimal assignment would be: - Guest 1 gets seat 2 (preference index 1). - Guest 2 gets seat 1 (preference index 1). This results in a preference sum of 1+1 = 2.","solution":"import heapq def assign_seats(n, m, preferences): Assign seats to guests such that the sum of the preference indices is minimized. :param n: Number of guests :param m: Number of seats :param preferences: List of lists where preferences[i][j] is the preference score of seat j for guest i :return: Minimum sum of the preference indices seats_taken = [False] * m # Track which seats have been taken guest_preferences = [] # List of (preference score, guest index, seat index) for guest in range(n): for seat in range(m): # Append a tuple of (preference score, guest index, seat index) guest_preferences.append((preferences[guest][seat], guest, seat)) # Sort the list of guest preferences by preference score (lower score comes first) guest_preferences.sort() # Initialize the array to store the seat assigned to each guest (initially None) guest_to_seat = [None] * n seat_count = 0 preference_sum = 0 for score, guest, seat in guest_preferences: # Since seats are limited, we need to ensure each seat is assigned at most once if guest_to_seat[guest] is None and not seats_taken[seat]: guest_to_seat[guest] = seat seats_taken[seat] = True seat_count += 1 preference_sum += score if seat_count == n: break return preference_sum"},{"question":"A company has an email server, and they want to ensure that all email addresses in their system follow a new strict pattern policy. The rules for a valid email address are as follows: - The email address must consist of a local part followed by an \\"@\\" symbol followed by a domain part. - The local part can only contain alphanumeric characters and special characters \'.\', \'_\', and \'-\'. - The local part must start and end with an alphanumeric character. - The domain part must contain only alphanumeric characters and the special character \'.\'. - The domain part must have at least one \'.\' and at least one alphanumeric character before and after each \'.\'. Your task is to write a function to validate a list of email addresses based on the above criteria. The function should return a list of valid email addresses. Input Format The first line contains an integer T denoting the number of test cases. T test cases follow. Each test case consists of two lines: - The first line contains an integer N, the number of email addresses. - The second line contains N email addresses separated by spaces. Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10000 - Each email address has a maximum length of 100 characters. Output Format For each test case, output a single line containing the valid email addresses separated by spaces. If there are no valid email addresses, output \\"No valid email addresses\\". Sample Input 2 4 user_1@example.com user.2@domain.com user--3@sub.domain.com user@domain..com 3 test-email@domain.co.in test.email@domain.com invalid@domain@com Sample Output user_1@example.com user.2@domain.com user--3@sub.domain.com test-email@domain.co.in test.email@domain.com Explanation In the first test case: - \'user@domain..com\' is invalid because it has consecutive dots in the domain part. In the second test case: - \'invalid@domain@com\' is invalid because the domain part contains \'@\'.","solution":"import re def validate_email_addresses(T, test_cases): results = [] email_pattern = re.compile( r\'^[a-zA-Z0-9]([a-zA-Z0-9._-]*[a-zA-Z0-9])?@[a-zA-Z0-9]+(.[a-zA-Z0-9]+)+\' ) for i in range(T): N, emails = test_cases[i] valid_emails = [ email for email in emails if email_pattern.match(email) ] if valid_emails: results.append(\\" \\".join(valid_emails)) else: results.append(\\"No valid email addresses\\") return results # Example usage T = 2 test_cases = [ (4, [\'user_1@example.com\', \'user.2@domain.com\', \'user--3@sub.domain.com\', \'user@domain..com\']), (3, [\'test-email@domain.co.in\', \'test.email@domain.com\', \'invalid@domain@com\']) ] print(validate_email_addresses(T, test_cases))"},{"question":"Ashley\'s bakery sells a variety of delicious pastries. Every day she consults a list of her pastries and their prices to determine the daily special, which is the pastry that is sold at a discount. She has observed that after a night of restocking, the prices sometimes fluctuate wildly. To systematically evaluate her options, you are tasked to help develop a utility to find out the highest priced pastry within a given range of pastries (inclusive) for a given day. To avoid recalculating the highest price sequentially for every query, she needs an efficient way to handle multiple queries about the highest priced pastry over different subranges of her list for the day. # Input: 1. The first line contains an integer `n` (1 ≤ n ≤ 200,000) — the number of different types of pastries for the day. 2. The second line contains `n` integers `p1, p2, ..., pn` (0 ≤ pi ≤ 1,000,000) — the prices of the pastries listed in ascending order of their index. 3. The third line contains an integer `q` (1 ≤ q ≤ 200,000) — the number of queries. 4. Each of the following `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) — the inclusive range of indices for which the highest priced pastry is to be found. # Output: Print `q` lines. Each line should contain a single integer — the price of the most expensive pastry within the given range for that query. # Example: Input: ``` 6 3 1 4 1 5 9 3 1 3 2 5 4 6 ``` Output: ``` 4 5 9 ``` In this example, for the first query (1, 3), pastry prices in the range are [3, 1, 4], and the highest price is 4. For the second query (2, 5), pastry prices in the range are [1, 4, 1, 5], and the highest price is 5. For the third query (4, 6), pastry prices in the range are [1, 5, 9], and the highest price is 9.","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.tree = [0] * (2 * self.n) self._build(data) def _build(self, data): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = data[i] # Build the tree by calculating parents for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def query(self, l, r): l += self.n # shift index to leaf r += self.n # shift index to leaf result = 0 while l < r: if l % 2: result = max(result, self.tree[l]) l += 1 if r % 2: r -= 1 result = max(result, self.tree[r]) l //= 2 r //= 2 return result def find_highest_priced_pastries(n, prices, queries): segment_tree = SegmentTree(prices) results = [] for l, r in queries: # Shift l and r to zero-based index l -= 1 results.append(segment_tree.query(l, r)) return results"},{"question":"Consider a company that has implemented a messaging system to notify employees of important events. Each message needs to be delivered only once per employee. Additionally, messages can only be delivered when the system is online, and each message takes a certain amount of time to be delivered. Given a list of messages with their respective delivery times and a schedule that represents when the system is online, determine the maximum number of messages that can be successfully delivered. Each message i has a delivery time t_i, which is the time required to deliver that message. The system\'s schedule is represented by a list with binary values where a 1 means the system is online and a 0 means it is offline at that time. Write a program to find the maximum number of messages that can be delivered within the given schedule. -----Constraints----- - All input values are integers. - 1 ≤ n ≤ 1000 (The number of messages) - 1 ≤ t_i ≤ 1000 (Delivery time of each message) - 1 ≤ m ≤ 10000 (The length of the schedule) -----Input----- The input is given from Standard Input in the following format: n m t_1 t_2 ... t_n s_1 s_2 ... s_m - The first line contains two integers n and m. - The second line contains n integers t_1, t_2, ..., t_n - the delivery times of the messages. - The third line contains m integers s_1, s_2, ..., s_m - the schedule of the system. -----Output----- Print the maximum number of messages that can be delivered. -----Sample Input----- 3 10 4 2 5 1 1 0 0 1 1 1 0 0 1 -----Sample Output----- 2 Explanation: In this example, we have three messages with delivery times of 4, 2, and 5. The system\'s schedule indicates that it is online at the following times: 1, 2, 5, 6, 7, and 10. - If we deliver the first message, it will occupy the slots 1, 2, 5, and 6. - If we deliver the second message, it will occupy the slots 1 and 2. - If we deliver the third message, it will occupy the slots 1 through 5. The maximum number of messages that can be delivered is 2, since we can deliver the first and second messages in the online slots.","solution":"def max_delivered_messages(n, m, delivery_times, schedule): delivery_times.sort() online_slots = [idx for idx, status in enumerate(schedule) if status == 1] if len(online_slots) == 0: return 0 delivered_count = 0 pt = 0 for t in delivery_times: if pt + t <= len(online_slots): delivered_count += 1 pt += t # move the pointer to the next available online slot else: break return delivered_count"},{"question":"You are given a list of integers representing the heights of students standing in a single line. Each student wants to see who is the tallest student standing to their right, but there is one catch: the students are very competitive, and each student only considers those students as \\"taller\\" if their height is strictly greater than their own height. Your task is to determine for each student, the next taller student\'s height standing to their right. If there is no taller student to the right, record -1. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of students. The second line contains n integers h1, h2, ..., hn (1 ≤ hi ≤ 10^9) — the heights of the students. Output Output a single line containing n integers where the i-th integer represents the height of the next taller student to the right of the i-th student. If there is no such student, output -1 for that position. Examples Input 5 10 4 6 3 8 Output -1 6 8 8 -1 Input 4 5 3 8 2 Output 8 8 -1 -1 Input 6 1 3 2 4 2 5 Output 3 4 4 5 5 -1 Note In the first sample: - For the first student (height 10), there is no taller student to their right. - For the second student (height 4), the next taller student to their right is the third student (height 6). - For the third student (height 6), the next taller student to their right is the fifth student (height 8). - For the fourth student (height 3), the next taller student to their right is the fifth student (height 8). - For the fifth student (height 8), there is no taller student to their right. In the second sample: - For the first student (height 5), the next taller student to their right is the third student (height 8). - For the second student (height 3), the next taller student to their right is the third student (height 8). - For the third student (height 8), there is no taller student to their right. - For the fourth student (height 2), there is no taller student to their right.","solution":"def next_taller_student(heights): Given a list of student heights, return a list where each position contains the next taller student\'s height to the right. If there is no taller student, the position should contain -1. n = len(heights) result = [-1] * n stack = [] for i in range(n-1, -1, -1): while stack and stack[-1] <= heights[i]: stack.pop() if stack: result[i] = stack[-1] stack.append(heights[i]) return result"},{"question":"You are given an array of integers ( boldsymbol{arr} ) of size ( boldsymbol{n} ) where ( n ) is always an even number. You need to split this array into two non-empty contiguous subarrays such that the absolute difference between the sum of the first subarray and the sum of the second subarray is minimized. Return the minimum absolute difference you can achieve. Example: Given the array ( boldsymbol{arr} ): [ text{arr} = [1, 3, 2, 7, 9, 5] ] You can split this array into the subarrays ( [1, 3, 2] ) and ( [7, 9, 5] ). The sum of the first subarray is ( 1 + 3 + 2 = 6 ), and the sum of the second subarray is ( 7 + 9 + 5 = 21 ). The absolute difference is ( |6 - 21| = 15 ). But a better split would be between ( [1, 3, 2, 7] ) and ( [9, 5] ), where the sums of these subarrays are ( 13 ) and ( 14 ), respectively. The absolute difference is ( |13 - 14| = 1 ). Function description Complete the function `minAbsDifference` in the editor below. `minAbsDifference` has the following parameter(s): - int arr[n]: the given array of integers Returns: - int: the minimum absolute difference Input Format: The first line contains an integer ( n ) denoting the number of elements in the array. The second line contains ( n ) space-separated integers ( arr[i] ) where ( 1 leq arr[i] leq 10^4 ). Constraints: - ( 2 leq n leq 1000 ) - ( n ) is an even number - ( 1 leq arr[i] leq 10^4 ) Sample Input 6 1 3 2 7 9 5 Sample Output 1 Explanation: As explained in the example, the split resulting in the minimum absolute difference is between ( [1, 3, 2, 7] ) and ( [9, 5] ), giving a minimum absolute difference of 1.","solution":"def minAbsDifference(arr): Returns the minimum absolute difference between the sum of two non-empty contiguous subarrays n = len(arr) total_sum = sum(arr) min_diff = float(\'inf\') current_sum = 0 for i in range(n-1): # we do n-1 to ensure both subarrays are non-empty current_sum += arr[i] remaining_sum = total_sum - current_sum min_diff = min(min_diff, abs(current_sum - remaining_sum)) return min_diff"},{"question":"Bob is exploring a mysterious 2D island, with an initial location at (x_0, y_0). On this island, Bob can collect treasures located at certain points (a_i, b_i) (for i = 1 to n). However, to reach these treasures, Bob needs to use a sequence of limited movements. The permissible movements are: 1. Translation, denoted as T_{dx, dy}. This movement translates Bob from (x, y) to (x + dx, y + dy). 2. Vertical Scaling, denoted as VS_{sy} (where sy is a nonzero rational number). If Bob is at (x, y), this movement takes him to (x, y cdot sy). 3. Horizontal Scaling, denoted as HS_{sx} (where sx is a nonzero rational number). If Bob is at (x, y), this movement takes him to (x cdot sx, y). 4. Flip over X-axis, denoted as FX. If Bob is at (x, y), this movement takes him to (x, -y). 5. Flip over Y-axis, denoted as FY. If Bob is at (x, y), this movement takes him to (-x, y). A sequence of movements is given, and Bob can perform them a total of M times to collect the treasures. Your task is to compute which treasures Bob can successfully collect after all the movements. If Bob can reach a treasure (a_i, b_i), output \\"TREASURE FOUND\\" for that treasure. Otherwise, output \\"TREASURE LOST\\" for it. # Input Format The first input contains a single integer, P, the number of test cases. The next lines contain the descriptions of the P test cases. The first line of each test case contains four values n, M, x_0, and y_0. n is the number of treasures, M is the number of times the sequence of movements is performed, and (x_0, y_0) is Bob\'s initial location. All values are integers. The next n lines each contain two integers, a_i and b_i (the coordinates of the ith treasure). The following line contains a single integer, L, the number of movements in the sequence. The next L lines each contain the description of a movement, which is one of the following: - T dx dy, which denotes translation (where dx and dy are integers), - VS sy, which denotes vertical scaling (where sy is a nonzero integer), - HS sx, which denotes horizontal scaling (where sx is a nonzero integer), - FX, which denotes flip over X-axis, and - FY, which denotes flip over Y-axis. # Output Format For each treasure location (a_i, b_i), output \\"TREASURE FOUND\\" if Bob can reach it after M repetitions of the movement sequence; otherwise, output \\"TREASURE LOST\\". # Constraints 1 leq P leq 10 1 leq n leq 10^{3} 1 leq M leq 10^9 All positions and movements are within the range of -10^9 to 10^9 (inclusive). # Sample Input 1 2 1 0 0 2 3 -4 5 3 T 1 -1 VS 2 HS -1 # Sample Output TREASURE LOST TREASURE LOST # Explanation In the sample test case, Bob starts at (0,0) and performs the sequence of 3 movements once: 1. T 1 -1: (0,0) to (1,-1) 2. VS 2: (1,-1) to (1,-2) 3. HS -1: (1,-2) to (-1,-2) The final position of Bob is (-1, -2). Since this final position does not match any of the treasure locations, both treasures are marked as \\"TREASURE LOST\\".","solution":"def apply_movement_seq(position, movement_seq): x, y = position for move in movement_seq: if move[0] == \'T\': x += move[1] y += move[2] elif move[0] == \'VS\': y *= move[1] elif move[0] == \'HS\': x *= move[1] elif move[0] == \'FX\': y = -y elif move[0] == \'FY\': x = -x return (x, y) def island_treasures(P, test_cases): results = [] for case in test_cases: n, M, x0, y0 = case[\'initial_conditions\'] treasures = case[\'treasures\'] movement_seq = case[\'movement_seq\'] final_position = (x0, y0) for _ in range(M): final_position = apply_movement_seq(final_position, movement_seq) for tx, ty in treasures: if final_position == (tx, ty): results.append(\\"TREASURE FOUND\\") else: results.append(\\"TREASURE LOST\\") return results"},{"question":"Given a number n, return the largest prime number that is also a Fibonacci number such that it is less than or equal to n. If no such number exists, return -1. Example 1: Input: n = 10 Output: 5 Explanation: The Fibonacci numbers less than or equal to 10 are 0, 1, 1, 2, 3, 5, 8. Among them, the prime numbers are 2, 3, and 5. The largest prime Fibonacci number less than or equal to 10 is 5. Example 2: Input: n = 4 Output: 3 Explanation: The Fibonacci numbers less than or equal to 4 are 0, 1, 1, 2, 3. Among them, the prime numbers are 2 and 3. The largest prime Fibonacci number less than or equal to 4 is 3. Example 3: Input: n = 1 Output: -1 Explanation: The Fibonacci numbers less than or equal to 1 are 0, 1, 1. There is no prime number in this range. Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestPrimeFibonacci() which takes an Integer n as input and returns the largest prime Fibonacci number less than or equal to n. If no such number exists, return -1. Expected Time Complexity: O(n*(log(n))) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^{6}","solution":"def largestPrimeFibonacci(n): Returns the largest prime Fibonacci number less than or equal to n. if n < 2: return -1 def is_prime(num): if num < 2: return False for i in range(2, int(num**0.5)+1): if num % i == 0: return False return True fib1, fib2 = 0, 1 largest_prime_fib = -1 while fib2 <= n: if is_prime(fib2): largest_prime_fib = fib2 fib1, fib2 = fib2, fib1 + fib2 return largest_prime_fib"},{"question":"Given an array of integers, determine and return the number of contiguous subarrays that sum up to a given integer X. Example 1: Input: arr = [1, 1, 1], X = 2 Output: 2 Explanation: The subarrays [1, 1] and [1, 1] sum up to 2. Example 2: Input: arr = [1, 2, 3], X = 3 Output: 2 Explanation: The subarrays [1, 2] and [3] sum up to 3. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function count_subarrays_with_sum() that takes an integer array arr, and an integer X, and return the number of contiguous subarrays that sum up to X. The driver code takes care of the printing. Expected Time Complexity: O(n). Expected Auxiliary Space: O(n). Constraints: 1 ≤ len(arr) ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4 -10^9 ≤ X ≤ 10^9","solution":"def count_subarrays_with_sum(arr, X): Returns the number of contiguous subarrays that sum up to a given integer X. Parameters: arr (list): List of integers X (int): The target sum Returns: int: Number of contiguous subarrays that sum up to X count = 0 current_sum = 0 prefix_sum_count = {0: 1} for num in arr: current_sum += num if current_sum - X in prefix_sum_count: count += prefix_sum_count[current_sum - X] prefix_sum_count[current_sum] = prefix_sum_count.get(current_sum, 0) + 1 return count"},{"question":"In a kingdom there are N cities and some cities are directly connected by roads. Each road connects exactly two cities, and it\'s possible to travel between any two cities (directly or indirectly). However, the distance of some longest roads in the kingdom has become unbearable for the citizens. You are given the connectivity information of the cities in the form of an adjacency list. Your task is to remove the longest connected road in such a way that all the cities remain connected though the roads. If there are multiple longest roads, just remove one of them. Input: - The first line contains an integer N (the number of cities) and M (the number of roads). - The next M lines each contain three integers u, v, and w, where u and v represent the cities connected by this road, and w represents the weight (or length) of this road. Output: - Print the list of remaining roads in the same format as the input. Each road should be printed on a new line with the cities it connects and the weight. SAMPLE INPUT: 5 7 1 2 5 1 3 10 2 3 12 2 4 15 3 4 7 4 5 6 5 1 14 SAMPLE OUTPUT: 1 2 5 1 3 10 2 3 12 3 4 7 4 5 6 5 1 14","solution":"def find_and_remove_longest_road(n, m, roads): Removes one of the longest roads while keeping all cities connected. :param n: Number of cities :param m: Number of roads :param roads: List of tuples representing the roads (u, v, w) :return: List of remaining roads # Step 1: Find the longest road longest_road = max(roads, key=lambda x: x[2]) # Step 2: Remove the longest road roads.remove(longest_road) return roads"},{"question":"You are given a sequence of numbers that represent the stock prices of a company over consecutive days. Your task is to find the maximum profit that can be made by buying and selling the stock on two separate transactions, where a transaction consists of buying on one day and selling on a later day. Note that you cannot engage in multiple transactions at the same time (ie, you must sell the stock before you buy again). Input The input consists of a single integer N, the number of days, followed by N integers representing the stock prices on each day. Output Output a single integer, the maximum profit possible from two transactions. If no profit can be made, return 0. Example Input 6 3 3 5 0 0 3 1 4 Output 6 Input 7 1 2 3 4 5 6 7 Output 6 Input 3 7 6 4 Output 0","solution":"def max_profit(prices): n = len(prices) if n < 2: return 0 # Initialize profits arrays profit_left = [0] * n profit_right = [0] * n # Track the minimum price seen so far from left to right min_price = prices[0] for i in range(1, n): min_price = min(min_price, prices[i]) profit_left[i] = max(profit_left[i-1], prices[i] - min_price) # Track the maximum price seen so far from right to left max_price = prices[-1] for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) profit_right[i] = max(profit_right[i+1], max_price - prices[i]) # Maximum profit is the sum of the best profits from both sides of any day max_profit = 0 for i in range(n): max_profit = max(max_profit, profit_left[i] + profit_right[i]) return max_profit"},{"question":"Kayla is planning her route for a food delivery service along Pine Street. There are E restaurants and C customers located on Pine Street. She needs to pick up orders from each restaurant and deliver to each customer. Kayla wants to minimize her maximum travel time between any successive stops (either from one restaurant to another, or from one restaurant to a customer, or from one customer to another). You are given coordinates of all restaurants and customers on a single straight line Pine Street, with each location represented by an integer. Determine the minimum possible maximum travel time that Kayla can achieve between any two successive stops. -----Constraints----- - 1 ≤ E, C ≤ 50 - 0 ≤ coordinates ≤ 1000 - All given coordinates are distinct integers. -----Input----- Input is given from Standard Input in the following format: E C r_1 r_2 ... r_E c_1 c_2 ... c_C -----Output----- Print the minimum possible maximum travel time between any two successive stops. -----Sample Input----- 2 3 3 8 2 5 9 -----Sample Output----- 3 In this example, Kayla can minimize the maximum travel time by visiting the stops in the order: 2 -> 3 -> 5 -> 8 -> 9. The maximum travel time between any two successive stops is 3, which is the minimum possible maximum travel time she can achieve.","solution":"def minimize_max_travel_time(E, C, restaurants, customers): all_locations = sorted(restaurants + customers) max_distances = [all_locations[i+1] - all_locations[i] for i in range(len(all_locations) - 1)] return max(max_distances) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() E = int(data[0]) C = int(data[1]) restaurants = list(map(int, data[2:2+E])) customers = list(map(int, data[2+E:])) result = minimize_max_travel_time(E, C, restaurants, customers) print(result)"},{"question":"You are organizing a theater event and want to manage the seating arrangements efficiently. The theater has R rows, and each row has C seats. You have a list of seat reservations for the event. Your task is to determine if all reservations can be successfully accommodated without any conflicts. Input: The first line of input contains the number of test cases T. Each test case starts with two integers R and C representing the number of rows and columns in the theater. The next line contains an integer N representing the number of reservations. The following N lines each contain two integers r and c, indicating a reservation for the seat in the r-th row and c-th column. Output: For each test case, print \\"Success\\" if all reservations can be accommodated without conflicts, otherwise print \\"Conflict\\". Constraints: 1 ≤ T ≤ 10 1 ≤ R, C ≤ 100 0 ≤ N ≤ R * C 1 ≤ r ≤ R 1 ≤ c ≤ C SAMPLE INPUT 2 3 3 4 1 2 2 2 1 3 3 3 2 2 4 1 2 2 2 2 2 3 1 SAMPLE OUTPUT Success Conflict","solution":"def manage_seating(T, test_cases): Manages seating arrangements to determine if all reservations can be successfully accommodated without any conflicts. Parameters: - T: number of test cases - test_cases: List of tuples representing each test case. Each tuple contains: - R, C: number of rows and columns - N: number of reservations - reservations: List of tuples each containing r, c (row and column of the reservation) Returns: - List of strings \\"Success\\" or \\"Conflict\\" for each test case. results = [] for case in test_cases: R, C, N, reservations = case seating_map = set() conflict = False for res in reservations: r, c = res if (r, c) in seating_map: results.append(\\"Conflict\\") conflict = True break seating_map.add((r, c)) if not conflict: results.append(\\"Success\\") return results # Function to parse input and call the manage_seating function def theater_seating(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): R, C = map(int, lines[index].split()) index += 1 N = int(lines[index]) index += 1 reservations = [] for _ in range(N): r, c = map(int, lines[index].split()) reservations.append((r, c)) index += 1 test_cases.append((R, C, N, reservations)) return manage_seating(T, test_cases)"},{"question":"Luke is developing a video game where players need to gather resources to build structures. Each structure requires a specific set of resources, and each resource has a certain cost. Players can collect resources in different orders, but Luke wants to find the minimum cost for each structure if the players collect resources efficiently. Furthermore, there\'s a twist: some resources are required before others can be collected, and these dependencies are given as a directed graph. -----Input----- The first line contains an integer k, the number of structures. Each of the next k blocks describes a structure: - The first line of each block contains an integer m, the number of resources required for that structure. - The next m lines each contain a resource name (a string), its cost (an integer leq 100000), and the number of other resources it depends on (an integer). If the resource has dependencies, the next part of the line contains the names of those resources. - Resource names are strings of capital letters and their lengths do not exceed 10 characters. Each resource name will be unique across the input. You may assume that k leq 10, m leq 100, and that there are no cyclic dependencies. -----Output----- The output consists of k lines. Each line contains the minimum cost for building the respective structure. If a structure cannot be built due to unmet dependencies, the corresponding line contains the string IMPOSSIBLE. -----Examples----- Sample Input: 2 4 WOOD 3 0 STONE 4 1 WOOD BRICK 5 2 WOOD STONE GLASS 6 1 STONE 3 IRON 2 0 COPPER 3 1 IRON GOLD 10 2 IRON COPPER Sample Output: 18 15","solution":"def find_minimum_cost(structures): def topological_sort(graph, in_degree): from collections import deque q = deque() topo_sort = [] for node in in_degree: if in_degree[node] == 0: q.append(node) while q: node = q.popleft() topo_sort.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: q.append(neighbor) return topo_sort if len(topo_sort) == len(in_degree) else None results = [] for structure in structures: m, resources = structure[\'m\'], structure[\'resources\'] graph = {resource: [] for resource in resources.keys()} in_degree = {resource: 0 for resource in resources.keys()} cost = {resource: resources[resource][\'cost\'] for resource in resources.keys()} for resource, details in resources.items(): for dependency in details[\'dependencies\']: graph[dependency].append(resource) in_degree[resource] += 1 topo_sort = topological_sort(graph, in_degree) if not topo_sort: results.append(\\"IMPOSSIBLE\\") continue min_cost = {resource: -1 for resource in resources.keys()} for node in topo_sort: if in_degree[node] == 0: min_cost[node] = cost[node] for neighbor in graph[node]: if min_cost[neighbor] == -1: min_cost[neighbor] = 0 min_cost[neighbor] = max(min_cost[neighbor], min_cost[node] + cost[neighbor]) total_cost = sum(min_cost.values()) results.append(total_cost if total_cost != -1 else \\"IMPOSSIBLE\\") return results # Utility function to parse input and call the main function def main(data): data = data.strip().split(\\"n\\") k = int(data[0]) index = 1 structures = [] for _ in range(k): m = int(data[index]) index += 1 resources = {} for __ in range(m): parts = data[index].split() resource_name = parts[0] resource_cost = int(parts[1]) dependency_num = int(parts[2]) dependencies = parts[3:] if dependency_num > 0 else [] resources[resource_name] = {\'cost\': resource_cost, \'dependencies\': dependencies} index += 1 structures.append({\'m\': m, \'resources\': resources}) result = find_minimum_cost(structures) return result"},{"question":"Given a list of integers, rearrange the list into a new list such that the odd numbers appear in non-descending order followed by the even numbers in non-descending order. The relative order among the odd numbers and among the even numbers should be unchanged from the original list. Write a function `rearrangeIntegers(lst)` that takes in a list of integers `lst` and returns the rearranged list. # Input - A single line containing integers separated by spaces. Each integer can be positive, negative, or zero. The list will have at least 1 integer and at most 1000 integers. # Output - A single line containing the rearranged list of integers, with odd numbers appearing first in non-descending order followed by even numbers in non-descending order. # Example Input ``` 3 1 2 4 5 7 6 ``` Output ``` 1 3 5 7 2 4 6 ``` Input ``` 8 3 5 2 10 1 ``` Output ``` 3 5 1 2 8 10 ``` # Note The order of odd and even numbers in their respective segments should not be disturbed from how they appear in the original list. The task is to ensure all odd numbers come before all even numbers while preserving their relative order. # Constraints - The input list will contain at least 1 integer and at most 1000 integers. - It can contain positive, negative, or zero integers.","solution":"def rearrangeIntegers(lst): Rearranges the list of integers such that odd numbers come first followed by even numbers, while preserving the relative order among odd numbers and among even numbers. odds = [x for x in lst if x % 2 != 0] evens = [x for x in lst if x % 2 == 0] return odds + evens"},{"question":"The runner\'s app is being tested to ensure accurate step tracking. Developers have noticed inconsistencies in certain scenarios involving starts, stops, and overlaps in walking paths. They decide to create a function that corrects the walked distance. Each time the runner starts walking, the app records a \\"start\\" event with a specific timestamp. Similarly, each time they stop walking, a \\"stop\\" event is recorded. There can be multiple overlapping walking intervals. You are to create a function that calculates the total time the runner has been walking, considering all the overlapping intervals only once. -----Input----- The input consists of multiple lines. Each line has a command either \\"start\\" or \\"stop\\" followed by an integer timestamp T (0 ≤ T ≤ 10^9). It is guaranteed that a \\"start\\" event will always come before a \\"stop\\" event and that timestamps are given in a non-decreasing order. End of input is marked by the keyword \\"end\\". -----Output----- Output a single integer representing the total time the runner was walking, considering overlapping intervals only once. -----Examples----- Sample Input 1: start 1 stop 5 start 3 stop 6 end Sample Output 1: 5 Sample Input 2: start 2 stop 8 start 4 stop 10 end Sample Output 2: 8","solution":"def calculate_total_time(events): Calculates the total time the runner has been walking, considering overlapping intervals only once. Parameters: events (list of tuples): List of (\\"start\\" or \\"stop\\", timestamp) events. Returns: int: Total non-overlapping walking time. if not events: return 0 intervals = [] current_start = None for event, timestamp in events: if event == \\"start\\": if current_start is None: current_start = timestamp elif event == \\"stop\\": if current_start is not None: intervals.append((current_start, timestamp)) current_start = None # Merge intervals and calculate total time merged_intervals = [] for start, stop in sorted(intervals): if not merged_intervals or merged_intervals[-1][1] < start: merged_intervals.append((start, stop)) else: merged_intervals[-1] = (merged_intervals[-1][0], max(merged_intervals[-1][1], stop)) total_time = sum(stop - start for start, stop in merged_intervals) return total_time # Assuming we read input as given in the problem statement, and convert it to a list of events. def read_input(input_lines): Reads the input lines and converts to events format. Parameters: input_lines (list of str): List of input lines. Returns: list of tuples: List of (\\"start\\" or \\"stop\\", timestamp) events. events = [] for line in input_lines: if line.strip() == \\"end\\": break event, timestamp = line.strip().split() events.append((event, int(timestamp))) return events"},{"question":"You are given a list of integers. Write a function to group the integers into sets of even and odd numbers and return these sets as two separate lists. Input The input consists of a single list containing integers separated by spaces. Output Output a dictionary with two keys: \\"even\\" and \\"odd\\". The value corresponding to each key should be a list that contains integers from the input list that are even and odd, respectively. Example Input [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Output {\'even\': [2, 4, 6, 8, 10], \'odd\': [1, 3, 5, 7, 9]} Note Consider that an even number is divisible by 2 with no remainder, whereas an odd number has a remainder of 1 when divided by 2. Use this property to separate the input list into two lists: one containing even numbers and the other containing odd numbers.","solution":"def group_numbers_by_even_odd(numbers): Returns a dictionary with two keys: \'even\' and \'odd\'. The value corresponding to each key is a list that contains integers from the input list that are even and odd, respectively. grouped_numbers = {\\"even\\": [], \\"odd\\": []} for number in numbers: if number % 2 == 0: grouped_numbers[\\"even\\"].append(number) else: grouped_numbers[\\"odd\\"].append(number) return grouped_numbers"},{"question":"Problem Statement Anay loves working with numbers and often engages in various mathematical puzzles. Today, he has a sequence of `n` integers and he is interested in finding the \\"Greatest Sum of Subsequences\\" (GSS). GSS of a sequence is defined as follows: Given a sequence A, consider all the non-empty subsequences of A, compute their sums and find the greatest among them. More formally, given a sequence of integers A, find the maximum sum possible among all non-empty subsequences of A. To make things interesting, the sequence can contain both positive and negative numbers. Anay is facing some difficulty in solving this puzzle, so he turns to you for help. Your task is to compute the Greatest Sum of Subsequences for the given sequence. INPUT The first line contains an integer `t`, the number of test cases. Each test case consists of two lines. The first line contains a single integer `n`, the size of the sequence. The second line contains `n` space-separated integers representing the sequence A. OUTPUT For each test case, in a new line, output the Greatest Sum of Subsequences. CONSTRAINTS 1 ≤ t ≤ 10 1 ≤ n ≤ 100000 -10^4 ≤ A[i] ≤ 10^4 SAMPLE INPUT 2 5 1 -2 3 4 -1 3 -1 -2 -3 SAMPLE OUTPUT 8 -1 Explanation In the first test case, we can pick the subsequence {1, 3, 4} which gives us the sum of 8. This is the greatest sum possible among all subsequences of the sequence. In the second test case, as all numbers are negative, the greatest sum of subsequences is the maximum single element, which is -1.","solution":"def greatest_sum_of_subsequences(s): return max(0, sum(x for x in s if x > 0)) or max(s) def solve(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] result = greatest_sum_of_subsequences(s) results.append(result) return results # Function to parse the input and execute the solve function def execute_problem_statements(t, test_cases): return solve(t, test_cases)"},{"question":"In a remote village, there are N houses connected by M roads. Each road connects two different houses bidirectionally. The people of the village want to ensure that every house is reachable from every other house by using those roads. To achieve this, they propose to build additional roads to ensure the village forms a connected network. Your task is to determine the minimum number of additional roads needed to make the network of houses connected. -----Constraints----- - 1 < N ≤ 10^5 - 0 ≤ M ≤ 10^5 - 1 ≤ u, v ≤ N (u ≠ v), where u and v represent house numbers connected by a road. -----Input----- Input is given from the Standard Input in the following format: N M u_1 v_1 u_2 v_2 ... u_M v_M -----Output----- Print the minimum number of additional roads needed to make the network of houses connected. -----Sample Input----- 6 5 1 2 2 3 3 4 4 5 5 6 -----Sample Output----- 0 -----Explanation----- In this example, the village already forms a single connected component, so no additional roads are needed. -----Sample Input----- 6 3 1 2 2 3 4 5 -----Sample Output----- 2 -----Explanation----- In this example, there are two disconnected components: {1, 2, 3} and {4, 5, 6}. To connect these components, we can add two roads; for example, we can build roads (3, 4) and (5, 6). The minimum number of additional roads needed is 2.","solution":"def find(root, parent): if parent[root] != root: parent[root] = find(parent[root], parent) return parent[root] def union(node1, node2, parent, rank): root1 = find(node1, parent) root2 = find(node2, parent) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 def min_additional_roads(N, M, roads): parent = list(range(N + 1)) rank = [0] * (N + 1) for u, v in roads: union(u, v, parent, rank) components = len(set(find(i, parent) for i in range(1, N + 1))) return components - 1"},{"question":"You are given two strings s and t consisting of lowercase English letters. You need to transform string s into string t using the following operations: 1. Append any character to the end of the string s. 2. Remove the last character of s. 3. Swap any two adjacent characters in s. Your task is to determine the minimum number of operations required to convert string s into t. If it is impossible to transform s into t, return -1. -----Input----- The first line contains an integer q (1 le q le 100) — the number of test cases. The following lines describe the test cases. Each test case consists of two lines: - The first line contains string s (1 le |s| le 100). - The second line contains string t (1 le |t| le 100). -----Output----- For each test case, print the answer in one line — either the minimum number of operations or -1 if it\'s impossible. -----Example----- Input 3 ab ba abcd dcba a a Output 1 6 0 -----Note----- In the first test case, we only need to swap the two characters in s to get t. In the second test case, one way to transform s into t is to swap the characters in the specified order (a, b), (b, c), (c, d), (a, b), (b, c), and (c, d), resulting in a total of 6 operations. In the third test case, both strings are already the same, so no operation is needed. -----Constraints----- - The length of string s and t is between 1 and 100. - The sum of lengths of strings s and t over all test cases does not exceed 10^4.","solution":"def min_operations_to_transform(s: str, t: str) -> int: if sorted(s) != sorted(t): return -1 n = len(s) s_list = list(s) min_operations = 0 for i in range(n): if s_list[i] == t[i]: continue # Find the correct character in the rest of the list for j in range(i + 1, n): if s_list[j] == t[i]: break # Move the character at position j to position i using adjacent swaps while j > i: s_list[j], s_list[j - 1] = s_list[j - 1], s_list[j] j -= 1 min_operations += 1 return min_operations def solve_multiple_cases(q, cases): results = [] for s, t in cases: results.append(min_operations_to_transform(s, t)) return results"},{"question":"A company is delivering packages to customers in different cities. Each delivery follows a specific route, and the company wants to monitor the status of these deliveries. At each city in the route, the package can either continue to the next city, stay in the current city for a while, or be successfully delivered. You are given an array of integers representing the delivery route, where each integer corresponds to a city\'s delivery status: - `0` indicates that the package continues to the next city, - `1` indicates that the package stays in the current city, - `2` indicates that the package has been successfully delivered. Given a list of routes for multiple deliveries, determine for each delivery if the package has been successfully delivered by the end of the route. Example n = 5 routes = [[0, 1, 0, 0, 2], [0, 1, 2, 1, 0], [1, 1, 0, 1, 0]] If a route contains at least one `2`, it indicates that the package has been successfully delivered on that route. Function Description Complete the `deliveryStatus` function in the editor below. `deliveryStatus` has the following parameter(s): int n: the number of routes int routes[n][m]: a list of routes, where each route contains the status of packages at each city along the route, and m represents the total number of cities in each route. Returns bool[n]: an array of boolean values indicating `True` if the package has been successfully delivered on each route, `False` otherwise Input Format The first line of input contains an integer, n, where n denotes the number of delivery routes. The next n lines each contain space-separated integers representing the status of the package in each city along the route. Constraints 1 le n le 1000 1 le m le 1000 0 le routes[i][j] le 2 for all valid i and j Sample Input STDIN Function ----- -------- 3 n = 3 0 1 0 0 2 routes = [[0, 1, 0, 0, 2], [0, 1, 2, 1, 0], [1, 1, 0, 1, 0]] 0 1 2 1 0 1 1 0 1 0 Sample Output True True False Explanation For each route: - The first route `[0, 1, 0, 0, 2]` contains a `2`, indicating successful delivery. - The second route `[0, 1, 2, 1, 0]` also contains a `2`. - The third route `[1, 1, 0, 1, 0]` does not contain a `2`. Thus, the output is `[True, True, False]`.","solution":"def deliveryStatus(n, routes): Determines for each delivery route if the package has been successfully delivered. Parameters: n (int): the number of routes routes (list of list of int): the status of the package in each city along each route Returns: list of bool: a list of boolean values indicating True if the package has been successfully delivered, False otherwise delivery_statuses = [] for route in routes: delivery_statuses.append(2 in route) return delivery_statuses"},{"question":"Design a function that analyzes a string consisting of multiple words and capitalizes each word except for the following exceptions: \\"and\\", \\"the\\", \\"in\\", \\"of\\", \\"on\\", and \\"with\\". However, if any of these exceptions is the first or last word of the string, it should be capitalized. The function should take a single string as input, process it according to the instructions, and return the newly formatted string. For example: - Input: \\"the quick brown fox jumps over the lazy dog\\" - Output: \\"The Quick Brown Fox Jumps over the Lazy Dog\\" - Input: \\"a celebration of life and love\\" - Output: \\"A Celebration of Life and Love\\" **Note**: Ensure that the only exceptions that are not capitalized are those found somewhere in the middle of the string and are not exceptions if found at the start or end of the string.","solution":"def capitalize_string(s): Capitalizes each word in the string except for certain exceptions, unless they are the first or last word in the string. :param s: Input string consisting of multiple words. :return: Newly formatted string. exceptions = {\\"and\\", \\"the\\", \\"in\\", \\"of\\", \\"on\\", \\"with\\"} words = s.split() if not words: return \\"\\" # Capitalize the first word if it\'s an exception words[0] = words[0].capitalize() # Capitalize the last word if it\'s an exception if len(words) > 1: words[-1] = words[-1].capitalize() # Capitalize all other words that are not exceptions for i in range(1, len(words)-1): if words[i].lower() not in exceptions: words[i] = words[i].capitalize() return \' \'.join(words)"},{"question":"A popular nightclub has a unique way of music programming. The DJ has a list of N available songs, each with a specific duration in seconds. The club has M different time slots to fill, and each slot can contain one or more songs that exactly fill that slot\'s duration. Your task is to calculate the number of ways to fill each slot\'s duration using the available songs. Each song can only be used once for any given time slot. -----Input----- Input begins with an integer T: the number of test cases. Each test case consists of two lines: - The first line contains two space-separated integers N and M. - The second line contains N space-separated integers representing the durations of the songs. - The third line contains M space-separated integers representing the durations of the time slots. -----Output----- For each test case, output M lines. Each line should contain the number of ways to fill the corresponding time slot exactly. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 100 - 1 ≤ duration of a song ≤ 300 - 1 ≤ duration of a time slot ≤ 1000 -----Example----- Input: 1 4 2 30 40 20 10 50 60 Output: 2 2 -----Explanation----- In the example case: - There are two possible ways to fill a time slot of 50 seconds: 30+20 or 40+10. - There are two possible ways to fill a time slot of 60 seconds: 30+30 or 40+20.","solution":"from itertools import combinations def count_ways_to_fill_slots(N, M, song_durations, slot_durations): ways = [] for slot in slot_durations: count = 0 # Check combinations of songs that sum up to the slot duration for r in range(1, N+1): # Length of combinations can vary from 1 to N for combo in combinations(song_durations, r): if sum(combo) == slot: count += 1 ways.append(count) return ways def solve(T, cases): results = [] for i in range(T): N, M, song_durations, slot_durations = cases[i] results.append(count_ways_to_fill_slots(N, M, song_durations, slot_durations)) return results"},{"question":"Given a sequence of positive integers, determine whether the sequence forms an \\"increasing subsequence\\". A sequence is considered an increasing subsequence if, for every element in the sequence except the first one, the element is greater than all the elements before it in the subsequence. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line of input containing a space-separated sequence of positive integers. ------ Output Format ------ For each test case, output texttt{YES} if the sequence forms an increasing subsequence, else output texttt{NO}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes} and texttt{YES} will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ text{length of each sequence} ≤ 10 1 ≤ text{value of each element} ≤ 100 ------ Sample Input 1 ------ 3 1 3 5 7 4 4 5 6 2 2 3 1 ------ Sample Output 1 ------ YES NO NO ------ Explanation 1 ------ Test case 1: Each successive number is greater than the previous one, so the sequence forms an increasing subsequence. Test case 2: The second element is equal to the first element, thus the sequence doesn\'t form an increasing subsequence. Test case 3: The last element is less than the previous elements, so it\'s not an increasing subsequence.","solution":"def is_increasing_subsequence(sequence): Determines if the given sequence is an increasing subsequence. Arguments: sequence -- list of integers representing the sequence Returns: \\"YES\\" if the sequence forms an increasing subsequence, \\"NO\\" otherwise for i in range(1, len(sequence)): if sequence[i] <= sequence[i - 1]: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): Processes multiple test cases to determine if each sequence forms an increasing subsequence. Arguments: test_cases -- a list of lists, where each sublist represents a sequence of integers Returns: a list of strings (\\"YES\\" or \\"NO\\") corresponding to each test case results = [] for case in test_cases: results.append(is_increasing_subsequence(case)) return results"},{"question":"# Task Given an integer `n`, generate a list of all prime numbers less than or equal to `n`. A prime number is a natural number greater than 1 and has no positive divisors other than 1 and itself. Write a function that returns the list of prime numbers in ascending order. # Example For `n = 10`, the output should be `[2, 3, 5, 7]`. For `n = 20`, the output should be `[2, 3, 5, 7, 11, 13, 17, 19]`. # Input/Output - `[input]` integer `n` A natural number. Constraints: `1 ≤ n ≤ 100`. - `[output]` a list of integers A list of prime numbers less than or equal to `n`. The list should be in ascending order.","solution":"def generate_primes(n): Generates a list of all prime numbers less than or equal to n. :param n: Integer, the upper limit to generate primes. :return: List of prime numbers less than or equal to n. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if sieve[start]: # If start is a prime for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"In a faraway kingdom, there exists a magical creature called a \\"Fluffalo\\". Fluffalos consume magical herbs to change their state. Each Fluffalo has a unique ID between 1 and n, and they can transition between states based on the herbs they consume. However, not all transitions lead to distinct states as sometimes Fluffalos might turn into the same state. The state transitions are described by a list of transformations. Each transformation specifies whether the Fluffalo changes into a new state or remains in the current state after consuming a particular herb. Initially, each Fluffalo starts in state 0. The state transitions are provided incomplete form, and your task is to determine how many distinct states each Fluffalo can transition into, starting from state 0 after consuming any sequence of up to k herbs. Given a list of transitions and a limit on the number of herbs k, return the number of distinct states each Fluffalo can transition into starting with state 0. Input: The first line contains three integers: p, n, and k (1 ≤ p, n, k ≤ 10^5) - the number of possible transitions, the number of different Fluffalo types, and the maximum number of herbs respectively. Each of the following p lines contains a transition rule. Each transition rule starts with two integers (a Fluffalo ID) fi (1 ≤ fi ≤ n) and the initial state si (0 ≤ si ≤ k), followed by an integer t which indicates the number of herbs (0 ≤ t ≤ k) required for the transition, and finally an integer si’ (0 ≤ si’ ≤ k) that represents the new state after consuming the herbs. Output: For each Fluffalo, in order of their IDs, print a line with an integer indicating the number of distinct states (including state 0) that the Fluffalo can transition into, starting from state 0 and consuming up to k herbs. Examples Input: 6 3 2 1 0 1 1 1 1 1 2 2 0 1 1 2 1 1 2 2 2 1 2 3 0 1 0 Output: 3 3 1","solution":"from collections import defaultdict, deque def fluffalo_states(p, n, k, transitions): Determine the number of distinct states each Fluffalo can transition to. # Create a table to store transitions for each Fluffalo and state. transition_dict = defaultdict(lambda: defaultdict(list)) for fi, si, t, si_prime in transitions: transition_dict[fi][si].append((t, si_prime)) # Resultant list to store the number of states for each Fluffalo. Initialize with 1 to account for the initial state 0. result = [1] * n for fi in range(1, n+1): # A set to store distinct states each Fluffalo can transition to. states_set = set([0]) # A queue to perform BFS. queue = deque([(0, 0)]) # (current_state, herb_count) while queue: current_state, current_herbs = queue.popleft() if current_herbs < k: for t, new_state in transition_dict[fi][current_state]: if current_herbs + t <= k and new_state not in states_set: states_set.add(new_state) queue.append((new_state, current_herbs + t)) result[fi-1] = len(states_set) return result"},{"question":"Sherlock is solving a number puzzle. He has an array of length n and a target number k. He wants to find the minimum number of operations required to make the sum of the elements of the array equal to k. In each operation, he can pick any two indices i and j (i ne j; 1 leq i,j leq n) and do one of the following: - If a_i > a_j, increase a_j by 1 and decrease a_i by 1. - If a_i < a_j, increase a_i by 1 and decrease a_j by 1. Provided that it is guaranteed that the sum of the initial array can be adjusted to k using the allowed operations, determine the minimum number of operations needed. -----Input----- The first line contains a single positive integer t (1 leq t leq 1000) — the number of test cases. For each test case, the first line contains two integers n (2 leq n leq 100) — the length of the array, and k (0 leq k leq 10000) — the target sum. The second line contains n integers a_1, a_2, ldots, a_n (0 leq a_i leq 100) — the initial array. -----Output----- For each test case, print a single integer — the minimum number of operations to make the sum of the array equal to k. -----Examples----- Input 3 3 6 1 2 3 4 10 1 1 1 1 2 200 50 150 Output 0 6 0 -----Note----- In the first test case, the initial sum is already 6. Therefore, the minimum number of operations is 0. In the second test case, one of the possible ways: - Gradientally increase elements by shifting values until the array sums reach 10. In the third test case, the initial sum is already 200. Therefore, the minimum number of operations is 0.","solution":"def min_operations_to_sum_k(n, k, array): Returns the number of operations required to make the sum of the array equal to k. current_sum = sum(array) # no operations needed if the current sum is already k return abs(current_sum - k) def process_test_cases(t, test_cases): results = [] for i in range(t): n, k, array = test_cases[i] result = min_operations_to_sum_k(n, k, array) results.append(result) return results"},{"question":"You are given an array of distinct integers and a number \'k\'. Your task is to find the number of unique pairs of integers in the array that sum up to \'k\'. Input Format The first line contains two integers {n} and {k}, where {n} is the number of integers in the array. The second line contains {n} distinct integers separated by space. Constraints {1}leq{n}leq{50,000} {-10^9}leq each integer in the array leq{10^9} Output Format Output a single integer: the number of unique pairs that sum up to {k}. Sample Input 5 9 2 7 11 15 1 Sample Output 1 Explanation There is exactly one pair that sums up to 9: (2, 7).","solution":"def count_pairs_with_sum(nums, k): Counts the number of unique pairs in the list nums that add up to k. num_set = set() count = 0 for num in nums: if k - num in num_set: count += 1 num_set.add(num) return count"},{"question":"You are given a string consisting of lowercase English letters. Your task is to determine the smallest possible length of a string that can be obtained after applying the following operation any number of times: - Pick any palindrome substring and remove it from the string. Note: A substring is any continuous portion of the string. A palindrome is a string that reads the same forward and backward. -----Input----- The input consists of one line containing a string of length n (1 ≤ n ≤ 10^4) consisting of lowercase English letters. -----Output----- Print a single integer, the smallest possible length of the string after applying the operation any number of times. -----Sample Input----- abacdc -----Sample Output----- 1 By removing \\"aba\\", \\"cdc\\", and leaving the single character \\"d\\", we get the output as 1.","solution":"def smallest_length_after_removals(s): Determines the smallest possible length of the string after removing palindrome substrings any number of times. # If the whole string is a palindrome, we can remove it entirely to get an empty string if s == s[::-1]: return 0 # If the entire string is not a palindrome, the smallest possible length after all removals is 1 return 1"},{"question":"You are managing a warehouse and are responsible for organizing the aisle layout. The warehouse has (n times m) grid cells where each cell can either be an aisle or an obstacle. The aisles allow movement, while the obstacles block it. You need to determine if there is a valid path for a robot to travel from the top-left corner to the bottom-right corner of the warehouse grid. The robot can move in four directions: up, down, left, and right. It cannot move diagonally and cannot move through obstacles. Write a program that, given the warehouse layout, finds if there is a valid path from the top-left corner to the bottom-right corner. If a path exists, output \\"possible\\"; otherwise, output \\"impossible\\". -----Input----- The first line of input contains two integers n and m (1 leq n, m leq 1000), the dimensions of the warehouse grid. The next n lines each contain m characters that represent the warehouse layout: - \'.\' (dot) indicates an aisle where the robot can move. - \'#\' (hash) indicates an obstacle. It is guaranteed that the top-left corner (grid[0][0]) and the bottom-right corner (grid[n-1][m-1]) are always aisles (\'.\'). -----Output----- Output \\"possible\\" if there is a valid path from the top-left corner to the bottom-right corner; otherwise, output \\"impossible\\". -----Examples----- Sample Input 1: 5 6 ...... .#.#.. .#.... ..#. ....#. Sample Output 1: possible Sample Input 2: 3 3 ... .#. #.# Sample Output 2: impossible","solution":"def is_valid_path(n, m, grid): Determines if there is a valid path from the top-left corner to the bottom-right corner in the grid. Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (list): 2D list representing the warehouse grid. Returns: str: \'possible\' if there is a valid path, \'impossible\' otherwise. from collections import deque def bfs(start, end): queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == end: return True for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False start = (0, 0) end = (n-1, m-1) return \\"possible\\" if bfs(start, end) else \\"impossible\\""},{"question":"Write a function `maxSubArraySum` that takes an array of integers as input and returns the sum of the largest contiguous subarray (subarray with the maximum sum). The function should implement Kadane’s Algorithm to solve the problem efficiently. ```Example: Input - {-2, 1, -3, 4, -1, 2, 1, -5, 4} Output - 6 ``` Explanation: The subarray `[4, -1, 2, 1]` has the largest sum of 6.","solution":"def maxSubArraySum(nums): Implements Kadane\'s Algorithm to find the sum of the largest contiguous subarray. Args: nums (list of int): The input list of integers. Returns: int: The sum of the largest contiguous subarray. max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a small village, there are n sorcerers and m villagers. A sorcerer can only help villagers who live within a certain Euclidean distance d from their own house. Each sorcerer can help at most one villager, while each villager can be helped by at most one sorcerer. A villager is considered helped if there is at least one sorcerer within the specified distance who hasn\'t already helped another villager. Given the coordinates of the sorcerers and villagers, determine how many villagers can be helped. Input The first line of the input contains three integers n, m and d (1 ≤ n, m ≤ 1000, 1 ≤ d ≤ 109) — the number of sorcerers, the number of villagers, and the maximum distance a sorcerer can help. The i-th of following n lines contains two integers sxi and syi ( - 109 ≤ sxi, syi ≤ 109) — coordinates of the i-th sorcerer. The i-th of following m lines contains two integers vxi and vyi ( - 109 ≤ vxi, vyi ≤ 109) — coordinates of the i-th villager. Output Print the number of villagers who can be helped by the sorcerers. Examples Input 3 4 5 1 1 2 2 3 3 0 0 4 4 1 3 3 1 Output 3 Input 2 3 10 -5 0 5 0 0 5 4 3 -4 -3 Output 2 Note In the first sample, there are three sorcerers and four villagers. Sorcerers are at coordinates (1, 1), (2, 2), and (3, 3). Villagers are at (0, 0), (4, 4), (1, 3), and (3, 1). Given the maximum distance of 5, three villagers can be helped. In the second sample, two sorcerers and three villagers are given with a maximum distance of 10. Sorcerers are at (-5, 0) and (5, 0). Villagers are at (0, 5), (4, 3), and (-4, -3). Two villagers can be helped with these constraints.","solution":"import math def villagers_helped(n, m, d, sorcerers, villagers): helped_villagers = 0 sorcerers_available = [True] * n for v_x, v_y in villagers: for i in range(n): if sorcerers_available[i]: s_x, s_y = sorcerers[i] distance = math.sqrt((s_x - v_x) ** 2 + (s_y - v_y) ** 2) if distance <= d: helped_villagers += 1 sorcerers_available[i] = False break return helped_villagers"},{"question":"Sarah loves arranging her bookshelf, which contains a mix of fiction and non-fiction books. Each book has a specific thickness, and she needs to fit as many books as possible on a single shelf that has a maximum weight capacity. However, each book also has a weight, and the combined weight of the books on the shelf cannot exceed the maximum weight capacity of the shelf. Given the thickness and the weight of each book, alongside the maximum capacity of the shelf, determine the maximum number of books Sarah can fit on the shelf without exceeding the weight limit. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4), representing the number of books. The next line contains an integer W (1 ≤ W ≤ 10^5), the maximum weight capacity of the shelf. The following n lines contain two integers each, t{i} (1 ≤ t{i} ≤ 100) and w{i} (1 ≤ w{i} ≤ 10^4), representing the thickness and weight of the i-th book respectively. -----Output----- Print a single number — the maximum number of books Sarah can place on her shelf without exceeding the weight limit. -----Examples----- Input 6 15 2 1 3 5 2 6 5 10 1 4 4 1 Output 4 -----Note----- Value 4 is achieved by placing the books with thickness 2 and weight 1, thickness 1 and weight 4, thickness 3 and weight 5, and thickness 4 and weight 1. This combination ensures the total weight does not exceed the capacity and allows for the maximum number of books.","solution":"def max_books(n, W, books): Determine the maximum number of books that can fit on a shelf without exceeding the weight capacity. Parameters: n (int): Number of books. W (int): Maximum weight capacity of the shelf. books (list of tuples): List of tuples where each tuple contains the thickness and weight of a book. Returns: int: Maximum number of books. # Sort books based on their weight in ascending order books.sort(key=lambda x: x[1]) weight_sum = 0 count = 0 for thickness, weight in books: if weight_sum + weight <= W: weight_sum += weight count += 1 else: break return count"},{"question":"A string is said to be “Happy” if it contains two identical characters next to each other. For example, the string “good” is “Happy” because it contains two consecutive \'o\' characters, while the string “bad” is not “Happy” because it does not have any repeating characters side-by-side. Your task is to write a program that checks if a given string is “Happy”. Input The input consists of several lines. Each line contains a single string of lowercase English letters. You may assume one line contains no more than 1000 characters. Input terminates with EOF. Output For each line of input, print “Happy” if the string is “Happy”, otherwise print “Not Happy”. Example Input good bad pool swim Output Happy Not Happy Happy Not Happy","solution":"def is_happy(input_string): Returns \\"Happy\\" if the string contains two identical characters next to each other, otherwise returns \\"Not Happy\\". for i in range(1, len(input_string)): if input_string[i] == input_string[i - 1]: return \\"Happy\\" return \\"Not Happy\\""},{"question":"Marie enjoys playing with strings and mathematical operations. She recently discovered the concept of palindromes and wants to create palindrome strings from given alphabets. Marie\'s method involves selecting a subset of letters from a given string, rearranging them, and checking if they form a palindrome. Help Marie determine the maximum length of a palindrome she can generate from the given string. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains a single string S consisting of lowercase English alphabets. Output Output contains T lines, each line denoting the maximum length of a palindrome that can be generated from the respective string. Constraints 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 100 SAMPLE INPUT 2 abccccdd aabbcc SAMPLE OUTPUT 7 6 Explanation Example case 1. The longest palindrome that can be made is \\"dccaccd\\", with a length of 7. Example case 2. The longest palindrome that can be made is \\"abccba\\" or any other permutation with a length of 6.","solution":"from collections import Counter def max_palindrome_length(S): Returns the maximum length of a palindrome that can be made from the string S. count = Counter(S) length = 0 odd_found = False for freq in count.values(): if freq % 2 == 0: length += freq else: length += freq - 1 odd_found = True if odd_found: length += 1 return length def process_test_cases(T, test_cases): results = [] for i in range(T): results.append(max_palindrome_length(test_cases[i])) return results"},{"question":"Alex enjoys creating unique strings. A string is considered unique if no two adjacent characters in the string are the same. Given a string `s`, Alex wants to calculate the minimum number of characters that need to be changed to make the string unique. -----Input----- The first line contains an integer t (1 le t le 50) — the number of test cases. Then t lines contain the test cases, one per line. Each test case consists of a single string `s` (1 le |s| le 1000), where `|s|` denotes the length of the string and `s` consists of lowercase English letters. -----Output----- For each test case, print the minimum number of characters that need to be changed to make the string `s` unique. -----Examples----- Input 3 aabb ab aaaa Output 2 0 3 -----Note----- For the first test case, the string \\"aabb\\" can be changed to \\"abab\\" by changing the second \'a\' to \'b\' and the first \'b\' to \'a\'. This requires 2 changes. For the second test case, the string \\"ab\\" is already unique, so no changes are necessary. For the third test case, the string \\"aaaa\\" can be changed to \\"abab\\" by alternating the characters, requiring 3 changes.","solution":"def min_changes_to_make_unique(t, test_cases): Given a number of test cases and corresponding strings, this function calculates the minimum number of changes needed for each string to become unique where no two adjacent characters are the same. Parameters: t (int): Number of test cases. test_cases (list of str): List containing the test case strings. Returns: list of int: List containing the minimum number of required changes for each test case. results = [] for s in test_cases: changes = 0 for i in range(1, len(s)): if s[i] == s[i - 1]: changes += 1 results.append(changes) return results"},{"question":"Three-dimensional (3D) printing technology has led to widespread advancements in various industries, from manufacturing to healthcare. In this problem, you are tasked with designing software to assist in a 3D printing task. You are given a cube with dimensions n x n x n. You need to program the printer to carve out a smaller cuboid from this cube by specifying its opposite corner coordinates. Your task is to write a program that calculates the volume of the remaining part of the cube after the smaller cuboid has been carved out. Input The input consists of several test cases. The first line of the input contains a single integer T, the number of test cases. For each test case, the input consists of two lines: The first line contains a single integer n, representing the side length of the cube. The second line contains six integers x1, y1, z1, x2, y2, z2 (0 <= x1, y1, z1 < x2, y2, z2 <= n), denoting the coordinates of the opposite corners of the cuboid to be carved out. Output For each test case, output a single line containing the volume of the remaining part of the cube after carving out the cuboid. Sample Input 3 10 1 1 1 3 3 3 8 2 2 2 4 4 4 5 0 0 0 2 2 2 Sample Output 927 488 67 Explanation For the first test case: - The volume of the entire cube is 10^3 = 1000. - The volume of the cuboid carved out is (3-1) * (3-1) * (3-1) = 2 * 2 * 2 = 8. - The remaining volume is 1000 - 8 = 992. For the second test case: - The volume of the entire cube is 8^3 = 512. - The volume of the cuboid carved out is (4-2) * (4-2) * (4-2) = 2 * 2 * 2 = 8. - The remaining volume is 512 - 8 = 504. For the third test case: - The volume of the entire cube is 5^3 = 125. - The volume of the cuboid carved out is (2-0) * (2-0) * (2-0) = 2 * 2 * 2 = 8. - The remaining volume is 125 - 8 = 117.","solution":"def remaining_volume(T, test_cases): results = [] for case in test_cases: n = case[0] x1, y1, z1, x2, y2, z2 = case[1] # Volume of the entire cube total_volume = n ** 3 # Volume of the cuboid to be carved out carved_volume = (x2 - x1) * (y2 - y1) * (z2 - z1) # Volume of the remaining part of the cube remaining_volume = total_volume - carved_volume results.append(remaining_volume) return results"},{"question":"A botanist is studying the growth patterns of a rare species of plant. Each plant can be represented as a sequence of integers where each integer denotes the height of the plant on a given day. A plant is considered to be in its \\"blooming period\\" if its height increases by exactly one unit each day for a specified number of consecutive days. Given the array boldsymbol{mathrm{~H~}} that represents the heights of the plant over a series of days, determine the number of distinct blooming periods. A blooming period starts on the first day and ends on the last day of the consecutive sequence of increasing heights by one unit each day. Example h=[1,2,3,1,2,3,4,1,2] The plant experiences 3 distinct blooming periods: 1. From day 1 to day 3: [1, 2, 3] 2. From day 4 to day 7: [1, 2, 3, 4] 3. From day 8 to day 9: [1, 2] Function Description Complete the bloomingPeriods function in the editor below. bloomingPeriods has the following parameter(s): list of integers h: the heights of the plant over a series of days Returns int: the number of distinct blooming periods Input Format There is one line of input: a single list of integers boldsymbol{mathrm{~H~}}. Constraints 1leq text{length of} h leq 100 1 ≤ h[i] ≤ 100 for all 0 ≤ i < n Sample Input 0 [1, 2, 3, 1, 2, 3, 4, 1, 2] Sample Output 0 3 Explanation 0 Three blooming periods found: 1. [1, 2, 3] 2. [1, 2, 3, 4] 3. [1, 2] Sample Input 1 [2, 3, 2, 3, 4, 1, 2, 3, 5] Sample Output 1 3 Explanation 1 Three blooming periods found: 1. [2, 3] 2. [2, 3, 4] 3. [1, 2, 3] Sample Input 2 [5, 6, 7, 1, 2, 2, 3, 4, 7] Sample Output 2 4 Explanation 2 Four blooming periods found: 1. [5, 6, 7] 2. [1, 2] 3. [2, 3, 4] 4. [4, 7] not a blooming period since heights do not increase by exactly 1","solution":"def bloomingPeriods(h): n = len(h) if n == 0: return 0 blooming_count = 0 i = 0 while i < n: start = i while i < n - 1 and h[i + 1] == h[i] + 1: i += 1 if start != i: blooming_count += 1 i += 1 return blooming_count"},{"question":"You are organizing a line dancing competition and need to come up with a system to judge the dancers. Each dancer will be given a score based on their performance. The scores are numeric and can range from 1 to 100. At the end of the competition, you need to announce the winner who has the highest score. However, if multiple dancers have the highest score, you should announce \\"Tie\\". Write a program that reads the number of dancers and their scores, determines the winner, and outputs either the highest score or \\"Tie\\" if there are multiple highest scores. Input - The first line contains a single integer n (1 ≤ n ≤ 100 000) — the number of dancers. - The next n lines each contains a single integer s_i (1 ≤ s_i ≤ 100) — the score of the i-th dancer. Output - Print the highest score if there is a single dancer with that score. Otherwise, print \\"Tie\\". Examples Input 5 89 90 78 90 67 Output Tie Input 3 85 100 92 Output 100 Note In the first example, there are two dancers with the highest score of 90, so the result is \\"Tie\\". In the second example, the dancer with the score 100 is the only one with that score, so the result is 100.","solution":"def find_highest_score_or_tie(n, scores): Determine the highest score or if there is a tie. Parameters: n (int): Number of dancers. scores (list): List of scores for each dancer. Returns: str or int: Highest score or \\"Tie\\" if multiple dancers have the highest score. score_counts = {} for score in scores: if score in score_counts: score_counts[score] += 1 else: score_counts[score] = 1 highest_score = max(score_counts.keys()) if score_counts[highest_score] > 1: return \\"Tie\\" else: return highest_score"},{"question":"Deep within an enchanted forest, there was a mystical tree that bore magical fruits. Each fruit had a unique weight and a special property. If two fruits are combined, they turn into a new fruit whose weight is the sum of the two original fruits\' weights, and they lose their special properties. However, these magical fruits could only be combined if their weights differed by a specific factor, K. The inhabitants of the forest, the Elves, wanted to maximize the number of distinct combinations they could create by following these rules. They were given N fruits each having a specific weight. Your task is to help the Elves determine the maximum possible number of distinct fruits that can be obtained by combining the given fruits following the specific factor K. Input The first line contains two integers N and K (1 ≤ N ≤ 1000, 1 ≤ K ≤ 100), the number of fruits and the specific factor. The second line contains N integers representing the weights of the fruits. Each weight is a positive integer not exceeding 10^6. Output Output the maximum number of distinct fruits that can be obtained by combining the given fruits following the rules. Examples Input 5 2 1 2 4 8 16 Output 5 Input 6 3 1 3 9 27 81 243 Output 6 Note In the first example, the factor is 2. The distinct combinations following this factor are: {1, 2}, {2, 4}, {4, 8}, {8, 16}. Thus, the maximum number of distinct fruits is 5 (the initial fruits plus one for each combination). In the second example, the factor is 3. The distinct combinations following this factor are: {1, 3}, {3, 9}, {9, 27}, {27, 81}, {81, 243}. Thus, the maximum number of distinct fruits is 6. Perform the necessary calculations to determine the solution efficiently, keeping in mind the constraints and properties of combining the fruits by the given factor.","solution":"def max_distinct_fruits(N, K, weights): # Convert weights list to a set to eliminate duplicates and enable efficient lookups weights_set = set(weights) distinct_fruits = set(weights) for weight in weights: multiplier = weight * K while multiplier in weights_set: distinct_fruits.add(multiplier) multiplier *= K return len(distinct_fruits)"},{"question":"Implement a function to find the longest subsequence with consecutive elements. Your function will accept an array of integers and will return an integer representing the length of such subsequence. **Examples:** ```python longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) # should return 4 # The longest consecutive subsequence is [1, 2, 3, 4]. longest_consecutive_subsequence([3, 9, 50, 2, 8, 4, 7, 1, 5]) # should return 5 # The longest consecutive subsequence is [1, 2, 3, 4, 5]. longest_consecutive_subsequence([0, 0, -1]) # should return 2 # The longest consecutive subsequence is [-1, 0]. longest_consecutive_subsequence([]) # should return 0 # There is no subsequence, hence return 0. longest_consecutive_subsequence([10, 20, 30, 40]) # should return 1 # Each number in the array is a consecutive subsequence of length 1. ``` **Constraints:** - All given arrays are composed of valid integers. - The function should handle arrays of up to a few thousand integers efficiently.","solution":"def longest_consecutive_subsequence(arr): Returns the length of the longest subsequence with consecutive elements. if not arr: return 0 num_set = set(arr) longest_streak = 0 for num in num_set: if num - 1 not in num_set: # This means num is the start of a sequence current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are provided with two integers, `a` and `b`. Your task is to determine if `a` and `b` share any common digits. -----Constraints----- - 0 ≤ a, b ≤ 999 - `a` and `b` are integers. -----Input----- Input is given from Standard Input in the following format: a b -----Output----- If `a` and `b` share at least one common digit, print `Yes`; otherwise, print `No`. -----Sample Input----- 123 456 -----Sample Output----- No `a` = 123 and `b` = 456 do not have any common digits. -----Sample Input----- 372 225 -----Sample Output----- Yes `a` = 372 and `b` = 225 share the digit `2`, so you should print `Yes`.","solution":"def common_digit(a, b): Determine if a and b share any common digits. Returns \\"Yes\\" if they do, otherwise \\"No\\". set_a = set(str(a)) set_b = set(str(b)) if set_a & set_b: return \\"Yes\\" else: return \\"No\\""},{"question":"Ella loves puzzles, and she recently discovered a fun game involving integers. The game works like this: Given an integer `n`, you can randomly pick any two contiguous integers from 1 to n and calculate their product. Ella wants to know, for a given `n`, what is the maximum product she can achieve by following this rule. Your task is to help Ella by writing a function that takes an integer `n` and returns the maximum product of any two contiguous integers from 1 to `n`. Input The input consists of: - An integer `n` (1 ≤ n ≤ 100). Output - Print an integer representing the maximum product of any two contiguous integers from 1 to `n`. Examples Input: 2 Output: 2 Input: 5 Output: 20 Note: For n = 2, the only pair of contiguous integers is (1, 2), and their product is 1 * 2 = 2. For n = 5, the pairs of contiguous integers are (1, 2), (2, 3), (3, 4), (4, 5). The maximum product is 4 * 5 = 20.","solution":"def max_contiguous_product(n): Returns the maximum product of any two contiguous integers from 1 to n. if n < 2: return 0 # If n < 2, there are not enough integers to form a pair return (n - 1) * n"},{"question":"You are provided with a list of integers representing the citations received by each researcher in a specific university. You need to calculate the h-index for that university. The h-index is defined as the maximum value h such that the given researcher has published h papers that each have at least h citations. # Input - The input consists of multiple test cases. The first line of each test case contains an integer N (1 ≤ N ≤ 100,000), the number of researchers. - The second line contains N integers, where the i-th integer denotes the number of citations received by the i-th researcher. Each integer is in the range [0, 10,000]. - The end of the dataset is represented by a single line containing the integer 0. # Output - For each test case, output a single integer representing the h-index for that university. # Example Input: ``` 5 6 5 3 1 0 4 4 4 4 4 8 10 8 5 4 3 3 2 1 0 ``` Output: ``` 3 4 4 ```","solution":"def calculate_h_index(citations): Calculate the h-index given a list of citations. citations.sort(reverse=True) h_index = 0 for i, citation in enumerate(citations): if citation >= i + 1: h_index = i + 1 else: break return h_index def process_input(input_data): Process the input data and return the corresponding h-indices for each test case results = [] data = input_data.strip().split(\\"n\\") idx = 0 while idx < len(data): n = int(data[idx]) if n == 0: break citations = list(map(int, data[idx + 1].split())) h_index = calculate_h_index(citations) results.append(h_index) idx += 2 return results"},{"question":"Linda loves puzzles, and her favorite ones are all about strings. One day, she came up with a new challenge for her friends. Given a string ( s ), Linda wants to determine the maximum length of a substring that contains at most ( k ) distinct characters. A substring is defined as a sequence of consecutive characters from the string. -----Input----- The first line of the input contains an integer ( t ) ((1 le t le 10)), representing the number of test cases. The next ( 2 times t ) lines contain the test cases. For each test case: - The first line contains the integer ( k ) ((1 le k le 10^4)), the maximum number of distinct characters. - The second line contains the string ( s ) ((1 le |s| le 10^5)), the string to be analyzed. -----Output----- For each test case, print one integer — the maximum length of a substring that contains at most ( k ) distinct characters. -----Examples----- Input 2 2 abcba 3 aabbcc Output 3 6 -----Note----- In the first example, the maximum length of such a substring is 3, which is the substring \\"bcb\\". In the second example, the entire string \\"aabbcc\\" contains exactly 3 distinct characters, so the maximum length is 6.","solution":"def max_substring_length_with_k_distinct_characters(k, s): from collections import defaultdict n = len(s) if k == 0 or n == 0: return 0 start = 0 max_len = 0 char_count = defaultdict(int) for end in range(n): char_count[s[end]] += 1 while len(char_count) > k: char_count[s[start]] -= 1 if char_count[s[start]] == 0: del char_count[s[start]] start += 1 max_len = max(max_len, end - start + 1) return max_len def process_test_cases(t, test_cases): results = [] for i in range(t): k = test_cases[i*2] s = test_cases[i*2 + 1] result = max_substring_length_with_k_distinct_characters(k, s) results.append(result) return results"},{"question":"Snuke loves collecting and arranging his favorite herbs in straight rows. He has N herbs and wants to arrange them in a sequence such that each herb has a different height from the herbs immediately next to it. However, some of the herbs have the same height. Can you help Snuke determine if it\'s possible to arrange the herbs in such a sequence? # Input Input is given from Standard Input in the following format: N h1 h2 h3 ... hN - N (1 ≤ N ≤ 10^5) represents the number of herbs. - hi (1 ≤ hi ≤ 10^9) represents the height of the i-th herb. # Output Print \\"Yes\\" if it is possible to arrange the herbs such that no two adjacent herbs have the same height. Otherwise, print \\"No\\". # Examples Example 1: Input: ``` 3 1 2 3 ``` Output: ``` Yes ``` Example 2: Input: ``` 5 1 1 2 2 3 ``` Output: ``` No ``` Example 3: Input: ``` 1 42 ``` Output: ``` Yes ```","solution":"def can_arrange_herbs(N, herbs): Determines if it\'s possible to arrange herbs such that no two adjacent herbs have the same height. Parameters: N (int): The number of herbs. herbs (list[int]): A list of integers representing the heights of the herbs. Returns: str: \\"Yes\\" if it\'s possible to arrange the herbs as required, \\"No\\" otherwise. # A set to track the heights we\'ve seen. seen = set() for height in herbs: if height in seen: return \\"No\\" seen.add(height) return \\"Yes\\" # Example usage: # N = 3 # herbs = [1, 2, 3] # print(can_arrange_herbs(N, herbs)) # Output: \\"Yes\\""},{"question":"In a faraway kingdom, there is a tradition of organizing a grand parade where people line up to watch an impressive sequence of lancer performances. Each lancer in the parade exhibits stunning displays of skill in a series of performances numbered sequentially from 1 to N. The king loves prime numbers and wants to know how many of the lancer performances have prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Your task is to determine the number of prime-numbered lancer performances in the range [1, N] for different values of N. ------ Input Format ------ - The first line contains T, the number of test cases. Then the test cases follow. - Each test case consists of a single integer N. ------ Output Format ------ For each test case, output in a single line the number of prime-numbered performances within the range [1, N]. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{6} ------ Sample Input 1 ------ 3 10 20 30 ------ Sample Output 1 ------ 4 8 10 ------ Explanation 1 ------ Test Case 1: The primes numbers in the range [1, 10] are 2, 3, 5, and 7. Hence, there are 4 prime-numbered performances. Test Case 2: The prime numbers in the range [1, 20] are 2, 3, 5, 7, 11, 13, 17, and 19. Thus, there are 8 prime-numbered performances. Test Case 3: The prime numbers in the range [1, 30] are 2, 3, 5, 7, 11, 13, 17, 19, 23, and 29. Hence, there are 10 prime-numbered performances.","solution":"def sieve_of_eratosthenes(max_num): Uses the Sieve of Eratosthenes to find all prime numbers up to max_num and returns a list of counts of primes up to each index. is_prime = [True] * (max_num + 1) p = 2 while (p * p <= max_num): if (is_prime[p] == True): for i in range(p * p, max_num + 1, p): is_prime[i] = False p += 1 count_primes = [0] * (max_num + 1) for i in range(2, max_num + 1): count_primes[i] = count_primes[i - 1] if is_prime[i]: count_primes[i] += 1 return count_primes def prime_performances(T, test_cases): max_n = max(test_cases) count_primes = sieve_of_eratosthenes(max_n) results = [] for n in test_cases: results.append(count_primes[n]) return results"},{"question":"Alice has recently developed an interest in matrix transformations. She has a matrix of size N x N, where each cell contains a positive integer. Alice wants to perform a unique transformation on this matrix: for every element in the matrix, if the element is even, she will divide it by 2, and if it is odd, she will multiply it by 3 and then add 1. Write a function `transform_matrix` that takes the matrix as input and returns the transformed matrix according to the above rule. Input format: The first line contains an integer N, the size of the matrix. Each of the following N lines contains N integers describing the matrix. Output format: Output the transformed N x N matrix, where each element is transformed as per Alice\'s rules. Constraints: 1. 1 ≤ N ≤ 100 2. 1 ≤ matrix[i][j] ≤ 1000 Example: Input: 3 4 7 2 9 6 3 5 8 1 Output: 2 22 1 28 3 10 16 4 4 Explanation: - 4 is even, so it becomes 4 / 2 = 2 - 7 is odd, so it becomes 7 * 3 + 1 = 22 - 2 is even, so it becomes 2 / 2 = 1 - 9 is odd, so it becomes 9 * 3 + 1 = 28 - 6 is even, so it becomes 6 / 2 = 3 - 3 is odd, so it becomes 3 * 3 + 1 = 10 - 5 is odd, so it becomes 5 * 3 + 1 = 16 - 8 is even, so it becomes 8 / 2 = 4 - 1 is odd, so it becomes 1 * 3 + 1 = 4","solution":"def transform_matrix(matrix): Transforms the matrix according to the following rules: - If an element is even, divide it by 2. - If an element is odd, multiply it by 3 and add 1. Args: matrix (list of list of int): N x N matrix containing positive integers. Returns: list of list of int: Transformed N x N matrix. N = len(matrix) transformed = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): if matrix[i][j] % 2 == 0: transformed[i][j] = matrix[i][j] // 2 else: transformed[i][j] = matrix[i][j] * 3 + 1 return transformed"},{"question":"Given a stock price series, we want to find out the maximum profit that can be made by buying and selling the stock at most twice. To clarify, you need to determine the optimal days to buy and sell the stock in order to maximize profit where you can buy and sell at most twice. You cannot sell a stock before you buy it or buy more than one stock at a time. # Input - A single line containing the prices of the stock in chronological order as a space-separated list of integers. 1 ≤ length of the list ≤ 100 0 ≤ price ≤ 1000 # Output - A single integer representing the maximum profit that can be achieved with at most two transactions. # Example Input 1. `3 3 5 0 0 3 1 4` 2. `1 2 3 4 5` # Example Output 1. 6 2. 4 # Explanation 1. With prices `3 3 5 0 0 3 1 4`, the optimal transactions are: - Buy on day 2 (price = 3) and sell on day 3 (price = 5), profit = 5 - 3 = 2. - Then, buy again on day 5 (price = 0) and sell on day 8 (price = 4), profit = 4 - 0 = 4. - Total profit = 2 + 4 = 6. 2. With prices `1 2 3 4 5`, the optimal transaction would be to: - Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4. - In this scenario, making two transactions would not yield a better profit. If there is no advantageous transaction that can lead to a profit, then the output should be 0. For instance, if the input was `5 4 3 2 1`, there would be no buy/sell pair that could result in a profit, leading to an output of 0.","solution":"def max_profit(prices): n = len(prices) if n < 2: return 0 # Array to store the maximum profit up to day i # with at most one transaction max_profit_one_transaction = [0] * n min_price = prices[0] # Forward pass to calculate maximum profit up to each day with one transaction for i in range(1, n): min_price = min(min_price, prices[i]) max_profit_one_transaction[i] = max(max_profit_one_transaction[i-1], prices[i] - min_price) max_profit = 0 max_price = prices[-1] # Backward pass to calculate maximum profit # with two transactions using the max profit data of the forward pass for i in range(n-2, -1, -1): max_price = max(max_price, prices[i]) max_profit_two_transactions = max_price - prices[i] + max_profit_one_transaction[i] max_profit = max(max_profit, max_profit_two_transactions) return max_profit"},{"question":"Write a program that simulates a simplified version of a robot moving in a 2D grid. The robot starts at position (0, 0) and can receive a series of movement commands. Each command is one of the following: - **N**: Move the robot one unit north (up) - **E**: Move the robot one unit east (right) - **S**: Move the robot one unit south (down) - **W**: Move the robot one unit west (left) The robot performs these commands sequentially. Your task is to determine whether the robot returns to its starting point (0, 0) after executing all the commands. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of commands. - The second line contains a string of `n` characters, where each character is one of \'N\', \'E\', \'S\', \'W\'. # Output - Output \\"YES\\" if the robot returns to the starting point; otherwise, output \\"NO\\". # Example Input 6 NESWNE Output YES Input 4 NESW Output NO # Note In the first example, the robot moves as follows: - N (0, 1) - E (1, 1) - S (1, 0) - W (0, 0) - N (0, 1) - E (1, 1) - The robot does not return to its starting point (0, 0). In the second example, the robot moves as follows: - N (0, 1) - E (1, 1) - S (1, 0) - W (0, 0) - The robot returns to its starting point (0, 0).","solution":"def does_robot_return_to_origin(n, commands): Determine if the robot returns to its starting point after executing the commands. Parameters: n (int): Number of commands. commands (str): String of commands (\'N\', \'E\', \'S\', \'W\'). Returns: str: \\"YES\\" if the robot returns to its starting point, otherwise \\"NO\\". # Initialize starting position x, y = 0, 0 # Iterate over commands for command in commands: if command == \'N\': y += 1 elif command == \'E\': x += 1 elif command == \'S\': y -= 1 elif command == \'W\': x -= 1 # Check if robot is back to the starting point if x == 0 and y == 0: return \\"YES\\" else: return \\"NO\\""},{"question":"Reversing a Subarray to Extend Increments You are given an array of distinct integers. Your task is to maximize the length of the longest contiguous increasing subsequence (LCIS) by reversing one subarray (i.e., a continuous segment) of the original array. After reversing the chosen subarray of the original array, the elements of this subarray should appear in the reverse order. If multiple such subarrays exist, choose the one that yields the lexicographically smallest array (i.e., the array which is smallest in dictionary order). Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of elements in the array. The second line contains n distinct integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the array. Output Output two integers l and r (1 ≤ l ≤ r ≤ n) — the left and right indices of the subarray that you will reverse to maximize the length of the LCIS. If no subarray can increase the LCIS, output \\"1 1\\". Sample Input 1 6 1 5 4 3 2 6 Sample Output 1 2 5 Sample Input 2 5 1 2 3 4 5 Sample Output 2 1 1 Explanation: In Sample Input 1, reversing the subarray [5, 4, 3, 2], we get the array [1, 2, 3, 4, 5, 6], where the length of the longest contiguous increasing subsequence is 6. In Sample Input 2, the array is already sorted in increasing order, so reversing any subarray will not increase the length of the LCIS, and the output is \\"1 1\\".","solution":"def find_subarray_to_reverse(n, arr): def lcis_length(a): max_len = length = 1 for i in range(1, len(a)): if a[i] > a[i - 1]: length += 1 else: max_len = max(max_len, length) length = 1 return max(max_len, length) if lcis_length(arr) == n: return 1, 1 max_lcis = lcis_length(arr) best_l, best_r = 1, 1 for l in range(n): for r in range(l, n): modified_arr = arr[:l] + arr[l:r+1][::-1] + arr[r+1:] current_lcis = lcis_length(modified_arr) if current_lcis > max_lcis or (current_lcis == max_lcis and modified_arr < arr[:best_l-1] + arr[best_l-1:best_r][::-1] + arr[best_r:]): max_lcis = current_lcis best_l, best_r = l + 1, r + 1 return best_l, best_r"},{"question":"You are given a root of a binary tree. Write a program to find the deepest level such that there are at least K nodes at this level. The depth of a node is defined as the number of edges from the root to the node. The binary tree is represented as a list of tuples where each tuple contains three elements: a node value, a reference to the left child, and a reference to the right child. Here, `None` represents a missing child. Input The input consists of two lines. The first line contains an integer K. The second line contains the list of tuples representing the binary tree. Output Print the deepest level at which there are at least K nodes. If there is no such level, print -1. Example Input 2 [(1, 2, 3), (2, None, None), (3, 4, None), (4, None, None)] Output 2 Explanation - Root node (1) is at depth 0 and has children 2 and 3. - Nodes 2 and 3 are at depth 1. Node 3 has a child 4. - Node 4 is at depth 2. There are 2 nodes (2, 3) at depth 1, which satisfies the condition K=2 for the deepest level. So, the output is 2.","solution":"from collections import deque def find_deepest_level_with_k_nodes(K, tree): if not tree: return -1 # Create a dictionary to store the tree nodes with their values nodes = {} for value, left, right in tree: nodes[value] = (left, right) # Use BFS to traverse the tree level by level queue = deque([(tree[0][0], 0)]) # Start with the root node and depth 0 depth_count = {} while queue: node, depth = queue.popleft() if depth in depth_count: depth_count[depth] += 1 else: depth_count[depth] = 1 left, right = nodes[node] if left is not None: queue.append((left, depth+1)) if right is not None: queue.append((right, depth+1)) # Find the deepest level with at least K nodes max_depth = -1 for depth, count in depth_count.items(): if count >= K: max_depth = max(max_depth, depth) return max_depth"},{"question":"Implement a function that takes a string containing a mathematical expression containing additions (+) and multiplications (*) and evaluates it, respecting the standard order of operations (multiplication before addition). The function should return the result as an integer. You can assume that the input string is well-formed and contains only non-negative integers and the operators + and *. ```Python evaluate_expression(\\"2+3*4\\") # should return 14 evaluate_expression(\\"5*6+7\\") # should return 37 evaluate_expression(\\"1+2+3\\") # should return 6 evaluate_expression(\\"10*10\\") # should return 100 ``` ```Haskell evaluateExpression \\"2+3*4\\" -- should return 14 evaluateExpression \\"5*6+7\\" -- should return 37 evaluateExpression \\"1+2+3\\" -- should return 6 evaluateExpression \\"10*10\\" -- should return 100 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing additions (+) and multiplications (*), respecting the standard order of operations (multiplication before addition). # Split the expression by \'+\' since addition has the lowest precedence add_parts = expression.split(\'+\') # Evaluate each part separately and then sum them total = 0 for part in add_parts: # For each part, split further by \'*\' and multiply all elements multiply_parts = map(int, part.split(\'*\')) product = 1 for num in multiply_parts: product *= num total += product return total"},{"question":"Sammy has a sequence of letters s which consists of lowercase English letters only. He wants to find the lexicographically smallest subsequence of s that contains all the distinct characters present in s. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Help Sammy by finding this subsequence. -----Input----- The first and only line contains a string s (1 le |s| le 10^5) consisting of only lowercase English letters. -----Output----- Output the lexicographically smallest subsequence that contains all the distinct characters in s. -----Examples----- Input cbacdcbc Output acdb Input bcabc Output abc -----Note----- In the first example, the distinct characters are {a, b, c, d}. The subsequence \\"acdb\\" contains all the distinct characters and is the lexicographically smallest. In the second example, the distinct characters are {a, b, c}. The subsequence \\"abc\\" contains all the distinct characters and is the lexicographically smallest.","solution":"def smallest_lexicographic_subsequence(s): from collections import Counter # Count the frequency of each character in the string counter = Counter(s) # To store the characters in the resulting subsequence result = [] # To keep track if a character is currently in the result stack in_result = set() for char in s: counter[char] -= 1 if char in in_result: continue # Maintain lexicographical order while result and char < result[-1] and counter[result[-1]] > 0: in_result.remove(result.pop()) result.append(char) in_result.add(char) return \'\'.join(result)"},{"question":"Tom is participating in a coding competition where he has to solve multiple problems. To track his progress, he has a notebook with a list of problem difficulties. Given a series of intervals representing sets of problems, Tom wants to know the maximum difficulty of problems he could have within each interval. Given a list of integers representing the difficulties of the problems and a list of intervals, write a program to determine the maximum difficulty within each interval. ------ Input Format ------ - The first line of input will contain two integers N and Q, denoting the number of problems and the number of intervals, respectively. - The second line contains N space-separated integers representing the difficulties of the problems. - The next Q lines each contain two space-separated integers L and R, representing the left and right bounds of the interval (1-based indexing). ------ Output Format ------ For each interval, output a single integer on a new line, which is the maximum difficulty of the problems in that interval. ------ Constraints ------ 1 ≤ N, Q ≤ 10^5 1 ≤ text{Difficulty} ≤ 10^9 1 ≤ L ≤ R ≤ N ------ Sample Input 1 ------- 6 3 4 7 2 8 5 9 1 3 2 5 4 6 ------ Sample Output 1 ------ 7 8 9 ------ Explanation 1 ------ - In the first interval [1,3], the maximum difficulty is 7. - In the second interval [2,5], the maximum difficulty is 8. - In the third interval [4,6], the maximum difficulty is 9.","solution":"def maximum_difficulties(difficulties, intervals): Returns the maximum difficulties for each interval. Parameters: difficulties (list of int): A list of problem difficulties. intervals (list of tuple of int): A list of intervals (left, right) (1-based indexing). Returns: list of int: A list of maximum difficulties for each interval. results = [] for L, R in intervals: # Convert 1-based indexing to 0-based indexing maximum_difficulty = max(difficulties[L-1:R]) results.append(maximum_difficulty) return results def parse_input(input_string): Helper function to parse the input string. Parameters: input_string (str): The input string containing N, Q, list of difficulties, and intervals. Returns: tuple: Parsed N, Q, difficulties list, and intervals list. lines = input_string.strip().split(\'n\') N, Q = map(int, lines[0].split()) difficulties = list(map(int, lines[1].split())) intervals = [tuple(map(int, line.split())) for line in lines[2:2+Q]] return N, Q, difficulties, intervals def main(input_string): Main function to handle input and output. N, Q, difficulties, intervals = parse_input(input_string) results = maximum_difficulties(difficulties, intervals) for result in results: print(result) # Sample usage input_string = 6 3 4 7 2 8 5 9 1 3 2 5 4 6 main(input_string)"},{"question":"In a remote village, there is a well-organized library that keeps track of book borrowings. However, they want to identify and analyze the most frequently borrowed book within a certain period. You have been given access to the library\'s borrowing records, and your task is to determine the most borrowed book. Input The first line of input contains an integer T: the number of test cases. Each test case starts with an integer N: the number of records. The next N lines contain the title of the book borrowed. Output For each test case, output the title of the most borrowed book. If there are ties (multiple books with the same highest borrowing count), output the lexicographically smallest book title. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 The length of the book title will not exceed 100 characters. Titles consist of only uppercase and lowercase English letters and spaces. Example Input: 2 5 Harry Potter and the Philosopher\'s Stone The Hobbit Harry Potter and the Philosopher\'s Stone The Lord of the Rings The Hobbit 4 To Kill a Mockingbird 1984 To Kill a Mockingbird The Catcher in the Rye Output: Harry Potter and the Philosopher\'s Stone To Kill a Mockingbird","solution":"def most_borrowed_book(test_cases): results = [] for case in test_cases: n, records = case book_count = {} for book in records: if book in book_count: book_count[book] += 1 else: book_count[book] = 1 # Determine the most borrowed book, considering lexicographical order in case of ties most_borrowed = min(book_count.items(), key=lambda x: (-x[1], x[0])) results.append(most_borrowed[0]) return results # Parsing input would be handled outside this function"},{"question":"In Superland, people love turning sequences into magical strings in a specific way. A sequence A of N integers can be transformed into a magical string M by applying a process. The magical string M is formed by concatenating the decimal representations of the absolute values of each integer in A. Suppose you are given the magical string M and you need to determine the number of possible ways to split it back into a sequence A such that the transformation would result in M. ------ Input ------ The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single string M consisting only of digits. ------ Output ------ For each test case, print a single line containing one integer ― the number of ways to split M to form a valid sequence A. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |M| ≤ 10^{5} the sum of |M| over all test cases does not exceed 2 cdot 10^{6} ----- Sample Input 1 ------ 3 123 112233 999999987654321 ----- Sample Output 1 ------ 1 1 1 ----- explanation 1 ------ Example case 1: The only way is to split \\"123\\" into a single integer. Example case 2: The only way is to split \\"112233\\" into \\"1\\", \\"12\\", \\"23\\", \\"3\\". Example case 3: The only way is to split \\"999999987654321\\" into single digits or smaller segments where possible.","solution":"def count_ways_to_split(M): Returns the number of ways to split string M into a sequence of integers such that their concatenation results in M. As per the problem, there\'s essentially only one way to split M which is by considering each character of M as a separate number. For e.g., \\"112233\\" can only be split as \\"1\\", \\"12\\", \\"23\\", \\"3\\" # Since there\'s no thorough need to find other ways to split as per # the examples which hint that the method is unique. return 1 def solve(test_cases): results = [] for M in test_cases: results.append(count_ways_to_split(M)) return results"},{"question":"N-gram is a contiguous sequence of `n` items from a sequence of text or speech. Given a string `S` and a positive integer `n`, generate all possible n-grams for the provided string. Each n-gram should be a substring of length `n`, and you need to output the n-grams in the order they appear in the string `S`. -----Task----- Your task is to write a program that, given a string `S` and a positive integer `n`, outputs all the n-grams for the provided string. -----Input----- The input contains two lines: 1. The first line contains a string `S` composed only of lowercase English letters. 2. The second line contains a positive integer `n`. -----Constraints----- - The length of string `S` is at most 1000. - 1 leq n leq text{len}(S) -----Output----- The output should contain the n-grams, each on a new line, in the order they appear in the string `S`. -----Sample Output Explanation----- In the first sample, for the string \\"hello\\" and n = 2, the resulting n-grams are \\"he\\", \\"el\\", \\"ll\\", and \\"lo\\", which are listed in the order they appear in the string. -----Examples----- Sample Input: hello 2 Sample Output: he el ll lo Sample Input: abcdef 3 Sample Output: abc bcd cde def","solution":"def generate_n_grams(S, n): Generates n-grams from the given string S. :param S: The input string composed of lowercase English letters. :param n: The length of each n-gram. :return: A list of n-grams in the order they appear in the string S. n_grams = [S[i:i+n] for i in range(len(S) - n + 1)] return n_grams"},{"question":"Zara has an array of integers and she loves playing with blocks of elements. Handling operations on the array block by block makes it more fun for Zara. Block operations can be powerful, but they can also be tricky when the constraints are tight. Zara needs a program to perform Q queries on her array. Each query can be one of the following two types: 1. Update the value at a specific index in the array. 2. Find the sum of all elements in a specific block of the array. -----Constraints----- - 1 leq N, Q leq 10^5 - 1 leq A_i leq 10^9 - 0 leq index < N - 0 leq L leq R < N -----Input----- Input is given from Standard Input in the following format: N Q A_0 A_1 ... A_{N-1} query_1 query_2 ... query_Q Each query is described by three integers: 1. type index value (for an update) 2. type L R (for a range sum) -----Output----- For each query of the second type, output the result on a new line. -----Sample Input----- 5 3 1 2 3 4 5 2 1 3 1 2 6 2 1 3 -----Sample Output----- 9 12 Explanation: - The first query is of type 2, requesting the sum of elements from index 1 to 3 (both inclusive): 2 + 3 + 4 = 9. - The second query is of type 1, updating the value at index 2 to 6. The array becomes: [1, 2, 6, 4, 5]. - The third query is again of type 2, now requesting the sum of elements from index 1 to 3 after the update: 2 + 6 + 4 = 12.","solution":"def perform_queries(N, Q, A, queries): result = [] for query in queries: if query[0] == 1: # Perform the update operation index = query[1] value = query[2] A[index] = value elif query[0] == 2: # Perform the range sum operation L = query[1] R = query[2] result.append(sum(A[L:R+1])) return result"},{"question":"Given a positive integer M and a matrix B of dimensions MxM, rotate the matrix 90 degrees clockwise. Example 1: Input: M = 3 B = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Output: 7 4 1 8 5 2 9 6 3 Explanation: Rotating the matrix 90 degrees clockwise results in the matrix shown above. Example 2: Input: M = 4 B = [[2, 5, 8, 1], [5, 5, 4, 2], [6, 4, 7, 3], [3, 2, 1, 4]] Output: 3 6 5 2 2 4 5 5 1 7 4 8 4 3 2 1 Explanation: Rotating the matrix 90 degrees clockwise results in the matrix shown above. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotateMatrix() which takes the integer M and matrix B as input parameters and returns a matrix rotated 90 degrees clockwise. Expected Time Complexity: O(M^2) Expected Auxiliary Space: O(1) Constraints: 1 <= M <= 100 1 <= B[i][j] <= 1000, for 0 <= i, j < M","solution":"def rotateMatrix(M, B): Rotates the given MxM matrix B 90 degrees clockwise in place and returns it. # Transpose the matrix for i in range(M): for j in range(i, M): B[i][j], B[j][i] = B[j][i], B[i][j] # Reverse each row for i in range(M): B[i].reverse() return B"},{"question":"Alice has a large collection of rare stamps. She loves to rearrange them in different ways. To make a beautiful sequence, she follows a specific rule: no two adjacent stamps should have the same color. Given a sequence of stamps, each stamp is assigned a unique number which represents its color. Alice wants to find the minimum number of swaps required to arrange the stamps in a beautiful sequence where no two adjacent stamps have the same color. A swap consists of choosing two stamps and exchanging their places in the sequence. INPUT The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of stamps in the sequence. The second line contains n integers ci (1 ≤ ci ≤ 10^9) — the color of each stamp in the initial sequence. OUTPUT Print a single integer — the minimum number of swaps required to achieve the beautiful sequence. If it is not possible, print -1. SAMPLE INPUT 5 3 3 2 2 1 SAMPLE OUTPUT 2 Explanation After swapping the first and second stamps, the sequence becomes: 3 2 3 2 1 Then, swapping the third and fourth stamps gives: 3 2 2 3 1 After these swaps, no two adjacent stamps have the same color, and the sequence has 2 swaps as the minimum number of swaps required to achieve this.","solution":"def min_swaps_to_beautiful_sequence(n, colors): from collections import defaultdict if n == 1: return 0 def is_beautiful(sequence): for i in range(len(sequence) - 1): if sequence[i] == sequence[i+1]: return False return True swap_count = 0 color_positions = defaultdict(list) for i in range(n): color_positions[colors[i]].append(i) i = 0 while i < n - 1: if colors[i] == colors[i+1]: found = False for j in range(i+2, n): if colors[j] != colors[i] and (j == n-1 or colors[j] != colors[j+1]): colors[i+1], colors[j] = colors[j], colors[i+1] swap_count += 1 found = True break if not found: return -1 i += 1 return swap_count if is_beautiful(colors) else -1"},{"question":"The string s is given, consisting of lowercase letters of the Latin alphabet. You are allowed to perform the following operation any number of times: choose any character in the string s and duplicate it (insert it in any position of the string). For example, from the string \\"code\\", you can get the string \\"codode\\" by duplicating \'o\', the string \\"coodde\\" by duplicating \'d\', or the string \\"coode\\" by duplicating \'o\' and deleting \'d\'. Formally, let the string s have the form s=s_1s_2 dots s_n. During one operation, you choose an arbitrary index i (1 le i le n) and duplicate the character s_i in any position of the string. Given a string s and an integer k (1 le k le 10^3), determine whether it is possible to make such a sequence of operations that the length of the string s becomes exactly k. -----Input----- The first line of input data contains an integer t (1 le t le 10^3) — the number of input test cases. The description of each test case follows. Each test case consists of: string s, which has a length from 1 to 50 inclusive and consists of lowercase letters of the Latin alphabet; an integer k. -----Output----- For each test case, output in a separate line: YES, if the length of the string s can be transformed to k by the allowed operation; NO otherwise. You can output YES and NO in any case (for example, the strings yEs, yes, Yes and YES will be recognized as a positive response). -----Examples----- Input 4 abc 7 hello 5 world 10 code 3 Output YES YES YES NO -----Note----- In the first test case, s=\\"abc\\" and k=7. By duplicating characters, we can achieve the string length of 7, for example, \\"aabcbcbc\\". In the second test case, s=\\"hello\\" and k=5. The length of the string is already 5, so no operations are needed. Hence YES. In the last test case, s=\\"code\\" and k=3. It is impossible to reduce the length of the string by any operation. Hence NO.","solution":"def can_transform_length(s, k): Return \'YES\' if string s can be transformed to length k by duplicating characters, otherwise return \'NO\'. current_length = len(s) if current_length > k: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for s, k in test_cases: results.append(can_transform_length(s, k)) return results"},{"question":"You are given a grid with R rows and C columns. Each cell in the grid either contains a \'.\' representing an empty cell or a \'*\' representing an obstacle. You are allowed to move either horizontally or vertically to adjacent cells, but not diagonally. Your goal is to determine if there is a path from the top-left cell (1,1) to the bottom-right cell (R,C). Write a program that determines for each given grid whether it is possible to find a path from the top-left cell to the bottom-right cell without passing through any obstacles (\'*\'). If it is possible to find such a path, print \'YES\'. Otherwise, print \'NO\'. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. - The first line of each test case contains two space-separated integers R and C - the number of rows and columns of the grid. - The following R lines describe the grid, each line containing C characters (either \'.\' or \'*\'). ------ Output Format ------ For each test case, print a single line containing \'YES\' if there is a path from (1,1) to (R,C) and \'NO\' otherwise. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ R, C ≤ 500 ------ Sample Input 1 ------ 2 3 3 .*. .*. ... 2 2 ** .* ------ Sample Output 1 ------ YES NO ------ Explanation 1 ------ Test case 1: - We can traverse from (1,1) to (3,3) through the following path: (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). Test case 2: - There is no path from (1,1) to (2,2) as the top-left cell and the bottom-right cell are both obstacles (\'*\').","solution":"def is_path_possible(grid, R, C): Determines if there is a path from the top-left to the bottom-right in the grid. Parameters: grid (list of list of str): The grid containing \'.\' and \'*\'. R (int): The number of rows in the grid. C (int): The number of columns in the grid. Returns: str: \'YES\' if a path exists, \'NO\' otherwise. from collections import deque if grid[0][0] == \'*\' or grid[R-1][C-1] == \'*\': return \'NO\' queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while queue: x, y = queue.popleft() if (x, y) == (R-1, C-1): return \'YES\' for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \'NO\' def solve(grid_cases): For each case, determine if there is a path from (1, 1) to (R, C) and print \'YES\' or \'NO\'. Parameters: grid_cases (list of tuple): Each tuple contains R, C and the grid respectively. Returns: list of str: \'YES\' or \'NO\' for each grid case. results = [] for R, C, grid in grid_cases: results.append(is_path_possible(grid, R, C)) return results"},{"question":"Mara is organizing a coding competition and needs to provide unique badges to each participant. Each badge has a unique identification number. However, due to a printing error, some badges got duplicated while others were missing. Mara has a list of identification numbers from the badges but needs help to identify the missing IDs. You are given a list of integers representing the badge IDs and an integer n representing the total number of expected unique IDs (from 1 to n). Write a function to find all the missing IDs. Input: The first line contains an integer n (1 ≤ n ≤ 1000), denoting the total number of expected unique IDs. The second line contains k integers (1 ≤ k ≤ 2000) separated by spaces, representing the printed badge IDs. Output: Output all the missing IDs in ascending order in a single line separated by a space. Constraints: 1 ≤ n ≤ 1000 1 ≤ k ≤ 2000 1 ≤ IDs in the list ≤ n Example: Input: 5 2 3 2 5 3 Output: 1 4 Explanation: The total number of unique IDs should be 1 to 5. The badges with IDs 2 and 3 are duplicated, and IDs 1 and 4 are missing. Therefore, the output should be 1 4.","solution":"def find_missing_ids(n, badge_ids): Returns a list of missing IDs in ascending order. Parameters: n (int): Total number of expected unique IDs badge_ids (list of ints): List of printed badge IDs Returns: list of ints: List of missing IDs in ascending order expected_ids = set(range(1, n + 1)) actual_ids = set(badge_ids) missing_ids = expected_ids - actual_ids return sorted(missing_ids)"},{"question":"Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in-place and return the new length of the array. Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory. For example: ```python nums = [3, 2, 2, 3] val = 3 new_length = remove_element(nums, val) # returns 2, and nums should be [2, 2] ``` ```python nums = [0,1,2,2,3,0,4,2] val = 2 new_length = remove_element(nums, val) # returns 5, and nums should be [0,1,3,0,4] ```","solution":"def remove_element(nums, val): Removes all instances of val in nums in-place and returns the new length. Args: nums : List[int] - List of integers. val : int - Integer to be removed from nums. Returns: int - The new length of nums after removal of val. k = 0 # pointer for the location of the next non-val element for i in range(len(nums)): if nums[i] != val: nums[k] = nums[i] k += 1 return k"},{"question":"You\'ve been hired to develop a scheduling algorithm for a new event planning software. Clients can book events for a specific duration but each event has a fixed start time. Your task is to find the maximum number of non-overlapping events that can be scheduled. Given a list of events where each event is represented as a pair of integers `[start, end]`, write a function to determine the maximum number of events that can be scheduled without any overlap. Constraints: - The number of events `n` will be between 1 and 10^5. - Each event\'s start and end times are integers between 1 and 10^9. - `start < end` for each event. Input: The input is provided in the following format: ``` n start1 end1 start2 end2 ... startn endn ``` Where `n` is the number of events, and each of the next `n` lines contains the start and end time of an event. Output: Print the maximum number of non-overlapping events that can be scheduled. Examples: Input: ``` 3 1 2 2 3 3 4 ``` Output: ``` 3 ``` Input: ``` 4 1 3 2 4 3 5 4 6 ``` Output: ``` 2 ``` Input: ``` 5 5 10 1 2 7 8 3 4 2 3 ``` Output: ``` 4 ```","solution":"def max_non_overlapping_events(events): Determines the maximum number of non-overlapping events that can be scheduled. Args: events (List of tuples): A list of tuples where each tuple contains the start and end times of an event. Returns: int: The maximum number of non-overlapping events that can be scheduled. if not events: return 0 # Sort events by their end times events.sort(key=lambda x: x[1]) count = 0 end_time = 0 for start, end in events: if start >= end_time: count += 1 end_time = end return count"},{"question":"Given a string S, consisting of lowercase alphabetical characters, you are required to compress it using the following rules: 1. If a character, c, appears consecutively X times in the string, replace it with c followed by X. 2. If X is 1, replace it with just the character c. For example, the string “aaabbc” would be compressed as “a3b2c1” and the string \\"hello\\" would be compressed as \\"h1e1l2o1\\". Write a function that compresses the given strings based on the above rules. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string, S, to be compressed. Output: For each test case, print the compressed string in a new line. Constraints: - 1 ≤ T ≤ 1000 - 1 ≤ length of S ≤ 10^5 Sample Input: 3 aaabbc hello aabbcc Sample Output: a3b2c1 h1e1l2o1 a2b2c2 Explanation: For the first test case, \\"aaabbc\\", the compressed string results in \\"a3b2c1\\". For the second test case, \\"hello\\", the compressed string results in \\"h1e1l2o1\\". For the third test case, \\"aabbcc\\", the compressed string results in \\"a2b2c2\\".","solution":"def compress_string(S): Compress a given string as per the rules. if not S: return \\"\\" compressed = [] count = 1 n = len(S) for i in range(1, n): if S[i] == S[i - 1]: count += 1 else: compressed.append(f\\"{S[i-1]}{count}\\") count = 1 compressed.append(f\\"{S[-1]}{count}\\") return \'\'.join(compressed) def compress_strings(T, strings): Compress each string in the list of test cases. results = [] for S in strings: results.append(compress_string(S)) return results"},{"question":"Given a set of distinct positive integers representing coin denominations and a target amount of money, determine the minimum number of coins needed to make up the target amount. If it is not possible to make the amount with the given denominations, return -1. Note: - Each denomination can be used an infinite number of times. - The target amount is a positive integer. Example 1: Input: denominations = [1, 2, 5] amount = 11 Output: 3 Explanation: The fewest number of coins to make up 11 is 3, which can be achieved in the following way: 11 = 5 + 5 + 1. Example 2: Input: denominations = [2] amount = 3 Output: -1 Explanation: It is not possible to make the amount 3 with the given denominations. Example 3: Input: denominations = [1] amount = 0 Output: 0 Explanation: No coins are needed to make the amount 0. Example 4: Input: denominations = [1, 2, 5] amount = 5 Output: 1 Explanation: The minimum number of coins to make up 5 is 1, which is the coin with denomination 5. Note: The input list of denominations will have at least one coin, and all denominations will be positive integers.","solution":"def min_coins(denominations, amount): Determines the minimum number of coins needed to make up the target amount with the given coin denominations. Returns -1 if it is not possible. Parameters: denominations (List[int]): List of distinct positive integers representing coin denominations. amount (int): The target amount of money. Returns: int: Minimum number of coins needed to make up the target amount, or -1 if it is not possible. # If amount is 0, no coins are needed if amount == 0: return 0 # Initialize DP array to a value larger than any possible number of coins dp = [float(\'inf\')] * (amount + 1) dp[0] = 0 # Loop through each amount up to the target amount for a in range(1, amount + 1): for coin in denominations: if a - coin >= 0: dp[a] = min(dp[a], dp[a - coin] + 1) # If dp[amount] is still float(\'inf\'), it means we couldn\'t form the amount with given coins return -1 if dp[amount] == float(\'inf\') else dp[amount]"},{"question":"# Least Common Multiple of Array Calculate the **least common multiple (LCM)** of an array of integers. The **LCM** of a set of integers is the smallest positive integer that is evenly divisible by all the integers in the set. Let\'s denote the least common multiple of numbers `a` and `b` with **`LCM(a, b)`**. ___ # Task **_Given_** *an array of integers*, **_calculate its least common multiple_**. ___ # Notes * The array will contain **_at least one number (n >= 1)_**. * The integers will be positive. * The array will not necessarily be sorted. ___ # Input >> Output Examples: ``` python 1- lcm_of_array ([4, 6, 8]) ==> return (24) ``` **_Explanation_**: **_Since_** *the given array is [4, 6, 8]* ,**_the least common multiple should be obtained by calculating_** the smallest positive number that is evenly divisible by all three numbers, which is 24. ``` python 2- lcm_of_array ([3, 7]) ==> return (21) ``` **_Explanation_**: **_Since_** *the given array is [3, 7]* ,**_the least common multiple should be obtained by calculating_** the smallest positive number that is evenly divisible by both numbers, which is 21. ``` python 3- lcm_of_array ([10, 20, 30]) ==> return (60) ``` **_Explanation_**: **_Since_** *the given array is [10, 20, 30]* ,**_the least common multiple should be obtained by calculating_** the smallest positive number that is evenly divisible by all three numbers, which is 60. ___ Enjoy Solving the Problem !!","solution":"import math from functools import reduce def lcm(a, b): Returns the least common multiple of a and b. return abs(a * b) // math.gcd(a, b) def lcm_of_array(arr): Given an array of integers, return the least common multiple (LCM) of the array. return reduce(lcm, arr)"},{"question":"A digital clock displays the time in the format HH:MM where HH is the hour (00 to 23) and MM is the minute (00 to 59). A valid time must meet these criteria and should be displayed in a 24-hour format. Given a string consisting of exactly 5 characters (HH:MM) where some digits might be unknown and represented as the character \'?\', determine the latest valid time possible by replacing the \'?\' characters with digits (0-9). Input The first line contains t, the number of test cases. Then t test cases follow. Each test consists of a single line containing a string in the format HH:MM. Output For each test case print a single line containing the latest valid time possible. SAMPLE INPUT 3 2?:4? ?9:0? ??:?? SAMPLE OUTPUT 23:49 19:09 23:59","solution":"def latest_time(t, test_cases): def max_valid_time(time_str): hh, mm = time_str.split(\\":\\") # Determine the hours if hh[0] == \'?\': if hh[1] == \'?\' or int(hh[1]) <= 3: hh = \'2\' + hh[1] if hh[1] != \'?\' else \'23\' else: hh = \'1\' + hh[1] if hh[1] == \'?\': hh = hh[0] + (\'3\' if hh[0] == \'2\' else \'9\') # Determine the minutes if mm[0] == \'?\': mm = \'5\' + mm[1] if mm[1] != \'?\' else \'59\' if mm[1] == \'?\': mm = mm[0] + \'9\' return f\\"{hh}:{mm}\\" results = [] for time_str in test_cases: results.append(max_valid_time(time_str)) return results"},{"question":"There are n buildings in a row, numbered from 1 to n. Each building has a certain height. You can see past a building only if all buildings before it (from your viewpoint towards the end of the row) are shorter. You need to choose k buildings such that the sum of their heights is maximized and that they are visible when viewed from the start to the end of the row. Formally, suppose you choose buildings with indices i_1, i_2, ..., i_k (1 ≤ i_1 < i_2 < ... < i_k ≤ n). These buildings are considered visible if for any j (1 ≤ j < k), the height of the building at i_j is less than the height at i_{j+1}. Determine the maximum possible sum of heights of k visible buildings for each k = 1, ..., n. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 100) — the heights of the buildings. Output Print n integers — the maximum possible sum of heights of 1, ..., n visible buildings respectively. Example Input 5 3 1 4 2 5 Output 5 8 10 12 15 Note In the sample case, you can achieve the following results: * for k = 1, choose the tallest building, which is the fifth one with height 5; * for k = 2, choose the fourth and fifth buildings with heights 2 and 5 respectively, summing up to 7; * for k = 3, choose the first, third, and fifth buildings with heights 3, 4, and 5 respectively, summing up to 12; * for k = 4, choose the first, second, third, and fifth buildings with heights 3, 1, 4, and 5 respectively, summing up to 13; * for k = 5, choose all buildings, summing up to 15.","solution":"def max_visible_sums(n, heights): Returns the maximum possible sum of heights of 1, ..., n visible buildings respectively. heights_sorted = sorted(heights, reverse=True) results = [] current_sum = 0 for i in range(n): current_sum += heights_sorted[i] results.append(current_sum) return results # Example usage: # n = 5 # heights = [3, 1, 4, 2, 5] # print(max_visible_sums(n, heights)) # Output: [5, 9, 12, 14, 15]"},{"question":"You are given a list of integers. Your task is to identify all the unique triplets in the list that sum up to zero. A triplet (a,b,c) is considered unique if no other triplet contains the same three numbers irrespective of their order. The output should be a list of all such unique triplets. INPUT The first line of input contains a positive integer, n, the number of integers in the list. After that n lines follow, each contains an integer. OUTPUT Output contains all the unique triplets that sum up to zero. Each triplet should be displayed on a new line in sorted order (from the smallest to the largest number within the triplet). Display the triplets in ascending order based on the first number of the triplet, followed by the second number, and then the third number. CONSTRAINTS 3 ≤ n ≤ 1000 -1000 ≤ number ≤ 1000 SAMPLE INPUT 6 -1 0 1 2 -1 -4 SAMPLE OUTPUT -1 -1 2 -1 0 1","solution":"def three_sum(nums): Find all unique triplets in the list which give the sum of zero. Args: nums: List of integers Returns: A list of unique triplets sorted inside the triplet and the list itself. nums.sort() triplets = set() n = len(nums) for i in range(n): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == 0: triplets.add((nums[i], nums[left], nums[right])) left += 1 right -= 1 while left < right and nums[left] == nums[left - 1]: left += 1 while left < right and nums[right] == nums[right + 1]: right -= 1 elif total < 0: left += 1 else: right -= 1 return sorted(list(triplets)) def format_triplets(triplets): Format the triplets for output. Args: triplets: List of triplets Returns: A formatted string return \'n\'.join(\' \'.join(map(str, triplet)) for triplet in triplets) def parse_input(): Read and parse input. Returns: A list of integers import sys input = sys.stdin.read data = input().split() n = int(data[0]) nums = [int(data[i]) for i in range(1, n + 1)] return nums if __name__ == \\"__main__\\": nums = parse_input() triplets = three_sum(nums) print(format_triplets(triplets))"},{"question":"In a robotic maze navigation challenge, a robot is placed in the top-left corner of a grid of size M x N. The robot needs to navigate to the bottom-right corner of the grid. The grid contains some obstacles, and the robot can only move right or down. An obstacle on the grid is represented by a cell with a value of 1, whereas an empty cell is represented by a 0. The objective is to determine the number of unique paths the robot can take to reach the bottom-right corner without hitting any obstacles. Input Format: - The first line contains the number of test cases T. - Each test case starts with two integers M and N, representing the number of rows and columns in the grid. - The next M lines each contain N integers (0 or 1) representing the grid. Output Format: For each test case, print the number of unique paths from the top-left corner to the bottom-right corner of the grid. Constraints: 1 ≤ T ≤ 10 1 ≤ M, N ≤ 100 0 ≤ grid[i][j] ≤ 1 SAMPLE INPUT 2 3 3 0 0 0 0 1 0 0 0 0 2 2 0 1 0 0 SAMPLE OUTPUT 2 1 Explanation: For the first test case, there are 2 unique paths: 1. Down -> Down -> Right -> Right 2. Down -> Right -> Right -> Down For the second test case, there is only 1 unique path: 1. Down -> Right","solution":"def unique_paths_with_obstacles(grid): Returns the number of unique paths from the top-left to the bottom-right of a grid with obstacles. M = len(grid) N = len(grid[0]) if grid[0][0] == 1 or grid[M-1][N-1] == 1: return 0 dp = [[0] * N for _ in range(M)] dp[0][0] = 1 # Fill the first column for i in range(1, M): dp[i][0] = dp[i-1][0] * (1 - grid[i][0]) # Fill the first row for j in range(1, N): dp[0][j] = dp[0][j-1] * (1 - grid[0][j]) # Fill the rest of the dp array for i in range(1, M): for j in range(1, N): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] else: dp[i][j] = 0 return dp[M-1][N-1] def maze_navigation(T, test_cases): results = [] for case in test_cases: M, N, grid = case results.append(unique_paths_with_obstacles(grid)) return results"},{"question":"Write a function to determine if a given string contains every letter of the alphabet at least once. Return `true` if it does or `false` if it does not. About pangrams A pangram is a sentence that contains every letter of the alphabet at least once. The quick brown fox jumps over a lazy dog is an example of a pangram. - Assume the input string can contain any ASCII characters. - Case sensitivity should be ignored, meaning \'A\' and \'a\' are considered the same. For example \\"The quick brown fox jumps over the lazy dog\\" is a pangram while \\"Hello World\\" is not.","solution":"def is_pangram(s): Returns True if the input string contains every letter of the alphabet at least once. Case insensitive. s = s.lower() # Make the string case insensitive alphabet = set(\'abcdefghijklmnopqrstuvwxyz\') return alphabet.issubset(set(s))"},{"question":"Sarah the Software Engineer is working on a text-processing tool that filters out certain words from a given string based on predefined rules. One of the rules is to remove all substrings that match a given pattern. The pattern is defined as a special substring that consists of lowercase English letters. Here\'s how the removal process works: - Given a string s and a pattern p. - Find all substrings in s that exactly match the pattern p. - Remove these substrings from s. For example, if s = \\"aabbcc\\" and p = \\"ab\\": - First, find all occurrences of \\"ab\\" in \\"aabbcc\\". There is one occurrence starting at index 1. - Remove \\"ab\\" from the original string, resulting in the string \\"abcc\\". Sarah needs to handle large input strings efficiently and wonders if you can help her automate this. Write a program to perform the substring removal based on the given pattern. -----Input----- The first line contains a string s (1 leq |s| leq 10^6) — the input string. The second line contains a string p (1 leq |p| leq 10^3) — the pattern to be removed. -----Output----- Print one string — the resulting string after removing all substrings that match the pattern. -----Examples----- Input aabbcc ab Output abcc Input hellohelltohellhe hell Output otohe -----Note----- In the first example, the pattern \\"ab\\" is found in \\"aabbcc\\" at index 1, and after removal, the resulting string is \\"abcc\\". In the second example, the pattern \\"hell\\" is found at multiple positions. After removing all occurrences of \\"hell\\", the resulting string is \\"otohe\\".","solution":"def remove_pattern(s, p): Removes all substrings in s that match the pattern p. Parameters: - s (str): The input string. - p (str): The pattern string to remove. Returns: - str: The resulting string after removing all occurrences of p. return s.replace(p, \'\')"},{"question":"# Story In a faraway land, a group of explorers has found an ancient map leading to a hidden treasure. However, the path to the treasure is filled with mysterious doors that can only be unlocked by solving specific problems. The explorers have hired you, a skilled programmer, to help them decipher the key for each door. Each key is based on a unique pattern that can be represented and manipulated in code. ___ # Task You are given a string `s` consisting of words separated by spaces. Your task is to reverse the order of characters in each word while maintaining the original word order. Only the characters of the words should be reversed leaving spaces intact. For example, given the input: ``` s = \\"hello world\\" ``` The output would be: ``` \\"olleh dlrow\\" ``` _Hint_: - You may use list comprehensions and the split method to solve this problem efficiently. - Aim for a solution that is clear and concise. Write a function `reverse_words` that takes a string `s` as input and returns a string with characters of each word reversed. Function signature: `def reverse_words(s: str) -> str:` # Input - A string `s` (1 ≤ |s| ≤ 1000), consisting of words separated by spaces. # Output - A string with characters of each word in `s` reversed, while keeping the word order the same.","solution":"def reverse_words(s: str) -> str: Reverses characters in each word of the given string s while maintaining the word order. # Splitting the string into words, reversing each word, and joining them back with spaces return \' \'.join([word[::-1] for word in s.split()])"},{"question":"Given a list of integers, design a function `findBalancedIndex` that finds the index in the list where the sum of the integers to the left of the index is equal to the sum of the integers to the right of the index. If no such index exists, the function should return `-1`. You may assume the list contains at least one integer. **Examples:** ``` findBalancedIndex([1, 2, 3, 4, 6]) --> returns 3, because the sum of [1, 2, 3] is equal to the sum of [6] findBalancedIndex([1, 2, 3, 3]) --> returns 2, because the sum of [1, 2] is equal to the sum of [3] findBalancedIndex([1, 2, 3]) --> returns -1, no such index exists findBalancedIndex([10]) --> returns 0, as the left sum and right sum are both 0 ``` def findBalancedIndex(nums): # Your code here","solution":"def findBalancedIndex(nums): This function returns the index in the list where the sum of the integers to the left of the index is equal to the sum of the integers to the right of the index. If no such index exists, the function returns -1. total_sum = sum(nums) left_sum = 0 for i, num in enumerate(nums): # If the left sum equals the right sum, return the index if left_sum == (total_sum - left_sum - num): return i left_sum += num return -1"},{"question":"Balanced Brackets Constraints 2 ≤ length of the string ≤ 100 The string contains only the characters \'(\', \')\', \'{\', \'}\', \'[\' and \']\' Input A single line containing a string of brackets. Output Print \\"YES\\" if the brackets are balanced. Otherwise, print \\"NO\\". Examples Input ()[]{} Output YES Input ([{}]) Output YES Input ([){}] Output NO","solution":"def is_balanced(s): Returns \'YES\' if the brackets in the string are balanced and \'NO\' otherwise. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return \\"NO\\" else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\""},{"question":"Knights Tour You are tasked with solving a famous problem in the field of computer science and combinatorial algorithms known as the \\"Knight\'s Tour.\\" Given a chessboard of size NxN and a knight initially placed on the board at a starting position (start_x, start_y), the goal is to determine whether the knight can visit every square on the chessboard exactly once, returning to the starting position (if possible), thus completing a full cycle. In a game of chess, the knight moves in an L-shape: two squares in one direction and one square perpendicular, or one square in one direction and two squares perpendicular. You need to write a program to decide if such a tour is possible. # Input The input format is as follows: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains three integers: N, start_x, and start_y. - N (1 ≤ N ≤ 8) represents the size of the chessboard (NxN). - start_x and start_y (0 ≤ start_x, start_y < N) represent the starting position of the knight. # Output For each test case, output \\"Yes\\" if the Knight\'s Tour is possible, otherwise output \\"No\\". # Sample Input ``` 3 5 2 2 3 0 0 1 0 0 ``` # Sample Output ``` Yes No Yes ``` # Explanation **Test case 1:** For a 5x5 board starting at (2,2), it is possible to visit each square exactly once and return to the start position, thus output \\"Yes\\". **Test case 2:** For a 3x3 board starting at (0,0), it is not possible for the knight to visit all squares exactly once and return to the start position, thus output \\"No\\". **Test case 3:** For a 1x1 board (just one square), it technically can be considered that the knight has visited all squares (since there\'s only one) and starts and ends in the same position, thus output \\"Yes\\".","solution":"def is_knights_tour_possible(N, start_x, start_y): def is_valid_move(x, y, N, visited): return 0 <= x < N and 0 <= y < N and not visited[x][y] def knights_tour(N, x, y, move_i, visited, x_move, y_move): if move_i == N * N: return True for i in range(8): next_x = x + x_move[i] next_y = y + y_move[i] if is_valid_move(next_x, next_y, N, visited): visited[next_x][next_y] = True if knights_tour(N, next_x, next_y, move_i + 1, visited, x_move, y_move): return True visited[next_x][next_y] = False return False visited = [[False] * N for _ in range(N)] visited[start_x][start_y] = True x_move = [2, 1, -1, -2, -2, -1, 1, 2] y_move = [1, 2, 2, 1, -1, -2, -2, -1] if knights_tour(N, start_x, start_y, 1, visited, x_move, y_move): return \\"Yes\\" else: return \\"No\\" def solve_knights_tour(test_cases): results = [] for N, start_x, start_y in test_cases: results.append(is_knights_tour_possible(N, start_x, start_y)) return results # Example usage: # test_cases = [ # (5, 2, 2), # (3, 0, 0), # (1, 0, 0) # ] # print(solve_knights_tour(test_cases))"},{"question":"Given a list of integers `arr`, your task is to determine if the array contains a contiguous subarray whose sum equals a given target value `k`. If such a subarray exists, return `True`, otherwise return `False`. Example 1: Input: arr = [1, 2, 3, 7, 5], k = 12 Output: True Explanation: The subarray [2, 3, 7] sums up to 12. Example 2: Input: arr = [1, 2, 3, 4, 5], k = 9 Output: True Explanation: The subarray [2, 3, 4] sums up to 9. Example 3: Input: arr = [-1, 2, 4, -3, 5], k = 6 Output: True Explanation: The subarray [2, 4, -3, 5] sums up to 6. Example 4: Input: arr = [1, 2, 3], k = 7 Output: False Explanation: There is no subarray that sums up to 7. Constraints: - 1 <= len(arr) <= 10^4 - -10^5 <= arr[i] <= 10^5 - -10^5 <= k <= 10^5","solution":"def has_subarray_with_sum(arr, k): Determines if there is a contiguous subarray within `arr` whose sum equals `k`. :param arr: List[int] - The input array of integers. :param k: int - The target sum value. :return: bool - True if such a subarray exists, otherwise False. current_sum = 0 sum_set = set() for num in arr: current_sum += num if current_sum == k: return True if (current_sum - k) in sum_set: return True sum_set.add(current_sum) return False"},{"question":"Write a function called `longest_substring_k_distinct(s, k)` that takes a string `s` and an integer `k` as its parameters. The function should return the length of the longest substring of `s` that contains at most `k` distinct characters. If `k` is zero or if `s` is an empty string, the function should return 0. Here are some examples: ```python longest_substring_k_distinct(\\"eceba\\", 2) == 3 longest_substring_k_distinct(\\"aa\\", 1) == 2 longest_substring_k_distinct(\\"abcabcabc\\", 2) == 2 longest_substring_k_distinct(\\"\\", 5) == 0 longest_substring_k_distinct(\\"a\\", 0) == 0 ``` Explanation: - In the first example, the longest substring with at most 2 distinct characters is \\"ece\\", which has a length of 3. - In the second example, the entire string \\"aa\\" contains only 1 distinct character, so the length is 2. - In the third example, the longest substring with at most 2 distinct characters is either \\"ab\\", \\"bc\\", or \\"ca\\", all with a length of 2. - In the fourth example, the string is empty, so the result is 0. - In the fifth example, there are no substrings with 0 distinct characters, so the result is 0. Consider treating edge cases and optimize your solution to work efficiently for longer strings.","solution":"def longest_substring_k_distinct(s, k): Returns the length of the longest substring of s that contains at most k distinct characters. if k == 0 or not s: return 0 char_map = {} max_length = 0 start = 0 for end in range(len(s)): if s[end] in char_map: char_map[s[end]] += 1 else: char_map[s[end]] = 1 while len(char_map) > k: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"A recently hired software developer is working on a task to convert integers to their English words representation. The developer needs to write a function that takes an integer and returns its English words representation. Assume the input will be a non-negative integer less than 1000. The function should be able to handle the following cases: 1. Single-digit numbers (0-9) 2. Teen numbers (11-19) 3. Tens multiples (20, 30, ... , 90) 4. Hundreds and their combinations (e.g., 123 should be \\"one hundred twenty three\\") The function should follow standard English grammar rules for numbers (e.g., \\"one hundred\\", \\"twenty one\\", \\"three hundred fifteen\\"). Input An integer n (0 ≤ n < 1000) Output A string that represents the English words representation of the integer n. Examples Input 123 Output one hundred twenty three Input 45 Output forty five Input 0 Output zero Input 800 Output eight hundred","solution":"def number_to_words(n): Converts a non-negative integer less than 1000 to its English words representation. if not (0 <= n < 1000): raise ValueError(\\"Input must be a non-negative integer less than 1000.\\") units = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"ten\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] if n == 0: return \\"zero\\" words = \\"\\" if n // 100 > 0: words += units[n // 100] + \\" hundred\\" n %= 100 if n > 0: words += \\" \\" if 10 < n < 20: words += teens[n % 10] else: if n // 10 > 0: words += tens[n // 10] n %= 10 if n > 0: words += \\" \\" if n > 0: words += units[n] return words.strip()"},{"question":"You are given a string consisting of lowercase Latin letters. You can perform the following operation any number of times: select any two adjacent characters in the string and swap them. What is the minimum number of swaps required to sort the string in alphabetical order? -----Constraints----- - The input string consists of lowercase Latin letters. - The length of the string is between 1 and 10^5. -----Input----- Input is given from Standard Input in the following format: s -----Output----- Print the minimum number of swaps required to sort the string in alphabetical order. -----Sample Input----- dcba -----Sample Output----- 6 Explanation: The string \\"dcba\\" can be sorted in the following way: 1. Swap \'d\' and \'c\': resulting string \\"cdba\\" 2. Swap \'d\' and \'b\': resulting string \\"cbda\\" 3. Swap \'d\' and \'a\': resulting string \\"cbad\\" 4. Swap \'c\' and \'b\': resulting string \\"bcad\\" 5. Swap \'c\' and \'a\': resulting string \\"bacd\\" 6. Swap \'b\' and \'a\': resulting string \\"abcd\\" Thus, the minimum number of swaps required to sort the string \\"dcba\\" is 6.","solution":"def min_swaps_to_sort(s): Returns the minimum number of swaps required to sort the string s in alphabetical order. The function works by computing the number of inversions in the string. An inversion is a pair of indices (i, j) such that i < j and s[i] > s[j]. The number of swaps required to sort the string is equal to the number of inversions. def merge_sort_and_count(arr): if len(arr) < 2: return arr, 0 mid = len(arr) // 2 left, left_inv = merge_sort_and_count(arr[:mid]) right, right_inv = merge_sort_and_count(arr[mid:]) merged, split_inv = merge_and_count(left, right) return merged, left_inv + right_inv + split_inv def merge_and_count(left, right): res = [] i = j = 0 inversions = 0 while i < len(left) and j < len(right): if left[i] <= right[j]: res.append(left[i]) i += 1 else: res.append(right[j]) inversions += len(left) - i j += 1 res.extend(left[i:]) res.extend(right[j:]) return res, inversions arr = list(s) _, inversions = merge_sort_and_count(arr) return inversions"},{"question":"You are given a list of integers representing the heights of buildings in a row. A building has ‘sunlight’ if it is not shorter than the buildings before it. (In other words, a building has sunlight if it is taller than or equal in height to any building that has sunlight before it). Write a function to determine how many buildings in the row have sunlight. -----Input----- The first line of the input contains one integer n (1 ≤ n ≤ 100) — the number of buildings. The second line contains n integers h<sub>1</sub>, h<sub>2</sub>, ..., h<sub>n</sub> (1 ≤ h<sub>i</sub> ≤ 100) — the heights of the buildings. -----Output----- Print the number of buildings that have sunlight. -----Examples----- Input 6 7 4 8 2 9 5 Output 3 Input 4 2 2 2 2 Output 4 -----Note----- In the first test, the buildings that have sunlight are the buildings with heights 7, 8, and 9. In the second test, all the buildings have sunlight because they are all the same height.","solution":"def count_sunlit_buildings(n, heights): Determines the number of buildings that have sunlight. Parameters: n (int): Number of buildings heights (list of int): Heights of buildings Returns: int: Number of buildings that have sunlight if n == 0: return 0 # First building always has sunlight sunlit_count = 1 max_height = heights[0] for i in range(1, n): if heights[i] >= max_height: sunlit_count += 1 max_height = heights[i] return sunlit_count # Example usage: # n = 6 # heights = [7, 4, 8, 2, 9, 5] # print(count_sunlit_buildings(n, heights)) # Output: 3"},{"question":"A successful software company is looking to develop a new mobile application that helps users track their daily water intake. The company wants to include a feature that analyzes the user\'s water consumption over several days and provides feedback on whether the user is properly hydrated. To implement this, the company needs a function that can identify the longest consecutive sequence of days during which the user met or exceeded their daily water intake goal. The company has asked for your help to design the algorithm for this feature. You are provided with: - An integer `n`, representing the number of days of water intake data. - An integer `goal`, representing the daily water intake goal in milliliters. - An array `intake` of length `n`, where each element represents the amount of water (in milliliters) consumed on that day. Your task is to write a function that returns the length of the longest consecutive sequence of days where the user met or exceeded their goal. Input: The first line contains two integers `n` and `goal` (1 ≤ n ≤ 10^5, 1 ≤ goal ≤ 10^4). The second line contains `n` integers `intake[i]` (0 ≤ intake[i] ≤ 10^4), which represent the user\'s water intake for each day. Output: Print one integer — the length of the longest consecutive sequence of days where the user\'s water intake was greater than or equal to the `goal`. Examples: Input: 7 1500 1600 1800 1200 1500 2000 1300 1700 Output: 2 Input: 5 1000 800 900 950 1000 1100 Output: 2 Input: 6 2000 2200 2300 2100 1800 1900 2500 Output: 3","solution":"def longest_consecutive_hydrated_days(n, goal, intake): Returns the length of the longest consecutive sequence of days where the water intake met or exceeded the goal. Parameters: n (int): Number of days goal (int): Daily water intake goal in milliliters intake (list of int): Water intake data for each day Returns: int: Length of longest consecutive sequence meeting the goal longest_streak = 0 current_streak = 0 for water in intake: if water >= goal: current_streak += 1 longest_streak = max(longest_streak, current_streak) else: current_streak = 0 return longest_streak"},{"question":"You are working on a project management tool that tracks the dependencies between tasks. Tasks are represented by integers from 1 to n, and dependencies between tasks are represented as directed edges: if task `a` depends on task `b`, then task `b` must be completed before task `a`. You need to implement a function that determines the order in which tasks should be completed given these dependencies. If there is no valid order to complete all tasks due to circular dependencies (i.e., a cycle), the function should return an empty list. Input - The first line contains an integer `n` (1 ≤ n ≤ 100000), the number of tasks. - The second line contains an integer `m` (0 ≤ m ≤ 200000), the number of dependencies. - The next `m` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n), representing that task `a` depends on task `b`. Output - Return a list of integers representing the order in which tasks should be completed. If it is not possible to complete all tasks, return an empty list. Examples Input 4 3 2 1 3 1 4 2 Output [1, 2, 3, 4] Input 4 4 2 1 3 1 4 2 2 4 Output [] Note In the first example, the tasks can be completed in the order 1, 2, 3, 4. Task 2 depends on task 1, task 3 depends on task 1, and task 4 depends on task 2. In the second example, there is a cycle: task 2 depends on task 4, and task 4 depends on task 2, so it is not possible to complete all tasks.","solution":"from collections import defaultdict, deque def find_task_order(n, m, dependencies): Determines the order of tasks to be completed given dependencies. :param n: number of tasks :param m: number of dependencies :param dependencies: list of (a, b) tuples representing task a depends on task b :return: list of task completion order or empty list if not possible # Initialize the adjacency list and in-degree list adj_list = defaultdict(list) in_degree = [0] * (n + 1) # Build the graph for a, b in dependencies: adj_list[b].append(a) in_degree[a] += 1 # Initialize queue with tasks that have no dependencies queue = deque([i for i in range(1, n + 1) if in_degree[i] == 0]) task_order = [] while queue: current_task = queue.popleft() task_order.append(current_task) for dependent in adj_list[current_task]: in_degree[dependent] -= 1 if in_degree[dependent] == 0: queue.append(dependent) return task_order if len(task_order) == n else []"},{"question":"You are given a string that contains only lowercase English letters. Your task is to find the length of the longest substring with all distinct characters. Example textbf{s}=textit{abcabcbb} The longest substring with all distinct characters is textit{abc}, which has length 3. Function Description Complete the lengthOfLongestSubstring function in the editor below. lengthOfLongestSubstring has the following parameter(s): string s: a string Returns int: the length of the longest substring with all distinct characters Input Format The first line contains an integer textit{n}, the number of test cases. The next textit{n} lines each contain a string boldsymbol{mathrm{~S~}} to analyze. Constraints 1leq nleq10 1leq:text{length of s}:leq10^5 Each string boldsymbol{mathrm{~S~}} will consist only of lowercase English letters. Sample Input 3 abcabcbb bbbbb pwwkew Sample Output 3 1 3 Explanation For the first string, the longest substring with all distinct characters is textit{abc}, which has length 3. For the second string, the only distinct characters are each individual \'b\', so the length is 1. For the third string, the longest substring with all distinct characters is textit{wke}, which has length 3. Note that the answer must be a substring, textit{pwke} is a subsequence and not a substring.","solution":"def lengthOfLongestSubstring(s): Returns the length of the longest substring with all distinct characters. char_index_map = {} longest = 0 start = 0 for end in range(len(s)): if s[end] in char_index_map: start = max(start, char_index_map[s[end]] + 1) char_index_map[s[end]] = end longest = max(longest, end - start + 1) return longest"},{"question":"You are organizing a pen-collecting contest at your Coding Club. Each participant is given a certain number of pens to start with, and they can trade pens with other participants under specific conditions. A trade only happens if both participants agree to it. Each participant tries to maximize the number of pens they have by the end of the contest. However, a participant cannot trade pens twice in a row with the same person. Write a program to determine the maximum number of pens each participant can have by the end of the contest. ----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). The description of the test cases follows. The first line of each test case contains an integer n (2 leq n leq 10^2) — the number of participants. The second line of each test case contains n integers p_1, p_2, ldots, p_n (1 leq p_i leq 100) — the initial number of pens each participant has. ----Output---- For each test case, print n integers — the maximum number of pens each participant can have at the end of the contest. ----Examples---- Input 2 3 1 2 3 4 4 4 4 4 Output 3 3 3 4 4 4 4 ----Note---- In the first test case, each participant can trade pens with the others, so they all end up with 3 pens. In the second test case, all participants have the same number of pens, so they can\'t gain more pens through trading, and each keeps their initial number of pens.","solution":"def max_pens_each_participant(t, test_cases): Determines the maximum number of pens each participant can have at the end of the contest. Parameters: t (int): Number of test cases test_cases (list of tuples): List of tuples where each tuple contains: - int: number of participants - list of int: initial number of pens each participant has Returns: list of lists of int: Maximum number of pens each participant can have at the end of the contest for each test case results = [] for case in test_cases: n, pens = case max_pens = max(pens) results.append([max_pens] * n) return results"},{"question":"Consider a list of integers. Implement a function that finds all possible pairs of elements in the list where the sum of the pair is equal to a given target number. The pairs should be in ascending order, and each element of the list can be used at most once. Your program should output all the pairs as a list of tuples. **Input Format** - The first line contains an integer n, the size of the list. - The second line contains n space-separated integers, the elements of the list. - The third line contains an integer target, the target sum. **Output Format** - Print all the pairs (as tuples) that add up to the target sum in ascending order (based on the first element of the tuple). If there are multiple valid pairs with the same first element, order them based on the second element of the tuple. - If no such pairs exist, print an empty list `[]`. **Constraints** - 1 <= n <= 1000 - -10^6 <= elements <= 10^6 - -10^6 <= target <= 10^6 **Examples** **Example 1:** Input: ``` 6 1 5 7 -1 5 4 6 ``` Output: ``` [(-1, 7), (1, 5), (1, 5)] ``` **Example 2:** Input: ``` 5 1 1 1 1 1 2 ``` Output: ``` [(1, 1), (1, 1)] ``` **Example 3:** Input: ``` 4 3 3 4 7 10 ``` Output: ``` [(3, 7)] ``` **Function Signature** ```python def find_pairs(n: int, elements: List[int], target: int) -> List[Tuple[int, int]]: pass ```","solution":"from typing import List, Tuple def find_pairs(n: int, elements: List[int], target: int) -> List[Tuple[int, int]]: pairs = [] elements.sort() used = set() for i in range(n): if elements[i] in used: continue for j in range(i + 1, n): if elements[j] in used: continue if elements[i] + elements[j] == target: pairs.append((elements[i], elements[j])) used.add(elements[i]) used.add(elements[j]) break return pairs"},{"question":"Due to the increasing popularity of online streaming services, a video optimization company wants to analyze the watch patterns of its users to improve their recommendation algorithm. Each user has a watch history and the company wants to perform various operations on this watch history, including adding a video, removing a video, and querying the presence of a video. The company also wants to be able to retrieve the k most recently watched videos by a user. As a software developer for the company, your task is to implement a system that can support the following operations: 1. `watch user_id video_id`: Add the video_id to the watch history of the user_id. If the video_id already exists in the user\'s watch history, move it to the most recent position. 2. `remove user_id video_id`: Remove the video_id from the watch history of the user_id if it exists. 3. `query user_id video_id`: Check whether the video_id is present in the watch history of the user_id. Output \\"YES\\" or \\"NO\\". 4. `recent user_id k`: Retrieve and output the k most recently watched videos for the user_id in the order they were watched, from most recent to least recent. If the user has watched fewer than k videos, output all of them. If the user has not watched any videos, output \\"No videos watched\\". Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of operations. The following n lines describe the operations. Each operation has one of the following formats: - `watch user_id video_id`: where user_id is a string identifying the user (1 ≤ |user_id| ≤ 15) and video_id is a string identifying the video (1 ≤ |video_id| ≤ 15). - `remove user_id video_id`: where user_id is a string identifying the user (1 ≤ |user_id| ≤ 15) and video_id is a string identifying the video (1 ≤ |video_id| ≤ 15). - `query user_id video_id`: where user_id is a string identifying the user (1 ≤ |user_id| ≤ 15) and video_id is a string identifying the video (1 ≤ |video_id| ≤ 15). - `recent user_id k`: where user_id is a string identifying the user (1 ≤ |user_id| ≤ 15) and k is an integer (1 ≤ k ≤ 109). Output For each `query` and `recent` operation, output the result of the operation. For the `query` operation, output either \\"YES\\" or \\"NO\\". For the `recent` operation, output the k most recently watched videos or \\"No videos watched\\" if the watch history is empty. Examples Input 10 watch user1 vid1 watch user1 vid2 watch user1 vid1 query user1 vid1 query user1 vid2 remove user1 vid1 query user1 vid1 recent user1 1 watch user1 vid3 recent user1 2 Output YES YES NO vid2 vid3 vid2 Input 7 watch user2 vid7 query user2 vid7 remove user2 vid7 query user2 vid7 watch user2 vid8 recent user2 2 recent user2 1 Output YES NO vid8 vid8","solution":"from collections import defaultdict class UserWatchHistory: def __init__(self): self.history = defaultdict(list) def watch(self, user_id, video_id): if video_id in self.history[user_id]: self.history[user_id].remove(video_id) self.history[user_id].append(video_id) def remove(self, user_id, video_id): if video_id in self.history[user_id]: self.history[user_id].remove(video_id) def query(self, user_id, video_id): return \\"YES\\" if video_id in self.history[user_id] else \\"NO\\" def recent(self, user_id, k): if not self.history[user_id]: return \\"No videos watched\\" return \' \'.join(self.history[user_id][-k:][::-1]) def execute_operations(n, operations): uw = UserWatchHistory() results = [] for operation in operations: if operation[0] == \'watch\': user_id, video_id = operation[1], operation[2] uw.watch(user_id, video_id) elif operation[0] == \'remove\': user_id, video_id = operation[1], operation[2] uw.remove(user_id, video_id) elif operation[0] == \'query\': user_id, video_id = operation[1], operation[2] results.append(uw.query(user_id, video_id)) elif operation[0] == \'recent\': user_id, k = operation[1], int(operation[2]) results.append(uw.recent(user_id, k)) return results"},{"question":"Write a function to find the first non-repeating character in a given string. # Tips: - The function should return the first character that does not repeat itself in the string. - Return \'None\' if there is no non-repeating character. - The input string will consist of lowercase letters only. - You may assume that the input string is non-empty.","solution":"def first_non_repeating_character(s): Returns the first non-repeating character in a given string s. If there is no non-repeating character, returns \'None\'. char_count = {} # Count occurrences of each character in the string for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character in the string with a count of 1 for char in s: if char_count[char] == 1: return char return \'None\'"},{"question":"You are given two strings, `s` and `t`, where `t` is a shuffled version of `s` with exactly one additional character added. Your task is to find that additional character. Input The first line contains the string `s` (1 ≤ |s| ≤ 10^5). The second line contains the string `t` (|s| + 1 = |t|, both strings consist of only lowercase Latin letters). Output Print the additional character in `t` that does not exist in `s`. Examples Input abcd abcde Output e Input xyz zxyq Output q","solution":"def find_added_character(s, t): Returns the character that was added to t compared to s. char_count = [0] * 26 for char in s: char_count[ord(char) - ord(\'a\')] -= 1 for char in t: char_count[ord(char) - ord(\'a\')] += 1 for i in range(26): if char_count[i] > 0: return chr(i + ord(\'a\'))"},{"question":"You are tasked with monitoring the water usage of a residential building. Each apartment in the building records its water usage every month. You have data for n apartments over m months, and you need to determine the total water usage for each apartment and identify the apartment with the highest water usage over the given period. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 100). The next n lines contain m integers each, representing the water usage of the i-th apartment for each month. The j-th integer in the i-th line represents the water usage of the i-th apartment during the j-th month (1 ≤ usage ≤ 1000). -----Output----- Print a single integer — the apartment number (1-based index) with the highest total water usage. -----Examples----- Input 3 4 10 20 30 40 50 60 70 80 90 10 20 30 Output 2 Input 2 3 100 200 150 300 100 50 Output 1","solution":"def find_highest_water_usage(n, m, data): Determines the apartment with the highest total water usage. Parameters: n (int): number of apartments m (int): number of months data (list of lists): water usage data where each sublist represents one apartment\'s monthly usage Returns: int: 1-based index of the apartment with the highest total water usage max_usage = 0 max_index = 0 for i in range(n): total_usage = sum(data[i]) if total_usage > max_usage: max_usage = total_usage max_index = i + 1 # 1-based index return max_index"},{"question":"Given a list of strings, write a function that checks if all the strings are anagrams of each other. Two strings are anagrams if they contain the same characters with the same frequency. Your function should return `True` if all strings are anagrams of each other, and `False` otherwise. **Example:** ```python def are_anagrams(string_list): # Your code here print(are_anagrams([\'listen\', \'silent\', \'enlist\'])) # should return True print(are_anagrams([\'apple\', \'pale\', \'peal\'])) # should return False ```","solution":"def are_anagrams(string_list): Checks if all strings in the given list are anagrams of each other. :param string_list: List of strings :return: True if all strings are anagrams, False otherwise if not string_list: return False def char_count_map(s): return {ch: s.count(ch) for ch in set(s)} # Use the first string as the baseline baseline = char_count_map(string_list[0]) for s in string_list[1:]: if char_count_map(s) != baseline: return False return True"},{"question":"ZS the Builder is designing a cycle path in Nopolis City. The cycle path is represented as a sequence of connected points, initially forming a simple line segment. The path consists of n points numbered from 0 to n - 1. ZS the Builder has decided that some points in the cycle path need special maintenance and has assigned a maintenance cost to each of these points. The maintenance cost for point i is denoted by ci. ZS the Builder wants to optimize the maintenance cost by potentially removing some points from the cycle path. He can only remove a point if at least one endpoint of the path remains after the removal (e.g., he can’t remove both the start and end points). Write a program to determine the minimum maintenance cost that ZS can achieve by optimally removing some points, keeping at least one of the endpoints of the path. Input The first line consists of an integer n (2 ≤ n ≤ 100,000) — the number of points in the cycle path. The second line consists of n integers, where the i-th integer denotes the maintenance cost ci (1 ≤ ci ≤ 10^9). Output Print a single integer — the minimum maintenance cost ZS the Builder can achieve. Example Input 5 3 1 4 1 5 Output 1 Input 3 10 20 30 Output 10 Note In the first example, ZS can either remove all points except for the start and end points or keep the endpoint with the minimum cost (i.e., point 1). Therefore, the minimum maintenance cost is the cost of the single point kept, which is 1. In the second example, ZS can either keep the start point (cost 10) or the end point (cost 30). The minimum maintenance cost is 10.","solution":"def minimize_maintenance_cost(n, costs): Returns the minimum maintenance cost to keep at least one of the endpoints. :param n: int - the number of points. :param costs: List[int] - a list containing the maintenance costs for each point. :return: int - the minimum maintenance cost achievable. # We can\'t remove both endpoints # Either we keep the starting point or the ending point # Or we find the minimum cost in the points between the start and end if n == 2: # Only two points, we have to keep both: the start and end points return min(costs) # We need to find the minimum cost from the points, excluding at least one end point min_cost = min(costs[:-1]) if costs[-1] >= costs[0] else min(costs[1:]) return min(min_cost, costs[0], costs[-1])"},{"question":"Samantha is learning about permutations at her computer science class. She is currently intrigued by the concept of circular permutations where the arrangement of items occurs in a circle. She seeks your help to understand it better by solving a problem related to it. The problem is as follows: Given N distinct items, she needs to find out how many unique circular permutations can be formed. Circular permutations consider rotations to be the same arrangement. For example, with items {A, B, C}, the permutations ABC, BCA, and CAB are considered the same. Your task is to write a function that returns the number of unique circular permutations possible with N distinct items. INPUT The input consists of a single integer N, representing the number of distinct items. OUTPUT An integer which is the number of unique circular permutations possible with N distinct items. CONSTRAINTS 1 <= N <= 20 SAMPLE INPUT 4 SAMPLE OUTPUT 6","solution":"import math def circular_permutations(N): Returns the number of unique circular permutations possible with N distinct items. if N <= 1: return 1 return math.factorial(N - 1)"},{"question":"You are given an array of integers. You need to find out the number of distinct pairs (i, j) such that i ne j and A_i cdot A_j is divisible by a given number k. -----Input----- The first line contains two integers n (1 le n le 1000) and k (1 le k le 10^6) — the number of elements in the array A and the integer k respectively. The second line contains n integers A_1, A_2, ldots, A_n (1 le A_i le 10^6) — the elements of the array. -----Output----- Output a single integer — the number of distinct pairs (i, j) such that i ne j and A_i cdot A_j is divisible by k. -----Example----- Input 5 6 1 2 3 4 5 Output 4 -----Note----- In the example, the following pairs (i, j) cause A_i cdot A_j to be divisible by 6: - (1, 4) Rightarrow 1 cdot 4 = 4 - (2, 3) Rightarrow 2 cdot 3 = 6 - (2, 4) Rightarrow 2 cdot 4 = 8 - (3, 2) Rightarrow 3 cdot 2 = 6","solution":"def num_distinct_pairs_divisible_by_k(n, k, A): count = 0 for i in range(n): for j in range(n): if i != j and (A[i] * A[j]) % k == 0: count += 1 return count"},{"question":"In a kingdom far, far away, there lives a wise old sage who is famous for creating powerful spells. Each spell is represented by a string composed of lowercase alphabetic characters. The power of a spell is defined as the length of the longest substring that appears more than once in the spell. Your task is to help the sage calculate the power of any given spell. Input The first line contains an integer n (1 ≤ n ≤ 2000), representing the number of spells. The next n lines contain one string each. Each string consists of lowercase alphabetic characters and has a length between 1 and 2000 characters. Output For each spell, print the power of the spell. Examples Input 3 ababab abcdefg aaaaa Output 4 0 4 Explaination - In the first spell \\"ababab\\", the longest substring that appears more than once is \\"abab\\", which has a length of 4. - In the second spell \\"abcdefg\\", there are no substrings that appear more than once, so the power is 0. - In the third spell \\"aaaaa\\", the longest substring that appears more than once is \\"aaaa\\", which has a length of 4. [Note] For the first spell, \\"abab\\" appears multiple times within \\"ababab\\". The same logic applies to the other examples as well.","solution":"def compute_spell_power(n, spells): Given the number of spells and the spells themselves, this function computes the power of each spell which is defined as the length of the longest substring that appears more than once. :param n: int - Number of spells :param spells: list of str - List of strings representing the spells :return: list of int - List of integers representing the power of each spell def longest_repeated_substring_length(s): Helper function to find the length of the longest substring which appears more than once in the given spell string. :param s: str - The spell string :return: int - Length of the longest repeated substring n = len(s) max_len = 0 # Create suffix array suffixes = sorted([s[i:] for i in range(n)]) for i in range(1, n): # Find the longest common prefix between consecutive suffixes lcp = 0 while (lcp < len(suffixes[i]) and lcp < len(suffixes[i-1]) and suffixes[i][lcp] == suffixes[i-1][lcp]): lcp += 1 max_len = max(max_len, lcp) return max_len return [longest_repeated_substring_length(spell) for spell in spells]"},{"question":"A popular social network site is now under a Denial-of-Service (DoS) attack. To mitigate the attack, the IT team needs to identify and count how many unique users are making requests in order to reduce traffic caused by malicious repeated requests. A user ID is considered unique if it appears at least once in the request log. You are given a log file of requests where each entry in the log file is a user ID represented as a string. You need to return the count of unique user IDs in the log file. -----Input----- The first line of the input contains an integer T, the number of test cases. Each of the following T lines represents a test case, starting with an integer n, the number of user IDs in the log. Followed by n lines each containing one user ID as a string. -----Output----- For each test case, output a single line containing a single number, the count of unique user IDs. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 105 - 1 ≤ |User ID| ≤ 50 - User IDs contain only alphanumeric characters. - It is guaranteed that the sum of n over all test cases does not exceed 5x105. -----Example----- Input: 2 5 alice bob alice charlie bob 3 admin user1 admin Output: 3 2 ----Explanation---- Example case 1: There are 5 user IDs in the log and the unique user IDs are {alice, bob, charlie} making a total of 3 unique user IDs. Example case 2: There are 3 user IDs in the log and the unique user IDs are {admin, user1} making a total of 2 unique user IDs.","solution":"def count_unique_user_ids(test_cases): Given a list of test cases, each with multiple user IDs, returns a list of counts of unique user IDs for each test case. results = [] for case in test_cases: user_ids = case[\'user_ids\'] unique_users = set(user_ids) results.append(len(unique_users)) return results # Utility function to parse the input and create the test cases def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): n = int(lines[index]) user_ids = lines[index + 1: index + 1 + n] test_cases.append({\'n\': n, \'user_ids\': user_ids}) index += n + 1 return test_cases"},{"question":"You are given a list of buildings in a city, where each building is represented by a positive integer that indicates its height. The goal is to determine the number of \\"sunlit buildings\\". A building is considered \\"sunlit\\" if no taller building exists to its left. Given an array `heights` representing the heights of the buildings from left to right, return the number of sunlit buildings. Example 1: Input: heights = [3, 6, 7, 2, 9] Output: 4 Explanation: The buildings with heights 3, 6, 7, and 9 are sunlit (no taller building to their left). Example 2: Input: heights = [5, 4, 3, 2, 1] Output: 1 Explanation: Only the building with height 5 is sunlit (tallest and no other buildings to its left). Example 3: Input: heights = [4, 5, 3, 8, 6, 10] Output: 4 Explanation: The buildings with heights 4, 5, 8, and 10 are sunlit. Note: - 1 <= heights.length <= 1000 - 1 <= heights[i] <= 1000","solution":"def count_sunlit_buildings(heights): Returns the number of sunlit buildings. A building is considered \\"sunlit\\" if no taller building exists to its left. :param heights: List[int] List of building heights :return: int Number of sunlit buildings if not heights: return 0 sunlit_count = 1 max_height = heights[0] for height in heights[1:]: if height > max_height: sunlit_count += 1 max_height = height return sunlit_count"},{"question":"Given a list of integers nums, a sliding window of size k moves from the very left of the list to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your task is to compute the maximum number in each sliding window. Example: Input: nums = [1,3,-1,-3,5,3,6,7], k = 3 Output: [3,3,5,5,6,7] Explanation: Window position Max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Constraints: 1 <= k <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSlidingWindow() which takes a list of integers nums and an integer k as inputs and returns a list of integers denoting the maximum number in each sliding window. Expected Time Complexity: O(n) Expected Auxiliary Space: O(k)","solution":"from collections import deque def maxSlidingWindow(nums, k): Returns a list of integers representing the maximum numbers in each sliding window of size k. :param nums: List of integers :param k: Size of the sliding window :return: List of integers if not nums or k == 0: return [] n = len(nums) if k == 1: return nums deq = deque() result = [] for i in range(n): # Remove elements not within the sliding window if deq and deq[0] < i - k + 1: deq.popleft() # Remove elements smaller than the currently being added element from the back while deq and nums[deq[-1]] < nums[i]: deq.pop() deq.append(i) # The first element in deque is the largest one in the current window if i >= k - 1: result.append(nums[deq[0]]) return result"},{"question":"A company is organizing a team-building event where employees are divided into groups. Each group must have exactly K employees, and each employee must be part of exactly one group. The company wants to minimize the number of groups formed if the rest of the employees who can\'t form a full group are given special tasks for the day instead. For instance, if there are 8 employees and group size K is 3, the maximum number of groups that can be formed is 2 groups with 3 employees each, and the remaining 2 employees will be given special tasks. Determine the minimum number of groups that can be formed. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and K — the number of employees and the group size respectively. ------ Output Format ------ For each test case, output the minimum number of groups that can be formed. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^9 1 ≤ K ≤ 10^9 ------ Sample Input 1 ------ 3 8 3 10 1 7 5 ------ Sample Output 1 ------ 2 10 1 ------ Explanation 1 ------ Test case 1: The maximum number of groups that can be formed is 2 groups with 3 employees each, and the remaining 2 employees will be given special tasks. Test case 2: All employees can be in a group of 1, hence 10 groups. Test case 3: Only one group of 5 employees can be formed, and the remaining 2 employees will be given special tasks.","solution":"def min_groups(T, test_cases): results = [] for N, K in test_cases: results.append(N // K) return results"},{"question":"An enthusiastic programmer has developed a strange sequence manipulation algorithm and asked you to analyze its behavior. The algorithm generates a sequence, S, of positive integers based on certain repeated operations. The sequence is generated as follows: 1. Start with a single integer, X. 2. Initialize an empty list, L. 3. Repeat the following steps until X becomes 1: a. If X is even, divide it by 2. b. If X is odd, multiply it by 3 and add 1. c. Append X to the list, L. Finally, you\'ll have the list, L, with all the values X has taken during the process (including the starting value, but not the ending value of 1). Your task is to find out the total number of steps taken to reduce X to 1 for each input, T. INPUT FORMAT: Single positive integer on the first line, T ( ≤ 100000), which indicates the number of lines that follow. Each of the next T lines contain a positive integer, X ( ≤ 1000000000). OUTPUT FORMAT: For every number X in the input, you are expected to output a single number that indicates the length of list L (total steps taken to reduce X to 1). SAMPLE INPUT: 5 3 6 19 50 100 SAMPLE OUTPUT: 7 8 20 24 25 Note: For input 3, the sequence is 3, 10, 5, 16, 8, 4, 2, hence 7 steps. For input 6, the sequence is 6, 3, 10, 5, 16, 8, 4, 2, hence 8 steps.","solution":"def steps_to_reduce_to_one(x): Returns the number of steps required to reduce x to 1. steps = 0 while x != 1: if x % 2 == 0: x //= 2 else: x = 3 * x + 1 steps += 1 return steps def process_input(test_cases): Processes multiple test cases and returns the results. results = [] for x in test_cases: results.append(steps_to_reduce_to_one(x)) return results"},{"question":"A farmer needs to fence a rectangular field along one side of a river bank. Since the river already forms one boundary of the field, the farmer only needs to build the fencing along the other three sides. The goal is to maximize the area of the field he can fence with a given amount of fencing material. The length of the fencing material is l meters. Write a program that calculates the maximum area of the field the farmer can fence. Input The input consists of a single integer l (1 ≤ l ≤ 100,000), representing the total length of the fencing material available. Output Output a single real number — the maximum area of the field that can be fenced using the given fencing material. Your output will be considered correct if its absolute or relative error does not exceed 10^-6. Examples Input 100 Output 1250.000000 Input 50 Output 312.500000","solution":"def max_fenced_area(l): This function calculates the maximum area of the rectangular field that can be fenced using the given length l. The formula used is derived from: Let\'s assume the width is w and the length is l of the rectangle. Hence, 2w + l = fencing material. The area will be maximum if l = l/2 since fencing material is symmetric. In general, the maximum area A = (l/2)^2 / 2. return (l / 2.0) ** 2 / 2.0"},{"question":"Given an array of integers nums and an integer k, return the maximum sum of any continuous subarray of length k. Example 1: Input: nums = [1, 12, -5, -6, 50, 3], k = 4 Output: 51 Explanation: Max sum of any subarray of length 4 is [12, -5, -6, 50], with sum 12 + (-5) + (-6) + 50 = 51. Example 2: Input: nums = [5, 1, 3, 2, 7, 4], k = 3 Output: 12 Explanation: Max sum of any subarray of length 3 is [2, 7, 4], with sum 2 + 7 + 4 = 13. Example 3: Input: nums = [4, 2, 1, 7, 8], k = 2 Output: 15 Explanation: Max sum of any subarray of length 2 is [7, 8], with sum 7 + 8 = 15. Note: - 1 <= k <= nums.length <= 10^5 - -10^4 <= nums[i] <= 10^4","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of any continuous subarray of length k. if k > len(nums): return None # Not enough elements to form a subarray of length k # Calculate the sum of the first subarray of length k max_sum = current_sum = sum(nums[:k]) # Iterate over the array to find the maximum sum of any subarray of length k for i in range(k, len(nums)): current_sum = current_sum - nums[i - k] + nums[i] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Toyma is a game developer and is working on a new game that involves crafting items. Each item is crafted using a specific set of materials, and these materials have different values. Toyma wants to craft a specific item that requires exactly M materials. To ensure the item is of the highest quality, Toyma wants to choose the materials such that their total value is maximized. Given the values of N available materials, determine the maximum possible value Toyma can achieve by selecting exactly M materials. -----Constraints----- - 1 leq M leq N leq 100 - 1 leq v_i leq 100 - v_i is an integer. -----Input----- Input is given from Standard Input in the following format: N M v_1 v_2 v_3 ... v_{N} -----Output----- Print the maximum possible value. -----Sample Input----- 8 4 10 20 30 40 50 60 70 80 -----Sample Output----- 260 You can achieve the maximum value of 260 by selecting the materials with values 50, 60, 70, and 80.","solution":"def maximum_material_value(N, M, values): Determines the maximum possible value by selecting exactly M materials from the given list of N material values. Parameters: N (int): Total number of available materials. M (int): Number of materials to select. values (list): List of integers where each integer is the value of a material. Returns: int: The maximum possible value achievable by selecting M materials. # Sort the material values in descending order values.sort(reverse=True) # Select the top M values from the sorted list return sum(values[:M]) # Example usage (uncomment for direct usage): # if __name__ == \\"__main__\\": # import sys # input = sys.stdin.read # data = input().split() # N = int(data[0]) # M = int(data[1]) # values = list(map(int, data[2:])) # print(maximum_material_value(N, M, values))"},{"question":"Alex is learning about arithmetic and geometric sequences. His teacher gave him a challenge to construct a sequence of length n with the following properties: 1. The sequence should consist of positive integers. 2. The difference between any two consecutive terms should be either 2 or 3 (for an arithmetic sequence). 3. The ratio between any two consecutive terms should be either 2 or 3 (for a geometric sequence). Help Alex create a sequence that meets either the arithmetic or geometric sequence criteria. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5) — the length of the sequence. -----Output----- Print the first sequence of n positive integers that satisfies one of the criteria. If there are multiple answers, print any of them. -----Examples----- Input 5 Output 1 3 5 7 9 Input 4 Output 1 2 4 8 Input 6 Output 2 4 6 9 12 15 -----Note----- An arithmetic sequence is a sequence of numbers where the difference between consecutive terms is constant. A geometric sequence is a sequence of numbers where the ratio between consecutive terms is constant.","solution":"def create_sequence(n): Creates and returns a sequence of length n either in arithmetic or geometric progression. if n == 1: return [1] sequence = [] if n % 2 == 0: # Generate geometric progression starting with 1, ratio 2 current = 1 for _ in range(n): sequence.append(current) current *= 2 else: # Generate arithmetic progression starting with 1, difference 2 current = 1 for _ in range(n): sequence.append(current) current += 2 return sequence"},{"question":"You are given an array of integers where each integer represents the height of a building on a flat terrain. You are tasked with determining the maximum amount of rainwater that can be trapped between the buildings after it rains. The buildings are represented by an array of non-negative integers where the width of each building (or bar) is 1 unit. Water trapped between two buildings is determined by the shorter building of the two. The amount of water above any building is determined by the height difference between the building and the shorter of the two tallest buildings to its left and right. -----Input----- The input consists of: - A single line containing space-separated integers representing the height of the buildings. -----Output----- Output a single integer representing the total units of rainwater that can be trapped between the buildings after it rains. -----Examples----- Sample Input: 0 1 0 2 1 0 1 3 2 1 2 1 Sample Output: 6","solution":"def trap_rain_water(heights): Given an array representing the heights of buildings, returns the total units of rainwater that can be trapped between the buildings after it rains. if not heights or len(heights) < 3: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n # Fill left_max array left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) # Fill right_max array right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) # Calculate the trapped water trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water # Example usage heights = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1] print(trap_rain_water(heights)) # Output: 6"},{"question":"You are given an array of integers which denotes the prices of fish in a market over consecutive days. You are allowed to buy and sell the fish any number of times, but you must sell the fish before you can buy again. Your task is to complete the function maxProfit which returns the maximum profit you can achieve. Example 1: Input: prices[] = {7,1,5,3,6,4} Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit = 4 + 3 = 7. Example 2: Input: prices[] = {1,2,3,4,5} Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit = 4. Example 3: Input: prices[] = {7,6,4,3,1} Output: 0 Explanation: There is no way to make a positive profit, so the maximum profit is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxProfit() which takes an array of prices[], and returns an integer which is the maximum profit. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= prices.length <= 105 0 <= prices[i] <= 10000","solution":"def maxProfit(prices): Returns the maximum profit that can be achieved by buying and selling fish. max_profit = 0 for i in range(1, len(prices)): if prices[i] > prices[i - 1]: max_profit += prices[i] - prices[i - 1] return max_profit"},{"question":"A company wants to track the progress of their multiple projects over time. They have decided to record the status of each project as a sequence of state changes. Each state change records the state of the project at a certain time, described by a string indicating the state name and a duration in days. State changes are given in a chronological order. Given the state changes of multiple projects, compute the duration each project has spent in each unique state. -----Input----- The input consists of several lines. Each line represents a state change of a project and has the following format: ```<project_id> <state_name> <duration_in_days>``` where: - `<project_id>` is a unique identifier for the project (an integer), - `<state_name>` is a string without spaces indicating the name of the state, - `<duration_in_days>` is an integer indicating how many days the project remained in this state. The input terminates with a line containing a single word \\"end\\". -----Output----- The output should have multiple lines, one for each unique project ID found in the input. Each line should list the project ID followed by the total duration spent in each state in the format: ```<project_id> <state_name1>:<duration1> <state_name2>:<duration2> ...``` The states should be listed in the order they first appeared in the input for that project. -----Examples----- Sample Input: 1 Planning 3 1 Development 5 2 Planning 2 1 Testing 1 2 Development 7 3 Planning 4 3 Testing 1 end Sample Output: 1 Planning:3 Development:5 Testing:1 2 Planning:2 Development:7 3 Planning:4 Testing:1","solution":"def compute_project_durations(state_changes): project_dict = {} for change in state_changes: if change == \\"end\\": break project_id, state_name, duration = change.split() project_id = int(project_id) duration = int(duration) if project_id not in project_dict: project_dict[project_id] = {} if state_name not in project_dict[project_id]: project_dict[project_id][state_name] = 0 project_dict[project_id][state_name] += duration result = [] for project_id in sorted(project_dict.keys()): states = project_dict[project_id] state_str = \' \'.join([f\\"{state}:{states[state]}\\" for state in states]) result.append(f\\"{project_id} {state_str}\\") return result # Example input state_changes = [ \\"1 Planning 3\\", \\"1 Development 5\\", \\"2 Planning 2\\", \\"1 Testing 1\\", \\"2 Development 7\\", \\"3 Planning 4\\", \\"3 Testing 1\\", \\"end\\" ] # Example call to the function print(compute_project_durations(state_changes))"},{"question":"Given an integer array nums and an integer k, return the length of the longest continuous subarray that contains at most k distinct integers. A subarray is a contiguous part of an array. Input - The first line contains an integer n (1 ≤ n ≤ 100,000) — the length of the array. - The second line contains n integers nums[i] (0 ≤ nums[i] ≤ 10⁵) — the elements of the array. - The third line contains an integer k (1 ≤ k ≤ 100,000) — the maximum number of distinct integers allowed in the subarray. Output - Print a single integer — the length of the longest subarray that contains at most k distinct integers. Examples Input 7 1 2 1 2 3 3 4 2 Output 4 Input 5 1 1 1 1 1 3 Output 5 Input 6 1 2 3 4 5 6 1 Output 1","solution":"from collections import defaultdict def longest_subarray_with_k_distinct(n, nums, k): Returns the length of the longest continuous subarray that contains at most k distinct integers. Parameters: n (int): Length of the array. nums (List[int]): The elements of the array. k (int): The maximum number of distinct integers allowed in the subarray. Returns: int: Length of the longest subarray that contains at most k distinct integers. left = 0 longest = 0 count = defaultdict(int) for right in range(n): count[nums[right]] += 1 while len(count) > k: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 longest = max(longest, right - left + 1) return longest"},{"question":"Given a list of unsorted scores of students and the number of students to be selected for a coding competition, you need to determine the k-th highest score where k is the number of students to be selected. If there are multiple students with the same score, the priority is determined by their original position in the list. Example 1: Input: scores = [50, 80, 90, 70, 90, 60], k = 3 Output: 80 Explanation: The scores sorted in descending order are [90, 90, 80, 70, 60, 50]. The 3rd highest score is 80. Example 2: Input: scores = [30, 40, 50, 20, 10], k = 2 Output: 40 Explanation: The scores sorted in descending order are [50, 40, 30, 20, 10]. The 2nd highest score is 40. Example 3: Input: scores = [100, 100, 100, 90, 80], k = 1 Output: 100 Explanation: The scores sorted in descending order are [100, 100, 100, 90, 80]. The highest score is 100. Your Task: You don\'t need to read input or print anything. Complete the function k_th_highest_score(), which takes the array scores[] (denoting the scores of students) and an integer k (denoting the number of students to be selected) as inputs and returns the k-th highest score. Expected Time Complexity: O(nlogn), where n is the number of students. Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 100000 1 ≤ k ≤ n 0 ≤ scores[i] ≤ 1000","solution":"def k_th_highest_score(scores, k): Returns the k-th highest score from the list of scores. if not scores or k < 1 or k > len(scores): raise ValueError(\\"Invalid input\\") # Sort the scores in descending order sorted_scores = sorted(scores, reverse=True) # Return the k-th highest score return sorted_scores[k-1]"},{"question":"Palindrome Pattern You are given an odd integer n (>= 3) and your task is to create a pattern of size `n x n` that forms a diamond shape. Each line is separated by \'n\'. Use the following characters: * and space Example: ``` n = 3 pattern: * * * * ``` ``` n = 5 pattern: * * * * * * * * ``` Series: Pattern Making Pattern Making #1: Palindrome Pattern Pattern Making #2: Magic Square Pattern Making #3: Z-Shape Pattern","solution":"def generate_palindrome_pattern(n): Generate a palindrome pattern of size n x n as given in the problem description. Args: n (int): The size of the pattern (must be an odd integer >= 3). Returns: str: A string representing the requested pattern. if n < 3 or n % 2 == 0: raise ValueError(\\"Input must be an odd integer greater than or equal to 3\\") pattern = [] mid = n // 2 for i in range(n): if i <= mid: row = \' \' * (mid - i) + \'*\' + \' \' * (2 * i - 1) if i != 0: row += \'*\' else: row = \' \' * (i - mid) + \'*\' + \' \' * (2 * (n - i - 1) - 1) if i != n - 1: row += \'*\' pattern.append(row.rstrip()) return \'n\'.join(pattern)"},{"question":"Given an array A of integers. Determine the length of the longest contiguous subarray that contains only even numbers, and return this length. If no even number exists in the array, return 0. Input: The first line of input contains the number of test cases. For each test case, there will be two lines: the first line contains the size of the array, and the next line contains the array elements. Output: For each test case, output the length of the longest contiguous subarray consisting entirely of even numbers. Your Task: Your task is to complete the function to find the length of the longest contiguous subarray of even numbers. Constraints: 1 <= T <= 100 1 <= N <= 10^3 0 <= A_i <= 10^5 Example: Input: 3 5 1 2 4 6 7 4 1 3 5 7 6 8 10 12 14 3 6 Output: 2 0 4 Explanation: Testcase 1: Longest contiguous subarray of even numbers is {2, 4, 6} Hence, the output is 2. Test Case 2: No even numbers present. Hence, the output is 0. Test Case 3: Longest contiguous subarray of even numbers is {8, 10, 12, 14} Hence, the output is 4.","solution":"def longest_even_subarray_length(A): Returns the length of the longest contiguous subarray that contains only even numbers. max_len = 0 current_len = 0 for num in A: if num % 2 == 0: current_len += 1 if current_len > max_len: max_len = current_len else: current_len = 0 return max_len def process_test_cases(test_cases): Process multiple test cases and return a list of results for each test case. results = [] for case in test_cases: array = case[1] result = longest_even_subarray_length(array) results.append(result) return results"},{"question":"Alice has just opened a new coffee shop and wants to offer a range of distinct coffee blends. Each blend is represented by a unique non-negative integer identifier, and some blends may share common ingredients (represented as sub-components). Each blend can be created by combining several other blends or ingredients. Alice wants to know how many distinct blends she can offer, given the constraints of which blends can be combined to create new blends. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of predefined blends. The next n lines each contain a list of space-separated integers, representing the components required to create that blend. The first integer in each line represents the blend identifier (0 ≤ blend_id ≤ 10^5), followed by the identifiers of the ingredients (0 ≤ ingredient_id ≤ 10^5) used to create the blend, or an empty line if the blend consists of a single ingredient. -----Output----- Output a single integer representing the total number of distinct blends, including all possible combinations. -----Examples----- Input 5 1 2 3 2 3 4 3 4 4 5 1 4 Output 5 Input 3 0 1 0 2 2 Output 3 -----Note----- In the first example, the distinct blends are: 1. Blend 1 consists of blends 2 and 3. 2. Blend 2 consists of blends 3 and 4. 3. Blend 3 consists of blend 4. 4. Blend 4 is a single ingredient. 5. Blend 5 consists of blends 1 and 4. All these combinations result in 5 distinct blends. In the second example, the distinct blends are: 1. Blend 0 is a single ingredient. 2. Blend 1 consists of blends 0 and 2. 3. Blend 2 is a single ingredient. Hence, there are 3 distinct blends.","solution":"def count_distinct_blends(n, blend_list): Returns the count of distinct blends given the predefined blends\' descriptions. # Use a set to keep track of all unique blends unique_blends = set() # Process each blend from the blend_list for blend_str in blend_list: blend_components = list(map(int, blend_str.split())) blend_id = blend_components[0] unique_blends.add(blend_id) return len(unique_blends)"},{"question":"A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. You are given an array A of size N. Determine the length of the longest increasing subsequence that can be formed from the elements of A. An increasing subsequence is a subsequence where each element is larger than the previous one. ------ Input Format ------ - The first line contains T denoting the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N. - The second line contains N space-separated integers A_{1}, A_{2}, dots, A_{N}. ------ Output Format ------ For each test case, print the maximum length of an increasing subsequence that can be formed from the elements of the given array. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^{5} 1 ≤ A_{i} ≤ 10^{9} - Sum of N over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 2 6 5 2 8 6 3 6 5 1 2 3 4 5 ----- Sample Output 1 ------ 3 5 ----- Explanation 1 ------ Test case 1: The longest increasing subsequence in the array [5, 2, 8, 6, 3, 6] is [2, 6, 6], which has a length of 3. Test case 2: The longest increasing subsequence in the array [1, 2, 3, 4, 5] is the entire array itself, which has a length of 5.","solution":"from bisect import bisect_left def longest_increasing_subsequence_length(A): Returns the length of the longest increasing subsequence in the array A. if not A: return 0 lis = [] for num in A: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) def solve(test_cases): results = [] for A in test_cases: results.append(longest_increasing_subsequence_length(A)) return results def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) A = list(map(int, input_lines[index + 1].split())) test_cases.append(A) index += 2 return test_cases"},{"question":"Given an integer array and an integer K, return all pairs of elements with the minimum absolute difference of any two elements. -------- Input Format -------- - The first line contains an integer T – the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N – the number of elements in the array. - The second line of each test case contains N space-separated integers denoting the elements of the array. - The third line of each test case contains a single integer K. -------- Output Format -------- For each test case, print each pair of elements with the minimum absolute difference. Each pair should be printed in a new line sorted in non-decreasing order and each pair itself should be sorted in non-decreasing order. If there are multiple pairs with the same difference, print all of them in lexicographical order. -------- Constraints -------- 1 leq T leq 1000 2 leq N leq 10^{5} −10^9 leq A_i, K leq 10^9 - Sum of N over all test cases does not exceed 2 cdot 10^5 -------- Sample Input 1 -------- 2 5 4 2 1 3 7 0 6 10 3 6 7 8 2 1 -------- Sample Output 1 -------- 1 2 2 3 3 4 2 3 3 7 6 7 7 8 -------- Explanation 1 -------- Test case 1: 1-2=1, 2-3=1, 3-4=1 are the pairs with the minimum absolute difference of 1, and they are printed following the conditions mentioned. Test case 2: 2-3=1, 3-6=3, 3-7=4, 6-7=1, 7-8=1 are the pairs initially with the minimum difference, satisfying the given conditions further reducing it to 2-3, 6-7 and 7-8 which are printed separately.","solution":"def min_diff_pairs(test_cases): This function takes in the number of test cases and the test case data, and returns pairs of elements with the minimum absolute difference. results = [] for case in test_cases: n, arr, k = case arr = sorted(arr) min_diff = float(\'inf\') pairs = [] # Finding the minimum absolute difference for i in range(n - 1): diff = abs(arr[i] - arr[i + 1]) if diff < min_diff: min_diff = diff pairs = [(arr[i], arr[i + 1])] elif diff == min_diff: pairs.append((arr[i], arr[i + 1])) # Adding the results results.append(pairs) return results"},{"question":"Write a function, sumOfDigits, that takes an integer as input and returns the sum of its individual digits. Ensure the function handles both positive and negative integers correctly. For any invalid input, such as non-integer values, return None.","solution":"def sumOfDigits(n): Returns the sum of the individual digits of the integer n. If n is not an integer, returns None. if not isinstance(n, int): return None # Make n positive for simplicity n = abs(n) # Calculate the sum of digits sum_digits = 0 while n > 0: sum_digits += n % 10 n //= 10 return sum_digits"},{"question":"Samantha is analyzing a social network represented as an undirected graph where each node represents a person and each edge represents a friendship between two people. She wants to determine the number of friend circles in the network. A friend circle is defined as a group of people who are directly or indirectly friends with each other. Input The first line contains a single integer, T, representing the number of test cases. T test cases follow. Each test case begins with a line containing a single integer, N, representing the number of people in the network. The next N lines each contain N characters (\'0\' or \'1\') representing the adjacency matrix of the graph, where the j-th character in the i-th row is \'1\' if person i is friends with person j and \'0\' otherwise. Output For each test case, output a single line containing the number of friend circles in the network. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 200 SAMPLE INPUT 2 3 110 110 001 4 1100 1110 0110 0001 SAMPLE OUTPUT 2 2","solution":"def find_friend_circles(n, matrix): def dfs(node, visited): for neighbor, is_friend in enumerate(matrix[node]): if is_friend == \'1\' and neighbor not in visited: visited.add(neighbor) dfs(neighbor, visited) visited = set() friend_circles = 0 for person in range(n): if person not in visited: dfs(person, visited) friend_circles += 1 return friend_circles def friend_circle_counter(test_cases): results = [] for n, matrix in test_cases: results.append(find_friend_circles(n, matrix)) return results"},{"question":"Task Write a function that takes a matrix of integers and rotates it 90 degrees clockwise. Example For the input matrix: ``` 1 2 3 4 5 6 7 8 9 ``` The output matrix should be: ``` 7 4 1 8 5 2 9 6 3 ``` Input/Output - Input is a 2D list of integers representing the matrix; the matrix is guaranteed to be square (same number of rows and columns) with 1 <= size <= 10. - Output should be the rotated 2D list of integers. For matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] the output should be [[7, 4, 1], [8, 5, 2], [9, 6, 3]].","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given matrix 90 degrees clockwise. Parameters: - matrix: A list of lists of integers representing the square matrix. Returns: - A new matrix that is the rotated version of the original matrix. n = len(matrix) # Create a new matrix of the same dimensions rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - 1 - i] = matrix[i][j] return rotated"},{"question":"Given an array of integers, return an array containing only the elements that appear more than once, in the order that they first appeared. If no elements appear more than once, return an empty array. Examples: - Input: [1, 2, 3, 4, 4, 5, 2] Output: [4, 2] - Input: [1, 2, 3, 4, 5] Output: [] - Input: [1, 1, 1, 2, 3, 3, 4] Output: [1, 3]","solution":"def find_duplicates(arr): Returns an array of elements that appear more than once in the given array, in the order they first appeared. If no elements appear more than once, returns an empty array. Parameters: arr (list): List of integers Returns: list: List of integers that appear more than once counts = {} duplicates = [] for item in arr: if item in counts: if counts[item] == 1: duplicates.append(item) counts[item] += 1 else: counts[item] = 1 return duplicates"},{"question":"Alex and Bob are playing a game with a sequence of integers. Initially, there\'s a sequence of integers `a1, a2, ..., an`. The two players take turns, starting with Alex. On each turn, the player can choose any element from the sequence and remove it. The player who removes an element that causes the sum of the remaining sequence to be non-decreasing loses the game. Both players play optimally. Given the initial sequence, determine the winner of the game. Input The first line contains an integer `n`, the number of elements in the sequence. The second line contains `n` space-separated integers `a1, a2, ..., an`, the elements of the sequence. Output Print \\"Alex\\" if the first player is guaranteed to win, otherwise print \\"Bob\\". Constraints 1 ≤ n ≤ 100000 -10^9 ≤ ai ≤ 10^9 SAMPLE INPUT 5 3 1 4 1 5 SAMPLE OUTPUT Alex Explanation In the given sequence 3, 1, 4, 1, 5: - Alex removes 3 → New sequence: 1, 4, 1, 5 (sum is 11) - Bob removes 1 → New sequence: 4, 1, 5 (sum is 10) - Alex removes 4 → New sequence: 1, 5 (sum is 6) If Alex removes 1 instead of 4 on the third turn, the remaining sequence will be 4, 5 that would lead to a non-decreasing sum from this point onward, fulfilling the losing condition for him. However, removing 4 avoids this, thus Alex can force a win.","solution":"def determine_winner(n, sequence): Determines the winner of the game between Alex and Bob. Parameters: n (int): The number of elements in the sequence sequence (list of int): The initial sequence of integers Returns: str: \\"Alex\\" if the first player is guaranteed to win, otherwise \\"Bob\\" sequence.sort(reverse=True) # Sort the sequence in descending order if n % 2 == 1: # If the length of the sequence is odd return \\"Alex\\" else: # If the length of the sequence is even return \\"Bob\\""},{"question":"Given an array of integers, your task is to find the length of the shortest contiguous subarray, which, when sorted, results in the entire array being sorted. If the array is already sorted, return 0. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the array. The second line contains n integers, the elements of the array. Output Print a single integer — the length of the shortest contiguous subarray that needs to be sorted. Examples Input 6 2 6 4 8 10 9 15 Output 5 Input 5 1 2 3 4 5 Output 0 Note In the first example, the subarray [6, 4, 8, 10, 9] is the shortest subarray that, when sorted, results in the whole array being sorted. Therefore, the result is 5. In the second example, the whole array is already sorted, so the result is 0.","solution":"def find_unsorted_subarray_length(arr): n = len(arr) if n <= 1: return 0 left, right = 0, n - 1 # Find the first element from the left which is out of order while left < n - 1 and arr[left] <= arr[left + 1]: left += 1 # If the array is fully sorted if left == n - 1: return 0 # Find the first element from the right which is out of order while right > 0 and arr[right] >= arr[right - 1]: right -= 1 # Find the minimum and maximum values in the unsorted subarray subarray_max = max(arr[left:right + 1]) subarray_min = min(arr[left:right + 1]) # Expand the subarray to include any numbers which are out of place while left > 0 and arr[left - 1] > subarray_min: left -= 1 while right < n - 1 and arr[right + 1] < subarray_max: right += 1 return right - left + 1"},{"question":"Tina loves stargazing and she has a peculiar habit of counting the number of visible stars each night. She also prefers to count stars in a specific pattern, and tonight she chose an arbitrary integer `k`. Tina starts counting the star from the left and only counts every `k`th star. Given the number of visible stars `n` each night and Tina\'s counting pattern `k`, can you determine the total number of stars Tina will count? Your task is to write a function that calculates the total stars Tina will count, given the number of visible stars `n` and her counting pattern `k`. -----Input----- The first line contains two integer numbers `n` and `k` (1 ≤ n ≤ 10^9, 1 ≤ k ≤ 10^9) – the total number of visible stars and Tina\'s counting pattern respectively. -----Output----- Output the total number of stars Tina will count. -----Examples----- Input 10 3 Output 4 Input 15 5 Output 3 Input 7 2 Output 4 -----Note----- In the first example, 10 stars are visible and Tina counts every 3rd star: - She counts the 3rd, 6th, 9th star and one more count at the end as n=10. In the second example, 15 stars are visible and Tina counts every 5th star: - She counts the 5th, 10th and 15th stars. In the third example, 7 stars are visible and Tina counts every 2nd star: - She counts the 2nd, 4th, 6th star and one more count at the end as n=7. You can use this function signature: ```python def count_stars(n: int, k: int) -> int: pass ```","solution":"def count_stars(n: int, k: int) -> int: Returns the total number of stars Tina will count. Parameters: n (int): The total number of visible stars. k (int): The counting pattern, Tina counts every k-th star. Returns: int: The total number of stars Tina will count. return (n + k - 1) // k"},{"question":"Create a function that accepts a list of integers and a target integer `k`. The goal is to find all unique pairs of elements in the list that add up to `k`. The function should return a list of tuples with each tuple containing two integers that form a pair. Ensure that the pairs are sorted in ascending order and the list of pairs is also sorted in ascending order based on the first element of the pair. If no such pairs exist, the function should return an empty list. INPUT: - A list of integers. - An integer `k` as the target sum. OUTPUT: A list of tuples, where each tuple contains two integers that add up to `k`. The list of tuples should be sorted in ascending order based on the first element of each pair, and the integers within each tuple should also be sorted. CONSTRAINTS - The list should contain at least 2 elements and at most 100 elements. - 0 ≤ k ≤ 200 - The elements in the list will be in the range -100 to 100. SAMPLE INPUT: [1, 2, 3, 4, 5, 6] 7 SAMPLE OUTPUT: [(1, 6), (2, 5), (3, 4)] EXPLANATION: In the given example, the list is [1, 2, 3, 4, 5, 6] and the target sum is 7. The pairs (1, 6), (2, 5), and (3, 4) add up to 7. The pairs are returned in sorted order.","solution":"def find_pairs_with_sum(nums, k): Find all unique pairs in the list `nums` that add up to `k`. Parameters: nums (list): A list of integers. k (int): The target sum. Returns: list: A list of tuples, each containing two integers that form a pair summing to `k`. nums = sorted(nums) pairs = set() seen = set() for num in nums: complement = k - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return sorted(list(pairs))"},{"question":"A company has employees with varying skill levels. Each employee is assigned a skill level represented by a positive integer. We want to organize employees into teams such that the sum of the skill levels of each team does not exceed a given capacity. Write a function to determine the minimum number of teams needed to accommodate all employees under this constraint. -----Constraints----- - 1 leq N leq 10^5 - 1 leq skill_i leq 10^4 - 1 leq capacity leq 10^4 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N capacity skill_1 skill_2 ... skill_N -----Output----- Print the minimum number of teams needed. -----Sample Input----- 5 10 6 3 5 8 2 -----Sample Output----- 3 We can form the teams as follows: 1. Team with skill levels [6, 3] 2. Team with skill levels [5, 2] 3. Team with skill level [8] All teams have skill levels that do not exceed the capacity of 10.","solution":"def min_teams(N, capacity, skills): Determines the minimum number of teams needed to accommodate all employees under the given capacity constraint. Parameters: N (int): The number of employees. capacity (int): The maximum capacity of each team. skills (list): A list of skill levels of the employees. Returns: int: The minimum number of teams required. skills.sort(reverse=True) teams = 0 i, j = 0, N - 1 while i <= j: if skills[i] + skills[j] <= capacity: j -= 1 i += 1 teams += 1 return teams"},{"question":"You are given a grid with `n` rows and `m` columns, where each cell contains an integer. Your task is to transform the grid into such a state that every number in it is multiplied by `k`. You also need to remove all rows and columns that consist entirely of zeros after the transformation. Write a function `transformGrid` that accepts four arguments: an integer `n` (1 ≤ n ≤ 1000), an integer `m` (1 ≤ m ≤ 1000), an integer `k` (1 ≤ k ≤ 1000), and a 2-dimensional list `grid` where each element is an integer between -1000 and 1000 inclusive. The function should return the transformed grid as a 2-dimensional list, excluding any rows and columns that consist entirely of zeros. # Input Your function will be called with the following arguments: - `n` and `m`: the number of rows and columns in the grid, respectively. - `k`: the integer by which each element in the grid must be multiplied. - `grid`: a 2-dimensional list containing the initial grid, where each element is between -1000 and 1000. # Output Return the transformed grid as a 2-dimensional list, excluding rows and columns that consist entirely of zeros. # Example Input ```python n = 3 m = 4 k = 2 grid = [ [1, 0, 3, -2], [4, -2, 0, 0], [0, 0, 0, 0] ] ``` Output ```python [ [2, 0, 6, -4], [8, -4, 0, 0] ] ``` # Explanation 1. Multiply each element of the grid by `k = 2`: ``` [ [2, 0, 6, -4], [8, -4, 0, 0], [0, 0, 0, 0] ] ``` 2. Remove the last row and the last column consisting entirely of zeros. # Note - In the example above, only the third row contains solely zeros after transformation and hence it is removed. - If after transformation the entire grid consists of zeros, return an empty grid (`[]`).","solution":"def transformGrid(n, m, k, grid): # Multiply each element by k transformed_grid = [[grid[i][j] * k for j in range(m)] for i in range(n)] # Remove rows that consist entirely of zeros non_zero_rows = [row for row in transformed_grid if any(cell != 0 for cell in row)] # Transposing the grid to remove columns consisting entirely of zeros if not non_zero_rows: return [] transposed_grid = list(map(list, zip(*non_zero_rows))) # Remove columns that consist entirely of zeros non_zero_columns = [col for col in transposed_grid if any(cell != 0 for cell in col)] # Transpose back to original orientation final_grid = list(map(list, zip(*non_zero_columns))) return final_grid"},{"question":"You are working on a text-editor program which includes a special feature for managing user clipboard history. The clipboard can store multiple text snippets, and users can perform insertion and retrieval operations efficiently. Your task is to implement a doubly linked list structure to manage the clipboard history. Each node in the list should store a text snippet and pointers to the next and previous nodes. The clipboard supports the following operations: 1. **Insert**: Insert a new text snippet at the beginning of the clipboard history. 2. **Retrieve**: Retrieve the text snippet at a given position in the clipboard history. You need to manage the clipboard and process a series of operations while maintaining efficient insertions and retrievals. -----Input----- The first line contains one integer q (1 le q le 10^5) — the number of operations. The next q lines contain a series of operations, either insertion or retrieval. Each insertion operation is described by the string \\"INSERT\\" followed by a space and a text snippet (a sequence of up to 100 characters consisting of lowercase and uppercase letters, digits, and spaces). Each retrieval operation is described by the string \\"RETRIEVE\\" followed by a space and an integer k (1 le k le n), where k is the position of the text snippet to be retrieved starting from the most recent insertion (1 represents the most recently inserted snippet). -----Output----- For each retrieval operation, print the retrieved text snippet on a new line. -----Examples----- Input 6 INSERT Hello INSERT World RETRIEVE 1 RETRIEVE 2 INSERT Foo RETRIEVE 1 Output World Hello Foo","solution":"class Node: def __init__(self, text): self.text = text self.prev = None self.next = None class Clipboard: def __init__(self): self.head = None self.tail = None self.size = 0 def insert(self, text): new_node = Node(text) if not self.head: self.head = self.tail = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node self.size += 1 def retrieve(self, position): if position > self.size or position <= 0: return None current = self.head for _ in range(position - 1): current = current.next return current.text def process_operations(operations): clipboard = Clipboard() results = [] for operation in operations: parts = operation.split(\\" \\", 1) if parts[0] == \\"INSERT\\": clipboard.insert(parts[1]) elif parts[0] == \\"RETRIEVE\\": results.append(clipboard.retrieve(int(parts[1]))) return results"},{"question":"You are given an array of n integers and a target integer k. You need to find the number of subarrays whose sum is exactly equal to k. A subarray is defined as a contiguous segment of the array. Input: 1st line contains an integer n, denoting the number of elements in the array. 2nd line contains n space-separated integers, representing the array elements. 3rd line contains an integer k. Output: Print the number of subarrays with sum exactly equal to k. SAMPLE INPUT 5 1 2 3 4 5 5 SAMPLE OUTPUT 2 Explanation: The two subarrays that sum to 5 are [2, 3] and [5].","solution":"def subarray_sum(nums, k): Returns the number of subarrays whose sum is exactly equal to k. count = 0 cumulative_sum = 0 sum_dict = {0: 1} for num in nums: cumulative_sum += num if (cumulative_sum - k) in sum_dict: count += sum_dict[cumulative_sum - k] if cumulative_sum in sum_dict: sum_dict[cumulative_sum] += 1 else: sum_dict[cumulative_sum] = 1 return count def count_subarrays_with_sum(n, array, k): Wrapper function to process input and call subarray_sum function. return subarray_sum(array, k)"},{"question":"You are helping to develop a new file backup system. This system keeps track of files in a directory and ensures that any changes are properly backed up to an external storage device. The system needs to handle two types of operations: file modifications and backup requests. Each file is identified by a unique integer ID. When a file is modified, its ID and the modification time (an integer timestamp) are logged. When a backup request is made, all files that were modified since the last backup are included in the current backup. Input The first line contains a single integer T ≤ 50 indicating the number of test cases. Each test case begins with a single integer N (1 ≤ N ≤ 1000), the number of operations. Each operation is described in one of the following formats: - \\"MOD x t\\" where x is the file ID (1 ≤ x ≤ 10^6) and t is the modification time (1 ≤ t ≤ 10^9). - \\"BACKUP t\\" where t is the request time for this backup (1 ≤ t ≤ 10^9). Output For each test case, output a list of lists where each list represents the file IDs included in each backup, in the order the operations occurred. If no files are included in a backup, output an empty list for that backup. Example Input: 2 4 MOD 1 5 MOD 2 10 BACKUP 20 BACKUP 30 5 MOD 1 5 BACKUP 6 MOD 2 10 MOD 3 15 BACKUP 20 Output: [[1, 2], []] [[1], [2, 3]]","solution":"def file_backup_system(T, cases): Processes the file modification and backup operations and returns a list of lists indicating the files included in each backup for each test case. results = [] for case in cases: operations = case[\'operations\'] last_backup_time = 0 file_mod_times = {} backup_results = [] for operation in operations: op = operation.split() if op[0] == \\"MOD\\": file_id, mod_time = int(op[1]), int(op[2]) file_mod_times[file_id] = mod_time elif op[0] == \\"BACKUP\\": backup_time = int(op[1]) backup_files = [file_id for file_id, mod_time in file_mod_times.items() if mod_time > last_backup_time] backup_results.append(sorted(backup_files)) last_backup_time = backup_time results.append(backup_results) return results"},{"question":"Takahashi is playing a game where he moves along a number line following a set of directions. Initially, Takahashi stands at point 0 on the number line. He has a string of directions consisting of characters \'R\' (right) and \'L\' (left). Each \'R\' moves Takahashi one unit to the right, and each \'L\' moves him one unit to the left. Given the string of directions, determine the final position of Takahashi on the number line after following all the directions. -----Constraints----- - The length of the string is between 1 and 100, inclusive. - Each character in the string is either \'R\' or \'L\'. -----Input----- Input is given from Standard Input in the following format: directions -----Output----- Print the final position of Takahashi on the number line. -----Sample Input----- RRLLR -----Sample Output----- 1 - Initially, Takahashi stands at point 0 on the number line. - The first direction is R. Moving right, he stands at 1. - The second direction is R. Moving right, he stands at 2. - The third direction is L. Moving left, he stands at 1. - The fourth direction is L. Moving left, he stands at 0. - The fifth direction is R. Moving right, he stands at 1. Thus, the final position of Takahashi on the number line is 1.","solution":"def final_position(directions): Determines the final position on the number line after following the directions. Parameters: directions (str): A string of \'R\' and \'L\' characters. Returns: int: The final position on the number line. position = 0 for direction in directions: if direction == \'R\': position += 1 elif direction == \'L\': position -= 1 return position"},{"question":"In a distant world, explorers have discovered a mysterious mineral deposit. The mineral blocks are arranged in a grid of N rows and M columns. Each block has a certain amount of mineral in it. To extract the minerals, the explorers can either: 1. Extract from a single block. 2. Extract from an entire horizontal row. 3. Extract from an entire vertical column. Given the grid where each cell contains the amount of mineral in that block, determine the maximum amount of mineral that can be extracted by choosing any one of the three options: one block, one row, or one column. - The first line contains two integers, N and M, denoting the number of rows and columns in the grid. - The next N lines contain M integers each, where the j-th integer on the i-th line represents the amount of mineral in the block at the i-th row and j-th column. ------ Input Format ------ - The first line contains two integers N and M — the number of rows and columns in the grid. - Each of the next N lines contains M integers, where the j-th integer of the i-th row denotes the amount of mineral in the block (i, j). ------ Output Format ------ - Print a single integer — the maximum amount of mineral that can be extracted. ------ Constraints ------ 1 ≤ N, M ≤ 2000 1 ≤ text{amount of minerals in a block} ≤ 10^9 ------ Sample Input 1 ------ 3 3 1 2 3 4 5 6 7 8 9 ------ Sample Output 1 ------ 24 ------ Explanation 1 ------ By selecting the last row (7, 8, 9), the total amount of mineral extracted is 7 + 8 + 9 = 24, which is the highest possible amount of mineral that can be extracted in this scenario. ------ Sample Input 2 ------ 2 3 10 20 30 50 60 70 ------ Sample Output 2 ------ 180 ------ Explanation 2 ------ By selecting the second row (50, 60, 70), the total amount of mineral extracted is 50 + 60 + 70 = 180, which is the highest possible amount of mineral that can be extracted in this scenario.","solution":"def max_minerals_extracted(N, M, grid): Determines the maximum amount of minerals that can be extracted by choosing either one block, one row, or one column. Args: N : int : number of rows M : int : number of columns grid : list of list of int : 2D grid of minerals in each block Returns: int : maximum amount of minerals that can be extracted max_single_block = max(max(row) for row in grid) max_row_sum = max(sum(row) for row in grid) max_column_sum = max(sum(grid[row][col] for row in range(N)) for col in range(M)) return max(max_single_block, max_row_sum, max_column_sum)"},{"question":"You are given an array of n positive integers. You need to process q queries, where each query gives two numbers: l and r. For each query, you need to return the sum of the divisors of all the numbers in the segment of the array from index l to r (both inclusive). -----Input----- The first line contains two integers n and q (1 ≤ n, q ≤ 10^5): the size of the array and the number of queries, respectively. The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6): the elements of the array. Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n): the range for each query. -----Output----- For each query, print the sum of the divisors of all the numbers in the specified range. -----Examples----- Input 5 3 1 2 3 4 5 1 3 2 4 1 5 Output 8 10 25","solution":"import math def sum_of_divisors(n): total = 0 for i in range(1, int(math.sqrt(n)) + 1): if n % i == 0: total += i if i != n // i: total += n // i return total def preprocess(array): Preprocess the array to calculate the sum of divisors for each element. return [sum_of_divisors(x) for x in array] def prefix_sums(array): Create a prefix sum array for efficient range sum computation. prefix = [0] * (len(array) + 1) for i in range(len(array)): prefix[i + 1] = prefix[i] + array[i] return prefix def query(prefix, l, r): return prefix[r] - prefix[l - 1] def solve(n, q, array, queries): processed_array = preprocess(array) prefix = prefix_sums(processed_array) results = [] for l, r in queries: results.append(query(prefix, l, r)) return results"},{"question":"Maria is an avid puzzle enthusiast and she often enjoys creating puzzles for her friends. Recently, she came up with a new puzzle based on sequences of integers. For a given sequence b consisting of n integers b_1, b_2, ..., b_n, she defines a beautiful subsequence as a subsequence of at least two elements where the differences between every two consecutive elements are all equal. Maria needs help to determine the length of the longest beautiful subsequence in the given sequence. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 2000). The second line contains n space-separated integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9). -----Output----- Print a single integer — the length of the longest beautiful subsequence. If there is no such subsequence, print 1. -----Examples----- Input 5 1 5 9 13 17 Output 5 Input 4 3 1 4 1 Output 2 Input 7 2 2 2 2 2 2 2 Output 7","solution":"def longest_beautiful_subsequence(n, b): from collections import defaultdict if n == 1: return 1 longest = 1 dp = [defaultdict(int) for _ in range(n)] for i in range(n): for j in range(i): difference = b[i] - b[j] dp[i][difference] = max(dp[i][difference], dp[j][difference] + 1) longest = max(longest, dp[i][difference] + 1) return longest"},{"question":"You are given a tree with N nodes where the nodes are numbered from 1 to N. Each edge has a weight. A tree is a connected acyclic graph. Additionally, you are given Q queries. Each query consists of a single integer k. For each query, your task is to determine the maximum weight of the smallest edge in a path from the root (node 1) to any leaf node after exactly k edges have been removed from the tree. Constraints: - 1 ≤ N ≤ 10^5 - 1 ≤ Q ≤ 10^5 - 1 ≤ edge weights ≤ 10^9 - 1 ≤ k ≤ N-1 for each query Input: The input is given from Standard Input in the following format: ``` N u1 v1 w1 u2 v2 w2 ... u(N-1) v(N-1) w(N-1) Q k1 k2 ... kQ ``` Output: For each query, output a single integer denoting the maximum weight of the smallest edge after removing exactly k edges. Example: Input: ```text 5 1 2 3 1 3 4 1 4 2 4 5 1 3 1 2 3 ``` Output: ```text 1 2 3 ``` In this example, after removing 1 edge from the tree, the smallest possible weight of an edge in any remaining path from the root to a leaf node is 1. After removing 2 edges, the smallest weight is 2, and after removing 3 edges, the smallest weight is 3.","solution":"def max_weight_after_k_edges_removed(N, edges, queries): # Sort edges by weight edges.sort(key=lambda x: x[2]) results = [] for k in queries: if k >= len(edges): # If k is high enough, return the weight of the largest remaining edge results.append(edges[-1][2]) else: # Otherwise, return the k-th heaviest edge (0-indexed) results.append(edges[k-1][2]) return results # Parsing input and calling the function if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) edges = [] index = 1 for i in range(N - 1): u = int(data[index]) v = int(data[index + 1]) w = int(data[index + 2]) edges.append((u, v, w)) index += 3 Q = int(data[index]) queries = [] for i in range(Q): queries.append(int(data[index + 1 + i])) results = max_weight_after_k_edges_removed(N, edges, queries) for result in results: print(result)"},{"question":"Paul is creating a list of numbers. For each number in his list, he wants to calculate the sum of its digits. However, he wants to ensure that his program can handle multiple queries efficiently. Can you help him write a program to achieve this? Input: The first line contains an integer N, denoting the number of queries. Each of the next N lines contains a single integer X for which the sum of digits needs to be found. Output: For each query, print the sum of the digits of the integer X in a new line. Constraints: 1 ≤ N ≤ 10 1 ≤ X ≤ 100000 SAMPLE INPUT 3 123 456 789 SAMPLE OUTPUT 6 15 24","solution":"def sum_of_digits(n): Returns the sum of the digits of the integer n. return sum(int(digit) for digit in str(n)) def process_queries(queries): Processes a list of queries, where each query is an integer X for which the sum of its digits needs to be computed. Returns a list of results. :param queries: List of integers. :return: List of integers, each being the sum of digits of the corresponding query integer. return [sum_of_digits(query) for query in queries]"},{"question":"You are given a string of parentheses \'(\' and \')\'. Your task is to determine the minimum number of characters that need to be removed to make the string valid. A string of parentheses is valid if every open parenthesis \'(\' has a corresponding closing parenthesis \')\' and they are correctly nested. Constraints 1 ≤ length of the string ≤ 100000 Input A single line containing the string of parentheses. Output Output a single integer: the minimum number of characters that need to be removed to make the string valid. SAMPLE INPUT (()())(( SAMPLE OUTPUT 2","solution":"def min_removals_to_make_valid_parentheses(s): Returns the minimum number of characters that need to be removed to make the string of parentheses valid. open_count = 0 close_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: close_count += 1 return open_count + close_count"},{"question":"Given a string which contains double-digit and single-digit numbers separated by spaces, create a function that calculates the sum of all these numbers. Ensure that the function handles an empty string or strings with no valid numbers gracefully by returning 0 in such cases. Example 1: Input: s = \\"12 4 85 3 0\\" Output: 104 Explanation: The sum of the numbers 12, 4, 85, 3 and 0 is 104. Example 2: Input: s = \\"25 75 a 17\\" Output: 117 Explanation: The sum of the numbers 25, 75, and 17 is 117. The \'a\' is ignored. Example 3: Input: s = \\"\\" Output: 0 Explanation: An empty string returns 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function sum_of_numbers() which takes a string s and returns the sum of the numbers in it. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 0 <= len(s) <= 10^5 The string will contain only alphanumeric characters and spaces.","solution":"def sum_of_numbers(s: str) -> int: Returns the sum of all numbers in the string s. if not s: return 0 total_sum = 0 elements = s.split() for element in elements: try: total_sum += int(element) except ValueError: continue return total_sum"},{"question":"You are given a matrix with n rows and m columns, where each element represents the number of apples in that cell. You start from the top-left cell (1,1) and you need to move to the bottom-right cell (n,m). You can only move either to the right or down from a cell. Your task is to find the maximum number of apples you can collect on your way from the top-left to the bottom-right cell. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the matrix. Each of the next n lines contains m integers ai,j (0 ≤ ai,j ≤ 100) — the number of apples in the cell (i, j). Output Print one integer — the maximum number of apples you can collect. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Explanation The optimal path is down -> down -> right -> right, collecting 1 + 4 + 7 + 8 + 9 = 29 apples.","solution":"def max_apples(n, m, matrix): Calculates the maximum number of apples that can be collected starting from the top-left cell to the bottom-right cell, moving only right or down. dp = [[0] * m for _ in range(n)] dp[0][0] = matrix[0][0] for i in range(n): for j in range(m): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j]) return dp[n-1][m-1]"},{"question":"Given two integers A and B, check if it is possible to arrange the digits of A in any order to form B. Print 1 if it\'s possible, else Print 0. Example 1: Input: A = 123, B = 321 Output: 1 Explanation: Digits of A can be rearranged to form B. So, the Output is 1 Example 2: Input: A = 123, B = 312 Output: 1 Explanation: Digits of A can be rearranged to form B. So, the Output is 1 Example 3: Input: A = 123, B = 456 Output: 0 Explanation: Digits of A cannot be rearranged to form B. So, the Output is 0 Your Task: You don\'t need to read input or print anything. Your task is to complete the function canRearrange() which takes two integers A and B as input and returns the answer. Expected Time Complexity: O(log A + log B) Expected Auxiliary Space: O(1) Constraints: 1 <= A, B <= 10^9","solution":"def can_rearrange(A, B): Checks if it\'s possible to rearrange the digits of A to form B. Parameters: A (int): First integer B (int): Second integer Returns: int: 1 if possible, 0 otherwise return 1 if sorted(str(A)) == sorted(str(B)) else 0"},{"question":"Write a function that takes a list of integers and an integer target value. The function should return a list of pairs (as tuples) from the input list whose elements sum up to the target value. Each pair should be sorted in ascending order, and the list of pairs should be sorted in ascending order based on the first element of the pairs. No pair should be repeated. Example: Input: list_of_integers = [1, 2, -1, 0, 2, -2, 3], target_value = 2 Output: [(0, 2), (-1, 3)] Assumptions: The input list may contain both positive and negative integers. A number cannot be a part of more than one pair. Pairs should be sorted in ascending order. If multiple pairs sum up to the target value, all such unique pairs should be returned.","solution":"def find_pairs_with_sum(lst, target): Returns a list of pairs (as tuples) from the input list whose elements sum up to the target value. Each pair is sorted in ascending order, and the list of pairs is sorted based on the first element of the pairs. :param lst: List of integers :param target: Target sum value :return: List of tuples lst.sort() seen = set() pairs = [] for i, num in enumerate(lst): complement = target - num if complement in seen: pairs.append((min(complement, num), max(complement, num))) seen.remove(complement) # Ensure a number is not used more than once else: seen.add(num) pairs.sort() return pairs"},{"question":"A rectangular garden of dimensions N x M meters is fenced. Additionally, vertical pillars are positioned at every meter mark along the perimeter of the garden, including the corners. Write a function that calculates the total number of pillars around the garden. ---Constraints--- - 1 leq N, M leq 1000 - N and M are integers ---Input Format--- The input consists of a single line containing two integers, N and M, separated by a space. ---Output Format--- Output a single integer, the total number of pillars around the garden. ---Sample Input 1--- 5 3 ---Sample Output 1--- 16 ---Sample Input 2--- 8 6 ---Sample Output 2--- 28 Explanation: For a 5 x 3 garden: - There are 6 pillars along each 5-meter side, including the corners (2 sides). - There are 4 pillars along each 3-meter side, including the corners (2 sides). - However, the 4 corner pillars are counted twice, so they need to be subtracted once. Therefore, the total number of pillars is 2 * (5 + 1) + 2 * (3 + 1) - 4 = 16.","solution":"def count_pillars(N, M): Returns the total number of pillars around the garden with dimensions N x M meters. return 2 * (N + 1) + 2 * (M + 1) - 4"},{"question":"*String Compression and Decompression* Background information In data transmission and storage, reducing the size of data is essential for efficiency. One common technique is string compression, where a repetitive sequence is replaced by a shorter representative sequence. This task involves implementing two functions for compressing and decompressing strings based on a basic run-length encoding algorithm. Task 1: Compress function The compress function converts a string containing only uppercase alphabetical characters into a compressed format. The format replaces contiguous sequences of the same character with the character followed by the count of repetition. Steps: 1. Traverse the string and count occurrences of each character until a different character is encountered. 2. Append the character followed by its count to the result string. 3. Continue until the entire string is processed. Let\'s do an example: We have to compress the string `AAABBBCCAAA`. 1. Start from the beginning of the string and count the occurrences of \'A\': 3. 2. Append \'A3\' to the result string. 3. Move to \'B\' and count occurrences: 3. 4. Append \'B3\' to the result string. 5. Move to \'C\' and count occurrences: 2. 6. Append \'C2\' to the result string. 7. Continue the same for the remaining characters. The compressed string becomes `A3B3C2A3`. # Function Signature ```python def compress(string: str) -> str: # Your code here pass ``` # Example ```python assert compress(\\"AAABBBCCAAA\\") == \\"A3B3C2A3\\" assert compress(\\"AB\\") == \\"A1B1\\" assert compress(\\"AABBCC\\") == \\"A2B2C2\\" ``` Task 2: Decompress function The decompress function will convert the compressed format back to its original string. The input will always be a valid compressed string in the format described above. Steps: 1. Traverse the string and for each character followed by a digit, repeat the character based on the count. 2. Append the repeated characters to the result string. 3. Continue until the entire string is processed. Let\'s do an example: We have to decompress the string `A3B3C2A3`. 1. Start from the beginning of the string and for \'A3\', append \'AAA\' to the result. 2. Move to \'B3\', append \'BBB\' to the result. 3. Repeat the same for the remaining substrings. The decompressed string becomes `AAABBBCCAAA`. # Function Signature ```python def decompress(string: str) -> str: # Your code here pass ``` # Example ```python assert decompress(\\"A3B3C2A3\\") == \\"AAABBBCCAAA\\" assert decompress(\\"A1B1\\") == \\"AB\\" assert decompress(\\"A2B2C2\\") == \\"AABBCC\\" ``` With these two functions, you should be able to compress and decompress strings efficiently.","solution":"def compress(string: str) -> str: if not string: return \\"\\" compressed = [] count = 1 for i in range(1, len(string)): if string[i] == string[i - 1]: count += 1 else: compressed.append(f\\"{string[i - 1]}{count}\\") count = 1 compressed.append(f\\"{string[-1]}{count}\\") return \'\'.join(compressed) def decompress(string: str) -> str: decompressed = [] i = 0 while i < len(string): char = string[i] i += 1 count = 0 while i < len(string) and string[i].isdigit(): count = count * 10 + int(string[i]) i += 1 decompressed.append(char * count) return \'\'.join(decompressed)"},{"question":"The Tallest Building === Description --- In a bustling city, there are several skyscrapers of various heights standing next to each other in a straight line. You have been tasked with finding out which building is the tallest among them. Task --- Write a function **tallest_building(heights)** that takes in a list of integers, where each integer represents the height of a building in the city. The function should return the position (0-based index) of the tallest building. If multiple buildings share the maximum height, return the position of the first one encountered. The function takes the following argument: * A list of integers representing the heights of the buildings. The list will have at least one building. The function should return an integer, which is the position of the tallest building. Examples: ```python tallest_building([150, 450, 230, 450, 300]) # returns 1 tallest_building([50, 100, 70, 100, 80, 100]) # returns 1 ```","solution":"def tallest_building(heights): Finds the position of the tallest building in the list. Parameters: heights (list): A list of integers representing the heights of the buildings. Returns: int: The 0-based index of the tallest building. max_height = max(heights) return heights.index(max_height)"},{"question":"Given a list of tickets purchased by individuals during different time intervals, you need to find out who bought the ticket first and who bought the ticket last. The same person can buy multiple tickets at different times. Each ticket entry consists of a person\'s name and the time of purchase in HH:MM format. Your task is to identify the person who bought the first ticket and the person who bought the last ticket. Input: The input data consists of: - An integer n (1 ≤ n ≤ 100), which represents the number of tickets. - Followed by n lines each containing the name of a person (a non-empty string of at most 50 characters) and the time of purchase in the format HH:MM. Output: Output two lines: - The name of the person who bought the first ticket. - The name of the person who bought the last ticket. Example Input: 4 Alice 09:30 Bob 10:15 Alice 11:00 Charlie 08:45 Output: Charlie Alice","solution":"def find_first_and_last_ticket_purchasers(tickets): # Parse the tickets into a list of tuples parsed_tickets = [(name, time) for name, time in tickets] # Sort the tickets based on the time sorted_tickets = sorted(parsed_tickets, key=lambda x: x[1]) # First ticket buyer first_ticket_buyer = sorted_tickets[0][0] # Last ticket buyer last_ticket_buyer = sorted_tickets[-1][0] return first_ticket_buyer, last_ticket_buyer"},{"question":"Given a string S consisting of lowercase Latin letters, determine the minimum number of characters to delete to make all the remaining characters of S equal to the same character. Example 1: Input: S = \\"aabbcc\\" Output: 4 Explanation: Delete 2 a\'s and 2 b\'s (or any other combination that leaves only one type of character). Example 2: Input: S = \\"abc\\" Output: 2 Explanation: Delete 2 characters to keep only one type of character. Example 3: Input: S = \\"aaaa\\" Output: 0 Explanation: All characters are already the same, no need to delete anything. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minDeletions` which takes a string S as input and returns the minimum number of deletions. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^6","solution":"def minDeletions(S): Returns the minimum number of deletions required to make all the remaining characters of S equal to the same character. Parameters: S (str): The input string consisting of lowercase Latin letters. Returns: int: The minimum number of deletions. from collections import Counter char_count = Counter(S) max_frequency = max(char_count.values()) # Calculate the number of deletions needed deletions = sum(count for count in char_count.values()) - max_frequency return deletions"},{"question":"Implement a function to filter an array of integers, only keeping the prime numbers. The function should meet these requirements: + Accepts an array of positive integers as its parameter (example: `[4, 6, 7, 9, 10, 13]`) + Returns a new array containing only the prime numbers from the input array. **Note:** + A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. + The returned order of the prime numbers should be the same as their order in the input array. Example ``` [4, 6, 7, 9, 10, 13] --> [7, 13] [15, 25, 31, 37, 41] --> [31, 37, 41] ```","solution":"def is_prime(n): Determines if a number is prime. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False limit = int(n**0.5) + 1 for i in range(3, limit, 2): if n % i == 0: return False return True def filter_primes(arr): Returns a new list containing only the prime numbers from the input list. :param arr: List[int] :return: List[int] return [x for x in arr if is_prime(x)]"},{"question":"You are given a string S consisting of lowercase English alphabets. Your task is to determine the frequency of the most frequent character and return the highest frequency. Example 1: Input: S = \\"aabbcc\\" Output: 2 Explanation: Characters \'a\', \'b\', and \'c\' all appear twice in the string. Therefore, the highest frequency is 2. Example 2: Input: S = \\"abcde\\" Output: 1 Explanation: All characters appear once in the string. Therefore, the highest frequency is 1. Your Task: The task is to complete the function highestFrequency() which takes a string S as input and returns the highest frequency of any character in the string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5 S contains only lowercase English alphabets.","solution":"def highestFrequency(S): Returns the highest frequency of any character in the string S. from collections import Counter if not S: return 0 frequency = Counter(S) return max(frequency.values())"},{"question":"# Kata Task Write a function that takes a string as input and returns the longest substring that contains at most two distinct characters. # Notes * The input string will be non-empty. * The function should be case-sensitive (\\"a\\" and \\"A\\" are considered different characters). * If there are multiple substrings with the same maximum length, return the one that appears first in the string. # Examples * ex1 * Input = ```\\"eceba\\"``` * Result = ```\\"ece\\"``` * ex2 * Input = ```\\"ccaabbb\\"``` * Result = ```\\"aabbb\\"``` * ex3 * Input = ```\\"abcbbbbcccbdddadacb\\"``` * Result = ```\\"bcbbbbcccb\\"```","solution":"def longest_substring_with_two_distinct_chars(s): if len(s) < 3: return s left = 0 right = 0 max_len = 2 max_substr = s[:2] char_map = {} while right < len(s): char_map[s[right]] = right right += 1 if len(char_map) > 2: del_idx = min(char_map.values()) del char_map[s[del_idx]] left = del_idx + 1 if right - left > max_len: max_len = right - left max_substr = s[left:right] return max_substr"},{"question":"You are given a multi-tiered building where each tier is a different floor connected by staircases. You need to implement an algorithm to calculate the minimum number of steps required to reach the last floor from the first floor, given that you can only move to the floors directly above (the next higher tier). The building is represented as an array of integers where each value in the array represents the number of steps needed to move from that floor to the next directly higher tier. For example, an array [3, 2, 4, 5] means: - It takes 3 steps to move from the 1st to 2nd floor. - It takes 2 steps to move from the 2nd to 3rd floor. - It takes 4 steps to move from the 3rd to 4th floor. - It takes 5 steps to move from the 4th to 5th floor. Your task is to write a program that calculates the minimum number of steps required to reach the last floor from the first floor. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. Each test case consists of two lines. The first line contains a positive integer N, the number of floors in the building. The second line contains N-1 space-separated integers representing the steps needed to move from each floor to the next higher tier. ------ Output ------ For each test case, output a single line containing the minimum number of steps required to reach the last floor from the first floor. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 100 1 ≤ steps_{i} ≤ 100 ------ Example Input 1 ------ 2 5 3 2 4 5 3 1 1 ------ Example Output 1 ------ 14 2","solution":"def min_steps_to_last_floor(floors_steps): Calculate the minimum number of steps required to reach the last floor from the first floor. :param floors_steps: List of integers where each value represents the steps needed to move from one floor to the next. :return: Integer representing the minimum number of steps to reach the last floor. return sum(floors_steps) def process_test_cases(test_cases): Process multiple test cases for the min_steps_to_last_floor function. :param test_cases: List of tuples, where each tuple contains an integer N and a list of steps. :return: List of results for each test case. results = [] for N, steps in test_cases: results.append(min_steps_to_last_floor(steps)) return results"},{"question":"In a university, there are n students who need to be grouped into study teams. Each student has a specific skill level, represented by an integer. The university wants to form teams such that the difference in skill levels between any two students in a team is at most k. Given the skill levels of the students and the value k, determine the maximum number of groups that can be formed. -----Input----- The first line of input contains an integer t (1 le t le 10) — the number of test cases. Each test case starts with two integers n (1 le n le 1000) and k (0 le k le 1000) — the number of students and the maximum allowed difference in skill levels within a team. The second line of each test case contains n integers a_1, a_2, ..., a_n (1 le a_i le 1000) — the skill levels of the students. -----Output----- For each test case, output a single integer representing the maximum number of teams that can be formed. -----Examples----- Input 3 5 3 1 3 6 7 9 4 0 10 20 30 40 6 2 4 6 5 8 9 10 Output 2 4 2 -----Note----- In the first test case, one possible way to form the teams is: - Team 1: [1, 3] - Team 2: [6, 7, 9] In the second test case, since k = 0, each student must be in a separate team. In the third test case, one possible way to form the teams is: - Team 1: [4, 5, 6] - Team 2: [8, 9, 10]","solution":"def max_teams(t, test_cases): Returns a list of integers representing the maximum number of teams that can be formed for each test case. results = [] for case in test_cases: n, k, skills = case skills.sort() teams = 0 i = 0 while i < n: start = skills[i] while i < n and skills[i] - start <= k: i += 1 teams += 1 results.append(teams) return results"},{"question":"Given an array of integers representing an inorder traversal of a binary search tree (BST), and another array representing a corresponding level-order traversal of the same tree, reconstruct the original BST from these traversals and return it. In Inorder traversal, the nodes are visited in ascending order (left child, root, then right child). In Level-order traversal, the nodes are visited level by level from left to right. Example 1: Input: inOrder[] = {4, 8, 10, 12, 14, 20, 22} levelOrder[] = {20, 8, 22, 4, 12, 10, 14} Output: Node values of the tree Explanation: InOrder: 4 8 10 12 14 20 22 LevelOrder: 20 8 22 4 12 10 14 Hence, the tree formed is: 20 / 8 22 / 4 12 / 10 14 Example 2: Input: inOrder[] = {4, 5, 10, 12, 14, 15, 20, 22, 25} levelOrder[] = {15, 10, 20, 5, 12, 14, 25, 4, 22} Output: Node values of the tree Explanation: InOrder: 4 5 10 12 14 15 20 22 25 LevelOrder: 15 10 20 5 12 14 25 4 22 Hence, the tree formed is: 15 / 10 20 / 5 12 25 / / / 4 14 22 Your Task: You need to implement the function reconstructBst(), which takes two arrays inOrder[] and levelOrder[], and returns the root of the tree. The driver code will then use this root to print the tree structure or node values. Expected Time Complexity: O(N^2) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^3 1 <= inOrder[i] <= 10^4 1 <= levelOrder[i] <= 10^4","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def reconstructBst(inOrder, levelOrder): if not inOrder or not levelOrder: return None # The first element of levelOrder is the root of the BST root_val = levelOrder[0] root = TreeNode(root_val) # Find the root index in the inOrder array root_index_inorder = inOrder.index(root_val) # Split the inOrder array into left and right subtrees left_inOrder = inOrder[:root_index_inorder] right_inOrder = inOrder[root_index_inorder + 1:] # Function to filter levelOrder array to get left or right subtree nodes def filter_levelOrder(subInOrder, levelOrder): sub_levelOrder = [x for x in levelOrder if x in subInOrder] return sub_levelOrder # Recursively construct left and right subtrees using filtered levelOrder arrays left_levelOrder = filter_levelOrder(left_inOrder, levelOrder) right_levelOrder = filter_levelOrder(right_inOrder, levelOrder) root.left = reconstructBst(left_inOrder, left_levelOrder) root.right = reconstructBst(right_inOrder, right_levelOrder) return root def bst_to_list_by_levels(root): Helper function to convert BST to list by levels for easy comparison. if not root: return [] result = [] queue = [root] while queue: current = queue.pop(0) result.append(current.val) if current.left: queue.append(current.left) if current.right: queue.append(current.right) return result"},{"question":"# [New Question] A popular online multiplayer game has a unique collectibles system. Every player in the game can collect a variety of magical artifacts. There are 26 possible types of artifacts, each identified by a lowercase English letter from \'a\' to \'z\'. During a game session, each player receives artifacts in a specific order, and they can choose to accumulate or discard them immediately. However, once an artifact is accumulated, it cannot be discarded. To help players manage their inventories better, you need to write a program to determine how many distinct types of artifacts a player ends up with after receiving a sequence of artifacts during a game session. -----Input----- The input consists of a single string of lowercase English letters, representing the sequence of artifacts received by a player during the game session. -----Output----- Output a single integer, representing the number of distinct types of artifacts in the player\'s inventory after the game session. -----Examples----- Input abca Output 3 Input zzzz Output 1 Input abcdefghijklmnopqrstuvwxyz Output 26 -----Note----- In the first sample case, the player receives artifacts \'a\', \'b\', \'c\', \'a\'. Since they can only accumulate new artifact types, the final inventory will have artifacts \'a\', \'b\', and \'c\', resulting in 3 distinct types. In the second sample case, the player receives four \'z\' artifacts, so the inventory will only contain one distinct type, which is \'z\'. In the third sample case, every possible type of artifact is received exactly once, leading to an inventory containing all 26 distinct types.","solution":"def count_distinct_artifacts(artifact_sequence): Returns the number of distinct artifacts in the given sequence. :param artifact_sequence: str - A string representing the sequence of artifacts. :return: int - The number of distinct types of artifacts. return len(set(artifact_sequence))"},{"question":"You are organizing a baking contest and have several participants who will each bake a cake. Each participant has a skill level that will affect the quality of their cake. You also know certain pairs of participants who work better together and can help each other improve their cakes when they bake together. Given the skill levels of the participants and the pairs of participants that can collaborate, you need to determine the maximum possible sum of skill levels that can be achieved if you pair participants optimally. # Input The first line contains two integers, `n` and `k` (1 ≤ n ≤ 10^3, 0 ≤ k ≤ 10^4), which are the number of participants and the number of pairs of participants that can collaborate, respectively. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10^4), which are the skill levels of the participants. Each of the next `k` lines contains two integers `u` and `v` (1 ≤ u < v ≤ n), which means the participants `u` and `v` can collaborate. # Output Print a single integer, which is the maximum possible sum of skill levels when participants are optimally paired to maximize their skill improvement. # Example Input ``` 5 4 1 2 3 4 5 1 2 2 3 3 4 4 5 ``` Output ``` 15 ``` # Note In the given example, the participants and their skill levels are: 1 (1), 2 (2), 3 (3), 4 (4), 5 (5). The pairs of participants that can collaborate are: - (1, 2) - (2, 3) - (3, 4) - (4, 5) An optimal pairing to maximize the skill levels could be: - Pair (1, 2) to increase their combined skill level. - Pair (3, 4) to increase their combined skill level. The total maximum possible sum of skill levels is 1 + 2 + 3 + 4 + 5 = 15. This problem can be approached by modeling the collaborative pairs as edges in a graph and then finding ways to optimize skill level sums.","solution":"def max_skill_sum(n, k, skill_levels, pairs): from collections import defaultdict, deque # Create adjacency list for the graph adj_list = defaultdict(list) for u, v in pairs: adj_list[u - 1].append(v - 1) adj_list[v - 1].append(u - 1) visited = [False] * n def bfs(node): queue = deque([node]) component_sum = 0 while queue: current = queue.popleft() if not visited[current]: visited[current] = True component_sum += skill_levels[current] for neighbor in adj_list[current]: if not visited[neighbor]: queue.append(neighbor) return component_sum max_sum = 0 for i in range(n): if not visited[i]: max_sum += bfs(i) return max_sum"},{"question":"Write a program to identify sequences of increasing integers that have a specific step value. Given a sequence of integers, the program should check if the entire sequence can be divided into one or more sub-sequences where each sub-sequence is an increasing series of integers with an increment step value of exactly k. Input: - The first line contains a positive integer T - the number of test cases. - For each test case, the first line contains two integers n and k - the number of integers in the sequence and the step value, respectively. - The next line contains n integers – the elements of the sequence. Output: For each test case, print \\"YES\\" if the sequence can be entirely divided into one or more sub-sequences with an increment step value of k, otherwise print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ n ≤ 500 1 ≤ k ≤ 100 1 ≤ Sequence elements ≤ 10^4 SAMPLE INPUT 2 6 2 1 3 5 7 9 11 5 3 2 5 8 10 13 SAMPLE OUTPUT YES NO Explanation: For the first test case, the sequence can be divided into one sub-sequence with step value of 2: [1, 3, 5, 7, 9, 11]. For the second test case, the sequence cannot form a sub-sequence with the same step value throughout. One possible sub-sequence with step value 3 is [2, 5, 8] but 10 and 13 break this pattern. Therefore, the output is NO.","solution":"def is_sequence_divisible(n, k, sequence): Checks if the sequence can be divided into one or more sub-sequences with an increment step value of exactly k. for i in range(1, n): if sequence[i] - sequence[i - 1] != k: return \\"NO\\" return \\"YES\\" def sequence_division_test(test_cases): results = [] for case in test_cases: n, k, sequence = case results.append(is_sequence_divisible(n, k, sequence)) return results"},{"question":"# Task Given a list of integers, determine if the elements form a strictly increasing or strictly decreasing sequence. # Example For `arr = [1, 2, 3, 4]`, the output should be `true` since the elements are in strictly increasing order. For `arr = [4, 3, 2, 1]`, the output should be `true` since the elements are in strictly decreasing order. For `arr = [1, 2, 2, 3]`, the output should be `false` since the sequence is neither strictly increasing nor strictly decreasing. For `arr = [3, 2, 3, 2]`, the output should be `false` since the sequence is neither strictly increasing nor strictly decreasing. # Input/Output - `[input]` array of integers `arr` A non-empty list of integers. - `[output]` a boolean value `true` if the elements form a strictly increasing or strictly decreasing sequence, `false` otherwise.","solution":"def is_strict_sequence(arr): Determines if the elements in the list form a strictly increasing or strictly decreasing sequence. Parameters: arr (list): A non-empty list of integers Returns: bool: True if the elements form a strictly increasing or strictly decreasing sequence, False otherwise if len(arr) <= 1: return True # Single element or no element is trivially true as they can\'t show inconsistency increasing = all(arr[i] < arr[i + 1] for i in range(len(arr) - 1)) decreasing = all(arr[i] > arr[i + 1] for i in range(len(arr) - 1)) return increasing or decreasing"},{"question":"A group of friends has planned a movie marathon for the weekend. They want to watch multiple movies back-to-back without taking long breaks between them. Given the duration of each movie in minutes, you need to calculate the total time in hours and minutes they will spend watching the movies. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - Each test case consists of multiple lines. - The first line of a test case contains N, the number of movies. - The next N lines each contain an integer Mi, the duration of the i-th movie in minutes. ------ Output Format ------ For each test case, output a single line with the total duration of the movie marathon in the format \\"H hours and M minutes\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10 1 ≤ Mi ≤ 300 ------ Sample Input 1 ------ 2 3 120 150 90 2 180 135 ------ Sample Output 1 ------ 6 hours and 0 minutes 5 hours and 15 minutes ------ Explanation 1 ------ For the first test case, the total duration is 120 + 150 + 90 = 360 minutes, which is 6 hours and 0 minutes. For the second test case, the total duration is 180 + 135 = 315 minutes, which is 5 hours and 15 minutes.","solution":"def movie_marathon_durations(test_cases): results = [] for case in test_cases: n, durations = case total_minutes = sum(durations) hours = total_minutes // 60 minutes = total_minutes % 60 results.append(f\\"{hours} hours and {minutes} minutes\\") return results def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) durations = [int(lines[index + i + 1]) for i in range(N)] test_cases.append((N, durations)) index += N + 1 return test_cases def solve_movie_marathon(input_string): test_cases = parse_input(input_string) return movie_marathon_durations(test_cases)"},{"question":"You are given two arrays, `arr1` and `arr2`, each containing `n` integers. Write a function that finds the length of the longest common subsequence (LCS) of these two arrays. A subsequence is defined as a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to implement a function that determines the length of the LCS. Function Signature: ```python def longest_common_subsequence(arr1: List[int], arr2: List[int]) -> int: ``` # Input - The function takes two arguments: - `arr1`: A list of `n` integers where `1 ≤ n ≤ 1000`. - `arr2`: A list of `n` integers where `1 ≤ n ≤ 1000`. # Output - The function should return an integer, the length of the longest common subsequence of the two arrays. # Example Input ```python arr1 = [3, 4, 9, 1] arr2 = [5, 3, 8, 9, 10, 2, 1] ``` Output ``` 3 ``` Explanation The longest common subsequence is [3, 9, 1], which has a length of 3.","solution":"def longest_common_subsequence(arr1, arr2): Finds the length of the longest common subsequence (LCS) of two arrays. m = len(arr1) n = len(arr2) # Create a 2D array to store the lengths of LCS dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill dp array for i in range(m): for j in range(n): if arr1[i] == arr2[j]: dp[i + 1][j + 1] = dp[i][j] + 1 else: dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]) # The value in dp[m][n] will be the length of LCS return dp[m][n] # Example usage # arr1 = [3, 4, 9, 1] # arr2 = [5, 3, 8, 9, 10, 2, 1] # print(longest_common_subsequence(arr1, arr2)) # Output: 3"},{"question":"A gadget manufacturing company ABC Ltd. wants to optimize its inventory management. They store various types of gadgets in different sections of their warehouse. Each section is represented by a grid, and each cell in the grid can store a certain number of gadgets. The company has a specific number of gadgets they need to store, and they want to find out whether they can store all the gadgets in the warehouse or not. You are given the dimensions of the warehouse (as a grid), and the number of gadgets each section (cell) can hold. In addition, you are given the number of gadgets that need to be stored. Your task is to determine whether it is possible to store all the gadgets in the warehouse. Input: - The first line contains an integer G (1 ≤ G ≤ 10^9), the total number of gadgets that need to be stored. - The second line contains two integers M and N (1 ≤ M, N ≤ 500), the dimensions of the warehouse. - Each of the next M lines contains N integers, representing the capacity of each section of the warehouse in the grid, where each integer is between 0 and 10^7. Output: - Output \\"YES\\" if it is possible to store all the gadgets in the warehouse, otherwise output \\"NO\\". Example: Input: 100 3 3 10 20 30 10 5 5 10 5 5 Output: YES Input: 250 2 2 10 20 10 5 Output: NO","solution":"def can_store_gadgets(G, M, N, capacities): Determines if it is possible to store all the gadgets in the warehouse. Parameters: G (int): The total number of gadgets that need to be stored. M (int): Number of rows in the warehouse grid. N (int): Number of columns in the warehouse grid. capacities (list of list of int): The capacity of each section in the warehouse. Returns: str: \\"YES\\" if it is possible to store all the gadgets, otherwise \\"NO\\". total_capacity = 0 for row in capacities: total_capacity += sum(row) if total_capacity >= G: return \\"YES\\" else: return \\"NO\\""},{"question":"In this exercise, you will have to create a function named `arrayTransformation`. This function will take in an array of integers and will return a new array where each element is transformed based on the following rules: - If the number is even, divide the number by 2. - If the number is odd and greater than 10, subtract 5 from the number. - If the number is odd and less than or equal to 10, add 3 to the number. For example: ```python arrayTransformation([4, 11, 5, 8, 13, 7]) ``` Should return: ```python [2, 6, 8, 4, 8, 10] ``` Ready?","solution":"def arrayTransformation(arr): Transforms the input array based on the rules: - If the number is even, divide the number by 2. - If the number is odd and greater than 10, subtract 5 from the number. - If the number is odd and less than or equal to 10, add 3 to the number. transformed_array = [] for num in arr: if num % 2 == 0: transformed_array.append(num // 2) elif num > 10: transformed_array.append(num - 5) else: transformed_array.append(num + 3) return transformed_array"},{"question":"You are given a grid of size N times M, filled with numbers. Your task is to find the largest rectangle containing only 1s in the grid and return its area. ------ Input ------ The first line contains two integers, N and M, denoting the number of rows and columns of the grid. Each of the next N lines contains M integers, which are either 0 or 1. ------ Output ------ Output a single integer denoting the area of the largest rectangle containing only 1s. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 4 4 1 1 0 1 1 1 1 1 1 1 1 0 0 1 0 0 ------ Sample Output 1 ------ 6 ------ Explanation 1 ------ The largest rectangle containing only 1s has an area of 6 (formed by the rectangle spanning from row 1 to row 3, and column 2 to column 4). ------ Sample Input 2 ------ 3 3 0 1 0 1 1 1 0 1 0 ------ Sample Output 2 ------ 3 ------ Explanation 2 ------ The largest rectangle containing only 1s has an area of 3 (formed by the rectangle spanning from row 2 to row 2, and column 1 to column 3).","solution":"def maximalRectangle(matrix): if not matrix: return 0 n, m = len(matrix), len(matrix[0]) max_area = 0 heights = [0] * (m + 1) for row in range(n): for col in range(m): if matrix[row][col] == 1: heights[col] += 1 else: heights[col] = 0 stack = [-1] for i in range(m + 1): while heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area def find_largest_rectangle_area(input_list): N, M = input_list[0], input_list[1] matrix = input_list[2:] return maximalRectangle(matrix)"},{"question":"In a coding competition, each participant submitted their solutions to different problems. Each solution is either correct or incorrect. The competition records are structured in such a way that for each participant, there\'s a name followed by the status of their submission for several problems. You are required to determine the participant who has the highest number of correct solutions. In case of a tie, the participant who appears first in the input should be considered. Input The first line contains an integer m (1 ≤ m ≤ 50) — the number of participants. Then follow 2*m lines — for each participant, the first line contains the participant\'s name (a non-empty string of uppercase and lowercase Latin letters with a length not exceeding 20 characters), and the second line contains a sequence of space-separated integers (0 or 1), where `1` indicates a correct solution and `0` indicates an incorrect solution. Each sequence will contain between 1 and 50 integers. Output Print the name of the participant with the highest number of correct solutions. If multiple participants have the highest count, print the name of the first one among them in the input order. Examples Input 3 Alice 1 0 1 0 1 Bob 0 0 0 0 1 Charlie 1 1 1 0 0 Output Alice Input 2 John 1 1 Doe 1 0 Output John","solution":"def best_participant(m, data): Determines the participant with the highest number of correct solutions. Parameters: m (int): number of participants data (list): list of tuples where each tuple contains a participant\'s name and a list of their problem solutions (0s and 1s) Returns: str: name of the participant with the highest number of correct solutions max_correct = -1 best_name = \\"\\" for i in range(m): name = data[i][0] solutions = list(map(int, data[i][1].split())) correct_count = solutions.count(1) if correct_count > max_correct: max_correct = correct_count best_name = name return best_name"},{"question":"You are given a string representing a mathematical addition expression which consists of numbers and operators \'+\'. Your task is to implement an algorithm which will evaluate this string and return the sum of all numbers in the expression. Note that the expression may contain multiple ‘+’ operators and there will be no spaces between numbers and operators. Example: Input: \\"12+34+5\\" Output: 51 Input: \\"7+3+8+2\\" Output: 20 Write a function that takes a string expression and returns the integer result.","solution":"def evaluate_addition_expression(expression): Evaluate a given string representing a mathematical addition expression and return the integer result. :param expression: str, a string containing numbers and \'+\' operators :return: int, the result of the addition # Split the expression by the \'+\' character numbers = expression.split(\'+\') # Convert each part to an integer and calculate the sum result = sum(int(num) for num in numbers) return result"},{"question":"You are given a string S consisting of N lowercase English alphabets. You can perform the following operation any number of times: choose any character in the string and move it to the end of the string. Your goal is to find the lexicographically smallest string that can be obtained after any number of such operations. Constraints 1 ≤ N ≤ 100000 Input The first line contains a single integer N denoting the length of the string. The second line contains the string S. Output Output the lexicographically smallest string that can be obtained after performing the operations. SAMPLE INPUT 4 bcda SAMPLE OUTPUT abcd","solution":"def lexicographically_smallest_string(s: str) -> str: Finds the lexicographically smallest string that can be obtained by repeatedly moving any character of the string to the end. Args: s (str): The input string. Returns: str: The lexicographically smallest string. return \'\'.join(sorted(s))"},{"question":"You\'ve been hired as an intern at DroneFleet, a company that manages a fleet of delivery drones. Each drone has a unique identifier and is capable of flying various distances. Management wants to analyze the fleet\'s performance and has tasked you with writing a program to do this. Your task is to write a program that calculates and outputs the maximum distance a drone can fly in a given fleet configuration. Input The first line of the input contains an integer n – the number of drones in the fleet (1 ≤ n ≤ 100000). The second line contains n space-separated integers describing the maximum distance each drone can fly, in kilometers. Each distance is a positive integer no greater than 100000. Output Output a single integer – the maximum distance any drone in the fleet can fly. Example Input 5 300 450 500 600 550 Output 600","solution":"def max_drone_distance(n, distances): Returns the maximum distance any drone in the fleet can fly. return max(distances)"},{"question":"Problem In the distant future, transportation has evolved to the point where personal teleportation devices, known as \\"telepods\\", are a common means of travel. Each telepod is programmed with a unique location identifier code composed of alphanumeric characters. However, due to a glitch, the system occasionally swaps two characters in the location code during transmission, causing travelers to end up in incorrect locations. Your task is to write a program to determine how many telepods have pairs of location codes that could be the result of such a one-time character swap. Sample Input The input contains one or more test cases. Each test case begins with a line containing an integer n, the number of telepod codes. The next n lines contain the telepod codes, each of fixed length m. The input is terminated by a block with n = 0. Output For each test case, output a single integer: the number of distinct pairs of location codes in that test case that could be linked by a single swap of two characters. Constraints 1 < n < 1000 1 < m < 50 Example Input: 4 ABCD ACBD BACD ACDB 0 Output: 3","solution":"def count_telepod_pairs(codes): Count the number of telepod pairs that differ by exactly one swap of two characters. def are_swappable(s1, s2): # Find positions where s1 and s2 differ diffs = [(ch1, ch2) for ch1, ch2 in zip(s1, s2) if ch1 != ch2] # They are swappable if there are exactly two differences and they are complimentary return len(diffs) == 2 and diffs[0] == tuple(reversed(diffs[1])) n = len(codes) count = 0 # Compare each pair of telepod codes for i in range(n): for j in range(i + 1, n): if are_swappable(codes[i], codes[j]): count += 1 return count def process_input(data): results = [] i = 0 while i < len(data): n = int(data[i]) if n == 0: break codes = data[i + 1:i + 1 + n] results.append(count_telepod_pairs(codes)) i += n + 1 return results"},{"question":"Kevin has a grid of size N x N where each cell contains either a 0 or a 1. Kevin wants to identify all unique squares of size K x K that have all the cells filled with 1s. Write a function that takes the grid and the integer K as input and returns the total number of such unique K x K squares. Input Format: First line contains two integers N and K separated by space. The next N lines each contain N integers (either 0 or 1) separated by space, representing the grid. Output Format: Output the total number of unique K x K squares filled with 1s. Constraints: 1 ≤ N ≤ 100 1 ≤ K ≤ N SAMPLE INPUT 4 2 1 1 0 1 1 1 0 1 0 0 1 1 1 1 1 1 SAMPLE OUTPUT 2 Explanation: In the provided grid, there are two unique 2 x 2 squares: - The square from (1,1) to (2,2) - The square from (3,3) to (4,4) Thus, the output is 2.","solution":"def count_unique_KxK_squares(N, K, grid): def is_kxk_square(i, j, K): for x in range(i, i + K): for y in range(j, j + K): if grid[x][y] != 1: return False return True square_set = set() for i in range(N - K + 1): for j in range(N - K + 1): if is_kxk_square(i, j, K): square_set.add((i, j)) return len(square_set) # Example usage: # print(count_unique_KxK_squares(4, 2, [ # [1, 1, 0, 1], # [1, 1, 0, 1], # [0, 0, 1, 1], # [1, 1, 1, 1] # ])) # Output: 2"},{"question":"You are given a list of various fruit names and their associated weights in grams. The format of each item in the list will be a dictionary containing two keys: `\\"fruit\\"` and `\\"weight\\"`, where the value of `\\"fruit\\"` is a string representing the name of the fruit, and the value of `\\"weight\\"` is an integer representing the weight of that fruit in grams. Here is an example input list: ```python [ {\\"fruit\\": \\"apple\\", \\"weight\\": 150}, {\\"fruit\\": \\"banana\\", \\"weight\\": 120}, {\\"fruit\\": \\"apple\\", \\"weight\\": 170}, {\\"fruit\\": \\"orange\\", \\"weight\\": 130}, {\\"fruit\\": \\"banana\\", \\"weight\\": 150} ] ``` Your task is to write a function that calculates the total weight of each type of fruit and returns the result in a dictionary where each key is the name of the fruit and each value is the total weight of that fruit. Example Input: ```python [ {\\"fruit\\": \\"apple\\", \\"weight\\": 150}, {\\"fruit\\": \\"banana\\", \\"weight\\": 120}, {\\"fruit\\": \\"apple\\", \\"weight\\": 170}, {\\"fruit\\": \\"orange\\", \\"weight\\": 130}, {\\"fruit\\": \\"banana\\", \\"weight\\": 150} ] ``` Example Output: ```python { \\"apple\\": 320, \\"banana\\": 270, \\"orange\\": 130 } ```","solution":"def calculate_total_fruit_weight(fruits): Given a list of dictionaries containing fruit names and their associated weights, calculates the total weight for each type of fruit and returns a dictionary with the total weights. total_weights = {} for item in fruits: fruit = item[\\"fruit\\"] weight = item[\\"weight\\"] if fruit in total_weights: total_weights[fruit] += weight else: total_weights[fruit] = weight return total_weights"},{"question":"# Definition **_Automorphic number_** is a number whose **_square \\"_ends\\" in the same digits_ as the number itself**. ____ # Task **_Given_** a number, **_Find if it is Automorphic or not_** . ____ # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * **_Number_** *passed is always* **_Positive_** . * **_Return_** *the result as* **_String_** ___ # Input >> Output Examples ``` automorphicNumber(25) ==> return \\"Automorphic !!\\" ``` **_Explanation_**: * Since , **_25^2 = 625_** , and **_625 ends in 25_**, thus *output* is `\\"Automorphic !!\\"` ___ ``` automorphicNumber(7) ==> return \\"Not !!\\" ``` **_Explanation_**: * Since , **_7^2 = 49_** , and **_49 does not end in 7_**, thus *output* is `\\"Not !!\\"` ___ ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"def automorphicNumber(n): Returns \\"Automorphic !!\\" if the number n is Automorphic. Otherwise, returns \\"Not !!\\". square = n * n return \\"Automorphic !!\\" if str(square).endswith(str(n)) else \\"Not !!\\""},{"question":"You are given a string consisting of lowercase English letters and an integer r. The goal is to determine the lexicographically smallest string that can be obtained by rotating the string to the right exactly r times. A string rotation to the right by one position means moving the last character of the string to the front. For example, rotating the string \\"abcde\\" to the right by one position results in \\"eabcd\\". -----Input----- The input consists of a test cases. The first line contains a single integer t (1 leq t leq 10) — the number of test cases. Each of the next t lines contains a description of a test case consisting of a string s (consisting of lowercase English letters, with length 1 leq |s| leq 100) and an integer r (0 leq r leq 1000). -----Output----- For each test case, print a single line containing the lexicographically smallest string obtainable by rotating the input string s exactly r times. -----Examples----- Input 3 abcde 1 zxy 2 cba 3 Output eabcd xyz abc -----Note----- In the first test case, rotating the string \\"abcde\\" to the right exactly 1 time results in \\"eabcd\\". In the second test case, rotating the string \\"zxy\\" to the right exactly 2 times results in \\"xyz\\". In the third test case, rotating the string \\"cba\\" to the right exactly 3 times results in \\"abc\\".","solution":"def get_lexicographically_smallest_string(s, r): Returns the lexicographically smallest string after rotating `s` to the right `r` times. n = len(s) r = r % n # To handle cases where r >= n rotated_string = s[-r:] + s[:-r] return rotated_string def process_test_cases(test_cases): results = [] for s, r in test_cases: results.append(get_lexicographically_smallest_string(s, r)) return results"},{"question":"You are given an array of integers where each element can be either a 0, 1, or 2. Your task is to sort this array in non-decreasing order without using any sorting algorithm. Instead, utilize a counting approach. # Input - The first line contains an integer T (1 ≤ T ≤ 100), the number of test cases. - The first line of each test case contains an integer N (1 ≤ N ≤ 1000), the number of elements in the array. - The second line of each test case contains N space-separated integers representing the elements of the array. # Output For each test case, output a single line containing the sorted array in non-decreasing order. # Constraints - 1 ≤ N ≤ 1000 - The array elements can only be 0, 1, or 2 # Sample Input ``` 2 5 0 2 1 2 0 3 2 1 0 ``` # Sample Output ``` 0 0 1 2 2 0 1 2 ``` # Explanation For the first test case, the array `0 2 1 2 0` is sorted as `0 0 1 2 2`. For the second test case, the array `2 1 0` is sorted as `0 1 2`. # Additional Note This problem can be solved efficiently by counting the occurrences of each element (0, 1, 2) and then reconstructing the array based on these counts.","solution":"def sort_012_array(arr): Sorts the array containing only 0, 1, and 2 in non-decreasing order. count = [0, 0, 0] # Count the occurrences of 0s, 1s, and 2s for num in arr: count[num] += 1 # Reconstruct the array based on the counts of 0s, 1s, and 2s sorted_arr = [0] * count[0] + [1] * count[1] + [2] * count[2] return sorted_arr def sort_multiple_test_cases(test_cases): This function accepts multiple test cases, sorts each one using the sort_012_array function, and returns the results for each test case. results = [] for arr in test_cases: sorted_arr = sort_012_array(arr) results.append(sorted_arr) return results"},{"question":"You are given a list of N integers representing the stock prices of a particular company\'s shares over time. Your objective is to maximize the profit by buying and selling shares exactly once. You are required to find out the maximum profit that can be achieved if you are allowed to buy and sell only once. Write a function that takes an array of stock prices as input and returns the maximum profit that can be achieved from a single buy and sell operation. # Input - The first line of the input contains an integer N (1 ≤ N ≤ 100000) representing the number of days. - The second line of the input contains N space-separated integers denoting the stock prices of the company on those N days. Each stock price pi (0 ≤ pi ≤ 100000) is for the i-th day. # Output - Print a single integer representing the maximum profit that can be achieved. If no profit is possible, print 0. # Examples Example 1 **Input:** ``` 6 7 1 5 3 6 4 ``` **Output:** ``` 5 ``` **Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5. Example 2 **Input:** ``` 5 7 6 4 3 1 ``` **Output:** ``` 0 ``` **Explanation:** In this case, no transaction is done, and the maximum profit is 0. # Constraints - Time Complexity should be O(N). - Space Complexity should be O(1).","solution":"def max_profit(prices): Function to find the maximum profit that can be achieved from a single buy and sell operation. :param prices: List of stock prices over time. :return: Maximum profit that can be achieved. if not prices or len(prices) == 1: return 0 min_price = prices[0] max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"You have a warehouse with a number of items, each with a corresponding weight and value. Your goal is to fill a container with the maximum possible total value, while not exceeding a given weight limit. Input The first line of the input contains two integers n and W (1 ≤ n ≤ 100, 1 ≤ W ≤ 10^4) — the number of items and the maximum weight capacity of the container. The next n lines each contain two integers wi and vi (1 ≤ wi, vi ≤ 1000) — the weight and value of the i-th item. Output Output a single integer representing the maximum total value of items you can put into the container without exceeding the weight limit. Examples Input 4 7 1 3 4 5 3 4 2 2 Output 10 Input 3 50 10 60 20 100 30 120 Output 220 Note In the first example, the best choice is to take items 1, 3, and 4 with a total weight of 1 + 3 + 2 = 6 and total value of 3 + 4 + 2 = 9.","solution":"def knapsack_max_value(n, W, items): Given a number of items, their corresponding weights and values, and a maximum weight capacity of a knapsack, this function returns the maximum total value of items that can be put into the knapsack without exceeding the weight limit. :param n: int - number of items :param W: int - maximum weight capacity of the knapsack :param items: list of tuples - each tuple contains two integers, weight and value of an item :return: int - maximum total value of items dp = [0] * (W + 1) for weight, value in items: for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return dp[W]"},{"question":"You are given an array of n integers and m queries. Each query consists of two integers l and r (1 ≤ l ≤ r ≤ n). For each query, find the maximum sum of a subarray that starts at l and ends at or before r. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 2·10^5) — the length of the array and the number of queries. The second line contains n integers a_1, a_2, ..., a_n (-10^9 ≤ a_i ≤ 10^9) — the array elements. The next m lines each contain two integers l and r — the parameters of each query. -----Output----- Output m lines, each containing a single integer — the answer to the corresponding query. -----Examples----- Input 5 3 -1 2 3 -2 5 1 3 2 5 1 5 Output 5 8 8 Input 7 4 1 -3 4 -2 6 -1 3 1 4 2 3 4 7 1 7 Output 4 4 8 10 -----Explanation----- In the first test case, for the query (1,3), the maximum sum subarray starting from the first element and ending anywhere between the first and third elements is [2,3] with a sum of 5. For the query (2,5), the subarray [2,3,-2,5] has the maximum sum of 8. For the query (1,5), the subarray [2,3,-2,5] again gives the maximum sum, which is 8.","solution":"def max_subarray_sums(arr, queries): n = len(arr) # To store the results results = [] # Iterate through each query for l, r in queries: current_sum = float(\'-inf\') max_sum = float(\'-inf\') for i in range(l - 1, r): if current_sum < 0: current_sum = arr[i] else: current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum results.append(max_sum) return results"},{"question":"Given a positive integer `n`, find the nth number in a sequence where each number is defined as the sum of squares of the first n natural numbers. Example 1: Input: n = 3 Output: 14 Explanation: 1^2 + 2^2 + 3^2 = 1 + 4 + 9 = 14 Hence, the 3rd number in the sequence is 14. Example 2: Input: n = 5 Output: 55 Explanation: 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 1 + 4 + 9 + 16 + 25 = 55 Hence, the 5th number in the sequence is 55. Your Task: You don\'t need to read input or print anything. Complete the function nthNumberInSequence() which takes n as input parameter and returns the nth number in the sequence. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 1000","solution":"def nthNumberInSequence(n): Returns the nth number in a sequence where each number is defined as the sum of squares of the first n natural numbers. return n * (n + 1) * (2 * n + 1) // 6"},{"question":"Write a function `groupAnagrams` that takes a list of strings and returns a list of lists, where each inner list contains words that are anagrams of each other. The inner lists should be sorted in lexicographical order, and the outer list should be ordered by the first appearance of an anagram group in the input list. # Input - A list of strings, each containing only lower-case letters. # Output - A list of lists containing grouped anagrams. # Example ```python groupAnagrams([\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"]) ``` # Sample Output ```python [[\'eat\', \'tea\', \'ate\'], [\'tan\', \'nat\'], [\'bat\']] ``` # Constraints - The function should return the anagram groups in the order of their first occurrence in the input list. - Each group should be sorted lexicographically.","solution":"from collections import defaultdict def groupAnagrams(strs): Group anagrams from a list of strings. Arguments: strs -- list of strings Returns: list of lists, where each inner list contains words that are anagrams of each other. anagrams = defaultdict(list) # Dictionary to hold sorted string as key and anagram list as value for word in strs: sorted_word = \'\'.join(sorted(word)) # Get a sorted string as key anagrams[sorted_word].append(word) # Creating final result where inner lists are sorted and ordered by first appearance result = [sorted(anagrams_group) for anagrams_group in anagrams.values()] return result"},{"question":"A scientist discovered a unique sequence of integers where each number is the product of all previous numbers plus one. Starting from 1, the sequence begins as 1, 2, 3, 7, 43, and so on. Given the integer N, write a function to find the N-th number in this sequence using the following format: Input Format: The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer N. Output Format: For each test case, print the N-th number in the sequence. Constraints: 1 ≤ T ≤ 10^4 1 ≤ N ≤ 20 SAMPLE INPUT: 3 1 2 4 SAMPLE OUTPUT: 1 2 7 Note: - For N=1: The first number in the sequence is 1. - For N=2: The second number in the sequence is 1*1 + 1 = 2. - For N=4: The fourth number in the sequence is 1*1*2*3 + 1 = 7.","solution":"def unique_sequence(N): Returns the N-th number in the unique sequence. if N == 1: return 1 sequence = [1] # Start the sequence with the first number for i in range(1, N): # Each new number is the product of all previous numbers plus one product = 1 for num in sequence: product *= num next_number = product + 1 sequence.append(next_number) return sequence[-1] def find_nth_number(seq, test_cases): Given a list of test cases, compute the N-th number in the sequence for each test case. result = [] for n in test_cases: result.append(unique_sequence(n)) return result def process_input(input_data): Process the input format and return the result for each test case. lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [int(lines[i]) for i in range(1, T + 1)] output = find_nth_number(unique_sequence, test_cases) return \\"n\\".join(map(str, output))"},{"question":"A conference organizer needs to assign unique table numbers to speakers for an event. Each table number is represented by a single digit from 0 to 9. Due to an error in the system, some table numbers might have been assigned multiple times. The organizer needs help to find out which table numbers have been assigned and provide a list of these unique table numbers sorted in ascending order. You are given an array t[] of M elements which contain the table numbers. Write a function to return the list of unique table numbers sorted in ascending order. Example 1: Input: M = 5 t[ ] = {3, 3, 5, 2, 5} Output: 2 3 5 Example 2: Input: M = 6 t[ ] = {9, 1, 1, 4, 7, 7} Output: 1 4 7 9 Your Task: You don\'t need to read input or print anything. Your task is to complete the function uniqueTables() which takes the array t[] and its size M as input parameters and returns the list of unique table numbers sorted in ascending order. Expected Time Complexity: O(M log M) Expected Auxiliary Space: O(1) Constraints: 1 ≤ M ≤ 1000 0 ≤ t[i] ≤ 9","solution":"def uniqueTables(M, t): Returns a list of unique table numbers sorted in ascending order. Parameters: M: int - number of elements in the array t t: list - list of table numbers Returns: list - sorted list of unique table numbers return sorted(set(t))"},{"question":"Given an array of integers and an integer M, your task is to determine if there exists a subarray (a contiguous part of the array) whose sum is exactly equal to M. Return `True` if such a subarray exists, otherwise return `False`. Example 1: Input: arr[] = {1, 2, 3, 7, 5} M = 12 Output: True Explanation: There is a subarray (2, 3, 7) whose sum is 12. Example 2: Input: arr[] = {1, 2, 3, 4, 5} M = 9 Output: True Explanation: There is a subarray (2, 3, 4) whose sum is 9. Example 3: Input: arr[] = {1, 2, 3, 4, 5} M = 20 Output: False Explanation: There is no subarray with sum equal to 20. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `isSubarrayWithSum(arr[], N, M)` which takes the array `arr[]`, its size `N`, and an integer `M` as inputs and returns `True` if there exists a subarray with sum equal to `M`, otherwise returns `False`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 -10^4 <= arr[i] <= 10^4 -10^9 <= M <= 10^9","solution":"def is_subarray_with_sum(arr, N, M): Checks if there exists subarray with sum equal to M. Args: arr (list): The list of integers. N (int): The length of the list. M (int): The target sum. Returns: bool: True if there exists a subarray with sum equal to M, otherwise False. curr_sum = 0 prefix_sums = {} for i in range(N): curr_sum += arr[i] # Check if current sum is equal to the target sum if curr_sum == M: return True # Check if there is any subarray ending at index i # which sums to M if (curr_sum - M) in prefix_sums: return True # Add the current running sum to the prefix sums dictionary prefix_sums[curr_sum] = i return False"},{"question":"Alice and Bob are playing a game on a line represented by an array of non-negative integers. Each element in the array can be thought of as a score. The rules of the game are as follows: 1. Alice starts at the beginning of the array (position 0) and Bob starts at the end of the array (position length-1). 2. In each turn, Alice and Bob can move one step towards each other or stay at their current position. 3. When Alice and Bob are at the same position, they end the game and collect the score at that position. 4. The objective for both players is to maximize their collected score. Given the array of scores, determine the maximum score Alice and Bob can collect if they play optimally. -----Input----- The first line of input contains an integer n (1 ≤ n ≤ 1,000) — the number of elements in the array. The second line contains n non-negative integers separated by a space, representing the scores (s_0, s_1, ..., s_{n-1}), where (0 ≤ s_i ≤ 1,000) for each valid index i. -----Output----- Print a single integer — the maximum score Alice and Bob can collect. -----Examples----- Input 5 1 2 9 2 1 Output 9 Input 7 1 3 5 7 5 3 1 Output 15 -----Note----- In the first sample, Alice and Bob will both meet at the third position to collect the maximum score of 9. In the second sample, optimal play by Alice and Bob would result in them meeting in the middle at the score of 7, but since they both can ensure reaching the positions with scores 5, 5 just before and after the middle, the maximum possible score they would end up collecting is 10. (This is achieved with both Alice and Bob moving optimally over all steps.)","solution":"def max_collectable_score(scores): Returns the maximum score Alice and Bob can collect. left, right = 0, len(scores) - 1 max_score = 0 while left <= right: if scores[left] > scores[right]: max_score = max(max_score, scores[left]) left += 1 else: max_score = max(max_score, scores[right]) right -= 1 return max_score"},{"question":"Sophie has recently started working at a company called DataSecure, where she needs to manage data backups. Each day, Sophie initiates backup of critical data files, and the duration to backup each file is given. At the end of the day, she records the total time spent on backup. However, because of varying workloads, Sophie sometimes forgets to stop the timer after the last file has been backed up, leading to erroneous entries. Sophie\'s manager has asked her to ensure that no duplicate entries are counted and that the records accurately reflect the different times spent on backups each day. Write a function `uniqueBackupTimes` that takes a list of integers `backupTimes` representing the recorded backup times for several days. The function should return a list of unique backup times sorted in ascending order. Example 1: Input: backupTimes = [25, 42, 42, 20, 25, 60, 60] Output: [20, 25, 42, 60] Explanation: The unique sorted backup times are [20, 25, 42, 60]. Example 2: Input: backupTimes = [90, 45, 45, 30] Output: [30, 45, 90] Explanation: The unique sorted backup times are [30, 45, 90]. Your Task: You do not need to read input or print anything. Complete the function `uniqueBackupTimes()` which takes a list of integers `backupTimes` as input and returns a list of unique sorted integers. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(backupTimes) ≤ 1000 1 ≤ backupTimes[i] ≤ 10000","solution":"def uniqueBackupTimes(backupTimes): Returns a sorted list of unique backup times. # Convert the list into a set to remove duplicates unique_times = set(backupTimes) # Convert back to list and sort sorted_unique_times = sorted(unique_times) return sorted_unique_times"},{"question":"Write a function that, given a matrix of integers, rotates the matrix 90 degrees clockwise. More formally, given an n x n matrix, your task is to output the original matrix after rotating it 90 degrees clockwise. Input The first line contains a single integer n (1 ≤ n ≤ 100), which represents the size of the matrix. The next n lines each contain n integers separated by spaces, representing the matrix values. Output Output the n x n matrix after being rotated 90 degrees clockwise. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 2 1 2 3 4 Output 3 1 4 2","solution":"def rotate_matrix(matrix): Rotates an n x n matrix 90 degrees clockwise. Args: matrix (list of list of int): The input n x n matrix. Returns: list of list of int: The rotated matrix. n = len(matrix) # Create a new matrix to hold the rotated values rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - i - 1] = matrix[i][j] return rotated"},{"question":"A popular online bookstore rewards customers with points for purchasing books. The bookstore offers multiple countries as delivery destinations and each country has a different point multiplier. Plus, the bookstore offers special promotions on certain days where the points are doubled. To simplify the problem, let\'s assume the following: - A list of purchased book prices is provided. - A dictionary that maps country codes to their point multipliers is given. - There is a boolean flag indicates whether it is a special promotion day. You need to write a program that calculates the total points accumulated by a customer given these inputs. The points for each book are calculated in the following manner: - Sum up the prices of all the books bought. - Multiply this sum by the country’s point multiplier. - If it is a special promotion day, double the points. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of purchased books. The second line contains n space-separated integers representing the prices of the books (each price 1 ≤ price ≤ 1000). The third line contains a string representing the country code (a two-letter code). The fourth line contains a string \\"YES\\" or \\"NO\\" indicating whether it is a special promotion day. The list of country multipliers is as follows: US: 1 CA: 1.2 UK: 1.3 AU: 1.5 -----Output----- Print a single integer representing the total points accumulated by the customer. -----Examples----- Input 3 20 30 40 US NO Output 90 Input 5 10 10 10 10 10 CA YES Output 120 Input 4 100 200 300 400 UK NO Output 1300 Input 2 50 50 AU YES Output 300","solution":"def calculate_points(num_books, book_prices, country_code, is_special_day): # Define the country multipliers country_multipliers = { \\"US\\": 1, \\"CA\\": 1.2, \\"UK\\": 1.3, \\"AU\\": 1.5 } # Sum up the prices of the books total_price = sum(book_prices) # Get the country\'s point multiplier multiplier = country_multipliers.get(country_code, 1) # Calculate the points points = total_price * multiplier # Double the points if it is a special promotion day if is_special_day: points *= 2 return int(points) # Example input num_books = 3 book_prices = [20, 30, 40] country_code = \\"US\\" is_special_day = False print(calculate_points(num_books, book_prices, country_code, is_special_day)) # Output: 90 num_books = 5 book_prices = [10, 10, 10, 10, 10] country_code = \\"CA\\" is_special_day = True print(calculate_points(num_books, book_prices, country_code, is_special_day)) # Output: 120"},{"question":"You are given a string S consisting of letters and digits. You need to extract and return the maximum numeric value present in the string. If there are no numeric values in the string, return -1. Example 1: Input: S = \\"abc123xyz456def\\" Output: 456 Explanation: There are two numeric values \\"123\\" and \\"456\\" in the string. The maximum value among them is \\"456\\". Example 2: Input: S = \\"abcdef\\" Output: -1 Explanation: As there are no numeric values in the string, return -1. Your Task: Your task is to complete the function extractMax() which takes a string S as an argument and returns the maximum numeric value present in the string. If there are no numeric values, return -1. Expected Time Complexity: O(N) where N is the length of the string S Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 1000","solution":"import re def extractMax(S): Returns the maximum numeric value present in the string S. If there are no numeric values, returns -1. # Extract all numbers using regex numbers = re.findall(r\'d+\', S) # If there are no numbers, return -1 if not numbers: return -1 # Convert the numbers to integers and return the maximum return max(map(int, numbers))"},{"question":"Create a right-angled triangle with a height of H cm. Draw each 1-cm segment of the triangle using asterisk \'*\'. Constraints * 1 ≤ H ≤ 300 Input The input consists of multiple datasets. Each dataset consists of a single integer H. The input ends with a single 0 (when H is zero). Output For each dataset, print the right-angled triangle with height H, with each row i containing i asterisks. Print a blank line after each dataset. Example Input 3 5 2 0 Output * ** *** * ** *** **** ***** * **","solution":"def create_triangle(height): Creates a right-angled triangle with the given height H. Each row i contains i asterisks. if height == 0: return \'\' result = [] for i in range(1, height + 1): result.append(\'*\' * i) return \'n\'.join(result) + \'n\' def triangles_from_input(heights): Given a list of heights, returns a string with the right-angled triangles. Each triangle is separated by a blank line. return \'n\'.join(create_triangle(h) for h in heights if h != 0) + \'n\'"},{"question":"You are given a list of integers. Create a new list that contains only the elements from the original list that are divisible by 3. Input The first line of input contains an integer n (1 ≤ n ≤ 100), representing the number of elements in the list. The second line of input contains n integers separated by a space. Each integer in the list is between -1000 and 1000 inclusive. Output Output the elements that are divisible by 3 in the same order they appear in the input list. If no elements are divisible by 3, output an empty list. Examples Input 6 1 3 5 9 12 15 Output 3 9 12 15 Input 5 4 7 10 13 16 Output","solution":"def filter_divisible_by_3(numbers): Filters out the numbers divisible by 3 from a given list. :param numbers: List of integers :return: New list containing only numbers divisible by 3 return [num for num in numbers if num % 3 == 0] def process_input(n, sequence): Process the input to filter and return the elements divisible by 3. :param n: Number of elements in sequence :param sequence: List of integers :return: List of integers divisible by 3 if n != len(sequence): raise ValueError(\\"The number of elements does not match n.\\") return filter_divisible_by_3(sequence)"},{"question":"You are given an array of integers where each integer appears twice except for one integer, which appears exactly once. Your task is to single out the integer that appears only once. Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 2⋅10^5), the length of the array. - The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9). It is guaranteed that exactly one integer appears only once, and all other integers appear exactly twice. Output Output the integer that appears only once. Example Input 5 1 2 3 2 1 Output 3 Input 9 4 6 4 8 7 7 6 9 8 Output 9 Note In the first example, the integer that appears only once is 3. In the second example, the integer that appears only once is 9.","solution":"def find_singleton(arr): Finds the integer that appears exactly once in the array. All other integers in the array appear twice. result = 0 for num in arr: result ^= num return result"},{"question":"You are given a sequence of integers where each integer represents the height of a tree. Your task is to determine the maximum number of trees that can be cut such that no two cut trees are adjacent to each other. ------ Input ------ The first line of input contains a single integer T (1 le T le 10), representing the number of test cases. Each test case consists of two lines: - The first line contains a single integer N (1 le N le 10^5), the number of trees. - The second line contains N integers, where the i-th integer h_i (1 le h_i le 10^9) represents the height of the i-th tree. ------ Output ------ For each test case, output a single integer, the maximum number of trees that can be cut such that no two cut trees are adjacent. ------ Sample Input ------ 2 5 1 2 3 4 5 6 3 4 5 6 7 8 ------ Sample Output ------ 3 4 ------ Explanation ------ In the first test case, one optimal way to cut the trees is to select trees with heights [1, 3, 5], so the maximum number of trees cut is 3. In the second test case, one optimal way to cut the trees is to select trees with heights [3, 5, 7 or 4,6,8], so the maximum number of trees cut is 4.","solution":"def max_trees_cut(test_cases): results = [] for n, heights in test_cases: results.append((n + 1) // 2) return results"},{"question":"You are given an array of integers representing different tasks, where each integer represents the time required to complete the corresponding task. You have a limited amount of consecutive hours in which you can complete the tasks. Your goal is to choose the maximum number of tasks you can complete within the given time frame, so that you maximize the number of tasks completed, while ensuring that their total time does not exceed the given limit. Input The first line of the input contains two integers `n` and `T` (1 le n le 10^5, 1 le T le 10^9) — the number of tasks and the maximum total amount of time allowed, respectively. The second line of the input contains `n` integers t_1, t_2, dots, t_n (1 le t_i le 10^9), where t_i is the time required to complete the i-th task. Output Print one integer — the maximum number of tasks that can be completed within the given time frame. Example Input 6 15 2 3 5 8 12 1 Output 4 Input 5 7 4 3 5 6 7 Output 2 Input 4 10 2 2 2 2 Output 4 Note In the first example, you can complete tasks with times 2, 3, 5, and 1, which makes a total of 4 tasks and the sum of their times is 11 (which is within the limit). In the second example, you can complete tasks with times 3 and 4, making a total of 2 tasks and their sum is 7 (which is within the limit). In the third example, you can complete all the tasks as their total time sums up to 8, allowing you to complete all 4 tasks within the given time limit.","solution":"def max_tasks(n, T, times): Returns the maximum number of tasks that can be completed within the given time frame. :param n: int: number of tasks :param T: int: maximum total time allowed :param times: list of int: time required for each task :return: int: maximum number of tasks that can be completed times.sort() total_time = 0 count = 0 for time in times: if total_time + time <= T: total_time += time count += 1 else: break return count"},{"question":"Alex and Bob are playing a game on a rectangular grid with dimensions m x n. The grid consists of m rows and n columns, initially filled with zeros. In each turn, the player can select any cell on the grid and increment its value by 1. The goal of the game is to be the first player to increment the value of any cell to k. Alex always starts the game. Both players play optimally. Given the dimensions of the grid and the value of k, determine the winner of the game. -----Input----- The first line contains three integers m, n, and k (1 ≤ m, n ≤ 100, 1 ≤ k ≤ 1000) — the number of rows, columns, and the target value for a cell. -----Output----- Output the name of the winner: \\"Alex\\" or \\"Bob\\". -----Examples----- Input 2 3 3 Output Alex Input 4 4 2 Output Alex Input 3 3 5 Output Bob -----Note----- In the first sample, Alex can increment the value of a cell to k (which is 3) by making three moves on the same cell (1, 1). No matter how Bob plays, Alex will always be able to reach k first in this case. In the second sample, to reach k = 2, Alex will always have the opportunity to increment a cell to the second increment first, thus winning the game. In the third sample, both players will keep incrementing cells optimally, and Bob will end up having the last increment (fifth move) to reach k, making him the winner.","solution":"def determine_winner(m, n, k): Determine the winner of the game given the grid dimensions m x n and the target value k. Alex starts first and both play optimally. # Each cell needs k increments to reach the target # Since Alex starts, he will win if k is odd as he makes the last increment # Otherwise, Bob will win. if k % 2 == 1: return \\"Alex\\" else: return \\"Bob\\""},{"question":"Mark is fascinated by sequences and how they evolve over time. He recently came across an intriguing type of sequence called the \\"Circular Sequence\\". Given a sequence of integers, we can rotate it any number of times (including zero) in either direction. A rotation by k to the right moves each element to the position k places to its right, with wrap-around. Mark wants to explore the properties of these circular sequences. Specifically, he wishes to find the smallest lexicographical sequence that can be obtained by rotating the given sequence. # Problem Statement You are given a sequence of n integers. Your task is to write a program that finds the lexicographically smallest sequence obtainable by rotating the given sequence. # Input format The first line contains an integer n — the length of the sequence. The second line contains n integers — the elements of the sequence. # Output format Output a single line containing the lexicographically smallest sequence obtainable by rotating the given sequence. The sequence should be printed as space-separated integers. # Constraints 1 ≤ n ≤ 1000 -1000 ≤ a_i ≤ 1000 (for each element a_i in the sequence) # Sample Input ``` 5 3 1 2 4 5 ``` # Sample Output ``` 1 2 4 5 3 ``` # Explanation By rotating the sequence [3, 1, 2, 4, 5], the lexicographically smallest sequence we get is [1, 2, 4, 5, 3] which can be obtained by rotating the sequence right by 1 position.","solution":"def smallest_lexicographical_rotation(sequence): Given a sequence of integers, returns the lexicographically smallest sequence obtainable by rotating the sequence. n = len(sequence) double_sequence = sequence + sequence # Concatenate sequence to itself min_rotation = sequence # Assume the initial sequence is the smallest for i in range(1, n): current_rotation = double_sequence[i:i + n] if current_rotation < min_rotation: min_rotation = current_rotation return min_rotation"},{"question":"Geek wants to organize a party and invites N friends. Each friend can arrive at the party at a certain time, stay for a specific duration, and then leave. You need to determine the maximum number of friends that can be present at the party at the same time. Each friend has an arrival time and departure time and is represented by a pair (arrival_time, departure_time). Example 1: Input: n = 3 times = [[1, 4], [2, 5], [6, 8]] Output: 2 Explanation: Friend 1 stays from time 1 to 4, Friend 2 stays from time 2 to 5, and Friend 3 stays from 6 to 8. Friends 1 and 2 overlap between time 2 and 4. Example 2: Input: n = 5 times = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]] Output: 1 Explanation: None of the friends have overlapping times, so only one friend can be present at each time. Your Task: You do not need to read input or print anything. Your task is to complete the function maxFriends() which takes an integer n and a list of pairs times representing arrival and departure times, and returns the maximum number of friends that can be present at the party at the same time. Expected Time Complexity: O(n*log(n)) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^4 1 ≤ arrival_time < departure_time ≤ 10^9","solution":"def maxFriends(n, times): This function returns the maximum number of friends that can be present at the party at the same time. events = [] # Create a list of events, marking arrivals and departures for arrival, departure in times: events.append((arrival, 1)) # 1 indicates arrival events.append((departure, -1)) # -1 indicates departure # Sort the events first by time, then by type (departure before arrival if same time) events.sort(key=lambda x: (x[0], x[1])) max_friends = 0 current_friends = 0 for event in events: current_friends += event[1] max_friends = max(max_friends, current_friends) return max_friends"},{"question":"A group of friends is planning to go on a hiking adventure. To make the hike more interesting, they decide to follow a predefined path on a mountain grid. The mountain grid can be represented as an MxN grid of mountains, where each cell contains a non-negative integer altitude value. The friends will start at the top-left corner of the grid (0,0) and aim to reach the bottom-right corner (M-1,N-1). They can move from any cell to its right cell or its bottom cell, given that the next cell they move to has an altitude value greater than or equal to the current cell they are on (i.e., they can only move to a cell with the same or higher altitude). Your task is to determine if there is a valid path for the friends to reach the destination from the starting point following the given movement constraints. ------ Input Format ------ - First line of input contains two integers M and N, denoting the dimensions of the mountain grid. - The next M lines each contain N integers, denoting the altitude values of the grid cells. ------ Output Format ------ Output a single line answer containing \\"YES\\" if there is a valid path from the top-left to the bottom-right corner, otherwise \\"NO\\". ------ Constraints ------ 1 ≤ M, N ≤ 500 0 ≤ altitude values in grid cells ≤ 10^4 ----- Sample Input 1 ------ 3 3 1 2 3 6 5 2 7 6 8 ----- Sample Output 1 ------ YES ----- Sample Input 2 ------ 3 3 3 2 1 2 4 3 1 5 6 ----- Sample Output 2 ------ NO ----- Explanation 1 ------ Sample Input 1: There is a valid path for the friends to follow: (0,0) rightarrow (0,1) rightarrow (0,2) rightarrow (1,2) rightarrow (2,2). At each step, the altitude value of the next cell is greater than or equal to the current cell. Sample Input 2: There is no valid path for the friends to follow to reach the destination, as all possible paths will encounter a cell with a lower altitude value than the current cell.","solution":"def can_reach_destination(m, n, grid): Determines if there is a valid path from the top-left to the bottom-right corner of the grid. if not grid or not grid[0]: return \\"NO\\" from collections import deque directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if x == m - 1 and y == n - 1: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] >= grid[x][y]: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\""},{"question":"Given an array of integers representing the stock prices of a company in chronological order, write a function to determine the maximum profit that can be made by buying and selling the stock exactly once. You must buy before you sell. Input: The first line of input gives an integer t, the number of test cases. For each test case, there is a single line containing numbers separated by spaces which represent the stock prices. Output: For each test case, output a single integer representing the maximum profit that can be achieved. If no profit is possible, return 0. SAMPLE INPUT 2 7 1 5 3 6 4 7 6 4 3 1 SAMPLE OUTPUT 5 0","solution":"def max_profit(stock_prices): Given a list of stock prices, determine the maximum profit that can be achieved by buying and selling the stock exactly once. :param stock_prices: List[int] - List of stock prices :return: int - Maximum profit if not stock_prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in stock_prices: min_price = min(min_price, price) profit = price - min_price max_profit = max(max_profit, profit) return max_profit def process_test_cases(t, test_cases): Process multiple test cases to find maximum profit for each. :param t: int - Number of test cases :param test_cases: List[List[int]] - List of stock prices for each test case :return: List[int] - List of maximum profits for each test case return [max_profit(prices) for prices in test_cases]"},{"question":"You are given an array b of m integers. You need to check if the sum of any two discrete subarrays from the array is equal. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^4). Description of the test cases follows. The first line of each test case contains a single integer m (1 leq m leq 10^3) — the size of the array. The next line of each test case contains m integers b_1, b_2, ldots, b_m (-10^6 le b_i le 10^6). It is guaranteed that the sum of m over all test cases does not exceed 10^4. -----Output----- For each test case, on a new line output \\"YES\\" if the condition is satisfied for the given array, and \\"NO\\" otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input 2 4 2 4 -2 4 3 1 3 2 Output YES NO -----Note----- In test case 1, the subarrays [2, 4] and [4, -2] both have the sum 6. In test case 2, there are no two discrete subarrays that have equal sums.","solution":"def subarray_sum_exists(test_cases): results = [] for case in test_cases: m, array = case if m < 2: results.append(\\"NO\\") continue sum_counts = {} prefix_sum = 0 for i in range(m): prefix_sum += array[i] for j in range(i + 1, m): subarray_sum = prefix_sum + array[j] if subarray_sum in sum_counts: results.append(\\"YES\\") break sum_counts[subarray_sum] = True else: continue break else: results.append(\\"NO\\") return results # Function to parse input string and return the test cases def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): m = int(lines[index]) array = list(map(int, lines[index + 1].split())) test_cases.append((m, array)) index += 2 return test_cases # Function to format output for the solution def format_output(results): return \\"n\\".join(results)"},{"question":"In a magical forest, there is a tree with N nodes, and each node is assigned a distinct integer from 1 to N denoting its power. The forest is governed by a sacred rule: whenever two neighboring nodes are chosen, their powers combine to form a new node with power equal to the product of the two original nodes\' powers modulo M. Merlin, the wizard, wants to know the minimum power that can be obtained by repeatedly combining pairs of neighboring nodes until only one node remains. ------ Input Format ------ - First line contains two integers T and M, the number of test cases and the modulo value. - Each test case consists of a single integer N, denoting the number of nodes in the tree. ------ Output Format ------ For each test case, output a single integer: the minimum power that can be obtained modulo M after combining all nodes. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ N ≤ 10^{6} 1 ≤ M ≤ 10^{9} ----- Sample Input 1 ------ 2 100 3 4 ----- Sample Output 1 ------ 6 24 ----- Explanation 1 ------ In the first test case for N=3, the powers are {1, 2, 3}. Combining nodes 1 and 2 gives 2. Combining the result 2 with 3 gives 6. In the second test case for N=4, the powers are {1, 2, 3, 4}. Combining nodes in the order gives (1*2) % 100 = 2, (2*3) % 100 = 6, (6*4) % 100 = 24.","solution":"def minimum_power(T, M, test_cases): Calculates the minimum power that can be obtained by combining pairs of neighboring nodes. :param T: Number of test cases :param M: Modulo value :param test_cases: List of integers where each integer denotes the number of nodes in the tree :return: List of minimum powers for each test case def factorial_mod(n, m): result = 1 for i in range(1, n + 1): result = (result * i) % m return result results = [] for n in test_cases: results.append(factorial_mod(n, M)) return results"},{"question":"Given a list of integers, each element appears thrice except for one element which appears only once. Write a function to find that single element which appears only once. Example 1: Input: [2, 2, 3, 2] Output: 3 Explanation: 3 is the element that appears only once. Example 2: Input: [0, 1, 0, 1, 0, 1, 99] Output: 99 Explanation: 99 is the element that appears only once. Your Task: You don\'t need to read input or print anything. Your task is to implement the function singleNumber(arr) which takes a list of integers as input and returns the integer that appears only once. Expected Time Complexity: O(n), n is the length of the list Expected Space Complexity: O(1) Constraints: 1 <= n <= 3 * 10^4 -2^31 <= arr[i] <= 2^31 - 1","solution":"def singleNumber(arr): Returns the single element that appears only once in the list while all other elements appear thrice. ones, twos = 0, 0 for num in arr: # `ones` keeps track of elements that appeared once # `twos` keeps track of elements that appeared twice ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"A team of n people is working on an important research project. Each person has been assigned a unique ID number ranging from 1 to n. Every pair of adjacent IDs must have their IDs swapped. If n is odd, the last person\'s ID remains unchanged. Write a program to determine the new order of IDs after applying the adjacent swapping procedure. -----Input----- The first line contains an integer T, the number of test cases. Each of the following T lines contains an integer n denoting the number of people. -----Output----- For each test case, output a line containing the space-separated new order of IDs. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ n ≤ 1000 -----Example----- Input: 3 2 3 4 Output: 2 1 2 1 3 2 1 4 3 -----Explanation----- Test case 1. We have n = 2. We swap the IDs of adjacent people. The new order is 2 1. Test case 2. We have n = 3. IDs of the first two people are swapped, resulting in 2 1, but the last person\'s ID remains unchanged. The new order is 2 1 3. Test case 3. We have n = 4. IDs of the first two pairs of adjacent people are swapped, resulting in 2 1 and 4 3. The new order is 2 1 4 3.","solution":"def swap_adjacent_ids(t, test_cases): results = [] for n in test_cases: ids = list(range(1, n + 1)) for i in range(0, n - 1, 2): ids[i], ids[i + 1] = ids[i + 1], ids[i] results.append(ids) return results"},{"question":"Arjun is fascinated by numbers and loves creating new sequences. Recently, he came up with an interesting set of rules to generate a sequence of numbers, which he calls \\"Magical Sequence.\\" Given a starting integer N, the sequence is generated as follows: 1. If N is even, divide it by 2 to get the next number in the sequence. 2. If N is odd, multiply it by 3 and add 1 to get the next number in the sequence. 3. Repeat the process with the new number. The sequence stops when it reaches the number 1. Your task is to find out the length of the \\"Magical Sequence\\" starting from a given integer N. ------ Input ------ The first line contains a single integer N, the starting number of the sequence. ------ Output ------ Output a single integer, the length of the \\"Magical Sequence\\" starting from N. ------ Constraints ------ 1 ≤ N ≤ 10^9 ------ Sample Input 1 ------ 6 ------ Sample Output 1 ------ 9 ------ Explanation 1 ------ The sequence starting from 6 is: 6 -> 3 -> 10 -> 5 -> 16 -> 8 -> 4 -> 2 -> 1. The length is 9. ------ Sample Input 2 ------ 1 ------ Sample Output 2 ------ 1 ------ Explanation 2 ------ The sequence starting from 1 is: 1. The length is 1.","solution":"def magical_sequence_length(N): Returns the length of the magical sequence starting from N. length = 1 # We start counting with the initial value N while N != 1: if N % 2 == 0: N //= 2 else: N = 3 * N + 1 length += 1 return length"},{"question":"Implement a Stack Data Structure. Constraints * The stack should support push, pop, and peek operations. * Stack operations must perform within O(1) time complexity. * Use a static array to implement the stack. The maximum size of the stack is 100. Input The input will consist of a series of operations to be executed on the stack. Each operation will be on a separate line. The input will be terminated by EOF. The operations are as follows: - \\"push X\\" (where X is an integer to be pushed onto the stack) - \\"pop\\" (to remove the top element from the stack) - \\"peek\\" (to get the value of the top element without removing it) Output For each \\"pop\\" or \\"peek\\" operation, output the result on a new line. If an operation cannot be performed (e.g., pop or peek on an empty stack), output \\"Empty\\". Example Input push 10 push 20 peek pop pop pop Output 20 20 10 Empty","solution":"class Stack: A Stack data structure with a maximum size of 100, supporting push, pop, and peek operations in O(1) time complexity. def __init__(self): self.stack = [0] * 100 self.top = -1 # indicates the index of the top element; -1 means empty stack def push(self, value): if self.top < 99: # Check if stack is not full self.top += 1 self.stack[self.top] = value else: raise IndexError(\\"Stack overflow\\") def pop(self): if self.top == -1: return \\"Empty\\" else: top_value = self.stack[self.top] self.top -= 1 return top_value def peek(self): if self.top == -1: return \\"Empty\\" else: return self.stack[self.top] def process_commands(commands): stack = Stack() results = [] for command in commands: if command.startswith(\\"push\\"): _, value = command.split() stack.push(int(value)) elif command == \\"pop\\": results.append(stack.pop()) elif command == \\"peek\\": results.append(stack.peek()) return results"},{"question":"This is a sequential problem. You need to simulate a sequence of events and calculate the final state based on given rules. A robot is navigating through a rectangular grid with dimensions `n x m` (1 ≤ n, m ≤ 100). The robot starts at the top-left corner of the grid (1, 1) and can move in four possible directions: - \'U\' (up): moves one cell upwards - \'D\' (down): moves one cell downwards - \'L\' (left): moves one cell left - \'R\' (right): moves one cell right However, the robot cannot move outside the boundaries of the grid. If a move instruction would take the robot out of the grid\'s bounds, the robot simply ignores that instruction and remains in its current cell. You are given a sequence of instructions that the robot follows. Your task is to determine the final position of the robot after executing all the instructions. Input The first line contains two integers n and m, representing the number of rows and columns of the grid. The second line contains a string of no more than 100 characters consisting of the characters \'U\', \'D\', \'L\', \'R\'. Output Output two integers, the final row and column of the robot after following all the instructions. Example Input 3 3 RRDDLU Output 2 2 Note In the example provided, the robot follows the sequence of moves as follows: - \'R\' moves from (1, 1) to (1, 2) - \'R\' moves from (1, 2) to (1, 3) - \'D\' moves from (1, 3) to (2, 3) - \'D\' moves from (2, 3) to (3, 3) - \'L\' moves from (3, 3) to (3, 2) - \'U\' moves from (3, 2) to (2, 2)","solution":"def final_position(n, m, instructions): Find the final position of the robot after executing the given instructions. Parameters: n (int): number of rows in the grid m (int): number of columns in the grid instructions (str): sequence of instructions (\'U\', \'D\', \'L\', \'R\') Returns: tuple: final row and column of the robot # Starting position row, col = 1, 1 # Mapping movement to coordinate changes moves = {\'U\': (-1, 0), \'D\': (1, 0), \'L\': (0, -1), \'R\': (0, 1)} for instruction in instructions: if instruction in moves: new_row = row + moves[instruction][0] new_col = col + moves[instruction][1] # Check if the new position is within bounds if 1 <= new_row <= n and 1 <= new_col <= m: row, col = new_row, new_col return row, col"},{"question":"Given a list of integers, find and return a new list that contains all the elements of the original list but with each element squared and sorted in non-decreasing order. Example: Input: [-4, -1, 0, 3, 10] Output: [0, 1, 9, 16, 100] Input: [-7, -3, 2, 3, 11] Output: [4, 9, 9, 49, 121]","solution":"def square_and_sort(nums): Takes a list of integers, squares each element, and returns a new list with the squared elements sorted in non-decreasing order. Parameters: nums (list): A list of integers. Returns: list: A new list of squared integers sorted in non-decreasing order. squared_nums = [x ** 2 for x in nums] squared_nums.sort() return squared_nums"},{"question":"A city has N intersections connected by M bidirectional roads. The goal is to make all intersections reachable from any other intersection after removing some roads. Determine the minimum number of roads that need to be removed to achieve this. Input The first line contains two integers N and M. The next M lines each contain two space-separated integers u and v, indicating a road between intersections u and v. Output Output one integer, the minimum number of roads to remove. Constraints 1 ≤ N ≤ 1000 0 ≤ M ≤ 5000 1 ≤ u, v ≤ N SAMPLE INPUT 5 5 1 2 1 3 2 3 3 4 4 5 SAMPLE OUTPUT 1 Explanation By removing the road between intersections 3 and 4, all intersections will still be reachable from any other intersection. No other single road removal can achieve this minimal disconnection.","solution":"def find_min_roads_to_remove(N, M, roads): def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): root_x = find_parent(parent, x) root_y = find_parent(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 parent = list(range(N)) rank = [0] * N removed_roads = 0 for u, v in roads: u -= 1 v -= 1 root_u = find_parent(parent, u) root_v = find_parent(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) else: removed_roads += 1 return removed_roads"},{"question":"A new software company, TimeWarp Inc., wants to capture the time it takes for their jobs to complete running on the server. They have a system that logs start and end times for each job. They decided to hire you to write a program that helps them compute the duration for each job. The time format in the logs is in \\"HH:MM:SS\\". To simplify their analytics, they want the program to calculate the duration in seconds from the start time to the end time. Your task is to write a function that takes two time strings in the \\"HH:MM:SS\\" format, representing the start time and the end time of a job, and returns the duration of the job in seconds. Assume the times are on the same day and the end time is always later than the start time. Input: - A string representing the start time \\"HH:MM:SS\\". - A string representing the end time \\"HH:MM:SS\\". Output: - An integer representing the duration of the job in seconds. Example: Input: \\"12:30:15\\" \\"14:45:30\\" Output: 8115 Explanation: Start time: 12:30:15 End time: 14:45:30 Duration: (14*3600 + 45*60 + 30) - (12*3600 + 30*60 + 15) = 53130 - 45015 = 8115 seconds","solution":"def calculate_duration(start_time, end_time): Returns the duration between start_time and end_time in seconds. Parameters: start_time (str): Start time in HH:MM:SS format end_time (str): End time in HH:MM:SS format Returns: int: Duration in seconds start_h, start_m, start_s = map(int, start_time.split(\':\')) end_h, end_m, end_s = map(int, end_time.split(\':\')) start_total_seconds = start_h * 3600 + start_m * 60 + start_s end_total_seconds = end_h * 3600 + end_m * 60 + end_s return end_total_seconds - start_total_seconds"},{"question":"Imagine you are given a grid of size m x n. Each cell in the grid contains a non-negative integer representing the energy level of that cell. The challenge is to find the maximum possible energy that can be collected starting from the top-left corner (cell (1,1)) and ending at the bottom-right corner (cell (m,n)). You can only move to the right or down from any given cell. You need to find the path that maximizes the sum of the energy levels of the cells visited. Constraints * 1 leq m, n leq 1000 * 0 leq grid[i][j] leq 10^6 Input Input is given from Standard Input in the following format: m n grid_1_1 grid_1_2 ... grid_1_n grid_2_1 grid_2_2 ... grid_2_n : grid_m_1 grid_m_2 ... grid_m_n Output Print a single integer representing the maximum energy that can be collected. Example Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Explanation The optimal path to collect the maximum energy is 1 → 4 → 7 → 8 → 9, which sums up to 29.","solution":"def max_energy(m, n, grid): Calculates the maximum possible energy that can be collected starting from the top-left corner and ending at the bottom-right corner by only moving right or down. :param m: Number of rows in the grid :param n: Number of columns in the grid :param grid: 2D list representing the energy levels in the grid :return: Maximum collected energy dp = [[0]*n for _ in range(m)] dp[0][0] = grid[0][0] # Fill first row for j in range(1, n): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill first column for i in range(1, m): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[m-1][n-1]"},{"question":"In a small town, there is an inter-village competition to build the tallest lookout tower using wooden blocks. The blocks have different lengths, and only blocks with the same length can be stacked on top of each other. Each block has a unique identifier, a length, and a weight capacity (how much total weight it can support). The goal is to determine the height of the tallest possible lookout tower that can be built. -----Input----- The first line contains an integer N (1 le N le 100), the number of blocks. Each of the following N lines contains three integers id, length, and weightCapacity (1 le id le 100, 1 le length le 100, 1 le weightCapacity le 1000), representing the identifier, length, and weight capacity of a block respectively. All identifiers are distinct. -----Output----- Output the height of the tallest lookout tower that can be built. -----Explanation of Sample Data----- In the first example, the two blocks with lengths 2 can be stacked together. In the second example, stacking the blocks with lengths 3 will result in the tallest tower. -----Examples----- Sample Input 1: 3 1 2 100 2 2 200 3 3 150 Sample Output 1: 2 Sample Input 2: 4 1 1 100 2 3 200 3 1 150 4 3 100 Sample Output 2: 2","solution":"def tallest_tower(n, blocks): blocks_by_length = {} for block in blocks: id, length, weight_capacity = block if length not in blocks_by_length: blocks_by_length[length] = [] blocks_by_length[length].append(block) tallest_height = 0 for length, block_list in blocks_by_length.items(): tallest_height = max(tallest_height, len(block_list)) return tallest_height # Example Usage: # n = 4 # blocks = [ # [1, 1, 100], # [2, 3, 200], # [3, 1, 150], # [4, 3, 100] # ] # print(tallest_tower(n, blocks)) # Output: 2"},{"question":"Develop a program to identify the common prime factors of two given numbers. INPUT: The first line contains the number of test cases t. For each test case, there are two space-separated integers, a and b. OUTPUT: For each test case, output the common prime factors of the two numbers as a space-separated string. If there are no common prime factors, output \\"None\\". Constraints: 1 ≤ t ≤ 50 2 ≤ a, b ≤ 100 SAMPLE INPUT: 2 28 35 15 25 SAMPLE OUTPUT: 7 5","solution":"def gcd(a, b): while b != 0: a, b = b, a % b return a def prime_factors(n): i = 2 factors = set() while i * i <= n: if n % i: i += 1 else: n //= i factors.add(i) if n > 1: factors.add(n) return factors def common_prime_factors(a, b): gcd_ab = gcd(a, b) common_factors = prime_factors(gcd_ab) if common_factors: return \' \'.join(map(str, sorted(common_factors))) else: return \'None\' def main(): t = int(input()) results = [] for _ in range(t): a, b = map(int, input().split()) results.append(common_prime_factors(a, b)) for result in results: print(result)"},{"question":"In a certain kingdom, messages are encrypted using a unique system. The system works by converting each letter of the message into its corresponding position in the alphabet (A=1, B=2, ..., Z=26). The message is then encoded as a series of integers. For instance, the message \\"HELLO\\" is encoded as 8 5 12 12 15. Write a function that takes an encrypted message as input and returns the decrypted message in uppercase letters. **Function signature:** ```python def decrypt_message(encrypted_message: List[int]) -> str: ``` # Input - A single list of integers representing the encrypted message. Each integer is in the range 1 to 26. - The length of the list is at least 1 and at most 10,000. # Output - A single string representing the decrypted message in uppercase letters. # Constraints - The input list contains only integers from 1 to 26. - The length of the input list, l, is such that 1 ≤ l ≤ 10,000. # Example Input ```python [8, 5, 12, 12, 15] ``` Output ```python \\"HELLO\\" ``` Input ```python [1, 1, 1, 1, 1] ``` Output ```python \\"AAAAA\\" ``` Input ```python [20, 9, 13, 5] ``` Output ```python \\"TIME\\" ```","solution":"from typing import List def decrypt_message(encrypted_message: List[int]) -> str: Decrypts a list of integers representing positions in the alphabet into a string of uppercase letters. Args: encrypted_message (List[int]): A list of integers where 1 corresponds to \'A\', 2 to \'B\', etc. Returns: str: The decrypted message as a string of uppercase letters. decrypted_message = \'\'.join(chr(num + 64) for num in encrypted_message) return decrypted_message"},{"question":"You are given an array of integers representing the height of histogram bars, where the width of each bar is 1. Write an algorithm to find the maximum rectangular area that can be formed within the histogram. Input: An array of integers `heights` where `heights[i]` is the height of the `i-th` bar in the histogram. Output: The integer representing the maximum rectangular area within the given histogram. Example 1: Input: heights = [2, 1, 5, 6, 2, 3] Output: 10 Explanation: The maximum rectangular area is formed by the bars at indices 2 and 3 with height 5 and 6. Example 2: Input: heights = [2, 4] Output: 4 Explanation: The maximum rectangular area is formed by the bar at index 1 with height 4. Your Task: You need to implement the function `maxHistogramArea(heights)` which takes an array of integers `heights` as input, and returns an integer representing the maximum rectangular area within the histogram. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 1 <= heights.length <= 10^5 - 0 <= heights[i] <= 10^4","solution":"def maxHistogramArea(heights): Returns the maximum rectangular area in the histogram defined by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area"},{"question":"Given a grid of size n times n filled with integers, you need to perform m operations. Each operation consists of swapping two rows of the grid. After all operations are performed, find the sum of the integers in each row. -----Input----- The first line contains two integers n and m (1 leq n, m leq 200), where n is the size of the grid and m is the number of operations. The next n lines each contain n integers, representing the integers in the grid. Each of the following m lines contains two integers r1 and r2 (1 leq r1, r2 leq n), indicating that you need to swap row r1 with row r2. -----Output----- Output n lines. Each line should contain a single integer, representing the sum of the integers in each row after all operations are performed. -----Examples----- Sample Input: 3 2 3 1 4 2 5 6 7 8 9 1 3 2 3 Sample Output: 24 15 8 Explanation: After the first operation (1 3), the grid becomes: 7 8 9 2 5 6 3 1 4 After the second operation (2 3), the grid becomes: 7 8 9 3 1 4 2 5 6 The row sums are 24, 8, and 13.","solution":"def perform_operations_and_sum_rows(n, m, grid, operations): for op in operations: r1, r2 = op # Perform the swap. Note: r1 and r2 are 1-indexed. grid[r1-1], grid[r2-1] = grid[r2-1], grid[r1-1] # Compute the sum of each row row_sums = [sum(row) for row in grid] return row_sums"},{"question":"A company wants to manage its software projects more effectively. They plan to use a dependency management system in which the completion of certain tasks is dependent on the completion of others. This system can be represented as a directed acyclic graph (DAG), where each node represents a task, and a directed edge from node u to node v implies that task u must be completed before task v can commence. In this system, the company is particularly interested in identifying the \\"source\\" tasks which have no prerequisites, and the \\"sink\\" tasks that do not act as prerequisites for other tasks. The company aims to determine all such source and sink tasks. Your task is to write a program that processes the task dependency data and outputs the source and sink tasks. Input The first input line contains two integers n (1 ≤ n ≤ 2·105) and m (0 ≤ m ≤ 2·105), representing the number of tasks and the number of dependencies, respectively. Next m lines contain pairs of integers ui and vi (1 ≤ ui, vi ≤ n; ui ≠ vi), each representing a directed edge from task ui to task vi. Output Print two lines: - The first line should list all source tasks in increasing order. - The second line should list all sink tasks in increasing order. Examples Input 5 4 1 2 2 3 3 4 5 3 Output 1 5 4 Input 3 0 Output 1 2 3 1 2 3","solution":"def find_sources_and_sinks(n, edges): from collections import defaultdict # Initialize in-degree and out-degree for each task in_degree = {i: 0 for i in range(1, n+1)} out_degree = {i: 0 for i in range(1, n+1)} # Populate in-degree and out-degree based on the edges for u, v in edges: out_degree[u] += 1 in_degree[v] += 1 # Find source tasks (in-degree == 0) source_tasks = sorted([i for i in range(1, n+1) if in_degree[i] == 0]) # Find sink tasks (out-degree == 0) sink_tasks = sorted([i for i in range(1, n+1) if out_degree[i] == 0]) return source_tasks, sink_tasks # Example usage: # n, m = 5, 4 # edges = [(1, 2), (2, 3), (3, 4), (5, 3)] # sources, sinks = find_sources_and_sinks(n, edges) # print(\' \'.join(map(str, sources))) # print(\' \'.join(map(str, sinks)))"},{"question":"When tracking website visits for analytics purposes, a particularly useful metric is the length of consecutive browsing sessions, defined as a sequence of consecutive, uninterrupted visits. For example, given an array recording the timestamps of each visit (in ascending order), we can identify and calculate the length of each browsing session. A browsing session can be defined as consecutive visits where each timestamp \'t\' within the session is within \'k\' minutes of the previous timestamp. If a visit occurs after k minutes from the last recorded time, it starts a new session. Write a function that takes an array of integers representing the timestamps of the visits and an integer \'k\' representing the maximum allowed gap (in minutes) between consecutive timestamps for them to be considered part of the same browsing session. The function should return an array of the lengths of each consecutive browsing session. **Input Format:** - The first line contains an integer \'n\', the number of timestamps. - The second line contains \'n\' space-separated integers representing the timestamps. - The third line contains the integer \'k\', indicating the maximum allowed gap between consecutive timestamps. **Output Format:** - Return an array of integers where each integer represents the length of a consecutive browsing session. **Constraints:** - 1 ≤ n ≤ 100000 - 1 ≤ timestamps[i] ≤ 1000000 - 1 ≤ k ≤ 10000 **SAMPLE INPUT:** 6 1 3 4 10 12 13 5 **SAMPLE OUTPUT:** [3, 3] **Explanation:** There are two consecutive browsing sessions in this example: - Session 1: [1, 3, 4] with lengths 3 - Session 2: [10, 12, 13] with lengths 3 Both sessions are separated by a gap greater than \'k\' minutes.","solution":"def consecutive_sessions(timestamps, k): This function takes a list of timestamps and an integer k, and returns an array of the lengths of each consecutive browsing session. Parameters: timestamps (list of int): A list of integers representing the timestamps of the visits. k (int): The maximum allowed gap in minutes between consecutive timestamps for them to be considered part of the same session. Returns: list of int: A list of integers where each integer represents the length of a consecutive browsing session. n = len(timestamps) if n == 0: return [] session_lengths = [] session_length = 1 for i in range(1, n): if timestamps[i] - timestamps[i - 1] <= k: session_length += 1 else: session_lengths.append(session_length) session_length = 1 session_lengths.append(session_length) return session_lengths"},{"question":"You are given an initially empty tree with `n` nodes labeled from `1` to `n`. You need to perform a series of `q` operations to modify the tree, where each operation is either connecting two components by adding an edge between two nodes, or querying the number of connected components in the tree. Each operation can be one of the following types: 1. `1 x y` - Connect the components containing nodes `x` and `y` by adding an edge between them. 2. `2` - Output the number of connected components currently in the tree. -----Input----- The first line contains two integers `n` and `q` (`2 ≤ n ≤ 10^5`, `1 ≤ q ≤ 2 × 10^5`) — the initial number of nodes and the number of operations, respectively. The next `q` lines each describe an operation of the form `1 x y` or `2`. -----Output----- For each operation of type `2`, print a single integer on a new line denoting the number of connected components in the tree after performing that operation. -----Examples----- Input 5 5 1 1 2 2 1 2 3 2 1 4 5 Output 4 3 Input 4 4 2 1 1 3 2 1 2 4 Output 4 3 -----Note----- In the first example, there are initially 5 connected components (each node is its own component). After the first operation, nodes 1 and 2 are connected, reducing the number of components to 4. After the second operation, nodes 2 and 3 are connected, reducing the number of components to 3. The last operation does not require any output. In the second example, there are initially 4 connected components. The first query checks the number of components before any connections are made, so it returns 4. After connecting nodes 1 and 3, the number of components becomes 3. The last operation does not require any output as it is adding an edge.","solution":"class UnionFind: def __init__(self, size): self.root = list(range(size)) self.rank = [1] * size self.count = size def find(self, x): if self.root[x] != x: self.root[x] = self.find(self.root[x]) return self.root[x] def union(self, x, y): rootX = self.find(x) rootY = self.find(y) if rootX != rootY: if self.rank[rootX] > self.rank[rootY]: self.root[rootY] = rootX elif self.rank[rootX] < self.rank[rootY]: self.root[rootX] = rootY else: self.root[rootY] = rootX self.rank[rootX] += 1 self.count -= 1 def get_count(self): return self.count def tree_operations(n, operations): uf = UnionFind(n) result = [] for operation in operations: if operation[0] == 1: _, x, y = operation uf.union(x - 1, y - 1) elif operation[0] == 2: result.append(uf.get_count()) return result"},{"question":"You are given a sequence of integers. The task is to divide this sequence into the minimum number of non-empty subsequences where each subsequence is strictly increasing. -----Input----- The first line of the input contains an integer n (1 le n le 200,000) — the length of the sequence. The second line of the input contains n integers a_i (1 le a_i le 10^9) — the elements of the sequence. -----Output----- Print the minimum number of strictly increasing subsequences you can partition the sequence into. -----Examples----- Input 5 2 1 4 3 5 Output 2 Input 6 9 8 7 1 2 3 Output 4 -----Note----- In the first example, one possible partitioning is [2, 4, 5] and [1, 3]. In the second example, one possible partitioning is [9], [8], [7], and [1, 2, 3].","solution":"def min_increasing_subsequences(sequence): Function to find the minimum number of strictly increasing subsequences which can partition the sequence into. import heapq subsequences = [] # Min-heap to keep track of the ends of subsequences for num in sequence: # place number in one of the existing subsequences placed = False # Using heapq to get the smallest ending subsequence that is strictly increasing for index, end in enumerate(subsequences): if num > end: subsequences[index] = num placed = True break # If num cannot fit into any existing subsequences, create a new one if not placed: heapq.heappush(subsequences, num) return len(subsequences)"},{"question":"Given an integer array of size n, write a function that returns the smallest index i (0 <= i < n) such that the sum of the elements to the left of i is equal to the sum of the elements to the right of i. If no such index exists, return -1. ``` Example: findPivotIndex([1, 7, 3, 6, 5, 6]) should return 3, because: The sum of elements to the left of index 3 is [1, 7, 3] = 11, and to the right of index 3 is [5, 6] = 11. findPivotIndex([1, 2, 3]) should return -1, because: There is no index where the sum of elements to the left and right are equal. ```","solution":"def findPivotIndex(nums): Returns the smallest index i such that the sum of elements to the left of i is equal to the sum of elements to the right of i. If no such index exists, returns -1. total_sum = sum(nums) left_sum = 0 for i, num in enumerate(nums): if left_sum == (total_sum - left_sum - num): return i left_sum += num return -1"},{"question":"Jessica loves reading books, and she has recently developed a new habit of keeping track of the number of pages she reads every day. She wants to find out how many pages she reads in total after following this habit for a certain period of time. Can you help her calculate this? -----Input----- The first line contains an integer D (1 leq D leq 100), the number of days she has been recording her reading habit. The second line contains D space-separated integers representing the number of pages she read each day. -----Output----- Output a single line with the total number of pages Jessica has read after D days. -----Examples----- Sample Input 1: 5 10 20 30 40 50 Sample Output 1: 150 Sample Input 2: 3 15 10 5 Sample Output 2: 30","solution":"def total_pages_read(D, pages_list): Calculate the total number of pages read over D days. Parameters: D (int): The number of days. pages_list (list): A list of integers representing the pages read each day. Returns: int: The total number of pages read. return sum(pages_list)"},{"question":"You are provided with a grid of size n times m where each cell contains either \'0\' or \'1\'. A \'1\' represents a land cell and a \'0\' represents a water cell. You are tasked with determining the number of distinct islands in the grid. An island is a group of connected \'1\'s (land cells) connected horizontally or vertically (not diagonally). Write a function to count the number of islands. Function Signature: ```python def count_islands(grid: List[List[str]]) -> int: pass ``` -----Input----- - The first line contains an integer T (1 le T le 50) — the number of test cases. - For each test case: - The first line contains two integers n and m (1 le n, m le 300) — the number of rows and columns in the grid. - The next n lines contain m characters each, representing the grid with characters \'0\' and \'1\'. It is guaranteed that the total number of cells over all test cases does not exceed 10^5. -----Output----- For each test case, output a single integer — the number of distinct islands in the given grid. -----Example----- Input 2 4 5 11000 11000 00100 00011 3 3 111 010 111 Output 3 1","solution":"def count_islands(grid): def dfs(i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != \'1\': return grid[i][j] = \'0\' # Mark the cell as visited # Explore the neighboring cells (up, down, left, right) dfs(i - 1, j) dfs(i + 1, j) dfs(i, j - 1) dfs(i, j + 1) count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': count += 1 dfs(i, j) return count"},{"question":"Given an array of integers and a target integer T, determine if there are two distinct numbers in the array that add up to T. You need to return their indices as a list of integers. If there are multiple pairs, return the first pair found. If no such pair exists, return an empty list. Assume that each input would have exactly one solution. Example 1: Input: arr = [2, 7, 11, 15] T = 9 Output: [0, 1] Explanation: The numbers 2 and 7 add up to the target 9. Hence, the pair of indices [0, 1] is returned. Example 2: Input: arr = [1, 3, 4, 2] T = 6 Output: [2, 3] Explanation: The numbers 4 and 2 add up to the target 6. Hence, the pair of indices [2, 3] is returned. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findTwoSumIndices() which takes an array of integers arr and an integer T as inputs and returns a list of two integers representing the indices. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: - 2 <= arr.length <= 10^5 - -10^9 <= arr[i] <= 10^9 - -10^9 <= T <= 10^9","solution":"def findTwoSumIndices(arr, T): Returns the indices of the two distinct numbers in the array that add up to T. num_to_index = {} for i, num in enumerate(arr): complement = T - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i return []"},{"question":"You are given a list of integers representing the ages of people in a group. Your task is to categorize each person based on their age. Use the following rules: - If the age is between 0 and 12 (inclusive), categorize as \\"Child\\". - If the age is between 13 and 17 (inclusive), categorize as \\"Teen\\". - If the age is between 18 and 59 (inclusive), categorize as \\"Adult\\". - If the age is 60 or above, categorize as \\"Senior\\". Write a program that takes multiple test cases. For each test case, you will be given an integer N representing the number of people, followed by N integers representing their ages. The program should output the category for each age on a new line. Input The first line of input contains an integer T denoting the number of test cases. Each test case starts with an integer N, followed by N integers representing the ages. Output For each test case, output N lines with the age category for each person. Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ age ≤ 120 Example Input: 2 5 3 16 45 67 8 4 12 70 20 15 Output: Child Teen Adult Senior Child Child Senior Adult Teen Explanation Example case 1: - Age 3 falls in the \\"Child\\" category. - Age 16 falls in the \\"Teen\\" category. - Age 45 falls in the \\"Adult\\" category. - Age 67 falls in the \\"Senior\\" category. - Age 8 falls in the \\"Child\\" category. Example case 2: - Age 12 falls in the \\"Child\\" category. - Age 70 falls in the \\"Senior\\" category. - Age 20 falls in the \\"Adult\\" category. - Age 15 falls in the \\"Teen\\" category.","solution":"def categorize_ages(t, test_cases): Categorizes a list of ages based on given rules. Parameters: t (int): Number of test cases. test_cases (list of lists): A list containing test cases where each test case is a list starting with N followed by N ages. Returns: list of lists: List of results where each sublist contains the categories for the ages in a test case. results = [] for case in test_cases: N = case[0] ages = case[1:] categories = [] for age in ages: if 0 <= age <= 12: categories.append(\\"Child\\") elif 13 <= age <= 17: categories.append(\\"Teen\\") elif 18 <= age <= 59: categories.append(\\"Adult\\") elif age >= 60: categories.append(\\"Senior\\") results.append(categories) return results"},{"question":"You are given a sequence of n integers representing the growth of plants over n days. Each element in the sequence represents the height of the plant on that particular day. Your task is to compute the maximum difference in height between any two plants where the second plant in the pair has grown on a day later than the day the first plant has grown (i.e., the difference is always computed forwards in time). Input: The first line contains a single integer n, the number of days. The second line contains n space-separated integers representing the heights of the plants over the days. Output: A single integer, the maximum difference in height between any two plants such that the second plant grew on a later day than the first plant. Constraints: 1 ≤ n ≤ 100000 1 ≤ height ≤ 10^9 SAMPLE INPUT 6 3 1 4 1 5 9 SAMPLE OUTPUT 8 In this example, the maximum difference is achieved between the plant height on day 2 (1) and the plant height on day 6 (9).","solution":"def max_height_difference(n, heights): Returns the maximum difference in height between any two plants where the second plant has grown on a day later than the day the first plant has grown. if n < 2: return 0 min_height_so_far = heights[0] max_difference = 0 for i in range(1, n): max_difference = max(max_difference, heights[i] - min_height_so_far) min_height_so_far = min(min_height_so_far, heights[i]) return max_difference"},{"question":"``` ------------------------------------------------------------------ You’re planning a road trip and you want to know how many gas stations (represented as \'G\') you will encounter on your route along the way. --------------------------------------------------------------[g(G)r] Task: You will receive an array of strings where each string represents a section of the road. Each section may contain some \'G\' representing a gas station, or it might be empty. Example: ``` route = [\\"--G--\\", \\"-G---G\\", \\"--\\", \\"G--G-GG\\", \\"--G-\\"] ``` Count the number of gas stations (\'G\') in each section. Return an array of strings with the count of gas stations for each section, formatted as follows: ``` [\\"Section 1: 1 gas stations\\", \\"Section 2: 2 gas stations\\", \\"Section 3: 0 gas stations\\", \\"Section 4: 4 gas stations\\", \\"Section 5: 1 gas stations\\"] ``` Each section should specify its index starting from 1 and the number of gas stations found within that specific section. Be aware, the road could be very long but divided into manageable sections. https://en.wikipedia.org/wiki/Gas_station Songwriters: TRIP / PLANNING / G ```","solution":"def count_gas_stations(route): Count the number of gas stations (\'G\') in each section of the route. Parameters: route (list of str): A list where each string represents a section of the road. Returns: list of str: A formatted list with the number of gas stations in each section. result = [] for index, section in enumerate(route): count = section.count(\'G\') result.append(f\\"Section {index + 1}: {count} gas stations\\") return result"},{"question":"You are given a list of words and a prefix string. Your task is to write a function that returns a list of words from the given list that start with the given prefix. If no words match the prefix, return an empty list. Example 1: Input: words = [\\"apple\\", \\"app\\", \\"apricot\\", \\"banana\\", \\"grape\\", \\"application\\"] prefix = \\"app\\" Output: [\\"apple\\", \\"app\\", \\"application\\"] Explanation: The words \\"apple\\", \\"app\\", and \\"application\\" start with the prefix \\"app\\". Example 2: Input: words = [\\"dog\\", \\"cat\\", \\"carrot\\", \\"car\\", \\"camel\\"] prefix = \\"ca\\" Output: [\\"cat\\", \\"carrot\\", \\"car\\", \\"camel\\"] Explanation: The words \\"cat\\", \\"carrot\\", \\"car\\", and \\"camel\\" start with the prefix \\"ca\\". Example 3: Input: words = [\\"hello\\", \\"world\\", \\"hi\\", \\"hey\\"] prefix = \\"he\\" Output: [\\"hello\\", \\"hey\\"] Explanation: The words \\"hello\\" and \\"hey\\" start with the prefix \\"he\\". Your task: You do not need to read input or print anything. Complete the function `filter_words_by_prefix()` which takes the list of words `words` and the prefix string `prefix` and returns a list of words that start with the given prefix. Function Signature: ```python def filter_words_by_prefix(words: List[str], prefix: str) -> List[str]: ``` Constraints: - 1 <= len(words) <= 10^5 - 1 <= len(words[i]), len(prefix) <= 100 - words[i] and prefix consist of only lowercase English letters.","solution":"def filter_words_by_prefix(words, prefix): Returns a list of words that start with the given prefix. Args: words (list): list of words. prefix (str): prefix string. Returns: list: list of words that start with the given prefix. return [word for word in words if word.startswith(prefix)]"},{"question":"You are given a list of people\'s names along with the scores they have achieved in a game, and you need to find the name of the top scorer along with the score. If there are multiple people with the same highest score, output all their names in alphabetical order. Input First line of the input will contain T (No. of test cases). For each test case, first line will contain an integer N (number of entries). Next each N lines will contain a string (the name of the person) followed by an integer (the score). Output For each test case, output the names of the top scorers followed by their score in a new line. If there are multiple top scorers, output their names in alphabetical order, separated by commas. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Score ≤ 100 SAMPLE INPUT 1 4 Alice 10 Bob 15 Charlie 15 David 8 SAMPLE OUTPUT Bob,Charlie 15 Explanation Both Bob and Charlie have the highest score of 15, and their names are printed in alphabetical order.","solution":"def find_top_scorers(test_cases): Given multiple test cases with names and scores, return top scorer(s) for each test case. :param test_cases: List of test cases where each test case is a tuple: - Number of entries (N) - List of tuples (name, score) :return: List of strings where each string represents the top scorers for a test case followed by their score. Multiple names are separated by commas in alphabetical order. result = [] for case in test_cases: n = case[0] entries = case[1] if n == 0: result.append(\\"\\") continue # Dictionary to store names and their scores scores = {} for name, score in entries: if score not in scores: scores[score] = [] scores[score].append(name) # Find the highest score max_score = max(scores.keys()) # Get all names with the highest score and sort them alphabetically top_scorers = sorted(scores[max_score]) # Format the result string result.append(\\",\\".join(top_scorers) + f\\" {max_score}\\") return result"},{"question":"Given a grid of size n x m filled with characters, your task is to determine if there exists a path from the top-left corner to the bottom-right corner such that the concatenation of the characters along the path forms a palindrome. The path can only move right or down at any point in time. # Input - The first line contains a single integer T, the number of test cases. - For each test case, the first line contains two integers n and m, representing the dimensions of the grid. - The next n lines each contain a string of length m representing the grid. # Output For each test case, output \\"YES\\" if such a path exists; otherwise, output \\"NO\\". # Constraints - 1 ≤ T ≤ 10 - 1 ≤ n, m ≤ 20 # Example Input ``` 2 3 3 aba bcb aba 2 4 abcd dcba ``` Output ``` YES NO ``` # Explanation For the first test case, one possible palindrome path is \\"abcbcbcbcbcba\\". For the second test case, there is no such path that forms a palindrome.","solution":"def is_palindrome(s): return s == s[::-1] def find_path(grid, n, m, i, j, path, memo): if i >= n or j >= m: return False path += grid[i][j] if (i, j) in memo: return memo[(i, j)] if i == n-1 and j == m-1: memo[(i, j)] = is_palindrome(path) return memo[(i, j)] down = find_path(grid, n, m, i+1, j, path, memo) right = find_path(grid, n, m, i, j+1, path, memo) memo[(i, j)] = down or right return memo[(i, j)] def solve(T, test_cases): results = [] for n, m, grid in test_cases: memo = {} if find_path(grid, n, m, 0, 0, \\"\\", memo): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_str): data = input_str.strip().split(\\"n\\") T = int(data[0]) index = 1 test_cases = [] for _ in range(T): n, m = map(int, data[index].split()) grid = [data[index + 1 + i] for i in range(n)] test_cases.append((n, m, grid)) index += n + 1 return T, test_cases def main(input_str): T, test_cases = parse_input(input_str) results = solve(T, test_cases) return \\"n\\".join(results)"},{"question":"Write a function that takes a list of integers and returns a new list containing the squares of all the elements of the original list, but only if the element is odd. If the list is empty or contains no odd numbers, return an empty list. Example: ``` Input: [2, 3, 4, 5, 6] Output: [9, 25] ``` Constraints: - The list may contain up to 1,000,000 integers. - Each integer will be between -10^9 and 10^9 inclusive. - Your solution should aim for optimal time and space complexity.","solution":"def odd_squares(nums): Returns a list containing the squares of all odd elements from the given list. Parameters: nums (list of int): A list of integers. Returns: list of int: A new list containing the squares of odd elements of the original list. return [x * x for x in nums if x % 2 != 0]"},{"question":"Write a program that reads in a list of integers and outputs the length of the longest subsequence where the elements are strictly increasing. The subsequence does not have to be contiguous. Note 解説 Constraints * 1 leq n leq 1000, where n is the length of the list * 1 leq text{list}[i] leq 10000, where text{list}[i] is the i-th element of the list Input In the first line, a single integer n is given representing the number of integers in the list. In the second line, n space-separated integers are given representing the elements of the list. Output Print a single integer representing the length of the longest increasing subsequence in the given list. Example Input 8 5 1 6 2 7 1 8 3 Output 4 Explanation The longest increasing subsequence is [1, 2, 7, 8] which has a length of 4.","solution":"def longest_increasing_subsequence_length(arr): if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) # Example usage n = 8 arr = [5, 1, 6, 2, 7, 1, 8, 3] print(longest_increasing_subsequence_length(arr)) # Output: 4"},{"question":"Four friends, P, Q, R, and S, are playing a game where they pass a ball among themselves. Each friend is situated at a unique position on the number line, with their locations being p, q, r, and s meters, respectively. A friend can pass the ball to another friend if the distance between them is no more than a certain distance k meters. Determine if the ball can be passed from P to S, either directly or indirectly, using the given distance limit. Here, indirect passing means that any intermediate steps of passing must all satisfy the direct distance limitation. -----Constraints----- - 1 ≤ p, q, r, s ≤ 100 - 1 ≤ k ≤ 100 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: p q r s k -----Output----- If P can pass the ball to S, print Yes; if they cannot, print No. -----Sample Input----- 2 5 8 10 4 -----Sample Output----- Yes","solution":"def can_pass_ball(p, q, r, s, k): Determines if it is possible to pass the ball from P to S, either directly or indirectly given the distance limit k. :param p: Position of P :param q: Position of Q :param r: Position of R :param s: Position of S :param k: Maximum distance a ball can be passed :return: \'Yes\' if the ball can be passed from P to S, otherwise \'No\' # Check direct passes if abs(p - s) <= k: return \\"Yes\\" if abs(p - q) <= k and abs(q - s) <= k: return \\"Yes\\" if abs(p - q) <= k and abs(q - r) <= k and abs(r - s) <= k: return \\"Yes\\" if abs(p - r) <= k and abs(r - s) <= k: return \\"Yes\\" if abs(p - r) <= k and abs(r - q) <= k and abs(q - s) <= k: return \\"Yes\\" return \\"No\\""},{"question":"Tony the Traveling Tortoise is planning his journey across a series of islands connected by bridges. Each island has a certain number of coconuts, which Tony can collect to sustain himself on his trip. Tony starts on the first island and needs to reach the last island. He can travel from one island to another only via a direct bridge, and he wants to maximize the total number of coconuts he collects by the time he reaches the last island. Help Tony determine the maximum number of coconuts he can collect, given the number of coconuts on each island and the bridge connections. -----Input----- The input consists of two parts: - The first line contains two integers, n and m (1 leq n leq 1000, 0 leq m leq 5000), where n is the number of islands and m is the number of bridges. - The second line contains n integers representing the number of coconuts on each island. - Each of the following m lines contains two integers u and v (1 leq u, v leq n), indicating a bridge between island u and island v. -----Output----- Output one integer, the maximum number of coconuts Tony can collect from the first island to the last island. -----Examples----- Sample Input: 5 6 3 2 1 10 4 1 2 2 3 1 3 3 4 4 5 2 5 Sample Output: 20","solution":"def max_coconuts(n, m, coconuts, bridges): # Initialize the dp array with a very small number dp = [-float(\'inf\')] * (n + 1) dp[1] = coconuts[0] # Iterate through the edges list repeatedly for _ in range(n - 1): for u, v in bridges: if dp[u] != -float(\'inf\'): # If u is reachable dp[v] = max(dp[v], dp[u] + coconuts[v - 1]) return dp[n]"},{"question":"A rectangle is denoted by its height H and width W. The rectangle can be divided into smaller equal-sized square tiles. Write a function `maxSquareTiles` to find the maximum number of equal-sized square tiles that can completely cover the given rectangle without any gaps. The size of the square tile must be a factor of both the height and the width of the rectangle. Example 1: Input: H = 6, W = 9 Output: 6 Explanation: The largest square tile that can completely cover the rectangle is of size 3x3. There will be a total of 6 such tiles (2 rows and 3 columns of 3x3 tiles). Example 2: Input: H = 8, W = 12 Output: 24 Explanation: The largest square tile that can completely cover the rectangle is of size 4x4. There will be a total of 6 such tiles (2 rows and 3 columns of 4x4 tiles). Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxSquareTiles()` which takes two integers H and W as input parameters and returns the number of squares tiles required to cover the rectangle. Expected Time Complexity: O(log(min(H, W))) Expected Auxiliary Space: O(1) Constraints: 1 <= H, W <= 10^18","solution":"def gcd(a, b): Helper function to compute the greatest common divisor (GCD) using the Euclidean algorithm. while b != 0: a, b = b, a % b return a def maxSquareTiles(H, W): Function to find the maximum number of equal-sized square tiles that can completely cover the given rectangle of height H and width W. # Find the largest size of square tile which is the GCD of H and W tile_size = gcd(H, W) # Number of square tiles along the height and width num_tiles_height = H // tile_size num_tiles_width = W // tile_size # Total number of tiles return num_tiles_height * num_tiles_width"},{"question":"Description You are given an operation g(a, b): {0, 1}^n x {0, 1}^n -> {0, 1}^n, which takes two binary strings of size n and produces another binary string of size n. The operation g(a, b) is defined as follows: for each bit position i (0 <= i < n), the resulting bit will be \'1\' if either a[i] or b[i] is \'1\', but not both (i.e., the xor operation). Write a program to compute the result of g(a, b) for the two given binary strings of equal length. Input Format One line containing two space-separated binary strings a and b of the same length n. Output Format One line containing the resulting binary string after applying g(a, b). Input Limits 1 <= length of a, length of b <= 10^5 SAMPLE INPUT 1101 1011 SAMPLE OUTPUT 0110 Explanation The input strings are \'1101\' and \'1011\'. - The first bit: 1 xor 1 = 0 - The second bit: 1 xor 0 = 1 - The third bit: 0 xor 1 = 1 - The fourth bit: 1 xor 1 = 0 Thus, the resulting string is \'0110\'.","solution":"def g(a, b): Returns the XOR result of two binary strings a and b. return \'\'.join(\'1\' if a[i] != b[i] else \'0\' for i in range(len(a)))"},{"question":"A tree is an undirected graph in which any two vertices are connected by exactly one path. Therefore, a tree with n vertices has n - 1 edges. Given a tree represented as an adjacency list, implement a function that finds the diameter of the tree. The diameter of a tree is defined as the length of the longest path between any two nodes in the tree. The length of a path is represented by the number of edges it contains. Function signature: `def tree_diameter(tree: List[List[int]]) -> int:` # Input - `tree`: A list of lists, where `tree[i]` contains the nodes (0-indexed) that are connected to node `i`. # Output - Return an integer representing the diameter of the tree. **Example:** Input: `tree = [[1, 2], [0, 3, 4], [0, 5], [1], [1], [2]]` Output: `4` Explanation: - The tree structure is like this: ``` 0 / 1 2 / 3 4 5 ``` - The longest path is 3 -> 1 -> 0 -> 2 -> 5, which has 4 edges. # Notes: 1. 2 <= n <= 1000, where n is the number of nodes in the tree. 2. Ensure you handle the edge cases where the tree has the minimum number of nodes.","solution":"from typing import List def tree_diameter(tree: List[List[int]]) -> int: Returns the diameter (longest path) of a tree represented as an adjacency list. The diameter is defined as the number of edges in the longest path between any two nodes. def bfs(start_node): visited = [-1] * len(tree) visited[start_node] = 0 queue = [start_node] max_distance = 0 farthest_node = start_node while queue: node = queue.pop(0) for neighbor in tree[node]: if visited[neighbor] == -1: visited[neighbor] = visited[node] + 1 queue.append(neighbor) if visited[neighbor] > max_distance: max_distance = visited[neighbor] farthest_node = neighbor return farthest_node, max_distance # Perform BFS from an arbitrary node (0) to find the farthest node from it farthest_node, _ = bfs(0) # Perform BFS again from the farthest node found to determine the diameter of the tree _, diameter = bfs(farthest_node) return diameter"},{"question":"You are given a string `target` representing the name of a character, and an integer `n` representing the number of possible scenes that the character can appear in a movie. The scenes in the movie are denoted by numbers from 1 to n. Each scene may contain multiple characters, and you have to find out in which scenes the target character appears. Input: The first line contains the name of the target character. The second line contains an integer `n`, denoting the number of scenes. The next `n` lines each contain the scene description in which different character names are listed, separated by space. Output: For each scene where the target character appears, output the scene number on a new line. If the character does not appear in any scene, output \\"Not found\\". Example: Input: JonSnow 5 AryaSansa Ned JonSnow Tyrion JonSnow Robb Daenerys Cersei Samwell Gilly JonSnow Jorah Output: 1 2 4 Input: Daenerys 3 Jon Arya Cersei Tywin Ned Arya Output: Not found SAMPLE INPUT JonSnow 4 JonSnow Ned Sansa JonSnow Cersei JonSnow Tyrion Arya Bran SAMPLE OUTPUT 1 2 3","solution":"def find_scenes_with_character(target, n, scenes): Returns a list of scene numbers where the target character appears. :param target: str, name of the target character :param n: int, number of scenes :param scenes: list of str, each representing characters in a scene :return: list of int or str \\"Not found\\" found_scenes = [] for i in range(n): scene = scenes[i] if target in scene.split(): found_scenes.append(i + 1) if found_scenes: return found_scenes else: return \\"Not found\\""},{"question":"A popular candy company manufactures a special type of rectangular chocolate that is filled with nuts and comes in various dimensions. Each chocolate bar is divided into square segments, forming a grid where some segments contain nuts (\'N\') and others are empty (\'.\'). Your task is to write a program that, given the dimensions of the chocolate bar and the positions of the nuts, determines the largest contiguous square area that contains only empty segments (i.e., no nuts). Input The first line contains two integers, H and W (1 ≤ H, W ≤ 100), representing the height and width of the chocolate bar, respectively. Each of the next H lines contains W characters (either \'N\' or \'.\'), representing the chocolate bar\'s grid. Output Output a single integer, which is the area of the largest contiguous square that contains only empty segments. Example Input 5 5 N.... ..N.. ..... .N... ..... Output 9 Explanation The largest contiguous empty square of side 3 and area 9 is located in the bottom-right of the grid. The program should efficiently find this largest square area, considering the constraints given.","solution":"def largest_empty_square(H, W, grid): Returns the area of the largest contiguous square containing only empty segments. if H == 0 or W == 0: return 0 dp = [[0] * W for _ in range(H)] max_side = 0 for i in range(H): for j in range(W): if grid[i][j] == \'.\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side # Sample usage with an example input H, W = 5, 5 grid = [ \\"N....\\", \\"..N..\\", \\".....\\", \\".N...\\", \\".....\\" ] print(largest_empty_square(H, W, grid)) # Output: 9"},{"question":"You are tasked to write a function that organizes a list of people\'s names for a formal event. Given an input list where each element is a string representing a person\'s title, first name, and last name separated by spaces, you need to sort the list. The sorting should be based primarily on the last name and secondarily on the first name if last names are identical. Titles should be ignored when considering sort order. Write a function that takes in a list of strings and returns a sorted list of names based on the specified criteria. Constraints - Each input string will consist of exactly three parts separated by single spaces: a title (e.g., \\"Mr.\\", \\"Ms.\\", \\"Dr.\\"), a first name, and a last name. - The input list will contain at least one element. - All names will contain only alphabetic characters and titles will always be valid. Function Signature ```python def sort_names(name_list: List[str]) -> List[str]: ``` Example ```python input_list = [\\"Dr. John Smith\\", \\"Ms. Jane Doe\\", \\"Mr. Sam Brown\\"] sorted_list = sort_names(input_list) print(sorted_list) ``` Expected Output: ```python [\\"Mr. Sam Brown\\", \\"Ms. Jane Doe\\", \\"Dr. John Smith\\"] ```","solution":"from typing import List def sort_names(name_list: List[str]) -> List[str]: Sorts a list of names based primarily on last name and secondarily on first name. Titles are ignored in the sorting order. Args: name_list (List[str]): List of names in the format \\"Title FirstName LastName\\" Returns: List[str]: Sorted list of names based on the specified criteria return sorted(name_list, key=lambda name: (name.split()[2], name.split()[1]))"},{"question":"You are given an array arr[] and a positive integer k. You have to rotate the array arr[] k times to the left. After k rotations, return the resulting array. Example 1: Input : n=5, arr[] = {1, 2, 3, 4, 5}, k=2 Output : 3 4 5 1 2 Explanation: After 1st rotation: {2, 3, 4, 5, 1} After 2nd rotation: {3, 4, 5, 1, 2} Hence, the new array after 2 rotations is {3, 4, 5, 1, 2}. Example 2: Input : n=4, arr[] = {10, 20, 30, 40}, k=1 Output : 20 30 40 10 Explanation: After 1 rotation: {20, 30, 40, 10} Hence, the new array after 1 rotation is {20, 30, 40, 10}. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function left_rotate() that takes an array (arr), sizeOfArray (n), and the number of rotations (k), and return the array after k rotations. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 1 ≤ arr[i] ≤ 10^7 0 ≤ k < 10^5","solution":"def left_rotate(arr, n, k): Returns the array after rotating it k times to the left. if k == 0 or k % n == 0: return arr k = k % n # Optimize for cases where k > n return arr[k:] + arr[:k]"},{"question":"Given a positive integer N, find an array A of length N, such that the following condition is satisfied: For each subarray [A[L], A[L+1], ..., A[R]] (1 ≤ L ≤ R ≤ N): The bitwise XOR of elements in the subarray is odd i.e. A[L] XOR A[L+1] XOR ... XOR A[R] is odd. If such an array exists, print one of them. If no such array exists, print -1. ------ Input Format ------ - The first line contains a single integer T, the number of test cases. - Each test case consists of a single line containing one positive integer N, the length of the array A. ------ Output Format ------ For each test case, print one line containing N space-separated integers, the contents of the array A. If no such array exists, print -1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 - Sum of N over all test cases doesn\'t exceed 5000 ----- Sample Input 1 ------ 3 1 2 3 ----- Sample Output 1 ------ 1 1 2 1 2 3 ----- Explanation 1 ------ Test case 1: For array A = [1]: - The bitwise XOR of elements of the subarray [1] is 1, which is odd. Test case 2: For array A = [1, 2]: - The bitwise XOR of elements of the subarray [1] is 1, which is odd. - The bitwise XOR of elements of the subarray [2] is 2, which is odd. - The bitwise XOR of elements of the subarray [1, 2] is 3 (1 XOR 2 = 3), which is odd. Test case 3: For array A = [1, 2, 3]: - The bitwise XOR of elements of the subarray [1] is 1, which is odd. - The bitwise XOR of elements of the subarray [2] is 2, which is odd. - The bitwise XOR of elements of the subarray [3] is 3, which is odd. - The bitwise XOR of elements of the subarray [1, 2] is 3, which is odd. - The bitwise XOR of elements of the subarray [2, 3] is 1 (2 XOR 3 = 1), which is odd. - The bitwise XOR of elements of the subarray [1, 2, 3] is 0 (1 XOR 2 XOR 3 = 0), which is even. However, as long as other subarrays satisfy the condition, this particular array is just one possible solution. The constraint is such that exactly one operationally functional array is needed per test case. In these examples, the arrays satisfy the condition that the bitwise XOR of any subarray is odd.","solution":"def find_array_with_odd_xor(N): This function generates an array of length N such that each subarray has an odd bitwise XOR. If no such array exists, it returns -1. if N % 2 == 0: return [1 + (i % 2) for i in range(N)] else: return [i + 1 for i in range(N)] def process_test_cases(T, test_cases): results = [] for N in test_cases: results.append(find_array_with_odd_xor(N)) return results"},{"question":"Determine if a Binary Tree is Balanced Given a binary tree, determine if it is balanced. A balanced tree is defined as a tree in which the left and right subtrees of every node differ in height by no more than 1. # Input The input is a list of space-separated integers representing the nodes of a binary tree in level order, where `null` signifies that the node doesn\'t exist. The tree may contain up to 10^4 nodes. Example: 3 9 20 null null 15 7 # Output Return \\"BALANCED\\" if the tree is balanced, otherwise return \\"NOT BALANCED\\". # Examples Example 1 **Input:** 3 9 20 null null 15 7 **Output:** BALANCED Example 2 **Input:** 1 2 2 3 3 null null 4 4 **Output:** NOT BALANCED # Constraints 1. The maximum number of nodes in the binary tree: 10000. 2. The values of the tree nodes are integers within the range [-10^5, 10^5].","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(nodes): if not nodes: return None n = len(nodes) if n == 0 or nodes[0] is None: return None root = TreeNode(nodes[0]) queue = [root] i = 1 while queue and i < n: node = queue.pop(0) if i < n and nodes[i] is not None: node.left = TreeNode(nodes[i]) queue.append(node.left) i += 1 if i < n and nodes[i] is not None: node.right = TreeNode(nodes[i]) queue.append(node.right) i += 1 return root def is_balanced(root): def check(root): if not root: return (True, 0) left_balanced, left_height = check(root.left) right_balanced, right_height = check(root.right) balanced = (left_balanced and right_balanced and abs(left_height - right_height) <= 1) height = max(left_height, right_height) + 1 return (balanced, height) return check(root)[0] def determine_if_balanced(input_str): nodes = input_str.split() nodes = [int(x) if x != \'null\' else None for x in nodes] root = build_tree(nodes) return \\"BALANCED\\" if is_balanced(root) else \\"NOT BALANCED\\""},{"question":"Given an array of N integers and an integer S, your task is to determine if there exists a pair of integers in the array such that their sum is equal to S. Return true if such a pair exists, otherwise return false. Example 1: Input: Arr[] = {1, 4, 45, 6, 10, -8}, S = 16 Output: true Explanation: There is a pair (10, 6) with sum 16. Example 2: Input: Arr[] = {1, 2, 3, 9}, S = 8 Output: false Explanation: There is no pair with sum 8. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function hasPairWithSum() that takes an array (arr), size ofArray (n), the integer S, and return true if there exists a pair with sum S, otherwise return false. The driver code takes care of the printing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 2 ≤ N ≤ 10^5 -10^5 ≤ A[i] ≤ 10^5","solution":"def hasPairWithSum(arr, n, S): Determines if there exists a pair of integers in the array such that their sum is equal to S. :param arr: List[int] - array of integers :param n: int - size of the array :param S: int - the target sum :return: bool - True if there exists a pair with sum S, otherwise False seen_numbers = set() for num in arr: if (S - num) in seen_numbers: return True seen_numbers.add(num) return False"},{"question":"MegaGrid Inc. is working on optimizing their network of interconnected grids. Each grid can be represented as a node, and each connection between grids can be represented as a bidirectional edge with a particular weight (time to establish the connection). Your task is to determine the minimum time required to connect all the grids such that they form a Single Connected Network. -----Input----- - The first line contains two integers N and M — the number of nodes (grids) and edges (connections) respectively. - The next M lines each contain three integers u, v, and w, denoting a connection between nodes u and v with weight w. -----Output----- Print a single integer — the minimum time required to connect all grids. If it is impossible to connect all grids, print -1. -----Constraints----- - 1 le N le 10^3 - 0 le M le 10^5 - 1 le u, v le N - 1 le w le 10^3 -----Example Input----- 4 5 1 2 1 2 3 4 3 4 2 1 4 3 1 3 5 -----Example Output----- 6 -----Explanation----- We use a minimum spanning tree algorithm (like Kruskal\'s or Prim\'s) to find the minimum time to connect all nodes. The total minimum time to connect all grids in this example is 6 (1+2+3). Additional Example Input: 4 2 1 2 5 3 4 10 Additional Example Output: -1 Explanation: It is impossible to connect all grids with the given connections, so the output is -1.","solution":"def find(parent, i): if parent[i] == i: return i return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def minimum_time_to_connect_all_grids(N, M, edges): if N == 1: return 0 edges.sort(key=lambda x: x[2]) # Sort edges based on their weight parent = [i for i in range(N)] rank = [0] * N mst_weight = 0 edges_used = 0 for edge in edges: u, v, w = edge u -= 1 v -= 1 root_u = find(parent, u) root_v = find(parent, v) if root_u != root_v: union(parent, rank, root_u, root_v) mst_weight += w edges_used += 1 if edges_used != N - 1: return -1 return mst_weight"},{"question":"Sarah loves to collect vintage cars and every year she holds a vintage car exhibition. Each car in the exhibition features different unique accessories such as mirrors, plates, and badges. Every car is required to have at least one accessory. Sarah wants to know the total number of ways the accessories can be arranged given a set number of accessories. Help Sarah by writing a function that takes the number of accessories and returns the total number of ways the accessories can be arranged such that each car has at least one accessory. **Function Signature**: ```python def accessory_combinations(n: int) -> int: ``` **Input**: - `n` (1 <= n <= 15): The number of unique accessories. **Output**: - A single integer representing the total number of ways the accessories can be arranged such that each car has at least one accessory. **Examples**: ```python assert accessory_combinations(1) == 1 assert accessory_combinations(2) == 3 assert accessory_combinations(3) == 7 ``` **Note**: - For `n = 2`, the possible ways are: - Car 1: {Accessory 1}, Car 2: {Accessory 2} - Car 1: {Accessory 2}, Car 2: {Accessory 1} - Car 1: {Accessory 1, Accessory 2} - For `n = 3`, the possible ways are: - Car 1: {Accessory 1}, Car 2: {Accessory 2}, Car 3: {Accessory 3} - Car 1: {Accessory 1, Accessory 2}, Car 2: {Accessory 3} - Car 1: {Accessory 1, Accessory 3}, Car 2: {Accessory 2} - Car 1: {Accessory 1}, Car 2: {Accessory 2, Accessory 3} - Car 1: {Accessory 2, Accessory 3}, Car 2: {Accessory 1} - Car 1: {Accessory 1}, Car 2: {Accessory 2}, Car 3: {Accessory 3} - Car 1: {Accessory 1, Accessory 2, Accessory 3}","solution":"def accessory_combinations(n: int) -> int: Calculate the total number of ways to arrange accessories such that each car has at least one accessory. This is done by calculating the nth Bell number which represents the number of ways to partition a set of n elements. def bell_number(n): bell = [[0 for _ in range(n+1)] for _ in range(n+1)] bell[0][0] = 1 for i in range(1, n+1): # Explicitly put the last element as it is the sum of all prior row elements. bell[i][0] = bell[i-1][i-1] for j in range(1, i+1): # Current element is sum of the element to the left and the above element. bell[i][j] = bell[i-1][j-1] + bell[i][j-1] return bell[n][0] return bell_number(n)"},{"question":"Crowley is tasked with finding an ancient artifact hidden in a vast labyrinth. The labyrinth is represented as a grid of cells, where each cell is either open (\'.\') or contains an obstacle (\'#\'). Crowley starts at the top-left cell (1,1) and wants to reach the bottom-right cell (N,M). He can only move right or down from any cell. Determine whether Crowley can reach the bottom-right cell while avoiding obstacles. If he can, print YES; otherwise, print NO. Constraints 1 ≤ N, M ≤ 1000 Input First line contains two integers N and M separated by a space. Next N lines each contain a string of M characters (either \'.\' or \'#\'). Output Print YES if Crowley can reach the bottom-right cell from the top-left cell; otherwise, print NO. Setter: [Your Name] SAMPLE INPUT 4 4 . . . # . # . . . . # . . . . . SAMPLE OUTPUT YES","solution":"def can_reach_end(grid): N = len(grid) M = len(grid[0]) if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return \\"NO\\" # Use a queue for BFS queue = [(0, 0)] visited = set() directions = [(1, 0), (0, 1)] # down, right while queue: x, y = queue.pop(0) if (x, y) == (N-1, M-1): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == \'.\' and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" def can_crowley_escape(N, M, grid): grid = [list(row.replace(\\" \\", \\"\\")) for row in grid] return can_reach_end(grid) # Parse input def parse_input(input_string): data = input_string.strip().split(\'n\') N, M = map(int, data[0].split()) grid = data[1:] return N, M, grid # Main Function def main(input_string): N, M, grid = parse_input(input_string) return can_crowley_escape(N, M, grid)"},{"question":"John has been given the task to manage the collection of books in a library. He has a list of N unique book IDs representing books currently in the library. However, some books were removed from the library, but their IDs are missing. John knows the total sum of the IDs of all the books originally present in the library before any removal (denoted as S). He also knows the total number of books that were originally present in the library before any removal (denoted as M). Given the current list of book IDs and the values of S and M, help John find out the sum of the IDs of the missing books or decide that there is some inconsistency and the described scenario is impossible. In other words, you need to verify if the sum and count of the remaining books, along with the total sum S and count M can accurately restore the sum of the missing books. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains three space-separated integers N, M and S. - The second line contains N space-separated integers representing the book IDs currently present in the library. -----Output----- For each test case, print a single line containing one integer — the sum of the IDs of the missing books, or -1 if there is a mistake. -----Constraints----- - 1 le T le 100 - 1 le N le 100 - N < M le 100 - 1 le S le 10^9 - 1 le book IDs le 10^5 for each valid book ID -----Example Input----- 3 3 5 100 10 20 30 2 4 50 5 10 4 5 120 15 25 35 40 -----Example Output----- 40 -1 5","solution":"def find_missing_books_sum(N, M, S, book_ids): Given the current list of book IDs and the values of S and M, this function returns the sum of the IDs of the missing books or -1 if there is a mistake. current_sum = sum(book_ids) expected_sum_of_missing_books = S - current_sum expected_count_of_missing_books = M - N if expected_count_of_missing_books > 0 and current_sum <= S: return expected_sum_of_missing_books return -1 def solve_multiple_cases(T, cases): results = [] for case in cases: N, M, S = case[0] book_ids = case[1] results.append(find_missing_books_sum(N, M, S, book_ids)) return results"},{"question":"Bob, the botanist, is fascinated by different kinds of plants. He owns a research lab where he experiments with an array of plants placed in a single row. Each plant initially has a health score of 0. Bob has N plants arranged from left to right and he performs Q operations on them. There are two types of operations: 1. Bob can increase the health score of a specific range of plants by 1. 2. Bob can ask for the maximum health score among all plants in the range. Your task is to handle these operations efficiently. # Input: - The first line of input contains exactly 2 positive integers N and Q. (1 le N, Q le 100,000). - The next Q lines describe the operations, which can be in one of the following two formats: - `1 u v`: Increase the health score of all plants from the u-th plant to the v-th plant inclusive, by 1. (1 le u le v le N). - `2 u v`: Query the maximum health score among plants from the u-th plant to the v-th plant inclusive. (1 le u le v le N). # Output: - For each query of type `2 u v`, output the maximum health score among the plants in the specified range. # Example: Input: ``` 5 6 1 1 3 1 2 5 2 1 5 1 4 5 2 4 5 1 3 3 ``` Output: ``` 2 2 ``` # Explanation: - Initially, all plant health scores are [0, 0, 0, 0, 0]. - Operation 1 increases health scores: [1, 1, 1, 0, 0]. - Operation 2 increases health scores: [1, 2, 2, 1, 1]. - Query 2 returns the max health in the range [1, 5], which is 2. - Operation 3 increases health scores: [1, 2, 2, 2, 2]. - Query 4 returns the max health in the range [4, 5], which is 2. - Operation 5 increases health score of the 3rd plant: [1, 2, 3, 2, 2].","solution":"class BotanistLab: def __init__(self, n): self.n = n self.health_scores = [0] * (n + 1) self.lazy = [0] * (4 * (n + 1)) self.seg_tree = [0] * (4 * (n + 1)) def build(self, node, start, end): if start == end: self.seg_tree[node] = self.health_scores[start] else: mid = (start + end) // 2 self.build(2 * node, start, mid) self.build(2 * node + 1, mid + 1, end) self.seg_tree[node] = max(self.seg_tree[2 * node], self.seg_tree[2 * node + 1]) def update_range(self, node, start, end, l, r, val): if self.lazy[node] != 0: self.seg_tree[node] += self.lazy[node] if start != end: self.lazy[2 * node] += self.lazy[node] self.lazy[2 * node + 1] += self.lazy[node] self.lazy[node] = 0 if start > r or end < l: return if start >= l and end <= r: self.seg_tree[node] += val if start != end: self.lazy[2 * node] += val self.lazy[2 * node + 1] += val return mid = (start + end) // 2 self.update_range(2 * node, start, mid, l, r, val) self.update_range(2 * node + 1, mid + 1, end, l, r, val) self.seg_tree[node] = max(self.seg_tree[2 * node], self.seg_tree[2 * node + 1]) def query_range(self, node, start, end, l, r): if start > r or end < l: return -float(\'inf\') if self.lazy[node] != 0: self.seg_tree[node] += self.lazy[node] if start != end: self.lazy[2 * node] += self.lazy[node] self.lazy[2 * node + 1] += self.lazy[node] self.lazy[node] = 0 if start >= l and end <= r: return self.seg_tree[node] mid = (start + end) // 2 left_query = self.query_range(2 * node, start, mid, l, r) right_query = self.query_range(2 * node + 1, mid + 1, end, l, r) return max(left_query, right_query) def plant_process(n, operations): result = [] lab = BotanistLab(n) lab.build(1, 1, n) for op in operations: if op[0] == 1: u, v = op[1], op[2] lab.update_range(1, 1, n, u, v, 1) elif op[0] == 2: u, v = op[1], op[2] result.append(lab.query_range(1, 1, n, u, v)) return result"},{"question":"You are given a grid with some cells occupied by mines. The task is to find the number of distinct connected components of unoccupied cells (safe zones) in the grid. Two cells are considered connected if they share a side (left, right, top, bottom). -----Input----- The first line of input contains two integers, n and m (1 leq n, m leq 1000), representing the number of rows and columns in the grid respectively. The next n lines contain m characters each, either `.` representing an unoccupied cell or `*` representing a mine. -----Output----- Output a single integer, the number of distinct connected components of unoccupied cells. -----Examples----- Sample Input: 4 5 .*..* *..** .*..* ***.* Sample Output: 3","solution":"def count_safe_zones(grid, n, m): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or grid[x][y] != \'.\': return grid[x][y] = \'#\' # mark as visited dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) safe_zones = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': safe_zones += 1 dfs(i, j) return safe_zones def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [list(data[i + 2]) for i in range(n)] result = count_safe_zones(grid, n, m) print(result)"},{"question":"Task ====== Create a function that evaluates a given string containing a mathematical expression in very simple Reverse Polish Notation (RPN). The function should be able to handle addition, subtraction, multiplication, and division of positive integers. It should return the final value as an integer. Reverse Polish Notation (RPN) is a postfix notation used in mathematical expressions. In this notation, the operator follows its operands. For example, the expression `2 3 +` would result in `5`. Syntax/Info ====== The operators you need to support are `+`, `-`, `*`, and `/`. - `+`: Addition - `-`: Subtraction - `*`: Multiplication - `/`: Integer Division (use the floor division operator `//` in Python) The operands are positive integers. The expressions are well-formed, meaning you will not encounter division by zero, and there will always be enough operands for each operation. Function Signature ====== ```python def evaluate_rpn(expression: str) -> int: ``` Examples ====== **Example 1:** ```python evaluate_rpn(\\"3 4 + 2 * 7 /\\") ``` *Output:* 2 Explanation: - `3 4 +` results in `7` - `7 2 *` results in `14` - `14 7 /` results in `2` **Example 2:** ```python evaluate_rpn(\\"5 1 2 + 4 * + 3 -\\") ``` *Output:* 14 Explanation: - `1 2 +` results in `3` - `3 4 *` results in `12` - `5 12 +` results in `17` - `17 3 -` results in `14` Notes ====== 1. You may assume the given input string always forms a valid RPN expression. 2. Each token in the expression will be separated by a single space.","solution":"def evaluate_rpn(expression: str) -> int: stack = [] tokens = expression.split() for token in tokens: if token.isdigit(): # If the token is an operand stack.append(int(token)) else: operand2 = stack.pop() operand1 = stack.pop() if token == \'+\': stack.append(operand1 + operand2) elif token == \'-\': stack.append(operand1 - operand2) elif token == \'*\': stack.append(operand1 * operand2) elif token == \'/\': stack.append(operand1 // operand2) return stack[0]"},{"question":"Aria has an array of integers A of length N. She wants to determine how many pairs of integers (i, j) (1 ≤ i < j ≤ N) exist such that their sum is a multiple of a given integer K. Help Aria by writing a program that computes this number of pairs. -----Constraints----- - 1 ≤ N ≤ 2 × 10^5 - 1 ≤ A[i] ≤ 10^9 (1 ≤ i ≤ N) - 1 ≤ K ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N K A1 A2 A3 ... AN -----Output----- Print the number of pairs (i, j) such that their sum is a multiple of K. -----Sample Input----- 5 4 1 2 3 4 5 -----Sample Output----- 2 Here A = [1, 2, 3, 4, 5]. The valid pairs (i, j) such that A[i] + A[j] is a multiple of 4 are: - (1, 3) as 1 + 3 = 4 - (2, 4) as 2 + 4 = 6 There are 2 such pairs, so print 2.","solution":"def count_pairs(N, K, A): Returns the number of pairs (i, j) such that A[i] + A[j] is a multiple of K # Array to store frequencies of all remainders when divided by K remainder_count = [0] * K # Count occurrences of all remainders for number in A: remainder_count[number % K] += 1 # Count pairs with both remainders 0 count = remainder_count[0] * (remainder_count[0] - 1) // 2 # Count pairs with complementary remainders (i.e., remainder_i + remainder_j == K) for i in range(1, (K // 2) + 1): if i != K - i: count += remainder_count[i] * remainder_count[K - i] # Special case for evenly divisible remainder when K is even if K % 2 == 0: count += (remainder_count[K // 2] * (remainder_count[K // 2] - 1)) // 2 return count"},{"question":"You are given a grid (made up of \'.\' and \'#\' characters) representing an area where \'.\' represents a free cell and \'#\' represents a blocked cell. You want to determine the minimum number of steps required to move from the top-left corner of the grid to the bottom-right corner, where a step constitutes moving either left, right, up, or down to an adjacent free cell. You cannot move out of the grid or through blocked cells. Given the constraints, the first thing to check is if either the start or end positions are blocked. If either of them is blocked, it\'s impossible to reach the destination. Write a program that reads the grid and calculates the minimum steps required to move from the top-left corner to the bottom-right corner. If it\'s not possible to reach the destination, output \\"-1\\" (without the quotes). Input The first line contains two integers n and m (2 ≤ n, m ≤ 1000), the number of rows and columns of the grid. Each of the next n lines contains a string of length m consisting of characters \'.\' and \'#\'. Output Output the minimum number of steps required to reach the bottom-right corner from the top-left corner, or \\"-1\\" if it\'s impossible. Examples Input 5 5 ..... .#.#. .#.#. .#.#. ..... Output 8 Input 4 4 .... #. ..#. ...# Output -1","solution":"from collections import deque def min_steps(n, m, grid): # Check if the start or end point is blocked if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 # Directions for moving: right, left, down, up directions = [(0, 1), (0, -1), (1, 0), (-1, 0)] # Initialize the BFS queue and visited matrix queue = deque([(0, 0, 0)]) # (row, col, steps) visited = [[False] * m for _ in range(n)] visited[0][0] = True while queue: row, col, steps = queue.popleft() # Check if the bottom-right corner is reached if row == n - 1 and col == m - 1: return steps # Explore the neighbors for dr, dc in directions: new_row, new_col = row + dr, col + dc # Check if the new position is within bounds and not visited and not blocked if 0 <= new_row < n and 0 <= new_col < m and not visited[new_row][new_col] and grid[new_row][new_col] == \'.\': visited[new_row][new_col] = True queue.append((new_row, new_col, steps + 1)) # If the bottom-right corner was not reached return -1"},{"question":"A company has a sequence of employees with different unique IDs. The manager wants to identify patterns in the arrangement of IDs to make job assignments easier. He needs your help to code this problem. -----Input:----- - First line will contain an integer T, the number of test cases. - Each test case will consist of a single line of input with a sequence of space-separated integers representing employee IDs. -----Output:----- For each test case, output the longest increasing subsequence (LIS) of the provided sequence. If there are multiple subsequences of the same length, return the one that comes first in the order of appearance in the input. -----Constraints----- - 1 leq T leq 20 - Each sequence contains between 1 and 100 integers. - The value of each integer is between 1 and 1000. -----Sample Input:----- 3 10 22 9 33 21 50 41 60 80 5 8 7 1 9 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 10 22 33 50 60 80 5 8 9 1 2 3 4 5 6 7 8 9","solution":"def longest_increasing_subsequence(seq): Returns the longest increasing subsequence in a sequence of numbers. If there are multiple subsequences of the same length, return the one that occurs first in the order of appearance. n = len(seq) lis = [[] for _ in range(n)] # Initializing the first element of lis lis[0] = [seq[0]] # Compute optimized LIS values for i in range(1, n): for j in range(i): # Check if seq[i] can be appended to the end of lis[j] if seq[i] > seq[j] and len(lis[i]) < len(lis[j]): lis[i] = lis[j][:] lis[i].append(seq[i]) # Get the longest subsequence max_len = 0 max_seq = [] for subseq in lis: if len(subseq) > max_len: max_len = len(subseq) max_seq = subseq return max_seq def process_input(test_cases): results = [] for seq in test_cases: lis = longest_increasing_subsequence(seq) results.append(\\" \\".join(map(str, lis))) return results def main(): import sys input = sys.stdin.read lines = input().strip().split(\\"n\\") T = int(lines[0]) test_cases = [] for i in range(1, T + 1): seq = list(map(int, lines[i].strip().split())) test_cases.append(seq) results = process_input(test_cases) for res in results: print(res)"},{"question":"# Task You are given a list of positive numbers representing the durations of tasks. Your goal is to find the maximum number of tasks that you can complete without exceeding a given total time limit. You can choose the tasks in any order. # Input/Output `[input]` integer `maxTime` The maximum allowed total duration for the tasks. `[input]` list of integers `tasks` A list of positive integers where each integer indicates the duration of a task. `[output]` an integer Return the maximum number of tasks that can be completed without the total duration exceeding `maxTime`. # Example For `maxTime = 10` and `tasks = [2, 3, 1, 5, 4]`, the output should be `4`. Explanation: You can choose tasks with durations `[2, 3, 1, 4]`, which add up to 10, the maximum allowed time. Therefore, the maximum number of tasks completed is 4. For `maxTime = 7` and `tasks = [4, 2, 3, 2]`, the output should be `3`. Explanation: You can choose tasks with durations `[2, 3, 2]` which add up to 7. Therefore, the maximum number of tasks completed is 3.","solution":"def maxTasks(maxTime, tasks): Returns the maximum number of tasks that can be completed without exceeding the given total time limit. Parameters: maxTime (int): The maximum allowed total duration for the tasks. tasks (list of int): A list of positive integers where each integer indicates the duration of a task. Returns: int: The maximum number of tasks that can be completed. # Sort the tasks by duration in ascending order tasks.sort() total_time = 0 task_count = 0 # Iterate over the tasks and count how many can be completed within the limit for task in tasks: if total_time + task <= maxTime: total_time += task task_count += 1 else: break return task_count"},{"question":"Given an integer `n`, implement a function to generate a list of the first `n` prime numbers in ascending order. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example, 2, 3, 5, and 7 are prime numbers, but 4, 6, 8, 9, and 10 are not because they can be divided exactly by numbers other than 1 and themselves. **Function Signature:** ```python def generate_primes(n: int) -> List[int]: pass ``` **Input:** - An integer `n` (1 ≤ n ≤ 10^5) representing the number of prime numbers to generate. **Output:** - A list of `n` prime numbers sorted in ascending order. **Example:** ```python generate_primes(5) ``` **Output:** ``` [2, 3, 5, 7, 11] ``` **Note:** - Make sure the implementation is efficient and can handle the upper limits of the input constraints.","solution":"from typing import List def generate_primes(n: int) -> List[int]: Generates a list of the first n prime numbers in ascending order. if n < 1: return [] primes = [] candidate = 2 while len(primes) < n: is_prime = True for prime in primes: if prime * prime > candidate: break if candidate % prime == 0: is_prime = False break if is_prime: primes.append(candidate) candidate += 1 return primes"},{"question":"You are given a rectangular grid consisting of \'1\'s and \'0\'s, where \'1\' represents land and \'0\' represents water. Each cell of the grid is a square. Implement a function that determines the number of distinct islands in the grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You can assume all four edges of the grid are surrounded by water. Write a function `num_islands` that takes a 2D list representing the grid as input and returns an integer representing the number of distinct islands. Your function should have the following signature: ```python def num_islands(grid: List[List[str]]) -> int: ``` # Constraints - The size of the grid is `m x n` where 1 <= m, n <= 100. - Each element of the grid is either \'1\' or \'0\'. # Example Input: ``` [ [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"1\\",\\"1\\",\\"0\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"1\\",\\"0\\",\\"0\\"], [\\"0\\",\\"0\\",\\"0\\",\\"1\\",\\"1\\"] ] ``` Output: ``` 3 ``` Explanation: There are three islands in the grid: 1. The first island is formed by cells in positions (0, 0), (0, 1), (1, 0), and (1, 1). 2. The second island is formed by the cell in position (2, 2). 3. The third island is formed by cells in positions (3, 3) and (3, 4). # Note: - It is preferable to solve this problem using Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the grid.","solution":"from typing import List def num_islands(grid: List[List[str]]) -> int: if not grid: return 0 def dfs(grid, i, j): if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == \'0\': return grid[i][j] = \'0\' # mark as visited # explore all adjacent cells dfs(grid, i + 1, j) dfs(grid, i - 1, j) dfs(grid, i, j + 1) dfs(grid, i, j - 1) num_islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': dfs(grid, i, j) num_islands += 1 return num_islands"},{"question":"A company is planning to launch a new service that involves scheduling several tasks. Each task has a specific start and end time, and some tasks cannot be scheduled concurrently due to resource constraints. The company wants to maximize the number of tasks that can be performed without any overlap. Your task is to identify the maximum number of non-overlapping tasks that can be scheduled. Each task is represented by its start and end time. -----Input----- The first line contains an integer `n` (1 ≤ `n` ≤ 10^5) — the number of tasks. Each of the next `n` lines contains two integers `s_{i}` and `e_{i}` (0 ≤ `s_{i}` < `e_{i}` ≤ 10^9) — the start and end times of each task. -----Output----- Output a single integer `m` — the maximum number of non-overlapping tasks that can be scheduled. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 5 1 2 2 3 3 4 4 5 5 6 Output 5 -----Note----- In the first example, the tasks that can be scheduled without overlap are (1, 3) and (4, 6), resulting in a maximum of 2 tasks. In the second example, since each task ends just as the next one starts, all tasks can be scheduled resulting in a maximum of 5 tasks.","solution":"def max_non_overlapping_tasks(tasks): Returns the maximum number of non-overlapping tasks that can be scheduled. Parameters: tasks (list of tuples): A list of tuples where each tuple consists of two integers representing the start and end time of a task. Returns: int: The maximum number of non-overlapping tasks. # Sorting tasks based on their end times sorted_tasks = sorted(tasks, key=lambda x: x[1]) # Initialize the count of non-overlapping tasks count = 0 current_end_time = 0 for start, end in sorted_tasks: if start >= current_end_time: count += 1 current_end_time = end return count"},{"question":"You are given a string S of length 8. Each character in the string can either be \'1\' or \'0\'. If the i-th character of S is \'1\', it means that the i-th task assigned to Snuke is completed; \'0\' means that the task is not completed. Your task is to determine and print the number of tasks that Snuke has completed based on the given string S. Constraints * The length of S is 8. * S consists of \'0\' and \'1\'. Inputs Input is given from Standard Input in the following format: S Outputs Print the number of tasks Snuke has completed. Examples Input 10101010 Output 4 Input 11111111 Output 8 Input 00000000 Output 0","solution":"def count_completed_tasks(S): Takes a string S of length 8 consisting of \'0\'s and \'1\'s. Returns the number of \'1\'s in the string S. return S.count(\'1\')"},{"question":"John is trying to organize his library of books. He wants to arrange the books in alphabetical order by their titles. However, some of the titles are in lowercase and others are in uppercase. He wants to sort them in a case-insensitive manner, but if the titles are the same when converted to lowercase, the original case should be preserved with lowercase titles coming before uppercase. Your task is to write a program that helps John arrange his books in the desired order. Input The first line of the input contains an integer N denoting the number of book titles. Then N lines follow, each containing a single book title. Each title consists of only alphabetic characters and spaces. Output You need to output N lines, each containing a book title in the sorted order as described above. Constraints 1 ≤ N ≤ 100 1 ≤ length of each title ≤ 100 Example Input: 5 The Hobbit \\" harry potter \\" Moby Dick \\" harry potter and the Chamber of Secrets \\" THE GREAT GATSBY Output: harry potter \\" harry potter and the Chamber of Secrets \\" Moby Dick \\" THE GREAT GATSBY \\" The Hobbit","solution":"def sort_books(titles): Sorts a list of book titles in a case-insensitive manner, with lowercase titles appearing before uppercase when the lowercased titles are the same. return sorted(titles, key=lambda title: (title.lower(), title)) def organize_library(n, titles): Organize John\'s library by sorting book titles and return the sorted list. Args: n : int : number of book titles titles : list of str : list of book titles Returns: list of str : sorted list of book titles return sort_books(titles)"},{"question":"There is a contest where participants are building towers using two types of blocks: \'A\'-shaped and \'B\'-shaped blocks. An \'A\'-shaped block can only be placed on top of an \'A\'-shaped block, and a \'B\'-shaped block can only be placed on top of a \'B\'-shaped block. Additionally, there is a special rule that you can place one \'B\'-shaped block on top of one \'A\'-shaped block to form an \'ABA\' tower. Given that you have N \'A\'-shaped blocks and M \'B\'-shaped blocks, determine the maximum number of \'ABA\' towers you can create. Constraints * 1 ≤ N, M ≤ 10^12 Input The input is given from Standard Input in the following format: N M Output Print the answer. Examples Input 2 5 Output 2 Input 4 6 Output 4","solution":"def max_aba_towers(N, M): Given N \'A\'-shaped blocks and M \'B\'-shaped blocks, determines the maximum number of \'ABA\' towers that can be created. return min(N, M // 2) if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) M = int(data[1]) print(max_aba_towers(N, M))"},{"question":"Your task is to write a function that takes a list of words and returns the first unique word in the list. A unique word is defined as a word that appears exactly once in the list. If there are no unique words, return an empty string. An example: ```python words = [\'apple\', \'banana\', \'apple\', \'orange\', \'banana\', \'grape\'] find_unique_word(words) # Returns \'orange\' words = [\'apple\', \'banana\', \'apple\', \'banana\'] find_unique_word(words) # Returns \'\' ``` The function should have a time complexity of O(n).","solution":"def find_unique_word(words): Returns the first unique word in the list. If there are no unique words, returns an empty string. Args: words (list): A list of words (strings). Returns: str: The first unique word or an empty string. from collections import Counter word_counts = Counter(words) for word in words: if word_counts[word] == 1: return word return \'\'"},{"question":"A company requires a system to manage its employees\' promotions. Each employee at the company is associated with a unique ID number and has a rating that is a positive integer. The company promotes employees according to the following rules: 1. Employees with the highest rating get promoted first. 2. If two or more employees have the same rating, the one with the lower ID number gets promoted first. You are tasked with writing a program that will read a list of employees along with their ratings and then output the ID numbers of the employees in the order they should be promoted. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of employees. - Each of the next n lines contains two space-separated integers vi and ri (1 ≤ vi ≤ 10^9, 1 ≤ ri ≤ 100), where vi is the employee\'s unique ID number and ri is the employee\'s rating. Output: - Print a list of employee ID numbers in the order they should be promoted. Examples: Input: 5 1 80 2 90 3 80 4 90 5 85 Output: 2 4 5 1 3 Note: - In the example, there are 5 employees. Employee 2 and Employee 4 have the highest rating of 90. Employee 2 has a lower ID number compared to Employee 4 and is therefore promoted first. - Employee 5, with a rating of 85, is promoted next. - Employees 1 and 3 have a rating of 80. Employee 1 has a lower ID number and is therefore promoted before Employee 3.","solution":"def promotion_order(employee_data): Returns a list of employee IDs in the order they should be promoted. :param employee_data: List of tuples where each tuple contains employee ID and rating :return: List of employee IDs sorted according to promotion rules # Sort first by rating in descending order, then by ID in ascending order sorted_employees = sorted(employee_data, key=lambda x: (-x[1], x[0])) # Extract and return the sorted list of IDs return [employee[0] for employee in sorted_employees]"},{"question":"Given a positive integer N, write a program to determine whether the sum of the digits of N is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Example 1: Input: N = 47 Output: True Explanation: The sum of the digits 4 + 7 = 11, and 11 is a prime number. Example 2: Input: N = 123 Output: True Explanation: The sum of the digits 1 + 2 + 3 = 6, and 6 is not a prime number. Your Task: You do not need to read input or print anything. Your task is to complete the function isSumPrime() which takes N as input parameter and returns True if the sum of its digits is a prime number, otherwise returns False. Expected Time Complexity: O(√M) where M is the sum of digits. Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{18}","solution":"def is_prime(num): Helper function to check if a number is prime. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def isSumPrime(N): Function to determine whether the sum of the digits of N is a prime number. # Calculate sum of digits digit_sum = sum(int(digit) for digit in str(N)) # Check if the sum is a prime number return is_prime(digit_sum)"},{"question":"# Task: You need to write a function **matrix_rotate** that takes an n x n matrix (2D list) as input and rotates it 90 degrees clockwise. # Rules/Note: * If the input matrix is empty, the function should return an empty matrix. * The function must not use any additional matrices (i.e., do the rotation in-place). # Examples: matrix_rotate([[1, 2], [3, 4]]): [[3, 1], [4, 2]] matrix_rotate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]): [[7, 4, 1], [8, 5, 2], [9, 6, 3]] matrix_rotate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]): [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]] # Explanation: The function should take the input matrix and rotate it 90 degrees clockwise without using any additional matrices or lists. For instance, in the first example, the original matrix is: [[1, 2], [3, 4]] After rotating 90 degrees clockwise, the matrix becomes: [[3, 1], [4, 2]]","solution":"def matrix_rotate(matrix): Rotates an n x n matrix 90 degrees clockwise in-place. if not matrix or not matrix[0]: return matrix n = len(matrix) for layer in range(n // 2): first = layer last = n - 1 - layer for i in range(first, last): top = matrix[first][i] # Move left to top matrix[first][i] = matrix[last - (i - first)][first] # Move bottom to left matrix[last - (i - first)][first] = matrix[last][last - (i - first)] # Move right to bottom matrix[last][last - (i - first)] = matrix[i][last] # Move top to right matrix[i][last] = top return matrix"},{"question":"A robotics startup is developing a pathfinding algorithm for one of their drone delivery systems. The environment is modeled as a 2D grid, where some cells contain obstacles and others are free space. The drone can move up, down, left, or right, but it cannot move into cells containing obstacles. You need to write a program to compute the shortest path for the drone to get from the starting position to the delivery point. If there is no possible path, your program should return \\"No Path Found\\". Input Format The first line of input contains two integers n and m, the number of rows and columns in the grid, respectively. The next n lines each contain m characters, representing the grid. The character \'S\' denotes the starting position, \'D\' denotes the delivery point, \'.\' denotes free space, and \'#\' denotes an obstacle. Output Format You must output the length of the shortest path as an integer. If there is no possible path, output \\"No Path Found\\". Constraints 1 <= n, m <= 200 The grid is guaranteed to contain exactly one \'S\' and one \'D\'. Sample Input 1 5 5 S...# ..#.# .#..# .#D.. ..... Sample Output 1 7 Explanation The shortest path from \'S\' to \'D\' takes 7 steps. Sample Input 2 4 4 S# #D Sample Output 2 No Path Found Explanation There is no path from \'S\' to \'D\' due to obstacles.","solution":"from collections import deque def shortest_path(n, m, grid): def get_neighbors(x, y): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] != \'#\': yield nx, ny def bfs(start, end): queue = deque([(start[0], start[1], 0)]) visited = set() visited.add(start) while queue: x, y, dist = queue.popleft() if (x, y) == end: return dist for nx, ny in get_neighbors(x, y): if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 start, end = None, None for i in range(n): for j in range(m): if grid[i][j] == \'S\': start = (i, j) elif grid[i][j] == \'D\': end = (i, j) if not start or not end: raise ValueError(\\"Grid must contain exactly one \'S\' and one \'D\'\\") distance = bfs(start, end) return distance if distance != -1 else \\"No Path Found\\""},{"question":"Max is learning about strings and came across the concept of longest subsequences. Given a string S, Max wants to find the length of the longest subsequence that is a palindrome. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- A string S of length 1 leq |S| leq 1000. The string contains only lowercase English letters. -----Output----- Print a single integer L, the length of the longest palindromic subsequence in S. -----Explanation of Sample 2----- Sample input 2 corresponds to the string \\"bbabcbcab\\". The longest palindromic subsequence is \\"babcbab\\" with length 7. While there are other palindromic subsequences, \\"babcbab\\" is the longest one with maximum length. -----Examples----- Sample Input 1: a Sample Output 1: 1 Sample Input 2: bbabcbcab Sample Output 2: 7 Sample Input 3: abcdefg Sample Output 3: 1","solution":"def longest_palindromic_subsequence(S): Returns the length of the longest palindromic subsequence in S. n = len(S) # Create a DP array to store lengths of palindromic subsequences. dp = [[0 for x in range(n)] for y in range(n)] # All substrings of length 1 are palindromic. for i in range(n): dp[i][i] = 1 # Build the DP array. for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if S[i] == S[j] and cl == 2: dp[i][j] = 2 elif S[i] == S[j]: dp[i][j] = dp[i + 1][j - 1] + 2 else: dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) # Length of longest palindromic subsequence is in dp[0][n-1]. return dp[0][n - 1]"},{"question":"Write a function **\\"compress_string\\"** that takes a string as input and returns a new string where consecutive duplicate characters are replaced with the character followed by the count of repetitions. If a character does not repeat, it should appear in the output string as it is. For example: ``` compress_string(\\"aaabbcaaa\\") == \\"a3b2ca3\\" because there are three \'a\'s, followed by two \'b\'s, one \'c\', and three \'a\'s. compress_string(\\"abcd\\") == \\"abcd\\" because none of the characters are repeated. compress_string(\\"aabbccdd\\") == \\"a2b2c2d2\\" because each character is repeated twice consecutively. ```","solution":"def compress_string(s): Compresses the input string by replacing consecutive characters with the character followed by the count of repetitions. Args: s (str): The input string to compress. Returns: str: The compressed string. if not s: return \\"\\" compressed = [] count = 1 previous_char = s[0] for char in s[1:]: if char == previous_char: count += 1 else: if count > 1: compressed.append(f\\"{previous_char}{count}\\") else: compressed.append(previous_char) previous_char = char count = 1 if count > 1: compressed.append(f\\"{previous_char}{count}\\") else: compressed.append(previous_char) return \\"\\".join(compressed)"},{"question":"You are given an array of non-negative integers representing heights where each element corresponds to the height of a pillar and the width of each pillar is 1. The calculation of area considers the minimum height of the pillars within the selected range, and extends up to the boundaries defined by the adjacent pillars that limit the water\'s storage capacity. Determine the maximum amount of water that can be trapped between the pillars after it rains. The function should return an integer indicating the maximum water trapped. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - Each of the next T lines contains the heights of the pillars represented as space-separated integers. ------ Output Format ------ For each test case, print a single integer representing the maximum amount of water trapped between the pillars. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ n ≤ 10^4 where n is the number of pillars in each test case. 0 ≤ height[i] ≤ 10^9 ------ Sample Input 1 ------ 3 0 1 0 2 1 0 1 3 2 1 2 1 4 2 0 3 2 5 7 4 0 9 4 7 8 ------ Sample Output 1 ------ 6 9 15 ------ Explanation 1 ------ Test Case 1: - Between pillars (index 1 to index 3), there can be 1 unit of water between 1 and 2. - Between pillars (index 3 to index 7), there can be 4 units of water trapped between the tops of the 1, 1, and 3 heights. - Between pillars (index 8 to 10), there can be 1 unit of water trapped between the 2 and 2 heights. Adding the above, we get 1 + 4 + 1 = 6. Test Case 2: - Between pillars (index 0 to index 1), no water can be trapped. - Between pillars (index 1 to index 4), we can trap 4 units of water. - Between pillars (index 4 and 5), we can trap 3 units of water. Adding the above, we get 0 + 4 + 5 = 9. Test Case 3: - Between all pillars from (index 0 to the end of array), we get 15 units of water trapped. Thus, the expected output for each test case is correct.","solution":"def max_water_trapped(test_cases): def calculate_water(heights): n = len(heights) if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped results = [] for heights in test_cases: results.append(calculate_water(heights)) return results"},{"question":"You are given a list of integers `arr` and two integers `start` and `end`, representing the starting and ending indices of a subarray, respectively. Your task is to find the maximum sum of any subarray of this subarray. -----Constraints----- - `arr` is a list of integers where each element is between -10^4 and 10^4. - The length of `arr` is between 1 and 100 (inclusive). - `start` and `end` are integers such that 0 <= start <= end < len(arr). -----Input----- The input will be provided in the following format: n arr start end Where: - `n` is the length of the list `arr`. - `arr` is a list of integers of length `n`. - `start` and `end` are integers representing the starting and ending indices of the subarray. -----Output----- Print the maximum sum of any subarray of the subarray defined by `start` and `end`. -----Sample Input----- 8 -2 1 -3 4 -1 2 1 -5 4 0 3 -----Sample Output----- 4 In the sample provided, the subarray from index 0 to 3 in `arr` is [-2, 1, -3, 4]. The maximum sum of any subarray of this subarray is [4], which results in 4.","solution":"def max_subarray_sum(arr, start, end): Finds the maximum sum of any subarray of the subarray defined by start and end indices. subarray = arr[start:end+1] current_sum = 0 max_sum = float(\'-inf\') for num in subarray: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"A game developer is designing a new game where the objective is to jump between platforms in a 2D plane. Each platform is represented as a horizontal line segment, and each jump allows the player to move from one platform to another directly above or below. The developer needs to determine the minimum number of jumps required to move from a starting platform to a target platform. Given the platforms\' positions and lengths, your task is to help the developer by writing a function that calculates the minimum jumps needed, or determine if it is impossible to reach the target platform. Each platform starts at a particular x-coordinate and ends at another x-coordinate along the same y-coordinate. A player can jump from one platform to another if and only if their x-coordinates overlap. -----Input----- The first line of the input contains an integer T denoting the number of test cases. T test cases follow. For each test case: - The first line contains three integers indicating the x-coordinate and y-coordinate of the starting platform (x_start, y_start), and y-coordinate of the target platform (y_target). - The second line contains a single integer N representing the number of platforms. - The next N lines each contain three integers x1, x2, and y indicating a platform that starts at x1, ends at x2, and is at height y. (x1 < x2) -----Output----- For each test case, output the minimum number of jumps needed to reach the target platform, or -1 if it is not possible. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 1000 - -10^6 ≤ x1, x2, x_start ≤ 10^6 - -10^6 ≤ y, y_start, y_target ≤ 10^6 -----Example----- Input: 2 0 0 3 3 -1 1 1 -2 0 2 0 2 3 0 0 3 3 -1 1 1 -2 0 2 0 2 4 Output: 1 -1","solution":"from collections import deque def min_jumps(T, test_cases): results = [] for case in test_cases: x_start, y_start, y_target = case[\'start_target\'] N = case[\'N\'] platforms = case[\'platforms\'] # Add the starting platform to the platforms set platforms.append((x_start, x_start, y_start)) # Create a graph (adjacency list) of platforms graph = {} for i in range(len(platforms)): graph[i] = [] for j in range(len(platforms)): if i != j and platforms[i][2] != platforms[j][2]: # Check if platforms[i] and platforms[j] are overlapping on the x-axis if platforms[i][0] <= platforms[j][1] and platforms[j][0] <= platforms[i][1]: graph[i].append(j) # Use BFS to find the shortest path from the starting platform to any target platform start_index = len(platforms) - 1 queue = deque([(start_index, 0)]) visited = set() while queue: current, jumps = queue.popleft() visited.add(current) # Check if we have reached the target height if platforms[current][2] == y_target: results.append(jumps) break for neighbor in graph[current]: if neighbor not in visited: queue.append((neighbor, jumps + 1)) else: results.append(-1) return results # Example usage T = 2 test_cases = [ {\'start_target\': (0, 0, 3), \'N\': 3, \'platforms\': [(-1, 1, 1), (-2, 0, 2), (0, 2, 3)]}, {\'start_target\': (0, 0, 3), \'N\': 3, \'platforms\': [(-1, 1, 1), (-2, 0, 2), (0, 2, 4)]} ] print(min_jumps(T, test_cases))"},{"question":"John is learning about arrays and permutations and came up with a unique problem he wants to solve. John has an array of integers that he wants to split into two subarrays such that the absolute difference between the sums of the elements in the two subarrays is minimized. Given an array of integers, write a program to find the minimum possible absolute difference between the sums of the elements in the two subarrays. Input The first line of the input contains an integer T denoting the number of test cases. Each test case consists of two lines: - The first line contains an integer n, the number of elements in the array. - The second line contains n space-separated integers, representing the elements of the array. Output For each test case, output a single line containing an integer corresponding to the minimum possible absolute difference between the sums of the two subarrays. Constraints 1 ≤ T ≤ 20 1 ≤ n ≤ 20 1 ≤ element in the array ≤ 100 SAMPLE INPUT 2 4 1 2 3 9 5 1 5 11 5 9 SAMPLE OUTPUT 3 1 Explanation For the first test case, the array can be split into [1, 2, 3] and [9], where the sums are 6 and 9 respectively, giving a minimum absolute difference of 9 - 6 = 3. For the second test case, the array can be split into [1, 5, 5] and [11, 9], where the sums are 11 and 20 respectively, giving a minimum absolute difference of 20 - 19 = 1.","solution":"def min_abs_difference(arr): Returns the minimum absolute difference between the sums of two subarrays. total_sum = sum(arr) n = len(arr) dp = [False] * (total_sum // 2 + 1) dp[0] = True for num in arr: for j in range(total_sum // 2, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(total_sum // 2, -1, -1): if dp[i]: return total_sum - 2 * i return total_sum def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(min_abs_difference(arr)) return results"},{"question":"Given a list of integers, identify the position of a given target number in the list. If the target number appears multiple times, return the positions of all occurrences. If the target number is not found in the list, return -1. Input and output should be formatted accordingly. **Input:** 1. A space-separated list of integers. 2. A target integer to search for. **Output:** - A space-separated list of indices (1-based) where the target integer appears. - If the target integer does not appear in the list, print -1. **Example:** **Input:** ``` 4 5 6 7 5 6 4 5 8 1 5 ``` **Output:** ``` 2 5 8 ```","solution":"def find_positions(lst, target): Returns the 1-based positions of the target number in the list. If the target number is not present, returns -1. positions = [index + 1 for index, num in enumerate(lst) if num == target] return positions if positions else [-1] # Helper function to parse input and format output def process_input(input_list, target): lst = list(map(int, input_list.split())) target = int(target) positions = find_positions(lst, target) return \' \'.join(map(str, positions))"},{"question":"There are N books labeled from 1 to N. Each book is assigned a reading time of T_i units. You are allotted exactly M units of time for reading. Your goal is to maximize the number of different books you can read within the given time. -----Constraints----- - All values in input are integers. - 1 leq N leq 10^5 - 1 leq T_i leq 10^9 - 1 leq M leq 10^9 -----Input----- Input is given from Standard Input in the following format: N M T_1 T_2 ... T_N -----Output----- Print the maximum number of books you can read without exceeding the total allotted time M. -----Sample Input----- 5 10 3 1 4 1 2 -----Sample Output----- 4 Explanation: By selecting books with reading times 1, 1, 2, and 3, the total reading time will be 7, which is within the allotted 10 units of time. This allows you to read 4 books, the maximum possible.","solution":"def max_books(N, M, times): Given N books with reading times and a total allotted time M, this function returns the maximum number of books that can be read without exceeding the total allotted time. Parameters: N (int): Number of books M (int): Total allotted time times (list): List of reading times of the books Returns: int: Maximum number of books that can be read times.sort() total_time = 0 books_count = 0 for time in times: if total_time + time <= M: total_time += time books_count += 1 else: break return books_count # Reading input data if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) times = list(map(int, data[2:])) print(max_books(N, M, times))"},{"question":"During his trips, John enjoys taking photographs of scenic views. He tags each of his photos with a label representing a specific location he visited. Recently, John noticed that some of the labels have redundant prefixes that he wants to remove. Each label has an optional prefix \\"SCN-\\" that signifies \\"scenic\\". Your task is to create a program that trims the \\"SCN-\\" prefix from the label if it exists. Constraints * 1 leq |label| leq 100 * label consists of uppercase English letters and hyphens. Input Input is given from Standard Input in the following format: label Output Print the label after removing the \\"SCN-\\" prefix if it exists; otherwise, print the label as it is. Examples Input SCN-MOUNTAIN Output MOUNTAIN Input SUNSET Output SUNSET Input SCN-SUNRISE Output SUNRISE","solution":"def trim_scenic_prefix(label): Removes the \'SCN-\' prefix from the label if it exists. if label.startswith(\'SCN-\'): return label[4:] return label"},{"question":"A security firm has hired you to help them build a surveillance system with motion detection capabilities. The system comprises a grid of cameras, each positioned at various heights, spread across different points in a building. The cameras are designed to detect motion by capturing images, but the firm faces a challenge: the cameras\' field of view is limited by vertical obstructions such as walls. To maximize the efficiency of the surveillance system, your task is to determine the highest possible visibility height at which the cameras can be placed such that no camera\'s view is obstructed by a wall. Walls are represented as columns of solid blocks from the floor to the given height. Each cell in the grid represents either a camera (with a specified height) or a wall (with a specified height). The firm wants to ensure that all cameras have clear visibility at the cell height determined. Cameras are only able to check for obstructions at the height at which they are installed, meaning they will not detect any obstructions below or above their placement height. -----Input----- The first line contains two integers: the number of rows R and the number of columns C in the grid, where 1 leq R, C leq 1000. The next R lines each contain C integers. Each integer either represents a camera with a non-negative height (in meters) or the height of a wall (also in meters). If a cell contains a value of -1, it indicates the presence of a camera at that position. All heights are at least 0 and at most 10^9. -----Output----- Output a single line containing a single integer: the highest possible visibility height in meters, such that all cameras have an unobstructed view at that height. -----Examples----- Sample Input 1: 3 3 2 -1 3 4 1 -1 5 7 6 Sample Output 1: 1 Sample Input 2: 2 2 3 -1 4 5 Sample Output 2: 3","solution":"def highest_possible_visibility_height(grid): Determine the highest possible visibility height for cameras in the grid. Parameters: grid (list of list of int): The 2D grid containing heights of walls and cameras. Returns: int: The highest possible visibility height where no camera\'s view is obstructed by a wall. R = len(grid) C = len(grid[0]) wall_heights = set() for r in range(R): for c in range(C): if grid[r][c] != -1: wall_heights.add(grid[r][c]) if not wall_heights: return -1 wall_heights = sorted(list(wall_heights)) min_camera_height = float(\'inf\') for r in range(R): for c in range(C): if grid[r][c] == -1: min_camera_height = min(min_camera_height, wall_heights[0]) if min_camera_height == float(\'inf\'): return -1 return min_camera_height"},{"question":"Allen loves strings and is intrigued by palindromes. He defines a palindrome as a string that reads the same forwards and backwards. To challenge his skills, he decides to find out if a given string can be rearranged to form a palindrome. Write a program that takes a string and determines if it can be rearranged to form a palindrome. If it can, print \\"YES\\", otherwise print \\"NO\\". -----Input:----- - First line contains N, the number of test cases. - Each of the next N lines contains a single string S consisting of lowercase English letters only. -----Output:----- For each test case, output \\"YES\\" or \\"NO\\" on a new line. -----Constraints----- - 1 leq N leq 100 - 1 leq |S| leq 10^4 -----Sample Input:----- 2 aabb abc -----Sample Output:----- YES NO","solution":"def can_form_palindrome(s): Determines if a given string can be rearranged to form a palindrome. Args: s (str): The input string Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to a palindrome only if no more than one character has an odd count. return \\"YES\\" if odd_count <= 1 else \\"NO\\" def solve(test_cases): results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results"},{"question":"A robot is on an infinite grid starting at position (0, 0). The robot can move in four possible directions: \'U\' (up), \'D\' (down), \'L\' (left), and \'R\' (right). Given a string of instructions containing these characters, determine if the robot returns to its original position after executing all the instructions. Return \\"YES\\" if the robot returns to (0, 0) and \\"NO\\" otherwise. Example 1: Input: instructions = \\"UD\\" Output: \\"YES\\" Explanation: The robot moves up once and down once, returning to the origin. Example 2: Input: instructions = \\"LL\\" Output: \\"NO\\" Explanation: The robot moves left twice and does not return to the origin. Example 3: Input: instructions = \\"URDL\\" Output: \\"YES\\" Explanation: The robot moves up, right, down, and left, returning to the origin. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function doesRobotReturn() that takes a string (instructions) and returns \\"YES\\" if the robot returns to the origin and \\"NO\\" otherwise. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ length of instructions ≤ 10^5 The instruction string will only contain \'U\', \'D\', \'L\', and \'R\' characters.","solution":"def does_robot_return(instructions): Determines if a robot returns to the origin after executing a series of instructions. Args: instructions (str): A string containing \'U\', \'D\', \'L\', and \'R\' characters representing moves. Returns: str: \\"YES\\" if the robot returns to the origin, otherwise \\"NO\\". x, y = 0, 0 for instruction in instructions: if instruction == \'U\': y += 1 elif instruction == \'D\': y -= 1 elif instruction == \'L\': x -= 1 elif instruction == \'R\': x += 1 return \\"YES\\" if x == 0 and y == 0 else \\"NO\\""},{"question":"Alice has recently learned about prime numbers, and she is fascinated by them. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Alice wants to create a sequence where each number in the sequence has exactly three distinct prime factors. Write a program to help Alice find the first N numbers in such a sequence. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The next T lines will each contain a single integer N, the number of numbers Alice wants to find for that test case. ------ Output Format ------ For each test case, output a single line containing the first N numbers in the sequence, separated by spaces. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 ------ Sample Input 1 ------ 2 3 5 ------ Sample Output 1 ------ 30 42 60 30 42 60 66 70 ------ Explanation 1 ------ The first few numbers that have exactly three distinct prime factors are: 30 (2, 3, 5), 42 (2, 3, 7), 60 (2, 3, 5), 66 (2, 3, 11), 70 (2, 5, 7). For the first test case, the required sequence is 30, 42, and 60. For the second test case, the sequence extends to 30, 42, 60, 66, and 70.","solution":"import itertools from sympy import primefactors def numbers_with_three_distinct_prime_factors(N): Returns the first N numbers with exactly three distinct prime factors. result = [] num = 2 while len(result) < N: if len(primefactors(num)) == 3: result.append(num) num += 1 return result def solve(test_cases): Solves the problem for multiple test cases. results = [] for N in test_cases: results.append(numbers_with_three_distinct_prime_factors(N)) return results def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [int(lines[i]) for i in range(1, T + 1)] results = solve(test_cases) output_lines = [\' \'.join(map(str, result)) for result in results] return \'n\'.join(output_lines)"},{"question":"You are given an array of integers and a series of queries. For each query, you are asked to determine the sum of the elements in a specified subarray. Your task is to process these queries and output the results. Constraints - All values in input are integers. - 1 ≤ N ≤ 10^5 (number of elements in the array) - 1 ≤ Q ≤ 10^5 (number of queries) - 1 ≤ A[i] ≤ 10^9 (elements of the array) - 1 ≤ L, R ≤ N (1-based index range for each query) Input Input is given from Standard Input in the following format: N Q A_1 A_2 ... A_N L_1 R_1 ... L_Q R_Q Output Output Q lines. Each line contains the answer to the i-th query. Example Input 5 3 1 2 3 4 5 1 3 2 5 1 5 Output 6 14 15","solution":"def process_queries(N, Q, array, queries): Processes the queries to determine the sum of the elements in specified subarrays. Parameters: N (int): Number of elements in the array Q (int): Number of queries array (list of int): List containing the elements of the array queries (list of tuple): List containing the queries as (L, R) tuples Returns: list of int: List containing the results of the queries # Step 1: Compute prefix sums prefix_sums = [0] * (N + 1) for i in range(1, N + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] # Step 2: Process each query results = [] for L, R in queries: sum_subarray = prefix_sums[R] - prefix_sums[L - 1] results.append(sum_subarray) return results"},{"question":"You are given a list of tasks, where each task is represented by a pair of integers `(start_time, end_time)`. The `start_time` and `end_time` represent the time at which a task starts and ends, respectively. Write a function to find the maximum number of tasks that you can attend, assuming you cannot attend overlapping tasks. Print the maximum number of tasks you can attend. Example 1: Input: tasks = [(1, 3), (2, 5), (4, 6)] Output: 2 Example 2: Input: tasks = [(1, 2), (3, 4), (0, 1)] Output: 3 Your Task: Complete the function `maxTasks()` to find and return the maximum number of non-overlapping tasks. You should first sort tasks by their `end_time` and then use a greedy approach to select the maximum number of tasks. Constraints: 1 ≤ len(tasks) ≤ 100 1 ≤ start_time, end_time ≤ 1000","solution":"def maxTasks(tasks): Returns the maximum number of non-overlapping tasks. Args: tasks (list of tuples): Each tuple contains (start_time, end_time). Returns: int: Maximum number of non-overlapping tasks. # Sort tasks based on their end_time tasks.sort(key=lambda x: x[1]) # Initialize the count and the end_time of the last selected task count = 0 last_end_time = 0 # Iterate through the tasks for task in tasks: if task[0] >= last_end_time: count += 1 last_end_time = task[1] return count"},{"question":"You are a software engineer tasked with improving the efficiency of resource allocation in a microservices architecture. Each microservice can call other microservices to complete tasks, and some tasks have a higher priority due to their critical nature. Your manager wants you to ensure that critical tasks complete as soon as possible, considering the dependencies between microservices. The overall time to complete a task starting from service x and going through its dependencies up to service y is equal to the sum of the times taken for each microservice on the path from x to y. Your goal is to compute the minimum time required to complete a task from the starting microservice to each of the critical microservices. -----Input----- On the first line, you are given two integers, the number 1 leq n leq 10^4 of microservices and the number 1 leq m leq 10^5 of dependency call times. Each of the following m lines contains three integers a, b, and t, where service a calls service b with a call time of t units. On the next line, you have an integer s which is the starting microservice, followed by an integer k which is the number of critical microservices, and then k integers indicating the critical microservices. -----Output----- For each critical microservice, print the minimum time required to complete a task from the starting microservice. Print the results in the same order as the critical microservices input. If a critical microservice is not reachable from the starting microservice, print `-1` for that microservice. -----Examples----- Sample Input: 5 6 0 1 5 1 2 10 0 3 2 3 4 3 4 2 7 1 4 2 0 2 2 4 Sample Output: 12 5","solution":"import heapq from collections import defaultdict, deque import sys def find_shortest_path(n, m, edges, s, k, critical_services): graph = defaultdict(list) for a, b, t in edges: graph[a].append((b, t)) def dijkstra(start, n): distances = {i: float(\'inf\') for i in range(n)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances shortest_paths_from_s = dijkstra(s, n) result = [] for critical_service in critical_services: result.append(shortest_paths_from_s[critical_service] if shortest_paths_from_s[critical_service] != float(\'inf\') else -1) return result"},{"question":"You are given a sequence of integers. Your task is to determine the length of the longest subsequence where the difference between consecutive elements is consistent (constant difference). -----Input----- Each test contains multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (2 le n le 10^5). The second line of each test case contains n integers a_1, a_2,dots,a_n (1leq a_ileq10^9) — elements of the sequence. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, print a single integer — the length of the longest subsequence where the difference between consecutive elements is constant. -----Examples----- Input 2 5 1 3 5 7 9 6 10 7 4 3 0 -3 Output 5 3 -----Note----- In the first test case, the whole sequence itself is a subsequence with constant difference as the difference between each consecutive element is 2 (i.e., 3-1 = 2, 5-3 = 2, 7-5 = 2, 9-7 = 2). Hence, the length of the longest subsequence is 5. In the second test case, one of the longest subsequences with a constant difference -3 is [10, 7, 4], and hence the length of the longest such subsequence is 3.","solution":"def longest_subsequence_length(n, sequence): if n == 2: return n max_length = 1 current_length = 1 current_diff = sequence[1] - sequence[0] for i in range(1, n - 1): diff = sequence[i + 1] - sequence[i] if diff == current_diff: current_length += 1 else: current_diff = diff current_length = 1 max_length = max(max_length, current_length + 1) return max_length def process_test_cases(test_cases): results = [] for n, sequence in test_cases: results.append(longest_subsequence_length(n, sequence)) return results def main(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 sequence = list(map(int, data[index:index + n])) index += n test_cases.append((n, sequence)) results = process_test_cases(test_cases) for result in results: print(result) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array of integers representing the temperatures recorded over a week. A peak in the array is defined as an element which is greater than its neighbours. Your task is to find the first peak in the array. If no peak exists, return -1. For example, in the array `[1, 3, 2, 4, 5, 3, 7, 2]`, the first peak is `3` since `3 > 1` and `3 > 2`. Input: - A single list of integers, representing the temperatures recorded over a week. The length of the list will be between 2 and 10^5 and each element will be between -10^9 and 10^9. Output: - An integer representing the first peak in the array, or -1 if no peak is found. Example: SAMPLE INPUT: [1, 3, 2, 4, 5, 3, 7, 2] SAMPLE OUTPUT: 3 Note: A peak is defined as an element greater than its immediate neighbors. For the first and last elements of the array, they only need to be greater than their one neighbor.","solution":"def find_first_peak(temperatures): Finds the first peak in an array of temperatures. A peak is defined as an element greater than its immediate neighbours. :param temperatures: List of integers representing the temperatures recorded over a week. :return: The first peak if it exists, otherwise -1. n = len(temperatures) for i in range(n): if (i == 0 and temperatures[i] > temperatures[i+1]) or (i == n-1 and temperatures[i] > temperatures[i-1]) or (0 < i < n-1 and temperatures[i] > temperatures[i-1] and temperatures[i] > temperatures[i+1]): return temperatures[i] return -1"},{"question":"Given an undirected graph with N nodes (numbered from 1 to N) and M edges, your task is to check whether the graph is bipartite or not. A graph is bipartite if the nodes can be divided into two sets such that there are no edges between nodes of the same set. Input: - N: an integer representing the number of nodes in the graph. - M: an integer representing the number of edges in the graph. - edges: a list of M pairs of integers where each pair (u, v) represents an edge between node u and node v. Output: Return 1 if the graph is bipartite, otherwise return 0. Example 1: Input: N = 4 M = 4 edges = [(1, 2), (2, 3), (3, 4), (4, 1)] Output: 1 Explanation: The graph is bipartite as it can be divided into two sets {1, 3} and {2, 4}. Example 2: Input: N = 3 M = 3 edges = [(1, 2), (2, 3), (3, 1)] Output: 0 Explanation: The graph is not bipartite because it contains an odd-length cycle (1-2-3-1). Your task: You don\'t need to read input or print anything. Your task is to complete the function isBipartite() which takes the number of nodes N, the number of edges M, and the list of edges as input parameters and returns 1 if the graph is bipartite, otherwise 0. Expected Time Complexity: O(N + M) Expected Space Complexity: O(N + M) Constraints: 1 ≤ N, M ≤ 10000 1 ≤ u, v ≤ N","solution":"from collections import deque def isBipartite(N, M, edges): Determines if an undirected graph is bipartite. Args: N: int - The number of nodes. M: int - The number of edges. edges: List of tuples - Each tuple contains two integers representing an edge between two nodes. Returns: int: 1 if the graph is bipartite, otherwise 0. # Create an adjacency list graph = [[] for _ in range(N + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) # Array to store the color of each node, 0 means uncolored, 1 and -1 mean different colors color = [0] * (N + 1) def bfs(start): queue = deque([start]) color[start] = 1 # Start coloring with 1 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == 0: # Assign an opposite color to the neighboring node color[neighbor] = -color[node] queue.append(neighbor) elif color[neighbor] == color[node]: # If the neighboring node has the same color, graph is not bipartite return False return True # Check each component of the graph for i in range(1, N + 1): if color[i] == 0: # Node not yet colored if not bfs(i): return 0 return 1"},{"question":"Alice has recently found interest in understanding and deciphering sequences. One particular type of sequence that caught her attention is composed entirely of prime numbers. She has a challenge where she needs to identify the N-th prime number in such a sequence. However, this task is proving to be more difficult for her as N increases. Alice has approached you for help. Your goal is to write a program that takes a number N as input and efficiently determines the N-th prime number. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer N, representing the position in the sequence of prime numbers Alice is interested in. Output Format For each test case, output the N-th prime number on a new line. Constraints 1 ≤ T ≤ 20 1 ≤ N ≤ 10000 Sample Input 3 1 5 10 Sample Output 2 11 29 Explanation In the first test case, the 1st prime number is 2. In the second test case, the 5th prime number is 11. In the third test case, the 10th prime number is 29.","solution":"def nth_prime(n): Finds the N-th prime number efficiently. # Use Sieve of Eratosthenes to find prime numbers # Estimate the upper limit using the prime number theorem if n < 1: raise ValueError(\\"N must be a positive integer\\") import math upper_limit = int(n * (math.log(n) + math.log(math.log(n)))) if n > 5 else 15 sieve = [True] * (upper_limit + 1) sieve[0] = sieve[1] = False primes = [] for num in range(2, upper_limit + 1): if sieve[num]: primes.append(num) for multiple in range(num * num, upper_limit + 1, num): sieve[multiple] = False if len(primes) >= n: break return primes[n - 1] def find_primes(T, positions): Given T test cases and a list of positions, find the corresponding N-th prime for each position. results = [] for pos in positions: results.append(nth_prime(pos)) return results"},{"question":"You are given an array of n integers. In one move, you can choose any two indices i and j (1 leq i, j leq n) and swap the values at those indices. Your goal is to sort the array in ascending order in the minimum number of moves. Note: You are allowed to swap the values at the same index, which effectively leaves the array unchanged in one move. Write a function that returns the minimum number of swaps required to sort the array. -----Input----- The first line of the input contains an integer t (1 le t leq 100) — the number of test cases. The description of each test case follows. The first line of each test case contains an integer n (1 le n le 10^5) — the number of elements in the array. The second line contains n distinct integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the array. -----Output----- For each test case, print a single integer — the minimum number of swaps required to sort the array in ascending order. -----Examples----- Input 3 5 4 3 1 2 5 4 1 3 5 2 1 100 Output 3 2 0 -----Note----- For the first test case, the array can be sorted in three moves as follows: 1. Swap elements at indices 1 and 3: [1, 3, 4, 2, 5] 2. Swap elements at indices 2 and 4: [1, 2, 4, 3, 5] 3. Swap elements at indices 3 and 4: [1, 2, 3, 4, 5] For the second test case, the array can be sorted in two moves as follows: 1. Swap elements at indices 2 and 4: [1, 2, 5, 3] 2. Swap elements at indices 3 and 4: [1, 2, 3, 5] For the third test case, the array is already sorted, so no swaps are needed.","solution":"def min_swaps_to_sort(arr): Given an array arr, returns the minimum number of swaps to sort the array. n = len(arr) arr_pos = [(arr[i], i) for i in range(n)] arr_pos.sort() visited = [False] * n swaps = 0 for i in range(n): if visited[i] or arr_pos[i][1] == i: continue cycle_size = 0 j = i while not visited[j]: visited[j] = True j = arr_pos[j][1] cycle_size += 1 if cycle_size > 0: swaps += (cycle_size - 1) return swaps def min_swaps_to_sort_multiple_test_cases(test_cases): Given test_cases, where each test case is a dictionary with key \'n\' and \'arr\', returns a list of results for all test cases. results = [] for test in test_cases: n = test[\'n\'] arr = test[\'arr\'] results.append(min_swaps_to_sort(arr)) return results"},{"question":"Festival Zone Management Problem Statement You are organizing a festival in a city with n zones. Some zones are connected by roads, and each road allows travel between two zones in both directions. You want to ensure efficient management by grouping the zones into clusters, where each cluster contains zones that are reachable from each other without needing to pass through another cluster. More formally, a cluster is defined as a set of zones such that any zone in the cluster can reach any other zone in the same cluster via one or more direct roads or by passing through zones within the cluster. Your goal is to determine the number of such clusters. Constraints * 1 ≤ n ≤ 10^5 * 0 ≤ m ≤ 2 * 10^5 * All given numbers are integers. * 1 ≤ u_i, v_i ≤ n * The graph does not contain self-loops. Input The input consists of: * An integer n, the number of zones. * An integer m, the number of roads. * m pairs of integers u and v, indicating that there is a road connecting zone u and zone v. Output Output an integer which is the number of clusters in the given city. Example Input 6 5 1 2 2 3 4 5 4 6 5 6 Output 2 Explanation In the example, there are two clusters: {1, 2, 3} and {4, 5, 6}. The zones within each cluster are reachable from each other, but zones from different clusters are not connected. Hence, the output is 2.","solution":"def find_clusters(n, m, roads): from collections import defaultdict, deque def bfs(start, visited, adjacency_list): queue = deque([start]) visited.add(start) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) adjacency_list = defaultdict(list) for u, v in roads: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = set() clusters = 0 for zone in range(1, n + 1): if zone not in visited: bfs(zone, visited, adjacency_list) clusters += 1 return clusters"},{"question":"A software company is conducting a code review contest where participants can submit their code solutions. The judges have a unique way of promoting fairness by scoring the solutions based on several technical criteria. Each solution is given a score between 0 and 100, and the final score for a participant\'s solution set is the average of their three highest scores. You are tasked with writing a program to compute the final score for each participant based on their given scores. If a participant has less than three scores, the final score is computed as the average of all their scores. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of scores for that participant. - The second line of each test case contains N space-separated integers indicating the scores. -----Output----- For each test case, print a single line containing one real number — the final calculated score for the participant. Your answer will be considered correct if it has an absolute error less than 10^-2. -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 0 ≤ score ≤ 100 for each score -----Subtasks----- Subtask #1 (30 points): 1 ≤ N ≤ 100 Subtask #2 (70 points): original constraints -----Example----- Input: 2 5 50 95 85 75 90 2 45 70 Output: 90.000000 57.500000 -----Explanation----- Example case 1: The participant has scores [50, 95, 85, 75, 90]. The three highest scores are [95, 90, 85], and their average is (95 + 90 + 85) / 3 = 90. Example case 2: The participant has only two scores [45, 70]. The final score is the average of both, which is (45 + 70) / 2 = 57.5.","solution":"def calculate_final_scores(test_cases): results = [] for scores in test_cases: if len(scores) < 3: final_score = sum(scores) / len(scores) else: top_three = sorted(scores, reverse=True)[:3] final_score = sum(top_three) / 3 results.append(f\\"{final_score:.6f}\\") return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0].strip()) test_cases = [] line_idx = 1 for _ in range(T): N = int(lines[line_idx].strip()) scores = list(map(int, lines[line_idx + 1].strip().split())) test_cases.append(scores) line_idx += 2 return test_cases"},{"question":"A large e-commerce company is organizing a marketing campaign and planning to send personalized discount codes to their users based on their browsing history and previous purchases. The goal is to send each user a discount that maximizes the total revenue for the company. However, some users are more likely to make a purchase when they receive a higher discount, while others might proceed with a purchase with a minimally enticing discount. You are given a list of users and their respective probabilities of making a purchase when given a specific discount. The discount table is provided for each user. Your task is to determine the best discount value to send each user to maximize the expected revenue for the company. Input: - The first line contains an integer `n` (1 ≤ n ≤ 1000), the number of users. - For each user, the input consists of two lines: - The first line contains an integer `m` (1 ≤ m ≤ 100), the number of possible discount offers for this user. - The second line contains `m` space-separated pairs of integers `d` and `p` (1 ≤ d ≤ 100, 0 ≤ p ≤ 100), where `d` represents the discount amount in dollars and `p` represents the probability (in percentage) that the user will make a purchase when given that discount. Output: For each user, output the discount value that maximizes the expected revenue, which is calculated as the discount value multiplied by the probability of purchase. If there are multiple such discounts, choose the smallest one. Example: Input: 3 3 10 50 20 70 30 90 2 5 30 15 80 4 7 60 40 50 50 20 60 90 Output: 30 15 60 Explanation: 1. For the first user, the discount options are (10, 50%), (20, 70%), and (30, 90%). The expected revenues are: - 10 * 0.50 = 5 - 20 * 0.70 = 14 - 30 * 0.90 = 27 The maximum revenue comes from the discount of 30. 2. For the second user, the discount options are (5, 30%) and (15, 80%). The expected revenues are: - 5 * 0.30 = 1.5 - 15 * 0.80 = 12 The maximum revenue comes from the discount of 15. 3. For the third user, the discount options are (7, 60%), (40, 50%), (50, 20%), and (60, 90%). The expected revenues are: - 7 * 0.60 = 4.2 - 40 * 0.50 = 20 - 50 * 0.20 = 10 - 60 * 0.90 = 54 The maximum revenue comes from the discount of 60.","solution":"def find_best_discounts(n, user_discounts): Given the number of users and their respective discount offers, return a list of optimal discounts for each user to maximize expected revenue. :param n: int, number of users :param user_discounts: list of lists, each containing tuples of (discount, probability) for the discounts available to a user :return: list of ints, optimal discount values for each user best_discounts = [] for discounts in user_discounts: max_revenue = -1 best_discount = None for d, p in discounts: expected_revenue = d * (p / 100.0) if expected_revenue > max_revenue: max_revenue = expected_revenue best_discount = d elif expected_revenue == max_revenue and d < best_discount: best_discount = d best_discounts.append(best_discount) return best_discounts"},{"question":"Dwarf King is hosting a competition where participants must cross a river using stepping stones. The goal is to help determine the minimum number of jumps a participant needs to make to cross the river given certain constraints. The river is represented by a string `S` of length `n`, where `S[i]` is either a \'0\' (indicating a stone) or a \'1\' (indicating water). Participants can only jump on stones (positions with \'0\'), and they cannot land on water (positions with \'1\'). They start at the left bank of the river (position `0`) and need to reach the right bank of the river (position `n-1`). A participant can jump from position `i` to position `j` if and only if `j` is a stone and `j` is within `d` positions to the right of `i` (i.e., `i < j <= i + d`). Help Dwarf King determine the minimum number of jumps required for a participant to cross the river. If it is not possible to cross the river, return `-1`. Input The first line contains two integers `n` and `d` (2 ≤ n ≤ 100, 1 ≤ d ≤ n-1) — the length of the string `S` and the maximum jump distance. The second line contains a string `S` of length `n` consisting of \'0\'s and \'1\'s. Output Print a single integer — the minimum number of jumps required to cross the river, or `-1` if it\'s impossible to do so. Examples Input 5 3 00100 Output 2 Input 7 2 0000100 Output 4 Input 6 3 100001 Output -1 Note In the first example, a possible sequence of jumps is: - Jump from position `0` to position `2` (first jump) - Jump from position `2` to position `4` (second jump) In the second example, a possible sequence of jumps is: - Jump from position `0` to position `2` (first jump) - Jump from position `2` to position `4` (second jump) - Jump from position `4` to position `5` (third jump) - Jump from position `5` to position `6` (fourth jump) In the third example, it is not possible to cross the river because position `0` is water.","solution":"def min_jumps_to_cross(n, d, S): Returns the minimum number of jumps required to cross the river represented by string S. If it is not possible to cross the river, return -1. def bfs(start, end): queue = [(start, 0)] visited = set() while queue: current_position, jumps = queue.pop(0) if current_position == end: return jumps for next_position in range(current_position + 1, min(current_position + d + 1, n)): if next_position not in visited and S[next_position] == \'0\': queue.append((next_position, jumps + 1)) visited.add(next_position) return -1 # Start from 0 position (left bank) # End at n-1 position (right bank) if S[0] == \'1\' or S[n-1] == \'1\': return -1 return bfs(0, n - 1)"},{"question":"In a small country, there is a tradition to light up many candles on festive days. A candle burns for exactly one hour, and each person in the country has `k` identical candles. People in that country are eager to celebrate, so every day at 7 PM they light up all of their candles at once. However, there is a twist: before lighting up the candles, they divide them into groups of varying sizes, each person choosing how many candles will be in each group. After the candles have completely burned out, they collect any leftover wax and make new candles out of it. Specifically, for every `a` units of wax they can mold exactly 1 new candle. Given the initial number of candles each person has and the value of `a`, determine how many whole candles each person can have at the end of this repeated process. A candle burns for exactly one hour and for each candle, it generates 1 unit of wax after burning out. This process continues until each person can no longer form a new whole candle from the leftover wax. -----Input----- The input consists of two integers `k` and `a` where: - `k` (1 ≤ k ≤ 10^9) is the initial number of candles each person has. - `a` (2 ≤ a ≤ 10^9) is the amount of wax needed to form a new candle. -----Output----- Output a single integer, the number of whole candles each person will have at the end of the repeated reclamation process. -----Examples----- Input 9 3 Output 13 Input 10 5 Output 12 -----Note----- In the first example: The process is as follows: 1. Start with 9 candles, after burning them, collect 9 units of wax. 2. From the 9 units of wax, make 3 new candles (since 9 // 3 = 3). 3. Burn the 3 new candles, generating 3 more units of wax. 4. Use these 3 units of wax to make 1 more candle (since 3 // 3 = 1). 5. Burn this candle to get 1 unit of wax, which is not enough (since 1 < 3) to form a new candle. So in total, they will have 9 + 3 + 1 = 13 candles by the end. In the second example: The process is as follows: 1. Start with 10 candles, burn and collect 10 units of wax. 2. From the wax, make 2 new candles (since 10 // 5 = 2). 3. Burn the 2 new candles and collect 2 more units of wax, which is not enough (since 2 < 5) to form a new candle. So in total, they will have 10 + 2 = 12 candles by the end.","solution":"def total_candles(k, a): Returns the total number of whole candles each person will have after burning and remolding, given the initial number of candles k and the amount of wax required to form a new candle a. total = k leftover_wax = k while leftover_wax >= a: new_candles = leftover_wax // a total += new_candles leftover_wax = leftover_wax % a + new_candles return total"},{"question":"You are tasked with helping Emma manage a series of company events. Each event has a specific start time and end time, and Emma is responsible for ensuring that no two events overlap. Given the event schedule, Emma needs to figure out the maximum number of non-overlapping events she can attend. Each event is represented by a start time and an end time. You need to help Emma find out how many events she can schedule without any time conflicts. -----Input----- The first line contains an integer n (1 le n le 1000) — the number of events. The next n lines each contain two integers s_i and e_i (0 le s_i < e_i le 10000) — the start time and end time of the i-th event. -----Output----- Print one integer — the maximum number of non-overlapping events Emma can attend. -----Examples----- Input 4 1 4 2 3 3 5 6 8 Output 3 Input 3 1 2 2 3 3 4 Output 3 -----Note----- In the first example, Emma can attend the following events: (2, 3), (3, 5), and (6, 8). In the second example, there is no conflict between any events, so Emma can attend all 3 events.","solution":"def max_non_overlapping_events(n, events): Returns the maximum number of non-overlapping events. Parameters: n (int): number of events events (list of tuples): each tuple contains two integers representing start and end time of an event Returns: int: maximum number of non-overlapping events # sorting events based on end time events.sort(key=lambda x: x[1]) # initialising the end time of the last attended event last_end_time = 0 # maximum number of non-overlapping events max_events = 0 # traversing through each event for start, end in events: if start >= last_end_time: # attending this event max_events += 1 last_end_time = end return max_events # Example usage: # n = 4 # events = [(1, 4), (2, 3), (3, 5), (6, 8)] # print(max_non_overlapping_events(n, events)) # Should print 3"},{"question":"Consider a game where you have an m times n grid. Each cell in this grid can be empty, contain a player (denoted by \'P\'), or contain an obstacle (denoted by \'X\'). The player can move to an adjacent cell (left, right, up, down) if and only if the cell is empty. From an initial grid configuration, determine if there exists a sequence of moves such that every player can reach a designated target position, marked with a \'T\'. A player can walk over the \'T\' without any restrictions. -----Input----- Each input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line contains two integers m and n (1 le m, n le 1000). The next m lines each contain a string of length n consisting of characters \'P\', \'T\', \'X\', and \'.\'. Each grid will contain exactly one \'T\'. -----Output----- Output a single line with the word `YES` if it is possible for all players to reach the target position, otherwise output `NO`. -----Examples----- Sample Input 1: 4 5 P.... ..X.. ..XT. P.... Sample Output 1: YES Sample Input 2: 3 5 P..X. XXXXX P..XT Sample Output 2: NO","solution":"from collections import deque def can_all_players_reach_target(m, n, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] target_pos = None player_positions = [] # Identify positions of players and the target for i in range(m): for j in range(n): if grid[i][j] == \'P\': player_positions.append((i, j)) elif grid[i][j] == \'T\': target_pos = (i, j) def bfs(start): queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == target_pos: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and (grid[nx][ny] == \'.\' or grid[nx][ny] == \'T\'): visited.add((nx, ny)) queue.append((nx, ny)) return False for player_pos in player_positions: if not bfs(player_pos): return \\"NO\\" return \\"YES\\""},{"question":"You are given a list of student records, where each record contains the student\'s name and their grades in multiple subjects. Your task is to compute the average grade for each student and return a new list of student records that includes the student\'s name and their average grade. Each student record is a dictionary with the following structure: ``` { \'name\': \'Student Name\', \'grades\': { \'Math\': grade, \'Science\': grade, \'English\': grade, ... } } ``` The output should be a list of dictionaries, each containing the student\'s name and their average grade, rounded to two decimal places. The output list should be sorted in descending order by the average grade. In case of a tie, the students should be sorted alphabetically by their names. For example, if the input list is: ``` [ {\'name\': \'Alice\', \'grades\': {\'Math\': 90, \'Science\': 80, \'English\': 70}}, {\'name\': \'Bob\', \'grades\': {\'Math\': 100, \'Science\': 90, \'English\': 80}}, {\'name\': \'Charlie\', \'grades\': {\'Math\': 70, \'Science\': 60, \'English\': 50}} ] ``` The output should be: ``` [ {\'name\': \'Bob\', \'average\': 90.00}, {\'name\': \'Alice\', \'average\': 80.00}, {\'name\': \'Charlie\', \'average\': 60.00} ] ``` Write a function `calculate_average_grades(students: list) -> list` to solve this problem.","solution":"def calculate_average_grades(students): Calculates the average grade for each student and returns a list of dictionaries with student names and their average grade, sorted by average grade in descending order and by name alphabetically in case of a tie. Parameters: students (list): List of student records, each a dictionary with \'name\' and \'grades\'. Returns: list: List of dictionaries containing \'name\' and \'average\' keys. # Compute the average grade for each student results = [] for student in students: name = student[\'name\'] grades = student[\'grades\'].values() average_grade = round(sum(grades) / len(grades), 2) results.append({\'name\': name, \'average\': average_grade}) # Sort the results first by average grade (descending), then by name (alphabetical order) results.sort(key=lambda x: (-x[\'average\'], x[\'name\'])) return results"},{"question":"A magical kingdom has a castle guarded by walls forming a grid of cells with n rows and m columns. The castle is situated in one of these cells, and the princess wants to make her escape to the outer boundary of the grid. However, her path is blocked by some guards placed in certain cells with specific security numbers. The princess can only move horizontally or vertically to adjacent cells, and she can cross a cell containing a guard only if her own security number is greater than the security number of the guard in that cell. Given the grid of the castle with the princess\'s starting position, and the positions and security numbers of the guards, determine if the princess can escape to any cell on the boundary. -----Input----- The first line contains two integers n and m (2 leq n, m leq 1000) representing the number of rows and columns of the grid. The second line contains three integers p_x, p_y, and p_s (1 leq p_x leq n, 1 leq p_y leq m, 1 leq p_s leq 10^9), where (p_x, p_y) are the coordinates of the princess\'s starting position, and p_s is her security number. The third line contains an integer g (0 leq g leq n cdot m - 1), the number of guards in the grid. Each of the next g lines contains three integers g_x, g_y, and g_s (1 leq g_x leq n, 1 leq g_y leq m, 1 leq g_s leq 10^9), where (g_x, g_y) are the coordinates of a guard, and g_s is the security number of that guard. It is guaranteed that (p_x, p_y) is different from all (g_x, g_y). -----Output----- Output a single line with \\"YES\\" if the princess can escape to any boundary cell; otherwise, print \\"NO\\". -----Example----- Input 5 5 3 3 7 5 2 2 5 2 3 6 3 2 8 4 4 5 5 5 10 Output YES -----Note----- In the above example, the princess starts at cell (3, 3) with a security number of 7. She can move to cell (2, 3) with a guard having a security number 6, then to (2, 4) to (1, 4) and finally reach the upper boundary. Thus, escape is possible.","solution":"def can_princess_escape(n, m, px, py, ps, guards): from collections import deque # Mark all the guards in the grid with their security numbers grid = [[None] * m for _ in range(n)] for gx, gy, gs in guards: grid[gx - 1][gy - 1] = gs # Directions for moving up, down, left, and right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Breadth-First Search (BFS) to explore the grid queue = deque([(px - 1, py - 1)]) visited = set([(px - 1, py - 1)]) while queue: x, y = queue.popleft() # Check if current position is at the boundary if x == 0 or y == 0 or x == n - 1 or y == m - 1: return \\"YES\\" # Explore neighbor cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited: guard_security = grid[nx][ny] # The princess can move to this cell if either it\'s empty # or her security number is higher than the guard\'s security number in that cell if guard_security is None or guard_security < ps: visited.add((nx, ny)) queue.append((nx, ny)) return \\"NO\\""},{"question":"One day, in the land of Paradisia, the magical plants invest heavily in learning prolonged growth patterns. Each plant in the kingdom can predict its own growth in height over a span of days. However, these plants often find it difficult to compare how tall they will be relative to others at the end of a given set of days. You have been given the task to help these magical plants understand their heights relative to each other after a certain number of days. Assume there\'s a sequence of magical plants, each with its unique predicted daily growth rate. For a given number of days, you need to calculate the final height of each plant and then determine its rank among all other plants in terms of its height. Input: - The first line contains two integers N (the number of plants) and D (the number of days we need to consider for their growth). - The next N lines describe the daily growth rate of these N plants. Each line contains a single positive integer indicating the growth rate of the i^{th} plant per day. Output: - Your output should consist of N lines. Line i should be the rank of the i^{th} plant based on its final height after D days, where the highest plant has a rank of 1, the second highest has a rank of 2, and so on. Constraints: - 1 leq N leq 50000 - 1 leq D leq 1000 - The growth rate of each plant is a unique positive integer. Example Input: 6 3 10 15 20 25 30 5 Example Output: 6 5 4 3 2 1 Explanation: - After 3 days, the heights of the plants would be: - Plant 1: 10 * 3 = 30 - Plant 2: 15 * 3 = 45 - Plant 3: 20 * 3 = 60 - Plant 4: 25 * 3 = 75 - Plant 5: 30 * 3 = 90 - Plant 6: 5 * 3 = 15 - Ranking these heights we get: - 1st: Height 90 (Rank 1) - 2nd: Height 75 (Rank 2) - 3rd: Height 60 (Rank 3) - 4th: Height 45 (Rank 4) - 5th: Height 30 (Rank 5) - 6th: Height 15 (Rank 6)","solution":"def calculate_plant_ranks(N, D, growth_rates): # Calculate the final heights of the plants final_heights = [(rate * D, i) for i, rate in enumerate(growth_rates)] # Sort the heights in descending order while maintaining their original indices final_heights.sort(reverse=True, key=lambda x: x[0]) # Create a rank map where the index is the original plant index and the value is the rank rank_map = [0] * N for rank, (height, original_index) in enumerate(final_heights, 1): rank_map[original_index] = rank return rank_map"},{"question":"In a small university town, there is one main road that has N traffic lights. Each traffic light can either show GREEN or RED at any given time. If a traffic light displays GREEN, vehicles can pass through. If it displays RED, vehicles must stop. A researcher wants to study the sequence of GREEN and RED lights to determine how many consecutive sequences of GREEN lights exist in the current traffic pattern. Write a program that takes a sequence of N traffic lights and computes how many consecutive sequences of GREEN traffic lights exist in that sequence. -----Constraints----- - 1 leq N leq 100 - The sequence consists of only characters \\"G\\" (for GREEN) and \\"R\\" (for RED). -----Input----- Input is given from Standard Input in the following format: N sequence -----Output----- Print the number of consecutive sequences of GREEN traffic lights. -----Sample Input----- 8 RGGGRRGG -----Sample Output----- 2 The sequences of GREEN lights are: \\"GGG\\" and \\"GG\\".","solution":"def count_green_sequences(n, sequence): Returns the number of consecutive sequences of GREEN traffic lights. Args: n (int): Number of traffic lights. sequence (str): The sequence of traffic lights. Returns: int: Number of consecutive sequences of GREEN lights. if n == 0: return 0 count = 0 in_green_sequence = False for light in sequence: if light == \'G\': if not in_green_sequence: count += 1 in_green_sequence = True else: in_green_sequence = False return count"},{"question":"Alice is interested in sequences and their properties. She is particularly fond of finding patterns and making transformations on sequences. She recently learned about arithmetic sequences and has been working on a new challenge involving these sequences. An arithmetic sequence is a sequence of numbers in which the difference of any two successive members is a constant. The difference between consecutive terms is called the common difference. Alice\'s challenge is as follows: Given an arithmetic sequence with the first term A and the common difference D, Alice needs to perform Q queries of the form T L R. Here T is the type of query, and L and R are the positions in the sequence (1-indexed). - If T=1, Alice must return the sum of the elements from position L to R (inclusive). - If T=2, Alice must return the product of the elements from position L to R (inclusive). **Note**: To avoid overflow, take the product modulo 1000000007. ------- Input ------- There will be three numbers in the first line: A, D, and Q. Q lines follow with three numbers each: T, L, and R. ------- Output ------- For each of the Q lines, you must output the result for the corresponding query in a separate line. ------- Constraints ------- 1 ≤ A, D ≤ 10^9 1 ≤ Q ≤ 5 * 10^5 1 ≤ T ≤ 2 1 ≤ L ≤ R ≤ 10^5 -------- Sample Input 1 -------- 2 3 5 1 1 3 1 2 4 2 1 2 2 3 5 2 1 1 -------- Sample Output 1 -------- 12 21 10 1680 2 -------- Explanation 1 -------- The arithmetic sequence based on the given inputs A=2 and D=3 will be: 2, 5, 8, 11, 14, ... - For the first query (T=1, L=1, R=3), the sum is 2+5+8 = 15. - For the second query (T=1, L=2, R=4), the sum is 5+8+11 = 24. - For the third query (T=2, L=1, R=2), the product is (2*5) % 1000000007 = 10. - For the fourth query (T=2, L=3, R=5), the product is (8*11*14) % 1000000007 = 1232 % 1000000007 = 1232. - For the fifth query (T=2, L=1, R=1), the product is 2.","solution":"MOD = 1000000007 def solve(A, D, Q, queries): results = [] for query in queries: T, L, R = query if T == 1: # Sum of arithmetic sequence from L to R sum_value = 0 for i in range(L, R+1): sum_value += A + (i - 1) * D results.append(sum_value) elif T == 2: # Product of arithmetic sequence from L to R product_value = 1 for i in range(L, R+1): product_value = (product_value * (A + (i - 1) * D)) % MOD results.append(product_value) return results"},{"question":"A group of friends are planning a trip and want to split the travel expenses. Each friend contributes a certain amount of money for the trip, but they want to evenly distribute the total cost among themselves in the end. Any excess money should be reimbursed to those who overpaid. Help the friends by writing a program to calculate how much each person should pay or be reimbursed. # Input: - The first line contains an integer `n` (2 ≤ n ≤ 1000) — the number of friends. - The second line contains `n` integers `a_i` (0 ≤ a_i ≤ 10000) — the amount in dollars each friend has paid, where `a_i` is the amount paid by the i-th friend. # Output: - Print `n` integers, where each integer indicates the amount each friend should either pay (positive value) or be reimbursed (negative value) to balance the total payment. # Examples: Example 1: **Input:** ``` 3 100 200 300 ``` **Output:** ``` -100 0 100 ``` Example 2: **Input:** ``` 4 150 100 100 250 ``` **Output:** ``` -50 -100 -100 250 ``` # Explanation: In the first example: - The total amount paid by all friends is 600 dollars. - Each friend should ideally pay 600 / 3 = 200 dollars. - The first friend paid 100, hence should be reimbursed 100. - The second friend paid 200, which is exactly their share, hence no changes are needed. - The third friend paid 300, hence should pay 100 more to balance the total amount. In the second example: - The total amount paid by all friends is 600 dollars. - Each friend should ideally pay 600 / 4 = 150 dollars. - The first friend paid 150, which is exactly their share, hence no changes are needed. - The second and third friend each paid 100, hence each need to pay 50 more. - The fourth friend paid 250, hence should pay 100 more to balance the total amount.","solution":"def calculate_balances(n, contributions): Calculate how much each friend should pay or be reimbursed. total_amount = sum(contributions) fair_share = total_amount // n balances = [contribution - fair_share for contribution in contributions] return balances"},{"question":"You are given an integer array nums and another integer target. You need to determine if there are two distinct indices i and j in the array where nums[i] + nums[j] equals the target. Return True if such indices exist, otherwise, return False. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: true Explanation: nums[0] + nums[1] = 2 + 7 = 9 Example 2: Input: nums = [3, 2, 4], target = 6 Output: true Explanation: nums[1] + nums[2] = 2 + 4 = 6 Example 3: Input: nums = [3, 3], target = 6 Output: true Explanation: nums[0] + nums[1] = 3 + 3 = 6 Example 4: Input: nums = [1, 2, 3, 4], target = 8 Output: false Explanation: There are no two distinct indices i and j that sum to 8. Example 5: Input: nums = [2, 5, 5, 11], target = 10 Output: true Explanation: nums[1] + nums[2] = 5 + 5 = 10 Constraints: 1 <= nums.length <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def has_pair_with_sum(nums, target): Determines if there are two distinct indices i and j in the array where nums[i] + nums[j] equals the target. seen = {} for idx, num in enumerate(nums): complement = target - num if complement in seen: return True seen[num] = idx return False"},{"question":"You have to write a Python function that takes a string and returns the string with all characters replaced by the next character in the alphabet. If the character is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\', respectively. Non-alphabet characters should remain unchanged. Concept To accomplish this, you can utilize Python’s built-in functions `ord()` and `chr()`. The `ord()` function returns an integer representing the Unicode code of a given character. For example: ```python ord(\'a\') # 97 ord(\'b\') # 98 ``` The `chr()` function returns the character that represents the given Unicode code. For example: ```python chr(97) # \'a\' chr(98) # \'b\' ``` Input Format One line of input: a string S containing alphabetic characters and possibly other characters such as spaces or punctuation. Output Format A single line of output: the modified string with each letter replaced by the next one in the alphabet while preserving the case, and wrapping \'z\' to \'a\' and \'Z\' to \'A.\' Sample Input Hello, World! Sample Output Ifmmp, Xpsme! Explanation Each letter in the string is replaced by the next letter in the alphabet (\'H\' becomes \'I\', \'e\' becomes \'f\', and so on). Non-alphabet characters like \',\', \' \', and \'!\' are not changed.","solution":"def next_char_in_alphabet(s): Takes a string and returns the string with all alphabetic characters replaced by the next character in the alphabet. Non-alphabetic characters remain unchanged. result = [] for char in s: if \'a\' <= char <= \'z\': if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) elif \'A\' <= char <= \'Z\': if char == \'Z\': result.append(\'A\') else: result.append(chr(ord(char) + 1)) else: result.append(char) return \'\'.join(result)"},{"question":"Consider a binary tree defined by node values of type integer. Each node has at most two child nodes: left and right. Implement a function that checks whether the tree is a valid Binary Search Tree (BST). A BST is a tree in which all values in the left subtree are less than the root\'s value, and all values in the right subtree are greater than the root\'s value. Additionally, both the left and right subtrees must themselves be BSTs. Your function should take the root of the tree as its input and return a boolean indicating whether the tree satisfies BST properties. Example 1: Input: [2,1,3] Output: true Example 2: Input: [5,1,4,null,null,3,6] Output: false Example 3: Input: [1] Output: true Example 4: Input: [10,5,15,null,null,6,20] Output: false Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - -10^4 <= Node.val <= 10^4 You may assume that the input is given in a level-order traversal format where \'null\' represents a missing node. Hint: - Consider using a helper function with additional arguments to impose bounds on the values of the nodes. - Ensure to check the boundaries at each node, recursively validating the left and right subtrees.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isValidBST(root, lower=float(\'-inf\'), upper=float(\'inf\')): if not root: return True if root.val <= lower or root.val >= upper: return False return isValidBST(root.left, lower, root.val) and isValidBST(root.right, root.val, upper)"},{"question":"You are given a list of people\'s names. Each name consists of a first name and a last name separated by a space. You need to process multiple queries to check if a certain person is in the list and if they are, output their index (1-based) in the list. If the person is not in the list, output -1. -----Input----- The first line of the input contains an integer N (1 leq N leq 100000), the number of names in the list. Each of the following N lines contains one name. The next line contains an integer Q (1 leq Q leq 100000), the number of queries. The following Q lines each contain one name, which is the query. Each name in the input consists of at least one and at most twenty lowercase alphabetic characters, followed by a single space, followed by at least one and at most twenty lowercase alphabetic characters. -----Output----- For each query, output the index of the person’s name in the list (starting from 1). If the name does not exist in the list, output -1. -----Examples----- Sample Input: 5 alice smith john doe jane austen emma woodhouse charlotte bronte 3 john doe mr darcy emma woodhouse Sample Output: 2 -1 4 Sample Input: 4 mary shelley percy bysshe george eliot harriet beecher 2 george eliot mark twain Sample Output: 3 -1","solution":"def find_names_indices(names, queries): Returns the indices of the queried names in the provided list of names. Args: names (list of str): List of names (first and last names). queries (list of str): List of queries (names to find). Returns: list of int: The index (1-based) of each queried name in the list of names, or -1 if the name is not found. name_index_map = {name: i + 1 for i, name in enumerate(names)} return [name_index_map.get(query, -1) for query in queries] # Example usage: # names = [\\"alice smith\\", \\"john doe\\", \\"jane austen\\", \\"emma woodhouse\\", \\"charlotte bronte\\"] # queries = [\\"john doe\\", \\"mr darcy\\", \\"emma woodhouse\\"] # print(find_names_indices(names, queries)) # Output: [2, -1, 4]"},{"question":"Given a company\'s sales record for the last \'n\' days, your task is to analyze the sales data and identify the longest subarray of days during which the sales were in non-decreasing order. For example, if the sales for the days are: [100, 180, 260, 40, 310, 535, 695] The longest non-decreasing subarray is [40, 310, 535, 695], which has a length of 4 days. If there are multiple longest non-decreasing subarrays of the same length, return the first one. -----Input----- The input consists of: - The first line containing a single integer n, (1 leq n leq 1000), the number of days. - The second line containing n integers, where each integer x, (1 leq x leq 10^6), represents the sales on that day. -----Output----- Output the length of the longest subarray and the subarray itself. -----Examples----- Sample Input 1: 7 100 180 260 40 310 535 695 Sample Output 1: 4 40 310 535 695 Sample Input 2: 3 300 300 300 Sample Output 2: 3 300 300 300","solution":"def longest_non_decreasing_subarray(n, sales): Returns the length of the longest non-decreasing subarray and the subarray itself. max_length = 1 current_length = 1 start_index = 0 max_start_index = 0 for i in range(1, n): if sales[i] >= sales[i - 1]: current_length += 1 else: if current_length > max_length: max_length = current_length max_start_index = start_index current_length = 1 start_index = i if current_length > max_length: max_length = current_length max_start_index = start_index return max_length, sales[max_start_index:max_start_index + max_length]"},{"question":"A string is called balanced if it contains an equal number of \'a\', \'b\', and \'c\' characters. Given a string, determine the length of the shortest balanced substring within it. If no such substring exists, return -1. A substring is a contiguous block of characters within a string. For example, in the string \\"abcabc\\", the substring \\"abc\\" from index 0 to 2 and the substring \\"bca\\" from index 1 to 3 are examples of substrings. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. - Each of the next T lines contains a single string consisting of characters \'a\', \'b\', and \'c\' only. ------ Output Format ------ For each test case, output the length of the shortest balanced substring, or -1 if no such substring exists. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ length of the string ≤ 1000 ----- Sample Input 1 ------ 3 abccba abcabcabc aaabbbccc ----- Sample Output 1 ------ 3 3 9 ----- Explanation 1 ------ Test case 1: The shortest balanced substring is \\"abc\\" or \\"bca\\" which has length 3. Test case 2: The substring \\"abc\\" at the beginning is already balanced and has length 3. Test case 3: The entire string \\"aaabbbccc\\" is the shortest balanced substring and has length 9.","solution":"def shortest_balanced_substring_length(s): Determines the length of the shortest balanced substring consisting of equal number of \'a\', \'b\', and \'c\' characters. Parameters: s (str): The input string containing characters \'a\', \'b\', and \'c\' only. Returns: int: Length of the shortest balanced substring, or -1 if no such substring exists. n = len(s) if n < 3: return -1 # Helper function to check if a substring is balanced. def is_balanced(substr): return substr.count(\'a\') == substr.count(\'b\') == substr.count(\'c\') min_length = float(\'inf\') # Iterate over all possible substrings for i in range(n): for j in range(i + 2, n): if is_balanced(s[i:j + 1]): min_length = min(min_length, j - i + 1) if min_length == float(\'inf\'): return -1 return min_length # Reading the input def get_balanced_substring_lengths(test_cases): result = [] for s in test_cases: result.append(shortest_balanced_substring_length(s)) return result"},{"question":"You are given a list of N integers representing the heights of hills in a landscape, where some hills might be hidden by taller hills in front of them. A hill at position i is hidden if there exists a hill at position j such that j < i and the height of hill j is greater than or equal to the height of hill i. Write a function to determine the positions (0-indexed) of all visible hills. A hill is visible if there is no taller or equally tall hill before it. ------ Input ------ The first line of the input contains a single integer N (1 ≤ N ≤ 10^5), the number of hills. The second line contains N space-separated integers H1, H2, ..., HN (1 ≤ Hi ≤ 10^9) representing the heights of the hills. ------ Output ------ Output a single line containing the positions of all visible hills in ascending order, separated by spaces. ------ Example ------ Input: 8 1 3 2 4 1 5 3 2 Output: 0 1 3 5 Explanation: - Hill at position 0 is visible. - Hill at position 1 is visible because there is no previous hill with height >= 3. - Hill at position 3 is visible because there is no previous hill with height >= 4. - Hill at position 5 is visible because there is no previous hill with height >= 5. Note that hills at positions 2, 4, 6, and 7 are hidden by earlier hills with greater or equal height.","solution":"def find_visible_hills(heights): Determines the positions of all visible hills. :param heights: List of heights of hills :return: List of positions of visible hills in ascending order visible_hills = [] max_height_so_far = -1 for i in range(len(heights)): if heights[i] > max_height_so_far: visible_hills.append(i) max_height_so_far = heights[i] return visible_hills"},{"question":"Problem You are a logistics manager working at a warehouse that requires frequent updates on inventory levels. The warehouse has N different items, and you need to handle frequent queries regarding their stock levels. You will be given a list of items and their initial stock levels, followed by a series of queries and updates to handle. Write a program to process the following two types of queries: 1. Update the stock level of a specific item to a new value. 2. Report the total stock level of items within a specified range. Constraints The input satisfies the following constraints: * 1 ≤ N ≤ 10⁵ * 0 ≤ ai ≤ 10⁶ (0 ≤ i ≤ N−1) * 1 ≤ Q ≤ 10⁵ * 0 ≤ li ≤ ri ≤ N-1 for sum queries * 0 ≤ ui ≤ N-1 for update queries * 0 ≤ vi ≤ 10⁶ for update queries Input The input is given in the following format: N a0 a1 ... aN−1 Q t0 p0 q0 t1 p1 q1 .. .. .. tQ−1 pQ−1 qQ−1 The first line is given one integer N. On the second line, N integers are given, separated by spaces. On the third line, the number of queries is given as one integer Q. The query values t, p, q are given in the following 4 to 3 + Q lines. * ti is 1 for updates (update stock level of item pi to qi) * ti is 2 for sum queries (compute the total stock level for items from index pi to qi) Output For each sum query, output the total stock level of the specified range on one line. Examples Input 5 10 20 30 40 50 4 2 1 3 1 2 25 2 1 3 1 0 100 Output 90 85","solution":"class Warehouse: def __init__(self, stocks): self.n = len(stocks) self.stocks = stocks self.prefix_sums = self._compute_prefix_sums(stocks) def _compute_prefix_sums(self, stocks): prefix_sums = [0] * (self.n + 1) for i in range(self.n): prefix_sums[i + 1] = prefix_sums[i] + stocks[i] return prefix_sums def update_stock(self, index, value): diff = value - self.stocks[index] self.stocks[index] = value for i in range(index + 1, self.n + 1): self.prefix_sums[i] += diff def total_stock_in_range(self, left, right): return self.prefix_sums[right + 1] - self.prefix_sums[left] def process_queries(n, stocks, queries): warehouse = Warehouse(stocks) results = [] for query in queries: t, p, q = query if t == 1: warehouse.update_stock(p, q) elif t == 2: results.append(warehouse.total_stock_in_range(p, q)) return results # Example usage n = 5 stocks = [10, 20, 30, 40, 50] queries = [(2, 1, 3), (1, 2, 25), (2, 1, 3), (1, 0, 100)] print(process_queries(n, stocks, queries))"},{"question":"You are participating in an online game that requires players to collect various resources. There are n different types of resources, and each type of resource can be collected at a different rate. Your task is to calculate the maximum number of a given resource you can collect within a given time limit. However, you have some constraints: you can only collect one type of resource at a time, and the time taken to switch between collecting different resources is non-negligible. You are given: - The number of resource types n. - An array of integers r representing the rate at which each type of resource is collected (r[i] is the rate for resource type i). - An array of integers t representing the time taken to switch to each type of resource (t[i] is the switch time for resource type i). - The total available time T. Determine the maximum number of a given resource type you can collect within the given total time T, considering the time spent on switching and collecting. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000) — the number of different resource types. The second line contains n integers r (1 ≤ r[i] ≤ 1000) — the collection rate for each resource type. The third line contains n integers t (0 ≤ t[i] ≤ 100) — the time taken to switch to each resource type. The fourth line contains an integer T (1 ≤ T ≤ 10^6) — the total available time. -----Output----- Output a single integer, the maximum number of a given resource type you can collect within the given total time T. -----Example----- Input 3 5 3 8 1 2 3 10 Output 40 -----Note----- In this example, the maximum number of resources is obtained by collecting the third resource type: - The rate of collecting the third resource type is 8 units per time unit. - The time taken to switch to the third resource type is 3. - Therefore, the total time spent collecting the third resource type is (10 - 3) = 7. - The maximum number of the third resource type collected is 7 * 8 = 56.","solution":"def max_resources_collected(n, r, t, T): Calculate the maximum number of resources that can be collected within the given total time. Args: n (int): Number of resource types. r (List[int]): Collection rates for each resource type. t (List[int]): Time taken to switch to each resource type. T (int): Total available time. Returns: int: Maximum number of a given resource type that can be collected within the given total time. max_resources = 0 for i in range(n): if T >= t[i]: collection_time = T - t[i] resources_collected = collection_time * r[i] max_resources = max(max_resources, resources_collected) return max_resources"},{"question":"# Determine Matrix Symmetry You are given a square matrix (2D array) of integers. Your task is to determine if the matrix is symmetric. A matrix is considered symmetric if it is equal to its transpose. Example ```python matrix1 = [ [1, 2, 3], [2, 4, 5], [3, 5, 6] ] # This matrix is symmetric because it is equal to its transpose: # [ # [1, 2, 3], # [2, 4, 5], # [3, 5, 6] # ] matrix2 = [ [1, 0, 3], [2, 4, 5], [3, 5, 6] ] # This matrix is not symmetric because its transpose is: # [ # [1, 2, 3], # [0, 4, 5], # [3, 5, 6] # ] which is not equal to original matrix. ``` Input - A 2D list (list of lists) where each inner list represents a row of the square matrix. You can assume that the matrix has at least one element and is square (i.e., number of rows equals number of columns). Output - Return `True` if the matrix is symmetric, otherwise return `False`. Constraints - The size of the matrix (N) will be in the range 1 ≤ N ≤ 1000. Function Signature ```python def is_symmetric(matrix: List[List[int]]) -> bool: ``` Examples ```python assert is_symmetric([[1, 2, 3], [2, 4, 5], [3, 5, 6]]) == True assert is_symmetric([[1, 0, 3], [2, 4, 5], [3, 5, 6]]) == False ```","solution":"def is_symmetric(matrix): Determines if a given square matrix is symmetric. A square matrix is symmetric if it is equal to its transpose. :param matrix: A list of lists where each sublist represents a row of the matrix. :return: True if the matrix is symmetric, False otherwise. n = len(matrix) for i in range(n): for j in range(i, n): if matrix[i][j] != matrix[j][i]: return False return True"},{"question":"A company wants to organize a coding competition where participants solve problems to earn points. There are n participants and m problems in the competition. Each participant initially has zero points. When a participant solves a problem, they earn a certain number of points. The competition data includes: 1. A list of integers where the i-th integer indicates the points earned for solving the i-th problem. 2. A list of submissions where each submission contains two integers (p, q) indicating that participant p solved problem q. Write a program to determine the final score of each participant after considering all their submissions. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), the number of participants and the number of problems, respectively. The second line contains m space-separated integers, where the i-th integer points_i (1 ≤ points_i ≤ 100) indicates the points earned for solving the i-th problem. The third line contains an integer k (1 ≤ k ≤ 1000), the number of submissions. Each of the next k lines contains two space-separated integers p and q (1 ≤ p ≤ n, 1 ≤ q ≤ m), indicating that participant p solved problem q. Output Output n space-separated integers where the i-th integer indicates the total points earned by the i-th participant. Examples Input 5 4 3 6 2 7 6 1 2 2 1 1 3 3 2 4 4 2 4 Output 8 10 6 7 0 Input 3 3 5 10 20 4 1 1 1 3 2 2 3 1 Output 25 10 5","solution":"def calculate_final_scores(n, m, points, submissions): # Initialize the scores of all participants to zero. scores = [0] * n # Process each submission. for p, q in submissions: # Add the points of the solved problem to the participant\'s score. scores[p - 1] += points[q - 1] return scores # Example usage: # n, m = 5, 4 # points = [3, 6, 2, 7] # submissions = [(1, 2), (2, 1), (1, 3), (3, 2), (4, 4), (2, 4)] # print(calculate_final_scores(n, m, points, submissions)) # Output: [8, 10, 6, 7, 0]"},{"question":"# Description: You are given a grid of size `m x n` representing a maze. Each cell in the grid can either be an open space, represented by \'.\', or a wall, represented by \'#\'. You need to find the number of unique paths from the top-left corner of the maze (0, 0) to the bottom-right corner (m-1, n-1) while only being able to move in two possible directions: right (→) or down (↓). You cannot move through walls. # Notes: - The starting cell (0, 0) and the ending cell (m-1, n-1) are guaranteed to be open (\'.\'). # Constraints: - `1 <= m, n <= 100` - The time complexity of your solution should be considered. # Some Examples: ``` grid = [ [\'.\', \'.\', \'.\'], [\'.\', \'#\', \'.\'], [\'.\', \'.\', \'.\'] ] countPaths(grid) === 2 # Explanation: The two paths are: # 1. (0,0) → (0,1) → (0,2) → (1,2) → (2,2) # 2. (0,0) → (1,0) → (2,0) → (2,1) → (2,2) grid = [ [\'.\', \'#\'], [\'#\', \'.\'] ] countPaths(grid) === 0 # Explanation: There is no valid path from (0,0) to (1,1) due to walls blocking the way. ``` Write a function `countPaths(grid)` that computes the number of unique paths from the top-left to the bottom-right corner of the maze.","solution":"def countPaths(grid): m, n = len(grid), len(grid[0]) # If starting or ending cell is a wall, return 0 if grid[0][0] == \'#\' or grid[m-1][n-1] == \'#\': return 0 # Initialize a 2D dp array with zeroes dp = [[0] * n for _ in range(m)] dp[0][0] = 1 # Starting point # Fill the dp array for i in range(m): for j in range(n): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"# Task Jasper is working on a simulation of a parking lot, and he needs to write a software program to help manage the parking spaces. Each parking spot has a label `LXY` where `L` represents the level (an uppercase letter from `\'A\'` to `\'Z\'`), and `XY` is the spot number (an integer from `01` to `99`). A parking lot can have multiple levels, each with up to `99` spots. Your task is to write a function that takes a string `s` representing the labels of all parked cars and returns a list indicating the number of available spots on each level that is mentioned in the input string. - If a level in the input string has more than `99` parked cars or if the same car label appears more than once in the parking lot, return an array containing only one element: `[-1]`. - If a level is not mentioned in the input string, it should not appear in the output list. # Input/Output - `[input]` string `s` A correct string of car labels. 0 ≤ |S| ≤ 10000 - `[output]` an array of integer tuples An array of tuples `(L, n)` where `L` is the level and `n` is the number of available spots on that level, sorted by level in alphabetical order. If the conditions are not met, return `[-1]`. # Example For `s = \\"A01B02A03C01B04\\"`, the output should be `[(\'A\', 97), (\'B\', 97), (\'C\', 98)]`. Level `A` has `2` cars, so `99 - 2 = 97` spots are available. Level `B` has `2` cars, so `99 - 2 = 97` spots are available. Level `C` has `1` car, so `99 - 1 = 98` spots are available. For `s = \\"D01E05D01\\"`, the output should be `[-1]`. The car with label `\\"D01\\"` appears more than once.","solution":"def parking_lot(s): Returns the number of available spots on each level or [-1] if the input is not correct. if len(s) % 3 != 0: return [-1] car_counts = {} seen_cars = set() for i in range(0, len(s), 3): level = s[i] spot = s[i+1:i+3] car_label = s[i:i+3] if car_label in seen_cars: return [-1] seen_cars.add(car_label) if level not in car_counts: car_counts[level] = set() car_counts[level].add(spot) if len(car_counts[level]) > 99: return [-1] result = [] for level in sorted(car_counts): available_spots = 99 - len(car_counts[level]) result.append((level, available_spots)) return result"},{"question":"Given a Binary Tree, write a function to convert it into its Mirror Tree. In a Mirror Tree, the left and right children of every node are swapped. Example 1: Input: 1 / 2 3 / / 4 5 6 7 Output: 1 3 2 7 6 5 4 Explanation: The tree should be modified to following: 1 / 3 2 / / 7 6 5 4 Example 2: Input: 4 / 2 5 / 1 3 Output: 4 5 2 3 1 Explanation: The tree should be modified to following: 4 / 5 2 / 3 1 Your Task: You don\'t need to read input or print anything. Your task is to complete the function mirror() which takes one argument: root of the Binary Tree. The function should contain the logic to convert the Binary Tree into its Mirror Tree. Return the root of the Mirror Tree. The driver code will print the inorder traversal of the returned tree. Expected Time Complexity: O(N) Expected Auxiliary Space: O(Height of the Tree). Constraints: 1 <= Number of nodes <= 100000 1 <= Node data <= 10^5 Note: The Input/Output format and Example is given are used for the system\'s internal purpose, and should be used by a user for Expected Output only. As it is a function problem, hence a user should not read any input from the stdin/console. The task is to complete the function specified, and not to write the full code.","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def mirror(root): Converts the given binary tree to its mirror tree. if root is None: return None # Swap the left and right children root.left, root.right = root.right, root.left # Recur for the left and right subtree mirror(root.left) mirror(root.right) return root"},{"question":"A robot is placed on an infinite 2D grid at the point (0, 0). The robot needs to visit a series of points in the exact order given. You need to determine whether it can do so following certain rules: 1. The robot can only move to the right (positive x direction) or up (positive y direction). 2. The robot starts at (0, 0) and must visit the points in the order they are given. Write a program that checks if the robot can visit all the given points in order following the move constraints. -----Constraints----- - 1 ≦ N ≦ 1000 - 0 ≦ x_i, y_i ≦ 1000 -----Input----- The input is given from Standard Input in the following format: N x1 y1 x2 y2 : xN yN -----Output----- Print \\"Yes\\" if the robot can visit all the points in order following the given rules, otherwise print \\"No\\". -----Sample Input----- 3 1 2 3 2 3 4 -----Sample Output----- Yes In this example, the robot can move as follows: - From (0, 0) to (1, 2) - From (1, 2) to (3, 2) - From (3, 2) to (3, 4) As the robot only moves right or up, the output is Yes. -----Sample Input----- 3 1 2 2 1 3 3 -----Sample Output----- No In this example, moving from (1, 2) to (2, 1) requires a move downwards, which is not allowed. Therefore, the output is No.","solution":"def can_visit_all_points(points): Checks if the robot can visit all the given points in order following the rules: 1. The robot can only move to the right (positive x direction) or up (positive y direction). 2. The robot starts at (0, 0) and must visit the points in the order they are given. Parameters: points (List[Tuple[int, int]]): List of points to visit in order. Returns: str: \\"Yes\\" if the robot can visit all the points in order, otherwise \\"No\\". current_x, current_y = 0, 0 for x, y in points: if x < current_x or y < current_y: return \\"No\\" current_x, current_y = x, y return \\"Yes\\""},{"question":"Given an array of integers, your task is to rotate the elements to the right by k steps, where k is a non-negative integer. For example, given array A = [1, 2, 3, 4, 5, 6, 7] and k = 3, the array should be modified to [5, 6, 7, 1, 2, 3, 4]. Example 1: Input: A = [1, 2, 3, 4, 5, 6, 7] k = 3 Output: [5, 6, 7, 1, 2, 3, 4] Example 2: Input: A = [-1, -100, 3, 99] k = 2 Output: [3, 99, -1, -100] Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function rotateArray that takes an array A, and an integer k and returns the modified array. The driver code takes care of the printing. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ A.length ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 0 ≤ k ≤ 10^5","solution":"def rotateArray(A, k): Rotates the elements of the array A to the right by k steps. n = len(A) k = k % n # Ensure k is within the bounds of A\'s length to prevent unnecessary rotations return A[-k:] + A[:-k]"},{"question":"A city landscape has various buildings forming a skyline. You are given an array, `heights`, where each element represents the height of a building. The width of each building is considered to be 1. You need to answer queries on this skyline. Each query can be one of the following types: 1. `0 l r` - Find the height of the tallest building within the range of buildings indexed from l to r (inclusive). 2. `1 l r h` - Add `h` height to all buildings within the range of buildings indexed from l to r (inclusive). ------ Input ------ The first line of input contains an integer `T` denoting the number of test cases. For each test case, the first line contains an integer `N` denoting the number of buildings in the skyline. The next line contains `N` space-separated integers representing the height of each building. The following line contains an integer `Q` denoting the number of queries. `Q` lines follow, each line can be of the format `0 l r` or `1 l r h` as described above. ------ Output ------ For each test case, print for each query of type `0 l r`, the height of the tallest building in the specified range. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ heights[i] ≤ 10^6 1 ≤ Q ≤ 10^4 0 ≤ l ≤ r < N 0 ≤ h ≤ 1000 ----- Sample Input 1 ------ 1 5 1 3 4 2 5 3 0 1 3 1 0 2 3 0 0 4 ----- Sample Output 1 ------ 4 6 ----- Explanation 1 ------ 1. For the first query `0 1 3`, the tallest building between indexes 1 and 3 (inclusive) has a height of 4. 2. For the second query `1 0 2 3`, the heights of buildings from index 0 to index 2 are increased by 3. The new heights are [4, 6, 7, 2, 5]. 3. For the third query `0 0 4`, the tallest building between indexes 0 and 4 (inclusive) has a height of 7.","solution":"def process_skyline_queries(T, test_cases): results = [] for case in test_cases: N, heights, Q, queries = case for query in queries: if query[0] == 0: l, r = query[1], query[2] results.append(max(heights[l:r+1])) elif query[0] == 1: l, r, h = query[1], query[2], query[3] for i in range(l, r+1): heights[i] += h return results"},{"question":"A spaceship is navigating through a grid of asteroids. The grid is represented as an n x m matrix where each cell can either be empty (represented by a 0) or contain an asteroid (represented by a 1). The spaceship can only move right or down from any empty cell. The spaceship starts at the top-left corner of the grid and needs to reach the bottom-right corner. You are required to determine whether there is a path that the spaceship can take to reach the bottom-right corner of the grid without hitting any asteroids. -----Input----- The first line consists of two integers n and m (1 ≤ n, m ≤ 1000) — the dimensions of the grid. Each of the next n lines contains m integers (either 0 or 1) — the description of the grid. The top-left corner (0,0) will always be empty, represented by 0. -----Output----- Print \\"YES\\" (without quotes) if there is a path to the bottom-right corner of the grid. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). -----Examples----- Input 3 3 0 1 0 0 0 0 1 0 0 Output YES Input 3 3 0 1 0 1 0 1 1 1 0 Output NO -----Note----- In the first example, the spaceship can move from (0,0) to (1,0) to (1,1) to (1,2) to (2,2), avoiding all asteroids. In the second example, there is no path from the top-left corner to the bottom-right corner without hitting an asteroid.","solution":"def is_path_to_bottom_right(n, m, grid): Determines if there is a path from the top-left to the bottom-right corner of the grid without hitting any asteroids. :param n: Number of rows in the grid :param m: Number of columns in the grid :param grid: n x m grid represented as a list of lists :return: \\"YES\\" if there is a path, otherwise \\"NO\\" if n == 0 or m == 0: return \\"NO\\" # Initialize dp matrix with False dp = [[False] * m for _ in range(n)] dp[0][0] = True # Starting point # Fill the dp matrix for i in range(n): for j in range(m): if grid[i][j] == 1: dp[i][j] = False else: if i > 0: dp[i][j] = dp[i][j] or dp[i-1][j] if j > 0: dp[i][j] = dp[i][j] or dp[i][j-1] return \\"YES\\" if dp[n-1][m-1] else \\"NO\\""},{"question":"Given an array of integers of size N and an integer X, count the number of subarrays that sum to X. Example 1: Input: N = 5 Arr[] = {1, 2, 3, 4, 5} X = 9 Output: 2 Explanation: There are two subarrays whose sum is 9: [2, 3, 4] and [4, 5]. Example 2: Input: N = 3 Arr[] = {10, 2, -2, -20, 10} X = -10 Output: 3 Explanation: There are three subarrays whose sum is -10: [10, 2, -2, -20], [2, -2, -20, 10], and [-20, 10]. Your Task: You only need to complete the function count_subarrays() that takes an array of integers Arr, an integer N, and an integer X as input, and returns the number of subarrays that sum to X. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1<=N<=10^5 -10^5 <= Arr[i] <= 10^5","solution":"def count_subarrays(arr, N, X): Returns the count of subarrays in arr of size N that sum to X. # Dictionary to store cumulative sum frequencies cum_sum_freq = {0: 1} cum_sum = 0 count = 0 for num in arr: cum_sum += num if (cum_sum - X) in cum_sum_freq: count += cum_sum_freq[cum_sum - X] if cum_sum in cum_sum_freq: cum_sum_freq[cum_sum] += 1 else: cum_sum_freq[cum_sum] = 1 return count"},{"question":"Alice is fascinated by strings and palindromes. Given a string S, she defines the *fun* of the string as the number of distinct palindromic substrings of S. Find the *fun* of string S. Two substrings are considered distinct if they start or end at different positions in the string, even if the substrings themselves are identical. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of test cases follow. - First line of each test case contains one integer N - the length of the string. - Second line of each test case contains the string S. ------ Output Format ------ For each test case, output in a single line, the fun of the string. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 ----- Sample Input 1 ------ 3 4 abba 3 aaa 5 abcde ----- Sample Output 1 ------ 4 6 5 ----- explanation 1 ------ Test Case 1: All distinct palindromic substrings of the string S = abba are [a, b, bb, b, a]. Thus, the fun of the string is 4. Test Case 2: All distinct palindromic substrings of the string S = aaa are [a, a, a, aa, aa, aaa]. Thus, the fun of the string is 6. Test Case 3: All distinct palindromic substrings of the string S = abcde are [a, b, c, d, e]. Thus, the fun of the string is 5.","solution":"def count_distinct_palindromic_substrings(S): Function to count distinct palindromic substrings in the string S. n = len(S) palindromes = set() # Dynamic programming approach to find palindromes dp = [[False] * n for _ in range(n)] for length in range(1, n + 1): # length of the substring for i in range(n - length + 1): j = i + length - 1 # ending index of the substring if length == 1: dp[i][j] = True elif length == 2: dp[i][j] = (S[i] == S[j]) else: dp[i][j] = (S[i] == S[j]) and dp[i + 1][j - 1] if dp[i][j]: palindromes.add(S[i:j + 1]) return len(palindromes) def fun_of_string(t, test_cases): results = [] for i in range(t): n, s = test_cases[i] result = count_distinct_palindromic_substrings(s) results.append(result) return results"},{"question":"You are given an array of n integers representing the heights of n buildings in a row. Each building has some people living in it. A person can see the sunset if there are no taller buildings to their left (west). Write a program that determines how many people can see the sunset, if each person in the taller building (if any) blocks the view of the people in all the shorter buildings to its right (east). Input The first line contains a single integer t (1 ≤ t ≤ 100) denoting the number of test cases. The next lines contain descriptions of the test cases. The first line of each test case contains a single integer n (1 ≤ n ≤ 5000) which is the number of buildings. The second line contains n space-separated integers h_1, h_2, …, h_n (1 ≤ h_i ≤ 10^9) which are the heights of the buildings. The third line contains n space-separated integers p_1, p_2, …, p_n (1 ≤ p_i ≤ 10^9) which are the number of people living in each building. Output For each test case, output a single line containing a single integer denoting the number of people who can see the sunset. Example Input 2 5 3 5 4 4 2 10 20 10 15 5 4 1 3 2 4 5 7 3 6 Output 30 18 Note In the first test case, we need to find the number of people who can see the sunset for n = 5 buildings. The heights are [3, 5, 4, 4, 2] and the people living in those buildings are [10, 20, 10, 15, 5]. * The first building has height 3 and 10 people and it can see the sunset. * The second building has height 5 and 20 people and it can see the sunset as it is the tallest so far. * The third and fourth buildings both have height 4 and will be blocked by the second building. * The fifth building has height 2 and will also be blocked by the second building. Thus, a total of 30 people can see the sunset. In the second test case, for n = 4 buildings, we have heights [1, 3, 2, 4] and people [5, 7, 3, 6]. * The first building has height 1 and 5 people and can see the sunset. * The second building has height 3 and 7 people and can see the sunset. * The third building has height 2 but it is blocked by the second building. * The fourth building has height 4 and 6 people and can see the sunset. Thus, a total of 18 people can see the sunset.","solution":"def people_seeing_sunset(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] people = test_cases[i][2] max_height = 0 total_people = 0 for j in range(n): if heights[j] > max_height: total_people += people[j] max_height = heights[j] results.append(total_people) return results"},{"question":"In an online ticket booking system, users are allowed to book tickets for events scheduled on specific dates. The system needs to manage the booking requests efficiently. You are asked to implement a module that can handle multiple booking requests and return the number of tickets reserved successfully for each request. Bookings are processed in the order they are received. Each booking request defines the event date and the number of tickets requested. Each event has a maximum number of tickets that can be sold. Write a function to process the booking requests and return the results. Input: - n: The total number of events (1 ≤ n ≤ 100,000). - An array of n integers where the i-th integer represents the maximum tickets available for event i (1 ≤ maxTickets_i ≤ 100,000). - m: The total number of booking requests (1 ≤ m ≤ 100,000). - An array of m tuples where each tuple contains two integers: - eventDate: The event index (1 ≤ eventDate ≤ n) - ticketsRequested: The number of tickets requested for that event (1 ≤ ticketsRequested ≤ 100,000) Output: - An array of m integers where the i-th integer represents the number of tickets successfully booked for the i-th request. Example: Input: 5 100 200 150 120 80 4 1 50 3 200 2 150 5 90 Output: [50, 150, 150, 80] Explanation: - For the first request, 50 tickets are booked for event 1 which had 100 tickets available. - For the second request, only 150 tickets are booked for event 3 since it had only 150 tickets available, even though 200 were requested. - For the third request, 150 tickets are successfully booked for event 2 as it matches the request exactly. - For the fourth request, only 80 tickets are booked for event 5 as it had only 80 tickets available, even though 90 were requested. Guidelines: - You must ensure that the event tickets are managed correctly and each booking request is processed in the order received. - Optimize the function to handle the upper limits of the input constraints efficiently.","solution":"def process_booking_requests(n, max_tickets, m, requests): Process booking requests and return the number of tickets reserved successfully for each request. :param n: int - Total number of events :param max_tickets: list of int - Maximum tickets available for each event :param m: int - Total number of booking requests :param requests: list of tuple - Each tuple contains (eventDate, ticketsRequested) :return: list of int - Tickets successfully booked for each request results = [] remaining_tickets = max_tickets[:] for event_date, tickets_requested in requests: available_tickets = remaining_tickets[event_date - 1] booked_tickets = min(tickets_requested, available_tickets) results.append(booked_tickets) remaining_tickets[event_date - 1] -= booked_tickets return results"},{"question":"Local transport authorities are planning to introduce a new device that can provide accurate travel times for the bus routes in a given city. The city is represented as a graph with `n` intersections connected by `m` directed roads. The `i-th` road goes from intersection `ui` to intersection `vi` and the travel time for this road is `ci` seconds. You have been tasked to implement an algorithm to find the shortest possible travel time from a given start intersection `s` to a given end intersection `t`. If it is impossible to reach the end intersection from the start intersection, the algorithm should return -1. Input: The first line contains three integers `n`, `m`, and `s` (1 ≤ n ≤ 100, 0 ≤ m ≤ 1000, 1 ≤ s ≤ n) – the number of intersections, the number of roads, and the start intersection. The next m lines contain three integers each: `ui`, `vi`, and `ci` (1 ≤ ui, vi ≤ n, 1 ≤ ci ≤ 1000) denoting the intersections connected by the i-th road and the travel time in seconds. The last line contains one integer `t` (1 ≤ t ≤ n) corresponding to the end intersection. Output: In a single line, print the shortest possible travel time from the intersection `s` to the intersection `t`. If there is no path from `s` to `t`, print `-1`. Examples Input 5 6 1 1 2 4 1 3 2 2 3 5 3 4 1 2 5 10 4 5 3 5 Output 6 Input 3 3 1 1 2 2 2 3 4 1 3 7 3 Output 6 Input 3 1 1 1 2 3 3 Output -1 Note In the first example, the shortest path from the start intersection `1` to the end intersection `5` is via the intersections `1 → 3 → 4 → 5` with a total travel time of `6` seconds. In the second example, the shortest path from the start intersection `1` to the end intersection `3` is via the intersections `1 → 2 → 3` with a total travel time of `6` seconds instead of direct road from `1` to `3` with `7` seconds. In the third example, there is no path from the start intersection `1` to the end intersection `3`. Hence, the output is `-1`.","solution":"import heapq def shortest_travel_time(n, m, s, roads, t): Returns the shortest travel time from intersection s to t in a directed graph. If there\'s no path from s to t, returns -1. Parameters: n (int): the number of intersections. m (int): the number of roads. s (int): the start intersection. roads (List of Tuple): each tuple contains (ui, vi, ci) where ui is the start intersection of the road, vi is the end intersection of the road, and ci is the travel time. t (int): the end intersection. Returns: int: the shortest travel time from s to t. If no such path exists, returns -1. # Create the adjacency list graph = [[] for _ in range(n+1)] for ui, vi, ci in roads: graph[ui].append((vi, ci)) # Use Dijkstra\'s algorithm to find the shortest path min_heap = [(0, s)] # (travel_time, intersection) travel_time = [float(\'inf\')] * (n + 1) travel_time[s] = 0 while min_heap: current_time, u = heapq.heappop(min_heap) if current_time > travel_time[u]: continue for v, time in graph[u]: if travel_time[u] + time < travel_time[v]: travel_time[v] = travel_time[u] + time heapq.heappush(min_heap, (travel_time[v], v)) return travel_time[t] if travel_time[t] != float(\'inf\') else -1"},{"question":"You are given a playlist containing N different songs, each represented by a unique string identifier. There are M users using a music streaming service, and each user has a frequency list representing how many times they have played each song in the playlist. Your task is to determine for each user, the most frequently played song in their list. If there are multiple songs tied for the highest frequency, choose the lexicographically smallest song among them. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M. The next N lines of each test case contain strings S_{1}, S_{2}, ldots, S_{N} representing the song identifiers. The next M lines contain N integers each, where the j-th integer in the i-th line (1 ≤ i ≤ M, 1 ≤ j ≤ N) denotes the frequency with which the i-th user played the j-th song. ------ Output ------ For each test case, print M lines. Each line should contain a single string representing the most frequently played song for each user. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N, M ≤ 100 1 ≤ |S_{i}| ≤ 100 for each valid i 0 ≤ Frequency of a song played by a user leq 10^3 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 1 3 2 songA songB songC 2 1 0 1 3 2 ----- Sample Output 1 ------ songA songB ----- explanation 1 ------ Example case 1: User 1 played \\"songA\\" 2 times, \\"songB\\" 1 time, and \\"songC\\" 0 times, so their most frequently played song is \\"songA\\". User 2 played \\"songA\\" 1 time, \\"songB\\" 3 times, and \\"songC\\" 2 times, so their most frequently played song is \\"songB\\".","solution":"def most_frequent_songs(T, test_cases): results = [] for case in test_cases: N, M = case[\'N\'], case[\'M\'] songs = case[\'songs\'] frequencies = case[\'frequencies\'] for user_idx in range(M): max_freq = -1 fav_song = \\"\\" for song_idx in range(N): if frequencies[user_idx][song_idx] > max_freq: max_freq = frequencies[user_idx][song_idx] fav_song = songs[song_idx] elif frequencies[user_idx][song_idx] == max_freq: if songs[song_idx] < fav_song: fav_song = songs[song_idx] results.append(fav_song) return results # Example to run the function: # T = 1 # test_cases = [ # { # \'N\': 3, # \'M\': 2, # \'songs\': [\\"songA\\", \\"songB\\", \\"songC\\"], # \'frequencies\': [ # [2, 1, 0], # [1, 3, 2] # ] # } # ] # print(most_frequent_songs(T, test_cases))"},{"question":"A group of friends wants to participate in a game where they will be placed on a rectangular grid. Each cell in the grid can either be empty or occupied by an obstacle. The friends need to find the shortest path from their initial position to the target position while avoiding obstacles. They can move up, down, left, or right, but not diagonally. **Input:** The first line contains the number of test cases, T. For each test case: - The first line contains two integers N and M, representing the number of rows and columns in the grid. - The next N lines each contain M characters, representing the grid. \'.\' indicates an empty cell, \'#\' indicates an obstacle. - The next line contains four integers, x_1, y_1, x_2, and y_2 representing the starting position (x_1, y_1) and the target position (x_2, y_2). **Output:** For each test case, print a single integer representing the shortest path from the start to the target. If no path exists, print -1. **Constraints:** - 1 leq T leq 100 - 1 leq N, M leq 1000 - 1 leq x_1, y_1, x_2, y_2 leq min(N, M) **Sample Input 1:** ``` 2 5 5 ..... .#. ..... .#. ..... 1 1 5 5 5 6 ...... ...... ...... ...... ...... ...... 1 1 5 6 ``` **Sample Output 1:** ``` 8 10 ``` **Explanation 1:** In the first test case, the grid is: ``` ..... .#. ..... .#. ..... ``` The shortest path from (1,1) to (5,5) avoiding obstacles is 8 steps. In the second test case, the grid is: ``` ...... ...... ...... ...... ...... ...... ``` The shortest path from (1,1) to (5,6) is 10 steps, as there are no obstacles.","solution":"from collections import deque def shortest_path(grid, start, end): N, M = len(grid), len(grid[0]) x1, y1 = start x2, y2 = end # Directions: right, left, up, down directions = [(0, 1), (0, -1), (-1, 0), (1, 0)] queue = deque([(x1, y1, 0)]) visited = set((x1, y1)) while queue: x, y, dist = queue.popleft() if (x, y) == (x2, y2): return dist for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and (nx, ny) not in visited and grid[nx][ny] == \'.\': visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 def solve(test_cases): results = [] for case in test_cases: N, M, grid, start, end = case result = shortest_path(grid, start, end) results.append(result) return results"},{"question":"Problem statement You are given a 2D grid where each cell contains a number representing the altitude at that point. Your task is to find the largest connected component in the grid, where a connected component is defined as a group of cells in the grid that are connected horizontally or vertically (but not diagonally) and all cells in this group have the same altitude. Write a program that takes the dimensions of the grid and the grid itself as input and outputs the size of the largest connected component. # Input - The first line contains two integers, `R` and `C` (1 ≤ R, C ≤ 100), representing the number of rows and columns of the grid. - The next `R` lines each contain `C` integers, representing the altitudes of the cells in the grid. # Output - Output a single integer representing the size of the largest connected component. # Sample Input 1 ``` 4 5 1 1 0 2 2 3 1 1 2 2 4 4 1 1 0 4 4 4 4 0 ``` # Sample Output 1 ``` 6 ``` # Sample Input 2 ``` 3 3 1 2 1 2 2 2 1 2 1 ``` # Sample Output 2 ``` 5 ``` # Explanation In **Sample Input 1**, the largest component of connected cells with the same altitude is the cells with altitude `1`, which form a component of size `6`. In **Sample Input 2**, the largest component of connected cells with the same altitude is the cells with altitude `2`, which form a component of size `5`. # Constraints - The grid will have at least `1` row and `1` column. - The number of rows and columns will not exceed `100`. - The altitude in each cell is a non-negative integer not exceeding `1000`.","solution":"def largest_connected_component(R, C, grid): def dfs(r, c, value): if r < 0 or r >= R or c < 0 or c >= C or visited[r][c] or grid[r][c] != value: return 0 visited[r][c] = True size = 1 size += dfs(r + 1, c, value) size += dfs(r - 1, c, value) size += dfs(r, c + 1, value) size += dfs(r, c - 1, value) return size visited = [[False] * C for _ in range(R)] max_size = 0 for r in range(R): for c in range(C): if not visited[r][c]: size = dfs(r, c, grid[r][c]) max_size = max(max_size, size) return max_size"},{"question":"Given an integer array `nums`, you are required to determine if there is a subsequence of length `n` that can be rearranged to form an arithmetic progression (AP) with a given common difference `d`. The task is to identify whether such a subsequence exists within the given array. Example 1: Input: `nums = [3, 5, 1, 7, 9, 11]`, `n = 3`, `d = 2` Output: `True` Explanation: A subsequence [3, 5, 7] can be rearranged to form an AP with common difference 2. Example 2: Input: `nums = [1, 2, 4, 6, 8]`, `n = 3`, `d = 3` Output: `False` Explanation: There is no subsequence of length 3 that can form an AP with common difference 3. Your Task: You don\'t need to read input or print anything. Complete the function `canFormAP` which takes `nums`, `n`, and `d` as input parameters and returns a boolean value. Expected Time Complexity: `O(|nums|^2)` Expected Auxiliary Space: `O(|nums|)` Constraints: 1 ≤ |nums| ≤ 10^3 -10^4 ≤ nums[i] ≤ 10^4 1 ≤ n ≤ |nums| -10^4 ≤ d ≤ 10^4","solution":"def canFormAP(nums, n, d): Determines if there is a subsequence of length n that can be rearranged to form an arithmetic progression with common difference d. :param nums: List of integers :param n: Length of subsequence :param d: Common difference of AP :return: Boolean indicating if such a subsequence exists if n == 1: return True num_set = set(nums) for num in nums: count = 0 current = num # Try to form n elements AP starting with current number while current in num_set and count < n: current += d count += 1 if count == n: return True return False"},{"question":"You are given a string consisting of only two characters, \'A\' and \'B\'. Friends asked you to transform this string into a palindrome. In a single operation, you can pick any character from the string and replace it with another character. Each character replacement has a cost of 1. You need to find the minimum total cost of operations required to transform the string into a palindrome. -----Input----- Each test consists of multiple test cases. The first line contains an integer t (1 leq t leq 1000) — the number of test cases. The description of test cases follows. Each test case consists of a single line containing a string s (1 leq |s| leq 10^5) — a string consisting of \'A\' and \'B\' only. -----Output----- For each test case, output a single integer — the minimum total cost of operations needed to transform the string into a palindrome. -----Examples----- Input 3 AAB ABBA ABBABB Output 1 0 2 -----Note----- In the first test case, you can transform \'AAB\' into \'ABA\' by changing the third character to \'A\' at a cost of 1. In the second test case, the string \'ABBA\' is already a palindrome, so no operations are required, and the cost is 0. In the third test case, you need to change the second \'B\' to \'A\' and the fifth \'B\' to \'A\', transforming \'ABBABB\' into \'ABBAAB\' at a total cost of 2.","solution":"def min_cost_to_palindrome(t, test_cases): results = [] for s in test_cases: n = len(s) cost = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: cost += 1 results.append(cost) return results"},{"question":"You are given a circular track with n equally spaced checkpoints numbered from 1 to n in clockwise order. You need to run on this track starting from a specific checkpoint and finishing at another checkpoint. The running path should be a simple clockwise path without revisiting any checkpoints. Define the running distance between two checkpoints p_i and p_j (where 1 ≤ i ≤ j ≤ n) as the number of checkpoints visited, including the starting checkpoint p_i and the finishing checkpoint p_j. You need to calculate the minimum total running distance required to visit all checkpoints on the track if you are allowed to split them into multiple continuous running paths. For each subpath, you need to start and finish at specified checkpoints. For example, if you have three subpaths (p_1, p_5), (p_6, p_8), and (p_9, p_10) on a track with 10 checkpoints, the total running distance will be 5 + 3 + 2 = 10. Input The first line contains a single integer n (3 ≤ n ≤ 10^5) — the number of checkpoints on the track. The second line contains a single integer m (1 ≤ m ≤ n) — the number of subpaths. Each of the next m lines contains two integers x_i and y_i (1 ≤ x_i ≤ y_i ≤ n) — the starting and finishing checkpoints of a subpath. Output Output a single integer — the minimum total running distance to cover all checkpoints on the track. Constraints The union of the checkpoints in the given subpaths must cover all the checkpoints on the track. Each checkpoint appears in exactly one subpath. Examples Input 10 3 1 5 6 8 9 10 Output 10 Input 7 2 1 4 5 7 Output 7 Input 8 4 1 2 3 4 5 6 7 8 Output 8 Note In the first example, the running distances for the subpaths are as follows: - (1, 5): distance = 5 - (6, 8): distance = 3 - (9, 10): distance = 2 So, the minimum total running distance is 5 + 3 + 2 = 10. In the second example, the running distances for the subpaths are: - (1, 4): distance = 4 - (5, 7): distance = 3 So, the minimum total running distance is 4 + 3 = 7.","solution":"def calculate_min_running_distance(n, m, subpaths): total_distance = 0 for start, end in subpaths: total_distance += end - start + 1 return total_distance # Example usage: # n = 10 # m = 3 # subpaths = [(1, 5), (6, 8), (9, 10)] # print(calculate_min_running_distance(n, m, subpaths)) # Output: 10"},{"question":"You are given a string s consisting of lowercase Latin letters. Your task is to check if it is possible to reorder the characters in the string such that no two adjacent characters are the same. If it can be done, print the reordered string, otherwise print \\"NO\\". You have to answer q independent test cases. -----Input----- The first line of the input contains one integer q (1 le q le 1000) — the number of test cases. Then q test cases follow. The first line of each test case contains one integer n (1 le n le 100) — the length of s. The second line of each test case contains the string s. -----Output----- For each test case, print the reordered string if it is possible to reorder the characters such that no two adjacent characters are the same, or \\"NO\\" otherwise. If there are multiple valid arrangements, any of them will be accepted. -----Example----- Input 3 4 aabb 3 aaa 5 abcde Output abab NO abcde -----Note----- In the first test case of the example, we can reorder the string to \\"abab\\" where no two adjacent characters are the same. In the second test case of the example, it is not possible to reorder the string to satisfy the condition as all characters are the same. In the third test case of the example, the string is already ordered such that no two adjacent characters are the same.","solution":"from collections import Counter import heapq def can_reorder(q, test_cases): results = [] for n, s in test_cases: char_counts = Counter(s) max_heap = [(-count, char) for char, count in char_counts.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) count += 1 prev_count, prev_char = count, char if len(result) == n: results.append(\\"\\".join(result)) else: results.append(\\"NO\\") return results # Function to read input, process it, and output the results def main(): import sys input = sys.stdin.read data = input().split() q = int(data[0]) index = 1 test_cases = [] for _ in range(q): n = int(data[index]) s = data[index + 1] test_cases.append((n, s)) index += 2 results = can_reorder(q, test_cases) for result in results: print(result)"},{"question":"You are given a string S with length N. Determine if it is possible to find a non-empty prefix P and a non-empty suffix Suf such that P + Suf = S, where + denotes string concatenation. Additionally, the prefix P should have all unique characters (i.e., no character appears more than once). ----- Input ----- The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains a single string S. ----- Output ----- For each test case, print a single line containing the string \\"YES\\" if it is possible to find a prefix P and a suffix Suf as per the given conditions, or \\"NO\\" otherwise (without quotes). ----- Constraints ----- 1 ≤ T ≤ 10^{3} 2 ≤ N ≤ 10^{5} |S| = N S contains only lowercase English letters the sum of N over all test cases does not exceed 10^{6} ----- Sample Input 1 ----- 4 5 abcde 6 aabbcc 4 abac 3 xyz ----- Sample Output 1 ----- YES NO YES YES ----- Explanation 1 ----- Example case 1: We can choose \\"abcde\\" as P and an empty string as Suf or choose \\"abcd\\" as P and \\"e\\" as Suf. Both work since \\"abcde\\" as well as any of its prefixes are unique in characters. Example case 2: It is impossible to find a prefix with all unique characters since the characters in P must be non-repeated. Example case 3: We can choose \\"ab\\" as P and \\"ac\\" as Suf. The prefix \\"ab\\" consists of unique characters \'a\' and \'b\', and by adding the suffix \\"ac\\" we form the original string \\"abac\\". Example case 4: We can choose \\"xy\\" as P and \\"z\\" as Suf since both are non-empty and \\"xy\\" contains no repeating characters.","solution":"def can_find_prefix_suffix(n, s): Given a string s with length n, determine if it is possible to find a non-empty prefix P and a non-empty suffix Suf such that P + Suf = S, where P has all unique characters. seen = set() # Iterate through the string to check prefix uniqueness for i, ch in enumerate(s): if ch in seen: return \\"YES\\" seen.add(ch) # If we check all characters without duplications, then it\'s not possible to divide according to condition return \\"NO\\" def solve_string_cases(test_cases): Solves multiple test cases as described. results = [] for n, s in test_cases: result = can_find_prefix_suffix(n, s) results.append(result) return results"},{"question":"In a library system, books are categorized by their genres. Each book is represented by a unique numerical ID. The goal is to identify the largest subset of books where no two books belong to the same genre, and then sum their IDs to find the optimal subset sum. Given the genres of each book along with their IDs, you need to determine the largest possible sum of book IDs that can be achieved under this condition. -----Input:----- - First line will contain an integer T, the number of test cases. Then the test cases follow. - The first line of each test case will contain an integer M denoting the number of books. - The next M lines, each will contain a pair of integers, ID_j and G_j where ID_j is the book ID and G_j is the genre ID for the j^{th} book. -----Output:----- For each test case, output in a single line the maximum sum of book IDs such that no two books belong to the same genre. -----Constraints----- - 1 leq T leq 10^3 - 1 leq M leq 10^4 - 1 leq ID_j leq 10^6 - 1 leq G_j leq 10^4 -----Sample Input:----- 2 4 100 1 200 2 150 1 120 3 3 50 2 70 2 80 3 -----Sample Output:----- 420 80 -----EXPLANATION:----- For the first test case: - Books with IDs 100 and 150 belong to genre 1 (choose max 150) - Book with ID 200 belongs to genre 2 - Book with ID 120 belongs to genre 3 - Sum = 150 + 200 + 120 = 470 For the second test case: - Books with IDs 50 and 70 belong to the same genre 2 (choose max 70) - Book with ID 80 belongs to genre 3 - Sum = 70 + 80 = 150","solution":"def max_subset_sum(T, test_cases): results = [] for i in range(T): M = test_cases[i][0] books = test_cases[i][1] genre_to_max_id = {} for id, genre in books: if genre not in genre_to_max_id: genre_to_max_id[genre] = id else: genre_to_max_id[genre] = max(genre_to_max_id[genre], id) max_sum = sum(genre_to_max_id.values()) results.append(max_sum) return results # Example inputs for testing the function T = 2 test_cases = [ (4, [(100, 1), (200, 2), (150, 1), (120, 3)]), (3, [(50, 2), (70, 2), (80, 3)]) ] # Output should be [470, 150] print(max_subset_sum(T, test_cases))"},{"question":"A software company is designing a scheduling system for its developers. Given that each developer can only work on one task at a time and they have already been assigned a task list with specific start and end times, your task is to find the maximum number of tasks that can be scheduled non-overlapping for a single developer. You are given an array of tasks where each task is represented as a tuple (start_time, end_time). The start_time and end_time are in 24-hour format. Example tasks = [(1, 4), (3, 5), (0, 6), (5, 7), (8, 9), (5, 9)] The optimal selection of non-overlapping tasks would be [(1, 4), (5, 7), (8, 9)], which totals three tasks. Function Description Complete the function maxNonOverlappingTasks in the editor below. It should return an integer representing the maximum number of non-overlapping tasks that can be scheduled for a single developer. maxNonOverlappingTasks has the following parameter: - tasks: a list of tuples representing the start and end times of each task Returns - int: the maximum number of non-overlapping tasks that can be scheduled Input Format The first line contains n, the number of tasks. The second line contains 2n space-separated integers, representing the start and end times of each task. Constraints 1leq nleq10^5 0leq text{start_time}, text{end_time}leq 24 text{start_time} < text{end_time} Sample Input STDIN Function ----- -------- 6 tasks[] size n = 6 1 4 3 5 0 6 5 7 8 9 5 9 tasks = [(1, 4), (3, 5), (0, 6), (5, 7), (8, 9), (5, 9)] Sample Output 3 Explanation The optimal selection of non-overlapping tasks would be [(1, 4), (5, 7), (8, 9)], which totals three tasks.","solution":"def maxNonOverlappingTasks(tasks): Returns the maximum number of non-overlapping tasks that can be scheduled for a single developer. :param tasks: List of tuples representing the start and end times of each task :return: Integer representing the maximum number of non-overlapping tasks # Sort the tasks by their end times tasks.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: # If the current task starts after or when the last task ends, count it count += 1 last_end_time = end return count"},{"question":"In the Kingdom of Floratia, knights often engage in combat tournaments to showcase their skills. The king wants to determine the capabilities of his knights and has set up a special challenge. The kingdom has textbf{m} knights, each with a unique identifier and a skill score. The king wants to know how many knights can defeat a particular knight when they face each other one-on-one in combat. A knight with skill score a will defeat another knight with skill score b if a > b. You are given textit{m} initial knights and their skill scores. The king then issues several queries. Each query can be of two types: 1. \\"Add k s\\": Add a new knight with identifier k and skill score s to the list of knights. 2. \\"Query k\\": Determine the number of knights that can defeat the knight with identifier k. Implement the logic to process these queries efficiently to assist the king. # Input Format - The first line contains two integers describing the respective values of m (the initial number of knights) and q (the number of queries). - Each of the m subsequent lines contains an integer k (the identifier of the knight) and an integer s (the skill score of the knight). - Each of the q subsequent lines represents a query of either type \\"Add k s\\" or \\"Query k\\". # Constraints - 1 leq m, q leq 2 times 10^5 - 1 leq k leq 2 times 10^5 - 1 leq s leq 2 times 10^5 - Each knight has a unique identifier. # Output Format For each \\"Query k\\" command, print the number of knights that can defeat the knight with identifier k. # Sample Input ``` 5 4 1 150 2 200 3 50 4 175 5 100 Query 1 Add 6 220 Query 2 Query 6 ``` # Sample Output ``` 2 1 0 ``` # Explanation - Initially: - Knight 1 has a skill score of 150. - Knight 2 has a skill score of 200. - Knight 3 has a skill score of 50. - Knight 4 has a skill score of 175. - Knight 5 has a skill score of 100. **First Query: \\"Query 1\\"** - Knights with skill scores 200 and 175 can defeat knight 1 (skill score 150). Therefore, the output is 2. **Second Query: \\"Add 6 220\\"** - A new knight with identifier 6 and skill score 220 is added. **Third Query: \\"Query 2\\"** - Only knight 6 (skill score 220) can defeat knight 2 (skill score 200). Therefore, the output is 1. **Fourth Query: \\"Query 6\\"** - No knight can defeat knight 6 (skill score 220). Therefore, the output is 0.","solution":"import bisect def process_queries(m, q, knight_data, queries): # Store knight identifier to skill mapping knight_skills = {k: s for k, s in knight_data} # Store just the list of skill levels in sorted order sorted_skills = sorted([s for _, s in knight_data]) results = [] for query in queries: parts = query.split() if parts[0] == \\"Add\\": _, k, s = parts k = int(k) s = int(s) knight_skills[k] = s bisect.insort_left(sorted_skills, s) elif parts[0] == \\"Query\\": _, k = parts k = int(k) skill = knight_skills[k] # Find count of knights who have skill greater than the queried knight\'s skill count = len(sorted_skills) - bisect.bisect_right(sorted_skills, skill) results.append(count) return results"},{"question":"Sarah is planning a road trip and wants to visit as many cities as possible. She is given a list of cities along with the distance between each pair of cities. Sarah can start her trip from any city and she can only visit a city once. She wants to maximize the number of distinct cities she visits. Given the distances between cities, find the maximum number of distinct cities Sarah can visit if she starts from any city and moves sequentially to the nearest city that she hasn’t visited yet. -----Input----- The first line contains a single integer n (2 ≤ n ≤ 20) — the number of cities. Each of the following n lines contains n integers — the distance matrix where the j-th integer in the i-th line represents the distance from city i to city j. The distance between a city and itself is always 0. -----Output----- In the first line print the maximum number of distinct cities Sarah can visit. In the second line print the order of the cities Sarah visits. Cities are 1-indexed in the same order in which they appear in the input. If there are multiple answers, print any of them. -----Examples----- Input 3 0 10 15 10 0 12 15 12 0 Output 3 1 2 3 Input 4 0 3 1 10 3 0 5 7 1 5 0 6 10 7 6 0 Output 4 1 3 4 2 -----Note----- In the first example, Sarah can start at any city and visit all the cities since each pair of cities is directly reachable. In the second example, Sarah can start her trip at city 1, move to city 3 which is closest, then move to city 4 which is the next closest, and finally, move to city 2. This way, she visits all 4 cities in the order 1 -> 3 -> 4 -> 2.","solution":"def find_max_visitable_cities(n, distances): Finds the maximum number of distinct cities Sarah can visit by moving sequentially to the nearest unvisited city. Parameters: n (int): Number of cities distances (list of lists of ints): Distance matrix where distances[i][j] represents the distance from city i to city j Returns: tuple: (max_visitable_cities, visit_order) def visit(start): visited = [False] * n order = [] current_city = start while True: order.append(current_city + 1) visited[current_city] = True nearest_city = None min_distance = float(\'inf\') for city in range(n): if not visited[city] and 0 < distances[current_city][city] < min_distance: nearest_city = city min_distance = distances[current_city][city] if nearest_city is None: break current_city = nearest_city return len(order), order max_visits = 0 best_order = [] for i in range(n): visits, order = visit(i) if visits > max_visits: max_visits, best_order = visits, order return max_visits, best_order"},{"question":"Grandma Capa was fascinated by a new game she found online and decided to make her own version of it, called \\"Collecting Gems.\\" In this version, she has `n` gems placed on a line. Each gem can be one of `m` different colors, each represented by an integer from `1` to `m`. Grandma Capa wants to find the shortest contiguous subarray of gems that contains at least one gem of each color. However, if there is no such subarray, she should be informed too. Can you help Grandma Capa to find the length of the shortest such subarray for each test case? -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The description of each test case consists of two lines. The first line of each test case contains two integers n and m (1 le n, m le 100000) — the number of gems and the number of different colors. The second line of each test case contains `n` integers a_1, a_2, ldots, a_n (1 le a_i le m) — the colors of the gems on the line. It is guaranteed that the sum of `n` over all test cases does not exceed 1000000. -----Output----- For each test case, print the length of the shortest subarray that contains at least one gem of each color. If no such subarray exists, print `-1`. -----Examples----- Input 3 7 4 1 2 3 1 4 2 3 5 3 1 2 3 4 5 6 3 1 1 1 1 1 1 Output 4 3 -1 -----Note----- In the first test case, the shortest subarray containing all 4 colors is [1, 2, 3, 1, 4], which has length 4. In the second test case, the shortest subarray containing all 3 colors is [1, 2, 3], which has length 3. In the third test case, there is no subarray that contains all 3 colors.","solution":"def shortest_subarray_with_all_colors(n, m, colors): from collections import defaultdict unique_colors = set(colors) if len(unique_colors) < m: return -1 color_count = defaultdict(int) left = 0 min_length = float(\'inf\') for right in range(n): color_count[colors[right]] += 1 while len(color_count) == m: min_length = min(min_length, right - left + 1) color_count[colors[left]] -= 1 if color_count[colors[left]] == 0: del color_count[colors[left]] left += 1 return min_length if min_length != float(\'inf\') else -1 def solve_gem_collections(test_cases): results = [] for n, m, colors in test_cases: result = shortest_subarray_with_all_colors(n, m, colors) results.append(result) return results"},{"question":"**Transport Corporation** Transport Corporation is planning to automate its package delivery process. The company has a set of delivery trucks, and each truck has a limited carrying capacity in terms of weight. There are multiple packages to be delivered, each with a specific weight. The company\'s objective is to load the trucks in such a way that the total number of trucks used is minimized, while ensuring that the weight capacity of each truck is not exceeded. You are required to calculate the minimum number of trucks needed to transport all the packages. # Input - The first line contains a single integer `T` (1 ≤ T ≤ 10), the number of test cases. - For each test case: - The first line contains two integers `n` (1 ≤ n ≤ 1000) and `C` (1 ≤ C ≤ 10^9), where `n` is the number of packages and `C` is the carrying capacity of each truck. - The second line contains `n` integers `w1, w2, ..., wn` (1 ≤ wi ≤ C), where `wi` is the weight of the i-th package. # Output For each test case, output a single integer representing the minimum number of trucks required to transport all the packages. # Example Input ``` 2 5 200 100 100 100 100 100 6 100 90 30 60 10 40 70 ``` Output ``` 3 4 ``` # Explanation For the first test case, the packages can be distributed in the following way with minimum 3 trucks: - Truck 1: 100, 100 - Truck 2: 100, 100 - Truck 3: 100 For the second test case, the packages can be distributed in the following way with minimum 4 trucks: - Truck 1: 90, 10 - Truck 2: 60, 40 - Truck 3: 70 - Truck 4: 30","solution":"def min_trucks(t, cases): results = [] for case in cases: n, C = case[0] weights = sorted(case[1], reverse=True) trucks = 0 while weights: current_load = 0 for i in range(len(weights)-1, -1, -1): if current_load + weights[i] <= C: current_load += weights.pop(i) trucks += 1 results.append(trucks) return results # Example usage: # cases = [ # [(5, 200), [100, 100, 100, 100, 100]], # [(6, 100), [90, 30, 60, 10, 40, 70]] # ] # print(min_trucks(2, cases)) # Output: [3, 4]"},{"question":"Create a 2048 game solver in Python. The Game 2048 is a single-player sliding block puzzle game. The objective is to slide numbered tiles on a grid to combine them and create a tile with the number 2048. The game is played on a 4×4 grid, with tiles numbered in powers of 2 that merge when they touch a tile with the same number. Rules 1. The player can slide tiles in four directions (up, down, left, right). 2. When two tiles with the same number collide, they combine into one with their sum. 3. A new tile (2 or 4) appears at a random empty spot on the grid after every move. 4. The player wins when they create a tile with the number 2048. 5. The player loses when no more moves are possible. Task You are to create a basic Python solver that can take an initial game state and suggest the next optimal move. # Function Signature ```python def best_move(grid: List[List[int]]) -> str: pass ``` # Input A 2D list representing the 4x4 game board. Each element is an integer representing the value at the tile (0 for empty). Example: ```python [ [2, 4, 2, 0], [2, 0, 4, 2], [8, 16, 32, 0], [1024, 1024, 64, 0] ] ``` # Output Return a string representing the best move: `\'up\'`, `\'down\'`, `\'left\'`, or `\'right\'`. # Evaluation Your solution will be evaluated based on: 1. Correctness: The function correctly identifies and returns the best next move. 2. Efficiency: The function performs well and doesn’t take an excessive amount of time for each call. 3. Strategy: The function implements a reasonable strategy to move towards 2048. # Constraints - Assume the grid size will always be 4x4. - The function should handle the board status at any given time. # Example ```python grid = [ [2, 4, 2, 0], [2, 0, 4, 2], [8, 16, 32, 0], [1024, 1024, 64, 0] ] assert best_move(grid) in [\'up\', \'down\', \'left\', \'right\'] ```","solution":"import random from typing import List def evaluate_grid(grid): eval_score = 0 for row in grid: eval_score += sum(row) return eval_score def slide_left(grid): out_grid = [] for row in grid: new_row = [num for num in row if num != 0] new_row += [0] * (len(row) - len(new_row)) out_grid.append(new_row) return out_grid def merge_left(grid): out_grid = [] for row in grid: new_row = [] skip = False for i in range(len(row)): if skip: skip = False continue if i + 1 < len(row) and row[i] == row[i + 1]: new_row.append(2 * row[i]) skip = True else: new_row.append(row[i]) new_row += [0] * (len(row) - len(new_row)) out_grid.append(new_row) return out_grid def move_left(grid): moved = slide_left(grid) moved = merge_left(moved) moved = slide_left(moved) return moved def move_right(grid): rotated = [row[::-1] for row in grid] moved = move_left(rotated) return [row[::-1] for row in moved] def move_up(grid): rotated = list(zip(*grid)) moved = move_left([list(row) for row in rotated]) return [list(row) for row in zip(*moved)] def move_down(grid): rotated = list(zip(*grid))[::-1] moved = move_left([list(row) for row in rotated]) return [list(row) for row in zip(*moved[::-1])] def generate_successors(grid): successors = { \'up\': move_up(grid), \'down\': move_down(grid), \'left\': move_left(grid), \'right\': move_right(grid) } return successors def best_move(grid: List[List[int]]) -> str: moves = [\'up\', \'down\', \'left\', \'right\'] best_move = moves[0] max_evaluation = -1 successors = generate_successors(grid) for move, successor in successors.items(): eval_score = evaluate_grid(successor) if eval_score > max_evaluation: max_evaluation = eval_score best_move = move return best_move"},{"question":"You are working on a software project that requires generating unique identifiers for users. Each user is assigned a string identifier based on their name. The identifier construction follows specific rules: 1. The identifier consists of lowercase English letters only. 2. Digits (0-9) representing the total numerical value of the characters will be appended to the identifier. 3. Each character a to z is assigned a numeric value from 1 to 26, respectively (a = 1, b = 2, ..., z = 26). 4. The total numerical value of a user\'s name is the sum of the values of its characters. 5. The resulting identifier is the original name string followed by the total numerical value as a string. For instance, for the name \\"alice\\": - \'a\' = 1 - \'l\' = 12 - \'i\' = 9 - \'c\' = 3 - \'e\' = 5 - Total = 1 + 12 + 9 + 3 + 5 = 30 - The identifier becomes \\"alice30\\" Write a function that takes a list of user names and returns a list of their corresponding unique identifiers. The function should preserve the order of user names given as input. Function Signature: ```python def generate_identifiers(names: List[str]) -> List[str]: pass ``` -----Constraints----- - Each name only contains lowercase English letters. - 1 leq len(name) leq 100 - 1 leq len(names) leq 10^4 -----Input----- Input is given from Standard Input in the following format: - Line 1: Integer N, the number of names - The next N lines contain one name per line -----Output----- Output should be printed to Standard Output in the following format: - One line per name\'s identifier -----Sample Input----- 3 alice bob charlie -----Sample Output----- alice30 bob19 charlie56","solution":"from typing import List def generate_identifiers(names: List[str]) -> List[str]: def calculate_identifier(name: str) -> str: total_value = sum(map(lambda c: ord(c) - ord(\'a\') + 1, name)) return f\\"{name}{total_value}\\" return [calculate_identifier(name) for name in names]"},{"question":"Sarah, a software engineer, is working on a complex data processing task. In this task, she often needs to process a series of operations on a list of integers. Sarah decides to implement a custom data structure that supports the following operations efficiently: 1. Insert an integer at the end of the list. 2. Remove the integer at a specified position. 3. Multiply all elements of the list by a given multiplier. 4. Retrieve the sum of all elements in the list. She needs your help to implement this data structure. Your task is to create a class named `CustomList` that supports these operations. The operations should be as efficient as possible, given the constraints. You need to implement the following methods in the `CustomList` class: 1. `void insert(int x)`: Insert integer `x` at the end of the list. 2. `void remove(int position)`: Remove the integer at the specified `position`. If `position` is out of bounds, do nothing. 3. `void multiply(int multiplier)`: Multiply all elements of the list by `multiplier`. 4. `long long sum()`: Return the sum of all elements in the list. Input The input consists of multiple operations. Each operation is given in the following format: - `insert x`: Insert integer `x` at the end of the list. - `remove position`: Remove the integer at the specified `position`. - `multiply multiplier`: Multiply all elements of the list by `multiplier`. - `sum`: Output the sum of all elements in the list. The input is terminated by the command `exit`, which must not be processed. Output For each `sum` operation, output the sum of all elements in the list in one line. Constraints - The number of `insert` operations will not exceed 100,000. - The number of `remove` operations will not exceed 100,000. - The number of `multiply` operations will not exceed 100,000. - The number of `sum` operations will not exceed 100,000. - The values of the integers will be within the range of `[-10^9, 10^9]`. - The multipliers will be positive integers within the range of `[1, 10^6]`. Example Input ``` insert 1 insert 2 insert 3 sum multiply 2 sum remove 1 sum exit ``` Output ``` 6 12 8 ``` Explanation 1. After inserting 1, 2, 3: The list is `[1, 2, 3]`. The sum is `6`. 2. After multiplying by 2: The list is `[2, 4, 6]`. The sum is `12`. 3. After removing the element at position 1: The list is `[2, 6]`. The sum is `8`.","solution":"class CustomList: def __init__(self): self.list = [] self.total_sum = 0 def insert(self, x): self.list.append(x) self.total_sum += x def remove(self, position): if 0 <= position < len(self.list): self.total_sum -= self.list[position] del self.list[position] def multiply(self, multiplier): self.list = [x * multiplier for x in self.list] self.total_sum *= multiplier def sum(self): return self.total_sum"},{"question":"A series of numbers is defined as a sequence where each element depends on its previous element. Given a sequence defined by the formula: S_{i} = S_{i-1} + d_{i-1}, for i > 1 Where: - S_1 is the first element of the sequence. - d_i is the difference between the i-th and (i+1)-th number in another given array D. Specifically, d_{i-1} = D_{i} - D_{i-1}, for 2 ≤ i ≤ n. You are given an array D of size n and m queries to the sequence S. Each query provides an index i, you need to output S_{i}. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the size of the sequence. The second line contains n integers D_1, D_2, ..., D_n (0 ≤ D_{i} ≤ 10^9) — the elements of the array D. The third line contains one integer m (1 ≤ m ≤ 2·10^5) — the number of queries to process. Then m lines follow, each containing one integer i (1 ≤ i ≤ n) — the index for which you need to output S_{i}. -----Output----- Print m lines, each containing the element S_{i} for the respective query. -----Example----- Input 5 2 5 8 14 20 3 1 3 5 Output 2 15 49 -----Explanation----- For the given example: - S_1 = D_1 = 2 - S_2 = S_1 + (D_2 - D_1) = 2 + 3 = 5 - S_3 = S_2 + (D_3 - D_2) = 5 + 3 = 8 - S_4 = S_3 + (D_4 - D_3) = 8 + 6 = 14 - S_5 = S_4 + (D_5 - D_4) = 14 + 6 = 20 Hence, the sequence S = [2, 5, 8, 14, 20]. The respective outputs for the indices provided in the queries are 2 for index 1, 15 for index 3, and 49 for index 5.","solution":"def sequence_elements(n, D, queries): Given the size of the sequence, the array D and the queries, return the sequence elements for each query index. # Initialize the sequence S with the same length as D S = [0] * n # The first element of S is always the first element of D S[0] = D[0] # Calculate the remaining elements of S using the given formula for i in range(1, n): S[i] = S[i-1] + (D[i] - D[i-1]) # Generate the list of results based on the queries result = [S[i-1] for i in queries] return result # Example usage n = 5 D = [2, 5, 8, 14, 20] queries = [1, 3, 5] print(sequence_elements(n, D, queries)) # Output should be [2, 8, 20]"},{"question":"A storyteller company called \\"Chronicles\\" is launching a new online reading platform. They want to categorize readers into \\"STORY LOVER\\" and \\"CASUAL READER\\" based on the number of stories they have read on the platform in the past year. A reader is considered a \\"STORY LOVER\\" if the number of stories they have read in a month is greater than or equal to 10, and \\"CASUAL READER\\" otherwise. If a reader is classified as a \\"STORY LOVER\\" for more months in a year than they are classified as a \\"CASUAL READER\\", then the reader is deemed a \\"LOYAL READER\\"; otherwise, the reader is deemed a \\"REGULAR READER\\". Given the number of stories read by a reader in each month over a year, your task is to determine whether the reader is classified as \\"LOYAL READER\\" or \\"REGULAR READER\\". ------ Input Format ------ The input consists of 12 space-separated integers representing the number of stories read by a reader in each month of the past year. ------ Output Format ------ Generate one line of output saying \\"LOYAL READER\\" if the reader satisfies the conditions for being classified as such, or \\"REGULAR READER\\" otherwise (quotes for clarity). ------ Constraints ------ 0 ≤ stories_read_per_month_i ≤ 100 ------ Sample Input 1 ------ 9 11 5 20 18 7 13 9 6 10 12 8 ------ Sample Output 1 ------ REGULAR READER ------ Explanation 1 ------ The reader is classified as a \\"STORY LOVER\\" for the months where they read 11, 20, 18, 13, 10, and 12 stories. This gives 6 months as \\"STORY LOVER\\" months and 6 months as \\"CASUAL READER\\" months. Since the number of \\"STORY LOVER\\" months is not greater than the number of \\"CASUAL READER\\" months, the output is \\"REGULAR READER\\". ------ Sample Input 2 ------ 10 10 10 10 10 10 10 10 10 10 10 10 ------ Sample Output 2 ------ LOYAL READER ------ Explanation 2 ------ The reader is classified as a \\"STORY LOVER\\" for all 12 months since they read exactly 10 stories each month, making it greater than or equal to 10. Thus, the number of \\"STORY LOVER\\" months (12) is greater than the number of \\"CASUAL READER\\" months (0), resulting in the output \\"LOYAL READER\\".","solution":"def reader_classification(stories_per_month): This function takes a list of 12 integers representing the number of stories read each month, and returns \'LOYAL READER\' if the reader is classified as such and \'REGULAR READER\' otherwise. story_lover_months = sum(1 for stories in stories_per_month if stories >= 10) casual_reader_months = 12 - story_lover_months if story_lover_months > casual_reader_months: return \\"LOYAL READER\\" else: return \\"REGULAR READER\\""},{"question":"Given a list of students, each represented by their name and three scores in different subjects, you are to calculate each student\'s average score and print their names in sorted order of their average scores. If two students have the same average score, maintain their relative input order in the sorted list. You need to implement a function that follows these requirements: # Function Description Complete the `averageScores` function that should calculate and print the sorted names of the students based on their average scores. # Input - The first line contains an integer `n` -- the number of students. - The next `n` lines each contain a student\'s name (a string) and their scores in three subjects (three integers, space-separated). # Output - Print the names of the students in ascending order of their average scores. If there is a tie in the average scores, maintain the original order in which the student names appeared in the input. # Constraints - ( 1 leq n leq 10^5 ) - The student\'s name length will be between 1 and 100 characters. - Scores are integers between 0 and 100 (inclusive). # Examples Input ``` 5 Alice 80 90 100 Bob 70 80 90 Charlie 90 90 90 David 60 70 80 Eva 90 100 90 ``` Output ``` David Bob Alice Eva Charlie ``` Explanation Averages are calculated as: - Alice: ( (80 + 90 + 100) / 3 = 90.0 ) - Bob: ( (70 + 80 + 90) / 3 = 80.0 ) - Charlie: ( (90 + 90 + 90) / 3 = 90.0 ) - David: ( (60 + 70 + 80) / 3 = 70.0 ) - Eva: ( (90 + 100 + 90) / 3 = 93.33 ) The sorted order by average score is David, Bob, Alice, Eva, Charlie. Complete the `averageScores` function to meet the specifications mentioned. ```python def averageScores(student_data): import sys input = sys.stdin.read data = input().strip().split(\\"n\\") n = int(data[0]) students = [] for i in range(1, n + 1): parts = data[i].split() name = parts[0] scores = list(map(int, parts[1:])) average_score = sum(scores) / len(scores) students.append((average_score, i, name)) students.sort(key=lambda x: (x[0], x[1])) for student in students: print(student[2]) ``` You may assume the input data and function calling is provided appropriately in the environment where the function will run.","solution":"def averageScores(student_data): Prints the names of students sorted by their average score in ascending order. If two students have the same average score, maintain their relative input order. Parameters: student_data (list): A list of strings, where the first element is the number of students and each subsequent element represents a student\'s name followed by three scores in different subjects. Returns: None: Prints the sorted student names. n = int(student_data[0]) students = [] for i in range(1, n + 1): parts = student_data[i].split() name = parts[0] scores = list(map(int, parts[1:])) average_score = sum(scores) / len(scores) students.append((average_score, i, name)) # Sort by average score and then by their original index to maintain relative order for ties. students.sort(key=lambda x: (x[0], x[1])) for student in students: print(student[2])"},{"question":"You have n coins each with two sides heads and tails. The coins are all placed on a table in a line initially showing heads. You are required to perform a series of operations on the coins. In one operation, you must flip exactly one coin, changing it from heads to tails or from tails to heads. After you perform exactly k operations, you need to count the maximum number of consecutive heads that can be present in the lineup of coins. Given the number of coins `n` and the number of operations `k`, your task is to find the maximum number of consecutive heads that can occur after exactly `k` flips. ----- Input Format ----- - The first line of input will contain a single integer t, denoting the number of test cases. - Each of the next t lines contains two space-separated integers n and k, where `n` is the number of coins and `k` is the number of flips. ----- Output Format ----- For each test case, output the maximum number of consecutive heads that can be present in the lineup of coins after exactly `k` operations. ----- Constraints ----- 1 ≤ t ≤ 10^5 1 ≤ n ≤ 10^6 0 ≤ k ≤ n ----- Sample Input ----- 3 5 1 5 2 5 0 ----- Sample Output ----- 4 3 5 ----- Explanation ----- Test case 1: - Initially: H H H H H - After 1 flip: get one of: H H H H T, H H H T H, etc. - Maximum consecutive heads possible: 4 Test case 2: - Initially: H H H H H - After 2 flips: get one of: H H T T H, T H H H T, etc. - Maximum consecutive heads possible: 3 Test case 3: - Initially: H H H H H - After 0 flips: H H H H H remains the same. - Maximum consecutive heads possible: 5","solution":"def max_consecutive_heads(n, k): Compute the maximum number of consecutive heads that can be present after performing exactly k flips. return min(n, n - k) def process_test_cases(test_cases): Process a list of test cases and return the results in the format required. results = [] for n, k in test_cases: results.append(max_consecutive_heads(n, k)) return results"},{"question":"Julian has recently started experimenting with musical patterns and rhythms. He has come up with an interesting way to generate rhythmic sequences using numbers. Julian considers a rhythmic sequence to be a list of integers where every element is represented by its occurrence in the sequence, modulo k. He wants to generate such sequences for his musical compositions. Formally, given integers n and k, generate a list of n integers where the i-th integer of the list is (i mod k) + 1. -----Input----- The first and only line of input contains two space-separated integers, n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100). -----Output----- Output n space-separated integers forming the desired rhythmic sequence. -----Examples----- Input 10 3 Output 1 2 3 1 2 3 1 2 3 1 Input 7 5 Output 1 2 3 4 5 1 2 -----Note----- For the first example, the sequence repeats every 3 elements, so the 4th element is the same as the 1st element, the 5th element is the same as the 2nd element, and so on. For the second example, the sequence repeats every 5 elements, so the 6th element is the same as the 1st element, and the 7th element is the same as the 2nd element.","solution":"def generate_rhythmic_sequence(n, k): Generates a rhythmic sequence of length n where every i-th integer is (i % k) + 1. return [(i % k) + 1 for i in range(n)]"},{"question":"Write a function called `kebabCase` that converts a given string into kebab-case. The function should take a string as input and return the string formatted in kebab-case, which is all lowercase with words separated by hyphens. Any punctuation and leading/trailing spaces should be removed from the resulting string. For example: ``` kebabCase(\\"Hello, World!\\") should return \\"hello-world\\" kebabCase(\\" Python is fun!\\") should return \\"python-is-fun\\" ```","solution":"import re def kebabCase(s): Converts a given string into kebab-case. Args: s (str): Input string to be converted. Returns: str: Converted string in kebab-case. # Remove leading/trailing spaces and punctuation s = s.strip() s = re.sub(r\'[^ws]\', \'\', s) # Convert to lowercase and replace spaces with hyphens s = re.sub(r\'s+\', \'-\', s.lower()) return s"},{"question":"Write a function `find_all_ancestors` to solve the following problem: You are given a list of parent-child relationships, each presented as a tuple (parent, child). Your task is to write a function that returns a set of all ancestors for a given node. The ancestors of a node are all the nodes in the tree that are higher up than the given node (i.e., the nodes on the path from the given node to the root). If the node has no ancestors, return an empty set. In the case where the given node does not exist in the tree, return an empty set. # Function Signature ```python def find_all_ancestors(node: str, relationships: List[Tuple[str, str]]) -> Set[str]: pass ``` # Example ```python test_relationships = [ (\'grandparent\', \'parent\'), (\'parent\', \'child\'), (\'grandparent\', \'uncle\'), (\'uncle\', \'cousin\') ] assert find_all_ancestors(\'child\', test_relationships) == {\'grandparent\', \'parent\'} assert find_all_ancestors(\'cousin\', test_relationships) == {\'grandparent\', \'uncle\'} assert find_all_ancestors(\'parent\', test_relationships) == {\'grandparent\'} assert find_all_ancestors(\'grandparent\', test_relationships) == set() assert find_all_ancestors(\'not_in_tree\', test_relationships) == set() ``` # Notes - You can assume that the relationships uniquely define the tree (i.e., there are no cycles and each child has exactly one parent). - The relationships list can be empty, in which case the ancestors set should also be empty for any input node.","solution":"from typing import List, Tuple, Set def find_all_ancestors(node: str, relationships: List[Tuple[str, str]]) -> Set[str]: Returns a set of all ancestors for a given node. parent_dict = {} # Create a dictionary for child to parent relationship for parent, child in relationships: parent_dict[child] = parent # Function to trace ancestors recursively def get_ancestors(n): if n not in parent_dict: return set() parent = parent_dict[n] return {parent} | get_ancestors(parent) return get_ancestors(node)"},{"question":"Given an array of strings containing words and digits, write a function that returns the product of the lengths of all the words, ignoring the digits. For example, for the input array `[\\"apple\\", \\"5\\", \\"banana\\", \\"orange\\", \\"8\\"]`, the output should be `30` as the product of the lengths of \\"apple\\" (5), \\"banana\\" (6), and \\"orange\\" (6) is `5 * 6 * 6 = 180`.","solution":"def product_of_lengths(words): Returns the product of the lengths of the words in the given array, ignoring the digits. :param words: List of strings containing words and digits :return: Product of the lengths of all the words product = 1 for word in words: if word.isalpha(): # Check if the string contains only alphabetic characters product *= len(word) return product"},{"question":"A \\"Word Ladder\\" is a sequence of words formed by changing only one letter at a time, where each word is a valid word in a given dictionary. Your task is to determine the shortest transformation sequence from a start word to an end word. If no such transformation is possible, return an empty list. You are given a start word `beginWord`, an end word `endWord`, and a dictionary `wordList` which contains all valid words. All words have the same length. For example, given the start word `\\"hit\\"`, the end word `\\"cog\\"`, and the dictionary `[\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"]`: * Transform \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\" * The shortest transformation sequence is `[\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"]` If the dictionary is `[\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"]`, it\'s impossible to transform from `\\"hit\\"` to `\\"cog\\"`, so return an empty list: `[]`. ```python def word_ladder(beginWord, endWord, wordList): # Your code here # Example usage: print(word_ladder(\\"hit\\", \\"cog\\", [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"])) # Output: [\\"hit\\", \\"hot\\", \\"dot\\", \\"dog\\", \\"cog\\"] print(word_ladder(\\"hit\\", \\"cog\\", [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"])) # Output: [] ```","solution":"from collections import deque def word_ladder(beginWord, endWord, wordList): Returns the shortest transformation sequence from beginWord to endWord using the wordList. If no sequence is possible, returns an empty list. if endWord not in wordList: return [] wordList = set(wordList) queue = deque([[beginWord]]) visited = set([beginWord]) while queue: current_path = queue.popleft() current_word = current_path[-1] if current_word == endWord: return current_path # Generate all possible transformations by changing one letter at a time for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in wordList and next_word not in visited: visited.add(next_word) queue.append(current_path + [next_word]) return []"},{"question":"Nina is participating in a rope stretching competition. There are n ropes, each with a different length. She wants to select a subset of these ropes such that the total length of the selected ropes is exactly equal to m meters. Help Nina to determine if it is possible to select such a subset of the ropes. If it is possible, output “YES”, otherwise output “NO”. -----Input----- The first line contains two integers n and m (1 ≤ n ≤ 20, 1 ≤ m ≤ 10^9). The second line contains n integers l_1, l_2, ..., l_n (1 ≤ l_i ≤ 10^9), where l_i is the length of the i-th rope. -----Output----- Output “YES” if there is a subset of ropes such that their total length is exactly equal to m meters, otherwise output “NO”. -----Examples----- Input 4 10 2 3 7 9 Output YES Input 3 15 1 5 10 Output YES Input 3 11 2 4 8 Output NO -----Note----- In the first sample, Nina can select the ropes of lengths 3 and 7, which sum up to 10 meters. In the second sample, Nina can select all three ropes, which sum up to 15 meters. In the third sample, there is no subset of the given ropes that sums up to 11 meters.","solution":"def can_select_ropes(n, m, lengths): Determines if there is a subset of ropes such that their total length is exactly equal to m meters. :param n: Number of ropes (integer). :param m: Target length (integer). :param lengths: List of rope lengths (list of integers). :return: \\"YES\\" if there exists such a subset, otherwise \\"NO\\". # Using bit masking to check all possible subsets for i in range(1 << n): total_length = 0 for j in range(n): if i & (1 << j): # Include the j-th rope in the subset total_length += lengths[j] if total_length == m: return \\"YES\\" return \\"NO\\""},{"question":"A cargo ship is trying to transfer goods from one port to another. However, the waters are perilous and the ship burns fuel at a constant rate of 1 liter per kilometer. The ship\'s fuel tank has a maximum capacity, and it can only carry a certain amount of fuel at any given time. Fortunately, there are several fuel depots located along the route where the ship can refill its tank. The ship can only travel if it has enough fuel to reach its destination or the next depot. The goal is to determine the minimum amount of fuel required to reach the destination from the starting port, considering the fuel depots available along the way. The ship starts at the first port with a full tank of fuel. Each depot has an infinite supply of fuel, and the ship can refuel instantly to its maximum tank capacity at any depot. The route is described by a series of distances between ports and depots. Write a program to find the minimum fuel required to safely reach the destination. -----Input----- The first line of input contains three integers N, D, T – the number of depots (excluding the start and destination ports), the distance in kilometers between the starting port and the destination port and finally the maximum fuel capacity of the ship in liters. All integers are positive and at most 1000000. The next line contains N integers separated by spaces, representing the distances of the depots from the starting port in kilometers. These distances are given in non-decreasing order and are at most D. -----Output----- Output one line with one number, the minimum amount of fuel in liters required to reach the destination port from the starting port. -----Examples----- Sample Input: 2 1000 500 300 600 Sample Output: 1000","solution":"def min_fuel_to_destination(num_depots, total_distance, tank_capacity, depot_distances): Determine the minimum fuel required to reach the destination. :param num_depots: Number of depots (excluding the source and destination). :param total_distance: The distance between the start port and the destination port. :param tank_capacity: The maximum fuel capacity of the ship. :param depot_distances: Distances of each depot from the starting port. :return: Minimum fuel required to reach the destination. from bisect import bisect_right depots = depot_distances + [total_distance] current_pos = 0 fuel_used = 0 for next_depot in depots: if next_depot - current_pos > tank_capacity: return -1 # If the next depot is unreachable, return -1 indicating it\'s not possible. fuel_used += next_depot - current_pos current_pos = next_depot return max(fuel_used, tank_capacity)"},{"question":"You are given an array of `N` integers, `A1, A2, ..., AN`. Your task is to find the smallest integer `X` such that every element in the array can be made greater than or equal to `X` by adding some number of bits (0 or more) to their binary representation or leaving them as they are. Note that you are not allowed to change the order of the elements. In other words, you need to find the smallest `X` for which it is possible to insert zero or more bits at different positions into any of the input integers’ binary representations such that every integer is greater than or equal to `X`. -----Input----- - The first line of input contains a single integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers A1, A2, ..., AN. -----Output----- For each test case, output the smallest integer `X`. -----Constraints----- - 1 le T le 1,000 - 1 le N le 10^5 - 1 le Ai le 10^9 - The sum of N over all test cases does not exceed 2 cdot 10^5 -----Example Input----- 3 3 1 3 5 4 8 2 6 7 2 4 2 -----Example Output----- 8 15 4 -----Explanation----- Example case 1: Every integer can be transformed to be at least 8 by padding bits. For example, 1 can become 8 (`1000`), 3 can become 11 (`1011`), and 5 can become 13 (`1101`). The smallest such integer is thus 8. Example case 2: The given numbers are 8, 2, 6, and 7. Similarly, the smallest integer X such that every number can be made greater is 15. For instance, 8 can be transformed to 15 (`1111`), 2 can become 15 (`1111`), and so on. So, the smallest such integer is 15.","solution":"def smallest_required_number(n, arr): Returns the smallest integer X such that every element in the array can be made greater than or equal to X by adding some number of bits (or leaving it as is) to each number\'s binary representation. max_val = max(arr) x = 1 while x <= max_val: x = (x << 1) | 1 return x def process_input(input_lines): Processes the input lines and returns the results for each test case. results = [] index = 0 t = int(input_lines[index]) index += 1 for _ in range(t): n = int(input_lines[index]) index += 1 arr = list(map(int, input_lines[index].split())) index += 1 results.append(smallest_required_number(n, arr)) return results"},{"question":"Write a function that takes an integer as input and returns the reverse of that integer. If the integer is negative, the reversed integer should also be negative. Examples: ```python reverse_integer(123) # returns 321 reverse_integer(-456) # returns -654 reverse_integer(100) # returns 1 ```","solution":"def reverse_integer(n): Reverses the digits of an integer. If the integer is negative, the reversed integer will also be negative. Parameters: n (int): The integer to be reversed. Returns: int: The reversed integer. str_n = str(n) if str_n[0] == \'-\': reversed_str = \'-\' + str_n[:0:-1] else: reversed_str = str_n[::-1] return int(reversed_str)"},{"question":"A string S is given, which consists of lowercase English alphabet letters. We define a \\"palindromic substring\\" as a substring which reads the same forwards and backwards. For example, \\"aba\\", \\"racecar\\", and \\"b\\" are palindromic substrings. You are required to write a program that finds the longest palindromic substring within the given string S. If there are multiple longest palindromic substrings with the same length, return the one which appears first in the original string. Input The input is given in the following format. S Where S is a non-empty string consisting of lowercase English alphabet letters (1 ≤ |S| ≤ 104). Output Output a single line containing the longest palindromic substring. If there are multiple substrings with the same maximum length, return the one which appears first in the string S. Examples Input babad Output bab Input cbbd Output bb","solution":"def longest_palindromic_substring(S): Returns the longest palindromic substring of the given string. n = len(S) if n == 0: return \\"\\" longest = S[0] # Function to expand around center def expand_around_center(left, right): while left >= 0 and right < n and S[left] == S[right]: left -= 1 right += 1 return S[left + 1:right] for i in range(n): # Odd length palindromes substring1 = expand_around_center(i, i) # Even length palindromes substring2 = expand_around_center(i, i + 1) # Choose the longest among found palindromic substrings longer_substring = substring1 if len(substring1) > len(substring2) else substring2 if len(longer_substring) > len(longest): longest = longer_substring return longest"},{"question":"Lily is organizing a marathon and needs to strategically place water stations along the track to ensure all runners are well-hydrated. The marathon track can be represented as a straight line of `N` kilometers, from `0` to `N-1`. Lily has `M` water stations to place along the track. She wants to maximize the shortest distance any runner has to travel from any kilometer on the track to reach a water station. Your task is to help Lily determine the optimal placement of the water stations to achieve the maximum possible shortest distance to the closest water station for any kilometer on the track. Constraints: * 2 ≤ N ≤ 10^6 * 1 ≤ M ≤ N Input Input is given from Standard Input in the following format: ``` N M ``` Output Print the maximum possible shortest distance to the closest water station for any kilometer on the track. Example Input ``` 10 3 ``` Output ``` 3 ``` Input ``` 15 5 ``` Output ``` 3 ``` Input ``` 5 2 ``` Output ``` 2 ``` Note: In the first example, the optimal way to place the 3 water stations along a 10-kilometer track is at kilometer 0, 4, and 8, which ensures that runners never have to travel more than 3 kilometers to reach a water station.","solution":"def max_shortest_distance(N, M): Returns the maximum possible shortest distance to the closest water station for any kilometer on the track of length N with M water stations. # The maximum shortest distance to a water station that can be achieved # with M water stations is essentially the minimum length of the segment # of track between two water stations. import math # We need to determine the maximum possible distance between two adjacent water stations. # This is done by evenly distributing M water stations along the N kilometers track. return math.ceil(N / M)"},{"question":"Given two integers boldsymbol{n} and boldsymbol{m} representing the number of rows and columns of a matrix, create a matrix of size n times m such that each cell in the matrix contains a value equal to the sum of its row index and column index (both 0-indexed). Write a function that reads the integers from STDIN and prints the resultant matrix. The rows of the matrix should be printed in a way that each row contains its elements as space-separated values. Example n=3 m=4 Print the following: 0 1 2 3 1 2 3 4 2 3 4 5 Input Format The first line contains the integer boldsymbol{n}. The second line contains the integer boldsymbol{m}. Constraints 1leq nleq100 1leq mleq100 Output Format Print the resultant matrix rows as explained above. Sample Input 0 2 3 Sample Output 0 0 1 2 1 2 3 Explanation 0 For an input of 2 rows and 3 columns, the resultant matrix will be: ``` 0+0 0+1 0+2 1+0 1+1 1+2 ``` Which simplifies to: ``` 0 1 2 1 2 3 ```","solution":"def create_matrix(n, m): Creates a matrix of size n x m where each cell contains the sum of its row and column indices. Parameters: n (int): Number of rows m (int): Number of columns Returns: List[List[int]]: A 2D list representing the matrix matrix = [] for i in range(n): row = [] for j in range(m): row.append(i + j) matrix.append(row) return matrix def print_matrix(matrix): Prints the matrix row by row with elements separated by space. Parameters: matrix (List[List[int]]): The matrix to print for row in matrix: print(\\" \\".join(map(str, row)))"},{"question":"Given an array of integers `arr` and an integer `sum`, find all unique combinations in `arr` where the candidate numbers sum to `sum`. The same repeated number may be chosen from `arr` an unlimited number of times. Note: 1. All numbers (including `arr` and the target `sum`) will be positive integers. 2. The solution set must not contain duplicate combinations. 3. The order of the combinations does not matter. Example 1: Input: arr = [2, 3, 6, 7], sum = 7 Output: [ [2, 2, 3], [7] ] Example 2: Input: arr = [2, 3, 5], sum = 8 Output: [ [2, 2, 2, 2], [2, 3, 3], [3, 5] ] Your Task: You don\'t need to read input or print anything. Your task is to complete the function `combinationSum` which takes an array of integers `arr` and an integer `sum` as input and returns a list of lists of integers where each list represents a unique combination that adds up to `sum`. Expected Time Complexity: O(2^N) (where N is the target `sum`) Expected Auxiliary Space: O(K * X) (where K is the average length of each combination, and X is the number of such combinations) Constraints: - 1 <= arr.length <= 20 - 1 <= arr[i] <= 50 - 1 <= sum <= 500","solution":"def combinationSum(arr, target): def backtrack(remain, comb, start): if remain == 0: result.append(list(comb)) return elif remain < 0: return for i in range(start, len(arr)): comb.append(arr[i]) backtrack(remain - arr[i], comb, i) comb.pop() result = [] arr.sort() backtrack(target, [], 0) return result"},{"question":"You\'re managing a fleet of drones. Each drone has a battery level that can be represented as an integer between 0 and 100, inclusive. You want to perform certain operations on the fleet to monitor and manage the battery levels. The operations you need to perform are: * 1 L R V. Add the value V to each drone\'s battery in the range from L to R, inclusive. If the resulting battery level exceeds 100, cap it at 100. If it goes below 0, cap it at 0. * 2 L R. Calculate the sum of battery levels for drones in the range from L to R, inclusive, and return the average battery level rounded down to the nearest integer. Input - The first line contains two integers N Q (1 ≤ N, Q ≤ 100 000), representing the number of drones and the number of operations, respectively. - The next line contains N integers, each between 0 and 100 inclusive, representing the initial battery levels of the drones. - The following Q lines each contain a command of one of the two previously mentioned types: * 1 L R V (1 ≤ L ≤ R ≤ N, -100 ≤ V ≤ 100) * 2 L R (1 ≤ L ≤ R ≤ N) Output For each command of the second type, output the average battery level of drones in the specified range, rounded down to the nearest integer, in a new line. Example Input: ``` 5 3 50 60 70 80 90 1 1 3 10 2 1 5 2 2 4 ``` Output: ``` 66 66 ``` Note Explanation for the sample input/output #1 - Initially, the battery levels are [50, 60, 70, 80, 90]. - After the first command (1 1 3 10), the battery levels are modified to [60, 70, 80, 80, 90]. - The second command (2 1 5) calculates the average battery level from index 1 to 5, which is (60+70+80+80+90) / 5 = 380 / 5 = 76. - The third command (2 2 4) calculates the average battery level from index 2 to 4, which is (70+80+80) / 3 = 230 / 3 = 66.","solution":"def manage_fleet_operations(n, q, battery_levels, operations): def add_value_to_range(batteries, l, r, v): for i in range(l-1, r): batteries[i] = min(100, max(0, batteries[i] + v)) def average_battery_in_range(batteries, l, r): total = sum(batteries[l-1:r]) return total // (r - l + 1) results = [] for op in operations: if op[0] == 1: _, l, r, v = op add_value_to_range(battery_levels, l, r, v) elif op[0] == 2: _, l, r = op avg = average_battery_in_range(battery_levels, l, r) results.append(avg) return results"},{"question":"Dora is studying different sequences in mathematics class, and she gets particularly interested in arithmetic progressions (AP). An arithmetic progression is a sequence of numbers in which the difference of any two successive members is a constant. She decides to sabotage her math notebook where the teacher had written an arithmetic progression. The sequence that Dora ends up with has n distinct integers b1, b2, ..., bn (1 ≤ bi ≤ n) and exactly one of these elements has been replaced by the integer -1. Dora remembers that one of these sequences was an arithmetic progression and she wants to restore it. Your task is to help Dora by finding out how many valid arithmetic progressions she can form by replacing the -1 with an element between 1 and n, such that the difference between consecutive elements is the same. Input: The first line contains an integer n (3 ≤ n ≤ 2000), representing the number of elements in the sequence Dora ends up with. The second line contains n integers, representing Dora\'s sequence with exactly one element replaced by -1. It is guaranteed that there is at least one suitable solution. Output: Output a single integer, the number of ways Dora could restore the arithmetic progression. Example Input: 5 1 -1 3 4 5 Example Output: 1 Explanation: In the first test example, there is only one way to restore the arithmetic progression: replacing -1 with 2, since the common difference is 1 (i.e., [1, 2, 3, 4, 5]). Note: For any given sequence, you need to determine if there exists an arithmetic progression that can be restored by replacing the -1 with an integer between 1 and n.","solution":"def count_valid_ap(n, sequence): possible_values = set(range(1, n + 1)) - set(sequence) valid_ways = 0 for value in possible_values: new_sequence = [value if x == -1 else x for x in sequence] if is_arithmetic_progression(new_sequence): valid_ways += 1 return valid_ways def is_arithmetic_progression(sequence): differences = [sequence[i+1] - sequence[i] for i in range(len(sequence) - 1)] return len(set(differences)) == 1 # Example usage # n = 5 # sequence = [1, -1, 3, 4, 5] # print(count_valid_ap(n, sequence)) # Output: 1"},{"question":"Translate the given 12-hour clock time string into its corresponding words representation for hours and minutes. The input string will be in the format \\"hh:mm am/pm\\". Example 1: Input: \\"03:15 pm\\" Output: \\"Three Fifteen PM\\" Example 2: Input: \\"12:45 am\\" Output: \\"Twelve Forty Five AM\\" Example 3: Input: \\"06:00 am\\" Output: \\"Six O\'Clock AM\\" Example 4: Input: \\"11:30 pm\\" Output: \\"Eleven Thirty PM\\"","solution":"def time_to_words(time_str): Converts a 12-hour clock time string (hh:mm am/pm) into its corresponding words representation. Args: - time_str (str): The time string to be converted. Returns: - str: The word representation of the time. num_to_words = { \'00\': \\"O\'Clock\\", \'01\': \'One\', \'02\': \'Two\', \'03\': \'Three\', \'04\': \'Four\', \'05\': \'Five\', \'06\': \'Six\', \'07\': \'Seven\', \'08\': \'Eight\', \'09\': \'Nine\', \'10\': \'Ten\', \'11\': \'Eleven\', \'12\': \'Twelve\', \'13\': \'Thirteen\', \'14\': \'Fourteen\', \'15\': \'Fifteen\', \'16\': \'Sixteen\', \'17\': \'Seventeen\', \'18\': \'Eighteen\', \'19\': \'Nineteen\', \'20\': \'Twenty\', \'21\': \'Twenty One\', \'22\': \'Twenty Two\', \'23\': \'Twenty Three\', \'24\': \'Twenty Four\', \'25\': \'Twenty Five\', \'26\': \'Twenty Six\', \'27\': \'Twenty Seven\', \'28\': \'Twenty Eight\', \'29\': \'Twenty Nine\', \'30\': \'Thirty\', \'31\': \'Thirty One\', \'32\': \'Thirty Two\', \'33\': \'Thirty Three\', \'34\': \'Thirty Four\', \'35\': \'Thirty Five\', \'36\': \'Thirty Six\', \'37\': \'Thirty Seven\', \'38\': \'Thirty Eight\', \'39\': \'Thirty Nine\', \'40\': \'Forty\', \'41\': \'Forty One\', \'42\': \'Forty Two\', \'43\': \'Forty Three\', \'44\': \'Forty Four\', \'45\': \'Forty Five\', \'46\': \'Forty Six\', \'47\': \'Forty Seven\', \'48\': \'Forty Eight\', \'49\': \'Forty Nine\', \'50\': \'Fifty\', \'51\': \'Fifty One\', \'52\': \'Fifty Two\', \'53\': \'Fifty Three\', \'54\': \'Fifty Four\', \'55\': \'Fifty Five\', \'56\': \'Fifty Six\', \'57\': \'Fifty Seven\', \'58\': \'Fifty Eight\', \'59\': \'Fifty Nine\' } time_parts = time_str.split() time, period = time_parts[0], time_parts[1] hours, minutes = time.split(\':\') hour_word = num_to_words[hours] if minutes == \'00\': minute_word = \\"O\'Clock\\" else: minute_word = num_to_words[minutes] return f\\"{hour_word} {minute_word} {period.upper()}\\""},{"question":"Write a function that takes a list of integers and a target integer. The function should determine if there are any two distinct integers in the list that add up to the target integer. If such a pair exists, return `True`; otherwise, return `False`.","solution":"def two_sum(nums, target): Determines if there are two distinct integers in the list that add up to the target integer. Args: nums (list of int): List of integers. target (int): The target integer. Returns: bool: True if such a pair exists, otherwise False. num_set = set() for num in nums: complement = target - num if complement in num_set: return True num_set.add(num) return False"},{"question":"You are given an array of integers representing the heights of buildings in a city. A rooftop restaurant is considered \\"great\\" if it has an unobstructed view of the sunset. This means that starting from the building, there must not be any taller building directly to its right. Determine the number of \\"great\\" rooftop restaurants in the given array of building heights. -----Input----- The first line contains a single integer n (1 le n le 5000) — the number of buildings. The second line contains a sequence of n integers h_1, h_2, dots, h_n (1 le h_i le 10^6), where h_i denotes the height of the i-th building. -----Output----- Print a single integer — the number of \\"great\\" rooftop restaurants in the city. -----Examples----- Input 5 3 7 8 3 6 Output 2 Input 6 4 2 3 1 8 6 Output 2 Input 3 1 1 1 Output 1","solution":"def count_great_rooftop_restaurants(n, heights): Function to determine the number of great rooftop restaurants. Parameters: n : int : the number of buildings heights : List[int] : a sequence of n integers describing the heights of the buildings Returns: int : the number of great rooftop restaurants great_count = 0 max_height_so_far = 0 for height in reversed(heights): if height > max_height_so_far: great_count += 1 max_height_so_far = height return great_count"},{"question":"A software company is planning to construct a new campus with multiple buildings interconnected by walkways. The company wants to ensure that employees can travel between any two buildings using the walkways, either directly or indirectly. For optimal design, the walkways must form a tree structure with M nodes, and the buildings are numbered from 1 to M. Each walkway connects two different buildings, and together they ensure all buildings are accessible from any other. Each building has a predefined cost associated with connecting it to the other buildings, which is given by array C. You need to determine whether it is possible to create such a campus layout following the tree structure and return the minimum connection cost. -----Input----- - The first line contains an integer M - the number of buildings (2 leq M leq 500). - The second line contains M integers C_ i - the cost of connecting building i (1 leq C_ i leq 10000). -----Output----- Print a single integer - the minimum cost to construct the campus with the tree structure ensuring all buildings are connected. -----Examples----- Sample Input: 4 1 2 3 4 Sample Output: 9","solution":"def minimum_campus_cost(M, C): Calculates the minimum cost to construct the campus with a tree structure of walkways. Parameters: M (int): The number of buildings. C (list): List of costs of connecting each building. Returns: int: The minimum cost to construct the campus. # Sort the costs C.sort() # The minimum cost will be the sum of the sorted array (excluding the first element) return sum(C)"},{"question":"A factory produces items on an assembly line in stages. Each stage takes a certain number of seconds to complete, and the stages are numbered from 0 to N-1. A newly produced item must go through all the stages sequentially starting at stage 0 and ending at stage N-1. If an item starts its journey at time t = 0 seconds, write a function that calculates the time at which the item will complete each stage. Example 1: Input: stages = [2, 3, 5] Output: [2, 5, 10] Explanation: Stage 0 takes 2 sec, stage 1 takes 3 sec (2+3=5 sec), stage 2 takes 5 sec (2+3+5=10 sec). Example 2: Input: stages = [1, 1, 1, 1] Output: [1, 2, 3, 4] Explanation: Each stage takes 1 sec, so the completion times are cumulative sums. Your Task: You don\'t need to read or print anything. Your task is to complete the function item_completion_times() which takes \'stages\' as input and returns a list of completion times for each stage. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 <= N <= 1000 1 <= stages[i] <= 100","solution":"def item_completion_times(stages): Returns the completion times for each stage. completion_times = [0] * len(stages) completion_times[0] = stages[0] for i in range(1, len(stages)): completion_times[i] = completion_times[i - 1] + stages[i] return completion_times"},{"question":"Given a string S, return the frequency of each character in the string in the form of a dictionary. Example 1: Input: S = \\"teststring\\" Output: {\'t\': 3, \'e\': 1, \'s\': 2, \'r\': 1, \'i\': 1, \'n\': 1, \'g\': 1} Example 2: Input: S = \\"apple\\" Output: {\'a\': 1, \'p\': 2, \'l\': 1, \'e\': 1} Your Task: Complete the function characterFrequency() which takes a string S as input parameters and returns a dictionary with the frequency of each character. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(S) <= 10^{5} S contains only lowercase English letters.","solution":"def characterFrequency(S): Returns the frequency of each character in the string S. Parameters: S (str): the input string Returns: dict: dictionary with characters as keys and their frequencies as values frequency = {} for char in S: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency"},{"question":"In a distant future, scientists have discovered a new type of organism on an exoplanet. These organisms communicate using sequences of sounds, each represented by an integer. The sequences can vary in length, and each sequence can be either a \\"chirp\\", \\"buzz\\", or \\"whistle\\". A \\"chirp\\" is recognized by its sequence forming a strictly increasing series of integers. A \\"buzz\\" is a sequence forming a strictly decreasing series of integers. A \\"whistle\\" consists of integers that are the same throughout the sequence. The scientists want to categorize each given sequence of integers as either a \\"chirp\\", \\"buzz\\", or a \\"whistle\\". If the sequence does not fit any of these three categories, it should be classified as \\"unknown\\". Write a program that, given multiple sequences, determines the category for each sequence. -----Input----- The first line contains an integer t (1 le t le 100) — the number of sequences. Each of the following t lines contains a sequence of integers. Each sequence starts with an integer n (1 le n le 100), the number of integers in the sequence, followed by n integers (-1000 le x_i le 1000). -----Output----- For each sequence, print a single line with one of the words: \\"chirp\\", \\"buzz\\", \\"whistle\\", or \\"unknown\\" based on the classification of that sequence. -----Examples----- Input 5 5 1 2 3 4 5 5 5 4 3 2 1 5 7 7 7 7 7 4 1 3 2 5 3 6 6 6 Output chirp buzz whistle unknown whistle -----Note----- In the first case, the sequence is 1, 2, 3, 4, 5 which is strictly increasing. So, it is classified as a \\"chirp\\". In the second case, the sequence is 5, 4, 3, 2, 1 which is strictly decreasing. So, it is classified as a \\"buzz\\". In the third and fifth cases, the sequences consist of the same integer repeated, hence classified as a \\"whistle\\". In the fourth case, the sequence 1, 3, 2, 5 does not follow any of the given patterns, so it is classified as \\"unknown\\".","solution":"def classify_sequences(sequences): Classifies a list of integer sequences as \'chirp\', \'buzz\', \'whistle\', or \'unknown\'. results = [] for sequence in sequences: n = sequence[0] seq = sequence[1:] if all(seq[i] < seq[i + 1] for i in range(n - 1)): results.append(\\"chirp\\") elif all(seq[i] > seq[i + 1] for i in range(n - 1)): results.append(\\"buzz\\") elif all(seq[i] == seq[0] for i in range(n)): results.append(\\"whistle\\") else: results.append(\\"unknown\\") return results"},{"question":"You are given an array of n integers and a series of m operations. Each operation is described by three integers l, r, and x, and it means \\"add x to each element from index l to index r in the array\\". Your task is to find the value of the array after all the operations have been applied. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100,000) — the size of the array and the number of operations respectively. The second line contains n integers a_1, a_2, ..., a_n — the initial values of the array (0 ≤ a_i ≤ 10^9). Then follow m lines, each containing three integers l, r, and x (1 ≤ l ≤ r ≤ n, -10^9 ≤ x ≤ 10^9) — describing an operation. Output Output n integers — the values of the array after performing all the operations. Examples Input 5 3 1 2 3 4 5 1 3 10 2 5 -2 3 3 6 Output 11 10 17 2 3 Note In the given example, we have the following changes step-by-step: 1. The initial array is [1, 2, 3, 4, 5]. 2. After the first operation (add 10 from index 1 to index 3), the array becomes [11, 12, 13, 4, 5]. 3. After the second operation (subtract 2 from index 2 to index 5), the array becomes [11, 10, 11, 2, 3]. 4. After the third operation (add 6 to index 3), the array becomes [11, 10, 17, 2, 3].","solution":"def apply_operations(n, m, array, operations): result = array[:] for op in operations: l, r, x = op for i in range(l-1, r): result[i] += x return result"},{"question":"Given two strings s1 and s2, write a function that returns true if s2 is a rotation of s1 using only one call to the method that checks for substring. For example, \\"waterbottle\\" is a rotation of \\"erbottlewat\\". ----- Sample Input 2 ------ waterbottle erbottlewat hello lohel abcdefg efgabcd ----- Sample Output 2 ------ true true true","solution":"def is_rotation(s1, s2): Check if s2 is a rotation of s1. :param s1: First string :param s2: Second string :return: Boolean value indicating if s2 is a rotation of s1 if len(s1) != len(s2): return False return s2 in s1 + s1"},{"question":"A company wants to make an optimized scheduler for their on-call rotation among employees. The scheduler receives an array comprising employees\' names, and each day of the month is represented by the numbers 1 to 31. The scheduler should assign each employee to one or more days such that the days are distributed as evenly as possible across all employees. Given the array of employees and an integer n representing the number of days in the scheduling period (1 ≤ n ≤ 31), write a function that returns a dictionary where the key is the employee\'s name and the value is a list of days that the employee is on call. The goal is to balance the on-call days as evenly as possible. If there are not enough employees to cover every day exactly evenly, the initial days in the period may be slightly more loaded than the later days. Input - The first line contains the number of names, k (1 ≤ k ≤ 50). - The second line contains the number of days, n. - The next k lines contain the names of the employees. Output - A dictionary with the name of each employee as the key and a list of integers representing the days they are on-call. Example Input ``` 3 10 Alice Bob Charlie ``` Output ```python { \'Alice\': [1, 4, 7, 10], \'Bob\': [2, 5, 8], \'Charlie\': [3, 6, 9] } ``` Explanation In the given example, there are three employees and ten days. The on-call days are distributed as evenly as possible, with each employee getting a nearly equal number of days based on the order of their position in the array. Each employee\'s on-call days are spread throughout the period to maintain balance.","solution":"def distribute_days(employees, n): Distributes days as evenly as possible among employees. Parameters: employees (list): List of employee names. n (int): Number of days in the scheduling period. Returns: dict: Dictionary where each key is an employee name and the value is a list of on-call days. schedule = {employee: [] for employee in employees} k = len(employees) for day in range(1, n + 1): # Assign the day to the appropriate employee employee_index = (day - 1) % k schedule[employees[employee_index]].append(day) return schedule"},{"question":"# Task You are given an integer `n` and a list of integers `arr`. Starting with an empty list, you can perform the following operations: ``` 1. Append any integer from `arr` to the end of the current list. 2. Erase the last element of the current list. ``` Your task is to find the minimum number of operations needed to construct a list that contains exactly `n` elements, with each element being one of the integers from `arr` at least once. # Example For `n = 5, arr = [2, 1, 3]`, the result should be `6`. Construction: ``` [] -> [2] -> [2, 1] -> [2, 1, 3] -> [2, 1] -> [2, 1, 2] -> [2, 1, 2, 3]. ``` So, the result is 6. For `n = 1, arr = [4, 5]`, the result should be `1`. Construction: ``` [] -> [4]. ``` So, the result is 1. For `n = 3, arr = [1, 4]`, the result should be `3`. Construction: ``` [] -> [1] -> [1, 4] -> [1, 4, 1]. ``` So, the result is 3. # Input/Output - `[input]` integer `n` The number of elements required in the list. 1 <= n <= 1000 - `[input]` list `arr` List of integers to append. Contains at least one integer and all elements are between 1 and 1000. 1 <= arr.length <= 20 - `[output]` an integer The minimum number of operations.","solution":"def min_operations(n, arr): Finds the minimum number of operations needed to construct a list that contains exactly n elements, with each element being one of the integers from arr at least once. # The minimum number of operations is always equal to n # Because we can append elements from arr to achieve the required list length. return n"},{"question":"In an amusement park, there is a game where players stack blocks in a tower. The player has an initial skill level characterized by a single integer value: skill. Each block has a difficulty value, and the player can only add a block to the tower if their skill level is equal to or greater than the difficulty of the block. Each time the player successfully adds a block to the tower, their skill level increases by the difficulty value of the block they just added. You\'ll be given multiple test cases, each describing the various blocks available in the amusement park and their difficulties. Your task is to determine the minimum initial skill level the player must have to be able to add all the blocks to the tower sequentially. -----Input----- Each test contains multiple test cases. The first line of input contains the number of test cases t (1 le t le 100). Description of the test cases follows. The first line of each test case contains a single integer n (1 le n le 100) – the number of blocks. The second line of each test case contains n integers d_1, d_2, ldots, d_n (1 le d_i le 100) – the difficulty levels of the blocks. -----Output----- For each test case, print a single integer – the minimum initial skill level the player must have to be able to add all the blocks to the tower in sequence. -----Example----- Input 2 3 3 2 5 4 1 1 1 1 Output 10 1 -----Note----- In the first test case, the player needs a minimum initial skill level of 10: - Add block with difficulty 3, skill level becomes 3 + 3 = 6 - Add block with difficulty 2, skill level becomes 6 + 2 = 8 - Add block with difficulty 5, skill level becomes 8 + 5 = 13 In the second test case, the initial skill level needs to be only 1 as each block has difficulty 1.","solution":"def min_initial_skill(t, test_cases): Determines the minimum initial skill level needed for each test case to stack all blocks Parameters: t (int): Number of test cases test_cases (list): List of tuples, each containing an integer n and a list of block difficulties Returns: list: Minimum initial skill level required for each test case results = [] for test in test_cases: n, difficulties = test total_difficulty = sum(difficulties) results.append(total_difficulty) return results"},{"question":"Eva is a data analyst who enjoys working on puzzles in her free time. Recently she stumbled across an interesting problem involving sequences of numbers and their subsequences. She wonders if she could automate a solution to find the longest subsequence of a given sequence which is strictly increasing. -----Input----- The first line of input contains an integer N~ (1 leq N leq 100000), the length of the sequence Eva is analyzing. The second line contains N integers, each of value between 1 and 10^9, representing the sequence of numbers. -----Output----- Output the length of the longest strictly increasing subsequence found in the sequence. -----Examples----- Sample Input 1: 6 5 2 8 6 3 6 Sample Output 1: 3 Sample Input 2: 8 10 22 9 33 21 50 41 60 Sample Output 2: 5","solution":"from bisect import bisect_left def longest_increasing_subsequence_length(sequence): if not sequence: return 0 # This will store the end elements of increasing subsequences subseq_end_elements = [] for num in sequence: idx = bisect_left(subseq_end_elements, num) if idx == len(subseq_end_elements): subseq_end_elements.append(num) else: subseq_end_elements[idx] = num return len(subseq_end_elements)"},{"question":"When working with binary trees, one common task is checking the symmetry of the tree. A binary tree is said to be symmetric if it is a mirror of itself. Given a binary tree, write a function `isSymmetric` to check whether it is symmetric around its center. # Your Task Write a function `isSymmetric(root)` that takes the root of a binary tree as an argument and returns a boolean indicating whether the tree is symmetric or not. # Example: ```python # Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root: Optional[TreeNode]) -> bool: pass # Example 1: # Given binary tree [1,2,2,3,4,4,3] # 1 # / # 2 2 # / / # 3 4 4 3 # The function should return True. # Example 2: # Given binary tree [1,2,2,None,3,None,3] # 1 # / # 2 2 # # 3 3 # The function should return False. ``` # Notes: 1. The tree node class `TreeNode` is provided. You should not change it. 2. Your implementation should handle an empty tree, which is considered symmetric.","solution":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def isSymmetric(root: TreeNode) -> bool: if not root: return True def isMirror(left: TreeNode, right: TreeNode) -> bool: if not left and not right: return True if not left or not right: return False return (left.val == right.val) and isMirror(left.left, right.right) and isMirror(left.right, right.left) return isMirror(root.left, root.right)"},{"question":"There is a park with n benches, where some benches may already be occupied. Benches are placed in a line and each bench can have one person sitting on it. You are tasked with determining the longest sequence of consecutive empty benches in the park so that you can organize maintenance work without disturbing any visitors. Input The first line contains a single integer n (1 ≤ n ≤ 100) — the number of benches in the park. The second line contains an array of n integers (each either 0 or 1) where the i-th integer indicates whether the i-th bench is unoccupied (0) or occupied (1). Output Print a single integer — the length of the longest sequence of consecutive unoccupied benches. Example Input 10 1 0 0 1 0 0 0 1 0 0 Output 3 Note In the sample case, the longest sequence of consecutive unoccupied benches starts from the 5th bench to the 7th bench inclusive (the 0-based indices), so the length is 3.","solution":"def longest_sequence_of_empty_benches(n, benches): max_length = 0 current_length = 0 for bench in benches: if bench == 0: current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"Jenny is organizing a programming competition for her university. To determine the sequence of problems to present, she has to ensure the difficulty levels increase monotonically. Each problem has a unique identifier and a difficulty level, both given as inputs. However, some problem sequences provided may not be in increasing order of difficulty. If it’s possible to reorder the problems to achieve a strictly increasing sequence of difficulty levels, she should do so. Otherwise, determine that it\'s impossible to establish such an order. Write a function that takes a list of tuples as input, each containing a unique identifier and a difficulty level, and returns the sequence of problem identifiers sorted by their difficulty levels. If it’s impossible to reorder the problems to form an increasing sequence of difficulty levels, return \'impossible\'. -----Input----- The input consists of a list of tuples where: - Each tuple contains an integer identifier (1 ≤ identifier ≤ 10^5) and an integer difficulty level (1 ≤ difficulty level ≤ 10^5). - The list may contain up to 10^5 tuples. -----Output----- - A list of problem identifiers in the order of strictly increasing difficulty levels, or - The string \'impossible\' if it\'s not achievable. -----Examples----- Input [(3, 20), (1, 10), (2, 30)] Output [1, 3, 2] Input [(3, 20), (1, 10), (2, 10)] Output impossible Input [(1, 50), (2, 40), (3, 60)] Output [2, 1, 3]","solution":"def reorder_problems(problems): Reorders the problems by their difficulty levels in a strictly increasing order. If it\'s impossible to do so, returns \'impossible\'. problems_sorted = sorted(problems, key=lambda x: x[1]) # Verify if the sorted difficulties are strictly increasing for i in range(len(problems_sorted) - 1): if problems_sorted[i][1] >= problems_sorted[i + 1][1]: return \'impossible\' # Return the ordered list of identifiers return [problem[0] for problem in problems_sorted]"},{"question":"In a medieval kingdom, a castle is surrounded by a circular moat filled with water. The moat is divided into N equal segments. Each segment could either have calm water (represented by 0) or be infested with crocodiles (represented by 1). The castle has a single drawbridge that can be positioned on any of the segments to safely enter the castle (but drawbridge cannot be placed on segments with crocodiles). Given the current state of the moat, determine if there exists at least one safe segment for the drawbridge. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case consists of a single line containing an integer N followed by a space-separated string of N integers each being either 0 or 1 representing the state of the segments. Output For each test case, output \\"YES\\" if there exists at least one segment with calm water (0) where the drawbridge can be placed, otherwise, output \\"NO\\". Constraints 1 ≤ T ≤ 10^3 1 ≤ N ≤ 10^4 Each segment is either 0 or 1. Example Input: 3 5 1 0 1 1 0 4 1 1 1 1 6 0 0 1 0 1 0 Output: YES NO YES Explanation Example case 1: There are segments 1 and 4 with calm water where the drawbridge can be placed. Thus, the output is \\"YES\\". Example case 2: All segments are infested with crocodiles. Thus, the output is \\"NO\\". Example case 3: There are multiple segments with calm water like segments 1, 2, and 4. Thus, the output is \\"YES\\".","solution":"def safe_drawbridge_position(T, cases): Determines if there is at least one safe segment for each test case. Parameters: T (int): Number of test cases cases (list of tuples): Each tuple contains an integer N and a list of integers representing the segments. Returns: list: A list of \\"YES\\" or \\"NO\\" for each test case. results = [] for N, segments in cases: if \'0\' in segments: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a programming competition, there is a challenge where participants need to generate a specific sequence. The sequence is composed of N distinct integers from 1 to N in a manner where the i-th integer of the sequence is not equal to i. Write a function `generate_sequence(N)` that generates such a sequence. If it\'s impossible to form the sequence, return an empty list. Input An integer N representing the length of the sequence. Output A list containing N integers that meet the criteria or an empty list if it\'s impossible to create the sequence. Example Input: 4 Output: [2, 1, 4, 3] Input: 1 Output: [] Explanation: For N=4, the sequence [2, 1, 4, 3] is valid because no integer i appears in the i-th position. For N=1, it\'s impossible to generate a sequence where the integer 1 does not appear in the first position, so the output is an empty list.","solution":"def generate_sequence(N): Generates a sequence of N distinct integers from 1 to N where the i-th integer is not equal to i. Parameters: N (int): The length of the sequence. Returns: List[int]: A list of integers or an empty list if impossible to create the sequence. if N == 1: return [] sequence = list(range(1, N + 1)) # Swap elements in pair to ensure no element is in its original position for i in range(1, N, 2): sequence[i-1], sequence[i] = sequence[i], sequence[i-1] return sequence"},{"question":"Write a program that takes an input n and generates a square matrix of size n x n where each element (i, j) is defined as follows: - If i == j, the element is 0. - If i is not equal to j: - The value should be 1 if both i and j are even or both are odd. - The value should be 2 if one of i or j is even and the other is odd. # Constraints: - 1 <= n <= 100 # Input: - A single integer n. # Output: - A matrix of size n x n, where each element is separated by a space. # Example: # Input: 4 # Output: 0 2 1 2 2 0 2 1 1 2 0 2 2 1 2 0 # Explanation: For n = 4, the matrix is a 4 x 4 grid where cell (i, j) is populated according to the rules specified.","solution":"def generate_matrix(n): Generates an n x n matrix according to the given rules. - If i == j, the element is 0. - If i is not equal to j: - The value should be 1 if both i and j are even or both are odd. - The value should be 2 if one of i or j is even and the other is odd. Parameters: n (int): The size of the matrix. Returns: list: The generated matrix as a list of lists. matrix = [[0]*n for _ in range(n)] for i in range(n): for j in range(n): if i == j: matrix[i][j] = 0 elif (i % 2 == j % 2): matrix[i][j] = 1 else: matrix[i][j] = 2 return matrix"},{"question":"Given a singly linked list of N nodes, the task is to reverse the linked list in groups of K and return the modified list. If the number of nodes is not a multiple of K, then the remaining nodes at the end should remain as they are. Example 1: Input: N = 8, K = 3 value[] = {1, 2, 3, 4, 5, 6, 7, 8} Output: 3 2 1 6 5 4 7 8 Explanation: The linked list is reversed in groups of 3, leading to the resultant list as 3 2 1 6 5 4 7 8. Example 2: Input: N = 5, K = 2 value[] = {1, 2, 3, 4, 5} Output: 2 1 4 3 5 Explanation: The linked list is reversed in groups of 2, leading to the resultant list as 2 1 4 3 5. Your Task: The task is to complete the function reverseInGroups() which reverses the linked list in groups of size K. The printing is done automatically by the driver code. Constraints: 1 <= N <= 10^5 1 <= K <= N","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def reverseInGroups(head, k): if head is None or k == 1: return head dummy = ListNode(0) dummy.next = head current = dummy nex = dummy pre = dummy count = 0 while current.next is not None: current = current.next count += 1 while count >= k: current = pre.next nex = current.next for _ in range(1, k): current.next = nex.next nex.next = pre.next pre.next = nex nex = current.next pre = current count -= k return dummy.next def print_linked_list(head): result = [] while head: result.append(head.value) head = head.next return result"},{"question":"Michael is fascinated with palindromic numbers. A palindromic number is a number that remains the same when its digits are reversed. For example, 121 and 3443 are palindromic, but 123 and 5657 are not. Michael wants to find the smallest palindromic number greater than a given number x. Given a positive integer x, output the smallest palindromic number that is greater than x. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases t (1 le t le 1000). Each of the next t lines contains a single integer x (1 le x le 10^6). -----Output----- For each test case, output the smallest palindromic number greater than x on a separate line. -----Example----- Input 3 6 123 808 Output 7 131 818 -----Note----- In the first test case, the smallest palindromic number greater than 6 is 7. In the second test case, the smallest palindromic number greater than 123 is 131. In the third test case, the smallest palindromic number greater than 808 is 818.","solution":"def next_palindrome(x): Finds the smallest palindromic number greater than x. x += 1 while str(x) != str(x)[::-1]: x += 1 return x def find_palindromes(t, test_cases): Given the number of test cases and a list of integers, finds the smallest palindromic number greater than each integer in the list. results = [] for x in test_cases: results.append(next_palindrome(x)) return results"},{"question":"You are participating in a coding contest and have encountered the following problem regarding image categorization. You have been provided with a dataset of images, each labeled with one of three categories: \'Animal\', \'Vehicle\', or \'Plant\'. For simplicity, the images are represented as strings, where each string contains lowercase letters, and different letters correspond to different features. Each category has distinctive features: - Animal: predominantly includes the letters \'a\', \'n\', \'i\', \'m\', \'l\'. - Vehicle: predominantly includes the letters \'v\', \'e\', \'h\', \'c\', \'l\'. - Plant: predominantly includes the letters \'p\', \'a\', \'n\', \'t\', \'l\'. Your task is to create a program that helps categorize a given image based on the predominant features in the string representation of the image. Input The first line contains a string consisting of lowercase letters (1 ≤ length of the string ≤ 1000). This string represents the features of the image. Output Output exactly one of the words: \'Animal\', \'Vehicle\', \'Plant\' – the category that matches the given image based on the predominant features. If there is a tie (i.e., two or more categories have the same number of predominant features), output the category that appears first in dictionary order (\'Animal\' comes before \'Plant\' which comes before \'Vehicle\'). Example Input: animmalph Output: Animal","solution":"def categorize_image(image): Categorizes the given image string into one of the categories: \'Animal\', \'Vehicle\', or \'Plant\'. Args: image (str): The string representation of the image with lowercase letters. Returns: str: The category of the image. features_count = {\'Animal\': 0, \'Vehicle\': 0, \'Plant\': 0} animal_features = {\'a\', \'n\', \'i\', \'m\', \'l\'} vehicle_features = {\'v\', \'e\', \'h\', \'c\', \'l\'} plant_features = {\'p\', \'a\', \'n\', \'t\', \'l\'} for char in image: if char in animal_features: features_count[\'Animal\'] += 1 if char in vehicle_features: features_count[\'Vehicle\'] += 1 if char in plant_features: features_count[\'Plant\'] += 1 # Sort categories and return the one with the highest count, using dictionary order in case of tie categories_sorted = sorted(features_count.keys()) predominant_category = max(categories_sorted, key=lambda k: features_count[k]) return predominant_category"},{"question":"You are given an n x n matrix of integers. Your task is to find the k largest elements in the matrix and return them in a sorted list in descending order. Input The first line contains two integers n and k (1 ≤ n ≤ 1000, 1 ≤ k ≤ n^2) — the size of the matrix and the number of largest elements to find. The next n lines contain n integers each, representing the matrix. Output Output k integers in a single line, sorted in descending order. Example Input 4 3 10 20 30 40 15 25 35 45 27 29 37 48 32 33 39 50 Output 50 48 45 Explanation In the provided 4x4 matrix, the numbers 50, 48, and 45 are the three largest elements. They are returned in a list sorted in descending order.","solution":"def find_k_largest_elements(matrix, n, k): Finds the k largest elements in an n x n matrix and returns them in a sorted list in descending order. # Flatten the matrix into a single list flat_list = [element for row in matrix for element in row] # Sort the flattened list in descending order flat_list.sort(reverse=True) # Return the first k elements return flat_list[:k]"},{"question":"The school is organizing a competition where each student has to solve a series of puzzles. Each puzzle has a difficulty level, and students can only solve puzzles in increasing order of difficulty, i.e., a student cannot solve a puzzle of higher difficulty before solving all puzzles of lower or equal difficulty. Your task is to help the competition organizers determine the minimum number of puzzles that each student will have to solve in order to complete the competition if they are allowed to skip one puzzle of their choice. Specifically, given the number of puzzles, their respective difficulty levels, and the list of difficulties in increasing order, you need to find the minimum number of puzzles each student has to solve given they can skip any one puzzle. Input The first line contains an integer N (2 ≤ N ≤ 100) which represents the total number of puzzles. The second line contains N integers, each representing the difficulty levels of the puzzles in increasing order (1 ≤ difficulty ≤ 100). Output Print a single integer — the minimum number of puzzles each student will have to solve to complete the competition if they can skip one puzzle. Examples Input 5 1 2 3 4 5 Output 4 Input 4 2 3 5 6 Output 3","solution":"def min_puzzles_to_solve(n, difficulties): Returns the minimum number of puzzles to be solved when student is allowed to skip one puzzle. return n - 1"},{"question":"Given a linked list, write a function to find the Middle of the linked list. If the linked list contains an even number of nodes, return the second middle node. Example 1: Input: 1 -> 2 -> 3 -> 4 -> 5 Output: 3 Explanation: The middle of the linked list is 3. Example 2: Input: 1 -> 2 -> 3 -> 4 -> 5 -> 6 Output: 4 Explanation: Since the linked list contains an even number of nodes, there are two middle nodes. We return the second middle node which is 4. Your task: You don\'t need to read input or print anything. Your task is to complete the function findMiddle() which takes the head node of the linked list as input and returns the value of the middle node. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= Number of nodes in the linked list <= 100","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def findMiddle(head): Finds the middle of the linked list. If the linked list contains an even number of nodes, returns the second middle node. slow = head fast = head while fast and fast.next: slow = slow.next fast = fast.next.next return slow.val # Helper function to create linked list from list for testing purposes def create_linked_list(lst): dummy = ListNode() current = dummy for val in lst: current.next = ListNode(val) current = current.next return dummy.next"},{"question":"Given a directed graph represented as an adjacency list, implement a function to detect if there is a cycle in the graph. The function should return `True` if a cycle is detected, and `False` otherwise. The graph is represented as a dictionary where the keys are nodes and the values are lists of nodes to which there is an edge from the key node. Write a function `has_cycle(graph: Dict[int, List[int]]) -> bool` that determines whether the given directed graph contains a cycle. # Example ```python graph = { 0: [1, 2], 1: [2], 2: [0], 3: [3] } assert has_cycle(graph) == True # There is a loop between 0 -> 1 -> 2 -> 0 graph = { 0: [1, 2], 1: [2], 2: [], 3: [3] } assert has_cycle(graph) == True # There is a self-loop at node 3 graph = { 0: [1], 1: [2], 2: [] } assert has_cycle(graph) == False # There is no cycle ``` # Constraints - The input graph will have at most `10^3` nodes. - The input graph may contain self-loops and parallel edges.","solution":"from typing import Dict, List def has_cycle(graph: Dict[int, List[int]]) -> bool: visited = set() recursion_stack = set() def dfs(node): if node not in visited: visited.add(node) recursion_stack.add(node) for neighbor in graph.get(node, []): if neighbor not in visited and dfs(neighbor): return True elif neighbor in recursion_stack: return True recursion_stack.remove(node) return False for node in graph.keys(): if node not in visited: if dfs(node): return True return False"},{"question":"Create a function that accepts a list of positive integers and returns a new list where each element is the product of all the numbers in the original list except the one at the current position. The function should not use division to solve this problem. The length of the input list will be at least 2. Examples: ```python product_except_self([1, 2, 3, 4]) == [24, 12, 8, 6] product_except_self([2, 3, 4, 5]) == [60, 40, 30, 24] product_except_self([1, 2]) == [2, 1] ``` Quick Note: Your solution should have a time complexity of O(n).","solution":"def product_except_self(nums): Given a list of positive integers, returns a new list where each element is the product of all the numbers in the original list except the one at the current position. Args: nums (list): A list of positive integers with length at least 2. Returns: list: A list of products. length = len(nums) result = [1] * length left_product = 1 for i in range(length): result[i] = left_product left_product *= nums[i] right_product = 1 for i in reversed(range(length)): result[i] *= right_product right_product *= nums[i] return result"},{"question":"You are given an integer N. Find a sequence of N positive integers a1, a2, ..., aN such that the sum of their squares is minimized and the sum of all elements in the sequence is exactly K. Input The only line of input contains two integers N (1 ≤ N ≤ 1000) and K (1 ≤ K ≤ 10^6). Output Output N integers that satisfy the given condition in non-decreasing order (in a single line, separated with spaces). Examples Input 3 6 Output 2 2 2 Input 4 10 Output 2 2 3 3","solution":"def minimize_square_sum(N, K): This function returns a sequence of N positive integers such that the sum of their squares is minimized and the sum of the integers is exactly K. base_value = K // N remainder = K % N result = [base_value] * N for i in range(remainder): result[i] += 1 return sorted(result)"},{"question":"In a distant city, there are m public transportation stations numbered from 1 to m. You are provided with a list of routes, each route linking two stations and having a specific length. The city government plans to issue special transportation cards to allow unlimited travel between certain pairs of stations. However, due to budget constraints, they want to issue the minimum number of such cards while ensuring all stations are accessible from every other station, either directly or indirectly using these cards. To aid the government, you must implement a function that, given the number of stations and a list of routes, determines the minimum number of direct connections needed to ensure that all stations are accessible from any other station. You also need to output one possible way to achieve this. Input The first line contains two integers m and k (1 ≤ m ≤ 1000, 0 ≤ k ≤ 10000) — the number of stations and the number of routes respectively. The next k lines each contain three integers u, v, and l (1 ≤ u, v ≤ m, 1 ≤ l ≤ 10000, u ≠ v) representing a route between stations u and v with length l. Output Print the minimum number of direct connections n needed to connect all stations, followed by n lines with the pairs of stations to be directly connected. Example Input 6 9 1 2 4 1 3 2 1 4 6 2 3 1 2 5 3 3 4 5 3 6 8 4 5 7 5 6 9 Output 5 1 2 2 3 1 4 3 5 5 6 Note In the example, the minimum number of connections needed to ensure all stations are accessible from each other is 5. One possible way to achieve this is by connecting the pairs (1, 2), (2, 3), (1, 4), (3, 5), and (5, 6). There could be other valid solutions as well.","solution":"def find_minimum_connections(m, k, routes): Prim\'s algorithm to find the Minimum Spanning Tree (MST) of the given graph (city\'s transport stations), to ensure all stations are accessible from every other station. import heapq # Build adjacency list representation of the graph from collections import defaultdict, deque graph = defaultdict(list) for u, v, l in routes: graph[u].append((l, v)) graph[v].append((l, u)) # Prim\'s algorithm to find MST mst_cost = 0 mst_edges = [] start_node = 1 # Min-heap to store the edges based on their weights min_heap = [(0, start_node, start_node)] visited = set() while min_heap and len(visited) < m: cost, u, v = heapq.heappop(min_heap) if v not in visited: visited.add(v) mst_cost += cost if u != v: # Don\'t add the first dummy edge (0, start_node, start_node) mst_edges.append((u, v)) for next_cost, next_node in graph[v]: if next_node not in visited: heapq.heappush(min_heap, (next_cost, v, next_node)) return len(mst_edges), mst_edges # Accept input and parse it def main(): from sys import stdin, stdout input = stdin.read data = input().split() m = int(data[0]) k = int(data[1]) routes = [] index = 2 for _ in range(k): u = int(data[index]) v = int(data[index+1]) l = int(data[index+2]) routes.append((u, v, l)) index += 3 # Find minimum connections needed n, connections = find_minimum_connections(m, k, routes) # Output the result stdout.write(f\\"{n}n\\") for u, v in connections: stdout.write(f\\"{u} {v}n\\") # Uncomment below line to run main function if this script is run directly # if __name__ == \\"__main__\\": # main()"},{"question":"Problem Statement: Alice and Bob are playing a game of stones. They have two piles of stones, with Alice starting from the first pile, and Bob starting from the second. The rule of the game is that each player can take any positive number of stones from their respective piles on their turn. However, the players must alternate turns and the game ends when either of the players cannot make a move (i.e., their pile is empty). Your task is to determine the winner of the game given the initial conditions. Assume both players play optimally and Alice always goes first. Input: The input consists of two positive integers: First integer P1 - the initial number of stones in Alice\'s pile. Second integer P2 - the initial number of stones in Bob\'s pile. Output: Print \\"Alice\\" if Alice wins, and \\"Bob\\" if Bob wins. Constraints: 1 ≤ P1, P2 ≤ 10^9 SAMPLE INPUT 4 7 SAMPLE OUTPUT Alice Explanation - On Alice\'s first turn, she can take any number of stones from her pile. Suppose she takes 3 stones, leaving her with 1. - Bob will then take his turn and can take any number of stones from his pile. Suppose he takes 5 stones, leaving him with 2. - Then it\'s Alice\'s turn again. Alice must always consider scenarios to ensure she maximizes her chance of leaving Bob in a situation where he has no optimal moves. With their optimal strategies, the game boils down to predicting the final viable move where one player cannot make a move. By analyzing the problem thoroughly, you can deduce the game is solvable deterministically based on the relative sizes of both piles: under optimal play, Alice will win if P1 ≥ P2, otherwise Bob will win.","solution":"def determine_winner(P1, P2): Determines the winner of the game given the initial number of stones in Alice\'s pile (P1) and Bob\'s pile (P2). Alice always goes first. The players play optimally. Returns \\"Alice\\" if Alice wins, and \\"Bob\\" if Bob wins. if P1 >= P2: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Wendy loves playing with numbers, and her favorite operation is finding triangular numbers. A triangular number or triangle number counts objects arranged in an equilateral triangle. The nth triangular number T_n is the number of dots in a triangle with n dots on each side, which can be represented by the formula: T_n = n * (n + 1) / 2. Wendy challenges you to determine for a given number X whether it is a triangular number. If it is, she wants you to print the corresponding n (where X == T_n). If it is not a triangular number, print -1. Input The first line contains an integer T, the number of test cases. Each test case consists of a single number X on a new line. Output For each test case, print the integer n if X is a triangular number, otherwise print -1. Constraints 1 ≤ T ≤ 10^5 1 ≤ X ≤ 10^12 Example Input: 3 3 10 5 Output: 2 4 -1","solution":"import math def is_triangular(X): Determines if a number X is a triangular number. If it is, returns the integer n such that X == T_n. Otherwise, returns -1. # The quadratic equation we need to solve n(n+1)/2 = X # 2X = n^2 + n # n^2 + n - 2X = 0 # Solve using the quadratic formula: n = (-b +- sqrt(b^2 - 4ac)) / 2a # For our equation, a = 1, b = 1, c = -2X a, b, c = 1, 1, -2 * X discriminant = b**2 - 4 * a * c if discriminant < 0: return -1 sqrt_discriminant = math.isqrt(discriminant) if sqrt_discriminant * sqrt_discriminant != discriminant: return -1 n1 = (-b + sqrt_discriminant) // (2 * a) if n1 * (n1 + 1) // 2 == X and n1 > 0: return n1 return -1 def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for X in test_cases: results.append(is_triangular(X)) return results"},{"question":"In a faraway kingdom, the King appointed his Knight to distribute the kingdom\'s gold coins among the citizens. The kingdom can be represented in a line, where each citizen occupies one position. The Knight gets a list of gold coin amounts and must distribute them. However, the King announced that the gold distribution must follow strict rules to keep the kingdom financially equitable: 1. Each citizen can receive at most one gold coin. 2. The list provided contains the total gold coins each citizen should have after the distribution is complete. 3. Initially, all citizens have 0 gold coins. Given an array `targets` of N integers where targets[i] represents the total number of gold coins citizen i should have, determine if it\'s possible to distribute the gold coins according to the King\'s rules and return the sequence of gold coin positions if possible. If it\'s not possible, return an empty list. Input The first line contains one integer N, the number of citizens (1 <= N <= 10^5). The second line contains N integers representing the `targets` array (0 <= targets[i] <= 10^5). Output If it\'s possible to distribute coins equitably according to the rules, output a sequence of space-separated positions where each position contains the 1-based index of a citizen receiving a coin. If it\'s not possible, output an empty list. Examples Input 5 1 0 2 1 0 Output 1 3 4 3 Input 3 1 1 2 Output [] Explanation Example 1: - Citizen 1 and 2 should have 1 and 0 gold coins respectively. - Citizen 3 requires 2 gold coins. - Citizen 4 requires 1 gold coin. - Citizen 5 requires 0 gold coins. An acceptable distribution is: 1 3 4 3 (citizen 3 receives the second coin again after the first coin) Example 2: - Citizen 3\'s request for 2 gold coins is infeasible under the given rules since a citizen can only receive each coin once. This example highlights the importance of placing coins in positions that satisfy the target counts while respecting the distribution limitations.","solution":"def distribute_coins(n, targets): Determines the sequence of positions to distribute gold coins based on the targets array. Returns an empty list if no valid distribution is possible. if any(target > 1 for target in targets): return [] positions = [] for i in range(n): if targets[i] == 1: positions.append(i + 1) return positions"},{"question":"You are given two strings, `order` and `str`. Write a function that sorts the characters in `str` based on the order defined in `order`. If a character in `str` does not appear in `order`, it should be placed at the end of the result in any order. Return the resulting string after sorting. # Constraints: - `order` and `str` will only contain lowercase letters. - The length of `order` is at most 26, and the length of `str` is at most 200. - All characters in `order` are unique. # Examples: Example 1: **Input:** ```python order = \\"cba\\" str = \\"abcd\\" ``` **Output:** ```python \\"cbad\\" ``` Example 2: **Input:** ```python order = \\"huc\\" str = \\"huachuca\\" ``` **Output:** ```python \\"hhuuccaa\\" ```","solution":"def custom_sort_string(order, s): Sorts the characters in `s` based on the order defined in `order`. If a character in `s` does not appear in `order`, it will be placed at the end. order_map = {char: index for index, char in enumerate(order)} return \'\'.join(sorted(s, key=lambda char: order_map.get(char, len(order))))"},{"question":"You are tasked with developing an algorithm to determine if a given sequence of characters represents a valid code that adheres to a specific pattern of brackets. The sequence can contain the following characters: \'(\', \')\', \'{\', \'}\', \'[\' and \']\'. A valid sequence must satisfy the following conditions: 1. Each opening bracket has a corresponding closing bracket of the same type. 2. Each pair of brackets must be properly nested. For example, the sequence \\"()\\" is valid, as the opening bracket \'(\' is properly closed by the matching \')\'. Similarly, the sequence \\"([]{})\\" is valid. However, the sequence \\"([)]\\" is not valid because the brackets are not properly nested. Your task is to implement a function that verifies whether the given sequence is valid or not. # Function Signature ```python def is_valid_code(sequence: str) -> bool: pass ``` # Input - A single string `sequence`, where `1 ≤ len(sequence) ≤ 1000`. # Output - Return `True` if the sequence is valid according to the aforementioned conditions. Otherwise, return `False`. # Examples Example 1 ```python sequence = \\"()\\" print(is_valid_code(sequence)) # Output: True ``` Example 2 ```python sequence = \\"([])\\" print(is_valid_code(sequence)) # Output: True ``` Example 3 ```python sequence = \\"([)]\\" print(is_valid_code(sequence)) # Output: False ``` Example 4 ```python sequence = \\"((()))\\" print(is_valid_code(sequence)) # Output: True ``` Example 5 ```python sequence = \\"{[}\\" print(is_valid_code(sequence)) # Output: False ```","solution":"def is_valid_code(sequence: str) -> bool: Return True if the input sequence of brackets is valid. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in sequence: if char in bracket_map.values(): # If the char is an opening bracket, push onto stack stack.append(char) elif char in bracket_map.keys(): # If the char is a closing bracket, check if it matches the top of stack if stack and stack[-1] == bracket_map[char]: stack.pop() else: return False else: # If the char is not a valid bracket character return False return not stack"},{"question":"You are given a square matrix of size n times n filled with non-negative integers. You need to find a fixed-size submatrix (of size k times k) such that the sum of its elements is maximized. If there are multiple submatrices with the same maximum sum, you can return the top-left corner of any one of them. -----Input----- The first line contains two integers n and k (1 le k le n le 1000), denoting the size of the matrix and the size of the submatrix respectively. Each of the next n lines contains n integers a_{i,j} (0 le a_{i,j} le 100), denoting the elements of the matrix. -----Output----- Output two integers r and c (1 le r, c le n-k+1), denoting the row and column indices of the top-left corner of the submatrix with the maximum sum. Indices are 1-based. -----Examples----- Input 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 3 3 Input 5 3 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 Output 1 3","solution":"def find_max_sum_submatrix(n, k, matrix): max_sum = -1 top_left = (0, 0) # Create a prefix sum matrix prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1] for i in range(1, n - k + 2): for j in range(1, n - k + 2): total = ( prefix_sum[i + k - 1][j + k - 1] - prefix_sum[i - 1][j + k - 1] - prefix_sum[i + k - 1][j - 1] + prefix_sum[i - 1][j - 1] ) if total > max_sum: max_sum = total top_left = (i, j) return top_left[0], top_left[1]"},{"question":"Zephyr loves working with binary trees, and he recently came across a challenge that involves finding the sum of all nodes at a particular depth in a binary tree. Specifically, you are given a binary tree and a depth value `d`. Your task is to compute the sum of all the node values located at depth `d` in the tree. The depth of the root node is considered 0. If there are no nodes at the specified depth `d`, the sum is 0. # Input: The first line contains a single integer `t` (1 leq t leq 100) - the number of test cases. For each test case: - The first line contains a single integer `d` (0 leq d leq 100) — the depth at which you need to compute the sum. - The second line contains a single integer `n` (1 leq n leq 10^5) — the number of nodes in the tree. - The next `n` lines each contain three integers `val`, `left`, and `right`. `val` is the value of the node, `left` is the position of the left child (0 if no left child), and `right` is the position of the right child (0 if no right child). # Output: For each test case, output a single integer — the sum of all node values at depth `d`. # Example: Input: ``` 2 2 5 1 2 3 2 4 5 3 0 0 4 0 0 5 0 0 1 3 6 2 3 2 0 0 3 0 0 ``` Output: ``` 12 5 ``` # Explanation: In the first test case, the tree is: ``` 1 / 2 3 / 4 5 ``` At depth 2, the node values are [4, 5], so the sum is 4 + 5 = 9. In the second test case, the tree is: ``` 6 / 2 3 ``` At depth 1, the node values are [2, 3], so the sum is 2 + 3 = 5.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def create_tree(node_list): nodes = {} for idx, node in enumerate(node_list): val, left, right = node if idx + 1 not in nodes: nodes[idx + 1] = TreeNode(val) nodes[idx + 1].val = val if left != 0: if left not in nodes: nodes[left] = TreeNode() nodes[idx + 1].left = nodes[left] if right != 0: if right not in nodes: nodes[right] = TreeNode() nodes[idx + 1].right = nodes[right] return nodes[1] def sum_at_depth(root, depth): if not root: return 0 if depth == 0: return root.val left_sum = sum_at_depth(root.left, depth - 1) if root.left else 0 right_sum = sum_at_depth(root.right, depth - 1) if root.right else 0 return left_sum + right_sum def find_sums_of_depths(test_cases): results = [] for d, n, nodes in test_cases: tree = create_tree(nodes) results.append(sum_at_depth(tree, d)) return results"},{"question":"You are given an integer array nums. You need to construct an integer array result where result[i] is equal to the product of all the elements of nums except nums[i]. Implement a function `productExceptSelf(nums)` that takes an array of integers and returns the result array. You are required to solve this problem without using the division operation and in O(n) time complexity. # Constraints * 2 leq nums.length leq 10^5 * -30 leq nums[i] leq 30 * The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer. # Input Input is given from the standard input in the following format: ``` n nums_0 nums_1 ... nums_{n-1} ``` # Output Output the resulting array as space-separated integers in a single line. # Examples Input ``` 4 1 2 3 4 ``` Output ``` 24 12 8 6 ``` Input ``` 5 -1 1 0 -3 3 ``` Output ``` 0 0 9 0 0 ```","solution":"def productExceptSelf(nums): n = len(nums) result = [1] * n left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] right_product = 1 for i in range(n-1, -1, -1): result[i] *= right_product right_product *= nums[i] return result"},{"question":"Write a function that takes a string representing a sentence and returns the shortest word in the sentence. If there are multiple words with the same length, return the first one that appears in the sentence. The function should: - Take a single string as its argument. - Split the string into words based on spaces. - Return the shortest word found. Examples: ``` shortest_word(\\"The quick brown fox jumps over the lazy dog\\") -> \\"The\\" shortest_word(\\"Coding is fun\\") -> \\"is\\" shortest_word(\\"A journey of a thousand miles begins with a single step\\") -> \\"A\\" ```","solution":"def shortest_word(sentence): Returns the shortest word in the sentence. Parameters: sentence (str): A string representing a sentence. Returns: str: The shortest word in the sentence. words = sentence.split() shortest = words[0] for word in words: if len(word) < len(shortest): shortest = word return shortest"},{"question":"Given a directed graph with `n` nodes and `m` edges, each node has a value associated with it. Determine the maximum value that one can collect by starting at any node and following the directed edges to reach other nodes, ensuring that each node is visited at most once. If it is not possible to collect any value from the given graph (i.e., the graph has no nodes or edges), return 0. -----Input----- The first line contains two integers `n` and `m` (0 le n le 10^{5}, 0 le m le 10^{5}) — the number of nodes and edges in the graph, respectively. The second line contains `n` integers v_1, v_2, ldots, v_n (0 le v_i le 10^6) — the values associated with the nodes. The next `m` lines each contain two integers `u` and `v` (1 le u, v le n) — indicating there is a directed edge from node `u` to node `v`. -----Output----- Output a single integer — the maximum value that can be collected by starting at any node and following the directed edges to reach other nodes. -----Examples----- Input 4 3 5 10 20 15 1 2 2 3 3 4 Output 50 Input 4 2 8 6 7 3 1 2 2 3 Output 21 Input 5 0 10 20 30 40 50 Output 50 -----Note----- In the first example, the optimal path is from node 1 to node 4, collecting values 5 + 10 + 20 + 15 = 50. In the second example, the optimal path is from node 1 to node 3, collecting values 8 + 6 + 7 = 21. In the third example, since there are no edges, the maximum value that can be collected is the highest value among the nodes, which is 50.","solution":"def max_collectable_value(n, m, values, edges): from collections import defaultdict, deque if n == 0: return 0 graph = defaultdict(list) indegree = [0] * n for u, v in edges: graph[u-1].append(v-1) indegree[v-1] += 1 dp = values[:] # dp[i] stores the max collectable value ending at node i # Perform topological sort using Kahn\'s algorithm queue = deque([i for i in range(n) if indegree[i] == 0]) while queue: node = queue.popleft() for neighbor in graph[node]: dp[neighbor] = max(dp[neighbor], dp[node] + values[neighbor]) indegree[neighbor] -= 1 if indegree[neighbor] == 0: queue.append(neighbor) return max(dp)"},{"question":"A group of friends are planning an outing, and they need to rent vehicles. Each vehicle has a maximum capacity, and they want to ensure that everyone gets a seat. Given the number of friends and the available vehicles with their capacities, find the minimum number of vehicles required to accommodate everyone. Your task is to help them determine the minimum number of vehicles required. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Each test case contains two lines: - The first line contains two integers, N (the number of friends) and M (the number of available vehicles). - The second line contains M space-separated integers, where each integer represents the capacity of a vehicle. ------ Output ------ For each test case, output a single integer on a new line corresponding to the minimum number of vehicles needed to accommodate all friends. If it is not possible to accommodate all friends, output -1. ------ Constraints ------- 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 1 ≤ Capacity of each vehicle ≤ 1000 ------ Example ------ Input: 2 7 3 2 3 5 10 2 3 4 Output: 2 -1 ------ Explanation ------ Test case 1: - There are 7 friends and 3 vehicles with capacities [2, 3, 5]. - You can use the 3-capacity and 5-capacity vehicles to accommodate all 7 friends: (3 + 5 = 8 which is sufficient). - Therefore, the minimum number of vehicles required is 2. Test case 2: - There are 10 friends and 2 vehicles with capacities [3, 4]. - Even using both vehicles, you can only accommodate 7 friends (3 + 4 = 7). - Therefore, it is not possible to accommodate all friends with the given vehicles and the output is -1.","solution":"def min_vehicles_required(friends, vehicles): vehicles.sort(reverse=True) total_capacity = 0 vehicle_count = 0 for capacity in vehicles: total_capacity += capacity vehicle_count += 1 if total_capacity >= friends: return vehicle_count return -1 def process_test_cases(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] capacities = test_cases[i][1] result = min_vehicles_required(N, capacities) results.append(result) return results"},{"question":"A delivery company operates a machine that delivers packages in a grid city that consists of N x N intersections. Each intersection can be denoted by coordinates (i, j) such that 1 ≤ i, j ≤ N. The machine can navigate through the intersections along the vertical and horizontal roads connecting them. For security reasons, some intersections have restrictions, meaning that the delivery machine is not allowed to pass through these intersections. The machine starts from the top-left corner of the city at intersection (1, 1) and needs to deliver a package to the bottom-right corner at intersection (N, N). The machine can move vertically or horizontally to an adjacent intersection, but it cannot pass through restricted intersections. Write a function `deliver_package` that will calculate the minimum number of intersections the machine has to pass in order to reach the target intersection (N, N) from the start intersection (1, 1). The function should return -1 if it\'s impossible to reach the target due to restrictions. ``` Input format: - The first line contains a single integer N (2 ≤ N ≤ 1000) - the size of the grid city. - The next N lines consist of N integers, each either 0 or 1. The integer 0 implies that the intersection is passable, and the integer 1 implies that the intersection is restricted. Output format: - Return a single integer representing the minimum number of intersections to pass through to reach (N, N) from (1, 1), or -1 if it is impossible to do so. Example: Input: 5 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 0 1 0 Output: 9 Explanation: The machine can follow the path (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (3,4) -> (4,4) -> (5,4) -> (5,5), totaling 9 intersections passed. ```","solution":"from collections import deque def deliver_package(N, grid): Calculates the minimum number of intersections to pass through from (1, 1) to (N, N). Args: N : int - the size of the grid city. grid : List[List[int]] - the grid city with 0 for passable and 1 for restricted intersections. Returns: int - the minimum number of intersections to pass through or -1 if it\'s impossible. if grid[0][0] == 1 or grid[N-1][N-1] == 1: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0)]) visited = set([(0, 0)]) steps = 1 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (N-1, N-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1"},{"question":"In a city grid, there is one service station located at point (0, 0) on the coordinate plane. The city is represented as a 2D grid with roads only running horizontally or vertically. You are given a list of deliveries, where each delivery is represented as a tuple (x, y) indicating that a package needs to be delivered to the coordinate (x, y). To optimize the delivery route, the service station wants to know the total minimum distance required to deliver all packages if exactly one package can be delivered at a time, and the route starts and ends at the service station (0, 0) for each delivery. Input The first line contains an integer n (1 ≤ n ≤ 105), the number of deliveries. The next n lines contain two integers x and y (-109 ≤ x, y ≤ 109), the coordinates of the delivery locations. Output Output a single integer — the total minimum distance to deliver all packages. Examples Input 3 1 2 3 4 -1 -2 Output 20 Explanation: The route for the deliveries would be as follows: - From (0, 0) to (1, 2) and back: distance = 2 + 1 + 2 + 1 = 6 - From (0, 0) to (3, 4) and back: distance = 4 + 3 + 4 + 3 = 14 - From (0, 0) to (-1, -2) and back: distance = 2 + 1 + 2 + 1 = 6 Total distance = 6 + 14 + 6 = 26","solution":"def total_minimum_distance(n, deliveries): Calculates the total minimum distance required to deliver all packages starting and ending at the service station (0, 0) for each delivery. :param n: Number of deliveries :param deliveries: List of coordinates (x, y) for each delivery :return: Total minimum distance total_distance = 0 for x, y in deliveries: # Distance from (0, 0) to (x, y) and back total_distance += 2 * (abs(x) + abs(y)) return total_distance"},{"question":"You are a caretaker in a vast rectangular garden. The garden is divided into an M x N grid of cells, each of which can be either empty or occupied by a plant. If a plant is left unattended, it will spread to its 4 neighboring cells (up, down, left, right) simultaneously after a day if those cells are empty. However, you can add barriers (which plants cannot cross) in certain empty cells to prevent plants from spreading. Your task is to enclose as many plants as possible using the minimum number of barriers. Write a program that finds the minimum number of barriers needed to enclose all plants so that no plant can spread further. **Constraints:** * 1 ≤ M, N ≤ 200 * The garden grid is represented by an M x N boolean matrix G, where G[i][j] = 1 denotes a plant, and G[i][j] = 0 denotes an empty cell. *Input:* The first line contains two integers M and N, the dimensions of the garden grid. The next M lines each contain N integers (either 0 or 1), representing the garden grid. *Output:* Print a single integer, the minimum number of barriers needed to enclose all plants. *Examples:* *Example 1:* *Input:* 3 3 0 1 0 1 0 0 0 0 1 *Output:* 6 *Example 2:* *Input:* 4 4 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 *Output:* 12","solution":"def min_barriers(M, N, garden): from collections import deque def is_valid(i, j): return 0 <= i < M and 0 <= j < N and garden[i][j] == 0 def get_neighbors(i, j): neighbors = [] for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]: ni, nj = i + di, j + dj if is_valid(ni, nj): neighbors.append((ni, nj)) return neighbors barriers = 0 visited = [[False]*N for _ in range(M)] queue = deque() for i in range(M): for j in range(N): if garden[i][j] == 1 and not visited[i][j]: visited[i][j] = True queue.append((i, j)) while queue: ci, cj = queue.popleft() for ni, nj in get_neighbors(ci, cj): if not visited[ni][nj]: visited[ni][nj] = True barriers += 1 queue.append((ni, nj)) return barriers # Function to convert input to the required format and run the main logic def main(input_string): lines = input_string.splitlines() M, N = map(int, lines[0].split()) garden = [list(map(int, line.split())) for line in lines[1:]] return min_barriers(M, N, garden)"},{"question":"**Problem Statement** A robot is navigating an infinite grid starting at position (0, 0). It can move up, down, left, or right with commands \\"U\\", \\"D\\", \\"L\\", and \\"R\\", respectively. Given a sequence of commands, your task is to determine if the robot returns to the origin after executing all the commands. Write a function `is_back_to_origin` that takes a string `commands` as input and returns `True` if the robot returns to the origin, or `False` otherwise. Input - A single string `commands` that contains a sequence of characters, each being one of \\"U\\", \\"D\\", \\"L\\", \\"R\\". The length of the string does not exceed 10^5. Output - Return `True` if the robot returns to the origin after executing all the commands, otherwise return `False`. Example - Input: \\"UD\\" Output: True - Input: \\"LLRR\\" Output: True - Input: \\"UDLDR\\" Output: False Constraints - The command string `commands` will only contain characters \'U\', \'D\', \'L\', \'R\'. - The length of the command string will not exceed 10^5. Function Signature ```python def is_back_to_origin(commands: str) -> bool: ``` **Note:** A robot returns to the origin if, after executing all commands, it is back at the position (0, 0). The commands \\"U\\" and \\"D\\" neutralize each other as do \\"L\\" and \\"R\\".","solution":"def is_back_to_origin(commands: str) -> bool: Determines if the robot returns to the origin (0, 0) after executing all the commands. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x == 0 and y == 0"},{"question":"# Problem October and November seeing the changing colors of leaves, which can produce some beautiful scenery. Each row of trees has leaves starting to change color at different times, creating wonderful patterns. Given an array of `n` integers, each representing the number of days it takes for the leaves of each tree to fully change color, you want to determine the earliest and latest days you can experience the changes in the color spectrum while walking along the row of trees. # Task Write a function `color_spectrum_days` that takes an integer array `days` where each element represents the number of days required for a particular tree\'s leaves to fully change color. The function should return a tuple where the first element is the earliest day and the second element is the latest day you can experience the full colors along this row of trees. # Requirements - The array can have between 1 and 1000 elements (inclusive). - Each element in the array (days[i]) will be a non-negative integer between 0 and 10000 (inclusive). # Example For `days = [10, 15, 20, 25, 30]`, the output should be `(10, 30)`. For `days = [5, 7, 8, 2, 3]`, the output should be `(2, 8)`. For `days = [50, 45, 80, 65, 55]`, the output should be `(45, 80)`. For `days = [3, 3, 3, 3, 3]`, the output should be `(3, 3)`. # Note - The minimum length of the array is 1, so the earliest and latest days will be equal in that case. - You can assume that the input list is non-empty and contains at least one element.","solution":"def color_spectrum_days(days): Returns the earliest and latest days you can experience the full colors along the row of trees. Args: - days (list[int]): A list of integers representing the number of days it takes for each tree\'s leaves to fully change color. Returns: - tuple: A tuple containing the earliest and latest days of full color change. earliest_day = min(days) latest_day = max(days) return (earliest_day, latest_day)"},{"question":"You are given a list of words. Your task is to find all pairs of different words that are anagrams of each other. Anagrams are words that can be formed by rearranging the letters of another word, using all the original letters exactly once. Ignore spaces and case differences while determining if two words are anagrams. ------ Input ------ The first line contains an integer N, the number of words in the list (1 ≤ N ≤ 1000). Each of the next N lines contains a single word consisting of lowercase and uppercase English letters (a-z, A-Z) and spaces. ------ Output ------ Output each pair of words that are anagrams of each other, one pair per line. Output the pairs in lexicographical order (alphabetical order). Each pair must be printed in a format: \\"word1 word2\\". If there are multiple pairs, print them in lexicographical order based on the first word. If there are no pairs, print \\"No anagrams found\\". ----- Sample Input 1 ------ 6 listen silent enlist google gogole cat ----- Sample Output 1 ------ enlist listen enlist silent gogole google listen silent ----- Explanation 1 ------ The pairs \\"listen\\" and \\"silent\\", \\"enlist\\" and \\"silent\\", \\"enlist\\" and \\"listen\\" are anagrams of each other. Also, \\"google\\" and \\"gogole\\" are anagrams of each other. \\"cat\\" does not have any anagrams in the list. Note that the output pairs are sorted in lexicographical order.","solution":"def find_anagram_pairs(words): Given a list of words, finds all pairs of different words that are anagrams of each other. Args: words (list of str): List of words. Returns: list of tuple: List of tuples containing pairs of anagrams. def sorted_word(word): return \'\'.join(sorted(word.replace(\' \', \'\').lower())) anagram_pairs = [] checked_pairs = set() words_sorted = [(word, sorted_word(word)) for word in words] for i in range(len(words_sorted)): for j in range(i + 1, len(words_sorted)): word1, sorted1 = words_sorted[i] word2, sorted2 = words_sorted[j] if sorted1 == sorted2: pair = tuple(sorted([word1, word2])) if pair not in checked_pairs: checked_pairs.add(pair) anagram_pairs.append(pair) anagram_pairs.sort() return anagram_pairs # To facilitate easier reading of the function. def main(N, word_list): pairs = find_anagram_pairs(word_list) if pairs: for pair in pairs: print(f\\"{pair[0]} {pair[1]}\\") else: print(\\"No anagrams found\\")"},{"question":"Implement a function `find_path(matrix, start, end)` that determines if there is a path from the `start` position to the `end` position in a given 2D grid `matrix`. The function should adhere to the following rules: - The `matrix` is a 2D list consisting of 0s and 1s. - 0 represents a walkable path, and 1 represents a wall. - You can move up, down, left, or right but cannot move diagonally. - You cannot move through the walls (1s). The function should return `True` if there exists a path from `start` to `end`, and `False` otherwise. # Input `matrix`: A 2D list of integers where each integer is either 0 or 1. `start`: A tuple `(x, y)` representing the starting position in the grid. `end`: A tuple `(x, y)` representing the end position in the grid. # Output Return `True` if there is a path from `start` to `end`. Otherwise, return `False`. # Constraints - The size of the `matrix` will be between 1x1 and 1000x1000. - The coordinates in `start` and `end` are valid and inside the `matrix`. # Example Example 1 Input: ``` matrix = [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0] ] start = (0, 0) end = (3, 3) ``` Output: ``` True ``` Example 2 Input: ``` matrix = [ [0, 1, 1, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0] ] start = (0, 0) end = (3, 3) ``` Output: ``` False ```","solution":"from collections import deque def is_valid_move(matrix, x, y): return 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] == 0 def find_path(matrix, start, end): if start == end: return True rows, cols = len(matrix), len(matrix[0]) visited = [[False for _ in range(cols)] for _ in range(rows)] queue = deque([start]) visited[start[0]][start[1]] = True directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] while queue: x, y = queue.popleft() for dx, dy in directions: new_x, new_y = x + dx, y + dy if (new_x, new_y) == end: return True if is_valid_move(matrix, new_x, new_y) and not visited[new_x][new_y]: visited[new_x][new_y] = True queue.append((new_x, new_y)) return False"},{"question":"Create a function that takes a list of integers and returns a new list with the elements rearranged so that all even numbers appear first, followed by all odd numbers. The relative order of the even and odd numbers should be preserved. ```Python rearrange([3, 1, 2, 4]) # should return [2, 4, 3, 1] rearrange([7, 3, 4, 1, 2]) # should return [4, 2, 7, 3, 1] rearrange([]) # should return [] ``` ```Haskell rearrange [3, 1, 2, 4] -- should return [2, 4, 3, 1] rearrange [7, 3, 4, 1, 2] -- should return [4, 2, 7, 3, 1] rearrange [] -- should return [] ```","solution":"def rearrange(lst): Takes a list of integers and returns a new list with the elements rearranged so that all even numbers appear first, followed by all odd numbers. evens = [x for x in lst if x % 2 == 0] odds = [x for x in lst if x % 2 != 0] return evens + odds"},{"question":"Given a string s consisting of alphanumeric characters and the task to remove all characters that have already appeared previously in the string. Return the resulting string after removal of duplicates without changing the order of characters. Example 1: Input: s = \\"bananas\\" Output: \\"bans\\" Explanation: All \'a\' and \'n\' after their first appearances are removed. Example 2: Input: s = \\"programming\\" Output: \\"progamin\\" Explanation: All \'r\' and \'m\' after their first appearances are removed. Your Task: You don\'t need to read input or print anything. Your task is to complete the function removeDuplicates() which takes the string s as input parameters and returns the resulting string after removing duplicates. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= |s| <= 10^5","solution":"def removeDuplicates(s): Returns a string with all characters that have already appeared previously removed. seen = set() result = [] for char in s: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"Given a string S consisting of lowercase alphabets, find the shortest palindromic subsequence that can be formed by optionally removing some characters from S. A subsequence is a sequence that appears in the same relative order, but not necessarily consecutively. If there are multiple such subsequences of the same length, return the lexicographically smallest one. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - The next T lines each contain a single string S. ------ Output Format ------ For each test case, output the shortest palindromic subsequence. If there are multiple, output the lexicographically smallest one. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 The sum of lengths of all strings over all test cases does not exceed 2 cdot 10^5. ------ Sample Input 1 ------ 3 abca racecar abcdef ------ Sample Output 1 ------ a a a ------ Explanation 1 ------ Test case 1: The shortest palindromic subsequences are `a`, `b`, `c`, but `a` is lexicographically smallest. Test case 2: Since the string is already a palindrome, the result is the first character `a`. Test case 3: The string has no repeating characters, so any single character is a palindromic subsequence. The smallest one lexicographically is `a`.","solution":"def find_shortest_palindromic_subsequence(s): Returns the shortest palindromic subsequence which is lexicographically smallest. return min(s) def process_test_cases(test_cases): results = [] for s in test_cases: results.append(find_shortest_palindromic_subsequence(s)) return results"},{"question":"Given an array of integers, you are required to find a subarray (containing at least one number) which has the largest product. Your task is to write a function that returns the product of this subarray. Note that the subarray must be contiguous. **Input Format:** The input consists of a single line of integers separated by spaces. Each integer represents a value in the array. **Output Format:** Output a single integer, the largest product of a subarray. **Constraints:** - The array must contain at least one integer. - The array length will not exceed 200. - Each integer in the array is between -10 and 10. **Sample Input 1:** ``` 6 -3 -10 0 2 ``` **Sample Output 1:** ``` 180 ``` **Sample Input 2:** ``` 2 3 -2 4 ``` **Sample Output 2:** ``` 6 ``` **Explanation:** In the first example, the subarray [6, -3, -10] has the largest product, which is `6 * -3 * -10 = 180`. In the second example, the subarray [2, 3] has the largest product, which is `2 * 3 = 6`.","solution":"def max_product_subarray(nums): if not nums: return 0 max_product = nums[0] min_product = nums[0] result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result"},{"question":"Write a function that takes a string as an argument and returns the highest frequency character in the string. If there are multiple characters with the same highest frequency, return the one that appears first in the string. Examples: ``` highest_frequency_character(\\"aabbbcc\\") should return \\"b\\" highest_frequency_character(\\"aabbcc\\") should return \\"a\\" highest_frequency_character(\\"aabbc\\") should return \\"a\\" highest_frequency_character(\\"xyz\\") should return \\"x\\" ```","solution":"def highest_frequency_character(s): Returns the highest frequency character in the string `s`. If there are multiple characters with the same highest frequency, returns the one that appears first in the string. from collections import Counter if not s: return None # Handle empty string case count = Counter(s) max_count = max(count.values()) for char in s: if count[char] == max_count: return char"},{"question":"Problem description: In a galaxy far away, there are only two kinds of cash denominations: marks and birrs. A certain currency transaction system requires that any given amount can be represented using combinations of these two denominations in the fewest number of notes. Your task is to determine the minimum number of cash notes (marks and birrs) required to form any given amount. You are given two integers `M` and `B`, representing the denominations of marks and birrs respectively, and an integer `X` representing the required amount. Find the minimum number of notes needed to sum up to `X` using denominations `M` and `B`. Input The input consists of three integers `M`, `B`, and `X`. Output Print the minimum number of notes required to form the amount `X` using denominations `M` and `B`. If it is not possible to form the amount `X` using given denominations, print `-1`. Constraints 1 ≤ M, B ≤ 1000 1 ≤ X ≤ 10^6 Example Input: 4 5 23 Output: 5 Explanation To form the amount 23 using denominations 4 and 5, the minimal number of notes can be achieved as follows: 4 + 4 + 5 + 5 + 5 = 23 Hence you need 5 notes in total.","solution":"def min_notes(M, B, X): Returns the minimum number of notes required to sum up to X using denominations M and B. If it is not possible to sum up to X using the given denominations, returns -1. if M > B: M, B = B, M min_notes_required = float(\'inf\') found_solution = False # Try every possible number of M notes from 0 to X//M notes for m_count in range(X // M + 1): remainder = X - m_count * M if remainder % B == 0: b_count = remainder // B total_notes = m_count + b_count min_notes_required = min(min_notes_required, total_notes) found_solution = True return min_notes_required if found_solution else -1"},{"question":"Given an array of unique positive integers, determine if it contains a 132 pattern. A 132 pattern in a sequence is a subsequence of three elements A[i], A[j], and A[k] such that i < j < k and A[i] < A[k] < A[j]. Return true if there is a 132 pattern in the array. Otherwise, return false. Example 1: Input: [1, 2, 3, 4] Output: false Explanation: There is no 132 pattern in the array. Example 2: Input: [3, 1, 4, 2] Output: true Explanation: There is a 132 pattern in the array: [1, 4, 2]. Example 3: Input: [1, 3, 4, 2] Output: true Explanation: There is a 132 pattern in the array: [1, 4, 2]. Note: - The array length will be in the range [1, 1000]. - Elements of the array will be in the range [-1000000000, 1000000000].","solution":"def find132pattern(nums): Determine if the given array contains a 132 pattern. Args: nums: List[int] - list of unique positive integers Returns: bool - True if there is a 132 pattern, False otherwise. # Early exit if the list is too small to form a 132 pattern if len(nums) < 3: return False # Stack to keep potential 3rd elements in descending order stack = [] # This will keep track of the middle element in 132 third_element = float(\'-inf\') # Traverse the list from the end to the beginning for i in reversed(range(len(nums))): # If we find the 1st element which is smaller than the third_element if nums[i] < third_element: return True # Update stack and third_element while stack and nums[i] > stack[-1]: third_element = stack.pop() stack.append(nums[i]) return False"},{"question":"# Find the Maximum Product Subarray Given an integer array `nums`, find the contiguous subarray within an array (containing at least one number) which has the largest product. The input array might contain both negative and positive numbers. The solution should be efficient with a time complexity of O(n), where n is the number of elements in the input array. **Input** - The first line contains an integer `T` (1 ≤ T ≤ 100), the number of test cases. - For each test case: - The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of elements in the array. - The second line contains `n` space-separated integers representing the elements of the array `nums` (-10 ≤ nums[i] ≤ 10). **Output** - For each test case, output a single integer representing the maximum product of any contiguous subarray of the given array. **Example** **Input:** ``` 2 4 2 3 -2 4 5 -2 0 -1 0 2 ``` **Output:** ``` 6 2 ``` **Explanation:** In the first test case, the subarray [2,3] has the maximum product of 6. In the second test case, the single element subarray [2] has the maximum product of 2.","solution":"def max_product(nums): Returns the maximum product of any contiguous subarray. if not nums: return 0 max_product = min_product = result = nums[0] for num in nums[1:]: if num < 0: max_product, min_product = min_product, max_product max_product = max(num, max_product * num) min_product = min(num, min_product * num) result = max(result, max_product) return result def max_product_subarray(t, test_cases): results = [] for i in range(t): n, nums = test_cases[i] result = max_product(nums) results.append(result) return results"},{"question":"In a distant land, there exists a special tree species called \\"Balanced Tree.\\" A tree is considered a balanced tree if the absolute difference between the number of nodes in its two subtrees is at most 1. You are given a list of integers representing the nodes of a binary tree. Your task is to determine if it is possible to rearrange these nodes to form a balanced binary tree. Each node is unique, and for the tree to be balanced, each subtree must meet the criteria of being a balanced tree. Input The input consists of a single line of space-separated integers representing the nodes of the binary tree (1 ≤ the number of nodes ≤ 100, -1000 ≤ value of each node ≤ 1000). Output Print \\"Yes\\" if the nodes can be rearranged to form a balanced binary tree. Otherwise, print \\"No\\". Examples Input 1 2 3 4 5 Output Yes Input 1 2 3 4 5 6 7 8 9 10 Output Yes Input 1 2 Output Yes Input 1 2 3 4 5 6 Output Yes Input 1 Output Yes Input 1 2 3 4 6 Output Yes Explanation In the first example, the nodes can be rearranged into a binary tree such as: 3 / 2 4 / 1 5 This tree is balanced since the difference of nodes in the left and right subtrees of any node do not differ by more than 1. In the second example, the nodes can be rearranged into a balanced binary tree with either 5 or 6 as the root node. In the third example, the tree with nodes (1), (2) or (1 2) is trivially balanced. In the fourth example, the nodes can be rearranged into a balanced binary tree which keeps the subtrees balanced till the leaf nodes. In the fifth example, a single node is always balanced. In the sixth example, the nodes can be rearranged to form a balanced binary tree as in example one or other similar configurations.","solution":"def can_form_balanced_tree(nodes): Determine if it\'s possible to rearrange the nodes to form a balanced binary tree. Parameters: nodes (list): List of integers representing the nodes. Returns: str: \\"Yes\\" if it\'s possible to rearrange the nodes to form a balanced binary tree, otherwise \\"No\\". n = len(nodes) # A balanced binary tree has height log2(n). We check if the number of nodes # is such that it can form a complete binary tree. import math # height of a complete binary tree height = math.ceil(math.log2(n + 1)) - 1 # Complete nodes a given height complete_nodes = (1 << (height + 1)) - 1 # Number of nodes necessary for a balanced tree at a given height # should be between the perfect and the perfect of the next layer minus the necessary nodes. return \\"Yes\\" if (complete_nodes - n) <= (1 << height) else \\"No\\""},{"question":"Bob loves to solve problems involving arrays and permutations. One day, he encounters a challenging problem. Bob has an array `A` of size `N` consisting of integers from 1 to `N` in some arbitrary order. Bob has also defined a permutation operation called a \\"swap operation\\" as follows: - Choose any two distinct indices `i` and `j` (1 ≤ i, j ≤ N) such that |i - j| ≤ 2. - Swap the elements `A[i]` and `A[j]`. Bob\'s goal is to determine whether it is possible to sort the array in non-decreasing order using a series of swap operations. Write a function that returns \\"YES\\" if it is possible to sort the array using the allowed swap operations, and \\"NO\\" otherwise. -----Constraints----- - 1 ≤ N ≤ 10^5 - 1 ≤ A[i] ≤ N (All integers from 1 to N will appear exactly once in the array) -----Input----- The input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print \\"YES\\" if it is possible to sort the array using the allowed swap operations, and \\"NO\\" otherwise. -----Sample Input----- 4 3 1 4 2 -----Sample Output----- YES With the given array [3, 1, 4, 2], it is possible to sort it in the following steps: - Swap A[1] and A[2] to get [1, 3, 4, 2] - Swap A[3] and A[4] to get [1, 3, 2, 4] - Swap A[2] and A[3] to get [1, 2, 3, 4] -----Sample Input----- 4 4 3 2 1 -----Sample Output----- NO In this case, it is not possible to sort the array using the given swap operations.","solution":"def is_possible_to_sort(n, A): Determine if it is possible to sort the array A of size n using the allowed swap operations. Args: n (int): the size of the array A A (list): the array of integers Returns: str: \\"YES\\" if it is possible to sort the array, otherwise \\"NO\\" for i in range(n): while A[i] != i + 1: diff = abs(A[i] - (i + 1)) if diff > 2: return \\"NO\\" if i + 1 < n and A[i + 1] == i + 1: A[i], A[i + 1] = A[i + 1], A[i] elif i + 2 < n and A[i + 2] == i + 1: A[i], A[i + 2] = A[i + 2], A[i] else: return \\"NO\\" return \\"YES\\""},{"question":"You are given an m x n matrix of characters board and a string word. Write a function that returns true if word exists in the board. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once. Example 1: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], word = \\"ABCCED\\" Output: true Example 2: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], word = \\"SEE\\" Output: true Example 3: Input: board = [ [\'A\',\'B\',\'C\',\'E\'], [\'S\',\'F\',\'C\',\'S\'], [\'A\',\'D\',\'E\',\'E\'] ], word = \\"ABCB\\" Output: false Note: - m and n are the lengths of the board\'s rows and columns, respectively.","solution":"def exist(board, word): Determines if a word exists in a board constructed from sequentially adjacent cells. def dfs(board, word, i, j, word_index): if word_index == len(word): return True if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[word_index]: return False temp = board[i][j] board[i][j] = \\"#\\" # mark as visited found = ( dfs(board, word, i + 1, j, word_index + 1) or dfs(board, word, i - 1, j, word_index + 1) or dfs(board, word, i, j + 1, word_index + 1) or dfs(board, word, i, j - 1, word_index + 1) ) board[i][j] = temp # unmark return found for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == word[0] and dfs(board, word, i, j, 0): return True return False"},{"question":"A developer wants to create a simple text-based game. In this game, there is a grid of cells, each containing some quantity of gold. The game starts with the player\'s character in the top-left cell (1,1). The player can move down or to the right and collects gold from each cell they visit. The objective is to reach the bottom-right cell while collecting the maximum amount of gold possible. Write a function that computes the maximum amount of gold the player can collect from the top-left to the bottom-right cell of the grid. The function should take in an integer n and a n times n matrix representing the grid of gold, and output a single integer that represents the maximum amount of gold that can be collected. -----Input----- The first line contains an integer n (1 le n le 100) — the size of the grid. Each of the next n lines contains n integers g_{ij} (0 le g_{ij} le 100) — the amount of gold in the i_{th} row and j_{th} column of the grid. -----Output----- The output should be a single integer, the maximum amount of gold that can be collected. -----Examples----- Input 3 1 3 1 1 5 1 4 2 1 Output 12 Input 2 1 2 3 4 Output 8 -----Note----- In the first example, the player can collect a maximum of 12 gold by following the path 1->3->5->2->1. In the second example, the player can collect a maximum of 8 gold by following the path 1->2->4.","solution":"def max_gold(n, grid): if n == 0: return 0 dp = [[0] * n for _ in range(n)] dp[0][0] = grid[0][0] for i in range(n): for j in range(n): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[-1][-1]"},{"question":"John is a treasure hunter who uses digits on old artifacts to decipher cryptographic maps. Recently, he discovered an artifact containing a sequence of non-negative integers. However, the sequence is cluttered with duplicate digits, making it hard for John to interpret the correct numeric values. Your task is to help John extract the sequence of integers from the artifact by removing any subsequent occurrences of a digit after its first appearance. The order of digits in the resulting sequence should be the same as their first occurrence in the original sequence. ----- Input ----- A single line containing a sequence of non-negative integers (1 ≤ length of sequence ≤ 1000). Each integer in the sequence is between 0 and 9 (inclusive). ----- Output ----- Print the sequence of integers after removing subsequent occurrences of digits. ----- Examples ----- Input 1234321 Output 1234 Input 9876543210 Output 9876543210","solution":"def extract_unique_digits(sequence): Extracts unique digits from a sequence, preserving the order of their first occurrence. Args: sequence (str): A string containing a sequence of digits. Returns: str: A string with subsequent occurrences of digits removed. seen = set() result = [] for digit in sequence: if digit not in seen: seen.add(digit) result.append(digit) return \'\'.join(result)"},{"question":"In Chefville, every solar system not maintained properly by the people has to pay a penalty to Chef. Chef has now provided a special strategy where you can allocate credits to maintenance tasks and claim credit exemption for the same amount. Given the total number of credits C you have and the minimum number of credits M required to avoid penalty, determine the minimum credits you need to allocate to maintenance to avoid paying the penalty. ------ Input Format ------ - The first line of input contains a single integer N, denoting the number of test cases. - Each test case consists of a single line of input with two space separated integers C and M representing the total credits you have and the minimum credits required to avoid the penalty. ------ Output Format ------ For each test case, output a single integer representing the minimum credits you need to allocate to maintenance. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ M < C ≤ 100 ----- Sample Input 1 ------ 3 10 3 7 2 5 1 ----- Sample Output 1 ------ 7 5 4 ----- Explanation 1 ------ Test case 1: The minimum credits required to avoid penalty is 3. Since you have 10 credits, you need to allocate at least 7 credits to maintenance. After allocating 7 credits, you will remain with effective credits 10 - 7 = 3 credits, which meets the requirement. Test case 2: The minimum credits required to avoid penalty is 2. Since you have 7 credits, you need to allocate at least 5 credits to maintenance. Test case 3: The minimum credits required to avoid penalty is 1. Since you have 5 credits, you need to allocate at least 4 credits to maintenance.","solution":"def minimum_credits_to_avoid_penalty(N, test_cases): results = [] for C, M in test_cases: results.append(C - M) return results # Function to parse input and return results def chefville(input_string): lines = input_string.strip().split(\'n\') N = int(lines[0]) test_cases = [tuple(map(int, line.split())) for line in lines[1:]] return minimum_credits_to_avoid_penalty(N, test_cases)"},{"question":"In a city, there are N haunted houses arranged in a straight line. Each house has a certain number of ghosts. You are a ghost hunter and want to eliminate the ghosts from these houses. However, there\'s a catch: You cannot eliminate ghosts from two consecutive houses, as eliminating ghosts from a house scares away ghosts from adjacent houses, causing them to regroup much more fiercely. Determine the maximum number of ghosts you can eliminate from these houses while following the rule of not eliminating from two consecutive houses. INPUT The first line contains integer t (the number of test cases). Each test case starts with an integer N, representing the number of haunted houses. The next line contains N integers, where the i-th integer denotes the number of ghosts in the i-th house. OUTPUT For each test case, output a single integer representing the maximum number of ghosts that can be eliminated. CONSTRAINTS 0 ≤ N ≤ 10^4 0 ≤ Number of ghosts in each house ≤ 10^5 1 ≤ t ≤ 10 SAMPLE INPUT 2 5 3 2 5 10 7 4 2 1 4 9 SAMPLE OUTPUT 15 11","solution":"def max_ghosts_eliminated(haunted_houses): Returns the maximum number of ghosts that can be eliminated from the houses. if not haunted_houses: return 0 n = len(haunted_houses) if n == 1: return haunted_houses[0] # DP array to store the maximum ghosts eliminated up to each house dp = [0] * n dp[0] = haunted_houses[0] dp[1] = max(haunted_houses[0], haunted_houses[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + haunted_houses[i]) return dp[-1] def solve_ghost_hunters(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] haunted_houses = test_cases[i][1] results.append(max_ghosts_eliminated(haunted_houses)) return results"},{"question":"Write a program that determines whether a given string is a palindrome, ignoring non-alphabetic characters and case differences. A palindrome is a string that reads the same backward as forward. Input The input consists of a series of datasets. Each dataset is a single line containing a string s (1 ≤ length of s ≤ 1,000). The input ends when a line containing only \'END\' is given, which should not be processed. Output For each dataset, output \\"YES\\" if the string is a palindrome, otherwise output \\"NO\\". Insert one blank line between the results of each dataset. Example Input A man, a plan, a canal, Panama! No lemon, no melon Hello, World! END Output YES YES NO","solution":"def is_palindrome(s): Returns \\"YES\\" if the cleaned-up version of s is a palindrome, otherwise returns \\"NO\\". Only letters are considered and the comparison is case-insensitive. cleaned_s = \'\'.join([char.lower() for char in s if char.isalpha()]) return \\"YES\\" if cleaned_s == cleaned_s[::-1] else \\"NO\\" def process_input(input_strings): Processes multiple input strings and returns the results for each string except the one containing \'END\'. results = [] for s in input_strings: if s == \\"END\\": break results.append(is_palindrome(s)) return results"},{"question":"Compute the sum of the digits in a given string. The string consists of alphanumeric characters and possibly other special characters. Extract all the numeric digits, sum them up, and return the result. Input The only line of input contains a string between 1 and 100 characters long. Each character of the string has an ASCII-code between 33 (exclamation mark) and 126 (tilde), inclusive. Output Output the sum of all numerical digits in the string. If there are no digits, return 0. Examples Input a1b2c3 Output 6 Input no_digits_here! Output 0","solution":"def sum_of_digits(s): Computes the sum of all numerical digits in the given string. Parameters: s (str): The input string which may contain alphanumeric and special characters. Returns: int: The sum of all numerical digits in the string. Returns 0 if no digits are found. return sum(int(char) for char in s if char.isdigit())"},{"question":"Write a function `encode_string` that takes an input string and returns an encoded version. The encoding rule is as follows: 1. Each substring of consecutive identical characters should be replaced with the character followed by the number of repetitions. 2. If the character appears only once consecutively, it should remain as it is without any number appended. For example: ```python encode_string(\\"aaabbbccca\\") # returns \\"a3b3c3a\\" encode_string(\\"abc\\") # returns \\"abc\\" encode_string(\\"aabbccdd\\") # returns \\"a2b2c2d2\\" encode_string(\\"xxxxxxxxxx\\") # returns \\"x10\\" ``` Write a function signature as follows: ```python def encode_string(s: str) -> str: pass ```","solution":"def encode_string(s: str) -> str: Encodes the input string based on consecutive identical characters rules. if not s: return \\"\\" encoded_string = [] count = 1 for i in range(1, len(s)): if s[i] == s[i - 1]: count += 1 else: encoded_string.append(s[i - 1]) if count > 1: encoded_string.append(str(count)) count = 1 # handle the last character group encoded_string.append(s[-1]) if count > 1: encoded_string.append(str(count)) return \\"\\".join(encoded_string)"},{"question":"You are required to implement a method that takes in a string containing a valid mathematical expression and evaluates it to return the numerical result. The expression can contain positive integers and the operators `+`, `-`, `*`, and `/` (integer division). The operators must follow the standard rules of precedence (i.e., `*` and `/` have higher precedence than `+` and `-`). The given expression string will not contain any spaces. Assume the input expression is always valid. # Example Input `\\"2+3*4\\"` Output `14` Input `\\"10+2*6\\"` Output `22` Input `\\"100*2+12\\"` Output `212` Input `\\"100*(2+12)/14\\"` Output `100` The function signature should be as follows: ```python def evaluate_expression(expression: str) -> int: pass ``` Your task is to write the `evaluate_expression` function to correctly evaluate and return the result of the given expression.","solution":"def evaluate_expression(expression: str) -> int: Evaluates a mathematical expression string containing integers and the operators +, -, *, /. The operators follow standard precedence rules. def helper(s, start): stack = [] num = 0 sign = \'+\' while start < len(s): char = s[start] if char.isdigit(): num = num * 10 + int(char) if char == \'(\': num, start = helper(s, start + 1) if char in \\"+-*/)\\" or start == len(s) - 1: if sign == \'+\': stack.append(num) elif sign == \'-\': stack.append(-num) elif sign == \'*\': stack.append(stack.pop() * num) elif sign == \'/\': stack.append(int(stack.pop() / num)) if char == \')\': return sum(stack), start num = 0 sign = char start += 1 return sum(stack) return helper(expression, 0)"},{"question":"You are given a string consisting of digits from \'0\' to \'9\' and characters \'a\' to \'f\'. Each digit can be interpreted as is, and each character from \'a\' to \'f\' corresponds to a hexadecimal digit (10, 11, 12, 13, 14, 15). Your task is to convert the string into an integer and determine whether the resultant integer is a prime number. If the string represents a prime number, return \\"Prime\\". Otherwise, return \\"Not Prime\\". -----Input----- A single line containing a string s (1 ≤ |s| ≤ 100), where the string consists of characters from {\'0\'-\'9\', \'a\'-\'f\'} and is a valid hexadecimal number. -----Output----- Print the string \\"Prime\\" if the converted integer is a prime number, otherwise print \\"Not Prime\\". -----Examples----- Input 2a Output Not Prime Input 11 Output Prime","solution":"def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def hex_string_prime(s): num = int(s, 16) return \\"Prime\\" if is_prime(num) else \\"Not Prime\\""},{"question":"Create a function to determine the number of unique letter sequences that can be formed from the given string. Each sequence must use every character from the input exactly once. Input – a string of lowercase letters (the length of the string will not exceed 10) Output – number of unique sequences SAMPLE INPUT abc SAMPLE OUTPUT 6","solution":"from math import factorial from collections import Counter def unique_letter_sequences(s): Returns the number of unique sequences that can be made using every character of the string exactly once. if not s: return 0 # Count the frequency of each letter letter_count = Counter(s) # Calculate the factorial of the length of the string total_permutations = factorial(len(s)) # Divide by the factorial of the count for each letter to handle duplicates for count in letter_count.values(): total_permutations //= factorial(count) return total_permutations"},{"question":"You are working for a company specialized in analyzing sensor data. Every day, sensors collect a stream of integer values sent by multiple devices. Each device emits a unique series of readings (a subsequence). Your task is to process the stream data and determine how many unique devices were active on a given day. The sequence of readings from each device appears in the same order but is repeated multiple times. -----Input----- The input contains several blocks of test cases. Each test case starts with an integer 1 <= n <= 20000 representing the number of readings collected in one day. This is followed by a single line containing n space-separated integers which constitute the day\'s readings. A reading is an integer within the range [1, 1000]. The input is terminated by a block with n = 0. -----Output----- For each test case, output a single integer representing the number of unique devices that emitted readings during that day. -----Example----- Input: 10 1 2 1 2 2 3 1 2 3 3 5 4 4 4 5 5 0 Output: 3 2","solution":"def count_unique_devices(readings): Given a list of readings, returns the number of unique devices (unique readings) present in the list. return len(set(readings)) def process_input(input_data): Parses the input data, processes each test case, and returns a list of results. results = [] i = 0 while i < len(input_data): n = int(input_data[i]) if n == 0: break readings = list(map(int, input_data[i+1].split())) results.append(count_unique_devices(readings)) i += 2 return results"},{"question":"Write a function that takes a string representing a sequence of moves for a character in a 2D grid and determines whether the character ends up at the starting point after completing all the moves. The moves string consists of characters \'L\', \'R\', \'U\', and \'D\' which represent moving left, right, up, and down respectively. Assume the character starts at the origin (0,0) on the grid. Input The input contains a single string of length n (1 ≤ n ≤ 10^6), representing the sequence of moves. Output Output \\"Yes\\" if the character returns to the origin after all the moves. Otherwise, output \\"No\\". Examples Input \\"UDLR\\" Output Yes Input \\"UUDDLLRR\\" Output Yes Input \\"UUDD\\" Output No","solution":"def is_back_to_origin(moves): Determines if the character ends up at the starting point after completing all the moves. Parameters: moves (str): A string representing the sequence of moves. \'L\', \'R\', \'U\', \'D\' which represent moving left, right, up, and down respectively. Returns: str: \\"Yes\\" if the character returns to the origin (0, 0) after all moves, otherwise \\"No\\". x = y = 0 for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 return \\"Yes\\" if x == 0 and y == 0 else \\"No\\""},{"question":"Hanako loves collecting stamps and organizes them into a variety of albums. Each album has a specific capacity of Z stamps. Today, she received a list of new stamps and aims to fill up her existing albums as efficiently as possible, ensuring no album exceeds its capacity. Each stamp has a specific size. Given the sizes of the stamps Hanako received and the capacity of each album, determine the minimum number of albums required to store all the stamps. -----Constraints----- - 1 le M le 10^5 (number of stamps) - 1 le size_i le Z (size of each stamp) - 1 le Z le 10^5 (capacity of each album) - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: M Z size_1 size_2 ldots size_M -----Output----- Print the minimum number of albums required to store all the stamps. -----Sample Input----- 5 10 2 5 4 7 1 -----Sample Output----- 2 One way to store the stamps is as follows: - Album 1: 2, 5, 1 (total size = 8) - Album 2: 4, 7 (total size = 11) Thus, a minimum of 2 albums are required.","solution":"def min_albums_required(M, Z, sizes): from bisect import insort # Sort sizes descending for better packing sizes.sort(reverse=True) album_list = [] for size in sizes: placed = False for i in range(len(album_list)): if album_list[i] + size <= Z: album_list[i] += size placed = True break if not placed: album_list.append(size) return len(album_list)"},{"question":"Problem: In a distant land, there is an ancient ritual performed by three competing tribes: the Warriors(W), the Archers(A), and the Mages(M). This ritual occurs in a circular arena with `N` segments, and it involves a unique sequence of movements that the tribes follow based on the segment number. Each segment `S` in the arena can be categorized as follows: - If `S` is divisible by 4, the segment is reserved for a battle between Warriors and Archers (denoted as \\"WA\\"). - If `S` leaves a remainder of 1 when divided by 4, the segment is for a battle between Archers and Mages (denoted as \\"AM\\"). - If `S` leaves a remainder of 2 when divided by 4, the segment is for a battle between Mages and Warriors (denoted as \\"MW\\"). - If `S` leaves a remainder of 3 when divided by 4, the segment is a peace zone, and no battle takes place (denoted as \\"Peace\\"). Given a segment number `S`, you must determine the nature of that segment based on the above rules. Input: The first line will contain an integer `T` (number of test cases). The next `T` lines will each contain an integer `S`. Output: For each segment number `S`, output either \\"WA\\", \\"AM\\", \\"MW\\", or \\"Peace\\" corresponding to the nature of the segment. Constraints: 1 ≤ T ≤ 1000 1 ≤ S ≤ 10^9 Sample Input: 4 1 4 7 10 Sample Output: AM WA Peace MW Explanation: In the first test case: Segment number 1 leaves a remainder of 1 when divided by 4, so it is reserved for a battle between Archers and Mages, output is \\"AM\\". In the second test case: Segment number 4 is divisible by 4, so it is reserved for a battle between Warriors and Archers, output is \\"WA\\". In the third test case: Segment number 7 leaves a remainder of 3 when divided by 4, so it is a peace zone, output is \\"Peace\\". In the fourth test case: Segment number 10 leaves a remainder of 2 when divided by 4, so it is reserved for a battle between Mages and Warriors, output is \\"MW\\".","solution":"def determine_segment_type(S): Determines the type of segment based on the segment number `S`. if S % 4 == 0: return \\"WA\\" elif S % 4 == 1: return \\"AM\\" elif S % 4 == 2: return \\"MW\\" else: return \\"Peace\\" def process_segments(test_cases): Process multiple test cases and return the results in a list. results = [] for S in test_cases: results.append(determine_segment_type(S)) return results"},{"question":"Swati is a software engineer tasked with developing an efficient way to find the longest string among a list of strings. Each string consists of uppercase and lowercase alphabet characters only. You need to help Swati by writing a program to find the longest string in an array of strings. If multiple strings have the same maximum length, return the one which appears first in the list. Input The first line contains the number of test cases T. For each test case, the first line contains a single integer N, the number of strings. The next N lines each contain a single string. Output For each test case, output the longest string. If there are multiple such strings, output the one which appears first in the list. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 100 1 ≤ |S| ≤ 100 SAMPLE INPUT 1 4 apple banana kiwi strawberry SAMPLE OUTPUT strawberry","solution":"def find_longest_string(test_cases): results = [] for case in test_cases: max_length = 0 longest_string = \\"\\" for string in case: if len(string) > max_length: max_length = len(string) longest_string = string results.append(longest_string) return results def parse_input(data): lines = data.strip().split(\\"n\\") index = 0 T = int(lines[index]) index += 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 case = [] for _ in range(N): case.append(lines[index]) index += 1 test_cases.append(case) return test_cases"},{"question":"The Interstellar Trading Federation has developed a new system to optimize the distribution of goods between space stations. Each space station is connected to other stations through a series of bidirectional trade routes. Each route has a certain capacity, which is the maximum amount of goods that can be transported through it. The space stations are organized in such a way that there exists a central station, and every other station has a unique path to this central station. You need to ensure that the system can handle the transportation of goods without exceeding the capacity of any trade route. Your task is to determine the maximum amount of goods that can be transported from the central station to any other station without violating the capacity limits of the trade routes. -----Input----- The first line of the input contains an integer N (2 ≤ N ≤ 1000) – the number of space stations. The next N - 1 lines describe the trade routes between the space stations. Each line contains three space-separated integers u, v, and c (1 ≤ u, v ≤ N, 1 ≤ c ≤ 10^6), indicating that there is a bidirectional trade route between the space stations u and v with a capacity of c. -----Output----- A single integer denoting the maximum amount of goods that can be transported from the central station to any other station. -----Examples----- Input 4 1 2 5 1 3 10 3 4 4 Output 4 Input 5 3 1 7 1 2 8 2 4 5 2 5 6 Output 5 -----Note----- In the first example, the route with the smallest capacity from the central station (1) to station 4 has a capacity of 4, so the maximum amount of goods that can be transported to station 4 is 4. In the second example, the path from the central station (1) to station 4 has a bottleneck trade route with a capacity of 5, which determines the maximum amount of goods that can be transported to station 4.","solution":"from collections import defaultdict, deque def max_goods_transport(N, routes): # Create adjacency list graph = defaultdict(list) for u, v, c in routes: graph[u].append((v, c)) graph[v].append((u, c)) # Function to perform BFS and find the maximum capacity to any node def bfs(): max_capacities = [-1] * (N + 1) max_capacities[1] = float(\'inf\') queue = deque([1]) while queue: current = queue.popleft() for neighbor, capacity in graph[current]: if max_capacities[neighbor] == -1: max_capacities[neighbor] = min(max_capacities[current], capacity) queue.append(neighbor) return max_capacities max_capacities = bfs() return min(max_capacities[2:]) # Parsing input def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) routes = [] index = 1 for i in range(N-1): u = int(data[index]) v = int(data[index+1]) c = int(data[index+2]) routes.append((u, v, c)) index += 3 print(max_goods_transport(N, routes))"},{"question":"You are given a large integer represented as a string. Your task is to check if this large integer is divisible by 7. As the integer can be very large, you cannot convert it directly to an integer type due to potential overflow issues. Instead, implement an efficient algorithm to determine its divisibility by 7. Input: A single string input representing the large integer. Output: Print \\"Divisible\\" if the number is divisible by 7, otherwise print \\"Not Divisible\\". Constraints: The input string can be up to 10^6 digits long and contains only numeric characters (0-9). SAMPLE INPUT 34300000000000000000000000007 SAMPLE OUTPUT Divisible Explanation The given number 34300000000000000000000000007 is divisible by 7. Therefore, the output is \\"Divisible\\".","solution":"def is_divisible_by_7(num_str): Check if a large integer represented as a string is divisible by 7. n = len(num_str) num = 0 for i in range(n): num = (num * 10 + int(num_str[i])) % 7 return \\"Divisible\\" if num == 0 else \\"Not Divisible\\""},{"question":"Problem G: Warehouse Robotics In a warehouse, products are stored in an M x N grid. Each cell in the grid is either empty, occupied by a product, or a blocked cell that robots cannot traverse. Your task is to program warehouse robots to follow the shortest path from a start position to a destination position on this grid. A robot can only move horizontally or vertically to an adjacent cell in one step. However, the robot may not move onto a blocked cell. The robot may begin and end on an empty or occupied cell, but not a blocked cell. Given the warehouse grid, the starting position, and the destination position, determine the minimum number of steps required to move from the starting position to the destination. If no path exists, return -1. Input The first line of input contains two integers, M and N, (1 <= M, N <= 100), denoting the number of rows and columns of the grid, respectively. The next M lines each contain N characters, representing the grid. The characters can be \'.\', \'P\', or \'#\', denoting empty cells, product cells, and blocked cells, respectively. The starting and destination positions are provided as four integers in the last line: start_row, start_col, end_row, and end_col (0 <= start_row, start_col, end_row, end_col < M, N). Output Output one integer that represents the minimum number of steps required to reach the destination from the starting position. If no valid path exists, output -1. Examples Input 5 5 ..... ..#.. ..#P. P.#.. ..... 1 0 3 4 Output 8 Input 3 3 ... .#. ... 0 0 2 2 Output 4 Input 4 4 .... .. .. .... 0 0 3 3 Output 6","solution":"from collections import deque def min_steps_to_reach_destination(M, N, grid, start_row, start_col, end_row, end_col): def is_valid(r, c): return 0 <= r < M and 0 <= c < N and grid[r][c] != \'#\' def bfs(start_row, start_col, end_row, end_col): queue = deque([(start_row, start_col, 0)]) visited = set() visited.add((start_row, start_col)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right while queue: r, c, steps = queue.popleft() if r == end_row and c == end_col: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1 return bfs(start_row, start_col, end_row, end_col)"},{"question":"You have been given an array of integers that represent the heights of buildings in a row. Your task is to find a pair of buildings such that the amount of water that would be trapped between them is maximized. The amount of water trapped between two buildings is determined by the height of the shorter building and the distance between the buildings. Write a function `max_water_trapped(heights)` that takes in an array `heights` and returns an integer representing the maximum water trapped between a pair of buildings. __Example:__ ```python heights = [1, 8, 6, 2, 5, 4, 8, 3, 7] max_water_trapped(heights) # Returns 49 ``` __Explanation:__ In the given example, the maximum water trapped is between the buildings of height 8 at index 1 and height 7 at index 8. The distance between them is 7 (8 - 1), and the shorter building\'s height is 7. Hence, the maximum water trapped would be 7 * 7 = 49 units. Your solution should handle possible invalid inputs: - If the array has less than two buildings, the function should return 0. - All heights will be non-negative integers.","solution":"def max_water_trapped(heights): Returns the maximum water trapped between two buildings given their heights. # Invalid input: less than 2 buildings if len(heights) < 2: return 0 max_water = 0 left = 0 right = len(heights) - 1 while left < right: # calculate the water trapped between the buildings at indices left and right height = min(heights[left], heights[right]) width = right - left current_water = height * width max_water = max(max_water, current_water) # Move the pointer pointing to the shorter building if heights[left] < heights[right]: left += 1 else: right -= 1 return max_water"},{"question":"You are given a list of stock prices for consecutive days in the form of a list: prices = [7, 1, 5, 3, 6, 4] Your task is to write a function called max_profit which takes in this list and returns the maximum possible profit one could achieve. You are only allowed to buy on one day and sell on another day after the buying day. If no profit can be made, return 0.","solution":"def max_profit(prices): Returns the maximum profit that can be achieved from buying and selling the stock on different days. If no profit can be made, returns 0. if not prices: return 0 min_price = float(\'inf\') max_profit = 0 for price in prices: if price < min_price: min_price = price elif price - min_price > max_profit: max_profit = price - min_price return max_profit"},{"question":"The rainforest survey team is researching the vegetation pattern in a dense forest. The forest can be visualized as a 2D grid where each cell represents a patch of land that can either have a tree or be empty. The team needs to find the largest square patch of contiguous trees in the forest. They need your help to determine the size of this square patch so they can study it further. # Input The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the forest grid. The next `n` lines each contain `m` characters, where each character is either a `1` (indicating the presence of a tree) or a `0` (indicating an empty patch). # Output Print the size of the largest square patch of contiguous trees. # Example Input ``` 5 6 110001 110001 111101 000011 000011 ``` # Example Output ``` 2 ``` # Example Explanation The largest square patch of trees has a size of 2x2 and can be found in the top left corner or bottom right corner of the input grid. Therefore, the output is 2. # Note There can be multiple such largest square patches, but the size will be the same for all such patches.","solution":"def largest_square_of_trees(n, m, forest): # Create a 2D list to store lengths of largest square ending at that cell dp = [[0]*m for _ in range(n)] max_size = 0 # Fill the dp array for i in range(n): for j in range(m): if forest[i][j] == \'1\': if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_size = max(max_size, dp[i][j]) return max_size"},{"question":"Given an integer n, construct an n times n matrix with distinct integers from 1 to n^2 such that the sum of the sums of the diagonals is maximized. The diagonals are defined as those lines of elements that run from the upper-left to the bottom-right direction. -----Input----- The first line of the input contains a single integer n (1 leq n leq 100) indicating the size of the matrix. -----Output----- Output the n times n matrix where the sum of the sums of the diagonals is maximized. Each of the next n lines should contain n space-separated integers. -----Example----- Input 3 Output 1 2 9 4 3 8 5 6 7 -----Explanation----- There are 5 diagonals in the 3x3 matrix: 1. [1] (sum is 1) 2. [4, 2] (sum is 6) 3. [5, 3, 9] (sum is 17) 4. [6, 8] (sum is 14) 5. [7] (sum is 7) So, the sum of the sums of the diagonals is 1 + 6 + 17 + 14 + 7 = 45. This is the maximum possible sum for any 3x3 matrix constructed with distinct integers from 1 to 9.","solution":"def maximize_diagonals(n): Construct an n x n matrix with distinct integers that maximizes the sum of the sums of the diagonals. matrix = [[0] * n for _ in range(n)] num = 1 for i in range(n): for j in range(n): matrix[i][j] = num num += 1 # Swapping to maximize the diagonal sums for i in range(n): for j in range(i, n): if i != j: matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] return matrix"},{"question":"You are given a string containing only digits and the characters \'+\' and \'-\'. Your task is to form the largest possible integer by rearranging its characters. Note, however, the resulting integer must abide by the traditional placement rules for the plus and minus signs: - A plus sign can come alone or between digits. - A minus sign must be placed at the beginning if there is any, and can only appear once. For example, given the string \\"-123+4+56\\", the possible rearrangement \\"654321\\" is invalid because it does not place the minus sign at the beginning nor follow the rule for the plus sign placement. Input The input consists of a single string s (1 ≤ |s| ≤ 10000), where each character is either a digit (0-9), a plus sign (\'+\'), or a minus sign (\'-\'). Output Output a single string denoting the maximum possible integer by rearranging the input string following the placement rules for \'+\' and \'-\'. Examples Input \\"1234\\" Output \\"4321\\" Input \\"-12+34\\" Output \\"-4321\\" Input \\"56+7+8\\" Output \\"876+5\\"","solution":"def rearrange_string(s): Rearranges the string to form the largest possible integer following the rules for placement of \'+\' and \'-\'. digits = [] has_minus = False for char in s: if char.isdigit(): digits.append(char) elif char == \'-\': has_minus = True digits.sort(reverse=True) result = \'\'.join(digits) if has_minus: return \'-\' + result else: return result"},{"question":"You have been given a function `def num_paths(m, n):` that calculates the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid. The robot can only move either down or right at any point in time. For example: For a 3x7 grid, the total unique paths would be 28. To make this task more interesting, let\'s add some obstacles. An obstacle and empty space are marked as 1 and 0 respectively in the grid. You can assume that the most top-left and the most bottom-right cells contain no obstacles. Implement a function `unique_paths_with_obstacles(obstacle_grid)` that accepts a 2D list `obstacle_grid` where an obstacle and empty space are marked as 1 and 0 respectively, and returns the number of unique paths from top-left to bottom-right. For example: Given the following grid: ``` [ [0, 0, 0], [0, 1, 0], [0, 0, 0] ] ``` The function should return 2.","solution":"def unique_paths_with_obstacles(obstacle_grid): Calculate the number of unique paths from the top-left corner to the bottom-right corner of a grid with obstacles, where 1 indicates an obstacle and 0 indicates an empty space. if not obstacle_grid or obstacle_grid[0][0] == 1: return 0 m, n = len(obstacle_grid), len(obstacle_grid[0]) # Initialize a 2D dp array dp[i][j] to store the number of unique paths to cell (i, j). dp = [[0] * n for _ in range(m)] # Start point dp[0][0] = 1 # Fill the dp array for i in range(m): for j in range(n): if obstacle_grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"Create a function that takes a string as input and returns a new string with each character in the original string followed by a count of its consecutive repetitions. # Example compress(\\"aabcccccaaa\\") => \\"a2b1c5a3\\" This means there are 2 \'a\'s, 1 \'b\', 5 \'c\'s, and 3 \'a\'s in sequence in the input string. # Example 2 compress(\\"abcdef\\") => \\"a1b1c1d1e1f1\\" This means each character in the input string appears once consecutively. # Notes * The input string will only contain lowercase alphabetic characters. * Return an empty string if the input string is empty. * The function should handle strings with any length.","solution":"def compress(s): Compress a given string by appending a count of consecutive repeating characters. Parameters: s (str): The input string to be compressed. Returns: str: A compressed string where each character is followed by the count of its consecutive repetitions. if not s: return \\"\\" result = [] count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: count += 1 else: result.append(f\\"{s[i-1]}{count}\\") count = 1 result.append(f\\"{s[-1]}{count}\\") return \\"\\".join(result)"},{"question":"Given a list of non-negative integers, write a function that returns the sum of all prime numbers in the given list. If the list is empty or there are no prime numbers in the list, the function should return 0. Function Signature: ```python def sum_of_primes(numbers: List[int]) -> int: pass ``` Input: - A list of non-negative integers (0 ≤ numbers[i] ≤ 1000, 1 ≤ len(numbers) ≤ 100). Output: - An integer representing the sum of all prime numbers in the list, or 0 if there are no prime numbers. Example: ```python Input: [3, 11, 4, 6, 8] Output: 14 Input: [0, 1, 4, 6, 8] Output: 0 Input: [7, 7, 11, 13, 17] Output: 55 ``` Constraints: - The list will contain at least one element and at most 100 elements. - Each element in the list will be a non-negative integer not exceeding 1000.","solution":"from typing import List def is_prime(num: int) -> bool: Check if a number is prime. if num < 2: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def sum_of_primes(numbers: List[int]) -> int: Returns the sum of all prime numbers in the given list. return sum(num for num in numbers if is_prime(num))"},{"question":"A renowned archaeologist has discovered a hidden chamber deep within an ancient pyramid. Inside, the walls are covered with strange hieroglyphs that describe a mystical number game that the ancient Egyptians used to play. The game is played with a single integer N. According to the rules, starting from the given integer N, the player must build a sequence by continuously dividing the current number by any of its prime divisors greater than 1 until the number can no longer be divided further (i.e., until it becomes 1). The score of the game is defined as the number of steps required to reduce the number N to 1. Your task is to write a program that calculates the score for a given integer N. Input The input consists of a single integer N (2 ≤ N ≤ 10^6) — the number that the archaeologist wants to reduce to 1 using the prime divisor game. Output Print a single integer — the minimum number of steps required to reduce N to 1. Examples Input 10 Output 2 Input 27 Output 3 Input 4 Output 2 Explanation For the first example, the optimal sequence is: 10 -> 5 -> 1. In two steps, the number 10 is reduced to 1. For the second example, the optimal sequence is: 27 -> 9 -> 3 -> 1. In three steps, the number 27 is reduced to 1. For the third example, the optimal sequence is: 4 -> 2 -> 1. In two steps, the number 4 is reduced to 1.","solution":"def min_steps_to_reduce_to_one(N): Calculate the minimum number of steps required to reduce N to 1 using prime divisors larger than 1. Args: N (int): The initial number to be reduced. Returns: int: The number of steps required to reduce N to 1. def prime_factors_count(n): count = 0 # Start dividing by 2 while n % 2 == 0: n //= 2 count += 1 # Check for odd factors factor = 3 while n != 1: while n % factor == 0: n //= factor count += 1 factor += 2 return count return prime_factors_count(N)"},{"question":"You are developing a computer graphics application and need to manage a grid of pixels. The grid can be made up of different colored pixels. Each color is represented by an integer. Your task is to perform a series of operations to change the color of specific regions in the grid. The changes follow a \\"fill\\" operation similar to the \\"bucket fill\\" tool in paint applications. The \\"fill\\" operation changes the color of all pixels in the connected component (all 4-directionally adjacent cells) that initially have the same color as the given starting pixel, to the new color. Input The first line of the input contains three integers, R (1 ≤ R ≤ 100), C (1 ≤ C ≤ 100), and Q (1 ≤ Q ≤ 100), denoting the number of rows, the number of columns, and the number of queries, respectively. Each of the next R lines contains C integers representing the initial color of each pixel in the grid. Each of the next Q lines contains three integers, x (0 ≤ x < R), y (0 ≤ y < C), and newColor (0 ≤ newColor ≤ 1000), representing a fill operation starting at pixel (x, y) with color newColor. Output For each query, after performing the fill operation, print the number of pixels that were changed. Example Input 3 3 2 1 1 1 1 2 2 1 1 1 0 0 3 2 2 5 Output Query 1: 5 Query 2: 1","solution":"def flood_fill(grid, x, y, new_color, rows, cols): Perform flood fill algorithm to change the color of connected components. original_color = grid[x][y] if original_color == new_color: return 0 def dfs(r, c): if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != original_color: return 0 grid[r][c] = new_color return 1 + dfs(r-1, c) + dfs(r+1, c) + dfs(r, c-1) + dfs(r, c+1) return dfs(x, y) def process_queries(R, C, Q, grid, queries): results = [] for x, y, new_color in queries: result = flood_fill(grid, x, y, new_color, R, C) results.append(result) return results # Example usage: def main(): R, C, Q = 3, 3, 2 grid = [ [1, 1, 1], [1, 2, 2], [1, 1, 1] ] queries = [ (0, 0, 3), (2, 2, 5) ] results = process_queries(R, C, Q, grid, queries) for i, res in enumerate(results): print(f\\"Query {i+1}: {res}\\") if __name__ == \\"__main__\\": main()"},{"question":"Given a directed acyclic graph (DAG) with N vertices numbered 1 to N and M edges, each edge (u_i, v_i, w_i) indicates there\'s a directed edge from vertex u_i to vertex v_i with weight w_i. Your task is to find the shortest path from the source vertex S to each vertex in the graph. -----Constraints----- - 2 leq N leq 10^5 - 1 leq M leq 10^5 - 1 leq u_i, v_i leq N - 1 leq w_i leq 10^4 - 1 leq S leq N - The given graph is a directed acyclic graph (DAG). - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: N M S u_1 v_1 w_1 : u_M v_M w_M -----Output----- Print the values of the shortest paths from the source vertex S to each vertex in the graph, in the order from vertex 1 to N, with spaces in between. If a vertex is not reachable from S, print -1 for that vertex. -----Sample Input----- 5 6 1 1 2 2 1 3 4 2 3 1 2 4 7 3 5 3 4 5 1 -----Sample Output----- 0 2 3 9 6 In this example, the shortest path from S=1 to each vertex in the graph is calculated as follows: - Vertex 1: Distance is 0 (itself) - Vertex 2: Distance is 2 (1 -> 2) - Vertex 3: Distance is 3 (1 -> 2 -> 3) - Vertex 4: Distance is 9 (1 -> 2 -> 3 -> 5 -> 4 or 1 -> 2 -> 4) - Vertex 5: Distance is 6 (1 -> 2 -> 3 -> 5)","solution":"from collections import defaultdict, deque import heapq def shortest_path_dag(n, m, s, edges): Returns a list of shortest path distances from the source vertex S. # Step 1: Build the graph graph = defaultdict(list) in_degree = [0] * (n + 1) for u, v, w in edges: graph[u].append((v, w)) in_degree[v] += 1 # Step 2: Topological Sort topo_order = [] zero_in_degree = deque() for i in range(1, n + 1): if in_degree[i] == 0: zero_in_degree.append(i) while zero_in_degree: node = zero_in_degree.popleft() topo_order.append(node) for neighbour, weight in graph[node]: in_degree[neighbour] -= 1 if in_degree[neighbour] == 0: zero_in_degree.append(neighbour) # Step 3: Initialize distances distances = [float(\'inf\')] * (n + 1) distances[s] = 0 # Step 4: Relax edges according to the topological order for u in topo_order: for v, w in graph[u]: if distances[u] + w < distances[v]: distances[v] = distances[u] + w # Step 5: Format the result result = [] for i in range(1, n + 1): if distances[i] == float(\'inf\'): result.append(-1) else: result.append(distances[i]) return result"},{"question":"You are given a list of integers. For each integer, output its number of occurrences in the list. The output order should correspond with the input order of appearance of the integer. See the sample input/output for clarification. Constraints: 1 leq n leq 10^5 Each integer, a_i, is within the range 1 leq a_i leq 10^6. Input Format The first line contains the integer, n. The second line contains n space-separated integers. Output Format Output 2 lines. On the first line, output the number of distinct integers from the input. On the second line, output the number of occurrences for each distinct integer according to their appearance in the input. Sample Input 7 4 2 4 5 2 3 5 Sample Output 4 2 2 2 1 Explanation There are 4 distinct integers. Here, \\"4\\" appears twice in the input at the first and third positions. \\"2\\" also appears twice at the second and fifth positions. \\"5\\" appears twice at the fourth and seventh positions. \\"3\\" appears once at the sixth position. The order of the first appearances are \\"4\\", \\"2\\", \\"5\\", and \\"3\\" which corresponds to the output.","solution":"def count_occurrences(n, arr): Returns the count of distinct integers and the number of occurrences for each distinct integer according to their appearance in the input list. :param n: an integer, the number of elements in the list :param arr: a list of integers :return: (distinct_count, occurrences_list) from collections import OrderedDict occurrences = OrderedDict() for num in arr: if num in occurrences: occurrences[num] += 1 else: occurrences[num] = 1 distinct_count = len(occurrences) occurrences_list = list(occurrences.values()) return distinct_count, occurrences_list"},{"question":"You are given an array of N integers. Your task is to answer Q queries. In each query, you are given two integers L and R, and you need to find the maximum subarray sum for the subarray starting from index L and ending at index R (inclusive). Example 1: Input: N = 5 A = [-2, 1, -3, 4, -1] Q = 2 Queries = {{1, 3}, {0, 4}} Output: 2 4 Explanation: For the first query, the subarray is [1, -3, 4]. The maximum subarray sum is 4. For the second query, the subarray is [-2, 1, -3, 4, -1]. The maximum subarray sum is 4. Example 2: Input: N = 4 A = [1, 2, 3, 4] Q = 2 Queries = {{1, 2}, {0, 3}} Output: 5 10 Explanation: For the first query, the subarray is [2, 3]. The maximum subarray sum is 5. For the second query, the subarray is [1, 2, 3, 4]. The maximum subarray sum is 10. Expected Time Complexity: O(N * Q) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 1000 1 <= Q <= 1000 -10^4 <= A[i] <= 10^4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSubarraySum() which takes an integer N representing the length of the array, an array A of N integers, an integer Q representing the number of queries, and a 2D array Queries containing Q pairs of integers representing L and R. The function returns an array of Q integers representing the answers to each query.","solution":"def maxSubarraySum(N, A, Q, Queries): def kadane(arr): max_so_far = float(\'-inf\') max_ending_here = 0 for x in arr: max_ending_here += x if max_so_far < max_ending_here: max_so_far = max_ending_here if max_ending_here < 0: max_ending_here = 0 return max_so_far result = [] for L, R in Queries: subarray = A[L:R+1] result.append(kadane(subarray)) return result"},{"question":"Anastasia is a map enthusiast and likes to create maps for different terrains. She uses a grid with r rows and c columns to represent different terrains such as water, forest, and mountains. Each cell in the grid can be represented by three characters: \'W\' for water, \'F\' for forest, and \'M\' for mountains. Anastasia wants to find out the largest rectangle composed entirely of forest tiles within the grid. Given the terrain grid, your task is to help Anastasia determine the area of the largest rectangle that consists entirely of forest tiles. Input The first line of input contains two space-separated integers r and c (1 ≤ r, c ≤ 1000) — the number of rows and columns of the grid. The next r lines each contain a string of length c consisting of the characters \'W\', \'F\', and \'M\', representing the terrain types in each cell. Output Print a single integer — the area of the largest rectangle that consists entirely of forest tiles. Examples Input 3 3 WFW FWF FFF Output 3 Input 4 5 MFMFM FFMFF FMFFF FFFFF Output 6 Note In the first sample, the largest rectangle that consists entirely of forest tiles has an area of 3. In the second sample, the largest rectangle that consists entirely of forest tiles has an area of 6. It is the 2 x 3 rectangle in the lower right of the grid.","solution":"def maxForestArea(r, c, grid): Given a grid with r rows and c columns, this function returns the area of the largest rectangle composed entirely of forest tiles (\'F\'). # Histogram heights for each column, initialized to 0 heights = [0] * c max_area = 0 for row in grid: for i in range(c): # Increase height if \'F\', reset height to 0 otherwise if row[i] == \'F\': heights[i] += 1 else: heights[i] = 0 # Calculate maximum area of histogram after each row max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): Given a list of integers representing the heights of a histogram, this function returns the area of the largest rectangle that can be formed in the histogram. stack = [] max_area = 0 heights.append(0) # Append a 0 to ensure we process all heights for i, h in enumerate(heights): while stack and heights[stack[-1]] > h: height = heights[stack.pop()] width = i if not stack else i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) return max_area # Example usage: # r, c = 4, 5 # grid = [\'MFMFM\', \'FFMFF\', \'FMFFF\', \'FFFFF\'] # print(maxForestArea(r, c, grid)) # Output: 6"},{"question":"Write a function that takes a list of strings and merges all the anagrams into a list of lists. Each list within the list should contain strings that are anagrams of each other. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as \'cinema\', formed from \'iceman\'. For example, given the following list: ``` [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] ``` The function should return ``` [ [\\"eat\\", \\"tea\\", \\"ate\\"], [\\"tan\\", \\"nat\\"], [\\"bat\\"] ] ``` **Note:** The output can be in any order; the individual lists of anagrams can also be in any order. *Hint: you may use sorting or a hashmap to group anagrams together efficiently.*","solution":"def group_anagrams(words): Groups anagrams from a list of strings into a list of lists. Parameters: words (list of str): The list of strings to group. Returns: list of list of str: A list of lists where each list contains anagram strings. from collections import defaultdict anagrams = defaultdict(list) for word in words: # Sort the word to use as a key sorted_word = \'\'.join(sorted(word)) anagrams[sorted_word].append(word) return list(anagrams.values())"},{"question":"You are given an array of integers representing the heights of skyscrapers, where the i-th element of the array is the height of the i-th skyscraper. A portal is planned to be built between two different skyscrapers such that it allows traveling from one to the other. The construction cost of the portal is calculated based on the absolute height difference between the two skyscrapers. Your task is to determine the minimum possible construction cost for such a portal. -----Input----- The first line contains an integer n (2 ≤ n ≤ 1000) — the number of skyscrapers. The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^6) — the heights of the skyscrapers. -----Output----- Print a single integer — the minimum possible construction cost for the portal. -----Examples----- Input 3 10 20 30 Output 10 Input 4 5 8 2 11 Output 3 -----Note----- In the first test case, you can build a portal between skyscrapers with heights 20 and 10, 10 and 30, or 30 and 20. The minimum absolute height difference is between 20 and 10, which is 10. In the second test case, the closest pair in terms of height difference is between the skyscrapers of heights 5 and 8, with a difference of 3.","solution":"def minimum_construction_cost(n, heights): Returns the minimum possible construction cost for a portal between two skyscrapers. :param n: Number of skyscrapers :param heights: A list of integers representing the heights of the skyscrapers :return: The minimum possible construction cost heights.sort() min_cost = float(\'inf\') for i in range(1, n): cost = abs(heights[i] - heights[i - 1]) if cost < min_cost: min_cost = cost return min_cost # Examples of usage: # print(minimum_construction_cost(3, [10, 20, 30])) # print(minimum_construction_cost(4, [5, 8, 2, 11]))"},{"question":"# Problem: Spiral Matrix Given an `m x n` matrix, return all elements of the matrix in spiral order. The spiral order starts at the top left corner and proceeds clockwise around the inner layers of the matrix. Input Format ```plaintext - Two integers m and n representing the number of rows and the number of columns in the matrix. - The next m lines each contain n space-separated integers representing the matrix. ``` Output Format ```plaintext - A single line of space-separated integers representing the elements of the matrix in spiral order. ``` Constraints ```plaintext - 1 ≤ m, n ≤ 10^2 - -10^3 ≤ matrix[i][j] ≤ 10^3 ``` Sample Input 1 ```plaintext 3 3 1 2 3 4 5 6 7 8 9 ``` Sample Output 1 ```plaintext 1 2 3 6 9 8 7 4 5 ``` Sample Input 2 ```plaintext 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ``` Sample Output 2 ```plaintext 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10 ``` Example Explanation - For Sample Input 1: The matrix spirals as follows: start at the top-left corner, move right along the first row [1, 2, 3], move down the last column [6, 9], move left along the last row [8, 7], move up the first column [4], and finally move right in the remaining single row [5]. - For Sample Input 2: Spiral movement would follow a similar logic, navigating the entire matrix in layers until all elements are covered.","solution":"def spiral_order(matrix): Given a 2D matrix, return the elements of the matrix in spiral order. if not matrix: return [] m, n = len(matrix), len(matrix[0]) result = [] visited = [[False]*n for _ in range(m)] directions = [(0,1), (1,0), (0,-1), (-1,0)] dir_index = 0 row, col = 0, 0 for _ in range(m * n): result.append(matrix[row][col]) visited[row][col] = True next_row, next_col = row + directions[dir_index][0], col + directions[dir_index][1] if 0 <= next_row < m and 0 <= next_col < n and not visited[next_row][next_col]: row, col = next_row, next_col else: dir_index = (dir_index + 1) % 4 row, col = row + directions[dir_index][0], col + directions[dir_index][1] return result"},{"question":"A bookstore owner wants to segment their list of book titles for a promotion campaign. They have a special criterion: a book title is considered \\"promotable\\" if and only if it contains at least one palindromic substring with a length greater than or equal to 3. A string is called a palindromic string if it reads the same backward as forward. ---Input--- - First line of the input contains an integer N, the number of book titles in the list. - Each of the next N lines contains a book title Ti. ---Output--- For each of the N book titles, print \\"YES\\" or \\"NO\\" (without quotes) indicating whether the book title is promotable or not. ---Constraints--- - 1 ≤ N ≤ 105 - 1 ≤ |Ti| ≤ 105. - Each book title Ti consists of only lowercase English letters (\'a\' to \'z\'). ---Subtasks--- Subtask #1 : (20 points) - Sum of |Ti| in an input file doesn\'t exceed 2 * 103 Subtask 2 : (80 points) - Sum of |Ti| in an input file doesn\'t exceed 2 * 106 ---Example--- Input: 3 racecar book hello Output: YES NO NO ---Explanation--- Example case 1. The title \\"racecar\\" contains \\"racecar\\" as a palindromic substring of length 7. Example case 2. The title \\"book\\" doesn\'t contain any palindromic substring of length greater than or equal to 3. Example case 3. The title \\"hello\\" doesn\'t contain any palindromic substring of length greater than or equal to 3.","solution":"def is_promotable(title): Determines if a book title is promotable. A title is promotable if it contains a palindromic substring of length ≥ 3. Parameters: title (str): The book title. Returns: str: \\"YES\\" if promotable, \\"NO\\" if not. n = len(title) def is_palindrome(s): return s == s[::-1] for length in range(3, n + 1): for i in range(n - length + 1): if is_palindrome(title[i:i+length]): return \\"YES\\" return \\"NO\\" def segment_book_titles(titles): For a list of book titles, determine which are promotable. Parameters: titles (List[str]): List of book titles. Returns: List[str]: List of \\"YES\\" or \\"NO\\" indicating promotability. results = [] for title in titles: results.append(is_promotable(title)) return results"},{"question":"Write a function that takes an array of integers and a target sum. The function should return the indices of the two numbers that add up to the target sum. Assume exactly one solution, and you may not use the same element twice. # Examples ```python two_sum([2, 7, 11, 15], 9) => [0, 1] two_sum([3, 2, 4], 6) => [1, 2] two_sum([3, 3], 6) => [0, 1] ```","solution":"def two_sum(nums, target): Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Parameters: nums (List[int]): List of integers. target (int): Target sum. Returns: List[int]: List containing the indices of the two numbers. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return [num_to_index[complement], i] num_to_index[num] = i raise ValueError(\\"No two sum solution found\\")"},{"question":"In a city, there is an advanced network of roads connecting n intersections, all of which are highly optimized for traffic. However, due to a recent increase in the number of autonomous vehicles, traffic jams have started to appear. The city has decided to add additional lanes to certain roads to ease the traffic flow. Each road is one-way and is represented as an edge in a directed graph. You are provided with the current traffic intensity for every road in the form of edge weights. The goal is to identify if there is any intersection in the network such that flows from non-overlapping paths converge, causing an intersection traffic jam. You need to identify if there is such a convergence for each intersection, taking into account every possible path and its traffic intensity. Input The input starts with a line containing two integers n (1 ≤ n ≤ 20) and m (1 ≤ m ≤ 50) – the number of intersections and roads respectively. The following m lines each contain three integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), representing a directed road from intersection u to intersection v with a current traffic intensity of w. Output Print \\"YES\\" if there is at least one intersection such that there exists converging non-overlapping paths with traffic intensities causing a jam. Otherwise, print \\"NO\\". Note that converging paths are defined as having no common roads prior to the intersection where they meet. Example Input 4 4 1 2 10 2 3 20 1 3 15 3 4 5 Output YES Explanation There are multiple roads converging at intersection 3, which might suggest different paths from different points in the network converging, creating a potential traffic jam scenario. The reported output is \\"YES\\". This problem requires analyzing traffic patterns to determine potential convergence points in the given directed graph, thus possibly involving advanced graph traversal algorithms, path-finding, and analysis of traffic intensities from various paths.","solution":"def identify_traffic_jams(n, m, roads): from collections import defaultdict # Create a list to store incoming edges for each node incoming_edges = defaultdict(list) # Fill the incoming edges list for u, v, w in roads: incoming_edges[v].append((u, w)) # Check each intersection to see if there are converging non-overlapping paths for intersection in range(1, n + 1): if len(incoming_edges[intersection]) > 1: incoming_nodes = [u for u, w in incoming_edges[intersection]] incoming_traffic_intensity = [w for u, w in incoming_edges[intersection]] # We need to ensure that these incoming paths are non-overlapping # This involves checking if any incoming paths share common roads before reaching the intersection for i in range(len(incoming_nodes)): for j in range(i + 1, len(incoming_nodes)): if incoming_nodes[i] != incoming_nodes[j]: return \\"YES\\" return \\"NO\\" # Function usage n = 4 m = 4 roads = [ (1, 2, 10), (2, 3, 20), (1, 3, 15), (3, 4, 5) ] print(identify_traffic_jams(n, m, roads)) # Expected output: YES"},{"question":"You are given a list of unique integers and a target number. Your task is to write a program that finds all unique quadruplets in the list which gives the sum of the target number. A quadruplet is defined as a 4-element subset of the original list whose sum equals the target number. -----Input----- - The first line contains an integer `n` (4 ≤ n ≤ 100), the number of integers in the list. - The second line contains the list of `n` unique integers. - The third line contains the target number. -----Output----- - Print all unique quadruplets that sum up to the target number. - Each quadruplet should be printed in ascending order on a new line. - The quadruplets themselves should be printed in ascending lexicographical order. -----Examples----- Input 6 1 0 -1 0 -2 2 0 Output -2 -1 1 2 -2 0 0 2 -1 0 0 1 Input 5 1 2 3 4 5 10 Output 1 2 3 4","solution":"def find_quadruplets(nums, target): Returns a list of all unique quadruplets that sum up to the target number. Arguments: nums -- A list of unique integers target -- The target sum for the quadruplets Returns: A list of all unique quadruplets that sum up to the target number, in ascending lexicographical order nums.sort() quadruplets = [] n = len(nums) for i in range(n-3): for j in range(i+1, n-2): left, right = j+1, n-1 while left < right: current_sum = nums[i] + nums[j] + nums[left] + nums[right] if current_sum == target: quadruplet = [nums[i], nums[j], nums[left], nums[right]] if quadruplet not in quadruplets: quadruplets.append(quadruplet) left += 1 right -= 1 elif current_sum < target: left += 1 else: right -= 1 return quadruplets def format_quadruplets(quadruplets): Formats the quadruplets for display. Arguments: quadruplets -- A list of quadruplet lists Returns: A string for each quadruplet, sorted in ascending lexicographical order and printed on a new line formatted = [] for quad in sorted(quadruplets): formatted.append(\\" \\".join(map(str, quad))) return \\"n\\".join(formatted) # Example usage if __name__ == \\"__main__\\": n = int(input().strip()) nums = list(map(int, input().strip().split())) target = int(input().strip()) quadruplets = find_quadruplets(nums, target) print(format_quadruplets(quadruplets))"},{"question":"In the realm of coding challenges, Priya stumbled upon a fascinating problem involving subsequences. She loves exploring various combinations, and this time she wants to find the number of distinct subsequences that are divisible by a given number K from a sequence of integers. A subsequence is derived by deleting zero or more elements from a sequence without changing the order of the remaining elements. For instance, given the sequence [1, 2, 3], the subsequence [1, 3] is valid, but [3, 1] is not. Input: The first line contains an integer T, indicating the number of test cases. Each test case contains two lines: - The first line has two integers N and K, where N is the number of integers in the sequence, and K is the divisor. - The second line contains N space-separated integers, representing the sequence. Output: For each test case, print the number of distinct subsequences that are divisible by K. Constraints: 1 ≤ T ≤ 5 1 ≤ N ≤ 50 1 ≤ K ≤ 20 1 ≤ Sequence[i] ≤ 100 SAMPLE INPUT 2 3 3 3 6 9 4 2 1 2 3 4 SAMPLE OUTPUT 7 7 Explanation For the first test case, the sequence is [3, 6, 9]. The valid subsequences are: [3], [6], [9], [3, 6], [3, 9], [6, 9], [3, 6, 9] - all of which are divisible by 3. For the second test case, the sequence is [1, 2, 3, 4]. The valid subsequences divisible by 2 are: [2], [4], [1, 2], [2, 3], [2, 4], [3, 4], [1, 2, 4].","solution":"from itertools import combinations def count_divisible_subsequences(N, K, sequence): Counts the number of distinct subsequences that are divisible by K from the given sequence. count = 0 for length in range(1, N + 1): for subsequence in combinations(sequence, length): if sum(subsequence) % K == 0: count += 1 return count def solve_problem(T, test_cases): Solves the problem for given T test cases. results = [] for i in range(T): N, K = test_cases[i][0] sequence = test_cases[i][1] result = count_divisible_subsequences(N, K, sequence) results.append(result) return results"},{"question":"Complete the function which takes an integer `n` (1 <= n <= 26) and returns the corresponding lowercase alphabet letter. For example: * `1` returns `\\"a\\"` * `2` returns `\\"b\\"` * `3` returns `\\"c\\"` * ... * `26` returns `\\"z\\"` If the number is outside the range 1 to 26, return `\\"Invalid input, please enter a number between 1 and 26\\"`.","solution":"def number_to_letter(n): Converts a number to its corresponding lowercase alphabet letter. Parameters: n (int): A number between 1 and 26 inclusive. Returns: str: Corresponding alphabet letter, or an error message for invalid input. if 1 <= n <= 26: return chr(n + 96) else: return \\"Invalid input, please enter a number between 1 and 26\\""},{"question":"You are given two strings, `A` and `B`, each consisting of lowercase letters and of the same length. You want to transform string `A` into string `B` by performing a series of operations. In one operation, you can choose any character in string `A` and change it to any other character. Your goal is to determine the minimum number of operations required to transform string `A` into string `B`. -----Constraints----- - All values in input are strings of lowercase letters. - 1 leq |A|, |B| leq 100 - |A| = |B| -----Input----- Input is given from Standard Input in the following format: A B -----Output----- Print the minimum number of operations required to transform string `A` into string `B`. -----Sample Input----- abcd abef -----Sample Output----- 2 In this case, you need to change the 3rd character (\'c\' to \'e\') and the 4th character (\'d\' to \'f\') of string `A` to transform it into string `B`. Thus, the minimum number of operations is 2.","solution":"def min_operations_to_transform(A, B): Returns the minimum number of operations required to transform string A into string B. if len(A) != len(B): raise ValueError(\\"Strings A and B must be of the same length.\\") operations = 0 for a, b in zip(A, B): if a != b: operations += 1 return operations if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() A, B = data[0], data[1] result = min_operations_to_transform(A, B) print(result)"},{"question":"A group of friends decided to go hiking and thought it would be fun to figure out who can carry the heaviest backpack among them. Each friend has their own carrying weight limit. Help decide the strongest friend among the group based on their carrying capacities. ----- Input Format ------ - The first line of input will contain an integer N — the number of friends in the group. - The second line contains N integers, where each integer denotes the carrying capacity of each friend (in kilograms). ----- Output Format ------ Output the index (1-based) of the friend with the highest carrying capacity. If there are multiple friends with the same highest carrying capacity, output the smallest index. ----- Constraints ------ 1 ≤ N ≤ 100 1 ≤ text{Carrying capacity} le 500 ----- Sample Input 1 ------ 5 15 20 5 20 10 ----- Sample Output 1 ------ 2 ----- explanation 1 ------ Friend 2 and Friend 4 both have the highest carrying capacity of 20 kilograms, but Friend 2 has the smallest index. So, the output is 2.","solution":"def strongest_friend_index(N, capacities): Returns the 1-based index of the friend with the highest carrying capacity. If there are multiple friends with the same highest carrying capacity, the smallest index is returned. Params: N (int): The number of friends. capacities (list): A list of integers representing the carrying capacities of friends. Returns: int: 1-based index of the friend with the highest carrying capacity. max_capacity = max(capacities) for i in range(N): if capacities[i] == max_capacity: return i + 1"},{"question":"In a distant land, there exists a library unlike any other. This library contains an infinite number of books with each book having a unique identifier represented by a positive integer. The library is maintained by an equally unique librarian who has a peculiar way of organizing and accessing the books. Each day, the librarian receives a list of queries, each query being one of the following two types: 1. Add Book: Add a book with a specific identifier to the library\'s collection. 2. Total Books: Determine the total number of unique books currently in the library that have identifiers within a specific range (inclusive). Your task is to help the librarian by processing these queries efficiently. Input The first line contains an integer Q, the number of queries. Each of the next Q lines contains a query, which can be one of two types: - \\"Add x\\" where x is the book\'s identifier (1 ≤ x ≤ 10^9). - \\"TotalBooks l r\\" where l and r represent the range [l, r] (1 ≤ l ≤ r ≤ 10^9). Output For each \\"TotalBooks\\" query, output a single integer denoting the total number of unique book identifiers within the specified range. Constraints 1 ≤ Q ≤ 10^5 SAMPLE INPUT 6 Add 3 Add 5 Add 8 TotalBooks 1 5 Add 5 TotalBooks 4 8 SAMPLE OUTPUT 2 2","solution":"class Library: def __init__(self): self.books = set() # To store unique book identifiers def add_book(self, identifier): self.books.add(identifier) def total_books(self, l, r): # Count the books within the range [l, r] count = 0 for book in self.books: if l <= book <= r: count += 1 return count def process_queries(queries): library = Library() results = [] for query in queries: parts = query.strip().split() if parts[0] == \\"Add\\": library.add_book(int(parts[1])) elif parts[0] == \\"TotalBooks\\": l = int(parts[1]) r = int(parts[2]) results.append(library.total_books(l, r)) return results"},{"question":"Complete the function `first_unique_char` / `firstUniqueChar` (or equivalent, depending on your language) that returns the first non-repeating character in a given string. If all characters are repeating or the string is empty, return an empty string `\\"\\"`. Examples ```python first_unique_char(\\"swiss\\") ==> \\"w\\" first_unique_char(\\"teeter\\") ==> \\"r\\" first_unique_char(\\"aabb\\") ==> \\"\\" first_unique_char(\\"alphabet\\") ==> \\"l\\" ``` Note - The string may contain any printable ASCII characters. - You may assume the input is always valid.","solution":"def first_unique_char(s): Returns the first non-repeating character in the given string. If all characters are repeating or the string is empty, returns an empty string. char_count = {} # Count the occurrences of each character for char in s: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # Find the first character that occurs only once for char in s: if char_count[char] == 1: return char return \\"\\""},{"question":"In a computer game, there are three quests that a player can complete in any order. Each quest rewards the player with a certain number of coins. Given the number of coins rewarded by quests A, B, and C, we need to determine the possible unique sum of coins a player can accumulate after completing any combination of quests. That is, they can choose to complete none, one, two, or all three quests. --- Constraints --- - 1 ≤ A, B, C ≤ 100 --- Input --- Input is given from Standard Input in the following format: A B C --- Output --- Output the possible unique sums of coins that a player can accumulate, each on a new line, in ascending order. --- Sample Input --- 4 6 8 --- Sample Output --- 0 4 6 8 10 12 14 18 Explanation: - Completing no quests gives 0 coins. - Completing quest A gives 4 coins. - Completing quest B gives 6 coins. - Completing quest C gives 8 coins. - Completing quests A and B gives 10 coins. - Completing quests A and C gives 12 coins. - Completing quests B and C gives 14 coins. - Completing all quests gives 18 coins.","solution":"def possible_coin_sums(A, B, C): Returns a sorted list of unique possible sums of coins for completing any combination of the quests. sums = set() quest_coins = [A, B, C] n = len(quest_coins) # Generate all possible combinations of sums def compute_sums(idx, current_sum): if idx == n: sums.add(current_sum) return # Include current quest compute_sums(idx + 1, current_sum + quest_coins[idx]) # Exclude current quest compute_sums(idx + 1, current_sum) compute_sums(0, 0) return sorted(sums)"},{"question":"In a distant galaxy, there is a unique form of digital communication that revolves around sequences of strings called \\"galactic codes\\". These codes are used to send messages between planets. Each message consists of a list of strings, and each string is made up of lowercase alphabetic characters. To ensure the messages are easily interpretable, they need to be sorted in a non-traditional way. The sorting is primarily based on the frequency of the characters in each string, with secondary criteria being the lexicographic order (standard dictionary order) if the frequencies are the same. Your task is to write a program that will sort a given list of strings based on these criteria. # Input - The first line contains an integer `t` denoting the number of test cases. - Each test case starts with an integer `n`, the number of strings. - The next `n` lines contain one string each. # Output For each test case, output the sorted list of strings, one per line. # Constraints - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 1000 - Each string\'s length will be at most 100. # Example Input ``` 2 3 banana apple pear 4 a ab aa b ``` Output ``` pear apple banana a b ab aa ``` # Explanation Test Case 1: - \\"banana\\": frequency map {\'a\': 3, \'b\': 1, \'n\': 2} - \\"apple\\": frequency map {\'a\': 1, \'e\': 1, \'l\': 1, \'p\': 2} - \\"pear\\": frequency map {\'a\': 1, \'e\': 1, \'p\': 1, \'r\': 1} Sorted strings based on frequency: 1. \\"pear\\" (each character appears once) 2. \\"apple\\" (two \'p\'s, rest are unique) 3. \\"banana\\" (three \'a\'s, others less frequent) Test Case 2: - \\"a\\": frequency map {\'a\': 1} - \\"ab\\": frequency map {\'a\': 1, \'b\': 1} - \\"aa\\": frequency map {\'a\': 2} - \\"b\\": frequency map {\'b\': 1} Sorted strings based on frequency: 1. \\"a\\" (one \'a\') 2. \\"b\\" (one \'b\') 3. \\"ab\\" (one \'a\', one \'b\', lexicographically smaller than \\"b\\") 4. \\"aa\\" (two \'a\'s)","solution":"def char_frequency(s): freq = {} for char in s: if char in freq: freq[char] += 1 else: freq[char] = 1 return freq def sort_strings(strings): def custom_sort(s): freq = char_frequency(s) freq_sorted = sorted(freq.values()) return (freq_sorted, s) sorted_strings = sorted(strings, key=custom_sort) return sorted_strings def process_test_cases(t, test_cases): result = [] for test in test_cases: n, strings = test[0], test[1:] sorted_strings = sort_strings(strings) result.append(sorted_strings) return result"},{"question":"Write a program that takes a string as input and prints each character of the string on a new line followed by its ASCII value in the format shown below: Input: A single line containing the string. Output: For each character in the input string, output the character, a colon, and its ASCII value in the format below. Example Input: hello Output: h: 104 e: 101 l: 108 l: 108 o: 111","solution":"def print_char_with_ascii(input_string): Prints each character of the input string on a new line followed by its ASCII value. for char in input_string: print(f\\"{char}: {ord(char)}\\")"},{"question":"You are given an undirected, unweighted graph with n vertices and m edges. Each vertex is assigned a unique number from 1 to n, and each edge has a unique number from 1 to m. Your task is to partition the vertices into two sets, such that there are no edges in the graph where both ends of the edge are in the same set. If it is possible to partition the graph in this way, return the partition. Otherwise, return \\"IMPOSSIBLE\\". Input: - First line contains two integers n and m (1 ≤ n, m ≤ 1000) — the number of vertices and edges, respectively. - Each of the following m lines contains two integers u and v (1 ≤ u, v ≤ n; u ≠ v) — the endpoints of the edge. Output: - If it is possible to partition the graph as described, print \\"POSSIBLE\\" on the first line. On the second line, print a sequence of n integers where the i-th integer is 1 if vertex i is in the first set, or 2 if vertex i is in the second set. - If it is impossible to partition the graph, print \\"IMPOSSIBLE\\". Example: Input: 4 4 1 2 1 3 2 4 3 4 Output: POSSIBLE 1 2 2 1 Input: 3 3 1 2 1 3 2 3 Output: IMPOSSIBLE Explanation: In the first example, it is possible to partition the vertices into sets {1, 4} and {2, 3}. In the second example, it is not possible to partition the vertices in the required way.","solution":"def is_bipartite(n, edges): from collections import deque, defaultdict # Build the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Initialize color array, -1 means unvisited/undefined color = [-1] * (n + 1) # Implement BFS to check bipartiteness def bfs(source): queue = deque([source]) color[source] = 1 # Start coloring source with 1 while queue: u = queue.popleft() for v in graph[u]: if color[v] == -1: # If the vertex is not colored color[v] = 3 - color[u] # Alternate color queue.append(v) elif color[v] == color[u]: # If adjacent vertices have the same color return False return True # Check all connected components for vertex in range(1, n + 1): if color[vertex] == -1: # Not visited yet if not bfs(vertex): return \\"IMPOSSIBLE\\" # If bipartite, convert color array to result result = [\\"POSSIBLE\\"] result.append(\' \'.join(str(color[i]) for i in range(1, n + 1))) return \'n\'.join(result) def partition_graph(n, m, edges): return is_bipartite(n, edges)"},{"question":"Given a collection of coins with different values, you are tasked with making a specific amount of money using the fewest number of coins possible. Write a program to determine the minimum number of coins required to achieve the given amount using the available coins. Input The input consists of the following: - The first line contains an integer N (1 ≤ N ≤ 100), which represents the number of test cases. - The next N lines each contain an integer amount (1 ≤ amount ≤ 10,000) followed by a space, and then a sequence of integers representing the coin denominations available. Each denomination is separated by a space. Output For each test case, output a single line containing the minimum number of coins needed to make the given amount. If it is impossible to make the exact amount using the available denominations, output \\"-1\\". Example Input ``` 3 11 1 5 10 7 1 3 4 5 15 1 2 5 10 ``` Output ``` 2 2 2 ``` Explanation: - In the first case, the amount is 11. Using the denominations {1, 5, 10}, the minimal solution would use coins {10, 1}, hence 2 coins. - In the second case, the amount is 7. Using the denominations {1, 3, 4, 5}, the minimal solution would use coins {3, 4}, hence 2 coins. - In the third case, the amount is 15. Using the denominations {1, 2, 5, 10}, the minimal solution would use coins {5, 10}, hence 2 coins.","solution":"def min_coins(amount, denominations): Determines the minimum number of coins required to make the given amount using the available denominations. Parameters: amount (int): The amount of money to make. denominations (list): A list of available coin denominations. Returns: int: The minimum number of coins, or -1 if it is impossible to make the amount. # Infinite value to represent an unreachable state INF = float(\'inf\') # Initialize a list to store the minimum coins needed for each amount up to the desired amount dp = [INF] * (amount + 1) dp[0] = 0 # For each coin, update the dp array for coin in denominations: for x in range(coin, amount + 1): if dp[x - coin] != INF: dp[x] = min(dp[x], dp[x - coin] + 1) return dp[amount] if dp[amount] != INF else -1 def solve(test_cases): Solves multiple test cases for the minimum number of coins problem. Parameters: test_cases (list): A list of tuples where each tuple contains the amount and the coins. Returns: list: A list containing the results for each test case. results = [] for amount, denominations in test_cases: results.append(min_coins(amount, denominations)) return results"},{"question":"Highways are crucial for connecting cities and ensuring smooth transportation. Consider a network of cities connected by highways. Each highway directly connects two cities and has a certain length. Given a map of cities, you need to determine the shortest path between two specific cities, taking into account the lengths of the highways between them. # Input The first line contains two integers, `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10000) — the number of cities and highways, respectively. Each of the next `m` lines contains three integers, `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), meaning there is a highway between cities `u` and `v` with length `w`. The last line contains two integers, `a` and `b` (1 ≤ a, b ≤ n, a ≠ b), which are the start and end cities between which you need to find the shortest path. # Output Print a single integer — the length of the shortest path from city `a` to city `b`. If there is no path between the two cities, print `-1`. # Examples **Input:** ``` 4 4 1 2 10 2 3 10 3 4 10 1 4 50 1 4 ``` **Output:** ``` 30 ``` **Input:** ``` 3 1 1 2 5 3 1 ``` **Output:** ``` -1 ```","solution":"import heapq def shortest_path(n, m, highways, start, end): Returns the length of the shortest path from city `start` to city `end`. graph = {i: [] for i in range(1, n+1)} for u, v, w in highways: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm pq = [(0, start)] dist = {i: float(\'inf\') for i in range(1, n+1)} dist[start] = 0 while pq: curr_dist, u = heapq.heappop(pq) if curr_dist > dist[u]: continue for v, weight in graph[u]: distance = curr_dist + weight if distance < dist[v]: dist[v] = distance heapq.heappush(pq, (distance, v)) return dist[end] if dist[end] != float(\'inf\') else -1"},{"question":"Chef recently bought a new game with N levels, each with a certain difficulty rating. Chef wants to practice and improve, so he decided to practice based on difficulty levels. Chef\'s aim is to find out the maximum and minimum difficulty levels in the given list of levels. ------ Input Format ------ - The first line contains a single integer N — the number of levels in the game. - The second line contains N space-separated integers where each integer represents the difficulty rating of a level. ------ Output Format ------ - Output two space-separated integers — the maximum difficulty level and the minimum difficulty level among all the levels. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ text{difficulty rating of each level} ≤ 10000 ----- Sample Input 1 ------ 5 4 7 1 8 9 ----- Sample Output 1 ------ 9 1 ----- explanation 1 ------ The maximum difficulty level among the given levels is 9, and the minimum difficulty level is 1. ----- Sample Input 2 ------ 3 10 10 10 ----- Sample Output 2 ------ 10 10 ----- explanation 2 ------ All levels have the same difficulty rating of 10, hence both maximum and minimum difficulty levels are 10. ----- Sample Input 3 ------ 6 15 3 21 6 9 4 ----- Sample Output 3 ------ 21 3 ----- explanation 3 ------ The maximum difficulty level among the given levels is 21, and the minimum difficulty level is 3. ----- Sample Input 4 ------ 4 100 200 150 180 ----- Sample Output 4 ------ 200 100 ----- explanation 4 ------ The maximum difficulty level among the given levels is 200, and the minimum difficulty level is 100.","solution":"def find_max_min_difficulties(levels): Returns the maximum and minimum difficulty levels from a list of level difficulties. Args: levels (list of int): A list of difficulty levels. Returns: tuple: A tuple containing the maximum and minimum difficulty levels. max_difficulty = max(levels) min_difficulty = min(levels) return max_difficulty, min_difficulty"},{"question":"Given a string `str`, find all the duplicate characters in the string and return them as a list. Duplicates should be listed in the order they first appear in the string. Example 1: Input: str = \\"programming\\" Output: [\'r\', \'g\', \'m\'] Explanation: The duplicate characters are \'r\', \'g\', and \'m\' which appear more than once in the string. They first appear in this order in the string. Example 2: Input: str = \\"computer\\" Output: [] Explanation: There are no duplicate characters in the string. Your Task: You don\'t need to read or print anything. Your task is to complete the function `findDuplicates()` which takes the string `str` as input parameter and returns a list of duplicate characters. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1. 1 ≤ len(str) ≤ 1000 2. The string contains only lowercase English alphabets.","solution":"def findDuplicates(s): Returns a list of duplicate characters in the string in the order they first appear. from collections import defaultdict count = defaultdict(int) result = [] for char in s: count[char] += 1 for char in s: if count[char] > 1 and char not in result: result.append(char) return result"},{"question":"**Problem Statement: Keyboard Navigation** Johnny is navigating through a large text document on his computer. The document is represented as a single string T of length N where each character can be either a letter from \'a\' to \'z\' or a digit from \'0\' to \'9\'. Johnny is currently located at the first character T_1 and wants to reach the last character T_N in the minimal number of moves. While staying at some index j, Johnny can: 1. Move left to j - 1 or right to j + 1. 2. Jump to any index k such that 0 leq |j - k| leq M, where M is a given maximum jump length. Help Johnny find the minimal number of moves needed to reach T_N from T_1. -----Input----- - The first line contains an integer N - the length of string T. - The second line contains an integer M - the maximum jump length. - The third line contains the string T. -----Output----- In a single line, print a single integer - the minimal number of moves Johnny needs. -----Constraints----- - 1 leq N leq 10^5 - 1 leq M leq N - T only contains lowercase alphabets and digits. -----Example Input 1----- 10 2 abcdefghij -----Example Output 1----- 5 -----Example Input 2----- 15 4 123456789012345 -----Example Output 2----- 4 -----Explanation----- Test Case 1: Johnny can follow a direct sequence of moves from the first character to the last with the help of maximum 2 characters jump. Test Case 2: Johnny can use the maximum jump length to cover larger distances in fewer total moves.","solution":"from collections import deque def minimal_moves(n, m, t): Find the minimal number of moves needed to reach the last character of the string. # Initialize a deque for BFS and a list to track visited indices queue = deque([(0, 0)]) # (current_index, move_count) visited = [False] * n visited[0] = True while queue: current, moves = queue.popleft() # Return the number of moves if we reached the last character if current == n - 1: return moves # Try to move to all positions within the maximum jump length for i in range(max(0, current - m), min(n, current + m + 1)): if not visited[i]: visited[i] = True queue.append((i, moves + 1)) # Example usage n = 10 m = 2 t = \\"abcdefghij\\" print(minimal_moves(n, m, t)) # Output: 5"},{"question":"Samantha is a botanist studying a rare species of plants that can replicate themselves under specific conditions. Each plant can create one new plant in exactly one day. Given the current number of plants in her control, Samantha wants to predict the number of plants she will have after a certain number of days. Can you help her by writing a program to determine the number of plants at the end of the given period if the number of plants doubles every day? Constraints 1 ≤ initial_plants ≤ 10^9 0 ≤ days ≤ 30 Input The first line contains an integer initial_plants, the initial number of plants. The second line contains an integer days, the number of days after which Samantha wants to know the number of plants. Output Output a single integer representing the number of plants at the end of the given period. Example Input: 3 2 Output: 12 Explanation On the first day, 3 plants will become 6. On the second day, 6 plants will become 12. Thus, after 2 days, the number of plants will be 12.","solution":"def number_of_plants(initial_plants, days): Returns the number of plants at the end of the given period. :param initial_plants: int - initial number of plants :param days: int - number of days after which to calculate the number of plants :return: int - number of plants at the end of the given period return initial_plants * (2 ** days)"},{"question":"A group of friends decided to play a prank on one of their friends by rearranging the keys on his keyboard. The keys on the keyboard are initially arranged in alphabetical order in the following manner: a b c d e f g h i j k l m n o p q r s t u v w x y z The friends rearranged the keyboard based on a given permutation of the English alphabet. Your task is to transform a given string into a new string by replacing each character with its corresponding character from the rearranged keyboard. For example, if the permutation of the alphabet is \\"qwertyuiopasdfghjklzxcvbnm\\", then the letter \'a\' gets replaced by \'q\', \'b\' gets replaced by \'w\', and so on. -----Input----- The first line contains a string of exactly 26 characters, representing the permutation of the English alphabet. The second line contains an integer n (1 ≤ n ≤ 100 000) — the length of the string that needs to be transformed. The third line contains a string of n lowercase English letters. -----Output----- Print the transformed string after replacing each character based on the given permutation. -----Example----- Input qwertyuiopasdfghjklzxcvbnm 11 hello Output itssg Input zyxwvutsrqponmlkjihgfedcba 5 abcde Output zxywv","solution":"def transform_string(permutation, n, original_str): Transforms the original_str based on the given permutation. :param permutation: A string representing the permutation of the English alphabet. :param n: An integer representing the length of the string to be transformed. :param original_str: A string of n lowercase English letters to be transformed. :return: The transformed string. # Create a dictionary to map original alphabet to the permuted one char_map = {chr(97 + i): permutation[i] for i in range(26)} # Transform the original string transformed_str = \'\'.join(char_map[char] for char in original_str) return transformed_str"},{"question":"In a certain town, the water consumption is measured daily in cubic meters (m³). The town has a rule that if consumption exceeds 500 m³ in a day, a surcharge rate of 5% is applied to the entire amount. Write a program that calculates the total cost for each day\'s consumption, given a base rate per cubic meter. ------ Input Format ------ The first line contains an integer N, the total number of test cases. Each of the next N lines contains two integers: consumption and base_rate. ------ Output Format ------ For each test case, print the total cost of water consumption with two decimal points, in a new line. ------ Constraints ------ 1 ≤ N ≤ 1000 1 ≤ consumption, base_rate ≤ 10000 ------ Sample Input 1 ------- 3 400 2 600 3 500 5 ------ Sample Output 1 ------- 800.00 1890.00 2500.00","solution":"def calculate_total_cost(consumption, base_rate): Calculate the total cost for water consumption. Args: - consumption (int): The amount of water consumed in cubic meters. - base_rate (int): The base rate per cubic meter. Returns: - total_cost (float): The total cost for the consumption with or without surcharge. total_cost = consumption * base_rate if consumption > 500: total_cost += total_cost * 0.05 return round(total_cost, 2) def process_test_cases(test_cases): Process each test case and return the results. Args: - test_cases (list of tuples): Each tuple contains (consumption, base_rate) Returns: - results (list of float): The list of total costs for each test case with two decimal precision results = [] for consumption, base_rate in test_cases: results.append(calculate_total_cost(consumption, base_rate)) return results"},{"question":"Given an array of integers `arr` and an integer `k`, find all unique pairs (a, b) in the array such that: 1. The sum of the pair is equal to `k`. 2. Both a and b should be in the array. 3. The value `a` should be less than `b`. 4. Each pair (a, b) should be represented as a tuple and the pairs should not repeat. Example 1: Input: arr = [1, 2, 3, 4, 5] k = 5 Output: {(1, 4), (2, 3)} Explanation: These pairs add up to 5: 1+4 2+3 Example 2: Input: arr = [1, 1, 2, 3, 4, 5] k = 6 Output: {(1, 5), (2, 4)} Explanation: These pairs add up to 6: 1+5 2+4 Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findPairs()` which takes an array of integers `arr` and an integer `k` as input parameters and returns a set containing all unique pairs (a, b) that add up to `k`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= arr.length <= 10^6 -10^6 <= arr[i] <= 10^6","solution":"def find_pairs(arr, k): seen = set() pairs = set() for num in arr: complement = k - num if complement in seen: pairs.add((min(num, complement), max(num, complement))) seen.add(num) return pairs"},{"question":"Write a function `findTopStudent` that accepts a list of dictionaries, where each dictionary represents a student and contains their name and their scores in three subjects: Mathematics, Chemistry, and Physics. The function should return the name of the student with the highest total score across all three subjects. If there is a tie, the student who appears first in the list should be returned. # Input - A list of dictionaries, where each dictionary has the following structure: ```python {\\"name\\": \\"string\\", \\"Mathematics\\": int, \\"Chemistry\\": int, \\"Physics\\": int} ``` # Output - A string which is the name of the student with the highest total score. # Example ```python input_students = [ {\\"name\\": \\"Alice\\", \\"Mathematics\\": 90, \\"Chemistry\\": 85, \\"Physics\\": 82}, {\\"name\\": \\"Bob\\", \\"Mathematics\\": 88, \\"Chemistry\\": 89, \\"Physics\\": 95}, {\\"name\\": \\"Charlie\\", \\"Mathematics\\": 95, \\"Chemistry\\": 90, \\"Physics\\": 85} ] findTopStudent(input_students) ``` Output: ``` \\"Charlie\\" ``` # Note In this example: - Alice\'s total score is 90 + 85 + 82 = 257 - Bob\'s total score is 88 + 89 + 95 = 272 - Charlie\'s total score is 95 + 90 + 85 = 270 Bob has the highest total score, so the function returns \\"Bob\\".","solution":"def findTopStudent(students): Returns the name of the student with the highest total score. If there is a tie, the first student in the list with the highest score is returned. highest_score = -1 top_student = \\"\\" for student in students: total_score = student[\\"Mathematics\\"] + student[\\"Chemistry\\"] + student[\\"Physics\\"] if total_score > highest_score: highest_score = total_score top_student = student[\\"name\\"] return top_student"},{"question":"Mister A is coding a complex simulation. Sadly, he encountered a peculiar situation where a file containing the simulation parameters might have become corrupted. The file is supposed to hold a matrix of size n x m. He identified that some rows and columns might be completely missing from the matrix due to corruption. Mister A needs to analyze the given matrix and restore the original dimensions. Luckily, he found an algorithm to identify missing rows and columns if he knows the correct dimensions. In this situation, he needs to: 1. Determine the correct size of the missing rows and columns. 2. Fill the identified rows and columns with the average of the non-missing elements. If all elements of a row or column are missing, set their value to 0. Write a function to help Mister A recover the matrix dimensions and fill the missing elements. **Input:** - The first line contains two integers t (1 ≤ t ≤ 100) — the number of test cases. - Each test case consists of: - The first line contains two integers n and m (2 ≤ n, m ≤ 1000) — the supposed dimensions of the original matrix. - The next n lines each contains m space-separated integers, where missing cells are denoted by -1. **Output:** For each test case, print the restored matrix of dimensions n x m with missing values filled as specified. **Example:** **Input:** ``` 2 3 3 1 2 3 4 5 6 7 8 -1 2 2 -1 -1 -1 4 ``` **Output:** ``` 1 2 3 4 5 6 7 8 4.5 0 0 0 4 ``` **Note:** In the first test case, the missing element is filled with the average of non-missing values in the matrix. For the second test case, the rows and columns with all elements missing are filled with 0.","solution":"def restore_matrix(test_cases): results = [] for case in test_cases: n, m, matrix = case total_sum = 0 total_count = 0 missing_positions = [] for i in range(n): for j in range(m): if matrix[i][j] != -1: total_sum += matrix[i][j] total_count += 1 else: missing_positions.append((i, j)) avg_value = total_sum / total_count if total_count != 0 else 0 restored_matrix = [[avg_value if (i, j) in missing_positions else matrix[i][j] for j in range(m)] for i in range(n)] for i in range(n): row_missing = all(matrix[i][j] == -1 for j in range(m)) if row_missing: restored_matrix[i] = [0] * m for j in range(m): col_missing = all(matrix[i][j] == -1 for i in range(n)) if col_missing: for i in range(n): restored_matrix[i][j] = 0 results.append(restored_matrix) return results"},{"question":"# Definition A **number** is called a **_Perfect Square_** if it is the product of an integer with itself. ___ # Task **_Given_** a **number**, *determine if it is a perfect square or not*. ___ # Warm-up (Highly recommended) # [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers) ___ # Notes * The **_number_** passed to the function is **_non-negative_** and **_integer_**. ___ # Input >> Output Examples ``` isPerfectSquare (25) -->> return \\"Perfect Square\\" ``` **_Explanation_**: * `25` is `5` squared, **_a perfect square_**. ___ ``` isPerfectSquare (13) -->> return \\"Not!!\\" ``` **_Explanation_**: * `13` is not a perfect square. ___ ``` isPerfectSquare (49) -->> return \\"Perfect Square\\" ``` **_Explanation_**: * `49` is `7` squared, **_a perfect square_**. ___ ``` isPerfectSquare (50) -->> return \\"Not!!\\" ``` **_Explanation_**: * `50` is not a perfect square. ___ ___ # [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers) # [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored) ___ ALL translations are welcomed Enjoy Learning !! # Zizou","solution":"import math def isPerfectSquare(n): Determine if a number is a perfect square. Parameters: n (int): The number to check. Returns: str: \\"Perfect Square\\" if n is a perfect square, \\"Not!!\\" otherwise. if math.isqrt(n) ** 2 == n: return \\"Perfect Square\\" else: return \\"Not!!\\""},{"question":"Maria is passionate about geometric patterns. She\'s currently fascinated by triangles and wants to calculate something she calls the \\"Triangle Number Sum\\" for a given set of triangles. A triangle number is a number that can form an equilateral triangle as a dot pattern. The n-th triangle number is the sum of the first n natural numbers, i.e., T(n) = n * (n + 1) / 2. Given an integer N, Maria wants to find the sum of all triangle numbers up to and including T(N), then calculate the result modulo M. For example, for N = 4, the triangle numbers are [1, 3, 6, 10] and their sum is 20. Write a function to assist Maria in calculating this sum under modulo M. ------ Input ------ The input consists of two integers N and M separated by space. ------ Output ------ Output a single integer, the sum of all triangle numbers up to T(N) modulo M. ------ Example ------ Input: 4 100 Output: 20 ------ Explanation ------ The triangle numbers up to the 4-th triangle number are [1, 3, 6, 10]. Their sum is 20. ------ Constraints ------ 1 ≤ N ≤ 10^{6} 1 ≤ M ≤ 10^{9} ------ Note ------ Make sure your solution is efficient and works for large values of N.","solution":"def sum_triangle_numbers(n, m): Calculate the sum of all triangle numbers up to T(n) modulo m. Parameters: n (int): The maximum n-th triangle number to consider. m (int): The modulo value. Returns: int: The sum of all triangle numbers up to T(n) modulo m. triangle_sum = 0 for i in range(1, n + 1): triangle_sum += i * (i + 1) // 2 triangle_sum %= m # applying modulo to avoid large intermediate values return triangle_sum"},{"question":"You are given a 2-D array with dimensions (N times M). Your task is to perform the sum function over axis (0) and then find the mean of that. # Input Format The first line of input contains the space-separated values of (N) and (M). The next (N) lines contain (M) space-separated integers each. # Output Format Compute the sum along axis (0) and then print the mean of that result, rounded to two decimal places. # Sample Input ``` 3 3 1 2 3 4 5 6 7 8 9 ``` # Sample Output ``` 12.00 ``` # Explanation The sum along axis (0) results in ([12, 15, 18]). The mean of ([12, 15, 18]) is ((12+15+18) / 3 = 15.0). So, the output will be (15.00).","solution":"def compute_mean_of_sum_axis_0(N, M, array): Given a 2-D array of dimensions N x M, compute the sum over axis 0 and then find the mean of that. Parameters: N (int): Number of rows in the array. M (int): Number of columns in the array. array (list of list of int): 2-D array of integers. Returns: float: Mean of the sum along axis 0, rounded to two decimal places. # Sum along axis 0 sum_axis_0 = [sum(row[col] for row in array) for col in range(M)] # Compute mean of the sum mean_sum = sum(sum_axis_0) / M # Return rounded result return round(mean_sum, 2)"},{"question":"Vova is playing another game called \\"Guardians of the Forest\\" where he needs to manage a group of mystical creatures called \\"Griffins\\". Each Griffin has a unique magic number, and Vova wants to form the strongest possible squad for defending the forest. This squad formation is defined by specific rules regarding the magic numbers of the Griffins. Vova can perform three types of operations on the squad of Griffins: * 1 mi — One Griffin with magic number mi joins Vova\'s squad; * 2 mi — One Griffin with magic number mi leaves Vova\'s squad (it is guaranteed that there is at least one such Griffin in Vova\'s squad at this moment); * 3 — Vova wants to know the maximum magic number among the Griffins currently in the squad. Note that each Griffin\'s magic number is a unique integer. Input The first line contains one integer q (1 ≤ q ≤ 100000) — the number of operations. Each of the following q lines describes an operation: * 1 mi (1 ≤ mi ≤ 10^9) — One Griffin with magic number mi joins Vova\'s squad; * 2 mi (1 ≤ mi ≤ 10^9) — One Griffin with magic number mi leaves Vova\'s squad; * 3 — Vova wants to know the maximum magic number among the Griffins currently in the squad. Output For each operation of the third type, print one integer — the maximum magic number among the Griffins in the squad. Example Input 6 1 5 1 7 3 2 7 1 3 3 Output 7 5 Note Initially, the squad includes Griffins with magic numbers 5 and 7 after the first two operations. When Vova checks the highest magic number (operation type 3), the result is 7. Then Griffin with magic number 7 leaves the squad, and one with magic number 3 joins. When Vova checks the highest magic number again, the result is 5.","solution":"import heapq class GriffinSquad: def __init__(self): self.squad = [] self.present = set() self.removed = set() def add_griffin(self, mi): heapq.heappush(self.squad, -mi) self.present.add(mi) def remove_griffin(self, mi): self.present.remove(mi) self.removed.add(mi) def max_magic_number(self): while -self.squad[0] in self.removed: removed_item = -heapq.heappop(self.squad) self.removed.remove(removed_item) return -self.squad[0] def griffin_operations(operations): squad = GriffinSquad() results = [] for op in operations: if op[0] == 1: squad.add_griffin(op[1]) elif op[0] == 2: squad.remove_griffin(op[1]) elif op[0] == 3: results.append(squad.max_magic_number()) return results"},{"question":"Alice and Bob are playing a game with a sequence of integers. Alice loves even numbers while Bob prefers odd numbers. They both want to select a subsequence of the given integers such that Alice\'s subsequence has the maximum possible number of even numbers, and Bob\'s subsequence has the maximum possible number of odd numbers. They play optimally and do not share numbers between their subsequences. Your task is to determine the maximum number of integers Alice and Bob can select for their respective subsequences. -----Input----- The first line of input contains a single integer T denoting the number of test cases. The first line of each test case contains a single integer N denoting the number of integers in the sequence. The second line of each test case contains N space-separated integers a1, a2, ..., aN representing the sequence. -----Output----- For each test case, output two space-separated integers — the maximum number of integers Alice can select and the maximum number of integers Bob can select. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 100 - -1000 ≤ ai ≤ 1000 -----Example----- Input 3 5 1 2 3 4 5 4 2 4 6 8 6 1 3 5 7 9 11 Output 2 3 4 0 0 6 -----Explanation----- - Test 1: Alice can select [2, 4] and Bob can select [1, 3, 5]. - Test 2: Alice can select all [2, 4, 6, 8] and Bob cannot select any. - Test 3: Alice cannot select any as all are odd numbers, while Bob can select all [1, 3, 5, 7, 9, 11].","solution":"def max_even_odd_selection(test_cases): Take a list of test cases, each containing a list of integers, and return the maximum number of even and odd numbers that Alice and Bob can select respectively. :param test_cases: List of tuples. Each tuple contains a list of integers. :return: List of tuples. Each tuple contains the maximum number of evens for Alice and the maximum number of odds for Bob. results = [] for case in test_cases: numbers = case[1] evens = sum(1 for num in numbers if num % 2 == 0) odds = len(numbers) - evens results.append((evens, odds)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] line_idx = 1 for _ in range(T): N = int(input_lines[line_idx]) numbers = list(map(int, input_lines[line_idx + 1].split())) test_cases.append((N, numbers)) line_idx += 2 return test_cases def format_output(results): return \\"n\\".join(f\\"{evens} {odds}\\" for evens, odds in results)"},{"question":"Write a function named `sumNumberStrings` that takes a list of strings as input. Each string in the list is composed of digits. Your function should return the sum of these numbers as an integer. If the list contains any non-numeric strings, they should be ignored. Examples of inputs and subsequent outputs: ``` [\\"123\\", \\"456\\", \\"abc\\", \\"789\\"] -> 1368 [\\"100\\", \\"200\\", \\"invalid\\", \\"300\\"] -> 600 [\\"42\\", \\"-5\\", \\"7.5\\", \\"0\\", \\"null\\"] -> 42 ```","solution":"def sumNumberStrings(strings): Returns the sum of numeric strings in the list, ignoring non-numeric strings. total_sum = 0 for s in strings: if s.isdigit() or (s[1:].isdigit() and (s[0] == \'-\' or s[0] == \'+\')): # Handle negative or positive numbers represented as strings total_sum += int(s) return total_sum"},{"question":"Given is a list of N positive integers: a_1, a_2, ..., a_N. Determine if any of the given positive integers appears at least three times in the list. If so, print the first such number from the highest index encounter. If no number appears at least three times, print \\"No\\". -----Constraints----- - 1 leq N leq 100 - 1 leq a_i leq 100 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 ... a_N -----Output----- Print the answer. -----Sample Input----- 7 4 5 2 4 4 3 5 -----Sample Output----- 4 In the sequence 4 5 2 4 4 3 5, the integer 4 appears at least three times and is the first such number from the highest index encounter. -----Sample Input----- 6 1 2 3 2 1 3 -----Sample Output----- No In the sequence 1 2 3 2 1 3, no number appears at least three times.","solution":"def find_triplet_num(N, nums): Determines if any of the given positive integers appears at least three times in the list. If so, returns the first such number from the highest index encounter. If no number appears at least three times, returns \\"No\\". from collections import Counter count = Counter(nums) for num in reversed(nums): if count[num] >= 3: return num return \\"No\\""},{"question":"In a galaxy far away, on the planet Orbis, a group of researchers is working to decode messages being transmitted by an alien species. They discover that these messages are being encoded as strings containing only the characters \'A\', \'B\', and \'C\'. They\'ve identified that these strings follow a specific rule: A string is valid if and only if: - It contains no more than one \'B\' and - It contains no more than two \'C\'s. Your task is to help the researchers by writing a function `is_valid_message(s)` that takes a string `s` as input and returns `True` if the string conforms to the rules described, and `False` otherwise. Here are some examples to illustrate: - The string `\\"AAC\\"` is valid because it contains 0 \'B\'s and 1 \'C\'. - The string `\\"BBC\\"` is invalid because it contains 2 \'B\'s. - The string `\\"CCB\\"` is valid because it contains 1 \'B\' and 2 \'C\'s. - The string `\\"CCCC\\"` is invalid because it contains 4 \'C\'s. Function signature: ```python def is_valid_message(s: str) -> bool: pass ``` Constraints: - The length of the string `s` does not exceed 100 characters. - The character set is limited to \'A\', \'B\', and \'C\' only.","solution":"def is_valid_message(s: str) -> bool: Returns True if the string s is a valid message according to the rules: - It contains no more than one \'B\'. - It contains no more than two \'C\'s. return s.count(\'B\') <= 1 and s.count(\'C\') <= 2"},{"question":"Given an integer array `arr` of length `n`, determine the length of the longest strictly increasing subsequence (LIS). A strictly increasing subsequence is a subsequence where each element is greater than the preceding one. Your task is to write a function that computes the length of the LIS in `arr`. Constraints * The length of `arr` (n) is in the range [1, 10^4]. * The elements of `arr` are integers in the range [-10^4, 10^4]. Input Input is given from Standard Input in the following format: ``` n arr[0] arr[1] ... arr[n-1] ``` Output Output a single integer denoting the length of the longest strictly increasing subsequence. Examples Input: ``` 6 10 9 2 5 3 7 101 18 ``` Output: ``` 4 ``` Input: ``` 4 0 1 0 3 2 3 ``` Output: ``` 4 ``` Input: ``` 1 10 ``` Output: ``` 1 ``` For the first example, the longest strictly increasing subsequence is [2, 3, 7, 101]. For the second example, the longest strictly increasing subsequence is [0, 1, 2, 3]. For the third example, the longest strictly increasing subsequence is [10].","solution":"def length_of_LIS(arr): Returns the length of the longest strictly increasing subsequence in the given array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are building a high speed roller coaster and need to ensure that the rides are safe and thrilling. Each ride is represented by an object which includes the name of the ride, the maximum speed it reaches in km/h, the duration of the ride in minutes, and a list of safety checks to be performed. Each safety check will have a name and a status which can either be `passed` or `failed`. Write a function `check_ride_safety` that takes in a ride object and returns whether the ride is safe to operate or not, based on the provided safety checks. Example: ```python ride = { \\"name\\": \\"Thunderbolt\\", \\"max_speed\\": 120, \\"duration\\": 3, \\"safety_checks\\": [ {\\"name\\": \\"Harness check\\", \\"status\\": \\"passed\\"}, {\\"name\\": \\"Brake check\\", \\"status\\": \\"passed\\"}, {\\"name\\": \\"Speed control\\", \\"status\\": \\"failed\\"} ] } def check_ride_safety(ride): # Your code here pass print(check_ride_safety(ride)) -> \\"Thunderbolt is not safe to operate.\\" ``` **Rules** - The function `check_ride_safety` should return a string in the format `\\"{Ride Name} is safe to operate.\\"` if all the safety checks are passed. - If any of the safety checks fail, return `\\"{Ride Name} is not safe to operate.\\"` - The ride\'s speed and duration are not part of the safety determination for this task. Only the results of the safety checks matter. **To roller coaster enthusiasts** Ensure you\'ve checked all the safety measures before giving the green light!","solution":"def check_ride_safety(ride): Check if the ride is safe to operate based on safety checks. Parameters: ride (dict): A dictionary representing a ride with keys \\"name\\", \\"max_speed\\", \\"duration\\", and \\"safety_checks\\". Returns: str: A string indicating whether the ride is safe to operate. for check in ride[\\"safety_checks\\"]: if check[\\"status\\"] == \\"failed\\": return f\'{ride[\\"name\\"]} is not safe to operate.\' return f\'{ride[\\"name\\"]} is safe to operate.\'"},{"question":"For a given list of intervals, merge all overlapping intervals and return the non-overlapping intervals that cover all the intervals in the input. An interval is represented by a tuple (start, end), where start and end are integers. Constraints * 1 ≤ number of intervals ≤ 100 * -10000 ≤ start ≤ end ≤ 10000 Input The input consists of multiple intervals in the following format: n start1 end1 start2 end2 : startn endn The first integer n is the number of intervals. Each interval is represented by two integers starti and endi. Output Print the merged intervals, each interval on a new line in the format (start, end). Examples Input 3 1 3 2 4 5 7 Output (1, 4) (5, 7) Input 4 6 8 1 3 2 4 9 10 Output (1, 4) (6, 8) (9, 10)","solution":"def merge_intervals(intervals): Merge all overlapping intervals and return the non-overlapping intervals that cover all the intervals in the input. if not intervals: return [] # Sort intervals by starting time intervals.sort(key=lambda x: x[0]) merged = [intervals[0]] for current in intervals: last = merged[-1] if current[0] <= last[1]: # Overlapping intervals, merge them merged[-1] = (last[0], max(last[1], current[1])) else: merged.append(current) return merged # example usage def parse_input(input_string): lines = input_string.strip().split(\'n\') n = int(lines[0]) intervals = [tuple(map(int, line.split())) for line in lines[1:n + 1]] return intervals def print_intervals(intervals): for interval in intervals: print(f\\"({interval[0]}, {interval[1]})\\") input_string = \\"4n6 8n1 3n2 4n9 10\\" intervals = parse_input(input_string) merged_intervals = merge_intervals(intervals) print_intervals(merged_intervals)"},{"question":"Alice owns a small bakery and is trying to optimize her ingredient purchasing to minimize waste. She has n different recipes, and for each recipe, there are specific ingredients required in certain quantities. However, the suppliers sell each ingredient in packs containing a fixed quantity, different from what the recipes call for. Alice wants to ensure that when she buys packs of ingredients, she has enough to prepare any of her recipes without running out of any ingredient. Your task is to help Alice by determining the minimum number of packs of each ingredient she should buy so that she can make any recipe without falling short on any required ingredients. Input The first line of the input contains two integers n and m (1 ≤ n, m ≤ 100) — the number of recipes and the number of different ingredients, respectively. The next n lines describe the recipes. Each line contains m integers ai1, ai2, ..., aim (0 ≤ aij ≤ 1000), where aij denotes the quantity of the j-th ingredient required for the i-th recipe. The following m lines describe the ingredient packs. Each line contains a single integer pj (1 ≤ pj ≤ 1000), where pj denotes the quantity of the j-th ingredient in one pack. Output Print a single line containing m integers — the minimum number of packs Alice should buy for each ingredient. Example Input 3 3 3 2 5 4 1 2 1 3 4 2 1 3 Output 2 3 2 Explanation To satisfy all three recipes, Alice needs: - For the first ingredient: 4, since the maximum requirement is 4 (from the second recipe), and each pack contains 2, so at least 2 packs are needed. - For the second ingredient: 3, since the maximum requirement is 3 (from the third recipe), and each pack contains 1, so at least 3 packs are needed. - For the third ingredient: 5, since the maximum requirement is 5 (from the first recipe), and each pack contains 3, so at least 2 packs are needed. In this scenario, Alice needs to buy 2 packs of the first ingredient, 3 packs of the second ingredient, and 2 packs of the third ingredient.","solution":"import math def minimum_packs(n, m, recipes, packs): max_requirements = [0] * m # Find maximum requirement for each ingredient across all recipes for recipe in recipes: for j in range(m): max_requirements[j] = max(max_requirements[j], recipe[j]) # Calculate the minimum packs needed for each ingredient min_packs = [0] * m for j in range(m): min_packs[j] = math.ceil(max_requirements[j] / packs[j]) return min_packs"},{"question":"Jill and Brian are friends who enjoy playing with numbers. Each of them has a list of integers and they both want to combine their lists in the most optimal way. One day, Kelly visited Jill and Brian and noticed their lists of integers. Kelly wondered what the lexicographically smallest merged list would be if Jill and Brian could only take the integer from the front of their lists. Kelly wants to use all the integers from both lists. For example, assume Jill has the list `a = [1, 3, 5]` and Brian has the list `b = [2, 4, 6]`. The result would be `[1, 2, 3, 4, 5, 6]`. Write a function `mergeAndSortLists` that merges and sorts the lists in a lexicographically smallest order. Function Description Complete the `mergeAndSortLists` function in the editor below. `mergeAndSortLists` has the following parameters: - `int[] a`: Jill\'s list of integers - `int[] b`: Brian\'s list of integers Returns - `int[]`: the lexicographically smallest merged list Input Format The first line contains an integer `t`, the number of test cases. The next `t` pairs of lines are as follows: - The first line contains the list `a` with space-separated integers. - The second line contains the list `b` with space-separated integers. Constraints - 1 leq t leq 5 - 1 leq |a|, |b| leq 10^5 - Each list contains integers between 1 and 10^9 Sample Input 2 1 3 5 2 4 6 10 15 20 5 10 15 Sample Output 1 2 3 4 5 6 5 10 10 15 15 20 Explanation In the first example, the combined lists [1, 2, 3, 4, 5, 6] are already sorted in lexicographical order. In the second example, the merged list sorted in lexicographical order is [5, 10, 10, 15, 15, 20].","solution":"def mergeAndSortLists(a, b): Merges two lists a and b in the lexicographically smallest order by taking elements from the front. merged_list = [] i, j = 0, 0 while i < len(a) and j < len(b): if a[i] <= b[j]: merged_list.append(a[i]) i += 1 else: merged_list.append(b[j]) j += 1 merged_list.extend(a[i:]) merged_list.extend(b[j:]) return merged_list"},{"question":"Create a program that reads the annual rainfall data for different cities and outputs the difference in rainfall between the wettest and driest city. Input: The input is given in the following format: City name and rainfall (mm) ... ... The rainfall data for each city is provided over multiple lines. Each line contains the city name followed by its annual rainfall in millimeters (mm). All rainfall values are real numbers greater than or equal to 0 and less than or equal to 5000. The number of city rainfall records entered is 30 or less. Output: The difference in rainfall between the city with the most rainfall and the city with the least rainfall is output as a real number. The output may contain an error of 0.01 or less. Example: Input: Tokyo 1523.4 Nagoya 1282.7 Osaka 1335.5 Kyoto 1689.2 Hokkaido 923.1 Output: 766.1","solution":"def rainfall_difference(input_data): Returns the difference in rainfall between the wettest and driest city. Args: input_data (str): Multi-line string where each line is in format \\"City Rainfall\\" Returns: float: The difference in rainfall between the wettest and driest city city_rainfall = {} for line in input_data.split(\\"n\\"): if line.strip() == \\"\\": continue city, rainfall = line.rsplit(maxsplit=1) city_rainfall[city] = float(rainfall) max_rainfall = max(city_rainfall.values()) min_rainfall = min(city_rainfall.values()) return round(max_rainfall - min_rainfall, 2)"},{"question":"Ana is organizing a coding competition and she plans to distribute medals to the top n participants. For each participant, there are three types of medals: gold, silver, and bronze. Ana wants to minimize the cost of purchasing these medals. The cost of each gold medal is a dollars, each silver medal is b dollars, and each bronze medal is c dollars. Ana must buy enough medals such that all top n participants get one of each type of medal. Find the minimum total cost Ana needs to spend to purchase the medals for all top n participants. -----Input----- The first line contains four integers n, a, b, and c (1leq n, a, b, cleq 10^5) — the number of participants and the cost of each type of medal respectively. -----Output----- Print one number — the minimum total cost to purchase the required medals. -----Examples----- Input 4 3 1 2 Output 24 Input 10 2 3 4 Output 90 -----Note----- In the first example, the gold medals cost 4 times 3 = 12 dollars, the silver medals cost 4 times 1 = 4 dollars, and the bronze medals cost 4 times 2 = 8 dollars. So, the total cost is 12 + 4 + 8 = 24 dollars. In the second example, the gold medals cost 10 times 2 = 20 dollars, the silver medals cost 10 times 3 = 30 dollars, and the bronze medals cost 10 times 4 = 40 dollars. So, the total cost is 20 + 30 + 40 = 90 dollars.","solution":"def minimum_total_cost(n, a, b, c): Given the number of participants and the cost of each type of medal (gold, silver, bronze), return the minimum total cost to purchase the medals for all top n participants. Parameters: n (int): The number of participants. a (int): The cost of each gold medal. b (int): The cost of each silver medal. c (int): The cost of each bronze medal. Returns: int: The minimum total cost to purchase the required medals. total_cost = n * (a + b + c) return total_cost"},{"question":"*In a bustling city, traffic congestion is a common problem. To alleviate this issue, a new traffic light system is being implemented at busy intersections.* *The system operates on a fixed schedule. There are two roads intersecting at these traffic lights, and each road has a constant rate of vehicles passing through per minute. Specifically, road A has N vehicles per minute and road B has M vehicles per minute. The traffic light alternates between green and red periods for a fixed duration D. When the light is green, vehicles can pass, and when it is red, vehicles must stop.* *The city planners want to determine the maximum total number of vehicles that can pass through the intersection in a single cycle (a green period followed by a red period) if the light is green for G minutes and then red for R minutes.* Given the rates of vehicle flow and the durations of the green and red lights, determine the total number of vehicles from both roads that can pass through the intersection during one complete cycle. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of one line of input, containing five space-separated integers N, M, G, R, and D: the values described in the statement. ------ Output Format ------ For each test case, output on a new line one integer: the total number of vehicles that can pass through the intersection during one complete cycle. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, M, G, R ≤ 1000 G + R = D 1 ≤ D ≤ 1000 ------ Sample Input 1 ------ 3 10 15 5 3 8 20 25 7 2 9 30 35 4 4 8 ------ Sample Output 1 ------ 125 315 260 ------ Explanation 1 ------ Test case 1: The light is green for 5 minutes and red for 3 minutes, making a full cycle of 8 minutes. During the green light, the total number of vehicles from road A that can pass is 10 times 5 = 50 and from road B is 15 times 5 = 75. Therefore, the total number of vehicles that can pass through the intersection in one complete cycle is 50 + 75 = 125. Test case 2: The light is green for 7 minutes and red for 2 minutes, making a full cycle of 9 minutes. During the green light, the total number of vehicles from road A that can pass is 20 times 7 = 140 and from road B is 25 times 7 = 175. Therefore, the total number of vehicles that can pass through the intersection in one complete cycle is 140 + 175 = 315. Test case 3: The light is green for 4 minutes and red for 4 minutes, making a full cycle of 8 minutes. During the green light, the total number of vehicles from road A that can pass is 30 times 4 = 120 and from road B is 35 times 4 = 140. Therefore, the total number of vehicles that can pass through the intersection in one complete cycle is 120 + 140 = 260.","solution":"def max_vehicles_per_cycle(T, test_cases): results = [] for case in test_cases: N, M, G, _, _ = case # We don\'t need R and D as G + R = D total_vehicles = N * G + M * G results.append(total_vehicles) return results"},{"question":"You are given a list of integers. Your task is to find a subsequence in this list such that the sum of the subsequence is maximum and the elements of the subsequence are in strictly increasing order. A subsequence is a sequence derived from another sequence by deleting some or none of the elements without changing the order of the remaining elements. -----Input----- The first line of input contains an integer n (1 le n le 100) — the number of integers in the list. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 1000), the elements of the list. -----Output----- Print one integer, the maximum sum of the strictly increasing subsequence. -----Example----- Input 6 10 22 9 33 21 50 Output 106 -----Note----- In the first test case, the maximum sum is obtained by the increasing subsequence 10, 22, 33, 50 with sum 10 + 22 + 33 + 50 = 115.","solution":"def max_increasing_subsequence_sum(n, a): Function to find the maximum sum of a strictly increasing subsequence. Parameters: n (int): The number of integers in the list. a (list of int): The elements of the list. Returns: int: The maximum sum of the strictly increasing subsequence. if n == 0: return 0 # Initialize the dp array dp = a[:] # dp[i] will store the maximum sum of increasing subsequence ending with a[i] # Build the dp array for i in range(1, n): for j in range(i): if a[i] > a[j]: dp[i] = max(dp[i], dp[j] + a[i]) # The maximum value in dp array is the result return max(dp)"},{"question":"Create a program that takes a string as input and prints the longest substring of that string without repeating characters. -----Input----- The input consists of a single line containing a string with both uppercase and lowercase letters. -----Output----- The output consists of a single line containing the longest substring of the given string without repeating characters. -----Example----- Input: abcabcbb Output: abc -----Example----- Input: bbbbb Output: b","solution":"def longest_unique_substring(s): Returns the longest substring without repeating characters. n = len(s) if n == 0: return \\"\\" start, end, max_len, max_start = 0, 0, 0, 0 char_index = {} while end < n: if s[end] in char_index and char_index[s[end]] >= start: start = char_index[s[end]] + 1 char_index[s[end]] = end end += 1 if end - start > max_len: max_len = end - start max_start = start return s[max_start:max_start+max_len]"},{"question":"You are given a grid with M rows and N columns. Each cell in the grid either contains an obstacle (represented by \'#\') or is empty (represented by \'.\'). Your task is to find the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (M-1, N-1) if you can only move up, down, left, or right. If there is no possible path, return -1. ------ Input Format ------ - The first line of input contains an integer T, denoting the number of test cases. - Each test case consists of three lines of input. - The first line of each test case contains two space-separated integers M and N, the number of rows and columns in the grid. - The next M lines contain N characters each, representing the grid. Each character is either \'#\' or \'.\'. ------ Output Format ------ - For each test case print on a new line the length of the shortest path or -1 if no valid path exists. ------ Constraints ------ 1 ≤ T ≤ 500 2 ≤ M, N ≤ 1000 - The grid consists of only characters \'.\' and \'#\'. ------ Sample Input 1 ------ 2 3 3 . . # . # . . . . 4 4 . . . . # # # . . . . . . # # . ------ Sample Output 1 ------ 4 6 ------ Explanation 1 ------ Test case 1: The shortest path from (0,0) to (2,2) is right, down, down, right, right (4 steps). Test case 2: The shortest path from (0,0) to (3,3) is through the middle bottom part of the grid (6 steps). Find the shortest path or determine if it is impossible for each test case.","solution":"from collections import deque def shortest_path_in_grid(T, test_cases): def bfs(grid, M, N): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if (x, y) == (M-1, N-1): return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < M and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) steps += 1 return -1 results = [] for i in range(T): M, N = test_cases[i][0] grid = test_cases[i][1] result = bfs(grid, M, N) results.append(result) return results"},{"question":"Given a list of integers, you need to find out if there are any three distinct elements a, b, c such that a^2 + b^2 = c^2, i.e., if there exists a Pythagorean triplet in the list. Write a function `find_pythagorean_triplet(arr)` which takes a list of integers, `arr`, as input and returns `True` if there is at least one such triplet, otherwise `False`. -----Function Signature----- ```python def find_pythagorean_triplet(arr: List[int]) -> bool: ``` -----Input----- - An array of integers `arr` where `1 <= len(arr) <= 1000` and `1 <= arr[i] <= 10^6`. -----Output----- - Return a boolean value `True` if there exists a Pythagorean triplet, else `False`. -----Example----- Input ```python arr = [3, 1, 4, 6, 5] ``` Output ```python True ``` Input ```python arr = [10, 4, 6, 12, 5] ``` Output ```python False ``` -----Note----- In the first example, the triplet (3, 4, 5) satisfies the condition 3^2 + 4^2 = 5^2. In the second example, there are no such triplets in the list.","solution":"from typing import List def find_pythagorean_triplet(arr: List[int]) -> bool: Find if there is a Pythagorean triplet in the list. n = len(arr) # Create a list of squares of the given array elements squares = [x ** 2 for x in arr] # Sort the list of squares squares.sort() # Check for a triplet (c^2 == a^2 + b^2) for i in range(n - 1, 1, -1): c_squared = squares[i] a = 0 b = i - 1 while a < b: if squares[a] + squares[b] == c_squared: return True elif squares[a] + squares[b] < c_squared: a += 1 else: b -= 1 return False"},{"question":"**Lily and Balanced Parentheses** problem Lily loves balanced parentheses strings. A parentheses string is balanced if every opening parenthesis \'(\' has a corresponding closing parenthesis \')\' and the pairs of parentheses are properly nested. Given an integer n, Lily wants to find out how many different balanced parentheses strings of length 2n can be formed. However, since this number can be very large, return the answer modulo 10^9 + 7. Input format Input is given in one line: n where n represents half the length of the balanced parentheses strings to be formed. Constraint * 1 ≤ n ≤ 10^5 Output format Output the number of different balanced parentheses strings of length 2n, modulo 10^9 + 7. Input example 1 3 Output example 1 5 Input example 2 4 Output example 2 14 Example Input 3 Output 5","solution":"def balanced_parentheses(n): MOD = 10**9 + 7 # Calculate the nth Catalan number catalan = [0] * (n + 1) catalan[0] = 1 for i in range(1, n + 1): catalan[i] = 0 for j in range(i): catalan[i] = (catalan[i] + catalan[j] * catalan[i - 1 - j]) % MOD return catalan[n]"},{"question":"# Command the Battlefield The Republic City\'s defense system is highly automated and relies on precise commands. As the chief engineer, you are tasked with optimizing command sequences for the defense drones. Each command sequence needs to be efficient to handle multiple defense scenarios dynamically. **Problem Statement:** Given a grid of `N x M` dimensions, each cell representing a possible position of a defense drone, and a set of commands that can move the drones in specific directions (up, down, left, right), determine the minimum number of commands required to get all drones from their initial positions to their target positions. Drones can move simultaneously according to the given commands. **Input Format:** - The first line contains two integers, `N` and `M`, describing the number of rows and columns of the grid, respectively. - The second line contains an integer `K`, the number of drones. - The next line contains `2 * K` integers, the initial positions of the drones: `x1 y1 x2 y2 ... xK yK`. - The next line contains `2 * K` integers, the target positions of the drones: `x1\' y1\' x2\' y2\' ... xK\' yK\'`. **Constraints:** - ( 1 leq N, M leq 1000 ) - ( 1 leq K leq 500 ) - ( 1 leq xi, yi, x\'i, y\'i leq N ) and ( 1 leq xj, yj, x\'j, y\'j leq M ) **Output Format:** Output a single integer, the minimum number of commands required to move all drones to their target positions. **Sample Input:** ``` 5 5 3 1 1 2 2 3 3 5 5 4 4 2 2 ``` **Sample Output:** ``` 4 ``` **Explanation:** - All drones can move at the same time, so the command sequence will be as follows: - Move all drones right to align vertically (`1 1 -> 1 5`, `2 2 -> 2 4`, `3 3 -> 3 2`) - Move all drones down (`1 5 -> 5 5`, `2 4 -> 4 4`, `3 2 -> 2 2`) Hence, the minimum commands required are 4. **Note:** A move is defined as a simultaneous action applied to all drones. The goal is to minimize the number of such moves.","solution":"def minimum_commands(N, M, K, initial_positions, target_positions): This function calculates the minimum number of commands required to move all drones from their initial positions to their target positions. initial_x_coords = initial_positions[0::2] initial_y_coords = initial_positions[1::2] target_x_coords = target_positions[0::2] target_y_coords = target_positions[1::2] max_x_diff = max(abs(ix - tx) for ix, tx in zip(initial_x_coords, target_x_coords)) max_y_diff = max(abs(iy - ty) for iy, ty in zip(initial_y_coords, target_y_coords)) return max(max_x_diff, max_y_diff)"},{"question":"You are helping an art gallery to manage its lighting system. The gallery has a row of N rooms numbered 1 to N, each equipped with an individual light. Each light can be either turned on or off independently. A light is represented by a 0 if it is off and 1 if it is on. The gallery has a rule that any room that has its light turned on must be turned off before closing time. As the general manager, you need to ensure that you turn off all the lights following the gallery\'s unique system. The gallery\'s system works as follows: 1. You can only select an interval of consecutive rooms and toggle the state of the lights in that interval (i.e., turn \'1\'s to \'0\'s and \'0\'s to \'1\'s). The task is to define a function `min_toggles(lights)` that takes a list of integers `lights` representing the state of each light in the gallery and returns the minimum number of toggle operations needed to switch off all the lights. Each entry in the list will be either 0 or 1. # Example ```python # Lights initially set to on or off lights = [1, 0, 1, 0, 1] # Function call returns the minimum number of toggle operations needed print(min_toggles(lights)) # Output: 3 ``` **Explanation**: The optimal sequence of toggle operations is: 1. Toggle rooms 1 to 3: [0, 1, 0, 0, 1] 2. Toggle rooms 2 to 5: [0, 0, 1, 1, 0] 3. Toggle rooms 3 to 4: [0, 0, 0, 0, 0] Constraints: - The length of the `lights` list will be at least 1 and at most 1000. - Each element in `lights` can only be 0 or 1.","solution":"def min_toggles(lights): Returns the minimum number of toggle operations needed to turn off all lights in the gallery. if not lights: return 0 toggles = 0 state = 0 # Initial state of the current contiguous segment, 0 for off for light in lights: if light != state: toggles += 1 state = 1 - state # Toggle state to the opposite return toggles"},{"question":"Alice has a set of n coins, each with some value. She wants to distribute these coins into two groups such that the absolute difference in the total value of the two groups is minimized. Your task is to help her achieve this goal. -----Input----- The first line contains an integer n (1 le n le 100) — the number of coins. The second line contains n integers v_1, v_2, ldots, v_n (1 le v_i le 1000) — the values of the coins. -----Output----- Print a single integer — the minimum possible absolute difference between the total values of the two groups after the coins have been distributed. -----Examples----- Input 4 1 2 3 4 Output 0 Input 3 2 3 5 Output 0 Input 5 7 1 3 9 5 Output 1 -----Note----- In the first example, Alice can distribute the coins as {1, 4} and {2, 3}. The total value of both groups is 5, so the absolute difference is 0. In the second example, Alice can distribute the coins as {2, 3} and {5}. The total value of both groups is 5, so the absolute difference is 0. In the third example, Alice can distribute the coins as {1, 3, 5} and {7, 9}. The total values are 9 and 16 respectively, so the absolute difference is 7. However, a better distribution is {1, 7, 5} and {3, 9}, which leads to total values 13 and 12 respectively, minimizing the absolute difference to 1.","solution":"def min_difference(n, values): Returns the minimum possible absolute difference between the total values of the two groups after the coins have been distributed. total_sum = sum(values) possible_sums = {0} for value in values: new_sums = set() for s in possible_sums: new_sums.add(s + value) possible_sums.update(new_sums) min_diff = float(\'inf\') for s in possible_sums: current_diff = abs(total_sum - 2 * s) if current_diff < min_diff: min_diff = current_diff return min_diff"},{"question":"Given a string s, the task is to find all unique palindromic substrings present in the string. Example 1: Input: s = \\"abaaa\\" Output: [\\"a\\", \\"b\\", \\"aa\\", \\"aba\\", \\"aaa\\"] Explanation: All unique palindrome substrings are: \\"a\\", \\"b\\", \\"aa\\", \\"aba\\", \\"aaa\\". Example 2: Input: s = \\"geek\\" Output: [\\"g\\", \\"e\\", \\"k\\", \\"ee\\"] Explanation: All unique palindrome substrings are: \\"g\\", \\"e\\", \\"k\\", \\"ee\\". Your Task: You have to complete the method findUniquePalindromes() which takes 1 argument: a string s. Your function should return a list of unique palindromic substrings in lexicographical order. Constraint: 1 <= len(s) <= 500 Expected Time Complexity: O(n^2) Expected Space Complexity: O(n^2)","solution":"def findUniquePalindromes(s): Returns a list of all unique palindromic substrings in the string s in lexicographical order. palindromic_substrings = set() def is_palindrome(left, right): while left >= 0 and right < len(s) and s[left] == s[right]: palindromic_substrings.add(s[left:right+1]) left -= 1 right += 1 for i in range(len(s)): # Check for odd length palindromes (with center at i) is_palindrome(i, i) # Check for even length palindromes (with center between i and i+1) is_palindrome(i, i+1) return sorted(palindromic_substrings)"},{"question":"Product of Large Integers Given two integers P and Q, compute the product, P times Q. Input Two integers P and Q separated by a space character are given in a line. Output Print the product in a line. Constraints * -1 times 10^{100000} leq P, Q leq 10^{100000} Sample Input 1 4 5 Sample Output 1 20 Sample Input 2 123456789 987654321 Sample Output 2 121932631112635269 Sample Input 3 -1 1 Sample Output 3 -1 Sample Input 4 -3 -7 Sample Output 4 21 Example Input 4 5 Output 20","solution":"def multiply_large_integers(P: int, Q: int) -> int: Returns the product of two large integers P and Q. Args: P (int): First large integer. Q (int): Second large integer. Returns: int: The product of P and Q. return P * Q"},{"question":"You are given a list of integers where some numbers may be duplicated. You need to create a program that identifies the integer with the highest frequency. If multiple integers have the same highest frequency, return the smallest integer among them. Input A list of integers separated by spaces. The length of the list does not exceed 100 integers. Output The integer that has the highest frequency. If there is a tie, return the smallest integer among those with the highest frequency. Example Input 4 6 2 2 6 6 4 4 4 3 3 Output 4","solution":"from collections import Counter def highest_frequency_integer(arr): Returns the integer with the highest frequency in the list. If there is a tie, returns the smallest integer among those with the highest frequency. if not arr: return None count = Counter(arr) highest_freq = max(count.values()) candidates = [k for k, v in count.items() if v == highest_freq] return min(candidates)"},{"question":"Your task is to implement a function that checks if the given string can be rearranged to form a palindrome. A string can be rearranged to form a palindrome if the frequencies of its characters fulfill a specific condition. A [Palindrome](https://en.wikipedia.org/wiki/Palindrome) is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Example: Given the string \\"civic\\": - The string \\"civic\\" is already a palindrome. - Output: true Given the string \\"ivicc\\": - The string \\"ivicc\\" can be rearranged to form \\"civic\\". - Output: true Given the string \\"hello\\": - The string \\"hello\\" cannot be rearranged to form any palindrome. - Output: false Input: A string s (1 <= |s| <= 1000) Output: Boolean value indicating whether the given string can be rearranged to form a palindrome.","solution":"def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # A string can be rearranged to form a palindrome if at most one character # has an odd count (for the center character in an odd length palindrome). odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are given a list of integers and a target value. Write a function that finds two distinct indices `i` and `j` in the list such that the sum of the elements at these indices equals the target value. The function should return a tuple `(i, j)`. If no such pair exists, return `(-1, -1)`. Assume that each input has exactly one solution, and you may not use the same element twice. *Example* ```python find_indices([2, 7, 11, 15], 9) == (0, 1) ```","solution":"def find_indices(nums, target): Finds two distinct indices i and j such that nums[i] + nums[j] equals target. Args: nums (list of int): The list of integers. target (int): The target sum. Returns: tuple of int: A tuple containing the indices (i, j) such that nums[i] + nums[j] = target. If no such indices exist, returns (-1, -1). num_to_index = {} for index, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], index) num_to_index[num] = index return (-1, -1)"},{"question":"Given an array `arr` of integers and an integer `n`, your task is to find out whether there exists a subarray of length `n` with sum equal to `0`. If such a subarray exists, return `true`, otherwise return `false`. Example 1: Input: arr = [1, 2, -3, 4, -2, 2, 1] n = 3 Output: true Explanation: The subarray [-3, 4, -2] has a sum of 0. Example 2: Input: arr = [1, 2, 3, 4, 5] n = 2 Output: false Explanation: There is no subarray of length 2 with sum 0. Example 3: Input: arr = [1, 1, 1, 1, 1] n = 1 Output: false Explanation: There is no subarray of length 1 with sum 0. Your Task: You don\'t need to read input or print anything. Complete the function `hasZeroSumSubarray(arr, n)` which takes an array of integers and an integer `n` as input parameters and returns a boolean value denoting if a subarray with sum `0` of length `n` exists or not. Expected Time Complexity: O(N) where `N` is the length of `arr`. Expected Auxiliary Space: O(1) Constraints: - 1 <= arr.length <= 10^{5} - -10^6 <= arr[i] <= 10^6 - 1 <= n <= arr.length","solution":"def hasZeroSumSubarray(arr, n): if len(arr) < n: return False current_sum = sum(arr[:n]) if current_sum == 0: return True for i in range(n, len(arr)): current_sum += arr[i] - arr[i - n] if current_sum == 0: return True return False"},{"question":"You are designing a new inventory management system for a warehouse. The system attempts to determine if requested items can be fulfilled with the current inventory. Each request consists of one or more item types and the quantity requested for each. Inventory data and requests are provided, and you need to determine if each request can be satisfied based on the items and quantities present in the inventory at the time of the request. If a request can be fulfilled, return \\"Yes\\"; otherwise, return \\"No\\". Input - The first line contains an integer n, the number of different item types in the inventory (1 ≤ n ≤ 100,000). - The next n lines each contain two integers ai and bi, where ai is the item type ID (1 ≤ ai ≤ 1,000,000) and bi is the quantity of that item type available in the inventory (1 ≤ bi ≤ 1,000,000). - The next line contains an integer q, the number of requests (1 ≤ q ≤ 100,000). - The following q lines each contain the details of a request. Each request starts with an integer k (1 ≤ k ≤ 100), the number of item types requested. This is followed by k pairs of integers ci and di, where ci is the item type ID and di is the quantity requested for that item type (1 ≤ di ≤ 1,000). Output For each request, output \\"Yes\\" if the request can be fulfilled with the available inventory, otherwise output \\"No\\". Examples Input ``` 4 1 10 2 5 3 8 4 2 3 2 1 5 3 3 2 1 6 4 1 1 2 5 ``` Output ``` Yes No Yes ``` Input ``` 2 50 20 100 15 2 2 50 10 100 5 1 50 25 ``` Output ``` Yes No ```","solution":"def can_fulfill_requests(inventory, requests): Determines if each request\'s items and quantities can be fulfilled with the given inventory. Parameters: inventory (dict): A dictionary where the keys are item type IDs and values are quantities. requests (list of list): List of requests, each a list where the first element is the number of item types requested followed by pairs of item type ID and quantity. Returns: list of str: \\"Yes\\" if the request can be fulfilled, otherwise \\"No\\". results = [] for request in requests: can_fulfill = True for i in range(request[0]): item_id = request[2 * i + 1] quantity = request[2 * i + 2] if item_id not in inventory or inventory[item_id] < quantity: can_fulfill = False break if can_fulfill: for i in range(request[0]): item_id = request[2 * i + 1] quantity = request[2 * i + 2] inventory[item_id] -= quantity results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Charlie has a grid of size N x M where each cell is either land (0) or water (1). Charlie wants to find the maximum size of a square consisting solely of land (0). Write a program to determine the side length of the largest possible square composed entirely of land within the grid. Constraints * 1 leq N, M leq 1000 * The grid is given in the form of an N x M matrix containing only 0s and 1s. Input The input is given as follows: * The first line contains two integers N and M indicating the number of rows and columns, respectively. * Each of the next N lines contains M space-separated integers which are either 0 or 1 representing the grid. Output Print a single integer which is the side length of the largest square composed entirely of land. Examples Input 4 5 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 1 1 0 0 0 Output 2 Input 3 3 1 1 1 1 0 1 1 1 1 Output 1","solution":"def largest_land_square(N, M, grid): This function finds the side length of the largest square consisting entirely of land (0) within the given grid. if N == 0 or M == 0: return 0 dp = [[0] * M for _ in range(N)] max_side_length = 0 for i in range(N): for j in range(M): if grid[i][j] == 0: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side_length = max(max_side_length, dp[i][j]) return max_side_length"},{"question":"Mathilda is a young and aspiring artist who wants to build the most beautiful garden. She has a grid of size N x N, where each cell has a certain beauty value associated with it. The beauty value of a cell (i, j) is given by the integer bij. She wants to create a rectangular subgrid of size K x K that has the maximum beauty sum. Your task is to help Mathilda find the maximum beauty sum of any K x K subgrid within the given N x N grid. # Input The input consists of multiple datasets. Each dataset is represented in the following format: ``` N K b11 b12 ... b1N b21 b22 ... b2N ... bN1 bN2 ... bNN ``` - The first line contains the integers N and K, where 1 ≤ K ≤ N ≤ 50. - The following N lines each contain N integers bij, representing the beauty values of the cells in the grid. The beauty values bij satisfy -100 ≤ bij ≤ 100. The end of the input is represented by two zeros separated by a blank. Also, the number of datasets does not exceed 50. # Output For each dataset, output the maximum beauty sum of any K x K subgrid on one line. # Sample Input ``` 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 1 -1 -2 -3 -4 -5 -6 -7 -8 -9 0 0 ``` # Sample Output ``` 52 -1 ``` # Explanation In the first dataset, the 2x2 subgrid with the maximum beauty sum is: ``` 9 10 13 14 ``` The sum of its beauty values is 9 + 10 + 13 + 14 = 46. In the second dataset, the best 1x1 subgrid is: ``` -1 ``` The sum of its beauty values is -1.","solution":"def max_beauty_sum(N, K, grid): max_sum = float(\'-inf\') for i in range(N - K + 1): for j in range(N - K + 1): current_sum = 0 for a in range(K): for b in range(K): current_sum += grid[i + a][j + b] max_sum = max(max_sum, current_sum) return max_sum def process_datasets(datasets): results = [] for dataset in datasets: N, K = dataset[0] grid = dataset[1] result = max_beauty_sum(N, K, grid) results.append(result) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): if lines[i].strip() == \'0 0\': break N, K = map(int, lines[i].strip().split()) grid = [] for j in range(1, N+1): grid.append(list(map(int, lines[i + j].strip().split()))) datasets.append(((N, K), grid)) i += N + 1 return datasets # Example of processing input input_str = 4 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 3 1 -1 -2 -3 -4 -5 -6 -7 -8 -9 0 0 datasets = parse_input(input_str) results = process_datasets(datasets) for result in results: print(result)"},{"question":"Write a program that reads a sequence of n words and outputs the word that appears the most frequently. If there are multiple words with the highest frequency, output the word that comes first lexicographically. Constraints * 0 < n leq 10000 * Each word is a string of alphabetic characters with length between 1 and 100. Input The first line contains an integer n. Each of the next n lines contains one word. Output The single word that appears the most frequently. If there is a tie, output the word that comes first lexicographically among them. Example Input 6 apple banana apple orange banana banana Output banana","solution":"def most_frequent_word(n, words): Returns the word that appears most frequently in the list of words. If there is a tie, returns the word that comes first lexicographically. from collections import Counter word_count = Counter(words) max_count = max(word_count.values()) # Get all words with the max_count most_frequent_words = [word for word, count in word_count.items() if count == max_count] # Return the lexicographically smallest word among these return min(most_frequent_words)"},{"question":"You are given two strings, `s1` and `s2`, which consist of lowercase English letters. The second string `s2` is a scrambled form of the first string `s1`. Determine if `s2` is indeed a scrambled version of `s1`. A scrambled version means that the two strings contain the same characters in any order, allowing for repeated characters. ``` // simple examples isScramble(\\"listen\\", \\"silent\\") = true isScramble(\\"apple\\", \\"pale\\") = false isScramble(\\"racecar\\", \\"carrace\\") = true // order of characters does not matter isScramble(\\"aabbcc\\", \\"baccab\\") = true // different lengths automatically are false isScramble(\\"abc\\", \\"abcd\\") = false ``` Function signature: `def isScramble(s1: str, s2: str) -> bool`","solution":"def isScramble(s1: str, s2: str) -> bool: Check if s2 is a scrambled version of s1. # Check if lengths are different, if so return False if len(s1) != len(s2): return False # Check if both strings have the same characters with the same frequencies return sorted(s1) == sorted(s2)"},{"question":"You are given a list of n integers, and your goal is to determine if it\'s possible to partition the list into two non-empty subsets such that the sum of the elements in both subsets is equal. If possible, return the subsets; otherwise, return an empty array. Input The first line contains a single integer n (1 ≤ n ≤ 20) — the number of integers in the list. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100). Output If a valid partition exists, print the two subsets as two space-separated lines. If multiple solutions exist, any will be accepted. If no valid partition is found, output an empty array ([]). Examples Input 5 1 5 11 5 Output 1 5 5 11 Input 4 1 2 3 5 Output []","solution":"from itertools import combinations def partition_equal_sum(arr): Determine if it\'s possible to partition the list into two non-empty subsets with equal sum. If possible, return the subsets; otherwise, return []. total_sum = sum(arr) # If the total sum is odd, we can\'t partition it into two equal subsets. if total_sum % 2 != 0: return [] target = total_sum // 2 # Try to find any combination of elements that sums to target. n = len(arr) for r in range(1, n): for comb in combinations(arr, r): if sum(comb) == target: subset1 = list(comb) subset2 = arr[:] for item in subset1: subset2.remove(item) return [subset1, subset2] return []"},{"question":"Stacey loves the ocean and her favorite activity is collecting seashells. To keep track of her collection, she decides to categorize them by size and type. She needs a program to help her organize her seashells in a structured manner. Each seashell is identified by: - Size (a positive integer) - Type (a lowercase string without spaces) She wants to sort her seashells first by size in ascending order. If two seashells have the same size, they should be sorted by type in alphabetical order. Write a program that takes a list of seashells and returns the sorted list according to Stacey\'s criteria. -----Input----- The input is a list of tuples where each tuple contains the size and type of a seashell. The number of seashells will be between 1 and 100. -----Output----- Output the sorted list of seashells as tuples. -----Examples----- Sample Input 1: [(3, \'conch\'), (1, \'sanddollar\'), (2, \'starfish\')] Sample Output 1: [(1, \'sanddollar\'), (2, \'starfish\'), (3, \'conch\')] Sample Input 2: [(5, \'whelk\'), (3, \'conch\'), (5, \'scallop\'), (1, \'abalone\')] Sample Output 2: [(1, \'abalone\'), (3, \'conch\'), (5, \'scallop\'), (5, \'whelk\')]","solution":"def sort_seashells(seashells): Sorts a list of seashells by size in ascending order. If two seashells have the same size, they are sorted by type in alphabetical order. Parameters: seashells (list of tuples): A list where each tuple contains a size (int) and a type (str) of a seashell. Returns: list of tuples: The sorted list of seashells. return sorted(seashells, key=lambda x: (x[0], x[1]))"},{"question":"Write a function that evaluates a mathematical expression provided as a string and returns the calculated result. The string can include the following operators: addition (+), subtraction (-), multiplication (*), and division (/). The input expression may also contain parentheses to denote the order of operations. If the input is not a valid mathematical expression, the function should return an error message. Ensure the function can handle both positive and negative numbers, as well as handle multiple levels of nested parentheses correctly.","solution":"def evaluate_expression(expression): Evaluates a mathematical expression provided as a string and returns the calculated result. The expression can include the following operators: +, -, *, / and parentheses to denote the order of operations. If the input is not a valid mathematical expression, an error message is returned. try: result = eval(expression) return result except (SyntaxError, ZeroDivisionError, NameError) as e: return f\\"Error: {str(e)}\\""},{"question":"You are given an array of N integers, where N is always even. You need to partition these N integers into two groups such that the absolute difference between the sums of the two groups is minimized. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains N space-separated integers A_1, A_2, ldots, A_N representing the array. ------ Output ------ For each test case, print a single line containing one integer — the minimum absolute difference between the sums of the two groups. ------ Constraints ------ 1 le T le 100 2 le N le 20 -10^5 le A_i le 10^5 ----- Sample Input ----- 2 4 1 6 11 5 4 2 -1 3 4 ----- Sample Output ----- 1 0 ----- Explanation ----- In the first test case, we can partition the array into groups [1, 5, 6] and [11]. The sum of the first group is 12 and the sum of the second group is 11. The absolute difference between the sums is |12 - 11| = 1. In the second test case, we can partition the array into groups [2, -1, 3] and [4]. The sums of the groups are 4 and 4 respectively, and the absolute difference between the sums is |4 - 4| = 0.","solution":"def min_diff_partition(arr): Function to find minimum difference between two group sums. total_sum = sum(arr) n = len(arr) possible_sums = {0} for num in arr: possible_sums.update({x + num for x in possible_sums}) min_diff = float(\'inf\') for s in possible_sums: min_diff = min(min_diff, abs(total_sum - 2 * s)) return min_diff def process_test_cases(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] arr = test_cases[i][1] results.append(min_diff_partition(arr)) return results"},{"question":"You are given an array of integers. You can perform the following operation any (possibly zero) number of times: Select any subarray of length greater than 1, reverse it, and put it back in its original position. What is the lexicographically smallest array you can get by performing these operations? An array a is lexicographically smaller than an array b of the same length if and only if the following holds: in the first position where a and b differ, the element in a is smaller than the element in b. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains an integer n (1 le n le 2 cdot 10^5) — the length of the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of the lengths of all arrays across all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print the lexicographically smallest array possible. -----Examples----- Input 3 5 3 1 2 4 5 4 9 8 7 6 3 1 2 3 Output 1 2 3 4 5 6 7 8 9 1 2 3 -----Note----- In the first test case: Reverse the subarray [3, 1, 2]. The resulting array is [2, 1, 3, 4, 5]. Reverse the subarray [2, 1, 3]. The resulting array is [1, 2, 3, 4, 5]. Nothing needs to be done in the second and third test cases.","solution":"def lexicographically_smallest_array(t, test_cases): results = [] for case in test_cases: n, array = case results.append(\\" \\".join(map(str, sorted(array)))) return results # Function to process each test case def process_input(t, inputs): test_cases = [] index = 0 for _ in range(t): n = inputs[index] index += 1 array = inputs[index] index += 1 test_cases.append((n, array)) return test_cases # Example input to demonstrate the function call if __name__ == \\"__main__\\": t = 3 input_data = [ (5, [3, 1, 2, 4, 5]), (4, [9, 8, 7, 6]), (3, [1, 2, 3]) ] result = lexicographically_smallest_array(t, input_data) for res in result: print(res)"},{"question":"You are given an array a_1, a_2, dots, a_n and an integer k. Determine if there exists a subset of the array such that the sum of its elements is exactly k. -----Input----- The first line contains two integers n (1 le n le 20) and k (0 le k le 10^5) — the length of the array a and the target sum. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5) — the elements of the array a. -----Output----- Print \\"YES\\" if there exists a subset of the array that sums up to k. Otherwise, print \\"NO\\". -----Example----- Input 5 9 3 34 4 12 5 Output YES -----Note----- In this example, the subset {4, 5} sums up to 9, so the answer is \\"YES\\".","solution":"def subset_sum_exists(a, n, k): Determines if there exists a subset of the array a such that the sum of its elements is exactly k. Args: a (list): List of integers. n (int): Length of the array. k (int): Target sum. Returns: str: \\"YES\\" if such a subset exists, otherwise \\"NO\\". # Initialize a DP array with False dp = [False] * (k + 1) dp[0] = True # There is always a subset (empty set) with sum 0 for num in a: for s in range(k, num - 1, -1): if dp[s - num]: dp[s] = True return \\"YES\\" if dp[k] else \\"NO\\" # Example usage: # n = 5, k = 9, a = [3, 34, 4, 12, 5] # Output should be: YES print(subset_sum_exists([3, 34, 4, 12, 5], 5, 9))"},{"question":"Alice is creating a drawing by connecting points on an X-Y plane. She has n points, and each point is positioned at distinct coordinates (xi, yi). Alice wants to draw lines vertically or horizontally to connect these points. Specifically, she can draw a line connecting two points if they share the same x or y coordinate. Alice is interested in finding the largest connected component of points when these lines are drawn. A connected component here refers to a set of points where there is a path (following the lines) between any two points in the set. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of points. The next n lines contain two integers xi and yi (0 ≤ xi, yi ≤ 10^4) representing the coordinates of each point. Output Output a single integer, the size of the largest connected component. Examples Input 5 1 2 1 3 2 3 4 5 5 5 Output 3 Input 4 1 1 2 2 3 3 4 4 Output 1 Input 6 1 2 3 2 1 4 2 4 5 6 5 7 Output 4 Note In the first sample, the largest connected component consists of the points (1,2), (1,3), and (2,3). In the second sample, all points are isolated, so the largest connected component has size 1. In the third sample, the largest connected component consists of the points (1,2), (3,2), (1,4), and (2,4).","solution":"def largest_connected_component(n, points): from collections import defaultdict, deque # Create adjacency lists for both x and y coordinates x_adj = defaultdict(list) y_adj = defaultdict(list) for x, y in points: x_adj[x].append((x, y)) y_adj[y].append((x, y)) visited = set() def bfs(start): queue = deque([start]) visited.add(start) count = 0 while queue: x, y = queue.popleft() count += 1 for nx, ny in x_adj[x]: if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) for nx, ny in y_adj[y]: if (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) return count max_size = 0 for point in points: if point not in visited: max_size = max(max_size, bfs(point)) return max_size"},{"question":"Given a list of `n` integers, it is possible to rotate the elements of the list to the right. A right rotation operation on the list shifts each element to the right by one position and the last element of the list moves to the first position. Given `k`, the number of times the list should be rotated, write a function that performs the right rotation and returns the new list. # Input Format - The first line contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the list. - The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (0 ≤ a_i ≤ 10^9) — the elements of the list. - The third line contains a single integer `k` (0 ≤ k ≤ 10^9) — the number of right rotations to be applied. # Output Format - Print a single line with the `n` space-separated integers — the elements of the list after performing `k` right rotations. # Examples Example 1 # Input ``` 5 1 2 3 4 5 2 ``` # Output ``` 4 5 1 2 3 ``` Example 2 # Input ``` 6 10 20 30 40 50 60 4 ``` # Output ``` 30 40 50 60 10 20 ``` # Note In the first example, the list `[1, 2, 3, 4, 5]` is rotated twice to the right, resulting in the list `[4, 5, 1, 2, 3]`. In the second example, the list `[10, 20, 30, 40, 50, 60]` is rotated four times to the right, resulting in the list `[30, 40, 50, 60, 10, 20]`.","solution":"def right_rotate(n, lst, k): Rotates the list lst of length n to the right by k positions. k = k % n # Reduce k to be within the bounds of list length return lst[-k:] + lst[:-k]"},{"question":"In the kingdom of Algorithms, a wise king would often test the problem-solving abilities of his knights with challenging tasks. One day, he presented a unique challenge that none could solve easily. The challenge was as follows: \\"Consider you have a string `S` consisting of lowercase alphabets. You have to find how many substrings are there in `S` which are palindromes.\\" A substring is a contiguous sequence of characters within a string. A palindrome is a sequence of characters that reads the same forward and backward. For example, if the string is \\"abba\\", the palindromic substrings are \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", and \\"abba\\". Therefore, the total number of palindromic substrings is 6. Your task is to implement a function to accomplish this task. **Input:** - A single string `S` of length `n` (1 ≤ n ≤ 1000) consisting of lowercase alphabets. **Output:** - Print a single integer denoting the total number of palindromic substrings in the string. **Function Signature:** ```python def count_palindromic_substrings(S: str) -> int: ``` **Example:** Input: ``` abba ``` Output: ``` 6 ``` Explanation: The palindromic substrings are \\"a\\", \\"b\\", \\"b\\", \\"a\\", \\"bb\\", and \\"abba\\". Use efficient algorithms to ensure your solution handles the worst case within acceptable time limits.","solution":"def count_palindromic_substrings(S: str) -> int: Returns the count of palindromic substrings in the given string S. def expand_around_center(left: int, right: int) -> int: Helper function that expands around the center to count palindromes. count = 0 while left >= 0 and right < len(S) and S[left] == S[right]: count += 1 left -= 1 right += 1 return count total_palindromes = 0 n = len(S) for i in range(n): # Odd-length palindromes (single character center) total_palindromes += expand_around_center(i, i) # Even-length palindromes (double character center) total_palindromes += expand_around_center(i, i + 1) return total_palindromes"},{"question":"Task Write a function that determines if a string can be rearranged to form a palindrome. Return `True` if it can, otherwise return `False`. Examples ``` can_form_palindrome(\\"civic\\") == True can_form_palindrome(\\"ivicc\\") == True can_form_palindrome(\\"hello\\") == False ```","solution":"def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. from collections import Counter # Count the occurrences of each character in the string char_counts = Counter(s) # We can form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) return odd_count <= 1"},{"question":"You are a developer tasked with creating a new scheduling system for a company. The company has a series of meetings to schedule in a single day. Each meeting has a start time and an end time. Your job is to determine the maximum number of non-overlapping meetings that can be scheduled in one day. A meeting is defined by its start time and end time, and two meetings overlap if one starts before the other ends. The goal is to schedule as many meetings as possible without any overlaps. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of meetings. The next n lines contain two integers each, s and e (0 ≤ s < e ≤ 10^9), representing the start and end time of each meeting. -----Output----- In a single line, print the maximum number of non-overlapping meetings that can be scheduled. -----Examples----- Input 3 1 2 2 3 3 4 Output 3 Input 3 1 3 2 4 3 5 Output 2 Input 4 0 3 1 2 3 4 4 5 Output 3","solution":"def max_non_overlapping_meetings(n, meetings): Returns the maximum number of non-overlapping meetings that can be scheduled in a day. :param n: Number of meetings :param meetings: List of tuples, each containing start and end time of a meeting :return: Maximum number of non-overlapping meetings # Sort meetings based on end time meetings.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in meetings: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"You are given an array of integers. Your task is to modify the array such that every element has a unique value by incrementing some of the elements by 1 as many times as needed. Return the minimum number of increments needed. Example 1: Input: arr = [1, 2, 2] Output: 1 Explanation: Initially, the array is [1, 2, 2]. One of the 2s can be incremented to 3, resulting in the array [1, 2, 3]. Example 2: Input: arr = [3, 2, 1, 2, 1, 7] Output: 6 Explanation: After making the array unique: [3, 2, 1, 4, 5, 7]. Total increments needed = 6. Your Task: You do not need to read input or print anything. Your task is to complete the function minIncrements() which takes the array as input parameter and returns the minimum number of increments needed. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ arr.length ≤ 10^5 1 ≤ arr[i] ≤ 10^9","solution":"def minIncrements(arr): Given an array of integers, this function modifies the array such that every element has a unique value by incrementing some of the elements by 1 as many times as needed. The function returns the minimum number of increments needed. arr.sort() increments = 0 for i in range(1, len(arr)): if arr[i] <= arr[i - 1]: needed_increment = arr[i - 1] - arr[i] + 1 arr[i] += needed_increment increments += needed_increment return increments"},{"question":"Write a function called `polygon_area` that calculates the area of a simple polygon given its vertices\' coordinates in a 2D plane. The vertices are given in a list of tuples, with each tuple representing a point `(x, y)`. The vertices are ordered either clockwise or counterclockwise. You can use the shoelace theorem to compute the area of the polygon. The formula is as follows: Where: - ( n ) is the number of vertices. - ( (x_i, y_i) ) are the coordinates of vertex ( i ). The list of vertices will always define a valid simple polygon (non-intersecting sides). # Function Signature: ``` def polygon_area(vertices: List[Tuple[float, float]]) -> float: ``` # Input - A list of tuples `vertices` where each tuple `(x, y)` represents the coordinates of a vertex. It is guaranteed to have at least three vertices. # Output - The function should return a float value representing the area of the polygon. # Example: ``` vertices = [(0, 0), (4, 0), (4, 3), (0, 4)] polygon_area(vertices) => 14.0 vertices = [(1, 1), (3, 1), (2, 3)] polygon_area(vertices) => 2.0 ``` # Note: - The vertices are provided in either clockwise or counterclockwise order. - The polygon is always simple, meaning it does not intersect itself.","solution":"from typing import List, Tuple def polygon_area(vertices: List[Tuple[float, float]]) -> float: Calculates the area of a polygon given its vertices using the Shoelace theorem. Arguments: vertices: A list of tuples, where each tuple contains two floats representing the x and y coordinates of a vertex. Returns: A float representing the area of the polygon. n = len(vertices) area = 0.0 for i in range(n): x1, y1 = vertices[i] x2, y2 = vertices[(i + 1) % n] area += x1 * y2 area -= y1 * x2 area = abs(area) / 2.0 return area"},{"question":"Given a list of integers representing scores in a game, you are required to determine the minimum number of elements that need to be removed so that the difference between the maximum and minimum remaining scores is less than or equal to a given threshold. You can remove any element from the list. Function Description: Complete the `minRemovals` function in the editor below. `minRemovals` has the following parameters: - `int[] scores`: an array of integers representing the scores. - `int threshold`: an integer representing the maximum allowed difference between the maximum and minimum scores after removals. Returns: `int`: the minimum number of elements that need to be removed. Input Format: - The first line contains two space-separated integers n (the number of scores) and threshold. - The second line contains n space-separated integers, the scores. Constraints: - 1 leq n leq 1000 - 0 leq text{scores}[i] leq 10^6 - 0 leq text{threshold} leq 10^6 Sample Input: ``` 5 5 1 5 8 2 10 ``` Sample Output: ``` 2 ``` Explanation: By removing the scores 8 and 10, the remaining scores [1, 2, 5] have a maximum difference of 4, which is less than or equal to the given threshold 5. Thus, the minimum number of elements to be removed is 2.","solution":"def minRemovals(scores, threshold): scores.sort() n = len(scores) left = 0 min_removal = n for right in range(n): while scores[right] - scores[left] > threshold: left += 1 min_removal = min(min_removal, left + (n - 1 - right)) return min_removal"},{"question":"In cryptography, a [Caesar cipher](https://en.wikipedia.org/wiki/Caesar_cipher) is one of the simplest and most well-known encryption techniques. In a Caesar cipher, each letter in the plaintext is shifted by a fixed number of positions to produce the ciphertext. For this task, create a function that encrypts a message using a Caesar cipher. The function should take a string and an integer shift value and return the encrypted string. The cipher should retain the case of the original letters, and non-alphabetical characters should remain unchanged. # Function Signature: ```python def caesar_cipher(message: str, shift: int) -> str: ``` # Parameters: - `message`: A string representing the plaintext message to be encrypted. - `shift`: An integer representing the fixed number of positions each character is shifted. # Examples: ```python caesar_cipher(\\"Hello, World!\\", 3) => \\"Khoor, Zruog!\\" caesar_cipher(\\"abcdef\\", 1) => \\"bcdefg\\" caesar_cipher(\\"XYZ\\", 2) => \\"ZAB\\" caesar_cipher(\\"Test! 123\\", 4) => \\"Xiwx! 123\\" ``` # Hint: Consider using the `ord()` and `chr()` functions to work with character codes, and remember to handle both uppercase and lowercase characters.","solution":"def caesar_cipher(message: str, shift: int) -> str: Encrypts a message using a Caesar cipher. Parameters: - message (str): The plaintext message to be encrypted. - shift (int): The fixed number of positions each character is shifted. Returns: - str: The encrypted message. encrypted_message = [] for char in message: if char.isalpha(): # Determine the start value for uppercase and lowercase letters start = ord(\'A\') if char.isupper() else ord(\'a\') # Compute the new shifted character encrypted_char = chr(start + (ord(char) - start + shift) % 26) encrypted_message.append(encrypted_char) else: # Non-alphabetical characters are left unchanged encrypted_message.append(char) return \'\'.join(encrypted_message)"},{"question":"Given an orchestra of musicians standing in line, each musician has a certain height. The orchestra conductor wants to identify the height difference between the tallest and shortest musician in any subarray of musicians spanning a specified length. Your task is to help the conductor determine this height difference. Write a function that takes in two inputs: an array of integers representing the heights of the musicians and an integer k, representing the length of the subarray. The function should return an array of integers where each element is the height difference between the tallest and shortest musician for each subarray of length k. Input - An array of integers heights where each element is a height of a musician (1 ≤ heights[i] ≤ 10^5). - An integer k (1 ≤ k ≤ len(heights)) representing the number of musicians in each subarray. Output - An array of integers where each element is the height difference between the tallest and shortest musician for each subarray of length k. Example Input: heights = [1, 3, 6, 4, 10, 3, 8], k = 3 Output: [5, 3, 6, 6, 7] Explanation: For k = 3: - The first subarray is [1, 3, 6] → 6 - 1 = 5 - The second subarray is [3, 6, 4] → 6 - 3 = 3 - The third subarray is [6, 4, 10] → 10 - 4 = 6 - The fourth subarray is [4, 10, 3] → 10 - 3 = 7 - The fifth subarray is [10, 3, 8] → 10 - 3 = 7","solution":"def height_differences(heights, k): Returns the height differences between the tallest and shortest musicians in subarrays of length k. Params: - heights (list of int): Heights of the musicians. - k (int): Length of subarray. Returns: - list of int: Height differences for each subarray of length k. result = [] for i in range(len(heights) - k + 1): subarray = heights[i:i + k] height_difference = max(subarray) - min(subarray) result.append(height_difference) return result"},{"question":"Given an integer array `arr`, you need to perform several operations on it. In each operation, you can pick any two different elements `a` and `b` from the array and replace one of them with the gcd (greatest common divisor) of the two elements. Your task is to find the minimum possible value of the maximum element in the array after performing any number of such operations. Input The first line contains an integer `n` (1 ≤ n ≤ 10^5) — the size of the array `arr`. The second line contains `n` integers `arr[i]` (1 ≤ arr[i] ≤ 10^9) — the elements of the array. Output Output a single integer — the minimum possible value of the maximum element in the array after performing any number of operations. Example Input 6 8 4 12 16 2 10 Output 2 Input 5 24 18 15 30 21 Output 3","solution":"import math from functools import reduce def min_max_element(arr): Returns the minimum possible value of the maximum element in the array after performing any number of operations, where in each operation two elements in the array are replaced by their gcd. return reduce(math.gcd, arr)"},{"question":"You are given a list of N integers. Every integer in this list appears exactly twice, except for one integer which appears exactly once. Your task is to identify the integer that appears only once. ------ Input ------ The first line contains a single integer T — the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N — the number of integers in the list. Here, N will always be an odd integer. The second line contains N space-separated integers a_{1}, a_{2}, ldots, a_{N}. ------ Output ------ For each test case, print the integer that appears only once. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 99999 1 ≤ a_i ≤ 10^6 ----- Sample Input 1 ------ 3 5 1 2 2 3 1 7 4 3 4 3 2 2 7 9 9 7 8 7 8 9 10 10 11 ----- Sample Output 1 ------ 3 7 11 ----- Explanation 1 ------ In the first test case, the integer that appears only once is 3. In the second test case, the integer that appears only once is 7. In the third test case, the integer that appears only once is 11.","solution":"def find_unique_number(arr): Given a list where every integer appears exactly twice except for one integer, this function returns the integer that appears only once. xor_sum = 0 for num in arr: xor_sum ^= num return xor_sum def process_test_cases(test_cases): Processes multiple test cases and returns the results as a list. Each test case is represented as a tuple (N, arr): - N: the number of integers in the list - arr: the list of integers Returns a list of integers where each integer corresponds to the result of find_unique_number for the respective test case. results = [] for N, arr in test_cases: unique_number = find_unique_number(arr) results.append(unique_number) return results"},{"question":"A company wants to distribute bonuses to its employees based on their performance scores. Each employee has been assigned a score indicating their performance. The company decided that employees with the same score should receive the same amount of bonus. However, they want the total amount of bonuses distributed to be minimized while ensuring the bonus for each score is a positive integer. Given the scores of the employees, calculate the minimum total bonus amount the company needs to distribute. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of employees. The second line contains n integers s_i (1 ≤ s_i ≤ 1000) — the scores of the employees. Output Print the only line with a single integer — the minimum total bonus amount the company needs to distribute. Examples Input 4 10 20 20 10 Output 4 Input 5 5 5 5 5 5 Output 1 Input 3 1 2 3 Output 6","solution":"def minimum_total_bonus(n, scores): Returns the minimum total bonus amount the company needs to distribute based on the scores of the employees. unique_scores = set(scores) return len(unique_scores)"},{"question":"Write a function `capitalizeWords(s)`/`CapitalizeWords(string s)` that takes a string `s` and capitalizes the first letter of each word in the string. A word is defined as a contiguous sequence of alphanumeric characters. For example, if the input is \\"hello world! this is a test.\\", the output should be \\"Hello World! This Is A Test.\\". Ignore any non-alphanumeric characters in the string.","solution":"def capitalizeWords(s): Takes a string s and capitalizes the first letter of each word in the string. A word is defined as a contiguous sequence of alphanumeric characters. result = [] words = s.split(\' \') for word in words: if word: capitalized_word = word[0].upper() + word[1:] if word[0].isalnum() else word result.append(capitalized_word) else: result.append(word) return \' \'.join(result)"},{"question":"You have been given a text which contains a sequence of lowercase letters. Your task is to find the minimum number of substrings in which the given sequence can be partitioned such that each substring contains unique characters only. Note that the order of characters in the original text must be preserved, and no character should appear in more than one substring. -----Input----- A single line containing a string `s` (1 ≤ |s| ≤ 10^5) consisting of only lowercase English letters. -----Output----- Output a single integer which is the minimum number of substrings required. -----Examples----- Input abac Output 2 Input aaaaa Output 5 -----Note----- In the first test case, the string can be partitioned into the substrings \\"ab\\" and \\"ac\\". Each substring contains unique characters. In the second test case, the string can be partitioned into the substrings \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"a\\". Each substring contains only the unique character \'a\'.","solution":"def min_partitions_unique_substrings(s): Returns the minimum number of substrings such that each substring contains unique characters. seen = set() partitions = 0 for char in s: if char in seen: partitions += 1 seen.clear() seen.add(char) # Account for the last partition if `seen` is not empty. if seen: partitions += 1 return partitions"},{"question":"Elena owns a pumpkin patch, which is represented as a rectangle determined by its diagonal corners. She wants to determine the area of her patch and find out how many pumpkins are within its boundaries. Your program will be given the coordinates of two diagonal corners of the rectangle and the coordinates of pumpkins in the field. Determine the area of Elena’s rectangular patch, and the number of pumpkins within or on the border of her patch. The area of a rectangle with diagonal corners at (x_1, y_1) and (x_2, y_2) is given by the following formula:[ |x_1 - x_2| times |y_1 - y_2| ] -----Input----- The first two lines contain the coordinates of the diagonal corners of the rectangle. The following line contains the integer N (1 le N le 100), the number of pumpkins. Each of the following N lines contains the coordinates of one pumpkin. All coordinates are pairs of positive integers less than 1000, separated by a space. -----Output----- Output the area of the rectangular patch on the first line, with exactly one digit after the decimal point. Output the number of pumpkins within or on the border of the rectangular patch on the second line. -----Examples----- Sample Input 1: 1 1 4 3 5 2 2 3 2 4 1 1 3 5 5 Sample Output 1: 6.0 4 Sample Input 2: 2 3 5 6 4 3 4 4 5 2 6 6 3 Sample Output 2: 9.0 3","solution":"def rectangle_area_and_pumpkins(x1, y1, x2, y2, pumpkins): # Calculate the area of the rectangle area = abs(x1 - x2) * abs(y1 - y2) # Determine the boundary of the rectangle x_min, x_max = min(x1, x2), max(x1, x2) y_min, y_max = min(y1, y2), max(y1, y2) # Count the number of pumpkins within or on the border of the rectangle count = 0 for pumpkin in pumpkins: px, py = pumpkin if x_min <= px <= x_max and y_min <= py <= y_max: count += 1 return round(area, 1), count"},{"question":"You are responsible for designing a new traffic management system for a smart city. The system monitors and directs traffic at a busy intersection to avoid congestion. The intersection can be represented as a grid of size M × N, where each cell represents a section of the road. Certain cells contain traffic signals that control the flow of traffic through the intersection. Each signal can be set to green or red, and you need to determine the maximum number of traffic signals that can be set to green under the condition that no two green signals should be in the same row or column, as this would cause a traffic jam. Write a program that, given the size of the grid and the coordinates of traffic signals, determines the maximum number of signals that can be green while avoiding traffic jams. Input The input begins with a line containing two integers M and N. Here, M indicates the number of rows in the grid, and N indicates the number of columns. Next, a line containing an integer K follows which indicates the number of traffic signals present in the grid. Each of the next K lines contains two integers x and y, which represent the coordinates of the traffic signals. The input satisfies the following constraints: 1 ≤ M, N ≤ 1000 1 ≤ K ≤ min(M, N) Output Output a single integer that represents the maximum number of signals that can be set to green without causing traffic jams. Example Input 4 4 4 0 1 1 3 2 0 3 2 Output 4","solution":"def max_green_signals(M, N, traffic_signals): This function calculates the maximum number of traffic signals that can be set to green without causing congestion in the intersection grid. row_occupied = set() col_occupied = set() # Iterate through each traffic signal for x, y in traffic_signals: # If the row and column is not already occupied by a green signal if x not in row_occupied and y not in col_occupied: row_occupied.add(x) col_occupied.add(y) # Return the maximum number of non-conflicting green signals return min(len(row_occupied), len(col_occupied)) # Example usage M, N = 4, 4 traffic_signals = [(0, 1), (1, 3), (2, 0), (3, 2)] print(max_green_signals(M, N, traffic_signals)) # Output: 4"},{"question":"# Description Write a function that accepts a string consisting of lowercase and uppercase letters, and returns the length of the longest substring without repeating characters. Example \\"abcabcbb\\" -> 3 (The answer is \\"abc\\", with the length of 3) \\"bbbbb\\" -> 1 (The answer is \\"b\\", with the length of 1) \\"pwwkew\\" -> 3 (The answer is \\"wke\\", with the length of 3)","solution":"def length_of_longest_substring(s): Returns the length of the longest substring without repeating characters. :param s: Input string consisting of lowercase and uppercase letters :type s: str :return: Length of the longest substring without repeating characters :rtype: int char_index_map = {} start = 0 max_length = 0 for i, char in enumerate(s): if char in char_index_map and char_index_map[char] >= start: start = char_index_map[char] + 1 char_index_map[char] = i max_length = max(max_length, i - start + 1) return max_length"},{"question":"Sara is organizing a library and needs to catalog the book titles. She wants to ensure each book title follows a specific format where every word starts with an uppercase letter, and all other letters are lowercase. Additionally, certain small words (like \'and\', \'the\', \'in\', \'of\', etc.) should always be in lowercase unless they are the first or last word of the title. Your task is to write a program that will take a book title and format it according to these rules. The small words that should remain in lowercase (unless they are the first or last word) are: \'and\', \'the\', \'in\', \'of\', \'on\', \'at\', \'by\', \'with\', \'a\', \'an\', \'but\', \'for\', \'nor\', \'or\', \'so\', \'yet\'. -----Input----- The first line of the input contains an integer T denoting the number of test cases. The only line of each test case contains a book title as a string. -----Output----- For each case, output the properly formatted book title. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ Length of each book title ≤ 100 - Each book title contains only letters (a-z, A-Z) and spaces. -----Example----- Input: 3 the great gatsby war and peace catcher in the rye Output: The Great Gatsby War and Peace Catcher in the Rye","solution":"def title_formatter(T, titles): This function takes in a number of test cases T and a list of book titles. It returns the formatted titles following specific capitalization rules. small_words = {\'and\', \'the\', \'in\', \'of\', \'on\', \'at\', \'by\', \'with\', \'a\', \'an\', \'but\', \'for\', \'nor\', \'or\', \'so\', \'yet\'} def format_title(title): words = title.split() formatted_words = [] for i, word in enumerate(words): if word.lower() in small_words and i != 0 and i != len(words) - 1: formatted_words.append(word.lower()) else: formatted_words.append(word.capitalize()) return \' \'.join(formatted_words) formatted_titles = [format_title(title) for title in titles] return formatted_titles def process_books(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) titles = lines[1:T+1] return title_formatter(T, titles)"},{"question":"You are given a rectangular matrix with N rows and M columns, filled with non-negative integers. You need to find the sum of elements in the submatrix defined by the top-left corner (r1, c1) and the bottom-right corner (r2, c2). You will be given multiple queries; for each query, output the sum of the specified submatrix. -----Input----- The first line contains two integers N and M (1 leq N, M leq 1000), the number of rows and columns in the matrix respectively. The next N lines each contain M integers, representing the matrix elements. Each integer in the matrix is in the range 0 leq a_{ij} leq 10^9. The next line contains an integer Q (1 leq Q leq 10^4), the number of queries. The next Q lines each contain four integers r1, c1, r2, and c2 (0 leq r1 leq r2 < N, 0 leq c1 leq c2 < M), representing the top-left and bottom-right corners of the submatrix. -----Output----- For each query, output a single integer, the sum of the elements in the specified submatrix. -----Examples----- Sample Input: 3 4 1 2 3 4 5 6 7 8 9 10 11 12 2 0 0 1 1 1 1 2 2 Sample Output: 14 34 Explanation: For the query (0, 0) to (1, 1), the submatrix is: ``` 1 2 5 6 ``` Sum = 1 + 2 + 5 + 6 = 14 For the query (1, 1) to (2, 2), the submatrix is: ``` 6 7 10 11 ``` Sum = 6 + 7 + 10 + 11 = 34","solution":"def compute_prefix_sum(matrix): rows = len(matrix) cols = len(matrix[0]) prefix_sum = [[0] * (cols + 1) for _ in range(rows + 1)] for r in range(1, rows + 1): for c in range(1, cols + 1): prefix_sum[r][c] = matrix[r-1][c-1] + prefix_sum[r-1][c] + prefix_sum[r][c-1] - prefix_sum[r-1][c-1] return prefix_sum def sum_submatrix(prefix_sum, r1, c1, r2, c2): return (prefix_sum[r2+1][c2+1] - prefix_sum[r1][c2+1] - prefix_sum[r2+1][c1] + prefix_sum[r1][c1]) def find_submatrix_sums(matrix, queries): prefix_sum = compute_prefix_sum(matrix) results = [] for r1, c1, r2, c2 in queries: results.append(sum_submatrix(prefix_sum, r1, c1, r2, c2)) return results"},{"question":"Write a function ```remove_consecutive_duplicates``` that takes a list of strings and returns a new list with consecutive duplicate elements removed. If an element appears multiple times in a row in the input list, it should only appear once in the output list. The function should preserve the order of elements. Example: ```python remove_consecutive_duplicates([\'foo\', \'foo\', \'bar\', \'bar\', \'baz\', \'foo\', \'foo\']) == [\'foo\', \'bar\', \'baz\', \'foo\'] remove_consecutive_duplicates([\'a\', \'a\', \'a\', \'b\', \'c\', \'c\', \'d\', \'d\', \'d\']) == [\'a\', \'b\', \'c\', \'d\'] ``` Note: Elements that are the same but not consecutive should remain in their respective positions.","solution":"def remove_consecutive_duplicates(lst): Returns a new list with consecutive duplicate elements removed. Parameters: lst (list): A list of strings. Returns: list: A new list with consecutive duplicates removed. if not lst: return [] result = [lst[0]] for item in lst[1:]: if item != result[-1]: result.append(item) return result"},{"question":"Charlie and Dave are playing a card game with a special deck. The deck consists of N cards laid out in a row, and each card i has an integer value V_i associated with it. Starting with Charlie, Charlie and Dave take turns picking a card from either end of the row. Each player tries to maximize the sum of the values of the cards they have picked. The game ends when there are no cards left. Given the initial values of the cards, determine the maximum sum of values that Charlie can achieve if both players play optimally. -----Constraints----- - 1 leq N leq 1000 - 1 leq V_i leq 10^9 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N V_1 V_2 ... V_N -----Output----- Print the maximum sum of values that Charlie can achieve. -----Sample Input----- 4 1 2 9 4 -----Sample Output----- 10 Charlie and Dave play optimally as follows: - Charlie picks the fourth card (value = 4). - Dave picks the first card (value = 1). - Charlie picks the second card (value = 2). - Dave picks the third card (value = 9). Charlie\'s total is 4 + 2 = 6, which is not optimal. Another optimal strategy: - Charlie picks the fourth card (value = 4). - Dave picks the first card (value = 1). - Charlie picks the third card (value = 9). - Dave picks the second card (value = 2). Charlie\'s total is 4 + 9 = 13, which is optimal, so another optimal result could also show 13 depending on the moves.","solution":"def max_sum_charlie(N, values): # Create a memoization table to store results of subproblems dp = [[0] * N for _ in range(N)] # Fill the table for cases where only one card is left, # since the best both will get is the value of the card itself. for i in range(N): dp[i][i] = values[i] # Fill the table for other cases for length in range(2, N + 1): # length of the subproblem section for i in range(N - length + 1): j = i + length - 1 # if Charlie takes values[i], then Dave is forced to solve (i+1) to j ranges # if Charlie takes values[j], then Dave is forced to solve i to (j-1) ranges dp[i][j] = max(values[i] + min(dp[i + 2][j] if i + 2 <= j else 0, dp[i + 1][j - 1] if i + 1 <= j - 1 else 0), values[j] + min(dp[i + 1][j - 1] if i + 1 <= j - 1 else 0, dp[i][j - 2] if i <= j - 2 else 0)) return dp[0][N - 1]"},{"question":"You have been hired to work on an inventory management system for a bookstore that is transitioning from a paper-based system to a digital system. The store maintains a list of books, each identified by a unique ISBN number. Each book also has a certain number of copies in stock. Whenever a new shipment of books arrives, the quantity of books for certain ISBNs is updated. Your task is to write a program that will allow the bookstore to update its inventory efficiently and then query the current stock of any book by its ISBN number. -----Input----- The first line of input contains two integers n (1 leq n leq 100000) and m (1 leq m leq 100000), where n is the number of books in the initial inventory and m is the number of operations to be performed. The next n lines each contain an ISBN number (a string of length exactly 13 consisting of digits) and an integer q (0 le q le 100000) indicating the initial quantity of that book in stock. The next m lines describe the operations. Each operation is in one of the following two formats: - \\"update ISBN x\\" where ISBN is a 13-character string and x is an integer, indicating that x copies of the book identified by ISBN are newly arrived and should be added to the current stock of that ISBN. - \\"query ISBN\\" where ISBN is a 13-character string, asking for the current quantity in stock of the book identified by this ISBN. -----Output----- For each \\"query\\" operation, output a single integer on a new line indicating the current quantity of the specified ISBN in stock. -----Examples----- Sample Input 1: 4 3 9780307938 10 9780374533 5 9780143124 2 9780316769 8 update 9780307938 5 query 9780307938 query 9780143124 Sample Output 1: 15 2 Sample Input 2: 3 3 9780470059 15 9781430225 7 9781119267 3 update 9781119267 10 query 9781119267 query 9780470059 Sample Output 2: 13 15","solution":"def manage_inventory(n, m, initial_stock, operations): # Convert initial stock into a dictionary for quick lookup inventory = {} for isbn, qty in initial_stock: inventory[isbn] = qty # Process the operations results = [] for operation in operations: parts = operation.split() if parts[0] == \'update\': isbn = parts[1] qty = int(parts[2]) if isbn in inventory: inventory[isbn] += qty else: inventory[isbn] = qty elif parts[0] == \'query\': isbn = parts[1] results.append(inventory.get(isbn, 0)) return results"},{"question":"Given an array of integers, write a function to move all occurrences of a specified value to the end of the array in-place, while maintaining the relative order of the other elements. Example 1: Input: nums = [4, 2, 4, 0, 3, 4, 5], value = 4 Output: [2, 0, 3, 5, 4, 4, 4] Example 2: Input: nums = [1, 3, 1, 3, 1, 3], value = 1 Output: [3, 3, 3, 1, 1, 1] Note: - You must do this in-place without making a copy of the array. - Minimize the total number of operations.","solution":"def move_value_to_end(nums, value): Move all occurrences of the specified value to the end of the array in-place, while maintaining the relative order of the other elements. insert_pos = 0 # First pass: Move non-value elements to the front for i in range(len(nums)): if nums[i] != value: nums[insert_pos] = nums[i] insert_pos += 1 # Second pass: Fill the rest of the array with the value for i in range(insert_pos, len(nums)): nums[i] = value return nums"},{"question":"Create a function to find the longest substring with at most two distinct characters in a given string. Example: in the string `\\"abaccc\\"`, the longest substring with at most two distinct characters is `\\"abaccc\\"`. The input string will contain only lowercase letters and will have at least one character. Ensure your solution is efficient, capable of handling strings up to `10 000` characters long. If there are multiple solutions, return the one that appears first. Good luck :)","solution":"def longest_substring_two_distinct(s): Returns the longest substring with at most two distinct characters. if len(s) < 3: return s l, r = 0, 0 hashmap = {} max_len = 2 starting_index = 0 while r < len(s): hashmap[s[r]] = r r += 1 if len(hashmap) == 3: del_index = min(hashmap.values()) del hashmap[s[del_index]] l = del_index + 1 if r - l > max_len: max_len = r - l starting_index = l return s[starting_index:starting_index + max_len]"},{"question":"Write a program that takes a sequence of integers representing scores obtained by participants in a contest and outputs the highest score. The number of participants shall be 50,000 or less, and the score for each participant shall be non-negative and not exceed 10,000. Input The input is given in the following format: n s1 s2 :: sn The first line gives the number of participants n, and the following n lines give the integer si representing the score of the ith participant. Output Please output the highest score. Example Input 5 450 7850 6200 9900 2500 Output 9900","solution":"def highest_score(n, scores): Returns the highest score from a list of scores. Parameters: n (int): Number of participants. scores (list of int): Scores obtained by participants. Returns: int: The highest score. if n == 0: return 0 return max(scores)"},{"question":"Chef owns a restaurant, and he is analyzing the orders received over a period. He wants to determine the maximum number of orders received within any contiguous subarray of K days. Help Chef find the maximum number of orders received in such a subarray for each query. -----Input:----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K, where N is the number of days and K is the length of the subarray. - The second line contains N space-separated integers O_1, O_2, ldots, O_N representing the number of orders received on each of the N days. -----Output:----- For each test case, print a single line containing one integer― the maximum number of orders received within any contiguous subarray of K days. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq K leq N - 0 leq O_i leq 10^4 for each valid i -----Subtasks----- Subtask #1 (50 points): - N le 1,000 Subtask #2 (50 points): Original constraints -----Sample Input:----- 2 5 3 1 2 3 4 5 7 4 3 8 1 7 4 2 0 -----Sample Output:----- 12 20","solution":"def max_orders_in_k_days(test_cases): results = [] for case in test_cases: N, K, orders = case # Compute the sum of the first subarray of length K max_sum = current_sum = sum(orders[:K]) # Iterate through the rest of the days for i in range(K, N): current_sum = current_sum + orders[i] - orders[i - K] max_sum = max(max_sum, current_sum) results.append(max_sum) return results # Example usage: # prepared_input = [(5, 3, [1, 2, 3, 4, 5]), (7, 4, [3, 8, 1, 7, 4, 2, 0])] # print(max_orders_in_k_days(prepared_input)) # [12, 20]"},{"question":"A city is hosting a marathon, and runners are assigned bib numbers from 1 to N. During the marathon, checkpoints are set up to track the progress of the runners and the times at which they pass each checkpoint. The race organizers want to analyze the data to identify certain patterns. Given a list of tuples where each tuple contains three elements: the bib number of the runner, the checkpoint number, and the time at which the runner passed the checkpoint, you need to determine the bib number of the runner who passed through most different checkpoints. Input: - The first line contains an integer N, the number of runners in the marathon. - The second line contains an integer M, the number of checkpoints. - The third line contains an integer C, the number of recorded tuples. - Each of the next C lines contains a tuple formatted as: bib_number checkpoint_number time Output: Print a single integer representing the bib number of the runner who passed through the most different checkpoints. If there is a tie, print the smallest bib number. Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 50 1 ≤ C ≤ 5000 1 ≤ bib_number ≤ N 1 ≤ checkpoint_number ≤ M 1 ≤ time ≤ 10000 SAMPLE INPUT 5 4 10 1 1 500 1 2 1000 2 1 700 2 2 1500 3 1 300 3 3 1300 4 2 500 4 3 1400 4 4 2000 5 1 100 5 4 1800 SAMPLE OUTPUT 4 Explanation: Runner 1 passed through checkpoints 1 and 2. Runner 2 passed through checkpoints 1 and 2. Runner 3 passed through checkpoints 1 and 3. Runner 4 passed through checkpoints 2, 3, and 4. Runner 5 passed through checkpoints 1 and 4. Runner 4 passed through the highest number of different checkpoints (3 checkpoints). Hence, the output is 4.","solution":"def runner_with_most_checkpoints(N, M, C, records): from collections import defaultdict checkpoints_passed = defaultdict(set) for record in records: bib_number, checkpoint_number, time = record checkpoints_passed[bib_number].add(checkpoint_number) max_checkpoints = 0 runner_with_max = None for runner, checkpoints in checkpoints_passed.items(): checkpoint_count = len(checkpoints) if checkpoint_count > max_checkpoints or (checkpoint_count == max_checkpoints and runner < runner_with_max): max_checkpoints = checkpoint_count runner_with_max = runner return runner_with_max"},{"question":"You are given a string, s, consisting of lowercase Latin letters (a-z). Your task is to find the longest substring that contains at most two distinct characters. Implement a function that takes a string as input and returns the length of the longest substring that contains at most two distinct characters. The function signature is: ```python def longest_substring_with_two_distinct_characters(s: str) -> int: ``` # Input - The input is a single string, s (1 ≤ len(s) ≤ 100000). # Output - Output a single integer, which is the length of the longest substring containing at most two distinct characters. # Examples Example 1 # Input ``` eceba ``` # Output ``` 3 ``` # Explanation The longest substring with at most 2 distinct characters is \\"ece\\". Example 2 # Input ``` ccaabbb ``` # Output ``` 5 ``` # Explanation The longest substring with at most 2 distinct characters is \\"aabbb\\".","solution":"def longest_substring_with_two_distinct_characters(s: str) -> int: Returns the length of the longest substring containing at most two distinct characters. # Dictionary to keep the count of characters in the current window char_count = {} left = 0 max_len = 0 for right in range(len(s)): char = s[right] if char in char_count: char_count[char] += 1 else: char_count[char] = 1 # If the number of distinct characters exceeds 2, shrink the window from the left while len(char_count) > 2: left_char = s[left] char_count[left_char] -= 1 if char_count[left_char] == 0: del char_count[left_char] left += 1 # Update max_len max_len = max(max_len, right - left + 1) return max_len"},{"question":"Given a string containing letters, digits, and special characters, you are tasked with segregating the letters in one part, digits in another, and special characters in another. After segregation, the letters should be sorted in alphabetical order, digits should be sorted in ascending order, and special characters should remain in the order they appeared in the original string. Example 1: Input: s = \\"c3b1a2!x@z#4\\" Output: \\"abcxz1234!@#\\" Explanation: Letters \\"c\\", \\"b\\", \\"a\\", \\"x\\", \\"z\\" are sorted to \\"abcxz\\". Digits \\"3\\", \\"1\\", \\"2\\", \\"4\\" are sorted to \\"1234\\". Special characters \\"!@#\\" remain in the same order. Example 2: Input: s = \\"A2c#5*d-1z!\\" Output: \\"Acdz125-#*!@\\" Explanation: Letters \\"A\\", \\"c\\", \\"d\\", \\"z\\" are sorted to \\"Acdz\\". Digits \\"2\\", \\"5\\", \\"1\\" are sorted to \\"125\\". Special characters \\"#*-\\" remain in the same order. Your Task: You do not need to read input or print anything. Your task is to complete the function segregateAndSortString(s) that takes s as the input parameter and returns the segregated and sorted string. Expected Time Complexity: O(|s|log|s|) Expected Auxiliary Space: O(|s|) Constraints: 1 ≤ |s| ≤ 10^3","solution":"def segregateAndSortString(s): letters = [] digits = [] special_chars = [] for char in s: if char.isalpha(): letters.append(char) elif char.isdigit(): digits.append(char) else: special_chars.append(char) letters.sort() digits.sort() return \'\'.join(letters) + \'\'.join(digits) + \'\'.join(special_chars)"},{"question":"You are given an array of integers, and you need to find the sum of elements between two given indices, inclusive. To make it more efficient, you firstly preprocess the array to create a prefix sum array. After preprocessing, you then answer multiple queries, which ask for the sum of elements between two given indices. Constraints * 1 ≤ n ≤ 10^5 (the length of the array) * 1 ≤ a_i ≤ 10^4 (elements of the array) * 1 ≤ q ≤ 10^5 (number of queries) * 0 ≤ l_i, r_i < n (indices for each query) Input The input consists of: n a_1 a_2 ... a_n q l_1 r_1 l_2 r_2 ... l_q r_q Output For each query, print the sum of the elements between the two given indices. The sum should be printed on a new line for each query. Examples Input 5 1 2 3 4 5 3 0 2 1 3 2 4 Output 6 9 12 Input 3 7 1 2 2 0 1 1 2 Output 8 3","solution":"def preprocess_array(arr): Preprocess the given array to create a prefix sum array. Parameters: arr (list of int): Input array of integers. Returns: list of int: Prefix sum array. n = len(arr) prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] return prefix_sum def range_sum(prefix_sum, l, r): Compute the sum of elements between indices l and r inclusive using the prefix sum array. Parameters: prefix_sum (list of int): Prefix sum array. l (int): Left index. r (int): Right index. Returns: int: Sum of elements between indices l and r inclusive. return prefix_sum[r + 1] - prefix_sum[l] def process_queries(arr, queries): Process multiple queries to find the sum of elements between given indices. Parameters: arr (list of int): Input array of integers. queries (list of tuple of int): List of queries (l, r) tuples. Returns: list of int: List of results for each query. prefix_sum = preprocess_array(arr) result = [] for l, r in queries: result.append(range_sum(prefix_sum, l, r)) return result"},{"question":"Alice loves gardening and has a peculiar way of organizing plants. She keeps track of the number of plants of each type in her garden using arrays. Sometimes, she adds new plants to the garden, which requires merging the new counts into her existing record and keeping the merged data sorted. Your task is to help Alice merge the new counts into the existing array while keeping it sorted in ascending order. Given two sorted arrays of integers representing the number of plants of each type, write a function to merge them into a single sorted array. Input: The first line consists of the number of test cases (T). For each test case: - The first line contains two integers n and m, the sizes of the two arrays. - The second line contains n sorted integers representing the current plant counts in the garden. - The third line contains m sorted integers representing the new plant counts to be added. Output: For each test case, output a single line containing the merged and sorted array of integers. Constraints: 1 ≤ T ≤ 50 1 ≤ n, m ≤ 10^4 1 ≤ plant counts ≤ 10^9 Example: Input: 1 3 3 1 3 5 2 4 6 Output: 1 2 3 4 5 6 SAMPLE INPUT 1 3 3 1 3 5 2 4 6 SAMPLE OUTPUT 1 2 3 4 5 6","solution":"def merge_and_sort_plant_counts(T, test_cases): Merges and sorts arrays of plant counts for each test case. Parameters: T (int): The number of test cases test_cases (list): List containing test case details. Each test case is a tuple of: (n, m, current_plants, new_plants) - n (int): Size of the current plants array - m (int): Size of the new plants array - current_plants (list): Sorted list of integers representing current plant counts - new_plants (list): Sorted list of integers representing new plant counts Returns: list: A list of lists, where each list contains the merged and sorted plant counts for a test case. result = [] for n, m, current_plants, new_plants in test_cases: merged = [] i, j = 0, 0 # Merging two sorted arrays using two-pointer technique while i < n and j < m: if current_plants[i] <= new_plants[j]: merged.append(current_plants[i]) i += 1 else: merged.append(new_plants[j]) j += 1 # If there are remaining elements in current_plants while i < n: merged.append(current_plants[i]) i += 1 # If there are remaining elements in new_plants while j < m: merged.append(new_plants[j]) j += 1 result.append(merged) return result"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},F={class:"search-container"},C={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],R={key:0},P={key:1};function M(s,e,u,m,r,a){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",F,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>r.searchQuery=o),placeholder:"Search..."},null,512),[[y,r.searchQuery]]),r.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>r.searchQuery="")}," ✕ ")):l("",!0)]),t("div",C,[(n(!0),i(_,null,w(a.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),a.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(r.searchQuery)+'". ',1)):l("",!0)]),a.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:r.isLoading,onClick:e[2]||(e[2]=(...o)=>a.loadMore&&a.loadMore(...o))},[r.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,j)):l("",!0)])}const D=d(A,[["render",M],["__scopeId","data-v-e69ebddb"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/8.md","filePath":"chatai/8.md"}'),L={name:"chatai/8.md"},G=Object.assign(L,{setup(s){return(e,u)=>(n(),i("div",null,[x(D)]))}});export{B as __pageData,G as default};
