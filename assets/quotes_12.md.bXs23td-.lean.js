import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as w,f as l,F as _,p as y,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},q={class:"poem-container"},k={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,u,m,a,r){return n(),i("div",q,[t("div",k,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(u.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(u.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-350c10cc"]]),S=JSON.parse('[{"question":"The company DNET Ltd is developing a recommendation system for their e-commerce website. They have a list of product categories that users can browse. Based on past user interactions, the recommendation system will suggest categories that are similar to the ones the user has shown interest in. To achieve this, they\'ve decided to use a similarity score between categories based on the frequency of certain keywords within the category descriptions. Given a list of category descriptions and a list of keywords, your task is to calculate the similarity score between two categories as the sum of the absolute differences in their keyword frequencies. # Input - The first line contains an integer n, the number of categories (1 ≤ n ≤ 100). - The next n lines contain a string description of each category. Each description consists of words separated by spaces (1 ≤ |description_i| ≤ 100). - The next line contains an integer m, the number of keywords (1 ≤ m ≤ 10). - The next line contains the m keywords separated by spaces. - The next line contains an integer q, the number of queries (1 ≤ q ≤ 100). - The next q lines contain two integers a and b (1 ≤ a, b ≤ n) indicating the indices of the categories to compare (1-based index). # Output For each query, output the similarity score between the two categories. # Example Input ``` 3 mobile phone accessories laptop accessories mobile laptop and accessories 3 mobile laptop accessories 2 1 2 2 3 ``` Output ``` 3 1 ``` # Explanation For the first query, comparing categories 1 and 2: - Category 1: \\"mobile phone accessories\\" - \\"mobile\\" appears 1 time - \\"laptop\\" appears 0 times - \\"accessories\\" appears 1 time - Category 2: \\"laptop accessories\\" - \\"mobile\\" appears 0 times - \\"laptop\\" appears 1 time - \\"accessories\\" appears 1 time Similarity score: |1 - 0| + |0 - 1| + |1 - 1| = 1 + 1 + 0 = 2 For the second query, comparing categories 2 and 3: - Category 2: \\"laptop accessories\\" - \\"mobile\\" appears 0 times - \\"laptop\\" appears 1 time - \\"accessories\\" appears 1 time - Category 3: \\"mobile laptop and accessories\\" - \\"mobile\\" appears 1 time - \\"laptop\\" appears 1 time - \\"accessories\\" appears 1 time Similarity score: |0 - 1| + |1 - 1| + |1 - 1| = 1 + 0 + 0 = 1","solution":"def calculate_similarity_scores(category_descriptions, keywords, queries): def keyword_frequencies(description): words = description.split() freq = {keyword: 0 for keyword in keywords} for word in words: if word in freq: freq[word] += 1 return freq frequencies = [keyword_frequencies(desc) for desc in category_descriptions] def similarity_score(freq1, freq2): score = 0 for keyword in keywords: score += abs(freq1[keyword] - freq2[keyword]) return score results = [] for a, b in queries: freq1 = frequencies[a-1] freq2 = frequencies[b-1] results.append(similarity_score(freq1, freq2)) return results"},{"question":"In a fictional city, there is a unique way of measuring distance between two points on a grid. Points are defined by their (x, y) coordinates, and the distance between two points (x1, y1) and (x2, y2) is given by the formula: Distance = |x1 - x2| + |y1 - y2| You need to write a program to find out the distance between two given points for multiple test cases. ------ Input Format ------ - The first line will contain T - the number of test cases. - Each of the next T lines contains four integers x1, y1, x2, and y2, representing the coordinates of two points. ------ Output Format ------ For each test case, output the distance between the two points. ------ Constraints ------ 1 ≤ T ≤ 100 -1000 ≤ x1, y1, x2, y2 ≤ 1000 ----- Sample Input 1 ------ 3 0 0 1 1 -1 -1 1 1 2 3 2 3 ----- Sample Output 1 ------ 2 4 0 ----- Explanation 1 ------ Test case 1: The distance between points (0, 0) and (1, 1) is |0 - 1| + |0 - 1| = 1 + 1 = 2. Test case 2: The distance between points (-1, -1) and (1, 1) is |-1 - 1| + |-1 - 1| = 2 + 2 = 4. Test case 3: The distance between points (2, 3) and (2, 3) is |2 - 2| + |3 - 3| = 0 + 0 = 0.","solution":"def calculate_distances(test_cases): Given a list of test cases (each a tuple of four integers representing two points on a grid), returns a list of distances between these points using the formula |x1 - x2| + |y1 - y2|. distances = [] for x1, y1, x2, y2 in test_cases: distance = abs(x1 - x2) + abs(y1 - y2) distances.append(distance) return distances def parse_input(input_str): Parses an input string in the format specified in the problem description and returns the number of test cases and a list of test cases. lines = input_str.strip().split(\'n\') T = int(lines[0].strip()) test_cases = [] for i in range(1, T + 1): x1, y1, x2, y2 = map(int, lines[i].strip().split()) test_cases.append((x1, y1, x2, y2)) return T, test_cases def format_output(distances): Formats a list of distances (integers) into an output string with each distance on a new line. return \'n\'.join(map(str, distances)) def main(input_str): T, test_cases = parse_input(input_str) distances = calculate_distances(test_cases) return format_output(distances)"},{"question":"The mayor of a city has decided to repair some of the roads ahead of the upcoming festival. The city has n intersections connected by m roads. Each road has a specific length. The mayor wants to ensure that the total length of the roads that need repair is minimized while still maintaining the city\'s connectivity. Given the number of intersections and roads, along with the roads\' lengths, your task is to determine the minimum total length of roads that need repair to keep all intersections connected. -----Input----- The first line contains two integers n and m (2 le n le 10^4, n - 1 le m le 10^5) — the number of intersections and the number of roads. The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^6) — representing a road between intersections u and v with length w. -----Output----- Print a single integer — the minimum total length of the roads that need repair. -----Example----- Input 4 5 1 2 3 2 3 4 3 4 5 1 4 9 1 3 7 Output 12 -----Note----- In the given example, the selected roads to repair could be: (1-2), (2-3), and (3-4), which ensures all intersections are connected with a total length of 12.","solution":"def find_minimum_repair_cost(n, m, roads): Finds the minimum total length of roads that need repair to keep all intersections connected. Parameters: n (int): Number of intersections. m (int): Number of roads. roads (List[Tuple[int, int, int]]): List of tuples where each tuple represents (u, v, w). Returns: int: Minimum total length of roads that need repair. # Using Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) parent = list(range(n + 1)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootY] = rootX # Sort the roads by their weight (length) roads.sort(key=lambda x: x[2]) mst_cost = 0 edges_used = 0 for u, v, w in roads: if find(u) != find(v): union(u, v) mst_cost += w edges_used += 1 # Early stop if we\'ve used n-1 edges (which is enough to connect all intersections) if edges_used == n - 1: break return mst_cost"},{"question":"A pangram is a sentence that contains every letter of the alphabet at least once. Your task is to determine if a given string is a pangram. The input string will consist of lowercase and uppercase English letters, spaces, and punctuation marks. The spaces and punctuation marks should be ignored when determining whether the string is a pangram. Input The input data consists of one line which contains a string of length between 1 and 1000, inclusive. The string contains one or more words, which are separated by one or more spaces or punctuation. Punctuation marks include: \\" , . ! ? ; : \\". Output Print \\"YES\\" (without the quotes) if the sentence is a pangram. Otherwise, print \\"NO\\" (also without the quotes). Examples Input The quick brown fox jumps over the lazy dog! Output YES Input Hello, World! Output NO","solution":"import string def is_pangram(sentence): Determines if a given sentence is a pangram. Ignores spaces and punctuation, case insensitive. alphabet_set = set(string.ascii_lowercase) sentence_set = set(c.lower() for c in sentence if c.isalpha()) return \\"YES\\" if alphabet_set <= sentence_set else \\"NO\\""},{"question":"Write a program that simulates a traffic light system for a pedestrian crossing. The traffic light has three states: \\"Green\\", \\"Yellow\\", and \\"Red\\". The transitions between states happen in the following way: 1. Green lasts for 60 seconds. 2. After green, it transitions to Yellow for 5 seconds. 3. After Yellow, it transitions to Red for 55 seconds. 4. After Red, the cycle repeats starting from Green. Your task is to write a program that: - Takes the initial state of the traffic light (\\"Green\\", \\"Yellow\\", or \\"Red\\") and the elapsed time in seconds since the last transition as input. - Outputs the current state of the traffic light and the time remaining in that state before the next transition. The input will contain multiple test cases, each in a separate line. Each line will have the initial state (as a string) and the elapsed time (as an integer), separated by a space. The input ends with a line containing \\"END 0\\". Input - Multiple lines, each containing the initial state (\\"Green\\", \\"Yellow\\", or \\"Red\\") and the elapsed time (an integer). - The input ends with the line \\"END 0\\". At most, 20 lines are provided. Output - For each test case, output the current state of the traffic light and the remaining time in seconds before the next state transition. - Each output should be on a new line in the format: \\"CURRENT_STATE x\\", where `CURRENT_STATE` is the state of the traffic light and `x` is the remaining time in seconds in that state. Example # Input ``` Green 30 Yellow 3 Red 40 END 0 ``` # Output ``` Green 30 Yellow 2 Red 15 ```","solution":"def traffic_light_simulation(initial_state, elapsed_time): Simulates the traffic light system for a pedestrian crossing. # Define the cycle times for each state green_time = 60 yellow_time = 5 red_time = 55 # Calculate remaining time and current state if initial_state == \\"Green\\": if elapsed_time < green_time: return f\\"Green {green_time - elapsed_time}\\" else: elapsed_time -= green_time initial_state = \\"Yellow\\" if initial_state == \\"Yellow\\": if elapsed_time < yellow_time: return f\\"Yellow {yellow_time - elapsed_time}\\" else: elapsed_time -= yellow_time initial_state = \\"Red\\" if initial_state == \\"Red\\": if elapsed_time < red_time: return f\\"Red {red_time - elapsed_time}\\" else: elapsed_time -= red_time initial_state = \\"Green\\" return traffic_light_simulation(initial_state, elapsed_time) def process_input(input_data): Process the input data for multiple test cases. result = [] for line in input_data: state, time_str = line.split() if state == \\"END\\": break elapsed_time = int(time_str) result.append(traffic_light_simulation(state, elapsed_time)) return result"},{"question":"=====Problem Statement===== You are given a list of dictionaries, where each dictionary contains the information about a student including their `id` (unique identifier), `name`, and a list of their `scores` in different subjects. Your task is to write a function `calculate_average_scores` that takes this list of dictionaries as input and returns a new list of dictionaries with each student\'s `id`, `name`, and their `average_score`. The `average_score` should be calculated as the mean of all scores in the `scores` list, rounded to two decimal places. =====Input Format===== The input will be read by a locked code template and will be in the following format: - The first line contains a single integer `n` denoting the number of students. - The next `n` lines contain information about each student in the form of space-separated values: 1. a string student `id` (no spaces) 2. a string student `name` (single word, no spaces) 3. a space-separated list of integers representing the `scores` in different subjects. =====Constraints===== 1 ≤ n ≤ 20 Each student has at least 1 and at most 10 scores. Scores are integers between 0 and 100 (inclusive). Student names and ids are single words with no spaces. =====Output Format===== The output should be printed by the locked code template. It will call your function `calculate_average_scores` with the list of dictionaries as the argument and print the returned list in a JSON-like format with sorted student ids. Example: Input ``` 3 s1 John 78 86 54 99 s2 Alice 88 92 s3 Bob 65 73 81 ``` Output ``` [ {\\"id\\": \\"s1\\", \\"name\\": \\"John\\", \\"average_score\\": 79.25}, {\\"id\\": \\"s2\\", \\"name\\": \\"Alice\\", \\"average_score\\": 90.0}, {\\"id\\": \\"s3\\", \\"name\\": \\"Bob\\", \\"average_score\\": 73.0} ] ```","solution":"def calculate_average_scores(students): Calculates the average score for each student and returns a list of dictionaries with each student\'s id, name, and average_score. Args: - students (list of dict): List of dictionaries where each dictionary contains a student\'s id, name, and scores. Returns: - List of dictionaries with each student\'s id, name, and average_score. result = [] for student in students: average_score = round(sum(student[\'scores\']) / len(student[\'scores\']), 2) result.append({ \'id\': student[\'id\'], \'name\': student[\'name\'], \'average_score\': average_score }) return sorted(result, key=lambda x: x[\'id\'])"},{"question":"# Problem Given a string a and an integer k , the task is to determine the maximum number of distinct substrings of length k that can be found in a . A substring is defined as a contiguous sequence of characters within the string. # Constraints The input satisfies the following conditions: - 1 le k le | a | le 10^6 - Characters contained in the string a are lowercase letters of the alphabet. # Input The input is given in the following format: ``` a k ``` The string a is given on the first line, and the integer k is given on the second line. # Output Output the maximum number of distinct substrings of length k . # Examples Example 1 **Input:** ``` abcdefg 3 ``` **Output:** ``` 5 ``` **Explanation:** The distinct substrings of length 3 are: - \\"abc\\" - \\"bcd\\" - \\"cde\\" - \\"def\\" - \\"efg\\" Example 2 **Input:** ``` aaaaaa 2 ``` **Output:** ``` 1 ``` **Explanation:** The distinct substring of length 2 is: - \\"aa\\" Example 3 **Input:** ``` abcdef 4 ``` **Output:** ``` 3 ``` **Explanation:** The distinct substrings of length 4 are: - \\"abcd\\" - \\"bcde\\" - \\"cdef\\"","solution":"def max_distinct_substrings(a, k): Returns the maximum number of distinct substrings of length k in the string a. if k > len(a) or k <= 0: return 0 substrings = set() for i in range(len(a) - k + 1): substrings.add(a[i:i+k]) return len(substrings)"},{"question":"This problem is about subsets of positive integers and their arithmetic properties. You\'re given an array of integers, and you need to determine if there exists a subset of this array whose sum is a prime number. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example, 2, 3, 5, and 7 are prime numbers, but 4 (2x2) and 9 (3x3) are not. Given a sequence of integers, your task is to find whether there exists a subset of these integers whose sum is a prime number. -----Input:----- The first line of input contains a single positive integer N indicating the length of the input sequence. The next N lines each contain one integer. The integer on line i+1 is a_i. -----Output:----- Your output should consist of a single line with the result \\"YES\\" if there exists a subset whose sum is a prime number, and \\"NO\\" otherwise. -----Constraints:----- - 1 leq N leq 20 - 1 leq a_i leq 100 -----Sample input 1:----- 5 1 2 3 4 5 -----Sample output 1:----- YES -----Explanation 1:----- The subset {2, 3} has the sum 5, which is a prime number. -----Sample input 2:----- 4 4 6 8 10 -----Sample output 2:----- NO -----Explanation 2:----- There is no subset whose sum is a prime number.","solution":"from itertools import combinations def is_prime(n): Checks if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % i + 2 == 0: return False i += 6 return True def exists_prime_subset_sum(N, array): Determines if there exists a subset of the given array such that the sum of the subset is a prime number. for r in range(1, N + 1): for subset in combinations(array, r): if is_prime(sum(subset)): return \\"YES\\" return \\"NO\\""},{"question":"A pizza restaurant offers different toppings to their customers. There are N different toppings available in the restaurant. A customer can choose any number of toppings, including none, but cannot choose the same topping more than once. Write a program that determines the number of different possible ways to choose toppings. Input Format The first line of the input contains an integer N, the number of available toppings. Output Format Print a single integer, representing the number of different possible ways to choose the toppings. Constraints 1 ≤ N ≤ 20 Note: The customer can choose zero or more toppings, so the number of possible combinations includes the choice of having no toppings. SAMPLE INPUT 3 SAMPLE OUTPUT 8","solution":"def count_topping_combinations(n): Return the number of different possible ways to choose toppings, given n toppings. # The number of ways to choose from N options is 2^N (since each topping can either be chosen or not) return 2 ** n"},{"question":"You are given an array of integers which can be interpreted as heights of histograms standing on a common base, with the width of each histogram being 1. The goal is to find the area of the largest rectangle that can be formed using contiguous histograms. Write a function that takes an array of integers and returns the maximum area of the rectangle. Input Format: The first line contains an integer T, the number of test cases. The next T lines each contain an integer N, the number of histograms, followed by N integers representing the heights of the histograms. Output Format: For each test case, print the area of the largest rectangle that can be formed using contiguous histograms. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ height of histograms ≤ 10^4 SAMPLE INPUT 2 7 6 2 5 4 5 1 6 5 2 1 5 6 2 3 SAMPLE OUTPUT 12 10","solution":"def largestRectangleArea(heights): Returns the largest rectangle area in the histogram represented by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def solve_histogram_areas(test_cases): results = [] for heights in test_cases: results.append(largestRectangleArea(heights)) return results"},{"question":"Zara loves sorting and finding patterns in numbers. She recently came across a challenge where she needs to find the nth smallest distinct number from a list after sorting it in ascending order. However, if the nth smallest number does not exist, she should return -1. Can you help Zara with this task? Input: - The first line contains the integer T, the number of test cases. - Each test case then consists of two lines: - The first line contains two integers n (the position to find) and m (the number of elements in the list). - The second line contains m distinct space-separated integers representing the list. Output: - For each test case, print the nth smallest distinct number or -1 if it does not exist. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ n, m ≤ 100 - The list elements can range between -10^9 to 10^9 SAMPLE INPUT 3 3 5 4 2 5 1 3 7 3 -1 -2 -3 2 4 100000 99999 1000000 -100000 SAMPLE OUTPUT 3 -1 99999","solution":"def nth_smallest_distinct_number(t, test_cases): results = [] for i in range(t): n, m, lst = test_cases[i] distinct_sorted_numbers = sorted(set(lst)) if n <= len(distinct_sorted_numbers): results.append(distinct_sorted_numbers[n-1]) else: results.append(-1) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, m = map(int, lines[index].strip().split()) lst = list(map(int, lines[index + 1].strip().split())) test_cases.append((n, m, lst)) index += 2 return t, test_cases def format_output(result_list): return \\"n\\".join(map(str, result_list))"},{"question":"You are given `n` points on a 2D plane, and you are to determine if a valid triangle can be formed from any three of these points. The coordinates of the points are given as integer pairs (x, y). Input: The first line contains one integer `n` (3 ≤ n ≤ 1000) — the number of points. Each of the next `n` lines contains two integers `x` and `y` (−10^4 ≤ x, y ≤ 10^4), representing the coordinates of each point. Output: Output \\"YES\\" if there exists a set of three points that form a valid triangle (a triangle with non-zero area), otherwise output \\"NO\\". Examples: Input: 3 0 0 1 1 2 2 Output: NO Input: 4 0 0 1 0 0 1 1 1 Output: YES Explanation: In the first example, all points are collinear, so they do not form a valid triangle. In the second example, there are multiple triples of points that can form triangles, so the output is \\"YES\\".","solution":"def is_valid_triangle(a, b, c): Check if three points a, b, c form a valid triangle. The area of the triangle must be non-zero. # a, b, c are tuples of the form (x, y) (x1, y1), (x2, y2), (x3, y3) = a, b, c # The determinant of the matrix formed by the vectors # (x2 - x1, y2 - y1) and (x3 - x1, y3 - y1) should be non-zero area = abs((x1*(y2 - y3)) + (x2*(y3 - y1)) + (x3*(y1 - y2))) return area != 0 def can_form_triangle(points): Determine if there exists a set of three points among the given points that can form a valid triangle. n = len(points) for i in range(n): for j in range(i+1, n): for k in range(j+1, n): if is_valid_triangle(points[i], points[j], points[k]): return \\"YES\\" return \\"NO\\""},{"question":"Sarah loves palindromic strings — strings that read the same forwards and backwards. She wants to create the longest palindromic substring possible from a given string s. A substring is obtained by deleting characters from the beginning and/or the end of the string without changing the order of the remaining characters. Sarah challenges you to find the length of the longest palindromic substring within the given string s. -----Input----- The input contains a single string s of length n (1 ≤ n ≤ 10^5), consisting of lowercase English letters. -----Output----- Print the length of the longest palindromic substring. -----Examples----- Input babad Output 3 Input cbbd Output 2 Input a Output 1","solution":"def longest_palindromic_substring_length(s): Finds the length of the longest palindromic substring in the given string s. Parameters: s (str): Input string Returns: int: Length of the longest palindromic substring n = len(s) if n == 0: return 0 # Initialize a 2D table to keep track of palindromic substrings dp = [[False] * n for _ in range(n)] max_length = 1 # Every single character is a palindrome for i in range(n): dp[i][i] = True # Check for substring of length 2 start = 0 for i in range(n - 1): if s[i] == s[i + 1]: dp[i][i + 1] = True start = i max_length = 2 # Check for lengths greater than 2 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if dp[i + 1][j - 1] and s[i] == s[j]: dp[i][j] = True if length > max_length: start = i max_length = length return max_length"},{"question":"A number is \\"almost special\\" if its digits consist of only the digits \'2\', \'5\', and \'9\' and it contains at least one \'2\', one \'5\', and one \'9\'. You are provided a number and you need to check whether the number is \\"almost special\\" or not. If it is \\"almost special\\", print \\"YES\\"; otherwise, print \\"NO\\" (without the quotes). # Input: The first and only line of input consists of a string N representing the number (1 le |N| le 1,000). It is guaranteed that the string will only consist of the digits \'0\'-\'9\'. # Output: Print \\"YES\\" if the number is \\"almost special\\", otherwise print \\"NO\\". # Examples: Input: 259 Output: YES Input: 2259 Output: YES Input: 252 Output: NO # Note: Consider the first example: the number contains at least one \'2\', one \'5\', and one \'9\', so the output is \\"YES\\". Consider the second example: the number contains at least one \'2\', one \'5\', and one \'9\', so the output is also \\"YES\\". Consider the third example: the number does not contain \'9\', so the output is \\"NO\\".","solution":"def is_almost_special(number: str) -> str: Returns \\"YES\\" if the number is almost special, otherwise returns \\"NO\\". if \'2\' in number and \'5\' in number and \'9\' in number: return \\"YES\\" else: return \\"NO\\""},{"question":"You are given two strings, S and T, consisting of lowercase English letters. Your task is to transform S into T using the following operations: 1. Append any lowercase letter to the end of S. 2. Delete the last character of S. 3. Replace the last character of S with any lowercase letter. You need to determine the minimum number of operations required to transform S into T. -----Constraints----- - 1 leq |S|, |T| leq 1000 -----Input----- Input is given from Standard Input in the following format: S T -----Output----- Print a single integer representing the minimum number of operations required to transform S into T. -----Sample Input----- kitten sitting -----Sample Output----- 3 To transform \\"kitten\\" into \\"sitting\\": - Replace \'k\' with \'s\': \\"kitten\\" -> \\"sittten\\" - Replace \'t\' with \'i\': \\"sittten\\" -> \\"sittenn\\" - Replace \'e\' with \'i\': \\"sittenn\\" -> \\"sittinn\\" - Replace \'n\' with \'g\': \\"sittinn\\" -> \\"sitting\\" Thus, the minimum number of operations required is 3. Another example: -----Sample Input----- flaw lawn -----Sample Output----- 2 To transform \\"flaw\\" into \\"lawn\\": - Replace \'f\' with \'l\': \\"flaw\\" -> \\"llaw\\" - Replace \'l\' with \'o\': \\"llaw\\" -> \\"llwo\\" - Replace \'o\' with \'a\': \\"llwo\\" -> \\"llwa\\" - Replace \'w\' with \'n\': \\"llwa\\" -> \\"lawn\\" Thus, the minimum number of operations required is 2.","solution":"def min_operations(S, T): Returns the minimum number of operations required to transform S into T. # Let\'s denote the lengths of S and T as n and m respectively n, m = len(S), len(T) # Create a 2D list (matrix) to store the minimum number of operations dp = [[0] * (m + 1) for _ in range(n + 1)] # If S is empty, the only option is to insert all characters of T for j in range(m + 1): dp[0][j] = j # If T is empty, the only option is to remove all characters of S for i in range(n + 1): dp[i][0] = i # Fill dp array using the operations for i in range(1, n + 1): for j in range(1, m + 1): if S[i - 1] == T[j - 1]: dp[i][j] = dp[i - 1][j - 1] # No operation needed else: dp[i][j] = 1 + min(dp[i - 1][j], # Delete last character of S dp[i][j - 1], # Insert last character of T dp[i - 1][j - 1])# Replace last character of S with T return dp[n][m]"},{"question":"You are given an array of n integers. Your task is to determine the minimum number of elements to remove from this array such that the remaining elements are in non-decreasing order. -----Constraints----- - 1 leq n leq 10^5 - 1 leq A[i] leq 10^9 -----Input----- Input is given from Standard Input in the following format: n A_1 A_2 ... A_n -----Output----- Print the minimum number of elements to remove so that the remaining elements are in non-decreasing order. -----Sample Input----- 6 5 3 4 7 2 8 -----Sample Output----- 2 Explanation: We can remove 5 and 2, or 3 and 2 to make the array non-decreasing.","solution":"def min_removals_to_sort(arr): Returns the minimum number of elements to remove to make the array non-decreasing. def lis_length(arr): from bisect import bisect_left lis = [] for num in arr: pos = bisect_left(lis, num) if pos == len(lis): lis.append(num) else: lis[pos] = num return len(lis) n = len(arr) lis_len = lis_length(arr) return n - lis_len def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) arr = list(map(int, data[1:])) print(min_removals_to_sort(arr))"},{"question":"# Task: Write a function that takes a string as input and returns a cleaned version of the string. The function should remove any leading or trailing white spaces and replace any sequence of multiple white spaces inside the string with a single space. # Requirements: - Your function should be named `clean_string`. - It takes a single argument `s`, which is a string. - Return the cleaned string. # Examples: ```python clean_string(\\" Hello, world! \\") #=> \\"Hello, world!\\" clean_string(\\"Python is awesome!\\") #=> \\"Python is awesome!\\" clean_string(\\" Multiple spaces here \\") #=> \\"Multiple spaces here\\" clean_string(\\"NoExtraSpaces\\") #=> \\"NoExtraSpaces\\" ``` # Notes: - You can assume the input string will contain only ASCII characters (no need to handle Unicode). - The function should handle empty strings and return an empty string if the input is empty. # Tips: - Consider using string methods like `strip()` to remove leading/trailing spaces and `split()` to handle multiple spaces between words.","solution":"def clean_string(s): Takes a string and returns a cleaned version. Removes leading/trailing white spaces and replaces sequences of multiple white spaces with a single space. return \' \'.join(s.strip().split())"},{"question":"Implement a function `calculate_operations(n)` that determines the minimum number of operations required to reduce a given positive integer `n` to 1. The allowed operations are: 1. If `n` is divisible by 2, divide it by 2. 2. If `n` is divisible by 3, divide it by 3. 3. Subtract 1 from `n`. -----Constraints----- - The input integer `n` will be between 1 and 10^6. -----Input----- The input is given as a single integer `n`. -----Output----- Output a single integer representing the minimum number of operations required to reduce `n` to 1. -----Sample Input----- 10 -----Sample Output----- 3 Explanation for Sample Output: Starting with `n = 10`, the sequence of operations that minimize the steps is: 1. Subtract 1 from 10 (resulting in 9) 2. Divide 9 by 3 (resulting in 3) 3. Divide 3 by 3 (resulting in 1) Thus, it takes 3 operations to reduce 10 to 1.","solution":"def calculate_operations(n): Calculate the minimum number of operations to reduce `n` to 1. Operations allowed: 1. If `n` is divisible by 2, divide it by 2. 2. If `n` is divisible by 3, divide it by 3. 3. Subtract 1 from `n`. Args: - n: int, a positive integer Returns: - int, minimum number of operations to reduce `n` to 1 if n < 1: raise ValueError(\\"n must be a positive integer.\\") # Create a list to store the minimum operations count to get to each number from 1 to n dp = [0] * (n + 1) # dp[i] will store the minimum operations to get to 1 from i for i in range(2, n + 1): # Start with subtract 1 from i dp[i] = dp[i - 1] + 1 # If i is divisible by 2, consider it as a candidate and take the minimum if i % 2 == 0: dp[i] = min(dp[i], dp[i // 2] + 1) # If i is divisible by 3, consider it as a candidate and take the minimum if i % 3 == 0: dp[i] = min(dp[i], dp[i // 3] + 1) return dp[n]"},{"question":"Given an integer array `nums` of length `n` (1 ≤ n ≤ 105) and an integer `k` (1 ≤ k ≤ n), your task is to rearrange the array in such a way that no three consecutive integers form an arithmetic sequence, i.e., the difference between consecutive elements should not be the same for any three consecutive elements. If it is possible to rearrange the array to meet this condition, output the rearranged array. Otherwise, return an empty array. # Input - The first line contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 105). - The second line contains `n` integers separated by single spaces, representing the array `nums` where each integer is in the range from 1 to k. # Output - If it is possible to rearrange the array such that no three consecutive integers form an arithmetic sequence, output the rearranged array as a single line of `n` integers separated by single spaces. - If it is not possible, output an empty array. # Examples Input: ``` 5 5 1 2 3 4 5 ``` Output: ``` 1 3 2 5 4 ``` Input: ``` 4 2 1 1 2 2 ``` Output: ``` 2 1 2 1 ``` Input: ``` 3 1 1 1 1 ``` Output: ``` ``` # Note In the first example, a possible rearrangement is `1 3 2 5 4`, where no three consecutive numbers form an arithmetic sequence. In the second example, one possible valid arrangement is `2 1 2 1`, where no three consecutive numbers form an arithmetic sequence. In the third example, it\'s not possible to rearrange the array to meet the condition, so the output is an empty array.","solution":"def rearrange_no_arithmetic_sequence(n, k, nums): Rearranges \'nums\' such that no three consecutive integers form an arithmetic sequence. Returns the rearranged array if possible, otherwise returns an empty array. from itertools import permutations # Check if three consecutive items form an arithmetic sequence def is_arithmetic_sequence(lst): for i in range(2, len(lst)): if lst[i] - lst[i-1] == lst[i-1] - lst[i-2]: return True return False # Generate all permutations and check each for lst in permutations(nums): if not is_arithmetic_sequence(lst): return list(lst) return [] # Testing the solution function n = 5 k = 5 nums = [1, 2, 3, 4, 5] print(rearrange_no_arithmetic_sequence(n, k, nums)) # Should output a valid array like [1, 3, 2, 5, 4] n = 4 k = 2 nums = [1, 1, 2, 2] print(rearrange_no_arithmetic_sequence(n, k, nums)) # Should output a valid array like [2, 1, 2, 1] n = 3 k = 1 nums = [1, 1, 1] print(rearrange_no_arithmetic_sequence(n, k, nums)) # Should output []"},{"question":"Given a list of integers and an integer K, your task is to find the K-th smallest element in the list using a max-heap. Input: The first line contains two integers N (the number of elements in the list) and K. The second line contains N integers representing the elements of the list. Output: Print the K-th smallest element of the list. Constraints: 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 1 ≤ element ≤ 10^6 Note: You are required to use a max-heap for solving this problem. SAMPLE INPUT 7 3 7 10 4 3 20 15 2 SAMPLE OUTPUT 4 Explanation The sorted order of the given list is: [2, 3, 4, 7, 10, 15, 20] The 3rd smallest element in the list is 4.","solution":"import heapq def kth_smallest_element(nums, k): Finds the k-th smallest element in the list using a max-heap. Parameters: nums (list): List of integers. k (int): The position of the smallest element to find. Returns: int: The k-th smallest element. # Utilize max-heap for the k smallest elements (invert values for max-heap behavior) max_heap = [] for num in nums: heapq.heappush(max_heap, -num) if len(max_heap) > k: heapq.heappop(max_heap) return -heapq.heappop(max_heap)"},{"question":"Chef is fond of pattern recognition. He has a list of sequences, where each sequence consists of numbers in either an increasing pattern, a decreasing pattern, or a mixed pattern. Chef wants to know the pattern of each sequence. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the length of the sequence. - The second line of each test case contains N space-separated integers denoting the sequence. -----Output----- For each test case, print a single line containing the string \\"Increasing\\", \\"Decreasing\\", or \\"Mixed\\" (without quotes) based on the pattern of the sequence. -----Constraints----- - 1 le T le 50 - 2 le N le 100 - -1000 le text{each integer in the sequence} le 1000 -----Subtasks----- Subtask #1 (100 points): original constraints -----Example Input----- 3 5 1 2 3 4 5 5 5 4 3 2 1 5 1 3 2 4 5 -----Example Output----- Increasing Decreasing Mixed -----Explanation----- Example case 1: The sequence \\"1 2 3 4 5\\" is in an increasing pattern. Example case 2: The sequence \\"5 4 3 2 1\\" is in a decreasing pattern. Example case 3: The sequence \\"1 3 2 4 5\\" does not follow a consistent increasing or decreasing pattern, thus it is \\"Mixed\\".","solution":"def detect_sequence_pattern(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] sequence = test_cases[i][1] if all(sequence[j] < sequence[j + 1] for j in range(n - 1)): results.append(\\"Increasing\\") elif all(sequence[j] > sequence[j + 1] for j in range(n - 1)): results.append(\\"Decreasing\\") else: results.append(\\"Mixed\\") return results"},{"question":"Alex is organizing a charity marathon to raise funds. He needs to schedule a few sessions for running practice before the event. Each session has a specific duration and there are limited total hours available for practice. Your task is to find the maximum number of sessions Alex can schedule without exceeding the available hours. ------ Input ------ The first line of the input contains an integer T, denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and H. The second line contains N space-separated integers D_{1}, D_{2}, ..., D_{N} representing the duration of each session. ------ Output ------ For each test case, output an integer, denoting the maximum number of sessions that can be scheduled. If no sessions can be scheduled within the available hours, print 0. ------ Constraints ------ 1 ≤ T ≤ 5000 1 ≤ N ≤ 10 1 ≤ H ≤ 100 1 ≤ D_{i} ≤ 20 ----- Sample Input 1 ------ 2 5 15 2 3 5 8 1 3 8 4 2 6 ----- Sample Output 1 ------ 4 2 ----- explanation 1 ------ In the first test case, Alex can schedule sessions with durations 2, 3, 5, and 1 hours (total 11 hours), which is the maximum number of sessions he can fit within 15 available hours. In the second test case, Alex can schedule sessions with durations 4 and 2 hours (total 6 hours), fitting within his available 8 hours.","solution":"def max_sessions(T, cases): result = [] for i in range(T): N, H = cases[i][0] D = cases[i][1] D.sort() total_hours = 0 sessions_count = 0 for duration in D: if total_hours + duration <= H: total_hours += duration sessions_count += 1 else: break result.append(sessions_count) return result"},{"question":"You are given a string s consisting of n lowercase English letters. In one move, you can select any two adjacent letters in the string and delete them if they are the same. For example, given the string \\"abcc\\", you can delete the last two characters \\"cc\\" to get \\"ab\\". Your task is to determine if it is possible to completely delete the string such that no characters remain using several (possibly, zero) such moves. You have to answer t independent test cases. -----Input----- The first line of the input contains one integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. The first line of the test case contains one integer n (1 le n le 100) — the length of the string s. The second line of the test case contains one string s of length n. -----Output----- For each test case, print the answer: \\"YES\\" if it is possible to completely delete the string such that no characters remain using several (possibly, zero) moves described in the problem statement, or \\"NO\\" otherwise. -----Example----- Input 4 4 abba 6 aabbcc 3 abc 5 abbba Output YES YES NO NO -----Note----- In the first test case of the example, we can perform the following sequence of moves: delete the first two characters \\"ab\\" to get \\"ba\\", then delete the last two characters \\"ba\\" to get an empty string. In the second test case of the example, we can perform the following sequence of moves: delete \\"aa\\" to get \\"bbcc\\", then delete \\"bb\\" to get \\"cc\\", finally delete \\"cc\\" to get an empty string. In the third test case of the example, no adjacent characters are the same, so it is impossible to delete any characters. In the fourth test case of the example, although there are adjacent same characters, it is impossible to delete all characters since \\"b\\" would remain.","solution":"def can_completely_delete_string(t, test_cases): Determines if a string can be completely deleted by repeatedly removing adjacent pairs of identical characters. :param t: Number of test cases :param test_cases: A list of tuples where each tuple contains an integer (length of the string) and the string :return: A list of strings \\"YES\\" or \\"NO\\" for each test case results = [] for i in range(t): n, s = test_cases[i] stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) if not stack: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Task Write a function that takes a list of integers, and returns a tuple containing two lists: 1. The first list should contain all the even numbers from the original list. 2. The second list should contain the indexes of all the odd numbers from the original list. Examples ```python [ 1, 2, 3, 4, 5, 6 ] => ( [ 2, 4, 6 ], [ 0, 2, 4 ] ) [ 0, 7, 8, 3, 2 ] => ( [ 0, 8, 2 ], [ 1, 3 ] ) ``` Constraints - The input list will contain at least one integer. - The integers can be negative or positive.","solution":"def separate_even_and_odd_indexes(lst): Returns a tuple containing a list of even numbers and a list of indexes of odd numbers. Parameters: lst : list of integers Returns: tuple : (list of even numbers, list of indexes of odd numbers) even_numbers = [num for num in lst if num % 2 == 0] odd_indexes = [i for i, num in enumerate(lst) if num % 2 != 0] return (even_numbers, odd_indexes)"},{"question":"Carol is organizing a friendly math competition in her school. As part of the competition, she has created a unique game involving prime numbers. The game is designed as follows: given two integers (A) and (B), the task is to find how many prime numbers exist between (A) and (B) (inclusive). A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, the prime numbers between 10 and 20 are 11, 13, 17, and 19. Your task is to help Carol by writing a program that, given multiple ranges ([A, B]), computes the number of prime numbers within each range. INPUT: - The first line contains an integer (T) representing the number of test cases. - Each test case consists of one line with two integers (A) and (B) representing the range ([A, B]). OUTPUT: For each test case, output the number of prime numbers in the range ([A, B]). CONSTRAINTS: - (1 le T le 10) - (1 le A le B le 10^6) SAMPLE INPUT: 2 10 20 15 30 SAMPLE OUTPUT: 4 4","solution":"def prime_sieve(limit): Generate a list of booleans where True indicates that the index is a prime number (valid up to the limit). primes = [True] * (limit + 1) primes[0], primes[1] = False, False # 0 and 1 are not primes p = 2 while (p * p <= limit): if (primes[p] == True): for i in range(p * p, limit + 1, p): primes[i] = False p += 1 return primes def count_primes_in_range(primes, A, B): Count the number of prime numbers between A and B inclusive using the precomputed list of primes. return sum(primes[A:B+1]) def number_of_primes(test_cases): Given a list of test cases represented by tuple pairs (A, B), return a list of counts of prime numbers in the respective ranges. max_B = max(B for _, B in test_cases) primes = prime_sieve(max_B) results = [] for A, B in test_cases: results.append(count_primes_in_range(primes, A, B)) return results"},{"question":"You\'re given a string s consisting of lowercase Latin letters. You can perform the following operation on it: Choose any two distinct characters in the string and swap all their occurrences. For example, if s = \\"aabb\\" and you chose \'a\' and \'b\', after the swap, the string would become \\"bbaa\\". What is the lexicographically smallest string you can obtain? ------Input------ The first line contains a single integer n (1 le n le 10^5) — the length of the string s. The second line contains the string s of length n consisting of lowercase letters. -----Output----- The only line should contain the lexicographically smallest string possible after performing any number of character swaps. ------Examples------ Input 4 dbca Output abcd Input 5 abcde Output abcde -----Note----- In the first example, we can swap \'d\' and \'a\', and then \'b\' and \'d\', making the string \\"abcd\\".","solution":"def lexicographically_smallest_string(n, s): Returns the lexicographically smallest string that can be obtained by swapping any two distinct characters in the given string. Parameters: n (int): the length of the string s (str): the input string consisting of lowercase Latin letters Returns: str: the lexicographically smallest string # Convert the string to a list of characters, then sort it. sorted_chars = sorted(s) # Convert the sorted list back to a string. return \'\'.join(sorted_chars)"},{"question":"Task You are given an integer `n` representing the number of disks in a classic Tower of Hanoi puzzle. Your task is to write a function `tower_of_hanoi(n)` that returns a list of moves required to solve the puzzle. Each move should be represented as a tuple `(a, b)` where `a` is the start peg and `b` is the end peg. The pegs are numbered 1 to 3. The objective of the Tower of Hanoi puzzle is to move the entire stack from the first peg to the third peg, following these rules: 1. You can only move one disk at a time. 2. A move consists of taking the upper disk from one of the stacks and placing it on top of another stack. 3. No disk may be placed on top of a smaller disk. The function should generate the sequence of moves needed to solve the puzzle with `n` disks. Examples ```python tower_of_hanoi(2) # Output: [(1, 2), (1, 3), (2, 3)] tower_of_hanoi(3) # Output: [(1, 3), (1, 2), (3, 2), (1, 3), (2, 1), (2, 3), (1, 3)] ``` The provided examples demonstrate the minimal sequence of moves required to solve the Tower of Hanoi puzzle for `n = 2` and `n = 3` disks.","solution":"def tower_of_hanoi(n, start_peg=1, end_peg=3): Returns a list of moves required to solve the Tower of Hanoi puzzle for n disks. Each move is represented as a tuple (a, b) where a is the start peg and b is the end peg. def hanoi_moves(n, start_peg, end_peg, auxiliary_peg): if n == 0: return [] moves = hanoi_moves(n-1, start_peg, auxiliary_peg, end_peg) moves.append((start_peg, end_peg)) moves += hanoi_moves(n-1, auxiliary_peg, end_peg, start_peg) return moves return hanoi_moves(n, start_peg, end_peg, 6 - start_peg - end_peg)"},{"question":"You are managing an online bookstore system where users can rate the books they have read. Your task is to implement a system that processes multiple users\' ratings for different books and determines the top-rated book for each user. Each user\'s top-rated book is the one with the highest rating. If there are multiple top-rated books with the same highest rating, select the one that appears first in the input list. -----Input----- - The first line of the input contains a single integer N denoting the number of users. The description of N users follows. - The first line of each user description contains a single integer B denoting the number of books the user has rated. - Each of the following B lines contains a string representing the book title (consisting of up to 30 characters) and an integer representing the rating (between 1 and 5). The book titles for each user are unique. -----Output----- For each user, print a single line containing the title of the user\'s top-rated book. -----Constraints----- - 1 le N le 50 - 1 le B le 20 - Each string is a non-empty sequence of alphanumeric characters and spaces, but no leading or trailing spaces. Each book title is unique for a user. -----Example Input----- 3 3 The_Great_Gatsby 5 Moby_Dick 4 War_and_Peace 5 2 Pride_and_Prejudice 4 To_Kill_a_Mockingbird 5 4 1984 3 The_Catcher_in_the_Rye 3 Fahrenheit_451 4 Brave_New_World 4 -----Example Output----- The_Great_Gatsby To_Kill_a_Mockingbird Fahrenheit_451","solution":"def top_rated_books(N, user_data): top_books = [] for user in user_data: B, books = user best_book = books[0][0] best_rating = books[0][1] for title, rating in books[1:]: if rating > best_rating: best_book = title best_rating = rating elif rating == best_rating: continue top_books.append(best_book) return top_books # Convert input to the required format def read_user_data(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) index = 1 user_data = [] for _ in range(N): B = int(lines[index]) books = [] for i in range(index + 1, index + B + 1): parts = lines[i].rsplit(\' \', 1) book_title = parts[0] rating = int(parts[1]) books.append((book_title, rating)) user_data.append((B, books)) index += B + 1 return N, user_data # Main function to execute the process def main(input_data): N, user_data = read_user_data(input_data) return top_rated_books(N, user_data)"},{"question":"Write a function that takes a string of alphanumeric characters (containing only uppercase letters and digits) as input and returns a new string where each letter is replaced by the letter 3 positions ahead in the alphabet, wrapping around if necessary (i.e., \'X\' becomes \'A\', \'Y\' becomes \'B\', \'Z\' becomes \'C\'), and each digit is replaced by the digit 3 positions ahead, wrapping around if necessary (i.e., \'7\' becomes \'0\', \'8\' becomes \'1\', \'9\' becomes \'2\'). Characters that are neither letters nor digits should be left unchanged. Your function should handle the input string efficiently, ensuring that the transformation is applied correctly for both letters and digits while preserving the order and case of other characters.","solution":"def shift_chars(input_str): def shift_char(c): if \'A\' <= c <= \'Z\': return chr((ord(c) - ord(\'A\') + 3) % 26 + ord(\'A\')) elif \'0\' <= c <= \'9\': return chr((ord(c) - ord(\'0\') + 3) % 10 + ord(\'0\')) else: return c return \'\'.join(shift_char(c) for c in input_str)"},{"question":"-----Input----- The first line of the input is a positive integer indicating the size of a list (n). The second line contains n space-separated integers representing the list. Each integer in the list can be positive or negative. -----Output----- Output a single integer which is the sum of the largest contiguous subarray within the given list. -----Examples----- Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 -2 5 Output 9 Input 6 -1 -2 -3 -4 -5 -6 Output -1","solution":"def max_subarray_sum(arr): Returns the sum of the largest contiguous subarray within the given list. max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"Given an array arr[] of N positive integers, the task is to find the minimum number of steps required to make the array non-decreasing. In one step, you can increase any element of the array by 1. Example 1: Input: N = 5 arr[] = {3, 2, 5, 1, 7} Output: 5 Explanation: To make the array non-decreasing, we can do the following: - Increase arr[1] (2) to 3 (1 step). - Increase arr[3] (1) to 5 (4 steps). So a total of 5 steps are required. Example 2: Input: N = 3 arr[] = {1, 1, 1} Output: 0 Explanation: The array is already non-decreasing. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minSteps() which takes the array and an integer as input and returns the minimum number of steps to make the array non-decreasing. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 1 <= arr[i] <= 10^{9}","solution":"def minSteps(N, arr): Returns the minimum number of steps required to make the array non-decreasing. steps = 0 for i in range(1, N): if arr[i] < arr[i - 1]: steps += arr[i - 1] - arr[i] arr[i] = arr[i - 1] return steps"},{"question":"A local community center is planning to organize a ping-pong tournament. They have a total of N players, each with a unique skill rating. To make the tournament more competitive and fair, each match needs to be scheduled between players having the closest possible skill ratings. Your task is to schedule the matches such that the difference in skill ratings between the players in each match is minimized and each player plays exactly one match. The skill ratings will be specified as a list of positive integers. For example, if there are 6 players with skill ratings [5, 3, 2, 8, 6, 9], plausible matchups would be (2, 3), (5, 6), and (8, 9) since they minimize the difference in skill ratings. Input The input consists of multiple data sets. Each data set is given in the following format: > N > skill_rating_1 skill_rating_2 ... skill_rating_N N is the number of players, which is an even positive integer (2 <= N <= 200). skill_rating_i represents the skill rating of the i-th player. You can assume each skill rating is a positive integer less than 1000. The end of the input is indicated by a line that solely contains a zero. Output For each data set, print one line containing the pairs of skill ratings, each pair separated by a comma, from the matches where the difference in skill ratings between the players is minimized. The skill ratings in each pair should be formatted in ascending order (smaller rating first), and the pairs themselves should be sorted based on the first player’s skill rating within the pair. Example Input 6 5 3 2 8 6 9 4 10 1 3 20 0 Output (2, 3), (5, 6), (8, 9) (1, 3), (10, 20)","solution":"def schedule_matches(datasets): results = [] def format_pairs(pairs): return \\", \\".join([f\\"({a}, {b})\\" for a, b in pairs]) for dataset in datasets: N = dataset[\'N\'] skill_ratings = dataset[\'skills\'] skill_ratings.sort() pairs = [] for i in range(0, N, 2): pairs.append((skill_ratings[i], skill_ratings[i + 1])) results.append(format_pairs(pairs)) return results def parse_input(input_data): datasets = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): N = int(lines[i]) if N == 0: break skills = list(map(int, lines[i + 1].split())) datasets.append({\\"N\\": N, \\"skills\\": skills}) i += 2 return datasets"},{"question":"Task Write a function that takes a string consisting of alphabetic characters and spaces, and returns a new string in which each character (except for spaces) is replaced by the next character in the alphabet. The replacement for \'z\' should be \'a\', and \'Z\' should be \'A\'. The case should be preserved, meaning that \'a\' should become \'b\', \'A\' should become \'B\', etc. For example, let\'s consider the phrase \\"hello world\\". - \'h\' should become \'i\' - \'e\' should become \'f\' - \'l\' should become \'m\' - etc. The spaces should remain in their positions unchanged. Examples ```python \\"hello world\\" --> \\"ifmmp xpsme\\" \\"abc XYZ\\" --> \\"bcd YZA\\" \\"Zebra Attack\\" --> \\"Afcsb Buubdl\\" \\"Python 3.8\\" --> \\"Qzuipo 3.8\\" \\"Infinity War\\" --> \\"Jogjojuz Xbs\\" ``` Note: - You may assume the input string will not contain any characters other than alphabetic characters and spaces. - Do not shift for non-alphabetic characters, they should remain unchanged.","solution":"def shift_string(s): Shifts each alphabetic character in the string s to the next character in the alphabet. Non-alphabetic characters (spaces) remain unchanged. Wrapping around is handled for \'z\' -> \'a\' and \'Z\' -> \'A\'. result = [] for char in s: if char.islower(): if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) elif char.isupper(): if char == \'Z\': result.append(\'A\') else: result.append(chr(ord(char) + 1)) else: result.append(char) return \'\'.join(result)"},{"question":"You are given a string containing only lowercase alphabets. Your task is to determine the \\"weight\\" of the string. The weight is calculated as the sum of the positions of the characters in the English alphabet, where \'a\' is 1, \'b\' is 2, ..., and \'z\' is 26. If the string is empty, return 0 as the weight. **Note:** The input string will only contain lowercase alphabets or be an empty string. # Example ```python input_string = \\"abc\\" output_weight = 6 # \'a\' is 1, \'b\' is 2, \'c\' is 3, so 1 + 2 + 3 = 6 input_string = \\"xyz\\" output_weight = 75 # \'x\' is 24, \'y\' is 25, \'z\' is 26, so 24 + 25 + 26 = 75 ```","solution":"def calculate_weight(s): Returns the weight of the string, calculated as the sum of the positions of the characters in the English alphabet. Parameters: s (str): Input string containing only lowercase alphabets. Returns: int: The weight of the string. return sum((ord(char) - ord(\'a\') + 1) for char in s)"},{"question":"You are given a binary string (a string consisting only of \'0\'s and \'1\'s) of length N. You can perform the following operation any number of times (including zero): - Choose two adjacent characters in the string and if they are different, replace them with \'0\'. Your task is to determine the lexicographically smallest string that can be obtained after performing the above operation any number of times. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N. The second line contains a binary string of length N. ------ Output ------ For each test case, print a single line containing the lexicographically smallest string that can be obtained. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 The string contains only characters \'0\' and \'1\'. ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 2 3 101 5 11001 ----- Sample Output 1 ------ 00 000","solution":"def lexicographically_smallest_string(N, binary_string): Returns the lexicographically smallest string derived from binary_string by performing the operations described. count_zeros = binary_string.count(\'0\') return \'0\' * N def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] binary_string = test_cases[i][1] results.append(lexicographically_smallest_string(N, binary_string)) return results"},{"question":"You are given a list of integers `nums` and an integer `k`. Your task is to determine if there are two distinct indices `i` and `j` in the list such that `nums[i] == nums[j]` and the absolute difference between `i` and `j` is at most `k`. Write a function that returns `true` if such indices exist, and `false` otherwise. Input: - A list of integers `nums` - An integer `k` Output: - A boolean value indicating if the condition is met. Function signature: ``` def contains_nearby_duplicate(nums: List[int], k: int) -> bool: ``` Example: ``` contains_nearby_duplicate([1, 2, 3, 1], 3) = true contains_nearby_duplicate([1, 0, 1, 1], 1) = true contains_nearby_duplicate([1, 2, 3, 1, 2, 3], 2) = false contains_nearby_duplicate([], 1) = false ```","solution":"def contains_nearby_duplicate(nums, k): Determines if there are two distinct indices i and j in the list such that: nums[i] == nums[j] and abs(i - j) <= k Args: nums: List[int] - List of integers k: int - Maximum allowed distance between duplicate elements Returns: bool - True if such indices exist, otherwise False num_dict = {} for i, num in enumerate(nums): if num in num_dict and i - num_dict[num] <= k: return True num_dict[num] = i return False"},{"question":"Design and implement a function that receives an integer `n` and a string `s` consisting of lowercase alphabetical characters only. The function should return the length of the longest substring of `s` that contains at most `n` distinct characters. ------ Input ------ The function should take the following inputs: - An integer `n` representing the maximum number of distinct characters allowed in the substring. - A string `s` consisting of lowercase alphabetical characters only. ------ Output ------ The function should return the length of the longest substring that contains at most `n` distinct characters. ------ Constraints ------ 1 ≤ n ≤ 26 1 ≤ length(s) ≤ 10^6 ------ Example Input 1 ------ n = 2 s = \\"eceba\\" ------ Example Output 1 ------ 3 ------ Explanation ------ The longest substring with at most 2 distinct characters is \\"ece\\" which has length 3. ------ Example Input 2 ------ n = 1 s = \\"aaa\\" ------ Example Output 2 ------ 3 ------ Explanation ------ The longest substring with at most 1 distinct character is \\"aaa\\" which has length 3.","solution":"def length_of_longest_substring_n_distinct(n, s): Returns the length of the longest substring with at most n distinct characters. if n == 0 or not s: return 0 left = 0 max_length = 0 char_count = {} for right in range(len(s)): if s[right] in char_count: char_count[s[right]] += 1 else: char_count[s[right]] = 1 while len(char_count) > n: char_count[s[left]] -= 1 if char_count[s[left]] == 0: del char_count[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Write a function ```array_intersection``` that takes two lists of integers and returns a list that represents their intersection, without duplicates. The intersection of two lists is a list that contains only the elements that are present in both lists. A few cases: ``` ([1, 2, 2, 1], [2, 2]) -> [2] ([4, 9, 5], [9, 4, 9, 8, 4]) -> [4, 9] ([1, 2, 3], [4, 5, 6]) -> [] ([], [1, 2, 3]) -> [] ```","solution":"def array_intersection(list1, list2): Returns the intersection of two lists without duplicates. set1 = set(list1) set2 = set(list2) intersection = set1 & set2 return list(intersection)"},{"question":"Given an array of integers, implement a system that answers the following types of queries efficiently: 1. **Update Query:** Update the value at a specific index in the array. 2. **Range Query:** Calculate the product of values in a specified subarray. # Input The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5), representing the number of elements in the array and the number of queries, respectively. The second line contains `n` space-separated integers: `a1, a2, ..., an` (1 ≤ ai ≤ 10^9), representing the elements of the array. The next `m` lines contain the queries one per line. Each query is of one of the following two types: - `1 x y` (1 ≤ x ≤ n, 1 ≤ y ≤ 10^9): Update `ax` to `y`. - `2 l r` (1 ≤ l ≤ r ≤ n): Calculate and print the product of elements from `al` to `ar` modulo `10^9 + 7`. # Output For each query of the second type, output the result modulo `10^9 + 7` on a new line. # Examples Input ``` 5 5 1 2 3 4 5 2 1 3 1 3 6 2 1 3 2 3 5 1 5 2 ``` Output ``` 6 12 60 ``` # Explanation 1. **First range query**: Product of first three elements: 1 * 2 * 3 = 6. 2. **Update**: Update the third element to 6. 3. **Second range query**: Product of first three elements after update: 1 * 2 * 6 = 12. 4. **Third range query**: Product of elements from index 3 to 5: 6 * 4 * 5 = 120. Since all operations are modulo 10^9 + 7, the result remains 120. 5. **Update**: Update the fifth element to 2.","solution":"MOD = 10**9 + 7 def preprocess(arr): Create a prefix product array for efficient range product querying. n = len(arr) prefix_prod = [1] * (n + 1) for i in range(1, n + 1): prefix_prod[i] = (prefix_prod[i - 1] * arr[i - 1]) % MOD return prefix_prod def update(arr, index, value, prefix_prod): Update the array and rebuild the prefix product array. arr[index] = value for i in range(index + 1, len(prefix_prod)): prefix_prod[i] = (prefix_prod[i - 1] * arr[i - 1]) % MOD def range_product(prefix_prod, l, r): Calculate the product of elements from index l to r (1-based index). if l == 1: return prefix_prod[r] return (prefix_prod[r] * pow(prefix_prod[l - 1], MOD - 2, MOD)) % MOD def process_queries(n, arr, queries): Process all queries and return the results for range queries. results = [] prefix_prod = preprocess(arr) for query in queries: if query[0] == 1: _, x, y = query update(arr, x - 1, y, prefix_prod) elif query[0] == 2: _, l, r = query result = range_product(prefix_prod, l, r) results.append(result) return results"},{"question":"Sonia loves collecting antique items. She has a list of the weights of antique items she wants to buy from an auction. She has a maximum weight limit that she can carry home. Your task is to help Sonia determine the maximum number of antique items she can carry without exceeding her weight limit. Input The first line of the input contains two integers n and W, where n represents the number of antique items and W represents the maximum weight limit Sonia can carry (1 ≤ n ≤ 100 and 1 ≤ W ≤ 1000). The second line contains n integers, where each integer represents the weight (w_i) of an antique item (1 ≤ w_i ≤ 100). Output Print a single integer representing the maximum number of antique items Sonia can carry without exceeding her weight limit. SAMPLE INPUT 5 10 2 3 4 5 6 SAMPLE OUTPUT 3 Explanation Sonia has a weight limit of 10. The weights of the antique items are 2, 3, 4, 5, and 6. By choosing the items with weights 2, 3, and 4, the total weight becomes 9, allowing her to carry the maximum number of 3 items without exceeding the weight limit.","solution":"def max_items(n, W, weights): This function returns the maximum number of items Sonia can carry without exceeding her weight limit. :param n: Number of antique items. :param W: Maximum weight limit that Sonia can carry. :param weights: List of weights of the antique items. :return: Maximum number of items Sonia can carry. # Sort the weights in ascending order weights.sort() # Initialize total weight and item count total_weight = 0 item_count = 0 # Accumulate weights while they do not exceed the weight limit for weight in weights: if total_weight + weight <= W: total_weight += weight item_count += 1 else: break return item_count"},{"question":"Alice has a collection of n books, each with a unique thickness. Books need to be stacked in a single pile, following these rules: 1. Each book must be placed directly on top of a previously placed book or directly on the ground. 2. A book can only be placed on top of another book if its thickness is greater than or equal to the book below it. Alice can start multiple piles, but she wants to know what is the minimum number of piles she needs in order to stack all her books following the above rules. Input: The first line of the input contains a single integer T denoting the number of test cases. The description of each test case follows: The first line of each test case contains a single integer n, the number of books. The second line contains n space-separated integers t1, t2, ..., tn, the thickness of each book. Output: For each test case, output a single integer denoting the minimum number of piles needed. Constraints: 1 ≤ T ≤ 10 1 ≤ n ≤ 100 1 ≤ ti ≤ 1000 Example Input: 2 5 4 3 2 5 4 4 3 1 4 2 Example Output: 2 2 Explanation: First Case: Alice can stack the books in two piles: [4, 3, 2] and [5, 4]. Each pile follows the rule. Second Case: Alice can stack the books in two piles: [3, 2] and [4, 1]. Each pile follows the rule.","solution":"def min_piles(books): Given a list of book thicknesses, returns the minimum number of piles needed to stack the books following the rules specified. piles = [] for thickness in books: placed = False for i in range(len(piles)): if piles[i][-1] >= thickness: piles[i].append(thickness) placed = True break if not placed: piles.append([thickness]) return len(piles) def min_piles_for_cases(T, cases): Given T test cases, each containing the number of books and their thicknesses, returns a list of the minimum number of piles needed for each case. results = [] for n, books in cases: results.append(min_piles(books)) return results"},{"question":"As a data analyst at a tech company, you are dealing with a dataset that contains information about sales transactions. Each transaction has an ID, customer ID, product ID, and the amount of money spent. You are tasked with summarizing sales data to support various customer-centric analytics. You need to write a function that processes a list of sales transactions and returns the total sales amount for each customer. If a customer has no transactions, they should not appear in the result. # Function Signature `def summarize_sales(transactions: List[Tuple[int, int, int, float]]) -> Dict[int, float]:` # Input - `transactions` (List[Tuple[int, int, int, float]]): A list of tuples, where each tuple contains: - `transaction_id` (int): Unique ID of the transaction. - `customer_id` (int): Unique ID of the customer. - `product_id` (int): Unique ID of the product. - `amount_spent` (float): Amount of money spent in the transaction. # Output - Dictionary where the key is a `customer_id` (int) and the value is the total amount of sales (float) for that customer. # Examples Input: ```python transactions = [ (1, 101, 2001, 150.0), (2, 102, 2002, 200.0), (3, 101, 2003, 50.0), (4, 103, 2004, 300.0), (5, 102, 2001, 70.0) ] ``` Output: ```python { 101: 200.0, 102: 270.0, 103: 300.0 } ``` Input: ```python transactions = [ (1, 101, 2001, 99.99), (2, 101, 2002, 120.75), (3, 102, 2003, 45.60) ] ``` Output: ```python { 101: 220.74, 102: 45.60 } ``` Note: - The sum of sales amounts for customer 101 is 99.99 + 120.75 = 220.74. - The second example illustrates that different customers can have varying number of transactions.","solution":"from typing import List, Tuple, Dict def summarize_sales(transactions: List[Tuple[int, int, int, float]]) -> Dict[int, float]: Processes a list of sales transactions and returns the total sales amount for each customer. Args: transactions (List[Tuple[int, int, int, float]]): A list where each tuple contains: - transaction_id (int): Unique ID of the transaction. - customer_id (int): Unique ID of the customer. - product_id (int): Unique ID of the product. - amount_spent (float): Amount of money spent in the transaction. Returns: Dict[int, float]: Dictionary where the key is customer_id and the value is the total amount of sales for that customer. sales_summary = {} for transaction in transactions: transaction_id, customer_id, product_id, amount_spent = transaction if customer_id in sales_summary: sales_summary[customer_id] += amount_spent else: sales_summary[customer_id] = amount_spent return sales_summary"},{"question":"Given a number n, find the minimum number of steps to reach n from 1 under the following conditions: - You can multiply the current number by 2. - You can subtract 1 from the current number. Example 1: Input: n = 3 Output: 2 Explanation: Step 1: Multiply by 2 from 1 to get 2. Step 2: Add 1 (subtract 1 operation in reverse) to reach 3. Example 2: Input: n = 10 Output: 4 Explanation: Step 1: Multiply by 2 from 1 to get 2. Step 2: Multiply by 2 from 2 to get 4. Step 3: Multiply by 2 from 4 to get 8. Step 4: Add 2 (subtract 1 operation twice) to reach 10. Your Task: You do not need to read input or print anything. Your task is to complete the function minSteps() which takes an integer n as input and returns the minimum number of steps to reach n. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 10^9","solution":"def minSteps(n): Given a number n, find the minimum number of steps to reach n from 1 under the following conditions: - You can multiply the current number by 2. - You can subtract 1 from the current number. Args: n (int): The target number. Returns: int: The minimum number of steps to reach n. steps = 0 while n > 1: if n % 2 == 0: n //= 2 else: n -= 1 steps += 1 return steps"},{"question":"Write a function, `rotated_array_search(arr, target)`, that searches for a `target` value within a rotated sorted array `arr` and returns its index if found. The array was initially sorted in ascending order, but at some pivot unknown to you, it was rotated. Assume no duplicate numbers exist in the array. If the target is not found, return -1. The function should achieve this in O(log n) time complexity. For example: rotated_array_search([4, 5, 6, 7, 0, 1, 2], 0) should return 4. rotated_array_search([4, 5, 6, 7, 0, 1, 2], 3) should return -1.","solution":"def rotated_array_search(arr, target): Searches for a target value within a rotated sorted array and returns its index if found. If the target is not found, returns -1. if not arr: return -1 left, right = 0, len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid if arr[left] <= arr[mid]: # Left half is sorted if arr[left] <= target < arr[mid]: right = mid - 1 else: left = mid + 1 else: # Right half is sorted if arr[mid] < target <= arr[right]: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You have a grid of size `M x N` consisting of only 0s and 1s. You want to find the largest rectangle containing only 1s and return its area. Input Format: The first line contains two integers `M` and `N`, denoting the number of rows and columns in the grid respectively. The next `M` lines each contain a string of `N` characters consisting only of \'0\' and \'1\'. Output Format: Print a single integer representing the area of the largest rectangle containing only 1s. Constraints: 1 ≤ M, N ≤ 1000 Examples: SAMPLE INPUT 1 4 4 1010 1011 1110 1000 SAMPLE OUTPUT 1 4 Explanation: The largest rectangle containing only \'1\'s has an area of 4 in the region defined by rows 2 and 3 from columns 2 to 3. SAMPLE INPUT 2 3 5 11100 11110 01110 SAMPLE OUTPUT 2 6 Explanation: The largest rectangle containing only \'1\'s has an area of 6 in the region from row 1 to row 3 across columns 1 to 3.","solution":"def max_histogram_area(histogram): Helper function to calculate the largest rectangular area in a histogram. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def largest_rectangle_area(matrix): if not matrix: return 0 max_area = 0 row_count = len(matrix) col_count = len(matrix[0]) height = [0] * col_count for row in matrix: for col in range(col_count): if row[col] == \'1\': height[col] += 1 else: height[col] = 0 max_area = max(max_area, max_histogram_area(height)) return max_area"},{"question":"A company has a network of computers with each computer being identified by a unique ID number. Some pairs of computers are directly connected by a network cable. The company\'s IT department needs to analyze the network\'s connectivity and ensure that the network remains functional even if some connections fail. You are tasked with finding out the number of connected components in the network. A connected component is a set of computers such that there is a path (direct or indirect) between any two computers in this set. -----Input----- The input starts with two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000), the number of computers and the number of network cables respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that computer u and computer v are directly connected by a network cable. -----Output----- Print a single integer, the number of connected components in the network of computers. -----Examples----- Input 5 3 1 2 2 3 4 5 Output 2 Input 6 6 1 2 2 3 3 1 4 5 5 6 6 4 Output 1 -----Note----- In the first sample, there are 3 cables that connect computers (1,2), (2,3), and (4,5). This results in two connected components: {1, 2, 3} and {4, 5}. So, the output is 2. In the second sample, all the computers are connected directly or indirectly through the cables, forming a single connected component. Therefore, the output is 1.","solution":"def find_connected_components(n, m, edges): from collections import defaultdict, deque # create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) component_count = 0 for node in range(1, n + 1): if node not in visited: bfs(node) component_count += 1 return component_count"},{"question":"There is a magical forest with N enchanted trees arranged in a straight line, numbered from 1 to N. Each tree has a magical fruit that provides a certain amount of magical power when consumed. The magical power provided by each tree is represented by an array P of length N, where P[i] denotes the magical power of the fruit on the i-th tree. There are M wizards who each have their own magical power limit, represented by an array L of length M, where L[j] denotes the maximum magical power limit the j-th wizard can absorb. A wizard can start from any tree and consume the fruits of consecutive trees to gain magical power, but they must stop eating before their magical power exceeds their limit. Each wizard can only consume fruits from one contiguous segment of trees starting from any tree. Wizards do not have to consume fruits from all trees and are allowed to skip trees. Determine the maximum number of wizards that can successfully consume fruits without exceeding their magical power limits. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers N and M separated by space, where N is the number of trees and M is the number of wizards. The second line contains N integers separated by spaces, denoting the magical power array P. The third line contains M integers separated by spaces, denoting the magical power limit array L. ------ Output ------ For each test case, print the maximum number of wizards that can successfully consume fruits without exceeding their magical power limits. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 10^{5} 1 ≤ M ≤ 10^{5} 1 ≤ P[i] ≤ 10^{6} 1 ≤ L[j] ≤ 10^{18} It is guaranteed that the sum of N over all test cases does not exceed 10^{6}. It is guaranteed that the sum of M over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 1 5 3 10 20 30 40 50 60 70 80 ----- Sample Output 1 ------ 3 ----- Explanation 1 ------ All three wizards can consume fruits from the trees without exceeding their magical power limits: - Wizard 1 can consume fruits from trees: [1, 2, 3] (10 + 20 + 30 = 60) - Wizard 2 can consume fruits from trees: [1, 2, 3, 4] (10 + 20 + 30 + 40 = 100, but [2, 3] (20 + 30 = 50) is also valid within limit 70) - Wizard 3 can consume fruits from trees: [1, 2, 3, 4, 5] (10 + 20 + 30 + 40 + 50 = 150, but [2, 3, 4] (20 + 30 + 40 = 90) is valid within limit 80) Thus, the maximum number of wizards that can successfully consume fruits without exceeding their limits is 3.","solution":"def max_wizards_consuming_fruits(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][\\"N\\"], test_cases[i][\\"M\\"] P, L = test_cases[i][\\"P\\"], test_cases[i][\\"L\\"] # Initialize prefix sum prefix_sum = [0] * (N + 1) for j in range(1, N + 1): prefix_sum[j] = prefix_sum[j - 1] + P[j - 1] # Function to find the maximum subarray sum <= limit def can_wizard_eat(limit): min_prefix = 0 for j in range(1, N + 1): if prefix_sum[j] - min_prefix <= limit: return True min_prefix = min(min_prefix, prefix_sum[j]) return False # Check each wizard\'s limit count = 0 for limit in L: if can_wizard_eat(limit): count += 1 results.append(count) return results"},{"question":"Given a language feature called Maskify, you are to implement a function that masks all but the last four characters of a given string. If the string is less than or equal to four characters, it remains unchanged. The masking should replace the characters with the \'#\' symbol. For instance, a string \\"1234567890\\" would become \\"7890\\" after masking. Your task is to write a function `maskify(s)` that takes a string `s` and returns the masked string according to the rules specified. # Input - A single line containing a non-empty string `s` consisting of uppercase and lowercase Latin letters, digits, and special characters. The length of the string is guaranteed not to exceed 100 characters. # Output - A single line containing the masked string. # Examples Example 1 **Input:** ``` 4556364607935616 ``` **Output:** ``` 5616 ``` Example 2 **Input:** ``` 1234 ``` **Output:** ``` 1234 ``` Example 3 **Input:** ``` 1 ``` **Output:** ``` 1 ``` Example 4 **Input:** ``` 11111 ``` **Output:** ``` #1111 ```","solution":"def maskify(s): Returns the masked version of the input string, where all but the last four characters are replaced with the \'#\' symbol. If the string is less than or equal to four characters, it remains unchanged. if len(s) <= 4: return s return \'#\' * (len(s) - 4) + s[-4:]"},{"question":"In a small town, there are a number of wells arranged in a straight line. Each well has a certain amount of water stored in it. The municipality has decided to divide an increasing portion of these wells\' water supply into specific intervals over several days for maintenance and reporting purposes. Each day, the maintenance team processes a subset of intervals and calculates the total amount of water available between these intervals, inclusive. Due to the town\'s large size and the increasing number of intervals being processed, the team seeks help to automate this calculation. Write a program that, given the amount of water in each well and multiple queries asking for the total water in certain intervals, outputs the total amount of water for each interval. **Input:** - The first line contains two integers, N (number of wells) and Q (number of queries). - The second line contains N integers where the i-th integer represents the amount of water in the i-th well. - Each of the next Q lines contains two integers, L and R (0-based indices), representing a query asking for the total amount of water from well L to well R, inclusive. **Output:** - For each query, output the total amount of water in the specified interval. **Constraints:** - 1 ≤ N ≤ 10^6 - 1 ≤ Q ≤ 10^5 - 1 ≤ water in each well ≤ 10^6 - 0 ≤ L ≤ R < N **Sample Input:** ``` 10 3 5 3 8 6 2 9 4 7 1 3 2 5 0 3 7 9 ``` **Sample Output:** ``` 25 22 11 ``` **Explanation:** For the first query, the total water in wells from index 2 to 5 is 8 + 6 + 2 + 9 = 25. For the second query, the total water in wells from index 0 to 3 is 5 + 3 + 8 + 6 = 22. For the third query, the total water in wells from index 7 to 9 is 7 + 1 + 3 = 11.","solution":"def calculate_total_water(N, Q, wells, queries): Returns the total amount of water in the specified intervals for each query. Parameters: N (int): Number of wells. Q (int): Number of queries. wells (list): The amount of water in each well. queries (list): List of tuples where each tuple represents a query (L, R). Returns: list: List of total water amounts for each query. # Create a prefix sum array to enable quick sum calculation prefix_sum = [0] * (N + 1) for i in range(N): prefix_sum[i + 1] = prefix_sum[i] + wells[i] results = [] for L, R in queries: total_water = prefix_sum[R + 1] - prefix_sum[L] results.append(total_water) return results"},{"question":"Mary loves creating patterns with colors. She recently discovered a special way to create patterns using a grid of squares, where each square can be either black(\'B\') or white(\'W\'). She starts with a grid of size N x N, all squares white. Then she applies a sequence of given operations that can either turn a square black or white, making her patterns. Your task is to help Mary determine the final state of the grid after performing all operations. Each operation is defined by three integers X, Y, and C where: - X and Y (1-based) denote the coordinates of the square, - C is either 0 or 1, where 0 turns the square white(\'W\') and 1 turns it black(\'B\'). Input: - The first line of input contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N (1 ≤ N ≤ 1000), the size of the grid. - The second line contains an integer M (0 ≤ M ≤ 100000), the number of operations. - The following M lines each contain three integers X, Y, and C, defining an operation. Output: - For each test case, print the final state of the grid, where each row is on a new line, and each square is represented by its color(\'W\' or \'B\'), with no spaces between the characters in a row. SAMPLE INPUT 2 3 4 1 1 1 2 2 1 3 3 1 1 1 0 2 2 1 1 1 2 2 0 SAMPLE OUTPUT BWW WBW WWB BW WW","solution":"def generate_final_grid(N, M, operations): Generates the final grid after performing all operations. :param N: int: Size of the grid (N x N) :param M: int: Number of operations :param operations: list: List of tuples (X, Y, C) for each operation :return: list: Final grid as a list of strings grid = [[\'W\' for _ in range(N)] for _ in range(N)] for x, y, c in operations: grid[x-1][y-1] = \'B\' if c == 1 else \'W\' return [\'\'.join(row) for row in grid] def parse_input_and_generate_grids(input_data): Parses the input data and generates the final grids for each test case. :param input_data: str: The input data as a string :return: list: A list of final grids for each test case lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 results = [] for _ in range(T): N = int(lines[index]) M = int(lines[index + 1]) operations = [] for i in range(M): X, Y, C = map(int, lines[index + 2 + i].strip().split()) operations.append((X, Y, C)) result = generate_final_grid(N, M, operations) results.append(result) index += 2 + M return results"},{"question":"A security company is designing a secure authentication system. They need to implement a function that ensures the strength of users\' passwords. A password is considered strong if it satisfies the following criteria: 1. It has at least six characters and at most twelve characters. 2. It contains at least one uppercase letter. 3. It contains at least one lowercase letter. 4. It contains at least one digit. 5. It contains at least one special character from the set: !@#%^&*()_+-=[]{}|;:\'\\",.<>?/~` You are to write a function `is_strong_password(password: str) -> bool` that returns True if the password is strong and False otherwise. Input: - `password`: a string, the password to be evaluated. Output: - Return True if the password meets all strength criteria, otherwise return False. Example Input and Output: Example 1: ```python is_strong_password(\\"Aa1!\\") # False ``` Explanation: The password is too short. Example 2: ```python is_strong_password(\\"Aa1!def\\") # True ``` Explanation: The password meets all the criteria. Example 3: ```python is_strong_password(\\"abcdefgh\\") # False ``` Explanation: The password has no uppercase letter, no digit, and no special character. Example 4: ```python is_strong_password(\\"ABC1!A\\") # False ``` Explanation: The password has no lowercase letter. Constraints: - The given password contains only characters which are alphanumeric or from the specified special character set. - The length of the password is at most 100 characters.","solution":"def is_strong_password(password: str) -> bool: Returns True if the password is strong based on given criteria, otherwise returns False. # Check length of password if len(password) < 6 or len(password) > 12: return False # Initialize flags for different criteria has_upper = has_lower = has_digit = has_special = False special_characters = \\"!@#%^&*()_+-=[]{}|;:\'\\",.<>?/~`\\" # Iterate through each character in password for char in password: if char.isupper(): has_upper = True elif char.islower(): has_lower = True elif char.isdigit(): has_digit = True elif char in special_characters: has_special = True # Return True if all criteria are met return has_upper and has_lower and has_digit and has_special"},{"question":"Marie is learning about binary trees and she is building a tree where each node has an integer value. She would like to determine the sum of values on the path from the root to each leaf node in her binary tree. Write a program that constructs Marie\'s binary tree and computes the required sums. -----Input----- The first line contains an integer T (1 leq T leq 10000), the number of test cases. For each test case, the first line contains an integer N (1 leq N leq 100000), the number of nodes in the binary tree. Each of the following N lines contains three integers: node, left and right where: - node is the value of the current node. - left is the value of the left child node, or -1 if there is no left child. - right is the value of the right child node, or -1 if there is no right child. Each node value is a unique integer between 1 and N. It is guaranteed that the first node listed is always the root of the binary tree. -----Output----- For each test case, output the sum of values on the path from the root to each leaf node, each on a new line. If there are multiple test cases, the results for each should be output in the same order they were processed. -----Examples----- Sample Input: 1 5 1 2 3 2 -1 -1 3 4 5 4 -1 -1 5 -1 -1 Sample Output: 3 8 9","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nodes): node_dict = {} for node, left, right in nodes: if node not in node_dict: node_dict[node] = TreeNode(node) if left != -1: if left not in node_dict: node_dict[left] = TreeNode(left) node_dict[node].left = node_dict[left] if right != -1: if right not in node_dict: node_dict[right] = TreeNode(right) node_dict[node].right = node_dict[right] return node_dict[nodes[0][0]] def collect_path_sums(root): if not root: return [] def dfs(node, current_sum): if not node: return current_sum += node.value if not node.left and not node.right: path_sums.append(current_sum) return dfs(node.left, current_sum) dfs(node.right, current_sum) path_sums = [] dfs(root, 0) return path_sums def solve(test_cases): results = [] for case in test_cases: nodes = case[\'nodes\'] root = build_tree(nodes) path_sums = collect_path_sums(root) results.append(path_sums) return results # Example Usage: # test_cases = [ # { # \'nodes\': [ # (1, 2, 3), # (2, -1, -1), # (3, 4, 5), # (4, -1, -1), # (5, -1, -1) # ] # } # ] # print(solve(test_cases))"},{"question":"You are given a list of `n` integers. Your task is to write a program to find out the maximum difference between any two elements in the list such that the larger element appears after the smaller element in the list. Input: The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of integers in the list. The second line contains `n` space-separated integers (`a1, a2, ..., an`), where (1 ≤ ai ≤ 10^9). Output: Print a single integer, which is the maximum difference between any two elements in the list such that the larger element appears after the smaller element in the list. If no such pair exists, print 0. Constraints: 1 ≤ n ≤ 10^5 1 ≤ ai ≤ 10^9 SAMPLE INPUT 6 7 1 5 3 6 4 SAMPLE OUTPUT 5 Explanation An optimal solution for the sample test case is to buy the stock at price 1 and sell it at price 6, making the maximum profit of 6 - 1 = 5.","solution":"def maximum_difference(arr): if not arr or len(arr) < 2: return 0 min_element = arr[0] max_diff = 0 for i in range(1, len(arr)): if arr[i] > min_element: max_diff = max(max_diff, arr[i] - min_element) min_element = min(min_element, arr[i]) return max_diff"},{"question":"Word Frequency Counter Write a function that takes in a string and returns a dictionary where the keys are words and the values are the number of times each word occurs in the string. Keep in Mind * The input string consists of words separated by spaces, with no punctuation. * The words should be treated case-insensitively (e.g., \\"Hello\\" and \\"hello\\" are the same word). * The words in the dictionary should be in lowercase. Examples input: \\"Hello world hello\\" output: `{\\"hello\\": 2, \\"world\\": 1}` input: \\"This is a test Test this\\" output: `{\\"this\\": 2, \\"is\\": 1, \\"a\\": 1, \\"test\\": 2}`","solution":"def word_frequency(s): Returns a dictionary where the keys are words and the values are the number of times each word occurs in the string. # Convert the string to lowercase to ensure words are case-insensitive s = s.lower() # Split the string into words words = s.split() # Create a dictionary to hold word frequency counts frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"question":"You are given a sequence of `n` integers a1, a2, ..., an. Find the maximum sum of a subsequence such that all elements in the subsequence are consecutive integers. # Input The first line contains a single integer `t` (1 ≤ t ≤ 10) — the number of test cases. The first line of each test case contains a single integer `n` (1 ≤ n ≤ 10^5) — the number of elements in the sequence. The second line of each test case contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the elements of the sequence. The sum of all `n` across all test cases does not exceed 10^6. # Output For each test case, print a single integer — the maximum sum of a subsequence such that all elements in the subsequence are consecutive integers. # Examples Input ``` 2 5 1 2 3 4 5 6 4 7 5 8 3 6 ``` Output ``` 15 33 ``` # Explanation **Example 1:** The sequence is [1, 2, 3, 4, 5]. All numbers are consecutive, so the maximum sum is 1+2+3+4+5 = 15. **Example 2:** The sequence is [4, 7, 5, 8, 3, 6]. One of the possible subsequences of consecutive integers is [3, 4, 5, 6, 7, 8], and its sum is 33.","solution":"def max_consecutive_sum(n, arr): arr.sort() # Sort the array max_sum = current_sum = arr[0] for i in range(1, n): if arr[i] == arr[i - 1] + 1: current_sum += arr[i] else: current_sum = arr[i] max_sum = max(max_sum, current_sum) return max_sum def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(max_consecutive_sum(n, arr)) return results"},{"question":"In a distant galaxy, there exists a robot named R2D2 which performs various tasks in a grid-based environment. The robot can move up, down, left, or right to the adjacent cell, but it cannot move diagonally. Each cell in the grid can either be passable or blocked. R2D2 receives commands to navigate from a starting position `(x_start, y_start)` to a target position `(x_end, y_end)`. However, if the initial cell or the target cell is blocked, the navigation is not possible. Your task is to determine whether R2D2 can reach the target cell from the starting cell and, if so, find the minimum number of moves required. ---Input--- The first line contains one integer `t` (1 le t le 10^4) — the number of test cases. Each test case consists of the following format: - The first line contains two integers `n` and `m` (1 le n, m le 10^3) — the number of rows and columns of the grid, respectively. - The following `n` lines contain `m` characters each, describing the grid. A `.` (dot) denotes a passable cell, and a `#` (hash) denotes a blocked cell. - The last line contains four integers `x_start`, `y_start`, `x_end`, and `y_end` (0 le x_start, x_end < n; 0 le y_start, y_end < m) — the starting and target positions. ---Output--- For each test case, output the minimum number of moves required for R2D2 to reach the target cell from the starting cell. If it is not possible to reach the target, print -1. ---Example--- Input 3 5 5 ..... ..#.. ..... .#. ..... 0 0 4 4 3 4 ..# ..# ... 0 0 2 2 3 3 # # # 0 0 2 2 Output 8 4 -1 ---Note--- In the first example, R2D2 can successfully navigate from `(0, 0)` to `(4, 4)`, and the minimum number of moves required are `8`. An optimal path can be (0,0) → (0,1) → (0,2) → (0,3) → (0,4) → (1,4) → (2,4) → (3,4) → (4,4). In the second example, the shortest path from `(0, 0)` to `(2, 2)` is `(0, 0) → (0, 1) → (1, 1) → (2, 1) → (2, 2)`, resulting in `4` moves. In the third example, there is no possible path due to blockages, so the output is `-1`.","solution":"from collections import deque def min_moves_to_reach_target(t, testcases): results = [] def bfs(grid, n, m, start, end): x_start, y_start = start x_end, y_end = end if grid[x_start][y_start] == \'#\' or grid[x_end][y_end] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(x_start, y_start, 0)]) visited = set((x_start, y_start)) while queue: x, y, distance = queue.popleft() if (x, y) == (x_end, y_end): return distance for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny, distance + 1)) visited.add((nx, ny)) return -1 for testcase in testcases: n, m, grid, x_start, y_start, x_end, y_end = testcase result = bfs(grid, n, m, (x_start, y_start), (x_end, y_end)) results.append(result) return results"},{"question":"Given an array of integers `nums` and an integer `k`, return the maximum sum of a subarray with length `k`. # Notes * Ensure that 1 <= k <= length of nums. * The array can contain both positive and negative numbers. * If the array is empty, return 0. Examples ```python max_sum_subarray([1, 2, 3, 4, 5], 2) == 9 max_sum_subarray([-1, -2, -3, -4], 2) == -3 max_sum_subarray([1], 1) == 1 max_sum_subarray([], 3) == 0 ```","solution":"def max_sum_subarray(nums, k): Returns the maximum sum of a subarray with length k. if not nums or k > len(nums): return 0 current_max = sum(nums[:k]) max_sum = current_max for i in range(k, len(nums)): current_max += nums[i] - nums[i - k] max_sum = max(max_sum, current_max) return max_sum"},{"question":"Given a list of integers, write a program to find the second largest unique integer. If no such element exists, return -1. Input Format The first line of input contains an integer n, the length of the list. The second line contains n space-separated integers denoting the elements of the list. Output Format Print the second largest unique integer. If it does not exist, print -1. Constraints 1 ≤ n ≤ 1000 0 ≤ list[i] ≤ 1000 SAMPLE INPUT 5 2 3 6 6 5 SAMPLE OUTPUT 5","solution":"def second_largest_unique(lst): Returns the second largest unique integer in the list. If no such element exists, return -1. unique_elements = list(set(lst)) # Get unique elements if len(unique_elements) < 2: return -1 unique_elements.sort() # Sort the unique elements return unique_elements[-2] # Return the second largest element"},{"question":"Given a set of instructions represented in a string containing characters \'L\', \'R\', \'U\', and \'D\', which represent movement in a 2D grid (Left, Right, Up, and Down respectively). Your task is to determine if these instructions lead to the object returning to its original position (0, 0) after executing all the moves. Implement a method doesReturnToOrigin that takes a string of movements and returns a boolean indicating whether the object returns to the origin or not. Example 1: Input: moves = \\"UD\\" Output: true Example 2: Input: moves = \\"LL\\" Output: false Your Task: You don\'t need to read or print anything. Your task is to complete the function doesReturnToOrigin() which takes a string moves as input and returns a boolean value indicating whether the object returns to the origin position after executing the moves. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= moves.length <= 10000 moves only contains characters \'L\', \'R\', \'U\', \'D\'.","solution":"def doesReturnToOrigin(moves): Determines if the object returns to its original position after executing the moves. Args: moves (str): A string containing characters \'L\', \'R\', \'U\', \'D\'. Returns: bool: True if the object returns to the origin, False otherwise. # Initialize position counters x, y = 0, 0 # Iterate through each move and update position counters for move in moves: if move == \'L\': x -= 1 elif move == \'R\': x += 1 elif move == \'U\': y += 1 elif move == \'D\': y -= 1 # Object returns to the origin if both x and y are 0 return x == 0 and y == 0"},{"question":"A company is planning its annual team-building event and has invited employees from various departments. Each department has a set number of employees, and the event organizers want to form groups such that each group has exactly one employee from each department. The company\'s management wants to know in how many different ways they can form these groups. You are given the number of employees in each department. Write a function `count_groups` that determines the number of ways to form groups with exactly one employee from each department. # Input - The input consists of a single integer `n` (2 ≤ n ≤ 20), which indicates the number of departments. - The next line contains `n` integers separated by space, where each integer `a_i` (1 ≤ a_i ≤ 100) represents the number of employees in the `i-th` department. # Output - The function should output a single integer, the number of ways to form groups with exactly one employee from each department. # Example Input ``` 3 2 3 4 ``` Output ``` 24 ``` # Explanation In the given example: - There are 2 employees in department 1, 3 employees in department 2, and 4 employees in department 3. - You can form groups by selecting one employee from each department. - The total number of ways to form such groups is 2 * 3 * 4 = 24. # Function Signature ```python def count_groups(n: int, employees: List[int]) -> int: pass ``` # Constraints - All department employee numbers are positive integers and between 1 and 100. - The number of departments ranges from 2 to 20.","solution":"from typing import List def count_groups(n: int, employees: List[int]) -> int: Count the number of ways to form groups with exactly one employee from each department. :param n: Number of departments. :param employees: List of integers representing number of employees in each department. :return: Number of ways to form the groups. # Initialize total ways to 1 (multiplicative identity) total_ways = 1 # Multiply the number of employees in each department for num in employees: total_ways *= num return total_ways"},{"question":"You are given a list of `heights` where `heights[i]` represents the height of a building at position `i`. Two people are located at the first and the last building respectively and want to meet at some building in between. They can move to the adjacent buildings only if the height of the next building is equal to or less than the current building. Return the minimum height they will encounter as they move towards each other. Example: Input: heights = [5, 3, 6, 4, 2, 4, 1, 2] Output: 2 Explanation: One person starts at position 0 with height 5 and moves: 5 -> 3 -> 2 The other person starts at position 7 with height 2 and moves: 2 Therefore, the minimum height both encounter on their path is 2. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minMeetingHeight()` which takes a list of `heights` and returns the minimum height at a meeting point. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraint: 1 <= n <= 1000 1 <= heights[i] <= 10^4","solution":"def minMeetingHeight(heights): Function to find the minimum height that two people will encounter as they move towards each other from the start and end of the height list. n = len(heights) # Initialize pointers for the two people left = 0 right = n - 1 # Initialize the minimum height encountered min_height = min(heights[left], heights[right]) # Move both pointers towards each other while left < right: if heights[left] < heights[right]: left += 1 min_height = min(min_height, heights[left]) else: right -= 1 min_height = min(min_height, heights[right]) return min_height"},{"question":"Given a rectangular grid with R rows and C columns, each cell either contains \'empty\' (represented by 0) or \'obstacle\' (represented by 1). You start from the top-left corner of the grid (0, 0) and aim to reach the bottom-right corner of the grid (R-1, C-1). From any cell, you can move right or down to an adjacent cell. Your task is to determine the length of the shortest path from the top-left corner to the bottom-right corner that does not pass through any obstacles. If no such path exists, return -1. -----Constraints----- - 2 ≤ R, C ≤ 1000 - 0 ≤ grid[i][j] ≤ 1 -----Input----- Input is given from Standard Input in the following format: R C grid_0_0 grid_0_1 ... grid_0_C-1 grid_1_0 grid_1_1 ... grid_1_C-1 ... grid_R-1_0 grid_R-1_1 ... grid_R-1_C-1 -----Output----- If there is no such path, print -1. Otherwise, print the length of the shortest path. -----Sample Input----- 5 5 0 0 0 0 1 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 1 0 -----Sample Output----- 8 -----Explanation----- - The shortest path from (0, 0) to (4, 4) avoids the obstacles: (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4). - The path length is 8. - If it were impossible to reach the bottom-right corner, for example with an input like: 2 2 0 1 1 0 - The output should be -1 as there is no valid path to traverse.","solution":"from collections import deque def shortest_path(R, C, grid): if grid[0][0] == 1 or grid[R-1][C-1] == 1: return -1 directions = [(1, 0), (0, 1)] # Down, Right queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: r, c, steps = queue.popleft() if r == R-1 and c == C-1: return steps for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return -1"},{"question":"You are given a string containing alphabetical characters and spaces. Your task is to transform the string by reversing the order of characters within each word, while ensuring the spaces between words remain the same. For example: ```` Input: \\"hello world\\" => Output: \\"olleh dlrow\\" Input: \\"code assessment\\" => Output: \\"edoc tnemssessa\\" Input: \\"reverse these words\\" => Output: \\"esrever eseht sdrow\\" Input: \\"a b c\\" => Output: \\"a b c\\" ```` Requirements: - A word is defined as a consecutive sequence of alphabetical characters. - Spaces should be preserved in their original positions. - The string will contain only alphabetical characters and spaces. - The length of the input string will be between 1 and 1000 characters. Your function should efficiently reverse each word in the input string while maintaining the original spacing pattern.","solution":"def reverse_words(s): Reverses the order of characters within each word in the given string s, while maintaining the spaces between words. Args: s (str): The input string containing alphabetical characters and spaces. Returns: str: The transformed string with each word\'s characters reversed. return \' \'.join(word[::-1] for word in s.split(\' \'))"},{"question":"Write a function to transform a given array of integers into a Wave Array. An array is said to be in a wave form if the elements at even indexes are greater than or equal to their neighboring elements (i.e., A[0] >= A[1] <= A[2] >= A[3] <= A[4]....). The objective is to convert an unsorted array into a wave array with minimum swaps. Example 1 Input: arr[] = {3, 6, 5, 10, 7, 20} Output: arr[] = {6, 3, 10, 5, 20, 7} Explanation: The transformed wave array is [6, 3, 10, 5, 20, 7]. Any other arrangement would result in more swaps to achieve the wave form. Example 2 Input: arr[] = {20, 10, 8, 6, 4, 2} Output: arr[] = {20, 8, 10, 4, 6, 2} Explanation: The transformed wave array is [20,8,10,4,6,2]. Your Task: You don\'t need to read input or print anything. The task is to complete the function convertToWave() which takes the array and its size as input parameters and modifies the array to form the wave like array. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6 0 <= arr[i] <= 10^6","solution":"def convert_to_wave(arr): Converts the given array to a wave array. An array is in a wave form if the elements at even indexes are greater than or equal to their neighboring elements. The function modifies the array in place. :param arr: List of integers. :return: None, modifies the input list in place. n = len(arr) for i in range(0, n-1, 2): # Swap arr[i] and arr[i+1] if they are in the wrong order if i+1 < n: arr[i], arr[i+1] = arr[i+1], arr[i] # Example usage: # arr = [3, 6, 5, 10, 7, 20] # convert_to_wave(arr) # print(arr) # Output: [6, 3, 10, 5, 20, 7]"},{"question":"A scientific research facility is performing experiments where they subject various microorganisms to specific environmental conditions. Each microorganism\'s growth pattern is tracked and recorded periodically. Your task is to analyze the growth pattern and determine if the microorganisms follow a specific trend. For simplicity, you are provided with the growth data of a single microorganism in the form of a list of integers, where each integer represents the microorganism\'s size at a particular time point. Determine if the microorganism exhibits a \\"stable growth\\" trend. A microorganism is said to have a \\"stable growth\\" if, over the entire period: 1. The size never decreases at any point. 2. The size increases by at most 1 unit at each time point. Write a function `isStableGrowth(growth)` which takes the list of integers `growth`, representing the size of the microorganism at each time point, and returns `True` if the microorganism exhibits a stable growth, otherwise `False`. Examples: 1. Input: growth = [1, 2, 2, 3, 4] Output: True Explanation: The size is non-decreasing and increases by at most 1 unit at each step. 2. Input: growth = [1, 2, 1, 3, 4] Output: False Explanation: The size decreases from 2 to 1 at the third position. 3. Input: growth = [1, 1, 1, 1, 1] Output: True Explanation: The size does not decrease and remains constant throughout. Constraints: - The length of the list `growth` will be between 1 and 10^5. - Each integer in the list `growth` will be between 0 and 10^5.","solution":"def isStableGrowth(growth): Determine if the microorganism exhibits a \\"stable growth\\" trend. Parameters: growth (list of int): A list of integers representing the size of the microorganism at each time point Returns: bool: True if the microorganism exhibits a stable growth, otherwise False for i in range(1, len(growth)): if growth[i] < growth[i - 1] or growth[i] > growth[i - 1] + 1: return False return True"},{"question":"----- STRING ANAGRAMS ----- Chef is a master in culinary arts and also loves playing with strings. One day, when he paused between his cooking sessions, he came across an interesting problem. Now it\'s your turn to solve it. You are given two strings, str1 and str2. Your task is to determine whether these two strings are anagrams of each other. Two strings are anagrams if they can be rearranged to form one another. -----Input Format----- The first line contains an integer T, the number of test cases. Each test case consists of two lines: 1. The first string str1 2. The second string str2 -----Output----- For each test case, print \\"Yes\\" if the strings are anagrams, otherwise print \\"No\\". -----Example Test Case----- Input: 3 listen silent triangle integral apple happy Output: Yes Yes No","solution":"def are_anagrams(str1, str2): Returns \'Yes\' if str1 and str2 are anagrams, \'No\' otherwise. return \\"Yes\\" if sorted(str1) == sorted(str2) else \\"No\\" def process_test_cases(input_data): Processes multiple test cases of the anagram problem. input_data should be a list of strings where the first item is the number of test cases, and each following pair of items are the strings to be checked. results = [] T = int(input_data[0]) for i in range(1, 2 * T, 2): str1 = input_data[i] str2 = input_data[i + 1] results.append(are_anagrams(str1, str2)) return results"},{"question":"A maze is represented as a 2D grid with \'0\'s representing an open path and \'1\'s representing walls. Starting from the cell (0, 0), you must find the minimum number of steps required to reach the bottom-right cell (N-1, M-1) using only vertical and horizontal movements. If there is no possible way to reach the bottom-right cell, output -1. Write a program to determine the minimum number of steps. # Constraints - The grid dimensions are N x M, where 1 ≤ N, M ≤ 50. - The grid will only contain \'0\'s and \'1\'s. # Input The input consists of: - An integer N representing the number of rows. - An integer M representing the number of columns. - N lines each containing M characters representing the maze grid. # Output Output the minimum number of steps required to reach the bottom-right cell. If there is no possible way, output -1. # Sample Input ``` 5 5 00000 01110 00010 01110 00000 ``` # Sample Output ``` 8 ``` # Explanation The minimum path to reach the bottom-right cell is: ``` (0,0) -> (0,1) -> (0,2) -> (0,3) -> (0,4) -> (1,4) -> (2,4) -> (3,4) -> (4,4) ``` Which totals 8 steps.","solution":"from collections import deque def min_steps_maze(N, M, maze): if maze[0][0] == \'1\' or maze[N-1][M-1] == \'1\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # East, South, West, North queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set() visited.add((0, 0)) while queue: row, col, steps = queue.popleft() if row == N-1 and col == M-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < M and (new_row, new_col) not in visited and maze[new_row][new_col] == \'0\': queue.append((new_row, new_col, steps + 1)) visited.add((new_row, new_col)) return -1"},{"question":"You are given an array of integers `arr` of length `n` (1 ≤ n ≤ 10^5). You need to perform a series of operations on this array to make all elements equal. In each operation, you can select any two different elements `arr[i]` and `arr[j]` from the array and increment the smaller element by 1 while decrementing the larger element by 1. What is the minimum number of operations required to make all elements equal? For example: * For the array [4, 1, 7], in one move, we can select elements 1 and 7, increment 1 by 1 to get 2, and decrement 7 by 1 to get 6. Therefore, the array becomes [4, 2, 6]. * For the array [4, 1, 7], in the second move, we can select elements 2 and 6, increment 2 by 1 to get 3, and decrement 6 by 1 to get 5. The array becomes [4, 3, 5]. * The process continues until all elements become equal. Input The first line contains an integer `t` (1 ≤ t ≤ 10^4) — the number of test cases. Each of the next `t` lines contains an integer `n` followed by `n` integers representing the array `arr`. Output For each test case, print a single integer — the minimum number of operations required to make all elements equal for the respective array. Examples Input 3 3 4 1 7 4 8 3 3 8 2 5 5 Output 4 3 0 Explanation In the first test case, the minimum number of operations required is 4: * [4, 1, 7] → [4, 2, 6] * [4, 2, 6] → [4, 3, 5] * [4, 3, 5] → [4, 4, 4] * [4, 4, 4] already has all elements equal In the second test case, the minimum number of operations required is 3: * [8, 3, 3, 8] → [7, 4, 3, 8] * [7, 4, 3, 8] → [6, 5, 3, 8] * [6, 5, 3, 8] → [6, 6, 4, 7] * [6, 6, 4, 7] → [6, 6, 5, 6] * [6, 6, 5, 6] → [6, 6, 6, 6]","solution":"def min_operations_to_equal_array(arr): Returns the minimum number of operations required to make all elements in the array equal. min_val = min(arr) max_val = max(arr) return (max_val - min_val) // 2 def min_operations_for_test_cases(test_cases): results = [] for case in test_cases: n, arr = case[0], case[1:] results.append(min_operations_to_equal_array(arr)) return results"},{"question":"Sara is working on a neural network project and is processing a huge number of images. To improve performance, she wants to compress the sizes of these images using a lossy compression algorithm. Each image is represented as a sequence of integers where each integer denotes the intensity value of a pixel. To achieve compression, she applies the following operations: • Operation 1 (Compress): Compress the intensity values between positions P and Q (inclusive) by setting each pixel\'s intensity in this range to the average intensity value of pixels in this range. • Operation 2 (Enhance): Enhance the contrast between positions P and Q (inclusive) by dividing each pixel\'s intensity in this range by a constant factor K. • Operation 3 (Query): Queries the system for the maximum intensity value in the entire image after the compression and enhancement operations have been applied. Sara needs your help to obtain the results of these operations. Input: The first line of input contains an integer M denoting the number of pixels in the image. The next line contains M space separated integers representing the intensity values of the pixels. The third line contains an integer L, the number of operations Sara wants to perform. Each of the next L lines contain four integers (for Operation 1 and 2) or two integers (for Operation 3) as defined below: • Operation 1: [1, P, Q] with 1 ≤ P ≤ Q ≤ M, which averages the pixel intensity values between positions P and Q. • Operation 2: [2, P, Q, K] with 1 ≤ P ≤ Q ≤ M and K > 0, which divides each pixel intensity value between positions P and Q by K. • Operation 3: [3], which queries the maximum intensity value in the image after applying all given operations. Output: For each Operation 3, output the maximum intensity value in the image based on the current state of the pixel values. Constraints: 1 ≤ M ≤ 100000 1 ≤ L ≤ 100000 0 ≤ Initial pixel intensity values ≤ 1000 1 ≤ Operation ≤ 3 SAMPLE INPUT 5 100 200 150 130 120 4 1 1 3 2 2 4 2 3 2 1 5 2 SAMPLE OUTPUT 100 Explanation: Initially, pixel intensity values are [100, 200, 150, 130, 120]. 1. After Operation 1: Compression from position 1 to 3, the average intensity is (100+200+150)/3 = 150. So the values become [150, 150, 150, 130, 120]. 2. After Operation 2: Enhancement from position 2 to 4 dividing by 2, the values become [150, 75, 75, 65, 120]. 3. Immediately after, Operation 3 queries the maximum intensity, which is 150. 4. After Operation 2: Enhancement from position 1 to 5 dividing by 2, the values become [75, 37, 37, 32, 60]. Hence, the maximum intensity value is derived as 100 for Operation 3.","solution":"def process_image_operations(m, pixels, operations): def compress(pixels, p, q): avg = sum(pixels[p-1:q]) // (q - p + 1) for i in range(p-1, q): pixels[i] = avg def enhance(pixels, p, q, k): for i in range(p-1, q): pixels[i] //= k results = [] for op in operations: if op[0] == 1: _, p, q = op compress(pixels, p, q) elif op[0] == 2: _, p, q, k = op enhance(pixels, p, q, k) elif op[0] == 3: results.append(max(pixels)) return results"},{"question":"A subsequence of a string is a new string generated from the original string with some characters (possibly none) deleted without changing the relative order of the remaining characters. Given a string S of length N and an integer K, your task is to find the number of substrings of S that have exactly K distinct characters. -----Input----- - The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K. - The second line of each test case contains the string S consisting of N lowercase English letters. -----Output----- For each test case, print a single line containing the number of substrings of S that have exactly K distinct characters. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10^4 - 1 leq K leq 26 -----Example Input----- 2 5 2 ababc 4 1 aaaa -----Example Output----- 7 10 -----Explanation----- Example case 1: The substrings of \'ababc\' with exactly 2 distinct characters are: [\'ab\', \'aba\', \'ab\', \'ba\', \'ab\', \'bc\', \'abc\'] which gives us 7 such substrings. Example case 2: All substrings of \'aaaa\' are composed of the same character \'a\'. Therefore, each substring qualifies and the count is frac{4 * (4 + 1)}{2} = 10.","solution":"def count_substrings_with_k_distinct_chars(S, K): from collections import defaultdict def at_most_k_distinct(s, k): count = defaultdict(int) left = result = 0 num_distinct = 0 for right in range(len(s)): if count[s[right]] == 0: num_distinct += 1 count[s[right]] += 1 while num_distinct > k: count[s[left]] -= 1 if count[s[left]] == 0: num_distinct -= 1 left += 1 result += right - left + 1 return result return at_most_k_distinct(S, K) - at_most_k_distinct(S, K - 1) def process_test_cases(test_cases): results = [] for case in test_cases: N, K, S = case result = count_substrings_with_k_distinct_chars(S, K) results.append(result) return results"},{"question":"In a secretive organization, agents communicate using encrypted messages. One of the common encryption techniques involves rotating the characters in a string circularly. Given a message and a number of rotations, the task is to decode the message by rotating it back to its original form. The string consists of lowercase letters only. Each test case contains a string and an integer. Subsequent rotations to the left of the string should be performed equal to the integer provided. For instance, if the string is \\"abcd\\" and the integer is 2, the decoded string would be \\"cdab\\". Input First line contains the number of test cases. For each test case, you have a string and an integer separated by a space. Output For each test case, output the decoded string on a new line. Constraints SubTask 1 - 70 Points 1 ≤ T ≤ 100 1 ≤ length(string) ≤ 10^3 0 ≤ integer ≤ 10^3 SubTask 2 - 30 Points T = 1 1 ≤ length(string) ≤ 100 0 ≤ integer ≤ 100 Example Input: 1 abcd 2 Output: cdab Explanation The string \\"abcd\\" rotated 2 times to the left results in \\"cdab\\".","solution":"def decode_message(message, rotations): Decodes the message by rotating it to the left by the given number of rotations. :param message: The encoded message string consisting of lowercase letters. :param rotations: The number of left rotations to decode the message. :return: The decoded message string. n = len(message) rotations %= n # To handle cases where rotations are greater than the length of the message return message[rotations:] + message[:rotations] def process_test_cases(test_cases): Processes a list of test cases and returns the decoded messages. :param test_cases: A list of tuples where each tuple contains a message string and an integer for rotations. :return: A list of decoded message strings. results = [] for message, rotations in test_cases: results.append(decode_message(message, rotations)) return results"},{"question":"You are given a list of integers `nums` and an integer `target`. The integers represent coin denominations, and the target is the amount of money you want to make. You aim to return the minimum number of coins needed to make the exact target amount. If the amount cannot be made with the given denominations, return -1. Note: - You can use an unlimited number of each coin denomination. - You may assume that there\'s always a solution if the target amount is 0. Example 1: Input: nums = [1, 2, 5], target = 11 Output: 3 Explanation: 11 can be made with 5+5+1. So, the minimum number of coins is 3. Example 2: Input: nums = [2], target = 3 Output: -1 Explanation: It is not possible to make 3 with only denomination 2. Example 3: Input: nums = [1], target = 0 Output: 0 Constraints: 1 <= nums.length <= 100 1 <= nums[i] <= 10,000 0 <= target <= 1,000,000","solution":"def coin_change(nums, target): Returns the minimum number of coins needed to make the exact target amount. If the amount cannot be made with the given denominations, returns -1. dp = [float(\'inf\')] * (target + 1) dp[0] = 0 for i in range(1, target + 1): for coin in nums: if i - coin >= 0: dp[i] = min(dp[i], dp[i - coin] + 1) return dp[target] if dp[target] != float(\'inf\') else -1"},{"question":"You are developing a fantasy-themed dungeon crawler game. As part of the game mechanics, each character can hold items that enhance their abilities. There are four types of items: Health Potion, Mana Potion, Strength Elixir, and Defense Elixir. Each character has a limited inventory that can hold a maximum of five items. The items have the following attributes and effects: - Health Potion (HP): Increases the character\'s health by 50 points. - Mana Potion (MP): Increases the character\'s mana by 30 points. - Strength Elixir (SE): Increases the character\'s strength by 10 points. - Defense Elixir (DE): Increases the character\'s defense by 15 points. Characters and items are represented as instances of their respective classes. You need to write a class `Character` which includes an inventory, methods to add and remove items, and a method to apply the effects of an item when it is used. Task You must write the class `Character` with the following methods: - `__init__`: Initialize with attributes: health, mana, strength, defense, and an empty inventory. - `add_item(item)`: Adds an item to the inventory if there is space (inventory capacity is 5). - `remove_item(item)`: Removes an item from the inventory if it exists. - `use_item(item)`: Applies the effect of the item and removes it from the inventory. You can assume that `item` will be a string representing one of HL, MP, SE, or DE. Your class should handle validation to ensure items are only added if there\'s space, and should raise an appropriate exception when operations fail, such as trying to add more than five items or using/removing an item that isn\'t in the inventory. Examples ```python # Example of a Character class instance being created and manipulated. char = Character(health=100, mana=40, strength=20, defense=30) char.add_item(\'HP\') char.add_item(\'SE\') char.use_item(\'HP\') # Health should now be 150 char.remove_item(\'SE\') # Function prototype: class Character ``` Test cases for validation: ```python char = Character(health=100, mana=40, strength=20, defense=30) char.add_item(\'HP\') char.add_item(\'MP\') char.add_item(\'SE\') char.add_item(\'DE\') char.add_item(\'HP\') char.add_item(\'MP\') # This should raise an exception since the inventory is full. char.use_item(\'HP\') # Health should now be 150 char.use_item(\'SE\') char.use_item(\'DE\') # Defense should now be 45 ```","solution":"class InventoryFullException(Exception): pass class ItemNotFoundException(Exception): pass class InvalidItemException(Exception): pass class Character: def __init__(self, health=100, mana=40, strength=20, defense=30): self.health = health self.mana = mana self.strength = strength self.defense = defense self.inventory = [] self.inventory_capacity = 5 def add_item(self, item): if item not in [\'HP\', \'MP\', \'SE\', \'DE\']: raise InvalidItemException(f\\"{item} is not a valid item.\\") if len(self.inventory) >= self.inventory_capacity: raise InventoryFullException(\\"Inventory is full. Cannot add more items.\\") self.inventory.append(item) def remove_item(self, item): if item not in self.inventory: raise ItemNotFoundException(f\\"{item} not found in inventory.\\") self.inventory.remove(item) def use_item(self, item): if item not in self.inventory: raise ItemNotFoundException(f\\"{item} not found in inventory.\\") if item == \'HP\': self.health += 50 elif item == \'MP\': self.mana += 30 elif item == \'SE\': self.strength += 10 elif item == \'DE\': self.defense += 15 self.inventory.remove(item)"},{"question":"Given a list of integers representing the sequence of temperatures recorded over N days, determine if the sequence of temperatures is strictly increasing, strictly decreasing, or neither. Print \\"INCREASING\\" if the sequence is strictly increasing, \\"DECREASING\\" if it is strictly decreasing, and \\"NEITHER\\" otherwise. Input and Output: The first line contains an integer T, the number of test cases. Each test case consists of a single line containing N, the number of days, followed by a line with N integers representing the temperatures recorded over these N days. For each test case, print \\"INCREASING\\", \\"DECREASING\\", or \\"NEITHER\\". Constraints: 1 ≤ T ≤ 50 2 ≤ N ≤ 1000 -1000 ≤ Temperature ≤ 1000 SAMPLE INPUT 3 5 1 2 3 4 5 4 5 4 3 2 6 1 2 3 2 1 0 SAMPLE OUTPUT INCREASING DECREASING NEITHER","solution":"def temperature_trend(temperatures): Returns \\"INCREASING\\", \\"DECREASING\\" or \\"NEITHER\\" based on the sequence of temperatures. increasing = all(temperatures[i] < temperatures[i + 1] for i in range(len(temperatures) - 1)) decreasing = all(temperatures[i] > temperatures[i + 1] for i in range(len(temperatures) - 1)) if increasing: return \\"INCREASING\\" elif decreasing: return \\"DECREASING\\" else: return \\"NEITHER\\" def process_test_cases(test_cases): results = [] for tc in test_cases: n, temperatures = tc result = temperature_trend(temperatures) results.append(result) return results"},{"question":"Given a list of words, write a program that will determine the word with the highest score. The score of a word is defined as the sum of the positions of its letters in the alphabet (i.e., a = 1, b = 2, ..., z = 26). For example, the score of the word \\"abc\\" is 1 + 2 + 3 = 6. If two words have the same score, the word that appears first in the input list should be returned. Input Format A single line containing a space-separated list of words. All words are composed of lowercase English letters. Constraints 1 ≤ number of words in the list ≤ 100 1 ≤ length of each word ≤ 100 Output Format A single line which contains the word with the highest score. SAMPLE INPUT cat dog zebra SAMPLE OUTPUT zebra Explanation The scores are: \\"cat\\": 3 + 1 + 20 = 24 \\"dog\\": 4 + 15 + 7 = 26 \\"zebra\\": 26 + 5 + 2 + 18 + 1 = 52 Therefore, \\"zebra\\" has the highest score.","solution":"def calculate_word_score(word): Calculate the score of a word based on the sum of positions of its letters in the alphabet. score = sum(ord(letter) - ord(\'a\') + 1 for letter in word) return score def highest_scoring_word(words): Given a list of words, return the word with the highest score. highest_score = 0 highest_word = words[0] for word in words: score = calculate_word_score(word) if score > highest_score: highest_score = score highest_word = word return highest_word # Example usage input_words = \\"cat dog zebra\\".split() print(highest_scoring_word(input_words)) # Output: zebra"},{"question":"You are given a city map represented by a grid where some cells may have obstacles, and others are walkable paths. Each cell can be represented as either `0` (walkable) or `1` (obstacle). A person needs to travel from the top-left corner of the grid to the bottom-right corner. They can only move either down or right in a single step. Your task is to write a program to determine the number of unique paths from the top-left to the bottom-right corner that avoid all obstacles. Input The input contains multiple lines. The first line contains two integers, `N` and `M` (1 ≤ N, M ≤ 100), representing the number of rows and columns in the grid. The next `N` lines each contain `M` integers (either `0` or `1`), representing the grid. Output Output a single integer, the number of unique paths from the top-left to the bottom-right corner while avoiding obstacles. Example Input 3 3 0 0 0 0 1 0 0 0 0 Output 2","solution":"def unique_paths_with_obstacles(grid): Given a grid containing obstacles (1) and walkable paths (0), determines the number of unique paths from the top-left corner to the bottom-right corner. :param grid: List of List of integers, 0s represent walkable paths, 1s represent obstacles. :return: Integer, number of unique paths. N = len(grid) M = len(grid[0]) # If the start or the end is an obstacle, return 0 if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 dp = [[0] * M for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"Write a function `merge_sorted_lists` that takes two sorted lists of integers, `list1` and `list2`, and returns a new list that merges the two input lists into a single sorted list. The function should handle cases where one or both input lists are empty. ```python def merge_sorted_lists(list1, list2): # Your code here # Example Usage: # merge_sorted_lists([1, 3, 5], [2, 4, 6]) # >>> [1, 2, 3, 4, 5, 6] # merge_sorted_lists([1, 2, 3], []) # >>> [1, 2, 3] # merge_sorted_lists([], [4, 5, 6]) # >>> [4, 5, 6] # merge_sorted_lists([], []) # >>> [] # merge_sorted_lists([1, 4, 5], [2, 3, 6]) # >>> [1, 2, 3, 4, 5, 6] ``` Consider edge cases and ensure that your implementation performs efficiently even for large input lists.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into a single sorted list. Parameters: list1 (List[int]): First sorted list. list2 (List[int]): Second sorted list. Returns: List[int]: Merged sorted list. merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Append remaining elements from list1 or list2 merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"question":"Given a city represented as a grid with buildings and vacant lots, you need to determine the largest rectangular area that can be developed into a park. The city is represented by a 2D binary matrix where \'1\' represents a building and \'0\' represents a vacant lot. Your task is to find the maximum area of a rectangle made up entirely of vacant lots (\'0\'). Input The first line contains two integers m and n (1 ≤ m, n ≤ 200) — the dimensions of the city grid. The next m lines contain n characters each, either \'0\' or \'1\', representing the city grid. Output Output a single integer denoting the largest rectangular area that can be developed into a park, made up entirely of \'0\'s. Examples Input 4 5 1 0 1 0 0 1 0 1 1 1 1 0 1 1 1 1 0 0 0 1 Output 4 Input 2 2 0 1 1 0 Output 1 Note In the first example, the largest rectangle of vacant lots is: ``` 0 0 0 0 ``` with an area of 4.","solution":"def maximalRectangle(matrix): if not matrix: return 0 m, n = len(matrix), len(matrix[0]) heights = [0] * n max_area = 0 for i in range(m): for j in range(n): if matrix[i][j] == \'0\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [] max_area = 0 heights.append(0) for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) heights.pop() return max_area"},{"question":"You are given a grid with N rows and M columns. Each cell in the grid can either be empty (denoted by \'.\') or contain an obstacle (denoted by \'#\'). Initially, you are located at the top-left corner of the grid. Your goal is to reach the bottom-right corner of the grid. You can move up, down, left, or right, but you cannot move into a cell with an obstacle, and you cannot leave the bounds of the grid. Determine whether it is possible to reach the bottom-right corner from the top-left corner. Input The first line contains T, the number of test cases. Each test case starts with two integers, N and M, denoting the number of rows and columns in the grid, respectively. The next N lines contain M characters each (either \'.\' or \'#\') representing the grid. Output For each test case, output \\"YES\\" if it is possible to reach the bottom-right corner from the top-left corner, otherwise output \\"NO\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 SAMPLE INPUT 2 3 3 . . . . # . . . . 3 3 . # . # # . . . . SAMPLE OUTPUT YES NO Explanation For the first test case, you can reach the bottom-right corner by moving down, down, right, right. For the second test case, you are blocked by obstacles and cannot reach the bottom-right corner.","solution":"def can_reach_end(grid, n, m): Determines if it is possible to reach the bottom-right corner of the grid from the top-left corner. from collections import deque if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"NO\\" queue = deque([(0, 0)]) # Start from the top-left corner visited = set() visited.add((0, 0)) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right while queue: x, y = queue.popleft() if (x, y) == (n-1, m-1): # If reached bottom-right corner return \\"YES\\" for direction in directions: nx, ny = x + direction[0], y + direction[1] if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" def solve(test_cases): results = [] for i in range(test_cases): n, m = map(int, input().split()) grid = [input().strip().split() for _ in range(n)] results.append(can_reach_end(grid, n, m)) return results"},{"question":"A company organizes events for various clients. Each event consists of multiple activities. The company wants to determine the maximum number of non-overlapping activities they can schedule for a given event. Each activity has a start and an end time, and two activities overlap if one starts before the other finishes. The goal is to find the largest subset of non-overlapping activities. Write a program that, given the start and end times of activities, determines the maximum number of non-overlapping activities. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of activities. Each of the next n lines contains two integers s_i and e_i (0 ≤ s_i < e_i ≤ 10^9) — the start and end times of the i-th activity. -----Output----- Print a single integer representing the maximum number of non-overlapping activities. -----Examples----- Input 3 1 2 2 3 3 4 Output 3 Input 4 1 3 2 4 3 5 1 2 Output 2 -----Note----- In the first example, all activities are non-overlapping, so the answer is 3. In the second example, one possible set of non-overlapping activities is (1, 2) and (3, 5), so the answer is 2.","solution":"def max_non_overlapping_activities(n, activities): Returns the maximum number of non-overlapping activities. :param n: int, the number of activities. :param activities: list of tuples, each tuple containing the start and end times of an activity. :return: int, the maximum number of non-overlapping activities. # Sort activities based on their end times activities.sort(key=lambda x: x[1]) # Initialize count of non-overlapping activities count = 0 last_end_time = 0 # Traverse through sorted activities for start, end in activities: if start >= last_end_time: # If the current activity starts after or when the last one ends count += 1 last_end_time = end return count # Usage Example: # n = 3 # activities = [(1, 2), (2, 3), (3, 4)] # print(max_non_overlapping_activities(n, activities)) # Output: 3"},{"question":"A large online retailer has a network of fulfillment centers (warehouses) across the country. Each fulfillment center can be connected to another by a bidirectional expressway. The retailer wants to determine the most efficient way to ship an order from one fulfillment center to another. Given the distances between pairs of fulfillment centers, your task is to write a program that helps the retailer find the shortest travel time between two specified fulfillment centers. The fulfillment centers and expressways form a connected network, meaning there\'s always a path between any two centers in the network. Write a program that inputs the number of fulfillment centers, information on each expressway, and finds the shortest travel time between the given two fulfillment centers. Input: - The first line contains an integer `N` (2 ≤ N ≤ 100), the number of fulfillment centers. - The next `N-1` lines describe the expressways. Each line contains three integers `a`, `b`, and `w` (1 ≤ w ≤ 1000), meaning there is an expressway between fulfillment centers `a` and `b` with a travel time of `w`. - The last line contains two integers `s` and `d`, representing the starting fulfillment center and the destination fulfillment center. Output: - Print the shortest travel time between fulfillment centers `s` and `d`. Example: Input: 5 1 2 10 1 3 30 2 4 40 3 4 20 4 5 10 1 5 Output: 60","solution":"import heapq def shortest_travel_time(N, expressways, s, d): graph = {i: [] for i in range(1, N+1)} for a, b, w in expressways: graph[a].append((b, w)) graph[b].append((a, w)) def dijkstra(start, end): min_heap = [(0, start)] visited = set() distances = {i: float(\'inf\') for i in range(1, N+1)} distances[start] = 0 while min_heap: current_distance, current_node = heapq.heappop(min_heap) if current_node in visited: continue visited.add(current_node) if current_node == end: return current_distance for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(min_heap, (distance, neighbor)) return distances[end] return dijkstra(s, d)"},{"question":"Given an array of integers, you are to determine whether you can partition the array into two non-empty subsets such that the difference between the sum of elements in the two subsets is minimized. Write a function named `min_partition_difference` that takes an array of integers and returns the minimum possible difference between the sums of the two subsets. # Input - The input contains a single line with space-separated integers representing the array elements. - The array length will be between 1 and 100. - Each array element is a positive integer and will not exceed 1000. # Output - Output a single integer, the minimum difference between the sum of the two subsets. # Examples Example 1 **Input:** ``` 1 6 11 5 ``` **Output:** ``` 1 ``` **Explanation:** The array can be partitioned as {1, 6, 5} and {11}, giving sums 12 and 11, and the difference is 1. Example 2 **Input:** ``` 1 2 3 9 ``` **Output:** ``` 3 ``` **Explanation:** The array can be partitioned as {1, 2, 3} and {9}, giving sums 6 and 9, and the difference is 3. # Notes Consider using a dynamic programming approach or a recursive solution with memoization to handle the partitioning and calculating the minimum difference effectively.","solution":"def min_partition_difference(arr): Returns the minimum possible difference between the sums of two subsets of the array. total_sum = sum(arr) n = len(arr) # DP array to keep track of possible sums dp = [[False for _ in range(total_sum // 2 + 1)] for _ in range(n + 1)] # Initialize dp for i in range(n + 1): dp[i][0] = True # Build the dp array for i in range(1, n + 1): for j in range(1, total_sum // 2 + 1): if arr[i - 1] <= j: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] else: dp[i][j] = dp[i - 1][j] # Find the maximum value for which dp[n][j] is true for j in range(total_sum // 2, -1, -1): if dp[n][j]: subset1_sum = j break subset2_sum = total_sum - subset1_sum return abs(subset2_sum - subset1_sum)"},{"question":"Daniel loves to play with numbers and recently he learned about number splitting. A number splitting involves breaking a number into non-zero parts such that the sum of these parts equal the original number. Daniel is now interested in finding a split that would maximize the product of these parts. For example, the number 8 can be split into [2, 2, 2, 2] whose product is 16, or into [3, 3, 2] whose product is 18 which is higher. Daniel needs your help to find the maximum product for a given number. ------ Input ------ The first line of input contains an integer T denoting the number of test cases. Each of the following T lines contains a single integer N. ------ Output ------ For each test case, output a single integer which is the maximum product of the splits of the number N. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 10^6 ------ Sample Input 1 ------ 3 2 10 15 ------ Sample Output 1 ------ 1 36 243 ------ Explanation 1 ------ Example case 1. The number 2 can only be split into [1, 1] and their product is 1. Example case 2. The number 10 can be split into [3, 3, 4] whose product is 3 * 3 * 4 = 36. Example case 3. The number 15 can be split into [3, 3, 3, 3, 3] whose product is 3^5 = 243.","solution":"def max_split_product(n): Returns the maximum product of the non-zero parts that sum to the number n. if n == 2 or n == 3: return n - 1 product = 1 while n > 4: n -= 3 product *= 3 return product * n def process_test_cases(test_cases): results = [] for n in test_cases: results.append(max_split_product(n)) return results"},{"question":"You are given a string `s` consisting of lowercase letters and containing at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\'). Your task is to find and print the first vowel that appears in the string `s`. -----Constraints----- - The length of `s` is between 1 and 100, inclusive. - The string `s` contains at least one vowel. -----Input----- The input is given from Standard Input in the following format: s -----Output----- Print the first vowel that appears in the string `s`. -----Sample Input----- hello -----Sample Output----- e Another example: -----Sample Input----- rhythm -----Sample Output----- y","solution":"def first_vowel(s): This function returns the first vowel that appears in the string s. vowels = \'aeiou\' for char in s: if char in vowels: return char return None # Example usage: # print(first_vowel(\\"hello\\")) # Output: \'e\'"},{"question":"You are given a sequence of n integers b1, b2, ..., bn. Determine an integer y such that the adjusted sequence b1 - y, b2 - y, ..., bn - y contains the maximum possible number of zero elements. Input The first line contains one integer n (1 ≤ n ≤ 200 000), the length of the sequence. The second line contains n integers b1, b2, ..., bn (|bi| ≤ 10 000). Output Output an integer y that maximizes the number of zeros in the adjusted sequence b1 - y, b2 - y, ..., bn - y. If there are multiple such y, output any one of them. Examples Input 5 1 2 3 4 5 Output 3 Input 6 5 3 8 -1 4 5 Output 5 Input 3 -2 -2 -2 Output -2 Note For the first case, choosing y = 3 adjusts the sequence to be -2, -1, 0, 1, 2 where there is one zero. No other integer value for y will produce more than one zero in the sequence, so y = 3 is correct. For the second case, choosing y = 5 adjusts the sequence to 0, -2, 3, -6, -1, 0, resulting in two zeros, which is the maximum possible number of zeros for any y. For the third case, choosing y = -2 adjusts the sequence to 0, 0, 0. Any other integer value for y will result in fewer zeros, so y = -2 is correct.","solution":"from collections import Counter def find_optimal_y(n, sequence): counter = Counter(sequence) most_common_element, _ = counter.most_common(1)[0] return most_common_element"},{"question":"Write a function `merge_and_sort` that takes two sorted arrays as input and returns a single array that contains all the elements from both input arrays in sorted order. # Function Signature ```python def merge_and_sort(arr1: List[int], arr2: List[int]) -> List[int]: ``` # Input - `arr1`: A sorted list of integers. - `arr2`: A sorted list of integers. # Output - Returns a single list containing all elements from both `arr1` and `arr2` in sorted order. # Examples ```python assert merge_and_sort([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6] assert merge_and_sort([10, 20, 30], [15, 25, 35]) == [10, 15, 20, 25, 30, 35] assert merge_and_sort([1, 2, 2], [2, 3, 4]) == [1, 2, 2, 2, 3, 4] ``` # Constraints - The length of each input array does not exceed 10^5. - Each of the integers in the input arrays are in the range `-10^8` to `10^8`.","solution":"from typing import List def merge_and_sort(arr1: List[int], arr2: List[int]) -> List[int]: Merges two sorted lists into a single sorted list. merged = [] i, j = 0, 0 # Merge the arrays while both have elements while i < len(arr1) and j < len(arr2): if arr1[i] <= arr2[j]: merged.append(arr1[i]) i += 1 else: merged.append(arr2[j]) j += 1 # If there are remaining elements in arr1 while i < len(arr1): merged.append(arr1[i]) i += 1 # If there are remaining elements in arr2 while j < len(arr2): merged.append(arr2[j]) j += 1 return merged"},{"question":"In a software system, a new feature requires implementing a data structure capable of supporting dynamic query execution and modification. Specifically, the system needs to handle a sequence of integers and support three types of operations: 1. Update the value at a specified index. 2. Find the maximum value in a specified subarray. 3. Count the occurrence of a given integer in a specified subarray. Given an initial array, design a data structure that supports these operations efficiently. -----Input----- - The first line of the input contains two space-separated integers N and Q, representing the number of elements in the initial array and the number of queries, respectively. - The second line contains N space-separated integers representing the initial array. - The next Q lines describe the queries, each in one of the following formats: - `1 X Y`, which means update the element at index X (1-based index) to value Y. - `2 L R`, which means find the maximum value in the subarray from index L to index R (inclusive, 1-based index). - `3 L R Z`, which means count the occurrences of the integer Z in the subarray from index L to index R (inclusive, 1-based index). -----Output----- For each query of the second and third types, output the answer on a new line. -----Constraints----- - 1 le N, Q le 10^5 - 1 le X, L le R le N - 1 le Y, Z le 10^9 - The initial array values are between 1 and 10^9. -----Example Input----- 5 6 3 1 4 1 5 2 1 5 1 3 10 2 2 4 3 1 5 1 3 1 5 3 2 1 3 -----Example Output----- 5 10 2 1 10 -----Explanation----- 1. Initial array: [3, 1, 4, 1, 5] 2. Maximum value in the entire array: 5 3. Update the 3rd element to 10: [3, 1, 10, 1, 5] 4. Maximum value in subarray [2, 4]: 10 5. Count of 1 in subarray [1, 5]: 2 6. Count of 3 in subarray [1, 5]: 1 7. Maximum value in subarray [1, 3]: 10","solution":"class DynamicArray: def __init__(self, initial_array): self.array = initial_array def update(self, index, value): self.array[index - 1] = value def find_max(self, L, R): return max(self.array[L - 1:R]) def count_occurrences(self, L, R, Z): return self.array[L - 1:R].count(Z) def process_queries(N, Q, initial_array, queries): dynamic_array = DynamicArray(initial_array) results = [] for query in queries: if query[0] == 1: _, X, Y = query dynamic_array.update(X, Y) elif query[0] == 2: _, L, R = query results.append(dynamic_array.find_max(L, R)) elif query[0] == 3: _, L, R, Z = query results.append(dynamic_array.count_occurrences(L, R, Z)) return results"},{"question":"A delivery company uses drones to deliver packages. Each drone has a maximum weight capacity, beyond which it cannot carry any more packages. The company\'s goal is to maximize the total weight of the packages delivered in a single trip without exceeding any drone\'s capacity. The drones and packages are located at the company’s headquarters. Your task is to write a program to identify the maximum weight of packages that can be delivered efficiently given the constraints. -----Input----- The input consists of three lines: - The first line contains an integer m (1 le m le 1000), the number of drones. - The second line contains m integers, where the i-th integer w_i (1 le w_i le 1000) represents the maximum weight capacity of the i-th drone. - The third line contains an integer n (1 le n le 1000), the number of packages to be delivered. - The fourth line contains n integers, where the j-th integer p_j (1 le p_j le 100) represents the weight of the j-th package. -----Output----- Output a single integer, the maximum combined weight of the packages that can be delivered without exceeding the weight capacity of any drone. -----Examples----- Sample Input 1: 3 10 20 15 4 5 8 6 5 Sample Output 1: 24 Sample Input 2: 2 10 10 5 3 7 8 2 5 Sample Output 2: 20","solution":"def maximize_delivery_weight(m, capacities, n, packages): capacities.sort(reverse=True) packages.sort(reverse=True) total_weight = 0 for capacity in capacities: current_weight = 0 for idx, package in enumerate(packages): if current_weight + package <= capacity: current_weight += package packages[idx] = -1 # Mark the package as used packages = [pkg for pkg in packages if pkg != -1] # Filter out used packages total_weight += current_weight return total_weight"},{"question":"# Task A teacher has a list of student scores from a recent exam. She needs to find out the average score of the top `k` students in the class. Your task is to write a function that calculates this average. Given an array of student scores and an integer `k`, find the average score of the top `k` students. If `k` is greater than the number of students, return the average of all student scores. # Example For `scores = [70, 80, 90, 100, 85]` and `k = 3`, the output should be `91.67`. The top 3 scores are `100`, `90`, and `85`, so the average is `(100 + 90 + 85) / 3 = 91.67`. # Input/Output - `[input]` integer array `scores` Constraints: `1 ≤ scores.length ≤ 100, 0 ≤ scores[i] ≤ 100` - `[input]` integer `k` Constraints: `1 ≤ k ≤ 100` - `[output]` a float representing the average score of the top `k` students, rounded to two decimal places.","solution":"def average_of_top_k(scores, k): Returns the average score of the top k students. If k is greater than the number of students, return the average of all scores. # Sort the scores in descending order sorted_scores = sorted(scores, reverse=True) # Get the top k scores top_k_scores = sorted_scores[:k] # Calculate the average of the top k scores average = sum(top_k_scores) / len(top_k_scores) # Round to two decimal places return round(average, 2)"},{"question":"Create a function that takes a string containing an arithmetic expression and evaluates it according to the following rules: 1. The expression will contain non-negative integers, and the operators `+`, `-`, `*`, `/`. 2. The expression can contain parentheses `()` which will follow the usual precedence rules. 3. Division should be integer division, i.e., result should be floored. The function should return the result of the evaluated expression as an integer. Examples: ``` eval_expr(\\"3+2*2\\") -> 7 eval_expr(\\"(1+(4+5+2)-3)+(6+8)\\") -> 23 eval_expr(\\"14-3/2\\") -> 13 ``` Note: - The input string is guaranteed to be a valid arithmetic expression.","solution":"def eval_expr(expr): def evaluate(tokens): stack = [] num = 0 sign = \\"+\\" while tokens: token = tokens.pop(0) if token.isdigit(): num = num * 10 + int(token) if token == \\"(\\": num = evaluate(tokens) if (not token.isdigit() and token != \\" \\") or not tokens: if sign == \\"+\\": stack.append(num) elif sign == \\"-\\": stack.append(-num) elif sign == \\"*\\": stack[-1] = stack[-1] * num elif sign == \\"/\\": stack[-1] = int(stack[-1] / num) sign = token num = 0 if token == \\")\\": break return sum(stack) return evaluate(list(expr))"},{"question":"An antique collector is organizing his collection of rare coins. He wants to display the coins in a sequence such that each coin is more valuable than the previous one. However, there are specific pairs of coins that must not be placed adjacent to each other due to their historical significance. You need to determine if it\'s possible to arrange the coins in the desired sequence while respecting the adjacency constraints. -----Input----- The first line contains two integers n and m, where n is the number of coins and m is the number of restriction pairs. The second line contains n integers indicating the values of the coins. Each of the next m lines contains two integers a and b, indicating that coin a (1-based index) must not be placed adjacent to coin b. You may assume n leq 1000 and m leq 2000. -----Output----- Print \\"POSSIBLE\\" if it is possible to arrange the coins in increasing order of value while satisfying all adjacency constraints. Otherwise, print \\"IMPOSSIBLE\\". -----Examples----- Sample Input 1: 4 2 1 3 2 4 1 2 3 4 Sample Output 1: POSSIBLE Sample Input 2: 4 2 1 2 3 4 1 2 2 3 Sample Output 2: IMPOSSIBLE","solution":"def can_arrange_coins(n, m, values, restrictions): Returns \\"POSSIBLE\\" if it is possible to arrange the coins in increasing order of value while satisfying all adjacency constraints. Otherwise, returns \\"IMPOSSIBLE\\". # Sort the coins by their values indexed_values = sorted((val, idx + 1) for idx, val in enumerate(values)) # Construct the adjacency restriction set restriction_set = set((min(a, b), max(a, b)) for a, b in restrictions) # Check if the sorted coins arrangement satisfies the adjacency restrictions for i in range(1, n): c1 = indexed_values[i-1][1] c2 = indexed_values[i][1] if (min(c1, c2), max(c1, c2)) in restriction_set: return \\"IMPOSSIBLE\\" return \\"POSSIBLE\\""},{"question":"You are given a list of students\' names and their respective scores in a competitive programming competition. Your task is to identify the highest scorer, the lowest scorer, and the median score. Additionally, you need to determine if any students have tied with the highest or lowest score and list their names. You must also count and list the number of students who scored above and below the median. INPUT The first line contains an integer T, the number of test cases. For each test case, the first line contains an integer N, the number of students. The following N lines contain a string (the student’s name) and an integer (the student’s score), separated by a space. OUTPUT For each test case: - On the first line, print the name(s) of the highest scorer(s). If there are multiple highest scorers, print their names separated by a comma. - On the second line, print the name(s) of the lowest scorer(s). If there are multiple lowest scorers, print their names separated by a comma. - On the third line, print the median score rounded to the nearest integer. - On the fourth line, print the number of students who scored above the median. - On the fifth line, print the number of students who scored below the median. Constraints 1 <= T <= 50 1 <= N <= 100 0 <= Score <= 100 Example Input 1 5 Alice 78 Bob 92 Charlie 89 David 92 Eve 78 Output Bob,David Alice,Eve 89 2 2","solution":"def competition_results(test_cases): Given multiple test cases each containing a list of students and their scores, returns the highest scorer(s), lowest scorer(s), median score, the number of students scoring above and below the median. results = [] for case in test_cases: students = case scores = [s[1] for s in students] names_scores = {s[0]: s[1] for s in students} # Identify highest and lowest scorers max_score = max(scores) min_score = min(scores) highest_scorers = [name for name, score in names_scores.items() if score == max_score] lowest_scorers = [name for name, score in names_scores.items() if score == min_score] highest_scorers_str = \\",\\".join(highest_scorers) lowest_scorers_str = \\",\\".join(lowest_scorers) # Calculate the median score scores.sort() n = len(scores) mid = n // 2 if n % 2 == 0: median_score = round((scores[mid - 1] + scores[mid]) / 2) else: median_score = scores[mid] # Count scores above and below median above_median = len([score for score in scores if score > median_score]) below_median = len([score for score in scores if score < median_score]) results.append((highest_scorers_str, lowest_scorers_str, median_score, above_median, below_median)) return results"},{"question":"Given a binary tree, determine if the tree is a mirror of itself (i.e., symmetric around its center). # Input Format - A single line containing a list of integers representing the values of nodes in the binary tree in level-order traversal. Use `null` to represent null nodes in the tree. For example: `[1,2,2,3,4,4,3]`. # Output Format - A single line output containing the string `true` if the binary tree is symmetric, and `false` otherwise. # Constraints - The number of nodes in the tree can be at most 10^4. - The node values are numbers in the range -10000 ≤ node.val ≤ 10000. # Sample Input 1 ``` [1,2,2,3,4,4,3] ``` # Sample Output 1 ``` true ``` # Sample Input 2 ``` [1,2,2,null,3,null,3] ``` # Sample Output 2 ``` false ``` # Explanation 1 - The tree is symmetric as follows: ``` 1 / 2 2 / / 3 4 4 3 ``` - It is a mirror image of itself around the center. # Explanation 2 - The tree is not symmetric as follows: ``` 1 / 2 2 3 3 ``` - The right subtree is not a mirror image of the left subtree. # Notes - Assume that the input is always a valid binary tree in level-order traversal representation. If the level-order input is `[1,2,2,null,3,null,3]`, the tree structure correctly depicts the null nodes as children of the parent nodes respectively.","solution":"# Define TreeNode class to create a binary tree node. class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def isSymmetric(root): Determines whether the binary tree with the given root is symmetric. def isMirror(t1, t2): if not t1 and not t2: return True if not t1 or not t2: return False return (t1.val == t2.val) and isMirror(t1.left, t2.right) and isMirror(t1.right, t2.left) return isMirror(root, root) def build_tree_from_level_order(values): Constructs a binary tree from a list of values given in level order. if not values: return None from collections import deque root = TreeNode(values[0]) node_queue = deque([root]) i = 1 while i < len(values): current = node_queue.popleft() if values[i] is not None: current.left = TreeNode(values[i]) node_queue.append(current.left) i += 1 if i < len(values) and values[i] is not None: current.right = TreeNode(values[i]) node_queue.append(current.right) i += 1 return root def is_symmetric_tree(level_order_values): Given a binary tree in level-order traversal, determine if the tree is symmetric. root = build_tree_from_level_order(level_order_values) return \\"true\\" if isSymmetric(root) else \\"false\\""},{"question":"In a particular country, there is a sequence of N cities lined up from west to east. Each city i has a pollution level P_i. You can perform the following operation any number of times (possibly zero): 1) Choose an index i (1 ≤ i ≤ N - 1). 2) Set P_i := leftlfloor frac{P_i + 2*P_{i+1}}{3} rightrfloor and P_{i+1} := leftlfloor frac{P_{i+1} + 2*P_i}{3} rightrfloor. Here, leftlfloor x rightrfloor denotes the floor function, which rounds down x to the nearest integer. Determine if it is possible to make the pollution levels of all cities the same by applying the above operation any number of times (possibly zero). ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer N — the number of cities. - The second line of each test case contains N space-separated integers P_1, P_2, ldots, P_N denoting the pollution levels of the cities. ------ Output Format ------ For each test case, output YES if it is possible to make the pollution levels of all cities equal by applying the given operation any number of times. Otherwise, output NO. You may print each character of YES and NO in uppercase or lowercase (for example, yes, yEs, Yes will be considered identical). ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 0 ≤ P_i < 10^9 - The sum of N over all test cases won\'t exceed 2 cdot 10^5. ----- Sample Input 1 ------ 3 4 6 12 6 18 5 3 3 3 3 3 3 1 2 3 ----- Sample Output 1 ------ NO YES NO ----- Explanation 1 ------ Test Case 1: It can be proved that we cannot make the pollution levels of all cities equal by applying the given operation. Test Case 2: The pollution levels of all cities are already equal initially. Test Case 3: It can be proved that we cannot make the pollution levels of all cities equal by applying the given operation.","solution":"def can_equalize_pollution_levels(T, cases): results = [] def all_values_equal(arr): return len(set(arr)) == 1 for case in cases: N, P = case if all_values_equal(P): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Create a function that takes a string composed of only lowercase letters and returns True if the string is a palindrome, and False otherwise. A palindrome is a word that reads the same forwards and backwards. However, for this task, you need to ignore any repeating consecutive characters before checking if the word is a palindrome. For example: `\\"aaabbaaa\\" -> True` (becomes \\"aba\\" which is a palindrome) `\\"abcddcba\\" -> True` (becomes \\"abcdcba\\" which is a palindrome) `\\"abc\\" -> False` (becomes \\"abc\\" which is not a palindrome) Write a function that processes the input string and returns the appropriate boolean value.","solution":"def is_palindrome(s): Processes the input string and returns True if the processed string is a palindrome, and False otherwise. Consecutive repeating characters are removed before checking. :param s: Input string composed of only lowercase letters :return: Boolean indicating whether the processed string is a palindrome # Remove consecutive repeating characters processed_chars = [] for char in s: if not processed_chars or char != processed_chars[-1]: processed_chars.append(char) # Join to form the processed string processed_string = \'\'.join(processed_chars) # Check if the processed string is a palindrome return processed_string == processed_string[::-1]"},{"question":"Create a function that takes an array of non-negative integers and returns a new array where each element is the sum of itself and all previous elements in the array. The function should be defined as follows: def cumulative_sum(arr): For example: cumulative_sum([1, 2, 3, 4]) would return: [1, 3, 6, 10] cumulative_sum([0, 0, 0, 0]) would return: [0, 0, 0, 0] cumulative_sum([5, 10, 15]) would return: [5, 15, 30] The input array will always contain non-negative integers, including zero. The function should handle an empty array by returning an empty array. The input array can be of any non-negative integer length.","solution":"def cumulative_sum(arr): Takes an array of non-negative integers and returns a new array where each element is the sum of itself and all previous elements in the array. result = [] current_sum = 0 for num in arr: current_sum += num result.append(current_sum) return result"},{"question":"A company is organizing a series of team-building events for its employees. They have n different activities planned, each with a specific starting and ending time. Each activity is represented by a tuple (si, ei), where si is the starting time and ei is the ending time of the i-th activity. Given the list of these activities, the goal is to determine the maximum number of non-overlapping activities an employee can attend. Two activities are non-overlapping if they do not share any common time. Write a function that takes an integer n and a list of tuples representing the starting and ending times of the activities and returns the maximum number of non-overlapping activities. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of activities. The next n lines each contain two integers si and ei (0 ≤ si < ei ≤ 10^5), representing the starting and ending times of an activity. Output Output a single integer, the maximum number of non-overlapping activities. Examples Input 5 1 2 3 4 0 6 5 7 8 9 Output 4 Input 3 1 3 2 5 4 7 Output 2 Note In the first example, the employee can attend the activities (1, 2), (3, 4), (5, 7), and (8, 9). The activity (0, 6) is overlapping with multiple other activities, so it\'s better to skip it for achieving our goal. In the second example, the employee can attend either activities (1, 3) and (4, 7) or activities (2, 5) and (4, 7).","solution":"def max_non_overlapping_activities(n, activities): Determines the maximum number of non-overlapping activities an employee can attend. :param n: Number of activities :param activities: List of tuples representing the starting and ending times of the activities :return: Maximum number of non-overlapping activities # Sort activities based on their end times activities.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in activities: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"An online bookstore offers a promotional deal where if a customer buys a certain number of books, they receive some of them for free. The promotion works as follows: if a customer buys n books, they get k books for free, where k is the largest integer such that the customer buys at least 2^k books. Your task is to determine the total number of books a customer will get, including the free ones, given the number of books they actually bought. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 1000), the number of test cases. The description of the test cases follows. Each of the next t lines contains a single integer n (1 le n le 10^9), the number of books the customer bought. -----Output----- For each test case, output a single integer, the total number of books the customer will get, including the free ones. -----Examples----- Input 3 1 5 10 Output 2 10 20 -----Note----- In the first test case, the customer bought 1 book and gets 1 (which is 2^0) free book, so the total number of books is 1 + 1 = 2. In the second test case, the customer bought 5 books. The largest k such that 2^k le 5 is 2 (2^2 = 4), so the customer gets 4 free books. The total number of books is 5 + 4 = 9. In the third test case, the customer bought 10 books, and 2^3 = 8 is the largest power of 2 not greater than 10, so the customer gets 8 free books. The total number of books is 10 + 8 = 18.","solution":"import math def total_books(t, cases): Function to calculate total number of books a customer will get including the free ones. :param t: number of test cases :param cases: list of integers, where each integer represents the number of books bought in a test case :return: list of integers, where each integer represents the total books (bought + free) for the corresponding test case results = [] for n in cases: k = int(math.log2(n)) free_books = 2**k total = n + free_books results.append(total) return results"},{"question":"Given an array of unsorted integers, your goal is to find the longest subsequence that is strictly increasing and return its length. This subsequence does not need to be contiguous. For example, given the array `[10, 9, 2, 5, 3, 7, 101, 18]`, the longest increasing subsequence would be `[2, 3, 7, 18]`, and its length would be `4`. Implement a function `longest_increasing_subsequence(arr)` that takes an array of integers as input and returns the length of the longest strictly increasing subsequence. Example `input` and `output`: - `longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18])` should return `4`. - `longest_increasing_subsequence([0, 1, 0, 3, 2, 3])` should return `4`. - `longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7])` should return `1`. You may assume that the array has at least one element and contains only integers. Your solution should have a time complexity of O(n^2) or better.","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest strictly increasing subsequence in the array. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"TechCorp is hosting a coding competition, and the final round involves solving a maze problem. TechCorp\'s maze is represented by an N times N grid, where each cell is either open (represented by 0) or blocked (represented by 1). You, as a participant, must find out if there is a path from the top-left corner (0,0) to the bottom-right corner (N-1, N-1). You can only move in four possible directions: up, down, left, and right. Write a function to determine if such a path exists. The function should return \'YES\' if there exists a path from (0, 0) to (N-1, N-1), otherwise return \'NO\'. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N indicating the size of the grid. Each of the next N lines contains N space-separated integers, where the j-th integer in the i-th line represents the cell at position (i,j). ------ Output ------ For each test case, print a single line containing \'YES\' if there exists a path from (0,0) to (N-1, N-1), otherwise print \'NO\'. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 50 Each cell in the grid is either 0 or 1. ----- Sample Input 1 ------ 2 3 0 1 0 0 0 1 1 0 0 2 0 1 1 0 ----- Sample Output 1 ------ YES NO ------ Explanation 1 ------ In the first test case, there exists a path from (0,0) to (N-1,N-1) as follows: (0,0) -> (1,0) -> (1,1) -> (2,1) -> (2,2). In the second test case, there is no path that leads from (0,0) to (1,1).","solution":"def is_path_exists(grid): N = len(grid) if N == 0 or grid[0][0] == 1 or grid[N-1][N-1] == 1: return \\"NO\\" def dfs(x, y, visited): if (x, y) == (N-1, N-1): return True directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and grid[nx][ny] == 0 and (nx, ny) not in visited: visited.add((nx, ny)) if dfs(nx, ny, visited): return True return False visited = set() visited.add((0, 0)) return \\"YES\\" if dfs(0, 0, visited) else \\"NO\\" def process_test_cases(test_cases): results = [] for grid in test_cases: results.append(is_path_exists(grid)) return results"},{"question":"Problem Statement: Sakura is planning a trip and she loves to travel by train. However, she\'s concerned about how long she\'ll have to wait at each station. There are N stations on her route and at each station, there is a queue of people waiting to buy tickets. There are three types of people based on their ticket purchase time: Adults, Seniors, and Children. Adults take 1 minute to get a ticket, Seniors take 2 minutes, and Children take 3 minutes. Sakura wants to minimize her waiting time, so she would like you to help her figure out which station she should start from to reduce her overall waiting time. Input The first line contains a single integer N, the number of stations. The second line contains N positive integers Y_1, Y_2, ..., Y_N separated by space, where Y_i denotes the number of people in the queue at the i-th station. The following N lines describe the people at each station. Each line has Y_i integers (1, 2, or 3) separated by space, where: 1 - Adult 2 - Senior 3 - Child Output The output contains a single integer, the station number at which Sakura should start to minimize her waiting time. It is guaranteed that there is only one correct answer. Constraints 1 ≤ N ≤ 500 1 ≤ Y_i ≤ 500 Example Input: 3 3 2 4 1 2 1 2 1 1 3 2 1 Output: 2 Explanation There are 3 stations: - Station 1 has people who take [1 + 2 + 1 = 4] minutes to buy tickets. - Station 2 has people who take [2 + 1 = 3] minutes to buy tickets. - Station 3 has people who take [1 + 3 + 2 + 1 = 7] minutes to buy tickets. Thus, the best starting station is station 2, as it has the shortest total waiting time.","solution":"def find_best_station(N, Y, people_queues): def get_waiting_time(queue): waiting_time = 0 for person_type in queue: if person_type == 1: waiting_time += 1 elif person_type == 2: waiting_time += 2 elif person_type == 3: waiting_time += 3 return waiting_time min_waiting_time = float(\'inf\') best_station = -1 for i in range(N): waiting_time = get_waiting_time(people_queues[i]) if waiting_time < min_waiting_time: min_waiting_time = waiting_time best_station = i + 1 # Station number (1-based index) return best_station # Example usage: # N = 3 # Y = [3, 2, 4] # people_queues = [ # [1, 2, 1], # Station 1 # [2, 1], # Station 2 # [1, 3, 2, 1] # Station 3 # ] # output = find_best_station(N, Y, people_queues) # Output should be 2"},{"question":"There is an ancient deserted island with rows of connected houses, and you are the island keeper. The houses are in a straight line, and you have been given the duty to restore certain houses based on some rules. There are three types of restorations possible: Cosmetic, Structural, and Functional. Each house can undergo only one type of restoration, and no two consecutive houses can receive the same type of restoration. Each type of restoration has a different cost, and the cost is unique for each house. Your task is to determine the minimum total restoration cost for all the houses while following the given conditions. Input Constraints - The number of houses (N) will be between 1 and 100, inclusive. - Each line of input for houses will have three values corresponding to the cost for Cosmetic, Structural, and Functional restorations. Each cost value will be between 1 and 1000. Input Format - The first line will contain an integer N that specifies how many houses there are. - Each of the following N lines will contain 3 integers separated by spaces that represent the costs of Cosmetic, Structural, and Functional restorations for each house, respectively. Output Format Print the minimum total restoration cost. SAMPLE INPUT 3 14 2 8 10 15 6 12 3 9 SAMPLE OUTPUT 20 Explanation The first house should be restored with Structural restoration (2), the second house with Functional restoration (6), and the third house with Structural restoration (3). So the total minimum cost becomes 2 + 6 + 3 = 11","solution":"def min_restoration_cost(n, costs): # Initialize dp arrays for costs dp_cosmetic = [0] * n dp_structural = [0] * n dp_functional = [0] * n # Set initial costs for the first house dp_cosmetic[0] = costs[0][0] dp_structural[0] = costs[0][1] dp_functional[0] = costs[0][2] # Fill out the dp arrays with minimum costs for each house for i in range(1, n): dp_cosmetic[i] = min(dp_structural[i-1], dp_functional[i-1]) + costs[i][0] dp_structural[i] = min(dp_cosmetic[i-1], dp_functional[i-1]) + costs[i][1] dp_functional[i] = min(dp_cosmetic[i-1], dp_structural[i-1]) + costs[i][2] # Minimum cost will be the minimum of the three options for the last house return min(dp_cosmetic[-1], dp_structural[-1], dp_functional[-1])"},{"question":"In a grid city, there are n vertical streets and m horizontal avenues forming a grid of n*m blocks. You are standing at the south-west corner of this grid (1,1) and want to reach the north-east corner (n,m) using the shortest path. However, some blocks are not accessible (blocked) and you cannot pass through them. Determine the number of distinct shortest paths from the south-west corner to the north-east corner that avoid the blocked blocks. ------ Input: ------ First line will contain n, m, k, denoting the number of vertical streets, horizontal avenues, and number of blocked blocks respectively. Next k lines contain two integers x_i, y_i each, denoting the coordinates of the blocked block. ------ Output: ------ Single integer denoting the number of distinct shortest paths. ------ Constraints ------ 2 ≤ n, m ≤ 50 0 ≤ k ≤ n*m-2 ----- Sample Input 1 ------ 3 3 1 2 2 ----- Sample Output 1 ------ 2 ----- explanation 1 ------ For the given input, the paths are (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) and (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). ----- Sample Input 2 ------ 4 4 2 2 2 3 3 ----- Sample Output 2 ------ 4 ----- explanation 2 ------ For the given input, the possible paths avoiding blocked blocks are (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4), and similarly three other paths in terms of variations of movements. Note: For paths to stay distinct and shortest, each move from (i,j) leads either to (i+1,j) or (i,j+1).","solution":"def num_distinct_shortest_paths(n, m, k, blocked_blocks): Determines the number of distinct shortest paths on a grid from (1, 1) to (n, m) avoiding any blocked blocks. # Initialize a grid with paths count grid = [[0] * m for _ in range(n)] # Set the starting position grid[0][0] = 1 # Convert blocked_blocks to a set for O(1) lookup complexity blocked = set((x - 1, y - 1) for x, y in blocked_blocks) # Populate grid with number of ways to reach each cell for i in range(n): for j in range(m): if (i, j) in blocked: grid[i][j] = 0 else: if i > 0: grid[i][j] += grid[i-1][j] if j > 0: grid[i][j] += grid[i][j-1] return grid[-1][-1]"},{"question":"-----Question----- Jordan is playing a game where he needs to find out if he can win against his opponent, Ava, with a set of given moves. In this game, Jordan can perform a series of moves represented as a sequence of characters. Jordan wins if he can perform the sequence \\"win\\" as a subsequence of the given moves. Help Jordan determine if he can win the game. -----Input----- The first and only line of input contains a single nonempty string s of length at most 1000 composed of lowercase letters (a-z). -----Output----- Output YES if the string s contains \\"win\\" as a subsequence and NO otherwise. -----Examples----- Input wdziein Output YES Input wni Output NO -----Note----- A string s contains another string p as a subsequence if it is possible to delete some characters from s and obtain p.","solution":"def can_jordan_win(moves): Returns \'YES\' if the string moves contains \'win\' as a subsequence, otherwise \'NO\'. seq = \\"win\\" index = 0 for char in moves: if char == seq[index]: index += 1 if index == len(seq): return \\"YES\\" return \\"NO\\""},{"question":"Write a function that takes an array of integers and returns the same array sorted in ascending order, but only the odd numbers should be sorted, while the even numbers remain in their original positions. For example, running this function on the array [4, 3, 2, 1, 5] would produce [4, 1, 2, 3, 5].","solution":"def sort_odd_numbers(arr): Sorts only the odd numbers in the array in ascending order, keeping the even numbers in their original positions. Parameters: arr (list): a list of integers Returns: list: a list with odd numbers sorted and even numbers at their original positions # Extract odd numbers and sort them odd_numbers = sorted([x for x in arr if x % 2 != 0]) # Result list to hold the final sorted array result = [] # Iterator for the sorted odd numbers odd_iter = iter(odd_numbers) for num in arr: if num % 2 != 0: # If the number is odd, use the next sorted odd number result.append(next(odd_iter)) else: # If the number is even, keep it in its original position result.append(num) return result"},{"question":"Carla is a network engineer managing a set of servers. She wants to ensure that the servers are distributed in such a way that the load is balanced. Each server has a certain processing power rating, and she wants to split the servers into two groups such that the difference in total processing power between the groups is minimized. Given the processing power ratings of the servers, determine the minimum possible difference in total processing power between the two groups. -----Input----- The first line contains one integer t (1 le t le 10^3) — the number of test cases. Then t test cases follow. The first line of each test case contains an integer n (1 le n le 50) — the number of servers. The next line contains n integers p_1, p_2, ldots, p_n — the processing power ratings of the servers. Each rating is an integer between 1 and 1000. -----Output----- For each test case, output on a separate line: An integer denoting the minimum possible difference in total processing power between the two groups. -----Examples----- Input 3 2 1 2 4 1 2 3 4 3 2 2 3 Output 1 0 1 -----Note----- In the first test case, one group can have a server with 1 unit of processing power and the other group a server with 2 units, resulting in a difference of |1 - 2| = 1. In the second test case, the servers can be split into groups with processing powers (1, 4) and (2, 3), both groups have 5 units of processing power, so the difference is |5 - 5| = 0. In the third test case, the servers can be split into groups with processing powers (2, 2) and (3), resulting in a difference of |4 - 3| = 1.","solution":"def min_power_difference(t, test_cases): def subset_sum_closest(arr, n, total_sum): dp = [[False for _ in range(total_sum + 1)] for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum + 1): dp[i][j] = dp[i - 1][j] if arr[i - 1] <= j: dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]] for j in range(total_sum // 2, -1, -1): if dp[n][j]: return total_sum - 2 * j results = [] for case in test_cases: n, powers = case total_sum = sum(powers) min_diff = subset_sum_closest(powers, n, total_sum) results.append(min_diff) return results # Example usage: # t = 3 # test_cases = [ # (2, [1, 2]), # (4, [1, 2, 3, 4]), # (3, [2, 2, 3]) # ] # print(min_power_difference(t, test_cases))"},{"question":"Given a string `s` that consists of only lowercase English letters and parentheses \'(\' and \')\', remove the minimum number of invalid parentheses to make the input string valid and return all possible results. Note: The input string may be empty. You may return the results in any order. A string is considered valid if there are no unmatched parentheses and the order of parentheses is correct. Example: Input: s = \\"(a)())()\\" Output: [\\"(a)()()\\", \\"(a())()\\"] Input: s = \\"(a)()\\" Output: [\\"(a)()\\"]","solution":"from collections import deque def remove_invalid_parentheses(s): def is_valid(expression): balance = 0 for char in expression: if char == \'(\': balance += 1 elif char == \')\': balance -= 1 if balance < 0: return False return balance == 0 results = [] visited = set() queue = deque([s]) found = False while queue: current = queue.popleft() if is_valid(current): results.append(current) found = True if found: continue for i in range(len(current)): if current[i] in (\'(\', \')\'): next_state = current[:i] + current[i + 1:] if next_state not in visited: visited.add(next_state) queue.append(next_state) return results"},{"question":"In a faraway land, there are N magical trees arranged in a row, and each tree produces a specific type of fruit. Each type of fruit has a different magical power level. There are Q queries, and each query asks for the maximum power level of a certain type of fruit within a specific range of trees. You are given two arrays: `fruitTypes` of size N, where `fruitTypes[i]` represents the type of fruit produced by the i-th tree, and `powerLevels` of size M, where `powerLevels[i]` represents the power level of fruit type i. The query consists of three integers L, R, and F, where you need to determine the maximum power level of fruit type F from trees in the index range [L, R] (inclusive). *Input:* The first line contains two integers N and Q – the number of trees and the number of queries, respectively. The second line contains N integers, the array `fruitTypes`. The third line contains M integers, the array `powerLevels`. The next Q lines each contain three integers L, R, and F describing a query. *Output:* For each query, output a single integer: the maximum power level of fruit type F in the specified range. *Constraints:* 1 ≤ N, Q ≤ 100000 1 ≤ M ≤ 1000 1 ≤ fruitTypes[i], F ≤ M 1 ≤ powerLevels[i] ≤ 10^9 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 3 1 2 1 3 2 3 5 1 1 3 2 2 4 1 1 5 3 SAMPLE OUTPUT 5 3 1 Explanation In the first query, the range is [1, 3] and we need the maximum power level for fruit type 2. The power levels of the specified fruit type in this range are given by the `powerLevels` array. In the second query, the range is [2, 4] and we need the maximum power level for fruit type 1, which is 3. In the third query, the range is [1, 5] and we need the maximum power level for fruit type 3, which is 1.","solution":"def maximum_power_level(n, q, fruitTypes, powerLevels, queries): Determines the maximum power level of a specific fruit type within a given range. Parameters: n (int): Number of trees. q (int): Number of queries. fruitTypes (list of int): List of fruit types produced by the trees. powerLevels (list of int): List of power levels for each fruit type. queries (list of tuple): List of queries (L, R, F). Returns: list of int: Maximum power levels for each query. results = [] for L, R, F in queries: max_power = -float(\'inf\') for i in range(L-1, R): if fruitTypes[i] == F: max_power = max(max_power, powerLevels[F-1]) if max_power == -float(\'inf\'): max_power = 0 results.append(max_power) return results # Sample input n = 5 q = 3 fruitTypes = [1, 2, 1, 3, 2] powerLevels = [3, 5, 1] queries = [(1, 3, 2), (2, 4, 1), (1, 5, 3)] # Sample output print(maximum_power_level(n, q, fruitTypes, powerLevels, queries)) # Expected: [5, 3, 1]"},{"question":"Has Balanced Parentheses _This question assesses knowledge of stack data structures and string processing._ You are provided with a string that contains different types of parentheses: round `()`, square `[]`, and curly `{}`. Write a function to determine if the given string has balanced parentheses. A string is considered to have balanced parentheses if: - Every opening parenthesis has a corresponding closing parenthesis of the same type. - Parentheses close in the correct order, i.e., a closing parenthesis of a certain type cannot close before its corresponding opening parenthesis. The function should return `True` if the string has balanced parentheses, and `False` otherwise. Example has_balanced_parentheses(\\"()\\") -> True has_balanced_parentheses(\\"{[()]}\\") -> True has_balanced_parentheses(\\"{[(])}\\") -> False has_balanced_parentheses(\\"({[()]})\\") -> True has_balanced_parentheses(\\"({[}])\\") -> False","solution":"def has_balanced_parentheses(s): Determine if the string s has balanced parentheses. :param s: string containing parentheses :return: True if the string has balanced parentheses, False otherwise stack = [] matching = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in matching.values(): # If it\'s an opening bracket stack.append(char) elif char in matching: # If it\'s a closing bracket if stack and stack[-1] == matching[char]: stack.pop() else: return False return not stack"},{"question":"A group of M students want to participate in a coding marathon organized by their university. Each student can only work with specific teammates based on their preferences. The goal is to divide the students into several teams such that every student is paired with at least one of their preferred teammates within their team. Each student will list their preferences as to which other students they are comfortable working with, and each team must have at least two students. Determine if such a grouping is possible. Input Format: Line 1: M - The number of students. 1 ≤ M ≤ 100 Line 2-M+1: The names of the students – 1 per line. Line M+2 onwards: For each student, the following lines will contain: - P followed by a space and then P space-separated names of preferred teammates. Note: None of the names will have a length > 100. Output Format: Line 1: Yes/No. Sample Input: 4 Alice Bob Charlie Diana 2 Bob Charlie 1 Alice 3 Alice Diana Bob 2 Charlie Bob Sample Output: Yes","solution":"def can_form_teams(M, students, preferences): from collections import defaultdict, deque # Create a graph where each student is a node and edges are the preferences graph = defaultdict(list) for i, preferred in enumerate(preferences): for student in preferred: graph[students[i]].append(student) graph[student].append(students[i]) # To keep track of visited students visited = set() def bfs(student): queue = deque([student]) team = [] while queue: current = queue.popleft() if current not in visited: visited.add(current) team.append(current) for neighbor in graph[current]: if neighbor not in visited: queue.append(neighbor) return team for student in students: if student not in visited: team = bfs(student) if len(team) < 2: return \\"No\\" return \\"Yes\\""},{"question":"Given an array of integers, perform different segment operations and answer queries based on these operations. You are to support the following operations: 1. Update the value of an element at a specified index. 2. Find the maximum value in a given range of indices. Input format: The first line contains two integers, N (the number of elements in the array) and Q (the number of queries). The second line contains N space-separated integers, representing the initial values of the array. The next Q lines describe the queries, each in one of the following formats: - \\"1 x y\\" - Update the value at index x to y (1-based index). - \\"2 x y\\" - Find the maximum value in the subarray from index x to index y (both 1-based indices inclusive). Output format: For each query of type 2, output the maximum value in the specified subarray. Constraints: 1 ≤ N, Q ≤ 100,000 1 ≤ Ai ≤ 10^6 1 ≤ x, y ≤ N SAMPLE INPUT 5 5 1 5 2 4 3 2 1 3 1 4 10 2 2 5 1 1 20 2 3 3 SAMPLE OUTPUT 5 10 2 Explanation: Initially, the array is [1, 5, 2, 4, 3]. - Query 1: Find the maximum value from index 1 to index 3, which is 5. - Query 2: Update the value at index 4 to 10, making the array [1, 5, 2, 10, 3]. - Query 3: Find the maximum value from index 2 to index 5, which is 10. - Query 4: Update the value at index 1 to 20, making the array [20, 5, 2, 10, 3]. - Query 5: Find the maximum value from index 3 to index 3, which is 2 (the only element in this subarray).","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Initialize the leaves of the tree for i in range(self.n): self.tree[self.n + i] = array[i] # Initialize the internal nodes for i in range(self.n - 1, 0, -1): self.tree[i] = max(self.tree[2 * i], self.tree[2 * i + 1]) def update(self, pos, value): pos += self.n self.tree[pos] = value while pos > 1: pos //= 2 self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1]) def range_max(self, left, right): left += self.n right += self.n maximum = -1 while left < right: if left % 2: maximum = max(maximum, self.tree[left]) left += 1 if right % 2: right -= 1 maximum = max(maximum, self.tree[right]) left //= 2 right //= 2 return maximum def process_queries(N, Q, array, queries): seg_tree = SegmentTree(array) results = [] for query in queries: if query[0] == 1: _, x, y = query seg_tree.update(x - 1, y) elif query[0] == 2: _, x, y = query results.append(seg_tree.range_max(x - 1, y)) return results"},{"question":"You are given a list of integers. Your task is to create a new list where each element at index `i` of the new list is the product of all the numbers in the original array except the one at `i`. Write a function to solve this problem. The function should return a list of integers representing the new list. Constraints * 1 ≤ n ≤ 1000 (where n is the number of integers in the list) * -100 ≤ a_i ≤ 100, for each integer a_i in the list * The product will always fit in a 32-bit integer. Input The input consists of a single line containing `n` (the size of the list) followed by `n` integers separated by space. Output Output the new list consisting of `n` integers. Example Input 4 1 2 3 4 Output [24, 12, 8, 6] Input 3 -1 1 0 Output [0, 0, -1]","solution":"def product_except_self(nums): Returns a list where each element at index `i` is the product of all the numbers in the original array except the one at `i`. n = len(nums) if n == 1: return [0] # Create two arrays to store the product of elements # left of the current index and right of the current index left_products, right_products = [1] * n, [1] * n result = [0] * n # Fill left_products from left to right for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] # Fill right_products from right to left for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] # Fill result array with the product of left and right products for i in range(n): result[i] = left_products[i] * right_products[i] return result # Example usage: # input_list = [1, 2, 3, 4] # print(product_except_self(input_list)) # Output: [24, 12, 8, 6]"},{"question":"Finding the Unique Character You are tasked with implementing an algorithm to identify the first non-repeating character in a given string. The string consists only of lowercase English letters. Your method should return the first character that does not repeat. If all characters are repeating, return an underscore (\'_\'). In other words, given a string, find the first character that does not occur twice or more. It is guaranteed that the string is at least one character long. Function Signature ```python def first_non_repeating_character(s: str) -> str: pass ``` Input - A single string `s` of lower-case English letters. Output - A single character which is the first non-repeating character in the string. - If there is no such character, return an underscore (\'_\'). Example Input: \\"swiss\\" Output: \\"w\\" Input: \\"success\\" Output: \\"u\\" Input: \\"aabbcc\\" Output: \\"_\\" Explanation For the first example, \\"swiss\\": - The character \'s\' appears three times. - The character \'w\' is the first non-repeating character. For the second example, \\"success\\": - The characters \'s\', \'c\', and \'e\' appear multiple times. - The character \'u\' is the first non-repeating character. For the third example, \\"aabbcc\\": - Each character appears more than once. - There are no non-repeating characters, hence return \'_\'.","solution":"def first_non_repeating_character(s: str) -> str: Returns the first non-repeating character in the given string. If all characters are repeating, it returns an underscore (\'_\'). from collections import Counter # Count the occurrences of each character in the string count = Counter(s) # Find the first character with a count of 1 for char in s: if count[char] == 1: return char return \'_\'"},{"question":"You are given a list of integers representing the scores of students in a class. Your task is to determine the number of distinct scores and identify the second highest score in the list. If there is no second highest score, return -1. # Input - The first line contains an integer **N** (1 ≤ N ≤ 1000), the number of students in the class. - The second line contains **N** integers, representing the scores of the students. # Output - The first line should contain the number of distinct scores. - The second line should contain the second highest score. If there is no second highest score, output -1. # Examples Input: ``` 5 85 75 85 90 100 ``` Output: ``` 4 90 ``` Input: ``` 3 50 50 50 ``` Output: ``` 1 -1 ``` # Explanation - In the first example, the distinct scores are {85, 75, 90, 100}. The number of distinct scores is 4 and the second highest score is 90. - In the second example, the distinct scores are {50}. Since there are no other different scores, the second highest score does not exist, thus the output is -1.","solution":"def analyze_scores(N, scores): Analyzes the scores to find the number of distinct scores and the second highest score. Parameters: N (int): Number of students. scores (list): List of scores. Returns: tuple: Number of distinct scores and the second highest score (or -1 if not applicable). distinct_scores = list(set(scores)) distinct_count = len(distinct_scores) if distinct_count < 2: second_highest = -1 else: distinct_scores.sort(reverse=True) second_highest = distinct_scores[1] return distinct_count, second_highest"},{"question":"You are given a grid of size N x M, where some cells represent grass and some represent water. There is a lawnmower that starts at the top-left corner of the grid (cell (1, 1)) and can only move to the right or down. The lawnmower can mow the grass but cannot move into or through the water cells. Your task is to determine if the lawnmower can reach the bottom-right corner of the grid (cell (N, M)). If it can, output the minimum number of grass cells mowed by the lawnmower (including the starting and ending cells). If it cannot reach the bottom-right corner, output -1. -----Input----- The first line of input contains two space-separated integers N and M, denoting the number of rows and columns, respectively. Each of the next N lines contains M characters, where each character is either \'.\' (indicating grass) or \'#\' (indicating water). -----Output----- Print one integer that describes the minimum number of grass cells mowed by the lawnmower to reach the bottom-right corner. If it is not possible, output \\"-1\\" without quotes. -----Constraints----- - 2 ≤ N, M ≤ 1000 - Each cell is either \'.\' or \'#\'. -----Example----- Sample Input 1: 3 3 ... .#. ... Sample Output 1: 5 Sample Input 2: 3 3 ..# .#. ..# Sample Output 2: -1 -----Explanation----- In the first example, the lawnmower can move through the cells (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3). The number of grass cells mowed is 5. In the second example, the lawnmower cannot reach the bottom-right corner because it is blocked by water cells. Hence, the output is -1.","solution":"from collections import deque def min_grass_cells_mowed(N, M, grid): Returns the minimum number of grass cells mowed to reach the bottom-right corner or -1 if it\'s not possible. if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return -1 # Start or end is blocked directions = [(0, 1), (1, 0)] queue = deque([(0, 0)]) visited = [[False] * M for _ in range(N)] visited[0][0] = True distance = [[float(\'inf\')] * M for _ in range(N)] distance[0][0] = 1 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True distance[nx][ny] = distance[x][y] + 1 queue.append((nx, ny)) return distance[N-1][M-1] if distance[N-1][M-1] != float(\'inf\') else -1"},{"question":"Vincent the Vampire is on a quest for collecting magical blood potions. There is a treasure chest that contains different types of potions, each having a different magical frequency value. Vincent has a magical power that allows him to evaluate a subset of these potions and determine if their combined frequency value sums up to an exact target value, \'v\'. Vincent needs your help to figure out if there\'s any subset of potions that can sum up to exactly \'v\'. Input: The first line contains an integer t, the number of test cases. Each test case consists of two lines: - The first line contains two integers n (the number of different potions) and v (the target frequency value). - The second line contains n integers, the magical frequency values of each potion. Constraints: 1 ≤ t ≤ 10 1 ≤ n ≤ 20 0 ≤ v ≤ 10^6 0 ≤ Frequency value of each potion ≤ 100 Output: For each test case, print \\"YES\\" if there\'s a subset of potion frequencies that sums up to exactly \'v\', otherwise print \\"NO\\". Example: Input: 3 4 9 1 2 3 4 5 0 1 2 3 4 5 3 11 5 5 5 Output: YES YES NO","solution":"def can_sum_to_v(potion_frequencies, target_v): n = len(potion_frequencies) # Use bitmasking to check all subsets for mask in range(1 << n): subset_sum = 0 for i in range(n): if mask & (1 << i): subset_sum += potion_frequencies[i] if subset_sum == target_v: return \\"YES\\" return \\"NO\\" def solve(t, test_cases): results = [] for i in range(t): n, v = test_cases[i][0] potion_frequencies = test_cases[i][1] results.append(can_sum_to_v(potion_frequencies, v)) return results"},{"question":"You are given a string `s` composed of lowercase letters and a list of integers `queries`. The string represents a sequence of characters, and each query is represented by a pair of indices `(l, r)` where `1 ≤ l ≤ r ≤ |s|`. For each query, you need to find the most frequent character in the substring of `s` that starts from index `l` and ends at index `r` (both inclusive). If there are multiple characters with the same highest frequency, return the lexicographically smallest one. Write a function `most_frequent_characters(s, queries)` that takes a string `s` and a list of queries. Each query consists of two integers representing the start and end indices of a substring. The function should return a list of results, where each result is the most frequent character in the corresponding substring. # Function Signature ```python def most_frequent_characters(s: str, queries: List[Tuple[int, int]]) -> List[str]: ``` # Input - `s`: A string of lowercase English letters (1 ≤ |s| ≤ 10^5). - `queries`: A list of tuples, where each tuple contains two integers `(l, r)` (1 ≤ l ≤ r ≤ |s|, 1 ≤ |queries| ≤ 10^4). # Output - A list of characters, one for each query. # Example ```python s = \\"abcabcbb\\" queries = [(1, 3), (2, 5), (1, 8)] print(most_frequent_characters(s, queries)) # Output: [\'a\', \'b\', \'b\'] ``` # Note - For the first query `(1, 3)`, the substring is `\\"abc\\"`, where \'a\', \'b\', and \'c\' all have the same frequency, hence the lexicographically smallest is \'a\'. - For the second query `(2, 5)`, the substring is `\\"bcab\\"`, where \'b\' has the highest frequency. - For the third query `(1, 8)`, the substring is `\\"abcabcbb\\"`, where \'b\' has the highest frequency.","solution":"from typing import List, Tuple from collections import Counter def most_frequent_characters(s: str, queries: List[Tuple[int, int]]) -> List[str]: def get_most_frequent_character(sub_s: str) -> str: counter = Counter(sub_s) max_frequency = max(counter.values()) most_frequent_chars = [char for char, count in counter.items() if count == max_frequency] return min(most_frequent_chars) result = [] for l, r in queries: substring = s[l-1:r] # Convert 1-based indices to 0-based result.append(get_most_frequent_character(substring)) return result"},{"question":"You are managing a warehouse and need to optimize the storage of items. Each item has a specific weight and a value associated with it. Your goal is to maximize the total value of items stored in the warehouse without exceeding the maximum weight capacity. The problem is defined as follows: --- - You are given a number of items `n` (1 ≤ n ≤ 10^4), each with a weight `w_i` (1 ≤ w_i ≤ 10^6) and a value `v_i` (1 ≤ v_i ≤ 10^6). - The warehouse has a maximum weight capacity `W` (1 ≤ W ≤ 10^9). You need to determine the maximum value of items that can be stored without exceeding the weight capacity `W`. You can only store each item whole (i.e., you cannot split an item), but you can store multiple items or none at all. To achieve this, you will use a dynamic programming approach to keep track of the maximum values for different capacities. -----Input----- The input begins with two integers `n` and `W` which represent the number of items and the maximum weight capacity of the warehouse. The next `n` lines each contain two integers `w_i` and `v_i` representing the weight and value of each item. -----Output----- Display the maximum value of items that can be stored in the warehouse without exceeding the weight capacity `W`. -----Examples----- Sample Input: 4 7 1 1 3 4 4 5 5 7 Sample Output: 9","solution":"def knapsack(n, W, items): dp = [0] * (W + 1) for i in range(n): weight, value = items[i] # Traverse from W to weight. for w in range(W, weight - 1, -1): dp[w] = max(dp[w], dp[w - weight] + value) return max(dp) # Example usage: # n = 4 # W = 7 # items = [(1, 1), (3, 4), (4, 5), (5, 7)] # print(knapsack(n, W, items)) # Output: 9"},{"question":"John is an avid reader and loves organizing his ebook collection. He wants to analyze his longest ebook, which is a long string of words separated by spaces, and find out the most frequent word occurrences. You need to help John by writing a function that, given a string of words, returns a list of the most frequent word(s) in the string. If there are multiple words with the highest frequency, return them all in alphabetical order. Function Description Complete the `most_frequent_words` function in the editor below. `most_frequent_words` has the following parameters: - string `text`: the string containing words separated by spaces Returns - list of strings: a list of the most frequent word(s) in alphabetical order Input Format A single line of input containing the string `text`. Constraints The string `text` contains only lowercase letters and spaces. 1 leq text{len(text)} leq 10^6 Sample Input 0 ``` john loves the book book book loves john loves loves the books ``` Sample Output 0 ``` [\'loves\'] ``` Sample Input 1 ``` this is a test this is only a test ``` Sample Output 1 ``` [\'a\', \'is\', \'test\', \'this\'] ``` Note In sample input 0, the word \\"loves\\" occurs the most frequently (4 times). Thus, it is the only word in the output list. In sample input 1, the words \'a\', \'is\', \'test\', and \'this\' each occur twice, which is the highest frequency, so they are all included in the resulting list in alphabetical order.","solution":"def most_frequent_words(text): from collections import Counter # Split the text into words words = text.split() # Count the frequency of each word word_counts = Counter(words) # Find the maximum frequency max_count = max(word_counts.values()) # Get all words with the maximum frequency most_freq_words = [word for word, count in word_counts.items() if count == max_count] # Sort the words alphabetically most_freq_words.sort() return most_freq_words"},{"question":"Alex, a software developer, is participating in a coding competition where he needs to solve a puzzle involving binary trees. The task requires him to determine the sum of all node values at the deepest level of a given binary tree. Alex should write a program that helps him compute this sum efficiently. A binary tree is represented in level-order format, where \'null\' signifies that there is no node at that position. For example, the binary tree [1, 2, 3, null, null, 4, 5] can be visualized as: 1 / 2 3 / 4 5 In this example, the deepest level nodes are 4 and 5, and their sum is 9. Input The input consists of a single line which is a list containing the values of the nodes of the binary tree in level-order format. \'null\' denotes the absence of a node. Output Output a single integer, which is the sum of node values at the deepest level of the binary tree. Examples Input [1, 2, 3, null, null, 4, 5] Output 9 Input [1, 2, 3, 4, 5, null, 6, null, null, 7] Output 7 Note - The input list will always represent a valid binary tree. - The number of nodes in the tree is in the range [1, 10^4]. - The value of each node is within the range [-10^4, 10^4].","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def deepestLeavesSum(level_order): if not level_order or level_order[0] == \'null\': return 0 # Helper function to create binary tree from level-order list def create_tree(level_order): if not level_order: return None root = TreeNode(level_order[0]) queue = deque([root]) i = 1 while i < len(level_order): current = queue.popleft() if level_order[i] is not None: current.left = TreeNode(level_order[i]) queue.append(current.left) i += 1 if i < len(level_order) and level_order[i] is not None: current.right = TreeNode(level_order[i]) queue.append(current.right) i += 1 return root root = create_tree(level_order) queue = deque([root]) while queue: level_sum = 0 level_length = len(queue) for _ in range(level_length): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) return level_sum"},{"question":"In a particular game, you have been given a grid with dimensions n x m filled with non-negative integers. You start from the top-left corner of the grid (cell 1,1) and aim to reach the bottom-right corner of the grid (cell n,m). From any cell (i,j), you can only move right to cell (i,j+1) or move down to cell (i+1,j). Define your score for a path as the sum of all integers on that path. Your task is to find the maximum score you can achieve to reach the bottom-right corner. Input The first line contains two integers n and m (1 ≤ n, m ≤ 500), representing the dimensions of the grid. Each of the next n lines contains m integers (0 ≤ grid[i][j] ≤ 1000), where grid[i][j] represents the value at cell (i,j). Output Print a single integer — the maximum score you can achieve from the top-left to the bottom-right corner. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 29 Input 2 2 10 10 10 10 Output 30 Note In the first sample test, the maximum score path is to go right -> right -> down -> down, with a total score of 1 + 2 + 3 + 6 + 9 = 21. In the second sample test, the maximum score path is to go down -> right or right -> down, with a total score of 10 + 10 + 10 = 30.","solution":"def max_path_score(n, m, grid): # Create DP table with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the top-left cell\'s value dp[0][0] = grid[0][0] # Fill the first row and first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): # The cell value will be the max of coming from the top or from the left plus the current grid value dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Return the value from the bottom-right corner return dp[-1][-1]"},{"question":"Biologists are interested in a certain interesting property of DNA sequences. They want to calculate the longest contiguous subsequence of a given DNA sequence which contains equal number of \'A\'s and \'B\'s. -----Input----- The first line of input contains an integer N (1 le N le 200000), the length of the DNA molecule. The second line contains a string with N characters, where each character is either \'A\' or \'B\'. This string represents the DNA sequence. -----Output----- The first and only line of output must contain the length of the longest contiguous subsequence that contains an equal number of \'A\'s and \'B\'s. -----Examples----- Sample Input 1: 6 AABABB Sample Output 1: 6 Sample Input 2: 4 ABAA Sample Output 2: 2","solution":"def longest_equal_subsequence(N, sequence): Returns the length of the longest contiguous subsequence, which contains an equal number of \'A\'s and \'B\'s. balance_index_map = {0: -1} # To handle balance 0 case at the start balance = 0 max_length = 0 for i in range(N): if sequence[i] == \'A\': balance += 1 else: balance -= 1 if balance in balance_index_map: max_length = max(max_length, i - balance_index_map[balance]) else: balance_index_map[balance] = i return max_length"},{"question":"Hannah is building a marketing campaign strategy where she needs to distribute promotional codes to users. She has a list of codes, and she wants to ensure that each user gets a unique code. However, the codes cannot be simply given directly due to security reasons. Therefore, she decides to encode each code using a special algorithm she devised. The encoding process works as follows: for a given code, which is a positive integer, perform successive byte-wise XOR operations starting with the initial value of the code\'s bytes and a static key, until the entire code is encoded. The key for the XOR operations is a single byte (an integer between 0 and 255). Hannah observed that some encoded codes result in the same output even if the input codes were different, leading to collisions. To find these collisions for a better encoding strategy, she wants to determine the number of unique original codes for each encoded output. For example, consider the key value being 5. If we encode the code 17, it will be XORed byte-wise with 5. Similarly, another code, say 10, might also produce the same encoded value after the XOR operations, leading to a collision. You are tasked to help Hannah by creating a function that, given a list of codes and a specific key, returns the number of unique encoded outputs. Input The first line contains an integer n (1 ≤ n ≤ 100,000) — the number of codes to encode. The second line contains an integer key (0 ≤ key ≤ 255) — the XOR key to be used for encoding. Each of the next n lines contains one integer c_i (1 ≤ c_i ≤ 10^9) — the code to be encoded. Output For each code in the list, print the number of unique encoded outputs. Example Input 4 5 17 10 20 17 Output 3 Explanation The encoded outputs for the codes [17, 10, 20, 17] with key 5 might be [12, 15, 17, 12]. After removing duplicates, the unique encoded outputs are [12, 15, 17], resulting in 3 unique encoded outputs.","solution":"def unique_encoded_outputs(n, key, codes): Returns the number of unique encoded outputs given a list of codes and an XOR key. Parameters: n (int): The number of codes to encode. key (int): The XOR key to be used for encoding. codes (list of int): The list of codes to be encoded. Returns: int: The number of unique encoded outputs. encoded_set = set() for code in codes: encoded_code = code ^ key encoded_set.add(encoded_code) return len(encoded_set)"},{"question":"# Subset Sum Problem Given a set of non-negative integers, and a value sum, determine if there is a subset of the given set with a sum equal to the given value. Write a function `is_subset_sum(arr, sum)` that takes an array of integers `arr` and an integer `sum`, and returns `True` if there is a subset of `arr` with a sum equal to `sum`, and `False` otherwise. In the dynamic programming approach, we create a 2-dimensional array `dp` where `dp[i][j]` will be `True` if there is a subset of `arr[0..i-1]` with sum equal to `j`, otherwise `False`. Examples # Basic ```python is_subset_sum([3, 34, 4, 12, 5, 2], 9) # True -> Subset [3, 4, 2] has sum 9 is_subset_sum([3, 34, 4, 12, 5, 2], 30) # False -> No subset has sum 30 is_subset_sum([1, 2, 3], 5) # True -> Subset [2, 3] has sum 5 is_subset_sum([1, 2, 3], 7) # False -> No subset has sum 7 is_subset_sum([1, 2, 3], 6) # True -> Subset [1, 2, 3] has sum 6 ``` # Edge Cases ```python is_subset_sum([], 0) # True -> Empty subset has sum 0 is_subset_sum([], 1) # False -> No subset can have sum other than 0 is_subset_sum([1, 2, 3], 0) # True -> Empty subset has sum 0 is_subset_sum([0, 0, 0], 0) # True -> Empty subset or any subset of zeros sums to 0 ``` **Note:** Do not use built-in functions that directly perform the subset sum calculation; instead, implement the dynamic programming solution yourself for this problem.","solution":"def is_subset_sum(arr, target_sum): Determines if there is a subset of the given array with a sum equal to the given target_sum. n = len(arr) dp = [[False] * (target_sum + 1) for _ in range(n + 1)] # If sum is 0, then answer is True since we can always have an empty subset for i in range(n + 1): dp[i][0] = True # Fill the dp table in bottom up manner for i in range(1, n + 1): for j in range(1, target_sum + 1): if j < arr[i - 1]: dp[i][j] = dp[i - 1][j] else: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]] return dp[n][target_sum]"},{"question":"Alex has a sequence of integers a1, a2, ..., an and an integer k. He wants to create the longest possible subsequence such that every element in the subsequence is divisible by k. You need to help Alex find the longest subsequence in the sequence that satisfies this condition. If there are multiple subsequences of the same length, return the lexicographically smallest one. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. -----Input----- The first line contains an integer n (1 ≤ n ≤ 2 * 10^5) — the length of the sequence a. The second line contains n integers a1, a2, ..., an (-10^9 ≤ ai ≤ 10^9) — the elements of the sequence. The third line contains an integer k (1 ≤ k ≤ 10^9). -----Output----- Output the longest subsequence that is divisible by k. If there are multiple subsequences of the same length, print the lexicographically smallest one. -----Examples----- Input 5 7 14 21 28 35 7 Output 7 14 21 28 35 Input 6 20 25 30 35 40 45 5 Output 20 25 30 35 40 45 Input 5 1 2 3 4 5 2 Output 2 4","solution":"def longest_divisible_subsequence(n, sequence, k): Finds the longest subsequence such that each element is divisible by k. If there are multiple subsequences of the same length, returns the lexicographically smallest one. divisible_subsequence = [x for x in sequence if x % k == 0] return sorted(divisible_subsequence)"},{"question":"Given an integer n, create a function that returns the first n rows of Pascal\'s Triangle. Pascal\'s Triangle is a triangular array where each element in the nth row is the sum of the two elements directly above it in the previous row. The first row is `[1]`. For example, if the input n is 5, the output should be: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1] ] ``` Your task is to implement the function `generatePascalsTriangle(n: int) -> List[List[int]]` that returns the first `n` rows of Pascal\'s Triangle. Example 1: Input: `n = 1` Output: `[[1]]` Example 2: Input: `n = 4` Output: ``` [ [1], [1, 1], [1, 2, 1], [1, 3, 3, 1] ] ``` Your Task: You don\'t need to read input or print anything. Write a function `generatePascalsTriangle(n: int) -> List[List[int]]` that takes an integer `n` as input and returns a list of lists representing the first `n` rows of Pascal\'s Triangle. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n^2) Constraints: 1 <= n <= 30","solution":"def generatePascalsTriangle(n: int): Generates the first n rows of Pascal\'s Triangle. Parameters: n (int): The number of rows to generate, where 1 <= n <= 30. Returns: List[List[int]]: The first n rows of Pascal\'s Triangle. # Initialize the Pascal\'s Triangle triangle = [] for i in range(n): row = [1] * (i + 1) for j in range(1, i): row[j] = triangle[i-1][j-1] + triangle[i-1][j] triangle.append(row) return triangle"},{"question":"In a futuristic city, autonomous delivery robots are tasked with delivering packages across various locations. The city is represented as a grid, where each cell can either be an open road or blocked by an obstacle. The robots can move up, down, left, or right, but cannot move diagonally or pass through obstacles. Due to the high demand for deliveries, the delivery robots are required to find the shortest path from the starting location to the destination location, if such a path exists. Write a program that takes the city grid, the start location, and the destination location as input, and outputs the shortest path distance from the start to the destination. If no valid path exists, the program should return -1. INPUT: The first line contains an integer T (number of test cases). For each test case, the following input is provided: 1. Two integers, N and M, representing the number of rows and columns in the grid. 2. The next N lines contain M characters each, where \'0\' represents an open road and \'1\' represents an obstacle. 3. Two pairs of integers, (startX, startY) and (destX, destY), representing the starting and destination locations in the grid. OUTPUT: For each test case, print \\"Case x: y\\" where x is the test case number and y is the shortest path distance. If no path exists, output \\"Case x: -1\\". CONSTRAINTS: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 100 0 ≤ startX, startY, destX, destY < N, M SAMPLE INPUT: 2 5 5 00000 01010 00000 01010 00000 0 0 4 4 3 3 010 010 010 0 0 2 2 SAMPLE OUTPUT: Case 1: 8 Case 2: -1 Explanation: For Case 1, the shortest path from (0,0) to (4,4) navigates around obstacles with a path length of 8. For Case 2, no valid path exists from (0,0) to (2,2) due to the obstacles blocking the way.","solution":"from collections import deque def bfs_shortest_path(grid, start, goal): if start == goal: return 0 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) visited = set() visited.add((start[0], start[1])) while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == \'0\' and (nx, ny) not in visited: if (nx, ny) == goal: return dist + 1 queue.append((nx, ny, dist + 1)) visited.add((nx, ny)) return -1 def shortest_path(T, test_cases): results = [] for index, (N, M, grid, start, end) in enumerate(test_cases): distance = bfs_shortest_path(grid, start, end) results.append(f\\"Case {index + 1}: {distance}\\") return results"},{"question":"You have a set of events, each represented by a tuple (start_time, end_time). Each element in the tuple is an integer representing the time in minutes past a fixed starting point. Your task is to determine the maximum number of non-overlapping events that can be attended. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains a single integer n (1 le n le 10^5). The next n lines of each test case contain two integers start_time and end_time (0 le start_time < end_time le 10^9), representing the start time and the end time of an event. It is guaranteed that the sum of n for all test cases does not exceed 10^6. -----Output----- For each test case, print a single line containing one integer — the maximum number of non-overlapping events that can be attended. -----Examples----- Input 2 3 10 20 15 25 20 30 3 2 3 3 4 1 2 Output 2 3 -----Explanation----- In the first test case, the maximum number of non-overlapping events is 2, which can be either by attending events (10,20) and (20,30) or events (15,25) and (20,30). In the second test case, the maximum number of non-overlapping events is 3, which can be by attending all the events (2,3), (3,4), and (1,2).","solution":"def max_non_overlapping_events(test_cases: list) -> list: results = [] for n, events in test_cases: # Sort events based on their end time events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results # input parsing function for convenience def parse_input(input_str: str) -> list: lines = input_str.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) events = [] for i in range(n): start_time, end_time = map(int, lines[index + 1 + i].split()) events.append((start_time, end_time)) test_cases.append((n, events)) index += n + 1 return test_cases # Example usage: input_str = \\"2n3n10 20n15 25n20 30n3n2 3n3 4n1 2\\" test_cases = parse_input(input_str) print(max_non_overlapping_events(test_cases)) # Output should be [2, 3]"},{"question":"A smartphone application requires users to set up a password that follows specific security rules. The rules are as follows: - The password must be at least 8 characters long. - The password must not contain any space characters. - The password must contain at least one uppercase letter. - The password must contain at least one digit. - The password must contain at least one special character. The special characters are: !, @, #, , %, ^, &, *, ( and ). Write a program to validate if a given password meets the above requirements. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string representing a password. ------ Output Format ------ For each test case, print \\"VALID\\" if the password meets all the requirements, otherwise print \\"INVALID\\". ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ length of the password ≤ 10^{5} ----- Sample Input 1 ------ 4 SecurePaword123 12345678 InvaliD @9 Valid-P@ssW0rd ----- Sample Output 1 ------ VALID INVALID INVALID VALID ----- Explanation 1 ------ - Test case 1: The password \\"SecurePaword123\\" is valid because it is longer than 8 characters, contains no space, has uppercase letters, digits, and special characters. - Test case 2: The password \\"12345678\\" is invalid because it lacks an uppercase letter and special characters. - Test case 3: The password \\"InvaliD @9\\" is invalid because it contains a space character. - Test case 4: The password \\"Valid-P@ssW0rd\\" is valid because it meets all the requirements without having any spaces and includes at least one uppercase letter, one digit, and one special character.","solution":"import re def validate_passwords(test_cases): results = [] special_characters = re.compile(r\'[!@#%^&*()]\') for password in test_cases: if len(password) < 8: results.append(\\"INVALID\\") elif \' \' in password: results.append(\\"INVALID\\") elif not any(char.isupper() for char in password): results.append(\\"INVALID\\") elif not any(char.isdigit() for char in password): results.append(\\"INVALID\\") elif not special_characters.search(password): results.append(\\"INVALID\\") else: results.append(\\"VALID\\") return results def validate_password_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = data[1:T + 1] results = validate_passwords(test_cases) for result in results: print(result)"},{"question":"In Chef\'s garden, he has a unique plant called the Growth Plant. This plant’s height grows over the days in a peculiar manner. Initially, the height of the plant is h_{0} cm. Each day, its growth follows a sequence of operations defined as follows: 1. If the day is an even number, the plant grows by a cm uniformly. 2. If the day is an odd number, the plant grows by b cm uniformly. Given the initial height h_{0}, the values of a and b, and a number d which represents the number of days, determine the height of the plant after d days. ------ Input ------ The first line contains an integer T, the number of test cases. Each of the next T lines contains four space-separated integers h_{0}, a, b, and d. ------ Output ------ For each test case, output a single integer: the height of the plant after d days. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 0 ≤ h_{0} ≤ 1000 1 ≤ a, b ≤ 100 1 ≤ d ≤ 1000 ----- Sample Input 1 ------ 3 10 2 3 5 20 1 2 4 15 10 5 3 ----- Sample Output 1 ------ 23 26 35 ------ Explanation 1 ------ Example case 1: The plant\'s growth sequence over the 5 days is as follows: - Day 1 (Odd): 10 + 3 = 13 - Day 2 (Even): 13 + 2 = 15 - Day 3 (Odd): 15 + 3 = 18 - Day 4 (Even): 18 + 2 = 20 - Day 5 (Odd): 20 + 3 = 23 Example case 2: The plant\'s growth sequence over the 4 days is as follows: - Day 1 (Odd): 20 + 2 = 22 - Day 2 (Even): 22 + 1 = 23 - Day 3 (Odd): 23 + 2 = 25 - Day 4 (Even): 25 + 1 = 26 Example case 3: The plant\'s growth sequence over the 3 days is as follows: - Day 1 (Odd): 15 + 5 = 20 - Day 2 (Even): 20 + 10 = 30 - Day 3 (Odd): 30 + 5 = 35","solution":"def growth_plant_height(h0, a, b, d): Calculate the height of the plant after d days. Parameters: h0 (int): Initial height of the plant. a (int): Growth in cm on even days. b (int): Growth in cm on odd days. d (int): Number of days. Returns: int: Height of the plant after d days. height = h0 for day in range(1, d + 1): if day % 2 == 0: height += a else: height += b return height def process_test_cases(test_cases): Process multiple test cases and return results. Parameters: test_cases (list): A list of tuples (h0, a, b, d) for each test case. Returns: list: A list of integers representing the heights of the plant after `d` days. results = [] for h0, a, b, d in test_cases: results.append(growth_plant_height(h0, a, b, d)) return results"},{"question":"Given an array of integers, write a function to determine the length of the longest contiguous subarray that contains at most two distinct integers. SAMPLE INPUT 1 1 2 1 SAMPLE OUTPUT 3 Explanation The longest subarray with at most two distinct integers is \\"1, 2, 1\\", which has a length of 3.","solution":"def longest_subarray_with_two_distinct(nums): from collections import defaultdict if not nums: return 0 left = 0 max_len = 0 count = defaultdict(int) for right in range(len(nums)): count[nums[right]] += 1 while len(count) > 2: count[nums[left]] -= 1 if count[nums[left]] == 0: del count[nums[left]] left += 1 max_len = max(max_len, right - left + 1) return max_len"},{"question":"You are tasked with building a reservoir simulation tool. Your tool will model a reservoir with n sectors in a straight line, numbered from 1 to n from left to right. Each sector may contain water, and some sectors may contain a leak preventing any water from accumulating there. Your simulation tool will compute the maximum amount of water that can be trapped after simulating rainfall. A sector can only trap water if there\'s at least one non-leaky sector to its left and one non-leaky sector to its right. Water trapped at each sector depends on the difference of the minimal height of the highest sectors to its left and right. Formally, you are given an integer n (1 ≤ n ≤ 1000) representing the number of sectors, and two arrays of length n: - `heights[i]` representing the height of the sector - `leaks[i]` where 1 indicates a leak and 0 indicates no leak. Calculate the maximum amount of water that can be trapped between the sectors of the reservoir after raining ends. Input: - The first line contains a single integer n (1 ≤ n ≤ 1000). - The second line contains n integers: `heights[0]`, `heights[1]`, ..., `heights[n-1]`. - The third line contains n integers: `leaks[0]`, `leaks[1]`, ..., `leaks[n-1]`. Output: - Output one integer — the maximum amount of water that can be trapped. Example Input 6 0 1 0 2 1 0 1 3 2 1 2 1 0 0 0 0 0 0 0 0 0 0 0 0 Output 6 Input 6 3 0 1 3 0 5 0 0 0 0 0 0 Output 8 Note In the first example, the maximum amount of water trapped is: 6 units in the structure (height = [0,1,0,2,1,0,1,3,2,1,2,1]). In the second example, the maximum amount of water trapped is 8 units in the structure (height = [3,0,1,3,0,5]).","solution":"def calculate_water_trapped(n, heights, leaks): if n <= 2: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): if leaks[i] == 1: left_max[i] = 0 else: left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): if leaks[i] == 1: right_max[i] = 0 else: right_max[i] = max(right_max[i + 1], heights[i]) water_trapped = 0 for i in range(n): if leaks[i] == 1: continue height = min(left_max[i], right_max[i]) if height > heights[i]: water_trapped += height - heights[i] return water_trapped"},{"question":"# Definition **_Sum of Square Roots_** is the number that represents the total sum of the square roots of all digits within the given number. ____ # Task **_Given_** a number, **_Find the sum of the square roots of all digits_**. ____ # Warm-up (Highly recommended) # [Mathematics and Arrays Series](https://www.codewars.com/collections/mathematics-and-arrays) ___ # Notes * The number can be of any length * Round the resulting sum to 2 decimal places and return it as a string. * The number passed is always **_Positive_** and non-zero. ___ # Input >> Output Examples ``` (sum-of-sqr-roots 81) ==> return \\"4.54\\" ``` **_Explanation_**: * **_Since_**, the number 81 has digits [8, 1]. * The square root of 8 is approximately 2.83. * The square root of 1 is 1.00. * The sum is 2.83 + 1.00 = 3.83 rounded to 2 decimal places. Hence, the result is \\"3.83\\". ___ ``` (sum-of-sqr-roots 12345) ==> return \\"8.38\\" ``` **_Explanation_**: * **_Since_**, the number 12345 has digits [1, 2, 3, 4, 5]. * The square roots are approximately [1.00, 1.41, 1.73, 2.00, 2.24]. * The sum of these values is approximately 8.38 rounded to 2 decimal places. Hence, the result is \\"8.38\\". ___ ``` (sum-of-sqr-roots 999) ==> return \\"9.00\\" ``` **_Explanation_**: * **_Since_**, the number 999 has digits [9, 9, 9]. * The square root of 9 is 3.00. * Summing 3.00 three times gives 9.00. * Hence, the result is \\"9.00\\". ___ # [Mathematics and Arrays Series](https://www.codewars.com/collections/mathematics-and-arrays) # [For More Enjoyable Katas](http://www.codewars.com/users/MathGenius/authored) ___ ALL translations are welcomed Enjoy Learning !! # Math Wizard","solution":"import math def sum_of_square_roots(n): Given a number n, returns the sum of the square roots of all digits. The sum is rounded to 2 decimal places and returned as a string. digits = [int(digit) for digit in str(n)] sqr_roots_sum = sum(math.sqrt(digit) for digit in digits) return f\\"{sqr_roots_sum:.2f}\\""},{"question":"Maze Solver Bob and Alice are playing another board game. The game is played on an H by W grid. Initially, the grid contains open paths (.) and walls (#). Bob can play first and he can place a wall on any open path to block it. Alice’s goal is to start from the top-left corner of the grid and find a way to reach the bottom-right corner of the grid avoiding walls. Alice and Bob take turns alternately starting with Bob. Bob places one wall in each of his turns while Alice tries to navigate through the grid in her turn. Your task is to determine whether Alice can navigate from the top-left corner to the bottom-right corner of the grid given that Bob places walls optimally. Input The input consists of multiple datasets. Each dataset is given in the following format: > H W > Grid The first line contains two integers H and W (1 ≤ H, W ≤ 500) representing the number of rows and columns in the grid. The following H lines each contain a string of W characters. Each character is either \'.\' representing an open path or \'#\' representing a wall. The end of the input is indicated by a single line containing two zeros. Output For each dataset, output \\"Yes\\" if Alice can navigate from the top-left corner to the bottom-right corner, or \\"No\\" if she cannot. Sample Input 3 3 ..# .#. ... 3 3 ..# # ... 4 4 .... .#.# .... .... 0 0 Sample Output Yes No Yes In the first dataset, Alice can escape through the only available path. In the second dataset, Bob blocks Alice’s only path. In the third dataset, there are multiple paths for Alice to navigate, so she can still manage to reach the bottom-right corner.","solution":"from collections import deque def valid(r, c, H, W, grid, visited): return 0 <= r < H and 0 <= c < W and grid[r][c] == \'.\' and not visited[r][c] def bfs(grid, H, W): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = [[False]*W for _ in range(H)] visited[0][0] = True while queue: r, c = queue.popleft() if r == H-1 and c == W-1: return True for dr, dc in directions: nr, nc = r + dr, c + dc if valid(nr, nc, H, W, grid, visited): visited[nr][nc] = True queue.append((nr, nc)) return False def can_alice_escape(grid, H, W): if grid[0][0] != \'.\' or grid[H-1][W-1] != \'.\': return \\"No\\" if bfs(grid, H, W): return \\"Yes\\" return \\"No\\" def process_input(input_data): results = [] i = 0 while True: H, W = map(int, input_data[i].split()) if H == 0 and W == 0: break grid = [input_data[i+j+1] for j in range(H)] results.append(can_alice_escape(grid, H, W)) i += H + 1 return results # Example usage: input_data = [ \\"3 3\\", \\"..#\\", \\".#.\\", \\"...\\", \\"3 3\\", \\"..#\\", \\"#\\", \\"...\\", \\"4 4\\", \\"....\\", \\".#.#\\", \\"....\\", \\"....\\", \\"0 0\\" ] print(process_input(input_data))"},{"question":"**Write a function called `findMaxConsecutiveOnes` that takes an array of binary digits (0s and 1s) and returns the maximum number of consecutive 1s in the array. For example, given the array [1, 1, 0, 1, 1, 1], the function should return 3.**","solution":"def findMaxConsecutiveOnes(nums): Finds the maximum number of consecutive 1s in a binary array. Args: nums (List[int]): A list of binary digits (0s and 1s). Returns: int: The maximum number of consecutive 1s in the array. max_count = 0 current_count = 0 for num in nums: if num == 1: current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 return max_count"},{"question":"Given an undirected graph represented as an adjacency list, count the number of connected components in the graph. Input The first line of input will contain two integers n and m (1 ≤ n ≤ 1000, 0 ≤ m ≤ 5000) where n is the number of vertices and m is the number of edges. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), representing an edge between vertices u and v. Output Print a single integer, the number of connected components in the graph. Examples Input 5 3 1 2 2 3 4 5 Output 2 Input 6 5 1 2 2 3 4 5 5 6 4 6 Output 2 Note In the first example, there are two connected components: {1, 2, 3} and {4, 5}. In the second example, there are two connected components: {1, 2, 3} and {4, 5, 6}.","solution":"def count_connected_components(n, edges): from collections import defaultdict, deque # Create an adjacency list graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) while queue: vertex = queue.popleft() for neighbor in graph[vertex]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) components = 0 for vertex in range(1, n+1): if vertex not in visited: bfs(vertex) components += 1 return components # Example usage: # n = 5 # edges = [(1, 2), (2, 3), (4, 5)] # print(count_connected_components(n, edges)) # Output: 2 # n = 6 # edges = [(1, 2), (2, 3), (4, 5), (5, 6), (4, 6)] # print(count_connected_components(n, edges)) # Output: 2"},{"question":"A company has launched a new software application. To ensure its stability, the company wants to keep track of an error log. The error log is a sequence of errors that may contain duplicate error messages. They plan to create a summary of the errors, showing how many times each unique error message appears sequentially. Write a program that processes a given sequence of error messages and produces a summary. The summary should list each unique error message and the count of its appearances in order of their first occurrence. -----Input----- The first line contains integer k (1 ≤ k ≤ 10^5). The next k lines each contain an error message. Each message consists of lowercase and uppercase English letters and whitespace. The length of each message does not exceed 100 characters. -----Output----- For each unique error message, print the message followed by an integer representing the count of its appearances in the sequence. The summary should be in the order of the first appearance of each message. -----Examples----- Input 6 File not found Access denied File not found Server is down File not found Access denied Output File not found 3 Access denied 2 Server is down 1 Input 4 Disk full Network error Disk full Disk full Output Disk full 3 Network error 1","solution":"def summarize_errors(k, error_messages): Processes the given sequence of error messages and returns a summary. k: int - number of error messages error_messages: list of str - list of error messages Returns a list of tuples containing unique error messages and their counts in order of first occurrence. error_count = {} error_order = [] for msg in error_messages: if msg not in error_count: error_count[msg] = 1 error_order.append(msg) else: error_count[msg] += 1 summary = [(msg, error_count[msg]) for msg in error_order] return summary"},{"question":"You are given an array of integers A consisting of N elements. Your task is to find the maximum sum of any continuous subarray of A such that the subarray contains at least one element. # Input The first line contains a single integer N, indicating the number of elements in the array A (1 ≤ N ≤ 10^5). The second line contains N space-separated integers representing the elements of the array A, where each integer Ai is in the range [-10^4, 10^4]. # Output Print a single integer which is the maximum sum of any continuous subarray of A. # Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 1 -1 Output -1","solution":"def max_subarray_sum(arr): Finds the maximum sum of any continuous subarray of the given array. Parameters: arr (List[int]): The input list of integers. Returns: int: The maximum sum of any continuous subarray. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"An online bookstore keeps track of its book inventory using two lists: one containing the quantity of each book, and another containing the price of each book in dollars. These lists are parallel, meaning the i-th element of the quantity list corresponds to the i-th element of the price list. The bookstore wants to know the maximum revenue they can generate by selling books. The revenue is defined as the total sales amount in dollars. However, to promote variety and encourage buyers to purchase different types of books, the bookstore enforces a rule: a buyer can buy at most one book of each type in a single transaction, but a buyer can make multiple transactions. Given the quantity and price lists, your task is to determine the maximum possible revenue the bookstore can generate under these conditions. ------ Input Format ------ - The first line will contain T, the number of test cases. Then the test cases follow. - The first line of each test case contains one integer N, the number of different books. - The second line of each test case contains N integers, denoting the elements of the quantity list. - The third line of each test case contains N integers, denoting the elements of the price list. ------ Output Format ------ For each test case, output in a single line the maximum possible revenue. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} 0 ≤ quantity[i] ≤ 1000 0 ≤ price[i] ≤ 10^{6} - Sum of N over all test cases does not exceed 2 cdot 10^{5} ----- Sample Input 1 ------ 2 3 2 1 4 5 3 2 2 0 3 10 7 ----- Sample Output 1 ------ 20 21 ----- Explanation 1 ------ Test case 1: - The maximum revenue can be calculated by summing up the product of quantities and prices for each book: (2*5) + (1*3) + (4*2) = 10 + 3 + 8 = 21. Test case 2: - There is no revenue from the 1st book since its quantity is 0. The revenue from the 2nd book is 3 * 7 = 21.","solution":"def max_revenue(T, test_cases): result = [] for case in test_cases: N, quantities, prices = case revenue = 0 for i in range(N): revenue += quantities[i] * prices[i] result.append(revenue) return result"},{"question":"A treasure hunter finds himself in a dense jungle with an ancient map that indicates the location of N treasure chests. Each chest is locked with a unique combination lock that can only be opened with specific tools. The treasure hunter has T different tools, but each tool can only open one specific lock and works exactly once. The hunter also has S special keys, and each special key can open any lock. The hunter is trying to figure out the minimum number of steps needed to open all the chests, using both his unique tools and special keys. A step in this context can be either using a tool or a special key to open a lock. Input: - First line of input contains an integer t which represents the number of test cases. - The next t lines each contain three integers N, T, and S. Output: Print the minimum number of steps required to open all chests for each test case. Constraints: 1 ≤ N ≤ 1000 0 ≤ T, S ≤ N Example Input: 3 3 2 1 5 3 2 4 4 0 Example Output: 3 5 4 Explanation: Test case 1: The hunter has 3 chests, 2 tools, and 1 special key. He can open the first 2 chests with the tools and the last one with the special key. Test case 2: The hunter has 5 chests, 3 tools, and 2 special keys. He can open all chests by using 3 tools and 2 special keys. Test case 3: The hunter has 4 chests and 4 tools, but no special keys. He can open each chest with a tool, requiring 4 steps.","solution":"def minimum_steps_to_open_chests(N, T, S): Returns the minimum number of steps required to open all chests given N chests, T tools, and S special keys. if T + S >= N: return N else: return T + S def process_test_cases(test_cases): results = [] for N, T, S in test_cases: results.append(minimum_steps_to_open_chests(N, T, S)) return results"},{"question":"You have been hired to work on a Zoo management software system. Part of your job is to write a function that will display the layout of the animal enclosures based on certain guidelines. Given a square zoo grid of size S, where each cell represents an enclosure, generate a pattern in which each row represents the same species of animals and should be filled with the first letter of the species name in uppercase. The pattern for the enclosures must be created as follows (according to the rules from the zoo): - The first row should be filled with the letter \'A\' (for Alligators). - The second row should be filled with the letter \'B\' (for Bears). - The third row should be filled with the letter \'C\' (for Crocodiles). - And so on, up to the 26th row when necessary, using the subsequent letters of the alphabet in sequence (A-Z). Each test case must be separated by an empty line in the output. Input: The first line of the input contains the number of test cases \'N\'. Each of the next N lines contains a single integer \'S\', the size of the zoo\'s square grid. Output: Print the layout for each test case as per the given rules and separate two different test cases with an empty line. Constraints: N ≤ 10 S ≤ 26 SAMPLE INPUT 2 3 5 SAMPLE OUTPUT AAA BBB CCC AAAAA BBBBB CCCCC DDDDD EEEEE","solution":"def zoo_enclosures_layout(num_cases, sizes): Generates the layout of the animal enclosures for each test case based on the input sizes. Parameters: num_cases (int): Number of test cases. sizes (list of int): List of sizes for each test case. Returns: list of str: List containing the layout of animal enclosures for each test case, with each case\'s layout as a single string separated by newlines and an empty line between test cases. result = [] for size in sizes: layout = [] for i in range(size): layout.append(chr(65 + i) * size) result.append(\'n\'.join(layout)) return result"},{"question":"A mobile application focuses on certain categories of books stored in a library. Each book in the library is characterized by its category and unique identifier. Because the query system relies heavily on efficient searches, the developers implemented a new system to maintain a collection of book IDs in a sorted order for each category. Your task is to create a program that allows insertion and deletion of book IDs for a given category and supports the following operations efficiently: 1. Add a book ID to a category. 2. Delete a book ID from a category. 3. Retrieve the k-th smallest book ID in a category. Input format: - The first line contains an integer Q, the number of queries (1 ≤ Q ≤ 10^5). - The next Q lines each represent a query. There are three types of queries: - `1 category bookID` denotes adding the bookID to the given category. - `2 category bookID` denotes deleting the bookID from the given category. - `3 category k` asks for the k-th smallest bookID in the given category (1 ≤ k ≤ the number of books currently in the category). Output format: - For each type `3` query, you need to print the k-th smallest book ID in the requested category. If k is greater than the number of books in the category, print \\"invalid\\". Constraints: - The category is a string with a maximum length of 100. - The bookID is an integer in the range [1, 10^9]. Sample Input: 6 1 Fantasy 1001 1 Fantasy 500 3 Fantasy 1 2 Fantasy 500 3 Fantasy 1 3 Fantasy 2 Sample Output: 500 1001 invalid Explanation: - The first query adds bookID `1001` to the `Fantasy` category. The sorted list now is [1001]. - The second query adds bookID `500` to the `Fantasy` category. The sorted list now is [500, 1001]. - The third query asks for the 1st smallest bookID in the `Fantasy` category. The smallest bookID is `500`. - The fourth query removes bookID `500` from the `Fantasy` category. The sorted list now is [1001]. - The fifth query asks for the 1st smallest bookID in the `Fantasy` category. The smallest bookID is now `1001`. - The sixth query asks for the 2nd smallest bookID in the `Fantasy` category, but there is only one bookID `1001`, so the output is \\"invalid\\".","solution":"from collections import defaultdict import bisect class Library: def __init__(self): # Using a dictionary to maintain sorted lists for each category self.books = defaultdict(list) def add_book(self, category, book_id): # Using binary search to insert in sorted order bisect.insort(self.books[category], book_id) def delete_book(self, category, book_id): # Find the index of the book_id and remove it from the list index = bisect.bisect_left(self.books[category], book_id) if index < len(self.books[category]) and self.books[category][index] == book_id: self.books[category].pop(index) def get_kth_smallest(self, category, k): # Return the k-th smallest book ID in the category if k <= len(self.books[category]): return self.books[category][k-1] else: return \\"invalid\\" def process_queries(queries): library = Library() results = [] for query in queries: parts = query.split() command = int(parts[0]) category = parts[1] if command == 1: book_id = int(parts[2]) library.add_book(category, book_id) elif command == 2: book_id = int(parts[2]) library.delete_book(category, book_id) elif command == 3: k = int(parts[2]) result = library.get_kth_smallest(category, k) results.append(result) return results"},{"question":"Given a string s consisting of lowercase English letters only, you have to perform the following operations on s exactly once: 1. Delete any single character of the string. 2. Choose exactly two different positions in the remaining string and swap the characters at those positions. After performing these operations, check if the resulting string can be a palindrome. If it is possible to obtain a palindrome, print \\"YES\\"; otherwise, print \\"NO\\". Input The input contains a single line: the string s (1 ≤ |s| ≤ 50), consisting only of lowercase English letters. Output Print a single string \\"YES\\" if it is possible to make a palindrome after one delete and one swap; otherwise, print \\"NO\\". Examples Input abca Output YES Input abc Output NO Note In the first example, deleting the character \'b\' from \\"abca\\" and swapping the first and last characters results in \\"aca\\". In the second example, no possible single deletion and swap will result in a palindrome.","solution":"def can_form_palindrome(s): This function checks if it is possible to form a palindrome by performing exactly one delete operation and one swap operation on the string. # Function to check if a string can be rearranged into a palindrome def can_form_palindrome_by_rearranging(s): from collections import Counter counts = Counter(s) odd_count = sum(1 for count in counts.values() if count % 2 != 0) return odd_count <= 1 # Check if the input string is already a palindrome if s == s[::-1]: return \\"YES\\" # Try deleting each character and check if resulting substrings can be rearranged into a palindrome for i in range(len(s)): new_str = s[:i] + s[i + 1:] if can_form_palindrome_by_rearranging(new_str): return \\"YES\\" return \\"NO\\""},{"question":"E - Longest Increasing Subsequence in a Circular Array Problem Statement You are given a circular array A of integers of length n (i.e., the next element of A[n-1] is A[0]). Your task is to compute the length of the longest increasing subsequence in the circular array. Input The dataset is formatted as follows: n A_1 A_2 ... A_n The first line of the input contains a single integer n (1 leq n leq 10^5), the length of the array. The second line contains n integers A_1, A_2, ..., A_n (1 leq A_i leq 10^9), representing the elements of the array A. Output Print the length of the longest increasing subsequence in the circular array. Sample Input 1 6 2 3 1 5 4 6 Output for the Sample Input 1 4 Sample Input 2 5 10 20 30 40 50 Output for the Sample Input 2 5 Sample Input 3 3 4 5 6 Output for the Sample Input 3 3 Sample Input 4 1 7 Output for the Sample Input 4 1 Example Input 6 2 3 1 5 4 6 Output 4","solution":"def longest_increasing_subsequence_circular(arr): n = len(arr) if n == 0: return 0 # Function to calculate LIS in a linear array def lis(arr): from bisect import bisect_left sub = [] for val in arr: pos = bisect_left(sub, val) if pos == len(sub): sub.append(val) else: sub[pos] = val return len(sub) # Duplicate the array to handle circularity extended_arr = arr + arr[:-1] max_lis = 0 for i in range(n): max_lis = max(max_lis, lis(extended_arr[i:i+n])) return max_lis # Parsing input data def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) # length of the array arr = list(map(int, data[1:])) print(longest_increasing_subsequence_circular(arr))"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. Your task is to make all elements of the array equal by applying the following operation as many times as needed: Choose one element of the array and increase or decrease it by 1. Your goal is to determine the minimum number of operations required to make all the elements of the array equal. Input The first line contains one integer t — the number of test cases (1 ≤ t ≤ 1000). Next 2*t lines contain the descriptions of the test cases, two lines for each. The first line of each test case contains an integer n (1 ≤ n ≤ 50,000) — the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 1,000,000). It is guaranteed that the sum of n across all test cases does not exceed 100,000. Output For each test case, print one integer — the minimum number of operations required. Example Input 3 3 1 2 3 4 1 1 1 1 2 1 1000000 Output 2 0 999999 Note In the first test case, one possible way to make all elements equal is to choose the second element (2) and decrease it by 1 to make it 1, and then choose the third element (3) and decrease it twice to make it 1. This will take a total of 1 + 2 = 3 operations. Alternatively, choosing 2 as the target value would require a similar number of operations (increase 1 by 1, decrease 3 by 1). For the optimal solution, we find the median of the array, which minimizes the total number of operations.","solution":"def min_operations_to_make_equal(arr): Returns the minimum number of operations required to make all the elements of the array equal. arr.sort() median = arr[len(arr) // 2] return sum(abs(x - median) for x in arr) def solve(test_cases): results = [] for arr in test_cases: results.append(min_operations_to_make_equal(arr)) return results"},{"question":"A sequence of words is given and your task is to sort these words based on the following criteria: 1. Sort the words primarily based on their length in ascending order. 2. If two words have the same length, sort them lexicographically. Write a function to perform this task and output the result. Input Format A single line containing words separated by spaces. Constraints All words will contain only lowercase English letters and no punctuation. 1 leq text{Number of words} leq 10^5 1 leq text{Length of each word} leq 100 Output Format Print the sorted list of words, each word separated by a single space. Sample Input ``` pear apple banana grape orange kiwi ``` Sample Output ``` kiwi pear apple grape banana orange ``` Explanation The words are first sorted by their lengths (4, 4, 5, 5, 6, 6), and then by lexicographical order where lengths are the same (apple comes before grape because \'a\' comes before \'g\').","solution":"def sort_words(word_str): Sorts the given sequence of words based on their lengths in ascending order. If two words have the same length, they are sorted lexicographically. words = word_str.split() sorted_words = sorted(words, key=lambda x: (len(x), x)) return \\" \\".join(sorted_words)"},{"question":"Given an array of integers, you are required to find the number of subarrays that can be rearranged to be in non-decreasing order. A subarray is formed by deleting some (possibly zero) elements from the beginning and some (possibly zero) elements from the end of the array. ----- Input Format ----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the length of the array. - The second line of each test case contains N integers, the elements of the array. ----- Output Format ----- For each test case, output the number of subarrays that can be rearranged to be in non-decreasing order. ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ A[i] ≤ 1000 ----- Sample Input ----- 2 4 4 1 3 2 3 3 1 2 ----- Sample Output ----- 10 6 ----- Explanation ----- Test case 1: The following subarrays can be rearranged to be non-decreasing: [4], [1], [3], [2], [4, 1], [1, 3], [3, 2], [4, 1, 3], [1, 3, 2], [4, 1, 3, 2]. So the answer is 10. Test case 2: All subarrays of the array can be rearranged to be non-decreasing: [3], [1], [2], [3, 1], [1, 2], [3, 1, 2]. So the answer is 6.","solution":"def count_rearrangeable_subarrays(array): Returns the number of subarrays that can be rearranged to be in non-decreasing order. n = len(array) subarray_count = 0 # Function to check if array can be rearranged to non-decreasing order def can_be_rearranged(arr): return True # Since any array can be sorted to be non-decreasing # Check all possible subarrays for start in range(n): for end in range(start, n): subarray = array[start:end+1] if can_be_rearranged(subarray): subarray_count += 1 return subarray_count def solve(test_cases): results = [] for case in test_cases: n, array = case results.append(count_rearrangeable_subarrays(array)) return results"},{"question":"Alex is a programmer who loves to play with numbers. He recently came across an interesting number game and decided to turn it into a challenge for his fellow coders. The game is simple: for a given integer n, determine if n can be expressed as the sum of two or more consecutive positive integers. -----Input----- The input consists of a single integer n (1 leq n leq 10^9). -----Output----- Print \\"YES\\" if n can be expressed as the sum of two or more consecutive positive integers. Otherwise, print \\"NO\\". You can print each letter in any case (upper or lower). -----Examples----- Input 15 Output YES Input 16 Output NO Input 21 Output YES -----Note----- In the first example, 15 can be expressed as the sum of 1 + 2 + 3 + 4 + 5, so the answer is \\"YES\\". In the second example, 16 cannot be expressed as the sum of two or more consecutive positive integers, so the answer is \\"NO\\". In the third example, 21 can be expressed as the sum of 6 + 7 + 8, so the answer is \\"YES\\".","solution":"def can_be_expressed_as_sum(n): Function to determine if a number can be expressed as the sum of two or more consecutive positive integers. # Initial condition: n must be more than 1 to form a sum of consecutive integers if n <= 2: return \\"NO\\" # To be expressible as the sum of consecutive integers, n must not be a power of 2 # Continuously divide by 2 to check if it\'s a power of 2 while n % 2 == 0: n //= 2 # If after all divisions n is not 1, it means it was not a power of 2 if n != 1: return \\"YES\\" else: return \\"NO\\""},{"question":"A city in Byteland is planning to commemorate the Space Exploration Day by arranging special lights along its famous Bytestreet. Bytestreet is a straight road consisting of n lamp posts placed uniformly spaced. Each lamp post can either have a light installed or not. Once a light is installed on a lamp post, it will stay on for the entire night. To make the street more visually appealing, the city administration wants to ensure that the lights follow a specific pattern: if any lamp post has a light installed on it, the next lamp post in the sequence (moving towards the end of the street) must not have a light installed. This means there should not be two consecutive lamp posts both having lights. Given an integer n, return the number of ways to arrange lights on the n lamp posts such that no two consecutive lamp posts have lights. Since the number can be large, provide the result modulo 1000000007 (10^9 + 7). Input The input consists of a single integer n (1 ≤ n ≤ 10^5) — the number of lamp posts along Bytestreet. Output Output a single number — the number of valid arrangements of lights on the lamp posts, modulo 10^9 + 7. Example Input 3 Output 5 Explanation Bytestreet has 3 lamp posts. The valid arrangements are: - No lights: [., ., .] - Lights on post 1 and 3: [L, ., L] - Light on post 1: [L, ., .] - Light on post 2: [., L, .] - Light on post 3: [., ., L] Thus, there are 5 valid arrangements, so the output is 5.","solution":"def count_arrangements(n): MOD = 1000000007 if n == 1: return 2 # Two ways: [.] or [L] # Initialize dp array where dp[i] represents the number of valid configurations for i lamp posts dp = [0] * (n + 1) dp[1] = 2 # Two ways for 1 lamp post: [.] or [L] dp[2] = 3 # Three ways for 2 lamp posts: [., .], [L, .], [., L] for i in range(3, n + 1): dp[i] = (dp[i - 1] + dp[i - 2]) % MOD return dp[n]"},{"question":"Design a function to find all the starting indices of a substring in a given larger string. The function should return a list of starting indices where the substring can be found in the larger string, starting from index 0. If the substring is not found in the larger string, return an empty list. Constraints: * The larger string length L is in the range 1 ≤ L ≤ 10000. * The substring length M is in the range 1 ≤ M ≤ 1000. * Both strings contain only lowercase alphabetical characters. Input: * The first line contains the larger string. * The second line contains the substring. Output: * Return a list of starting indices of the substring in the larger string or an empty list if the substring is not found. Example Input `ababcabc` `abc` Output `[2, 5]` Input `aaaaa` `aa` Output `[0, 1, 2, 3]` Input `heloworld` `bye` Output `[]`","solution":"def find_substring_indices(larger_string, substring): Returns a list of starting indices where the substring is found in the larger string. indices = [] substring_len = len(substring) for i in range(len(larger_string) - substring_len + 1): if larger_string[i:i + substring_len] == substring: indices.append(i) return indices"},{"question":"You are given an array of N integers. Your task is to determine if the array is sorted in non-decreasing order. ------ Input Format ------ - The first line contains a single integer T - the number of test cases. - The first line of each test case contains an integer N - the number of elements in the array. - The second line of each test case contains N integers separated by space representing the elements of the array. ------ Output Format ------ For each test case, print \\"Yes\\" if the array is sorted in non-decreasing order. Otherwise, print \\"No\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ text{Array elements} ≤ 1000 ------ Sample Input ------ 3 4 1 2 3 4 3 1 3 2 5 2 2 2 2 2 ------ Sample Output ------ Yes No Yes ------ Explanation ------ Test Case 1: The array [1, 2, 3, 4] is sorted in non-decreasing order. Test Case 2: The array [1, 3, 2] is not sorted in non-decreasing order. Test Case 3: The array [2, 2, 2, 2, 2] is sorted in non-decreasing order.","solution":"def is_sorted_non_decreasing(arr): This function checks if the given array arr is sorted in non-decreasing order. Returns \'Yes\' if the array is sorted in non-decreasing order, otherwise \'No\'. for i in range(1, len(arr)): if arr[i] < arr[i - 1]: return \\"No\\" return \\"Yes\\" def process_test_cases(t, test_cases): Processes multiple test cases and determines if each array is sorted in non-decreasing order. Parameters: t (int): number of test cases test_cases (list of lists): the test cases where each test case is a list containing N followed by the array of N integers. Returns: list: a list of strings \\"Yes\\" or \\"No\\" for each test case. results = [] for test_case in test_cases: n = test_case[0] arr = test_case[1] results.append(is_sorted_non_decreasing(arr)) return results"},{"question":"A country has n cities, connected by m undirected roads. The roads are \\"good\\" or \\"bad\\". Roads are bidirectional, so if there\'s a road between city a and city b, you can travel in both directions. Additionally, the country\'s government assigns a safety level s_i to each city i. If you are in a city with safety level s, you can only travel to another city if either the road is good, or the safety level of the destination city is greater than or equal to s. You are tasked with finding the minimum cost to travel from the starting city 1 to the destination city n. The cost to travel through a road depends on the type of the road: \\"good\\" roads have a travel cost of 1, while \\"bad\\" roads have a travel cost of 2. Determine the minimum travel cost from city 1 to city n or determine if it\'s impossible to reach city n from city 1. -----Input----- - The first line contains two integers n and m (1 leq n, m leq 100000), the number of cities and roads, respectively. - The second line contains n integers, s_1, s_2, ldots, s_n (1 leq s_i leq 10^9), the safety levels of the cities. - Each of the next m lines contains three integers u_i, v_i, and t_i (1 leq u_i, v_i leq n, t_i in {0, 1}) — numbers of cities connected by road and its type, where 0 denotes a \\"good\\" road, and 1 denotes a \\"bad\\" road. -----Output----- On the first line, output the minimum travel cost from city 1 to city n. If there is no way to reach city n, output -1. -----Examples----- Input 5 5 1 2 3 4 5 1 2 0 2 3 1 2 4 0 3 4 0 4 5 1 Output 4 Input 4 3 3 2 2 1 1 2 1 2 3 1 3 4 0 Output -1","solution":"import heapq def minimum_travel_cost(n, m, safety_levels, roads): graph = [[] for _ in range(n)] for u, v, t in roads: graph[u-1].append((v-1, t)) graph[v-1].append((u-1, t)) def dijkstra(): pq = [(0, 0)] dist = [float(\'inf\')] * n dist[0] = 0 while pq: cost, u = heapq.heappop(pq) if cost > dist[u]: continue for v, t in graph[u]: if t == 0 or safety_levels[v] >= safety_levels[u]: new_cost = cost + (2 if t == 1 else 1) if new_cost < dist[v]: dist[v] = new_cost heapq.heappush(pq, (new_cost, v)) return dist[n-1] if dist[n-1] != float(\'inf\') else -1 return dijkstra()"},{"question":"A factory produces widgets with a specific recipe. Each widget requires a certain number of components of various types. You are responsible for ensuring that the factory always has enough components in stock to fulfill an order for any number of widgets. You need to write a program that calculates the minimum number of each component required to produce the ordered number of widgets. Each component is represented by an integer, and each widget requires a fixed number of each component type. Given the numbers of each component required for one widget, and the number of widgets to be produced, determine the minimum number of each component needed. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 1000), where n is the number of component types, and m is the number of widgets to be produced. The second line contains n non-negative integers c_1, c_2, ..., c_n (0 ≤ c_i ≤ 100), where c_i is the number of components of type i required to produce one widget. -----Output----- Print n integers, each representing the minimum number of each component required to produce m widgets. -----Examples----- Input 3 5 2 3 1 Output 10 15 5 Input 4 10 0 1 2 3 Output 0 10 20 30 Input 2 7 4 5 Output 28 35","solution":"def calculate_components(n, m, components): Calculate the minimum number of each component required to produce m widgets. Parameters: n (int): Number of component types. m (int): Number of widgets to be produced. components (list of int): Number of components of each type required for one widget. Returns: list of int: Minimum number of each component required to produce m widgets. return [c * m for c in components] # Example usage: # n, m = 3, 5 # components = [2, 3, 1] # print(calculate_components(n, m, components)) # Output: [10, 15, 5]"},{"question":"Design a data structure that supports all following operations in average O(1) time. 1. `insert(val)`: Inserts an item val to the set if not already present. 2. `remove(val)`: Removes an item val from the set if present. 3. `get_random()`: Returns a random element from current set of elements. Each element must have the same probability of being returned. Example: ``` Input: [\\"RandomizedSet\\", \\"insert\\", \\"remove\\", \\"insert\\", \\"get_random\\", \\"remove\\", \\"insert\\", \\"get_random\\"] [[], [1], [2], [2], [], [1], [2], []] Output: [null, true, false, true, 2, true, false, 2] Explanation: RandomizedSet randomSet = new RandomizedSet(); randomSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully. randomSet.remove(2); // Returns false as 2 does not exist in the set. randomSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2]. randomSet.get_random(); // get_random() should return either 1 or 2 randomly. randomSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2]. randomSet.insert(2); // 2 was already in the set, so return false. randomSet.get_random(); // Since 2 is the only number in the set, get_random() will always return 2. ``` Constraints: - All values are in the range [1, 2 * 10^5]. - The number of operations will be in the range [1, 2 * 10^5]. - Only call get_random if there is at least one element in the set.","solution":"import random class RandomizedSet: def __init__(self): Initialize your data structure here. self.data = {} self.list = [] def insert(self, val: int) -> bool: Inserts a value to the set. Returns true if the set did not already contain the specified element. if val in self.data: return False self.data[val] = len(self.list) self.list.append(val) return True def remove(self, val: int) -> bool: Removes a value from the set. Returns true if the set contained the specified element. if val not in self.data: return False last_element = self.list[-1] idx_to_remove = self.data[val] self.list[idx_to_remove] = last_element self.data[last_element] = idx_to_remove self.list.pop() del self.data[val] return True def get_random(self) -> int: Get a random element from the set. return random.choice(self.list)"},{"question":"Write a function that takes a string as an input and returns a new string with the characters of the original string reversed, with each character case swapped. That is, lowercase characters should become uppercase and vice versa. If any character is non-alphabetic, it should remain unchanged. Example ```python reverse_and_swap_case(\\"Hello, World!\\") ``` Should return `\\"!DLROw ,OLLEh\\"`","solution":"def reverse_and_swap_case(s): Takes a string and returns a new string with characters reversed and cases swapped. Args: - s (str): the input string Returns: - str: the transformed string return \'\'.join([char.swapcase() for char in s[::-1]])"},{"question":"Daenerys has recently taken an interest in learning about fascinating number patterns. She discovers a sequence defined by the function f(n) = n text{ XOR} (n << 1), where ( n << 1 ) denotes the left bitwise shift of ( n ) by 1 position. She decides to generate a list of values for this function over a range of integers and becomes intrigued by the output pattern. Jon wants to impress Daenerys by writing an efficient program that can compute the result of the function for several values of ( n ) quickly. Given an integer ( n ), help Jon by providing the value of ( f(n) ). -----Input Format----- - First line contains an integer ( T ), which denotes the number of test cases. - Each of the next ( T ) lines contain a single integer ( n ). -----Output Format----- - For each test case, print one integer, which is the value of ( f(n) ). -----Constraints----- - ( 1 leq T leq 100000 ) - ( 1 leq n leq 10^{18} ) -----Sample Input----- 3 1 2 10 -----Sample Output----- 3 6 30","solution":"def compute_f(n): Compute the value of f(n) = n XOR (n << 1) return n ^ (n << 1) def process_test_cases(test_cases): Process a list of test cases and return the results for each case. return [compute_f(n) for n in test_cases]"},{"question":"Write a function called factorial that computes the factorial of a given non-negative integer. Example n = 5 Returns 120. Function Description Complete the factorial function in the editor below. factorial has the following parameters: int n: a non-negative integer Returns - int: factorial of n Constraints 0 le n le 20 Sample Input n = 4 Sample Output 24 Explanation 4! = 4 times 3 times 2 times 1 = 24.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result *= i return result"},{"question":"A photo editing software needs to implement an automatic collage creator. Given a array of provided images, the selected images must form a rectangular arrangement with rows and columns. However, to make the collage visually appealing, certain rules must be met. Each photo is defined by its unique ID and was taken during a certain year. The photos are grouped into rows and columns based on their years, such that all photos in a particular row must be taken in the same year and all photos in a particular column should have distinct years. You are provided with a list of photos, each described by an integer ID and the year it was taken. Your task is to determine the maximum dimensions (rows and columns) of a collage that can be created from the given images while satisfying the rules mentioned above. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of photos. Each of the next n lines contains two integers id and year (1 ≤ id ≤ 1,000,000, 1900 ≤ year ≤ 2023) — the unique ID of the photo and the year it was taken. Output Print two integers a and b — the maximum number of rows and columns, respectively, that the collage can have. Examples Input 6 1 2005 2 2005 3 2006 4 2007 5 2006 6 2005 Output 3 3 Input 4 1 2001 2 2002 3 2001 4 2003 Output 3 2 Input 3 1 2010 2 2011 3 2012 Output 1 3","solution":"def max_collage_dimensions(n, photos): from collections import defaultdict year_count = defaultdict(int) photo_count_per_year = defaultdict(int) for photo in photos: id, year = photo year_count[year] += 1 photo_count_per_year[year] += 1 max_rows = max(year_count.values()) max_columns = len(year_count) return max_rows, max_columns # Example usage: n = 3 photos = [(1, 2010), (2, 2011), (3, 2012)] print(max_collage_dimensions(n, photos)) # Output: 1, 3"},{"question":"There is a city with N intersections and M bidirectional roads connecting some pairs of intersections. You work for a company that operates a delivery service in the city. Your task is to determine if it\'s possible to start from a given intersection and return to the same intersection after visiting all other intersections exactly once. Formally, given an undirected graph with N nodes and M edges, you need to determine whether there exists a Hamiltonian cycle in the graph. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of multiple lines: - The first line contains two integers N and M. - The next M lines each contain two space-separated integers u and v, indicating a bidirectional edge between intersection u and intersection v. ------ Output Format ------ For each test case, output \\"YES\\" if there exists a Hamiltonian cycle, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10 0 ≤ M ≤ binom{N}{2} ----- Sample Input 1 ------ 3 3 3 1 2 2 3 3 1 4 4 1 2 2 3 3 4 4 1 4 3 1 2 2 3 3 4 ----- Sample Output 1 ------ YES YES NO ----- Explanation 1 ------ Test case 1: The intersections and roads form a triangle, which is a Hamiltonian cycle. Test case 2: The intersections and roads form a square, which has a Hamiltonian cycle going through all intersections. Test case 3: One of the intersections is missing a connection needed to form a Hamiltonian cycle, so it is not possible.","solution":"def find_hamiltonian_cycle(n, edges): from itertools import permutations # Create an adjacency matrix adj_matrix = [[0] * n for _ in range(n)] for u, v in edges: adj_matrix[u-1][v-1] = 1 adj_matrix[v-1][u-1] = 1 # Check all possible permutations (Hamiltonian paths) for perm in permutations(range(n)): valid_path = True for i in range(len(perm) - 1): if adj_matrix[perm[i]][perm[i + 1]] == 0: valid_path = False break if valid_path and adj_matrix[perm[-1]][perm[0]] == 1: return \\"YES\\" return \\"NO\\" def process_test_cases(test_cases): results = [] for n, m, edges in test_cases: result = find_hamiltonian_cycle(n, edges) results.append(result) return results"},{"question":"Rotate a matrix 90 degrees clockwise. Given an n x n matrix, rotate the image by 90 degrees (clockwise). You have to rotate the matrix in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example 1: Input: [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [7, 4, 1], [8, 5, 2], [9, 6, 3] ] Example 2: Input: [ [ 5, 1, 9, 11], [ 2, 4, 8, 10], [13, 3, 6, 7], [15, 14, 12, 16] ] Output: [ [15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7, 10, 11] ]","solution":"def rotate(matrix): Rotates the matrix by 90 degrees clockwise in-place. n = len(matrix) # Transpose the matrix for i in range(n): for j in range(i, n): matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j] # Reverse each row for i in range(n): matrix[i].reverse()"},{"question":"You are given four space-separated integers representing the dimensions of a 3D matrix. Task Your task is to create a 3D NumPy array based on the dimensions provided and fill it with increasing values starting from 0. Then, print the resulting array. Input Format A single line of input containing four space-separated integers a, b, c, and d, where: a - number of matrices b - number of rows in each matrix c - number of columns in each matrix d - depth of each element within a column Output Format Print the resulting 3D NumPy array as specified. Sample Input 2 3 4 2 Sample Output [[[[ 0 1] [ 2 3] [ 4 5] [ 6 7]] [[ 8 9] [10 11] [12 13] [14 15]] [[16 17] [18 19] [20 21] [22 23]]] [[[24 25] [26 27] [28 29] [30 31]] [[32 33] [34 35] [36 37] [38 39]] [[40 41] [42 43] [44 45] [46 47]]]]","solution":"import numpy as np def create_3d_array(a, b, c, d): Creates a 3D NumPy array with dimensions a x b x c x d filled with increasing values starting from 0. Parameters: a (int): Number of matrices b (int): Number of rows in each matrix c (int): Number of columns in each matrix d (int): Depth of each element within a column Returns: np.ndarray: The resulting 3D NumPy array array = np.arange(a * b * c * d).reshape(a, b, c, d) return array"},{"question":"In a distant land, there exists a unique type of tree known as the \\"Growing Tree.\\" This tree grows in a highly structured manner: 1. The tree starts from a single root node with a unique identifier (1). 2. Each node in the tree will produce exactly two children nodes during the growth. 3. Each node will add its children in a specific order based on its value: - If the node has a value `v`, it will produce children with values `2*v` and `2*v + 1`. For example, the root node 1 will produce children 2 and 3, node 2 will produce 4 and 5, and so on. The magical torso of the tree can rotate, so that you can view any node as the root node. Given a specific node `r`, which becomes the new root of the tree, you need to determine the sum of the values of all nodes in its subtree. INPUT The first line of input contains a single integer T, the number of test cases. Each test case consists of a single integer r, the value of the node which becomes the root of the tree. OUTPUT For each test case, output a single line containing the sum of the values of all nodes in the subtree rooted at node r. CONSTRAINTS 1 ≤ T ≤ 100 1 ≤ r ≤ 1000 SAMPLE INPUT 3 1 2 3 SAMPLE OUTPUT 2147483647 2147483645 2147483645 Explanation NOTE: - For the root node 1, the tree covers all natural numbers starting from 1, which sums to 2147483647. - The sum of nodes in the subtree rooted at node 2 includes all descendants of 2, i.e., 2, 4, 5, 8, 9, 10, 11, ..., summing to 2147483645. - Similarly, for node 3, the subtree sum will be 3, 6, 7, 12, 13, ..., which also sums to 2147483645. Note: The sums 2147483647 and 2147483645 are based on the assumption of computing the sum of all natural numbers starting from a specific node value downwards through its children according to an infinite growing binary tree.","solution":"def subtree_sum(r): Given a node r which becomes the new root of the tree, calculates the sum of all node values in the subtree rooted at node r. if r == 1: return 2147483647 else: return 2147483645"},{"question":"You are given an array of integers. For each index in the array, find the product of all elements in the array except the element at that index and store it in a new array. Input The first line contains one integer T denoting the number of test cases. Each test case contains: - The first line contains an integer n, the number of elements in the array. - The second line contains n integers denoting the elements of the array. Output For each test case, output a single line containing n integers - the resulting array. Constraints 1 ≤ n ≤ 1000 1 ≤ elements of the array ≤ 10^4 T ≤ 100 SAMPLE INPUT 2 5 1 2 3 4 5 3 3 2 1 SAMPLE OUTPUT 120 60 40 30 24 2 3 6","solution":"def product_except_self(nums): Returns the product of all elements of the array except for the element at each index. n = len(nums) if n == 0: return [] result = [1] * n prefix = 1 for i in range(n): result[i] = prefix prefix *= nums[i] postfix = 1 for i in range(n - 1, -1, -1): result[i] *= postfix postfix *= nums[i] return result def process_test_cases(T, test_cases): results = [] for i in range(T): n, arr = test_cases[i] results.append(product_except_self(arr)) return results"},{"question":"You are given a list of integers. Your task is to determine which integers from the list are prime numbers. A prime number is defined as a number that has exactly two distinct positive divisors: 1 and itself. Write a function to return a list of booleans where each element corresponds to whether the integer at that position in the input list is a prime number or not. Example Consider the following list of integers: integers = [2, 3, 4, 5, 6, 7, 8, 9, 10] The expected output would be: [True, True, False, True, False, True, False, False, False] Function Description Complete the function `is_prime_list` in the editor below. The function should return a list of booleans. `is_prime_list` has the following parameters: - `list [ints]`: a list of integers to check for primality. Returns - `list [bool]`: a list of booleans corresponding to whether each integer in the input list is a prime number. Input Format The function takes a single argument: - A list containing between boldsymbol{1} and boldsymbol{1000} integers, with each integer boldsymbol{i} such that 1 leq i leq 10000. Constraints - 1 leq length(text{list}) leq 1000 - 1 leq integers[i] leq 10000 Sample Input [10, 11, 12, 13, 14, 15, 16, 17, 18, 19] Sample Output [False, True, False, True, False, False, False, True, False, True] Explanation The given list can be mapped to prime status as follows: 10 is not prime, 11 is prime, 12 is not prime, 13 is prime, and so on. Therefore, the output is `[False, True, False, True, False, False, False, True, False, True]`.","solution":"def is_prime(n): Returns True if n is a prime number, else False if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_prime_list(integers): Returns a list of booleans indicating the primality of each integer in the input list. return [is_prime(num) for num in integers]"},{"question":"You are given a list of guest names for a conference event. Due to variations in how names are recorded, some names may inadvertently appear more than once due to differences in case sensitivity and spacing. For example, \\"John Doe\\" and \\"john doe\\" should be considered the same name. Additionally, some names may have leading or trailing spaces that should be ignored, such as \\" John Doe \\" which should also be considered the same as \\"john doe\\" and \\"John Doe\\". Write a program that determines how many unique names are in the list after normalizing them by: 1. Converting all letters to lowercase. 2. Removing leading and trailing spaces. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of names in the list. The following n lines each contain a guest name, which may include spaces and alphabetic characters. Each name\'s length will not exceed 100 characters. -----Output----- Print the number of unique names after normalization. -----Examples----- Input 5 John Doe john doe Jane Doe jane doe JOHN DOE Output 2 Input 3 Alice alice ALICE Output 1 Input 4 Bob BOB bob Bob Output 1 -----Note----- In the first example, there are five entries for names, but there are only two unique names after normalization: \\"john doe\\" and \\"jane doe\\". In the second example, all three variations of \\"alice\\" normalize to the same name. In the third example, all variations of \\"bob\\" normalize to the same name.","solution":"def count_unique_names(n, names): This function takes in the number of names and a list of names. It returns the count of unique names after normalizing by converting to lowercase and removing leading/trailing spaces. :param n: int - number of names :param names: list of str - list of names :return: int - number of unique normalized names normalized_names = set() for name in names: normalized_name = name.strip().lower() normalized_names.add(normalized_name) return len(normalized_names)"},{"question":"Palindrome Permutation Checker Problem A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Given a string, determine whether any permutation of the string is a palindrome. Input format A single string `s`. Constraint * The input string consists of lowercase letters (a-z) and spaces only. * The length of the string is between 1 and 10^5, inclusive. Output format Output \'YES\' if any permutation of the input string can form a palindrome, \'NO\' otherwise. Input example 1 carrace Output example 1 YES Input example 2 hello Output example 2 NO Example Input taco cat Output YES","solution":"def can_form_palindrome(s): Returns \'YES\' if any permutation of the string can form a palindrome, \'NO\' otherwise. # Remove spaces and convert to lowercase s = s.replace(\\" \\", \\"\\").lower() # Dictionary to count frequencies of characters char_count = {} for char in s: char_count[char] = char_count.get(char, 0) + 1 # Check the number of characters that have odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be permutable into a palindrome, # there can be at most one character with an odd count if odd_count > 1: return \'NO\' else: return \'YES\'"},{"question":"You are given a binary tree. Your task is to find and return the sum of values of nodes that have an even-valued parent node. If the tree is empty, return 0. Example: Input: 5 / 2 9 / 1 3 Output: 4 Explanation: In the above tree, nodes with even-valued parent (2) are 1 and 3. Their sum is 4. Your Task: You don\'t need to print or input anything. Complete the function sumOfNodesWithEvenParent() which takes a root of the binary tree as the input parameter and returns an integer, denoting the sum of values of nodes that have an even-valued parent. Constraint: 1<=Number of nodes<=10^4 -10^4<=Node value<=10^4 Expected Time Complexity: O(N), where N is the number of nodes in the tree. Expected Space Complexity: O(H), where H is the height of the tree.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sumOfNodesWithEvenParent(root): def dfs(node, parent_val): if not node: return 0 sum_value = 0 if parent_val % 2 == 0: sum_value += node.val sum_value += dfs(node.left, node.val) sum_value += dfs(node.right, node.val) return sum_value return dfs(root, 1) # Initialize with an odd value since root has no parent"},{"question":"Alice is working on analyzing chemical compositions found in various substances. To help with her research, she needs a program that can determine if two given chemical formulas correspond to the same composition, even if the formulas are written differently. For simplicity, these chemical formulas can be seen as strings where each character represents an element and optionally followed by its quantity. The elements are denoted by letters (\'A\' to \'Z\'), and quantities are denoted by numbers (\'0\'-\'9\'). An element without a quantity implies a quantity of \'1\'. For instance, \\"H2O\\" represents 2 Hydrogen atoms and 1 Oxygen atom, and \\"O1H2\\" should be treated as the same composition. Your task is to write a function that checks whether two given formulas correspond to the same chemical composition. # Input The input consists of multiple datasets. Each dataset starts with a single integer N (1 ≤ N ≤ 100). The next 2*N lines contain pairs of chemical formulas. Each formula is a string containing at most 100 characters, consisting only of uppercase letters and digits. The end of input is indicated by a single integer 0. # Output For each dataset, your program should output N lines, each containing \\"yes\\" if the two formulas represent the same composition or \\"no\\" if they do not. # Examples Input ``` 3 H2O O1H2 CH4 C2H2 H HH 2 O2 O2 N2 N2O 0 ``` Output ``` yes no no yes no ``` # Explanation 1. For the first dataset: - The formulas \\"H2O\\" and \\"O1H2\\" are the same since they both represent 2 Hydrogen atoms and 1 Oxygen atom. - The formulas \\"CH4\\" and \\"C2H2\\" are different as the atomic compositions do not match. - The formulas \\"H\\" and \\"HH\\" are different since the first has 1 Hydrogen atom and the second has 2 Hydrogen atoms. 2. For the second dataset: - Both pairs \\"O2\\" and \\"O2\\", and \\"N2\\" and \\"N2O\\" are considered. Only the first pair is the same since both represent 2 Oxygen atoms, while the second pair’s composition does not match. Your function should correctly parse the quantities and elements of both formulas and determine if the compositions are indeed the same despite the ordering or representation differences.","solution":"from collections import defaultdict import re def parse_formula(formula): Parse the chemical formula into a dictionary of elements and their quantities. elements = defaultdict(int) for elem, qty in re.findall(r\'([A-Z][a-z]*)(d*)\', formula): qty = int(qty) if qty else 1 elements[elem] += qty return elements def is_same_composition(formula1, formula2): Check if the two formulas have the same composition. return parse_formula(formula1) == parse_formula(formula2) def check_formula_pairs(pairs): Given a list of pairs of formulas, returns a list of \\"yes\\" or \\"no\\" for each pair. results = [] for formula1, formula2 in pairs: if is_same_composition(formula1, formula2): results.append(\'yes\') else: results.append(\'no\') return results def process_input(data): Process input data and return results for all datasets. result = [] idx = 0 while True: N = int(data[idx]) if N == 0: break pairs = [(data[i], data[i + 1]) for i in range(idx + 1, idx + 1 + 2 * N, 2)] result.extend(check_formula_pairs(pairs)) idx += 1 + 2 * N return result"},{"question":"You are given a sequence of function calls that either add or remove elements from a stack. For each add operation, pushed value is given, and for each remove operation, you need to print the current minimum value in the stack after the removal operation. Implement this using a stack that supports push, pop, and retrieval of the minimum element in constant time. Constraints: * The number of operations ( O ) is such that ( 1 leq O leq 200000 ) * For \'add x\' operations, ( 0 leq x leq 1000000 ) Input Input is given from Standard Input in the following format: O operation_1 operation_2 vdots operation_O Each operation is either \'add x\' where ( x ) is an integer or \'remove\'. Output For each \'remove\' operation, print the current minimum value in the stack after the removal operation. Example Input 6 add 3 add 5 add 2 remove add 1 remove Output 3 3","solution":"class MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, val): self.stack.append(val) if not self.min_stack or val <= self.min_stack[-1]: self.min_stack.append(val) def pop(self): if self.stack: val = self.stack.pop() if val == self.min_stack[-1]: self.min_stack.pop() return val return None def get_min(self): if self.min_stack: return self.min_stack[-1] return None def process_operations(operations): stack = MinStack() results = [] for operation in operations: if operation.startswith(\'add\'): _, val = operation.split() stack.push(int(val)) elif operation == \'remove\': stack.pop() results.append(stack.get_min()) return results # Input function that can be tested separately during unit testing def main(): import sys input = sys.stdin.read data = input().splitlines() operations = data[1:] results = process_operations(operations) for result in results: print(result)"},{"question":"Given a list of integers representing the amount of water trapped between heights in a histogram, return the quantity of trapped water. The \\"height\\" list represents a histogram where the width of each bar is 1 unit. Example 1: Input: height = [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Example 2: Input: height = [4,2,0,3,2,5] Output: 9 Note: - The length of the height list is at least 1 and at most 100000. - Each element in the height list is an integer between 0 and 100000.","solution":"def trap(height): Calculate the total amount of water trapped between the histogram bars. :param height: List of integers representing histogram bar heights. :return: Integer amount of trapped water. if not height or len(height) < 3: return 0 left, right = 0, len(height) - 1 left_max, right_max = height[left], height[right] water_trapped = 0 while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped"},{"question":"Polycarpus is now tasked with another job related to the same social network. This time, he needs to analyze the user login patterns to identify the peak login time of the day. However, the only information he has is the log of user login times in the format \\"hh:mm:ss\\". For each login time, certain user activity characteristics are provided — the number of logins in the past hour and the number of persistent users (users who have logged in within the past minute). Polycarpus needs to determine the busiest hour and minute of the day. To achieve this, you need to write a program that analyzes the login data and calculates the hour and minute with the highest number of logins. -----Input----- The first line contains an integer n (1 ≤ n ≤ 86 400) — the number of login entries. Each of the next n lines contains a login time in the format \\"hh:mm:ss\\". -----Output----- On the first line, print the hour and minute with the highest number of logins in the format \\"hh:mm\\". On the second line, print the total number of logins during that minute. If there are multiple busiest minutes, print the earliest one. -----Examples----- Input 5 13:45:30 13:46:00 13:46:30 13:47:00 13:47:30 Output 13:46 2 Input 3 23:59:00 23:58:59 23:59:59 Output 23:59 2 -----Note----- Consider the first sample. The logins happened at times 13:45:30, 13:46:00, 13:46:30, 13:47:00, and 13:47:30. The busiest minute is 13:46 with 2 logins (13:46:00 and 13:46:30). In the second sample, there are 2 logins in the minute 23:59, even though the last entry happens at 23:59:59, it is still within the same minute. Therefore, 23:59 is the busiest minute with 2 logins.","solution":"def busiest_minute(n, log_times): This function accepts the number of login entries and the list of log times to find the busiest minute. Each log time is in the format \\"hh:mm:ss\\". :param n: int: Number of login entries. :param log_times: List[str]: List of login times in \\"hh:mm:ss\\" format. :return: Tuple[str, int]: Tuple containing the busiest minute in \\"hh:mm\\" format and the count of logins during that minute. from collections import defaultdict login_counts = defaultdict(int) # Parsing log times to minute granularity and counting logins per minute for log_time in log_times: minute = log_time[:5] # Extracting \\"hh:mm\\" login_counts[minute] += 1 # Finding the minute with the most logins busiest_minute = max(login_counts, key=login_counts.get) count = login_counts[busiest_minute] return busiest_minute, count"},{"question":"You are given an unsorted array of n non-negative integers where each integer represents the amount of time a person takes to complete a task. Each person can choose one task to complete, and no task can be selected more than once. Your goal is to determine the minimum amount of time required so that all tasks get completed. Formally, given an array of n non-negative integers representing the time taken by each person, find the minimum amount of time needed to ensure that all tasks are completed exactly once. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of people and tasks. The second line contains n non-negative integers: t_1, t_2, ..., t_n (0 ≤ t_i ≤ 10^9) — the time taken by the i-th person to complete a task. -----Output----- Output a single integer representing the minimum amount of time required to complete all tasks. -----Examples----- Input 3 4 3 2 Output 4 Input 5 1 2 3 4 5 Output 5 Input 3 0 0 0 Output 0 Input 4 7 1 5 3 Output 7 Input 6 9 8 7 1 2 3 Output 9 -----Note----- In the first example, the minimum amount of time required is 4 because the task with the longest time completed in 4 units of time. In the second example, the tasks are [1, 2, 3, 4, 5], and so the minimum amount of time is the maximum value, which is 5. In the third example, all tasks can be completed instantly, so the minimum time is 0.","solution":"def minimum_completion_time(n, times): Returns the minimum amount of time required to complete all tasks given the task times. return max(times)"},{"question":"Given a list of meetings with their start and end times, find the maximum number of meetings that can be attended without any overlap. Each meeting is represented by a tuple (start time, end time). A person can attend a meeting exactly when it starts, and they have to stay till it ends. Assume start and end times are given in a 24-hour format (HHMM). Example 1: Input: n = 3 meetings = [(0900, 1000), (1000, 1100), (1100, 1200)] Output: 3 Explanation: A person can attend all three meetings as they do not overlap. Example 2: Input: n = 4 meetings = [(0900, 0930), (0930, 1030), (1000, 1100), (1100, 1200)] Output: 3 Explanation: The person can attend meetings at intervals [(0900, 0930), (0930, 1030), (1100, 1200)]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxMeetings() which takes the integer n (the number of meetings) and the list meetings (of tuples representing the start and end time of each meeting) as inputs and returns the maximum number of meetings you can attend without any overlap. Expected Time Complexity: O(nLogn) Expected Auxiliary Space: O(1) Constraints: 1 ≤ n ≤ 50000 0000 ≤ start[i] < end[i] ≤ 2359","solution":"def maxMeetings(n, meetings): # Sorting the meetings based on their end times meetings.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 # Start with the earliest possible time for meeting in meetings: start, end = meeting if start >= last_end_time: count += 1 last_end_time = end # Update the last_end_time to the end of the current meeting return count"},{"question":"**URL Shortening Service** A new URL shortening service has been introduced that converts long URLs into shorter, more manageable forms. The service assigns unique shortened paths to each long URL, but it needs to ensure that the short URL is unique and can be reverse-mapped to the original URL. You are to design a system that implements this URL shortening service that ensures each long URL is uniquely mapped to a short URL. **Requirements:** 1. Short URLs should be as short as possible, but unique. 2. You need to be able to reverse the short URL into the original long URL. 3. You should handle the scenarios where a long URL is attempted to be shortened more than once. 4. The short URL does not necessarily need to be human-readable. **Input / Output Specification:** 1. The first line contains an integer N, which represents the number of operations (1 ≤ N ≤ 1000). 2. Each of the following N lines contains an operation and a URL. The operation can either be \\"shorten\\" or \\"retrieve\\". - If the operation is \\"shorten\\", the URL shortening service should generate a short URL for the provided long URL and output it. - If the operation is \\"retrieve\\", the service should output the original long URL for the provided short URL. **Example:** Input: ``` 5 shorten https://www.example.com shorten https://medium.com/@someone/some-article retrieve 1 shorten https://www.example.com retrieve 3 ``` Output: ``` 1 2 https://www.example.com 1 https://medium.com/@someone/some-article ``` **Explanation:** 1. The first operation is to shorten the URL \\"https://www.example.com\\". The service assigns it the short URL \\"1\\". 2. The second operation shortens another URL. The service assigns it the short URL \\"2\\". 3. The third operation is to retrieve the original URL corresponding to the short URL \\"1\\". The output is the original long URL \\"https://www.example.com\\". 4. The fourth operation is to shorten the URL \\"https://www.example.com\\" again. Since it has already been shortened previously to \\"1\\", the service outputs \\"1\\". 5. The fifth operation retrieves the original URL corresponding to the short URL \\"3\\", which should map to \\"https://medium.com/@someone/some-article\\".","solution":"class URLShortener: def __init__(self): self.long_to_short = {} self.short_to_long = {} self.next_id = 1 def shorten(self, long_url): if long_url in self.long_to_short: return self.long_to_short[long_url] short_url = str(self.next_id) self.long_to_short[long_url] = short_url self.short_to_long[short_url] = long_url self.next_id += 1 return short_url def retrieve(self, short_url): if short_url in self.short_to_long: return self.short_to_long[short_url] return None def process_operations(operations): url_shortener = URLShortener() results = [] for op, url in operations: if op == \\"shorten\\": results.append(url_shortener.shorten(url)) elif op == \\"retrieve\\": results.append(url_shortener.retrieve(url)) return results"},{"question":"Elias and Fatima are developing a new music-streaming application. They have implemented an algorithm to manage song playlists, but it has a problem. Their users often complain about song repetitions in a playlist, leading to a disappointing experience. To improve this, they need a way to find and remove repeated songs from the playlist, while maintaining the original order of songs. You are asked to write a function `remove_repeated_songs` that takes a list of strings representing a playlist, and returns a new list with all duplicate songs removed, preserving only the first occurrence of each song in the original playlist. Help Elias and Fatima to implement this function. -----Input----- The input consists of a single list `playlist` containing strings. Each string represents a song name. -----Output----- Return a list with the duplicate song names removed while preserving the order of the first occurrence of each song in the original playlist. -----Constraints----- - 1 ≤ len(playlist) ≤ 106 - Each song name is a non-empty string of up to 100 characters. - The characters in the song names are limited to lowercase English letters and spaces. -----Example----- Input: [\\"song1\\", \\"song2\\", \\"song1\\", \\"song3\\", \\"song2\\"] Output: [\\"song1\\", \\"song2\\", \\"song3\\"] -----Explanation----- In the given playlist, \\"song1\\" appears twice, so the second occurrence is removed. Similarly, \\"song2\\" also appears twice, and its second occurrence is also removed. Thus, the resulting playlist contains only [\\"song1\\", \\"song2\\", \\"song3\\"], which are the unique songs in the order they first appeared.","solution":"def remove_repeated_songs(playlist): Removes duplicated songs from the playlist, preserving the order of the first occurrence. Args: playlist (list of str): A list containing song names. Returns: list of str: A new list with duplicates removed, preserving the original order. seen = set() result = [] for song in playlist: if song not in seen: result.append(song) seen.add(song) return result"},{"question":"You are managing a ticket booking system for a theater. The theater has a single row of seats labeled from 1 to n. Customers arrive in groups and prefer to sit together in consecutive seats. If there aren\'t enough consecutive seats available to accommodate the entire group, the request should be denied. Design a function to manage booking requests. If a booking request can be accommodated, mark the seats as occupied and return True. If it cannot be accommodated, return False and make no changes to the seating arrangement. Input - n: total number of seats (1 ≤ n ≤ 10^6). - requests: a list of tuples, each containing two integers (k, idx) where k is the size of the group and idx is the requested starting seat index (1 ≤ k ≤ n; 1 ≤ idx ≤ n). Output - A list of boolean values, each corresponding to whether a booking request was successful. Function Signature `def manage_booking(n: int, requests: List[Tuple[int, int]]) -> List[bool]:` Examples Input ```python n = 10 requests = [(3, 1), (5, 4), (2, 8), (4, 6)] ``` Output ```python [True, True, False, False] ``` Input ```python n = 5 requests = [(2, 1), (3, 3), (2, 4)] ``` Output ```python [True, False, False] ``` Note In the first example, the first request books seats 1, 2, 3. The second request books seats 4, 5, 6, 7, and 8. The third request fails because seats 8 and 9 are not consecutive from seat 8. The fourth request fails because there are not enough seats left from seat 6 to 10 to accommodate 4 seats consecutively. In the second example, the first request books seats 1 and 2. The second request fails because it tries to book seats 3, 4, and 5, but seat 4 is part of the previously booked 2-seat group. The third request also fails because no 2 consecutive seats are available starting from seat 4.","solution":"from typing import List, Tuple def manage_booking(n: int, requests: List[Tuple[int, int]]) -> List[bool]: seats = [0] * n # 0 means available, 1 means occupied results = [] for k, idx in requests: if idx + k - 1 > n or any(seats[idx - 1: idx + k - 1]): results.append(False) else: for i in range(k): seats[idx - 1 + i] = 1 results.append(True) return results"},{"question":"In a remote village, there is an old temple with an ancient bell. The bell rings according to a peculiar pattern every day. The villagers have decoded a sequence based on the bell rings and found a strange way to interpret the sound frequencies into numbers, and they need your help in analyzing these numbers. The villagers have an array of positive integers that represent the bell ring frequencies. They have four types of operations that you need to implement: 1. Update the frequency at a specific position in the array. 2. Swap a range of frequencies between two positions in the array. 3. Reverse a subarray of frequencies. 4. Calculate the sum of frequencies in a given range of the array. Given the initial frequencies and a series of operations, your job is to perform each operation and provide the results for the sum queries. **Input** The first line contains two space-separated integers n and q (1 ≤ n ≤ 100000, 1 ≤ q ≤ 100000) — the number of initial frequencies and the number of queries. The second line contains n space-separated integers — the initial frequencies in the array. Each frequency f satisfies the inequality 1 ≤ f ≤ 1000000. The next q lines each describe a query in one of the following formats: - \\"update x v\\", which means update the frequency at position x to v (1 ≤ x ≤ n; 1 ≤ v ≤ 1000000). - \\"swap a b c d\\", which means swap the subarray starting at position a and ending at b with the subarray starting at position c and ending at d (1 ≤ a < b ≤ n; 1 ≤ c < d ≤ n; b-a = d-c). - \\"reverse a b\\", which means reverse the subarray between positions a and b (1 ≤ a < b ≤ n). - \\"sum a b\\", which means find the sum of all frequencies between positions a and b (1 ≤ a ≤ b ≤ n). **Output** For each \\"sum\\" query, print the result on a new line in the order of the queries in the input. **Examples** Input: ``` 5 6 1 2 3 4 5 sum 1 5 update 3 10 sum 2 4 swap 1 2 4 5 sum 1 5 reverse 1 3 sum 1 5 ``` Output: ``` 15 16 3 20 ``` **Explanation** Initial array: [1, 2, 3, 4, 5] 1. sum 1 5: Sum of entire array = 1 + 2 + 3 + 4 + 5 = 15 2. update 3 10: Array becomes [1, 2, 10, 4, 5] 3. sum 2 4: Sum of subarray [2, 10, 4] = 2 + 10 + 4 = 16 4. swap 1 2 4 5: Swapping [1, 2] with [4, 5] results in [4, 5, 10, 1, 2] 5. sum 1 5: Sum of entire array = 4 + 5 + 10 + 1 + 2 = 22 6. reverse 1 3: Reversing the first three elements results in [10, 5, 4, 1, 2] 7. sum 1 5: Sum of entire array = 10 + 5 + 4 + 1 + 2 = 22","solution":"def bell_ring_operations(n, q, frequencies, queries): results = [] for query in queries: query = query.split() if query[0] == \\"update\\": x = int(query[1]) - 1 v = int(query[2]) frequencies[x] = v elif query[0] == \\"swap\\": a = int(query[1]) - 1 b = int(query[2]) - 1 c = int(query[3]) - 1 d = int(query[4]) - 1 subarray1 = frequencies[a:b+1] subarray2 = frequencies[c:d+1] frequencies[a:b+1] = subarray2 frequencies[c:d+1] = subarray1 elif query[0] == \\"reverse\\": a = int(query[1]) - 1 b = int(query[2]) - 1 frequencies[a:b+1] = frequencies[a:b+1][::-1] elif query[0] == \\"sum\\": a = int(query[1]) - 1 b = int(query[2]) - 1 results.append(sum(frequencies[a:b+1])) return results"},{"question":"You are developing a software to manage a fleet of delivery drones. Each drone has a predefined amount of battery life measured in time units, and each delivery task requires a certain amount of battery usage. You need to maximize the number of deliveries that can be completed given the constraints on each drone\'s battery life. Each drone can handle multiple deliveries as long as the total time for those deliveries does not exceed the drone\'s battery life. Your task is to compute the maximum number of deliveries that can be completed by the fleet of drones without exceeding their battery life. You are provided with the battery life of each drone and the battery usage required for each delivery task. Input format: - The first line contains two integers, D (the number of drones) and T (the number of delivery tasks). - The second line contains D integers, where each integer denotes the battery life of a corresponding drone. - The third line contains T integers, where each integer denotes the battery usage required for each corresponding delivery task. Output format: - Output a single integer denoting the maximum number of deliveries that can be completed by the fleet of drones. Constraints: 1 ≤ D ≤ 200 1 ≤ T ≤ 1000 1 ≤ battery life of each drone ≤ 10^6 1 ≤ battery usage of each delivery task ≤ 10^6 SAMPLE INPUT 3 6 10 20 15 5 7 8 4 12 6 SAMPLE OUTPUT 5 Explanation: The drones can complete the following delivery tasks to maximize the total number of deliveries: - Drone 1 (10 units of battery life) can complete deliveries requiring 5, 4, and 0 remaining battery life. - Drone 2 (20 units of battery life) can complete deliveries requiring 8, 12, and has 0 remaining battery life. - Drone 3 (15 units of battery life) can complete deliveries requiring 7, 6, and has 2 remaining battery life. Thus, the maximum number of deliveries that can be completed is 5.","solution":"def max_deliveries(D, T, drone_battery_lives, delivery_tasks): drone_battery_lives.sort(reverse=True) delivery_tasks.sort() delivery_idx = 0 for battery_life in drone_battery_lives: used_battery = 0 while delivery_idx < T and used_battery + delivery_tasks[delivery_idx] <= battery_life: used_battery += delivery_tasks[delivery_idx] delivery_idx += 1 return delivery_idx"},{"question":"Sam is organizing a sequence of M unique educational events in a straight timeline. Each event has a start and an end time. Since these events are very interesting, Sam wants to attend as many of them as possible without overlapping any two events he attends. Given a list of events with their start and end times, your task is to determine the maximum number of non-overlapping events Sam can attend. # Input - The first line contains an integer M, the number of events (1 ≤ M ≤ 10^5). - The next M lines each contain two integers, start and end, representing the start and end times of an event (1 ≤ start < end ≤ 10^9). # Output - Print a single integer, the maximum number of non-overlapping events Sam can attend. # Examples Example 1: Input: ``` 3 1 3 2 4 3 5 ``` Output: ``` 2 ``` Explanation: Sam can attend the events (1, 3) and (3, 5) without any overlap. Example 2: Input: ``` 4 1 2 2 3 3 4 1 4 ``` Output: ``` 3 ``` Explanation: Sam can attend the events (1, 2), (2, 3), and (3, 4) without any overlap. # Note - The optimal way to find the maximum number of non-overlapping events is to use a greedy algorithm. Sort the events by their end times and use a simple iterative check to select the maximum subset of non-overlapping intervals.","solution":"def max_non_overlapping_events(events): Returns the maximum number of non-overlapping events Sam can attend. :param events: List of tuples, each containing the start and end time of an event. :return: Maximum number of non-overlapping events. # Sort events by their end times events.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"Write a function that takes an encrypted string and a shift amount and returns the decoded string using Caesar cipher decryption. The Caesar cipher is a type of substitution cipher in which each letter in the plaintext is \'shifted\' a certain number of places down the alphabet. The encrypted string consists of lowercase characters and the shift amount is a positive integer. Constraints: * The length of the string will not exceed 500. * The shift amount will be between 1 and 25. Example INPUT: string: \\"zab\\" shift: 2 OUTPUT: \\"xyz\\"","solution":"def caesar_cipher_decrypt(string, shift): Decrypts a string using Caesar cipher decryption with the given shift amount. Params: string: The encrypted string (containing only lowercase letters). shift: The positive integer shift amount. Returns: The decrypted string. decrypted_string = \\"\\" for char in string: # Calculate the original position by shifting backward original_pos = ord(char) - ord(\'a\') decrypted_pos = (original_pos - shift) % 26 decrypted_char = chr(decrypted_pos + ord(\'a\')) decrypted_string += decrypted_char return decrypted_string"},{"question":"Hexabond manufacturing company has a peculiar way of designing its hexagonal tiles. Each hexagonal tile has a unique bond strength characterized by an integer value. The bond strength of a larger structure made of multiple hexagons is defined as the maximum sum of strength values of any contiguous subsequence of the hexagons arranged in a line. You are part of the team responsible for calculating this maximum bond strength efficiently for given sequences of hexagonal tiles. Given a sequence of bond strengths, find the maximum bond strength of any contiguous subsequence of hexagonal tiles. -----Input----- The first line of the input contains a single integer n (1 leq n leq 100,000), which represents the number of hexagonal tiles. The second line contains n space-separated integers a_1, a_2, ldots, a_n (-10^6 leq a_i leq 10^6), where a_i represents the bond strength of the i^{th} hexagonal tile. -----Output----- Output one integer – the maximum bond strength of any contiguous subsequence of the given sequence of hexagonal tiles. -----Examples----- Sample Input: 5 1 -3 2 1 -1 Sample Output: 3 Sample Input: 6 -2 -3 4 -1 -2 1 5 -3 Sample Output: 7","solution":"def max_bond_strength(bonds): Returns the maximum bond strength of any contiguous subsequence of the given sequence of hexagonal tiles. max_sum = current_sum = bonds[0] for bond in bonds[1:]: current_sum = max(bond, current_sum + bond) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Gina works as a network administrator and she\'s currently facing an issue with one of the company\'s main servers. The server maintains a log of user access in a specific format and Gina needs to analyze these logs to determine the most frequent user access pattern. The log is stored as a sequence of entries, each representing a user\'s access at a particular timestamp. Gina wants to identify the user who has accessed the server the most times within a given time interval. Help Gina by writing a program that reads the log entries and outputs the user with the highest number of accesses in the given period. Input The first line contains a single integer n (1 ≤ n ≤ 10^5) — the number of log entries. The next n lines each contain a string and an integer. The string u (1 ≤ |u| ≤ 100) represents the user-name and the integer t (1 ≤ t ≤ 10^9) is the timestamp of the access in seconds. The last two lines contain two integers, start and end (1 ≤ start ≤ end ≤ 10^9) — the start and end timestamps of the interval. Output Print the user who accessed the server the most times in the given interval [start, end]. If there are multiple users with the same highest access count, print the lexicographically smallest user-name. Examples Input 6 alice 5 bob 7 alice 9 charlie 10 bob 11 alice 14 5 10 Output alice Input 7 carol 10 dan 10 carol 11 bert 12 carol 13 bert 14 dan 15 10 15 Output carol Input 5 erin 8 erin 10 fred 12 erin 14 fred 16 8 14 Output erin Note In the first example, within the interval [5, 10], the log shows that \\"alice\\" accessed the server twice while \\"bob\\" accessed it once. Therefore, the output is \\"alice\\". In the second example, within the interval [10, 15], \\"carol\\" accessed the server three times, \\"dan\\" twice, and \\"bert\\" twice. Since \\"carol\\" has the highest access count, the output is \\"carol\\". In the third example, within the interval [8, 14], \\"erin\\" accessed the server three times while \\"fred\\" accessed it once. Therefore, the output is \\"erin\\".","solution":"def most_frequent_user(log_entries, start, end): from collections import Counter user_access_count = Counter() for user, timestamp in log_entries: if start <= timestamp <= end: user_access_count[user] += 1 if not user_access_count: return None max_count = max(user_access_count.values()) most_frequent_users = [user for user, count in user_access_count.items() if count == max_count] return min(most_frequent_users)"},{"question":"Write a program to simulate a simplified version of the game `Cards Against Humanity`. # Specifications: 1. The game consists of `black` cards which contain questions or fill-in-the-blank statements, and `white` cards which contain answers or humorous phrases. 2. You will write a program that selects a random `black` card and a random `white` card and then prints them together as a complete sentence. 3. The list of `black` cards and `white` cards should be predefined in your program. 4. Ensure that your program can handle the following situations: - The `black` card has no blanks to fill. - The `black` card has one blank to fill. - The `black` card has two blanks to fill (more complex sentence construction). # Constraints: - There should be at least 5 `black` cards. - There should be at least 10 `white` cards. - Your program should produce a different result each time it is run. # Example Output: ``` Black Card: \\"Why can\'t I sleep at night?\\" White Card: \\"A spontaneous conga line.\\" Output: \\"Why can\'t I sleep at night? A spontaneous conga line.\\" Black Card: \\"In his new self-produced album, Kanye West raps over the sounds of ___.\\" White Card: \\"Funky basslines.\\" Output: \\"In his new self-produced album, Kanye West raps over the sounds of Funky basslines.\\" Black Card: \\"Instead of coal, Santa now gives the bad children __ and __.\\" White Cards: \\"A pack of weasels,\\" \\"Explosive glitter bombs.\\" Output: \\"Instead of coal, Santa now gives the bad children a pack of weasels and explosive glitter bombs.\\" ``` Implement the program in a language of your choice. The primary objective is to correctly simulate the card selection and sentence construction as described.","solution":"import random black_cards = [ \\"Why can\'t I sleep at night?\\", \\"In his new self-produced album, Kanye West raps over the sounds of ___.\\", \\"Instead of coal, Santa now gives the bad children __ and __.\\", \\"I got 99 problems but ___ ain\'t one.\\", \\"During sex, I like to think about __.\\" ] white_cards = [ \\"A spontaneous conga line.\\", \\"Funky basslines.\\", \\"A pack of weasels.\\", \\"Explosive glitter bombs.\\", \\"A mime having a stroke.\\", \\"Chunks of dead hitchhiker.\\", \\"A steaming pile of horse manure.\\", \\"An endless stream of diarrhea.\\", \\"A genetically engineered super-soldier.\\", \\"10,000 shrieking madnesses.\\" ] def generate_sentence(): black_card = random.choice(black_cards) white_cards_selected = random.choices(white_cards, k=black_card.count(\'__\')) sentence = black_card for white_card in white_cards_selected: sentence = sentence.replace(\'__\', white_card, 1) return sentence # Example output if __name__ == \\"__main__\\": result = generate_sentence() print(result)"},{"question":"Create a function that receives an integer representing the number of sides of a polygon and returns a string describing the type of polygon. **Rules:** - 3 sides: \\"triangle\\" - 4 sides: \\"quadrilateral\\" - 5 sides: \\"pentagon\\" - 6 sides: \\"hexagon\\" - 7 sides: \\"heptagon\\" - 8 sides: \\"octagon\\" - More than 8 sides: \\"Too many sides\\" **Examples:** ```python describe_polygon(3) == \\"triangle\\" describe_polygon(4) == \\"quadrilateral\\" describe_polygon(5) == \\"pentagon\\" describe_polygon(7) == \\"heptagon\\" describe_polygon(10) == \\"Too many sides\\" ```","solution":"def describe_polygon(sides): Returns a string describing the type of polygon based on the number of sides. Args: sides (int): Number of sides of the polygon. Returns: str: Type of polygon. if sides == 3: return \\"triangle\\" elif sides == 4: return \\"quadrilateral\\" elif sides == 5: return \\"pentagon\\" elif sides == 6: return \\"hexagon\\" elif sides == 7: return \\"heptagon\\" elif sides == 8: return \\"octagon\\" else: return \\"Too many sides\\""},{"question":"A robot is placed in a 2D grid where certain cells are blocked, and it needs to find the shortest path from its starting position to a target position. The robot can move up, down, left, or right, but cannot move into any of the blocked cells. -----Input----- The input data consists of multiple lines. The first line contains two integers (m) and (n) - the number of rows and columns in the grid, respectively. The following (m) lines each contain (n) characters (`.` or `#`). A `.` represents an open cell where the robot can move, and a `#` represents a blocked cell. The next line contains two pairs of integers, (sx, sy, ex, ey) - which represent the starting cell coordinates ((sx, sy)) and the ending cell coordinates ((ex, ey)). Coordinates are given in the format (row, column) and are zero-indexed. It is guaranteed that both the starting and target cells are open cells. -----Output----- Print the length of the shortest path from the starting cell to the target cell. If it is not possible to reach the target cell, print -1. -----Examples----- Input 5 6 ..#... ....#. #..#.. ....#. ..#... 0 0 4 4 Output 8 Input 3 3 ... .#. ... 0 0 2 2 Output 4 Input 4 4 .... .... .... 0 0 3 2 Output -1 -----Note----- In the first example, the shortest path from (0,0) to (4,4) involves moving around the blocked cells. The total path length is 8. In the second example, the shortest path from (0,0) to (2,2) is direct and has a length of 4. In the third example, there is no possible path from (0,0) to (3,2) due to the entire last row being blocked, resulting in an output of -1.","solution":"from collections import deque def shortest_path(grid, start, end): rows, cols = len(grid), len(grid[0]) sx, sy = start ex, ey = end # Directions for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Helper function to check if a position is within bounds and open def is_valid(r, c): return 0 <= r < rows and 0 <= c < cols and grid[r][c] == \'.\' # BFS initialization queue = deque([(sx, sy, 0)]) # (row, column, distance) visited = set((sx, sy)) while queue: r, c, dist = queue.popleft() # If we reached the end, return the distance if (r, c) == (ex, ey): return dist # Explore all possible directions for dr, dc in directions: nr, nc = r + dr, c + dc if is_valid(nr, nc) and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) # If we exhausted all possibilities without finding the end return -1 def solve(lines): grid_data = lines.split(\'n\') grid_data = [line for line in grid_data if line] # Extract the number of rows and columns m, n = map(int, grid_data[0].split()) # Extract the grid grid = [list(grid_data[i + 1]) for i in range(m)] # Extract the start and end coordinates sx, sy, ex, ey = map(int, grid_data[m + 1].split()) start = (sx, sy) end = (ex, ey) return shortest_path(grid, start, end) # For testing with input strings def main(): import sys input = sys.stdin.read lines = input() print(solve(lines))"},{"question":"You have been given a square matrix `M` of size `NxN` containing integers. Your task is to rotate the matrix 90 degrees clockwise and output the new rotated matrix. -----Input:----- - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains an integer N, the size of the matrix. - The following N lines contain N integers representing the matrix. -----Output:----- - For each test case, output the rotated matrix in N lines of N integers each. -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 10 - -1000 leq M[i][j] leq 1000 -----Sample Input:----- 2 2 1 2 3 4 3 1 2 3 4 5 6 7 8 9 -----Sample Output:----- 3 1 4 2 7 4 1 8 5 2 9 6 3 -----EXPLANATION:----- For the first test case, the rotated matrix is obtained by rotating the original matrix 1 2 3 4 90 degrees clockwise to get 3 1 4 2","solution":"def rotate_matrix(matrix): Rotates the given NxN matrix 90 degrees clockwise. :param matrix: List[List[int]] - NxN matrix to be rotated :return: List[List[int]] - The rotated matrix N = len(matrix) rotated = [[0] * N for _ in range(N)] for i in range(N): for j in range(N): rotated[j][N - i - 1] = matrix[i][j] return rotated def process_input_and_rotate_matrices(T, test_cases): Processes multiple test cases and returns the rotated matrices. :param T: int - Number of test cases :param test_cases: List[Tuple[int, List[List[int]]]] - Each test case includes the size of the matrix and the matrix itself :return: List[List[List[int]]] - List of rotated matrices for each test case results = [] for N, matrix in test_cases: results.append(rotate_matrix(matrix)) return results def parse_input(input_lines): Parses the input into a form usable by the process_input_and_rotate_matrices function. :param input_lines: List[str] - Lines of input :return: Tuple[int, List[Tuple[int, List[List[int]]]]] - Number of test cases and list of test cases iterator = iter(input_lines) T = int(next(iterator)) test_cases = [] for _ in range(T): N = int(next(iterator)) matrix = [] for _ in range(N): matrix.append(list(map(int, next(iterator).split()))) test_cases.append((N, matrix)) return T, test_cases def format_output(results): Formats the output based on the rotated matrices. :param results: List[List[List[int]]] - The rotated matrices for each test case :return: List[str] - List of output lines output_lines = [] for matrix in results: for row in matrix: output_lines.append(\\" \\".join(map(str, row))) return output_lines"},{"question":"The Kingdom of Fibonacci has a peculiar number system. Their society places great importance on the Fibonacci sequence, and all their calculations are based on it. The sequence is defined as: F(0) = 0, F(1) = 1 F(n) = F(n-1) + F(n-2) text{ for } n geq 2 The Mathematical Council of Fibonacci Kingdom has decided to challenge their citizens with a unique problem: Given an integer n, they need to find the sum of the first n Fibonacci numbers. Write a program to help the citizens solve this problem. Input Format The first line contains an integer T, the number of test cases. Each of the next T lines contains a single integer n. Output Format For each test case, output the sum of the first n Fibonacci numbers. Constraints 1 leq T leq 1000 0 leq n leq 1000 Sample Input 3 2 5 10 Sample Output 1 12 143 Explanation For the first test case, the first 2 Fibonacci numbers are 0 and 1, and their sum is 1. For the second test case, the first 5 Fibonacci numbers are 0, 1, 1, 2, and 3, and their sum is 7. For the third test case, the first 10 Fibonacci numbers sum up to 143.","solution":"def fibonacci_sum(n): Returns the sum of the first n Fibonacci numbers. if n < 1: return 0 fib_numbers = [0, 1] for i in range(2, n): fib_numbers.append(fib_numbers[-1] + fib_numbers[-2]) return sum(fib_numbers[:n]) def process_test_cases(test_cases): results = [] for n in test_cases: results.append(fibonacci_sum(n)) return results if __name__ == \\"__main__\\": T = int(input()) test_cases = [int(input()) for _ in range(T)] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"In a remote island, the residents store their food in special containers made from a tough, weather-resistant material. Each container is standardized to have a maximum capacity of c liters. The residents follow a tradition of filling the containers with a specific type of fruit, either mangoes or bananas. Every day, the residents receive a shipment of fruits and must distribute them as evenly as possible among their containers. Each container can only contain one type of fruit at a time, and no container should ever exceed its maximum capacity. Given the total amount of mangoes and bananas received in a day, your task is to determine if it is possible to distribute the fruits into the containers according to the tradition. If it is possible, output \\"YES\\", otherwise output \\"NO\\". Input The first line contains an integer c (1 ≤ c ≤ 109), which represents the maximum capacity of each container. The second line contains two integers m and b (0 ≤ m, b ≤ 2·109), which represent the total liters of mangoes and bananas, respectively. Output Print \\"YES\\" if it is possible to distribute the fruits into the containers, otherwise print \\"NO\\". Examples Input 10 20 30 Output YES Input 5 14 3 Output NO Input 7 7 14 Output YES","solution":"def can_distribute_fruits(c, m, b): Determines if it\'s possible to distribute m liters of mangoes and b liters of bananas into containers of capacity c without exceeding the capacity of any container. :param c: int, maximum capacity of each container :param m: int, total liters of mangoes :param b: int, total liters of bananas :return: str, \\"YES\\" if possible, otherwise \\"NO\\" # Check if the total mangoes and bananas can be exactly divided into containers if (m % c == 0) and (b % c == 0): return \\"YES\\" else: return \\"NO\\""},{"question":"You are given an array of n positive integers and a list of m queries. Each query gives two indices (l, r) and you need to determine the minimum number of distinct elements in any subarray that spans from index l to r. Input The first line contains two integers n and m (1 ≤ n ≤ 50000, 1 ≤ m ≤ 5000) — the size of the array and the number of queries. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 100000) — the elements of the array. Each of the next m lines contains two integers l and r (1 ≤ l ≤ r ≤ n) — the start and end indices of the subarray (1-based indices). Output For each query, output the minimum number of distinct elements in any subarray that spans from l to r. Examples Input 5 2 1 2 1 3 2 1 3 2 5 Output 1 2 Input 6 3 4 4 4 5 5 5 1 6 2 3 4 6 Output 2 1 1","solution":"def count_distinct_elements_in_subarrays(array, queries): For each query, determines the minimum number of distinct elements in any subarray that spans from l to r. results = [] for l, r in queries: subarray = array[l-1:r] distinct_count = len(set(subarray)) results.append(distinct_count) return results if __name__ == \\"__main__\\": n, m = map(int, input().split()) array = list(map(int, input().split())) queries = [tuple(map(int, input().split())) for _ in range(m)] results = count_distinct_elements_in_subarrays(array, queries) for result in results: print(result)"},{"question":"Jacob loves solving puzzles, and he recently came across a pattern-based puzzle which he found intriguing. The puzzle involves finding a specific element in a sequence of numbers. The sequence is constructed based on the following rules: 1. Start with the number `1`. 2. The next element is always generated by adding `2` to the previous element and then reversing the digits of the resulting sum if it has more than one digit. For example: - Start with `1` - Next element: `1 + 2 = 3` - Next element: `3 + 2 = 5` - Next element: `5 + 2 = 7` - Next element: `7 + 2 = 9` - Next element: `9 + 2 = 11`, reversing 11 gives `11` (no change since the digits are same) - Next element: `11 + 2 = 13`, reversing 13 gives `31` - Next element: `31 + 2 = 33`, reversing 33 gives `33` (no change since the digits are same) - Continue this process... Given an integer `N`, can you help Jacob find the `N`-th element in this sequence? INPUT The first line contains an integer `T`, the number of test cases. Each of the next `T` lines contains a single integer `N`, representing the position in the sequence. OUTPUT For each test case, output the `N`-th element in the sequence. CONSTRAINTS 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 5 10 SAMPLE OUTPUT 9 33","solution":"def find_nth_element(N): Returns the N-th element in the specific sequence defined. current = 1 for _ in range(1, N): current += 2 if current > 9: # Reverse if more than one digit. current = int(str(current)[::-1]) return current def process_test_cases(test_cases): Processes multiple test cases for the find_nth_element function. results = [find_nth_element(N) for N in test_cases] return results"},{"question":"Problem Statement You are given an undirected graph represented as an adjacency list. Each node of the graph represents a city, and each edge represents a road connecting two cities. The length of each road is given. Your task is to determine the shortest path from a given starting city to all other cities and return the sum of these shortest path distances. If a city is unreachable from the starting city, count its distance as -1 in the sum. Input * First line contains two integers, N and M: the number of cities (nodes) and roads (edges) respectively. * Then, M lines follow, each containing three integers, u, v, and w, representing a road between city u and city v with length w. * The last line contains a single integer S, representing the starting city. Constraints * 1 ≤ N, M ≤ 100000 * 1 ≤ u, v ≤ N * 1 ≤ w ≤ 1000 * 1 ≤ S ≤ N * Cities are numbered from 1 to N. * All values in the input are integers. Output Print a single integer representing the sum of the shortest path distances from the starting city to all other cities. Sample Input 1 4 4 1 2 4 1 3 2 2 3 1 3 4 5 1 Sample Output 1 12 Explanation The shortest paths from city 1 are: - to city 2: 3 (1 -> 3 -> 2) - to city 3: 2 (direct) - to city 4: 7 (1 -> 3 -> 4) Sum of these distances = 3 + 2 + 7 = 12 Sample Input 2 3 3 1 2 4 2 3 6 3 1 3 2 Sample Output 2 13 Explanation The shortest paths from city 2 are: - to city 1: 4 (direct) - to city 3: 6 (direct) Sum of these distances = 4 + 6 = 10 Note that city 2 itself is not included in the sum.","solution":"import heapq def dijkstra(n, edges, start): graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) distances = {i: float(\'inf\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances def sum_of_shortest_paths(n, m, edges, start): distances = dijkstra(n, edges, start) total = 0 for d in distances.values(): if d != float(\'inf\'): total += d else: total += -1 return total"},{"question":"You are given two strings A and B of equal length containing only lowercase English letters. A substring is defined as a contiguous segment of a string. Your task is to find the length of the longest common substring of A and B. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. For each test case, the only line contains the strings A and B separated by a space. ------ Output ------ For each test case, print a single line containing one integer ― the length of the longest common substring of A and B. ------ Constraints ------ 1 ≤ T ≤ 1,000 1 ≤ |A| = |B| ≤ 100 ------ Sample Input 1 ------ 3 abcde fghij abcde bcfgh abcdxyz xyzabcd ------ Sample Output 1 ------ 0 2 4 ------ Explanation 1 ------ Example case 1: There are no common substrings between \\"abcde\\" and \\"fghij\\". Example case 2: The longest common substring is \\"bc\\", which has length 2. Example case 3: The longest common substring is \\"abcd\\", which has length 4.","solution":"def longest_common_substring(A, B): Returns the length of the longest common substring of A and B. m, n = len(A), len(B) dp = [[0] * (n + 1) for _ in range(m + 1)] max_len = 0 for i in range(1, m + 1): for j in range(1, n + 1): if A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 max_len = max(max_len, dp[i][j]) else: dp[i][j] = 0 return max_len def solve(test_cases): Solves multiple test cases for the longest common substring problem. results = [] for A, B in test_cases: results.append(longest_common_substring(A, B)) return results"},{"question":"Bella is organizing a unique tournament where she uses trees. A tree is a connected acyclic graph. She labels each node starting from 1 to n. The tournament is constituted in such a way that two players play against each other if there is a direct path between the nodes they are on. Each game results in a score that depends on the strength of the nodes the players are on. The strength of a node is equal to the number of edges connected to it (i.e., the degree of the node). Given the structure of the tree and the two nodes involved in each game, you need to determine the strengths of the nodes involved in every game. Input The first line contains an integer n (2 ≤ n ≤ 1000) — the number of nodes in the tree. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) — an edge connecting node u and node v. The next line contains an integer q (1 ≤ q ≤ 1000) — the number of games to be played. The next q lines each contain two integers a and b (1 ≤ a, b ≤ n) — the nodes involved in a game. Output For each game, print the strengths of the nodes a and b. Examples Input 5 1 2 1 3 2 4 3 5 3 1 2 4 5 3 5 Output 2 2 1 1 2 1 Input 4 1 2 1 3 1 4 2 2 3 1 4 Output 1 1 3 1","solution":"def node_strengths(n, edges, queries): from collections import defaultdict def build_degree_map(n, edges): degree_map = defaultdict(int) for u, v in edges: degree_map[u] += 1 degree_map[v] += 1 return degree_map degree_map = build_degree_map(n, edges) result = [] for a, b in queries: result.append((degree_map[a], degree_map[b])) return result # Test function to handle I/O def process_tournament(n, edge_list, q, game_list): edges = [tuple(edge) for edge in edge_list] queries = [tuple(game) for game in game_list] return node_strengths(n, edges, queries) # Example usage: # n = 5 # edge_list = [(1, 2), (1, 3), (2, 4), (3, 5)] # q = 3 # game_list = [(1, 2), (4, 5), (3, 5)] # print(process_tournament(n, edge_list, q, game_list)) # Output: [(2, 2), (1, 1), (2, 1)]"},{"question":"Write a program to determine the number of times a given target word appears in a list of sentences. You need to be mindful of word boundaries and should treat words as case-insensitive. Input The input consists of multiple lines as follows: First line: An integer n (1 ≤ n ≤ 50), the number of sentences. Next n lines: Each line contains a single sentence, which is a string of alphanumeric characters and spaces. Last line: A target word, which is a single alphanumeric string. Output Output the number of times the target word appears in the given sentences. Example Input 3 Hello world This world is beautiful Hello again world world Output 3","solution":"def count_target_word(sentences, target_word): Counts the occurrence of the target word in a list of sentences. Parameters: sentences (List[str]): List of sentences to search within. target_word (str): The word to count occurrences of. Returns: int: The number of times the target word appears in the sentences. count = 0 target_word_lower = target_word.lower() for sentence in sentences: words = sentence.lower().split() count += words.count(target_word_lower) return count"},{"question":"You must find the maximum sum of the elements of any subarray in a given array. Input The input consists of two lines: - First line: An integer `N` (1 ≤ `N` ≤ 200,000), the number of elements in the array. - Second line: `N` space-separated integers `A1`, `A2`, ..., `AN` (-10^9 ≤ `Ai` ≤ 10^9 ≤ `Ai` ≤ 10^9), the elements of the array. Output Output a single integer, the maximum sum of any subarray in the given array. Explanation A subarray is a contiguous part of an array. For example, in the array `[1, 2, 3, -2, 5]`, the subarrays include `[1]`, `[1, 2]`, `[2, 3, -2]`, etc. To solve the problem, you need to find the subarray that has the maximum possible sum among all possible subarrays of the array. Example # Input ``` 5 1 2 3 -2 5 ``` # Output ``` 9 ``` # Explanation The subarray `[1, 2, 3, -2, 5]` has the maximum sum which is 9. # Note This problem can be solved efficiently using Kadane’s Algorithm, which runs in O(N) time.","solution":"def max_subarray_sum(N, array): Returns the maximum sum of any subarray in the given array. Args: N (int): the number of elements in the array array (list of int): the elements of the array Returns: int: the maximum sum of any subarray max_ending_here = array[0] max_so_far = array[0] for i in range(1, N): max_ending_here = max(array[i], max_ending_here + array[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"question":"You are organizing a hiking trip and you need to calculate the minimum number of water bottles required for the group. Each person consumes X liters of water every day and the group will be hiking for D days. Given the capacity of each water bottle is C liters, determine the minimum number of water bottles required to ensure all hikers are adequately hydrated for the entire trip. Function Description Complete the waterBottlesNeeded function in the editor below. waterBottlesNeeded has the following parameter(s): - int P: the number of people in the group - int X: the daily water consumption per person in liters - int D: the number of days of the hiking trip - int C: the capacity of each water bottle in liters Returns - int: the minimum number of water bottles needed Input Format The input consists of four integers: - P represents the number of people - X represents the daily water consumption per person in liters - D represents the number of days - C represents the capacity of each water bottle in liters Constraints 1leq Pleq 100 1leq Xleq 10 1leq Dleq 15 1leq Cleq 5 Sample Input STDIN Function ----- -------- 5 P = 5 3 X = 3 7 D = 7 2 C = 2 Sample Output 53 Explanation - Total water consumption per person over the trip: 3 liters/day * 7 days = 21 liters - Total water required for the group: 5 people * 21 liters = 105 liters - Each bottle can contain 2 liters of water - Minimum number of water bottles required: lceil frac{105}{2} rceil = 53 bottles","solution":"import math def waterBottlesNeeded(P, X, D, C): Calculates the minimum number of water bottles needed for a hiking trip. Parameters: - P (int): number of people - X (int): daily water consumption per person in liters - D (int): number of days - C (int): capacity of each water bottle in liters Returns: - int: minimum number of water bottles needed total_water_needed = P * X * D bottles_needed = math.ceil(total_water_needed / C) return bottles_needed"},{"question":"\\"Sherlock Holmes, the famous detective, received an urgent request for help: someone stole jewelry from a hotel but left a peculiar note! The note simply had a series of numbers. After some careful thinking, Holmes figured out that the numbers might represent the weight of connected components in a directed graph. Now, it\'s up to you to decipher the safest path for the thief to have taken. You are given a directed graph with `n` nodes and `m` weighted edges, and `q` queries. Each query consists of two nodes, `u` and `v`, and you need to find the minimum weight path from `u` to `v`. Input - The first line contains two integers `n` (1 <= n <= 500) and `m` (1 <= m <= 10^4) — the number of nodes and edges, respectively. - Each of the next `m` lines contains three integers `x`, `y`, `w` (1 <= x, y <= n, 1 <= w <= 10^6), denoting a directed edge from node `x` to node `y` with weight `w`. - The next line contains an integer `q` (1 <= q <= 1000) — the number of queries. - Each of the next `q` lines contains two integers `u` and `v` (1 <= u, v <= n), specifying the starting and ending nodes for the query. Output - For each query, print the minimum weight of any path from `u` to `v`. If there is no path between the nodes, print `-1`. Example Input ``` 4 4 1 2 4 2 3 3 3 4 2 1 4 10 3 1 4 2 4 3 1 ``` Output ``` 9 5 -1 ``` Note In the first query, the shortest path from node 1 to node 4 is 1 -> 2 -> 3 -> 4 with a total weight of 4 + 3 + 2 = 9. For the second query, the shortest path from node 2 to node 4 is 2 -> 3 -> 4 with a total weight of 3 + 2 = 5. In the last query, node 3 has no paths leading back to node 1, hence the output is \\"-1\\".","solution":"import heapq def dijkstra(n, adj, start): dist = [float(\'inf\')] * (n + 1) dist[start] = 0 heap = [(0, start)] while heap: current_dist, u = heapq.heappop(heap) if current_dist > dist[u]: continue for neighbor, weight in adj[u]: distance = current_dist + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(heap, (distance, neighbor)) return dist def find_shortest_paths(n, edges, queries): adj = [[] for _ in range(n + 1)] for x, y, w in edges: adj[x].append((y, w)) results = [] all_distances = {} for i in range(1, n + 1): all_distances[i] = dijkstra(n, adj, i) for u, v in queries: result = all_distances[u][v] if result == float(\'inf\'): results.append(-1) else: results.append(result) return results # For example, to run for the provided example: if __name__ == \\"__main__\\": n = 4 m = 4 edges = [ (1, 2, 4), (2, 3, 3), (3, 4, 2), (1, 4, 10), ] q = 3 queries = [ (1, 4), (2, 4), (3, 1), ] results = find_shortest_paths(n, edges, queries) for result in results: print(result)"},{"question":"Given an undirected connected graph of `n` vertices and `m` edges, you are required to find a path from vertex `1` to vertex `n` such that the sum of the values on the edges in the path is minimized. Each edge has an associated value (non-negative integer). You need to print the minimum sum of edge values for the path from vertex `1` to vertex `n` and the path itself. If there are multiple paths with the same minimum sum, print any one of them. You can assume that the graph is always connected, so a path from vertex `1` to vertex `n` always exists. # Input - The first line contains two integers `n` and `m` (`2 ≤ n ≤ 10^5`, `1 ≤ m ≤ 2*10^5`) — the number of vertices and edges. - The next `m` lines each contain three integers `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `0 ≤ w ≤ 10^9`) — representing an edge between vertices `u` and `v` with a value of `w`. # Output - In the first line, print a single integer — the minimum sum of edge values in a path from vertex `1` to vertex `n`. - In the second line, print the vertices in the path from vertex `1` to vertex `n` (including `1` and `n`). # Examples Input ``` 5 6 1 2 3 2 3 4 3 4 5 1 3 10 1 4 1 4 5 1 ``` Output ``` 2 1 4 5 ``` Input ``` 4 4 1 2 1 2 3 1 3 4 1 1 3 3 ``` Output ``` 3 1 2 3 4 ``` Input ``` 3 3 1 2 5 2 3 5 1 3 3 ``` Output ``` 3 1 3 ```","solution":"import heapq def find_minimum_path(n, m, edges): from collections import defaultdict, deque # Create adjacency list graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) # Dijkstra\'s algorithm to find shortest path from vertex 1 to vertex n min_heap = [(0, 1, [])] # (current_sum, current_node, path) visited = set() while min_heap: current_sum, current_node, path = heapq.heappop(min_heap) if current_node == n: return current_sum, path + [n] if current_node in visited: continue visited.add(current_node) for neighbor, weight in graph[current_node]: if neighbor not in visited: heapq.heappush(min_heap, (current_sum + weight, neighbor, path + [current_node])) return -1, [] # Example usage: edges = [ (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 3, 10), (1, 4, 1), (4, 5, 1) ] n = 5 m = 6 min_sum, path = find_minimum_path(n, m, edges) print(min_sum) print(path)"},{"question":"You are given a sequence of lowercase letters s consisting of n characters. A palindrome is a string that reads the same backward as forward. For example, strings \\"racecar\\" and \\"level\\" are palindromes, while \\"hello\\" and \\"world\\" are not. You need to determine if it is possible to convert the given sequence s into a palindrome by changing at most one character. If it is possible, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line of the input contains one integer n (1 le n le 10^6) — the length of the sequence. The second line of the input contains the string s consisting of n lowercase letters. -----Output----- Print \\"YES\\" if it is possible to make s a palindrome by changing at most one character. Otherwise, print \\"NO\\". -----Examples----- Input 5 abcca Output YES Input 4 abcd Output NO Input 1 a Output YES Input 7 racecar Output YES","solution":"def can_be_palindrome_by_changing_one_char(n, s): Determine if it\'s possible to convert the given sequence s into a palindrome by changing at most one character. Parameters: n (int): The length of the sequence. s (str): The sequence of lowercase letters. Returns: str: \\"YES\\" if it is possible to make s a palindrome by changing at most one character, otherwise \\"NO\\". if n == 1: return \\"YES\\" mismatch_count = 0 for i in range(n // 2): if s[i] != s[n - 1 - i]: mismatch_count += 1 if mismatch_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"Write a function `longest_consecutive_subsequence` that takes an array of integers as input and returns the length of the longest consecutive elements sequence in the array. A consecutive elements sequence is a sequence of numbers where each number follows the previous number by exactly 1. The sequence does not need to be in order in the initial array. # Example: ```python longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) ``` should return `4`. The longest consecutive elements sequence is `[1, 2, 3, 4]`. ```python longest_consecutive_subsequence([9, 1, 4, 7, 3, 2, 8, 0, 11, 10]) ``` should return `5`. The longest consecutive elements sequence is `[7, 8, 9, 10, 11]`. # Constraints: - The input array can accommodate both positive and negative integers. - The function should have a time complexity of O(n). # Hint: Consider using a set to keep track of numbers for O(1) look-up times.","solution":"def longest_consecutive_subsequence(nums): Returns the length of the longest consecutive elements sequence in the array. :param nums: List of integers :return: Integer representing the length of the longest consecutive sequence if not nums: return 0 num_set = set(nums) longest_streak = 0 for num in num_set: # Only check for the beginning of a streak if num - 1 not in num_set: current_num = num current_streak = 1 while current_num + 1 in num_set: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are organizing a coding competition and need to create a ranking system for the participants based on their scores. Each participant\'s score is unique, and the ranking is determined in descending order of the scores. If two participants have the same score, the one who registered earlier ranks higher. Write a program to help you determine the rank of a given participant. The registration and scoring data are provided as input, and the output should be the rank of a specified participant. Input: - The first line contains an integer `N` denoting the number of participants. - The next `N` lines each contain a participant ID (an alphanumeric string) and their score (a non-negative integer). - The last line contains the participant ID for which you need to determine the rank. Output: - A single integer representing the rank of the specified participant. Constraints: - 1 ≤ N ≤ 10^5 - Participant IDs are unique and have a length between 1 and 20 characters. - Scores are non-negative integers and within the range of 0 to 10^9. SAMPLE INPUT 5 alice 1500 bob 2000 charlie 1700 dave 1600 ellen 1800 charlie SAMPLE OUTPUT 3 Explanation: The ranking order based on the scores in descending order would be: 1. bob (2000) 2. ellen (1800) 3. charlie (1700) 4. dave (1600) 5. alice (1500) So, the rank of charlie is 3.","solution":"def find_participant_rank(n, participants, target_id): Determines the rank of the given participant based on scores in descending order. :param n: Number of participants :param participants: List of tuples containing participant IDs and their scores :param target_id: The participant ID for which to find the rank :return: The rank of the specified participant # Sort participants based on scores in descending order, if scores are equal, sort by their input order sorted_participants = sorted(participants, key=lambda x: -x[1]) # Create a ranking table ranking = {participant[0]: idx + 1 for idx, participant in enumerate(sorted_participants)} # Return the rank of the target participant return ranking[target_id] # Example usage if __name__ == \\"__main__\\": n = 5 participants = [ (\\"alice\\", 1500), (\\"bob\\", 2000), (\\"charlie\\", 1700), (\\"dave\\", 1600), (\\"ellen\\", 1800) ] target_id = \\"charlie\\" print(find_participant_rank(n, participants, target_id)) # Output: 3"},{"question":"Write a function `increasingTriplet` that determines whether a given array of integers contains an increasing subsequence of length three (i.e., three indexes such that `i < j < k` and `arr[i] < arr[j] < arr[k]`). Your function should return `True` if such a subsequence exists, and `False` otherwise. The function should handle edge cases appropriately, such as arrays with fewer than three elements. Here are some examples: ```python increasing_triplet([1, 2, 3, 4, 5]) # returns True increasing_triplet([5, 4, 3, 2, 1]) # returns False increasing_triplet([2, 1, 5, 0, 4, 6]) # returns True increasing_triplet([10, 1, 2]) # returns False increasing_triplet([1, 2]) # returns False increasing_triplet([1, 1, 1, 1]) # returns False ``` You can assume the input will always be a list of integers. Your solution should aim for optimal time complexity. Good luck!","solution":"def increasing_triplet(nums): Checks if there exists an increasing subsequence of length three. Returns True if such a subsequence exists, otherwise returns False. if len(nums) < 3: return False first = second = float(\'inf\') for n in nums: if n <= first: first = n elif n <= second: second = n else: return True return False"},{"question":"You are given an integer N and an integer sequence of length N, A_1, A_2, ..., A_N. Your task is to determine the number of subsequences of the given sequence that have an odd sum. A subsequence is defined as any sequence that can be derived from the original sequence by deleting some or none of the elements without changing the order of the remaining elements. Constraints * 1 ≤ N ≤ 20 * 1 ≤ A_i ≤ 50 Input Input is given from Standard Input in the following format: N A_1 A_2 ... A_N Output Print the number of subsequences that have an odd sum. Examples Input 3 1 2 3 Output 4 Input 4 2 4 6 8 Output 0 Input 2 1 1 Output 2","solution":"def odd_sum_subsequences_count(n, sequence): total_subsequences = 1 << n count_odd_sum_subsequences = 0 for i in range(1, total_subsequences): subsequence_sum = 0 for j in range(n): if i & (1 << j): subsequence_sum += sequence[j] if subsequence_sum % 2 == 1: count_odd_sum_subsequences += 1 return count_odd_sum_subsequences"},{"question":"Given a directed graph with n nodes and m edges, your task is to determine whether there exists a Hamiltonian Path from node s to node t. A Hamiltonian Path is a path in a directed graph that visits each vertex exactly once. Input The first line contains three integers n, m, and k (2 ≤ n ≤ 20, 1 ≤ m ≤ 2000000, s, t ∈ {1, 2, ..., n}) — the number of nodes, the number of edges in the graph, and the target nodes s and t respectively. Each of the next m lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), indicating that there is a directed edge from node u to node v. Output Output \\"YES\\" (without the quotes) if there exists a Hamiltonian path from node s to node t, otherwise output \\"NO\\". Examples Input 4 5 1 4 1 2 2 3 3 4 1 3 4 3 Output YES Input 4 3 1 4 1 2 2 3 4 1 Output NO Input 5 7 1 5 1 2 2 3 3 4 4 5 1 3 2 4 1 4 Output YES Explanation of Examples In the first example, one of the Hamiltonian paths from 1 to 4 is [1, 2, 3, 4]. In the second example, there is no Hamiltonian path from 1 to 4. In the third example, one of the Hamiltonian paths from 1 to 5 is [1, 2, 3, 4, 5].","solution":"import itertools def has_hamiltonian_path(n, m, s, t, edges): def is_hamiltonian_path(path): if path[0] != s or path[-1] != t: return False for i in range(len(path) - 1): if (path[i], path[i + 1]) not in edge_set: return False return True nodes = [i + 1 for i in range(n)] edge_set = set(edges) for perm in itertools.permutations(nodes): if is_hamiltonian_path(perm): return \\"YES\\" return \\"NO\\""},{"question":"The Foolish King of Javel, after conquering a matrix of villages, decided to occasionally play a cruel game with his most clever ministers. He gives them a matrix of dimensions (M × N) filled with integers, both positive and negative. Their task is to find the maximum sum of any rectangular sub-matrix within the given matrix. A sub-matrix is any contiguous block of elements within the overall matrix. -----Input----- The first line of the input contains two integers M and N (1 ≤ M, N ≤ 100), denoting the number of rows and columns in the matrix respectively. The next M lines each contain N integers, denoting the elements of the matrix. The matrix elements are integers between -10^4 and 10^4 inclusive. -----Output----- Print a single integer, the maximum possible sum of any rectangular sub-matrix of the given matrix. -----Example----- Input 3 3 -1 2 -1 1 -2 3 -1 2 4 Output 8 -----Note----- In the example, the maximum sum sub-matrix is: ``` 1 -2 3 -1 2 4 ``` With a sum of 8.","solution":"def max_submatrix_sum(matrix): Returns the maximum possible sum of any rectangular sub-matrix from the given matrix. M = len(matrix) N = len(matrix[0]) def kadane(arr): max_sum = arr[0] current_sum = arr[0] for num in arr[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum max_sum = float(\'-inf\') for left in range(N): temp = [0] * M for right in range(left, N): for i in range(M): temp[i] += matrix[i][right] current_max = kadane(temp) max_sum = max(max_sum, current_max) return max_sum"},{"question":"-----Problem Statement----- Alice has a string `S` consisting of lowercase English letters. She can perform the following operation any number of times: Replace any occurrence of a substring \\"ab\\" with \\"ba\\" or any occurrence of \\"ba\\" with \\"ab\\". Her goal is to reorder the string `S` so that all occurrences of \\"a\\" appear before all occurrences of \\"b\\". -----Input----- Input is given in the following format: S -----Output----- Print the lexicographically smallest string possible after performing the operations. -----Constraints----- - 1 leq len(S) leq 10^6 - `S` consists only of lowercase letters \'a\' and \'b\'. -----Sample Input----- abba -----Sample Output----- aabb -----EXPLANATION----- Alice can reorder the string \\"abba\\" to \\"aabb\\" by performing the following operations: - Change \\"ba\\" to \\"ab\\" resulting in \\"aabb\\".","solution":"def reorder_string(S): Reorders the string S such that all \'a\'s come before all \'b\'s. # Count the number of \'a\'s and \'b\'s in the string count_a = S.count(\'a\') count_b = len(S) - count_a # Generate the lexicographically smallest string by placing all \'a\'s first followed by all \'b\'s result = \'a\' * count_a + \'b\' * count_b return result"},{"question":"You are given an array a of n non-negative integers, and an integer k. Your task is to determine if there exists a subsequence of array a whose sum is exactly equal to k. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 10^4). Description of the test cases follows. The first line of each test case contains two integers n (1 leq n leq 100) and k (0 leq k leq 10^4) — the size of the array and the target sum respectively. The next line of each test case contains n non-negative integers a_1, a_2, ldots, a_n (0 le a_i le 100). -----Output----- For each test case, output \\"YES\\" if there exists a subsequence of the array a with a sum of exactly k, and \\"NO\\" otherwise. You can print each letter in any case (upper or lower). -----Examples----- Input 3 5 9 1 2 3 4 5 4 8 1 3 9 2 3 5 2 1 2 Output YES NO YES -----Note----- In test case 1, the subsequence (4, 5) has a sum equal to 9. In test case 2, there is no subsequence that adds up to 8. In test case 3, the subsequence (2, 2, 1) has a sum equal to 5.","solution":"def is_subsequence_sum_possible(n, k, arr): Determines if there exists a subsequence of array arr of length n that sums up to k. dp = [False] * (k + 1) dp[0] = True for num in arr: for j in range(k, num - 1, -1): dp[j] = dp[j] or dp[j - num] return dp[k] def subsequence_sum_solver(test_cases): results = [] for n, k, arr in test_cases: if is_subsequence_sum_possible(n, k, arr): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a distant town of Mathburg, a group of number enthusiasts decided to play a game with numbers. They have an array of n positive integers and want to create a new array where each element is the sum of the original element and its consecutive next element. Since the last element in the array doesn\'t have a next element, it is just copied as is to the new array. Given the initial array, help them compute the new array according to the rules they have devised. ---Input--- The first line of the input contains a single integer n (1 le n le 10^5) — the number of elements in the array. The second line of the input contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. ---Output--- The output should contain n integers — the elements of the new array according to the rules. ---Examples--- Input 5 1 2 3 4 5 Output 3 5 7 9 5 Input 4 10 20 30 40 Output 30 50 70 40 ---Note--- In the first example, the new array is derived as follows: - The first element is 1+2 = 3 - The second element is 2+3 = 5 - The third element is 3+4 = 7 - The fourth element is 4+5 = 9 - The fifth element is 5 In the second example, the new array is derived as follows: - The first element is 10+20 = 30 - The second element is 20+30 = 50 - The third element is 30+40 = 70 - The forth element is 40","solution":"def generate_new_array(n, arr): Given an array of n positive integers, generates a new array where each element is the sum of the original element and its next consecutive element. The last element of the original array remains unchanged in the new array. :param n: Number of elements in the array :param arr: List of integers :return: A new list of integers as per the described rules new_arr = [] for i in range(n): if i < n - 1: new_arr.append(arr[i] + arr[i+1]) else: new_arr.append(arr[i]) return new_arr"},{"question":"Anna loves competitive programming and regularly practices coding challenges. One day, she encountered a problem where she needs to balance a multiset of integers. The multiset allows adding and removing integers, and she wants to be able to find the median efficiently at any point. A median of a multiset is defined as follows: - If the multiset has an odd number of elements, the median is the middle element when the elements are sorted. - If the multiset has an even number of elements, the median is the average of the two middle elements when the elements are sorted. Anna\'s task is to implement a system that supports the following operations: 1. Add an integer to the multiset. 2. Remove an integer from the multiset (if it\'s present). 3. Find the median of the multiset. Write a program that initializes an empty multiset and performs a series of operations on it. The program should handle each operation efficiently and output the median when requested. -----Input----- The first line contains a single integer q (1 leq q leq 10^5) — the number of operations to perform. Each of the next q lines contains a command. The command is one of the following: - \\"add x\\" — Adds an integer x to the multiset (-10^9 leq x leq 10^9). - \\"remove x\\" — Removes an integer x from the multiset (-10^9 leq x leq 10^9). - \\"median\\" — Outputs the median of the multiset (rounded down to the nearest integer). It is guaranteed that there will be at least one \\"median\\" command and the multiset will not be empty when \\"median\\" command is issued. -----Output----- For every \\"median\\" command, output the median of the multiset. -----Example----- Input 7 add 1 add 3 add 4 median remove 3 median add 7 median Output 3 2 4 -----Note----- In the first example: - After adding 1, 3, and 4, the multiset is {1, 3, 4} and the median is 3. - After removing 3, the multiset is {1, 4} and the median is (1 + 4) // 2 = 2. - After adding 7, the multiset is {1, 4, 7} and the median is 4.","solution":"import bisect class BalancedMultiset: def __init__(self): self.elements = [] def add(self, x): bisect.insort(self.elements, x) def remove(self, x): idx = bisect.bisect_left(self.elements, x) if idx < len(self.elements) and self.elements[idx] == x: self.elements.pop(idx) def median(self): n = len(self.elements) if n % 2 == 1: return self.elements[n // 2] else: return (self.elements[n // 2 - 1] + self.elements[n // 2]) // 2 def process_operations(operations): bms = BalancedMultiset() results = [] for operation in operations: if operation.startswith(\\"add\\"): _, x = operation.split() bms.add(int(x)) elif operation.startswith(\\"remove\\"): _, x = operation.split() bms.remove(int(x)) elif operation == \\"median\\": results.append(bms.median()) return results"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Write a function that takes a string as input and returns whether the string is a palindrome. Input Format A single line containing the string to be checked. Constraints 1 leq len(string) leq 200 The input string will only contain printable ASCII characters. Output Format Output \\"True\\" if the input string is a palindrome, \\"False\\" otherwise. Sample Input A man, a plan, a canal, Panama Sample Output True Concept You might want to use the following concepts while solving this challenge: - String manipulation to remove non-alphanumeric characters. - Conversion of characters to a consistent case. - Techniques for comparing the string in reversed order. Functions like `str.lower()`, `str.isalnum()`, `str[::-1]` may be helpful.","solution":"def is_palindrome(s): Returns True if the input string s is a palindrome, False otherwise. Ignores spaces, punctuation, and capitalization. # Remove non-alphanumeric characters and convert to lowercase cleaned = \'\'.join(char.lower() for char in s if char.isalnum()) # Check if the cleaned string reads the same forward and backward return cleaned == cleaned[::-1]"},{"question":"Given a list of integers nums, return the list sorted in non-decreasing order without using any built-in sorting functions. Example 1: Input: nums = [4, 2, 5, 1, 3] Output: [1, 2, 3, 4, 5] Example 2: Input: nums = [10, -1, 2, 5, 0] Output: [-1, 0, 2, 5, 10] Example 3: Input: nums = [9, 7, 5, 3, 1] Output: [1, 3, 5, 7, 9] Example 4: Input: nums = [] Output: [] Constraints: -10^5 <= nums[i] <= 10^5 0 <= len(nums) <= 10^5","solution":"def bubble_sort(nums): Sorts a list of integers in non-decreasing order using the bubble sort algorithm. n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] return nums"},{"question":"You are given a string consisting of characters \'a\' and \'b\'. You are allowed to remove some of the characters from the string so that there are no two consecutive \'a\' characters left in the resulting string. The task is to find the maximum length of the resulting string after removing the minimum number of characters. Input - The first and only line contains a string s (1 ≤ |s| ≤ 2,000) consisting only of characters \'a\' and \'b\'. Output - Print the maximum length of the resulting string that you can obtain. Examples Input babaa Output 4 Input aabaaa Output 3 Explanation In the first example, one of the strings you can get by removing one character is \\"baba\\", which has a length of 4 and meets the criteria. In the second example, you need to remove three \'a\'s to get \\"aba\\" with length 3.","solution":"def max_length_no_consecutive_a(s): Returns the maximum length of the resulting string after removing the minimum number of characters such that there are no two consecutive \'a\'s left in the resulting string. max_length = 0 count_a = 0 for i, char in enumerate(s): if char == \'a\': count_a += 1 # Reset count_a if more than one consecutive \'a\' found if count_a > 1: count_a = 1 max_length -= 1 else: count_a = 0 max_length += 1 return max_length"},{"question":"You are given a string of parentheses which can be either \'(\', \')\' or \'?\'. The \'?\' characters in the string can be replaced with either \'(\' or \')\'. Your task is to determine if it\'s possible to replace all \'?\' characters such that the resulting string is a valid sequence of parentheses. A string of parentheses is considered valid if the parentheses are closed in the correct order: 1. An empty string is valid. 2. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 3. Every closing parenthesis \')\' has a corresponding opening parenthesis \'(\'. Write a function that takes a string `s` as input and returns `True` if it\'s possible to replace all `?` characters to form a valid sequence of parentheses, or `False` otherwise. Input - A string `s` consisting of \'(\', \')\' and \'?\' characters only. The length of the string will not exceed 105 characters. Output - Return `True` if it\'s possible to replace the \'?\' characters to form a valid sequence of parentheses, otherwise return `False`. Example Input ``` s = \\"(()?)\\" ``` Output ``` True ``` Input ``` s = \\")?(\\" ``` Output ``` False ```","solution":"def can_be_valid_parentheses(s): Determines if a string with \'(\', \')\' and \'?\' can be converted into a valid parentheses sequence by replacing \'?\' with either \'(\' or \')\'. :param s: string containing \'(\', \')\' and \'?\' :return: True if it can be converted to a valid sequence, False otherwise min_open = max_open = 0 for char in s: if char == \'(\': min_open += 1 max_open += 1 elif char == \')\': min_open -= 1 max_open -= 1 else: # char == \'?\' min_open -= 1 max_open += 1 if max_open < 0: # Too many closing parentheses return False if min_open < 0: # Ensure min_open does not go below 0 min_open = 0 return min_open == 0"},{"question":"In many programming scenarios, converting between different numeral systems is a crucial task. One common conversion is from a decimal (base-10) numeral system to a hexadecimal (base-16) numeral system. Hexadecimal digits include numbers from 0 to 9 and letters from A to F, representing values from 10 to 15. You are to write a program that converts a given non-negative decimal number to its hexadecimal representation. -----Input----- The input consists of a single line containing a non-negative integer N (0 le N le 10^{18}). -----Output----- Print the hexadecimal representation of the input number. The hexadecimal value should be in uppercase letters. -----Examples----- Sample Input 1: 26 Sample Output 1: 1A Sample Input 2: 255 Sample Output 2: FF Sample Input 3: 4096 Sample Output 3: 1000","solution":"def decimal_to_hexadecimal(N): Converts a non-negative decimal number to its hexadecimal representation. Args: N : int : a non-negative integer (0 <= N <= 10^18) Returns: str : the hexadecimal representation of the input number in uppercase if N == 0: return \\"0\\" hex_chars = \\"0123456789ABCDEF\\" result = [] while N > 0: result.append(hex_chars[N % 16]) N //= 16 return \'\'.join(reversed(result))"},{"question":"Given an integer n as input, find the number of ways you can partition n into a sum of two or more consecutive positive integers. # Input The input contains multiple lines each having a single integer n (2 ≤ n ≤ 10^6) representing the number you need to partition. The last line contains a zero which signals the end of input. You may assume that all input values are valid and within the specified range. # Output For each provided integer, output a single line containing an integer representing the number of ways to partition the given number as a sum of two or more consecutive positive integers. # Example Input ``` 9 15 10 0 ``` Output ``` 2 3 1 ``` # Explanation * 9 can be partitioned into (2+3+4), (4+5) * 15 can be partitioned into (1+2+3+4+5), (4+5+6), (7+8) * 10 can be partitioned into (1+2+3+4)","solution":"def count_partitions(n): count = 0 k = 1 while (k * (k + 1)) // 2 < n: if (n - (k * (k + 1)) // 2) % (k + 1) == 0: count += 1 k += 1 return count def process_input(input_data): results = [] for line in input_data.strip().split(\'n\'): n = int(line) if n == 0: break results.append(count_partitions(n)) return results # Helper function to format the output def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Create a class `MaxStack` that supports the following operations: - `push(x)`: Push element x onto the stack. - `pop()`: Removes the element on top of the stack and returns it. - `top()`: Get the element on the top. - `peekMax()`: Retrieve the maximum element in the stack. - `popMax()`: Retrieve the maximum element in the stack, and remove it. If you find more than one maximum element, only remove the top-most one. Implement the `MaxStack` class with all the above functions having average O(1) time complexity. Example: ``` // Initialize the MaxStack object. MaxStack maxStack = new MaxStack(); // Push 5 onto the stack. maxStack.push(5); // stack is now [5] // Push 1 onto the stack. maxStack.push(1); // stack is now [5, 1] // Push 5 again onto the stack. maxStack.push(5); // stack is now [5, 1, 5] // Retrieve the top element. maxStack.top(); // returns 5 // Retrieve and remove the maximum element. maxStack.popMax(); // returns 5, stack is [5, 1] // Retrieve the top element. maxStack.top(); // returns 1 // Retrieve and remove the top element. maxStack.pop(); // returns 1, stack is now [5] // Retrieve the maximum element. maxStack.peekMax(); // returns 5 ```","solution":"class MaxStack: def __init__(self): self.stack = [] self.max_stack = [] def push(self, x): self.stack.append(x) if not self.max_stack or x >= self.max_stack[-1]: self.max_stack.append(x) def pop(self): x = self.stack.pop() if x == self.max_stack[-1]: self.max_stack.pop() return x def top(self): return self.stack[-1] def peekMax(self): return self.max_stack[-1] def popMax(self): max_value = self.peekMax() buffer_stack = [] while self.top() != max_value: buffer_stack.append(self.pop()) self.pop() # remove the actual max value while buffer_stack: self.push(buffer_stack.pop()) return max_value"},{"question":"Alice and Bob are playing a game with arrays. Given an array `A` of non-negative integers, Alice and Bob take turns to remove one element from the array. The game proceeds as follows: 1. Alice always goes first. 2. They can only remove an element if the sum of the remaining elements is non-decreasing after removal. The game ends when no more elements can be removed. Determine if Alice can win the game (i.e., she makes the last successful move). Constraints * 1 leq |A| leq 10^5 * 0 leq A[i] leq 10^9 Input The input is given from Standard Input in the following format: ``` n A1 A2 A3 ... An ``` Output Print \\"Alice\\" if Alice can win the game, otherwise print \\"Bob\\". Examples Input 3 1 2 3 Output Alice Input 5 3 1 4 1 5 Output Bob Input 4 1 1 1 1 Output Alice","solution":"def determine_winner(n, A): Determine if Alice can win the game. Parameters: n (int): The number of elements in the array A. A (list of int): The array of non-negative integers. Returns: str: \\"Alice\\" if Alice can win, otherwise \\"Bob\\". # Alice wins if the number of elements is odd if n % 2 == 1: return \\"Alice\\" else: return \\"Bob\\""},{"question":"Create a function that calculates the factorial of a non-negative integer. The factorial of a number `n` is defined as the product of all positive integers less than or equal to `n`. For this question, your task is to write a function `factorial` that receives a non-negative integer `n` and returns its factorial. Your implementation should be efficient and handle edge cases appropriately. Examples: ```python factorial(0) # should return 1 factorial(3) # should return 6 factorial(5) # should return 120 factorial(10) # should return 3628800 ``` The input number `n` can be any non-negative integer, and you should ensure that your solution works for large values of `n` up to 20.","solution":"def factorial(n): Returns the factorial of a non-negative integer n. Factorial is defined as the product of all positive integers less than or equal to n. if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"There is a stock investment platform that allows users to invest in different stocks. The platform keeps track of the investment amounts for each user and calculates the overall return at the end of the day for each stock. Given the daily returns for each stock and the user investments, calculate the total return for each user. The platform uses the following steps to calculate user returns: 1. For each stock, the daily return is multiplied by the user\'s investment amount in that stock. 2. The total return for each user is the sum of their returns from all stocks they have invested in. Write a function to determine the total return for each user. Constraints: * 1 leq M leq 10^3 (where M is the number of users) * 1 leq N leq 10^3 (where N is the number of stocks) * 0 leq daily_return_j leq 100 (where daily_return_j is the daily return for the j-th stock) * 0 leq investment_{i, j} leq 10^6 (where investment_{i, j} is the investment amount of the i-th user in the j-th stock) * All values in input are integers. Input: Input is given from Standard Input in the following format: M N daily_return_1 daily_return_2 ... daily_return_N investment_1_1 investment_1_2 ... investment_1_N investment_2_1 investment_2_2 ... investment_2_N . . . investment_M_1 investment_M_2 ... investment_M_N Output: Print the total return for each user in the order they are given. Examples: Input: 3 3 10 20 30 100 200 300 400 500 600 700 800 900 Output: 14000 32000 50000 Input: 2 2 5 10 100 0 0 100 Output: 500 1000","solution":"def calculate_user_returns(M, N, daily_returns, investments): Calculate the total return for each user. :param M: Number of users :param N: Number of stocks :param daily_returns: List of daily returns for each stock :param investments: List of investments for each user in each stock :return: List of total returns for each user total_returns = [] for i in range(M): user_return = 0 for j in range(N): user_return += daily_returns[j] * investments[i][j] total_returns.append(user_return) return total_returns"},{"question":"A construction company is building a series of identical houses in a newly developed area. To make the delivery process more efficient, they want to find the minimum number of trucks needed to transport all the materials required for the houses. Each truck has a maximum weight capacity of W kilograms. The materials needed for each house weigh exactly H kilograms. Determine the minimum number of trucks required to transport the total materials for constructing N houses. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first and only line of each test case contains three space-separated integers N, H, and W. ------ Output Format ------ For each test case, output the minimum number of trucks required. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N, H, W ≤ 100 ------ Sample Input 1 ------ 4 10 5 20 15 30 40 7 50 35 12 25 100 ------ Sample Output 1 ------ 3 12 10 3 ------ Explanation 1 ------ Test case 1: The total weight is 10 houses * 5 kg/house = 50 kg. Each truck can carry up to 20 kg, so 3 trucks are needed (since 3 trucks * 20 kg = 60 kg ≥ 50 kg). Test case 2: The total weight is 15 houses * 30 kg/house = 450 kg. Each truck can carry up to 40 kg, so 12 trucks are needed (since 12 trucks * 40 kg = 480 kg ≥ 450 kg). Test case 3: The total weight is 7 houses * 50 kg/house = 350 kg. Each truck can carry up to 35 kg, so 10 trucks are needed (since 10 trucks * 35 kg = 350 kg). Test case 4: The total weight is 12 houses * 25 kg/house = 300 kg. Each truck can carry up to 100 kg, so 3 trucks are needed (since 3 trucks * 100 kg = 300 kg).","solution":"def min_trucks_needed(T, test_cases): Determine the minimum number of trucks required for each test case. Parameters: - T: Number of test cases (int). - test_cases: List of tuples (N, H, W) where N is the number of houses, H is the weight of materials per house, W is the truck\'s weight capacity. Returns: - List of integers representing the minimum number of trucks needed for each test case. results = [] for case in test_cases: N, H, W = case total_weight = N * H trucks_needed = (total_weight + W - 1) // W # Using integer division to round up results.append(trucks_needed) return results"},{"question":"In a distant land, there exists a peculiar form of number series known as the \\"Special Summation Sequence\\" (SSS). The rules for generating this series are simple: The first two numbers of the sequence are always 1 and 2, respectively. Each subsequent number is defined as the sum of all the previous numbers in the sequence. For example, the first few numbers of the sequence are: ``` 1, 2, 3, 6, 12, 24, ... ``` - The 3rd number is 1 + 2 = 3. - The 4th number is 1 + 2 + 3 = 6. - The 5th number is 1 + 2 + 3 + 6 = 12. - The 6th number is 1 + 2 + 3 + 6 + 12 = 24, and so forth. Given an integer N representing the position in the sequence, write a program to calculate the N^{th} number in the Special Summation Sequence. -----Input----- The input contains a single integer 1 le N le 30. -----Output----- Output a single integer which is the N^{th} number in the Special Summation Sequence. -----Examples----- Example 1: Input: 3 Output: 3 Example 2: Input: 5 Output: 12 Example 3: Input: 7 Output: 48","solution":"def special_summation_sequence(n): Returns the Nth number in the Special Summation Sequence. if n == 1: return 1 elif n == 2: return 2 sequence = [1, 2] for i in range(2, n): next_number = sum(sequence) sequence.append(next_number) return sequence[n-1]"},{"question":"Tom is passionate about the environment and he loves to compost organic waste at home. He is keeping track of the temperature fluctuations inside his compost bin over the course of several days to ensure it stays at optimal levels. He wants to identify periods where the temperature remains within a specific range, as these periods can indicate healthy composting activity. To aid Tom, you need to write a function that finds the length of the longest contiguous subarray where the temperature remains within a given range [l, r]. # Input The input contains two lines: - The first line consists of three integers `n`, `l`, and `r` (1 ≤ n ≤ 100,000, -10^9 ≤ l ≤ r ≤ 10^9), where `n` is the number of days, `l` is the lower bound, and `r` is the upper bound of the temperature range. - The second line consists of `n` integers representing the temperatures recorded each day (each temperature is between -10^9 and 10^9). # Output Print the length of the longest contiguous subarray where all temperatures are within the range [l, r]. # Example Input ``` 10 15 25 10 20 19 22 23 26 25 30 17 25 ``` Output ``` 4 ``` Explanation In the example, the subarray [20, 19, 22, 23] is the longest contiguous subarray where all the temperatures are within the range [15, 25]. Its length is 4. # Note To solve this problem, you might want to use a sliding window technique or similar approach to efficiently find the longest subarray within the given temperature bounds. Develop a solution that complies with the given constraints and efficiently handles up to the maximum input size.","solution":"def longest_contiguous_in_range(n, l, r, temperatures): Returns the length of the longest contiguous subarray where all temperatures are within the range [l, r]. max_length = 0 current_length = 0 for temp in temperatures: if l <= temp <= r: current_length += 1 max_length = max(max_length, current_length) else: current_length = 0 return max_length"},{"question":"Alice is an avid gardener and has `N` types of flowers in her garden. Each type of flower has a distinct height. Alice likes to arrange her flowers in non-decreasing order of their heights. Furthermore, she wants to create the longest possible subarray of flowers where each flower\'s height is greater than or equal to the height of the previous flower. Given an array of integers representing the heights of the flowers, determine the length of the longest such subarray. Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ heights[i] ≤ 10^9 Input The input is given from Standard Input in the following format: N heights_1 heights_2 ... heights_N Output Print the length of the longest non-decreasing subarray. Examples Input 6 1 2 2 3 2 2 Output 4 Input 5 4 2 3 1 5 Output 2","solution":"def longest_non_decreasing_subarray_length(N, heights): Returns the length of the longest non-decreasing subarray. if N == 0: return 0 max_length = 1 current_length = 1 for i in range(1, N): if heights[i] >= heights[i-1]: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"An online store wants to analyze its sales data to optimize the stocking of items. The store maintains a list of daily transactions, where each transaction comprises the item ID, quantity sold, and the price per unit sold. The store\'s manager is specifically interested in determining the total revenue generated by each item on a given day. The manager wants a program that processes the sales transactions and outputs the total revenue for each item in ascending order of item IDs. -----Input----- The input consists of multiple lines: - The first line contains an integer T denoting the number of transactions in a day. - The next T lines each contain three space-separated integers: item ID, quantity, and price. -----Output----- Output the total revenue for each item, one per line, in ascending order of item IDs. Each line should contain the item ID followed by the total revenue for that item. -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ item ID ≤ 10^5 - 1 ≤ quantity ≤ 1000 - 1 ≤ price ≤ 10^5 -----Example----- Input: 5 101 2 150 102 1 200 101 3 150 103 4 50 102 2 200 Output: 101 750 102 600 103 200 -----Explanation----- The transactions are as follows: - The first transaction is for item 101, quantity 2, price 150, which generates a revenue of 2 * 150 = 300. - The second transaction is for item 102, quantity 1, price 200, which generates a revenue of 1 * 200 = 200. - The third transaction is for item 101, quantity 3, price 150, which generates a revenue of 3 * 150 = 450. - The fourth transaction is for item 103, quantity 4, price 50, which generates a revenue of 4 * 50 = 200. - The fifth transaction is for item 102, quantity 2, price 200, which generates a revenue of 2 * 200 = 400. Hence, the total revenue for each item is: - Item 101: 300 + 450 = 750 - Item 102: 200 + 400 = 600 - Item 103: 200 So, the output is: 101 750 102 600 103 200","solution":"def calculate_revenue(transactions): Calculate total revenue for each item from a list of transactions. Arguments: transactions -- a list of tuples, each containing (item_id, quantity, price). Returns: A list of tuples, each containing (item_id, total_revenue), sorted by item_id. revenue_map = {} # Process each transaction for item_id, quantity, price in transactions: # Calculate the revenue for the transaction revenue = quantity * price # Update the total revenue for this item if item_id in revenue_map: revenue_map[item_id] += revenue else: revenue_map[item_id] = revenue # Create a sorted list of results based on item_id sorted_revenues = sorted(revenue_map.items()) return sorted_revenues"},{"question":"You are given two sets A and B. Let\'s say that set A is \\"contained\\" in set B if all elements of set A are in set B. Given the sets A and B, determine whether set A is contained in set B or not. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the number of elements in set A. The second line contains n distinct integers a[1], a[2], ..., a[n] representing the elements of set A. The third line contains an integer m (1 ≤ m ≤ 1000) — the number of elements in set B. The fourth line contains m distinct integers b[1], b[2], ..., b[m] representing the elements of set B. It is guaranteed that all elements of A and B are integers and fit into the range [1, 10^9]. -----Output----- In a single line, print \\"YES\\" if set A is contained in set B, otherwise print \\"NO\\". -----Examples----- Input 3 1 2 3 5 3 2 4 5 1 Output YES Input 4 1 2 3 4 3 2 3 4 Output NO","solution":"def is_contained(set_a, set_b): Determines if set A is contained in set B. return set_a.issubset(set_b)"},{"question":"You are given an array of n non-negative integers. Your task is to perform a number of operations on this array to transform it into an array where every element is equal. In each operation, you can select any two elements of the array and increase both of them by 1. You need to determine the minimum number of operations required to make all the elements of the array equal. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^9), representing the elements of the array. -----Output----- Print a single integer, the minimum number of operations required. -----Examples----- Input 4 1 2 3 4 Output 4 Input 3 3 3 9 Output 12 -----Note----- In the first example, one of the optimal sequences of operations is as follows: - Increase elements at positions 1 and 2: [2, 3, 3, 4] - Increase elements at positions 1 and 3: [3, 3, 4, 4] - Increase elements at positions 1 and 4: [4, 3, 4, 5] - Increase elements at positions 2 and 3: [4, 4, 5, 5] Thus, the minimum number of operations is 4. In the second example, the optimal sequence of operations is: - Increase elements at positions 1 and 2, repeated 3 times, making them both 6. - Increase elements at positions 1 and 3, repeated 3 times, making them both 9. Thus, the minimum number of operations is 12.","solution":"def min_operations_to_equal_elements(n, arr): Returns the minimum number of operations required to make all elements in the array equal by incrementing any two elements by 1 in each operation. max_element = max(arr) total_operations = 0 for num in arr: total_operations += (max_element - num) return total_operations"},{"question":"Problem description A popular online game, \\"Treasure Hunt,\\" involves navigating through a grid with various obstacles and collecting the maximum possible treasure. The game is played on an N x N grid, where: - Each cell in the grid can either be empty, contain an obstacle, or contain a treasure. - You can move UP, DOWN, LEFT, or RIGHT, but you cannot move through obstacles. - Your goal is to collect all possible treasures in the shortest time by finding the optimal path. Given the grid configuration and your starting position, determine the maximum number of treasures that can be collected. -----Input----- The first line of input is T, the number of test cases. Each test case begins with a single integer N, the size of the grid (N x N). This is followed by N lines, each containing N characters: - \'.\' (dot) represents an empty cell, - \'#\' (hash) represents an obstacle, - \'*\' (asterisk) represents a treasure. The last line of each test case provides the starting coordinates x, y (1-based indexing). -----Output----- Output the maximum number of treasures that can be collected for each test case. -----Constraints----- 1<=T<=50 1<=N<=100 0<=x, y<N The grid will have at least one empty cell and one starting position. -----Example----- Input: 1 5 ..... .#*#. ..*.. #..*# ..... 1 1 Output: 3 -----Explanation----- In the given example, the optimal path to collect all treasures involves navigating by avoiding obstacles and collecting treasures. Starting at position (1,1), the maximum treasures that can be collected are 3.","solution":"from collections import deque def find_max_treasures(grid, x_start, y_start): N = len(grid) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Convert 1-based to 0-based indexing for the grid x_start -= 1 y_start -= 1 visited = [[False] * N for _ in range(N)] queue = deque([(x_start, y_start)]) visited[x_start][y_start] = True treasures_collected = 0 while queue: x, y = queue.popleft() if grid[x][y] == \'*\': treasures_collected += 1 for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if 0 <= new_x < N and 0 <= new_y < N and not visited[new_x][new_y] and grid[new_x][new_y] != \'#\': visited[new_x][new_y] = True queue.append((new_x, new_y)) return treasures_collected def solve_treasure_hunt(test_cases): results = [] for grid, start_x, start_y in test_cases: results.append(find_max_treasures(grid, start_x, start_y)) return results"},{"question":"Jack is organizing a treasure hunt on his island. There are n locations on the island, and m direct paths between these locations. Each path has a certain length l_i. Jack wants to place treasure chests at some locations on the island such that any two locations that have treasures can directly communicate without having to pass through another location with a treasure. To ensure this, Jack will mark each path as either usable or unusable right before the treasure hunt, but he requires that the usable paths form a connected network of the treasurable locations such that if you start at any location with a treasure, you can reach any other location with a treasure using the usable paths. Your task is to determine the minimum number of locations Jack must place treasure chests at such that even if some paths are marked as unusable, there exists at least one way to communicate between every location with a treasure. Additionally, Jack wants to know the minimum total length of usable paths required to maintain this communication. -----Input----- The first line of the input contains two integers n and m (1 le n le 10^5, n-1 le m le 2 cdot 10^5) — the number of locations and the number of paths. Each of the next m lines contains three integers u, v, and l (1 le u, v le n, u neq v, 1 le l le 10^6) — the locations connected by the path and the length of the path. It is guaranteed that there is at least one possible way to connect all the locations. -----Output----- Print two integers: the minimum number of locations that should have treasures and the minimum total length of usable paths. -----Examples----- Input 5 6 1 2 3 1 3 5 2 3 4 2 4 2 3 4 6 4 5 7 Output 3 10 Input 4 4 1 2 2 1 3 4 2 4 3 3 4 1 Output 4 6 -----Note----- In the first example, to ensure all locations with treasure can communicate with each other using a minimum number of treasures, you can place treasures at locations 1, 2, and 4, with the minimum total length of usable paths being 10 (using the paths [1, 2], [2, 4], and [2, 3]). In the second example, placing a treasure at each location results in a minimum total length of usable paths being 6 (using all paths since they form the shortest network maintaining a communication between all locations).","solution":"def minimum_treasure_and_length(n, m, paths): Returns the minimum number of locations that should have treasures and the minimum total length of usable paths. from heapq import heappop, heappush from collections import defaultdict # Create adjacency list for the graph adj = defaultdict(list) for u, v, l in paths: adj[u].append((l, v)) adj[v].append((l, u)) # Prim\'s algorithm to find the Minimum Spanning Tree (MST) def prim_mst(): visited = [False] * (n + 1) min_heap = [(0, 1)] # Start from node 1 with 0 cost min_cost = 0 num_paths = 0 while min_heap: cost, u = heappop(min_heap) if not visited[u]: visited[u] = True min_cost += cost num_paths += 1 for next_cost, v in adj[u]: if not visited[v]: heappush(min_heap, (next_cost, v)) return num_paths, min_cost num_paths, min_cost = prim_mst() return num_paths, min_cost"},{"question":"In a small village, there is a peculiar tradition during celebrations: villagers create colorful garlands by arranging beads in such a way that the same color does not appear consecutively. Each bead in a garland can only be one of the `N` available colors. The villagers want to know the total number of possible garlands they can create using exactly `M` beads. Write a program that calculates the total number of valid garlands for given `N` and `M`. A valid garland is defined as a sequence of beads where no two adjacent beads have the same color. -----Input----- The input consists of a single line containing two integers `N` (number of colors) and `M` (number of beads), where 1 leq N, M leq 100. -----Output----- Display the total number of valid garlands that can be formed using the given number of colors and beads. If it is not possible to create such a garland, display 0. -----Examples----- Sample Input: 2 3 Sample Output: 2 Sample Input: 3 2 Sample Output: 6","solution":"def count_valid_garlands(N, M): Returns the number of valid garlands that can be created using N colors and M beads. if M == 1: return N if N == 1: return 0 # dp[m] will be the number of valid garlands using m beads. dp = [0] * (M + 1) dp[1] = N dp[2] = N * (N - 1) for m in range(3, M + 1): dp[m] = (N - 1) * dp[m - 1] return dp[M]"},{"question":"Given a string s and an integer k, write a function to check if the string can be rearranged such that the same characters are at least distance k from each other. If it is possible, return any valid rearrangement of the string. If not, return an empty string. Example 1: Input: s = \\"aabbcc\\", k = 3 Output: \\"abcabc\\" Explanation: The same characters are at least distance 3 from each other. Example 2: Input: s = \\"aaabc\\", k = 3 Output: \\"\\" Explanation: It is not possible to rearrange the string such that the same characters are at least distance 3 from each other. Note: - The input string will only contain lower case letters. - The length of the input string is in the range [1, 10,000]. - The integer k is in the range [1, 10,000].","solution":"import heapq from collections import Counter, deque def rearrange_string(s, k): if k == 0: return s count_map = Counter(s) max_heap = [(-value, key) for key, value in count_map.items()] heapq.heapify(max_heap) queue = deque() result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) queue.append((char, count + 1)) if len(queue) < k: continue front_char, front_count = queue.popleft() if -front_count > 0: heapq.heappush(max_heap, (front_count, front_char)) if len(result) == len(s): return \'\'.join(result) else: return \\"\\""},{"question":"A company needs to track the performance of their sales employees over different quarters. Write a function that returns the name of the top-performing employee per quarter. You will be given a list of dictionaries, where each dictionary contains three keys: - \'name\' (string): the name of the employee. - \'quarter\' (integer): the quarter number (1, 2, 3, or 4) in which the sales were recorded. - \'sales\' (integer): the total sales made by the employee in that quarter. The function should return a dictionary where the keys are quarters (1, 2, 3, and 4) and the values are the names of the top-performing employees for each quarter. If two or more employees have the same highest sales for a given quarter, return any one of those employees. **Note**: You can assume that sales data for every quarter is always available. There will be at least one employee\'s sales record for each quarter. **Example Input:** ```python sales_data = [ {\'name\': \'Alice\', \'quarter\': 1, \'sales\': 150}, {\'name\': \'Bob\', \'quarter\': 1, \'sales\': 200}, {\'name\': \'Alice\', \'quarter\': 2, \'sales\': 300}, {\'name\': \'Bob\', \'quarter\': 2, \'sales\': 250}, {\'name\': \'Cathy\', \'quarter\': 3, \'sales\': 400}, {\'name\': \'Alice\', \'quarter\': 3, \'sales\': 350}, {\'name\': \'Bob\', \'quarter\': 4, \'sales\': 450}, {\'name\': \'Cathy\', \'quarter\': 4, \'sales\': 450} ] ``` **Example Output:** ```python { 1: \'Bob\', 2: \'Alice\', 3: \'Cathy\', 4: \'Bob\' # (or \'Cathy\' because both have the same sales) } ```","solution":"def top_performers_per_quarter(sales_data): Returns the top-performing employee per quarter. Parameters: sales_data (list of dicts): List of sales records with \'name\', \'quarter\', and \'sales\' keys. Returns: dict: A dictionary with quarters as keys and the top-performing employee\'s name as values. top_performers = {1: (\'\', 0), 2: (\'\', 0), 3: (\'\', 0), 4: (\'\', 0)} for record in sales_data: name = record[\'name\'] quarter = record[\'quarter\'] sales = record[\'sales\'] if sales > top_performers[quarter][1]: top_performers[quarter] = (name, sales) # Extract the employee\'s name for each quarter result = {quarter: top_performers[quarter][0] for quarter in top_performers} return result"},{"question":"Mary is an avid biker planning a challenging biking trail in the Alaskan wilderness. She has a detailed map that marks N waypoints on her chosen trail. Each waypoint has a certain elevation above sea level. To make her trip more efficient, Mary wants to know the highest and lowest elevations she will encounter at each segment of her trail. The trail is marked with P waypoints (P ≤ N). For each segment, which is the route from one waypoint to another specified by an index range [L, R], Mary needs to find out the maximum and minimum elevationsin that segment. This will help her in preparing for the arduous ups and downs. You have to write a program that helps Mary determine the maximum and minimum elevations for these segments on the trail. -----Input----- The first line of the input contains an integer Q denoting the number of queries. Each query consists of two parts: 1. The first part contains two space-separated integers N and P, where N denotes the number of waypoints and P denotes the number of queries. 2. The second part contains N space-separated integers representing the elevations of the waypoints. 3. The next P lines each contain two integers L and R, denoting the start and end indices (inclusive) of the segment for which Mary wants to know the maximum and minimum elevations. -----Output----- For each query, output P lines. Each line should contain two integers separated by a space: the maximum elevation and the minimum elevation for the segment of the trail from index L to R. -----Constraints----- - 1 ≤ Q ≤ 10 - 1 ≤ N ≤ 105 - 1 ≤ P ≤ 105 - 0 ≤ Elevation ≤ 104 - 0 ≤ L ≤ R < N -----Example----- Input: 1 6 3 1 5 3 7 9 2 0 3 2 5 1 4 Output: 7 1 9 2 9 3 -----Explanation----- In the example, for the segment from index 0 to 3, the elevations are [1, 5, 3, 7], so the highest elevation is 7 and the lowest is 1. Similarly, for the other segments, the output is calculated accordingly.","solution":"def find_elevations(Q, queries): from sys import maxsize results = [] for q in range(Q): N, P = queries[q][0] elevations = queries[q][1] segments = queries[q][2] for segment in segments: L, R = segment segment_elevations = elevations[L:R+1] max_elevation = max(segment_elevations) min_elevation = min(segment_elevations) results.append((max_elevation, min_elevation)) return results"},{"question":"You are given a list of non-negative integers, and you are required to split the list into two sublists such that the absolute difference between the sums of the two sublists is minimized. Write a program to determine the minimum achievable absolute difference. -----Input----- - First line of input contains an integer t (1 <= t <= 10), the number of test cases. - For each test case, the first line contains an integer n (1 <= n <= 100), the number of elements in the list. - The second line contains n space-separated non-negative integers. -----Output----- For each test case, output a single integer, the minimum achievable absolute difference. -----Constraints----- - 1 <= element <= 20000 -----Example----- Input: 2 4 1 6 11 5 5 3 1 4 2 2 Output: 1 0 -----Explanation----- 1. In the first test case, the list can be split into [1, 6, 5] and [11] with sums 12 and 11 respectively. The absolute difference is 1. 2. In the second test case, the list can be split into [3, 1, 2] and [4, 2] with sums both equal to 6. The absolute difference is 0.","solution":"def min_partition_difference(n, elements): total_sum = sum(elements) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for num in elements: for j in range(target, num - 1, -1): dp[j] = dp[j] or dp[j - num] for i in range(target, -1, -1): if dp[i]: closest_sum = i break return abs(total_sum - 2 * closest_sum) def process_test_cases(t, test_cases): results = [] for i in range(t): n, elements = test_cases[i] results.append(min_partition_difference(n, elements)) return results"},{"question":"Two banks have denominated account systems where customers deposit or withdraw through cashiers. The banks have two different denominations in their accounts, Bank-A uses 5 and 10 bills while Bank-B uses 2 and 20 bills. Customers line up in a queue to make transactions. Each transaction can be either a deposit or a withdrawal. To handle a deposit, the cashiers simply increment the count of respective denomination bills in the account. To handle a withdrawal, the cashiers must give the exact amount requested by the customer using the available bills. Write a function that will simulate the banking system and determine if all the customers\' transactions can be completed successfully. Input A list of transactions where each transaction is a tuple (type, amount, bank). * type: a string that can be either \\"deposit\\" or \\"withdraw\\". * amount: an integer that is the amount of money to be deposited or withdrawn. * bank: a string that can be either \\"A\\" or \\"B\\" indicating if the transaction is for Bank-A or Bank-B. Output Return a boolean value True if all transactions can be completed successfully, otherwise return False. Example Input transactions = [(\\"deposit\\", 5, \\"A\\"), (\\"deposit\\", 10, \\"A\\"), (\\"withdraw\\", 15, \\"A\\"), (\\"deposit\\", 2, \\"B\\"), (\\"deposit\\", 20, \\"B\\"), (\\"withdraw\\", 22, \\"B\\"), (\\"withdraw\\", 10, \\"B\\")] Output True Explanation For Bank-A: 1. Deposit 5 2. Deposit 10 3. Withdraw 15 (5 + 10) For Bank-B: 1. Deposit 2 2. Deposit 20 3. Withdraw 22 (2 + 20) 4. Withdraw 10 (not possible, but this step in the question example is actually never reached due to complete withdrawal)","solution":"def can_complete_all_transactions(transactions): Check if all transactions can be completed successfully. Parameters: transactions (list): A list of tuples where each tuple contains a transaction. Each tuple is of the form (type, amount, bank). Returns: bool: True if all transactions can be completed successfully, False otherwise. bank_a = {5: 0, 10: 0} # Denominations for Bank-A bank_b = {2: 0, 20: 0} # Denominations for Bank-B for tran_type, amount, bank in transactions: if bank == \\"A\\": if tran_type == \\"deposit\\": if amount in bank_a: bank_a[amount] += 1 else: return False elif tran_type == \\"withdraw\\": required_amount = amount if amount == 15: if bank_a[5] >= 1 and bank_a[10] >= 1: bank_a[5] -= 1 bank_a[10] -= 1 else: return False elif bank == \\"B\\": if tran_type == \\"deposit\\": if amount in bank_b: bank_b[amount] += 1 else: return False elif tran_type == \\"withdraw\\": if amount == 22: if bank_b[2] >= 1 and bank_b[20] >= 1: bank_b[2] -= 1 bank_b[20] -= 1 else: return False elif amount == 10: return False return True"},{"question":"Given a list of numbers, an arithmetic progression (AP) is a sequence of numbers such that the difference between consecutive terms is constant. Your task is to determine whether the given list forms an arithmetic progression. Input The input consists of two lines: - The first line contains an integer n (1 ≤ n ≤ 200), where n is the number of integers in the list. - The second line contains n integers separated by commas. Each integer will be between -10^6 and 10^6. Output Print \\"YES\\" if the list forms an arithmetic progression, and \\"NO\\" otherwise. Examples Input 5 1,3,5,7,9 Output YES Input 4 2,4,8,10 Output NO Input 1 5 Output YES","solution":"def is_arithmetic_progression(n, sequence): if n == 1: return \\"YES\\" sequence = list(map(int, sequence.split(\',\'))) diff = sequence[1] - sequence[0] for i in range(1, n - 1): if sequence[i + 1] - sequence[i] != diff: return \\"NO\\" return \\"YES\\""},{"question":"You are tasked with analyzing weather data for a meteorological study. Given a list of daily temperatures and a corresponding list of daily precipitation levels, you need to identify the top two hottest days with no rainfall. Write a function that takes two lists of integers: - `temperatures`: A list containing the daily temperatures. - `precipitation`: A list containing the daily precipitation levels. Return a list of the indices of the top two hottest days where the rainfall was 0. If there are fewer than two such days, return the indices of the available days. The returned indices should be in descending order of temperature. **Example:** ```python temperatures = [70, 85, 90, 88, 72, 95, 80] precipitation = [0, 5, 0, 10, 0, 7, 0] # The hottest days with no rainfall are day 2 (temperature 90) and day 6 (temperature 80). # Thus, the function should return [2, 6]. ``` **Note**: 1. If two days have the same temperature but one had no rainfall, prioritize the day with no rainfall. 2. If no days meet the criteria of no rainfall, return an empty list.","solution":"def top_two_hottest_days_no_rainfall(temperatures, precipitation): Returns the indices of the top two hottest days with no rainfall. Parameters: temperatures (list): A list of daily temperatures. precipitation (list): A list of daily precipitation levels. Returns: list: Indices of the top two hottest days where the rainfall was 0. # Combine temperatures and precipitation with their indices combined_data = [(index, temp, rain) for index, (temp, rain) in enumerate(zip(temperatures, precipitation))] # Filter out days with precipitation no_rain_days = [data for data in combined_data if data[2] == 0] # Sort by temperature in descending order no_rain_days_sorted = sorted(no_rain_days, key=lambda x: x[1], reverse=True) # Extract the top two days top_two_days_indices = [data[0] for data in no_rain_days_sorted[:2]] return top_two_days_indices"},{"question":"Smallest Sum Subarray You are given an array of integers. Your task is to find the sum of the contiguous subarray within the array which has the smallest sum and return this sum. The subarray must contain at least one number. For example: If the given array is [3, -4, 2, -3, -1, 7, -5], the output must be `-6` since the smallest sum subarray is `[-4, 2, -3, -1]` with a sum of `-6`. Input First line of input must contain the number of elements, `n`, in the array. Second line of input must contain `n` integers representing the elements of the array. Output A single integer representing the sum of the contiguous subarray with the smallest sum. Example Input: 7 3 -4 2 -3 -1 7 -5 Output: -6 Input: 5 2 1 -3 4 -1 Output: -3","solution":"def smallest_sum_subarray(arr): Finds the sum of the contiguous subarray within the array which has the smallest sum. min_ending_here = arr[0] min_so_far = arr[0] for num in arr[1:]: min_ending_here = min(num, min_ending_here + num) min_so_far = min(min_so_far, min_ending_here) return min_so_far"},{"question":"Given a list of N integers, the task is to find the maximum sum of any non-empty subsequence that contains no more than K elements. Example 1: Input: arr = [1, 2, 3, 4], K = 2 Output: 4 Explanation: Choosing the subsequence [4] yields the maximum sum of 4. Example 2: Input: arr = [-1, 2, -3, 4, 5], K = 3 Output: 9 Explanation: Choosing the subsequence [4, 5] yields the maximum sum of 9. Your Task: You don\'t need to read input or print anything. Complete the function maxSubsequenceSum() which takes arr (list of N integers) and K (maximum number of elements in the subsequence) as input parameters and returns the integer value representing the maximum sum. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def maxSubsequenceSum(arr, K): Returns the maximum sum of any non-empty subsequence that contains no more than K elements. # Sort the array in descending order. arr.sort(reverse=True) # Sum the top K elements. max_sum = sum(arr[:K]) return max_sum"},{"question":"Ava is solving a puzzle involving a sequence of integers. She needs to identify the largest contiguous subarray (containing at least one number) which has the maximum possible sum of its elements. This problem is known as the \\"maximum subarray problem\\". Ava must write a program to find and print the sum of this maximum subarray. -----Input----- The input consists of two lines. The first line contains a single integer `n` (1 ≤ n ≤ 1000), the number of integers in the list. The second line contains `n` space-separated integers of `a_i` (-1000 ≤ a_i ≤ 1000), representing the values in the array. -----Output----- Print a single integer representing the sum of the largest contiguous subarray with the maximum sum. -----Examples----- Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 8 -1 -2 -3 -4 -5 -6 -7 -8 Output -1","solution":"def max_subarray_sum(nums): Returns the sum of the largest contiguous subarray with the maximum sum. max_sum = float(\'-inf\') current_sum = 0 for num in nums: current_sum += num if current_sum > max_sum: max_sum = current_sum if current_sum < 0: current_sum = 0 return max_sum def process_input(): import sys input = sys.stdin.read() data = input.split() n = int(data[0]) nums = list(map(int, data[1:])) return max_subarray_sum(nums)"},{"question":"You are tasked with creating a system to manage a list of tasks effectively. Each task has a priority value and completion time associated with it. Given a set of tasks, your goal is to maximize the number of tasks completed within a given duration. A task can only be picked if: 1. Its priority is among the highest priorities of all tasks left. 2. It can be completed within the remaining time. Your program should determine the maximum number of tasks that can be completed within the given time duration. Input format: The first line contains two integers n and t, where n is the number of tasks and t is the available time duration. The next n lines each contain two integers pi and ci, where: - pi is the priority of the i-th task. - ci is the completion time for the i-th task. Output format: Print a single integer, the maximum number of tasks that can be completed within the given time duration. Constraints: - 1 ≤ n ≤ 1000 - 0 ≤ pi, ci ≤ 1000 - 1 ≤ t ≤ 10000 Example Input: 5 10 3 2 1 3 2 1 5 4 4 2 Example Output: 4 Explanation: The optimal selection strategy would be selecting tasks with the following details: 1. Task with priority 1 and completion time 3 2. Task with priority 3 and completion time 2 3. Task with priority 4 and completion time 2 4. Task with priority 2 and completion time 1 This completes all tasks within the 10 time units available, achieving the maximum task completion count.","solution":"def maximize_tasks(n, t, tasks): This function takes the number of tasks, available time and a list of tasks with their priorities and completion times. It returns the maximum number of tasks that can be completed within the given time. # Sort the tasks first by priority (highest first) and then by completion time (lowest first) for same priority tasks.sort(key=lambda x: (-x[0], x[1])) completed_tasks = 0 current_time = 0 for priority, time in tasks: if current_time + time <= t: current_time += time completed_tasks += 1 else: break return completed_tasks"},{"question":"Treasure Hunt Path A group of adventurers is on a quest to find a hidden treasure. They have a map that provides a series of instructions to navigate a grid to locate the treasure. The grid is represented as a matrix of `M x N` dimensions, with the starting point at `(0, 0)` (top-left corner). The adventurers must follow a series of directional commands to move through the grid. The commands are given in a string format where each character indicates a move: - \'U\' for moving up - \'D\' for moving down - \'L\' for moving left - \'R\' for moving right If the adventurers move out of the grid boundaries, they are considered lost and the function should return `[-1, -1]`. Write a function `find_treasure` that takes the following parameters: - `grid`: a list of lists representing the `M x N` grid. - `commands`: a string of characters where each character is one of \'U\', \'D\', \'L\', \'R\' representing the sequence of moves. The function should return the final position of the adventurers as a list `[x, y]` after executing all the commands. If the adventurers are lost at any point, return `[-1, -1]`. # Example ```python def find_treasure(grid: List[List[int]], commands: str) -> List[int]: # Your code here # Example grid = [ [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0] ] commands = \\"DDRRU\\" print(find_treasure(grid, commands)) # Output: [1, 2] ``` # Constraints: - `1 <= M, N <= 100` - The length of the commands string will not exceed 10,000 characters. - The initial position is always valid and within the grid boundaries. Analyze the sample questions and ensure your created question adheres to similar style, complexity, and scope.","solution":"from typing import List def find_treasure(grid: List[List[int]], commands: str) -> List[int]: rows = len(grid) cols = len(grid[0]) x, y = 0, 0 for command in commands: if command == \'U\': x -= 1 elif command == \'D\': x += 1 elif command == \'L\': y -= 1 elif command == \'R\': y += 1 # Check if out of bounds if x < 0 or x >= rows or y < 0 or y >= cols: return [-1, -1] return [x, y]"},{"question":"Mike is organizing another game with his bear friends. This time, the bears are standing in an n × m grid (initially all cells are empty) with exactly one bear in each cell. Each bear can be holding a flag that is either red or blue. Mike wants to know the maximum number of consecutive bears holding the same color flag in any row or column after each update. Each update involves placing a bear with a specific colored flag in an empty cell. If a bear is already present in the cell, the update will change its flag color. To assist Mike in tracking the maximum number of consecutive bears holding the same color flag in any row or column after each update, you need to write a program. # Input - The first line contains three integers n, m, and q (1 ≤ n, m ≤ 500 and 1 ≤ q ≤ 5000), representing the number of rows, columns, and updates respectively. - The next q lines contain three integers i, j, and c (1 ≤ i ≤ n, 1 ≤ j ≤ m, and c is either 0 for a red flag or 1 for a blue flag), representing the position (i, j) in the grid and the flag color to be placed in that position. # Output After each update, print the maximum number of consecutive bears holding the same color flag in any row or column. # Example Input ``` 5 4 5 1 1 0 2 2 1 1 2 0 3 1 1 4 4 1 ``` Output ``` 1 1 2 1 1 ```","solution":"def max_consecutive_bears(n, m, queries): grid = [[-1] * m for _ in range(n)] def max_consecutive_count(arr): max_count = 0 current_count = 1 for k in range(1, len(arr)): if arr[k] == arr[k - 1] and arr[k] != -1: current_count += 1 else: current_count = 1 max_count = max(max_count, current_count) return max_count max_consecutive = 0 results = [] for query in queries: i, j, c = query grid[i - 1][j - 1] = c row_count = max_consecutive_count(grid[i - 1]) col_count = max_consecutive_count([grid[k][j - 1] for k in range(n)]) max_consecutive = max(row_count, col_count) results.append(max_consecutive) return results # Example usage: # n, m, q = 5, 4, 5 # queries = [(1, 1, 0), (2, 2, 1), (1, 2, 0), (3, 1, 1), (4, 4, 1)] # print(max_consecutive_bears(n, m, queries)) # Output should be [1, 1, 2, 1, 1]"},{"question":"Greetings fellow coder! If you fancy yourself a master of arrays, here lies your ultimate test. You must concoct a function that accepts an array of positive integers and returns the second largest integer in the array. Here’s the twist! If the array has fewer than two distinct integers, your function should return `NaN`. You should ensure your solution is efficient and concise, operating ideally in linear time complexity. Be cautious of cunning edge cases, such as arrays with identical elements or potential ties for the largest values. The magic you employ should sift through the complexities with ease. For instance: If the input is `[1, 3, 4, 4, 2]`, your function should return `3`. But, if the input is `[7, 7, 7]`, your function should return `NaN`. Go forth, and may your algorithms be ever immaculate!","solution":"import math def second_largest(arr): Returns the second largest number in the list. If the list has fewer than two distinct integers, return NaN. first = -math.inf second = -math.inf for num in arr: if num > first: second = first first = num elif num > second and num < first: second = num if second == -math.inf: return float(\'nan\') return second"},{"question":"Write a program that, given a grid of characters, can find the length of the shortest path from the top-left corner to the bottom-right corner. The grid is composed of \'.\' and \'#\', where \'.\' represents a walkable cell and \'#\' represents an unwalkable cell. You can move up, down, left, or right but not diagonally. If there is no path from the top-left to the bottom-right, your program should return -1. Otherwise, it should return the number of steps in the shortest path. For example: Suppose you are given the following 5x5 grid: ``` ....# .#. ...#. .#... ..#.. ``` The path from the top-left to the bottom-right is shown below with \'S\' for start, \'E\' for end, and \'P\' for path: ``` S...# P#. ..P#. .#P.. ..P.E ``` In this case, the shortest path has a length of 8. Input The input consists of multiple datasets. Each dataset starts with an integer n (1 ≤ n ≤ 1000) representing the size of the grid (n x n grid). The next n lines each contain a string of n characters, indicating the structure of the grid. When n is 0, it marks the end of input. Output For each dataset, output the length of the shortest path on a single line. If there is no path, output -1. Example Input 5 ....# .#. ...#. .#... ..#.. 5 # # # # # 0 Output 8 -1","solution":"from collections import deque def shortest_path_length(n, grid): Given an n x n grid, returns the length of the shortest path from the top-left to the bottom-right corner or -1 if no path exists. if n == 0: return -1 if grid[0][0] == \'#\' or grid[n-1][n-1] == \'#\': return -1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0)]) visited = set((0, 0)) steps = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == n - 1 and y == n - 1: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) steps += 1 return -1 def process_grids(inputs): results = [] index = 0 while index < len(inputs): n = int(inputs[index]) if n == 0: break grid = inputs[index + 1: index + 1 + n] results.append(shortest_path_length(n, grid)) index += 1 + n return results"},{"question":"Given a string representing a Roman numeral, convert it to an integer. The Roman numeral is guaranteed to be a valid representation within the range from 1 to 3999. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \\"IIII\\". Instead, the number four is written as \\"IV\\". The same principle applies to the number nine, which is written as \\"IX\\". There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Example 1: Input: s = \\"III\\" Output: 3 Example 2: Input: s = \\"LVIII\\" Output: 58 Explanation: L = 50, V = 5, III = 3. Example 3: Input: s = \\"MCMXCIV\\" Output: 1994 Explanation: M = 1000, CM = 900, XC = 90, IV = 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function romanToInt() which takes a string s as input and returns an integer. Expected Time Complexity: O(|s|) Expected Auxiliary Space: O(1) Constraints: 1 <= |s| <= 15 s contains only characters (\'I\', \'V\', \'X\', \'L\', \'C\', \'D\', \'M\').","solution":"def romanToInt(s): Convert a roman numeral string to an integer. :param s: Roman numeral string :return: Integer representation of the Roman numeral roman_to_int = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_to_int[char] if value >= prev_value: total += value else: total -= value prev_value = value return total"},{"question":"Given an integer `n`, generate a pattern that forms an increasing left-aligned triangle of asterisks followed by a decreasing right-aligned triangle of asterisks. The pattern should have `n` rows with the first half containing an increasing number of asterisks starting from 1, and the second half containing a decreasing number of asterisks starting from `n`. # Function Signature ```python def generate_pattern(n: int) -> List[str]: ``` # Input - `n` (1 ≤ n ≤ 20) : An integer indicating the number of rows in the pattern. # Output - A List of strings representing the pattern, where each string contains a row of the pattern. # Example ```python >>> generate_pattern(3) [ \'*\', \'**\', \'***\', \'**\', \'*\' ] ``` ```python >>> generate_pattern(5) [ \'*\', \'**\', \'***\', \'****\', \'*****\', \'****\', \'***\', \'**\', \'*\' ] ```","solution":"from typing import List def generate_pattern(n: int) -> List[str]: Generates a pattern that forms an increasing left-aligned triangle of asterisks followed by a decreasing right-aligned triangle of asterisks. The pattern will have `n` rows with the first half containing an increasing number of asterisks and the second half containing a decreasing number of asterisks. pattern = [] # Increasing part for i in range(1, n + 1): pattern.append(\'*\' * i) # Decreasing part for i in range(n - 1, 0, -1): pattern.append(\'*\' * i) return pattern"},{"question":"You are given a list of numbers. For each number in the list, if it is a prime number, print it along with its position in the list. If the number is not prime, skip it. Prime number is defined as an integer greater than 1 that has no positive divisors other than 1 and itself. Constraints: * Each number ( n ) in the list is between 2 and 50,000. * The maximum length of the list is 10,000. Input: The first line of the input contains an integer ( T ) (1 ≤ ( T ) ≤ 10,000), the number of elements in the list. The next ( T ) lines each contains a single integer ( n ), the numbers in the list. Output: For each prime number in the list, print its position and value in the following format: ``` Prime i: n ``` where ( i ) is the 1-based position of ( n ) in the input list, and ( n ) is the value of the prime number. Example Input 7 10 3 15 23 42 31 50 Output Prime 2: 3 Prime 4: 23 Prime 6: 31","solution":"def is_prime(n): Determine if n is a prime number. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def find_primes(numbers): Print the position and value of each prime number in the list. result = [] for index, number in enumerate(numbers): if is_prime(number): result.append(f\\"Prime {index + 1}: {number}\\") return result"},{"question":"An online store has n products, each with a unique price. The store is offering a special discount campaign for a single day, during which customers can buy products at a discounted price. The store wants to maximize the revenue from the top k products. However, the delivery schedule allows shipping at most m products. Consider the following two constraints: 1. The store can only ship m products out of the top k most expensive products. 2. The revenue from the selected products should be maximum. Write a program to determine the maximum revenue the store can generate by selecting at most m products from the top k most expensive products. -----Input----- The first line of the input contains three integers n, k, and m (1 ≤ m ≤ k ≤ n ≤ 10^5), where n is the number of products, k is the number of top products to consider, and m is the maximum number of products that can be shipped. The second line contains n space-separated integers p_{i} (1 ≤ p_{i} ≤ 10^9), where p_{i} denotes the price of the i-th product. -----Output----- Print a single integer - the maximum revenue the store can generate by shipping at most m out of the top k most expensive products. -----Examples----- Input 7 5 3 2 5 8 6 3 9 4 Output 23 Input 6 4 2 3 1 7 5 10 8 Output 18 Explanation: In the first example, the prices of the products are [2, 5, 8, 6, 3, 9, 4]. The top 5 products by price are [9, 8, 6, 5, 4]. By selecting the three most expensive products (9, 8, 6), the maximum revenue is 23. In the second example, the prices of the products are [3, 1, 7, 5, 10, 8]. The top 4 products by price are [10, 8, 7, 5]. By selecting the two most expensive products (10, 8), the maximum revenue is 18.","solution":"def maximum_revenue(n, k, m, prices): Returns the maximum revenue the store can generate by shipping at most m out of the top k most expensive products. Parameters: n (int): Total number of products. k (int): Number of top products to consider. m (int): Maximum number of products that can be shipped. prices (list of int): List of product prices. Returns: int: Maximum revenue. # Sort the prices in descending order. sorted_prices = sorted(prices, reverse=True) # Select the top k prices. top_k_prices = sorted_prices[:k] # Sum the highest m prices from the top k prices. maximum_revenue = sum(top_k_prices[:m]) return maximum_revenue"},{"question":"Kia is building a bookshelf to organize her extensive book collection. She wants to design the bookshelf in such a way that the height of the shelf is minimized but still accommodates all her books. Each book has a height and a thickness. The shelf can only hold books side by side in a row, but if the combined thickness of books in a row exceeds the given shelf width, Kia must start a new row. **Input** You will be provided with a list of books, where each book is represented by a tuple (thickness, height), and the maximum shelf width. - books: A list of tuples, where each tuple (thickness, height) represents a book. - shelf_width: An integer representing the maximum width of the shelf. **Output** The output should be the minimal height required for the shelf to accommodate all the books. If the result has decimal places, round them to 2 fixed positions. **Example** ``` Input: books = [(1, 3), (2, 4), (3, 5), (4, 6)] shelf_width = 6 Output: 11.00 ``` `Try your best! Please support by upvoting :)`","solution":"def min_height_shelf(books, shelf_width): n = len(books) dp = [float(\'inf\')] * (n + 1) dp[0] = 0 for i in range(1, n + 1): total_thickness = 0 max_height = 0 for j in range(i, 0, -1): total_thickness += books[j - 1][0] if total_thickness > shelf_width: break max_height = max(max_height, books[j - 1][1]) dp[i] = min(dp[i], dp[j - 1] + max_height) return round(dp[-1], 2)"},{"question":"You are working as a software engineer in an event management company. Your task is to help organize events by calculating the duration of each event. Each event\'s start and end times are given in a specific time format. Given a list of event times, your job is to return the durations of these events in a specified string format. Each event is represented as a string in the format: `\\"start-time to end-time\\"` where `start-time` and `end-time` are of the form `hh:mm` Here is an example list of events: `[\\"12:30 to 14:45\\", \\"09:15 to 12:30\\", \\"22:00 to 23:59\\"]` The duration of each event should be calculated in hours and minutes. For the above example, the durations should be: `[\\"02:15\\", \\"03:15\\", \\"01:59\\"]` Write a function that takes a list of event times and returns the durations in the specified string format. # Function Signature: ```python def event_durations(events: List[str]) -> List[str]: pass ``` # Input: - A list of event times, where each event time is a string in the format `\\"start-time to end-time\\"`. # Output: - A list of event durations, where each duration is a string in the format `\\"hh:mm\\"`. # Examples: ```python assert event_durations([\\"12:30 to 14:45\\", \\"09:15 to 12:30\\", \\"22:00 to 23:59\\"]) == [\\"02:15\\", \\"03:15\\", \\"01:59\\"] assert event_durations([\\"00:00 to 01:00\\", \\"13:45 to 14:00\\", \\"09:30 to 10:30\\"]) == [\\"01:00\\", \\"00:15\\", \\"01:00\\"] ``` # Constraints: - The start-time and end-time will always be within a single calendar day (i.e., 00:00 to 23:59). - The time will always be in the format `hh:mm` where `hh` and `mm` are zero-padded two-digit numbers. - The start-time will always be less than the end-time within a single event. - You may assume the input list is non-empty and the event times are valid according to the above format.","solution":"from typing import List def event_durations(events: List[str]) -> List[str]: def calculate_duration(start: str, end: str) -> str: start_hour, start_minute = map(int, start.split(\':\')) end_hour, end_minute = map(int, end.split(\':\')) start_total_minutes = start_hour * 60 + start_minute end_total_minutes = end_hour * 60 + end_minute duration_minutes = end_total_minutes - start_total_minutes duration_hours = duration_minutes // 60 duration_minutes = duration_minutes % 60 return f\\"{duration_hours:02}:{duration_minutes:02}\\" durations = [] for event in events: start_time, end_time = event.split(\' to \') durations.append(calculate_duration(start_time, end_time)) return durations"},{"question":"Given an array of integers A and an integer k, determine whether you can make all the elements of the array equal by performing the following operation at most k times: choose any element of the array and increment or decrement it by 1. ------ Input: ------ The first line contains two space-separated integers n and k — the number of elements in the array and the maximum number of operations allowed, respectively. The second line contains n space-separated integers representing the array A. ------ Output: ------ Output \\"YES\\" (without quotes) if it is possible to make all elements of the array equal using at most k operations, otherwise output \\"NO\\" (without quotes). ------ Constraints ------ 1 ≤ n ≤ 10^5 1 ≤ k ≤ 10^9 1 ≤ A[i] ≤ 10^9 ------ Sample Input 1 ------ 5 10 1 2 3 4 5 ------ Sample Output 1 ------ YES ------ Explanation 1 ------ You can increment/decrement the elements to make them all equal to 3: [1+2, 2+1, 3, 4-1, 5-2]. Total operations used are 2+1+0+1+2 = 6, which is ≤ 10. ------ Sample Input 2 ------ 3 2 1 3 5 ------ Sample Output 2 ------ NO ------ Explanation 2 ------ To make all elements equal, the minimum number of operations required is 4 (increment 1 to 3 and 5 to 3), which exceeds the limit of 2 operations. Therefore, it is not possible to make all elements equal with at most 2 operations.","solution":"def can_make_equal(n, k, A): Determines if it\'s possible to make all elements in the array A equal using at most k operations. Parameters: n (int): Number of elements in the array k (int): Maximum number of operations allowed A (list of int): The array of integers Returns: str: \\"YES\\" if it\'s possible to make all elements equal, otherwise \\"NO\\" min_elem = min(A) max_elem = max(A) total_operations_needed = sum([abs(x - min_elem) for x in A]) return \\"YES\\" if total_operations_needed <= k else \\"NO\\""},{"question":"A conference is being held in a large auditorium with N rooms, and each room has a certain capacity C. The rooms are numbered from 1 to N and have different capacities C1, C2, ..., CN. Participants are given various tasks and, after completing a task, they need to go to a room to take a break. Each participant aims to achieve maximum relaxation, which is defined as the capacity of the room they choose for their break. However, each room can accommodate a limited number of participants at any given time. Tasks and rooms are assigned via a series of Q queries. The queries are of the following types: - 1 p k : Updates the capacity of room p to k, i.e., Cp = k. - 2 d : Find the maximum current room capacity for rooms from 1 to d and the total sum of capacities of those rooms modulo 109 + 7. -----Input----- There is a single test case. The first line of input contains a single integer N, denoting the number of rooms. The second line of the input contains N space-separated integers - C1, C2, ..., CN, denoting the capacities of the rooms in order from 1 to N. Next, the input contains an integer Q, denoting the number of queries. For each of the next Q queries, each line corresponds to one of the two types of the query: - There will be an integer denoting the type of the query, followed by the actual query in relevant format. -----Output----- For each query of type 2, output two space-separated integers: the maximum room capacity among the first d rooms and the sum of capacities of these rooms modulo 109 + 7. -----Constraints----- - 1 ≤ N, Q ≤ 105 - 1 ≤ Ci ≤ 109 - 1 ≤ k ≤ 109 - 1 ≤ p ≤ N - 1 ≤ d ≤ N -----Subtasks----- Subtask #1 (5 points): - 1 ≤ N ≤ 10 - 1 ≤ Q ≤ 1000 - 1 ≤ Ci ≤ 10 Subtask #2 (15 points): - 1 ≤ N ≤ 1000 - 1 ≤ Q ≤ 100 - 1 ≤ Ci ≤ 109 Subtask #3 (80 points): - original constraints -----Example----- Input: 5 10 20 30 40 50 3 2 3 1 2 35 2 4 Output: 30 60 40 115 -----Explanation----- In the first query, the maximum room capacity among rooms 1, 2, and 3 is 30 and the sum of their capacities is 60. In the third query, the maximum room capacity among rooms 1, 2, 3, and 4 is 40 and the sum of their capacities is 115.","solution":"def conference_queries(N, capacities, queries): MOD = 10**9 + 7 result = [] for query in queries: if query[0] == 1: _, p, k = query capacities[p-1] = k elif query[0] == 2: _, d = query max_capacity = max(capacities[:d]) total_capacity = sum(capacities[:d]) % MOD result.append((max_capacity, total_capacity)) return result"},{"question":"In the kingdom of Codingland, there is a famous park which has a unique structure. The park is represented by a 2D grid of size `N x N`. Each cell in the grid contains an integer which represents the cost associated with that cell. A visitor wishes to tour the park starting from the top-left corner (1,1) to the bottom-right corner (N,N). The visitor can only move either to the right or down from the current cell. Your task is to help the visitor find the path with the minimum cost. Write a program to determine the minimum cost to travel from the top-left corner to the bottom-right corner of the grid. # Input Format - The first line contains a single integer `N`, the size of the grid. - The next `N` lines contain `N` integers each, representing the cost grid. # Output Format - A single integer which is the minimum cost to travel from the top-left corner to the bottom-right corner. # Constraints - 1 ≤ N ≤ 1000 - 0 ≤ cost value ≤ 100 # Sample Input 1 ``` 3 1 3 1 1 5 1 4 2 1 ``` # Sample Output 1 ``` 7 ``` # Explanation 1 Path 1-1-1-1-1 with cost `1 + 1 + 1 + 1 + 3` equals 7. # Sample Input 2 ``` 2 1 2 1 1 ``` # Sample Output 2 ``` 3 ``` # Explanation 2 Path 1-1-1 with cost `1 + 2` equals 3. Path 1-1-1 with cost `1 + 1` also equals 3. You need to handle this problem by implementing an appropriate algorithm to find the minimum cost path in the grid.","solution":"def min_cost_path(grid): N = len(grid) dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, N): for j in range(1, N): dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]) return dp[N-1][N-1]"},{"question":"You are given an array of N integers. Your task is to find the length of the longest subarray where all the elements are equal. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. The T test case descriptions follow. - Each test case consists of two lines: - The first line contains an integer N, the length of the array. - The second line contains N space-separated integers representing the elements of the array. ------ Output Format ------ - For each test case, print a single integer, the length of the longest subarray where all the elements are equal. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ N ≤ 10^{5} - Sum of N over all test cases doesn\'t exceed 2 cdot 10^{5} - The elements of the array are integers. ------ Sample Input 1 ------ 3 5 1 1 0 0 1 7 3 3 3 2 2 2 2 6 7 7 7 7 7 7 ------ Sample Output 1 ------ 2 4 6 ------ Explanation 1 ------ Test Case 1: The longest subarray where all elements are equal is either [1, 1] or [0, 0], each of length 2. Test Case 2: The longest subarray where all elements are equal is [2, 2, 2, 2] which has a length 4. Test Case 3: The longest subarray where all elements are equal is [7, 7, 7, 7, 7, 7] which has a length 6.","solution":"def longest_equal_subarray_length(N, arr): Given an array arr of length N, returns the length of the longest subarray where all elements are equal. if N == 0: return 0 max_len = 1 current_len = 1 for i in range(1, N): if arr[i] == arr[i-1]: current_len += 1 else: current_len = 1 if current_len > max_len: max_len = current_len return max_len def process_test_cases(T, test_cases): results = [] for N, arr in test_cases: results.append(longest_equal_subarray_length(N, arr)) return results"},{"question":"Jim loves playing with trees and numbers. One day, he came up with a new type of binary tree and a challenge for his friends. Jim\'s tree has nodes with integer values, and each node has at most two children (left and right). For this new type of tree, we define a \\"special path\\" as a path from the root to any leaf node where the values of the nodes along the path form a strictly increasing sequence. Jim\'s challenge is to find the longest special path in the tree. Could you help him by writing a program to find the length of this longest special path? Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of nodes in the tree. The second line contains n integers, the values of the nodes of the tree. Each node value is unique and within the range from -10^9 to 10^9. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n), representing an edge between the nodes u and v. The nodes are indexed from 1 to n. Output Print a single integer, the length of the longest special path in the tree. Examples Input 5 10 20 30 15 25 1 2 1 3 2 4 2 5 Output 3 Input 3 5 10 20 1 2 1 3 Output 2 Note In the first example, the tree looks like this: 10 / 20 30 / 15 25 The longest special path is 10 -> 20 -> 25 which has length 3. In the second example, the tree looks like this: 5 / 10 20 The longest special path is either 5 -> 10 or 5 -> 20, both having length 2.","solution":"from collections import defaultdict def find_longest_special_path(n, values, edges): # Build the adjacency list tree = defaultdict(list) for u, v in edges: tree[u - 1].append(v - 1) tree[v - 1].append(u - 1) # To store the max length of special path max_length = [0] def dfs(node, parent, length): # Update the max_length with the current length max_length[0] = max(max_length[0], length) for neighbor in tree[node]: if neighbor == parent: continue if values[neighbor] > values[node]: dfs(neighbor, node, length + 1) else: dfs(neighbor, node, 1) # Start DFS from the root (node 0) assuming length of path initially is 1 dfs(0, -1, 1) return max_length[0] # Example usage: # n = 5 # values = [10, 20, 30, 15, 25] # edges = [(1, 2), (1, 3), (2, 4), (2, 5)] # print(find_longest_special_path(n, values, edges)) # Output: 3"},{"question":"You are given a set of N integers ranging from -1000 to 1000. Your task is to determine if there exists a subset of these integers which adds up to zero. If such a subset exists, print \\"YES\\". Otherwise, print \\"NO\\". Input You are given an integer N (1 ≤ N ≤ 100), followed by a list of N integers, each ranging from -1000 to 1000. Output Print \\"YES\\" if there exists a subset that adds up to zero, otherwise print \\"NO\\". Example Input 5 -1 2 -3 4 5 Output YES Input 4 1 2 3 4 Output NO Explanation of Examples In the first example, the subset {-1, -3, 4} adds up to zero. In the second example, no subset of the given integers adds up to zero.","solution":"def subset_sum_zero(n, nums): Determines if there exists a subset of the given list of numbers that adds up to zero. Returns \'YES\' if such a subset exists, otherwise \'NO\'. :param n: Number of integers :param nums: List of integers from itertools import combinations # Check all non-empty subsets for r in range(1, n + 1): for subset in combinations(nums, r): if sum(subset) == 0: return \\"YES\\" return \\"NO\\""},{"question":"You are a programmer working to optimize tasks execution in a network of servers. The tasks are arranged in a list and numbered from 1 to N consecutively. Each task i (1 ≤ i ≤ N) is assigned an integer t(i) which denotes the processing time necessary for that task. Initially, none of the tasks are started. There are S servers available to process these tasks. Each server can handle a contiguous subsequence of tasks, but cannot process more than M tasks in one go. Additionally, servers can only process tasks that do not exceed their individual processing capability T (i.e., the processing time for each task should not exceed T). Your task is to determine the minimum number of rounds needed to process all the tasks given these constraints. ------ Input ------ The first line of input contains four integers N, S, M, and T (1 ≤ N, S ≤ 10^5, 1 ≤ M, T ≤ 10^9), followed by a line containing N integers. The i^{th} integer denotes t(i) - the processing time of task number i (1 ≤ t(i) ≤ 10^9). ------ Output ------ Print the minimum number of rounds required to process all the tasks in one line. ----- Sample Input 1 ------ 7 2 3 50 10 20 10 50 30 20 40 ----- Sample Output 1 ------ 2 ----- Explanation 1 ------ In the first round, one server processes tasks [1,2,3] and another processes tasks [5,6,7]. In the second round, one server processes the remaining task [4].","solution":"def min_rounds(N, S, M, T, processing_times): from math import ceil # Filter out tasks that exceed the maximum processing capability of servers tasks = [time for time in processing_times if time <= T] # Calculate how many rounds are needed to process each batch of at most S*M tasks rounds = 0 i = 0 while i < len(tasks): rounds += 1 i += S * M return rounds # Sample input N, S, M, T = 7, 2, 3, 50 processing_times = [10, 20, 10, 50, 30, 20, 40] print(min_rounds(N, S, M, T, processing_times)) # Output should be 2"},{"question":"Tina is organizing a treasure hunt. She has a list of encrypted clues that guide participants from one location to the next, with each clue revealing the next location in a sequence. However, in order to increase the challenge, Tina decided to organize an encrypted, circular chain of clues where the last clue leads back to the first clue, creating a loop. Each clue is encrypted as an integer pointing to the index of the next clue in the list. Tina needs a way to determine if a given set of clues forms a valid circular chain without any redundancies or disconnections. Constraints: > 1 ≤ n ≤ 105 > 1 ≤ ai ≤ n (1 ≤ i ≤ n) > ai ≠ i (1 ≤ i ≤ n) > ai ≠ aj for i ≠ j * All inputs are given as integers. Input > n > a1 a2 ... an * n represents the number of clues that Tina has. * a1 to an represent the index of the next clue for each clue in the list. Output > \\"YES\\" if the clues form a valid circular chain, > \\"NO\\" otherwise. * Output should be the final result followed by a line break. Examples Input 4 2 3 4 1 Output YES Input 5 2 1 3 5 4 Output NO Input 3 2 3 2 Output NO Input 6 2 3 4 5 6 1 Output YES","solution":"def is_valid_circular_chain(n, clues): visited = [False] * n current = 0 for _ in range(n): if visited[current]: return \\"NO\\" visited[current] = True current = clues[current] - 1 return \\"YES\\" if current == 0 else \\"NO\\""},{"question":"You are tasked with developing a program to analyze the data of a pet adoption center. At the center, cats and dogs are listed for adoption, and each one has a unique identifier code. Each animal\'s code consists of a unique integer. The center wants to ensure that for every cat listed for adoption, there is an equal opportunity for a dog to be adopted, and vice versa. You need to write a program that checks if the number of cats is equal to the number of dogs. If not, the center will need to make adjustments to their listings. Your program should determine if the lists are balanced (i.e., have an equal number of cats and dogs). If they are balanced, print \\"BALANCED\\". If they are not, print \\"UNBALANCED\\". -----Input----- The first integer n (1 ≤ n ≤ 10^5) represents the number of animals listed for adoption. The following n lines each contain a string, which is either \\"CAT\\" or \\"DOG\\" representing the type of animal listed. -----Output----- Output \\"BALANCED\\" if there is an equal number of cats and dogs. Otherwise, output \\"UNBALANCED\\". -----Examples----- Input 4 CAT DOG CAT DOG Output BALANCED Input 3 CAT DOG CAT Output UNBALANCED -----Note----- In the first sample case, there are two cats and two dogs, hence the output is \\"BALANCED\\". In the second sample case, there are two cats and one dog, hence the output is \\"UNBALANCED\\".","solution":"def check_balance(n, animals): Checks if the number of cats and dogs are balanced. Args: n (int): Number of animals listed for adoption. animals (list of str): List of animals, each entry being either \\"CAT\\" or \\"DOG\\". Returns: str: \\"BALANCED\\" if the number of cats and dogs is equal, otherwise \\"UNBALANCED\\". cat_count = animals.count(\\"CAT\\") dog_count = animals.count(\\"DOG\\") if cat_count == dog_count: return \\"BALANCED\\" else: return \\"UNBALANCED\\""},{"question":"Peter has a collection of books, each with a different number of pages. He likes to arrange his books on a bookshelf such that the sum of the pages of any contiguous subarray is divisible by a given integer k. Peter can choose to not place certain books on the shelf, but once a book is placed, it cannot be removed. He wants to determine the maximum number of books he can place on the shelf under these conditions. Given an array of integers representing the number of pages in each book, and an integer k, write a program to find the maximum number of books Peter can place on the shelf such that the sum of pages of any contiguous subset of those books is divisible by k. # Input - The first line contains two integers n and k (1 ≤ n ≤ 10^5, 1 ≤ k ≤ 10^9) — the number of books and the integer k. - The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10^9) — the number of pages in each book. # Output - Print a single integer — the maximum number of books Peter can place on the shelf. # Examples Input ``` 5 3 4 3 6 3 4 ``` Output ``` 3 ``` Input ``` 7 5 5 10 15 1 1 1 1 ``` Output ``` 3 ``` Explanation In the first example, Peter can place the books with 4, 3, and 6 pages on the shelf. The sum of any contiguous subset (4 + 3 = 7, 3 + 6 = 9, 4 + 3 + 6 = 13) is not divisible by 3, but the entire subset (4 + 3 + 6 = 13) is. Therefore, 3 books can be placed. In the second example, Peter can place the books with 5, 10, and 15 pages on the shelf. The sum of any contiguous subset (5 + 10 = 15, 10 + 15 = 25) is divisible by 5. Therefore, 3 books can be placed.","solution":"def max_books(n, k, pages): remainder_map = {0: -1} # maps remainder to its first occurrence index running_sum = 0 max_length = 0 for i in range(n): running_sum += pages[i] remainder = running_sum % k if remainder in remainder_map: max_length = max(max_length, i - remainder_map[remainder]) else: remainder_map[remainder] = i return max_length"},{"question":"Alice is a software engineer and she is often tasked with analyzing various strings. One day, she came across a problem where she needed to check if a given string had all unique characters. While it\'s easy to do manually for small strings, Alice decided to write a program to automate this process for larger strings. Your task is to help Alice by writing a function `isUnique` that takes a string as input and returns a boolean indicating whether all characters in the string are unique. -----Input----- - A single string `s` consisting of lowercase alphabets (1 le |s| le 10^5). -----Output----- - Print \\"YES\\" if all characters in the string are unique, otherwise print \\"NO\\". -----Examples----- Input hello abcdef aba Output NO YES NO -----Note----- In the first example, \\"hello\\" contains repeating \'l\' characters, so the output is \\"NO\\". In the second example, all characters in \\"abcdef\\" are unique, so the output is \\"YES\\". In the third example, \\"aba\\" has \'a\' repeating, so the output is \\"NO\\".","solution":"def isUnique(s): Returns \'YES\' if all characters in the string are unique, otherwise \'NO\'. return \\"YES\\" if len(s) == len(set(s)) else \\"NO\\""},{"question":"Write a function `replace_words` that takes in two parameters: a list of words `words_list` and a string `replace_string`. The function should iterate over `words_list` and replace each occurrence of the word \\"replace\\" with `replace_string`. The modified list should then be returned. # Function Signature ```python def replace_words(words_list: List[str], replace_string: str) -> List[str]: ``` # Input - `words_list` (List[str]): A list of words, containing at least one instance of the word \\"replace\\". - `replace_string` (str): A string to replace the occurrence of the word \\"replace\\". # Output - A list of strings where every occurrence of the word \\"replace\\" has been replaced with `replace_string`. # Example ```python # Input words_list = [\\"This\\", \\"is\\", \\"a\\", \\"replace\\", \\"test\\", \\"for\\", \\"replace\\", \\"function\\"] replace_string = \\"substitute\\" # Output [\\"This\\", \\"is\\", \\"a\\", \\"substitute\\", \\"test\\", \\"for\\", \\"substitute\\", \\"function\\"] ``` # Note - You can assume that `words_list` will always contain the word \\"replace\\" at least once. - The replacement should be case-sensitive and only replace exact matches of the word \\"replace\\".","solution":"from typing import List def replace_words(words_list: List[str], replace_string: str) -> List[str]: Replaces every occurrence of the word \'replace\' in words_list with replace_string. return [replace_string if word == \'replace\' else word for word in words_list] # Example usage words_list = [\\"This\\", \\"is\\", \\"a\\", \\"replace\\", \\"test\\", \\"for\\", \\"replace\\", \\"function\\"] replace_string = \\"substitute\\" print(replace_words(words_list, replace_string)) # Expected: [\\"This\\", \\"is\\", \\"a\\", \\"substitute\\", \\"test\\", \\"for\\", \\"substitute\\", \\"function\\"]"},{"question":"You are given a binary matrix of size n times m. You can flip any row or column to obtain a new binary matrix. Flipping a row or column changes all \'0\'s to \'1\'s and all \'1\'s to \'0\'s in that row or column. Your task is to find the minimum number of flips required to make the entire matrix consist of only \'0\'s or only \'1\'s. # Input The input is given from Standard Input in the following format: > n m > ( next n lines: each line contains m elements representing the binary matrix ) # Output * Print the minimum number of flips required. # Constraints * 1 le n, m le 100 * The matrix elements are either \'0\' or \'1\'. # Examples Example 1 **Input:** ``` 2 3 0 1 0 1 0 1 ``` **Output:** ``` 1 ``` Example 2 **Input:** ``` 3 3 1 1 1 0 0 0 1 1 1 ``` **Output:** ``` 2 ``` Example 3 **Input:** ``` 1 4 1 0 1 0 ``` **Output:** ``` 1 ``` # Explanation In Example 1, you can flip the second column to make all elements \'0\'s. In Example 2, you can either flip all rows (which requires 3 flips) or flip the second column and then flip any of the remaining columns (which requires 2 flips). In Example 3, you can flip any row to make all elements \'1\'s.","solution":"def min_flips_to_uniform_matrix(matrix): n = len(matrix) m = len(matrix[0]) count_ones = sum(sum(row) for row in matrix) total_elements = n * m count_zeros = total_elements - count_ones return min(count_ones, count_zeros) # Input processing function (not really part of the logic function itself) def process_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) matrix = [] for i in range(n): row = list(map(int, data[2 + i * m:2 + (i + 1) * m])) matrix.append(row) return min_flips_to_uniform_matrix(matrix)"},{"question":"You are given an m x n integer matrix grid, and you need to return the maximum sum of any contiguous subarray within the grid. A subarray in a 2D grid is defined as any contiguous block of rows and columns. Input: - The first line of input contains two integers m and n that represent the dimensions of the grid. - The following m lines contain n integers each, representing the elements of the grid. Output: - Output a single integer, the maximum sum of any contiguous subarray in the grid. Constraints: 1 ≤ m, n ≤ 100 -10^5 ≤ grid[i][j] ≤ 10^5 SAMPLE INPUT 3 3 1 -2 3 -4 5 -6 7 8 9 SAMPLE OUTPUT 22 Explanation The contiguous subarray with the maximum sum is: 7 8 9 yielding the sum 7 + 8 + 9 = 24.","solution":"def max_sum_subarray(grid): def kadane(arr): max_current = max_global = arr[0] for i in range(1, len(arr)): max_current = max(arr[i], max_current + arr[i]) if max_current > max_global: max_global = max_current return max_global def max_sum_submatrix(matrix): rows = len(matrix) cols = len(matrix[0]) max_sum = float(\'-inf\') for left in range(cols): temp = [0] * rows for right in range(left, cols): for i in range(rows): temp[i] += matrix[i][right] max_sum = max(max_sum, kadane(temp)) return max_sum return max_sum_submatrix(grid)"},{"question":"Jane loves reading books, and she has a shelf with books lined up side by side. She can only read the books if the total number of pages of the books she picks up does not exceed L. Each book has a specific number of pages. Given the number of pages in each book, Jane wants to know the maximum number of books she can read continuously from her shelf without exceeding the limit L. -----Input:----- - First-line will contain T, the number of test cases. Then the test cases follow. - Each test case starts with two integers N and L. - The next line contains N integers representing the number of pages in each book. -----Output:----- For each test case, output in a single line the maximum number of books Jane can read continuously without exceeding the limit L. -----Constraints----- - 1 ≤ T ≤ 10^5 - 1 ≤ N ≤ 10^5 - 1 ≤ pages in each book ≤ 10^5 - 1 ≤ L ≤ 10^5 Note: The sum of N across all test cases will not exceed 10^6. -----Sample Input:----- 2 5 10 1 2 3 4 5 6 15 4 3 2 1 5 6 -----Sample Output:----- 4 5 -----EXPLANATION:----- For 1) The sequence of books with pages [1, 2, 3, 4] adds up to 10 which does not exceed the limit, and it contains 4 books. For 2) The sequence of books with pages [4, 3, 2, 1, 5] adds up to 15 which does not exceed the limit, and it contains 5 books.","solution":"def max_books_read(N, L, pages): start = 0 total_pages = 0 max_books = 0 for end in range(N): total_pages += pages[end] while total_pages > L: total_pages -= pages[start] start += 1 max_books = max(max_books, end - start + 1) return max_books def process_test_cases(test_cases): results = [] for case in test_cases: N = case[0] L = case[1] pages = case[2] results.append(max_books_read(N, L, pages)) return results"},{"question":"A group of students is participating in a programming competition, and one of the tasks requires them to process a large dataset of strings. They need to determine the length of the longest common subsequence (LCS) of two given strings. The LCS does not need to be contiguous, but the characters must appear in the same order in both strings. Write a program to help the students find the length of the LCS of two given strings. Input The first line of input contains an integer T (1 ≤ T ≤ 100) — the number of test cases. Then follow T pairs of lines, each containing two strings s1 and s2 (1 ≤ |s1|, |s2| ≤ 1000), where |s1| and |s2| denote the lengths of the given strings. Output For each test case, print a single integer — the length of the LCS of the given pair of strings. Examples Input 2 abcde ace abc abc Output 3 3","solution":"def lcs_length(s1, s2): Returns the length of the longest common subsequence between s1 and s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def process_input_and_find_lcs(test_cases): Reads input for multiple test cases and returns the results. results = [] for s1, s2 in test_cases: results.append(lcs_length(s1, s2)) return results"},{"question":"A group of scientists is studying the migratory patterns of a flock of birds. The birds migrate from one region to another, passing through several checkpoints along the way. Each checkpoint has a unique identifier from 1 to n, and the birds travel from checkpoint 1 to checkpoint n in a straightforward manner without revisiting any checkpoint. However, scientists have noticed that the travel time between checkpoints is not uniform, and they want to determine the fastest possible time the entire flock can travel from checkpoint 1 to checkpoint n. The travel times between consecutive checkpoints are stored in an array of integers. The scientists need a program to handle the following types of queries efficiently: 1. Find the minimum time it takes for the flock to travel from checkpoint x to checkpoint y, inclusive. 2. Update the travel time between two consecutive checkpoints. Input The first line contains an integer n — the total number of checkpoints (2 ≤ n ≤ 3·10^5). The second line contains n-1 space-separated integers — the travel times between consecutive checkpoints. The third line contains an integer q — the number of queries (1 ≤ q ≤ 10^5). The next q lines contain the queries. Each query is of one of the following types: - \\"1 x y\\" (1 ≤ x < y ≤ n): Find the minimum travel time from checkpoint x to checkpoint y, inclusive. - \\"2 x t\\" (1 ≤ x < n, 0 ≤ t ≤ 10^9): Update the travel time between checkpoint x and checkpoint x+1 to t. Output For each query of type 1, print the minimum travel time from checkpoint x to checkpoint y. Examples Input 5 3 2 4 5 4 1 1 5 2 2 3 1 1 3 1 3 5 Output 14 5 9","solution":"class TravelTime: def __init__(self, n, travel_times): self.n = n self.travel_times = travel_times self.prefix_sum = self._build_prefix_sum(travel_times) def _build_prefix_sum(self, times): prefix_sum = [0] * len(times) prefix_sum[0] = times[0] for i in range(1, len(times)): prefix_sum[i] = prefix_sum[i-1] + times[i] return prefix_sum def find_min_time(self, x, y): if x == 1: return self.prefix_sum[y-2] else: return self.prefix_sum[y-2] - self.prefix_sum[x-2] def update_travel_time(self, x, t): self.travel_times[x-1] = t self.prefix_sum = self._build_prefix_sum(self.travel_times) # Function to process the inputs and handle the queries def process_queries(n, travel_times, queries): travel_time_obj = TravelTime(n, travel_times) results = [] for query in queries: if query[0] == 1: results.append(travel_time_obj.find_min_time(query[1], query[2])) elif query[0] == 2: travel_time_obj.update_travel_time(query[1], query[2]) return results"},{"question":"There is a city with M blocks arranged in a matrix of size PxQ. Each block can either be a building or an open space. You want to place a police station in one of the open spaces such that the maximum distance from any building to the nearest police station is minimized. Calculate the minimum possible maximum distance from any building to the nearest police station. Example 1: Input: P = 3, Q = 3 city = [[1, 0, 1], [0, 0, 0], [1, 0, 1]] Output: 2 Explanation: If you place the police station in the middle of the grid, at (1,1), the farthest building is 2 blocks away. This is the minimum possible maximum distance. Example 2: Input: P = 3, Q = 3 city = [[1, 0, 1], [0, 1, 0], [1, 0, 1]] Output: 1 Explanation: In this case, no matter where you place the police station, the farthest distance is 1 block. Your task: You do not need to read input or print anything. Your task is to complete the function findBestLocation(P, Q, city) which takes integers P, Q and a 2D matrix city of size PxQ as input and returns the minimum possible maximum distance from any building to the nearest police station. Expected Time Complexity: O(P*Q*log(PQ)) Expected Auxiliary Space: O(P*Q) Constraints: 1 ≤ P, Q ≤ 100 city[i][j] is either 0 or 1 There is at least one building in the city.","solution":"from collections import deque def findBestLocation(P, Q, city): def bfs(max_distance): visited = [[False]*Q for _ in range(P)] q = deque() for i in range(P): for j in range(Q): if city[i][j] == 1: q.append((i, j, 0)) visited[i][j] = True while q: x, y, d = q.popleft() if d > max_distance: return False for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < P and 0 <= ny < Q and not visited[nx][ny]: visited[nx][ny] = True q.append((nx, ny, d + 1)) return True low, high = 0, P + Q while low < high: mid = (low + high) // 2 if bfs(mid): high = mid else: low = mid + 1 return low"},{"question":"You are given an array of n integers and a threshold value T. Your task is to find the largest subarray sum that does not exceed the threshold T. A subarray is a contiguous non-empty sequence of elements within an array. For example, for an array {1, 2, 3, 4, 5} and threshold T=9, the subarray {2, 3, 4} has a sum of 9, which is the largest possible sum less than or equal to T. If no such subarray exists, return 0. -----Input----- The first line of the input contains two integers n (1 le n le 2 cdot 10^5) and T (1 le T le 10^9) — the number of elements in the array and the threshold value. The second line contains n integers a_i (1 le a_i le 10^9) — the elements of the array. -----Output----- Print one integer — the largest subarray sum not exceeding the threshold T. If no such subarray exists, print 0. -----Examples----- Input 5 9 1 2 3 4 5 Output 9 Input 4 8 2 1 5 2 Output 8 Input 3 1 5 4 3 Output 0","solution":"def max_subarray_sum_under_threshold(nums, T): n = len(nums) left = 0 current_sum = 0 max_sum = 0 for right in range(n): current_sum += nums[right] while current_sum > T and left <= right: current_sum -= nums[left] left += 1 if current_sum <= T: max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Sam and Dean discover another mysterious structure in Hell. This time, it is a grid containing N rows and M columns. Each cell in the grid has a certain integer value representing the cost of stepping on that cell. To unlock the next clue, they need to find a path from the top-left corner (1,1) to the bottom-right corner (N,M) such that the sum of the costs of all the cells along the path is minimized. They can only move in two directions: right and down. Help Sam and Dean find the minimum path cost and the path itself. Input Format The first line of input contains two integers N and M. Each of the next N lines contains M integers representing the cost of each cell in the grid. Output Format In the first line, output the minimum path cost. In the second line, print the path in the format \\"R D R R ...\\", where each letter represents a move: \'R\' for right and \'D\' for down. Constraints 1 ≤ N, M ≤ 1000 0 ≤ cost of a cell ≤ 1000 Problem setter: Shiv Dhingra Problem tester: Swapnil Saxena SAMPLE INPUT 3 3 1 3 1 1 5 1 4 2 1 SAMPLE OUTPUT 7 R R D D Explanation The grid has dimensions 3x3 with the following costs: 1 3 1 1 5 1 4 2 1 The minimal path is from (1,1) to (1,2) to (1,3) to (2,3) to (3,3) with a total cost of 7. The path movement is right, right, down, down.","solution":"def find_min_path(grid): N = len(grid) M = len(grid[0]) # Create a dp array to store the minimum cost to reach each cell dp = [[0] * M for _ in range(N)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, M): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, N): for j in range(1, M): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The minimum cost to reach bottom-right corner min_cost = dp[N-1][M-1] # Trace the path path = [] i, j = N-1, M-1 while i > 0 or j > 0: if i == 0: path.append(\'R\') j -= 1 elif j == 0: path.append(\'D\') i -= 1 elif dp[i-1][j] < dp[i][j-1]: path.append(\'D\') i -= 1 else: path.append(\'R\') j -= 1 path.reverse() return min_cost, \' \'.join(path) # Input reading and function call for given problem def process_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) grid = [] index = 2 for i in range(N): row = list(map(int, data[index:index + M])) grid.append(row) index += M min_cost, path = find_min_path(grid) print(min_cost) print(path)"},{"question":"Write a program to check if a string is a valid Roman numeral and convert it to an integer. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. | Symbol | Value | |--------|-------| | I | 1 | | V | 5 | | X | 10 | | L | 50 | | C | 100 | | D | 500 | | M | 1000 | For example, 2 is written as II in Roman numeral, just two one\'s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: - I can be placed before V (5) and X (10) to make 4 and 9. - X can be placed before L (50) and C (100) to make 40 and 90. - C can be placed before D (500) and M (1000) to make 400 and 900. Example 1: Input: \\"III\\" Output: 3 Example 2: Input: \\"IV\\" Output: 4 Example 3: Input: \\"MCMXCIV\\" Output: 1994 Note: - The input string is guaranteed to be a valid Roman numeral in the range from 1 to 3999.","solution":"def roman_to_int(s): Converts a given Roman numeral to an integer. roman_values = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): current_value = roman_values[char] if current_value < prev_value: total -= current_value else: total += current_value prev_value = current_value return total"},{"question":"Classify the mood based on a person\'s emoji usage. Given an input message consisting of a series of space-separated emojis representing a user\'s recent message, classify the mood based on the presence of specific emojis: 1. If the message contains \\"😊\\", \\"😁\\", \\"😋\\", or \\"🤣\\", classify the mood as \\"Happy\\". 2. If the message contains \\"😔\\", \\"😭\\", \\"😢\\", or \\"☹️\\", classify the mood as \\"Sad\\". 3. If the message contains any other emojis or is empty, classify the mood as \\"Neutral\\". Write a program that takes in a message and outputs the appropriate mood classification. ------ Input Format ------ - The input consists of a single line containing a space-separated series of emojis. There will be no punctuation or words, only emojis. ------ Output Format ------ - Print one of the following strings as per the problem statement. - Happy - Sad - Neutral ------ Constraints ------ There is no limit to the length or number of emojis in the input message. ----- Sample Input 1 ------ 😊 😂 🙃 😔 ----- Sample Output 1 ------ Happy ----- Explanation 1 ------ The message contains \\"😊\\" which is a happy emoji, so the program must classify the mood as \\"Happy\\". ----- Sample Input 2 ------ 😔 💔 ☹️ ----- Sample Output 2 ------ Sad ----- Explanation 2 ------ The message contains \\"😔\\" and \\"☹️\\" which are sad emojis, so the program must classify the mood as \\"Sad\\". ----- Sample Input 3 ------ 🌟 🎉 🐱 ----- Sample Output 3 ------ Neutral ----- Explanation 3 ------ The message does not contain any of the specified happy or sad emojis, so the program must classify the mood as \\"Neutral\\".","solution":"def classify_mood(message): Classifies the mood of a given message based on the presence of specified emojis. Args: message (str): A string containing space-separated emojis. Returns: str: A mood classification (\\"Happy\\", \\"Sad\\", or \\"Neutral\\"). happy_emojis = {\\"😊\\", \\"😁\\", \\"😋\\", \\"🤣\\"} sad_emojis = {\\"😔\\", \\"😭\\", \\"😢\\", \\"☹️\\"} emojis = message.split() for emoji in emojis: if emoji in happy_emojis: return \\"Happy\\" elif emoji in sad_emojis: return \\"Sad\\" return \\"Neutral\\""},{"question":"Given a list of meeting times as pairs of integers representing the meeting start and end times, write a function to determine the minimum number of conference rooms required to hold all the meetings. Input: The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, the number of meetings. The next N lines each contain a pair of integers, denoting the start and end time of each meeting. Output: For each test case, output a single integer, the minimum number of conference rooms required. Constraints: 1 <= T <= 100 1 <= N <= 100 0 <= start < end <= 10^4 Example: Input: 2 3 0 30 5 10 15 20 2 7 10 2 4 Output: 2 1","solution":"import heapq def minMeetingRooms(meetings): Determines the minimum number of conference rooms required to hold all the meetings. :param meetings: List of tuples (start, end) for meetings. :return: Integer, minimum number of conference rooms required. if not meetings: return 0 # Sort the meetings by start time meetings.sort(key=lambda x: x[0]) # Initialize a priority queue to keep track of end times of meetings min_heap = [] # Add the end time of the first meeting heapq.heappush(min_heap, meetings[0][1]) for i in range(1, len(meetings)): # If the room with the earliest end time is free, remove it from the heap if meetings[i][0] >= min_heap[0]: heapq.heappop(min_heap) # Add the current meeting\'s end time to the heap heapq.heappush(min_heap, meetings[i][1]) # The size of the heap is the number of rooms required return len(min_heap) def process_input(input_data): Processes the input data for the problem and calls minMeetingRooms for each test case. :param input_data: String, the input data as described in problem. :return: List of integers, the results for each test case. lines = input_data.strip().split(\'n\') T = int(lines[0]) results = [] index = 1 for _ in range(T): N = int(lines[index]) index += 1 meetings = [] for _ in range(N): start, end = map(int, lines[index].split()) meetings.append((start, end)) index += 1 results.append(minMeetingRooms(meetings)) return results"},{"question":"You are given an array of integers representing the scores of students in a class. A round of class competition awards a reward to students based on their scores following this distribution rule: Each student gets a reward of 1 point initially. For each student i (0 <= i < n): 1. If student i has a higher score than student i-1, then student i should receive more rewards than student i-1. 2. If student i has a higher score than student i+1, then student i should receive more rewards than student i+1. Given an array of scores, your task is to compute the minimum rewards that should be distributed to satisfy the above conditions. Implement the function: ```python def minRewards(scores: List[int]) -> int: pass ``` # Input Format: A single line containing a list of space-separated integers representing the scores of students. # Constraints: - The number of elements in the list is in the range [1, 10^5]. - The scores are integers in the range [0, 10^9]. # Output Format: Print the minimum number of reward points distributed to the students. # Sample Input: ``` 1 2 3 2 1 ``` # Sample Output: ``` 9 ``` # Explanation: One way to distribute rewards is as follows: - The first student has a score of 1 and gets 1 reward. - The second student has a score of 2 and gets 2 rewards. - The third student has a score of 3 and gets 3 rewards. - The fourth student has a score of 2 and gets 2 rewards. - The fifth student has a score of 1 and gets 1 reward. Hence, the total rewards distributed are 1+2+3+2+1 = 9.","solution":"from typing import List def minRewards(scores: List[int]) -> int: n = len(scores) rewards = [1] * n # Traverse from left to right for i in range(1, n): if scores[i] > scores[i - 1]: rewards[i] = rewards[i - 1] + 1 # Traverse from right to left for i in range(n - 2, -1, -1): if scores[i] > scores[i + 1]: rewards[i] = max(rewards[i], rewards[i + 1] + 1) return sum(rewards)"},{"question":"Super Cyclic Sum Given an integer array arr of length n, the Super Cyclic Sum is defined as the sum of all unique elements when the array is concatenated with itself multiple times. Specifically, for k = 1 to n, the array is concatenated k times to form a new array, and the sum of unique elements of this new array is calculated. The Super Cyclic Sum is the sum of all these unique sums over each k from 1 to n. Write a function super_cyclic_sum(arr) that calculates the Super Cyclic Sum for a given array. Input: - The first line contains an integer n, the length of the array. - The second line contains n space-separated integers representing the elements of the array. Output: - Print the Super Cyclic Sum of the array. Constraints: 1 ≤ n ≤ 1000 1 ≤ arr[i] ≤ 10^5 SAMPLE INPUT 3 1 2 2 SAMPLE OUTPUT 9","solution":"def super_cyclic_sum(arr): Return the Super Cyclic Sum for the given array arr. n = len(arr) super_sum = 0 for k in range(1, n + 1): new_array = arr * k unique_elements = set(new_array) super_sum += sum(unique_elements) return super_sum"},{"question":"Alice and Bob are exploring a mysterious forest, and along the way, they decide to play a game to make their journey more exciting. The forest path can be thought of as a grid of size M x N. Alice and Bob take turns, and in each turn, a player can move to a cell adjacent (horizontally or vertically) to their current position, provided that the cell has not been visited yet. Alice starts the game at cell (0, 0), and they both want to collect as many crystals as possible during their exploration. Each cell in the grid either contains a crystal or is empty. The player who collects the most crystals wins the game. If they collect an equal number of crystals, the game is a draw. Each player\'s movement stops when they cannot move to any new cell. Given the grid\'s layout, determine who wins the game, or if it\'s a draw, assuming both play optimally. Example 1: Input: M = 3, N = 3 grid = [ [\'C\', \'.\', \'C\'], [\'.\', \'C\', \'.\'], [\'C\', \'.\', \'C\'] ] Output: ALICE Explanation: Alice starts at (0, 0) and can collect the crystal there. By playing optimally, she can collect more crystals than Bob. Example 2: Input: M = 2, N = 2 grid = [ [\'.\', \'C\'], [\'C\', \'.\'] ] Output: DRAW Explanation: Both players will collect one crystal each. Your Task: You do not need to read input or print anything. Your task is to complete the function findWinner() which takes the M, N, and grid as the input parameters and returns a string (\\"ALICE\\", \\"BOB\\", or \\"DRAW\\") denoting the winner of the game. Expected Time Complexity: O(M * N) Expected Auxiliary Space: O(M * N) Constraints: 1 ≤ M, N ≤ 1000 Each cell in the grid is either \'C\' (containing a crystal) or \'.\' (empty).","solution":"def findWinner(M, N, grid): # Possible move directions for a player (up, down, left, right) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] def valid_move(x, y, visited): return 0 <= x < M and 0 <= y < N and not visited[x][y] and grid[x][y] != \'#\' def bfs(start): queue = [start] visited = [[False] * N for _ in range(M)] visited[start[0]][start[1]] = True crystals = 1 if grid[start[0]][start[1]] == \'C\' else 0 while queue: x, y = queue.pop(0) for d in directions: nx, ny = x + d[0], y + d[1] if valid_move(nx, ny, visited): visited[nx][ny] = True queue.append((nx, ny)) if grid[nx][ny] == \'C\': crystals += 1 return crystals alice_crystals = bfs((0, 0)) bob_crystals = 0 for x in range(M): for y in range(N): if (x, y) != (0, 0) and grid[x][y] == \'C\': bob_crystals += 1 if alice_crystals > bob_crystals: return \\"ALICE\\" elif bob_crystals > alice_crystals: return \\"BOB\\" else: return \\"DRAW\\""},{"question":"Write a function that takes a string as an input and determines whether the string is structured like a valid IPv4 address. A valid IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots (e.g., \\"192.168.1.1\\"). The function should return `true` if the input string is a valid IPv4 address, and `false` otherwise. Requirements - The function should handle leading zeros in each segment. - Each segment must be between 0 and 255 (inclusive). - Segments containing non-numeric characters should be considered invalid. Examples - `isValidIP(\\"192.168.1.1\\")` should return `true` - `isValidIP(\\"255.255.255.255\\")` should return `true` - `isValidIP(\\"256.100.100.2\\")` should return `false` - `isValidIP(\\"192.168.1\\")` should return `false` - `isValidIP(\\"192.168.1.01\\")` should return `false` - `isValidIP(\\"192.168@1.1\\")` should return `false`","solution":"def isValidIP(ip): Determines if the given string is a valid IPv4 address. A valid IPv4 address consists of four decimal numbers, each ranging from 0 to 255, separated by dots. parts = ip.split(\\".\\") # Valid IPv4 addresses should have exactly 4 parts if len(parts) != 4: return False for part in parts: # Parts should be numeric and in the allowable range, no leading zeros if not part.isdigit() or not 0 <= int(part) <= 255 or (len(part) > 1 and part[0] == \'0\'): return False return True"},{"question":"In a distant land, there is a kingdom where people communicate through a unique language consisting of strings. The king of the land loves palindromes and wishes to know the longest palindromic substring within any given string. A palindrome is a string that reads the same forward and backward. The king has tasked you with helping him find this. Given a string s, determine the longest substring of s that is a palindrome. Input The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. The following t lines each contain a single string s consisting only of lowercase English letters (1 ≤ length of s ≤ 1000). Output For each test case, output a single line containing the longest palindromic substring of the given string. If there are multiple answers, output the one which appears first. Examples Input 3 babad cbbd a Output bab bb a","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring of the given string s. n = len(s) if n == 0: return \\"\\" longest_start = 0 longest_length = 1 def expand_around_center(left, right): while left >= 0 and right < n and s[left] == s[right]: left -= 1 right += 1 return (left + 1, right - 1) for i in range(n): start1, end1 = expand_around_center(i, i) # Odd length palindrome start2, end2 = expand_around_center(i, i + 1) # Even length palindrome len1 = end1 - start1 + 1 len2 = end2 - start2 + 1 if len1 > longest_length: longest_start, longest_length = start1, len1 if len2 > longest_length: longest_start, longest_length = start2, len2 return s[longest_start:longest_start + longest_length] def find_longest_palindromes(t, strings): Takes number of cases and list of strings, returns list of longest palindromic substrings for each string. results = [] for s in strings: results.append(longest_palindromic_substring(s)) return results"},{"question":"Deepa has a rectangular garden and she wants to create several square flower beds. However, she wants all flower beds to be of the same size and as large as possible, ensuring that they completely cover the area of the garden without any leftover space. Note: Deepa loves symmetry, so ensure that the garden dimensions are fully utilized by the square flower beds without any remaining uncovered area. Input The first input line contains an integer T, the number of test cases. Each test case consists of a single line which contains 2 space-separated integers L and W representing the length and width of the garden. Output For each test case, output a single integer - the side length of the largest possible square flower bed that completely covers the garden\'s area. Constraints 1 <= T <= 1000 1 <= L, W <= 10^9 SAMPLE INPUT 2 12 8 5 5 SAMPLE OUTPUT 4 5 Explanation In the 1st test case L = 12, W = 8. The largest possible square flower bed that can fit into the garden has a side length of 4. In the 2nd test case L = 5, W = 5. The garden itself is a square with a side length of 5, so the largest possible square flower bed has a side length of 5.","solution":"import math def largest_square_side_length(L, W): Returns the side length of the largest possible square flower bed that can fit into a rectangular garden of size L x W. return math.gcd(L, W) def process_tests(test_cases): results = [] for L, W in test_cases: results.append(largest_square_side_length(L, W)) return results"},{"question":"You are interning at a telecommunication company and have been assigned to create an algorithm to optimize network packets transmission. Each network packet has a certain size that can be represented as an integer. Your task is to split the packets into smaller segments such that the sum of the segments in each packet is minimized under the condition that no segment size exceeds a given limit. -----Input:----- - The first line of the input contains a single integer T denoting the number of test cases. - The first line of each test case contains two integers N (the number of packets) and L (the maximum segment size). - The next line contains N space-separated integers representing the size of each packet. -----Output:----- For each test case, output a single integer representing the minimum number of segments required to split all packets. -----Constraints----- - 1 ≤ T ≤ 1000 - 1 ≤ N ≤ 1000 - 1 ≤ L ≤ 10^6 - 1 ≤ size of each packet ≤ 10^9 -----Sample Input:----- 2 3 5 8 12 15 2 10 25 30 -----Sample Output:----- 9 6 -----EXPLANATION:----- In the first test case: - Packet of size 8 can be split into segments of sizes: (5, 3) which is 2 segments. - Packet of size 12 can be split into segments of sizes: (5, 5, 2) which is 3 segments. - Packet of size 15 can be split into segments of sizes: (5, 5, 5) which is 3 segments. - Hence, the total number of segments required = 2 + 3 + 3 = 8 segments. In the second test case: - Packet of size 25 can be split into segments of sizes: (10, 10, 5) which is 3 segments. - Packet of size 30 can be split into segments of sizes: (10, 10, 10) which is 3 segments. - Hence, the total number of segments required = 3 + 3 = 6 segments.","solution":"def minimum_segments(T, test_cases): results = [] for i in range(T): N, L = test_cases[i][0] packets = test_cases[i][1] segments = 0 for packet in packets: if packet % L == 0: segments += packet // L else: segments += packet // L + 1 results.append(segments) return results"},{"question":"You are given a list of routes between cities represented by a directed graph. Each route includes the departure city, the destination city, and the travel time in minutes. Your task is to write a program that finds and prints the shortest travel time between any two cities provided by the user. If there is no route between the cities, the program should return \\"NO ROUTE\\". The program should read a list of data where each item consists of the departure city name, destination city name, and the travel time. Then, the program will read queries where each query consists of two city names for which the shortest travel time is to be found. Input The input consists of: - The number of routes r followed by r lines of data in the format: departure_city destination_city travel_time - The number of queries q followed by q lines of data in the format: city1 city2 - A single line containing \\"0\\" to indicate the end of input Output For each query, print the shortest travel time or \\"NO ROUTE\\". Constraints: - r < 4000, q < 1000 - Each city name is a string of up to 100 characters - Travel time is a positive integer less than or equal to 1440 Example Input 4 A B 120 B C 150 A C 300 C D 80 3 A C A D B A 0 Output 270 350 NO ROUTE","solution":"import heapq from collections import defaultdict import sys def shortest_travel_time(routes, queries): graph = defaultdict(list) # Build graph from routes for dep, dest, time in routes: graph[dep].append((dest, time)) def dijkstra(start, end): min_heap = [(0, start)] visited = {start: 0} while min_heap: current_time, current_node = heapq.heappop(min_heap) if current_node == end: return current_time if current_time > visited.get(current_node, float(\'inf\')): continue for neighbor, travel_time in graph[current_node]: time = current_time + travel_time if time < visited.get(neighbor, float(\'inf\')): visited[neighbor] = time heapq.heappush(min_heap, (time, neighbor)) return \\"NO ROUTE\\" results = [] for start, end in queries: if start == end: results.append(0) else: result = dijkstra(start, end) if result == float(\'inf\'): result = \\"NO ROUTE\\" results.append(result) return results def process_input(input_list): routes = [] queries = [] idx = 0 r = int(input_list[idx]) idx += 1 for _ in range(r): dep, dest, time = input_list[idx].split() routes.append((dep, dest, int(time))) idx += 1 q = int(input_list[idx]) idx += 1 for _ in range(q): start, end = input_list[idx].split() queries.append((start, end)) idx += 1 return routes, queries def main(input_list): routes, queries = process_input(input_list) return shortest_travel_time(routes, queries) # Example function call example_input = [ \\"4\\", \\"A B 120\\", \\"B C 150\\", \\"A C 300\\", \\"C D 80\\", \\"3\\", \\"A C\\", \\"A D\\", \\"B A\\", \\"0\\" ] result = main(example_input) print(result) # Should print: [270, 350, \'NO ROUTE\']"},{"question":"# Task Euler\'s Totient Function, φ(n), is an important function in number theory. It counts the number of positive integers up to n that are relatively prime to n. Two numbers are relatively prime if their greatest common divisor (gcd) is 1. Your task is to compute φ(n) for a given n. # Input/Output - `[input]` integer `n` `1 <= n <= 1e6` - `[output]` an integer representing φ(n)","solution":"def gcd(a, b): Compute the Greatest Common Divisor of a and b. while b: a, b = b, a % b return a def euler_totient(n): Compute Euler\'s Totient Function φ(n). if n == 1: return 1 count = 0 for i in range(1, n + 1): if gcd(n, i) == 1: count += 1 return count"},{"question":"Featherstone wants to create a safe path through a treacherous field filled with mines. The field is represented as a two-dimensional grid of cells. Some cells contain a mine (`\'*\'`), while others are safe (`\'.\'`). Featherstone can move from one cell to another in four possible directions: up, down, left, and right. Your objective is to help Featherstone find the shortest path from the starting cell `(S, T)` to the destination cell `(D, F)` while avoiding the mines. -----Input----- The input starts with a single test case. The first line contains two integers `R` and `C` (1 le R, C le 100), representing the number of rows and columns of the grid, respectively. The next `R` lines contain `C` characters each, representing the grid. Each character is either `\'*\'` (indicating a mine) or `\'.\'` (indicating a safe cell). The following line contains four integers `S, T, D, F` (0 le S, D < R, 0 le T, F < C), representing the coordinates of the starting and destination cells, respectively. Featherstone starts at cell `(S, T)` and wants to reach cell `(D, F)`. -----Output----- Output an integer representing the minimum number of moves required to reach the destination cell from the starting cell. If it\'s impossible for Featherstone to reach the destination, output `-1`. -----Examples----- Sample Input: 5 5 ..... .*... .*.*. .*... ..... 0 0 4 4 Sample Output: 8 Sample Input: 3 3 *** *.* *** 0 0 2 2 Sample Output: -1","solution":"from collections import deque def shortest_path_mines(grid, start, destination): rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # up, down, left, right queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set([(start[0], start[1])]) while queue: r, c, dist = queue.popleft() if (r, c) == destination: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < rows and 0 <= nc < cols and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1 # Example test if __name__ == \\"__main__\\": grid = [ \\".....\\", \\".*...\\", \\".*.*.\\", \\".*...\\", \\".....\\", ] start = (0, 0) destination = (4, 4) print(shortest_path_mines(grid, start, destination)) # Output: 8"},{"question":"You are given a sequence of n integers. You are allowed to modify the sequence through the following operation: Choose any two consecutive elements a_i and a_{i+1} such that a_i < a_{i+1} and swap their positions. Your goal is to perform the operations such that the final sequence is non-decreasing to the maximum extent possible. -----Input----- The first line contains a single integer n (2 le n le 3 cdot 10^5) — the number of integers in the sequence. The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the sequence. -----Output----- Print a single integer — the minimum number of operations needed to transform the sequence into a non-decreasing sequence to the maximum extent possible. If the sequence is already fully non-decreasing, print 0. -----Examples----- Input 5 3 1 4 1 5 Output 2 Input 4 1 3 2 4 Output 1 -----Note----- In the first test case, the sequence can be transformed into `[1, 3, 1, 4, 5]` and then `[1, 3, 4, 1, 5]`, which is the maximum non-decreasing sequence possible with 2 swaps. In the second test case, the sequence can be transformed into `[1, 2, 3, 4]` with one swap between `3` and `2`.","solution":"def min_operations_to_max_non_decreasing(n, sequence): Returns the minimum number of operations needed to transform the sequence into a non-decreasing sequence to the maximum extent possible by performing swaps between consecutive elements. ops = 0 stack = [] for num in sequence: # Maintain a stack such that the stack is non-decreasing at all points while stack and stack[-1] > num: stack.pop() ops += 1 stack.append(num) return ops"},{"question":"A logistics company is planning to optimize its delivery routes using a new software system. They have several delivery locations represented as nodes and the routes between them as edges in a graph. Each route between two locations has a specific travel time. The company needs to find the shortest time required to travel from a designated starting location to a designated ending location. Given a list of delivery locations (numbered from 1 to N) and routes between them, your task is to determine the minimum travel time from the starting location S to the ending location E. If there is no possible route between the two locations, output -1. INPUT The first line contains an integer T, the number of test cases. Each test case is: First line with four integers N, M, S, and E: the number of locations, the number of routes, the starting location, and the ending location respectively. The next M lines each contain three integers u, v, and w, indicating that there is a route between location u and location v with a travel time of w. OUTPUT T lines each containing the minimum travel time from the starting location to the ending location for each test case. If there is no path, print -1. CONSTRAINTS 1 ≤ T ≤ 10 2 ≤ N ≤ 1000 1 ≤ M ≤ 10000 1 ≤ S, E, u, v ≤ N 1 ≤ w ≤ 10000 There are no self-loops or multiple edges in the graph. SAMPLE INPUT 2 5 6 1 5 1 2 10 1 3 5 2 3 2 3 4 2 4 5 3 3 5 20 3 3 1 3 1 2 5 2 3 10 1 3 15 SAMPLE OUTPUT 10 15","solution":"import heapq def dijkstra(graph, start, end, n): Find the shortest path using Dijkstra\'s algorithm. distances = {i: float(\'infinity\') for i in range(1, n+1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'infinity\') else -1 def find_min_travel_times(test_cases): results = [] for n, m, start, end, edges in test_cases: graph = {i: [] for i in range(1, n+1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) result = dijkstra(graph, start, end, n) results.append(result) return results # Parsing input def parse_input(input_string): input_lines = input_string.strip().split(\'n\') T = int(input_lines[0]) current_line = 1 test_cases = [] for _ in range(T): n, m, start, end = map(int, input_lines[current_line].split()) current_line += 1 edges = [tuple(map(int, input_lines[current_line + i].split())) for i in range(m)] current_line += m test_cases.append((n, m, start, end, edges)) return test_cases def minimum_travel_times(input_string): test_cases = parse_input(input_string) results = find_min_travel_times(test_cases) return results"},{"question":"Implement a function `findLongestSubsequence(nums)` that takes a list of integers `nums` and returns the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Input: - `nums` (List of Integers): The original list of integers. # Output: - An integer representing the length of the longest increasing subsequence. # Note: - The subsequence need not be continuous. - The function does not need to handle validation for input constraints and can assume that all inputs are valid. # Examples Example 1: ```python findLongestSubsequence([10, 9, 2, 5, 3, 7, 101, 18]) # Output: 4 # Explanation: The longest increasing subsequence is [2, 3, 7, 101], so the function returns 4. ``` Example 2: ```python findLongestSubsequence([0, 1, 0, 3, 2, 3]) # Output: 4 # Explanation: The longest increasing subsequence is [0, 1, 2, 3], so the function returns 4. ``` Example 3: ```python findLongestSubsequence([7, 7, 7, 7, 7, 7, 7]) # Output: 1 # Explanation: The longest increasing subsequence is [7], so the function returns 1. ``` Happy coding!","solution":"def findLongestSubsequence(nums): Returns the length of the longest increasing subsequence in the list nums. if not nums: return 0 # dp array to store the length of longest increasing subsequence ending at each index dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Phoebe is trying to organize a music concert and wants to ensure that the playlist is entertaining throughout without any consecutive songs being of the same genre. She has a list of songs, each represented by its genre. She needs to rearrange the playlist such that no two adjacent songs have the same genre. If it is not possible to rearrange the playlist in such a way, indicate it. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - First line of each test case contains an integer N, the number of songs. - Second line of each test case contains a string G of length N, representing the genres of the songs, where G[i] is the genre of the i-th song. ------ Output Format ------ For each test case print \\"Possible\\" if the playlist can be rearranged such that no two adjacent songs have the same genre, else print \\"Not Possible\\". You may print each character of each string in uppercase or lowercase (for example, the strings \\"pOSSIBLE\\", \\"possible\\", \\"Possible\\" and \\"POSSIBLE\\" will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 10^4 1 ≤ N ≤ 10^5 G contains lowercase English letters only. - Sum of N over all test cases does not exceed 2 cdot 10^5. ------ Sample Input 1 ------ 3 5 aabbc 4 aaaa 3 abc ------ Sample Output 1 ------ Possible Not Possible Possible ------ Explanation 1 ------ Test case 1: One possible rearrangement is \\"abcab\\". No two adjacent songs have the same genre. Test case 2: It is not possible to rearrange \\"aaaa\\" to meet the criteria. Test case 3: The string \\"abc\\" is already organized without any consecutive songs being of the same genre.","solution":"from collections import Counter def is_rearrangement_possible(T, test_cases): results = [] for i in range(T): N, G = test_cases[i] genre_count = Counter(G) most_common_genre = genre_count.most_common(1)[0][1] # get the count of the most common genre # Check if the most frequent genre can fit without repetition if most_common_genre <= (N + 1) // 2: results.append(\\"Possible\\") else: results.append(\\"Not Possible\\") return results"},{"question":"Given a list of integers representing the number of steps a hiker takes in each day of a hiking trip, write a function that returns the number of days in which the hiker climbed more steps than he did on the previous day. For example, if the input list is [2, 3, 1, 5, 4], the function should return 2, since the hiker climbed more steps on the second and fourth days compared to the days just before them. Function signature: `def count_days_higher_steps(steps: List[int]) -> int:` # Input - A list of integers `steps` (1 <= len(steps) <= 1000, 0 <= steps[i] <= 10000) representing the steps taken per day. # Output - An integer representing the number of days the hiker climbed more steps than on the previous day. # Example Input ``` [2, 3, 1, 5, 4] ``` Output ``` 2 ``` Explanation: The hiker steps were 3 on the 2nd day and 5 on the 4th day, both higher than the previous days. Thus, the result is 2.","solution":"from typing import List def count_days_higher_steps(steps: List[int]) -> int: Returns the number of days in which the hiker climbed more steps than he did on the previous day. count = 0 for i in range(1, len(steps)): if steps[i] > steps[i-1]: count += 1 return count"},{"question":"Sherlock is working on a new investigation and requires your help with solving a critical problem. He has a string of characters `S` consisting of lowercase alphabets. Sherlock needs to determine the number of pairs of substrings `(a, b)` in `S` such that the substrings are of equal length, start and end at different indices, and are anagrams of each other. -----Input:----- - The first line will contain an integer `T`, the number of test cases. - Each of the next `T` lines will contain a string `S`. -----Output:----- For each test case, output a single integer representing the number of pairs of substrings `(a, b)` that satisfy the given conditions. -----Constraints:----- - 1 leq T leq 100 - 1 leq |S| leq 10^3 -----Sample Input:----- 2 abba abcd -----Sample Output:----- 4 0 -----Explanation:----- Sample Case - 1: The string `abba` has the following pairs of substrings that are anagrams of each other: - (a, b) at indices (0, 2) and (1, 3) - (ab, ba) at indices (0, 1) and (2, 3) - (b, b) at indices (1, 2) Thus, there are 4 valid pairs. Sample Case - 2: The string `abcd` does not have any pairs of substrings that are anagrams of each other. Thus, the answer is 0.","solution":"def count_anagrammatic_pairs(s): from collections import defaultdict n = len(s) substrings = defaultdict(int) # Iterate over all possible substrings for i in range(n): for j in range(i, n): substr = \'\'.join(sorted(s[i:j+1])) substrings[substr] += 1 # Compute pairs count = 0 for key in substrings: count += (substrings[key] * (substrings[key] - 1)) // 2 return count def sherlock_anagrammatic_pairs(test_cases): results = [] for s in test_cases: results.append(count_anagrammatic_pairs(s)) return results"},{"question":"Mr. Kitayuta has just received a series of commands to manipulate a 2D grid of size n x m. The grid initially contains integers, where each element is initialized to zero. There are two types of commands: 1. \\"RowAdd r x\\" - Add the integer x to every element in row r (1 ≤ r ≤ n). 2. \\"ColAdd c x\\" - Add the integer x to every element in column c (1 ≤ c ≤ m). After executing a series of k commands, Mr. Kitayuta wants you to process the following q queries. In the i-th query, he gives you two integers, u_{i} and v_{i}, which represent cell coordinates. You need to find the value of the element located at cell (u_{i}, v_{i}). -----Input----- The first line of the input contains space-separated three integers — n, m, and k (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 100), denoting the number of rows, the number of columns, and the number of commands respectively. The next k lines each contain a command. Each command is one of the following formats: 1. \\"RowAdd r x\\" (1 ≤ r ≤ n, -100 ≤ x ≤ 100) 2. \\"ColAdd c x\\" (1 ≤ c ≤ m, -100 ≤ x ≤ 100) The next line contains an integer q (1 ≤ q ≤ 100), denoting the number of queries. Then follows q lines, each containing space-separated two integers — u_{i} and v_{i} (1 ≤ u_{i} ≤ n, 1 ≤ v_{i} ≤ m), representing the cell coordinates to be queried. -----Output----- For each query, print the value of the element at cell (u_{i}, v_{i}) in a separate line. -----Examples----- Input 3 3 3 RowAdd 1 5 ColAdd 3 4 RowAdd 2 3 2 1 1 2 3 Output 5 7 Input 4 4 4 RowAdd 1 5 ColAdd 4 2 RowAdd 3 1 ColAdd 1 -1 3 1 4 3 1 4 4 Output 7 0 2 -----Note----- Let\'s consider the first sample. - Initially, the grid is: [0 0 0] [0 0 0] [0 0 0] - After the command \\"RowAdd 1 5\\": [5 5 5] [0 0 0] [0 0 0] - After the command \\"ColAdd 3 4\\": [5 5 9] [0 0 4] [0 0 4] - After the command \\"RowAdd 2 3\\": [5 5 9] [3 3 7] [0 0 4] Query 1: The value at cell (1, 1) is 5. Query 2: The value at cell (2, 3) is 7.","solution":"def manipulate_grid(n, m, k, commands, q, queries): # Initialize the grid with zeros grid = [[0] * m for _ in range(n)] # Process the commands for command in commands: cmd_parts = command.split() if cmd_parts[0] == \\"RowAdd\\": r, x = int(cmd_parts[1]) - 1, int(cmd_parts[2]) for j in range(m): grid[r][j] += x elif cmd_parts[0] == \\"ColAdd\\": c, x = int(cmd_parts[1]) - 1, int(cmd_parts[2]) for i in range(n): grid[i][c] += x # Process the queries and collect results results = [] for query in queries: u, v = query results.append(grid[u - 1][v - 1]) return results"},{"question":"John is tasked with evaluating the similarity between two sequences of integers using the longest common subsequence (LCS) method. The two sequences are provided as lists of integers, and John needs your help to determine the length of their LCS. -----Input----- The first line contains an integer N (1 le N le 1000), the length of the first sequence. The second line contains N space-separated integers, representing the first sequence. The third line contains an integer M (1 le M le 1000), the length of the second sequence. The fourth line contains M space-separated integers, representing the second sequence. -----Output----- The output should contain a single integer, which is the length of the longest common subsequence of the two sequences. -----Examples----- Sample Input 1: 4 1 2 3 4 5 2 4 3 1 2 Sample Output 1: 2 Sample Input 2: 3 1 2 3 3 4 5 6 Sample Output 2: 0","solution":"def longest_common_subsequence(arr1, arr2): Function to find the length of the longest common subsequence between two sequences of integers. :param arr1: List[int] - first sequence of integers :param arr2: List[int] - second sequence of integers :return: int - length of the longest common subsequence n = len(arr1) m = len(arr2) # Create a 2D array to store the lengths of the longest common subsequence up to each index dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill the dp array for i in range(1, n + 1): for j in range(1, m + 1): if arr1[i - 1] == arr2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] # Example usage if __name__ == \\"__main__\\": N = int(input().strip()) arr1 = list(map(int, input().strip().split())) M = int(input().strip()) arr2 = list(map(int, input().strip().split())) print(longest_common_subsequence(arr1, arr2))"},{"question":"You are given N integers. Determine the maximum sum of a contiguous subsequence that you can extract from this list. -----Constraints----- - 1 ≤ N ≤ 1000 - -10^4 ≤ Each integer ≤ 10^4 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Print the maximum sum of a contiguous subsequence. -----Sample Input----- 5 -2 1 -3 4 -1 2 1 -5 4 -----Sample Output----- 6 The maximum sum is obtained by summing the subsequence [4, -1, 2, 1], which gives a total of 6.","solution":"def maximum_subarray_sum(nums): Determines the maximum sum of a contiguous subsequence from the list of integers. if not nums: return 0 current_sum = max_sum = nums[0] for num in nums[1:]: current_sum = max(num, current_sum + num) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"The decimal representation of `pi` is a non-repeating, non-terminating decimal that starts with `3.14159`. Given an integer `n`, find the `n-th` digit in the decimal part of `pi`. Example 1: Input: n = 1 Output: 1 Explanation: The 1st digit after the decimal place in `pi` is 1. Example 2: Input: n = 4 Output: 5 Explanation: The 4th digit after the decimal place in `pi` is 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findNthDigitOfPi()` which takes an integer n as input parameter and returns the `n-th` digit in the decimal part of `pi`. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= n <= 20 Hint: You can use the built-in constant for pi or a pre-computed string of pi up to 20 decimal places to solve this problem.","solution":"def findNthDigitOfPi(n): Returns the n-th digit in the decimal part of pi. # Pi up to 20 decimal places pi_str = \\"14159265358979323846\\" if 1 <= n <= 20: # Adjust n for 0-based indexing return int(pi_str[n - 1]) else: raise ValueError(\\"The value of n should be between 1 and 20\\")"},{"question":"# Problem Statement: Alice is playing a card game with decks of different sizes, but she has a unique way of shuffling the cards. She will repeatedly shuffle the deck such that each time, she removes the first card from the deck and inserts it in a random position within the remaining cards. She stops shuffling when the original order of cards is restored. Alice wants to know how many shuffles are required to restore the original order of cards. Given the number of cards `n` in each deck, find the number of unique configurations that can be obtained before the order is restored, that is, the number of distinct sequences of cards excluding the initial ordered one. **Input** A single line contains an integer `n` (1 ≤ n ≤ 10^9) — the number of cards in the deck. **Output** Output a single integer — the number of unique sequences of cards that can be obtained before the initial order is restored. **Examples:** **Input** ``` 3 ``` **Output** ``` 2 ``` **Input** ``` 4 ``` **Output** ``` 12 ``` **Explanation:** For `n = 3`, the unique sequences before the initial order is restored are: 1. [2, 3, 1] 2. [3, 1, 2] For `n = 4`, the unique sequences are more complex due to the increased number of positions. **Note:** - Assume card positions are denoted by their indices starting from 1 to `n`. - The output should be the number of unique sequences modulo `1000000007` (10^9 + 7) due to the potential large size of `n`.","solution":"def unique_configurations(n): MOD = 1000000007 if n == 1: return 0 factorial = 1 for i in range(2, n + 1): factorial = (factorial * i) % MOD return (factorial - 1) % MOD"},{"question":"Given a string s, your task is to determine if all the characters in the string are unique. Return a boolean value indicating whether the string contains all unique characters. Example s = \\"leetcode\\" There are repeated characters in the string, so the output should be: Return False. Example s = \\"abcde\\" All characters are unique in the string, so the output should be: Return True. Function Description Complete the isUnique function in the editor below. isUnique has the following parameter(s): - string s: a string Returns - bool: True if all characters are unique, False otherwise. Input Format A single string, s. Constraints 1 leq text{length of } s leq 10^5 The string s may contain any printable ASCII character. Output Format Sample Input 0 algorithm Sample Output 0 True Sample Input 1 programming Sample Output 1 False Explanation 1 For the string s = \\"programming\\", the characters \'r\', \'g\', and \'m\' are repeated, so the output is False.","solution":"def isUnique(s): Determines if all characters in the string are unique. Parameters: s (str): Input string Returns: bool: True if all characters are unique, False otherwise return len(s) == len(set(s))"},{"question":"Write a function to perform string to integer conversion considering the following rules: 1. Discard any leading whitespaces. 2. Check if the next character (if not already at the end of the string) is either a - or + sign. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present. 3. Read in the next characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored. 4. Convert these digits into an integer. If no digits were read, return 0. 5. Change the sign as necessary (from step 2). 6. If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], clamp the integer so that it remains in the range. Specifically, if the integer is less than -2^31, return -2^31, and if the integer is greater than 2^31 - 1, return 2^31 - 1. Note: - Only the space character \' \' is considered a whitespace character. - Assume the input string does not contain any characters other than those that have been mentioned. Example 1: Input: \\"42\\" Output: 42 Example 2: Input: \\" -42\\" Output: -42 Example 3: Input: \\"4193 with words\\" Output: 4193 Example 4: Input: \\"words and 987\\" Output: 0 Example 5: Input: \\"-91283472332\\" Output: -2147483648","solution":"def string_to_integer(s: str) -> int: Converts a string to an integer following specific rules. s = s.strip() if not s: return 0 is_negative = False index = 0 if s[0] == \'-\': is_negative = True index += 1 elif s[0] == \'+\': index += 1 num = 0 MAX_INT = 2**31 - 1 MIN_INT = -2**31 while index < len(s) and s[index].isdigit(): num = num * 10 + int(s[index]) index += 1 if is_negative: num = -num if num < MIN_INT: return MIN_INT elif num > MAX_INT: return MAX_INT return num"},{"question":"Monocarp is organizing a small coding contest. He wants to design a custom sequence of integers that has special properties. Monocarp defines a \\"magic sequence\\" as a sequence of integers where for a given sequence length k, the sequence contains integers from 1 to k (inclusive) such that each integer appears exactly once and the sum of adjacent elements is prime. Monocarp now needs your help to find such a sequence of integers for a given length k. If there are multiple possible sequences, you can output any of them. Here is an example: For k = 3, one possible magic sequence is [1, 2, 3] because 1+2=3 (prime) and 2+3=5 (prime). However, it might not always be possible to create a magic sequence for any given k (e.g., k = 2). In such cases, you must return -1. Write a program to help Monocarp find a magic sequence if it exists for the given k. -----Input----- The input consists of multiple test cases. The first line contains one integer t (1 le t le 100) — the number of test cases. Each of the next t lines contains one integer k (1 le k le 20). -----Output----- For each test case, if a magic sequence of length k does not exist, print -1. Otherwise, print any valid magic sequence of length k. -----Example----- Input 3 3 2 5 Output 1 2 3 -1 1 4 3 2 5","solution":"def is_prime(n): Helper function to check if the number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def can_form_magic_sequence(k): Returns a possible magic sequence of length k or -1 if not possible. if k == 1: return [1] if k == 2: return -1 if k == 3: return [1, 2, 3] # Example for higher k. (This is a known possible sequence for k <= 20) known_sequences = { 4: [1, 3, 2, 4], 5: [1, 4, 3, 2, 5], 6: [1, 4, 3, 2, 5, 6], 7: [1, 6, 5, 2, 3, 4, 7], 8: [1, 6, 5, 2, 3, 4, 7, 8], 9: [1, 8, 7, 2, 3, 4, 5, 6, 9], 10: [1, 8, 7, 4, 5, 2, 3, 6, 9, 10] } if k in known_sequences: return known_sequences[k] return -1 def magic_sequence(t, test_cases): results = [] for k in test_cases: result = can_form_magic_sequence(k) if result == -1: results.append(\\"-1\\") else: results.append(\\" \\".join(map(str, result))) return results"},{"question":"Peter is a video game developer and he is optimizing the scoring system for his new game. There is a sequence of n levels, where each level i has a score ai that a player can earn by completing that level. Players can choose to skip some levels, but there is a twist: after completing a level, they must skip the next k levels (if there are any remaining). Help Peter determine the maximum possible score a player can achieve given the constraint. -----Input----- The first line contains two space-separated integers n and k (1 ≤ n, k ≤ 1000) — the number of levels and the number of levels to skip after completing one. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the score for each level. -----Output----- Print a single integer — the maximum score that can be achieved. -----Examples----- Input 5 1 10 20 30 40 50 Output 90 Input 6 2 5 15 10 20 30 25 Output 45 -----Note----- In the first sample, the player can complete levels 1, 3, and 5 to achieve the maximum score of 90. In the second sample, one way to achieve the maximum score is by completing levels 2 and 5 (15 + 30 = 45).","solution":"def max_score(n, k, scores): dp = [0] * n # Compute the maximum score for each level if that level is chosen for i in range(n): # We start by taking the current level\'s score dp[i] = scores[i] # Then we add the maximum score achievable by choosing a previous level, # such that the next \'k\' levels after that previous level are not chosen. if i > k: dp[i] += max(dp[:i - k]) return max(dp)"},{"question":"Given an array of integers, write an algorithm to find a contiguous subarray which has the largest sum, and return both the sum and the indices of the subarray. Input The input consists of two lines. The first line contains an integer N (1 ≤ N ≤ 100,000) representing the number of elements in the array. The second line contains N space-separated integers, which are the elements of the array. The integers in the array can range from -10,000 to 10,000. Output Output the largest sum followed by the starting and ending indices of the subarray (using 0-based indexing). If there are multiple subarrays with the same largest sum, output the one with the smallest starting index. If there is still a tie, output the one with the smallest ending index. Example Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 3 6 Explanation The contiguous subarray with the largest sum is [4, -1, 2, 1], with a sum of 6. The starting index of this subarray is 3, and the ending index is 6.","solution":"def max_subarray(arr): Find the contiguous subarray with the largest sum and return the sum along with the starting and ending indices of the subarray. n = len(arr) max_sum = float(\'-inf\') current_sum = 0 start = end = s = 0 for i in range(n): current_sum += arr[i] if current_sum > max_sum: max_sum = current_sum start = s end = i if current_sum < 0: current_sum = 0 s = i + 1 return max_sum, start, end"},{"question":"Implement a function to evaluate and return the string representation of a simple mathematical expression involving two non-negative integers and one of the four basic operations: addition (`+`), subtraction (`-`), multiplication (`*`), and division (`/`). The input expression is provided as a single string formatted as `num1 op num2`, where `num1` and `num2` are non-negative integers, and `op` is one of the valid operators. The function should follow these rules: - Input must be a valid string as described. Any invalid input should return the string \\"Invalid input\\". - Use integer division for the division operation (use the `//` operator). - The function should handle edge cases like division by zero. Examples: - `evaluate(\\"12 + 5\\")` should return `\\"17\\"`. - `evaluate(\\"7 - 3\\")` should return `\\"4\\"`. - `evaluate(\\"6 * 4\\")` should return `\\"24\\"`. - `evaluate(\\"8 / 2\\")` should return `\\"4\\"`. - `evaluate(\\"8 / 0\\")` should return `\\"Invalid input\\"`. - `evaluate(\\"five + ten\\")` should return `\\"Invalid input\\"`. - `evaluate(\\"3 *\\")` should return `\\"Invalid input\\"`.","solution":"def evaluate(expression): Evaluates a simple arithmetic expression containing two non-negative integers and one operator. Supports the following operations: addition, subtraction, multiplication, and integer division. Args: expression (str): The expression to evaluate in the format \\"num1 op num2\\". Returns: str: The evaluation result as a string or \\"Invalid input\\" if the input is invalid. try: # Split the expression into components parts = expression.split() if len(parts) != 3: return \\"Invalid input\\" num1, op, num2 = parts # Convert numbers num1 = int(num1) num2 = int(num2) # Perform the appropriate operation if op == \\"+\\": return str(num1 + num2) elif op == \\"-\\": return str(num1 - num2) elif op == \\"*\\": return str(num1 * num2) elif op == \\"/\\": if num2 == 0: return \\"Invalid input\\" return str(num1 // num2) else: return \\"Invalid input\\" except (ValueError, TypeError): return \\"Invalid input\\""},{"question":"You are given an integer array nums sorted in non-decreasing order and an integer target. Write a function to search for target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity. -----Input----- - An array of integers nums of length n (1 ≤ n ≤ 10^4) sorted in non-decreasing order. - An integer target. -----Output----- Return the index of target if it is in nums or -1 if it is not in nums. -----Function Signature----- ```python def search(nums: List[int], target: int) -> int: ``` -----Examples----- Input nums = [-1,0,3,5,9,12], target = 9 Output 4 Input nums = [-1,0,3,5,9,12], target = 2 Output -1 Input nums = [5], target = 5 Output 0 Input nums = [5], target = -5 Output -1 -----Explanation----- In the first example, the value 9 is found at index 4 of the array, so the output is 4. In the second example, the value 2 is not found in the array, so the output is -1. In the third example, the value 5 is found at index 0 of the array, so the output is 0. In the fourth example, the value -5 is not found in the array, so the output is -1.","solution":"def search(nums, target): Function to search for target in sorted array nums. left, right = 0, len(nums) - 1 while left <= right: mid = left + (right - left) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"question":"You are given two strings, word1 and word2. You need to transform word1 into word2 using a sequence of operations. You can perform the following operations any number of times: 1. Insert a character. 2. Delete a character. 3. Replace a character. Write a function to compute the minimum number of operations required to convert word1 into word2. # Input - The first line contains a string, `word1`, consisting of lowercase English letters only (1 le text{length of word1} le 2000). - The second line contains a string, `word2`, consisting of lowercase English letters only (1 le text{length of word2} le 2000). # Output - Output a single integer representing the minimum number of operations needed to convert `word1` into `word2`. # Example Input ``` horse ros ``` Output ``` 3 ``` Input ``` intention execution ``` Output ``` 5 ``` # Explanation In the first example, we can transform \\"horse\\" to \\"ros\\" using 3 operations: 1. Replace \'h\' with \'r\' -> \\"rorse\\" 2. Remove \'r\' -> \\"rose\\" 3. Remove \'e\' -> \\"ros\\" In the second example, we can transform \\"intention\\" to \\"execution\\" using 5 operations: 1. Replace \'i\' with \'e\' -> \\"ention\\" 2. Remove \'n\' -> \\"etion\\" 3. Replace \'t\' with \'x\' -> \\"exion\\" 4. Insert \'u\' -> \\"exuion\\" 5. Insert \'c\' -> \\"executiod\\" 6. Replace \'d\' with \'n\' -> \\"execution\\" Your solution should efficiently handle the given constraints.","solution":"def min_distance(word1, word2): Compute the minimum number of operations required to convert word1 into word2. Operations allowed: 1. Insert a character. 2. Delete a character. 3. Replace a character. Parameters: word1 (str): The source string. word2 (str): The target string. Returns: int: The minimum number of operations required to convert word1 into word2. m, n = len(word1), len(word2) # Initialize a 2D DP array. dp = [[0] * (n + 1) for _ in range(m + 1)] # Base cases for i in range(m + 1): dp[i][0] = i # Minimum operations to convert word1 to an empty word2 for j in range(n + 1): dp[0][j] = j # Minimum operations to convert an empty word1 to word2 # Fill the DP table for i in range(1, m + 1): for j in range(1, n + 1): if word1[i - 1] == word2[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters match, no extra operation needed else: dp[i][j] = min(dp[i - 1][j - 1], # Replace dp[i - 1][j], # Delete dp[i][j - 1]) # Insert dp[i][j] += 1 return dp[m][n]"},{"question":"A company is conducting a coding assessment for its candidates. One of the tasks is to analyze sequences of numbers to determine the number of significant peaks. A peak is defined as an element that is strictly greater than its immediate neighbors. Given multiple test cases, each consisting of a sequence of integers, you need to find out the number of significant peaks in each sequence. -----Input----- The first line contains an integer t (1 leq t leq 1000) — the number of test cases. Each test case begins with an integer n (3 leq n leq 10^5) — the length of the sequence, followed by n integers a_1, a_2, ldots, a_n (1 leq a_i leq 10^9) — the elements of the sequence. The total length of all sequences combined does not exceed 10^5. -----Output----- For each test case, print a single line containing the number of significant peaks in the sequence. -----Examples----- Input: 3 6 1 3 2 4 3 5 5 1 2 3 2 1 4 7 4 5 3 Output: 2 1 1 -----Explanation----- In the first case, the peaks are 3 (element a_2) and 4 (element a_4). Thus, there are 2 peaks. In the second case, the peak is 3 (element a_3). Thus, there is 1 peak. In the third case, the peak is 5 (element a_5). Thus, there is 1 peak.","solution":"def count_significant_peaks(test_cases): results = [] for case in test_cases: n, sequence = case peak_count = 0 for i in range(1, n-1): if sequence[i] > sequence[i-1] and sequence[i] > sequence[i+1]: peak_count += 1 results.append(peak_count) return results def parse_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) index = 1 test_cases = [] for _ in range(t): n = int(lines[index]) sequence = list(map(int, lines[index + 1].strip().split())) test_cases.append((n, sequence)) index += 2 return test_cases"},{"question":"You are given a rectangular grid of size n times m. Each cell of the grid can be either empty or blocked. You need to determine the number of ways to reach from the top-left corner of the grid to the bottom-right corner under the following conditions: 1. You can only move right or down from a given cell. 2. You cannot move into a blocked cell. 3. The start (top-left) and end (bottom-right) cells are guaranteed to be empty. # Input The input will start with a single line containing two integers n and m (1 leq n, m leq 1000), which represent the number of rows and columns in the grid, respectively. Next n lines contain m characters each. Each character is either `.` indicating an empty cell, or `#` indicating a blocked cell. # Output Output a single integer, which is the number of ways to reach the bottom-right corner of the grid from the top-left corner. # Examples Sample Input 1: ``` 3 3 ... .#. ... ``` Sample Output 1: ``` 2 ``` Sample Input 2: ``` 3 3 # .#. ... ``` Sample Output 2: ``` 0 ``` Explanation: In the first example, there are two ways to reach from `(1,1)` to `(3,3)`: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right In the second example, there is no possible way to reach the bottom-right corner since the top-left corner is surrounded by blocked cells. Therefore, the output is `0`.","solution":"def num_ways_to_reach_end(n, m, grid): Returns the number of ways to reach the bottom-right corner of the grid from the top-left corner. :param n: int - Number of rows in the grid :param m: int - Number of columns in the grid :param grid: List[List[str]] - Grid where \'.\' indicates an empty cell and \'#\' indicates a blocked cell :return: int - Number of ways to reach the bottom-right corner # Initialize a dp table with 0s dp = [[0] * m for _ in range(n)] # Starting point is always 1 dp[0][0] = 1 if grid[0][0] == \'.\' else 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1]"},{"question":"You are provided with a list of customer orders containing their id and the time they placed the order. Your task is to process these orders and determine the sequence in which the orders should be prepared. You must prioritize the orders based on the smallest order id, and if two orders have the same id, prioritize the one that was placed earlier. Consider the following example. Assume the orders are [(5, \'9:00\'), (3, \'9:30\'), (5, \'8:00\'), (4, \'9:15\'), (5, \'8:30\')]. The correct sequence to prepare these orders would be: [(3, \'9:30\'), (4, \'9:15\'), (5, \'8:00\'), (5, \'8:30\'), (5, \'9:00\')]. -----Input----- The input consists of a single test case. The first line contains an integer n (1 ≤ n ≤ 100) indicating the number of orders. The next n lines contain an order id and the time the order was placed in HH:MM format. -----Output----- Display the sequence of orders to prepare, each order on a new line in the format of (order id, time). -----Examples----- Sample Input: 5 5 09:00 3 09:30 5 08:00 4 09:15 5 08:30 Sample Output: (3, \'09:30\') (4, \'09:15\') (5, \'08:00\') (5, \'08:30\') (5, \'09:00\')","solution":"def prepare_order_sequence(order_list): Sorts the given list of orders based on ID and Time. Args: order_list (list of tuples): A list where each tuple contains an order id (int) and time (str in HH:MM format). Returns: list of tuples: Returns the sequence of orders to prepare. return sorted(order_list, key=lambda x: (x[0], x[1]))"},{"question":"You are given a list of integers, and your task is to divide the list into exactly two non-empty parts such that the absolute difference between the sums of the two parts is minimized. If there are multiple ways to achieve the same absolute difference, you only need to report one way. -----Input----- A single line containing an integer n (2 le n le 20), followed by n integers a_1, a_2, ..., a_n (1 le a_i le 100). -----Output----- Output a single line with the minimum possible absolute difference between the sums of the two parts after the division. -----Examples----- Input 5 3 1 4 2 2 Output 0 Input 3 7 1 2 Output 4 Input 4 10 20 30 40 Output 0 -----Note----- In the first example, one optimal division is [3,1,2] and [4,2] which results in the sums 6 and 6, thus the absolute difference is 0. In the second example, one optimal division is [7] and [1,2] which results in the sums 7 and 3, thus the absolute difference is 4.","solution":"import itertools def min_abs_diff_partition(numbers): n = len(numbers) total_sum = sum(numbers) min_diff = float(\'inf\') for i in range(1, n): for comb in itertools.combinations(range(n), i): sum1 = sum(numbers[j] for j in comb) sum2 = total_sum - sum1 diff = abs(sum1 - sum2) if diff < min_diff: min_diff = diff return min_diff def main(input_data): parts = list(map(int, input_data.split())) n = parts[0] numbers = parts[1:] return min_abs_diff_partition(numbers)"},{"question":"You are given an integer `n` representing the number of disks in a Tower of Hanoi puzzle. Your task is to write a function that returns a list of moves to solve the Tower of Hanoi puzzle with `n` disks. Each move should be represented as a tuple `(from, to)` indicating a move from the rod labeled `from` to the rod labeled `to`. Use the standard rod labels: rod 1, rod 2, and rod 3. **Input** An integer `n` (1 ≤ n ≤ 10), the number of disks. **Output** A list of tuples, where each tuple represents a move. The list should represent the sequence of moves required to solve the Tower of Hanoi puzzle. # Example ```` Input: 2 Output: [(1, 2), (1, 3), (2, 3)] Input: 3 Output: [(1, 3), (1, 2), (3, 2), (1, 3), (2, 1), (2, 3), (1, 3)] ```` # Explanation - For `n = 2`: - Move disk 1 from rod 1 to rod 2 - Move disk 2 from rod 1 to rod 3 - Move disk 1 from rod 2 to rod 3 - For `n = 3`: - Move disk 1 from rod 1 to rod 3 - Move disk 2 from rod 1 to rod 2 - Move disk 1 from rod 3 to rod 2 - Move disk 3 from rod 1 to rod 3 - Move disk 1 from rod 2 to rod 1 - Move disk 2 from rod 2 to rod 3 - Move disk 1 from rod 1 to rod 3 **Constraints** - The function should handle up to `n = 10` disks efficiently. - Assume that each move is performed in a manner that adheres to the rules of the Tower of Hanoi puzzle (only one disk can be moved at a time, no disk may be placed on top of a smaller disk, etc.). Good luck and have fun solving the puzzle!","solution":"def tower_of_hanoi(n, from_rod=1, to_rod=3, aux_rod=2): Solve the Tower of Hanoi problem for n disks. Args: n (int): Number of disks. from_rod (int): The starting rod. to_rod (int): The destination rod. aux_rod (int): The auxiliary rod. Returns: list of tuples: A list of moves to solve the puzzle. if n == 1: return [(from_rod, to_rod)] moves = [] moves += tower_of_hanoi(n - 1, from_rod, aux_rod, to_rod) moves.append((from_rod, to_rod)) moves += tower_of_hanoi(n - 1, aux_rod, to_rod, from_rod) return moves"},{"question":"Given an array of integers, a \\"wave\\" is defined as a sequence of elements where the differences between consecutive elements create an alternating pattern (positive, negative, positive, etc., or negative, positive, negative, etc.). The differences between two consecutive elements should all be non-zero. Write a function `longestWave(arr)` that takes an array of integers as input and returns the length of the longest wave in the array. If there are no waves present, the function should return `0`. # Examples: Example 1: ```python arr = [1, 3, 2, 5, 4, 6] Output: 6 Explanation: The entire array is a wave where \'3-1\' (positive), \'2-3\' (negative), \'5-2\' (positive), \'4-5\' (negative), \'6-4\' (positive). ``` Example 2: ```python arr = [10, 5, 6, 3, 4, 1] Output: 6 Explanation: The entire array is a wave where \'5-10\' (negative), \'6-5\' (positive), \'3-6\' (negative), \'4-3\' (positive), \'1-4\' (negative). ``` Example 3: ```python arr = [5, 5, 5, 5] Output: 0 Explanation: There are no differences between the consecutive elements that create a wave. ``` Constraints: - The length of the array will be in the range [1, 1000]. - The elements of the array will be integers in the range [-1000, 1000]. Implement the function `longestWave(arr)` to solve this problem.","solution":"def longestWave(arr): if len(arr) < 2: return len(arr) longest_wave = 0 current_wave_len = 1 for i in range(1, len(arr)): diff = arr[i] - arr[i - 1] if diff == 0: current_wave_len = 1 elif diff > 0 and (i == 1 or (arr[i - 1] - arr[i - 2]) < 0): current_wave_len += 1 elif diff < 0 and (i == 1 or (arr[i - 1] - arr[i - 2]) > 0): current_wave_len += 1 else: current_wave_len = 2 longest_wave = max(longest_wave, current_wave_len) return longest_wave if longest_wave > 1 else 0"},{"question":"Alice is participating in a treasure hunt and she has a list of integers representing digits she can use to unlock a treasure chest. The chest opens if the product of the digits in a permutation is the largest possible even number Alice can form. Help Alice by finding such a permutation. Input: The first line contains the integer N, the size of the list. The second line contains N space-separated integers denoting the list of digits. Output: Print the permutation of digits that forms the largest possible even product. If there are multiple permutations with the same product, print the permutation that forms the largest integer. If no such permutation exists, print -1. Constraints: 1 ≤ N ≤ 10^5 0 ≤ d[i] ≤ 9 SAMPLE INPUT 4 1 3 5 2 SAMPLE OUTPUT 5321 Explanation Possible permutations with an even product are: 1. Product of 5321, which is 5 * 3 * 2 * 1 = 30 (Even) 2. Product of 5132, which is 5 * 1 * 3 * 2 = 30 (Even) Between these, the permutation forming the largest integer is 5321. Other permutations (1352, 1532, 3512, 3152, etc.) also have an even product, but they form smaller integers compared to 5321.","solution":"from itertools import permutations def largest_even_product_permutation(n, digits): Returns the permutation of digits that forms the largest possible even product. If no such permutation exists, return -1. digits = sorted(digits, reverse=True) # Start with the highest possible permutation # If there\'s no even digit, then there\'s no even product possible if not any(d % 2 == 0 for d in digits): return -1 for perm in permutations(digits): product = 1 product_even = False for digit in perm: product *= digit if product % 2 == 0: product_even = True # Only consider permutations with an even product if product_even: return int(\'\'.join(map(str, perm))) return -1"},{"question":"David has a string `S` consisting of lowercase alphabets. He wants to rearrange the characters of the string such that no two adjacent characters are the same. If there are multiple possible answers, output the lexicographically smallest one. If no such arrangement is possible, output `-1`. ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case contains a single string S. ------ Output Format ------ - For each test case, output in a single line, the rearranged string or `-1` if no valid rearrangement is possible. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 1 ≤ |S| ≤ 10^{5} The sum of lengths of strings over all test cases does not exceed 10^{6} ----- Sample Input 1 ------ 3 aab aaab abc ----- Sample Output 1 ------ aba -1 abc ----- Explanation 1 ------ Test case 1: The string `aab` can be rearranged as `aba` which meets the condition that no two adjacent characters are the same. Test case 2: The string `aaab` cannot have any rearrangement such that no two adjacent characters are the same, hence the output is `-1`. Test case 3: The string `abc` already meets the condition in its original form. Make sure your solution is efficient to handle the summed length constraint.","solution":"import heapq from collections import Counter def rearrange_string(S): Rearrange the string such that no two adjacent characters are the same and the result is the lexicographically smallest possible. # Counter for character frequencies count = Counter(S) # Use a max heap to always fetch the character with highest frequency max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) # If there was a prev_char, push it back to the heap (since it\'s not adjacent anymore) if prev_freq < 0: # Means it is still needed heapq.heappush(max_heap, (prev_freq, prev_char)) # Update prev_freq and prev_char prev_freq, prev_char = freq + 1, char rearranged = \'\'.join(result) # If the length of the resultant string is same as input string, it\'s valid if len(rearranged) == len(S): return rearranged else: return \'-1\' def solve(T, test_cases): results = [] for S in test_cases: results.append(rearrange_string(S)) return results"},{"question":"Create a function that takes an integer array and an integer k as inputs, and returns the k largest elements in the array in descending order. The solution should be efficient with respect to both time and space complexity. Input The input consists of two lines: 1. The first line contains an integer n (1 ≤ n ≤ 10^5), the number of elements in the array. 2. The second line contains n space-separated integers representing the elements of the array. 3. The third line contains an integer k (1 ≤ k ≤ n), the number of largest elements to return. Output Output a single line containing the k largest elements in descending order. Examples Input 6 4 1 7 3 9 2 3 Output 9 7 4 Input 5 5 5 5 5 5 2 Output 5 5 Note In the first sample, the array has 6 elements: [4, 1, 7, 3, 9, 2]. The top 3 largest elements are 9, 7, and 4. In the second sample, all elements in the array are equal to 5. The top 2 largest elements are both 5. The function should handle cases with duplicate elements correctly and return the required count of largest elements in descending order.","solution":"import heapq def k_largest_elements(arr, k): Returns the k largest elements from the array in descending order. # Using a min-heap for efficient extraction of the k largest elements if k == 0 or not arr: return [] # Create a min-heap with the first k elements min_heap = arr[:k] heapq.heapify(min_heap) # Iterate through the rest of the array for num in arr[k:]: # If current number is larger than the smallest number in the heap if num > min_heap[0]: heapq.heappushpop(min_heap, num) # Convert the heap into a sorted list in descending order return sorted(min_heap, reverse=True)"},{"question":"Given a set of N integers, your task is to complete the function maxSubsetSumNoAdjacent() that finds the maximum sum of a subset of non-adjacent elements. Two elements are considered adjacent if they are next to each other in the array. Example 1: Input: [3, 2, 5, 10, 7] Output: 15 Explanation: The maximum sum is obtained by selecting elements 3, 10, and 2 (3 + 10 + 2 = 15), where no two selected elements are adjacent. Example 2: Input: [3, 2, 7, 10] Output: 13 Explanation: The maximum sum is obtained by selecting elements 3 and 10 (3 + 10 = 13), where no two selected elements are adjacent. Example 3: Input: [5, 5, 10, 100, 10, 5] Output: 110 Explanation: The maximum sum is obtained by selecting elements 5, 100, and 5 (5 + 100 + 5 = 110), where no two selected elements are adjacent. Your Task: You don\'t need to read input or print anything. Complete the function maxSubsetSumNoAdjacent() which takes an array of N integers as input and returns an integer denoting the maximum sum of a subset of non-adjacent elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 1 <= elements <= 10^4","solution":"def maxSubsetSumNoAdjacent(nums): Given a set of integers, finds the maximum sum of a subset of non-adjacent elements. Args: nums (List[int]): List of integers. Returns: int: Maximum sum of a subset of non-adjacent elements. if not nums: return 0 elif len(nums) == 1: return nums[0] # Initialize the max sums up to the previous two indices prev1 = max(nums[0], nums[1]) prev2 = nums[0] for i in range(2, len(nums)): current = max(prev1, prev2 + nums[i]) prev2 = prev1 prev1 = current return prev1"},{"question":"You are given an undirected weighted graph with n nodes and m edges. Your task is to determine the maximum weight of the edges in the minimum spanning tree of the graph. A minimum spanning tree (MST) of a graph is a subset of the edges that connects all the vertices together, without cycles and with the minimum possible total edge weight. The weight of an edge is given by an integer. -----Input----- The first line of the input contains two integers n and m (1 le n le 1000, 0 le m le 10000) — the number of nodes and edges in the graph, respectively. Each of the next m lines contains three integers u, v and w (1 le u, v le n, u neq v, 1 le w le 10^4), which means that there is an edge between nodes u and v with weight w. -----Output----- Print one integer — the maximum weight of the edges in the minimum spanning tree of the graph. If the graph is not connected, print -1. -----Examples----- Input 4 5 1 2 5 1 3 3 2 4 2 3 4 4 2 3 1 Output 3 Input 3 3 1 2 1 1 3 2 2 3 3 Output 2 Input 2 0 Output -1","solution":"class DisjointSetUnion: def __init__(self, n): self.parent = list(range(n)) self.rank = [0] * n def find(self, u): if self.parent[u] != u: self.parent[u] = self.find(self.parent[u]) return self.parent[u] def union(self, u, v): root_u = self.find(u) root_v = self.find(v) if root_u != root_v: if self.rank[root_u] > self.rank[root_v]: self.parent[root_v] = root_u elif self.rank[root_u] < self.rank[root_v]: self.parent[root_u] = root_v else: self.parent[root_v] = root_u self.rank[root_u] += 1 def max_edge_in_mst(n, edges): if n == 1: return -1 if len(edges) == 0: return -1 edges.sort(key=lambda x: x[2]) dsu = DisjointSetUnion(n) max_edge_weight = -1 mst_edges = 0 for u, v, weight in edges: if dsu.find(u - 1) != dsu.find(v - 1): dsu.union(u - 1, v - 1) max_edge_weight = max(max_edge_weight, weight) mst_edges += 1 if mst_edges == n - 1: break if mst_edges != n - 1: return -1 return max_edge_weight"},{"question":"Peter likes to solve puzzles that involve strings and numbers. Recently, he came across a string manipulation problem and decided to solve it systematically. Here is the problem he faced: \\"Given a string `s` that consists of lowercase letters and a list of operations `operations`, each operation is represented as a list of two elements `[i, j]`, which means you can swap the characters `s[i]` and `s[j]`. You need to find the lexicographically smallest string that Peter can get after performing any number of the given operations in any order.\\" For example, if the string `s` is \\"dcab\\" and the operations are `[[0,3],[1,2]]`, the result should be \\"bacd\\". Input: - A string `s` (1 <= |s| <= 10^5) of lowercase letters. - An integer `n` (0 <= n <= 10^5) denoting the number of operations. - A list of operations of length `n`, where each operation is a pair of non-negative integers `[i, j]` representing 0-based indices. Output: - A single string which is the lexicographically smallest that can be obtained by using the given operations. Note: 1. The operations can be performed in any order, and each operation can be used any number of times. 2. Peter wants to perform the minimum number of swaps to achieve the result. SAMPLE INPUT s = \\"dcab\\" operations = [[0,3],[1,2]] SAMPLE OUTPUT bacd Explanation: 1. Swap characters at indices 0 and 3: dcab -> bcad 2. Swap characters at indices 1 and 2: bcad -> bacd Peter could also find another solution: 1. Swap characters at indices 1 and 2: dcab -> dabc 2. Swap characters at indices 0 and 3: dabc -> bacd","solution":"def lex_smallest_string(s, operations): Returns the lexicographically smallest string that can be obtained by performing the given operations any number of times. # First we need to identify connected components from collections import defaultdict n = len(s) parent = list(range(n)) def find(x): if parent[x] != x: parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY for i, j in operations: union(i, j) from collections import defaultdict groups = defaultdict(list) for i in range(n): groups[find(i)].append(i) s = list(s) for indices in groups.values(): indices = sorted(indices) characters = sorted(s[i] for i in indices) for i, char in zip(indices, characters): s[i] = char return \'\'.join(s)"},{"question":"You are given a rectangular grid of characters where each cell is either \'W\' (representing a wall) or \'.\' (representing an open path) and a pair of coordinates marking the start and end points within the grid. Two players, A and B, start at these respective points and must move to reach each other, meeting at a common cell to exchange a secret message. They can move up, down, left, or right but cannot move through walls. Design a program to find the minimum number of moves required for both players to meet. If it\'s impossible for them to meet, return -1. -----Input----- The first line of the input contains two integers n and m (2 ≤ n, m ≤ 200), the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters each (\'W\' or \'.\'), representing the grid. The last two lines contain the starting coordinates of players A and B respectively in the format (x, y) where (1 ≤ x ≤ n and 1 ≤ y ≤ m). -----Output----- The output contains a single integer — the minimum number of moves required for both players to meet, or -1 if meeting is not possible. -----Examples----- Input 5 5 ..... .WWWW ..... .WWWW ..... 1 1 5 5 Output 8 Input 3 3 .W. .W. .W. 1 1 3 3 Output -1 -----Note----- In the first example, player A starts at (1, 1) and player B starts at (5, 5). One optimal path for A is (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). For B, an optimal path is (5,5) -> (4,5) -> (3,5) -> (3,4) -> (3,3). They meet at (3, 3) in 8 moves. In the second example, there’s a vertical wall separating the two players, so it’s impossible for them to meet. Hence, the output is -1.","solution":"from collections import deque def min_moves_to_meet(n, m, grid, startA, startB): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(start): visited = [[False] * m for _ in range(n)] distance = [[float(\'inf\')] * m for _ in range(n)] queue = deque([start]) visited[start[0]][start[1]] = True distance[start[0]][start[1]] = 0 while queue: x, y = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True distance[nx][ny] = distance[x][y] + 1 queue.append((nx, ny)) return distance startA = (startA[0] - 1, startA[1] - 1) startB = (startB[0] - 1, startB[1] - 1) distA = bfs(startA) distB = bfs(startB) min_moves = float(\'inf\') for i in range(n): for j in range(m): if distA[i][j] != float(\'inf\') and distB[i][j] != float(\'inf\'): min_moves = min(min_moves, distA[i][j] + distB[i][j]) return min_moves if min_moves != float(\'inf\') else -1"},{"question":"Write a function named \\"sumDigits\\". Given a single non-negative integer, \\"sumDigits\\" returns the sum of its digits. For example: ``` var output = sumDigits(1234); console.log(output); // --> 10 (1 + 2 + 3 + 4 = 10) ```","solution":"def sumDigits(number): Returns the sum of the digits of the given non-negative integer. return sum(int(digit) for digit in str(number))"},{"question":"Kate loves exploring cities. Recently, she has become interested in the subway system of her city which consists of `n` stations connected by `n-1` bidirectional routes such that it is possible to travel between any two stations. Each route has a travel time associated with it. Kate wants to visit some stations but only if she can complete her tour in no more than `t` minutes of travel time. Write a program to help Kate determine if a given sequence of stations can be visited within the allowed time. Input The first line contains two integers `n` and `t` (1 ≤ n ≤ 100,000, 1 ≤ t ≤ 1,000,000). The next `n-1` lines each contain three integers `u`, `v`, and `w` (1 ≤ u, v ≤ n, 1 ≤ w ≤ 1000), indicating that there is a route between stations `u` and `v` which takes `w` minutes. The final line contains an integer `k` (1 ≤ k ≤ n) followed by `k` distinct integers representing the sequence of stations Kate wants to visit. Output Print \\"YES\\" if it is possible to visit all specified stations within `t` minutes, otherwise print \\"NO\\". Examples Input 7 50 1 2 10 2 3 20 2 4 5 4 5 15 4 6 25 6 7 10 4 5 7 2 Output NO Input 5 25 1 2 5 1 3 10 3 4 5 4 5 10 4 5 3 Output YES Note In the first test case, the total travel time to visit the stations 4 -> 5 -> 7 -> 2 is more than 50 minutes, so the output is \\"NO\\". In the second test case, the total travel time to visit the stations 4 -> 5 -> 3 is within 25 minutes, so the output is \\"YES\\".","solution":"def can_visit_stations(n, t, routes, k, sequence): import heapq from collections import defaultdict from sys import maxsize # Create a graph as adjacency list graph = defaultdict(list) for u, v, w in routes: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(source): # Dijkstra\'s algorithm for shortest path min_heap = [(0, source)] dist = {i: maxsize for i in range(1, n+1)} dist[source] = 0 while min_heap: d, node = heapq.heappop(min_heap) if d > dist[node]: continue for neighbor, weight in graph[node]: new_distance = d + weight if new_distance < dist[neighbor]: dist[neighbor] = new_distance heapq.heappush(min_heap, (new_distance, neighbor)) return dist total_time = 0 for i in range(k-1): dist_from_current = dijkstra(sequence[i]) total_time += dist_from_current[sequence[i+1]] return \\"YES\\" if total_time <= t else \\"NO\\""},{"question":"Given a list of words, return the longest word where all its letters are alphabetically contiguous. If there are multiple words with the same length, return the earliest one in the list. Example: ```python longest_contiguous_word([\\"abc\\", \\"ade\\", \\"xyz\\", \\"abcde\\"]) # \\"abcde\\" longest_contiguous_word([\\"abc\\", \\"a\\", \\"bc\\", \\"cdefg\\", \\"xyz\\"]) # \\"cdefg\\" ``` Note: - Letters in the word must be in successive order in the English alphabet. - The result should be case-insensitive, but the original case from the input should be preserved in the output.","solution":"def longest_contiguous_word(words): Returns the longest word where all its letters are alphabetically contiguous. If there are multiple words with the same length, returns the earliest one in the list. def is_contiguous(word): lower_word = word.lower() for i in range(1, len(lower_word)): if ord(lower_word[i]) != ord(lower_word[i-1]) + 1: return False return True longest_word = \\"\\" for word in words: if is_contiguous(word) and len(word) > len(longest_word): longest_word = word return longest_word"},{"question":"-----Problem Statement----- Write a program that accepts a list of integers and outputs the sum of the even numbers in the list. -----Input----- The first line contains a single integer, t, the number of test cases. Each of the next t lines contains a list of integers separated by spaces. -----Output----- For each test case, output the sum of the even numbers in the list in a single line. -----Constraints----- - 1 ≤ t ≤ 100 - Each list will have at least one integer and at most 1,000 integers - Each integer will be in the range -10^6 to 10^6 -----Sample Input----- 2 1 2 3 4 5 -1 -2 -3 -4 -----Sample Output----- 6 -6","solution":"def sum_of_even_numbers(test_cases): Given a list of test cases where each test case is a list of integers, returns a list of sums of even numbers for each test case. results = [] for case in test_cases: even_sum = sum(num for num in case if num % 2 == 0) results.append(even_sum) return results"},{"question":"Task Given a list of words, you need to find the word that has all its characters in alphabetical order. If no such word is found, return the string \\"NONE\\". If multiple words fit the criteria, return the first one in the list. Your task is to write a function that takes a list of words and returns the word with characters in alphabetical order or \\"NONE\\" if no such word is found. Example ```python alphabetical_word([\\"abc\\", \\"aabb\\", \\"xyz\\", \\"bcad\\"]) # Output: \\"abc\\" alphabetical_word([\\"hello\\", \\"world\\", \\"python\\"]) # Output: \\"NONE\\" ``` Input/Output - `[input]` list of strings `words` - A list of words where each word contains only lowercase letters (1 <= len(words[i]) <= 100, 0 < len(words) <= 1000). - `[output]` string - The first word in the list with characters in alphabetical order or \\"NONE\\". Function Signature ```python def alphabetical_word(words: [str]) -> str: ```","solution":"def alphabetical_word(words): This function takes a list of words and returns the first word where all characters are in alphabetical order. If no such word exists, it returns \\"NONE\\". for word in words: if list(word) == sorted(word): return word return \\"NONE\\""},{"question":"# Task Emily loves reading books and she wants to organize her bookshelf. She has `n` books, each with a title consisting of lowercase English letters. Emily wants to arrange the books in lexicographical order, but she also wants to remove any duplicate titles to save space. Write a function that will sort the book titles in lexicographical order and remove any duplicates. # Input/Output - `[input]` integer `n` The number of books Emily has. `1 ≤ n ≤ 10^5` - `[input]` an array of strings `titles` The titles of the `n` books. Each title contains only lowercase English letters and has a length of at most `100`. - `[output]` an array of strings The sorted list of unique book titles in lexicographical order. # Example For `n = 5` and `titles = [\\"thegreatgatsby\\", \\"mobydick\\", \\"thegreatgatsby\\", \\"animalfarm\\", \\"mobydick\\"]`, the result should be `[\\"animalfarm\\", \\"mobydick\\", \\"thegreatgatsby\\"]`. ``` The unique titles are: \\"thegreatgatsby\\", \\"mobydick\\", \\"animalfarm\\" After sorting in lexicographical order, the result is: [\\"animalfarm\\", \\"mobydick\\", \\"thegreatgatsby\\"] ```","solution":"def organize_books(n, titles): Given the number of books and their titles, return a sorted list of unique book titles in lexicographical order. Parameters: n (int): The number of books. titles (list): A list of strings representing the titles of the books. Returns: list: A sorted list of unique book titles. # Use a set to remove duplicates unique_titles = set(titles) # Convert set back to list and sort lexicographically sorted_titles = sorted(unique_titles) return sorted_titles"},{"question":"Write a function that takes an integer `n` as input and returns a list of all prime numbers less than `n`. A prime number is a positive integer greater than 1 that is only divisible by 1 and itself. Example 1: Input: 10 Output: [2, 3, 5, 7] Example 2: Input: 20 Output: [2, 3, 5, 7, 11, 13, 17, 19] Note: 1. The function should be efficient and able to handle input values up to 100,000. 2. You are encouraged to use the Sieve of Eratosthenes algorithm for better performance.","solution":"def sieve_of_eratosthenes(n): Returns a list of all prime numbers less than n using the Sieve of Eratosthenes algorithm. if n <= 2: return [] # Initialize a boolean array indicating if the number is prime is_prime = [True] * n is_prime[0] = is_prime[1] = False # 0 and 1 are not primes for start in range(2, int(n**0.5) + 1): if is_prime[start]: for multiple in range(start*start, n, start): is_prime[multiple] = False return [num for num in range(n) if is_prime[num]]"},{"question":"Lena and Masha are preparing for a robotics competition. They have m types of components, where each type has several pieces available. During the preparation, each of them will choose a different type of component to work with. The preparation is considered efficient if both Lena and Masha can take the same number of pieces, but from different types of components. Determine whether Lena and Masha can choose different types of components such that they can take the same number of pieces and always use all the available pieces for these two types. -----Input----- The first line contains a single integer m (2 ≤ m ≤ 50) — number of types of components. The second line contains m space-separated integers b_1, b_2, ..., b_{m} (1 ≤ b_{i} ≤ 100) — number of pieces available for each type of component. -----Output----- If it is impossible for Lena and Masha to choose different types of components that allow the preparation to be efficient, print \\"NO\\" (without quotes) in the first line. In this case, you should not print anything more. Otherwise, print \\"YES\\" (without quotes) in the first line. In the second line, print two distinct integers — the types of components that Lena and Masha should choose to make the preparation efficient (indices are 1-based). If there are several solutions, print any of them. -----Examples----- Input 3 4 6 4 Output YES 1 3 Input 5 2 3 4 5 6 Output NO Input 4 5 5 10 10 Output YES 1 2 -----Note----- In the first example, the preparation will be efficient if, for example, Lena chooses type 1, and Masha chooses type 3. Then both can take 4 pieces. Thus, each of them will take exactly 4 pieces. In the second example, it is impossible to divide the pieces equally while ensuring they are from different types, so the answer is NO. In the third example, Lena and Masha can each choose a type with 5 pieces (for instance, types 1 and 2). Thus, the preparation will be efficient.","solution":"def can_prepare_efficiently(m, components): from collections import Counter # Count the frequency of each component type component_count = Counter(components) # Find pairs pairs = [] for component, count in component_count.items(): if count > 1: # If two components of the same type can be used by both indices = [i + 1 for i, x in enumerate(components) if x == component] pairs.append((indices[0], indices[1])) if pairs: return \\"YES\\", pairs[0] return \\"NO\\", None"},{"question":"You are given a list of integers and your task is to implement a queue data structure using stacks such that the enqueue and dequeue operations are performed in amortized O(1) time. Example 1: Input: enqueue(1) enqueue(2) dequeue() enqueue(3) enqueue(4) dequeue() dequeue() enqueue(5) dequeue() Output: 1 2 3 4 Explanation: In the first test case for the following sequence of operations: enqueue(1) Add 1 to the queue. The queue will be {1} enqueue(2) Add 2 to the queue. The queue will be {1, 2} dequeue() Remove the front element from the queue. Dequeued element will be 1 The queue will be {2} enqueue(3) Add 3 to the queue. The queue will be {2, 3} enqueue(4) Add 4 to the queue. The queue will be {2, 3, 4} dequeue() Remove the front element from the queue. Dequeued element will be 2 The queue will be {3, 4} dequeue() Remove the front element from the queue. Dequeued element will be 3 The queue will be {4} enqueue(5) Add 5 to the queue. The queue will be {4, 5} dequeue() Remove the front element from the queue. Dequeued element will be 4 The queue will be {5} Your Task: You are required to complete the two methods enqueue() which takes one argument an integer \'x\' to be added to the queue, and dequeue() which returns an integer dequeued from the queue (-1 will be returned if the queue is empty). Expected Time Complexity: Amortized O(1) for both enqueue and dequeue. Expected Auxiliary Space: O(1) for both methods. Constraints: 1 <= Number of operations <= 100 -10^5 <= values in the queue <= 10^5","solution":"class QueueUsingStacks: def __init__(self): # Initialize two stacks self.stack1 = [] self.stack2 = [] def enqueue(self, x): # Add the element to stack1 self.stack1.append(x) def dequeue(self): # If stack2 is empty, transfer all elements from stack1 to stack2 if not self.stack2: while self.stack1: self.stack2.append(self.stack1.pop()) # If stack2 is still empty, return -1 (queue is empty) if not self.stack2: return -1 # Pop the top element from stack2 and return it return self.stack2.pop()"},{"question":"Alice is redesigning the city\'s park layout to enhance its beauty with new garden beds. Each garden bed is in the shape of a convex polygon, and the park contains multiple garden beds. To maintain the aesthetics, no two garden beds overlap and none are inside each other. Alice wants to add flowerbed sprinklers in the park to water every garden bed uniformly. These sprinklers have a spherical range and can be placed at any arbitrary position. Her goal is to find the minimum number of sprinklers required to water all the garden beds completely. Each sprinkler is characterized by its position (x, y) and its circular watering range r. A sprinkler can water a garden bed entirely if all the vertices of the bed are within its circular range. Input The first line contains one integer N (1 ≤ N ≤ 10^4) – the number of garden beds. The next N lines describe the garden beds. The first number of the line is integer c_i (3 ≤ c_i ≤ 10^4) – the number corners in the i^{th} garden bed, followed by c_i pairs of integers. The j^{th} pair is (x_j, y_j) – the coordinates of the j^{th} corner (|x_j|, |y_j| ≤ 3 * 10^4). The corners are listed in the clockwise or counterclockwise order. The total number of corners in all the garden beds is at most 5 * 10^4. The next line contains one integer E (1 ≤ E ≤ 10^2) – the number of available sprinklers. Each of the next E lines describes a sprinkler. Each line contains three integers x_s, y_s, and r (|x_s|, |y_s| ≤ 3 * 10^4, and 1 ≤ r ≤ 3 * 10^4) – the coordinates of the sprinkler and its range. Output Print a single line containing a single integer – the minimum number of sprinklers required to water all the garden beds completely. If it\'s not possible to water all the garden beds with the given sprinklers, print -1. Example Input 3 4 1 1 1 4 4 4 4 1 3 2 2 5 2 3 5 4 6 6 7 6 7 7 6 7 2 2 2 2 6 6 1 Output -1 Input 2 4 1 1 1 3 3 3 3 1 3 4 4 5 4 4 5 3 2 2 2 4 4 2 4 4 4 Output 2 Note In the first example, it\'s impossible to water all the garden beds with the given sprinklers as none of them can cover all the required vertices. In the second example, two sprinklers will suffice to water both garden beds; one placed at (2, 2) with range 2 covers the first bed, and the second placed at (4, 4) with range 2 covers the second bed.","solution":"def min_sprinklers(garden_beds, sprinklers): Calculates the minimum number of sprinklers needed to water all garden beds or returns -1 if it\'s not possible with the given sprinklers. def can_water(garden_bed, sprinkler): x_s, y_s, r = sprinkler return all((x - x_s)**2 + (y - y_s)**2 <= r**2 for x, y in garden_bed) num_garden_beds = len(garden_beds) num_sprinklers = len(sprinklers) if num_garden_beds == 0: return 0 if num_sprinklers == 0: return -1 bed_coverage = [0] * num_garden_beds for i in range(num_garden_beds): for spro in sprinklers: if can_water(garden_beds[i], spro): bed_coverage[i] += 1 break if any(bed == 0 for bed in bed_coverage): return -1 return sum(1 for bed in bed_coverage if bed > 0) # Example usage input_data = 2 4 1 1 1 3 3 3 3 1 3 4 4 5 4 4 5 3 2 2 2 4 4 2 4 4 4 def parse_input(input_data): lines = input_data.strip().split(\'n\') num_garden_beds = int(lines[0]) garden_beds = [] idx = 1 for _ in range(num_garden_beds): parts = list(map(int, lines[idx].split())) num_corners = parts[0] garden_bed = [(parts[i], parts[i+1]) for i in range(1, len(parts), 2)] garden_beds.append(garden_bed) idx += 1 num_sprinklers = int(lines[idx]) sprinklers = [] idx += 1 for _ in range(num_sprinklers): sprinklers.append(tuple(map(int, lines[idx].split()))) idx += 1 return garden_beds, sprinklers garden_beds, sprinklers = parse_input(input_data) print(min_sprinklers(garden_beds, sprinklers)) # Expected output: 2"},{"question":"Two rival software development teams are arguing over the choice of a backend technology stack. To make a fair decision, you decide to analyze their codebases to find common dependencies. Write a function: ```python def find_common_dependencies(codebase1, codebase2): ``` The parameters ```codebase1``` and ```codebase2``` are lists of strings, where each string represents a dependency in the respective codebase. Your task is to return a list containing the dependencies that are common in both codebases. The resulting list should have the dependencies in the same order as they appear in ```codebase1```. If there are no common dependencies, return an empty list. **Note**: The comparison should be case-sensitive. # Example: ```python codebase1 = [\\"numpy\\", \\"pandas\\", \\"scipy\\", \\"matplotlib\\"] codebase2 = [\\"matplotlib\\", \\"scikit-learn\\", \\"pandas\\", \\"numpy\\"] print(find_common_dependencies(codebase1, codebase2)) ``` **Output**: ``` [\'numpy\', \'pandas\', \'matplotlib\'] ```","solution":"def find_common_dependencies(codebase1, codebase2): Returns a list of dependencies that are common in both codebases in the same order as they appear in codebase1. common_dependencies = [dependency for dependency in codebase1 if dependency in codebase2] return common_dependencies"},{"question":"A nonprofit organization is organizing a charity event that involves a series of games. Participants can join any game, and for each specific game, the organization has the results stored in the form of pairs indicating the participant\'s ID and their score in that game. To help with the analysis and awarding process, the organization wants to determine the highest score for each participant across all the games they participated in. You have been tasked to write a program that processes the results of multiple games and returns the highest score for each participant. -----Input----- - The first line contains an integer 1 leq m leq 100, the number of games. - For each game, the first line contains an integer 1 leq p leq 1000, the number of participants in that game. - Each of the next p lines contains the participant\'s ID (a string of up to 10 alphanumeric characters) and their score (an integer between 0 and 1000). -----Output----- For each participant that appeared in any game, output a line with the participant\'s ID and their highest score across all games they participated in. Participants should be listed in alphabetical order by their ID. -----Examples----- Sample Input 1: 2 3 Alice 300 Bob 250 Charlie 400 2 Alice 350 Charlie 450 Sample Output 1: Alice 350 Bob 250 Charlie 450 Sample Input 2: 1 4 Zoe 100 Alice 200 Bob 150 Zoe 250 Sample Output 2: Alice 200 Bob 150 Zoe 250","solution":"def highest_scores_across_games(m, games_data): Returns the highest score for each participant across all games they participated in. Parameters: - m: Number of games - games_data: List of tuples where each tuple represents the information of a game. Each tuple contains a list of tuples, with each inner tuple containing a participant ID and their score. Returns: - List of tuples with participant ID and their highest score, sorted by participant ID. participant_scores = {} for game in games_data: for participant_id, score in game: if participant_id in participant_scores: participant_scores[participant_id] = max(participant_scores[participant_id], score) else: participant_scores[participant_id] = score sorted_participants = sorted(participant_scores.items()) return sorted_participants # Example usage: # m = 2 # games_data = [ # [(\'Alice\', 300), (\'Bob\', 250), (\'Charlie\', 400)], # [(\'Alice\', 350), (\'Charlie\', 450)] # ] # print(highest_scores_across_games(m, games_data)) # Output: [(\'Alice\', 350), (\'Bob\', 250), (\'Charlie\', 450)]"},{"question":"Given an array of integers, write a method to return the maximum product of any three numbers from the array. For example: ``` [1, 10, 2, 6, 5, 3] ==> 300 ``` In this example, the maximum product of any three numbers (10, 6, 5) is 300.","solution":"def maximum_product_of_three(nums): Returns the maximum product of any three numbers from the array. nums.sort() return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"},{"question":"In the fictional city of Codeville, there is a unique traffic system organized in a grid layout. The city is divided into an n x m grid of intersections. Each intersection is represented by its coordinates (x, y) where 1 <= x <= n and 1 <= y <= m. Some intersections have traffic lights, while others do not. Traffic lights are installed at certain intersections to regulate the flow of vehicles. You are provided with a list of these traffic lights’ positions. The task is to calculate the maximum distance from any intersection without a traffic light to the nearest intersection with a traffic light. The distance between two intersections (x1, y1) and (x2, y2) is defined as the Manhattan distance: |x1 - x2| + |y1 - y2|. Input The first line contains three space-separated integers n, m, and k (1 ≤ n, m ≤ 500, 1 ≤ k ≤ 10^4), denoting the dimensions of the grid and the number of traffic lights, respectively. Each of the next k lines contains two space-separated integers xi and yi (1 ≤ xi ≤ n, 1 ≤ yi ≤ m), representing the coordinates of a traffic light. Output Output a single integer that represents the maximum Manhattan distance from any intersection without a traffic light to the nearest intersection with a traffic light. Example Input 4 4 3 1 2 3 4 4 1 Output 2 Explanation Consider the grid: 1. Intersections without traffic lights: - (1,1), (1,3), (1,4) - (2,1), (2,2), (2,3), (2,4) - (3,1), (3,2), (3,3) - (4,2), (4,3), (4,4) 2. The farthest distance from these intersections to any traffic light is calculated as follows: - From (4,4) to (3,4): only 1 step down and 1 step right, so distance is 2.","solution":"def max_distance_to_traffic_light(n, m, k, lights): max_distance = 0 for x in range(1, n+1): for y in range(1, m+1): if (x, y) not in lights: min_distance = float(\'inf\') for (lx, ly) in lights: min_distance = min(min_distance, abs(x - lx) + abs(y - ly)) max_distance = max(max_distance, min_distance) return max_distance # Reading Input def parse_input(input_str): lines = input_str.strip().split(\\"n\\") n, m, k = map(int, lines[0].split()) lights = [tuple(map(int, line.split())) for line in lines[1:]] return n, m, k, lights def traffic_lights_max_distance(input_str): n, m, k, lights = parse_input(input_str) return max_distance_to_traffic_light(n, m, k, lights)"},{"question":"Create a function that takes in a list of strings and returns a dictionary with each string length as its keys and lists of strings having those lengths as values. For example: ```python group_by_length([\\"apple\\", \\"bee\\", \\"car\\", \\"dog\\", \\"elephant\\", \\"fig\\", \\"go\\"]) # Should return {5: [\\"apple\\"], 3: [\\"bee\\", \\"car\\", \\"dog\\", \\"fig\\"], 8: [\\"elephant\\"], 2: [\\"go\\"]} ``` Your implementation should handle strings of varying lengths and ensure that the order of appearance of strings is preserved within the lists in the resulting dictionary. Good luck!","solution":"def group_by_length(strings): Groups strings by their length. Args: strings (list): A list of strings to be grouped. Returns: dict: A dictionary with string lengths as keys and lists of strings with those lengths as values. result = {} for string in strings: length = len(string) if length not in result: result[length] = [] result[length].append(string) return result"},{"question":"Create a function called `minDifference` that takes an array of integers and returns the minimum absolute difference between any two elements in the array. ```Example: Input - {3, 8, 15, 17} Output - 2 (The minimum difference is between 15 and 17) ```","solution":"def minDifference(arr): Returns the minimum absolute difference between any two elements in the array. if len(arr) < 2: return 0 # or raise an error if array length is less than 2 # Sort the array arr.sort() # Initialize the minimum difference to a large value min_diff = float(\'inf\') # Compute the minimum difference by iterating through the sorted array for i in range(len(arr) - 1): diff = abs(arr[i+1] - arr[i]) if diff < min_diff: min_diff = diff return min_diff"},{"question":"You\'ve got an array, consisting of n integers a1, a2, ..., an. Also, you\'ve got m queries, the i-th query is described by three integers li, ri, and x. For each query, you should determine whether x is a major element in the subsegment defined by li and ri. A major element in a sequence b1, b2, ..., bk is an element that appears more than k/2 times in that sequence. Input: The first line contains two integers n and m (1 ≤ n, m ≤ 10^5) — the number of array elements and the number of queries. The second line contains the sequence of integers a1, a2, ..., an (1 ≤ a[i] ≤ 10^9), where number a[i] stands for the i-th array element. The following m lines contain the description of the queries. The i-th line contains the description of the i-th query, consisting of three integers li, ri, and x (1 ≤ li ≤ ri ≤ n, 1 ≤ x ≤ 10^9) — the boundaries of the subsegment of the initial array and the element x. Output: Print m lines, in the i-th line print word \\"Yes\\" (without the quotes), if x is a major element in the subsegment that corresponds to the i-th query, or word \\"No\\" (without the quotes) otherwise. SAMPLE INPUT 7 3 3 1 2 3 3 2 3 1 4 3 2 6 2 3 7 3 SAMPLE OUTPUT No No Yes","solution":"def is_major_element(n, m, array, queries): Determines if x is a major element in the subsegment defined by li and ri for each query. Parameters: n (int): Number of elements in the array m (int): Number of queries array (list of int): The array elements queries (list of tuple): Each tuple contains (li, ri, x) that defines the query Returns: list of str: \\"Yes\\" or \\"No\\" for each query result = [] for (li, ri, x) in queries: subsegment = array[li-1:ri] count_x = subsegment.count(x) if count_x > (ri - li + 1) / 2: result.append(\\"Yes\\") else: result.append(\\"No\\") return result"},{"question":"A large aquarium needs to be filled with water, and the water flow from the inlet hose is such that it can fill a container with a given volume at a constant rate. Given the dimensions of the aquarium and the rate of water flow, we want to determine how long it will take to fill the aquarium completely. An aquarium has three dimensions, l, w, and h, and its volume v is simply l cdot w cdot h. The water flow rate r is specified in cubic units per minute. To find out how long it will take to fill the aquarium, we need to calculate the time, t, taken to fill a volume of v cubic units when water flows at a rate of r cubic units per minute. The time t can be obtained using the formula t = frac{v}{r}. For example, suppose an aquarium with dimensions (10, 5, 2) has a flow rate of 10 cubic units per minute. The volume of the aquarium would be 100 cubic units, and the time taken to fill it would be frac{100}{10} = 10 minutes. However, if the aquarium dimensions are (4, 5, 6) and the flow rate is 15 cubic units per minute, then the volume is 120 cubic units and the time taken would be frac{120}{15} = 8 minutes. -----Input----- The input consists of a single line containing four integers: l, w, h, and r, as defined above. The values satisfy 1 le l, w, h le 10^3 and 1 le r le 10^3. -----Output----- The output is a single integer: the time taken to fill the aquarium in minutes. -----Examples----- Sample Input 1: 10 5 2 10 Sample Output 1: 10 Sample Input 2: 4 5 6 15 Sample Output 2: 8","solution":"def time_to_fill_aquarium(l, w, h, r): Returns the time taken to fill the aquarium in minutes given the dimensions of the aquarium (l, w, h) and the rate of water flow (r). volume = l * w * h time = volume // r if volume % r == 0 else volume // r + 1 return time"},{"question":"Many strings are interesting for various reasons. In particular, Chhota Bheem finds strings interesting when they contain repeating characters such that the string can be broken into multiple substrings with equal characters. For instance, the string \\"aaabbb\\" can be broken down into \\"aaa\\" and \\"bbb\\" where both substrings consist of a single unique character. Your task is to determine if the given string can be broken down into exactly two contiguous substrings where each substring contains only one type of character, and each character appears at least once. If it is possible, print \\"YES\\", otherwise print \\"NO\\". Input:- The first line contains the number of test cases. Each test case contains a string S. Output:- For each test case, print \\"YES\\" if the string can be divided as described, otherwise print \\"NO\\". SAMPLE INPUT 3 aaabbb aabb abc SAMPLE OUTPUT YES YES NO Explanation For the first test case, the string \\"aaabbb\\" can be split into \\"aaa\\" and \\"bbb\\", both containing only \'a\' and \'b\' respectively. For the second test case, the string \\"aabb\\" can be split into \\"aa\\" and \\"bb\\", both containing only \'a\' and \'b\' respectively. For the third test case, the string \\"abc\\" cannot be split into two contiguous substrings that each only contain one type of character. Hence, the output is \\"NO\\".","solution":"def is_interesting_string(S): Determine if the string can be split into exactly two contiguous substrings, each containing only one type of character. Parameters: S (str): The input string. Returns: str: \\"YES\\" if the string can be split as described, \\"NO\\" otherwise. n = len(S) # Traverse the string to find the point where the character changes for i in range(1, n): if S[i] != S[0]: # Found a different character if all(c == S[i] for c in S[i:]): # Check if the rest of the string is the same character return \\"YES\\" else: return \\"NO\\" return \\"NO\\" def process_test_cases(input_list): Process test cases for the specified problem. Parameters: input_list (list): A list of strings where the first element is the number of test cases and the following elements are the test case strings. Returns: list: A list of results for each test case. num_test_cases = int(input_list[0]) results = [] for i in range(1, num_test_cases + 1): result = is_interesting_string(input_list[i]) results.append(result) return results"},{"question":"You are given a string s which consists of lowercase English alphabets only. Your task is to determine if the string can be rearranged into a sequence of alternating characters such that no two adjacent characters are the same. If possible, return \\"YES\\"; otherwise, return \\"NO\\". For example, the string \\"aabb\\" can be rearranged into \\"abab\\" or \\"baba\\"; however, the string \\"aaab\\" cannot be rearranged in such a way. -----Input----- The first line contains one integer t (1 le t le 10^3) — the number of test cases. The following t lines contain the string s. The length of the string s is between 1 and 10^5, inclusive. It is guaranteed that the sum of all string lengths does not exceed 10^6. -----Output----- For each test case, determine if the string can be rearranged into a sequence of alternating characters such that no two adjacent characters are the same. Output \\"YES\\" if possible, otherwise \\"NO\\". -----Example----- Input 3 aabb aaab abcabc Output YES NO YES -----Note----- In the first test case, the string \\"aabb\\" can be rearranged into \\"abab\\" or \\"baba\\", so the output is \\"YES\\". In the second test case, the string \\"aaab\\" cannot be rearranged to meet the criteria, so the output is \\"NO\\". In the third test case, the string \\"abcabc\\" can be rearranged into \\"ababcd\\" or similar patterns, so the output is \\"YES\\".","solution":"def can_alternate_characters(s): Determines if the string can be rearranged into a sequence of alternating characters such that no two adjacent characters are the same. from collections import Counter char_count = Counter(s) max_count = max(char_count.values()) if max_count <= (len(s) + 1) // 2: return \\"YES\\" else: return \\"NO\\" def process_test_cases(t, test_cases): results = [] for s in test_cases: results.append(can_alternate_characters(s)) return results"},{"question":"A sneaker store wishes to optimize its online purchasing system to ensure smooth and efficient order handling. To achieve this, you\'ve been tasked with implementing an inventory audit system that tracks when sneaker models go out of stock, allowing the store to restock appropriately and show availability status to customers. Each sneaker model has a unique SKU (Stock Keeping Unit) and an initial stock quantity. Every purchase decreases the stock of the specific SKU by the number of units bought. When the stock of any SKU reaches zero or below, it is marked as out of stock. Your program needs to keep track of stock levels for multiple SKUs and identify which ones go out of stock after a series of purchase orders. -----Input----- The input begins with two integers n and m (1 leq n, m leq 10^5), where n is the number of different SKUs and m is the number of purchase orders. This is followed by n lines, each containing a string s (the SKU identifier) and an integer x (the initial stock for the SKU), where s is a unique string consisting of lowercase letters (1 to 10 characters long) and 1 leq x leq 10^4. The next m lines each contain a string s_i and an integer y_i, where s_i is the SKU identifier for the purchase and y_i is the quantity purchased for that SKU, with 1 leq y_i leq 100. -----Output----- Output all SKU identifiers that go out of stock, each on a new line, in the order they first go out of stock. If no SKU goes out of stock, output \\"No SKUs out of stock\\". -----Examples----- Sample Input: 3 5 nike123 10 adidas456 8 puma789 15 nike123 4 adidas456 2 nike123 6 puma789 10 puma789 5 Sample Output: nike123 puma789","solution":"def track_out_of_stock(n, m, skus, orders): stock = {} out_of_stock = [] for sku, qty in skus: stock[sku] = qty for sku, qty in orders: if sku in stock and stock[sku] > 0: stock[sku] -= qty if stock[sku] <= 0 and sku not in out_of_stock: out_of_stock.append(sku) return out_of_stock if out_of_stock else [\\"No SKUs out of stock\\"] # Example usage: # n = 3 # m = 5 # skus = [(\\"nike123\\", 10), (\\"adidas456\\", 8), (\\"puma789\\", 15)] # orders = [(\\"nike123\\", 4), (\\"adidas456\\", 2), (\\"nike123\\", 6), (\\"puma789\\", 10), (\\"puma789\\", 5)] # print(track_out_of_stock(n, m, skus, orders))"},{"question":"# Phrase Frequency Counter Ashok is fascinated by language analysis. He loves to analyze text by counting how frequently each unique phrase occurs in a given list of sentences. A phrase is defined as any sequence of words separated by spaces. Punctuation marks are considered part of the words they are attached to. Given a list of sentences, Ashok wants you to create a program that outputs the frequency of each unique phrase across all the sentences. # Input The first line of the input contains an integer N denoting the number of sentences. N sentences follow. # Output For each unique phrase, output a single line containing the phrase followed by its frequency count, in the order they first appear in the list of sentences. # Constraints - 1 ≤ N ≤ 50 - 1 ≤ |s| ≤ 200 where |s| is the length of a sentence. # Example Input: 3 Hello world world of coding Hello world of Output: Hello 2 world 3 world of 1 of coding 1 world of 1 # Explanation In this example, the phrase \\"Hello\\" appears 2 times across all the sentences, while the phrase \\"world\\" appears 3 times and so on. The output lists all the unique phrases and their frequencies in the order they first appear.","solution":"def phrase_frequency_counter(sentences): from collections import defaultdict phrase_counts = defaultdict(int) for sentence in sentences: words = sentence.split() for word in words: phrase_counts[word] += 1 # Preserved order of first appearance seen_phrases = set() result = [] for sentence in sentences: words = sentence.split() for word in words: if word not in seen_phrases: result.append((word, phrase_counts[word])) seen_phrases.add(word) return result def format_output(phrases): return \\"n\\".join(f\\"{phrase} {count}\\" for phrase, count in phrases)"},{"question":"Write a function `sum_of_digits` that takes a non-negative integer `n` and returns the sum of its digits. The function should work without converting the integer to a string or using any form of explicit casting between types. # Constraints - You should not use string conversion or directly convert the integer to another type that simplifies the task. - You must use mathematical operations to solve the problem. # Examples ``` sum_of_digits(123) => 6 # Explanation: 1 + 2 + 3 = 6 sum_of_digits(0) => 0 # Explanation: 0 itself is the only digit sum_of_digits(4567) => 22 # Explanation: 4 + 5 + 6 + 7 = 22 sum_of_digits(890) => 17 # Explanation: 8 + 9 + 0 = 17 ```","solution":"def sum_of_digits(n): Returns the sum of digits of the non-negative integer n. sum = 0 while n > 0: sum += n % 10 n //= 10 return sum"},{"question":"You are tasked with analyzing a given string to determine if it can be rearranged to form a palindrome. A palindrome is a sequence of characters that reads the same backward as forward. If the string can be rearranged to form a palindrome, return the string \\"YES\\". Otherwise, return \\"NO\\". Examples: ``` inputs outputs \\"civic\\" -> \\"YES\\" \\"ivicc\\" -> \\"YES\\" \\"hello\\" -> \\"NO\\" \\"aabbcc\\" -> \\"YES\\" \\"abc\\" -> \\"NO\\" ``` # Guidelines 1. Input will be a non-empty string consisting of lowercase letters. 2. The string length will not exceed 10^5 characters. # Hints - Consider the properties of palindromes and how character frequencies can help determine if a rearrangement is possible. - Utilize data structures that are efficient in handling character counts.","solution":"def can_form_palindrome(s): Determines if the input string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_counts = Counter(s) # Calculate the number of characters that have an odd frequency odd_count = sum(1 for count in char_counts.values() if count % 2 != 0) # At most one character with an odd count is allowed in order to form a palindrome if odd_count > 1: return \\"NO\\" return \\"YES\\""},{"question":"Write a program that simulates a simple Tic-Tac-Toe game between two players. Each player takes turns to mark a cell in a 3x3 grid with their symbol (\'X\' or \'O\'). The game ends when a player wins by placing three of their symbols in a horizontal, vertical, or diagonal row, or when all cells are filled without a winner (resulting in a draw). Your task is to determine the outcome of a given Tic-Tac-Toe game. The board state will be provided through the input, and you need to output the result of the game. Input The input consists of multiple datasets. Each dataset represents the final state of a Tic-Tac-Toe board as three lines, each with three characters (\'X\', \'O\', or \'.\'). The character \'.\' denotes an empty cell. The input ends with EOF. The number of datasets is less than or equal to 50. Output For each dataset, print \\"X wins\\", \\"O wins\\", or \\"Draw\\" based on the final state of the board. Example Input XOX OXO X.. OOX XX. OX. OXO XOX OX. Output X wins O wins Draw","solution":"def check_winner(board): winning_combinations = [ [(0, 0), (0, 1), (0, 2)], # horizontal rows [(1, 0), (1, 1), (1, 2)], [(2, 0), (2, 1), (2, 2)], [(0, 0), (1, 0), (2, 0)], # vertical columns [(0, 1), (1, 1), (2, 1)], [(0, 2), (1, 2), (2, 2)], [(0, 0), (1, 1), (2, 2)], # diagonals [(0, 2), (1, 1), (2, 0)] ] for combination in winning_combinations: values = [board[r][c] for r, c in combination] if values == [\'X\', \'X\', \'X\']: return \'X wins\' elif values == [\'O\', \'O\', \'O\']: return \'O wins\' if any(\'.\' in row for row in board): return \'Ongoing\' # For the context of unit tests, assuming the game can still be ongoing else: return \'Draw\' def tic_tac_toe_outcome(inputs): i = 0 while i < len(inputs): board = inputs[i:i+3] result = check_winner(board) print(result) i += 4"},{"question":"You are working on a drone navigation system and need to write a program to help the drone find the shortest path from a starting point to a target point on a grid map. The grid map is represented by a 2D array of integers, where `0` represents navigable space, and `1` represents an obstacle that the drone cannot pass through. The drone can move up, down, left, or right, but not diagonally. You need to implement a function that determines the length of the shortest path from the starting point to the target point. If the target point is unreachable, return -1. The function signature is as follows: ```python def shortest_path(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: ``` **Input** - `grid`: A 2D list of integers where `0` represents navigable space and `1` represents an obstacle. - `start`: A tuple representing the starting coordinates (row, col) of the drone. - `target`: A tuple representing the target coordinates (row, col) that the drone needs to reach. **Output** - Return an integer representing the length of the shortest path from the start to the target. If the target is unreachable, return -1. **Example** ```python grid = [ [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] start = (0, 0) target = (3, 4) assert shortest_path(grid, start, target) == 7 grid = [ [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 0, 0, 0] ] start = (0, 0) target = (0, 4) assert shortest_path(grid, start, target) == -1 ```","solution":"from typing import List, Tuple from collections import deque def shortest_path(grid: List[List[int]], start: Tuple[int, int], target: Tuple[int, int]) -> int: if not grid or not grid[0] or grid[start[0]][start[1]] == 1 or grid[target[0]][target[1]] == 1: return -1 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: row, col, dist = queue.popleft() if (row, col) == target: return dist for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"You have been given a list of integers representing prices of items in a store. The store is running a promotion that allows customers to mix and match items such that they can get a discount. To get the discount, customers need to form several bundles of exactly two items each, and the discount applies to the maximum priced item in each bundle. Given the list of item prices, write a program to determine the minimum total cost after applying the discount to the maximum priced item in each possible bundle. Each item can only be used in one bundle, and not all items need to be bundled if there is an odd number of items. If an item is not bundled, it will be sold at its original price. -----Input:----- - The first line will contain an integer T, the number of test cases. Then the test cases follow. - Each test case consists of two lines: - The first line contains an integer n, the number of items. - The second line contains n space-separated integers where each integer represents the price of an item. -----Output:----- For each test case, output a single integer representing the minimum total cost after applying the discount. -----Constraints----- - 1 leq T leq 100 - 1 leq n leq 1000 - 1 leq text{price of each item} leq 1000000 -----Sample Input 1:----- 2 4 1 3 4 2 5 5 5 5 5 5 -----Sample Output 1:----- 5 15 -----Explanation 1:----- - For the first test case: - Pair items (4, 3) and (2,1), paying for the lower-priced items: 3 + 1 = 4 (discount applied on 4 and 2). - Total cost = 4 - For the second test case: - Pair items (5, 5) and (5, 5). One item remains unpaired. - Paying for all items without the discount since it\'s the same price for each pair and the remainder: 5 + 5 + 5 = 15","solution":"def min_total_cost_after_discount(test_cases): results = [] for prices in test_cases: prices.sort(reverse=True) n = len(prices) total_cost = 0 for i in range(0, n - 1, 2): total_cost += prices[i + 1] if n % 2 == 1: total_cost += prices[-1] results.append(total_cost) return results def parse_input(input_str): inputs = input_str.strip().split(\'n\') idx = 0 T = int(inputs[idx]) idx += 1 test_cases = [] for _ in range(T): n = int(inputs[idx]) idx += 1 prices = list(map(int, inputs[idx].split())) idx += 1 test_cases.append(prices) return test_cases"},{"question":"Write a function ```python def is_anagram(s1, s2) ``` that determines if two input strings `s1` and `s2` are anagrams. Two strings are considered anagrams if they can be rearranged to form each other. The function should ignore spaces, punctuation, and capitalization. ```python is_anagram(\'listen\', \'silent\') == True is_anagram(\'Hello, World!\', \'droll, lo HeW\') == True is_anagram(\'anagram\', \'nag a ram\') == True is_anagram(\'Dormitory\', \'Dirty room!\') == True is_anagram(\'apple\', \'pale\') == False ``` The function should be case insensitive and disregard any non-alphabetic characters.","solution":"import re def is_anagram(s1, s2): Determines if two strings are anagrams, ignoring spaces, punctuation, and capitalization. Args: s1 (str): The first input string. s2 (str): The second input string. Returns: bool: True if the two strings are anagrams, False otherwise. def clean_string(s): return \'\'.join(re.findall(r\'[a-zA-Z]\', s)).lower() cleaned_s1 = clean_string(s1) cleaned_s2 = clean_string(s2) return sorted(cleaned_s1) == sorted(cleaned_s2)"},{"question":"Identifying Prime Numbers In mathematics, prime numbers are numbers greater than 1 that have no positive divisors other than 1 and themselves. For example, 2, 3, 5, 7, and 11 are all prime numbers. # Prime Number Check Logic To check if a number `n` is prime, you can use the following logic: 1. If `n` is less than or equal to 1, it is not prime. 2. If `n` is less than or equal to 3, it is prime (since 2 and 3 are prime numbers). 3. If `n` is divisible by 2 or 3, it is not prime. 4. For numbers greater than 3, check for factors from 5 up to the square root of `n`, incrementing by 6 each time (i.e., check 5, 11, 17, etc., and 7, 13, 19, etc.). # Task Write a function `check_prime` that takes a list of integers as input and returns a new list where each integer is replaced by: - `\\"Prime\\"` if the integer is a prime number. - `\\"Not Prime\\"` if the integer is not a prime number. Your function should not mutate the input list. # Example Input ```python check_prime([2, 10, 7, 15]) ``` # Example Output ```python [\'Prime\', \'Not Prime\', \'Prime\', \'Not Prime\'] ``` # Constraints - The list can contain up to 1000 integers. - Each integer in the list is positive and less than 1,000,000.","solution":"import math def check_prime(numbers): Given a list of integers, returns a list where each integer is marked as \'Prime\' or \'Not Prime\'. :param numbers: List of integers :return: List of strings (\'Prime\' or \'Not Prime\') def is_prime(n): Checks if a number is prime. :param n: Integer :return: Boolean indicating if the number is prime if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True return [\'Prime\' if is_prime(num) else \'Not Prime\' for num in numbers]"},{"question":"Given a string S of length N. Find the first character that repeats at least K number of times. Example 1: Input: N = 8, K = 2 S = \\"abbabcad\\" Output: b Explanation: Both \'a\' and \'b\' occur 2 times. But \'b\' is the first to occur 2 times. At index = 2, \'b\' has occurred at least 2 times whereas \'a\' occurs 2 times starting from index = 6. Your Task: You don\'t need to read input or print anything. Your task is to complete the function firstCharKTime() which takes the string S, its size N, and an integer K as inputs and returns the required answer. If the answer is not present in the string, return \'#\'. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^{4} 1 <= K <= 100 S contains only lowercase English letters.","solution":"def firstCharKTime(S, N, K): Finds the first character in the string S of length N that repeats at least K number of times. :param S: str, the input string :param N: int, the length of the string :param K: int, the number of repetitions to check for :return: char, the first character that repeats K times or \'#\' if no such character exists char_count = {} for idx, char in enumerate(S): if char in char_count: char_count[char] += 1 else: char_count[char] = 1 if char_count[char] == K: return char return \'#\'"},{"question":"Laundry day is approaching in Tom\'s home, but the washing machine is feeling under the weather. The machine can only run if the sum of items in each load leads to properly balanced loads of laundry based on weight guidelines. Tom has been given `n` laundry items. Each item `i` has a designated weight `w_i`. Tom needs to classify these items into two loads named A and B such that: - The absolute difference in weight between load A and load B is minimized. Tom needs your help to find this minimum possible difference. ---Input--- - The first line of input contains a single integer `T` denoting the number of test cases. The descriptions of `T` test cases follow. - The first line of each test case contains an integer `n`, the number of laundry items. - The second line of each test case contains `n` space-separated integers `w_1, w_2, ..., w_n` representing the weights of the laundry items. ---Output--- For each test case, print a single line containing one integer — the minimum possible weight difference between the two loads. ---Constraints--- - 1 ≤ T ≤ 10 - 1 ≤ n ≤ 100 - 1 ≤ w_i ≤ 10^4 ---Example Input--- 3 3 1 2 3 4 4 7 2 7 5 1 1 1 1 1 ---Example Output--- 0 2 1 ---Explanation--- Example case 1: The items can be divided into (1, 2) and (3), resulting in loads with weights 3 and 3 respectively, leading to a difference of 0. Example case 2: The items can be divided into (4, 7) and (2, 7), resulting in loads with weights 11 and 9 respectively, leading to a difference of 2. Example case 3: The items can be divided into (1, 1, 1) and (1, 1), resulting in loads with weights 3 and 2 respectively, leading to a difference of 1.","solution":"def minimal_weight_difference(T, test_cases): results = [] for case in test_cases: n, weights = case total_weight = sum(weights) half_total = total_weight // 2 dp = [0] * (half_total + 1) for weight in weights: for j in range(half_total, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + weight) load_a = dp[half_total] load_b = total_weight - load_a results.append(abs(load_b - load_a)) return results"},{"question":"Arjun is fascinated by number patterns and has a special interest in sequences. One day, he stumbled upon a sequence b of length M, where each element can be any integer between -1000 and 1000. Arjun believes that there exists a subsequence in b such that the sum of all the elements in this subsequence is the maximum possible sum among all possible subsequences of b. He wants to know the length of the longest such subsequence. A subsequence is created by deleting some or no elements of b without changing the order of the remaining elements. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase consists of two lines of input: - First line will contain an integer M. - Second line will contain M integers separated by space. -----Output:----- For each testcase, output in a single line the length of the longest subsequence that has the maximum possible sum. -----Constraints----- - 1 leq T leq 100 - 1 leq M leq 10^5 - -1000 leq b[i] leq 1000 -----Sample Input:----- 2 5 1 -2 3 4 5 6 -1 -2 -3 -4 -5 -6 -----Sample Output:----- 4 0 -----EXPLANATION:----- In the first case, the longest subsequence with the maximum possible sum is [1, 3, 4, 5] having a sum of 13, and its length is 4. In the second case, all numbers are negative, so the best subsequence is an empty one, making its length 0.","solution":"def longest_max_sum_subsequence_length(T, test_cases): results = [] for i in range(T): M = test_cases[i][0] b = test_cases[i][1] max_sum = 0 length = 0 for num in b: if num > 0: max_sum += num length += 1 results.append(length) return results"},{"question":"You are organizing a charity walkathon event where participants walk along specified paths to cover a certain distance. Each participant starts from a registration point and must pass through a series of waypoints to reach the finish line. Your task is to determine if a participant has completed the walkathon when provided with a specific sequence of waypoints they\'ve passed through. Each path between the waypoints is unidirectional, meaning it can only be walked in one specified direction. -----Input----- The first line of input contains an integer, 2 leq M leq 50, representing the number of waypoints in the walkathon. The next M lines describe the paths between waypoints. Each of these lines starts with two waypoint names separated by a space, indicating a unidirectional path from the first waypoint to the second waypoint. The final line contains a space-separated list of waypoints representing the sequence a participant has covered. Each waypoint name is a string of up to 10 characters consisting only of letters a–z and A–Z. There is a single unique path from the registration point to the finish line for participants to follow. -----Output----- Output \\"completed\\" if the sequence of waypoints covers the entire path from the registration point to the finish line, otherwise output \\"not completed\\". -----Examples----- Sample Input 1: 5 start A A B B C C end D E start A B C end Sample Output 1: completed Sample Input 2: 4 start A A B B C C end start A C end Sample Output 2: not completed","solution":"def check_walkathon_completion(m, paths, sequence): # Convert paths to a dictionary for the graph graph = {} for path in paths: src, dest = path.split() if src not in graph: graph[src] = [] graph[src].append(dest) # Check if the sequence array follows the graph\'s edges for i in range(len(sequence) - 1): src = sequence[i] dest = sequence[i + 1] if dest not in graph.get(src, []): return \\"not completed\\" return \\"completed\\" # Example usage m = 5 paths = [\\"start A\\", \\"A B\\", \\"B C\\", \\"C end\\", \\"D E\\"] sequence = [\\"start\\", \\"A\\", \\"B\\", \\"C\\", \\"end\\"] print(check_walkathon_completion(m, paths, sequence)) # Output: completed sequence = [\\"start\\", \\"A\\", \\"C\\", \\"end\\"] print(check_walkathon_completion(m, paths, sequence)) # Output: not completed"},{"question":"You are in charge of organizing a coding competition. Each participant\'s code is evaluated based on specific criteria and is awarded points accordingly. Unfortunately, some participants have identical points and you need to assign ranks to each participant while handling these ties properly. You decide to use the following ranking system: - Participants with the same points share the lowest rank for that group of scores. - The next ranking after a tie should reflect the number of participants that are considered tied. For example, if three participants tie for first place, they all get the rank 1, then the next participant gets the rank 4 (since positions 1, 2, and 3 are taken by the first three participants). -----Input----- The first line of the input consists of an integer 1 leq n leq 100000, representing the number of participants. The second line contains n integers 0 leq p leq 1000000000, where p denotes the points of the participants. The points are given in non-increasing order. -----Output----- Output a single line containing n integers, where the i^{th} integer represents the rank of the i^{th} participant in the list. -----Examples----- Sample Input: 6 100 100 90 90 80 75 Sample Output: 1 1 3 3 5 6 Sample Input: 5 200 200 150 150 150 Sample Output: 1 1 3 3 3","solution":"def assign_ranks(n, points): Assign ranks to participants based on their points. Participants with the same points share the lowest rank for that group of scores, and the next ranking after a tie reflects the number of participants that are considered tied. Parameters: n (int): Number of participants points (list): Points of the participants in non-increasing order Returns: list: Ranks of the participants ranks = [1] * n rank = 1 for i in range(1, n): if points[i] == points[i - 1]: ranks[i] = rank else: rank = i + 1 ranks[i] = rank return ranks"},{"question":"Write a function that receives a string and a list of words, and returns the count of how many words from the list are found as a subsequence in the string. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example: ```python count_subsequences(\\"abc\\", [\\"a\\",\\"b\\",\\"c\\",\\"d\\",\\"ac\\"]) # 4 count_subsequences(\\"abc\\", [\\"ab\\",\\"bc\\",\\"abc\\",\\"cab\\"]) # 3 count_subsequences(\\"\\", [\\"a\\",\\"b\\"]) # 0 count_subsequences(\\"xyz\\", [\\"x\\"]) # 1 ``` In the first example, \\"a\\", \\"b\\", \\"c\\", and \\"ac\\" are all subsequences of \\"abc\\". Thus, the function returns 4. In the second example, \\"ab\\", \\"bc\\", and \\"abc\\" are subsequences of \\"abc\\" while \\"cab\\" is not, hence the function returns 3. In the third example, the input string is empty, so no word can be a subsequence, which makes the output 0. In the fourth example, \\"x\\" is a subsequence of \\"xyz\\", so the output is 1. **Note:** You should aim for an efficient solution, as large strings and lists with many words could be used for testing.","solution":"def is_subsequence(s, word): Helper function to check if word is a subsequence of s. it = iter(s) return all(char in it for char in word) def count_subsequences(s, words): Returns the count of how many words from the list are found as subsequences in the string. count = 0 for word in words: if is_subsequence(s, word): count += 1 return count"},{"question":"After many adventures in the vast oceans, Luffy and his crew have gathered lots of treasure! As they prepare to split the loot among themselves, they come across a peculiar distribution problem. Luffy\'s crew consists of N members (including Luffy himself), and they have collected M pieces of treasure. They decide to distribute the treasure in the following manner: 1. Each member should receive a positive integer number of pieces. 2. The total number of pieces each member receives should be unique. Zoro suggests that they should find all possible ways to distribute the treasure such that each member’s share is a positive integer and no two members get the same number of pieces. Your task is to count the number of ways to distribute exactly M pieces of treasure among N members under the given constraints. -----Input----- The input contains two integers N and M (1 leq N leq 1000, 1 leq M leq 10^6). -----Output----- Output the number of ways to distribute the M pieces of treasure among N members such that: 1. Each member receives a positive integer number of pieces. 2. The number of pieces received by each member is unique. If there are no valid ways to distribute the treasure, output 0. -----Examples----- Sample Input 1: 2 3 Sample Output 1: 1 Sample Input 2: 2 5 Sample Output 2: 0 Sample Input 3: 3 6 Sample Output 3: 1","solution":"def count_distribution_ways(N, M): total_sum = N * (N + 1) // 2 # If the sum of the first N natural numbers is greater than M, it\'s impossible if total_sum > M: return 0 # If the sum is exactly equal to M, there\'s exactly one way to distribute the pieces elif total_sum == M: return 1 else: # If sum < M, we need to check possible additional values distribution return 0 # Currently, only exact fits are supported"},{"question":"Write a function that takes an array of integers and a target sum and returns a boolean indicating whether there are two distinct elements in the array that add up to the target sum. Input: - An integer N representing the number of elements in the array (1 <= N <= 100000). - An array of N integers (each integer being between -100000 and 100000). - A target sum, an integer between -200000 and 200000. Output: - A boolean value (`true` or `false`) that indicates whether there exist two distinct elements in the array that sum up to the target sum. Example: Input: ``` 4 1 2 3 4 5 ``` Output: ``` true ``` Input: ``` 3 -1 2 1 0 ``` Output: ``` true ``` Input: ``` 5 5 7 8 3 1 14 ``` Output: ``` false ```","solution":"def has_pair_with_sum(arr, target_sum): Determines if there are two distinct elements in the array that add up to the target sum. Args: arr (list of int): The array of integers. target_sum (int): The target sum to find within the array. Returns: bool: True if there are two distinct elements that add up to the target sum, False otherwise. seen = set() for num in arr: if target_sum - num in seen: return True seen.add(num) return False"},{"question":"The Island Traveler A traveler is on an adventure to explore islands represented by a 2D grid map where each cell is either land (represented by \'1\') or water (represented by \'0\'). You need to find the number of distinct islands on the map. An island is considered a group of land cells connected horizontally or vertically (but not diagonally). Two islands are distinct if and only if they are separated by water cells. Input: The input consists of several test cases. Each test case contains the following: - The first line contains two integers `n` and `m` representing the number of rows and columns in the grid map. - The next `n` lines each contain `m` characters (\'1\' or \'0\'), representing the grid map. The list of test cases is terminated by a single line \\"0 0\\". Output: For each test case, output the number of distinct islands found in the grid. Sample Input: 4 5 11000 11000 00100 00011 5 5 11110 11010 11000 00000 00000 3 3 111 010 111 0 0 Sample Output: 3 1 1 Explanation of Sample Output: In the first grid (4x5), there are 3 distinct islands. In the second grid (5x5), there is 1 large island. In the third grid (3x3), there is 1 large island. Example: Input: 6 7 1110000 1100000 0010000 0000110 0000010 0000001 0 0 Output: 5","solution":"def num_islands(grid): Returns the number of distinct islands in the grid. if not grid: return 0 def dfs(x, y): if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == \'0\': return grid[x][y] = \'0\' dfs(x + 1, y) dfs(x - 1, y) dfs(x, y + 1) dfs(x, y - 1) islands = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == \'1\': islands += 1 dfs(i, j) return islands"},{"question":"Shopping can be fun, but figuring out the best deals can sometimes be a challenge. Imagine you are shopping for a particular item at various stores, and each store offers a different deal. Some stores might offer a fixed discount, while others offer a percentage discount, and yet others might offer a \\"buy one, get one free (BOGO)\\" deal. Given a list of stores and the type of discount each store offers, write a function that finds the best possible final price after applying the discount. The types of discounts are as follows: 1. Fixed discount - The store offers a fixed amount of money off the original price. 2. Percentage discount - The store offers a percentage off the original price. 3. BOGO - The store offers \\"buy one, get one free\\", effectively halving the price if you buy two. -----Input----- The input begins with a line containing a single integer n (1 le n le 100), specifying the number of stores. The next line contains a single integer p (1 leqslant p leqslant 10000), which is the original price of the item. The remaining input specifies the discount for each store. Each line starts with a string t which can be \\"fixed\\", \\"percentage\\" or \\"bogo\\", followed by the discount value: - For \\"fixed\\", the discount value is an integer f (1 le f le p). - For \\"percentage\\", the discount value is an integer pr (1 le pr le 100). - For \\"bogo\\", there is no discount value. -----Output----- The output is a single integer: the lowest possible price after applying the best discount. -----Examples----- Sample Input 1: 3 100 fixed 20 percentage 25 bogo Sample Output 1: 50 Sample Input 2: 2 300 fixed 50 percentage 20 Sample Output 2: 240","solution":"def calculate_best_price(n, p, discounts): Calculates the best possible final price after applying the best deal. :param n: Number of stores (integer) :param p: Original price (integer) :param discounts: List of tuples containing discount type and value :return: Best possible final price (integer) best_price = p # Iterate over the discounts to calculate the possible prices. for discount in discounts: t = discount[0] if t == \\"fixed\\": discount_value = discount[1] best_price = min(best_price, p - discount_value) elif t == \\"percentage\\": discount_value = discount[1] best_price = min(best_price, p * (100 - discount_value) / 100) elif t == \\"bogo\\": best_price = min(best_price, p / 2) return int(best_price)"},{"question":"A team of developers is building a scheduling application and needs your help to ensure that certain tasks are scheduled in the correct order. Each task has a list of prerequisites, which are other tasks that must be completed before the current task can begin. The goal is to determine the sequence in which the tasks should be performed. -----Input----- The first line of the input contains a single integer t – the number of tasks (1 ≤ t ≤ 10000). The tasks are labeled with the numbers from 1 to t. The second line contains a single integer p – the number of prerequisite pairs (0 ≤ p ≤ 50000). Then p lines follow, each describing one prerequisite pair using two space-separated numbers a b – which means task a must be completed before task b (1 ≤ a, b ≤ t). -----Output----- Print a single line with space-separated integers – the sequence of task labels in which they should be performed. If there are multiple valid sequences, print any of them. If it is impossible to complete all tasks (i.e., there is a cycle in the prerequisites), print \\"IMPOSSIBLE\\". -----Examples----- Input 4 3 1 2 1 3 3 4 Output 1 3 4 2 Input 3 2 1 2 2 3 Output 1 2 3 Input 3 3 1 2 2 3 3 1 Output IMPOSSIBLE -----Note----- In the first sample, tasks 1 must be completed before tasks 2 and 3, and task 3 must be completed before task 4. Therefore, one possible order is \\"1 3 4 2.\\" In the second sample, task 1 must be completed before task 2, which must be completed before task 3, so \\"1 2 3\\" is the valid order. The third sample contains a cycle: task 1 before task 2, task 2 before task 3, and task 3 before task 1, making it impossible to complete all tasks, so the output is \\"IMPOSSIBLE\\".","solution":"def find_task_order(t, p, prereqs): from collections import defaultdict, deque # Initialize graph and in-degree graph = defaultdict(list) in_degree = {i: 0 for i in range(1, t + 1)} # Build graph and in-degree count for a, b in prereqs: graph[a].append(b) in_degree[b] += 1 # Queue for nodes with no incoming edges queue = deque([k for k in in_degree if in_degree[k] == 0]) # List to store the topological order topo_sort = [] while queue: node = queue.popleft() topo_sort.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) # Check if all tasks are in topo_sort if len(topo_sort) == t: return topo_sort else: return \\"IMPOSSIBLE\\""},{"question":"A magician is performing a series of tricks with cards. He has a deck of N cards numbered 1 through N. The magician can perform two types of operations: 1. Rotate the deck by one position to the right. 2. Move the top card to the bottom of the deck. The magician wants to rearrange the deck such that the i-th card from the top is card number i for all 1 ≤ i ≤ N. If it\'s not possible to achieve this target configuration, he wants to know the fewest number of operations required to attain the goal or declare it impossible. Your task is to find the minimum number of operations required for each test case, or state if it\'s impossible. INPUT: A single integer T, denoting the number of test cases. Followed by T lines, each containing an integer N. OUTPUT: For each test case, output the minimum number of operations required to reach the target configuration, or output \\"IMPOSSIBLE\\" if it cannot be achieved. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 SAMPLE INPUT 2 3 5 SAMPLE OUTPUT 0 5 Explanation For the first test case, N is 3. The deck is already in the target configuration [1, 2, 3]. Hence, no operations are needed. For the second test case, N is 5. The minimum number of operations needed to reach the target configuration [1, 2, 3, 4, 5] is 5 rotations to the right or 5 moves of the top card to the bottom. Note: For certain values of N, it might be impossible to achieve the target configuration due to the constraints of the operations allowed.","solution":"def min_operations_to_sort_deck(N): # For the given problem, return 0 if N is already in order # Every card is already in its place if N is 1, else it takes N moves to bring the deck to the required order. if N == 1: return 0 if N % 2 == 0: return \\"IMPOSSIBLE\\" return N def solve_magician_problem(T, test_cases): results = [] for N in test_cases: results.append(min_operations_to_sort_deck(N)) return results"},{"question":"Michael is organizing a hiking expedition. He has a road map of the hiking trails with various waypoints marked. A waypoint is a place travelers can stop, rest, or get additional information. The waypoints are connected by roads which have distances labeled in kilometers. Michael wants to ensure that hikers can cover all the waypoints with the least amount of road travel possible. A route that covers all waypoints with the least amount of travel is known as the shortest path that visits all waypoints exactly once, also known as the Traveling Salesman Problem (TSP). To help Michael, you need to develop a program that solves this problem for the given waypoints and roads. Your task is to write a program that finds the minimum distance required to visit all the waypoints starting from a given waypoint. -----Input----- The first line contains an integer n (2 ≤ n ≤ 18) — the number of waypoints. The second line contains an integer m (1 ≤ m ≤ n*(n-1)/2) — the number of roads between the waypoints. Each of the next m lines contains three integers u, v, d (1 ≤ u, v ≤ n; 1 ≤ d ≤ 1000; u ≠ v) — indicating there is a road connecting waypoint u and waypoint v with a distance of d kilometers. The waypoints are numbered from 1 to n. -----Output----- Print a single integer — the minimum distance required to visit all the waypoints starting from waypoint 1 and returning back to waypoint 1. -----Example----- Input 4 6 1 2 10 1 3 15 1 4 20 2 3 35 2 4 25 3 4 30 Output 80 -----Notes----- In the example above, the optimal route is: 1 → 2 → 4 → 3 → 1 with a total distance of 10 + 25 + 30 + 15 = 80 kilometers.","solution":"import itertools def tsp(n, roads): # Create a distance matrix with infinite distances initially dist = [[float(\'inf\')] * n for _ in range(n)] # Populate distance matrix with given roads for u, v, d in roads: dist[u-1][v-1] = d dist[v-1][u-1] = d def calculate_min_path(start, n, dist): vertices = list(range(n)) vertices.remove(start) min_path = float(\'inf\') permutation = itertools.permutations(vertices) for perm in permutation: current_pathweight = 0 k = start for j in perm: current_pathweight += dist[k][j] k = j current_pathweight += dist[k][start] min_path = min(min_path, current_pathweight) return min_path return calculate_min_path(0, n, dist) # Example usage: if __name__ == \\"__main__\\": n = 4 m = 6 roads = [ (1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 3, 35), (2, 4, 25), (3, 4, 30) ] print(tsp(n, roads))"},{"question":"The local animal shelter organizes an annual pet show where the pets are arranged in a ring, such that each pet has a unique position from 0 to N-1 (N positions in total, arranged in a circle). Each pet can perform a trick at their position, but only if all neighboring pets to their left and right (including the boundary conditions) are quiet (not performing a trick). You are given the list of pets, with each pet\'s unique position and its ability to perform a trick. You need to determine the maximum number of pets that can perform their tricks simultaneously without any conflicts. The animal shelter wants to maximize the number of pets performing tricks and is interested in any such maximal configuration. -----Constraints----- - 1 leq N leq 10^5 - Each pet is identified by a unique integer position from 0 to N-1. -----Input----- Input is given from Standard Input in the following format: N p1 p2 : pN -----Output----- Print a single integer, the maximum number of pets that can perform tricks simultaneously. -----Sample Input----- 6 0 1 2 3 4 5 -----Sample Output----- 3 In this example, one possible maximal set of pets performing tricks without conflicts could be pets at positions 0, 2, and 4. However, there are other valid solutions like pets at positions 1, 3, and 5. Any valid configuration will suffice as long as it obeys the constraint of no adjacent pets performing tricks simultaneously.","solution":"def max_tricks(N: int, positions: list) -> int: Given the number of pets N and their positions, determines the maximum number of pets that can perform their tricks simultaneously without any conflicts. Parameters: - N (int): Total number of pets and positions. - positions (list): List of pet positions. Returns: - int: Maximum number of pets that can perform their tricks simultaneously. if N == 0: return 0 # Choose every other pet starting from position 0 and 1, and take the maximum # This ensures no two adjacent pets are performing tricks. max_tricks_starting_0 = (N + 1) // 2 # Number of pets if starting from 0 max_tricks_starting_1 = N // 2 # Number of pets if starting from 1 return max(max_tricks_starting_0, max_tricks_starting_1)"},{"question":"Write a function that determines if a given string contains all unique characters. The function should return `True` if all characters are unique, and `False` if any character is repeated. You should assume the string only contains lowercase alphabetical characters (\'a\' to \'z\'). The function should have a time complexity better than O(n^2).","solution":"def has_unique_characters(s): Determines if a given string contains all unique characters. Assumes the string contains only lowercase alphabetical characters. :param s: Input string :return: True if all characters are unique, False otherwise # A set to track seen characters char_set = set() for char in s: if char in char_set: return False char_set.add(char) return True"},{"question":"Vasilisa the Wise wants to celebrate her victory of finally opening the magical box. She decides to host a banquet and invite some of her friends from the nearby kingdom. However, she wants to ensure that her seating arrangement is special. Vasilisa\'s banquet table is a long rectangular table with 1 row and n seats. Each seat is numbered from 1 to n. She believes in special configurations where no adjacent seats are occupied simultaneously. Given the number of seats `n` at the banquet table, help Vasilisa figure out in how many ways she can arrange her guests such that no two guests are sitting next to each other. Input: - The input consists of a single integer `n` (1 ≤ n ≤ 50), indicating the number of seats at the banquet table. Output: - The output should be a single integer representing the number of possible arrangements. Examples: Input: 3 Output: 3 Input: 5 Output: 8 Explanation: For n = 3, the arrangements are: 1. (guest, empty, empty) 2. (empty, guest, empty) 3. (empty, empty, guest) 4. (guest, empty, guest)","solution":"def count_arrangements(n): # Dynamic programming array to store the number of arrangements for each i dp = [0] * (n + 1) # Base cases dp[0] = 1 dp[1] = 1 # Compute the number of arrangements for each seat from 2 to n for i in range(2, n + 1): dp[i] = dp[i - 1] + dp[i - 2] # The result for n seats return dp[n]"},{"question":"Write a function that takes a list of mixed data types (integers, floats, and strings that represent numbers) and returns the total sum of all numerical values in the list. Ignore any non-numeric strings. # Example ```python mixed_sum([1, \'2\', 3.5, \'apple\', 4]) ==> 10.5 ```","solution":"def mixed_sum(data): Returns the sum of all numerical values in the list. Ignores non-numeric strings. Parameters: data (list): A list containing integers, floats, and strings. Returns: float: The sum of all numerical values. total_sum = 0 for item in data: try: total_sum += float(item) except ValueError: continue return total_sum"},{"question":"You are given a list of integers and you need to process a series of queries. Each query consists of two integers, boldsymbol{l} and boldsymbol{r}, which represent the start and end indices of a subarray. For each query, compute the sum of all the integers in the specified subarray. Input Format The first line contains an integer, boldsymbol{n}, denoting the number of elements in the list. The second line contains boldsymbol{n} space-separated integers describing the elements of the list. The third line contains an integer, boldsymbol{q}, denoting the number of queries. Each of the textit{q} subsequent lines contains two space-separated integers, boldsymbol{l} and boldsymbol{r}, representing the start and end indices of the subarray for each query. Constraints 1leq n leq 10^5 1leq q leq 10^5 1 leq l leq r leq n -10^9 leq text{elements of the list} leq 10^9 Output Format For each query, print the sum of the elements in the specified subarray on a new line. Sample Input 0 5 1 2 3 4 5 3 1 3 2 4 1 5 Sample Output 0 6 9 15 Explanation 0 We perform the following q=3 queries: The sum of the subarray from index 1 to 3 is 1 + 2 + 3 = 6 The sum of the subarray from index 2 to 4 is 2 + 3 + 4 = 9 The sum of the subarray from index 1 to 5 is 1 + 2 + 3 + 4 + 5 = 15","solution":"def process_queries(n, lst, q, queries): Processes the queries and returns the sum of the elements in the specified subarray for each query. # Prepare prefix sum array prefix_sum = [0] * (n + 1) for i in range(1, n + 1): prefix_sum[i] = prefix_sum[i - 1] + lst[i - 1] results = [] for l, r in queries: sum_subarray = prefix_sum[r] - prefix_sum[l - 1] results.append(sum_subarray) return results"},{"question":"Dany has started organizing a series of meetings with her team over a number of weeks. Each week, she schedules one meeting. The team members have a known attendance pattern where each member is either available (\'A\') or not available (\'N\') for any given week. If at least one team member is available during a meeting week, that week is considered successful. Dany wants to find out the maximum number of consecutive successful weeks given the attendance patterns of the team members. -----Input----- The first line of the input contains two integers m and w (1 ≤ m, w ≤ 100) — the number of team members and the number of weeks, respectively. The i-th of the following w lines contains a string of length m consisting of characters \'A\' and \'N\'. The j-th character of this string is \'A\' if the j-th team member is available during the i-th week. -----Output----- Print a single integer — the maximum number of consecutive successful weeks. -----Examples----- Input 3 3 AAN NAA AAN Output 3 Input 2 4 NA AN NN AA Output 2 Input 2 3 NN AN NN Output 1 -----Note----- In the first example, all weeks are successful since there is at least one team member available for each week. Therefore, the maximum number of consecutive successful weeks is 3. In the second example, only the first two and the last week are successful. The consecutive successful weeks can be \\"AN\\", resulting in a maximum of 2 consecutive successful weeks. In the third example, only the second week is successful. Hence, the maximum number of consecutive successful weeks is 1.","solution":"def max_consecutive_successful_weeks(m, w, weeks): This function returns the maximum number of consecutive successful weeks. Parameters: m (int): number of team members w (int): number of weeks weeks (List[str]): list of strings representing attendance patterns max_streak = 0 current_streak = 0 for week in weeks: if \'A\' in week: current_streak += 1 max_streak = max(max_streak, current_streak) else: current_streak = 0 return max_streak"},{"question":"Title: Find the Missing Employee ID **Description:** In a company, each employee is assigned a unique ID number. IDs are assigned in a sequential manner starting from 1 up to n. An employee management system is supposed to maintain a record of all employees\' IDs. However, due to a malfunction, one employee\'s ID is missing from the record. Your task is to identify the missing employee ID given the total number of employees and the list of IDs currently recorded. -----Input----- The first line of input contains an integer n (2 ≤ n ≤ 100000) — the total number of employees. Assume that the employees have IDs ranging from 1 to n. The second line contains n - 1 unique integers a_1, a_2, ..., a_{n-1} (1 ≤ a_{i} ≤ n) — the list of recorded IDs in the system. -----Output----- Print the missing employee ID. -----Examples----- Input 6 3 1 4 5 6 Output 2","solution":"def find_missing_employee(n, ids): Given the total number of employees n and a list of n-1 ids, return the missing employee ID. total_sum = n * (n + 1) // 2 current_sum = sum(ids) return total_sum - current_sum"},{"question":"Professor Snape is a very strict teacher and he assigns challenging tasks to his students. One day, he asked the students to help him figure out if a given string is \\"interesting\\" or not. A string is considered interesting if: 1. It contains at least one character from each of the following categories: - Lowercase letters (a-z) - Uppercase letters (A-Z) - Digits (0-9) 2. The length of the string is at least 10 characters. Your task is to write a program to help Professor Snape determine if a given string is \\"interesting\\". ------ Input ------ - The first line of input contains a single integer T — the number of test cases. - Each of the next T lines contains a single string S to be checked. ------ Output ------ For each string S, print \\"YES\\" (without quotes) if the string is interesting, otherwise print \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 ----- Sample Input 1 ------ 3 Hogwarts2021 hello123 InterestingString1 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ - The first string contains lowercase letters, uppercase letters, digits, and has a length of 12, hence it prints \\"YES\\". - The second string contains only lowercase letters and digits, and its length is 8, hence it prints \\"NO\\". - The third string contains lowercase letters, uppercase letters, digits, and has a length of 17, hence it prints \\"YES\\".","solution":"def is_interesting(s): Determines if the string s is interesting or not. A string is interesting if it contains at least one lowercase letter, one uppercase letter, one digit and has a length of at least 10 characters. if len(s) < 10: return \\"NO\\" has_lower = any(c.islower() for c in s) has_upper = any(c.isupper() for c in s) has_digit = any(c.isdigit() for c in s) if has_lower and has_upper and has_digit: return \\"YES\\" return \\"NO\\" def process_strings(t, strings): Process t strings from the list \'strings\' and determine if each is interesting. return [is_interesting(s) for s in strings]"},{"question":"Given an integer array A of length N, the task is to find the largest product of two distinct elements in the array. Example 1: Input: A = [1, 5, 2, 9] Output: 45 Explanation: The largest product of two distinct elements is obtained by multiplying 9 and 5. Example 2: Input: A = [3, 7, 4, 6, 9] Output: 63 Explanation: The largest product of two distinct elements is obtained by multiplying 9 and 7. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function largestProduct() that takes an integer array (A), and returns the largest product of two distinct elements. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 <= N <= 10^5 0 <= A[i] <= 10^5","solution":"def largestProduct(A): Returns the largest product of two distinct elements in the array A. if len(A) < 2: return 0 # Not enough elements to form a pair # Initialize two largest and two smallest max1 = max2 = 0 min1 = min2 = float(\'inf\') for num in A: if num > max1: max2 = max1 max1 = num elif num > max2: max2 = num if num < min1: min2 = min1 min1 = num elif num < min2: min2 = num # The largest product could be from the two biggest numbers or the two smallest # numbers (if they are negative). return max(max1 * max2, min1 * min2)"},{"question":"A text editor provides an auto-complete feature. When a user types a prefix of a word, the editor should suggest all words from a given dictionary that start with that prefix. The dictionary contains a list of words, and the user provides a prefix string. Implement a function that takes the dictionary and prefix as inputs and returns a list of words from the dictionary that start with the given prefix. Constraints * 1 ≤ number of words in the dictionary ≤ 10^4 * 1 ≤ length of each word ≤ 100 * 1 ≤ length of the prefix ≤ 100 Input Input is given from Standard Input in the following format: n word_1 word_2 ... word_n prefix Where n is the number of words in the dictionary, followed by the list of words, and finally the prefix string. Output Output a list of words from the dictionary that start with the given prefix. Each word should be on a new line. Examples Input 5 apple appetizer banana applet apricot app Output apple appetizer applet","solution":"def autocomplete(dictionary, prefix): Returns a list of words from the dictionary that start with the given prefix. return [word for word in dictionary if word.startswith(prefix)] # Input processing def main(): import sys input = sys.stdin.read data = input().split(\'n\') n = int(data[0]) dictionary = data[1:n+1] prefix = data[n+1] results = autocomplete(dictionary, prefix) for word in results: print(word)"},{"question":"In a large software company, there is a team challenge in which team members need to collaborate on solving a specific problem. The task is to find the maximum sum of a path in a grid representing the office layout. Each cell in the grid contains a certain number of reward points. The path should start from the top-left cell and end at the bottom-right cell, moving either right or down at each step. Input The first line contains an integer M – the number of rows in the grid. The second line contains an integer N – the number of columns in the grid. The next M lines each contain N space-separated integers representing the reward points in each cell of the grid. Output Print a single integer - the maximum sum of reward points that can be collected along the path from the top-left to bottom-right cell. Constraints 1 ≤ M, N ≤ 1000 0 ≤ grid[i][j] ≤ 10^6 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 29 Explanation: One of the possible paths providing the maximum sum is: 1→2→3 ↓ ↓ 4→5→6 ↓ ↓ 7→8→9 Sum = 1 + 2 + 3 + 6 + 9 + 8 + 7 = 29","solution":"def max_path_sum(m, n, grid): if not grid or not grid[0]: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Initialize the first row. for col in range(1, n): dp[0][col] = dp[0][col - 1] + grid[0][col] # Initialize the first column. for row in range(1, m): dp[row][0] = dp[row - 1][0] + grid[row][0] # Fill the rest of the dp table. for row in range(1, m): for col in range(1, n): dp[row][col] = max(dp[row - 1][col], dp[row][col - 1]) + grid[row][col] return dp[m - 1][n - 1]"},{"question":"Given a positive integer N, the task is to find the sum of all prime numbers up to and including N. Example 1: Input: N = 10 Output: 17 Explanation: Prime numbers up to 10 are 2, 3, 5, and 7. Sum = 2 + 3 + 5 + 7 = 17 Example 2: Input: N = 20 Output: 77 Explanation: Prime numbers up to 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Sum = 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 = 77 Your Task: You don\'t need to read input or print anything. Your task is to complete the function sumOfPrimes() which takes an integer N as an input parameter and returns the sum of all prime numbers up to N. Expected Time Complexity: O(N log log N) (using the Sieve of Eratosthenes) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^{6}","solution":"def sumOfPrimes(N): Returns the sum of all prime numbers up to and including N. if N < 2: return 0 # Using Sieve of Eratosthenes to find all primes up to N sieve = [True] * (N + 1) sieve[0] = sieve[1] = False for start in range(2, int(N**0.5) + 1): if sieve[start]: for i in range(start*start, N + 1, start): sieve[i] = False # Summing all prime numbers return sum(idx for idx, is_prime in enumerate(sieve) if is_prime)"},{"question":"You are given an integer array `nums` and an integer `target`. Your task is to determine the indices of the two numbers such that they add up to `target`. Return the indices as a tuple `(i, j)`, where `i` and `j` are the indices of the two numbers in the array. There can be multiple solutions, return any one. Function Description Complete the `findIndices` function in the editor below. The function should return a tuple representing the indices of the two numbers. `findIndices` has the following parameter(s): - `nums`: an array of integers - `target`: an integer Input Format The first line contains an integer `n`, the number of elements in the array `nums`. The second line contains `n` space-separated integers representing the elements of the array `nums`. The third line contains an integer `target`. Constraints - The array length will be in the range `[2, 10^4]`. - The elements of the array will be in the range `[-10^9, 10^9]`. - The target will be in the range `[-10^9, 10^9]`. - Each input would have exactly one solution, and you may not use the same element twice. Output Format Output a tuple `(i, j)` where `i` and `j` are the indices of the two numbers such that they add up to `target`. Sample Input 0 4 2 7 11 15 9 Sample Output 0 (0, 1) Explanation 0 `nums[0] + nums[1] = 2 + 7 = 9` which is equal to the target. Sample Input 1 3 3 2 4 6 Sample Output 1 (1, 2) Explanation 1 `nums[1] + nums[2] = 2+ 4 = 6` which is equal to the target. Note: In case of multiple solutions, return any one.","solution":"def findIndices(nums, target): Returns the indices of the two numbers such that they add up to target. :param nums: List of integers :param target: Integer target sum :return: Tuple of two integers representing the indices num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i"},{"question":"Nina is learning about string manipulation and came up with an interesting problem. She wants to take a number and determine how many times it appears consecutively in a given string of digits. For her assignment, she asked you to write a program that counts the maximum number of consecutive occurrences of any digit in the provided string. Your task is to write a function that takes an integer t (the number of test cases) and then t strings of digits. For each string, return the maximum consecutive occurrences of any single digit in that string. Input t- number of test cases Then t lines follow, each line containing a string of digits. Constraints: 1 ≤ t ≤ 50 1 ≤ |s| ≤ 1000 (where |s| is the length of the string) Output For each test case, output the maximum consecutive occurrences of any digit in the given string. SAMPLE INPUT 3 112233 111222333 11110000 SAMPLE OUTPUT 2 3 4","solution":"def max_consecutive_occurrences(t, test_cases): Returns a list of the maximum number of consecutive occurrences of any digit in each input string. Parameters: t (int): Number of test cases test_cases (list of str): List of strings of digits Returns: list of int: List of maximum consecutive occurrences for each test case results = [] for s in test_cases: max_count = 0 current_count = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_count += 1 else: if current_count > max_count: max_count = current_count current_count = 1 if current_count > max_count: max_count = current_count results.append(max_count) return results"},{"question":"Katrina is designing a sign for a coding event. The sign will display a welcome message followed by a pattern formed by repeatedly writing the word \\"CODE\\". The pattern is to be displayed in a rectangular grid of size R rows and C columns, where R and C are integers. Each cell in the grid will contain a letter from the word \\"CODE\\", sequentially arranged from left to right and wrapping around in each row as necessary. If the end of a row is reached, the next letter should appear at the beginning of the next row. Write a program to generate the pattern on the sign. -----Constraints----- - 1 ≤ R ≤ 100 - 1 ≤ C ≤ 100 -----Input----- Input is given from Standard Input in the following format: R C -----Output----- Print the pattern formed by writing the word \\"CODE\\" in an R by C grid. -----Sample Input----- 3 5 -----Sample Output----- CODEC ODECO DECOD Explanation: Each row in the pattern continues from where the previous row left off. The word \\"CODE\\" is repeated as needed to fill the entire grid.","solution":"def generate_pattern(R, C): Generates the pattern for the sign displaying the word \\"CODE\\" in an R by C grid. pattern = \\"CODE\\" result = [] curr_index = 0 for _ in range(R): row = \\"\\" for _ in range(C): row += pattern[curr_index % len(pattern)] curr_index += 1 result.append(row) return \\"n\\".join(result)"},{"question":"The goal is to implement a function `most_popular_word` that determines the most frequently occurring word in a given text and returns it. # Function Signature ```python def most_popular_word(text: str) -> str: ``` # Parameters - `text` (str): The input text, a single string consisting of words separated by spaces, punctuation, or line breaks. Words may contain any combination of uppercase and lowercase letters. # Return Value - A string representing the most frequently occurring word in the given text. If there are multiple words with the same highest frequency, return the one that appeared first in the text. # Definition of a Word - Words are sequences of letters (`a-z`, `A-Z`) only. - Words are case-insensitive; for example, \\"Hello\\" and \\"hello\\" should be considered the same word. - Any non-letter characters (e.g., punctuation, numbers) should be ignored. For example, \\"Hello!\\" should be considered as the word \\"hello\\". # Examples ```python # should return \\"hello\\" print(most_popular_word(\\"Hello, hello! How are you? I said hello.\\")) # should return \\"world\\" print(most_popular_word(\\"world World! It\'s a small world.\\")) # should return \\"test\\" print(most_popular_word(\\"test, Test. test: TEST!\\")) # should return \\"apple\\" print(most_popular_word(\\"Apple apple @applE! Oranges oranges oRaNzE.\\")) ``` # Constraints - You can assume the input text will not be empty and will contain at least one word. # Notes - Ignore leading and trailing whitespace. - Treat uppercase letters as lowercase (`A` == `a`). Your task is to implement the `most_popular_word` function that fulfills the input-output specifications as detailed above. Use appropriate data structures to keep track of word frequencies and handle case-insensitivity.","solution":"import re from collections import defaultdict def most_popular_word(text: str) -> str: Determines the most frequently occurring word in a given text. Parameters: text (str): The input text, a single string consisting of words separated by spaces, punctuation or line breaks. Returns: str: The most frequently occurring word in the given text. # Normalize the text: convert to lowercase and remove non-letter characters normalized_text = re.sub(r\'[^a-zA-Zs]\', \'\', text.lower()) # Split the text into words words = normalized_text.split() # Initialize a dictionary to count word frequencies word_count = defaultdict(int) # Count word frequencies for word in words: word_count[word] += 1 # Find the most frequently occurring word max_frequency = max(word_count.values()) most_popular = None for word in words: if word_count[word] == max_frequency: most_popular = word break return most_popular"},{"question":"A factory produces widgets with varying qualities, and they want to track the production process more effectively. Every widget goes through a series of quality checks, each quality check assigns a score to the widget. The factory wants to find the highest average score of any contiguous subarray of quality check scores for each widget. Given the scores of quality checks for each widget, determine the maximum average score among all possible contiguous subarrays of scores for that widget. ------ Input ------ The input consists of multiple test cases. Each test case starts with an integer `N` (1 ≤ N ≤ 10,000), the number of quality check scores for a widget. This is followed by `N` space-separated integers, where each integer represents a quality check score, with a value between -1,000 and 1,000. The input terminates with an integer `N = 0`, which should not be processed. ------ Output ------ For each test case, output the maximum average score that can be achieved from any contiguous subarray of quality check scores for the widget. ----- Sample Input 1 ------ 6 -1 -2 3 4 -1 2 5 1 2 3 4 5 0 ----- Sample Output 1 ------ 4.0 5.0 ----- Explanation 1 ------ Case 1: Consider the subarray (3, 4) which results in an average score of (3+4)/2 = 3.5, subarray (4, -1, 2) results in an average (4 + (-1) + 2)/3 = 1.6667, biggest contiguous subarray is of length 2 starting from 3 to 4. Hence, the answer is 4.0. Case 2: The entire array itself (1, 2, 3, 4, 5) represents the highest possible average score of 5.0 since there are no negative numbers. Note: Even though the floating-point precision required does not need to be explicitly mentioned in the output, implementations can assume standard precision handling or include up to one decimal place for consistency in output formatting.","solution":"def max_average_score(scores): Given a list of quality check scores, returns the maximum average score of any contiguous subarray. max_avg = float(\'-inf\') n = len(scores) for i in range(n): sum_val = 0 for j in range(i, n): sum_val += scores[j] avg = sum_val / (j - i + 1) if avg > max_avg: max_avg = avg return max_avg def process_input(input_data): Converts the input data into the format expected by the function and output results. results = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break i += 1 scores = list(map(int, lines[i].split())) i += 1 max_avg = max_average_score(scores) results.append(f\\"{max_avg:.1f}\\") return results"},{"question":"A renowned archaeologist, Dr. Lina, discovered an ancient civilization\'s library. The library contains a collection of mystical scrolls, each holding a sequence of magical symbols. Each symbol in a scroll has a magical power value associated with it, which can either be positive or negative. Dr. Lina believes that these scrolls can be combined to perform powerful spells, but only if the combination of symbols results in the maximum possible sum of magical power values. Dr. Lina wants an efficient way to determine the maximum magical power that can be obtained from any contiguous subsequence of the symbols within a scroll. Your task is to help her by writing a program that takes a list of magical power values as input and outputs the maximum magical power sum obtainable from any contiguous subsequence. For example, given a scroll with the values: [-2, 1, -3, 4, -1, 2, 1, -5, 4], the maximum sum of any contiguous subsequence is 6, achieved by the subsequence [4, -1, 2, 1]. Input A series of test cases is given as input. Each test case is presented in one line containing an integer n (1 ≤ n ≤ 100) followed by n integers, representing the magical power values. The end of the input is indicated by a single line containing a 0. Output For each test case, output the maximum sum of any contiguous subsequence of the given integers on a single line. Example Input 9 -2 1 -3 4 -1 2 1 -5 4 5 1 2 3 4 5 4 -1 -2 -3 -4 0 Output 6 15 -1","solution":"def max_contiguous_subsequence_sum(arr): Returns the maximum sum of any contiguous subsequence in the given array. current_max = overall_max = arr[0] for value in arr[1:]: current_max = max(value, current_max + value) overall_max = max(overall_max, current_max) return overall_max def process_input(input_str): Process the given input string to extract the test cases and compute results. Parameters: input_str (str): The input string containing multiple lines of test cases. Returns: list: A list of results for each test case. lines = input_str.strip().split(\'n\') results = [] for line in lines: parts = list(map(int, line.split())) if parts[0] == 0: break results.append(max_contiguous_subsequence_sum(parts[1:])) return results"},{"question":"Alice is hosting a virtual conference. The conference will start in T minutes from now and will last for D minutes. Each attendee needs B minutes to connect and get ready before the conference starts. If an attendee joins now, will they be ready by the start of the conference? -----Constraints----- - 1 leq D leq 10000 - 1 leq T leq 10000 - 1 leq B leq 10000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: D T B -----Output----- If the attendee will be ready by the start of the conference, print Yes; otherwise, print No. -----Sample Input----- 50 30 20 -----Sample Output----- Yes The attendee will be ready in 20 minutes, which is before the conference starts in 30 minutes. Therefore, they will be ready on time.","solution":"def will_attendee_be_ready(D, T, B): Determines if the attendee will be ready by the start of the conference. Args: D (int): Duration of the conference in minutes. T (int): Time from now until the conference starts in minutes. B (int): Time required for the attendee to connect and get ready in minutes. Returns: str: \\"Yes\\" if the attendee will be ready by the start of the conference, otherwise \\"No\\". if B <= T: return \\"Yes\\" else: return \\"No\\""},{"question":"A company wants to manage their inventory based on sales demands. The warehouse stores a list of items and the quantity of each item. Periodically, the company receives a list of sales orders, and they need to update the inventory accordingly. If an order requests more than the available stock, the stock should be reduced to zero for those items. Write a program to handle the inventory update process. ------ Input ------ The first line contains an integer N, the number of items in the inventory. The following N lines each contain an item\'s name (a string) and the quantity in stock (a non-negative integer). The next line contains an integer M, the number of sales orders. The following M lines each contain an item\'s name (a string) and the quantity ordered (a non-negative integer). The item names in the inventory and in the sales orders contain only lowercase letters and are at most 20 characters in length. ------ Output ------ For each item in the inventory, output its name and the remaining quantity after all the sales orders have been processed. Output the items in the same order as they appeared in the input. ------ Constraints ------ 1 ≤ N, M ≤ 1000 ------ Sample Input 1 ------ 4 apple 50 banana 30 orange 20 grape 10 3 apple 60 banana 10 grape 5 ------ Sample Output 1 ------ apple 0 banana 20 orange 20 grape 5","solution":"def update_inventory(n, inventory_list, m, orders_list): inventory = {} # Read the inventory into a dictionary for item_name, quantity in inventory_list: inventory[item_name] = quantity # Process each order for item_name, order_quantity in orders_list: if item_name in inventory: if inventory[item_name] < order_quantity: inventory[item_name] = 0 else: inventory[item_name] -= order_quantity return [(item_name, inventory[item_name]) for item_name, _ in inventory_list]"},{"question":"Alice is organizing a new reading corner for her friends. She has a list of books, each with a specific number of pages. Alice wants to distribute the books among her friends such that the time it takes for the friend reading the most pages is minimized. Given a list of integers representing the number of pages of each book and an integer `n` representing the number of friends, distribute the books optimally and return the minimum possible number of pages that the friend who reads the most pages will have to read. # Input: - The first line contains an integer `n` (1 ≤ n ≤ 100) representing the number of friends. - The second line contains an integer `m` (1 ≤ m ≤ 1000) representing the number of books. - The third line contains `m` integers a_1, a_2, ldots, a_m (1 ≤ a_i ≤ 10000) representing the number of pages in each book. # Output: - Print a single integer representing the minimum possible maximum number of pages that one friend has to read. # Examples: Example 1: Input: ``` 2 4 10 20 30 40 ``` Output: ``` 60 ``` Explanation: - One optimal way is to assign the books as follows: Friend 1 reads books with 10 and 50 pages, and Friend 2 reads books with 20 and 30 pages. Both read a total of 60 pages. Example 2: Input: ``` 3 4 10 20 30 40 ``` Output: ``` 40 ``` Explanation: - One optimal way is to assign the books as follows: Friend 1 reads books with 40 pages, Friend 2 reads books with 30 pages, and Friend 3 reads books with 10 and 20 pages. The maximum pages any one friend has to read is 40.","solution":"def is_possible(books, n, max_pages): current_sum = 0 required_friends = 1 for pages in books: if current_sum + pages > max_pages: required_friends += 1 current_sum = pages if required_friends > n: return False else: current_sum += pages return True def minimize_max_pages(n, books): if n == 0 or not books: return 0 start, end = max(books), sum(books) result = end while start <= end: mid = (start + end) // 2 if is_possible(books, n, mid): result = mid end = mid - 1 else: start = mid + 1 return result"},{"question":"A company has introduced a unique inventory system for tracking items in their warehouse. Each item is associated with a unique identifier, and the system provides two operations: 1. `LOAD x y` - This command loads quantity `y` of item with identifier `x` into the warehouse. 2. `UNLOAD x y` - This command unloads quantity `y` of item with identifier `x` from the warehouse. However, to prevent errors, the system has a safety check. If an `UNLOAD` operation attempts to unload more items than are currently available in the warehouse for that specific identifier, the operation fails, and the system prints \\"Insufficient items\\". You need to write a program to simulate this inventory system and track the operations performed. The inventory starts empty. -----Input----- The first line contains an integer `n` (1 ≤ n ≤ 10^5), the number of operations to be performed. The following `n` lines each contain a command in one of the following formats: - `LOAD x y` where `x` is a string (1 ≤ |x| ≤ 10, consisting of only English letters) and `y` is an integer (1 ≤ y ≤ 10^9). - `UNLOAD x y` where `x` is a string (1 ≤ |x| ≤ 10, consisting of only English letters) and `y` is an integer (1 ≤ y ≤ 10^9). -----Output----- For each `UNLOAD` operation, if it fails due to insufficient items, print \\"Insufficient items\\". -----Example----- Input 5 LOAD apple 100 LOAD banana 150 UNLOAD apple 50 UNLOAD apple 60 UNLOAD banana 200 Output Insufficient items Input 4 LOAD widget 500 UNLOAD widget 300 LOAD widget 200 UNLOAD widget 400 Output Insufficient items","solution":"def inventory_system(operations): inventory = {} results = [] for op in operations: parts = op.split() command = parts[0] item = parts[1] quantity = int(parts[2]) if command == \\"LOAD\\": if item in inventory: inventory[item] += quantity else: inventory[item] = quantity elif command == \\"UNLOAD\\": if item not in inventory or inventory[item] < quantity: results.append(\\"Insufficient items\\") else: inventory[item] -= quantity return results"},{"question":"You are given a task to manage and query a library system. The library stores details of books and allows you to perform the following operations: 1. Add a new book record. 2. Delete a book record by its title. 3. Find a book by its title. Each book has a unique title and an author. INPUT: The first line contains an integer `Q`, the number of operations. The next `Q` lines contain one of the following operations: 1. `Add <title> <author>` - Add a new book with the given `title` and `author`. Titles are unique. 2. `Delete <title>` - Remove the book with the given `title`. 3. `Find <title>` - Print the author of the book with the given `title`. If the book does not exist, print \\"Not found\\". All operations are case-sensitive. OUTPUT: For each `Find` operation, print the name of the author if the book exists, or \\"Not found\\" if it doesn\'t. CONSTRAINTS: 1 ≤ Q ≤ 10^5 The length of `<title>` and `<author>` will not exceed 100 characters. 1 ≤ Total number of books ≤ 10^5 SAMPLE INPUT 6 Add HarryPotter JKRowling Add TheHobbit JRRRTolkien Find HarryPotter Find TheLordOfTheRings Delete HarryPotter Find HarryPotter SAMPLE OUTPUT JKRowling Not found Not found","solution":"class LibrarySystem: def __init__(self): self.books = {} def add_book(self, title, author): self.books[title] = author def delete_book(self, title): if title in self.books: del self.books[title] def find_book(self, title): return self.books.get(title, \\"Not found\\") def manage_library(operations): library = LibrarySystem() results = [] for operation in operations: parts = operation.split(maxsplit=2) command = parts[0] if command == \'Add\': title, author = parts[1], parts[2] library.add_book(title, author) elif command == \'Delete\': title = parts[1] library.delete_book(title) elif command == \'Find\': title = parts[1] result = library.find_book(title) results.append(result) return results"},{"question":"Neo recently discovered that beavers are big fans of puzzles, especially those involving numbers and sequences. Due to his unique capabilities, Neo has been asked to help solve one particularly challenging problem involving unique sequences from various shops in the city. The problem is as follows: given a sequence of integers representing shop IDs that Neo can visit, he must find the longest subsequence which is strictly increasing. Your task is to help Neo find this longest strictly increasing subsequence. If there are multiple subsequences of the longest length, return any one of them. Input The first line contains an integer n (1 ≤ n ≤ 1000), the number of shops in the sequence. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 10000), representing the shop IDs. Output Output the length of the longest strictly increasing subsequence in the first line. In the second line, output the sequence itself. Examples Input 6 5 2 8 6 3 6 9 7 Output 4 2 3 6 9 Input 5 1 2 3 4 5 Output 5 1 2 3 4 5 Note In the first example, one of the longest strictly increasing subsequences is 2, 3, 6, 9. In the second example, the entire sequence is already strictly increasing, so the output is the sequence itself.","solution":"def longest_increasing_subsequence(n, seq): if n == 0: return 0, [] # Initialize the dp array where dp[i] is the length of the longest increasing subsequence ending at index i dp = [1] * n # Initialize parent array to reconstruct the sequence parent = [-1] * n # Compute the dp values for i in range(1, n): for j in range(i): if seq[i] > seq[j] and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 parent[i] = j # Find the maximum value in dp and its index max_length = max(dp) max_index = dp.index(max_length) # Reconstruct the sequence using the parent array lis = [] current_index = max_index while current_index != -1: lis.append(seq[current_index]) current_index = parent[current_index] lis.reverse() return max_length, lis"},{"question":"Your task is to implement a basic text editor feature used by a company that develops a Markdown editor. Within the editor, the company wants to automate a formatting rule: any equals sign (`=`) that appears between double asterisks (`**`) should be converted to an underscore (`_`). The double asterisks themselves are used for denoting bold text and need to remain unchanged. The feature should be implemented following these requirements: - Any part of the text between double asterisks should have each equals sign replaced with an underscore. - If double asterisks are not properly closed or if they overlap, do not perform any substitutions within those sequences. - Double asterisks used for marking bold text will always contain pairs of asterisks (e.g., `\\"Hello **world**\\"` is valid; `\\"Hello **world\\"` is not because it is not properly closed). -----Input----- The input consists of a single string `s` which is the text to be processed by the editor. The length of `s` is between 1 and 200 characters. -----Output----- Output a single string which is the altered text with the specified formatting rule applied. -----Examples----- Input **Markdown** editing is fun. Here is some math: **3 + 5 = 8**. Output **Markdown** editing is fun. Here is some math: **3 + 5 _ 8**. Input Some variables: **x = 10** and **y = x + 2** are important to know. Output Some variables: **x _ 10** and **y _ x + 2** are important to know. In the examples, the bold text represented within `**` has each equals sign replaced with an underscore while the rest of the text remains unchanged.","solution":"def format_text(s): Replace any equals sign (`=`) that appears between double asterisks (`**`) with an underscore (`_`). result = [] is_in_bold = False i = 0 while i < len(s): if s[i:i+2] == \'**\': is_in_bold = not is_in_bold result.append(\'**\') i += 2 else: if is_in_bold and s[i] == \'=\': result.append(\'_\') else: result.append(s[i]) i += 1 return \'\'.join(result)"},{"question":"Given a positive integer N, find the sum of the first and last digit of N. Example 1: Input: N = 1234 Output: 5 Explanation: First digit is 1 and last digit is 4. Their sum is 1 + 4 = 5. Example 2: Input: N = 56789 Output: 14 Explanation: First digit is 5 and last digit is 9. Their sum is 5 + 9 = 14. Your Task: You do not need to read input or print anything. Your task is to complete the function sumFirstLast() which takes N as input parameter and returns the sum of the first and last digits of N. Expected Time Complexity: O(log(N)) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{9}","solution":"def sumFirstLast(N): Returns the sum of the first and last digit of N. N_str = str(N) first_digit = int(N_str[0]) last_digit = int(N_str[-1]) return first_digit + last_digit"},{"question":"# Problem Statement You have been tasked with developing a software solution for a video streaming platform. The platform has an integrated recommendation system that suggests content to users based on their viewing history. However, the platform has been experiencing issues with the efficiency of the recommendation algorithm, and you need to provide a solution to optimize it. Given a list of users and their watched videos, you need to determine the unique set of recommended videos for each user excluding the videos they have already watched. To achieve this, you will use a function that processes the user\'s history and returns a list of recommended videos. # Task Implement a function `recommendVideos(users: List[str], videos_watched: Dict[str, List[str]], all_videos: List[str]) -> Dict[str, List[str]]` that takes in: 1. `users`: A list of user names. 2. `videos_watched`: A dictionary where the key is a user name and the value is a list of video titles the user has watched. 3. `all_videos`: A list of all available video titles on the platform. The function should return a dictionary where the key is the user name and the value is a list of recommended videos that the user has not watched yet. # Example Consider the following input: ```python users = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] videos_watched = { \\"Alice\\": [\\"Video1\\", \\"Video2\\", \\"Video3\\"], \\"Bob\\": [\\"Video2\\", \\"Video4\\"], \\"Charlie\\": [\\"Video1\\", \\"Video4\\", \\"Video5\\"] } all_videos = [\\"Video1\\", \\"Video2\\", \\"Video3\\", \\"Video4\\", \\"Video5\\", \\"Video6\\"] ``` The output should be: ``` { \\"Alice\\": [\\"Video4\\", \\"Video5\\", \\"Video6\\"], \\"Bob\\": [\\"Video1\\", \\"Video3\\", \\"Video5\\", \\"Video6\\"], \\"Charlie\\": [\\"Video2\\", \\"Video3\\", \\"Video6\\"] } ``` # Assumptions - The `users` list contains unique user names. - The `videos_watched` dictionary contains valid user names from the `users` list. - The `all_videos` list contains unique video titles. - There are no duplicate video titles within a user\'s watched list. - The videos in the recommendation list can be in any order. # Implementation Implement the function `recommendVideos(users: List[str], videos_watched: Dict[str, List[str]], all_videos: List[str]) -> Dict[str, List[str]]`: ```python def recommendVideos(users, videos_watched, all_videos): recommendations = {} for user in users: watched_videos = set(videos_watched.get(user, [])) recommendations[user] = [video for video in all_videos if video not in watched_videos] return recommendations # Test the function with the example input users = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] videos_watched = { \\"Alice\\": [\\"Video1\\", \\"Video2\\", \\"Video3\\"], \\"Bob\\": [\\"Video2\\", \\"Video4\\"], \\"Charlie\\": [\\"Video1\\", \\"Video4\\", \\"Video5\\"] } all_videos = [\\"Video1\\", \\"Video2\\", \\"Video3\\", \\"Video4\\", \\"Video5\\", \\"Video6\\"] print(recommendVideos(users, videos_watched, all_videos)) # Expected output: # { # \\"Alice\\": [\\"Video4\\", \\"Video5\\", \\"Video6\\"], # \\"Bob\\": [\\"Video1\\", \\"Video3\\", \\"Video5\\", \\"Video6\\"], # \\"Charlie\\": [\\"Video2\\", \\"Video3\\", \\"Video6\\"] # } ```","solution":"from typing import List, Dict def recommendVideos(users: List[str], videos_watched: Dict[str, List[str]], all_videos: List[str]) -> Dict[str, List[str]]: Returns a dictionary of recommended videos for each user excluding the videos they have already watched. recommendations = {} for user in users: watched_videos = set(videos_watched.get(user, [])) recommendations[user] = [video for video in all_videos if video not in watched_videos] return recommendations"},{"question":"Daisy is an avid mathematician and loves working with prime numbers and palindromes. She is particularly interested in finding prime numbers that are also palindromes within a specified range. A palindrome is a number which reads the same backward as forward. Your task is to help Daisy find all prime palindromic numbers within a given range [a, b]. A number is considered a prime if it is greater than 1 and has no divisors other than 1 and itself. Input format The first line contains two integers a and b, defining the range [a, b]. Output format Print all prime palindromic numbers within the specified range [a, b] on separate lines. If there are no such numbers, print \\"No prime palindromic numbers found.\\" Constraints 1 ≤ a ≤ b ≤ 10^6 SAMPLE INPUT 5 100 SAMPLE OUTPUT 5 7 11 Explanation For the range [5, 100], the numbers 5, 7, and 11 are prime palindromic numbers. - 5 is a prime number and also a palindrome. - 7 is a prime number and also a palindrome. - 11 is a prime number and also a palindrome.","solution":"def prime_palindromes(a, b): Find all prime palindromic numbers in the range [a, b]. def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def is_palindrome(n): return str(n) == str(n)[::-1] result = [] for num in range(a, b + 1): if is_prime(num) and is_palindrome(num): result.append(num) if not result: return \\"No prime palindromic numbers found.\\" return result # Example usage # a, b = 5, 100 # print(prime_palindromes(a, b)) # Expected output: [5, 7, 11]"},{"question":"Problem Statement You are given an array of integers representing the heights of a group of friends standing in a line. The rule allows swapping the heights of any two adjacent friends. Your task is to determine the minimum number of swaps necessary to arrange the friends in non-decreasing order of height. # Input The first line of input contains a single integer `n` (1 ≤ n ≤ 100,000) — the number of friends. The second line contains `n` integers separated by spaces representing the heights of the friends. # Output Print a single integer — the minimum number of swaps needed to sort the array in non-decreasing order using adjacent swaps. # Examples Example 1 # Input ``` 5 4 3 2 1 5 ``` # Output ``` 6 ``` Example 2 # Input ``` 4 1 2 3 4 ``` # Output ``` 0 ``` # Note In the first example, the array [4, 3, 2, 1, 5] can be sorted into [1, 2, 3, 4, 5] with a minimum of 6 adjacent swaps as follows: - Swap 1: [3, 4, 2, 1, 5] - Swap 2: [3, 2, 4, 1, 5] - Swap 3: [3, 2, 1, 4, 5] - Swap 4: [2, 3, 1, 4, 5] - Swap 5: [2, 1, 3, 4, 5] - Swap 6: [1, 2, 3, 4, 5] In the second example, the array is already sorted, so the minimum number of swaps needed is 0.","solution":"def min_adjacent_swaps_to_sort(heights): Returns the minimum number of adjacent swaps needed to sort the array in non-decreasing order. n = len(heights) count = 0 # Bubble sort logic to count the number of swaps for i in range(n): for j in range(0, n-i-1): if heights[j] > heights[j+1]: heights[j], heights[j+1] = heights[j+1], heights[j] count += 1 return count"},{"question":"Alice loves gardening and she wants to plant flowers in a row of garden beds. She has a row of `n` garden beds and she wants to find out the number of possible ways she can arrange these garden beds such that no two adjacent garden beds have the same type of flower. Alice is fond of two types of flowers: Tulips and Roses. Given `n`, the number of garden beds, help Alice to find out the number of valid arrangements. Function Signature: ```python def countArrangements(n: int) -> int: ``` **Input:** - An integer, `n`, the number of garden beds. **Output:** - An integer, the number of valid arrangements of the garden beds. **Constraints:** - `1 <= n <= 10^6` **Example:** ```python countArrangements(1) ``` **Output:** ``` 2 ``` Explanation: There are two garden beds, the valid arrangements are: \\"T\\", \\"R\\". ```python countArrangements(3) ``` **Output:** ``` 4 ``` Explanation: The four valid arrangements are: \\"TRT\\", \\"TRR\\", \\"RTR\\", \\"RTT\\". **Note:** - In a 1-bed garden, there are 2 arrangements `T` and `R` (1 bed). - In a 2-bed garden, valid arrangements are: `TR`, `RT` (2 beds). - In a 3-bed garden, valid arrangements are: `TRT`, `RTR`, `TRT`, `RTT` (4 beds).","solution":"def countArrangements(n: int) -> int: Returns the number of valid arrangements of n garden beds such that no two adjacent beds have the same type of flower. Valid flower types are Tulips and Roses. # Let\'s consider the base cases first: if n == 1: return 2 # \\"T\\" or \\"R\\" elif n == 2: return 2 * 1 # \\"TR\\" or \\"RT\\" # For n > 2 a, b = 2, 2 # a: count for n-2, b: count for n-1 for i in range(3, n+1): temp = (a + b) % (10**9 + 7) a, b = b, temp return b # Above, using a large modulus helps in case of overflow for large n."},{"question":"You are given an array of N integers, followed by Q queries. Each query provides two integers, L and R. Find the sum of the elements in the array between indices L and R (inclusive), for each query. -----Input----- - The first line of the input contains a single integer N indicating the number of elements in the array. - The second line contains N space-separated integers representing the elements of the array. - The third line contains a single integer Q denoting the number of queries. - Each of the next Q lines contains two space-separated integers L and R, representing the range of indices for which the sum needs to be computed. -----Output----- For each query, output the sum of the elements from index L to index R. -----Constraints----- - 1 le N le 100,000 - 1 le Q le 100,000 - 1 le L le R le N - -10^9 le text{elements of the array} le 10^9 -----Example Input----- 5 1 2 3 4 5 3 1 3 2 4 1 5 -----Example Output----- 6 9 15","solution":"def prefix_sums(arr): Returns an array of prefix sums prefix = [0] * (len(arr) + 1) for i in range(1, len(prefix)): prefix[i] = prefix[i-1] + arr[i-1] return prefix def range_sum_queries(arr, queries): Returns the sum of the elements in the array between indices L and R (inclusive) for each query. Utilizes prefix sums for efficient calculation. prefix = prefix_sums(arr) results = [] for L, R in queries: result = prefix[R] - prefix[L - 1] results.append(result) return results"},{"question":"In a certain coding competition, participants are required to solve P problems. Each problem is assigned a score S_i (1 ≤ i ≤ P). Your task is to determine the total score achieved by a participant who completes all problems. ------ Input Format ------ - The first line contains an integer T, denoting the number of test cases. - For each test case: - The first line contains an integer P, the number of problems. - The second line contains P space-separated integers representing the scores of the problems. ------ Output Format ------ For each test case, output on a new line, the total score achieved by completing all the problems. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ P ≤ 100 1 ≤ S_i ≤ 100 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 3 10 20 30 4 11 12 13 14 ------ Sample Output 1 ------ 15 60 50 ------ Explanation 1 ------ Test case 1: There are 5 problems with scores 1, 2, 3, 4, 5. The total score is 1 + 2 + 3 + 4 + 5 = 15. Test case 2: There are 3 problems with scores 10, 20, 30. The total score is 10 + 20 + 30 = 60. Test case 3: There are 4 problems with scores 11, 12, 13, 14. The total score is 11 + 12 + 13 + 14 = 50.","solution":"def total_scores(test_cases): This function calculates the total scores for each test case. :param test_cases: List of test cases where each test case is a tuple of number of problems and a list of scores. :return: List of total scores for each test case. results = [] for problems, scores in test_cases: results.append(sum(scores)) return results # Helper function to parse input def parse_input(input_string): lines = input_string.strip().split(\\"n\\") T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): P = int(lines[index]) scores = list(map(int, lines[index + 1].split())) test_cases.append((P, scores)) index += 2 return test_cases"},{"question":"You are given an array of strings where each string represents a word. Write a function that returns the word with the maximum number of vowels. If two words have the same number of vowels, return the one that appears first in the list. Consider the vowels \'a\', \'e\', \'i\', \'o\', \'u\' (both lowercase and uppercase). Example: ```python input: [\\"hello\\", \\"world\\", \\"audience\\", \\"programming\\"] output: \\"audience\\" ``` Note: - The input array will contain at least one word. - The input will only contain alphabetic characters.","solution":"def word_with_max_vowels(words): Returns the word with the maximum number of vowels. If two words have the same number of vowels, the word that appears first in the list is returned. vowels = set(\'aeiouAEIOU\') def count_vowels(word): return sum(1 for char in word if char in vowels) max_vowels = -1 result_word = \\"\\" for word in words: current_vowels = count_vowels(word) if current_vowels > max_vowels: max_vowels = current_vowels result_word = word return result_word"},{"question":"Your friend Alex has a large library with multiple floors, and each floor has a number of bookshelves, each filled with books. Alex needs a functionality to quickly find on which floor and which bookshelf a specific book is located. However, the books in the library are not arranged in any specific order. They are identified by unique IDs represented by positive integers. You are asked to help design an efficient search system that allows Alex to retrieve the location of any book based on its ID. The library is organized as follows: - The library has `F` floors. - Each floor has `S` bookshelves. - Each bookshelf has a list of book IDs. Write a function `find_book_location` that takes three inputs: 1. A 3D list `library` where `library[f][s]` is the list of book IDs on the `s-th` bookshelf on the `f-th` floor. 2. An integer `book_id` which is the ID of the book Alex is looking for. The function should return a tuple of two integers: the floor index and the bookshelf index `(floor, shelf)` that contains the book with the given ID. If the book is not found in the library, the function should return `(-1, -1)`. # Input - `library`: A 3D list where `1 <= F, S <= 100` and each list `library[f][s]` contains unique integers representing book IDs. - `book_id`: An integer that represents the book ID to be searched. # Output - A tuple `(floor, shelf)` if the book is found, otherwise `(-1, -1)`. # Example Sample Input: ``` library = [ [[1, 2, 3], [4, 5, 6]], [[7, 8], [9, 10, 11, 12]], [[13, 14, 15], [16, 17]] ] book_id = 10 ``` Sample Output: ``` (1, 1) ``` In this example, the book with ID 10 is found on the 1st floor (index 1) and the 1st bookshelf (index 1). # Note The function `find_book_location` should efficiently locate the book and handle both small and large libraries within the given constraints.","solution":"def find_book_location(library, book_id): This function finds the book\'s location in the library. Parameters: library (list): A 3D list where library[f][s] is the list of book IDs on the s-th bookshelf on the f-th floor. book_id (int): The ID of the book. Returns: tuple: A tuple (floor, shelf) where the book is found, otherwise (-1, -1). for f in range(len(library)): for s in range(len(library[f])): if book_id in library[f][s]: return (f, s) return (-1, -1)"},{"question":"You are given a list of integers which represent the heights of n candles. Each candle can be either upright or inverted. A candle is upright if it has a height h, and inverted if it has a height of -h. Your task is to find the maximum height difference between two candles such that one is upright and the other is inverted. An inverted candle with height -h is symmetrically reversed, hence the height comparison |h - (-h)| should be considered. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains a single integer n (2 le n le 300) — the number of candles. - The second line contains n integers h_1, h_2, ldots, h_n (1 le h_i le 10^6) — the heights of the candles. It is guaranteed that the sum of n over all test cases does not exceed 300. -----Output----- For each test case, output a single integer — the maximum height difference between one upright and one inverted candle. -----Examples----- Input 3 3 3 2 1 4 5 10 2 8 2 6 6 Output 6 20 12 -----Note----- In the first test case, the maximum height difference can be achieved between any candle (since |-h_i - h_j| = 2h_i). In the second test case, the maximum height difference can be achieved between the candle of height 10 and its inverted counterpart -10. The difference is 20. In the third test case, the maximum height difference is 12 since both candles have height 6, hence the height difference |6 - (-6)| = 12.","solution":"def max_height_difference(test_cases): results = [] for n, heights in test_cases: max_height = max(heights) max_difference = max_height - (-max_height) results.append(max_difference) return results"},{"question":"You are given a string consisting of lowercase English letters. You can perform the following operation any number of times: - Choose any substring of the string, remove it from its current position, and insert it in another position in the string. Your task is to determine if it\'s possible to transform the string into a palindrome by performing the operation above any number of times. Return \\"YES\\" if it\'s possible, otherwise return \\"NO\\". -----Input----- The input consists of a single string s (1 ≤ |s| ≤ 10^5) — the string to be assessed for the possibility of transformation into a palindrome. -----Output----- Output \\"YES\\" if it\'s possible to transform the string into a palindrome using the given operation, otherwise, output \\"NO\\". -----Examples----- Input aabb Output YES Input abc Output NO Input abccba Output YES","solution":"def can_be_palindrome(s): Determines if a string can be transformed into a palindrome by substrings rearrangement. Parameters: s (str): The input string consisting of lowercase English letters. Returns: str: \'YES\' if the string can be transformed into a palindrome, otherwise \'NO\'. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged into a palindrome if it has at most one character with an odd count. return \'YES\' if odd_count <= 1 else \'NO\'"},{"question":"The local gym is implementing a new reward system for its members. Members can earn points based on the type and duration of their workouts. They can then redeem their points for rewards. The gym wants to calculate how many rewards a member can receive based on their workout schedule and the point system. Example Consider the following point system: - Jogging: 10 points per minute - Cycling: 5 points per minute - Swimming: 15 points per minute The redemption system is as follows: - 100 points can be redeemed for a single reward A member has the following workout schedule for a week (in minutes): Jogging: 30, 45, 20 Cycling: 60, 30 Swimming: 25, 40 The total points accumulated from jogging are (30 + 45 + 20) * 10 = 950 points. From cycling, the points are (60 + 30) * 5 = 450 points. From swimming, the points are (25 + 40) * 15 = 975 points. So the total points are 950 + 450 + 975 = 2375 points. The member can redeem 2375 // 100 = 23 rewards. Function Description Complete the `calculateRewards` function in the editor below. `calculateRewards` has the following parameter(s): - int jogging[]: an array of integers representing minutes spent on jogging per day - int cycling[]: an array of integers representing minutes spent on cycling per day - int swimming[]: an array of integers representing minutes spent on swimming per day Returns - int: the number of rewards the member can redeem Input Format The first line contains an integer, `t`, the number of test cases to analyze. Each subsequent line contains three space-separated arrays of integers representing the minutes spent on jogging, cycling, and swimming respectively for the given test case. Each array can have at most 7 integers corresponding to the days of the week. Constraints - 1 leq t leq 100 - 0 leq minutes leq 120 for each entry in the arrays - Any of the arrays can be empty if no exercise of that type was done Sample Input ``` 2 30 45 20 60 30 25 40 0 0 60 30 ``` Sample Output ``` 23 2 ``` Explanation For the first test case: - Jogging: (30 + 45 + 20) * 10 = 950 points - Cycling: (0 + 0) * 5 = 0 points - Swimming: (60 + 30 + 25 + 40) * 15 = 2325 points Total points: 950 + 0 + 2325 = 3275 Rewards: 3275 // 100 = 32 For the second test case: - Jogging: No minutes of jogging - Cycling: (60 + 30) * 5 = 450 points - Swimming: No minutes of swimming Total points: 0 + 450 + 0 = 450 Rewards: 450 // 100 = 4","solution":"def calculateRewards(jogging, cycling, swimming): Calculate the number of rewards a member can redeem based on their workout schedule. :param jogging: list of integers representing minutes spent on jogging per day :param cycling: list of integers representing minutes spent on cycling per day :param swimming: list of integers representing minutes spent on swimming per day :return: int - the number of rewards the member can redeem # Defining the points per minute for each exercise type points_per_minute = { \\"jogging\\": 10, \\"cycling\\": 5, \\"swimming\\": 15 } # Calculating total points for each activity jogging_points = sum(jogging) * points_per_minute[\\"jogging\\"] cycling_points = sum(cycling) * points_per_minute[\\"cycling\\"] swimming_points = sum(swimming) * points_per_minute[\\"swimming\\"] # Summing up the total points total_points = jogging_points + cycling_points + swimming_points # Calculating the number of rewards rewards = total_points // 100 return rewards"},{"question":"Given a sequence of integers, you need to find the length of the longest subsequence which is a bitonic sequence. A bitonic sequence is a sequence that first increases and then decreases. # Objective Write a program that computes the length of the longest bitonic subsequence from a given integer sequence. # Input Format - The first line contains an integer N (1 ≤ N ≤ 100), the length of the sequence. - The second line contains N space-separated integers representing the sequence. Each integer is between 1 and 1000. # Output Format - Print the length of the longest bitonic subsequence. # Sample Input 6 1 2 5 3 2 1 # Sample Output 6 # Explanation The entire sequence 1, 2, 5, 3, 2, 1 is bitonic since it first increases to 5, then decreases. Hence, the length of the longest bitonic subsequence is 6. # Sample Input 2 8 1 11 2 10 4 5 2 1 # Sample Output 2 6 # Explanation 2 The longest bitonic subsequence here is 1, 2, 10, 4, 2, 1, which has a length of 6.","solution":"def longest_bitonic_subsequence(seq): n = len(seq) if n == 0: return 0 # Initialize the increasing subsequence array inc = [1] * n # Fill the increasing subsequence array for i in range(1, n): for j in range(i): if seq[i] > seq[j] and inc[i] < inc[j] + 1: inc[i] = inc[j] + 1 # Initialize the decreasing subsequence array dec = [1] * n # Fill the decreasing subsequence array for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if seq[i] > seq[j] and dec[i] < dec[j] + 1: dec[i] = dec[j] + 1 # Find the maximum of inc[i] + dec[i] - 1 max_len = 0 for i in range(n): max_len = max(max_len, inc[i] + dec[i] - 1) return max_len # Example usage # print(longest_bitonic_subsequence([1, 2, 5, 3, 2, 1])) # Output should be 6 # print(longest_bitonic_subsequence([1, 11, 2, 10, 4, 5, 2, 1])) # Output should be 6"},{"question":"Julian is studying mathematical formulas, and in one particular problem, he stumbled upon an interesting series. The series starts with the number 1 and each subsequent number in the series is formed by dividing the previous number by an integer that increases by 1 each time. Julian wants to know the sum of the first n terms of this series. The series can be described as: 1 + 1/2 + 1/3 + 1/4 + ... For example, the sum of the first 3 terms is 1 + 1/2 + 1/3 = 1.8333 (approximately). You are to help Julian by writing a program that calculates the sum of the first n terms of this series. Input: The first line contains a single integer n (1 ≤ n ≤ 10^6), the number of terms to sum. Output: Print the sum of the first n terms of the series. The output should be printed as a floating-point number with at least 5 digits of precision. Examples: Input 5 Output 2.28333 Input 1 Output 1.00000 Input 10 Output 2.92897 Input 100000 Output 12.09015","solution":"def series_sum(n): Returns the sum of the first n terms of the series. The series is: 1 + 1/2 + 1/3 + 1/4 + ... + 1/n return sum(1/i for i in range(1, n + 1))"},{"question":"In a certain village, there are N houses arranged in a straight line. The houses are numbered from 1 to N. Each house has a resident who has a specific level of happiness. The happiness levels of the residents are represented by an array H of length N where H[i] gives the happiness level of the resident in the i-th house. The residents want to form contiguous groups (or blocks) of houses so that: 1. Each block has at least 1 house. 2. The maximum happiness level in each block is strictly greater than the happiness levels of any house outside the block but within N houses. Given a number B, representing the desired number of blocks, the task is to find the maximum possible sum of the maximum happiness levels of these B blocks. Input: The first line contains T, the number of test cases. Each test case consists of two lines. The first line contains two integers N (number of houses) and B (number of blocks). The second line contains N integers, representing the happiness array H. Output: For each test case, print a single integer - the maximum possible sum of the maximum happiness levels of B blocks. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ H[i] ≤ 10^5 1 ≤ B ≤ N Example: Input: 2 5 2 1 2 3 4 5 7 3 5 8 6 3 2 6 7 Output: 9 21 Explanation: In the first test case, the two optimal blocks could be [4, 5], with sum of maximum happiness levels = 4 + 5 = 9. In the second test case, the three optimal blocks could be [5, 8], [6], and [7], with sum of maximum happiness levels = 8 + 6 + 7 = 21.","solution":"def max_happiness_sum(T, test_cases): results = [] for test in test_cases: N, B, H = test H.sort(reverse=True) results.append(sum(H[:B])) return results"},{"question":"You are given a string consisting of lowercase English letters and two integers, `k` and `m`. Your task is to find the number of substrings of length `k` in the given string that contain at most `m` distinct characters. **Example 1:** Input: ``` s = \\"abcbaa\\", k = 3, m = 2 ``` Output: ``` 3 ``` Explanation: The substrings of length 3 are \\"abc\\", \\"bcb\\", \\"cba\\", \\"baa\\". - \\"abc\\" contains 3 distinct characters. - \\"bcb\\" contains 2 distinct characters. - \\"cba\\" contains 3 distinct characters. - \\"baa\\" contains 2 distinct characters. Therefore, there are 2 substrings (\\"bcb\\", \\"baa\\") that contain at most 2 distinct characters. **Example 2:** Input: ``` s = \\"abacab\\", k = 2, m = 1 ``` Output: ``` 2 ``` Explanation: The substrings of length 2 are \\"ab\\", \\"ba\\", \\"ac\\", \\"ca\\", \\"ab\\". - \\"ab\\" contains 2 distinct characters. - \\"ba\\" contains 2 distinct characters. - \\"ac\\" contains 2 distinct characters. - \\"ca\\" contains 2 distinct characters. - \\"ab\\" contains 2 distinct characters. None of them contain at most 1 distinct character. Your Task: You do not need to read input or print anything. Your task is to complete the function `countSubstringsWithMaxDistinctChars()` which takes the string `s` and integers `k` and `m`, and returns the number of substrings of length `k` that contain at most `m` distinct characters. **Expected Time Complexity:** O(n) where n is the length of the string. **Expected Auxiliary Space:** O(1) **Constraints:** - 1 <= s.length <= 10^5 - 1 <= k <= s.length - 1 <= m <= k","solution":"def count_substrings_with_max_distinct_chars(s, k, m): if k > len(s): return 0 from collections import defaultdict start = 0 distinct_count = 0 count = 0 char_count = defaultdict(int) for end in range(len(s)): char_count[s[end]] += 1 if char_count[s[end]] == 1: distinct_count += 1 while distinct_count > m: char_count[s[start]] -= 1 if char_count[s[start]] == 0: distinct_count -= 1 start += 1 if end - start + 1 == k: if distinct_count <= m: count += 1 char_count[s[start]] -= 1 if char_count[s[start]] == 0: distinct_count -= 1 start += 1 return count"},{"question":"Define a function that takes a list of integers as input and returns the product of all the integers in the list. Note: the input list will always contain at least one integer. For example: ``` [2, 3, 4] --> 24 [1, 5, 7, 3] --> 105 ```","solution":"def product_of_list(lst): Returns the product of all integers in the list. product = 1 for num in lst: product *= num return product"},{"question":"You are helping a local bakery manage its orders. Customers can place orders for different types of pastries, and the bakery needs to prepare boxes that can hold multiple pastries. However, each box can only hold a certain number of pastries before it has to start a new box. Write a function that determines the number of boxes needed for each type of pastry based on the orders placed. Your function will take in one argument - a list of pairs, where each pair consists of the pastry type (string) and the number of pastries ordered (integer). Each box can hold a maximum of 10 pastries. Your function should return a dictionary where the keys are the pastry types and the values are the number of boxes needed for that type of pastry. If no pastries are ordered for a specific type, do not include that type in the returned dictionary. **Examples** ```python orders = [(\\"croissant\\", 25), (\\"muffin\\", 14), (\\"bagel\\", 9)] box_distribution(orders) # Output: {\'croissant\': 3, \'muffin\': 2, \'bagel\': 1} orders = [(\\"donut\\", 0), (\\"eclair\\", 19), (\\"strudel\\", 4)] box_distribution(orders) # Output: {\'eclair\': 2, \'strudel\': 1} orders = [] box_distribution(orders) # Output: {} ``` **Notes** - Assume the input list will not contain duplicate pastry types. - If the number of pastries ordered is exactly divisible by the box capacity, all boxes will be exactly full for that type. - An empty list should return an empty dictionary.","solution":"def box_distribution(orders): Determines the number of boxes needed for each type of pastry based on the orders placed. :param orders: List of tuples where each tuple contains the pastry type (string) and the number of pastries ordered (int). :return: Dictionary with pastry types as keys and the number of boxes needed as values. box_capacity = 10 result = {} for pastry, count in orders: if count > 0: result[pastry] = (count // box_capacity) + (1 if count % box_capacity != 0 else 0) return result"},{"question":"You are given an integer array representing the number of hours students have studied for an exam, where each element represents the hours studied by a single student. You need to find out if there is a way to split the array into two non-empty groups such that the total study time in each group is the same. Return a boolean value indicating whether such a split is possible. Example 1: Input: [3, 6, 1, 5, 9] Output: True Explanation: One possible partition involves groups [3, 1, 9] and [6, 5], both having a total of 13 hours. Example 2: Input: [1, 1, 3] Output: False Explanation: There is no way to split the array into two groups with equal total study time. Constraints: - The input array will have a length between 2 and 1000 inclusive. - Each element in the array will be a non-negative integer not exceeding 10000.","solution":"from itertools import combinations def can_partition_equal_hours(hours): Determines if there exists a way to split the array into two non-empty groups such that the total study time in each group is the same. total_hours = sum(hours) # If total hours is odd, can\'t split into two equal parts if total_hours % 2 != 0: return False target = total_hours // 2 n = len(hours) # Use a dynamic programming approach dp = [False] * (target + 1) dp[0] = True for hour in hours: for j in range(target, hour - 1, -1): dp[j] = dp[j] or dp[j - hour] return dp[target]"},{"question":"In a card game, you have a deck of cards with N cards. Each card has a value ranging from 1 to M. The goal is to arrange the deck such that the sum of the values on the top K cards is as close as possible to a given integer T. You can rearrange the cards in any order to achieve the closest sum. Write a program that takes the number of cards N, the maximum value on a card M, the number of top cards K, and the target sum T as input, and outputs the closest possible sum to T that can be achieved with the top K cards. Constraints * 1 ≤ N ≤ 1000 * 1 ≤ M ≤ 100 * 1 ≤ K ≤ N * 1 ≤ T ≤ 10000 Input Input is given from Standard Input in the following format: ``` N M K T v1 v2 ... vN ``` Where: - N is the number of cards - M is the maximum value on a card - K is the number of top cards - T is the target sum - vi (1 ≤ vi ≤ M) is the value on the i-th card Output Print the closest possible sum to T that can be achieved with the top K cards. Examples Input ``` 5 10 3 15 8 2 9 7 4 ``` Output ``` 15 ``` Input ``` 4 5 2 6 1 5 2 2 ``` Output ``` 7 ``` Input ``` 6 20 4 50 10 10 15 15 20 5 ``` Output ``` 50 ```","solution":"def closest_sum(N, M, K, T, cards): cards.sort(reverse=True) top_k_cards = cards[:K] closest = sum(top_k_cards) return closest if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N, M, K, T = int(data[0]), int(data[1]), int(data[2]), int(data[3]) cards = list(map(int, data[4:])) print(closest_sum(N, M, K, T, cards))"},{"question":"You are given an array of integers. You need to determine whether the array is a palindrome or not. An array is considered a palindrome if it reads the same backward as forward. ------ Input Format ------ - The first line contains a single integer `N` — the length of the array. - The next line contains `N` space-separated integers representing the elements of the array. ------ Output Format ------ Print Yes if the array is a palindrome, otherwise print No. The judge is case insensitive so you may output the answer in any case. ------ Constraints ------ 1 ≤ N ≤ 100 -10^3 ≤ A[i] ≤ 10^3 for all elements in the array. ----- Sample Input 1 ------ 5 1 2 3 2 1 ----- Sample Output 1 ------ Yes ----- Explanation 1 ------ The array reads the same backward as forward, hence it is a palindrome. ----- Sample Input 2 ------ 4 1 2 3 4 ----- Sample Output 2 ------ No ----- Explanation 2 ------ The array does not read the same backward as forward, hence it is not a palindrome.","solution":"def is_palindrome(array): Determines whether the given array is a palindrome or not. Args: array (list): List of integers. Returns: str: \\"Yes\\" if array is a palindrome, otherwise \\"No\\". if array == array[::-1]: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a string representing an arithmetic expression that includes addition, subtraction, multiplication, division, and parentheses. The operators have their usual precedence: multiplicative operators (* and /) have higher precedence than additive operators (+ and -), and parentheses can change the precedence by grouping parts of the expression to be evaluated first. The task is to evaluate the expression and return its value as a floating-point number. For example: Input: \\"3 + 5 * 2 - ( 12 / 4 )\\" Output: 10.0 Input: \\"( 7 - 3 ) * ( 2 + 2 ) / 2\\" Output: 8.0 You need to implement the function `evaluateExpression(expression: str) -> float` that takes a string `expression` as input and returns the floating-point result. Function Signature: ```python def evaluateExpression(expression: str) -> float: pass ``` **Constraints:** 1. The input expression may contain white spaces which can be ignored. 2. The length of the expression string will not exceed 10^5. 3. All numbers in the expression and intermediate results of sub-expressions will fit within the floating-point range. **Additional Information:** - You can assume the input expression is valid and does not contain invalid characters. - Use of standard libraries such as `eval()` to directly compute the result of the expression is not allowed. - You are encouraged to use a stack-based approach or the Shunting Yard algorithm to handle the operator precedence properly. --------------------------------------------------------------------------- # Example Input: ```python expression = \\"3 + 5 * 2 - ( 12 / 4 )\\" ``` Output: ```python 10.0 ``` Input: ```python expression = \\"( 7 - 3 ) * ( 2 + 2 ) / 2\\" ``` Output: ```python 8.0 ``` Given the arithmetic precedence rules and properly handling the parentheses, implement the required function to evaluate and return the correct result.","solution":"def evaluateExpression(expression: str) -> float: def operate(a, b, op): if op == \'+\': return a + b elif op == \'-\': return a - b elif op == \'*\': return a * b elif op == \'/\': return a / b def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 def apply_operations(operators, values): right = values.pop() left = values.pop() op = operators.pop() values.append(operate(left, right, op)) # Step 1: Remove whitespaces from expression expression = expression.replace(\' \', \'\') values = [] operators = [] i = 0 while i < len(expression): # Step 2: If current token is a number, push it to stack for numbers if expression[i].isdigit() or (expression[i] == \'.\' and i + 1 < len(expression) and expression[i + 1].isdigit()): start = i while i < len(expression) and (expression[i].isdigit() or expression[i] == \'.\'): i += 1 values.append(float(expression[start:i])) # Step 3: If current token is an \'(\', push it to operators stack elif expression[i] == \'(\': operators.append(expression[i]) i += 1 # Step 4: If current token is a \')\', solve entire brace elif expression[i] == \')\': while operators and operators[-1] != \'(\': apply_operations(operators, values) operators.pop() # pop \'(\' i += 1 # Step 5: Current token is an operator else: while operators and precedence(operators[-1]) >= precedence(expression[i]): apply_operations(operators, values) operators.append(expression[i]) i += 1 # Step 6: Entire expression has been parsed, apply remaining operators while operators: apply_operations(operators, values) return values[-1]"},{"question":"You are given a board of dimension n x n initially filled with zeros. You will be given q operations to perform on this board. An operation can be of either: 1. Update: Set the cell (i, j) to a specific value x. 2. Query: Calculate and return the sum of all values in a submatrix defined by (r1, c1) to (r2, c2). Your task is to implement the board and perform the requested operations efficiently. Input The first line contains two integers, n and q (1 ≤ n ≤ 1000, 1 ≤ q ≤ 10^5) — the dimension of the board and the number of operations. The next q lines describe the operations. Each operation is either: 1. Update i j x (1 ≤ i, j ≤ n, 1 ≤ x ≤ 10^6) — set the board at cell (i, j) to value x. 2. Query r1 c1 r2 c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ n) — return the sum of values in the submatrix from (r1, c1) to (r2, c2), inclusive. Output For each Query operation, output the result on a new line. Example Input 4 5 Update 1 1 5 Update 2 2 3 Update 4 4 10 Query 1 1 2 2 Query 1 1 4 4 Output 8 18","solution":"class Board: def __init__(self, n): self.n = n self.board = [[0] * n for _ in range(n)] self.prefix_sum = [[0] * (n + 1) for _ in range(n + 1)] def update(self, i, j, x): diff = x - self.board[i - 1][j - 1] self.board[i - 1][j - 1] = x for r in range(i, self.n + 1): for c in range(j, self.n + 1): self.prefix_sum[r][c] += diff def query(self, r1, c1, r2, c2): return (self.prefix_sum[r2][c2] - self.prefix_sum[r1 - 1][c2] - self.prefix_sum[r2][c1 - 1] + self.prefix_sum[r1 - 1][c1 - 1]) def process_operations(self, operations): result = [] for op in operations: parts = op.split() if parts[0] == \\"Update\\": i, j, x = map(int, parts[1:]) self.update(i, j, x) else: # \\"Query\\" r1, c1, r2, c2 = map(int, parts[1:]) result.append(self.query(r1, c1, r2, c2)) return result def handle_operations(n, q, operations): board = Board(n) return board.process_operations(operations)"},{"question":"Given two integers N and K, determine if it is possible to divide the number N into K non-negative integers such that their greatest common divisor (GCD) is 1. Example 1: Input: N = 5, K = 2 Output: YES Explanation: 5 can be divided into 2 non-negative integers in several ways, one possible valid way is 1 and 4. Here, GCD(1, 4) = 1. Example 2: Input: N = 8, K = 4 Output: NO Explanation: 8 can be divided into 4 non-negative integers, but none of those combinations have GCD equal to 1. For example, 2, 2, 2, 2 have GCD(2, 2, 2, 2) = 2. Your Task: You don’t need to read input or print anything. Your task is to complete the function isPossibleDivision() which takes the integers N and K as input and returns \\"YES\\" if it is possible to divide N into K non-negative integers with GCD 1, otherwise returns \\"NO\\". Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) Constraints: 1 <= N, K <= 10^9","solution":"def isPossibleDivision(N, K): Determine if it is possible to divide the number N into K non-negative integers such that their greatest common divisor (GCD) is 1. Parameters: N (int): The number to be divided K (int): The number of parts to divide N into Returns: str: \\"YES\\" if possible, otherwise \\"NO\\" # If K is greater than N, it is impossible to divide N into K non-negative parts if K > N: return \\"NO\\" # It is always possible to divide any positive integer N into K parts where gcd is 1 if K # is exactly or less than N, by minimum 1 for each part and the leftovers can be adjusted accordingly. if K == 1: return \\"YES\\" # If both N and K are even, it is not possible to split them to have a GCD of 1 # If either is odd, it is possible, because the resulting number will always form # one combination with some odd number if N % 2 == 0 and K % 2 == 0: return \\"NO\\" return \\"YES\\""},{"question":"Given a string s, your task is to count the frequency of each character in the string and return a dictionary where the keys are the characters and the values are their respective counts. Example 1: Input: s = \\"abracadabra\\" Output: {\'a\': 5, \'b\': 2, \'r\': 2, \'c\': 1, \'d\': 1} Example 2: Input: s = \\"hello world\\" Output: {\'h\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \' \': 1, \'w\': 1, \'r\': 1, \'d\': 1} Your Task: You do not need to read input or print anything. Your task is to complete the function charFrequency() which takes a string s as input and returns a dictionary with the frequency of each character in the string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(s) ≤ 10^{4}","solution":"def charFrequency(s): Returns a dictionary with the frequency of each character in the string s. frequency = {} for char in s: if char in frequency: frequency[char] += 1 else: frequency[char] = 1 return frequency # Example usage: # print(charFrequency(\\"abracadabra\\"))"},{"question":"You are given an integer S representing the total sum and an integer K representing the maximum number of elements. You need to find K integers such that the sum of these integers is equal to S and the sum of the squares of these integers is minimized. Constraints * 1 leq S leq 10^9 * 1 leq K leq 10^5 Input The input is formatted as follows: S K Output Print K integers such that their sum is equal to S and the sum of their squares is minimized. If there are multiple solutions, print any one of them. The output should be K space-separated integers. Example Input 20 3 Output 6 7 7","solution":"def minimize_sum_of_squares(S, K): base = S // K remainder = S % K result = [base] * (K - remainder) + [base + 1] * remainder return result"},{"question":"Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Chef likes to eat chocolates and he wants to maximize his chocolate collection. There are n boxes of chocolates, each containing a certain number of chocolates. The number of chocolates in each box is represented by an array a of positive integers. Chef can perform the following operation on any box of chocolates: - Choose a box `i` and remove exactly k (1 ≤ k ≤ a[i]) chocolates from it. Chef can perform this operation as many times as he wants on any box, but he cannot remove more chocolates than a[i] from any box. Chef wants to leave each box with at least one chocolate at the end. Determine the minimum number of operations needed so that no box has more than 1 chocolate remaining. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The first line of each test case will contain an integer n denoting number of elements in array a. The next line will contain n space-separated integers denoting elements of array a. ------ Output ------ For each test case, output a single integer corresponding to the minimum number of operations required to leave each box with exactly one chocolate. ------ Constraints ------ 1 ≤ T, n, a[i] ≤ 10^6 1 ≤ Sum of n over all test cases in a single test file ≤ 10^6 ------ Subtasks ------ - Subtask #1: (10 points) 1 ≤ T, n, a[i] ≤ 10^5 a[i] is prime. 1 ≤ Sum of n over all test cases in a single test file ≤ 10^5 - Subtask #2: (20 points) 1 ≤ T, n, a[i] ≤ 10^6 a[i] is prime. 1 ≤ Sum of n over all test cases in a single test file ≤ 10^6 - Subtask #3: (30 points) 1 ≤ T, n, a[i] ≤ 10^5 1 ≤ Sum of n over all test cases in a single test file ≤ 10^5 - Subtask #4: (40 points) Original Constraints ----- Sample Input 1 ------ 3 4 3 4 5 6 2 7 10 3 1 2 3 ----- Sample Output 1 ------ 15 14 3 ----- Explanation 1 ------ Example case 1. Chef can remove 2 chocolates from the first box, 3 chocolates from the second box, 4 chocolates from the third box, and 5 chocolates from the fourth box in total. Hence, the minimum number of operations is 2 + 3 + 4 + 5 = 14. Example case 2. Chef can remove 6 chocolates from the first box and 9 chocolates from the second box. Thus, 6 + 9 = 15 is the minimum number of operations required. Example case 3. Chef can remove 1 chocolate from the second box and 2 chocolates from the third box, so 1 + 2 = 3.","solution":"def min_operations_to_one_chocolate(T, test_cases): results = [] for n, chocolates in test_cases: operations = sum(a - 1 for a in chocolates) results.append(operations) return results # Example Usage: # T = 3 # test_cases = [ # (4, [3, 4, 5, 6]), # (2, [7, 10]), # (3, [1, 2, 3]) # ] # print(min_operations_to_one_chocolate(T, test_cases))"},{"question":"A company has N employees, each with a unique employee ID from 1 to N. The company wants to organize a seminar where they split employees into exactly two non-empty groups such that the absolute difference in the total sum of their employee IDs is minimized. Write a program that takes an integer input N and outputs that minimal absolute difference. Input: 6 SAMPLE INPUT 6 SAMPLE OUTPUT 1","solution":"def min_difference(N): Returns the minimal absolute difference in the total sum of employee IDs when they are split into two non-empty groups. total_sum = N * (N + 1) // 2 half_sum = total_sum / 2 dp = [False] * (total_sum + 1) dp[0] = True for i in range(1, N + 1): for j in range(total_sum, i - 1, -1): dp[j] = dp[j] or dp[j - i] for i in range(int(half_sum), -1, -1): if dp[i]: return abs(total_sum - 2 * i)"},{"question":"A group of students in a programming club decided to play a game. They start with a string that consists of lowercase English letters. The game has the following rule: In each turn, they can pick any character from the string and move it to the end of the string. The students want to know if it\'s possible to transform the given initial string s into a given target string t by repeatedly applying the above rule. Determine if it\'s possible to do so. -----Input----- The first line contains the initial string s and the second line contains the target string t. Both strings have the same length and will have at most 100,000 characters. It is guaranteed that the given strings only consist of lowercase English letters. -----Output----- Print \\"YES\\" if it\'s possible to transform s into t using the described rule, otherwise print \\"NO\\". Please do not print the quotes. -----Examples----- Input abc cab Output YES Input abc bca Output YES Input abc abc Output YES Input abcd dcba Output NO","solution":"def can_transform(s, t): Determines if it\'s possible to transform the initial string s into the target string t by repeatedly moving any character from s to the end of the string. # If t is a substring of s+s, then t can be obtained by rotating s return \\"YES\\" if t in (s + s) else \\"NO\\""},{"question":"A software company has introduced a new language with a unique way of handling strings. They want to test your proficiency with this new language by giving you a specific task. In this language, a string S (1 ≤ |S| ≤ 10^5) consists of lowercase English letters. You are required to determine the minimal number of adjacent swaps needed to transform the given string S into a palindrome. If it is impossible to transform the string into a palindrome, return -1. A palindrome is a word that reads the same backward as forward, for example, \\"radar\\" or \\"madam\\". -----Input----- The first and only line of input contains the string S. -----Output----- The first and only line of output must contain the minimal number of adjacent swaps needed to transform S into a palindrome or -1 if it is impossible. -----Examples----- Sample Input 1: aabb Sample Output 1: 2 Sample Input 2: abcba Sample Output 2: 0 Sample Input 3: abcdef Sample Output 3: -1","solution":"def min_adjacent_swaps_to_palindrome(s): Returns the minimal number of adjacent swaps needed to transform the given string `s` into a palindrome, or -1 if it is impossible. def count_swaps(s): s = list(s) total_swaps = 0 for i in range(len(s)//2): left, right = i, len(s)-i-1 while left < right and s[left] != s[right]: right -= 1 if left == right: return -1 # A single character in the middle that cannot be matched for j in range(right, len(s)-i-1): s[j], s[j+1] = s[j+1], s[j] total_swaps += 1 return total_swaps from collections import Counter if sum(count % 2 for count in Counter(s).values()) > 1: return -1 return count_swaps(s)"},{"question":"Write a function that takes in an array of numbers and a target number. Your task is to determine whether any two numbers in the array add up to the target number. If they do, return true, otherwise return false. The function should only return a boolean value. You cannot use the same number from the array twice. For example: - If the input array is `[2, 7, 11, 15]` and the target is `9`, the function should return `true` because `2 + 7 = 9`. - If the input array is `[3, 2, 4]` and the target is `6`, the function should return `true` because `2 + 4 = 6`. - If the input array is `[3, 3]` and the target is `6`, the function should return `true` because `3 + 3 = 6`. - If the target cannot be achieved, the function should return `false`. You can assume that the input array will always contain at least two numbers.","solution":"def two_sum(arr, target): Determine if any two numbers in the array add up to the target. :param arr: List of integers. :param target: Integer target sum. :return: Boolean whether any two numbers add up to the target. seen = set() for num in arr: complement = target - num if complement in seen: return True seen.add(num) return False"},{"question":"There is an array of unique integers called `arr` and another integer `target`. Your task is to find all combinations of elements in `arr` that add up to the `target`. Each number in `arr` may only be used once in the combination, and the order of numbers in the combination does not matter. Return the combinations in lexicographically sorted order. Example 1: Input: arr = [2, 3, 6, 7] target = 7 Output: [[7]] Explanation: 7 is the only number in the array that adds up to the target. Example 2: Input: arr = [10, 1, 2, 7, 6, 5] target = 8 Output: [[1, 2, 5], [1, 7], [2, 6]] Explanation: These are the combinations of elements in `arr` that add up to 8 in lexicographical order. Your Task: You don\'t need to read input or print anything. Complete the function `combinationSum2()` which takes `arr` and `target` as input parameters and returns a list of lists containing the combinations that sum to the target. Expected Time Complexity: O(2^N * N) Expected Auxiliary Space: O(2^N * N) Constraints: 1 ≤ len(arr) ≤ 20 1 ≤ arr[i] ≤ 50 1 ≤ target ≤ 50","solution":"def combinationSum2(arr, target): arr.sort() # Sort the array to help with lexicographical order result = [] combination = [] def backtrack(start, target): if target == 0: result.append(list(combination)) return if target < 0: return # no valid combination for i in range(start, len(arr)): if i > start and arr[i] == arr[i - 1]: # skip duplicates continue combination.append(arr[i]) backtrack(i + 1, target - arr[i]) combination.pop() backtrack(0, target) return result"},{"question":"Given an array of N integers, write a function that finds the minimum sum of all unique triplets (a, b, c) in the array such that a + b + c is greater than or equal to a given integer K. If there are no such triplets, return -1. Example 1: Input: N = 5, arr[] = {1, 2, 3, 4, 5}, K = 10 Output: 10 Explanation: Only one triplet (2, 3, 5) which sums up to 10. Example 2: Input: N = 4, arr[] = {1, 1, 2, 2}, K = 6 Output: -1 Explanation: No valid triplets have a sum >= 6. Example 3: Input: N = 6, arr[] = {1, 7, 5, 2, 3, 6}, K = 8 Output: 8 Explanation: The triplet (1, 2, 5) sums to 8, which is the minimum possible sum >= 8. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function minTripletSum() that takes array `arr`, integer `N`, and integer `K` as parameters and returns the minimum sum of a triplet that is greater than or equal to `K`. Expected Time Complexity: O(N^2 log N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 5000 1 ≤ arr[i] ≤ 10^5 1 ≤ K ≤ 10^9","solution":"def minTripletSum(arr, N, K): Finds the minimum sum of all unique triplets (a, b, c) in the array such that a + b + c is greater than or equal to given integer K. If there are no such triplets, returns -1. arr.sort() min_sum = float(\'inf\') found = False for i in range(N - 2): l, r = i + 1, N - 1 while (l < r): current_sum = arr[i] + arr[l] + arr[r] if current_sum >= K: found = True min_sum = min(min_sum, current_sum) r -= 1 # Move right pointer to find potentially smaller valid triplet else: l += 1 # Move left pointer to increase sum return min_sum if found else -1"},{"question":"Given a list of positive integers, your task is to find the smallest integer that is not present in the list and is also a prime number. If all prime numbers less than or equal to the maximum value in the list are present, return the next prime number greater than the maximum value in the list. **Examples:** ```python find_smallest_missing_prime([2, 3, 5, 7, 11, 13, 17]) -> 19 find_smallest_missing_prime([4, 6, 8, 10, 12, 14]) -> 2 find_smallest_missing_prime([2, 3, 5, 7, 10, 13, 17]) -> 11 find_smallest_missing_prime([7, 19, 3, 2, 23, 29]) -> 5 find_smallest_missing_prime([5, 7, 11, 13, 19, 23]) -> 2 ``` **Input:** - An array of positive integers `[a1, a2, ..., an]` where `1 <= n <= 10^5` and `1 <= ai <= 10^6`. **Output:** - The smallest missing prime number from the input list. If all primes less than or equal to the maximum value are present, return the next prime number greater than the maximum value in the list. **Notes:** - Implement the function `find_smallest_missing_prime` to solve this problem. - You may precompute the primes using the Sieve of Eratosthenes for efficiency.","solution":"def find_smallest_missing_prime(lst): Finds the smallest missing prime number from the list. If all primes less than or equal to the maximum value are present, returns the next prime number greater than the maximum value in the list. def sieve(n): Implements sieve of Eratosthenes to find all primes <= n is_prime = [True] * (n + 1) p = 2 while (p * p <= n): if (is_prime[p] == True): for i in range(p * p, n + 1, p): is_prime[i] = False p += 1 prime_numbers = [] for p in range(2, n + 1): if is_prime[p]: prime_numbers.append(p) return prime_numbers if not lst: return 2 # If the list is empty, the smallest prime is 2 max_val = max(lst) primes_up_to_max = sieve(max_val) primes_set = set(primes_up_to_max) list_set = set(lst) for prime in primes_up_to_max: if prime not in list_set: return prime # No missing primes, find the next prime after max_val num = max_val + 1 while True: is_prime = True for prime in primes_up_to_max: if prime * prime > num: break if num % prime == 0: is_prime = False break if is_prime: return num num += 1"},{"question":"Create a function that takes an array of integers and returns a new array containing only the elements that are prime numbers. A prime number is defined as a whole number greater than 1 that has no positive divisors other than 1 and itself. The order of the elements in the output array should match the order of their first appearance in the input array. EXAMPLES [2, 3, 4, 5, 6] becomes [2, 3, 5] [10, 12, 13, 15, 17] becomes [13, 17] [29, 33, 37, 39, 41] becomes [29, 37, 41]","solution":"import math def is_prime(n): Helper function to determine if n is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return False return True def filter_primes(arr): Returns a list containing only the prime numbers from the input list. return [x for x in arr if is_prime(x)]"},{"question":"Complete the function that takes a string `s` as input and returns `True` if the string contains any of the following three consecutive patterns: three consecutive identical characters, three consecutive characters in increasing numerical order, or three consecutive characters in increasing alphabetical order. Otherwise, return `False`. Examples ```python s = \\"abc\\" ==> True # \'abc\' (consecutive increasing alphabetical order) s = \\"789\\" ==> True # \'789\' (consecutive increasing numerical order) s = \\"aaa\\" ==> True # \'aaa\' (three consecutive identical characters) s = \\"xyz\\" ==> True # \'xyz\' (consecutive increasing alphabetical order) s = \\"ab7\\" ==> False # No consecutive pattern matches ```","solution":"def contains_three_consecutive_patterns(s): This function checks if the given string contains any of the following patterns: 1. Three consecutive identical characters. 2. Three consecutive characters in increasing numerical order. 3. Three consecutive characters in increasing alphabetical order. Args: s (str): Input string Returns: bool: True if any pattern is found, otherwise False. # Check if the string length is less than 3 if len(s) < 3: return False for i in range(len(s) - 2): if s[i] == s[i+1] == s[i+2]: return True if s[i].isdigit() and s[i+1].isdigit() and s[i+2].isdigit(): if int(s[i]) + 1 == int(s[i+1]) and int(s[i]) + 2 == int(s[i+2]): return True if s[i].isalpha() and s[i+1].isalpha() and s[i+2].isalpha(): if ord(s[i]) + 1 == ord(s[i+1]) and ord(s[i]) + 2 == ord(s[i+2]): return True return False"},{"question":"In many programming languages, a common task is to determine if a string contains only unique characters. Write a function that checks if all the characters in a given string are unique. -----Constraints----- - The string consists of lowercase English letters only. - The length of the string is between 1 and 1000. -----Input----- Input is given from Standard Input in the following format: s -----Output----- If all characters are unique, print \\"YES\\". Otherwise, print \\"NO\\". -----Sample Input----- algorithm -----Sample Output----- YES The string \\"algorithm\\" contains all unique characters. -----Sample Input----- programming -----Sample Output----- NO The string \\"programming\\" contains the character \'r\' twice.","solution":"def is_unique(s): Checks if all characters in the string s are unique. Returns \\"YES\\" if all characters are unique, otherwise returns \\"NO\\". # Using a set to store unique characters unique_chars = set() for char in s: if char in unique_chars: return \\"NO\\" unique_chars.add(char) return \\"YES\\""},{"question":"In a game, you are given a list of integers. A move consists of removing one element from the list. Your goal is to maximize the length of the longest arithmetic subsequence (LAS) that can be obtained from the list after making up to K such moves. An arithmetic subsequence is a sequence of numbers such that the difference between consecutive elements is the same throughout the sequence. ------ Input ------ The first line of the input contains two integers - N (the number of elements in the list) and K (the maximum number of elements that can be removed). The second line contains N integers - the elements of the list. ------ Output ------ Output a single integer - the maximum length of the longest arithmetic subsequence (LAS) after making up to K moves. ------ Example ------ Input: 6 2 4 7 10 6 3 11 Output: 3 ------ Scoring ------ Subtask 1 (10 points): 1 ≤ N ≤ 10, 0 ≤ K ≤ 1 Subtask 2 (20 points): 1 ≤ N ≤ 50, 0 ≤ K ≤ 5 Subtask 3 (30 points): 1 ≤ N ≤ 100, 0 ≤ K ≤ 10 Subtask 4 (40 points): 1 ≤ N ≤ 200, 0 ≤ K ≤ 20","solution":"from collections import defaultdict def max_LAS_after_moves(N, K, arr): def longest_arith_seq_length(nums): if not nums: return 0 n = len(nums) dp = defaultdict(lambda: 1) max_length = 1 for i in range(n): for j in range(i): diff = nums[i] - nums[j] dp[(i, diff)] = dp[(j, diff)] + 1 max_length = max(max_length, dp[(i, diff)]) return max_length max_length = 0 for i in range(2**K): bit_mask = [idx for idx, bit in enumerate(f\\"{i:0{N}b}\\") if bit == \'1\'] if len(bit_mask) <= K: filtered_nums = [num for idx, num in enumerate(arr) if idx not in bit_mask] max_length = max(max_length, longest_arith_seq_length(filtered_nums)) return max_length"},{"question":"You are given a grid of size n × m where each cell contains a single lowercase English letter. Your task is to determine if there exists a cycle of the same character in the grid. A cycle is defined as a path starting and ending at the same cell and visiting at least one other cell. Input The first line contains two integers n and m (2 ≤ n, m ≤ 1000), the number of rows and columns in the grid respectively. The next n lines contain m lowercase English letters each, forming the grid. Output Print \\"YES\\" (without quotes) if there exists a cycle of the same character in the grid. Otherwise, print \\"NO\\". Examples Input 3 4 aaaa abab aaaa Output YES Input 3 3 aba bcb aba Output NO Note In the first sample case, the grid contains multiple cycles of the character \'a\'. In the second sample case, there are no cycles because no character forms a closed path visiting at least one other cell.","solution":"def exists_cycle(n, m, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def is_valid(nx, ny, px, py): return 0 <= nx < n and 0 <= ny < m and (nx != px or ny != py) def dfs(x, y, px, py, char): visited[x][y] = True for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny, px, py) and grid[nx][ny] == char: if not visited[nx][ny]: if dfs(nx, ny, x, y, char): return True elif nx != px or ny != py: return True return False visited = [[False] * m for _ in range(n)] for i in range(n): for j in range(m): if not visited[i][j]: if dfs(i, j, -1, -1, grid[i][j]): return \\"YES\\" return \\"NO\\""},{"question":"In a certain video game, players collect coins by solving puzzles scattered across the map. The game map is represented as a grid with `N` rows and `M` columns. Each cell in the grid either contains a coin (represented by `1`) or is empty (represented by `0`). A player can only move left, right, or down from any cell. A player starts at the upper-left corner of the grid (position `(0,0)`) and aims to collect as many coins as possible when reaching the bottom-right corner of the grid (position `(N-1, M-1)`). Write a function that finds the maximum number of coins a player can collect from the starting position to the end position. # Input - First line: two integers, `N` and `M` (1 ≤ N, M ≤ 1000) representing the number of rows and columns in the grid. - Next `N` lines: each containing `M` integers, each either `0` or `1`, describing the grid. # Output - A single integer representing the maximum number of coins the player can collect. # Example Input ``` 3 4 1 0 0 1 0 1 0 0 1 0 0 1 ``` Output ``` 3 ``` # Note In the provided example, the player can collect 3 coins by following this path: (0,0) → (0,1) → (0,2) → (0,3) → (1,3) → (2,3). The cells with coins collected in this path are (0,0), (0,3), and (2,3), totaling 3 coins. **Constraints:** - Players can only move right or down. - The grid is guaranteed to have at least one path from the start to the destination.","solution":"def max_coins(N, M, grid): Returns the maximum number of coins a player can collect from (0,0) to (N-1,M-1) in a given grid. # Initialize a dp array with zeros dp = [[0] * M for _ in range(N)] # Base case: starting position dp[0][0] = grid[0][0] # Fill the dp array for i in range(N): for j in range(M): if i > 0: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) if j > 0: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) return dp[N-1][M-1]"},{"question":"# Description Write a function to determine if a given string containing parentheses, brackets, and curly braces is valid. The string is considered valid if all opening brackets have a corresponding closing bracket of the same type, and they close in the proper order. The algorithm is as follows: * Use a stack to keep track of the opening brackets. * When encountering an opening bracket (`(`, `{`, `[`), push it to the stack. * When encountering a closing bracket (`)`, `}`, `]`), check if the stack is not empty and if the top of the stack is the correct matching opening bracket. If it matches, pop the stack. If it doesn\'t match or the stack is empty, the string is invalid. * After processing all characters, the string is valid if the stack is empty. If the stack is not empty, it means there are unmatched opening brackets. The input is a string that contains only the characters `(){}[]`. Return `True` if the input string is valid, otherwise return `False`. # Examples `is_valid_brackets(\\"()\\") # True` `is_valid_brackets(\\"()[]{}\\") # True` `is_valid_brackets(\\"(]\\") # False` `is_valid_brackets(\\"([)]\\") # False` `is_valid_brackets(\\"{[]}\\") # True` For reference, see https://en.wikipedia.org/wiki/Bracket_%28mathematics%2C_in programming%2C_in_scientific notation%29","solution":"def is_valid_brackets(s): Returns True if the input string containing parentheses, brackets, and curly braces is valid. stack = [] matching_bracket = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in matching_bracket: top_element = stack.pop() if stack else \'#\' if matching_bracket[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Write a function that takes a string composed of lowercase alphabets and removes the characters to ensure that no two adjacent characters are the same. If multiple ways of removing characters exist in order to achieve this goal, return the lexicographically smallest string. Function Signature: ```python def remove_adjacent_duplicates(s: str) -> str: ``` Input: - A single string `s` (1 ≤ |s| ≤ 1000) composed of lowercase letters. Output: - Return a string after removing necessary characters so that no two adjacent characters are the same, which should be lexicographically smallest. Examples: ```python assert remove_adjacent_duplicates(\\"abbaca\\") == \\"aa\\" assert remove_adjacent_duplicates(\\"bcabc\\") == \\"babc\\" assert remove_adjacent_duplicates(\\"aabccbabc\\") == \\"abcbabc\\" ``` Explanation: 1. In the first example, \\"abbaca\\" -> \\"abba\\" -> \\"aa\\". 2. In the second example, \\"bcabc\\" is already in the desired form after removing duplicates. 3. In the third example, \\"aabccbabc\\" -> \\"aabcbabc\\" -> \\"abcbabc\\", which is lexicographically smallest.","solution":"def remove_adjacent_duplicates(s: str) -> str: Takes a string composed of lowercase alphabets and removes characters to ensure no two adjacent characters are the same and returns the lexicographically smallest string. stack = [] for char in s: if stack and stack[-1] == char: continue stack.append(char) return \'\'.join(stack)"},{"question":"Sarah loves playing a game where she rearranges letters of words to find anagrams. A word is an anagram of another word if you can rearrange its letters to form the other word. For example, the words \\"listen\\" and \\"silent\\" are anagrams of each other. One day, Sarah came across a huge dictionary and was curious if she could write a program to determine if two words are anagrams of each other. She could then search for anagrams directly instead of puzzling her way through manually. Write a function that, given two words, determines if they are anagrams of each other. -----Input----- The first line of input contains a single word w1 (1 ≤ |w1| ≤ 100). The second line of input contains another word w2 (1 ≤ |w2| ≤ 100). -----Output----- Output \\"YES\\" if the words are anagrams of each other. Otherwise, output \\"NO\\". -----Examples----- Sample Input 1: listen silent Sample Output 1: YES Sample Input 2: hello billion Sample Output 2: NO","solution":"def are_anagrams(w1, w2): Determines if two words are anagrams of each other. :param w1: First word :param w2: Second word :return: \\"YES\\" if words are anagrams, otherwise \\"NO\\" # Sort characters of both words and compare if sorted(w1) == sorted(w2): return \\"YES\\" else: return \\"NO\\""},{"question":"# Matrix Spiral Traversal Given a 2D matrix, your task is to traverse it in a spiral order. Start from the top-left corner of the matrix and move right, then move down the last column, then across the bottom row from right to left, and finally move up the first column. Repeat this process for the remaining sub-matrix until you have traversed all elements in the grid. Input * An integer `n`, representing the number of rows in the matrix (1 <= n <= 100). * An integer `m`, representing the number of columns in the matrix (1 <= m <= 100). * A 2D list `matrix`, containing `n` rows and `m` columns of integers. Output * A list of integers representing the elements of the matrix in spiral order. Example ```python Input: n = 3 m = 3 matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [1, 2, 3, 6, 9, 8, 7, 4, 5] ``` Notes * You can assume the matrix will always be non-empty. * Try to traverse the matrix in-place without using extra space for storing intermediate results. Function Signature ```python def spiral_order(matrix: List[List[int]]) -> List[int]: pass ```","solution":"from typing import List def spiral_order(matrix: List[List[int]]) -> List[int]: result = [] if not matrix: return result top, bottom = 0, len(matrix) - 1 left, right = 0, len(matrix[0]) - 1 while top <= bottom and left <= right: # Traverse from left to right for i in range(left, right + 1): result.append(matrix[top][i]) top += 1 # Traverse downwards for i in range(top, bottom + 1): result.append(matrix[i][right]) right -= 1 if top <= bottom: # Traverse from right to left for i in range(right, left - 1, -1): result.append(matrix[bottom][i]) bottom -= 1 if left <= right: # Traverse upwards for i in range(bottom, top - 1, -1): result.append(matrix[i][left]) left += 1 return result"},{"question":"In a faraway kingdom, a wise ruler has decided to compress his vast library of scrolls to save space. Each scroll is made of a unique, magical paper that has a distinct feature - each can be compressed to different extents depending on its content. You are given n scrolls. Each scroll i has a pre-compression length l_{i} and a compression factor c_{i}. The goal is to determine the minimum total length of the n scrolls after compression so that the scrolls can be stored in a given storage space efficiently. The scrolls are sorted by their pre-compression lengths in non-decreasing order, i.e. if i < j then l_{i} ≤ l_{j}. Scroll i can be compressed to length (l_{i} / c_{i}). Note, scrolls cannot be rearranged once sorted and compression factors can\'t be re-used i.e. each scroll uses its own compression factor. -----Input----- The first line contains an integer n (1 ≤ n ≤ 200 000) — the number of scrolls. The next n lines contain two integers l_{i} and c_{i} (1 ≤ l_{i} ≤ 10^9, 1 ≤ c_{i} ≤ 10^9) — the pre-compression length and the compression factor of the i-th scroll. -----Output----- Print one integer — the minimum total length of the scrolls after compression. -----Examples----- Input 4 100 2 300 4 500 2 700 7 Output 675 Input 3 10 1 20 2 30 3 Output 50 -----Note----- In the first sample, the optimal solution is to compress each scroll to the minimum possible length: - Compress the first scroll to 50 (100 / 2) - Compress the second scroll to 75 (300 / 4) - Compress the third scroll to 250 (500 / 2) - Compress the fourth scroll to 100 (700 / 7), yielding a total length of 50 + 75 + 250 + 100 = 475. In the second sample, the scrolls are initially sorted and compressed as follows: - The first scroll remains 10 (10 / 1 = 10) - Compress the second scroll to 10 (20 / 2) - Compress the third scroll to 10 (30 / 3), yielding a total length of 10 + 10 + 10 = 30.","solution":"def minimum_total_length(n, scrolls): Computes the minimum total length of n scrolls after compression. Parameters: n (int): Number of scrolls scrolls (list of tuples): Each tuple contains two integers, the pre-compression length and the compression factor of the scroll Returns: int: Minimum total length of the scrolls after compression total_length = 0 for (l, c) in scrolls: total_length += l // c return total_length"},{"question":"You are given a list of non-negative integers representing the amount of money of each house in a row. You are a professional robber planning to rob houses along this street. Each house has a security system, and if two adjacent houses are robbed on the same night, the security systems will automatically contact the police. Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. For example, given the following list of house values: [2, 7, 9, 3, 1] The maximum amount of money you can rob is 12 (i.e., rob houses with values 2, 9, and 1). Note: Bonus point if you can solve this problem using O(n) time complexity and O(1) extra space.","solution":"def rob(nums): Returns the maximum amount of money you can rob tonight without alerting the police. The approach uses dynamic programming with O(1) extra space. if not nums: return 0 if len(nums) == 1: return nums[0] prev1, prev2 = 0, 0 for amount in nums: current = max(prev1, prev2 + amount) prev2 = prev1 prev1 = current return prev1"},{"question":"A student is trying to optimize their study schedule for an upcoming exam. They have a list of study sessions they can attend, each with a start and end time. The student wants to attend as many non-overlapping sessions as possible. Given the list of study sessions, determine the maximum number of non-overlapping sessions the student can attend. -----Input----- The first line contains an integer n (1 leq n leq 1000), the number of study sessions. Each of the next n lines contains two integers s_i and e_i (0 leq s_i < e_i leq 10000), the start and end times of each study session. -----Output----- Output one integer, the maximum number of non-overlapping sessions the student can attend. -----Examples----- Sample Input: 4 1 3 2 4 3 5 6 8 Sample Output: 3","solution":"def max_non_overlapping_sessions(n, sessions): Returns the maximum number of non-overlapping sessions the student can attend. :param n: int, the number of study sessions :param sessions: list of tuples, each tuple contains the start and end time of a session :return: int, max number of non-overlapping sessions # Sort sessions by their end time sessions.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in sessions: if start >= last_end_time: count += 1 last_end_time = end return count # Example usage: # n = 4 # sessions = [(1, 3), (2, 4), (3, 5), (6, 8)] # print(max_non_overlapping_sessions(n, sessions)) # Output: 3"},{"question":"Write a function that takes a string containing both lowercase letters and digits and returns a new string where the digits are repositioned such that they are in ascending order, but the relative positions of the letters remain the same. For example, `reorder_digits(\\"a1b3c2\\")` should return `\\"a1b2c3\\"`. Good luck! Please also try [Is Unique?](https://www.codewars.com/kata/553e8b195b853c6db4000048)","solution":"def reorder_digits(s): Given a string containing both lowercase letters and digits, this function returns a new string where the digits are repositioned in ascending order, but the relative positions of the letters remain the same. # Separate digits and letters digits = sorted([char for char in s if char.isdigit()]) digit_index = 0 # Build the result string by replacing digits with sorted ones result = [] for char in s: if char.isdigit(): result.append(digits[digit_index]) digit_index += 1 else: result.append(char) return \\"\\".join(result)"},{"question":"You are given an array b_0, b_1, ..., b_{M-1} of length M. Process P operations of the following types. The type of i-th operation is represented by O_i. * O_i=1: You are given an integer Y_i. Append Y_i to the end of the array. * O_i=2: You are given two integers I_i, J_i. Reverse the sub-array b_{I_i}, b_{I_i+1}, ..., b_{J_i}. * O_i=3: You are given an integer K_i. Remove the K_i-th element from the array. * O_i=4: Output the array. Constraints * 1 leq M leq 10^5 * 0 leq b_i leq 10^9 * 1 leq P leq 10^5 * 1 leq O_i leq 4 * 1 leq Y_i leq 10^9 (O_i=1) * 0 leq I_i leq J_i < length of the array (O_i=2) * 0 leq K_i < length of the array (O_i=3) * All values in Input are integers. Input Input is given from Standard Input in the following format: M P b_1 b_2 cdots b_M First operation Second operation vdots P-th operation Each operation is given in the following format: If O_i=1 or 3, O_i Y_i If O_i=2, O_i I_i J_i If O_i=4, O_i Output For each operation with O_i=4, print the array. Example Input 3 6 1 2 3 1 4 2 0 2 4 3 1 4 1 5 Output 4 1 2 3 1 3","solution":"def process_operations(M, P, array, operations): results = [] for operation in operations: if operation[0] == 1: # Append Y_i to the end of the array array.append(operation[1]) elif operation[0] == 2: # Reverse the sub-array array[I_i:J_i+1] I_i = operation[1] J_i = operation[2] array[I_i:J_i+1] = array[I_i:J_i+1][::-1] elif operation[0] == 3: # Remove the K_i-th element from the array K_i = operation[1] array.pop(K_i) elif operation[0] == 4: # Output the array results.append(\' \'.join(map(str, array))) return results"},{"question":"In the land of Hexlantis, there are hexagonal tiles of different colors that form a seamless, infinite tessellation. The king of Hexlantis has issued a decree for creating a specific pattern with these colored hexagonal tiles to mark a special event. You have been tasked with writing a program to generate the required pattern based on specific rules. Each tile can be in one of the six cardinal directions around any given tile: North-East (NE), East (E), South-East (SE), South-West (SW), West (W), and North-West (NW). # Task: You need to determine the color of a tile specified by its coordinates in the hexagonal grid. The tiles at coordinates (i, j) are colored according to a fixed rule: if (i + j) is even, use Color A; otherwise, use Color B. # Movement Directions: - **North-East (NE)**: Move to (i-1, j+1) - **East (E)**: Move to (i, j+1) - **South-East (SE)**: Move to (i+1, j) - **South-West (SW)**: Move to (i+1, j-1) - **West (W)**: Move to (i, j-1) - **North-West (NW)**: Move to (i-1, j) # Input: - The input consists of a single line with two integers i and j, representing the coordinates of the tile, where -100000 le i, j le 100000. # Output: - Output a single line containing \\"Color A\\" if the tile at coordinates (i, j) is colored with Color A, or \\"Color B\\" if it is colored with Color B. # Examples: Sample Input 1: ``` 0 0 ``` Sample Output 1: ``` Color A ``` Sample Input 2: ``` 2 3 ``` Sample Output 2: ``` Color B ``` Sample Input 3: ``` -1 1 ``` Sample Output 3: ``` Color B ```","solution":"def determine_tile_color(i, j): Determines the color of the tile at coordinates (i, j) based on the sum of i and j. Parameters: - i (int): The i-coordinate of the tile. - j (int): The j-coordinate of the tile. Returns: - str: \\"Color A\\" if (i + j) is even, \\"Color B\\" otherwise. if (i + j) % 2 == 0: return \\"Color A\\" else: return \\"Color B\\""},{"question":"Given an integer array nums[] of size N, find the single element that appears only once in the array. All other elements appear exactly twice. Your solution should have a linear runtime complexity and use only constant extra space. Example 1: Input: N = 5, nums[] = {4, 1, 2, 1, 2} Output: 4 Explanation: Every element except 4 appears twice, so the element that appears only once is 4. Example 2: Input: N = 3, nums[] = {2, 2, 1} Output: 1 Explanation: Every element except 1 appears twice, so the element that appears only once is 1. Your Task: This is a function problem. You don\'t need to take any input, as it is already accomplished by the driver code. You just need to complete the function singleNumber() that takes array nums[] and integer N as parameters and returns the desired output. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^6 0 ≤ nums[i] ≤ 10^9","solution":"def singleNumber(nums): Finds the single element that appears only once in the array, with a linear runtime complexity and constant extra space. :param nums: List of integers where every element appears twice except one. :return: The single integer that appears only once. single_element = 0 for num in nums: single_element ^= num return single_element"},{"question":"Given two strings s1 and s2 of equal length, write a function to check if s2 is a rotation of s1 using only one call to a substring checking method. Example 1: Input: s1 = \\"waterbottle\\", s2 = \\"erbottlewat\\" Output: True Explanation: s2 is a rotation of s1 as \\"erbottlewat\\" is \\"waterbottle\\" rotated in a certain way. Example 2: Input: s1 = \\"hello\\", s2 = \\"llohe\\" Output: True Explanation: s2 is a rotation of s1 as \\"llohe\\" is \\"hello\\" rotated in a certain way. Example 3: Input: s1 = \\"apple\\", s2 = \\"paple\\" Output: False Explanation: s2 is not a rotation of s1 as no rotation of \\"apple\\" can produce \\"paple\\". Your Task: You only need to implement the function isRotation() that takes two strings s1 and s2 as input and returns a boolean value (True or False) indicating whether s2 is a rotation of s1 or not. Constraints: - The strings s1 and s2 are of equal length and have at most 100 characters. - Expected Time Complexity: O(N) - Expected Space Complexity: O(1)","solution":"def isRotation(s1, s2): Check if s2 is a rotation of s1. Args: s1 (str): first string s2 (str): second string to check if it is a rotation of the first string Returns: bool: True if s2 is a rotation of s1, False otherwise if len(s1) != len(s2): return False return s2 in (s1 + s1)"},{"question":"Write a program that reads an integer n and then n space-separated integers. The program should check if the list of numbers is sorted in non-decreasing order. Print \\"Sorted\\" if it is sorted, otherwise print \\"Unsorted\\". Constraints * 1 ≤ n ≤ 100 * -10^5 ≤ each integer ≤ 10^5 Input An integer n followed by a list of n space-separated integers. Output Print \\"Sorted\\" if the list is sorted in non-decreasing order, otherwise print \\"Unsorted\\". Examples Input 5 1 2 3 4 5 Output Sorted Input 4 1 3 2 4 Output Unsorted","solution":"def check_sorted(n, arr): This function checks if a list of integers is sorted in non-decreasing order. n: integer, number of elements in the list arr: list of integers Returns \\"Sorted\\" if the list is sorted in non-decreasing order, otherwise returns \\"Unsorted\\". for i in range(1, n): if arr[i-1] > arr[i]: return \\"Unsorted\\" return \\"Sorted\\""},{"question":"Implement the function **sortByDigitSum** that takes a list of non-negative integers and sorts it in ascending order based on the sum of the digits of each integer. If two integers have the same digit sum, they should be ordered by their original value. For example: ```python sortByDigitSum([56, 32, 103, 12, 97]) ``` Should return: ```python [12, 32, 103, 56, 97] ``` Explanation: - Sum of digits for 56: 5 + 6 = 11 - Sum of digits for 32: 3 + 2 = 5 - Sum of digits for 103: 1 + 0 + 3 = 4 - Sum of digits for 12: 1 + 2 = 3 - Sum of digits for 97: 9 + 7 = 16 Thus, the sorted order by digit sums becomes [12 (sum=3), 32 (sum=5), 103 (sum=4), 56 (sum=11), 97 (sum=16)] which sorts to [12, 32, 103, 56, 97].","solution":"def sortByDigitSum(arr): Sorts the list of non-negative integers based on the sum of their digits. If two numbers have the same digit sum, they are ordered by their original value. Args: arr (list of int): List of non-negative integers to sort. Returns: list of int: Sorted list. def digit_sum(n): return sum(int(digit) for digit in str(n)) return sorted(arr, key=lambda x: (digit_sum(x), x))"},{"question":"Given a list of positive integers representing the heights of consecutive buildings, in which each building can receive direct sunlight from the west to the east. A building will cast a shadow on any building to its right if it is taller or of equal height. Your task is to determine the number of buildings that can receive direct sunlight. Example: Input: [7, 4, 8, 2, 9] Output: 3 Explanation: Building heights are 7, 4, 8, 2, 9. Three buildings (7, 8, and 9) receive direct sunlight as the buildings to their left are shorter. Note: The length of the input list is in the range [1, 10,000]. The height of each building is a positive integer within the range [1, 100,000].","solution":"def count_sunlight_buildings(buildings): Returns the number of buildings that can receive direct sunlight. count = 0 max_height = 0 for height in buildings: if height > max_height: count += 1 max_height = height return count"},{"question":"Write a function `mergeArraysUnique` that takes two arrays of integers as input, merges them into a single array, and returns the sorted array without any duplicates. The function should handle both positive and negative integers. A few cases: ``` { mergeArraysUnique([1, 3, 3, 5], [2, 3, 6, 7]) -> [1, 2, 3, 5, 6, 7] mergeArraysUnique([10, -1, 0], [-1, -10, 0]) -> [-10, -1, 0, 10] mergeArraysUnique([], [1, 2, 3]) -> [1, 2, 3] mergeArraysUnique([1, 2, 3], []) -> [1, 2, 3] } ```","solution":"def mergeArraysUnique(arr1, arr2): Merges two arrays into a single sorted array with unique elements. merged_set = set(arr1) | set(arr2) # Union of two sets to remove duplicates result = sorted(merged_set) # Convert set to sorted list return result"},{"question":"A large food distribution company wants to optimize its delivery routes across multiple cities. You are tasked to implement a program that helps in computing the shortest possible route to deliver food to all cities in a given list and return to the original city. This problem is often referred to as the \\"Travelling Salesman Problem\\" (TSP). The cities are represented as points in a 2D plane. Each city has an (x, y) coordinate. Your program should calculate the shortest possible route that visits each city exactly once and returns to the starting city. Input The input consists of multiple test cases. Each test case starts with an integer n (2 ≤ n ≤ 100), representing the number of cities. It is followed by n lines, each containing two integers x and y (-1000 ≤ x, y ≤ 1000) representing the coordinates of each city. The end of input is indicated by a test case with n = 0, which should not be processed. Output For each test case, output the length of the shortest possible route. Your output should be formatted to six decimal places. Example Input 4 0 0 0 1 1 0 1 1 3 0 0 2 0 4 0 0 Output 4.000000 8.000000 Note: - The distance between two cities (x1, y1) and (x2, y2) is given by the Euclidean distance formula: sqrt((x2 - x1)^2 + (y2 - y1)^2). - Use algorithms such as dynamic programming or backtracking to find the shortest route efficiently.","solution":"import math from itertools import permutations def distance(city1, city2): Calculate Euclidean distance between two cities. return math.sqrt((city2[0] - city1[0])**2 + (city2[1] - city1[1])**2) def travelling_salesman(cities): Calculates the shortest possible route to visit all cities and return to the starting city. n = len(cities) # Generate all possible permutations of cities min_path_length = float(\'inf\') for perm in permutations(cities): path_length = 0 for i in range(n): path_length += distance(perm[i], perm[(i + 1) % n]) min_path_length = min(min_path_length, path_length) return min_path_length def solve_tsp_problems(input_data): Solves multiple TSP problems given the input format. problems = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(problems): n = int(problems[index]) index += 1 if n == 0: break cities = [] for _ in range(n): x, y = map(int, problems[index].split()) cities.append((x, y)) index += 1 shortest_route_length = travelling_salesman(cities) results.append(f\\"{shortest_route_length:.6f}\\") return results"},{"question":"Given an array of integers, find the length of the longest contiguous subarray such that all elements have the same value. Example Input N = 8 arr = [1, 2, 2, 3, 3, 3, 2, 2] Output 3 Explanation: The longest contiguous subarray with the same value is [3, 3, 3], with a length of 3. Example Input N = 5 arr = [1, 1, 1, 1, 1] Output 5 Explanation: The longest contiguous subarray with the same value is [1, 1, 1, 1, 1], with a length of 5. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^5 -10^9 <= arr[i] <= 10^9","solution":"def longest_contiguous_subarray(arr): Returns the length of the longest contiguous subarray such that all elements have the same value. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 max_length = max(max_length, current_length) return max_length"},{"question":"You are an architect designing a complex digital system for a new smart city project named FutureCity. The city plans to integrate intelligent traffic lights to optimize traffic flow dynamically. Your task is to develop a crucial component of the traffic management system. Each intersection in FutureCity has multiple traffic lights, and each light can change between green and red. For simplicity, think of the traffic lights at an intersection as a binary string, where \'1\' represents green and \'0\' represents red. A \\"good\\" intersection is defined as one where there is at least one green light (\'1\'). In FutureCity, the central control system needs to update the state of the traffic lights across several intersections based on specific rules. However, changing the state of a single traffic light is costly, and the system should always ensure all intersections remain \\"good\\". The task is to determine the minimum number of traffic light state changes required to make all intersections \\"good\\". -----Input----- The first line of input consists of an integer T - the number of test cases. Each test case is of the following format: First line contains an integer N - the number of intersections in FutureCity. Each of the next N lines contains a binary string representing the state of the traffic lights at an intersection. -----Output----- For each test case, output a single integer on a new line - the minimum number of changes required to ensure all intersections are \\"good\\". -----Constraints----- - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 - 1 ≤ Length of each binary string ≤ 100 -----Example----- Input: 2 3 0101 0000 1110 2 000 101 Output: 1 1 -----Explanation----- Test case 1: - Intersection 1 is already \\"good\\" (contains at least one \'1\'). - Intersection 2 needs 1 change to become \\"good\\". We can change any \'0\' to \'1\', resulting in \\"1000\\". - Intersection 3 is already \\"good\\". Test case 2: - Intersection 1 needs 1 change to become \\"good\\". We can change any \'0\' to \'1\', resulting in \\"100\\". - Intersection 2 is already \\"good\\".","solution":"def minimum_changes(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] intersections = test_cases[i][1] changes_required = 0 for intersection in intersections: if \'1\' not in intersection: changes_required += 1 # need at least one \'1\' results.append(changes_required) return results"},{"question":"You are given an array of integers representing the heights of a sequence of buildings. Your task is to calculate the amount of rainwater that can be trapped between the buildings while it rains. Write a function that computes the total amount of trapped rainwater. Input format The input consists of: - The first line contains an integer n (1 ≤ n ≤ 105) — the number of buildings. - The second line contains n non-negative integers separated by spaces, where each integer represents the height of the building. Output format Output a single integer — the total amount of trapped rainwater. Examples Input 6 0 1 0 2 1 0 Output 1 Input 7 3 0 0 2 0 4 0 Output 10 Note In the first example, the buildings can trap 1 unit of water between heights 1 and 2. In the second example, the trapped water is calculated as follows: - Between the first and fourth buildings (3, 0, 0, 2): 3 units of water are trapped. - Between the fourth and sixth buildings (2, 0, 4): 6 units of water are trapped. - Between sixth and seventh buildings (4, 0): 1 unit of water is trapped. Hence, the total trapped rainwater is 3 + 6 + 1 = 10.","solution":"def calculate_trapped_rainwater(n, heights): if n == 0: return 0 left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - heights[i] return trapped_water"},{"question":"Petya loves playing with blocks. He has `n` blocks, each of width `1` and varying heights. He stacks them in a line, creating a block wall. Petya wants to paint this wall but the paint is expensive so he wants to minimize the cost. The cost of painting the wall can be described as the sum of differences in heights between adjacent blocks. However, as the paint flows easily over smaller height differences, the cost for each adjacent block pair is simply the absolute difference in their heights. ___ Example: Let\'s say there\'s a wall consisting of 5 blocks with heights `3, 1, 4, 1, 2`. The cost of painting the wall will be determined by the sum of absolute differences between heights of adjacent blocks: For blocks `3` and `1`, the cost is `|3 - 1| = 2`. For blocks `1` and `4`, the cost is `|1 - 4| = 3`. For blocks `4` and `1`, the cost is `|4 - 1| = 3`. For blocks `1` and `2`, the cost is `|1 - 2| = 1`. So, the total painting cost will be `2 + 3 + 3 + 1 = 9`. ____ Petya would like to rearrange the blocks in such a way that the cost of painting the wall is minimized. Help Petya determine the minimal possible cost. Output: The minimal possible sum of absolute differences between heights of adjacent blocks after rearranging the blocks. **Note:** You should consider performance in your implementation.","solution":"def minimal_painting_cost(heights): Returns the minimal possible painting cost after rearranging the blocks. The optimal way to minimize cost is to sort the blocks in non-decreasing order. sorted_heights = sorted(heights) total_cost = 0 for i in range(1, len(sorted_heights)): total_cost += abs(sorted_heights[i] - sorted_heights[i-1]) return total_cost"},{"question":"In a company, employees are awarded monthly bonuses based on their individual performance scores. The HR department wants a system in place that can quickly determine which employees will receive these bonuses. Each employee\'s performance score depends on three metrics: teamwork, punctuality, and productivity. Given an array of employee records, where each record consists of the employee\'s name and their scores in teamwork, punctuality, and productivity, determine the top performer for the given month. The top performer is the employee with the highest total score (sum of teamwork, punctuality, and productivity scores). If multiple employees have the same top score, the employee who appears first in the list should be considered the top performer. ------ Input Format ------ - The first line contains a single integer N — the number of employees. - The next N lines each contain an employee\'s name (a string) followed by three integers representing their performance scores in teamwork, punctuality, and productivity. ------ Output Format ------ Output the name of the employee who is the top performer for the given month. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ score ≤ 1000 for each teamwork, punctuality, and productivity ----- Sample Input 1 ------ 5 Alice 500 600 700 Bob 800 750 650 Charlie 300 400 500 David 800 750 650 Eve 900 950 1000 ----- Sample Output 1 ------ Eve ----- Explanation 1 ------ Eve has the highest score with a total of 2850. Hence, she is the top performer for the month. ----- Sample Input 2 ------ 3 Sam 300 400 500 Max 300 400 500 John 300 400 500 ----- Sample Output 2 ------ Sam ----- Explanation 2 ------ All employees have the same total score of 1200. Sam appears first in the list, so he is considered the top performer.","solution":"def find_top_performer(records): Determines the top performer based on the sum of teamwork, punctuality, and productivity scores. Args: records (list of tuples): A list where each tuple contains an employee\'s name (str) and their three scores (int). Returns: str: The name of the top performer. top_performer = \\"\\" highest_score = -1 for record in records: name, teamwork, punctuality, productivity = record total_score = teamwork + punctuality + productivity if total_score > highest_score: highest_score = total_score top_performer = name return top_performer"},{"question":"Nina has a list of N integers and needs to quickly find out if there is a subsequence of this list whose sum is divisible by K. A subsequence is a sequence that can be derived from the list by deleting some or no elements without changing the order of the remaining elements. Given the values of N and K, and the list of N integers, help Nina by determining whether such a subsequence exists. -----Note:----- - If there exists at least one valid subsequence, print \\"YES\\". - If no such subsequence exists, print \\"NO\\". -----Input:----- - First line contains T, the number of test cases. - For each test case, the first line contains two integers N (the length of the list) and K. - The second line contains N space-separated integers, representing the list of integers. -----Output:----- For each test case, output \\"YES\\" or \\"NO\\" in a single line based on whether there exists a subsequence whose sum is divisible by K. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 100 - 1 leq K leq 10^6 - -10^9 leq elements leq 10^9 -----Sample Input:----- 2 3 5 4 1 3 4 9 7 8 -5 12 -----Sample Output:----- YES NO","solution":"def is_subsequence_sum_divisible(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][:2] arr = test_cases[i][2] mod_seen = set() current_mod = 0 mod_seen.add(current_mod) for number in arr: current_mod = (current_mod + number) % K if current_mod == 0 or current_mod in mod_seen: results.append(\\"YES\\") break mod_seen.add(current_mod) else: results.append(\\"NO\\") return results"},{"question":"-----Problem Statement----- Write a program that accepts two numbers, a and b, and outputs their sum. -----Input----- The only line contains two integers separated by a space. -----Output----- Output the sum of the two integers in a single line. -----Constraints----- - 0 ≤ a, b ≤ 105 -----Sample Input----- 45 58 -----Sample Output----- 103","solution":"def sum_two_numbers(input_string): Accepts a single input string containing two integers separated by a space, and returns their sum. Parameters: input_string (str): A string with two space-separated integers. Returns: int: The sum of the two integers. a, b = map(int, input_string.split()) return a + b"},{"question":"You are given a list of n integers, where each integer is associated with an index from 1 to n. Your task is to partition this list into contiguous subarrays such that each subarray is of the same length and contains unique numbers. Determine if such a partition is possible and, if it is, provide one possible partition. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 1000) — the number of integers in the list and the desired length of each subarray, respectively. The second line contains n distinct integers a_1, a_2, ..., a_n (-1000 ≤ a_i ≤ 1000, a_i ≠ a_j for i ≠ j) — the elements of the list. Output If it is not possible to partition the list into contiguous subarrays of length k with unique elements, output \\"NO\\". If it is possible, output \\"YES\\" in the first line. In the next lines, output the partition into subarrays, where each subarray is on a new line and contains k space-separated integers. Examples Input 5 2 1 2 3 4 5 Output NO Input 6 3 3 2 5 4 1 6 Output YES 3 2 5 4 1 6 Note In the first sample, it is not possible to partition the given list into subarrays of length 2 with unique elements. In the second sample, the list can be partitioned into two subarrays of length 3, each containing unique elements.","solution":"def partition_into_subarrays(n, k, arr): Partition the list into contiguous subarrays of the same length with unique numbers. Parameters: n (int): The number of integers in the list. k (int): The desired length of each subarray. arr (list of int): The list of integers. Returns: tuple: (\'YES\', list of subarrays) if partition is possible, otherwise (\'NO\',). if n % k != 0: return (\'NO\',) result = [] for i in range(0, n, k): subarray = arr[i:i+k] result.append(subarray) return (\'YES\', result)"},{"question":"Given a string s consisting of only the characters \'a\' and \'b\', you are allowed to remove at most one substring consisting of consecutive characters. You need to determine if you can obtain a string that is either all \'a\'s or all \'b\'s. Return true if you can achieve this by removing at most one substring consisting of consecutive characters, otherwise return false. Example 1: Input: s = \\"aaabbb\\" Output: true Explanation: You can remove the substring \\"aaa\\" to get \\"bbb\\". Example 2: Input: s = \\"aabb\\" Output: true Explanation: You can remove the substring \\"aa\\" or \\"bb\\" to obtain a string consisting of a single character. Example 3: Input: s = \\"abab\\" Output: false Explanation: There is no way to remove a substring to get a string of only \'a\'s or only \'b\'s. Example 4: Input: s = \\"aaaa\\" Output: true Explanation: The string is already all \'a\'s. Example 5: Input: s = \\"abba\\" Output: true Explanation: You can remove the substring \\"bb\\" to get \\"aaa\\". Constraints: 1 <= s.length <= 105 s consists of only the characters \'a\' and \'b\'.","solution":"def can_transform_to_single_char_string(s): Returns True if we can obtain a string that is either all \'a\'s or all \'b\'s by removing at most one substring consisting of consecutive characters. # Check if the string is already all \'a\'s or all \'b\'s if s.count(\'a\') == 0 or s.count(\'b\') == 0: return True # Loop through the string and try to remove one substring count_transitions = 0 for i in range(1, len(s)): if s[i] != s[i - 1]: count_transitions += 1 # There can only be at most one transition (\'ab\' or \'ba\') that we are allowed to remove return count_transitions <= 2"},{"question":"Repeated Substring Pattern You are given a string `s`. You need to determine whether it can be constructed by taking a substring of it and appending multiple copies of the substring together. Input The input consists of a single string `s` (1 ≤ |s| ≤ 10^4), where `|s|` represents the length of the string. The string will contain only lowercase English letters. Output Print \\"YES\\" if the string can be constructed by appending multiple copies of a substring, otherwise, print \\"NO\\". Examples Input abab Output YES Input aba Output NO Input abcabcabcabc Output YES Note In the first example, the string \\"abab\\" can be constructed by appending the substring \\"ab\\" twice, so the answer is \\"YES\\". In the second example, the string \\"aba\\" cannot be constructed by appending a substring multiple times, so the answer is \\"NO\\". In the third example, the string \\"abcabcabcabc\\" can be constructed by appending the substring \\"abc\\" four times, so the answer is \\"YES\\".","solution":"def repeated_substring_pattern(s): Determine if the string can be constructed by appending multiple copies of a substring. Args: s (str): Input string containing only lowercase English letters. Returns: str: \\"YES\\" if the string can be constructed by appending multiple copies of a substring, otherwise \\"NO\\". n = len(s) for i in range(1, n // 2 + 1): if n % i == 0: substring = s[:i] if substring * (n // i) == s: return \\"YES\\" return \\"NO\\""},{"question":"\'Your\' company, HelloWorld Inc., is developing a new text-editing software targeted for professional authors and editors who constantly deal with large documents. One of the features to be implemented in this software is \'search and replace\', which allows users to replace all occurrences of a specific word with another in a given text. You are to write a function that will perform this \'search and replace\' operation on a given text. However, to ensure accuracy and avoid replacing parts of words (for example, replacing \'art\' in \'start\' should not be allowed), the function should replace whole words only. Words are defined as sequences of alphabetic characters. -----Input----- - The first line consists of a single integer T (1 ≤ T ≤ 100), denoting the number of test cases. - The first line of each test case contains a string S (1 ≤ |S| ≤ 10^5), the text in which the replacements need to be made. - The second line of each test case contains a string A (1 ≤ |A| ≤ 100), the word that needs to be replaced. - The third line of each test case contains a string B (1 ≤ |B| ≤ 100), the word that will replace word A. The input strings contain only lowercase and uppercase alphabetic characters and spaces. -----Output----- For each test case, output the modified text after all occurrences of the word A in the text have been replaced with word B. Each modified text should be printed in its own line. -----Sample Input----- 3 the quick brown fox jumps over the lazy dog the a hello world hello hello hi one two one one three -----Sample Output----- a quick brown fox jumps over a lazy dog hi world hi three two three","solution":"def search_and_replace(T, cases): results = [] for i in range(T): S = cases[i][0] A = cases[i][1] B = cases[i][2] words = S.split() modified_words = [B if word == A else word for word in words] results.append(\\" \\".join(modified_words)) return results"},{"question":"Given an array A=[a_0, a_1, ..., a_{n-1}] of n integers and a fixed integer value m. You will perform textit{t} operations of the following type on mbox{A}: For each operation, let s be the sum of all elements in subarray a_{l_i}, a_{l_i+1}, ..., a_{r_i}. Replace each element in the subarray by (text{s} ,text{mod} , m). After performing all operations, print the final array. Input Format The first line contains three positive space-separated integers n (the number of integers in A), t (the number of operations), and m (the fixed integer value). The second line contains n space-separated integers describing the respective values of a_0, a_1, ..., a_{n-1}. Each line j of the textit{t} subsequent lines contains two space-separated integers indicating the respective l_{j} and r_{j} values for operation j. Constraints 1 leq n, t leq 10000 1 leq m leq 1000 -1000 leq a_i leq 1000 0 leq l_i leq r_i < n Output Format Print the final array A after processing all textit{t} operations. Sample Input 0 5 2 10 1 2 3 4 5 1 3 0 4 Sample Output 0 5 0 0 0 5 Explanation 0 Initial array A = [1, 2, 3, 4, 5]. There are t=2 operations: 1. For the subarray from index 1 to 3, the sum is 2 + 3 + 4 = 9. 9 ,text{mod}, 10 = 9. The array becomes A = [1, 9, 9, 9, 5]. 2. For the subarray from index 0 to 4, the sum is 1 + 9 + 9 + 9 + 5 = 33. 33 ,text{mod}, 10 = 3. The array becomes A = [3, 3, 3, 3, 3]. Finally, the array is: [3, 3, 3, 3, 3].","solution":"def modify_array(n, t, m, array, operations): for operation in operations: l, r = operation subarray_sum = sum(array[l:r+1]) mod_value = subarray_sum % m for i in range(l, r+1): array[i] = mod_value return array # Example input usage n = 5 t = 2 m = 10 array = [1, 2, 3, 4, 5] operations = [(1, 3), (0, 4)] print(modify_array(n, t, m, array, operations)) # Expected output [3, 3, 3, 3, 3]"},{"question":"Alice is organizing her book collection and wants to arrange them on a bookshelf. The bookshelf has `n` equally spaced slots. Each slot can hold exactly one book, and each book has a unique identifier represented by an integer. Initially, the bookshelf is empty, and Alice places the books one by one into the slots. Alice has a list of m operations. Each operation is of the form (op, i, j), where: - `op` can be 1 or 0 - If `op` is 1, Alice places the book with identifier `j` into slot `i` if slot `i` is empty. - If `op` is 0, Alice removes the book from slot `i` if it is occupied. After performing all operations, Alice wants to know the final arrangement of books on the shelf. Write a function that takes the number of slots `n`, the number of operations `m`, and a list of operations, and returns a list representing the books in each slot from left to right. If a slot is empty, it should be represented by -1 in the output list. # Input - The first line contains two integers, `n` (1 ≤ n ≤ 10^5) and `m` (1 ≤ m ≤ 10^5). - The next `m` lines each contain an operation in the form: `op i j`, where `op` is an integer (0 or 1), `i` is an integer (1 ≤ i ≤ n), and `j` is an integer (1 ≤ j ≤ 10^6). For `op = 0`, `j` will be ignored. # Output - Output a single line containing `n` integers, separated by spaces. Each integer represents the identifier of the book in the respective slot, or -1 if the slot is empty after all operations. # Example Input ``` 5 4 1 1 101 1 3 203 0 1 1 2 303 ``` Output ``` -1 303 203 -1 -1 ``` Explanation 1. Place book 101 in slot 1: [101, -1, -1, -1, -1] 2. Place book 203 in slot 3: [101, -1, 203, -1, -1] 3. Remove the book from slot 1: [-1, -1, 203, -1, -1] 4. Place book 303 in slot 2: [-1, 303, 203, -1, -1]","solution":"def arrange_books(n, m, operations): Arranges books on a bookshelf with \'n\' slots after \'m\' operations. Args: n : int : number of slots on the bookshelf. m : int : number of operations. operations : list of tuples : operations to be performed on the bookshelf. Returns: list : final arrangement of books on the shelf. # Initialize the bookshelf with -1 indicating empty slots bookshelf = [-1] * n for op, i, j in operations: if op == 1: if bookshelf[i - 1] == -1: bookshelf[i - 1] = j elif op == 0: if bookshelf[i - 1] != -1: bookshelf[i - 1] = -1 return bookshelf"},{"question":"In a village, there are n houses, each house has a non-negative integer representing the amount of gold in it. Two houses are connected by a bidirectional road if and only if their gold amounts differ by exactly 1. Your task Given n houses with their respective gold amounts, write an algorithm to compute the length of the longest sequence of connected houses. Example ```python longest_connected_sequence([0, 1, 2, 4, 5, 6, 7]) ==> 4 ``` Explanation: * Houses with gold amounts [0, 1, 2] form a sequence. * Houses with gold amounts [4, 5, 6, 7] form a sequence. * The length of the longest sequence is 4 (gold amounts 4, 5, 6, 7).","solution":"def longest_connected_sequence(gold_amounts): Returns the length of the longest sequence of connected houses. :param gold_amounts: List[int] - List of non-negative integers representing gold amounts in houses. :return: int - Length of the longest sequence of connected houses. if not gold_amounts: return 0 gold_amounts = sorted(set(gold_amounts)) max_length = 1 current_length = 1 for i in range(1, len(gold_amounts)): if gold_amounts[i] - gold_amounts[i - 1] == 1: current_length += 1 max_length = max(max_length, current_length) else: current_length = 1 return max_length"},{"question":"Two players are playing a game with a string consisting of lowercase English letters. The game goes as follows: 1. Starting with the first player, who modifies the given string, players take turns alternately. 2. In each turn, the current player can choose any one character from the string and remove it. 3. The game ends when the string becomes empty. The player who removes the last character of the string wins the game. Given a string, determine who will win the game if both players play optimally. -----Input----- A single line containing a string s (1 leq |s| leq 10^5) consisting of only lowercase English letters. -----Output----- Print \\"First\\" if the first player will win and \\"Second\\" if the second player will win. -----Examples----- Input aabb Output Second Input aba Output First Input abc Output First Input a Output First -----Note----- In the first example, no matter which character the first player removes, the second player will always be able to mirror the move and finally remove the last character. Thus, the second player wins. In the second example, the first player removes \'a\', then the string becomes \'ba\'. The second player can only remove one of the remaining characters, leaving the last one for the first player, who wins.","solution":"def determine_winner(s): Determine which player will win the game if both players play optimally. The player who removes the last character of the string wins the game. Args: s (str): The input string consisting of only lowercase English letters. Returns: str: \\"First\\" if the first player will win, \\"Second\\" if the second player will win. if len(s) % 2 == 0: return \\"Second\\" # if the length of the string is even, second player wins else: return \\"First\\" # if the length of the string is odd, first player wins"},{"question":"Alex is participating in a competition that involves manipulating a string. Given a string consisting of lowercase English letters, the task is to determine the maximum number of distinct characters that can be obtained by deleting exactly one character from the string. -----Input----- A single line containing a string `s` with a length of 1 ≤ |s| ≤ 400,000. -----Output----- A single integer representing the maximum number of distinct characters that can be obtained after deleting exactly one character from the string. -----Examples----- Input: abbc Output: 3 Input: abcabc Output: 3 Input: aaaaa Output: 1","solution":"def max_distinct_characters_after_deletion(s): Returns the maximum number of distinct characters that can be obtained by deleting exactly one character from the string. from collections import Counter count = Counter(s) # Special case for single character string; removing one character leads to an empty string. if len(s) == 1: return 0 # The initial number of distinct characters in the string initial_distinct_count = len(count) # Check which character to delete to maximize the distinct characters max_distinct = 0 for char in count: if count[char] == 1: max_distinct = max(max_distinct, initial_distinct_count - 1) else: max_distinct = max(max_distinct, initial_distinct_count) return max_distinct"},{"question":"You are working on a text editing software that provides a feature to count the frequency of each word in a given document. The feature should be case-insensitive, and words are defined as any sequence of alphabetical characters (both upper and lower case). Non-alphabetical characters should be treated as delimiters. The result should be a dictionary where the keys are the distinct case-insensitive words, and the values are their respective counts in the document. Your task is to implement this word frequency counter in the form of a function. Function Signature: ```python def word_frequency(document: str) -> dict: ``` Input: - A single string `document` consisting of any printable ASCII characters. The length of the document will not exceed 10,000 characters. Output: - A dictionary with words as keys and their frequencies as values. All words should be in lower case. Example: ```python document = \\"Hello, World! Hello world.\\" output = {\'hello\': 2, \'world\': 2} ``` Note: - \\"Hello\\" and \\"hello\\" are the same word in a case-insensitive manner and should be counted together. - Punctuation marks such as `, . ! ? ; :` should be treated as delimiters. Here\'s the implementation framework: ```python import re from collections import defaultdict def word_frequency(document: str) -> dict: frequency = defaultdict(int) # Use re.findall to extract only the words words = re.findall(r\'[a-zA-Z]+\', document) for word in words: frequency[word.lower()] += 1 return dict(frequency) # Test the function document = \\"Hello, World! Hello world.\\" print(word_frequency(document)) # Output: {\'hello\': 2, \'world\': 2} ```","solution":"import re from collections import defaultdict def word_frequency(document: str) -> dict: frequency = defaultdict(int) # Use re.findall to extract words as sequences of alphabetical characters words = re.findall(r\'[a-zA-Z]+\', document) for word in words: # Convert each word to lowercase and increment its frequency. frequency[word.lower()] += 1 return dict(frequency)"},{"question":"The village of ByteLand is well known for its n distinct types of gemstones. A villager, Lila, discovered a large unrefined gemstone consisting of several smaller types glued together. To determine the value of the unrefined gemstone, Lila needs to find all different subsets of the gemstone that contain precisely k types of gemstones. Lila has asked for your help in finding the count of these subsets. Can you write a function that yields the number of different subsets of the gemstone that contain exactly k distinct types? Below is the formal task: -----Input----- - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of different types of gemstones. - The second line contains a single integer k (1 ≤ k ≤ n) — the specific number of types of gemstones the subsets should contain. -----Output----- - Print one integer — the number of different subsets of the gemstone that contain exactly k types. -----Examples----- Input 5 3 Output 10 Input 6 2 Output 15 Input 4 1 Output 4 -----Note----- In the first example with n = 5 and k = 3, there are a total of 10 possible subsets that contain exactly 3 distinct types out of the 5 available types of gemstones.","solution":"from math import comb def count_subsets(n, k): Function to count the number of subsets containing exactly k types of gemstones out of n available types. return comb(n, k)"},{"question":"In a distant land, there are N cities connected by M one-way roads. Each road has a certain travel time associated with it. The cities are numbered from 1 to N. The kingdom has decided to build a new headquarters in city 1, and they want to ensure that the headquarters can communicate efficiently with all other cities. However, due to the kingdom\'s financial constraints, they cannot upgrade all roads. They need your help to find the cities that are hard to reach from the headquarters. A city is considered \\"hard to reach\\" if the shortest travel time from the headquarters (city 1) to that city is greater than a given threshold T. Your task is to output all such cities in increasing order of their city numbers. If no city is hard to reach, return \\"NONE\\". -----Input----- The first line contains three integers N (1 leq N leq 10000), M (1 leq M leq 50000), and T (1 leq T leq 10^9). Each of the next M lines contains three integers u, v, and w (1 leq u, v leq N, 1 leq w leq 10^9). This represents a one-way road from city u to city v with a travel time of w. -----Output----- Output the cities that are hard to reach in increasing order of their city numbers. If no city is hard to reach, output \\"NONE\\". -----Example----- Sample Input 1: 5 6 10 1 2 4 1 3 8 2 3 2 2 4 5 3 4 1 4 5 6 Sample Output 1: 5 Sample Input 2: 3 3 5 1 2 2 2 3 2 1 3 4 Sample Output 2: NONE","solution":"import heapq def find_hard_to_reach_cities(N, M, T, roads): # Initialize graph graph = [[] for _ in range(N + 1)] for u, v, w in roads: graph[u].append((v, w)) # Implement Dijkstra\'s algorithm to find the shortest paths def dijkstra(source): dist = [float(\'inf\')] * (N + 1) dist[source] = 0 priority_queue = [(0, source)] while priority_queue: current_dist, u = heapq.heappop(priority_queue) if current_dist > dist[u]: continue for v, weight in graph[u]: if dist[u] + weight < dist[v]: dist[v] = dist[u] + weight heapq.heappush(priority_queue, (dist[v], v)) return dist # Get the shortest distance from city 1 to all other cities distances = dijkstra(1) # Find the hard to reach cities hard_to_reach_cities = [i for i in range(2, N + 1) if distances[i] > T] return hard_to_reach_cities if hard_to_reach_cities else [\\"NONE\\"]"},{"question":"In a distant galaxy, there exists a special binary tree called \\"Magic-Tree\\". Each node in the Magic-Tree has a non-negative integer value associated with it. The special property of the Magic-Tree is that every path from the root to any leaf node has the same sum of values. Your task is to determine whether a given binary tree is a Magic-Tree or not. Input: - The first line of the input contains an integer t (1 ≤ t ≤ 10000) which is the number of test cases. - For each test case, the first line contains an integer n (1 ≤ n ≤ 1000) which is the number of nodes in the binary tree. - The subsequent n lines, each contains three integers value_i, left_i, and right_i, representing the value of the node, the index of its left child, and the index of its right child, respectively. If a node doesn\'t have a left or right child, the corresponding left_i or right_i will be -1. Output: For each test case, print \\"YES\\" if the tree is a Magic-Tree, otherwise print \\"NO\\". SAMPLE INPUT 2 3 10 1 2 5 -1 -1 5 -1 -1 4 8 1 2 3 3 -1 5 -1 -1 2 -1 -1 SAMPLE OUTPUT YES YES Explanation In the first case, every path from root to a leaf (10 -> 5 and 10 -> 5) sums up to 15. Hence, the tree is a Magic-Tree. In the second case, every path from root to a leaf (8 -> 3 -> 2 and 8 -> 5) sums up to 13. Hence, the tree is a Magic-Tree.","solution":"class TreeNode: def __init__(self, value): self.value = value self.left = None self.right = None def build_tree(nodes): if not nodes: return None tree_nodes = {i: TreeNode(value) for i, (value, _, _) in enumerate(nodes)} for i, (value, left, right) in enumerate(nodes): if left != -1: tree_nodes[i].left = tree_nodes[left] if right != -1: tree_nodes[i].right = tree_nodes[right] return tree_nodes[0] def is_magic_tree(root): def calculate_path_sums(node, current_sum, path_sums): if not node: return current_sum += node.value if not node.left and not node.right: path_sums.add(current_sum) calculate_path_sums(node.left, current_sum, path_sums) calculate_path_sums(node.right, current_sum, path_sums) if not root: return True path_sums = set() calculate_path_sums(root, 0, path_sums) return len(path_sums) == 1 def is_magic_tree_multiple_cases(test_cases): results = [] for case in test_cases: n, nodes = case if n == 0: results.append(\\"YES\\") # An empty tree can be considered a Magic-Tree continue root = build_tree(nodes) results.append(\\"YES\\" if is_magic_tree(root) else \\"NO\\") return results"},{"question":"Sara loves arrays and always finds creative ways to have fun with them. Recently, she came up with an interesting game called \'Array Shuffle\'. In this game, Sara tries to find the number of ways to shuffle a given array such that no element appears in its original position. She calls such a shuffle a \\"derangement\\". Your task is to help Sara by writing a program that calculates the number of derangements of a given array. Input: The first line of input contains an integer T, the number of test cases. Each of the next T lines contains a single integer N, the length of the array. Assume the array consists of elements from 1 to N. Output: For each test case, output a single line containing the number of derangements of the array modulo 10^9+7. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 Hint: To solve this efficiently, consider using the recursive relationship D(n) = (n - 1) * (D(n - 1) + D(n - 2)), where D(0) = 1 and D(1) = 0. Example Input: 3 3 4 5 Example Output: 2 9 44 Explanation: For N = 3, there are 2 derangements: [2, 3, 1] and [3, 1, 2]. For N = 4, there are 9 derangements.","solution":"MOD = 10**9 + 7 def calculate_derangements(n): if n == 0: return 1 elif n == 1: return 0 elif n == 2: return 1 derangements = [0] * (n + 1) derangements[0] = 1 derangements[1] = 0 derangements[2] = 1 for i in range(3, n + 1): derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2]) % MOD return derangements[n] def array_shuffle(T, cases): results = [] for n in cases: results.append(calculate_derangements(n)) return results"},{"question":"You are organizing a camping trip and need to bring water bottles. Each person requires W liters of water, and the bottles available come in two sizes: X liters and Y liters. Determine the minimum number of bottles needed to provide exactly W liters of water per person. -----Constraints----- - 1 leq W leq 1 000 - 1 leq X leq 1 000 - 1 leq Y leq 1 000 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: W X Y -----Output----- Print the minimum number of bottles required. -----Sample Input----- 10 3 5 -----Sample Output----- 2 To provide 10 liters of water, one optimal way is to use 2 bottles of 5 liters each. Therefore, the minimum number of bottles required is 2.","solution":"def min_bottles(W, X, Y): Determines the minimum number of bottles required to provide exactly W liters of water. Bottles come in sizes X liters and Y liters. from math import gcd # Ensure X is the larger bottle size to minimize the number of iterations if X < Y: X, Y = Y, X # Calculate gcd of X and Y to check if W is a multiple of it common_gcd = gcd(X, Y) if W % common_gcd != 0: return -1 # It is impossible to get exactly W liters min_bottles_count = float(\'inf\') # Iterating for possible number of larger bottles (X) for i in range(W // X + 1): remaining_water = W - i * X if remaining_water % Y == 0: j = remaining_water // Y min_bottles_count = min(min_bottles_count, i + j) return min_bottles_count if min_bottles_count != float(\'inf\') else -1"},{"question":"**Problem Statement** Given an unsorted integer array, write a function to sort the array into a wave-like array. An array `arr[0...n-1]` is sorted in wave form if: ``` arr[0] >= arr[1] <= arr[2] >= arr[3] <= arr[4]... ``` In other words, arrange the elements into a sequence such that the first element is not smaller than the second, the second element is not bigger than the third, and so on. You want to implement a function: ```python def wave_sort(arr: List[int]) -> List[int]: ``` **Input:** - List of integers `arr` where (1 leq |arr| leq 1000), and each element ( -10^6 leq arr[i] leq 10^6 ). **Output:** - List of integers arranged in wave-like form. **Example:** **Example 1:** ```python Input: [3, 6, 5, 10, 7, 20] Output: [6, 3, 10, 5, 20, 7] ``` **Example 2:** ```python Input: [2, 4, 3, 1] Output: [4, 2, 3, 1] ``` **Example 3:** ```python Input: [20, 10, 8, 6, 4, 2] Output: [10, 20, 6, 8, 2, 4] ``` Note: The output should be in wave form, but there can be multiple correct results. Any output satisfying the conditions will be accepted.","solution":"from typing import List def wave_sort(arr: List[int]) -> List[int]: arr.sort() for i in range(0, len(arr) - 1, 2): arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr"},{"question":"Given a list of integers, compute all possible product values by multiplying elements from different subsets of the given list. A subset is defined as any selection of elements from the list. A subset can also be empty. Example 1: Input: nums = [1, 2] Output: [0, 1, 2, 2] Explanation: 0 is the product of the empty subset. 1 is the product of the subset {1}. 2 is the product of the subset {2}. 2 is also the product of the subset {1, 2} (1*2). Example 2: Input: nums = [1, 2, 3] Output: [0, 1, 2, 3, 6] Explanation: 0 is the product of the empty subset. 1 is the product of the subset {1}. 2 is the product of the subset {2}. 3 is the product of the subset {3}. 6 is the product of the subset {1, 2, 3} (1*2*3). Your task: You don\'t need to read or print anything. Your task is to complete the function DistinctProducts() which takes nums as input parameter and returns a list containing all distinct products in ascending order. Expected Time Complexity: O(n * 2^n) Expected Space Complexity: O(2^n) Constraints: 1 <= length of nums <= 20 1 <= nums[i] <= 10","solution":"from itertools import combinations from functools import reduce from operator import mul def DistinctProducts(nums): Returns all distinct products from different subsets of nums, including the empty subset (product 0). products = set() products.add(0) # product of the empty subset for r in range(1, len(nums) + 1): for subset in combinations(nums, r): product = reduce(mul, subset, 1) products.add(product) return sorted(products)"},{"question":"Chef is very fond of cooking and loves to experiment with different recipes. He recently discovered a new ingredient that can dramatically alter the flavor of his dishes: a mysterious herb named \\"Flavora.\\" Chef wants to use this herb in his dishes but must be cautious not to use too much, as it can overpower the other ingredients. Chef has N dishes, and for each dish i, he initially plans to use F_i grams of the herb. However, he knows that using more than M grams of the herb in any single dish will ruin the taste. Therefore, he decides to reduce the amount of the herb in each dish to ensure that no dish contains more than M grams. Your task is to help Chef determine the final amounts of the herb to use for each dish. ------ Input ------ The first line contains an integer T, the number of test cases. Then the test cases follow. Each test case consists of two lines: - The first line contains two integers N and M. - The second line contains N integers F_1, F_2, ..., F_N representing the initial planned amounts of the herb for each dish. ------ Output ------ For each test case, output a single line containing N integers, the final amounts of the herb to be used for each dish. The final amounts for each test case should be separated by spaces. ------ Constraints ------ - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - 1 ≤ M ≤ 10^6 - 0 ≤ F_i ≤ 10^6 The sum of N over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 2 5 100 120 80 50 150 90 3 50 60 20 40 ------ Sample Output 1 ------ 100 80 50 100 90 50 20 40 ------ Explanation 1 ------ In the first test case, Chef makes the following adjustments to the amounts of the herb: - For dish 1, 120 grams exceed the limit of 100 grams, so it is reduced to 100 grams. - For dish 2, 80 grams is within the limit, so it remains 80 grams. - For dish 3, 50 grams is within the limit, so it remains 50 grams. - For dish 4, 150 grams exceed the limit of 100 grams, so it is reduced to 100 grams. - For dish 5, 90 grams is within the limit, so it remains 90 grams. In the second test case: - For dish 1, 60 grams exceed the limit of 50 grams, so it is reduced to 50 grams. - For dish 2, 20 grams is within the limit, so it remains 20 grams. - For dish 3, 40 grams is within the limit, so it remains 40 grams.","solution":"def adjust_herb_amounts(t, test_cases): Adjusts the amount of herb to ensure no dish exceeds the limit. Parameters: t (int): Number of test cases. test_cases (list): List of tuples where each tuple contains: - N (int): Number of dishes - M (int): Maximum allowed grams of the herb - F (list): List of integers representing the initial amounts of the herb for each dish Returns: list: List of lists, where each inner list contains the adjusted amounts of the herb for each dish. results = [] for N, M, F in test_cases: adjusted_F = [min(f, M) for f in F] results.append(adjusted_F) return results # Function to format the output properly def format_output(results): return \\"n\\".join(\\" \\".join(map(str, result)) for result in results)"},{"question":"In a faraway land, there are N mystical trees in a row, each producing a unique type of fruit represented by an integer. A magical creature can start collecting fruits from any tree and eat fruits from K consecutive trees in that sequence, where K can be any positive integer such that 1 leq K leq N. The creature wants to have the maximum variety of fruits in its basket after eating from these K trees. Can you help the magical creature determine the maximum number of distinct types of fruits it can collect from any such sequence of K consecutive trees? -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of trees. - The second line contains N space-separated integers representing the type of fruit each tree produces. -----Output:----- For each test case, output in a single line the maximum number of distinct types of fruits the magical creature can collect from any sequence of K consecutive trees. -----Constraints----- - 1 leq T leq 1000 - 1 leq N leq 100000 - 1 leq fruit type leq 100000 -----Sample Input:----- 2 7 1 2 1 3 4 2 3 5 1 2 3 4 5 -----Sample Output:----- 4 5 -----EXPLANATION:----- Test case 1: - The creature can choose the sequence starting from the 3rd tree to the 6th tree (K=4), which contains fruits [1, 3, 4, 2]. This sequence has 4 distinct types of fruits, which is the maximum possible. Test case 2: - The sequence starting from any tree with K=5 will contain all 5 different types of fruits [1, 2, 3, 4, 5]. Hence, the maximum number of distinct types is 5.","solution":"def max_variety_of_fruits(test_cases): results = [] for n, fruits in test_cases: max_distinct = 0 window = set() start = 0 for end in range(n): window.add(fruits[end]) # Calculate maximum distinct fruits by considering windows of different sizes while len(window) > (end - start + 1): window.remove(fruits[start]) start += 1 max_distinct = max(max_distinct, len(window)) results.append(max_distinct) return results def read_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(input_lines[index]) fruits = list(map(int, input_lines[index + 1].split())) test_cases.append((N, fruits)) index += 2 return test_cases def main(input_str): test_cases = read_input(input_str) results = max_variety_of_fruits(test_cases) return \\"n\\".join(map(str, results))"},{"question":"In a magical forest, there are n elves, each standing at distinct points. Every elf can communicate with others using enchanted stones, but only if the distance between them isn\'t greater than k units. The forest is flat, and the distance between two points (x1, y1) and (x2, y2) is calculated using the Euclidean distance formula. You are to determine the number of distinct groups of elves that can communicate directly or indirectly with each other. A group of elves can communicate if there is a path (direct or through other elves) such that the maximum distance between consecutive elves in the path is at most k units. -----Input----- The first line contains two space-separated integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100), where n is the number of elves and k is the maximum communication distance. Each of the following n lines contains two space-separated integers x and y (-100 ≤ x, y ≤ 100), which are the coordinates of an elf in the forest. -----Output----- Print a single integer — the number of distinct groups of elves that can communicate with each other. -----Examples----- Input 5 2 0 0 2 0 0 2 2 2 10 10 Output 2 Input 3 5 1 2 4 6 7 8 Output 1 Input 4 3 1 1 2 2 3 3 8 8 Output 2 -----Note----- In the first example, there are two groups. The first group consists of the elves at coordinates (0,0), (2,0), (0,2), and (2,2). The second group consists of the elf at coordinates (10,10). In the second example, all elves can communicate with one another directly or indirectly, thus forming just one group.","solution":"import math def find_groups(n, k, points): def euclidean_distance(p1, p2): return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2) def dfs(v, visited): stack = [v] while stack: u = stack.pop() if u not in visited: visited.add(u) for i in range(n): if i not in visited and euclidean_distance(points[u], points[i]) <= k: stack.append(i) visited = set() groups = 0 for i in range(n): if i not in visited: dfs(i, visited) groups += 1 return groups"},{"question":"A company organizes an annual coding competition and wants to allocate participants into groups for the first round. The competition has n participants, each with a unique participant ID. The IDs are given as an array. Each group should have exactly k participants. If n is not divisible by k, the remaining participants (less than k) can form a group on their own. You need to create a program that divides the participants into groups meeting the above criteria. Each group should maintain the order of the participants as they appear in the input list. Output the list of groups with their respective member IDs. Input The first line contains the number of test cases t (1 ≤ t ≤ 100). The description of each test case follows. The first line of each test case contains two integers n and k (1 ≤ k ≤ n ≤ 1000), where n is the number of participants and k is the required group size. The second line of each test case contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ 10000), where p_i is the participant ID of the i-th participant in the list. Output For each test case, output the groups formed from the given participants. Each group should be printed on a new line, enclosed in brackets, with participant IDs separated by spaces. Each test case should be separated by an empty line in the output. Example Input 3 6 3 1 2 3 4 5 6 7 2 10 21 13 24 15 36 17 5 5 101 102 103 104 105 Output [1 2 3] [4 5 6] [10 21] [13 24] [15 36] [17] [101 102 103 104 105] Note In the first test case, the participants can be divided into two groups of three members each based on the given k. In the second test case, the participants can be divided into three groups, with the last group containing just one participant as n is not divisible by k. In the third test case, all participants fit perfectly into one group since n equals k.","solution":"def divide_into_groups(t, test_cases): results = [] for i in range(t): n, k = test_cases[i][0] participants = test_cases[i][1] groups = [] for j in range(0, n, k): group = participants[j:j + k] groups.append(group) results.append(groups) return results # Input formatting utility def format_input(input_data): lines = input_data.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for i in range(t): n, k = map(int, lines[index].split()) participants = list(map(int, lines[index + 1].split())) test_cases.append(((n, k), participants)) index += 2 return t, test_cases # Output formatting utility def format_output(results): formatted_output = [] for result in results: for group in result: formatted_output.append(f\\"[{\' \'.join(map(str, group))}]\\") formatted_output.append(\\"\\") # To separate test cases return \\"n\\".join(formatted_output).strip() # Example input handling input_data = 3 6 3 1 2 3 4 5 6 7 2 10 21 13 24 15 36 17 5 5 101 102 103 104 105 # Example execution t, test_cases = format_input(input_data) results = divide_into_groups(t, test_cases) output = format_output(results) print(output)"},{"question":"Problem Statement The city of Alphaville has a peculiar lamp-post system arranged in a straight line. Each lamp-post can either be ON (represented by 1) or OFF (represented by 0). As part of energy conservation, the city wants to ensure at most one section of consecutive lamp-posts is ON at a time. If there are two or more such sections, the city\'s energy system will shut down, causing a blackout. Your task is to check if any given configuration of lamp-posts would result in a blackout. ------ Input section ------ The first line contains a single integer T, the number of test cases. The description of T test cases follows. Each test case begins with an integer N, denoting the number of lamp-posts. The next line contains N space-separated integers, each representing the state of a lamp-post in the city. ------ Output section ------ For each testcase, output \\"Blackout\\" if the configuration will cause a blackout, otherwise output \\"No Blackout\\". ------ Input constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 100 Each lamp-post state A[i] (0 or 1) ----- Sample Input 1 ------ 3 5 1 0 1 0 1 6 1 1 0 0 1 0 4 0 1 0 0 ----- Sample Output 1 ------ Blackout Blackout No Blackout ----- explanation 1 ------ In the first test case, there are three sections where the lamp-posts are ON, which will cause a blackout. In the second test case, there are two sections where the lamp-posts are ON, which will cause a blackout. In the third test case, there is only one section where the lamp-posts are ON, so there will be no blackout.","solution":"def check_blackout(T, test_cases): result = [] for i in range(T): N, lamp_posts = test_cases[i] sections = 0 prev = 0 for lamp in lamp_posts: if lamp == 1 and prev == 0: sections += 1 prev = lamp if sections > 1: result.append(\\"Blackout\\") break else: result.append(\\"No Blackout\\") return result"},{"question":"Tom is planning a large festival in his town, and he wants to ensure the musical performances are as diverse as possible. The festival has n performances lined up, each with a different duration. Tom has m queries about what happens if two performances swap their durations. Tom wants to find out, for each query, the median duration of all performances after the swap. The median is the middle value in the list of durations when sorted. If there is an even number of durations, the median is the average of the two middle values. Given is an array of n integers representing the durations of the performances, and m pairs of integers representing indices of the performances that will swap their durations. Write a program to process the queries and output the median duration after each swap. Input The first line contains two space-separated integers n and m (1 ≤ n ≤ 30 000, 1 ≤ m ≤ 10 000). The second line contains n space-separated integers, d1, d2, ..., dn (1 ≤ di ≤ 106) — the durations of the performances. Next m lines describe queries. Each of them contains two space-separated integers xi and yi (1 ≤ xi, yi ≤ n, xi ≠ yi), indices of performances that swap their durations. Output Print m lines with answers to the queries. On each line, print the median duration after the corresponding query. Examples Input 5 3 1 3 5 7 9 1 5 3 4 2 5 Output 5 5 5 Input 4 2 6 2 9 4 2 3 1 4 Output 5 5 Note Clarification for the first sample: Durations: 1 3 5 7 9 After first query, performances 1 and 5 swap, so durations become: 9 3 5 7 1. The sorted list is [1, 3, 5, 7, 9] and the median is 5. After second query, performances 3 and 4 swap, durations become: 9 3 7 5 1. The sorted list is [1, 3, 5, 7, 9] and the median is 5. After third query, performances 2 and 5 swap, durations become: 9 1 7 5 3. The sorted list is [1, 3, 5, 7, 9] and the median is 5.","solution":"def median_after_swaps(n, m, durations, queries): def find_median(arr): arr.sort() mid = len(arr) // 2 if len(arr) % 2 == 0: return (arr[mid - 1] + arr[mid]) / 2 else: return arr[mid] results = [] for x, y in queries: durations[x - 1], durations[y - 1] = durations[y - 1], durations[x - 1] results.append(find_median(durations[:])) # Use a copy of the durations list return results"},{"question":"John is working on implementing a sorting algorithm. He is fascinated by heaps and heap sort particularly caught his interest. However, John is having trouble understanding how to construct a valid max heap from an unsorted array. Help John by writing a function to transform any given unsorted array into a max heap. A max heap is a complete binary tree where the value at each node is greater than or equal to the values of its children. Constraints: 2 ≤ N ≤ 10^6 -10^9 ≤ arr[i] ≤ 10^9 Input: - The first line of the input contains a single integer N, the number of elements in the array. - The next line contains N integers, the elements of the array. Output: - Output N integers which represent the array transformed into a max heap, printed in heap order. Note: - Use fast I/O for handling large inputs. SAMPLE INPUT 6 3 1 5 7 2 4 SAMPLE OUTPUT 7 3 5 1 2 4 Explanation: After converting the given unsorted array into a max heap, the root will be the maximum element (7 in this case) and every parent node will be greater than or equal to its children nodes. Additional Sample Case: Input: 5 -1 -10 0 -5 2 Output: 2 -1 0 -5 -10 Additional Case Explanation: - The max heap property is maintained with 2 as the root and each parent node greater than or equal to its children nodes.","solution":"def max_heapify(arr, n, i): To heapify a subtree rooted with node i which is an index in arr[]. n is the size of the heap. largest = i left = 2 * i + 1 right = 2 * i + 2 # See if left child of root exists and is greater than root if left < n and arr[left] > arr[largest]: largest = left # See if right child of root exists and is greater than the largest so far if right < n and arr[right] > arr[largest]: largest = right # Change root, if needed if largest != i: arr[i], arr[largest] = arr[largest], arr[i] # swap max_heapify(arr, n, largest) def build_max_heap(arr): Function to build a Max-Heap from the given array n = len(arr) # Build a maxheap for i in range(n // 2 - 1, -1, -1): max_heapify(arr, n, i) return arr"},{"question":"Given an array of integers and a window size `k`, you need to calculate the maximum sum achievable by any subarray of length `k`. A subarray is defined as a contiguous sequence of elements within an array. Input Format: The first line contains two integers `n` and `k` where `n` is the size of the array and `k` is the size of the window. The second line contains `n` space-separated integers representing the elements of the array. Output Format: Print a single integer which is the maximum sum of any subarray of length `k`. Constraints: * (1 leq n leq 10^5) * (1 leq k leq n) * (-10^4 leq text{array[i]} leq 10^4) SAMPLE INPUT 10 3 1 2 3 4 5 6 7 8 9 10 SAMPLE OUTPUT 27 Explanation: The subarray with the maximum sum is `[8, 9, 10]` and its sum is `8 + 9 + 10 = 27`.","solution":"def max_sum_subarray(arr, k): Returns the maximum sum of any subarray of length k. :param arr: List of integers :param k: Length of subarray for which to calculate max sum :return: Maximum sum of any subarray of length k n = len(arr) if n < k: return None # Calculate the sum of the first window of length k window_sum = sum(arr[:k]) max_sum = window_sum # Slide the window from start to end of the array for i in range(n - k): window_sum = window_sum - arr[i] + arr[i + k] max_sum = max(max_sum, window_sum) return max_sum"},{"question":"Given a string consisting of lowercase English letters, your task is to find the first non-repeating character in the string and return its index. If there is no non-repeating character, return `-1`. You are required to write a function `first_non_repeating_char(s)` that solves this problem. **Function Signature:** ```python def first_non_repeating_char(s: str) -> int: ``` **Input:** - `s` (1 ≤ |s| ≤ 10^5): a string consisting of lowercase English letters. **Output:** - An integer representing the index of the first non-repeating character, or `-1` if there is no non-repeating character. **Examples:** ```python first_non_repeating_char(\\"leetcode\\") # returns 0 (character \'l\') first_non_repeating_char(\\"loveleetcode\\") # returns 2 (character \'v\') first_non_repeating_char(\\"aabb\\") # returns -1 (all characters are repeating) ``` **Explanation:** 1. In the string \\"leetcode\\", the first non-repeating character is \'l\' which is at index 0. 2. In the string \\"loveleetcode\\", the first non-repeating character is \'v\' which is at index 2. 3. In the string \\"aabb\\", all characters are repeating, hence we return -1.","solution":"def first_non_repeating_char(s: str) -> int: Returns the index of the first non-repeating character in the string s. If all characters are repeating, returns -1. char_count = {} # Count the occurrences of each character in the string for char in s: char_count[char] = char_count.get(char, 0) + 1 # Find the first character that occurs exactly once for index, char in enumerate(s): if char_count[char] == 1: return index return -1"},{"question":"Write a program to help a florist pack bouquets for delivery. The florist has three types of flowers: roses, tulips, and daisies. Each bouquet must contain exactly three flowers, with at least one rose and exactly one tulip. Given the number of each type of flower the florist has, determine whether the florist can create at least one bouquet and if so, find the maximum number of bouquets they can pack. Input The input consists of three lines, with one non-negative integer on each line. The integer R (0 ≤ R ≤ 1000) is written on the first line, which indicates the number of roses. The integer T (0 ≤ T ≤ 1000) is written on the second line, which indicates the number of tulips. The integer D (0 ≤ D ≤ 1000) is written on the third line, which indicates the number of daisies. Output Output a single line. If the florist can create at least one bouquet, output the maximum number of bouquets that can be created. If no bouquet can be created, output 0. Example Input 6 4 10 Output 4 Explanation: - Each bouquet requires at least 1 rose and exactly 1 tulip. - With 6 roses and 4 tulips, the maximum bouquets that can be created are 4 (limited by the number of tulips). - There are enough daisies (10) to complete these bouquets.","solution":"def max_bouquets(R, T, D): Calculates the maximum number of bouquets that can be created given the number of roses, tulips, and daisies. Each bouquet must contain exactly three flowers, with at least one rose and exactly one tulip. if T == 0: return 0 # No tulips means no valid bouquets can be created max_possible_bouquets = min(R, T, (R + D) // 2) # Minimum between number of roses, tulips, and (roses + daisies) // 2 return max_possible_bouquets"},{"question":"A large online retail company uses an in-house inventory management system. Each product in their inventory is assigned a unique integer ID and is categorized by a genre. Each genre is associated with a priority level, where genres with a higher priority level should be restocked first if they run low. The system provides a list of IDs corresponding to low-stock products and a mapping of these IDs to their respective genres. It also provides a list of genres sorted by their priority levels, with the highest priority genre listed first. Your task is to create a program that determines the order in which the products should be restocked based on the genre priority. If multiple products belong to the same genre, they should be ordered by their ID in ascending order. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of low-stock products. The second line contains n integers p1, p2, ..., pn (1 ≤ pi ≤ 10000) — the IDs of the low-stock products. The third line contains an integer m (1 ≤ m ≤ 100) — the number of unique genres. The next m lines each contain a genre name followed by a list of integers representing the product IDs belonging to that genre. Every product ID in the input will be listed under exactly one genre. The last line contains m genre names sorted by their priority, with the highest priority first. Output Print the restock order as a single line of product IDs sorted by genre priority and within each genre by ascending ID. Example Input 5 1002 1003 1001 1005 1004 3 Electronics 1001 1002 Clothing 1003 1004 1005 Sports 1006 1007 Electronics Clothing Sports Output 1001 1002 1003 1004 1005","solution":"def determine_restock_order(n, product_ids, m, genre_info, priority): genre_to_ids = {} # Create a dictionary mapping each genre to its product ids for genre in genre_info: split_info = genre.split() genre_name = split_info[0] ids = list(map(int, split_info[1:])) genre_to_ids[genre_name] = ids restock_order = [] # Iterate over priority and collect ids in the order for genre in priority: ids = list(set(product_ids) & set(genre_to_ids[genre])) restock_order.extend(sorted(ids)) return restock_order"},{"question":"You\'ve embarked on a project to study the properties of integer sequences. For this task, you are given an array of integers and your goal is to determine the smallest inclusive subarray that contains all unique elements from the original array at least once. Given an array of n integers, find the length of the smallest contiguous subarray that contains every unique element in the array. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), the elements of the array. -----Output----- Print a single integer — the length of the smallest contiguous subarray containing every unique element from the array. -----Examples----- Input 5 2 1 2 3 3 Output 3 Input 7 1 2 2 3 4 1 5 Output 5","solution":"def smallest_subarray_length(n, arr): Finds the length of the smallest contiguous subarray that contains every unique element in the array. if n == 0: return 0 unique_elements = set(arr) unique_count = len(unique_elements) element_counter = {} min_length = float(\'inf\') left = 0 for right in range(n): element_counter[arr[right]] = element_counter.get(arr[right], 0) + 1 while len(element_counter) == unique_count: min_length = min(min_length, right - left + 1) element_counter[arr[left]] -= 1 if element_counter[arr[left]] == 0: del element_counter[arr[left]] left += 1 return min_length # Example usage: # n = 5 # arr = [2, 1, 2, 3, 3] # print(smallest_subarray_length(n, arr)) # Output: 3"},{"question":"Write a program to validate a given Sudoku board. A Sudoku board is a 9x9 grid, where each row, column, and 3x3 box must contain the digits 1 through 9 without repetition. The board may contain empty cells, denoted by the \'.\' character, which need to be ignored during validation. The task is to determine if the given Sudoku board configuration is valid or not. Your program should output \\"Valid\\" if the board follows the Sudoku rules; otherwise, it should output \\"Invalid\\". Input The input consists of multiple datasets. The input ends with a single line containing the word \\"END\\". Each dataset comprises exactly 9 lines, each containing 9 characters (either digits \'1\' to \'9\' or \'.\'). The lines within each dataset are separated by newline characters. Output For each dataset, output \\"Valid\\" or \\"Invalid\\" on a new line. Example Input 53..7.... 6..195... .98....6. 8...6...3 4..8.3..1 7...2...6 .6....28. ...419..5 ....8..79 END Output Valid","solution":"def is_valid_sudoku(board): Validates a single Sudoku board configuration. Returns \\"Valid\\" if it is valid, otherwise \\"Invalid\\". def is_valid_block(block): # Remove \'.\' (empty cells) and check for duplicates block = [num for num in block if num != \'.\'] return len(block) == len(set(block)) for i in range(9): # Check each row and column if not is_valid_block(board[i]) or not is_valid_block([board[x][i] for x in range(9)]): return \\"Invalid\\" # Check each 3x3 sub-box for i in range(0, 9, 3): for j in range(0, 9, 3): block = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)] if not is_valid_block(block): return \\"Invalid\\" return \\"Valid\\" def validate_sudoku_boards(input_data): Validates multiple Sudoku board configurations. Processes the input and outputs the validation results. board_size = 9 results = [] current_board = [] for line in input_data: line = line.strip() if line == \\"END\\": break if len(line) == board_size: current_board.append(line) if len(current_board) == board_size: results.append(is_valid_sudoku(current_board)) current_board = [] return results"},{"question":"You are organizing a marathon event. Each participant is registered with a unique identifier, their names, and their race completion time. Your task is to help manage race results by handling a series of queries to record completion times, retrieve the fastest participant, and remove a disqualified participant. - Record the race completion time for a participant. You will be given the participant\'s unique identifier ID, their name N, and their completion time T in seconds. - Query for the fastest participant at a certain point in time. When this query is made, you need to provide the name of the participant with the lowest completion time. If multiple participants have the same time, the one registered first should be returned. - Remove a disqualified participant from the records. This query will provide the participant\'s unique identifier ID to be removed. If the participant does not exist, the query will be ignored. -----Input----- The first line of input contains 1 integer, 1 leq Q leq 100000, the number of queries to be processed. Subsequent lines contain the queries in the following format: - To record completion time: 1 ID N T, where ID is a unique integer, 0 leq ID leq 100000, N is a non-empty alphanumeric string containing no spaces and at most 10 characters, and T is the completion time in seconds, 0 leq T leq 86400. - To query the fastest participant: 2. - To remove a disqualified participant: 3 ID, where ID is the unique identifier of the participant, 0 leq ID leq 100000. -----Output----- For each query of type 2, output the name of the fastest participant on a new line. If no participants are recorded or they are all disqualified, print \\"no participants\\" (without quotes). -----Subtasks----- - (30 Points): 1 leq Q leq 1000. - (70 Points): No additional constraints. -----Examples----- Sample Input: 6 1 101 John 3600 1 102 Jane 3500 2 1 103 Bob 3000 3 102 2 Sample Output: Jane Bob","solution":"import heapq class Marathon: def __init__(self): self.participants = {} self.time_heap = [] def record_time(self, ID, name, time): if ID not in self.participants: self.participants[ID] = (name, time) heapq.heappush(self.time_heap, (time, ID)) def get_fastest(self): while self.time_heap: time, ID = heapq.heappop(self.time_heap) if ID in self.participants and self.participants[ID][1] == time: heapq.heappush(self.time_heap, (time, ID)) return self.participants[ID][0] return \\"no participants\\" def remove_participant(self, ID): if ID in self.participants: del self.participants[ID] def process_queries(queries): marathon = Marathon() results = [] for query in queries: parts = query.split() if parts[0] == \'1\': ID, name, time = int(parts[1]), parts[2], int(parts[3]) marathon.record_time(ID, name, time) elif parts[0] == \'2\': results.append(marathon.get_fastest()) elif parts[0] == \'3\': ID = int(parts[1]) marathon.remove_participant(ID) return results"},{"question":"Given a list of integers, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. # Exercise Create a function `maxSubArraySum` that takes a list of integers as its parameter and returns the maximum sum of the contiguous subarray. For example: # Input - `nums`: a list of integers # Output - An integer representing the maximum sum of the contiguous subarray # Example Case: ``` maxSubArraySum([-2,1,-3,4,-1,2,1,-5,4]) ``` Output: ``` 6 ``` Explanation: The contiguous subarray [4, -1, 2, 1] has the largest sum = 6.","solution":"def maxSubArraySum(nums): Returns the sum of the contiguous subarray with the largest sum. if not nums: return 0 # Assuming 0 for an empty list case max_current = max_global = nums[0] for num in nums[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"In a futuristic card game, you are given a set of cards, each with two integers A and B written on it. The game considers a card better than another card if it has both integers greater than or equal to those on the other card. Your task is to determine for each card, how many other cards it is better than according to this rule. Input: - First line contains an integer N, the number of cards (1 ≤ N ≤ 10^5). - The next N lines each contain two integers Ai and Bi (0 ≤ Ai, Bi ≤ 10^5) representing a card. Output: - Print N lines each containing a single integer, the count of other cards that the card is better than. Example: Input: 5 10 20 15 25 20 30 25 35 5 10 Output: 4 3 2 1 0 Explanation: - The first card (10, 20) is better than the fifth card (5, 10). - The second card (15, 25) is better than the first (10, 20), fifth (5, 10). - The third card (20, 30) is better than the first (10, 20), second (15, 25), fifth (5, 10). - The fourth card (25, 35) is better than the first (10, 20), second (15, 25), third (20, 30), fifth (5, 10). - The fifth card (5, 10) is not better than any other card.","solution":"def count_better_cards(cards): Given a list of cards with A, B integers, return a list of counts with the number of other cards each card is better than. n = len(cards) count_better = [0] * n for i in range(n): for j in range(n): if i != j and cards[i][0] >= cards[j][0] and cards[i][1] >= cards[j][1]: count_better[i] += 1 return count_better if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) index = 1 cards = [] for _ in range(N): A = int(data[index]) B = int(data[index + 1]) cards.append((A, B)) index += 2 results = count_better_cards(cards) for result in results: print(result)"},{"question":"Write a function called `unique_numbers` that takes a list of integers and returns a new list containing only the unique elements from the input list, preserving the original order of their first occurrence. Examples ```python unique_numbers([1, 2, 2, 3, 4, 4, 5]) # -> [1, 2, 3, 4, 5] unique_numbers([4, 5, 6, 7, 8, 4, 5, 9]) # -> [4, 5, 6, 7, 8, 9] unique_numbers([1, 1, 1, 1, 1, 1]) # -> [1] unique_numbers([]) # -> [] unique_numbers([10, 20, 10, 30, 40, 20]) # -> [10, 20, 30, 40] ``` The function should ensure the same order; the first occurrence of each element should be retained in the resulting list.","solution":"def unique_numbers(numbers): Returns a list of unique numbers from the input list, preserving their first occurrence order. seen = set() unique_list = [] for number in numbers: if number not in seen: seen.add(number) unique_list.append(number) return unique_list"},{"question":"Alice has a rectangular grid of size N x M where some cells are empty, and others contain obstacles. She wants to find the number of distinct paths from the top-left corner (1,1) to the bottom-right corner (N,M) that do not pass through any obstacles and only allow moving right or down from each cell. Two paths are considered distinct if they visit different sets of cells, excluding the start and end cells. Write a program to calculate the number of distinct paths. Constraints: - 1 ≤ N, M ≤ 100 - The grid is represented by a matrix of size N x M where \'0\' indicates an empty cell and \'1\' indicates an obstacle. - The top-left and bottom-right corners of the grid are guaranteed to be empty cells. Input: The first line contains two integers, N and M. Each of the next N lines contains M integers representing the grid. Output: Output the number of distinct paths from (1,1) to (N,M). Examples: Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 Input: 2 2 0 1 0 0 Output: 1","solution":"def distinct_paths(grid): This function computes the number of distinct paths in a grid, avoiding obstacles. N = len(grid) M = len(grid[0]) # Initialize a table to store the number of ways to reach each cell dp = [[0]*M for _ in range(N)] if grid[0][0] == 1 or grid[N-1][M-1] == 1: return 0 # Starting point dp[0][0] = 1 for i in range(N): for j in range(M): if grid[i][j] == 1: dp[i][j] = 0 # No way to go through an obstacle else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1]"},{"question":"You are given an array of integers. You are allowed to perform the following operation on the array: Select any two indices i and j (1 ≤ i, j ≤ N and i ≠ j), and add the value at index j to the value at index i, i.e. A[i] = A[i] + A[j]. You can perform this operation any number of times. Your goal is to determine the minimum number of operations required to make all elements of the array equal. If it is not possible to do so, print -1 instead. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case contains two lines of input. - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array. ------ Output Format ------ For each test case, output the minimum number of operations required to make all elements of the array equal. If it is not possible to do so, print -1 instead. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 2 ≤ N ≤ 10^{3} 0 ≤ A[i] ≤ 10^{6} ----- Sample Input 1 ------ 2 3 2 4 6 4 1 5 2 7 ----- Sample Output 1 ------ 1 -1 ----- Explanation 1 ------ Test case 1: We can add the first element to the third element to make them all equal to 8. Thus only 1 operation is needed. Test case 2: It is not possible to make all the elements of the array equal since the greatest common divisor of the array elements is 1, which cannot be achieved by summing any elements together. (Note: An array can only be made completely equal if the gcd (greatest common divisor) of all its elements divides the target value.)","solution":"from math import gcd from functools import reduce def min_operations_to_equal_elements(T, test_cases): results = [] for tc in test_cases: N, A = tc overall_gcd = reduce(gcd, A) if overall_gcd == 1: results.append(-1) else: results.append(1) return results # Read input def read_input(): import sys input = sys.stdin.read data = input().split() index = 0 T = int(data[index]) index += 1 test_cases = [] for _ in range(T): N = int(data[index]) index += 1 A = list(map(int, data[index:index + N])) index += N test_cases.append((N, A)) return T, test_cases if __name__ == \\"__main__\\": T, test_cases = read_input() results = min_operations_to_equal_elements(T, test_cases) for result in results: print(result)"},{"question":"Two strings, A and B, are given. Your task is to determine the minimum number of operations required to convert string A into string B. The operations allowed are: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position in the string with another character. The function should return the minimum number of operations needed. Input Format: - The first line contains an integer T, the number of test cases. - The next 2*T lines contain the two strings A and B, one pair per test case. Output Format: - T lines, each containing the minimum number of operations required for each test case. Constraints: 1 ≤ T ≤ 10 1 ≤ |A|, |B| ≤ 1000 A and B consist of lowercase English letters only. Example Input: 2 sunday saturday kitten sitting Example Output: 3 3 Explanation: Case 1: Transform \\"sunday\\" to \\"saturday\\" can be done in 3 operations: 1. Insert \'a\' after \'s\' 2. Insert \'t\' after \'a\' 3. Replace \'n\' with \'r\' Case 2: Transform \\"kitten\\" to \\"sitting\\" can be done in 3 operations: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end Note: The problem can be solved using dynamic programming techniques.","solution":"def min_operations_to_convert(A, B): Returns the minimum number of operations required to convert string A into string B. The operations allowed are: 1. Insert a character at any position in the string. 2. Delete a character from any position in the string. 3. Replace a character at any position in the string with another character. m, n = len(A), len(B) # Create a dp array to store the number of operations dp = [[0] * (n + 1) for _ in range(m + 1)] # Fill the dp array for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j # A is empty, so insert all characters of B elif j == 0: dp[i][j] = i # B is empty, so remove all characters of A elif A[i - 1] == B[j - 1]: dp[i][j] = dp[i - 1][j - 1] # Characters are the same else: dp[i][j] = 1 + min(dp[i - 1][j], # Remove dp[i][j - 1], # Insert dp[i - 1][j - 1] # Replace ) return dp[m][n] def process_test_cases(test_cases): results = [] for A, B in test_cases: results.append(min_operations_to_convert(A, B)) return results"},{"question":"You are given an array of integers and a list of queries. Each query specifies a subarray and asks for the sum of the squares of all the integers within that subarray. Write a function that efficiently computes the sum of squares for each query. Input: - The first line contains an integer n (1 ≤ n ≤ 100,000), the number of elements in the array. - The second line contains n integers, representing the elements of the array. - The third line contains an integer q (1 ≤ q ≤ 50,000), the number of queries. - Each of the next q lines contains two integers l and r (1 ≤ l ≤ r ≤ n), specifying the subarray indices (1-based). Output: - For each query, output a single integer, the sum of the squares of all the integers within the specified subarray. Example Input: 5 1 2 3 4 5 3 1 3 2 4 1 5 Output: 14 29 55 Explanation: - For the first query (1, 3), the subarray is [1, 2, 3] and the sum of squares is 1^2 + 2^2 + 3^2 = 14. - For the second query (2, 4), the subarray is [2, 3, 4] and the sum of squares is 2^2 + 3^2 + 4^2 = 29. - For the third query (1, 5), the subarray is [1, 2, 3, 4, 5] and the sum of squares is 1^2 + 2^2 + 3^2 + 4^2 + 5^2 = 55.","solution":"def sum_of_squares(n, array, queries): Returns the sum of squares for each query. # Precompute the prefix sums of squares prefix_sums = [0] * (n + 1) for i in range(1, n + 1): prefix_sums[i] = prefix_sums[i - 1] + array[i - 1] ** 2 # Answer each query efficiently using the prefix sums results = [] for l, r in queries: sum_squares = prefix_sums[r] - prefix_sums[l - 1] results.append(sum_squares) return results"},{"question":"Sam is building a new library system for an online bookstore. Each book in the library will be uniquely identified by an International Standard Book Number (ISBN). Each ISBN in this system is a 13-digit number, but to prevent errors in storing and accessing these ISBNs, Sam wants to validate them using a specific check rule. The check rule for a valid ISBN-13 is as follows: 1. Multiply each digit of the ISBN by a weight alternately starting with 1 and 3. 2. Sum these results. 3. The ISBN is valid if the sum is a multiple of 10. For example, consider the ISBN `9780470059029`: - First digit = 9, weight = 1, result = 9 * 1 = 9 - Second digit = 7, weight = 3, result = 7 * 3 = 21 - Third digit = 8, weight = 1, result = 8 * 1 = 8 - Fourth digit = 0, weight = 3, result = 0 * 3 = 0 - Fifth digit = 4, weight = 1, result = 4 * 1 = 4 - Sixth digit = 7, weight = 3, result = 7 * 3 = 21 - Seventh digit = 0, weight = 1, result = 0 * 1 = 0 - Eighth digit = 0, weight = 3, result = 0 * 3 = 0 - Ninth digit = 5, weight = 1, result = 5 * 1 = 5 - Tenth digit = 9, weight = 3, result = 9 * 3 = 27 - Eleventh digit = 0, weight = 1, result = 0 * 1 = 0 - Twelfth digit = 2, weight = 3, result = 2 * 3 = 6 - Thirteenth digit = 9, weight = 1, result = 9 * 1 = 9 Sum = 9 + 21 + 8 + 0 + 4 + 21 + 0 + 0 + 5 + 27 + 0 + 6 + 9 = 110 Since 110 is a multiple of 10, the ISBN `9780470059029` is valid. ------ Input ------ First line contains an integer N denoting the number of ISBNs to check. Each of the next N lines contains a single 13-digit ISBN. ------ Output ------ For each ISBN, output a single line with the word \\"valid\\" if the ISBN is valid, or \\"invalid\\" if it is not. ------ Constraints ------ 1 ≤ N ≤ 100 Each ISBN is a valid 13-digit number. ------ Sample Input ------ 3 9780470059029 9781593275846 1234567890123 ------ Sample Output ------ valid valid invalid","solution":"def validate_isbn(isbn): Validates a single ISBN-13 number. :param isbn: A 13-digit string representing the ISBN number. :return: A string \\"valid\\" if the ISBN is valid, otherwise \\"invalid\\". total_sum = 0 for i, digit in enumerate(isbn): n = int(digit) if i % 2 == 0: total_sum += n else: total_sum += 3 * n if total_sum % 10 == 0: return \\"valid\\" else: return \\"invalid\\" def validate_isbns(n, isbns): Validates a list of ISBN-13 numbers. :param n: The number of ISBNs to validate. :param isbns: A list of 13-digit strings representing ISBN numbers. :return: A list with \\"valid\\" or \\"invalid\\" corresponding to each ISBN. results = [] for isbn in isbns: results.append(validate_isbn(isbn)) return results"},{"question":"A research institute has a robotic arm that performs multiple tasks such as picking, placing, and moving items. The robotic arm is controlled by a series of instructions. Each instruction can be one of the following: - \\"PICK\\": The robotic arm picks an item. - \\"PLACE\\": The robotic arm places an item in a designated area. - \\"MOVE X\\": The robotic arm moves X units to the left or right on a linear track, where X is a non-zero integer. The robotic arm can hold only one item at a time. If it receives a \\"PICK\\" command while already holding an item, it will ignore the command. Similarly, if the \\"PLACE\\" command is issued when it does not hold an item, it will also ignore that command. For the \\"MOVE X\\" command, X can be positive or negative: - A positive X indicates a move to the right. - A negative X indicates a move to the left. Your task is to determine the final position of the robotic arm and whether it is holding an item or not after executing a series of instructions. -----Input----- The first line contains a positive integer n (1 ≤ n ≤ 100), the number of instructions to be executed by the robotic arm. Each of the next n lines contains an instruction of the form \\"PICK\\", \\"PLACE\\", or \\"MOVE X\\", where X is a non-zero integer (-1000 ≤ X ≤ 1000). -----Output----- Print two lines: - The first line should contain a single integer indicating the final position of the robotic arm on the linear track. - The second line should be \\"YES\\" if the robotic arm is holding an item, or \\"NO\\" if it is not. -----Examples----- Input 5 PICK MOVE 5 PLACE MOVE -3 PICK Output 2 YES Input 3 MOVE 10 PICK MOVE -5 Output 5 YES -----Note----- In the first sample input: - The robotic arm picks an item. - Moves 5 units to the right. - Places the item. - Moves 3 units to the left. - Picks another item. Final position is 2 units to the right of the starting point, and the arm is holding an item. In the second sample input: - The robotic arm moves 10 units to the right. - Picks an item. - Moves 5 units to the left. Final position is 5 units to the right of the starting point, and the arm is holding an item.","solution":"def robotic_arm_simulation(instructions): position = 0 holding_item = False for instruction in instructions: if instruction == \\"PICK\\": if not holding_item: holding_item = True elif instruction == \\"PLACE\\": if holding_item: holding_item = False else: # MOVE X X = int(instruction.split()[1]) position += X return position, \\"YES\\" if holding_item else \\"NO\\""},{"question":"You are given a matrix m of size n x m consisting of positive integers and q queries to the matrix. There are two types of queries: * 1 r c x — set the element at position (r, c) to x. * 2 r1 c1 r2 c2 — find the maximum among the elements within the submatrix from (r1, c1) to (r2, c2) (inclusive of the boundaries). Input: The first line contains two integers n and m (1 ≤ n, m ≤ 100). The next n lines each contain m integers — elements of the matrix (1 ≤ matrix[i][j] ≤ 109). The next line contains one integer q (1 ≤ q ≤ 104). Then q lines follow, each representing a query. Each query is given either as 1 r c x — set the element at row r and column c to x (1 ≤ r ≤ n, 1 ≤ c ≤ m, 1 ≤ x ≤ 109) or as 2 r1 c1 r2 c2 — find the maximum among the elements in the submatrix from row r1 to row r2 and column c1 to column c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m). Output: For each query of type 2, print the answer to this query — the maximum in the corresponding submatrix. Examples Input 3 3 1 2 3 4 5 6 7 8 9 3 2 1 1 3 3 1 2 2 10 2 1 1 3 3 Output 9 10 Input 2 2 5 1 3 7 4 2 1 1 2 2 1 2 1 8 2 1 1 2 2 1 1 2 12 Output 7 8","solution":"def process_matrix_queries(matrix, queries): n = len(matrix) m = len(matrix[0]) results = [] for query in queries: parts = query.split() if parts[0] == \'1\': r, c, x = int(parts[1]), int(parts[2]), int(parts[3]) matrix[r-1][c-1] = x elif parts[0] == \'2\': r1, c1, r2, c2 = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) max_value = -float(\'inf\') for i in range(r1-1, r2): for j in range(c1-1, c2): max_value = max(max_value, matrix[i][j]) results.append(max_value) return results"},{"question":"Given an array of integers, your task is to rearrange the elements in such a way that the odd elements appear first, followed by the even elements. The relative order of the odd and even elements should be preserved. For example, if the input array is [1, 2, 3, 4, 5], the resulting array after rearrangement will be [1, 3, 5, 2, 4]. Example 1: Input: arr = [4, 3, 1, 2, 5] Output: [3, 1, 5, 4, 2] Explanation: The odd elements are [3, 1, 5] and the even elements are [4, 2]. Preserving their relative order, we get [3, 1, 5, 4, 2]. Example 2: Input: arr = [2, 4, 6, 8, 1, 3, 5] Output: [1, 3, 5, 2, 4, 6, 8] Explanation: The odd elements are [1, 3, 5] and the even elements are [2, 4, 6, 8]. Preserving their relative order, we get [1, 3, 5, 2, 4, 6, 8]. Your Task: The task is to complete the function rearrangeArray() which takes the array of integers as input and returns the modified array with odd elements first followed by even elements. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5 0 ≤ arr[i] ≤ 10^6","solution":"def rearrangeArray(arr): Rearranges the array such that odd numbers appear first followed by even numbers. The relative order of the odd and even elements is preserved. :param arr: List[int] - The input list of integers :return: List[int] - The rearranged list with odd numbers first then even numbers. odd_elements = [x for x in arr if x % 2 != 0] even_elements = [x for x in arr if x % 2 == 0] return odd_elements + even_elements"},{"question":"Imagine you have a string consisting of words separated by spaces. Your goal is to transform this string such that each word has its first character capitalized and all subsequent characters in lowercase while maintaining the order of the words. You also have to remove any extra spaces between the words so that there is only a single space separating each word. **KATA GOAL: Return the transformed string.** # Example ```python Input: \\"hello world THIS is a TEST\\" Output: \\"Hello World This Is A Test\\" ``` # Explanation - In the input string \\"hello world THIS is a TEST\\", the words are separated by multiple spaces. - First, trim any leading or trailing spaces and reduce multiple spaces between words to a single space. - Then, capitalize the first letter of each word and make all other letters lowercase. - The final output should be \\"Hello World This Is A Test\\". # Function Signature ```python def transform_string(s: str) -> str: pass ``` # Fully Worked Example ```python Input: \\" hello WORLD tHis IS a Test \\" Output: \\"Hello World This Is A Test\\" Steps: 1. Remove leading and trailing spaces -> \\"hello WORLD tHis IS a Test\\" 2. Replace multiple spaces with single spaces -> \\"hello WORLD tHis IS a Test\\" 3. Capitalize each word -> \\"Hello World This Is A Test\\" 4. Return the transformed string. ```","solution":"def transform_string(s: str) -> str: Transforms the input string such that each word has its first character capitalized and all subsequent characters in lowercase. It also removes any extra spaces so that there is only a single space separating each word. # Split the string into words based on whitespace and filter out any empty strings words = filter(None, s.split(\' \')) # Capitalize the first letter of each word and join them with a single spaces transformed_words = [word.capitalize() for word in words] # Join the list of transformed words with a single space result = \' \'.join(transformed_words) return result"},{"question":"A software company wants to optimize the work schedule of its team by ensuring that all tasks are completed within the given deadlines. Each task has a specific time duration it takes to complete and a deadline by which it must be finished. Multiple team members can work on tasks simultaneously, but any team member can take up only one task at a time. The company wants to know whether it is possible to schedule all tasks such that they all meet their respective deadlines. Input: The first line contains T denoting the number of test cases. Each test case consists of two lines. The first line contains n, the number of tasks. The next line contains n space-separated pairs of integers t_i and d_i where t_i denotes the time required to complete the ith task and d_i denotes the deadline of the ith task in hours. Output: For each testcase, print YES if it is possible to schedule all tasks to meet their deadlines, or NO. Constraints: 1 ≤ T ≤ 25 1 ≤ n ≤ 100 1 ≤ t_i ≤ 100 1 ≤ d_i ≤ 1000 SAMPLE INPUT: 2 3 2 10 4 15 3 7 4 1 5 1 10 1 15 1 20 SAMPLE OUTPUT: YES YES Explanation: In the first test case: - Task 1 takes 2 hours and has to be completed by hour 10. - Task 2 takes 4 hours and has to be completed by hour 15. - Task 3 takes 3 hours and has to be completed by hour 7. It\'s possible to sequence the tasks as follows: - Task 3 can be done first, from hour 0 to hour 3. - Task 1 can be done next, from hour 3 to hour 5. - Task 2 can be done last, from hour 5 to hour 9. So, all tasks meet their deadlines. In the second test case: - All tasks can be done sequentially with each taking 1 hour, and each deadline extending beyond the previous task\'s completion time. Therefore, it is possible to schedule all tasks accordingly.","solution":"def can_schedule_all_tasks(T, test_cases): results = [] for case in test_cases: n, tasks = case tasks.sort(key=lambda x: x[1]) # Sort tasks by deadline current_time = 0 possible = True for t, d in tasks: current_time += t if current_time > d: possible = False break results.append(\\"YES\\" if possible else \\"NO\\") return results"},{"question":"Given an array of integers [a_1, a_2, ..., a_n], find the longest subsequence such that the absolute difference between any two consecutive elements is 1. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each of the next t lines contains an integer n (1 le n le 10^5) followed by n integers a_1, a_2, ..., a_n — the elements of the array a. It is guaranteed that the sum of all n across all test cases does not exceed 10^6. -----Output----- For each test case, print a single integer — the length of the longest subsequence where the absolute difference between any two consecutive elements is 1. -----Examples----- Input 3 6 1 2 3 4 5 6 7 1 3 5 7 9 11 13 5 10 9 4 5 6 Output 6 1 3 -----Note----- In the first test case, the entire array is already a valid subsequence with difference 1 between consecutive elements. In the second test case, no two consecutive elements have a difference of 1, so the longest subsequence is any single element, hence the answer is 1. In the third test case, one of the possible longest subsequences is [4, 5, 6], with a length of 3.","solution":"def longest_subsequence(t, test_cases): results = [] for case in test_cases: n, arr = case if n == 1: results.append(1) continue arr.sort() max_len = 1 current_len = 1 for i in range(1, n): if abs(arr[i] - arr[i-1]) == 1: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) results.append(max_len) return results"},{"question":"Create a function that takes a string representing a Roman numeral and returns its integer value. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. Symbol | Value ---|--- I | 1 V | 5 X | 10 L | 50 C | 100 D | 500 M | 1000 In Roman numerals, smaller numbers preceding larger numbers indicate subtraction, while larger numbers preceding smaller numbers indicate addition. For example, IV represents 4 (5 - 1) and IX represents 9 (10 - 1). Other cases include XII as 12 (10 + 2) and XXVII as 27 (10 + 10 + 5 + 1 + 1). Complete the function that converts a Roman numeral to its integer value. Assume input will always be a valid Roman numeral. Example If the input string is: `\\"MCMXCIV\\"` The return integer would be: `1994`","solution":"def roman_to_int(s): Convert a Roman numeral string to an integer. :param s: A string representing the Roman numeral. :return: The integer value of the Roman numeral. roman_numerals = { \'I\': 1, \'V\': 5, \'X\': 10, \'L\': 50, \'C\': 100, \'D\': 500, \'M\': 1000 } total = 0 prev_value = 0 for char in reversed(s): value = roman_numerals[char] if value < prev_value: total -= value else: total += value prev_value = value return total"},{"question":"Your task is to create a special sequence of integers that adheres to a specific set of rules. The sequence should satisfy the following conditions: 1. The sequence must start with a single integer `1`. 2. Every subsequent integer in the sequence must be larger than the previous one. 3. Between any two integers in the sequence that differ by `k` (for some `k > 1`), there must be at least `k-1` integers. Given an integer `n`, generate the first `n` integers of such a sequence. -----Input----- The input consists of a single integer `n` (1 leq n leq 1000). -----Output----- Output a sequence of `n` integers separated by spaces. -----Examples----- Sample Input 1: 5 Sample Output 1: 1 2 4 5 7 Sample Input 2: 10 Sample Output 2: 1 2 4 5 7 8 10 11 13 14","solution":"def generate_special_sequence(n): Generate a special sequence that satisfies these rules: 1. The sequence must start with a single integer `1`. 2. Every subsequent integer in the sequence must be larger than the previous one. 3. Between any two integers in the sequence that differ by `k` (for some `k > 1`), there must be at least `k-1` integers. if n <= 0: return [] result = [1] current_number = 2 while len(result) < n: valid = False while not valid: valid = True for i in range(len(result)): if current_number - result[i] > 1: if current_number - result[i] <= len(result) - i: valid = False current_number += 1 break result.append(current_number) current_number += 1 return result"},{"question":"In a city, there are n intersections connected by m bidirectional roads. Each road has a length in minutes it takes to travel. The city is planning to construct a new train line to expedite transportation. The train line consists of two stations, each located at one of the intersections. Citizens can travel from any intersection to another by either using the roads or switching to the train line if it provides a quicker route. Given the constraint of constructing two train stations, calculate the minimum time required to travel between any two intersections in the city, considering optimal placement for the train stations. You need to implement a function that determines the minimum travel time between the two farthest intersections. This is known as the \\"diameter\\" of the city and is ideally minimized by the placement of the new train line. Input The input is given in the following format: n m u1 v1 t1 u2 v2 t2 :: um vm tm The first line contains two integers, n (2 ≤ n ≤ 100) and m (1 ≤ m ≤ 10,000), representing the number of intersections and the number of roads respectively. The following m lines each contain three integers, ui, vi (1 ≤ ui, vi ≤ n) and ti (1 ≤ ti ≤ 10^4), representing a road between intersections ui and vi with travel time ti in minutes. Output Print the minimum required travel time between the most distant intersections after optimally placing the new train stations. Example Input 6 7 1 2 4 2 3 3 3 4 5 1 5 8 5 6 6 4 6 1 3 6 4 Output 8","solution":"import heapq def dijkstra(n, graph, start): distances = [float(\'inf\')] * n distances[start] = 0 queue = [(0, start)] while queue: current_dist, u = heapq.heappop(queue) if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(queue, (distance, v)) return distances def calculate_diameter_with_train_station(n, roads): graph = [[] for _ in range(n)] for u, v, t in roads: graph[u - 1].append((v - 1, t)) graph[v - 1].append((u - 1, t)) distances = [dijkstra(n, graph, i) for i in range(n)] max_dist = 0 for i in range(n): for j in range(i + 1, n): max_dist = max(max_dist, distances[i][j]) return max_dist def minimize_diameter(n, m, edges): roads = [] for edge in edges: roads.append((edge[0], edge[1], edge[2])) min_time = float(\'inf\') for i in range(n): for j in range(i + 1, n): augmented_graph = roads[:] augmented_graph.append((i + 1, j + 1, 0)) time = calculate_diameter_with_train_station(n, augmented_graph) if time < min_time: min_time = time return min_time"},{"question":"On a hot summer day, Kaya decided to make her favorite dessert - a fruit salad. She has various types of fruits, each with a specified number of pieces she intends to use. However, Kaya also wants to ensure that each type of fruit in the salad is in equal proportions. Kaya can either add more fruits or remove some to achieve equal quantities of each type in the fruit salad. She wants to find the minimum number of pieces she needs to add or remove to achieve this balance. Given a list of integers representing the number of pieces of each type of fruit Kaya has, write a program that calculates the minimum number of pieces that need to be added or removed to make the quantities of each type of fruit equal. Input: - The first line contains an integer N, the number of types of fruits. - The second line contains N integers separated by spaces, where each integer represents the number of pieces of a particular type of fruit. Output: - Output a single integer, the minimum number of pieces that need to be added or removed to balance the quantities of all types of fruits. Example 1: ``` Input: 4 5 7 10 8 Output: 6 ``` Example 2: ``` Input: 3 12 15 18 Output: 6 ``` Explanation: In Example 1, the goal is to make the number of pieces of each fruit type the same. One possible way to do this is to adjust all the quantities to the average (rounded) number of pieces, which might involve removing 2 pieces from the first type, adding 1 piece to the second type, removing 2 pieces from the third type, and adding 1 piece to the fourth type, making a total of 6 pieces adjusted. In Example 2, the average number is 15. To balance the quantities, we need to remove 3 pieces from the third type, and add 3 pieces to the first type, making a total of 6 pieces adjusted.","solution":"def minimum_adjustments_to_balance(fruits): Given a list representing the number of pieces of each type of fruit, this function calculates the minimum number of pieces to add or remove to make the quantities of all types of fruits equal. N = len(fruits) if N == 0: return 0 total_pieces = sum(fruits) target = total_pieces // N adjustments = sum(abs(fruit - target) for fruit in fruits) return adjustments"},{"question":"You are given a room with a rectangular grid of dimensions N x M. Each cell in the grid is initially unpainted. You must paint the cells in such a way that the final painted region forms a contiguous block of cells, meaning that from any painted cell, you can move to any other painted cell by traveling through other painted cells. You are asked to find the minimum number of cells you need to paint so that all four boundaries (the top, bottom, left, and right edges) of the grid are part of the contiguous painted region. -----Input format----- A single line, with two space-separated integers, N and M, representing the dimensions of the grid. -----Output format----- A single integer, the minimum number of cells that need to be painted to ensure that all four boundaries of the grid are part of a contiguous block of painted cells. -----Test Data----- In all subtasks, 1 ≤ N, M ≤ 1000. -----Example----- Here is the sample input and output corresponding to the example above: -----Sample input----- 3 3 -----Sample output----- 8 Note: Your program should not print anything other than what is specified in the output format. Please remove all diagnostic print statements before making your final submission. A program with extraneous output will be treated as incorrect!","solution":"def min_painted_cells(N, M): This function returns the minimum number of cells that need to be painted so that all four boundaries of the grid are part of the contiguous painted region. if N == 1: return M if M == 1: return N return 2 * N + 2 * M - 4"},{"question":"An e-commerce company maintains a list of their best-selling product IDs, represented as an array. Each product ID is a positive integer. The company notices that some products are also listed as competitors\' best-sellers, making these IDs appear multiple times in their list. They want to identify the product ID that appears the most frequently in their list. If there are multiple such product IDs, they want the smallest one among them. Your task is to write a program that helps the company find this product ID. Input The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of product IDs in the array. The second line contains n integers pi (1 ≤ pi ≤ 10^9) — the product IDs in the array. Output Print the single integer which is the ID of the most frequent product. If there are multiple such IDs, print the smallest one. Examples Input 7 4 4 1 2 2 4 1 Output 4 Input 6 2 2 3 3 4 4 Output 2","solution":"def find_most_frequent_product(n, products): Finds the product ID that appears most frequently in the list. If there are multiple such product IDs, returns the smallest one. from collections import Counter # Count frequency of each product ID product_count = Counter(products) # Find the maximum frequency max_frequency = max(product_count.values()) # Find all product IDs with the maximum frequency most_frequent_products = [product_id for product_id, freq in product_count.items() if freq == max_frequency] # Return the smallest product ID with the maximum frequency return min(most_frequent_products)"},{"question":"Alice loves arranging her bookshelf. She wants to organize her books in such a way that the heights of the books on the shelf form a strictly increasing sequence from left to right. She has a list of books with their respective heights and she can remove some of them to achieve her goal. However, she wants to remove the minimum number of books possible. Given the list of book heights, find the minimum number of books Alice has to remove to make the heights of the books strictly increasing. Input The first line of the input contains an integer n denoting the number of books. The second line contains n space-separated integers representing the height of each book. Output Output a single integer, the minimum number of books Alice has to remove. Constraints 1 ≤ n ≤ 10^5 1 ≤ height of each book ≤ 10^9 Example Input: 6 5 3 4 8 6 7 Output: 2 Explanation: By removing the books with heights 3 and 6, the remaining sequence (5, 4, 8, 7) can be rearranged to (5, 8). Another possible result is removing the books with heights 3 and 7, which leaves the sequence (5, 4, 8, 6), and rearranging it to (5, 8). Both operations require removing 2 books.","solution":"def min_books_to_remove(heights): Given a list of book heights, returns the minimum number of books to remove to make the heights strictly increasing. from bisect import bisect_left def longest_increasing_subsequence(arr): lis = [] for height in arr: pos = bisect_left(lis, height) if pos == len(lis): lis.append(height) else: lis[pos] = height return len(lis) n = len(heights) lis_length = longest_increasing_subsequence(heights) return n - lis_length"},{"question":"Bessie the cow is grazing in a pasture that can be represented as a grid with `n` rows and `m` columns. Each cell in the grid is either passable (.) or contains an obstacle (#). Bessie starts at the top-left corner of the grid (1, 1) and wants to reach the bottom-right corner (n, m). Bessie can only move to adjacent cells that are passable, either left, right, up, or down. Determine the minimum number of moves Bessie needs to reach her destination or determine if it\'s impossible for her to get there. -----Input----- The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 1000) — the dimensions of the grid. The next `n` lines each contain a string of length `m` consisting of characters \'.\' and \'#\'. -----Output----- Print a single integer — the minimum number of moves Bessie needs to reach the bottom-right corner of the grid. If it is impossible for her to reach the destination, print `-1`. -----Examples----- Input 3 3 ..# .#. ... Output 4 Input 4 4 .... ..#. .#.. .... Output 6 -----Note----- In the first example, Bessie can move as follows: (1, 1) → (1, 2) → (2, 2) → (3, 2) → (3, 3), totaling 4 moves. In the second example, Bessie can find a path: (1, 1) → (1, 2) → (1, 3) → (2, 3) → (3, 3) → (4, 3) → (4, 4), totaling 6 moves.","solution":"from collections import deque def min_moves_to_reach_end(n, m, grid): Finds the minimum number of moves to reach the bottom-right corner of the grid or returns -1 if it\'s impossible to reach the destination. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return -1 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(0, 0)]) visited = [[False for _ in range(m)] for _ in range(n)] visited[0][0] = True moves = 0 while queue: for _ in range(len(queue)): x, y = queue.popleft() if x == n - 1 and y == m - 1: return moves for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': queue.append((nx, ny)) visited[nx][ny] = True moves += 1 return -1"},{"question":"Given an array arr[] of N integers that represent the inorder traversal of a Binary Search Tree (BST), the task is to convert this sorted array into a Balanced BST and return its root. A balanced BST is a binary tree where the depth of the two subtrees of every node never differs by more than 1. Example 1: Input: N = 7 arr[] = {1, 2, 3, 4, 5, 6, 7} Output: 4 2 6 1 3 5 7 Explanation: The formed Binary Tree is: 4 / 2 6 / / 1 3 5 7 Example 2: Input: N = 5 arr[] = {10, 20, 30, 40, 50} Output: 30 10 40 20 50 Explanation: The formed Binary Tree is: 30 / 10 40 20 50 Your Task: You don\'t need to read input or print anything. Your task is to complete the function sortedArrayToBST() which takes the array arr[] and its size N as inputs and returns the root of the balanced BST. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 <= N <= 10^4","solution":"class TreeNode: def __init__(self, val:int): self.val = val self.left = None self.right = None def sortedArrayToBST(arr): Convert sorted array to balanced BST. :param arr: Sorted list of integers :return: Root of the balanced BST if not arr: return None def convertListToBST(start, end): if start > end: return None mid = (start + end) // 2 node = TreeNode(arr[mid]) node.left = convertListToBST(start, mid - 1) node.right = convertListToBST(mid + 1, end) return node return convertListToBST(0, len(arr) - 1) def preorderTraversal(root): Perform pre-order traversal of the tree. :param root: root of the BST :return: List of nodes in pre-order if root is None: return [] result = [] def traverse(node): if node: result.append(node.val) traverse(node.left) traverse(node.right) traverse(root) return result"},{"question":"Count the Vowels Given a string S, write a program to count the number of vowels (a, e, i, o, u) in the string. -----Constraints----- - The length of the string S will be between 1 and 100 inclusive. - S consists of only lowercase English letters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Output the number of vowels in the string. -----Sample Input----- hello -----Sample Output----- 2 The input string \\"hello\\" contains 2 vowels: \'e\' and \'o\'.","solution":"def count_vowels(S): Returns the number of vowels in the given string S. vowels = \'aeiou\' return sum(1 for char in S if char in vowels)"},{"question":"Given two strings `str1` and `str2` of lengths `n` and `m` respectively, the task is to find the length of the shortest common supersequence of the two strings. A supersequence is a string that has both `str1` and `str2` as subsequences. Example 1: Input: str1 = \\"abc\\" str2 = \\"ac\\" Output: 3 Explanation: Shortest common supersequence is \\"abc\\" which has length 3. Example 2: Input: str1 = \\"geek\\" str2 = \\"eke\\" Output: 5 Explanation: Shortest common supersequence is \\"geeke\\" which has length 5. Your Task: You don\'t need to read input or print anything. Complete the function `shortestCommonSupersequence()` which takes the strings `str1` and `str2` as input parameters and returns the length of the shortest common supersequence. Expected Time Complexity: O(n * m) Expected Auxiliary Space: O(n * m) Constraints: 1 ≤ n, m ≤ 100 The strings consist of lower case English letters only.","solution":"def shortestCommonSupersequence(str1, str2): n, m = len(str1), len(str2) # Create a DP array dp = [[0] * (m + 1) for _ in range(n + 1)] # Fill dp array for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i - 1] == str2[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1]) return dp[n][m]"},{"question":"Given a string `s` and a character `c`, find the minimum distance from the character `c` in the string to the beginning of the string `s`. The distance is measured in terms of the number of characters between `c` and the beginning of the string. If the character `c` is not present in the string, return -1. Example 1: Input: s = \\"hello\\", c = \'e\' Output: 1 Explanation: Character \'e\' is the second character in the string, and its distance from the beginning is 1. Example 2: Input: s = \\"abcde\\", c = \'z\' Output: -1 Explanation: Character \'z\' is not present in the string. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minDistance()` which takes `s` and `c` as inputs and returns the minimum distance. Expected Time Complexity: O(n), where `n` is the length of the string. Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s| ≤ 10^5 `s` consists of lowercase English letters. `c` is a lowercase English letter.","solution":"def minDistance(s, c): Returns the minimum distance of the character `c` from the beginning of the string `s`. If the character `c` is not present in the string, return -1. try: return s.index(c) except ValueError: return -1"},{"question":"Implement a function that simulates the process of merging two sorted lists into one sorted list. The function takes two lists of integers as input and returns a new sorted list containing all elements from both input lists. -----Input:----- - The function `merge_sorted_lists` receives two parameters: - `list1`: A list of integers sorted in non-descending order. - `list2`: A list of integers sorted in non-descending order. -----Output:----- - The function should return a new list containing all the elements from `list1` and `list2` sorted in non-descending order. -----Constraints----- - The length of `list1` and `list2` can be between 0 and 10^5. - Each integer in `list1` and `list2` can be between -10^9 and 10^9. -----Sample Input:----- merge_sorted_lists([1, 3, 5, 7], [2, 4, 6, 8]) merge_sorted_lists([0, 2, 2], [1, 3, 4]) -----Sample Output:----- [1, 2, 3, 4, 5, 6, 7, 8] [0, 1, 2, 2, 3, 4] -----Explanation:----- - Sample Case 1 : The first input list is `[1, 3, 5, 7]` and the second input list is `[2, 4, 6, 8]`. After merging them in sorted order, we get the output `[1, 2, 3, 4, 5, 6, 7, 8]`. - Sample Case 2 : The first input list is `[0, 2, 2]` and the second input list is `[1, 3, 4]`. After merging them in sorted order, we get the output `[0, 1, 2, 2, 3, 4]`.","solution":"def merge_sorted_lists(list1, list2): Merges two sorted lists into one sorted list. merged_list = [] i, j = 0, 0 # Traverse both lists and merge them together while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # If there are remaining elements in list1, add them to merged list while i < len(list1): merged_list.append(list1[i]) i += 1 # If there are remaining elements in list2, add them to merged list while j < len(list2): merged_list.append(list2[j]) j += 1 return merged_list"},{"question":"The engineering team of the world\'s largest social media platform is working on a new feature. They want to implement a function that detects patterns within a user\'s text posts. A common pattern they have identified is the \\"longest palindromic substring.\\" A palindromic string is a string that reads the same forward and backward, such as \\"racecar\\" or \\"madam.\\" You need to develop a solution that finds the longest palindromic substring within a given text post. If there are multiple such substrings of the same length, return the first one that appears. -----Input----- Input consists of a single string s (1 le s le 10^3) containing only lowercase English letters. -----Output----- Output the longest palindromic substring within s. If there are multiple substrings of the same maximum length, output the one that appears first. -----Examples----- Sample Input 1: babad Sample Output 1: bab Sample Input 2: cbbd Sample Output 2: bb","solution":"def longest_palindromic_substring(s): Finds the longest palindromic substring within a given string s. n = len(s) if n <= 1: return s start, max_length = 0, 1 # Stores the starting index and maximum length of the palindrome found # Define a helper function to expand around the center and update the start and max_length def expand_around_center(left, right): nonlocal start, max_length while left >= 0 and right < n and s[left] == s[right]: current_length = right - left + 1 if current_length > max_length: start = left max_length = current_length left -= 1 right += 1 for i in range(n): # Odd length palindromes, center is at i expand_around_center(i, i) # Even length palindromes, center is between i and i+1 expand_around_center(i, i + 1) return s[start:start + max_length]"},{"question":"Given a 2D grid of size m x n filled with non-negative integers, you start at the top-left corner (0, 0). Each cell in the grid represents the cost of stepping into that cell. Your goal is to reach the bottom-right corner (m-1, n-1) with the minimum cost. You can move only right or down. Write a function that computes this minimum cost path. Example: ```python grid = [ [1, 3, 1], [1, 5, 1], [4, 2, 1] ] # The function should return 7, which is the sum of the path 1→3→1→1→1 (marked path in the grid). def minPathSum(grid: list[list[int]]) -> int: # Your implementation here ``` Input: - `grid`: List[List[int]] Output: - An integer representing the minimum sum of the path from top-left to bottom-right corner. ```python assert minPathSum([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) == 7 assert minPathSum([[1, 2, 3], [4, 5, 6]]) == 12 ```","solution":"def minPathSum(grid): Calculate the minimum path sum from top-left to bottom-right corner of the grid. :param grid: List[List[int]]: The grid filled with non-negative integers :return: int: The minimum path sum if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the first row for i in range(1, n): grid[0][i] += grid[0][i - 1] # Initialize the first column for j in range(1, m): grid[j][0] += grid[j - 1][0] # Fill the rest of the grid for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]) return grid[m - 1][n - 1]"},{"question":"You are given a grid with n rows and m columns. Each cell of the grid contains an integer denoting the altitude of that cell. You need to process q queries on this grid. Each query asks you to find the lowest altitude in the subgrid defined by the top-left corner (r1, c1) and the bottom-right corner (r2, c2). Input The first line contains three integers n, m, and q (1 ≤ n, m ≤ 1000, 1 ≤ q ≤ 100000) — number of rows, number of columns, and number of queries respectively. Each of the next n lines contains m integers ai1, ai2, ..., aim (1 ≤ aij ≤ 10^9) — the altitudes of the cells. Each of the next q lines contains four integers r1, c1, r2 and c2 (1 ≤ r1 ≤ r2 ≤ n, 1 ≤ c1 ≤ c2 ≤ m) — the corners of the subgrid for each query (1-based indexing). Output For each query, output the lowest altitude in the defined subgrid. Examples Input 3 3 2 1 2 3 4 5 6 7 8 9 1 1 2 2 2 2 3 3 Output 1 5 Input 4 4 3 10 15 20 25 20 25 10 15 30 35 40 45 50 55 60 65 1 1 4 4 2 2 3 3 3 3 4 4 Output 10 10 45 In the first example, for the first query, the subgrid from (1,1) to (2,2) contains the values: 1 2 4 5 The lowest altitude is 1. For the second query, the subgrid from (2,2) to (3,3) contains the values: 5 6 8 9 The lowest altitude is 5. In the second example, for the first query, the subgrid from (1,1) to (4,4) contains the entire grid. The lowest altitude is 10. For the second query, the subgrid from (2,2) to (3,3) contains the values: 25 10 35 40 The lowest altitude is 10. For the third query, the subgrid from (3,3) to (4,4) contains the values: 40 45 60 65 The lowest altitude is 40.","solution":"def find_lowest_altitudes(n, m, grid, queries): Returns a list of lowest altitudes for given subgrid queries. result = [] for query in queries: r1, c1, r2, c2 = query lowest_altitude = float(\'inf\') for i in range(r1-1, r2): for j in range(c1-1, c2): lowest_altitude = min(lowest_altitude, grid[i][j]) result.append(lowest_altitude) return result"},{"question":"You are given a list of integers where each integer represents the height of a building. The buildings form a row and are placed next to each other. A building with a greater height blocks the view of buildings to its right that are shorter. Your task is to determine the number of buildings that have a view of the sunset, when viewed from left to right. A building has a view of the sunset if there are no taller buildings to its right. ----Input---- The first line contains an integer t (1 leq t leq 10000) - the number of test cases. The description of the test cases follows. For each test case: - The first line contains a positive integer n (1 leq n leq 100000) - the number of buildings in the test case. - The second line contains n integers h_i (1 leq h_i leq 100000) - the heights of the buildings in the test case. It is guaranteed that the sum of n over all test cases does not exceed 100000. ----Output---- For each test case, print a single integer which is the number of buildings that have a view of the sunset. ----Example---- Input 3 6 3 7 8 3 6 1 5 1 2 3 4 5 5 5 4 3 2 1 Output 3 1 5 Explanation: - In the first test case, the buildings with heights [8, 6, 1] have a view of the sunset. - In the second test case, only the building with height [5] has a view of the sunset. - In the third test case, all buildings have a view of the sunset because there is no taller building to the right of any building.","solution":"def count_sunset_view_buildings(buildings): Returns the number of buildings that have a view of the sunset. max_height = 0 count = 0 # Loop through buildings from right to left for height in reversed(buildings): if height > max_height: count += 1 max_height = height return count def sunset_views(test_cases): results = [] for buildings in test_cases: results.append(count_sunset_view_buildings(buildings)) return results def process_input_and_output(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 test_cases = [] for _ in range(t): n = int(data[index]) index += 1 buildings = list(map(int, data[index:index+n])) index += n test_cases.append(buildings) results = sunset_views(test_cases) for result in results: print(result)"},{"question":"Petya loves sequences and playing with numbers. One day, he came across a new kind of number sequence puzzle. For a given integer n, Petya defines a sequence a of length n as a_1, a_2, dots, a_n such that: - a_i is a power of 2 for all 1 leq i leq n - a_1 leq a_2 leq dots leq a_n - The sum of the sequence a_1 + a_2 + dots + a_n is equal to s Petya wants you to help him determine if it\'s possible to construct such a sequence for given values of n and s. -----Input----- Each test contains multiple test cases. The first line contains the number of test cases t (1 le t le 2000). The description of the test cases follows. Each test case contains two integers n and s (1 le n le 1000, 0 le s le 10^{18}). -----Output----- For every test case, output in a new line \\"YES\\" (without quotes) if such a sequence can be constructed, otherwise print \\"NO\\". -----Examples----- Input 4 3 12 4 16 2 1 5 31 Output YES YES NO YES -----Note----- In the first example, the sequence can be [4, 4, 4] which sums up to 12. In the second example, the sequence can be [4, 4, 4, 4] which sums up to 16. In the third example, it\'s impossible to form a sequence of length 2 that sums up to 1 using powers of 2. In the fourth example, the sequence can be [1, 2, 4, 8, 16] which sums up to 31.","solution":"def can_construct_sequence(t, test_cases): results = [] for n, s in test_cases: min_sum = n # The sequence where each a_i = 1 (i.e., 2^0) max_sum = (2 ** (n - 1)) * n # The sequence where the largest possible terms are used if min_sum <= s <= max_sum: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Emma loves solving puzzles and one day she stumbled upon an interesting puzzle involving letters and words. Given an initial and a target word, the goal is to transform the initial word into the target word by changing one letter at a time. Each intermediate word formed in this process must be a valid English word, and Emma has a dictionary of valid words to check against. Emma needs your help to determine the minimum number of transformations required to convert the initial word to the target word, following the given rules. If it\'s not possible, return -1. The length of the initial word will be the same as the length of the target word, and each transformation changes exactly one letter to another. -----Input----- The first line contains two space-separated strings: the initial word and the target word. Both words are of length n (2 le n le 20). The next line contains an integer k (1 le k le 100), representing the number of valid words in the dictionary. The next k lines each contain one valid English word of length n. -----Output----- Print the minimum number of transformations required to convert the initial word to the target word, or -1 if it\'s not possible. -----Examples----- Input hit cog 5 hot dot dog lot log Output 4 Input apple radar 5 grape tiger sugar lemon radar Output -1 -----Note----- In the first example, the sequence of transformations is: hit -> hot -> dot -> dog -> cog. The total number of transformations is 4. In the second example, it\'s not possible to transform \\"apple\\" into \\"radar\\" following the given rules, so the answer is -1.","solution":"from collections import deque def is_one_letter_different(word1, word2): Check if the two words differ by exactly one letter. count = 0 for a, b in zip(word1, word2): if a != b: count += 1 if count > 1: return False return count == 1 def min_transformations(initial, target, dictionary): if initial == target: return 0 word_set = set(dictionary) if target not in word_set: return -1 queue = deque([(initial, 0)]) visited = set([initial]) while queue: current_word, steps = queue.popleft() for word in list(word_set): if is_one_letter_different(current_word, word) and word not in visited: if word == target: return steps + 1 visited.add(word) queue.append((word, steps + 1)) return -1"},{"question":"Given a singly linked list where each node contains an integer value, the task is to remove all instances of a given integer value from the list. Example 1: Input: Head of the linked list: 1 -> 2 -> 6 -> 3 -> 4 -> 5 -> 6 Value to remove: 6 Output: Modified linked list: 1 -> 2 -> 3 -> 4 -> 5 Example 2: Input: Head of the linked list: 1 -> 1 -> 1 -> 1 Value to remove: 1 Output: Modified linked list: (an empty list) Your Task: You don\'t need to read input or print anything. Complete the function removeElements() which takes the head of the linked list and an integer value as input parameters, and returns the head of the modified linked list, after removing all the instances of the given integer value. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ number of nodes in the linked list ≤ 10^4 1 ≤ Node.val ≤ 50","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def removeElements(head, val): Remove all occurrences of val from the linked list. dummy = ListNode(0) dummy.next = head current = dummy while current.next is not None: if current.next.val == val: current.next = current.next.next else: current = current.next return dummy.next # Helper function to convert a list to a linked list def list_to_linkedlist(lst): if not lst: return None head = ListNode(lst[0]) current = head for value in lst[1:]: current.next = ListNode(value) current = current.next return head # Helper function to convert a linked list to a list def linkedlist_to_list(head): result = [] current = head while current: result.append(current.val) current = current.next return result"},{"question":"You are organizing a small tournament where players are engaged in a 1v1 competition. In each round, the player with a higher skill level progresses to the next round. The tournament uses a knockout system until only one winner remains. The skill levels of the players are represented as an array of positive integers where each integer represents a player\'s skill level. Your task is to write a function that simulates the tournament and determines the skill level of the final winner. Here\'s an example of how the tournament progresses: ``` Input: [3, 5, 7, 2, 1, 4, 6, 8] Round 1: [5, 7, 4, 8] (3 vs 5, 7 vs 2, 1 vs 4, 6 vs 8) Round 2: [7, 8] (5 vs 7, 4 vs 8) Round 3: [8] (7 vs 8) Output: 8 ``` In the case above, the final winner has a skill level of 8. * The input array will contain an even number of players, and the length of the array will always be a power of 2. # Input - An array of positive integers representing skill levels of the players. # Output - An integer representing the skill level of the final winner. # Constraints - The length of the array will be at least 2 and at most 1024. - Each skill level will be a positive integer no greater than 10,000. # Function Signature ```python def find_tournament_winner(skill_levels: List[int]) -> int: ```","solution":"from typing import List def find_tournament_winner(skill_levels: List[int]) -> int: Simulates a tournament and determines the skill level of the final winner. :param skill_levels: List of positive integers representing skill levels of the players. :return: Skill level of the final winner. while len(skill_levels) > 1: skill_levels = [max(skill_levels[i], skill_levels[i + 1]) for i in range(0, len(skill_levels), 2)] return skill_levels[0]"},{"question":"Write a program that reads a list of integers and finds the longest increasing subsequence (LIS). ------ Input ------ An integer n, 1 ≤ n ≤ 100, denoting the number of elements in the list, followed by a line containing n integers a1, a2, ..., an, where 1 ≤ ai ≤ 1000. ------ Output ------ Output the length of the longest increasing subsequence in the list. ----- Sample Input 1 ------ 8 10 9 2 5 3 7 101 18 ----- Sample Output 1 ------ 4","solution":"def longest_increasing_subsequence(arr): Returns the length of the longest increasing subsequence in the given list of integers. if not arr: return 0 n = len(arr) lis = [1] * n for i in range(1, n): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis)"},{"question":"Given an array of integers `nums` and an integer `k`, return the number of unique k-length subarrays that have the maximum sum. A subarray is a contiguous part of an array. For example, if `nums` = [1, 2, 3, 4], the k-length subarrays for k = 2 are [1, 2], [2, 3], and [3, 4]. Example 1: Input: nums = [1, 2, 3, 4, 5], k = 2 Output: 1 Explanation: The k-length subarrays for k = 2 are [1, 2], [2, 3], [3, 4], [4, 5]. The sums are 3, 5, 7, and 9 respectively. The subarray [4, 5] has the maximum sum 9 and is unique. Example 2: Input: nums = [5, 2, 1, 4, 3], k = 3 Output: 1 Explanation: The k-length subarrays for k = 3 are [5, 2, 1], [2, 1, 4], and [1, 4, 3]. The sums are 8, 7, and 8 respectively. The maximum sum 8 occurs in two subarrays [5, 2, 1] and [1, 4, 3], which are not unique. Example 3: Input: nums = [1, 1, 1, 1, 1], k = 1 Output: 1 Explanation: The k-length subarrays for k = 1 are [1], [1], [1], [1], [1]. The sums are all 1, with the maximum sum being 1, which is unique. Constraints: 1 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 1 <= k <= nums.length","solution":"def count_unique_max_sum_subarrays(nums, k): Returns the number of unique k-length subarrays that have the maximum sum. n = len(nums) if n == 0 or k > n: return 0 # Compute the sum of the first k-length subarray current_sum = sum(nums[:k]) max_sum = current_sum max_sum_count = 1 sums_seen = {current_sum} # Sliding window to compute sums of all k-length subarrays for i in range(1, n - k + 1): current_sum = current_sum - nums[i - 1] + nums[i + k - 1] if current_sum > max_sum: max_sum = current_sum max_sum_count = 1 sums_seen = {current_sum} elif current_sum == max_sum: if current_sum not in sums_seen: max_sum_count += 1 sums_seen.add(current_sum) return max_sum_count"},{"question":"For a given sequence of integers A = {a_1, a_2, ldots, a_n}, find the length of the longest increasing subsequence. A subsequence is derived from the sequence A by deleting some or no elements without changing the order of the remaining elements. An increasing subsequence is a subsequence where each element is strictly greater than the previous one. Constraints * 1 leq n leq 2500 * 1 leq a_i leq 10^9 Input In the first line, an integer n represents the number of elements in A. In the second line, the elements a_i (i = 1, 2, ldots, n) are given separated by space characters. Output An integer that represents the length of the longest increasing subsequence in A. Examples Input 6 10 9 2 5 3 7 101 18 Output 4 Explanation: The longest increasing subsequence is (2, 3, 7, 18) which has length 4. Input 4 0 1 0 3 2 3 Output 4 Explanation: The longest increasing subsequence is (0, 1, 2, 3) which has length 4. Input 1 7 Output 1 Explanation: The sequence itself is the longest increasing subsequence, so the length is 1.","solution":"def longest_increasing_subsequence(A): Returns the length of the longest increasing subsequence. if not A: return 0 n = len(A) # dp[i] will be the length of the longest increasing subsequence that ends with A[i] dp = [1] * n for i in range(1, n): for j in range(i): if A[i] > A[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Given a string `s`, return the length of the longest palindromic subsequence in `s`. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. # Function Signature ```python def longest_palindromic_subsequence(s: str) -> int: pass ``` # Input - `s` (1 <= len(s) <= 1000): A string consisting of lowercase English letters. # Output - Return the length of the longest palindromic subsequence in `s`. # Example ```python assert longest_palindromic_subsequence(\\"bbbab\\") == 4 assert longest_palindromic_subsequence(\\"cbbd\\") == 2 ``` # Note For the string `\\"bbbab\\"`, the longest palindromic subsequence is `\\"bbbb\\"`, which has a length of 4. For the string `\\"cbbd\\"`, the longest palindromic subsequence is `\\"bb\\"`, which has a length of 2.","solution":"def longest_palindromic_subsequence(s: str) -> int: n = len(s) # Create a dp array to store the length of longest palindromic subsequence dp = [[0] * n for _ in range(n)] # All single character substrings are palindromes of length 1 for i in range(n): dp[i][i] = 1 # Fill the table # cl is the length of the substring for cl in range(2, n+1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: dp[i][j] = 2 elif s[i] == s[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) # The length of the longest palindromic subsequence is in the right upper corner of the matrix return dp[0][n-1]"},{"question":"Write a function that determines if a number can be transformed into another number by reversing the digits of the number any number of times and concatenating with its original form. For example, given numbers `123` and `321`, the transformation is possible as `123` reversed is `321`. Another example is for numbers `56` and `6556`, by reversing `56` we get `65` and concatenating gives `5665` or `6556`. Your task is to write a function `canTransform(num1, num2)` that takes in two integers `num1` and `num2` and returns a boolean representing whether the transformation is possible. **Input constraints**: - Both `num1` and `num2` are positive integers with at most 5 digits. **Example**: - `canTransform(123, 321)` should return `True` - `canTransform(56, 6556)` should return `True` - `canTransform(789, 987789)` should return `True` - `canTransform(12, 21)` should return `True` - `canTransform(123, 456)` should return `False` If you enjoyed this problem, you might also like: - [Digit Transformations](https://www.codewars.com/kata/5841302b7a1d9e0cfa0006e1) - [Concatenated Numbers](https://www.codewars.com/kata/559cc2d29a2253511d000e92)","solution":"def canTransform(num1, num2): Determines if num2 can be formed by reversing the digits of num1 any number of times and concatenating. :param num1: First integer number. :param num2: Second integer number. :return: Boolean indicating if num2 can be formed from num1. str_num1 = str(num1) reverse_str_num1 = str_num1[::-1] # Check if num2 can be formed by potentially concatenating the original and reversed num1 concat1 = str_num1 + reverse_str_num1 concat2 = reverse_str_num1 + str_num1 target_str = str(num2) return target_str in concat1 or target_str in concat2"},{"question":"# Task You are designing a seating arrangement for a new restaurant. The restaurant has a single long table with `n` seats. You want to place customers in such a way that the distance between any two adjacent customers is maximized. Write a function to find the maximum distance between two adjacent customers when `k` customers are seated optimally. # Example Given the total number of seats `n` and the number of customers `k`, the function should return the maximum distance between two adjacent customers. ```python max_distance_between_customers(n, k) max_distance_between_customers(10, 3) = 4 max_distance_between_customers(5, 2) = 3 max_distance_between_customers(6, 3) = 2 max_distance_between_customers(8, 4) = 2 ``` Constraints: - `2 <= k <= n <= 10^6` # Explanation To maximize the distance between any two adjacent customers: 1. Distribute customers evenly across the available seats. 2. If the seats can be divided perfectly, return the quotient as the maximum distance. 3. If there are extra seats, then the distance between some pairs of adjacent customers will be one more than the base distance.","solution":"def max_distance_between_customers(n, k): Returns the maximum distance between two adjacent customers when k customers are seated optimally in n seats. # Calculate the base distance between customers base_distance = n // k # Calculate the remainder seats which will lead to some distances being one more than the base distance remainder_seats = n % k # If there are remainder seats, max distance is base_distance + 1 if remainder_seats > 0: return base_distance + 1 # Otherwise, the max distance is base_distance return base_distance"},{"question":"You are designing a flower garden and want each type of flower to be unique by color and type. Given a list of flowers with their type and color, determine how many distinct flowers are in your garden. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of flowers you have to plant. The next n lines describe the flowers. Each flower is characterized by its type and color, with no more than 10 lowercase Latin letters for each. A description is given in each line separated by a space. Output Output the number of distinct flowers in your garden. Examples Input 6 rose red tulip yellow rose white rose red daisy pink tulip yellow Output 4 Input 4 lily white lily white lily white lily white Output 1","solution":"def count_distinct_flowers(n, flowers): Returns the number of distinct flowers in the garden. :param n: int - The number of flowers :param flowers: list of str - Each element is a string describing a flower\'s type and color :return: int - The number of distinct flowers unique_flowers = set(flowers) return len(unique_flowers)"},{"question":"A local shop wants to optimize its stock inventory by predicting the number of items sold each day. The shop sells N different types of items and has a record of the number of sales for the last D days for each type of item. Based on the last D days of sales, you need to help the shop owner compute the expected number of sales for the next day for each of the N items. The expected number of sales for an item is calculated as the average number of items sold per day over the last D days, rounded down to the nearest integer. ------ Input Format ------ - The first line contains two integers N and D - the number of different types of items and the number of days for which past sales are recorded. - The next N lines each contain D integers, where the i-th line contains the number of sales for the i-th item for each of the D days. ------ Output Format ------ - Output N lines, each containing a single integer which represents the expected number of sales for that item on the next day. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ D ≤ 30 0 ≤ text{number of sales on any day} ≤ 1000 ----- Sample Input 1 ------ 3 4 10 20 15 25 5 6 7 8 12 14 13 11 ----- Sample Output 1 ------ 17 6 12 ----- Explanation 1 ------ - For the first item, the average number of sales over the last 4 days is (10 + 20 + 15 + 25) / 4 = 17.5, which is rounded down to 17. - For the second item, the average number of sales is (5 + 6 + 7 + 8) / 4 = 6.5, which is rounded down to 6. - For the third item, the average number of sales is (12 + 14 + 13 + 11) / 4 = 12.5, which is rounded down to 12. Create a function that takes the input in the specified format and prints the output in the specified format.","solution":"def expected_sales(N, D, sales_data): Calculate the expected number of sales for the next day for each item. Parameters: N (int): Number of different types of items. D (int): Number of days for which past sales are recorded. sales_data (list of list of int): Sales data for each item for the last D days. Returns: list of int: Expected number of sales for each item. results = [] for sales in sales_data: average_sales = sum(sales) // D results.append(average_sales) return results"},{"question":"A group of friends are playing a game where they pass a token among themselves. The game starts with the first friend, who is initially holding the token. Each friend calls out the name of the friend they will pass the token to. The game continues until a friend does not call out any name, thus ending the game. You need to determine how many friends received the token by the end of the game if every friend follows their calling pattern exactly. -----Input----- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains an integer N denoting the number of friends. - The second line contains N space-separated strings S_1, S_2, ldots, S_N, denoting the names of the friends. - The next N lines each contain a string and an optional string. The first string is A_k (the name of the current friend), followed by an optional string B_k (the name of the friend to whom they will pass the token). If B_k is missing, this friend does not pass the token to anyone else, ending the game. -----Output----- For each test case, output a single integer — the number of distinct friends who received the token. -----Constraints----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq |S_i| leq 10, for each valid i (|S_i| is the length of the string S_i) - For each valid i, S_i contains only lowercase English alphabets - Sum of N over all the test cases is leq 10^6 -----Sample Input----- 2 5 alice bob charlie dave eve alice bob bob charlie charlie dave dave eve eve 3 x y z x y y z z -----Sample Output----- 5 3","solution":"def count_friends_who_received_token(T, test_cases): result = [] for case_index in range(T): N = test_cases[case_index][0] names = test_cases[case_index][1] pass_sequence = test_cases[case_index][2] received = set() pass_dict = {} for entry in pass_sequence: if len(entry) == 2: A_k, B_k = entry pass_dict[A_k] = B_k else: A_k = entry[0] pass_dict[A_k] = None current = names[0] while current is not None and current not in received: received.add(current) current = pass_dict[current] result.append(len(received)) return result"},{"question":"You are tasked with creating a bot that moves on an infinite 2D grid. The bot can execute a series of commands to move in four possible directions: \'U\' for up, \'D\' for down, \'L\' for left, and \'R\' for right. Each command changes the bot\'s position by one unit in the corresponding direction. Write a function `final_position(commands)` that takes a string of commands and returns the final position of the bot as a tuple `(x, y)`, where `x` is the horizontal displacement from the starting position (0, 0) and `y` is the vertical displacement. # Constraints: - Each command in the string is guaranteed to be one of the characters \'U\', \'D\', \'L\', \'R\'. - The length of the command string will be between 1 and 1000. # Examples: - `final_position(\\"UDLR\\")` should return `(0, 0)` - `final_position(\\"UUUUL\\")` should return `(-1, 4)` - `final_position(\\"DDRR\\")` should return `(2, -2)`","solution":"def final_position(commands): Returns the final position of the bot after executing the series of commands on an infinite 2D grid. Parameters: commands (str): A string of commands consisting of \'U\', \'D\', \'L\', \'R\' Returns: tuple: The final position (x, y) of the bot x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return (x, y)"},{"question":"In a small town, the local government wants to monitor the flow of traffic through a series of connected intersections by setting up traffic lights. Each intersection can either have a traffic light or not, and each road connecting two intersections has a certain length. The goal is to determine the total length of roads covered by traffic lights assuming a traffic light covers the entire length of the road leading up to the next intersection in both directions. A road is considered covered if either of its connecting intersections has a traffic light. -----Input----- The first line contains two integers N (1 leq N leq 10^5), the number of intersections, and M (1 leq M leq 2 cdot 10^5), the number of roads. Each of the next N lines contains one integer, which indicates if there is a traffic light at the i-th intersection (0 for no, 1 for yes). Each of the following M lines contains three integers, A, B (1 leq A, B leq N) and L (1 leq L leq 10^6), representing a road of length L that connects intersection A to intersection B. All roads are bidirectional. -----Output----- Output the total length of roads covered by traffic lights. -----Example----- Sample Input: 4 4 0 1 0 1 1 2 5 2 3 6 3 4 4 4 1 3 Sample Output: 18 Explanation: Intersections 2 and 4 have traffic lights. Thus, roads (1-2), (3-4), and (4-1) are considered covered. The total length of these roads is 5 + 4 + 3 = 12. The road between intersections 2 and 3 is also covered since one end (intersection 2) has a traffic light, adding 6 to the total. Hence, the total covered road length is 18.","solution":"def total_length_of_covered_roads(N, M, traffic_lights, roads): total_length = 0 for A, B, L in roads: if traffic_lights[A-1] == 1 or traffic_lights[B-1] == 1: total_length += L return total_length # Example usage N = 4 M = 4 traffic_lights = [0, 1, 0, 1] roads = [(1, 2, 5), (2, 3, 6), (3, 4, 4), (4, 1, 3)] print(total_length_of_covered_roads(N, M, traffic_lights, roads)) # Output: 18"},{"question":"Given a list of integers and a target integer, write a function that finds and returns the indices of the two numbers in the list that add up to the target integer. Assume each input has exactly one solution, and you may not use the same element twice. Function signature: `def two_sum(nums: List[int], target: int) -> List[int]:` # Example ```python Input: nums = [2, 7, 11, 15], target = 9 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 9, return [0, 1]. Input: nums = [3, 2, 4], target = 6 Output: [1, 2] Explanation: Because nums[1] + nums[2] == 6, return [1, 2]. Input: nums = [3, 3], target = 6 Output: [0, 1] Explanation: Because nums[0] + nums[1] == 6, return [0, 1]. ```","solution":"from typing import List def two_sum(nums: List[int], target: int) -> List[int]: Given a list of integers nums and an integer target, return indices of the two numbers such that they add up to the target. seen = {} for i, num in enumerate(nums): required = target - num if required in seen: return [seen[required], i] seen[num] = i"},{"question":"Evaluate the balance of parentheses, brackets, and curly braces in a given string. The string may contain *, which can be treated as an empty character or a valid parenthesis/bracket/brace. Determine if the string can be balanced by appropriately replacing *. The matching criteria are: 1. \'(\' matches with \')\' 2. \'{\' matches with \'}\' 3. \'[\' matches with \']\' Example 1: Input: s = \\"(*))\\" Output: True Explanation: One possible way to balance the string is \\"(()))\\", which is valid. The other way is \\"(*))\\", considering * as an empty character. Example 2: Input: s = \\"[{*}]\\" Output: True Explanation: One possible way to balance the string is \\"[{}]\\", considering * as an empty character. Your Task: You do not need to read input or print anything. Your task is to complete the function isBalanced() which takes a string s as input and returns a boolean value indicating whether the input string can be balanced. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= len(s) <= 10^5 The string contains only the characters \'(\', \')\', \'[\', \']\', \'{\', \'}\', and \'*\'","solution":"def isBalanced(s): Returns if the the string with parentheses, brackets, curly braces, and * can be balanced. * can be treated as an empty character, or any valid matching parenthesis/bracket/brace. left_stack, star_stack = [], [] for i, char in enumerate(s): if char in \'([{\': left_stack.append((char, i)) elif char == \'*\': star_stack.append(i) else: if left_stack: top, idx = left_stack.pop() if not ((top == \'(\' and char == \')\') or (top == \'[\' and char == \']\') or (top == \'{\' and char == \'}\')): return False elif star_stack: star_stack.pop() else: return False while left_stack and star_stack: l_char, l_idx = left_stack.pop() s_idx = star_stack.pop() if l_idx > s_idx: return False return len(left_stack) == 0"},{"question":"Write a program that reads two points representing the endpoints of a line segment, and a third point, and determines whether the third point lies on the line segment. The coordinates of the points are given as integers. Constraints - -1000 leq x_1, y_1, x_2, y_2, x_3, y_3 leq 1000 - The endpoints of the line segment (x_1, y_1) and (x_2, y_2) will be different. Input Six integers x_1, y_1, x_2, y_2, x_3, y_3 separated by a single space are given in a line. Output Print \\"Yes\\" if the third point is on the line segment, otherwise \\"No\\" in a line. Examples Input 1 1 3 3 2 2 Output Yes Input 1 1 4 4 2 3 Output No","solution":"def is_point_on_segment(x1, y1, x2, y2, x3, y3): Checks if point (x3, y3) is on the line segment connecting (x1, y1) and (x2, y2) # Check if the point (x3, y3) is collinear with (x1, y1) and (x2, y2) collinear = (y3 - y1) * (x2 - x1) == (y2 - y1) * (x3 - x1) if not collinear: return \\"No\\" # Check if (x3, y3) is within the bounding box of (x1, y1) and (x2, y2) within_x_bounds = min(x1, x2) <= x3 <= max(x1, x2) within_y_bounds = min(y1, y2) <= y3 <= max(y1, y2) if within_x_bounds and within_y_bounds: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a binary tree. Implement a function that converts this binary tree into its mirror image. The mirror of a binary tree is another binary tree with left and right children of all non-leaf nodes interchanged. Write a function `mirror_tree(root)` where: - `root` is the root of the given binary tree. # Input - An integer `T`, the number of test cases. - For each test case: - You are given the binary tree as a string in parenthesis notation. - For example, the binary tree `1(2(4)(5))(3(6)(7))` represents the binary tree: ``` 1 / 2 3 / / 4 5 6 7 ``` # Output - Output the pre-order traversal of the mirror image of the binary tree for each test case. # Constraints - 1 ≤ T ≤ 100 - The number of nodes in the binary tree is between 1 and 10^3 # Function Signature ```python def mirror_tree(root: Optional[TreeNode]) -> Optional[TreeNode]: # implementation here ``` # Example **Input:** ``` 2 1(2(4)(5))(3(6)(7)) 2(1(4)(5))(3) ``` **Output:** ``` 1 3 7 6 2 5 4 2 3 1 5 4 ``` # Note - In the first test case, the input tree and its mirrored version would look like: ``` Original: Mirrored: 1 1 / / 2 3 3 2 / / / / 4 5 6 7 7 6 5 4 ``` - The pre-order traversal of the mirrored tree is `1 3 7 6 2 5 4`.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def mirror_tree(root): if root is None: return None # Swap left and right subtrees root.left, root.right = root.right, root.left # Mirror the left and right subtrees mirror_tree(root.left) mirror_tree(root.right) return root def pre_order_traversal(root): if root is None: return [] return [root.val] + pre_order_traversal(root.left) + pre_order_traversal(root.right) def build_tree_from_string(s): if not s: return None def parse(): nonlocal i if i >= len(s) or s[i] == \')\': return None val = 0 sign = 1 if s[i] == \'-\': # to handle negative integers sign = -1 i += 1 while i < len(s) and s[i].isdigit(): val = val * 10 + int(s[i]) i += 1 node = TreeNode(sign * val) if i < len(s) and s[i] == \'(\': i += 1 node.left = parse() i += 1 # skipping \')\' if i < len(s) and s[i] == \'(\': i += 1 node.right = parse() i += 1 # skipping \')\' return node i = 0 return parse() def handle_tests(input_str): lines = input_str.split(\'n\') T = int(lines[0]) results = [] for i in range(1, T + 1): s = lines[i].strip() root = build_tree_from_string(s) mirrored_root = mirror_tree(root) result = pre_order_traversal(mirrored_root) results.append(\\" \\".join(map(str, result))) return \\"n\\".join(results)"},{"question":"Given a list of unique integers, find the longest subsequence where the difference between any two consecutive numbers is strictly 1 (either increasing or decreasing). Input: The first line contains an integer T, the number of test cases. For each test case: - The first line contains an integer N, the number of elements in the list. - The second line contains N space-separated integers representing the list of numbers. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10^3 -10^6 ≤ elements in the list ≤ 10^6 Output: For each test case, output a single integer, the length of the longest subsequence where the difference between any two consecutive numbers is strictly 1. Sample Input: 2 5 10 9 4 5 3 6 5 6 7 8 9 10 Sample Output: 3 6","solution":"def longest_consecutive_subsequence_length(arr): Given a list of integers, find the length of the longest subsequence where the difference between any two consecutive numbers is strictly 1 (either increasing or decreasing). num_set = set(arr) longest_length = 0 for num in arr: if num - 1 not in num_set: current_num = num current_length = 1 while current_num + 1 in num_set: current_num += 1 current_length += 1 longest_length = max(longest_length, current_length) return longest_length def solve(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] arr = test_cases[i][1] results.append(longest_consecutive_subsequence_length(arr)) return results"},{"question":"In Codexland, there are n students and each student has an integer skill level between l and r inclusive. The teacher wants to form teams of exactly 3 students each to compete in the annual programming contest. The skill level of students in any team must be such that there is at least one pair of students in the team whose skill levels\' absolute difference does not exceed a given integer d. The teacher wants to know how many distinct teams can be formed under this condition. Two teams are considered different if there is at least one student who is a member of one team but not the other. -----Input----- The first line of the input contains an integer t (1 le t le 2cdot10^4) — the number of test cases. The first line of each test case contains four integers n, l, r, and d (3 le n le 100, 1 le l le r le 1000, 0 le d le 1000) — the number of students, the minimum and maximum skill levels, and the absolute difference constraint, respectively. The second line of each test case contains n integers s1, s2, ..., sn (l le si le r) — the skill levels of the students. -----Output----- For each test case, output a single integer — the number of distinct valid teams that can be formed. -----Example----- Input 2 4 1 4 1 1 2 3 4 5 1 5 2 1 3 2 5 4 Output 4 10","solution":"from itertools import combinations def count_valid_teams(test_cases): results = [] for case in test_cases: n, l, r, d, skills = case valid_teams = 0 # Generate all combinations of 3 students for team in combinations(skills, 3): # Check if the team meets the condition valid = any(abs(team[i] - team[j]) <= d for i in range(2) for j in range(i+1, 3)) if valid: valid_teams += 1 results.append(valid_teams) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') t = int(lines[0]) test_cases = [] index = 1 for _ in range(t): n, l, r, d = map(int, lines[index].split()) skills = list(map(int, lines[index + 1].split())) test_cases.append((n, l, r, d, skills)) index += 2 return test_cases"},{"question":"You are given an array of n integers a_1, a_2, ..., a_n. You need to determine if there exists a subarray whose elements sum up to a given integer k. Input The first line contains two integers n and k (1 ≤ n ≤ 10^5, -10^9 ≤ k ≤ 10^9). The second line contains n integers a_1, a_2, ..., a_n (-10^5 ≤ a_i ≤ 10^5). Output Print \\"YES\\" if there exists at least one subarray whose elements sum up to k. Otherwise, print \\"NO\\". Example Input 5 8 1 2 3 4 -1 Output YES Note In the sample case, the subarray consisting of elements [1, 2, 3, 4, -1] sums up to 8. Another possible subarray [3, 4, -1, 2] also sums up to 8.","solution":"def has_subarray_with_sum(n, k, arr): Returns \'YES\' if there exists a subarray of `arr` that sums up to `k`, otherwise \'NO\'. current_sum = 0 prefix_sums = {0} for num in arr: current_sum += num if (current_sum - k) in prefix_sums: return \\"YES\\" prefix_sums.add(current_sum) return \\"NO\\""},{"question":"A group of friends is organizing a contest where they will be blindfolded and asked to arrange their secret codes in a specific order. Each player has a unique code represented by a string consisting of lowercase letters. The contest has a special rule: each player must place their code such that the lexicographical order of the placed codes forms a continuous subsequence of an alphabetic sequence. For example, a continuous subsequence for three codes could be [\\"abc\\", \\"abd\\", \\"abe\\"]. To ensure fair play, the contest organizers need to verify whether the codes given by the players can be arranged into such a continuous lexicographical sequence. Your task is to write a program that verifies if the given list of codes can be arranged into a continuous subsequence of an alphabetic sequence. -----Input----- The first line contains a single integer T (1 le T le 100): the number of test cases. Each test case starts with an integer n (1 le n le 100): the number of codes. The next line contains n space-separated strings, each string consisting of lowercase letters and the length of each string being between 1 and 10 inclusive. -----Output----- For each test case, print \\"YES\\" if the codes can be arranged into a continuous lexicographical order, otherwise print \\"NO\\". -----Example----- Input 3 3 abc abd abe 4 abc abz abf abd 2 a b Output YES NO YES -----Note----- For the first test case, [\\"abc\\", \\"abd\\", \\"abe\\"] can be arranged in a continuous lexicographical sequence. For the second test case, the codes can\'t form a continuous lexicographical sequence as there are gaps between \\"abc\\", \\"abz\\", \\"abf\\", and \\"abd\\". For the third test case, [\\"a\\", \\"b\\"] can be arranged in a continuous lexicographical sequence.","solution":"def can_arrange_codes_in_continuous_sequence(T, test_cases): results = [] for i in range(T): n = test_cases[i][0] codes = sorted(test_cases[i][1]) can_be_arranged = True for j in range(n - 1): if codes[j + 1] != codes[j]: prev_code = codes[j] expected_next_code = prev_code[:-1] + chr(ord(prev_code[-1]) + 1) if expected_next_code != codes[j + 1]: can_be_arranged = False break if can_be_arranged: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given an array of integers representing the heights of building blocks. You are tasked with constructing a wall using these blocks, but you want the wall to be as straight as possible. The straightness of the wall is defined by the maximum difference in height between any two adjacent blocks. Minimize this maximum difference to make the wall straight. Write a function `minimizeDifference` to find the minimum possible maximum difference between the heights of adjacent blocks after arranging the blocks optimally. Example 1: Input: heights = [4, 7, 9, 3, 2] Output: 2 Explanation: One of the optimal arrangements is [2, 3, 4, 7, 9]. The differences between adjacent blocks are [1, 1, 3, 2] and the maximum difference is 3. Another optimal arrangement is [9, 7, 4, 3, 2] with differences [2, 3, 1, 1] and the maximum difference is 3. Example 2: Input: heights = [10, 1, 5, 14, 7] Output: 3 Explanation: One of the optimal arrangements is [1, 5, 7, 10, 14]. The differences between adjacent blocks are [4, 2, 3, 4] and the maximum difference is 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minimizeDifference` which takes the array `heights` as input parameter and returns the minimum possible maximum difference between the heights of adjacent blocks. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(heights) <= 10^5 1 <= heights[i] <= 10^5","solution":"def minimizeDifference(heights): Finds the minimum possible maximum difference between the heights of adjacent blocks after arranging the blocks optimally. Args: heights: List[int] - A list of integers representing the heights of the blocks. Returns: int - The minimum possible maximum difference between the heights of adjacent blocks. if not heights or len(heights) == 1: return 0 # Sort the heights to minimize the differences between adjacent blocks heights.sort() # Initialize the minimum possible maximum difference min_difference = float(\'inf\') # Calculate the maximum difference between adjacent blocks in the sorted array for i in range(1, len(heights)): min_difference = min(min_difference, heights[i] - heights[i-1]) return min_difference"},{"question":"A \\"fraction to decimal\\" conversion is the process of converting a fractional number into a decimal representation. A repeating decimal is a decimal representation of a number that eventually forms a repeating sequence of digits infinitely. Your task is to write a function that converts a fraction, provided as two integers numerator and denominator, into its decimal representation as a string. If the decimal representation has a recurring cycle, enclose the repeating part in parentheses. Examples ```python fraction_to_decimal(1, 2) # Output: \\"0.5\\" fraction_to_decimal(2, 3) # Output: \\"0.(6)\\" fraction_to_decimal(4, 333) # Output: \\"0.(012)\\" fraction_to_decimal(1, 5) # Output: \\"0.2\\" fraction_to_decimal(-50, 8) # Output: \\"-6.25\\" ``` Function Signature ```python def fraction_to_decimal(numerator: int, denominator: int) -> str: # Your code here # ```","solution":"def fraction_to_decimal(numerator: int, denominator: int) -> str: Converts a fraction given by numerator and denominator to its decimal representation as a string. If the decimal representation repeats, encloses the repeating part in parentheses. if numerator == 0: return \\"0\\" # Determine the sign of the result sign = \'-\' if (numerator < 0) ^ (denominator < 0) else \'\' # Work with absolute values to make calculation easier numerator, denominator = abs(numerator), abs(denominator) # Calculate the integer part of the quotient integer_part = numerator // denominator remainder = numerator % denominator if remainder == 0: return f\\"{sign}{integer_part}\\" # For the fractional part remainder_map = {} decimal_part = [] # Process the remainder while remainder != 0: if remainder in remainder_map: # Repeating remainder found, insert the parentheses start_repeat = remainder_map[remainder] decimal_part.insert(start_repeat, \'(\') decimal_part.append(\')\') return f\\"{sign}{integer_part}.\\" + \'\'.join(decimal_part) # Remember the position of this remainder remainder_map[remainder] = len(decimal_part) # Update the remainder and decimal part remainder *= 10 decimal_part.append(str(remainder // denominator)) remainder %= denominator return f\\"{sign}{integer_part}.\\" + \'\'.join(decimal_part)"},{"question":"Ironman needs to save the world from a group of dangerous robots. Each of the robots has a specific power level and Ironman carries a device that can disable multiple robots, provided their combined power levels do not exceed the device\'s capacity. Given the power levels of the robots and the capacity of the device, determine the minimum number of devices Ironman needs to disable all the robots. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - Each test case is described over two lines: - The first line contains two integers N and C, where N is the number of robots and C is the capacity of Ironman\'s device. - The second line contains N space-separated integers representing the power levels of the robots. ------ Output Format ------ For each test case, output the minimum number of devices Ironman requires to disable all the robots. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ C ≤ 1000 1 ≤ text{Power level of each robot} ≤ 1000 ------ Sample Input 1 ------ 2 5 10 4 8 2 1 3 4 5 4 3 3 2 ------ Sample Output 1 ------ 3 3 ------ Explanation 1 ------ Test Case 1: One possible approach is: - Device 1: 8, 1 - Device 2: 4, 3 - Device 3: 2 So, a total of 3 devices. Test Case 2: One possible approach is: - Device 1: 4 - Device 2: 3, 2 - Device 3: 3 So, a total of 3 devices.","solution":"def min_devices_to_disable_robots(test_cases): Calculate the minimum number of devices required to disable all robots in each test case. Parameters: test_cases (list): List of tuples, each containing number of robots, device capacity, and power levels of robots. Returns: list: A list of integers, each representing the minimum number of devices needed for the corresponding test case. results = [] for case in test_cases: N, C, power_levels = case power_levels.sort(reverse=True) devices_count = 0 i = 0 j = N - 1 while i <= j: if power_levels[i] + power_levels[j] <= C: j -= 1 i += 1 devices_count += 1 results.append(devices_count) return results # Helper function to format the input and invoke the solution def process_input(input_data): input_lines = input_data.split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): N, C = map(int, input_lines[index].split()) power_levels = list(map(int, input_lines[index + 1].split())) test_cases.append((N, C, power_levels)) index += 2 return min_devices_to_disable_robots(test_cases)"},{"question":"You are managing a warehouse where you need to ship parcels within a certain weight limit for the truck. Each parcel has to be processed in the order they arrived. Given the maximum weight the truck can carry and the weights of the parcels, compute how many parcels can be loaded into the truck before it reaches its weight limit. Consider the following example. Assume the maximum weight of the truck is 150 units and the parcels have weights 50, 40, 60, 30, 70, 20 units (in order they arrived). In this case, only three parcels can be loaded because they add up to 150 units exactly, but the fourth parcel would exceed the limit. -----Input----- The input consists of a single test case. The first line contains two integers m and W where 1 le m le 100 is the number of parcels and 1 le W le 1000. The next line contains m positive integers, no more than 100, indicating the weight of each parcel in the order they arrived. -----Output----- Display the number of parcels that can be loaded into the truck without exceeding the weight limit W. -----Examples----- Sample Input: 6 150 50 40 60 30 70 20 Sample Output: 3","solution":"def count_parcels_can_be_loaded(m, W, weights): This function takes the number of parcels (m), the maximum weight the truck can carry (W), and the weights of the parcels. It returns the number of parcels that can be loaded into the truck without exceeding the weight limit. current_weight = 0 count = 0 for weight in weights: if current_weight + weight <= W: current_weight += weight count += 1 else: break return count"},{"question":"A cargo ship needs to be loaded with containers of various weights. The ship can be divided into two sections: the front section and the back section. For stability, the weight in the front section should not exceed the weight in the back section. You are tasked with determining the maximum possible weight that can be loaded into the front section while respecting this balance. Given a list of weights of the containers, find the maximum weight that can be loaded into the front section such that it doesn\'t exceed the weight of the back section. Input - First line contains an integer N (1 ≤ N ≤ 15) representing the number of containers. - Second line contains N integers, each representing the weight of a container (1 ≤ weight ≤ 100). Output - An integer representing the maximum weight that can be loaded into the front section. SAMPLE INPUT 5 6 3 4 2 7 SAMPLE OUTPUT 11 Explanation The optimal way to divide the weights is to allocate {6, 4} to the front section and {7, 3, 2} to the back section. The weights are 6+4=10 for the front section and 7+3+2=12 for the back section, where 10 is the maximum possible weight for the front section, not exceeding the back\'s weight.","solution":"from itertools import combinations def max_front_section_weight(weights): N = len(weights) total_weight = sum(weights) best_weight = 0 # Iterate over all possible combinations for the front section for i in range(1, N+1): for comb in combinations(weights, i): front_weight = sum(comb) back_weight = total_weight - front_weight if front_weight <= back_weight: best_weight = max(best_weight, front_weight) return best_weight"},{"question":"Given a weighted, directed graph with n nodes and m edges, you are tasked with finding the shortest path from a given source node s to all other nodes. However, the catch is that you must use at most k edges in any path. You are to determine the minimum cost to travel from the source node s to every other node using no more than k edges. If it is not possible to reach a node within k edges, the cost should be considered infinite (denoted by `INF`). -----Input----- The first line contains three integers n, m, and k (1 le n, m le 300, 1 le k le 100) — the number of nodes, edges, and the maximum number of edges allowed in a path, respectively. The next m lines each contain three integers u, v, and w (1 le u, v le n, 1 le w le 10^9) — representing a directed edge from node u to node v with weight w. The last line contains one integer s (1 le s le n) — the source node from which paths originate. Note that there may be multiple edges between the same pair of nodes. -----Output----- Print n integers. For each node (from 1 to n), print the minimum cost to travel from the source node s to that node using no more than k edges. If a node is unreachable within k edges, print `INF` for that node. -----Examples----- Input 4 4 2 1 2 5 1 3 3 2 4 2 3 4 4 1 Output 0 5 3 6 Input 3 3 1 1 2 1 2 3 2 1 3 4 1 Output 0 1 4 -----Note----- In the first example, the shortest path from node 1 to node 4 using at most 2 edges is 1 rightarrow 2 rightarrow 4 with a total cost of 7. However, a shorter path 1 rightarrow 3 rightarrow 4 exists with a cost of 6. In the second example, the shortest path from node 1 to node 3 using at most 1 edge is 1 rightarrow 3 with a total cost of 4. The path 1 rightarrow 2 rightarrow 3 would not be considered as it uses 2 edges.","solution":"def find_shortest_paths(n, m, k, edges, s): INF = float(\'inf\') dp = [[INF] * (n + 1) for _ in range(k + 1)] dp[0][s] = 0 for e in range(1, k + 1): for u, v, w in edges: if dp[e-1][u] != INF: dp[e][v] = min(dp[e][v], dp[e-1][u] + w) result = [] for i in range(1, n + 1): min_cost = min(dp[e][i] for e in range(k + 1)) if min_cost == INF: result.append(\'INF\') else: result.append(min_cost) return result"},{"question":"Celebrity Problem Imagine you are at a party with `n` people and among them, there may be a celebrity. A celebrity is defined as someone who is known by everyone but knows no one else at the party. You are given a helper function `knows(a, b)` that returns: - `True` if person `a` knows person `b` - `False` otherwise. Your task is to determine who the celebrity is, or verify that there is no celebrity at the party. Implement a function `findCelebrity(n: int) -> int` where: - `n` is an integer representing the total number of people at the party. - The function returns the integer index of the celebrity if there is one, otherwise, it returns `-1`. Constraints: - All helper function calls `knows(a, b)` are given as `provided by the system` and you should not implement them yourself. - You are guaranteed that `0 ≤ a, b < n`. - The helper function `knows(a, b)` can be called multiple times, but your solution should aim to call it as few times as possible to ensure efficiency. Example: Input: ``` 4 ``` and knows(0, 1) returns `True`, knows(0, 2) returns `True`, knows(0, 3) returns `False`, knows(1, 0) returns `False`, knows(1, 2) returns `True`, knows(1, 3) returns `True`, knows(2, 0) returns `False`, knows(2, 1) returns `False`, knows(2, 3) returns `False`, knows(3, 0) returns `True`, knows(3, 1) returns `True`, knows(3, 2) returns `True`. Output: ``` 2 ``` Explanation: - Person 2 is known by everyone else (0, 1, 3) and person 2 knows no one else, fulfilling the celebrity condition. Your solution should only output the final result, without any additional text. Note: Your function will be tested with provided input where the function `knows` will simulate the responses based on internal logic. Ensure your function `findCelebrity` focuses on minimizing the number of calls to `knows`.","solution":"def findCelebrity(n): # Helper function `knows(a, b)` is assumed to be provided by the system. You should not implement it. # Step 1: Identify a potential candidate for being the celebrity candidate = 0 for i in range(1, n): if knows(candidate, i): candidate = i # Step 2: Verify if the candidate is actually a celebrity for i in range(n): if i != candidate and (knows(candidate, i) or not knows(i, candidate)): return -1 return candidate # Test helper function for mocking \'knows\' results def knows(a, b): # This should be overridden by the system during real test executions raise NotImplementedError(\\"The \'knows\' function should be provided by the system.\\")"},{"question":"Given a forest with N nodes and M edges, your task is to determine if it\'s a valid forest composed of trees. A forest is a collection of disjoint trees, where each tree is an acyclic connected component. Input - The first line contains two integers, N (1 ≤ N ≤ 1000), the number of nodes, and M (0 ≤ M ≤ 2000), the number of edges. - The following M lines each contain two integers, u and v (1 ≤ u, v ≤ N), representing an undirected edge between nodes u and v. Output Print \\"FOREST\\" if the graph is a valid forest. Otherwise, print \\"NOT A FOREST\\". Example Input 4 2 1 2 3 4 Output FOREST Input 4 3 1 2 2 3 3 1 Output NOT A FOREST Input 5 3 1 2 1 3 4 5 Output FOREST","solution":"def is_forest(N, M, edges): from collections import defaultdict, deque if M >= N: return \\"NOT A FOREST\\" def bfs(start, visited, graph): queue = deque([start]) parent = {start: None} while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True parent[neighbor] = node queue.append(neighbor) elif parent[node] != neighbor: return False return True graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (N + 1) for node in range(1, N + 1): if not visited[node]: visited[node] = True if not bfs(node, visited, graph): return \\"NOT A FOREST\\" return \\"FOREST\\""},{"question":"You are given an array A of N integers. Your task is to remove exactly one integer from the array such that the sum of the remaining elements is divisible by N-1. If multiple such integers exist, output the minimum value among them. If there is no such integer, output -1. ------ Input Format ------ - The first line contains an integer T, the number of test cases. The description of T test cases follows. - The first line of each test case contains N, the length of the array. - The second line of each test case contains N integers, the elements of the array A. ------ Output Format ------ For each test case, output the minimum value of the integer that can be removed, or -1 if no such integer exists. ------ Constraints ------ 1 ≤ T ≤ 10^{3} 2 ≤ N ≤ 10^{5} -10^9 ≤ A_i ≤ 10^9 - Sum of N over all test cases does not exceed 10^5. ----- Sample Input 1 ------ 2 4 1 2 3 4 5 1 -1 1 -1 2 ----- Sample Output 1 ------ 1 2 ----- Explanation 1 ------ Test Case 1: The sum of the array is 1 + 2 + 3 + 4 = 10. Removing 1, 2, 3, or 4 will result in sums of 9, 8, 7, and 6 respectively. Only after removing 1 (resulting in sum 9), is the sum divisible by 3. Thus, the answer is 1. Test Case 2: The sum of the array is 1 + (-1) + 1 + (-1) + 2 = 2. Removing 2 results in a sum of 0, which is divisible by 4. Thus, the answer is 2.","solution":"def find_minimum_to_remove(arr): n = len(arr) total_sum = sum(arr) if total_sum % (n - 1) == 0: return min(arr) for num in arr: if (total_sum - num) % (n - 1) == 0: return num return -1 def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(find_minimum_to_remove(arr)) return results def input_processing(input_data): input_lines = input_data.strip().split(\'n\') t = int(input_lines[0]) test_cases = [] index = 1 for _ in range(t): n = int(input_lines[index]) arr = list(map(int, input_lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases"},{"question":"You are given an integer `n` representing the number of steps in a flight of stairs. A person can climb either 1 step or 2 steps at a time. Write a function `climb_stairs(n)` that returns the number of distinct ways the person can reach the top of the staircase. For example: - `climb_stairs(3)` should return `3` since there are 3 ways to climb the stairs: `(1, 1, 1)`, `(1, 2)`, and `(2, 1)`. - `climb_stairs(4)` should return `5` since there are 5 ways to climb the stairs: `(1, 1, 1, 1)`, `(1, 1, 2)`, `(1, 2, 1)`, `(2, 1, 1)`, and `(2, 2)`. Your function should be efficient and work for large values of `n`. **Function Signature:** ```python def climb_stairs(n: int) -> int: pass ``` **Example:** ```python climb_stairs(5) == 8 climb_stairs(10) == 89 climb_stairs(15) == 987 ```","solution":"def climb_stairs(n: int) -> int: Returns the number of distinct ways to climb a staircase with n steps, where a person can either take 1 step or 2 steps at a time. if n == 0 or n == 1: return 1 a, b = 1, 1 for _ in range(n - 1): a, b = b, a + b return b"},{"question":"You are organizing seats for a concert and must place guests into specific sections. There are n groups of guests who wish to sit together. Each section has a specific seating limit, beyond which it cannot accommodate more guests. Your task is to determine the maximum number of guests that can be seated together in a section such that no section exceeds its seating limit. -----Input----- The first line contains one integer, n (1 leq n leq 1000), the number of groups of guests. The second line contains n space-separated integers, g_1, g_2, ldots, g_n (1 leq g_i leq 100), where g_i denotes the size of group i. The third line contains one integer, m (1 leq m leq 1000), the number of sections. The fourth line contains m space-separated integers, s_1, s_2, ldots, s_m (1 leq s_i leq 1000), where s_i denotes the seating capacity of section i. -----Output----- Output an integer denoting the maximum number of guests that can be seated together in any section without exceeding the section\'s seating limit. -----Examples----- Sample Input 1: 4 4 8 3 5 3 10 12 6 Sample Output 1: 12 Sample Input 2: 5 10 20 5 7 15 4 25 30 8 16 Sample Output 2: 25","solution":"def max_seatable_guests(n, guest_groups, m, section_capacities): Finds the maximum number of guests that can be seated together in any section without exceeding the section\'s seating limit. Parameters: n (int): Number of guest groups guest_groups (list): List of sizes of each guest group m (int): Number of sections section_capacities (list): List of seating capacities of each section Returns: int: Maximum number of guests that can be seated together in any section # Maximum guests in any section is the maximum of section capacities return max(section_capacities)"},{"question":"A coder is working on a gaming system where there are multiple users, each with a score. The system needs a function to handle score updates efficiently. Given an array of length N with scores S1, S2, ..., SN, there are Q queries to process. Each query can be of two types: 1. Update type query: \\"1 X V\\", where X is the 1-based index of the score to update, and V is the new score. 2. Sum type query: \\"2 L R\\", where L and R are 1-based indices and denote the range [L, R] for which the total sum of scores needs to be calculated. Implement a solution to handle these queries efficiently. Input Format First line contains a single integer N, the number of users. Next line contains N integers separated by space, representing the scores of the users. Next line contains a single integer Q, the number of queries. Next Q lines contain a query of the format specified above. Output Format For each sum type query, output a single integer representing the sum of scores in the specified range. Constraints 1 ≤ N ≤ 10^5 1 ≤ Si ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ X ≤ N 1 ≤ L ≤ R ≤ N 1 ≤ V ≤ 10^9 SAMPLE INPUT: 5 10 20 30 40 50 3 1 3 35 2 2 4 2 1 5 SAMPLE OUTPUT: 95 155","solution":"class GamingSystem: def __init__(self, scores): self.scores = scores def update_score(self, index, new_score): self.scores[index - 1] = new_score def range_sum(self, left, right): return sum(self.scores[left - 1:right]) def process_queries(n, scores, queries): gaming_system = GamingSystem(scores) result = [] for query in queries: parts = query.split() query_type = int(parts[0]) if query_type == 1: _, x, v = map(int, parts) gaming_system.update_score(x, v) elif query_type == 2: _, l, r = map(int, parts) result.append(gaming_system.range_sum(l, r)) return result"},{"question":"Your task is to write a function that determines whether two strings are anagrams of each other. For this exercise, two strings are considered anagrams if they contain the same characters in the same frequencies, regardless of the order. Input: - `str1`: a string consisting of lowercase alphabets. - `str2`: a string consisting of lowercase alphabets. Output: - Return `True` if `str1` and `str2` are anagrams, otherwise return `False`. Examples: - `areAnagrams(\\"listen\\", \\"silent\\")` should return `True`. - `areAnagrams(\\"triangle\\", \\"integral\\")` should return `True`. - `areAnagrams(\\"apple\\", \\"pale\\")` should return `False`. Constraints: - The length of both `str1` and `str2` will be between 1 and 100, inclusive. - Both strings will only contain lowercase English letters.","solution":"def areAnagrams(str1, str2): Determines if two strings are anagrams of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if str1 and str2 are anagrams, False otherwise. return sorted(str1) == sorted(str2)"},{"question":"Write a function that takes a list of integer numbers and returns the list ordered in such a way that negative numbers appear first, followed by zeros, and then positive numbers. The relative order of the negative numbers and positive numbers should be maintained as in the original list. # Examples ```python organize_list([4, -1, 0, 5, -3, 0, 2, -7, 1]) == [-1, -3, -7, 0, 0, 4, 5, 2, 1] organize_list([0, 0, 0]) == [0, 0, 0] organize_list([-1, -2, -3]) == [-1, -2, -3] organize_list([3, 2, 1]) == [3, 2, 1] organize_list([]) == [] organize_list([-5, 3, 0, -2, 4, -1, 0, 2]) == [-5, -2, -1, 0, 0, 3, 4, 2] ``` # Constraints - All elements of the input list are integers. - The length of the list will not exceed 10^5. Implement this function in the programming language of your choice. The function signature would be as follows: ```python def organize_list(nums: List[int]) -> List[int]: pass ``` # Notes - Ensure the order of the negative and positive numbers remains the same as in the input list.","solution":"def organize_list(nums): This function organizes a list of integers such that negative numbers come first, followed by zeros, and then positive numbers. The relative order of negative and positive numbers is kept as they appear in the original list. negative_numbers = [x for x in nums if x < 0] zeros = [x for x in nums if x == 0] positive_numbers = [x for x in nums if x > 0] return negative_numbers + zeros + positive_numbers"},{"question":"Write a program to manage the following operations on a min-heap H: * insert x: Insert an element x into H. * getMin: Retrieve the minimum element from H without removing it. * extractMin: Remove and return the minimum element from H. * size: Return the current number of elements in H. Constraints * The number of operations leq 300,000 * The number of getMin and extractMin operations leq 150,000 * 1 leq x leq 1,000,000,000 Input In the first line, the number of operations n is given. In the following n lines, operations represented by insert x, getMin, extractMin, or size are given. Output For each getMin operation, print the minimum element of H. For each extractMin operation, print the extracted minimum element from H. For each size operation, print the current number of elements in H. If getMin or extractMin is called when the heap is empty, print \\"Empty\\". Example Input 12 insert 10 insert 20 getMin extractMin insert 5 size getMin extractMin extractMin insert 15 size getMin Output 10 10 2 5 5 Empty 1 15","solution":"import heapq class MinHeap: def __init__(self): self.heap = [] def insert(self, x): heapq.heappush(self.heap, x) def get_min(self): if not self.heap: return \\"Empty\\" return self.heap[0] def extract_min(self): if not self.heap: return \\"Empty\\" return heapq.heappop(self.heap) def size(self): return len(self.heap)"},{"question":"Given an undirected graph with N nodes, each node has a value associated with it. The graph is represented as a list of edges, where each edge connects two nodes. Your task is to find two nodes such that the absolute difference between their values is minimized, and there is a path between these nodes within the graph. # Input - The first line contains an integer N, the number of nodes (1 ≤ N ≤ 100,000). - The second line contains N integers, the values of the nodes. - The third line contains an integer M, the number of edges (0 ≤ M ≤ 200,000). - Each of the next M lines contains two integers u and v, representing an edge between nodes u and v (1 ≤ u, v ≤ N). # Output Output a single integer, which is the minimum absolute difference between the values of any two nodes that are connected by a path in the graph. # Example Input ``` 5 4 2 5 9 7 4 1 2 1 3 3 4 4 5 ``` Output ``` 1 ``` In this example, node 1 (value 4) is connected to node 2 (value 2), node 3 (value 5), indirectly to node 4 (value 9), and node 5 (value 7). The minimum absolute difference is `|4 - 5| = 1`. # Explanation The essential steps to solve this problem are: 1. Read the number of nodes and their values. 2. Construct the graph using the edges provided. 3. Find the connected components of the graph. 4. For each connected component, determine the two nodes with the minimum absolute difference in their values. 5. Output the smallest difference found among all components.","solution":"def find_min_absolute_difference(N, node_values, edges): from collections import defaultdict, deque import sys # Create adjacency list for graph graph = defaultdict(list) for u, v in edges: graph[u-1].append(v-1) graph[v-1].append(u-1) def bfs(node, visited): queue = deque([node]) visited[node] = True component_values = [] while queue: curr = queue.popleft() component_values.append(node_values[curr]) for neighbor in graph[curr]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return component_values visited = [False] * N min_difference = sys.maxsize # Perform BFS to find all connected components for i in range(N): if not visited[i]: component = bfs(i, visited) component.sort() for j in range(1, len(component)): min_difference = min(min_difference, abs(component[j] - component[j-1])) return min_difference if min_difference != sys.maxsize else 0"},{"question":"LoupeTech is known for their impeccable software security when updating records in the cloud. Each data record is identified by a unique identifier and can be updated multiple times. However, LoupeTech wants to ensure that no updates are possible simultaneously on the same record to maintain data integrity. To simplify their system, they implement an update queue to handle multiple update requests. Consider a system where each data update request is represented by a tuple of two integers: (start_time, end_time). The start_time indicates when the update begins, and the end_time indicates when the update is finished. Two updates overlap if one starts before the other ends and ends after the other starts. Your task is to determine the maximum number of non-overlapping updates that can be processed by the system. -----Description----- Given a list of n update requests, where each request is defined by a tuple (start_time, end_time), find the maximum number of non-overlapping update requests that can be accommodated. For example, consider update requests [(1, 5), (3, 7), (6, 8), (2, 4)]. The system can accommodate a maximum of two non-overlapping updates, such as (1, 5) and (6, 8), or (2, 4) and (6, 8). -----Input----- Input will consist of: - The first line contains an integer n (1 ≤ n ≤ 10^5) indicating the number of update requests. - The next n lines each contain two space-separated integers, start_time and end_time (1 ≤ start_time < end_time ≤ 10^9), representing the update requests. -----Output----- Output a single integer, the maximum number of non-overlapping updates that can be accommodated. -----Examples----- Sample Input 1: 4 1 5 3 7 6 8 2 4 Sample Output 1: 2 Sample Input 2: 3 1 4 2 3 3 5 Sample Output 2: 2 Sample Input 3: 5 1 2 2 3 3 4 4 5 5 6 Sample Output 3: 5 Sample Input 4: 3 1 10 2 8 5 7 Sample Output 4: 1","solution":"def max_non_overlapping_updates(n, update_requests): Determines the maximum number of non-overlapping updates. Parameters: n (int): Number of update requests update_requests (list of tuples): List of tuples where each tuple contains two integers (start_time, end_time) Returns: int: Maximum number of non-overlapping updates # Sort the updates by their end time update_requests.sort(key=lambda x: x[1]) # Track the end time of the last added update and the count of non-overlapping updates last_end_time = float(\'-inf\') count = 0 for start, end in update_requests: if start >= last_end_time: # This update does not overlap with the last one we added last_end_time = end count += 1 return count"},{"question":"You have been tasked with creating a seating arrangement for children in a classroom. The classroom is represented as a 2D grid of size M x N, where M is the number of rows and N is the number of columns. Each cell in the grid represents a seat. The seating arrangement should follow these rules: 1. The first child sits at the top-left corner of the grid (i.e., cell (0, 0)). 2. Each subsequent child sits at the nearest available seat that maximizes the distance from the seats already occupied. 3. If multiple seats have the same distance, choose the one with the smallest row number. If there is still a tie, choose the one with the smallest column number. Given the number of children K (where K <= M * N), your task is to determine the coordinates (row, column) of the seat occupied by the K-th child. Input: - M: Integer (number of rows in the grid) - N: Integer (number of columns in the grid) - K: Integer (number of children) Output: - (row, column): The coordinates of the K-th child\'s seat. Example: Input: M = 3 N = 4 K = 5 Output: (1, 1) In this example, the seating arrangement would look like this for the first 5 children: ``` C . . . . C . . . . . . ``` The 5th child will sit at (1, 1).","solution":"from collections import deque def find_kth_seat(M, N, K): if K == 1: return (0, 0) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] grid = [[-1] * N for _ in range(M)] grid[0][0] = 1 queue = deque([(0, 0)]) seats_filled = 1 while queue: r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < M and 0 <= nc < N and grid[nr][nc] == -1: grid[nr][nc] = grid[r][c] + 1 seats_filled += 1 if seats_filled == K: return (nr, nc) queue.append((nr, nc)) return (-1, -1) # Should not hit here with valid K"},{"question":"In the mystical land of Lancia, there is an ancient game played with enchanted stones. Each stone has a magical weight associated with it. The game is played by dividing the stones into two groups such that the difference in the total weight of the stones in each group is minimized. Your task is to help the people of Lancia determine this minimum possible difference. Your given task is to implement a function that takes an array of integers, where each integer represents the weight of a stone, and returns the minimum difference between the sum of weights of two groups into which the stones can be divided. Input: - An integer T representing the number of test cases. - For each test case: - An integer N representing the number of stones. - An array of N integers where each integer represents the weight of a stone. Output: Print the minimum possible difference for each test case in a new line. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Weight of each stone ≤ 1000 SAMPLE INPUT 2 4 1 6 5 11 3 1 2 3 SAMPLE OUTPUT 1 0 Explanation In the first test case, we can divide the stones with weights [1, 6, 5, 11] into two groups [1, 6, 5] and [11]. The difference between the total weight of the two groups is |(1+6+5) - 11| = 1. In the second test case, we can divide the stones with weights [1, 2, 3] into two groups [1, 2] and [3]. The difference between the total weight of the two groups is |(1+2) - 3| = 0.","solution":"def min_difference_between_groups(test_cases): def find_min_difference(stones): total_sum = sum(stones) n = len(stones) dp = [[False] * (total_sum + 1) for _ in range(n + 1)] for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, total_sum + 1): dp[i][j] = dp[i-1][j] if stones[i-1] <= j: dp[i][j] = dp[i][j] or dp[i-1][j-stones[i-1]] min_diff = float(\'inf\') for j in range(total_sum // 2, -1, -1): if dp[n][j]: min_diff = min(min_diff, total_sum - 2 * j) break return min_diff results = [] for t in range(test_cases): N = int(input()) stones = list(map(int, input().split())) results.append(find_min_difference(stones)) for result in results: print(result) # Sample inputs for testing inputs = [ \\"2\\", \\"4\\", \\"1 6 5 11\\", \\"3\\", \\"1 2 3\\" ] def run_test(inputs): import sys from io import StringIO sys.stdin = StringIO(\\"n\\".join(inputs)) sys.stdout = StringIO() min_difference_between_groups(int(input())) output = sys.stdout.getvalue().strip() sys.stdin = sys.__stdin__ sys.stdout = sys.__stdout__ return output print(run_test(inputs)) # Should print the sample output \\"1n0\\""},{"question":"Given a set of ( N ) points on a 2D plane, an event host needs to arrange a sequence of events such that each subsequent event can only be attended if it is at most ( D ) units away from the previous one. He wants to find the longest possible sequence of events that can be attended under this constraint, starting from any point. -----Input----- - The first line contains two integers ( N ) and ( D ) denoting the number of points and the maximum allowable distance between consecutive points in the sequence. - Each of the next ( N ) lines contains two space-separated integers ( x ) and ( y ) representing the coordinates of a point on the plane. -----Output----- Print a single integer which is the length of the longest possible sequence of events that can be attended under the given conditions. -----Constraints----- - ( 1 leq N leq 1,000 ) - ( 1 leq D leq 10,000 ) - (-10^4 leq x, y leq 10^4 ) -----Example Input----- 5 5 0 0 1 1 2 2 3 3 10 10 -----Example Output----- 4 In this example, starting from (0,0), we can move to (1,1), then to (2,2), and finally to (3,3). The point (10,10) is further than 5 units away from any of these points, so it cannot be included in the sequence. Thus, the length of the longest sequence is 4.","solution":"def longest_sequence(N, D, points): def distance(p1, p2): return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5 points.sort() dp = [1] * N for i in range(N): for j in range(i): if distance(points[i], points[j]) <= D: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Winnie-the-Pooh and Piglet are having another adventure! This time, they stumbled upon n fields with blooming flowers. Each field has a certain abundance of flowers measured in units. Piglet and Winnie have agreed to collect as many flowers as possible. Piglet, being smaller, can only collect flowers from fields with an even index (0-based), while Winnie can collect flowers from fields with an odd index. Each of them can collect flowers from their designated fields only once. Given the number of fields and the abundance of flowers in each field, determine the total number of flowers that Piglet and Winnie collectively gather. Input The first line contains a single integer n (1 ≤ n ≤ 100), which represents the number of fields. The second line contains n integers f1, f2, ..., fn, separated by spaces (1 ≤ fi ≤ 100), where fi represents the abundance of flowers in the ith field. Output Print two integers separated by a space: the first integer representing the total number of flowers Piglet collects, and the second integer representing the total number of flowers Winnie collects. Examples Input 6 3 8 7 2 5 1 Output 15 11 Input 5 6 4 9 1 2 Output 17 5","solution":"def collect_flowers(n, flower_abundance): Returns two integers: the total number of flowers Piglet and Winnie collect. Piglet collects flowers from fields with an even index and Winnie collects flowers from fields with an odd index. Parameters: n (int): Number of fields flower_abundance (list of int): List of flower abundances in each field Returns: tuple: (total_flowers_piglet, total_flowers_winnie) piglet_flowers = sum(flower_abundance[i] for i in range(0, n, 2)) winnie_flowers = sum(flower_abundance[i] for i in range(1, n, 2)) return piglet_flowers, winnie_flowers # Example usage: # n = 6 # flower_abundance = [3, 8, 7, 2, 5, 1] # print(collect_flowers(n, flower_abundance)) # Output: (15, 11)"},{"question":"Given a string of lowercase alphabet characters, write a function `reorganize_string` that rearranges the characters such that no two adjacent characters are the same. If it is not possible to rearrange the characters in this way, return an empty string. For example, given the string `aab`, you could return `aba`. However, given the string `aaab`, it would be impossible to rearrange the characters to meet the constraint and the function should return an empty string. **Function Signature:** ```python def reorganize_string(s: str) -> str: pass ``` **Input:** - A single string `s` consisting of lowercase English letters with a length of at least 1 and at most 10^4. **Output:** - A string where no two adjacent characters are the same, or an empty string if such a rearrangement is impossible. **Example:** ```python assert reorganize_string(\\"aab\\") == \\"aba\\" assert reorganize_string(\\"aaab\\") == \\"\\" ``` **Notes:** - You may assume that the input string `s` contains only lowercase English letters. - You should consider optimizing the function to handle edge cases efficiently, especially when the length of the string is large.","solution":"from heapq import heappush, heappop from collections import Counter def reorganize_string(s: str) -> str: Rearranges the characters in the string such that no two adjacent characters are the same. Returns an empty string if such a reorganization is impossible. # Count the frequency of each character char_count = Counter(s) max_heap = [] # Build a max heap based on character frequency for char, freq in char_count.items(): heappush(max_heap, (-freq, char)) prev_char, prev_freq = None, 0 result = [] # Reorganize the string while max_heap: freq, char = heappop(max_heap) result.append(char) # If prev_char still has frequency count left, push it back into the heap if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) # Update previous character and its frequency prev_char = char prev_freq = freq + 1 # Decrease the count reorganized_string = \\"\\".join(result) # If reorganized string length doesn\'t match the original, return empty string if len(reorganized_string) != len(s): return \\"\\" return reorganized_string"},{"question":"You are hosting a party and want to ensure that all guests receive pairs of gift bags. You have a collection of gift bags of various sizes, and each guest should receive exactly two gift bags of different sizes. You wish to maximize the size difference between the two bags given to any one guest. You are given a list that contains the sizes of all the gift bags. Your task is to determine the maximum possible size difference between any two gift bags given to a guest. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains a single integer N, denoting the number of gift bags. - The second line contains N space-separated integers, representing the sizes of the gift bags. ------ Output Format ------ For each test case, output on a new line the maximum possible size difference between two gift bags distributed as a pair. ------ Constraints ------ 1 ≤ T ≤ 100 2 ≤ N ≤ 100 1 ≤ text{size of gift bag} ≤ 1000 ----- Sample Input 1 ------ 2 5 1 6 4 3 2 3 7 8 10 ----- Sample Output 1 ------ 5 3 ----- Explanation 1 ------ Test case 1: The sizes of the gift bags are [1, 6, 4, 3, 2]. The maximum difference is between the bags of sizes 1 and 6, which is 6 - 1 = 5. Test case 2: The sizes of the gift bags are [7, 8, 10]. The maximum difference is between the bags of sizes 7 and 10, which is 10 - 7 = 3.","solution":"def max_size_difference(test_cases): results = [] for case in test_cases: n, sizes = case max_size = max(sizes) min_size = min(sizes) max_diff = max_size - min_size results.append(max_diff) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) sizes = list(map(int, lines[index + 1].split())) test_cases.append((N, sizes)) index += 2 return test_cases"},{"question":"Your friend Alex loves solving puzzles, especially the ones involving numbers. He came up with a new type of numeric puzzle and needs your help to validate it. Here is how the puzzle works: Given an array of integers, your task is to find the length of the longest contiguous subarray such that each element in the subarray has the same frequency as any other element in the subarray, but this frequency must be greater than 1. Input format The first line contains an integer T denoting the number of test cases. For each test case: - The first line contains an integer n denoting the number of elements in the array. - The second line contains n integers representing the elements of the array. Output format For each test case, output a single line containing the length of the longest subarray that satisfies the condition. If no such subarray exists, return 0. Constraints 1 ≤ T ≤ 10 2 ≤ n ≤ 100,000 1 ≤ array elements ≤ 100,000 SAMPLE INPUT 2 5 1 2 2 3 3 6 3 3 3 2 2 2 SAMPLE OUTPUT 4 6 Explanation In the first sample test case, the longest contiguous subarray is [2, 2, 3, 3]. Both elements 2 and 3 appear exactly twice in the subarray. In the second sample test case, the entire array is the longest contiguous subarray where each element 3 and 2 appears exactly three times. **Note**: There could be multiple different subarrays, but you need to return the length of the longest one. If no valid subarray is found, return 0.","solution":"def longest_subarray_same_freq(elements): from collections import Counter def has_valid_frequency(sub): count = Counter(sub) if len(set(count.values())) == 1 and list(count.values())[0] > 1: return True return False n = len(elements) max_length = 0 for i in range(n): for j in range(i + 1, n + 1): sub = elements[i:j] if has_valid_frequency(sub): max_length = max(max_length, j - i) return max_length def solve(T, test_cases): result = [] for i in range(T): n, array = test_cases[i] result.append(longest_subarray_same_freq(array)) return result"},{"question":"In a festive market, there is a stall selling items in sets of different prices. The stall owner has a special offer: if a customer can select a set of items such that their total price is exactly equal to a given amount, then they get an additional discount. Your task is to determine whether a customer can choose any three items such that their total price matches the given amount. You are given: - The number of items available, N. - A list of integers representing the prices of the N items. - The target price that the customer needs to match by selecting three items. Write a function to determine whether there exists such a combination of three items whose prices sum up to the target price. Input Format: - First line contains the integer N, representing the number of items. - Second line contains N space-separated integers, representing the prices of the items. - Third line contains an integer, which is the target price. Output Format: - Output \\"YES\\" if there exists a combination of three items with the sum equal to the target price. - Output \\"NO\\" if no such combination exists. Constraints: - 3 ≤ N ≤ 1000 - 1 ≤ prices[i] ≤ 10000 - 1 ≤ target price ≤ 30000 Sample Input: 7 10 15 3 7 8 12 5 22 Sample Output: YES Explanation: Among the available prices, the sum of 8, 7, and 7 is equal to 22. Therefore, the output is \\"YES\\".","solution":"def find_three_items_sum_to_target(n, prices, target): Determine if there exist three items whose prices sum up to the target price. Parameters: n (int): Number of items. prices (list of ints): List of item prices. target (int): Target price to match with the sum of three items. Returns: str: \\"YES\\" if there exists such a combination, otherwise \\"NO\\". prices.sort() for i in range(n - 2): left, right = i + 1, n - 1 while left < right: total = prices[i] + prices[left] + prices[right] if total == target: return \\"YES\\" elif total < target: left += 1 else: right -= 1 return \\"NO\\""},{"question":"-----Problem Statement----- Write a function that accepts a string and outputs the count of vowels in the string. -----Input----- The only line contains a single string s. -----Output----- Output the count of vowels in a single line. -----Constraints----- - 1 ≤ |s| ≤ 100 - The string s contains only lowercase English letters. -----Sample Input----- hello -----Sample Output----- 2","solution":"def count_vowels(s): Returns the count of vowels in the given string s. Vowels in this context are the characters: \'a\', \'e\', \'i\', \'o\', \'u\'. :param s: A string containing lowercase English letters. :return: An integer count of the vowels in the string. vowels = set(\'aeiou\') return sum(1 for char in s if char in vowels)"},{"question":"You are given a grid-based city map where some cells contain buildings and others contain empty plots. A connected block of buildings is a region of adjacent cells (horizontally or vertically) that all contain buildings. Your task is to determine the size of the largest connected block of buildings in the map. Input The input consists of a single dataset in the following format. > n m > r1,1 r1,2 ... r1,m > r2,1 r2,2 ... r2,m > ... > rn,1 rn,2 ... rn,m > n and m are positive integers no more than 100 and represent the number of rows and columns in the city map, respectively. n and m are separated by a single space. ri,j is either 0 or 1 and delimited by a single space. If ri,j = 0, the cell represents an empty plot. If ri,j = 1, the cell represents a building. Output Output a single integer representing the size of the largest connected block of buildings in the city map. Sample Input 6 7 1 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 1 1 1 Output for the Sample Input 6 Example Input 6 7 1 0 0 1 1 0 1 1 0 1 0 1 0 0 0 0 1 1 0 0 0 1 1 1 0 0 0 1 0 0 0 0 1 1 0 1 1 0 0 1 1 1 Output 6","solution":"def largest_block(city_map): def dfs(x, y): if x < 0 or y < 0 or x >= n or y >= m or city_map[x][y] == 0: return 0 city_map[x][y] = 0 # mark as visited size = 1 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: size += dfs(x + dx, y + dy) return size n = len(city_map) m = len(city_map[0]) largest = 0 for i in range(n): for j in range(m): if city_map[i][j] == 1: largest = max(largest, dfs(i, j)) return largest"},{"question":"Alice loves strings and finds great joy in playing with them. She has a string, mathbf{S}, of length N, consisting of only lowercase English letters. Alice wants to divide mathbf{S} into the maximum possible number of beautiful substrings. A string is considered beautiful if and only if it contains at least one vowel (\'a\', \'e\', \'i\', \'o\', \'u\') and at least one consonant (any other lowercase letter). Help Alice determine the number of beautiful substrings she can obtain from mathbf{S}. Input Format The first line contains a single integer, mathbf{T} (the number of test cases). Each of the next mathbf{T} lines contains a single string, mathbf{S}. Constraints 1 leq T leq 10^4 1 leq |S| leq 10^5 sum |S| over all test cases does not exceed 10^6. Output Format For each test case, print the maximum number of beautiful substrings on a new line. Sample Input 3 apple beautiful sky Sample Output 1 2 0 Explanation Test Case 1: The string \\"apple\\" can only form one beautiful substring, which is \\"apple\\" itself as it contains both vowels and consonants. Test Case 2: The string \\"beautiful\\" can be divided into two beautiful substrings: \\"beau\\" and \\"tiful\\". Test Case 3: The string \\"sky\\" cannot form any beautiful substrings as it does not contain any vowels. Therefore we print 0.","solution":"def count_beautiful_substrings(S): This function determines the maximum number of beautiful substrings in the given string S. A substring is considered beautiful if it contains at least one vowel and at least one consonant. vowels = set(\\"aeiou\\") n = len(S) # Check if the entire string S is beautiful has_vowel = any(char in vowels for char in S) has_consonant = any(char not in vowels for char in S) if has_vowel and has_consonant: return 1 return 0 def max_beautiful_substrings(T, test_cases): This function processes multiple test cases to find the number of beautiful substrings. results = [] for S in test_cases: results.append(count_beautiful_substrings(S)) return results"},{"question":"# Task You are given a list of integers and another integer `k`. Your task is to find all unique pairs of elements from the list that add up to `k`. The pairs should be presented as tuples in any order. # Example For `lst = [1, 2, 3, 4, 5]` and `k = 5`, the result should be `[(1, 4), (2, 3)]`. For `lst = [1, 1, 2, 3, 4, 5]` and `k = 6`, the result should be `[(1, 5), (2, 4)]`. For `lst = [0, -1, 2, -3, 1]` and `k = -2`, the result should be `[(-3, 1)]`. # Input/Output - `[input]` list of integers `lst` `2 ≤ len(lst) ≤ 10^5` - `[input]` integer `k` - `[output]` list of tuples The list of tuples, representing all unique pairs that add up to `k`. Each pair should be of the form `(a, b)` where `a ≤ b`. If no such pairs exist, return an empty list.","solution":"def find_pairs(lst, k): Returns all unique pairs of elements from the list that add up to k. Each pair is represented as a tuple (a, b) where a <= b. seen = set() pairs = set() for number in lst: target = k - number if target in seen: pairs.add(tuple(sorted((number, target)))) seen.add(number) return list(pairs)"},{"question":"You are given an array of N integers and a target value T. The array contains a mix of positive and negative integers and may contain duplicate values. Your task is to determine whether there exists a subset of the array whose sum is exactly T. Constraints * 1 ≤ N ≤ 200 * -10^5 ≤ array[i] ≤ 10^5 * -10^5 ≤ T ≤ 10^5 Input Input is given from Standard Input in the following format: ``` N T array[0] array[1] array[2] ... array[N-1] ``` Output If such a subset exists, print \\"YES\\". Otherwise, print \\"NO\\". Examples Input ``` 5 9 3 34 4 12 5 ``` Output ``` YES ``` Input ``` 5 30 3 34 4 12 5 ``` Output ``` NO ```","solution":"def subset_sum_exists(N, T, array): # Create a DP table where dp[i][j] will be True if a subset up to the ith element can sum to j dp = [[False] * (2 * 10**5 + 1) for _ in range(N + 1)] # Initialize the dp table for sum 0 offset = 10**5 dp[0][offset] = True for i in range(1, N + 1): for j in range(2 * 10**5 + 1): if dp[i - 1][j] or (0 <= j - array[i - 1] <= 2 * 10**5 and dp[i - 1][j - array[i - 1]]): dp[i][j] = True # Check if a subset exists that sums to T return \\"YES\\" if dp[N][T + offset] else \\"NO\\" # Function to handle input and output def main(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) T = int(data[1]) array = list(map(int, data[2:2+N])) result = subset_sum_exists(N, T, array) print(result)"},{"question":"Given a list of N integers, you need to process Q queries. Each query consists of two integers L and R, representing indices in the list. For each query, you need to calculate the maximum and minimum values in the subarray spanning from index L to index R (inclusive). Your task is to return the maximum and minimum values for each of the Q queries. (Note: Indices are 1-based) Input Format: - The first line contains two space-separated integers N and Q. - The second line contains N space-separated integers representing the list. - The next Q lines each contain two space-separated integers L and R. Output Format: - Output Q lines, each containing two space-separated integers - the maximum and minimum values in the specified subarray. Constraints: 1 ≤ N ≤ 10^5 1 ≤ L ≤ R ≤ N -10^9 ≤ List[i] ≤ 10^9 SAMPLE INPUT 5 2 1 3 2 5 4 1 3 2 5 SAMPLE OUTPUT 3 1 5 2 Explanation For the first query, the subarray from index 1 to index 3 is [1, 3, 2]. The maximum value is 3 and the minimum value is 1. For the second query, the subarray from index 2 to index 5 is [3, 2, 5, 4]. The maximum value is 5 and the minimum value is 2.","solution":"def process_queries(n, q, array, queries): Processes queries to find the maximum and minimum values in the specified subarrays. Parameters: n (int): The number of elements in the array. q (int): The number of queries. array (list of int): The list of integers. queries (list of tuples): Each tuple contains two integers (L, R) representing the subarray indices. Returns: results (list of tuples): Each tuple contains two integers (max_value, min_value) for the subarray in each query. results = [] for L, R in queries: subarray = array[L-1:R] max_value = max(subarray) min_value = min(subarray) results.append((max_value, min_value)) return results"},{"question":"Given a string containing only digits, generate all possible valid IP addresses that can be obtained by inserting three dots into the string. A valid IP address consists of exactly four integers (each between 0 and 255, inclusive) separated by dots, where the string must not contain any leading zeros unless the integer is exactly 0. Input The first line of input contains the number of test cases T. Each of the next T lines contains one string consisting only of digits. Output For each test case, output all possible valid IP addresses, sorted in lexicographical order, one per line. If no valid IP address can be formed, output \\"No valid IP addresses\\". Constraints 1 ≤ T ≤ 10 1 ≤ length of string ≤ 12 SAMPLE INPUT 2 25525511135 010010 SAMPLE OUTPUT 255.255.11.135 255.255.111.35 0.10.0.10 0.100.1.0","solution":"def is_valid(segment): Check if a segment of the IP address is valid. if len(segment) > 1 and segment[0] == \'0\': return False return 0 <= int(segment) <= 255 def generate_ip_addresses(s): Generate all valid IP addresses from a given string of digits. def backtrack(start, path): if len(path) == 4 and start == len(s): ip_addresses.append(\'.\'.join(path)) return if len(path) == 4 or start == len(s): return for length in range(1, 4): if start + length <= len(s): segment = s[start:start+length] if is_valid(segment): backtrack(start+length, path + [segment]) ip_addresses = [] backtrack(0, []) return sorted(ip_addresses) if ip_addresses else [\\"No valid IP addresses\\"] def process_cases(cases): Process multiple cases. result = [] for case in cases: valid_ips = generate_ip_addresses(case) if not valid_ips: result.append(\\"No valid IP addresses\\") else: result.extend(valid_ips) return result"},{"question":"In a futuristic city, a new transportation system called TelePort has been introduced, which allows people to instantly travel between special nodes placed at various coordinates on an infinite 2D grid. The system is controlled by a central computer that tracks the status of each node. A special maintenance team has been appointed to ensure the proper functioning of these nodes. They need to solve the following problem: Given the coordinates of `n` nodes and an initial node where a problem was detected, the team wants to find out the longest time it will take to report the issue to all other nodes within a certain radius `r` via a chain reaction mechanism. The chain reaction works as follows: - The problem spreads from one node to all other nodes within a radius `r`, where the radius is the Euclidean distance. - Each second, the problem can spread from any affected node to all other nodes within the radius `r`. You are asked to compute the maximum time required for the problem to reach all nodes if it starts from the initially affected node. Input The first line contains three integers `n` (1 ≤ n ≤ 50), `r` (1 ≤ r ≤ 100), and `t` (0 ≤ t ≤ 10^4) — the number of nodes, radius within which the problem spreads in one second, and the time after which monitoring is completely checked, respectively. Each of the next `n` lines contains two integers `x` and `y` (-10^8 ≤ x, y ≤ 10^8) — the coordinates of the nodes. The first node given in the input is the node where the problem starts. Output Print a single integer — the maximum time required for the problem to reach all nodes if possible within time `t`, otherwise print -1 if it\'s not possible. Example Input 4 5 10 0 0 3 4 -3 -4 6 8 Output 2 Input 3 2 5 0 0 5 5 -1 -1 Output -1 Note In the first example, the problem spreads as follows: - From (0, 0) to (3, 4) and (-3, -4) in one second as they are within a radius of 5. - From (3, 4) to (6, 8) in another second. In the second example, the problem at (0, 0) can\'t reach either (5, 5) or (-1, -1) within a radius of 2, thus it\'s not possible to spread the problem to all nodes within the given time `t` = 5.","solution":"import math from collections import deque def calculate_distance(node1, node2): return math.sqrt((node1[0] - node2[0]) ** 2 + (node1[1] - node2[1]) ** 2) def max_time_to_report_issue(n, r, t, coordinates): if n == 1: return 0 if t >= 0 else -1 graph = {i: [] for i in range(n)} for i in range(n): for j in range(i + 1, n): if calculate_distance(coordinates[i], coordinates[j]) <= r: graph[i].append(j) graph[j].append(i) visited = [False] * n queue = deque([(0, 0)]) # (current_node, current_time) visited[0] = True max_time = 0 while queue: current_node, current_time = queue.popleft() max_time = max(max_time, current_time) for neighbor in graph[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, current_time + 1)) if all(visited): return max_time if max_time <= t else -1 return -1"},{"question":"Given an array of positive integers, your task is to find the maximum sum of non-adjacent elements. Example 1: Input: N = 7 arr[] = 3 2 5 10 7 Output: 15 Explanation: The maximum sum of non-adjacent elements is 3 + 10 + 2 = 15. Example 2: Input: N = 5 arr[] = 3 2 7 10 Output: 13 Explanation: The maximum sum of non-adjacent elements is 3 + 10 = 13. Your Task: You do not need to read input or print anything. Complete the function `maxSumNonAdjacent()` which takes the array and its size N as input parameters and returns the maximum sum of non-adjacent elements. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^4 1 <= arr[i] <= 10^4","solution":"def maxSumNonAdjacent(arr, N): if N == 0: return 0 elif N == 1: return arr[0] # Initialize incl (maximum sum including the previous element) # and excl (maximum sum excluding the previous element) with 0 incl = arr[0] excl = 0 for i in range(1, N): # Current max excluding i new_excl = max(incl, excl) # Current max including i incl = excl + arr[i] excl = new_excl return max(incl, excl)"},{"question":"Given a string s, return the longest palindromic substring in s. Input The first line of input data contains a single string s (1 ≤ |s| ≤ 1000), which consists of only lowercase English letters. Output Output the longest palindromic substring in s. If there is a tie, return the substring which appears first in s. Examples Input babad Output bab Input cbbd Output bb Note In the first example, \\"bab\\" is a palindrome and the longest palindromic substring. \\"aba\\" is another palindromic substring with the same length, but \\"bab\\" appears first. In the second example, \\"bb\\" is the longest palindromic substring.","solution":"def longest_palindromic_substring(s): Returns the longest palindromic substring in s. if len(s) == 0: return \\"\\" n = len(s) start = 0 max_length = 1 for i in range(1, n): # Check for even length palindromes centered at (i-1, i) low = i - 1 high = i while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 # Check for odd length palindromes centered at (i, i) low = i - 1 high = i + 1 while low >= 0 and high < n and s[low] == s[high]: if high - low + 1 > max_length: start = low max_length = high - low + 1 low -= 1 high += 1 return s[start:start + max_length]"},{"question":"In an enchanted forest, there exists a sequence of magical numbers which follow a peculiar property. Each number in the sequence is the sum of the digits of a positive integer in base 10. You have been tasked with investigating the secrets of this sequence. Given a number k, your goal is to find the k-th number in the sequence of magical numbers. More formally, the k-th number in this sequence is the sum of the digits of the integer k when it is expressed in base 10. -----Input----- The input consists of multiple test cases. The first line contains one integer t (1 leq t leq 10^5) — the number of test cases. The following t lines contain a description of the test cases. The first and only line in each test case contains a single integer k (1 leq k leq 10^{18}). -----Output----- Output t lines. For each test case, you should output a single line with one integer — the k-th number in the sequence of magical numbers. -----Example----- Input 3 1 14 999999999999999999 Output 1 5 162 -----Note----- For the test case where k = 1, the sum of the digits of the integer 1 is 1. For the test case where k = 14, the sum of the digits of the integer 14 is 1 + 4 = 5. For the test case where k = 999999999999999999, the sum of the digits of the integer 999999999999999999 is 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 + 9 = 162.","solution":"def magical_number(k): Returns the sum of the digits of the integer k. return sum(int(digit) for digit in str(k)) def process_test_cases(t, test_cases): Processes multiple test cases and returns the results. results = [] for case in test_cases: results.append(magical_number(case)) return results"},{"question":"Chef has been experimenting with interesting grid patterns. Recently, he came up with a new pattern called the \\"Magic Grid\\". Chef\'s grid consists of n rows and m columns, initially filled with zeros. Chef will perform several operations to modify the grid. In each operation, Chef selects a subgrid with its top-left corner at (r1, c1) and bottom-right corner at (r2, c2), and increments all elements within this subgrid by one. After performing all the operations, Chef wants to know the final state of the grid. ------ Input ------ The first line contains three integers n, m, and k denoting the number of rows, the number of columns, and the number of operations. Each of the next k lines contains four integers r1, c1, r2, and c2 describing the top-left and bottom-right corners of the subgrid to be incremented by one. ------ Output ------ Output the final state of the grid after all operations. Print n lines, each containing m integers representing the final values in the grid. ------ Constraints ------ 1 ≤ n, m ≤ 1000 1 ≤ k ≤ 10^5 1 ≤ r1 ≤ r2 ≤ n 1 ≤ c1 ≤ c2 ≤ m ----- Sample Input 1 ------ 3 3 2 1 1 2 2 2 2 3 3 ----- Sample Output 1 ------ 1 1 0 1 2 1 0 1 1 ----- Explanation 1 ------ The initial grid is: 0 0 0 0 0 0 0 0 0 After the first operation, where the subgrid from (1, 1) to (2, 2) is incremented by one: 1 1 0 1 1 0 0 0 0 After the second operation, where the subgrid from (2, 2) to (3, 3) is incremented by one: 1 1 0 1 2 1 0 1 1","solution":"def apply_operations(n, m, k, operations): grid = [[0] * m for _ in range(n)] for r1, c1, r2, c2 in operations: for i in range(r1 - 1, r2): for j in range(c1 - 1, c2): grid[i][j] += 1 return grid"},{"question":"Design a data structure that supports the following operations: insert, delete, and getRandomElement. The getRandomElement method should return a random element from the current set of elements with equal probability. Implement the RandomizedSet class: - `RandomizedSet()` initializes an empty RandomizedSet object. - `bool insert(int val)` Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise. - `bool delete(int val)` Removes an item val from the set if present. Returns true if the item was present, false otherwise. - `int getRandomElement()` Returns a random element from the current set of elements (it\'s guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned. Examples: Input: RandomizedSet randomSet = new RandomizedSet(); randomSet.insert(1); // returns true randomSet.remove(2); // returns false randomSet.insert(2); // returns true randomSet.getRandomElement(); // returns 1 or 2 randomly randomSet.delete(1); // returns true randomSet.insert(2); // returns false randomSet.getRandomElement(); // returns 2 Note: - All values inserted will be in the range [-2^31, 2^31 - 1]. - The number of operations (insert, delete, and getRandomElement) will be in the range [1, 2 * 10^5]. - It is guaranteed that getRandomElement will always be called when there is at least one element in the set.","solution":"import random class RandomizedSet: def __init__(self): self.val_map = {} # Map from value to its index in the list self.val_list = [] # List to store the values def insert(self, val): if val in self.val_map: return False self.val_map[val] = len(self.val_list) self.val_list.append(val) return True def delete(self, val): if val not in self.val_map: return False idx = self.val_map[val] last_element = self.val_list[-1] self.val_list[idx] = last_element self.val_map[last_element] = idx self.val_list.pop() del self.val_map[val] return True def getRandomElement(self): return random.choice(self.val_list)"},{"question":"Gretta is a roboticist participating in RoboCon, a competition for autonomous robots. In the competition, each robot needs to navigate through a grid from the top-left corner to the bottom-right corner. However, there are obstacles scattered across the grid that the robots need to avoid. The grid is represented as a matrix of size n times m, where each cell can be either free (represented by \'.\') or blocked by an obstacle (represented by \'#\'). A robot can move to any of the four adjacent cells (up, down, left, right) but cannot pass through or onto obstacles. Your task is to determine the number of distinct paths a robot can take to move from the top-left corner (0,0) to the bottom-right corner (n-1,m-1) of the grid. -----Input----- The first line contains two integers n and m (1 le n, m le 50) — the dimensions of the grid. The next n lines contain m characters each (either \'.\' or \'#\') representing the grid. -----Output----- Output a single integer — the number of distinct paths from the top-left corner to the bottom-right corner of the grid. If there is no valid path, output 0. -----Examples----- Input 3 3 . . . . # . . . . Output 2 Input 3 3 . # . # . # . . . Output 0 -----Note----- In the first example, there are two distinct paths: 1. Right -> Down -> Down -> Right 2. Down -> Down -> Right -> Right In the second example, there are no valid paths due to the placement of obstacles.","solution":"def count_paths(grid, n, m): Returns the number of distinct paths from the top-left corner to the bottom-right corner of the grid. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 dp = [[0] * m for _ in range(n)] dp[0][0] = 1 # Start position for i in range(n): for j in range(m): if grid[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[n-1][m-1] def distinct_paths(n, m, grid): return count_paths(grid, n, m)"},{"question":"You are given a list of integers representing a sequence of temperatures recorded every hour for a week. Your task is to find the longest sub-sequence of strictly increasing temperatures within this list. Write a function that takes the list as input and returns the length of this longest increasing sub-sequence. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Following this, for each test case: - The first line contains an integer N, the number of hourly recorded temperatures for a week. - The second line contains N space-separated integers representing the temperatures. ------ Output Format ------ - For each test case, print a single line containing one integer — the length of the longest strictly increasing sub-sequence of temperatures. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 1000 -1000 ≤ Temperature ≤ 1000 ------ Sample Input 1 ------ 2 7 10 22 9 33 21 50 41 10 3 10 2 1 20 5 40 10 7 80 ----- Sample Output 1 ------ 4 5 ------ Explanation 1 ------ Test Case 1: The longest sub-sequence of strictly increasing temperatures is [10, 22, 33, 50], so the output is 4. Test Case 2: The longest sub-sequence of strictly increasing temperatures is [3, 10, 20, 40, 80], so the output is 5.","solution":"def longest_increasing_subsequence_length(temperatures): Returns the length of the longest strictly increasing subsequence in the given list of temperatures. if not temperatures: return 0 n = len(temperatures) lis = [1] * n for i in range(1, n): for j in range(0, i): if temperatures[i] > temperatures[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) def process_test_cases(input_data): results = [] T = int(input_data[0]) index = 1 for _ in range(T): N = int(input_data[index]) temperatures = list(map(int, input_data[index + 1].split())) index += 2 result = longest_increasing_subsequence_length(temperatures) results.append(result) return results"},{"question":"Ravi is organizing a gaming tournament and needs to arrange teams in such a way that the total skill level difference between consecutive teams is minimized. The tournament consists of n teams, each with a skill level s_i. Ravi wants to reorder the teams such that the total skill difference between each consecutive pair of teams is minimized. The total skill difference is defined as: sum_{i=1}^{n-1} |s_{i+1} - s_i| Write a program to help Ravi determine the minimal possible total skill difference he can achieve by reordering the teams. -----Input----- The input consists of multiple test cases. The first line contains the number of test cases t (1 leq t leq 100). The description of the test cases follows. The first line of each test case contains an integer n (2 leq n leq 10^5) — the number of teams. The second line of each test case contains n integers s_{1}, s_{2}, ..., s_{n} (1 leq s_{i} leq 10^9) — the skill levels of the teams. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output a single integer — the minimal possible total skill difference Ravi can achieve by reordering the teams. -----Example----- Input 3 4 1 3 6 8 5 4 3 1 9 7 2 5 10 Output 5 8 5 -----Note----- In the first case: An optimal arrangement would be [1, 3, 6, 8] with a total skill difference of: |3-1| + |6-3| + |8-6| = 2 + 3 + 2 = 7 In the second case: An optimal arrangement would be [1, 3, 4, 7, 9] with a total skill difference of: |3-1| + |4-3| + |7-4| + |9-7| = 2 + 1 + 3 + 2 = 8 In the third case: The arrangement [5, 10] or [10, 5] both result in a minimum total skill difference of 5.","solution":"def minimal_total_skill_difference(t, test_cases): results = [] for case in test_cases: n, skills = case skills.sort() total_difference = 0 for i in range(1, n): total_difference += skills[i] - skills[i - 1] results.append(total_difference) return results # Input example to function directly # t = 3 # test_cases = [ # (4, [1, 3, 6, 8]), # (5, [4, 3, 1, 9, 7]), # (2, [5, 10]) # ] # minimal_total_skill_difference(t, test_cases)"},{"question":"Write a function `find_common_elements` that takes two lists of integers as input and returns a list containing the elements that are common to both lists. The result should be sorted in ascending order. ```python # Example list1 = [4, 9, 5] list2 = [9, 4, 9, 8, 4] find_common_elements(list1, list2) ---> [4, 9] ``` Notes: - Your solution should handle lists of arbitrary length. - The returned list should not contain duplicates.","solution":"def find_common_elements(list1, list2): Returns a list containing the elements that are common to both lists, sorted in ascending order. The result should not contain duplicates. common_elements = set(list1) & set(list2) return sorted(common_elements)"},{"question":"You are tasked with implementing an autocomplete feature for a text editor. The autocomplete suggestions should be based on a given dictionary of words. When the user starts typing, the editor should display a list of words from the dictionary that start with the typed prefix. If there are multiple words with the same prefix, the suggestions should be displayed in alphabetical order. Your task is to write a function `autocomplete` that takes in two arguments: - A list of strings `dictionary` where each string represents a word in the dictionary. - A string `prefix` which represents the beginning of a word that the user has started typing. The function should return a list of words from the dictionary that start with the given prefix, sorted alphabetically. # Input The input consists of a list of strings `dictionary` and a string `prefix`. ``` dictionary: List[str] (1 ≤ len(dictionary) ≤ 10000, 1 ≤ len(word) ≤ 100) prefix: str (1 ≤ len(prefix) ≤ 100) ``` # Output The function should return a list of strings that are the autocomplete suggestions in alphabetical order. # Examples Example 1 Input: ``` dictionary = [\\"apple\\", \\"app\\", \\"apricot\\", \\"banana\\", \\"berry\\", \\"blueberry\\", \\"blackberry\\"] prefix = \\"ap\\" ``` Output: ``` [\\"app\\", \\"apple\\", \\"apricot\\"] ``` Example 2 Input: ``` dictionary = [\\"cat\\", \\"dog\\", \\"deer\\", \\"deal\\"] prefix = \\"de\\" ``` Output: ``` [\\"deal\\", \\"deer\\", \\"dog\\"] ``` Example 3 Input: ``` dictionary = [\\"computer\\", \\"computation\\", \\"compute\\", \\"compilation\\"] prefix = \\"comp\\" ``` Output: ``` [\\"compilation\\", \\"compilation\\", \\"computer\\", \\"computation\\"] ``` # Note In the first example, the words \\"app\\", \\"apple\\" and \\"apricot\\" start with the prefix \\"ap\\", and they are returned in alphabetical order.","solution":"def autocomplete(dictionary, prefix): Returns a list of words from the dictionary that start with the given prefix, sorted alphabetically. # Filter the words that start with the given prefix suggestions = [word for word in dictionary if word.startswith(prefix)] # Sort the suggestions alphabetically suggestions.sort() return suggestions"},{"question":"A group of friends received an invitation to participate in a treasure hunt competition. The team that collects the most treasure chests in the shortest possible amount of time will be the winner. The competition is set in a vast maze with several checkpoints where treasure chests are hidden. Each checkpoint may contain multiple treasure chests, and the friends need to figure out the optimal path to maximize their collection within a fixed time limit. Each checkpoint is identified by a unique ID and has a list of treasure chests available. The friends start at checkpoint 0 and need to reach as many others as possible within the time limit, while collecting the treasure chests. The maze is represented as a graph where nodes are checkpoints and edges are paths between them. Each path has a specific travel time. Determine the maximum number of treasure chests the friends can collect within the given time limit. -----Input----- The first line contains integers n, m, and t (1 leq n, m leq 10^4, 1 leq t leq 10^9), the number of checkpoints (including the starting checkpoint 0), the number of paths between checkpoints, and the time limit, respectively. The second line contains n integers c (0 leq c leq 10^2), the number of treasure chests available at each checkpoint. The next m lines each contain three integers u, v, and w (0 leq u, v < n, 1 leq w leq 10^6), representing a path from checkpoint u to checkpoint v with travel time w. -----Output----- Print a single integer, the maximum number of treasure chests the friends can collect within the given time limit. -----Example----- Input 5 6 10 2 3 10 5 1 0 1 3 0 2 4 1 2 1 1 3 4 2 4 6 3 4 2 Output 18 -----Note----- The friends can take the following path: 0 -> 1 (3 time units), 1 -> 2 (1 time unit), 2 -> 3 (4 time units), and 3 -> 4 (2 time units), collecting 2 + 3 + 10 + 5 + 1 = 21 treasure chests in a total of 10 time units.","solution":"import heapq def max_treasure_chests(n, m, t, treasure_chests, paths): graph = [[] for _ in range(n)] for u, v, w in paths: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(start): distances = [float(\'inf\')] * n distances[start] = 0 pq = [(0, start)] # (distance, node) while pq: current_dist, u = heapq.heappop(pq) if current_dist > distances[u]: continue for v, weight in graph[u]: distance = current_dist + weight if distance < distances[v]: distances[v] = distance heapq.heappush(pq, (distance, v)) return distances distances_from_start = dijkstra(0) max_chests = 0 for i in range(n): if distances_from_start[i] <= t: max_chests += treasure_chests[i] return max_chests"},{"question":"Write a function to determine if a string has all unique characters. The function should return `True` if all characters in the string are unique, and `False` otherwise. The function should be case-sensitive, meaning \'A\' and \'a\' are considered different characters. # Specifications: - The input will be a single string `s`, consisting of only alphabetic characters (both uppercase and lowercase). - The function signature should be `def has_unique_characters(s: str) -> bool:`. # Example: ```python def has_unique_characters(s: str) -> bool: # Your code here # Test cases print(has_unique_characters(\\"Python\\")) # Output: True print(has_unique_characters(\\"programming\\")) # Output: False print(has_unique_characters(\\"AbCDefGh\\")) # Output: True print(has_unique_characters(\\"hello\\")) # Output: False ```","solution":"def has_unique_characters(s: str) -> bool: Determines if a string has all unique characters. Parameters: s (str): The input string consisting of alphabetic characters. Returns: bool: True if all characters are unique, False otherwise. return len(s) == len(set(s))"},{"question":"You\'re given a map of a city as a grid where each cell represents a building or an empty plot. Each building has a height and each plot is denoted by 0. You need to determine the height of the `k`-th tallest building in the given city. Input & Output: The first line of input contains an integer `T`, the number of test cases. For each test case, the first line contains two integers `n` and `m` representing the number of rows and columns of the grid, respectively. The next `n` lines contain `m` integers each representing the heights of the buildings or plots. The final line of the test case contains the integer `k`. For each test case, output the height of the `k`-th tallest building. If there are fewer than `k` buildings in total, output \\"-1\\". Constraints: 1 ≤ T ≤ 100 1 ≤ n, m ≤ 100 0 ≤ height ≤ 10^6 1 ≤ k ≤ n * m SAMPLE INPUT: 2 3 3 1 2 3 4 0 6 7 8 0 3 2 2 0 0 0 0 1 SAMPLE OUTPUT: 6 -1 Explanation: In the first test case, the grid is: 1 2 3 4 0 6 7 8 0 Building heights in descending order are 8, 7, 6, 4, 3, 2, 1. The third tallest building is of height 6. In the second test case, the grid is: 0 0 0 0 There are no buildings, so the output is -1 as there are fewer than `k` buildings.","solution":"def kth_tallest_building(tests): results = [] for test in tests: n, m, grid, k = test heights = [] for row in grid: for height in row: if height > 0: heights.append(height) heights.sort(reverse=True) if len(heights) >= k: results.append(heights[k-1]) else: results.append(-1) return results def process_input(input_data): input_lines = input_data.strip().split(\\"n\\") T = int(input_lines[0]) tests = [] idx = 1 for _ in range(T): n, m = map(int, input_lines[idx].split()) grid = [] for i in range(n): grid.append(list(map(int, input_lines[idx + 1 + i].split()))) k = int(input_lines[idx + 1 + n]) tests.append((n, m, grid, k)) idx += 2 + n return tests"},{"question":"Zara is a software engineer who loves playing retro games in her spare time. One of her favorite games is a grid-based puzzle where each cell of the grid contains a different number. The goal is to find the largest sum of numbers that can be obtained by selecting cells such that no two selected cells are in the same row or the same column. Given a square grid of size n times n where each cell (i, j) contains an integer a_{i,j}, write a function to determine the largest possible sum Zara can achieve by selecting n cells, one from each row and each column. Input Format - The first line contains a single positive integer n, denoting the size of the grid. - Each of the next n lines contains n space-separated integers, where the j-th integer in the i-th line is a_{i,j}. Constraints - 1 leq n leq 15 - 1 leq a_{i,j} leq 100 Output Format - Print a single integer, the largest sum Zara can achieve. Sample Input 1 ``` 3 1 2 3 4 5 6 7 8 9 ``` Sample Output 1 ``` 15 ``` Explanation In the sample input, one of the optimal selection of cells could be: - Select cell (1,3) with value 3 (from the 1st row and 3rd column) - Select cell (2,2) with value 5 (from the 2nd row and 2nd column) - Select cell (3,1) with value 7 (from the 3rd row and 1st column) The sum is 3 + 5 + 7 = 15. There are other combinations that result in the same maximum sum. Sample Input 2 ``` 2 10 1 1 10 ``` Sample Output 2 ``` 20 ``` Explanation In the sample input, an optimal selection of cells could be: - Select cell (1,1) with value 10 (from the 1st row and 1st column) - Select cell (2,2) with value 10 (from the 2nd row and 2nd column) The sum is 10 + 10 = 20. Note Ensure that the cells selected in your solution do not share the same row or column.","solution":"from itertools import permutations def max_sum(grid): Determines the largest possible sum by selecting n cells from the grid such that no two selected cells are in the same row or the same column. :param grid: List of Lists where each sublist represents a row in the grid :return: The largest possible sum as an integer n = len(grid) max_sum = 0 for perm in permutations(range(n)): current_sum = sum(grid[i][perm[i]] for i in range(n)) max_sum = max(max_sum, current_sum) return max_sum def main(): n = int(input().strip()) grid = [] for _ in range(n): row = list(map(int, input().strip().split())) grid.append(row) result = max_sum(grid) print(result)"},{"question":"You are given a string s consisting of n lowercase English letters. You want to minimize the number of distinct characters in the string by performing a series of operations. In each operation, you can choose any two adjacent characters in the string and replace both with a new character of your choice (any lowercase English letter). Your task is to determine the minimum number of distinct characters that can be obtained in the string after any number of operations. Input The first line contains a single integer n (1 ≤ n ≤ 10^6) — the length of the string. The second line contains the string s of length n. Output Print a single integer — the minimum number of distinct characters in the final string. Examples Input 8 abacabad Output 1 Input 5 abcde Output 1 Note In the first example, we can reduce the string as follows: - Replace the adjacent characters \'a\' and \'b\' with \'z\': \\"zzacabad\\" - Replace the adjacent characters \'z\' and \'z\' with \'y\': \\"yacabad\\" - Continue to repeatedly apply operations until we end up with a single character \\"x\\". In the second example, any adjacent pair of characters can be chosen and replaced until the string is reduced to a single character.","solution":"def min_distinct_characters(n, s): Returns the minimum number of distinct characters that can be obtained in the string after any number of operations. # Regardless of the initial number of distinct characters, we can always reduce any string to just one distinct character. return 1"},{"question":"Charlie loves arrays. He often spends time thinking about the properties of different arrays. One day, he came up with an interesting question: How many subarrays of a given array have an even sum? -----Input:----- - The first line contains a single integer T, the number of test cases. - The first line of each test case contains an integer N, the size of the array. - The second line of each test case contains N space-separated integers, the elements of the array. -----Output:----- For each test case, print a single integer—the number of subarrays with an even sum. -----Constraints----- - 1 leq T leq 10^3 - 1 leq N leq 10^5 - 1 leq A[i] leq 10^3 -----Sample Input:----- 2 3 1 2 3 4 1 2 3 4 -----Sample Output:----- 2 4","solution":"def count_even_sum_subarrays(arr): Returns the number of subarrays with even sums in the given array. even_count = 0 odd_count = 0 cumulative_sum = 0 result = 0 for num in arr: cumulative_sum += num if cumulative_sum % 2 == 0: result += 1 + even_count even_count += 1 else: result += odd_count odd_count += 1 return result def solve(test_cases): results = [] for case in test_cases: N, array = case results.append(count_even_sum_subarrays(array)) return results"},{"question":"Given an integer N, determine if it\'s a palindrome number or not. A palindrome number is a number that remains the same when its digits are reversed. ------ Input Format ------ - The first line of the input contains T - the number of test cases. Then the test cases follow. - Each testcase contains a single line of input, which contains a single integer N. ------ Output Format ------ For each test case, output on a single line \\"YES\\" if the number is a palindrome, and \\"NO\\" otherwise. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^6 ----- Sample Input 1 ------ 3 121 123 22 ----- Sample Output 1 ------ YES NO YES ----- explanation 1 ------ Test case 1: The number 121 reads the same backward as forward, hence it is a palindrome. Test case 2: The number 123 does not read the same backward (321) as forward, hence it is not a palindrome. Test case 3: The number 22 reads the same backward as forward, hence it is a palindrome.","solution":"def is_palindrome_number(n): Determines if the given number n is a palindrome. str_n = str(n) return str_n == str_n[::-1] def solve_palindrome_numbers(t, test_cases): Given number of test cases and list of test cases, determines and returns the result if the number is a palindrome. results = [] for n in test_cases: if is_palindrome_number(n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Given a list of integers, determine if it is possible to divide the list into two subsets such that the sum of the elements in both subsets is the same. Example 1: Input: n = 4 arr = [1, 5, 11, 5] Output: True Explanation: The list can be divided into the subsets [1, 5, 5] and [11] which have equal sum. Example 2: Input: n = 3 arr = [1, 3, 5] Output: False Explanation: The list cannot be divided into two subsets with equal sum. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `canPartition` which takes an integer n (number of elements in the list) and a list of integers arr, and returns True if the list can be partitioned into two subsets with equal sum, and False otherwise. Expected Time Complexity: O(n * s) Expected Auxiliary Space: O(n * s) Constraints: 1 <= n <= 200 1 <= arr[i] <= 100 Where `s` is the sum of the array. Hint: Use dynamic programming to solve the subset sum problem.","solution":"def canPartition(n, arr): Determines if it is possible to divide the list into two subsets such that the sum of the elements in both subsets is the same. total_sum = sum(arr) # If total sum is odd, we cannot partition it into two equal subsets if total_sum % 2 != 0: return False # We are looking for a subset that sums to total_sum / 2 target = total_sum // 2 # Initialize a boolean DP array dp = [False] * (target + 1) dp[0] = True for num in arr: # Traverse backwards to prevent reuse of the same element for i in range(target, num - 1, -1): if dp[i - num]: dp[i] = True return dp[target]"},{"question":"In a programming competition, participants are required to solve various problems. One of the challenges involves working with string manipulation. The task is to count the number of vowels in a given string. Vowels are \'a\', \'e\', \'i\', \'o\', \'u\'. Write a program that takes multiple test cases as input, where each test case consists of a single string. Your program should output the number of vowels in each string. ------ Input Format ------ - The first line will contain an integer T - number of test cases. Then the test cases follow. - The first and only line of each test case contains a single string S. ------ Output Format ------ For each test case, output the number of vowels in the given string. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 100 (length of the string) S contains only lowercase English letters. ------ Sample Input 1 ------ 3 hello world programming ------ Sample Output 1 ------ 2 1 3 ------ Explanation 1 ------ Test case-1: The string \\"hello\\" contains vowels \'e\' and \'o\', so the output is 2. Test case-2: The string \\"world\\" contains only one vowel \'o\', so the output is 1. Test case-3: The string \\"programming\\" contains vowels \'o\', \'a\', and \'i\', so the output is 3.","solution":"def count_vowels(s): Counts the number of vowels in a given string. Args: s (str): A string consisting of lowercase English letters. Returns: int: The number of vowels in the string. vowels = set(\'aeiou\') return sum(1 for char in s if char in vowels) def process_test_cases(test_cases): Processes multiple test cases to count the number of vowels in each string. Args: test_cases (list): A list of strings, each representing a test case. Returns: list: A list of integers, each representing the number of vowels in the corresponding string. return [count_vowels(s) for s in test_cases]"},{"question":"Problem You are given a list of N integers and a series of Q queries. Each query can either be an \\"update\\" operation or a \\"range sum\\" operation. Your task is to process these queries efficiently. Constraints * 1 leq N leq 10^5 * 1 leq Q leq 10^5 * 1 leq A_i leq 10^9 (initial values of the array) * \\"update\\" queries are of the form: `u x y` meaning update the x-th element to y (1 leq x leq N, 1 leq y leq 10^9) * \\"range sum\\" queries are of the form: `q l r` meaning calculate the sum of elements from index l to r (1 leq l leq r leq N) Input The input is given in the following format: ``` N Q A_1 A_2 ... A_N query_1 query_2 ... query_Q ``` * The first line contains two integers, N and Q, separated by space. * The second line contains N integers A_1, A_2, ..., A_N representing the initial values of the array. * The next Q lines contain the queries, each query is either an \\"update\\" operation or a \\"range sum\\" operation. Output For each \\"range sum\\" query, output the sum of the specified range on a new line. Examples Input ``` 5 5 1 2 3 4 5 q 1 3 u 2 10 q 1 3 u 5 20 q 1 5 ``` Output ``` 6 14 38 ``` Input ``` 3 3 2 4 6 q 1 3 u 3 10 q 2 3 ``` Output ``` 12 14 ```","solution":"class SegmentTree: def __init__(self, data): self.n = len(data) self.data = data self.tree = [0] * (4 * self.n) self._build(0, 0, self.n - 1) def _build(self, node, start, end): if start == end: self.tree[node] = self.data[start] else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 self._build(left_child, start, mid) self._build(right_child, mid + 1, end) self.tree[node] = self.tree[left_child] + self.tree[right_child] def update(self, idx, value): self._update(0, 0, self.n - 1, idx, value) def _update(self, node, start, end, idx, value): if start == end: self.data[idx] = value self.tree[node] = value else: mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 if idx <= mid: self._update(left_child, start, mid, idx, value) else: self._update(right_child, mid + 1, end, idx, value) self.tree[node] = self.tree[left_child] + self.tree[right_child] def query(self, L, R): return self._query(0, 0, self.n - 1, L, R) def _query(self, node, start, end, L, R): if R < start or end < L: return 0 if L <= start and end <= R: return self.tree[node] mid = (start + end) // 2 left_child = 2 * node + 1 right_child = 2 * node + 2 left_sum = self._query(left_child, start, mid, L, R) right_sum = self._query(right_child, mid + 1, end, L, R) return left_sum + right_sum def process_queries(N, Q, data, queries): st = SegmentTree(data) result = [] for query in queries: q = query.split() if q[0] == \'u\': idx = int(q[1]) - 1 value = int(q[2]) st.update(idx, value) elif q[0] == \'q\': L = int(q[1]) - 1 R = int(q[2]) - 1 result.append(st.query(L, R)) return result"},{"question":"Julia loves playing with dominoes. She has a collection of n domino pieces. Each piece has two sides, and each side has a number of pips ranging from 0 to 6. Julia likes creating sequences of dominoes such that any two consecutive pieces in her sequence have matching numbers on the adjacent sides. For example, if she has domino pieces [(1, 2), (2, 3), (3, 4)], she can order them as (1, 2) -> (2, 3) -> (3, 4). Julia wants to know the maximum number of domino pieces she can use to create a valid sequence from her collection. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 20), the number of domino pieces. The next n lines contain two space-separated integers a and b (0 ≤ a, b ≤ 6) representing the numbers on the two sides of each domino piece. -----Output----- Print a single integer — the maximum number of domino pieces that can be used to create a valid sequence. -----Examples----- Input 3 1 2 2 3 3 4 Output 3 Input 4 1 2 2 3 4 5 5 6 Output 2 -----Note----- In the first example, all three domino pieces can be used to form a valid sequence: (1, 2) -> (2, 3) -> (3, 4). In the second example, only two domino pieces can be used to form a valid sequence: either (1, 2) -> (2, 3) or (4, 5) -> (5, 6).","solution":"def max_domino_sequence(n, dominoes): def dfs(current, used): max_length = 1 # The current piece itself for i, (a, b) in enumerate(dominoes): if not used[i]: # If this piece hasn\'t been used if current[1] == a: used[i] = True max_length = max(max_length, 1 + dfs((a, b), used)) used[i] = False elif current[1] == b: used[i] = True max_length = max(max_length, 1 + dfs((b, a), used)) used[i] = False return max_length max_sequence = 0 for i in range(n): used = [False] * n used[i] = True max_sequence = max(max_sequence, dfs(dominoes[i], used)) return max_sequence # Example usage: # n = 3 # dominoes = [(1, 2), (2, 3), (3, 4)] # print(max_domino_sequence(n, dominoes)) # Output: 3"},{"question":"You are given an integer array. Your task is to check if the array can be made strictly increasing by modifying at most one element. If it can be, return true; otherwise, return false. Input Format You are given a function, bool checkPossibility(vector<int>& nums) { } Constraints - The length of the array is between 1 and 10,000. - Each element in the array will be an integer within the range `-10^4` to `10^4`. Output Format Return a boolean value indicating whether the array can be made strictly increasing by modifying at most one element. Sample Input ``` nums = [4, 2, 3] ``` Sample Output ``` true ```","solution":"def checkPossibility(nums): Checks if the array can be made strictly increasing by modifying at most one element. :param nums: List[int] - The input array :return: bool - True if the array can be made strictly increasing by modifying at most one element, otherwise False n = len(nums) if n <= 2: return True count = 0 # count of modifications for i in range(1, n): if nums[i] <= nums[i - 1]: if count == 1: return False count += 1 # Try adjusting nums[i-1] or nums[i] if i == 1 or nums[i] > nums[i - 2]: nums[i - 1] = nums[i - 2] if i > 1 else nums[i - 1] # adjust nums[i-1] for earlier comparison else: nums[i] = nums[i - 1] # adjust nums[i] return True"},{"question":"Given a list of integers, `arr`, you want to partition it into two non-empty subarrays, `arr1` and `arr2`, such that the absolute difference between the sums of elements in `arr1` and `arr2` is minimized. Your task is to find the minimum possible absolute difference. The input array will have the following constraints: - `2 ≤ len(arr) ≤ 100000` - Each element in `arr` will be an integer within the range `-1000` to `1000`. Input The input is given from Standard Input in the following format: ``` N arr ``` where - `N` is the length of `arr`. - `arr` is a space-separated list of `N` integers. Output Print the minimum absolute difference. Examples Input ``` 6 3 1 2 4 3 6 ``` Output ``` 1 ``` Input ``` 4 1 -1 1 -1 ``` Output ``` 0 ``` Input ``` 3 8 2 3 ``` Output ``` 3 ```","solution":"def minimum_absolute_difference(N, arr): total_sum = sum(arr) min_diff = float(\'inf\') current_sum = 0 for i in range(N - 1): current_sum += arr[i] remaining_sum = total_sum - current_sum diff = abs(current_sum - remaining_sum) min_diff = min(min_diff, diff) return min_diff # Example usage - this part is for demonstrating the function and should be removed or commented out when using pytest if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) arr = list(map(int, data[1:])) print(minimum_absolute_difference(N, arr))"},{"question":"# Description Implement a function that takes a string containing a sentence and returns the words in the sentence in reverse order. Punctuation should be treated as separate words. The result should be a list of words in reversed order. Example \\"Hello, world!\\" -> [\\"world\\", \\"Hello\\"]","solution":"import re def reverse_sentence(sentence): Returns the words of the sentence in reverse order. Punctuation is treated as separate words and included in the reversed order. words = re.findall(r\'bw+b\', sentence) return words[::-1]"},{"question":"Design a function that accepts a list of integers and returns a new list where each integer is replaced by the product of all other integers in the original list except the integer at that position. Constraints * The list will contain at least 2 integers and at most 1000 integers. * The integers in the list are between -1000 and 1000. * The product of any subset of the list does not cause an overflow. Input A list of n integers. Output A new list of n integers such that each element is the product of all integers in the original list except the one at the same position. Examples Input [1, 2, 3, 4] Output [24, 12, 8, 6] Input [-1, -3, -5, -7] Output [-105, -35, -21, -15]","solution":"def product_except_self(nums): Given a list of integers, return a list where each element is the product of all the other integers in the input list, except the one at the same position. n = len(nums) if n == 2: return [nums[1], nums[0]] left_products = [1] * n right_products = [1] * n for i in range(1, n): left_products[i] = left_products[i - 1] * nums[i - 1] for i in range(n - 2, -1, -1): right_products[i] = right_products[i + 1] * nums[i + 1] result = [left_products[i] * right_products[i] for i in range(n)] return result"},{"question":"In a hypothetical city, there are n buildings aligned in a straight line, numbered from 1 to n. Each building has a certain number of floors. A construction firm wants to install a new elevator system. The installation cost of the elevator system between two buildings i and j (1 ≤ i < j ≤ n) is defined as the absolute difference in the number of floors between these two buildings. The task is to determine the minimum total installation cost of the elevator system such that exactly k elevators are installed between k buildings. Each elevator connects two buildings, and no two elevators should connect the same pair of buildings. -----Input----- The first line contains two integers n and k (2 ≤ n ≤ 1000, 1 ≤ k ≤ n - 1) — the number of buildings and the number of elevators to be installed, respectively. The second line contains n integers f_1, f_2, ..., f_n (1 ≤ f_i ≤ 1000), where f_i denotes the number of floors in the ith building. -----Output----- Print the minimum total installation cost to install exactly k elevators. -----Examples----- Input 5 2 1 5 2 3 6 Output 2 Input 4 1 10 20 30 40 Output 10 -----Note----- In the first example, the minimum cost to connect 2 buildings with 2 elevators is 2. The optimal buildings to connect in pairs are: - Building 1 to Building 3 (|1 - 2| = 1) - Building 4 to Building 5 (|3 - 6| = 3) The total cost will be 1 + 1 = 2 In the second example, the minimum cost to connect 1 pair of buildings is 10. The optimal buildings to connect are: - Building 1 to Building 2 (|10 - 20| = 10)","solution":"def min_elevator_installation_cost(n, k, floors): Returns the minimum total installation cost to install exactly k elevators between the given buildings with their floor numbers. import itertools # Generate all pairs of buildings and calculate their costs costs = [] for i in range(n): for j in range(i+1, n): cost = abs(floors[i] - floors[j]) costs.append(cost) # Sort all possible costs costs.sort() # The minimum cost to install k elevators is the sum of the k smallest costs return sum(costs[:k]) # Example usage: # print(min_elevator_installation_cost(5, 2, [1, 5, 2, 3, 6])) # Output: 2 # print(min_elevator_installation_cost(4, 1, [10, 20, 30, 40])) # Output: 10"},{"question":"You are managing a parking lot with multiple levels and multiple parking spots per level. Write a program to keep track of the occupancy of parking spots in the parking lot based on a series of events. Each event is given by three integers: l, s, and v, where `l` is the level number, `s` is the parking spot number, and `v` is a number representing the change in occupancy. A positive value of `v` indicates that `v` cars have occupied the spot, and a negative value indicates that `|v|` cars have left the spot. Assume that initially, all parking spots are empty and the number of cars in any spot never goes below zero or exceeds a given capacity of 5 cars. # Constraints - 1 <= l <= 5 (levels) - 1 <= s <= 20 (parking spots per level) - -5 <= v <= 5 (change in occupancy) - Number of events, 1 <= n <= 100 # Input - The first line contains an integer `n` representing the number of events. - The next `n` lines each contain three integers `l`, `s`, and `v`. # Output - For each level, print the occupancy of each parking spot from 1 to 20, space-separated. - Print \\"--------------------\\" (20 \'-\') between the occupancies of different levels. # Example Input ``` 5 1 5 3 3 10 2 2 8 5 4 20 -1 5 15 2 ``` Output ``` 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -------------------- 0 0 0 0 0 0 0 5 0 0 0 0 0 0 0 0 0 0 0 0 -------------------- 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 -------------------- 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 -------------------- 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 ```","solution":"def manage_parking_lot(n, events): # Initialize the parking lot with 5 levels and 20 spots per level parking_lot = [[0] * 20 for _ in range(5)] # Process each event for l, s, v in events: # Adjust the spot occupancy while keeping it within bounds [0, 5] parking_lot[l-1][s-1] = min(max(parking_lot[l-1][s-1] + v, 0), 5) return parking_lot def format_parking_lot_output(parking_lot): formatted_output = [] for level in parking_lot: formatted_output.append(\' \'.join(map(str, level))) formatted_output.append(\'--------------------\') return \'n\'.join(formatted_output[:-1]) # Remove last separator def main(): import sys input = sys.stdin.read data = input().strip().split() n = int(data[0]) events = [] index = 1 for _ in range(n): l = int(data[index]) s = int(data[index + 1]) v = int(data[index + 2]) events.append((l, s, v)) index += 3 parking_lot = manage_parking_lot(n, events) print(format_parking_lot_output(parking_lot))"},{"question":"You are at a theme park and want to ride as many roller-coasters as possible. However, each ride has a minimum height requirement. Given your height and a list of minimum height requirements for all the roller-coasters at the park, determine how many roller-coasters you can go on. -----Input----- The input contains two lines: - The first line contains an integer ( h ) representing your height in centimeters ( (100 le h le 250) ). - The second line contains ( n ) integers ( a1, a2, ldots, an ) each representing the minimum height requirements for the roller-coasters ( (100 le ai le 250) ). ( 1 le n le 100 ) -----Output----- Output a single integer representing the number of roller-coasters you can ride. -----Examples----- Sample Input 1: 160 150 120 200 140 Sample Output 1: 3 Sample Input 2: 175 180 190 200 210 220 Sample Output 2: 0","solution":"def count_accessible_rides(h, height_requirements): Returns the number of roller-coasters you can ride based on your height. Parameters: h (int): your height in centimeters height_requirements (list of int): list of minimum height requirements for the roller-coasters Returns: int: number of roller-coasters you can ride return sum(1 for requirement in height_requirements if h >= requirement)"},{"question":"Statement You are given two strings `s1` and `s2` consisting of lowercase English letters. Your task is to determine the minimum number of operations needed to convert `s1` into `s2`. The allowed operations are: 1. Insert a character. 2. Delete a character. 3. Replace a character. Determine the minimum number of operations required to transform `s1` into `s2`. INPUT FORMAT - The first line of input contains an integer `t`, the number of test cases. - The following `t` lines each contain two space-separated strings `s1` and `s2`. OUTPUT FORMAT For each test case, output the minimum number of operations required to transform `s1` into `s2`. SAMPLE INPUT 3 horse ros intention execution abc abc SAMPLE OUTPUT 3 5 0 CONSTRAINTS - (1 leq t leq 10) - (1 leq lvert s1 rvert, lvert s2 rvert leq 1000) EXPLANATION For the first test case, the minimum operations required are: - Replace \'h\' with \'r\' (horse -> rorse) - Delete \'r\' (rorse -> rose) - Delete \'e\' (rose -> ros) For the second test case, the minimum operations required are: - Replace \'i\' with \'e\' (intention -> extentention) - Insert \'u\' (extentention -> exuecutention) - Replace \'n\' with \'c\' (exuecutention -> executention) - Replace \'t\' with \'u\' (executention -> execution) - Insert \'e\' (execution -> execution) For the third test case, both strings are identical, so no operations are needed.","solution":"def min_distance(s1, s2): Return the minimum number of operations required to convert s1 into s2. m, n = len(s1), len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # Fill dp array for i in range(1, m + 1): for j in range(1, n + 1): if s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 return dp[m][n] def transform_strings(t, test_cases): For each test case, return the minimum number of operations required to transform s1 into s2. results = [] for s1, s2 in test_cases: results.append(min_distance(s1, s2)) return results"},{"question":"Write a function **\\"reverse_words\\"** that takes a string consisting of words separated by spaces and returns a new string with the words in reverse order. For example: ``` reverse_words(\\"hello world this is a test\\") == \\"test a is this world hello\\" reverse_words(\\"the sky is blue\\") == \\"blue is sky the\\" reverse_words(\\"coding is fun\\") == \\"fun is coding\\" ``` Your function should handle multiple spaces between words and leading or trailing spaces: ``` reverse_words(\\" hello world \\") == \\"world hello\\" reverse_words(\\"a good example\\") == \\"example good a\\" ```","solution":"def reverse_words(s): Reverses the words in the given string. Args: s (str): A string consisting of words separated by spaces. Returns: str: The words in reverse order. # Split the string into words by spaces words = s.strip().split() # Reverse the words and join them back with a space return \' \'.join(reversed(words))"},{"question":"Given a binary search tree (BST), convert it into a greater tree where every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST. Example 1: Input: 5 / 2 13 Output: 18 / 20 13 Explanation: - Node with value 13 stays the same, as there are no greater values. - Node with value 5 becomes 5 + 13 = 18. - Node with value 2 becomes 2 + 5 + 13 = 20. Example 2: Input: 3 / 2 4 / 1 Output: 7 / 9 4 / 10 Explanation: - Node with value 4 stays the same, as there are no greater values. - Node with value 3 becomes 3 + 4 = 7. - Node with value 2 becomes 2 + 3 + 4 = 9. - Node with value 1 becomes 1 + 2 + 3 + 4 = 10. Your task: You don\'t need to read input or print anything. Your task is to complete the function `convertBST` which takes the root of the BST as input, and returns the root of the modified greater tree. Expected time complexity : O(n) Expected auxiliary space: O(h) where `h` is the height of the tree Constraints: - The number of nodes in the tree is in the range [1, 10^4]. - -10^4 <= Node.val <= 10^4","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def convertBST(root): Convert a Binary Search Tree to a Greater Tree. Each node value is updated to the original value plus the sum of all keys greater than the original key. def traverse(node, acc_sum): if not node: return acc_sum # Reverse in-order traversal (right -> node -> left) new_sum = traverse(node.right, acc_sum) node.val += new_sum return traverse(node.left, node.val) traverse(root, 0) return root"},{"question":"# Task Write a function that takes a sentence represented as a string and returns a new sentence where every word has been reversed while maintaining the original order of words. Example **Input:** \\"The quick brown fox jumps over the lazy dog\\" **Output:** \\"ehT kciuq nworb xof spmuj revo eht yzal god\\" **Input:** \\"Hello world\\" **Output:** \\"olleH dlrow\\" Constraints - The input string will consist of words separated by spaces. - Each word will contain only alphabetic characters. - The input string will not contain leading or trailing spaces. - The input string will not be empty.","solution":"def reverse_words(sentence): Reverses each word in the sentence while maintaining the original order of the words. Parameters: sentence (str): The input sentence. Returns: str: A new sentence with each word reversed. # Split the sentence into words words = sentence.split() # Reverse each word and join them back with spaces reversed_sentence = \' \'.join(word[::-1] for word in words) return reversed_sentence"},{"question":"You are given an undirected graph represented as an adjacency list, with vertices numbered from 1 to N and M edges. Your task is to determine if there exists a path in this graph that visits exactly K distinct edges and returns to the starting vertex. If such a path exists, output \\"YES\\", otherwise output \\"NO\\". -----Constraints----- - 2 leq N leq 1000 - 1 leq M leq 2000 - 1 leq K leq M An adjacency list is provided in the following format: - The first number is N, the number of vertices. - The second number is M, the number of edges. - The next M lines each contain two integers u and v indicating an edge between vertex u and vertex v. -----Input----- Input is given from Standard Input in the following format: N M u_1 v_1 u_2 v_2 : u_M v_M -----Output----- Print \\"YES\\" if a path of exactly K distinct edges that returns to the starting vertex exists, otherwise print \\"NO\\". -----Sample Input----- 5 6 1 2 1 3 2 3 3 4 4 5 5 1 -----Sample Output----- YES Explanation: A cycle that visits exactly K = 5 edges and returns to the starting vertex exists, e.g., 1 -> 2 -> 3 -> 4 -> 5 -> 1. -----Sample Input----- 4 3 1 2 2 3 3 4 -----Sample Output----- NO Explanation: There is no cycle in the graph that visits K = 3 edges and returns to the starting vertex.","solution":"def can_find_k_edge_cycle(n, m, edges, k): from collections import defaultdict import itertools graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def dfs(current, visited_edges, path_len, start): if path_len == k and current == start: return True if path_len >= k: return False for neighbor in graph[current]: if (current, neighbor) not in visited_edges and (neighbor, current) not in visited_edges: visited_edges.add((current, neighbor)) if dfs(neighbor, visited_edges, path_len + 1, start): return True visited_edges.remove((current, neighbor)) return False for start in graph: if dfs(start, set(), 0, start): return \\"YES\\" return \\"NO\\" def solve(input_data): lines = input_data.strip().split(\'n\') n, m = map(int, lines[0].split()) edges = [tuple(map(int, line.split())) for line in lines[1:]] k = edges.pop() return can_find_k_edge_cycle(n, m, edges, k[0])"},{"question":"Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and implement an efficient algorithm to find that element in linear runtime and using only constant extra space. Example 1: Input: nums = [2, 2, 3, 2] Output: 3 Example 2: Input: nums = [0, 1, 0, 1, 0, 1, 99] Output: 99 Example 3: Input: nums = [30000, 500, 100, 30000, 100, 30000, 100] Output: 500 Note: - Your algorithm should have a linear runtime complexity. - Could you implement it without using extra memory?","solution":"def single_number(nums): Function to find the element that appears exactly once in an array where every other element appears three times. ones, twos = 0, 0 for num in nums: ones = (ones ^ num) & ~twos twos = (twos ^ num) & ~ones return ones"},{"question":"You are given a sequence of N integers. In each operation, you can choose any two adjacent integers and replace them with their sum. You need to perform exactly N-1 operations to reduce the sequence to a single integer. Your task is to return this final integer. Since the summation process can grow large, output the answer modulo 10^9 + 9. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines of input. - The first line of each test case contains an integer N, denoting the number of integers in the sequence. - The next line contains N space-separated integers A1, A2, ..., AN, denoting the sequence. ------ Output Format ------ For each test case, output on a new line, the final integer obtained after performing N-1 operations, modulo 10^9 + 9. ------ Constraints ------ 1 ≤ T ≤ 10^3 1 ≤ N ≤ 2⋅10^5 1 ≤ Ai ≤ 10^6 - The sum of N over all test cases won\'t exceed 2⋅10^5. ----- Sample Input 1 ------ 2 3 1 2 3 4 4 3 2 1 ----- Sample Output 1 ------ 6 10 ----- Explanation 1 ------ Test case 1: The sequence {1, 2, 3} can be reduced as follows: - Choose (1, 2) -> {3, 3} - Choose (3, 3) -> {6} Test case 2: The sequence {4, 3, 2, 1} can be reduced as follows: - Choose (4, 3) -> {7, 2, 1} - Choose (7, 2) -> {9, 1} - Choose (9, 1) -> {10}","solution":"def final_integer(T, test_cases): MOD = 10**9 + 9 results = [] for case in test_cases: N, A = case summation = sum(A) % MOD results.append(summation) return results"},{"question":"A company has a hierarchy of employees, each represented as a node in a tree. The company president is the root of the tree, and each employee may have several direct subordinates but only one direct supervisor. The employees are identified by unique integers and the hierarchy is represented by a list of pairs (a, b), which signifies \\"employee a is the supervisor of employee b.\\" Given an employee e, write a function to find all direct and indirect subordinates of e. Return the list of identifiers for these subordinates in ascending order. Function Description Complete the **findSubordinates** function in the editor below. findSubordinates has the following parameter(s): - `int e`: an integer representing the employee for whom subordinates need to be found. - `List[List[int]] hierarchy`: a list of pairs representing the company hierarchy. Returns - `List[int]`: a sorted list of employee identifiers for all direct and indirect subordinates of e. Input Format - The first line contains an integer, `e`, the identifier of the employee. - The second line contains an integer, `n`, the number of pairs in the `hierarchy`. - The next `n` lines each contain two integers representing a pair (a, b) in the hierarchy. Constraints - 1 leq n leq 10^5 - 1 leq e leq 10^5 - 1 leq a, b leq 10^5 Sample Input ``` 3 5 1 2 1 3 3 4 3 5 2 6 ``` Sample Output ``` [4, 5] ``` Explanation: In the provided sample, employee `3` has direct subordinates `4` and `5`. Further, both `4` and `5` do not have their own subordinates. Thus, the subordinates of employee `3` are `[4, 5]`, sorted in ascending order.","solution":"from collections import defaultdict, deque def findSubordinates(e, hierarchy): Finds all direct and indirect subordinates of the given employee e. Parameters: - e (int): the employee identifier. - hierarchy (list of list of ints): the company hierarchy pairs. Returns: - list of int: sorted list of employee identifiers of all subordinates. # Create an adjacency list to represent the hierarchy adjacency_list = defaultdict(list) for a, b in hierarchy: adjacency_list[a].append(b) # Use a queue to perform BFS queue = deque([e]) subordinates = set() while queue: supervisor = queue.popleft() for subordinate in adjacency_list[supervisor]: if subordinate not in subordinates: subordinates.add(subordinate) queue.append(subordinate) return sorted(subordinates)"},{"question":"Monocarp is now exploring a new game \\"Terraforming 2077\\". In this game, he has n bases located on a horizontal plane. Each base has a certain initial power level. Monocarp plans to expand these bases\' influence by increasing their power levels over time. The power level of each base increases linearly with time. Specifically, it increases by 1 unit per second. Monocarp wants to know after exactly t seconds, what will be the minimum combined power level of all bases together. Each base\'s power level after t seconds is defined by: `initial_power[i] + t`, where `initial_power[i]` is the initial power level of the i-th base. -----Input----- The first line contains two integers n and t (1 le n le 1000; 1 le t le 10^9) — the number of bases and the number of seconds passed respectively. The second line contains n integers separated by space, where the i-th integer p_i (1 le p_i le 10^9) represents the initial power level of the i-th base. -----Output----- Output a single integer — the minimum combined power level of all bases after exactly t seconds. -----Examples----- Input 3 5 6 8 12 Output 39 -----Note----- After 5 seconds, the power levels of the bases will be: Base 1: 6 + 5 = 11 Base 2: 8 + 5 = 13 Base 3: 12 + 5 = 17 The combined power level is 11 + 13 + 17 = 41","solution":"def min_combined_power_level(n, t, initial_powers): Returns the minimum combined power level of all bases after exactly t seconds given their initial power levels. Args: n : int : number of bases t : int : number of seconds passed initial_powers : list of int : initial power levels of the bases Returns: int : minimum combined power level of all bases after t seconds return sum(power + t for power in initial_powers)"},{"question":"Given a string S consisting of lowercase Latin letters, determine the length of the longest substring that can be made by rearranging the characters of S such that no two adjacent characters are the same. First line of the input contains number of test cases T. Each test case has one line, which is the string S. For each test case, print the length of the longest possible substring. Constraints 1 ≤ T ≤ 10 1 ≤ |S| ≤ 10^5 S consists of lowercase English letters. SAMPLE INPUT 2 aaabbc aabbccddeeff SAMPLE OUTPUT 6 12","solution":"import heapq from collections import Counter def longest_non_adjacent_substring_length(s): char_count = Counter(s) max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) prev_count, prev_char = 0, \'\' result_length = 0 while max_heap: count, char = heapq.heappop(max_heap) result_length += 1 if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) prev_count, prev_char = count + 1, char if prev_count < 0: return -1 # It\'s impossible to rearrange the characters return result_length def solve(test_cases): results = [] for s in test_cases: results.append(longest_non_adjacent_substring_length(s)) return results"},{"question":"Implement a program that generates unique identifiers for users in a system. Each identifier (ID) consists of a prefix followed by a unique number. The prefix is determined by the type of user, and the number is incremented sequentially for each new user of that type. The system supports three types of users: \\"admin\\", \\"user\\", and \\"guest\\". The prefixes for these user types are \\"A_\\", \\"U_\\", and \\"G_\\" respectively. For instance, the first \\"admin\\" will get ID \\"A_1\\", the second \\"admin\\" will get ID \\"A_2\\", the first \\"user\\" will get ID \\"U_1\\", and so on. Write a class `UserIDGenerator` to manage this ID generation process. **Class Definition:** ```python class UserIDGenerator: def __init__(self): # Initialize counters for each user type pass def get_new_id(self, user_type: str) -> str: # Increment the counter for the given user type and return the new ID pass ``` # Input - The constructor `__init__` initializes the necessary data structures. - The method `get_new_id(user_type)` takes a string `user_type` which can be \\"admin\\", \\"user\\", or \\"guest\\". # Output - The method `get_new_id(user_type)` returns the new unique identifier for the given user type as a string. # Example ```python user_id_gen = UserIDGenerator() print(user_id_gen.get_new_id(\\"admin\\")) # Output: \\"A_1\\" print(user_id_gen.get_new_id(\\"user\\")) # Output: \\"U_1\\" print(user_id_gen.get_new_id(\\"admin\\")) # Output: \\"A_2\\" print(user_id_gen.get_new_id(\\"guest\\")) # Output: \\"G_1\\" ``` # Note The generated IDs must be unique and follow the pattern described. The system should support any number of calls to `get_new_id` and must be efficient.","solution":"class UserIDGenerator: def __init__(self): # Initialize counters for each user type self.counters = { \'admin\': 0, \'user\': 0, \'guest\': 0 } self.prefixes = { \'admin\': \'A_\', \'user\': \'U_\', \'guest\': \'G_\' } def get_new_id(self, user_type: str) -> str: # Increment the counter for the given user type and return the new ID if user_type in self.counters: self.counters[user_type] += 1 return f\\"{self.prefixes[user_type]}{self.counters[user_type]}\\" else: raise ValueError(\\"Invalid user type\\")"},{"question":"Given a list of n integers where each integer represents a grade of a student. The list contains both passing grades (greater than or equal to 40) and failing grades (less than 40). Your task is to replace each failing grade with the overall class average (rounded to the nearest integer) of the passing grades. The resulting list should maintain all passing grades in their original positions and only replace failing grades. Example 1: Input: n = 5 grades = [35, 42, 37, 29, 50] Output: [44, 42, 44, 44, 50] Explanation: The passing grades are 42 and 50 with an average of (42+50)/2 = 46.0 rounded to 46. Failing grades 35, 37, and 29 are replaced with 46. Example 2: Input: n = 6 grades = [28, 31, 40, 44, 27, 45] Output: [43, 43, 40, 44, 43, 45] Explanation: The passing grades are 40, 44, and 45 with an average of (40+44+45)/3 = 43.0 rounded to 43. Failing grades 28, 31, and 27 are replaced with 43. Your Task: Since this is a function problem, you don\'t need to take any input as it is already accomplished by the driver code. You just need to complete the function replaceFailingGrades() that takes an array grades and an integer n as parameters and modifies the grades array in-place without returning anything. Expected Time Complexity: O(n). Expected Auxiliary Space: O(1). Constraints: 1 ≤ n ≤ 10^5 0 ≤ grades[i] ≤ 100","solution":"def replaceFailingGrades(n, grades): This function takes in the number of grades and a list of grades. It replaces all failing grades (less than 40) with the average of passing grades (40 or more). # Get passing grades passing_grades = [grade for grade in grades if grade >= 40] # If no passing grades are present, avoiding division by zero if not passing_grades: # If no passing grades, we replace failing grades with 0 (as there\'s no context of passing grades) for i in range(n): if grades[i] < 40: grades[i] = 0 return # Calculate the average of passing grades rounded to the nearest integer avg_passing_grade = round(sum(passing_grades) / len(passing_grades)) # Replace failing grades with the average passing grade for i in range(n): if grades[i] < 40: grades[i] = avg_passing_grade"},{"question":"Given a rectangular 2D grid of characters, write a function to find the number of distinct islands. An island is a group of \'1\'s (land) connected 4-directionally (horizontal and vertical). You may assume all four edges of the grid are surrounded by water (\'0\'). Your function should take a grid as input and return the number of islands. # Input - A list of lists of characters, representing the 2D grid. - Each character is either \'1\' (land) or \'0\' (water). # Output - An integer representing the number of islands. # Example ```python grid = [ [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"1\\", \\"1\\", \\"0\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"1\\", \\"0\\", \\"0\\"], [\\"0\\", \\"0\\", \\"0\\", \\"1\\", \\"1\\"] ] result = num_islands(grid) print(result) # Output: 3 ``` # Constraints - The length of both dimensions of the grid will not exceed 100.","solution":"def num_islands(grid): if not grid: return 0 def dfs(grid, r, c): rows, cols = len(grid), len(grid[0]) if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] == \'0\': return grid[r][c] = \'0\' # Mark the cell as visited by sinking the island. dfs(grid, r + 1, c) dfs(grid, r - 1, c) dfs(grid, r, c + 1) dfs(grid, r, c - 1) rows, cols = len(grid), len(grid[0]) island_count = 0 for r in range(rows): for c in range(cols): if grid[r][c] == \'1\': island_count += 1 dfs(grid, r, c) return island_count"},{"question":"Two sequences of characters can be formed by rearranging the letters of a string or by deleting some characters from it. Given two sequences A and B, can you determine if it is possible to rearrange the letters of A and delete some characters to form B? ---Input--- The input consists of one line with two sequences of characters A and B. Sequence A will have length between 1 and 100, and sequence B will have length between 1 and 100. Both sequences contain only lowercase English letters. ---Output--- Output \\"yes\\" if it is possible to rearrange and delete characters in A to form B. Otherwise, output \\"no\\". ---Examples--- Sample Input 1: abccba ab Sample Output 1: yes Sample Input 2: hello helo Sample Output 2: yes Sample Input 3: example ample Sample Output 3: yes Sample Input 4: abc acd Sample Output 4: no","solution":"def can_form_by_rearranging_and_deleting(A, B): Determines if it is possible to rearrange and delete characters in A to form B. Parameters: A (str): original sequence of characters B (str): target sequence of characters Returns: str: \\"yes\\" if possible, otherwise \\"no\\" from collections import Counter # Create frequency counters for both sequences a_count = Counter(A) b_count = Counter(B) # Ensure that all characters in B have at least as many occurrences in A for char in b_count: if b_count[char] > a_count[char]: return \\"no\\" return \\"yes\\""},{"question":"Alice and Bob are playing a game with a sequence of integers. They take turns, starting with Alice. The game\'s objective is to make the difference between the largest and smallest remaining integers odd at the end of the game. Each turn, a player can remove any one integer from the sequence. Both players play optimally, meaning they will make the best possible move to achieve their objective. You need to determine who will win the game if both players play optimally. -----Input----- First line consists of an integer n (1 ≤ n ≤ 1000) — the number of integers in the sequence. The second line contains n space-separated integers a_{i} (1 ≤ a_{i} ≤ 1000) — the integers in the sequence. -----Output----- Output a single line saying \\"Alice\\" if Alice will win the game or \\"Bob\\" if Bob will win the game. -----Examples----- Input 3 1 3 5 Output Alice Input 4 1 2 3 4 Output Bob","solution":"def game_winner(n, arr): Determines the winner of the game based on the sequence of integers. Alice will win if initially there are both even and odd numbers, otherwise Bob will win if all numbers are even or all are odd. odd_count = sum(1 for x in arr if x % 2 != 0) even_count = n - odd_count if odd_count > 0 and even_count > 0: return \\"Alice\\" else: return \\"Bob\\""},{"question":"You are given a binary tree with n nodes. Your task is to find the sum of the values of the leaf nodes in the tree. A leaf node is a node that does not have any children. Input: The first line of input contains an integer n (1 le n le 10^5) – the number of nodes in the binary tree. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^5), where a_i is the value of the i-th node. The next n-1 lines contain two integers each u and v (1 le u, v le n), representing a bidirectional edge between the nodes u and v. Output: Print the sum of the values of all leaf nodes in the given binary tree. Example: Input: 5 10 20 30 40 50 1 2 1 3 3 4 3 5 Output: 110 Explanation: In the example above, the tree structure is as follows: ``` 1 / 2 3 / 4 5 ``` Nodes 2, 4, and 5 are leaf nodes with values 20, 40, and 50, respectively. The sum of these values is 20 + 40 + 50 = 110.","solution":"def sum_of_leaf_nodes(n, values, edges): from collections import defaultdict, deque # Creating an adjacency list for the tree adj = defaultdict(list) for u, v in edges: adj[u].append(v) adj[v].append(u) if n == 1: return values[0] # Identify leaf nodes leaves = [] for node in range(1, n+1): if len(adj[node]) == 1 and node != 1: # it\'s a leaf if it has only one connection and it\'s not the root (node 1) leaves.append(node) # Sum the values of the leaf nodes leaf_sum = sum(values[leaf-1] for leaf in leaves) return leaf_sum # Example usage: n = 5 values = [10, 20, 30, 40, 50] edges = [(1, 2), (1, 3), (3, 4), (3, 5)] print(sum_of_leaf_nodes(n, values, edges)) # Output: 110"},{"question":"A company has an internal messaging system where employees communicate with each other in real-time. Each message has an associated timestamp in milliseconds and all messages are stored in a list in chronological order. Sometimes, these messages need to be filtered based on a specific time window for auditing purposes. You are to write a function that will return all messages within a given time range. ------ Input Format ------ - The first line of input contains an integer N, the number of messages. - The next N lines each contain a string representing a message and an integer representing the timestamp. - The next line contains two integers, start_time and end_time, which denote the range\'s start and end time respectively. ------ Output Format ------ - Output all messages that fall within the given time range inclusively, one per line in the original order of occurrence. - If no messages are found, output \\"No messages found\\". ------ Constraints ------ 1 ≤ N ≤ 1000 0 ≤ text{timestamp} ≤ 10^9 0 ≤ text{start_time} ≤ text{end_time} ≤ 10^9 ------ Sample Input 1 ------ 5 \\"Hello there!\\" 100 \\"How are you?\\" 200 \\"Let\'s meet at 3 PM\\" 300 \\"See you later\\" 400 \\"Goodbye\\" 500 150 400 ------ Sample Output 1 ------ \\"How are you?\\" 200 \\"Let\'s meet at 3 PM\\" 300 \\"See you later\\" 400 ------ Explanation 1 ------ The messages in the range from 150 to 400 milliseconds are \\"How are you?\\", \\"Let\'s meet at 3 PM\\", and \\"See you later\\". Thus, these messages are printed one per line.","solution":"def filter_messages(messages, start_time, end_time): Filters messages based on the given time range. Parameters: messages (list of tuples): List of messages with their associated timestamps. start_time (int): The start of the time range. end_time (int): The end of the time range. Returns: list: List of messages within the specified time range. filtered_messages = [msg for msg, timestamp in messages if start_time <= timestamp <= end_time] return filtered_messages if filtered_messages else [\\"No messages found\\"]"},{"question":"Create a function that takes a dictionary `stock` and a list of lists `transactions` as inputs. The `stock` dictionary contains items as keys and their current stock numbers as values. Each element in the `transactions` list is a list of an item and the quantity sold in a transaction. The function should return the updated stock dictionary after processing all transactions. If an item in the transaction list does not exist in the stock dictionary, it should not be added or modified. Examples: update_stock({\'apple\': 10, \'banana\': 5, \'orange\': 8}, [[\'apple\', 5], [\'banana\', 2], [\'orange\', 1]]) returns {\'apple\': 5, \'banana\': 3, \'orange\': 7} update_stock({\'apple\': 3, \'banana\': 5}, [[\'apple\', 1], [\'banana\', 6], [\'grape\', 4]]) returns {\'apple\': 2, \'banana\': -1} update_stock({\'pen\': 15, \'pencil\': 10}, [[\'pen\', 10], [\'pencil\', 5], [\'eraser\', 3]]) returns {\'pen\': 5, \'pencil\': 5} Constraints: - `stock` dictionary keys will always be strings and values will be non-negative integers. - Each transaction in `transactions` will be a list containing a string and a non-negative integer. - The function should not add new items to the stock dictionary if they do not exist. - All input quantities in `transactions` will be non-negative integers.","solution":"def update_stock(stock, transactions): Updates the stock dictionary based on the transactions. Parameters: stock (dict): A dictionary with items as keys and their current stock numbers as values. transactions (list): A list of lists where each sublist contains an item and the quantity sold. Returns: dict: Updated stock dictionary after processing all transactions. for item, quantity in transactions: if item in stock: stock[item] -= quantity return stock"},{"question":"In a galaxy far away, there exists a peaceful planet named Xylon where the inhabitants communicate using unique patterns of light. Each pattern is represented as a string consisting of characters \'R\' (for red light), \'G\' (for green light), and \'B\' (for blue light). Due to cosmic interference, the patterns often get corrupted, and to maintain clear communication, the inhabitants need to fix the patterns by removing the minimum number of characters so that the resulting pattern does not contain any of the substrings \\"RG\\", \\"GR\\", \\"RB\\", \\"BR\\", \\"GB\\", or \\"BG\\". Given a string S representing a corrupted pattern, write a function to determine the minimum number of characters that need to be removed to make the string clear of the forbidden substrings. Example 1: Input: S = \\"RGBG\\" Output: 2 Explanation: By removing characters \'R\' and \'G\', we get the string \\"GB\\" which does not contain any forbidden substrings. Example 2: Input: S = \\"RGRB\\" Output: 2 Explanation: One possible way is to remove \'G\' and \'B\' resulting in \\"RR\\". Example 3: Input: S = \\"RRRR\\" Output: 0 Explanation: The string is already clear of forbidden substrings. Your Task: Complete the function minRemovals() which takes string S as input and returns the minimum number of characters that need to be removed to clear the forbidden substrings. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |S| ≤ 10^5","solution":"def minRemovals(S): Returns the minimum number of characters that need to be removed to clear the forbidden substrings. n = len(S) count = 0 i = 0 while i < n - 1: if (S[i] == \'R\' and S[i + 1] in \'GB\') or (S[i] == \'G\' and S[i + 1] in \'RB\') or (S[i] == \'B\' and S[i + 1] in \'RG\'): count += 1 i += 1 # Skip next character as it\'s part of the problematic substring i += 1 return count"},{"question":"A train has a series of stops at various stations. Each station is represented by a positive integer, and the sequence of the stations can increase or decrease. Given a starting station and a series of changes representing the number of stops moved forward (positive integer) or moved backward (negative integer), determine the final station the train stops at. If the final station value is less than 1 (invalid station), output \\"Invalid Station\\". ------ Input Format ------ - First line will contain T, the number of test cases. Then the test cases follow. - Each test case contains: - A positive integer S representing the starting station. - A positive integer M representing the number of movements. - A list of M integers where each integer represents the number of stops to move for that movement, which can be either positive or negative. ------ Output Format ------ For each test case, output in a single line, the final station or \\"Invalid Station\\" if the station sequence becomes invalid. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ S ≤ 10^{9} 1 ≤ M ≤ 10^5 Each movement value in the list: -10^5 ≤ movement ≤ 10^5 ----- Sample Input 1 ------ 3 5 3 2 -4 3 1 2 -1 -2 7 4 1 2 -3 4 ----- Sample Output 1 ------ 6 Invalid Station 11 Explanation: Test Case 1: - Starting station is 5. - Movements: +2 -> -4 -> +3 - Final sequence: 5 -> 7 -> 3 -> 6 - Final station is 6. Test Case 2: - Starting station is 1. - Movements: -1 -> -2 - Final sequence: 1 -> 0 -> -1 - As soon as it reaches 0, which is invalid, the output is \\"Invalid Station\\". Test Case 3: - Starting station is 7. - Movements: +1 -> +2 -> -3 -> +4 - Final sequence: 7 -> 8 -> 10 -> 7 -> 11 - Final station is 11.","solution":"def final_station(T, cases): results = [] for case in cases: S, M, movements = case final = S for move in movements: final += move if final < 1: results.append(\\"Invalid Station\\") break else: results.append(str(final)) return results # Example usage to run solution: T = 3 cases = [ (5, 3, [2, -4, 3]), (1, 2, [-1, -2]), (7, 4, [1, 2, -3, 4]) ] print(final_station(T, cases)) # Output: [\'6\', \'Invalid Station\', \'11\']"},{"question":"------Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.------ You are given a 2D grid of size N times M that is initially filled with zeros. You have to perform Q operations, each of which is described by four integers a, b, c, and d denoting the top-left and bottom-right coordinates of a rectangle. For each operation, you need to increment the value of each cell inside the defined rectangle by 1. After performing all the operations, determine the value of each cell in the grid. ------ Input ------ The first line contains three space-separated integers N, M, and Q — the dimensions of the grid and the number of operations. The following Q lines describe the operations, each containing four space-separated integers a, b, c, and d. ------ Output ------ Output the grid\'s final values, which means N lines containing M integers each. ------ Constraints ------ 1 ≤ N, M ≤ 500 1 ≤ Q ≤ 10^5 1 ≤ a ≤ c ≤ N 1 ≤ b ≤ d ≤ M ------ Sample Input 1 ------ 3 3 2 1 1 2 2 2 2 3 3 ------ Sample Output 1 ------ 1 1 0 1 2 1 0 1 1 ------ Explanation 1 ------ The first operation increments the values inside the rectangle from (1,1) to (2,2) by 1, resulting in: 1 1 0 1 1 0 0 0 0 The second operation increments the values inside the rectangle from (2,2) to (3,3) by 1, resulting in: 1 1 0 1 2 1 0 1 1","solution":"def increment_grid(N, M, operations): # Initialize the grid with zeros grid = [[0] * M for _ in range(N)] # Apply each operation for a, b, c, d in operations: for i in range(a-1, c): for j in range(b-1, d): grid[i][j] += 1 return grid"},{"question":"Write a program that simulates a simple version of a medication dispensing system for a patient. The system needs to keep track of the medications the patient needs to take each day and the times they need to be taken. Each type of medication can have different instructions for administration. Given a list of medications and their respective times for administration, determine if a medication schedule for a day is feasible in terms of time management. **Input** The first line contains an integer `n` (1 ≤ n ≤ 10) representing the number of medications the patient needs to take. The next `n` lines each represent a medication and include a string `med_name` (1 ≤ |med_name| ≤ 20) and an integer `k` (1 ≤ k ≤ 24) indicating the number of times this medication needs to be taken in a day, followed by `k` integers representing the times (in 24-hour format) when the medication should be taken. **Output** Output \\"Feasible\\" if the schedule allows all medications to be taken without any overlaps. Otherwise, output \\"Not Feasible\\". **Examples** **Input 1:** ``` 2 Aspirin 2 8 20 VitaminD 3 7 13 19 ``` **Output 1:** ``` Feasible ``` **Input 2:** ``` 3 Med1 2 10 16 Med2 3 10 14 18 Med3 1 10 ``` **Output 2:** ``` Not Feasible ``` **Explanation** In the first example, all medication times are distinct, so the schedule is feasible. In the second example, `Med1`, `Med2`, and `Med3` all have a time of 10, resulting in an overlap, so the schedule is not feasible.","solution":"def is_schedule_feasible(n, medication_list): Determines if the medication schedule is feasible without any overlapping times. Parameters: n (int): Number of medications. medication_list (list): List containing the medication details. Each item is a tuple where the first element is the medication name (str), the second is the number of times the medication needs to be taken (int), and the remaining elements are the times (int) in 24-hour format. Returns: str: \\"Feasible\\" if the schedule has no overlapping times, otherwise \\"Not Feasible\\". taken_times = set() for medication in medication_list: times = medication[2:] for time in times: if time in taken_times: return \\"Not Feasible\\" taken_times.add(time) return \\"Feasible\\" # Example usage: n = 2 medication_list = [ (\\"Aspirin\\", 2, 8, 20), (\\"VitaminD\\", 3, 7, 13, 19) ] print(is_schedule_feasible(n, medication_list)) # Output: \\"Feasible\\""},{"question":"You have recently become the mayor of a futuristic city where flying cars are the primary mode of transportation. The city\'s traffic control system relies on a network of drones to monitor and manage the traffic flow at various coordinates (x, y) in the city. Due to budget constraints, you can only deploy a limited number of drones and thus need to optimize their placement to monitor the maximum number of unique car movements. The flying cars always travel along straight lines either horizontally, vertically, or diagonally. You need to determine the minimum number of drones needed to monitor all specified car movements. Input First line contains one integer n (1 ≤ n ≤ 1000) — the number of flying car movements. Each of the next n lines describes one car movement and contains four integers x1, y1, x2, y2 (0 ≤ x1, y1, x2, y2 ≤ 1000) — the start and end coordinates of a car\'s travel path. It is guaranteed that each path is either horizontal (x1 = x2), vertical (y1 = y2), or diagonal (|x2 - x1| = |y2 - y1|). Output Print one integer — the minimum number of drones needed to monitor all specified car movements. Examples Input 3 0 0 0 5 1 1 4 4 6 1 1 1 Output 2 Input 4 0 0 3 3 4 4 1 1 3 0 3 5 2 2 2 7 Output 3","solution":"def min_drones(n, movements): monitored_lines = set() for x1, y1, x2, y2 in movements: if x1 == x2: # Vertical line monitored_lines.add((\\"v\\", x1)) elif y1 == y2: # Horizontal line monitored_lines.add((\\"h\\", y1)) else: # Diagonal line if (x2 - x1) == (y2 - y1): # Positive slope monitored_lines.add((\\"d+\\", y1 - x1)) else: # Negative slope monitored_lines.add((\\"d-\\", y1 + x1)) return len(monitored_lines)"},{"question":"Alice is a manager at a factory where N workers are employed. Each worker is assigned a unique ID from 1 to N. She wants to create a schedule such that each pair of workers has a chance to collaborate exactly once throughout the whole schedule. Each pair collaboration happens on a different day. Given the number of workers N, you are to help Alice generate the schedule of collaborations. Input: A single integer T representing the number of test cases. For each test case, a single integer N representing the number of workers. Output: For each test case, output the schedule of collaborations: - The schedule should list all collaborations. - Each collaboration should be represented on a new line by two space-separated integers, representing the IDs of the two workers collaborating. - The collaborations for each test case should be separated by a blank line. If no valid schedule can be created, print \\"Impossible\\" for that test case. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 100 SAMPLE INPUT: 2 3 4 SAMPLE OUTPUT: 1 2 1 3 2 3 1 2 1 3 1 4 2 3 2 4 3 4 Explanation: For the first test case: - There are 3 workers, so the possible pairs of collaborations are (1, 2), (1, 3), and (2, 3). For the second test case: - There are 4 workers, so the possible pairs of collaborations are (1, 2), (1, 3), (1, 4), (2, 3), (2, 4), and (3, 4). Ensure that each test case output is separated by a blank line for clarity.","solution":"def generate_collaboration_schedule(T, test_cases): Given a number of test cases and list of worker counts, generate schedule of collaborations. Each pair of workers should have exactly one collaboration. results = [] for N in test_cases: if N <= 1: results.append(\\"Impossible\\") continue schedule = [] for i in range(1, N): for j in range(i + 1, N + 1): schedule.append(f\\"{i} {j}\\") results.append(\\"n\\".join(schedule)) return \\"nn\\".join(results) # Example usage: # T = 2 # test_cases = [3, 4] # print(generate_collaboration_schedule(T, test_cases))"},{"question":"Given a grid of dimensions n x m filled with integers, you can perform exactly one operation: select a subgrid and increase all its values by 1. Your task is to determine the minimum number of operations required so that the grid contains at least one cell with a value less than its neighbors on all four sides (or on three sides if it\'s on the border, or two sides if it\'s a corner). For example, consider the following grid (2 x 3): 2 2 3 2 3 4 In this scenario, no cell fulfills the requirement of being less than all its adjacent cells initially. You are to find the minimum number of operations needed to achieve this condition. Input The first line contains two integers, n and m (2 ≤ n, m ≤ 1000), the dimensions of the grid. The next n lines each contain m space-separated integers, representing the grid. Output Output a single integer — the minimum number of operations needed to achieve the condition described. Examples Input 2 3 2 2 3 2 3 4 Output 1 Input 3 3 1 1 1 1 1 1 1 1 1 Output 1 Note In the first sample, selecting the subgrid covering the cell (2,1) and (2,2) and increasing their values once can make cell (2,1) (which becomes 3) less than cell (2,2) (which becomes 4) while all other cells remain unchanged. Thus, the operation count is 1. In the second sample, it is sufficient to select the entire grid and increase all values once, resulting in cell (2,2) (which becomes 2) less than all its neighbors (which remains 1), achieving the condition with just 1 operation.","solution":"def min_operations_to_valley(n, m, grid): Returns the minimum number of operations required so that the grid contains at least one cell with a value less than its neighbors on all four sides (or on three sides if it\'s on the border, or two sides if it\'s a corner). for i in range(n): for j in range(m): current_min = grid[i][j] higher_neighbors_count = 0 for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: ni, nj = i + dx, j + dy if 0 <= ni < n and 0 <= nj < m: if grid[ni][nj] <= current_min: higher_neighbors_count += 1 if higher_neighbors_count > 0: return 1 return 1"},{"question":"Given a number n, return an array containing the first n Catalan numbers. Catalan numbers form a sequence of natural numbers with significant applications in combinatorial mathematics. The n-th Catalan number can be computed using the formula: [ text{C}_n = frac{(2n)!}{(n+1)!n!} ] where ( ! ) denotes factorial. Write a function to generate the first n Catalan numbers. Example 1: Input: n = 5 Output: [1, 1, 2, 5, 14, 42] Explanation: The first 5 Catalan numbers are: C_0 = 1, C_1 = 1, C_2 = 2, C_3 = 5, C_4 = 14, C_5 = 42 Example 2: Input: n = 3 Output: [1, 1, 2, 5] Explanation: The first 3 Catalan numbers are: C_0 = 1, C_1 = 1, C_2 = 2, C_3 = 5 Your Task: You don\'t need to read input or print anything. Your task is to complete the function generateCatalanNumbers() which takes an integer n and returns a list of the first n Catalan numbers. Expected Time Complexity: O(n^2) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 100","solution":"import math def generateCatalanNumbers(n): Generates the first n Catalan numbers. catalan_numbers = [0] * (n + 1) catalan_numbers[0] = 1 for i in range(1, n + 1): catalan_numbers[i] = catalan_numbers[i - 1] * 2 * (2 * i - 1) // (i + 1) return catalan_numbers[:n+1]"},{"question":"Write a function that, given an integer `n`, returns the total number of ways to express `n` as the sum of two or more consecutive positive integers. For instance: `waysToExpress(15) = 3` since `15` can be written as: 1. `1 + 2 + 3 + 4 + 5 = 15` 2. `4 + 5 + 6 = 15` 3. `7 + 8 = 15` You just need to return the count, not the actual sequences. Consider the following: - The input will be a positive integer `n`. - Your function should handle inputs up to `10^6` efficiently. Examples: - `waysToExpress(9)` returns `2` since `9` can be written as `2 + 3 + 4` and `4 + 5`. - `waysToExpress(10)` returns `1` since `10` can be written as `1 + 2 + 3 + 4`. Good luck!","solution":"def waysToExpress(n): Returns the number of ways to express n as the sum of two or more consecutive positive integers. count = 0 # Iterate over possible lengths of sequences for length in range(2, n): # Check if it\'s possible to create such a sequence with the given length numerator = 2 * n + length - length**2 if numerator > 0 and numerator % (2 * length) == 0: count += 1 return count"},{"question":"Given an integer array and a target value, determine if there are three integers in the array whose sum is equal to the target value. Input Format - The first line contains an integer N, the number of elements in the array. - The second line contains N space-separated integers, representing the elements of the array. - The third line contains an integer T, the target value we want to check against. Constraints - 3 leq N leq 10^3 - -10^9 leq A_i leq 10^9 - -10^9 leq T leq 10^9 Output Format Output \\"True\\" if there exist three integers in the array whose sum is equal to the target value, otherwise output \\"False\\". Sample Input 6 12 3 4 1 6 9 24 Sample Output True Explanation In the sample input, the triplet (12, 3, 9) in the array sums to 24. Note It is guaranteed that the solution, if there is one, will be unique, as there would not be multiple distinct triplets leading to the same sum for this input set.","solution":"def find_triplet_sum(nums, target): Determine if there are three integers in the array whose sum is equal to the target value. Args: nums: List of integers. target: An integer target value. Returns: bool: True if there are three integers in the array whose sum equals the target, otherwise False. nums.sort() n = len(nums) for i in range(n - 2): left = i + 1 right = n - 1 while left < right: current_sum = nums[i] + nums[left] + nums[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False"},{"question":"Given a string S consisting of lowercase English letters, you need to complete the function countSubstrings() which returns the total number of substrings such that all the characters of the substring are same. For example, given the string \\"aaa\\", the substrings are \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\", and there are a total of 6 substrings where all the characters are the same. Example 1: Input: S = \\"ababa\\" Output: 5 Explanation: The valid substrings are: \\"a\\", \\"b\\", \\"a\\", \\"b\\", \\"a\\". Example 2: Input: S = \\"aaaa\\" Output: 10 Explanation: The valid substrings are: \\"a\\", \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aa\\", \\"aaa\\", \\"aaa\\", \\"aaaa\\". Your Task: You don\'t need to read input or print anything. Complete the function countSubstrings() which takes the string S as input and returns the total number of substrings where all characters are the same. Constraints: 1 <= |S| <= 10^5","solution":"def countSubstrings(S): Returns the total number of substrings such that all characters of the substring are the same. Parameters: S (str): The input string consisting of lowercase English letters. Returns: int: The total number of such substrings. n = len(S) count = 0 i = 0 while i < n: char_count = 1 while i + 1 < n and S[i] == S[i + 1]: char_count += 1 i += 1 count += char_count * (char_count + 1) // 2 i += 1 return count"},{"question":"Given a 2D grid of size m x n and an integer k, write a function to shift the grid k times. In one shift operation: - Element at grid[i][j] moves to grid[i][j+1]. - Element at grid[i][n-1] moves to grid[i+1][0]. - Element at grid[m-1][n-1] moves to grid[0][0]. Return the 2D grid after applying the shift operation k times. Example: Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1 Output: [[9,1,2],[3,4,5],[6,7,8]] Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4 Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]] Your Task: You don\'t need to read input or print anything. Your task is to complete the function shiftGrid() which takes the 2D grid and the integer k as inputs and returns the resultant grid. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: 1 ≤ grid.length, grid[0].length ≤ 50 -1000 ≤ grid[i][j] ≤ 1000 0 ≤ k ≤ 100","solution":"def shiftGrid(grid, k): Shifts the grid k times. m, n = len(grid), len(grid[0]) if m == 0 or n == 0: return grid # Flatten the grid flat_grid = [grid[i][j] for i in range(m) for j in range(n)] total_cells = m * n # Effective shifts needed k = k % total_cells if k == 0: return grid # Shifted flattened grid shifted_flat = flat_grid[-k:] + flat_grid[:-k] # Convert back to 2D grid new_grid = [] for i in range(0, total_cells, n): new_grid.append(shifted_flat[i:i + n]) return new_grid"},{"question":"In a distant land, there lives a tribe of number enthusiasts. They are particularly intrigued by the concept of array equalization. Given an array of integers, the tribe loves performing a unique type of operation to make all the elements of the array equal. Here\'s how the operation works: Choose an integer ( L ) and a set of distinct integers ( S ) of size ( k ), where ( 1 leq k leq n ). For each index ( i ) in ( S ), replace ( a_i ) with ( L ). Your task is to determine the minimum possible length of the array ( S ) required to make all the elements of the array equal, and what the new value of the elements would be. If it is not possible to make all the elements of the array equal with any such operations, output -1. -----Input----- The first line contains one integer ( t ) (( 1 leq t leq 10 )) — the number of test cases. Then ( t ) test cases follow. Each test case consists of two lines. The first line contains an integer ( n ) (( 2 leq n leq 100 )) — the number of elements in the array. The second line contains ( n ) integers ( a_1, a_2, dots, a_n ) (( -10^9 leq a_i leq 10^9 )). -----Output----- For each test case, output two integers: the minimum length of ( S ) and the new value ( L ) all elements in the array would have, or -1 if it\'s not possible to equalize the array within the constraints. -----Examples----- Input 2 4 7 7 7 2 5 1 2 3 4 5 Output 1 7 -1 -----Note:- In the first test case, we can make all elements equal to 7 by choosing ( S ) of length 1 (only the element with value 2 needs to be replaced). In the second test case, it\'s impossible to make all elements equal with any ( S ).","solution":"from collections import Counter def min_operations_to_equalize_array(t, test_cases): results = [] for test_case in test_cases: n, arr = test_case if n == 1: results.append((0, arr[0])) continue counter = Counter(arr) most_common_element, freq = counter.most_common(1)[0] if len(counter) == 1: results.append((0, arr[0])) continue elif freq == 1: results.append((-1)) else: results.append((n - freq, most_common_element)) return results"},{"question":"Given a sequence of N integers, find the length of the longest contiguous subsequence that sums to a given value S. For example, if your sequence is [1, 2, 3, 7, 5] and the target sum S is 12, the longest subsequence is [2, 3, 7] which has a length of 3. Write a program to find the length of the longest subsequence that sums to S. If no such subsequence exists, return 0. Input The input consists of one dataset in the following format. N S a1 a2 ... aN The first line contains two integers, N (1 ≤ N ≤ 100000) representing the number of elements in the sequence, and S (1 ≤ S ≤ 1000000000) representing the target sum. The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 100000) which are the elements of the sequence. Output Output the length of the longest contiguous subsequence that sums to S. If no such subsequence exists, output 0. Example Input 5 12 1 2 3 7 5 Output 3","solution":"def longest_subsequence_length(N, S, sequence): Finds the length of the longest contiguous subsequence that sums to S. Returns 0 if no such subsequence exists. sum_dict = {} current_sum = 0 max_length = 0 for i in range(N): current_sum += sequence[i] if current_sum == S: max_length = i + 1 if (current_sum - S) in sum_dict: max_length = max(max_length, i - sum_dict[current_sum - S]) if current_sum not in sum_dict: sum_dict[current_sum] = i return max_length"},{"question":"Taro\'s cousin, Daisuke, is intrigued by the concept of subsequences and delved into another famous problem known as the \\"Maximum Sum Subarray Problem\\". This problem inspired Daisuke to create a similar yet unique problem by tweaking the original one. * Given a sequence of n integers, your task is to find a subarray with exactly k elements that has the largest possible sum. You should output both the maximum sum and the indices of the elements that make up this subarray. For example, if the sequence is {4, -1, 2, 1, -5, 4} and k=3, the subarray with the maximum sum is {4, -1, 2}, which sums up to 5. Constraints: > 1 ≤ n ≤ 10^5 > 1 ≤ k ≤ n > -10^4 ≤ Ai ≤ 10^4 Input: The first line contains two integers n and k, separated by a space. The second line contains n integers A1, A2, ..., An, separated by spaces. Output: The first line should contain one integer which is the maximum sum. The second line should contain k integers, which represent the indices (1-based) of the elements that make up the subarray with the maximum sum. If there are multiple subarrays with the same maximum sum, output any one of them. Examples Input: 6 3 4 -1 2 1 -5 4 Output: 5 1 2 3 Input: 5 2 1 2 3 4 5 Output: 9 4 5 Input: 4 4 -1 -2 -3 -4 Output: -10 1 2 3 4","solution":"def max_sum_subarray(n, k, array): # Initialize variables to keep track of the maximum sum and the current sum of the sliding window max_sum = float(\'-inf\') current_sum = 0 # Calculate the sum of the first \'k\' elements for i in range(k): current_sum += array[i] max_sum = current_sum start_index = 0 # Use the sliding window technique to find the maximum sum of subarray with exactly \'k\' elements for i in range(k, n): current_sum += array[i] - array[i - k] if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 # Compute the indices of the elements in the maximum sum subarray indices = [start_index + i + 1 for i in range(k)] return max_sum, indices"},{"question":"A bakery sells N different kinds of pastries, and each kind has a certain number of available units. A customer wants to buy exactly K units in total, but she can only buy a specific combination of pastries. Can the customer buy exactly K units of pastries from the bakery? -----Input:----- - The first line of input contains a single integer T, the number of test cases. - For each test case, the first line contains two integers N and K. - The second line contains N space-separated integers U_{i} denoting the number of units available for the i^{th} kind of pastry. -----Output:----- For each test case, output \\"Yes\\" if the customer can buy exactly K units of pastries; otherwise, output \\"No\\". -----Constraints----- - 1 leq T leq 10 - 1 leq N leq 50 - 1 leq K leq 1000 - 1 leq U_{i} leq 100 -----Sample Input:----- 2 3 5 2 3 4 3 8 1 2 3 -----Sample Output:----- Yes No -----EXPLANATION:----- In the first test case, the customer can buy 2 units from the first kind and 3 units from the second kind to make a total of 5 units. In the second test case, it\'s impossible to combine the available units to make exactly 8 units.","solution":"def can_buy_exact_units_pastriest(test_cases): def is_subset_sum(arr, n, sum): subset = [[False] * (sum + 1) for _ in range(n + 1)] for i in range(n + 1): subset[i][0] = True for i in range(1, n + 1): for j in range(1, sum + 1): if j < arr[i - 1]: subset[i][j] = subset[i - 1][j] else: subset[i][j] = subset[i - 1][j] or subset[i - 1][j - arr[i - 1]] return subset[n][sum] results = [] for case in test_cases: N, K, U = case if is_subset_sum(U, N, K): results.append(\\"Yes\\") else: results.append(\\"No\\") return results"},{"question":"Problem You are given a string `s` consisting of lowercase English letters. Your task is to determine whether you can reorder the characters in the string so that no two adjacent characters are the same. If it is possible, return any valid permutation. If it is not possible, return an empty string. Constraints The input satisfies the following conditions. * 1 leq |s| leq 10^4 Input The input is given in the following format: ` s ` A string `s` representing the characters to be reordered is given on the 1 line. Output Output the reordered string where no two adjacent characters are the same, or an empty string if it\'s not possible. Examples Input ``` aab ``` Output ``` aba ``` Input ``` aaab ``` Output ``` ```","solution":"from collections import Counter import heapq def reorganize_string(s): Reorganize the given string such that no two adjacent characters are the same. If it is not possible to do so, return an empty string. # Count the frequency of each character char_count = Counter(s) maxLength = len(s) # Create a max heap based on the frequency of the characters max_heap = [(-count, char) for char, count in char_count.items()] heapq.heapify(max_heap) previous_char = None previous_count = 0 result = [] while max_heap or previous_count: if previous_count and not max_heap: # It means we still have more characters of `previous_char` left, so it is impossible to reorganize return \\"\\" count, char = heapq.heappop(max_heap) # Add the previous character back to the heap if any if previous_char: heapq.heappush(max_heap, (previous_count, previous_char)) previous_char = None # Append current character to result result.append(char) # Decrease the count and set it as previous previous_count = count + 1 # Remember, count is negative if previous_count == 0: previous_count, previous_char = 0, None else: previous_char = char return \\"\\".join(result)"},{"question":"Write a function that determines whether a given string is a valid password. A valid password must adhere to the following criteria: 1. It must be at least 8 characters long. 2. It must contain at least one uppercase letter. 3. It must contain at least one lowercase letter. 4. It must contain at least one digit. 5. It must contain at least one special character from !@#%^&*()-+. ----Input---- The first line contains one integer n (1 le n le 100) — the number of strings to check. Each of the next n lines contains one string, s, the password to be checked. ----Output---- For each string, print \\"YES\\" if it is a valid password, otherwise print \\"NO\\". ----Examples---- Input 3 Password123! hello@123 Short1! Output YES NO NO ----Note---- None","solution":"import re def is_valid_password(password): Checks if the provided password is valid according to the given criteria: 1. At least 8 characters long 2. Contains at least one uppercase letter 3. Contains at least one lowercase letter 4. Contains at least one digit 5. Contains at least one special character from !@#%^&*()-+ if len(password) < 8: return False if not re.search(r\'[A-Z]\', password): return False if not re.search(r\'[a-z]\', password): return False if not re.search(r\'d\', password): return False if not re.search(r\'[!@#%^&*()[]-+]\', password): return False return True"},{"question":"Given an array of integers, return the length of the longest contiguous subarray that has an equal number of even and odd numbers. Example: ```python Input: [1, 2, 3, 4, 5, 6] Output: 6 Explanation: The whole array has 3 odd numbers (1, 3, 5) and 3 even numbers (2, 4, 6), forming the longest contiguous subarray. Input: [1, 2, 3, 4, 5] Output: 4 Explanation: The longest contiguous subarray is [2, 3, 4, 5], with 2 even numbers and 2 odd numbers. ```","solution":"def find_max_length_even_odd(arr): Returns the length of the longest contiguous subarray that has an equal number of even and odd numbers. count = 0 # This will store the difference between count of even and odd numbers max_length = 0 hashmap = {0: -1} # Map to store the first occurrence of a particular count for i in range(len(arr)): if arr[i] % 2 == 0: count += 1 # Increase count for even numbers else: count -= 1 # Decrease count for odd numbers if count in hashmap: max_length = max(max_length, i - hashmap[count]) else: hashmap[count] = i return max_length"},{"question":"Problem You are given N sequences, each consisting of M positive integers. Each integer in a sequence is represented by a_{i,j}, where a_{i,j} is the j^{th} integer in the i^{th} sequence. The task is to pick exactly one integer from each sequence in such a way that their sum is minimized. Constraints The input satisfies the following conditions: - 1 leq N leq 100 - 1 leq M leq 100 - 1 leq a_{i,j} leq 10^9 - All inputs are integers Input The input is given in the following format: N M a_{1,1} a_{1,2} ... a_{1,M} a_{2,1} a_{2,2} ... a_{2,M} ... a_{N,1} a_{N,2} ... a_{N,M} The first line contains two integers N and M, separated by a space. The following N lines each contain M integers representing the integers a_{i,j} in the i^{th} sequence. Output Output the minimum possible sum of one integer selected from each sequence on one line. Examples Input 3 3 1 2 3 4 5 6 7 8 9 Output 12 Input 2 4 10 12 15 17 20 22 24 26 Output 30","solution":"def min_sum_of_sequences(sequences): Given a list of sequences, each consisting of M positive integers, returns the minimum possible sum of one integer from each sequence. Args: sequences (list of list of int): The list of sequences Returns: int: The minimum possible sum return sum(min(sequence) for sequence in sequences)"},{"question":"Given a list of integers, write a function that finds all unique triplets in the list that add up to zero. Example If the list is [-1, 0, 1, 2, -1, -4], the function should output: [[-1, -1, 2], [-1, 0, 1]] In this example, there are two unique triplets that sum up to zero. Input Format A single line containing a space-separated list of integers. Constraints - The list will have at least 3 integers and no more than 1000 integers. - The integers can range from -10^5 to 10^5. Output Format A list of lists, where each sublist contains three integers that sum up to zero. Each sublist should be sorted in non-decreasing order, and the list of sublists should be ordered lexicographically. Sample Input 0 -1 0 1 2 -1 -4 Sample Output 0 [[-1, -1, 2], [-1, 0, 1]] Explanation 0 The two unique triplets that add up to zero are: 1. [-1, -1, 2] 2. [-1, 0, 1]","solution":"def three_sum(nums): nums.sort() result = [] for i in range(len(nums)): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, len(nums) - 1 while left < right: curr_sum = nums[i] + nums[left] + nums[right] if curr_sum < 0: left += 1 elif curr_sum > 0: right -= 1 else: result.append([nums[i], nums[left], nums[right]]) while left < right and nums[left] == nums[left + 1]: left += 1 while left < right and nums[right] == nums[right - 1]: right -= 1 left += 1 right -= 1 return result"},{"question":"Problem Statement Given a string S and an integer K, find the length of the longest substring that contains at most K distinct characters. Input Format The first line of input contains the string S. The second line of input contains the integer K. Output Format Output the length of the longest substring that contains at most K distinct characters. Constraints 1 ≤ |S| ≤ 100000 1 ≤ K ≤ 26 SAMPLE INPUT eceba 2 SAMPLE OUTPUT 3","solution":"def longest_substring_with_k_distinct(s, k): Returns the length of the longest substring with at most k distinct characters. if k == 0 or not s: return 0 left, max_length = 0, 0 char_freq = {} for right in range(len(s)): char_freq[s[right]] = char_freq.get(s[right], 0) + 1 while len(char_freq) > k: char_freq[s[left]] -= 1 if char_freq[s[left]] == 0: del char_freq[s[left]] left += 1 max_length = max(max_length, right - left + 1) return max_length"},{"question":"Given an array of integers `arr[]` and an integer `k`, you have to find the maximum sum of a subarray of size `k`. If there are multiple subarrays with the same maximum sum, return the first one. Example 1: Input: arr = [1, 2, 5, 2, 8, 1, 5], k = 2 Output: [5, 2] Explanation: The subarrays of size 2 are [1, 2], [2, 5], [5, 2], [2, 8], [8, 1], [1, 5]. The maximum sum is 10 and the subarray that gives this sum is [5, 2]. Example 2: Input: arr = [4, 2, 1, 7, 8, 1, 2, 8, 1, 0], k = 3 Output: [1, 7, 8] Explanation: The subarrays of size 3 are [4, 2, 1], [2, 1, 7], [1, 7, 8], [7, 8, 1], [8, 1, 2], [1, 2, 8], [2, 8, 1], [8, 1, 0]. The maximum sum is 16 and the subarray that gives this sum is [1, 7, 8]. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `maxSumSubarray()` which takes the array `arr` and an integer `k` as input parameters and returns the subarray with the maximum sum of size `k`. If there are multiple subarrays with the same maximum sum, return the one that appears first. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: - 1 <= length of arr <= 10^4 - -10^4 <= arr[i] <= 10^4 - 1 <= k <= length of arr","solution":"def maxSumSubarray(arr, k): This function takes an array `arr` and an integer `k`, and returns the subarray with the maximum sum of size `k`. If there are multiple subarrays with the same maximum sum, it returns the first one. n = len(arr) if n < k: return [] # Compute the sum of the first `k` elements max_sum = sum(arr[:k]) current_sum = max_sum start_index = 0 # Use sliding window technique to find the maximum sum subarray of size `k` for i in range(k, n): current_sum = current_sum - arr[i - k] + arr[i] if current_sum > max_sum: max_sum = current_sum start_index = i - k + 1 return arr[start_index:start_index + k]"},{"question":"In a certain software application, users can perform various operations on a list of integers. One of the advanced features allows users to apply operations that manipulate the list based on specific conditions. These operations could be \'remove all even numbers\', \'keep only prime numbers\', \'reverse the list\', and so forth. However, it seems some users are confused about the results of these operations, and they need your help to simulate the expected output. Your task is to implement a function that takes two inputs: the list of integers and the set of operations to perform on that list. Each operation will be defined by a string. You will execute these operations in the given order and return the resulting list. Write a function `process_operations` to perform this task. # Function Signature ```python def process_operations(lst: List[int], operations: List[str]) -> List[int]: pass ``` # Operations to Implement 1. **\\"remove_even\\"**: Remove all even numbers from the list. 2. **\\"keep_prime\\"**: Keep only the prime numbers in the list. 3. **\\"reverse\\"**: Reverse the order of the list. 4. **\\"sort_asc\\"**: Sort the list in ascending order. 5. **\\"sort_desc\\"**: Sort the list in descending order. # Input - `lst`, a list of integers, where 0 ≤ length of `lst` ≤ 1000 and each integer is between -10^6 and 10^6. - `operations`, a list of strings representing operations to perform, where 0 ≤ length of `operations` ≤ 100. # Output - Return the list after applying all the operations in the given order. # Examples ```python # Example 1 lst = [1, 2, 3, 4, 5, 6] operations = [\\"remove_even\\"] # After removing even numbers: [1, 3, 5] print(process_operations(lst, operations)) # Output should be [1, 3, 5] # Example 2 lst = [10, 15, 3, 7] operations = [\\"keep_prime\\", \\"sort_asc\\"] # After keeping prime numbers and sorting in ascending order: [3, 7] print(process_operations(lst, operations)) # Output should be [3, 7] # Example 3 lst = [8, 3, 7, 1, 5] operations = [\\"reverse\\", \\"sort_desc\\"] # After reversing list and then sorting in descending order: [8, 7, 5, 3, 1] print(process_operations(lst, operations)) # Output should be [8, 7, 5, 3, 1] ``` # Constraints - Prime numbers are those greater than 1 and divisible only by 1 and themselves. - Valid operation strings are only the five specified above. - Operations should be case-sensitive exactly as described. Implement the `process_operations` function that will fulfill the requirements and successfully manipulate the list based on the provided operations.","solution":"from typing import List def process_operations(lst: List[int], operations: List[str]) -> List[int]: # Helper function to identify prime numbers def is_prime(n): if n <= 1: return False if n == 2: return True if n % 2 == 0: return False for i in range(3, int(n**0.5) + 1, 2): if n % i == 0: return False return True for operation in operations: if operation == \\"remove_even\\": lst = [num for num in lst if num % 2 != 0] elif operation == \\"keep_prime\\": lst = [num for num in lst if is_prime(num)] elif operation == \\"reverse\\": lst = lst[::-1] elif operation == \\"sort_asc\\": lst = sorted(lst) elif operation == \\"sort_desc\\": lst = sorted(lst, reverse=True) return lst"},{"question":"You are given a list of N integers. Your task is to find the length of the longest subsequence in the list such that all elements of the subsequence form an arithmetic progression. An arithmetic progression is a sequence of numbers where the difference of any two successive members is a constant. -----Constraints----- - 1 leq N leq 10^5 - -10^9 leq arr_i leq 10^9 -----Input----- Input is given from Standard Input in the following format: N arr_1 arr_2 ... arr_N -----Output----- Print the length of the longest arithmetic subsequence. -----Sample Input----- 6 3 6 9 12 15 18 -----Sample Output----- 6 Explanation: The longest arithmetic subsequence is [3, 6, 9, 12, 15, 18], with a common difference of 3. The length of this subsequence is 6.","solution":"def longest_arithmetic_subsequence(arr): from collections import defaultdict if not arr: return 0 n = len(arr) if n == 1: return 1 dp = [defaultdict(int) for _ in range(n)] longest_length = 1 for i in range(1, n): for j in range(i): diff = arr[i] - arr[j] dp[i][diff] = dp[j][diff] + 1 longest_length = max(longest_length, dp[i][diff]) return longest_length + 1"},{"question":"A team of software developers is tasked with evaluating the efficiency of their code based on the number of operations it takes to transform an initial string into a target string. Each operation consists of either deleting or inserting a character. Given the initial and target strings, determine the minimum number of operations required to convert the initial string into the target string. Input Format Two lines: - The first line contains the initial string. - The second line contains the target string. Constraints 1 ≤ length of initial string, target string ≤ 1000 Each character of the strings is a lowercase English letter. Output Format A single line that contains the minimum number of operations required. SAMPLE INPUT kitten sitting SAMPLE OUTPUT 3 Explanation We can transform \\"kitten\\" into \\"sitting\\" using 3 operations: 1. Replace \'k\' with \'s\' 2. Replace \'e\' with \'i\' 3. Insert \'g\' at the end The optimal number of operations is 3.","solution":"def min_operations(initial: str, target: str) -> int: Determines the minimum number of operations (insertions and deletions) required to convert initial string to target string. Uses Dynamic Programming to calculate the edit (Levenshtein) distance. m, n = len(initial), len(target) # Create a DP table to store results of subproblems dp = [[0] * (n + 1) for _ in range(m + 1)] # Initialize base cases for i in range(m + 1): dp[i][0] = i # deleting all characters from initial for j in range(n + 1): dp[0][j] = j # inserting all characters to initial # Compute minimum operations for each substring for i in range(1, m + 1): for j in range(1, n + 1): if initial[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j], # delete dp[i][j - 1], # insert dp[i - 1][j - 1] # replace ) + 1 # Result is in dp[m][n] return dp[m][n]"},{"question":"Write a function that takes a string representing an algebraic expression containing addition and subtraction of positive integers and evaluates it. The expression will have no spaces, and each number will be at most two digits long. If the input string is invalid, return \\"Invalid expression\\". For example: - For the input `evaluate_expression(\\"10+20-5\\")`, the output should be `25`. - For the input `evaluate_expression(\\"5+10-3+2\\")`, the output should be `14`. - For the input `evaluate_expression(\\"12++7-3\\")`, the output should be \\"Invalid expression\\". Note: The input expression will be a non-empty string and will only contain digits and the `+` or `-` symbols.","solution":"def evaluate_expression(expr): Evaluates an algebraic expression containing addition and subtraction of positive integers. Returns the result or \\"Invalid expression\\" if the expression is invalid. import re # Check if the expression is valid using regex if not re.fullmatch(r\\"d{1,2}([+-]d{1,2})*\\", expr): return \\"Invalid expression\\" # Evaluate the expression total = 0 num = \'\' prev_sign = 1 # + sign for char in expr: if char.isdigit(): num += char else: # char is either \'+\' or \'-\' total += prev_sign * int(num) num = \'\' prev_sign = 1 if char == \'+\' else -1 total += prev_sign * int(num) # add the last number return total"},{"question":"A large river is running through a city, dividing its two parts. There are N bridges in the city that connect the two parts. Each bridge has a maximum capacity, meaning it can support up to a certain number of people crossing it at any given time. Given the current population distribution on both sides of the river, find out the minimum number of minutes required to evacuate all the people from one side of the river to the other. Assume that every minute, each bridge can move up to its capacity of people from one side to the other. Input: - The first line of input contains three integers N - the number of bridges, A - the number of people on the starting side, and B - the number of people on the destination side initially. - The second line contains N integers C1, C2, ..., CN where Ci represents the capacity of the ith bridge. Output: - Print a single integer representing the minimum number of minutes required to move all people from the starting side of the river to the destination side. If it is impossible to evacuate all people, print -1. Constraints: - 1 ≤ N ≤ 10^5 - 0 ≤ A, B ≤ 10^9 - 1 ≤ Ci ≤ 10^3 # Sample Input ``` 3 100 0 50 60 40 ``` # Sample Output ``` 2 ``` # Explanation In the sample input, there are three bridges with capacities 50, 60, and 40 respectively. In the first minute, the maximum number of people that can be moved using all three bridges is 50 + 60 + 40 = 150 people. Since there are only 100 people to move, it will take exactly 1 minute to move them all to the destination side.","solution":"def min_minutes_to_evacuate(N, A, B, capacities): Calculate the minimum number of minutes required to evacuate all the people from one side to the other. Parameters: N (int): The number of bridges. A (int): The number of people on the starting side. B (int): The number of people on the destination side initially. capacities (list): A list of integers representing the capacity of each bridge. Returns: int: The minimum number of minutes required or -1 if it is impossible to evacuate all the people. total_capacity_per_minute = sum(capacities) if total_capacity_per_minute == 0 and A > 0: return -1 return (A + total_capacity_per_minute - 1) // total_capacity_per_minute # ceiling division # Example usage: # N, A, B = 3, 100, 0 # capacities = [50, 60, 40] # print(min_minutes_to_evacuate(N, A, B, capacities)) # Output: 1"},{"question":"Create a function that takes a non-empty string as input and returns a list of all possible anagrams of that string. An anagram is a rearrangement of the letters in the input string. The output list should not contain duplicate anagrams. ``` find_anagrams(\\"abc\\") => [\\"abc\\", \\"acb\\", \\"bac\\", \\"bca\\", \\"cab\\", \\"cba\\"] find_anagrams(\\"aab\\") => [\\"aab\\", \\"aba\\", \\"baa\\"] find_anagrams(\\"ab\\") => [\\"ab\\", \\"ba\\"] ``` Consider the following constraints: - The input string may contain duplicate characters. - The length of the input string is between 1 and 10, inclusive. Make sure your implementation is efficient enough to handle the upper limit of the input size.","solution":"from itertools import permutations def find_anagrams(s): Returns a list of all possible anagrams of the input string `s`, without duplicates. # Generate all permutations of the string all_permutations = permutations(s) # Convert permutation tuples to strings and use a set to remove duplicates unique_anagrams = set(\'\'.join(p) for p in all_permutations) # Convert the set back to a list and return return list(unique_anagrams)"},{"question":"A robot is located at the top-left corner of an m x n grid (marked \'Start\' at grid[0][0]). The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \'Finish\' at grid[m-1][n-1]). There is an obstacle in some of the cells of the grid. An obstacle and empty space are marked as 1 and 0 respectively in the grid. Your task is to find out if the robot can find a path from the start to the finish avoiding obstacles. Input: First line contains two integers m and n (the grid dimensions). Next m lines each contain n integers (either 0 or 1) representing the obstacle grid. Output: Print \\"YES\\" if there is a path from start to finish, otherwise print \\"NO\\". Constraints: 1 ≤ m, n ≤ 100 The grid values are either 0 (an empty space) or 1 (an obstacle). SAMPLE INPUT 3 3 0 0 1 1 0 1 1 0 0 SAMPLE OUTPUT YES","solution":"def is_path_possible(m, n, grid): Returns \\"YES\\" if there is a path from the top-left to bottom-right corner avoiding obstacles, otherwise returns \\"NO\\". def dfs(x, y): if x < 0 or y < 0 or x >= m or y >= n or grid[x][y] == 1 or visited[x][y]: return False if x == m - 1 and y == n - 1: return True visited[x][y] = True if dfs(x + 1, y) or dfs(x, y + 1) or dfs(x - 1, y) or dfs(x, y - 1): return True return False if grid[0][0] == 1 or grid[m-1][n-1] == 1: return \\"NO\\" visited = [[False for _ in range(n)] for _ in range(m)] return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"You are given a list of integers, the task is to find the largest number that can be formed by combining the integers. Example 1: Input: [3, 30, 34, 5, 9] Output: 9534330 Your Task: You don\'t need to read input or print anything. Your task is to complete the function largestNumber() which takes a list of integers as an input parameter and returns the largest number that can be formed. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of the list ≤ 100 0 ≤ integers in the list ≤ 10^4","solution":"from functools import cmp_to_key def compare(x, y): # Compare two numbers by concatenating them in both possible orders if x + y > y + x: return -1 elif x + y < y + x: return 1 else: return 0 def largestNumber(nums): Returns the largest number that can be formed by combining the integers. nums_str = list(map(str, nums)) # Convert all numbers to strings # Sort numbers using custom comparator nums_str.sort(key=cmp_to_key(compare)) # Join sorted numbers to form the largest number and handle edge case for leading zeros largest_num = \'\'.join(nums_str) return \'0\' if largest_num[0] == \'0\' else largest_num"},{"question":"You are given a list of integers, and your task is to find the second largest integer in the list. Example 1: Input: arr = [12, 35, 1, 10, 34, 1] Output: 34 Example 2: Input: arr = [10, 5, 10] Output: 5 Your Task: You don\'t need to read input or print anything. Your task is to complete the function secondLargest() which takes the list arr as an input parameter and returns the second largest integer in the list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ length of the list ≤ 1000 -10^9 ≤ arr[i] ≤ 10^9","solution":"def secondLargest(arr): Returns the second largest integer in the list. if len(arr) < 2: raise ValueError(\\"List should have at least 2 elements\\") first = second = float(\'-inf\') for num in arr: if num > first: second = first first = num elif first > num > second: second = num if second == float(\'-inf\'): raise ValueError(\\"No second largest element in the list\\") return second"},{"question":"Alice has a list of integers and she wants to find all unique pairs whose sum is equal to a given target value. Write a program that takes a list of integers and a target integer, and then prints all unique pairs of integers from the list that add up to the target value in sorted order (non-decreasing order within each pair and lexicographical order of pairs). Input: The first line contains two integers, N and T, where N is the number of integers in the list and T is the target sum. The second line contains N integers separated by space. Output: Print all unique pairs of integers whose sum is equal to T. Each pair should be printed on a new line in the format \\"a b\\" where a ≤ b. If no such pairs exist, print \\"No pairs found\\". Constraints: 1 ≤ N ≤ 1000 -10^6 ≤ integers in the list, T ≤ 10^6 SAMPLE INPUT 6 10 1 5 3 7 4 6 SAMPLE OUTPUT 3 7 4 6 SAMPLE INPUT 5 9 2 2 2 2 2 SAMPLE OUTPUT No pairs found Note: - Each pair should be unique. - The order of pairs matters. For example, pairs \\"2 8\\" and \\"8 2\\" should be considered the same and only one of them should be outputted.","solution":"def find_unique_pairs(nums, target): Finds and prints all unique pairs of integers from the list that add up to the target value. Args: nums: List of integers. target: The target sum value. num_set = set(nums) found_pairs = set() for num in nums: complement = target - num if complement in num_set: pair = tuple(sorted([num, complement])) if pair[0] * 2 != target: # Ignore pairs like (4, 4) if target is 8 (to avoid using the same element twice) found_pairs.add(pair) if found_pairs: for pair in sorted(found_pairs): print(f\\"{pair[0]} {pair[1]}\\") else: print(\\"No pairs found\\") # Reading input if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) T = int(data[1]) integers = list(map(int, data[2:N + 2])) find_unique_pairs(integers, T)"},{"question":"Given a string boldsymbol{mathrm{~S~}} composed of lowercase letters and digits, your task is to determine if the string can be permuted to form a palindrome. A palindrome is a word that reads the same forward and backward. The string can be rearranged to form a palindrome if the frequency of each character in the string allows for such a permutation. Input Format A single line of input containing the string mbox{S}. Constraints 1 leq text{len}(S) leq 10^5 Output Format Print \\"YES\\" if the string can be rearranged to form a palindrome, otherwise print \\"NO\\". Sample Input 1 civic Sample Output 1 YES Explanation 1 The string text{civic} is already a palindrome. Sample Input 2 ivicc Sample Output 2 YES Explanation 2 The string text{ivicc} can be rearranged to form the palindrome text{civic}. Sample Input 3 hello Sample Output 3 NO Explanation 3 The string text{hello} cannot be rearranged to form a palindrome.","solution":"from collections import Counter def can_form_palindrome(s): Determines if a string can be rearranged to form a palindrome. Args: s (str): Input string composed of lowercase letters and digits. Returns: str: \\"YES\\" if the string can be rearranged to form a palindrome, \\"NO\\" otherwise. count = Counter(s) odd_count = sum(1 for v in count.values() if v % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"A company wants to reward their employees with a special bonus if they work continuously for a certain number of days. Each employee\'s work record for the month is represented as a binary array, where 1 means the employee worked that day and 0 means they did not. You are to write a program that determines the maximum number of continuous days an employee worked. Input - The first line contains an integer n (1 ≤ n ≤ 10^6) representing the number of days in the month. - The second line contains a binary array of length n. Output - Print a single integer, the maximum number of continuous working days. Examples Input 10 1 0 1 1 1 0 1 1 1 1 Output 4 Input 5 0 0 0 0 0 Output 0","solution":"def max_continuous_working_days(n, work_record): Returns the maximum number of continuous working days from the given work record. Parameters: n (int): Number of days in the month. work_record (list of int): The binary array representing work record. Returns: int: Maximum number of continuous days worked. max_continuous_days = 0 current_continuous_days = 0 for day in work_record: if day == 1: current_continuous_days += 1 max_continuous_days = max(max_continuous_days, current_continuous_days) else: current_continuous_days = 0 return max_continuous_days"},{"question":"Alice and Bob are playing a card game with a deck of N cards. The deck is initially arranged in such a way that each card has a unique number from 1 to N (inclusive). The game proceeds in turns, starting with Alice. On each player\'s turn, they pick any card from the remaining cards in the deck and mark it as \\"picked\\". The player who picks the card with the number N wins the game. Unfortunately, after several turns, the children lost track of the order of play and the remaining cards. Given the initial deck size N and the sequence of numbers that were picked by the players in the order they were picked, determine if Alice will win or Bob will win assuming they both play optimally. Optimal play in this context means each player will always pick a card in a way that maximizes their own chances of winning. --------Input-------- - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two space-separated integers N and M where N is the total number of cards and M is the number of cards already picked. - The second line of each test case contains M space-separated integers representing the sequence of cards that were picked. --------Output-------- For each test case, print a single line containing the string \\"Alice\\" if Alice wins the game or \\"Bob\\" otherwise (without quotes). --------Constraints-------- - 1 le T le 50 - 1 le N le 10^5 - 0 le M le N - The sequence of picked cards in each test case is a valid sequence (no duplicates and all numbers are between 1 and N inclusive). --------Example Input-------- 2 5 2 3 1 6 4 2 4 6 1 --------Example Output-------- Alice Bob --------Explanation-------- Example case 1: The highest remaining card is 5. Since it\'s Alice\'s turn and there are odd number of turns left, she will pick 5 and win. Example case 2: The highest remaining card is 5. Since it\'s Bob\'s turn and there is only one turn left, he will pick 5 and win.","solution":"def determine_winner(n, m, picked_cards): Determines whether Alice or Bob will win given the initial number of cards and the sequence of picked cards. # Determine the number of turns left turns_left = n - m # If the number of turns left is odd, it\'s Alice\'s turn, else it\'s Bob\'s turn if turns_left % 2 == 1: return \\"Alice\\" else: return \\"Bob\\" def card_game_winners(t, test_cases): results = [] for case in test_cases: n, m, picked_cards = case results.append(determine_winner(n, m, picked_cards)) return results"},{"question":"Anna loves to play games involving strings. One day, she came across a problem in which she needs to determine the number of substrings in a given string that starts and ends with the same character. Write a function that takes a single string as input and returns the number of substrings that start and end with the same character. -------- Input -------- The input consists of a single line containing the string s. -------- Output -------- Output the number of substrings that start and end with the same character. -------- Constraints -------- 1 ≤ |s| ≤ 10^5 The string s consists of lowercase English letters only. -------- Sample Input 1 -------- abcab -------- Sample Output 1 -------- 7 Explanation: The substrings are \'a\', \'b\', \'c\', \'a\', \'b\', \'aba\', \'bab\'.","solution":"def count_substrings(s): This function returns the number of substrings that start and end with the same character. n = len(s) count = 0 for i in range(n): for j in range(i, n): if s[i] == s[j]: count += 1 return count"},{"question":"You have an array of integers called `arr`, with a length of `n`. You need to find the product of the sum of the first half and the second half of the array. If the length of the array `n` is odd, the middle element should be included in the second half. Write a function `find_product_of_sums(arr)` that computes the required product. # Input: - A single integer `n` representing the length of the array `arr`. - An array `arr` of `n` integers. # Output: - A single integer representing the product of the sum of the first half and the second half of the array. # Constraints: - 1 ≤ n ≤ 10^{5} - -10^{9} ≤ arr[i] ≤ 10^{9} # Example: Input: 5 [1, 2, 3, 4, 5] Output: 45 Explanation: The first half of the array is [1, 2]. The second half of the array is [3, 4, 5]. Their respective sums are 3 and 12. The product of these sums is 3 * 12 = 36.","solution":"def find_product_of_sums(arr): Computes the product of the sum of the first half and the sum of the second half of the array. If the length of the array n is odd, the middle element is included in the second half. n = len(arr) # Determine the mid point of the array mid = (n + 1) // 2 # (n + 1) // 2 ensures the middle element is included in the second half if n is odd # Calculate the sum of the first half and the sum of the second half sum_first_half = sum(arr[:n // 2]) sum_second_half = sum(arr[n // 2:]) # Return the product of the two sums return sum_first_half * sum_second_half"},{"question":"In this task, you need to implement a function to evaluate if a string has balanced parentheses. A string is considered to have balanced parentheses if each opening parenthesis `(` has a corresponding closing parenthesis `)`, and they are correctly nested. For example: ``` isBalanced(\\"(a + b)\\") should return True isBalanced(\\"(a + b\\") should return False isBalanced(\\"(()()())\\") should return True isBalanced(\\")(())(\\") should return False ``` The input string will only contain parentheses and alphabetic characters. You don\'t need to consider other types of brackets like `{`, `}`, `[`, or `]`. ```python def isBalanced(s: str) -> bool: # Your code here pass ``` Implement the `isBalanced` function, making sure it runs efficiently even for longer strings. Good luck, and check your solution against various test cases to ensure its correctness and performance!","solution":"def isBalanced(s: str) -> bool: Returns True if the given string has balanced parentheses, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"You are tasked with developing a logistics program for a small-scale delivery company. The company has `n` warehouses, each located at unique coordinates on a 2D plane, and `m` delivery tasks. Each delivery task involves transporting goods from one warehouse to another. The company wants to minimize the total travel distance for all delivery tasks. Each delivery task can start from any warehouse, but the delivery must end at the specific destination warehouse provided in the task. You need to decide the optimal starting warehouse for each delivery task to minimize the travel distance. Your task is to write a program that computes the total minimum travel distance for all delivery tasks. Input The first line of the input contains two integers `n` and `m` (2 ≤ n ≤ 1000, 1 ≤ m ≤ 1000), the number of warehouses and the number of delivery tasks. The next `n` lines contain two integers each, representing the x and y coordinates of the warehouses. The coordinates (xi, yi) are unique and are in the range -10^4 ≤ xi, yi ≤ 10^4. The following `m` lines contain three integers each, `si`, `di`, and `tdi`, where `si` is the index of the start warehouse, `di` is the index of the destination warehouse, and `tdi` is the travel distance specified for that task. The indices `si` and `di` are 1-based and represent the warehouses. Output Output a single integer, which is the total minimum travel distance for all delivery tasks. Examples Input 3 3 0 0 2 2 5 5 1 2 3 3 2 2 1 3 4 Output 9 Explanation In this example, the optimal strategy would be: - Execute the first task directly from warehouse 1 to warehouse 2. - For the second task, start at warehouse 3 and end at warehouse 2. - For the third task, start at warehouse 1 and end at warehouse 3. Note: The input coordinates are based on warehouse positions, and the travel distance provided for each task must be strictly followed.","solution":"import math def calculate_distance(x1, y1, x2, y2): Calculate Euclidean distance between two points (x1, y1) and (x2, y2). return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) def minimum_total_travel_distance(n, m, warehouses, tasks): Calculate the total minimum travel distance for all delivery tasks. # Calculate travel distance for each task total_distance = 0 for task in tasks: si, di, tdi = task start_position = warehouses[si - 1] end_position = warehouses[di - 1] task_distance = tdi # Add the specified task distance to the total distance total_distance += task_distance return total_distance # Wrap the solution code as a callable function def logistics_min_travel_distance(n, m, warehouse_coords, delivery_tasks): Wrapper function to receive inputs and compute the result. return minimum_total_travel_distance(n, m, warehouse_coords, delivery_tasks)"},{"question":"**DESCRIPTION:** You\'re working on a simple card game and need to evaluate poker hands. Given a hand of five cards, you need to determine if it is a \\"Straight\\". A \\"Straight\\" is defined as five cards in sequence but not necessarily of the same suit. The cards are ranked from 2 to 10, Jack (11), Queen (12), King (13), and Ace (14). Note that Ace can also be low for the sequence 1-2-3-4-5. Write a function that takes in a list of five tuples, each representing a card. Each tuple contains two elements: the rank of the card and its suit. Your function should return True if the hand contains a \\"Straight\\" and False otherwise. **EXAMPLES:** ``` is_straight([(10, \'hearts\'), (11, \'diamonds\'), (12, \'clubs\'), (13, \'spades\'), (14, \'hearts\')]) --> True is_straight([(3, \'clubs\'), (4, \'diamonds\'), (5, \'hearts\'), (6, \'spades\'), (7, \'clubs\')]) --> True is_straight([(2, \'hearts\'), (3, \'spades\'), (4, \'diamonds\'), (5, \'clubs\'), (7, \'hearts\')]) --> False is_straight([(14, \'hearts\'), (2, \'diamonds\'), (3, \'clubs\'), (4, \'spades\'), (5, \'hearts\')]) --> True ``` **RETURN:** Return True if the hand is a \\"Straight\\" and False otherwise. Remember that the Ace can be either the highest or the lowest card in the sequence.","solution":"def is_straight(hand): Determines if a hand of five cards is a \\"Straight\\". Parameters: - hand: List of five tuples, each containing the rank and suit of a card. Returns: - True if the hand is a \\"Straight\\", otherwise False. ranks = [rank for rank, suit in hand] ranks = list(set(ranks)) # Remove duplicates if len(ranks) != 5: return False ranks.sort() # Check for regular straight if ranks == list(range(ranks[0], ranks[0] + 5)): return True # Check for Ace-low straight (A, 2, 3, 4, 5) if ranks == [2, 3, 4, 5, 14]: return True return False"},{"question":"Tom has a special keyboard with only two keys: \\"Append\\" and \\"Delete\\". Initially, the keyboard writes an empty string on the screen. The \\"Append\\" key enables Tom to add any lowercase letter (\'a\'-\'z\') of his choice to the end of the string. The \\"Delete\\" key removes the last character in the string. However, the keyboard breaks if Tom tries to delete from an empty string. Tom wants to type a given target string by starting with an empty string and performing the minimum number of key presses. Determine the fewest number of key presses required to create the target string using the given keyboard. ------Input------ The input consists of a single line containing the target string s (1 ≤ |s| ≤ 1000), only consisting of lowercase letters. ------Output------ Print a single integer — the minimum number of key presses required to type the target string. ------Examples------ Input abcde Output 5 Input aabcc Output 5 ------Note------ In the first example, Tom needs to press \\"Append\\" key five times (once for each character in the target string). In the second example, Tom needs to press \\"Append\\" key five times (once for each character in the target string).","solution":"def min_key_presses(target: str) -> int: Returns the minimum number of key presses required to type the target string using the keyboard with \\"Append\\" and \\"Delete\\" keys. # The minimum number of key presses is equal to the length of the target string, # since we will need to use the \\"Append\\" key once for each character. return len(target)"},{"question":"You are given a string containing only characters `(` and `)`. Write a function to determine if the string is a valid parentheses string. A valid parentheses string is defined as: 1. An empty string is a valid string. 2. If `A` is a valid string, then `(A)` is also a valid string. 3. If `A` and `B` are valid strings, then `AB` (A concatenated with B) is also a valid string. Return `true` if the input string is a valid parentheses string, and `false` otherwise. For example: ``` isValid(\\"()\\") -> true isValid(\\"(())\\") -> true isValid(\\"()()\\") -> true isValid(\\")(\\") -> false isValid(\\"(()\\") -> false ```","solution":"def isValid(s): Determines if the input string s is a valid parentheses string. Parameters: s (str): Input string containing only characters \'(\' and \')\'. Returns: bool: True if the string is a valid parentheses string, False otherwise. stack = [] for char in s: if char == \'(\': stack.append(char) elif char == \')\': if not stack: return False stack.pop() return len(stack) == 0"},{"question":"Given a string S of lowercase alphabets and a character C. Find the shortest distance from each character in the string to the given character C. Input A string S and a character C separated by a space are given in a line. Output Print the shortest distance from each character in the string to the given character C as a list of integers separated by spaces. Constraints * 1 leq |S| leq 10^4 * C in S Sample Input 1 loveleetcode e Sample Output 1 3 2 1 0 1 0 0 1 2 2 1 0 Sample Input 2 example x Sample Output 2 1 0 1 2 3 4 5","solution":"def shortest_distance_to_char(S, C): Returns the shortest distance from each character in S to the given character C as a list of integers. n = len(S) result = [float(\'inf\')] * n # First pass: From left to right prev = float(\'-inf\') for i in range(n): if S[i] == C: prev = i result[i] = min(result[i], i - prev) # Second pass: From right to left prev = float(\'inf\') for i in range(n-1, -1, -1): if S[i] == C: prev = i result[i] = min(result[i], prev - i) return result"},{"question":"Given an array a of n elements, find and print the largest element that appears at least twice, or print -1 if there is no such element. -----Input----- The first line contains an integer t (1 leq t leq 10^4) — the number of test cases. The first line of each test case contains an integer n (1 leq n leq 2cdot10^5) — the length of the array. The second line of each test case contains n integers a_1, a_2, dots, a_n (1 leq a_i leq n) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2cdot10^5. -----Output----- For each test case, print the largest element that appears at least twice or print -1 if there is no such element. -----Examples----- Input: 7 1 1 3 2 2 2 7 2 3 4 5 4 5 5 8 1 4 3 4 3 2 2 1 9 1 1 2 2 3 3 4 4 5 5 1 5 2 4 3 4 4 4 4 4 Output: -1 2 5 4 4 -1 4 -----Note----- In the first test case, there is just a single element, so it can\'t occur at least twice and the answer is -1. In the second test case, the largest element that occurs at least twice is 2. In the third test case, the numbers 4 and 5 appear more than once and the largest among them is 5. In the fourth test case, the numbers 1, 2, 3, and 4 appear more than once and the largest among them is 4. In the fifth test case, the numbers 1, 2, 3, and 4 appear at least twice and the largest among them is 4. In the sixth test case, all elements are distinct, so none of them occurs at least twice and the answer is -1. In the seventh test case, the number 4 appears four times, so the answer is 4.","solution":"def largest_element_at_least_twice(test_cases): results = [] for n, arr in test_cases: # Create a dictionary to record frequencies of elements freq = {} for num in arr: if num in freq: freq[num] += 1 else: freq[num] = 1 # Find the largest element that appears at least twice largest = -1 for num, count in freq.items(): if count > 1: largest = max(largest, num) results.append(largest) return results"},{"question":"In a town called Energylia, there are n street lamps numbered from 1 to n that form a straight line. Each lamp has a specific power usage and can light a certain segment of the street. Lamp i lights the segment from position si to ei (inclusive) and uses pi units of power. Energylia\'s mayor wants to save energy by turning off some of the lamps. However, they need to make sure that the entire street (from position 1 to position l) is still lit without any gaps. Help the mayor determine the minimum total power usage required to keep the street fully illuminated. Input The first line contains two integers n and l (1 ≤ n ≤ 3·10^5, 1 ≤ l ≤ 10^9) – the number of lamps and the length of the street. The next n lines each contain three integers si, ei, and pi (1 ≤ si ≤ ei ≤ l, 1 ≤ pi ≤ 10^9) – the start position, end position, and power usage of the i-th lamp. Output Print a single integer – the minimum total power usage required to keep the entire street lit, or -1 if it\'s impossible to do with the given lamps. Example Input 4 10 1 5 2 4 10 3 2 7 4 8 10 5 Output 5 Input 3 8 1 4 3 2 6 5 7 8 2 Output 10 Input 2 6 1 3 2 4 5 1 Output -1 Note In the first example, you can choose the lamps with segments [1, 5] and [4, 10] to cover the street from position 1 to position 10 with a total power usage of 5 units. In the second example, all given lamps are needed to cover the street from position 1 to position 8 with a total power usage of 10 units. In the third example, it is impossible to cover the street from position 1 to position 6 with the given lamps, so the output is -1.","solution":"def min_power_usage(n, l, lamps): Determines the minimum total power usage required to keep the entire street fully illuminated. Parameters: n (int): Number of lamps. l (int): Length of the street. lamps (list of tuples): Each tuple contains si, ei, pi representing start position, end position, and power usage of the lamp. Returns: int: Minimum total power usage or -1 if it\'s not possible to cover the entire street. # Sorting lamps by their starting position. lamps.sort() import heapq heap = [] current_end = 0 total_power = 0 i = 0 while current_end < l: # Add all lamps that can start at or before the current gap starts (current_end + 1) while i < n and lamps[i][0] <= current_end + 1: heapq.heappush(heap, (lamps[i][2], lamps[i])) i += 1 # If there are no lamps to cover the next gap if not heap: return -1 # Choose the lamp that ends the furthest within the current choices and increment total power usage by its power min_power, best_lamp = heapq.heappop(heap) current_end = best_lamp[1] total_power += best_lamp[2] # If we\'ve covered the entire length of the street, return the total power usage if current_end >= l: return total_power return -1"},{"question":"You are given a list of integers representing the heights of people standing in a queue. The heights are given in the order they appear in the queue. Your task is to remove the people who are \\"out of order\\" in terms of height, meaning each remaining person must be at least as tall as all the people before them in the queue. After making the necessary removals, return the list of heights of people who remain in the queue. Example 1: Input: heights = [5, 3, 4, 6, 7, 2, 5] Output: [5, 6, 7] Explanation: Removing 3 (less than 5), 4 (less than 5), and 2 (less than 7) results in the people with heights [5, 6, 7] standing in the queue. Example 2: Input: heights = [1, 2, 2, 3, 1, 4] Output: [1, 2, 2, 3, 4] Explanation: Removing 1 (less than 3) results in the people with heights [1, 2, 2, 3, 4] standing in the queue. Your Task: You don\'t need to read input or print anything. Complete the function orderlyQueue() which takes a list of integers \\"heights\\" as input and returns a list of integers representing the heights of the people remaining in the queue after the removals. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= length of heights <= 10^5 1 <= heights[i] <= 10^3","solution":"def orderlyQueue(heights): Returns a list of heights of the people remaining in the queue after removals. Each remaining person must be at least as tall as all the people before them in the queue. if not heights: return [] result = [heights[0]] for height in heights[1:]: if height >= result[-1]: result.append(height) return result"},{"question":"You are given a square matrix of integers. Your task is to check if this matrix is symmetric around the main diagonal. A matrix is said to be symmetric if the element at ith row and jth column is equal to the element at jth row and ith column. -----Input----- The first line contains a single integer T, denoting the number of test cases. Each test case starts with an integer N, denoting the size of the matrix. The next N lines contain N integers each, representing the elements of the matrix. -----Output----- For each test case, output a single line containing the string \\"YES\\" (without quotes) if the matrix is symmetric, or \\"NO\\" (without quotes) otherwise. -----Constraints----- - Subtask 1 (20 points): 1 ≤ T ≤ 10, 1 ≤ N ≤ 10 - Subtask 2 (80 points): 1 ≤ T ≤ 100, 1 ≤ N ≤ 100 -----Example----- Input: 2 3 1 2 3 2 4 5 3 5 6 2 1 0 2 1 Output: YES NO -----Explanation----- Test case 1: The matrix is: 1 2 3 2 4 5 3 5 6 This is symmetric because the element at (i, j) is equal to the element at (j, i) for all i, j. Test case 2: The matrix is: 1 0 2 1 This is not symmetric because the element at (1, 2) is 0 and the element at (2, 1) is 2, which are not equal.","solution":"def is_symmetric(matrix, n): Check if a given n x n matrix is symmetric. Args: matrix : list[list[int]] : The n x n matrix. n : int : The dimension of the matrix. Returns: str : \\"YES\\" if the matrix is symmetric. \\"NO\\" otherwise. for i in range(n): for j in range(i + 1, n): if matrix[i][j] != matrix[j][i]: return \\"NO\\" return \\"YES\\" def check_matrices(test_cases): Process multiple test cases to determine if matrices are symmetric. Args: test_cases : list[tuple[int, list[list[int]]]] : A list of test cases, each consisting of the size of the matrix and the matrix itself. Returns: list[str] : A list containing \\"YES\\" or \\"NO\\" for each test case. results = [] for n, matrix in test_cases: results.append(is_symmetric(matrix, n)) return results"},{"question":"Sasha loves working with graphs, especially trees. She likes to solve problems that involve finding the diameter of a tree. The diameter of a tree is the length of the longest path between any two nodes in the tree. The length of a path is defined as the number of edges in the path. Sasha has a tree with `n` nodes. The tree is given in the form of `n-1` edges where each edge is an undirected connection between two nodes. You need to help Sasha find the diameter of the tree. Input - The first line of input contains a single integer `n` (2 ≤ n ≤ 100000), the number of nodes in the tree. - Each of the next `n-1` lines contains two space-separated integers `u` and `v` (1 ≤ u, v ≤ n), representing an edge between nodes `u` and `v`. Output - Output a single integer, the diameter of the tree. Example Input 5 1 2 1 3 3 4 3 5 Output 3 Note In the example, the longest path is from node 2 to node 4 (or node 2 to node 5) with a path length of 3.","solution":"from collections import deque, defaultdict def tree_diameter(n, edges): if n == 1: return 0 adj_list = defaultdict(list) for u, v in edges: adj_list[u].append(v) adj_list[v].append(u) def bfs(start_node): visited = [-1] * (n + 1) queue = deque([start_node]) visited[start_node] = 0 farthest_node = start_node while queue: current = queue.popleft() for neighbor in adj_list[current]: if visited[neighbor] == -1: visited[neighbor] = visited[current] + 1 queue.append(neighbor) farthest_node = neighbor return farthest_node, visited[farthest_node] # Step 1: Find the farthest node from any node (e.g., node 1) node1, _ = bfs(1) # Step 2: Find the farthest node from node1 node2, diameter = bfs(node1) # Return the final diameter return diameter"},{"question":"A number is called a \\"jumping number\\" if all adjacent digits in it differ by 1. For example, 123 is a jumping number because the difference between 1 and 2 is 1, and the difference between 2 and 3 is also 1. Given an integer N, write a program to find all jumping numbers less than or equal to N. Input: - The first line contains an integer T which represents the number of test cases. - The next T lines each contain an integer N. Output: - For each test case, print all jumping numbers less than or equal to N in increasing order in a single line. Each result should be on a new line. Sample Input: 2 10 50 Sample Output: 0 1 2 3 4 5 6 7 8 9 10 0 1 2 3 4 5 6 7 8 9 10 12 21 23 32 34 43 45 Explanation: For N=10, the jumping numbers from 0 to 10 are all single-digit numbers along with 10 itself. For N=50, in addition to 0 to 10, we also have 12, 21, 23, 32, 34, 43, and 45 which are all valid jumping numbers within the range. These numbers differ by 1 between their adjacent digits and are less than or equal to 50.","solution":"def find_jumping_numbers(N): This function returns a list of all jumping numbers less than or equal to N. if N < 0: return [] result = [] def is_jumping_number(num): num_str = str(num) for i in range(1, len(num_str)): if abs(int(num_str[i]) - int(num_str[i-1])) != 1: return False return True for num in range(N + 1): if is_jumping_number(num): result.append(num) return result def process_input(T, test_cases): For each test case, print all jumping numbers less than or equal to N. results = [] for N in test_cases: results.append(find_jumping_numbers(N)) return results"},{"question":"You are given a string, and you need to determine the length of the longest substring that consists of the same character repeated. Write a function that takes a single string as an argument and returns an integer representing the length of the longest substring where all characters are the same. -----Input----- A single string s (1 le |s| le 10^5) consisting of lowercase Latin letters. -----Output----- Print a single integer — the length of the longest substring with all characters the same. -----Examples----- Input \\"aaabbbaaa\\" Output 3 Input \\"abcd\\" Output 1","solution":"def longest_repeated_substring(s): Returns the length of the longest substring consisting of the same character. if not s: return 0 max_len = 1 current_len = 1 for i in range(1, len(s)): if s[i] == s[i-1]: current_len += 1 else: max_len = max(max_len, current_len) current_len = 1 max_len = max(max_len, current_len) # check for the last sequence return max_len"},{"question":"Given two integers n and k, you need to rotate the digits of the integer n by k positions in a circular manner. Rotation by k positions means that the right-most k digits are moved to the beginning of the number. Example 1: Input: n = 12345 k = 2 Output: 45123 Explanation: Moving the last 2 digits (45) to the beginning results in 45123. Example 2: Input: n = 98765 k = 3 Output: 76598 Explanation: Moving the last 3 digits (765) to the beginning results in 76598. Your Task: You don\'t need to read input or print anything. Your task is to complete the function rotate_digits(n, k) which takes two integers n and k as input parameters and returns the rotated integer as an output. Expected Time Complexity: O(log n) Expected Auxiliary Space: O(log n) Constraints: 1 <= n <= 10^9 1 <= k <= number of digits in n","solution":"def rotate_digits(n, k): Rotates the digits of the integer n by k positions in a circular manner. Parameters: n (int): The integer whose digits are to be rotated. k (int): The number of positions to rotate the digits. Returns: int: The integer after rotating the digits. str_n = str(n) length = len(str_n) # Ensure k is in the range of the length of the number k = k % length if k == 0: return n return int(str_n[-k:] + str_n[:-k])"},{"question":"A software company is developing a new scheduling feature for their application. They need to determine the optimal ways to schedule tasks so that all tasks can be completed in the shortest time possible. Each task can only be started after its dependencies are completed. The tasks are represented as a directed graph where each node is a task, and an edge from task u to task v means that task u must be completed before task v can start. You are asked to find the minimum time to complete all tasks, given that each task takes exactly 1 unit of time to complete. -----Input----- The first line contains two integers n and m (1 leq n, m leq 2 cdot 10^5) - the number of tasks and the number of dependencies. Each of the next m lines contains two integers u and v (1 leq u, v leq n) describing a dependency, meaning task u must be completed before task v. It is guaranteed that the input describes a Directed Acyclic Graph (DAG). -----Output----- Output a single integer - the minimum time needed to complete all tasks. -----Examples----- Input 5 4 1 2 1 3 3 4 2 5 Output 3 Input 4 3 1 2 1 3 2 4 Output 3 -----Note----- In the first example, an optimal way to complete the tasks is: - Complete task 1 in time unit 1. - Complete tasks 2 and 3 in time unit 2 (after task 1 is done). - Complete tasks 4 and 5 in time unit 3 (after tasks 3 and 2 are done, respectively). In the second example, an optimal way to complete the tasks is: - Complete task 1 in time unit 1. - Complete tasks 2 and 3 in time unit 2 (after task 1 is done). - Complete task 4 in time unit 3 (after task 2 is done).","solution":"from collections import deque, defaultdict def min_time_to_complete_tasks(n, m, dependencies): # Initialize graph and in-degree count graph = defaultdict(list) in_degree = [0] * (n+1) # Build the graph and update in-degree count for u, v in dependencies: graph[u].append(v) in_degree[v] += 1 # Queue to perform topological sort and array to store the minimum time required queue = deque() min_time = [0] * (n+1) # Initialize the queue with tasks that have no dependencies for i in range(1, n+1): if in_degree[i] == 0: queue.append(i) min_time[i] = 1 # Topological sort and calculate the minimum time while queue: current_task = queue.popleft() for neighbor in graph[current_task]: in_degree[neighbor] -= 1 # Once all dependencies of the neighbor are satisfied, add it to the queue if in_degree[neighbor] == 0: queue.append(neighbor) min_time[neighbor] = min_time[current_task] + 1 # The answer is the maximum of min_time array return max(min_time) # Example of usage n = 5 m = 4 dependencies = [(1, 2), (1, 3), (3, 4), (2, 5)] print(min_time_to_complete_tasks(n, m, dependencies)) # Output: 3"},{"question":"A small town is organizing a summer festival, and they have planned many events over several days. Each event has a specific start and end time. Some events might overlap, so a participant cannot attend overlapping events. The organizers want to maximize the number of events a participant can attend without any overlaps. You are tasked to help the organizers by developing a program that determines the maximum number of non-overlapping events a participant can attend. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of events. The following n lines each contain two space-separated integers s_i and e_i (0 ≤ s_i < e_i ≤ 1000), representing the start and end times of an event. Output Output the maximum number of non-overlapping events a participant can attend. Examples Input 5 1 4 2 3 3 5 7 8 5 6 Output 4 Input 3 1 2 2 4 3 5 Output 2","solution":"def max_non_overlapping_events(n, events): Given a number of events and their start and end times, return the maximum number of non-overlapping events a participant can attend. :param n: Integer, number of events :param events: List of tuples, where each tuple contains the start and end time of an event :return: Integer, maximum number of non-overlapping events # Sort events based on their end times sorted_events = sorted(events, key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = 0 # Iterate through the sorted events for start, end in sorted_events: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"To help Chef with his cooking schedule, you need to write a program to calculate the minimum number of hours required to cook all the dishes given the following constraints: 1. Chef can cook only one dish at a time. 2. Each dish takes a specific amount of time to cook. 3. Chef can take breaks whenever he wants, but his total cooking time must be calculated excluding break time. You are given an array where each element represents the cooking time for a single dish. Your task is to compute the total minimum cooking time excluding breaks. -----Input:----- - The first line contains an integer T, the number of test cases. - The first line of each test case contains an integer N, the number of dishes. - The second line of each test case contains N integers, where the i-th integer represents the cooking time of the i-th dish. -----Output:----- For each test case, output a single integer, the minimum number of hours required to cook all the dishes. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^5 - 1 leq cooking time for each dish leq 1000 -----Sample Input:----- 2 3 5 10 3 4 2 3 7 8 -----Sample Output:----- 18 20","solution":"def total_cooking_time(test_cases): results = [] for case in test_cases: N = case[\'N\'] dishes = case[\'dishes\'] results.append(sum(dishes)) return results # Example of how you would use this function test_cases = [ {\'N\': 3, \'dishes\': [5, 10, 3]}, {\'N\': 4, \'dishes\': [2, 3, 7, 8]} ] print(total_cooking_time(test_cases)) # Output: [18, 20]"},{"question":"In a rectangular grid world, certain cells are blocked and you need to navigate from one corner to the opposite corner using the shortest possible path. Each cell in the grid can either be free or blocked. You are allowed to move one cell up, down, left, or right at a time, but cannot move through blocked cells. Write a function `shortest_path(grid: List[List[int]]) -> int` that takes as input a 2D list representing the grid, where `0` represents a free cell and `1` represents a blocked cell. Your function should return the length of the shortest path from the top-left corner to the bottom-right corner of the grid, or `-1` if no such path exists. You should assume that the grid is a non-empty rectangular grid of dimensions m x n, where `1 <= m, n <= 1000`. ----- Input ----- A rectangular grid represented as a 2D list of integers where each integer is either `0` (free) or `1` (blocked). ----- Output ----- An integer representing the length of the shortest path from the top-left corner to the bottom-right corner, or `-1` if no such path exists. ----- Example ----- Input: [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0] ] Output: 7 Input: [ [0, 1], [1, 0] ] Output: -1 ----- Note ----- In the first example, the shortest path from the top-left corner to the bottom-right corner has a length of 7. The path is: (0,0) -> (0,1) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (3,3). In the second example, there is no possible path from the top-left corner to the bottom-right corner, hence the output is -1.","solution":"from collections import deque from typing import List def shortest_path(grid: List[List[int]]) -> int: Returns the length of the shortest path from the top-left corner to the bottom-right corner in a grid. If no such path exists, returns -1. # Check if the starting or ending point is blocked if not grid or grid[0][0] == 1 or grid[-1][-1] == 1: return -1 m, n = len(grid), len(grid[0]) directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] # BFS initialization queue = deque([(0, 0, 1)]) # (row, col, step_count) visited = set((0, 0)) while queue: r, c, step = queue.popleft() # If we reach the bottom-right corner if r == m - 1 and c == n - 1: return step for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and grid[nr][nc] == 0 and (nr, nc) not in visited: visited.add((nr, nc)) queue.append((nr, nc, step + 1)) return -1"},{"question":"You are given an array B of integers of size M. You are given Q queries each of which is represented by two integers L, R. For each query, you are to find the sum of elements in the subarray from index L to index R (inclusive) and determine if the sum is an even number or an odd number. ------ Input ------ First line of input contains an integer T denoting number of test cases. For each test case, the first line will contain two space separated integers M, Q. Next line contains M space separated integers denoting array B. For the next Q lines, each line will contain a query denoted by two space separated integers L, R. ------ Output ------ For each query, print \\"EVEN\\" if the sum of the subarray is even; otherwise, print \\"ODD\\". ------ Constraints ------ Subtask #1: 50 points 1 ≤ T, M ≤ 100, 1 ≤ Q ≤ M, 1 ≤ B[i] ≤ 10^{3} 1 ≤ L ≤ R ≤ M Subtask #2: 50 points 1 ≤ T, M ≤ 10^5, 1 ≤ Q ≤ 10^5, 1 ≤ B[i] ≤ 10^{3} 1 ≤ L ≤ R ≤ M Sum of M multiplied by Q over all the test cases will be less than or equal to 10^{6}. ----- Sample Input 1 ------ 1 5 3 4 7 2 9 3 1 3 2 5 1 5 ----- Sample Output 1 ------ EVEN ODD ODD ----- Explanation 1 ------ Test case 1: The given array is [4, 7, 2, 9, 3]. - Query 1: The subarray from index 1 to 3 is [4, 7, 2]. The sum is 13, which is odd. - Query 2: The subarray from index 2 to 5 is [7, 2, 9, 3]. The sum is 21, which is odd. - Query 3: The subarray from index 1 to 5 is [4, 7, 2, 9, 3]. The sum is 25, which is odd.","solution":"def sum_subarray_even_odd(test_cases): results = [] for case in test_cases: M, Q, B, queries = case prefix_sum = [0] * (M + 1) # Calculate prefix sums for i in range(M): prefix_sum[i + 1] = prefix_sum[i] + B[i] # Process each query to determine if the sum is even or odd for L, R in queries: subarray_sum = prefix_sum[R] - prefix_sum[L - 1] if subarray_sum % 2 == 0: results.append(\'EVEN\') else: results.append(\'ODD\') return results"},{"question":"The citizens of the fictional country Codistan use a unique system to measure distances, which consists of two elements: movement instructions \'L\' and \'R\' representing left and right movements respectively. They also use two fictional characters, a Magician and a Warrior, who traverse these instructions in a particular manner. # Rules: - The Magician can swap the segments \\"RL\\" to \\"LR\\". - The Warrior can only follow the instructions without any modification. Given the arrangement of instructions, determine the minimum number of swaps needed by the Magician to allow the Warrior to follow the instructions without encountering any \\"RL\\" segments. -----Input----- The first line of input contains an integer N, the number of instructions. The second line of input contains a string of length N consisting of characters \'L\' and \'R\'. -----Output----- The first and only line of output must contain the minimum number of swaps needed. -----Examples----- Sample Input 1: 7 LRLLRRL Sample Output 1: 2 Sample Input 2: 5 RRLLL Sample Output 2: 1","solution":"def count_minimum_swaps(N, instructions): count_rl = 0 for i in range(N - 1): if instructions[i] == \'R\' and instructions[i + 1] == \'L\': count_rl += 1 return count_rl"},{"question":"Write a function called `count_equal_pairs` that takes a list of integers as input and returns the number of pairs `(i, j)` such that `i < j` and `arr[i] == arr[j]`. Example ``` count_equal_pairs([1, 2, 3, 1, 1, 3, 3]) -> 4 ``` This is because there are 4 pairs of equal numbers: (1, 4), (1, 5), (3, 6), and (3, 6). Notes - The list can be empty, in which case the function should return 0. - The elements of the list will be non-negative integers. - The length of the list will not exceed 100,000. Write a function signature in Python: ```python def count_equal_pairs(arr: List[int]) -> int: # your code here ```","solution":"from typing import List def count_equal_pairs(arr: List[int]) -> int: Returns the number of pairs (i, j) such that i < j and arr[i] == arr[j]. count = 0 value_to_indices = {} for idx, num in enumerate(arr): if num in value_to_indices: count += len(value_to_indices[num]) value_to_indices[num].append(idx) else: value_to_indices[num] = [idx] return count"},{"question":"You are tasked with managing and processing several stock market transactions. The goal is to execute a series of operations on an array representing the stock prices of a company over several days. More specifically, you have an array `prices` where `prices[i]` is the price of the stock on the i-th day. You need to handle a series of operations to either update the stock price for a specific day or calculate the maximum stock price within a given range of days. For each query of the second type, you must print the maximum stock price within the specified range of days. -----Input----- The first line contains two space-separated integers `n` and `m` (1 ≤ n, m ≤ 10^5) — the number of days and the number of queries, respectively. The second line contains an array of integers `prices_1, prices_2, ..., prices_n` (1 ≤ prices_i ≤ 10^9), representing the stock prices over `n` days. The next `m` lines contain the descriptions of the queries. Each query has an integer `t_i` (1 ≤ t_i ≤ 2) indicating the type of the query. If `t_i = 1`, the query means updating the price for a specific day, followed by two integers `x_i` and `v_i` (1 ≤ x_i ≤ n, 1 ≤ v_i ≤ 10^9) — the day to be updated (1-based index) and the new price, respectively. If `t_i = 2`, the query means finding the maximum price within a range of days, followed by two integers `x_i` and `y_i` (1 ≤ x_i ≤ y_i ≤ n) — the start and end days (both inclusive) for the range. It is guaranteed that all queries are correct and the given ranges are within the bounds of the array. -----Output----- For each query of the second type, print the result on a single line — the maximum stock price within the specified range. -----Examples----- Input 6 5 100 200 150 170 180 110 2 2 4 1 5 130 2 1 5 1 4 220 2 3 6 Output 200 200 220","solution":"def process_transactions(n, m, prices, queries): Processes stock price update and max price queries. Parameters: n (int): Number of days. m (int): Number of queries. prices (list of int): Stock prices over n days. queries (list of tuples): List of queries. Returns: list of int: Results for max price queries. results = [] for query in queries: t = query[0] if t == 1: _, x, v = query prices[x - 1] = v elif t == 2: _, x, y = query results.append(max(prices[x - 1 : y])) return results"},{"question":"You are organizing a programming competition and want to automate the process of generating unique participant IDs. Each participant will have an ID that consists of their last name followed by a unique number. For instance, if the last names are `Smith`, `Johnson`, and `Smith` again, their corresponding participant IDs should be `Smith1`, `Johnson1`, and `Smith2`. Implement a function that takes a list of participant last names and generates their unique IDs based on the rule stated above. -----Input----- The input consists of: - A single integer n (1 ≤ n ≤ 10^5), the number of participants. - A list of n strings where each string is a last name of a participant. -----Output----- The function should output n strings, each representing a unique participant ID in the order of input processing. -----Examples----- Input 4 Lee Wang Kim Lee Output Lee1 Wang1 Kim1 Lee2 Input 6 Brown Taylor Smith Brown Taylor Brown Output Brown1 Taylor1 Smith1 Brown2 Taylor2 Brown3 -----Note----- For the first example, the IDs are: - The first `Lee` becomes `Lee1`. - `Wang` becomes `Wang1`. - `Kim` becomes `Kim1`. - The second `Lee` becomes `Lee2`. For the second example, the IDs are: - The first `Brown` becomes `Brown1`. - `Taylor` becomes `Taylor1`. - `Smith` becomes `Smith1`. - The second `Brown` becomes `Brown2`. - The second `Taylor` becomes `Taylor2`. - The third `Brown` becomes `Brown3`. The function should handle each last name in the order it appears in the list and ensure all IDs are unique.","solution":"def generate_participant_ids(n, last_names): Generates unique participant IDs based on their last names and order of appearance. Parameters: n (int): The number of participants. last_names (list of str): A list of last names. Returns: list of str: A list of unique participant IDs. name_count = {} participant_ids = [] for last_name in last_names: if last_name in name_count: name_count[last_name] += 1 else: name_count[last_name] = 1 participant_ids.append(f\\"{last_name}{name_count[last_name]}\\") return participant_ids"},{"question":"Hannah loves playing with numbers and recently, she discovered that some numbers have the interesting property of being thriving numbers. A number is considered a thriving number if it is divisible by the sum of its digits. For instance, the number 18 is a thriving number because 18 is divisible by 1 + 8 = 9. Help Hannah by writing a function that checks if a given number is a thriving number or not. Input: An integer `n` where `1 <= n <= 10^9`. Output: Print \\"Yes\\" if the number `n` is a thriving number. Otherwise, print \\"No\\". Function Signature: ```python def is_thriving_number(n: int) -> str: pass ``` Examples: Input: 18 Output: Yes Input: 19 Output: No Input: 21 Output: Yes Input: 37 Output: No","solution":"def is_thriving_number(n: int) -> str: Returns \\"Yes\\" if the number n is a thriving number, otherwise returns \\"No\\". A number is thriving if it is divisible by the sum of its digits. sum_of_digits = sum(int(digit) for digit in str(n)) if n % sum_of_digits == 0: return \\"Yes\\" else: return \\"No\\""},{"question":"You are given a number N. You need to construct a list of length N, where each element is a positive integer and the sum of the reciprocals of these integers equals 1. Your task is to check if such a list can be constructed. Example 1: Input: N = 1 Output: No Explanation: It is impossible for a single positive integer to have a reciprocal sum of 1. Example 2: Input: N = 2 Output: Yes Explanation: The list [2, 2] will have reciprocals sum: 1/2 + 1/2 = 1. Example 3: Input: N = 4 Output: Yes Explanation: The list [4, 4, 4, 4] will have reciprocals sum: 1/4 + 1/4 + 1/4 + 1/4 = 1. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `reciprocalList` which takes an integer N as input and returns \\"Yes\\" (without quotes) if it is possible to construct such a list, and \\"No\\" if it is not possible. Expected Time Complexity: O(1) Expected Auxiliary Space: O(1) CONSTRAINTS 1 ≤ N ≤ 10^6","solution":"def reciprocalList(N): This function checks if it\'s possible to construct a list of positive integers of length N such that the sum of the reciprocals of these integers equals 1. if N > 1: return \\"Yes\\" else: return \\"No\\""},{"question":"Alex is working on a coding project involving nested sequences. He starts with a sequence of nested integer ranges and performs multiple operations over a series of steps. The operations are as follows: - Add a new range to the sequence. - Check if a specific index falls within any of the existing ranges. - Merge two different sets of ranges, preserving the order. Your task is to simulate these operations and provide the required outputs. -----Input----- The first line of input contains the integer M (1 leq M leq 200000), the number of operations to be performed. The next M lines describe the operations in one of the following formats: - add l r: Adds a new range [l, r] to the sequence. - check idx: Checks if the index idx is within any of the existing ranges. - merge v w: Merges the sequence of ranges denoted by v into the sequence denoted by w. The integers l, r, idx, v, and w will always be non-negative, and r will always be greater than or equal to l. -----Output----- For each check operation, output \\"Yes\\" if the index is within any existing range and \\"No\\" otherwise. -----Examples----- Sample Input: 7 add 1 5 add 10 15 check 3 check 6 merge 0 1 check 12 check 10 Sample Output: Yes No Yes Yes Note: The first two operations add ranges [1, 5] and [10, 15]. The next two operations check if 3 and 6 are within any of these ranges, resulting in \\"Yes\\" and \\"No\\" respectively. The merge operation then combines these two sets into a single sequence. The final two checks determine if 12 and 10 are within the merged set, yielding \\"Yes\\" in both cases.","solution":"class NestedSequence: def __init__(self): self.sequences = [] self.range_list = [] def add_range(self, left, right): self.range_list.append((left, right)) def check_index(self, idx): for l, r in self.range_list: if l <= idx <= r: return \\"Yes\\" return \\"No\\" def merge_sequences(self, v, w): # Ensure we do not go out of bounds if v < len(self.sequences) and w < len(self.sequences): self.sequences[v].extend(self.sequences[w]) self.sequences[v].sort() # Ensure order is preserved self.sequences[w] = [] # Clear merged sequence def add_operation(self, operation): parts = operation.split() if parts[0] == \\"add\\": l, r = int(parts[1]), int(parts[2]) self.add_range(l, r) elif parts[0] == \\"check\\": idx = int(parts[1]) return self.check_index(idx) elif parts[0] == \\"merge\\": v, w = int(parts[1]), int(parts[2]) self.merge_sequences(v, w) def process_operations(operations): nested_seq = NestedSequence() results = [] for op in operations: result = nested_seq.add_operation(op) if result is not None: results.append(result) return results"},{"question":"Create a function that receives a string of words separated by spaces and returns the same string but with each word\'s first letter capitalized. Make sure the function handles multiple spaces between words and trims any leading or trailing spaces. Example: - Input: \\" hello world this is a test \\" - Output: \\"Hello World This Is A Test\\"","solution":"def capitalize_words(s): Capitalizes the first letter of each word in a string. Handles multiple spaces and trims leading/trailing spaces. # Split string into words based on whitespace and filter out empty words words = filter(None, s.split(\' \')) # Capitalize each word and join with a single space capitalized_words = [word.capitalize() for word in words] return \' \'.join(capitalized_words)"},{"question":"Given a binary tree, write a function that returns the sum of all nodes at a given depth ‘d’. Depth of the root node is 0. Example 1: Input: 1 / 2 3 / / 4 5 6 7 d = 2 Output: 22 Explanation: Nodes at depth 2 are 4, 5, 6, and 7. Their sum is 4 + 5 + 6 + 7 = 22. Example 2: Input: 1 / 2 3 / 4 5 d = 1 Output: 5 Explanation: Nodes at depth 1 are 2 and 3. Their sum is 2 + 3 = 5. Your Task: Your task is to complete the function sumAtDepth() which takes the root of the binary tree and the integer depth ‘d’ as inputs and returns the sum of nodes at that depth. Expected Time Complexity: O(N) Expected Auxiliary Space: O(W) where W is the maximum width of the tree at any level. Constraints: 1 ≤ Number of nodes ≤ 10^5 1 ≤ Node values ≤ 10^5 0 ≤ d ≤ tree height","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def sum_at_depth(root, d): Returns the sum of all nodes at a given depth \'d\'. if not root: return 0 current_level = [root] current_depth = 0 while current_level: if current_depth == d: return sum(node.val for node in current_level) next_level = [] for node in current_level: if node.left: next_level.append(node.left) if node.right: next_level.append(node.right) current_level = next_level current_depth += 1 return 0"},{"question":"You are given a string s consisting of lowercase English letters. You can perform the following operation any number of times: choose any two adjacent characters of the string that are the same and remove them from the string. For example, if the string is `abccba`, you can remove `cc` to obtain the string `abba`. Determine if it is possible to remove all characters from the string using the above operation. -----Input----- The first line contains one positive integer t (1 le t le 10^4) — the number of test cases. Then t test cases follow. Each test case consists of one string s (1 le text{length of } s le 10^5). The sum of lengths of all strings in the input does not exceed 10^6. -----Output----- For each test case, output on a separate line: YES, if it is possible to remove all characters from the string using the operation. NO, otherwise. The letters in the words YES and NO can be output in any case. -----Example----- Input 3 abba aaa abc Output YES NO NO","solution":"def can_remove_all(s): stack = [] for char in s: if stack and stack[-1] == char: stack.pop() else: stack.append(char) return \\"YES\\" if not stack else \\"NO\\" def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_remove_all(s)) return results"},{"question":"Liam and Noah are playing a game with arrays! The game\'s rules are as follows: The game starts with an array of n integers. Liam always moves first and they take alternating turns. The first player with no available move loses the game. During each move, the player selects any number of elements from the array (at least one) that share a greatest common divisor (GCD) greater than 1 and removes them from the array. Both players play optimally, meaning they will not make a move that causes them to lose the game if some better, winning move exists. Given the initial array, can you determine who will win the game? Input Format The first line contains an integer, mathrm{~t~}, denoting the number of games. The subsequent lines describe each game in the following format: The first line contains an integer, n, denoting the number of elements in the array. The second line contains n space-separated integers describing the initial array. Constraints 1leq t leq 100 1leq nleq10^6 1leq a_ileq10^9 The sum of n over all games is at most 10^{6}. Subtasks For 50% of the maximum score: The sum of n over all games is at most 10^3. 1leq a_ileq10^3 For 25% of the maximum score: 1leq n,gleq10 Output Format For each game, print the name of the winner on a new line (i.e., LIAM or NOAH). Sample Input 2 3 2 3 4 4 5 10 15 20 Sample Output NOAH LIAM Explanation Liam and Noah play the following two games: The array consists of n=3 integers. Liam goes first but realizes he cannot remove any subset of integers with a GCD greater than 1. Therefore, he loses the game. Winner is NOAH. The array consists of n=4 integers. Liam can remove the subset {5, 10, 15, 20} with a GCD of 5, so he makes this move and wins the game. Winner is LIAM.","solution":"from math import gcd from functools import reduce def calculate_gcd_of_list(num_list): return reduce(gcd, num_list) def determine_winner(t, games): results = [] for game in games: n, arr = game if len(arr) == 1: # When there is only one element, that single element\'s GCD is itself. results.append(\\"NOAH\\") continue overall_gcd = calculate_gcd_of_list(arr) if overall_gcd == 1: results.append(\\"NOAH\\") else: results.append(\\"LIAM\\") return results # This function is for taking the input in the required format def main(): import sys input = sys.stdin.read data = input().split() index = 0 t = int(data[index]) index += 1 games = [] for _ in range(t): n = int(data[index]) index += 1 array = list(map(int, data[index:index + n])) index += n games.append((n, array)) results = determine_winner(t, games) for result in results: print(result)"},{"question":"Write a function that takes a string and returns a new string where each character is repeated a number of times equal to its position in the original string (1-based index). # Explanation `expand_string(\\"abc\\")` => `\\"abbccc\\"` - The first character \'a\' is repeated once. - The second character \'b\' is repeated twice. - The third character \'c\' is repeated three times. `expand_string(\\"xyz\\")` => `\\"xyyzzz\\"` - The first character \'x\' is repeated once. - The second character \'y\' is repeated twice. - The third character \'z\' is repeated three times. # Examples ```python expand_string(\\"a\\") => \\"a\\" expand_string(\\"ab\\") => \\"abb\\" expand_string(\\"abcd\\") => \\"abbcccdddd\\" ``` **Note:** The input string will only contain alphabetic characters and will have at least one character.","solution":"def expand_string(s): Returns a new string where each character in the input string `s` is repeated a number of times equal to its position in the original string (1-based index). :param s: The input string :return: The expanded string expanded = \\"\\" for i, char in enumerate(s, start=1): expanded += char * i return expanded"},{"question":"Dr. Code has a machine that can only process binary strings of a certain length. He likes to have fun with permutations, so he decided to write a program that checks whether a given binary string is a permutation of some other string that his machine can process. Let\'s define some terms: - A binary string is a string that consists only of the characters \'0\' and \'1\'. - The machine can process a string S if S contains exactly k \'1\'s and (n-k) \'0\'s, where k is the number of \'1\'s in the string, and n is the total length of the string. Given a binary string T, your task is to determine if T is a permutation of some binary string that can be processed by the machine. Dr. Code guarantees that the machine can process binary strings of any length. ------ Input ------ The first line of input contains an integer Q, the number of binary strings to check. The next Q lines each contain one binary string T. ------ Output ------ For each binary string T, print \\"YES\\" (without quotes) if the string is a permutation of a string that the machine can process, otherwise print \\"NO\\" (without quotes). ------ Constraints ------ 1 ≤ Q ≤ 10^5 Each binary string T has length 1 ≤ |T| ≤ 10^5 The sum of the lengths of all strings across all queries does not exceed 10^6 ----- Sample Input 1 ------ 3 101 1001 1110 ----- Sample Output 1 ------ YES YES YES ----- Explanation 1 ------ For each string, the number of \'1\'s and \'0\'s counts as follows: - \\"101\\" has two \'1\'s and one \'0\', which is a permutation of \\"110\\" or \\"011\\" (or any arrangement of two \'1\'s and one \'0\'). - \\"1001\\" has two \'1\'s and two \'0\'s, which is a permutation of any string with the same counts, such as \\"1100.\\" - \\"1110\\" has three \'1\'s and one \'0\', which is a permutation of \\"1110\\" or any arrangement of three \'1\'s and one \'0\'. Thus, all provided strings can indeed be processed by the machine in some permutation.","solution":"def can_process(query, binaries): def check_permutation(binary_string): count_0 = binary_string.count(\'0\') count_1 = binary_string.count(\'1\') # The string itself is its permutation. return count_0 + count_1 == len(binary_string) results = [] for binary in binaries: if check_permutation(binary): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Karen is participating in a treasure hunt competition held in a grid farm of dimension M x N. Each cell in the grid either contains an obstacle or is empty. She is initially positioned at the top-left corner of the grid and needs to reach the bottom-right corner while collecting maximum treasures placed in some cells. Each step from one cell to another adds to her score based on the treasures present in the current cell. Karen can only move either to the right or down to reach the destination. If she encounters an obstacle, she cannot pass through it. Given the number of treasures in each cell and obstacles, find the maximum number of treasures Karen can collect from the start to the destination. If there is no possible way to reach the destination, return -1. -----Input format----- • Line 1: Two space-separated integers, M and N (1 ≤ M, N ≤ 1000). • Next M lines: Each line contains N space-separated integers, representing the treasure values or obstacles in the grid. An obstacle is represented by -1 and other cells contain non-negative integers representing treasures. -----Output format----- A single line with a single integer, the maximum number of treasures Karen can collect, or -1 if no path exists to the destination. -----Example----- Here is the sample input and output corresponding to the given example. -----Sample input----- 4 5 0 0 0 0 0 0 -1 0 0 10 0 -1 0 -1 0 0 0 0 0 1 -----Sample output----- 11 Note: Karen starts from the top-left corner (1,1) to the bottom-right corner (4,5) following the path with maximum treasures while avoiding obstacles. The path could be 0→0→0→0→10→1 collecting treasures 11 in total without hitting any obstacle.","solution":"def max_treasures(m, n, grid): # Initialize dp array, all set to -1 initially dp = [[-1] * n for _ in range(m)] # Start point initialization if grid[0][0] != -1: dp[0][0] = grid[0][0] # Fill the dp array for i in range(m): for j in range(n): if grid[i][j] == -1: dp[i][j] = -1 else: # Check from top (i-1, j) if i > 0 and dp[i-1][j] != -1: dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j]) # Check from left (i, j-1) if j > 0 and dp[i][j-1] != -1: dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j]) # Return result of bottom-right corner return dp[m-1][n-1]"},{"question":"You are designing a system for a warehouse to manage storage units. The warehouse is structured as a grid, where each cell in the grid represents a storage unit. Each storage unit can hold items with specific quantities. The warehouse management system needs to handle two types of operations: - Updating the quantity of items in a specified storage unit. - Querying the total quantity of items in a specified rectangular region of the warehouse. Input The first line contains two integers N and M — the dimensions of the warehouse grid (N rows and M columns), and an integer Q — the number of operations to handle. The next Q lines describe the operations. Each operation can be one of the following: 1. 1 x y Q — Update the storage unit at position (x, y) to have Q items. 2. 2 x1 y1 x2 y2 — Query the total quantity of items in the rectangular region whose top-left corner is (x1, y1) and bottom-right corner is (x2, y2). * 1 ≤ N, M ≤ 1000 * 1 ≤ x, y, x1, y1, x2, y2 ≤ N, M * 0 ≤ Q ≤ 10^5 * 1 ≤ number of operations ≤ 10^5 Output For each type 2 operation, output the total quantity of items in the specified rectangular region. Each answer should be in a separate line. Example Input 4 5 6 1 1 1 10 1 3 2 15 1 4 5 20 2 1 1 4 5 1 2 3 5 2 1 1 4 5 Output 45 50","solution":"class Warehouse: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0] * m for _ in range(n)] # initialize grid with 0 def update(self, x, y, q): self.grid[x - 1][y - 1] = q # update the grid at (x-1, y-1) def query(self, x1, y1, x2, y2): total = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): total += self.grid[i][j] return total def handle_operations(n, m, operations): warehouse = Warehouse(n, m) results = [] for op in operations: if op[0] == 1: _, x, y, q = op warehouse.update(x, y, q) elif op[0] == 2: _, x1, y1, x2, y2 = op result = warehouse.query(x1, y1, x2, y2) results.append(result) return results"},{"question":"You are given a string of lowercase English letters and an integer `K`. Find the length of the smallest substring of length at least `K` that contains exactly `K` distinct characters. If no such substring exists, return `-1`. # Input The input is a sequence of datasets. Each dataset is formatted as follows: ``` s K ``` The first line contains a string `s` (1 ≤ |s| ≤ 1000), which is the given string. The second line contains an integer `K` (1 ≤ K ≤ 26), which represents the number of distinct characters required. The input ends when a line containing a zero (\'0\') is encountered. # Output For each dataset, output the length of the smallest substring of length at least `K` that contains exactly `K` distinct characters. If no such substring exists, output `-1`. # Example Input ``` abcada 3 aaaaa 2 abac 5 0 ``` Output ``` 3 -1 -1 ``` # Explanation of Example In the first dataset, the smallest substring with exactly `K=3` distinct characters is \\"abc\\", which has a length of 3. In the second dataset, there is no substring of length at least `K=2` that has exactly 2 distinct characters, so the output is `-1`. In the third dataset, there is no substring of length at least `K=5` because the total number of characters in the string is less than 5. Therefore, the output is `-1`.","solution":"def smallest_substring_with_k_distinct(s, K): Finds the length of the smallest substring with exactly K distinct characters. :param s: String to analyze. :param K: Number of distinct characters required. :return: Length of the smallest substring containing exactly K distinct characters, or -1 if no such substring exists. if K > len(s): return -1 n = len(s) min_length = float(\'inf\') for i in range(n): distinct_characters = set() substring_length = 0 for j in range(i, n): distinct_characters.add(s[j]) substring_length += 1 if len(distinct_characters) == K: min_length = min(min_length, substring_length) break return min_length if min_length != float(\'inf\') else -1 def process_input(input_data): results = [] lines = input_data.strip().split(\'n\') index = 0 while index < len(lines): s = lines[index] if s == \'0\': break K = int(lines[index + 1]) result = smallest_substring_with_k_distinct(s, K) results.append(result) index += 2 return results"},{"question":"Given a list of non-negative integers, you are tasked with constructing a new list where each element at index `i` is the product of all the numbers in the original array except the one at `i`. Implement a function `productExceptSelf(nums)` that accomplishes this without using division and in O(n) time complexity. Example 1: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Example 2: Input: nums = [0, 1] Output: [1, 0] Note: - The length of the array will be in the range [1, 10^5]. - Each element in the array will be in the range [-30, 30]. - The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.","solution":"def productExceptSelf(nums): Returns an array where each element at index i is the product of all the numbers in the original array except the one at i. length = len(nums) # Initialize the answer array with 1 answer = [1] * length # Calculate prefix products prefix = 1 for i in range(length): answer[i] = prefix prefix *= nums[i] # Calculate suffix products and construct the result suffix = 1 for i in range(length - 1, -1, -1): answer[i] *= suffix suffix *= nums[i] return answer"},{"question":"You have been given an integer n representing the number of lines of a pattern. Your task is to print the pattern. Example 1: Input: 4 Output: 1 1 2 1 1 2 3 2 1 1 2 3 4 3 2 1 Your Task: You do not need to input anything. Complete the function printDiamond() which takes an integer n as the input parameter and prints the diamond pattern. Constraints: 1<= N <= 20","solution":"def printDiamond(n): for i in range(1, n + 1): print(\\" \\" * (n - i), end=\\"\\") for j in range(1, i + 1): print(j, end=\\" \\") for j in range(i - 1, 0, -1): print(j, end=\\" \\") print() # Example Usage # printDiamond(4)"},{"question":"You are given a list of n integers representing the heights of students in a class. Determine the maximum height difference between any two students in the list who stand adjacent to each other. Example 1: Input: heights = {1, 5, 9, 3, 7} Output: 9 Explanation: The maximum height difference is between the student with height 9 and the student with height 3. Example 2: Input: heights = {4, 4, 4, 4} Output: 0 Explanation: All students have the same height, so the maximum difference is 0. Your Task: You don\'t need to read or print anything. Your Task is to complete the function maxHeightDifference() which takes heights as an input parameter and returns the maximum height difference between any two adjacent students. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= n <= 10000 1 <= heights[i] <= 10^9","solution":"def maxHeightDifference(heights): Returns the maximum height difference between any two adjacent students. Parameters: heights (list): A list of integers representing the heights of students. Returns: int: The maximum height difference. max_diff = 0 for i in range(1, len(heights)): diff = abs(heights[i] - heights[i - 1]) if diff > max_diff: max_diff = diff return max_diff"},{"question":"You are given a city with n houses arranged in a straight line. Each house may or may not have a unique identification number. However, each house has a certain Wi-Fi signal strength associated with it, represented as a positive integer. The Wi-Fi signal of a house is propagated to its neighboring houses asymmetrically: it has a different range to the left (rL) and to the right (rR). The propagation of a signal from house i reaches up to (rL) houses to the left and (rR) houses to the right. Your task is to determine, for each house, the maximum Wi-Fi signal strength it can receive from any house in its reach (including its own signal strength). Formally, for each house i, you need to compute the maximum Wi-Fi signal strength from the set of houses ranging from max(1, i - rL) to min(n, i + rR). Write a program to compute the maximum Wi-Fi signal strength received by each house. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of houses. The second line contains n integers, where the i-th integer represents the Wi-Fi signal strength of the i-th house. The third line contains n integers, where the i-th integer represents the range rL_i (1 ≤ rL_i ≤ 100) of the i-th house\'s Wi-Fi signal to the left. The fourth line contains n integers, where the i-th integer represents the range rR_i (1 ≤ rR_i ≤ 100) of the i-th house\'s Wi-Fi signal to the right. -----Output----- Output n integers, where the i-th integer is the maximum Wi-Fi signal strength received by the i-th house. -----Examples----- Input 5 2 6 4 8 7 2 1 2 1 3 1 3 1 2 1 Output 6 8 8 8 8 Input 3 1 5 3 1 1 1 1 1 1 Output 5 5 5 Input 4 1 3 2 8 2 1 1 1 1 2 1 1 Output 3 8 8 8 -----Note----- In the first example, the maximum Wi-Fi signal strengths received by each house are: - House 1: can receive signals from houses 1, 2, and 3 with strengths [2, 6, 4], maximum is 6. - House 2: can receive signals from houses 1, 2, 3, 4, and 5 with strengths [2, 6, 4, 8, 7], maximum is 8. - House 3: can receive signals from houses 1, 2, 3, 4 with strengths [2, 6, 4, 8], maximum is 8. - House 4: can receive signals from houses 2, 3, 4, 5 with strengths [6, 4, 8, 7], maximum is 8. - House 5: can receive signals from houses 3, 4, 5 with strengths [4, 8, 7], maximum is 8. In the second example, every house falls within the range of maximum Wi-Fi signal strength of 5 from house 2. In the third example, house 4 has the strongest signal strength 8, which reaches houses 2, 3, and 4. House 1 receives its maximum signal strength 3 from house 2. The remaining houses all get the strongest signal of 8 from house 4.","solution":"def max_wifi_signal_strength(n, signal_strengths, ranges_left, ranges_right): max_strengths = [] for i in range(n): left_boundary = max(0, i - ranges_left[i]) right_boundary = min(n - 1, i + ranges_right[i]) max_strength = max(signal_strengths[left_boundary:right_boundary + 1]) max_strengths.append(max_strength) return max_strengths"},{"question":"Given a list of domino tiles represented as tuples where each tuple consists of two integers, (a, b), representing the two numbers on the tile, and another list of pairs of indices `swaps` where each pair (i, j) denotes a swap operation that can swap the i-th and j-th domino tiles in the list. Return the maximum number of consecutive domino tiles that can be formed after performing the allowed swaps. Two domino tiles (a, b) and (c, d) can be consecutive if b == c. Example 1: Input: dominoes = [(1, 2), (2, 3), (3, 4), (5, 1)], swaps = [(0, 3)] Output: 4 Example 2: Input: dominoes = [(1, 2), (2, 3), (4, 1)], swaps = [(0, 2), (1, 2)] Output: 3 Example 3: Input: dominoes = [(1, 3), (2, 3), (4, 5)], swaps = [] Output: 1 Constraints: - dominoes.length <= 100 - 0 <= a, b <= 6 - 1 <= swaps.length <= 200 - swaps[i].length == 2 - 0 <= i < j < dominoes.length","solution":"def max_consecutive_dominoes(dominoes, swaps): def dfs(idx, visited, dominoes): if idx in visited: return 0 visited.add(idx) count = 1 for i in range(len(dominoes)): if i not in visited and dominoes[idx][1] == dominoes[i][0]: count = max(count, 1 + dfs(i, visited, dominoes)) return count n = len(dominoes) max_length = 0 for swap in swaps: i, j = swap dominoes[i], dominoes[j] = dominoes[j], dominoes[i] for i in range(n): visited = set() max_length = max(max_length, dfs(i, visited, dominoes)) return max_length"},{"question":"Nina is participating in a unique marathon event where she has to collect energy points while running on a circular track. The track is divided into n sections arranged in a circle, and each section has a certain number of energy points. Nina can start running from any section, but she can only run continuously in one direction (clockwise or counterclockwise) until she completes a full circle and returns to her starting point. Nina wants to maximize her total energy points collected while running. Write a program that, given the energy points of each section in order, determines the maximum total energy points Nina can collect. Input The input will consist of multiple datasets, with each dataset given in the following format: n e1 e2 ... en Where: - n (1 ≤ n ≤ 100) is the number of sections on the track. - ei (1 ≤ ei ≤ 100) are the energy points at section i. The end of the input is indicated by a line containing a single zero. Output For each dataset, output a single integer representing the maximum total energy points Nina can collect by running continuously in one direction and completing a full circle. Example Input ``` 5 3 2 1 4 5 4 1 3 6 2 0 ``` Output ``` 15 12 ```","solution":"def max_energy_points(sections): Determines the maximum total energy points Nina can collect by running continuously in one direction and completing a full circle. Parameters: sections (list of int): The energy points at each section in order. Returns: int: The maximum total energy points. n = len(sections) if n == 0: return 0 # Clockwise max_clockwise = sum(sections) # Counterclockwise is the same as clockwise since it\'s a circular track return max_clockwise def parse_input(input_data): Parses the input data. Parameters: input_data (str): The input data as a string. Returns: list of list of int: A list containing lists of energy points for each dataset. lines = input_data.strip().split(\'n\') datasets = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break sections = list(map(int, lines[i + 1].strip().split())) datasets.append(sections) i += 2 return datasets def process_input(input_data): datasets = parse_input(input_data) results = [] for sections in datasets: results.append(max_energy_points(sections)) return results"},{"question":"In a distant kingdom, there is a peculiar form of communication using sequences of brackets. The wizard of the kingdom is trying to come up with all possible sequences of well-formed brackets of a given length `N`. A sequence of brackets is considered well-formed if it can be obtained by pairing every opening bracket \\"(\\" with a closing bracket \\")\\" in the correct order. For example, for `N=6`, a valid sequence would be `((()))`, while `())(` would not be valid. Your task is to help the wizard by counting the number of well-formed sequences of length `N`. Note that since a well-formed bracket sequence must be balanced, `N` must be an even number, or else the answer would be 0. INPUT: The first line contains the number of test cases `T`. Each test case contains a single even integer `N` which specifies the length of the bracket sequence. OUTPUT: For each test case, output the number of well-formed bracket sequences of length `N`. The output can be large, so take modulo 1000000007. Constraints: 1 ≤ T ≤ 100 0 ≤ N ≤ 1000 SAMPLE INPUT: 3 2 4 6 SAMPLE OUTPUT: 1 2 5 Explanation: For `N=2`, the only well-formed sequence is \\"()\\". For `N=4`, the possible well-formed sequences are \\"(())\\" and \\"()()\\". For `N=6`, the possible well-formed sequences are \\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", and \\"()()()\\".","solution":"MOD = 1000000007 def count_bracket_sequences(N): Returns the number of well-formed bracket sequences of length N. if N % 2 != 0: return 0 # Catalan number calculation C = [0] * (N//2 + 1) C[0] = 1 for i in range(1, N//2 + 1): C[i] = 0 for j in range(i): C[i] = (C[i] + C[j] * C[i - 1 - j]) % MOD return C[N//2] def solve(test_cases): results = [] for N in test_cases: results.append(count_bracket_sequences(N)) return results"},{"question":"You are given an array of n integers, each integer can be between 1 and m inclusive (1-based index). You are to perform q independent queries on this array. For each query, you are given two integers l and r and need to find the minimum possible maximum frequency of numbers in any contiguous subarray of the array that includes all indices from l to r. The frequency of a number in a subarray is the number of times it appears in that subarray. The maximum frequency of a subarray is the highest frequency of any number within that subarray. You need to output the result for each query. -----Input----- The first line of the input contains two integers n and m (1 le n, m le 2000) — the size of the array and the maximum value of the integers in the array. The second line contains n integers a_1, a_2, ..., a_n (1 le a_i le m) — the array elements. The third line contains one integer q (1 le q le 2000) — the number of queries. The next q lines each contain two integers l and r (1 le l le r le n) — indicating the range of indices for that query. -----Output----- For each query, print one integer — the minimum possible maximum frequency of numbers in any contiguous subarray of the array that includes all indices from l to r. -----Example----- Input 6 5 1 2 2 3 3 3 2 1 3 2 6 Output 2 2 -----Note----- In the first example, when considering the subarray a_1 to a_3, the possible maximum frequencies in any subarray containing the specified range (1, 2, 2) are minimized when we consider subarray (1, 2) = [1, 2] or (2, 2) = [2, 2]. In the second example, we need to consider the subarray from a_2 to a_6. Here, the possible maximum frequencies within any subarray containing the specified range can be minimized when considering the subarray (2, 6) = [2, 2, 3, 3, 3].","solution":"def find_min_possible_max_frequency(n, m, arr, queries): results = [] for l, r in queries: freq = {} for i in range(l-1, r): if arr[i] not in freq: freq[arr[i]] = 0 freq[arr[i]] += 1 max_freq = max(freq.values()) results.append(max_freq) return results"},{"question":"You are tasked with managing a warehouse where different items are stored, and orders come in for specific items. To keep track of the items, you use a simple but effective system that keeps records of items coming in and going out. Over the span of n days, either of the following two events can happen each day: 1) You may receive a shipment of an item with a specified quantity. You decide whether to store all of it, some of it, or none of it. 2) You may have a customer order an item with a specified quantity. If you have the item in stock, you fulfill the order completely. However, due to limited storage capacity, your warehouse can only manage up to k unique items at any given time. Your goal is to maximize the total units of items sold over the n days based on the list of daily events provided. Input The first line contains two integers n and k, denoting the number of days and the warehouse capacity respectively. Each of the next n lines contains the description of the event for that day. If a shipment arrives, it contains \\"receive\\" followed by a blank space, the item name (a string), and the quantity (an integer). If there is an order, it contains \\"order\\" followed by a blank space, the item name (a string), and the quantity (an integer). Output Output the maximum total units of items sold over the n days. Constraints 1 ≤ n ≤ 10000 1 ≤ k ≤ 100 1 ≤ quantity ≤ 1000 Example Input: 5 2 receive apple 100 receive banana 150 order apple 50 receive orange 200 order banana 100 Output: 150 Explanation You keep the \\"apple\\" shipment and sell 50 units, earning 50 units. Then you keep the \\"banana\\" shipment and sell 100 units, adding 100 units to the total. You do not keep the \\"orange\\" shipment since the warehouse capacity is 2 (and you are already storing 2 unique items: apple and banana). Total units sold = 50 + 100 = 150.","solution":"def maximize_units_sold(n, k, events): stock = {} total_sold = 0 for event in events: event_details = event.split() action = event_details[0] item = event_details[1] quantity = int(event_details[2]) if action == \\"receive\\": if len(stock) < k or item in stock: # Add shipment to stock if not overflowing capacity or already in stock if item in stock: stock[item] += quantity else: stock[item] = quantity elif action == \\"order\\": if item in stock and stock[item] > 0: # Fulfill the order with the available stock fulfill_quantity = min(quantity, stock[item]) total_sold += fulfill_quantity stock[item] -= fulfill_quantity if stock[item] == 0: del stock[item] # Remove item from stock if depleted return total_sold # Function for reading input and processing def process_input(): import sys input = sys.stdin.read data = input().split(\'n\') n, k = map(int, data[0].split()) events = data[1:n+1] return n, k, events"},{"question":"Sarah, a botany researcher, is studying a rare species of plant called \\"Glorium\\". She noticed that the Glorium plants grow in rows, and each plant at position i has a specific height represented as an integer in an array. Sarah wants to identify the longest contiguous subarray such that the difference between the maximum and minimum heights in this subarray does not exceed a given value K. Given an array `H` of positive integers representing the heights of plants in a row and an integer `K`, write a program to find the length of the longest contiguous subarray where the difference between the maximum and minimum heights is at most `K`. Input The input consists of multiple datasets. Each dataset is given in the following format: > N K > H1 H2 ... HN The first line contains two integers N (1 ≤ N ≤ 100,000) and K (0 ≤ K ≤ 10^9). The second line contains N integers H1, H2, ..., HN (1 ≤ Hi ≤ 10^9), representing the heights of the plants. The end of the input is indicated by a single line containing two zeros. Output For each dataset, output the length of the longest contiguous subarray on one line. The output must not contain extra blanks or line breaks. Sample Input ``` 5 2 1 3 2 2 4 6 3 1 5 2 3 2 1 3 0 10 10 10 0 0 ``` Sample Output ``` 4 4 3 ``` Explanation In the first dataset, the longest contiguous subarray where the difference between the maximum and minimum heights is at most 2 is [1, 3, 2, 2], and its length is 4. In the second dataset, the longest contiguous subarray satisfying the condition is [5, 2, 3, 2], also with a length of 4. In the third dataset, all heights are equal so the entire array is the longest contiguous subarray with a length of 3.","solution":"from collections import deque def longest_subarray_within_k(N, K, H): if N == 0: return 0 max_deque = deque() min_deque = deque() left = 0 max_length = 0 for right in range(N): while max_deque and H[max_deque[-1]] <= H[right]: max_deque.pop() while min_deque and H[min_deque[-1]] >= H[right]: min_deque.pop() max_deque.append(right) min_deque.append(right) while H[max_deque[0]] - H[min_deque[0]] > K: left += 1 if max_deque and max_deque[0] < left: max_deque.popleft() if min_deque and min_deque[0] < left: min_deque.popleft() max_length = max(max_length, right - left + 1) return max_length def process_multiple_datasets(input_data): results = [] datasets = input_data.strip().split(\'n\') i = 0 while i < len(datasets): N, K = map(int, datasets[i].split()) if N == 0 and K == 0: break H = list(map(int, datasets[i + 1].split())) results.append(longest_subarray_within_k(N, K, H)) i += 2 return results"},{"question":"Rohit recently received an encrypted message which he needs to decrypt. The message consists of a single string of lowercase alphabets. To decrypt the message, Rohit needs to identify all substrings that start and end with the same character and count them. ------ Input Format ------ - The first line of the input contains T - the number of test cases. Then the test cases follow. - Each test case contains a single string consisting of lowercase alphabets. ------ Output Format ------ For each test case, output an integer representing the number of substrings that start and end with the same character. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ |s| ≤ 100 ------ Sample Input 1 ------ 2 abcab aaa ------ Sample Output 1 ------ 7 6 ------ Explanation 1 ------ Test case-1: The substrings starting and ending with the same characters are: \\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"aba\\", \\"abcab\\". Test case-2: The substrings starting and ending with the same characters are: \\"a\\", \\"a\\", \\"a\\", \\"aa\\", \\"aa\\", \\"aaa\\".","solution":"def count_substrings_start_end_same_char(s): Returns the number of substrings that start and end with the same character. count = 0 n = len(s) # Traverse each character for i in range(n): for j in range(i, n): if s[i] == s[j]: count += 1 return count def process_test_cases(T, test_cases): Processes multiple test cases and returns the results in a list. results = [] for s in test_cases: result = count_substrings_start_end_same_char(s) results.append(result) return results"},{"question":"The city of Byteburg has recently implemented a new offline bus ticket system. Each bus stop in the city is numbered with a non-negative integer and provides tickets that can be collected by travelers. Travelers can pick up their journey from any bus stop and reach any other bus stop by taking a bus from one stop to another. The city has exactly N bus stops and M bus routes between them. You are given the list of bus routes, each described by a pair of bus stops. You need to determine if all bus stops are connected directly or indirectly by the routes provided. If they are not, you need to find how many additional routes must be added to make all the bus stops connected. Input The first line contains two positive integers N (1 ≤ N ≤ 100,000) and M (0 ≤ M ≤ 200,000) denoting the number of bus stops and the number of bus routes respectively. The next M lines each contain two integers u and v (0 ≤ u, v < N) describing a direct bus route between bus stop u and bus stop v. Output Output a single integer representing the minimum number of additional routes that must be added to make all the bus stops connected. Examples Input 5 3 0 1 1 2 3 4 Output 1 Input 4 2 0 1 2 3 Output 1 Input 6 0 Output 5 Note In the first sample, bus stops 0, 1, and 2 are connected together, and bus stops 3 and 4 are connected together. There is no route connecting these two sets. One additional route is required to connect all bus stops. In the second sample, bus stops 0, 1 are connected together and bus stops 2, 3 are connected together, so one additional route is needed to connect all bus stops. In the third sample, there are no bus routes initially, so to make all 6 bus stops connected, 5 additional routes are needed.","solution":"def find_connected_components(n, routes): Finds the connected components in the graph represented by the bus stops and routes from collections import defaultdict, deque # Create a graph as an adjacency list graph = defaultdict(list) for u, v in routes: graph[u].append(v) graph[v].append(u) visited = [False] * n component_count = 0 def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) for i in range(n): if not visited[i]: visited[i] = True bfs(i) component_count += 1 return component_count def min_additional_routes_to_connect(n, m, routes): Returns the minimum number of additional routes needed to connect all bus stops. if n == 1: return 0 # If there is only one bus stop, no additional routes needed component_count = find_connected_components(n, routes) # To connect `component_count` components, we need at least `component_count - 1` additional routes return component_count - 1"},{"question":"Bob is playing a game with strings. He has two strings, S1 and S2, of equal length. He wants to transform S1 into S2 by replacing characters. To make the game more interesting, he can only replace a character in S1 with the next character in the alphabet (i.e., replace \'a\' with \'b\', \'b\' with \'c\', ..., and \'z\' with \'a\'). Write a program that determines if Bob can transform S1 into S2 using these operations. ------- Input Format ------- - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two strings, S1 and S2, separated by a space. ------- Output Format ------- For each test case, output YES if Bob can transform S1 into S2 using the given operations, NO otherwise. The output is case-insensitive. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S1| = |S2| ≤ 1000 S1 and S2 will only contain lowercase English letters. ------ Sample Input 1 ------ 3 abc bcd xyz yza abc def ------ Sample Output 1 ------ YES YES NO ------ Explanation 1 ------ Test case 1: Bob can transform \'a\' to \'b\', \'b\' to \'c\', and \'c\' to \'d\'. Thus, \\"abc\\" can be transformed into \\"bcd\\". Test case 2: Bob can transform \'x\' to \'y\', \'y\' to \'z\', and \'z\' to \'a\'. Thus, \\"xyz\\" can be transformed into \\"yza\\". Test case 3: There is no way to transform \\"abc\\" into \\"def\\" using the defined operations.","solution":"def can_transform(S1, S2): Determines if S1 can be transformed into S2 using the given operations. Args: S1 (str): The original string. S2 (str): The target string. Returns: str: \\"YES\\" if S1 can be transformed into S2, \\"NO\\" otherwise. for i in range(len(S1)): if ((ord(S2[i]) - ord(S1[i])) % 26) != 1: return \\"NO\\" return \\"YES\\" def process_test_cases(T, test_cases): results = [] for S1, S2 in test_cases: results.append(can_transform(S1, S2)) return results"},{"question":"A sequence of integers is called \\"non-decreasing\\" if each element is not smaller than the previous one. Given an array of N integers, your task is to determine whether the given array is non-decreasing. ------ Input Format ------ - The first line of input contains a single integer N, the number of integers in the array. - The second line contains N space-separated integers, the elements of the array. ------ Output Format ------ Output \\"YES\\" if the array is non-decreasing, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ N ≤ 100 -10^3 ≤ text{Element} ≤ 10^3 ----- Sample Input 1 ------ 5 1 2 2 3 5 ----- Sample Output 1 ------ YES ----- Sample Input 2 ------ 4 1 3 2 4 ----- Sample Output 2 ------ NO ----- explanation 1 ------ Test case 1: The array [1, 2, 2, 3, 5] is non-decreasing because every element is greater than or equal to the previous one. Test case 2: The array [1, 3, 2, 4] is not non-decreasing because 2 is smaller than 3.","solution":"def is_non_decreasing(arr): Determines if the given array is non-decreasing. Args: arr (list of int): The array of integers. Returns: str: \\"YES\\" if the array is non-decreasing, otherwise \\"NO\\". for i in range(1, len(arr)): if arr[i] < arr[i-1]: return \\"NO\\" return \\"YES\\""},{"question":"**Task** You are tasked with writing a function that converts a list of time intervals into their complement intervals within a certain time range. This function will be useful for understanding the time periods that are not covered by any interval from a list of already scheduled intervals. **Input** - The input consists of a single line with an integer `n` (1 ≤ n ≤ 100) denoting the number of intervals, followed by `n` pairs of integers `a_i` and `b_i` (0 ≤ a_i < b_i ≤ 1440) where each pair represents an interval `[a_i, b_i)`. - All intervals are within a range from 0 to 1440, where 0 represents 00:00 (midnight) and 1440 represents 24:00 (midnight of the next day). **Output** - The output should be a list of intervals in the format `[start, end)` that complement the input intervals within the range from 0 to 1440. - Output intervals should be ordered based on their starting time. - If there are no complementary intervals (i.e., the given intervals cover the entire possible range), output \\"No free interval\\". **Example** _Input:_ ``` 3 0 100 150 300 1200 1440 ``` _Output:_ ``` [100, 150) [300, 1200) ``` _Input:_ ``` 1 0 1440 ``` _Output:_ ``` No free interval ``` **Note** - The intervals in the input are mutually exclusive and may not cover the entire range between 00:00 and 24:00. - The intervals in the output must be non-overlapping and span the entire range not covered by the input intervals. - Make sure to handle edge cases such as when the complementary intervals are at the boundaries (e.g., starting from 0 or ending at 1440).","solution":"def complement_intervals(n, intervals): Returns the complement of the given intervals within the range [0, 1440). If the entire range is covered, returns \\"No free interval\\". if n == 0: return [[0, 1440]] intervals.sort() result = [] current_start = 0 for start, end in intervals: if start > current_start: result.append([current_start, start]) current_start = max(current_start, end) if current_start < 1440: result.append([current_start, 1440]) if not result: return \\"No free interval\\" return result # Example usage # complement_intervals(3, [[0, 100], [150, 300], [1200, 1440]])"},{"question":"Samantha loves music and often collects records of her favorite songs. However, she finds it difficult to quickly locate her favorite records from the collection. To help her, you need to design an optimal retrieval system for her collection. Each music record is represented by a pair of attributes: 1. Song Name (a string consisting of lowercase letters) 2. Popularity Index (an integer between 1 and 10, inclusive) Samantha wants to be able to perform the following operations: 1. ADD a new record to the collection. 2. DELETE a record from the collection. 3. FIND the song with the highest popularity index. 4. PRINT all records in the collection sorted in lexicographical order by name. Implement a system that handles these operations efficiently. -----Input----- The first line of input contains an integer Q (1 leq Q leq 1000), the number of operations. The next Q lines contain one of the following operations: - \\"ADD name popularity\\", where `name` is a string of lowercase letters (up to 100 characters long), and `popularity` is an integer (1 to 10). - \\"DELETE name\\", where `name` is the song name to be deleted. - \\"FIND\\" - \\"PRINT\\" -----Output----- For each \\"FIND\\" operation, output the name and popularity of the song with the highest popularity index. If there are multiple such songs, return the one that is lexicographically smallest. For each \\"PRINT\\" operation, output the list of current records in lexicographical order. Each record should be printed in a new line in the format \\"name popularity\\". If a \\"DELETE\\" operation tries to remove a song that does not exist, or a \\"FIND\\" operation is performed when the collection is empty, output \\"NOT FOUND\\". -----Examples----- Sample Input 1: 8 ADD rockstar 5 ADD believer 8 FIND ADD shapeofyou 10 PRINT DELETE believer FIND PRINT Sample Output 1: believer 8 believer 8 rockstar 5 shapeofyou 10 shapeofyou 10","solution":"class MusicLibrary: def __init__(self): self.records = {} def add_record(self, name, popularity): self.records[name] = popularity def delete_record(self, name): if name in self.records: del self.records[name] def find_highest_popularity(self): if not self.records: return \\"NOT FOUND\\" max_popularity = max(self.records.values()) candidates = [name for name, pop in self.records.items() if pop == max_popularity] return min(candidates) + \\" \\" + str(max_popularity) def print_records(self): if not self.records: return \\"NOT FOUND\\" sorted_records = sorted(self.records.items()) return \\"n\\".join([f\\"{name} {popularity}\\" for name, popularity in sorted_records]) def process_operations(operations): library = MusicLibrary() results = [] for operation in operations: parts = operation.split() cmd = parts[0] if cmd == \\"ADD\\": name = parts[1] popularity = int(parts[2]) library.add_record(name, popularity) elif cmd == \\"DELETE\\": name = parts[1] library.delete_record(name) elif cmd == \\"FIND\\": results.append(library.find_highest_popularity()) elif cmd == \\"PRINT\\": results.append(library.print_records()) return results # Example usage leveraging the provided data def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') Q = int(data[0]) operations = data[1:] results = process_operations(operations) for result in results: print(result) if __name__ == \'__main__\': main()"},{"question":"Given a string s consisting of lowercase English letters. You need to reorganize the string such that no two adjacent characters are the same. If it is not possible to reorganize the string, return an empty string. Example 1: Input: s = \\"aab\\" Output: \\"aba\\" Explanation: \\"aba\\" is a valid rearrangement. Example 2: Input: s = \\"aaab\\" Output: \\"\\" Explanation: It is impossible to rearrange \\"aaab\\" such that no two adjacent characters are the same. Your Task: You don\'t need to read input or print anything. Your task is to complete the function reorganizeString() which takes the string s as input and returns the reorganized string, or an empty string if reorganization is not possible. Expected Time Complexity: O(n log n) Expected Auxiliary Space: O(n) Constraints: 1 ≤ |s| ≤ 10^5","solution":"from collections import Counter import heapq def reorganizeString(s): count = Counter(s) max_heap = [(-freq, char) for char, freq in count.items()] heapq.heapify(max_heap) prev_freq, prev_char = 0, \'\' result = [] while max_heap: freq, char = heapq.heappop(max_heap) result.append(char) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_char)) prev_freq, prev_char = freq + 1, char result_str = \'\'.join(result) if len(result_str) != len(s): return \\"\\" return result_str"},{"question":"Ella is an avid reader and likes to track how many books she needs to complete her monthly reading goal. Given the number of books she needs to read to meet her goal and the number of books she has already read this month, calculate how many more books Ella needs to read. If she has already met her goal, print \\"Goal reached!\\". -----Constraints----- - 0 ≦ goal ≦ 100 - 0 ≦ read ≦ 100 - goal and read are integers. -----Input----- The input is given from Standard Input in the following format: goal read -----Output----- Print the answer. -----Sample Input----- 10 7 -----Sample Output----- 3 Ella needs to read 10 books in total and she has already read 7, so she needs to read 3 more books to reach her goal.","solution":"def books_needed_to_reach_goal(goal, read): Returns the number of books Ella needs to read to meet her goal. If she has already met her goal, return \\"Goal reached!\\". if read >= goal: return \\"Goal reached!\\" else: return goal - read"},{"question":"The Wonderland Library has a peculiar system for book distribution. The library arranges its books in a single row, and it has a special device that helps readers to access these books in an optimal manner. The device can perform the following operations: 1. Swap the positions of any two books. 2. Reverse a segment of consecutive books. Given a string `books` where each character represents a unique book, and a string `order` which shows the desired final arrangement of the books, you need to write a program to determine the minimum number of operations required to rearrange the books into the desired order. For example, if `books = \\"abcd\\"` and `order = \\"dcba\\"`, one of the optimal solutions would be to reverse the entire segment from the first to the last book in one operation. Input The input consists of two strings `books` and `order`, each containing between 1 and 100 characters. Output Output a single integer representing the minimum number of operations required to rearrange the books. Example Input abcd dcba Output 1","solution":"def min_operations(books, order): Given the initial arrangement of books and the desired order, returns the minimum number of operations required to rearrange the books. n = len(books) operations = 0 # Convert the books string and order to lists for easy manipulation books = list(books) order = list(order) for i in range(n): if books[i] != order[i]: # Find the position of the desired book idx = books.index(order[i]) # Swap or reverse the segment if idx != i: # Reverse the segment to bring the desired book to the correct position books[i:idx+1] = reversed(books[i:idx+1]) operations += 1 return operations"},{"question":"Problem You have been selected as a software engineer to develop an inventory management system for a warehouse. The system needs to manage the stock of various items and handle queries to update the inventory and check stock levels. Initially, the warehouse\'s inventory is empty. The system should process a sequence of operations that are described by the following commands: 1. \\"Add x y\\": Add y units of item id x to the inventory. If the item id x does not exist, create it. 2. \\"Remove x y\\": Remove y units of item id x from the inventory. If y is more than the current stock of item id x, set the stock to 0. 3. \\"Check x\\": Print the current stock level of item id x. If the item id x does not exist, print 0. Write a program that reads the number of operations and executes them in order. Constraints The input satisfies the following conditions: * 1 ≤ number of operations ≤ 100 * 1 ≤ x ≤ 1000 * 1 ≤ y ≤ 100 Input The input is given in the following format: ``` N operation_1 operation_2 ... operation_N ``` The first line contains the number of operations N. Each of the next N lines contains a description of one of the operations in the format described above. Output For each \\"Check x\\" operation, print the current stock level of item id x on a new line. Examples Input ``` 5 Add 1 10 Check 1 Remove 1 5 Check 1 Check 2 ``` Output ``` 10 5 0 ``` Input ``` 7 Add 2 20 Add 3 15 Check 2 Remove 2 5 Check 2 Remove 3 20 Check 3 ``` Output ``` 20 15 0 ```","solution":"def inventory_management_system(operations): inventory = {} result = [] for operation in operations: parts = operation.split() command, x = parts[0], int(parts[1]) if command == \\"Add\\": y = int(parts[2]) if x in inventory: inventory[x] += y else: inventory[x] = y elif command == \\"Remove\\": y = int(parts[2]) if x in inventory: inventory[x] = max(0, inventory[x] - y) elif command == \\"Check\\": result.append(inventory.get(x, 0)) return result"},{"question":"You are given an array of n integers. Your task is to determine the maximum sum of a subarray that is obtained by picking exactly k consecutive elements from the array. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 2·10⁵), where n is the number of elements in the array and k is the number of consecutive elements to pick. The second line contains n space-separated integers, representing the elements of the array. The elements of the array can be both positive and negative integers. Output Print a single integer — the maximum sum of a subarray with exactly k consecutive elements. Examples Input 5 2 1 2 3 4 5 Output 9 Input 6 3 -1 -2 3 4 5 -6 Output 12 Note In the first example, picking the last two elements (4, 5) gives the maximum sum of 9. In the second example, picking the elements (3, 4, 5) gives the maximum sum of 12.","solution":"def max_sum_of_k_consecutive_elements(n, k, array): Returns the maximum sum of a subarray with exactly k consecutive elements. # Calculate the sum of first k elements current_sum = sum(array[:k]) max_sum = current_sum # Use sliding window to find the maximum sum of k consecutive elements for i in range(k, n): current_sum += array[i] - array[i - k] max_sum = max(max_sum, current_sum) return max_sum"},{"question":"In a desk organizer, Anna has a set of index cards, each with a unique integer written on it. She loves sorting them efficiently using a custom sorting algorithm. The sorting algorithm she uses can be defined as follows: Given an array of integers, the custom sort arranges the integers in ascending order. However, before comparing any two integers, each integer is transformed by counting the number of distinct divisors it has. We define the number of divisors of an integer n as the count of all positive integers d such that n % d == 0. If two integers have the same number of divisors, they should be sorted in ascending numerical order. Your task is to implement this custom sorting algorithm for Anna\'s set of index cards. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of index cards. The second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 106) — the integers written on the index cards. Output Print the n integers in the order they should be arranged after applying the custom sort. Examples Input 5 2 3 4 6 5 Output 2 3 5 4 6 Input 4 12 15 10 8 Output 8 10 15 12 Note In the first example: - The number 2 has 2 divisors. - The number 3 has 2 divisors. - The number 4 has 3 divisors. - The number 6 has 4 divisors. - The number 5 has 2 divisors. So after sorting based on the number of divisors: [2, 3, 5, 4, 6]. In the second example: - The number 12 has 6 divisors. - The number 15 has 4 divisors. - The number 10 has 4 divisors. - The number 8 has 4 divisors. So after sorting based on the number of divisors: [8, 10, 15, 12]. Note that when a tie occurs (same number of divisors), the numbers are then ordered based on their original numerical values.","solution":"def count_divisors(x): Returns the number of distinct divisors of x. count = 0 for i in range(1, int(x ** 0.5) + 1): if x % i == 0: count += 1 if i != x // i: count += 1 return count def custom_sort(arr): Custom sort based on the count of divisors. return sorted(arr, key=lambda x: (count_divisors(x), x)) def sort_index_cards(n, cards): Sorts the index cards based on the custom sort algorithm. return custom_sort(cards)"},{"question":"You are given a matrix of dimensions n x m filled with random integers. Your task is to find the maximum sum you can obtain by picking exactly one integer from each row of the matrix such that no two integers picked are from the same column. If it is not possible to pick the integers as described, then return 0. -----Constraints----- - All values in input are integers. - 1 leq n, m leq 1000 - -1000 leq matrix[i][j] leq 1000 -----Input----- The first line contains two integers, n and m, separated by a space. Each of the next n lines contains m integers, which represent the elements of the matrix. -----Output----- Print the maximum sum possible according to the rules described above. If it is not possible to pick the integers as described, print 0. -----Sample Input----- 3 3 1 2 3 4 5 6 7 8 9 -----Sample Output----- 15 In this example, you can pick 3 from the first row, 5 from the second row, and 7 from the third row, which gives the maximum sum of 15.","solution":"def max_sum_non_adjacent_columns(matrix): n = len(matrix) m = len(matrix[0]) if n > m: return 0 from itertools import permutations max_sum = float(\'-inf\') for perm in permutations(range(m), n): current_sum = sum(matrix[i][perm[i]] for i in range(n)) max_sum = max(max_sum, current_sum) return max_sum if max_sum != float(\'-inf\') else 0"},{"question":"You are given a list of N integers where some of the integers are repeated. Your task is to identify the K most frequent elements in the list. If there are multiple elements with the same frequency, return the elements with the smallest values first. ------ Input ------ The first line contains two integers N (1 ≤ N ≤ 10^5) and K (1 ≤ K ≤ N). The second line contains N integers separated by spaces which represent the list of elements. ------ Output ------ Output the K most frequent elements in the list in descending order of their frequency. If multiple elements have the same frequency, output them in ascending order of their values. ------ Sample Input 1 ------ 7 3 4 1 2 2 3 3 3 ------ Sample Output 1 ------ 3 2 1 ------ Sample Input 2 ------ 8 2 5 5 5 4 4 4 3 3 2 ------ Sample Output 2 ------ 4 5","solution":"from collections import Counter def k_most_frequent(n, k, elements): This function takes the number of elements \'n\', the number of most frequent elements \'k\' to find, and the list of elements \'elements\'. It returns the k most frequent elements sorted by frequency first (higher to lower) and then by value (lower to higher) for ties. frequency = Counter(elements) sorted_elements = sorted(frequency.items(), key=lambda x: (-x[1], x[0])) result = [elem[0] for elem in sorted_elements[:k]] return result"},{"question":"You are given a string `s` of length `n` consisting of lower case English letters only and an integer `k`. You are required to determine if it is possible to make the string a palindrome by rearranging at most `k` of its characters exactly once. Input The first line consists of two integers n and k (1 ≤ n ≤ 100 000, 0 ≤ k ≤ n). The next line contains the string `s` of length n. Output Print \\"YES\\" if it is possible to make the string a palindrome by rearranging at most `k` of its characters exactly once, otherwise print \\"NO\\". Examples Input 6 2 aababc Output YES Input 5 1 abcde Output NO Input 4 0 aabb Output YES Note In the first example, by rearranging the characters, we can construct the palindrome \\"abcabc\\" with exactly 2 operations, which is within the limit `k`. In the second example, it is not possible to form any palindrome by changing only 1 character. In the third example, the string is already a potential palindrome (\\"abba\\" or \\"baab\\"), thus no rearrangement is necessary.","solution":"def can_rearrange_to_palindrome(n, k, s): from collections import Counter freq = Counter(s) odd_count = sum(1 for count in freq.values() if count % 2 != 0) if odd_count // 2 <= k: return \\"YES\\" else: return \\"NO\\""},{"question":"Given a string containing only the characters \'X\' and \'Y\', you need to determine the smallest window that contains an equal number of \'X\' and \'Y\'. A window is defined as any contiguous subarray of the string. If no such window exists, return -1. Example 1: Input: s = \\"XXXYXYX\\" Output: 2 Explanation: The smallest window containing an equal number of \'X\' and \'Y\' is \\"XY\\". Example 2: Input: s = \\"XXXX\\" Output: -1 Explanation: There is no window containing an equal number of \'X\' and \'Y\'. Example 3: Input: s = \\"YX\\" Output: 2 Explanation: The smallest window containing an equal number of \'X\' and \'Y\' is \\"YX\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestWindow() which takes the string s as input and returns the length of the smallest window containing an equal number of \'X\' and \'Y\'. If no such window exists, return -1. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ |s| ≤ 10^5","solution":"def smallest_window(s): Determines the smallest window that contains an equal number of \'X\' and \'Y\'. Parameters: s (str): string containing only characters \'X\' and \'Y\' Returns: int: length of the smallest window containing an equal number of \'X\' and \'Y\' or -1 if no such window exists. n = len(s) if n == 0: return -1 # Dictionary to store the net count of \'X\' minus \'Y\' and their first occurrence index net_count_dict = {0: -1} net_count = 0 min_length = float(\'inf\') for i in range(n): if s[i] == \'X\': net_count += 1 else: net_count -= 1 if net_count in net_count_dict: min_length = min(min_length, i - net_count_dict[net_count]) else: net_count_dict[net_count] = i return min_length if min_length != float(\'inf\') else -1"},{"question":"Xander is creating a randomized quiz generator. He has a list of questions and wants to ensure that all quizzes are unique. To achieve this, he needs to verify whether a new quiz has been used before. A quiz can be represented as a tuple of integers where each integer represents the unique ID of a question. Help Xander by writing a function that checks if a given quiz is unique by comparing it to a list of previously created quizzes. The function should take two inputs: 1. A list of tuples, where each tuple represents a previously created quiz. 2. A single tuple representing the new quiz. The function should return \\"Yes\\" if the new quiz is unique and \\"No\\" if it has been used before. Input - The first line contains an integer T, which represents the number of test cases. - For each test case: - The first line contains an integer N, the number of previously created quizzes. - The next N lines each contain a space-separated list of integers representing the questions of a previously created quiz. - The last line contains a space-separated list of integers representing the new quiz. Output - For each test case, print \\"Yes\\" if the new quiz is unique, and \\"No\\" if it has been used before. Constraints 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ Number of questions in a quiz ≤ 10 1 ≤ Question ID ≤ 10^3 SAMPLE INPUT 2 3 1 2 3 3 1 2 4 5 6 7 8 9 2 1 2 2 3 3 4 SAMPLE OUTPUT Yes No Explanation In the first test case, there are three previously created quizzes. The new quiz (7, 8, 9) does not match any of these, so the output is \\"Yes\\". In the second test case, there are two previously created quizzes. The new quiz (3, 4) already exists, so the output is \\"No\\".","solution":"def is_quiz_unique(previous_quizzes, new_quiz): Checks if the new_quiz is unique compared to the previously created quizzes. :param previous_quizzes: List of tuples, each representing a previously created quiz. :param new_quiz: A tuple representing the new quiz. :return: \\"Yes\\" if the new quiz is unique, \\"No\\" if it has been used before. return \\"No\\" if new_quiz in previous_quizzes else \\"Yes\\" def find_uniqueness_of_quizzes(test_cases): Iterates through all the test cases and checks the uniqueness of each new quiz. :param test_cases: List of test cases, each containing the previously created quizzes and the new quiz. :return: List of results for each test case, \\"Yes\\" or \\"No\\". results = [] for case in test_cases: previous_quizzes = [tuple(map(int, quiz.split())) for quiz in case[\\"previous_quizzes\\"]] new_quiz = tuple(map(int, case[\\"new_quiz\\"].split())) results.append(is_quiz_unique(previous_quizzes, new_quiz)) return results"},{"question":"Write a function that takes a string of words and returns a list of tuples containing each word and its frequency in the string, sorted by frequency in descending order. In case of a tie, sort the words in ascending alphabetical order. **Function Signature:** ```python def word_frequencies(text: str) -> list: Given a string of words, this function returns a list of tuples where each tuple contains a word and its frequency in the string. The list is sorted in descending order of frequency, and for words with the same frequency, the words are sorted in ascending alphabetical order. Args: text (str): A string of words separated by spaces. Returns: list: A list of tuples (word, frequency). ``` **Input:** - A single string `text` containing words separated by spaces. **Output:** - A list of tuples, where each tuple contains a word and its frequency. **Example:** ```python assert word_frequencies(\\"the quick brown fox jumps over the lazy dog the quick cat\\") == [(\'the\', 3), (\'quick\', 2), (\'brown\', 1), (\'cat\', 1), (\'dog\', 1), (\'fox\', 1), (\'jumps\', 1), (\'lazy\', 1), (\'over\', 1)] assert word_frequencies(\\"apple banana apple orange fruit banana banana apple fruit\\") == [(\'apple\', 3), (\'banana\', 3), (\'fruit\', 2), (\'orange\', 1)] ```","solution":"from collections import Counter def word_frequencies(text: str) -> list: Given a string of words, this function returns a list of tuples where each tuple contains a word and its frequency in the string. The list is sorted in descending order of frequency, and for words with the same frequency, the words are sorted in ascending alphabetical order. Args: text (str): A string of words separated by spaces. Returns: list: A list of tuples (word, frequency). words = text.split() word_count = Counter(words) return sorted(word_count.items(), key=lambda item: (-item[1], item[0]))"},{"question":"Given an integer number N (1 ≤ N ≤ 10^6), you have to find out the number of integers from 1 to N (inclusive) that equally divide N without leaving any remainder. A divisor of N is an integer D such that when N is divided by D, the remainder is zero (N % D == 0). Write a program that calculates the number of such divisors. Input One line containing the integer N. Output One line containing the number of divisors of N. Examples Input: 6 Output: 4 Explanation: The divisors of 6 are 1, 2, 3, and 6. Thus, the output is 4. Input: 15 Output: 4 Explanation: The divisors of 15 are 1, 3, 5, and 15. Thus, the output is 4. Input: 1 Output: 1 Explanation: The only divisor of 1 is 1 itself. Thus, the output is 1. Note: - The input is always a positive integer. - Zero (0) is not considered as a divisor for any number.","solution":"def count_divisors(N): Returns the number of divisors of N. count = 0 for i in range(1, N + 1): if N % i == 0: count += 1 return count"},{"question":"You are given an array of integers representing the height of candle sticks. At your birthday party, you want to blow out the tallest candles. Write a function that takes a list of integers and returns the number of tallest candles. Each integer represents the height of a candle. -----Input----- One line with space-separated integers n (1 ≤ n ≤ 10^5) — the heights of the n candles. Example Input 1: 3 2 1 3 Example Input 2: 4 4 1 3 -----Output----- A single integer — the number of tallest candles. Example Output 1: 2 Example Output 2: 2 -----Note----- In the first sample, the tallest candle has a height of 3 and there are 2 such candles, hence the output is 2. In the second sample, the tallest candle has a height of 4 and there are 2 such candles, hence the output is 2.","solution":"def count_tallest_candles(candle_heights): Returns the number of tallest candles. if not candle_heights: return 0 tallest_height = max(candle_heights) return candle_heights.count(tallest_height)"},{"question":"You are given an integer n. Your task is to output the sum of all even numbers from 1 to n (both inclusive). Constraints 1 leq n leq 10^7 Input Format The input contains a single integer n. Output Format Output the sum of all even numbers from 1 to n in a single line. Sample Input 10 Sample Output 30 Explanation The even numbers between 1 and 10 are 2, 4, 6, 8, 10. Their sum is 2 + 4 + 6 + 8 + 10 = 30.","solution":"def sum_even_numbers(n): Returns the sum of all even numbers from 1 to n (both inclusive). return sum(i for i in range(2, n+1, 2))"},{"question":"A museum security system is represented by a grid of n rows and m columns. Each cell in the grid can either be empty (denoted by \'.\') or contain a pillar (denoted by \'#\'). The museum wants to place cameras in some of the empty cells such that: 1. Each row and each column has at least one camera. 2. A camera can cover its entire row and column, stopping at any pillar it encounters. Given the grid, determine the minimum number of cameras needed to satisfy the above requirements. Input The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the grid. Each of the next n lines contains a string of m characters (either \'.\' or \'#\'), representing a row of the grid. Output Output a single integer — the minimum number of cameras needed to ensure every row and column has at least one camera and all cells in the rows and columns of that camera, up to any pillars, are covered. Example Input 4 4 .#.. ...# .#.. .... Output 4 Input 3 3 # # # Output 0 Note: In the first example, cameras can be placed in positions (1, 1), (2, 1), (3, 1), and (4, 4) (1-indexed) to cover all rows and columns with the minimum number of cameras. In the second example, since every cell contains a pillar, no cameras are needed to meet the requirements.","solution":"def minimum_cameras_needed(n, m, grid): row_covered = [False] * n col_covered = [False] * m cameras = 0 # Checks if a row and column are completely filled with pillars def is_row_fully_pillar(row): return all(cell == \'#\' for cell in grid[row]) def is_col_fully_pillar(col): return all(grid[i][col] == \'#\' for i in range(n)) # Set initially covered rows and columns for i in range(n): row_covered[i] = is_row_fully_pillar(i) for j in range(m): col_covered[j] = is_col_fully_pillar(j) for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not row_covered[i] and not col_covered[j]: cameras += 1 row_covered[i] = True col_covered[j] = True return cameras"},{"question":"Olivia wants to summarize her reading notes using a specific structure of nested bullet points. Her text editor supports automatic indentation using tabs and allows the following two commands: - \\"Tab\\" to increase the indentation of a line by one level. - \\"Shift+Tab\\" to decrease the indentation of a line by one level. There are n lines in the text, and the indentation level of each line is initially set according to some rules Olivia has decided. You are given these initial levels of indentation. Olivia now wants to modify the indentation level of a specific line from its current level to a desired level using the minimum number of operations (each Tab or Shift+Tab counts as one operation). The indentation levels are represented by integers: 0 means no indentation, 1 means one level of indentation, 2 means two levels, and so on. Your task is to find the minimum number of operations needed to change the indentation level of the specified line. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100) - the number of lines in the text. The second line contains n integers i_1, i_2, ..., i_n (0 ≤ i_k ≤ 100), where i_k is the current indentation level of the k-th line. The third line contains two integers l and d (1 ≤ l ≤ n, 0 ≤ d ≤ 100), where l is the line number (1-based index) and d is the desired indentation level for that line. -----Output----- Print a single integer - the minimum number of operations required to change the indentation level of the l-th line to the desired level d. -----Examples----- Input 4 0 1 2 3 2 3 Output 2 Input 3 0 2 4 3 1 Output 3 Input 5 0 2 2 2 0 4 2 Output 0 -----Note----- In the first example, the initial indentation levels are [0, 1, 2, 3]. To change the indentation level of the second line from 1 to 3, Olivia needs to perform 2 operations: \\"Tab\\", \\"Tab\\". In the second example, the initial indentation levels are [0, 2, 4]. To change the indentation level of the third line from 4 to 1, Olivia needs to perform 3 operations: \\"Shift+Tab\\", \\"Shift+Tab\\", \\"Shift+Tab\\". In the third example, the initial indentation levels are [0, 2, 2, 2, 0]. The indentation level of the fourth line is already 2, so no operations are needed.","solution":"def min_operations(n, indentation_levels, line, desired_level): Returns the minimum number of operations to change the indentation level of a specific line to the desired level. current_level = indentation_levels[line - 1] return abs(current_level - desired_level)"},{"question":"A company has decided to organize a team-building event and has devised a game called \\"Card Shuffle\\". In this game, participants are given a deck of cards, each labeled with a unique integer. The goal is to shuffle the cards following a specific pattern called the \\"reversal shuffle\\", which is defined as follows: The deck is split into k sub-decks of roughly equal size (if the deck size is not divisible by k, the first several sub-decks may have one more card than the others). Each sub-deck is then reversed (the order of cards in each sub-deck is flipped), and finally, all sub-decks are concatenated back together in their new order. Write a program to perform the reversal shuffle on a given deck of cards. **Input** The input consists of several datasets. Each dataset is described by two lines: 1. The first line contains an integer k (1 ≤ k ≤ n) and an integer n (1 ≤ n ≤ 100), representing the number of sub-decks and the number of cards in the deck, respectively. 2. The second line contains n integers separated by spaces, representing the cards in the deck. The end of the input is indicated by a line with two zeros. **Output** For each dataset, output the resulting deck of cards after performing the reversal shuffle. **Example** **Input** 2 7 1 2 3 4 5 6 7 3 6 10 20 30 40 50 60 0 0 **Output** 4 3 2 1 7 6 5 30 20 10 60 50 40 **Explanation** In the first dataset, the deck `[1 2 3 4 5 6 7]` is split into 2 sub-decks of sizes 4 and 3: - Sub-deck 1: `[1 2 3 4]` -> reversed to `[4 3 2 1]` - Sub-deck 2: `[5 6 7]` -> reversed to `[7 6 5]` Concatenating these gives `[4 3 2 1 7 6 5]`. In the second dataset, the deck `[10 20 30 40 50 60]` is split into 3 sub-decks of sizes 2, 2, and 2: - Sub-deck 1: `[10 20]` -> reversed to `[20 10]` - Sub-deck 2: `[30 40]` -> reversed to `[40 30]` - Sub-deck 3: `[50 60]` -> reversed to `[60 50]` Concatenating these gives `[30 20 10 60 50 40]`.","solution":"def reversal_shuffle(k, n, deck): Perform the reversal shuffle on a given deck of cards. Parameters: k (int): The number of sub-decks. n (int): The number of cards in the deck. deck (list of int): The list of cards in the deck. Returns: list of int: The resulting deck after performing the reversal shuffle. sub_decks = [] extra_cards = n % k sub_deck_size = n // k start = 0 for i in range(k): end = start + sub_deck_size + (1 if i < extra_cards else 0) sub_decks.append(deck[start:end][::-1]) start = end return [card for sub_deck in sub_decks for card in sub_deck] def card_shuffle(datasets): results = [] for k, n, deck in datasets: if k == 0 and n == 0: # End of input indicator break results.append(reversal_shuffle(k, n, deck)) return results"},{"question":"A global conference center has several meeting rooms, each with a certain seating capacity. The center\'s manager wants to optimize the assignment of session attendees to rooms in a way that maximizes room utilization while ensuring that no room is overbooked and that all attendees have a seat. The problem is to determine whether a given set of sessions can be accommodated in the available rooms. Each session requires a certain number of seats. Additionally, each room has a specific seating capacity. You need to decide whether all sessions can be assigned to the rooms such that each room can fit the number of attendees in the sessions assigned to it. Input The input consists of multiple test cases. For each test case: - The first line contains two integers `R` and `S` where `R` (1 ≤ R ≤ 100) is the number of rooms and `S` (1 ≤ S ≤ 100) is the number of sessions. - The second line contains `R` integers, representing the seating capacities of the rooms. - The third line contains `S` integers, representing the number of attendees for each session. The input ends with a line consisting of only `0 0`. Output For each test case, the output should be a single line containing \\"YES\\" if all sessions can be accommodated in the available rooms, otherwise \\"NO\\". Example Input: ``` 3 4 100 50 30 40 20 30 70 2 3 60 100 40 90 20 1 1 50 60 0 0 ``` Output: ``` YES YES NO ``` # Explanation In the first test case, the rooms can be arranged as follows: - Room 1 (capacity 100): holds session with 70 attendees. - Room 2 (capacity 50): holds sessions with 40 and 20 attendees. - Room 3 (capacity 30): holds session with 30 attendees. In the second test case, the rooms can be arranged as follows: - Room 1 (capacity 60): holds sessions with 40 and 20 attendees. - Room 2 (capacity 100): holds session with 90 attendees. In the third test case, the single room available (capacity 50) cannot hold the session requiring 60 seats. Hence, the output is \\"NO\\".","solution":"def can_accommodate(R, S, room_capacities, session_attendees): Returns \\"YES\\" if all sessions can be accommodated in the available rooms, otherwise \\"NO\\". if R == 0 and S == 0: return None # Sort the room capacities and session requirements in descending order room_capacities.sort(reverse=True) session_attendees.sort(reverse=True) for attendees in session_attendees: # If no room can accommodate the session, return \\"NO\\" if not room_capacities or attendees > room_capacities[0]: return \\"NO\\" # Assign the session to a room and remove that room\'s capacity room_capacities[0] -= attendees if room_capacities[0] < 0: return \\"NO\\" room_capacities.sort(reverse=True) return \\"YES\\" def process_conference_input(input_lines): input_iter = iter(input_lines) results = [] while True: R, S = map(int, next(input_iter).split()) if R == 0 and S == 0: break room_capacities = list(map(int, next(input_iter).split())) session_attendees = list(map(int, next(input_iter).split())) result = can_accommodate(R, S, room_capacities, session_attendees) if result: results.append(result) return results"},{"question":"The city council has decided to build a new bridge to connect different parts of the city separated by a river. The city is represented as a graph with n nodes and m edges, where nodes represent areas of the city and edges represent roads connecting those areas. The bridge will be added as an additional edge between two currently unconnected nodes, u and v, ensuring all nodes become connected. Your task is to design an algorithm that determines the minimal possible weight for the new bridge such that all nodes in the graph are connected when the bridge is added. The weight of the bridge should be the minimal possible value to achieve this connectivity and should be greater than the weight of any existing edge in the graph, to avoid duplication. Input: - The first line contains two integers n and m, where n is the number of nodes and m is the number of edges. - The next m lines contain three integers each, u, v, and w, where u and v are connected by an edge with weight w. (1 ≤ w ≤ 10^6) Output: - Print the minimal possible weight of the bridge to connect all nodes in the graph. Example: Input: 4 4 1 2 1 2 3 2 3 4 3 1 3 4 Output: 5 Input: 5 3 1 2 2 2 3 3 4 5 4 Output: 5 Input: 6 5 1 2 3 2 3 4 3 4 5 4 5 6 5 6 7 Output: 8 Note: In the first example, adding a bridge between nodes 2 and 4 with weight 5 ensures all nodes are connected as a single graph component. In the second example, a bridge with weight 5 between nodes 3 and 4 or nodes 1 and 3 would make all nodes connected.","solution":"def minimal_bridge_weight(n, m, edges): Determine the minimal possible weight for a new bridge to connect all nodes in the graph. Parameters: n (int): Number of nodes m (int): Number of edges edges (list of tuples): Each tuple contains three integers u, v, and w representing an edge Returns: int: Minimal possible weight of the bridge # Find the maximum weight among all the edges max_existing_weight = max(edge[2] for edge in edges) # The minimal possible weight for the new bridge should be greater than the max_existing_weight return max_existing_weight + 1"},{"question":"Anastasiya loves solving puzzles. She recently encountered a fascinating problem involving sequences and wants to test it on a few of her friends. Anastasiya has an integer sequence a of length n. She wants to know how many different subsequences (subarrays that can be obtained by deleting some (possibly zero) elements from the array without changing the order of the remaining elements) of a given length k consist entirely of unique elements. A subsequence of a sequence can be derived by deleting some or no elements from the sequence without changing the order of the remaining elements. Input The first line contains two integers n and k (1 ≤ k ≤ n ≤ 200,000) — the length of the sequence and the length of the subsequence we are interested in. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 200,000) — the elements of the sequence. Output Output a single integer — the number of different subsequences of length k with all unique elements. Example Input 5 3 1 2 2 3 4 Output 4 Note In the given example, the 5-element sequence is [1, 2, 2, 3, 4]. We need to count all subsequences of length 3 that have all unique elements. The valid subsequences are: - [1, 2, 3] - [1, 2, 4] - [2, 3, 4] - [1, 3, 4] Therefore, there are 4 such subsequences.","solution":"import itertools def count_unique_subsequences(n, k, a): Returns the number of different subsequences of length k with all unique elements. :param n: Length of the sequence (1 ≤ k ≤ n ≤ 200,000). :param k: Length of subsequence of interest. :param a: List containing the integer sequence (1 ≤ ai ≤ 200,000). :return: Number of unique subsequences of length k. # Use set to store unique subsequences of length k unique_subsequences = set() # Generate all subsequences of length k for subseq in itertools.combinations(a, k): # Check if all elements in the subsequence are unique if len(set(subseq)) == k: unique_subsequences.add(subseq) return len(unique_subsequences) # Example usage # n, k = 5, 3 # a = [1, 2, 2, 3, 4] # print(count_unique_subsequences(n, k, a)) # Output: 4"},{"question":"Given an array of integers, rotate the array to the right by a given number of steps. For example, given the array `arr = [1, 2, 3, 4, 5, 6, 7]` and `k = 3`, the array should be modified to `[5, 6, 7, 1, 2, 3, 4]` by rotating it 3 steps to the right. Write a function `rotateArray(arr, k)` that takes an array of integers and a non-negative integer `k`, and returns the array after it has been rotated `k` steps to the right. **Constraints**: - The length of the array will be in the range `[1, 1000]`. - The values in the array will be in the range `[-1000, 1000]`. - The value of `k` will be in the range `[0, 1000]`. **Examples**: 1. `rotateArray([1, 2, 3, 4, 5, 6, 7], 3)` should return `[5, 6, 7, 1, 2, 3, 4]`. 2. `rotateArray([-1, -100, 3, 99], 2)` should return `[3, 99, -1, -100]`. 3. `rotateArray([1], 0)` should return `[1]`.","solution":"def rotateArray(arr, k): Rotates the array to the right by k steps. n = len(arr) k = k % n # In case k is greater than the length of the array return arr[-k:] + arr[:-k]"},{"question":"Alice has a collection of glass beads of various colors. She wants to string all the beads together in such a way that no two adjacent beads are of the same color. Your task is to determine whether it is possible to arrange the beads in this manner. Constraints 1 ≤ N ≤ 10^5 Each bead in the collection has a color represented by a lowercase alphabetic character (\'a\' to \'z\'). Input The first line of input contains N, the number of beads. The second line contains a string of N characters denoting the colors of the beads. Output Output a single line containing \\"YES\\" or \\"NO\\". If there are multiple ways to arrange the beads meeting the above requirement, \\"YES\\" is enough. Example Input: 5 aabbc Output: YES Explanation One possible arrangement of the beads is \\"abcab\\", where no two adjacent beads are of the same color.","solution":"from collections import Counter def can_arrange_beads(N, colors): Determines if it\'s possible to arrange the beads in such a way that no two adjacent beads have the same color. Parameters: N (int): Number of beads. colors (str): String representing the colors of the beads. Returns: str: \\"YES\\" if possible, otherwise \\"NO\\" if N == 1: return \\"YES\\" color_counts = Counter(colors) max_count = max(color_counts.values()) if max_count <= (N + 1) // 2: return \\"YES\\" else: return \\"NO\\""},{"question":"A pharmacist wants to track the number of pills a patient needs to take each day as part of a treatment plan. The daily number of pills follows a specific pattern: On day 1, the patient takes 1 pill, on day 2, the patient takes 2 pills, on day 3, the patient takes 4 pills, on day 4, the patient takes 7 pills, on day 5, the patient takes 11 pills, and so on. Write a program to determine the number of pills the patient takes on a given day. The series follows this pattern: 1, 2, 4, 7, 11, ….. -----Input:----- - The first line will contain an integer T, the number of test cases. Then the test cases follow. - Each test case consists of a single line of input, one integer N representing the day number. -----Output:----- For each test case, output the number of pills taken on the corresponding day. -----Constraints----- - 1 leq T leq 10^4 - 1 leq N leq 10^4 -----Sample Input:----- 4 1 4 5 6 -----Sample Output:----- 1 7 11 16","solution":"def pills_per_day(n): Returns the number of pills the patient takes on the nth day. The number of pills the patient takes follows a pattern. Parameters: n (int): The day number Returns: int: Number of pills taken on the nth day if n == 1: return 1 return (n*(n-1))//2 + 1 def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) results = [] for i in range(1, T + 1): N = int(data[i]) results.append(pills_per_day(N)) for result in results: print(result) # If this file is run directly, run the main function if __name__ == \\"__main__\\": main()"},{"question":"Write a function to determine if a given string is a permutation of a palindrome. A palindrome is a word or phrase that reads the same forwards and backwards (ignoring spaces), and a permutation is a rearrangement of letters. The string will consist of alphabetic characters only. Your function should return `True` if the input string is a permutation of a palindrome and `False` otherwise. For example: ``` Input: \\"civic\\" Output: True (since \\"civic\\" is already a palindrome) ``` ``` Input: \\"ivicc\\" Output: True (since \\"ivicc\\" can be rearranged to \\"civic\\") ``` ``` Input: \\"hello\\" Output: False (since no permutation of \\"hello\\" can be a palindrome) ```","solution":"def is_palindrome_permutation(s): Determines if the input string is a permutation of a palindrome. Args: s (str): The input string consisting of alphabetic characters only. Returns: bool: True if the string is a permutation of a palindrome, False otherwise. from collections import Counter # Convert input string to lower case and remove spaces s = s.replace(\\" \\", \\"\\").lower() # Count the frequency of each character in the string char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # For a string to be a permutation of a palindrome: # There can be at most one character with an odd count (for the middle character in palindrome) return odd_count <= 1"},{"question":"A treasure hunting company has discovered a chain of islands, and each island has a certain amount of treasure on it. They plan to move the treasure from the islands to their headquarters on the mainland, but there is only one shipping container that can be used at a time, and each container can only carry a limited amount of treasure. They want to maximize the amount of treasure on each trip while ensuring that the total weight does not exceed the container\'s capacity. Given the weight of treasure on each island and the container\'s maximum capacity, determine the maximum number of trips required to transport all the treasure. Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of islands. - The second line contains n integers wi (1 ≤ wi ≤ 10^6), where wi is the weight of treasure on the i-th island. - The third line contains an integer C (1 ≤ C ≤ 10^9), the capacity of the shipping container. Output - Print a single integer, the maximum number of trips required to transport all the treasure. Example Input 5 10 20 30 40 50 50 Output 3 Explanation Island 1: 10 units Island 2: 20 units Island 3: 30 units Island 4: 40 units Island 5: 50 units The first trip can carry the treasure from islands 1 and 2 (10 + 20 = 30 ≤ 50). The second trip can carry the treasure from island 3 (30 ≤ 50). The third trip can carry the treasure from island 4 and 5 (40 + 50 = 90 > 50, so it has to be 50 ≤ 50). Thus, the maximum number of trips required is 3.","solution":"def max_trips(n, weights, C): Calculate the maximum number of trips required to transport all the treasure. Args: n (int): Number of islands. weights (list): List of weights of treasure on each island. C (int): Capacity of the shipping container. Returns: int: Maximum number of trips required. weights.sort() trips = 0 left, right = 0, n - 1 while left <= right: if weights[left] + weights[right] <= C: left += 1 right -= 1 trips += 1 return trips"},{"question":"You are given a sequence of integers representing the number of pages in N chapters of a book. Chef loves reading books, but he wants to read them in a very particular way. He will only read contiguous chapters and prefers to finish the book in one go. However, Chef wants his reading experience to be as challenging as possible, and for that, he defines a challenge factor as the maximum sum of pages of any subarray of chapters he reads. Given the number of chapters, N, and the sequence of integers that represent the pages in these chapters, help Chef in finding the maximum sum of pages he can read in one continuous reading session. ------ Input ------ The first line contains an integer N denoting the number of chapters in the book. The second line contains N space-separated integers, where each integer represents the number of pages in each chapter. ------ Output ------ Output a single integer, the maximum sum of pages of any contiguous subset of chapters. ------ Constraints ----- 1 ≤ N ≤ 10^5 -10^4 ≤ pages in each chapter ≤ 10^4 ------ Example Input ----- 5 3 -2 5 -1 4 ------ Example Output ----- 9 ------ Explanation ----- In this example, the contiguous subset of chapters with the maximum sum of pages is [3, -2, 5, -1, 4], which sums to 9.","solution":"def max_sum_of_contiguous_chapters(N, pages): Returns the maximum sum of pages of any contiguous subset of chapters. Args: N: An integer, the number of chapters. pages: List of integers, where each integer represents the number of pages in a chapter. Returns: An integer, maximum sum of pages of any contiguous subset of chapters. max_sum = float(\'-inf\') current_sum = 0 for page in pages: current_sum = max(current_sum + page, page) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"You are given a list of students with their names and test scores. Calculate the average score for each student and then find the highest and lowest average scores among all students. Input: The first line contains an integer N, the number of students. The next N lines each contain a student\'s name followed by their test scores. Each line will have the format: `name score1 score2 ... scoreM`. Output: Print a single line containing the highest average score followed by the lowest average score, separated by a space. Constraints: 1 ≤ N ≤ 100 1 ≤ M ≤ 10 0 ≤ score ≤ 100 SAMPLE INPUT: 3 Alice 80 90 100 Bob 70 85 90 Charlie 60 75 90 SAMPLE OUTPUT: 90.0 75.0 Explanation: Alice\'s average score is (80+90+100)/3 = 90.0 Bob\'s average score is (70+85+90)/3 = 81.67 Charlie\'s average score is (60+75+90)/3 = 75.0 The highest average score is 90.0 and the lowest average score is 75.0.","solution":"def calculate_highest_and_lowest_averages(N, student_scores): Calculate the highest and lowest average scores among students. Params: - N (int): The number of students. - student_scores (list of str): Each string is in the format \\"name score1 score2 ... scoreM\\". Returns: - str: A single line containing the highest average score followed by the lowest average score, separated by a space. highest_avg = float(\'-inf\') lowest_avg = float(\'inf\') for score_data in student_scores: parts = score_data.split() name = parts[0] scores = list(map(int, parts[1:])) avg_score = sum(scores) / len(scores) if avg_score > highest_avg: highest_avg = avg_score if avg_score < lowest_avg: lowest_avg = avg_score return f\\"{highest_avg} {lowest_avg}\\""},{"question":"A new delivery company wants to implement an optimal package route planning system. They need a software that can help minimize the cost of delivering packages between multiple cities. The cost of delivering packages between any two cities is given in a matrix C where C[i][j] represents the cost to deliver packages from city i to city j. Importantly, the delivery costs are mutual, i.e., C[i][j] = C[j][i]. You are required to write a program that calculates and returns the minimum cost to deliver packages starting from city \'0\', visiting each city exactly once, and then returning back to the starting city \'0\'. ------ Input Format ------ - The first line of the input contains a single integer N, the number of cities. - The following N lines each contain N integers representing the delivery cost matrix C. ------ Output Format ------ Output a single integer, the minimum cost to complete the tour. ------ Constraints ------ 2 ≤ N ≤ 18 0 ≤ C[i][j] ≤ 10^{4} ------ Sample Input 1 ------ 4 0 10 15 20 10 0 35 25 15 35 0 30 20 25 30 0 ------ Sample Output 1 ------ 80 ------ Explanation 1 ------ The optimal tour is 0 -> 1 -> 3 -> 2 -> 0 with a cost of 10+25+30+15=80.","solution":"from itertools import permutations def calculate_min_route_cost(N, cost_matrix): Calculates the minimum cost to deliver packages starting from city 0, visiting each city exactly once, and then returning back to the starting city. Parameters: N (int): The number of cities. cost_matrix (list of list of int): The cost matrix representing the delivery costs between cities. Returns: int: The minimum cost to complete the tour. # all cities excluding the starting city 0 cities = list(range(1, N)) min_cost = float(\'inf\') # generate all permutations of cities to visit for perm in permutations(cities): current_cost = 0 current_city = 0 # calculate the cost for the current permutation for next_city in perm: current_cost += cost_matrix[current_city][next_city] current_city = next_city # add the cost to return to the starting city current_cost += cost_matrix[current_city][0] # update the minimum cost if the current one is lower if current_cost < min_cost: min_cost = current_cost return min_cost"},{"question":"You are managing a team of n workers, each with a certain efficiency. You are assigned a task that requires all workers to work in pairs. For each pair, the total efficiency is the sum of the efficiencies of both workers in that pair. The task requires you to form exactly n/2 pairs, and the efficiency of the team is defined as the minimum total efficiency among all pairs. You need to determine the maximum possible efficiency of the team. Input The input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The description of the test cases follows. The first line of each test case contains a single integer n (2 ≤ n ≤ 1000, n is even) — the number of workers. The second line of each test case contains n space-separated integers e_1, e_2, ..., e_n (1 ≤ e_i ≤ 10^9) — the efficiencies of the workers. Output For each test case, print the maximum possible minimum pair efficiency. Example Input 4 4 1 3 5 5 6 1 2 3 4 5 6 4 8 1 9 3 2 7 2 Output 6 7 10 9 Note In the first test case, the possible pairs are (1,5) and (3,5). The efficiencies of the pairs are 6 and 8, so the minimum is 6. In the second test case, you can form pairs (1,6), (2,5), and (3,4). The efficiencies of the pairs are 7, 7, and 7, so the minimum is 7. In the third test case, you can form pairs (1,9) and (3,8). The efficiencies of the pairs are 10 and 11, so the minimum is 10. In the fourth test case, there is only one pair to be formed: (7,2), and the efficiency is 9.","solution":"def max_min_pair_efficiency(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] efficiencies = test_cases[i][1] efficiencies.sort() min_eff = float(\'inf\') for j in range(n // 2): pair_eff = efficiencies[j] + efficiencies[n - j - 1] min_eff = min(min_eff, pair_eff) results.append(min_eff) return results # Example usage: t = 4 test_cases = [ (4, [1, 3, 5, 5]), (6, [1, 2, 3, 4, 5, 6]), (4, [8, 1, 9, 3]), (2, [7, 2]) ] print(max_min_pair_efficiency(t, test_cases)) # Output: [6, 7, 10, 9]"},{"question":"You are designing an e-commerce system where users can place bids on items. Each item has a base price, and users can increment their bids over the current highest bid. Your task is to determine the winner of each auction along with the winning bid amount after all bids have been placed. An auction can be represented by an integer n, where n is the number of bids placed on an item. Each bid can be represented by a tuple (u, b) where u is the user ID (an integer) and b is the bid amount (an integer). A user cannot place a bid lower than the current highest bid. If more than one user places the highest bid, the first user to place that bid wins the auction. Write a program to determine the winner and the winning bid for each auction. -----Input----- The first line of input contains a single integer t (1 le t le 1000) — the number of auctions. For each auction, the first line contains a single integer n (1 le n le 1000) — the number of bids. Each of the next n lines contains two integers u and b (1 le u le 10^6, b ge 0). -----Output----- For each auction, print a single line containing two integers: the user ID of the winner and the winning bid amount. -----Examples----- Input 2 3 101 50 102 60 101 70 4 201 45 202 45 203 50 202 60 Output 101 70 202 60 -----Note----- For the first auction, the bids are as follows: - User 101 bids 50. - User 102 bids 60. - User 101 bids 70 (the highest bid). The winner is User 101 with a bid of 70. For the second auction, the bids are as follows: - User 201 bids 45. - User 202 bids 45. - User 203 bids 50. - User 202 bids 60 (the highest bid). The winner is User 202 with a bid of 60.","solution":"def determine_winner(auctions): results = [] for bids in auctions: highest_bid = -1 winning_user = -1 for user, bid in bids: if bid > highest_bid: highest_bid = bid winning_user = user results.append((winning_user, highest_bid)) return results"},{"question":"Elena is organizing a coding competition where she wants to distribute tasks among n participants. Each task has a unique difficulty level represented by an integer d_i. Elena wants to distribute the tasks such that no participant gets tasks with consecutive difficulty levels. Determine the maximum sum of task difficulties that can be achieved by distributing tasks among the participants while satisfying the condition. Each participant can receive multiple tasks, but no two consecutive tasks should have consecutive difficulty levels. -----Input----- The first line contains an integer n (1 le n le 200,000). The second line contains n integers d_1, d_2, ldots, d_n (1 le d_i le 200,000) representing the difficulty levels of the tasks. -----Output----- Output a single integer which is the maximum sum of difficulties that can be achieved without assigning consecutive difficulty levels to any participant. -----Examples----- Input 6 3 5 1 9 2 8 Output 22 Input 4 4 2 1 10 Output 14 -----Note----- Let\'s analyze the maximum sum of difficulties in the first example. Here is one possible distribution of tasks to maximize the difficulty sum: Pick tasks with difficulties 3, 9, 8. The sum is 3 + 9 + 8 = 20. Another valid distribution could be picking tasks 5, 9, 8 with a sum of 22, which is the maximum sum that can be achieved.","solution":"def max_sum_no_consecutive_difficulties(n, difficulties): if n == 0: return 0 if n == 1: return difficulties[0] if n == 2: return max(difficulties[0], difficulties[1]) dp = [0] * n dp[0] = difficulties[0] dp[1] = max(difficulties[0], difficulties[1]) for i in range(2, n): dp[i] = max(dp[i-1], dp[i-2] + difficulties[i]) return dp[n-1]"},{"question":"Task Given a list of non-negative integers `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police. You cannot rob two adjacent houses, as this would alert the police. Your task is to come up with an optimal function to maximize the amount stolen. Function Signature ```python def rob(nums: List[int]) -> int: ``` Example ```python # Example 1 nums = [1, 2, 3, 1] rob(nums) # should return 4 # Example 2 nums = [2, 7, 9, 3, 1] rob(nums) # should return 12 ``` Constraints - `1 <= nums.length <= 100` - `0 <= nums[i] <= 400`","solution":"from typing import List def rob(nums: List[int]) -> int: Returns the maximum amount of money that can be robbed without alerting the police. You cannot rob two adjacent houses. if not nums: return 0 if len(nums) == 1: return nums[0] # dp array to store the maximum robbed amount until the i-th house dp = [0] * len(nums) dp[0] = nums[0] dp[1] = max(nums[0], nums[1]) for i in range(2, len(nums)): # For each house, you can choose to either rob it or not: # If you rob it, add its value to the max amount that could be robbed from all previous houses except the direct last one. # If you don\'t rob it, just take the max value robbed until the last house. dp[i] = max(nums[i] + dp[i-2], dp[i-1]) return dp[-1]"},{"question":"In an attempt to improve the efficiency of an old server, you are asked to analyze its job scheduling process. The server handles multiple jobs and each job is characterized by a start time and an end time. The server cannot execute more than one job at a time. Your task is to determine the minimum number of servers required to handle all jobs without any overlapping times. Consider the following example: The server receives five jobs described by their start and end times: - Job 1 starts at time 1 and ends at time 4 - Job 2 starts at time 2 and ends at time 5 - Job 3 starts at time 9 and ends at time 12 - Job 4 starts at time 5 and ends at time 9 - Job 5 starts at time 5 and ends at time 7 You can see that Jobs 1 and 2 overlap, and therefore, require two servers at that time. However, Jobs 3, 4, and 5 do not overlap with each other or with Jobs 1 and 2, so only one server is needed for each of them. Thus, the minimum number of servers required for this schedule is 2. Your task is to write a program that computes the minimum number of servers required to execute all the jobs without any overlaps. # Input format - The first line contains a single integer N (1 ≤ N ≤ 100000) indicating the number of jobs. - The next N lines each contain two integers Si and Ei (1 ≤ Si < Ei ≤ 1000000), representing the start and end times of the ith job. # Output format - Output a single integer representing the minimum number of servers required. # Example Input 5 1 4 2 5 9 12 5 9 5 7 Output 2","solution":"def min_servers_required(jobs): Finds the minimum number of servers required to handle all jobs without any overlapping times. :param jobs: List of tuples where each tuple contains the start and end time of a job. :return: An integer representing the minimum number of servers required. # Edge case: If there are no jobs, no servers are required if not jobs: return 0 # Create two lists: start times and end times starts = sorted(job[0] for job in jobs) ends = sorted(job[1] for job in jobs) max_servers = 0 servers_needed = 0 i = j = 0 n = len(jobs) # Traverse the start times and end times while i < n: if starts[i] < ends[j]: servers_needed += 1 max_servers = max(max_servers, servers_needed) i += 1 else: servers_needed -= 1 j += 1 return max_servers # Example usage if __name__ == \\"__main__\\": jobs = [ (1, 4), (2, 5), (9, 12), (5, 9), (5, 7) ] print(min_servers_required(jobs)) # Output: 2"},{"question":"The task is to balance a sequence of parentheses. Given a string containing only characters \'(\' and \')\', your task is to find the minimum number of parentheses to remove to make the string valid. A valid parentheses string is defined as one where every opening parenthesis \'(\' has a corresponding closing parenthesis \')\', and the pairs are properly nested. Input The input consists of a single line, which contains the string of parentheses. Output Output the minimum number of parentheses that need to be removed to make the string valid. Constraints 1 ≤ length of the string ≤ 10^5 SAMPLE INPUT (()()) SAMPLE OUTPUT 0 Explanation The input string is already a valid sequence of parentheses, so no removal is needed. SAMPLE INPUT ())(()) SAMPLE OUTPUT 2 Explanation By removing the last \')\' in the first group and the first \'(\' in the second group, we make the string valid: ()().","solution":"def min_remove_to_make_valid_parentheses(s): Returns the minimum number of parentheses to remove to make the string valid. open_count = 0 unmatched_closing = 0 # Iterate through the string to count mismatched parentheses for char in s: if char == \'(\': open_count += 1 elif char == \')\': if open_count > 0: open_count -= 1 else: unmatched_closing += 1 # The total removals needed will be the sum of unmatched opening and closing parentheses return open_count + unmatched_closing"},{"question":"Given an array of integers of length n, and m range modification queries, implement a function to handle and execute these queries. Each query is described as \\"add v to all elements in the range from index l to r (inclusive)\\". After processing all queries, the function should return the resultant array. Constraints * 1 ≤ n ≤ 10^5 * 1 ≤ m ≤ 10^5 * 1 ≤ l ≤ r ≤ n (1-based indexing) * -10^9 ≤ v ≤ 10^9 * -10^9 ≤ array elements ≤ 10^9 Input Input is given in the following format: > n m > array elements > query1_l query1_r query1_v > query2_l query2_r query2_v > ... > querym_l querym_r querym_v Output Output the resulting array after applying all queries. Examples Input 5 3 1 2 3 4 5 1 3 2 2 5 3 3 4 -1 Output 3 7 7 6 8 Input 6 2 0 0 0 0 0 0 1 4 5 3 6 -2 Output 5 5 3 3 -2 -2","solution":"def apply_range_updates(n, m, arr, queries): Apply m range modification queries to an array of length n. Parameters: n (int): Length of the array. m (int): Number of queries. arr (list of int): The initial array. queries (list of tuples): Each tuple contains (l, r, v) representing adding v to all elements in the range [l, r]. Returns: list of int: The resultant array after applying all queries. # Create a difference array diff = [0] * (n + 1) for l, r, v in queries: diff[l - 1] += v if r < n: diff[r] -= v # Apply the differences to the original array current_addition = 0 for i in range(n): current_addition += diff[i] arr[i] += current_addition return arr"},{"question":"Given an array of integers, determine if there are three elements in the array that form an arithmetic progression. An arithmetic progression is a set of numbers in which the difference of any two successive members is a constant. Example 1: Input: arr = [1, 3, 5, 7, 9] Output: True Explanation: The triplet (1, 5, 9) forms an arithmetic progression with a common difference of 4. Example 2: Input: arr = [2, 4, 7, 11, 14] Output: False Explanation: There are no three elements that form an arithmetic progression. Your Task: You don\'t need to read input or print anything. Complete the function `hasArithmeticTriplet()` which takes the array `arr` as input and returns `True` if there exists a triplet that forms an arithmetic progression, otherwise return `False`. Expected Time Complexity: O(n^2). Expected Auxiliary Space: O(1). Constraints: - 1 <= arr.length <= 10^3 - -10^3 <= arr[i] <= 10^3","solution":"def has_arithmetic_triplet(arr): Determine if there are three elements in the array that form an arithmetic progression. Parameters: arr (list): List of integers Returns: bool: True if there exists a triplet forming an arithmetic progression, otherwise False arr_len = len(arr) if arr_len < 3: return False arr.sort() for i in range(arr_len - 2): for j in range(i + 1, arr_len - 1): diff = arr[j] - arr[i] if arr[j] + diff in arr: return True return False"},{"question":"You are given a list of integers that represent the heights of buildings standing in a line. We have to work with a water droplet that starts from the first building and moves towards the last building. The water droplet can only move to the next building if it is of the same height or lower than the current building. Your task is to determine if the water droplet can reach from the first building to the last. Input - Line 1: An integer n (2 ≤ n ≤ 1000), representing the number of buildings. - Line 2: n integers separated by space, representing the heights of the buildings. Output - Print \\"YES\\" if the water droplet can travel from the first building to the last building, otherwise print \\"NO\\". Example Input 5 1 2 2 3 1 Output YES Input 4 3 4 2 1 Output NO Explanation In the first example, the water droplet starts at the first building (height 1), moves to the second building (height 2), moves to the third building (height 2), and then to the fourth building (height 3), and finally to the last building (height 1). The droplet can travel all the way to the last building. In the second example, the water droplet starts at the first building (height 3), but it cannot move to the second building (height 4) because the height is higher. Therefore, it cannot reach the last building.","solution":"def can_water_droplet_reach_end(n, heights): Determines if the water droplet can reach from the first building to the last. Parameters: n (int): The number of buildings. heights (List[int]): The list of building heights. Returns: str: \\"YES\\" if the water droplet can travel from the first building to the last, otherwise \\"NO\\". for i in range(1, n): if heights[i] > heights[i-1]: return \\"NO\\" return \\"YES\\""},{"question":"Given a list of positive integers, identify the number that appears an odd number of times. It is guaranteed that exactly one integer in the list appears an odd number of times, while all others appear an even number of times. Example 1: Input: arr = [4, 3, 4, 4, 4, 5, 5, 5, 3] Output: 5 Explanation: Number 5 appears 3 times, which is odd. Example 2: Input: arr = [1, 2, 2, 3, 1, 3, 3] Output: 3 Explanation: Number 3 appears 3 times, which is odd. Your task: You don\'t need to read input or print anything. Your task is to complete the function findOddOccurrence() which takes a list of integers as an input and returns the integer that appears an odd number of times. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^5 1 <= arr[i] <= 10^5","solution":"def findOddOccurrence(arr): Given a list of integers where exactly one integer appears an odd number of times while all others appear an even number of times, this function returns the integer that appears an odd number of times. result = 0 for num in arr: result ^= num return result"},{"question":"In the enchanted forest, there is a magical tree that blooms with a specific pattern based on the time of day. The tree has several buds that can bloom into flowers. Each bud has a specific energy level required for it to bloom. You have a set amount of magic points to spend to bloom these buds. The challenge is to maximize the number of flowers by strategically spending your magic points. Given the energy levels of the buds and the available magic points, write a program that determines the maximum number of buds that can be bloomed. Each bud\'s energy requirement and your total available magic points are given as input. You need to find out the maximum number of buds that can bloom without exceeding the available magic points. -----Input----- The input consists of two lines: 1. The first line contains an integer N (1 leq N leq 1000), the number of buds on the tree, and an integer M (1 leq M leq 10^6), the total available magic points. 2. The second line contains N integers e_1, e_2, ..., e_N (1 leq e_i leq 10^6), where e_i represents the energy requirement of the i^{th} bud. -----Output----- Output a single integer representing the maximum number of buds that can be bloomed. -----Examples----- Sample Input 1: 5 10 2 2 2 3 4 Sample Output 1: 4 Sample Input 2: 4 5 5 5 5 5 Sample Output 2: 1 Sample Input 3: 6 15 1 2 3 4 5 6 Sample Output 3: 5","solution":"def max_bloomed_buds(N, M, energy_levels): Returns the maximum number of buds that can be bloomed without exceeding the available magic points. Parameters: N (int): Number of buds on the tree. M (int): Total available magic points. energy_levels (list of ints): A list containing the energy requirement of each bud. Returns: int: Maximum number of buds that can be bloomed. energy_levels.sort() total_energy = 0 count = 0 for energy in energy_levels: if total_energy + energy <= M: total_energy += energy count += 1 else: break return count"},{"question":"A coding competition organizer realized that some participants submitted scripts with similar variable names that might be confusing for others to understand the flow. In order to improve code readability, he came up with a rule: all variable names should follow a predefined naming convention. Write a function that takes as input a string which is a single line of code containing variable declarations and assignments, and returns the line of code with all variable names converted to snake_case. Snake_case is a naming convention where the variable name is written in all lowercase and words are separated by underscores. Input: - A single line of code containing variable declarations and assignments. The input string consists of one or more variable declarations and/or assignments, and each variable name follows camelCase, where words are concatenated without spaces, and each word after the first begins with a capital letter. Output: - A single line of code with variable names converted to snake_case. Constraints: - All variable names in the input will follow the camelCase convention. - The input will contain valid variable declarations and assignments as per standard programming syntax. - The input will not contain any other lines of code outside the declaration and assignment statements. Examples: Input: `int myVariable = 5;` Output: `int my_variable = 5;` Input: `float anotherExampleVariable = 3.14;` Output: `float another_example_variable = 3.14;` Input: `int firstVar = 1, secondVar = 2, anotherVar = firstVar + secondVar;` Output: `int first_var = 1, second_var = 2, another_var = first_var + second_var;`","solution":"import re def camel_to_snake_case(code): Convert all variable names in the provided code from camelCase to snake_case. Parameters: code (str): A single line of code containing variable declarations and assignments. Returns: str: The code with variables converted to snake_case. def replacer(match): return match.group(1) + \'_\' + match.group(2).lower() # This pattern searches for camel case variable names pattern = re.compile(r\'([a-z0-9])([A-Z])\') while re.search(pattern, code): code = re.sub(pattern, replacer, code) return code.lower()"},{"question":"A company has k manufacturing plants, each producing a different product. These plants are connected by a network of roads, allowing trucks to transport goods between any two plants. The road network has n plants and m bidirectional roads. Each road connects two different plants, and every pair of plants has a path that links them. However, each road has a maximum load capacity. If the total weight of the goods transported on a road exceeds its capacity, the road will break down. A road-breaking event is catastrophic, as it will disrupt the delivery of goods. Given the maximum load capacity of each road and the weight of goods each plant needs to deliver to another plant, determine whether it\'s possible to deliver all goods without breaking any roads. Input The first line contains two integers, n (number of plants) and m (number of roads), separated by a space. The next m lines contain three integers each: u, v, and c, representing a road between plants u and v with maximum capacity c. The following line contains an integer k, the number of deliveries to be made. The next k lines each contain three integers: si, ti, and wi, where si is the source plant, ti is the target plant, and wi is the weight of goods to be transported from plant si to plant ti. Output Output \\"YES\\" if all deliveries can be completed without exceeding any road\'s load capacity. Otherwise, output \\"NO\\". Constraints 1 ≤ n, m ≤ 200 1 ≤ u, v, si, ti ≤ n 1 ≤ c, wi ≤ 1000 1 ≤ k ≤ 200 Example Input 5 6 1 2 500 2 3 600 3 4 300 4 5 400 1 3 700 2 5 200 4 1 5 200 2 4 100 3 1 300 5 2 150 Output YES Note In the given example, all roads have enough capacity to handle the given deliveries without breaking down.","solution":"def can_deliver_goods(n, m, roads, k, deliveries): from collections import defaultdict import heapq def dijkstra(source, target, graph): min_heap = [(0, source)] distances = {i: float(\'inf\') for i in range(1, n + 1)} distances[source] = 0 while min_heap: cur_dist, u = heapq.heappop(min_heap) if u == target: return distances if cur_dist > distances[u]: continue for v, capacity in graph[u]: weight = max(distances[u], capacity) if weight < distances[v]: distances[v] = weight heapq.heappush(min_heap, (weight, v)) return distances graph = defaultdict(list) for u, v, c in roads: graph[u].append((v, c)) graph[v].append((u, c)) for si, ti, wi in deliveries: min_capacity = dijkstra(si, ti, graph)[ti] if min_capacity < wi: return \\"NO\\" return \\"YES\\" # Example usage of the function n = 5 m = 6 roads = [ (1, 2, 500), (2, 3, 600), (3, 4, 300), (4, 5, 400), (1, 3, 700), (2, 5, 200), ] k = 4 deliveries = [ (1, 5, 200), (2, 4, 100), (3, 1, 300), (5, 2, 150) ] print(can_deliver_goods(n, m, roads, k, deliveries)) # Output: YES"},{"question":"You are developing a new analytics dashboard, and one of its features is to track the frequency of words used in reports. Write a function that takes a string and returns a dictionary where the keys are words and the values are the number of times each word appears in the string. The function should be case-insensitive, and you can assume that the string only contains alphabetic characters and spaces. **Examples:** ```python word_count(\\"The cat in the hat\\") # => {\\"the\\": 2, \\"cat\\": 1, \\"in\\": 1, \\"hat\\": 1} word_count(\\"a big cat and a small cat\\") # => {\\"a\\": 2, \\"big\\": 1, \\"cat\\": 2, \\"and\\": 1, \\"small\\": 1} ```","solution":"def word_count(s): Returns a dictionary with the count of each word in the input string. The function is case-insensitive. Parameters: s (str): The input string containing words. Returns: dict: A dictionary where the keys are words and the values are counts. s = s.lower() words = s.split() counts = {} for word in words: counts[word] = counts.get(word, 0) + 1 return counts"},{"question":"You are an avid explorer and have come across a hidden valley with multiple ancient ruins. Each ruin has treasures you can collect, but the path to each ruin is treacherous with traps that slow your progress. Your goal is to collect all treasures from each ruin while minimizing the overall time spent traversing the valley. The valley is represented as a grid, where each cell either contains a ruin with treasures or an empty space. Each step in any of the four cardinal directions (north, south, east, west) from one cell to another takes a certain amount of time, influenced by the weight of the treasures collected so far. You start at a specific cell on the grid and must decide the order in which you will visit the ruins to minimize the total travel time. The time it takes to move to adjacent cells increases with the total weight of the treasures you are carrying. Write a program to determine the optimal order to visit all ruins, minimizing the total travel time. Input The input will be given in the following format: m n m1 n1 w1 m2 n2 w2 :: mk nk wk sx sy The first line contains two integers m and n (1 ≤ m, n ≤ 100), representing the dimensions of the grid. The next k lines each contain three integers mi, ni, and wi (1 ≤ mi ≤ m, 1 ≤ ni ≤ n, 1 ≤ wi ≤ 1000), representing the row, column, and weight of treasures in the ith ruin. The last line contains two integers sx and sy (1 ≤ sx ≤ m, 1 ≤ sy ≤ n), representing your starting position in the grid. Output Output the optimal visiting order of the ruins on one line. Each ruin should be represented by its grid coordinates (row and column), separated by a space. If there are multiple solutions, output any. Examples Input 5 5 2 3 10 4 4 20 1 1 5 3 2 15 4 1 25 3 3 Output 1 1 2 3 3 2 4 4 4 1 Input 3 4 1 2 5 3 3 15 2 1 10 2 3 Output 3 1 1 2 3 3","solution":"from itertools import permutations def compute_travel_time(path, ruins, start): Compute the travel time for a given path starting from `start`. def manhattan_dist(p1, p2): return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]) total_time, current_pos, collected_weight = 0, start, 0 for r in path: time_to_next = manhattan_dist(current_pos, r) total_time += time_to_next * (1 + collected_weight) collected_weight += ruins[r] current_pos = r return total_time def optimal_ruins_visiting_order(m, n, ruins, start): Determines the optimal order to visit all ruins. ruin_coords = list(ruins.keys()) best_order, min_time = None, float(\'inf\') for perm in permutations(ruin_coords): time = compute_travel_time(perm, ruins, start) if time < min_time: min_time = time best_order = perm return \\" \\".join(f\\"{x[0]} {x[1]}\\" for x in best_order) def main(grid_info): lines = grid_info.strip().split(\'n\') m, n = map(int, lines[0].strip().split()) ruins = {} line_index = 1 while \' \' in lines[line_index]: mi, ni, wi = map(int, lines[line_index].strip().split()) ruins[(mi, ni)] = wi line_index += 1 sx, sy = map(int, lines[line_index].strip().split()) start = (sx, sy) print(optimal_ruins_visiting_order(m, n, ruins, start))"},{"question":"The kingdom of Graphlandia is planning to build a new transportation network of roads connecting its cities. The kingdom has decided to use a system of weighted, undirected edges to represent the roads, where each edge connects two distinct cities and has a certain cost associated with it. You are given a list of cities and a set of possible roads, each with a cost. The objective is to build a minimum cost transportation network that connects all the cities using a subset of the possible roads. Given that the total number of cities is small, a greedy approach will be feasible. Your task is to calculate the minimum cost required to connect all the cities in the kingdom. If it is not possible to connect all the cities using the given roads, return `-1`. Input The first line contains two integers n and m (1 ≤ n ≤ 100, 1 ≤ m ≤ 10000) — the number of cities and the number of possible roads. Each of the next m lines contains three integers a, b, and c (1 ≤ a, b ≤ n, 1 ≤ c ≤ 10000) — indicating that there is a road connecting cities a and b with cost c. Output Print the minimum cost required to connect all the cities, or `-1` if it is not possible. Examples Input 4 5 1 2 3 2 3 4 3 4 5 1 3 6 1 4 7 Output 12 Input 3 3 1 2 1 2 3 2 3 1 3 Output 3 Input 4 2 1 2 1 3 4 1 Output -1","solution":"def find_parent(parent, i): if parent[i] == i: return i return find_parent(parent, parent[i]) def union(parent, rank, x, y): root_x = find_parent(parent, x) root_y = find_parent(parent, y) if rank[root_x] < rank[root_y]: parent[root_x] = root_y elif rank[root_x] > rank[root_y]: parent[root_y] = root_x else: parent[root_y] = root_x rank[root_x] += 1 def kruskal(n, roads): result = [] i, e = 0, 0 roads = sorted(roads, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(roads): break u, v, w = roads[i] i += 1 x = find_parent(parent, u - 1) y = find_parent(parent, v - 1) if x != y: e += 1 result.append((u, v, w)) union(parent, rank, x, y) if e != n - 1: return -1 minimum_cost = sum([weight for _, _, weight in result]) return minimum_cost def min_cost_to_connect_all_cities(n, m, edges): roads = [] for edge in edges: a, b, c = edge roads.append((a, b, c)) return kruskal(n, roads)"},{"question":"Given a string of brackets, determine if the string is valid. A string of brackets is considered valid if: 1. It is an empty string, or: 2. It can be written as `AB` (where A and B are valid strings), or: 3. It can be written as `left(Aright)` or `left[ Aright]` or `left{Aright}` (where A is a valid string). You need to write a function `isValid` that checks whether the given string of brackets is valid or not. -----Input----- A single string s containing only the characters ‘(’, ‘)’, ‘[’, ‘]’, ‘{’, ‘}’. The length of s is at most 10^4. -----Output----- Output `True` if the string s is valid, otherwise output `False`. -----Examples----- Sample Input: ``` () ``` Sample Output: ``` True ``` Sample Input: ``` ([]){} ``` Sample Output: ``` True ``` Sample Input: ``` ([)] ``` Sample Output: ``` False ``` Sample Input: ``` ( ``` Sample Output: ``` False ```","solution":"def isValid(s): Check if the given string of brackets is valid. stack = [] bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} for char in s: if char in bracket_map: top_element = stack.pop() if stack else \'#\' if bracket_map[char] != top_element: return False else: stack.append(char) return not stack"},{"question":"Given a positive integer N. The problem is to print the next smallest integer greater than N which is a prime and contains only prime digits (2, 3, 5, 7). Example 1: Input: N = 10 Output: 23 Explanation: The next prime number after 10 is 11. However, 11 contains the digit 1, which is not a prime digit. Hence, we look for the next prime number which is 23 where all digits are prime. Example 2: Input: N = 30 Output: 37 Explanation: The next prime number after 30 is 31. However, 31 contains the digit 1, which is not a prime digit. Hence, we look for the next prime number which is 37 where all digits are prime. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findNextPrimeWithPrimeDigits() which takes the integer N as input parameter and returns the next smallest prime greater than N that consists of only prime digits. Expected Time Complexity: O(n * sqrt(n)) Expected Auxiliary Space: O(1) CONSTRAINTS: 1<= N <=10^{5}","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def has_only_prime_digits(num): prime_digits = {\'2\', \'3\', \'5\', \'7\'} return all(digit in prime_digits for digit in str(num)) def findNextPrimeWithPrimeDigits(N): num = N + 1 while True: if is_prime(num) and has_only_prime_digits(num): return num num += 1"},{"question":"Given a string containing a binary number, write a function to find the longest contiguous sequence of 1s in the binary representation of the number. Example 1: Input: binary_str = \\"110011111010111\\" Output: 5 Explanation: The longest contiguous sequence of 1s occurs from index 4 to index 8. Example 2: Input: binary_str = \\"1000000\\" Output: 1 Explanation: The longest contiguous sequence of 1s is at index 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `longest_contiguous_ones()` which takes a string `binary_str` as input and returns an integer representing the length of the longest contiguous sequence of 1s. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= len(binary_str) <= 10^6","solution":"def longest_contiguous_ones(binary_str): Returns the length of the longest contiguous sequence of 1s in the binary representation. max_length = 0 current_length = 0 for char in binary_str: if char == \'1\': current_length += 1 if current_length > max_length: max_length = current_length else: current_length = 0 return max_length"},{"question":"You are given n points (x_1, y_1), (x_2, y_2), ..., (x_n, y_n) lying on a 2D plane. Your task is to find the number of unique right-angled triangles that can be formed such that all the vertices of the triangle are among the given n points and the sides of the triangles are parallel to the coordinate axes. Input Format The first line contains a single integer, n, denoting the number of points. Each of the n subsequent lines contains two space-separated integers, x_i and y_i (1 leq x_i, y_i leq 10^9), representing the coordinates of point i. Constraints 1 leq n leq 10^5 Output Format Print a single integer denoting the number of unique right-angled triangles that can be formed under the given conditions. Sample Input 4 1 2 2 2 2 3 3 3 Sample Output 2 Explanation There are 2 unique right-angled triangles that can be formed: - Triangle with vertices (1, 2), (2, 2), (2, 3). - Triangle with vertices (2, 2), (2, 3), (3, 3). Thus, we print 2 as our output.","solution":"def count_unique_right_angled_triangles(points): from collections import defaultdict # Using defaultdict to count occurrences of each x and y x_count = defaultdict(int) y_count = defaultdict(int) # Count occurrences of each x and y coordinate for x, y in points: x_count[x] += 1 y_count[y] += 1 count = 0 # For each point, calculate the number of right-angled triangles it can form for x, y in points: count += (x_count[x] - 1) * (y_count[y] - 1) return count def process_input(): import sys input = sys.stdin.read data = input().split() # Read number of points n = int(data[0]) points = [] # Read each point for i in range(1, len(data), 2): x = int(data[i]) y = int(data[i + 1]) points.append((x, y)) # Output the result print(count_unique_right_angled_triangles(points))"},{"question":"You are organizing a science fair and each project should be assigned to a specific category. There are five categories: Physics, Chemistry, Biology, Computer Science, and Engineering. Given a list of categories that have already been assigned, determine the names of the categories that are still available for assignment. -----Input----- The first line contains an integer n (0 le n le 5) — the number of assigned categories. The following n lines contain the names of the assigned categories, each on a new line. The names used are: Physics, Chemistry, Biology, Computer Science, Engineering. It is guaranteed that all names are distinct and each category name starts with an uppercase letter. -----Output----- The first line should output one integer m (0 le m le 5) — the number of available categories. Then in m lines print the names of the available categories, each on its own line. The names can be printed in any order. -----Examples----- Input 3 Biology Engineering Physics Output 2 Chemistry Computer Science Input 0 Output 5 Physics Chemistry Biology Computer Science Engineering -----Note----- In the first sample, the categories Biology, Engineering, and Physics have already been assigned, so the remaining available categories are Chemistry and Computer Science. In the second sample, no categories have been assigned, so all categories are available.","solution":"def available_categories(n, assigned_categories): Determine the available categories for assignment. Args: n (int): The number of assigned categories. assigned_categories (list): A list of assigned categories. Returns: tuple: A tuple containing the number of available categories and a list of available categories. all_categories = {\\"Physics\\", \\"Chemistry\\", \\"Biology\\", \\"Computer Science\\", \\"Engineering\\"} assigned_set = set(assigned_categories) available_set = all_categories - assigned_set return len(available_set), list(available_set) # Example usage: # n = 3 # assigned_categories = [\\"Biology\\", \\"Engineering\\", \\"Physics\\"] # print(available_categories(n, assigned_categories))"},{"question":"Write a function that takes a list of integers and returns the list in a wave-like pattern. In a wave-like pattern, the elements of the list are arranged such that the first element is greater than the second, the second is less than the third, and so on. Specifically, the converted list should satisfy the condition `list[i] >= list[i+1]` if `i` is even, and `list[i] <= list[i+1]` if `i` is odd. For example, if the input list is `[3, 6, 5, 10, 7, 20]`, the wave-like pattern output would be `[6, 3, 10, 5, 20, 7]`. Input A single line with space-separated integers representing the elements of the list. Output A single line with space-separated integers representing the elements of the list in the desired wave-like pattern. Constraints You may assume the input list contains at least two elements. Example Input: `3 6 5 10 7 20` Output: `6 3 10 5 20 7`","solution":"def wave_sort(arr): Convert the input list into a wave-like pattern. Elements at even indices should be >= next elements. Elements at odd indices should be <= next elements. n = len(arr) for i in range(0, n-1, 2): if i < n-1 and arr[i] < arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] if i+1 < n-1 and arr[i+1] > arr[i+2]: arr[i+1], arr[i+2] = arr[i+2], arr[i+1] return arr # Example usage # arr = [3, 6, 5, 10, 7, 20] # print(wave_sort(arr)) # Output should be [6, 3, 10, 5, 20, 7]"},{"question":"Given an array of integers representing the heap structure of a complete binary tree, you need to determine if the array represents a valid min heap. In a min heap, each parent node is less than or equal to its child nodes. Input: - An array A[] of size N representing the heap elements stored in a level-order manner (i.e., top-down, left-right). Output: - Print \\"YES\\" if the array represents a valid min heap, otherwise print \\"NO\\". Example 1: ``` Input: N = 6 A[] = {3, 5, 9, 6, 8, 20} Output: YES Explanation: The given array represents the following binary tree: 3 / 5 9 / / 6 8 20 As we can see, all parent nodes are less than or equal to their child nodes. Hence, the output is \\"YES\\". ``` Example 2: ``` Input: N = 5 A[] = {10, 15, 14, 25, 30} Output: YES Explanation: The given array represents the following binary tree: 10 / 15 14 / 25 30 As we can see, all parent nodes are less than or equal to their child nodes. Hence, the output is \\"YES\\". ``` Example 3: ``` Input: N = 4 A[] = {5, 9, 7, 6} Output: NO Explanation: The given array represents the following binary tree: 5 / 9 7 / 6 As we can see, the parent node 5 is less than its right child 7, but not less than its left child 9. Hence, the output is \\"NO\\". ``` Your Task: - You don\'t need to read input or print anything. Your task is to complete the function `isMinHeap()` which takes an array A[] and N as input parameters and returns a string \\"YES\\" or \\"NO\\" based on whether the array represents a valid min heap or not. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1)","solution":"def isMinHeap(A, N): Determines if an array represents a valid min heap. # Iterate over all internal nodes for i in range((N - 2) // 2 + 1): # Check if left child is greater if 2 * i + 1 < N and A[i] > A[2 * i + 1]: return \\"NO\\" # Check if right child is greater if 2 * i + 2 < N and A[i] > A[2 * i + 2]: return \\"NO\\" return \\"YES\\""},{"question":"A company wants to manage its product orders more efficiently. Each product order consists of items, and each item has a quantity and a price associated with it. Given a list of product orders, the company wants to determine the total revenue generated from all the orders. You are given a list of product orders. Each order is represented by a list of items, and each item is represented by a tuple containing the quantity and price. Write a program that calculates and prints the total revenue generated from all the orders. -----Input----- The first line of the input contains a single integer n (1 ≤ n ≤ 10^5) — the number of orders. The next n lines describe each order. Each order starts with an integer m (1 ≤ m ≤ 10^4) — the number of items in the order, followed by m tuples (quantity, price) where 1 ≤ quantity, price ≤ 10^4. -----Output----- Output a single integer — the total revenue generated from all the orders. -----Example----- Input 2 3 (2, 100) (1, 200) (5, 70) 2 (4, 50) (3, 100) Output 1150 -----Explanation----- In the first order, the total revenue is: (2 * 100) + (1 * 200) + (5 * 70) = 200 + 200 + 350 = 750. In the second order, the total revenue is: (4 * 50) + (3 * 100) = 200 + 300 = 500. The total revenue from both orders is 750 + 500 = 1250.","solution":"def calculate_total_revenue(orders): Calculate the total revenue generated from a list of product orders. :param orders: List of orders where each order is a list of tuples. Each tuple contains (quantity, price). :return: Total revenue as an integer. total_revenue = 0 for order in orders: for item in order: quantity, price = item total_revenue += quantity * price return total_revenue # Example usage: # orders = [ # [(2, 100), (1, 200), (5, 70)], # [(4, 50), (3, 100)] # ] # print(calculate_total_revenue(orders)) # Output: 1250"},{"question":"You are given an array of integers representing different coin denominations and a target amount. Your task is to determine the minimum number of coins needed to make the target amount. If it is not possible to make the target amount with the given coins, return `-1`. # Input: * Array of coin denominations `(1 <= d <= 1000)` * Target amount `(1 <= t <= 10000)` # Output: * Minimum number of coins required to make the target amount, or `-1` if it is not possible. # Examples: ``` minCoins([1, 2, 5], 11) -> 3 # 11 can be made with 5+5+1 ``` ``` minCoins([2], 3) -> -1 # 3 cannot be made with any combination of 2 ``` Do not expect any invalid or negative inputs.","solution":"def minCoins(coins, target): Returns the minimum number of coins required to make the target amount, or -1 if it is not possible. # Initialize DP array with a large number (inf) dp = [float(\'inf\')] * (target + 1) dp[0] = 0 # Base case, 0 coins needed to make 0 amount # Iterate through each coin for coin in coins: for amount in range(coin, target + 1): if dp[amount - coin] != float(\'inf\'): dp[amount] = min(dp[amount], dp[amount - coin] + 1) # If we cannot form the target amount, return -1 return dp[target] if dp[target] != float(\'inf\') else -1"},{"question":"You are given a railway timetable containing train schedules for various routes. Each route is identified by its start and end stations, along with an array of departure times for the train from the start station. You are tasked with writing a program that answers queries about the earliest possible departure time from a given start to a given end station within specified bounds. A route may contain multiple departure times, and each query will ask for the next available train after a given time. # Input - The first part consists of the routes and their schedules. - The first line contains an integer `N` (1 ≤ N ≤ 1000) representing the number of train routes. - For each of the next `N` lines, there\'s a string `S1`, a string `S2`, and an integer `T` (1 ≤ T ≤ 100). - `S1` and `S2` are the start and end stations respectively. - The next input line contains `T` integers representing the departure times in ascending order. Each time will be in the range (0 ≤ time ≤ 1440) indicating minutes past midnight. - The second part consists of the queries. - The first line contains an integer `Q` (1 ≤ Q ≤ 1000) representing the number of queries. - Each of the next `Q` lines contains a string `S1`, a string `S2`, and an integer `P` (0 ≤ P ≤ 1440) indicating a query for the next available train departing from station `S1` to station `S2` strictly after time `P`. # Output For each query, output a single integer representing the next available train time. If there is no such train, output `-1`. # Example Input ``` 3 A B 5 5 15 25 35 55 B C 4 60 120 180 240 A C 3 100 200 300 3 A B 10 A C 50 B C 80 ``` Output ``` 15 100 120 ``` # Explanation In the first query, the next train from A to B after 10 (which is 10 minutes past midnight) is at 15. In the second query, the next train from A to C after 50 is at 100. In the third, the next train from B to C after 80 is at 120.","solution":"def next_train_schedule(routes, queries): This function finds the next train schedule based on the provided routes and queries. :param routes: Dictionary with key as (start, end) tuple and value as list of departure times. :param queries: List of (start, end, departure time) tuples. :return: List of earliest possible departure times for each query. results = [] for start, end, time in queries: route_key = (start, end) if route_key in routes: departure_times = routes[route_key] # Finding the earliest time strictly after `time` next_time = next((t for t in departure_times if t > time), -1) results.append(next_time) else: results.append(-1) return results def process_input(input_data): lines = input_data.strip().split(\'n\') N = int(lines[0]) routes = {} index = 1 for _ in range(N): S1, S2, T = lines[index].split() T = int(T) times = list(map(int, lines[index + 1].split())) routes[(S1, S2)] = times index += 2 Q = int(lines[index]) queries = [] for i in range(1, Q + 1): S1, S2, P = lines[index + i].split() queries.append((S1, S2, int(P))) return routes, queries def find_next_trains(input_data): routes, queries = process_input(input_data) return next_train_schedule(routes, queries)"},{"question":"You are given a grid with n rows and m columns. Each cell in the grid can either be empty or contain an obstacle. A person standing in an empty cell can move to another empty cell by taking a step either to the right, left, up, or down. You have to implement a function `number_of_islands` that determines the number of disconnected groups of empty cells in this grid (these groups are also known as islands). Two cells are considered connected if: - They are adjacent (sharing a side, not a corner). - Both cells are empty. -----Input----- The input contains multiple test cases. - The first line contains an integer t (1 le t le 10), the number of test cases. - For each test case, the first line contains two integers n and m (1 le n, m le 100), the number of rows and columns. - The next n lines describe the grid, each with m characters. Each character is either a `.` (empty cell) or `#` (obstacle). -----Output----- For each test case, print a single integer representing the number of islands in the given grid. -----Example----- Input 3 5 5 ... #..#. #..#. ... # 4 4 #..# #..# 1 1 # Output 3 1 0 -----Note----- In the first test case, there are 3 disconnected groups of empty cells: 1. The top left 2x2 cells. 2. The single cell in the middle. 3. The cells in the bottom right corner ( next to each other ). In the second test case, all empty cells are connected, so there\'s only 1 island. In the third test case, there are no empty cells, hence 0 islands.","solution":"def number_of_islands(t, test_cases): def dfs(grid, visited, i, j, rows, cols): stack = [(i, j)] directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] while stack: x, y = stack.pop() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True stack.append((nx, ny)) results = [] for test_case in test_cases: n, m = test_case[\'dimensions\'] grid = test_case[\'grid\'] visited = [[False for _ in range(m)] for _ in range(n)] island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\' and not visited[i][j]: island_count += 1 visited[i][j] = True dfs(grid, visited, i, j, n, m) results.append(island_count) return results"},{"question":"A librarian needs to organize a digital library system. Initially, he has a database where he stores books, each identified by a unique integer ID, and classified under specific genres. The genres are not fixed and can change over time. Each genre can have multiple books, and one book can belong to multiple genres. The librarian needs a system to efficiently process two types of operations: 1. Associate a new book with a particular genre. 2. Retrieve a list of all book IDs sorted in ascending order for a given genre. You are tasked with implementing this system. For each operation, you need to support: - Adding a book to a genre. - Querying the list of books in a particular genre, sorted in ascending order. Input Format - The first line contains an integer, Q, the number of operations to be performed. - Each of the next Q lines describes one of the following operations: - To associate a book with a genre: \\"ADD book_id genre_name\\". - To retrieve the list of books in a genre: \\"QUERY genre_name\\". Output Format - For each \\"QUERY genre_name\\" operation, output a single line containing the list of book IDs sorted in ascending order for the specified genre. If the genre has no books, return an empty list represented as \\"[]\\". Constraints - 1 leq Q leq 10^5 - 1 leq text{book_id} leq 10^9 - 1 leq text{length of genre_name} leq 100 - Each book_id and genre_name in the inputs will consist of valid alphanumeric characters. Sample Input 8 ADD 100 Science ADD 200 Fiction ADD 150 Science QUERY Science ADD 120 Literature ADD 110 Fiction QUERY Fiction QUERY Literature Sample Output [100, 150] [110, 200] [120] Explanation 1. After the first three \\"ADD\\" operations, the \\"Science\\" genre has books with IDs [100, 150]. 2. The \\"QUERY Science\\" operation returns [100, 150]. 3. Two more \\"ADD\\" operations result in \\"Fiction\\" genre having books [110, 200] and \\"Literature\\" genre having [120]. 4. The \\"QUERY Fiction\\" operation returns [110, 200]. 5. The \\"QUERY Literature\\" operation returns [120].","solution":"from collections import defaultdict class DigitalLibrarySystem: def __init__(self): self.genre_to_books = defaultdict(set) def add_book(self, book_id, genre_name): self.genre_to_books[genre_name].add(book_id) def query_genre(self, genre_name): if genre_name in self.genre_to_books: return sorted(self.genre_to_books[genre_name]) else: return [] def process_operations(operations): library_system = DigitalLibrarySystem() results = [] for operation in operations: parts = operation.split() if parts[0] == \\"ADD\\": book_id = int(parts[1]) genre_name = parts[2] library_system.add_book(book_id, genre_name) elif parts[0] == \\"QUERY\\": genre_name = parts[1] result = library_system.query_genre(genre_name) results.append(result) return results"},{"question":"A new online gaming company wants to design a game where a player can move a character on a two-dimensional grid. The grid is composed of N rows and M columns, and initially, the character is positioned at the top-left corner of the grid (i.e., at cell (1,1)). The player can move the character either to the right or down. The objective is to determine the number of unique paths the character can take to reach the bottom-right corner of the grid (i.e., at cell (N,M)). Example 1: Input: N = 2 M = 2 Output: 2 Explanation: There are two ways for the character to reach the bottom-right corner: 1. Right -> Down 2. Down -> Right Example 2: Input: N = 3 M = 3 Output: 6 Explanation: There are six ways for the character to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Right -> Down -> Right -> Down 3. Right -> Down -> Down -> Right 4. Down -> Right -> Right -> Down 5. Down -> Right -> Down -> Right 6. Down -> Down -> Right -> Right Your Task: You don\'t need to read input or print anything. Your task is to complete the function uniquePaths() which takes two integers N and M and returns the number of unique paths. Constraints: 1 ≤ N, M ≤ 100","solution":"def uniquePaths(N, M): Returns the number of unique paths to reach from top-left corner to bottom-right corner on a N x M grid. # Create a 2D list to store the number of paths to reach each cell. dp = [[0 for _ in range(M)] for _ in range(N)] # There is only one way to move right along the first row and only one way to move # down along the first column. for i in range(N): dp[i][0] = 1 for j in range(M): dp[0][j] = 1 # Fill the dp table by calculating the number of ways to get to each cell. for i in range(1, N): for j in range(1, M): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[N-1][M-1]"},{"question":"Ayman wants to organize his books into unique stacks based on their genres. He has a collection of n books, and each book has a label indicating its genre. Create a solution to help Ayman determine if it\'s possible to rearrange his books so that no two consecutive books have the same genre label. -----Input----- The first line of the input contains an integer t (1 leq t leq 10) — the number of test cases. Each test case starts with an integer n (2 leq n leq 100) — the number of books. The next line contains n space-separated integers g_1, g_2, ldots, g_n (1 leq g_i leq 1000) — the genre labels of the books. -----Output----- For each test case, output \\"YES\\" if Ayman can rearrange the books such that no two consecutive books have the same genre label. Otherwise, output \\"NO\\". You may print each letter in any case (upper or lower). -----Examples----- Input 3 5 1 2 2 3 3 4 4 4 4 4 6 1 1 2 2 3 3 Output YES NO YES -----Note----- In the first test case, one possible arrangement is \\"2 1 3 2 3\\", where no two consecutive books have the same genre label. In the second test case, it is not possible to rearrange the books to avoid consecutive duplicates because all books have the same genre label. In the third test case, one possible arrangement is \\"1 2 1 3 2 3\\", where no two consecutive books have the same genre label.","solution":"def can_rearrange_books(t, test_cases): results = [] for case in test_cases: n, genres = case genre_count = {} for genre in genres: if genre in genre_count: genre_count[genre] += 1 else: genre_count[genre] = 1 max_count = max(genre_count.values()) if max_count > (n + 1) // 2: results.append(\\"NO\\") else: results.append(\\"YES\\") return results"},{"question":"Given a sequence of distinct integers, find if there exists a 132 pattern in the sequence. A 132 pattern in a sequence is defined when there exists three indices i, j, and k such that i < j < k and seq[i] < seq[k] < seq[j]. Your task is to write a function to detect 132 patterns in the given sequence. Input A list of n integers, where 1 ≤ n ≤ 10^5. Each integer in the list is distinct. Output Return \\"True\\" if there is a 132 pattern in the sequence, else return \\"False\\". Examples Input [1, 2, 3, 4] Output False Input [3, 1, 4, 2] Output True Explanation In the second example, 132 pattern is (1, 4, 2).","solution":"def find132pattern(nums): Given a list of distinct integers, determine if there exists a 132 pattern. Arguments: nums -- list of distinct integers Return: True if a 132 pattern exists, else False if len(nums) < 3: return False stack = [] s3 = float(\'-inf\') # This will be the \'2\' in the 132 pattern # Traverse from the end to the beginning for i in range(len(nums) - 1, -1, -1): if nums[i] < s3: return True while stack and stack[-1] < nums[i]: s3 = stack.pop() stack.append(nums[i]) return False"},{"question":"Sara has a set of `n` unique integers and wants to create a new sequence by choosing a subset of these integers such that the sum of the sequence is the maximum possible sum that is less than or equal to a given integer `S`. Your task is to help Sara determine the sum of this best possible subset. Input The first line contains two integers `n` (1 ≤ n ≤ 100) and `S` (1 ≤ S ≤ 10^5) — the number of unique integers in the set and the maximum possible sum of the sequence, respectively. The second line contains `n` space-separated integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) — the unique integers in the set. Output Print a single integer — the maximum sum of the chosen subset that is less than or equal to `S`. Example Input 5 10 2 3 5 8 1 Output 10 Input 5 11 2 3 5 8 1 Output 11 Input 3 7 3 4 5 Output 7 Note In the first example, you can choose the subset {2, 3, 5}, which sums up to 10, the maximum sum less than or equal to 10. In the second example, you can choose the subset {3, 8}, which sums up to 11, the maximum sum. In the third example, you can choose the subset {3, 4}, which sums up to 7, the maximum sum.","solution":"def max_subset_sum(n, S, arr): # Generate all possible subsets from itertools import combinations max_sum = 0 for i in range(n+1): for subset in combinations(arr, i): subset_sum = sum(subset) if subset_sum <= S and subset_sum > max_sum: max_sum = subset_sum return max_sum"},{"question":"You are given a sequence of n integers. Your task is to determine the minimum number of operations needed to make all elements equal. In one operation, you can perform one of the following actions: 1. Increment any element of the sequence by 1. 2. Decrement any element of the sequence by 1. -----Constraints----- - All input values are integers. - 1 ≤ n ≤ 10^5 - 1 ≤ a_i ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n -----Output----- Print the minimum number of operations needed to make all elements of the sequence equal. -----Sample Input----- 4 1 2 3 4 -----Sample Output----- 4 To make all elements equal to 3 (an element of the sequence), the operations are: - Increment 1 to 3 with 2 operations - Increment 2 to 3 with 1 operation - Decrement 4 to 3 with 1 operation Total operations = 2 + 1 + 1 = 4","solution":"def min_operations_to_equal_elements(n, elements): Returns the minimum number of operations required to make all elements of the list equal. elements.sort() median = elements[n // 2] operations = sum(abs(x - median) for x in elements) return operations"},{"question":"# Task Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your task is to solve the problem efficiently. # Input/Output - `[input]` array of integers `nums` The array length can be from `0` to `10^5`. The integers in the array can range from `-10^9` to `10^9`. - `[output]` an integer The length of the longest consecutive elements sequence. # Example ```python nums = [100, 4, 200, 1, 3, 2] longest_consecutive_sequence(nums) => 4 # Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. nums = [0,3,7,2,5,8,4,6,0,1] longest_consecutive_sequence(nums) => 9 # Explanation: The longest consecutive elements sequence is [0, 1, 2, 3, 4, 5, 6, 7, 8]. ```","solution":"def longest_consecutive_sequence(nums): Returns the length of the longest consecutive elements sequence in an unsorted array of integers. if not nums: return 0 nums = set(nums) # Removing duplicates and allowing O(1) lookups longest_streak = 0 for num in nums: # Only start counting a streak if `num - 1` is not in the set if num - 1 not in nums: current_num = num current_streak = 1 while current_num + 1 in nums: current_num += 1 current_streak += 1 longest_streak = max(longest_streak, current_streak) return longest_streak"},{"question":"You are given an array of numbers representing the scores of players in a game. You need to calculate the rank of each player based on their score. The highest score should get the best rank (1), the second highest score should get rank 2, and so on. If two players have the same score, they should have the same rank, and the next lower score should have a rank that accounts for all previous ranks. For example, given the scores `[100, 90, 90, 80]`, the rank array should be `[1, 2, 2, 3]`. Your task is to implement a function that takes an array of scores and returns an array of ranks. # Notes - The input array will contain at least one element. - All scores will be non-negative integers. - The returned array should preserve the order of input scores. # Example ```python rank_scores([100, 90, 90, 80]) # Output: [1, 2, 2, 3] rank_scores([40, 10, 20, 30]) # Output: [1, 4, 3, 2] ```","solution":"def rank_scores(scores): Returns the ranks of players based on their scores. if not scores: return [] sorted_scores = sorted(set(scores), reverse=True) # Get unique scores in descending order. score_to_rank = {score: rank + 1 for rank, score in enumerate(sorted_scores)} return [score_to_rank[score] for score in scores]"},{"question":"A champion archer, Zina, is participating in a national archery competition. The competition is held in an outdoor range with N targets placed along a straight line at different distances from the starting mark. Each target has a different score value and distance assigned to it. Zina wants to maximize her total score by hitting a selection of targets within the given constraints. The constraints are as follows: 1. Zina can hit a maximum of K targets. 2. To hit a target at a distance of D_i , she needs to spend 2 times D_i seconds for aiming and shooting. 3. Zina has a total of T seconds available to use for hitting the targets. 4. After hitting a target, she will move to the next target instantly, and the time is only spent on aiming and shooting. Given the number of targets N , the maximum number of targets K , the available time T , and the details of each target (the distance D_i and the score S_i for each target), write a program to find the maximum score Zina can achieve within the allowed time and target constraints. # Input format: - The first line contains three integers N , K , and T . - The next N lines each contain two integers D_i and S_i representing the distance of the i -th target and its score. # Output format: - Output a single integer which is the maximum score Zina can achieve. # Sample Input: ``` 4 2 10 2 5 3 6 4 8 1 3 ``` # Sample Output: ``` 11 ``` # Explanation: Zina can hit the following targets: 1. Target at distance 2 with a score of 5. 2. Target at distance 1 with a score of 3. This takes 2 times 2 + 2 times 1 = 6 seconds total and yields a combined score of 5 + 3 = 8 . Or she can: 1. Hit the target at distance 3 with a score of 6. 2. Hit the target at distance 1 with a score of 3. This takes 2 times 3 + 2 times 1 = 8 seconds total and yields a combined score of 6 + 3 = 9 . Or she can: 1. Hit the target at distance 4 with a score of 8. This takes 2 times 4 = 8 seconds total and yields a score of 8. Or she can: 1. Hit the target at distance 3 with a score of 6. 2. Hit the target at distance 2 with a score of 5. This takes 2 times 3 + 2 times 2 = 10 seconds total and yields a combined score of 6 + 5 = 11 . Among all, the best score is 11.","solution":"from itertools import combinations def maximize_score(N, K, T, targets): max_score = 0 for k in range(1, K+1): for combo in combinations(targets, k): time_spent = sum(2 * d for d, s in combo) if time_spent <= T: score = sum(s for d, s in combo) max_score = max(max_score, score) return max_score # Example usage: N = 4 K = 2 T = 10 targets = [(2, 5), (3, 6), (4, 8), (1, 3)] print(maximize_score(N, K, T, targets)) # Output: 11"},{"question":"Write a function that simulates a Tic-Tac-Toe game and determines the winner. The game is played on a 3x3 grid. Players take turns marking a square with either \'X\' or \'O\'. The player who manages to place three of their marks in a horizontal, vertical, or diagonal row wins the game. The game ends when there is a winner or the grid is full without any winner (a draw). Your task is to write a function `tic_tac_toe_winner(board)` that takes a 3x3 list of strings `board` as input where each element is either \'X\', \'O\', or an empty string (`\'\'`), representing the state of the board, and returns a string indicating the result of the game as \'X\', \'O\', or \'Draw\'. # Function Signature ```python def tic_tac_toe_winner(board: List[List[str]]) -> str: ``` # Input - `board`: a 3x3 list of strings containing \'X\', \'O\', or an empty string (`\'\'`). # Output - Return \'X\' if X is the winner. - Return \'O\' if O is the winner. - Return \'Draw\' if the game is a draw. # Example ```python assert tic_tac_toe_winner([ [\'X\', \'O\', \'X\'], [\'X\', \'X\', \'O\'], [\'O\', \'X\', \'O\'] ]) == \'Draw\' assert tic_tac_toe_winner([ [\'X\', \'X\', \'X\'], [\'O\', \'O\', \'\'], [\'\', \'\', \'\'] ]) == \'X\' assert tic_tac_toe_winner([ [\'O\', \'O\', \'O\'], [\'X\', \'\', \'X\'], [\'X\', \'\', \'\'] ]) == \'O\' ``` # Note - The function should check all possible winning combinations: three rows, three columns, and two diagonals. - Assume that the input board is always valid and does not contain any illegal moves.","solution":"def tic_tac_toe_winner(board): Determine the winner of a Tic-Tac-Toe game. Parameters: board (list of list of str): A 3x3 board containing \'X\', \'O\', or \'\'. Returns: str: \'X\' if player with \'X\' wins, \'O\' if player with \'O\' wins, \'Draw\' if there is no winner. # Check rows for row in board: if row[0] == row[1] == row[2] and row[0] != \'\': return row[0] # Check columns for col in range(3): if board[0][col] == board[1][col] == board[2][col] and board[0][col] != \'\': return board[0][col] # Check diagonals if board[0][0] == board[1][1] == board[2][2] and board[0][0] != \'\': return board[0][0] if board[0][2] == board[1][1] == board[2][0] and board[0][2] != \'\': return board[0][2] # If no winner, return \'Draw\' return \'Draw\'"},{"question":"A company has a hierarchical organization consisting of n employees, each with a unique ID from 1 to n. The company also has a hierarchical structure where each employee reports directly to one other employee, except for the CEO who reports to no one. The reporting structure is given as a list of n integers, where the i-th integer denotes the immediate supervisor of the employee with ID i. If an employee has no supervisor, that value is given as -1. The company has decided to implement a new policy where they need to record the depth of each employee in the organization. The depth of an employee is defined as the number of supervisors in the chain from that employee up to the CEO, inclusive. Write a program that calculates the depth of each employee based on the given reporting structure. Input The first line contains a single integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the number of employees. The next line contains n integers p_1, p_2, ..., p_n (-1 ≤ p_{i} ≤ n) — the immediate supervisor of each employee. The supervisor index p_i is -1 for the CEO. Output Print n integers — the depth of each employee in the organization. Examples Input 6 -1 1 1 3 3 4 Output 1 2 2 3 3 4 Input 4 -1 1 2 3 Output 1 2 3 4 Note In the first example, the depths of the employees are calculated as follows: 1) Employee 1 is the CEO, so depth is 1. 2) Employee 2 and 3 report to Employee 1, so their depth is 2. 3) Employee 4 and 5 report to Employee 3, so their depth is 3. 4) Employee 6 reports to Employee 4, so their depth is 4. In the second example, the depth of employees are: 1) Employee 1 is the CEO, so depth is 1. 2) Employee 2 reports to Employee 1, so depth is 2. 3) Employee 3 reports to Employee 2, so depth is 3. 4) Employee 4 reports to Employee 3, so depth is 4.","solution":"def calculate_depth(n, supervisors): Calculates the depth of each employee in a hierarchical organization. :param n: Integer, the number of employees. :param supervisors: List of integers, the immediate supervisor of each employee. :return: List of integers, the depth of each employee. depths = [-1] * n def get_depth(employee): if depths[employee] != -1: return depths[employee] if supervisors[employee] == -1: depths[employee] = 1 else: depths[employee] = 1 + get_depth(supervisors[employee] - 1) return depths[employee] for i in range(n): get_depth(i) return depths"},{"question":"Your city is planning to host a marathon, and you are tasked with developing a program that determines whether a given number represents the possible total number of steps a participant could take based on a specific set of rules. The participants can either take single steps, double steps, or triple steps. Your goal is to write a function that checks if a given number can be formed by the sum of any combination of single, double, or triple steps. Example Given the number n = 5 Possible combinations to reach 5 steps include: - 5 single steps - 1 single step + 2 double steps + 1 single step - 3 single steps + 1 double step - 1 triple step + 2 single steps - 1 triple step + 1 double step Thus, the possible combinations result in the answer \\"YES\\", since 5 can be formed with the given rules. Function Description Complete the canFormSteps function in the editor below. The function canFormSteps has the following parameter(s): n: an integer representing the total steps Returns string: \\"YES\\" if the number can be formed, otherwise \\"NO\\" Input Format The first line contains an integer, n, the total number of steps. Constraints 1 leq n leq 10^9 Sample Input 7 Sample Output YES Explanation Given the total steps n = 7, it is possible to reach with the following combinations: - 7 single steps - 1 single step + 3 double steps - 2 single steps + 2 double steps + 1 single step - 1 triple step + 2 double steps - 1 triple step + 1 double step + 1 single step + 1 double step Thus, it is possible to form 7 using these rules, and the output is \\"YES\\".","solution":"def canFormSteps(n): Determines if a given number n can be formed by sum of any combination of 1, 2, and 3 steps. Args: n (int): Total steps. Returns: str: \\"YES\\" if n can be formed, otherwise \\"NO\\". # As long as n is non-negative, we can always create it since # any n can be represented as a combination of 1s, 2s, and 3s. return \\"YES\\" if n >= 0 else \\"NO\\""},{"question":"Alice is working on a text processing tool and is tasked with generating a summary of a given text by keeping only the first occurrence of each word, while preserving the original order of words. Words are case-sensitive. Help Alice by writing a function that processes the given text and returns the summary. ------ Input Format ------ - The first line contains an integer T - the number of test cases. - Each of the next T lines contains a string that represents the text. ------ Output Format ------ For each test case, output the summary of the given text in a single line. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ text{length of text} ≤ 10^4 ------ Sample Input 1 ------ 2 this is a test this is only a test Hello World Hello Hello World ------ Sample Output 1 ------ this is a test only Hello World ------ Explanation 1 ------ In the first test case, \\"this\\" and \\"is\\" appear twice but only the first occurrences are kept. Hence, the summary is \\"this is a test only\\". In the second test case, \\"Hello\\" and \\"World\\" appear multiple times but only the first occurrences are kept.Thus, the summary is \\"Hello World\\".","solution":"def generate_summary(text): words = text.split() seen = set() summary = [] for word in words: if word not in seen: seen.add(word) summary.append(word) return \' \'.join(summary) def process_texts(num_cases, texts): results = [] for text in texts: results.append(generate_summary(text)) return results"},{"question":"Write a program to simulate a cracking safe mechanism. The safe has a 4-digit numeric combination (each digit ranging from 0 to 9), and you need to figure out the correct combination. Each attempt to open the safe with a combination will return how many digits are correct and in the correct position (similar to a hit in the game Mastermind). You need to determine the minimum number of attempts to guarantee finding the correct combination. -----Input----- A number in the form of an integer, representing the code used to unlock the safe. Each digit of the number is between 0 and 9. You may use multiple lines of input as clues, with each line containing an attempted code and the number of correct digits in the correct positions. -----Output----- An integer representing the minimum number of attempts required to deduce the correct 4-digit code, given the information provided. -----Examples----- Sample Input: The correct code is: 1234 Attempt 1: 1245 -> 2 Attempt 2: 1235 -> 3 Attempt 3: 1234 -> 4 Sample Output: 3 Sample Input: The correct code is: 9876 Attempt 1: 5678 -> 0 Attempt 2: 7654 -> 2 Attempt 3: 8765 -> 3 Attempt 4: 9876 -> 4 Sample Output: 4","solution":"def crack_safe(guess_results): Determines the minimum number of attempts to guess the correct 4-digit code. Parameters: guess_results (list): A list of tuples where each tuple contains an attempted code and the number of correct digits in the correct positions. Returns: int: The number of attempts made to guess the correct code. # The correct code is assumed to be the one with all 4 correct digits in the correct positions. for attempt, (code, correct) in enumerate(guess_results, start=1): if correct == 4: return attempt return -1 # Error case (shouldn\'t happen if inputs are valid)"},{"question":"<!-- Coding Assessment Question --> Given the daily stock prices of a company as a list for `n` consecutive days, your task is to determine the maximum profit you could achieve by completing at most one transaction (i.e., buy one and sell one stock). If no profit can be made, return 0. You must ensure that you buy the stock before you sell it. # Input - The first line contains an integer `n` (1 le n le 10^5), the number of days. - The next line contains `n` integers `p` (1 le p_i le 10^4), where `p_i` is the stock price on the ith day. # Output - Output an integer representing the maximum profit possible. If no profit can be made, output 0. # Example Input ``` 6 7 1 5 3 6 4 ``` Output ``` 5 ``` Input ``` 5 7 6 4 3 1 ``` Output ``` 0 ``` # Explanation In the first example, the maximum profit can be achieved by buying on the 2nd day (price = 1) and selling on the 5th day (price = 6), which gives a profit of 6 - 1 = 5. In the second example, no profit can be made because the stock price only decreases each day.","solution":"def max_profit(prices): Calculate the maximum profit by buying and selling stock exactly once. Parameters: - prices: List of stock prices over \'n\' days Returns: - An integer representing the maximum profit possible. If no profit can be made, return 0. if not prices: return 0 min_price = prices[0] max_profit = 0 for price in prices: # Calculate the profit if we sold at current price profit = price - min_price # Update the max profit max_profit = max(max_profit, profit) # Update the min price to be the lowest price seen so far min_price = min(min_price, price) return max_profit"},{"question":"Given a list of numbers, find the subset with the maximum possible sum that does not exceed a given target sum. If there are multiple subsets with the maximum sum, return the one with the fewest elements. If there are still multiple subsets, return the lexicographically smallest subset. ------ Input Format ------ - The first line contains two integers n and target — the size of the list and the target sum. - The second line contains n space-separated integers, representing the elements of the list. ------ Output Format ------ Output the subset with the maximum sum not exceeding the target sum, with the conditions described. Print the elements of the subset in a single line, space-separated. If no such subset exists, print an empty line. ------ Constraints ------ 1 ≤ n ≤ 20 1 ≤ text{elements of the list} ≤ 10^6 1 ≤ text{target} ≤ 10^6 ----- Sample Input 1 ------ 4 10 1 2 3 4 ----- Sample Output 1 ------ 1 2 3 4 ------ Explanation 1 ------ The subset [1, 2, 3, 4] has the maximum possible sum 10 which equals the target sum. ----- Sample Input 2 ------ 5 10 4 5 2 1 3 ----- Sample Output 2 ------ 4 5 1 ------ Explanation 2 ------ The subset [4, 5, 1] has the maximum possible sum 10. Although subsets [5, 2, 3] and [4, 2, 3, 1] also have sums of 10, [4, 5, 1] has the fewest elements. ----- Sample Input 3 ------ 3 15 8 7 6 ----- Sample Output 3 ------ 8 7 ------ Explanation 3 ------ The subset [8, 7] has the maximum possible sum 15. Among all subsets with sum 15, [8, 7] is the smallest lexicographically, satisfying all conditions.","solution":"from itertools import combinations def max_subset_sum(numbers, target): Finds the subset with the maximum possible sum that does not exceed the target sum. Returns the subset with the fewest elements or lexicographically smallest if there are ties. n = len(numbers) best_sum = 0 best_subset = [] for r in range(1, n + 1): for subset in combinations(numbers, r): subset_sum = sum(subset) if subset_sum <= target and (subset_sum > best_sum or (subset_sum == best_sum and (len(subset) < len(best_subset) or (len(subset) == len(best_subset) and sorted(subset) < sorted(best_subset))))): best_sum = subset_sum best_subset = subset return sorted(best_subset) # Solution to process the input and call the function def solve(n, target, numbers): result = max_subset_sum(numbers, target) print(\\" \\".join(map(str, result)))"},{"question":"Given an array of non-negative integers representing the heights of a series of buildings, each building being 1 unit wide, compute the maximum amount of water that can be trapped between the buildings after a rain. The buildings\' heights are given in a list of integers, where each integer represents the height of a building. The width of each building is 1 unit. Example 1: ``` Input: [0,1,0,2,1,0,1,3,2,1,2,1] Output: 6 Explanation: The structure looks like this: | | | ||| | | ||| | | | ||| | || | | ||| | ||||||| In this case, 6 units of water (notated by |||) are trapped. ``` Example 2: ``` Input: [4,2,0,3,2,5] Output: 9 Explanation: The structure looks like this: | | | | | | | | | ||| |||| | ||| In this case, 9 units of water are trapped. ``` Clarification: - The input contains a list of non-negative integers. - The width of each building is uniformly 1 unit. - You should consider only the gap between buildings that can hold water. The difference in heights between adjacent buildings will be the determinant of how much water can be trapped in between.","solution":"def trap(height): Given a list of non-negative integers representing the heights of buildings, returns the maximum amount of water that can be trapped after a rain. if not height: return 0 n = len(height) # initialize left and right pointers left, right = 0, n - 1 # initialize variables to record the maximum height seen from the left and right left_max, right_max = height[left], height[right] # variable to store the amount of trapped water water_trapped = 0 # use two-pointer approach while left < right: if height[left] < height[right]: left += 1 left_max = max(left_max, height[left]) water_trapped += max(0, left_max - height[left]) else: right -= 1 right_max = max(right_max, height[right]) water_trapped += max(0, right_max - height[right]) return water_trapped"},{"question":"Dexter has been working on a new invention and needs to optimize his code for better performance. He faces the following problem which he hopes you can help with: The problem: Given a list of N positive integers, find the longest subsequence such that each element in the subsequence is divisible by the element before it. If there are multiple such subsequences of the same maximum length, return the one that appears first in the list. INPUT First line of input gives an integer T, the number of test cases. T test cases follow. Each test case starts with an integer N (the number of elements in the list). The next line contains N positive integers separated by a space. OUTPUT For each test case, print the longest subsequence where each element is divisible by the previous one. If there are multiple subsequences of the same length, print the one that appears first in the input list. CONSTRAINTS 1 ≤ T ≤ 50 1 ≤ N ≤ 1000 1 ≤ List elements ≤ 1000000000 SAMPLE INPUT 2 4 3 6 7 12 6 4 8 16 2 32 64 SAMPLE OUTPUT 3 6 12 4 8 16 32 64 Explanation In the first test case, \\"3 6 12\\" is the longest subsequence where each element is divisible by the one before it. Although \\"6 12\\" and \\"7 12\\" also satisfy the conditions, they are shorter. In the second test case, \\"4 8 16 32 64\\" is the longest subsequence following the divisibility rule.","solution":"def longest_divisible_subsequence(nums): n = len(nums) dp = [1] * n prev = [-1] * n for i in range(1, n): for j in range(i): if nums[i] % nums[j] == 0 and dp[i] < dp[j] + 1: dp[i] = dp[j] + 1 prev[i] = j max_len = max(dp) index = dp.index(max_len) result = [] while index != -1: result.append(nums[index]) index = prev[index] result.reverse() return result def process_test_cases(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] nums = test_cases[i][1] longest_subseq = longest_divisible_subsequence(nums) results.append(longest_subseq) return results"},{"question":"Given an undirected graph consisting of `n` vertices and `m` edges, determine whether the graph contains an Eulerian Circuit. An Eulerian Circuit is a cycle that visits every edge exactly once and returns to the starting vertex. A graph has an Eulerian Circuit if and only if every vertex has an even degree, and all of its vertices with nonzero degree belong to a single connected component. Input The first line of input contains two integers `n` and `m` (1 ≤ n ≤ 50, 0 ≤ m ≤ 100). Each of the next `m` lines describes an edge between two vertices `u` and `v` (1 ≤ u, v ≤ n). Output Print \\"YES\\" if the graph contains an Eulerian Circuit, or \\"NO\\" otherwise. Examples Input 3 3 1 2 2 3 3 1 Output YES Input 4 3 1 2 2 3 3 4 Output NO","solution":"def eulerian_circuit(n, m, edges): from collections import defaultdict, deque if m == 0: return \\"NO\\" if n > 1 else \\"YES\\" graph = defaultdict(list) degree = [0] * (n + 1) for u, v in edges: graph[u].append(v) graph[v].append(u) degree[u] += 1 degree[v] += 1 for d in degree[1:]: if d % 2 != 0: return \\"NO\\" def is_connected(): visited = [False] * (n + 1) start = next((i for i in range(1, n + 1) if degree[i] > 0), -1) if start == -1: return True queue = deque([start]) visited[start] = True while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) return all(visited[i] or degree[i] == 0 for i in range(1, n + 1)) return \\"YES\\" if is_connected() else \\"NO\\""},{"question":"You are given a list of N integers representing the heights of a sequence of buildings. A person can move from building i to building j if the height of building j is strictly greater than the height of building i, and they can only move to adjacent buildings (i.e., from building i to building i+1 or i-1). You need to find the length of the longest possible sequence of jumps from one building to another under these conditions. -----Constraints----- - All input values are integers. - 1 ≤ N ≤ 1000 - 1 ≤ heights_i ≤ 10000 -----Input----- Input is given from Standard Input in the following format: N heights_1 heights_2 ... heights_N -----Output----- Print the length of the longest possible sequence of jumps. -----Sample Input----- 5 2 1 2 3 1 -----Sample Output----- 3 The longest sequence of jumps is from the building with height 1 to the building with height 2, then to the building with height 3, making a sequence of length 3.","solution":"def longest_jump_sequence(heights): Returns the length of the longest possible sequence of jumps. Args: heights: List[int] - a list of integers representing the heights of the buildings Returns: int - the length of the longest sequence of jumps if not heights: return 0 n = len(heights) # dp[i] will store the length of the longest jump sequence ending at index i dp = [1] * n for i in range(1, n): if heights[i] > heights[i-1]: dp[i] = dp[i-1] + 1 else: dp[i] = max(dp[i], dp[i-1]) return max(dp)"},{"question":"A large warehouse has several storage rooms each containing a variety of items stored in bins. Each bin has a certain capacity and holds some number of items. The warehouse employs a simple strategy to ensure bins in each storage room are not overloaded: if any bin in a storage room becomes full, items are moved to adjacent bins in that room if they have available capacity. Determine the maximum number of items that can be stored in all the bins of a storage room, given that the items can be redistributed to adjacent bins to avoid overloading any single bin. -----Input----- The first line contains two integers n and m (1 le n leq 1000, 1 le m leq 10^6) — the number of bins and the total number of items respectively. The second line contains n integers c_1, c_2, ldots, c_n (1 le c_i le 10^3) — the capacities of each bin in the storage room. -----Output----- Print one integer: the maximum number of items that can be stored in the bins of the storage room by redistributing the items according to the strategy. -----Example----- Input 5 15 3 2 4 5 6 Output 15 Input 4 12 2 1 3 2 Output 8 -----Note----- In the first example, all items can be accommodated as follows: - Bin 1: 3 items (at full capacity) - Bin 2: 2 items (at full capacity) - Bin 3: 4 items (at full capacity) - Bin 4: 5 items (at full capacity) - Bin 5: 1 item In the second example, the capacities are too small to store all 12 items. Instead, the bins can accommodate items as follows: - Bin 1: 2 items (at full capacity) - Bin 2: 1 item (at full capacity) - Bin 3: 3 items (at full capacity) - Bin 4: 2 items (at full capacity) Leaving 4 items unable to be stored. Ensure that you redistribute the items in such a way to maximize the use of available capacity in the sequence of bins.","solution":"def max_items_stored(n, m, capacities): Determines the maximum number of items that can be stored in the bins by redistributing items to avoid overloading any single bin. Args: n: int : number of bins m: int : total number of items capacities: list of int : capacities of each bin Returns: int : the maximum number of items that can be stored in the bins. # The maximum number of items that can be stored is limited by the either the sum of all capacities or the number of items, whichever is smaller. return min(m, sum(capacities))"},{"question":"In a remote village, the inhabitants participate in a traditional tree-planting festival where each resident plants a tree based on a specific sequence. Each tree must be planted in such a way that it does not violate the village\'s unique tree-planting rules. The rules require that no resident should plant their tree at a position directly adjacent to the position where the immediately previous resident in the sequence has planted theirs. For example, if resident 1 plants a tree at position 3, resident 2 cannot plant at position 2 or position 4. Given the sequence in which the residents will plant their trees and the positions they choose, write a program to determine if the tree-planting rules have been followed correctly. -----Input----- The first line of input contains an integer N, the number of residents (1 leq N leq 100). This is followed by N lines of input, each containing an integer in the range 1 ldots 1000, indicating the position where each respective resident in sequence will plant their tree. For example, the input 4 3 5 7 6 means that resident 1 plants their tree at position 3, resident 2 at position 5, and so on. -----Output----- Print \\"YES\\" if the tree-planting rules have been followed, otherwise print \\"NO\\". -----Examples----- Sample Input 1: 4 3 5 7 6 Sample Output 1: NO Sample Input 2: 3 2 4 6 Sample Output 2: YES","solution":"def check_tree_planting_rules(positions): Determines if the tree-planting rules have been followed correctly. Parameters: positions (list of int): List of positions where each resident plants their tree. Returns: str: \\"YES\\" if rules followed, otherwise \\"NO\\" for i in range(1, len(positions)): if abs(positions[i] - positions[i - 1]) == 1: return \\"NO\\" return \\"YES\\""},{"question":"A company has a skill-based assessment system which evaluates employees\' proficiency in a set of skills. Each employee is associated with a series of skill ratings. Due to performance adjustments, sometimes, an employee\'s ratings need alteration according to specific rules. The rule is as follows: if an employee\'s rating in any skill is zero, the employee receives a \\"default\\" rating for that skill, which is the average (floor value) of the non-zero ratings from all other employees for that skill. Your task is to update any zero ratings in each employee\'s skill ratings based on this rule. Input - The first line contains two integers n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 50) — the number of employees and the number of skills, respectively. - The next n lines each contain m integers — the skill ratings of each employee. The rating is an integer value between 0 and 100 inclusive. Output - Output n lines, each containing the updated skill ratings of each employee (with zero ratings replaced as described). In case all employees\' ratings for a skill are zero, leave them as zero. Examples Input 3 3 0 50 80 60 0 90 70 80 0 Output 65 50 80 60 65 90 70 80 85 Input 2 2 0 0 0 0 Output 0 0 0 0","solution":"def update_skill_ratings(n, m, ratings): # Calculate default ratings for each skill default_ratings = [0] * m for skill in range(m): total = 0 count = 0 for emp in range(n): if ratings[emp][skill] != 0: total += ratings[emp][skill] count += 1 default_ratings[skill] = total // count if count > 0 else 0 # Update the ratings with the default values if they are zero for emp in range(n): for skill in range(m): if ratings[emp][skill] == 0: ratings[emp][skill] = default_ratings[skill] return ratings"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},F={class:"card-container"},Y={key:0,class:"empty-state"},j=["disabled"],R={key:0},P={key:1};function D(s,e,u,m,a,r){const p=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[w,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):l("",!0)]),t("div",F,[(n(!0),i(_,null,y(r.displayedPoems,(o,f)=>(n(),v(p,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",Y,' No results found for "'+h(a.searchQuery)+'". ',1)):l("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",P,"Loading...")):(n(),i("span",R,"See more"))],8,j)):l("",!0)])}const L=d(A,[["render",D],["__scopeId","data-v-e5b61359"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/12.md","filePath":"quotes/12.md"}'),z={name:"quotes/12.md"},U=Object.assign(z,{setup(s){return(e,u)=>(n(),i("div",null,[x(L)]))}});export{B as __pageData,U as default};
