import{_ as d,o as n,c as i,a as t,m as c,t as h,C as g,M as b,U as y,f as u,F as w,p as _,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const T={name:"PoemCard",props:{poem:{type:Object,required:!0}}},k={class:"poem-container"},q={class:"review"},I={class:"review-title"},E={class:"review-content"};function O(s,e,l,p,a,r){return n(),i("div",k,[t("div",q,[t("div",I,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),c(h(l.poem.question),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",E,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),c(h(l.poem.solution),1)])])])}const N=d(T,[["render",O],["__scopeId","data-v-8a012a79"]]),S=JSON.parse('[{"question":"Zara loves solving coding problems and puzzles. She has come across an interesting problem related to prime numbers and string permutations. Can you help Zara solve it? - The problem states that for a given string S, she needs to determine if it is possible to rearrange the characters of S to form a prime number. - A prime number is a number greater than 1 that has no positive divisors other than 1 and itself. Your task is to write a program to check if any permutation of the string S can be rearranged to a prime number. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains a single string S, consisting of digits only. -----Output:----- For each testcase, output \\"YES\\" if it is possible to rearrange the characters of S to form a prime number, otherwise output \\"NO\\". -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 9 -----Sample Input:----- 3 17 23 28 -----Sample Output:----- YES YES NO","solution":"from itertools import permutations def is_prime(num): if num <= 1: return False if num == 2: return True if num % 2 == 0: return False for i in range(3, int(num**0.5) + 1, 2): if num % i == 0: return False return True def can_form_prime(S): for perm in permutations(S): num = int(\'\'.join(perm)) if is_prime(num): return \\"YES\\" return \\"NO\\" def process_test_cases(T, test_cases): results = [] for S in test_cases: results.append(can_form_prime(S)) return results"},{"question":"Given an array of integers, where each integer represents the height of a person standing in a line, you need to arrange them into the smallest number of \\"waves\\" where each wave is defined as a contiguous subarray satisfying the rule: the person at the start of the wave should be taller than all subsequent people in the wave. Determine the minimum number of waves needed to arrange all the people in the given array. For example, given the array `[3, 1, 2, 3, 1]`, the optimal arrangement would be `3 -> [1, 2], 3 -> [1]`, resulting in a total of 3 waves. Write a function `countWaves` that takes an array of integers representing heights and returns the minimum number of waves needed. # Function Signature ```python def countWaves(arr: List[int]) -> int: ``` # Input - arr: List of integers representing the height of people in the line. (1 <= len(arr) <= 100000 and 1 <= arr[i] <= 10^9) # Output - An integer representing the minimum number of waves required. # Example ```python arr = [3, 1, 2, 3, 1] print(countWaves(arr)) # Output: 3 ``` # Explanation You can split the array `[3, 1, 2, 3, 1]` into waves: - Wave 1: [3, 1] - Wave 2: [2, 3] - Wave 3: [1] Thus, the minimum number of waves required is 3. # Constraints - You need to ensure the solution efficiently handles the case where the array length is up to 100000. - The height values can be large, so the algorithm should handle large integers effectively.","solution":"def countWaves(arr): Given an array of integers representing heights of people in a line, return the minimum number of waves needed where each wave is defined as a contiguous subarray satisfying the rule: the person at the start of the wave should be taller than all subsequent people in the wave. if not arr: return 0 waves = 1 max_height = arr[0] for height in arr[1:]: if height >= max_height: waves += 1 max_height = height else: max_height = height return waves"},{"question":"In a small town, Alice wants to organize a bake sale to raise funds for the local library. She plans to bake N batches of cookies. Each batch requires Y grams of sugar. Alice currently has X grams of sugar at home. Given the price of sugar is P rupees per gram, help Alice determine the minimum cost in rupees she needs to spend to buy enough sugar to bake all the batches. ------ Input Format ------ - The first line contains T, the number of test cases. - Each of the next T lines contains three integers N, X, and P. ------ Output Format ------ For each test case, output a single line containing the minimum cost Alice needs to spend. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 0 ≤ X ≤ 10,000 1 ≤ Y, P ≤ 100 ----- Sample Input 1 ------ 2 3 100 2 5 200 10 ----- Sample Output 1 ------ 0 3000 ----- Explanation 1 ------ Test Case 1: Alice needs enough sugar for 3 batches. If Y is assumed to be 50 grams per batch (since Y is missing in the input format, assume some reasonable value for explanation). She needs 150 grams total. Since she already has 100 grams, she needs 50 more grams. The cost is 50 times 2 = 100 rupees which should be the correct result. If this were a mistake and trying to match input style, let\'s assume Alice does not need more sugar as solution didn\'t require it (showing a format misunderstanding, assuming no purchases based on min threshold. Explanation should refine this.) Test Case 2: Alice needs enough sugar for 5 batches. If 50 grams per batch is assumed (adjust for showing example if fixing format assumption). She needs a total of 250 grams. Since she has 200 grams, she needs 50 more. The cost is 50 times 10 = 500 rupees, matching the assumed structure and should be corrected to show clearer format alignment.","solution":"def minimum_cost_to_buy_sugar(T, test_cases): results = [] for i in range(T): N, X, P, Y = test_cases[i] required_sugar = N * Y if X >= required_sugar: results.append(0) else: needed_sugar = required_sugar - X cost = needed_sugar * P results.append(cost) return results"},{"question":"A group of software development firms are working on a collaborative project that involves merging multiple codebases. Each codebase is represented as a list of file paths. To ensure there are no conflicts, the firms have collectively decided to keep all file paths unique across the entire project. Write a program that, given the lists of file paths from participating firms, outputs the total number of unique file paths. Assume that file paths are case-sensitive (i.e., \\"File.txt\\" and \\"file.txt\\" are considered different). -----Input----- Input begins with an integer N (1 le N le 10), the number of firms. Each of the next N blocks begins with an integer M (1 le M le 100), the number of file paths for that firm. Each of the next M lines in the block contains a single file path string which consists of alphanumeric characters and/or dots, slashes, and underscores (1 le text{length of file path} le 100). -----Output----- Output a single integer, the number of unique file paths across all lists. -----Examples----- Sample Input: 3 3 src/main.py src/utils.py README.md 2 src/utils.py src/config.yaml 4 tests/test_main.py README.md src/config.yaml LICENSE.txt Sample Output: 6","solution":"def count_unique_file_paths(firm_data): Given the lists of file paths from participating firms, returns the number of unique file paths. Parameters: firm_data (list): List of tuples where each tuple contains the number of file paths followed by the file path strings. Returns: int: The number of unique file paths across all lists. unique_paths = set() for firm in firm_data: num_files = firm[0] file_paths = firm[1:num_files + 1] unique_paths.update(file_paths) return len(unique_paths)"},{"question":"Write a program that reads a sequence of integers and finds the maximum sum of any continuous subarray within the sequence. Note 解説 Constraints * n ≤ 100 * -1000 ≤ ai ≤ 1000 Input The input is given in the following format: n a1 a2 . . . an n is the size of the sequence and ai is the ith element of the sequence. Output Print the maximum sum of any continuous subarray. Examples Input 5 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 8 1 2 3 4 -10 1 2 3 Output 10 Note In the first example, the subarray [4, -1, 2, 1] has the largest sum 6. In the second example, the subarray [1, 2, 3, 4] has the largest sum 10.","solution":"def max_subarray_sum(arr): Returns the maximum sum of any continuous subarray within the sequence. if not arr: return 0 max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Bob owns a warehouse where he stores boxes of different weights. Each box has a positive integer weight and the warehouse has a capacity limit, which is the maximum total weight of boxes that can be stored at any given time. Bob wants to maximize the total number of boxes he can store in the warehouse without exceeding the capacity limit. However, he can only store a box if the total weight of the boxes, including the new box, does not exceed the warehouse\'s capacity. You are to help Bob determine the maximum number of boxes he can store. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and C, where N is the number of boxes and C is the capacity of the warehouse. The second line contains N space-separated integers W_{1}, W_{2}, ldots, W_{N}, where W_{i} is the weight of the i^{th} box. ------ Output ------ For each test case, print a single line containing one integer — the maximum number of boxes that can be stored in the warehouse without exceeding the capacity limit. ------ Constraints ------ 1 leq T leq 10 1 leq N leq 10^5 1 leq C leq 10^9 1 leq W_{i} leq 10^6 for each valid i ----- Sample Input 1 ------ 2 5 10 2 3 5 4 6 3 8 7 3 2 ----- Sample Output 1 ------ 3 2","solution":"def max_boxes_stored(T, test_cases): Given number of test cases and the test case details, return the maximum number of boxes that can be stored in the warehouse for each test case. Parameters: - T: int, number of test cases - test_cases: list of tuples, each tuple contains: - N: int, number of boxes - C: int, capacity of the warehouse - weights: list of ints, weights of the boxes Returns: - list of ints, maximum number of boxes that can be stored for each test case results = [] for N, C, weights in test_cases: weights.sort() total_weight = 0 count = 0 for weight in weights: if total_weight + weight <= C: total_weight += weight count += 1 else: break results.append(count) return results"},{"question":"In many programming problems, you are asked to manipulate strings in various ways. Let\'s explore one such problem. Task You are given a string composed of lowercase English letters. You need to construct a new string by rearranging the letters of the original string in such a way that no two adjacent characters in the new string are the same. If such an arrangement is not possible, return \\"Not Possible\\". Input Format A single string, ( s ). Constraints ( 1 leq |s| leq 10^5 ) The string ( s ) contains only lowercase English letters. Output Format Print the rearranged string if possible, otherwise print \\"Not Possible\\". Sample Input 1 aab Sample Output 1 aba Sample Input 2 aaab Sample Output 2 Not Possible Explanation For Sample Input 1, one possible arrangement is \'aba\' which meets the condition of no two adjacent characters being the same. For Sample Input 2, it is not possible to rearrange the string so no two adjacent characters are the same, thus the output is \\"Not Possible\\".","solution":"from collections import Counter import heapq def rearrange_string(s): Rearrange the string so that no two adjacent characters are the same. If not possible, return \\"Not Possible\\". # Count frequency of each character freq = Counter(s) max_heap = [(-count, char) for char, count in freq.items()] heapq.heapify(max_heap) prev_char = \'\' prev_count = 0 result = [] while max_heap: count, char = heapq.heappop(max_heap) result.append(char) # Store the previous character with its remaining count if prev_count < 0: heapq.heappush(max_heap, (prev_count, prev_char)) # Update previous character and its count prev_char = char prev_count = count + 1 # since it\'s a max heap, count is negative rearranged_str = \\"\\".join(result) if len(rearranged_str) != len(s): return \\"Not Possible\\" return rearranged_str"},{"question":"You are given an array of integers a of length n. For each element in the array, you are allowed to increase or decrease it by 1, but you can perform this operation at most once for each element. You need to find the minimum possible value for the maximum difference between any two elements in the array after performing the operation for each element at most once. For example, if a=[1, 5, 9], you can modify it to a=[2, 4, 10] or a=[1, 4, 9] to achieve a minimum maximum difference of 8. Formally, you need to find the minimum possible value of max(b) - min(b) after performing the described operations, where b is the modified array. -----Input----- The first line contains one integer t (1 le t le 10^4). Then t test cases follow. Each test case consists of two lines: - The first line contains one integer n (1 le n le 10^5) — the length of the array a. - The second line contains n integers a_1, a_2, ldots, a_n (1 le a_i le 10^9) — the elements of the array. It is guaranteed that the sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, output the minimum possible value of max(b) - min(b) after performing the described operations for each element at most once. -----Examples----- Input 3 3 1 5 9 5 1 3 3 3 7 4 10 10 10 10 Output 6 4 0 -----Note----- In the first test case, you can obtain [2, 5, 8] or [1, 6, 9] both resulting in a maximum difference of 6. In the second test case, you can modify the array to [2, 3, 3, 3, 6] for a maximum difference of 4. The third test case already has a minimum possible difference of 0 since all elements are the same.","solution":"def min_max_difference(t, test_cases): Finds the minimum possible value for the maximum difference between any two elements in the array after performing the allowed operations. Parameters: t (int): Number of test cases test_cases (list): List of tuples, each containing an integer `n` and a list `a` of length `n` Returns: list: List of integers where each integer is the minimum possible value of `max(b) - min(b)` for the corresponding test case results = [] for n, a in test_cases: min_a, max_a = min(a), max(a) diff = max_a - min_a results.append(max(0, diff - 2)) return results"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB Given an integer array `nums` that represents the score of several players in a game, return an array `result` where `result[i]` is the number of players whose score is less than `nums[i]`. Example Input [8, 1, 2, 2, 3] Output [4, 0, 1, 1, 3]","solution":"def smaller_numbers_than_current(nums): Given an integer array nums representing player scores, returns an array where result[i] is the number of players whose score is less than nums[i]. result = [] for i in range(len(nums)): count = sum(1 for num in nums if num < nums[i]) result.append(count) return result"},{"question":"Alice is organizing her vast collection of unique books and has decided to group them by their themes. Each book has a name and a theme. Her goal is to find out how many themes have more than one book associated with them. She needs your help to write a program that will help her count the number of themes that are associated with more than one book. Input: The first line contains an integer T, the number of test cases. Each test case starts with an integer N, the number of books. The next N lines each contain two strings, the first string is the name of the book, and the second string is the theme of the book. Output: For every test case, print the number of themes that have more than one book associated with them. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ length of book name, theme ≤ 100 Example: Input: 2 4 \\"PrideAndPrejudice\\" \\"Romance\\" \\"Emma\\" \\"Romance\\" \\"ToKillAMockingbird\\" \\"Classic\\" \\"GoneWithTheWind\\" \\"Classic\\" 3 \\"1984\\" \\"Dystopian\\" \\"BraveNewWorld\\" \\"Dystopian\\" \\"Fahrenheit451\\" \\"Dystopian\\" Output: 2 1 Explanation: For the first test case, both \\"Romance\\" and \\"Classic\\" themes have more than one book associated with them, so the output is 2. For the second test case, the \\"Dystopian\\" theme has more than one book associated with it, so the output is 1.","solution":"def count_themes_with_multiple_books(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] book_data = test_cases[i][1] theme_count = {} for book in book_data: name, theme = book if theme in theme_count: theme_count[theme] += 1 else: theme_count[theme] = 1 count = sum(1 for value in theme_count.values() if value > 1) results.append(count) return results"},{"question":"We want to count how many integers between two given integers, inclusive, are multiples of a given number. -----Constraints----- - 1 leq A leq B leq 10^9 - 1 leq K leq 10^9 - A, B, and K are integers. -----Input----- Input is given from Standard Input in the following format: A B K -----Output----- Print the number of multiples of K between A and B inclusive. -----Sample Input----- 6 11 2 -----Sample Output----- 3 The multiples of 2 between 6 and 11 inclusive are 6, 8, and 10. Therefore, the answer is 3.","solution":"def count_multiples(A, B, K): Returns the number of multiples of K between A and B inclusive. # Find the first multiple of K greater than or equal to A if A % K == 0: first_multiple = A else: first_multiple = A + (K - A % K) # Find the last multiple of K less than or equal to B if B % K == 0: last_multiple = B else: last_multiple = B - (B % K) # If the first multiple is greater than the last, there are no multiples if first_multiple > last_multiple: return 0 # The number of multiples of K between first_multiple and last_multiple return (last_multiple - first_multiple) // K + 1"},{"question":"You are given a sequence of N integers. You need to partition the sequence into contiguous subsequences such that each subsequence\'s sum is at least a given integer K. Your task is to find the minimum number of subsequences required to achieve the above condition. Additionally, you need to provide a way to partition the sequence that achieves the minimum number of subsequences. Constraints * 1 leq N leq 1000 * 1 leq K leq 10^9 * 0 leq A_i leq 10^9 * All values in Input are integers. Input Input is given from Standard Input in the following format: N K A_1 A_2 ... A_N Output On the first line, print the minimum number of subsequences required. On the next lines, print strings specifying the subsequences. Each string should contain the subsequence\'s numbers separated by spaces. Examples Input 5 5 1 3 4 2 2 Output 3 1 3 4 2 2 Input 4 10 6 7 5 4 Output 2 6 7 5 4","solution":"def min_subsequences(N, K, A): This function returns the minimum number of subsequences required such that the sum of each subsequence is at least K and the subsequences themselves. result = [] current_subseq = [] current_sum = 0 for num in A: if current_sum + num >= K: current_subseq.append(num) result.append(current_subseq) current_subseq = [] current_sum = 0 else: current_subseq.append(num) current_sum += num if current_subseq: result.append(current_subseq) return result if __name__ == \'__main__\': import sys input = sys.stdin.read data = input().split() N = int(data[0]) K = int(data[1]) A = list(map(int, data[2:])) result = min_subsequences(N, K, A) print(len(result)) for subsequence in result: print(\' \'.join(map(str, subsequence)))"},{"question":"Your task is to write a function that takes a positive integer `n` and returns the factorial of `n`. The factorial of a number is the product of all positive integers from 1 to that number. For example: - The factorial of 4 is 24 (since 4 * 3 * 2 * 1 = 24). - The factorial of 6 is 720 (since 6 * 5 * 4 * 3 * 2 * 1 = 720). Factorials for numbers greater than or equal to 0 are always non-negative. If `n` is 0, the factorial is defined as 1. Implement a function that calculates the factorial of `n` using either an iterative or a recursive approach. ```python def factorial(n): # Your code here # Examples print(factorial(4)) # should return 24 print(factorial(6)) # should return 720 print(factorial(0)) # should return 1 ``` Note: Consider handling edge cases such as very large values of `n` that may require optimizations or constraints based on the programming environment.","solution":"def factorial(n): Returns the factorial of a given positive integer n. Parameters: n (int): a positive integer or 0 Returns: int: the factorial of n if n < 0: raise ValueError(\\"Input must be a non-negative integer.\\") if n == 0: return 1 result = 1 for i in range(1, n + 1): result *= i return result"},{"question":"Given an integer matrix `grid` of dimensions m x n, write a function **minPathSum** that returns the minimum sum of all numbers along its path from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. Example: ``` minPathSum([ [1, 3, 1], [1, 5, 1], [4, 2, 1] ]) returns 7 because 1 → 3 → 1 → 1 → 1 (the sum is 7) minPathSum([ [1, 2, 3], [4, 5, 6] ]) returns 12 because 1 → 2 → 3 → 6 (the sum is 12) ```","solution":"def minPathSum(grid): Returns the minimum sum of all numbers along its path from the top-left corner to the bottom-right corner of the grid. You can only move either down or right at any point in time. if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) # Initialize the first row and the first column of the grid. for i in range(1, m): grid[i][0] += grid[i-1][0] for j in range(1, n): grid[0][j] += grid[0][j-1] # Populate the rest of the grid with the minimum path sum values. for i in range(1, m): for j in range(1, n): grid[i][j] += min(grid[i-1][j], grid[i][j-1]) # The bottom-right corner contains the result. return grid[m-1][n-1]"},{"question":"Given a list of integers, implement a function to remove all duplicate elements while retaining the order of their first occurrence. The function should return the modified list of integers containing only the first occurrence of each element. Input: A sequence of multiple datasets is given as input. Each dataset consists of a single line with a list of integers separated by spaces. The end of the input is indicated by an empty line. Output: For each dataset, output the modified list of integers containing only the first occurrence of each element in the order they first appeared. Example: Input: ``` 4 5 6 5 4 7 8 4 9 1 2 3 4 5 5 4 3 2 1 ``` Output: ``` 4 5 6 7 8 9 1 2 3 4 5 ```","solution":"def remove_duplicates(datasets): This function accepts a list of integer datasets (each dataset being a list of integers), and returns a list of datasets with duplicate values removed, preserving only the first occurrence. result = [] for dataset in datasets: seen = set() filtered_dataset = [] for num in dataset: if num not in seen: seen.add(num) filtered_dataset.append(num) result.append(filtered_dataset) return result"},{"question":"A company has a list of employees working on projects. Each employee can work on multiple projects and each project can have multiple employees. Each project requires an unique \'completion code\' generated by combining the ids of all employees working on that project. The \'completion code\' for a project is defined as the XOR of the ids of all employees assigned to that project. A manager wants to know if it\'s possible to assign employees to projects such that no two distinct projects share the same completion code. Write a function `uniqueCompletionCodes` that takes an integer n (the number of employees) and a 2D list projects, where each sublist represents the ids of employees working on a particular project, and returns True if it’s possible to assign unique completion codes to the projects, otherwise return False. Example 1: Input: n = 4 projects = [ [1, 2, 3], [3, 4], [1, 2, 4] ] Output: True Explanation: The completion codes for the projects are: - Project 1: 1 ^ 2 ^ 3 = 0 - Project 2: 3 ^ 4 = 7 - Project 3: 1 ^ 2 ^ 4 = 7 Although Projects 2 and 3 share the same completion code, the outcome is True because the question asks if it\'s \\"possible\\" to assign unique completion codes. This implies we only need to check if this condition can be met, not necessarily that it must always be met with given data. Example 2: Input: n = 3 projects = [ [1, 2], [2, 3], [1, 3] ] Output: False Explanation: The completion codes for the projects are: - Project 1: 1 ^ 2 = 3 - Project 2: 2 ^ 3 = 1 - Project 3: 1 ^ 3 = 2 Here, all projects have unique completion codes, so it’s possible to assign unique codes. Your Task: You do not need to read input or print anything. Your task is to complete the function `uniqueCompletionCodes` which takes an integer n and a 2D list projects as inputs and returns a boolean value. Expected Time Complexity: O(p*k) where p is the number of projects and k is the maximum number of employees in any project. Expected Auxiliary Space: O(p) Constraints: 1 ≤ n ≤ 10^5 1 ≤ len(projects[i]) ≤ 10","solution":"def uniqueCompletionCodes(n, projects): Returns True if it\'s possible to assign unique completion codes to each project, otherwise returns False. completion_codes = set() for project in projects: code = 0 for emp_id in project: code ^= emp_id if code in completion_codes: return False completion_codes.add(code) return True"},{"question":"A bakery offers a special discount based on the type and quantity of baked goods purchased. The discount rules for the bakery are as follows: 1. For every 3 loaves of bread, you get 1 loaf for free. 2. For every 2 cakes, you get a 50% discount on the second cake. 3. For every 5 cookies, you get 2 cookies for free. Write a function `calculate_total_cost` that takes in a list of purchased items and their quantities and returns the total cost considering the discounts. The price list is as follows: - Bread: 3.00 each - Cake: 7.00 each - Cookie: 2.00 each The input is a dictionary where keys are the names of the baked goods (\'bread\', \'cake\', \'cookie\') and values are the quantities purchased. For example: ```python input_data = { \'bread\': 7, \'cake\': 4, \'cookie\': 12 } ``` Based on the discounts, calculate the total cost. The function should be implemented as follows: ```python def calculate_total_cost(purchases): # Your code here ``` # Examples ```python calculate_total_cost({\'bread\': 3, \'cake\': 1, \'cookie\': 5}) >>> 3.0 + 7.0 + 8.0 = 18.0 calculate_total_cost({\'bread\': 4, \'cake\': 2, \'cookie\': 6}) >>> (3.0*3) + (7.0 + 3.5) + (2.0*4) = 9.0 + 10.5 + 8.0 = 27.5 calculate_total_cost({\'bread\': 7, \'cake\': 4, \'cookie\': 12}) >>> (3.0*5) + (7.0*2 + 7.0) + (2.0*8) = 15.0 + 21.0 + 16.0 = 52.0 ``` # Notes - Perform division and rounding as necessary to handle percentage discounts. - Take care to apply the free goods accurately based on the quantity purchased. - Return the total cost as a float rounded to two decimal places.","solution":"def calculate_total_cost(purchases): prices = { \'bread\': 3.00, \'cake\': 7.00, \'cookie\': 2.00 } total_cost = 0.0 if \'bread\' in purchases: bread_qty = purchases[\'bread\'] bread_cost = (bread_qty // 3) * 2 * prices[\'bread\'] + (bread_qty % 3) * prices[\'bread\'] total_cost += bread_cost if \'cake\' in purchases: cake_qty = purchases[\'cake\'] cake_cost = (cake_qty // 2) * (prices[\'cake\'] + prices[\'cake\'] * 0.5) + (cake_qty % 2) * prices[\'cake\'] total_cost += cake_cost if \'cookie\' in purchases: cookie_qty = purchases[\'cookie\'] cookie_cost = (cookie_qty // 5) * 3 * prices[\'cookie\'] + (cookie_qty % 5) * prices[\'cookie\'] total_cost += cookie_cost return round(total_cost, 2)"},{"question":"Write a program that determines the number of unique paths a mouse can take to navigate through a grid maze. The maze is represented as an n × m grid of cells, where some cells are open and others are blocked. The mouse starts at the top-left corner (0, 0) and needs to reach the bottom-right corner (n-1, m-1). The mouse can move only one cell at a time, either to the right or down. Your task is to calculate the number of unique paths from the starting cell to the destination, avoiding blocked cells. If there is no possible path, the program should return 0. Input format: The first line contains two integers, n and m, representing the number of rows and columns in the grid, respectively. Each of the next n lines contains m characters, where each character is either \'.\' (representing an open cell) or \'#\' (representing a blocked cell). Output format: Print the number of unique paths from the top-left to the bottom-right corner of the grid. Constraints: 1 ≤ n, m ≤ 1000 SAMPLE INPUT 3 3 . .#. ... SAMPLE OUTPUT 1 Explanation: There is only one unique path that the mouse can take: (0,0) → (1,0) → (2,0) → (2,1) → (2,2). All other cells either cannot be reached or are blocked.","solution":"def num_unique_paths(grid, n, m): if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return 0 paths = [[0] * m for _ in range(n)] paths[0][0] = 1 for i in range(n): for j in range(m): if grid[i][j] == \'#\': paths[i][j] = 0 else: if i > 0: paths[i][j] += paths[i-1][j] if j > 0: paths[i][j] += paths[i][j-1] return paths[n-1][m-1] def parse_input(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) grid = [] idx = 2 for i in range(n): grid.append(data[idx]) idx += 1 return grid, n, m if __name__ == \\"__main__\\": grid, n, m = parse_input() print(num_unique_paths(grid, n, m))"},{"question":"A library wants to provide its users with recommendations for new books. Each user of the library has given a rating to some books they have already read. The library\'s system maintains a record of these ratings for each user. Your task is to develop a system that finds the highest rated book a user has read and recommends a new book from the same author. You are given: 1. A dictionary representing the books along with their author. 2. A dictionary representing the users along with the ratings they have given to some of the books. -----Constraints----- - The number of books, n, is between 1 and 100. - The number of users, m, is between 1 and 100. - Each user\'s rating for a book is an integer between 1 and 10, inclusive. - A user has rated at least one book. -----Input----- You will be given the following inputs: 1. The number of books, n. 2. The next n lines, each containing a book title (a string) followed by the author (a string). 3. The number of users, m. 4. The next m lines, each containing a user name (a string), a dictionary with book titles as keys and ratings as values. -----Output----- For each user, print the recommended book (first occurrence alphabetically) from the author of the highest rated book the user has read. If there is no other book by the same author, print \\"No Recommendation\\". -----Sample Input----- 5 BookA Alice BookB Bob BookC Alice BookD Charlie BookE Bob 2 User1 {\\"BookA\\": 8, \\"BookB\\": 9} User2 {\\"BookA\\": 5, \\"BookD\\": 7} -----Sample Output----- BookC No Recommendation In this example, User1\'s highest rated book is \\"BookB\\" by Bob. The next book by Bob is \\"BookE\\". For User2, the highest rated book is \\"BookD\\" by Charlie. Since there is no other book by Charlie, the output for User2 is \\"No Recommendation\\".","solution":"def recommend_books(n, book_author_list, m, user_ratings_list): author_book_map = {} book_author_map = {} # Create mapping of author to the list of books they have written for book, author in book_author_list: if author in author_book_map: author_book_map[author].append(book) else: author_book_map[author] = [book] book_author_map[book] = author recommendations = [] for user, ratings in user_ratings_list: # Find the highest rated book the user has read highest_rated_book = max(ratings, key=ratings.get) highest_rating = ratings[highest_rated_book] author_of_highest = book_author_map[highest_rated_book] # Recommend a new book from the same author potential_books = sorted(book for book in author_book_map[author_of_highest] if book != highest_rated_book) if potential_books: recommendation = potential_books[0] else: recommendation = \\"No Recommendation\\" recommendations.append(recommendation) return recommendations"},{"question":"Given a list of integers, write a program that finds and prints all pairs of integers in the list whose sum is equal to a given target value. Input The input is given in the following format. n arr target The first line contains an integer n, the number of integers in the list (2 ≤ n ≤ 1000). The second line contains n space-separated integers arr which represent the list of integers (-1000 ≤ arr[i] ≤ 1000). The third line contains an integer target which is the target sum (-2000 ≤ target ≤ 2000). Output Output all pairs of integers in the list whose sum equals the target value. Each pair of integers should be printed on a new line, with each integer pair separated by a space. If no such pairs exist, output \\"No pairs found\\". Each pair should be printed in increasing order based on the first integer of the pair, and if two pairs have the same first integer, then they should be printed based on the second integer of the pair. Examples Input 6 1 5 -1 4 2 -4 0 Output -4 4 -1 1 Input 3 3 3 3 6 Output 3 3 Input 4 1 2 3 4 8 Output No pairs found","solution":"def find_pairs_with_sum(n, arr, target): Finds and prints all pairs of integers in the list whose sum is equal to the given target value. Each pair is printed on a new line, sorted in increasing order based on the first integer of the pair. If no such pairs exist, it prints \\"No pairs found\\". pairs = [] seen = set() for number in arr: complement = target - number if complement in seen: pairs.append((min(number, complement), max(number, complement))) seen.add(number) pairs = list(set(pairs)) pairs.sort() if pairs: for pair in pairs: print(pair[0], pair[1]) else: print(\\"No pairs found\\")"},{"question":"Given a 2-dimensional grid of characters, identify if there exists a word in the grid. The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally, vertically, or diagonally neighboring. The same letter cell may not be used more than once in a single word. Input The first line of input is an integer T (1 ≤ T ≤ 10), the number of test cases. Each test case consists of the following: - The first line contains two integers, N and M (1 ≤ N, M ≤ 50), the number of rows and columns in the grid. - The next N lines contain M characters each, representing the grid of uppercase English letters. - The last line contains a word W (1 ≤ |W| ≤ 100), the word to be found in the grid. Output For each test case, output \\"YES\\" if the word exists in the grid, otherwise \\"NO\\". SAMPLE INPUT 2 3 4 A B C E S F C S A D E E ABCCED 3 4 A B C E S F C S A D E E ABCB SAMPLE OUTPUT YES NO Explanation For the 1st test case, the word \\"ABCCED\\" can be constructed: - A (0,0) -> B (0,1) -> C (0,2) -> C (1,2) -> E (0,3) -> D (2,1) For the 2nd test case, the word \\"ABCB\\" cannot be constructed as the letter \'B\' cannot be reused in a single path.","solution":"def exist(board, word): rows, cols = len(board), len(board[0]) def dfs(index, x, y): if index == len(word): return True if x < 0 or x >= rows or y < 0 or y >= cols or board[x][y] != word[index]: return False # Mark the cell as visited by temporarily changing the character temp = board[x][y] board[x][y] = \'#\' found = (dfs(index + 1, x + 1, y) or dfs(index + 1, x - 1, y) or dfs(index + 1, x, y + 1) or dfs(index + 1, x, y - 1) or dfs(index + 1, x + 1, y + 1) or dfs(index + 1, x + 1, y - 1) or dfs(index + 1, x - 1, y + 1) or dfs(index + 1, x - 1, y - 1)) # Restore the cell character after searching board[x][y] = temp return found for i in range(rows): for j in range(cols): if board[i][j] == word[0] and dfs(0, i, j): return \'YES\' return \'NO\' def word_search(T, test_cases): results = [] for t in range(T): N, M = test_cases[t][0] board = test_cases[t][1] word = test_cases[t][2] results.append(exist(board, word)) return results"},{"question":"You are an astronaut on a space mission, and your spaceship has a limited supply of resources. To maintain and monitor the health of the crew, you need to track the consumption of various supplies daily and ensure they are within predefined safe limits. Each supply type has a unique identifier and a corresponding maximum allowable daily consumption. Given a list of daily consumptions for each supply, you need to write a function to determine whether any supply has exceeded its daily limit. If any exceedance is found, the function should identify which supplies have been over-consumed, otherwise, it should confirm that all consumptions are within the safe limits. The daily consumptions will be provided as an array of tuples, where each tuple consists of a supply identifier and its consumption for the day. The predefined safe limits will be provided as a dictionary where the keys are supply identifiers and the values are their corresponding maximum allowable daily consumptions. # Example ```python daily_consumptions = [(\'water\', 120), (\'oxygen\', 60), (\'food\', 100)] safe_limits = {\'water\': 100, \'oxygen\': 60, \'food\': 120} function(daily_consumptions, safe_limits) ``` In the given example: - The supply \'water\' has a consumption of 120, which exceeds its safe limit of 100. - The supply \'oxygen\' has a consumption of 60, which is within its safe limit. - The supply \'food\' has a consumption of 100, which is within its safe limit of 120. The function should return: ``` [\'water\'] ``` If no supply has exceeded its safe limit, the function should return an empty list `[]`. # Function Signature ```python def check_supplies(daily_consumptions: List[Tuple[str, int]], safe_limits: Dict[str, int]) -> List[str]: pass ``` # Constraints - Each supply identifier in `daily_consumptions` will be a string and it will always be present in `safe_limits`. - Consumption values in `daily_consumptions` will be integers between 0 and 1000. - Safe limit values in `safe_limits` will be integers between 1 and 1000. - The number of elements in `daily_consumptions` and `safe_limits` will be between 1 and 100.","solution":"from typing import List, Tuple, Dict def check_supplies(daily_consumptions: List[Tuple[str, int]], safe_limits: Dict[str, int]) -> List[str]: over_consumed_supplies = [] for supply_id, consumption in daily_consumptions: if consumption > safe_limits[supply_id]: over_consumed_supplies.append(supply_id) return over_consumed_supplies"},{"question":"In a distant land, there is a magical forest full of fascinating creatures and mysterious plants. Among these, there exists a very old and wise tree named Eldertree. This tree holds the answers to many questions and riddles of the forest. One day, a young adventurer named Aria encounters Eldertree. The tree offers to grant her a wish if she can solve a challenging problem: determining the longest path in a special type of tree known as a \\"weighted tree.\\" A weighted tree is an undirected, connected graph with n nodes and n-1 edges, where each edge has an associated positive weight. The length of a path is defined as the sum of the weights of the edges along that path. Aria needs to find the longest path possible in the tree. Help Aria determine the length of the longest path in the weighted tree. -----Input----- The first line of the input contains an integer n (2 ≤ n ≤ 10^5) — the number of nodes in the tree. The next n-1 lines each contain three integers u, v, w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^6), representing an edge between nodes u and v with weight w. -----Output----- Print a single integer — the length of the longest path in the tree. -----Example----- Input 5 1 2 3 2 3 4 3 4 2 4 5 6 Output 15 -----Note----- The tree in the example can be visualized as follows: 1 2 3 4 5 The longest path is from node 1 to node 5, with a total length of 3 + 4 + 2 + 6 = 15.","solution":"import sys from collections import defaultdict, deque def find_longest_path(n, edges): # Build graph from edges graph = defaultdict(list) for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def bfs(start): # BFS to find the farthest node and its distance distances = [-1] * (n + 1) distances[start] = 0 queue = deque([start]) farthest_node = start while queue: node = queue.popleft() for neighbor, weight in graph[node]: if distances[neighbor] == -1: # Unvisited distances[neighbor] = distances[node] + weight queue.append(neighbor) if distances[neighbor] > distances[farthest_node]: farthest_node = neighbor return farthest_node, distances[farthest_node] # Step 1: Run BFS from an arbitrary node (let\'s say node 1) farthest_node_from_start, _ = bfs(1) # Step 2: Run BFS from the farthest node found in step 1 _, longest_path_length = bfs(farthest_node_from_start) return longest_path_length"},{"question":"A group of friends are planning a trip together, and they want to rent a car. They have a list of cars from different rental companies, with each car having a specific rental cost per day. Due to budget constraints, they want to find the car that fits their budget while maximizing the number of days they can rent it. Your task is to write a function to determine which car should be rented in order to maximize the number of days they can rent it without exceeding their budget. If multiple cars can be rented for the same maximum number of days within the budget, choose the car with the lowest cost per day. ------ Input ------ The first line of the input contains an integer T, the number of test cases. The description of each testcase follows. - The first line of each test case contains two integers B and N, where B is the total budget and N is the number of available cars. - The following N lines each contain a single integer C, which represents the cost per day of renting a car. ------ Output ------ For each test case, output the cost per day of the car that they should rent to maximize the number of rental days under the given budget. If all the cars exceed the budget, output \\"Not Affordable\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ B ≤ 10^9 1 ≤ N ≤ 1000 1 ≤ C ≤ 10^7 ------ Sample Input 1 ------ 3 1000 3 500 300 700 500 4 400 600 800 1000 150 2 200 250 ------ Sample Output 1 ------ 300 400 Not Affordable ------ Explanation 1 ------ Testcase 1: The best car to rent is the one costing 300 per day. With a budget of 1000, it gives them the maximum of 3 days of rental. Testcase 2: The best car to rent is the one costing 400 per day. With a budget of 500, it gives them the maximum of 1 day of rental. Testcase 3: All cars exceed the budget of 150, so it is \\"Not Affordable\\".","solution":"def find_best_car_to_rent(T, test_cases): results = [] for i in range(T): B, N, cars = test_cases[i] max_days = 0 chosen_car = -1 for cost in cars: if cost <= B: days = B // cost if days > max_days or (days == max_days and cost < chosen_car): max_days = days chosen_car = cost if chosen_car == -1: results.append(\\"Not Affordable\\") else: results.append(chosen_car) return results"},{"question":"You are given a rectangular grid with n rows and m columns. Each cell in the grid is either free (.) or blocked (#). You start at the top-left corner of the grid (cell 1,1) and your goal is to reach the bottom-right corner (cell n,m). You can move to an adjacent cell in one of the four cardinal directions (up, down, left, right), but you cannot move out of the grid or move to a blocked cell. Determine if it is possible to reach the bottom-right corner from the top-left corner. -----Input----- The input consists of: - one line with two integers n and m (2 le n, m le 500), representing the number of rows and columns of the grid; - n lines, each with m characters, where each character is either \'.\' (free cell) or \'#\' (blocked cell). The top-left and bottom-right corners of the grid are guaranteed to be free cells. -----Output----- Output \\"Yes\\" if it is possible to reach the bottom-right corner from the top-left corner. Otherwise, output \\"No\\". -----Examples----- Sample Input: 5 5 ..... .#. .#.#. .#... ..... Sample Output: Yes Sample Input: 3 3 .#. # .#. Sample Output: No","solution":"def is_path_possible(n, m, grid): from collections import deque # Define directions for moving in the grid directions = [(1, 0), (-1, 0), (0, 1), (0, -1)] # Function to check if a cell is within the grid and is not blocked def is_valid(x, y): return 0 <= x < n and 0 <= y < m and grid[x][y] == \'.\' # Initialize BFS queue = deque([(0, 0)]) visited = set() visited.add((0, 0)) while queue: x, y = queue.popleft() # Check if we\'ve reached the bottom-right corner if (x, y) == (n-1, m-1): return \\"Yes\\" # Explore all four possible directions for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return \\"No\\""},{"question":"Marcela is interested in counting the number of palindromic substrings within a given string. A palindromic string is a string that reads the same forwards and backwards. She defines a substring to be a contiguous sequence of characters within a string. For example, in the string \\"racecar\\", \\"racecar\\", \\"aceca\\", \\"cec\\", and \\"rar\\" are all palindromic substrings. Write a program that counts the number of palindromic substrings in a given string. -----Input----- The input consists of a single string of lowercase alphabetic characters. The length of the string will be less than 100. -----Output----- Output the number of palindromic substrings within the given string. -----Examples----- Sample Input: abba Sample Output: 6 Sample Input: abc Sample Output: 3","solution":"def count_palindromic_substrings(s): Counts and returns the number of palindromic substrings in a given string. n = len(s) count = 0 for i in range(n): # Count odd length palindromes with center at i count += count_palindromes_around_center(s, i, i) # Count even length palindromes with centers at i and i+1 count += count_palindromes_around_center(s, i, i + 1) return count def count_palindromes_around_center(s, left, right): Expand around center to count palindromes. count = 0 while left >= 0 and right < len(s) and s[left] == s[right]: count += 1 left -= 1 right += 1 return count"},{"question":"You are given an array of integers and a target sum. You need to find two distinct elements in the array that sum up to the target sum. If such a pair exists, return the pair as a list. If multiple pairs exist, return any one of them. If no such pair exists, return an empty list. Example 1: Input: nums = [2, 7, 11, 15] target = 9 Output: [2, 7] Explanation: The pair 2 and 7 adds up to 9, which is the target sum. Example 2: Input: nums = [1, 2, 4, 5] target = 8 Output: [] Explanation: There is no pair of numbers that adds up to 8. Example 3: Input: nums = [3, 3, 4, 7] target = 6 Output: [3, 3] Your Task: You don\'t need to read input or print anything. Your task is to complete the function findPair() which takes nums (array of integers) and target (integer) as inputs and returns a list containing the pair of numbers, or an empty list if no such pair exists. Expected Time Complexity: O(n) Expected Auxiliary Space: O(n) Constraints: 1 <= n <= 10^5 -10^9 <= nums[i] <= 10^9 -10^9 <= target <= 10^9","solution":"def findPair(nums, target): Finds two distinct elements in the array that sum up to the target sum. Parameters: nums (list): A list of integers. target (int): The target sum. Returns: list: A list containing the pair of numbers that add up to the target sum, or an empty list if no such pair exists. seen = {} for num in nums: complement = target - num if complement in seen: return [complement, num] seen[num] = True return []"},{"question":"Rita is very fond of mathematics and she loves to play around with numbers. One day she came across a very interesting problem. She has an array of unique integers, and she wants to perform a series of operations on this array. In each operation, she can do one of the following: 1. Take any two elements (x) and (y) from the array and replace them with (x + y). 2. Take any two elements (x) and (y) from the array and replace them with (x - y) (only if (x > y)). Rita wishes to know the maximum possible value she can obtain in the array after performing any number of these operations (including zero operations). Input: The input consists of two lines. The first line contains a single integer (n) (2 (leq) (n) (leq) (100)), the number of elements in the array. The second line contains (n) unique integers (a_1, a_2, ldots, a_n) (-10^4 (leq) (a_i) (leq) 10^4). Output: Print a single integer - the maximum possible value that can be present in the array after performing any number of allowed operations. Examples: Input: 5 4 3 -1 -3 1 Output: 4 Input: 3 2 7 9 Output: 16 Explanation: In the first example, the maximum value that can be obtained is 4 because neither the addition nor the subtraction between the provided elements can generate a larger value. In the second example, one of the ways to achieve the maximum value is: 1. Add 7 and 9 to get 16. Thus, the maximum value in the array is 16.","solution":"def max_possible_value(n, arr): Returns the maximum possible value in the array after performing any number of the allowed operations. return sum(arr)"},{"question":"Objective In this task, you must design a safety check system for a space station. The space station has multiple sectors, each sector containing multiple modules. Each module can be classified as Safe, Warning, or Critical, based on the data you receive. Input Your function will receive two arguments: 1. Sector Data: A dictionary where keys are sector names and values are lists of dictionaries. Each dictionary in the list represents a module in that sector and contains the module name (key \'name\') and its status (key \'status\'). Status can be one of the following strings: - \\"Safe\\": There are no problems in the module. - \\"Warning\\": There are minor issues in the module. - \\"Critical\\": There are serious issues in the module. 2. Priority: A string that can either be \\"Critical\\" or \\"Warning\\". The generated safety report should prioritize either the critical or warning modules based on this parameter. Output Your function will return a dictionary where each key is a sector name and the value is an integer representing the number of modules in that sector with the status specified by the \\"Priority\\" parameter. The dictionary should only include sectors that have at least one module with the status specified by the \\"Priority\\" parameter. Example ```python sector_data = { \\"Sector 1\\": [ {\\"name\\": \\"Module A\\", \\"status\\": \\"Safe\\"}, {\\"name\\": \\"Module B\\", \\"status\\": \\"Critical\\"}, {\\"name\\": \\"Module C\\", \\"status\\": \\"Warning\\"}, ], \\"Sector 2\\": [ {\\"name\\": \\"Module D\\", \\"status\\": \\"Critical\\"}, {\\"name\\": \\"Module E\\", \\"status\\": \\"Critical\\"}, ], \\"Sector 3\\": [ {\\"name\\": \\"Module F\\", \\"status\\": \\"Safe\\"}, {\\"name\\": \\"Module G\\", \\"status\\": \\"Warning\\"}, ] } priority = \\"Critical\\" safety_check(sector_data, priority) # Expected output: # {\\"Sector 1\\": 1, \\"Sector 2\\": 2} priority = \\"Warning\\" safety_check(sector_data, priority) # Expected output: # {\\"Sector 1\\": 1, \\"Sector 3\\": 1} ``` Each sector dictionary contains a list of modules, and each module dictionary contains a \'name\' and \'status\'. The safety report dictionary includes sectors with at least one module in the given priority status. Constraints: - The number of sectors will not exceed 50. - Each sector will have upto 20 modules. - Input will always be valid. Analyze the status of the modules in each sector and create a safety report that will assist engineers in prioritizing their checks and repairs on the space station.","solution":"def safety_check(sector_data, priority): Generates a safety report prioritizing the given status. Args: sector_data (dict): A dictionary containing sector data. priority (str): The status to prioritize, either \\"Critical\\" or \\"Warning\\". Returns: dict: A dictionary with sector names and the count of prioritized status modules. report = {} for sector, modules in sector_data.items(): count = sum(1 for module in modules if module[\'status\'] == priority) if count > 0: report[sector] = count return report"},{"question":"A chemist has three types of solutions – A, B, and C. Each type of solution contains a fixed concentration of a chemical compound: 10%, 20%, and 30%, respectively. The chemist needs to prepare a specific volume of a solution with an exact concentration. ----- Input ----- The input consists of two real numbers on a single line separated by a space: - V (the desired volume of the solution in liters, 1 ≤ V ≤ 1000) - C (the target concentration of the solution as a percentage, 10 ≤ C ≤ 30) ----- Output ----- Output three non-negative integers: the volumes (in liters) of solutions A, B, and C used, respectively. If there are multiple solutions, output any one of them. ----- Examples ----- Sample Input 1: 100.0 20.0 Sample Output 1: 0 100 0 Sample Input 2: 150.0 25.0 Sample Output 2: 75 0 75","solution":"def prepare_solution(V, C): Prepare the required solution volume V with concentration C using solutions A, B, and C. Solutions have concentrations of 10%, 20%, and 30%, respectively. Returns the volumes of A, B, and C used. # Simple case where the target concentration matches one of the solution concentrations if C == 10.0: return V, 0, 0 elif C == 20.0: return 0, V, 0 elif C == 30.0: return 0, 0, V # We need to find volumes a, b, and c such that: # a + b + c = V # 10a + 20b + 30c = C * V # Substituting b and c in terms of a: for a in range(int(V) + 1): for b in range(int(V - a) + 1): c = V - a - b if (10 * a + 20 * b + 30 * c) == (C * V): return a, b, c return 0, 0, 0"},{"question":"Alice is working with matrices and needs to transpose them. Transpose of a matrix is a new matrix whose rows are the columns of the original matrix. Alice has a special restriction that the matrix dimensions do not exceed 10x10. Given a matrix with dimensions n x m (1 ≤ n, m ≤ 10), write a program to compute the transpose of this matrix. Input The first line consists of two integers n and m, representing the number of rows and columns in the matrix. The next n lines each contain m integers representing the elements of the matrix. Output Output the transpose of the matrix, with each line containing the elements of one row of the transposed matrix. Examples Input 2 3 1 2 3 4 5 6 Output 1 4 2 5 3 6 Input 3 3 1 -1 0 0 1 1 -1 0 1 Output 1 0 -1 -1 1 0 0 1 1 Input 1 4 1 3 5 7 Output 1 3 5 7","solution":"def transpose_matrix(n, m, matrix): Computes and returns the transpose of a given n x m matrix. Args: n (int): Number of rows in the original matrix. m (int): Number of columns in the original matrix. matrix (list of list of ints): The original n x m matrix. Returns: list of list of ints: The m x n transposed matrix. transposed = [[matrix[j][i] for j in range(n)] for i in range(m)] return transposed"},{"question":"You are given a list of integers where every integer appears exactly twice, except for one integer which appears exactly once. Your task is to find and return the integer that appears only once. Implement it in such a way that it runs in linear time complexity and uses constant space complexity. Input The input consists of two lines: - The first line contains an integer N, the number of integers in the list. - The second line contains N space-separated integers representing the list. Output Print the integer that appears only once. Constraints 1 ≤ N ≤ 10^6 N is always an odd number. Example Input: 5 2 3 4 3 2 Output: 4 Explanation In the example case, the integer 4 is the only integer that appears once in the list.","solution":"def find_unique_number(nums): Finds and returns the integer that appears exactly once in the list where every other integer appears exactly twice. unique_number = 0 for num in nums: unique_number ^= num return unique_number"},{"question":"One day, Synne decided to tidy up her collection of books. She has a list of books where each book is represented by a string of lowercase English letters. While organizing, she realized that some books are very similar and she’d prefer to keep the unique ones only. A book is considered similar to another if they have the same character frequencies. For example, \\"aabbcc\\" is similar to \\"bbaacc\\" because they have the same characters with the same frequencies, even though the order is different. Help Synne write a program that takes her list of book representations and outputs the number of unique book types she has. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^4), the number of books. The next n lines each contain a string representing a book. Each string is composed of lowercase English letters and has length at most 100. -----Output----- Output a single integer, the number of unique book types in Synne\'s collection. -----Examples----- Sample Input 1: 5 aabbcc bbaacc abc bac xyz Sample Output 1: 3 Sample Input 2: 4 book koob kbob okob Sample Output 2: 2","solution":"def unique_book_types(n, books): Returns the number of unique book types based on character frequencies. :param n: int - number of books :param books: list of str - list of book representations :return: int - number of unique book types from collections import Counter unique_books = set() for book in books: book_signature = tuple(sorted(Counter(book).items())) unique_books.add(book_signature) return len(unique_books)"},{"question":"Overview The process for validating credit card numbers is based on the Luhn algorithm. This simple checksum formula can determine whether a given credit card number is valid, or if it\'s likely a typo. The Luhn Algorithm The Luhn algorithm works as follows: 1. Starting with the second to last digit and moving left, double the value of every second digit. 2. If doubling the number results in a number greater than 9, subtract 9 from the result. 3. Sum all the digits. 4. If the total modulo 10 is equal to 0, the number is valid. Otherwise, it\'s invalid. Your Task Write a function `validate_credit_card` that takes a string representing a credit card number and returns a boolean (`True` or `False`) indicating whether the card number is valid according to the Luhn algorithm. Example The implementation should consider various test cases: Input: \\"4532015112830366\\" (valid) Output: `True` Input: \\"4532015112830367\\" (invalid) Output: `False` Input: \\"6011514433546201\\" (valid) Output: `True` Input: \\"6011514433546200\\" (invalid) Output: `False` Constraints - The input string will contain only numeric characters. - The length of the input string will be between 13 and 19 characters, inclusive. - You are not allowed to use any regex library for this task. Implementation Implement the function as follows: ```python def validate_credit_card(card_num): # Step 1: Convert the card number to a list of integers digits = [int(d) for d in card_num] # Step 2: Double every second digit from the right (starting with second last) for i in range(len(digits) - 2, -1, -2): doubled = digits[i] * 2 if doubled > 9: doubled -= 9 digits[i] = doubled # Step 3: Calculate the sum of all digits total = sum(digits) # Step 4: If the total modulo 10 is 0, the number is valid return total % 10 == 0 ``` Test your function with the provided examples and ensure it meets the given constraints. Good luck!","solution":"def validate_credit_card(card_num): Check if the given card number is valid based on the Luhn algorithm. Parameters: card_num (str): The credit card number as a string of digits Returns: bool: True if the card number is valid, False otherwise # Step 1: Convert the card number to a list of integers digits = [int(d) for d in card_num] # Step 2: Double every second digit from the right (starting with second last) for i in range(len(digits) - 2, -1, -2): doubled = digits[i] * 2 if doubled > 9: doubled -= 9 digits[i] = doubled # Step 3: Calculate the sum of all digits total = sum(digits) # Step 4: If the total modulo 10 is 0, the number is valid return total % 10 == 0"},{"question":"In a certain kingdom, there are **n** cities and **m** bidirectional roads connecting some pairs of cities. The kingdom\'s government plans to ensure that there is a way to travel between any two cities, either directly via a road or indirectly via a series of roads. However, due to budget constraints, they want to achieve this with the minimum possible number of roads. There is also a list of **k** pairs of cities that are considered pivotal for national security. It is crucial to guarantee that each pivotal pair of cities has a direct road connecting them. Determine the minimum number of additional roads that need to be constructed to make the entire kingdom connected while ensuring all pivotal pairs have direct roads. # Input The first line contains three space-separated integers **n**, **m**, and **k** (2 ≤ n ≤ 100, 1 ≤ m ≤ 1000, 1 ≤ k ≤ 100), denoting the number of cities, the number of existing roads, and the number of pivotal pairs respectively. The next **m** lines each contain two space-separated integers **u** and **v** (1 ≤ u, v ≤ n, u ≠ v), indicating that there is a bidirectional road between city **u** and city **v**. The next **k** lines each contain two space-separated integers **a** and **b** (1 ≤ a, b ≤ n, a ≠ b), indicating that a direct road must be constructed between city **a** and city **b** if it does not already exist. # Output Print a single integer, the minimum number of additional roads required to make the kingdom connected while fulfilling all the conditions. # Example # Input ``` 6 5 2 1 2 1 3 2 3 4 5 5 6 1 4 3 6 ``` # Output ``` 2 ``` # Note In the given example, to satisfy the conditions, the minimum number of additional roads required is 2, one between cities 1 and 4 and one between cities 3 and 6. These placements make sure the whole network is connected and both pivotal pairs have direct connections.","solution":"def minimum_additional_roads(n, m, k, existing_roads, pivotal_pairs): from collections import defaultdict, deque def bfs(start, graph, visited): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) graph = defaultdict(list) for u, v in existing_roads: graph[u].append(v) graph[v].append(u) # Ensure all pivotal pairs have a direct road pivotal_required_roads = set() for a, b in pivotal_pairs: if b not in graph[a]: pivotal_required_roads.add(frozenset([a, b])) # Temporarily add all required roads for pivotal pairs for road in pivotal_required_roads: u, v = list(road) graph[u].append(v) graph[v].append(u) # Find number of connected components in the graph with pivotal roads added visited = [False] * (n + 1) connected_components = 0 for city in range(1, n + 1): if not visited[city]: connected_components += 1 visited[city] = True bfs(city, graph, visited) required_additional_roads = len(pivotal_required_roads) + (connected_components - 1) return required_additional_roads"},{"question":"You are working on a new project that involves managing a list of tasks, each with a priority. Your goal is to implement a software system that allows you to add tasks, remove tasks, and fetch the highest priority task efficiently. A task has two attributes: a description (a string) and a priority (an integer). The higher the priority number, the more important the task is. Implementation Requirements: 1. **Add a task**: This action adds a new task to the system. 2. **Remove a task**: This action removes a task from the system by its description. 3. **Fetch the highest priority task**: This action retrieves the task with the highest priority. If two tasks have the same priority, return the one that was added first. These actions should be efficient to handle a large number of tasks. # Input: 1. The first line contains an integer `n` (1 ≤ n ≤ 100,000), the number of operations to be performed. 2. Each of the next `n` lines contains a single operation in one of the following formats: - `ADD description priority`: Add a new task with the given description and priority. - `REMOVE description`: Remove the task with the given description. - `FETCH`: Fetch the description of the task with the highest priority. # Output: For each `FETCH` operation, output a single line containing the description of the highest priority task. # Example: Input: ``` 7 ADD task1 10 ADD task2 20 ADD task3 15 FETCH REMOVE task2 FETCH REMOVE task1 ``` Output: ``` task2 task3 ``` # Note: - Descriptions are unique. - If the `FETCH` operation is called when there are no tasks, print \\"NONE\\".","solution":"import heapq class TaskManager: def __init__(self): self.task_map = {} self.priority_queue = [] self.removed_tasks = set() def add_task(self, description, priority): if description in self.task_map: self.remove_task(description) task = (priority, description) self.task_map[description] = task heapq.heappush(self.priority_queue, (-priority, description)) def remove_task(self, description): if description in self.task_map: removed_task = self.task_map.pop(description) self.removed_tasks.add(removed_task) def fetch_highest_priority_task(self): while self.priority_queue: priority, description = heapq.heappop(self.priority_queue) if (priority, description) not in self.removed_tasks: return description return \\"NONE\\" def process_operations(operations): manager = TaskManager() results = [] for operation in operations: parts = operation.split() command = parts[0] if command == \\"ADD\\": description = parts[1] priority = int(parts[2]) manager.add_task(description, priority) elif command == \\"REMOVE\\": description = parts[1] manager.remove_task(description) elif command == \\"FETCH\\": results.append(manager.fetch_highest_priority_task()) return results"},{"question":"You are given a linked list where each node contains a unique integer value. Your task is to complete a function `swapPairs()` that swaps every two adjacent nodes and returns the head of the modified linked list. For example, given a linked list `1->2->3->4`, you should return the list as `2->1->4->3`. Example: Your Task: You don\'t need to read input or print anything. Complete the function `swapPairs()` that takes the head of the linked list as input parameter and returns the head of the modified linked list. Example 1: Input: 1->2->3->4 Output: 2->1->4->3 Explanation: In the given list, the first pair (1 and 2) is swapped resulting in `2->1`, then the second pair (3 and 4) is swapped resulting in `2->1->4->3`. Constraints: 1<=N<=10^4","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def swapPairs(head: ListNode) -> ListNode: if not head or not head.next: return head new_head = head.next prev = None current = head while current and current.next: next_pair = current.next.next second = current.next second.next = current current.next = next_pair if prev: prev.next = second prev = current current = next_pair return new_head # Helper function to create a linked list from a list. def create_linked_list(lst): if not lst: return None head = ListNode(lst[0]) current = head for val in lst[1:]: current.next = ListNode(val) current = current.next return head # Helper function to convert linked list to a list. def linked_list_to_list(head): result = [] current = head while current: result.append(current.val) current = current.next return result"},{"question":"You are given a list of strings, `words`, and a string `s` that contains only lower case English letters. Write a function to determine if `s` can be segmented into a space-separated sequence of one or more dictionary words from the list `words`. Example 1: Input: words = [\\"apple\\", \\"pen\\"], s = \\"applepenapple\\" Output: True Explanation: The string can be segmented as \\"apple pen apple\\". Example 2: Input: words = [\\"cats\\", \\"dog\\", \\"sand\\", \\"and\\", \\"cat\\"], s = \\"catsandog\\" Output: False Explanation: The string cannot be segmented into space-separated sequence of dictionary words. Example 3: Input: words = [\\"leet\\", \\"code\\"], s = \\"leetcode\\" Output: True Explanation: The string can be segmented as \\"leet code\\". Example 4: Input: words = [\\"a\\", \\"b\\", \\"c\\"], s = \\"abc\\" Output: True Explanation: The string can be segmented as \\"a b c\\". Constraints: - The length of `s` will be in the range [1, 3000]. - The length of `words` will be in the range [1, 1000]. - The length of words[i] will be in the range [1, 20]. - `s` and `words[i]` consist of only lower case English letters.","solution":"def can_segment(words, s): Determine if the string `s` can be segmented into a space-separated sequence of one or more dictionary words from the list `words`. :param words: List of dictionary words :param s: The string to be segmented :return: True if s can be segmented, False otherwise word_set = set(words) dp = [False] * (len(s) + 1) dp[0] = True for i in range(1, len(s) + 1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[-1]"},{"question":"You are given a list of integers, representing heights of buildings in a row. The goal is to paint all buildings in such a way that no two adjacent buildings have the same color, using the minimum number of colors. Each time you paint a building, it gets a fresh color from a chosen palette. The number of colors in the palette is infinite, meaning you can use as many different colors as needed. However, you must aim to minimize the total number of colors used. Write a program to determine the minimum number of colors needed to paint all the buildings with the constraint given. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. Each test case consists of two lines: - The first line contains the integer n (1 le n le 10^5) — the number of buildings. - The second line contains n integers h_1, h_2, dots, h_n (1 le h_i le 10^9) — the heights of the buildings. It is guaranteed the sum of n over all test cases does not exceed 10^6. -----Output----- For each test case, output one integer — the minimum number of colors needed to paint all the buildings. -----Examples----- Input 3 3 1 2 3 4 10 10 10 10 5 5 4 5 4 5 Output 3 1 2 -----Notes----- In the first test case, we can paint the buildings with 3 different colors since none of the adjacent buildings have the same height. - Building 1: Color 1 - Building 2: Color 2 - Building 3: Color 3 In the second test case, all buildings have the same height, so we can use just 1 color. - Building 1: Color 1 - Building 2: Color 1 - Building 3: Color 1 - Building 4: Color 1 In the third test case, we can use 2 colors as follows: - Building 1: Color 1 - Building 2: Color 2 - Building 3: Color 1 - Building 4: Color 2 - Building 5: Color 1","solution":"def min_colors_to_paint_buildings(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] heights = test_cases[i][1] if n == 1: # Only one building, so we need just one color results.append(1) continue colors_needed = 1 for j in range(1, n): if heights[j] != heights[j - 1]: colors_needed = 2 break results.append(colors_needed) return results"},{"question":"You run a small robot manufacturing plant, and you have just built your newest robot model. The robots are programmed to follow straight lines on the plane. Each robot starts at position boldsymbol{(x,y)} and follows a certain direction (either North, East, South, West). The robots are given commands to move a certain amount of steps in their current direction. However, the robot can bump into another robot if they overlap on the same position after moving. Given the coordinates and directions of each of the boldsymbol{n} robots and their commands, determine if any two robots collide after executing the commands. If at least one collision occurs, output \\"Yes\\". Otherwise, output \\"No\\". Input Format The first line contains an integer, boldsymbol{n}, the number of robots. Each of the next boldsymbol{n} lines contains an integer and a character boldsymbol{x y d} describing the initial position (x,y) and direction d of a robot where d is one of {\'N\', \'E\', \'S\', \'W\'}. The next line contains one integer, boldsymbol{m}, the number of commands. Each of the next boldsymbol{m} lines contains two integers, boldsymbol{i} and boldsymbol{s}, where the boldsymbol{i}{th} robot should move boldsymbol{s} steps in its current direction. Constraints 1 leq n leq 10^3 0 leq x, y leq 10^4 1 leq m leq 10^4 1 leq s leq 10^3 boldsymbol{i} is a valid index of the robot (1-based). Output Format Print a single word, \\"Yes\\" if any two robots collide, and \\"No\\" otherwise. Sample Input 4 1 1 N 2 2 E 0 2 S 2 3 W 3 1 2 2 1 3 1 Sample Output Yes Explanation The first command moves the first robot from (1,1) to (1,3). The second command moves the second robot from (2,2) to (3,2). The third command moves the third robot from (0,2) to (0,1). Since none of the robots overlap at the same position after these commands, the output is \\"No\\".","solution":"def will_robots_collide(n, robots, m, commands): directions = { \'N\': (0, 1), \'E\': (1, 0), \'S\': (0, -1), \'W\': (-1, 0) } positions = {} for i, (x, y, d) in enumerate(robots): positions[i] = (x, y, d) position_set = set() for key, value in positions.items(): position_set.add((value[0], value[1])) for i, steps in commands: robot_index = i - 1 x, y, d = positions[robot_index] dx, dy = directions[d] new_x = x + dx * steps new_y = y + dy * steps if (new_x, new_y) in position_set: return \\"Yes\\" position_set.remove((x, y)) position_set.add((new_x, new_y)) positions[robot_index] = (new_x, new_y, d) return \\"No\\""},{"question":"Write a program that takes a string representing a large number (with up to 1000 digits) as input and calculates the product of its digits. Input The input consists of multiple datasets. For each dataset, a line contains a string representing an integer x. The number of digits in x does not exceed 1000. The input ends with a line including a single asterisk (\'*\'). Your program should not process this terminal symbol. Output For each dataset, print the product of digits in x. If the product equals zero, print 0. Example Input 123 240 500 * Output 6 0 0","solution":"def product_of_digits(datasets): Takes a list of strings representing large numbers and returns a list with the product of the digits in each number. products = [] for number in datasets: if number == \'*\': break product = 1 for digit in number: product *= int(digit) if product == 0: break products.append(product) return products # Example usage: datasets = [\\"123\\", \\"240\\", \\"500\\", \\"*\\"] print(product_of_digits(datasets)) # Output: [6, 0, 0]"},{"question":"# Binary Tree Level Order Traversal Description: Given a binary tree, return the level order traversal of its nodes\' values. (i.e., from left to right, level by level). Example: Given binary tree [3, 9, 20, null, null, 15, 7], ``` 3 / 9 20 / 15 7 ``` should return its level order traversal as: ``` [ [3], [9, 20], [15, 7] ] ``` Note: - A binary tree node is defined as follows: ``` class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None ``` - An empty tree should return an empty list. - The input tree will always be valid. Some Examples: ``` Given binary tree [1], return its level order traversal as: [ [1] ] Given binary tree [], return its level order traversal as: [] ```","solution":"from collections import deque class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def levelOrder(root): Returns the level order traversal of the binary tree\'s nodes\' values. if not root: return [] result = [] queue = deque([root]) while queue: level_size = len(queue) level = [] for i in range(level_size): node = queue.popleft() level.append(node.val) if node.left: queue.append(node.left) if node.right: queue.append(node.right) result.append(level) return result"},{"question":"You are given a grid with N rows and M columns. Each cell of the grid contains an integer that represents the altitude of that cell. You\'re required to find the largest rectangle of connected cells (sharing an edge) with a uniform altitude. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers N and M. Each of the next N lines contains M space-separated integers representing the altitudes of the cells in the grid. ------ Output ------ For each test case, print a single line containing one integer — the area of the largest rectangle with a uniform altitude. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N, M ≤ 500 1 ≤ text{Altitude} ≤ 1000 ----- Sample Input 1 ------ 1 3 4 1 2 2 3 1 1 1 3 3 3 3 3 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The largest rectangle with uniform altitude in the first test case is the 2 times 2 region with altitude 1 in the second and third rows.","solution":"def largest_uniform_altitude_rect(T, cases): results = [] def find_largest_with_same_altitude(grid, N, M): largest_area = 0 for i in range(N): for j in range(M): altitude = grid[i][j] min_width = float(\'inf\') for k in range(i, N): if grid[k][j] != altitude: break width = 0 for l in range(j, M): if grid[k][l] != altitude: break width += 1 min_width = min(min_width, width) largest_area = max(largest_area, min_width * (k - i + 1)) return largest_area for case in cases: N, M, grid = case largest_area = find_largest_with_same_altitude(grid, N, M) results.append(largest_area) return results # For each test case, we input the number of rows, columns, and the grid itself, then call the function."},{"question":"In a secret research lab, scientists have developed a fascinating sequence based on Fibonacci numbers, called the \\"Fibonacci-like\\" sequence. This sequence is generated by starting with two given numbers and then each subsequent number is the sum of the previous two numbers, but with a twist: the sum operation cycles through a given set of coefficients. Here’s how the sequence is generated: - Start with two given integers, a and b. - Each subsequent number in the sequence is the sum of the previous two numbers, multiplied by the next coefficient. Coefficients are used cyclically. For example, if our starting numbers are 1 and 1 and coefficients are [2, 3, 4], then the sequence is generated as: - 1 (start) - 1 (start) - (1 + 1) * 2 = 4 - (1 + 4) * 3 = 15 - (4 + 15) * 4 = 76 - (15 + 76) * 2 = 182 - and so on... Given an initial pair of numbers, a list of coefficients, and a number n, write a program to generate and print the nth number in this Fibonacci-like sequence. # Input The input consists of multiple datasets. The format of each dataset is as follows: ``` a b n c1 c2 ... cm ``` - a and b are the first two integers in the sequence (0 ≤ a, b ≤ 10^6). - n is the position in the sequence (1 ≤ n ≤ 1000). - c1, c2, ..., cm are coefficients, where 1 ≤ c ≤ 10^6 and 1 ≤ m ≤ 100. The input ends when a line with `0 0 0` is encountered. # Output For each dataset, print the nth number in the sequence on a new line. # Sample Input ``` 1 1 5 2 3 4 2 3 6 1 2 3 4 0 0 0 ``` # Sample Output ``` 76 182 ``` # Explanation In the first dataset: - Starting numbers are 1 and 1. - Coefficients are [2, 3, 4]. - The sequence generated is 1, 1, (1+1)*2=4, (1+4)*3=15, (4+15)*4=76. - The 5th number in the sequence is 76. In the second dataset: - Starting numbers are 2 and 3. - Coefficients are [1, 2, 3, 4]. - The sequence generated is 2, 3, (2+3)*1=5, (3+5)*2=16, (5+16)*3=63, (16+63)*4=316, (63+316)*1=379. - The 6th number in the sequence is 316.","solution":"def fibonacci_like_sequence(a, b, n, coefficients): Generate the nth number in the Fibonacci-like sequence using given starting numbers and coefficients. if n == 1: return a if n == 2: return b sequence = [a, b] coeff_len = len(coefficients) for i in range(2, n): next_val = (sequence[-1] + sequence[-2]) * coefficients[(i - 2) % coeff_len] sequence.append(next_val) return sequence[-1] def process_sequences(inputs): results = [] idx = 0 while idx < len(inputs): a, b, n = map(int, inputs[idx].split()) if a == 0 and b == 0 and n == 0: break idx += 1 coefficients = list(map(int, inputs[idx].split())) results.append(fibonacci_like_sequence(a, b, n, coefficients)) idx += 1 return results # Example usage with provided sample input input_data = [ \\"1 1 5\\", \\"2 3 4\\", \\"2 3 6\\", \\"1 2 3 4\\", \\"0 0 0\\" ] result = process_sequences(input_data) for number in result: print(number)"},{"question":"A social network platform tracks connections between users in the form of directed graph edges, where an edge from user A to user B signifies that A follows B. To help users identify mutual followers, you are tasked with writing a program that determines all mutual following pairs in the network. A pair (A, B) is considered mutual if user A follows user B and user B also follows user A. Input - The first line contains an integer `t` denoting the number of test cases. - For each test case: - The first line contains a single integer `n` denoting the number of users. - The second line contains a single integer `m` denoting the number of following relationships. - The next `m` lines each contain two space-separated integers `u` and `v` indicating that user `u` follows user `v`. Output - For each test case, output the count of mutual following pairs. Constraints - 1 ≤ t ≤ 100 - 1 ≤ n ≤ 10^5 - 0 ≤ m ≤ 2*10^5 Example Input: 2 3 3 1 2 2 1 1 3 4 3 1 2 2 3 3 1 Output: 1 0","solution":"def count_mutual_followers(t, test_cases): results = [] for case in test_cases: n, m, relations = case follows = {i: set() for i in range(1, n + 1)} for u, v in relations: follows[u].add(v) mutual_count = 0 for u in range(1, n + 1): for v in follows[u]: if u in follows[v]: mutual_count += 1 results.append(mutual_count // 2) return results # Example usage: t = 2 test_cases = [ (3, 3, [(1, 2), (2, 1), (1, 3)]), (4, 3, [(1, 2), (2, 3), (3, 1)]) ] print(count_mutual_followers(t, test_cases)) # Output: [1, 0]"},{"question":"Given a list of integers representing the temperatures recorded over a period of days, calculate the number of days when the temperature was strictly greater than the average temperature of the recorded days. ------ Input Format ------ The input consists of two lines: - The first line contains an integer N, the number of days of temperature recordings. - The second line contains N integers, each representing the temperature on a particular day. ------ Output Format ------ Output a single integer that indicates the number of days the temperature was strictly greater than the average temperature. ------ Constraints ------ 1 ≤ N ≤ 100 −100 ≤ temperature ≤ 100 ----- Sample Input 1 ------ 5 10 20 30 40 50 ----- Sample Output 1 ------ 2 ----- explanation 1 ------ The average temperature over 5 days is 30. The days with temperatures greater than 30 are the fourth and fifth days with temperatures 40 and 50, respectively. Hence, the number of days is 2. ----- Sample Input 2 ------ 3 -10 0 10 ----- Sample Output 2 ------ 1 ----- explanation 2 ------ The average temperature over 3 days is 0. The day with a temperature greater than 0 is the third day with a temperature 10. Hence, the number of days is 1.","solution":"def count_days_above_average(N, temperatures): Counts the number of days when the temperature was strictly greater than the average temperature. :param N: Integer, number of days of temperature recordings. :param temperatures: List of integers, each representing the temperature on a particular day. :return: Integer, number of days with temperature strictly greater than the average temperature. average_temp = sum(temperatures) / N return sum(1 for temp in temperatures if temp > average_temp)"},{"question":"Problem Statement You are given an integer array `arr` of length `N` and an integer `K`. Your task is to determine if it is possible to split the array `arr` into exactly `K` contiguous non-empty subarrays such that the sum of elements in each subarray is a power of two. If it is possible, return \\"YES\\", otherwise return \\"NO\\". A power of two is a number of the form `2^x` where `x` is a non-negative integer. # Constraints - 1 leq N leq 10^5 - 1 leq arr[i] leq 10^5 for 1 leq i leq N - 1 leq K leq N # Input Format The first line contains two integers, `N` and `K`. The second line contains `N` integers representing the array `arr`. # Output Format Output \\"YES\\" if it is possible to split the array as described, otherwise output \\"NO\\". # Example Example 1 **Input:** ``` 5 3 1 2 4 8 16 ``` **Output:** ``` YES ``` **Explanation:** The array can be split into [1], [2, 4], and [8, 16] where the sums are 1, 6, and 24 respectively. 1 is a power of two, 6 is not. Hence, NO. **Output should be corrected to the below** ``` NO ``` Example 2 **Input:** ``` 6 2 3 1 2 2 5 8 ``` **Output:** ``` YES ``` **Explanation:** The array can be split into [3, 1], [2, 2, 5, 8] where the sums are 4 and 17 respectively. 4 is a power of two, 17 is not. Hence, NO. **Output should be corrected to the below** ``` NO ``` # Note When checking for powers of two, consider that the sum of subarray elements should strictly match `2^x`.","solution":"def is_power_of_two(n): Helper function to check if a given number n is a power of two. return (n & (n - 1)) == 0 and n != 0 def split_array_into_power_of_two_sums(N, K, arr): Determines if it is possible to split the array \'arr\' of length \'N\' into exactly \'K\' contiguous non-empty subarrays such that the sum of elements in each subarray is a power of two. def dfs(index, subarrays_left): if index == N: return subarrays_left == 0 if subarrays_left == 0: return False current_sum = 0 for i in range(index, N): current_sum += arr[i] if is_power_of_two(current_sum): if dfs(i + 1, subarrays_left - 1): return True return False return \\"YES\\" if dfs(0, K) else \\"NO\\""},{"question":"Enunciado En una compañía de F hay una serie de eventos sociales y laborales que ocurren en días consecutivos. Cada evento puede ser ya sea un **taller** o una **fiesta** de acuerdo al plan. Cada trabajador de la compañía tiene una preferencia sobre los eventos, es decir, le gusta asistir a algunos eventos y no le gusta asistir a otros. Un trabajador siente felicidad si asiste a un evento que le gusta, y siente infelicidad si asiste a un evento que no le gusta. Dado un arreglo de eventos, donde cada evento puede ser representado por un entero positivo mayor que cero, debes imprimir un arreglo donde se indique la cantidad de eventos consecutivos del mismo tipo que le gusta a un trabajador. Por ejemplo, dadas las preferencias de un trabajador y un orden de eventos, la tarea es encontrar por cada evento (a partir del segundo) y asignar cuántos eventos consecutivos le gustaban previamente, de la siguiente manera: * Si un evento en la posición actual \\"i\\" le gusta al trabajador, y el anterior evento también le gustaba, incrementa el conteo. * Si no, reinicia el conteo a 1 (ya que el evento actual le gusta) si el evento en la posición actual es de su agrado. Si el evento en la posición \\"i\\" no le gusta al trabajador, el conteo debe ser 0 desde esa posición. Input El primer renglón contiene un entero `n` (el número total de eventos). El segundo renglón contiene una lista de enteros de longitud `n` representando los eventos que ocurren en orden. El tercer renglón contiene una lista de enteros de longitud `n` donde cada entero es 1 si el evento correspondiente le gusta al trabajador y 0 si no le gusta. Output Imprime una lista de enteros de longitud `n-1` donde cada elemento representa el conteo de eventos consecutivos hasta la posición actual `i` que le gustaban al trabajador. Ejemplo # Entrada ``` 7 1 2 2 3 3 3 4 1 1 0 1 1 1 1 ``` # Salida ``` 1 2 0 1 2 3 ``` # Entrada ``` 8 1 1 2 2 3 3 4 4 1 0 1 1 0 1 1 1 ``` # Salida ``` 0 1 2 0 1 2 3 ``` # Nota El conteo se reinicia a 1 cada vez que el evento actual es el comienzo de una nueva secuencia de eventos que le gusta al trabajador, o si es la primera vez que le gusta el evento. Si el evento no le gusta, el conteo es 0. Debes encontrar una manera eficiente de calcular el conteo acumulativo dado que `n` puede ser muy grande.","solution":"def consecutive_happy_events(n, events, preferences): consecutive_counts = [] count = 0 for i in range(1, n): if preferences[i] == 1: if preferences[i - 1] == 1: count += 1 else: count = 1 else: count = 0 consecutive_counts.append(count) return consecutive_counts"},{"question":"You are given a matrix of integers with `n` rows and `m` columns. Your task is to find the maximum sum of any submatrix and determine the smallest submatrix (in terms of area) which, when added to this maximum sum submatrix, results in a new submatrix that has an even larger sum. -----Input----- The first line of the input contains two integers `n` and `m` (`1 le n, m le 1000`) — the number of rows and columns in the matrix. Each of the next `n` lines contains `m` integers separated by spaces, representing the elements of the matrix. The absolute value of each element does not exceed `10^6`. -----Output----- Output two integers: the maximum sum achieved by any submatrix, and the area of the smallest submatrix that can be added to increase this sum. -----Example----- Input 3 3 1 2 3 4 5 6 7 8 9 Output 45 1 -----Note----- In the given example, the submatrix with the maximum sum is the entire matrix itself, with a sum of 45. The smallest submatrix with a positive sum that can be added to it is any 1x1 matrix containing the element 9, therefore the area is 1.","solution":"def max_sum_submatrix(matrix): def calculate_prefix_sum(matrix): n, m = len(matrix), len(matrix[0]) prefix_sum = [[0] * (m + 1) for _ in range(n + 1)] for i in range(n): for j in range(m): prefix_sum[i + 1][j + 1] = matrix[i][j] + prefix_sum[i][j + 1] + prefix_sum[i + 1][j] - prefix_sum[i][j] return prefix_sum def get_sum(prefix_sum, x1, y1, x2, y2): return ( prefix_sum[x2 + 1][y2 + 1] - prefix_sum[x1][y2 + 1] - prefix_sum[x2 + 1][y1] + prefix_sum[x1][y1] ) n, m = len(matrix), len(matrix[0]) prefix_sum = calculate_prefix_sum(matrix) max_sum = float(\'-inf\') for x1 in range(n): for y1 in range(m): for x2 in range(x1, n): for y2 in range(y1, m): current_sum = get_sum(prefix_sum, x1, y1, x2, y2) max_sum = max(max_sum, current_sum) smallest_positive = float(\'inf\') for i in range(n): for j in range(m): if matrix[i][j] > 0: smallest_positive = min(smallest_positive, matrix[i][j]) return max_sum, 1 # Since the smallest submatrix increasing the sum by a positive value will have an area of 1."},{"question":"You are given an array of integers, and you need to split it into exactly two non-empty contiguous subarrays. The absolute difference between the sums of the two subarrays should be minimized. Write a function to find the minimum possible absolute difference. Constraints: - All values in input are integers. - 2 leq N leq 10^5 - -10^4 leq a_i leq 10^4 Input: Input is given from Standard Input in the following format: N a_1 a_2 ldots a_N Output: Print the minimum possible absolute difference. Examples: Input: 5 1 2 3 4 5 Output: 3 Input: 4 10 -10 20 -20 Output: 0 Input: 3 1 3 -1 Output: 1 Note: In the first example, split the array into [1, 2, 3] and [4, 5] to get sums 6 and 9, whose absolute difference is 3. In the second example, split the array into [10, -10] and [20, -20] to get sums 0 and 0, whose absolute difference is 0.","solution":"def find_min_abs_difference(N, arr): Function to find the minimum possible absolute difference between the sums of two non-empty contiguous subarrays of the given array. total_sum = sum(arr) min_diff = float(\'inf\') left_sum = 0 for i in range(N - 1): left_sum += arr[i] right_sum = total_sum - left_sum current_diff = abs(left_sum - right_sum) min_diff = min(min_diff, current_diff) return min_diff"},{"question":"Given a list of integers, the median is defined as the middle number when the integers are sorted. If the list has an even number of integers, the median is the average of the two middle numbers. The mode is defined as the number that appears most frequently in the list. If there is a tie for the mode, choose the smallest number among them. You need to write a function that takes a list of integers and returns two values: the median and the mode of the list. -----Input----- A single line containing space-separated integers, 1 leq text{length of list} leq 10^6, and each integer between -10^6 and 10^6. -----Output----- Two space-separated values: the median and the mode of the list. The median should be a floating-point number and the mode should be an integer. -----Examples----- Sample Input: 1 3 3 6 7 8 9 Sample Output: 6 3 Sample Input: 4 2 2 8 8 9 9 Sample Output: 8 2","solution":"from collections import Counter def median_mode(numbers): Returns the median and the mode of a list of integers. Parameters: numbers (list): List of integers. Returns: tuple: median (float), mode (int) # Sort the list to find the median sorted_numbers = sorted(numbers) n = len(sorted_numbers) # Compute the median if n % 2 == 1: median = sorted_numbers[n // 2] else: median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2 # Compute the mode count = Counter(sorted_numbers) mode = min(number for number, freq in count.items() if freq == max(count.values())) return float(median), mode"},{"question":"Write a program to find the maximum length of a contiguous subarray with equal number of 0s and 1s in a given binary array. Example 1: Input: arr[] = {0, 1, 0} Output: 2 Explanation: From index 0 to 1, the subarray is [0, 1] which contains equal number of 0s and 1s. Example 2: Input: arr[] = {0, 1, 1, 0, 1, 1, 1, 0} Output: 4 Explanation: From index 2 to 5, the subarray is [1, 0, 1, 1] which contains equal number of 0s and 1s. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function findMaxLength() that takes an array (arr) and size of array (n) and returns the maximum length of a contiguous subarray with equal number of 0s and 1s. The driver code takes care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(N). Constraints: 1 ≤ N ≤ 10^5 arr[i] ∈ {0, 1}","solution":"def findMaxLength(arr, n): Returns the maximum length of a contiguous subarray with equal number of 0s and 1s. # Store (current_sum, index) hash_map = {} max_len = 0 curr_sum = 0 for i in range(n): # Replace 0 with -1 for easier sum calculation if arr[i] == 0: curr_sum += -1 else: curr_sum += 1 # If curr_sum is 0, it means we found a subarray from the beginning if curr_sum == 0: max_len = i + 1 # If curr_sum is seen before, calculate subarray length if curr_sum in hash_map: max_len = max(max_len, i - hash_map[curr_sum]) else: # Store the current sum with index hash_map[curr_sum] = i return max_len"},{"question":"Summary Your challenge is to determine if you can create a palindrome from the given string by rearranging its characters. Details A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For this task, you will be given a string and must determine if you can rearrange the characters to form a palindrome. Write a function `can_form_palindrome` that accepts a single argument `input_string`, a string of lowercase letters and returns `True` if it is possible to rearrange the string to form a palindrome, otherwise, return `False`. Examples ``` can_form_palindrome(\\"civic\\") # Returns: True (already a palindrome) can_form_palindrome(\\"ivicc\\") # Returns: True (can be rearranged to \\"civic\\") can_form_palindrome(\\"hello\\") # Returns: False (cannot be rearranged to form a palindrome) can_form_palindrome(\\"aab\\") # Returns: True (can be rearranged to \\"aba\\") ``` Constraints - The input string will contain only lowercase alphabetic characters - The length of the input string will not exceed 1000 characters Hints - Consider the properties of palindromes regarding the frequency of characters. - You may use collections.Counter or a similar approach to count character frequencies.","solution":"from collections import Counter def can_form_palindrome(input_string): Determines if a palindrome can be formed from the given string by rearranging its characters. :param input_string: A string of lowercase alphabetic characters. :return: True if a palindrome can be formed, otherwise False. char_count = Counter(input_string) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"------Read problems statements in Hindi, Mandarin chinese , Russian and Vietnamese as well. ------ A binary tree is a tree data structure in which each node has at most two children, referred to as the left child and the right child. You are given a binary tree with N nodes. Each node is numbered from 1 to N and contains a value. For each node in the tree, you are required to find the difference between the maximum value and the minimum value among all the nodes present in its subtree, including the node itself. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N. The second line contains N space-separated integers representing the values of the nodes. N-1 lines follow. Each of these lines contains two space-separated integers u and v denoting that there is an edge between node u and node v. ------ Output ------ For each test case, print N lines. For each node i (1 ≤ i ≤ N), the i-th of these lines should contain a single integer - the difference between the maximum and minimum value in the subtree rooted at node i. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^5 1 ≤ value of nodes ≤ 10^9 1 ≤ u, v ≤ N The sum of all N over all test cases does not exceed 10^6. ------ Sample Input 1 ------ 1 5 1 3 7 4 6 1 2 1 3 3 4 3 5 ------ Sample Output 1 ------ 6 0 3 0 0","solution":"from collections import defaultdict class TreeNode: def __init__(self, value): self.value = value self.children = [] self.min_value = value self.max_value = value def build_tree(N, values, edges): tree = [TreeNode(values[i]) for i in range(N)] for u, v in edges: tree[u-1].children.append(tree[v-1]) tree[v-1].children.append(tree[u-1]) return tree def dfs(node, parent=None): min_val = node.value max_val = node.value for child in node.children: if child == parent: continue sub_min, sub_max = dfs(child, node) min_val = min(min_val, sub_min) max_val = max(max_val, sub_max) node.min_value = min_val node.max_value = max_val return min_val, max_val def solve(N, values, edges): tree = build_tree(N, values, edges) dfs(tree[0]) results = [0] * N for i in range(N): results[i] = tree[i].max_value - tree[i].min_value return results def process_test_cases(T, test_cases): results = [] for case in test_cases: N, values, edges = case results.append(solve(N, values, edges)) return results"},{"question":"Ben loves sequences of numbers, especially when they have interesting properties. One property that fascinates him is the *Bitonic Subsequence*. A sequence is called bitonic if it is first strictly increasing, then strictly decreasing. He gave the following challenge to his friends: Given an array A of N integers, find the length of the longest bitonic subsequence in that array. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Can you help his friends solve this problem? ------ Input ------ The first line of input contains an integer T, denoting the number of test cases. The first line of each test case contains an integer N, the length of the array. The second line of each test case contains N space-separated integers that make up the array A. ------ Output ------ For each test case, print a single line containing the length of the longest bitonic subsequence. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 2000 1 ≤ A[i] ≤ 10^5 ------ Sample Input 1 ------ 2 6 1 2 3 4 5 3 8 12 4 78 90 45 23 45 90 ------ Sample Output 1 ------ 6 5 ------ Explanation 1 ------ In the first test case, the entire array is a bitonic subsequence: 1, 2, 3, 4, 5, 3. In the second test case, one of the longest bitonic subsequences is: 4, 78, 90, 45, 23.","solution":"def longest_bitonic_subsequence(arr): Function to find the length of the longest bitonic subsequence. n = len(arr) # Edge case if n == 0: return 0 # Initialize increasing and decreasing subsequence lengths inc = [1] * n dec = [1] * n # Fill inc[] from left to right for i in range(1, n): for j in range(i): if arr[i] > arr[j]: inc[i] = max(inc[i], inc[j] + 1) # Fill dec[] from right to left for i in range(n-2, -1, -1): for j in range(n-1, i, -1): if arr[i] > arr[j]: dec[i] = max(dec[i], dec[j] + 1) # Find maximum of inc[i] + dec[i] - 1 max_length = 0 for i in range(n): max_length = max(max_length, inc[i] + dec[i] - 1) return max_length def longest_bitonic_subsequences(test_cases): results = [] for N, array in test_cases: results.append(longest_bitonic_subsequence(array)) return results"},{"question":"Task Implement the `best_travel` function that calculates the best trip distance. # Problem Statement You are given: 1. A list `distances` containing distances of different destinations. 2. An integer `k` representing the number of stops in your journey. 3. An integer `max_distance` representing the maximum allowable distance you can cover. Your task is to select `k` destinations from the list such that the total distance covered is as close to `max_distance` as possible but does not exceed it. Return the maximum possible distance you can cover under the given constraints. If there\'s no valid combination, return `None`. # Constraints - Each distance in `distances` will be a positive integer. - `k` will be a positive integer less than or equal to the length of the `distances` list. - `max_distance` will be a positive integer. # Function Signature ```python def best_travel(distances: list, k: int, max_distance: int) -> int: ``` # Examples Example 1: ```python distances = [50, 55, 57, 58, 60] k = 3 max_distance = 174 best_travel(distances, k, max_distance) # Output: 173 ``` Example 2: ```python distances = [50] k = 3 max_distance = 174 best_travel(distances, k, max_distance) # Output: None ``` Example 3: ```python distances = [91, 74, 73, 85, 73, 81, 87] k = 3 max_distance = 230 best_travel(distances, k, max_distance) # Output: 228 ```","solution":"from itertools import combinations def best_travel(distances, k, max_distance): Returns the maximum possible distance covered by selecting k stops from the given distances list such that the total distance doesn\'t exceed max_distance. If no valid combination is found, returns None. if k > len(distances): return None best_sum = None for combo in combinations(distances, k): total = sum(combo) if total <= max_distance and (best_sum is None or total > best_sum): best_sum = total return best_sum"},{"question":"Given a string of lower case English alphabets, MoEngage wants you to determine if it is possible to rearrange the characters of the string to form a palindrome. For example, when the string is \\"aabb\\", it is possible to rearrange it to \\"abba\\" or \\"baab\\", which are both palindromes. ------ Input Format ------ - The first line contains an integer T, the number of test cases. The description of the T test cases follow. - Each test case consists of a single line with a string S, consisting of lower case English alphabets only. ------ Output Format ------ - For each test case, print texttt{Yes} if it is possible to rearrange the characters of S to form a palindrome. Otherwise, print texttt{No}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes} and texttt{YES} will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 - Sum of lengths of strings over all test cases ≤ 1000. ----- Sample Input 1 ------ 3 aabbcc aabbc abc ----- Sample Output 1 ------ Yes Yes No ----- explanation 1 ------ Test Case 1: The given string \\"aabbcc\\" can be rearranged to \\"abccba\\", which is a palindrome. Therefore, the answer is texttt{Yes}. Test Case 2: We can rearrange \\"aabbc\\" to form \\"abcba\\", which is a palindrome. Hence the output is texttt{Yes}. Test Case 3: The string \\"abc\\" cannot be rearranged to form a palindrome, as there is no way to have mirrored halves. So, the answer is texttt{No}.","solution":"def can_form_palindrome(s): Returns \'Yes\' if it is possible to rearrange the characters in string s to form a palindrome, otherwise \'No\'. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # Track the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A palindrome can have at most one character with an odd frequency if odd_count > 1: return \\"No\\" else: return \\"Yes\\" def process_test_cases(test_cases): Processes a list of test cases and returns the results for each as a list of \'Yes\' or \'No\'. results = [] for s in test_cases: results.append(can_form_palindrome(s)) return results # Input processing function def main(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = lines[1:T + 1] results = process_test_cases(test_cases) for result in results: print(result)"},{"question":"You are given a list of meeting time intervals represented as pairs of start and end times `[[s1, e1], [s2, e2], ...]`. Your task is to determine if a person could attend all the meetings. Note: - The intervals are inclusive of the start time and exclusive of the end time. - Meetings are not allowed to overlap. If it is possible to attend all meetings, return `true`. Otherwise, return `false`. Examples ``` [[0, 30], [5, 10], [15, 20]] --> false [[7, 10], [2, 4]] --> true [[1, 5], [5, 9]] --> true ```","solution":"def can_attend_meetings(intervals): Determines if a person can attend all meetings without any overlaps. Args: intervals (List[List[int]]): List of meeting intervals [start, end]. Returns: bool: True if there are no overlapping meetings, False otherwise. # Sort intervals by start time intervals.sort(key=lambda x: x[0]) for i in range(1, len(intervals)): # If there is an overlap between the current meeting and the previous meeting if intervals[i][0] < intervals[i-1][1]: return False return True"},{"question":"Fruit Basket Distribution Farmer John has a vast orchard where he grows various types of fruits. During the harvest season, he wants to distribute fruit baskets to a local market. Each basket contains exactly one type of fruit and he wants to arrange the fruits such that the total number of baskets for each type is the same. Given the counts of each fruit, determine if it is possible for Farmer John to distribute the fruits equally into baskets, with each basket containing exactly one type of fruit. Input: - The first line contains an integer T, the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of different types of fruits. - The second line contains N integers, where the ith integer represents the count of the ith type of fruit. Output: - For each test case, output \\"YES\\" (without the quotes) if it is possible to distribute the fruits into equal baskets for each type, otherwise output \\"NO\\" (without the quotes). Constraints: - 1 <= T <= 10^4 - 1 <= N <= 10^5 - 1 <= count of each fruit <= 10^9 Sample Input: 3 3 6 6 6 2 5 10 4 8 2 4 6 Sample Output: YES NO NO Explanation: - In the first test case, all fruit counts are already the same, so Farmer John can distribute them equally. - In the second test case, it is impossible to distribute 5 and 10 fruits equally into the same number of baskets. - In the third test case, there is no way to make the counts of 8, 2, 4, and 6 equal by just distributing them into identical baskets.","solution":"def can_distribute_equally(T, test_cases): Determines if it is possible to distribute the fruits into equal baskets for each type. Parameters: T (int): Number of test cases. test_cases (list of tuples): Each tuple contains an integer N and a list of N integers representing fruit counts. Returns: list of str: \\"YES\\" or \\"NO\\" for each test case. results = [] for N, fruits in test_cases: unique_counts = set(fruits) if len(unique_counts) == 1: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # function to handle input and output for the solution def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) idx = 1 test_cases = [] for _ in range(T): N = int(data[idx]) fruits = list(map(int, data[idx+1:idx+1+N])) test_cases.append((N, fruits)) idx += N + 1 results = can_distribute_equally(T, test_cases) for result in results: print(result)"},{"question":"You are tasked with developing a library management system, which keeps track of which books are currently issued to which members. Every day, members can borrow and return books. The library has several policies to ensure smooth operations. There are M members (numbered 1 through M) and B books (numbered 1 through B). Each book can be issued to at most one member at a time. Multiple transactions (either borrowing or returning a book) can occur in a day. For a given day, you are provided with a list of transactions. Each transaction is either an issue or a return of a book. If a book is already issued to a member, it cannot be issued again until it is returned. Your task is to process the transactions and provide the current status of each book at the end of the day (whether it is issued or not, and if issued, to which member). ------ Input ------ The first line of input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two space-separated integers M and B. The second line contains an integer N representing the number of transactions. Each of the next N lines describes a transaction in the format: - \\"issue X Y\\": Member X issues Book Y - \\"return X Y\\": Member X returns Book Y ------ Output ------ For each test case, print B lines. Each line should contain a single integer representing the member ID to which the book is issued, or -1 if the book is not issued. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ M, B ≤ 10^5 0 ≤ N ≤ 2 times 10^5 1 ≤ X ≤ M 1 ≤ Y ≤ B ------ Sample Input ------ 2 3 5 7 issue 1 2 issue 2 3 return 1 2 issue 3 2 issue 2 4 return 2 3 issue 1 3 2 3 4 issue 1 1 issue 2 2 return 2 2 issue 1 2 ------ Sample Output ------ -1 3 1 2 -1 1 -1 Output Explanation: 1. For test case 1: - Initially, all books are not issued - After 7 transactions: - Book 1: Not issued (returned) - Book 2: Issued to member 3 - Book 3: Issued to member 1 - Book 4: Issued to member 2 - Book 5: Not issued 2. For test case 2: - Initially, all books are not issued - After 4 transactions: - Book 1: Issued to member 1 - Book 2: Issued to member 1 - Book 3: Not issued","solution":"def library_management(t, test_cases): Process the transactions for each test case to determine the status of each book. Parameters: - t: int, number of test cases - test_cases: list of tuples where each tuple contains: - M: int, number of members - B: int, number of books - N: int, number of transactions - transactions: list of strings where each string represents a transaction Returns: - results: list of list of ints, each inner list contains the status of the books for a test case results = [] for M, B, N, transactions in test_cases: book_status = [-1] * (B + 1) # book_status[i] = member ID if issued, -1 if not issued for transaction in transactions: parts = transaction.split() action, X, Y = parts[0], int(parts[1]), int(parts[2]) if action == \\"issue\\": if book_status[Y] == -1: # If the book is not already issued book_status[Y] = X elif action == \\"return\\": if book_status[Y] == X: # The book is returned by the correct member book_status[Y] = -1 # Exclude the dummy book_status[0] which we do not use results.append(book_status[1:]) return results"},{"question":"Given an array of integers, you need to determine if it is possible to rearrange the elements of the array so that the sum of the elements in every consecutive subsequence of length K is even. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - The first line of each test case contains two integers N and K, where N is the length of the array and K is the length of the subsequence. - The second line of each test case contains N space-separated integers, denoting the elements of the array. ------ Output Format ------ For each test case, print on a new line the answer: YES if it is possible to rearrange the elements of the array such that the sum of every consecutive subsequence of length K is even, and NO otherwise. Each character of the output may be printed in either uppercase or lowercase, i.e, the strings Yes, YES, yes, yEs will all be treated as identical. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ N ≤ 10^5 1 ≤ K ≤ N 0 ≤ A[i] ≤ 10^9 The sum of N over all test cases will not exceed 10^6. ----- Sample Input 1 ------ 3 5 3 1 2 3 4 5 4 2 1 3 5 7 6 1 2 4 6 8 10 12 ----- Sample Output 1 ------ YES NO YES ----- explanation 1 ------ Test case 1: One possible rearrangement is [2, 4, 1, 3, 5]. The consecutive subsequences of length 3 will be [2, 4, 1], [4, 1, 3], and [1, 3, 5], which have sums 7, 8, and 9 respectively. It is not necessary for all sums to be even, so we continue checking other combinations. Test case 2: It is not possible to rearrange the array such that the sum of every consecutive subsequence of length 2 is even. Test case 3: Since K = 1, each element itself is a subsequence and all elements are even. Therefore, the sum of each subsequence is even.","solution":"def can_rearrange_to_even_subseq_sums(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] array = test_cases[i][1] # Count the number of even numbers even_count = sum(1 for x in array if x % 2 == 0) if K % 2 == 0: # For even K, we need at least K/2 evens in every subsequence of length K if even_count >= K // 2: results.append(\\"YES\\") else: results.append(\\"NO\\") else: # For odd K, we need at least (K//2 + 1) evens in every subsequence of length K if even_count >= (K // 2 + 1): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Reading input def process_input(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) K = int(data[index + 1]) array = list(map(int, data[index + 2 : index + 2 + N])) test_cases.append([(N, K), array]) index += 2 + N results = can_rearrange_to_even_subseq_sums(T, test_cases) for result in results: print(result)"},{"question":"Problem Eden loves playing with strings and especially enjoys finding patterns within them. She has recently encountered a new kind of problem and needs your help to solve it. The problem involves finding the longest palindrome that can be formed using the characters of a given string. A palindrome is a word that reads the same backward as forward, such as \\"radar\\" or \\"level\\". Your task is to write a program that processes multiple queries. Each query gives a string, and you need to determine the length of the longest palindromic substring that can be created using the characters of that string. Constraints The input satisfies the following constraints. * 1 ≤ T ≤ 100 (Number of queries) * 1 ≤ |Si| ≤ 100 (Length of each string Si) * Si contains only lowercase English letters (a to z) Input The input is given in the following format. ``` T S1 S2 ... ST ``` The first line is given one integer T which represents the number of queries. Each of the next T lines contains a string Si, representing the i-th query. Output For each query, output the length of the longest palindromic substring that can be created using the characters of that particular string in one line. Examples Input ``` 3 abccccdd a bb ``` Output ``` 7 1 2 ``` Explanation - For the first string \\"abccccdd\\", the longest palindrome that can be formed is \\"dccaccd\\" which is 7 characters long. - For the second string \\"a\\", it is already a palindrome of length 1. - For the third string \\"bb\\", the longest palindrome is \\"bb\\" itself which is of length 2.","solution":"def longest_palindrome_length(s): Returns the length of the longest palindromic substring that can be created using the characters of the given string s. from collections import Counter char_count = Counter(s) length = 0 odd_found = False for count in char_count.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True # Add one if there was any odd count character to place it in the middle if odd_found: length += 1 return length def process_queries(queries): Processes a list of query strings and returns the length of the longest palindromic substring for each string as a list of integers. results = [] for query in queries: results.append(longest_palindrome_length(query)) return results"},{"question":"You are given a list of students with their respective marks in three subjects: Mathematics, Physics, and Chemistry. Each student aims to achieve excellence by securing an overall average of at least 75%, with no subject mark falling below 50%. Your task is to write a program that determines how many students have achieved excellence based on the given criteria. Input The first line contains an integer n (1 ≤ n ≤ 100), the number of students. The next n lines contain three integers each: the marks in Mathematics, Physics, and Chemistry, respectively. The marks are given as percentages and are between 0 and 100, inclusive. Output Print a single integer — the number of students who have achieved excellence. Examples Input 5 90 80 70 50 60 70 90 91 92 85 40 90 78 88 84 Output 3 Note In the first sample, out of the 5 students: 1. The first student has an average of 80% with no subject below 50%. 2. The second student has an average of 60% which is below 75%. 3. The third student has an average of 91% with no subject below 50%. 4. The fourth student has an average of 71.67% which is below 75% and also scored below 50 in Physics. 5. The fifth student has an average of 83.33% with no subject below 50%. Thus, 3 students have achieved excellence.","solution":"def num_excellent_students(n, marks): Returns the number of students who have achieved excellence. Parameters: n (int): The number of students. marks (list of tuples): Each tuple contains three integers, the marks in Mathematics, Physics, and Chemistry respectively. Returns: int: The number of students who have achieved excellence. count = 0 for math, physics, chemistry in marks: average = (math + physics + chemistry) / 3 if average >= 75 and math >= 50 and physics >= 50 and chemistry >= 50: count += 1 return count # Example usage: n = 5 marks = [ (90, 80, 70), (50, 60, 70), (90, 91, 92), (85, 40, 90), (78, 88, 84), ] print(num_excellent_students(n, marks)) # Output: 3"},{"question":"Peter is preparing for a hiking trip in the land of Graphonia, which is a country represented by an undirected graph with `n` nodes and `m` edges. Each node in Graphonia is identified by an integer from 1 to n. Peter wants to discover all the important nodes in Graphonia. An important node is defined as a node that, if removed along with its incident edges, would increase the number of connected components of the graph. Your task is to help Peter identify all the important nodes in the graph. Input: - The first line contains two integers `n` and `m` representing the number of nodes and edges in the graph. - The next `m` lines contain two integers `u` and `v` each, denoting there is an edge between node `u` and node `v`. Output: - Output all the important nodes in increasing order. If there are no important nodes, print `-1`. Constraints: - 1 ≤ n ≤ 10^4 - 0 ≤ m ≤ 10^5 - 1 ≤ u, v ≤ n - The graph may be disconnected. - There are no self-loops or multiple edges. SAMPLE INPUT 7 6 1 2 2 3 3 4 4 5 5 6 6 7 SAMPLE OUTPUT 2 3 4 5 6 Explanation: Node 2 is important because removing it would separate node 1 from the rest of the graph. Node 3 is important because removing it would separate nodes 1 and 2 from the rest of the graph. Node 4 is important because removing it would separate nodes 1, 2, and 3 from nodes 5, 6, and 7. And so on for nodes 5 and 6. Node 7 is not an important node because removing it would not affect the connectivity of the remaining nodes.","solution":"from collections import defaultdict def find_important_nodes(n, m, edges): def dfs(v, parent): nonlocal time visited[v] = True discovery[v] = low[v] = time time += 1 children = 0 for to in graph[v]: if to == parent: continue if visited[to]: # Update the low-link value low[v] = min(low[v], discovery[to]) else: dfs(to, v) # Update the low-link value after recursive DFS call low[v] = min(low[v], low[to]) # Check if v is an articulation point if low[to] >= discovery[v] and parent != -1: articulation_points.add(v) children += 1 # Special case for root node if parent == -1 and children > 1: articulation_points.add(v) graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = [False] * (n + 1) discovery = [float(\'inf\')] * (n + 1) low = [float(\'inf\')] * (n + 1) articulation_points = set() time = 0 for i in range(1, n + 1): if not visited[i]: dfs(i, -1) if not articulation_points: return [-1] else: return sorted(articulation_points) def important_nodes(n, m, edges): return find_important_nodes(n, m, edges)"},{"question":"Problem H: Robot Pathfinding You have a robot placed at the top-left corner of an m x n grid (0, 0). The robot can only move right or down one step at a time. Certain cells in the grid are \\"blocked\\", meaning the robot cannot step on them. The goal is to find all the unique paths from the top-left corner (0, 0) to the bottom-right corner (m-1, n-1). Write a program to determine the number of unique paths the robot can take to reach the bottom-right corner, avoiding the blocked cells. Input The input begins with two integers, m and n (1 <= m, n <= 100), representing the dimensions of the grid. The next m lines each contain n integers (either 0 or 1), where 0 represents an open cell and 1 represents a blocked cell. Output Print the total number of unique paths from the top-left corner to the bottom-right corner. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 2 2 0 1 0 0 Output 1","solution":"def count_paths(grid): This function returns the number of unique paths from the top-left corner to the bottom-right corner of a grid, avoiding blocked cells. m = len(grid) n = len(grid[0]) # If starting or ending cell is blocked, return 0 as no paths are possible. if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0]*n for _ in range(m)] dp[0][0] = 1 # Starting point for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Imagine you are given the task of designing a garden with a variety of flowers arranged in a grid pattern. Your garden is represented as a matrix with n rows and m columns, where each cell contains a single character representing a type of flower. Your task is to determine the type of flower that appears the most frequently in the garden. If there are multiple flowers with the same highest frequency, return the one that comes first lexicographically (i.e., alphabetically). Input The first input line contains two integers n and m (1 ≤ n, m ≤ 100) — the number of rows and columns in the garden, respectively. The next n lines each contain m characters, where each character is a lowercase letter representing a type of flower. Output Print the single character that represents the flower type which appears most frequently in the garden. If there are ties, print the lexicographically smallest one. SAMPLE INPUT 4 5 abbca abcdef ghiaj kllmn SAMPLE OUTPUT a","solution":"def most_frequent_flower(n, m, garden): Returns the most frequent flower in the garden. In case of ties, returns the lexicographically smallest one. from collections import Counter # Count frequency of each flower type flower_count = Counter() for row in garden: flower_count.update(row) # Find the most frequent flower, with ties broken lexicographically most_frequent = min(flower_count.items(), key=lambda x: (-x[1], x[0])) return most_frequent[0]"},{"question":"You are given a 2D grid of dimensions `n x n`, initialized with all `0`s. You are also given `q` queries, and each query consists of four integers `x1`, `y1`, `x2`, `y2` representing the top-left and bottom-right corners of a sub-grid. For each query, you need to increment by `1` all elements within the given sub-grid. After processing all queries, your task is to output the final state of the grid. Input Format - The first line contains two integers `n` and `q` (the size of the grid and the number of queries). - Each of the next `q` lines contains four integers `x1`, `y1`, `x2`, `y2` representing each query. Output Format - Print the final state of the grid, where each row is printed on a new line, space-separated. Constraints - `1 <= n <= 1000` - `1 <= q <= 100000` - `1 <= x1 <= x2 <= n` - `1 <= y1 <= y2 <= n` Sample Input ``` 4 3 1 1 2 2 2 2 3 3 1 3 4 4 ``` Sample Output ``` 1 1 1 0 1 2 2 1 0 1 2 1 0 0 1 1 ``` Explanation Initially, the grid is: ``` 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ``` - After the first query, the grid is: ``` 1 1 0 0 1 1 0 0 0 0 0 0 0 0 0 0 ``` - After the second query, the grid is: ``` 1 1 0 0 1 2 1 0 0 1 1 0 0 0 0 0 ``` - After the third query, the grid is: ``` 1 1 1 1 1 2 2 1 0 1 2 1 0 0 1 1 ```","solution":"def increment_subgrid(n, q, queries): grid = [[0] * n for _ in range(n)] for x1, y1, x2, y2 in queries: for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 return grid"},{"question":"Jay is navigating through a grid of cells, each cell containing either a value of 0 or 1. Jay starts at the cell in the top-left corner (0,0) of the grid and wants to reach the cell in the bottom-right corner (n-1, m-1), where n is the number of rows and m is the number of columns. Jay can only move to the right or down from his current cell unless a cell contains the value 1, which represents an obstacle that Jay cannot pass through or land on. Write a function that determines the number of unique paths Jay can take from the top-left corner to the bottom-right corner, avoiding obstacles. If there is no way to reach the destination, return 0. **Input** * The first line contains two integers n and m, representing the number of rows and columns in the grid. * Each of the next n lines contains m integers (either 0 or 1), representing the values in the grid. **Output** * Output a single integer representing the number of unique paths from the top-left corner to the bottom-right corner avoiding obstacles. **Constraints** * 1 ≤ n, m ≤ 100 * The grid contains only 0s and 1s. * The cell at (0,0) and the cell at (n-1,m-1) are always 0 (i.e., there are no obstacles in the start and end positions). **Example** Input: ``` 3 3 0 0 0 0 1 0 0 0 0 ``` Output: ``` 2 ``` Explanation: There are two unique paths for Jay to reach the bottom-right corner: 1. Right -> Right -> Down -> Down 2. Down -> Down -> Right -> Right Input: ``` 3 3 0 1 0 0 1 0 0 0 0 ``` Output: ``` 1 ``` Explanation: There is only one unique path for Jay to reach the bottom-right corner: 1. Down -> Down -> Right -> Right","solution":"def unique_paths_with_obstacles(grid): n = len(grid) m = len(grid[0]) # If starting or ending cell is an obstacle, return 0 if grid[0][0] == 1 or grid[n-1][m-1] == 1: return 0 # Create a DP table initialized with 0s dp = [[0] * m for _ in range(n)] # Initialize the starting position dp[0][0] = 1 # Fill the first row for j in range(1, m): if grid[0][j] == 0: dp[0][j] = dp[0][j-1] # Fill the first column for i in range(1, n): if grid[i][0] == 0: dp[i][0] = dp[i-1][0] # Fill the DP table for i in range(1, n): for j in range(1, m): if grid[i][j] == 0: dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[n-1][m-1]"},{"question":"Task: You need to write a function `find_missing_number` which takes a list of consecutive integers with one integer missing and returns the missing integer. Rules/Note: * The list will always have at least 2 numbers and exactly one missing number. * The list will be sorted in ascending order. * The list will always consist of positive integers. # Examples: - find_missing_number([1, 2, 4, 5]) should return 3 - find_missing_number([10, 11, 13, 14, 15]) should return 12 - find_missing_number([21, 22, 23, 25, 26]) should return 24 # Function Signature: ```python def find_missing_number(nums: List[int]) -> int: # your code here ```","solution":"from typing import List def find_missing_number(nums: List[int]) -> int: Find the missing number in a list of consecutive integers. Args: nums (List[int]): A list of consecutive integers with one missing integer. Returns: int: The missing integer. # Calculate the expected sum of the range of numbers expected_sum = (nums[0] + nums[-1]) * (len(nums) + 1) // 2 # Calculate the actual sum of the provided list actual_sum = sum(nums) # The missing number is the difference between the expected sum and the actual sum return expected_sum - actual_sum"},{"question":"Given a matrix of size n x n filled with integer values, rotate the matrix 90 degrees clockwise. Constraints - 1 ≤ n ≤ 100 - -1000 ≤ matrix[i][j] ≤ 1000 Input An integer n, followed by an n x n matrix. Output Print the rotated matrix. Examples Input 3 1 2 3 4 5 6 7 8 9 Output 7 4 1 8 5 2 9 6 3 Input 2 1 2 3 4 Output 3 1 4 2","solution":"def rotate_matrix_90_clockwise(matrix): Rotates the given n x n matrix 90 degrees clockwise. n = len(matrix) # Create a new matrix for the rotated result rotated = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): rotated[j][n - i - 1] = matrix[i][j] return rotated"},{"question":"You are hired as a programmer for a telecom company that specializes in network optimization. One of your tasks is to optimize the data traffic through the network. Each network consists of nodes connected by directional links. The data can only travel from one node to another directly if a directional link exists between them. Your goal is to determine the shortest time it takes to send data from a source node to all other nodes in the network. The time it takes to travel a directional link is always the same and given as an integer. # Problem Statement Given a network with `N` nodes and `M` directional links, along with the time `T` it takes for data to travel each link, find the shortest time required to send data from a given source node `S` to all other nodes in the network. # Input Format - First line contains an integer `T` representing the time for data to travel each link. - Second line contains two integers `N` and `M`, where `N` is the number of nodes and `M` is the number of directional links. - The next `M` lines each contain two integers `U` and `V`, indicating a directional link from node `U` to node `V`. - The last line contains a single integer `S`, indicating the source node (0 ≤ S < N). # Output Format - Print a single line with `N` integers separated by space. The i-th integer should be the shortest time required to send data from node `S` to node `i`. If a node is unreachable, print `-1` for that node. # Constraints - 2 ≤ N ≤ 1000 - 1 ≤ M ≤ 10000 - 1 ≤ T ≤ 1000 - 0 ≤ U, V < N # Sample Input ``` 10 5 6 0 1 0 2 1 3 1 4 2 3 3 4 0 ``` # Sample Output ``` 0 10 10 20 20 ``` # Explanation - Node 0 is the source node, hence the time to node 0 is 0. - The shortest time to reach node 1 from node 0 is 10 time units. - The shortest time to reach node 2 from node 0 is also 10 time units. - The shortest time to reach node 3 is through node 1 or node 2, so it\'s 20 time units. - The shortest time to reach node 4 is through node 3, so it\'s also 20 time units.","solution":"from collections import defaultdict, deque def shortest_time(T, N, M, edges, S): Computes the shortest time required to send data from source node S to all other nodes in the network. Parameters: - T: An integer representing the time for data to travel each link. - N: An integer representing the number of nodes. - M: An integer representing the number of directional links. - edges: A list of pairs (U, V) representing the directional link from node U to node V. - S: An integer representing the source node. Returns: - A list of integers representing the shortest time required to send data from node S to node i. If a node is unreachable, the value should be -1 for that node. # Adjacency list representation of the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Distance array and queue initialization dist = [-1] * N dist[S] = 0 queue = deque([S]) while queue: node = queue.popleft() current_distance = dist[node] for neighbor in graph[node]: if dist[neighbor] == -1 or current_distance + T < dist[neighbor]: dist[neighbor] = current_distance + T queue.append(neighbor) return dist"},{"question":"You are given a list of integers, and you need to find the first Integer which is repeated in the list. If there is no repeating integer, return `-1`. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains an integer N, the number of integers in the list. - The second line contains N space-separated integers. ------ Output Format ------ For each test case, output the first repeating integer in the list, or `-1` if no integer is repeated. ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 0 ≤ text{list elements} ≤ 100 ----- Sample Input 1 ------ 3 5 1 2 3 2 5 4 1 2 3 4 6 6 1 3 5 3 6 ----- Sample Output 1 ------ 2 -1 3 ----- Explanation 1 ------ Test case 1: The integer `2` is the first one that gets repeated in the list. Test case 2: There is no repeating integer, so the output is `-1`. Test case 3: The integer `3` is the first one that gets repeated in the list (even though `6` is also repeated, `3` appears first).","solution":"def first_repeating_integer(test_cases): results = [] for N, integers in test_cases: seen = set() first_repeat = -1 for num in integers: if num in seen: first_repeat = num break seen.add(num) results.append(first_repeat) return results"},{"question":"Write a function that takes in a list of strings and returns a new list where each string is reversed. Make sure the function handles an empty list or a list with empty strings correctly. **Example:** ``` Input: [\\"apple\\", \\"banana\\", \\"cherry\\"] Output: [\\"elppa\\", \\"ananab\\", \\"yrrehc\\"] Input: [\\"abc\\", \\"123\\", \\"\\", \\"xyz\\"] Output: [\\"cba\\", \\"321\\", \\"\\", \\"zyx\\"] ```","solution":"def reverse_strings(strings): Takes in a list of strings and returns a new list where each string is reversed. Args: strings (list): A list of strings. Returns: list: A list where each string is reversed. return [s[::-1] for s in strings]"},{"question":"# Maximum Sum Subarray Problem Given an integer array `arr`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. This problem can be solved using Kadane\'s Algorithm, which operates in linear time complexity. For example, the maximum sum subarray for `[−2,1,−3,4,−1,2,1,−5,4]` is `[4,−1,2,1]` with sum `6`. Function Description Complete the `maxSubArraySum` function in the editor below. It should return an integer that denotes the sum of the maximum sum subarray. `maxSubArraySum` has the following parameter(s): - `arr`: an unordered array of integers Input Format The first line contains a single integer `n`, the number of elements in `arr`. Each of the next `n` lines contains an integer, `arr[i]`. Constraints ``` 1 ≤ n ≤ 10^5 -10^4 ≤ arr[i] ≤ 10^4 ``` Output Format Print a single line containing a single integer denoting the sum of the maximum sum subarray. Sample Input 0 ``` 9 -2 1 -3 4 -1 2 1 -5 4 ``` Sample Output 0 ``` 6 ``` Explanation 0 In the array `arr = [-2,1,-3,4,-1,2,1,-5,4]`, the contiguous subarray with the largest sum is `[4,-1,2,1]`, which has a sum of `6`. Sample Input 1 ``` 5 1 2 3 4 5 ``` Sample Output 1 ``` 15 ``` Explanation 1 In the array `arr = [1,2,3,4,5]`, the entire array forms the subarray with the maximum sum, which is `15`.","solution":"def maxSubArraySum(arr): Returns the sum of the maximum sum subarray using Kadane\'s Algorithm. max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global"},{"question":"Given a matrix of integers mat, you should rotate the matrix 90 degrees clockwise `k` times. Return the matrix after performing the rotations. Example 1: Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1 Output: [[7,4,1],[8,5,2],[9,6,3]] Example 2: Input: mat = [[1,2],[3,4]], k = 2 Output: [[4,3],[2,1]] Example 3: Input: mat = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 3 Output: [[4,8,12,16],[3,7,11,15],[2,6,10,14],[1,5,9,13]] Constraints: - 1 <= mat.length, mat[0].length <= 100 - -100 <= mat[i][j] <= 100 - 1 <= k <= 10","solution":"def rotate_matrix(mat, k): Rotates the matrix 90 degrees clockwise k times. def rotate_once(matrix): return [list(reversed(col)) for col in zip(*matrix)] for _ in range(k % 4): # Since rotating 4 times results in the same matrix mat = rotate_once(mat) return mat"},{"question":"Jessica loves to play with strings. She recently encountered a string-related problem and now needs your help to solve it. The task involves determining the number of distinct substrings in a given string. A substring of a string is a contiguous sequence of characters within the string. For example, the substrings of \\"abc\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Let\'s take another example. Given the string \\"abac\\", its distinct substrings are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ba\\", \\"ac\\", \\"aba\\", \\"bac\\", and \\"abac\\". Hence, there are 9 distinct substrings. Write a program that calculates the number of distinct substrings for a given string. Input format: The input contains a single string S consisting of lowercase English letters. Output format: Print a single integer representing the number of distinct substrings in the input string. Constraints: 1 ≤ |S| ≤ 100 SAMPLE INPUT abac SAMPLE OUTPUT 9 Explanation The distinct substrings of \\"abac\\" are \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ba\\", \\"ac\\", \\"aba\\", \\"bac\\", and \\"abac\\". Therefore, there are 9 distinct substrings.","solution":"def distinct_substrings(s): Returns the number of distinct substrings in the given string s. distinct_set = set() n = len(s) # Generate all possible substrings for i in range(n): for j in range(i + 1, n + 1): substring = s[i:j] distinct_set.add(substring) # Return the number of distinct substrings return len(distinct_set)"},{"question":"Create a program that reads an integer n (1 <= n <= 100) representing the number of elements in a list, followed by n integers (each between -1000 and 1000). The program should output the sum of all prime numbers in the list. If there are no prime numbers, the program should output 0. Input The input consists of multiple datasets. Each dataset is provided in the following format: n a1 a2 a3 ... an When n is 0, it indicates the end of input. Output For each dataset, output the sum of all prime numbers on one line. If there are no prime numbers, output 0. Example Input 5 2 3 4 5 6 3 -5 0 1 4 8 10 12 14 0 Output 10 0 0","solution":"def is_prime(num): Determines if a number is prime. if num <= 1: return False for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True def sum_of_primes(n, elements): Returns the sum of prime numbers in a list of n elements. prime_sum = sum(x for x in elements if is_prime(x)) return prime_sum def process_input(data): Process input data and prints sum of primes for each dataset. lines = data.strip().split(\'n\') results = [] i = 0 while i < len(lines): n = int(lines[i]) if n == 0: break elements = list(map(int, lines[i + 1].split())) results.append(sum_of_primes(n, elements)) i += 2 return results"},{"question":"Description A delivery company has deployed autonomous robots to deliver packages. Each robot is initially at position 0 on an infinite number line. You need to program a function to calculate the minimum total distance that all robots need to travel in order to deliver packages to specified positions on the number line. The company wants to know how efficiently the robots will deliver all packages. Write a function `min_total_travel_distance(positions)` where `positions` is a list of integers representing the positions on the number line where packages need to be delivered. The function should return an integer representing the minimum total distance traveled by all robots. Input Format - A single list of integers `positions` where each integer represents the position on the number line. Output Format - An integer representing the minimum total travel distance. Input Limits 1 ≤ Length of `positions` ≤ 1000 -10^6 ≤ Each position ≤ 10^6 SAMPLE INPUT [1, 2, 3] SAMPLE OUTPUT 2 Explanation For example, if the positions are [1, 2, 3], one optimal way is to send one robot to each position. The distance traveled would be: - Robot 1 travels distance 1 to position 1: 1 - Robot 2 travels distance 2 to position 2: 2 - Robot 3 travels distance 3 to position 3: 3 In this case, the total distance is 1 + 1 + 1 = 2. Hence, the minimum total travel distance is 2. The function should compute the minimum total travel distance required for all robots to deliver the packages efficiently.","solution":"def min_total_travel_distance(positions): Calculates the minimum total distance that all robots need to travel to deliver packages to specified positions on the number line. if not positions: return 0 median_position = sorted(positions)[len(positions) // 2] total_distance = sum(abs(pos - median_position) for pos in positions) return total_distance"},{"question":"Given an n x m grid representing a field, each cell in the grid contains a non-negative integer representing the height of the terrain at that location. You are to simulate rainwater falling on this field and determine how much water would be trapped after it settles. Water can only be trapped on cells that are not on the boundary of the grid, and water can only be trapped if it is surrounded by higher terrain from all four cardinal directions (up, down, left, right). Input The first line contains two integers n and m (1 ≤ n, m ≤ 200) – the number of rows and columns in the field. Then n lines, each containing m integers, follow. The i-th of these lines represent the heights of the terrain on the i-th row. Each integer h_{ij} (0 ≤ h_{ij} ≤ 10^9) represents the height of the terrain at the cell (i, j). Output Print a single integer – the total amount of water trapped after the rain. Example Input 4 4 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 Output 4 Explanation In the given example, you can visualize the grid with terrain heights: ``` 1 1 1 1 1 0 0 1 1 0 0 1 1 1 1 1 ``` After the rain, water gets trapped in the cells with height 0 surrounded by cells with height 1, resulting in 4 units of water.","solution":"import heapq def trapRainWater(grid): if not grid or not grid[0]: return 0 n, m = len(grid), len(grid[0]) visited = [[False] * m for _ in range(n)] heap = [] # Add boundary cells to the heap for i in range(n): heapq.heappush(heap, (grid[i][0], i, 0)) heapq.heappush(heap, (grid[i][m-1], i, m-1)) visited[i][0] = visited[i][m-1] = True for j in range(m): heapq.heappush(heap, (grid[0][j], 0, j)) heapq.heappush(heap, (grid[n-1][j], n-1, j)) visited[0][j] = visited[n-1][j] = True total_water = 0 directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] while heap: height, x, y = heapq.heappop(heap) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: visited[nx][ny] = True total_water += max(0, height - grid[nx][ny]) heapq.heappush(heap, (max(height, grid[nx][ny]), nx, ny)) return total_water"},{"question":"In a fictional city named Byteville, there is a programmer named Lydia who is passionate about cycling. She has found particular interest in planning her bike routes using a grid-based map representing the city streets. However, Byteville has some peculiar rules. Each block in the grid can have a specific level of traffic congestion, and Lydia wants to minimize the total congestion on her route. The grid is represented as an (m times n) matrix where each element denotes the traffic congestion level (a non-negative integer) of that block. Lydia plans to start from the top-left corner of the grid ((0, 0)) and reach the bottom-right corner of the grid ((m-1, n-1)). She can only move either to the right or down at any point in time. Your task is to help Lydia find a route from the top-left to the bottom-right corner minimizing the total congestion level. The total congestion level of a route is the sum of the congestion levels of the blocks in the route. ----Input---- The first line of input contains two integers (m) and (n) (1 le m, n le 1000), the dimensions of the grid. The next (m) lines each contain (n) integers separated by spaces, representing the congestion levels of the blocks, where each congestion level is between 0 and 1000 inclusive. ----Output---- Output consists of a single integer – the minimum total congestion level for any valid route from the top-left to the bottom-right corner of the grid. ----Example---- Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 7 Explanation: The optimal route is (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) with congestion levels 1+1+4+2+1 = 7. ----Notes---- - Lydia must always start at the top-left corner and end at the bottom-right corner. - She can only move either right or down at any step. Can you help Lydia find the optimal route?","solution":"def min_congestion_route(m, n, grid): Function to calculate the minimum total congestion level from top-left to bottom-right in a grid. Parameters: m (int): Number of rows in the grid. n (int): Number of columns in the grid. grid (list of list of int): Matrix representing the congestion levels of each block. Returns: int: Minimum total congestion level. # Initialize a 2D dp array with the same dimensions as grid dp = [[0 for _ in range(n)] for _ in range(m)] # Base case: the congestion level of the starting point dp[0][0] = grid[0][0] # Fill in the dp array for i in range(m): for j in range(n): if i == 0 and j > 0: dp[i][j] = dp[i][j-1] + grid[i][j] # Can only come from the left elif j == 0 and i > 0: dp[i][j] = dp[i-1][j] + grid[i][j] # Can only come from above elif i > 0 and j > 0: dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # Can come from either left or above # The answer is the value at the bottom-right corner of dp array return dp[m-1][n-1]"},{"question":"You are the CTO of a company that runs a popular cloud photo storage service. Your users frequently upload large batches of photos, and you need an efficient way to determine the maximum number of photos that can be stored given the current storage available on your cloud servers. Your storage system has standardized its capacity such that each server can hold a maximum of `10^9` bytes (1 gigabyte). Each photo takes a variable amount of space. Given a list of photo sizes in bytes, write a function `max_photos(stored: List[int], capacity: int)` that determines the maximum number of photos that can be stored without exceeding the given capacity. The function should take two arguments: - `stored`: a list of integers representing the sizes of the photos already stored on the servers (in bytes). - `capacity`: an integer representing the remaining available capacity (in bytes). The function should return an integer representing the maximum number of additional photos (from those stored in the list) that can fit in the given capacity. For example: If `stored = [200000000, 150000000, 300000000, 500000000]` and `capacity = 800000000`, the function `max_photos(stored, 800000000)` should return `3` because you can fit photos of sizes 200000000, 150000000, and 300000000 within the 800000000 bytes limit.","solution":"def max_photos(stored, capacity): This function takes a list of photo sizes and a remaining capacity in bytes, and returns the maximum number of photos that can be stored without exceeding the given capacity. # Sort the list of photo sizes in ascending order stored.sort() # Initialize variables to count photos and track the used capacity count = 0 used_capacity = 0 # Iterate through the sorted photo sizes for photo_size in stored: # Check if adding this photo exceeds the remaining capacity if used_capacity + photo_size <= capacity: # If not, add the photo size to the used capacity and increment the count used_capacity += photo_size count += 1 else: # If it does, break out of the loop since adding more photos is not possible break # Return the total count of photos that can be stored return count"},{"question":"In a far-off land, there is a grid-based labyrinth, which consists of n rows and m columns. Each cell in the labyrinth can be either free or occupied by an obstacle. The entrance to the labyrinth is located at the top-left corner (cell (0, 0)), and the exit is situated at the bottom-right corner (cell (n-1, m-1)). You are to help a brave adventurer determine if there is a path from the entrance to the exit. The adventurer can move to an adjacent cell either to the right or downward. There are no upward or leftward moves allowed due to the labyrinth\'s complex design. Given the labyrinth\'s layout, you need to ascertain whether a path exists from the entrance to the exit considering the allowed movements. # Input The first line contains an integer t (1 ≤ t ≤ 30) — the number of test cases. Each test case starts with two integers n and m (1 ≤ n, m ≤ 100) — the dimensions of the labyrinth. The next n lines contain m characters each (\'0\' or \'1\') — the representation of the labyrinth, where \'0\' denotes a free cell and \'1\' denotes an obstacle. # Output For each test case, print \\"Yes\\" if there exists a path from the entrance to the exit, otherwise print \\"No\\". # Example Input ``` 2 3 4 0000 0110 0000 3 3 010 111 001 ``` Output ``` Yes No ``` # Explanation In the first test case, the adventurer can move from (0, 0) to (2, 3) avoiding obstacles, making the path: ``` (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) ``` In the second test case, all potential paths are blocked by obstacles, and thus there is no way to reach the exit from the entrance.","solution":"def is_path_exist(n, m, labyrinth): Determines if there\'s a path from the top-left to the bottom-right corner in a given n x m labyrinth. if labyrinth[0][0] == \'1\' or labyrinth[n-1][m-1] == \'1\': return \\"No\\" visited = [[False]*m for _ in range(n)] visited[0][0] = True def dfs(x, y): if x == n-1 and y == m-1: return True for dx, dy in [(0, 1), (1, 0)]: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and labyrinth[nx][ny] == \'0\' and not visited[nx][ny]: visited[nx][ny] = True if dfs(nx, ny): return True return False return \\"Yes\\" if dfs(0, 0) else \\"No\\" def solve_labyrinths(test_cases): results = [] for n, m, labyrinth in test_cases: results.append(is_path_exist(n, m, labyrinth)) return results"},{"question":"You are given an integer array `nums` of size `n`, and another integer `k`. Your task is to compute the sum of each sliding window of size `k` as it moves from the beginning of the array to the end. A sliding window is a subarray consisting of `k` consecutive elements from the array. The function should return a list of integers where each element represents the sum of the elements in that sliding window. # Input - The first line contains two integers, `n` and `k` (1 ≤ k ≤ n ≤ 10^6), where `n` is the length of the array and `k` is the size of the sliding window. - The second line contains `n` integers separated by spaces, representing the elements of the array `nums`. Each element is an integer in the range [-10^4, 10^4]. # Output - Output a list of `n - k + 1` integers, representing the sum of elements in each sliding window of size `k`. # Example Input ``` 7 3 1 3 -1 -3 5 3 6 7 ``` Output ``` 3 1 1 5 14 16 ``` # Explanation - The first sliding window is `[1, 3, -1]` and its sum is 3. - The second sliding window is `[3, -1, -3]` and its sum is -1. - The third sliding window is `[-1, -3, 5]` and its sum is 1. - The fourth sliding window is `[-3, 5, 3]` and its sum is 5. - The fifth sliding window is `[5, 3, 6]` and its sum is 14. - The sixth sliding window is `[3, 6, 7]` and its sum is 16.","solution":"def sliding_window_sum(nums, k): Computes the sum of each sliding window of size k. Parameters: nums (list of integers): The list of integers. k (int): The size of the sliding window. Returns: list of integers: The list containing the sum of each sliding window. n = len(nums) if n == 0 or k == 0 or k > n: return [] window_sum = sum(nums[:k]) result = [window_sum] for i in range(n - k): window_sum += nums[i + k] - nums[i] result.append(window_sum) return result"},{"question":"Given a string ‘str’, the task is to find the smallest window in the string containing all characters of another string ‘pat’. Example 1: Input: str = \\"this is a test string\\" pat = \\"tist\\" Output: \\"t stri\\" Explanation: The smallest window containing all characters of \\"tist\\" is \\"t stri\\". Example 2: Input: str = \\"geeksforgeeks\\" pat = \\"ork\\" Output: \\"ksfor\\" Explanation: The smallest window containing all characters of \\"ork\\" is \\"ksfor\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestWindow() which takes two strings ‘str’ and ‘pat’ as input parameters and returns the smallest window in ‘str’ containing all characters of ‘pat’. If there is no such window, return an empty string. Expected Time Complexity: O(|str|) Expected Auxiliary Space: O(|str| + |pat|) Constraints: 1 <= |str|, |pat| <= 10^5 All characters are lowercase English letters.","solution":"from collections import Counter def smallestWindow(s, p): Finds the smallest window in string `s` containing all characters of string `p`. :param s: The main string in which we search for the window :param p: The pattern string containing the characters we need to find in `s` :return: The smallest window in `s` containing all characters of `p`, or an empty string if no such window exists if len(p) > len(s): return \\"\\" dict_p = Counter(p) required = len(dict_p) left, right = 0, 0 formed = 0 window_counts = {} # (window length, left, right) ans = float(\\"inf\\"), None, None while right < len(s): char = s[right] window_counts[char] = window_counts.get(char, 0) + 1 if char in dict_p and window_counts[char] == dict_p[char]: formed += 1 while left <= right and formed == required: char = s[left] if right - left + 1 < ans[0]: ans = (right - left + 1, left, right) window_counts[char] -= 1 if char in dict_p and window_counts[char] < dict_p[char]: formed -= 1 left += 1 right += 1 if ans[0] == float(\\"inf\\"): return \\"\\" else: return s[ans[1]: ans[2] + 1]"},{"question":"Jack and Jill are playing a game with strings. Jill gives Jack a string consisting of lowercase English letters and challenges him to find the smallest lexicographically string by deleting exactly one character from the given string. Your task is to write a program to help Jack complete this challenge. -----Input----- The first line of input contains a single string s (2 leq |s| leq 10^5), the string given by Jill. -----Output----- Output the smallest lexicographically string obtained by deleting exactly one character from the given string. -----Examples----- Sample Input 1: abc Sample Output 1: ab Sample Input 2: acdb Sample Output 2: acb","solution":"def smallest_lexicographical_string(s): Returns the smallest lexicographical string obtained by deleting exactly one character from s. n = len(s) for i in range(n - 1): if s[i] > s[i + 1]: return s[:i] + s[i + 1:] return s[:-1] # If all characters are in increasing order, remove the last character # Example test case can be run using the below line # print(smallest_lexicographical_string(\\"acdb\\"))"},{"question":"You are given an array consisting of n integers. Your task is to determine if it is possible to select a contiguous subarray such that the sum of its elements is equal to k. Constraints * 1 ≤ n ≤ 10^5 * -10^4 ≤ array[i] ≤ 10^4 * -10^9 ≤ k ≤ 10^9 Input Input is given from Standard Input in the following format: n k array_1 array_2 ... array_n Output Print \\"YES\\" if there exists such a subarray. Otherwise, print \\"NO\\". Examples Input 5 10 1 2 3 4 5 Output YES Input 4 7 1 -1 5 1 Output NO","solution":"def has_subarray_with_sum(n, k, array): Returns \\"YES\\" if there exists a contiguous subarray with sum equal to k. Otherwise, returns \\"NO\\". current_sum = 0 sum_dict = {} for i in range(n): current_sum += array[i] if current_sum == k: return \\"YES\\" if (current_sum - k) in sum_dict: return \\"YES\\" sum_dict[current_sum] = i return \\"NO\\" def main(): import sys input = sys.stdin.read data = input().split() n = int(data[0]) k = int(data[1]) array = list(map(int, data[2:])) print(has_subarray_with_sum(n, k, array)) if __name__ == \\"__main__\\": main()"},{"question":"Maria enjoys working with numbers. She loves sequences, especially those that are strictly increasing. A sequence is strictly increasing if each subsequent element is greater than the preceding one. Given a list of integers, Maria wants to know the length of the longest strictly increasing subsequence within the list. -----Constraints----- - The list contains between 1 and 1000 integers (inclusive). - Each integer in the list is between -10^9 and 10^9. -----Input----- Input is given from Standard Input in the following format: n a_1 a_2 ... a_n Where `n` is the number of integers in the list, and `a_i` represents the ith integer in the list. -----Output----- Print the length of the longest strictly increasing subsequence. -----Sample Input----- 8 10 22 9 33 21 50 41 60 -----Sample Output----- 5 For example, one of the longest strictly increasing subsequences is [10, 22, 33, 50, 60] which has a length of 5.","solution":"def length_of_lis(nums): Returns the length of the longest strictly increasing subsequence. if not nums: return 0 dp = [1] * len(nums) for i in range(1, len(nums)): for j in range(i): if nums[i] > nums[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Your task is to determine how many unique substrings can be generated from a given string. A substring is defined as a sequence of characters within a string. For instance, substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". ------ Input Format ------ - The first line contains an integer T specifying the number of test cases. - The following T lines each contain a single string S of lowercase English letters. ------ Output Format ------ For each test case, output a single line containing one integer, the number of unique substrings of the given string S. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 50 ------ Sample Input 1 ------ ``` 2 abc aaa ``` ------ Sample Output 1 ------ ``` 6 3 ``` ------ Explanation 1 ------ Test Case 1: Unique substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\". Total = 6. Test Case 2: For the string \\"aaa\\", the unique substrings are: \\"a\\", \\"aa\\", \\"aaa\\". Total = 3.","solution":"def count_unique_substrings(S): Returns the number of unique substrings of the given string S. unique_substrings = set() for i in range(len(S)): for j in range(i + 1, len(S) + 1): unique_substrings.add(S[i:j]) return len(unique_substrings) def solve(T, strings): For each string S in strings, computes the number of unique substrings and prints it. results = [] for S in strings: results.append(count_unique_substrings(S)) return results"},{"question":"In mathematics, a Fibonacci sequence is a series of numbers in which each number (Fibonacci number) is the sum of the two preceding ones, usually starting with 0 and 1. The sequence begins: 0, 1, 1, 2, 3, 5, 8, 13, 21, and so on. You are given a task to generate the first \'n\' terms of the Fibonacci sequence, where \'n\' is provided as input.","solution":"def generate_fibonacci(n): Generates the first \'n\' terms of the Fibonacci sequence. Parameters: n (int): The number of terms to generate. Returns: list: A list containing the first \'n\' terms of the Fibonacci sequence. if n <= 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] fib_sequence = [0, 1] for i in range(2, n): next_term = fib_sequence[-1] + fib_sequence[-2] fib_sequence.append(next_term) return fib_sequence"},{"question":"Aditi loves solving puzzles, and one day she came across a unique number puzzle. She was given an integer `n` and was asked to find all unique combinations of numbers that add up to `n`, using positive integers from 1 to `n` (inclusive). Each number can only be used once in each combination. Your task is to help Aditi find all unique combinations of numbers that sum up to `n`. Each combination should be sorted in ascending order, and the unique combinations themselves should also be sorted in ascending order based on the first number of each combination. Example 1: Input: 4 Output: [[1, 3], [4]] Example 2: Input: 5 Output: [[1, 4], [2, 3], [5]] Example 3: Input: 7 Output: [[1, 2, 4], [1, 6], [2, 5], [3, 4], [7]] Your Task: You don\'t need to input anything. Complete the function `findCombinations()` which takes an integer `n` as the input parameter and returns a list of lists, where each list contains a unique combination of numbers that add up to `n`. Constraints: 1 <= n <= 20 ```python def findCombinations(n: int) -> List[List[int]]: # Implementation here ```","solution":"from typing import List def findCombinations(n: int) -> List[List[int]]: def backtrack(start: int, target: int, path: List[int]): if target == 0: result.append(path) return for i in range(start, n + 1): if i > target: break backtrack(i + 1, target - i, path + [i]) result = [] backtrack(1, n, []) return result"},{"question":"problem A non-negative integer array A = [a_1, a_2, ldots, a_n] is given. You are required to rearrange the array elements such that the final array follows the \\"wave\\" pattern: a_1 geq a_2 leq a_3 geq a_4 ldots. Specifically, the array should satisfy the condition: [ a_i geq a_{i+1} quad text{if} quad i text{ is odd} ] [ a_i leq a_{i+1} quad text{if} quad i text{ is even} ] Your task is to rearrange the given array so that it satisfies the wave condition. To ensure the uniqueness of the solution: 1. If there are multiple valid solutions, you can return any one of them. 2. The initial array may have repeated elements. 3. You are restricted to use O(1) extra space, i.e., you should do the rearrangement in-place. Input Input is given from standard input in the following format: n a_1 a_2 ldots a_n Output Output the rearranged array (in wave form) as a single line of space-separated integers. Example Input 6 3 6 5 10 7 20 Output 6 3 10 5 20 7 Explanation: The final array [6, 3, 10, 5, 20, 7] satisfies the wave condition as each odd-indexed element is greater than the next element and each even-indexed element is less than the next element. The answer may vary as long as it satisfies the wave conditions. Another valid output for the same input could be: 5 3 10 6 20 7","solution":"def wave_sort(arr): Rearranges the array to satisfy the wave condition. n = len(arr) for i in range(1, n, 2): if arr[i-1] < arr[i]: arr[i-1], arr[i] = arr[i], arr[i-1] if i+1 < n and arr[i+1] < arr[i]: arr[i+1], arr[i] = arr[i], arr[i+1] return arr"},{"question":"Given an array of integers, determine if it contains any duplicates. Your task is to write a function that checks for the presence of duplicate integers in different arrays. ------ Input Format ------ - The first line of input contains a single integer T, the number of test cases. - Each of the next T lines contains a single integer N, the number of elements in the array. - The following line contains N space-separated integers, representing the elements of the array. ------ Output Format ------ For each test case, output texttt{YES} if there are any duplicates in the array, else output texttt{NO}. You may print each character of the string in uppercase or lowercase (for example, the strings texttt{YeS}, texttt{yEs}, texttt{yes}, and texttt{YES} will all be treated as identical). ------ Constraints ------ 1 ≤ T ≤ 50 1 ≤ N ≤ 100 1 ≤ texttt{Element in array} ≤ 1000 ------ Sample Input 1 ------ 3 5 1 2 3 4 5 6 1 2 3 4 4 5 4 9 8 7 6 ------ Sample Output 1 ------ NO YES NO ------ Explanation 1 ------ Test case 1: All the elements are unique, so there are no duplicates. The output is texttt{NO}. Test case 2: The element 4 is duplicated in the array. The output is texttt{YES}. Test case 3: All elements are unique, so there are no duplicates. The output is texttt{NO}.","solution":"def check_duplicates(T, test_cases): This function checks for duplicates in multiple test cases. Parameters: T (int): The number of test cases test_cases (list): A list of test cases where each test case is a tuple (N, arr) Returns: list: A list of \\"YES\\" or \\"NO\\" for each test case indicating the presence of duplicates results = [] for i in range(T): N, arr = test_cases[i] if len(set(arr)) != N: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a popular game, there is a grid made up of N rows and M columns. Each cell of the grid can either be empty (denoted by \'.\') or blocked (denoted by \'#\'). The player starts from the top-left cell of the grid (1,1) and needs to reach the bottom-right cell (N,M). The player can only move to adjacent cells in the right or down directions. Write a function to determine if the player can reach the bottom-right cell from the top-left cell without encountering any blocked cells. If the player can reach the destination, return \\"YES\\". Otherwise, return \\"NO\\". Input The first line of input contains two integers N and M separated by a space: the number of rows and columns in the grid. The next N lines contain M characters each, representing the grid. Output Print \\"YES\\" if the player can reach the bottom-right cell, otherwise print \\"NO\\". SAMPLE INPUT 3 3 ... ..# .#. SAMPLE OUTPUT NO EXPLANATION Even though the player can move through the grid to avoid the blocked cells, there is no way to reach the bottom-right cell (3, 3) because moving down from (2, 3) to (3, 3) is blocked.","solution":"def can_reach_end(N, M, grid): Determines if the player can reach the bottom-right cell from the top-left cell without encountering any blocked cells. Args: N : int : the number of rows in the grid M : int : the number of columns in the grid grid : List of str : the grid representation Returns: str : \'YES\' if the player can reach the bottom-right cell, otherwise \'NO\' if grid[0][0] == \'#\' or grid[N-1][M-1] == \'#\': return \\"NO\\" # Initialize a DP table to store whether a cell is reachable or not dp = [[False] * M for _ in range(N)] dp[0][0] = True for i in range(N): for j in range(M): if grid[i][j] == \'#\': dp[i][j] = False else: if i > 0: dp[i][j] = dp[i][j] or dp[i-1][j] if j > 0: dp[i][j] = dp[i][j] or dp[i][j-1] return \\"YES\\" if dp[N-1][M-1] else \\"NO\\""},{"question":"Given an array of integers of length N, A = [A_1, A_2, ..., A_N], and an integer M, determine the number of distinct pairs (i, j) where 1 <= i < j <= N such that (A_i + A_j) is divisible by M. -----Constraints----- - All values in input are integers. - 2 <= N <= 10^5 - 1 <= A_i, M <= 10^9 -----Input----- Input is given from Standard Input in the following format: N M A_1 A_2 ... A_N -----Output----- Print a single integer representing the number of distinct pairs (i, j) where the sum is divisible by M. -----Sample Input----- 5 4 1 2 3 4 5 -----Sample Output----- 2 In the sample input, the pairs (1, 3) and (2, 4) can be formed such that the sum of their elements is divisible by 4.","solution":"def count_divisible_pairs(N, M, A): Returns the number of distinct pairs (i, j) where 1 <= i < j <= N such that (A[i] + A[j]) is divisible by M. remainder_count = [0] * M # Count frequencies of each remainder for num in A: remainder_count[num % M] += 1 total_pairs = 0 # Count pairs with remainders summing to 0 mod M total_pairs += (remainder_count[0] * (remainder_count[0] - 1)) // 2 # Count pairs of other complements for i in range(1, (M // 2) + 1): if i != M - i: total_pairs += remainder_count[i] * remainder_count[M - i] # For the middle element when M is even if M % 2 == 0: total_pairs += (remainder_count[M // 2] * (remainder_count[M // 2] - 1)) // 2 return total_pairs def parse_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) M = int(data[1]) A = list(map(int, data[2:2+N])) return N, M, A if __name__ == \\"__main__\\": N, M, A = parse_input() print(count_divisible_pairs(N, M, A))"},{"question":"A text-based game involves multiple players participating in rounds. Each player starts with a certain number of points. In each round, players can gain or lose a certain number of points based on their performance. Points can be positive or negative, and each player’s points are updated after every round. The scores of all players at the end of a given number of rounds are to be calculated. Your task is to write a program that calculates the final scores of all players after all rounds have been played. For example, suppose we have 3 players starting with scores of 10, 15, and 20 points respectively, and 2 rounds where the score changes in the rounds are as follows: - Round 1: Player 1 gains 5 points, Player 2 loses 3 points, and Player 3 gains 2 points. - Round 2: Player 1 loses 1 point, Player 2 gains 4 points, and Player 3 loses 5 points. The final scores would be: - Player 1: 14 points - Player 2: 16 points - Player 3: 17 points -----Input----- The input consists of: - One line with an integer n (2 le n le 10^5), the number of players. - One line with n integers p_1, ldots , p_n (0 le p_i le 10^9 for each i), the initial points of each player. - One line with an integer m (1 le m le 10^5), the number of rounds. - m lines, each with n integers c_{i1}, ldots, c_{in} (-10^3 le c_{ij} le 10^3 for each i and j), where c_{ij} represents the change in points for player j in round i. -----Output----- Output a single line containing n integers, the final points of each player after all rounds. -----Examples----- Sample Input: 3 10 15 20 2 5 -3 2 -1 4 -5 Sample Output: 14 16 17","solution":"def calculate_final_scores(n, initial_points, m, rounds): Calculate the final scores of each player after all rounds. :param n: Number of players :param initial_points: List of initial points of each player :param m: Number of rounds :param rounds: List of changes in points for each round :return: List of final scores of each player final_scores = initial_points[:] for round_changes in rounds: for i in range(n): final_scores[i] += round_changes[i] return final_scores"},{"question":"Given a collection of integers representing the lengths of different pieces of wood, determine whether it is possible to construct a triangle using exactly three of these pieces. The condition for forming a triangle is that the sum of the lengths of any two pieces must be greater than the length of the remaining piece. Write a function that takes an array of integers and returns a boolean indicating whether such a triangle can be formed. Example 1: Input: [2, 3, 4] Output: true Explanation: You can form a triangle with sides of lengths 2, 3, and 4, as the sum of any two sides is greater than the third side. Example 2: Input: [1, 2, 3] Output: false Explanation: You cannot form a triangle with sides of lengths 1, 2, and 3, as 1 + 2 is not greater than 3. Example 3: Input: [5, 1, 1, 2, 2] Output: true Explanation: You can form a triangle with sides of lengths 2, 2, and 2. Constraints: The length of the given array will not exceed 50. Each length is a positive integer not exceeding 10^6.","solution":"def can_form_triangle(pieces): Determine if some three lengths can form a triangle. :param pieces: List[int] - List of integers representing the lengths of wood pieces. :return: bool - True if a triangle can be formed, False otherwise. n = len(pieces) if n < 3: return False pieces.sort() for i in range(n - 2): if pieces[i] + pieces[i + 1] > pieces[i + 2]: return True return False"},{"question":"A **rich number** is an integer greater than `1` that can be written as the sum of positive integers in at least two distinct ways, where the order of terms does not matter. For example, `6` is a rich number because it can be expressed as `1 + 5` and `2 + 4`. You need to write a function `find_rich_numbers(up_to)` that receives an integer `up_to` and returns a list of all rich numbers less than or equal to `up_to`. Let\'s look at some cases: ```python find_rich_numbers(10) === [5, 6, 7, 8, 9, 10] # 5 = 1+4 = 2+3; 6 = 1+5 = 2+4; and so on. find_rich_numbers(15) === [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] # a continuation of previous calculations up to 15 find_rich_numbers(20) === [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] # a continuation up to 20 find_rich_numbers(2) === [] # no rich numbers under 3 ``` Enjoy coding and happy assessment!","solution":"def find_rich_numbers(up_to): Finds all rich numbers less than or equal to up_to. A rich number is an integer greater than 1 that can be written as the sum of positive integers in at least two distinct ways, where the order of terms does not matter. Parameters: up_to (int): The upper limit to search for rich numbers. Returns: list: A list of all rich numbers up to the specified limit. def is_rich_number(n): count = 0 for i in range(1, (n // 2) + 1): remainder = n - i if remainder > i: count += 1 else: break if count >= 2: return True return False rich_numbers = [] for number in range(2, up_to + 1): if is_rich_number(number): rich_numbers.append(number) return rich_numbers"},{"question":"Write a function that simulates a sequence of operations on an initially empty stack and outputs the sum of the elements in the stack after processing all the operations. The operations will be provided as a list of strings, where each string represents a single operation. The operations can be of the following types: 1. \\"PUSH X\\" - Push the integer X onto the stack. 2. \\"POP\\" - Pop the top element from the stack. If the stack is empty, do nothing. 3. \\"INC K V\\" - Increment the bottom K elements of the stack by V. If there are fewer than K elements in the stack, increment all the elements by V. Constraints: - The number of operations will not exceed 10^5. - The value of X and V in the operations will be between -10^9 and 10^9. - The value of K will be a positive integer. Input: - A list of strings, each representing an operation. Output: - The sum of elements in the stack after performing all the operations. Example: Input: [\\"PUSH 5\\", \\"PUSH 2\\", \\"INC 2 3\\", \\"POP\\", \\"PUSH 10\\"] Output: 18 Explanation: - \\"PUSH 5\\" -> Stack: [5] - \\"PUSH 2\\" -> Stack: [5, 2] - \\"INC 2 3\\" -> Stack: [8, 5] - \\"POP\\" -> Stack: [8] - \\"PUSH 10\\" -> Stack: [8, 10] Sum of elements: 18","solution":"def process_operations(operations): Processes a series of stack operations and returns the sum of elements in the stack after all operations. Parameters: - operations: List of operations as strings. Returns: - An integer representing the sum of elements in the stack after processing all operations. stack = [] for operation in operations: parts = operation.split() if parts[0] == \\"PUSH\\": stack.append(int(parts[1])) elif parts[0] == \\"POP\\": if stack: stack.pop() elif parts[0] == \\"INC\\": K = int(parts[1]) V = int(parts[2]) for i in range(min(K, len(stack))): stack[i] += V return sum(stack)"},{"question":"You are given a rectangular grid with R rows and C columns. Each cell in this grid contains a single lowercase letter. You need to find the length of the longest path such that each cell in the path contains a unique letter. Moving from one cell to another is only allowed in the four cardinal directions (up, down, left, and right) and not diagonally. -----Input----- The input starts with a single line containing two integers R and C (1 leq R, C leq 20), the number of rows and columns in the grid. The next R lines each contain a string of length C, representing the grid. -----Output----- Output a single integer, which is the length of the longest path where no letter repeats. -----Examples----- Sample Input 1: 2 2 ab cd Sample Output 1: 4 Sample Input 2: 3 4 abcd efgh ijkl Sample Output 2: 12","solution":"def longest_unique_path(R, C, grid): def dfs(x, y, path_set): max_length = len(path_set) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: nx, ny = x + dx, y + dy if 0 <= nx < R and 0 <= ny < C and grid[nx][ny] not in path_set: path_set.add(grid[nx][ny]) max_length = max(max_length, dfs(nx, ny, path_set)) path_set.remove(grid[nx][ny]) return max_length max_path_length = 0 for i in range(R): for j in range(C): max_path_length = max(max_path_length, dfs(i, j, set(grid[i][j]))) return max_path_length # Example usage # R, C = 2, 2 # grid = [\\"ab\\", \\"cd\\"] # print(longest_unique_path(R, C, grid)) # Output: 4"},{"question":"# Problem Statement You are given a string which represents a mathematical expression in Reverse Polish Notation (RPN). Reverse Polish Notation, is a mathematical notation in which operators follow their operands. For example, to add 3 and 4, one would write \\"3 4 +\\" rather than \\"3 + 4\\". RPN expressions can be easily evaluated using a stack, as follows: 1. Read the expression from left to right, one element at a time. 2. Push operands (numbers) onto the stack. 3. When an operator is encountered, pop the required number of operands from the stack, perform the operation, and push the result back onto the stack. 4. At the end of the expression, the value on the top of the stack is the result of the expression. Write a function `evaluate_rpn(expression)` that takes a string `expression` representing a mathematical expression in Reverse Polish Notation and returns the result of the evaluation. The expression can contain the following operators: `+`, `-`, `*`, and `/`. Each operand and operator are separated by a single space. The integer division should truncate toward zero. # Examples ```python evaluate_rpn(\\"2 1 + 3 *\\") # Output: 9 # Explanation: # Step 1: 2 (push 2 to stack) # Step 2: 1 (push 1 to stack) # Step 3: + (2 + 1 = 3; pop 2 and 1, push 3 to stack) # Step 4: 3 (push 3 to stack) # Step 5: * (3 * 3 = 9; pop both 3s, push 9 to stack) Final result: 9 evaluate_rpn(\\"4 13 5 / +\\") # Output: 6 # Explanation: # Step 1: 4 (push 4 to stack) # Step 2: 13 (push 13 to stack) # Step 3: 5 (push 5 to stack) # Step 4: / (13 / 5 = 2; pop 13 and 5, push 2 to stack) # Step 5: + (4 + 2 = 6; pop 4 and 2, push 6 to stack) Final result: 6 evaluate_rpn(\\"10 6 9 3 + -11 * / * 17 + 5 +\\") # Output: 22 # Explanation: # The expression evaluates to 10 * (6 / ((9 + 3) * -11)) + 17 + 5. # The intermediate steps include: # - Push 10, 6, 9, and 3 onto the stack. # - Add 9 and 3 to get 12. # - Push -11 onto the stack. # - Multiply 12 and -11 to get -132. # - Push 6 back onto the stack and divide 6 by -132 to get 0 (integer division truncates toward zero). # - Multiply 10 by 0 to get 0. # - Add 17 and 5 sequentially to get 22 as the final result. ``` # Constraints - The input string is a valid RPN expression. - The input string only contains numbers, spaces, and the operators `+`, `-`, `*`, `/`.","solution":"def evaluate_rpn(expression): Evaluates a mathematical expression in Reverse Polish Notation (RPN). stack = [] tokens = expression.split() for token in tokens: if token in {\'+\', \'-\', \'*\', \'/\'}: b = stack.pop() a = stack.pop() if token == \'+\': stack.append(a + b) elif token == \'-\': stack.append(a - b) elif token == \'*\': stack.append(a * b) elif token == \'/\': stack.append(int(a / b)) # using int() to truncate towards zero else: stack.append(int(token)) return stack.pop()"},{"question":"You are given a grid with n rows and m columns that contains non-negative integers. You have to process two types of queries: 1. SET x y val — set the value of the cell at row x and column y to val. 2. MAX x1 y1 x2 y2 — find the maximum value in the subgrid with the top-left corner at (x1, y1) and the bottom-right corner at (x2, y2). Print the answer of each MAX query. **Input** The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid, respectively. The next n lines contain m integers each, representing the initial values in the grid. The next line contains an integer q (1 ≤ q ≤ 10^4) — the number of queries. The following q lines contain the queries of either type SET or MAX, as described above. **Output** For each MAX query, print the maximum value in the specified subgrid. **Example** Input ``` 3 3 1 2 3 4 5 6 7 8 9 5 MAX 1 1 3 3 SET 2 2 10 MAX 1 1 3 3 MAX 2 2 3 3 SET 3 1 0 ``` Output ``` 9 10 10 ```","solution":"def process_queries(n, m, grid, queries): from functools import reduce def set_value(grid, x, y, val): grid[x-1][y-1] = val def max_in_subgrid(grid, x1, y1, x2, y2): return max([max(row[y1-1:y2]) for row in grid[x1-1:x2]]) results = [] for query in queries: tokens = query.split() if tokens[0] == \'SET\': x, y, val = int(tokens[1]), int(tokens[2]), int(tokens[3]) set_value(grid, x, y, val) elif tokens[0] == \'MAX\': x1, y1, x2, y2 = int(tokens[1]), int(tokens[2]), int(tokens[3]), int(tokens[4]) results.append(max_in_subgrid(grid, x1, y1, x2, y2)) return results"},{"question":"Write a function that accepts a string of digits and generates all possible valid IP address combinations that can be formed by inserting three dots into the string. An IP address consists of four integer numbers between 0 and 255, separated by dots (e.g., \'192.168.0.1\'). Do not use leading zeros unless the segment is exactly \'0\'. Function signature: ```python def generate_ip_addresses(s: str) -> List[str]: ``` Input: - `s` - a string containing only digits (1 ≤ |s| ≤ 12). Output: - A list of strings representing all valid IP address combinations. Example: ```python generate_ip_addresses(\\"25525511135\\") # Output: [\\"255.255.11.135\\", \\"255.255.111.35\\"] generate_ip_addresses(\\"0000\\") # Output: [\\"0.0.0.0\\"] generate_ip_addresses(\\"1111\\") # Output: [\\"1.1.1.1\\"] generate_ip_addresses(\\"010010\\") # Output: [\\"0.10.0.10\\", \\"0.100.1.0\\"] generate_ip_addresses(\\"101023\\") # Output: [\\"1.0.10.23\\", \\"1.0.102.3\\", \\"10.1.0.23\\", \\"10.10.2.3\\", \\"101.0.2.3\\"] ```","solution":"from typing import List def is_valid(segment: str) -> bool: Check if the segment is a valid IP address segment. An IP address segment is valid if: - It is not empty. - It does not have leading zeros unless it is \\"0\\". - It is a number between 0 and 255. return len(segment) > 0 and (segment == \\"0\\" or (segment[0] != \\"0\\" and 0 < int(segment) <= 255)) def generate_ip_addresses(s: str) -> List[str]: Generate all possible valid IP address combinations from a string of digits. def backtrack(start: int = 0, dots: int = 3, path: List[str] = []): if dots == 0: segment = s[start:] if is_valid(segment): result.append(\\".\\".join(path + [segment])) return for i in range(start, min(start + 3, len(s) - dots)): segment = s[start:i+1] if is_valid(segment): backtrack(i + 1, dots - 1, path + [segment]) result = [] backtrack() return result"},{"question":"Alex is fascinated by prime numbers. For his latest project, he wants to generate a matrix of positive integers where the sum of elements in each row, column, and both main diagonals are all prime numbers. Given an integer m, help Alex determine if it is possible to create such an m times m matrix that meets these criteria, and if so, provide one valid matrix. -----Input----- The input consists of a single integer m (2 leq m leq 50), which is the size of the matrix. -----Output----- If such a matrix is possible, output \\"YES\\" on the first line, and then the matrix of size m times m where each element is a positive integer, and the sum of the elements in each row, each column, and both main diagonals are prime numbers. If it is not possible to create such a matrix, output \\"NO\\". -----Examples----- Sample Input 1: 3 Sample Output 1: YES 2 2 3 3 5 2 3 2 2 Sample Input 2: 4 Sample Output 2: NO","solution":"import sympy def is_prime(n): Returns True if the given number n is prime, else False. return sympy.isprime(n) def find_prime_greater_than(n): Returns the smallest prime number greater than n. prime = n + 1 while not is_prime(prime): prime += 1 return prime def create_matrix(m): Returns a m x m matrix where the sum of elements in each row, column and both main diagonals are prime numbers, if possible. If not possible, returns \\"NO\\". if m == 2: return (False, \\"NO\\") # No solution for 2x2 matrix # Start with sum target for rows, columns, and diagonals prime_target = find_prime_greater_than(m*3) # to be more than trivial sums # Generate basic matrix, initially filling diagonals matrix = [[1]*m for _ in range(m)] # Adjust diagonal elements to meet the prime requirement for i in range(m): matrix[i][i] = prime_target for i in range(m): # Adjust the last row elements except one to meet the sum of each row matrix[m-1][i] = 1 if i < m-1 else prime_target - (matrix[m-1][i] * (m-1)) for i in range(m): # Adjust the last column elements except one to meet the sum of each column matrix[i][m-1] = 1 if i < m-1 else prime_target - (matrix[i][m-1] * (m-1)) return (True, matrix) def prime_matrix(m): possible, response = create_matrix(m) if not possible: return \\"NO\\" else: result = [\\"YES\\"] for row in response: result.append(\\" \\".join(map(str, row))) return \\"n\\".join(result) # Example usage: # print(prime_matrix(3)) # print(prime_matrix(4))"},{"question":"Given a set of integers n1, n2, ..., nm, you are to determine if there exists a non-empty subset of these integers whose sum is divisible by a given integer k. Input The first line of input contains two space-separated integers m and k (1 ≤ m ≤ 105, 1 ≤ k ≤ 109). The second line contains m space-separated integers n1, n2, ..., nm (1 ≤ ni ≤ 109). Output If such a subset exists, print \\"YES\\" (without quotes). Otherwise, print \\"NO\\" (without quotes). Examples Input 5 3 1 2 3 4 5 Output YES Input 4 10 6 2 5 8 Output NO Note In the first sample test, the subset {3} has a sum of 3 which is divisible by 3. In the second sample test, no subset of the given integers has a sum which is divisible by 10.","solution":"def subset_sum_divisible_by_k(m, k, nums): Determines if there exists a non-empty subset of the given integers whose sum is divisible by k. prefix_sum_mod_k = set() current_sum = 0 for num in nums: current_sum += num current_sum_mod_k = current_sum % k if current_sum_mod_k == 0: return \\"YES\\" if current_sum_mod_k in prefix_sum_mod_k: return \\"YES\\" prefix_sum_mod_k.add(current_sum_mod_k) return \\"NO\\""},{"question":"In this problem, you are given two strings s and t composed of lowercase English letters with length n. You can perform the following operations to transform string s into string t: 1. Choose any two distinct characters and swap all occurrences of these two characters in string s. For example, if you choose characters \'a\' and \'b\', all \'a\'s in s become \'b\' and all \'b\'s become \'a\'. 2. Reverse the entire string s. You need to determine the minimum number of operations required to transform string s into string t. If it is not possible to transform s into t, return -1. It can be proven that if a transformation is possible, it can be achieved in at most 2n operations. Input The first line contains a single integer t (1 <= t <= 100) – the number of test cases. Each of the following t lines contains a single test case consisting of two strings s and t, both of length n (1 <= n <= 1000). It is guaranteed that the sum of lengths of all strings across all test cases does not exceed 10000. Output For each test case, output the minimum number of operations required to transform s into t. If it is not possible, output -1. Example Input 4 abcd abcd abcd dcba abba baab aaaa bbbb Output 0 1 1 -1 Note In the first test case, strings s and t are already identical, so no operations are needed. In the second test case, reversing the string s gives t in one operation. In the third test case, swapping \'a\' and \'b\' transforms s to t in one operation. In the fourth test case, it is impossible to transform s into t using the allowed operations.","solution":"def min_operations_to_transform(s, t): Determines the minimum number of operations required to transform string s into string t. if sorted(s) != sorted(t): return -1 reverse_s = s[::-1] if reverse_s == t: return 1 if s == t: return 0 return 1 def process_test_cases(test_cases): results = [] for s, t in test_cases: results.append(min_operations_to_transform(s, t)) return results def main(input_list): t = int(input_list[0]) test_cases = [(input_list[i * 2 + 1], input_list[i * 2 + 2]) for i in range(t)] return process_test_cases(test_cases)"},{"question":"You are tasked with managing a digital library system that maintains information about books, authors, and publishers. The library system needs to provide functionality for adding new books, searching for books by various criteria, and getting statistics about the library\'s collection. Each book in the library is characterized by the following information: 1. Title 2. Author 3. Publisher 4. Year of publication 5. ISBN Each book is represented as a dictionary with the above attributes. Implement a DigitalLibrary class that supports the following methods: 1. `add_book(book)`: This method takes a dictionary representing a book and adds it to the library\'s collection. 2. `search_by_title(title)`: This method takes a title (or part of a title) and returns a list of books that contain the title as a substring. The search should be case-insensitive. 3. `search_by_author(author)`: This method takes an author\'s name (or part of it) and returns a list of books written by authors whose names contain the provided input as a substring. The search should be case-insensitive. 4. `search_by_publisher(publisher)`: This method takes a publisher\'s name (or part of it) and returns a list of books published by publishers whose names contain the provided input as a substring. The search should be case-insensitive. 5. `get_books_published_in_year(year)`: This method takes a year and returns a list of books published in that year. 6. `get_total_books()`: This method returns the total number of books in the library. Your task is to implement the DigitalLibrary class with the specified methods. # Input Format # - For the `add_book` method: A dictionary representing a book with the keys `title`, `author`, `publisher`, `year`, and `isbn`. - For the search methods: A string representing the title, author, or publisher (partially or fully). - For the `get_books_published_in_year` method: An integer representing the year of publication. - No parameters are required for `get_total_books`. # Output Format # The search methods and `get_books_published_in_year` return a list of dictionaries. If there are no matching books, return an empty list. The `get_total_books` method returns an integer. # Example # ```python library = DigitalLibrary() library.add_book({ \'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'publisher\': \'J.B. Lippincott & Co.\', \'year\': 1960, \'isbn\': \'978-0-06-112008-4\' }) library.add_book({ \'title\': \'1984\', \'author\': \'George Orwell\', \'publisher\': \'Secker & Warburg\', \'year\': 1949, \'isbn\': \'978-0-452-28423-4\' }) print(library.search_by_title(\'1984\')) # Output: [{\'title\': \'1984\', \'author\': \'George Orwell\', \'publisher\': \'Secker & Warburg\', \'year\': 1949, \'isbn\': \'978-0-452-28423-4\'}] print(library.search_by_author(\'Harper\')) # Output: [{\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'publisher\': \'J.B. Lippincott & Co.\', \'year\': 1960, \'isbn\': \'978-0-06-112008-4\'}] print(library.get_books_published_in_year(1960)) # Output: [{\'title\': \'To Kill a Mockingbird\', \'author\': \'Harper Lee\', \'publisher\': \'J.B. Lippincott & Co.\', \'year\': 1960, \'isbn\': \'978-0-06-112008-4\'}] print(library.get_total_books()) # Output: 2 ```","solution":"class DigitalLibrary: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def search_by_title(self, title): title_lower = title.lower() return [book for book in self.books if title_lower in book[\'title\'].lower()] def search_by_author(self, author): author_lower = author.lower() return [book for book in self.books if author_lower in book[\'author\'].lower()] def search_by_publisher(self, publisher): publisher_lower = publisher.lower() return [book for book in self.books if publisher_lower in book[\'publisher\'].lower()] def get_books_published_in_year(self, year): return [book for book in self.books if book[\'year\'] == year] def get_total_books(self): return len(self.books)"},{"question":"John has found a mysterious grid of characters. Each cell in the grid contains a lowercase English letter. John is fascinated with finding words in this grid by starting at any cell and moving in any of the 8 possible directions (left, right, up, down, and the four diagonals). He now seeks your help to determine if a specific word exists in this grid. The task is to write a program that, given a grid of characters and a target word, determines whether this word can be found in the grid following the above movement rules. If the word can be found, print \\"YES\\"; otherwise, print \\"NO\\". INPUT The first line contains two integers, R and C, which represent the number of rows and columns in the grid, respectively. The next R lines each contain a string of length C composed of lowercase English letters. The last line contains the target word to be searched in the grid. OUTPUT A single line containing \\"YES\\" or \\"NO\\". CONSTRAINTS 1 ≤ R, C ≤ 1000 1 ≤ Length of target word ≤ 1000 SAMPLE INPUT 4 4 abcf bdef dhag ehkf beak SAMPLE OUTPUT YES","solution":"def search_word_in_grid(grid, word): R = len(grid) C = len(grid[0]) word_len = len(word) # Directions: right, left, down, up, diagonals directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)] def is_valid(x, y): return 0 <= x < R and 0 <= y < C def search_from(x, y, word_index): if word_index == word_len: return True if not is_valid(x, y) or grid[x][y] != word[word_index]: return False saved_char = grid[x][y] grid[x][y] = \'#\' for dx, dy in directions: if search_from(x + dx, y + dy, word_index + 1): return True grid[x][y] = saved_char return False for row in range(R): for col in range(C): if grid[row][col] == word[0]: if search_from(row, col, 0): return \\"YES\\" return \\"NO\\" # Helper function to read input and invoke search_word_in_grid def word_search_in_grid(): import sys input = sys.stdin.read data = input().split() R = int(data[0]) C = int(data[1]) grid = [] index = 2 for _ in range(R): grid.append(list(data[index])) index += 1 word = data[index] print(search_word_in_grid(grid, word))"},{"question":"In the mystical realm of Atlantis, there exists an ancient legend about a hidden treasure buried deep within the city. To find this treasure, one must solve a challenging problem involving arrays and ranges. The High Council of Atlantis has tasked you with solving this problem. Given an array A consisting of N integers, you need to answer Q queries. Each query is of the form (L, R) and requires you to determine the sum of the elements in the subarray A[L..R] (inclusive). Input The first line of the input contains an integer N, the number of elements in array A. The second line contains N integers, the elements of array A. The third line contains an integer Q, the number of queries. Then follow Q lines, each containing two integers L and R representing the indices of the query range. Output For each query, output the sum of the elements in the subarray A[L..R]. Constraints 1 ≤ N ≤ 10^5 0 ≤ A[i] ≤ 10^9 1 ≤ Q ≤ 10^5 1 ≤ L ≤ R ≤ N SAMPLE INPUT 5 1 2 3 4 5 3 1 3 2 4 1 5 SAMPLE OUTPUT 6 9 15 Note: The indices in the input are 1-based, meaning that the first element of the array has index 1.","solution":"def get_prefix_sums(arr): This function returns the prefix sums of the input array. prefix_sums = [0] * (len(arr) + 1) for i in range(1, len(prefix_sums)): prefix_sums[i] = prefix_sums[i - 1] + arr[i - 1] return prefix_sums def query_sums(prefix_sums, l, r): This function returns the sum of the subarray from index l to r (inclusive) using the prefix sums array. return prefix_sums[r] - prefix_sums[l - 1] def find_subarray_sums(arr, queries): prefix_sums = get_prefix_sums(arr) results = [] for l, r in queries: results.append(query_sums(prefix_sums, l, r)) return results"},{"question":"In your town, there is an annual car rally where participants can join only if they have valid entry tickets. Each entry ticket has a unique registration number. Your task is to write a function that checks whether all the participants have unique registration numbers. The function\'s parameter will be an array of registration numbers (integers) assigned to each participant. Your \'areUnique\' function should return a boolean value — true if all registration numbers are unique, and false otherwise.","solution":"def areUnique(registration_numbers): Returns True if all registration numbers are unique, otherwise False. Args: registration_numbers (list of int): List of registration numbers. Returns: bool: True if all registration numbers are unique, False otherwise. return len(registration_numbers) == len(set(registration_numbers))"},{"question":"Linda is organizing a relay race where participants carry a baton around a circular track and hand it off to the next runner in line. The track is divided into N sections, forming a perfect circle. Each section has a number associated with it representing the distance (in meters) a runner must run in that section. To make the race more interesting, Linda decides to start from an arbitrary section S, not necessarily the first section. Furthermore, runners must complete the race such that they run exactly M meters in total before passing the baton to the next runner. The challenge is to determine if it is possible to find a sequence of consecutive sections starting from S such that the sum of their distances is equal to M. Write a function that, given the distances of each section and the starting section S (1-based index), determines if the race can be organized according to Linda\'s plan. -----Input----- The input consists of: - An integer N representing the number of sections. - An integer M representing the total distance to be run before passing the baton. - An integer S representing the starting section. - An array D of N integers, where D[i] represents the distance associated with the i-th section. The input satisfies the following constraints: [ 1 leq N leq 10^5, ] [ 1 leq D[i] leq 10^3, ] [ 1 leq M leq 10^6, ] [ 1 leq S leq N. ] -----Output----- If there exists a sequence of consecutive sections starting from S such that the sum of their distances equals M, print YES. Otherwise, print NO. -----Examples----- Sample Input: 5 10 3 [1, 2, 3, 4, 5] Sample Output: YES Sample Input: 4 15 1 [4, 3, 2, 1] Sample Output: NO","solution":"def can_complete_race(N, M, S, D): Determines if the race can be organized such that runners run exactly M meters starting from section S. :param N: Number of sections (int) :param M: Total distance to be run before passing the baton (int) :param S: Starting section (1-based index) (int) :param D: Array of distances (list of int) :return: \\"YES\\" if it is possible to find such sequence, otherwise \\"NO\\" (str) start_index = S - 1 # Convert to 0-based index current_sum = 0 visited = set() # Use sliding window technique to find the sequence for i in range(start_index, start_index + N): index = i % N current_sum += D[index] visited.add(index) while current_sum > M and len(visited) > 0: remove_index = min(visited) current_sum -= D[remove_index] visited.remove(remove_index) if current_sum == M: return \\"YES\\" return \\"NO\\""},{"question":"Charlie is a systems analyst working on optimizing file operations in a distributed computing environment. He needs to ensure that the files are evenly distributed across servers based on their load, which is measured by the number of files each server holds. Charlie has `m` servers and `n` files. Each file needs to be allocated to one of the servers such that the maximum number of files any single server holds is minimized. Charlie wants to understand the minimum possible value for this maximum number of files per server. For example, if there are `5` files and `3` servers, one optimal solution is to distribute 2 files to the first server, 2 files to the second server, and 1 file to the third server. Thus, the maximum number of files any single server holds is `2`. -----Input----- The input consists of: - One line with two integers `m` (1 le m le 10^5) and `n` (1 le n le 10^9), the number of servers and the number of files respectively. -----Output----- Output a single integer representing the minimum possible value for the maximum number of files any server holds. -----Examples----- Sample Input 1: 3 5 Sample Output 1: 2 Sample Input 2: 4 10 Sample Output 2: 3 Sample Input 3: 1 7 Sample Output 3: 7 Note: In this problem, the task is to balance the load as evenly as possible among the available servers. When distributing files, try to achieve the smallest difference between the most loaded server and the least loaded server.","solution":"def min_max_files_per_server(m, n): Returns the minimum possible value for the maximum number of files any single server holds. # If there are fewer files than servers, the max number files per server is 1. if n <= m: return 1 return (n + m - 1) // m # This is equivalent to ceiling division: math.ceil(n / m)"},{"question":"------Read problems statements in Mandarin chinese, Russian and Vietnamese as well. ------ Consider two sequences A and B of equal length N. Sequence A is initially set to [1, 2, ldots, N]. You are given Q queries. Each query falls into one of the following types: 1. `1 l r` — Find the sum of the elements in sequence A from position l to r (inclusive). 2. `2 l r` — For each position i where l ≤ i ≤ r, set A_{i} to B_{i}. 3. `3 l r x` — For each position i where l ≤ i ≤ r, set B_{i} to x. 4. `4 l r x` — Multiply each element in sequence A from position l to r by x. Can you efficiently handle these queries? ------ Input ------ The first line contains two space-separated integers N and Q. The second line contains N space-separated integers representing the initial values of sequence B. Each of the next Q lines describes a query of one of the four types mentioned above. ------ Output ------ For each query of the first type, print a single integer — the sum of the elements in the subsequence A_{l..r}. ------ Constraints ------ 1 ≤ N, Q ≤ 10^5 1 ≤ B_{i} ≤ 10^9 for each valid i |x| ≤ 10^9 1 ≤ l ≤ r ≤ N ------ Sample Input 1 ------ 5 4 3 6 2 7 5 1 1 3 2 2 4 3 1 2 10 4 3 5 2 ------ Sample Output 1 ------ 6 ------ Explanation 1 ------ Initially, A = [1, 2, 3, 4, 5] and B = [3, 6, 2, 7, 5]. - In the first query, we need to find the sum of A from position 1 to 3, which is 1 + 2 + 3 = 6. - After the second query, A = [1, 6, 2, 7, 5]. - After the third query, B = [10, 10, 2, 7, 5] (irrelevant to A at this point). - For the fourth query, multiply the elements of A from position 3 to 5 by 2, resulting in A = [1, 6, 4, 14, 10].","solution":"def process_queries(N, Q, B, queries): A = list(range(1, N+1)) results = [] for query in queries: query_type = query[0] if query_type == 1: l, r = query[1], query[2] sum_lr = sum(A[l-1:r]) results.append(sum_lr) elif query_type == 2: l, r = query[1], query[2] for i in range(l-1, r): A[i] = B[i] elif query_type == 3: l, r, x = query[1], query[2], query[3] for i in range(l-1, r): B[i] = x elif query_type == 4: l, r, x = query[1], query[2], query[3] for i in range(l-1, r): A[i] *= x return results def parse_input(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) Q = int(data[1]) B = list(map(int, data[2:N+2])) queries = [] index = N+2 for _ in range(Q): if data[index] == \\"1\\": queries.append((1, int(data[index+1]), int(data[index+2]))) index += 3 elif data[index] == \\"2\\": queries.append((2, int(data[index+1]), int(data[index+2]))) index += 3 elif data[index] == \\"3\\": queries.append((3, int(data[index+1]), int(data[index+2]), int(data[index+3]))) index += 4 elif data[index] == \\"4\\": queries.append((4, int(data[index+1]), int(data[index+2]), int(data[index+3]))) index += 4 return N, Q, B, queries if __name__ == \\"__main__\\": N, Q, B, queries = parse_input() results = process_queries(N, Q, B, queries) for result in results: print(result)"},{"question":"MightyHarvest has a grid of size n times n filled with zeros and ones. She wants to find the largest square subgrid that contains only ones. Can you help her determine the size of the largest square subgrid? -----Input----- The first line contains a single integer t (1 leq t leq 100) – the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 50) — the size of the grid. The next n lines contain n characters each (0 or 1) representing the grid. -----Output----- For each test case, output a single integer — the side length of the largest square subgrid that contains only ones. -----Examples----- Input 2 3 111 111 111 4 1100 1110 0111 0111 Output 3 2 -----Note----- In the first test case, the entire grid is filled with ones and the largest square subgrid is the grid itself with side length 3. In the second test case, the largest square subgrid that contains only ones is of side length 2.","solution":"def largest_square_subgrid(t, test_cases): results = [] for test_case in test_cases: n, grid = test_case dp = [[0] * (n + 1) for _ in range(n + 1)] max_side = 0 for i in range(1, n + 1): for j in range(1, n + 1): if grid[i-1][j-1] == \'1\': dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) results.append(max_side) return results # Example usage t = 2 test_cases = [ (3, [\\"111\\", \\"111\\", \\"111\\"]), (4, [\\"1100\\", \\"1110\\", \\"0111\\", \\"0111\\"]) ] print(largest_square_subgrid(t, test_cases)) # Output: [3, 2]"},{"question":"A bookshop management system needs to analyze sales data to determine the top-selling book of the day. Given sales records for the day, your task is to identify the book that was sold the most. If there are multiple books with the same highest sales, return any one of them. Each book is represented by an ID (a non-negative integer). You will receive the sales records as a list of these book IDs. -----Input----- The first line contains an integer n — the number of book sales records (1 ≤ n ≤ 10^5). The second line contains n space-separated integers b_1, b_2, ..., b_{n} (0 ≤ b_{i} ≤ 10^5) representing the book IDs that were sold. -----Output----- Print the ID of the book that was sold the most. If there are multiple such IDs, print any one of them. -----Examples----- Input 5 1 2 2 3 1 Output 1 Input 4 4 4 2 2 Output 4 Input 3 5 4 5 Output 5 -----Note----- In the first test, books with IDs 1 and 2 both appear twice, but since multiple valid outputs are allowed, you may print 1 or 2. In the second test, books with IDs 4 and 2 both appear twice, again, you may print either 4 or 2. In the third test, book with ID 5 appears twice, and book with ID 4 appears once, so the expected output is 5.","solution":"def top_selling_book(book_sales): Determines the top-selling book based on sales records. Parameters: book_sales (list): List of integers representing book IDs sold. Returns: int: ID of the book sold the most. If multiple books have the same highest sales, return any one of them. from collections import Counter sales_count = Counter(book_sales) top_selling = max(sales_count, key=sales_count.get) return top_selling"},{"question":"A company manages a series of parking lots, each with a different set of parking spaces available throughout the month. The availability of parking spaces varies from day to day, depending on events, maintenance, and other factors. You are given data about the availability of parking spaces for a number of parking lots over a month. Each parking lot has an identifier and an array showing the number of available spaces for each day of the month. Your task is to determine the maximum number of parking spaces available on any single day for each parking lot. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of parking lots. - The description of T parking lots follows. - The first line of each parking lot description contains an integer M, the number of days for which data is provided (1 ≤ M ≤ 30). - The second line of each parking lot description contains M space-separated integers, representing the number of available parking spaces for each day. ------ Output Format ------ For each parking lot, output a new line containing a single integer — the maximum number of parking spaces available on any day in that parking lot. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 30 0 ≤ text{parking spaces on any given day} ≤ 1000 ------ Sample Input 1 ------ 2 3 10 0 15 4 8 8 8 16 ------ Sample Output 1 ------ 15 16 ------ explanation 1 ------ Test Case 1: There are three days of data. The available spaces are 10, 0, and 15. The maximum number of available spaces on any day is 15. Test Case 2: There are four days of data. The available spaces are 8, 8, 8, and 16. The maximum number of available spaces on any day is 16.","solution":"def max_parking_spaces(T, parking_lot_data): Determines the maximum number of parking spaces available on any single day for each parking lot. Args: T (int): The number of parking lots. parking_lot_data (list of tuples): Each tuple contains M (int) and a list of M integers representing space availability. Returns: list: A list containing the maximum number of parking spaces available on any day for each parking lot. max_spaces = [] for data in parking_lot_data: M, spaces = data max_spaces.append(max(spaces)) return max_spaces"},{"question":"Alice has recently started learning about strings and their properties. She loves experimenting with various operations on strings and discovering new patterns. One day, she came across an interesting challenge where she needs to find the longest substring that contains at most two distinct characters. Help Alice solve this problem by writing a program that takes a string as input and returns the length of the longest substring containing at most two distinct characters. Input format: A single line containing a string of lowercase alphabets. Output format: Print the length of the longest substring that contains at most two distinct characters. Constraints: The input string will have a maximum length of 1000 characters. SAMPLE INPUT abcbbbbcccbdddadacb SAMPLE OUTPUT 10 Explanation The longest substring that contains at most two distinct characters is \\"bcbbbbcccb\\" which has a length of 10.","solution":"def longest_substring_two_distinct(s): Returns the length of the longest substring containing at most two distinct characters. if not s: return 0 start = 0 max_length = 0 char_map = {} for end in range(len(s)): char_map[s[end]] = char_map.get(s[end], 0) + 1 while len(char_map) > 2: char_map[s[start]] -= 1 if char_map[s[start]] == 0: del char_map[s[start]] start += 1 max_length = max(max_length, end - start + 1) return max_length"},{"question":"You\'re given a collection of books, and you need to organize them in your bookstore by a specific order. Each book has a unique identifier, a genre, and a popularity score. Readers are most interested in the most popular books from each genre. Ideally, you want to display the most popular books first in each genre section. However, in case of a tie in popularity scores, books should be sorted by their unique identifiers in ascending order. Write a program that, given a list of books with their genres and popularity scores, outputs the organized list, sorted first by genre, then by popularity score in descending order, and finally by the book identifier in ascending order. Input: - The first line contains an integer T, denoting the number of test cases. - For each test case, the first line contains an integer N, the number of books. - The next N lines each contain a string representing the genre, an integer representing the unique book identifier, and an integer representing the popularity score. Output: - For each test case, print the organized list of books. - Each book should be printed in a new line with its genre, identifier, and popularity score separated by spaces. - Genres should be separated by an empty line between them in the output of each test case. Constraints: - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 100 Sample Input: 2 3 Fantasy 3 90 Science 1 85 Fantasy 2 95 2 Romance 5 80 Romance 3 80 Sample Output: Fantasy 2 95 Fantasy 3 90 Science 1 85 Romance 3 80 Romance 5 80 Explanation: In the first test case, the books are first grouped by genre. Within each genre, the books are sorted by popularity in descending order. For Fantasy, the book with identifier 2 has a higher popularity score than the book with identifier 3, hence it appears first. In the second test case, both books have the same popularity score, so they are sorted by their unique identifier in ascending order.","solution":"def organize_books(T, test_cases): def sort_books(books): books.sort(key=lambda x: (-x[2], x[1])) return books results = [] for i in range(T): N, books_data = test_cases[i] genres = {} for data in books_data: genre, book_id, popularity_score = data if genre not in genres: genres[genre] = [] genres[genre].append((genre, book_id, popularity_score)) sorted_genres = sorted(genres.keys()) for genre in sorted_genres: sorted_books = sort_books(genres[genre]) results.extend([f\\"{book[0]} {book[1]} {book[2]}\\" for book in sorted_books]) results.append(\\"\\") return \\"n\\".join(results).strip() # To read input (assuming input will be given as a list of tuples for test cases) def read_input(input_data): lines = input_data.strip().splitlines() idx = 0 T = int(lines[idx]) idx += 1 test_cases = [] for _ in range(T): N = int(lines[idx]) idx += 1 books_data = [] for _ in range(N): data = lines[idx].split() genre = data[0] book_id = int(data[1]) popularity_score = int(data[2]) books_data.append((genre, book_id, popularity_score)) idx += 1 test_cases.append((N, books_data)) return T, test_cases"},{"question":"Given two binary trees, you need to check if they are mirror images of each other. Two binary trees are considered mirrors if left and right children of one tree are structurally identical to right and left children of the other tree respectively. Example 1: Input: Tree 1: 1 / 2 3 Tree 2: 1 / 3 2 Output: True Explanation: Tree 1 and Tree 2 are mirror images of each other. Example 2: Input: Tree 1: 1 / 2 3 4 Tree 2: 1 / 3 2 / 4 Output: False Explanation: Tree 1 and Tree 2 are not mirror images of each other. Your Task: The task is to complete the function `areMirror(root1, root2)` that takes the roots of both binary trees as input and returns true if the trees are mirror images of each other, otherwise false. Expected Time Complexity: O(N) Expected Auxiliary Space: O(H) where H is the height of the tree Constraints: 1 <= Number of nodes <= 1000","solution":"class TreeNode: def __init__(self, value=0, left=None, right=None): self.value = value self.left = left self.right = right def areMirror(root1, root2): Check if two binary trees are mirror images of each other. # If both trees are empty, they are mirrors of each other if root1 is None and root2 is None: return True # If only one of the trees is empty, then they are not mirrors if root1 is None or root2 is None: return False # Both nodes should have the same value and the left subtree of root1 # should be a mirror of the right subtree of root2 and vice versa. return (root1.value == root2.value and areMirror(root1.left, root2.right) and areMirror(root1.right, root2.left))"},{"question":"You are given two non-empty binary trees representing two non-negative integers. The digits are stored in level-order traversal, where each node contains a single digit. The task is to add the two numbers and return the sum as a new binary tree using the same level-order traversal. Note: The binary trees are represented in a 0-indexed array form where the left child of a node at index i is at index 2*i + 1 and the right child is at index 2*i + 2. If a node is `None`, it is represented in the array as `-1`. Example: Input: 2 3 4 -1 3 3 5 6 -1 2 1 1 2 9 9 Output: 9 6 3 0 1 Explanation: Testcase 1: The first binary tree is: 4 3 + 5 / 6 (-1) The resultant binary tree is: 9 / 6 3 Testcase 2: The first binary tree is: 1 / 1 + 9 / 9 The resultant binary tree is: 0 / 1 1 Input: The first line of input contains an integer T denoting the number of test cases. Each test case consists of four lines. The first line of each test case contains an integer N denoting the size of the first binary tree array. The second line contains the space-separated values of the first binary tree. The third line contains an integer M denoting the size of the second binary tree array. The fourth line contains space-separated values of the second binary tree. Output: For each test case output an array representing the binary tree sum in level-order traversal. Your Task: The task is to complete the function addTwoBinaryTrees() which should add the given two binary trees and return the result in the form of a new binary tree in level-order traversal. Constraints: 1 <= T <= 100 1 <= N, M <= 100","solution":"def add_two_binary_trees(t1, t2): Adds two binary trees represented as level-order arrays. Handles cases where trees have different sizes and node values of -1 (None nodes). max_len = max(len(t1), len(t2)) t1 += [-1] * (max_len - len(t1)) t2 += [-1] * (max_len - len(t2)) result = [] for i in range(max_len): if t1[i] == -1 and t2[i] == -1: result.append(-1) elif t1[i] == -1: result.append(t2[i]) elif t2[i] == -1: result.append(t1[i]) else: result.append(t1[i] + t2[i]) return result def process_input_output(input_data): Processes input according to the problem statement. results = [] lines = input_data.strip().split(\'n\') T = int(lines[0]) index = 1 for _ in range(T): N = int(lines[index]) t1 = list(map(int, lines[index + 1].split())) M = int(lines[index + 2]) t2 = list(map(int, lines[index + 3].split())) index += 4 result = add_two_binary_trees(t1, t2) results.append(result) return results"},{"question":"Design and implement a scheduling algorithm for a set of independent tasks that must be executed by a single processor. Each task has a start time and a finish time, and only one task can be executed at a time. The goal is to maximize the number of non-overlapping tasks that can be scheduled. Input The input consists of multiple test cases. Each test case follows this format: - The first line contains an integer T, the number of tasks. - The next T lines each contain two integers, the start and finish times of each task. The end of input is indicated by a single line containing the number 0. Output For each test case, output the maximum number of non-overlapping tasks that can be scheduled. Constraints - 1 ≤ T ≤ 100 - 0 ≤ start_time < finish_time ≤ 1000 - The number of test cases does not exceed 1,000 Example Input 5 1 3 2 5 4 6 7 8 5 9 3 4 5 1 2 3 4 6 1 2 2 3 3 4 4 5 5 6 6 7 0 Output 3 3 6","solution":"def max_non_overlapping_tasks(tasks): Given a list of tasks with start and finish times, returns the maximum number of non-overlapping tasks that can be scheduled. # Sort tasks based on finishing times. If the finish times are the same, sort by start times. sorted_tasks = sorted(tasks, key=lambda x: (x[1], x[0])) # Initialize count of non-overlapping tasks count = 0 # Initialize the end time of the last selected task last_end_time = -1 for start, finish in sorted_tasks: # If the current task starts after the last selected task ends, it can be scheduled if start >= last_end_time: count += 1 last_end_time = finish return count def process_input(input_data): Processes the input data and returns the results for each test case. results = [] lines = input_data.strip().split(\\"n\\") i = 0 while i < len(lines): T = int(lines[i]) if T == 0: break i += 1 tasks = [] for _ in range(T): start, finish = map(int, lines[i].strip().split()) tasks.append((start, finish)) i += 1 results.append(max_non_overlapping_tasks(tasks)) return results"},{"question":"A company wants to optimize the layout of its warehouse. The warehouse can be visualized as a grid with dimensions R x C where R is the number of rows and C is the number of columns. Certain cells are designated as shelves and cannot be traversed. The remaining cells are open space and can be moved through. The goal is to find the shortest path from the top-left corner of the grid (cell (1, 1)) to the bottom-right corner (cell (R, C)) while avoiding the shelves. If there is no valid path, return -1. You need to write a function to find the shortest path. Constraints: * 1 leq R, C leq 1000 * Each character in the grid is either \'S\' (shelf) or \'O\' (open space). Input The input is given from Standard Input in the following format: R C grid_1 grid_2 : grid_R Each of the lines grid_1, grid_2, ..., grid_R contains C characters where each character is either \'S\' or \'O\'. Output Print the length of the shortest path from cell (1, 1) to cell (R, C). If there is no valid path, print -1. Examples Input 5 5 OOOOO OSSSO OOOOO OSSSO OOOOO Output 8 Input 3 3 OSO SSO OSO Output -1","solution":"from collections import deque def shortest_path(R, C, grid): # Helper to check if a cell is within grid bounds and not a shelf def is_valid(x, y): return 0 <= x < R and 0 <= y < C and grid[x][y] == \'O\' # Directions for moving in the grid directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Starting point start = (0, 0) end = (R-1, C-1) # Check initial and final position validity if not is_valid(*start) or not is_valid(*end): return -1 # BFS setup queue = deque([(0, 0, 0)]) # (row, column, distance) visited = set() visited.add((0, 0)) while queue: x, y, dist = queue.popleft() # If we reach the end if (x, y) == end: return dist # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return -1 # No valid path found # Example usage: # R, C = 5, 5 # grid = [ # \'OOOOO\', # \'OSSSO\', # \'OOOOO\', # \'OSSSO\', # \'OOOOO\' # ] # print(shortest_path(R, C, grid)) # Output should be 8"},{"question":"# Description: A company wants to organize a team-building exercise for its employees. The employees will be divided into teams such that each team has an equal number of members. The team size must be the largest possible that is a factor of the total number of employees. Given the number of employees in the company, write a function that returns the largest possible team size and the number of teams formed. Some examples: ``` employees = 100 largest team size: 50 number of teams: 2 So, we need to return: [50, 2] largestTeamSize(100) === [50, 2] employees = 12 largest team size: 6 number of teams: 2 So, we need to return: [6, 2] largestTeamSize(12) === [6, 2] employees = 17 largest team size: 1 number of teams: 17 So, we need to return: [1, 17] largestTeamSize(17) === [1, 17] ``` Function Signature: ```python def largestTeamSize(employees: int) -> List[int]: # Your code here ```","solution":"from typing import List def largestTeamSize(employees: int) -> List[int]: Returns the largest possible team size and the number of teams formed. Parameters: employees (int): The total number of employees. Returns: List[int]: A list with two elements, the largest possible team size and the number of teams. for team_size in range(employees // 2, 0, -1): if employees % team_size == 0: return [team_size, employees // team_size] return [1, employees]"},{"question":"In a distant galaxy, there exists a highly advanced species called the Robolons. These beings communicate through light patterns emitted from their bodies. Each Robolon has a unique set of light sequences they use for different messages. You have been tasked with decoding a specific message pattern to understand what it means. The Robolons use a binary string, where \'0\' represents an \\"OFF\\" state and \'1\' represents an \\"ON\\" state. The message you need to decode is a series of these binary strings. However, the Robolons have a peculiar way of modifying their messages for security; they insert noise into their binary strings, which is represented by randomly flipping bits (changing a \'0\' to \'1\' or a \'1\' to \'0\'). Your task is to determine the exact pattern of the original message if you are given the binary string with some noise. Specifically, you will receive multiple measurements of the same binary string with noise introduced in each one, and you need to deduce the most likely original message. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000) – the length of the binary string and the number of noisy measurements respectively. The next m lines each contain a binary string of length n, which represent the noisy measurements. Output Print a single binary string of length n, which is the most probable original message based on the noisy measurements. Examples Input 5 3 10101 11100 10100 Output 10100 Input 4 2 0001 0011 Output 0001 Note In the first example, the original message is most likely \\"10100\\", as that is the pattern that occurs most frequently. In the second example, the original message is most likely \\"0001\\", as it is closest to both the given measurements, differing by the least number of bits.","solution":"def decode_message(n, m, measurements): Determine the most probable original message from noisy measurements. Parameters: - n (int): The length of the binary string. - m (int): The number of noisy measurements. - measurements (list of str): The noisy binary strings. Returns: - str: The most probable original message. from collections import Counter # Initialize the count arrays for each bit position bit_count = [[0, 0] for _ in range(n)] # Count the occurrences of \'0\' and \'1\' at each bit position for measurement in measurements: for idx, char in enumerate(measurement): bit_count[idx][int(char)] += 1 # Determine the most common bit at each position original_message = \'\'.join(\'1\' if bit_count[idx][1] > bit_count[idx][0] else \'0\' for idx in range(n)) return original_message"},{"question":"A research team in a laboratory is studying the growth patterns of bacteria cultures. Each culture\'s growth is measured in terms of population size over several days. The team wants to determine how many days each culture\'s population exceeded a specified threshold. Given the population sizes of several bacteria cultures over a number of days, help the researchers find out how many days each culture\'s population was above a given threshold. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains two integers N and K, where N is the number of days and K is the population threshold. - The second line of each test case contains N space-separated integers P_{1}, P_{2},..., P_{N}, representing the population sizes of the culture over the N days. ------ Output Format ------ For each test case, output in a single line the number of days the culture\'s population size was above the threshold. ------ Constraints ------ 1 ≤ T ≤ 20 1 ≤ N ≤ 100 1 ≤ K ≤ 100 1 ≤ P_{i} ≤ 100 ----- Sample Input 1 ------ 2 5 50 10 60 45 70 30 4 25 20 30 25 40 ----- Sample Output 1 ------ 2 2 ----- explanation 1 ------ Test Case 1: Out of the 5 days, only the 2^{nd} and 4^{th} days had populations (60 and 70) greater than the threshold of 50. Hence the answer is 2. Test Case 2: Out of the 4 days, only the 2^{nd} and 4^{th} days had populations (30 and 40) greater than the threshold of 25. Hence the answer is 2.","solution":"def count_days_above_threshold(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] populations = test_cases[i][1] count = sum(1 for population in populations if population > K) results.append(count) return results"},{"question":"Given a grid of size m x n where each cell represents a coin with a value (an integer). Starting from the top-left cell, your task is to reach the bottom-right cell collecting the maximum value of coins along the way. You can only move right or down at each step. Write a function `maxCoinValue(Collection grid[][])`, where grid is a 2D array of integers representing the value of coins in each cell. The function should return the maximum value of coins that can be collected. Example 1: Input: grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] Output: 12 Explanation: The path (0,0) -> (0,1) -> (0,2) -> (0,3) -> (1,3) -> (2,3) collects the maximum coins of value 12. Example 2: Input: grid = [ [1, 2, 5], [3, 2, 1] ] Output: 9 Explanation: The path (0, 0) -> (0, 1) -> (1, 1) -> (1, 2) collects the maximum coins of value 9. Your Task: You don\'t need to read input or print anything. Your task is to implement the function `maxCoinValue()` which takes the grid as input and returns an integer representing the maximum value of coins that can be collected. Expected Time Complexity: O(m * n) Expected Auxiliary Space: O(m * n) Constraints: - 1 <= m, n <= 100 - -100 <= grid[i][j] <= 100","solution":"def maxCoinValue(grid): if not grid or not grid[0]: return 0 m, n = len(grid), len(grid[0]) dp = [[0] * n for _ in range(m)] dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column for i in range(1, m): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[m - 1][n - 1]"},{"question":"You are given a list of integers. Write a function called `find_missing_number(arr)` that takes in the list and returns the single missing number in a sequence ranging from 1 to n+1, where n is the length of the input list. The input list is guaranteed to contain no duplicates and have exactly one number missing from the sequence. **Example**: ```python find_missing_number([1, 2, 4, 5, 6]) # should return 3 find_missing_number([3, 7, 1, 2, 8, 4, 5]) # should return 6 ``` **Note**: Do not use any in-built functions that perform this task directly. Use a mathematical approach to derive the solution.","solution":"def find_missing_number(arr): Finds the single missing number in a sequence ranging from 1 to n+1, where n is the length of the input list. Args: arr (list): The input list of integers. Returns: int: The missing number. n = len(arr) + 1 total_sum = n * (n + 1) // 2 actual_sum = sum(arr) return total_sum - actual_sum"},{"question":"You are hired by a robotics company to develop an algorithm for navigating a robot through a 2D grid. The robot starts at the top-left corner of the grid, filled with integers, and you can move it to the right or downward. The robot aims to collect as much value as possible, and you need to calculate the maximum sum of the values it can collect by the time it reaches the bottom-right corner of the grid. Input: - The first line contains two integers, `M` and `N`, representing the number of rows and columns in the grid, respectively. - The next `M` lines each contain `N` integers, representing the values in the grid. Output: - A single integer representing the maximum sum of the values collected by the robot on its path from the top-left corner to the bottom-right corner of the grid. Constraints: - 1 ≤ M, N ≤ 100 - -100 ≤ value in the grid ≤ 100 SAMPLE INPUT: 3 3 1 -3 4 2 0 6 -1 4 3 SAMPLE OUTPUT: 12 Explanation: The optimal path for maximum sum is `1 -> 2 -> 4 -> 3 -> 6`. The sum of these values is `1 + 2 + 4 + 6 + 3 = 12`.","solution":"def max_value_path(grid): Calculate the maximum sum of the values collected by the robot as it moves from the top-left to the bottom-right corner of the grid. M = len(grid) N = len(grid[0]) # Initialize a DP table with the same dimensions as the grid dp = [[0] * N for _ in range(M)] # Fill in the DP table dp[0][0] = grid[0][0] # Fill the first row (only one way to get to each cell) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (only one way to get to each cell) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, M): for j in range(1, N): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The value at the bottom-right corner is the result return dp[M-1][N-1] # Function to read input and output the result def main(): import sys input = sys.stdin.read data = input().split() M = int(data[0]) N = int(data[1]) grid = [] idx = 2 for _ in range(M): row = [] for _ in range(N): row.append(int(data[idx])) idx += 1 grid.append(row) result = max_value_path(grid) print(result)"},{"question":"Angela is learning about string manipulation and has been given a sequence of operations to perform on a string s. The operations include: 1. Reversing the entire string. 2. Removing a specified character from the string. 3. Counting the occurrences of a specified character in the string. Given a string s and an array of operations, help Angela find the result after applying each operation in the given order. # Input - The first line contains the initial string s (1 ≤ |s| ≤ 105). - The second line contains an integer k (1 ≤ k ≤ 105), the number of operations. - The next k lines each contain an operation in one of the following three formats: - \\"reverse\\" to reverse the entire string. - \\"remove c\\" where c is a character to remove all its occurrences from the string. - \\"count c\\" where c is a character to count its occurrences in the current string. # Output - For each \\"count c\\" operation, print the count of character c in the current string after processing all previous operations. # Examples Input ``` abacaba 5 count a remove a count a reverse count b ``` Output ``` 4 0 2 ```","solution":"def perform_operations(s, operations): result = [] for operation in operations: if operation.startswith(\\"reverse\\"): s = s[::-1] elif operation.startswith(\\"remove\\"): _, char_to_remove = operation.split() s = s.replace(char_to_remove, \\"\\") elif operation.startswith(\\"count\\"): _, char_to_count = operation.split() result.append(s.count(char_to_count)) return result"},{"question":"John and Smith are playing a number guessing game. John picks a random number `num` between a given range `low` and `high` (inclusive) and Smith has to guess it. John will only tell Smith if his guess is \\"Too low\\", \\"Too high\\", or \\"Correct\\". Given the range and the strategy Smith uses to guess the number, determine the maximum number of guesses Smith would need to find the correct number based on his strategy. Smith employs a binary search strategy to guess the number. This strategy involves guessing the midpoint of the current range and adjusting the range based on John\'s feedback. ---Input--- The first line contains two integers `low` and `high` (0 le text{low} < text{high} le 10^9) — the range in which John picks the number. ---Output--- Print one integer — the maximum number of guesses Smith would need to correctly guess the number using the binary search strategy. ---Example--- Input: 1 100 Output: 7 Input: 0 10 Output: 4 ---Note--- In the first example, with `low` as 1 and `high` as 100, the sequence of guesses Smith would make is: - Guess 50 (too high) - Guess 25 (too high) - Guess 12 (too high) - Guess 6 (too high) - Guess 3 (too high) - Guess 1 (too low) - Guess 2 (correct) This gives a maximum of 7 guesses. In the second example, with `low` as 0 and `high` as 10, the sequence of guesses Smith would make is: - Guess 5 (too high) - Guess 2 (too low) - Guess 3 (too low) - Guess 4 (correct) This gives a maximum of 4 guesses.","solution":"import math def max_guesses_needed(low, high): Returns the maximum number of guesses needed for a binary search strategy between the given low and high inclusive. return math.ceil(math.log2(high - low + 1))"},{"question":"Write a function that calculates the sum of all prime numbers up to and including a given number `n`. A prime number is only divisible by 1 and itself, and 1 is not considered a prime number. The input `n` will always be a positive integer. Examples: ``` sumOfPrimes(10); // 17 (2 + 3 + 5 + 7) sumOfPrimes(20); // 77 (2 + 3 + 5 + 7 + 11 + 13 + 17 + 19) sumOfPrimes(1); // 0 (since there are no prime numbers less than or equal to 1) ``` Function signature: ```python def sumOfPrimes(n: int) -> int: pass ```","solution":"def sumOfPrimes(n: int) -> int: Returns the sum of all prime numbers up to and including n. if n < 2: return 0 def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True prime_sum = 0 for i in range(2, n + 1): if is_prime(i): prime_sum += i return prime_sum"},{"question":"Given two strings `s` and `t`, your task is to determine if `t` is an anagram of `s`. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Input - Two strings `s` and `t` consisting only of lowercase English letters. Output - Return `true` if `t` is an anagram of `s`, and `false` otherwise. Examples ``` Input: s = \\"anagram\\", t = \\"nagaram\\" Output: true Input: s = \\"rat\\", t = \\"car\\" Output: false ``` Constraints - Both strings will have a length in the range `[1, 10^5]`. Remark Consider utilizing efficient counting or hashing strategies to determine anagram status, as long as it adheres to the constraints.","solution":"def is_anagram(s, t): Determines if t is an anagram of s. # One way to determine if two strings are anagrams is to count the occurrences of each character in both strings # and compare the counts. If both strings have identical counts for each character, then they are anagrams. if len(s) != len(t): return False count_s = {} count_t = {} for char in s: count_s[char] = count_s.get(char, 0) + 1 for char in t: count_t[char] = count_t.get(char, 0) + 1 return count_s == count_t"},{"question":"A company has a binary stream generator that can generate a stream of binary digits (0s and 1s). They use this stream for encoding some data. They need your help to analyze the binary stream by finding the length of the longest contiguous subarray of 1s surrounded by 0s on both sides. If the stream starts and/or ends with 1s and these are part of the longest contiguous subarray of 1s, consider the length without the surrounding 0s. If there is no subarray that meets the criteria, return 0. Input: First line contains integer T, number of test cases. Next T lines each contain a binary string S. Output: For each test case, print the length of the longest contiguous subarray of 1s surrounded by 0s. Constraints: 1 ≤ T ≤ 10^5 1 ≤ length of S ≤ 10^6 SAMPLE INPUT 2 0101010 110111011 SAMPLE OUTPUT 1 3 Explanation Test case 1: The longest contiguous subarray of 1s surrounded by 0s is either \\"010\\" or \\"101\\". Both have a length of 1. Test case 2: The longest contiguous subarray of 1s surrounded by 0s is \\"110111011\\". Here, the subarray \\"01110\\" has the maximum length of 3. Note that the initial and final 1s are not considered as they are not surrounded by 0s.","solution":"def longest_contiguous_ones_surrounded_by_zeros(s): Returns the length of the longest contiguous subarray of 1s surrounded by 0s on both sides. max_len = 0 current_len = 0 in_subarray = False for char in s: if char == \'1\': if in_subarray: current_len += 1 else: # If we encounter 1 after a 0, start the subarray in_subarray = True current_len = 1 elif char == \'0\': if in_subarray: # If subarray ended, update max_len if current_len is greater if current_len > max_len: max_len = current_len in_subarray = False return max_len def solve(test_cases): results = [] for s in test_cases: longest_1s_len = longest_contiguous_ones_surrounded_by_zeros(s) results.append(longest_1s_len) return results"},{"question":"You are given a string s of length n. Your task is to determine the length of the longest palindrome that can be formed using characters of the string s. A palindrome is a string that reads the same backwards as forwards (e.g., \\"abba\\" or \\"racecar\\"). -----Input----- The first line contains one integer t (1 le t le 100) — number of test cases. Next 2 cdot t lines contain t test cases: The first line of a test case contains one integer n (1 le n le 100) — the length of the string s. The second line of a test case contains one string s of length n consisting of lowercase Latin letters. -----Output----- For each test case, print the answer (that is, the length of the longest palindrome that can be formed using characters of the string s) on a separate line. -----Examples----- Input 3 5 aabbc 6 abcdef 4 aaaa Output 5 1 4 -----Note----- In the first test case of the example: The longest palindrome that can be formed using the characters of the string \\"aabbc\\" is \\"abcba\\" or \\"bacab\\", both of which have a length of 5. In the second test case of the example: None of the characters repeat, so the longest palindrome that can be formed is any single character, which has a length of 1. In the third test case of the example: The entire string \\"aaaa\\" is already a palindrome with a length of 4.","solution":"def longest_palindrome_length(t, test_cases): from collections import Counter results = [] for n, s in test_cases: freq = Counter(s) length = 0 odd_found = False for count in freq.values(): if count % 2 == 0: length += count else: length += count - 1 odd_found = True if odd_found: length += 1 results.append(length) return results"},{"question":"Given a list of integers, return the greatest common divisor (GCD) of the elements in the list. Write a function to implement this logic. The greatest common divisor (GCD) of two or more integers is the largest positive integer that divides each of the integers without a remainder. Example:- Input: 3 [2, 4, 6] [7, 14, 21] [10, 20, 40] Output: 2 7 10 Your task: Complete the function `findGCD()` which takes a list of integers as input and returns an integer representing the GCD of the list. Constraints: 1 <= T <= 50 1 <= |list| <= 100 1 <= list[i] <= 10^5","solution":"from math import gcd from functools import reduce def findGCD(arr): Returns the GCD of a list of integers. return reduce(gcd, arr)"},{"question":"You are given a binary grid of size M x N, consisting of only 0s and 1s. Your task is to find the largest square containing only 1s and return its area. ------ Input ------ The first line of input contains an integer T, denoting the number of test cases. The description of each test case follows. The first line of each test case contains two integers M and N, denoting the number of rows and columns of the grid. Each of the next M lines contains N space-separated integers (either 0 or 1) representing the grid. ------ Output ------ For each testcase, output a single integer in a new line, which should be the area of the largest square consisting only of 1s. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M, N ≤ 1000 0 ≤ grid[i][j] ≤ 1 1 ≤ Sum of (M * N) over all test cases ≤ 10^6 ------ Subtasks ------ Subtask #1 (50 points): Sum of (M * N) ≤ 10^4 Subtask #2 (50 points): Original constraints ----- Sample Input 1 ------ 1 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 ----- Sample Output 1 ------ 4 ----- Explanation 1 ------ The largest square containing only 1s has a side length of 2, and hence its area is 2 * 2 = 4.","solution":"def maximalSquare(matrix): if not matrix or not matrix[0]: return 0 M, N = len(matrix), len(matrix[0]) dp = [[0] * N for _ in range(M)] max_side = 0 for i in range(M): for j in range(N): if matrix[i][j] == 1: if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side * max_side def find_maximal_squares(testcases): results = [] for case in testcases: M, N, grid = case[\'M\'], case[\'N\'], case[\'grid\'] results.append(maximalSquare(grid)) return results"},{"question":"You are given an integer n and an array of n integers arr. Your task is to determine if the array is a palindrome. A palindrome is a sequence that reads the same backward as forward. -----Constraints----- - 1 ≤ n ≤ 100 - -1000 ≤ arr[i] ≤ 1000 (0 ≤ i < n) -----Input----- Input is given from Standard Input in the following format: n arr_0 arr_1 ... arr_(n-1) -----Output----- Print \\"YES\\" if the array is a palindrome. Otherwise, print \\"NO\\". -----Sample Input----- 5 1 2 3 2 1 -----Sample Output----- YES The array [1, 2, 3, 2, 1] reads the same backward as forward, hence it is a palindrome. -----Sample Input----- 4 1 2 3 4 -----Sample Output----- NO The array [1, 2, 3, 4] does not read the same backward as forward, hence it is not a palindrome.","solution":"def is_palindrome(n, arr): Returns \\"YES\\" if the array is a palindrome, otherwise \\"NO\\". if arr == arr[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"John is planning a hike in a mountainous region and he needs to keep track of the altitude changes during his hike. He carefully notes the altitude at each waypoint. Given the altitudes recorded at each waypoint, determine the maximum difference in altitude between any two waypoints that John visited. ------ Input Format ------ - The first line of input will contain a single integer T, the number of test cases. Then the test cases follow. - The first line of each test case contains a single integer N, the number of waypoints. - The second line of each test case contains N integers, representing the altitudes at the N waypoints. ------ Output Format ------ For each test case, print in a single line the maximum difference in altitude between any two waypoints. ------ Constraints ------ 1 ≤ T ≤ 10 2 ≤ N ≤ 100 0 ≤ texttt{altitude} ≤ 10^4 ----- Sample Input 1 ------ 2 5 100 200 150 500 300 3 50 300 150 ----- Sample Output 1 ------ 400 250 ----- Explanation 1 ------ Test case 1: The maximum difference in altitude is 500 - 100 = 400. Test case 2: The maximum difference in altitude is 300 - 50 = 250.","solution":"def maximum_altitude_difference(test_cases): Given multiple test cases with the number of waypoints and their respective altitudes, calculates the maximum difference in altitude between any two waypoints for each test case. results = [] for case in test_cases: N, altitudes = case max_altitude = max(altitudes) min_altitude = min(altitudes) max_difference = max_altitude - min_altitude results.append(max_difference) return results"},{"question":"You are given an array of n integers. The array is called \\"wave\\" if the following conditions hold for every index i (1 <= i <= n-1): 1. If i is odd, then the array element at i should be greater than the array element at i+1. 2. If i is even, then the array element at i should be less than the array element at i+1. Your task is to convert a given array into a \\"wave\\" array by rearranging its elements. If there are multiple solutions, any rearrangement meeting the above conditions is acceptable. Input The first line contains an integer n (1 <= n <= 10^5) — the size of the array. The second line contains n integers separated by a space (1 <= element <= 10^6) — the elements of the array. Output Output a single line consisting of n integers representing the resulting \\"wave\\" array. Example Input 5 1 3 4 2 5 Output 3 1 4 2 5 Input 4 1 2 3 4 Output 2 1 4 3 Note In the given examples, the output arrays satisfy the wave conditions: - In the first example, 3 > 1, 1 < 4, 4 > 2, 2 < 5. - In the second example, 2 > 1, 1 < 4, 4 > 3.","solution":"def wave_array(arr): Rearranges an array into a wave-like pattern. Parameters: arr (list): The input list of integers. Returns: list: The rearranged list in wave form. # Sort the array arr.sort() # Swap every adjacent pair for i in range(0, len(arr) - 1, 2): arr[i], arr[i + 1] = arr[i + 1], arr[i] return arr # Example to run the wave_array function if __name__ == \\"__main__\\": n = int(input().strip()) arr = list(map(int, input().strip().split())) result = wave_array(arr) print(\\" \\".join(map(str, result)))"},{"question":"You are given an array of integers, nums, of length n. Determine if it is possible to rearrange the elements of the array such that no two adjacent elements in the rearranged array are the same. -----Constraints----- - 1 leq n leq 10^5 - -10^6 leq nums[i] leq 10^6 -----Input----- Input is given from Standard Input in the following format: nums -----Output----- If it is possible to rearrange the elements to meet the condition, print \\"Yes\\". Otherwise, print \\"No\\". -----Sample Input----- [1, 1, 1, 2, 2, 3] -----Sample Output----- Yes You can rearrange the values to [1, 2, 1, 2, 1, 3], for instance. -----Explanation----- In the sample input, it is possible to rearrange the elements such that no two adjacent elements are the same. One possible arrangement is [1, 2, 1, 2, 1, 3].","solution":"from collections import Counter def can_rearrange(nums): Returns \\"Yes\\" if it\'s possible to rearrange the array such that no two adjacent elements are the same, otherwise \\"No\\". if not nums: return \\"No\\" # Get the frequency of each element freq = Counter(nums) # Find the element with the maximum frequency max_count = max(freq.values()) # If the highest frequency of any element is more than (n+1)//2, then it\'s not possible # to rearrange the elements to meet the condition if max_count > (len(nums) + 1) // 2: return \\"No\\" return \\"Yes\\""},{"question":"Given an integer array nums, find the number of pairs (i, j) where 0 <= i < j < len(nums) and nums[i] + nums[j] is an odd number. Example 1: Input: nums = [1, 2, 3, 4] Output: 4 Explanation: The pairs are (0, 1), (0, 3), (1, 2), and (2, 3). Their sums are 3, 5, 5, and 7 respectively, all odd. Example 2: Input: nums = [2, 4, 6] Output: 0 Explanation: There are no pairs whose sums are odd. Example 3: Input: nums = [1, 1, 1, 1] Output: 6 Explanation: The pairs are (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), and (2, 3). Their sums are all odd because any two ones add up to 2 which is even. Your Task: You don\'t need to read or print anything. Your task is to complete the function countOddSumPairs() which takes nums as input parameter and returns the count of pairs whose sums are odd. Expected Time Complexity: O(N) Expected Space Complexity: O(1) Constraints: 1 <= len(nums) <= 10000 1 <= nums[i] <= 100000","solution":"def countOddSumPairs(nums): Returns the number of pairs (i, j) where 0 <= i < j < len(nums) and nums[i] + nums[j] is an odd number. odd_count = 0 even_count = 0 for num in nums: if num % 2 == 0: even_count += 1 else: odd_count += 1 # A pair sum is odd if one number is odd and the other is even return odd_count * even_count"},{"question":"In Berland, a number is called perfect if it contains only the digits 3 and/or 7. Residents of Berland are fascinated by perfect numbers and often look for them in their daily lives. Your task is to determine if a given number is perfect. -----Input----- The first line contains integer number n (1 ≤ n ≤ 10^9) — the number to be checked. -----Output----- Output \\"YES\\" if the number is perfect, otherwise output \\"NO\\". -----Examples----- Input 37 Output YES Input 123 Output NO Input 7337 Output YES -----Note----- In the first example, the number 37 is a perfect number as it only contains the digits 3 and 7. In the second example, the number 123 is not perfect because it contains the digits 1 and 2. In the third example, 7337 is perfect as it only contains the digits 3 and 7.","solution":"def is_perfect_number(n: int) -> str: Determines if the given number is a perfect number (contains only the digits 3 and/or 7). :param n: Integer number to check. :return: \\"YES\\" if the number is perfect, otherwise \\"NO\\". for digit in str(n): if digit not in {\'3\', \'7\'}: return \\"NO\\" return \\"YES\\""},{"question":"You think you can reverse? This problem will test you on your understanding of loops and basic string manipulation. You are given two integers N and t; and an array A of N integers (0-based indexing). Based on the value of t, you will perform an action on A. t Action Needed 1 Print the array A in reverse order, elements separated by spaces. 2 Print the sum of the first half of A (if N is odd, include the middle element in the first half). 3 Print \\"Palindrome\\" if the sequence of numbers in A reads the same forward and backward, otherwise print \\"Not Palindrome\\". 4 Print the maximum difference between any two elements in A. 5 Print the product of all odd-indexed elements in A. 6 Replace each element of A with the greatest common divisor (GCD) of the element and the sum of its digits, and then print A. 7 Start from index i = 0; a. Jump forward by i + 1 positions. b. If the current index i is outside the valid bound of [0..N-1], print “Out” and stop. c. Else if the current index i is index N - 1, print “Done” and stop. d. Otherwise, repeat step b; e. If doing this leads to an infinite loop, print “Cyclic” and stop. (all output are without the quotes) -----Input----- The first line of the input contains an integer N and t (3 leq N leq 200000; 1 leq t leq 7). The second line of the input contains N non-negative 32-bit signed integers. -----Output----- For each test case, output the required answer based on the value of t. -----Scoring----- There are 20 hidden test cases that test various requirements of this problem. All 20 test cases will be tested. Each hidden test case worth 5 points (the 7 sample test cases below worth 0 point). -----Examples----- Sample Input 1: 7 1 1 2 3 4 5 6 7 Sample Output 1: 7 6 5 4 3 2 1 Sample Input 2: 7 2 1 2 3 4 5 6 7 Sample Output 2: 16 Sample Input 3: 7 3 1 2 3 4 3 2 1 Sample Output 3: Palindrome Sample Input 4: 7 4 1 5 3 9 4 8 2 Sample Output 4: 8 Sample Input 5: 7 5 1 2 3 4 5 6 7 Sample Output 5: 210 Sample Input 6: 5 6 15 44 23 85 19 Sample Output 6: 3 4 8 5 1 Sample Input 7: 7 7 6 3 1 5 7 9 2 Sample Output 7: Out","solution":"import math from math import gcd def array_action(N, t, A): if t == 1: print(\\" \\".join(map(str, A[::-1]))) elif t == 2: half_point = (N + 1) // 2 print(sum(A[:half_point])) elif t == 3: if A == A[::-1]: print(\\"Palindrome\\") else: print(\\"Not Palindrome\\") elif t == 4: max_diff = max(A) - min(A) print(max_diff) elif t == 5: product = 1 for i in range(1, N, 2): product *= A[i] print(product) elif t == 6: def sum_of_digits(n): return sum(map(int, str(n))) new_A = [gcd(a, sum_of_digits(a)) for a in A] print(\\" \\".join(map(str, new_A))) elif t == 7: visited = set() i = 0 while True: if i >= N: print(\\"Out\\") break if i == N - 1: print(\\"Done\\") break if i in visited: print(\\"Cyclic\\") break visited.add(i) i += i + 1"},{"question":"Ravi is an avid reader who loves to highlight important sections in his digital documents using a custom highlighting tool. The tool allows him to specify a starting index and an ending index to highlight the section of text between these indices. Given a document text and a number of queries, each consisting of a pair of indices (start and end), your task is to output the highlighted section of text for each query. The tool assumes that the indices start from 0 and are inclusive. If the starting index is greater than the ending index, or if any index is out of bounds, the query is considered invalid, and the output for that query should be \\"INVALID QUERY\\". Input: - The first line contains an integer T, the number of test cases. - The first line of each test case contains a string D representing the document text. - The second line of each test case contains an integer Q, the number of queries. - The next Q lines each contain two integers representing the starting and ending indices for the highlight query. Output: For each test case, output Q lines, each containing either the highlighted section of the text or \\"INVALID QUERY\\" for each query. Constraints: 1 ≤ T ≤ 100 1 ≤ length of D ≤ 1000 1 ≤ Q ≤ 100 0 ≤ start, end < length of D SAMPLE INPUT 2 hello world 3 0 4 6 10 5 15 coding is fun 2 0 5 4 3 SAMPLE OUTPUT hello world INVALID QUERY coding INVALID QUERY Explanation: In case 1: - For the first query, the range from index 0 to 4 yields \\"hello\\". - For the second query, the range from index 6 to 10 yields \\"world\\". - The third query is invalid because the ending index is out of bounds. In case 2: - For the first query, the range from index 0 to 5 yields \\"coding\\". - The second query is invalid because the starting index is greater than the ending index.","solution":"def process_queries(T, test_cases): results = [] for case in test_cases: D, queries = case case_result = [] for start, end in queries: if start < 0 or end >= len(D) or start > end: case_result.append(\\"INVALID QUERY\\") else: case_result.append(D[start:end + 1]) results.append(case_result) return results # A function to prepare the input according to the given problem def highlight_text(T, input_lines): test_cases = [] i = 0 for _ in range(T): D = input_lines[i] Q = int(input_lines[i + 1]) queries = [] for j in range(Q): start, end = map(int, input_lines[i + 2 + j].split()) queries.append((start, end)) test_cases.append((D, queries)) i += 2 + Q return process_queries(T, test_cases)"},{"question":"Alice is organizing a charity event, and she wants to create gift baskets with different types of items. She has \'M\' types of items, and each type \'i\' is available in quantity \'Qi\'. Each basket must contain exactly \'N\' items, where no more than one item of each type can be included. Alice wants to know how many different combinations of baskets she can create. Input The first line of input contains \'T\', the number of test cases (1 ≤ T ≤ 100). This is followed by \'T\' test cases. Each test case begins with a blank line followed by one line containing two numbers \'M\' and \'N\' (1 ≤ N ≤ M ≤ 100). This is followed by one line containing \'M\' integers where the i-th integer is the quantity of the i-th type of item, Qi (1 ≤ Qi ≤ 100). Output The output should consist of \'T\' lines corresponding to the \'T\' test cases. Each line should contain one number, which is the number of different combinations of baskets that can be created. Example Input: 2 3 2 1 2 3 4 3 2 2 1 1 Output: 3 3","solution":"from math import comb def count_basket_combinations(M, N, quantities): Calculate the number of ways to create a basket with exactly N items. return comb(M, N) def solve_basket_combinations(test_cases): Solve the basket combination problem for multiple test cases. results = [] for M, N, quantities in test_cases: results.append(count_basket_combinations(M, N, quantities)) return results"},{"question":"Dungeon Explorer is an adventurous game where a player needs to navigate through a dungeon to reach the exit. The dungeon is represented as an N x N grid, containing areas that are either walls or open spaces. The player starts at the top-left corner (1, 1) and needs to reach the bottom-right corner (N, N). One day, the game developers decided to make the game more challenging by introducing \\"magic walls\\" that can turn into open spaces when a certain condition is met. Your task is to write a program to help the player determine whether they can reach the exit from the start position, considering the current state of the dungeon. The program also needs to update the state of the magic walls and re-calculate the reachability for a given number of queries. A magic wall turns into an open space when exactly two of its horizontal or vertical neighbors are open spaces. # Input The input consists of multiple datasets. Each dataset is formatted as follows: - The first line contains an integer N (2 ≤ N ≤ 100), indicating the size of the dungeon grid. - The next N lines each contain a string of N characters representing the dungeon grid. Each character is either \'.\' (an open space), \'#\' (a wall), or \'M\' (a magic wall). - The next line contains an integer Q (1 ≤ Q ≤ 100), the number of queries. - The next Q lines each contain two integers X and Y (1 ≤ X, Y ≤ N), specifying the coordinates of a magic wall that needs to be updated according to the given condition and then checking the reachability from the start to the exit. The end of the input is indicated by a line containing a zero. # Output For each query in a dataset, output \\"YES\\" if the player can reach the exit after updating the state of the magic wall, and \\"NO\\" otherwise. Each result should be printed on a new line. # Example Input 4 .M#M .#M. M..M #. 2 1 2 2 3 5 # #M# . #M# . 1 2 2 0 Output YES YES NO Explanation # Dataset 1: - The dungeon starts as: ``` .M#M .#M. M..M #. ``` - Query 1: Update the magic wall at (1, 2). It has two open space neighbors (above and below), thus it turns into an open space: ``` ..#M .#M. M..M #. ``` The player can now reach (4, 4) through the path: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) -> (4, 4). - Query 2: Update the magic wall at (2, 3). It has two open space neighbors (above and below), thus it turns into an open space: ``` ..#M .#.. M..M #. ``` The player can still reach (4, 4) through the path: (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) -> (4, 4). # Dataset 2: - The dungeon starts as: ``` # #M# . #M# . ``` - Query 1: Update the magic wall at (2, 2). It does not have exactly two open space neighbors, thus it remains a magic wall: ``` # #M# . #M# . ``` The player cannot reach (5, 5) from (1, 1). Note that updating the magic wall might change the dungeon to make paths viable or not, and each query\'s results are cumulative to the state of the dungeon. Remember to process each dataset until a zero terminates the input.","solution":"import sys from collections import deque def can_reach_exit(dungeon, N): Check if the player can reach the exit in the dungeon starting from (0, 0). directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] start = (0, 0) exit_pos = (N - 1, N - 1) if dungeon[start[0]][start[1]] == \'#\' or dungeon[exit_pos[0]][exit_pos[1]] == \'#\': return False queue = deque([start]) visited = set([start]) while queue: x, y = queue.popleft() if (x, y) == exit_pos: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and dungeon[nx][ny] in (\'.\', \'M\') and (nx, ny) not in visited: queue.append((nx, ny)) visited.add((nx, ny)) return False def update_magic_wall(dungeon, x, y, N): Update the state of the magic wall at (x, y) if the conditions are met. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] open_neighbors = 0 for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and dungeon[nx][ny] == \'.\': open_neighbors += 1 if open_neighbors == 2: dungeon[x][y] = \'.\' def process_dungeon(dungeon, N, queries): results = [] for x, y in queries: x -= 1 y -= 1 if dungeon[x][y] == \'M\': update_magic_wall(dungeon, x, y, N) results.append(\\"YES\\" if can_reach_exit(dungeon, N) else \\"NO\\") return results def dungeon_explorer(input_data): input_lines = input_data.strip().split(\\"n\\") index = 0 results = [] while index < len(input_lines): N = int(input_lines[index]) if N == 0: break index += 1 dungeon = [list(input_lines[index + i]) for i in range(N)] index += N Q = int(input_lines[index]) index += 1 queries = [] for _ in range(Q): x, y = map(int, input_lines[index].split()) queries.append((x, y)) index += 1 results.extend(process_dungeon(dungeon, N, queries)) return results"},{"question":"You are given a string representing a sentence containing multiple words separated by spaces. Your task is to find the longest word in the sentence and return it. If there are multiple words with the same length, return the first one encountered. Example: Input: \\"The quick brown fox jumps over the lazy dog\\" Output: \\"quick\\" Input: \\"To be or not to be, that is the question\\" Output: \\"question\\" In your solution, be sure to consider punctuation marks as part of words. You should also handle cases where the input string is empty. Follow-up: Can you solve this problem with a one-pass scan of the string and O(1) extra memory?","solution":"def longest_word(sentence): Returns the longest word in the sentence. If multiple words have the same length, return the first one encountered. Punctuation is considered part of words. if not sentence: return \\"\\" words = sentence.split() longest = words[0] for word in words[1:]: if len(word) > len(longest): longest = word return longest"},{"question":"Given an array of integers, A, and a target value, T, find the number of unique pairs of elements in the array whose sum is equal to T. Two pairs (a, b) and (b, a) are considered the same and should not be counted twice. Example: Input: A = [1, 5, 7, -1, 5] T = 6 Output: 2 Explanation: The pairs are (1, 5) and (7, -1). Input: The first line contains a single integer, n, the number of elements in the array. The second line contains n space-separated integers representing the elements of the array. The third line contains a single integer, T, the target sum. Output: Output a single integer, the number of unique pairs whose sum is equal to T. Constraints: 1 ≤ n ≤ 10^5 -10^9 ≤ A[i] ≤ 10^9 -10^9 ≤ T ≤ 10^9 Example: Input: 5 1 5 7 -1 5 6 Output: 2","solution":"def count_unique_pairs(A, T): Return the number of unique pairs of elements in the array A whose sum is equal to T. seen = set() pairs = set() for num in A: complement = T - num if complement in seen: pairs.add(tuple(sorted((num, complement)))) seen.add(num) return len(pairs) # Example usage: # n = 5 # A = [1, 5, 7, -1, 5] # T = 6 # Output: 2 # print(count_unique_pairs(A, T))"},{"question":"Given a 2D grid with dimensions `m x n`, where each cell in the grid is either a 0 or a 1. You are initially positioned at the top-left corner in cell (0, 0) and your goal is to reach the bottom-right corner in cell (m-1, n-1). From each cell, you can move to the right, down, left, or up. You cannot move to a cell containing a 0, and you cannot move outside the boundaries of the grid. Write a function that finds the maximum number of steps you can take to reach the bottom-right corner from the top-left corner while ensuring that you do not pass through any cell more than once. If there is no such path, return -1. Example: Input: grid = [[1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1]] Output: 7 Explanation: The possible path with the maximum number of steps is as follows: (0, 0) -> (1, 0) -> (1, 1) -> (2, 1) -> (2, 2) -> (2, 3) -> (3, 3) Your Task: You don\'t need to read or print anything. Your task is to complete the function `MaxSteps` which takes the grid as input parameter and returns the maximum number of steps you can take to reach the bottom-right corner from the top-left corner, or -1 if there is no such path. Expected Time Complexity: O(m*n) Expected Space Complexity: O(m*n) Constraints: 1 <= m, n <= 100","solution":"def MaxSteps(grid): Returns the maximum number of steps to reach the bottom-right corner from the top-left corner in the grid. If there is no such path, returns -1. from collections import deque m = len(grid) n = len(grid[0]) if grid[0][0] == 0 or grid[m-1][n-1] == 0: return -1 directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] queue = deque([(0, 0, 1)]) # (row, col, steps) visited = set((0, 0)) max_steps = -1 while queue: r, c, steps = queue.popleft() if (r, c) == (m-1, n-1): max_steps = max(max_steps, steps) for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < m and 0 <= nc < n and (nr, nc) not in visited and grid[nr][nc] == 1: visited.add((nr, nc)) queue.append((nr, nc, steps + 1)) return max_steps if max_steps != -1 else -1 # Example usage grid = [[1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 1, 1], [0, 0, 1, 1]] print(MaxSteps(grid)) # Output: 7"},{"question":"Given an array of integers, determine if it is possible to rearrange the elements of the array to form an arithmetic progression. An arithmetic progression is a sequence of numbers such that the difference between consecutive elements is constant. ------ Input Format ------ - The first line of the input contains T, the number of test cases. Then the test cases follow. - Each test case contains an integer N, the number of elements in the array. - The next line contains N space-separated integers, the elements of the array. ------ Output Format ------ For each test case, output \\"YES\\" if it is possible to rearrange the array to form an arithmetic progression, otherwise output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 10^{5} 2 ≤ N ≤ 10^{5} - The sum of N over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 4 3 3 1 2 4 1 2 4 6 5 1 2 3 4 5 2 7 5 ------ Sample Output 1 ------ YES NO YES YES ------ Explanation 1 ------ Test Case 1: The array can be rearranged to [1, 2, 3], which is an arithmetic progression with a common difference of 1. Test Case 2: The array cannot be rearranged to form an arithmetic progression as it lacks elements that would complete any such sequence. Test Case 3: The array is already an arithmetic progression with a common difference of 1. Test Case 4: The array can be rearranged to [5, 7], which is an arithmetic progression with a common difference of 2.","solution":"def is_arithmetic_progression(arr, n): arr.sort() diff = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i-1] != diff: return \\"NO\\" return \\"YES\\" def process_test_cases(test_cases): results = [] for n, arr in test_cases: results.append(is_arithmetic_progression(arr, n)) return results"},{"question":"A fictional island is inhabited by tribes who communicate through a series of drums. Each tribe speaks a different language, and to facilitate communication between tribes, the islanders have devised an automated drum translation system. The drum translation system comes with a dictionary of translation words between two tribes. The dictionary contains multiple original words, each associated with their translated words. The automation requirement is to check the consistency of the dictionary. A dictionary is consistent if for every pair of translations `(original_word_i, translated_word_i)` and `(original_word_j, translated_word_j)`, if `original_word_i` and `original_word_j` are the same, then `translated_word_i` should be the same as `translated_word_j`. Your task is to write a program to determine if the dictionary is consistent or not. -----Input----- The first line of the input contains one integer T (1 leq T leq 10^5) — the number of translations in the dictionary. The next T lines each contain two strings: the original word and its translated word. Each string consists of at most 100 lowercase English letters. -----Output----- Output \\"CONSISTENT\\" if the dictionary is consistent, otherwise output \\"INCONSISTENT\\". -----Examples----- Sample Input 1: 3 hello bonjour world monde hello bonjour Sample Output 1: CONSISTENT Sample Input 2: 3 hello bonjour world monde hello hola Sample Output 2: INCONSISTENT","solution":"def is_dictionary_consistent(translations): translation_map = {} for original, translated in translations: if original in translation_map: if translation_map[original] != translated: return \\"INCONSISTENT\\" else: translation_map[original] = translated return \\"CONSISTENT\\""},{"question":"Alice is trying to organize her bookshelf. She wants to group the books by their height such that each group has books of the same height. Furthermore, she wants each group to have all books taller than it to its left and all books shorter than it to its right. However, Alice\'s shelf is not very large, so she wants the total number of unique heights of books to be minimized. Given a list of integers where each integer represents the height of a book, write a program to help Alice determine the smallest possible number of unique heights of books. You should implement a function that takes an integer array representing the heights of the books and returns the minimum number of unique heights required to group the books as described. -----Input:----- - An integer n representing the number of books. ( 1 leq n leq 10^5 ) - An array of n integers where each integer represents the height of a book. ( 1 leq text{height} leq 10^9 ) -----Output:----- An integer representing the minimum number of unique heights required to group the books according to Alice\'s requirements. -----Constraints----- 10 points: - 1 leq n leq 10 - 1 leq text{height} leq 10 40 points: - 1 leq n leq 10^3 - 1 leq text{height} leq 10^6 50 points: - 1 leq n leq 10^5 - 1 leq text{height} leq 10^9 -----Sample Input----- 6 5 3 4 5 7 2 -----Sample Output----- 4 -----Explanation----- The heights of the books are [5, 3, 4, 5, 7, 2]. One way to group the books with the smallest number of unique heights is: [7], [5, 5], [4], [3, 2]. This results in 4 unique heights.","solution":"def min_unique_heights(n, heights): Returns the minimum number of unique heights required to group the books. return len(set(heights))"},{"question":"**L: Network Connections** Given a network of computers represented as a graph, determine if the network is fully connected. The graph has N computers and M direct connections between them, where each connection allows bidirectional communication. The computers are numbered from 1 to N . Input - The first line contains two integers, N and M . - The following M lines each contain two integers u and v , representing a direct connection between computer u and computer v . Output - Output \\"Yes\\" if the network is fully connected, otherwise output \\"No\\". Constraints - 1 leq N leq 100 - 0 leq M leq frac{N times (N-1)}{2} - 1 leq u, v leq N - u neq v Input example 1 5 4 1 2 2 3 3 4 4 5 Output example 1 Yes Input example 2 4 2 1 2 3 4 Output example 2 No Example Input 5 4 1 2 2 3 3 4 4 5 Output Yes","solution":"def is_fully_connected(N, M, connections): from collections import defaultdict, deque if N == 1: return \\"Yes\\" graph = defaultdict(list) for u, v in connections: graph[u].append(v) graph[v].append(u) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) # Start BFS from node 1 visited.add(1) bfs(1) return \\"Yes\\" if len(visited) == N else \\"No\\" # Example usage (would be commented out in the actual solution script): # N, M = 5, 4 # connections = [(1, 2), (2, 3), (3, 4), (4, 5)] # print(is_fully_connected(N, M, connections)) # Output: \\"Yes\\" # N, M = 4, 2 # connections = [(1, 2), (3, 4)] # print(is_fully_connected(N, M, connections)) # Output: \\"No\\""},{"question":"Given a tree with `n` nodes and `n-1` edges, you\'re to answer `q` queries. Each query gives two nodes `u` and `v`, and you have to determine the length of the shortest path between `u` and `v`. # Input - The first line contains two integers `n` and `q` (2 leq n, q leq 100000) — the number of nodes and the number of queries. - Each of the next `n-1` lines contains two integers `a` and `b (1 leq a, b leq n), representing an edge between nodes a and b. - Each of the next `q` lines contains two integers `u` and `v (1 leq u, v leq n) representing a query to find the shortest path between nodes u and v. # Output For each query, print a single integer — the length of the shortest path between nodes u and v. # Example Input ``` 5 3 1 2 1 3 3 4 4 5 1 5 2 4 3 5 ``` Output ``` 3 3 2 ``` # Note In the given tree: - The shortest path from node 1 to node 5 is: `1 -> 3 -> 4 -> 5`, which has a length of 3. - The shortest path from node 2 to node 4 is: `2 -> 1 -> 3 -> 4`, which has a length of 3. - The shortest path from node 3 to node 5 is: `3 -> 4 -> 5`, which has a length of 2.","solution":"from collections import deque def bfs_distance(tree, n, start, end): Perform BFS to find the shortest distance between start and end nodes in the given tree. visited = [False] * (n + 1) queue = deque([(start, 0)]) # store pairs of (node, current_distance) visited[start] = True while queue: current_node, dist = queue.popleft() if current_node == end: return dist for neighbor in tree[current_node]: if not visited[neighbor]: visited[neighbor] = True queue.append((neighbor, dist + 1)) return -1 # should never hit this line if the tree is connected def shortest_path_length(n, q, edges, queries): :param n: Number of nodes in the tree :param q: Number of queries :param edges: List of edges defining the tree :param queries: List of queries, each a tuple (u, v) :return: A list of shortest path lengths for each query # Build the adjacency list for the tree tree = [[] for _ in range(n + 1)] for a, b in edges: tree[a].append(b) tree[b].append(a) results = [] for u, v in queries: results.append(bfs_distance(tree, n, u, v)) return results"},{"question":"A large company uses a hierarchical file system with folders and files. The system tracks the creation, deletion, and updates of files efficiently. A recent incident highlighted the need to determine if there exists any circular dependencies within the folders (symbolic links pointing back to parent directories). Each folder can have subfolders and files. A symbolic link is a special type of file that points to another folder or file. We need to ensure that following these symbolic links will not result in an infinite loop (circular dependency). You are given the structure of the file system as a graph with nodes and edges. Each node represents a folder, and each edge represents either a direct subfolder relationship or a symbolic link. Your task is to determine if there exists any circular dependency in the given file system. -----Input----- The first line contains two integers, n and m (1 ≤ n, m ≤ 10^5), where n is the number of folders and m is the number of relationships (either subfolder or symbolic links). The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), denoting that there is an edge from folder u to folder v (indicating u contains v as a subfolder or u has a symbolic link to v). Each folder is uniquely numbered from 1 to n. -----Output----- Print \\"YES\\" if there exists a circular dependency in the file system, otherwise print \\"NO\\". -----Examples----- Input 5 6 1 2 2 3 3 4 4 5 5 2 3 1 Output YES Input 4 3 1 2 2 3 3 4 Output NO -----Note----- In the first example, there is a circular dependency: 2 -> 3 -> 4 -> 5 -> 2. In the second example, there is no circular dependency.","solution":"def has_circular_dependency(n, m, edges): Determines if there\'s a circular dependency in the given file system. Parameters: n (int): Number of folders. m (int): Number of relationships (either subfolder or symbolic links). edges (list of tuple): Each tuple (u, v) denotes an edge from folder u to folder v. Returns: str: \\"YES\\" if there exists a circular dependency, otherwise \\"NO\\". from collections import defaultdict, deque # Build graph representation graph = defaultdict(list) for u, v in edges: graph[u].append(v) # Helper function to perform DFS and detect a cycle def is_cyclic(v, visited, stack): visited[v] = True stack[v] = True # Recur for all the vertices adjacent to this vertex for neighbour in graph[v]: if not visited[neighbour]: if is_cyclic(neighbour, visited, stack): return True elif stack[neighbour]: return True # The vertex needs to be popped from recursion stack before function ends stack[v] = False return False visited = [False] * (n + 1) stack = [False] * (n + 1) for node in range(1, n + 1): if not visited[node]: if is_cyclic(node, visited, stack): return \\"YES\\" return \\"NO\\""},{"question":"# Merge Order Lists Background You are the chief archivist for a library with a complex system of categorizing books using several ordered lists. Two particular lists, `list_a` and `list_b`, each containing different books sorted by their unique catalog numbers in ascending order, need to be merged together to form a single ordered list. Your task is to write a program that can perform this merge efficiently. Task Write a function `merge_ordered_lists` that takes as input two lists of integers, `list_a` and `list_b`, representing catalog numbers of books in ascending order. The function should return a new list containing all the catalog numbers from both input lists, merged into a single list in ascending order. You should do this without using the built-in `sorted` function. Function Signature ```python def merge_ordered_lists(list_a: list, list_b: list) -> list: ``` Examples ```python merge_ordered_lists([1, 3, 5], [2, 4, 6]) # Output: [1, 2, 3, 4, 5, 6] merge_ordered_lists([1, 1, 2, 3], [2, 2, 3, 4]) # Output: [1, 1, 2, 2, 2, 3, 3, 4] merge_ordered_lists([1, 5, 9], [2, 6]) # Output: [1, 2, 5, 6, 9] ``` Constraints - Each input list can contain up to 100,000 integers. - The integers in the input lists will be within the range -10^9 to 10^9. Approach 1. Create an empty list `merged_list` to store the merged results. 2. Use two pointers, `i` for `list_a` and `j` for `list_b`, both initialized to 0. 3. Iterate through both lists, comparing current elements of both lists and append the smaller one to `merged_list`. 4. If there are remaining elements in either list after the primary loop, append them directly to the result list. 5. Return the merged list. Note: The function should efficiently handle merging in linear time O(n). Solution Template ```python def merge_ordered_lists(list_a, list_b): merged_list = [] i, j = 0, 0 while i < len(list_a) and j < len(list_b): if list_a[i] < list_b[j]: merged_list.append(list_a[i]) i += 1 else: merged_list.append(list_b[j]) j += 1 while i < len(list_a): merged_list.append(list_a[i]) i += 1 while j < len(list_b): merged_list.append(list_b[j]) j += 1 return merged_list ```","solution":"def merge_ordered_lists(list_a, list_b): Merges two ordered lists into one ordered list. Parameters: - list_a: A list of integers in ascending order. - list_b: A list of integers in ascending order. Returns: - A new list with all integers from list_a and list_b in ascending order. merged_list = [] i, j = 0, 0 # Traverse both lists and merge them into merged_list while i < len(list_a) and j < len(list_b): if list_a[i] < list_b[j]: merged_list.append(list_a[i]) i += 1 else: merged_list.append(list_b[j]) j += 1 # Collect the remaining elements from list_a while i < len(list_a): merged_list.append(list_a[i]) i += 1 # Collect the remaining elements from list_b while j < len(list_b): merged_list.append(list_b[j]) j += 1 return merged_list"},{"question":"# Wordville Coding War In Wordville, each citizen has a unique string representing their name. The citizens have a peculiar way of forming alliances: Two citizens will form an alliance if their names share at least one common character. Given a list of citizens\' names, determine how many distinct alliances can be formed in Wordville. Each citizen can only be part of one alliance. An alliance is a group of one or more citizens such that there is some way to connect any two citizens in the group via a series of alliances. Input: - The first line contains an integer N, the number of citizens in Wordville. - Each of the next N lines contains a string, the name of a citizen. All strings consist of lowercase English letters. Output: Output one integer, the number of distinct alliances that can be formed. Constraints: 1 ≤ N ≤ 100000 1 ≤ Length of each name ≤ 50 SAMPLE INPUT 5 alice bob charlie david ed SAMPLE OUTPUT 2 Explanation In Wordville, citizens form alliances based on shared characters. - \\"alice\\" and \\"charlie\\" share the character \'c\'. - \\"bob\\", \\"david\\", and \\"ed\\" cannot form an alliance with \\"alice\\" or \\"charlie\\", but they can form an alliance among themselves since they share characters (\'b\' with \'bob\' and \'d\' with \'david\' and \'ed\'). Thus, there are two distinct alliances: {\\"alice\\", \\"charlie\\"} and {\\"bob\\", \\"david\\", \\"ed\\"}. Therefore, the answer is 2.","solution":"def num_alliances(n, names): from collections import defaultdict def find(parent, x): if parent[x] != x: parent[x] = find(parent, parent[x]) return parent[x] def union(parent, rank, x, y): rootX = find(parent, x) rootY = find(parent, y) if rootX != rootY: if rank[rootX] > rank[rootY]: parent[rootY] = rootX elif rank[rootX] < rank[rootY]: parent[rootX] = rootY else: parent[rootY] = rootX rank[rootX] += 1 # Create a unique set of characters for each name char_to_names = defaultdict(list) for i in range(n): unique_chars = set(names[i]) for char in unique_chars: char_to_names[char].append(i) parent = list(range(n)) rank = [0] * n # Union names with the same characters for indices in char_to_names.values(): for i in range(1, len(indices)): union(parent, rank, indices[0], indices[i]) # The number of distinct alliances is the number of unique roots alliance_count = len(set(find(parent, i) for i in range(n))) return alliance_count # Sample input/output n = 5 names = [\\"alice\\", \\"bob\\", \\"charlie\\", \\"david\\", \\"ed\\"] print(num_alliances(n, names)) # Output: 2"},{"question":"A common problem faced by urban planners is the distribution of shelters in a city prone to sudden natural disasters. In the city, there are n shelters and m connecting roads between them. Each shelter can only store a limited number of supplies. A major challenge is ensuring that after a disaster, supplies can still be transported from one shelter to another if a direct path is not available. Additionally, planners need to guarantee that there are no unnecessary roads which, if removed, would still maintain the required connectivity. Your task is to evaluate a given urban plan and check if the supply distribution network is effectively designed according to these requirements. -----Input----- The first line of the input contains two space-separated integers n and m (1 ≤ n, m ≤ 1000) denoting the number of shelters (which are conveniently numbered from 1 to n) and the number of roads between them, respectively. In the next m lines, descriptions of roads follow. Each road is given as a pair of shelters a b it connects (1 ≤ a, b ≤ n, a ≠ b). -----Output----- The output consists of one line, containing either valid or invalid depending on whether the supply distribution network is effectively designed. -----Examples----- Input 5 5 1 2 1 3 2 3 3 4 4 5 Output invalid Input 4 3 1 2 2 3 3 4 Output valid","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def is_valid_network(n, roads): parent = list(range(n)) rank = [0] * n for a, b in roads: x = find(parent, a - 1) y = find(parent, b - 1) if x != y: union(parent, rank, x, y) else: return False root = find(parent, 0) for i in range(1, n): if find(parent, i) != root: return False return True def check_supplies_network(n, m, roads): if is_valid_network(n, roads): return \\"valid\\" else: return \\"invalid\\""},{"question":"You are given an unsorted list of integers that may contain duplicates. Write a function to determine the count of distinct pairs (a, b) in the list such that a + b is equal to a given target sum. The pairs (a, b) and (b, a) are considered the same and should only be counted once. Example: Given the list [1, 5, 7, 1, 5] and the target sum is 6, the distinct pairs with the sum 6 are (1, 5). Hence, the answer is 1. Example: Given the list [1, 2, 3, 4, 5, 6] and the target sum is 7, the distinct pairs with the sum 7 are (1, 6), (2, 5), and (3, 4). Hence, the answer is 3.","solution":"def count_pairs_with_sum(arr, target_sum): Returns the count of distinct pairs (a, b) in the list such that a + b is equal to the target sum. seen = set() pairs = set() for number in arr: complement = target_sum - number if complement in seen: pairs.add(tuple(sorted((number, complement)))) seen.add(number) return len(pairs)"},{"question":"You are given a network of cities connected by bidirectional roads. Each road has an associated travel time. Your task is to help a delivery company find the shortest travel time needed to deliver a package from a starting city to a destination city. The roads can experience traffic jams, causing the travel time of certain roads to dynamically increase by a specified amount. Write a function to calculate the minimum time to travel from the starting city to the destination city after a series of traffic jam updates. Input: - An integer `n` representing the number of cities (1 ≤ n ≤ 1000). - An integer `m` representing the number of roads (1 ≤ m ≤ 5000). - Next m lines each containing three integers `u`, `v`, and `t` representing a road between cities `u` and `v` with a travel time of `t` seconds (1 ≤ u, v ≤ n, 1 ≤ t ≤ 1000). - Two integers `start` and `end` representing the starting city and the destination city (1 ≤ start, end ≤ n). - An integer `k` representing the number of traffic jam updates (0 ≤ k ≤ 1000). - Next k lines each containing three integers `x`, `y`, and `delta` representing a road between cities `x` and `y` where the travel time increases by `delta` seconds due to a traffic jam (1 ≤ x, y ≤ n, 1 ≤ delta ≤ 1000). Output: - The minimum travel time required to go from the starting city to the destination city after considering all traffic jam updates. If there is no possible path, output -1. SAMPLE INPUT: 5 6 1 2 5 2 3 2 1 3 1 3 4 7 4 5 3 3 5 2 1 5 2 2 3 3 3 5 10 SAMPLE OUTPUT: 12 Explanation: Initially, the shortest path from city 1 to city 5 is through the path 1 -> 3 -> 5 with a total travel time of 1 + 2 = 3 seconds. After the traffic jam updates: - The travel time of the road between city 2 and city 3 becomes 2 + 3 = 5 seconds. - The travel time of the road between city 3 and city 5 becomes 2 + 10 = 12 seconds. The new shortest path from city 1 to city 5 is 1 -> 2 -> 3 -> 4 -> 5 with a total travel time of 5 + 5 + 7 + 3 = 20 seconds. However, since the path 1 -> 3 -> 4 -> 5 only takes 1 + 7 + 3 = 11 seconds, the correct answer is 11, not 12. Let\'s adjust this example so it correctly showcases the adjustments.","solution":"import heapq from collections import defaultdict def min_travel_time(n, m, roads, start, end, k, traffic_updates): graph = defaultdict(list) for u, v, t in roads: graph[u].append((v, t)) graph[v].append((u, t)) for x, y, delta in traffic_updates: for i, (v, t) in enumerate(graph[x]): if v == y: graph[x][i] = (v, t + delta) for i, (u, t) in enumerate(graph[y]): if u == x: graph[y][i] = (u, t + delta) def dijkstra(source, target): heap = [(0, source)] min_time = {i: float(\'inf\') for i in range(1, n+1)} min_time[source] = 0 while heap: current_time, u = heapq.heappop(heap) if u == target: return current_time for v, t in graph[u]: time = current_time + t if time < min_time[v]: min_time[v] = time heapq.heappush(heap, (time, v)) return -1 return dijkstra(start, end)"},{"question":"You are given an integer array `nums` of size `n` representing a permutation of the integers in the range [0, n-1]. Write a function to build the maximum binary tree by the following algorithm: 1. Create a root node with the maximum value in the array. 2. Recursively build the left subtree on the subarray prefix to the left of the maximum value. 3. Recursively build the right subtree on the subarray suffix to the right of the maximum value. Return the root of the maximum binary tree. Example 1: Input: [3,2,1,6,0,5] Output: [6,3,5,null,2,0,null,null,1] Explanation: The given array is: [3,2,1,6,0,5] The maximum value in the array is 6. The root of the tree is 6. The left subtree is built from subarray [3, 2, 1] and the right subtree from subarray [0, 5]. The entire binary tree is shown in level-order traversal [6,3,5,null,2,0,null,null,1]. Example 2: Input: [3,2,1] Output: [3,null,2,null,1] Explanation: The given array is: [3,2,1] The maximum value in the array is 3. The root of the tree is 3. The left subtree is empty and the right subtree is built from subarray [2, 1]. The entire binary tree is shown in level-order traversal [3,null,2,null,1]. Your Task: You don\'t need to read or print anything. Your task is to complete the function constructMaximumBinaryTree() which takes an integer array `nums` and returns the root of the constructed binary tree. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n) Constraints: - 1 <= nums.length <= 1000 - 0 <= nums[i] <= 1000 - All integers in `nums` are distinct.","solution":"class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def constructMaximumBinaryTree(nums): if not nums: return None max_val = max(nums) max_index = nums.index(max_val) root = TreeNode(max_val) left_subarray = nums[:max_index] right_subarray = nums[max_index+1:] root.left = constructMaximumBinaryTree(left_subarray) root.right = constructMaximumBinaryTree(right_subarray) return root def tree_to_list(root): Transform the binary tree into a list using level-order traversal where each node is represented, and nulls are added where there are no nodes. from collections import deque if not root: return [] result = [] queue = deque([root]) while queue: node = queue.popleft() if node: result.append(node.val) queue.append(node.left) queue.append(node.right) else: result.append(None) # Remove trailing None values while result and result[-1] is None: result.pop() return result # Example usage: nums1 = [3,2,1,6,0,5] root1 = constructMaximumBinaryTree(nums1) print(tree_to_list(root1)) # Output: [6, 3, 5, None, 2, 0, None, None, 1]"},{"question":"Write a `schedule_task` function that simulates task scheduling in a basic operating system. Your function will take a list of dictionaries representing tasks, where each dictionary has the fields \'name\' (a string, the name of the task), \'deadline\' (an integer, the time when the task should ideally be completed), and \'duration\' (an integer, the time it takes to complete the task). Your function needs to schedule the tasks in such a way that the maximum lateness, i.e., the difference between the completion time and the deadline of the most late task, is minimized. The function should return a list of task names in the order they should be executed. Here is an example input and output: tasks = [{\'name\': \'A\', \'deadline\': 4, \'duration\': 2}, {\'name\': \'B\', \'deadline\': 2, \'duration\': 1}, {\'name\': \'C\', \'deadline\': 5, \'duration\': 3}] schedule_task(tasks) = [\'B\', \'A\', \'C\'] In this example, Task B finishes at time 1, Task A finishes at time 3, and Task C finishes at time 6. Task A has a lateness of max(0, 3-4)=0, Task B has a lateness of max(0, 1-2)=0, and Task C has a lateness of max(0, 6-5)=1. Thus, the maximum lateness is 1, which is the minimized value. Note that there may be multiple valid schedules; you only need to return one of them.","solution":"def schedule_task(tasks): Schedule tasks to minimize the maximum lateness. Parameters: tasks (list): A list of dictionaries with fields \'name\', \'deadline\', and \'duration\'. Returns: list: A list of task names in the order they should be executed. # Sort tasks based on their deadlines (Earliest Deadline First scheduling) tasks_sorted = sorted(tasks, key=lambda x: x[\'deadline\']) return [task[\'name\'] for task in tasks_sorted]"},{"question":"You are given an array of integers representing the heights of students standing in a line. A group photo is to be taken and students would like to know their rank after the photographer rearranges them in a particular way. The students standing should be rearranged such that each student is standing in ascending order of their heights from left to right. If two students are of the same height, their relative order should not change. Write a function to determine the rank of each student in this final arrangement. The rank of a student is defined as the position (1-indexed) of their height in the sorted order. -----Input----- The first line contains a single integer n (1 le n le 10^5), denoting the number of students. The second line contains n integers h_i (1 le h_i le 10^9), denoting the heights of the students. -----Output----- Output n integers, each denoting the respective student\'s rank after the rearrangement. -----Examples----- Input 5 170 150 160 160 180 Output 4 1 2 3 5 Input 3 160 160 160 Output 1 2 3 Input 4 180 170 160 150 Output 4 3 2 1 -----Note----- In the first example, the sorted heights would be: 150, 160, 160, 170, 180. The ranks in sorted order are [4, 1, 2, 3, 5]. In the second example, since all the heights are the same, the ranks respect their relative order: [1, 2, 3]. In the third example, the heights are sorted in descending order, so the ranks are reversed: [4, 3, 2, 1].","solution":"def determine_ranks(n, heights): # Create an array of (height, index) tuples indexed_heights = list(enumerate(heights)) # Sort by height, preserving initial indices for tie-breaking indexed_heights.sort(key=lambda x: x[1]) # Create a result array ranks = [0] * n # Assign ranks based on sorted order for rank, (index, _) in enumerate(indexed_heights, start=1): ranks[index] = rank return ranks"},{"question":"A city planner is working on designing a series of parks and bicycle lanes. Each park is represented as a node and each bicycle lane as an edge between two nodes, forming a graph. The planner needs your help to determine if the layout of parks and bicycle lanes form a tree structure. A tree is a connected acyclic graph. An acyclic graph has no cycles, and a connected graph means there is a path between any pair of nodes. Given n nodes and m edges, determine if the given graph is a tree. # Input - The first line contains two integers n (1 ≤ n ≤ 10^5) and m (0 ≤ m ≤ 10^5) representing the number of nodes and edges respectively. - The next m lines each contain two integers u and v (1 ≤ u, v ≤ n), denoting an edge between nodes u and v. # Output - Print \\"YES\\" if the graph is a tree, otherwise print \\"NO\\". # Example Input ``` 4 3 1 2 2 3 3 4 ``` Output ``` YES ``` Input ``` 4 3 1 2 2 3 1 3 ``` Output ``` NO ``` # Note In the first example, the graph is a tree because it is connected and does not contain any cycles. In the second example, the graph contains a cycle and therefore is not a tree.","solution":"def is_tree(n, m, edges): if m != n - 1: return \\"NO\\" from collections import defaultdict, deque adjacency_list = defaultdict(list) for u, v in edges: adjacency_list[u].append(v) adjacency_list[v].append(u) visited = set() def bfs(start): queue = deque([start]) while queue: node = queue.popleft() for neighbor in adjacency_list[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) elif neighbor in visited: continue visited.add(1) bfs(1) return \\"YES\\" if len(visited) == n else \\"NO\\""},{"question":"Write a function that accepts a list of non-negative integers and returns a new list where each integer is replaced by the sum of all even numbers in the list up to and including that integer. # Important Points: - The input list will only contain non-negative integers. - If an integer is odd, it should be replaced by the sum of all even numbers in the list up to the previous integer. - The first integer remains the same because there are no previous integers to sum. # Examples: ```python sum_evens_up_to([1, 2, 3, 4, 5]) # Returns [1, 2, 2, 6, 6] # Explanation: # sum up to 1: no even numbers -> 1 # sum up to 2: 2 -> 2 # sum up to 3: 2 -> 2 (only consider evens) # sum up to 4: 2 + 4 -> 6 # sum up to 5: 2 + 4 -> 6 (only consider evens) ``` ```python sum_evens_up_to([0, 1, 4, 6, 8]) # Returns [0, 0, 4, 10, 18] # Explanation: # sum up to 0: 0 -> 0 # sum up to 1: 0 -> 0 (only consider evens) # sum up to 4: 0 + 4 -> 4 # sum up to 6: 0 + 4 + 6 -> 10 # sum up to 8: 0 + 4 + 6 + 8 -> 18 ``` # Notes: - You can assume that the input list will have at least one element.","solution":"def sum_evens_up_to(lst): Returns a new list where each integer is replaced by the sum of all even numbers in the list up to and including that integer. sum_even = 0 result = [] for num in lst: if num % 2 == 0: sum_even += num result.append(sum_even) return result"},{"question":"You are given a list of numbers representing a journal of stock prices recorded sequentially over a number of days. Write a function that determines the maximum profit you could achieve by buying and then later selling a single stock within the given list of prices. - You cannot sell a stock before you buy one. - If no profit can be achieved, return 0. - The list is guaranteed to have at least 2 stock prices. For example, given the list of prices `[7, 1, 5, 3, 6, 4]`, the function should return `5` (buying at 1 and selling at 6 gives a maximum profit of 5). Similarly, given the list `[7, 6, 4, 3, 1]`, the function should return `0`, as no profit can be achieved in this case. Implement the function `max_profit(prices: List[int]) -> int` in Python.","solution":"def max_profit(prices): Returns the maximum profit possible from buying and selling a single stock. :param prices: List of stock prices. :return: Maximum possible profit. If no profit can be achieved, return 0. if not prices or len(prices) < 2: return 0 min_price = prices[0] max_profit = 0 for price in prices[1:]: if price < min_price: min_price = price else: max_profit = max(max_profit, price - min_price) return max_profit"},{"question":"-----Question----- **String Transformation:** You are given two strings, `start` and `end`, each consisting of lowercase English letters. You are also given a list of strings `allowed`, which consists of intermediate strings that can be used as transformation steps. You need to determine the minimum number of transformations required to convert `start` into `end` using the strings in `allowed`. Each transformation involves changing exactly one character of the current string to match an allowed string. A valid transformation sequence is any sequence where every transformed string is an `allowed` string and the final transformed string is `end`. If it is not possible to transform `start` into `end` with the given list of allowed strings, your function should return -1. -----Input----- - The first string `start` (1 ≤ |start| ≤ 10, where |start| is the length of the string) - The second string `end` (1 ≤ |end| ≤ 10, where |end| is the length of the string) - The list `allowed` consisting of between 1 and 50 strings. The sum of lengths of all strings in `allowed` is at most 500. -----Output----- Output a single integer representing the minimum number of transformations required to convert `start` to `end`. Return -1 if no such transformation sequence exists. -----Examples----- Sample Input 1: start: \\"hit\\" end: \\"cog\\" allowed: [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] Sample Output 1: 4 Sample Input 2: start: \\"hit\\" end: \\"cog\\" allowed: [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\"] Sample Output 2: -1 Sample Input 3: start: \\"abc\\" end: \\"cab\\" allowed: [\\"aac\\", \\"cbc\\", \\"cac\\", \\"cab\\", \\"aab\\"] Sample Output 3: 3","solution":"def min_transformations(start, end, allowed): from collections import deque def is_adjacent(word1, word2): Check if two words differ by exactly one character. differences = sum(1 for a, b in zip(word1, word2) if a != b) return differences == 1 allowed_set = set(allowed) queue = deque([(start, 0)]) # (current string, current transformation count) visited = set() # To keep track of visited words while queue: current_word, steps = queue.popleft() if current_word == end: return steps for allowed_word in allowed_set: if is_adjacent(current_word, allowed_word) and allowed_word not in visited: visited.add(allowed_word) queue.append((allowed_word, steps + 1)) return -1"},{"question":"A group of friends is planning a hiking trip and wants to ensure that their hiking routes form a valid and continuous path. Each route can be represented as an undirected edge between two distinct points. Given a list of routes, determine if they collectively form a valid tree. A valid tree means every point is connected, and there are no cycles. Here is what you need to do: 1. Read an integer n, the number of distinct points. 2. Read an integer m, the number of routes. 3. Read m pairs of integers, each representing a route between two points. Output \\"Yes\\" if the routes form a valid tree, otherwise print \\"No\\". # Input - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of distinct points. - The second line contains an integer m (0 ≤ m ≤ 10^5), the number of routes. - Each of the next m lines contains two space-separated integers u and v, representing a route between points u and v (1 ≤ u, v ≤ n and u ≠ v). # Output Print \\"Yes\\" if the routes form a valid tree. Otherwise, print \\"No\\". # Examples Example 1 **Input:** ``` 4 3 1 2 2 3 3 4 ``` **Output:** ``` Yes ``` Example 2 **Input:** ``` 4 3 1 2 2 3 3 1 ``` **Output:** ``` No ``` Example 3 **Input:** ``` 4 2 1 2 3 4 ``` **Output:** ``` No ```","solution":"def valid_tree(n, m, routes): if m != n - 1: return \\"No\\" parent = list(range(n + 1)) def find(x): if parent[x] == x: return x parent[x] = find(parent[x]) return parent[x] def union(x, y): rootX = find(x) rootY = find(y) if rootX != rootY: parent[rootX] = rootY return True return False for u, v in routes: if not union(u, v): return \\"No\\" return \\"Yes\\""},{"question":"You are given a string that represents a mathematical expression containing single-digit positive integers, addition, subtraction, and parentheses. Write a function to evaluate the expression and return the result as an integer. The input string contains only the characters \'0\'-\'9\', \'+\', \'-\', \'(\', \')\' and space characters. The expression is always valid. **Examples** ```text Input: \\"1 + 1\\" Output: 2 Input: \\" 2-1 + 2 \\" Output: 3 Input: \\"(1+(4+5+2)-3)+(6+8)\\" Output: 23 ``` **Note**: - You should handle spaces and brackets appropriately. - Only the \'+\' and \'-\' operators are allowed. - No multiplication or division operators in the expression.","solution":"def evaluate_expression(expression): def helper(s, i): stack = [] num = 0 sign = 1 while i < len(s): char = s[i] if char.isdigit(): num = num * 10 + int(char) elif char in \'+-\': stack.append(sign * num) num = 0 sign = 1 if char == \'+\' else -1 elif char == \'(\': num, i = helper(s, i + 1) elif char == \')\': break i += 1 stack.append(sign * num) return sum(stack), i clean_expr = expression.replace(\' \', \'\') result, _ = helper(clean_expr, 0) return result"},{"question":"You are given a positive integer array nums containing n elements and a positive integer target. Your task is to find the number of unique pairs (i, j) in the array such that nums[i] + nums[j] is equal to target, where 0 <= i < j < n. Example 1: Input: nums = [1, 2, 3, 4, 5], target = 6 Output: 2 Explanation: The pairs (1, 5) and (2, 4) add up to target value 6. Example 2: Input: nums = [1, 1, 1, 1], target = 2 Output: 1 Explanation: The only pair (1, 1) adds up to target value 2. Repeated pairs are not considered different. Your Task: You don\'t need to read or print anything. Your task is to complete the function numPairs() which takes nums and target as input parameters and returns the count of unique pairs that sum up to the target value. Expected Time Complexity: O(n) Expected Space Complexity: O(n) Constraints: 1 <= nums.length <= 10^5 1 <= nums[i], target <= 10^6","solution":"def numPairs(nums, target): Returns the number of unique pairs (i, j) such that nums[i] + nums[j] is equal to the target. pairs = set() seen = set() for num in nums: diff = target - num if diff in seen: pairs.add((min(num, diff), max(num, diff))) seen.add(num) return len(pairs)"},{"question":"Jessie loves taking photographs. She recently visited a beautiful park and took n photos. She has now decided to create a photo album using these photos. Jessie wants to sort the photos based on their effects and put them in the album in the following sequence of effects: Sepia, B&W (Black and White), and Color. Given the data of a photo album, where every photo has one of these three effects, write a program to help Jessie sort the photos in the desired sequence for easy album creation. Note: Photos with the same effect should maintain their original relative order. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of photos. The second line contains n strings separated by spaces, each representing the effect of a photo. Each string is guaranteed to be one of \\"Sepia\\", \\"B&W\\" or \\"Color\\". -----Output----- Output the photos sorted in the desired sequence in a single line where each photo retains the same format given in the input. -----Examples----- Input 5 Sepia B&W Color Sepia Color Output Sepia Sepia B&W Color Color Input 3 B&W Color Sepia Output Sepia B&W Color Input 4 Color Color B&W Sepia Output Sepia B&W Color Color -----Note----- In the first test Jessie has 5 photos with different effects. After sorting, all photos with the effect \\"Sepia\\" come first, followed by those with \\"B&W\\", and finally the photos with the \\"Color\\" effect, while maintaining their relative order.","solution":"def sort_photos(n, photo_effects): Sorts the photo effects based on the desired sequence: Sepia, B&W, Color. Args: n (int): The number of photos. photo_effects (list of str): List of strings where each string is one of \\"Sepia\\", \\"B&W\\" or \\"Color\\". Returns: list of str: A list of photo effects sorted based on the desired sequence. sepia = [photo for photo in photo_effects if photo == \\"Sepia\\"] bw = [photo for photo in photo_effects if photo == \\"B&W\\"] color = [photo for photo in photo_effects if photo == \\"Color\\"] return sepia + bw + color"},{"question":"Neha is a brilliant mathematician who enjoys creating magic squares. A magic square is a grid of numbers where the sums of each row, each column, and both main diagonals are the same. Given the dimensions of her magic square and a list of integers that she wants to use to fill in the grid, help Neha determine whether it\'s possible to construct a magic square with the given set of integers. Each integer can only be used once and should fall within the range specified by Neha. -----Input----- The first line of the input contains an integer N: the size of the magic square Neha wants to create (N times N grid). The second line contains N^2 integers separated by spaces, representing the list of integers Neha wants to use. These integers satisfy -1000 leq a_i leq 1000 for each a_i. -----Output----- Output \\"YES\\" if it is possible to construct a magic square with the given integers, otherwise output \\"NO\\". -----Sample Explanation----- In the first sample, it shows whether the provided list of integers can be rearranged to form a 3x3 magic square where the sum condition applies. -----Examples----- Sample Input 1: 3 8 1 6 3 5 7 4 9 2 Sample Output 1: YES Sample Input 2: 3 8 1 6 3 5 7 4 9 3 Sample Output 2: NO","solution":"def can_form_magic_square(N, numbers): def magic_sum(N): return N * (N ** 2 + 1) // 2 def is_magic_square(grid, N, target_sum): for row in grid: if sum(row) != target_sum: return False for col in range(N): if sum(grid[row][col] for row in range(N)) != target_sum: return False if sum(grid[i][i] for i in range(N)) != target_sum: return False if sum(grid[i][N-1-i] for i in range(N)) != target_sum: return False return True from itertools import permutations target_sum = magic_sum(N) possible_permutations = permutations(numbers, N**2) for perm in possible_permutations: grid = [list(perm[i*N:(i+1)*N]) for i in range(N)] if is_magic_square(grid, N, target_sum): return \\"YES\\" return \\"NO\\""},{"question":"A research team is conducting studies on the adaptability of animals in a forest to climate change. They have placed `n` motion-sensitive cameras in the forest and each camera generates `vi` video clips per day containing footage of the animals. Researchers want to reduce the total number of video clips reviewed daily to focus on the most critical areas, thus they will select `k` cameras that generate the fewest clips. The team can also exchange one camera\'s location with the location of another camera up to `s` times to optimize the selection. Given the initial arrangement of the cameras and the maximum number of swaps allowed, determine the minimum possible total number of video clips generated by the selected `k` cameras. **Input:** The first line of the input contains three positive integers `n`, `k`, `s` (1 ≤ k ≤ n ≤ 100, 1 ≤ s ≤ 10^6) — the number of cameras in the forest, the number of cameras to be selected, and the maximum number of swaps allowed. The second line of the input contains `n` integers `vi` (1 ≤ vi ≤ 10^5) — the number of video clips generated by each camera in the order they are placed from the start of the observation line. **Output:** Print a single integer — the minimum possible total number of video clips generated by the selected `k` cameras. **Examples:** Input: ``` 4 2 1 5 3 8 2 ``` Output: ``` 5 ``` Input: ``` 6 3 2 10 4 2 11 5 7 ``` Output: ``` 11 ``` Input: ``` 5 3 4 7 5 1 3 6 ``` Output: ``` 9 ``` **Note:** In the first example: With one swap, the cameras producing video clips can be rearranged from `[5, 3, 8, 2]` to `[5, 2, 3, 8]`, resulting in a total of 5 clips from the two cameras `[5, 2]`. In the second example: After performing up to 2 swaps, the optimal rearrangement of cameras might look like `[10, 2, 4, 11, 5, 7]` with the three least in clips `[2, 4, 5]` generating a total of 11 clips. The goal is to harness the allowed swaps effectively to get the least number of clips by selected cameras in the restricted moves.","solution":"def min_video_clips(n, k, s, vi): Determine the minimum possible total number of video clips generated by the selected k cameras. Parameters: n (int): the number of cameras in the forest. k (int): the number of cameras to be selected. s (int): the maximum number of swaps allowed. vi (list): the list of video clips generated by each camera. Returns: int: the minimum possible total number of video clips generated by the selected k cameras. vi_sorted = sorted(vi) return sum(vi_sorted[:k])"},{"question":"___ # Task **_Given_** a list of integers, you are to determine if any three distinct elements in the list sum up to a given target value, T. Return true if such a combination exists, otherwise return false. ___ # Consider an Example: * For the list `[1, 2, 3, 4, 5, 6]` and target `12`, there exists a combination `1 + 5 + 6` which sums up to `12`. ___ # Input >> Output Examples: # Example 1: - `input`: list = `[2, 4, 8, -1, 3, 5]`, T = `7` - `output`: `true` - **Explanation**: The combination `4 + 3 + 0` exists, which sums up to target value `7`. # Example 2: - `input`: list = `[1, 1, 1, 1, 1]`, T = `4` - `output`: `false` - **Explanation**: There are no three distinct elements that sum up to the target value `4`. # Example 3: - `input`: list = `[5, 9, -3, 7, 2, 6]`, T = `10` - `output`: `true` - **Explanation**: The combination `9 + (-3) + 4` exists, which sums up to target value `10`. ___ # Notes * Ensure that you do not pick the same element more than once. * The input list can have negative values. * If the list has fewer than 3 elements, return false. ___","solution":"def three_sum_exists(nums, target): Determines if there are three distinct elements in the list nums that sum up to target. :param nums: List[int] - A list of integers. :param target: int - The target sum. :return: bool - True if there are three distinct elements in nums that sum up to target, otherwise False. n = len(nums) if n < 3: return False nums.sort() for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: # avoid duplicates continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target: return True elif total < target: left += 1 else: right -= 1 return False"},{"question":"You are given a string S consisting of lowercase and uppercase alphabets. Your task is to determine if the string is a perfect palindrome. A string is considered a perfect palindrome if it reads the same backward as forward, ignoring letter cases. Example 1: Input: S = \\"AmanaplanacanalPanama\\" Output: Yes Explanation: If we ignore letter cases, the given string reads the same backward as forward. Hence, the answer is Yes. Example 2: Input: S = \\"Hello\\" Output: No Explanation: The string does not read the same backward as forward. Hence, the answer is No. Your Task: Complete the function isPerfectPalindrome() which takes the string S as input and returns a boolean value, true if the string is a perfect palindrome, false otherwise. The driver code will print \\"Yes\\" if the returned value is true, otherwise \\"No\\". Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(1) Constraints: 1 <= |S| <= 10^6","solution":"def isPerfectPalindrome(S): Returns True if the string S is a perfect palindrome, ignoring case. Otherwise, returns False. lower_s = S.lower() # Convert the string to lowercase return lower_s == lower_s[::-1] # Check if the string is equal to its reverse"},{"question":"You are given a square matrix filled with non-negative integers. Your goal is to find the largest square sub-matrix such that all the values in this sub-matrix are the same. # Input The first line contains a single positive integer n (1 ≤ n ≤ 500) — the size of the square matrix. The next n lines contain n space-separated integers each, representing the elements of the matrix. Each element is a non-negative integer not exceeding 1000. # Output Print a single integer — the side length of the largest square sub-matrix where all values are the same. # Examples Example 1 # Input ``` 4 1 1 1 2 1 1 1 2 1 1 1 2 3 3 2 2 ``` # Output ``` 3 ``` Explanation In the given 4x4 matrix, the largest square sub-matrix with all equal values has a side length of 3. It is composed of the 1\'s in the top-left corner. Example 2 # Input ``` 5 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 0 0 0 0 0 ``` # Output ``` 4 ``` Explanation In the given 5x5 matrix, the largest square sub-matrix with all equal values has a side length of 4. It is composed of the 1\'s in the top-left corner.","solution":"def largest_square_submatrix_same_value(n, matrix): if n == 0: return 0 # Create a dp array to store the size of the largest square ending at each point dp = [[0] * n for _ in range(n)] max_side = 0 for i in range(n): for j in range(n): if i == 0 or j == 0: dp[i][j] = 1 # Edge elements are squares of size 1 by definition elif matrix[i][j] == matrix[i-1][j] == matrix[i][j-1] == matrix[i-1][j-1]: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 else: dp[i][j] = 1 # A single element submatrix max_side = max(max_side, dp[i][j]) return max_side"},{"question":"As an aspiring adventurer, you have been tasked with deciphering ancient inscriptions found on mysterious tablets. Each tablet is represented by a string composed of lowercase English letters. These strings have a special property: by shuffling the letters, you can create an anagram of another string which is known to you. Given two strings, determine if the first string can be rearranged to form the second string. You are required to implement this functionality in code. Input - The first line contains a single integer t (1 ≤ t ≤ 100), the number of test cases. - Each test case is described by two lines: - The first line contains the string a (1 ≤ |a| ≤ 100), the string inscribed on the tablet. - The second line contains the string b (1 ≤ |b| ≤ 100), the string to check if it can be formed using string a\'s letters. Output - For each test case, print \\"YES\\" if string a can be rearranged to form string b. Otherwise, print \\"NO\\". Example Input 3 anagram nagaram rat car listen silent Output YES NO YES Explanation In the first test case, the letters of \\"anagram\\" can be rearranged to form \\"nagaram\\". In the second test case, \\"rat\\" cannot be rearranged to form \\"car\\". In the third test case, \\"listen\\" can be rearranged to form \\"silent\\".","solution":"def can_form_anagram(t, test_cases): results = [] for a, b in test_cases: if sorted(a) == sorted(b): results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Example usage: # t = 3 # test_cases = [(\\"anagram\\", \\"nagaram\\"), (\\"rat\\", \\"car\\"), (\\"listen\\", \\"silent\\")] # print(can_form_anagram(t, test_cases))"},{"question":"In this problem, you need to manage a fleet of delivery drones. Each drone has a maximum flight capacity in terms of distance, and various orders have to be delivered to specific destinations which are a certain distance away from your base. Your objective is to assign the orders to drones in such a way that the maximum number of orders is delivered. You will be given the list of drones with their respective maximum distance capacities and the list of orders with their respective required distances from the base. For each order, if there is any available drone that can cover the required distance, that order can be successfully delivered by that drone. A drone can only be used for one delivery. -----Input----- The first line of input contains two integers d and o (1 leq d, o leq 1000) representing the number of drones and the number of orders, respectively. The next line contains d integers where the i^{text{th}} integer is c_i (1 leq c_i leq 10000), the maximum distance capacity of the i^{text{th}} drone. The next line contains o integers where the j^{text{th}} integer is r_j (1 leq r_j leq 10000), the required distance for the j^{text{th}} order. -----Output----- Display the maximum number of orders that can be delivered. -----Examples----- Sample Input: 3 4 5 7 8 4 6 8 10 Sample Output: 3","solution":"def max_orders_delivered(d, o, drone_capacities, order_distances): Returns the maximum number of orders that can be successfully delivered. # Sort drone capacities in increasing order drone_capacities.sort() # Sort order distances in increasing order order_distances.sort() delivered_orders = 0 i, j = 0, 0 while i < d and j < o: if drone_capacities[i] >= order_distances[j]: # Drone i can deliver order j delivered_orders += 1 j += 1 # Move to the next drone i += 1 return delivered_orders"},{"question":"Lucy is very fond of candies and has a large collection of them. She shares these candies with her friends in the following unique manner: Each candy has a certain sweetness value associated with it. Lucy arranges all the candies in a row and wants to create contiguous subarrays (segments) of candies, such that each subarray strictly increases in sweetness from left to right. Given the sweetness values of all candies in the arrangement, help Lucy determine the length of the longest subarray that satisfies this condition. Input The first line of input consists of an integer n (1 ≤ n ≤ 10^5) – the number of candies. The second line consists of n integers s_1, s_2, ..., s_n (1 ≤ s_i ≤ 10^9) – the sweetness values of the candies arranged in a row. Output Print a single integer – the length of the longest segment where the sweetness values strictly increase. Examples Input 6 1 2 2 3 5 6 Output 4 Input 10 5 1 2 3 2 4 5 6 7 8 Output 6 Note In the first example, the longest subarray with strictly increasing sweetness is [2, 3, 5, 6], which has length 4. In the second example, the longest subarray with strictly increasing sweetness is [2, 4, 5, 6, 7, 8], which has length 6.","solution":"def longest_increasing_subarray(n, sweetness): Finds the length of the longest strictly increasing subarray. Parameters: n (int): The number of candies. sweetness (list of int): The sweetness values. Returns: int: The length of the longest strictly increasing subarray. if n == 0: return 0 max_length = 1 current_length = 1 for i in range(1, n): if sweetness[i] > sweetness[i - 1]: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 # Check for the last increasing subarray max_length = max(max_length, current_length) return max_length"},{"question":"The question is to determine if it is possible to organize a set of pairs such that all members can \\"see\\" each other. Here is the new question: Input 4 2 1 4 3 2 1 4 2 3 Output POSSIBLE","solution":"def is_bipartite(n, edges): from collections import deque, defaultdict graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (n + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, n + 1): if color[i] == -1: if not bfs(i): return False return True def possible_to_organize(pairs): n = 4 # number of members edges = pairs if is_bipartite(n, edges): return \\"POSSIBLE\\" else: return \\"IMPOSSIBLE\\" # Example application pairs = [(1, 4), (2, 3)] print(possible_to_organize(pairs)) # Expected output: \\"POSSIBLE\\""},{"question":"In the mystical land of Algoria, there is a magical scroll carelessly torn into several pieces. Each piece of the scroll contains a single letter, and when all pieces are concatenated in some order, they form a meaningful spell. However, the ancient language is lost, so no one knows what the spell means. The wizards of Algoria have decided the spell should follow an ancient symmetry: being able to read it the same way forwards and backwards (i.e., it should be a palindrome). One day, a young wizard named Arin found a way to reconstruct the original scroll. Given the randomly torn pieces of the scroll, Arin wonders if it\'s possible to rearrange these pieces to form a palindrome or not. Given a collection of characters representing the pieces of the scroll, determine whether it is possible to rearrange them to form a palindrome. Input The first line contains a single integer n (1 ≤ n ≤ 1000), representing the number of characters on the torn pieces of the scroll. The second line contains a string of n lowercase English letters, each representing a piece of the scroll. Output Print \\"YES\\" if it is possible to rearrange the characters to form a palindrome. Otherwise, print \\"NO\\". Examples Input 7 aabbccd Output YES Input 5 abcde Output NO Note In the first example, the characters can be rearranged as \\"abcdcba\\", which is a palindrome. In the second example, the characters cannot be rearranged to form a palindrome.","solution":"def can_form_palindrome(n, pieces): Given n characters, determine if they can be rearranged to form a palindrome. :param n: int, number of characters :param pieces: str, a string of n characters :return: str, \\"YES\\" if it is possible to rearrange the characters to form a palindrome, otherwise \\"NO\\" from collections import Counter counts = Counter(pieces) odd_count = sum(1 for count in counts.values() if count % 2 != 0) if odd_count > 1: return \\"NO\\" else: return \\"YES\\""},{"question":"The Great Treehouse Battle is about to commence! In a treehouse, there are n rooms arranged in a specific manner. Each room is connected to exactly two adjacent rooms except for the first and the last room which only have one adjacent room. The rooms can be represented as nodes of a linear sequence. The battle strategy is that any room can deploy a smoke bomb to disrupt the opponents. When a smoke bomb is deployed in a room, it affects the two adjacent rooms; the room that deployed the smoke bomb remains unaffected directly. However, consecutive deployment of smoke bombs in adjacent rooms is prohibited to prevent over-smoking an area. The goal of both teams is to deploy as many smoke bombs as possible such that no two adjacent rooms have consecutive smoke bombs. The team that manages to deploy the last smoke bomb wins. The first team to deploy a smoke bomb is Team Alpha. Given the arrangement of rooms, can you determine the maximum number of smoke bombs that Team Alpha can deploy such that they ensure victory, no matter what Team Beta deploys in response? -----Input----- The first line contains one integer t (1 le t le 1000) — the number of test cases. For each test case, the first line contains one integer n (1 le n le 10^5) — the number of rooms in the treehouse. -----Output----- For each test case, print the number of rooms where Team Alpha can deploy smoke bombs to guarantee their victory. -----Example----- Input 3 3 5 4 Output 1 3 2 Explanation: In the first test case: Team Alpha can deploy a smoke bomb in the second room. If Team Beta then tries to deploy another bomb, they are restricted to either the first or the third room, leaving fewer optimal choices. In the second test case: Team Alpha can deploy bombs in the 2nd and 4th rooms. Team Beta cannot deploy any in the same round to break the sequence, ensuring Team Alpha deploys the last bomb in the treehouse battle. In the third test case: Team Alpha can deploy bombs in the 1st and 3rd rooms. Here, Team Beta cannot deploy one in the 2nd or 4th room following the sequence strategy.","solution":"def max_smoke_bombs_deployable(n): Returns the maximum number of smoke bombs that Team Alpha can deploy in an n-room treehouse to ensure their victory. Parameters: n (int): number of rooms in the treehouse Returns: int: number of rooms where Team Alpha can deploy smoke bombs to guarantee their victory # Team Alpha can deploy smoke bombs in every second room return (n + 1) // 2 def solve(test_cases): results = [] for n in test_cases: results.append(max_smoke_bombs_deployable(n)) return results"},{"question":"Given a list of integers `arr`, return the length of the longest increasing subsequence (LIS) within the list. The subsequence must be strictly increasing and does not need to be consecutive. Example: Input: arr = [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101], so the length is 4. Input: arr = [0, 1, 0, 3, 2, 3] Output: 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3], so the length is 4. Input: arr = [7, 7, 7, 7, 7, 7, 7] Output: 1 Explanation: The longest increasing subsequence is [7], so the length is 1. Note: - 1 <= len(arr) <= 2500 - -10^4 <= arr[i] <= 10^4","solution":"def length_of_lis(arr): Returns the length of the longest increasing subsequence in the list. if not arr: return 0 n = len(arr) dp = [1] * n for i in range(1, n): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"You are given a string consisting of words and spaces. Write a function `find_longest_word` that: * Takes a single string as an argument. * Returns a tuple containing: * The longest word in the string. If there is a tie, return the word that occurs first. * The length of that word. Words are sequences of characters separated by spaces. Punctuation is considered part of the word. **Examples:** ```python find_longest_word(\\"The quick brown fox.\\") # Output: (\\"quick\\", 5) find_longest_word(\\"A journey of a thousand miles begins with a single step.\\") # Output: (\\"thousand\\", 8) find_longest_word(\\"To be or not to be, that is the question.\\") # Output: (\\"question.\\", 9) ``` **Note:** - The function should handle an empty input string by returning a tuple `(\\"\\", 0)`.","solution":"def find_longest_word(s): Returns the longest word in the input string and its length. If there is a tie, returns the word that occurs first. :param s: String consisting of words separated by spaces. :return: Tuple containing the longest word and its length. if not s: return (\\"\\", 0) words = s.split() longest_word = \\"\\" max_length = 0 for word in words: if len(word) > max_length: longest_word = word max_length = len(word) return longest_word, max_length"},{"question":"Imagine you have a string S consisting of lowercase letters and are allowed to perform a series of operations on this string. In each operation, you can: 1. Reverse any prefix (the beginning part) of the string of length k. 2. Repeat the operation as many times as necessary. Given an initial string S, determine the number of unique strings that can be generated after a series of operations. -----Input----- The first line contains a single integer t (1 leq t leq 1000) — the number of test cases. Each test case consists of a single line containing the string S (1 leq |S| leq 10^5). The sum of the lengths of all strings in a single input does not exceed 10^5. -----Output----- For each test case, output the number of unique strings that can be generated after zero or more operations described above. -----Example----- Input 4 abc aab abcd a Output 6 3 24 1 -----Explanation----- For the first test case: We can generate the following unique strings - abc (original string, no operations) - bac (reverse prefix of length 2) - cba (reverse prefix of entire string) - bca (reverse prefix of length 2 then reverse prefix of length 3) - cab (reverse prefix of length 3 then reverse prefix of length 2) - acb (reverse prefix of length 2 then reverse prefix of length 2 of the new string \'bac\') Thus, there are 6 unique strings that can be generated.","solution":"from collections import deque from itertools import permutations def count_unique_strings(s): Returns the number of unique strings that can be generated by reversing any prefix multiple times. # Generate all possible permutations of the string perm_set = set(permutations(s)) return len(perm_set) def unique_strings(t, test_cases): For each test case, returns the number of unique strings that can be generated by reversing any prefix multiple times. result = [] for s in test_cases: result.append(count_unique_strings(s)) return result"},{"question":"Rahul is playing a game in which he has to move between multiple zones in a park. The park has N zones connected by M bidirectional paths, where ith path connects zone Pair[i][0] and Pair[i][1]. There are some special zones which contain treasures, and their numbers are given in an array T. Rahul always starts from zone 1 and tries to reach a zone with treasure. If he reaches a treasure zone, he collects the treasure and stops moving. Write a function findTreasureZone() which takes the following inputs: - an integer N, the total number of zones - an integer M, the total number of paths - an array T containing the zones with treasures - a 2D list Pair where Pair[i][0] and Pair[i][1] represent the zones connected by the ith path The function should return the zone number where Rahul collects the treasure. Assume Rahul moves in a breadth-first manner, visiting each zone level by level. # Example 1: Input: N = 5, M = 4 T = [3] Pair = [(1, 2), (2, 3), (2, 4), (4, 5)] Output: 3 # Example 2: Input: N = 6, M = 5 T = [5, 6] Pair = [(1, 2), (1, 3), (2, 4), (3, 5), (4, 6)] Output: 5 # Example 3: Input: N = 7, M = 6 T = [4] Pair = [(1, 2), (1, 3), (2, 4), (3, 5), (5, 6), (6, 7)] Output: 4 # Constraints: - 1 ≤ N, M ≤ 1000 - 1 ≤ T[i] ≤ N - 1 ≤ Pair[i][0], Pair[i][1] ≤ N # Function Signature: ```python def findTreasureZone(N: int, M: int, T: List[int], Pair: List[Tuple[int, int]]) -> int: # Your code here ```","solution":"from collections import deque def findTreasureZone(N: int, M: int, T: list, Pair: list) -> int: # Create a graph (adjacency list) graph = {i: [] for i in range(1, N + 1)} for u, v in Pair: graph[u].append(v) graph[v].append(u) # Breadth-first search (BFS) queue = deque([1]) visited = set() visited.add(1) while queue: current = queue.popleft() # Check if current zone has treasure if current in T: return current # Traverse connected zones for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor)"},{"question":"Sorting and Aggregating Data with a Range Query You are provided with a database of employees, where each employee record consists of the following pieces of information: - Employee ID (a unique integer identifier) - Department (an integer representing a department code) - Name (a string representing the employee\'s name) - Experience (an integer representing the number of years the employee has worked) Your task is to implement a function that retrieves the names of employees who have experience within a specific range and sorts them in ascending order by their names. Function Description Write a function sortedEmployeesInRange which retrieves the names of the employees with experience within the specified range and returns them sorted in ascending order by name. sortedEmployeesInRange has the following parameters: - employees: a list of tuples where each tuple represents an employee record in the format (EmployeeID, Department, Name, Experience) - minExperience: an integer representing the minimum years of experience to filter by (inclusive) - maxExperience: an integer representing the maximum years of experience to filter by (inclusive) Input Format The function will receive the following input: - A list of employee records, where each record is represented as a tuple (EmployeeID, Department, Name, Experience) - Two integers representing the minimum and maximum years of experience Constraints - 1 ≤ number of employees ≤ 10^5 - EmployeeID is a unique integer in the range [1, 10^9] - Department is an integer in the range [1, 1000] - Name is a string consisting of alphabetical characters with a length of at most 50 characters - Experience is an integer in the range [0, 100] Output Format The function should return a sorted list of names of employees who have experience within the given range. Sample Input 0 [(1, 101, \'Alice\', 5), (2, 102, \'Bob\', 10), (3, 101, \'Charlie\', 7), (4, 103, \'David\', 3)] 4 8 Sample Output 0 [\'Alice\', \'Charlie\'] Explanation 0 The employees with experience within the range of 4 to 8 years are Alice and Charlie. Sorting their names in ascending order yields [\'Alice\', \'Charlie\']. Sample Input 1 [(5, 101, \'Eve\', 2), (6, 102, \'Frank\', 1), (7, 103, \'Grace\', 3), (8, 104, \'Heidi\', 9)] 1 3 Sample Output 1 [\'Eve\', \'Frank\', \'Grace\'] Explanation 1 The employees with experience within the range of 1 to 3 years are Eve, Frank, and Grace. Sorting their names in ascending order yields [\'Eve\', \'Frank\', \'Grace\']. Complete the sortedEmployeesInRange function below.","solution":"def sortedEmployeesInRange(employees, minExperience, maxExperience): Returns the sorted list of names of employees who have experience within the specified range. :param employees: List of tuples where each tuple is (EmployeeID, Department, Name, Experience) :param minExperience: minimum years of experience to filter by (inclusive) :param maxExperience: maximum years of experience to filter by (inclusive) :return: Sorted list of names of employees with experience within the given range # Filter the employees based on the experience range filtered_employees = [emp[2] for emp in employees if minExperience <= emp[3] <= maxExperience] # Sort the names of the filtered employees sorted_names = sorted(filtered_employees) return sorted_names"},{"question":"Given an array of integers, you are required to find the length of the longest subarray that contains at most two distinct integers. To be precise, given an array `nums`, you need to return the length of the longest contiguous subarray that contains at most two distinct integers. Example 1: Input: nums = [1, 2, 1] Output: 3 Explanation: The longest subarray with at most two distinct integers is [1, 2, 1]. Example 2: Input: nums = [0, 1, 2, 2] Output: 3 Explanation: The longest subarray with at most two distinct integers is [1, 2, 2]. Example 3: Input: nums = [1, 2, 3, 4, 5] Output: 2 Explanation: The longest subarray with at most two distinct integers is [1, 2]. Your Task: You don\'t need to read input or print anything. Complete the function `lengthOfLongestSubstringTwoDistinct()` that takes an array of integers `nums` as input parameter and returns the length of the longest subarray with at most two distinct integers. Constraints: 1 <= nums.length <= 10^5 0 <= nums[i] <= 10^4","solution":"def lengthOfLongestSubstringTwoDistinct(nums): Returns the length of the longest subarray that contains at most two distinct integers. n = len(nums) if n < 3: return n left = 0 right = 0 hashmap = {} max_len = 2 while right < n: if len(hashmap) < 3: hashmap[nums[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[nums[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len"},{"question":"You are part of the technical team responsible for managing a large-scale file processing system. Each file undergoes a series of transformations identified by unique integers. There are n files, and each file has undergone exactly one transformation identified by an integer between 1 and k (inclusive). You need to determine the minimum number of occurrences of any transformation across all files after sorting the percentages of each transformation in ascending order. -----Input----- The first line of the input contains two space-separated integers n and k (1 leq n leq 10^5, 1 leq k leq 10^2). The second line contains n space-separated integers, each representing the transformation applied to each file from 1 to k. -----Output----- Output the minimum number of occurrences of any transformation (in percentage form) after the transformations are sorted in ascending order, rounded down to the nearest integer. -----Examples----- Sample Input 1: 6 3 1 2 1 3 1 2 Sample Output 1: 16 Sample Input 2: 5 2 1 2 1 1 2 Sample Output 2: 60 -----Explanation----- In Sample 1, the transformation occurrences are counted as: {1: 3, 2: 2, 3: 1}: - Transformation 1: (3/6) * 100 = 50% - Transformation 2: (2/6) * 100 = 33% - Transformation 3: (1/6) * 100 = 16% After sorting, the percentages are [16, 33, 50] with the minimum being 16. In Sample 2, the transformation occurrences are counted as: {1: 3, 2: 2}: - Transformation 1: (3/5) * 100 = 60% - Transformation 2: (2/5) * 100 = 40% After sorting, the percentages are [40, 60] with the minimum being 40.","solution":"def min_percentage_of_transformation(n, k, transformations): Determines the minimum number of occurrences of any transformation in percentage form. from collections import Counter # Count occurrences of each transformation transformation_counts = Counter(transformations) # Find percentages percentages = [(count / n) * 100 for count in transformation_counts.values()] # Sort percentages in ascending order percentages.sort() # Return the minimum percentage rounded down return int(percentages[0])"},{"question":"In a faraway land, Grace found an ancient device consisting of a matrix of m times n cells. Each cell contains a non-negative integer representing its energy level. Grace has a magical tool that can adjust the energy levels of the matrix cells. The tool has two types of operations: 1. Increment all the cells in a chosen row by 1. 2. Increment all the cells in a chosen column by 1. Grace wants to use the tool to make the entire matrix uniform, i.e., every cell should have the same energy level. You need to determine the minimum number of operations required to achieve this. -----Input----- The first line contains an integer t (1 le t le 100) — the number of test cases. For each test case, the first line contains two integers m and n (1 le m, n le 50) — the dimensions of the matrix. Each of the next m lines contains n integers a_{ij} (0 le a_{ij} le 100) — the energy levels of the matrix. -----Output----- For each test case, print a single integer — the minimum number of operations required to make the matrix uniform. -----Examples----- Input 2 2 2 1 3 2 4 3 3 1 1 1 1 1 1 1 1 1 Output 10 0 In the first test case, you can perform 1 operation on the first row (to get [2, 4]) and 4 operations on the first column and 4 operations on the second column to get all 4\'s. Similarly, you can adjust the rows and columns until all elements are equal. In the second test case, the matrix is already uniform, so no operations are needed.","solution":"def min_operations_to_uniform_matrix(t, test_cases): results = [] for case in test_cases: m, n, matrix = case max_val = max(max(row) for row in matrix) total_increments = sum(max_val - cell for row in matrix for cell in row) results.append(total_increments) return results def parse_input(input_str): input_lines = input_str.strip().split(\\"n\\") t = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(t): m, n = map(int, input_lines[line_index].split()) matrix = [list(map(int, input_lines[line_index+1+i].split())) for i in range(m)] test_cases.append((m, n, matrix)) line_index += m + 1 return t, test_cases def format_output(results): return \\"n\\".join(map(str, results))"},{"question":"You have a task to analyze the sales performance of a store over a period of N days. You are given the sales revenue for each day. The store manager wants to understand the maximum revenue the store can generate over a continuous subarray of days, but only if the total revenue over that subarray is positive. If all possible subarray revenues are negative or zero, the result should be zero. Given an integer N representing the number of days, and a sequence of N integers representing daily sales revenue, write a program to find the maximum positive revenue over any continuous subarray of days. Input The first line contains an integer N representing the number of days. The second line contains N integers separated by spaces representing the sales revenue for each day. Output Print a single integer representing the maximum positive revenue over any continuous subarray of days. If no such subarray exists, print 0. SAMPLE INPUT 7 -3 -2 4 -1 -2 1 5 SAMPLE OUTPUT 7 Explanation The maximum continuous subarray with positive revenue is 4 + (-1) + (-2) + 1 + 5 = 7.","solution":"def max_positive_revenue(n, revenues): Returns the maximum positive revenue over any continuous subarray of days. max_current = 0 max_global = 0 for revenue in revenues: max_current = max(revenue, max_current + revenue) max_global = max(max_global, max_current) # If max_global is still 0, we will return 0 (no positive subarray found) return max_global"},{"question":"In this problem, you are tasked with finding the minimum number of currency bills needed to make up a given amount. You are given N different denominations of bills and their quantities. The goal is to use as few bills as possible to match a target amount M. # Input The first line contains two integers N and M: - 1 ≤ N ≤ 50 (number of different bill denominations) - 1 ≤ M ≤ 1,000 (target amount) The next N lines each contain two integers D_i and Q_i: - 1 ≤ D_i ≤ 1,000 (denomination of the i-th type of bill) - 1 ≤ Q_i ≤ 1,000 (quantity of the i-th type of bill) # Output Output a single integer representing the minimum number of bills needed to make up the amount M. If it is not possible to make the exact amount, print -1. # Examples Example 1 **Input:** ``` 3 620 500 1 100 2 20 2 ``` **Output:** ``` 3 ``` Example 2 **Input:** ``` 2 300 100 1 200 1 ``` **Output:** ``` 2 ```","solution":"def min_bills(N, M, denominations): # Sort denominations by value in descending order denominations.sort(reverse=True, key=lambda x: x[0]) total_bills = 0 for d, q in denominations: if M <= 0: break max_bills = min(q, M // d) total_bills += max_bills M -= max_bills * d return total_bills if M == 0 else -1 # Example usage: # N = 3 # M = 620 # denominations = [(500, 1), (100, 2), (20, 2)] # print(min_bills(N, M, denominations)) # Output: 3"},{"question":"A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 (91 × 99). Write a function that takes an integer `n` and finds the largest palindrome made from the product of two numbers, each with `n` digits. If no such palindrome exists, return -1. Examples: ``` largest_palindrome(2) => 9009 (91 * 99) largest_palindrome(3) => 906609 (913 * 993) largest_palindrome(1) => 9 (1 * 9) ``` - If `n` is less than 1, return -1. Your task is to write this function: ```python def largest_palindrome(n): # Your code here ``` Ensure your solution is optimized for performance, especially for larger values of `n`.","solution":"def is_palindrome(number): return str(number) == str(number)[::-1] def largest_palindrome(n): if n < 1: return -1 max_factor = 10**n - 1 min_factor = 10**(n - 1) largest_palindrome = -1 for i in range(max_factor, min_factor - 1, -1): for j in range(i, min_factor - 1, -1): product = i * j if is_palindrome(product) and product > largest_palindrome: largest_palindrome = product return largest_palindrome"},{"question":"Problem Statement: Determine the Jedi Master. Input First line of input contains N – No of Jedi candidates. (1 ≤ N ≤ 50) Next N lines of input each contain a string representing a Jedi candidate\'s name and an integer representing their Force power level separated by a space. The name will consist of lowercase letters (3 ≤ name length ≤ 20) and the power level will be a positive integer (1 ≤ power ≤ 1000). Output The output should contain a single line: - The name of the Jedi candidate with the highest power level. - If there is a tie, output the name that comes lexicographically first. SAMPLE INPUT 4 anakin 850 yoda 950 mace 950 obiwan 920 SAMPLE OUTPUT mace","solution":"def find_jedi_master(candidates): Returns the name of the Jedi candidate with the highest power level. If there\'s a tie, the lexicographically first name is chosen. jedi_master_name = \'\' max_power = -1 for candidate in candidates: name, power = candidate.split() power = int(power) if power > max_power or (power == max_power and name < jedi_master_name): jedi_master_name = name max_power = power return jedi_master_name"},{"question":"You are given an array of integers. Your task is to determine how many pairs of indices (i, j) exist such that i < j and the sum of the elements at these indices is even. Input The first line contains a single integer n (1 ≤ n ≤ 10^5), the number of elements in the array. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 10^9), the elements of the array. Output Print a single number, the number of such pairs (i, j) where i < j and the sum of ai and aj is even. Examples Input 5 1 2 3 4 5 Output 4 Input 3 2 4 6 Output 3 Note In the first example, the pairs with an even sum are: - (1, 3) -> 1 + 3 = 4 (even) - (1, 5) -> 1 + 5 = 6 (even) - (2, 4) -> 2 + 4 = 6 (even) - (3, 5) -> 3 + 5 = 8 (even) In the second example, the pairs with an even sum are: - (1, 2) -> 2 + 4 = 6 (even) - (1, 3) -> 2 + 6 = 8 (even) - (2, 3) -> 4 + 6 = 10 (even)","solution":"def count_even_sum_pairs(n, array): Returns the number of pairs (i, j) such that i < j and the sum of elements at these indices is even. # Separate the numbers into evens and odds even_count = sum(1 for x in array if x % 2 == 0) odd_count = n - even_count # Any pair of evens or pair of odds will produce an even sum # Hence, count the pairs of even numbers and odd numbers even_pairs = even_count * (even_count - 1) // 2 odd_pairs = odd_count * (odd_count - 1) // 2 # Total valid pairs return even_pairs + odd_pairs"},{"question":"In a distant magical land, there exists a unique festival celebrated for N consecutive days. During the festival, each day is marked with a special event that can either be \\"joyful\\" or \\"gloomy\\". Given an array of integers representing the \\"joyfulness\\" levels for each of the N days, where a positive integer indicates a \\"joyful\\" event and a negative integer indicates a \\"gloomy\\" event, your task is to find the longest subarray such that the sum of joyfulness levels in that subarray is zero. If there are multiple subarrays with the same length, consider the one that appears first. If there\'s no such subarray, return -1. # Input - The first line contains an integer T, the number of test cases. Each test case consists of two lines. - The first line of a test case contains an integer N, the number of days. - The second line contains N integers, representing the joyfulness levels for each day. # Output For each test case, output the length of the longest subarray with zero sum. If no such subarray exists, output -1. # Constraints - 1 ≤ T ≤ 100 - 1 ≤ N ≤ 10^5 - -10^9 ≤ joyfulness level ≤ 10^9 - The sum of N over all tests does not exceed 10^6 # Subtasks Subtask #1 (100 points): original constraints # Sample Input 3 5 1 -1 3 2 -2 4 1 2 3 4 6 1 -1 2 -2 3 -3 # Sample Output 2 -1 6 # Explanation Test case 1: The subarray from index 0 to 1 (inclusive) has a zero sum (1 + -1 = 0). Another subarray from index 3 to 4 (inclusive) also has a zero sum (2 + -2 = 0). The longest one has length 2. Test case 2: There is no subarray with a zero sum. Test case 3: The subarray from index 0 to 5 (inclusive) has a zero sum (1 + -1 + 2 + -2 + 3 + -3 = 0). The length is 6.","solution":"def longest_zero_sum_subarray(T, test_cases): results = [] for case in test_cases: N, arr = case prefix_sum = 0 index_map = {} max_len = 0 for i in range(N): prefix_sum += arr[i] if prefix_sum == 0: max_len = i + 1 if prefix_sum in index_map: max_len = max(max_len, i - index_map[prefix_sum]) else: index_map[prefix_sum] = i results.append(max_len if max_len > 0 else -1) return results"},{"question":"Problem Description You are a software engineer working on a project that involves scheduling tasks. Each task has a start time and an end time, and you want to find the maximum number of non-overlapping tasks that can be scheduled. However, there\'s a twist: You want to maximize not only the number of non-overlapping tasks but also the total duration of these tasks. Consider a list of tasks where each task is represented by a tuple (startTime, endTime). The startTime and endTime are inclusive. Your task is to write a function that takes a list of tasks and returns the maximum total duration of the selected non-overlapping tasks. Input - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of tasks. - The next N lines contain two integers each, the startTime and endTime of a task. Output For each test case, print the maximum total duration of non-overlapping tasks in a single line. Constraints - 1 ≤ T ≤ 10 - 1 ≤ N ≤ 10^5 - 1 ≤ startTime < endTime ≤ 10^9 Example Input: 2 3 1 3 2 5 4 6 4 1 2 2 3 3 4 4 5 Output: 4 4 Explanation Case 1: There are three tasks. The selected non-overlapping tasks are (1, 3) and (4, 6), so the total duration is (3 - 1) + (6 - 4) = 4. Case 2: There are four tasks. The selected non-overlapping tasks can be (1, 2), (2, 3),(3, 4) and (4, 5), so the total duration is (2 - 1) + (3 - 2) + (4 - 3) + (5 - 4) = 4.","solution":"def max_non_overlapping_task_duration(test_cases): results = [] for tasks in test_cases: # Sort the tasks based on the end time tasks.sort(key=lambda x: x[1]) total_duration = 0 last_end_time = 0 for start, end in tasks: if start >= last_end_time: total_duration += (end - start) last_end_time = end results.append(total_duration) return results def process_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) index = 1 test_cases = [] for _ in range(T): N = int(lines[index]) index += 1 tasks = [] for _ in range(N): start, end = map(int, lines[index].split()) tasks.append((start, end)) index += 1 test_cases.append(tasks) return max_non_overlapping_task_duration(test_cases)"},{"question":"In a given binary tree, determine the maximum level sum. The level sum of a binary tree is the sum of the values of its nodes at a given level. You need to find the level with the maximum sum and return that sum. If the tree is empty, return 0. Example: Input: 1 / 2 3 / 4 5 8 / 6 7 Output: 17 Explanation: The level with the maximum sum is the third level, i.e., 4 + 5 + 6 + 7 = 22. Your Task: You don\'t need to read or print anything. Your task is to complete the function maxLevelSum(), which takes the root of the binary tree as input parameter and returns the maximum level sum. Expected Time Complexity: O(n), where n is the number of nodes in the tree. Expected Auxiliary Space Complexity: O(w), where w is the maximum width of the tree. Constraints: 1. The number of nodes in the tree is in the range [0, 10^4]. 2. -10^5 ≤ Node value ≤ 10^5.","solution":"from collections import deque class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def maxLevelSum(root): if not root: return 0 max_sum = float(\'-inf\') queue = deque([root]) while queue: level_sum = 0 for _ in range(len(queue)): node = queue.popleft() level_sum += node.val if node.left: queue.append(node.left) if node.right: queue.append(node.right) max_sum = max(max_sum, level_sum) return max_sum"},{"question":"You are given a list of events coded as strings. Each event is either a message of a new process or a message indicating that a process has ended. An event is represented by a string that starts with either \\"START\\" or \\"END\\" followed by a number (the ID of the process). For example, \\"START1\\" means that process 1 has started and \\"END1\\" means that process 1 has ended. You need to determine how many processes have started but not yet ended at the end of the given list of events. -----Input----- - The first line of input contains an integer n (1 ≤ n ≤ 2 * 10^5), the number of events. - The next n lines each contain a single event string as described above. -----Output----- Print the number of processes that have started but not ended. -----Examples----- Input 5 START1 START2 END1 START3 END3 Output 1 Input 3 START1 START2 END1 Output 1 Input 4 START4 END4 START5 END5 Output 0 -----Note----- In the first example, after processing all the events, only process 2 is still running, so the output is 1. In the second example, process 1 has ended, but process 2 is still running, so the output is 1. In the third example, both processes have started and ended, so there are no running processes left, so the output is 0.","solution":"def count_unended_processes(n, events): started_processes = set() ended_processes = set() for event in events: if event.startswith(\\"START\\"): process_id = event[5:] started_processes.add(process_id) elif event.startswith(\\"END\\"): process_id = event[3:] if process_id in started_processes: ended_processes.add(process_id) return len(started_processes - ended_processes)"},{"question":"Given a string S of length N consisting of lowercase alphabets, you are required to find the number of distinct substrings of length exactly K that are palindromes. A palindrome is a string that reads the same backward as forward. For example, in the string \\"abba\\", \\"abba\\" is a palindrome but \\"ab\\" is not. -----Input----- The first line contains a string S of length N. The second line contains an integer K which represents the length of the substring. -----Output----- Print a single integer denoting the number of distinct palindromic substrings of length K. -----Constraints----- - 1 leq N leq 10^5 - 1 leq K leq N -----Example Input----- abacaba 3 -----Example Output----- 2 -----Explanation:----- Query: For the input string \\"abacaba\\" and K=3, the distinct palindromic substrings of length 3 are \\"aba\\" and \\"aca\\". Therefore, the output is 2.","solution":"def count_distinct_palindromic_substrings(S, K): Returns the number of distinct palindromic substrings of length K in string S. def is_palindrome(s): return s == s[::-1] substrings = set() for i in range(len(S) - K + 1): substring = S[i:i + K] if is_palindrome(substring): substrings.add(substring) return len(substrings)"},{"question":"A company wants to conduct a project which consists of several tasks. Each task has a start time and an end time. The project manager needs to find the maximum number of tasks that do not overlap and can be completed by a single individual. Each task has a start time (S[i]) and an end time (E[i]) such that (0 ≤ S[i] < E[i] ≤ 10^4). ------ Input Format ------ - The first line of input contains a single integer (N) denoting the number of tasks. - The next (N) lines contain two space-separated integers each, representing the start time (S[i]) and the end time (E[i]) of the (i)-th task. ------ Output Format ------ Output a single integer, the maximum number of tasks that can be performed without overlapping. ------ Constraints ------ (1 ≤ N ≤ 10^5) (0 ≤ S[i] < E[i] ≤ 10^4) ------ Sample Input ------ 5 1 2 3 4 0 6 5 7 8 9 ------ Sample Output ------ 4 ------ Explanation ------ - Tasks ((1, 2)), ((3, 4)), ((5, 7)), and ((8, 9)) do not overlap with each other. So a maximum of 4 tasks can be performed by a single individual.","solution":"def max_non_overlapping_tasks(N, tasks): Finds the maximum number of non-overlapping tasks that can be completed. Parameters: N (int): The number of tasks. tasks (list of tuple): A list of tuples where each tuple contains the start and end time of a task. Returns: int: The maximum number of non-overlapping tasks. # Sort tasks by their end time tasks.sort(key=lambda x: x[1]) # Initiate variables to keep track of the count of non-overlapping tasks # and the end time of the last selected task count = 0 last_end_time = -1 for start, end in tasks: if start >= last_end_time: # If start time of current task is greater than or equal to the end # time of the last selected task, select this task count += 1 last_end_time = end return count"},{"question":"A company has a unique system for calculating employee bonuses. Each employee has a performance score associated with them, ranging from 1 to 100. The company\'s policy is as follows: - If the score is between 90 and 100, the bonus is 20% of the employee\'s base salary. - If the score is between 75 and 89, the bonus is 10% of the employee\'s base salary. - If the score is between 50 and 74, the bonus is 5% of the employee\'s base salary. - If the score is below 50, there is no bonus. Input: First line of input contains N – the number of employees. Each of the next N lines contains two integers separated by a space: the base salary (an integer ranging from 1000 to 10000) and the performance score (an integer ranging from 1 to 100). Output: Output N lines, each containing the calculated bonus for the corresponding employee. Constraints: 1 ≤ N ≤ 200 1000 ≤ Base Salary ≤ 10000 1 ≤ Performance Score ≤ 100 SAMPLE INPUT 5 5000 95 7000 85 3000 65 8000 45 9000 76 SAMPLE OUTPUT 1000 700 150 0 900","solution":"def calculate_bonuses(employees): Calculate the bonus for each employee based on their performance score. Args: employees (list of tuples): Each tuple contains the base salary and performance score of an employee. Returns: list: List of calculated bonuses for each employee. bonuses = [] for (base_salary, score) in employees: if 90 <= score <= 100: bonus = 0.20 * base_salary elif 75 <= score <= 89: bonus = 0.10 * base_salary elif 50 <= score <= 74: bonus = 0.05 * base_salary else: bonus = 0 bonuses.append(int(bonus)) return bonuses # Sample usage # N = 5 # employees = [(5000, 95), (7000, 85), (3000, 65), (8000, 45), (9000, 76)] # print(calculate_bonuses(employees)) # Output: [1000, 700, 150, 0, 900]"},{"question":"You are given a list of strings where each string is a mix of digits and characters. Adjust each string to separate digits from letters while keeping their relative order in each category. Once separated, return two lists with the first containing only the digits and the second containing only the letters in their original order from each string. For example, given the list [\\"a1b2c3\\", \\"x9y8z7\\", \\"7k6b5\\"], the output should be: - Digits: [\\"123\\", \\"987\\", \\"765\\"] - Letters: [\\"abc\\", \\"xyz\\", \\"kb\\"] Write a function that achieves this separation and returns the two lists as specified. # Constraints: - The length of the list will be at most 100. - Each string will have a maximum length of 100 characters. # Input: - The input consists of a list of strings. # Output: - Two lists: the first containing only the digits from each input string, and the second containing only the letters. # Examples: Input: ```python [\\"a1b2c3\\", \\"x9y8z7\\", \\"7k6b5\\"] ``` Output: ```python ([\\"123\\", \\"987\\", \\"765\\"], [\\"abc\\", \\"xyz\\", \\"kb\\"]) ``` Input: ```python [\\"dynamic2021programming\\", \\"123abc\\"] ``` Output: ```python ([\\"2021\\", \\"123\\"], [\\"dynamicprogramming\\", \\"abc\\"]) ``` Input: ```python [\\"abc\\", \\"123\\"] ``` Output: ```python ([\\"\\", \\"123\\"], [\\"abc\\", \\"\\"]) ```","solution":"def separate_digits_and_letters(input_list): digits_list = [] letters_list = [] for string in input_list: digits = \'\'.join([char for char in string if char.isdigit()]) letters = \'\'.join([char for char in string if char.isalpha()]) digits_list.append(digits) letters_list.append(letters) return digits_list, letters_list # Example usage: # input_list = [\\"a1b2c3\\", \\"x9y8z7\\", \\"7k6b5\\"] # separate_digits_and_letters(input_list) # Output should be ([\'123\', \'987\', \'765\'], [\'abc\', \'xyz\', \'kb\'])"},{"question":"Zara and Leo are playing a game using a robot on a 2D grid where some cells are obstacles. The grid consists of R rows and C columns. The robot starts at the top-left corner of the grid and needs to reach the bottom-right corner. The robot can move to any of the four adjacent cells (left, right, up, down) unless they are outside the grid or obstructed by an obstacle. The goal is to determine the minimum number of moves required for the robot to reach the bottom-right corner of the grid. If it is not possible for the robot to reach the bottom-right corner, return -1. -----Input----- The first line of input contains two integers R and C (1 le R, C le 1000), the number of rows and columns, respectively. The next R lines contain C characters each, where \'.\' represents an empty cell and \'#\' represents an obstacle. -----Output----- In the first and only line of output, print a single integer, the minimum number of moves required for the robot to reach the bottom-right corner, or -1 if it is not possible. -----Examples----- Sample Input 1: 3 3 ... .#. ... Sample Output 1: 4 Sample Input 2: 3 3 ..# .#. #.. Sample Output 2: -1","solution":"from collections import deque def min_moves(R, C, grid): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] if grid[0][0] == \'#\' or grid[R-1][C-1] == \'#\': return -1 queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() if r == R-1 and c == C-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < R and 0 <= nc < C and (nr, nc) not in visited and grid[nr][nc] == \'.\': visited.add((nr, nc)) queue.append((nr, nc, dist + 1)) return -1"},{"question":"Write a function **longest_word** that takes a list of strings as input and returns the longest string in the list. If two or more strings have the same maximum length, the function should return the first one encountered. Example longest_word([\\"apple\\", \\"banana\\", \\"cherry\\"]) returns \\"banana\\" longest_word([\\"cat\\", \\"dinosaur\\", \\"elephant\\"]) returns \\"dinosaur\\"","solution":"def longest_word(words): Returns the longest string in the list of words. If two or more strings have the same maximum length, the function returns the first one encountered. :param words: List of strings :return: Longest string in the list if not words: return \\"\\" longest = words[0] for word in words: if len(word) > len(longest): longest = word return longest"},{"question":"You are working on a new strategy game where players can construct and upgrade buildings. Each building has a certain level, starting from level 1, and can be upgraded to a maximum level k. Upgrading a building from level i to level i+1 takes gi coins, where gi is a constant depending on the type of the building and the level i. In the game, there are different types of buildings, each type with its own distinct gi sequence. Your task is to determine the minimum amount of coins needed to upgrade each building to the maximum level. Input The first line contains an integer t (1 ≤ t ≤ 100) - the number of building types. Each of the next t lines starts with an integer k (2 ≤ k ≤ 100) - the maximum level of that building type. The next k-1 integers are g1, g2, ..., g(k-1) (1 ≤ gi ≤ 10^4) - the cost of upgrading a building from level i to level i+1. Output For each building type, output a single integer - the minimum amount of coins needed to upgrade that building to the maximum level. Example Input 2 3 10 20 4 5 10 15 Output 30 30 Explanation For the first building type, the cost to upgrade from level 1 to level 2 is 10 coins, and from level 2 to level 3 is 20 coins. Therefore, the total cost to reach the maximum level 3 is 10 + 20 = 30 coins. For the second building type, the cost to upgrade from level 1 to level 2 is 5 coins, from level 2 to level 3 is 10 coins, and from level 3 to level 4 is 15 coins. Thus, the total cost to reach the maximum level 4 is 5 + 10 + 15 = 30 coins.","solution":"def min_upgrade_cost(t, building_data): Calculate the minimum amount of coins needed to upgrade each building to the maximum level. Parameters: t (int): Number of building types. building_data (list of lists): List containing sublists, each sublist contains k followed by k-1 costs. Returns: list of int: Minimum coins needed for each building type. results = [] for data in building_data: k = data[0] costs = data[1:] results.append(sum(costs)) return results"},{"question":"Matthew is organizing a music playlist for his upcoming road trip and wants to avoid playing songs of the same genre back-to-back. He has a list of n songs, where each song has a unique name and is associated with a genre. Matthew has ensured that he included at least 3 different genres. He would like to create the longest possible playlist such that no two consecutive songs share the same genre. -----Input----- The first line contains a single integer n (3 ≤ n ≤ 1000) representing the number of songs in the list. The second line contains n unique space-separated strings, where each string is the name of a song. Each song name consists of lowercase English letters only. The third line contains n space-separated strings, where the ith string is the genre of the ith song. Each genre consists of lowercase English letters only. -----Output----- Output the names of the songs in one possible longest playlist such that no two consecutive songs share the same genre. If multiple solutions exist, print any one of them. -----Example----- Input: 7 song1 song2 song3 song4 song5 song6 song7 rock jazz pop rock pop jazz pop Output: song1 song2 song3 song4 song6 song7 song5 Explanation: One possible solution is \\"song1 song2 song3 song4 song6 song7 song5\\" where no two consecutive songs share the same genre. Other valid solutions might exist.","solution":"def create_longest_playlist(n, songs, genres): # Creating a list of tuples where each tuple contains a song and its genre song_list = list(zip(songs, genres)) # Sort songs by genre to facilitate the creation of non-repetitive genre playlist song_list.sort(key=lambda x: x[1]) # Dictionary to keep track of last added song genre last_genre = None playlist = [] while song_list: for i in range(len(song_list)): if song_list[i][1] != last_genre: playlist.append(song_list[i][0]) last_genre = song_list.pop(i)[1] break else: # In case we can\'t find a different genre (it means we are done) break return playlist"},{"question":"# Introduction Marketing metrics are vital for understanding the success and reach of a campaign. In digital advertising, one important metric is the Click-Through Rate (CTR). The CTR is calculated by dividing the number of clicks an ad receives by the number of times it is shown (impressions), then multiplying the resulting figure by 100 to get a percentage. # Task In this task, you are provided with a list of advertisement impressions and the corresponding number of clicks. Your goal is to write a function that calculates and returns the average Click-Through Rate (CTR) for multiple ad campaigns. # Rules 1. Your function should be named `average_ctr`. 2. The function takes a single parameter `campaigns`, which is a list of tuples. 3. Each tuple contains two integers: - The first integer is the number of impressions (`impressions`). - The second integer is the number of clicks (`clicks`). 4. The CTR for each campaign is calculated as `(clicks / impressions) * 100`. 5. You must calculate the average CTR across all campaigns. 6. If a campaign has zero impressions, its CTR should be considered as 0 for the purposes of the average calculation. 7. Return the average CTR rounded to 2 decimal places. # Example 1 ```python # Single campaign with 100 impressions and 25 clicks # CTR for this campaign is (25 / 100) * 100 = 25.0 # Since there\'s only one campaign, the average CTR is 25.0 average_ctr([(100, 25)]) => 25.0 ``` # Example 2 ```python # Two campaigns: # First campaign: 200 impressions and 50 clicks => (50 / 200) * 100 = 25.0 # Second campaign: 300 impressions and 30 clicks => (30 / 300) * 100 = 10.0 # Average CTR => (25.0 + 10.0) / 2 = 17.5 average_ctr([(200, 50), (300, 30)]) => 17.5 ``` # Example 3 ```python # Campaigns with zero impressions should have a CTR of 0 # First campaign: 0 impressions and 10 clicks => 0 # Second campaign: 400 impressions and 40 clicks => (40 / 400) * 100 = 10.0 # Average CTR => (0 + 10.0) / 2 = 5.0 average_ctr([(0, 10), (400, 40)]) => 5.0 ``` # Example 4 ```python # Mixed campaigns with various impressions and clicks # First campaign: 50 impressions and 10 clicks => (10 / 50) * 100 = 20.0 # Second campaign: 150 impressions and 30 clicks => (30 / 150) * 100 = 20.0 # Third campaign: 200 impressions and 50 clicks => (50 / 200) * 100 = 25.0 # Average CTR => (20.0 + 20.0 + 25.0) / 3 = 21.67 average_ctr([(50, 10), (150, 30), (200, 50)]) => 21.67 ``` # Returns Return the average CTR across all campaigns as a float, rounded to 2 decimal places.","solution":"def average_ctr(campaigns): total_ctr = 0 for impressions, clicks in campaigns: if impressions == 0: ctr = 0 else: ctr = (clicks / impressions) * 100 total_ctr += ctr average_ctr = total_ctr / len(campaigns) return round(average_ctr, 2)"},{"question":"You are given a list of n integers where each integer appears exactly twice, except for one integer which appears exactly once. Write a program to find the single integer that does not have a pair. Input The first line of the input contains an integer t (1 ≤ t ≤ 100), denoting the number of test cases. The following lines contain the descriptions of the test sets, each set consists of two lines. The first line contains an integer n (1 ≤ n ≤ 10^5), denoting the number of integers. The second line contains n integers separated by spaces. The sum of n over all test cases in the input does not exceed 10^6. Output For each test case, print the single integer that does not have a pair. Example Input 3 7 2 3 2 4 4 3 5 5 1 1 2 2 3 3 7 8 7 Output 5 3 8","solution":"def find_single(nums): Given a list of integers where each integer appears exactly twice except for one integer which appears exactly once, returns the single integer. xor_result = 0 for num in nums: xor_result ^= num return xor_result def solve(test_cases): results = [] for case in test_cases: n, nums = case results.append(find_single(nums)) return results"},{"question":"Pal likes solving puzzles in his free time. Recently, he encountered a new type of puzzle that involves characters from the string \\"ABC\\". He needs to construct a sequence following a strict rule: no two adjacent characters in the resulting sequence should be the same. Help Pal solve this puzzle by constructing a sequence of length n using the characters \\"A\\", \\"B\\", and \\"C\\" such that no two adjacent characters are the same. If it is impossible to construct such a sequence, print \\"Not Possible\\". Input Single line of input containing the value of n (the length of the sequence). Output Print the resulting sequence if possible. If it is not possible to construct such a sequence, print \\"Not Possible\\". Limits 1 ≤ n ≤ 1000 SAMPLE INPUT 4 SAMPLE OUTPUT ABCA","solution":"def construct_sequence(n): Constructs a sequence of length n using characters \'A\', \'B\', \'C\' such that no two adjacent characters are the same. If it is impossible, returns \\"Not Possible\\". if n < 1 or n > 1000: return \\"Not Possible\\" characters = \\"ABC\\" result = [] for i in range(n): result.append(characters[i % 3]) return \\"\\".join(result)"},{"question":"Alice is learning about strings and their manipulations in her computer science class. One day, her teacher gave her a problem that she found interesting but challenging. She needs to determine the number of distinct substrings that can be formed from a given string. A substring is defined as a contiguous sequence of characters within a string. For example, the substrings of \\"abc\\" are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", and \\"abc\\". Alice is struggling to find an efficient way to solve this problem due to the potentially large number of substrings, so she seeks your help in solving it. Input: The first line contains an integer T, the number of test cases. Each of the next T lines contains a string S consisting of lowercase English letters. Output: For each test case, print the number of distinct substrings that can be formed from the given string. Constraints: 1 ≤ T ≤ 100 1 ≤ |S| ≤ 1000 SAMPLE INPUT 2 abcd aaa SAMPLE OUTPUT 10 3 Explanation: For the string \\"abcd\\": Substrings are \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\". Total 10 distinct substrings. For the string \\"aaa\\": Substrings are \\"a\\", \\"aa\\", and \\"aaa\\". Total 3 distinct substrings.","solution":"def count_distinct_substrings(T, strings): results = [] for s in strings: substrings = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): substrings.add(s[i:j]) results.append(len(substrings)) return results"},{"question":"Write a function called \\"calculateDiscount\\" that accepts two parameters. The first parameter, \\"price,\\" is the original price of an item, and the second parameter, \\"isMember,\\" is a boolean indicating whether the buyer is a store member. The function should return the price after applying the discount. If the buyer is a member of the store, they receive a 20% discount. Otherwise, a 10% discount is applied. Examples: ```if-not:julia,racket calculateDiscount(100, true) -> 80 calculateDiscount(100, false) -> 90 calculateDiscount(200, true) -> 160 calculateDiscount(200, false) -> 180 ```","solution":"def calculateDiscount(price, isMember): Calculate the price after applying the discount. Parameters: - price (float): The original price of the item. - isMember (bool): Whether the buyer is a member of the store. Returns: - float: The price after applying the discount. if isMember: return price * 0.8 else: return price * 0.9"},{"question":"You are given two strings, A and B, of length N representing two DNA sequences composed of characters `A`, `C`, `G`, and `T`. Your task is to determine the number of positions where the characters in A and B differ. Constraints: * 1 ≤ N ≤ 100,000 * A and B are both strings of length N consisting only of the characters `A`, `C`, `G`, `T`. Input: The input is provided as follows: N A B Output: Output a single integer representing the number of positions where A and B differ. Examples: Input: 5 ACGTT ACGGT Output: 1 Input: 6 AAGGCT TTCCGG Output: 6 Input: 10 AAACCCGGGT AAACTCGGGC Output: 2","solution":"def count_differences(N, A, B): Returns the number of positions where the characters in A and B differ. Parameters: N (int): Length of the sequences A and B. A (str): DNA sequence of length N. B (str): DNA sequence of length N. Returns: int: Number of positions where A and B differ. differences = 0 for i in range(N): if A[i] != B[i]: differences += 1 return differences"},{"question":"Write a function `move_zeroes` in Python that takes a list of integers and moves all zero elements to the end of the list while maintaining the order of the non-zero elements. The function should operate in-place and have a time complexity of O(n). Function Signature: `def move_zeroes(nums: List[int]) -> None` **Example** Input: ```python nums = [0, 1, 0, 3, 12] ``` Output: ```python print(nums) # Output: [1, 3, 12, 0, 0] ``` Input: ```python nums = [4, 2, 4, 0, 0, 3, 0, 5, 1, 0] ``` Output: ```python print(nums) # Output: [4, 2, 4, 3, 5, 1, 0, 0, 0, 0] ```","solution":"from typing import List def move_zeroes(nums: List[int]) -> None: Move all zeros in the list to the end in-place while maintaining the order of non-zero elements. last_non_zero_found_at = 0 # Move all non-zero numbers forward for num in nums: if num != 0: nums[last_non_zero_found_at] = num last_non_zero_found_at += 1 # Fill remaining positions with zeros for i in range(last_non_zero_found_at, len(nums)): nums[i] = 0"},{"question":"You are given an array of n integers, representing customer orders collected at a restaurant. Each integer in the array denotes the order number and can be repeated if the same order was placed multiple times. The restaurant has introduced a new promotional scheme where every three consecutive orders are combined to form a special combo. Each combo has a value equal to the sum of the orders that form it. Your task is to determine the list of all unique combo values that can be generated from the given list of orders. Write a function `unique_combos` that takes an integer `n` and a list of integers `orders`, and returns a list of integers representing the unique combo values in ascending order. Input - An integer `n` (1 ≤ n ≤ 100), representing the number of orders. - A list of `n` integers (1 ≤ orders[i] ≤ 1000), representing the order numbers. Output - A list of integers, representing the unique combo values in ascending order. Example Input ``` 6 [1, 2, 3, 4, 5, 6] ``` Output ``` [6, 9, 12, 15] ``` Explanation The consecutive combos that can be formed are: - `[1, 2, 3]` with sum `6` - `[2, 3, 4]` with sum `9` - `[3, 4, 5]` with sum `12` - `[4, 5, 6]` with sum `15` So, the unique combo values are `[6, 9, 12, 15]`.","solution":"def unique_combos(n, orders): Returns a list of unique combo values formed by summing every three consecutive orders. Parameters: n (int): Number of orders. orders (list): A list of integers representing the order numbers. Returns: list: A sorted list of unique combo values. if n < 3: return [] combos = set() for i in range(n - 2): combo_sum = orders[i] + orders[i + 1] + orders[i + 2] combos.add(combo_sum) return sorted(combos)"},{"question":"In many fields such as statistics, machine learning, and data analysis, normalization of vector data is a common preprocessing step. One common method to normalize a vector is to compute its L2 norm (also known as the Euclidean norm) and then divide each component of the vector by this norm. The L2 norm of a vector mathbf{v} = [v_1, v_2, ldots, v_n] is defined as: [ |mathbf{v}|_2 = sqrt{sum_{i=1}^{n} v_i^2} ] Once the L2 norm is computed, each component of the vector is divided by this value to get the normalized vector: [ mathbf{u} = left[dfrac{v_1}{|mathbf{v}|_2}, dfrac{v_2}{|mathbf{v}|_2}, ldots, dfrac{v_n}{|mathbf{v}|_2}right] ] You are given a vector of n real numbers, and your task is to compute its L2 norm and then return the normalized vector. -----Input----- An integer n (1 leq n leq 1000), followed by n space-separated real numbers representing the components of the vector mathbf{v}. -----Output----- An array of n real numbers representing the normalized vector mathbf{u}. Each component of mathbf{u} should be accurate to an absolute or relative error of at most 10^{-9}. -----Examples----- Sample Input: 3 3.0 4.0 0.0 Sample Output: 0.6 0.8 0.0","solution":"import math def normalize_vector(n, vector): Normalize a vector using its L2 norm. Parameters: n : int : the dimension of the vector vector : list of float : the components of the vector Returns: list of float : the normalized vector l2_norm = math.sqrt(sum(x**2 for x in vector)) if l2_norm == 0: return [0.0] * n return [x / l2_norm for x in vector] # Example usage: # n = 3 # vector = [3.0, 4.0, 0.0] # print(normalize_vector(n, vector)) # Output should be [0.6, 0.8, 0.0]"},{"question":"A university wishes to design a new system to manage student enrollments for courses. Each student can enroll in a maximum of K courses out of the total available courses. Each course has a limited number of slots, and not all courses are available for every student due to prerequisites. The university\'s admin wants to maximize the total number of students enrolled in any course, constrained by the maximum number of slots per course. Your task is to implement a system that assigns students to courses optimizing for the total enrollments. ------ Input Format ------ - The first line of the input contains two integers N and M, the number of students and the number of courses respectively. - The second line contains N space-separated integers, each representing the maximum number of courses each student can enroll in, i.e., K_i for the i^{th} student. - The third line contains M space-separated integers, each representing the number of slots available for each respective course, i.e., S_j for the j^{th} course. - Each of the next N lines contains M binary digits. The j^{th} digit of the i^{th} line indicates whether the i^{th} student is eligible to enroll in the j^{th} course (1 if eligible, 0 if not eligible). ------ Output Format ------ - Output M space-separated integers, where the i^{th} integer represents the number of slots occupied in the i^{th} course after the assignments are made to maximize total enrollments. ------ Constraints ------ 1 ≤ N, M ≤ 1000 1 ≤ K_i ≤ M 1 ≤ S_j ≤ 100 ------ Sample Input 1 ------ 3 3 2 1 2 1 2 1 1 0 1 0 1 1 1 1 0 ------ Sample Output 1 ------ 1 2 1 ------ Explanation 1 ------ - Student 1 can enroll in two courses, enrolls in courses 1 and 3. - Student 2 can enroll in one course, enrolls only in course 2. - Student 3 can enroll in two courses, but course 2 gets filled by student 2, so it enrolls only in course 1. After optimal enrollments, the total slots filled are: - Course 1: 1 student from student 1 or 3 - Course 2: 2 students, one from student 2 - Course 3: 1 student from student 1","solution":"def optimize_enrollments(N, M, K, S, eligibility): # Initialize the result list which will store the count of students in each course result = [0] * M # Initialize a list that keeps track of current enrolled courses for each student student_courses = [[] for _ in range(N)] # List to keep track of students\' remaining course slots student_remaining = K[:] while True: enrolled = False for i in range(N): for j in range(M): if eligibility[i][j] == 1 and result[j] < S[j] and student_remaining[i] > 0 and j not in student_courses[i]: student_courses[i].append(j) result[j] += 1 student_remaining[i] -= 1 enrolled = True if not enrolled: break return result"},{"question":"# Task You are designing a game simulation that involves a collection of magical creatures, each with a unique set of attributes. Each creature can either be a dragon or a unicorn, and they have different properties related to their species. You have decided to model these creatures using Python classes and dictionaries. Class Definitions First, you need to define two classes: `Dragon` and `Unicorn`. Each class should have an `__init__` method that initializes the specific properties related to the species. For `Dragon`: - `name` (string) - `fire_power` (integer) - `scale_thickness` (integer) For `Unicorn`: - `name` (string) - `horn_length` (integer) - `magic_power` (integer) Example: ```python class Dragon: def __init__(self, name, fire_power, scale_thickness): self.name = name self.fire_power = fire_power self.scale_thickness = scale_thickness class Unicorn: def __init__(self, name, horn_length, magic_power): self.name = name self.horn_length = horn_length self.magic_power = magic_power ``` Function Definitions Next, create the following functions: 1. **create_creature**: This function takes a dictionary with creature type and attributes and returns an instance of either `Dragon` or `Unicorn`. - Input: `creature_dict` (A dictionary with keys: \\"type\\", \\"name\\", and other relevant attributes) - Output: An instance of `Dragon` or `Unicorn` 2. **get_strongest_creature**: This function takes a list of creature instances and returns the creature with highest power attribute (fire_power or magic_power). In case of a tie, the first creature in the list with the highest power should be returned. - Input: `creatures` (A list of dragon and unicorn instances) - Output: The instance of the strongest creature 3. **group_by_type**: This function takes a list of creature instances and returns a dictionary grouping creatures by their type. - Input: `creatures` (A list of dragon and unicorn instances) - Output: A dictionary with keys \\"Dragon\\" and \\"Unicorn\\", and corresponding lists of instances as values # Examples of Usage ```python creature_data = [ {\\"type\\": \\"Dragon\\", \\"name\\": \\"Smaug\\", \\"fire_power\\": 95, \\"scale_thickness\\": 10}, {\\"type\\": \\"Unicorn\\", \\"name\\": \\"Sparkle\\", \\"horn_length\\": 50, \\"magic_power\\": 80}, {\\"type\\": \\"Dragon\\", \\"name\\": \\"Fafnir\\", \\"fire_power\\": 100, \\"scale_thickness\\": 20}, {\\"type\\": \\"Unicorn\\", \\"name\\": \\"Twilight\\", \\"horn_length\\": 40, \\"magic_power\\": 85} ] creatures = [create_creature(data) for data in creature_data] # Example calls strongest = get_strongest_creature(creatures) # Should return the instance of \\"Fafnir\\" grouped_creatures = group_by_type(creatures) # Should return: # { # \\"Dragon\\": [<Dragon instance Smaug>, <Dragon instance Fafnir>], # \\"Unicorn\\": [<Unicorn instance Sparkle>, <Unicorn instance Twilight>] # } ```","solution":"class Dragon: def __init__(self, name, fire_power, scale_thickness): self.name = name self.fire_power = fire_power self.scale_thickness = scale_thickness class Unicorn: def __init__(self, name, horn_length, magic_power): self.name = name self.horn_length = horn_length self.magic_power = magic_power def create_creature(creature_dict): if creature_dict[\'type\'] == \\"Dragon\\": return Dragon(creature_dict[\'name\'], creature_dict[\'fire_power\'], creature_dict[\'scale_thickness\']) elif creature_dict[\'type\'] == \\"Unicorn\\": return Unicorn(creature_dict[\'name\'], creature_dict[\'horn_length\'], creature_dict[\'magic_power\']) else: raise ValueError(\\"Unknown creature type\\") def get_strongest_creature(creatures): strongest = creatures[0] highest_power = creatures[0].fire_power if isinstance(creatures[0], Dragon) else creatures[0].magic_power for creature in creatures[1:]: power = creature.fire_power if isinstance(creature, Dragon) else creature.magic_power if power > highest_power: strongest = creature highest_power = power return strongest def group_by_type(creatures): grouped = {\\"Dragon\\": [], \\"Unicorn\\": []} for creature in creatures: if isinstance(creature, Dragon): grouped[\\"Dragon\\"].append(creature) elif isinstance(creature, Unicorn): grouped[\\"Unicorn\\"].append(creature) return grouped"},{"question":"You are given an array of strings representing mathematical expressions. Each expression will contain two numbers and an operator (+, -, *, or /). Your task is to evaluate these expressions and return the one that yields the highest result. If the highest result is negative or zero, or if there are multiple expressions yielding the same highest result, return the first one among them. For instance: if the input is [\'3+4\', \'10-5\', \'6*2\'], the function should return \'6*2\' as it evaluates to 12 which is the highest result. In case the array is empty, return \'No expressions provided\'.","solution":"def evaluate_expression(expression): Evaluates a single mathematical expression in string form. Supports +, -, *, / operators. return eval(expression) def find_highest_expression(expressions): Finds the mathematical expression from the list that yields the highest result. If the highest result is negative or zero, or there are multiple yielding the same highest, return the first one. If the list is empty, return \'No expressions provided\'. if not expressions: return \'No expressions provided\' highest_result = float(\'-inf\') highest_expression = None for expr in expressions: result = evaluate_expression(expr) if result > highest_result: highest_result = result highest_expression = expr return highest_expression"},{"question":"Given a string S consisting of lowercase and uppercase characters, the task is to replace every character with the character which comes after it in the alphabet (i.e., \'a\' becomes \'b\', \'b\' becomes \'c\', and ... \'z\' becomes \'a\'; similarly, \'A\' becomes \'B\', \'B\' becomes \'C\', and ... \'Z\' becomes \'A\'). If the character is \'z\', it should be replaced with \'a\' and if the character is \'Z\', it should be replaced with \'A\'. Example 1: Input: S = \\"abc\\" Output: bcd Explanation: Replacing each character of the string increases each letter by one position. Example 2: Input: S = \\"AbYz\\" Output: BcZa Explanation: \'A\' becomes \'B\', \'b\' becomes \'c\', \'Y\' becomes \'Z\', and \'z\' becomes \'a\'. User Task: Your task is to complete the function nextAlphabet() which takes a string as input and returns the modified string. You do not need to take any input or print anything. Expected Time Complexity: O(|S|) Expected Auxiliary Space: O(|S|) Constraints: 1 <= |S| <= 10^{5}","solution":"def next_alphabet(S): Replaces each character in the string with the character that comes after it in the alphabet. Uppercase remains uppercase and lowercase remains lowercase. If the character is \'z\' or \'Z\', it wraps around to \'a\' or \'A\' respectively. result = [] for char in S: if \'a\' <= char <= \'z\': if char == \'z\': result.append(\'a\') else: result.append(chr(ord(char) + 1)) elif \'A\' <= char <= \'Z\': if char == \'Z\': result.append(\'A\') else: result.append(chr(ord(char) + 1)) else: result.append(char) # In case there are other characters, they remain the same return \'\'.join(result)"},{"question":"You are given a sequence of integers of length N. In a single operation, you can choose any prefix of the sequence and replace every number in that prefix with the maximum value present within that prefix. You need to determine the minimum number of operations required to make all elements in the sequence equal. -----Constraints----- - 1 leq N leq 10^6 - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N a1 a2 a3 ... aN -----Output----- Print the minimum number of operations required to make all elements in the sequence equal. -----Sample Input----- 5 2 2 1 3 3 -----Sample Output----- 2 Explanation: In the given example, the sequence is [2, 2, 1, 3, 3]. You can perform the operations as follows: 1. Choose the prefix [2, 2, 1] and replace all elements with the maximum value in that prefix which is 2. The sequence becomes [2, 2, 2, 3, 3]. 2. Choose the prefix [2, 2, 2, 3, 3] and replace all elements with the maximum value in that prefix which is 3. The sequence becomes [3, 3, 3, 3, 3]. Thus, a minimum of 2 operations are required.","solution":"def min_operations_to_equalize_sequence(n, sequence): Returns the minimum number of operations required to make all elements in the sequence equal. if n == 1: return 1 # Only one element, already equal unique_elements = set(sequence) return len(unique_elements)"},{"question":"Two robots, Alice and Bob, are placed on a two-dimensional grid. The grid has dimensions MxN. Alice and Bob can both move up, down, left, or right, but they can\'t move into cells occupied by obstacles. Alice and Bob start from their initial positions and try to reach their respective goal positions, coordinating their movements so that they avoid collisions and never occupy the same cell at the same time. The goal is to determine if there exists a sequence of movements that can achieve this or if it’s impossible to do so. Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains two integers M and N representing the dimensions of the grid. The second line contains two pairs of integers Ax, Ay, Bx, By denoting the starting coordinates of Alice and Bob respectively. The third line contains two pairs of integers Gx1, Gy1, Gx2, Gy2 denoting the goal coordinates for Alice and Bob respectively. The next M lines each contain N characters that represent the grid, where \'.\' denotes an empty cell and \'#\' denotes an obstacle. Output For each test case, output \\"YES\\" if a sequence of moves exists for both Alice and Bob to reach their respective goals without colliding, otherwise, \\"NO\\". Constraints 1 <= T <= 10 1 <= M, N <= 50 0 <= Ax, Ay, Bx, By, Gx1, Gy1, Gx2, Gy2 < M, N Example Input: 2 4 4 0 0 3 3 3 0 0 3 ..#. ..#. .#.. ..#. 5 5 0 0 4 4 4 0 0 4 ..#.. ... . ... ..#.. Output: YES NO Explanation: In the first test case, Alice and Bob can successfully navigate to their goals without colliding. In the second test case, it is impossible for both Alice and Bob to reach their goals without colliding or getting stuck.","solution":"from collections import deque def is_valid_move(x, y, grid, M, N): return 0 <= x < M and 0 <= y < N and grid[x][y] == \'.\' def bfs(grid, M, N, start, goal): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] queue = deque([(start[0], start[1], 0)]) visited = set((start[0], start[1])) while queue: x, y, steps = queue.popleft() if (x, y) == goal: return steps for dx, dy in directions: nx, ny = x + dx, y + dy if is_valid_move(nx, ny, grid, M, N) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, steps + 1)) return float(\'inf\') def can_robots_reach_goals(M, N, Ax, Ay, Bx, By, Gx1, Gy1, Gx2, Gy2, grid): # Compute shortest paths for Alice and Bob alice_steps = bfs(grid, M, N, (Ax, Ay), (Gx1, Gy1)) bob_steps = bfs(grid, M, N, (Bx, By), (Gx2, Gy2)) # If either Alice or Bob can\'t reach their goal, return \\"NO\\" if alice_steps == float(\'inf\') or bob_steps == float(\'inf\'): return \\"NO\\" return \\"YES\\" def solve(T, test_cases): results = [] for i in range(T): M, N = test_cases[i][0] Ax, Ay, Bx, By = test_cases[i][1] Gx1, Gy1, Gx2, Gy2 = test_cases[i][2] grid = test_cases[i][3] result = can_robots_reach_goals(M, N, Ax, Ay, Bx, By, Gx1, Gy1, Gx2, Gy2, grid) results.append(result) return results"},{"question":"Alex has a string S and an integer K. Alex wants to transform the string S by performing exactly K operations. In each operation, Alex can choose any character in the string and change it to any other character from \'a\' to \'z\'. Determine if Alex can make the string S consist of exactly one unique character after performing exactly K operations. ------ Input Format ------ - The first line contains an integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains a string S. - The second line of each test case contains an integer K. ------ Output Format ------ For each test case, output YES if Alex can make the string S consist of exactly one unique character after exactly K operations, otherwise output NO. Note that the checker is case-insensitive. So, YES, Yes, yEs are all considered the same. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^{5} 1 ≤ K ≤ |S| ----- Sample Input 1 ------ 3 abc 2 aabb 1 xyz 3 ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test case 1: Alex can change \'b\' and \'c\' to \'a\' to make the string \\"aaa\\". Test case 2: Alex can change only one character, which is not sufficient to make all characters identical. Test case 3: Alex can change \'x\', \'y\', and \'z\' to any same character to make the string consist of a single unique character.","solution":"def can_transform_to_unique_char(S, K): Determine if it is possible to transform the string S into a string of one unique character with exactly K operations. Parameters: S (str): The string to transform. K (int): The number of operations allowed. Returns: str: \\"YES\\" if it is possible, otherwise \\"NO\\". # Count frequency of each character freq = {} for char in S: if char in freq: freq[char] += 1 else: freq[char] = 1 # Find the maximum frequency of a single character max_freq = max(freq.values()) # The number of operations needed to make all characters the same operations_needed = len(S) - max_freq # If K operations are enough to make all characters the same, return \\"YES\\", otherwise return \\"NO\\" if operations_needed <= K: return \\"YES\\" else: return \\"NO\\" def process_test_cases(test_cases): Process multiple test cases. Parameters: test_cases (list): List of tuples (S, K) for each test case. Returns: list: List of results for each test case. results = [] for S, K in test_cases: results.append(can_transform_to_unique_char(S, K)) return results"},{"question":"A small bakery is popular for its variety of bread types. Recently, the owner decided to introduce a promotion: for a certain limited time, a customer can buy a set menu of bread packs where the number of bread pieces in each pack can vary. Given the number of bread pieces in each pack and a total target number of pieces, determine if it is possible to buy exactly that number of pieces using any combination of the available bread packs. Each bread pack can be used multiple times, or not at all. Input - The first line contains an integer `N` (1 ≤ N ≤ 100), representing the number of different types of bread packs. - The second line contains `N` space-separated integers representing the number of pieces in each type of bread pack. - The third line contains an integer `M` (1 ≤ M ≤ 10000), representing the target number of bread pieces. Output Output \\"Yes\\" (without quotes) if it is possible to buy exactly `M` pieces of bread using any combination of the available bread packs. Otherwise, output \\"No\\". Example Input 3 2 3 5 11 Output Yes Input 2 4 6 7 Output No Explanation In the first example, you can get exactly 11 pieces by choosing packs as follows: one pack of 5 pieces and two packs of 3 pieces (5 + 3 + 3 = 11). In the second example, it is not possible to reach exactly 7 pieces by any combination of packs that contain 4 and 6 pieces.","solution":"def can_buy_exact_bread_pieces(n, bread_packs, m): dp = [False] * (m + 1) dp[0] = True for pack in bread_packs: for i in range(pack, m + 1): if dp[i - pack]: dp[i] = True return \\"Yes\\" if dp[m] else \\"No\\""},{"question":"Given a binary tree, write a function that attaches an additional \'next\' pointer to each node such that it points to the next node to its right in the same level. If there is no next node in the same level, the \'next\' pointer should be set to null. Modify the tree in place and use constant extra space. Example 1: Input: 1 / 2 3 / 4 5 7 Output: 1 -> NULL / 2 -> 3 -> NULL / 4 -> 5 -> 7 -> NULL Example 2: Input: 10 / 5 15 / / 2 6 12 20 Output: 10 -> NULL / 5 -> 15 -> NULL / / 2 -> 6 -> 12 -> 20 -> NULL Your Task: You don\'t need to read input or print anything. Complete the function connect() which takes the root of the tree as an input parameter and modifies the tree in place. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ Node Value ≤ 10^{5}","solution":"class TreeLinkNode: def __init__(self, x): self.val = x self.left = None self.right = None self.next = None def connect(root): Connects each node in the binary tree such that each node\'s \'next\' pointer points to the next right node in the same level. If there is no next right node, the \'next\' pointer should be set to null. :param root: Root of the binary tree :type root: TreeLinkNode if not root: return # Start with the root node leftmost = root while leftmost: curr = leftmost prev = None leftmost = None while curr: # Iterate over the current level for child in (curr.left, curr.right): if child: if prev: prev.next = child else: leftmost = child prev = child curr = curr.next # The leftmost variable now points to the first node of the next level"},{"question":"Create a function that takes a list of integers and returns a new list containing the square of each number, but only if the original number is positive. Negative numbers and zeros should be excluded from the output.","solution":"def square_positive_numbers(numbers): Returns a list containing the square of each positive number in the input list. Negative numbers and zeros are excluded from the output. :param numbers: List of integers :return: List of integers return [num ** 2 for num in numbers if num > 0]"},{"question":"Meeting Room Scheduling Overview You are tasked with creating a function that helps manage the scheduling of a single meeting room. Given a list of meeting time intervals, your function should determine if a person could attend all meetings without any overlaps. Each meeting time interval is represented as a tuple of two integers: the start time and the end time. For example, given the following list of meeting intervals: ```python [(0, 30), (5, 10), (15, 20)] ``` This person would not be able to attend all meetings because the first and second meetings overlap, as well as the second and third. Task Write a function `canAttendMeetings` (or equivalent, depending on your language\'s naming conventions) that takes a list of meeting time intervals as input and returns a boolean value indicating whether the person can attend all meetings without overlap. # Constraints - Each interval is a tuple (start, end) with `0 <= start < end <= 10^6`. - The input list can contain up to `10^4` intervals. # Example ```python # Example Input meeting_intervals = [(0, 30), (5, 10), (15, 20)] # Example Output False # Example Input meeting_intervals = [(7, 10), (2, 4)] # Example Output True ``` # Hint To determine if a person could attend all meetings, you might want to sort the intervals by their start time and then check for any overlapping intervals.","solution":"def canAttendMeetings(meeting_intervals): Determines if a person can attend all given meetings without any overlap. Args: meeting_intervals (list of tuple): A list of tuples where each tuple contains two integers representing the start and end time of a meeting. Returns: bool: True if the person can attend all meetings, False otherwise. # Sort the meetings by start times meeting_intervals.sort() # Iterate through the sorted meetings and check for overlaps for i in range(1, len(meeting_intervals)): # If the current meeting starts before the previous meeting ends, there\'s an overlap if meeting_intervals[i][0] < meeting_intervals[i - 1][1]: return False return True"},{"question":"Miko is organizing a charity auction and has a list of items, each with a specified minimum price. Some bids have already been placed on the items, but Miko needs to determine if the current highest bid meets or exceeds the minimum price for each item. Write a program that helps Miko by reading the list of items with their minimum prices and current highest bids, then determines if each item\'s highest bid meets or exceeds its minimum price. Input The input is given in the following format: N name_1 price_1 bid_1 name_2 price_2 bid_2 ... name_N price_N bid_N The first line contains an integer N (1 leq N leq 10^5), which represents the number of items. The following N lines each contain a string name_i, an integer price_i (1 leq price_i leq 10^6), and an integer bid_i (0 leq bid_i leq 10^6), representing the name, minimum price, and current highest bid of the i-th item, respectively. Output Output N lines. For each item, print \\"YES\\" if the highest bid meets or exceeds the minimum price, otherwise print \\"NO\\". Examples Input 3 Painting 100 150 Vase 200 180 Sculpture 300 300 Output YES NO YES Input 4 Lamp 50 50 Chair 75 30 Table 150 200 Rug 100 75 Output YES NO YES NO","solution":"def auction_results(n, items): Determines if each item\'s highest bid meets or exceeds its minimum price. :param n: number of items :param items: list of tuples containing (name, minimum price, highest bid) :return: list of \\"YES\\" or \\"NO\\" for each item results = [] for item in items: name, price, bid = item if bid >= price: results.append(\\"YES\\") else: results.append(\\"NO\\") return results # Function to facilitate input and output def process_auction_input(n, raw_items): items = [] for raw_item in raw_items: parts = raw_item.split() name = parts[0] price = int(parts[1]) bid = int(parts[2]) items.append((name, price, bid)) return auction_results(n, items)"},{"question":"You are given an array of non-negative integers representing the amount of rainwater stored in each building\'s roof if we visualize the buildings as arrays of bars with each index\'s height corresponding to the array value. Your task is to determine how much water can be trapped after raining. Input - The first line contains an integer `n` (1 ≤ n ≤ 10000), which denotes the number of buildings. - The second line contains `n` non-negative integers, each representing the height of the building at that index. Output - Output a single integer that represents the total amount of trapped rainwater. Example Input 6 0 1 0 2 1 0 1 3 2 1 2 1 Output 6 Explanation The heights array can be visualized as follows: | | | | | | | | | | | | | | | | | | The total amount of water trapped is 6 units.","solution":"def trap_rain_water(heights): Calculate the total amount of rainwater trapped. :param heights: List of non-negative integers representing building heights. :return: Integer, total amount of trapped rainwater. if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n water_trapped = 0 left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i - 1], heights[i]) right_max[n - 1] = heights[n - 1] for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], heights[i]) for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"Alex is fascinated by prime numbers and sequences. Every day, he writes down all the prime numbers in a list and tries to find interesting patterns in them. One day, he came across a challenge: He needs to determine the smallest prime number `p` such that `p + n` is also a prime number for a given integer `n`. Your task is to help Alex find this smallest prime number `p`. -----Input----- The input consists of a single integer `n` (1 ≤ n ≤ 1,000,000). -----Output----- Output the smallest prime number `p` such that both `p` and `p + n` are prime numbers. -----Examples----- Input 10 Output 3 Input 4 Output 3 Input 1 Output 2 -----Note----- In the first example, the smallest prime number `p` such that both `p` and `p + 10` are prime is 3, since both 3 and 13 are prime numbers. In the second example, the smallest prime number `p` such that both `p` and `p + 4` are prime is 3, since both 3 and 7 are prime numbers. In the third example, the smallest prime number `p` such that both `p` and `p + 1` are prime is 2, since both 2 and 3 are prime numbers.","solution":"def is_prime(num): Determines if a number is a prime number. if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def smallest_prime_with_prime_sum(n): Returns the smallest prime number p such that p and p + n are both prime numbers. p = 2 while True: if is_prime(p) and is_prime(p + n): return p p += 1"},{"question":"In a small village, the people use a special script called \\"Simpligrad\\". The script consists of lowercase Latin letters. However, the people of the village have grown tired of the monotony of their text and want to create a function that replaces each letter with another letter in a way that no character maps to itself, to add some excitement to their writings. Consider all unique bijective mappings of Simpligrad letters where no letter maps to itself. Given an input string written in Simpligrad, the challenge is to generate one possible valid transformed string, following the rules above. Input The first line contains an integer n (1 ≤ n ≤ 100) – the length of the Simpligrad text. The second line contains a string with n lowercase Latin letters – the Simpligrad text. Output Print a single line containing one possible transformed string of length n that follows the criteria mentioned above. Example Input 6 abcdef Output fbcdea Input 3 xyz Output yzx Notes In the first example, a maps to f, b maps to b (which is incorrect, hence we should change it to another valid character not mapping to itself), c maps to d, d maps to e, e maps to a, and f maps to another unused character such that all characters are not mapped to themselves. Adjust accordingly to ensure no character maps to itself and all are used exactly once. In the second example, x maps to y, y maps to z, and z maps to x. The output string \\"yzx\\" satisfies the conditions where no character maps to itself. If multiple valid outputs are possible, print any one of them.","solution":"import random def transform_simpligrad_text(n, text): Transforms the given Simpligrad text following the rules: - Each letter maps to another letter (bijective mapping). - No letter maps to itself. Parameters: n (int): length of the Simpligrad text. text (str): the Simpligrad text. Returns: str: Transformed text where no character maps to itself. letters = list(text) if n == 1: return text while True: shuffled = letters[:] random.shuffle(shuffled) if all(letters[i] != shuffled[i] for i in range(n)): return \'\'.join(shuffled)"},{"question":"You are given an array of integers and a target value. Write a function that determines if there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is less than or equal to a specified value, and the absolute difference between i and j is also less than or equal to another specified value. -----Input----- Your function should accept the following parameters: - An array of integers `nums`. - An integer `k`: the maximum allowed absolute difference between elements `nums[i]` and `nums[j]`. - An integer `t`: the maximum allowed absolute difference between indices i and j. -----Output----- Return `True` if there are two distinct indices i and j in the array such that the above conditions are satisfied, otherwise return `False`. -----Function Signature----- `def containsNearbyAlmostDuplicate(nums: List[int], k: int, t: int) -> bool` -----Example----- Input nums = [1, 2, 3, 1], k = 3, t = 0 Output True Input nums = [1, 0, 1, 1], k = 1, t = 2 Output True Input nums = [1, 5, 9, 1, 5, 9], k = 2, t = 3 Output False -----Note----- In the first example, nums[0] = nums[3] = 1, and the absolute difference between indices 0 and 3 is 3. In the second example, nums[2] = nums[3] = 1, and the absolute difference between indices 2 and 3 is 1. In the third example, there are no two distinct indices that satisfy the condition.","solution":"from typing import List def containsNearbyAlmostDuplicate(nums: List[int], k: int, t: int) -> bool: if t < 0 or k < 0 or len(nums) < 2: return False buckets = {} bucket_size = t + 1 # To handle the case when t == 0 for i, num in enumerate(nums): bucket_id = num // bucket_size if bucket_id in buckets: return True if (bucket_id - 1 in buckets and abs(num - buckets[bucket_id - 1]) < bucket_size): return True if (bucket_id + 1 in buckets and abs(num - buckets[bucket_id + 1]) < bucket_size): return True buckets[bucket_id] = num if i >= k: del buckets[nums[i - k] // bucket_size] return False"},{"question":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your task is to implement a function that determines the length of such a sequence in the array. Consecutive elements need not be in any particular order, but they must form a continuous range without any gaps. -----Constraints----- - The array contains at most 10^5 elements. - Each element of the array is an integer within the range [-10^9, 10^9]. - The array may contain duplicates. -----Input----- The input consists of a single line containing the space-separated integers of the array. -----Output----- Output a single integer, the length of the longest consecutive elements sequence. -----Sample Input----- 100 4 200 1 3 2 -----Sample Output----- 4 Explanation: The longest consecutive sequence in the sample input is [1, 2, 3, 4], and its length is 4.","solution":"def longest_consecutive_sequence(arr): Returns the length of the longest consecutive elements sequence in the array. if not arr: return 0 # Create a set of the array elements for O(1) look-up times elements = set(arr) longest_length = 0 for num in elements: # Only consider \'num\' as the start of a sequence if num-1 is not in the set if num - 1 not in elements: current_length = 1 current_num = num # Count the length of the consecutive sequence while current_num + 1 in elements: current_length += 1 current_num += 1 # Update the longest length found so far longest_length = max(longest_length, current_length) return longest_length"},{"question":"The local community center is hosting a series of workshops to help people learn various skills. Each workshop has a limited number of available seats, and the organizers want to ensure that the workshops do not exceed their capacity. Given the capacity of each workshop and the number of people planning to attend, your task is to determine whether any workshop exceeds its capacity. INPUT The first line of the input contains T, the number of test cases. Each test case contains two lines. The first line of each test case contains a single integer C, the capacity of the workshop. The second line contains a single integer P, the number of people planning to attend the workshop. OUTPUT For each test case, print \\"OVERBOOKED\\" (without quotes) if the number of attendees exceeds the capacity of the workshop and \\"AVAILABLE\\" (without quotes) otherwise. CONSTRAINT 1≤T≤20 1≤C,P≤100 SAMPLE INPUT 3 50 60 30 25 15 15 SAMPLE OUTPUT OVERBOOKED AVAILABLE AVAILABLE Explanation For the first test case, the capacity of the workshop is 50, but there are 60 people planning to attend, which exceeds the capacity, hence the output is \\"OVERBOOKED\\". For the second test case, the capacity of the workshop is 30, and there are 25 people planning to attend, which does not exceed the capacity, hence the output is \\"AVAILABLE\\". For the third test case, the capacity of the workshop is 15, and there are 15 people planning to attend, which exactly meets the capacity, hence the output is \\"AVAILABLE\\".","solution":"def check_workshop_capacity(T, test_cases): Determines whether any workshop exceeds its capacity. :param T: int, number of test cases :param test_cases: list of tuples, each containing capacity C and attendees P :return: list of strings, \\"OVERBOOKED\\" or \\"AVAILABLE\\" for each test case results = [] for i in range(T): C, P = test_cases[i] if P > C: results.append(\\"OVERBOOKED\\") else: results.append(\\"AVAILABLE\\") return results"},{"question":"A library is organizing its books collection for a public exhibition. The books are stored in a single vertical stack in no particular order, and need to be rearranged such that they are in alphabetical order by their title. The librarian can only perform the following operations: 1. Remove the book from the top of the stack. 2. Place a removed book at the top of another stack. 3. Retrieve a book from the top of another stack and place it back on the original stack. 4. Keep only two extra stacks (temporary storage) besides the original stack. Given the number of books N, compute the minimal number of moves required to rearrange the stack in alphabetical order. Example 1: Input: N = 1 Output: 0 Explanation: The stack is already sorted with only one book. Example 2: Input: N = 3 Output: 5 Explanation: Remove three books in sequence, place them in one of the two temporary stacks while organizing them in alphabetical order. Place them back sorted into the original stack. Note: The actual process of determining the alphabetical order and placing them back can be treated as done in a certain constant minimum number of operations. Your Task: You do not need to read input or print anything. Implement the function `minimalMoves()` which takes an integer N as the input parameter and returns the minimal number of moves. Expected Time Complexity: O(N log N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 100","solution":"def minimalMoves(N): Computes the minimal number of moves required to rearrange N books. if N <= 1: return 0 else: return N * 2 - 1"},{"question":"Problem Statement Rita loves collecting different types of gems. She has found an unusual but interesting way to determine the value of her collection. She assigns a certain value to each of her gems based on the frequency of their occurrence in her collection. Given a string G which represents the types of gems in her collection, Rita wants to calculate the total value V of her collection using the following definition: - Let\'s consider C(c) as the count of gem type \'c\' in G. - The value of a gem type \'c\' is defined as C(c) * (C(c) + 1). - The total value V is the sum of the values of all unique gem types in G. Help Rita to calculate the total value V of her collection. INPUT The first line contains an integer t, the number of test cases. Each test case consists of a single line containing the string G. OUTPUT For each test case, output the total value V in a separate line. CONSTRAINTS 1 ≤ t ≤ 10 1 ≤ |G| ≤ 100000 G consists of lowercase English letters only. SAMPLE INPUT 2 aabb ababc SAMPLE OUTPUT 8 14 Explanation In the first test case, the gem types \'a\' and \'b\' each appear twice, so their individual values are 2 * (2 + 1) = 6. Thus, the total value V is 6 + 6 = 12. In the second test case, the gem type \'a\' appears 2 times, \'b\' appears 2 times, and \'c\' appears once. Thus, the values are 2*(2+1) = 6 for \'a\', 2*(2+1) = 6 for \'b\', and 1*(1+1) = 2 for \'c\'. So, the total value V is 6 + 6 + 2 = 14.","solution":"def gem_collection_value(t, gem_collections): results = [] for G in gem_collections: gem_counts = {} for gem in G: if gem in gem_counts: gem_counts[gem] += 1 else: gem_counts[gem] = 1 value = 0 for count in gem_counts.values(): value += count * (count + 1) results.append(value) return results"},{"question":"Write a function that takes a list of words and a target word and finds all anagrams of the target word from the list. An anagram of a word is a rearrangement of its letters to form another valid word. For example, the words \\"listen\\" and \\"silent\\" are anagrams of one another. Your function should return a list of all anagrams of the target word found in the input list. If no anagram is found, return an empty list. Input The input consists of: - An integer N representing the number of words in the list. - A list of N words. - A target word. Output A list of strings representing all anagrams of the target word found in the input list. The list may be returned in any order. Constraints - 1 ≤ N ≤ 10^4 - Each word and the target word will consist only of lowercase alphabets. - Each word and the target word will have a length between 1 and 100 (inclusive). Example Input 5 [\\"listen\\", \\"silent\\", \\"enlist\\", \\"google\\", \\"facebook\\"] \\"silent\\" Output [\\"listen\\", \\"enlist\\", \\"silent\\"] Input 4 [\\"apple\\", \\"banana\\", \\"carrot\\", \\"date\\"] \\"orange\\" Output []","solution":"def find_anagrams(word_list, target_word): Finds all anagrams of the target word from the list of words. Args: word_list (list): List of words. target_word (str): The word to find anagrams for. Returns: list: List of anagrams of the target word. from collections import Counter target_counter = Counter(target_word) anagrams = [word for word in word_list if Counter(word) == target_counter] return anagrams"},{"question":"You are given an integer sequence a_1, a_2, dots, a_n. You want to find two integers i and j such that 1 leq i < j leq n and a_i leq a_j. If there are multiple possible solutions, choose the one where the difference j - i is minimized. If there are still multiple solutions, choose the pair with the smallest i. If no such pair exists, return -1. -----Input----- The first line of the input contains one integer n (1 le n le 10^5). The second line of the input contains n integers a_1, a_2, dots, a_n (0 le a_i le 10^9). -----Output----- Print two integers i and j (1-based index) such that a_i leq a_j and j - i is minimized. If there are multiple valid answers, print the one with the smallest i. If there is no such pair, print -1. -----Examples----- Input 5 1 3 2 4 5 Output 1 2 Input 4 4 3 2 1 Output -1 Input 6 8 1 4 3 2 5 Output 2 3 -----Note----- In the first example, (i, j) = (1, 2) and (i, j) = (1, 3) but we prefer (1, 2) because 2 - 1 is smaller than 3 - 1. In the second example, there is no pair (i, j) such that a_i leq a_j. In the third example, (i, j) = (2, 3) and (i, j) = (2, 6) are both valid pairs but we prefer (2, 3) since 3 - 2 is smaller than 6 - 2.","solution":"def find_min_diff_pair(n, arr): Find two integers i and j such that 1 <= i < j <= n and a[i-1] <= a[j-1]. If there are multiple solutions, choose the one with the smallest difference j - i. If there are still multiple solutions, choose the pair with the smallest i. Parameters: n : int The length of the array arr : list of int The array of integers Returns: tuple of int A tuple containing the 1-based indices i and j, or -1 if no such pair exists. min_index = 0 result = (-1, -1) for j in range(1, n): if arr[min_index] <= arr[j]: result = (min_index + 1, j + 1) break if arr[j] < arr[min_index]: min_index = j if result == (-1, -1): return -1 return result"},{"question":"Write the following function: ```python def find_decimal_equivalent(fraction_string): ``` It should take a string representing a fraction in the format `N/D`, where `N` is the numerator and `D` is the denominator, and return the decimal equivalent of the fraction rounded to 4 decimal places. If the value of the denominator is 0, it should return `None`, as division by zero is undefined. Input :: Output Examples ```python find_decimal_equivalent(\\"3/4\\") # returns 0.7500 find_decimal_equivalent(\\"10/3\\") # returns 3.3333 find_decimal_equivalent(\\"2/0\\") # returns None ```","solution":"def find_decimal_equivalent(fraction_string): Returns the decimal equivalent of a fraction in the format `N/D`. If the denominator is 0, returns None. try: numerator, denominator = map(int, fraction_string.split(\'/\')) if denominator == 0: return None return round(numerator / denominator, 4) except ValueError: # Handle cases where input is not in the correct format return None"},{"question":"Write a function that takes a string containing digits from \'2\' to \'9\' inclusive, and returns all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below (note that 1 does not map to any letters): 2: [\'a\', \'b\', \'c\'], 3: [\'d\', \'e\', \'f\'], 4: [\'g\', \'h\', \'i\'], 5: [\'j\', \'k\', \'l\'], 6: [\'m\', \'n\', \'o\'], 7: [\'p\', \'q\', \'r\', \'s\'], 8: [\'t\', \'u\', \'v\'], 9: [\'w\', \'x\', \'y\', \'z\'] Example: Input: \\"23\\" Output: [\\"ad\\", \\"ae\\", \\"af\\", \\"bd\\", \\"be\\", \\"bf\\", \\"cd\\", \\"ce\\", \\"cf\\"] Note: Although the input string will only contain digits from \'2\' to \'9\', the output list should be lexicographically sorted.","solution":"def letter_combinations(digits): Returns all possible letter combinations that the number could represent. if not digits: return [] digit_to_char = { \'2\': \'abc\', \'3\': \'def\', \'4\': \'ghi\', \'5\': \'jkl\', \'6\': \'mno\', \'7\': \'pqrs\', \'8\': \'tuv\', \'9\': \'wxyz\' } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return possible_letters = digit_to_char[digits[index]] for letter in possible_letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"In a world dominated by gadgets and gizmos, ByteLand is a famous place known for its peculiar way of defining relationships through strings. In ByteLand, every citizen owns an ID which is a string consisting of lowercase alphabets only. The citizens are very particular about defining and evaluating the longest common subsequence (LCS) between their IDs and any query string. ByteLand\'s council wants to build an efficient mechanism to help the citizens quickly determine the LCS when queried. Given a list of citizen IDs and a list of queries, you are to calculate the length of the longest common subsequence for each query against each citizen ID in ByteLand. INPUT: The first line contains two integers N and Q, where N is the number of citizen IDs and Q is the number of queries. The next N lines contain one string each, representing the citizen IDs. The next Q lines contain one string each, representing the queries. 1 ≤ N, Q ≤ 100 1 ≤ Length of any string (either ID or query) ≤ 50 OUTPUT: For each query, output the length of the longest common subsequence with each citizen ID in a new line. SAMPLE INPUT 3 2 abcd efgh ijkl ab ef SAMPLE OUTPUT 2 0 0 0 2 0 Note: - LCS(abcd, ab) = 2 - LCS(efgh, ab) = 0 - LCS(ijkl, ab) = 0 - LCS(abcd, ef) = 0 - LCS(efgh, ef) = 2 - LCS(ijkl, ef) = 0","solution":"def lcs_length(str1, str2): Function to find the length of the Longest Common Subsequence (LCS) of two strings. m, n = len(str1), len(str2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] def longest_common_subsequence(N, Q, citizen_ids, queries): Function to calculate LCS length for each query against each citizen ID. results = [] for query in queries: for id_ in citizen_ids: results.append(lcs_length(id_, query)) return results"},{"question":"David is fascinated by strings and loves manipulating them in various ways. Lately, he has stumbled upon a new type of string operation: circular shifts. David can perform a left circular shift or a right circular shift on a string. In a left circular shift, the first character of the string moves to the end of the string, and all other characters shift one position to the left. Conversely, in a right circular shift, the last character of the string moves to the beginning of the string, and all other characters shift one position to the right. David\'s challenge for you is to determine the minimum number of circular shift operations (left or right) needed to transform a given string `S` into another string `T`. Both strings have the same length. Input Format: The first line contains an integer `N`, the number of test cases. For each test case, there are two lines: - The first line contains the string `S`. - The second line contains the string `T`. Output Format: For each test case, output the required minimum number of circular shift operations. Constraints: 1 ≤ N ≤ 100 1 ≤ length(S), length(T) ≤ 100 SAMPLE INPUT 2 abcde deabc hello ohell SAMPLE OUTPUT 2 1 Explanation: In the first test case, you can perform a right circular shift on \\"abcde\\" to get \\"eabcd\\". Then perform another right circular shift to get \\"deabc\\", resulting in 2 operations. In the second test case, a single right circular shift on \\"hello\\" yields \\"ohell\\", resulting in 1 operation.","solution":"def min_circular_shifts(S, T): Determines the minimum number of circular shift operations needed to transform string S into string T. if S == T: return 0 n = len(S) # Create the concatenation of S with itself to cover all possible rotations double_S = S + S # Check for T in the doubled string S to find the minimum shift for i in range(1, n): if double_S[i:i+n] == T: return min(i, n - i) return -1 # If it is not possible to transform S into T (ideally should not happen with given constraints) def process_test_cases(test_cases): Processes multiple test cases and returns results. results = [] for S, T in test_cases: results.append(min_circular_shifts(S, T)) return results"},{"question":"In a faraway land, there is a King who has N soldiers standing in a line. The King wants to form a special army formation where every soldier has exactly one taller soldier standing in front of him. You are tasked with determining whether it is possible to rearrange the soldiers in such a way. Each soldier has a unique height represented by an integer in an array of length N. A formation is valid if for each soldier i (0 ≤ i < N), there exists at least one soldier j (j < i) such that height[j] > height[i]. If it is possible to create such a formation, print \\"YES\\". Otherwise, print \\"NO\\". -----Constraints----- - 2 ≤ N ≤ 1000 - 1 ≤ height[i] ≤ 10^9 (1 ≤ i ≤ N) -----Input----- Input is given from Standard Input in the following format: N height_1 height_2 height_3 ... height_N -----Output----- Output a single string \\"YES\\" if it is possible to form the special army formation, and \\"NO\\" otherwise. -----Sample Input 1----- 5 5 4 3 2 1 -----Sample Output 1----- YES -----Sample Input 2----- 3 3 3 3 -----Sample Output 2----- NO The first sample allows formation of soldiers in descending order making each soldier (except the first one) have someone taller in front of him, while the second sample cannot form a valid formation because all soldiers have the same height.","solution":"def can_form_special_formation(N, heights): Determine if it is possible to rearrange the soldiers such that every soldier has exactly one taller soldier standing in front of him. unique_heights = set(heights) if len(unique_heights) == N: return \\"YES\\" else: return \\"NO\\" # Parsing input for standalone execution if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() N = int(data[0]) heights = list(map(int, data[1:])) print(can_form_special_formation(N, heights))"},{"question":"# Task A conveyor belt has packages that need to be delivered to various delivery points along the belt. We need to design an algorithm that helps in determining the minimum total distance traveled by all packages. The belt has `n` delivery points aligned linearly, and each package on the belt is identified by its weight and the delivery point it needs to be delivered. You are given an array of tuples where each tuple contains an integer representing the weight of the package and an integer representing the delivery point\'s index. The objective is to calculate the minimum total distance that the packages need to travel to be delivered to their respective delivery points. # Example For `packages = [(5, 2), (3, 4), (2, 1)]`, the minimum total distance would be `5`. Explanation: - The package with weight 5 needs to be delivered to point 2. - The package with weight 3 needs to be delivered to point 4. - The package with weight 2 needs to be delivered to point 1. - The minimum total distance traveled would be `5` (2 x 1 for package with weight 5 to travel to point 2, 3 x 1 for package with weight 3 to travel to point 4, and leaving without moving for the package with weight 2). # Input/Output - `[input]` integer array `packages` An array of tuples where each tuple contains two integers: the weight of the package and the delivery point\'s index. Constraints: `1 ≤ packages.length ≤ 1000`, `1 ≤ weight ≤ 100`, `0 ≤ point_index < n` - `[input]` integer `n` The number of delivery points on the belt. Constraints: `1 ≤ n ≤ 1000` - `[output]` an integer The minimum total distance traveled by all packages to their respective delivery points.","solution":"def min_total_distance(packages, n): Determines the minimum total distance traveled by all packages to their respective delivery points. :param packages: List of tuples where each tuple contains an integer representing the weight of the package and an integer representing the delivery point\'s index. :param n: Number of delivery points on the belt. :return: An integer representing the minimum total distance traveled by all packages. # The packages list is already in the form where each element represents (weight, delivery_point) min_distance = 0 # Calculate the total minimum distance for package in packages: weight, point = package # Since the distance is the point\'s index multiplied by the weight min_distance += weight * point return min_distance"},{"question":"Write a function that checks if a given string can be rearranged to form a palindrome. A palindrome is a word that reads the same forwards and backwards. For example, \\"level\\" and \\"radar\\" are palindromes. However, \\"hello\\" is not. To check if the string can be rearranged to form a palindrome, we need to ensure that at most one character has an odd frequency. Input The first line contains an integer n (1 ≤ n ≤ 100). Each of the following n lines contains one string. The strings consist of lowercase Latin letters and possess lengths from 1 to 100 characters. Output Print n lines. Each line should contain \\"YES\\" if the corresponding string can be rearranged to form a palindrome, and \\"NO\\" otherwise. Examples Input 3 civic ivicc hello Output YES YES NO","solution":"def can_form_palindrome(s): Checks if the input string can be rearranged to form a palindrome. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # A string can be rearranged to form a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\" def check_palindrome_possibility(strings): return [can_form_palindrome(s) for s in strings]"},{"question":"Create a function that takes a list of integers as an input parameter and returns a list of sums of all possible pairs. Each pair should be formed using distinct elements from the input list. If the list has fewer than two elements, return an empty list. Example: ```python pair_sums([1, 2, 3]) # should return [3, 4, 5] as 1+2=3, 1+3=4, 2+3=5 pair_sums([5, 8]) # should return [13] as 5+8=13 pair_sums([7]) # should return [] since there is only one element pair_sums([]) # should return [] since the list is empty ``` Note: - The output list shouldn\'t contain duplicate sums. - The order of sums in the output list doesn\'t matter, but each sum should be unique.","solution":"from itertools import combinations def pair_sums(lst): Takes a list of integers and returns a list of sums of all possible pairs. Each pair should be formed using distinct elements from the input list. if len(lst) < 2: return [] # Generate all possible pairs using combinations pairs = combinations(lst, 2) # Calculate the sum of each pair and then convert to a set to ensure uniqueness sums = set(sum(pair) for pair in pairs) # Return the sums as a sorted list to ensure a consistent order return sorted(sums)"},{"question":"Harry Houdini, a famous magician, loves entertaining people with his card tricks. He has recently designed a new trick using N decks of cards where each deck consists of Ci cards. His trick involves distributing these cards to M audience members in such a way that each member gets exactly R cards. Harry can decide how many cards each member gets before starting the trick, but he wants to ensure that each member gets the same number of cards. To maximize the astonishment, Harry wants to maximize the value of R while ensuring that every deck is used completely and every audience member receives exactly R cards. Write a program to help Harry determine the maximum possible value of R and the minimum number of audience members M. Input format: - The first line contains an integer T, denoting the number of test cases. - For each test case, the first line contains a single integer N, the number of decks. - The next line contains N integers, the array C, where Ci represents the number of cards in the ith deck. Output format: For each test case, print two space-separated integers: The maximum value of R and the minimum number of audience members M. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 1 ≤ Ci ≤ 1000 SAMPLE INPUT 2 2 12 15 3 12 15 18 SAMPLE OUTPUT 3 9 6 7 Explanation: In the first test case, if each audience member gets 3 cards, then 12 + 15 = 27 cards can be distributed to 9 audience members. In the second test case, if each member gets 6 cards, then 12 + 15 + 18 = 45 cards can be distributed to 7 audience members.","solution":"from math import gcd from functools import reduce def max_R_and_min_M(cards): This function calculates the maximum possible value of R (each member receives) and the minimum number of audience members M. :param cards: List of integers representing cards in each deck :return: Tuple (R, M) total_cards = sum(cards) # Function to find GCD of a list of numbers def find_gcd_of_list(num_list): x = reduce(gcd, num_list) return x # Finding GCD of all cards in the decks gcd_all_cards = find_gcd_of_list(cards) # The maximum value of R is the GCD obtained from all decks max_R = gcd_all_cards # The minimum number of audience members M min_M = total_cards // max_R return max_R, min_M def magic_card_trick(T, test_cases): results = [] for case in test_cases: N = case[0] cards = case[1] results.append(max_R_and_min_M(cards)) return results"},{"question":"**Task** Write a function that takes a string representing a sentence and returns the sentence with each word reversed, but with the words in the original order. The reversed word must preserve the original capitalization of the first letter, however the rest of the word should be fully reversed while maintaining the original case for other letters. # Example For the input string `\\"Hello World\\"`, the output should be `\\"Olleh Dlrow\\"`. For the input string `\\"Python is Fun\\"`, the output should be `\\"Nohtyp Si Nuf\\"`. # Input/Output - `[input]` string `sentence` - A non-empty string containing one or more words separated by spaces. - `[output]` a string - The input string with each word reversed according to the described rule.","solution":"def reverse_sentence(sentence): Reverses each word in the sentence while maintaining original word order and capitalization of the first letter. def reverse_word(word): if not word: # if the word is empty return word reversed_word = word[1:][::-1] + word[0] return reversed_word.capitalize() words = sentence.split() reversed_words = [reverse_word(word) for word in words] return \' \'.join(reversed_words)"},{"question":"You are given a list of `n` unique integers. Your task is to determine if the list can form an arithmetic sequence when arranged in some order. An arithmetic sequence is a sequence of numbers in which the difference of any two successive members is a constant. -----Input----- The first line of the input contains an integer n (2 ≤ n ≤ 100), the number of elements in the list. The second line contains n space-separated integers representing the list. -----Output----- Output \\"YES\\" if the list can be rearranged to form an arithmetic sequence, otherwise output \\"NO\\". -----Examples----- Input 5 3 6 9 12 15 Output YES Input 4 1 4 2 8 Output NO Input 3 20 10 30 Output YES -----Note----- In the first example, the list {3, 6, 9, 12, 15} is already an arithmetic sequence with a common difference of 3. In the second example, the list {1, 4, 2, 8} cannot be rearranged to form an arithmetic sequence. In the third example, the list {20, 10, 30} can be rearranged to {10, 20, 30}, which forms an arithmetic sequence with a common difference of 10.","solution":"def can_form_arithmetic_sequence(n, lst): if n == 2: # Any two numbers can form an arithmetic sequence return \\"YES\\" lst.sort() common_diff = lst[1] - lst[0] for i in range(2, n): if lst[i] - lst[i-1] != common_diff: return \\"NO\\" return \\"YES\\""},{"question":"You need to write a program that reads and interprets mathematical expressions. The program should be able to handle addition `+`, subtraction `-`, multiplication `*`, and division `/` operators. Division will be done as floating-point division (not integer division). The program should evaluate the expressions and print the result. If an expression contains an invalid operator or causes any error during evaluation, it should print the relevant error message. Input Format - The first line contains mathbf{T}, the number of test cases. - The next mathbf{T} lines each contain a mathematical expression in string format. Constraints - 1 leq T leq 10 - Each expression will contain exactly one binary operator and two integer operands. - Operand values will be integers within the range [-100, 100]. Output Format Print the result of the expression or the error message for each test case. Example Input 3 3 + 5 10 / 0 7 ? 2 Example Output 8.0 Error: Division by zero Error: Invalid operator \'?\' Note: - For performing division, use the `/` operator to ensure floating-point division in Python. - Handle division by zero and invalid operators appropriately with a clear error message.","solution":"def evaluate_expressions(expressions): results = [] for expression in expressions: try: left_operand, operator, right_operand = expression.split() left_operand = int(left_operand) right_operand = int(right_operand) if operator == \'+\': result = left_operand + right_operand elif operator == \'-\': result = left_operand - right_operand elif operator == \'*\': result = left_operand * right_operand elif operator == \'/\': if right_operand == 0: result = \\"Error: Division by zero\\" else: result = left_operand / right_operand else: result = \\"Error: Invalid operator \'{}\'\\".format(operator) results.append(result) except ValueError as e: results.append(\\"Error: Invalid syntax\\") return results"},{"question":"Given a list of `N` integers, you are required to determine the length of the longest arithmetic subarray. An arithmetic subarray is defined as a subarray that contains at least two integers and the differences between consecutive integers are the same. For example, `[3, 6, 9, 12]` is an arithmetic subarray with a common difference of 3, while `[1, 3, 6, 10]` is not an arithmetic subarray. Your task is to write a function that finds the length of the longest arithmetic subarray in the given list of integers. ------ Input ------ The first line of the input contains an integer `N` denoting the number of elements in the array. The second line contains `N` space-separated integers, representing the elements of the array. ------ Output ------ Output a single integer, the length of the longest arithmetic subarray. ------ Constraints ------ 2 ≤ N ≤ 2 times 10^5 -10^9 ≤ A[i] ≤ 10^9 ------ Sample Input 1 ------ 7 10 7 4 6 8 10 11 ------ Sample Output 1 ------ 4 ------ Explanation 1 ------ The longest arithmetic subarray is `[4, 6, 8, 10]` with a common difference of 2, and its length is 4. ------ Sample Input 2 ------ 4 9 4 7 2 ------ Sample Output 2 ------ 2 ------ Explanation 2 ------ There are multiple arithmetic subarrays with length 2, such as `[9, 4]` with a common difference of -5 or `[4, 7]` with a common difference of 3.","solution":"def longest_arithmetic_subarray(arr): Returns the length of the longest arithmetic subarray in the given list of integers. n = len(arr) if n < 2: return 0 max_length = 2 current_length = 2 current_difference = arr[1] - arr[0] for i in range(2, n): if arr[i] - arr[i-1] == current_difference: current_length += 1 else: current_difference = arr[i] - arr[i-1] current_length = 2 max_length = max(max_length, current_length) return max_length"},{"question":"A group of n students from ABC School are participating in a coding contest. Each student comes up with m different solutions attempting to solve the contest problems. Each submission is rated and given a score between 0 to 100. The students want to determine how many \\"Excellent\\" submissions they have. A submission is considered \\"Excellent\\" if it has a score of 100. Your task is to process the students\' submission data and identify which student has the maximum number of \\"Excellent\\" submissions. If multiple students have the same number of \\"Excellent\\" submissions, include all their names. Input The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of students. Then follow n data blocks that describe each student\'s submissions. Each block starts with a line that contains an integer m (0 ≤ m ≤ 100) and a string name (a non-empty sequence of uppercase and lowercase Latin letters with no more than 20 characters) — the number of submissions of the i-th student and the name of the student. The next m lines contain integers representing the scores of the submissions for that student. Output Print the phrase \\"Student(s) with the highest number of \'Excellent\' submissions: \\". Then print names of all students who have the maximum number of \\"Excellent\\" submissions. The names must be printed in the order they were provided in the input data. Examples Input 3 4 Alice 100 82 100 75 3 Bob 100 100 100 5 Charlie 90 100 85 75 100 Output Student(s) with the highest number of \'Excellent\' submissions: Bob.","solution":"def find_students_with_most_excellent(n, data): Finds the student(s) with the maximum number of \'Excellent\' submissions. Args: n (int): Number of students. data (List[Tuple[int, str, List[int]]]): List containing student data tuples with (number_of_submissions, student_name, [submission_scores]) Returns: str: Student(s) with the highest number of \'Excellent\' submissions. max_excellent_count = -1 students_with_max_excellent = [] for i in range(n): num_submissions, name, scores = data[i] excellent_count = scores.count(100) if excellent_count > max_excellent_count: max_excellent_count = excellent_count students_with_max_excellent = [name] elif excellent_count == max_excellent_count: students_with_max_excellent.append(name) return f\\"Student(s) with the highest number of \'Excellent\' submissions: {\', \'.join(students_with_max_excellent)}.\\""},{"question":"A city is arranging a marathon event where runners have to follow a specific path which is represented by a list of integer checkpoints. The city planners want to know the longest subarray of the checkpoints list where the checkpoints are strictly increasing from left to right. This will help them plan the marathon route more effectively. Example text{checkpoints} = [1, 2, 3, 1, 2, 3, 4, 1] // Checkpoints of the marathon route In this example, the longest subarray where checkpoints are strictly increasing is [1, 2, 3, 4], which has a length of 4. Function Description Complete the function `longestIncreasingSubarray` in the editor below. `longestIncreasingSubarray` has the following parameter: int checkpoints[n]: the checkpoints list representing the marathon route Returns - int: the length of the longest strictly increasing subarray Input Format The first line contains an integer n, the size of the array checkpoints. The next line contains n space-separated integers checkpoints[i]. Constraints 1 leq n leq 10^5 1 leq checkpoints[i] leq 10^9 Sample Input 10 1 2 3 4 2 2 3 4 5 6 Sample Output 5 Explanation Initially all checkpoints are given. Checkpoints = [1, 2, 3, 4, 2, 2, 3, 4, 5, 6] The longest subarray with strictly increasing checkpoints is [2, 3, 4, 5, 6], and its length is 5.","solution":"def longestIncreasingSubarray(checkpoints): if not checkpoints: return 0 max_len = 1 current_len = 1 for i in range(1, len(checkpoints)): if checkpoints[i] > checkpoints[i - 1]: current_len += 1 max_len = max(max_len, current_len) else: current_len = 1 return max_len"},{"question":"Ramesh is a software developer who loves solving puzzles. Recently, he came across a challenge to write a program that processes a sequence of integers and performs a specific set of transformations. The sequence contains integers which can be either positive, negative, or zero. He is required to modify the sequence based on the following rules: 1. If an integer is positive and its value is odd, increment it by 1. 2. If an integer is positive and its value is even, decrement it by 1. 3. If an integer is negative, convert it to its absolute value. 4. If an integer is zero, keep it unchanged. After transforming the sequence according to the above rules, Ramesh needs to sum the modified values and print the result. Your task is to help Ramesh implement this transformation and summation process. Input: The first line contains an integer n (1 ≤ n ≤ 100) – the number of elements in the sequence. The second line contains n integers separated by spaces – the elements of the sequence. Each integer is guaranteed to be between -1000 and 1000 inclusive. Output: Print the sum of the transformed sequence. Examples: Input: 5 3 -2 0 7 4 Output: 18 Explanation: - 3 is positive and odd, incremented to 4 - -2 is negative, converted to 2 - 0 remains unchanged - 7 is positive and odd, incremented to 8 - 4 is positive and even, decremented to 3 Summing the transformed values: 4 + 2 + 0 + 8 + 3 = 17","solution":"def transform_and_sum_sequence(n, sequence): Transforms the sequence according to the specified rules and returns the sum of the transformed sequence. :param n: The number of elements in the sequence :param sequence: List of integers representing the sequence :return: The sum of the transformed sequence transformed_sequence = [] for num in sequence: if num > 0: if num % 2 == 0: transformed_sequence.append(num - 1) else: transformed_sequence.append(num + 1) elif num < 0: transformed_sequence.append(abs(num)) else: transformed_sequence.append(num) return sum(transformed_sequence)"},{"question":"You are working on a software that processes a string log of stock market transactions and determines some basic statistics. Each transaction log is in the form of a string with the following format: ``` TIMESTAMP ACTION SYMBOL PRICE ``` Where: - `TIMESTAMP` is a string in the format \\"YYYY-MM-DD HH:MM:SS\\" - `ACTION` is either \\"BUY\\" or \\"SELL\\" - `SYMBOL` is a string representing the stock symbol (a mix of uppercase letters) - `PRICE` is a positive decimal number representing the price of the stock during the transaction The transactions are provided in chronological order. Your task is to parse the logs and compute the highest, lowest, and average price of each stock symbol. -----Input----- - The first line of the input contains an integer N (1 ≤ N ≤ 1000), the number of transaction logs. - The next N lines each contain one transaction log in the specified format. -----Output----- For each stock symbol that appeared in the transaction logs, you should output three lines: - The first line contains the stock symbol. - The second line contains the highest price found for that stock symbol. - The third line contains the lowest price found for that stock symbol. - The fourth line contains the average price found for that stock symbol, rounded to 2 decimal places. The output should be sorted by the stock symbols in lexicographical order. -----Example----- Sample Input: 5 2023-01-01 09:00:00 BUY APPLE 150.00 2023-01-01 10:00:00 SELL APPLE 155.00 2023-01-01 11:00:00 BUY GOOGLE 1000.00 2023-01-01 12:00:00 SELL GOOGLE 1015.00 2023-01-01 13:00:00 BUY APPLE 152.00 Sample Output: APPLE 155.00 150.00 152.33 GOOGLE 1015.00 1000.00 1007.50","solution":"def parse_logs_and_compute_statistics(logs): from collections import defaultdict stock_data = defaultdict(list) for log in logs: parts = log.split() timestamp = parts[0] + \' \' + parts[1] action = parts[2] symbol = parts[3] price = float(parts[4]) stock_data[symbol].append(price) result = [] for symbol in sorted(stock_data.keys()): prices = stock_data[symbol] highest_price = max(prices) lowest_price = min(prices) average_price = sum(prices) / len(prices) result.append(symbol) result.append(f\\"{highest_price:.2f}\\") result.append(f\\"{lowest_price:.2f}\\") result.append(f\\"{average_price:.2f}\\") return result"},{"question":"Given a string s, the task is to determine whether the string is a valid number. A valid number is a concept from mathematics which refers to integers, floating-point numbers, and integers with an optional sign. In this problem, digits, \'+\', \'-\', and \'.\' are the primary characters of interest. Example 1: Input: s = \\"123\\" Output: 1 Explanation: \\"123\\" is a valid integer. Example 2: Input: s = \\"-123.45\\" Output: 1 Explanation: \\"-123.45\\" is a valid floating-point number. Example 3: Input: s = \\"123e5\\" Output: 0 Explanation: \\"123e5\\" is not considered a valid number in this context. Example 4: Input: s = \\"abc\\" Output: 0 Explanation: \\"abc\\" is not a number. Example 5: Input: s = \\"12.3.4\\" Output: 0 Explanation: \\"12.3.4\\" has more than one decimal point which is not valid. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isValidNumber() which takes a string s as input and returns the answer as an integer (1 for True, 0 for False). Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= len(s) <= 10^5","solution":"def isValidNumber(s): Determine whether the input string s is a valid number. A valid number in this context includes: - integers (e.g., \\"123\\") - integers with an optional sign (e.g., \\"-123\\", \\"+123\\") - floating-point numbers (e.g., \\"123.45\\", \\"-123.45\\") This does not consider scientific notation (e.g., \\"123e5\\"). s = s.strip() if not s: return 0 sign = False decimal = False digit = False for i, char in enumerate(s): if char in \'+-\': if i != 0 or sign or digit: return 0 sign = True elif char == \'.\': if decimal: return 0 decimal = True elif char.isdigit(): digit = True else: return 0 return 1 if digit else 0"},{"question":"An expedition team discovered ancient manuscripts in a long-abandoned library. Among the findings are multiple scrolls. Each scroll appears to be a list of magical potions, and the quantities required to prepare them. Intriguingly, all scrolls are written in such a way that the quantity of a potion in one scroll is always less than or equal to the quantity in the next scroll. Your task is to determine if all the quantities of each potion remain consistent across the ordered scrolls. -----Input----- The first line contains an integer m (1 le m le 10^3) — the number of scrolls found. Following m groups contain a line with an integer l_i (1 le l_i le 10^2) — the number of potions listed on the i-th scroll, followed by l_i integers representing the quantities of the potions listed, separated by spaces. -----Output----- Output \\"CONSISTENT\\" (without quotes) if the quantities of each potion are non-decreasing across the scrolls. Otherwise, output \\"INCONSISTENT\\" (without quotes). -----Example----- Input 3 3 2 3 5 3 2 5 7 3 3 5 8 Output CONSISTENT Input 2 2 4 6 3 5 6 9 Output INCONSISTENT","solution":"def check_consistency(m, scrolls): for i in range(1, m): if len(scrolls[i]) != len(scrolls[i-1]): return \\"INCONSISTENT\\" for j in range(len(scrolls[i])): if scrolls[i][j] < scrolls[i-1][j]: return \\"INCONSISTENT\\" return \\"CONSISTENT\\" def parse_input(input_string): lines = input_string.strip().split(\\"n\\") m = int(lines[0]) scrolls = [] idx = 1 for _ in range(m): l_i = int(lines[idx]) quan_list = list(map(int, lines[idx + 1].split())) scrolls.append(quan_list) idx += 2 return m, scrolls"},{"question":"You are organizing a coding competition with n participants. Each participant has a unique skill level, represented as an integer. To ensure fairness, you want the competition to have balanced teams. You decide to form two teams such that the absolute difference between the sum of skill levels of players in each team is minimized. To make things interesting, some participants are more strategic in their play and might join any of the two teams. However, to avoid bias, participants are allowed to select their preferred team only after all possible team configurations have been considered. Your task is to determine the minimum possible absolute difference between the sum of skill levels of the two teams. -----Input----- The first line of the input contains one integer t (1 le t le 100) — the number of test cases. Then t test cases follow. The first line of each test case contains one integer n (1 le n le 100) — the number of participants. The second line of each test case contains n integers s_1, s_2, ..., s_n (1 le s_i le 1000), where s_i is the skill level of the i-th participant. -----Output----- For each test case, print the minimum possible absolute difference between the sum of skill levels of the two teams. -----Example----- Input 3 4 1 2 3 4 3 1 1 4 5 6 3 2 8 7 Output 0 2 0","solution":"def min_diff_partition(t, test_cases): results = [] for i in range(t): n, skills = test_cases[i] total_sum = sum(skills) target = total_sum // 2 dp = [False] * (target + 1) dp[0] = True for skill in skills: for j in range(target, skill - 1, -1): dp[j] |= dp[j - skill] closest_sum = max(j for j, can_achieve in enumerate(dp) if can_achieve) min_diff = total_sum - 2 * closest_sum results.append(min_diff) return results"},{"question":"In a small town, there is a festival where participants are arranging booths in a straight line. Each booth sells unique items, and to make the festival more exciting, adjacent booths should not sell the same item categories. Given the total number of booths and a list of desired category of items for each booth, your task is to determine whether it is possible to rearrange the booths such that no two adjacent booths sell the same category of items. If it is possible, print such an arrangement, otherwise print \\"No\\". -----Input----- The first line contains a single integer n (2 leq n leq 10^{5}) — the number of booths. The next line contains n integers a_i (1 leq a_i leq n) representing the desired category of items for each booth. -----Output----- If it is not possible to rearrange booths, print \\"No\\". Otherwise, print \\"Yes\\", followed by a line containing n integers representing a valid arrangement of booths such that no two adjacent booths sell the same category of items. If there are multiple valid arrangements, print any. -----Examples----- Input 4 1 2 3 4 Output Yes 1 2 3 4 Input 5 1 1 1 1 1 Output No Input 3 3 1 3 Output Yes 3 1 3 -----Note----- In the first example, the arrangement already satisfies the condition, so the output is identical to the input. In the second example, it is not possible to rearrange the booth categories since all booths desire the same category of items. In the third example, the arrangement already satisfies the condition, thus it is valid and the output matches the input.","solution":"from collections import Counter import heapq def arrange_booths(n, booth_categories): Determines whether it\'s possible to rearrange booths so that no two adjacent booths have the same category of items. Returns \'No\' if not possible, otherwise returns \'Yes\' followed by a representative arrangement. count = Counter(booth_categories) max_count = max(count.values()) if max_count > (n + 1) // 2: return [\\"No\\"] # Max-heap based on counts (inverted for max-heap in Python which has min-heap) max_heap = [(-freq, category) for category, freq in count.items()] heapq.heapify(max_heap) result = [] prev_freq, prev_category = 0, None while max_heap: freq, category = heapq.heappop(max_heap) result.append(category) if prev_freq < 0: heapq.heappush(max_heap, (prev_freq, prev_category)) prev_freq = freq + 1 prev_category = category return [\\"Yes\\", \\" \\".join(map(str, result))] # Example test case execution example_input = [4, [1, 2, 3, 4]] print(arrange_booths(*example_input))"},{"question":"Alice is studying sequences and has become fascinated with arithmetic sequences in particular. An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. Alice wants to create a program that will help her identify which elements in a given list form part of the longest arithmetic subsequence. Given a list of integers, determine the length of the longest arithmetic subsequence. Input: The first line consists of an integer n, which is the number of elements in the list. The second line contains the n elements of the list, separated by spaces. Output: Output a single integer representing the length of the longest arithmetic subsequence. Constraints: 1 ≤ n ≤ 10^3 -10^6 ≤ element ≤ 10^6 SAMPLE INPUT 6 3 6 9 12 15 10 SAMPLE OUTPUT 5 Explanation The longest arithmetic subsequence is [3, 6, 9, 12, 15] where the common difference is 3. Thus, the length of this sequence is 5.","solution":"def longest_arithmetic_subsequence(arr): if not arr: return 0 n = len(arr) if n == 1: return 1 dp = [{} for _ in range(n)] max_length = 1 for i in range(n): for j in range(i): diff = arr[i] - arr[j] if diff in dp[j]: dp[i][diff] = dp[j][diff] + 1 else: dp[i][diff] = 2 max_length = max(max_length, dp[i][diff]) return max_length"},{"question":"You are helping a company design a system that needs to check if a given string follows a particular pattern. The task is to determine if a string `s` can be segmented into a space-separated sequence of one or more dictionary words. Given a string `s` and a dictionary of words, return true if `s` can be segmented into a sequence of one or more dictionary words, otherwise return false. -----Input----- The first line contains a single integer M, the number of words in the dictionary. The next M lines each contain a dictionary word. The last line contains the string `s` that needs to be segmented. Constraints: - 1 leq M leq 3000 - All dictionary words and the string `s` consist of lowercase letters only. - The length of any dictionary word and the length of `s` are each in the range 1 leq text{length} leq 300. -----Output----- Print \\"true\\" if the given string `s` can be segmented into a sequence of one or more dictionary words, otherwise print \\"false\\". -----Examples----- Sample Input 1: 5 apple pen applepen pine pineapple pineapplepenapple Sample Output 1: true Sample Input 2: 3 cats dog sand catdog Sample Output 2: false","solution":"def can_segment_string(m, words, s): Returns true if the string s can be segmented into a sequence of one or more dictionary words from words, otherwise false. word_set = set(words) n = len(s) dp = [False] * (n+1) dp[0] = True for i in range(1, n+1): for j in range(i): if dp[j] and s[j:i] in word_set: dp[i] = True break return dp[n] # Function to process inputs and outputs def main(): import sys input = sys.stdin.read data = input().split(\'n\') M = int(data[0].strip()) words = [data[i+1].strip() for i in range(M)] s = data[M+1].strip() result = can_segment_string(M, words, s) print(\\"true\\" if result else \\"false\\")"},{"question":"___ Reversing a String with Special Characters in Place ___ # Description: Given a string comprised of alphabetical characters and special characters, write a function that reverses the order of the alphabetical characters in the string, but leaves all special characters in their original positions. # Input: - A string `s` containing both alphabetical characters and special characters. # Output: - A string where the alphabetical characters have been reversed, but special characters remain in their original positions. # Example: ```python reverse_alpha(\\"a,bc\\") == \\"c,ba\\" reverse_alpha(\\"Ab,c,de!\\") == \\"ed,c,bA!\\" reverse_alpha(\\"a!!!b.c.d,e\'f,ghi\\") == \\"i!!!h.g.f,e\'d,cba\\" ``` # Note: - The input string will only contain ASCII alphabetical characters and special characters. - Alphabetical characters are considered to be [a-zA-Z]. - Special characters are any characters that are not alphabet letters.","solution":"def reverse_alpha(s): Reverses the alphabetical characters in a string, leaving special characters in their original positions. Args: s (str): The input string containing alphabetical and special characters. Returns: str: The modified string with the alphabetical characters reversed. # Extract the alphabetical characters into a list letters = [c for c in s if c.isalpha()] # Initialize an empty list to build the result result = [] for char in s: if char.isalpha(): # Pop from the letters list to reverse the alphabetical characters result.append(letters.pop()) else: # Append special characters as is result.append(char) return \'\'.join(result)"},{"question":"You are given a rectangular n × m grid where each cell contains one of three possible characters: \'.\', \'*\' or \'#\'. \'.\' denotes an empty cell, \'*\' denotes a cell with a star, and \'#\' denotes an obstacle, which neither you nor energy beams can pass through. Your task is to find the minimum number of energy beams required to destroy all starred cells. An energy beam can be fired either horizontally or vertically from any empty cell (i.e., a cell containing \'.\') and will travel in a straight line, destroying all stars in its path until it hits an obstacle or the grid boundary. Input The first line of input contains two integers n and m (1 ≤ n, m ≤ 100), the number of rows and columns, respectively. Each of the next n lines contains exactly m characters, describing the grid. Output Output a single integer, denoting the minimum number of energy beams required to destroy all starred cells. Examples Input 4 5 ..... .*#.. #.*.. ..*.. Output 3 Input 3 3 .*. .#. *.# Output 2 Note In the first example, the optimal strategy is to fire beams from the following cells: - Fire a horizontal beam from (2,1) to hit the star at (2,2). - Fire a horizontal beam from (4,3) to hit the star at (4,3). - Fire a vertical beam from (3,3) to hit the star at (3,3). In the second example, the optimal strategy is to fire beams from the following cells: - Fire a vertical beam from (1,2) to hit the star at (1,2). - Fire a horizontal beam from (3,1) to hit the star at (3,1).","solution":"def min_energy_beams(grid): n = len(grid) m = len(grid[0]) row_beams = [0] * n col_beams = [0] * m for i in range(n): if \'*\' in grid[i]: row_beams[i] = 1 for j in range(m): for i in range(n): if grid[i][j] == \'*\': col_beams[j] = 1 break return max(sum(row_beams), sum(col_beams))"},{"question":"In a city, you are tasked with developing a system to monitor and analyze the traffic of buses along specific routes. Each bus has a unique identification number and travels on a defined route from one stop to another. Given a series of operations, implement a system to maintain and query bus route information. The system needs to support the following operations: * add_bus(bus_id, start_stop, end_stop): Add a bus with a specified range of stops. Report \\"Bus added\\" if successful. If the bus with the same bus_id already exists, report \\"Bus already exists\\". * update_bus(bus_id, new_start_stop, new_end_stop): Update the stops of an existing bus. Report \\"Bus updated\\" if successful. If the bus does not exist, report \\"Bus not found\\". * remove_bus(bus_id): Remove the bus from the system. Report \\"Bus removed\\" if successful. If the bus does not exist, report \\"Bus not found\\". * query_buses(stop): Print the bus IDs of all buses passing through the specified stop, sorted in ascending order. If no buses pass through the stop, print \\"No buses\\". Constraints * 1 leq q leq 100,000 * 1 leq stop leq 100,000 * 1 leq bus_id leq 100,000 Input The input is given in the following format. q query_1 query_2 : query_q Each query query_i is given by 0 bus_id start_stop end_stop or 1 bus_id new_start_stop new_end_stop or 2 bus_id or 3 stop where the first digits 0, 1, 2, and 3 represent add_bus, update_bus, remove_bus, and query_buses operations respectively. Output For each add_bus, update_bus, or remove_bus operation, print the corresponding result message. For each query_buses operation, print the bus IDs passing through the specified stop, each in a new line, or \\"No buses\\" if no buses pass through it. Example Input 10 0 100 5 10 0 101 2 8 0 102 7 9 3 8 1 101 3 9 3 8 2 102 3 8 3 6 0 103 6 11 Output Bus added Bus added Bus added 101 102 101 Bus updated 101 102 Bus removed 101 No buses Bus added","solution":"class BusSystem: def __init__(self): self.buses = {} self.stops = {} def add_bus(self, bus_id, start_stop, end_stop): if bus_id in self.buses: return \\"Bus already exists\\" else: self.buses[bus_id] = (start_stop, end_stop) for stop in range(start_stop, end_stop + 1): if stop not in self.stops: self.stops[stop] = set() self.stops[stop].add(bus_id) return \\"Bus added\\" def update_bus(self, bus_id, new_start_stop, new_end_stop): if bus_id not in self.buses: return \\"Bus not found\\" else: old_start_stop, old_end_stop = self.buses[bus_id] for stop in range(old_start_stop, old_end_stop + 1): if stop in self.stops: self.stops[stop].remove(bus_id) if not self.stops[stop]: del self.stops[stop] self.buses[bus_id] = (new_start_stop, new_end_stop) for stop in range(new_start_stop, new_end_stop + 1): if stop not in self.stops: self.stops[stop] = set() self.stops[stop].add(bus_id) return \\"Bus updated\\" def remove_bus(self, bus_id): if bus_id not in self.buses: return \\"Bus not found\\" else: start_stop, end_stop = self.buses[bus_id] del self.buses[bus_id] for stop in range(start_stop, end_stop + 1): if stop in self.stops: self.stops[stop].remove(bus_id) if not self.stops[stop]: del self.stops[stop] return \\"Bus removed\\" def query_buses(self, stop): if stop in self.stops and self.stops[stop]: return sorted(self.stops[stop]) else: return \\"No buses\\""},{"question":"A farmer has a rectangular field divided into a grid of cells, consisting of n rows and m columns. Each cell contains a certain amount of crops, which can be represented as an integer value. The farmer can harvest crops by traversing through the cells, starting from the top-left corner (1, 1) and ending at the bottom-right corner (n, m). In one step, the farmer can move to an adjacent cell either to the right or down. The farmer wants to maximize the total amount of crops harvested. Write a program that calculates the maximum total amount of crops the farmer can harvest by the time the bottom-right corner is reached. -----Input----- The first line contains a single integer t (1 le t le 100) — the number of test cases. The first line of each test case contains two integers n and m (1 le n, m le 1000) — the number of rows and columns in the grid. Each of the next n lines contains m integers, where each integer describes the amount of crops in that cell (0 le text{crops} le 1000). -----Output----- For each test case, print a single integer denoting the maximum total amount of crops that can be harvested by the farmer. -----Examples----- Input 2 2 3 1 2 3 0 1 4 3 3 1 2 3 4 5 6 7 8 9 Output 10 29 -----Note----- In the first test case, the path that maximizes the total crops is (1, 1) rightarrow (1, 2) rightarrow (1, 3) rightarrow (2, 3). In the second test case, the path that maximizes the total crops is (1, 1) rightarrow (1, 2) rightarrow (1, 3) rightarrow (2, 3) rightarrow (3, 3).","solution":"def max_crops_harvested(grid): n = len(grid) m = len(grid[0]) # Create a DP table to store the maximum crops collected upto that cell dp = [[0] * m for _ in range(n)] dp[0][0] = grid[0][0] # Fill the first row (only move right) for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (only move down) for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the DP table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner will have the answer return dp[n-1][m-1] def process_test_cases(t, test_cases): results = [] for case in test_cases: n, m, grid = case result = max_crops_harvested(grid) results.append(result) return results"},{"question":"You are given a string representing a mathematical expression containing the following operators: **+** (addition), **-** (subtraction), ***** (multiplication), **/** (division). The string can also contain parentheses **()** to indicate the precedence of operations. Your task is to write a function `evaluate_expression(expression)` which takes the mathematical expression as input and returns the result of the evaluated expression. The input string will be a valid expression, and you can assume that division always results in an integer value. Note: You are not allowed to use the `eval` function. **Examples:** ```python evaluate_expression(\\"3+5\\") => 8 evaluate_expression(\\"10+(2*3)\\") => 16 evaluate_expression(\\"(1+(4+5+2)-3)+(6+8)\\") => 23 ```","solution":"def evaluate_expression(expression): Evaluates a mathematical expression containing +, -, *, / operators and parentheses. def calculate(ops, nums): right = nums.pop() left = nums.pop() op = ops.pop() if op == \'+\': nums.append(left + right) elif op == \'-\': nums.append(left - right) elif op == \'*\': nums.append(left * right) elif op == \'/\': nums.append(left // right) def precedence(op): if op in (\'+\', \'-\'): return 1 if op in (\'*\', \'/\'): return 2 return 0 nums = [] ops = [] i = 0 while i < len(expression): if expression[i] == \' \': i += 1 continue if expression[i] == \'(\': ops.append(expression[i]) elif expression[i].isdigit(): val = 0 while i < len(expression) and expression[i].isdigit(): val = (val * 10) + int(expression[i]) i += 1 nums.append(val) i -= 1 elif expression[i] == \')\': while len(ops) != 0 and ops[-1] != \'(\': calculate(ops, nums) ops.pop() else: while (len(ops) != 0 and precedence(ops[-1]) >= precedence(expression[i])): calculate(ops, nums) ops.append(expression[i]) i += 1 while len(ops) != 0: calculate(ops, nums) return nums[-1]"},{"question":"**Problem statement** You are working on a new application that allows users to create rectangular cards and calculate their perimeters. Each card has a given width and height. You are required to handle multiple queries where each query asks for the perimeter of a card with specific dimensions. For each query, compute and print the perimeter of the corresponding card. **Constraint** * 1 ≤ width, height ≤ 1000 * 1 ≤ number of queries ≤ 100000 **Input / Output** **input** Input is given from standard input in the following format: number_of_queries Then, for each query a pair of integers width and height **output** Output the perimeter for each card on a new line. **Example** **Input** 3 4 5 6 7 1 1 **Output** 18 26 4 **Explanation** 1. For the first query, the card has a width of 4 and a height of 5. The perimeter is calculated as 2 * (4 + 5) = 18. 2. For the second query, the card has a width of 6 and a height of 7. The perimeter is calculated as 2 * (6 + 7) = 26. 3. For the third query, the card has a width of 1 and a height of 1. The perimeter is calculated as 2 * (1 + 1) = 4.","solution":"def calculate_perimeter(queries): Function to compute the perimeter of cards given a list of queries. Each query is a tuple (width, height). Returns a list of perimeters for each query. results = [] for width, height in queries: perimeter = 2 * (width + height) results.append(perimeter) return results # Example usage: # number_of_queries = 3 # queries = [(4, 5), (6,7), (1, 1)] # print(calculate_perimeter(queries)) # Output: [18, 26, 4]"},{"question":"You are given a series of strings, and your task is to determine the number of unique characters in each string. Characters are case-sensitive, meaning \'a\' and \'A\' are considered different characters. Input The first line of input contains an integer T, which denotes the number of test cases. The following T lines each contain a single string S. Output For each string S, output a single integer on a new line, denoting the number of unique characters in the string. Constraints 1 ≤ T ≤ 10^5 1 ≤ length(S) ≤ 100 The strings only consist of printable ASCII characters. Example Input: 3 hello world Programming Output: 4 5 8 Explanation In the first test case, \'hello\' has four unique characters: \'h\', \'e\', \'l\', \'o\'. In the second test case, \'world\' has five unique characters: \'w\', \'o\', \'r\', \'l\', \'d\'. In the third test case, \'Programming\' has eight unique characters: \'P\', \'r\', \'o\', \'g\', \'a\', \'m\', \'i\', \'n\', since \'r\' and \'m\' are repeated.","solution":"def count_unique_characters(strings): Takes a list of strings and returns a list of integers representing the number of unique characters in each string. return [len(set(s)) for s in strings] def process_input(input_lines): Processes the input lines and returns the result from count_unique_characters function. T = int(input_lines[0]) strings = input_lines[1:T+1] return count_unique_characters(strings)"},{"question":"You are managing a warehouse and need to keep track of inventory levels for different products. Each product is represented by its unique ID and has an initial inventory level. You need to process a series of operations that either adjust the inventory level of a product or query the current inventory level of a product. There are two types of operations: - `Add X Y`: Add Y units to the inventory level of product with ID X. - `Get X`: Output the current inventory level of product with ID X. Write a program to handle these operations efficiently. ------ Input ------ The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the number of operations. The next N lines each contain one operation, which will be either `Add X Y` or `Get X`. ------ Output ------ For each `Get X` operation, output a single line containing the inventory level of product with ID X. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ X ≤ 1000 0 ≤ Y ≤ 10^{9} ----- Sample Input 1 ------ 2 5 Add 1 100 Add 2 50 Get 1 Get 2 Get 3 3 Add 5 200 Get 5 Get 1 ----- Sample Output 1 ------ 100 50 0 200 0 ----- Explanation 1 ------ Example case 1: 1. Add 100 units to product ID 1. The inventory level of product 1 becomes 100. 2. Add 50 units to product ID 2. The inventory level of product 2 becomes 50. 3. Query the inventory level of product 1. The output is 100. 4. Query the inventory level of product 2. The output is 50. 5. Query the inventory level of product 3. Since no units were added to product 3, the output is 0. Example case 2: 1. Add 200 units to product ID 5. The inventory level of product 5 becomes 200. 2. Query the inventory level of product 5. The output is 200. 3. Query the inventory level of product 1. Since no units were added to product 1 in this test case, the output is 0.","solution":"def warehouse_operations(test_cases): results = [] for operations in test_cases: inventory = {} for operation in operations: parts = operation.split() if parts[0] == \\"Add\\": product_id = int(parts[1]) quantity = int(parts[2]) if product_id in inventory: inventory[product_id] += quantity else: inventory[product_id] = quantity elif parts[0] == \\"Get\\": product_id = int(parts[1]) results.append(inventory.get(product_id, 0)) return results"},{"question":"Mr. Nakamura has been assigned to manage a company\'s database of employee records. Each employee is assigned a unique integer ID and has attributes such as name, department, and salary. Mr. Nakamura wants to perform some queries on the database to retrieve specific information. The queries fall into different categories as follows: 1. Retrieve the name of an employee given their unique ID. 2. Retrieve a list of employees (their IDs) who work in a particular department. 3. Retrieve the average salary of employees in a particular department. Write a program to manage the employee records and process the queries. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100), the number of employees. The next n lines contain space-separated values representing the employee ID (1 ≤ ID ≤ 1000), name (a string of up to 20 characters without spaces), department (a string of up to 20 characters without spaces), and salary (an integer, 1000 ≤ salary ≤ 100000). The following line contains an integer q (1 ≤ q ≤ 100), the number of queries. The next q lines describe the queries. The first number in each query line is a type integer indicating the query category (1, 2, or 3). - If the type is 1, the query contains an additional integer, representing the employee ID. - If the type is 2, the query contains an additional string, representing the department name. - If the type is 3, the query contains an additional string, representing the department name. -----Output----- For each query: - If the query type is 1, print the name of the employee with the given ID. If the ID does not exist, print \\"Employee not found\\". - If the query type is 2, print the IDs of the employees in the specified department sorted in ascending order. If there are no employees in that department, print an empty line. - If the query type is 3, print the average salary of the employees in the specified department, rounded to the nearest integer. If there are no employees in that department, print 0. -----Example----- Input 5 1 Alice HR 50000 2 Bob Engineering 60000 3 Carol HR 55000 4 Dave Marketing 45000 5 Eve Engineering 62000 4 1 3 2 HR 3 Engineering 1 6 Output Carol 1 3 61000 Employee not found","solution":"class EmployeeDB: def __init__(self): self.employees = {} self.departments = {} def add_employee(self, emp_id, name, department, salary): self.employees[emp_id] = {\\"name\\": name, \\"department\\": department, \\"salary\\": salary} if department not in self.departments: self.departments[department] = [] self.departments[department].append(emp_id) def query_name_by_id(self, emp_id): if emp_id in self.employees: return self.employees[emp_id][\\"name\\"] else: return \\"Employee not found\\" def query_ids_by_department(self, department): if department in self.departments: return sorted(self.departments[department]) else: return [] def query_avg_salary_by_department(self, department): if department in self.departments: total_salary = sum(self.employees[emp_id][\\"salary\\"] for emp_id in self.departments[department]) return round(total_salary / len(self.departments[department])) else: return 0 def process_queries(n, employee_data, q, query_data): db = EmployeeDB() for emp in employee_data: emp_id, name, department, salary = emp db.add_employee(emp_id, name, department, salary) results = [] for query in query_data: type_query = query[0] if type_query == 1: emp_id = query[1] results.append(db.query_name_by_id(emp_id)) elif type_query == 2: department = query[1] ids = db.query_ids_by_department(department) results.append(\\" \\".join(map(str, ids))) elif type_query == 3: department = query[1] average_salary = db.query_avg_salary_by_department(department) results.append(str(average_salary)) return results"},{"question":"Aditya loves playing with strings. He is given a string S consisting of lowercase English letters. He wants to transform the string into a palindrome by performing at most one character replacement. However, if no such transformation is possible with one replacement, he wants to identify this case. Help Aditya by writing a program to determine if it\'s possible to make the string a palindrome with at most one character change. -----Input:----- - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of a single line of input, the string S. -----Output:----- For each test case, output \\"Yes\\" if it\'s possible to make the string a palindrome with at most one character change, otherwise output \\"No\\". -----Constraints----- - 1 leq T leq 100 - 1 leq |S| leq 10^5 -----Sample Input:----- 2 abca racecar -----Sample Output:----- Yes Yes","solution":"def can_form_palindrome_by_one_replacement(s): Returns \'Yes\' if it\'s possible to make the string a palindrome with at most one character replacement. Otherwise, returns \'No\'. def is_palindrome_range(left, right): while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True left, right = 0, len(s) - 1 while left < right: if s[left] != s[right]: if is_palindrome_range(left + 1, right) or is_palindrome_range(left, right - 1): return \'Yes\' else: return \'No\' left += 1 right -= 1 return \'Yes\' def process_test_cases(test_cases): results = [] for s in test_cases: results.append(can_form_palindrome_by_one_replacement(s)) return results"},{"question":"Given a grid of size N x N, Takahashi is playing a game where he starts at the top-left corner of the grid (1, 1) and moves to the bottom-right corner (N, N). Each cell in the grid contains a positive integer value, representing the strength required to move into that cell from any of its adjacent cells. Takahashi can only move right or down from his current position. We want to determine the minimum strength Takahashi needs to reach the bottom-right corner from the top-left corner of the grid. -----Constraints----- - All values in input are integers. - 1 ≤ N ≤ 100 - 1 ≤ Grid[i][j] ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N Grid[1][1] Grid[1][2] ... Grid[1][N] Grid[2][1] Grid[2][2] ... Grid[2][N] ... Grid[N][1] Grid[N][2] ... Grid[N][N] -----Output----- Print the minimum strength required to reach the bottom-right corner from the top-left corner. -----Sample Input----- 3 1 1 1 1 100 1 1 1 1 -----Sample Output----- 5 -----Explanation----- Takahashi would move as follows: - (1, 1) -> (2, 1) -> (3, 1) -> (3, 2) -> (3, 3) The total strength required is 1+1+1+1+1 = 5.","solution":"def min_strength(grid): N = len(grid) dp = [[0] * N for _ in range(N)] dp[0][0] = grid[0][0] for i in range(1, N): dp[i][0] = dp[i-1][0] + grid[i][0] dp[0][i] = dp[0][i-1] + grid[0][i] for i in range(1, N): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] return dp[N-1][N-1]"},{"question":"Takahashi is reviewing his latest coding problem solutions. He has realised that he accidentally appended an extra character at the end of each string. To get back the original strings, he needs to remove the last character from each of the given strings and print the results. You are to write a program that helps him by removing the last character from each of the given strings. -----Constraints----- - The number of strings, N, is between 1 and 100. - Each string is composed of only uppercase English letters. - The length of each string is between 1 and 100. -----Input----- Input is given from Standard Input in the following format: N S_1 S_2 ... S_N -----Output----- For each string, print the original string after removing the last character. -----Sample Input----- 3 HELLO WORLD PYTHON -----Sample Output----- HELL WORL PYTHO The last characters \'O\', \'D\', \'N\' are removed from \'HELLO\', \'WORLD\', and \'PYTHON\' respectively, resulting in \'HELL\', \'WORL\', and \'PYTHO\'.","solution":"def remove_last_character(strings): Removes the last character from each string in the list. Args: strings (list of str): A list of strings. Returns: list of str: A new list where each string has its last character removed. return [s[:-1] for s in strings]"},{"question":"Given a list of integers, your task is to find a contiguous subarray with the largest sum and output the sum of that subarray. This problem is a classical problem known as the Maximum Subarray Problem. -----Input:----- The first line of the input contains a single integer T denoting the number of test cases. Each test case consists of two lines: the first line contains an integer n denoting the number of elements in the array, and the second line contains n space-separated integers representing the elements of the array. -----Output----- For each test case, print a single line containing the maximum sum of the contiguous subarray. -----Constraints----- - 1 leq T leq 10^3 - 1 leq n leq 10^5 - -10^4 leq a_i leq 10^4 for each valid i -----Example Input----- 3 5 1 -2 3 4 -5 4 -1 -2 -3 -4 6 2 -1 2 3 4 -5 -----Example Output----- 7 -1 10 -----Explanation----- - In the first case, the subarray with the maximum sum is [3, 4], and the sum is 3 + 4 = 7. - In the second case, the subarray with the maximum sum is [-1], and the sum is -1 since all numbers are negative. - In the third case, the subarray with the maximum sum is [2, -1, 2, 3, 4], and the sum is 2 + (-1) + 2 + 3 + 4 = 10.","solution":"def max_subarray_sum(test_cases): def kadane_algorithm(arr): max_current = max_global = arr[0] for num in arr[1:]: max_current = max(num, max_current + num) if max_current > max_global: max_global = max_current return max_global results = [] for n, arr in test_cases: results.append(kadane_algorithm(arr)) return results def parse_input(input_text): lines = input_text.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): n = int(lines[index]) arr = list(map(int, lines[index + 1].split())) test_cases.append((n, arr)) index += 2 return test_cases"},{"question":"Circle of Friends Alice, Bob, and Charlie are friends who always sit in a circle when they meet. Write a program to determine the order in which they sit. input No input is given. output Output one of the permutations of \\"Alice, Bob, Charlie\\" on one line. Make sure there is a line break at the end. Output example 1 Alice, Bob, Charlie Example Input Output","solution":"import itertools def generate_circle_of_friends(): Return all permutations of the friends\' names in a circular arrangement. friends = [\\"Alice\\", \\"Bob\\", \\"Charlie\\"] permutations = [\\"{}, {}, {}\\".format(a, b, c) for a, b, c in itertools.permutations(friends, 3)] return permutations"},{"question":"# Task You are to create a function that determines whether a given word is an anagram of another. # Background An **anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For this task, the function should be case-insensitive and ignore spaces, punctuation, and other non-alphabetic characters. # Kata Write a piece of code to check if two given strings are anagrams of each other. The function should take in two strings and return `True` if they are anagrams, and `False` otherwise. # Example ```python # Both strings have identical letters in different orders is_anagram(\\"Listen\\", \\"Silent\\") # => True is_anagram(\\"A gentleman\\", \\"Elegant man\\") # => True # Different sets of letters is_anagram(\\"Hello\\", \\"World\\") # => False is_anagram(\\"Dormitory\\", \\"Dirty room\\") # => True ```","solution":"def is_anagram(str1, str2): Determines whether the given strings are anagrams of each other, ignoring spaces, punctuation, and case. Args: str1 (str): The first string to compare. str2 (str): The second string to compare. Returns: bool: True if the strings are anagrams, False otherwise. import re # Remove non-alphabet characters and convert to lower case cleaned_str1 = re.sub(r\'[^a-z]\', \'\', str1.lower()) cleaned_str2 = re.sub(r\'[^a-z]\', \'\', str2.lower()) # Check if sorted cleaned strings are the same return sorted(cleaned_str1) == sorted(cleaned_str2)"},{"question":"Write a function that accepts a list of integers and returns a list where each integer is replaced by the sum of its digits. If the list is empty, return an empty list. # Examples - Input = [123, 456, 789] --> Output = [6, 15, 24] - Input = [1, 22, 333] --> Output = [1, 4, 9] - Input = [] --> Output = []","solution":"def sum_of_digits_list(int_list): Returns a list where each integer is replaced by the sum of its digits. Args: int_list (list): A list of integers. Returns: list: A list of integers with each integer replaced by the sum of its digits. def sum_of_digits(n): return sum(int(digit) for digit in str(n)) return [sum_of_digits(num) for num in int_list]"},{"question":"You are designing a word puzzle game where the player can form words by selecting letters from a grid. Each letter can be used only once per word, and the player scores points based on the length of the word they form. The score for a word is determined as follows: - Words of length 2 score 1 point. - Words of length 3 score 2 points. - Words of length 4 or more score 3 points. You are given a 2D grid of characters and a list of words to check. Write a function to determine the total score for all the words that can be formed using the rules of the game. Input: The first line contains two integers N and M indicating the number of rows and columns in the grid. The next N lines each contain M characters representing the grid. The next line contains an integer W indicating the number of words to check. The next W lines each contain a single word. Output: Print the total score for all valid words. Constraints: * 1 ≤ N, M ≤ 10 * Each character in the grid will be an uppercase English letter (\'A\'-\'Z\'). * 1 ≤ W ≤ 20 * Each word will contain between 2 and 10 characters, inclusive. SAMPLE INPUT 4 4 A C D E B A C D E F G H I J K L 3 CADE AFE XYZ SAMPLE OUTPUT 6 Explanation: - \\"CADE\\" can be formed by selecting the letters from the first row. It scores 3 points. - \\"AFE\\" can be formed using letters from the second and third rows. It scores 2 points. - \\"XYZ\\" cannot be formed from the grid, so it scores 0 points. - Total score is 3 + 2 + 0 = 5.","solution":"def word_puzzle_score(grid, words): def can_form_word(word): from collections import Counter word_counter = Counter(word) grid_counter = Counter() for row in grid: grid_counter.update(row) for letter, count in word_counter.items(): if grid_counter[letter] < count: return False return True def word_score(word): length = len(word) if length == 2: return 1 elif length == 3: return 2 elif length >= 4: return 3 return 0 total_score = 0 for word in words: if can_form_word(word): total_score += word_score(word) return total_score"},{"question":"Given an undirected graph with N nodes (numbered 1 through N) and M edges, each edge has a weight. The task is to choose a subset of edges such that every node is reachable from any other node (i.e., the selected edges must form one connected component, or a spanning tree). Additionally, each node i has a value V_i, and the aim is to maximize the sum of values of nodes in the two largest connected subcomponents after removing any one edge from the spanning tree. ----- Input ----- - The first line contains two integers N and M (1 leq N leq 10^3, 0 leq M leq 10^4) — the number of nodes and edges. - The second line contains N space-separated integers V_1, V_2, ldots, V_N — the values of the nodes. - Each of the next M lines contains three integers u, v, and w (1 leq u, v leq N, 1 leq w leq 10^4) — the endpoints of an edge and its weight. ----- Output ----- - Print N-1 lines. Each of these lines should contain two space-separated integers u and v (1 leq u, v leq N) denoting an edge between nodes u and v. The graph formed by these edges must be a spanning tree. ----- Constraints ----- - The graph is guaranteed to be connected. ----- Example Input ----- 6 7 3 5 2 6 1 10 1 2 4 1 3 3 2 4 2 2 5 9 3 6 8 4 6 7 5 6 1 ----- Example Output ----- 1 2 1 3 2 4 2 5 4 6 ----- Explanation ----- In this example, after removing the edge (4, 6), the remaining nodes form two connected subcomponents: {1, 2, 4, 5} and {3, 6}. The values of the nodes in the first subcomponent are 3, 5, 2, 1 (sum = 11), and in the second subcomponent are 2, 10 (sum = 12). The maximum sum of values of nodes in the two largest subcomponents is 11 + 12 = 23. Note: - Your solution must ensure that the selected edges form a spanning tree. - You should aim to maximize the sum of values of the nodes in the two largest connected subcomponents after removing each edge and choose the output that gives the highest such sum.","solution":"def max_subcomponents_value_spanning_tree(N, M, values, edges): from heapq import heapify, heappop, heappush from collections import defaultdict # Helper function to perform a union-find def find(parent, i): if parent[i] == i: return i parent[i] = find(parent, parent[i]) return parent[i] def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if xroot != yroot: if rank[xroot] > rank[yroot]: parent[yroot] = xroot elif rank[xroot] < rank[yroot]: parent[xroot] = yroot else: parent[yroot] = xroot rank[xroot] += 1 # Initialize the min-heap with the edge list edge_list = [(w, u - 1, v - 1) for u, v, w in edges] heapify(edge_list) # Kruskal\'s algorithm to find the Minimum Spanning Tree (MST) parent = list(range(N)) rank = [0] * N mst_edges = [] while edge_list and len(mst_edges) < N - 1: w, u, v = heappop(edge_list) if find(parent, u) != find(parent, v): union(parent, rank, u, v) mst_edges.append((u + 1, v + 1)) return mst_edges"},{"question":"A company is organizing a series of workshops and wants to optimize the schedule to maximize the total number of workshops an employee can attend. Each workshop has a start and end time, and an employee can only attend one workshop at a time. Write a program to determine the maximum number of non-overlapping workshops an employee can attend given a list of workshops\' start and end times. # Input The input consists of multiple lines: - The first line contains an integer N (1 ≤ N ≤ 1000) representing the number of workshops. - The next N lines each contain two integers S and E (0 ≤ S < E ≤ 10000), the start and end times of the workshops. # Output Print a single integer, the maximum number of non-overlapping workshops an employee can attend. # Example Input 1 ``` 3 1 3 2 5 4 6 ``` Output 1 ``` 2 ``` An employee can attend the first workshop (1 to 3) and the third workshop (4 to 6). Input 2 ``` 5 1 2 2 3 3 4 4 5 5 6 ``` Output 2 ``` 5 ``` An employee can attend all five workshops as they are back-to-back. # Notes In the first example, attending the first workshop (1 to 3) and the third workshop (4 to 6) is optimal as the second workshop overlaps with both. In the second example, since each workshop ends when the next one starts, all workshops can be attended in sequence.","solution":"def max_non_overlapping_workshops(N, workshops): Determine the maximum number of non-overlapping workshops an employee can attend. Args: N: An integer representing the number of workshops. workshops: A list of tuples [(S1, E1), (S2, E2), ...] representing start and end times of the workshops. Returns: An integer representing the maximum number of non-overlapping workshops. # Sort the workshops by their end time workshops.sort(key=lambda x: x[1]) # Initialize counters count = 0 end_time = 0 for start, end in workshops: if start >= end_time: count += 1 end_time = end return count"},{"question":"-----Input----- The input consists of a single integer N, where 1 <= N <= 100. -----Output----- Output the number of digits in the binary representation of the integer N. -----Examples----- Input 1 Output 1 Input 5 Output 3 Input 16 Output 5 Input 31 Output 5 Input 100 Output 7","solution":"def number_of_binary_digits(N): Returns the number of digits in the binary representation of the integer N. if not (1 <= N <= 100): raise ValueError(\\"N must be between 1 and 100\\") return len(bin(N)[2:])"},{"question":"You are given an array of integers and your task is to determine whether it is possible to rearrange the elements of the array such that it forms an arithmetic sequence. An arithmetic sequence is a sequence of numbers in which the difference between consecutive terms is constant. Input Format A single line containing space-separated integers representing the array. Constraints 2 ≤ length of array ≤ 105 -106 ≤ each integer ≤ 106 Output Format A single line containing YES or NO in uppercase. SAMPLE INPUT 3 5 1 SAMPLE OUTPUT YES Explanation One possible arithmetic sequence that can be formed with the elements of the array is 1 3 5. The common difference is 2.","solution":"def can_form_arithmetic_sequence(arr): Determines if the elements of the array can be rearranged to form an arithmetic sequence. Args: arr (list of int): The array of integers. Returns: str: \\"YES\\" if the array can be rearranged to form an arithmetic sequence, otherwise \\"NO\\". arr.sort() difference = arr[1] - arr[0] for i in range(2, len(arr)): if arr[i] - arr[i - 1] != difference: return \\"NO\\" return \\"YES\\""},{"question":"Write a function that checks if a string contains equal amount of \'x\' and \'o\'. The method must return a boolean and be case insensitive. The string can contain any char. For example: ```python XO(\\"ooxx\\") # should return True XO(\\"xooxx\\") # should return False XO(\\"ooxXm\\") # should return True XO(\\"zpzpzpp\\") # should return True (if no \'x\' and \'o\' is present it is automatically True) XO(\\"\\") # should return True ```","solution":"def XO(s): Check if string s contains equal numbers of \'x\' and \'o\' (case insensitive). s = s.lower() return s.count(\'x\') == s.count(\'o\')"},{"question":"Given a string ( boldsymbol{S} ), and a series of target strings ( boldsymbol{mathit{T}_i} ) (where i ranges from 1 to the number of target strings), your task is to determine if any of these target strings ( boldsymbol{mathit{T}_i} ) can be constructed from ( boldsymbol{S} ) by deleting zero or more characters without reordering the remaining characters. Your method should take two parameters: - ( boldsymbol{text{source}} ): a string containing the source sequence. - ( boldsymbol{text{targets}} ): a list of strings containing the target sequences. Function Signature: `def can_construct(source: str, targets: List[str]) -> List[bool]:` The function should return a list of booleans where each boolean indicates whether the corresponding target string in the input list can be constructed from the source string. # Input Format: - A string ( boldsymbol{S} ) (the source string). - A list of strings ( boldsymbol{mathit{T}_i} ) (the target strings). # Constraints: - The source string ( boldsymbol{S} ) will have a length between ( 1 ) and ( 200 ) inclusive. - Each target string ( boldsymbol{mathit{T}_i} ) will have a length between ( 1 ) and ( 100 ) inclusive. - Both the source string and target strings contain only lowercase English alphabets (`a-z`). # Output: The function should return a list of booleans corresponding to each target string, where `True` signifies that the target string can be constructed from the source string, and `False` otherwise. # Example: Sample Input: ```python source = \\"abcde\\" targets = [\\"ace\\", \\"aec\\", \\"abcd\\", \\"xyz\\"] ``` Sample Output: ```python [True, False, True, False] ``` Explanation: - \\"ace\\" can be formed by removing characters \'b\' and \'d\' from \\"abcde\\". - \\"aec\\" cannot be formed by removing characters from \\"abcde\\" while maintaining relative order. - \\"abcd\\" can be formed by removing character \'e\' from \\"abcde\\". - \\"xyz\\" cannot be formed because these characters do not exist in \\"abcde\\".","solution":"from typing import List def can_construct(source: str, targets: List[str]) -> List[bool]: def is_subsequence(s: str, t: str) -> bool: t_idx = 0 for char in s: if t_idx < len(t) and char == t[t_idx]: t_idx += 1 if t_idx == len(t): return True return t_idx == len(t) return [is_subsequence(source, target) for target in targets]"},{"question":"Given a positive integer n, write a function to determine if n is a perfect square without using any built-in square root functions. A perfect square is an integer that is the square of an integer (e.g., 1, 4, 9, 16, 25, ...). Example 1: n = 16 Result: True Example 2: n = 14 Result: False Constraints: - n will be a non-negative integer and fit within the range of a 32-bit signed integer.","solution":"def is_perfect_square(n): Determines if the given positive integer n is a perfect square. :param n: A positive integer :return: True if n is a perfect square, else False if n < 0: return False if n == 0 or n == 1: return True left, right = 1, n while left <= right: mid = (left + right) // 2 mid_squared = mid * mid if mid_squared == n: return True elif mid_squared < n: left = mid + 1 else: right = mid - 1 return False"},{"question":"A farmer wants to calculate the number of unique paths to move from the top-left corner of his rectangular field to the bottom-right corner. The field can be represented as a grid of M rows and N columns. The farmer can only move either right or down at any point in time. Write a program that takes in the number of rows (M) and columns (N) of the field and calculates the number of unique paths the farmer can take to reach the bottom-right corner from the top-left corner. Input: Number of rows (M) Number of columns (N) Output: The number of unique paths Note: 1. 1 ≤ M, N ≤ 100 SAMPLE INPUT 3 3 SAMPLE OUTPUT 6","solution":"def unique_paths(M, N): Calculates the number of unique paths to move from the top-left corner to the bottom-right corner of an M x N grid, where the only allowable moves are right and down. :param M: Number of rows (int). :param N: Number of columns (int). :return: Number of unique paths (int). # Initialize a 2D array with zeros dp = [[0] * N for _ in range(M)] # Set the base cases for i in range(M): dp[i][0] = 1 for j in range(N): dp[0][j] = 1 # Compute the number of paths for each cell in the grid for i in range(1, M): for j in range(1, N): dp[i][j] = dp[i-1][j] + dp[i][j-1] return dp[M-1][N-1]"},{"question":"You are given an array `a` of `N` integers. You need to generate an array `b` such that each element `b_i` is the smallest possible element from the subarray `a[i:]`, which starts at index `i` and ends at the last element of the array `a`. Example 1: Input: N = 5 a = [4, 3, 2, 5, 1] Output: b = [1, 1, 1, 1, 1] Explanation: For index 0, the smallest element in [4, 3, 2, 5, 1] is 1. For index 1, the smallest element in [3, 2, 5, 1] is 1. For index 2, the smallest element in [2, 5, 1] is 1. For index 3, the smallest element in [5, 1] is 1. For index 4, the smallest element in [1] is 1. Example 2: Input: N = 4 a = [6, 8, 7, 5] Output: b = [5, 5, 5, 5] Explanation: For index 0, the smallest element in [6, 8, 7, 5] is 5. For index 1, the smallest element in [8, 7, 5] is 5. For index 2, the smallest element in [7, 5] is 5. For index 3, the smallest element in [5] is 5. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `smallest_suffix()` which takes the array `a[]` and its size `N` as input parameters and returns the array `b`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 <= N <= 10^5 1 <= a[i] <= 10^9","solution":"def smallest_suffix(a, N): Generate an array b such that each element b_i is the smallest possible element from the subarray a[i:] of the given array a. :param a: List[int] : Input array :param N: int : Size of the input array :return: List[int] : Resulting array with the smallest elements from suffixes of a if not a or N == 0: return [] b = [0] * N b[N-1] = a[N-1] # Traverse from the second last to the first element for i in range(N - 2, -1, -1): b[i] = min(a[i], b[i + 1]) return b"},{"question":"Write a function called `word_ladder` that takes two parameters: the starting word and the ending word. The function should return the minimum number of steps required to transform the starting word into the ending word, given the following rules: 1. You can only change one letter at a time. 2. Each intermediate word must be a valid English word from a predefined list called `word_list`. # Example ```python word_list = [\\"hot\\", \\"dot\\", \\"dog\\", \\"lot\\", \\"log\\", \\"cog\\"] word_ladder(\\"hit\\", \\"cog\\") => returns 5 ``` # Explanation: The transformation sequence would be `hit -> hot -> dot -> dog -> cog` (5 steps). # Notes: 1. If the transformation is not possible, return `-1`. 2. You may assume all words contain the same number of characters. 3. Words may only be lowercase alphabetic characters. 4. Ensure the function is efficient enough to handle reasonably large lists of words. # Hint: You may consider using Breadth-First Search (BFS) as a strategy to explore all possible word transformations.","solution":"from collections import deque def word_ladder(start, end, word_list): Returns the minimum number of steps required to transform the starting word into the ending word. word_set = set(word_list) if end not in word_set: return -1 queue = deque([(start, 1)]) # Queue for BFS, storing (current_word, step_count) while queue: current_word, steps = queue.popleft() if current_word == end: return steps for i in range(len(current_word)): for c in \'abcdefghijklmnopqrstuvwxyz\': next_word = current_word[:i] + c + current_word[i+1:] if next_word in word_set: word_set.remove(next_word) queue.append((next_word, steps + 1)) return -1"},{"question":"You are given a list of n integers, and your task is to find two distinct integers a and b such that their sum is equal to a given number x. If there are multiple pairs that satisfy this condition, return any one of them. If no such pair exists, return -1. Input The first line contains two integers n and x (2 ≤ n ≤ 1000000, 1 ≤ x ≤ 2000000) — the number of integers in the list and the required sum. The second line contains n integers, each between 1 and 1000000 (inclusive), which represent the list of integers. Output Print two integers a and b (a ≠ b) such that a + b = x. If there are multiple answers, you can print any of them. If no such pair exists, print -1. Examples Input 5 9 2 7 11 15 1 Output 2 7 Input 4 8 1 2 4 4 Output 4 4 Note In the first sample, the pair (2, 7) sums to 9. In the second sample, the pair (4, 4) sums to 8.","solution":"def find_pair_with_sum(n, x, arr): Finds two distinct integers a and b from the list arr such that their sum is equal to x. If there are multiple pairs, returns any one of them. If no such pair exists, returns -1. Parameters: n (int): number of integers in the list x (int): target sum arr (list): list of integers Returns: tuple: a pair of integers (a, b) whose sum is x, or -1 if no such pair exists seen = {} for num in arr: complement = x - num if complement in seen and seen[complement] > 0: return (complement, num) if num in seen: seen[num] += 1 else: seen[num] = 1 return -1"},{"question":"There is a sequence of integers. You need to find the longest subsequence which is strictly increasing. -----Constraints----- - 1 leq n leq 1000, where n is the length of the sequence. - Each integer in the sequence (a_i) is between 1 and 1000, inclusive. -----Input----- The input consists of two lines: - The first line contains a single integer n, the length of the sequence. - The second line contains n integers separated by spaces. -----Output----- Print the length of the longest strictly increasing subsequence. -----Sample Input----- 6 5 2 8 6 3 6 -----Sample Output----- 3 Explanation: The longest strictly increasing subsequence is either [2, 3, 6] or [5, 6, 6].","solution":"def longest_increasing_subsequence(input_sequence): Returns the length of the longest strictly increasing subsequence. :param input_sequence: List[int], sequence of integers :return: int, length of the longest strictly increasing subsequence if not input_sequence: return 0 n = len(input_sequence) dp = [1] * n for i in range(1, n): for j in range(i): if input_sequence[i] > input_sequence[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp)"},{"question":"Roy and Biv recently discovered they have a shared interest in collecting rare stamps. Between them, they have `a` stamps in Roy\'s collection and `b` stamps in Biv\'s collection. However, some stamps are duplicates, present in both collections. They aim to combine their collections but want to keep only unique stamps. Help Roy and Biv determine how many unique stamps they will have after combining their collections. -----Input----- The first line of input contains two integers `a` and `b` (1 ≤ a, b ≤ 10^5), representing the number of stamps in Roy\'s and Biv\'s collections, respectively. The next line contains `a` integers, representing the stamps in Roy\'s collection. Each integer is between 1 and 10^9. The following line contains `b` integers, representing the stamps in Biv\'s collection. Each integer is between 1 and 10^9. -----Output----- Print a single integer — the number of unique stamps after merging their collections. -----Examples----- Input 3 4 1 2 3 2 3 4 5 Output 5 Input 5 3 1 1 1 2 3 3 3 4 Output 4","solution":"def unique_stamps(a, b, roy_stamps_list, biv_stamps_list): Returns the number of unique stamps after merging Roy\'s and Biv\'s collections. Parameters: a (int): Number of stamps in Roy\'s collection. b (int): Number of stamps in Biv\'s collection. roy_stamps_list (list of int): Stamps in Roy\'s collection. biv_stamps_list (list of int): Stamps in Biv\'s collection. Returns: int: The number of unique stamps. # Using set to get unique stamps from both collections combined_stamps = set(roy_stamps_list) | set(biv_stamps_list) return len(combined_stamps)"},{"question":"You are given a list of n integers which represent the heights of n buildings standing in a row from left to right. Each building has a certain height and you are tasked with figuring out if there is any building that completely blocks the view of another building when viewed from the left side of the row. To be precise, a building at position i blocks the view of a building at position j (i < j) if and only if the height of the building at position i is greater than or equal to the height of the building at position j. For example, given the heights [3, 1, 4, 2, 5], the building with height 3 does not block the view of the building with height 1. However, the building with height 4 blocks the view of the building with height 2 because 4 is greater than 2. Write an algorithm to determine whether any building blocks the view of another building. If at least one building blocks the view of another, print \\"YES\\". Otherwise, print \\"NO\\". -----Input----- The first line of input contains a single integer n (1 ≤ n ≤ 50) – the number of buildings in the row. The second line contains n space-separated integers h1, h2, ..., hn (1 ≤ hi ≤ 100) – the heights of the buildings from left to right. -----Output----- Print a single string \\"YES\\" if there is at least one building that blocks the view of another. Otherwise, print \\"NO\\". -----Examples----- Input 5 3 1 4 2 5 Output YES Input 4 1 2 3 4 Output NO -----Note----- In the first sample, the building of height 4 blocks the view of the building of height 2. In the second sample, no building blocks the view of any other building.","solution":"def does_any_building_block_view(buildings): Determines if any building blocks the view of another building. Args: buildings (list): A list of integers representing the heights of buildings. Returns: str: \\"YES\\" if any building blocks the view of another, otherwise \\"NO\\". for i in range(len(buildings) - 1): if buildings[i] >= buildings[i + 1]: return \\"YES\\" return \\"NO\\""},{"question":"A number is called a happy number if repeatedly replacing it with the sum of the squares of its digits eventually leads to 1. If not, it will cycle through a sequence that does not include 1. Write a program to determine if a given positive integer is a happy number or not. -----Constraints----- - 1 leq N leq 10^9 -----Input----- Input is given from Standard Input in the following format: N -----Output----- Print \\"YES\\" if the given number is a happy number, otherwise print \\"NO\\". -----Sample Input 1----- 19 -----Sample Output 1----- YES Explanation: 19 is a happy number because the sequence is: 1^2 + 9^2 = 82 8^2 + 2^2 = 68 6^2 + 8^2 = 100 1^2 + 0^2 + 0^2 = 1 -----Sample Input 2----- 2 -----Sample Output 2----- NO Explanation: 2 is not a happy number because the sequence does not lead to 1. It will cycle indefinitely: 2^2 = 4 4^2 = 16 1^2 + 6^2 = 37 3^2 + 7^2 = 58 5^2 + 8^2 = 89 8^2 + 9^2 = 145 1^2 + 4^2 + 5^2 = 42 4^2 + 2^2 = 20 2^2 + 0^2 = 4 (cycle starts again)","solution":"def is_happy_number(n): def get_next_number(num): return sum(int(digit) ** 2 for digit in str(num)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next_number(n) return n == 1 def happy_number_check(n): return \\"YES\\" if is_happy_number(n) else \\"NO\\""},{"question":"In a faraway land called Alphabetica, the citizens are fascinated by sequences of letters. They have decided to implement a special kind of sorting system. Given a string of lowercase English letters, the task is to generate the lexicographically smallest permutation of the string such that each letter appears at most once. If no such permutation is possible, return the empty string. -----Input----- - The input consists of a single line containing a string s of lowercase English letters. -----Output----- - Output a single line containing the lexicographically smallest permutation of the string with each letter appearing at most once, or an empty string if no such permutation is possible. -----Constraints----- - 1 le |s| le 100,000 - The string s contains only lowercase English letters. -----Example Input----- example bubble characteristic -----Example Output----- alpx be archit -----Explanation----- Example case 1: The lexicographically smallest permutation of \\"example\\" with each letter appearing at most once is \\"alpx\\". Example case 2: The lexicographically smallest permutation of \\"bubble\\" with each letter appearing at most once is \\"be\\". Example case 3: The lexicographically smallest permutation of \\"characteristic\\" with each letter appearing at most once is \\"archit\\".","solution":"def smallest_lexicographic_permutation(s): Returns the lexicographically smallest permutation of the string s such that each letter appears at most once. # Convert the string to a set to remove duplicates and then sort it unique_chars = sorted(set(s)) # Join the sorted characters back to a string return \'\'.join(unique_chars)"},{"question":"In a distant kingdom, there are N cities connected by M unidirectional highways. Each highway has a certain toll fee associated with it. The kingdom\'s postal service needs to deliver a letter from City S to City T. However, they want to find the route that incurs the minimum toll fee. If there is no possible route from City S to City T, output -1. Otherwise, output the minimum toll fee required to travel from S to T. -----Constraints----- - 2 ≤ N ≤ 500 - 1 ≤ M ≤ 5000 - 1 ≤ S, T ≤ N, S ≠ T - 1 ≤ A_i, B_i ≤ N, A_i ≠ B_i (i refers to the ith highway) - 1 ≤ C_i ≤ 100000 (C_i is the toll fee for the ith highway) - All input values are integers. -----Input----- Input is given from Standard Input in the following format: N M S T A_1 B_1 C_1 : A_M B_M C_M -----Output----- Print the minimum toll fee required to travel from S to T. If there is no possible route, print -1. -----Sample Input----- 4 5 1 3 1 2 5 2 3 10 1 3 15 3 4 5 4 3 2 -----Sample Output----- 15 For example, the minimum toll fee to travel from city 1 to city 3 is 15. The valid routes are: - 1 -> 3 with a toll of 15. This is the minimum toll fee compared to other routes.","solution":"import heapq def minimum_toll_fee(N, M, S, T, highways): graph = {i: [] for i in range(1, N+1)} for A, B, C in highways: graph[A].append((B, C)) # Using Dijkstra\'s algorithm to find the shortest path dist = {i: float(\'inf\') for i in range(1, N+1)} dist[S] = 0 priority_queue = [(0, S)] while priority_queue: current_toll, u = heapq.heappop(priority_queue) if u == T: return current_toll if current_toll > dist[u]: continue for neighbor, weight in graph[u]: distance = current_toll + weight if distance < dist[neighbor]: dist[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return -1 if dist[T] == float(\'inf\') else dist[T]"},{"question":"You are given an array of integers. Your task is to determine if there exists a triplet (i.e., three distinct elements) in the array that sums up to zero. -----Input----- The first line of input contains a single integer n (where 3 ≤ n ≤ 10^5), the number of elements in the array. The second line of input contains n integers a_1, a_2, ..., a_n where each a_i is between -10^6 and 10^6. -----Output----- Print \\"YES\\" (without the quotes), if there exists a triplet in the array whose sum is zero, and \\"NO\\" otherwise. -----Examples----- Input 5 -1 2 9 -6 7 Output YES Input 4 1 2 3 4 Output NO Input 6 0 -1 2 -3 1 Output YES -----Note----- In the first sample test, the triplet (-1, 2, -6) does not sum to zero. However, the triplet (-1, 2, -1) sums to zero. In the second sample test, no triplets have a sum of zero. In the third sample test, the triplet (0, -1, 1) sums to zero.","solution":"def find_triplets(arr): Returns \\"YES\\" if there is a triplet in arr that sums to zero, \\"NO\\" otherwise arr.sort() # sort the array n = len(arr) for i in range(n - 2): if i > 0 and arr[i] == arr[i - 1]: continue # skip duplicate elements left, right = i + 1, n - 1 while left < right: current_sum = arr[i] + arr[left] + arr[right] if current_sum == 0: return \\"YES\\" elif current_sum < 0: left += 1 else: right -= 1 return \\"NO\\""},{"question":"Alice has a unique way of storing her movie collection. She organizes them on a single, straight shelf which can hold up to `n` movies at a time. She wants to make sure her collection looks neat and organized, which means only one movie can be on each slot on the shelf. Each movie has a specific rating associated with it. Alice allows you to perform one of the following two operations on her movie collection: 1. **Add a movie**: Place a movie with a given rating at a specific position on the shelf. 2. **Remove a movie**: Remove the movie from a specified position on the shelf. After every operation, Alice wants to know the maximum movie rating on her shelf. Can you help Alice by telling her the maximum movie rating after each operation? # Input - The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100000), which are the number of slots on the shelf and the number of operations respectively. - The next `m` lines describe the operations. Each operation is one of two types: - If the operation is of type 1, it contains three integers: `1 p r` (1 ≤ p ≤ n, 1 ≤ r ≤ 1000000000) where `p` is the position on the shelf and `r` is the rating of the movie to be placed. - If the operation is of type 2, it contains two integers: `2 p` (1 ≤ p ≤ n) where `p` is the position of the movie to be removed. It is guaranteed that: - For type 1 operations, No two operations will try to place a movie on the same slot if there is already a movie on it. - For type 2 operations, there will always be a movie to remove. # Output Print `m` integers — the maximum movie rating on the shelf after each operation, one per line. # Example Input ``` 5 6 1 3 10 1 1 5 1 5 7 2 3 1 2 20 2 5 ``` Output ``` 10 10 10 7 20 20 ``` # Explanation After each operation, the shelf and the maximum rating update as follows: 1. Add movie with rating 10 at position 3 --> Shelf: [., ., 10, ., .], Max: 10 2. Add movie with rating 5 at position 1 --> Shelf: [5, ., 10, ., .], Max: 10 3. Add movie with rating 7 at position 5 --> Shelf: [5, ., 10, ., 7], Max: 10 4. Remove movie from position 3 --> Shelf: [5, ., ., ., 7], Max: 7 5. Add movie with rating 20 at position 2 --> Shelf: [5, 20, ., ., 7], Max: 20 6. Remove movie from position 5 --> Shelf: [5, 20, ., ., .], Max: 20","solution":"def manage_movie_collection(n, m, operations): shelf = [0] * n max_rating = 0 results = [] for operation in operations: op = operation[0] if op == 1: p, r = operation[1] - 1, operation[2] # Adjust for 0-based indexing shelf[p] = r if r > max_rating: max_rating = r results.append(max_rating) elif op == 2: p = operation[1] - 1 # Adjust for 0-based indexing if shelf[p] == max_rating: shelf[p] = 0 max_rating = max(shelf) else: shelf[p] = 0 results.append(max_rating) return results # Example usage n, m = 5, 6 operations = [(1, 3, 10), (1, 1, 5), (1, 5, 7), (2, 3), (1, 2, 20), (2, 5)] print(manage_movie_collection(n, m, operations))"},{"question":"You have been hired to create an application that analyzes credit card spending patterns. Specifically, you need to determine the maximum spending amount in any continuous subarray of purchases. Given a list of daily spending amounts made by a customer, your task is to find the maximum sum of any contiguous subarray within that list. -----Input----- The input will begin with a line containing a single integer N (1 ≤ N ≤ 100000), the number of days recorded. The next line contains N space-separated integers representing the spending amounts for each day. The spending amounts can be negative, indicating refunds, and will be bounded by |a_i| ≤ 10^4. -----Output----- Print a single integer representing the maximum sum of any contiguous subarray of the list. -----Examples----- Input 9 -2 1 -3 4 -1 2 1 -5 4 Output 6 Input 5 1 2 3 4 5 Output 15 -----Note----- In the first example, the subarray with the largest sum is [4, -1, 2, 1] with a sum of 6. In the second example, the entire array is the subarray with the largest sum, which is 15.","solution":"def max_subarray_sum(spending): Returns the maximum sum of any contiguous subarray in the provided list of spending amounts. :param spending: List of integers representing daily spending amounts. :return: Integer, the maximum sum of any contiguous subarray. if not spending: return 0 current_sum = max_sum = spending[0] for amount in spending[1:]: current_sum = max(amount, current_sum + amount) max_sum = max(max_sum, current_sum) return max_sum"},{"question":"Linda and Leslie love playing a game called Book-and-Chapter. They recently discovered a website where they can read digital books, with each book being divided into several chapters. Each time they read a chapter, they mark it as read. However, if they click on a chapter that has already been read, it becomes unread again. Sometimes they want to mark all chapters of a book as unread at once. Given a sequence of operations performed by them, help Leslie determine the number of read chapters after each operation. -----Input----- The first line contains two integers, M and P, the number of chapters in the book (numbered 1 to M) and the number of operations respectively (1 ≤ M, P ≤ 1000). Each of the following P lines contains one of the following forms of operation: - READ X , where X is the chapter number (1 ≤ X ≤ M) - UNREADALL -----Output----- Output P lines, where the ith line contains the number of read chapters just after the ith operation. -----Example----- Input: 4 5 READ 3 READ 1 READ 3 UNREADALL READ 2 Output: 1 2 1 0 1 Explanation: Let read[x] = 1 if the xth chapter is read and 0 if it is unread. Initially read[1..4] = { 0 , 0 , 0 , 0 }. Here is the state of read[1..4] after each operation and corresponding count of read chapters: READ 3 : { 0, 0, 1, 0 }, read count = 1 READ 1 : { 1, 0, 1, 0 }, read count = 2 READ 3 : { 1, 0, 0, 0 }, read count = 1 UNREADALL : { 0, 0, 0, 0 }, read count = 0 READ 2 : { 0, 1, 0, 0 }, read count = 1","solution":"def read_operations(m, p, operations): Returns the number of read chapters after each operation. Parameters: m (int): Number of chapters in the book. p (int): Number of operations. operations (list of str): List of operations to be performed. Returns: list of int: Number of read chapters after each operation. read_status = [0] * m result = [] for operation in operations: if operation.startswith(\\"READ\\"): _, x = operation.split() x = int(x) - 1 read_status[x] = 1 - read_status[x] # Toggle the read status elif operation == \\"UNREADALL\\": read_status = [0] * m result.append(sum(read_status)) return result"},{"question":"Problem H: Constructing the Safe Path Sam is a skilled programmer and mathematician who\'s recently acquired a mysterious map. The map is a grid of size MxN with each cell representing a particular area of land. Certain cells contain obstacles which are impassable, while others are safe to traverse. Sam\'s objective is to construct a safe path from the top-left corner of the grid (0, 0) to the bottom-right corner (M-1, N-1). The map is represented as a matrix with 0s and 1s. 0 represents a safe area where Sam can move, while 1 represents an obstacle. Sam can only move to the right or down from any cell. He cannot move diagonally or in any other direction. Due to certain constraints in the map, it\'s possible that there may be no viable path for Sam to traverse from the start to the endpoint. If this is the case, Sam must be notified accordingly. Write a program that determines whether there is a safe path for Sam from the top-left corner to the bottom-right corner of the grid. If a path exists, the program should return true, otherwise false. Input 1. The input begins with a line containing two integers M and N (1 <= M, N <= 1000), which denotes the number of rows and columns in the grid respectively. 2. Each of the next M lines contains N integers (either 0 or 1), constituting the grid. Output Print \\"true\\" if there is a path from (0, 0) to (M-1, N-1), otherwise \\"false\\". Examples: Input 4 5 0 0 1 0 1 0 1 0 0 0 0 0 0 1 0 1 1 0 0 0 Output true Input 3 3 0 1 0 1 0 1 0 0 0 Output false Note: In the first example, a path exists along the route (0,0) -> (0,1) -> (1,0) -> (2,0) -> (2,1) -> (2,2) -> (3,2) -> (3,3) -> (3,4). In the second example, there is no safe path from the top-left corner to the bottom-right corner of the grid.","solution":"def is_safe_path_exists(grid): Determines if there is a safe path from the top-left corner to the bottom-right corner of the grid. from collections import deque M = len(grid) N = len(grid[0]) if grid[0][0] == 1 or grid[M-1][N-1] == 1: return \\"false\\" directions = [(1, 0), (0, 1)] # Down, Right visited = [[False] * N for _ in range(M)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == M - 1 and y == N - 1: return \\"true\\" for direction in directions: new_x, new_y = x + direction[0], y + direction[1] if 0 <= new_x < M and 0 <= new_y < N and not visited[new_x][new_y] and grid[new_x][new_y] == 0: visited[new_x][new_y] = True queue.append((new_x, new_y)) return \\"false\\""},{"question":"Sum of Missing Numbers Overview Given a list of integers with both positive and non-negative values, imagine a contiguous range ([0...n]) that fully encompasses all values in the given list, where `n` is the maximum value in the list. Your task is to identify all the numbers missing from this range (i.e., those that are not present in the list), and calculate the sum of these missing numbers. If no numbers are missing, return 0. Example: For the list ```python [2, 3, 7, 4, 9] ``` The contiguous range is from 0 to 9. The missing numbers are [0, 1, 5, 6, 8], and their sum is 20. Task Write a function `sum_of_missing_numbers` that takes a list of non-negative integers and returns the sum of the numbers missing from the smallest contiguous range that spans from 0 to the largest number in the list. Ensure the function is efficient with its operations. # Function Signature ```python def sum_of_missing_numbers(arr: list[int]) -> int: pass ``` # Input - A list of non-negative integers `(0 <= each_integer <= 10^6)`, not necessarily sorted. - The length of the list is `(0 <= length <= 10^6)`. # Output - An integer representing the sum of missing numbers. # Example Example 1: **Input:** ```python sum_of_missing_numbers([2, 3, 7, 4, 9]) ``` **Output:** ```python 20 ``` Example 2: **Input:** ```python sum_of_missing_numbers([0, 1, 2, 3, 4, 5]) ``` **Output:** ```python 0 ``` Example 3: **Input:** ```python sum_of_missing_numbers([]) ``` **Output:** ```python 0 ``` # Notes - Return 0 if the list is empty, as there are no numbers to consider. - Consider using a set for efficient look-up operations.","solution":"def sum_of_missing_numbers(arr): Returns the sum of missing numbers within the smallest contiguous range that includes all values from 0 to max(arr). if not arr: return 0 max_value = max(arr) full_set = set(range(max_value + 1)) arr_set = set(arr) missing_numbers = full_set - arr_set return sum(missing_numbers)"},{"question":"Anna loves playing with matrices and has a new challenge for you. She has an n x n matrix filled with integers ranging from 1 to n^2. Initially, some numbers in the matrix are already filled, while others are zero. Your task is to help Anna fill the matrix in such a way that all rows, columns, and the two main diagonals contain all integers from 1 to n. Input The first line of the input contains an integer n — the size of the matrix (3 ≤ n ≤ 10). The next n lines contain n integers each — the initial state of the matrix. A zero in the matrix represents an empty cell. Output Output n lines, each containing n integers — the filled matrix that satisfies Anna\'s condition. Note: If there are multiple valid solutions, output any of them. It is guaranteed that at least one solution exists. Example Input 3 1 0 3 0 2 0 0 0 0 Output 1 2 3 3 2 1 2 1 3 Explanation: The fields are filled in such a way that each row, each column, and both diagonals contain all numbers from 1 to 3 exactly once.","solution":"def solve_magic_square(n, matrix): def is_valid(num, row, col): # Check if num is already in the row or column for i in range(n): if matrix[row][i] == num or matrix[i][col] == num: return False # Check the main diagonals if row == col: for i in range(n): if matrix[i][i] == num: return False if row + col == n - 1: for i in range(n): if matrix[i][n - 1 - i] == num: return False return True def solve(row, col): if row == n: return True if col == n: return solve(row + 1, 0) if matrix[row][col] != 0: return solve(row, col + 1) for num in range(1, n + 1): if is_valid(num, row, col): matrix[row][col] = num if solve(row, col + 1): return True matrix[row][col] = 0 return False solve(0, 0) return matrix"},{"question":"Given a grid of size N times M with initial values set to 0, you need to perform a number of operations. Each operation increments the values of all cells in a specified subgrid. After all operations are performed, you need to find the value of the cell with the minimum value in the grid. ------ Input ------ The first line of the input contains three integers N, M (1 leq N, M leq 500), and Q (1 leq Q leq 1000) representing the number of rows, the number of columns, and the number of operations, respectively. The description of Q operations follows. Each of the next Q lines contains four integers x_1, y_1, x_2, y_2 (1 leq x_1 leq x_2 leq N, 1 leq y_1 leq y_2 leq M), representing the top left and bottom right corners of the subgrid to be incremented by 1. ------ Output ------ Print a single integer, the minimum value in the grid after all operations have been performed. ------ Example Input ------ 3 3 3 1 1 2 2 2 2 3 3 1 1 3 3 ------ Example Output ------ 1","solution":"def find_min_value_in_grid_after_operations(N, M, Q, operations): Given matrix dimensions N x M and a list of Q operations to increment values in the subgrids, returns the minimum value in the grid after all operations. grid = [[0]*M for _ in range(N)] for x1, y1, x2, y2 in operations: for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): grid[i][j] += 1 min_value = min(min(row) for row in grid) return min_value"},{"question":"In this problem, you are given an integer `n` and your task is to generate all possible combinations of well-formed parentheses of length `2*n`. A well-formed parentheses string is one where every opening parenthesis `(` has a corresponding closing parenthesis `)` and the sequence is correctly nested. The solution should not include duplicate combinations. ```Python for example: generateParentheses(3) -> [\\"((()))\\", \\"(()())\\", \\"(())()\\", \\"()(())\\", \\"()()()\\"] generateParentheses(2) -> [\\"(())\\", \\"()()\\"] generateParentheses(1) -> [\\"()\\"] All outputs must be in lexicographical order. ``` The function signature should be: ```Python def generateParentheses(n: int) -> List[str]: pass ``` You can assume that: - `1 <= n <= 8`","solution":"from typing import List def generateParentheses(n: int) -> List[str]: def backtrack(S, left, right): if len(S) == 2 * n: res.append(\\"\\".join(S)) return if left < n: S.append(\'(\') backtrack(S, left + 1, right) S.pop() if right < left: S.append(\')\') backtrack(S, left, right + 1) S.pop() res = [] backtrack([], 0, 0) return res"},{"question":"A company wants to place a number of sensors in a rectangular area to monitor environmental conditions. Each sensor has a specific range represented by a circle with a given radius. The goal is to determine if it is possible to cover the entire rectangular area with the given sensors. You need to write a program to analyze this scenario. Input The input consists of multiple test cases, followed by a line containing \\"0\\". Each test case starts with four integers W (1 leq W leq 1000), H (1 leq H leq 1000), N (1 leq N leq 100), and R (1 leq R leq 100), representing the width and height of the rectangular area, the number of sensors, and the radius of each sensor, respectively. Each of the next N lines contains two integers x_i and y_i (0 leq x_i leq W, 0 leq y_i leq H), representing the coordinates of each sensor. Output For each test case, print its case number and \\"Yes\\" if the sensors can cover the entire rectangular area, otherwise print \\"No\\". Example Input 5 5 4 2 1 1 1 4 4 1 4 4 10 10 5 3 1 1 1 9 9 1 9 9 5 5 0 Output Case 1: Yes Case 2: No","solution":"import math def is_covered(W, H, sensors, R): # A function to check if each point in the rectanglar area is covered by at least one sensor def point_covered(x, y): for (sx, sy) in sensors: if math.sqrt((sx - x)**2 + (sy - y)**2) <= R: return True return False for x in range(W + 1): for y in range(H + 1): if not point_covered(x, y): # If any point in the rectangle is not covered return False return True def analyze_coverage(test_cases): results = [] case_num = 1 for case in test_cases: W, H, N, R = case[0] sensors = case[1] if is_covered(W, H, sensors, R): results.append(f\\"Case {case_num}: Yes\\") else: results.append(f\\"Case {case_num}: No\\") case_num += 1 return results def read_input_data(input_data): test_cases = [] lines = input_data.strip().split(\'n\') i = 0 while i < len(lines): first_line = list(map(int, lines[i].split())) if first_line == [0]: break W, H, N, R = first_line sensors = [tuple(map(int, lines[i+j+1].split())) for j in range(N)] test_cases.append(((W, H, N, R), sensors)) i += N + 1 return test_cases def main(input_data): test_cases = read_input_data(input_data) results = analyze_coverage(test_cases) for result in results: print(result) # Example usage: if __name__ == \\"__main__\\": input_data = 5 5 4 2 1 1 1 4 4 1 4 4 10 10 5 3 1 1 1 9 9 1 9 9 5 5 0 main(input_data)"},{"question":"You are given a binary string (a string consisting of only \'0\'s and \'1\'s). Your task is to remove the minimum number of characters from the string so that no two consecutive characters are the same. You need to determine and output the minimum number of characters to delete. ------ Input Format ------ - The first line contains a single integer T denoting the number of test cases. Then the test cases follow. - Each test case contains a single binary string S. ------ Output Format ------ For each test case, output on a single line the minimum number of characters that need to be deleted to achieve the desired result. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ |S| ≤ 10^{5} The sum of the lengths of the binary strings over all test cases does not exceed 10^{6}. ------ Sample Input 1 ------ 3 010101 0001 1110 ------ Sample Output 1 ------ 0 2 2 ------ Explanation 1 ------ - Test case 1: The given binary string \\"010101\\" already has no two consecutive characters being the same. Therefore, no characters need to be deleted. - Test case 2: The given binary string \\"0001\\" has two consecutive \'0\'s. We need to delete two \'0\'s to get \\"01\\". - Test case 3: The given binary string \\"1110\\" has two sets of consecutive \'1\'s. We need to delete two \'1\'s to get \\"10\\".","solution":"def min_deletions_to_no_consecutive_duplicates(T, test_cases): results = [] for S in test_cases: deletions = 0 for i in range(1, len(S)): if S[i] == S[i-1]: deletions += 1 results.append(deletions) return results # Example usage: # T = 3 # test_cases = [\\"010101\\", \\"0001\\", \\"1110\\"] # print(min_deletions_to_no_consecutive_duplicates(T, test_cases)) # Output: [0, 2, 2]"},{"question":"You are given a grid of size N x N with obstacles represented by \'X\' and free cells represented by \'.\'. Your task is to determine the minimum number of steps required to move from the top-left corner (0,0) to the bottom-right corner (N-1,N-1) of the grid. You can move up, down, left, or right, and you cannot move through obstacles. If it is not possible to reach the bottom-right corner, return -1. Input - First line contains the number of test cases. For each test case, the first line contains an integer N indicating the size of the grid. The next N lines each contain a string of length N, representing the rows of the grid. Output - For each test case, print the minimum number of steps required to reach the bottom-right corner. If it is not possible, print -1. SAMPLE INPUT 2 3 ... .X. ... 3 .X. X.. ... SAMPLE OUTPUT 4 -1 Explanation Testcase 1 - Starting from (0,0), the path to (2,2) is (0,0) -> (1,0) -> (1,1) -> (1,2) -> (2,2), which takes 4 steps. Testcase 2 - It is not possible to reach (2,2) because the obstacles block all possible paths.","solution":"from collections import deque def min_steps_to_reach_end(grid): N = len(grid) if grid[0][0] == \'X\' or grid[N-1][N-1] == \'X\': return -1 # If start or end is blocked directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, steps) visited = set((0, 0)) while queue: row, col, steps = queue.popleft() if row == N-1 and col == N-1: return steps for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < N and 0 <= new_col < N and grid[new_row][new_col] == \'.\' and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, steps + 1)) return -1 # If no path is found def solve(grid_cases): results = [] for grid in grid_cases: results.append(min_steps_to_reach_end(grid)) return results def process_input_output(input_str): input_lines = input_str.strip().split(\\"n\\") test_cases = int(input_lines[0]) index = 1 grid_cases = [] for _ in range(test_cases): N = int(input_lines[index]) index += 1 grid = [] for _ in range(N): grid.append(input_lines[index]) index += 1 grid_cases.append(grid) results = solve(grid_cases) return results"},{"question":"Write a function that rotates a list to the right by \'k\' steps. For example, given the list [1, 2, 3, 4, 5, 6, 7] and k = 3, the function should return [5, 6, 7, 1, 2, 3, 4]. Function signature: `def rotate_list(nums: list[int], k: int) -> list[int]:` Examples: rotate_list([1, 2, 3, 4, 5, 6, 7], 3) -> [5, 6, 7, 1, 2, 3, 4] rotate_list([1, 2, 3, 4, 5], 2) -> [4, 5, 1, 2, 3] Note: - You may assume k is non-negative. - If k is greater than the length of the list, it should rotate as many times as necessary to get the correct result. - The input list `nums` should not be modified; create a new list for the output.","solution":"def rotate_list(nums: list[int], k: int) -> list[int]: Rotates a list to the right by \'k\' steps. Args: nums: List of integers to be rotated. k: Number of steps to rotate the list to the right. Returns: Rotated list. if not nums: # if the list is empty return [] n = len(nums) k = k % n # handle cases where k > n return nums[-k:] + nums[:-k]"},{"question":"Find the maximum of three integers. -----Constraints----- - -1000 leq X, Y, Z leq 1000 - All values in input are integers. -----Input----- Input is given from Standard Input in the following format: X Y Z -----Output----- Print the maximum value among the three integers X, Y, and Z. -----Sample Input----- 3 9 -5 -----Sample Output----- 9 We have the three integers 3, 9, and -5. The maximum value is 9.","solution":"def max_of_three(X, Y, Z): Returns the maximum of three integers X, Y, and Z. return max(X, Y, Z) # Example usage if __name__ == \\"__main__\\": import sys input = sys.stdin.read() X, Y, Z = map(int, input.strip().split()) print(max_of_three(X, Y, Z))"},{"question":"You are given a sequence of integers representing the heights of buildings in a city. The goal is to determine the total water that can be trapped between the buildings after raining. You need to account for the structure\'s elevation and valleys between them which might collect water. Each building\'s height is given by an integer in the array, where the width of each building is 1. Water trapped between two buildings is calculated based on the shorter height of the two buildings forming the boundary of a trapped water region. Water can only be trapped when there is a building taller than the local dips on either side. Write a function to compute the total units of water that can be trapped. Input: - The first line contains an integer n (1 ≤ n ≤ 1000) — the number of buildings. - The second line contains n integers (0 ≤ height[i] ≤ 1000) — the height of each building. Output: - Output one integer, the total units of water that can be trapped after the rain. Examples Input: 6 0 1 0 2 1 0 Output: 1 Input: 12 0 1 0 2 1 0 1 3 2 1 2 1 Output: 6 Explanation: For the first example, there is only one unit of water trapped between the two buildings of heights 1 and 2 at the indices 1 and 3. For the second example, the trapped water is calculated as follows: - 1 unit between heights at index 1 and 3 - 3 units between heights at index 3 and 7 - 2 units between heights at index 7 and 9 Thus, the total water trapped is 6 units.","solution":"def trap_water(heights): if not heights: return 0 n = len(heights) left_max = [0] * n right_max = [0] * n left_max[0] = heights[0] for i in range(1, n): left_max[i] = max(left_max[i-1], heights[i]) right_max[n-1] = heights[n-1] for i in range(n-2, -1, -1): right_max[i] = max(right_max[i+1], heights[i]) water_trapped = 0 for i in range(n): water_trapped += min(left_max[i], right_max[i]) - heights[i] return water_trapped"},{"question":"A large tech conference is being organized, and the planning committee is responsible for scheduling sessions in different rooms. Each speaker has specific time slots when they can present, which may overlap with other speakers\' time slots. To maximize the number of sessions held, the committee needs to figure out the largest set of non-overlapping time slots. Given the time slots, help the committee come up with the optimal schedule. Constraints * Each time slot is represented by a pair of integers [start, end), where `start` is the start time and `end` is the end time, exclusive. * Time slots are given as a list of pairs of integers. * The number of time slots is between 1 and 1000. * Start and end times are between 0 and 10000. Input * An integer n, the number of time slots. * n lines follow, each containing two integers start and end representing the time slots. Output * An integer representing the maximum number of non-overlapping time slots that can be scheduled. Examples Input 5 1 3 2 5 4 7 6 9 8 10 Output 3 Input 3 1 2 2 3 3 4 Output 3 Input 4 1 2 1 3 2 4 3 5 Output 2 Explanation In the first example, the time slots that can be chosen are [1, 3], [4, 7], and [8, 10], which are non-overlapping. In the second example, the time slots [1, 2], [2, 3], and [3, 4] can be chosen as they do not overlap with each other. In the third example, the optimal set of non-overlapping time slots are [1, 2] and [3, 5].","solution":"def max_non_overlap_sessions(n, time_slots): Returns the maximum number of non-overlapping time slots. :param n: The number of time slots. :param time_slots: A list of tuples representing the time slots. :return: The maximum number of non-overlapping time slots. # Sort time slots by their end time time_slots.sort(key=lambda x: x[1]) # Initialize variables count = 0 last_end_time = 0 # Iterate through the sorted time slots for start, end in time_slots: if start >= last_end_time: count += 1 last_end_time = end return count # Example Usage: n = 5 time_slots = [ (1, 3), (2, 5), (4, 7), (6, 9), (8, 10) ] print(max_non_overlap_sessions(n, time_slots)) # Output: 3"},{"question":"In a country called Relogistan, the railway system needs optimization. The railway network is represented by an undirected, weighted graph where vertices represent cities and edges represent railway tracks between cities with weights denoting the time (in hours) required to travel between the cities. The railway department wants to ensure that there exists a minimum spanning tree (MST) of the network so that the total travel time between cities is minimized. Your task is to design and implement an algorithm to find the maximum edge weight in the minimum spanning tree of the given graph. Constraints * 2 ≤ n ≤ 100 (number of cities) * 1 ≤ m ≤ 1000 (number of railway tracks) Input The input consists of a number of test cases. Each test case begins with two integers n and m. Each of the next m lines contains three integers u, v, and w, which denote a railway track between cities u and v with travel time w. The cities are numbered from 0 to n-1. The input terminates with a line containing two zeros. Output For each test case, output the maximum edge weight in the minimum spanning tree. Example Input 4 5 0 1 10 0 2 6 0 3 5 1 3 15 2 3 4 3 3 0 1 10 0 2 6 1 2 5 0 0 Output 10 6","solution":"def find_max_edge_in_mst(num_cities, num_tracks, tracks): Function to find the maximum edge weight in the minimum spanning tree of the given graph. :param num_cities: Number of cities (vertices) in the graph :param num_tracks: Number of railway tracks (edges) in the graph :param tracks: List of tuples representing the edges (u, v, w) :return: Maximum edge weight in the minimum spanning tree # Applying Kruskal\'s algorithm to find the MST parent = list(range(num_cities)) rank = [0] * num_cities def find(v): if parent[v] != v: parent[v] = find(parent[v]) return parent[v] def union(v1, v2): root1 = find(v1) root2 = find(v2) if root1 != root2: if rank[root1] > rank[root2]: parent[root2] = root1 elif rank[root1] < rank[root2]: parent[root1] = root2 else: parent[root2] = root1 rank[root1] += 1 # Sort all the edges in the graph by weight tracks.sort(key=lambda x: x[2]) max_edge_weight = 0 mst_edges = 0 for u, v, w in tracks: if find(u) != find(v): union(u, v) max_edge_weight = max(max_edge_weight, w) mst_edges += 1 if mst_edges == num_cities - 1: break return max_edge_weight def process_input(input_lines): Processes the input lines and returns the output for each test case. index = 0 results = [] while index < len(input_lines): n, m = map(int, input_lines[index].split()) if n == 0 and m == 0: break index += 1 tracks = [] for _ in range(m): u, v, w = map(int, input_lines[index].split()) tracks.append((u, v, w)) index += 1 results.append(find_max_edge_in_mst(n, m, tracks)) return results"},{"question":"You are given a series of transactions in a bank application. Each transaction consists of a value and a type. The types are either \'D\' for deposit or \'W\' for withdrawal. A deposit increases the balance of the account by the value of the transaction, and a withdrawal decreases it by the same value. You need to determine the highest possible balance at any point after processing all the transactions. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of transactions. Each of the following n lines contains a character and an integer separated by a space. The character is either \'D\' or \'W\' representing a deposit or withdrawal, respectively, and the integer (0 ≤ value ≤ 10000) is the transaction amount. Output Print the highest balance possible after processing all the transactions. Examples Input 6 D 100 W 50 D 200 W 150 D 300 W 100 Output 500 Input 4 D 100 D 200 W 150 W 50 Output 250 Note In the first example, the transactions are processed in the following order: - Deposit 100: Balance = 100 - Withdraw 50: Balance = 50 - Deposit 200: Balance = 250 (highest so far) - Withdraw 150: Balance = 100 - Deposit 300: Balance = 400 (highest so far) - Withdraw 100: Balance = 300 The highest balance during the transaction processing is 400, which is printed as the output. In the second example, the transactions are processed in the following order: - Deposit 100: Balance = 100 - Deposit 200: Balance = 300 (highest so far) - Withdraw 150: Balance = 150 - Withdraw 50: Balance = 100 The highest balance during the transaction processing is 300, which is printed as the output.","solution":"def highest_possible_balance(n, transactions): Determines the highest possible balance at any point after processing all the transactions. Args: n (int): Number of transactions. transactions (list of tuples): Each tuple contains a character (\'D\' or \'W\') and an integer (value). Returns: int: The highest balance possible. balance = 0 max_balance = 0 for trans_type, value in transactions: if trans_type == \'D\': balance += value elif trans_type == \'W\': balance -= value max_balance = max(max_balance, balance) return max_balance def parse_input(input_str): Parses the input and converts it into relevant data structures. Args: input_str (str): Input string containing the number of transactions followed by transactions. Returns: tuple: Contains number of transactions and the list of transactions. lines = input_str.strip().split(\'n\') n = int(lines[0]) transactions = [(line.split()[0], int(line.split()[1])) for line in lines[1:]] return n, transactions"},{"question":"A palindrome is a string that reads the same forwards as backwards (e.g., \\"racecar\\", \\"level\\"). You are tasked with transforming a given string into a palindrome by removing some (possibly zero) characters. The challenge is to determine the minimum number of characters that need to be removed to make the string a palindrome. For example, given the string \\"abac\\", you can remove either \'b\' or \'c\' to get \\"aba\\" or \\"aca\\", both of which are palindromes. Hence, the minimum number of characters to remove is 1. -----Input----- The only line contains one string s (1 le |s| le 3000). The string consists of lowercase Latin letters. -----Output----- Print the minimum number of characters that need to be removed to make the string s a palindrome. -----Examples----- Input abac Output 1 Input abcde Output 4","solution":"def min_deletions_to_palindrome(s): def lcs(X, Y, m, n): dp = [[0 for x in range(n + 1)] for y in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif X[i - 1] == Y[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[m][n] rev_s = s[::-1] longest_palindromic_subseq_length = lcs(s, rev_s, len(s), len(s)) return len(s) - longest_palindromic_subseq_length"},{"question":"You will be given an integer n, your task is to return the factorial of the given number n. As the answer can be very large, return the answer modulo 10^{9}+7. Example 1: Input: n = 5 Output: 120 Explanation: 5! = 5 x 4 x 3 x 2 x 1 = 120 Example 2: Input: n = 3 Output: 6 Explanation: 3! = 3 x 2 x 1 = 6 Your Task: You don\'t need to read input or print anything. Your task is to complete the function factorial() which takes a single integer n as input and returns factorial of n modulo 10^{9}+7. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 0 <= n <= 10^{5}","solution":"MOD = 10**9 + 7 def factorial(n): Returns the factorial of n modulo 10^9 + 7. Parameters: n (int): The integer to calculate the factorial of. Returns: int: The factorial of n modulo 10^9 + 7. if n == 0 or n == 1: return 1 result = 1 for i in range(2, n + 1): result = (result * i) % MOD return result"},{"question":"Given a grid of characters and a target word, write a function `word_search(grid, word)` that determines if the word can be found in the grid following these rules: - The word can be constructed from letters of sequentially adjacent cells, where \\"adjacent\\" cells are those horizontally or vertically neighboring. - The same letter cell may not be used more than once. For example, given the grid: ``` [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] ``` And the word \\"ABCCED\\", the function should return `True` because the word can be found in the path: A -> B -> C -> C -> E -> D. If the word is \\"SEE\\", the function should return `True` as well, following the path: S -> E -> E. However, if the word is \\"ABCB\\", the function should return `False` because once the letter \'B\' is used, it cannot be reused. # Function Signature ```python def word_search(grid: List[List[str]], word: str) -> bool: # Your code here ``` # Example Usage ```python grid1 = [ [\'A\', \'B\', \'C\', \'E\'], [\'S\', \'F\', \'C\', \'S\'], [\'A\', \'D\', \'E\', \'E\'] ] assert word_search(grid1, \\"ABCCED\\") == True assert word_search(grid1, \\"SEE\\") == True assert word_search(grid1, \\"ABCB\\") == False ``` # Constraints - `grid` will be a list of lists containing characters, with a minimum size of `1x1` and maximum size of `200x200`. - `word` will be a string containing between `1` and `1000` characters.","solution":"def word_search(grid, word): rows, cols = len(grid), len(grid[0]) def dfs(r, c, index): if index == len(word): return True if r < 0 or r >= rows or c < 0 or c >= cols or grid[r][c] != word[index]: return False temp, grid[r][c] = grid[r][c], \'#\' found = (dfs(r + 1, c, index + 1) or dfs(r - 1, c, index + 1) or dfs(r, c + 1, index + 1) or dfs(r, c - 1, index + 1)) grid[r][c] = temp return found for row in range(rows): for col in range(cols): if grid[row][col] == word[0] and dfs(row, col, 0): return True return False"},{"question":"Given an array of positive integers, determine the number of pairs (i, j) where i < j and the greatest common divisor (GCD) of the elements at these indices is greater than 1. Input The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains an integer n, the size of the array. - The second line contains n positive integers separated by spaces, which represent the elements of the array. Output For each test case, output a single integer, the number of pairs (i, j) where i < j and GCD(array[i], array[j]) > 1. Constraints 1 ≤ n ≤ 1000 1 ≤ array[i] ≤ 10^5 T ≤ 10 SAMPLE INPUT 2 3 6 10 15 4 12 15 18 20 SAMPLE OUTPUT 3 6","solution":"import math def find_gcd_pairs_count(arr): n = len(arr) count = 0 for i in range(n): for j in range(i + 1, n): if math.gcd(arr[i], arr[j]) > 1: count += 1 return count def number_of_gcd_pairs(test_cases): results = [] for test_case in test_cases: n, arr = test_case results.append(find_gcd_pairs_count(arr)) return results"},{"question":"Given an integer N, create the smallest number X such that the sum of the digits of X is equal to N. If there are multiple answers, return the smallest one in terms of numerical value. Example 1: Input: N = 10 Output: 19 Explanation: The sum of digits of 19 is 1 + 9 = 10. This is the smallest number possible with the digit sum of 10. Example 2: Input: N = 15 Output: 69 Explanation: The sum of digits of 69 is 6 + 9 = 15. This is the smallest number possible with the digit sum of 15. Your Task: You don\'t need to read input or print anything. Your task is to complete the function smallestNumber() which takes the integer N as input parameters and returns the smallest number X such that the sum of the digits of X is equal to N. Expected Time Complexity: O(d) where d is the number of digits in N. Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6","solution":"def smallestNumber(N): Generate the smallest number X such that the sum of the digits of X is equal to N. if N == 0: return 0 digits = [] while N > 0: if N > 9: digits.append(9) N -= 9 else: digits.append(N) N = 0 return int(\\"\\".join(map(str, digits[::-1])))"},{"question":"In a galaxy far away, there\'s a planet named Zog ruled by an alien named Zorg. Zorg loves numbers, especially calculating with large matrices. Here\'s the challenge Zorg faces: Given two matrices A and B of size N x N, Zorg wants to find the matrix C which is the element-wise maximum of A and B. The element-wise maximum of two matrices is a matrix where each element C_ij = max(A_ij, B_ij). Help Zorg by writing a program to determine the matrix C. -----Input----- The first line contains a single integer N (1 ≤ N ≤ 1000) — the size of the matrices. The next N lines each contain N integers, which represent matrix A. The integers are separated by spaces and have values from 0 to 10^9. The following N lines each contain N integers, which represent matrix B. The integers are separated by spaces and have values from 0 to 10^9. -----Output----- Output N lines, with each line containing N integers. Each integer in the i-th row and j-th column should represent the value of C_ij. -----Examples----- Input 3 1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1 Output 9 8 7 6 5 6 7 8 9 Input 2 5 1 0 2 5 3 7 2 Output 5 3 7 2","solution":"def element_wise_maximum(N, A, B): Returns the element-wise maximum of two NxN matrices A and B. C = [] for i in range(N): row = [] for j in range(N): row.append(max(A[i][j], B[i][j])) C.append(row) return C"},{"question":"You are given a logistics task for managing the inventory of a warehouse. The warehouse has N types of items. Initially, each type of item has a certain stock. Over a period of D days, there are transactions where items are either added to or removed from the inventory. For each day, you need to calculate the total amount of items in the warehouse. # Input The input is given from Standard Input in the following format: ``` N D s_1 s_2 ... s_N d_1 t_1 q_1 d_2 t_2 q_2 ... d_D t_D q_D ``` - `N` (1 ≤ N ≤ 100) - The number of different types of items in the warehouse. - `D` (1 ≤ D ≤ 100) - The number of days transactions are recorded. - `s_i` (0 ≤ s_i ≤ 1000) - Initial stock of the i-th type of item (1 ≤ i ≤ N). - For each transaction: - `d_k` (1 ≤ d_k ≤ D) - Day of the transaction. - `t_k` (1 ≤ t_k ≤ N) - Type of item involved in the transaction. - `q_k` (-100 ≤ q_k ≤ 100) - Quantity of the item added (if positive) or removed (if negative). # Output For each day, print the total stock of all items in the warehouse at the end of the day, separated by newlines. # Example Input ``` 3 5 100 200 300 1 1 50 2 2 -30 3 3 100 4 1 -60 5 2 10 ``` Output ``` 650 620 720 660 670 ``` Explanation: - Day 1: Add 50 units to item type 1. Stocks: [150, 200, 300]. Total: 650 - Day 2: Remove 30 units from item type 2. Stocks: [150, 170, 300]. Total: 620 - Day 3: Add 100 units to item type 3. Stocks: [150, 170, 400]. Total: 720 - Day 4: Remove 60 units from item type 1. Stocks: [90, 170, 400]. Total: 660 - Day 5: Add 10 units to item type 2. Stocks: [90, 180, 400]. Total: 670","solution":"def warehouse_inventory(N, D, initial_stocks, transactions): stocks = initial_stocks[:] results = [] for d in range(1, D+1): for transaction in transactions: if transaction[0] == d: item_type = transaction[1] - 1 quantity = transaction[2] stocks[item_type] += quantity results.append(sum(stocks)) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') N, D = map(int, lines[0].split()) initial_stocks = list(map(int, lines[1].split())) transactions = [tuple(map(int, line.split())) for line in lines[2:]] return N, D, initial_stocks, transactions if __name__ == \'__main__\': import sys input_str = sys.stdin.read() N, D, initial_stocks, transactions = parse_input(input_str) result = warehouse_inventory(N, D, initial_stocks, transactions) for r in result: print(r)"},{"question":"Given an integer `n`, write a function that returns the sum of all even numbers from 1 to `n` inclusive. If `n` is less than 1, the function should return 0. # Examples: - For `n = 10`, the function should return `30` (2 + 4 + 6 + 8 + 10). - For `n = 5`, the function should return `6` (2 + 4). - For `n = 0`, the function should return `0`. - For `n = -4`, the function should return `0`. # Constraints: - The function should handle any integer input, including negative values.","solution":"def sum_of_even_numbers(n): Returns the sum of all even numbers from 1 to n inclusive. If n is less than 1, the function returns 0. if n < 1: return 0 return sum(i for i in range(2, n + 1, 2))"},{"question":"Given a string \'s\' consisting of only lowercase \'a\' and \'b\' characters, you need to remove the minimum number of characters to make the string alternating. A string is said to be alternating if no two adjacent characters are the same. Your task is to return the resultant alternating string after removing the minimum number of characters. Example 1: Input: s = \\"aab\\" Output: \\"ab\\" Explanation: The string \\"aab\\" can be made alternating by removing one \'a\'. Example 2: Input: s = \\"aabb\\" Output: \\"ab\\" or \\"ba\\" Explanation: The string \\"aabb\\" can be made alternating by removing two characters (\'a\' and \'b\' from one of the pairs). Example 3: Input: s = \\"abab\\" Output: \\"abab\\" Explanation: The string \\"abab\\" is already alternating. Your Task: You don\'t need to read input or print anything. Your task is to complete the function make_alternating() which takes s as input and returns the resultant alternating string. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 ≤ s.length ≤ 10^5","solution":"def make_alternating(s): Returns the resultant alternating string after removing the minimum number of characters. if not s: return \\"\\" result = [s[0]] # Initialize result with the first character for char in s[1:]: if char != result[-1]: result.append(char) return \'\'.join(result) # Example usage: # print(make_alternating(\\"aab\\")) # Output: \\"ab\\" # print(make_alternating(\\"aabb\\")) # Output: \\"ab\\" or \\"ba\\" # print(make_alternating(\\"abab\\")) # Output: \\"abab\\""},{"question":"Given a string S consisting of lowercase alphabets, write a program to determine if characters can be rearranged to form a palindrome. If possible, output \\"YES\\". Otherwise, output \\"NO\\". A string can be rearranged to form a palindrome if its character frequencies allow for it. A palindrome reads the same forward and backward, so if all characters except at most one have even frequencies, we can rearrange the string to form one. Notes To determine if the string can be rearranged to form a palindrome, you can count the occurrences of each character and then check the number of characters with odd counts. If more than one character has an odd count, it is not possible to rearrange the string into a palindrome. For example, the string \\"civic\\" can be rearranged to form the palindrome \\"civic\\" itself, while the string \\"ivicc\\" can be rearranged to \\"civic\\". However, the string \\"hello\\" cannot be rearranged into any palindrome. Constraints * The length of the string S is at most 100,000. * Each character in S is a lowercase alphabet. Input The input consists of a single line containing the string S. Output Output \\"YES\\" if the string can be rearranged to form a palindrome. Otherwise, output \\"NO\\". Example Input civic Output YES Input ivicc Output YES Input hello Output NO","solution":"def can_form_palindrome(S): Determines if characters in the string S can be rearranged to form a palindrome. :param S: Input string consisting of lowercase alphabets :return: \\"YES\\" if the string can be rearranged to form a palindrome, otherwise \\"NO\\" from collections import Counter char_count = Counter(S) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Consider a standard deck of 52 cards, which consists of 4 suits: hearts, diamonds, clubs, and spades. Each suit has 13 ranks: Ace, 2, 3, ..., 10, Jack, Queen, King. Write a function that simulates shuffling the deck and then deals a specified number of cards. The function should return a list of dealt cards in the format \\"{rank} of {suit}\\". Implement a function `deal_cards(num_cards)` where `num_cards` is a positive integer representing the number of cards to deal. If `num_cards` is greater than 52, it should return a message indicating that there aren\'t enough cards to deal. Example output: ``` deal_cards(5) # Possible output: [\'7 of hearts\', \'2 of spades\', \'King of clubs\', \'10 of hearts\', \'3 of diamonds\'] ``` Ensure the output list of dealt cards is shuffled and unique each time the function is called.","solution":"import random def deal_cards(num_cards): Simulates shuffling a standard deck of 52 cards and deals a specified number of cards. Args: num_cards (int): The number of cards to deal. Returns: list: A list of dealt cards in the format \\"{rank} of {suit}\\". If num_cards > 52, returns a string message indicating there aren\'t enough cards. suits = [\'hearts\', \'diamonds\', \'clubs\', \'spades\'] ranks = [\'Ace\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'10\', \'Jack\', \'Queen\', \'King\'] if num_cards > 52: return \\"Not enough cards to deal\\" deck = [f\\"{rank} of {suit}\\" for suit in suits for rank in ranks] random.shuffle(deck) return deck[:num_cards]"},{"question":"Alice loves playing with numbers and she decided to create a series from a given number by following a sequence of operations. The sequence of operations is defined as follows: 1. Start with a number S. 2. If S is even, divide it by 2. 3. If S is odd, multiply it by 3 and add 1. Alice will continue performing these operations until S becomes 1. Your task is to find out how many operations are needed for the series to reach 1. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. The following T lines each describe a test case. - Each test case consists of a single integer S. ------ Output Format ------ For each test case, output a single integer on a new line, denoting the number of operations needed for S to become 1. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ S ≤ 10^7 ----- Sample Input 1 ------ 3 6 1 7 ----- Sample Output 1 ------ 8 0 16 ----- Explanation 1 ------ Test case 1: Starting with S = 6, the sequence of operations are: 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1, thus requiring 8 steps. Test case 2: S is already 1, hence no operations are needed. Test case 3: Starting with S = 7, the sequence of operations are: 7 → 22 → 11 → 34 → 17 → 52 → 26 → 13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1, thus requiring 16 steps.","solution":"def steps_to_one(S): Returns the number of operations needed for number S to reach 1 following the defined sequence. steps = 0 while S != 1: if S % 2 == 0: S //= 2 else: S = S * 3 + 1 steps += 1 return steps def process_test_cases(test_cases): Processes multiple test cases and returns a list of results for each test case. results = [] for S in test_cases: results.append(steps_to_one(S)) return results"},{"question":"Write a function that creates a \\"spiral matrix\\" of size `n x n`. The numbers in the spiral starts from `1` and increases sequentially. Examples ```python For n = 3: [ [1, 2, 3], [8, 9, 4], [7, 6, 5] ] For n = 4: [ [1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7] ] For n = 5: [ [1, 2, 3, 4, 5], [16, 17, 18, 19, 6], [15, 24, 25, 20, 7], [14, 23, 22, 21, 8], [13, 12, 11, 10, 9] ] ``` Note: You should handle up to `n = 100` efficiently.","solution":"def generate_spiral_matrix(n): Generates an n x n spiral matrix with numbers from 1 to n^2. if n <= 0: return [] matrix = [[0] * n for _ in range(n)] num = 1 left, right = 0, n - 1 top, bottom = 0, n - 1 while left <= right and top <= bottom: # Fill top row for i in range(left, right + 1): matrix[top][i] = num num += 1 top += 1 # Fill right column for i in range(top, bottom + 1): matrix[i][right] = num num += 1 right -= 1 # Fill bottom row if there is still a row to fill if top <= bottom: for i in range(right, left - 1, -1): matrix[bottom][i] = num num += 1 bottom -= 1 # Fill left column if there is still a column to fill if left <= right: for i in range(bottom, top - 1, -1): matrix[i][left] = num num += 1 left += 1 return matrix"},{"question":"Tommy loves playing with numbers, especially with permutations and combinations. Today, his teacher challenged him with an interesting problem. The teacher gave Tommy a bag containing different types of balls, and each type has a specific weight. Tommy’s task is to distribute the balls into two bags such that the difference in weight between the two bags is minimized. Tommy can only discretely split the balls, meaning he cannot break a ball into two or more parts. Help Tommy find the minimal possible difference in weight between the two bags. -----Input----- The first line contains an integer N (1 ≤ N ≤ 20), the number of different types of balls. The following line contains N integers W, where each Wᵢ (1 ≤ Wᵢ ≤ 1000) represents the weight of the ball of the i-th type. -----Output----- The first and only line of output must contain the minimal possible difference in weight between the two bags, an integer value. -----Examples----- Sample Input 1: 4 5 3 8 6 Sample Output 1: 0 Sample Input 2: 3 1 2 7 Sample Output 2: 4 # Explanation In the first example, Tommy can split the balls into (5, 8) weighing 13 and (3, 6) also weighing 13, resulting in zero difference. In the second example, Tommy can split the balls into (1, 2) weighing 3 and (7) weighing 7, resulting in a difference of 4.","solution":"def min_diff(weight_list): This function returns the minimal possible difference in weight between two bags when the weight_list is split optimally. N = len(weight_list) total_weight = sum(weight_list) target = total_weight // 2 dp = [False] * (target + 1) dp[0] = True for weight in weight_list: for i in range(target, weight - 1, -1): dp[i] = dp[i] or dp[i - weight] for i in range(target, -1, -1): if dp[i]: return total_weight - 2 * i # Sample usage # print(min_diff([5, 3, 8, 6])) # Should output 0 # print(min_diff([1, 2, 7])) # Should output 4"},{"question":"The city\'s urban planning committee is planning to build a series of parks throughout the city. Each park must be rectangular and its sides must be parallel to the coordinate axes. Given the positions of potential corners of these parks, your task is to determine the area of the largest possible rectangular park that can be built. Input The first line contains a single integer n (1 ≤ n ≤ 100000) — the number of pairs of coordinates given. The following n lines each contain two integers x and y (|x|, |y| ≤ 109), representing a point in the coordinate plane. Output Print a single integer — the area of the largest possible rectangular park. If no rectangle can be formed using the given points, print 0. Examples Input 6 1 1 1 4 4 1 4 4 2 5 5 2 Output 9 Input 3 1 1 2 2 3 3 Output 0 Note In the first example, the largest rectangle can be formed by the points (1, 1), (1, 4), (4, 1), and (4, 4) resulting in an area of 3 x 3 = 9. In the second example, no rectangle can be formed using the given points, so the output is 0.","solution":"def largest_rectangle_area(n, points): if n < 4: return 0 points_set = set(points) max_area = 0 for i in range(n): for j in range(i + 1, n): if points[i][0] != points[j][0] and points[i][1] != points[j][1]: p1 = (points[i][0], points[j][1]) p2 = (points[j][0], points[i][1]) if p1 in points_set and p2 in points_set: area = abs(points[i][0] - points[j][0]) * abs(points[i][1] - points[j][1]) max_area = max(max_area, area) return max_area"},{"question":"Create a function `rearrange_words` that accepts a string of words separated by whitespace. The function should rearrange the words in ascending order of their lengths. Words of the same length should appear in the order they appeared in the original string. The function should return a single string with the words joined by a single space. Example: if the input string is \\"the quick brown fox jumps over the lazy dog\\", the function should return \\"the fox the dog over lazy quick brown jumps\\". Example: if the input string is \\"hello world\\", the function should return \\"hello world\\". Assume: The input string will have at least one word and no leading or trailing whitespace. Each word will be separated by a single space.","solution":"def rearrange_words(s): Returns a string with words rearranged in ascending order of their lengths. Words of the same length should appear in the order they appeared in the original string. words = s.split() sorted_words = sorted(words, key=len) return \' \'.join(sorted_words)"},{"question":"You are given an integer `n`. Write a function that generates the `n`-th number in the sequence defined by the following rules: - The first number of the sequence is `1`. - For every subsequent number, if the previous number is even, divide it by `2`. - If the previous number is odd, multiply it by `3` and add `1`. This sequence is a variant of the well-known Collatz sequence, with the twist of starting from `1`. Your task is to return the `n`-th number in this sequence. For example, - `sequence(1) => 1` - `sequence(2) => 4` - `sequence(3) => 2` - `sequence(4) => 1` The maximum value of `n` will not exceed `10,000`. Feel free to test your function with additional values to ensure it works correctly.","solution":"def sequence(n): Generate the n-th number in the sequence starting from 1 where the next number is determined based on whether the previous number is even or odd. :param n: index of the number in the sequence to be returned (1-indexed) :type n: int :return: n-th number in the sequence :rtype: int if n < 1: raise ValueError(\\"n must be a positive integer\\") seq = [1] for _ in range(1, n): last = seq[-1] if last % 2 == 0: seq.append(last // 2) else: seq.append(last * 3 + 1) return seq[-1]"},{"question":"In a game of battling robots, each robot can be represented as a circle on a 2D plane, with a specified radius and a position defined by coordinates (x, y). Two robots are said to collide if their circles overlap, i.e., the distance between their centers is less than or equal to the sum of their radii. Given the positions and radii of two robots, determine whether the robots will collide. -----Constraints----- - The input values are all floating-point numbers. - The radius of each robot is a positive number. - The coordinates (x, y) can be any real numbers. -----Input----- The input is given from Standard Input in the following format: x1 y1 r1 x2 y2 r2 Where (x1, y1) and r1 are the coordinates and radius of the first robot, and (x2, y2) and r2 are the coordinates and radius of the second robot. -----Output----- Print \\"Collision\\" if the robots will collide, otherwise print \\"No Collision\\". -----Sample Input----- 0.0 0.0 2.0 3.0 0.0 2.0 -----Sample Output----- Collision In this case, the distance between the centers of the two robots is 3.0, which is equal to the sum of their radii (2.0 + 1.0). Therefore, the robots collide.","solution":"import math def will_collide(x1, y1, r1, x2, y2, r2): Determines if two robots will collide based on their coordinates and radii. Args: x1, y1: Coordinates of the center of the first robot. r1: Radius of the first robot. x2, y2: Coordinates of the center of the second robot. r2: Radius of the second robot. Returns: \\"Collision\\" if the robots collide, otherwise \\"No Collision\\". distance_between_centers = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2) if distance_between_centers <= r1 + r2: return \\"Collision\\" else: return \\"No Collision\\" # Example execution if __name__ == \\"__main__\\": import sys input_values = list(map(float, sys.stdin.read().strip().split())) x1, y1, r1, x2, y2, r2 = input_values result = will_collide(x1, y1, r1, x2, y2, r2) print(result)"},{"question":"You are given an array of n integers a. In one operation, you can choose any integer from the array and replace it with the sum of its left and right neighbors (consider the end elements have a virtual neighbor as 0). Your task is to determine the minimum number of operations needed to make all elements of the array equal. -----Input----- The first line contains a single integer t (1 le t le 10^3) — the number of test cases. The description of test cases follows. The first line of each test case contains a single integer n (2 le n le 10^3). The second line of each test case contains n integers a_1,a_2,ldots, a_n (-10^4 le a_i le 10^4). -----Output----- For each test case output a single integer — the minimum number of operations needed to make all elements of the array equal. -----Examples----- Input 3 3 1 2 3 2 3 4 5 1 1 1 1 1 Output 1 1 0 -----Note----- In the first test case, you can perform one operation on the middle element to get the array [1, 4, 3]. After one more operation, it becomes [1, 4, 1], and one more operation turns it into [3, 4, 1] which makes all elements equal. In the second test case, you can perform one operation on the first element to get [7, 4] or on the second element to get [3, 7] making all elements equal in one operation. In the third test case, the array already has all equal elements so no operation is needed.","solution":"def minimum_operations_to_equal_array(test_cases): results = [] for n, a in test_cases: if len(set(a)) == 1: results.append(0) else: results.append(1) return results"},{"question":"Design a function to solve the following problem: You\'re given a list of integers `nums` of size `n`, and an integer `target`. Your task is to determine the minimum number of operations required to make the sum of the list elements equal to `target`. You can perform the following operation any number of times: 1. Choose any two elements from the list. 2. Replace those two elements with their sum. As a constraint, the operation does not increase the number of elements in the list. Return the minimum number of such operations needed, or return `-1` if it is not possible to reach the `target` sum. Input - An integer n (1 ≤ n ≤ 10^5): the number of elements in the list. - A list of n space-separated integers `nums` (|nums[i]| ≤ 10^9). - An integer `target` (|target| ≤ 10^12). Output - An integer representing the minimum number of operations needed to make the sum of the list elements equal to `target`, or `-1` if it is not possible. Example Input 5 1 2 3 4 5 15 Output 0 Input 4 1 2 3 9 10 Output 1","solution":"def min_operations_to_target_sum(nums, target): Determine the minimum number of operations required to make the sum of the list nums equal to target. If it is not possible return -1. current_sum = sum(nums) # If the current sum of nums is already equal to the target, no operations are needed if current_sum == target: return 0 # If the sum is less than target, return -1 as we cannot increase the sum if current_sum < target: return -1 # To find the minimum operations to match the target, we need to reduce the sum by (current_sum - target) difference = current_sum - target return difference"},{"question":"You are given an array of n integers where each element represents the height of a building. The buildings form a skyline where each building has a width of 1 unit. You are tasked with finding the area of the largest rectangle that can be formed in the skyline between the buildings. Input The first line contains a single integer n (1 ≤ n ≤ 100,000) — the number of buildings in the array. The second line contains n integers a_i (1 ≤ a_i ≤ 10^6) — the heights of the buildings. Output Output the area of the largest rectangle that can be formed between the buildings. Examples Input 7 2 1 5 6 2 3 4 Output 10 Input 5 1 2 3 4 5 Output 9 Note In the first example, the largest rectangle that can be formed has an area of 10, which is formed by buildings of heights 5 and 6 between indices 3 and 4 (i.e., 2nd and 3rd buildings when zero-indexed). In the second example, the largest rectangle that can be formed has an area of 9, which is formed by buildings of heights [3, 4, and 5] between indices 2 and 4 (i.e., 1st, 2nd, and 3rd buildings when zero-indexed).","solution":"def largest_rectangle_area(heights): This function returns the area of the largest rectangle that can be formed between buildings in skyline. stack = [] max_area = 0 heights.append(0) # Append a zero to make sure we empty the stack at the end for i in range(len(heights)): while stack and heights[i] < heights[stack[-1]]: h = heights[stack.pop()] w = i if not stack else i - stack[-1] - 1 max_area = max(max_area, h * w) stack.append(i) return max_area"},{"question":"You are given an array of N positive integers. Your task is to find the maximum subarray sum for each possible length K from 1 to N. Specifically, you need to return an array of length N, where the i-th element is the maximum sum of any subarray of length i+1 in the original array. ------ Input ------ The first line of the input contains an integer N which denotes the size of the array. The second line contains N space-separated integers denoting the elements of the array. ------ Output ------ Output a single line containing N space-separated integers, where the i-th integer is the maximum sum of any subarray of length (i+1) in the array. ------ Constraints ------ 1 ≤ N ≤ 10^{5} 1 ≤ text{Array elements} ≤ 10^{9} ------ Sample Input 1 ------ 5 1 2 3 4 5 ------ Sample Output 1 ------ 5 9 12 14 15 ------ Explanation 1 ------ For length 1, the subarrays are [1], [2], [3], [4], [5], with the max sum being 5. For length 2, the subarrays are [1,2], [2,3], [3,4], [4,5], with the max sum being 9. For length 3, the subarrays are [1,2,3], [2,3,4], [3,4,5], with the max sum being 12. For length 4, the subarrays are [1,2,3,4], [2,3,4,5], with the max sum being 14. For length 5, the subarray is [1,2,3,4,5], with the sum being 15. ------ Sample Input 2 ------ 3 2 1 5 ------ Sample Output 2 ------ 5 6 8 ------ Explanation 2 ------ For length 1, the subarrays are [2], [1], [5], with the max sum being 5. For length 2, the subarrays are [2,1], [1,5], with the max sum being 6. For length 3, the subarray is [2,1,5], with the sum being 8.","solution":"def find_maximum_subarray_sums(n, array): max_sums = [0] * n for k in range(1, n + 1): current_sum = sum(array[:k]) max_sum = current_sum for i in range(k, n): current_sum = current_sum - array[i - k] + array[i] if current_sum > max_sum: max_sum = current_sum max_sums[k - 1] = max_sum return max_sums"},{"question":"Implement a Class Create a `Circle` class that models a circle with a given radius. The class should have the following methods: 1. **Constructor**: Initializes the circle with a radius parameter. 2. **get_area**: Returns the area of the circle. Use the formula `area = π * radius^2`. 3. **get_circumference**: Returns the circumference of the circle. Use the formula `circumference = 2 * π * radius`. 4. **set_radius**: Updates the radius of the circle. Make use of Python\'s in-built `math` module to get the value of `π`. Implement appropriate error handling to ensure the radius is a positive number. Example: ```python circle = Circle(5) print(circle.get_area()) # Expected: 78.53981633974483 print(circle.get_circumference()) # Expected: 31.41592653589793 circle.set_radius(3) print(circle.get_area()) # Expected: 28.274333882308138 ```","solution":"import math class Circle: def __init__(self, radius): if radius <= 0: raise ValueError(\\"Radius must be a positive number\\") self.radius = radius def get_area(self): return math.pi * (self.radius ** 2) def get_circumference(self): return 2 * math.pi * self.radius def set_radius(self, radius): if radius <= 0: raise ValueError(\\"Radius must be a positive number\\") self.radius = radius"},{"question":"You are given two sorted linked lists. The task is to merge the two lists such that the resulting list is in sorted order. Hint: The task should be done in-place without using extra memory. Example 1: Input: List1: 1->3->5->7 List2: 2->4->6->8 Output: 1->2->3->4->5->6->7->8 Example 2: Input: List1: 5->10->15 List2: 2->3->20 Output: 2->3->5->10->15->20 Your Task: You don\'t need to read input or print anything. Complete the function mergeTwoSortedLists() that takes two heads of the sorted linked lists as input parameters and returns the head of the merged sorted linked list. Expected Time Complexity: O(n + m), where n and m are the lengths of the two lists. Expected Auxiliary Space: O(1), since no extra memory should be used. Constraints: 1 <= n, m <= 1000 -1000 <= Node\'s value <= 1000","solution":"class ListNode: def __init__(self, x): self.val = x self.next = None def mergeTwoSortedLists(l1, l2): # Creating a dummy node to help with merging dummy = ListNode(-1) current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next # If there are remaining elements in either list, append them if l1: current.next = l1 if l2: current.next = l2 return dummy.next"},{"question":"Problem Statement: In a parallel universe, there are N alien species and each species communicates through a unique sequence of sounds. You need to design a program to help an intergalactic diplomat learn how each alien species speaks. Each alien species can speak by creating a special \\"sound wave\\" which consists of a series of distinct frequencies represented as integers. Given N, you need to generate all possible sound waves that each species can produce. However, there is a special condition: Each sound wave must have exactly K successive frequencies in ascending order. Two subsequences are considered different if the order of frequencies changes, even if the elements are the same. Your task is to print all such valid sound waves for the given values of N and K. Input Format: The first line of input contains a single integer T, denoting the number of test cases. Each of the T subsequent lines contains 2 space-separated integers describing the respective values of N (total number of frequencies) and K (number of successive frequencies in each wave). Output Format: For each test case, print all valid sound waves in lexicographical order, each on a new line. If no valid sound wave exists, print \\"NO SOUND WAVES\\". Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 10 0 ≤ K ≤ N Sample Input: 2 4 2 3 3 Sample Output: 4 2 3 1 3 2 1 3 4 1 1 4 2 3 NO SOUND WAVES Explanation: Case 1: For N=4, and K=2, the following are valid sound waves: 1 2 1 3 1 4 2 3 2 4 3 4 Case 2: For N=3, and K=3, no valid sound waves exist since the maximum number of distinct frequencies is less than K. Hence, the output is \\"NO SOUND WAVES\\".","solution":"from itertools import combinations def generate_sound_waves(N, K): if K > N: return [\\"NO SOUND WAVES\\"] sound_waves = list(combinations(range(1, N + 1), K)) return [\\" \\".join(map(str, wave)) for wave in sound_waves] def alien_sounds(T, test_cases): results = [] for N, K in test_cases: results.extend(generate_sound_waves(N, K)) results.append(\\"\\") # To separate test cases return results[:-1] # To remove the trailing empty string # Example input processing def main(): import sys input = sys.stdin.read data = input().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N, K = int(data[index]), int(data[index + 1]) test_cases.append((N, K)) index += 2 results = alien_sounds(T, test_cases) for result in results: if result: print(result)"},{"question":"Sarah is reading a novel in her bedroom when her younger brother, Max, runs in with excitement. Max loves puzzles and enjoys quizzing Sarah with challenging brain teasers. Today, Max has a particularly unique puzzle that relates to strings and their properties. Sarah, being a computer science student, decides to indulge him. Max\'s puzzle is as follows: Given a string `s`, find the length of the longest substring that contains at most 2 distinct characters. Sarah needs to solve \'q\' such queries on different strings. Input constraints: 1 ≤ length of s ≤ 10^5 1 ≤ q ≤ 10^3 Input Format: The first line contains the integer q - denoting the number of queries. Each of the next q lines contains a string `s`. Output Format: Output q lines each containing the answer - the length of the longest substring that contains at most 2 distinct characters. SAMPLE INPUT 2 abcbbbbcccbdddadacb eceba SAMPLE OUTPUT 10 3 Explanation: 1. In the first string, the longest substring that contains at most 2 distinct characters is \\"bcbbbbcccb\\", which has a length of 10. 2. In the second string, the longest substring that contains at most 2 distinct characters is \\"ece\\", which has a length of 3.","solution":"def length_of_longest_substring_two_distinct(s): Returns the length of the longest substring that contains at most 2 distinct characters. n = len(s) if n < 3: return n left, right = 0, 0 hashmap = {} max_len = 2 while right < n: if len(hashmap) < 3: hashmap[s[right]] = right right += 1 if len(hashmap) == 3: del_idx = min(hashmap.values()) del hashmap[s[del_idx]] left = del_idx + 1 max_len = max(max_len, right - left) return max_len def solve(queries): Processes multiple queries of finding the length of the longest substring with at most 2 distinct characters. results = [] for s in queries: longest_length = length_of_longest_substring_two_distinct(s) results.append(longest_length) return results"},{"question":"You are given a list of n integers representing the heights of a series of boxes. Each box is of unit width and is placed adjacent to the previous one (forming a histogram of boxes). Your task is to find the largest rectangular area that can be formed by choosing consecutive boxes from the histogram. Input The first line contains an integer t (1 ≤ t ≤ 10), the number of test cases. For each test case: - The first line contains an integer n (1 ≤ n ≤ 10^5), the number of boxes. - The second line contains n integers h_1, h_2, ..., h_n (1 ≤ h_i ≤ 10^9) representing the heights of the boxes. It is guaranteed that the sum of n over all test cases does not exceed 10^5. Output For each test case, output a single integer denoting the area of the largest rectangle that can be formed by consecutive boxes from the histogram. Example Input 3 7 2 1 5 6 2 3 5 6 3 6 5 7 4 8 5 6 2 5 4 5 1 6 Output 10 20 12 Note In the first test case, the largest rectangle has an area of 10 and it is formed by boxes with heights [5, 6]. In the second test case, the largest rectangle has an area of 20 which is formed by the two consecutive heights [5, 7] or [4, 8]. In the third test case, the largest rectangle with an area of 12 is formed by the histogram segment [5, 4, 5].","solution":"def largest_rectangle_area(histogram): This function takes a list of integers representing the heights of a histogram and returns the area of the largest rectangle that can be formed by consecutive boxes. stack = [] max_area = 0 index = 0 while index < len(histogram): if not stack or histogram[stack[-1]] <= histogram[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (histogram[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area def solve_histogram_problem(t, test_cases): results = [] for n, heights in test_cases: results.append(largest_rectangle_area(heights)) return results"},{"question":"A group of friends have organized an obstacle race through a dense forest. The race route is marked by checkpoints, and each checkpoint is defined by its coordinates (x, y). The friends want to ensure safety throughout the race, and safety can be achieved by having at least one medic available at every checkpoint. To optimize the deployment, they need to find the position where they can place exactly one medic such that the maximum distance from the medic to any checkpoint is minimized. This position does not need to be a checkpoint; it can be any point on the coordinate plane. Given the coordinates of the checkpoints, determine the optimal position for the medic so that the maximum distance to any checkpoint is minimized. Input The first line of input contains an integer n (2 ≤ n ≤ 100 000) — the number of checkpoints. Each of the next n lines contains two integers xi and yi (|xi|, |yi| ≤ 10 000) — the coordinates of the i-th checkpoint. These points are distinct. Output Print two real numbers — the x and y coordinates of the optimal medic position. Your answer will be considered correct if its absolute or relative error does not exceed 10^(-6). Namely, let’s assume your answer is (ax, ay), and the answer of the jury is (bx, by). The checker program will consider your answer correct if: - |ax - bx| ≤ 10^(-6) - |ay - by| ≤ 10^(-6). Examples Input 4 0 0 10 0 10 10 0 10 Output 5.0000000000 5.0000000000 Input 3 1 1 1 2 2 2 Output 1.5000000000 1.5000000000 Note In the first example, placing the medic at the center of the square formed by the four checkpoints minimizes the maximum distance to any checkpoint. This point is (5, 5) and the maximum distance is 5√2. In the second example, placing the medic at (1.5, 1.5) will minimize the maximum distance to any checkpoint which will be √2/2.","solution":"from scipy.spatial import ConvexHull from scipy.optimize import minimize def find_optimal_medic_position(checkpoints): Given a list of coordinates of checkpoints, find the optimal position for the medic so that the maximum distance to any checkpoint is minimized. Parameters: checkpoints: List of tuples representing the coordinates (x, y) of checkpoints. Returns: Tuple of x and y coordinates of the optimal position for the medic. def max_distance(point): x, y = point return max(((x - px)**2 + (y - py)**2)**0.5 for px, py in checkpoints) hull_points = ConvexHull(checkpoints).points centroid = hull_points.mean(axis=0) result = minimize(max_distance, centroid, method=\'Nelder-Mead\', tol=1e-9) return result.x[0], result.x[1]"},{"question":"Given a string `s` containing only lowercase letters, determine whether it can be rearranged to form a palindrome. Return `True` if it can be rearranged to form a palindrome, otherwise return `False`. A string can be rearranged to form a palindrome if, for each character in the string, the frequency of that character is even, or there is only one character with an odd frequency. Example 1: Input: s = \\"aabb\\" Output: True Explanation: \\"aabb\\" can be rearranged to \\"abba\\" which is a palindrome. Example 2: Input: s = \\"racecar\\" Output: True Explanation: \\"racecar\\" is already a palindrome, hence it can be rearranged to form a palindrome. Example 3: Input: s = \\"code\\" Output: False Explanation: \\"code\\" cannot be rearranged to form a palindrome. Constraints: - 1 <= s.length <= 500 - s consists of lowercase English letters only.","solution":"from collections import Counter def can_form_palindrome(s): Determine if the string s can be rearranged to form a palindrome. Args: s (str): The input string containing only lowercase letters. Returns: bool: True if the string can be rearranged to form a palindrome, otherwise False. char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Three racers are participating in a unique race. They start at different positions on a 1-dimensional track and have different constant speeds. The race track length is infinite in both directions (left and right). You need to determine if there will be a time when all three racers will be at the same position at the same time. -----Input----- The first line contains three integers a1, a2, a3 (0 ≤ a1, a2, a3 ≤ 10^9) — the initial positions of the three racers. The second line contains three integers v1, v2, v3 (1 ≤ v1, v2, v3 ≤ 10^9) — the constant speeds of the three racers. -----Output----- Output \\"YES\\" if there exists a time t such that the positions of the three racers are the same at time t. Otherwise, output \\"NO\\". You can output any letter in lower case or in upper case. -----Examples----- Input 1 2 3 1 2 3 Output NO Input 0 10 20 2 2 2 Output YES -----Note----- In the first example, the racers start at different positions and have different speeds. They will never meet at the same point in time. In the second example, despite starting at different positions, all three racers have the same speed. Therefore, they can meet at a common point somewhere along the track.","solution":"def will_meet(a1, a2, a3, v1, v2, v3): Determines if three racers starting at positions a1, a2, a3 with speeds v1, v2, v3 will ever be at the same position at the same time. Returns \\"YES\\" if they meet at a common point, otherwise \\"NO\\". # If all speeds are the same, it\'s possible for them to meet if # they are equally spaced initially if v1 == v2 == v3: return \\"YES\\" # Calculate time differences between the first and the other racers if v1 != v2 and (a2 - a1) % (v2 - v1) != 0: return \\"NO\\" if v1 != v3 and (a3 - a1) % (v3 - v1) != 0: return \\"NO\\" if v2 != v3 and (a3 - a2) % (v3 - v2) != 0: return \\"NO\\" # There should be a common t where any two conditions meet t12 = (a2 - a1) / (v1 - v2) if v1 != v2 else None t13 = (a3 - a1) / (v1 - v3) if v1 != v3 else None t23 = (a3 - a2) / (v2 - v3) if v2 != v3 else None if t12 is not None and t12 >= 0 and (t13 is None or t12 == t13) and (t23 is None or t12 == t23): return \\"YES\\" if t13 is not None and t13 >= 0 and (t12 is None or t12 == t13) and (t23 is None or t13 == t23): return \\"YES\\" if t23 is not None and t23 >= 0 and (t12 is None or t12 == t23) and (t13 is None or t13 == t23): return \\"YES\\" return \\"NO\\""},{"question":"In the mystical land of Codopolis, there are two factions of wizards: the Alphas and the Betas. Each wizard can cast a spell exactly once, and the power of the spell is determined by its mana level, which is a positive integer. Alphas and Betas often engage in duels, and the outcome of each duel is determined by the rules below: 1. If an Alpha with mana level M_A duels a Beta with mana level M_B: - If M_A > M_B, the Beta loses and M_A reduces by M_B. - If M_A < M_B, the Alpha loses and M_B reduces by M_A. - If M_A == M_B, both wizards are neutralized and neither can cast another spell. 2. A duel can only happen if both wizards are of the same expertise level, represented by a positive integer. For instance, an Alpha of level L_A can only duel a Beta of level L_B if L_A == L_B. Codotics, the wise leader of the Alphas, wants to ensure that in every possible duel scenario, all Betas are neutralized, meaning they can no longer cast spells. To achieve this, Codotics can increase the mana level of any Alpha, but wants to do so using the least possible amount of additional mana to minimize his magical expenditure. Your task is to help Codotics find the minimal amount of additional mana required to ensure the Alphas can win the overall battle. # Input Structure - **First line**: An integer T (1 ≤ T ≤ 100) representing the number of test cases. - For each test case: - **First line**: Two integers N and M (1 ≤ N, M ≤ 100) denoting the number Alphas and Betas, respectively. - Next N lines: Two integers, M_A_i and L_A_i (1 ≤ M_A_i, L_A_i ≤ 100) representing the mana level and expertise level of each Alpha. - Next M lines: Two integers, M_B_i and L_B_i (1 ≤ M_B_i, L_B_i ≤ 100) representing the mana level and expertise level of each Beta. # Output Structure For each test case, output a single integer on a new line denoting the minimum additional mana Codotics should provide to the wizards of Codopolis to ensure all Betas are neutralized. # Sample Input ``` 2 2 3 30 1 45 2 25 1 30 2 15 2 1 1 20 3 25 3 ``` # Sample Output ``` 0 5 ``` # Explanation Test Case 1: - Initial wizards: Alphas = [(30, 1), (45, 2)], Betas = [(25, 1), (30, 2), (15, 2)] - Without additional mana: - Alpha (30, 1) vs. Beta (25, 1): Beta loses, Alpha (5, 1) remains. - Alpha (45, 2) vs. Beta (15, 2): Beta loses, Alpha (30, 2) remains. - Alpha (30, 2) vs. Beta (30, 2): Both neutralized. No additional mana required as all Betas are neutralized. Test Case 2: - Initial wizards: Alphas = [(20, 3)], Betas = [(25, 3)] - Without additional mana: - Alpha (20, 3) vs. Beta (25, 3): Alpha loses, Beta (5, 3) remains. To win, Alpha needs at least 6 mana, so Codotics provides 6 additional mana to Alpha. This ensures that, for each test case, Codotics spends the minimum additional mana to secure victory.","solution":"def min_additional_mana(test_cases): results = [] for case in test_cases: N, M = case[\\"N\\"], case[\\"M\\"] alphas = case[\\"alphas\\"] betas = case[\\"betas\\"] additional_mana_required = 0 # Group alphas and betas by their expertise levels from collections import defaultdict alphas_by_level = defaultdict(list) betas_by_level = defaultdict(list) for mana, level in alphas: alphas_by_level[level].append(mana) for mana, level in betas: betas_by_level[level].append(mana) # Sort mana levels in ascending order to minimize additional mana in duels for level in alphas_by_level: if level in betas_by_level: alphas_by_level[level].sort() betas_by_level[level].sort() for level in betas_by_level: if level in alphas_by_level: alpha_manas = alphas_by_level[level] beta_manas = betas_by_level[level] while alpha_manas and beta_manas: if alpha_manas[-1] >= beta_manas[-1]: alpha_manas[-1] -= beta_manas.pop() else: additional_mana_required += beta_manas[-1] - alpha_manas[-1] beta_manas.pop() alpha_manas.pop() else: for mana in betas_by_level[level]: additional_mana_required += mana results.append(additional_mana_required) return results"},{"question":"Harvey is an administrator for a large company and he needs to allocate tasks to different teams. Each team can handle exactly one task per day, and every task has a certain priority. Harvey wants to ensure that all tasks are assigned and completed in the minimum possible number of days. However, there are some dependencies between the tasks; some tasks cannot be started until certain other tasks have been completed. Given the number of tasks, their priorities, and the dependencies between the tasks, your job is to help Harvey determine the order in which the tasks should be completed. If it is not possible to complete all tasks due to cyclic dependencies, return \\"Not possible\\". Input Format: - The first line contains 2 space-separated integers, N and M, where N is the number of tasks and M is the number of dependencies. - The second line contains N space-separated integers, where the i-th integer denotes the priority of task i (1 ≤ priority ≤ 10^6). - The following M lines contain two space-separated integers, u and v, meaning task u must be completed before task v. Output Format: - If it is possible to complete all tasks, print an arrangement of the task indices such that no task is completed before all its dependencies, sorted in decreasing order of their priorities. - If it is not possible to complete all tasks, print \\"Not possible\\". Constraints: 1 ≤ N ≤ 10^5 0 ≤ M ≤ 10^5 1 ≤ u, v ≤ N Sample Input 1: 4 2 3 2 5 4 1 2 3 4 Sample Output 1: 3 4 1 2 Sample Input 2: 4 3 4 2 3 1 1 2 2 3 3 1 Sample Output 2: Not possible Explanation: In the first example, task 1 must be completed before task 2, and task 3 must be completed before task 4. Given the priorities, a valid order would be task 3, task 4, task 1, task 2. In the second example, there is a cyclic dependency between tasks 1, 2, and 3, making it impossible to complete all tasks. Note: If there are multiple possible valid orders, any of them are considered correct as long as they meet the requirements.","solution":"from collections import deque, defaultdict def find_task_order(n, m, priorities, dependencies): # Build the graph and calculate in-degrees graph = defaultdict(list) in_degree = [0] * n for u, v in dependencies: graph[u-1].append(v-1) in_degree[v-1] += 1 # Topological sorting using Kahn\'s algorithm zero_in_degree_queue = deque([i for i in range(n) if in_degree[i] == 0]) topological_order = [] while zero_in_degree_queue: node = zero_in_degree_queue.popleft() topological_order.append(node) for neighbor in graph[node]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: zero_in_degree_queue.append(neighbor) # Check if there was a cycle if len(topological_order) != n: return \\"Not possible\\" # Sort the topological order based on priorities in descending order topological_order.sort(key=lambda x: -priorities[x]) # Convert 0-indexed to 1-indexed return \' \'.join(str(task + 1) for task in topological_order) # Example of usage: # n, m = 4, 2 # priorities = [3, 2, 5, 4] # dependencies = [(1, 2), (3, 4)] # print(find_task_order(n, m, priorities, dependencies))"},{"question":"Develop a function that takes a single list of integers and finds its \\"peak\\" elements. A peak element is defined as an integer that is greater than its immediate neighbors. The bounds of the list, if applicable, are to be considered as negative infinity, thus allowing end elements to also be potential peaks. Your task is to return all the peak elements in a list. For example: ```python find_peaks([1, 2, 1, 3, 5, 6, 4]) >>> peaks at index 1 (2), 5 (6) return [2, 6] find_peaks([1, 2, 3, 4, 5]) >>> peaks at index 4 (5) return [5] find_peaks([5, 4, 3, 2, 1]) >>> peaks at index 0 (5) return [5] find_peaks([3, 3, 3, 3]) >>> no peaks return [] ``` Your function should handle edge cases such as when the list is empty or contains only one element. In these cases, the function should return an empty list or the single element, respectively. Additional Requirements: - You may not use any imported functions or libraries. - Your solution should aim for a time complexity of O(n), where n is the length of the input list.","solution":"def find_peaks(lst): Finds all the peak elements in the list. A peak element is an element that is greater than its neighbors. Bounds of the list are considered as negative infinity. :param lst: List of integers :return: List containing all peak elements if not lst: # If the list is empty return [] n = len(lst) if n == 1: # If the list has only one element return [lst[0]] peaks = [] for i in range(n): if (i == 0 and lst[i] > lst[i + 1]) or (i == n - 1 and lst[i] > lst[i - 1]) or (0 < i < n - 1 and lst[i] > lst[i - 1] and lst[i] > lst[i + 1]): peaks.append(lst[i]) return peaks"},{"question":"You are given an array of n integers. Your task is to find the maximum sum you can obtain by adding the values of elements from non-adjacent indices in the array. In other words, if you choose to include an element in your sum, you cannot include the elements immediately before and after it. For example, given the array [3, 2, 5, 10, 7], the maximum sum would be 15 (3 + 10 + 2). Create a function that solves this problem for multiple test cases. -----Input----- The first line of the input contains an integer t (1 le t le 10^3) — the number of test cases. The descriptions of the test cases follow. The first line of each test case contains a single integer n (1 le n le 10^4) — the number of elements in the array. The second line of each test case contains exactly n integers a_1, a_2, dots, a_n (-10^4 le a_i le 10^4). The values of a_i are the elements of the array. It is guaranteed that the sum of n values over all test cases does not exceed 10^4. -----Output----- For each test case, print the maximum sum of non-adjacent elements. If the array has no elements (i.e., n=0), the output should be 0. -----Examples----- Input 4 5 3 2 5 10 7 4 3 2 7 10 3 3 2 5 0 Output 15 13 8 0 -----Note----- In the first test case, the maximum sum is obtained by picking the elements 3, 10, and 2. In the second test case, the maximum sum is obtained by picking the elements 3 and 10. In the third test case, the maximum sum is obtained by picking the elements 3 and 5. In the fourth test case, since there are zero elements, the output is 0.","solution":"def max_non_adjacent_sum(nums): This function calculates the maximum sum of non-adjacent numbers in the given list. :param nums: List[int] - list of integers :return: int - maximum sum of non-adjacent numbers if not nums: return 0 incl = 0 excl = 0 for num in nums: new_excl = max(excl, incl) incl = excl + num excl = new_excl return max(incl, excl) def solve_multiple_cases(test_cases): results = [] for nums in test_cases: results.append(max_non_adjacent_sum(nums)) return results"},{"question":"A square grid is provided where each cell contains an integer value. You need to find the sum of integers along the path from the top-left corner to the bottom-right corner. You can only move either right or down. Write a program to determine the maximum possible sum of values along such a path. ------ Input ------ The first line contains an integer `T`, the number of test cases. The description of `T` test cases follows. Each test case starts with an integer `n` and `m`, representing the number of rows and columns in the grid. The next `n` lines contain `m` space-separated integers each, representing the grid values. ------ Output ------ For each test case, print a single line containing one integer ― the maximum sum of values along a path from the top-left corner to the bottom-right corner of the grid. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ n, m ≤ 100 -100 ≤ text{grid}[i][j] ≤ 100 ------ Subtasks ------ Subtask #1 (100 points): original constraints ----- Sample Input 1 ------ 2 3 3 1 2 3 4 5 6 7 8 9 2 2 -1 -2 -3 -4 ----- Sample Output 1 ------ 29 -7 ----- Explanation 1 ------ Example case 1: - The maximum path for the first grid is: 1 -> 4 -> 7 -> 8 -> 9. - The sum is 1 + 4 + 7 + 8 + 9 = 29. Example case 2: - The maximum path for the second grid is: -1 -> -2 -> -4. - The sum is -1 + (-2) + (-4) = -7.","solution":"def max_path_sum(test_cases): results = [] for grid in test_cases: n, m = grid[0] dp = [[0] * m for _ in range(n)] # Initialization of top-left corner dp[0][0] = grid[1][0][0] # Fill the first row (can only come from the left) for j in range(1, m): dp[0][j] = dp[0][j - 1] + grid[1][0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[1][i][0] # Fill the remaining cells for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[1][i][j] # The bottom-right cell contains the result results.append(dp[n - 1][m - 1]) return results def parse_input(input_data): test_cases = [] idx = 0 T = int(input_data[idx]) idx += 1 for _ in range(T): n, m = map(int, input_data[idx].split()) idx += 1 grid = [] for _ in range(n): grid.append(list(map(int, input_data[idx].split()))) idx += 1 test_cases.append(((n, m), grid)) return test_cases if __name__ == \\"__main__\\": import sys input_data = sys.stdin.read().strip().split(\'n\') test_cases = parse_input(input_data) results = max_path_sum(test_cases) for result in results: print(result)"},{"question":"Vector Magnitude Calculation In this task, you need to calculate the magnitude of a vector represented by a list of its components. The function should consider a vector in n-dimensional space where n is the length of the list. The magnitude (or length) of a vector (mathbf{v} = [v_1, v_2, ldots, v_n]) is given by: [ | mathbf{v} | = sqrt{v_1^2 + v_2^2 + cdots + v_n^2} ] Write a function `vector_magnitude(vec)` that takes a list of integers/floats representing the components of the vector and returns the magnitude of the vector as a float. For example: ```python vector_magnitude([3, 4]) = 5.0 ``` In this example, the magnitude is calculated as (sqrt{3^2 + 4^2} = 5.0). **Constraints:** - The input list will contain at least one element. - Each element in the input list will be a numerical value (integer or float). **Examples:** ```python vector_magnitude([1, 2, 2]) = 3.0 vector_magnitude([0, 0, 0]) = 0.0 vector_magnitude([5]) = 5.0 ```","solution":"import math def vector_magnitude(vec): Returns the magnitude of a vector represented by the list \'vec\'. return math.sqrt(sum(x ** 2 for x in vec))"},{"question":"A popular online book store offers a subscription service where users can borrow books for a specific period. The system needs to manage book availability dynamically, based on users\' borrowing and returning activities. The book store has a collection of m different books, each book being uniquely identified by an integer from 1 to m. Each book has a limited number of copies available for borrowing. Every time a user borrows or returns a book, an entry is recorded in a log with details of the transaction. You are tasked with implementing a system to handle these transaction logs and maintain an accurate count of available copies for each book. Your goal is to determine whether it is possible to fulfill all borrowing requests based on the initial availability of each book and the sequence of transactions. -----Input----- The first line of the input contains an integer m (1 ≤ m ≤ 100,000) — the number of different books in the store. The second line contains m integers c_1, c_2, ..., c_m (0 ≤ c_i ≤ 1,000) — the initial number of copies available for each book. The third line contains an integer t (1 ≤ t ≤ 200,000) — the number of transactions. Each of the next t lines contains two integers, x and y (1 ≤ x ≤ m, y = 1 or -1). x denotes the book number, and y denotes the type of transaction: \'1\' for borrowing a copy or \'-1\' for returning a copy. -----Output----- Print \\"YES\\" if all borrowing requests can be fulfilled; otherwise, print \\"NO\\". -----Examples----- Input 5 4 2 1 0 3 6 1 1 2 1 3 1 5 -1 2 1 4 1 Output NO Input 3 0 1 2 5 2 1 3 1 2 -1 1 -1 3 -1 Output YES ----- Note ----- In the first sample test, the fourth transaction attempts to borrow a book which results in no copies being available, so the output is \\"NO\\". In the second sample test, all borrowing requests can be fulfilled successfully with books being borrowed and returned in sequence, hence the output is \\"YES\\".","solution":"def can_fulfill_requests(m, initial_copies, transactions): available_copies = initial_copies[:] for transaction in transactions: book_id, action = transaction if action == 1: # Borrowing a copy if available_copies[book_id - 1] > 0: available_copies[book_id - 1] -= 1 else: return \\"NO\\" elif action == -1: # Returning a copy available_copies[book_id - 1] += 1 return \\"YES\\""},{"question":"Given a positive integer n, generate the nth term of the count-and-say sequence. The count-and-say sequence is a sequence of digit strings defined by the recursive formula: - `countAndSay(1)` = \\"1\\" - `countAndSay(n)` is the description of `countAndSay(n-1)`. To generate the next sequence from the previous sequence, read off the digits of the previous sequence, counting the number of digits in groups of the same digit. For instance, the term after \\"1211\\" is \\"111221\\" because \\"1211\\" consists of \\"one 1\\", \\"one 2\\", and \\"two 1s\\". Example 1: Input: n = 1 Output: \\"1\\" Example 2: Input: n = 4 Output: \\"1211\\" Example 3: Input: n = 6 Output: \\"312211\\" Note: - 1 <= n <= 30 Constraints: - The string length of the nth term is limited to 10^4.","solution":"def countAndSay(n): Generate the nth term of the count-and-say sequence. if n == 1: return \\"1\\" def next_sequence(sequence): result = [] i = 0 while i < len(sequence): count = 1 while i + 1 < len(sequence) and sequence[i] == sequence[i + 1]: i += 1 count += 1 result.append(str(count) + sequence[i]) i += 1 return \'\'.join(result) sequence = \\"1\\" for _ in range(1, n): sequence = next_sequence(sequence) return sequence"},{"question":"You are helping a computer science professor develop a question for a coding assessment. The professor suggests a problem involving binary arrays. Given a binary array of length n (containing only 0s and 1s), you need to perform the following operation: find the longest contiguous subarray composed entirely of 1s. If the binary array does not contain any 1s, the answer should be 0. -----Input----- The first line contains a single integer t (1 leq t leq 10^4) — the number of test cases. The first line of each test case contains a single integer n (1 leq n leq 10^5) — the length of the binary array. The second line of each test case contains a binary array of length n, consisting of characters \'0\' and \'1\'. -----Output----- For each test case, output a single integer — the length of the longest contiguous subarray composed entirely of 1s. -----Examples----- Input 3 6 110111 5 00001 4 0000 Output 3 1 0 -----Note----- For the first test case, the longest contiguous subarray of 1s is \\"111\\", which has length 3. For the second test case, the longest contiguous subarray of 1s is \\"1\\", which has length 1. For the third test case, there are no 1s, so the answer is 0.","solution":"def longest_contiguous_ones(t, test_cases): results = [] for n, binary_array in test_cases: max_count = 0 current_count = 0 for bit in binary_array: if bit == \'1\': current_count += 1 if current_count > max_count: max_count = current_count else: current_count = 0 results.append(max_count) return results"},{"question":"You are given a string S consisting of lowercase English letters. You want to create the lexicographically smallest string by over-deleting exactly one character from the string. If there are multiple possible answers, return the one that appears first. -----Input----- - The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains a single integer N denoting the length of the string. - The second line contains the string S of length N. -----Output----- - For each test case, output a single line containing the lexicographically smallest string after deleting one character. -----Constraints----- - 1 ≤ T ≤ 5 - 2 ≤ N ≤ 1000 - \'a\' ≤ Si ≤ \'z\' -----Subtasks-----Subtask 1 (10 points) - N = 2Subtask 2 (90 points) - Original constraints -----Example----- Input: 2 3 abc 5 abxyz Output: ab abxy -----Explanation----- Example case 1. Removing the \'c\' will make the string \'ab\', which is the lexicographically smallest. Example case 2. Removing the \'z\' will make the string \'abxy\', which is the lexicographically smallest.","solution":"def lexicographically_smallest_string(s): Given a string s, return the lexicographically smallest string after deleting exactly one character. n = len(s) # Initialize the result to be the string with the first character removed min_string = s[1:] for i in range(1, n): # Generate a string with the i-th character removed temp_string = s[:i] + s[i+1:] # Update the min_string if temp_string is lexicographically smaller if temp_string < min_string: min_string = temp_string return min_string def process_test_cases(T, test_cases): Process multiple test cases for the problem. results = [] for i in range(T): N, S = test_cases[i] results.append(lexicographically_smallest_string(S)) return results"},{"question":"You are a software engineer tasked with managing user authorization for various resources in a web application. To accomplish this, users can be assigned various roles, and each role grants specific permissions for different actions on the resources. Your goal is to implement a function that takes a user\'s roles and a requested action on a resource and determines if the user is authorized to perform the action. Here are the details: - The roles are represented as a dictionary where the key is the role name and the value is a list of actions that the role is allowed to perform. - Each user is assigned a list of roles. - The function should take three arguments: - A dictionary of roles and their allowed actions. - A list of roles assigned to a user. - A string representing the requested action. The function should return `True` if any of the user\'s roles have the requested action in their allowed actions. Otherwise, it should return `False`. # Example Suppose the roles and their actions are defined as follows: ```python roles = { \\"admin\\": [\\"create\\", \\"read\\", \\"update\\", \\"delete\\"], \\"editor\\": [\\"create\\", \\"read\\", \\"update\\"], \\"viewer\\": [\\"read\\"] } ``` You can then assign roles to users like this: ```python user_roles = [\\"editor\\", \\"viewer\\"] ``` When a user with these roles requests the \\"update\\" action, the function should return `True` because the \\"editor\\" role has the \\"update\\" action. # Function Signature ```python def is_authorized(roles: dict, user_roles: list, requested_action: str) -> bool: # Your code here ``` # Example Usage ```python roles = { \\"admin\\": [\\"create\\", \\"read\\", \\"update\\", \\"delete\\"], \\"editor\\": [\\"create\\", \\"read\\", \\"update\\"], \\"viewer\\": [\\"read\\"] } user_roles = [\\"editor\\", \\"viewer\\"] print(is_authorized(roles, user_roles, \\"update\\")) # Should return True print(is_authorized(roles, user_roles, \\"delete\\")) # Should return False ```","solution":"def is_authorized(roles: dict, user_roles: list, requested_action: str) -> bool: Check if the user is authorized to perform the requested action based on their roles. Args: roles: A dictionary where the key is the role name and the value is a list of allowed actions. user_roles: A list of roles assigned to the user. requested_action: The requested action the user wants to perform. Returns: bool: True if the user is authorized to perform the action, False otherwise. for role in user_roles: if role in roles and requested_action in roles[role]: return True return False"},{"question":"Maria likes to collect beautiful necklaces. Each necklace consists of colorful beads arranged in a circle. Maria classifies a necklace as beautiful if it has a specific pattern that repeats at least twice consecutively within the string of beads. Your task is to help Maria determine if a given circular necklace is beautiful or not. A circular necklace can be represented as a string of length n where every character represents a bead of a particular color. A pattern text{p} within a circular necklace text{s} of length n is defined as beautiful if there exists an integer k (2 le k le n) such that p^k is a substring of text{s}. Your goal is to analyze the given string representation of Maria\'s necklace and determine whether it is beautiful. -----Input----- - The first line contains a single integer t (1 le t le 100) — the number of test cases. - Each of the next t lines contains a single string text{s} representing the circular necklace. It is guaranteed that each string only contains lowercase English letters and has a length between 2 and 100 inclusive. -----Output----- For each test case, output \\"YES\\" if the necklace is beautiful, otherwise, output \\"NO\\". -----Example----- Input 3 abcabcabc aaaaa abcdefgh Output YES YES NO -----Note----- In the first example, \\"abc\\" is a pattern that repeats three times consecutively. In the second example, \\"a\\" is a pattern that repeats five times consecutively. In the third example, there is no pattern that repeats at least twice consecutively.","solution":"def is_beautiful_necklace(s): n = len(s) for length in range(1, n // 2 + 1): pattern = s[:length] repetitions = s + s # Consider the circular nature by duplicating the string if repetitions.count(pattern) >= 2 * (n // length): return \\"YES\\" return \\"NO\\" def check_necklaces(test_cases): results = [] for s in test_cases: results.append(is_beautiful_necklace(s)) return results"},{"question":"The city of Codeville is famous for its complex and dense network of roads. The city planner wants to ensure that there are direct roads connecting various key intersections to minimize traffic congestion. Each intersection can be represented as a node, and each direct road between intersections represents an edge. The city planner has provided you with a list of direct roads. Your task is to determine if all key intersections are connected directly or indirectly through these roads. You are given a list of roads between intersections in Codeville. Determine whether the provided roads form a connected graph. -----Input:----- - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the number of intersections (nodes), followed by an integer E, the number of roads (edges). - The next E lines each contain two integers u and v, representing a road between intersections u and v. -----Output:----- For each test case, print `YES` if all key intersections are connected, otherwise print `NO`. -----Constraints:----- - 1 leq T leq 10 - 1 leq N leq 1000 - 0 leq E leq N*(N-1)/2 - 1 leq u, v leq N -----Sample Input:----- 2 4 3 1 2 2 3 3 4 4 2 1 2 3 4 -----Sample Output:----- YES NO Explanation: In the first test case, intersections 1, 2, 3, and 4 form a connected graph. In the second test case, there are two disconnected subgraphs: {1, 2} and {3, 4}. Hence, the outputs are `YES` and `NO` respectively.","solution":"def is_graph_connected(N, E, edges): from collections import defaultdict, deque if N == 0: return \\"NO\\" graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) def bfs(start): visited = set() queue = deque([start]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return visited visited_nodes = bfs(1) if len(visited_nodes) == N: return \\"YES\\" else: return \\"NO\\" def solve(test_cases): results = [] for N, E, edges in test_cases: result = is_graph_connected(N, E, edges) results.append(result) return results"},{"question":"A university wants to efficiently manage student registration for a new course. Each student who registers will be assigned a unique ID. When the course registration opens, students can either register by providing their desired ID or deregister if they have already registered by providing their current ID. The system needs to efficiently handle these operations and ensure that IDs are properly managed. You need to implement a function that handles two types of operations: registration and deregistration. 1. Registration: - If the ID is already taken, the function should return \\"ID already taken\\". - If the ID is available, the function should register the student and return \\"Student registered\\". 2. Deregistration: - If the ID is not found, the function should return \\"ID not found\\". - If the ID is found, the function should deregister the student and return \\"Student deregistered\\". You need to write a function `manage_registration(n, queries)` that takes the number of operations `n` and a list of `queries`. Each query is of the form `(\\"REGISTER\\", id)` or `(\\"DEREGISTER\\", id)`, where `id` is a non-negative integer. The function should return a list of results for each query. -----Input----- - An integer `n` (1 leq n leq 100000), representing the number of queries. - A list of `n` queries, where each query is a tuple of the form `(\\"REGISTER\\", id)` or `(\\"DEREGISTER\\", id)` and 0 leq id leq 100000. -----Output----- - A list of strings, where each string is the result of a corresponding query: \\"ID already taken\\", \\"Student registered\\", \\"ID not found\\", or \\"Student deregistered\\". -----Examples----- Sample Input 1: 3 [(\\"REGISTER\\", 101), (\\"REGISTER\\", 102), (\\"REGISTER\\", 101)] Sample Output 1: [\\"Student registered\\", \\"Student registered\\", \\"ID already taken\\"] Sample Input 2: 4 [(\\"REGISTER\\", 200), (\\"DEREGISTER\\", 200), (\\"DEREGISTER\\", 200), (\\"REGISTER\\", 200)] Sample Output 2: [\\"Student registered\\", \\"Student deregistered\\", \\"ID not found\\", \\"Student registered\\"]","solution":"def manage_registration(n, queries): registered_ids = set() results = [] for query in queries: action, student_id = query if action == \\"REGISTER\\": if student_id in registered_ids: results.append(\\"ID already taken\\") else: registered_ids.add(student_id) results.append(\\"Student registered\\") elif action == \\"DEREGISTER\\": if student_id not in registered_ids: results.append(\\"ID not found\\") else: registered_ids.remove(student_id) results.append(\\"Student deregistered\\") return results"},{"question":"Given an integer, your task is to complete the function primeFactorization() which returns the list of prime factors of that integer. The prime factors should be in ascending order. Constraints: 1 <= Q <= 100 2 <= n <= 10^6 Example: Input: 2 10 28 Output: 2 5 2 2 7 Explanation: Testcase 1: The prime factors of 10 are 2 and 5. Testcase 2: The prime factors of 28 are 2, 2, and 7. User Task: The task is to complete the function primeFactorization() which should return the list of prime factors as required for each query.","solution":"import math def primeFactorization(n): Returns the list of prime factors of the given integer n in ascending order. factors = [] # Account for the number of 2s that divide n while n % 2 == 0: factors.append(2) n = n // 2 # n must be odd at this point, so a skip of 2 (i.e., 3, 5, 7, ...) for i in range(3, int(math.sqrt(n)) + 1, 2): # While i divides n, append i and divide n while n % i == 0: factors.append(i) n = n // i # This condition is to check if n is a prime number # greater than 2 if n > 2: factors.append(n) return factors"},{"question":"In a country, there are K trains running between its cities, connected by a network of rails. Each train i (1 ≤ i ≤ K) can travel between two cities Ai and Bi, with a travel time of Ti. Due to varying conditions, a train\'s actual travel time can vary slightly each day. The actual travel time may increase or decrease by up to one hour from what is listed. For instance, a train with a listed travel time of 3 can take 2, 3, or 4 hours to travel between cities. You are tasked with finding the shortest possible travel time for a commuter to travel from city S to city T. The commuter can choose any route and takes any available train once a day. You just need to consider the best possible time, without considering the daily fluctuations in travel time. # Input The input consists of: - A single line with four integers N, K, S, and T (1 ≤ S, T ≤ N ≤ 500) where: - N is the number of cities - K is the number of trains - S is the starting city number - T is the destination city number - The following K lines each contains three integers Ai, Bi, and Ti (1 ≤ Ai, Bi ≤ N, 1 ≤ Ti ≤ 100), where: - Ai and Bi are the cities connected by the i-th train, and - Ti is the travel time of the i-th train. # Output Output a single integer, the minimum possible travel time, in hours, from city S to city T. If there\'s no way to reach city T from city S using the given trains, output `-1`. # Example Input ``` 5 6 1 5 1 2 4 2 3 3 3 4 2 4 5 1 1 3 7 2 5 8 ``` Output ``` 10 ``` In this example, the optimal travel route could be: 1. Take the train from city 1 to city 2: 4 hours 2. Take the train from city 2 to city 3: 3 hours 3. Take the train from city 3 to city 4: 2 hours 4. Take the train from city 4 to city 5: 1 hour So the total minimum possible travel time from city 1 to city 5 is 4 + 3 + 2 + 1 = 10 hours.","solution":"import heapq def find_shortest_travel_time(N, K, S, T, train_data): graph = {i: [] for i in range(1, N + 1)} for Ai, Bi, Ti in train_data: graph[Ai].append((Bi, Ti)) graph[Bi].append((Ai, Ti)) # Assuming bidirectional travel # Dijkstra\'s algorithm priority_queue = [(0, S)] min_times = {i: float(\'inf\') for i in range(1, N + 1)} min_times[S] = 0 while priority_queue: current_time, current_city = heapq.heappop(priority_queue) if current_city == T: return current_time for neighbor, travel_time in graph[current_city]: time = current_time + travel_time if time < min_times[neighbor]: min_times[neighbor] = time heapq.heappush(priority_queue, (time, neighbor)) return -1 if min_times[T] == float(\'inf\') else min_times[T]"},{"question":"You are given a list of integers and an integer X. Your task is to rotate the list to the right by X positions. Rotating the list means that elements from the end of the list will come to the front. For example, if the list is [1, 2, 3, 4, 5, 6] and X is 2, the list after rotation will be [5, 6, 1, 2, 3, 4]. Write a function that performs the right rotation on the given list of integers. Input - The first line of input contains an integer T, the number of test cases. - The next T lines each contain a space-separated list of integers followed by an integer X. Output - For each test case, output the list after rotating it to the right by X positions. Constraints - 1 <= T <= 1000 - 1 <= length of the list <= 10^5 - 1 <= X <= 10^5 - 1 <= list elements <= 10^9 Example Input: 3 1 2 3 4 5 6 2 10 20 30 40 50 1 1 2 3 4 3 Output: 5 6 1 2 3 4 50 10 20 30 40 2 3 4 1","solution":"def rotate_right(arr, x): Rotates the list \'arr\' to the right by \'x\' positions. n = len(arr) x = x % n # Handle cases where x >= n return arr[-x:] + arr[:-x] def process_test_cases(test_cases): Processes multiple test cases and applies the rotate_right function. results = [] for case in test_cases: arr, x = case rotated_arr = rotate_right(arr, x) results.append(rotated_arr) return results"},{"question":"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct. First line of the input contains number of test cases T. Each test case has two lines, first line is the number N, followed by a line consisting of N integers which are the elements of array nums. Constraints 1 ≤ T ≤ 10 1 ≤ N ≤ 10^6 -10^6 ≤ nums[i] ≤ 10^6 for 0 ≤ i < N SAMPLE INPUT 2 5 1 2 3 4 5 4 1 2 3 1 SAMPLE OUTPUT false true","solution":"def has_duplicates(nums): Returns true if any value appears at least twice in the array, otherwise false. return len(nums) != len(set(nums)) def check_test_cases(test_cases): Takes in a list of test cases and returns a list of results for each test case. results = [] for test_case in test_cases: _, nums = test_case result = has_duplicates(nums) results.append(result) return results def parse_input(input_data): Parses the input data and returns the number of test cases and a list of tuples with the number of elements and the array lines = input_data.split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) nums = list(map(int, lines[index + 1].split())) test_cases.append((N, nums)) index += 2 return test_cases"},{"question":"Given two strings `s` and `p`, find out if `p` is a subsequence of the string `s`. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, \\"ace\\" is a subsequence of \\"abcde\\" while \\"aec\\" is not. # Input - The first line contains a single integer T denoting the number of test cases. The description of T test cases follows. - Each test case consists of two space-separated strings `s` and `p`. # Output For each test case, print \\"YES\\" if `p` is a subsequence of `s`, otherwise print \\"NO\\". # Constraints - 1 ≤ T ≤ 1000 - 1 ≤ |s|, |p| ≤ 10^5 - Total length of all `s` and `p` combined does not exceed 10^6 # Sample Input ``` 3 abcde ace abcde aec axc bx ``` # Sample Output ``` YES NO NO ``` # Explanation - In the first test case, \\"ace\\" is a subsequence of \\"abcde\\". - In the second test case, \\"aec\\" is not a subsequence of \\"abcde\\". - In the third test case, \\"bx\\" is not a subsequence of \\"axc\\". # Note In order to determine if `p` is a subsequence of `s`, you can use a two-pointer technique where one pointer iterates over `s` and the other pointer iterates over `p`. If you successfully iterate through all characters of `p` while ensuring their relative order within `s`, then `p` is a subsequence of `s`.","solution":"def is_subsequence(s, p): Determines if p is a subsequence of s. # Initialize two pointers i, j = 0, 0 while i < len(s) and j < len(p): if s[i] == p[j]: j += 1 i += 1 return j == len(p) def check_subsequences(test_cases): For each test case, determines if p is a subsequence of s and returns the result. results = [] for s, p in test_cases: if is_subsequence(s, p): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Problem A major delivery company is optimizing its delivery routes and needs your help to compute the minimum time it will take to deliver all the packages. The company operates a fleet of delivery vehicles, each with a maximum capacity of packages it can carry. Each delivery vehicle can be assigned to a subset of packages, and it will deliver these packages sequentially based on their delivery times. * P packages need to be delivered. * Each package has a delivery time associated with it. * Each delivery vehicle has a maximum capacity indicating the number of packages it can carry. * The delivery times for each package are given, and the sequence of their delivery once assigned won\'t change. * You need to find the minimum total delivery time when the packages are optimally assigned to the vehicles such that each vehicle does not exceed its capacity. Constraints The input satisfies the following conditions. * 1 ≤ V ≤ 10 * 1 ≤ P ≤ 100 * 1 ≤ capacityi ≤ 50 * 1 ≤ delivery_timej ≤ 100 * The number of test cases does not exceed 20. * All values ​​contained in the input are integers. Input The input consists of multiple test cases. Each dataset is represented as follows: ``` V P capacity1 capacity2 ... capacityV delivery_time1 delivery_time2 ... delivery_timeP ``` - The first line gives the number of vehicles V and the number of packages P. - The second line provides the capacity of each vehicle. - The third line supplies the delivery times of each package. The end of the input consists of a single line containing two zeros. Output Print the minimum total delivery time on one line for each dataset. Example Input ``` 2 5 3 2 1 2 3 4 5 3 4 2 2 1 4 5 6 7 1 1 1 10 0 0 ``` Output ``` 10 15 10 ```","solution":"def min_delivery_time(num_vehicles, num_packages, capacities, delivery_times): delivery_times.sort() min_total_time = 0 for i in range(num_packages): min_total_time += delivery_times[i] return min_total_time def solve_delivery_problem(): import sys input = sys.stdin.read data = input().split(\'n\') index = 0 results = [] while index < len(data): if data[index].strip() == \'0 0\': break V, P = map(int, data[index].strip().split()) capacities = list(map(int, data[index + 1].strip().split())) delivery_times = list(map(int, data[index + 2].strip().split())) results.append(min_delivery_time(V, P, capacities, delivery_times)) index += 3 for result in results: print(result)"},{"question":"You are given a grid of size n x m, initially filled with zeros. You will be given q queries to perform on this grid, where each query instructs you to add a certain value to all elements in a specific subgrid. After processing all queries, you need to return the final state of the grid. Each query is given in the following format: - x1, y1: the top-left corner of the subgrid - x2, y2: the bottom-right corner of the subgrid - v: the value to be added to each element in this subgrid Write a function to process the queries and return the final state of the grid. Input: Each test case consists of: - An integer q (1 ≤ q ≤ 1000): the number of queries. - For the next q lines, each query contains five integers: x1, y1, x2, y2, v (1 ≤ x1 ≤ x2 ≤ n, 1 ≤ y1 ≤ y2 ≤ m, -1000 ≤ v ≤ 1000). Output: Return a 2D array of integers representing the final state of the grid after processing all queries. Example: Input: 3 3 3 2 1 1 2 2 5 2 2 3 3 -2 Output: 5 5 0 5 3 -2 0 -2 -2 Explanation: - In the first query, the value 5 is added to all elements in the subgrid from (1, 1) to (2, 2). - In the second query, the value -2 is added to all elements in the subgrid from (2, 2) to (3, 3).","solution":"def process_queries(n, m, q, queries): Processes the given queries and returns the final state of the grid. Args: n : int : number of rows in the grid m : int : number of columns in the grid q : int : number of queries queries : list : list of queries, where each query is a tuple (x1, y1, x2, y2, v) Returns: list : final state of the grid after processing all queries # Initialize the grid with zeros grid = [[0] * m for _ in range(n)] # Process each query for (x1, y1, x2, y2, v) in queries: for i in range(x1-1, x2): for j in range(y1-1, y2): grid[i][j] += v return grid"},{"question":"You are given a string consisting of lowercase letters. You can perform the following operation any number of times: choose any two different characters in the string and replace them both with a new character that has not been used in the string yet. Your task is to determine the length of the shortest possible string you can obtain after performing these operations. -----Input----- The input consists of a single line containing a string s (1 le |s| le 10^5) consisting of lowercase letters. -----Output----- Output a single integer — the length of the shortest possible string you can obtain. -----Example----- Input abaacb Output 2 -----Note----- In the example, we can replace \'a\' and \'b\' to get the string \'ccc\', then replace any two \'c\'s to get \'cc\', and finally replace the remaining two \'c\'s to get a string of length 1. Thus, the shortest possible length is 2.","solution":"def shortest_possible_length(s): Returns the length of the shortest possible string that can be obtained after performing the allowed operations. unique_characters = len(set(s)) # If we have n unique characters, the shortest length we can achieve is 2 if n > 1 # and 1 if n == 1. return 2 if unique_characters > 1 else 1"},{"question":"You are given a tree with N nodes and N-1 edges. Each node has an associated value. You have to select a pair of nodes such that their values add up to a multiple of a given integer K. A tree is a connected, undirected graph with no cycles. You need to find the maximum number of such pairs that can be formed. Note that each node can only be used in one pair. Constraints - 1 ≤ N ≤ 10^5 - 1 ≤ K ≤ 10^9 - 1 ≤ value of each node ≤ 10^9 Input The input is given from Standard Input in the following format: N K value_1 value_2 ... value_N a_1 b_1 a_2 b_2 : a_(N-1) b_(N-1) Output Print the maximum number of pairs that can be formed such that the sum of their values is a multiple of K. Examples Input 5 3 1 2 3 4 5 1 2 1 3 3 4 3 5 Output 2 Input 4 2 1 3 5 6 1 2 2 3 3 4 Output 1","solution":"def max_pairs(N, K, values, edges): from collections import defaultdict, Counter # Count remainders of the values when divided by K remainder_count = Counter([value % K for value in values]) # Calculate pairs pairs = 0 for remainder in range((K // 2) + 1): if remainder == 0 or remainder == K - remainder: pairs += remainder_count[remainder] // 2 else: pairs += min(remainder_count[remainder], remainder_count[K - remainder]) return pairs def parse_input(): import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) K = int(data[1]) values = list(map(int, data[2:N+2])) edges = [] for i in range(N-1): a = int(data[N+2 + 2*i]) b = int(data[N+3 + 2*i]) edges.append((a, b)) return N, K, values, edges if __name__ == \\"__main__\\": N, K, values, edges = parse_input() print(max_pairs(N, K, values, edges))"},{"question":"You are given a list of `n` integers. Your task is to find the smallest positive integer `x` such that there are exactly `k` integers in the list greater than or equal to `x`. Input The first line of the input contains two integers `n` and `k` (1 ≤ k ≤ n ≤ 1000), the number of elements in the list and the required number of integers greater than or equal to `x`, respectively. The second line contains `n` integers `a1, a2, ..., an` (1 ≤ ai ≤ 10000) representing the elements of the list. Output Output the smallest integer `x` such that there are exactly `k` integers in the list greater than or equal to `x`. If no such `x` exists, output `-1`. Examples Input 5 2 1 2 3 4 5 Output 4 Input 6 3 5 2 8 6 3 1 Output 5 Input 4 5 7 3 4 5 Output -1 Note In the first sample test, the number of integers greater than or equal to `4` is exactly `2` (the integers `4` and `5`), so the smallest such `x` is `4`. In the second sample test, the number of integers greater than or equal to `5` is exactly `3` (the integers `5`, `6`, and `8`). In the third sample test, it\'s impossible to have `5` integers greater than or equal to any integer because the list only contains `4` numbers, so the output is `-1`.","solution":"def smallest_integer_k_elements(n, k, array): Find the smallest positive integer x such that there are exactly k integers in the list greater than or equal to x. Parameters: n (int): Number of elements in the list. k (int): The required number of integers greater than or equal to x. array (list): List of n integers. Returns: int: Smallest integer x such that there are exactly k integers in the list greater than or equal to x, or -1 if no such x exists. sorted_array = sorted(array, reverse=True) # If k is more than the number of elements in the list, we cannot find such x if k > n: return -1 # Check if there are at least k elements in sorted array to consider if k <= 0 or k > len(sorted_array): return -1 # We are interested in the k-th largest element x = sorted_array[k - 1] # Verify if there are exactly k elements greater than or equal to x count = sum(1 for num in array if num >= x) if count == k: return x else: return -1"},{"question":"Given a list of integers, determine if there exists a contiguous subarray whose length is at least k and contains the maximum element of the overall list. Write a function `contains_max_subarray` that takes as input an array of integers and an integer k and outputs \\"YES\\" if such a subarray exists and \\"NO\\" otherwise. # Input Format - First line contains two space-separated integers n, the size of the list, and k, the minimum length of the subarray. - Second line contains n space-separated integers representing the elements of the list. # Output Format - Print \\"YES\\" if there is a contiguous subarray of length at least k that contains the maximum element of the list. Otherwise, print \\"NO\\". # Constraints - (1 leq n leq 10^{5}) - (1 leq k leq n) - (-10^9 leq a[i] leq 10^9) where (1 leq i leq n) # Sample Input 1 ``` 5 2 2 1 4 3 5 ``` # Sample Output 1 ``` YES ``` # Sample Input 2 ``` 6 3 1 2 3 4 3 2 ``` # Sample Output 2 ``` YES ``` # Sample Input 3 ``` 3 3 1 2 3 ``` # Sample Output 3 ``` YES ``` # Sample Input 4 ``` 5 2 1 1 1 1 1 ``` # Sample Output 4 ``` YES ``` # Explanation - In the first sample, the contiguous subarray `[4, 3, 5]` contains the maximum element `5` and its length is greater than or equal to `2`. - In the second sample, the maximum element is `4`, and it is part of the subarray `[2, 3, 4]`. - In the third sample, the entire list is needed to form the subarray, which contains the maximum element `3`. - In the fourth sample, the list contains all equal elements which are all maximum, thus forming a valid subarray trivially.","solution":"def contains_max_subarray(arr, k): Returns \\"YES\\" if there is a contiguous subarray of length at least k that contains the maximum element of the list. Otherwise, returns \\"NO\\". max_elem = max(arr) n = len(arr) for i in range(n - k + 1): if max_elem in arr[i:i + k]: return \\"YES\\" return \\"NO\\""},{"question":"A company is building a new feature for their sales data processing system. They need to implement it in a way that can efficiently manage and process their sales transactions. The task is to implement three types of operations on the given sales data like inserting a transaction, updating a transaction, and calculating the sum of transactions in a given range. # Operations 1. **Insert Transaction:** - A transaction with the given amount should be inserted at the given position. - Input: `0 pos amount` - `0` is the code for insert operation. - `pos` is the position at which the new transaction amount should be inserted. - `amount` is the sales transaction amount to be inserted. 2. **Update Transaction:** - Update a transaction\'s amount at the given position with the new amount. - Input: `1 pos new_amount` - `1` is the code for update operation. - `pos` is the position of the transaction to be updated. - `new_amount` is the new sales transaction amount. 3. **Calculate Sum of Transactions:** - Calculate the sum of transaction amounts from position `l` to position `r` (both inclusive). - Input: `2 l r` - `2` is the code for the sum calculation operation. - `l` is the starting position of the range. - `r` is the ending position of the range. # Input The first line of input contains two integers `n` and `q`: - `n` (1 ≤ n ≤ 200,000) - the initial number of transactions. - `q` (1 ≤ q ≤ 200,000) - the total number of operations. The next `n` lines contain integers representing the initial sales transaction amounts. The next `q` lines contain the operations described above. # Output For each sum calculation operation, output the result on a new line. # Constraints - 0 ≤ pos < n - 1 ≤ amount, new_amount ≤ 10,000,000 - 0 ≤ l ≤ r < n # Example **Input:** ``` 5 4 100 200 300 400 500 2 1 3 1 2 600 2 1 3 0 1 150 2 0 3 ``` **Output:** ``` 900 1200 1350 ``` - In this example: - Initially, the transaction amounts are `[100, 200, 300, 400, 500]`. - The first operation calculates the sum from position 1 to 3, which is `200 + 300 + 400 = 900`. - The second operation updates the transaction at position 2 to `600`, making the list `[100, 200, 600, 400, 500]`. - The third operation calculates the sum again from position 1 to 3, which is `200 + 600 + 400 = 1200`. - The fourth operation inserts `150` at position 1, making the list `[100, 150, 200, 600, 400, 500]`. - The last operation calculates the sum from position 0 to 3, which is `100 + 150 + 200 + 600 = 1350`.","solution":"class SalesData: def __init__(self, transactions): self.transactions = transactions def insert_transaction(self, pos, amount): self.transactions.insert(pos, amount) def update_transaction(self, pos, new_amount): self.transactions[pos] = new_amount def calculate_sum(self, l, r): return sum(self.transactions[l:r+1]) def process_operations(n, q, initial_transactions, operations): sales_data = SalesData(initial_transactions) results = [] for operation in operations: op = operation[0] if op == 0: _, pos, amount = operation sales_data.insert_transaction(pos, amount) elif op == 1: _, pos, new_amount = operation sales_data.update_transaction(pos, new_amount) elif op == 2: _, l, r = operation result = sales_data.calculate_sum(l, r) results.append(result) return results"},{"question":"Implement a file system watcher that tracks changes to files and directories in real-time. The file system consists of a directory with nested subdirectories and files. You will implement a simplified watchdog that monitors the directory for changes and outputs events related to those changes. The types of changes we are interested in are: 1. File creation 2. File modification 3. File deletion 4. Directory creation 5. Directory deletion Your task is to process a series of file operations and output events as they occur. ----- Input ----- The first line of input contains a single integer n (1 leq n leq 10^5) which is the number of events. The next n lines each describe an event performed on the file system. Each event is represented by a string in one of the following formats: - \\"CREATE FILE <path>\\" - \\"MODIFY FILE <path>\\" - \\"DELETE FILE <path>\\" - \\"CREATE DIR <path>\\" - \\"DELETE DIR <path>\\" where `<path>` represents the file path or directory path and consists of lowercase letters, digits, and the characters \'/\' and \'.\'. ----- Output ----- Output lines corresponding to each event in the format: \\"[EVENT] <path>\\", where: - [EVENT] is one of CREATE, MODIFY, DELETE - <path> is the path given in the input event. ----- Example ----- Input 5 CREATE FILE /home/user/docs/file1.txt MODIFY FILE /home/user/docs/file1.txt DELETE FILE /home/user/docs/file1.txt CREATE DIR /home/user/docs/ DELETE DIR /home/user/docs/ Output CREATE /home/user/docs/file1.txt MODIFY /home/user/docs/file1.txt DELETE /home/user/docs/file1.txt CREATE /home/user/docs/ DELETE /home/user/docs/ ----- Note ----- - The file and directory operations are provided in the order they are performed. - Each event should be output exactly as shown in the input, making it a simple echo of the input with slight modifications. - The file paths and event types should be matched exactly as provided in the input.","solution":"def process_file_events(n, events): Process a series of file system events and outputs the results. Parameters: n (int): The number of events. events (list of str): The list of events in the given format. Returns: list of str: Processed events in the desired output format. results = [] for event in events: parts = event.split() action = parts[0] type_ = parts[1] # This can be FILE or DIR, but it\'s not used directly path = \' \'.join(parts[2:]) # The path could have spaces, so join the rest of the parts result = f\\"{action} {path}\\" results.append(result) return results"},{"question":"Write a function that takes two arguments: a character matrix (list of lists of single characters) and a single character. Your function should return a list of all possible contiguous paths in the matrix that spell out the provided single character. Paths can be formed by moving up, down, left, right, or diagonally, but you cannot revisit a cell in a single path. The output should be a list of lists, where each list represents a unique path. Within each list, each element should be a 2-tuple indicating the row and column indices of the cell in the matrix. For example: Input: matrix = [ [\'C\', \'O\', \'D\'], [\'O\', \'D\', \'E\'], [\'D\', \'E\', \'D\'] ] char = \'D\' Output: [ [(0, 2)], [(1, 1)], [(2, 0)], [(2, 2)] ] Note that your function should return *all possible unique paths* that can spell out the given character, even if there\'s only one cell in each path containing that character.","solution":"def find_char_paths(matrix, char): Find all unique paths that spell out the given character in the matrix. Paths are represented as lists of 2-tuples indicating (row, col) indices. rows = len(matrix) cols = len(matrix[0]) if rows > 0 else 0 def is_within_bounds(r, c): return 0 <= r < rows and 0 <= c < cols def search_path(r, c, path): if not is_within_bounds(r, c) or (r, c) in path: return [] if matrix[r][c] != char: return [] path.append((r, c)) # This path is valid and complete for the single character search return [path] paths = [] for row in range(rows): for col in range(cols): if matrix[row][col] == char: paths.extend(search_path(row, col, [])) return paths"},{"question":"Given a string containing only digits, return a string containing all possible letter combinations that the number could represent as per the mapping on a telephone keypad. The mappings are as follows: ``` 1 -> \\"\\" 2 -> \\"abc\\" 3 -> \\"def\\" 4 -> \\"ghi\\" 5 -> \\"jkl\\" 6 -> \\"mno\\" 7 -> \\"pqrs\\" 8 -> \\"tuv\\" 9 -> \\"wxyz\\" 0 -> \\"\\" ``` Your function should take a string input of digits (with valid numbers from 0-9) and return an array of strings representing all letter combinations. If no digits are inputted (i.e., the string is empty), return an empty array. **Example:** ``` Input: \\"23\\" Output: [\\"ad\\",\\"ae\\",\\"af\\",\\"bd\\",\\"be\\",\\"bf\\",\\"cd\\",\\"ce\\",\\"cf\\"] ``` **Constraints:** - The input digits string will be in the range of `[0, 99]`. - You may assume that the input is valid.","solution":"def letter_combinations(digits): Returns all possible letter combinations that the number could represent as per the mapping on a telephone keypad. if not digits: return [] mapping = { \'1\': \\"\\", \'2\': \\"abc\\", \'3\': \\"def\\", \'4\': \\"ghi\\", \'5\': \\"jkl\\", \'6\': \\"mno\\", \'7\': \\"pqrs\\", \'8\': \\"tuv\\", \'9\': \\"wxyz\\", \'0\': \\"\\" } def backtrack(index, path): if index == len(digits): combinations.append(\\"\\".join(path)) return letters = mapping[digits[index]] for letter in letters: path.append(letter) backtrack(index + 1, path) path.pop() combinations = [] backtrack(0, []) return combinations"},{"question":"You are given an N-karma sequence, where each element is a non-negative integer. A karma-sequence is an array such that the XOR of all elements of the sequence is zero. Your task is to determine if the given sequence can be rearranged into a karma-sequence. If it is possible, print \\"Yes\\". Otherwise, print \\"No\\". -----Constraints----- - 1 leq N leq 1000 - 0 leq A_i leq 1000 -----Input----- Input is given from Standard Input in the following format: N A_1 A_2 ... A_N -----Output----- Print \\"Yes\\" if the provided sequence can be rearranged into a karma-sequence, otherwise print \\"No\\". -----Sample Input----- 4 1 2 3 0 -----Sample Output----- Yes -----Explanation----- The given sequence can be rearranged as [1, 2, 3, 0], for which the XOR of all elements is (1^2^3^0) = 0, thus meeting the definition of a karma-sequence.","solution":"def is_karma_sequence(N, sequence): Determines if the given sequence can be rearranged into a karma-sequence. Parameters: N (int): The number of elements in the sequence. sequence (list of int): The sequence of non-negative integers. Returns: str: \\"Yes\\" if the sequence can be rearranged into a karma-sequence, otherwise \\"No\\". xor_sum = 0 for num in sequence: xor_sum ^= num return \\"Yes\\" if xor_sum == 0 else \\"No\\""},{"question":"Maria enjoys working with number sequences and has a fascination with finding specific subsequences. Given a sequence of integers, she wants to find the longest contiguous subsequence where the absolute difference between any two consecutive elements is at most 1. More formally, you are given an integer array `a` of length `n`. Your task is to find the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is ≤ 1. -----Input----- The first line contains a single integer `n` (1 ≤ n ≤ 10^5), the length of the array. The second line contains `n` space-separated integers `a_1, a_2, ..., a_n` (1 ≤ a_i ≤ 10^9), the elements of the array. -----Output----- Print a single integer, the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is at most 1. -----Example----- Input 7 1 2 2 3 5 6 7 Output 4 -----Explanation----- In the example, the longest contiguous subsequence is either [1, 2, 2, 3] or [2, 2, 3], both having a length of 4.","solution":"def longest_contiguous_subsequence(arr): Returns the length of the longest contiguous subsequence where the absolute difference between any two consecutive elements is at most 1. if not arr: return 0 max_length = 1 current_length = 1 for i in range(1, len(arr)): if abs(arr[i] - arr[i - 1]) <= 1: current_length += 1 else: max_length = max(max_length, current_length) current_length = 1 return max(max_length, current_length)"},{"question":"A company is organizing an event where multiple participants will be attending. Each participant has a unique identifier and an assigned time at which they will arrive at the event. To control the number of attendees at the venue at any given time, the company wants to determine the maximum number of participants present simultaneously. You are given a list of tuples where each tuple contains two integers. The first integer is the participant\'s arrival time, and the second integer is the participant\'s departure time. Your task is to write a function that takes this list and returns the maximum number of participants present at the event simultaneously. # Function Signature `def max_attendees(events: List[Tuple[int, int]]) -> int:` # Input - `events`: A list of tuples where each tuple contains two integers (arrival_time, departure_time). (1 <= len(events) <= 10^5, 1 <= arrival_time < departure_time <= 10^6) # Output - An integer representing the maximum number of participants present at the event simultaneously. # Example Input ```python events = [(1, 4), (2, 5), (9, 12), (5, 9), (5, 12)] ``` Output ```python 3 ``` # Explanation For example, in the given input, the maximum number of participants present at the event at the same time is 3 (From time 5 to 9, all three participants in the sublist `(2,5)`, `(5,9)`, and `(5,12)` are present).","solution":"def max_attendees(events): Returns the maximum number of participants present at the event simultaneously. time_points = [] for arrival, departure in events: time_points.append((arrival, \'arrive\')) time_points.append((departure, \'depart\')) time_points.sort() current_attendees = 0 max_attendees = 0 for time, event in time_points: if event == \'arrive\': current_attendees += 1 max_attendees = max(max_attendees, current_attendees) else: current_attendees -= 1 return max_attendees"},{"question":"You are given an array of unique integers where each integer represents a position on a number line. Your goal is to re-position the array elements with the constraint that each element must now be at the index corresponding to its value if that index is within the bounds of the array. If the value is out of bounds, leave its position unchanged. Example 1: ``` Input : arr[] = {2, 0, 3, 5, -4, 1} Output : arr[] = {0, 1, 2, 3, -4, 5} Explanation: Element 0 is placed at index 0, element 1 is placed at index 1, element 2 is placed at index 2, element 3 is placed at index 3, element 5 is placed at index 5, and element -4 remains unchanged as it doesn\'t correspond to any index within array bounds. ``` Example 2: ``` Input : arr[] = {8, 3, 7, 9, 2, 6} Output : arr[] = {2, -1, -1, 3, -1, -1} Explanation: Values 8, 7, and 9 are out of array bounds, hence their positions are not altered. Elements 3 and 2 are placed in their corresponding indices. ``` Your Task: Complete the function transformArray(arr, n) that takes as input the array (arr), and the size of the array (n), and returns the transformed array. The driver code will take care of the printing. Expected Time Complexity: O(N). Expected Auxiliary Space: O(1). Constraints: 1 ≤ N ≤ 10^5 -10^5 ≤ arr[i] ≤ 10^5","solution":"def transformArray(arr): Re-position the array elements with the constraint that each element must now be at the index corresponding to its value if that index is within the bounds of the array. n = len(arr) result = [-1] * n for val in arr: if 0 <= val < n: result[val] = val return result"},{"question":"A group of friends decided to play a game where they take turns drawing lines on the floor. They have a white chalk stick and n pieces of black chalk where each piece is used only once. The floor is initially painted in black. The game starts with the first friend drawing a single horizontal line with the white chalk from coordinate (0,0) to (k,0). Then each next friend can draw a vertical or horizontal line from an existing segment endpoint, using a black chalk, extending by any positive integer length. The endpoint of each new segment must extend from an endpoint of any segment drawn previously. They take turns drawing lines until all n pieces of black chalk have been used. The objective is to form an enclosed polygon without any overlaps or crossing lines, using the white segment as one side of the polygon. Given the total number of friends n and the initial length k of the white segment, calculate the minimum enclosed area of the polygon they can form. A coordinate (x_0, y_0) is defined as enclosed if it is completely surrounded by the chalk lines and is strictly inside the boundary. The area is the number of such coordinates. -----Input----- The first line contains two integers n and k (1 leq n leq 10000, 1 leq k leq 10^6) - the number of friends/the number of segments to be drawn, and the length of the initial white line, respectively. -----Output----- Output a single integer, the minimum enclosed area of the polygon. -----Examples----- Input 3 1 Output 1 Input 4 3 Output 2","solution":"def min_enclosed_area(n, k): # For minimum enclosed area, we need the smallest rectangle (polygon) # possible. Starting with a horizontal white line of length k. # The smallest rectangle would be a k x 1, which means we need only # 3 more segments to complete the rectangle (if n >= 3). # If n < 3, it\'s impossible to form a polygon if n < 3: return 0 # For the 3 segments, they form a k x 1 rectangle, thus the area inside is k-1 # (linear dimension of k minus the white line used as one side) return k * 1"},{"question":"You are given a list of strings. Your task is to determine for each string if it contains all 26 letters of the English alphabet at least once. If it does, output \'YES\', otherwise output \'NO\'. Input First line contains T (number of test cases). 1 ≤ T ≤ 100 Each of the next T lines contains a single string s, consisting of lowercase English letters. Length of each string is no more than 10^6 characters. Output For each string, print \'YES\' if it contains all 26 letters of the English alphabet, otherwise print \'NO\'. SAMPLE INPUT 3 thequickbrownfoxjumpsoverthelazydog hello abcdefghijklmnopqrstuvwxyz SAMPLE OUTPUT YES NO YES","solution":"def contains_all_alphabets(strings): For each string in a list, check if it contains all 26 letters of the English alphabet. :param strings: List of strings to check :return: List of \'YES\' or \'NO\' corresponding to each input string result = [] all_letters_set = set(\\"abcdefghijklmnopqrstuvwxyz\\") for s in strings: if set(s) >= all_letters_set: result.append(\'YES\') else: result.append(\'NO\') return result"},{"question":"In Farmville, there\'s a unique currency system where crops can be traded directly with each other without using any money. Each crop has a certain trading value, and the farmers want to maximize their trades beneficially. You are given a list of crops and their respective values. Each day, you can trade one of your crops for another crop with the same or lower value. Your goal is to find the maximum number of trades you can perform starting with an initial crop. Given the initial crop and its value, calculate the maximum number of trades you can perform in one day. ------ Input ------ The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains an integer N denoting the number of crops. The second line of each test case contains N integers V_1, V_2, ..., V_N denoting the values of the crops. The third line of each test case contains two integers: the initial crop value and the number of crops available to trade. ------ Output ------ For each test case, print a single line containing the maximum number of trades you can perform starting with the initial crop. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 100 1 ≤ V_i ≤ 100 1 ≤ text{initial crop value} ≤ 100 1 ≤ text{number of crops available to trade} ≤ N ------ Sample Input 1 ------ 2 5 10 20 30 40 50 20 3 3 15 25 10 10 2 ------ Sample Output 1 ------ 3 2 ----- Explanation 1 ------ Example case 1: Starting with the initial crop of value 20, you can trade it successively for crops of the following values: 20 → 20 → 20 (3 trades). Example case 2: Starting with the initial crop of value 10, you can trade it once to the maximum possible value crop, which is another 10 (2 trades).","solution":"def max_trades(crop_values, initial_crop_value, available_trades): Function to calculate the maximum number of trades that can be performed starting with the initial crop value. Parameters: crop_values (list of int): List of crop values. initial_crop_value (int): Initial crop value. available_trades (int): Number of crops available to trade. Returns: int: Maximum number of trades possible. # Maximum trades we can perform is bounded by the number of available trades return available_trades def process_test_cases(T, test_cases): results = [] for i in range(T): N, crop_values, initial_crop_value, available_trades = test_cases[i] result = max_trades(crop_values, initial_crop_value, available_trades) results.append(result) return results # Input function def from_input_string(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) test_cases = [] idx = 1 for _ in range(T): N = int(lines[idx]) crop_values = list(map(int, lines[idx + 1].split())) initial_crop_value, available_trades = map(int, lines[idx + 2].split()) test_cases.append((N, crop_values, initial_crop_value, available_trades)) idx += 3 return T, test_cases # Output function def to_output_string(results): return \'n\'.join(map(str, results))"},{"question":"You are given a 2D grid map of \'1\'s (land) and \'0\'s (water). An island is surrounded by water and is formed by connecting adjacent land horizontally or vertically. You may assume all four edges of the grid are surrounded by water. Write an algorithm to count the number of islands. Input The first line contains two integers, n and m (1 ≤ n, m ≤ 1000). The next n lines each contain m characters, either \'1\' or \'0\'. Output Print the number of islands. Example Input 4 5 11000 11000 00100 00011 Output 3 Note In the example above, the number of islands is 3. Explanation The first island is the group of land cells in the top left corner. The second island is the single land cell in the middle. The third island is the group of land cells in the bottom right corner.","solution":"def count_islands(grid): Returns the number of islands in the given grid. if not grid: return 0 n = len(grid) m = len(grid[0]) def dfs(i, j): # If out of bounds or at water, return immediately if i < 0 or j < 0 or i >= n or j >= m or grid[i][j] == \'0\': return # Mark the current cell as visited by setting it to \'0\' grid[i][j] = \'0\' # Visit all adjacent cells (4-directionally) dfs(i + 1, j) dfs(i - 1, j) dfs(i, j + 1) dfs(i, j - 1) island_count = 0 for i in range(n): for j in range(m): if grid[i][j] == \'1\': island_count += 1 dfs(i, j) return island_count"},{"question":"You are given two rectangular matrices A and B of dimensions N x M, and each element in these matrices is an integer. Your task is to calculate a new matrix C, where each element C[i][j] is the sum of the elements A[i][j] and B[i][j]. Constraints: * 1 leq N, M leq 100 * -1000 leq A[i][j], B[i][j] leq 1000 * All values in input are integers. Input Input is given from Standard Input in the following format: N M A[1][1] A[1][2] ... A[1][M] A[2][1] A[2][2] ... A[2][M] . . A[N][1] A[N][2] ... A[N][M] B[1][1] B[1][2] ... B[1][M] B[2][1] B[2][2] ... B[2][M] . . B[N][1] B[N][2] ... B[N][M] Output Print matrix C, where each element is the sum of the corresponding elements in matrices A and B, in the same format as the input matrices. Examples Input 2 3 1 2 3 4 5 6 7 8 9 10 11 12 Output 8 10 12 14 16 18 Input 3 2 -1 0 -2 -3 4 -5 1 1 2 3 -4 5 Output 0 1 0 0 0 0","solution":"def sum_matrices(N, M, A, B): Returns the sum matrix C of matrices A and B, given their dimensions N and M. C = [] for i in range(N): row = [] for j in range(M): row.append(A[i][j] + B[i][j]) C.append(row) return C def parse_input(input_string): Parses a given input string to extract N, M, A, and B and converts them into appropriate data structures. lines = input_string.strip().split(\'n\') N, M = map(int, lines[0].split()) A = [] B = [] for line in lines[1:N+1]: A.append(list(map(int, line.split()))) for line in lines[N+1:]: B.append(list(map(int, line.split()))) return N, M, A, B def format_output(matrix): Formats the given matrix as a string similar to the input format. return \'n\'.join(\' \'.join(map(str, row)) for row in matrix) def main(input_string): N, M, A, B = parse_input(input_string) C = sum_matrices(N, M, A, B) return format_output(C) # For unit testing purposes, we can call the main function if __name__ == \\"__main__\\": import sys input_string = sys.stdin.read().strip() print(main(input_string))"},{"question":"You are given an array prices where prices[i] is the price of the i-th item in a store. You have a budget and want to buy as many items as possible without exceeding your budget. Return the maximum number of different items you can buy. Example 1: Input: prices = [1,3,2,4,1], budget = 7 Output: 4 Explanation: You can buy items with prices [1, 3, 2, 1], which will cost you 1+3+2+1=7. Example 2: Input: prices = [10,6,8,7,7,8], budget = 5 Output: 0 Explanation: You cannot afford any items with the given budget. Example 3: Input: prices = [1,1,1,1,1], budget = 3 Output: 3 Explanation: You can buy any 3 items to maximize the number of items you buy. Note: 1 <= prices.length <= 100000 1 <= prices[i] <= 10000 1 <= budget <= 1000000","solution":"def max_items(prices, budget): Returns the maximum number of different items that can be bought without exceeding the given budget. # Sort the prices in ascending order prices.sort() total_cost = 0 count = 0 for price in prices: if total_cost + price <= budget: total_cost += price count += 1 else: break return count"},{"question":"Given an array of integers, the task is to find if it is possible to make all the elements equal with at most one operation. In one operation, you can increment or decrement any one element of the array by 1. Example 1: Input: arr = [1, 2, 3] Output: No Explanation: It is not possible to make all elements equal with just one increment or decrement operation. Example 2: Input: arr = [3, 3, 3, 4] Output: Yes Explanation: By decrementing the last element by 1, we can make all elements equal. Example 3: Input: arr = [5, 5, 5, 5] Output: Yes Explanation: All elements are already equal. Your Task: You don’t need to read input or print anything. Implement the function `canMakeEqual()` that takes an array of integers `arr` as input parameter and returns a string “Yes” or “No” as described above. Expected Time Complexity: O(N) where N is the length of the array. Expected Auxiliary Space: O(1). Constraints: 1 <= length of the array <= 10^5 1 <= arr[i] <= 10^9","solution":"def canMakeEqual(arr): Determines if it is possible to make all the elements of the array equal with at most one increment or decrement operation. Parameters: arr (list of int): The input array of integers. Returns: str: \\"Yes\\" if it is possible to make all elements equal with at most one operation, otherwise \\"No\\". min_val = min(arr) max_val = max(arr) # If the difference between the max and min value is greater than 1, it\'s not possible to make all elements equal if max_val - min_val > 1: return \\"No\\" else: return \\"Yes\\""},{"question":"A company wants to distribute N candies to M children. Each candy can be given to any child, and each child can receive any number of candies. However, the company wants to distribute the candies such that the difference between the number of candies received by any two children is minimized. In other words, they want to ensure that no child feels significantly less fortunate than the other children. Find the minimum possible difference between the maximum number of candies received by any child and the minimum number of candies received by any child after the distribution. ------ Input Format ------ - The first line contains T denoting the number of test cases. Then the test cases follow. - The first line of each test case contains two integers N and M denoting the number of candies and the number of children respectively. ------ Output Format ------ For each test case, print a single line containing one integer denoting the minimum possible difference between the maximum and the minimum number of candies received by any child. ------ Constraints ------ 1 ≤ T ≤ 10^{4} 0 ≤ N ≤ 10^{5} 1 ≤ M ≤ 10^{5} ----- Sample Input 1 ------ 3 7 3 10 5 9 6 ----- Sample Output 1 ------ 1 0 1 ----- Explanation 1 ------ - Test Case 1: Distribute candies as {2, 2, 3}. The maximum number of candies received by any child is 3 and the minimum is 2. The difference is 3 - 2 = 1. - Test Case 2: Distribute candies as {2, 2, 2, 2, 2}. Every child receives an equal number of candies. The difference is 0. - Test Case 3: Distribute candies as {1, 1, 1, 2, 2, 2}. The maximum number of candies received by any child is 2 and the minimum is 1. The difference is 2 - 1 = 1.","solution":"def min_difference_in_candies(N, M): Function to find minimum possible difference between the maximum number of candies received by any child and the minimum number of candies received by any child. Parameters: N (int): The number of candies. M (int): The number of children. Returns: int: Minimum possible difference. if M == 0: return 0 # No children to distribute candies to return 1 if N % M != 0 else 0"},{"question":"You are given two strings, s1 and s2, each consisting only of lowercase English letters. Your task is to determine if s1 can be transformed into s2 using zero or more moves. In each move, you can select any character of s1 and replace it with any other lowercase English letter. Input The first line contains a single integer t (1 ≤ t ≤ 1000) — the number of test cases. The first line of each test case contains a string s1 (1 ≤ |s1| ≤ 10^5). The second line of each test case contains a string s2. It is guaranteed that the sum of the lengths of all strings in all test cases does not exceed 10^6. Output For each test case, print \\"YES\\" if s1 can be transformed into s2 and \\"NO\\" otherwise. Example Input 3 abc bca aabb bbaa xyz yyz Output YES YES NO Explanation In the first test case, \\"abc\\" can be transformed into \\"bca\\" by changing each character in one operation as needed. In the second test case, \\"aabb\\" can be transformed into \\"bbaa\\" by changing \'a\'s to \'b\'s and \'b\'s to \'a\'s accordingly. In the third test case, \\"xyz\\" cannot be transformed into \\"yyz\\" as \'y\' appears twice in s2 and only once in s1, making it impossible to achieve the desired result.","solution":"def can_transform(s1, s2): Determine if string s1 can be transformed into s2 using zero or more moves. return sorted(s1) == sorted(s2) def solve(test_cases): results = [] for s1, s2 in test_cases: if can_transform(s1, s2): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"A company is planning to organize a marathon event. Each runner will be timed and their results recorded as hours, minutes, and seconds. The event organizers need to calculate the total running time in seconds to evaluate completion times more efficiently. Write a function `convert_to_seconds(hours: int, minutes: int, seconds: int) -> int` that converts the provided running time into total seconds. Constraints: - 0 leq hours leq 23 - 0 leq minutes leq 59 - 0 leq seconds leq 59 Input Three integers `hours`, `minutes`, and `seconds` representing the running time durations. Output An integer representing the total running time calculated in seconds. # Example 1 **Input:** 2 15 30 **Output:** 8130 **Explanation:** The input represents 2 hours, 15 minutes, and 30 seconds. The total in seconds is (2 * 3600) + (15 * 60) + 30 = 8130 seconds. # Example 2 **Input:** 0 45 15 **Output:** 2715 **Explanation:** The input represents 0 hours, 45 minutes, and 15 seconds. The total in seconds is (0 * 3600) + (45 * 60) + 15 = 2715 seconds. # Example 3 **Input:** 1 0 0 **Output:** 3600 **Explanation:** The input represents 1 hour, 0 minutes, and 0 seconds. The total in seconds is (1 * 3600) + (0 * 60) + 0 = 3600 seconds.","solution":"def convert_to_seconds(hours: int, minutes: int, seconds: int) -> int: Converts the provided running time into total seconds. Parameters: hours (int): Number of hours (0 <= hours <= 23). minutes (int): Number of minutes (0 <= minutes <= 59). seconds (int): Number of seconds (0 <= seconds <= 59). Returns: int: Total time in seconds. return hours * 3600 + minutes * 60 + seconds"},{"question":"A company wants to award bonuses to its employees for their excellent work. Each employee has a rating that helps to decide their bonus. The company decides that: 1. Each employee must receive at least one unit of bonus. 2. An employee with a higher rating must receive more bonus units than their adjacent employees with lower ratings. Given the ratings of employees, calculate the minimum units of bonuses required to distribute satisfying the above conditions. -----Constraints----- - The number of employees (N) will be between 1 and 1000. - Each rating is an integer ranging from 1 to 1000. -----Input----- The input is given from Standard Input in the following format: N rating_1 rating_2 ... rating_N -----Output----- Print the minimum units of bonuses required. -----Sample Input----- 5 1 2 2 3 1 -----Sample Output----- 7 In this case, the bonus distribution could be [1, 2, 1, 2, 1], thus requiring a total of 7 bonus units.","solution":"def calculate_min_bonuses(N, ratings): Calculates the minimum units of bonuses required to distribute among employees based on their ratings. Args: N : int : number of employees ratings : list : list of ratings of employees Returns: int : minimum units of bonuses required # Initialize the list of bonuses with 1 for each employee bonuses = [1] * N # First pass: left to right for i in range(1, N): if ratings[i] > ratings[i - 1]: bonuses[i] = bonuses[i - 1] + 1 # Second pass: right to left for i in range(N - 2, -1, -1): if ratings[i] > ratings[i + 1]: bonuses[i] = max(bonuses[i], bonuses[i + 1] + 1) # Calculate and return the total minimum units of bonuses return sum(bonuses)"},{"question":"In a popular coding game, players are given a series of topological puzzles represented in the form of graphs. The task in each puzzle is to determine whether a given directed graph contains any cycles. A cycle in a directed graph is a path that starts and ends at the same vertex with at least one edge. For a given puzzle, return \\"YES\\" if the directed graph contains a cycle, and \\"NO\\" otherwise. INPUT: The first line contains an integer T denoting the number of test cases. The first line of each test case contains two integers N and M, where N is the number of vertices and M is the number of directed edges. The next M lines each contain two integers u and v, representing a directed edge from vertex u to vertex v. OUTPUT: For each test case output \\"YES\\" if there is a cycle in the graph, otherwise \\"NO\\". CONSTRAINTS: 1 ≤ T ≤ 5 1 ≤ N, M ≤ 1000 1 ≤ u, v ≤ N SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 2 3 2 1 2 2 3 SAMPLE OUTPUT YES NO","solution":"def is_cyclic_graph(N, edges): from collections import defaultdict, deque def has_cycle(adj_list, in_degree): queue = deque([node for node in range(1, N + 1) if in_degree[node] == 0]) processed = 0 while queue: current = queue.popleft() processed += 1 for neighbor in adj_list[current]: in_degree[neighbor] -= 1 if in_degree[neighbor] == 0: queue.append(neighbor) return processed != N adj_list = defaultdict(list) in_degree = {i: 0 for i in range(1, N + 1)} for u, v in edges: adj_list[u].append(v) in_degree[v] += 1 return \\"YES\\" if has_cycle(adj_list, in_degree) else \\"NO\\" def solve(test_cases): results = [] for N, M, edges in test_cases: results.append(is_cyclic_graph(N, edges)) return results # Reading input from standard input for testing \'\'\' T = int(input()) test_cases = [] for _ in range(T): N, M = map(int, input().split()) edges = [tuple(map(int, input().split())) for _ in range(M)] test_cases.append((N, M, edges)) results = solve(test_cases) for result in results: print(result) \'\'\'"},{"question":"------ Input ------ Edward loves to play with strings. He recently discovered a game where he needs to transform a given string. The game consists of the following operations: - Select any character in the string and change it to any other character. Edward wants to make the string a palindrome with the minimum number of operations. Given a string, help Edward find out the minimum number of operations required to make it a palindrome. ------ Input ------ A single line containing the string S of length N. ------ Output ------ Output a single integer, the minimum number of operations needed to make the string a palindrome. ------ Constraints ------ 1 ≤ N ≤ 10^{5} S consists of only lowercase English letters. ------ Sample Input 1 ------ abca ------ Sample Output 1 ------ 1 ------ Sample Input 2 ------ racecar ------ Sample Output 2 ------ 0","solution":"def min_operations_to_palindrome(S): Given a string S, returns the minimum number of operations needed to make it a palindrome. An operation is defined as changing any character to any other character. n = len(S) count = 0 for i in range(n // 2): if S[i] != S[n - i - 1]: count += 1 return count"},{"question":"There is a set of N lights arranged in a row. Each light can be either ON (represented by 1) or OFF (represented by 0). You can perform the following operation as many times as you want: Select any two adjacent lights and swap their states. For example, if the states are [1, 0], after the swap they become [0, 1]. Your task is to determine if it is possible to turn all the lights ON by performing any number of operations. If it is possible, print \\"YES\\"; otherwise, print \\"NO\\". Input: - The first line contains an integer T, the number of test cases. - Each of the next T lines contains an integer N followed by a binary string of length N, representing the initial states of the lights. Output: - For each test case, print \\"YES\\" if it is possible to turn all the lights ON, or \\"NO\\" if it is not possible. Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 100 SAMPLE INPUT 3 5 11000 6 001110 4 1110 SAMPLE OUTPUT YES YES YES","solution":"def can_turn_all_lights_on(test_cases): results = [] for n, lights in test_cases: # If there are any 0s in the string, it\'s impossible turn all lights on if \'0\' in lights: results.append(\\"NO\\") else: results.append(\\"YES\\") return results # Example usage: # T = 3 # test_cases = [(5, \\"11000\\"), (6, \\"001110\\"), (4, \\"1110\\")] # print(can_turn_all_lights_on(test_cases)) # Output: [\'NO\', \'NO\', \'YES\']"},{"question":"Determine the Greatest Common Divisor (GCD) of two given integers A and B. Example 1: Input: A = 15, B = 25 Output: 5 Explanation: GCD of 15 and 25 is 5. Example 2: Input: A = 20, B = 30 Output: 10 Explanation: GCD of 20 and 30 is 10. Your Task: You don\'t need to read input or print anything. Your task is to complete the function findGCD() which takes two integers A and B as input parameters and returns an integer, representing their greatest common divisor. Expected Time Complexity: O(log(min(A, B))) Expected Space Complexity: O(1) Constraints: 1 <= A, B <= 100000","solution":"def findGCD(A, B): Returns the greatest common divisor of A and B. while B: A, B = B, A % B return A"},{"question":"Given a list of integers, write a function `most_frequent_element` that returns the element that appears most frequently in the list. If there are multiple elements with the highest frequency, return the one that appears first in the list. For example: ```python most_frequent_element([1, 3, 2, 1, 4, 1]) # should return 1 most_frequent_element([5, 5, 6, 6, 7, 7]) # should return 5 ```","solution":"def most_frequent_element(lst): Returns the element that appears most frequently in the list. If there are multiple elements with the highest frequency, returns the one that appears first in the list. Args: lst (list): List of integers. Returns: int: The most frequent element. from collections import Counter count = Counter(lst) max_freq = max(count.values()) for element in lst: if count[element] == max_freq: return element"},{"question":"Suppose there is a hidden sequence of n numbers, s1, s2, ..., sn, where each si is a positive integer between 1 and n, inclusively. The objective is to deduce this sequence by performing a series of queries. In each query, you provide an integer x (1 ≤ x ≤ n) and get a response y which is defined as the number of elements in the hidden sequence greater than or equal to x. Your goal is to reconstruct the original sequence with the minimum number of queries, and you may query at most 2n times. Input Description The first line contains a single integer n (1 ≤ n ≤ 5000) — the length of the hidden sequence. Output Description When your program is ready to print the answer, print a single line containing `!`, followed by the n integers representing the hidden sequence. Ensure that the sequence numbers are space-separated. Interaction To ask a query, print a line with `? x`, where x is the integer you want to query for. After printing the query, flush the output. After printing a query, read a single integer response y, which represents the number of elements in the hidden sequence that are greater than or equal to x. Note: You cannot ask the same query more than once. If you ask a duplicate query or ask more than 2n queries, you will immediately receive `-1` as a result for any further input, and the program should terminate. Examples # Input ``` 5 ``` # Simulated Hidden Sequence ``` 3 1 4 1 2 ``` # Possible Interaction ``` ? 1 5 ? 2 3 ? 3 2 ? 4 1 ? 5 0 ! 3 1 4 1 2 ``` # Explanation - The first query `? 1` responds with `5`, indicating that all elements are ≥ 1. - The second query `? 2` responds with `3`, indicating that three elements are ≥ 2. - The third query `? 3` responds with `2`, indicating that two elements are ≥ 3. - The fourth query `? 4` responds with `1`, indicating that one element is ≥ 4. - The fifth query `? 5` responds with `0`, indicating that no elements are ≥ 5. Finally, construct the sequence `[3, 1, 4, 1, 2]` using the gathered information from the queries.","solution":"def reconstruct_sequence(n): import sys input = sys.stdin.read data = input().split() def query(x): print(f\\"? {x}\\") sys.stdout.flush() y = data.pop(0) return int(y) # Array to store the discovered sequence result = [0] * n # Array to store the counts for each query value query_results = [] for i in range(1, n + 1): query_results.append(query(i)) # To find the value of each position in the sequence for i in range(n - 1): result[i] = query_results[i] - query_results[i + 1] # The last element would be 1 since >= n only guarantees 1 element result[-1] = 1 # Now, we need to fill the actual values in the sequence for i in range(n - 2, -1, -1): result[i] += result[i + 1] print(\\"! \\" + \\" \\".join(map(str, result))) sys.stdout.flush()"},{"question":"Andrey continues his exploration of bitsets and now he is interested in merging multiple bitsets into one. He has a list of m bitsets, each of length n. He wants to merge these bitsets into a single bitset with the following rule: - The resulting bitset should have a bit at a specific position set to 1 if, and only if, at least k out of m bitsets have a 1 at that position. Help Andrey compute the final merged bitset by implementing this rule. # Input The first line contains three integers n, m, and k (1 ≤ n, m ≤ 10^5, 1 ≤ k ≤ m) denoting the length of each bitset, the number of bitsets, and the threshold for merging respectively. The following m lines each contain a bitset of length n. Each bitset is represented as a string of \'0\'s and \'1\'s. # Output Output a single string representing the merged bitset of length n. # Example Input ``` 5 3 2 11010 01101 10101 ``` Output ``` 11101 ``` # Note In the given example, the final merged bitset is calculated as follows: - For the first bit position: 2 out of 3 bitsets have a 1, so the merged bitset has a 1 at the first position. - For the second bit position: 2 out of 3 bitsets have a 1, so the merged bitset has a 1 at the second position. - For the third bit position: 1 out of 3 bitsets have a 1, which is less than the threshold of 2, so the merged bitset has a 0 at the third position. - For the fourth bit position: 2 out of 3 bitsets have a 1, so the merged bitset has a 1 at the fourth position. - For the fifth bit position: 2 out of 3 bitsets have a 1, so the merged bitset has a 1 at the fifth position.","solution":"def merge_bitsets(n, m, k, bitsets): Merges multiple bitsets according to the rule. Parameters: n (int): The length of each bitset. m (int): The number of bitsets. k (int): The threshold for merging. bitsets (list of str): The list of bitsets. Returns: str: The merged bitset. assert len(bitsets) == m for bitset in bitsets: assert len(bitset) == n # Initialize a list to count ones in each position count_ones = [0] * n # Count ones for each bit position for bitset in bitsets: for i in range(n): count_ones[i] += int(bitset[i]) # Generate the merged bitset merged_bitset = \'\'.join([\'1\' if count_ones[i] >= k else \'0\' for i in range(n)]) return merged_bitset"},{"question":"Write a function that takes a string of words separated by spaces, and returns the same string with all words that are five letters or longer reversed. Examples: - `\\"Welcome to the coding challenge\\"` would become `\\"emocleW to the gnidoc egnellahc\\"` - `\\"This is an example of a test string\\"` would become `\\"This is an elpmaxe of a test gnirts\\"` Good luck!","solution":"def reverse_long_words(sentence): Takes a string of words separated by spaces, and returns the same string with all words that are five letters or longer reversed. words = sentence.split() for i in range(len(words)): if len(words[i]) >= 5: words[i] = words[i][::-1] return \' \'.join(words)"},{"question":"Alice and Bob are playing a game of distributing candies. They have a total of `N` candies. Both of them can take a minimum of `1` candy and maximum of `K` candies in a single turn. The player who cannot make a move loses. The game starts with Alice and then they play alternately. Alice and Bob play optimally to win the game. Determine if Alice will win, given the total number of candies `N` and the maximum number of candies `K` one can take in a turn. -----Input:----- - The first line contains a single integer `T` representing the number of test cases. - The next `T` lines each contain two integers `N` and `K`. -----Output:----- - For each test case, output a single line: \\"Alice\\" if Alice is guaranteed to win assuming both play optimally, otherwise \\"Bob\\". -----Constraints:----- - `1 ≤ T ≤ 1000` - `1 ≤ N ≤ 1000` - `1 ≤ K ≤ 100` -----Sample Input:----- 3 10 3 5 4 7 2 -----Sample Output:----- Alice Bob Alice -----Explanation:----- For the first test case, with `N = 10` and `K = 3`, Alice can take 1, 2, or 3 candies. If she takes 3 candies first, then Bob is left with 7 candies. Bob can take 1, 2 or 3 candies, but in all cases, Alice can always make a move that leaves Bob in an unfavorable position. Hence, as they play optimally, Alice wins. For the second test case, with `N = 5` and `K = 4`, no matter how many candies Alice takes (1 to 4), Bob can always take the remaining candies (in his next move), making Alice lose. For the third test case, with `N = 7` and `K = 2`, Alice can strategize to always remain in an advantageous position and win.","solution":"def can_alice_win(N, K): # Use Dynamic Programming to determine if Alice can guarantee a win dp = [False] * (N + 1) # Fill the DP table for candies in range(1, N + 1): for take in range(1, K + 1): if candies - take >= 0 and not dp[candies - take]: dp[candies] = True break return \\"Alice\\" if dp[N] else \\"Bob\\" def solve(test_cases): results = [] for N, K in test_cases: results.append(can_alice_win(N, K)) return results def main(): import sys input = sys.stdin.read data = input().strip().split() T = int(data[0]) test_cases = [] index = 1 for _ in range(T): N = int(data[index]) K = int(data[index+1]) test_cases.append((N, K)) index += 2 results = solve(test_cases) for result in results: print(result)"},{"question":"In XYZ city, there are several parks connected by walkways. The parks are represented as nodes and the walkways as edges in a graph. You are given a list of parks and the walkways that directly connect them. Your task is to determine the shortest number of walkways you need to traverse to travel from one park to another. If it is not possible to travel between the parks, return -1. Input: The first line contains an integer T, the number of test cases. For each test case, the first line contains two integers N (number of parks) and M (number of walkways). The next M lines each contain two integers u and v, representing a walkway connecting parks u and v. The final line of each test case contains two integers A and B, representing the starting and ending park respectively. Output: For each test case, print the minimum number of walkways required to travel from park A to park B. If there is no valid path, print -1. Constraints: 1 ≤ T ≤ 10 1 ≤ N ≤ 1000 0 ≤ M ≤ 10000 1 ≤ u, v, A, B ≤ N SAMPLE INPUT 2 4 4 1 2 2 3 3 4 4 2 1 3 5 3 1 2 2 3 3 4 1 5 SAMPLE OUTPUT 2 -1 Explanation In the first test case: Parks and walkways are represented as: 1 - 2, 2 - 3, 3 - 4, 4 - 2 The shortest path from park 1 to park 3 is through parks 1 -> 2 -> 3, requiring 2 walkways. In the second test case: The parks and walkways are represented as: 1 - 2, 2 - 3, 3 - 4 There is no path connecting park 1 to park 5, so the output is -1.","solution":"from collections import deque, defaultdict def shortest_walkways(num_cases, cases): results = [] for case in cases: N, M, edges, A, B = case graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) queue = deque([(A, 0)]) # (current node, distance) visited = set([A]) found = False while queue: node, dist = queue.popleft() if node == B: results.append(dist) found = True break for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, dist + 1)) if not found: results.append(-1) return results # The function to parse the input def parse_input(input_str): lines = input_str.strip().split(\\"n\\") T = int(lines[0]) index = 1 cases = [] for _ in range(T): N, M = map(int, lines[index].split()) index += 1 edges = [] for _ in range(M): u, v = map(int, lines[index].split()) edges.append((u, v)) index += 1 A, B = map(int, lines[index].split()) index += 1 cases.append((N, M, edges, A, B)) return T, cases"},{"question":"Given a list of integers, you are tasked with creating a new list where each element in the new list is the product of all the elements in the original list except the one at the current index. Input The input consists of a single line containing a space-separated list of integers `a_1, a_2, ..., a_n` where `1 ≤ n ≤ 100` and `-100 ≤ a_i ≤ 100`. Output Output the new list of integers in the same format. Example Input: 1 2 3 4 Output: 24 12 8 6 Note In the given example, the original list is `[1, 2, 3, 4]`. - The product for the first index (excluding the first element, 1) is `2 * 3 * 4 = 24`. - The product for the second index (excluding the second element, 2) is `1 * 3 * 4 = 12`. - The product for the third index (excluding the third element, 3) is `1 * 2 * 4 = 8`. - The product for the fourth index (excluding the fourth element, 4) is `1 * 2 * 3 = 6`. Thus, the output is `24 12 8 6`.","solution":"def product_except_self(nums): Returns a list such that each element is the product of all other elements except itself. n = len(nums) if n == 0: return [] # Initialize the result array with 1 result = [1] * n # Calculate the left products left_product = 1 for i in range(n): result[i] = left_product left_product *= nums[i] # Calculate the right products and update the result array right_product = 1 for i in range(n - 1, -1, -1): result[i] *= right_product right_product *= nums[i] return result def input_to_output(input_string): nums = list(map(int, input_string.split())) result = product_except_self(nums) return \' \'.join(map(str, result))"},{"question":"Jenny has a garden with different types of flowers. She wants to categorize them based on their blooming season. Each flower can only bloom in one of the four seasons: Spring, Summer, Autumn, or Winter. Jenny has a list of flowers with the day of the year they start blooming (1 to 365). She needs your help to determine which season each flower belongs to. Here\'s the simplified division of seasons: - Spring: 60 to 151 (March 1 to May 31) - Summer: 152 to 243 (June 1 to August 31) - Autumn: 244 to 334 (September 1 to November 30) - Winter: 335 to 59 (December 1 to February 28/29 in leap years) Write a program that takes the list of flowers with their blooming day of the year and outputs their corresponding seasons. -----Input----- The first line contains an integer, n (1 ≤ n ≤ 100), the number of flowers. The next n lines contain an integer, d (1 ≤ d ≤ 365), representing the day of the year each flower starts blooming. -----Output----- Print n lines, each containing one of the four seasons (\\"Spring\\", \\"Summer\\", \\"Autumn\\", \\"Winter\\") corresponding to each flower\'s blooming day. -----Examples----- Input 4 100 200 300 50 Output Spring Summer Autumn Winter -----Note----- The input guarantees that the days are valid and do not cross into the next year. Remember to account for the entire period specified for Winter which includes days at the beginning and end of the year.","solution":"def determine_season(day): Determines the season for a given day of the year. Args: day (int): The day of the year (1 to 365). Returns: str: The season corresponding to the given day. if 60 <= day <= 151: return \\"Spring\\" elif 152 <= day <= 243: return \\"Summer\\" elif 244 <= day <= 334: return \\"Autumn\\" else: return \\"Winter\\" def categorize_flowers(flower_days): Categorizes flowers based on their blooming day of the year. Args: flower_days (list of int): List of days of the year when flowers start blooming. Returns: list of str: List of seasons corresponding to each flower\'s blooming day. return [determine_season(day) for day in flower_days]"},{"question":"# Task You have a string `s` of length `n` consisting of digits from \'0\' to \'9\'. You need to find the minimum number of deletions required to make the string s a palindrome. A palindrome is a string that reads the same forward and backward. # Example For `s = \\"1433541\\"`, the result should be `1`. ``` By deleting the second \'2\', the string becomes \\"143541\\" which is a palindrome. ``` For `s = \\"12345\\"`, the result should be `4`. ``` By deleting \'1\', \'3\', \'4\', and \'5\', the remaining string \\"2\\" is a palindrome. ``` # Input/Output - `[input]` string `s` A string of length `n` consisting of digits from \'0\' to \'9\'. `1 ≤ s.length ≤ 1000` - `[output]` an integer The minimum number of deletions required to make the string a palindrome.","solution":"def min_deletions_to_make_palindrome(s: str) -> int: Returns the minimum number of deletions required to make the string s a palindrome. n = len(s) # Create a table to store the length of longest palindromic subsequence L = [[0] * n for _ in range(n)] # Strings of length 1 are palindromes of length 1 for i in range(n): L[i][i] = 1 # Build the table for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: L[i][j] = 2 elif s[i] == s[j]: L[i][j] = L[i + 1][j - 1] + 2 else: L[i][j] = max(L[i][j - 1], L[i + 1][j]) # The length of the longest palindromic subsequence lps = L[0][n - 1] # Minimum deletions to make the string a palindrome return n - lps"},{"question":"Jason is playing a strange game called SumCombo. In this game, he has a collection of n unique integers, which he can combine in specific ways to form numbers. Jason wants to explore the sums of selected subsets of these numbers. Specifically, Jason has decided to pick k integers at a time from his collection and calculate the sum of these integers. He wants to know the maximum possible sum and the minimum possible sum he can obtain by choosing exactly k integers from his collection. Can you help Jason find these two sums? -----Input----- The input consists of a single test case. The first line contains two integers n and k denoting the number of integers in Jason\'s collection (1 le n le 100) and the number of integers to be chosen (1 le k le n). The second line contains n distinct integers a_i (-1000 le a_i le 1000) - the numbers in Jason’s collection. -----Output----- Output two integers: the maximum sum and the minimum sum Jason can obtain by choosing exactly k integers from his collection. -----Examples----- Sample Input 1: 5 3 1 2 3 4 5 Sample Output 1: 12 6 Sample Input 2: 4 2 -1 2 -3 4 Sample Output 2: 6 -4 Sample Input 3: 6 4 -5 -3 -1 1 3 5 Sample Output 3: 8 -8","solution":"def find_max_min_sums(n, k, nums): This function calculates the maximum and minimum possible sums by choosing exactly k integers from the given list of numbers. Parameters: n (int): The number of integers in the collection. k (int): The number of integers to choose. nums (list of int): The list of integers in the collection. Returns: tuple (int, int): The maximum and minimum possible sums. nums.sort() max_sum = sum(nums[-k:]) # sum of the largest k numbers min_sum = sum(nums[:k]) # sum of the smallest k numbers return max_sum, min_sum # Example runs: print(find_max_min_sums(5, 3, [1, 2, 3, 4, 5])) # Output: (12, 6) print(find_max_min_sums(4, 2, [-1, 2, -3, 4])) # Output: (6, -4) print(find_max_min_sums(6, 4, [-5, -3, -1, 1, 3, 5])) # Output: (8, -8)"},{"question":"Write a function that takes a string of text as input and returns a dictionary where the keys are the unique characters from the string (excluding spaces and special characters), and the values are the number of times each character appears in the string. # Examples 1. Input: `\\"Hello World!\\"` Output: `{\'H\': 1, \'e\': 1, \'l\': 3, \'o\': 2, \'W\': 1, \'r\': 1, \'d\': 1}` 2. Input: `\\"coding\\"` Output: `{\'c\': 1, \'o\': 1, \'d\': 1, \'i\': 1, \'n\': 1, \'g\': 1}` # Notes - Special characters should not be counted. - The function should be case sensitive, i.e., `\'A\'` and `\'a\'` should be considered different characters. - Spaces should be ignored.","solution":"import re from collections import Counter def character_count(text): Takes a string of text and returns a dictionary where the keys are unique characters (excluding spaces and special characters) and the values are the number of times each character appears in the string. # Remove spaces and special characters using regex filtered_text = re.sub(r\'[^a-zA-Z0-9]\', \'\', text) # Count occurrence of each character char_counts = Counter(filtered_text) return dict(char_counts)"},{"question":"You are given a sequence of integers and you can perform the following operation any (possibly zero) number of times: Select any subarray and reverse it. Determine if it is possible to sort the entire sequence in non-decreasing order by performing the described operation. -----Input----- The first line contains a single integer t (1 le t le 10^4) — the number of test cases. Then the test cases follow. Each test case consists of two lines. The first line contains a single integer n (1 le n le 10^5) — the length of the sequence. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 10^9) — the elements of the sequence. It is guaranteed that the sum of n for all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print \\"YES\\" if it is possible to sort the sequence in non-decreasing order, and \\"NO\\" otherwise. -----Examples----- Input 4 5 4 3 2 1 5 3 1 2 3 4 2 1 4 3 6 3 1 2 5 4 6 Output YES YES NO NO -----Note----- In the first test case, one possible solution is to reverse the subarray containing the first four elements: [1, 2, 3, 4, 5]. In the second test case, the sequence is already sorted. In the third test case, it is not possible to sort the array using the described operation. In the fourth test case, no matter how you reverse subarrays, it is not possible to sort the entire sequence.","solution":"def can_sort_by_reversing_subarray(arr): Determines if it is possible to sort the entire sequence in non-decreasing order by performing the described operation, which is reversing any subarray. n = len(arr) # Create a sorted version of the array sorted_arr = sorted(arr) # Find the first mismatch start = 0 while start < n and arr[start] == sorted_arr[start]: start += 1 # Find the last mismatch end = n - 1 while end >= 0 and arr[end] == sorted_arr[end]: end -= 1 # If no mismatch, array is already sorted or single element array if start >= end: return \\"YES\\" # Reverse the suspected sub-array and check if it matches the sorted array if arr[start:end+1][::-1] == sorted_arr[start:end+1]: return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): Process all the test cases and return the result for each case. results = [] for n, arr in test_cases: results.append(can_sort_by_reversing_subarray(arr)) return results"},{"question":"You are given a string **s** consisting of lowercase English letters. You need to execute **q** queries, each of which can be one of the following: 1. **UPDATE i c** — replace the character at the ith position (0-based indexing) of the string **s** with the character **c**. 2. **RANGE_LEFTMOST c l r** — find the leftmost position of character **c** in the substring of **s** from index **l** to **r** (both inclusive, 0-based indexing). If the character is not found within the specified range, return -1. You need to print the result for each **RANGE_LEFTMOST** query. # Input The first line contains the initial string **s** (1 ≤ |s| ≤ 105). The second line contains an integer **q** (1 ≤ q ≤ 2·105) — the number of queries. The next **q** lines contain queries, each of which can be one of the two types described above: - \\"1 i c\\" — an **UPDATE** query that replaces the character at index **i** with **c**. - \\"2 c l r\\" — a **RANGE_LEFTMOST** query that finds the leftmost occurrence of character **c** in the substring **s[l...r]**. # Output For each **RANGE_LEFTMOST** query, print the position of the character **c** in the specified range, or -1 if it doesn\'t exist. # Example Input ``` abcde 5 2 c 1 4 1 2 x 2 c 1 4 1 1 y 2 y 0 2 ``` Output ``` 2 -1 1 ``` # Explanation 1. The initial string **s** is \\"abcde\\". 2. The first query is `2 c 1 4`, which asks for the leftmost occurrence of \'c\' in the substring \\"bcde\\". The position is 2 (0-based index). 3. The second query is `1 2 x`, which updates the string **s** to \\"abxde\\". 4. The third query is `2 c 1 4`, which now asks for the leftmost occurrence of \'c\' in the substring \\"bxde\\". The character \'c\' is no longer in the range, so the result is -1. 5. The fourth query is `1 1 y`, which updates the string **s** to \\"ayxde\\". 6. The fifth query is `2 y 0 2`, which asks for the leftmost occurrence of \'y\' in the substring \\"ayx\\". The position is 1 (0-based index).","solution":"def process_queries(s, queries): s = list(s) result = [] for query in queries: parts = query.split() if parts[0] == \'1\': i, c = int(parts[1]), parts[2] s[i] = c elif parts[0] == \'2\': c, l, r = parts[1], int(parts[2]), int(parts[3]) found = -1 for index in range(l, r + 1): if s[index] == c: found = index break result.append(found) return result # Example usage: s = \\"abcde\\" queries = [ \\"2 c 1 4\\", \\"1 2 x\\", \\"2 c 1 4\\", \\"1 1 y\\", \\"2 y 0 2\\" ] print(process_queries(s, queries)) # Output should be [2, -1, 1]"},{"question":"In a secret lab, scientists have discovered a new type of bacteria that follows a unique reproduction pattern. The bacteria multiply in a mixed manner: for every k bacteria, exactly 1 newly born bacteria dies before the next cycle starts. Thus, out of every k bacteria, only k-1 survive to the next cycle. Additionally, the bacteria population can never decrease to zero. You have been tasked to create a simulation to determine if a certain initial population of bacteria can sustain itself indefinitely. Given the initial population S and the survival factor k, determine if the bacteria population can sustain itself indefinitely or if it will eventually die out. Each test case in this problem consists of N queries. Constraints: * 1 ≤ N ≤ 300 * 1 ≤ S, k ≤ 10^18 * All values in input are integers. Input: The input is given from Standard Input in the following format: ``` N S_1 k_1 S_2 k_2 : S_N k_N ``` For the i-th query, S = S_i, k = k_i. Output: Print N lines. The i-th line should contain `Yes` if the bacteria can sustain itself indefinitely in the i-th query; `No` otherwise. Examples: Input ``` 5 5 3 10 2 2 2 1000000000000000000 999999999999999999 999999999999999999 1000000000000000000 ``` Output ``` Yes No No Yes No ```","solution":"def can_sustain_forever(initial_population, k): Determines if given initial_population (S) with survival factor (k) can sustain itself indefinitely. Returns \'Yes\' if it can, otherwise \'No\'. # If every k bacteria, only k-1 survive, check if there are k bacteria if initial_population % (k-1) == 0: return \\"No\\" # if they reduce to exact numbers that can eventually be zero, it fails if initial_population < k or k <= 1: if initial_population > 1: return \\"Yes\\" else: return \\"No\\" return \\"Yes\\" def process_bacteria_queries(queries): Processes multiple queries to determine if each setup can sustain bacteria forever. Each query is a tuple of initial_population and survival_factor. Returns a list of \'Yes\' or \'No\' strings. results = [] for S, k in queries: result = can_sustain_forever(S, k) results.append(result) return results if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() N = int(data[0]) queries = [(int(data[i * 2 + 1]), int(data[i * 2 + 2])) for i in range(N)] results = process_bacteria_queries(queries) for result in results: print(result)"},{"question":"# Task In this problem, we\'ll define a triangular number sequence and your task is to find the nth triangular number. A triangular number or triangle number is a number that can form an equilateral triangle. The nth triangular number is the number of dots in the triangular arrangement with n dots on a side. For example, the first five triangular numbers are: - T1 = 1 (a single dot) - T2 = 3 (a triangle with 2 dots on each side) - T3 = 6 (a triangle with 3 dots on each side) - T4 = 10 (a triangle with 4 dots on each side) - T5 = 15 (a triangle with 5 dots on each side) # Example For `n = 1`, the output should be `1`; For `n = 3`, the output should be `6`; For `n = 5`, the output should be `15`. # Input/Output - `[input]` integer `n` Constraints: `1 ≤ n ≤ 10000.` - `[output]` an integer The nth triangular number.","solution":"def triangular_number(n): Returns the nth triangular number. return n * (n + 1) // 2"},{"question":"input N p_1 c_1 p_2 c_2 vdots p_{N-1} c_{N-1} output Print the minimum number of changes needed to ensure the tree remains rooted at node 1 while preserving the tree structure. Example Input 4 1 2 1 3 3 4 Output 1","solution":"def min_changes_to_root_tree(N, edges): Returns the minimum number of changes needed to ensure the tree remains rooted at node 1. changes = 0 for parent, child in edges: if parent != 1: changes += 1 return changes"},{"question":"User Bob enjoys puzzles involving digits. Given a positive integer, Bob wants to determine the smallest number that can be formed by rearranging the digits of the given number. Additionally, if the given number is already the smallest possible permutation, Bob wants to return the same number. -----Input----- A single line containing a positive integer n (1 ≤ n ≤ 10^9). -----Output----- Output a single integer representing the smallest number that can be formed by rearranging the digits of the given number. -----Examples----- Input 34021 Output 10234 Input 111332 Output 111233 -----Note----- In the first example, the digits {3, 4, 0, 2, 1} can be rearranged to form several numbers. The smallest number is 10234 when the digits are correctly ordered. In the second example, the digits {1, 1, 1, 3, 3, 2} can be rearranged, but 111233 is already the smallest possible permutation.","solution":"def smallest_permutation(n): Returns the smallest number that can be formed by rearranging the digits of the given number n. If n is already the smallest permutation, returns n. digits = sorted(str(n)) # Find the first non-zero digit to avoid leading zeros in the result for i, digit in enumerate(digits): if digit != \'0\': # Swap the first non-zero digit with the leading zero (if any) digits[0], digits[i] = digits[i], digits[0] break return int(\'\'.join(digits))"},{"question":"Create a function that accepts a single integer parameter `n` and returns a 2D array (list of lists) representing an `n x n` multiplication table. Example 1: Input: n = 3 Output: [[1, 2, 3], [2, 4, 6], [3, 6, 9]] Example 2: Input: n = 5 Output: [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]] Your Task: You do not need to read input or print anything. Your task is to complete the function `createMultiplicationTable()` which takes an integer `n` as an input parameter and returns a 2D array representing the multiplication table. Expected Time Complexity: O(n^2) Expected Space Complexity: O(n^2) Constraints: 1 ≤ n ≤ 20","solution":"def createMultiplicationTable(n): Creates an n x n multiplication table. table = [] for i in range(1, n+1): row = [] for j in range(1, n+1): row.append(i * j) table.append(row) return table"},{"question":"Alice is working on a string manipulation problem. She has a string `S` consisting of N lowercase English letters. Alice wants to find the smallest lexicographical rotation of `S` and print it. A rotation of a string is obtained by moving some prefix of the string to the end while keeping the remaining part unchanged. For example, the rotations of the string \\"abc\\" are \\"abc\\", \\"bca\\", and \\"cab\\". Write a program to help Alice find and print the smallest lexicographical rotation of `S`. ------ Input Format ------ - The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows. - The first line of each test case contains the string `S`. ------ Output Format ------ For each test case, print a single line containing the smallest lexicographical rotation of `S`. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 10^5 The sum of all lengths of strings in a single test is at most 10^6. ------ Sample Input 1 ------ 3 bca abc cab ------ Sample Output 1 ------ abc abc abc ------ Explanation 1 ------ Test case `1`: The rotations are \\"bca\\", \\"cab\\", and \\"abc\\". The smallest lexicographical rotation is \\"abc\\".","solution":"def smallest_lexicographical_rotation(S): Finds the smallest lexicographical rotation of S. doubled_S = S + S N = len(S) rotations = [doubled_S[i:i+N] for i in range(N)] return min(rotations) def process_test_cases(T, cases): results = [] for i in range(T): results.append(smallest_lexicographical_rotation(cases[i])) return results"},{"question":"Anita loves to eat chocolates and she buys them in bulk once a month. Each chocolate costs C rupees and she has D rupees saved to buy chocolates this month. Anita also needs to save a minimum of S rupees for emergencies that she won\'t spend on chocolates. Can you determine the maximum number of chocolates Anita can buy this month without spending her emergency savings? ------ Input Format ------ - The first line will contain T - the number of test cases. Then the test cases follow. - Each test case consists of three integers C, D, S - the cost of each chocolate, the amount of money Anita has, and the required minimum amount of savings respectively. ------ Output Format ------ For each test case, output the maximum number of chocolates Anita can buy. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ C, D, S ≤ 10^{5} ------ Sample Input 1 ------ 3 10 100 20 5 50 10 2 30 5 ------ Sample Output 1 ------ 8 8 12 ------ explanation 1 ------ Test Case 1: Anita has 100 rupees and needs to save 20 rupees. Therefore, she can spend 100 - 20 = 80 rupees on chocolates. Each chocolate costs 10 rupees, so she can buy 80 / 10 = 8 chocolates. Test Case 2: Anita has 50 rupees and needs to save 10 rupees. Therefore, she can spend 50 - 10 = 40 rupees on chocolates. Each chocolate costs 5 rupees, so she can buy 40 / 5 = 8 chocolates. Test Case 3: Anita has 30 rupees and needs to save 5 rupees. Therefore, she can spend 30 - 5 = 25 rupees on chocolates. Each chocolate costs 2 rupees, so she can buy 25 / 2 = 12 chocolates.","solution":"def maximum_chocolates(T, test_cases): Returns the maximum number of chocolates Anita can buy for each test case. :param T: int, number of test cases :param test_cases: list of tuples, where each tuple contains three integers C, D, S :return: list of integers, maximum number of chocolates for each test case results = [] for C, D, S in test_cases: if D < S: results.append(0) else: max_chocolates = (D - S) // C results.append(max_chocolates) return results"},{"question":"You are given a list of integers. Write a function that finds and returns the length of the longest contiguous subsequence such that the difference between the maximum and minimum elements in this subsequence is at most one. Input An integer n (1 ≤ n ≤ 100,000) representing the number of elements in the list. A list of n integers (-1,000,000 ≤ each integer ≤ 1,000,000). Output An integer representing the length of the longest contiguous subsequence that meets the described condition. Example Input 7 1 2 2 2 1 3 4 Output 5 (Note: The longest contiguous subsequence where the difference between the maximum and minimum elements is at most one is [1, 2, 2, 2, 1], which has a length of 5.)","solution":"def longest_contiguous_subsequence(arr): Returns the length of the longest contiguous subsequence such that the difference between the maximum and minimum elements in this subsequence is at most one. if not arr: return 0 max_len = 1 current_len = 1 min_val = arr[0] max_val = arr[0] for i in range(1, len(arr)): min_val = min(min_val, arr[i]) max_val = max(max_val, arr[i]) if max_val - min_val <= 1: current_len += 1 else: min_val = arr[i] max_val = arr[i] current_len = 1 for j in range(i - 1, -1, -1): if abs(arr[i] - arr[j]) <= 1: current_len += 1 min_val = min(min_val, arr[j]) max_val = max(max_val, arr[j]) else: break max_len = max(max_len, current_len) return max_len"},{"question":"Write a function `calculate_grade` that computes the final grade for a student based on their scores in assignments, projects, and exams. The function should take three arguments: `assignments`, `projects`, and `exams`, each representing a list of scores (integers). The final grade is calculated as: - 40% of the average assignment score - 30% of the average project score - 30% of the average exam score Return the grade category based on the final grade: - \\"A\\" for a final grade >= 90 - \\"B\\" for a final grade >= 80 and < 90 - \\"C\\" for a final grade >= 70 and < 80 - \\"D\\" for a final grade >= 60 and < 70 - \\"F\\" for a final grade < 60","solution":"def calculate_grade(assignments, projects, exams): Calculates the final grade based on assignments, projects, and exams scores. - assignments: list of assignment scores - projects: list of project scores - exams: list of exam scores Returns the grade category: - \\"A\\" for a final grade >= 90 - \\"B\\" for a final grade >= 80 and < 90 - \\"C\\" for a final grade >= 70 and < 80 - \\"D\\" for a final grade >= 60 and < 70 - \\"F\\" for a final grade < 60 avg_assignments = sum(assignments) / len(assignments) avg_projects = sum(projects) / len(projects) avg_exams = sum(exams) / len(exams) final_grade = (avg_assignments * 0.4) + (avg_projects * 0.3) + (avg_exams * 0.3) if final_grade >= 90: return \\"A\\" elif final_grade >= 80: return \\"B\\" elif final_grade >= 70: return \\"C\\" elif final_grade >= 60: return \\"D\\" else: return \\"F\\""},{"question":"The environmental agency of GreenCity is planning to analyze the water consumption pattern of its citizens. They have decided to use a new algorithm to calculate the efficiency of water usage based on the average daily consumption over a period of days. To gain insights, they need to calculate the weighted average daily consumption, where the consumption on some specific days is given more importance than on other days. To do this, they provide the consumption values over `n` days along with a weight for each day. Write a program that calculates the weighted average daily consumption and rounds it to six decimal places. -----Input----- The first line of input contains an integer `n` (1 ≤ n ≤ 1000) — the number of days. The second line contains `n` integers c1, c2, ..., cn (0 ≤ ci ≤ 10000) — consumption values for each of the `n` days. The third line contains `n` integers w1, w2, ..., wn (0 ≤ wi ≤ 100) — weights for each of the `n` days. -----Output----- Output a single number, the weighted average daily consumption rounded to six decimal places. -----Examples----- Input 3 10 20 30 1 2 3 Output 23.333333","solution":"def weighted_average(n, consumptions, weights): total_weighted_sum = sum(c * w for c, w in zip(consumptions, weights)) total_weight = sum(weights) weighted_avg = total_weighted_sum / total_weight return round(weighted_avg, 6)"},{"question":"You are given a number #a#. You are allowed to multiply #a# by any prime number in each step. Your goal is to transform #a# into another given number #b# using the minimum number of operations. If it\'s not possible to transform #a# into #b#, return -1. Write a function `min_operations(a, b)` that takes two integers, `a` and `b`, and returns the minimum number of operations required to transform `a` into `b` by multiplying by prime numbers, or -1 if it\'s impossible. -----Function Signature----- ```python def min_operations(a: int, b: int) -> int: pass ``` -----Input----- Integers #a# and #b# (1 le a, b le 10^9) — the initial number and the target number respectively. -----Output----- Return an integer indicating the minimum number of operations needed to transform `a` into `b`, or -1 if it\'s not possible. -----Examples----- Input: `a = 5, b = 30` Output: `2` Explanation: 5 can be transformed to 30 by multiplying by 3 (5 * 3 = 15) and then by 2 (15 * 2 = 30). Input: `a = 7, b = 49` Output: `1` Explanation: 7 can be transformed to 49 by multiplying by 7 (7 * 7 = 49). Input: `a = 10, b = 15` Output: `-1` Explanation: It is not possible to transform 10 into 15 by multiplying with any prime numbers. -----Note----- You may assume that the function to check if a number is prime is already implemented.","solution":"def min_operations(a: int, b: int) -> int: Returns the minimum number of operations required to transform a into b by multiplying by prime numbers, or -1 if it\'s impossible. def prime_factors(n): Returns the prime factors of n factors = {} d = 2 while d * d <= n: while (n % d) == 0: if d in factors: factors[d] += 1 else: factors[d] = 1 n //= d d += 1 if n > 1: factors[n] = 1 return factors if b % a != 0: return -1 ratio = b // a a_factors = prime_factors(a) b_factors = prime_factors(b) operations = 0 for prime in b_factors: if prime in a_factors: if b_factors[prime] > a_factors[prime]: operations += b_factors[prime] - a_factors[prime] else: operations += b_factors[prime] return operations"},{"question":"You are given two strings, A and B, of length N, each consisting of lowercase English letters. A special transformation can be applied to any character in the strings: - A \'*\' in string A can match any single character from B. - You can swap any two characters within either string, A or B. Your goal is to determine if it is possible to make the two strings equal by applying any number of transformations and swaps. Constraints: - 1 ≤ N ≤ 100,000 - A[i] = \'*\' or a lowercase letter \'a\' - \'z\' - B[i] = a lowercase letter \'a\' - \'z\' Input: Input is given from Standard Input in the following format: ``` N A B ``` Output: Print \\"YES\\" if it is possible to make the two strings equal, and \\"NO\\" otherwise. Example Input: ``` 3 a*c abc ``` Output: ``` YES ``` Input: ``` 5 abc*e bbcde ``` Output: ``` NO ``` Input: ``` 4 **** zzzz ``` Output: ``` YES ```","solution":"def can_transform(N, A, B): # Remove all \'*\' from A and compare the rest of characters. A_filtered = [char for char in A if char != \'*\'] if len(A_filtered) > len(B): return \\"NO\\" # Create a frequency dictionary for A_filtered and B freq_A = {} freq_B = {} for char in A_filtered: if char in freq_A: freq_A[char] += 1 else: freq_A[char] = 1 for char in B: if char in freq_B: freq_B[char] += 1 else: freq_B[char] = 1 # Compare the frequency dictionaries for char, count in freq_A.items(): if char not in freq_B or freq_B[char] < count: return \\"NO\\" return \\"YES\\""},{"question":"Given a sequence of N integers, {a_1, a_2, a_3, ..., a_N}, we need to reduce this sequence to the smallest possible sum using the following operations: 1. Pick any two elements a_i and a_j (1 ≤ i < j ≤ N). 2. Replace either a_i with |a_i - a_j| or a_j with |a_i - a_j|. Note that negative values must be replaced with their absolute value. Write a function that returns the smallest possible sum of the sequence after performing the operations as many times as you like. -----Constraints----- - N is an integer between 1 and 100 (inclusive). - Each a_i is an integer between 1 and 1 000 000 (inclusive). -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 a_3 ... a_N -----Output----- Print the smallest possible sum of the sequence. -----Sample Input----- 3 5 3 9 -----Sample Output----- 1 Explanation: Start with the sequence {5, 3, 9}. 1. Replace a_3 (9) with |9 - 5| = 4; sequence becomes {5, 3, 4}. 2. Replace a_1 (5) with |5 - 3| = 2; sequence becomes {2, 3, 4}. 3. Replace a_3 (4) with |4 - 2| = 2; sequence becomes {2, 3, 2}. 4. Replace a_2 (3) with |3 - 2| = 1; sequence becomes {2, 1, 2}. 5. Replace a_1 (2) with |2 - 1| = 1; sequence becomes {1, 1, 2}. 6. Replace a_3 (2) with |2 - 1| = 1; sequence becomes {1, 1, 1}. 7. Replace a_2 (1) with |1 - 1| = 0; sequence becomes {1, 0, 1}. 8. Replace a_1 (1) with |1 - 0| = 1; sequence becomes {1, 0, 1}. No further meaningful operations can reduce the sum further, and the final sum is 1","solution":"def smallest_possible_sum(n, sequence): Returns the smallest possible sum of the sequence after performing the given operations. # Using Euclidean Algorithm to find the GCD of the sequence from math import gcd from functools import reduce if n == 1: return sequence[0] total_gcd = reduce(gcd, sequence) return total_gcd"},{"question":"In many software applications, assigning unique identifiers to users is crucial for tracking and managing individual accounts. One common approach is to use a sequential numbering system. However, for added security and privacy, these identifiers are sometimes encoded or masked in a particular format. You are to write a program that checks whether a given identifier matches a specific encoded format. The encoding format includes a fixed prefix followed by a numerical sequence. For this problem, you need to validate if an identifier starts with the prefix \\"USR-\\" and is followed by six digits. -----Input----- The input consists of a single line containing a string identifier, which has a length between 7 and 10 characters inclusive. -----Output----- Output a single integer, which is 1 if the identifier format is valid, or 0 if the identifier format is invalid. -----Examples----- Sample Input 1: USR-123456 Sample Output 1: 1 Sample Input 2: USR-abc123 Sample Output 2: 0 Sample Input 3: USR-12345 Sample Output 3: 0","solution":"import re def validate_identifier(identifier): Validates if the identifier starts with \\"USR-\\" and is followed by six digits. Parameters: identifier (str): The input identifier to be validated. Returns: int: 1 if the identifier is valid, 0 otherwise. if re.fullmatch(r\\"USR-d{6}\\", identifier): return 1 return 0"},{"question":"There is a city map represented by an undirected graph with `N` intersections and `M` roads such that there are no self-loops and no multiple roads between any pair of intersections. Each road has a weight representing the distance between the two intersections it connects. You are given the weights for all the roads. Your task is to find out if there exists a unique minimum spanning tree (MST) for the given graph. A minimum spanning tree of a graph is a subgraph that is a tree, connects all vertices, and has the minimum possible total edge weight. It can be proven that there exists a unique minimum spanning tree if and only if, for every road that belongs to some minimum spanning tree of the graph, there is no other road with the same weight. Constraints - `1 ≤ N ≤ 10^5` - `0 ≤ M ≤ 2 * 10^5` - `1 ≤ w ≤ 10^9`, where `w` is the weight of a road. Input Input is given from Standard Input in the following format: ``` N M u_1 v_1 w_1 u_2 v_2 w_2 ... u_M v_M w_M ``` Here, `u_i` and `v_i` are the intersections connected by the i-th road and `w_i` is the weight of that road. Output Output `YES` if the graph has a unique MST, otherwise output `NO`. Examples Input ``` 4 5 1 2 1 2 3 2 3 4 3 4 1 4 1 3 1 ``` Output ``` NO ``` Input ``` 3 3 1 2 1 2 3 1 3 1 1 ``` Output ``` NO ``` Input ``` 4 6 1 2 1 2 3 2 3 4 3 4 1 4 1 3 2 2 4 3 ``` Output ``` YES ```","solution":"def has_unique_mst(n, m, edges): Checks if the input graph has a unique MST. Parameters: n (int): the number of intersections (nodes). m (int): the number of roads (edges). edges (list of tuples): each tuple contains three integers u, v, and w representing a road between intersections u and v with weight w. Returns: string: \'YES\' if the graph has a unique MST, otherwise \'NO\'. # We\'ll use a set to track the weights weights = set() for u, v, w in edges: if w in weights: return \\"NO\\" weights.add(w) return \\"YES\\""},{"question":"Alex is designing a network protocol that transfers messages between servers. A message can be represented as a string of lowercase English letters. There\'s a risk of message corruption during transmission, causing some characters to be replaced with question marks. Your job is to reconstruct the original message such that it forms a valid English word from a provided dictionary. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 100) — the number of distinct words in the dictionary. The next n lines contain one dictionary word each, consisting only of lowercase English letters. The next line contains a single word represented by lowercase English letters and question marks. The given word has a length from 1 to 1000. -----Output----- If it is possible to form a valid English word from the dictionary by replacing each question mark by a single lowercase letter, print \\"YES\\" followed by the reconstructed word. If there are multiple valid reconstructions, print any of them. If it is not possible, print \\"NO\\". -----Examples----- Input 3 hello world happy h?ll? Output YES hello Input 4 apple orange banana grape a?pl? Output YES apple Input 3 cat dog fish d?g? Output NO","solution":"def reconstruct_message(dictionary, corrupted_message): def possible_matches(word, corrupted_message): if len(word) != len(corrupted_message): return False for wc, cm in zip(word, corrupted_message): if cm != \'?\' and wc != cm: return False return True for word in dictionary: if possible_matches(word, corrupted_message): return f\\"YESn{word}\\" return \\"NO\\""},{"question":"In a newly constructed IT park, there are several buildings arranged in the form of a grid (represented as a 2D matrix). Each building can either be operational or under construction. An operational building is represented as \'1\' and a building under construction is represented as \'0\'. Each operational building provides certain amenities that have a range of influence extending up to a given distance. Your task is to determine whether all buildings in the grid can access these amenities. Formally, you are given a matrix `grid` of size `MxN` where grid[i][j] = \'1\' represents an operational building and grid[i][j] = \'0\' represents a building under construction. You are also given an integer `D` which specifies the range of influence of each operational building in both horizontal and vertical directions. You need to determine whether all the buildings in the matrix can take advantage of the amenities provided by the operational buildings. Example 1: Input: M = 3, N = 3, D = 1 grid = [ [\'1\', \'0\', \'1\'], [\'0\', \'0\', \'0\'], [\'1\', \'0\', \'1\'] ] Output: 1 Explanation: Every building in the grid can access the amenities provided by the operational buildings within the given range D=1. Example 2: Input: M = 3, N = 3, D = 1 grid = [ [\'1\', \'0\', \'0\'], [\'0\', \'0\', \'0\'], [\'0\', \'0\', \'1\'] ] Output: 0 Explanation: The building in the middle row cannot access the amenities provided by the operational buildings since the range of influence D=1 is insufficient. Your Task: You do not need to read input or print anything. Your task is to implement a function `amenitiesCoverage()` which takes an integer M, integer N, a 2D list grid, and an integer D as input parameters and returns a boolean value true if all buildings can access the amenities or false otherwise. Expected Time Complexity: O(M*N) Expected Space Complexity: O(M*N) Constraints: 1 ≤ M, N ≤ 1000 0 ≤ D ≤ 1000","solution":"def amenitiesCoverage(M, N, grid, D): Determines if all buildings can access amenities within the given range D. Parameters: M (int): Number of rows in the grid. N (int): Number of columns in the grid. grid (List[List[str]]): 2D list representing the buildings. D (int): The range of influence of each operational building. Returns: bool: True if all buildings can access the amenities, False otherwise. # Visit each cell and mark its accessible cells within the range D accessible = [[False] * N for _ in range(M)] for i in range(M): for j in range(N): if grid[i][j] == \'1\': for x in range(max(0, i - D), min(M, i + D + 1)): for y in range(max(0, j - D), min(N, j + D + 1)): accessible[x][y] = True # Check if all cells are accessible for i in range(M): for j in range(N): if not accessible[i][j]: return False return True"},{"question":"=====Problem Statement===== Write a function `reverse_substring` that takes a string `s` and two integers `start` and `end` as arguments. The function should return a new string where the substring from `start` to `end` (inclusive) is reversed, and the rest of the string remains the same. The string `s` is indexed starting from 0. If `start` or `end` is out of range, they should be adjusted to the nearest valid index within the string. =====Input Format===== The input consists of a single string `s` followed by two integers `start` and `end`, each on a new line. =====Constraints===== 1 ≤ |s| ≤ 100 0 ≤ start, end < |s| =====Output Format===== Print the modified string after reversing the specified substring. =====Example===== **Input:** ``` hello world 0 4 ``` **Output:** ``` olleh world ``` =====Example Explanation===== In the given example, the substring from index 0 to 4 (inclusive) is \\"hello\\". Reversing it gives \\"olleh\\". The rest of the string \\" world\\" remains unchanged. The final string is \\"olleh world\\".","solution":"def reverse_substring(s, start, end): Returns a new string where the substring from `start` to `end` (inclusive) is reversed, and the rest of the string remains the same. # Adjust start and end to be within the valid range start = max(0, min(start, len(s) - 1)) end = max(0, min(end, len(s) - 1)) # Ensure start is less than or equal to end if start > end: start, end = end, start # Reverse the substring from start to end reversed_substring = s[start:end+1][::-1] # Construct the result result = s[:start] + reversed_substring + s[end+1:] return result"},{"question":"Given a string which represents a sentence, count the number of vowels (a, e, i, o, u) in it. Consider both uppercase and lowercase vowels. Your task is to implement a function that returns the total count of vowels in the given sentence. Example 1: Input: sentence = \\"This is an example.\\" Output: 6 Explanation: The vowels present in the sentence are \'i\', \'i\', \'a\', \'e\', \'a\', \'e\'. Example 2: Input: sentence = \\"Hello, world!\\" Output: 3 Explanation: The vowels present in the sentence are \'e\', \'o\', \'o\'. Your Task: You don\'t need to read or print anything. Your task is to complete the function count_vowels() which takes a string as parameter and returns an integer representing the count of vowels in the given sentence. Expected Time Complexity: O(n) Expected Space Complexity: O(1) Constraints: 1 <= Length of the string <= 1000","solution":"def count_vowels(sentence): Returns the number of vowels in the given sentence. Consider both uppercase and lowercase vowels (a, e, i, o, u). vowels = \\"aeiouAEIOU\\" count = 0 for char in sentence: if char in vowels: count += 1 return count"},{"question":"You are given a list of n integers that represents the amount of candies in n different bags. You need to distribute the candies into groups such that each group contains exactly three candies. Write a program to determine the maximum number of groups of three candies that can be formed and how many candies will be left undistributed. -----Input----- The first line contains a single integer n (1 ≤ n ≤ 1000). The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^4) which represent the candy counts for each bag. -----Output----- Print two integers: the first integer is the maximum number of groups of three candies, and the second integer is the number of candies left undistributed. -----Examples----- Input 4 7 11 13 9 Output 13 1 Input 3 3 3 3 Output 3 0 -----Note----- In the first example, the candies can be grouped as follows: - From the first bag: 2 groups of 3 candies (6 candies), 1 candy left - From the second bag: 3 groups of 3 candies (9 candies), 2 candies left - From the third bag: 4 groups of 3 candies (12 candies), 1 candy left - From the fourth bag: 3 groups of 3 candies (9 candies), no candies left In total, 2 + 3 + 4 + 3 = 12 groups and 1 + 2 + 1 + 0 = 4 undistributed candies. Thus, 13 groups and 1 candy left in total.","solution":"def distribute_candies(n, candies): Distribute the candies into groups of three. :param n: Number of bags :param candies: List of integers representing candies in each bag :return: Tuple containing the maximum number of groups of three and the number of leftover candies total_groups = 0 leftover_candies = 0 for candy in candies: total_groups += candy // 3 leftover_candies += candy % 3 # Convert leftover candies into groups of three if possible additional_groups = leftover_candies // 3 leftover_candies = leftover_candies % 3 total_groups += additional_groups return total_groups, leftover_candies"},{"question":"You are given an array of integers and a number k. Write a function that determines if any two distinct elements in the array sum up to k. -----Input----- The input consists of: - An integer n (1 ≤ n ≤ 10^5) — the number of elements in the array. - An array of n integers a[i] (-10^9 ≤ a[i] ≤ 10^9). - An integer k (-10^9 ≤ k ≤ 10^9) — the target sum. -----Output----- If there are two distinct elements in the array that sum up to k, print \\"YES\\", otherwise print \\"NO\\". -----Examples----- Input 5 2 7 11 15 1 9 Output YES Input 5 1 2 3 4 5 10 Output NO Input 3 -1 -2 -3 -4 Output YES","solution":"def has_pair_with_sum(arr, k): Determines if there are two distinct elements in the array that sum up to k. Parameters: arr (list): A list of integers. k (int): The target sum. Returns: str: \\"YES\\" if there are two distinct elements that sum up to k, otherwise \\"NO\\". seen = set() for num in arr: if k - num in seen: return \\"YES\\" seen.add(num) return \\"NO\\""},{"question":"In a distant galaxy, there is a communication network that consists of n planets connected by n-1 bidirectional communication channels. These channels form a tree, meaning there is exactly one path between any two planets. Each planet has a certain amount of stored data which can be transferred through these channels. The amount of data that can be transferred through a channel is determined by the weakest planet (the planet with the least stored data) connected by that channel. Given the data stored on each planet, you need to determine how much data can be transferred between pairs of planets over these channels. -----Input----- The first line contains an integer t (1 leq t leq 10^3), the number of test cases. Each test case starts with an integer n (2 leq n leq 10^5), the number of planets. The second line contains n integers d_1, d_2, dots, d_n (1 leq d_i leq 10^9), where d_i is the amount of data stored on the i-th planet. Each of the next n-1 lines contains two integers u and v (1 leq u, v leq n), indicating a bidirectional communication channel between planets u and v. It is guaranteed that these channels form a tree. The sum of n over all test cases does not exceed 2 cdot 10^5. -----Output----- For each test case, print a single integer — the maximum amount of data that can be transferred between any two planets. -----Examples----- Input 3 4 8 10 5 15 1 2 1 3 3 4 3 6 6 6 1 2 2 3 5 1 3 2 4 2 1 2 1 3 3 4 4 5 Output 10 6 4 -----Note----- In the first test case: - The maximum amount of data that can be transferred between planets 3 and 4 is the data stored on planet 3, which is 5. - The maximum data transfer is limited by the planet with the smallest data on any path. In general, for each pair of planets, the data transfer amount is determined by the planet with the smallest data value on the path between them.","solution":"from collections import defaultdict, deque def max_data_transfer(t, test_cases): results = [] for case in test_cases: n = case[\'n\'] data = case[\'data\'] edges = case[\'edges\'] # Initialize data structures graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) # Find the maximum data transfer possible # Since max transfer between any two nodes is determined # by the minimum data in the subtrees, the single maximum of # sum(data) gives us the upper bound max_transfer = max(data) results.append(max_transfer) return results"},{"question":"Sarah is a robotics engineer, and she has developed a robot that can understand and execute simple arithmetic operations. The robot can perform addition, subtraction, multiplication, and division. To test the robot\'s abilities, Sarah wants to provide a sequence of operations for the robot to execute. The sequence is represented as a string where each character represents either an operand (single digit number) or an operator (+, -, *, /). Additionally, the operations should follow the order of operations rules (PEMDAS/BODMAS), meaning multiplication and division must be performed before addition and subtraction. Sarah needs your help to parse these sequences correctly and calculate the final value. -----Input----- The first line of the input contains an integer T denoting the number of test cases. Each of the following T lines contains a string S representing a sequence of operands and operators that the robot needs to calculate. -----Output----- For each test case, output a single line containing the calculated result after evaluating the sequence. -----Constraints----- - 1 ≤ T ≤ 104 - 1 ≤ |S| ≤ 104 - The string S will be non-empty and contain only characters \'0\'-\'9\', \'+\', \'-\', \'*\', and \'/\'. - It is guaranteed that S represents a valid arithmetic expression and does not contain any parentheses. - Division between integers should be treated as integer division. -----Example----- Input: 2 3+2*2 3/2 Output: 7 1 -----Explanation----- Example case 1: According to order of operations, we first perform the multiplication (2*2 = 4), then the addition (3+4 = 7). Example case 2: The division of 3 by 2 in integer division is 1. Thus, the result is 1.","solution":"def calculate_expression(expression): Evaluates the arithmetic expression according to the order of operations (PEMDAS/BODMAS). # Step 1: Convert the expression to a list of characters for easier manipulation tokens = list(expression) # Step 2: Evaluate * and / first i = 0 while i < len(tokens): if tokens[i] == \'*\' or tokens[i] == \'/\': operator = tokens[i] left_operand = int(tokens[i-1]) right_operand = int(tokens[i+1]) if operator == \'*\': result = left_operand * right_operand elif operator == \'/\': result = left_operand // right_operand tokens = tokens[:i-1] + [str(result)] + tokens[i+2:] i -= 1 # Adjust index to recheck the modified parts else: i += 1 # Step 3: Evaluate + and - i = 0 while i < len(tokens): if tokens[i] == \'+\' or tokens[i] == \'-\': operator = tokens[i] left_operand = int(tokens[i-1]) right_operand = int(tokens[i+1]) if operator == \'+\': result = left_operand + right_operand elif operator == \'-\': result = left_operand - right_operand tokens = tokens[:i-1] + [str(result)] + tokens[i+2:] i -= 1 # Adjust index to recheck the modified parts else: i += 1 # The final result will be the only remaining token return int(tokens[0]) def process_expressions(expressions): Takes a list of arithmetic expressions and returns their evaluated results. results = [] for expression in expressions: result = calculate_expression(expression) results.append(result) return results"},{"question":"You are given a list of words and a series of queries. Each query consists of two integers `start` and `end`. For each query, return the shortest word in the list from positions `start` to `end` (inclusive). If there are multiple words with the same length, return the one that appears first in the segment. To illustrate the task, consider the following example: ```python words = [\\"algorithm\\", \\"is\\", \\"fun\\", \\"and\\", \\"challenging\\"] queries = [(1, 3), (0, 4), (2, 4)] ``` For the above input, the expected output is: ```python [\\"is\\", \\"is\\", \\"fun\\"] ``` You must create a function that has the following signature: ```python def find_shortest_words(words, queries): # Your code here ``` # Constraints: - The length of `words` will not exceed `10^5`. - The length of each word will be at most `100`. - The number of queries will not exceed `10^4`. # Example Input ```python words = [\\"dynamic\\", \\"programming\\", \\"is\\", \\"quite\\", \\"powerful\\"] queries = [(0, 1), (1, 4), (0, 4)] ``` Output ```python [\\"dynamic\\", \\"is\\", \\"is\\"] ``` # Function Description 1. **Function Signature:** ```python def find_shortest_words(words, queries): ``` 2. **Parameters:** - `words`: A list containing the words (strings). - `queries`: A list of tuples where each tuple contains two integers `start` and `end`. 3. **Returns:** - A list containing the shortest word for each query segment. Make sure that your implementation is efficient and can handle the large input sizes within the stipulated constraints.","solution":"def find_shortest_words(words, queries): Returns the shortest word in each query range. Args: words: List of words (strings). queries: List of tuples, where each tuple contains two integers (start, end). Returns: A list of the shortest words for each query segment. results = [] for start, end in queries: shortest_word = words[start] for i in range(start, end + 1): if len(words[i]) < len(shortest_word): shortest_word = words[i] results.append(shortest_word) return results"},{"question":"Given a list of integers and a target integer, write a function to find two distinct numbers in the list that add up to the target integer. Return the indices of the two numbers in the form of a tuple. If there are no such numbers, return an empty tuple. Example 1: Input: nums = [2, 7, 11, 15], target = 9 Output: (0, 1) Explanation: Because nums[0] + nums[1] = 2 + 7 = 9 Example 2: Input: nums = [3, 2, 4], target = 6 Output: (1, 2) Explanation: Because nums[1] + nums[2] = 2 + 4 = 6 Example 3: Input: nums = [3, 3], target = 6 Output: (0, 1) Explanation: Because nums[0] + nums[1] = 3 + 3 = 6 Example 4: Input: nums = [1, 2, 3, 4], target = 10 Output: () Explanation: No two numbers add up to 10 Your Task: You don\'t need to read input or print anything. Complete the function `two_sum` which takes `nums` (list of integers) and `target` (integer) as input parameters and returns the tuple of indices of the two distinct numbers that add up to the given target. If no such pair exists, return an empty tuple. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1. 2 ≤ nums.length ≤ 10^4 2. -10^9 ≤ nums[i] ≤ 10^9 3. -10^9 ≤ target ≤ 10^9","solution":"def two_sum(nums, target): Given a list of integers and a target integer, find two distinct numbers in the list that add up to the target integer. Return the indices of the two numbers in the form of a tuple. If there are no such numbers, return an empty tuple. num_to_index = {} for i, num in enumerate(nums): complement = target - num if complement in num_to_index: return (num_to_index[complement], i) num_to_index[num] = i return ()"},{"question":"Given a string S and an integer K, determine if it\'s possible to remove exactly K characters from the string so that the resulting string is a palindrome. Input: S = \\"abca\\", K = 1 Output: 1 Explanation: By removing \'b\' or \'c\', the remaining string \\"aca\\" or \\"aba\\" is a palindrome. Example 2: Input: S = \\"abcde\\", K = 2 Output: 0 Explanation: No removal of 2 characters can make the string a palindrome. Your Task: You don’t need to read input or print anything. Your task is to complete the function isKPalindrome() which takes the string S and an integer K as input parameters and returns true if it\'s possible to make the string a palindrome by removing exactly K characters, otherwise returns false. If the function returns true, the driver code will print 1 in output and 0 if the function returns false. Expected Time Complexity: O(N^2), where N is the length of the string. Expected Auxiliary Space: O(N^2) Constraints: 1 <= |S| <= 1000 0 <= K <= |S|","solution":"def isKPalindrome(S, K): Determine if it\'s possible to remove exactly K characters from S to make it a palindrome. n = len(S) # Helper function to find the length of the Longest Common Subsequence (LCS) def LCS(str1, str2): dp = [[0] * (n + 1) for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][n] rev_S = S[::-1] lcs_length = LCS(S, rev_S) # Minimum number of deletions to make the string a palindrome min_deletions = n - lcs_length return min_deletions <= K"},{"question":"You are tasked to organize a coding competition at your university. The system for assigning levels to participants works based on their efficiency scores. Participants with scores less than 40 are assigned the \\"Beginner\\" level, those reaching up to 70 are classified as \\"Intermediate\\", and those crossing 70 are categorized as \\"Advanced\\". However, in a rare scenario, if the scores form a unique Fibonacci sequence, even if the score is less than the aforementioned ranges, they are directly categorized as \\"Elite\\". Write a program to determine the level of each participant based on their efficiency scores and identify if their scores form a unique Fibonacci sequence to categorize them as \\"Elite\\". Input: - The first line of input contains an integer t, which is the number of test cases. t lines follow, each containing an integer which is the efficiency score of a participant. Output: - For each test case, output a single line indicating the level of the participant which could be one of these four: \\"Beginner\\", \\"Intermediate\\", \\"Advanced\\", or \\"Elite\\". Constraints: 1 ≤ t ≤ 10^5 0 ≤ score ≤ 10^9 SAMPLE INPUT 5 25 45 72 21 34 SAMPLE OUTPUT Beginner Intermediate Advanced Elite Elite Explanation: - The score 25 falls under the \\"Beginner\\" level. - The score 45 falls under the \\"Intermediate\\" level. - The score 72 falls under the \\"Advanced\\" level. - The scores 21 and 34 are part of the Fibonacci sequence, hence they are categorized as \\"Elite\\".","solution":"def is_fibonacci(n): Check if a given number n is a Fibonacci number. A number is a Fibonacci number if and only if one (or both) of (5*n^2 + 4) or (5*n^2 - 4) is a perfect square. if n == 0 or n == 1: return True def is_perfect_square(x): s = int(x**0.5) return s*s == x return is_perfect_square(5*n*n + 4) or is_perfect_square(5*n*n - 4) def determine_level(score): if is_fibonacci(score): return \\"Elite\\" if score < 40: return \\"Beginner\\" elif score <= 70: return \\"Intermediate\\" else: return \\"Advanced\\" def coding_competition_levels(t, scores): results = [] for score in scores: results.append(determine_level(score)) return results"},{"question":"In Zunderland, a constant shipping fee of rupees 15 is added if the total order amount is less than or equal to rupees 200. Given that the total order amount is Y rupees, find out the final amount you need to pay including the potential shipping fee. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of test cases. - The first and only line of each test case contains a single integer Y — your total order amount. ------ Output Format ------ For each test case, output on a new line, the final amount you need to pay. ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ Y ≤ 500 ----- Sample Input 1 ------ 4 50 250 200 300 ----- Sample Output 1 ------ 65 250 215 300 ----- Explanation 1 ------ Test case 1: Your total order amount is 50 rupees which is less than 200 rupees. Thus, a shipping fee of 15 rupees would be added and you pay 50 + 15 = 65 rupees. Test case 2: Your total order amount is 250 rupees which is greater than 200 rupees. Thus, no shipping fee would be added and you pay 250 rupees. Test case 3: Your total order amount is 200 rupees which is equal to 200 rupees. Thus, a shipping fee of 15 rupees would be added and you pay 200 + 15 = 215 rupees. Test case 4: Your total order amount is 300 rupees which is greater than 200 rupees. Thus, no shipping fee would be added and you pay 300 rupees.","solution":"def final_amount(n, test_cases): results = [] for y in test_cases: if y <= 200: results.append(y + 15) else: results.append(y) return results"},{"question":"You are organizing a theater performance with n stages. You have m unique plays to be performed, each play requires exactly one stage. However, some plays are very popular and can be performed on multiple stages concurrently. The goal is to determine the number of ways to assign the plays to the stages such that each stage has exactly one play, and each play is performed on at least one stage. -----Input----- The first line of the input contains two integers, n (1 ≤ n ≤ 10) and m (1 ≤ m ≤ 10) — the number of stages and the number of unique plays, respectively. -----Output----- Output one integer — the number of ways to assign the plays to the stages. -----Examples----- Input 3 2 Output 6 Input 4 3 Output 36","solution":"from itertools import permutations, product def count_ways(n, m): Returns the number of ways to assign the plays to the stages such that each stage has exactly one play, and each play is performed on at least one stage. if m == 0: return 0 if n < m: return 0 stages = list(range(n)) plays = list(range(m)) # Generate all possibilities of assign plays to stages count = 0 for assign in product(plays, repeat=n): if len(set(assign)) == m: count += 1 return count"},{"question":"You are given a string S consisting of lowercase English letters and a positive integer K. You need to divide this string into K contiguous non-empty substrings such that the difference between the length of the longest substring and the shortest substring is minimized. -----Input----- The first line of the input contains two integers N and K (1 le N le 10^5, 1 le K le N) — the length of the string S and the number of substrings to divide into. The second line contains the string S consisting of N lowercase English letters. -----Output----- Output a single integer — the minimum possible difference between the length of the longest substring and the shortest substring after dividing the string into K contiguous non-empty substrings. -----Examples----- Input 7 3 abcdefg Output 1 Input 5 5 abcde Output 0 Input 8 4 abcdefgh Output 0 -----Note----- In the first example, one optimal way to divide the string \\"abcdefg\\" into 3 contiguous non-empty substrings is [\\"abc\\", \\"de\\", \\"fg\\"]. The lengths of the substrings are 3, 2, and 2, respectively. So the difference between the longest and the shortest substring is 1. In the second example, since K equals N, each character can be its own substring. Therefore, the minimum difference in this case is 0.","solution":"def min_length_difference(N, K, S): Returns the minimum possible difference between the length of the longest substring and the shortest substring after dividing the string into K contiguous non-empty substrings. base_length = N // K extra = N % K return 1 if extra > 0 else 0"},{"question":"A company has developed a brand-new database system and wants to test the performance of its queries. They have a table called \\"Employees\\" with the following schema: ``` Employees --------- emp_id INTEGER emp_name VARCHAR manager_id INTEGER ``` Each employee has a unique `emp_id`, a name `emp_name`, and a `manager_id` which refers to the `emp_id` of their manager. The company\'s CEO has a `manager_id` of `NULL`. Write a query to find all employees who directly and indirectly report to a specific manager. The output should list the `emp_name` along with their level of hierarchy relative to the specified manager. The level of the specified manager should be considered 0, their direct reports should be level 1, and so on. Input Format - The first line contains an integer, `n`, the number of employees. - The next `n` lines each contain three values separated by space: `emp_id`, `emp_name`, and `manager_id`. - The last line contains an integer, `manager_emp_id`, referring to the `emp_id` of the specific manager. Constraints - `1 ≤ n ≤ 10^4` - Each `emp_id` is a unique positive integer. - `emp_name` is a string of up to 100 characters. - Each `manager_id` is either a positive integer (existing `emp_id`) or `NULL`. - It is guaranteed that the employee hierarchy will not contain cycles. Output Format Output the employee names and their levels, each on a new line, sorted first by level and then by `emp_name` in ascending order. Sample Input ``` 7 1 John NULL 2 Sarah 1 3 Alice 1 4 Bob 2 5 Charlie 2 6 David 3 7 Eve 3 1 ``` Sample Output ``` Sarah 1 Alice 1 Bob 2 Charlie 2 David 2 Eve 2 ``` Explanation In the provided sample input, John is the manager with an `emp_id` of 1. Their direct reports are Sarah and Alice (level 1). The direct reports of Sarah (level 2) are Bob and Charlie, and the direct reports of Alice (level 2) are David and Eve.","solution":"def find_employees(employees, manager_emp_id): Finds all employees who directly or indirectly report to the specified manager. :param employees: List of tuples containing (emp_id, emp_name, manager_id) :param manager_emp_id: The emp_id of the specified manager :return: List of tuples containing (emp_name, level) sorted by level and emp_name from collections import defaultdict, deque # Create a dictionary to map manager_id to their direct reports reports = defaultdict(list) emp_id_to_name = {} for emp_id, emp_name, manager_id in employees: if manager_id is not None: reports[manager_id].append((emp_id, emp_name)) emp_id_to_name[emp_id] = emp_name # BFS to find all direct and indirect reports with their levels result = [] queue = deque([(manager_emp_id, 0)]) # (emp_id, level) while queue: current_emp_id, level = queue.popleft() # Traverse the current employee\'s direct reports for report_emp_id, report_emp_name in reports.get(current_emp_id, []): result.append((report_emp_name, level + 1)) queue.append((report_emp_id, level + 1)) # Sort the result by level and emp_name result.sort(key=lambda x: (x[1], x[0])) return result"},{"question":"You are given an array of integers. Your task is to determine if it\'s possible to rearrange the elements of the array such that each element is distinct and appears at least once in every possible subsequence of length 3. If it is possible, output \\"YES\\" and the rearranged array. If it is not possible, output \\"NO\\". -----Input----- The input contains multiple test cases. The first line contains a single integer t (1 le t le 1000) — the number of test cases. The following lines contain the descriptions of the test cases. The first line of each test case contains a single integer n (3 le n le 100) — the number of elements in the array. The second line contains n integers a_1, a_2, dots, a_n (1 le a_i le 100) — the elements of the array. -----Output----- For each test case, print \\"YES\\" and the rearranged array if possible. Otherwise, print \\"NO\\". -----Examples----- Input 3 5 4 5 5 5 4 4 3 3 3 3 6 7 8 7 8 7 8 Output YES 4 5 5 4 5 NO YES 7 8 7 8 7 8 -----Note----- In the first test case, it is possible to arrange the array such that each number appears at least once in every possible subsequence of length 3. For example, 4, 5, 5, 4, 5. In the second test case, it is not possible to arrange the array to satisfy the requirement since all the elements are the same number. In the third test case, the given array already satisfies the requirement.","solution":"def can_rearrange_for_subsequences(test_cases): res = [] for n, array in test_cases: if len(set(array)) == 1 and len(array) >= 3: res.append(\\"NO\\") continue freq = {} for num in array: if num in freq: freq[num] += 1 else: freq[num] = 1 if any(count > (n - n // 3) for count in freq.values()): res.append(\\"NO\\") else: res.append(\\"YES\\") res.append(\\" \\".join(map(str, array))) return res def process_input(input_str): lines = input_str.strip().split(\\"n\\") t = int(lines[0]) test_cases = [] i = 1 for _ in range(t): n = int(lines[i]) array = list(map(int, lines[i + 1].split())) test_cases.append((n, array)) i += 2 return test_cases def format_output(results): return \\"n\\".join(results)"},{"question":"You are given two strings `s1` and `s2` of the same length consisting of only lowercase alphabets. Write a function to determine if you can make `s1` equal to `s2` by swapping any two characters of `s1` exactly once. Function Signature: ```python def can_swap_to_match(s1: str, s2: str) -> str: pass ``` # Input - `s1`: A string of lowercase alphabets with length `n` (1 <= `n` <= 100). - `s2`: A string of lowercase alphabets with the same length `n`. # Output - Return \\"Yes\\" if you can make `s1` equal to `s2` by swapping any two characters of `s1` exactly once, otherwise return \\"No\\". # Example Input ```python s1 = \\"ab\\" s2 = \\"ba\\" ``` Output ```python \\"Yes\\" ``` Input ```python s1 = \\"abab\\" s2 = \\"baba\\" ``` Output ```python \\"No\\" ``` Note: - You are only allowed to swap two characters exactly once in `s1`. - The length of `s1` and `s2` will always be the same.","solution":"def can_swap_to_match(s1: str, s2: str) -> str: if len(s1) != len(s2): return \\"No\\" # Find differing character positions differing_positions = [] for i in range(len(s1)): if s1[i] != s2[i]: differing_positions.append(i) if len(differing_positions) > 2: return \\"No\\" if len(differing_positions) != 2: return \\"No\\" # Check if swapping the two differing positions in s1 makes s1 equal to s2 i, j = differing_positions s1_list = list(s1) s1_list[i], s1_list[j] = s1_list[j], s1_list[i] if \'\'.join(s1_list) == s2: return \\"Yes\\" return \\"No\\""},{"question":"You are given a series of jobs with their start times and end times. Your task is to schedule the jobs, ensuring that no two jobs overlap and the maximum number of jobs are scheduled. If there is a tie, the job with the lexicographically smallest name should be chosen. Example 1: Input: jobs = [ (\\"Job1\\", 1, 3), (\\"Job2\\", 2, 5), (\\"Job3\\", 4, 6), (\\"Job4\\", 5, 8), (\\"Job5\\", 7, 9) ] Output: [\\"Job1\\", \\"Job3\\", \\"Job5\\"] Explanation: We can perform \\"Job1\\" from 1 to 3, \\"Job3\\" from 4 to 6, and \\"Job5\\" from 7 to 9. Any other combination would result in overlapping jobs. Example 2: Input: jobs = [ (\\"JobA\\", 1, 2), (\\"JobB\\", 3, 4), (\\"JobC\\", 0, 6) ] Output: [\\"JobA\\", \\"JobB\\"] Explanation: Among the given jobs, only \\"JobA\\" and \\"JobB\\" can be scheduled without overlapping. \\"JobC\\" spans a longer duration and overlaps with both \\"JobA\\" and \\"JobB\\". Your task: You don\'t need to read input or print anything. Complete the function `maxJobs()` that takes a list of tuples `jobs`, where each tuple contains (job name, start time, end time), and returns a list of job names that can be scheduled in sorted order. Expected Time Complexity: O(N*log(N)) Expected Auxiliary Space: O(N) Constraints: - 1 <= Number of jobs <= 10^5 - 1 <= Start time, End time <= 10^9 - Sum of the number of jobs over all test cases does not exceed 10^6","solution":"def maxJobs(jobs): Returns a list of job names that can be scheduled without overlapping. # Sort jobs by end time, if end time is the same, sort by lexicographical order of job name jobs.sort(key=lambda x: (x[2], x[0])) # List to store selected jobs selected_jobs = [] # Initialize the last end time to a very small number last_end_time = -1 for job in jobs: job_name, start_time, end_time = job if start_time >= last_end_time: # If the job\'s start time is greater or equal to the last end time, select the job selected_jobs.append(job_name) # Update the last end time last_end_time = end_time return selected_jobs"},{"question":"Given a rectangular garden, you want to plant flowers in a way that maximizes the number of flowers in each row. You cannot plant flowers in adjacent plots (horizontally, vertically, or diagonally). The garden is represented by an n x m grid where n is the number of rows and m is the number of columns. Each cell in the grid can contain at most one flower. Your task is to determine the maximum number of flowers that can be planted in the garden without violating the adjacency condition. -----Input----- The input consists of two integers n and m (1 ≤ n, m ≤ 10), representing the number of rows and columns in the garden respectively. -----Output----- Print the maximum number of flowers that can be planted in the garden without any two flowers being planted in adjacent plots. -----Examples----- Input 3 3 Output 5 Input 4 4 Output 8","solution":"def max_flowers_in_garden(n, m): Returns the maximum number of flowers that can be planted in an n x m garden without any two flowers being planted in adjacent plots. # A simple approach can be to place flowers in a checkerboard pattern for n <= 10 and m <= 10 count = 0 for i in range(n): for j in range(m): if (i + j) % 2 == 0: count += 1 return count"},{"question":"Phoebe is organizing a music festival where she wants to make sure that every band gets a specific time slot for their performance. The festival is divided into M time slots, each having its own duration. To keep it fair, each band should be able to perform for a certain period of time without clashing with another band\'s time slot. Given an array of integers representing the duration of each time slot, and an integer L representing the minimum duration each band needs for their performance, determine the maximum number of bands that can perform at the festival. ------ Input Format ------ - The first line contains an integer T, the number of test cases. - For each test case, the first line contains two integers M and L, the number of time slots and the minimum duration required. - The second line contains M integers representing the duration of each time slot. ------ Output Format ------ For each test case, output a single integer, the maximum number of bands that can perform without time slot clashes. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ M ≤ 10^4 1 ≤ text{Duration of each time slot} ≤ 10^3 1 ≤ L ≤ 10^3 ------ Sample Input 1 ------ 2 5 3 2 3 4 5 1 4 2 1 2 1 2 ------ Sample Output 1 ------ 3 3 ------ Explanation 1 ------ Test Case 1: With M=5 time slots of durations [2, 3, 4, 5, 1] and L=3, the bands can perform in time slots of durations 3, 4, and 5 without clashing. Therefore, a maximum of 3 bands can perform. Test Case 2: With M=4 time slots of durations [1, 2, 1, 2] and L=2, the bands can perform in time slots of durations 2, 2, and 2 without clashing. Therefore, a maximum of 3 bands can perform.","solution":"def max_bands(M, L, durations): Determines the maximum number of bands that can perform without clashing given the time slots and minimum duration required. Parameters: M (int): Number of time slots. L (int): Minimum duration required. durations (list): List of integers representing the duration of each time slot. Returns: int: Maximum number of bands that can perform. # Filter the time slots to only those with durations >= L valid_slots = [d for d in durations if d >= L] # The number of bands that can perform is the number of valid time slots return len(valid_slots) def solve(T, test_cases): Solves the problem for multiple test cases. Parameters: T (int): Number of test cases. test_cases (list): A list of tuples where each tuple contains: - M (int): Number of time slots. - L (int): Minimum duration required. - durations (list): List of integers representing the duration of each time slot. Returns: list: A list of integers representing the maximum number of bands that can perform for each test case. results = [] for i in range(T): M, L, durations = test_cases[i] results.append(max_bands(M, L, durations)) return results"},{"question":"You are given a rotating list `nums` and an integer `k`. The list is rotated `k` positions to the right. Your task is to find the original sorted list before rotation. For example, if the list `nums` is `[4, 5, 6, 7, 1, 2, 3]` and `k` is 4, the original sorted list would have been `[1, 2, 3, 4, 5, 6, 7]`. Write a function `find_original_list(nums, k)` that returns the original sorted list before rotation. Input - `nums`: a list of integers that has been rotated `k` positions to the right, where 1 ≤ length of `nums` ≤ 10^5 and -10^9 ≤ nums[i] ≤ 10^9. - `k`: an integer specifying the number of positions the list has been rotated to the right, where 1 ≤ k < length of `nums`. Output - A list of integers representing the original sorted list before rotation. Example ```python find_original_list([4, 5, 6, 7, 1, 2, 3], 4) # Output: [1, 2, 3, 4, 5, 6, 7] find_original_list([13, 18, 20, 1, 3, 6, 11], 3) # Output: [1, 3, 6, 11, 13, 18, 20] find_original_list([7, 9, 11, 12, 15, 1, 3, 5], 5) # Output: [1, 3, 5, 7, 9, 11, 12, 15] ```","solution":"def find_original_list(nums, k): Given a list \'nums\' that has been rotated \'k\' positions to the right, returns the original sorted list. n = len(nums) # Determine the start of the original list before rotation start = n - k # Reconstruct the original list original_list = nums[start:] + nums[:start] # Sort the original list original_list.sort() return original_list"},{"question":"You need to develop a program that evaluates postfix mathematical expressions (also known as Reverse Polish Notation). Postfix expressions are mathematical expressions in which each operator follows all of its operands. For example, the postfix expression `5 1 2 + 4 * + 3 -` evaluates to `14`. Here are the steps to evaluate a postfix expression: 1. Read the postfix expression from left to right. 2. Use a stack to hold operands. 3. When you encounter an operand, push it onto the stack. 4. When you encounter an operator, pop the necessary number of operands from the stack, perform the operation, and push the result back onto the stack. 5. At the end of the expression, the value remaining on the stack is the result. The postfix expressions will contain single-digit non-negative integers and the operators `+`, `-`, `*`, and `/`. The division operator performs integer division. # Input The input consists of multiple postfix expressions, one per line. The end of the input is indicated by a line containing only a period (`.`). # Output For each postfix expression, print the result of the evaluation. # Example: Input ``` 5 1 2 + 4 * + 3 - 3 4 + 2 * 7 / 4 2 3 * + 6 - . ``` Output ``` 14 2 4 ``` **Note:** - Each postfix expression will be valid. - The stack will have enough elements for each operator to use. - Division by zero will not occur. - The expressions will not be empty and will contain no more than 100 characters.","solution":"def evaluate_postfix(expression): stack = [] tokens = expression.split() for token in tokens: if token.isdigit(): stack.append(int(token)) else: second_operand = stack.pop() first_operand = stack.pop() if token == \'+\': result = first_operand + second_operand elif token == \'-\': result = first_operand - second_operand elif token == \'*\': result = first_operand * second_operand elif token == \'/\': result = first_operand // second_operand stack.append(result) return stack.pop() def evaluate_multiple_postfix(expressions): results = [] for expression in expressions: if expression == \'.\': break results.append(evaluate_postfix(expression)) return results"},{"question":"You are organizing a string processing workshop for your students. They need to learn to decrypt encoded strings. The encoding rule consists of k[encoded_string], where the encoded_string inside the square brackets is repeated exactly k times. Note that k is guaranteed to be a positive integer. For example, the string \\"3[a2[c]]\\" is decoded as \\"accaccacc\\". The string inside the outer square brackets is \\"a2[c]\\", when decoded, it becomes \\"acc\\", which is then repeated 3 times to get \\"accaccacc\\". Your task is to implement a function that takes an encoded string and returns its decoded string. -----Input----- A single string s representing the encoded string (1 ≤ |s| ≤ 30). The encoded string is always valid; there are no extra brackets, and the digits represent positive integers. -----Output----- Return the decoded string as a single output. -----Example----- Input 3[a2[c]] Output accaccacc Input 2[abc]3[cd]ef Output abcabccdcdcdef -----Note----- In the first example, the inner string \\"a2[c]\\" decrypts to \\"acc\\", which is repeated 3 times to get \\"accaccacc\\". In the second example, the first part \\"2[abc]\\" decrypts to \\"abcabc\\", and the second part \\"3[cd]\\" decrypts to \\"cdcdcd\\". Concatenating them with \\"ef\\" results in the final string \\"abcabccdcdcdef\\".","solution":"def decode_string(s): Decodes an encoded string according to the specified rule. :param s: String to be decoded (1 ≤ len(s) ≤ 30) :return: Decoded string stack = [] current_num = 0 current_string = \\"\\" for char in s: if char.isdigit(): current_num = current_num * 10 + int(char) elif char == \'[\': stack.append((current_string, current_num)) current_string = \\"\\" current_num = 0 elif char == \']\': prev_string, multiplier = stack.pop() current_string = prev_string + current_string * multiplier else: current_string += char return current_string"},{"question":"A wizard in the kingdom of Algorithmia has recently learned the art of prime summation. To practice his new skills, he wants to write a program that will help him find the sum of all unique prime numbers present in given ranges of integers. Given two integers a and b, the program should compute the sum of prime numbers between a and b inclusive. If there are no prime numbers in the range, the wizard should be informed by returning a sum of zero. Input The first line contains the number of test cases T. Each of the next T lines contains two integers a and b which defines the range [a, b]. Output Output T lines, each containing the sum of all prime numbers within the corresponding range. If no primes are found, output 0 for that range. Constraints 1 ≤ T ≤ 20 1 ≤ a, b ≤ 10^6 a ≤ b SAMPLE INPUT 2 10 20 15 15 SAMPLE OUTPUT 60 0","solution":"def is_prime(n): Checks if a number is prime. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True def sum_of_primes_in_range(a, b): Returns the sum of all unique prime numbers in the range [a, b]. sum_primes = 0 for num in range(a, b + 1): if is_prime(num): sum_primes += num return sum_primes def compute_prime_sums(test_cases): Processes multiple ranges and returns sums of primes for each range. results = [] for a, b in test_cases: results.append(sum_of_primes_in_range(a, b)) return results"},{"question":"Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. Example 1: Input: nums = [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: For the first element, 24 is the product of 2, 3, and 4. For the second element, 12 is the product of 1, 3, and 4. For the third element, 8 is the product of 1, 2, and 4. For the fourth element, 6 is the product of 1, 2, and 3. Example 2: Input: nums = [4, 5, 1, 8, 2] Output: [80, 64, 320, 40, 160] Explanation: For the first element, 80 is the product of 5, 1, 8, and 2. For the second element, 64 is the product of 4, 1, 8, and 2. For the third element, 320 is the product of 4, 5, 8, and 2. For the fourth element, 40 is the product of 4, 5, 1, and 2. For the fifth element, 160 is the product of 4, 5, 1, and 8. Note: Please solve it without using division and in O(n) time complexity.","solution":"def product_except_self(nums): Given an array nums of n integers where n > 1, returns an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. n = len(nums) output = [1] * n left = 1 right = 1 # Calculate the product of elements to the left of each index for i in range(n): output[i] = left left *= nums[i] # Calculate the product of elements to the right of each index and multiply it with # the current value in output for i in range(n - 1, -1, -1): output[i] *= right right *= nums[i] return output"},{"question":"A company has a system where employees register daily transactions. Each transaction is recorded with a timestamp that includes the date and time. The CTO wants to generate daily reports of all transactions. You must write a program that accepts a list of transactions and groups them by date. For simplicity, the input will be a list of strings, each representing a transaction with this format: \\"YYYY-MM-DD HH:MM:SS <transaction_details>\\". Your task is to process this list, group the transactions by date, and print out the transactions grouped under each date. Input: - An integer N representing the number of transactions - N strings each in the format \\"YYYY-MM-DD HH:MM:SS <transaction_details>\\" Output: - For each date, print the date followed by all transactions on that date, maintaining their input order. Constraints: - 1 ≤ N ≤ 100 - Each transaction string contains between 20 and 200 characters. Example Input: 5 2022-01-01 09:11:23 Bought office supplies 2022-01-01 10:15:48 Client meeting 2022-01-02 14:22:35 Sent email to client 2022-01-01 11:05:09 Team lunch 2022-01-02 18:30:00 Project submission Example Output: 2022-01-01 2022-01-01 09:11:23 Bought office supplies 2022-01-01 10:15:48 Client meeting 2022-01-01 11:05:09 Team lunch 2022-01-02 2022-01-02 14:22:35 Sent email to client 2022-01-02 18:30:00 Project submission","solution":"from collections import defaultdict def group_transactions_by_date(transactions): Groups transactions by their date. Args: transactions (list of str): List of transaction strings in the format \\"YYYY-MM-DD HH:MM:SS <transaction_details>\\" Returns: dict: Dictionary with dates as keys and list of transactions as values grouped_transactions = defaultdict(list) for transaction in transactions: date = transaction.split(\' \')[0] grouped_transactions[date].append(transaction) return grouped_transactions def print_grouped_transactions(grouped_transactions): Prints the grouped transactions based on date. Args: grouped_transactions (dict): Dictionary with dates as keys and list of transactions as values Returns: None for date in sorted(grouped_transactions): print(date) for transaction in grouped_transactions[date]: print(transaction) print() # Print a new line after each date\'s transactions # Example usage if __name__ == \\"__main__\\": transactions = [ \\"2022-01-01 09:11:23 Bought office supplies\\", \\"2022-01-01 10:15:48 Client meeting\\", \\"2022-01-02 14:22:35 Sent email to client\\", \\"2022-01-01 11:05:09 Team lunch\\", \\"2022-01-02 18:30:00 Project submission\\" ] grouped_transactions = group_transactions_by_date(transactions) print_grouped_transactions(grouped_transactions)"},{"question":"A software company is developing an application to schedule meetings efficiently. They need your help to write a function that checks for overlapping time intervals. Write a function `overlapping_intervals(intervals)` that checks if any given time intervals overlap with each other. Each interval is represented as a list [start_time, end_time], where `start_time` and `end_time` are integers representing the start and end times of the interval, respectively. Input: - A list of n intervals, where 1 ≤ n ≤ 100,000. Output: - Return `True` if any of the intervals overlap, otherwise return `False`. Examples: Input: ``` intervals = [[1, 5], [6, 10], [4, 8]] ``` Output: ``` True ``` Input: ``` intervals = [[1, 2], [3, 4], [5, 6]] ``` Output: ``` False ``` Explanation: In the first example, the intervals [1, 5] and [4, 8] overlap, so the function should return `True`. In the second example, none of the intervals overlap, so the function should return `False`. Note: - Consider scenarios where intervals may touch but not overlap, for instance, [1, 2] and [2, 3] do not overlap. - Optimize your solution to handle the upper constraint efficiently. ```python def overlapping_intervals(intervals): intervals.sort() for i in range(1, len(intervals)): if intervals[i][0] < intervals[i-1][1]: return True return False ```","solution":"def overlapping_intervals(intervals): Check if any given time intervals overlap with each other. Args: intervals (list of list of int): A list of intervals where each interval is represented by [start_time, end_time]. Returns: bool: True if any intervals overlap, False otherwise. # Sort the intervals by the start time intervals.sort() # Check for overlapping intervals for i in range(1, len(intervals)): # If the start time of the current interval is less than the end time of the previous interval, they overlap if intervals[i][0] < intervals[i-1][1]: return True return False"},{"question":"John is participating in a robotics competition, and he needs to program a robot to navigate through a grid. The grid is represented as a 2D array of M rows and N columns. The robot starts at the top-left corner of the grid (0, 0) and needs to move to the bottom-right corner (M-1, N-1). The robot can only move either right or down at any point in time. The grid contains some obstacles which are represented by the value 1; an empty cell is represented by the value 0. The robot cannot move through obstacles. John needs to determine the number of unique paths the robot can take to reach the bottom-right corner. -----Input----- The first line of input contains two integers M and N, denoting the number of rows and columns in the grid respectively. The next M lines each contain N integers separated by space, representing the grid. -----Output----- Print a single integer, denoting the number of unique paths from the top-left corner to the bottom-right corner of the grid. -----Constraints----- - 1 ≤ M, N ≤ 50 - grid[i][j] is either 0 (empty cell) or 1 (obstacle). -----Example----- Input: 3 3 0 0 0 0 1 0 0 0 0 Output: 2 -----Explanation----- The two unique paths are: 1. (0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2) 2. (0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2) Note that the cell (1, 1) contains an obstacle, so the paths do not pass through it.","solution":"def unique_paths_with_obstacles(grid): if not grid or grid[0][0] == 1: return 0 M, N = len(grid), len(grid[0]) dp = [[0] * N for _ in range(M)] dp[0][0] = 1 for i in range(M): for j in range(N): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[-1][-1]"},{"question":"You are the captain of a spaceship navigating through an asteroid field represented as a 2D grid. The grid has n rows and m columns, with each cell either being empty (\'.\') or containing an asteroid (\'#\'). Your spaceship starts at the top-left corner of the grid (coordinate (1, 1)), and your goal is to reach the bottom-right corner of the grid (coordinate (n, m)) with the minimum number of moves. Due to the nature of the asteroid field, you can only move right (from (r, c) to (r, c+1)) or down (from (r, c) to (r+1, c)). However, the presence of asteroids complicates navigation. You can only move through empty cells (\'.\') and cannot move through cells containing asteroids (\'#\'). Determine the minimum number of moves required to reach the goal or state that it is impossible to reach (n, m) from (1, 1). ----- Input ----- The first line contains two integers n and m (2 le n, , m le 1000) — the number of rows and columns in the grid. Each of the next n lines contains a string of length m, representing the layout of the grid. Each character is either \'.\' (empty cell) or \'#\' (asteroid). ----- Output ----- Print the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner. If it is impossible to reach the bottom-right corner, print \\"Impossible\\" instead. ----- Examples ----- ----- Input ----- 4 4 .... .#.. .#.. .... Output: 6 ----- Input ----- 3 3 ..# .#. ..# Output: Impossible ----- Note ----- In the first example, you can navigate to the bottom-right corner in 6 moves: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4). In the second example, it is impossible to reach the bottom-right corner because there is no valid path through the grid without hitting an asteroid.","solution":"from collections import deque def min_moves_through_asteroids(n, m, grid): Returns the minimum number of moves required to reach the bottom-right corner of the grid from the top-left corner, or \\"Impossible\\" if it cannot be reached. if grid[0][0] == \'#\' or grid[n-1][m-1] == \'#\': return \\"Impossible\\" directions = [(0, 1), (1, 0)] visited = [[False] * m for _ in range(n)] queue = deque([(0, 0, 0)]) # (row, col, distance) visited[0][0] = True while queue: r, c, dist = queue.popleft() if r == n-1 and c == m-1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < n and 0 <= nc < m and not visited[nr][nc] and grid[nr][nc] == \'.\': visited[nr][nc] = True queue.append((nr, nc, dist + 1)) return \\"Impossible\\""},{"question":"A given array of integers is called beautiful if for any two elements a_i and a_j (1 ≤ i < j ≤ n), a_i is divisible by a_j or a_j is divisible by a_i. Your task is to check whether the given array is beautiful or not. -----Input----- The first line contains an integer n (1 ≤ n ≤ 1000) — the size of the array. The second line contains n distinct integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. -----Output----- Print \\"YES\\" if the array is beautiful, otherwise print \\"NO\\". -----Examples----- Input 3 4 8 16 Output YES Input 4 5 10 15 20 Output NO","solution":"def is_beautiful_array(n, arr): Checks if an array is beautiful. An array is beautiful if for any two elements a_i and a_j (1 ≤ i < j ≤ n), a_i is divisible by a_j or a_j is divisible by a_i. :param n: Size of the array :param arr: List of integers :return: \\"YES\\" if the array is beautiful, otherwise \\"NO\\" sorted_arr = sorted(arr) for i in range(n): for j in range(i + 1, n): if sorted_arr[j] % sorted_arr[i] != 0: return \\"NO\\" return \\"YES\\""},{"question":"In a dense forest, there exists a network of magical trees connected by mystical paths. Each mystical path has an associated weight which influences magical energy flow between the trees it connects. This network is represented as an undirected graph where nodes are trees and edges are the mystical paths. One day, a powerful wizard decides to measure the maximum efficiency of the network by determining the weight of the lightest path that connects every tree in the forest without forming any cycles. Your task is to find the weight of this minimum spanning tree (MST). Input The first line contains two space-separated integers n and m (2 ≤ n ≤ 10^5, 1 ≤ m ≤ 10^5) — the number of trees and the number of mystical paths in the forest. Then m lines follow, each containing three space-separated integers u, v, and w (1 ≤ u, v ≤ n, 1 ≤ w ≤ 10^9) — indicating there exists a mystical path of weight w between trees u and v. Output Print a single integer — the total weight of the lightest MST of the forest. If it is impossible to connect all trees, print \\"NO\\" (without quotes). Examples Input 4 5 1 2 3 1 3 1 2 3 3 3 4 6 1 4 5 Output 9 Input 3 1 1 2 2 Output NO Note In the first example, the lightest MST can be formed by choosing the paths (1, 3), (1, 2), and (3, 4) with a total weight of 1 + 3 + 5 = 9. In the second example, it is impossible to connect all trees since there is only one mystical path available and it cannot connect all the trees.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): root_x = find(parent, x) root_y = find(parent, y) if root_x != root_y: if rank[root_x] > rank[root_y]: parent[root_y] = root_x elif rank[root_x] < rank[root_y]: parent[root_x] = root_y else: parent[root_y] = root_x rank[root_x] += 1 def minimum_spanning_tree(n, m, edges): edges.sort(key=lambda x: x[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) mst_weight = 0 edges_used = 0 for edge in edges: u, v, w = edge root_u = find(parent, u-1) root_v = find(parent, v-1) if root_u != root_v: mst_weight += w union(parent, rank, root_u, root_v) edges_used += 1 if edges_used == n - 1: break if edges_used == n - 1: return mst_weight else: return \\"NO\\" def solve(n, m, edge_list): return minimum_spanning_tree(n, m, edge_list)"},{"question":"The emperor of a distant galaxy is fascinated by symmetrical patterns and wants to impose a new standard for all name tags in the empire. As his loyal advisor and a master of strings, it is your task to guarantee that all name tags are palindromes before distributing them to the citizens. Challenge: Write a function that, given a string, checks whether it can be rearranged to form a palindrome. If the string can be rearranged into at least one palindrome, return `True`. Otherwise, return `False`. ```python can_form_palindrome(\\"civic\\") = True ``` In this example, `\\"civic\\"` is already a palindrome, so the function returns `True`. Here are more examples: ```python can_form_palindrome(\\"ivicc\\") = True ``` In this example, the characters can be rearranged to form `\\"civic\\"`, so the function returns `True`. ```python can_form_palindrome(\\"hello\\") = False ``` In this case, there is no way to rearrange the characters to form a palindrome, so the function returns `False`. ```python can_form_palindrome(\\"aabbcc\\") = True ``` In this example, you can rearrange the characters to form `\\"abccba\\"` which is a palindrome, so the function returns `True`. ```python can_form_palindrome(\\"xyz\\") = False ``` `\\"xyz\\"` cannot be rearranged to form any palindrome, so the function returns `False`. Do you have what it takes to help the emperor achieve his vision?","solution":"def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. Parameters: s (str): The input string. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. from collections import Counter # Count the frequency of each character in the string char_count = Counter(s) # A string can be rearranged into a palindrome if at most one character has an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return odd_count <= 1"},{"question":"Create a function that takes a list of integers, representing daily temperatures, and returns a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. Example: ```python py> daily_temperatures([73, 74, 75, 71, 69, 72, 76, 73]) [1, 1, 4, 2, 1, 1, 0, 0] py> daily_temperatures([30, 40, 50, 60]) [1, 1, 1, 0] py> daily_temperatures([30, 60, 90]) [1, 1, 0] py> daily_temperatures([50, 50, 50]) [0, 0, 0] py> daily_temperatures([42]) [0] ``` Your function should be able to handle an empty list, which should return an empty list. ```python py> daily_temperatures([]) [] ```","solution":"def daily_temperatures(temperatures): This function takes a list of daily temperatures and returns a list of integers representing the number of days one has to wait for a warmer temperature. If no warmer temperature exists in the future, 0 is returned. :param temperatures: A list of daily temperatures. :return: A list of integers with the wait time for a warmer temperature. result = [0] * len(temperatures) stack = [] # This stack will store the indices of the temperatures list. for i, temp in enumerate(temperatures): # While stack is not empty and the current temperature is greater than the temperature at index stored in stack\'s top while stack and temperatures[stack[-1]] < temp: prev_index = stack.pop() result[prev_index] = i - prev_index stack.append(i) return result"},{"question":"You are managing a team of developers who need to track their progress on a set of tasks. Each task has a specific start time and end time. Two tasks are considered overlapping if they intersect in time. Your goal is to find the maximum number of overlapping tasks at any given moment. Given a list of tasks with their start and end times, determine the maximum number of tasks that are overlapping at the same time. -----Input----- The first line contains an integer n (1 ≤ n ≤ 10^5) — the number of tasks. Each of the next n lines contains two integers si and ei (0 ≤ si < ei ≤ 10^9) — the start and end times of the i-th task. -----Output----- Print one integer — the maximum number of overlapping tasks. -----Examples----- Input 3 1 3 2 5 4 6 Output 2 Input 4 1 2 2 3 3 4 4 5 Output 1 Input 5 1 4 2 5 7 8 3 6 5 7 Output 3 -----Note----- In the first example, the tasks (1, 3) and (2, 5) overlap between time 2 and 3, and the tasks (2, 5) and (4, 6) overlap between time 4 and 5. So, the maximum number of overlapping tasks is 2. In the second example, no two tasks are overlapping, hence the maximum number of overlapping tasks is 1. In the third example, the tasks (1, 4), (2, 5), and (3, 6) overlap between time 3 and 4. So, the maximum number of overlapping tasks is 3.","solution":"def max_overlapping_tasks(n, tasks): Returns the maximum number of overlapping tasks at any given moment. Parameters: n (int): Number of tasks tasks (list of tuples): A list where each tuple contains two integers (start_time, end_time) Returns: int: Maximum number of overlapping tasks events = [] for start, end in tasks: events.append((start, \'start\')) events.append((end, \'end\')) events.sort() max_overlaps = 0 current_overlaps = 0 for time, event in events: if event == \'start\': current_overlaps += 1 max_overlaps = max(max_overlaps, current_overlaps) else: current_overlaps -= 1 return max_overlaps"},{"question":"You are given a grid of size n x m where each cell contains either a 0 or a 1. Your task is to determine if there is a path from the top-left cell (0, 0) to the bottom-right cell (n-1, m-1) such that you can only move to the right or down, and the sum of the values in the cells along this path is equal to k. You can assume that the top-left and bottom-right cells are part of the path and they are both set to 0. **Input** The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. Each test case consists of three lines: - The first line contains three integers n, m, and k (1 ≤ n, m ≤ 20, 1 ≤ k ≤ n * m). - Each of the next n lines contains m integers (0 or 1), representing the grid. **Output** For each test case, print YES if there is a path from the top-left cell to the bottom-right cell with the sum of values equal to k, otherwise print NO. **Examples** Input: ``` 2 3 3 2 0 1 1 1 0 1 1 1 0 2 2 1 0 1 1 0 ``` Output: ``` NO YES ``` **Note** In the first test case, it is not possible to have a path from the top-left to the bottom-right with the sum equal to 2. In the second test case, there is one path down and then right with the sum of 1.","solution":"def is_path_with_sum(grid, n, m, k): from collections import deque def within_bounds(x, y): return 0 <= x < n and 0 <= y < m directions = [(1, 0), (0, 1)] queue = deque([(0, 0, 0)]) # (row, col, sum) visited = set((0, 0)) while queue: x, y, current_sum = queue.popleft() # If we reached the bottom-right corner if x == n - 1 and y == m - 1: return current_sum == k # Explore neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if within_bounds(nx, ny) and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny, current_sum + grid[nx][ny])) return False def process_test_cases(t, test_cases): results = [] for i in range(t): n, m, k = test_cases[i][0] grid = test_cases[i][1] if is_path_with_sum(grid, n, m, k): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a string S containing only \'(\' and \')\'. You need to determine the length of the longest valid (well-formed) parentheses substring. A substring is valid (well-formed) if: 1. Every opening parenthesis \'(\' has a corresponding closing parenthesis \')\'. 2. The corresponding pairs are correctly nested. -----Input----- The first line of input contains an integer T denoting the number of test cases. Each test case consists of one line: the string S. -----Output----- For each test case, output one line containing the length of the longest valid parentheses substring. -----Constraints----- - 1 ≤ T ≤ 50 - 1 ≤ |S| ≤ 100000 -----Example----- Input: 3 (()()) ))(( ()(())))) Output: 6 0 6","solution":"def longest_valid_parentheses(s): Returns the length of the longest well-formed parentheses substring in s. max_len = 0 stack = [-1] for i, ch in enumerate(s): if ch == \'(\': stack.append(i) else: stack.pop() if not stack: stack.append(i) else: max_len = max(max_len, i - stack[-1]) return max_len def process_test_cases(T, test_cases): results = [] for s in test_cases: results.append(longest_valid_parentheses(s)) return results"},{"question":"You are given a string S and an integer N. The string S contains only lowercase letters from \'a\' to \'z\'. Your task is to rotate the string to the right N times. When rotating, the last character of the string moves to the front. If N is larger than the length of the string, continue rotating from the beginning of the string. -----Constraints----- - The length of S is between 1 and 100, inclusive. - N is a non-negative integer. -----Input----- Input is given from Standard Input in the following format: S N -----Output----- Print the rotated string. -----Sample Input----- abcdef 2 -----Sample Output----- efabcd The string \\"abcdef\\" rotated to the right 2 times is \\"efabcd\\".","solution":"def rotate_string(S, N): Rotates the string S to the right N times. Parameters: S (str): The input string consisting of lowercase letters. N (int): The number of times to rotate the string. Returns: str: The rotated string. length = len(S) N = N % length # To handle cases where N is larger than the length of S return S[-N:] + S[:-N]"},{"question":"Mary, a professional gardener, has a rectangular garden divided into an m x n grid of cells, where each cell can either contain a plant or be empty. Mary wants to plant new flowers in some of the empty cells, but she wants to ensure that no two adjacent cells (vertically or horizontally) contain flowers. Your task is to help Mary determine the maximum number of flowers she can plant in the garden without having any two of them in adjacent cells. Input The first line contains two integers, m and n (1 ≤ m, n ≤ 50) — the dimensions of the garden grid. The next m lines each contain n characters, where a dot (\'.\') represents an empty cell, and a hash (\'#\') represents a cell containing a plant or an obstacle. Output Print a single integer — the maximum number of flowers Mary can plant. Examples Input 3 3 .#. ... ..# Output 4 Input 4 4 .... .... .... .... Output 8 Explanation In the first example, one way to plant 4 flowers without any two flowers in adjacent cells is: *F.* **.. *.F# In the second example, one possible optimal solution is: *F*F *F*F *F*F *F*F","solution":"def max_flowers(garden): m = len(garden) n = len(garden[0]) count = 0 for r in range(m): for c in range(n): if garden[r][c] == \'.\': if (r == 0 or garden[r - 1][c] != \'F\') and (c == 0 or garden[r][c - 1] != \'F\'): garden[r][c] = \'F\' count += 1 return count def solve(m, n, garden): garden_grid = [list(row) for row in garden] return max_flowers(garden_grid)"},{"question":"Valid Anagram Checker An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example, \\"listen\\" and \\"silent\\" are anagrams of each other. Write a function that takes two strings as input and determines if they are anagrams of each other. The function should return `True` if the strings are anagrams, and `False` otherwise. The function should be case-insensitive, and you can assume that the input strings do not contain any whitespace or punctuation. Your task You need to write a function that checks if two input strings are anagrams. Examples ```python input: \\"listen\\", \\"silent\\" output: True input: \\"evil\\", \\"vile\\" output: True input: \\"anagram\\", \\"nagaram\\" output: True input: \\"rat\\", \\"car\\" output: False input: \\"binary\\", \\"brainy\\" output: True input: \\"hello\\", \\"bye\\" output: False ``` Constraints * The input strings will only contain lowercase English letters. * The length of the strings will be between 1 and 1000 inclusive. You may use the following function signature: ```python def is_anagram(str1: str, str2: str) -> bool: pass ```","solution":"def is_anagram(str1: str, str2: str) -> bool: Determines if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. return sorted(str1.lower()) == sorted(str2.lower())"},{"question":"A new startup Byteland Transit is planning to open a bus service that operates between different locations in the city. To ensure smooth operations, they need an optimal schedule to avoid any overlaps in bus services. Each bus route has a start and end time, and a bus route is considered active during this time interval. The startup has hired you to determine the minimum number of buses required to cover all the routes without any overlap in active times. ------ Input ------ Input will begin with an integer T, the number of test cases. Each test case begins with an integer N, the number of bus routes. Two lines follow, each with exactly N positive integers. The i-th integer of the first line is the start time of the i-th bus route, and the i-th integer of the second line is the end time of the i-th bus route (which will be strictly greater than the start time). ------ Output ------ For each test case, print the minimum number of buses required to cover all the routes without overlap. ------ Constraints ------ T≤50 N≤50 All start/end times will be between 1 and 1000, inclusive ----- Sample Input 1 ------ 2 3 1 3 5 4 8 9 4 2 4 6 7 5 7 8 10 ----- Sample Output 1 ------ 2 2","solution":"def min_buses_needed(T, test_cases): results = [] for i in range(T): N = test_cases[i][0] start_times = test_cases[i][1] end_times = test_cases[i][2] intervals = sorted(zip(start_times, end_times), key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in intervals: if start >= last_end_time: count += 1 last_end_time = end results.append(count) return results # Test driver function def get_min_buses(T, test_cases): results = min_buses_needed(T, test_cases) for result in results: print(result) # Example Inputs T = 2 test_cases = [ (3, [1, 3, 5], [4, 8, 9]), (4, [2, 4, 6, 7], [5, 7, 8, 10]) ] get_min_buses(T, test_cases) # Expected: 2, 2"},{"question":"Given a singly linked list and a key, write a function to partition the linked list such that all nodes less than the key come before nodes greater than or equal to the key. The original relative order of the nodes in each of the two partitions should be preserved. Example 1: Input: Head: 1 -> 4 -> 3 -> 2 -> 5 -> 2 Key: 3 Output: 1 -> 2 -> 2 -> 4 -> 3 -> 5 Explanation: Nodes with values less than 3 come first, followed by nodes with values greater than or equal to 3. The relative order remains the same. Example 2: Input: Head: 2 -> 1 Key: 2 Output: 1 -> 2 Explanation: Nodes with values less than 2 come first, followed by nodes with values greater than or equal to 2. Your Task: You do not need to read input or print anything. Your task is to complete the function partition(head, x) that takes the head of the linked list and the key as input parameters and returns the head of the modified linked list. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= Number of nodes <= 10^5 -10^5 <= Node value <= 10^5","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def partition(head, x): Partitions the linked list such that all nodes less than x come before nodes greater than or equal to x. The relative order of the nodes in each partition is preserved. if head is None: return None less_head = ListNode(0) greater_head = ListNode(0) less = less_head greater = greater_head while head: if head.val < x: less.next = head less = less.next else: greater.next = head greater = greater.next head = head.next # End the list `greater` greater.next = None # Connect the two lists less.next = greater_head.next return less_head.next"},{"question":"Given a list of integers, write a function that returns the top 3 highest unique values from the list in descending order. If there are less than 3 unique values, the function should return all the unique values in descending order. ```python def top_three_highest(numbers): # Your code here # Example usage: print(top_three_highest([4, 1, 4, 3, 2, 5])) # Output: [5, 4, 3] print(top_three_highest([10, 10, 10])) # Output: [10] print(top_three_highest([])) # Output: [] ``` Ensure your function handles edge cases, such as when the list is empty or contains duplicates.","solution":"def top_three_highest(numbers): Returns the top 3 highest unique values from the list in descending order. If there are less than 3 unique values, it returns all unique values in descending order. # Convert to set to get unique values unique_numbers = list(set(numbers)) # Sort the unique values in descending order unique_numbers.sort(reverse=True) # Return the top 3 or all if less than 3 unique values return unique_numbers[:3]"},{"question":"In a hospital, a system needs to be developed to manage appointment schedules efficiently. Each appointment is represented by a start time and end time, and the hospital must ensure that no two appointments overlap in order to avoid conflicts. Your task is to implement a function to find the maximum number of non-overlapping appointments that can be scheduled from a given list of appointment times. -----Input----- - The first line of the input contains an integer n (1 le n le 1000) — the number of appointments. - Each of the next n lines contains two integers start_i and end_i (0 le start_i < end_i le 1440) — the start time and end time of the i-th appointment in minutes from the start of the day (00:00). -----Output----- Print a single integer — the maximum number of non-overlapping appointments that can be scheduled. -----Explanation of the first sample input----- There are 3 appointments provided with start and end times. By selecting the first and third appointments, which do not overlap, the hospital can schedule a maximum of 2 non-overlapping appointments. -----Examples----- Sample Input 1: 3 60 120 130 170 100 240 Sample Output 1: 2 Sample Input 2: 4 0 30 5 10 15 20 30 40 Sample Output 2: 3","solution":"def max_non_overlapping_appointments(n, appointments): Returns the maximum number of non-overlapping appointments that can be scheduled. Parameters: n (int): Number of appointments. appointments (list of tuples): Each tuple contains the start and end time of an appointment. Returns: int: Maximum number of non-overlapping appointments. # Sort by end time appointments.sort(key=lambda x: x[1]) count = 0 last_end_time = -1 for start, end in appointments: if start >= last_end_time: count += 1 last_end_time = end return count"},{"question":"```markdown Introduction A palindrome is a string that reads the same forward and backward, e.g., \\"radar\\" or \\"level\\". Task: Write a function that takes a string as input and checks if it can be rearranged to form a palindrome. If such a rearrangement is possible, return `True`; otherwise, return `False`. ```","solution":"from collections import Counter def can_form_palindrome(s): Checks if the given string can be rearranged to form a palindrome. Parameters: s (str): The input string to check. Returns: bool: True if the string can be rearranged to form a palindrome, False otherwise. char_count = Counter(s) odd_counts = sum(1 for count in char_count.values() if count % 2 != 0) return odd_counts <= 1"},{"question":"# Optimizing Package Sizes A logistics company is working on optimizing their package distribution system. The company needs to distribute a number of items into different packages such that the packages are as evenly filled as possible. You are given a list of items with their respective weights and the number of packages available. Write a program to determine the minimum possible weight difference between the heaviest and the lightest package after all items are distributed. Input The first line contains two integers, n (1 ≤ n ≤ 1000) — the number of items, and k (1 ≤ k ≤ n) — the number of packages. The second line contains n integers w1, w2, ..., wn (1 ≤ wi ≤ 1000) — the weights of the items. Output Print a single integer — the minimum possible weight difference between the heaviest and the lightest package. Examples Input 5 2 8 1 7 3 9 Output 2 Input 6 3 5 8 6 4 7 2 Output 1","solution":"def minimum_weight_difference(n, k, weights): Determine the minimum possible weight difference between the heaviest and the lightest package. Parameters: - n: number of items - k: number of packages - weights: list of integers representing the weights of the items Returns: - int: minimum possible weight difference # Sort weights in descending order weights.sort(reverse=True) # Initialize an array to store package weights package_weights = [0] * k # Distribute items into packages for weight in weights: # Find the package with the minimum weight currently min_index = package_weights.index(min(package_weights)) # Add the current item weight to this package package_weights[min_index] += weight # The difference between the heaviest and lightest package return max(package_weights) - min(package_weights)"},{"question":"You have been given two strings, `pattern` and `text`, both consisting of lowercase Latin letters. Determine if the `text` contains the `pattern` as a substring by checking for an exact match, considering only lowercase letters. Input The first line contains the string `pattern` and the second line contains the string `text`. The lengths of these strings do not exceed 100 symbols, and neither of them is empty. Output Print \\"YES\\" if the `pattern` is found in the `text`, otherwise print \\"NO\\". Examples Input abc abcdefg Output YES Input hello worldhello Output YES Input test testing Output YES Input abc defghijk Output NO","solution":"def is_substring(pattern, text): Determine if the pattern is a substring of the text. Args: pattern (str): The pattern string to search for in the text. text (str): The text string where the search is performed. Returns: str: \\"YES\\" if the pattern is found in the text, otherwise \\"NO\\". return \\"YES\\" if pattern in text else \\"NO\\""},{"question":"Implement a function `find_highest_peak(matrix)` that takes a 2D list `matrix` of integers, where each integer represents the elevation at that coordinate. The function should return the coordinates of the highest peak in the given matrix. A peak is defined as a cell that is not lower than any of its 8 neighbors. If there are multiple peaks with the same elevation, return the coordinates of the peak that appears first when traversing the matrix in row-major order (i.e., top to bottom, left to right). The coordinates should be returned as a tuple `(row, col)`. # Example: For the matrix: ``` [ [1, 4, 3], [6, 7, 2], [5, 2, 9] ] ``` `find_highest_peak(matrix)` should return `(2, 2)`. # Constraints: - The input matrix will have at least one row and one column. - There\'s no guarantee on the upper limits of the rows and columns, but each dimension of the matrix will contain at least one element. # Solution Outline: 1. Traverse each cell in the matrix in row-major order. 2. For each cell, check all its 8 neighbors (up, down, left, right, and the four diagonals). 3. Determine if the current cell is a peak. 4. Track the coordinates of the highest peak found during traversal. 5. Return the coordinates of the highest peak found.","solution":"def find_highest_peak(matrix): def is_peak(matrix, row, col): deltas = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)] current = matrix[row][col] for dr, dc in deltas: r, c = row + dr, col + dc if 0 <= r < len(matrix) and 0 <= c < len(matrix[0]): if matrix[r][c] > current: return False return True best_peak = None best_height = float(\\"-inf\\") for row in range(len(matrix)): for col in range(len(matrix[0])): if is_peak(matrix, row, col): if matrix[row][col] > best_height: best_peak = (row, col) best_height = matrix[row][col] return best_peak"},{"question":"You are given a table with N rows and M columns, each cell filled with either a 0 or a 1. The table represents a grid, and you are standing at the top-left corner (cell (1,1)). Your goal is to reach the bottom-right corner (cell (N,M)), but you can only move right or down. Additionally, if you step on a cell containing a 0, your movement continues normally. However, if you step on a cell containing a 1, you can take an extra step in any of the four directions (up, down, left, right) if it helps you move closer to your destination (but you can\'t step outside the grid boundaries). Given this grid and your starting point, calculate the minimum number of moves needed to reach the bottom-right corner. Input: - The first line contains an integer T, the number of test cases. - Each test case starts with two integers N and M, the number of rows and columns of the grid. - The next N lines contain M integers each (0 or 1), representing the grid. Output: - For each test case, print the minimum number of moves to reach the bottom-right corner. If it is not possible to reach the bottom-right corner, print -1. Constraints: - 1 ≤ T ≤ 100 - 1 ≤ N, M ≤ 1000 - The grid contains only 0s and 1s. Sample Input: 2 3 4 0 0 0 0 1 0 1 0 0 0 0 0 2 2 0 1 1 0 Sample Output: 5 2 Explanation: For the first test case, one possible path is: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) which is 5 moves. For the second test case, one possible path is: (1,1) -> (1,2) -> (2,2). Since stepping on (1,2) which contains a 1 allows an extra move reaching (2,2) in 2 moves.","solution":"from collections import deque def min_moves_to_reach_end(grid, N, M): \'\'\' This function calculates the minimum number of moves needed to reach the bottom-right corner. \'\'\' directions = [(1, 0), (0, 1), (-1, 0), (0, -1)] def bfs(): # BFS to find the shortest path queue = deque([(0, 0, 0)]) # (row, col, distance) visited = set((0, 0)) while queue: r, c, dist = queue.popleft() # Check if we have reached the bottom-right corner if r == N - 1 and c == M - 1: return dist for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and (nr, nc) not in visited: if grid[nr][nc] == 0: queue.append((nr, nc, dist + 1)) visited.add((nr, nc)) else: # We can take an additional step to any direction for er, ec in directions: er, ec = nr + er, nc + ec if 0 <= er < N and 0 <= ec < M and (er, ec) not in visited: queue.append((er, ec, dist + 2)) visited.add((er, ec)) return -1 return bfs() def process_test_cases(t, test_cases): results = [] for case in test_cases: N, M, grid = case[\'N\'], case[\'M\'], case[\'grid\'] result = min_moves_to_reach_end(grid, N, M) results.append(result) return results"},{"question":"Given a string s of length n, implement a function that returns a list of all the unique permutations of the string. The returned list should be sorted in lexicographical order. Example 1: Input: s = \\"ABC\\" Output: [\\"ABC\\", \\"ACB\\", \\"BAC\\", \\"BCA\\", \\"CAB\\", \\"CBA\\"] Explanation: The six different permutations of the string ABC are \\"ABC\\", \\"ACB\\", \\"BAC\\", \\"BCA\\", \\"CAB\\", and \\"CBA\\". These are already in lexicographical order. Example 2: Input: s = \\"AAB\\" Output: [\\"AAB\\", \\"ABA\\", \\"BAA\\"] Explanation: The three different permutations of the string AAB are \\"AAB\\", \\"ABA\\", and \\"BAA\\". These are sorted in lexicographical order. Your Task: You don\'t need to read input or print anything. Your task is to implement the function getAllUniquePermutations() which takes a string s and returns a list of all unique permutations in lexicographical order. Expected Time Complexity: O(n * n!) Expected Auxiliary Space: O(n * n!) Constraints: 1 <= n <= 8 s consists of uppercase English letters only.","solution":"from itertools import permutations def getAllUniquePermutations(s): Returns a list of all unique permutations of the string s sorted in lexicographical order. # Generate all permutations of the string all_perms = permutations(s) # Remove duplicates using a set and convert to a sorted list unique_perms = sorted(set([\'\'.join(p) for p in all_perms])) return unique_perms"},{"question":"Atul is an enthusiastic botanist who loves growing different species of plants. He has recently taken an interest in a peculiar species that grows every day at a unique rate. Atul records the height of the plant every day starting from day 1 till day N. One evening, Atul was curious whether it\'s possible to have a record-breaking height on a given day M. A day M is termed a record-breaking day if: 1. The height of the plant on day M is greater than any of the previous days 1, 2,..., M-1. 2. If M is not the last day (M < N), the height on day M must also be greater than the height on day M+1. Given the heights of the plant recorded over N days, Atul wants to find out how many such record-breaking days are there. Input: The first line contains an integer T, denoting the number of testcases. Each of the next T blocks contains: - The first line contains a single integer N (1 ≤ N ≤ 1000), the number of days. - The second line contains N integers h1, h2, ..., hN (0 ≤ hi ≤ 1000), the heights of the plant over N days. Output: For each testcase, print the number of record-breaking days. Example: Input: 2 8 1 2 0 7 2 0 2 0 4 4 8 15 16 Output: 2 1 Explanation: In the first testcase, the record-breaking days are day 2 (height=2) and day 4 (height=7). In the second testcase, the only record-breaking day is day 4 (height=16).","solution":"def count_record_breaking_days(T, testcases): results = [] for testcase in testcases: N = testcase[0] heights = testcase[1] record_breaking_days = 0 max_height = float(\'-inf\') for i in range(N): if heights[i] > max_height: if i == N - 1 or heights[i] > heights[i + 1]: record_breaking_days += 1 max_height = max(max_height, heights[i]) results.append(record_breaking_days) return results"},{"question":"# Reversing a Subarray Input The input contains three lines: 1. An integer n (1 ≤ n ≤ 100) representing the number of elements in the array. 2. n space-separated integers, representing the elements of the array. 3. Two integers l and r (1 ≤ l < r ≤ n) indicating the indices of the subarray to be reversed. Output Output the modified array with the subarray from index l to r reversed. Examples Input 5 1 2 3 4 5 2 4 Output 1 2 5 4 3 Input 6 10 20 30 40 50 60 1 6 Output 60 50 40 30 20 10","solution":"def reverse_subarray(n, array, l, r): Reverses the subarray from index l to r (both inclusive) in the given array. Parameters: n (int): Number of elements in the array. array (list): The list of elements in the array. l (int): Starting index of the subarray to be reversed (1-based index). r (int): Ending index of the subarray to be reversed (1-based index). Returns: list: The modified array with the specified subarray reversed. # Convert to 0-based indexing for l and r l -= 1 r -= 1 # Reverse the subarray array[l:r+1] = array[l:r+1][::-1] return array"},{"question":"Nina has a small garden where she grows different types of flowers. Each day, she waters the flowers with a specific amount of water. Depending on the type of flower, it consumes a different amount of water each day. Nina wants to make sure that she waters all her flowers properly by equally distributing the water over a period of days. Nina wants to know the minimal number of days required to evenly distribute the given amount of water to all the flowers, so that each flower receives the exact total amount of water it needs. Your task is to help Nina determine the minimal number of days needed to water her flowers. -----Input----- The first line contains an integer n (1 ≤ n ≤ 100) — the number of types of flowers in Nina’s garden. The second line contains n positive integers w1, w2, ..., wn (1 ≤ wi ≤ 1000), where wi represents the amount of water required by the i-th type of flower in total. The third line contains an integer T (1 ≤ T ≤ 1000), representing the amount of water Nina can distribute each day. -----Output----- In a single line, print the minimal number of days required for Nina to distribute the exact total amount of water needed by all the flowers. -----Examples----- Input 3 4 5 6 3 Output 5 Input 2 10 10 5 Output 4 -----Note----- In the first sample, Nina needs to distribute a total of 4+5+6=15 units of water. Each day, she can distribute 3 units of water. Therefore, it will take her 15/3 = 5 days. In the second sample, the total required amount of water is 10+10=20. Each day, she can distribute 5 units of water. Therefore, it will take her 20/5 = 4 days.","solution":"def minimal_days_to_water_all_flowers(n, water_needs, T): Determines the minimal number of days required to water all types of flowers with a given amount of water per day. :param n: Integer, number of types of flowers. :param water_needs: List of integers, each representing the total amount of water required by each type of flower. :param T: Integer, the amount of water Nina can distribute each day. :return: Integer, the minimal number of days required. total_water_needed = sum(water_needs) minimal_days = (total_water_needed + T - 1) // T # Divides and rounds up return minimal_days"},{"question":"Alice owns a collection of distinct books, each of which has a unique identifier. She likes to arrange her books on a shelf in alphabetical order by their identifier. However, due to some limitations, she can only move one book to another position at a time. She wants to know the minimum number of such moves required to arrange all her books in alphabetical order. Write a function that determines the minimum number of moves required to sort Alice\'s books. -----Input----- The input consists of multiple test cases. The first line contains a single integer t (1 le t le 100) — the number of test cases. Each test case consists of two lines: - The first line contains one integer n (1 le n le 100) — the number of books. - The second line contains n distinct strings a_1, a_2, ..., a_n (1 le text{length of } a_i le 50) — the identifiers of the books. -----Output----- For each test case, output a single line containing the minimum number of moves required to arrange the books in alphabetical order. -----Examples----- Input 2 4 eat sleep code repeat 3 book cat apple Output 2 1 -----Explanation----- In the first test case, to sort \\"eat sleep code repeat\\" in alphabetical order, you may: 1. Move \\"code\\" to the position after \\"eat”. 2. Move \\"repeat\\" to the position after \\"sleep”. In total, 2 moves are required. In the second test case, to sort \\"book cat apple\\" in alphabetical order, you only need: 1. Move \\"apple\\" to the first position. In total, 1 move is required.","solution":"def minimum_moves_to_sort_books(test_cases): results = [] for case in test_cases: n, books = case sorted_books = sorted(books) longest_increasing_subsequence_length = 0 dp = [1] * n for i in range(n): for j in range(i): if books[j] <= books[i]: dp[i] = max(dp[i], dp[j] + 1) longest_increasing_subsequence_length = max(longest_increasing_subsequence_length, dp[i]) results.append(n - longest_increasing_subsequence_length) return results # Example usage: # test_cases = [(4, [\\"eat\\", \\"sleep\\", \\"code\\", \\"repeat\\"]), (3, [\\"book\\", \\"cat\\", \\"apple\\"])] # print(minimum_moves_to_sort_books(test_cases)) # Output: [2, 1]"},{"question":"In a given string, find the first repeating character. If there are no repeating characters, return \'-1\'. A repeating character is defined as a character that appears more than once in the string. Input The input consists of a single line containing a string of lowercase alphabetic characters with a maximum length of 1000. Output Output the first repeating character in the string. If no character repeats, output \'-1\'. Constraints 1 ≤ Length of the string ≤ 1000 SAMPLE INPUT 1 abca SAMPLE OUTPUT 1 a SAMPLE INPUT 2 abcdef SAMPLE OUTPUT 2 -1 SAMPLE INPUT 3 geeksforgeeks SAMPLE OUTPUT 3 e","solution":"def first_repeating_character(s): Returns the first repeating character in the string s. If no character repeats, return \'-1\'. seen = set() for char in s: if char in seen: return char seen.add(char) return \'-1\'"},{"question":"Given an array of integers representing the daily temperatures, produce a new array wherein each element is the number of days until a warmer temperature. If there is no future day for which this is possible, put 0 for the respective day. Example 1: Input: temperatures = [73, 74, 75, 71, 69, 72, 76, 73] Output: [1, 1, 4, 2, 1, 1, 0, 0] Explanation: - For day 0: the next warmer day is day 1 (74 > 73), thus the answer for day 0 is 1. - For day 1: the next warmer day is day 2 (75 > 74), thus the answer for day 1 is 1. - For day 2: the next warmer day is day 6 (76 > 75), thus the answer for day 2 is 4. - For day 3: the next warmer day is day 4 (72 > 71), thus the answer for day 3 is 2. - For day 4: the next warmer day is day 5 (72 > 69), thus the answer for day 4 is 1. - For day 5: the next warmer day is day 6 (76 > 72), thus the answer for day 5 is 1. - For day 6: there is no future day when the temperature is warmer, thus the answer for day 6 is 0. - For day 7: there is no future day when the temperature is warmer, thus the answer for day 7 is 0. Example 2: Input: temperatures = [30, 40, 50, 60] Output: [1, 1, 1, 0] Explanation: - For day 0: the next warmer day is day 1 (40 > 30), thus the answer for day 0 is 1. - For day 1: the next warmer day is day 2 (50 > 40), thus the answer for day 1 is 1. - For day 2: the next warmer day is day 3 (60 > 50), thus the answer for day 2 is 1. - For day 3: there is no future day when the temperature is warmer, thus the answer for day 3 is 0. Your Task: You don\'t need to read or print anything. Your task is to complete the function dailyTemperatures() which takes an array of integers temperatures as input and returns an array of integers representing the number of days until a warmer temperature. Expected Time Complexity: O(N) Expected Space Complexity: O(N) Constraints: 1 ≤ temperatures.length ≤ 10^5 30 ≤ temperatures[i] ≤ 100","solution":"def dailyTemperatures(temperatures): Given a list of daily temperatures, return a list such that, for each day in the input, the output tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. n = len(temperatures) answer = [0] * n stack = [] for i in range(n): while stack and temperatures[i] > temperatures[stack[-1]]: idx = stack.pop() answer[idx] = i - idx stack.append(i) return answer"},{"question":"The city of Modulistan is hosting a special event, and they are decorating the main street with a series of beautiful lanterns. The street is represented by a sequence of n consecutive segments, lined up in a row. Each lantern on these segments has a brightness level b_i. If the brightness of a lantern reaches 0 or below, it is considered broken. To adjust the ambiance, the Modulistan organizers need the total brightness of the street to be exactly 0. In order to achieve that, they have a special dimmer device that can be used on any lantern segment to decrease its brightness by 1 and each of its adjacent segments\' brightness by 0.5. The goal is to calculate the minimum number of dimmer device uses needed to make the total brightness of the street exactly 0. -----Input----- The first line contains one integer n (2 le n le 2 cdot 10^5) — the number of segments. The second line contains the sequence of integers b_1, b_2, dots, b_n (-10^6 le b_i le 10^6), where b_i is the initial brightness of the i-th lantern. -----Output----- Print one integer — the minimum number of dimmer device uses needed to make the total brightness of the street exactly 0. -----Examples----- Input 5 3 1 -2 4 -1 Output 6 Input 3 2 -1 2 Output 3 Input 4 3 -3 3 -3 Output 4 -----Note----- In the first example, reducing the brightness of lantern segments 2 and 4 six times results in the total brightness being 0. For example, you can decrease the brightness of segments 2 and 4 each three times. After these operations, the brightness levels will be [1.5, -1, -3.5, 0, -1.5], which sums to exactly 0. In the second example, reducing the brightness of each lantern once will make the total brightness exactly 0: [1.5, -1.5, 1.5]. In the third example, the brightness can be balanced by reducing each segment exactly once.","solution":"def minimum_dimmer_uses(n, brightness): This function calculates the minimum number of dimmer uses needed to make the total brightness of the street exactly 0. Arguments: n -- Integer, the number of segments. brightness -- List of integers, the initial brightness of each segment. Returns: Integer, the minimum number of dimmer uses. total_brightness = sum(brightness) # Calculate the number of dimmer uses needed to negate the total brightness dimmer_uses = abs(total_brightness) return dimmer_uses"},{"question":"Mary is an ecologist who works in a national park. She is studying the population of a rare species of birds that live in various sections of the park. The park is divided into n sections connected by m trails, and each section has a unique index from 1 to n. Mary wants to know the number of distinct bird populations she will encounter if she starts from a given section and traverses the park through the trails without revisiting any section. Two connected sections are considered to have the same bird population. Given the structure of the park and the starting section, help Mary determine how many distinct bird populations there are in the subgraph of the park she can visit starting from the given section. -----Input----- The first line of the input contains two integers n and m (1 leq n, m leq 10^4), the number of sections and the number of trails in the park, respectively. Each of the next m lines contains two integers u and v (1 leq u, v leq n), indicating that there is a trail between section u and section v. The last line contains a single integer s (1 leq s leq n), the starting section for Mary\'s traversal. -----Output----- Output a single integer, the number of distinct bird populations Mary will encounter starting from section s. -----Examples----- Sample Input 1: 4 3 1 2 2 3 3 4 1 Sample Output 1: 1 Sample Input 2: 6 5 1 2 2 3 4 5 5 6 4 6 4 Sample Output 2: 2","solution":"def count_distinct_bird_populations(n, m, trails, s): from collections import defaultdict, deque # Build adjacency list adjacency_list = defaultdict(list) for u, v in trails: adjacency_list[u].append(v) adjacency_list[v].append(u) # Perform BFS to explore the connected component visited = [False] * (n + 1) queue = deque([s]) visited[s] = True while queue: current = queue.popleft() for neighbor in adjacency_list[current]: if not visited[neighbor]: visited[neighbor] = True queue.append(neighbor) distinct_populations = sum(visited) return distinct_populations"},{"question":"# Objective Determine the maximum sum you can get by selecting elements from an array with the constraint that no two selected elements are adjacent. Function Signature ```python def max_non_adjacent_sum(nums: List[int]) -> int ``` Input - A list of integers `nums` with `n` elements, where `1 ≤ n ≤ 10^5` and `-10^4 ≤ nums[i] ≤ 10^4`. Output - Return the maximum sum of non-adjacent elements. Example ```python max_non_adjacent_sum([3, 2, 5, 10, 7]) # output: 15 ``` **Explanation:** Choosen elements are 3, 5, and 7. Their sum is 15. ```python max_non_adjacent_sum([3, 2, 7, 10]) # output: 13 ``` **Explanation:** Chosen elements are 3 and 10. Their sum is 13. Note: Consider edge cases such as an array with all negative numbers or an array with alternating high and low values. Use dynamic programming to achieve an optimal solution.","solution":"from typing import List def max_non_adjacent_sum(nums: List[int]) -> int: if not nums: return 0 if len(nums) == 1: return max(0, nums[0]) # Initialize two variables to store the maximum sum till the previous element and the one before it. prev1 = max(0, nums[0]) prev2 = 0 for num in nums[1:]: current = max(prev1, prev2 + num) prev2 = prev1 prev1 = current return prev1"},{"question":"Fashion designer Sally is creating a new line of t-shirts, each with a unique print design. She has a collection of design phrases, and each phrase can contain any of the 26 lowercase Latin letters. However, Sally only has a limited number of certain letters available for all the t-shirts combined. She wants to know if she can create prints for all the given designs with the available letters. Given the list of design phrases and the available letters, determine whether it is possible to print all design phrases without running out of any required letter. -----Input----- The first line of the input contains a lowercase Latin letter string L, representing the available letters. Each letter can appear multiple times in L according to its availability. The second line of the input contains an integer M denoting the number of design phrases. Each of the following M lines contains a single lowercase Latin letter string Pi, denoting the ith design phrase. -----Output----- Print \\"Possible\\" (without quotes) if all design phrases can be printed with the given letters; otherwise, print \\"Impossible\\" (without quotes). -----Constraints----- - 1 ≤ |L| ≤ 10,000 - 1 ≤ M ≤ 1,000 - 1 ≤ |Pi| ≤ 50 - Each character in L and Pi is a lowercase Latin letter. -----Example----- Input: aabbcc 2 abc bca Output: Possible Input: aabbcc 2 abc d Output: Impossible -----Explanation----- In the first example, both design phrases \\"abc\\" and \\"bca\\" can be created using the available letters in L. In the second example, the letter \'d\' needed for the second design phrase is not in the available letters L.","solution":"from collections import Counter def can_print_designs(available_letters, design_phrases): Determines if all design phrases can be printed with the given letters. :param available_letters: str, available letters :param design_phrases: list of str, design phrases :return: str, \\"Possible\\" if all phrases can be printed, \\"Impossible\\" otherwise available_count = Counter(available_letters) for phrase in design_phrases: phrase_count = Counter(phrase) for char, count in phrase_count.items(): if available_count[char] < count: return \\"Impossible\\" available_count[char] -= count return \\"Possible\\""},{"question":"Waldo is an adventurous traveler who loves to explore different cities. Each city he visits can be represented as a grid of `N` rows and `M` columns. He marks his starting position with \'W\' and all roads he can travel on with \'.\' (dot). There are also buildings represented by \'#\' (hash). Waldo can only move to adjacent cells (left, right, up, or down). Given the map of the city and Waldo\'s starting position, your task is to determine the size of the largest contiguous area he can explore. A contiguous area is defined by connected roads (\'.\') which Waldo can reach, starting from his initial position. Only roads connected directly (not diagonally) count towards the contiguous area. -----Input----- The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 50), the number of rows and columns in the city\'s map. Each of the following `N` lines contain a string of `M` characters, representing the city’s map. There will be exactly one \'W\' in the map. -----Output----- Output a single integer - the size of the largest contiguous area (number of cells) Waldo can explore starting from the position marked with \'W\'. -----Examples----- Sample Input 1: 4 5 #.. ..#.. .W#.. #.. Sample Output 1: 4 Sample Input 2: 3 4 #W#. #. Sample Output 2: 1","solution":"def find_largest_contiguous_area(N, M, city_map): directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] def bfs(start): queue = [start] visited = set([start]) area_size = 1 while queue: x, y = queue.pop(0) for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and city_map[nx][ny] == \'.\' and (nx, ny) not in visited: visited.add((nx, ny)) queue.append((nx, ny)) area_size += 1 return area_size start_position = None for row in range(N): for col in range(M): if city_map[row][col] == \'W\': start_position = (row, col) break if start_position: break if not start_position: return 0 return bfs(start_position)"},{"question":"An amusement park features a new ride consisting of a circular track with n cars numbered from 1 to n moving in a clockwise direction. The ride has a very specific boarding and debarking protocol: 1. Any passenger boarding a car must take an empty car. 2. Once a passenger has boarded a car, the car becomes full. 3. A passenger can board or debark from any car, but only one passenger can deal with a car at a time (either board or debark). The park administration wants to know the number of distinct ways the cars can be filled up sequentially, ensuring that no car which is already filled is used again. A configuration is defined by the order in which the passengers board the cars given the circular nature of the track. -----Input----- The input consists of a single integer, n (2 leq n leq 10^4), the number of cars. -----Output----- Output a single integer – the number of distinct ways the cars can be filled. As the number of ways can be very large, output the result modulo 10^9+7. -----Example----- Input 3 Output 6 -----Explanation----- For n = 3, the cars can be filled in the following distinct sequential orders: 1. 1-2-3 2. 1-3-2 3. 2-1-3 4. 2-3-1 5. 3-1-2 6. 3-2-1","solution":"def number_of_ways_to_fill(n): Returns the number of distinct ways the cars can be filled up sequentially, ensuring that no car which is already filled is used again. MOD = 10**9 + 7 if n < 2: return 0 # The number of distinct ways to fill up `n` cars is simply `n!` (n factorial). # We compute `n! % MOD` to get the result. factorial = 1 for i in range(2, n + 1): factorial = (factorial * i) % MOD return factorial"},{"question":"Sophia is playing a game with an array B initially of length M. She can perform the following operation on B: 1) Pick any index j (1 ≤ j ≤ |B|) such that B_{j} = 1 2) Select any integer Z such that Z ≥ 2 3) Replace B_{j} with Z and insert Z-1 into the array immediately after the new Z Note that the length of the array increases by 1 after each operation. For example, if B = [3, 1, 4], she can select j = 2 and select Z = 3. After the operation the array becomes: [3, underline{1}, 4] rightarrow [3, underline{3}, underline{2}, 4]. Sophia wants to make B such that all elements in B are distinct. Find the minimum number of operations to do so. It is guaranteed that B can be made to have all distinct elements using the above operation. ------ Input Format ------ - The first line contains a single integer T — the number of test cases. Then the test cases follow. - The first line of each test case contains an integer M — the size of the array B. - The second line of each test case contains M space-separated integers B_{1}, B_{2}, …, B_{M} denoting the array B. ------ Output Format ------ For each test case, output the minimum number of operations to make all elements in B distinct. ------ Constraints ------ 1 ≤ T ≤ 10^{5} 1 ≤ M ≤ 10^{5} 1 ≤ B_{i} ≤ 10^{5} - Sum of M over all test cases does not exceed 2 cdot 10^{5}. ----- Sample Input 2 ------ 2 3 2 1 2 4 1 1 1 1 ----- Sample Output 2 ------ 1 3 ----- explanation 2 ------ Test Case 1: We can perform the following operation: - [2, underline{1}, 2] xrightarrow{j = 2, Z = 3} [2, underline{3}, underline{2}, 2]. Now all elements are distinct. Test Case 2: We can perform the following operations: - [underline{1}, 1, 1, 1] xrightarrow{j = 1, Z = 2} [underline{2}, underline{1}, 1, 1, 1] - [underline{2}, 1, underline{1}, 1, 1] xrightarrow{j = 2, Z = 2} [2, underline{2}, underline{1}, 1, 1, 1] - [2, underline{2}, 1, underline{1}, 1, 1] xrightarrow{j = 4, Z = 2} [2, 2, 1, underline{2}, underline{1}, 1, 1]. Now all elements are distinct.","solution":"def min_operations_to_make_distinct(t, cases): results = [] for m, b in cases: count = {} operations = 0 for num in b: if num not in count: count[num] = 0 count[num] += 1 for num in b: while count[num] > 1: operations += 1 new_num = num while new_num in count: new_num += 1 count[new_num] = 1 count[num] -= 1 results.append(operations) return results"},{"question":"You are a software engineer at a logistics company, and your team is responsible for developing a route optimization system. Your task is to find the minimum cost to travel from a starting point to a destination on a grid-based map, where each cell has a specific cost to enter. The grid has a height of H and a width of W, and the cost of entering each cell is given in a 2D list. You can only move up, down, left, or right, but not diagonally. Given the grid dimensions and the cost matrix, write a function to compute the minimum travel cost from the top-left corner (0, 0) to the bottom-right corner (H-1, W-1). Input: - The first line contains two integers H and W (1 ≤ H, W ≤ 100) - the height and width of the grid. - The next H lines each contain W integers (0 ≤ cost ≤ 1000) - the cost matrix where cost[i][j] represents the cost of entering cell (i, j). Output: - A single integer representing the minimum travel cost to get from the top-left to the bottom-right corner of the grid. Example: Input: 3 3 1 3 1 1 5 1 4 2 1 Output: 7 Explanation: The optimal path with the minimum cost is: (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2) with a total cost of 1 + 1 + 4 + 2 + 1 = 7.","solution":"import heapq def min_cost_to_travel(H, W, cost): This function returns the minimum cost to travel from the top-left corner to the bottom-right corner of a grid. # Directions: right, down, left, up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Priority queue to store (cost, x, y) pq = [(cost[0][0], 0, 0)] # Distance matrix initialized to infinity dist = [[float(\'inf\')] * W for _ in range(H)] dist[0][0] = cost[0][0] while pq: current_cost, x, y = heapq.heappop(pq) # If we have reached the bottom-right corner if x == H-1 and y == W-1: return current_cost # Visit all neighbors for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < H and 0 <= ny < W: new_cost = current_cost + cost[nx][ny] if new_cost < dist[nx][ny]: dist[nx][ny] = new_cost heapq.heappush(pq, (new_cost, nx, ny)) return dist[H-1][W-1]"},{"question":"Time Limit: 8 sec / Memory Limit: 64 MB You are given a binary tree structure where each node contains a unique integer value. The task is to find the lowest common ancestor (LCA) of two given nodes in the tree. The LCA of two nodes `p` and `q` in a binary tree is defined as the lowest node that has both `p` and `q` as descendants, where we assume that each node is also a descendant of itself. Your task is to write a function that takes three arguments: the root of the binary tree and the two integer values `p` and `q`. The function should return the integer value of the LCA node. # Input Format - The first line contains an integer `n` (1 ≤ n ≤ 10^4), the number of nodes in the binary tree. - The next `n` lines each contain three integers `x`, `y`, and `z`, where `x` is the value of the current node, `y` is the value of the left child, and `z` is the value of the right child. If `y` or `z` is `-1`, it means there is no respective child for the node. - The last line contains two integers `p` and `q` (1 ≤ p, q ≤ 10^4), the values of the nodes for which you need to find the LCA. # Output Format - Output a single integer representing the value of the lowest common ancestor node of the given nodes `p` and `q`. # Example Input ``` 9 3 5 1 5 6 2 1 0 8 6 -1 -1 2 7 4 0 -1 -1 8 -1 -1 7 -1 -1 4 -1 -1 5 1 ``` Output ``` 3 ``` Explanation The binary tree in the example is as follows: ``` 3 / 5 1 / / 6 2 0 8 / 7 4 ``` The LCA of nodes `5` and `1` is `3`.","solution":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def build_tree(node_map): if not node_map: return None nodes = {val: TreeNode(val) for val in node_map} for val, (left, right) in node_map.items(): if left != -1: nodes[val].left = nodes[left] if right != -1: nodes[val].right = nodes[right] return nodes def lowest_common_ancestor(root, p, q): if not root or root.val == p or root.val == q: return root left = lowest_common_ancestor(root.left, p, q) right = lowest_common_ancestor(root.right, p, q) if left and right: return root return left if left else right def find_lca(n, tree_data, p, q): node_map = {} for data in tree_data: x, y, z = data node_map[x] = (y, z) nodes = build_tree(node_map) root = next(iter(nodes.values())) # Get any node to start with, as all are connected. lca_node = lowest_common_ancestor(root, p, q) return lca_node.val if lca_node else None"},{"question":"In computer networks, IP addresses are used to identify devices within the network. An IPv4 address consists of four numbers separated by dots, where each number is between 0 and 255. It is possible to represent an IPv4 address in several ways, including binary and hexadecimal formats. In this problem, you are given an IPv4 address in its standard dotted-decimal notation. Your task is to convert this address to its binary representation and print it. Each number in the IPv4 address should be converted to an 8-bit binary number, and the binary numbers should be concatenated together to form the final result. -----Input----- A single line containing an IPv4 address in the format a.b.c.d (0 ≤ a, b, c, d ≤ 255). -----Output----- Print a single string — the IPv4 address in its binary representation. -----Examples----- Input 192.168.0.1 Output 11000000101010000000000000000001 Input 10.0.0.2 Output 00001010000000000000000000000010","solution":"def ipv4_to_binary(ip): Converts an IPv4 address in dotted-decimal notation to a binary string. Parameters: - ip (str): The IPv4 address, e.g., \'192.168.0.1\' Returns: - str: The binary representation of the IP address. parts = ip.split(\'.\') return \'\'.join(format(int(part), \'08b\') for part in parts) # Example Usage: # The output of ipv4_to_binary(\'192.168.0.1\') should be \'11000000101010000000000000000001\'"},{"question":"You are given a list of integers representing the price of different items in a store. Your task is to implement a function that returns the **most expensive item that can be bought with a given budget**. If no item can be bought within the budget, the function should return -1. Example: ```python def most_expensive(items, budget): # Your code here print(most_expensive([150, 20, 35, 75, 100], 50)) # Output: 35 print(most_expensive([5, 10, 12, 8, 7], 6)) # Output: 5 print(most_expensive([300, 150, 200, 350], 100)) # Output: -1 print(most_expensive([20, 30, 50, 25], 25)) # Output: 25 print(most_expensive([60, 40, 20, 80, 100], 70)) # Output: 60 ``` Constraints: - The list of integers will have at least one item and will contain up to 1000 items. - Each item price will be a positive integer not exceeding 10000. - The budget will be a positive integer not exceeding 10000.","solution":"def most_expensive(items, budget): Returns the most expensive item that can be bought with the given budget. If no item can be bought within the budget, returns -1. affordable_items = [item for item in items if item <= budget] if not affordable_items: return -1 return max(affordable_items)"},{"question":"You are given a list of integers. Your task is to perform a series of operations to make all the numbers in the list equal. In a single operation, you can take any integer and either increase or decrease it by 1. You need to find the minimum number of operations required to make all the integers in the list equal. ------ Input ------ The first line contains an integer T, the number of test cases. The first line of each test case contains an integer N, the number of integers in the list. The following line contains N space-separated integers representing the numbers in the list. ------ Output ------ For each test case, output a single line representing the minimum number of operations required. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10,000 1 ≤ sum of N in all test cases ≤ 100,000 -10^9 ≤ array[i] ≤ 10^9 ------ Subtasks ------ Subtask #1 (20 points): 1 ≤ sum of N in all test-cases ≤ 1,000 Subtask #2 (80 points): original constraints ------ Sample Input 1 ------ 2 3 1 2 3 4 10 10 10 10 ------ Sample Output 1 ------ 2 0","solution":"def min_operations_to_equal_elements(test_cases): Given a list of test cases with integers, returns the minimum number of operations required to make all elements in each list equal. results = [] for case in test_cases: N, nums = case median = sorted(nums)[N // 2] operations = sum(abs(num - median) for num in nums) results.append(operations) return results"},{"question":"Monica is organizing the groceries in her kitchen. She has a stack of M items, all of which have an expiration date. Each item is described by an expiry period E, which indicates how many days from today the item will expire. Monica wants to arrange her stack of items based on their expiry periods such that the item with the highest expiry period is at the bottom and the item with the lowest expiry period is at the top. She can only perform a special operation called \\"split and merge\\" to sort these items: 1. Monica can split the stack into two contiguous sub-stacks. 2. She can then reverse the order of either of the sub-stacks, and merge the two back by placing one of them either on top of or below the other. Determine the minimum number of \\"split and merge\\" operations required for Monica to sort her stack as desired. ------ Input Format ------ - First line contains an integer M, the number of items in the stack. - Second line contains a sequence of M integers, representing the expiry periods of the items from the top of the stack to the bottom. ------ Output Format ------ - Print the minimum number of \\"split and merge\\" operations required to sort the stack. ------ Constraints ------ 1 ≤ M ≤ 10^5 1 ≤ E_i ≤ 10^5 (where E_i is the expiry period of the i^{th} item) ------ Sample Input 1 ------ 5 4 3 2 5 1 ------ Sample Output 1 ------ 1 ------ Explanation 1 ------ Monica can split the stack into two sub-stacks: [4, 3, 2] and [5, 1]. She can then reverse the first sub-stack to get [2, 3, 4] and merge it below the second sub-stack to achieve the sorted stack [5, 1, 2, 3, 4]. ------ Sample Input 2 ------ 3 3 2 1 ------ Sample Output 2 ------ 0 ------ Explanation 2 ------ The stack is already sorted in descending order, so no operations are required.","solution":"def min_split_and_merge_operations(M, expiry_periods): This function returns the minimum number of \\"split and merge\\" operations required to sort the stack of items based on their expiry periods in descending order. :param M: An integer representing the number of items in the stack. :param expiry_periods: A list of integers where each integer represents an expiry period of the item. :return: An integer representing the minimum number of operations required. if M == 0: return 0 # Check if the array is already sorted in descending order sorted_stack = sorted(expiry_periods, reverse=True) if expiry_periods == sorted_stack: return 0 return 1"},{"question":"You are given a number that represents the total minutes, and you need to convert this into hours and minutes. -----Constraints----- - The input value is a non-negative integer. - 0 leq total_minutes leq 10000 -----Input----- Input is given from Standard Input in the following format: total_minutes -----Output----- Print two space-separated integers representing the number of hours and the remaining number of minutes. -----Sample Input----- 135 -----Sample Output----- 2 15 Explanation: 135 minutes is equal to 2 hours and 15 minutes.","solution":"def convert_minutes(total_minutes): Converts total minutes into hours and minutes. Parameters: total_minutes (int): The total number of minutes to convert. Returns: tuple: A tuple containing two integers - the number of hours and the remaining minutes. hours = total_minutes // 60 minutes = total_minutes % 60 return hours, minutes"},{"question":"Amanda is fond of palindromes. A palindrome is a string that reads the same forwards and backwards. Amanda recently received a sentence and wants to know how many words in the sentence are palindromes. Write a function that takes a sentence as input and returns the number of palindromic words. -----Input----- A single line containing a sentence S consisting of lowercase letters and spaces. The length of the sentence will be between 1 and 100 characters. -----Output----- A single integer representing the number of palindromic words in the sentence. -----Example----- Sample Input 1: racecar anna kayak Sample Output 1: 3 Sample Input 2: hello world Sample Output 2: 0","solution":"def count_palindromic_words(sentence): Returns the number of palindromic words in a sentence. words = sentence.split() palindrome_count = sum(1 for word in words if word == word[::-1]) return palindrome_count"},{"question":"A robot is equipped with a system that allows it to navigate a grid while collecting valuable energy units scattered across its path. The robot starts at the top-left corner of the grid and can move either to the right or down but not diagonally. It collects energy units as it moves to new positions on the grid. The goal is to maximize the total energy collected by the robot when it reaches the bottom-right corner of the grid. You are tasked with finding the maximum energy units the robot can collect along a path from the top-left to the bottom-right of the grid. The grid is given as a matrix of integers, where each integer represents the energy units at that cell. -----Input----- The first line contains two integers, `n` and `m` (1 ≤ n, m ≤ 100), representing the number of rows and columns of the grid, respectively. Each of the next `n` lines contains `m` integers, each representing the energy units at the corresponding cell in the grid. The energy units are integers ranging from 0 to 1000. -----Output----- Print the maximum energy units the robot can collect when reaching the bottom-right corner of the grid. -----Examples----- Input 3 3 1 3 1 1 5 1 4 2 1 Output 12 Input 4 4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Output 73","solution":"def max_energy(n, m, grid): Returns the maximum energy units collected by the robot moving from top-left to bottom-right of the grid. # Create dp table with the same dimensions as grid dp = [[0] * m for _ in range(n)] # Initialize the starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, m): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, n): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, n): for j in range(1, m): dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right corner contains the result return dp[n-1][m-1]"},{"question":"**Dynamic Range Sum Query on Immutable Array** You are given an immutable array of integers. Your task is to efficiently handle multiple range sum queries on this array. For each query, you need to calculate the sum of elements within a specified range (inclusive). # Input - The first line contains two integers, `n` and `q` (1 ≤ n, q ≤ 100000), where `n` is the size of the array, and `q` is the number of queries. - The second line contains `n` integers `a1, a2, ..., an`, where `ai` (-10^4 ≤ ai ≤ 10^4) is the value of the `i`-th element of the array. - The next `q` lines each contain two integers `l` and `r` (1 ≤ l ≤ r ≤ n), representing a query that asks for the sum of the array elements from index `l` to `r` (1-based index). # Output For each query, print the sum of the elements in the specified range on a new line. # Example **Input:** ``` 6 3 1 2 3 4 5 6 1 3 2 5 1 6 ``` **Output:** ``` 6 14 21 ``` # Explanation - The sum of the elements from index 1 to 3 is `1 + 2 + 3 = 6`. - The sum of the elements from index 2 to 5 is `2 + 3 + 4 + 5 = 14`. - The sum of the elements from index 1 to 6 is `1 + 2 + 3 + 4 + 5 + 6 = 21`.","solution":"class NumArray: def __init__(self, nums): self.nums = nums self.prefix_sums = self._compute_prefix_sums(nums) def _compute_prefix_sums(self, nums): prefix_sums = [0] * (len(nums) + 1) for i in range(len(nums)): prefix_sums[i + 1] = prefix_sums[i] + nums[i] return prefix_sums def sumRange(self, left, right): # Convert 1-based index to 0-based index. return self.prefix_sums[right] - self.prefix_sums[left - 1] # Usage example: def main(n, q, array, queries): numArray = NumArray(array) results = [] for l, r in queries: results.append(numArray.sumRange(l, r)) return results"},{"question":"A game involves arranging `n` dominoes in a line. Each domino can either be in a vertical position or fallen to the left or right direction. Specifically, each domino can be one of the following three states: - `|` represents a vertical domino. - `/` represents a domino fallen to the left. - `` represents a domino fallen to the right. The task is to determine the number of dominoes that are either vertical or fallen to the right. -----Input----- The first line contains a single integer `n` (1 le n le 10^5) — the number of dominoes. The following line contains a string of `n` characters, each being `|`, `/`, or ``, representing the state of the respective domino. -----Output----- Print a single integer — the number of dominoes that are vertical or fallen to the right. -----Examples----- Input 1 10 |||////|| Output 1 7 Input 2 5 ///// Output 2 0 Input 3 7 ||||| Output 3 7 -----Explanation----- In the first example, there are 5 vertical dominoes and 2 fallen to the right, making a total of 7. In the second example, all dominoes have fallen to the left, so the result is 0. In the third example, there are 4 vertical dominoes and 3 fallen to the right, making a total of 7.","solution":"def count_vertical_and_right(dominoes): Returns the count of dominoes that are either vertical or fallen to the right. :param dominoes: A string representing the state of each domino. :return: An integer count of vertical (\'|\') and fallen to the right (\'\') dominoes. count = 0 for domino in dominoes: if domino == \'|\' or domino == \'\': count += 1 return count"},{"question":"You are given pairs of integers representing edges in an undirected graph, and your task is to determine if the graph is bipartite. A graph is bipartite if it can be colored using two colors such that no two adjacent vertices share the same color. Input - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two integers V and E, the number of vertices and edges, respectively. - The following E lines each contain two integers u and v representing an edge between vertices u and v. Output - For each test case, output \\"Yes\\" if the graph is bipartite, and \\"No\\" otherwise. Constraints - 1 ≤ T ≤ 10 - 1 ≤ V ≤ 10^3 - 0 ≤ E ≤ 10^4 - 1 ≤ u, v ≤ V Example Input ``` 2 3 3 1 2 2 3 1 3 4 4 1 2 2 3 3 4 4 1 ``` Example Output ``` No Yes ``` Explanation # Test Case 1: The graph has a cycle of odd length (1-2-3-1), hence it is not bipartite. # Test Case 2: The graph can be colored with two colors as follows: - 1 (color A), 2 (color B), 3 (color A), 4 (color B) So, it is bipartite.","solution":"from collections import deque def is_bipartite_graph(V, edges): graph = [[] for _ in range(V + 1)] for u, v in edges: graph[u].append(v) graph[v].append(u) color = [-1] * (V + 1) def bfs(start): queue = deque([start]) color[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if color[neighbor] == -1: color[neighbor] = 1 - color[node] queue.append(neighbor) elif color[neighbor] == color[node]: return False return True for i in range(1, V + 1): if color[i] == -1: if not bfs(i): return \\"No\\" return \\"Yes\\" def process_test_cases(T, test_cases): results = [] for V, E, edges in test_cases: results.append(is_bipartite_graph(V, edges)) return results"},{"question":"Alice loves playing with numbers. She has a series of integers and wants to know if each number in the series is a prime number or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. Write a program to determine if each number in the series is a prime number. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of integers in the series. - Each of the next N lines contains a single integer. ------ Output Format ------ For each integer in the series, output on a new line \\"PRIME\\" if the number is a prime number and \\"NOT PRIME\\" otherwise. You may print each character of the string in either uppercase or lowercase (for example, the strings \\"priME\\", \\"Prime\\", \\"primE\\", and \\"PRIME\\" will all be treated as identical). ------ Constraints ------ 1 ≤ N ≤ 100 1 ≤ xi ≤ 10^6 for each integer xi in the series. ------ Sample Input 1 ------ 5 2 4 5 10 11 ------ Sample Output 1 ------ PRIME NOT PRIME PRIME NOT PRIME PRIME ------ Explanation 1 ------ Test case 1: The number 2 has no divisors other than 1 and 2, so it is a prime number. Test case 2: The number 4 has divisors 1, 2, and 4, so it is not a prime number. Test case 3: The number 5 has no divisors other than 1 and 5, so it is a prime number. Test case 4: The number 10 has divisors 1, 2, 5, and 10, so it is not a prime number. Test case 5: The number 11 has no divisors other than 1 and 11, so it is a prime number.","solution":"import math def is_prime(n): Determines if a number n is prime. Parameters: n (int): The number to check. Returns: str: \\"PRIME\\" if n is a prime number, \\"NOT PRIME\\" otherwise. if n <= 1: return \\"NOT PRIME\\" if n == 2: return \\"PRIME\\" if n % 2 == 0: return \\"NOT PRIME\\" for i in range(3, int(math.sqrt(n)) + 1, 2): if n % i == 0: return \\"NOT PRIME\\" return \\"PRIME\\" def evaluate_numbers(numbers): Evaluates a list of numbers, returning whether each is prime or not. Parameters: numbers (list of int): The list of numbers to evaluate. Returns: list of str: A list of \\"PRIME\\" or \\"NOT PRIME\\" for each number. return [is_prime(number) for number in numbers]"},{"question":"You are given a grid of size n times n filled with zeros. Initially, there is a unique path from the top-left corner to the bottom-right corner where you can only move right or down. You need to place some obstacles (represented as 1s) on this grid such that no path exists from the top-left corner to the bottom-right corner. Write a program that takes the size of the grid n as input and outputs the coordinates of the obstacles to be placed. The coordinates should be in the form (i, j) where 1 leq i, j leq n. The output should be m lines, where m is the number of obstacles. Input Format A single integer n. Constraints 2 leq n leq 100 Output Format Print m lines, where each line contains two space-separated integers denoting the coordinates (i, j) of an obstacle. Sample Input 0 3 Sample Output 0 2 2 2 3 3 2 Explanation 0 The grid after placing the obstacles looks like this: ``` 0 0 0 0 1 1 0 1 0 ``` There is no path from (1, 1) to (3, 3) after placing the obstacles at (2, 2), (2, 3), and (3, 2).","solution":"def place_obstacles(n): Place obstacles such that no path exists from the top-left corner to the bottom-right corner. Parameters: n (int): The size of the grid (n x n) Returns: List[Tuple[int, int]]: List of coordinates where obstacles should be placed obstacles = [] # Start from the second row and second column for i in range(2, n + 1): obstacles.append((i, 1)) # Block the first column except the first row obstacles.append((1, i)) # Block the first row except the first column return obstacles"},{"question":"The city of Verona is well-known for its intricate network of water canals. Each canal connects two islands, and boats can travel in both directions. Romeo and Juliet are planning a journey to celebrate their anniversary, and they want to visit as many islands as possible, starting from a particular island. However, Juliet has a special wish: they should not visit any island more than once (except possibly the starting island to complete a loop). Their boat can only travel for a limited maximum distance, which defines the total length of canals they can pass before running out of fuel for the journey. Can you help them find the maximum number of unique islands they can visit starting from their chosen island within the given maximum travel distance? -----Input----- The first line of the input consists of three integers n, m, and d, where 2 le n le 100 describes the number of islands, 1 le m le 1000 describes the number of canals, and 1 le d le 10000 describes the maximum travel distance in meters. Then follow m lines, each consisting of three integers a, b, and l such that 1 le a < b le n and 1 le l le 1000 describing a canal of length l meters from island a to island b. Finally, there is a line with a single integer s (1 le s le n) describing the island from which Romeo and Juliet start their journey. -----Output----- Print the maximum number of unique islands Romeo and Juliet can visit starting from island s within the given distance d. -----Examples----- Sample Input 1: 4 4 10 1 2 4 2 3 2 3 4 3 4 1 3 1 Sample Output 1: 4 Sample Input 2: 4 4 5 1 2 4 2 3 2 3 4 3 4 1 3 1 Sample Output 2: 3","solution":"def max_unique_islands(n, m, d, canals, s): from collections import defaultdict, deque # Create adjacency list for graph representation graph = defaultdict(list) for a, b, l in canals: graph[a].append((b, l)) graph[b].append((a, l)) def bfs(start, max_distance): visited = set() queue = deque([(start, 0)]) while queue: island, dist = queue.popleft() if island not in visited: visited.add(island) for neighbor, length in graph[island]: if dist + length <= max_distance: queue.append((neighbor, dist + length)) return len(visited) return bfs(s, d)"},{"question":"Driveway is a simple strategic game involving placing segments on a grid and achieving the maximum connection value. The game is played on an n x n grid where you can place segments horizontally or vertically. Each segment has a length of 1 and a weight of 1. Positions are identified by coordinates (x, y), where 1 ≤ x, y ≤ n. The goal is to maximize the total connection value by placing segments in such a way that they connect existing segments either directly or indirectly through other connected segments. The connection value between two segments is defined as the Euclidean distance between their endpoints. You are required to write a program that calculates the maximum possible total connection value for given placements of segments on the grid. Input The first line of the input contains two integers, n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ 5000), where n is the size of the grid, and m is the number of segments already placed on the grid. The next m lines each contain four integers x1, y1, x2, y2 (1 ≤ x1, y1, x2, y2 ≤ n), representing the coordinates of the endpoints of each placed segment. Output Print the maximum possible total connection value (with at least five digits after the decimal point). Example Input 5 3 1 1 1 2 2 3 2 4 3 3 4 3 Output 6.403124237 In this example, segments are placed on the grid, and the program should calculate the maximum possible connection value. The segments can connect directly or indirectly, summing the Euclidean distances between their endpoints to find the optimal configuration that yields the highest total connection value.","solution":"import math def euclidean_distance(x1, y1, x2, y2): return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2) def calculate_max_connection_value(n, m, segments): total_connection_value = 0 for i in range(m): x1, y1, x2, y2 = segments[i] total_connection_value += euclidean_distance(x1, y1, x2, y2) return total_connection_value if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) m = int(data[1]) segments = [] idx = 2 for _ in range(m): x1 = int(data[idx]) y1 = int(data[idx+1]) x2 = int(data[idx+2]) y2 = int(data[idx+3]) segments.append((x1, y1, x2, y2)) idx += 4 result = calculate_max_connection_value(n, m, segments) print(f\\"{result:.9f}\\")"},{"question":"Anya loves to paint, and she recently got M different colors of paints as a present. She has also been collecting different sized canvases to paint on. Her goal is to create distinct paintings by using all the colors on each canvas. However, she has some restrictions: Each color must occupy any number of contiguous sections of the canvas. No two canvases can have the same sequence of color sections. Determine the maximum number of distinct paintings Anya can create using her M colors of paints on canvases of size N. Input format: The first line contains an integer T, denoting the number of test cases. For each test case, the first line contains two integers M and N, the number of colors and the size of the canvas respectively. Output format: For each test case, return the maximum number of distinct paintings Anya can create. Constraints: 1 ≤ T ≤ 10 1 ≤ M ≤ 20 1 ≤ N ≤ 50 SAMPLE INPUT 2 2 3 3 2 SAMPLE OUTPUT 6 15 Explanation For the first test case: With 2 colors and a canvas size of 3, the distinct paintings could be: 1. Color 1 for the first section, color 2 for the second and third sections. 2. Color 1 for the first and second sections, color 2 for the third section. 3. Color 1 for the first section, color 2 for the second section, color 1 for the third section. 4. Color 2 for the first section, color 1 for the second and third sections. 5. Color 2 for the first and second sections, color 1 for the third section. 6. Color 2 for the first section, color 1 for the second section, color 2 for the third section. For the second test case: With 3 colors and a canvas size of 2, the distinct paintings could be a list of fifteen sequences where each combination of the sequences of colors is unique.","solution":"def calculate_distinct_paintings(M, N): Returns the number of distinct paintings possible with M colors and a canvas of size N. return M ** N def max_distinct_paintings(test_cases): results = [] for M, N in test_cases: results.append(calculate_distinct_paintings(M, N)) return results"},{"question":"You are given a grid-based puzzle game. The game takes place on a grid where some cells are empty and some contain obstacles. The goal is to determine if there exists a path from the top-left cell to the bottom-right cell. The path can only be constructed from neighboring cells (horizontally or vertically adjacent) and cannot pass through cells with obstacles. Write a function that takes a 2D grid of dimensions `m x n` and determines if a valid path exists from the top-left cell `(0, 0)` to the bottom-right cell `(m-1, n-1)`. -----Input----- - The input will be a 2D list `grid` containing `m` rows and `n` columns where: - `grid[i][j] == 0` represents an empty cell. - `grid[i][j] == 1` represents an obstacle. -----Output----- - Return `True` if there exists a valid path from the top-left cell to the bottom-right cell, otherwise return `False`. -----Examples----- Sample Input 1: grid = [[0, 0, 1], [0, 1, 0], [0, 0, 0]] Sample Output 1: True Sample Input 2: grid = [[0, 1, 0, 0], [0, 1, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0]] Sample Output 2: False -----Constraints----- - The dimensions of the grid are `1 <= m, n <= 100`. - The grid is guaranteed to have at least one cell. - The top-left cell and the bottom-right cell are always empty (i.e., `grid[0][0] == 0` and `grid[m-1][n-1] == 0`).","solution":"def is_path_exists(grid): Determine if a path exists from the top-left to the bottom-right of the grid. Args: grid: List[List[int]], the 2D grid of obstacles (1) and empty cells (0). Returns: bool: True if a path exists, False otherwise. m, n = len(grid), len(grid[0]) if grid[0][0] == 1 or grid[m-1][n-1] == 1: return False from collections import deque # Directions for moving right, down, left, and up directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize the queue with the starting point queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() # Check if we\'ve reached the bottom-right corner if (x, y) == (m-1, n-1): return True # Check all adjacent cells for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and grid[nx][ny] == 0: queue.append((nx, ny)) visited.add((nx, ny)) return False"},{"question":"You are managing a music streaming service where users can create their own playlists. Each playlist can contain a number of songs, and each song has a unique identifier. Users sometimes create playlists with duplicate songs, but for the purposes of a global playlist count, you want to treat duplicate songs as a single song. Your task is to determine the length of each user\'s playlist after removing duplicates. Write a function that processes M user playlists and outputs the number of unique songs in each playlist. Input Format: - The first line contains the number of user playlists M. - The next M lines each contain a sequence of space-separated integers, where each integer represents a song identifier in a user\'s playlist. Output Format: - For each playlist, output the number of unique songs present. Constraints: - 1 <= M <= 100 - 1 <= number of songs in each playlist <= 1000 - 1 <= song identifier <= 10^6 Sample Input: 3 1 2 2 3 4 5 5 5 5 5 1 1 2 2 3 3 Sample Output: 4 1 3 Explanation: In the first playlist, after removing duplicates, we have songs {1, 2, 3, 4} for a total of 4 unique songs. In the second playlist, all songs are the same, so there is only 1 unique song. In the third playlist, after removing duplicates, we have songs {1, 2, 3} for a total of 3 unique songs.","solution":"def unique_songs_count(playlists): Returns the number of unique songs for each playlist. Parameters: playlists : list of list of int : each inner list contains song ids of a playlist Returns: list of int : number of unique songs in each playlist unique_counts = [] for playlist in playlists: unique_counts.append(len(set(playlist))) return unique_counts"},{"question":"Given a string `s`, determine if it can be rearranged to form a palindrome. For the sake of this problem, return `True` if the input string can be rearranged to form a palindrome, and `False` otherwise. A palindrome is a string that reads the same forward and backward. For example, \\"madam\\" is a palindrome. Note: Consider only alphanumeric characters and ignore case sensitivity. **Function Signature**: ```python def can_form_palindrome(s: str) -> bool: pass ``` **Input/Output Examples**: - can_form_palindrome(\\"racecar\\") should return `True` because \\"racecar\\" is already a palindrome. - can_form_palindrome(\\"aabb\\") should return `True` because it can be rearranged to \\"abba\\" which is a palindrome. - can_form_palindrome(\\"abc\\") should return `False` because it cannot be rearranged to form a palindrome. **Constraints**: - `1 <= len(s) <= 100` - The input string will only consist of printable ASCII characters. - Consider only alphanumeric characters and ignore case sensitivity.","solution":"from collections import Counter def can_form_palindrome(s: str) -> bool: Determine if the input string can be rearranged to form a palindrome. # Normalize the string to include only alphanumeric characters and ignore case s = \'\'.join(filter(str.isalnum, s)).lower() # Count the frequency of each character char_count = Counter(s) # Check the number of characters with odd counts odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can be rearranged to form a palindrome if it has at most one character with an odd count return odd_count <= 1"},{"question":"You are working on a project that involves collecting data from various sources to create a combined report. Each data source is represented as a file that contains a series of records. Every file consists of records with a timestamp and a value. The goal is to merge these records from all files into a single file in increasing order of timestamps. However, there\'s a constraint: the system you\'re working on can only handle merging two files at a time. Therefore, you need to devise a strategy to merge all the files efficiently without exceeding the system\'s limitation. # Input Format: - The first line contains a single integer n (1 leq n leq 100) — the number of files. - Each of the next n lines contains an integer k_i (1 leq k_i leq 100,000), followed by k_i pairs of integers where each pair represents a timestamp and a value. # Output Format: - The final merged file containing all the records sorted by timestamps, represented as a series of pairs. # Example: Input: ``` 3 3 1 100 3 150 5 200 2 2 50 4 250 3 1 60 3 160 6 300 ``` Output: ``` 1 60 1 100 2 50 3 150 3 160 4 250 5 200 6 300 ``` # Notes: - In the input, each line after the first line represents a file. The first number on each of these lines indicates the number of records in that file. - Each file’s records are already sorted by timestamps. - Your task is to merge all these files into a single file where all records are sorted by timestamps. - The output should print timestamps and values in the respective order. Your solution should effectively handle the merging process by utilizing an optimal strategy to minimize the number of merge operations required. Consider leveraging data structures that facilitate efficient merging and tracking of records.","solution":"from heapq import heappush, heappop def merge_files(files): Merges multiple files with sorted records by timestamps. Parameters: files (list of list of tuples): List of files, each file is a list of (timestamp, value) tuples. Returns: list of tuples: Merged list of (timestamp, value) tuples sorted by timestamp. heap = [] index_list = [0] * len(files) result = [] for file_index, file in enumerate(files): if file: heappush(heap, (file[0][0], file[0][1], file_index)) while heap: timestamp, value, file_index = heappop(heap) result.append((timestamp, value)) index_list[file_index] += 1 if index_list[file_index] < len(files[file_index]): next_record = files[file_index][index_list[file_index]] heappush(heap, (next_record[0], next_record[1], file_index)) return result def parse_input(input_text): lines = input_text.strip().split(\'n\') n = int(lines[0]) files = [] for i in range(1, n + 1): parts = list(map(int, lines[i].split())) k = parts[0] file = [(parts[j * 2 + 1], parts[j * 2 + 2]) for j in range(k)] files.append(file) return files def format_output(records): return \'n\'.join(f\\"{timestamp} {value}\\" for timestamp, value in records) # Function to process the input and output def process(input_text): files = parse_input(input_text) merged_records = merge_files(files) return format_output(merged_records)"},{"question":"You are developing a new monitoring system to track user activities on a website. Each user can perform various types of actions like page views, likes, comments, and shares. You are asked to analyze the activities to identify patterns and generate statistics. Specifically, you need to determine the longest sequence of consecutive actions performed by a single user within a given time window. Each action is recorded with a timestamp. Your task is to write a program that reads a list of actions and their timestamps, and outputs the length of the longest sequence of actions by any user within a contiguous time window of exactly `W` seconds. For example, given a list of actions by users and a window `W` of 10 seconds, your program should find and return the longest sequence of actions within any 10-second period for each user. If there are multiple sequences with the same length, you may return any of them. -----Input----- The first line contains two integers `n` and `W` (1 leq n leq 100 000, 1 leq W leq 86 400), the number of actions and the length of the time window in seconds. Each of the following `n` lines contains a string `u` (the user ID), an integer `t` (the timestamp of the action in seconds since the start of the epoch), and a string `a` (the action type). User IDs and action types are alphanumeric strings. Timestamps are given in non-decreasing order. -----Output----- Output a single integer representing the length of the longest sequence of consecutive actions by any user within a time window of `W` seconds. -----Examples----- Sample Input: 8 10 user1 1 view user2 2 like user1 3 comment user1 4 share user2 10 view user2 11 like user1 12 view user1 13 like Sample Output: 3 Explanation: For user1, the longest sequence within any 10-second window is 3 actions (between timestamps 1 and 4, 3 and 12, etc.). For user2, the longest sequence within any 10-second window is 2 actions (between timestamps 10 and 11). Therefore, the maximum sequence length for any user is 3.","solution":"def longest_sequence(n, W, actions): Returns the length of the longest sequence of consecutive actions by any user within a time window of W seconds. :param n: Number of actions :param W: Length of the time window in seconds :param actions: List of actions where each action is a tuple (user_id, timestamp, action_type) :return: Length of the longest sequence of consecutive actions from collections import defaultdict import heapq # Dictionary to hold list of actions for each user user_actions = defaultdict(list) for user_id, timestamp, action_type in actions: user_actions[user_id].append(timestamp) max_length = 0 for user_id, timestamps in user_actions.items(): window_start = 0 for window_end in range(len(timestamps)): while timestamps[window_end] - timestamps[window_start] >= W: window_start += 1 max_length = max(max_length, window_end - window_start + 1) return max_length"},{"question":"Pathfinding on a Grid You are given a grid representing a two-dimensional map composed of cells that are either walkable or blocked. You need to implement a function that finds the shortest path from a starting cell to a target cell, using the A* (A-star) search algorithm. # Grid Explanation: - The grid is represented as a list of strings, where each string represents a row of the grid. - Each character on the string can be either \'.\' (walkable) or \'#\' (blocked). For example: ``` grid = [ \\"...#\\", \\".#..\\", \\"...#\\", \\".#..\\" ] ``` In this grid: - The cell `(0, 0)` (top-left corner) is walkable since it\'s a \'`.`\'. - The cell `(0, 3)` is blocked as it contains a \'`#`\'. - The grid is navigable in the 4 main directions: up, down, left, and right. # Input: - A 2D list `grid` that represents the map. - A tuple of integers `start` representing the starting coordinates `(x0, y0)`. - A tuple of integers `target` representing the target coordinates `(x1, y1)`. # Output: - A list of tuples, each representing the coordinates of the cells that form the shortest path from `start` to `target`. If there is no path, return an empty list. - The path must start at the `start` cell and end at the `target` cell. # Notes: - Assume that both `start` and `target` cells are always walkable. - If the target is not reachable, return an empty list. - Avoid cycles in the path. # Implementation Example: ```Python def astar_pathfinding(grid, start, target): pass # Your implementation here # Example usage: grid = [ \\"...#\\", \\".#..\\", \\"...#\\", \\".#..\\" ] start = (0, 0) target = (3, 3) print(astar_pathfinding(grid, start, target)) # Example output: [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)] ``` The A* algorithm should be implemented in `astar_pathfinding` function. In A*, maintain an \\"open set\\" of walks to consider, and a \\"closed set\\" to track fully evaluated walks. Use heuristics (such as Manhattan distance) for estimating path cost to the target. This problem involves managing priority queues, handling edge cases, and properly maintaining the walkable grid structures.","solution":"import heapq def astar_pathfinding(grid, start, target): def heuristic(a, b): return abs(a[0] - b[0]) + abs(a[1] - b[1]) def get_neighbors(node): directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] neighbors = [] for direction in directions: neighbor = (node[0] + direction[0], node[1] + direction[1]) if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]): if grid[neighbor[0]][neighbor[1]] == \'.\': neighbors.append(neighbor) return neighbors start, target = tuple(start), tuple(target) open_set = [] heapq.heappush(open_set, (0, start)) came_from = {} g_score = {start: 0} f_score = {start: heuristic(start, target)} while open_set: current = heapq.heappop(open_set)[1] if current == target: path = [] while current in came_from: path.append(current) current = came_from[current] path.append(start) path.reverse() return path neighbors = get_neighbors(current) for neighbor in neighbors: tentative_g_score = g_score[current] + 1 if neighbor not in g_score or tentative_g_score < g_score[neighbor]: came_from[neighbor] = current g_score[neighbor] = tentative_g_score f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, target) if neighbor not in [i[1] for i in open_set]: heapq.heappush(open_set, (f_score[neighbor], neighbor)) return []"},{"question":"Balanced Brackets You want to build a compiler that can handle mathematical expressions containing various types of parentheses: `()`, `{}`, and `[]`. One crucial step is to make sure that any given expression has balanced brackets. An expression is considered balanced if: 1. Every opening bracket has a corresponding closing bracket of the same type. 2. Brackets close in the correct order, i.e., an opening bracket must be closed before a different type of opening bracket is closed. Task Given a string containing brackets and possibly other characters, determine if the brackets are balanced. # Examples ``` \\"([])\\" => true \\"([{}])\\" => true \\"([]{})\\" => true \\"([)]\\" => false \\"({[)]}\\" => false \\"([]\\" => false \\"abc(123)\\" => true \\"(ab(c)d}\\" => false ``` Note: Your function should disregard any non-bracket characters and only focus on the balance of the brackets.","solution":"def is_balanced(s): Checks if the input string s has balanced brackets. :param s: str, the input string containing various types of brackets. :return: bool, True if the brackets are balanced, otherwise False. stack = [] bracket_map = {\')\': \'(\', \'}\': \'{\', \']\': \'[\'} for char in s: if char in bracket_map.values(): stack.append(char) elif char in bracket_map.keys(): if stack == [] or bracket_map[char] != stack.pop(): return False return stack == []"},{"question":"You are working on a project called Storage Optimization for a cloud storage company. Your task is to create a way to efficiently manage a collection of files stored in a server, ensuring that duplicate files do not take up extra space. To achieve this, you need to implement a system that identifies duplicate files based on their contents and organizes them in an optimal way. You are given a list of files, each identified by a unique ID and containing a string representing its contents. Two files are considered duplicates if their contents are exactly the same. You need to group duplicate files together and return the IDs of these files grouped by their duplicate status. -----Input----- - The first line contains an integer N (1 le N le 5000), representing the number of files. - Each of the next N lines contains a file ID (an integer in range 1 to 10^6) and the contents of the file (a string with length between 1 and 1000). -----Output----- - For each unique content, output the IDs of the files that share this content. - Each line should start with the most frequently occurring content\'s IDs and end with the least frequent one. - Within each line, file IDs should be printed in ascending order. - If two content groups have the same number of files, their order in the output corresponds to the lexicographical order of their contents. -----Examples----- Sample Input 1: 5 101 abcd 102 efgh 103 abcd 104 ijkl 105 efgh Sample Output 1: 101 103 102 105 104 Sample Input 2: 4 201 xyz 202 abc 203 def 204 xyz Sample Output 2: 201 204 202 203 Sample Input 3: 3 1 hello 2 world 3 hello Sample Output 3: 1 3 2 Explanation Groups of files with identical content are identified, and IDs are printed such that the most frequent content is listed first. Within each group, file IDs are printed in ascending order.","solution":"def group_files_by_content(n, file_data): from collections import defaultdict content_to_ids = defaultdict(list) for file_id, content in file_data: content_to_ids[content].append(file_id) sorted_contents = sorted( content_to_ids.items(), key=lambda x: (-len(x[1]), x[0]) ) result = [] for content, ids in sorted_contents: result.append(\\" \\".join(map(str, sorted(ids)))) return result"},{"question":"Your friend Alice is a fan of palindromes. A palindrome is a string that reads the same forward and backward, for example, \\"radar\\" or \\"level\\". Alice likes to play a game in which she takes a string and tries to determine the number of different substrings that are palindromic. A substring is any contiguous part of the string. Can you help Alice by writing a program that takes a string and determines the number of distinct palindromic substrings it contains? -----Input----- Input consists of one string of length up to 2000 characters. The string will solely consist of lower case letters a-z. -----Output----- Output should consist of one number, the number of distinct palindromic substrings in the given string. -----Examples----- Sample Input 1: abba Sample Output 1: 4 Sample Input 2: abc Sample Output 2: 3 Sample Input 3: aaa Sample Output 3: 3","solution":"def count_distinct_palindromic_substrings(s): Returns the number of distinct palindromic substrings in the given string s. def is_palindrome(sub): return sub == sub[::-1] distinct_palindromes = set() for i in range(len(s)): for j in range(i + 1, len(s) + 1): if is_palindrome(s[i:j]): distinct_palindromes.add(s[i:j]) return len(distinct_palindromes)"},{"question":"A string S of lowercase English alphabet letters is considered \\"beautiful\\" if it meets the following conditions: 1. Every vowel (\'a\', \'e\', \'i\', \'o\', \'u\') appears at least once in S. 2. No two consecutive characters in S are the same. Given a string S, determine if it is \\"beautiful\\" according to the criteria above. Return \\"YES\\" if the string is beautiful, otherwise return \\"NO\\". Input Format - The first line contains an integer T, the number of test cases. - Each of the next T lines contains a string S. Output Format For each test case, output \\"YES\\" if the string is beautiful, otherwise \\"NO\\". Constraints - 1 ≤ T ≤ 1000 - 1 ≤ |S| ≤ 10^5 (total length of all strings provided for input ≤ 10^6) Sample Input 4 aeioubcdef hello beautiful aeiooeieee Sample Output YES NO NO NO Explanation - The first string \\"aeioubcdef\\" contains all vowels and has no consecutive same characters, hence it is beautiful. - The second string \\"hello\\" contains all vowels but has consecutive characters \'l\', hence it is not beautiful. - The third string \\"beautiful\\" is missing \'o\' and has consecutive characters \'e\'. - The fourth string \\"aeiooeieee\\" contains all vowels but has consecutive \'o\' and consecutive \'e\' characters.","solution":"def is_beautiful(s): vowels = set(\'aeiou\') found_vowels = set() for i in range(len(s)): if s[i] in vowels: found_vowels.add(s[i]) if i > 0 and s[i] == s[i-1]: return \\"NO\\" if found_vowels == vowels: return \\"YES\\" else: return \\"NO\\" def beautiful_strings(T, test_strings): results = [] for s in test_strings: results.append(is_beautiful(s)) return results"},{"question":"Maya loves playing with strings and patterns. She came up with a new game where she needs to determine if a given string can be converted into another string by performing a limited set of operations. The operations allowed are: 1. Insert any character at any position. 2. Delete any character from any position. 3. Replace any character with another character at any position. Given two strings, A and B, Maya wants to know the minimum number of operations required to convert string A into string B. -----Input:----- - First line will contain T, number of testcases. Then the testcases follow. - Each testcase contains of 2 lines of input, the first line contains string A and the second line contains string B. -----Output:----- For each testcase, output in a single line answer denoting the minimum number of operations required. -----Constraints----- - 1 leq T leq 10 - 1 leq text{length of A}, text{length of B} leq 1000 - Both A and B consist of only lowercase English letters. -----Sample Input:----- 3 horse ros intention execution abc yabc -----Sample Output:----- 3 5 1 -----EXPLANATION:----- For the first case, - Remove \'h\' from \\"horse\\" -> \\"orse\\" - Replace \'r\' with \'o\' -> \\"osse\\" - Replace \'s\' with \'r\' -> \\"ros\\" So the answer is 3. For the second case, - Remove \'i\' from \\"intention\\" -> \\"ntention\\" - Replace \'n\' with \'e\' -> \\"etention\\" - Replace \'t\' with \'c\' -> \\"ecution\\" - Replace \'t\' with \'x\' -> \\"executon\\" - Replace \'i\' with \'u\' -> \\"execution\\" So the answer is 5. For the third case, - Insert \'y\' at the beginning of \\"abc\\" -> \\"yabc\\" So the answer is 1.","solution":"def min_operations_to_convert(A, B): Returns the minimum number of operations required to convert string A into string B. Operations allowed are insertion, deletion, and replacement of any character. m, n = len(A), len(B) # Create a DP table to store results of subproblems dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)] # Fill dp[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, the only option is to insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, the only option is to remove all characters of first string elif j == 0: dp[i][j] = i # If last characters are same, ignore last char and recur for remaining string elif A[i-1] == B[j-1]: dp[i][j] = dp[i-1][j-1] # If the last character is different, consider all possibilities and find the minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] def process_test_cases(test_cases): results = [] for A, B in test_cases: results.append(min_operations_to_convert(A, B)) return results"},{"question":"Given a string s of length N consisting only of characters \'a\' and \'b\'. Your task is to transform the string such that the count of the character \'b\' in the string is maximized. To perform this transformation, you can change at most one contiguous substrings of \'a\' in the string to \'b\'. Find the maximum possible count of \'b\' in the transformed string. Example 1: Input: s = \\"aabba\\" Output: 4 Explanation: By changing the substring \\"aa\\" to \\"bb\\", the transformed string becomes \\"bbbba\\" with 4 \'b\'s. Example 2: Input: s = \\"babaa\\" Output: 4 Explanation: By changing the substring \\"a\\" to \\"b\\", the transformed string becomes \\"bbbaa\\" or \\"babbb\\" with 4 \'b\'s. Example 3: Input: s = \\"ababa\\" Output: 3 Explanation: By changing any single \'a\' to \'b\', the transformed string can have a maximum of 3 \'b\'s. Your Task: You don\'t need to read input or print anything. Complete the function maximizeBCount() which takes the string s as input parameter and returns the integer value representing the maximum possible count of \'b\' in the transformed string. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^5","solution":"def maximizeBCount(s): Maximizes the count of \'b\' in the given string s by changing at most one contiguous substring of \'a\' into \'b\'. :param s: string consisting of characters \'a\' and \'b\' :return: maximum possible count of \'b\' in the transformed string current_max = 0 max_b = 0 total_b = 0 for char in s: if char == \'b\': total_b += 1 for i in range(len(s)): if s[i] == \'a\': current_max += 1 else: current_max = 0 max_b = max(max_b, total_b + current_max) return min(max_b, len(s)) # we cannot have more \'b\'s than the total length of the string"},{"question":"Supermarket is having a sale and offering discounts on certain fruits. The discount ratio differs based on the type of fruit. Each fruit has a discounted price formula as follows: - Apples: 20% off the original price. - Oranges: Buy one get one free (50% off if even quantity is bought). - Bananas: Flat Rs. 5 off for every two bananas bought. Write a program to determine the total price after discounts for a list of different fruits. ------ Input Format ------ - The first line contains a single integer T - the number of different fruits. Then the next T lines follow. - Each of the next T lines contains two space-separated values: a string F representing the fruit type (can be \\"apple\\", \\"orange\\", or \\"banana\\") and an integer N - the original price or quantity based on the fruit type. ------ Output Format ------ For each fruit in the list, print the total price after applying the respective discount formula. ------ Constraints ------ 1 ≤ T ≤ 5 1 ≤ N ≤ 100 F can only be \\"apple\\", \\"orange\\", or \\"banana\\". ----- Sample Input 1 ------ 3 apple 100 orange 4 banana 10 ----- Sample Output 1 ------ 80 200 40 ----- Explanation 1 ------ - For 100 apples, the discount is 20% off. Therefore, the total price after discount is 100 * 0.80 = 80. - For 4 oranges, you get 2 free so you only pay for 2 oranges. Thus, the total price is 2 * 50 = 100. - For 10 bananas, you get Rs. 5 off for every 2 bananas, so total discount is Rs. 5 * (10/2) = 25. Therefore, the total price after discount is 10*10 - 25 = 75.","solution":"def calculate_discounted_price(fruit_type, value): Calculate the total price after discount for a given fruit type. Args: fruit_type (str): The type of the fruit (apple, orange, banana). value (int): The original price or quantity based on the fruit type. Returns: int: The total price after applying the respective discount. if fruit_type == \\"apple\\": return int(value * 0.8) elif fruit_type == \\"orange\\": quantity = value return (quantity // 2 + quantity % 2) * 50 elif fruit_type == \\"banana\\": quantity = value return quantity * 10 - (quantity // 2) * 5 else: raise ValueError(\\"Invalid fruit type\\") # Reading input and printing the result def main(): import sys input = sys.stdin.read data = input().strip().split(\'n\') T = int(data[0]) for i in range(1, T + 1): fruit, value = data[i].split() value = int(value) print(calculate_discounted_price(fruit, value)) if __name__ == \\"__main__\\": main()"},{"question":"You are given an array A of size N. In one operation, you can do the following: Choose any subarray A[l:r] (1 ≤ l ≤ r ≤ N). Reverse the order of the elements in this subarray. You need to perform this operation exactly K times. Find the lexicographically smallest array you can achieve after performing the above operation K times. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two integers N and K — the size of A and the number of operations to perform respectively. - The next line contains N space-separated integers A[1], A[2], ..., A[N], the elements of the array. ------ Output Format ------ For each test case, output the lexicographically smallest array you can achieve after performing the above operation K times. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ K ≤ 10 1 ≤ A[i] ≤ 10^9 - The sum of N over all test cases won\'t exceed 10^6. ----- Sample Input 1 ------ 2 5 1 3 1 4 1 5 4 2 4 3 2 1 ----- Sample Output 1 ------ [1, 3, 4, 1, 5] [1, 2, 3, 4]","solution":"def smallest_lexicographic_array(T, test_cases): results = [] for case in test_cases: N, K, A = case if K > 1: results.append(sorted(A)) else: min_array = A[:] for i in range(N): for j in range(i, N): B = A[:i] + A[i:j+1][::-1] + A[j+1:] min_array = min(min_array, B) results.append(min_array) return results"},{"question":"You are given a grid of size M times N filled with non-negative integers. Your task is to find the path from the top-left corner to the bottom-right corner which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Hint: You may use dynamic programming to solve this problem efficiently. -----Input----- The first line of input contains two integers M and N (1 le M, N le 500), the dimensions of the grid. The next M lines each contain N integers representing the grid, where each integer is between 0 and 100 inclusive. -----Output----- Output a single integer, the minimum sum of the numbers along a path from the top-left corner to the bottom-right corner of the grid. -----Examples----- Sample Input: 3 3 1 3 1 1 5 1 4 2 1 Sample Output: 7","solution":"def min_path_sum(grid): Given a grid of non-negative integers, find the minimum path sum from top-left to bottom-right corner. M = len(grid) N = len(grid[0]) # Create a dp array to store the minimum path sum to each cell. dp = [[0] * N for _ in range(M)] # Initialize the top-left cell with the value of the grid dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, N): dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, M): dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp table for i in range(1, M): for j in range(1, N): dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j] # The bottom-right cell contains the minimum path sum return dp[M-1][N-1]"},{"question":"Problem You are given a grid representing a city map with \'1\'s representing buildings and \'0\'s representing empty spaces. Two buildings are considered connected if they are adjacent to each other horizontally or vertically. The number of connected buildings in one group determines a block. Write a function that takes the city map as an input and returns the number of distinct blocks in the city. Constraints * The city map is represented as an `n x n` grid where `1 ≤ n ≤ 1000`. Input The first line contains an integer `n`, the size of the grid. Each of the next `n` lines contains a string of `n` characters, either \'1\' or \'0\', representing the city map. Output Output the number of distinct blocks in the city in one line. Examples Input 4 1100 1110 0110 0000 Output 2 Input 5 11000 11000 00100 00011 00011 Output 3","solution":"def num_blocks(city_map): Function to return the number of distinct blocks of buildings in the city map. if not city_map: return 0 n = len(city_map) visited = [[False for _ in range(n)] for _ in range(n)] def dfs(x, y): stack = [(x, y)] while stack: cx, cy = stack.pop() if cx < 0 or cy < 0 or cx >= n or cy >= n or visited[cx][cy] or city_map[cx][cy] == \'0\': continue visited[cx][cy] = True stack.append((cx + 1, cy)) stack.append((cx - 1, cy)) stack.append((cx, cy + 1)) stack.append((cx, cy - 1)) block_count = 0 for i in range(n): for j in range(n): if city_map[i][j] == \'1\' and not visited[i][j]: block_count += 1 dfs(i, j) return block_count"},{"question":"Alex is a budding software engineer and wants to create a program that can detect prime numbers efficiently. He is aware that checking larger numbers for primality can be time-consuming, and thus intends to use a probabilistic method called the Miller-Rabin primality test. Your task is to help Alex by implementing a function to detect if a given number is prime using the Miller-Rabin primality test. Input Format The first line contains an integer T, the number of test cases. The next T lines each contain a single integer, N, the number to be checked for primality. Output Format Output T lines, each corresponding to the answer of the test case. Print \\"YES\\" if the number is prime, otherwise print \\"NO\\". Constraints 1 <= T <= 10 1 <= N <= 10^18 Sample Input #00 5 2 17 18 19 20 Sample Output #00 YES YES NO YES NO Explanation #00 - The number 2 is a prime number. - The number 17 is a prime number. - The number 18 is not a prime number. - The number 19 is a prime number. - The number 20 is not a prime number.","solution":"import random def miller_rabin(n, k=5): if n <= 1: return False if n <= 3: return True if n % 2 == 0: return False # Write n as d*2^r + 1 r, d = 0, n - 1 while d % 2 == 0: r += 1 d //= 2 def is_composite(a): if pow(a, d, n) == 1: return False for i in range(r): if pow(a, 2**i * d, n) == n - 1: return False return True for _ in range(k): a = random.randrange(2, n - 1) if is_composite(a): return False return True def primality_test(numbers): results = [] for n in numbers: if miller_rabin(n): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"John loves to create interesting shapes with matchsticks. One day, he came up with a challenge: he wants to verify if it\'s possible to form an equilateral triangle with the given matchsticks. An equilateral triangle is a triangle in which all three sides are of equal length. Given an array of integers representing the lengths of matchsticks, determine if three of these matchsticks can be combined to form an equilateral triangle. Note that each matchstick can only be used once. Input The first line contains an integer n (1 ≤ n ≤ 1000) — the number of matchsticks. The second line contains n space-separated integers a1, a2, ..., an (1 ≤ ai ≤ 1000) — the lengths of the matchsticks. Output Print \\"YES\\" if it\'s possible to select three matchsticks that can form an equilateral triangle, otherwise print \\"NO\\". Examples Input 6 1 1 1 2 3 4 Output YES Input 4 1 2 3 7 Output NO Input 5 10 10 10 10 15 Output YES Explanation In the first example, the three matchsticks of length 1 can form an equilateral triangle. In the second example, there are no three matchsticks with equal lengths, so it\'s not possible to form an equilateral triangle. In the third example, the three matchsticks can be selected to form an equilateral triangle with side length 10.","solution":"def can_form_equilateral_triangle(n, matchsticks): from collections import Counter # Count occurrences of each matchstick length matchstick_counts = Counter(matchsticks) # Check if any length occurs at least 3 times for length, count in matchstick_counts.items(): if count >= 3: return \\"YES\\" return \\"NO\\""},{"question":"You are given a list of integers where each integer corresponds to the height of a pillar. You are tasked with determining the maximum difference in height between any two pillars such that the shorter pillar is always before the taller pillar in the list. Write a function: ```python def max_height_difference(pillars: List[int]) -> int: ``` # Input - A single line containing space-separated integers which represent the heights of the pillars. - The length of the list will be between `1` and `100` (inclusive). - Each integer height will be between `1` and `1000` (inclusive). # Output - The function should return an integer which represents the maximum height difference between any two pillars such that the shorter pillar is before the taller pillar in the list. - If no such pairs exist, return `0`. # Examples Example 1 ```python pillars = [4, 2, 7, 3, 6, 8] Output: 6 ``` Explanation: The maximum difference is between pillars of height 2 and 8 (8 - 2 = 6). Example 2 ```python pillars = [1, 2, 3, 4, 5] Output: 4 ``` Explanation: The maximum difference is between pillars of height 1 and 5 (5 - 1 = 4). Example 3 ```python pillars = [5, 3, 1] Output: 0 ``` Explanation: There is no valid pair where the shorter pillar is before the taller pillar. Therefore, the output is 0.","solution":"from typing import List def max_height_difference(pillars: List[int]) -> int: Find the maximum difference in height between any two pillars such that the shorter pillar is before the taller pillar in the list. if not pillars or len(pillars) == 1: return 0 min_height = pillars[0] max_difference = 0 for height in pillars[1:]: if height > min_height: max_difference = max(max_difference, height - min_height) min_height = min(min_height, height) return max_difference"},{"question":"Vowel Counter Complete the function to count the number of vowels in the given string. The function should return the total count of vowels present in the string. For this task, a vowel is considered to be one of \'a\', \'e\', \'i\', \'o\', or \'u\', and the check should be case-insensitive. # Examples Input: `\\"Programming\\"` Output: `3` Explanation: The vowels in the word \\"Programming\\" are \'o\', \'a\', and \'i\'. Input: `\\"HELLO\\"` Output: `2` Explanation: The vowels in the word \\"HELLO\\" are \'E\' and \'O\'. # Notes - Input will be a string. - Return the vowel count as an integer.","solution":"def count_vowels(s): Returns the count of vowels in the given string. The function is case-insensitive. Parameters: s (str): The string to count the vowels in. Returns: int: The number of vowels in the string. vowels = \\"aeiou\\" count = 0 for char in s.lower(): if char in vowels: count += 1 return count"},{"question":"You are given a list of integers, where each number occurs twice except for one number which occurs only once. Your task is to create a function that receives the list and returns the number that occurs only once. For example, given the list `[2, 3, 5, 3, 2, 4, 4]`, the function should return `5` since it is the only number that appears once in the list. **Function Signature:** ```python def find_unique_number(nums: List[int]) -> int: ``` # Input: - `nums`: a list of integers (0 <= len(nums) <= 1000) # Output: - returns the integer that occurs only once in the list # Example: ```python find_unique_number([2, 3, 5, 3, 2, 4, 4]) # should return 5 find_unique_number([1, 1, 2, 2, 3]) # should return 3 find_unique_number([7, 8, 8, 9, 9]) # should return 7 ```","solution":"from typing import List def find_unique_number(nums: List[int]) -> int: Returns the number that occurs only once in the list. unique_num = 0 for num in nums: unique_num ^= num return unique_num"},{"question":"A new automated drone system has been introduced for efficient parcel delivery within a city grid. The city is represented by an `n` x `m` grid, where each cell can either be passable terrain denoted by \'.\' or an obstacle denoted by \'#\'. The drone, currently positioned at the start point (sx, sy), aims to reach the destination point (dx, dy). It moves in the city grid using a special navigation system that allows it to move four possible directions - up, down, left, or right. The drone must avoid obstacles and can visit grids only once. The task is to determine whether it is possible for the drone to reach the destination from the start point. -----Input----- The first line contains two integers `n` and `m` (1 ≤ n, m ≤ 100) - respectively the number of rows and columns of the city grid. The next `n` lines each contain `m` characters (\'.\' or \'#\') representing the city\'s terrain. The following line contains four integers `sx`, `sy`, `dx`, `dy` (1 ≤ sx, sy, dx, dy ≤ 100) - the start and destination coordinates. Coordinates are 1-based. -----Output----- Print \\"YES\\" if the drone can reach the destination, otherwise print \\"NO\\". -----Examples----- Input 5 5 ..... .#... ....# .#.#. ...#. 1 1 5 5 Output YES Input 3 3 .#. .#. .#. 1 1 3 3 Output NO -----Note----- In the first sample, the drone can navigate around obstacles to reach its destination. In the second sample, the obstacle layout makes it impossible for the drone to find a path to the destination.","solution":"def is_reachable(n, m, grid, sx, sy, dx, dy): from collections import deque sx -= 1 sy -= 1 dx -= 1 dy -= 1 directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] if grid[sx][sy] == \'#\' or grid[dx][dy] == \'#\': return \\"NO\\" visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(sx, sy)]) visited[sx][sy] = True while queue: x, y = queue.popleft() if (x, y) == (dx, dy): return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and grid[nx][ny] == \'.\': visited[nx][ny] = True queue.append((nx, ny)) return \\"NO\\""},{"question":"Write a function int myPow(int base, int exponent). This function calculates the value of the base raised to the power of the exponent. Both the base and exponent are non-negative integers. The result should be an integer. Example 1: Input: base = 2, exponent = 3 Output: 8 Explanation: 2^3 = 8 Example 2: Input: base = 5, exponent = 0 Output: 1 Explanation: Any number raised to the power of 0 is 1.","solution":"def myPow(base, exponent): Returns the value of base raised to the power of exponent. Parameters: base (int): The base number. exponent (int): The exponent to raise the base. Returns: int: The result of base raised to the exponent. return base ** exponent"},{"question":"You are given a set of n strings, each consisting of lowercase English letters. Your task is to partition these strings into two nonempty groups A and B, such that the following condition holds: For every two strings P and Q, write the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between them on the blackboard: if they belong to the same group — with a yellow pen, and if they belong to different groups — with a blue pen. Then no yellow number is equal to any blue number. It is guaranteed that such a partition exists for any possible input. If there exist multiple partitions, you are allowed to output any of them. Input The first line contains one integer n (2 ≤ n ≤ 10^3) — the number of strings. The i-th of the next n lines contains a string s_i (1 ≤ |s_i| ≤ 50) — the i-th string. All strings have the same length and consist of lowercase English letters. Output In the first line, output a (1 ≤ a ≤ n-1) — the number of strings in group A. In the second line, output a integers — the indexes of strings that you include into group A. If there are multiple answers, print any. Examples Input 3 abc abd acd Output 2 1 2 Input 4 aaaa aaab aabb bbbb Output 2 1 4 Input 3 cat dog bat Output 1 1 Input 2 hello world Output 1 1 Note In the first example, we set strings \\"abc\\" and \\"abd\\" to group A and string \\"acd\\" to group B. In this way, we will have 1 yellow number 1 and 2 blue numbers 2 and 2 on the blackboard. In the second example, we set strings \\"aaaa\\" and \\"bbbb\\" to group A and strings \\"aaab\\" and \\"aabb\\" to group B. In this way, we will have 1 yellow number 4 and various blue numbers on the blackboard.","solution":"def partition_strings(n, strings): Partition the strings into two groups such that no yellow number (same group) equals any blue number (different groups). Parameters: n (int): Number of strings. strings (list): List of n strings. Returns: tuple: (number of strings in group A, list of indexes in group A) group_A = [1] return len(group_A), group_A"},{"question":"A pharmaceutical company is developing a new drug delivery system with a set of specific rules for the inclusion of ingredients in a pill. They need help designing a software tool that can determine the correct combination of ingredients. The company specifies the following rules for the pill composition: - Each ingredient is identified by a unique positive integer. - The pill must have a specific maximum total weight that must not be exceeded. - Each ingredient weighs a specific amount in grams. - An ingredient can be included multiple times so long as the pill’s total weight doesn\'t exceed the specified maximum. The task is to compute the maximum weight that can be achieved without exceeding the specified limit. You need to implement this software tool. Input The first line of the input contains two integers, n and W (1 ≤ n ≤ 1000, 1 ≤ W ≤ 1000), where n is the number of different types of ingredients, and W is the maximum weight of the pill. The next line contains n integers, where the i-th integer (1 ≤ weight_i ≤ 1000) is the weight in grams of the i-th type of ingredient. Output Output a single integer representing the maximum possible weight of the pill that does not exceed the specified limit. Examples Input 3 10 2 3 7 Output 10 Input 4 5 1 2 3 4 Output 5","solution":"def max_pill_weight(n, W, weights): Determine the maximum weight of the pill that does not exceed the specified limit. Args: n (int): number of different types of ingredients W (int): maximum weight of the pill weights (list of int): list of ingredient weights Returns: int: maximum possible weight of the pill dp = [0] * (W + 1) for weight in weights: for j in range(weight, W + 1): dp[j] = max(dp[j], dp[j - weight] + weight) return dp[W]"},{"question":"Given an integer `n`, create a function to generate a list of the first `n` Triangular numbers. The Triangular numbers are a sequence of numbers where each nth term is the sum of the first `n` natural numbers. Triangular number Tn is the sum of all natural numbers up to `n`. The formula for the nth Triangular number is given by: ``` Tn = n * (n + 1) / 2 ``` Write a function `triangular_numbers(n)` that returns a list of the first `n` Triangular numbers. For example: ```python triangular_numbers(5) -> [1, 3, 6, 10, 15] # Explanation: # T1 = 1 # T2 = 1 + 2 = 3 # T3 = 1 + 2 + 3 = 6 # T4 = 1 + 2 + 3 + 4 = 10 # T5 = 1 + 2 + 3 + 4 + 5 = 15 ``` Note that: - You may assume that `1 <= n <= 100`. - Optimize your function to have a time complexity of O(n).","solution":"def triangular_numbers(n): Generate a list of the first n Triangular numbers. :param n: The number of Triangular numbers to generate (1 <= n <= 100) :return: A list of the first n Triangular numbers return [int(i * (i + 1) / 2) for i in range(1, n + 1)]"},{"question":"You are given a string that contains a mix of lowercase alphabets and digits. Your task is to reorder the string such that all digits come before alphabets while maintaining the relative order of digits and alphabets in the original string. Input A single string s containing only lowercase alphabets and digits. The length of the string is positive and doesn\'t exceed 10^5. Output Print the reordered string with all digits at the beginning followed by all the alphabets, preserving the relative order of digits and alphabets from the original string. Examples Input a2b3c1d Output 231abcd Input 1e4f2g5h Output 1425efgh","solution":"def reorder_string(s): Reorders the string such that all digits come before alphabets while preserving their relative orders. digits = [] alphabets = [] for char in s: if char.isdigit(): digits.append(char) else: alphabets.append(char) return \'\'.join(digits) + \'\'.join(alphabets)"},{"question":"**Question: The Coding Competition** You are organizing a coding competition with n participants. Each participant has a unique identifier ranging from 1 to n. Each participant receives a score by solving problems, where the score could be positive or negative. At the end of the competition, you need to find the results based on three criteria: 1. The participant with the highest score. 2. The participant with the lowest score. 3. The difference between the highest and lowest scores. Write a program that captures the scores of all participants and prints the participant with the highest score, the participant with the lowest score, and the difference between the highest and lowest scores. In case of a tie for the highest or lowest score, choose the participant with the smallest identifier. Input: - The first line contains an integer n (1 ≤ n ≤ 10^5), representing the number of participants. - The next n lines each contain an integer si (-10^9 ≤ si ≤ 10^9), the score of the i-th participant. Output: - Print three space-separated integers: the identifier of the participant with the highest score, the identifier of the participant with the lowest score, and the difference between the highest and lowest scores. Examples: Input: 5 10 -5 3 7 -2 Output: 1 2 15 Input: 4 25 25 -10 -20 Output: 1 4 45 Input: 3 0 0 0 Output: 1 1 0","solution":"def coding_competition(n, scores): Determines the participant with the highest and lowest scores, and the difference between these scores. Args: n (int): Number of participants. scores (list): List of integers representing the scores of each participant. Returns: tuple: A tuple of three elements: - The identifier of the participant with the highest score. - The identifier of the participant with the lowest score. - The difference between the highest and lowest scores. highest_score = max(scores) lowest_score = min(scores) highest_id = scores.index(highest_score) + 1 lowest_id = scores.index(lowest_score) + 1 score_difference = highest_score - lowest_score return highest_id, lowest_id, score_difference"},{"question":"Given a string `num` that represents a non-negative integer, remove k digits from the number so that the new number is the smallest possible. Note: - The length of `num` is less than 105, and `k` is a non-negative integer less than the length of `num`. - The given number does not contain any leading zeros except for the number zero itself. Return the new number as a string, which should not have any leading zeros. Example 1: Input: num = \\"1432219\\", k = 3 Output: \\"1219\\" Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219. Example 2: Input: num = \\"10200\\", k = 1 Output: \\"200\\" Explanation: Remove the leading 1 to form the new number 200. Note that the output must not have leading zeros, such as 0200. Example 3: Input: num = \\"10\\", k = 2 Output: \\"0\\" Explanation: Remove both digits from the number to get 0.","solution":"def removeKdigits(num, k): Removes k digits from the number represented as a string `num` to make the smallest possible number. :param num: str: Non-negative integer represented as a string. :param k: int: Number of digits to remove. :return: str: The smallest possible number as a string after removing k digits. stack = [] for digit in num: while k > 0 and stack and stack[-1] > digit: stack.pop() k -= 1 stack.append(digit) # If k digits are still to be removed, remove from the end while k > 0: stack.pop() k -= 1 # Build the final number and remove leading zeroes final_num = \'\'.join(stack).lstrip(\'0\') return final_num if final_num else \\"0\\""},{"question":"You are working at a software company where you need to implement a feature that auto-suggests corrections for misspelled words using a given dictionary. To achieve this, you decide to utilize a simple heuristic based on the Levenshtein distance (edit distance). The Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions, or substitutions) required to change one word into the other. Your task is to write a function that, given a list of words (the dictionary) and a list of words to check, finds the closest match from the dictionary for each word to check based on the Levenshtein distance. If there are multiple dictionary words with the same minimum distance to a word to check, return the first one that appears in the dictionary. Furthermore, if a word to check is already present in the dictionary, it should be considered its own closest match with a distance of 0. For example, given the dictionary [\\"hello\\", \\"hallo\\", \\"hullo\\", \\"help\\", \\"hell\\"] and the words to check [\\"held\\", \\"hellp\\", \\"hola\\"], your function should find that: - \\"held\\" has \\"hell\\" as the closest match (edit distance = 2), - \\"hellp\\" has \\"help\\" as the closest match (edit distance = 1), - \\"hola\\" has \\"hallo\\" as the closest match (edit distance = 2). Write a function that calculates the closest matches for a list of words to check. Function Signature: ```python def find_closest_matches(dictionary: List[str], words_to_check: List[str]) -> List[str]: ``` Input - A list of strings `dictionary` representing the dictionary. - A list of strings `words_to_check` representing the words that need correction. Output - A list of strings where each element is the closest match from the dictionary for the corresponding word in `words_to_check`. Example ```python dictionary = [\\"hello\\", \\"hallo\\", \\"hullo\\", \\"help\\", \\"hell\\"] words_to_check = [\\"held\\", \\"hellp\\", \\"hola\\"] find_closest_matches(dictionary, words_to_check) ``` Output: ``` [\\"hell\\", \\"help\\", \\"hallo\\"] ``` Constraints - The dictionary will contain no more than 1000 words. - Each word in the dictionary and words to check will have a length of up to 20 characters. - The list of words to check will contain no more than 100 words.","solution":"from typing import List def levenshtein_distance(s1: str, s2: str) -> int: Compute the Levenshtein distance between two strings s1 and s2. if len(s1) < len(s2): return levenshtein_distance(s2, s1) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 deletions = current_row[j] + 1 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1] def find_closest_matches(dictionary: List[str], words_to_check: List[str]) -> List[str]: closest_matches = [] for word in words_to_check: if word in dictionary: closest_matches.append(word) continue closest_word = None closest_distance = float(\'inf\') for dict_word in dictionary: distance = levenshtein_distance(word, dict_word) if distance < closest_distance: closest_distance = distance closest_word = dict_word closest_matches.append(closest_word) return closest_matches"},{"question":"The Kingdom of Booleania is known for its large network of road systems. The king of Booleania has decided to start a new project to improve the transportation system between cities. To minimize travel time, the king wants to ensure that the network of roads is efficiently connected, such that there is a way to travel from any city to any other city. There are n cities and m bidirectional roads. Each road connects two different cities and has a certain travel time. The king wants to determine the minimum total travel time required to connect all cities in such a way that there is a path (direct or indirect) between any two cities. Write a program that finds the minimum total travel time required to achieve this. Assume that the cities are represented by integers ranging from 0 to n - 1. Input The input consists of multiple test cases. Each test case begins with two integers n and m separated by a space. n is the number of cities and m is the number of roads. (1 ≤ n ≤ 1000, 0 ≤ m ≤ 10000) Each of the next m lines contains three integers u, v, and w separated by spaces. u and v are the cities that the road connects, and w is the travel time of the road. (0 ≤ u, v < n, 1 ≤ w ≤ 1000) The end of the input is indicated by a line containing two zeros separated by a space. Output For each test case, output a single line containing the minimum total travel time required to connect all cities. If it is impossible to connect all cities, output \\"IMPOSSIBLE\\". Sample Input 4 5 0 1 1 0 2 2 0 3 3 1 2 1 2 3 1 3 3 0 1 4 1 2 5 2 0 3 4 1 0 1 10 0 0 Sample Output 3 7 IMPOSSIBLE Explanation In the first test case, the minimum total travel time is achieved by using the roads: 0-1, 1-2, and 2-3, with a total travel time of 3. In the second test case, the minimum total travel time is 7, achieved by using all given roads. In the third test case, it is impossible to connect all cities because there is only one road available for 4 cities. Note This problem can be solved using algorithms such as Kruskal\'s or Prim\'s algorithm to find the Minimum Spanning Tree.","solution":"def find(parent, i): if parent[i] == i: return i else: return find(parent, parent[i]) def union(parent, rank, x, y): xroot = find(parent, x) yroot = find(parent, y) if rank[xroot] < rank[yroot]: parent[xroot] = yroot elif rank[xroot] > rank[yroot]: parent[yroot] = xroot else: parent[yroot] = xroot rank[xroot] += 1 def kruskal_mst(n, edges): result = [] i = 0 e = 0 edges = sorted(edges, key=lambda item: item[2]) parent = [] rank = [] for node in range(n): parent.append(node) rank.append(0) while e < n - 1: if i >= len(edges): return \\"IMPOSSIBLE\\" u, v, w = edges[i] i += 1 x = find(parent, u) y = find(parent, v) if x != y: e += 1 result.append([u, v, w]) union(parent, rank, x, y) minimum_cost = sum([w for u, v, w in result]) return minimum_cost def minimum_total_travel_time(test_cases): results = [] for n, m, edges in test_cases: if n == 0 and m == 0: break if n == 1 and m == 0: results.append(0) else: result = kruskal_mst(n, edges) results.append(result) return results"},{"question":"A robotics engineering team developed a series of robotic arms, each with specific lengths and joint types. They need to figure out the possible workspace origins of these robotic arms based on given lengths and joint configurations. Specifically, they must calculate the workspace area for each of the different types of robotic arm configurations they have. Each robotic arm consists of several segments, each connected by a joint which could be one of two types: fixed (cannot rotate) or swivel (can rotate freely). The arms can only rotate at the swivel joints. Given the length of each segment and the type of each joint, determine the unique workspace areas that can be achieved. Input The input is given in the following format: N L lengths types Where: - N (1 ≤ N ≤ 1000): The number of robotic arm configurations. - L (2 ≤ L ≤ 50): The number of segments in each robotic arm. - lengths: A list of N space-separated strings of L space-separated integers representing the lengths of each segment in each configuration `(1 ≤ length_ij ≤ 100)`. - types: A list of N space-separated strings of L-1 space-separated characters (\'F\' for fixed, \'S\' for swivel) indicating the type of joint between each segment. Output Output the number of unique workspace areas for these robotic arms. Example Input 2 3 5 10 10 F S 2 2 2 S S Output 2 Explanation: - The first configuration consists of segments 5, 10, and 10 connected by fixed and swivel joints. The possible shaping gives a certain workspace area. - The second configuration consists of segments 2, 2, and 2 connected by two swivels. Its shaping gives another possible workspace area. - Thus, there are 2 unique workspace areas. In the explained input example, the two robotic arms have distinct workspace areas given their segment lengths and joint types. Your task is to write a program that identifies the number of unique workspace areas out of the provided configurations.","solution":"def unique_workspace_areas(N, L, lengths, types): def calculate_workspace(lengths, types): from math import pi area = 0 for length in lengths: area += length * length * pi return area if \'S\' in types else sum(lengths) workspaces = set() for i in range(N): lengths_row = list(map(int, lengths[i].split())) types_row = types[i].split() workspace_area = calculate_workspace(lengths_row, types_row) workspaces.add(workspace_area) return len(workspaces)"},{"question":"You\'re given an array of integers and an integer k. Your task is to transform the array by applying the following operation k times: remove an element from the array and insert the sum of its digits back into the array. You need to determine the smallest possible integer in the array after performing this operation k times. # Input - An integer n (1 ≤ n ≤ 10^5), the number of elements in the array. - An integer k (1 ≤ k ≤ 10^5), the number of operations to perform. - An array of n integers (1 ≤ array[i] ≤ 10^6). # Output - Output a single integer, the smallest possible element in the array after k operations. # Example Input ``` 5 3 58 23 77 99 31 ``` Output ``` 4 ``` # Explanation Performing the operation 3 times as follows: 1. Remove 77, insert 7+7 = 14, array becomes: [58, 23, 99, 31, 14] 2. Remove 99, insert 9+9 = 18, array becomes: [58, 23, 31, 14, 18] 3. Remove 58, insert 5+8 = 13, array becomes: [23, 31, 14, 18, 13] The smallest element is 13, so the output is 13.","solution":"def transform_array_and_find_minimum(n, k, array): def digit_sum(x): return sum(int(digit) for digit in str(x)) for _ in range(k): # Removing the maximum element and inserting the sum of its digits max_element = max(array) array.remove(max_element) array.append(digit_sum(max_element)) return min(array) # Example usage: # n, k = 5, 3 # array = [58, 23, 77, 99, 31] # print(transform_array_and_find_minimum(n, k, array)) # Output should be 13"},{"question":"India\'s prime minister has launched a new initiative to encourage students to study more mathematics. As part of this initiative, he introduced a coding competition. The problem to be solved is as follows: Given an array of integers and an integer k, determine whether there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is equal to k. Input: The first line contains an integer T, the number of test cases. The following 2 * T lines consist of two lines for each test case: the first line contains an integer k, and the second line contains a space-separated list of integers representing the array. Output: For each test case, print \\"YES\\" (in quotes for clarity) if there are two distinct indices i and j such that the absolute difference between nums[i] and nums[j] equals k. Otherwise, print \\"NO\\". Constraints: 1 ≤ T ≤ 100, 1 ≤ k ≤ 100, 2 ≤ |array| ≤ 1000, -10^9 ≤ nums[i] ≤ 10^9. SAMPLE INPUT 3 5 10 15 3 7 3 1 2 3 4 6 1 5 9 14 SAMPLE OUTPUT YES YES NO","solution":"def find_pairs_with_difference_k(nums, k): Determines if there are two distinct indices i and j in the array such that the absolute difference between nums[i] and nums[j] is equal to k. num_set = set(nums) for num in nums: if (num + k) in num_set or (num - k) in num_set: return \\"YES\\" return \\"NO\\" def solve(test_cases): Process each test case to determine if there exist two indices with the given difference. test_cases: list of tuples where each tuple contains an integer k and a list of integers nums Returns a list of results for each test case. results = [] for k, nums in test_cases: results.append(find_pairs_with_difference_k(nums, k)) return results def parse_input(input_str): Parse the input string and return test cases as list of tuples. input_str: a string containing the input as described in the problem statement Returns a list of tuples where each tuple is (k, nums) for each test case. input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] index = 1 for _ in range(T): k = int(input_lines[index]) nums = list(map(int, input_lines[index+1].split())) test_cases.append((k, nums)) index += 2 return test_cases"},{"question":"Given a list of people with their age and salary, you need to sort them based on the following criteria: 1. First, sort by age in ascending order. 2. If two people have the same age, sort by salary in descending order. Write a function to perform the above sorting. Input The first line contains an integer n (1 ≤ n ≤ 100) — the number of people in the list. The next n lines contain the information of each person in the following format: \\"Name Age Salary\\" Where: - Name is a string with length from 1 to 100, which may contain both uppercase and lowercase letters. - Age is an integer (1 ≤ Age ≤ 100). - Salary is a floating-point number (0 ≤ Salary ≤ 10^6). Output Output n lines, each containing the name of the person followed by their age and salary in the sorted order as specified. Examples Input 3 Alice 25 50000 Bob 25 60000 Charlie 30 40000 Output Alice 25 50000 Bob 25 60000 Charlie 30 40000 Input 4 David 40 80000 Eve 40 75000 Faythe 35 120000 Grace 35 130000 Output Grace 35 130000 Faythe 35 120000 David 40 80000 Eve 40 75000","solution":"def sort_people(people): Takes a list of people with their age and salary, and sorts them by age (ascending), and by salary (descending) if ages are the same. :param people: List of tuples containing (name, age, salary) :return: List of tuples sorted according to the criteria return sorted(people, key=lambda x: (x[1], -x[2])) def format_person(person): Formats a person\'s details into the required string format. :param person: tuple containing person\'s details (name, age, salary) :return: formatted string return f\\"{person[0]} {person[1]} {person[2]}\\""},{"question":"You\'ve been given a rectangular grid with `m` rows and `n` columns where each cell contains either a \'0\' (empty cell) or a \'1\' (land cell). The grid represents a map of a fictive Archipelago, and you need to find the number of distinct islands on this map. An island is defined as a group of \'1\'s connected vertically and horizontally (but not diagonally). Write a function to determine the number of distinct islands in this grid. Input The first line contains two integers `m` and `n` (1 ≤ m, n ≤ 50), representing the number of rows and columns in the grid. Each of the following `m` lines contains `n` integers either \'0\' or \'1\', without spaces between them, representing the state of each cell in the grid. Output Print a single integer — the number of distinct islands in the grid. Examples Input 4 5 11000 11000 00100 00011 Output 3 Input 3 3 111 010 111 Output 1 Input 3 2 01 10 01 Output 3 Note In the first sample, the grid has three distinct islands. The first island is formed by the top-left 2x2 block of \'1\'s. The second island is the single \'1\' in the center. The third island is the 2x2 block in the bottom-right. In the second sample, there is only one large island occupying the entire grid. In the third sample, there are three distinct islands, each of which contains a single \'1\' standing alone.","solution":"def count_islands(m, n, grid): def dfs(x, y): if x < 0 or x >= m or y < 0 or y >= n or grid[x][y] == \'0\': return grid[x][y] = \'0\' # Mark the cell as visited for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]: dfs(x + dx, y + dy) islands = 0 for i in range(m): for j in range(n): if grid[i][j] == \'1\': islands += 1 dfs(i, j) return islands def solve_islands_problem(m, n, input_grid_str): grid = [list(row) for row in input_grid_str.split()] return count_islands(m, n, grid)"},{"question":"Given a list of integers, find the maximum possible sum of a subsequence with the constraint that no two numbers in the sequence should be adjacent in the list. Example 1: Input: arr = [3, 2, 7, 10] Output: 13 Explanation: The subsequence {3, 10} is the maximum sum. Note that {3, 7} is not the maximum sum because 7 and 10 are adjacent. Example 2: Input: arr = [3, 2, 5, 10, 7] Output: 15 Explanation: The subsequence {3, 5, 7} is the maximum sum. Note that {3, 10} is not the maximum sum. Your Task: You don\'t need to read input or print anything. Your task is to complete the function maxSubsetSum() which takes the list of integers arr as input and returns the maximum possible sum of non-adjacent numbers. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= len(arr) <= 10^5 1 <= arr[i] <= 10^4","solution":"def maxSubsetSum(arr): Returns the maximum possible sum of non-adjacent numbers in the array. if not arr: return 0 if len(arr) == 1: return arr[0] prev_prev = 0 # This will store the max sum till the (i-2)-th element prev = arr[0] # This will store the max sum till the (i-1)-th element for i in range(1, len(arr)): current = max(prev, prev_prev + arr[i]) prev_prev = prev prev = current return prev"},{"question":"As part of a farm management software, you have to write a feature that helps farmers keep track of their crops. The farm is represented as a rectangular grid of cells, where each cell can either be empty or have a crop planted in it. Each cell in the grid is represented by a pair of coordinates (i, j), where i is the row number and j is the column number. The grid is initially empty, and farmers can perform the following operations: 1. Plant a crop in a given cell (i, j). 2. Remove a crop from a given cell (i, j). 3. Check how many crops are planted in a specified subrectangle of the grid. Given the size of the grid and a sequence of operations, implement the feature to help farmers manage and query their crops. Input The first line contains two integers n and m (1 ≤ n, m ≤ 1000), the number of rows and columns in the grid, respectively. The second line contains an integer q (1 ≤ q ≤ 10^5), the number of operations. Each of the next q lines describes an operation, and can be one of the following: - \'1 i j\' - Plant a crop at cell (i, j). - \'2 i j\' - Remove the crop from cell (i, j). - \'3 x1 y1 x2 y2\' - Query the number of crops in the subrectangle with corners (x1, y1) and (x2, y2) (inclusive). Output For each query of the third type, output the result on a new line. Examples Input 5 4 7 1 1 1 1 2 2 1 3 3 3 1 1 3 3 2 2 2 3 1 1 3 3 3 1 1 5 4 Output 3 2 2 Explanation In the given example, the grid has 5 rows and 4 columns. Initially, the grid is empty. The operations are as follows: 1. Plant a crop at (1, 1) 2. Plant a crop at (2, 2) 3. Plant a crop at (3, 3) 4. Query the number of crops in the rectangle (1, 1) to (3, 3) - there are 3 crops 5. Remove the crop from (2, 2) 6. Query the number of crops in the rectangle (1, 1) to (3, 3) - there are 2 crops now 7. Query the number of crops in the entire grid - there are 2 crops Notice that the planted crops and removals are followed correctly as the queries are processed.","solution":"class FarmGrid: def __init__(self, n, m): self.grid = [[0] * m for _ in range(n)] self.rows = n self.cols = m def plant_crop(self, i, j): if self.grid[i - 1][j - 1] == 0: self.grid[i - 1][j - 1] = 1 def remove_crop(self, i, j): if self.grid[i - 1][j - 1] == 1: self.grid[i - 1][j - 1] = 0 def query_crops(self, x1, y1, x2, y2): count = 0 for i in range(x1 - 1, x2): for j in range(y1 - 1, y2): count += self.grid[i][j] return count def execute_operations(n, m, q, operations): farm = FarmGrid(n, m) results = [] for operation in operations: parts = list(map(int, operation.split())) if parts[0] == 1: farm.plant_crop(parts[1], parts[2]) elif parts[0] == 2: farm.remove_crop(parts[1], parts[2]) elif parts[0] == 3: result = farm.query_crops(parts[1], parts[2], parts[3], parts[4]) results.append(result) return results"},{"question":"Write a function that takes a list of integers and returns a new list where every integer is incremented by the sum of all previous elements in the list. If the list is empty, return an empty list. For example: ``` increment_by_sum([1, 2, 3]) = [1, 3, 6] increment_by_sum([0, 0, 0]) = [0, 0, 0] increment_by_sum([4, -1, 2]) = [4, 3, 5] increment_by_sum([]) = [] ``` Explanation: - For the input `[1, 2, 3]`, the function computes the new values as follows: - The first element is `1` - The second element is `1 + 2 = 3` - The third element is `1 + 2 + 3 = 6` - For the input `[0, 0, 0]`, each element remains `0` because the initial elements are `0`. - For the input `[4, -1, 2]`, the function computes the new values as follows: - The first element is `4` - The second element is `4 + (-1) = 3` - The third element is `4 + (-1) + 2 = 5` - For an empty input list `[]`, the output is `[]`.","solution":"def increment_by_sum(nums): Takes a list of integers and returns a new list where each integer is incremented by the sum of all previous elements in the list. result = [] current_sum = 0 for num in nums: current_sum += num result.append(current_sum) return result"},{"question":"In the kingdom of Geometrica, there are several castles located on the x-y plane. Each castle is represented by its coordinates (xi, yi). The king wants to ensure that all castles are connected by building the minimum number of roads, such that each road connects two castles directly. A road between two castles (xi, yi) and (xj, yj) has a cost equal to the Euclidean distance between them. Your task is to calculate the minimum total cost to connect all the castles. -----Input----- The first line of the input contains an integer n (2 ≤ n ≤ 10^3) — the number of castles. The following n lines contain two integers xi and yi (-10^4 ≤ xi, yi ≤ 10^4) — the coordinates of the i-th castle. -----Output----- Output a single floating-point number, the minimum total cost to connect all the castles. Your answer will be checked for correctness against a relative error of 10^-6. -----Examples----- Input 4 0 0 0 1 1 0 1 1 Output 3.000000 Input 3 0 0 1 1 2 2 Output 2.828427","solution":"import math import heapq class DisjointSet: def __init__(self, n): self.parent = list(range(n)) self.rank = [1] * n def find(self, a): if self.parent[a] == a: return a self.parent[a] = self.find(self.parent[a]) # Path compression return self.parent[a] def union(self, a, b): root_a = self.find(a) root_b = self.find(b) if root_a != root_b: if self.rank[root_a] > self.rank[root_b]: self.parent[root_b] = root_a elif self.rank[root_a] < self.rank[root_b]: self.parent[root_a] = root_b else: self.parent[root_b] = root_a self.rank[root_a] += 1 def calc_distance(c1, c2): return math.sqrt((c1[0] - c2[0])**2 + (c1[1] - c2[1])**2) def min_total_cost_to_connect_castles(castles): n = len(castles) edges = [] for i in range(n): for j in range(i + 1, n): distance = calc_distance(castles[i], castles[j]) edges.append((distance, i, j)) heapq.heapify(edges) ds = DisjointSet(n) total_cost = 0 edges_used = 0 while edges and edges_used < n - 1: cost, u, v = heapq.heappop(edges) if ds.find(u) != ds.find(v): ds.union(u, v) total_cost += cost edges_used += 1 return total_cost"},{"question":"To organize a coding marathon, Janette has decided to prepare a leaderboard system where participants\' scores are automatically updated after each competition round. The leaderboard consists of multiple participants, each identified by a unique participant ID. Each participant can gain a certain number of points after every competition round. Janette wants to implement a program that will help her keep track of the scores and determine the top K participants at any given time. The top K participants should be displayed in descending order by score. If multiple participants have the same score, they should be ordered by their participant ID in ascending order. -----Input:----- The first line contains two integers N and K where N is the number of participants and K is the number of top participants to display. The next Q lines contain updates in the format `P S` where `P` is the participant ID and `S` is the score that the participant gained in that round. Here, 1 leq N leq 1000, 1 leq K leq N, and 1 leq Q leq 10000. The participant IDs are unique integers between 1 and N. The score S is between -1000 and 1000. -----Output:----- After processing all the updates, output the top K participants in descending order of their scores. If there is a tie in scores, order them by participant ID in ascending order. Each participant\'s ID and score should be printed on a new line in the format `P S`. -----Constraints:----- - 1 leq N leq 1000 - 1 leq K leq N - 1 leq Q leq 10000 -----Sample Input:----- 5 3 1 10 2 20 3 10 4 30 5 -10 1 5 2 -5 -----Sample Output:----- 4 30 1 15 2 15 -----Explanation:----- After processing the updates: - Participant 1 has a total score of 15 - Participant 2 has a total score of 15 - Participant 3 has a total score of 10 - Participant 4 has a total score of 30 - Participant 5 has a total score of -10 The top 3 participants are: - Participant 4 with a score of 30 - Participant 1 with a score of 15 (ID lower preferred as a tiebreaker) - Participant 2 with a score of 15","solution":"def update_leaderboard(N, K, updates): Update the leaderboard and return the top K participants by their scores. Args: N (int): The number of participants. K (int): The number of top participants to display. updates (list of tuple Participant ID, score update integer): A list of score updates. Returns: list of tuple: The top K participants with their scores in the desired format. # Dictionary to store the scores of each participant scores = {i: 0 for i in range(1, N+1)} # Process each update for pid, score in updates: scores[pid] += score # Create a sorted list of participants based on their scores and IDs sorted_participants = sorted(scores.items(), key=lambda x: (-x[1], x[0])) # Return the top K participants return sorted_participants[:K] def format_leaderboard(leaderboard): Format the leaderboard into the desired output format. Args: leaderboard (list of tuple): The top participants with their scores. Returns: list of str: The formatted leaderboard as a list of strings. return [f\\"{pid} {score}\\" for pid, score in leaderboard]"},{"question":"Bakry encountered yet another problem and seeks your assistance in solving it. You are given a tree of n nodes where each node i has value a_i assigned to it for each i from 1 to n. Additionally, you are provided with an integer m. Your objective is to find out if it is possible to delete exactly m edges from the tree such that the resulting set of connected components includes at least one component where the sum of the values of the nodes is even. If such a scenario is possible, indicate the minimum number of connected components that can have an even sum by removing exactly m edges. If it is not possible, indicate so. -----Input----- The first line contains the number of test cases t (1 leq t leq 10^4). The first line of each test case contains two integers n and m (2 leq n leq 10^4, 1 leq m leq n-1). The second line of each test case contains n integers a_1, a_2, ..., a_n (1 leq a_i leq 10^6). The i-th of the next n-1 lines contains two integers u_i and v_i (1 leq u_i, v_i leq n, u_i neq v_i), which indicates an edge between nodes u_i and v_i. It is guaranteed that the given graph is a tree. It is guaranteed that the sum of n over all test cases does not exceed 10^5. -----Output----- For each test case, output a single integer. If it is possible to delete exactly m edges such that at least one of the resulting connected components has an even sum, output the minimum number of connected components that have an even sum. If it is not possible, output -1. -----Examples----- Input 3 6 2 1 2 3 4 5 6 1 2 2 3 3 4 4 5 5 6 5 1 5 6 7 8 9 1 2 2 3 3 4 4 5 4 2 1 8 7 6 1 2 2 3 3 4 Output 2 1 1 -----Note----- In the first test case, after removing edges (3, 4) and (5, 6), you will have the following connected components: - {1, 2, 3}, sum = 6 (even) - {4, 5}, sum = 9 (odd) - {6}, sum = 6 (even) So, the minimum number of components with an even sum is 2. In the second test case, after removing edge (4, 5), we get: - {1, 2, 3, 4}, sum = 26 (even) - {5}, sum = 9 (odd) So, the minimum number of components with an even sum is 1. In the third test case, after removing edges (2, 3) and (3, 4), we get: - {1, 2}, sum = 9 (odd) - {3}, sum = 7 (odd) - {4}, sum = 6 (even) So, the minimum number of components with an even sum is 1.","solution":"def can_have_even_sum_component(n, m, a, edges): # Function to check the conditions and return the minimum number of even sum components # Or -1 if not possible total_sum = sum(a) if total_sum % 2 == 0: # Total sum is even, so we can have at least one component with an even sum return 1 # When total sum is odd, we need to check if after removing exactly `m` edges we can achieve an even sum component # If we can\'t ever make components where sum is even, return -1 return -1 if m == n-1 else 1 def process_test_cases(t, test_cases): results = [] for test_case in test_cases: n, m = test_case[\\"n\\"], test_case[\\"m\\"] a = test_case[\\"a\\"] edges = test_case[\\"edges\\"] result = can_have_even_sum_component(n, m, a, edges) results.append(result) return results"},{"question":"In the world of computational music theory, melody sequences are often analyzed and manipulated using various algorithms. A melody is represented as a sequence of integers, where each integer corresponds to a musical note. An important transformation in this context is the \\"cyclic shift\\". A cyclic shift moves each element of a sequence to the position of its neighbor, and the last element is moved to the first position. Given a melody M and a sequence pattern P, determine the smallest number of cyclic shifts needed to transform M into a melody that begins with pattern P. If it is impossible to do so, return -1. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the length of the melody M. The second line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 100), representing the melody M. The third line contains an integer m (1 ≤ m ≤ n), the length of the pattern P. The fourth line contains m integers b1, b2, ..., bm (0 ≤ bi ≤ 100), representing the pattern P. Output Output a single integer — the minimum number of cyclic shifts needed to make the transformed melody start with the pattern P or -1 if it is not possible. Examples Input 6 1 2 3 4 5 6 3 4 5 6 Output 3 Input 4 7 8 9 10 2 9 7 Output -1","solution":"def min_cyclic_shifts_to_pattern(n, melody, m, pattern): Determines the minimum number of cyclic shifts needed to transform the melody so that it starts with the given pattern. :param n: Length of the melody. :param melody: List of integers representing the melody. :param m: Length of the pattern. :param pattern: List of integers representing the pattern. :return: Minimum number of cyclic shifts or -1 if not possible. for shifts in range(n): if melody[:m] == pattern: return shifts # Perform a cyclic shift melody = melody[1:] + melody[:1] return -1"},{"question":"A group of friends is planning a treasure hunt in a rectangular field of dimensions m by n. The field is divided into 1x1 grid cells, and each cell contains either a path or an obstacle. The treasure is placed at some cell in the field, and the start point is at another cell. You need to determine if it is possible to reach the treasure from the start point by moving only up, down, left, or right through the path cells (not through the obstacles). Input The input consists of: - Two integers m and n (1 ≤ m, n ≤ 100), the dimensions of the field. - m lines of n characters each, representing the field. A dot (\'.\') represents a path, a hash (\'#\') represents an obstacle, \'S\' represents the start point, and \'T\' represents the treasure. There will be exactly one \'S\' and one \'T\' in the field. Output Write a single YES or NO. Write YES if and only if it is possible to reach the \'T\' from \'S\'. Examples Input 3 3 S.. # .T. Output NO Input 3 3 S.. .#. ..T Output YES","solution":"def is_path_possible(m, n, field): from collections import deque # Find start and treasure positions start = None treasure = None for i in range(m): for j in range(n): if field[i][j] == \'S\': start = (i, j) elif field[i][j] == \'T\': treasure = (i, j) # Define movements: up, down, left, right directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # BFS to check reachability queue = deque([start]) visited = set() visited.add(start) while queue: x, y = queue.popleft() if (x, y) == treasure: return \\"YES\\" for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited and field[nx][ny] != \'#\': queue.append((nx, ny)) visited.add((nx, ny)) return \\"NO\\" # Example usage: m1, n1 = 3, 3 field1 = [\\"S..\\", \\"#\\", \\".T.\\"] assert is_path_possible(m1, n1, field1) == \\"NO\\" m2, n2 = 3, 3 field2 = [\\"S..\\", \\".#.\\", \\"..T\\"] assert is_path_possible(m2, n2, field2) == \\"YES\\""},{"question":"Given two sorted linked lists, merge them into a single sorted linked list. The merged linked list should be made by splicing together the nodes of the given two lists. Example 1: Input: List1: 1->2->4 List2: 1->3->4 Output: 1->1->2->3->4->4 Example 2: Input: List1: 2->3->5 List2: 1->4->6 Output: 1->2->3->4->5->6 Your Task: You are required to complete the function mergeTwoLists() that takes two linked lists as input and returns the merged sorted linked list. The printing is done automatically by the driver code. Expected Time Complexity: O(n + m), where n and m are the lengths of the two linked lists. Expected Auxiliary Space: O(1), as the merged linked list should be created by splicing existing nodes together. Constraints: 1. The number of nodes in both linked lists is in the range [0, 50]. 2. -100 <= Node.val <= 100 3. Both Linked lists are sorted in non-decreasing order.","solution":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def mergeTwoLists(l1, l2): dummy = ListNode() current = dummy while l1 and l2: if l1.val < l2.val: current.next = l1 l1 = l1.next else: current.next = l2 l2 = l2.next current = current.next if l1: current.next = l1 if l2: current.next = l2 return dummy.next"},{"question":"A courier company has a grid of streets in a new city. They need to figure out the minimum number of turns required to go from the top-left corner (1, 1) of the grid to the bottom-right corner (n, m). On each move, you can go either to the right or downward. You need to write a function to determine this minimum number of turns for different sizes of grids. Example: If n=2 and m=3, then minimum turns required to go from (1,1) to (2,3) is 1. Explanation: You start at (1,1). One possible path is (1,1) -> (1,2) -> (1,3) -> (2,3). In this path, you make only one turn (downward at (1,3)). Function Description: Write the minTurns function: ```python def minTurns(n: int, m: int) -> int: ``` Parameters: - int n: The number of rows in the grid. - int m: The number of columns in the grid. Returns: - int: The minimum number of turns required to go from (1,1) to (n,m). Input Format: The first line contains the number of test cases, boldsymbol{t}. Each of the following boldsymbol{t} lines contains two integers n and m. Constraints: 1 leq t leq 1000 1 leq n, m leq 10^6 Example Input: 2 2 3 3 3 Example Output: 1 1 Explanation: Case 1: One possible path is (1,1) -> (1,2) -> (1,3) -> (2,3). There is 1 turn when you move downwards from (1,3) to (2,3). Case 2: One possible path is (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). There is 1 turn when moving downwards from (1,3) to (2,3).","solution":"def minTurns(n: int, m: int) -> int: Returns the minimum number of turns required to get from the top-left corner (1, 1) of the grid to the bottom-right corner (n, m). # You only need to turn when switching between rows and columns return min(n, m) - 1"},{"question":"You are given two strings s1 and s2. You need to determine the length of the longest common substring between the two strings. A substring is a sequence of consecutive characters within a string. Input Format The first line contains T, the number of testcases. T lines follow, each line contains two space-separated strings s1 and s2. Constraints 1 ≤ T ≤ 10^4 1 ≤ |s1|, |s2| ≤ 10^3 The strings consist of lowercase English letters only. Output Format For each test case, output the length of the longest common substring. Sample Input 0 3 abcdef abf xyz xyabz hello world Sample Output 0 2 2 1 Explanation 0 In the first test case, \\"ab\\" is the longest common substring between \\"abcdef\\" and \\"abf\\". In the second test case, \\"xy\\" is the longest common substring between \\"xyz\\" and \\"xyabz\\". In the third test case, \\"o\\" is the longest common substring between \\"hello\\" and \\"world\\".","solution":"def longest_common_substring(s1, s2): Returns the length of the longest common substring between s1 and s2. m, n = len(s1), len(s2) # Create a matrix to store lengths of longest common suffixes of substrings dp = [[0] * (n + 1) for _ in range(m + 1)] longest = 0 for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 longest = max(longest, dp[i][j]) else: dp[i][j] = 0 return longest def process_test_cases(test_cases): results = [] for s1, s2 in test_cases: results.append(longest_common_substring(s1, s2)) return results"},{"question":"You are tasked with developing a new feature for a competitive social media platform. The platform wants to introduce a system where users can create posts with hashtags. Each hashtag can be accompanied by a weight, which represents its importance or frequency of use. When a user creates a post, they can add multiple hashtags. The platform needs to calculate a \\"Post Popularity Score\\" based on these hashtags. The score is derived from the sum of the weights of the hashtags used in the post. Additionally, if the same hashtag appears multiple times in the same post, it should only be counted once towards the score. The platform has already collected a list of hashtags along with their respective weights. Given a list of hashtags and their respective weights, and a list of posts where each post consists of multiple hashtags, write a program to compute the popularity score for each post. Input The first line contains an integer n (1 ≤ n ≤ 100,000), the number of different hashtags. The next n lines each contain a hashtag (a string of at most 20 characters) and an integer wi (1 ≤ wi ≤ 1,000,000), the weight of the hashtag. The following line contains an integer m (1 ≤ m ≤ 100,000), the number of posts. The next m lines each contain a list of hashtags used in that post separated by spaces. Each list contains between 2 and 50 hashtags. Output Print m lines, each containing the popularity score for the corresponding post. Example Input 5 #food 5 #travel 8 #photography 7 #foodie 6 #nature 4 3 #food #travel #photography #nature #travel #food #foodie #nature Output 13 19 15 Explanation In the first post, the hashtags are \\"#food\\" and \\"#travel\\". Their weights are 5 and 8 respectively, so the popularity score is 5 + 8 = 13. In the second post, the hashtags are \\"#photography\\", \\"#nature\\", and \\"#travel\\". Their weights are 7, 4, and 8 respectively, so the popularity score is 7 + 4 + 8 = 19. In the third post, the hashtags are \\"#food\\", \\"#foodie\\", and \\"#nature\\". Their weights are 5, 6, and 4 respectively, so the popularity score is 5 + 6 + 4 = 15. The hashtag \\"#food\\" appears twice but is only counted once.","solution":"def calculate_popularity_scores(n, hashtags_weights, m, posts): Calculates the popularity scores for a list of posts. :param n: Number of different hashtags :param hashtags_weights: List of tuples containing hashtag and its weight :param m: Number of posts :param posts: List of posts, where each post is a list of hashtags :return: List of popularity scores for each post # Create a dictionary to map hashtags to their weights hashtag_to_weight = {hashtag: weight for hashtag, weight in hashtags_weights} # Calculate popularity scores for each post popularity_scores = [] for post in posts: unique_hashtags = set(post) # Use a set to count each hashtag only once score = sum(hashtag_to_weight[hashtag] for hashtag in unique_hashtags if hashtag in hashtag_to_weight) popularity_scores.append(score) return popularity_scores # Example usage n = 5 hashtags_weights = [(\'#food\', 5), (\'#travel\', 8), (\'#photography\', 7), (\'#foodie\', 6), (\'#nature\', 4)] m = 3 posts = [[\'#food\', \'#travel\'], [\'#photography\', \'#nature\', \'#travel\'], [\'#food\', \'#foodie\', \'#nature\']] popularity_scores = calculate_popularity_scores(n, hashtags_weights, m, posts) for score in popularity_scores: print(score)"},{"question":"The kingdom of Keploria is under attack by an army of goblins that march in from the east. The kingdom\'s defensive strategy requires understanding the patterns in which the goblins approach. The goblins\' marching paths can be represented as a grid where each cell contains an integer height representing the terrain\'s elevation at that point. Keploria’s army can only patrol if the path maintains a gentle elevation increase, meaning they can only move from one cell to another if the difference in elevation between adjacent cells is at most 2 units. Each patrol starts from the top-left cell (1, 1) and needs to reach the bottom-right cell (N, M). The soldiers can only move right or down from their current position. Determine whether there exists a valid path for the soldiers to traverse the grid and reach the battlefront. INPUT: First line contains T, the number of test cases. For each test case: - The first line contains two integers N and M representing the number of rows and columns. - The next N lines contain M space-separated integers representing the elevation heights of the grid. OUTPUT: For each test case, print \\"YES\\" if there is a valid path from the top-left to the bottom-right cell, otherwise print \\"NO\\". CONSTRAINTS: 1 ≤ T ≤ 1000 1 ≤ N, M ≤ 200 -1000 ≤ Height[i][j] ≤ 1000 SAMPLE INPUT: 2 3 3 1 2 3 2 3 4 3 4 5 3 3 1 3 5 6 8 10 11 13 15 SAMPLE OUTPUT: YES NO Explanation: In the first test case: One possible path is starting from (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3). The elevation differences between adjacent cells are within the allowed range of 2 units. In the second test case: It is impossible to find a path where all adjacent cells have an elevation difference of at most 2 units. Hence, the output is \\"NO\\".","solution":"def is_valid_path(grid, n, m): from collections import deque directions = [(0, 1), (1, 0)] visited = [[False for _ in range(m)] for _ in range(n)] queue = deque([(0, 0)]) visited[0][0] = True while queue: x, y = queue.popleft() if x == n - 1 and y == m - 1: return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]: if abs(grid[nx][ny] - grid[x][y]) <= 2: visited[nx][ny] = True queue.append((nx, ny)) return False def can_patrol(T, test_cases): results = [] for i in range(T): N, M = test_cases[i][0] grid = test_cases[i][1] if is_valid_path(grid, N, M): results.append(\\"YES\\") else: results.append(\\"NO\\") return results def parse_input(input_data): lines = input_data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N, M = map(int, lines[index].split()) grid = [] for i in range(N): grid.append(list(map(int, lines[index + 1 + i].split()))) test_cases.append(((N, M), grid)) index += 1 + N return T, test_cases"},{"question":"You\'ll be given a string S as input which consists of lowercase Latin letters. For each character in the string S, print the character that precedes it in the alphabet. For character \'a\', the preceding character is considered to be \'z\'. Input: There will be a single line of input containing the string S. Output: For each character in the string S, print the preceding character in the alphabet. Constraints: 1 ≤ length of S ≤ 100 SAMPLE INPUT abc SAMPLE OUTPUT zab","solution":"def preceding_characters(S): Returns a new string where each character in S is replaced by the preceding character in the alphabet. If a character is \'a\', it is replaced by \'z\'. result = [] for char in S: if char == \'a\': result.append(\'z\') else: result.append(chr(ord(char) - 1)) return \\"\\".join(result)"},{"question":"Dr. X is working on a new bioinformatics tool that requires frequent analysis of DNA sequences. One critical operation is the identification of specific nucleotide patterns within larger DNA strands. Due to the immense size of the DNA sequences involved, Dr. X needs a highly efficient algorithm to count the occurrences of a particular nucleotide pattern within a given sequence. In this problem, you are asked to write a program that reads a DNA sequence and a specific nucleotide pattern, and then counts how many times the pattern appears within the sequence. # Input The input consists of multiple datasets, each formatted as follows: ``` n p sequence pattern ``` - `n` is an integer representing the length of the sequence. - `p` is an integer representing the length of the pattern. - `sequence` is a string of length `n` containing only the characters \'A\', \'C\', \'G\', and \'T\'. - `pattern` is a string of length `p` containing only the characters \'A\', \'C\', \'G\', and \'T\'. You may assume the following: - 1 ≤ n ≤ 1000 - 1 ≤ p ≤ 50 The end of the input is indicated by a line containing two zeros. # Output For each dataset, output a single integer representing the number of times the pattern appears in the sequence. # Example Input ``` 10 2 ACGTACGTAC AC 10 3 ACGTACGTAC GTG 0 0 ``` Output ``` 3 0 ``` # Explanation For the first dataset: - The sequence is \\"ACGTACGTAC\\" and the pattern is \\"AC\\". - The pattern \\"AC\\" appears 3 times in the sequence. For the second dataset: - The sequence is \\"ACGTACGTAC\\" and the pattern is \\"GTG\\". - The pattern \\"GTG\\" does not appear in the sequence, hence the count is 0. Your task is to implement an efficient solution to count the pattern occurrences in the given DNA sequences within the constraints specified.","solution":"def count_pattern_occurrences(n, p, sequence, pattern): Count the number of times pattern appears in the sequence. Args: n (int): Length of the sequence. p (int): Length of the pattern. sequence (str): The DNA sequence containing \'A\', \'C\', \'G\', \'T\'. pattern (str): The pattern to be found in the sequence. Returns: int: Number of times the pattern appears in the sequence. count = 0 for i in range(n - p + 1): if sequence[i: i + p] == pattern: count += 1 return count def process_input(inputs): output = [] for n, p, sequence, pattern in inputs: if n == 0 and p == 0: break output.append(count_pattern_occurrences(n, p, sequence, pattern)) return output"},{"question":"A logistics company needs to optimize the delivery of packages to different locations within a city. The city is represented as a grid of size n × n, where each cell in the grid represents a different location. Each location has a specified delivery cost associated with it. The company follows a specific delivery route that starts at the top-left corner of the grid (cell (1, 1)) and ends at the bottom-right corner (cell (n, n)). The delivery route can only move right or down at each step. The company\'s goal is to minimize the total delivery cost along this route. Write a program to determine the minimum delivery cost from the top-left to the bottom-right corner of the grid. -----Input----- The first line of the input contains an integer n (1 ≤ n ≤ 1000) — the size of the grid. Each of the following n lines contains n integers representing the delivery costs, where the j-th integer in the i-th line is the delivery cost at cell (i, j) (1 ≤ cost[i][j] ≤ 1000). -----Output----- Output a single integer: the minimum delivery cost to move from cell (1, 1) to cell (n, n). -----Examples----- Input 3 1 3 1 1 5 1 4 2 1 Output 7 Input 4 1 2 3 4 1 2 1 2 2 2 2 1 4 1 1 1 Output 9","solution":"def min_delivery_cost(n, grid): Returns the minimum delivery cost to move from cell (1, 1) to cell (n, n) in the grid. Arguments: n -- size of the grid grid -- 2D list of integers representing the delivery costs Returns: int -- the minimum delivery cost # Create a 2D list to store the minimum costs dp = [[0] * n for _ in range(n)] # Initialize the first cell with its own cost dp[0][0] = grid[0][0] # Fill the first row (can only come from the left) for j in range(1, n): dp[0][j] = dp[0][j - 1] + grid[0][j] # Fill the first column (can only come from above) for i in range(1, n): dp[i][0] = dp[i - 1][0] + grid[i][0] # Fill the rest of the cells for i in range(1, n): for j in range(1, n): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] # The cost to reach the bottom-right corner return dp[n - 1][n - 1]"},{"question":"Given an integer array `arr[]` of size `N` and an integer `K`, find a subarray of length `K` such that the average of the elements in the subarray is maximum. The average of a subarray of length `K` is defined as the sum of the subarray elements divided by `K`. For example, given the array `[1, 12, -5, -6, 50, 3]` and `K = 4`, the maximum average subarray is `[12, -5, -6, 50]` with an average of `(12 + (-5) + (-6) + 50) / 4 = 51 / 4 = 12.75`. Example 1: Input: N = 6 K = 4 arr = [1, 12, -5, -6, 50, 3] Output: 12.75 Explanation: The subarray [12, -5, -6, 50] has the maximum average of 12.75. Example 2: Input: N = 4 K = 2 arr = [5, 7, -2, 4] Output: 6.0 Explanation: The subarray [5, 7] has the maximum average of 6.0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function `findMaxAverage()` which takes the array `arr[]`, `N`, and `K` as inputs and returns a floating-point number denoting the maximum average of a subarray of length `K`. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^{5} 1 <= K <= N -10^4 <= arr[i] <= 10^4","solution":"def findMaxAverage(arr, N, K): Returns the maximum average of a subarray of length K from the array arr. Parameters: arr (List[int]): The input array. N (int): The size of the array. K (int): The length of the subarray. Returns: float: The maximum average of a subarray of length K. # Calculate the sum of the first subarray of length K current_sum = sum(arr[:K]) max_sum = current_sum # Iterate over the array to find the max sum of any subarray of length K for i in range(K, N): current_sum += arr[i] - arr[i - K] if current_sum > max_sum: max_sum = current_sum # Calculate the maximum average max_average = max_sum / K return max_average"},{"question":"Given a string S consisting of lowercase and uppercase alphabetic characters, return the shortest palindrome that can be formed by adding characters to the start of S. A palindrome is a string that reads the same backward as forward. -----Constraints----- - The length of S is between 1 and 10^5. - S consists only of uppercase and lowercase alphabetic characters. -----Input----- Input is given from Standard Input in the following format: S -----Output----- Output the shortest palindrome that can be formed by adding characters to the start of S. -----Sample Input----- aacecaaa -----Sample Output----- aaacecaaa","solution":"def shortest_palindrome(S): Returns the shortest palindrome by adding characters to the start of S. # Step 1: Find the longest palindromic prefix of S reverse_s = S[::-1] combined = S + \'#\' + reverse_s lps = [0] * len(combined) # Step 2: Build the LPS array (similar to KMP algorithm) j = 0 for i in range(1, len(combined)): while j > 0 and combined[i] != combined[j]: j = lps[j-1] if combined[i] == combined[j]: j += 1 lps[i] = j # Step 3: Find the addition part shortest_palindrome = reverse_s[:len(S) - lps[-1]] + S return shortest_palindrome"},{"question":"Develop a function that simulates a simplified version of a memory heap manager. The function must perform memory allocation and deallocation operations based on given commands, and maintain information about the currently allocated memory blocks. The heap consists of a fixed number of memory cells. Each cell can either be free or occupied by a block of memory. Memory allocation should be done sequentially from the start of the heap, and deallocation can free up memory blocks, making those cells available for future allocations. # Input - The first line contains an integer `n` (1 ≤ n ≤ 100) – the number of cells in the heap. - The second line contains an integer `m` (1 ≤ m ≤ 1000) – the number of commands. - The following `m` lines contain commands, each being one of the following: - `\\"ALLOC size\\"`: Allocates a block of memory of the given size. If allocation is successful, return the starting index (1-based) of the allocated block. If there is not enough contiguous free memory to allocate the block, return `-1`. - `\\"FREE index\\"`: Frees the block of memory starting at the given index (1-based). If the index is invalid or the block is not currently allocated, return `-1`. If successful, return `0`. # Output For each command, print the result of the command (either the index or `-1` or `0`). # Example Input ``` 10 6 ALLOC 5 ALLOC 4 FREE 1 ALLOC 6 ALLOC 1 FREE 5 ``` Output ``` 1 6 0 -1 1 -1 ``` # Note 1. The initial heap is entirely free, comprising `n` memory cells. 2. When processing an `\\"ALLOC size\\"` command, allocate the first available contiguous block of the given size. 3. When processing a `\\"FREE index\\"` command, always verify that the index is valid and the block at the index is allocated before freeing it. Ensure the simulation maintains accurate information on currently allocated memory blocks and correctly processes the allocation and deallocation commands.","solution":"def simulate_memory_heap(n, m, commands): heap = [0] * n # 0 means free, any positive number means allocated allocations = {} # Track allocation start index to its size results = [] for command in commands: if command.startswith(\\"ALLOC\\"): size = int(command.split()[1]) allocated = False for i in range(n - size + 1): if all(heap[i + j] == 0 for j in range(size)): for j in range(size): heap[i + j] = 1 allocations[i + 1] = size # 1-based index results.append(i + 1) allocated = True break if not allocated: results.append(-1) elif command.startswith(\\"FREE\\"): index = int(command.split()[1]) if index in allocations: size = allocations.pop(index) for j in range(size): heap[index - 1 + j] = 0 results.append(0) else: results.append(-1) return results"},{"question":"Bob is an artist and he loves to create digital paintings with specific patterns on a rectangular canvas. Each pattern consists of a specific arrangement of colored cells. Bob has designed a new pattern and he wants to replicate it vertically throughout the entire height of the canvas. Given the height and width of the canvas and the height of the pattern, you need to determine the number of complete patterns that fit on the canvas. Input The first line of the input will contain T (number of test cases). Each test case will contain three integers H, W, and P, where H is the height of the canvas, W is its width, and P is the height of the pattern. Output For each test case, print the maximum number of complete patterns that can fit on the canvas. Constraints 1 ≤ T ≤ 10 1 ≤ H, W, P ≤ 10^9 SAMPLE INPUT 2 15 10 3 20 5 4 SAMPLE OUTPUT 5 5","solution":"def number_of_patterns(T, cases): For each case, return the maximum number of complete patterns that can fit on the canvas. :param T: Number of test cases :param cases: List of tuples with each tuple containing (H, W, P) :return: List of results for each case results = [] for H, W, P in cases: results.append(H // P) return results def parse_input(input_str): lines = input_str.strip().split(\'n\') T = int(lines[0]) cases = [] for i in range(1, T + 1): H, W, P = map(int, lines[i].split()) cases.append((H, W, P)) return T, cases def format_output(results): return \'n\'.join(map(str, results))"},{"question":"Alice loves playing with words. She has come up with a new game where she takes a word and checks if it is an anagram of any palindrome. A word is called an anagram of a palindrome if it can be rearranged to form a palindrome. Your task is to write a program to help Alice determine if a given word can be rearranged to form a palindrome. ----- Input Format ----- - The first line contains a single integer T, the number of test cases. - Each of the next T lines contains a single string S, representing the word to check. ----- Output Format ----- For each test case, print \\"YES\\" if the word can be rearranged to form a palindrome, otherwise print \\"NO\\". ----- Constraints ----- 1 ≤ T ≤ 100 1 ≤ |S| ≤ 10^5 The strings contain only lowercase English letters. ----- Sample Input 1 ----- 3 civic ivicc hello ----- Sample Output 1 ----- YES YES NO","solution":"def can_form_palindrome(word): Checks if the input word can be rearranged to form a palindrome. from collections import Counter count = Counter(word) odd_count = sum(1 for c in count.values() if c % 2 != 0) # A string can be rearranged to form a palindrome if at most one character has an odd count. return odd_count <= 1 def check_words_for_palindromic_anagrams(test_cases): Takes a list of words and returns a list containing \\"YES\\" or \\"NO\\" for each word depending on whether it can be rearranged to form a palindrome. results = [] for word in test_cases: if can_form_palindrome(word): results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Alice has recently learned about prime numbers and their significance in cryptography. To help her practice, Bob gave her a task: Given a number n, find the closest prime number greater than n. If there are multiple prime numbers at the same distance, return the smaller one. Your task is to help Alice by writing a program that solves Bob\'s challenge. Input The first (and only) input line contains the integer n (1 ≤ n ≤ 10^6). Output Print the closest prime number greater than n. If there are multiple prime numbers at the same distance, return the smaller one. Examples Input 7 Output 11 Input 14 Output 17 Note In the first example, the number 11 is the closest prime number greater than 7. In the second example, the number 17 is the closest prime number greater than 14.","solution":"def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def next_prime(n): if n <= 1: return 2 prime = n found = False while not found: prime += 1 if is_prime(prime): found = True return prime"},{"question":"You are given a string containing a mathematical expression in infix notation, which may include integers, parentheses (`(` and `)`), and the operators `+`, `-`, `*`, and `/`. Your task is to convert this infix expression to its equivalent postfix (Reverse Polish notation) expression. For example, the input expression `((2 + 3) * 5) - (8 / (4 + 2))` should be converted to `2 3 + 5 * 8 4 2 + / -`. Your output should be the postfix expression as a string, with space separating each token. Assume the input expression is always valid and non-empty.","solution":"def infix_to_postfix(expression): precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} output = [] stack = [] def is_operator(c): return c in precedence def precedence_level(c): return precedence[c] tokens = expression.replace(\'(\', \' ( \').replace(\')\', \' ) \').split() for token in tokens: if token.isnumeric(): output.append(token) elif token == \'(\': stack.append(token) elif token == \')\': while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # pop \'(\' elif is_operator(token): while stack and stack[-1] != \'(\' and precedence_level(stack[-1]) >= precedence_level(token): output.append(stack.pop()) stack.append(token) while stack: output.append(stack.pop()) return \' \'.join(output)"},{"question":"A delivery robot is given a set of instructions to follow in a 2D grid starting at the origin point (0, 0). Each instruction tells the robot to move one unit in either north, south, east, or west direction. You need to determine the robot\'s final position after executing all the instructions. INPUT The first line contains the number of test cases 0 < t < 501. Each test case is a single line containing a string of instructions. Each instruction is represented as a single uppercase character: \'N\' for north, \'S\' for south, \'E\' for east, and \'W\' for west. The length of each instruction string is between 1 and 10^6. OUTPUT For each test case, print the final coordinates of the robot as two space-separated integers. SAMPLE INPUT 2 NESW NNNSSWWE SAMPLE OUTPUT 0 0 0 2 Explanation For the first test case, after executing the instructions \'NESW\': - \'N\' moves the robot to (0, 1) - \'E\' moves the robot to (1, 1) - \'S\' moves the robot back to (1, 0) - \'W\' moves the robot back to (0, 0) So the final position is (0, 0). For the second test case, after executing the instructions \'NNNSSWWE\': - \'N\' moves the robot to (0, 1) - \'N\' moves the robot to (0, 2) - \'N\' moves the robot to (0, 3) - \'S\' moves the robot back to (0, 2) - \'S\' moves the robot back to (0, 1) - \'W\' moves the robot to (-1, 1) - \'W\' moves the robot to (-2, 1) - \'E\' moves the robot back to (-1, 1) So the final position is (-1, 1).","solution":"def get_final_position(instructions): Returns the final position of the robot after executing the given instructions. x, y = 0, 0 for instruction in instructions: if instruction == \'N\': y += 1 elif instruction == \'S\': y -= 1 elif instruction == \'E\': x += 1 elif instruction == \'W\': x -= 1 return x, y def process_test_cases(test_cases): Processes multiple test cases and returns the results. results = [] for instructions in test_cases: results.append(get_final_position(instructions)) return results"},{"question":"Given an array of integers scores, you are tasked with performing multiple queries on this array. Each query is defined by a range [l, r] (inclusive) for which you need to find the sum of the scores. Your task is to efficiently process these queries using prefix sums to provide the sum of elements in the specified range. Example: Input: scores = [1, 7, 3, 0, 9, 4] queries = [[1, 3], [0, 4], [2, 5]] Output: [10, 20, 16] Explanation: For the query [1, 3], the sum of scores from index 1 to 3 is 7 + 3 + 0 = 10. For the query [0, 4], the sum of scores from index 0 to 4 is 1 + 7 + 3 + 0 + 9 = 20. For the query [2, 5], the sum of scores from index 2 to 5 is 3 + 0 + 9 + 4 = 16. Constraint: 1 <= scores.length <= 10^5 1 <= scores[i] <= 10^4 1 <= queries.length <= 10^4 0 <= l <= r < scores.length","solution":"def preprocess_prefix_sums(scores): Computes the prefix sums for the given scores array. prefix_sums = [0] * (len(scores) + 1) for i in range(1, len(prefix_sums)): prefix_sums[i] = prefix_sums[i-1] + scores[i-1] return prefix_sums def range_sum_queries(scores, queries): Given an array of scores and a list of queries, returns the sum of elements in the specified ranges using prefix sums for efficient calculation. prefix_sums = preprocess_prefix_sums(scores) result = [] for l, r in queries: result.append(prefix_sums[r+1] - prefix_sums[l]) return result"},{"question":"Given an integer array `arr` of size `n`, perform the following operations to minimize the array\'s sum: 1. Select any two numbers from the array. 2. Replace these two numbers with their bitwise AND. Repeat the above operations until the array contains only one element. Return the value of the last remaining element in the array. Example `arr = [1, 3, 5]` Explanation: 1. Select 1 and 3: 1 & 3 = 1, the new array is [1, 5] 2. Select 1 and 5: 1 & 5 = 1, the new array is [1] The last remaining element is 1. Function Description Complete the function `minimizeArraySum` in the editor below. It should return the minimal possible value of the lone remaining element in the array. `minimizeArraySum` has the following parameter(s): - `int[] arr`: an array of integers Returns - `int`: the minimum possible value of the remaining element Input Format The first line will contain an integer, `t`, the number of test cases. The next `t` lines each contain: - An integer, `n`, the size of the array. - `n` space-separated integers representing the array, `arr`. Constraints 1 le t le 10 2 le n le 10^5 0 le arr[i] le 10^9 Output Format `t` lines, each containing an integer: the minimum value of the remaining element after performing the operations. Sample Input ``` 2 3 1 3 5 4 12 15 7 9 ``` Sample Output ``` 1 0 ``` Explanation For the first test case: - Select 1 and 3: 1 & 3 = 1, the new array is [1, 5] - Select 1 and 5: 1 & 5 = 1, the new array is [1] For the second test case: - Select 12 and 15: 12 & 15 = 12, the new array is [12, 7, 9] - Select 12 and 7: 12 & 7 = 4, the new array is [4, 9] - Select 4 and 9: 4 & 9 = 0, the new array is [0]","solution":"def minimizeArraySum(arr): Returns the minimal possible value of the lone remaining element in the array after repeatedly replacing any two elements with their bitwise AND. result = arr[0] for num in arr[1:]: result &= num return result def process_test_cases(t, test_cases): results = [] for i in range(t): n, arr = test_cases[i] results.append(minimizeArraySum(arr)) return results"},{"question":"Given an array of integers, determine whether it is possible to partition the array into two subsets such that the sum of elements in both subsets is equal. If possible, return the two subsets. If not possible, return an empty list. -----Constraints----- - The array length n satisfies 1 leq n leq 50 - Each integer in the array, A_i, satisfies 1 leq A_i leq 100 -----Input----- Input is given from Standard Input in the following format: n A_1 A_2 ... A_n -----Output----- Print a single line containing two arrays if it is possible to partition the array as described, otherwise print an empty list. -----Sample Input----- 4 1 5 11 5 -----Sample Output----- [1, 5, 5] [11] Explanation: The given array can be partitioned into two subsets [1, 5, 5] and [11] where the sum of elements in both subsets is 11.","solution":"def can_partition(nums): total_sum = sum(nums) # If the total sum is odd, it\'s not possible to partition if total_sum % 2 != 0: return [] target = total_sum // 2 n = len(nums) # Using dynamic programming to check if we can sum up to target dp = [False] * (target + 1) dp[0] = True for num in nums: for j in range(target, num - 1, -1): if dp[j - num]: dp[j] = True if not dp[target]: return [] # Traceback the subsets from dp array subset1 = [] subset2 = [] i = n - 1 current_sum = target while i >= 0: if current_sum >= nums[i] and dp[current_sum - nums[i]]: subset1.append(nums[i]) current_sum -= nums[i] else: subset2.append(nums[i]) i -= 1 return [subset1, subset2] def main(): n = int(input().strip()) arr = list(map(int, input().strip().split())) result = can_partition(arr) if result: print(f\\"{result[0]} {result[1]}\\") else: print([]) if __name__ == \\"__main__\\": main()"},{"question":"Write a function called `reachable_nodes` to determine if all nodes in a graph are reachable from a given starting node. The given graph is unweighted and undirected. You will be provided the number of nodes, the number of edges, and the edges themselves, along with the starting node. The function should output \\"reachable\\" if all nodes can be reached starting from the given node, otherwise it should output \\"unreachable\\". -----Input----- First line contains two integers `n` and `m`, the number of nodes and edges respectively. The next `m` lines each contain two integers `u` and `v`, representing an undirected edge between node `u` and node `v`. The last line contains one integer, `s`, the starting node. -----Output----- Output a single line containing the string \\"reachable\\" if all nodes are reachable from the starting node, otherwise output \\"unreachable\\". -----Constraints----- - 1 ≤ n ≤ 1000 - 0 ≤ m ≤ 10000 - 1 ≤ u, v ≤ n - 1 ≤ s ≤ n -----Example----- Input 5 4 1 2 2 3 3 4 4 5 1 Output reachable Explanation: All nodes are connected in a single line, so starting from node 1, you can reach all other nodes 2, 3, 4, and 5. Input 5 3 1 2 2 3 3 4 5 Output unreachable Explanation: Node 5 is isolated and has no connections. Therefore, it cannot be reached from any other node.","solution":"def reachable_nodes(n, m, edges, starting_node): from collections import defaultdict, deque def bfs(start_node): visited = set() queue = deque([start_node]) while queue: node = queue.popleft() if node not in visited: visited.add(node) queue.extend(graph[node] - visited) return visited graph = defaultdict(set) for u, v in edges: graph[u].add(v) graph[v].add(u) visited_nodes = bfs(starting_node) if len(visited_nodes) == n: return \\"reachable\\" else: return \\"unreachable\\""},{"question":"Given an integer array `arr` of size `n`, you are required to perform `Q` operations of range sum queries. Each query provides indices `start` and `end` (both inclusive), and you need to calculate the sum of the elements of `arr` from index `start` to index `end`. Example 1: Input: arr = [1, 2, 3, 4, 5] n = 5 Q = 2 queries = [[0, 2], [1, 4]] Output: [6, 14] Explanation: For the first query, sum of elements from index 0 to 2 is 1 + 2 + 3 = 6. For the second query, sum of elements from index 1 to 4 is 2 + 3 + 4 + 5 = 14. Example 2: Input: arr = [10, 20, 30, 40, 50] n = 5 Q = 1 queries = [[1, 3]] Output: [90] Explanation: For the query, sum of elements from index 1 to 3 is 20 + 30 + 40 = 90. Your Task: You don’t need to read input or print anything. You only need to complete the function `rangeSum` that takes the array `arr`, its size `n`, and a list of `queries` of size `Q` as input. It returns a list of integers representing the sum of elements for each range specified in the queries. Expected Time Complexity: O(n + Q) Expected Auxiliary Space: O(n) Constraints: 1 ≤ n ≤ 10^5 1 ≤ Q ≤ 10^4 0 ≤ arr[i] ≤ 10^5 0 ≤ start ≤ end < n","solution":"def rangeSum(arr, n, queries): Returns the list of sums for given range queries on the array. # Precompute prefix sums prefix_sum = [0] * (n + 1) for i in range(n): prefix_sum[i + 1] = prefix_sum[i] + arr[i] # Process each query and calculate range sum using prefix sums results = [] for query in queries: start, end = query results.append(prefix_sum[end + 1] - prefix_sum[start]) return results"},{"question":"You are given a string s and you need to determine if it is possible to partition the string into three non-empty parts such that each part is a palindrome. -----Input----- The input contains a single string s (1 ≤ |s| ≤ 5000) consisting of lowercase English letters. -----Output----- Print \\"YES\\" if it is possible to partition the string into three palindromic parts; otherwise, print \\"NO\\". -----Examples----- Input abcbdd Output YES Input abcd Output NO Input aabbbaa Output YES -----Note----- In the first example, the string can be partitioned as \\"a | bcb | dd\\", where each part is a palindrome. In the second example, there is no way to partition the string into three palindromic parts. In the third example, the string can be partitioned as \\"a | abbba | a\\" or \\"aa | b | bbbaa\\", where each part is a palindrome.","solution":"def is_palindrome(sub): return sub == sub[::-1] def can_partition_into_three_palindromic_parts(s): n = len(s) for i in range(1, n - 1): for j in range(i + 1, n): if is_palindrome(s[:i]) and is_palindrome(s[i:j]) and is_palindrome(s[j:]): return \\"YES\\" return \\"NO\\""},{"question":"Hannah is organizing a circular race track for kids in her neighborhood. The track consists of consecutive segments, each of which requires a different amount of effort to traverse due to varying terrain difficulty. Hannah wants to optimize the race track such that the total effort to complete one full circle is minimized. The effort values for each segment of the track are given in an array. However, the segments can be rotated arbitrarily, meaning that the starting point of the race can be chosen to be any segment of the track. Your task is to find the minimum total effort required to complete one full lap around the circular track. -----Input----- The first line of input contains an integer n (3 ≤ n ≤ 100000) — the number of segments in the race track. The second line of input contains n integers e_1, e_2, ..., e_n (1 ≤ e_{i} ≤ 1000) — the effort required to traverse each segment of the track. -----Output----- Print a single integer — the minimum total effort required to complete one full lap around the track starting from an optimal segment. -----Examples----- Input 5 3 2 1 5 4 Output 15 Input 4 4 7 2 6 Output 19 -----Note----- In the first example, rotating the array to start at the segment with effort 1 gives the sequence 1, 5, 4, 3, 2, resulting in the minimum total effort of 1 + 5 + 4 + 3 + 2 = 15. In the second example, the minimum total effort is found simply by traversing the array as is: 4 + 7 + 2 + 6 = 19, since rotating will not yield a reduced total.","solution":"def min_effort(efforts): Returns the minimum total effort required to complete one full lap around the track: return sum(efforts)"},{"question":"A wizard in a mystical land wants to experiment with magical ropes. Each rope consists of a sequence of segments, each having a magical energy level. A rope has been enchanted so that its segments can potentially rearrange themselves to create a more powerful rope. The power of a rope is defined as the sum of its segments, and a rope is considered more powerful if it has more segments with higher individual energy levels in the front (left) of the rope. The wizard would like to find the lexicographically smallest arrangement of rope segments that still maintains the maximum possible power for a given rope. # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) – the number of segments in the rope. - The second line contains `n` integers representing the energy levels of the segments in the rope, where each segment\'s energy level is a positive integer less than or equal to 1000. # Output - Print a single line containing the lexicographically smallest sequence of segments that maintains the maximum power for the rope. # Examples Example 1 # Input ``` 4 3 3 1 2 ``` # Output ``` 3 3 2 1 ``` Example 2 # Input ``` 3 2 1 1 ``` # Output ``` 2 1 1 ``` # Note - The lexicographically smallest arrangement means that among all possible reorderings of the segments that maintain maximum power, you should pick the sequence that would appear first if sorted in dictionary order. - In Example 1, the maximum power sequence is [3, 3, 2, 1], and no other permutation with this power is smaller. - In Example 2, the maximum power sequence is [2, 1, 1], which is already lexicographically smallest.","solution":"def lexicographically_smallest_rope(n, segments): Returns the lexicographically smallest sequence of segments that maintains the maximum power for the rope. Parameters: n (int): the number of segments in the rope. segments (list of int): the energy levels of the segments in the rope. Returns: list of int: the lexicographically smallest sequence of segments. # Sort the segments in descending order to achieve the maximum power segments.sort(reverse=True) return segments"},{"question":"Given a string s, the goal is to determine the smallest number of characters that need to be changed to make the string a palindrome. A palindrome is a word that reads the same backward as forward. You are allowed to change only alphabetic characters (\'a\' to \'z\'). Input The input consists of a single string s (1 ≤ |s| ≤ 100), where s contains only lowercase alphabetic characters (\'a\' to \'z\'). Output Output a single integer representing the minimum number of changes needed. Examples Input ab Output 1 Input racecar Output 0 Input abcdef Output 3 Explanation for the examples In the first example, by changing \'b\' to \'a\', the string becomes \\"aa\\", which is a palindrome. In the second example, the string \\"racecar\\" is already a palindrome, so no changes are needed. In the third example, you can change \'a\' to \'f\', \'b\' to \'e\', and \'c\' to \'d\' to make \\"abcdef\\" into \\"feddef\\", so 3 changes are needed.","solution":"def min_changes_to_palindrome(s): Returns the minimum number of changes needed to make the string a palindrome. n = len(s) changes = 0 for i in range(n // 2): if s[i] != s[n - i - 1]: changes += 1 return changes"},{"question":"Alice is organizing a coding competition and wants to prepare a scoreboard. She needs a ranking system that returns the top k scores from a list of participants\' scores. Additionally, she needs to make sure the scores are unique and sorted in descending order. Write a program that takes an integer k and a list of integers representing participants\' scores, and returns the top k unique scores in descending order. If there are fewer than k unique scores, return all of them sorted in descending order. -----Input----- The first line of input contains an integer t (1 leq t leq 100) — the number of test cases. For each test case: - The first line contains two integers n (1 leq n leq 1000), the number of participants, and k (1 leq k leq n), the number of top scores to be returned. - The second line contains n space-separated integers representing the scores of the participants. -----Output----- For each test case, output a line with the top k scores in descending order. Each score in the output should be unique. -----Examples----- Input 2 6 3 70 80 80 90 70 60 5 4 50 50 50 50 50 Output 90 80 70 50 -----Note----- In the first test case, the unique scores are [90, 80, 70, 60]. The top 3 unique scores are [90, 80, 70]. In the second test case, the unique scores are [50]. Since there are fewer than 4 unique scores, the output is [50].","solution":"def top_k_scores(test_cases): results = [] for test_case in test_cases: n, k, scores = test_case unique_scores = sorted(set(scores), reverse=True) results.append(unique_scores[:k]) return results # Example Usage: # test_cases = [ # (6, 3, [70, 80, 80, 90, 70, 60]), # (5, 4, [50, 50, 50, 50, 50]) # ] # print(top_k_scores(test_cases)) # Output: [[90, 80, 70], [50]]"},{"question":"You are given an array of integers. You are required to find out if any three distinct elements in the array sum up to a given target number. Write a function that checks if there exists any trio of numbers within the array that add up to the target. ------ Input Format ------ - The first line of input will contain a single integer N, denoting the number of elements in the array. - The second line will contain N space-separated integers, representing the elements of the array. - The third line will contain a single integer T, representing the target sum. ------ Output Format ------ Output a single line containing \\"YES\\" if there exists such a trio, otherwise output \\"NO\\". Output should be in all capital letters. ------ Constraints ------ 3 ≤ N ≤ 1000 -10^3 ≤ array[i] ≤ 10^3 -10^4 ≤ T ≤ 10^4 ------ Sample Input 1 ------ 6 1 2 3 4 5 6 10 ------ Sample Output 1 ------ YES ------ explanation 1 ------ We can find that 1 + 3 + 6 = 10. Since there exists at least one trio that sums to the target, we return \\"YES\\". ------ Sample Input 2 ------ 5 1 2 3 7 8 20 ------ Sample Output 2 ------ NO ------ explanation 2 ------ There is no trio of numbers in the array that adds up to 20. Therefore, the output is \\"NO\\".","solution":"def three_sum_exists(nums, target): This function checks whether there exists any trio of numbers within the array that add up to the target. Parameters: nums (list): A list of integers. target (int): The target sum. Returns: str: \\"YES\\" if there exists such a trio, otherwise \\"NO\\". nums.sort() n = len(nums) for i in range(n - 2): if i > 0 and nums[i] == nums[i - 1]: continue left, right = i + 1, n - 1 while left < right: total = nums[i] + nums[left] + nums[right] if total == target: return \\"YES\\" elif total < target: left += 1 else: right -= 1 return \\"NO\\" # Function to parse input and call the helper function above def trio_sum_solver(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) array = list(map(int, data[1:N+1])) T = int(data[N+1]) print(three_sum_exists(array, T))"},{"question":"Given a sequence of N positive integers, you are required to perform Q operations on it. Each operation can either be updating the value at a specific index or querying the sum of values within a specific range. Operations could be of the following types: 1. Update the value at a specific index. 2. Query the sum of values within a specific range. You must implement this efficiently considering the constraints provided. Input - The first line contains two integers N (1 ≤ N ≤ 100000) and Q (1 ≤ Q ≤ 100000) — the number of integers in the sequence and the number of operations respectively. - The second line contains N integers a1, a2, ..., aN (1 ≤ ai ≤ 1000000000) — the initial sequence. - The next Q lines describe the operations, which can be one of the following two types: * 1 x y — Update the value at index x to y (1 ≤ x ≤ N, 1 ≤ y ≤ 1000000000). * 2 l r — Query the sum of values from index l to index r (1 ≤ l ≤ r ≤ N). Output - For each query of the second type, output a single integer representing the sum of values from index l to index r. Examples Input 5 4 1 2 3 4 5 2 1 3 1 3 8 2 2 4 2 1 5 Output 6 15 20 Note In the first example, the sequence is initially [1, 2, 3, 4, 5]. For the first query, the sum from index 1 to index 3 is 1+2+3 = 6. After the update operation, the sequence becomes [1, 2, 8, 4, 5]. For the second query, the sum from index 2 to index 4 is 2+8+4 = 14. Finally, for the last query, the sum from index 1 to index 5 is 1+2+8+4+5 = 20.","solution":"class FenwickTree: def __init__(self, size): self.size = size self.tree = [0] * (size + 1) def update(self, index, delta): while index <= self.size: self.tree[index] += delta index += index & -index def query(self, index): sum_ = 0 while index > 0: sum_ += self.tree[index] index -= index & -index return sum_ def process_operations(N, Q, sequence, operations): fenwick_tree = FenwickTree(N) for idx, value in enumerate(sequence): fenwick_tree.update(idx + 1, value) result = [] for operation in operations: if operation[0] == 1: index, new_value = operation[1], operation[2] current_value = sequence[index - 1] delta = new_value - current_value sequence[index - 1] = new_value fenwick_tree.update(index, delta) elif operation[0] == 2: l, r = operation[1], operation[2] sum_of_range = fenwick_tree.query(r) - fenwick_tree.query(l - 1) result.append(sum_of_range) return result"},{"question":"You are given an array of integers and you want to partition the array into two subarrays such that the absolute difference between the sum of the elements in the two subarrays is minimized. Write a function to find the minimum possible absolute difference. Example 1: Input: A[] = {1, 6, 11, 5} Output: 1 Explanation: The two subarrays could be {1, 6, 5} and {11}, or {1, 5} and {6, 11}. The absolute difference between the sums of the subarrays is minimized to 1. Example 2: Input: A[] = {3, 1, 4, 2, 2} Output: 0 Explanation: The two subarrays could be {3, 1, 2} and {4, 2}. The absolute difference between the sums of the subarrays is 0. Your Task: You don\'t need to read input or print anything. Your task is to complete the function minDifference() which takes an array A[] as input and returns the minimum possible absolute difference. Expected Time Complexity: O(N*sum(A)), where sum(A) is the sum of the array elements. Expected Auxiliary Space: O(N*sum(A)) Constraints: 1 <= len(A) <= 100 1 <= A[i] <= 1000","solution":"def minDifference(A): Returns the minimum possible absolute difference between the sum of two subarrays. import sys total_sum = sum(A) n = len(A) half_sum = total_sum // 2 # dp[i][j] will be True if a subset with sum j can be formed using first i elements. dp = [[False] * (half_sum + 1) for _ in range(n + 1)] # Initialize dp[0][0] = True because sum of 0 can always be formed with 0 elements for i in range(n + 1): dp[i][0] = True # Fill the DP table for i in range(1, n + 1): for j in range(1, half_sum + 1): dp[i][j] = dp[i - 1][j] if A[i - 1] <= j: dp[i][j] = dp[i][j] or dp[i - 1][j - A[i - 1]] # Find the largest j such that dp[n][j] is True where j is half_sum or less for j in range(half_sum, -1, -1): if dp[n][j]: subset_sum = j break return abs(total_sum - 2 * subset_sum)"},{"question":"Create a function that takes a string and returns the longest substring of unique characters. # result The longest substring with all unique characters. # example ``` input: \\"abcabcbb\\" output: \\"abc\\" input: \\"bbbbb\\" output: \\"b\\" input: \\"pwwkew\\" output: \\"wke\\" input: \\"\\" output: \\"\\" ```","solution":"def longest_unique_substring(s): Returns the longest substring with all unique characters. Parameters: s (str): The input string. Returns: str: The longest substring with all unique characters. start = 0 max_length = 0 max_substring = \\"\\" seen = {} for i, char in enumerate(s): if char in seen and seen[char] >= start: start = seen[char] + 1 seen[char] = i current_length = i - start + 1 if current_length > max_length: max_length = current_length max_substring = s[start:i+1] return max_substring"},{"question":"John has a string S of length N consisting of uppercase English letters. He enjoys rearranging the characters of the string in such a way that no two adjacent characters are the same. John wants to know if it is possible to achieve this rearrangement. Note that a single valid rearrangement is sufficient to conclude that it is possible. Can you help John determine if such a rearrangement exists? ------ Input Format ------ - The first line contains a single integer T — the number of test cases. - The first line of each test case contains an integer N — the length of the string S. - The second line of each test case contains the string S. ------ Output Format ------ For each test case, output \\"YES\\" if there exists a valid rearrangement of the string such that no two adjacent characters are the same. Otherwise, output \\"NO\\". ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 10^{5} S consists of uppercase English letters. It is guaranteed that the sum of N over all test cases does not exceed 10^{6}. ----- Sample Input 1 ------ 3 4 AABB 3 AAA 6 AABCDE ----- Sample Output 1 ------ YES NO YES ----- Explanation 1 ------ Test Case 1: The string \\"AABB\\" can be rearranged as \\"ABAB\\", where no two adjacent characters are the same. Test Case 2: The string \\"AAA\\" cannot be rearranged to a string where no two adjacent characters are the same. Test Case 3: The string \\"AABCDE\\" can be rearranged as \\"ABCDAE\\", where no two adjacent characters are the same.","solution":"def can_rearrange_no_adjacent(n, s): Determines if the characters of the string can be rearranged such that no two adjacent characters are the same. from collections import Counter # Count the frequency of each character char_count = Counter(s) # Get the frequency of the most common character max_count = max(char_count.values()) # If the most common character appears more than (n+1)/2 times, it\'s not possible to rearrange if max_count > (n + 1) // 2: return \\"NO\\" else: return \\"YES\\" def process_input(t, cases): results = [] for n, s in cases: results.append(can_rearrange_no_adjacent(n, s)) return results"},{"question":"Given a string that contains only lowercase letters and the characters \'_\' and \'?\', the character \'_\' represents a space, and the character \'?\' represents any single alphabet character. Your task is to write a function to determine the number of possible unique strings that can be formed by replacing each \'?\' character with any of the 26 letters of the English alphabet. ----- Input Format ----- - The first line contains an integer T denoting the number of test cases. The T test cases then follow. - Each of the next T lines contains a single string. ----- Output Format ----- For each test case, print a single line containing the number of possible unique strings that can be formed. ----- Constraints ----- 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 100 ----- Sample Input 1 ----- 3 a_d ? _? ----- Sample Output 1 ----- 1 26 26 ----- Explanation 1 ----- - For the first test case, the string is \\"a_d\\". There are no \'?\' characters, so only one unique string \\"a d\\" can be formed. - For the second test case, the string is \\"?\\". It can be replaced by any of the 26 letters, so there are 26 possible unique strings. - For the third test case, the string is \\"_?\\". The \'?\' can be replaced by any of the 26 letters, leading to 26 unique strings starting with a space followed by a letter.","solution":"def count_possible_strings(T, test_cases): Given a number of test cases and a list of strings, returns the number of possible unique strings that can be formed for each test case string by replacing \'?\' with any single alphabet character. Parameters: T (int): The number of test cases. test_cases (list of str): A list of strings containing lowercase letters, \'_\', and \'?\'. Returns: list of int: A list of integers representing the number of possible unique strings for each test case. results = [] for case in test_cases: # Count the number of \'?\' characters in the string num_question_marks = case.count(\'?\') # Each \'?\' character can be replaced with any of 26 letters. possible_strings = 26 ** num_question_marks results.append(possible_strings) return results"},{"question":"Zara is playing a card game where she makes sequences of cards placed in a row. The game allows only increasing sequences, where each card\'s number must be greater than the number of the previous card. Zara wants to know the length of the longest increasing subsequence she can make from a given sequence of cards. Given a sequence of integers representing the cards, write a program to determine the length of the longest increasing subsequence (LIS). -----Input----- - The first line contains an integer T denoting the number of test cases. - Each test case consists of two lines: - The first line contains an integer n, the number of cards in the sequence. - The second line contains n space-separated integers representing the card sequence. -----Output----- For each test case, output a single line containing the length of the longest increasing subsequence. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ n ≤ 1000 - 1 ≤ card number ≤ 10^4 -----Example----- Input: 2 8 10 22 9 33 21 50 41 60 6 3 10 2 1 20 19 Output: 5 3 -----Explanation----- Example case 1. The longest increasing subsequence is [10, 22, 33, 50, 60], which has a length of 5. Example case 2. The longest increasing subsequence is [3, 10, 20] or [2, 19, 20], which has a length of 3.","solution":"def length_of_LIS(arr): Function to determine the length of the longest increasing subsequence. if not arr: return 0 dp = [1] * len(arr) for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j]: dp[i] = max(dp[i], dp[j] + 1) return max(dp) def longest_increasing_subsequence(test_cases): Function to process multiple test cases and return the results of longest increasing subsequence for each case. results = [] for n, arr in test_cases: results.append(length_of_LIS(arr)) return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') T = int(input_lines[0]) test_cases = [] line_index = 1 for _ in range(T): n = int(input_lines[line_index]) arr = list(map(int, input_lines[line_index + 1].split())) test_cases.append((n, arr)) line_index += 2 return test_cases"},{"question":"Given a list of tasks with their start and end times, determine the maximum number of tasks that can be completed if a person can work on only one task at a time. Each task can only be completed if it is started and finished within the start and end times given. You can only work on one task at a time, and you need to maximize the number of tasks completed. -----Input----- The first line of input contains a single integer, N (1 leq N leq 10^5), representing the number of tasks. The next N lines each contain two space-separated integers, S_i and E_i (1 leq S_i < E_i leq 10^9), representing the start and end times of each task. -----Output----- Print, on a single line, the maximum number of tasks that can be completed. -----Examples----- Sample Input: 3 1 3 2 5 4 6 Sample Output: 2 Sample Input: 4 1 2 2 3 3 4 3 5 Sample Output: 3","solution":"def max_tasks(tasks): Determines the maximum number of tasks that can be completed if a person can work on only one task at a time. Args: tasks : List of tuples representing the (start, end) times of each task. Returns: int: The maximum number of tasks that can be completed. tasks.sort(key=lambda x: x[1]) # Sort tasks based on their end times count = 0 current_end_time = 0 for start, end in tasks: if start >= current_end_time: count += 1 current_end_time = end return count"},{"question":"Given an integer N, you need to construct a list of distinct integers from 1 to N in such a way that the list has the following properties: * The sum of the elements in the list is divisible by a given integer K. * The difference between the maximum and minimum elements in the list is minimized. If there are multiple possible lists, return the lexicographically smallest list. If there is no valid list that satisfies the conditions, return -1. Write a function `construct_list(N, K)` that takes in two integers N and K and returns the resulting list or -1 if no such list exists. Function Signature: ```python def construct_list(N: int, K: int) -> Union[List[int], int]: ``` Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ K ≤ 10^9 Input Input is given in the following format: N K Output Output the resulting list of integers separated by spaces. If no such list exists, print -1. Example Input: 10 5 Output: 1 2 3 4 5 6 7 8 9 10 Explanation: The list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sums to 55, which is divisible by 5, and the difference between the maximum element (10) and the minimum element (1) is minimized. The list is also the smallest lexicographical order for this scenario.","solution":"def construct_list(N: int, K: int): Returns the lexicographically smallest list of integers from 1 to N such that the sum of the elements is divisible by K and the difference between the maximum and minimum elements in the list is minimized. If no such list exists, returns -1. # Sum of first N natural numbers is N * (N + 1) // 2 sum_n = N * (N + 1) // 2 if sum_n % K == 0: return list(range(1, N + 1)) else: return -1"},{"question":"Given a list of words, you are required to find and print the word with the maximum length. If there are multiple words with the same maximum length, print the first one encountered in the list. Function Signature: ```python def longest_word(words: List[str]) -> str: pass ``` Input - The input is a list of strings, where each string represents a word. The list contains at least one word and at most 1000 words. Each word consists of only alphabetic characters (both uppercase and lowercase) and has a length not exceeding 100 characters. Output - Print the word with the maximum length. If multiple words have the same maximum length, print the first one encountered. Example Input ```python [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"] ``` Output ```python \\"banana\\" ``` Explanation The words \\"banana\\" and \\"cherry\\" have the maximum length of 6 characters. Since \\"banana\\" comes first in the list, it is printed.","solution":"from typing import List def longest_word(words: List[str]) -> str: Returns the first word with the maximum length from a list of words. Args: words (List[str]): List of words. Returns: str: The word with the maximum length. max_length = -1 longest = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest = word return longest"},{"question":"The city\'s department of transportation has launched a new initiative to monitor traffic congestion on bridges during peak hours. The city has N bridges, and each bridge connects two islands. To accurately determine congestion levels, the department has gathered data on the number of vehicles that pass over each bridge at a given time and the travel time across each bridge. Your task is to analyze the traffic data and find the bridge that has the maximum congestion. Congestion for a bridge is defined as the product of the number of vehicles and the travel time across the bridge. If multiple bridges have the same maximum congestion, return the bridge with the smallest index. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - The first line of each test case contains a single integer N, the number of bridges. - The next N lines each contain two space-separated integers Vi and Ti — the number of vehicles and the travel time across bridge i, respectively. ------ Output Format ------ For each test case, output the 1-based index of the bridge with the maximum congestion. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 1 ≤ Vi ≤ 10^4 1 ≤ Ti ≤ 10^2 ----- Sample Input 1 ------ 2 3 10 5 8 6 12 4 4 20 3 15 4 10 5 7 6 ----- Sample Output 1 ------ 1 4 ----- Explanation 1 ------ Test case 1: The congestion values for the bridges are [50, 48, 48]. The maximum congestion is 50, and it occurs for the first bridge. Test case 2: The congestion values for the bridges are [60, 60, 50, 42]. The maximum congestion is 60, which occurs at bridges 1 and 2, but since we need the smallest index, we return 1.","solution":"def find_max_congestion_bridge(test_cases): results = [] for case in test_cases: N = case[0] bridges = case[1] max_congestion = -1 max_index = -1 for i in range(N): Vi, Ti = bridges[i] congestion = Vi * Ti if congestion > max_congestion: max_congestion = congestion max_index = i elif congestion == max_congestion: max_index = min(max_index, i) results.append(max_index + 1) return results"},{"question":"You are given an n-dimensional grid where each cell (i, j, k, ...) contains an integer representing the value of the cell. You need to perform a series of operations on this grid. In each operation, you can choose any two different cells (i1, j1, k1, ...) and (i2, j2, k2, ...) and swap their values. Your task is to determine the maximum possible sum of the diagonal of the grid after performing the operations. The diagonal of the grid consists of cells where the indices are all equal (i.e., (i, i, i, ...)). Constraints * 2 leq n leq 100 * The grid is n-dimensional, where each dimension has length exactly n. * The values in the grid are integers, and their magnitude will not exceed 10^6. * The number of possible swaps is not limited. Input The input consists of: 1. An integer n, the dimension of the grid. 2. An n^n-sized list of integers, representing the values in the grid. The values are given in row-major order. Output Print a single integer representing the maximum possible sum of the diagonal of the grid after performing the swaps. Examples Input 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Output 27 Input 2 -1 -2 -3 -4 -5 -6 -7 -8 -9 Output -10","solution":"def max_diagonal_sum(n, values): Returns the maximum possible sum of the diagonal of an n-dimensional grid after performing swaps. :param n: int, the dimension of the grid :param values: list of int, the values in the grid in row-major order :return: int, the maximum possible sum of the diagonal # Flatten the values into a sorted list to easily pick the largest elements for the diagonal sorted_values = sorted(values, reverse=True) # The diagonal has n elements (one for each dimension being equal) max_diagonal_sum = sum(sorted_values[:n]) return max_diagonal_sum"},{"question":"Kathy loves reading books but often finds it difficult to keep track of the books she has read. She decides to create a program that helps her catalog the list of books she has read. Kathy wants to be able to perform two types of operations: 1. Add a book title to her collection. 2. Check if she has already read a book. Your task is to implement a program that helps Kathy manage her book collection using these operations. Input: - The first line contains an integer q (1 ≤ q ≤ 10000), the number of operations. - Each of the next q lines describes an operation. Each operation is one of: - `1 title` - denotes adding the book title to Kathy\'s collection, where `title` is a string containing alphanumeric characters and spaces, with a maximum length of 50 characters. - `2 title` - denotes checking if Kathy has already read the book with the given title. Output: For each operation of the second type (`2 title`), output \\"YES\\" if Kathy has already read the book, otherwise output \\"NO\\". Sample Input: 6 1 Pride and Prejudice 1 The Great Gatsby 2 Pride and Prejudice 2 Moby Dick 1 Moby Dick 2 Moby Dick Sample Output: YES NO YES","solution":"class BookCatalog: def __init__(self): self.books = set() def add_book(self, title): self.books.add(title) def check_book(self, title): return \\"YES\\" if title in self.books else \\"NO\\" def process_operations(operations): catalog = BookCatalog() results = [] for operation in operations: parts = operation.split(maxsplit=1) if parts[0] == \\"1\\": catalog.add_book(parts[1]) elif parts[0] == \\"2\\": results.append(catalog.check_book(parts[1])) return results"},{"question":"Create a function that determines whether a string has all unique characters. The function should take a single string as an input and return a boolean value: `True` if all characters in the string are unique, and `False` if there are any duplicate characters. Your solution should strive for optimal time complexity. For example: - `has_unique_characters(\'abcdef\')` should return `True` - `has_unique_characters(\'hello\')` should return `False` Assume that the input string contains only lowercase alphabets \'a\' to \'z\'.","solution":"def has_unique_characters(s): Determines if a string has all unique characters. :param s: A string containing only lowercase letters \'a\' to \'z\'. :return: True if all characters are unique, False otherwise. # Create a set to keep track of seen characters seen = set() # Iterate over each character in the string for char in s: # If character is already in set, it is a duplicate if char in seen: return False # Add character to set seen.add(char) # If no duplicates found, return True return True"},{"question":"You are given an initially empty stack with a maximum capacity ( N ). Your task is to perform a series of operations on this stack. The operations are given as a sequence of strings, where each string denotes an action. The allowed actions are: - \\"PUSH x\\": Push the integer x onto the stack. If the stack is full, this operation should be ignored. - \\"POP\\": Remove the top element of the stack. If the stack is empty, this operation should be ignored. - \\"INCREMENT k m\\": Increment the bottom k elements of the stack by m. If k is greater than the current number of elements in the stack, then increment all the elements in the stack by m. You need to implement these operations on the stack and print the final state of the stack after performing all the operations. Input The first line contains an integer N (1 ≤ N ≤ 10^5), the maximum capacity of the stack. The second line contains an integer M (1 ≤ M ≤ 10^5), the number of operations to be performed. Each of the next M lines contains an operation in the format described above. Operations are given as strings where \\"PUSH x\\" (1 ≤ x ≤ 10^9), \\"POP\\", and \\"INCREMENT k m\\" (1 ≤ k ≤ N, 1 ≤ m ≤ 10^9) indicate the stack operations. Output Output the elements of the stack from top to bottom, each element on a new line. If the stack is empty after all operations, simply print \\"EMPTY\\". Example Input 5 6 PUSH 1 PUSH 2 PUSH 3 INCREMENT 2 5 POP PUSH 6 Output 6 7 6","solution":"def stack_operations(N, M, ops): stack = [] for op in ops: parts = op.split() command = parts[0] if command == \\"PUSH\\": if len(stack) < N: stack.append(int(parts[1])) elif command == \\"POP\\": if stack: stack.pop() elif command == \\"INCREMENT\\": k = int(parts[1]) m = int(parts[2]) increment_size = min(k, len(stack)) for i in range(increment_size): stack[i] += m if not stack: return [\\"EMPTY\\"] return list(map(str, stack[::-1])) # Usage Example N, M = 5, 6 operations = [\\"PUSH 1\\", \\"PUSH 2\\", \\"PUSH 3\\", \\"INCREMENT 2 5\\", \\"POP\\", \\"PUSH 6\\"] print(\\"n\\".join(stack_operations(N, M, operations)))"},{"question":"An online bookstore wants to keep track of the genres of books that have been sold the most during a specific period. They log each sale with the genre of the book. Help the bookstore to find out which genre has been sold the most and how many times that genre was sold. Input Format The first line contains a single integer, N, representing the number of books sold. The second line contains N space-separated strings representing the genres of the books sold. Output Format There will be two lines of output. The first line should contain the genre that was sold the most. The second line should contain the number of times that genre was sold. Constraints 1 ≤ N ≤ 100000 1 ≤ |genre| ≤ 50, where |genre| represents the length of the genre string SAMPLE INPUT 6 fantasy mystery romance fantasy mystery fantasy SAMPLE OUTPUT fantasy 3","solution":"def most_sold_genre(N, genres): Find the genre that has been sold the most and the number of times it was sold. Parameters: N (int): number of books sold genres (list): list of genres of books sold Returns: tuple: (genre, count) the genre that was sold the most and the count from collections import Counter genre_count = Counter(genres) most_common_genre, count = genre_count.most_common(1)[0] return most_common_genre, count"},{"question":"Dexter is playing a new game for coding practice. The game consists of a series of challenges where he needs to determine the largest rectangular submatrix, within a given binary matrix, that has all 1s. A binary matrix is a matrix where each element is either 0 or 1. Dexter wants to write a program that, given a binary matrix, finds the area of the largest rectangle containing only 1s. -----Input----- The first line contains two integers M and N (1 le M, N le 200), the number of rows and columns in the matrix. The next M lines each contain N integers separated by spaces, representing the binary matrix. -----Output----- Output a single integer - the area of the largest rectangle containing only 1s. -----Examples----- Sample Input 1: 4 5 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Sample Output 1: 6 Sample Input 2: 3 3 0 1 0 1 1 1 1 1 1 Sample Output 2: 6 Sample Input 3: 2 2 0 0 0 0 Sample Output 3: 0","solution":"def maximalRectangle(matrix): if not matrix: return 0 max_area = 0 rows, cols = len(matrix), len(matrix[0]) heights = [0] * cols for row in matrix: for i in range(cols): heights[i] = heights[i] + 1 if row[i] == 1 else 0 max_area = max(max_area, largestRectangleArea(heights)) return max_area def largestRectangleArea(heights): stack = [-1] max_area = 0 for i in range(len(heights)): while stack[-1] != -1 and heights[stack[-1]] >= heights[i]: height = heights[stack.pop()] width = i - stack[-1] - 1 max_area = max(max_area, height * width) stack.append(i) while stack[-1] != -1: height = heights[stack.pop()] width = len(heights) - stack[-1] - 1 max_area = max(max_area, height * width) return max_area # Example usage: # matrix = [ # [1, 0, 1, 0, 0], # [1, 0, 1, 1, 1], # [1, 1, 1, 1, 1], # [1, 0, 0, 1, 0] # ] # print(maximalRectangle(matrix)) # Output: 6"},{"question":"Marcus is an avid gardener. He has a unique type of plant that grows in a specific pattern. The plant grows in height every d days by exactly 1 centimeter. However, due to a unique genetic mutation, every g days, the plant grows an additional centimeter in height beyond its normal daily growth. Given specific days, Marcus wants to know whether the plant would grow an additional centimeter due to the genetic mutation on those days. -----Input----- The first line of input contains two integers d and g (1 ≤ d, g ≤ 10^9) — the number of days after which the plant grows normally and the number of days after which the plant grows an extra centimeter due to mutation, respectively. The second line of input contains an integer n (1 ≤ n ≤ 10^5) — the number of days Marcus wants to check. The third line of input contains n integers representing the specific days Marcus wants to check (1 ≤ day_i ≤ 10^9) -----Output----- For each day provided, print \\"YES\\" (without quotes) if the plant grows an additional centimeter due to the genetic mutation on that day, or \\"NO\\" (without quotes) otherwise. -----Examples----- Input 3 5 4 1 5 15 20 Output NO YES YES YES Input 2 7 3 2 14 28 Output NO YES YES -----Note----- In the first sample case, the plant grows normally every 3 days and grows an extra centimeter every 5 days. So, on days 1, 5, 15, and 20: - Day 1: No extra growth. - Day 5: Extra growth due to mutation. - Day 15: Extra growth due to mutation. - Day 20: Extra growth due to mutation. In the second sample case, the plant grows normally every 2 days and grows an extra centimeter every 7 days. So, on days 2, 14, and 28: - Day 2: No extra growth. - Day 14: Extra growth due to mutation. - Day 28: Extra growth due to mutation.","solution":"def check_additional_growth(d, g, days): Given the intervals d and g, and a list of days, determine if the plant grows an additional centimeter on those days due to genetic mutation. :param d: int - the number of days after which the plant grows normally :param g: int - the number of days after which the plant grows an extra centimeter :param days: list - the specific days to check for additional growth :return: list of strings \'YES\' or \'NO\' for additional growth on the given days results = [] for day in days: if day % g == 0: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"In a given list of integers, you need to identify the first unique integer (an integer that appears exactly once in the list). ------ Input: ------ First line contains a single integer T, the number of test cases. Each of the next T lines contains a list of space-separated integers. ------ Output: ------ For each test case, output the first unique integer in the provided list. If there is no unique integer, output -1. ------ Constraints: ------ 1 ≤ T ≤ 100 1 ≤ length of list ≤ 1000 0 ≤ integer ≤ 10^5 ----- Sample Input 1 ------ 4 4 5 1 2 5 1 4 3 1 2 2 1 3 4 3 3 7 7 7 6 6 6 5 5 5 9 ----- Sample Output 1 ------ 2 4 -1 9","solution":"def first_unique_integer(test_cases): For each test case, returns the first unique integer in the list of integers. If no unique integer is found, returns -1. results = [] for case in test_cases: count = {} for num in case: if num in count: count[num] += 1 else: count[num] = 1 found = False for num in case: if count[num] == 1: results.append(num) found = True break if not found: results.append(-1) return results # Function to process the input and call the first_unique_integer function def find_first_unique_integers(T, test_cases): return first_unique_integer(test_cases)"},{"question":"In an attempt to analyze the text contained in various documents, a company is looking to identify the most frequently occurring word. However, the company has a specific set of rules for what constitutes a word and how words should be counted. Task Write a function `most_frequent_word(text)` that takes a single string input `text`, processes it according to the rules below, and returns the most frequently occurring word in the text. If there is a tie, return the word that appears first in the text. # Rules 1. A word is defined as a sequence of alphabetic characters. 2. Words are case-insensitive (e.g., \\"Word\\" and \\"word\\" are the same). 3. Punctuation, numbers, and other non-alphabetic characters should be ignored unless they are part of a word. 4. The function should return the result in lowercase. Examples ```python most_frequent_word(\\"Hello, world! Hello.\\") => \\"hello\\" most_frequent_word(\\"This is a test. This test is only a test.\\") => \\"test\\" most_frequent_word(\\"Hello, hello, hi!\\") => \\"hello\\" most_frequent_word(\\"One fish, two fish, red fish, blue fish.\\") => \\"fish\\" ``` Notes: 1. The input string may contain punctuation and mixed case. 2. If the input string is empty or contains no valid words, the function should return an empty string. 3. The function should be case-insensitive but should return the word in lowercase.","solution":"import re from collections import Counter def most_frequent_word(text): Returns the most frequently occurring word in the text according to specified rules. # Normalize the text to lowercase and find all words words = re.findall(r\'[a-zA-Z]+\', text.lower()) if not words: return \\"\\" # Count occurrences of each word word_counts = Counter(words) # Find the most frequently occurring word most_common_word, _ = max(word_counts.items(), key=lambda item: (item[1], -words.index(item[0]))) return most_common_word"},{"question":"Polycarp has a sequence of n integers b_1, b_2, dots, b_n (n is odd) and needs to transform it into a sequence of n distinct integers c_1, c_2, dots, c_n. This transformation is performed in such a way that each c_i is assigned with the minimal positive integer that has not been assigned yet, while ensuring that the sequence c respects the relative order of the sequence b. Polycarp needs your help to determine the lexicographically smallest sequence c that can be obtained this way. -----Input----- The first line contains one integer t (1 le t le 10) — the number of test cases. Then t test cases follow. Each test case consists of two lines. The first line contains an odd integer n (3 le n le 100) (n is odd). The second line contains n integers b_1, b_2, dots b_n (1 le b_i le 1000). -----Output----- For each test case output on a separate line n integers c_1, c_2, dots, c_n — the transformed sequence. -----Examples----- Input 3 5 4 2 2 7 4 3 1 3 3 7 10 20 30 10 20 30 10 Output 3 1 2 5 4 1 2 3 1 2 3 1 2 3 1 -----Note----- None","solution":"def lexicographically_smallest_c(t, test_cases): results = [] for i in range(t): n, b = test_cases[i] unique_numbers = sorted(set(b)) # Set of unique numbers from sequence b, sorted c = [] used = set() assignment = {} min_int = 1 for num in b: if num in assignment: c.append(assignment[num]) else: while min_int in used: min_int += 1 assignment[num] = min_int c.append(min_int) used.add(min_int) results.append(c) return results"},{"question":"You are an intern at a tech company responsible for maintaining the company\'s data servers. One of your tasks is to monitor the file system on the servers to ensure files are not taking up too much space. You need to implement a utility that generates a report listing all files in the system that exceed a certain size. The server\'s file system can be represented as a tree where each node is either a directory or a file. Each node has a name and, in the case of files, a size in bytes. Directories contain zero or more nodes (files or other directories). Your task is to write a program that, given a file system and a size threshold, finds all files in the file system that exceed the given size threshold and prints their full paths. -----Input----- Input starts with an integer T (0 < T < 100), the number of test cases. Each test case starts with a single integer N (1 leq N leq 1000), the number of nodes in the file system tree. The next N lines describe the nodes in the format: - If the node is a file: `F filename size parent` - If the node is a directory: `D dirname parent` Here, `filename` and `dirname` both are unique names within the file system, `size` is a positive integer (bytes), and `parent` is the name of the parent directory (root directory has no parent). After the nodes, each test case concludes with an integer, the size threshold in bytes. -----Output----- For each test case, output the full paths of files exceeding the size threshold. If no files exceed the threshold, print \\"No large files\\". Output should list the paths in alphabetical order. -----Sample Explanation----- Consider the sample input below. The first test case describes a file system with a root directory containing two files and one subdirectory. One of the files in the root directory exceeds the threshold size. -----Examples----- Sample Input: 1 6 D root F file1.txt 500 root F file2.txt 1500 root D subdir root F file3.txt 1000 subdir F file4.txt 2000 subdir 1000 Sample Output: root/file2.txt root/subdir/file4.txt","solution":"def find_large_files(test_cases): results = [] for case in test_cases: nodes, threshold = case filesystem = {} file_paths = {} for node in nodes: if node[0] == \'D\': _, dirname, parent = node filesystem[dirname] = parent elif node[0] == \'F\': _, filename, size, parent = node file_paths[filename] = (int(size), parent) root_fs = {} def build_path(file_or_dir): if file_or_dir in root_fs: return root_fs[file_or_dir] path = file_or_dir parent = filesystem.get(file_or_dir, None) while parent: path = f\\"{parent}/{path}\\" parent = filesystem.get(parent, None) root_fs[file_or_dir] = path return path large_files = [] for filename, (size, parent) in file_paths.items(): if size > threshold: large_files.append((build_path(parent) + \'/\' + filename, size)) if large_files: large_files.sort() results.append([file for file, size in large_files]) else: results.append([\\"No large files\\"]) return results def parse_input(input_string): lines = input_string.strip().split(\'n\') T = int(lines[0].strip()) test_cases = [] index = 1 for _ in range(T): N = int(lines[index].strip()) nodes = [] for i in range(N): node_info = lines[index + 1 + i].strip().split() if node_info[0] == \'D\': nodes.append((\'D\', node_info[1], node_info[2] if len(node_info) > 2 else None)) elif node_info[0] == \'F\': nodes.append((\'F\', node_info[1], node_info[2], node_info[3])) threshold = int(lines[index + N + 1].strip()) test_cases.append((nodes, threshold)) index += N + 2 return test_cases # Combining input parsing and finding large files def process_input(input_string): test_cases = parse_input(input_string) return find_large_files(test_cases)"},{"question":"**Short Description: ** Find the smallest subarray with a given sum Linda and her brother Shawn are playing a game with numbers. They are provided with an array of positive integers and their task is to find the length of the smallest subarray whose sum is at least a given value S. They decide the winner based on who finds the smallest such subarray first. To ensure fair play, write a program to help them determine the correct result for the game. **Input**: - The first line contains a single integer T, the number of test cases. - Each test case consists of two parts: - An integer S. - An array of positive integers. **Output**: - For each test case, output a single integer which is the length of the smallest subarray whose sum is at least S. - If no such subarray exists, output -1. **Constraints**: - 1 ≤ T ≤ 1000 - 1 ≤ length of the array ≤ 100,000 - 1 ≤ the elements of the array ≤ 10,000 - 1 ≤ S ≤ 1,000,000,000 **SAMPLE INPUT:** ``` 3 7 2 3 1 2 4 3 15 1 2 3 4 5 100 1 10 5 2 7 1 9 3 ``` **SAMPLE OUTPUT:** ``` 2 5 -1 ``` **Explanation:** - In the first test case, the subarray `[4, 3]` has a minimal length of 2 with a sum ≥ 7. - In the second test case, the full array `[1, 2, 3, 4, 5]` sums up to 15, having the length 5. - In the third test case, there is no subarray that sums up to 100, so the output is -1.","solution":"def smallest_subarray_with_given_sum(S, arr): Finds the length of the smallest subarray with a sum >= S. n = len(arr) start = 0 current_sum = 0 min_length = float(\\"inf\\") for end in range(n): current_sum += arr[end] while current_sum >= S: min_length = min(min_length, end - start + 1) current_sum -= arr[start] start += 1 return min_length if min_length != float(\\"inf\\") else -1 def find_smallest_subarray(T, test_cases): result = [] for t in range(T): S, arr = test_cases[t] result.append(smallest_subarray_with_given_sum(S, arr)) return result"},{"question":"Given an array of integers, return an array where each element at index i is the product of all the elements in the original array except for the one at i. Solve this problem without using division and in O(n) time complexity. Example: Input: [1, 2, 3, 4] Output: [24, 12, 8, 6] Explanation: - The element at index 0 is the product of [2, 3, 4] which is 24. - The element at index 1 is the product of [1, 3, 4] which is 12. - The element at index 2 is the product of [1, 2, 4] which is 8. - The element at index 3 is the product of [1, 2, 3] which is 6. Note: - You should not use the division operation. - Your solution should run in O(n) time complexity.","solution":"def product_except_self(nums): Returns an array where each element at index i is the product of all the elements in the original array except for the one at i. length = len(nums) result = [1] * length # Initialize the result array with ones # Compute the prefix product for each element prefix = 1 for i in range(length): result[i] *= prefix prefix *= nums[i] # Compute the suffix product for each element and multiply with the result array suffix = 1 for i in reversed(range(length)): result[i] *= suffix suffix *= nums[i] return result"},{"question":"Write a program that takes a positive integer n less than 10^6 and a word w as input, and then prints the word w n times separated by a space. Constraints * 1 ≤ n < 10^6 * 1 ≤ length of w ≤ 100 Input The input consists of multiple datasets. Each dataset is given in the following format: n w The input ends with a dataset where n is 0. Your program should not process this dataset. Output For each dataset, print the repeated word w in a line. Example Input 3 hello 2 world 5 test 0 end Output hello hello hello world world test test test test test","solution":"def repeat_word(): import sys input = sys.stdin.read data = input().splitlines() results = [] for line in data: n, w = line.split() n = int(n) if n == 0: break results.append((w + \' \') * n) for result in results: print(result.strip())"},{"question":"Input The first line of the input contains an integer T (1 ≤ T ≤ 10^4), representing the number of test cases. Each of the next T lines contains a single integer N (1 ≤ N ≤ 10^6). For each test case, find the smallest integer X such that the sum of the digits of X is equal to N. Output Output T lines. Each line should contain one integer, the smallest integer X for the corresponding test case. Examples Input 1 10 Output 19 Input 3 1 5 15 Output 1 5 69","solution":"def smallest_integer_with_digit_sum(n): Returns the smallest integer X such that the sum of the digits of X is equal to n. if n <= 9: return n base_number = \'9\' * (n // 9) + str(n % 9) # We should reverse because the most significant digit should be the non-zero one return int(base_number[::-1]) def solve(test_cases): Solve multiple test cases, finds the smallest integer X for each n. results = [] for n in test_cases: results.append(smallest_integer_with_digit_sum(n)) return results"},{"question":"You are given a list `A` of `n` integers and an integer `k`. You should answer `q` queries. Each query is represented by two integers `l` and `r`, which denote the bounds of a subarray of `A`. For each query, return the number of distinct integers in the specified subarray that appear at least `k` times within that subarray. Input The first line contains two integers `n` (1 ≤ n ≤ 10^5) and `k` (1 ≤ k ≤ n). The second line contains `n` integers representing the array `A` (1 ≤ A[i] ≤ 10^9). The third line contains an integer `q` (1 ≤ q ≤ 10^5). Each of the next `q` lines contains two integers `l` and `r` (1 ≤ l ≤ r ≤ n) representing a query. Output For each query, output the number of distinct integers in the subarray `A[l:r]` that appear at least `k` times. Examples Input 8 3 1 2 2 1 2 2 1 3 3 1 4 2 6 3 8 Output 0 1 1 Input 5 2 5 3 5 5 4 2 1 3 2 5 Output 1 1","solution":"def count_elements_with_frequency_at_least_k(A, l, r, k): Returns the number of distinct integers in the subarray A[l:r] that appear at least k times. subarray = A[l-1:r] frequency = {} for num in subarray: if num in frequency: frequency[num] += 1 else: frequency[num] = 1 count = 0 for num in frequency: if frequency[num] >= k: count += 1 return count def process_queries(n, k, A, queries): Processes each query and returns a list of results for each query. results = [] for l, r in queries: result = count_elements_with_frequency_at_least_k(A, l, r, k) results.append(result) return results"},{"question":"Write a program that finds all pairs of integers in a given list that sum up to a specific target number. The program should take a list of integers and the target number as input and return all unique pairs of integers that sum up to the target number. Input The first line of input contains an integer n (1 <= n <= 1000) representing the number of integers in the list. The second line contains n integers separated by spaces. The third line contains the target number. Output Print all unique pairs of integers from the given list that sum up to the target number. Each pair should be printed in a new line in ascending order (by the first element of the pair, then by the second element). If no pairs are found, print \\"No pairs found\\". Example Input: 6 1 3 2 2 4 5 6 Output: 1 5 2 4 Input: 5 1 2 3 4 5 10 Output: No pairs found","solution":"def find_pairs_with_sum(numbers, target): Finds all pairs of integers in a given list that sum up to a specific target number. :param numbers: List of integers :param target: Target sum :return: List of unique pairs that sum up to the target number numbers.sort() pairs = set() seen = set() for number in numbers: complement = target - number if complement in seen: pairs.add((min(number, complement), max(number, complement))) seen.add(number) return sorted(pairs)"},{"question":"Write a program that calculates the number of paths from the top-left corner to the bottom-right corner of an m x n grid, where certain cells are blocked and cannot be passed through. You are given an m x n matrix representing the grid. An entry with a value of 0 represents a cell that you can pass through, and an entry with a value of 1 represents a blocked cell. You can only move either down or right at any point in time. Notes Constraints * 1 ≤ m, n ≤ 100 * The top-left and bottom-right corners are always free (i.e., they will never be blocked). * The matrix is given in row-major form. Input The first line contains two integers m and n, representing the number of rows and columns respectively. The next m lines each contain n integers (0 or 1), representing the grid. Output Print the number of unique paths from the top-left corner to the bottom-right corner. If there are no such paths, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 1 0 0 0 0 0 Output 0","solution":"def unique_paths(m, n, grid): Returns the number of unique paths from the top-left corner to the bottom-right corner of an m x n grid, where certain cells are blocked and cannot be passed through. # Create a dp table of the same size as the grid dp = [[0] * n for _ in range(m)] # Initialize the starting point dp[0][0] = 1 # Fill the dp table for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 # Blocked cell else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] # The number of ways to reach the bottom-right corner return dp[-1][-1] # Function to read input as specified in the question def read_input(): m, n = map(int, input().split()) grid = [list(map(int, input().split())) for _ in range(m)] print(unique_paths(m, n, grid))"},{"question":"You are given a list of strings representing open and closed parenthesis. Your task is to determine the minimum number of parentheses that need to be added or removed to make all parentheses in the string balanced. A balanced string is one where each open parenthesis \'(\' has a corresponding close parenthesis \')\'. For example: - The string `\\"(()))\\"` would require 1 removal to be balanced: `\\"())\\"`. - The string `\\"(((\\"` would require 3 additions to be balanced: `\\"((()))\\"`. Write a function `balance_parentheses(lst: List[str]) -> int:` that takes a list of strings and returns another list with the count of modifications required for each string to become balanced. Example: ```python lst = [\\"(()))\\", \\"(((\\", \\"(())\\", \\")(\\", \\"()\\"] balance_parentheses(lst) ``` Should return `[1, 3, 0, 2, 0]`. More details: - The list `lst` contains at least one string. - Each string in the list contains only the characters \'(\' and \')\'.","solution":"from typing import List def balance_parentheses(lst: List[str]) -> List[int]: Returns a list of integers representing the minimum number of parentheses that need to be added or removed to make all parentheses in each string balanced. res = [] for s in lst: open_count = 0 close_count = 0 for char in s: if char == \'(\': open_count += 1 elif char == \')\' and open_count > 0: open_count -= 1 else: close_count += 1 res.append(open_count + close_count) return res"},{"question":"David is planning a field trip to a maze represented by an N times M grid. The maze consists of open spaces denoted by \'.\' and obstacles denoted by \'#\'. David wants to calculate the number of distinct paths from the top-left corner (1,1) to the bottom-right corner (N,M). David can move only right (R) or down (D) at each step. However, he cannot move into or through any obstacle cells. Write a program to help David determine the number of unique paths for each test case. -----Input----- - The first line contains a single integer T denoting the number of test cases. - For each test case: - The first line contains two space-separated integers N and M. - The following N lines each contain a string of M characters, representing the grid. -----Output----- For each test case, print a single line containing the number of unique paths from (1,1) to (N,M). If there is no valid path, return 0. -----Constraints----- - 1 le T le 10 - 1 le N, M le 100 - Each character in the grid is either \'.\' or \'#\'. - The top-left corner (1,1) and the bottom-right corner (N,M) will always be \'.\'. -----Example Input----- 2 3 3 ... .#. ... 4 4 .... .#.. ..#. .... -----Example Output----- 2 4 -----Explanation----- Example case 1: - There are two paths: (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) and (1,1) -> (2,1) -> (3,1) -> (3,2) -> (3,3). Example case 2: - There are four paths: (1,1) -> (1,2) -> (1,3) -> (1,4) -> (2,4) -> (3,4) -> (4,4), (1,1) -> (1,2) -> (2,2) -> (3,2) -> (4,2) -> (4,3) -> (4,4), (1,1) -> (1,2) -> (1,3) -> (2,3) -> (3,3) -> (4,3) -> (4,4), and (1,1) -> (2,1) -> (3,1) -> (4,1) -> (4,2) -> (4,3) -> (4,4).","solution":"def unique_paths(maze): if not maze or not maze[0]: return 0 N = len(maze) M = len(maze[0]) if maze[0][0] == \'#\' or maze[N-1][M-1] == \'#\': return 0 dp = [[0 for _ in range(M)] for _ in range(N)] dp[0][0] = 1 for i in range(N): for j in range(M): if maze[i][j] == \'#\': dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[N-1][M-1] def solve_mazes(test_cases): results = [] for maze in test_cases: results.append(unique_paths(maze)) return results"},{"question":"Alice and Bob are competing in a game where they need to distribute tokens. The game has two types of tokens: Type A and Type B. Each player has a limited number of these tokens, and their task is to give out a certain number of tokens in total. The challenge is to find out whether they can distribute exactly `m` tokens using the tokens they have. The aim is to check if they can distribute exactly `m` tokens by using any non-negative integer number of Type A and Type B tokens from both players combined. In other words, you should find four non-negative integers `x`, `y`, `p`, and `q` such that Alice gives `x` Type A tokens and `y` Type B tokens, Bob gives `p` Type A tokens and `q` Type B tokens, and their total number of tokens used sums to exactly `m`. # Input The input consists of five lines: - The first line contains a single integer `m` (1 ≤ m ≤ 10,000,000) — the total number of tokens to be distributed. - The second line contains a single integer `aA` (1 ≤ aA ≤ 10,000,000) — the number of Type A tokens Alice has. - The third line contains a single integer `aB` (1 ≤ aB ≤ 10,000,000) — the number of Type B tokens Alice has. - The fourth line contains a single integer `bA` (1 ≤ bA ≤ 10,000,000) — the number of Type A tokens Bob has. - The fifth line contains a single integer `bB` (1 ≤ bB ≤ 10,000,000) — the number of Type B tokens Bob has. # Output If it\'s possible to distribute exactly `m` tokens using the tokens Alice and Bob have, print \\"YES\\" (without quotes) and in the next line print four non-negative integers `x`, `y`, `p`, and `q` — the number of Type A tokens and Type B tokens given by Alice (`x` and `y`), and the number of Type A tokens and Type B tokens given by Bob (`p` and `q`) respectively, such that `x + y + p + q = m`. If there are multiple answers, print any of them. If it\'s impossible to distribute exactly `m` tokens, print \\"NO\\" (without quotes). # Examples Input ``` 10 5 3 4 6 ``` Output ``` YES 3 2 2 3 ``` Input ``` 8 2 2 2 1 ``` Output ``` NO ``` # Note In the first example, Alice gives 3 Type A tokens and 2 Type B tokens, and Bob gives 2 Type A tokens and 3 Type B tokens, which sums up to exactly 10 tokens. In the second example, it is impossible to distribute exactly 8 tokens with the given constraints.","solution":"def can_distribute_tokens(m, aA, aB, bA, bB): total_tokens = aA + aB + bA + bB if total_tokens < m: return \\"NO\\", None for x in range(max(0, m - aB - bA - bB), min(aA, m) + 1): for y in range(max(0, m - x - bA - bB), min(aB, m - x) + 1): remaining = m - x - y if remaining >= 0 and remaining <= bA + bB: for p in range(max(0, remaining - bB), min(bA, remaining) + 1): q = remaining - p if q >= 0 and q <= bB: return \\"YES\\", (x, y, p, q) return \\"NO\\", None"},{"question":"You are given a binary string of length n. A binary string is a string containing only the characters \'0\' and \'1\'. Your task is to find the minimum number of swaps required to make the string alternating. A string is alternating if no two adjacent characters are the same (i.e., \\"010101\\" or \\"101010\\"). Swapping means selecting any two characters from the string and swapping their positions. Write a function: ```python def min_swaps_to_alternate(binary_string: str) -> int: ``` that takes a binary string `binary_string` and returns the minimum number of swaps required to make the string alternating. If it is not possible to make the string alternating, return `-1`. -----Input----- - A single string `binary_string` of length n (1 le n le 10^5), consisting of characters \'0\' and \'1\' only. -----Output----- - A single integer, the minimum number of swaps required to make the string alternating, or -1 if it is not possible. -----Example----- Input \\"101010\\" Output 0 Input \\"1001\\" Output 1 Input \\"1111\\" Output -1 -----Note----- In the first example, the string \\"101010\\" is already alternating, so no swaps are needed. In the second example, swapping the second \'0\' and the last \'1\' transforms \\"1001\\" into an alternating string \\"1010\\". In the third example, it is impossible to make the string alternating because there is no \'0\' to swap with any \'1\'.","solution":"def min_swaps_to_alternate(binary_string: str) -> int: n = len(binary_string) if n <= 1: return 0 # A single character string is already alternating. count_0 = binary_string.count(\'0\') count_1 = binary_string.count(\'1\') if abs(count_0 - count_1) > 1: return -1 # Pattern starting with \'0\' pattern_0 = \'\'.join(\'0\' if i % 2 == 0 else \'1\' for i in range(n)) # Pattern starting with \'1\' pattern_1 = \'\'.join(\'1\' if i % 2 == 0 else \'0\' for i in range(n)) mismatch_0 = sum(1 for i in range(n) if binary_string[i] != pattern_0[i]) mismatch_1 = sum(1 for i in range(n) if binary_string[i] != pattern_1[i]) if count_0 == count_1: return min(mismatch_0 // 2, mismatch_1 // 2) elif count_0 > count_1: return mismatch_0 // 2 else: return mismatch_1 // 2"},{"question":"Given a string, write a function `longestUniqueSubstring()` that returns the length of the longest substring without repeating characters. Your function should efficiently find the maximum length using a sliding window approach. You may assume that the input string consists of only ASCII characters. For example: ```python longestUniqueSubstring(\\"abcabcbb\\") # should return 3, as \\"abc\\" is the longest substring longestUniqueSubstring(\\"bbbbb\\") # should return 1, as \\"b\\" is the longest substring longestUniqueSubstring(\\"pwwkew\\") # should return 3, as \\"wke\\" is the longest substring longestUniqueSubstring(\\"\\") # should return 0, as there are no substrings in an empty string ``` Write your function in Python with the following signature: ```python def longestUniqueSubstring(s: str) -> int: # Your code here ```","solution":"def longestUniqueSubstring(s: str) -> int: Returns the length of the longest substring without repeating characters. # Initialize the starting point of the window and the max_length variable start = 0 max_length = 0 # Dictionary to store the last indexes of each character seen char_index_map = {} for end in range(len(s)): if s[end] in char_index_map: # update the start position if the character is already seen start = max(start, char_index_map[s[end]] + 1) # Update the last seen index of the character char_index_map[s[end]] = end # Calculate the length of the current window and update max_length max_length = max(max_length, end - start + 1) return max_length"},{"question":"Given an array A of size N, where each element represents the amount of gold coins in a chest, the task is to calculate the maximum amount of gold coins you can collect with the restriction that you cannot take coins from two consecutive chests. Example 1: Input: N = 4, A[] = {5, 3, 4, 11} Output: 16 Explanation: You can take from the 1st and 4th chests (5 + 11) = 16 Example 2: Input: N = 3, A[] = {8, 15, 3} Output: 15 Explanation: You can take from the 2nd chest only = 15 Your Task: You don\'t need to read input or print anything. Complete the function maxGold() which takes N and array A as input parameters and returns an integer value. Expected Time Complexity: O(N) Expected Auxiliary Space: O(N) Constraints: 1 ≤ N ≤ 10^{5} 1 ≤ A[i] ≤ 10^{4}","solution":"def maxGold(N, A): if N == 0: return 0 if N == 1: return A[0] dp = [0] * N dp[0] = A[0] dp[1] = max(A[0], A[1]) for i in range(2, N): dp[i] = max(dp[i-1], dp[i-2] + A[i]) return dp[-1]"},{"question":"You are given a matrix `mat` of size `n x n` consisting of integers. Your task is to find and print the transpose of the matrix. The transpose of a matrix is obtained by flipping it over its main diagonal, switching the row and column indices of the matrix. Example 1: Input: mat = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] Output: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ] Example 2: Input: mat = [ [1, 2], [3, 4] ] Output: [ [1, 3], [2, 4] ] Your Task: You don\'t need to input anything. Complete the function transpose() which takes a 2D list `mat` as the input parameter and returns the transposed matrix. Constraints: - 1 <= n <= 20 - -100 <= mat[i][j] <= 100","solution":"def transpose(mat): Returns the transpose of a given n x n matrix. n = len(mat) transposed = [] for i in range(n): new_row = [] for j in range(n): new_row.append(mat[j][i]) transposed.append(new_row) return transposed"},{"question":"Alex loves exploring different arrangements of numbers. One day, he encounters an interesting concept called \\"Happy Numbers\\". A number is considered a Happy Number if it can lead to 1 when replaced by the sum of the square of its digits repeatedly. If it doesn\'t lead to 1, it\'s called an Unhappy Number. For example, 19 is a Happy Number: 1^2 + 9^2 = 1 + 81 = 82 8^2 + 2^2 = 64 + 4 = 68 6^2 + 8^2 = 36 + 64 = 100 1^2 + 0^2 + 0^2 = 1 Your task is to write a function that determines if a given number n is a Happy Number or not. Help Alex by providing a function to solve this problem. ------ Input ------ A single integer n, the number to check. ------ Output ------ Output \\"True\\" if the number is a Happy Number. Otherwise, output \\"False\\". ------ Constraints ------ 1 ≤ n ≤ 10^9 ------ Sample Input 1 ------ 19 ------ Sample Output 1 ------ True ------ Sample Input 2 ------ 2 ------ Sample Output 2 ------ False ------ Explanation ------ For the first test case: - Starting with 19: 1 + 81 = 82 64 + 4 = 68 36 + 64 = 100 1 = Happy Number For the second test case: - Starting with 2: 4 16 37 58 89 145 42 20 4 (repeats) Since it loops infinitely, 2 is not a Happy Number.","solution":"def is_happy_number(n): Determines if a number n is a Happy Number. Returns True if it is a Happy Number, otherwise returns False. def get_next(number): return sum(int(char) ** 2 for char in str(number)) seen = set() while n != 1 and n not in seen: seen.add(n) n = get_next(n) return n == 1"},{"question":"Given a string S consisting of lowercase alphabets. Your task is to complete the function removeDuplicates() which removes all duplicate characters from the string and returns the resulting string in the original order of characters. Example 1: Input: S = \\"geeksforgeeks\\" Output: \\"geksfor\\" Example 2: Input: S = \\"hello\\" Output: \\"helo\\" Example 3: Input: S = \\"character\\" Output: \\"charte\\" Constraints: 1 <= T <= 100 1 <= |S| <= 1000 Your Task: You don\'t have to read input or print anything. Your task is to complete the function removeDuplicates() that takes the string S as input and returns the string after removing duplicates while preserving the original order of characters.","solution":"def removeDuplicates(S): Removes duplicate characters from the input string S while preserving the original order of characters. Parameters: S (str): The input string consisting of lowercase alphabets. Returns: str: The string after removing duplicates. seen = set() result = [] for char in S: if char not in seen: seen.add(char) result.append(char) return \'\'.join(result)"},{"question":"In a galaxy far, far away, there exists a unique species of flowering plants called Trivelleas. Each Trivellea plant has a binary DNA string of length n. The binary DNA string determines the color of the plant. Two Trivellea plants can be cross-pollinated to produce a new offspring Trivellea plant. The DNA string of the offspring is uniquely defined as the binary XOR of the DNA strings of the two parent plants. You are given the DNA string of two Trivellea plants and need to determine the probability that the offspring of these two plants will have a DNA string with an equal number of 0s and 1s. Given the constraints, if the DNA string length is odd, it is impossible to have an equal number of 0s and 1s. Write a program to calculate the probability of producing such an offspring. -----Input----- The first line contains a binary DNA string parent1 of length n (1 ≤ n ≤ 100). The second line contains a binary DNA string parent2 of the same length n. Both strings will only contain characters \'0\' and \'1\'. -----Output----- Print the probability of producing an offspring with an equal number of 0s and 1s as a decimal rounded to five decimal places. If not possible, print `0.00000`. -----Example----- Input 1010 0101 Output 0.00000 Input 1100 1010 Output 1.00000","solution":"def calculate_xor_dna(dna1, dna2): Helper function to calculate the XOR DNA string from two binary DNA strings. return \'\'.join(str(int(b1) ^ int(b2)) for b1, b2 in zip(dna1, dna2)) def probability_equal_zeros_ones(dna1, dna2): Calculate the probability that the offspring of two Trivellea plants will have a DNA string with an equal number of 0s and 1s. n = len(dna1) # If n is odd, it\'s impossible to have an equal number of 0s and 1s if n % 2 != 0: return \\"0.00000\\" # Calculate XOR DNA string of the offspring offspring_dna = calculate_xor_dna(dna1, dna2) # Count the number of 0s and 1s count_0s = offspring_dna.count(\'0\') count_1s = offspring_dna.count(\'1\') # Check if the number of 0s and 1s are equal if count_0s == count_1s: return \\"1.00000\\" else: return \\"0.00000\\""},{"question":"A software company wants to develop an automated scheduling system for their team meetings. Every team member has a preferred start and end time for taking meetings, and a priority level for each of their available timeslots. The aim is to schedule a meeting at a time slot that has the highest aggregate priority. If multiple timeslots have the same aggregate priority, choose the earliest one. A meeting can only be scheduled in a time slot where at least half of the team members are available. Input Format The first line of the input contains an integer n, the number of team members. The next n lines describe each team member\'s availability and preference in the format: ``` start_time end_time priority ``` where `start_time` and `end_time` denote the start and end times the member is available for a meeting (inclusive), and `priority` is the priority level for that time slot. Output Format You must output the scheduled meeting time slot in the format: ``` start_time end_time ``` If no suitable time slot is found, output \\"No suitable time slot found!\\" Constraints 1 <= n <= 50 0 <= start_time < end_time <= 24 1 <= priority <= 10 Sample Input ``` 4 9 11 7 10 12 5 11 13 3 9 13 4 ``` Sample Output ``` 10 11 ``` Explanation - Member 1: available 9-11 with priority 7 - Member 2: available 10-12 with priority 5 - Member 3: available 11-13 with priority 3 - Member 4: available 9-13 with priority 4 The time slots and their aggregate priorities are: - 9-10: Priority 11 (Members 1 and 4) – Not selected as half the members are not available. - 10-11: Priority 16 (Members 1, 2, and 4) - 11-12: Priority 8 (Members 2, 3, and 4) - 12-13: Priority 7 (Members 3 and 4) – Not selected as half the members are not available. The highest aggregate priority time slot where at least half of the team members are available is 10-11.","solution":"from collections import defaultdict def find_meeting_slot(n, availabilities): priorities = defaultdict(int) availability_count = defaultdict(int) for start, end, priority in availabilities: for time in range(start, end): priorities[(time, time + 1)] += priority availability_count[(time, time + 1)] += 1 suitable_slots = {slot: priority for slot, priority in priorities.items() if availability_count[slot] >= n / 2} if not suitable_slots: return \\"No suitable time slot found!\\" best_slot = max(suitable_slots, key=lambda x: (suitable_slots[x], -x[0])) return f\\"{best_slot[0]} {best_slot[1]}\\" # Example usage with hard coded input n = 4 availabilities = [ (9, 11, 7), (10, 12, 5), (11, 13, 3), (9, 13, 4) ] print(find_meeting_slot(n, availabilities)) # Expected \\"10 11\\""},{"question":"Nisha has an integer array of length N. She can perform an operation where she selects any two elements from the array, removes them, and inserts their sum back into the array. She wants to continue doing this until there is only one element left in the array. What is the minimum number of operations required for Nisha to reduce the array to a single element? Constraints * 1 ≤ N ≤ 10^5 * 1 ≤ Element of the array ≤ 10^9 * All elements in the array are integers. Input The input is given from Standard Input in the following format: N array[1] array[2] ... array[N] Output Print the minimum number of operations required for Nisha to reduce the array to a single element. Examples Input 4 3 1 4 1 Output 3 Input 5 5 6 7 8 9 Output 4 Input 3 2 2 2 Output 2","solution":"def min_operations_to_reduce_array(N, array): Returns the minimum number of operations required to reduce the array to a single element. return N - 1"},{"question":"Given an integer N, your task is to generate a sequence of N integers following specific rules and then modify the sequence based on a given number of iterations. Rules: 1. Start with the integer 1. 2. Generate the next integer by multiplying the current integer by 2. 3. Continue this process until you have a sequence of N integers. After generating the sequence, perform M iterations of modification on the sequence: 1. In each iteration, select all odd-position integers (1st, 3rd, 5th, etc. in 1-based indexing). 2. Replace each of these integers with the sum of itself and its next neighbor (or itself if it is the last element). Output the final sequence of integers after M iterations. Input: - A single line containing two space-separated integers N and M, where N is the length of the sequence and M is the number of iterations. Output: - A single line containing the final sequence after M iterations. Constraints: - 1 ≤ N ≤ 1000 - 0 ≤ M ≤ 100 Example Input: 5 2 Example Output: 4 2 18 8 32 Explanation: 1. Initial sequence: [1, 2, 4, 8, 16] 2. First iteration: odd-position numbers -> [1, 4, 16]. Modify: - 1 + 2 = 3 - 4 + 8 = 12 - 16 (last element remains the same) Sequence becomes: [3, 2, 12, 8, 16] 3. Second iteration: odd-position numbers -> [3, 12, 16]. Modify: - 3 + 2 = 5 - 12 + 8 = 20 - 16 (last element remains the same) Final sequence: [5, 2, 20, 8, 16]","solution":"def generate_sequence(n, m): Generates a sequence of N integers following specific rules and modifies the sequence for M iterations. sequence = [1] # Generate the initial sequence for _ in range(1, n): sequence.append(sequence[-1] * 2) # Perform M modification iterations for _ in range(m): modified_sequence = sequence[:] for i in range(0, n, 2): # Iterate through odd-position integers (1st, 3rd, 5th, etc. in 1-based indexing) if i + 1 < n: modified_sequence[i] += modified_sequence[i + 1] sequence = modified_sequence return sequence # Function to handle input and output def main(): input_line = input().strip() n, m = map(int, input_line.split()) result = generate_sequence(n, m) print(\' \'.join(map(str, result))) # If executed as a script (for testing outside autogenerated test framework) if __name__ == \\"__main__\\": main()"},{"question":"You are given two integers, a and b. We define the following custom operations: a. combine(x, y) denotes the integer obtained by concatenating the decimal representation of x and y. For example, combine(12, 34) = 1234. b. diff(x, y) denotes the absolute difference between x and y. For example, diff(12, 34) = 22. Using only these operations, write a function that determines whether there exists a sequence of operations that can transform a into b. Input Format Two integers, a and b, separated by a single space. Constraints 1 <= a, b <= 10^6 Output Format Print \\"YES\\" if it is possible to transform a into b using the defined operations any number of times. Otherwise, print \\"NO\\". Sample Input 123 1234 Sample Output YES Explanation Starting with a = 123, you can use the combine operation to concatenate 123 with 4, resulting in 1234. Since this matches b, the output is \\"YES\\". Another Example Sample Input 15 1 Sample Output NO Explanation There is no sequence of operations that can transform 15 into 1, so the output is \\"NO\\".","solution":"def can_transform(a, b): Determines whether it is possible to transform integer a into integer b using the custom defined operations \\"combine\\" and \\"diff\\" str_a, str_b = str(a), str(b) if str_b.startswith(str_a): return \\"YES\\" return \\"NO\\""},{"question":"=====Function Descriptions===== sum The sum tool computes the sum of array elements along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.sum(my_array, axis = 0) # Output: [4 6] print numpy.sum(my_array, axis = 1) # Output: [3 7] print numpy.sum(my_array, axis = None) # Output: 10 print numpy.sum(my_array) # Output: 10 By default, the axis is None. Therefore, it computes the sum of the flattened array. prod The prod tool computes the product of array elements along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.prod(my_array, axis = 0) # Output: [3 8] print numpy.prod(my_array, axis = 1) # Output: [2 12] print numpy.prod(my_array, axis = None) # Output: 24 print numpy.prod(my_array) # Output: 24 By default, the axis is None. Therefore, it computes the product of the flattened array. cumsum The cumsum tool computes the cumulative sum of array elements along the specified axis. import numpy my_array = numpy.array([ [1, 2], [3, 4] ]) print numpy.cumsum(my_array, axis = 0) # Output: [[1 2] # [4 6]] print numpy.cumsum(my_array, axis = 1) # Output: [[1 3] # [3 7]] print numpy.cumsum(my_array, axis = None) # Output: [ 1 3 6 10] print numpy.cumsum(my_array) # Output: [ 1 3 6 10] By default, the axis is None. Therefore, it computes the cumulative sum of the flattened array. =====Problem Statement===== You are given a 2-D array of size NXN. Your task is to find: The sum along axis 0 The prod along axis 1 The cumulative sum along axis None =====Input Format===== The first line contains the integer N. The next N lines contain N space-separated integers. =====Output Format===== First, print the sum. Second, print the prod. Third, print the cumsum.","solution":"import numpy as np def perform_numpy_operations(N, arr): my_array = np.array(arr) sum_axis_0 = np.sum(my_array, axis=0) prod_axis_1 = np.prod(my_array, axis=1) cumsum_axis_none = np.cumsum(my_array, axis=None) return sum_axis_0, prod_axis_1, cumsum_axis_none"},{"question":"Write a program that evaluates whether a series of brackets is correctly balanced. A correctly balanced sequence of brackets is one in which every opening bracket of a given type has a matching closing bracket of the same type, in the correct order. There are three types of brackets to balance: - Round brackets: `()` - Square brackets: `[]` - Curly brackets: `{}` A sequence of brackets is correctly balanced if every opening bracket has a corresponding closing bracket of the same type and the pairs of brackets are properly nested. For example, the following sequences are correctly balanced: - `()` - `([])` - `{[()()]}` While these sequences are not correctly balanced: - `(` - `([)]` - `{[(])}` Write a program that reads multiple sequences of brackets and prints `YES` if a sequence is correctly balanced and `NO` otherwise. You may assume that each sequence contains only the characters `(`, `)`, `[`, `]`, `{`, and `}`. Input The input consists of multiple lines, each containing one sequence of brackets. The input ends with EOF. Output For each sequence, print `YES` if the sequence is correctly balanced, and `NO` otherwise. Example Input ()[]{} ([{}]) {[()()] {[(])} Output YES YES NO NO","solution":"def is_balanced(sequence): Check if the given sequence of brackets is balanced. :param sequence: String containing the sequence of brackets. :return: \'YES\' if the sequence is balanced, \'NO\' otherwise. bracket_map = {\')\': \'(\', \']\': \'[\', \'}\': \'{\'} open_brackets = {\'(\', \'[\', \'{\'} stack = [] for char in sequence: if char in open_brackets: stack.append(char) elif char in bracket_map: if not stack or stack[-1] != bracket_map[char]: return \'NO\' stack.pop() return \'YES\' if not stack else \'NO\' def evaluate_sequences(sequences): Evaluate multiple sequences of brackets to determine if each is balanced. :param sequences: List of strings, each containing a sequence of brackets. :return: List of strings, either \'YES\' or \'NO\' for each sequence. return [is_balanced(sequence) for sequence in sequences]"},{"question":"Alex loves playing with strings and has recently discovered a new challenge. Given a string consisting of lowercase English letters, Alex needs to determine the number of distinct substrings that can be formed from the string. As this number can be quite large, Alex needs to output it modulo 10^9+7. # Input Format: - The first line contains a single integer L representing the length of the string. - The second line contains the string consisting of L lowercase English letters. # Output Format: - Print the number of distinct substrings of the given string modulo 10^9+7. # Constraints: - 1 leq L leq 10^5 # Sample Input: ``` 4 abcd ``` # Sample Output: ``` 10 ``` # Explanation: The distinct substrings of the string `abcd` are: \\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"ab\\", \\"bc\\", \\"cd\\", \\"abc\\", \\"bcd\\", \\"abcd\\". Hence, there are 10 distinct substrings in total.","solution":"MOD = 10**9 + 7 def distinct_substring_count(L, s): Returns the number of distinct substrings in string s, modulo 10^9 + 7. substrings = set() for i in range(L): for j in range(i + 1, L + 1): substrings.add(s[i:j]) return len(substrings) % MOD"},{"question":"Minimize the Maximum You are given an array of positive integers and a positive integer k. You need to partition the array into k or fewer non-empty contiguous subarrays such that the maximum sum among these subarrays is minimized. Your task is to write a function that determines the minimal possible value of the maximum sum among the k or fewer subarrays that the given array can be split into. # Input - The first line contains two integers n and k (1 ≤ n ≤ 100,000, 1 ≤ k ≤ n) — the length of the array and the number of subarrays respectively. - The second line contains n positive integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9) — the elements of the array. # Output Print a single integer — the minimal possible value of the maximum sum among the k or fewer subarrays. # Example Input ``` 5 3 7 2 5 10 8 ``` Output ``` 14 ``` # Explanation One of the optimal ways to split the given array [7, 2, 5, 10, 8] into 3 subarrays is [7, 2] [5] [10, 8]. The maximum sum among these subarrays is 14, which is the minimal possible value. # Note In order to solve this problem, you may need to consider using binary search in combination with a greedy algorithm to determine the feasibility of a given maximum subarray sum.","solution":"def minimize_max_sum(n, k, array): def can_partition(max_sum): current_sum = 0 parts = 1 for num in array: if current_sum + num > max_sum: parts += 1 current_sum = num if parts > k: return False else: current_sum += num return True left, right = max(array), sum(array) while left < right: mid = (left + right) // 2 if can_partition(mid): right = mid else: left = mid + 1 return left"},{"question":"Jessie is writing a story for her blog that involves a mysterious sequence of numbers. Each number in the sequence is derived from the previous number via a specific transformation. Jessie wants to automate the generation of this sequence using a program. The sequence generation rule is as follows: - Start with a given positive integer `S`. - If the current number is even, the next number is half of the current number. - If the current number is odd, the next number is `3 * current_number + 1`. - The sequence terminates when it reaches the number `1`. Your task is to write a program that generates and outputs this sequence for a given starting number `S`. # Input A single integer `S` (1 ≤ S ≤ 10^6) representing the starting number of the sequence. # Output Output the sequence of numbers generated, separated by spaces. The sequence must terminate with the number 1. # Example Input ``` 6 ``` Output ``` 6 3 10 5 16 8 4 2 1 ``` Input ``` 15 ``` Output ``` 15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1 ``` Note: - To illustrate, starting with `6`, the sequence is generated as follows: `6` is even, so the next number is `6 / 2 = 3`. `3` is odd, so the next number is `3*3 + 1 = 10`. Continue this process until reaching `1`.","solution":"def generate_sequence(S): Generate the sequence of numbers starting from S according to the specified rules. if S < 1 or S > 10**6: raise ValueError(\\"S must be within the range 1 <= S <= 10^6\\") sequence = [S] while S != 1: if S % 2 == 0: S = S // 2 else: S = 3 * S + 1 sequence.append(S) return sequence"},{"question":"A company is conducting a coding competition where participants have to solve a series of challenges. Each challenge is designed to test specific skills, and participants are ranked based on their performance. The organizers need a program to help them determine the winner of the competition. The competition consists of N challenges, and each challenge is judged independently. Each participant is awarded a score between 0 and 100 for each challenge. The winner is the participant with the highest total score. In case of a tie (i.e., two or more participants have the same total score), the participant with the highest individual challenge score (among all challenges) wins. If there is still a tie, the participant with the second highest individual challenge score (among all challenges), and so on, until the tie is resolved. If all challenge scores are tied, the participant with the smallest participant ID wins. Write a function `determine_winner` that takes two arguments: 1. A list of lists `scores` where `scores[i]` is a list of integers representing the scores of the participant with ID i in all the challenges. 2. An integer N representing the number of challenges. The function should return the ID of the winning participant. # Example ```python def determine_winner(scores, N): # Your code here # Example Input scores = [ [50, 90, 85], [85, 90, 80], [50, 90, 85] ] N = 3 # Example Output print(determine_winner(scores, N)) # Output: 1 ``` # Constraints - Scores are integers between 0 and 100. - There may be multiple participants and multiple challenges. - Participants\' IDs are 0-indexed. - There will always be at least one participant.","solution":"def determine_winner(scores, N): Determines the winner of the competition based on the described criteria. Parameters: scores (list of list of int): Scores of each participant in each challenge. N (int): Number of challenges. Returns: int: The ID of the winning participant. def sort_key(participant): total_score = sum(participant[1]) return (total_score, sorted(participant[1], reverse=True)) participants_sorted = sorted(enumerate(scores), key=sort_key, reverse=True) winner_id = participants_sorted[0][0] return winner_id"},{"question":"A group of friends are organizing a marathon race. Each participant has a unique identifier. During the marathon, each participant\'s start time and end time are recorded. The organizers wish to determine if there is any overlap in participants’ running intervals. An overlap occurs when two participants are running concurrently at any point in time. Given t test cases, each containing information about participants\' intervals, your task is to determine for each test case if any overlap exists. -----Input----- The first line contains an integer t (1 le t le 10^4) — the number of test cases. For each test case, the first line contains an integer n (1 le n le 10^5), the number of participants. The next n lines each contain two integers start_i and end_i (1 le start_i < end_i le 10^9), representing the start and end time of the i-th participant. It is guaranteed that the total number of participants across all test cases does not exceed 10^5. -----Output----- For each test case, print a single line containing YES if there exists any overlap among the participants, and a single line containing NO otherwise. -----Examples----- Input 2 3 1 5 2 6 8 10 4 1 3 4 6 7 9 10 12 Output YES NO -----Note----- In the first test case, participants 1 and 2 have overlapping intervals (1 to 5, and 2 to 6). Therefore, the answer is YES. In the second test case, no participant’s running interval overlaps with any other participant\'s interval. Therefore, the answer is NO.","solution":"def check_overlaps(test_cases): results = [] for case in test_cases: n, intervals = case intervals.sort() overlap_found = False for i in range(1, n): if intervals[i][0] < intervals[i - 1][1]: overlap_found = True break results.append(\\"YES\\" if overlap_found else \\"NO\\") return results def parse_input(input_str): input_lines = input_str.strip().split(\'n\') idx = 0 t = int(input_lines[idx]) idx += 1 test_cases = [] for _ in range(t): n = int(input_lines[idx]) idx += 1 intervals = [] for _ in range(n): start, end = map(int, input_lines[idx].split()) idx += 1 intervals.append((start, end)) test_cases.append((n, intervals)) return test_cases def main(input_str): test_cases = parse_input(input_str) results = check_overlaps(test_cases) return \\"n\\".join(results)"},{"question":"Write a program to determine the smallest lexicographical string that can be formed by rearranging the characters of a given string such that no two adjacent characters are identical. If it is not possible to create such a string, return \\"IMPOSSIBLE\\". ------ Input Format ------ - First line will contain T, number of test cases. Then the test cases follow. - Each test case consists of a single line containing a string S. ------ Output Format ------ For each testcase, output the smallest lexicographical string that can be formed or \\"IMPOSSIBLE\\" if it is not feasible. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ |S| ≤ 100 ----- Sample Input 1 ------ 3 aab aaab abc ----- Sample Output 1 ------ aba IMPOSSIBLE abc ----- Explanation 1 ------ Test Case 1: The participant can rearrange \\"aab\\" to form \\"aba\\", which is the smallest lexicographical string with no two adjacent characters being identical. Test Case 2: It is not possible to rearrange \\"aaab\\" such that no two adjacent characters are the same. Hence, the answer is \\"IMPOSSIBLE\\". Test Case 3: The string \\"abc\\" already has no two adjacent characters being identical, and it is already the smallest lexicographical string, so the output is \\"abc\\".","solution":"from collections import Counter from heapq import heappop, heappush def rearrange_string_lexicographically(S): char_count = Counter(S) max_freq = max(char_count.values()) if max_freq > (len(S) + 1) // 2: return \\"IMPOSSIBLE\\" max_heap = [] for char, freq in char_count.items(): heappush(max_heap, (-freq, char)) result = [] prev_char, prev_freq = \'\', 0 while max_heap: freq, char = heappop(max_heap) result.append(char) if prev_freq < 0: heappush(max_heap, (prev_freq, prev_char)) prev_char = char prev_freq = freq + 1 return \'\'.join(result) def process_test_cases(T, test_cases): results = [] for S in test_cases: res = rearrange_string_lexicographically(S) results.append(res) return results # Sample input to test the function if __name__ == \'__main__\': T = int(input().strip()) test_cases = [input().strip() for _ in range(T)] results = process_test_cases(T, test_cases) for res in results: print(res)"},{"question":"In a distant kingdom called Blockland, there is a renowned engineer named Alice who designs complex buildings using a special type of blocks. These blocks are cubical, and all have the same size. Alice is currently involved in a project where she needs to build a series of structures, each of which is defined by a three-dimensional grid of blocks. Each building can be represented as a 3D matrix where each element indicates the height of the blocks at that specific location. Alice wants a way to simulate the process of constructing these buildings, and she has asked for your help to create a program that accepts a series of commands to add or remove blocks from these structures. Here are the commands that Alice uses: - `add x y z h` - Add blocks to the position (x, y) at a height starting from the current height up to (current height + h). - `remove x y z h` - Remove blocks from the position (x, y) down to a height (current height - h). If (current height - h) is less than zero, just set the height to zero. - `height x y` - Output the current height of blocks at position (x, y). - `total_height` - Output the total height of all blocks in the entire building. The initial height of all block positions is zero (0). # Input The first line provides the dimensions of the building, given as three integers `n`, `m`, and `k`, where `n` is the number of rows, `m` is the number of columns, and `k` is the number of operations to be performed. Each of the next `k` lines contains a command of the format described above. # Output For each `height x y` command, output the current height of the blocks at the specified position. For each `total_height` command, output the total accumulated height of all block positions in the building. # Examples Example 1 **Input:** ``` 3 3 5 add 1 1 1 5 add 2 2 2 3 height 1 1 remove 1 1 1 2 total_height ``` **Output:** ``` 5 6 ``` Example 2 **Input:** ``` 2 2 4 add 0 0 0 4 add 1 1 1 2 remove 0 0 0 4 total_height ``` **Output:** ``` 2 ``` # Explanation In the first example, the sequence of events is: 1. Add blocks at (1, 1) from height 0 to 5. 2. Add blocks at (2, 2) from height 0 to 3. 3. The height at (1, 1) is now 5. 4. Remove blocks at (1, 1) down to height 3 (5 - 2). 5. The total height of all blocks is 3 (at (1, 1)) + 3 (at (2, 2)) = 6. In the second example, the sequence of events is: 1. Add blocks at (0, 0) from height 0 to 4. 2. Add blocks at (1, 1) from height 0 to 2. 3. Remove all blocks at (0, 0). 4. The total height of all blocks is 2 (at (1, 1)) = 2.","solution":"class BuildingSimulation: def __init__(self, n, m): self.n = n self.m = m self.grid = [[0 for _ in range(m)] for _ in range(n)] def add(self, x, y, h): self.grid[x][y] += h def remove(self, x, y, h): self.grid[x][y] = max(0, self.grid[x][y] - h) def height(self, x, y): return self.grid[x][y] def total_height(self): return sum(sum(row) for row in self.grid) def process_commands(n, m, k, commands): simulation = BuildingSimulation(n, m) results = [] for command in commands: parts = command.split() action = parts[0] if action == \\"add\\": x, y, z, h = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) simulation.add(x, y, h) elif action == \\"remove\\": x, y, z, h = int(parts[1]), int(parts[2]), int(parts[3]), int(parts[4]) simulation.remove(x, y, h) elif action == \\"height\\": x, y = int(parts[1]), int(parts[2]) results.append(simulation.height(x, y)) elif action == \\"total_height\\": results.append(simulation.total_height()) return results"},{"question":"Given a list of word pairs, write a function that determines if a transformation sequence from one word to another exists. The transformation sequence is defined such that each word in the sequence is transformed into another word by changing exactly one character, and each transformed word must exist in the list of word pairs. Determine the shortest transformation sequence from the start word to the end word, and return the number of steps in this transformation. If no such sequence exists, return -1. Example 1: Input: start = \\"hit\\" end = \\"cog\\" wordPairs = [(\\"hit\\", \\"hot\\"), (\\"hot\\", \\"dot\\"), (\\"dot\\", \\"dog\\"), (\\"dog\\", \\"cog\\")] Output: 4 Explanation: The shortest transformation sequence is \\"hit\\" -> \\"hot\\" -> \\"dot\\" -> \\"dog\\" -> \\"cog\\", which involves 4 steps. Example 2: Input: start = \\"hit\\" end = \\"cog\\" wordPairs = [(\\"hit\\", \\"hot\\"), (\\"hot\\", \\"dot\\"), (\\"dot\\", \\"dog\\")] Output: -1 Explanation: There is no transformation sequence from \\"hit\\" to \\"cog\\". Your Task: You don\'t need to read input or print anything. Your task is to complete the function `minTransformationSteps()` which takes the start word, end word, and the list of word pairs as inputs and returns the minimal number of transformation steps required to transform the start word into the end word. Expected Time Complexity: O(n^2) where n is the number of words in the wordPairs. Expected Auxiliary Space: O(n) Constraints: 1 ≤ len(start), len(end) ≤ 100 1 ≤ len(wordPairs) ≤ 1000","solution":"from collections import deque, defaultdict def minTransformationSteps(start, end, wordPairs): # Create a graph from word pairs graph = defaultdict(list) for word1, word2 in wordPairs: graph[word1].append(word2) graph[word2].append(word1) # Perform BFS queue = deque([(start, 0)]) # (current word, step count) visited = set([start]) while queue: current_word, steps = queue.popleft() # If we reached the end word, return the steps if current_word == end: return steps # Iterate through the neighbors of the current word for neighbor in graph[current_word]: if neighbor not in visited: visited.add(neighbor) queue.append((neighbor, steps + 1)) return -1 # If end word is not reachable # Example usage # start = \\"hit\\" # end = \\"cog\\" # wordPairs = [(\\"hit\\", \\"hot\\"), (\\"hot\\", \\"dot\\"), (\\"dot\\", \\"dog\\"), (\\"dog\\", \\"cog\\")] # print(minTransformationSteps(start, end, wordPairs)) # Output: 4"},{"question":"In a faraway kingdom, there lives a group of villagers who love to play with strings. One day, they decided to create a string transformation game where the goal is to transform an initial string into a target string using a series of specific operations. The allowed operations are: 1. Replace a character in the string with another character. 2. Insert a character at any position in the string. 3. Delete a character from the string. The challenge is to determine the minimum number of operations required to transform the initial string into the target string and to track the transformations step-by-step. Input The first input line contains a single integer n, the length of the initial string (1 ≤ n ≤ 200). The second line contains the initial string consisting of n lowercase English letters. The third input line contains a single integer m, the length of the target string (1 ≤ m ≤ 200). The fourth line contains the target string consisting of m lowercase English letters. Output First, output the minimum number of operations required to transform the initial string into the target string. Following this, output each operation step-by-step in the format described below, one operation per line, in the order they should be performed to achieve the transformation. Operations should be output in the following format: - \\"Replace <position> <new_character>\\" for a replace operation, where <position> is the 1-based index of the character being replaced. - \\"Insert <position> <new_character>\\" for an insert operation, where <position> is the 1-based index position where the new character is inserted. - \\"Delete <position>\\" for a delete operation, where <position> is the 1-based index of the character being deleted. Examples: Input 6 kitten 6 sitting Output 3 Replace 1 s Replace 5 i Insert 7 g Input 4 abcd 5 abcde Output 1 Insert 5 e","solution":"def min_operations_to_transform(initial, target): n = len(initial) m = len(target) # dp[i][j] will be the minimum number of operations required to transform # initial[0...i-1] into target[0...j-1] dp = [[0] * (m + 1) for _ in range(n + 1)] # Base case: transforming string to an empty string for i in range(1, n + 1): dp[i][0] = i for j in range(1, m + 1): dp[0][j] = j # Fill dp array for i in range(1, n + 1): for j in range(1, m + 1): if initial[i - 1] == target[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1 # Now to find the operations i, j = n, m operations = [] while i > 0 and j > 0: if initial[i - 1] == target[j - 1]: i -= 1 j -= 1 else: if dp[i][j] == dp[i - 1][j - 1] + 1: operations.append(f\\"Replace {i} {target[j - 1]}\\") i -= 1 j -= 1 elif dp[i][j] == dp[i][j - 1] + 1: operations.append(f\\"Insert {i + 1} {target[j - 1]}\\") j -= 1 else: operations.append(f\\"Delete {i}\\") i -= 1 while i > 0: operations.append(f\\"Delete {i}\\") i -= 1 while j > 0: operations.append(f\\"Insert {1} {target[j - 1]}\\") j -= 1 operations.reverse() return dp[n][m], operations # The function can be called with initial and target strings as follows: # min_operations_to_transform(\\"kitten\\", \\"sitting\\")"},{"question":"Aria loves puzzles and often creates challenging ones for her friends. This weekend, she designed a \\"Grid Trek\\" puzzle, where a player navigates from the top-left corner to the bottom-right corner of an m x n grid. The player\'s goal is to determine the number of distinct paths she can take to reach the destination, starting at the top-left cell (1, 1) and moving only down or right at each step. However, there\'s a twist: some cells are blocked and cannot be traversed. Aria has asked you to devise an algorithm to solve the puzzle by computing the number of valid paths under these constraints. Input The first line contains two integers m and n (1 ≤ m, n ≤ 150) — the dimensions of the grid. The next m lines each contain n integers grid[i][j] (0 ≤ grid[i][j] ≤ 1), where grid[i][j] == 1 indicates that the cell is blocked and cannot be traversed, and grid[i][j] == 0 indicates that the cell is free to be traversed. Output Print one integer — the number of distinct valid paths from the top-left corner (1, 1) to the bottom-right corner (m, n). If there is no valid path, print 0. Examples Input 3 3 0 0 0 0 1 0 0 0 0 Output 2 Input 3 3 0 1 0 0 1 0 0 0 0 Output 1 Input 3 3 0 1 0 1 1 0 0 0 0 Output 0 Note In the first example, the two valid paths are: - Right, right, down, down. - Down, down, right, right. In the second example, the single valid path is: - Down, down, right, right. In the third example, there are no valid paths due to the obstacles.","solution":"def count_paths_through_grid(m, n, grid): Function to count the number of distinct valid paths from the top-left corner to the bottom-right corner of a grid with obstacles. :param m: Number of rows in the grid. :param n: Number of columns in the grid. :param grid: 2D list representing the grid where 1 indicates blocked cells and 0 indicates free cells. :return: Number of distinct valid paths from (0, 0) to (m-1, n-1). if grid[0][0] == 1 or grid[m-1][n-1] == 1: return 0 dp = [[0] * n for _ in range(m)] dp[0][0] = 1 for i in range(m): for j in range(n): if grid[i][j] == 1: dp[i][j] = 0 else: if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] return dp[m-1][n-1]"},{"question":"Wendy enjoys arranging her toy blocks in stacks. She has an unlimited supply of blocks, and she wants to build exactly M stacks such that each stack has a different height, starting from 1 block. For example, if M=3, the stacks would have heights of 1, 2, and 3 blocks respectively. Your task is to determine the minimum number of blocks Wendy needs to build these stacks. -----Input----- The first line contains an integer T representing the number of test cases. Each of the next T lines contains one integer M representing the number of stacks. -----Output----- For each test case, print the minimum number of blocks required to build M stacks. -----Constraints----- - 1 ≤ T ≤ 100 - 1 ≤ M ≤ 10^5 -----Example----- Input: 2 3 4 Output: 6 10 -----Explanation----- Example case 1: To build 3 stacks with heights 1, 2, and 3, Wendy needs 1 + 2 + 3 = 6 blocks. Example case 2: To build 4 stacks with heights 1, 2, 3, and 4, Wendy needs 1 + 2 + 3 + 4 = 10 blocks.","solution":"def min_blocks(M): Returns the minimum number of blocks required to build M stacks with heights 1, 2, ..., M. The sum of the first M natural numbers is given by the formula M * (M + 1) // 2. return M * (M + 1) // 2 def solve(test_cases): For each test case, calculate and return the minimum number of blocks required. results = [] for M in test_cases: results.append(min_blocks(M)) return results"},{"question":"You are building a feature to automatically generate short strings that uniquely identify items in your inventory. These strings, called \\"item codes\\", are created from the item names by retaining the first K alphanumeric characters from each name. Non-alphanumeric characters are skipped, but spaces (if any) are replaced by underscores \'_\'. If the item name contains fewer than K alphanumeric characters, the remaining positions in the item code are filled with the character \'#\'. For example: - If K=5 and the item name is \\"Open #Box!\\", the item code will be \\"Open_#\\". Write a program that takes multiple test cases, each specifying an item name and a value of K, and returns the corresponding item codes. ------ Input Format ------ - The first line will contain T, the number of test cases. Then T test cases follow. - Each test case consists of two lines: - The first line contains an integer K. - The second line contains a string representing the item name. ------ Output Format ------ For each test case, output a single line, the item code generated from the corresponding item name. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ K ≤ 100 1 ≤ |item_name| ≤ 100 ----- Sample Input 1 ------ 4 5 Open #Box! 3 USB-Drive 4 4K TV 7 Notebook ----- Sample Output 1 ------ Open_# USB 4K_T Noteboo ----- Explanation 1 ------ Test Case 1: First 5 alphanumeric characters are \'O\', \'p\', \'e\', \'n\', \'_\'. As space is converted to underscore. Test Case 2: First 3 alphanumeric characters are \'U\', \'S\', \'B\'. Test Case 3: First 4 alphanumeric characters are \'4\', \'K\', \'_\', \'T\'. As space is converted to underscore. Test Case 4: First 7 alphanumeric characters are \'N\', \'o\', \'t\', \'e\', \'b\', \'o\', \'o\'.","solution":"def generate_item_codes(T, test_cases): result = [] for i in range(T): K, item_name = test_cases[i] alphanumeric_chars = [] for char in item_name: if char.isalnum(): alphanumeric_chars.append(char) elif char == \' \': alphanumeric_chars.append(\'_\') item_code = \'\'.join(alphanumeric_chars[:K]) if len(item_code) < K: item_code += \'#\' * (K - len(item_code)) result.append(item_code) return result"},{"question":"Alice and Bob love playing with digits and numbers. One day, Alice wrote down a number `N` and asked Bob to create a new number by rearranging the digits of `N` in such a way that the resultant number is the next higher permutation of digits compared to the original number `N`. If no such permutation is possible, Bob should output the smallest permutation of `N`. CONSTRAINTS: 1 ≤ N ≤ 10^5 INPUT The first and only line contains the input `N`, a positive integer value. OUTPUT - If the next higher permutation exists, display that permutation. - If no higher permutation is possible, display the smallest permutation of the digits of `N`. SAMPLE INPUT Sample Input 1 231 Sample Input 2 987 SAMPLE OUTPUT Sample Output 1 312 Sample Output 2 789 Explanation In the first example, the next higher permutation of 231 is 312. In the second example, since 987 is the highest permutation possible, the smallest permutation (which is 789) is returned.","solution":"def next_permutation(N): Given an integer N, this function returns the next higher permutation of its digits. If no such permutation exists, it returns the smallest permutation of N. digits = list(str(N)) length = len(digits) # Step 1: Find the first decreasing digit from the right i = length - 2 while i >= 0 and digits[i] >= digits[i + 1]: i -= 1 # If no such digit is found, return the smallest permutation if i == -1: return int(\'\'.join(sorted(digits))) # Step 2: Find the smallest digit on the right side of the found digit which is larger than the found digit j = length - 1 while digits[j] <= digits[i]: j -= 1 # Step 3: Swap the found digits digits[i], digits[j] = digits[j], digits[i] # Step 4: Reverse the digits to the right of the initially found digit digits = digits[:i+1] + digits[i+1:][::-1] return int(\'\'.join(digits))"},{"question":"A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For example, the word \\"madam\\" is a palindrome, while the word \\"hello\\" is not. Your task is to determine if the given string is a palindrome. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 100) — the string to be checked. The string will only contain lowercase English letters and spaces. Output Print \\"YES\\" if the string is a palindrome, otherwise print \\"NO\\". Examples Input madam Output YES Input hello Output NO Input race car Output YES","solution":"def is_palindrome(s): Returns \\"YES\\" if the given string is a palindrome, else returns \\"NO\\" # Remove spaces and convert to lowercase cleaned_s = s.replace(\\" \\", \\"\\").lower() # Check if the cleaned string is equal to its reverse if cleaned_s == cleaned_s[::-1]: return \\"YES\\" else: return \\"NO\\""},{"question":"Ashok has recently become interested in ancient manuscripts. One day, he finds a very old manuscript in a library, which contains several strings of characters. Some parts of these strings are unintelligible because certain characters are damaged and can no longer be identified. To preserve the manuscript, Ashok decides to create a program that reconstructs these strings. The damaged portions are marked with a \'?\' character, which can be replaced by any lowercase alphabetical character (\'a\' to \'z\'). Ashok wants to know the number of possible unique strings that can be generated by replacing all occurrences of \'?\' with a lowercase alphabetical character. Write a program that takes a single line string containing lowercase alphabetical characters and \'?\'. The program should output the number of unique strings that can be generated by replacing all \'?\' in the given string. Input The input consists of a single string with length L (1 ≤ L ≤ 100,000) that contains only lowercase alphabetical characters (\'a\' to \'z\') and the character \'?\'. Output Output the total number of unique strings that can be formed by replacing all occurrences of \'?\' with any lowercase alphabetical character. The output must be a single integer. Examples Input a?c Output 26 Input a??b Output 676 Input ?ab? Output 676","solution":"def count_unique_strings(s): Returns the number of unique strings that can be formed by replacing all occurrences of \'?\' in the given string with any lowercase alphabetical character. # Count the number of \'?\' in the string num_questions = s.count(\'?\') # Each \'?\' can be replaced by any of the 26 lowercase letters # So the number of unique strings is 26 raised to the power of the number of \'?\' return 26 ** num_questions"},{"question":"You are in charge of optimizing the inventory for a warehouse. The warehouse has a limited capacity, and you need to determine the optimal way to store different types of items to maximize the total value of the inventory. Each type of item has a specific weight and value, and you cannot store fractions of an item. Create a program that, given the capacity of the warehouse and the list of items with their corresponding weights and values, finds the maximum total value of items that the warehouse can store without exceeding its capacity. Input The input consists of multiple data sets. Each data set is given in the following format: - The first line contains two integers W (1 ≤ W ≤ 10000) and n (1 ≤ n ≤ 100), representing the capacity of the warehouse and the number of different types of items, respectively. - The next n lines each contain two integers wi (1 ≤ wi ≤ 100) and vi (1 ≤ vi ≤ 10000), representing the weight and value of each item type i. The input ends when W and n are both zero, which should not be processed. Output For each data set, output the maximum total value of items that can be stored in the warehouse on a single line. Examples Input 50 3 10 60 20 100 30 120 100 2 50 200 50 300 0 0 Output 220 500 Input None Output None","solution":"def knapsack(W, n, items): Solves the 0/1 Knapsack problem. W: Integer, capacity of the warehouse. n: Integer, number of different types of items. items: List of tuples [(wi, vi), ..., (wn, vn)] dp = [0] * (W + 1) for weight, value in items: for j in range(W, weight - 1, -1): dp[j] = max(dp[j], dp[j - weight] + value) return dp[W] def process_warehouse_data(input_data): Processes the input data and finds the maximum total value of items that the warehouse can store without exceeding its capacity. input_data: List of strings, each string being a line from input results = [] i = 0 while i < len(input_data): W, n = map(int, input_data[i].split()) if W == 0 and n == 0: break items = [] for j in range(i + 1, i + 1 + n): wi, vi = map(int, input_data[j].split()) items.append((wi, vi)) results.append(knapsack(W, n, items)) i += (n + 1) return results"},{"question":"Write a function that takes in an integer `n` and prints an hourglass pattern using the `#` symbol. The pattern should span `n` rows where `n` is an odd number greater than 1 and less than or equal to 15. Example: 1) Input: n=3 Output: # # # 2) Input: n=5 Output: # # # # # SAMPLE INPUT 7 SAMPLE OUTPUT # # # # # # # Explanation The hourglass pattern is printed across 7 lines as shown above.","solution":"def print_hourglass(n): Prints an hourglass pattern using the \'#\' symbol with n rows. :param n: An odd integer greater than 1 and less than or equal to 15 # Ensure n is an odd number and within the specified range if n % 2 == 0 or n <= 1 or n > 15: raise ValueError(\\"n must be an odd number greater than 1 and less than or equal to 15\\") for i in range(n): if i <= n//2: print(\\" \\" * i + \\"#\\" * (n - 2 * i)) else: print(\\" \\" * (n - i - 1) + \\"#\\" * (2 * (i - n//2) + 1)) # Example calls to visually inspect the output # print_hourglass(7)"},{"question":"A string s of length n is given which consists only of lowercase letters. Your task is to determine if the string can be converted into a palindrome by rearranging its characters and removing at most m characters. For example, if s = {\\"abcbc\\"} and m = 1, you can remove one \'c\' to obtain the palindrome \\"abcba\\". -----Input----- The first line contains a single integer t (1 le t le 1000) — the number of test cases. Then t test cases follow. For each test case: - The first line contains one integer n (1 le n le 40) — the length of the string. - The second line contains the string s. - The third line contains one integer m (0 le m le n) — the maximum number of characters that can be removed. It is guaranteed that s contains only lowercase letters of the English alphabet. -----Output----- For each test case, output \\"YES\\" if it is possible to rearrange s and remove at most m characters to form a palindrome. Otherwise, output \\"NO\\". -----Examples----- Input 4 5 abcbc 1 3 aaab 1 6 racecar 0 4 abcda 1 Output YES YES YES NO -----Note----- In the first test case, removing one \'c\' from the string \\"abcbc\\" and rearranging the remaining characters can yield \\"abcba\\", which is a palindrome. In the second test case, removing one \'a\' from the string \\"aaab\\" and rearranging the remaining characters can yield \\"aab\\", which is a palindrome. In the third test case, the string \\"racecar\\" is already a palindrome, so no removal is needed. In the fourth test case, removing one \'c\' from the string \\"abcda\\" still cannot yield a palindrome.","solution":"def can_form_palindrome(t, test_cases): results = [] for i in range(t): n = test_cases[i][0] s = test_cases[i][1] m = test_cases[i][2] from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # Calculate the minimum number of removals needed to form a palindrome min_removals_needed = max(0, odd_count - 1) if min_removals_needed <= m: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"Zara is working on a new sorting algorithm and she wants to test its efficiency. She has a list of integers and a single integer key. Her task is to sort the list in such a way that all integers less than the key come first (in the original order), followed by all integers equal to the key (in the original order), and finally all integers greater than the key (in the original order). You need to help Zara by writing a program that performs this specific sort. -----Input:----- - The first line contains an integer T, the number of test cases. Each test case consists of two lines: - The first line contains two integers N (the number of integers in the list) and K (the key). - The second line contains N integers separated by space. -----Output:----- - For each test case, print the sorted list as per the defined criteria, in a single line. -----Constraints:----- - 1 leq T leq 100 - 1 leq N leq 10^4 - 1 leq value of integers in the list leq 10^5 - 1 leq K leq 10^5 -----Sample Input:----- 2 6 3 4 3 5 2 3 1 7 5 6 2 5 9 5 2 1 -----Sample Output:----- 2 1 3 3 4 5 2 2 1 5 5 6 9","solution":"def conditional_sort(n, k, arr): Sorts arr such that all integers less than k come first, followed by all integers equal to k, followed by all integers greater than k. less_than_k = [x for x in arr if x < k] equal_to_k = [x for x in arr if x == k] greater_than_k = [x for x in arr if x > k] return less_than_k + equal_to_k + greater_than_k def sort_multiple_tests(T, test_cases): results = [] for t in range(T): n, k, arr = test_cases[t] sorted_arr = conditional_sort(n, k, arr) results.append(\\" \\".join(map(str, sorted_arr))) return results"},{"question":"Given an integer `n`, determine whether `n` is a prime number by implementing a function `is_prime(n)`. A prime number is a natural number greater than `1` that has no positive divisors other than `1` and itself. In other words, a prime number `p` has no divisors `d` (other than `1` and `p`) such that `1 < d < p`. The function should return `True` if `n` is a prime number and `False` otherwise. **Examples:** ``` is_prime(2) # returns True is_prime(4) # returns False is_prime(17) # returns True is_prime(18) # returns False ``` **Constraints:** - The input `n` will be a positive integer. - Consider optimizing the function to handle larger values of `n` efficiently.","solution":"def is_prime(n): Return True if the given integer n is a prime number, otherwise return False. if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while (i * i) <= n: if n % i == 0 or n % (i + 2) == 0: return False i += 6 return True"},{"question":"In a country far away, there exists a vast network of towns connected by bidirectional roads. Each town is represented by a node, and each road is represented by an edge. The network forms a connected graph with n nodes and m edges. However, due to poor maintenance, some roads are more dangerous than others. Each road has an associated danger level, given as an integer. The leader of the country has asked you to find the safest path from the capital to the cities by minimizing the maximum danger level one might encounter along any path. Formally, given a connected undirected graph with n nodes and m edges, where each edge has an integer danger level associated with it, find the minimum possible maximum danger level of any path from the capital (node 1) to any other city. ----- Input ----- The first line of input contains two integers n and m (1 leq n, m leq 100) — the number of nodes and edges in the graph, respectively. The following m lines each contain three integers u, v, and w (1 leq u, v leq n, 1 leq w leq 1000) — indicating that there is a bidirectional road between nodes u and v with a danger level w. It is guaranteed that the graph is connected. ----- Output ----- Output a single integer — the minimum possible maximum danger level of a path from the capital (node 1) to any other city (nodes 2, 3, ..., n). ----- Example ----- Input 3 3 1 2 10 1 3 20 2 3 30 Output 20 ----- Note ----- In the example, the path with nodes and their danger levels is as follows: - From node 1 to node 2, danger level is 10. - From node 1 to node 3, danger level is 20. - From node 2 to node 3, danger level is 30. The safest path from the capital (node 1) to node 3 would be directly from node 1 to node 3 with a danger level of 20, which is the minimum possible maximum danger level.","solution":"import heapq def find_min_max_danger_level(n, m, edges): graph = [[] for _ in range(n + 1)] for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) def dijkstra(): heap = [(0, 1)] # (danger_level, node) danger_levels = [float(\'inf\')] * (n + 1) danger_levels[1] = 0 while heap: max_danger, u = heapq.heappop(heap) for v, w in graph[u]: new_danger = max(max_danger, w) if new_danger < danger_levels[v]: danger_levels[v] = new_danger heapq.heappush(heap, (new_danger, v)) return max(danger_levels[2:]) return dijkstra()"},{"question":"In a kingdom far, far away, there exists a rectangular grid of dimensions `N x M`. The kingdom\'s map is represented as a matrix where each cell either contains an empty plot (\'.\') or an obstacle (\'#\'). The king of the land has a special interest in finding the largest rectangular area of empty plots within this grid. This area must be such that all the cells within the rectangle are empty plots. Your task is to help the king find the largest rectangular area of empty plots in the given grid and return its area. Input The first line contains two integers `N` and `M` (1 ≤ N, M ≤ 1000) — the dimensions of the grid. The next `N` lines contain `M` characters each (either \'.\' or \'#\') representing the grid. Output Print the area of the largest rectangular area consisting exclusively of empty plots. Example Input 4 5 ..... ..#.. ....# .#... Output 6 Explanation In the given example, the largest rectangle of empty plots can be found spanning from the first row and first column to the second row and third column, forming an area of 6 (`2 rows * 3 columns`).","solution":"def largest_empty_plot_area(n, m, grid): Returns the area of the largest rectangle consisting exclusively of empty plots in the grid. if n == 0 or m == 0: return 0 def max_histogram_area(heights): Helper function to calculate the largest rectangle area in a histogram given by heights. stack = [] max_area = 0 index = 0 while index < len(heights): if not stack or heights[stack[-1]] <= heights[index]: stack.append(index) index += 1 else: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) while stack: top_of_stack = stack.pop() area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index)) max_area = max(max_area, area) return max_area heights = [0] * m max_area = 0 for i in range(n): for j in range(m): if grid[i][j] == \'.\': heights[j] += 1 else: heights[j] = 0 max_area = max(max_area, max_histogram_area(heights)) return max_area"},{"question":"You\'ve been given a string that contains only uppercase letters. You can perform two types of operations on this string: 1. Pick any character from the string and remove it. 2. Pick any character from the string and move it to the end. Your goal is to transform the given string into a lexicographically smallest string possible using the two types of operations described above. -----Input----- The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000) which contains only uppercase letters. -----Output----- Output a single line containing the lexicographically smallest string possible after applying the operations. -----Examples----- Input BCDA Output ABCD Input ZXYABC Output ABCXYZ Input BXABYACZB Output AABBBCXYZ -----Note----- In the first example, you can achieve the lexicographically smallest string by removing \'B\', then removing \'C\', moving \'D\' to the end, and concatenating them in sorted order as \'ABCD\'. In the second example, first remove \'Z\', then \'X\', and \'Y\' to get \\"ABC\\". After that, you can concatenate the removed characters in sorted order at the end to get \\"ABCXYZ\\". In the third example, remove characters to form \\"AABBBCZ\\" and then sort and move the remaining characters to get the final string \\"AABBBCXYZ\\".","solution":"def lexicographically_smallest_string(s): Transform the input string into the lexicographically smallest string possible using the described operations. return \\"\\".join(sorted(s))"},{"question":"Winter is coming, and the people of Bitland are preparing for the harsh cold. They have been given a task to collect firewood from the nearby forest. There is a sequence of n non-negative integers b_1, b_2, ..., b_{n}, which represent the amount of firewood at each of the respective locations. Two players, BitLGM and BitYao, play a game where they take turns to collect firewood. BitLGM moves first. Each player on their turn must choose one of the following actions: 1. Choose one of the locations (we\'ll denote it as b_{i}). Choose integer y (1 ≤ y ≤ b_{i}), then decrease b_{i} by y, i.e., apply assignment: b_{i} = b_{i} - y. 2. Collect one unit of firewood from each non-empty location, i.e., decrease all b_{i} that are greater than 0 by 1 unit. The player who cannot make a move loses. You\'re given the initial sequence b_1, b_2, ..., b_{n}. Determine who wins if both players play optimally. -----Input----- The first line contains an integer n (1 ≤ n ≤ 5). The next line contains n integers b_1, b_2, ..., b_{n} (0 ≤ b_{i} ≤ 200). -----Output----- Output the name of the winner (either \\"BitLGM\\" or \\"BitYao\\" without the quotes) assuming both players play optimally. -----Examples----- **Input** 3 1 0 2 **Output** BitLGM **Input** 2 1 1 **Output** BitYao **Input** 4 2 3 1 2 **Output** BitLGM","solution":"def determine_winner(n, b): Determines the winner of the game given a list of integers representing firewood at different locations. if n == 1: return \\"BitLGM\\" xor_sum = 0 for bi in b: xor_sum ^= bi if n == 2: if xor_sum == 0: return \\"BitYao\\" return \\"BitLGM\\" return \\"BitLGM\\" # Example usage: # print(determine_winner(3, [1, 0, 2])) # BitLGM # print(determine_winner(2, [1, 1])) # BitYao # print(determine_winner(4, [2, 3, 1, 2])) # BitLGM"},{"question":"You are given a list of integers representing the heights of trees in a row. A bird can only rest on the tallest tree, but if there is more than one tallest tree, it can choose any of them. The bird flies away to another tree if it finds a taller tree as it moves from left to right. You need to count the number of times the bird will make such a move, starting from the first tree in the row. -----Input----- The first line of the input contains one integer n (1 le n le 100) — the number of trees. The second line of the input contains n integers h_1, h_2, dots, h_n (1 le h_i le 100) — the heights of the trees. -----Output----- Print only one integer — the number of times the bird will move to a taller tree. -----Examples----- Input 5 2 3 4 3 5 Output 3 Input 6 1 1 1 1 1 1 Output 0 Input 7 4 4 4 4 4 4 4 Output 0 -----Note----- In the first example, the bird will move from the first tree to the second tree, then to the third tree, and finally to the fifth tree because they are all taller than the previous tree the bird was on. In the second and third examples, there is no tree taller than the starting tree, so the bird does not move at all.","solution":"def count_bird_moves(tree_heights): max_height = tree_heights[0] move_count = 0 for height in tree_heights[1:]: if height > max_height: move_count += 1 max_height = height return move_count"},{"question":"You are given an integer array `nums`. Each integer appears exactly three times, except for one, which appears exactly once. You need to find that single integer which appears only once. Write a function that takes this array as input and returns the integer that appears once. Example 1: Input: [2, 2, 3, 2] Output: 3 Example 2: Input: [0, 1, 0, 1, 0, 1, 99] Output: 99 Note: - Your algorithm should run in linear runtime complexity. - Can you implement it without using extra memory? Constraints: - 1 <= nums.length <= 3 * 10^4 - -2^31 <= nums[i] <= 2^31 - 1 - Each integer in nums appears exactly three times except for one integer which appears once.","solution":"def singleNumber(nums): Find the single number that appears exactly once in the array where each other element appears exactly three times. # Initialize a variable to store the single number single_number = 0 # Iterate through each bit position (0 to 31 for 32-bit integer) for i in range(32): # Sum the i-th bit for all numbers bit_sum = 0 for num in nums: # Mask and shift to get the i-th bit of num bit_sum += (num >> i) & 1 # Determine if the i-th bit of the single number is 1 or 0 if bit_sum % 3 != 0: single_number |= (1 << i) # Handle the case when the single number is negative if single_number >= 2**31: single_number -= 2**32 return single_number"},{"question":"Nina is organizing a charity auction and wants to track the bids placed on various items. For each item, the bids from different participants are recorded in a list. Nina knows that each item is sold to the highest bidder. However, if there are multiple highest bids of the same value for an item, the smallest index participant in the list is given preference. Nina wants to determine the final list of winners for all items. Help her find out which participant wins each item based on the above rules. -----Input----- The first line contains an integer k (1 ≤ k ≤ 10^5) — the number of items. Then follows k blocks, each block representing the bids for an item. The first line of each block contains an integer t (1 ≤ t ≤ 10^5) — the number of bids for that item, followed by t integers representing the bids b_{i} (1 ≤ b_{i} ≤ 10^9). -----Output----- Print k lines. Each line should contain a single integer indicating the index of the winning participant (0-based) for each corresponding item. -----Examples----- Input: 2 5 10 20 30 20 30 3 50 50 30 Output: 4 0","solution":"def find_winners(auction_data): winners = [] n = len(auction_data) for i in range(n): bids = auction_data[i] max_bid = max(bids) winner_index = bids.index(max_bid) winners.append(winner_index) return winners"},{"question":"Given a positive integer N, find the factorial of N (denoted as N!). The factorial of a positive integer N is the product of all positive integers less than or equal to N. Example 1: Input: N = 4 Output: 24 Explanation: 4! = 4 * 3 * 2 * 1 = 24 Example 2: Input: N = 6 Output: 720 Explanation: 6! = 6 * 5 * 4 * 3 * 2 * 1 = 720 Your Task: You don\'t need to read input or print anything. Your task is to complete the function factorial() which takes an integer N as the parameter and returns the factorial of N. Expected Time Complexity: O(N) Expected Auxillary Space: O(1) Constraints: 1 <= N <= 15","solution":"def factorial(N): Returns the factorial of the positive integer N. Args: N (int): A positive integer (1 <= N <= 15) Returns: int: The factorial of N result = 1 for i in range(2, N + 1): result *= i return result"},{"question":"A social network has a series of users connected via friendships. The network can be represented as a graph of N nodes (users) and M edges (friendships). Each friendship is bidirectional. A user is considered \\"active\\" if they have participated in at least one interaction (like or comment) with their friends. Each interaction can be represented as a tuple (time, user1, user2), where `time` is the time of the interaction, and `user1` and `user2` are the users involved in the interaction. The interactions are given in chronological order. For each user, you need to determine the earliest time at which they became active. If a user never becomes active, their activation time should be recorded as -1. Input The first line of the input contains three integers N, M, and K (1 ≤ N ≤ 100,000, 1 ≤ M ≤ 200,000, 0 ≤ K ≤ 200,000) — the number of users, the number of friendships, and the number of interactions respectively. The next M lines each contain two integers u and v (1 ≤ u, v ≤ N, u ≠ v) indicating a friendship between users u and v. The next K lines each contains an integer `time` and two integers `user1` and `user2` (1 ≤ time ≤ 1,000,000, 1 ≤ user1, user2 ≤ N, user1 ≠ user2), where `(time, user1, user2)` represents an interaction at time `time`. Output Print N lines. The i-th line should contain a single integer indicating the earliest time at which user `i` became active, or -1 if user `i` never becomes active. Examples Input 5 4 3 1 2 1 3 3 4 2 5 1 1 2 2 1 3 3 3 4 Output 1 1 2 3 -1 Input 3 2 2 1 2 2 3 1 1 2 3 2 3 Output 1 1 3 Note In the first example: - User 1 becomes active at time 1 due to the interaction with user 2. - User 2 also becomes active at time 1 due to the interaction with user 1. - User 3 becomes active at time 2 due to the interaction with user 1. - User 4 becomes active at time 3 due to the interaction with user 3. - User 5 never participates in an interaction, so their activation time is -1. In the second example: - User 1 becomes active at time 1 due to the interaction with user 2. - User 2 also becomes active at time 1 due to the interaction with user 1. - User 3 becomes active at time 3 due to the interaction with user 2.","solution":"def earliest_activation_times(N, M, K, friendships, interactions): from collections import defaultdict, deque # Create an adjacency list for friendships friends = defaultdict(list) for u, v in friendships: friends[u].append(v) friends[v].append(u) # Initialize activation times with -1 (inactive) activation_times = [-1] * (N + 1) # Process interactions in chronological order for time, user1, user2 in interactions: if activation_times[user1] == -1: activation_times[user1] = time if activation_times[user2] == -1: activation_times[user2] = time return activation_times[1:] # Example usage: # N = 5, M = 4, K = 3 # friendships = [(1, 2), (1, 3), (3, 4), (2, 5)] # interactions = [(1, 1, 2), (2, 1, 3), (3, 3, 4)] # print(earliest_activation_times(N, M, K, friendships, interactions))"},{"question":"Given an array of integers, and a target sum, determine whether there are three distinct integers in the array that add up to the target sum. You need to return a boolean indicating the presence of such a triplet. Input The first line contains 2 integers N and target denoting the number of elements in the array and the required sum respectively. The second line contains N space-separated integers representing the elements of the array. Output Print \\"YES\\" if a triplet exists, otherwise print \\"NO\\" (without quotes). Constraints 3 ≤ N ≤ 500 -10^9 ≤ target ≤ 10^9 -10^9 ≤ a[i] ≤ 10^9 Example Input 5 0 -1 2 1 -4 2 Output YES Explanation The triplet (-1, -4, 5) sums to 0, hence the output is \\"YES\\".","solution":"def find_triplet_sum(array, target): Determine whether there are three distinct integers in the array that add up to the target sum. Returns: bool: True if such a triplet exists, else False. array.sort() N = len(array) for i in range(N - 2): left = i + 1 right = N - 1 while left < right: current_sum = array[i] + array[left] + array[right] if current_sum == target: return True elif current_sum < target: left += 1 else: right -= 1 return False # Function to interact with input-output format of the problem def solve(): import sys input = sys.stdin.read data = input().split() N = int(data[0]) target = int(data[1]) array = list(map(int, data[2:])) if find_triplet_sum(array, target): print(\\"YES\\") else: print(\\"NO\\")"},{"question":"A group of scientists is working on creating an encryption algorithm that ensures secure communication. The algorithm involves shifting the characters of a given string based on their position in the alphabet. The position is determined by the index of the character in the original string plus a given shift value. After the shift, if the character goes past \'z\', it wraps around to the start of the alphabet. Your task is to implement this encryption algorithm. To achieve this, consider each character as a circular array index where after \'z\' comes \'a\'. For example, shifting \'z\' by 1 will result in \'a\'. Input The input consists of a single line that contains a string s (1 ≤ length(s) ≤ 100), followed by an integer k (1 ≤ k ≤ 1000). The string s only contains lowercase English letters. Output Print the encrypted string produced by shifting each character in s by k positions in the alphabet, wrapping around if necessary. Examples Input abc 3 Output def Input xyz 2 Output zab Input hello 27 Output ifmmp","solution":"def encrypt(s, k): Encrypt the string s by shifting each character by k positions in the alphabet, wrapping around if necessary. Parameters: s (str): the input string consisting of lowercase English letters k (int): the shift value Returns: str: the encrypted string encrypted = [] k = k % 26 # As the alphabet size is 26, we make use of modulo for wrapping around for char in s: new_char = chr(((ord(char) - ord(\'a\') + k) % 26) + ord(\'a\')) encrypted.append(new_char) return \'\'.join(encrypted) # Examples to demonstrate the function: # Input: \\"abc\\", 3 -> Output: \\"def\\" # Input: \\"xyz\\", 2 -> Output: \\"zab\\" # Input: \\"hello\\", 27 -> Output: \\"ifmmp\\""},{"question":"You are given a string that contains only the characters \'L\' and \'R\'. Your task is to divide the string into the maximum number of non-empty substrings such that each substring contains the same number of \'L\'s and \'R\'s. Constraints * 1 ≤ |s| ≤ 100 * s consists of the characters \'L\' and \'R\' only. Input Input is given from Standard Input in the following format: s Output Print the maximum number of such substrings. Examples Input RLRRLLRLRL Output 4 Input RLLLLRRRLR Output 3 Input LLLLRRRR Output 1","solution":"def max_balanced_substrings(s): Returns the maximum number of non-empty substrings such that each substring contains the same number of \'L\'s and \'R\'s. count = 0 balance = 0 for ch in s: if ch == \'L\': balance += 1 else: balance -= 1 if balance == 0: count += 1 return count"},{"question":"You are given a grid of size n x m consisting of the characters \'.\' and \'#\'. The \'.\' character represents an empty cell and the \'#\' character represents a wall. You start at the top-left corner of the grid (1, 1) and your goal is to reach the bottom-right corner of the grid (n, m) by moving one cell at a time either down or right. Determine the number of distinct paths that you can take to reach the goal without passing through any walls. If it\'s not possible to reach the goal, return 0. -----Input----- The first line contains two integers n and m (1 ≤ n, m ≤ 500) — the number of rows and columns in the grid. The next n lines contain m characters each, representing the grid. -----Output----- Print a single integer — the number of distinct paths to reach the bottom-right corner of the grid. -----Examples----- Input 3 3 ... .#. ... Output 2 Input 2 2 .. #. Output 1 Input 4 4 ...# ..#. #... ...# Output 0 -----Note----- In the first example, there are two distinct paths: right, right, down, down and down, down, right, right. In the second example, only one path is available: right, down. In the third example, there is no possible path due to the walls blocking the way.","solution":"def num_paths(n, m, grid): # Initialize a dp array with zeros dp = [[0 for _ in range(m)] for _ in range(n)] # Set the starting point if grid[0][0] == \'.\': dp[0][0] = 1 else: return 0 # Fill the dp table for i in range(n): for j in range(m): if grid[i][j] == \'.\': if i > 0: dp[i][j] += dp[i - 1][j] if j > 0: dp[i][j] += dp[i][j - 1] return dp[n - 1][m - 1]"},{"question":"# Password Strength In today\'s world, ensuring secure authentication processes is crucial. A significant part of that process is the creation of strong passwords. Your task is to implement a system that helps users create strong passwords by providing feedback on their existing passwords based on specific criteria. A strong password: 1. Has at least 8 characters. 2. Contains both uppercase and lowercase letters. 3. Includes at least one numerical digit. 4. Has at least one special character from the set `!@#%^&*()-+`. Write a function `password_strength(password: str) -> str` that takes a password string as input and returns a message suggesting improvements if the password does not meet the criteria or a \\"Strong Password\\" message if it meets all the requirements. # Input The input is a single string `password` which represents the password to be evaluated. # Output Return a specific message based on the password\'s strength: - If the password meets all the criteria, return \\"Strong Password\\". - If the password does not meet each specific criterion, return a message indicating which criteria are missing, separated by commas. For example, if a password does not have an uppercase letter and a special character, the function should return \\"Missing uppercase letter, special character\\". # Example Input: ``` password_strength(\\"WeakP@ss\\") ``` Output: ``` Missing numerical digit ``` Input: ``` password_strength(\\"P@ssw0rd\\") ``` Output: ``` Strong Password ```","solution":"import re def password_strength(password: str) -> str: missing_criteria = [] if len(password) < 8: missing_criteria.append(\\"length\\") if not re.search(r\'[A-Z]\', password): missing_criteria.append(\\"uppercase letter\\") if not re.search(r\'[a-z]\', password): missing_criteria.append(\\"lowercase letter\\") if not re.search(r\'[0-9]\', password): missing_criteria.append(\\"numerical digit\\") if not re.search(r\'[!@#%^&*()-+]\', password): missing_criteria.append(\\"special character\\") if missing_criteria: return \\"Missing \\" + \\", \\".join(missing_criteria) else: return \\"Strong Password\\""},{"question":"Given an array A of size N, the task is to check if the given array is a permutation of the first N natural numbers. Example 1: Input: arr[] = {4, 3, 1, 2}, N = 4 Output: True Explanation: The given array is a permutation of the first 4 natural numbers as it contains all unique numbers from 1 to 4. Example 2: Input: arr[] = {1, 2, 2, 3}, N = 4 Output: False Explanation: The given array is not a permutation of the first 4 natural numbers as it contains duplicate elements and misses the number 4. Your Task: You don\'t need to read input or print anything. Your task is to complete the function isPermutation() which takes the array A[] and its size N as inputs and returns \\"True\\" if the array is a permutation of the first N natural numbers, else returns \\"False\\". Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1 ≤ N ≤ 10^{6} 1 ≤ A_i ≤ 10^{6}","solution":"def isPermutation(arr, N): Checks if the given array is a permutation of the first N natural numbers. Parameters: arr (list of int): the input array N (int): the size of the permutation Returns: bool: True if the array is a permutation of the first N natural numbers, else False if len(arr) != N: return False count = [0] * (N + 1) for num in arr: if num < 1 or num > N or count[num] != 0: return False count[num] += 1 return True"},{"question":"A large company organizes a multi-city marathon event every year in which participants run through a series of towns in a specific order. Each town is connected to exactly two other towns and every runner must begin at one starting town and finish at another ending town, passing through each town exactly once. Given the connections between towns as pairs, you need to find out the starting and ending towns for the marathon route. The towns are labeled with unique integers. # Input - The first line contains a single integer `n` (2 ≤ n ≤ 1000) — the number of towns. - The next `n - 1` lines each contain two integers `a` and `b` (1 ≤ a, b ≤ n) — representing a bidirectional connection between the towns `a` and `b`. # Output - Output two integers `s` and `t`, the labels of the starting town and the ending town for the marathon respectively. # Example Input ``` 5 1 2 2 3 3 4 4 5 ``` Output ``` 1 5 ``` # Note In the example, the towns form a straight line: 1 - 2 - 3 - 4 - 5. Hence, the marathon starts at town 1 and ends at town 5. # Guidelines - The input will form a single straight path (no branching paths). - You are guaranteed that the input will always form a simple path without cycles or branches.","solution":"def find_start_and_end_towns(n, connections): Given the number of towns and their connections, find the starting and ending town. from collections import defaultdict # Use a dictionary to count the degree of each town town_degrees = defaultdict(int) # Count the degree for each town for a, b in connections: town_degrees[a] += 1 town_degrees[b] += 1 start = end = None # Starting and ending towns will have a degree of 1 for town, degree in town_degrees.items(): if degree == 1: if start is None: start = town else: end = town return start, end"},{"question":"An online marketplace for renting vehicles wants to develop an algorithm to suggest the best available cars to a user based on their preferences. The primary factors for selection are the vehicle type, cost per day, and seating capacity. Your task is to implement a function that takes user preferences and the list of available cars, and returns the cars that best match the criteria. If multiple cars match equally well, they should be returned in the order they appear in the input list. # Input The input will consist of multiple lines: 1. The first line contains an integer `n`, the number of cars available for rent. 2. The following `n` lines each contain three pieces of information about a car, separated by spaces: - The vehicle type (a string, one word) - The cost per day (an integer) - The seating capacity (an integer) 3. The next line contains the user\'s preferred vehicle type. 4. The next line contains two integers separated by a space: the preferred maximum cost per day and minimum seating capacity. # Output The output should be the list of cars (each on a new line) that match the user\'s preferences. Each line should contain the details of the car in the same format as provided in the input list. If no cars match the criteria, output \\"No cars available\\". # Examples **Example 1:** **Input:** ``` 5 Sedan 70 3 SUV 100 6 Convertible 150 4 Coupe 80 2 Sedan 60 4 Sedan 80 4 ``` **Output:** ``` Sedan 60 4 ``` **Example 2:** **Input:** ``` 3 Truck 120 2 SUV 110 5 Van 90 7 SUV 100 4 ``` **Output:** ``` No cars available ``` # Notes - The first example should output the details of the Sedan whose rent cost is less than or equal to 80 and has at least 4 seats. - The second example indicates there is no SUV available for rent that fits both the cost and seating capacity preferences. - For sorting and comparison purposes, all string comparisons are case-sensitive. Implement this function in a programming language of your choice, ensuring it reads from standard input and writes to standard output.","solution":"def suggest_cars(n, cars, preferred_type, max_cost, min_seating): suitable_cars = [ f\\"{car[0]} {car[1]} {car[2]}\\" for car in cars if car[0] == preferred_type and car[1] <= max_cost and car[2] >= min_seating ] if suitable_cars: return suitable_cars else: return [\\"No cars available\\"] # Parsing input for demonstration, this part would typically be outside of function definitions def parse_input(input_string): lines = input_string.strip().split(\\"n\\") n = int(lines[0]) cars = [] for i in range(1, n + 1): type_, cost, seating = lines[i].split() cars.append((type_, int(cost), int(seating))) preferred_type = lines[n + 1] max_cost, min_seating = map(int, lines[n + 2].split()) return n, cars, preferred_type, max_cost, min_seating # Example usage: input_data = 5 Sedan 70 3 SUV 100 6 Convertible 150 4 Coupe 80 2 Sedan 60 4 Sedan 80 4 n, cars, preferred_type, max_cost, min_seating = parse_input(input_data) print(suggest_cars(n, cars, preferred_type, max_cost, min_seating))"},{"question":"You are responsible for hosting a party and want to arrange a specific game for the attendees. You have a bunch of red and blue balloons that you want to use in the game. The game proceeds in rounds. In each round, you can remove one balloon of either color, but you must alternate the color of the balloons you remove. For example, if you remove a red balloon in one round, you must remove a blue balloon in the next round. The game continues until you cannot remove a balloon of the required color to maintain the alteration. Given the initial number of red and blue balloons, determine the maximum number of rounds the game can last. -----Input----- The input consists of a single line containing two integers r and b (0 le r, b le 100) — the initial number of red and blue balloons, respectively. -----Output----- Output a single integer — the maximum number of rounds the game can last. -----Example----- Input 3 5 Output 7 -----Note----- In the first example, the game can last for a total of 7 rounds: remove 3 red balloons and 4 blue balloons alternately.","solution":"def max_rounds(r, b): return min(r, b) * 2 + (1 if abs(r - b) > 0 else 0)"},{"question":"David is planning a hiking trip and wants to calculate the total distance he and his friends will cover. They have planned a specific route for each day, and they want to ensure they log the total distance hiked over several days. Given the number of days and the distance to be hiked each day, can you determine the total distance that will be covered by the end of the trip? Input Format The first line contains the number of test cases T, and T lines follow. Each line contains an integer D, the number of days, followed by D space-separated integers representing the distance (in kilometers) planned for each day. Output Format Print the total distance for each test case in a new line. Constraints 1 ≤ T ≤ 100 1 ≤ D ≤ 100 0 ≤ distance ≤ 1000 SAMPLE INPUT 2 3 10 20 30 2 5 15 SAMPLE OUTPUT 60 20 Explanation Case 1: The total distance for the 3-day trip is 10 + 20 + 30 = 60 km. Case 2: The total distance for the 2-day trip is 5 + 15 = 20 km.","solution":"def total_distance_covered(test_cases): Given the number of test cases each followed by the number of days and distances hiked each day, calculate the total distance covered for each test case. Parameters: test_cases (list of tuples): Each tuple contains the number of days and the distances for those days. Returns: list: A list containing the total distance for each test case. total_distances = [] for case in test_cases: D, *distances = case total_distance = sum(distances) total_distances.append(total_distance) return total_distances # Example usage: # test_cases = [(3, 10, 20, 30), (2, 5, 15)] # result = total_distance_covered(test_cases) # print(result) # Output should be [60, 20]"},{"question":"Alice loves playing with numbers. She particularly enjoys finding patterns in sequences of numbers. Recently, she has become fascinated by the concept of \\"peak elements\\" in an array. A peak element is an element that is greater than its neighbors. She decides to write a program to identify the first peak element in an array of integers. Your task is to help Alice by writing a function that takes an array of integers and returns the first peak element. If there are multiple peak elements, return the first one. If no peak element exists, return -1. Input: - The first line contains an integer N, the size of the array. - The second line contains N space-separated integers representing the elements of the array. Output: - Print the first peak element in the array. If there is no peak element, print -1. Constraints: 1 ≤ N ≤ 100 -10^4 ≤ array elements ≤ 10^4 Note: - The first or the last element of the array can also be a peak element if it is greater than its one neighbor. SAMPLE INPUT 6 1 3 20 4 1 0 SAMPLE OUTPUT 20 Explanation In the given input array, 20 is the first peak element as it is greater than both of its neighbors 3 and 4.","solution":"def first_peak_element(arr): Finds the first peak element in the array. A peak element is an element that is greater than its neighbors. n = len(arr) if n == 1: return arr[0] if n > 1 and arr[0] > arr[1]: return arr[0] if n > 1 and arr[n-1] > arr[n-2]: return arr[n-1] for i in range(1, n-1): if arr[i] > arr[i-1] and arr[i] > arr[i+1]: return arr[i] return -1"},{"question":"Captain Earth\'s Defense Force needs to communicate with starships using a binary encoding system. Each message sent to the starships requires a checksum verification to ensure that the data is not corrupted during transmission. The checksum is calculated by XOR-ing all the bits of the binary message. A binary message consists of an array of bits (0s and 1s). The Defense Force needs your help in finding out the checksum for different sets of binary messages they plan to send. Your task is to write a program that calculates the checksum for any given binary message. The checksum of a binary message is defined as the XOR of all the bits in the message. For example, if the message is `1101`, the checksum would be `1 XOR 1 XOR 0 XOR 1` which is equal to `1`. # Constraints: - The length of the binary message (n) will be between 1 and 100, inclusive. # Input: The input consists of multiple test cases. - The first line of the input contains an integer t (1 ≤ t ≤ 100), the number of test cases. - Each of the next t lines describes a binary message which is a string of bits (\'0\' or \'1\'). # Output: For each test case, output the checksum of the binary message. # Example: Input: ``` 3 1101 1001 11111111 ``` Output: ``` 1 0 0 ``` # Explanation: - In the first test case, `1101` has a checksum of `1 XOR 1 XOR 0 XOR 1 = 1` - In the second test case, `1001` has a checksum of `1 XOR 0 XOR 0 XOR 1 = 0` - In the third test case, `11111111` has a checksum of `1 XOR 1 XOR 1 XOR 1 XOR 1 XOR 1 XOR 1 XOR 1 = 0`","solution":"def calculate_checksum(binary_message): Calculate the checksum of a binary message by XOR-ing all bits. Args: binary_message (str): A string of bits (\'0\' or \'1\') Returns: int: The checksum (0 or 1) checksum = 0 for bit in binary_message: checksum ^= int(bit) return checksum def process_test_cases(test_cases): Process multiple test cases and calculate checksums for each binary message. Args: test_cases (list): List of binary messages (str) Returns: list: List of checksums checksums = [] for binary_message in test_cases: checksums.append(calculate_checksum(binary_message)) return checksums if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().strip().split() t = int(data[0]) test_cases = data[1:t + 1] result = process_test_cases(test_cases) for checksum in result: print(checksum)"},{"question":"Given a number and a list of numbers, determine whether the first number exists in the list and, if so, at what index. Example 1: Input: number = 34 list_numbers = [10, 20, 34, 45, 56] Output: 34 is at index 2. Explanation: Since 34 is present in the list at index 2. So we print 34 is at index 2. Example 2: Input: number = 100 list_numbers = [10, 20, 34, 45, 56] Output: 100 is not in the list. Explanation: Since 100 is not present in the list. So we print 100 is not in the list. Your Task: You don\'t need to read inputs. Your task is to complete the function findNumberInList() which takes an integer \'number\' and a list of integers \'list_numbers\'. The function should: - Print \\"{number} is at index {index}\\" without quotes if the number is found in the list at the index \'index\'. - Print \\"{number} is not in the list\\" without quotes if the number is not found in the list. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1) Constraints: 1 <= number, list_numbers[i] <= 10^9 1 <= len(list_numbers) <= 10^6","solution":"def findNumberInList(number, list_numbers): Determines if the number is in the list_numbers and at what index. Args: number: int - A number to search in the list. list_numbers: list - A list of integers in which the search is conducted. Prints: str: \\"{number} is at index {index}\\" if the number is found at that index. str: \\"{number} is not in the list\\" if the number is not found in the list. if number in list_numbers: index = list_numbers.index(number) print(f\\"{number} is at index {index}\\") else: print(f\\"{number} is not in the list\\")"},{"question":"Students in a school are arranged in a line for a drill exercise, each having a height represented by an integer. After each drill session, the instructors swap the positions of two students. The instructors wish to validate if the students can be arranged in strictly increasing order of their heights by making at most one swap of any two students in the sequence. Write a function that determines if it’s possible to arrange the students in strictly increasing order by performing at most one swap. More formally, given a list of integers representing the heights of students, return `true` if they can be sorted in strictly increasing order with at most one swap, otherwise return `false`. -----Input----- - The input is a list of integers `heights` where 1 ≤ len(heights) ≤ 10^5 and 1 ≤ heights[i] ≤ 10^9 for 0 ≤ i < len(heights). -----Output----- - Output a boolean value (`true` or `false`) indicating whether the heights can be sorted in strictly increasing order with at most one swap. -----Examples----- Input [1, 5, 3, 4, 2] Output true Input [4, 3, 2, 1] Output false","solution":"def can_be_sorted_by_one_swap(heights): Returns True if the list heights can be sorted in strictly increasing order by performing at most one swap, otherwise returns False. def is_sorted(lst): return all(lst[i] < lst[i+1] for i in range(len(lst)-1)) n = len(heights) if n <= 1: return True # Find the first pair of elements that are out of order first = second = -1 for i in range(n - 1): if heights[i] > heights[i + 1]: if first == -1: first = i elif second == -1: second = i + 1 if first == -1: # Already sorted return True if second == -1: # Only one pair out of order second = first + 1 # Swap the two out of order elements and check if the list becomes sorted heights[first], heights[second] = heights[second], heights[first] result = is_sorted(heights) # Swap back to restore original list heights[first], heights[second] = heights[second], heights[first] return result"},{"question":"Sophie has a list of N integers and an integer D. She needs to find the number of pairs (i, j) (1 ≤ i < j ≤ N) such that the absolute difference between the elements at these indices is exactly D. Formally, for a given list `L` of length N and an integer D, we need to find the number of pairs (i, j) such that: |L[i] - L[j]| = D ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case consists of multiple lines of input. - The first line of each test case contains two space-separated integers N and D — the length of the list and the integer D as defined in statement, respectively. - The second line contains N space-separated integers representing the list L. ------ Output Format ------ For each test case, output a single integer representing the number of pairs (i, j) such that the absolute difference between the elements at these indices is exactly D. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^5 0 ≤ D ≤ 10^9 -10^9 ≤ L[i] ≤ 10^9 - The sum of N over all test cases won\'t exceed 2 cdot 10^5 ------ Sample Input 1 ------ 2 5 2 1 5 3 4 2 3 0 1 1 1 ------ Sample Output 1 ------ 3 3 ------ Explanation 1 ------ Test case 1: We have the pairs (1, 3), (3, 2), and (4, 5) in the list, where the absolute difference is exactly 2. - |1 - 3| = 2 - |5 - 3| = 2 - |4 - 2| = 2 Therefore, the output for this test case is 3. Test case 2: All pairs of indices (i, j) will result in an absolute difference of 0 since all elements are the same. - |1 - 1| = 0 - |1 - 1| = 0 - |1 - 1| = 0 Therefore, the output for this test case is 3.","solution":"def count_pairs_with_difference(T, cases): results = [] for i in range(T): N, D = cases[i][:2] L = cases[i][2] count = 0 value_count = {} for num in L: if num + D in value_count: count += value_count[num + D] if num - D in value_count and D != 0: count += value_count[num - D] if num in value_count: value_count[num] += 1 else: value_count[num] = 1 results.append(count) return results"},{"question":"Given a string, Geek wants to determine if the string can be converted to a palindrome by rearranging its characters. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Example 1: Input: s = \\"civic\\" Output: \\"YES\\" Explanation: The string \\"civic\\" is already a palindrome. Example 2: Input: s = \\"ivicc\\" Output: \\"YES\\" Explanation: The string \\"ivicc\\" can be rearranged to \\"civic\\", which is a palindrome. Example 3: Input: s = \\"hello\\" Output: \\"NO\\" Explanation: The string \\"hello\\" cannot be rearranged to form a palindrome. Constraints: 1 <= s.length <= 1000 Your Task: You don\'t need to read input or print anything. Your task is to complete the function canFormPalindrome() which takes the string s as input and returns \\"YES\\" if the string can be rearranged to form a palindrome, otherwise returns \\"NO\\". Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def canFormPalindrome(s): Determines if the string can be rearranged to form a palindrome. from collections import Counter char_count = Counter(s) odd_count = sum(1 for count in char_count.values() if count % 2 != 0) return \\"YES\\" if odd_count <= 1 else \\"NO\\""},{"question":"Create a program that simulates a system to monitor and find the largest group of connected devices in a network. Each device is represented as a node in a graph, and each connection between two devices as an edge. Your task is to implement a function that reads a list of edges representing the connections and outputs the size of the largest group of connected devices. A group of connected devices is defined as a set of nodes that are all reachable from each other. Input Format: The first line contains an integer n, the number of edges. The following n lines each contain two integers u and v, representing an edge between nodes u and v. Output Format: Output a single integer representing the size of the largest group of connected devices. Example: Input: 6 1 2 2 3 3 4 5 6 6 7 8 8 Output: 4 Explanation: The largest group of connected devices is formed by nodes 1, 2, 3, and 4. Thus, the output is 4.","solution":"def largest_connected_component(n, edges): from collections import defaultdict, deque def bfs(node, visited, graph): queue = deque([node]) visited.add(node) size = 0 while queue: current = queue.popleft() size += 1 for neighbor in graph[current]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) return size # Create adjacency list for the graph graph = defaultdict(list) for u, v in edges: graph[u].append(v) graph[v].append(u) visited = set() max_size = 0 for node in graph: if node not in visited: component_size = bfs(node, visited, graph) max_size = max(max_size, component_size) return max_size"},{"question":"A robot starts at position (0, 0) on an infinite 2D grid. It can receive instructions to move in any of the four cardinal directions (\'L\' for left, \'R\' for right, \'U\' for up, and \'D\' for down). Each instruction moves the robot exactly one unit in the specified direction. Your task is to determine whether a given sequence of instructions will cause the robot to return to its starting position. For example, given the sequence \\"LR\\", the robot moves left and then right, returning to (0, 0). Given the sequence \\"URURD\\", the robot ends at (0, 2) and does not return to the start. Write a function that takes a string of instructions and returns `True` if the robot returns to the starting position after executing the instructions, and `False` otherwise. -----Function Signature----- def return_to_start(instructions: str) -> bool: -----Input----- - A single line string `instructions` consisting of the characters \'L\', \'R\', \'U\', \'D\' (1 ≤ len(instructions) ≤ 10^5). -----Output----- - Return `True` if the robot returns to its starting position after executing the instructions, and `False` otherwise. -----Examples----- **Example 1:** Input: \\"LR\\" Output: True Explanation: The robot moves left, then right, and returns to the starting position. **Example 2:** Input: \\"URURD\\" Output: False Explanation: The robot ends at position (0, 2), not at the starting position. **Example 3:** Input: \\"LUDR\\" Output: True Explanation: The robot moves left, up, down, and right, and returns to the starting position. **Constraints:** - The input string will only contain the characters \'L\', \'R\', \'U\', and \'D\'.","solution":"def return_to_start(instructions: str) -> bool: Determines whether the robot returns to the starting position after executing a sequence of instructions. Args: instructions (str): A string consisting of the characters \'L\', \'R\', \'U\', \'D\' Returns: bool: True if the robot returns to the starting position, False otherwise. x, y = 0, 0 for instr in instructions: if instr == \'L\': x -= 1 elif instr == \'R\': x += 1 elif instr == \'U\': y += 1 elif instr == \'D\': y -= 1 return x == 0 and y == 0"},{"question":"Given a string \'s\' and a list of words \'words\' (each of which has the same length), return all starting indices of substring(s) in \'s\' which concatenates all words in \'words\' exactly once and without any intervening characters. Example: findSubstring \\"barfoothefoobarman\\" [\\"foo\\",\\"bar\\"] should return [0, 9], because: - At index 0: “barfoo” is a substring that is a concatenation of “bar” and “foo”. - At index 9: “foobar” is a substring that is a concatenation of “foo” and “bar”. The words in \\"words\\" may be used only once, and order does not matter. The returned list should be sorted in ascending order of the starting indices. If no such substring exists, return an empty list.","solution":"def findSubstring(s, words): from collections import Counter if not s or not words: return [] word_len = len(words[0]) total_len = word_len * len(words) word_count = Counter(words) result = [] for i in range(len(s) - total_len + 1): seen_words = {} for j in range(len(words)): start_index = i + j * word_len word = s[start_index:start_index + word_len] if word in word_count: if word in seen_words: seen_words[word] += 1 else: seen_words[word] = 1 if seen_words[word] > word_count[word]: break else: break else: result.append(i) return result"},{"question":"There is a frog who wants to cross a river. The river is represented as an array of non-negative integers where each element in the array represents the maximum jump length from that position. The frog starts at the first element of the array and its goal is to reach the last element in the minimum number of jumps. The frog can only move forward in the array. Write a function to determine the minimum number of jumps required for the frog to reach the last element. If it\'s not possible for the frog to reach the last element, return -1. Input The input consists of a single integer array nums, representing the river stones and their maximum jump lengths. The length of the array is between 1 and 10^4, and each element of the array is between 0 and 10^4. Output A single integer representing the minimum number of jumps required to reach the last element, or -1 if it\'s not possible. Examples Input [2, 3, 1, 1, 4] Output 2 Explanation The frog can jump from index 0 to index 1, then from index 1 to the end. Input [3, 2, 1, 0, 4] Output -1 Explanation The frog cannot reach the last index because it gets stuck at index 3.","solution":"def min_jumps(rocks): n = len(rocks) if n <= 1: return 0 max_reach = steps = jumps = 0 for i in range(n): if i > max_reach: return -1 max_reach = max(max_reach, i + rocks[i]) if i == steps: jumps += 1 steps = max_reach if steps >= n - 1: return jumps return -1"},{"question":"A large city consists of a network of streets that forms a grid with N rows and M columns. Each cell in the grid represents a building. Due to a recent incident, certain buildings are marked as dangerous. A building is identified by its coordinate (i, j) where 1 ≤ i ≤ N and 1 ≤ j ≤ M. The city\'s road network is such that one can only travel up, down, left, or right between adjacent buildings (no diagonal movements are allowed). You are currently located at the top-left building (1, 1) and need to reach the bottom-right building (N, M). However, to ensure your safety, you can only pass through buildings that are not marked as dangerous. Determine the minimum number of steps required to travel from (1, 1) to (N, M), or indicate if it is not possible to reach the destination safely. Input: The first line contains an integer T, the number of test cases. Each test case starts with two space-separated integers N and M, denoting the dimensions of the grid. The next line contains an integer K, the number of dangerous buildings. The following K lines each contain two space-separated integers x and y, the coordinates of the dangerous buildings. Output: For each test case, print the minimum number of steps required, or -1 if it\'s not possible to reach the bottom-right building from the top-left. Constraints: 1 ≤ T ≤ 10 1 ≤ N, M ≤ 1000 0 ≤ K ≤ N * M 1 ≤ x ≤ N 1 ≤ y ≤ M SAMPLE INPUT 2 3 3 1 2 2 4 4 2 2 2 3 3 SAMPLE OUTPUT 4 6","solution":"from collections import deque def min_steps_to_reach(N, M, K, dangerous_buildings): # Create a grid and mark dangerous buildings grid = [[0]*M for _ in range(N)] for x, y in dangerous_buildings: grid[x-1][y-1] = -1 # Mark dangerous building as -1 # Directions for moving in the grid (right, down, left, up) directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # Initialize BFS queue = deque([(0, 0)]) grid[0][0] = 1 # Mark start as visited with step count 1 while queue: x, y = queue.popleft() if (x, y) == (N-1, M-1): return grid[x][y] - 1 # Subtract the initial step, calculate total steps for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < M and grid[nx][ny] == 0: grid[nx][ny] = grid[x][y] + 1 queue.append((nx, ny)) return -1 # If no path found def process_test_cases(T, test_cases): results = [] for N, M, K, dangerous_buildings in test_cases: result = min_steps_to_reach(N, M, K, dangerous_buildings) results.append(result) return results # This function wraps the entire process from input to output def main(): T = int(input()) test_cases = [] for _ in range(T): N, M = map(int, input().split()) K = int(input()) dangerous_buildings = [tuple(map(int, input().split())) for _ in range(K)] test_cases.append((N, M, K, dangerous_buildings)) results = process_test_cases(T, test_cases) for result in results: print(result) # Example of how the main function operates. Uncomment to run in a local environment. # if __name__ == \\"__main__\\": # main()"},{"question":"Problem: Nina loves playing with numbers, especially prime numbers. One day, she decided to play a game where she picks any number and checks if any arrangement of its digits is a prime number. Input: The first line contains an integer T, the number of test cases. The next T lines contain an integer N. Output: For each test case, print \\"YES\\" if any permutation of the digits of N is a prime number, else print \\"NO\\". Constraints: 1 ≤ T ≤ 100 1 ≤ N ≤ 10^6 The input number will not have any leading zeros. Note: - A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. - Consider all permutations of the given number’s digits for checking primality. SAMPLE INPUT 3 13 31 245 SAMPLE OUTPUT YES YES NO","solution":"from itertools import permutations def is_prime(n): Check if a number is a prime number. if n <= 1: return False if n == 2: return True if n % 2 == 0: return False p = 3 while p * p <= n: if n % p == 0: return False p += 2 return True def any_prime_permutation(num): Check if any permutation of the digits of num is a prime number. digits = str(num) perms = {int(\'\'.join(p)) for p in permutations(digits)} for perm in perms: if is_prime(perm): return \\"YES\\" return \\"NO\\" def process_test_cases(t, test_cases): results = [] for case in test_cases: results.append(any_prime_permutation(case)) return results"},{"question":"Create a function that takes a string containing a sentence and returns the sentence with each word\'s first letter capitalized and the rest in lowercase. However, if a word contains any numerical digits, it should remain unchanged. Make sure to handle punctuation marks appropriately so they don\'t interfere with the capitalization of words. The function should ignore extra spaces at the beginning or end of the sentence and treat multiple spaces between words as a single space. Example: ``` Input: \\" hello world! 123abC is a 45great PLACE. \\" Output: \\"Hello World! 123abC Is A 45great Place.\\" ``` Complete the function to achieve this transformation.","solution":"def capitalize_sentence(sentence): Takes a sentence and returns it with each word\'s first letter capitalized and the rest in lowercase, ignoring words with numerical digits. import re sentence = re.sub(r\'s+\', \' \', sentence.strip()) words = sentence.split(\' \') result = [] for word in words: if any(char.isdigit() for char in word): result.append(word) else: result.append(word.capitalize()) return \' \'.join(result)"},{"question":"In a city, there is a grid of streets with buildings represented as a 2D matrix. Each cell in the matrix represents a block, and the value in each cell indicates the height of the building at that block. A person is standing at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner (N-1, N-1). The person can move right or down to an adjacent block, but they can only move to a block with the same height or one level higher than the current block. Write a program to determine if it\'s possible for the person to reach the bottom-right corner from the top-left corner under the given conditions. # Input Format - The first line contains an integer T, the number of test cases. - Each test case starts with an integer N, the size of the grid. - The next N lines contain N space-separated integers, representing the heights of the buildings in the grid. # Output Format For each test case, print \\"YES\\" if it\'s possible to reach the bottom-right corner, otherwise print \\"NO\\". # Constraints 1 leq T leq 10 2 leq N leq 500 0 leq text{height of buildings} leq 10^6 # Sample Input ``` 3 3 1 2 4 2 3 5 6 5 4 4 1 1 1 1 1 2 2 1 1 2 2 1 1 1 1 1 2 3 1 2 2 ``` # Sample Output ``` NO YES NO ```","solution":"def can_reach_bottom_right(grid): N = len(grid) directions = [(0, 1), (1, 0)] # right and down # Using BFS to find if the path exists from collections import deque queue = deque([(0, 0)]) visited = set((0, 0)) while queue: x, y = queue.popleft() if (x, y) == (N-1, N-1): return True for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited: if grid[nx][ny] >= grid[x][y] and grid[nx][ny] <= grid[x][y] + 1: visited.add((nx, ny)) queue.append((nx, ny)) return False def process_test_cases(T, test_cases): results = [] for i in range(T): grid = test_cases[i] result = can_reach_bottom_right(grid) if result: results.append(\\"YES\\") else: results.append(\\"NO\\") return results"},{"question":"You are given a sequence of integers of length n. You can perform the following operation any number of times (including zero): - Pick any two elements of the sequence and replace them with their sum. Your task is to find the maximum possible value of any integer in the sequence after any number of operations. -----Input----- The first line of the input contains an integer n (2 le n le 10^5) — the length of the sequence. The second line of the input contains n integers a_1, a_2, ..., a_n (1 le a_i le 10^9) — the elements of the sequence. -----Output----- Print a single integer — the maximum possible value of any integer in the sequence after any number of operations. -----Example----- Input 3 1 2 3 Output 6 Input 4 2 2 2 2 Output 8 Note: In the first example, you can add 1 and 2 to get 3, then add 3 and 3 to get 6. In the second example, you can add two 2s to get 4, then add two 4s to get 8.","solution":"def max_possible_value(n, arr): Returns the maximum possible value of any integer in the sequence after any number of operations. Parameters: n (int): The length of the sequence. arr (list): The sequence of integers. Returns: int: The maximum possible value of any integer in the sequence. return sum(arr)"},{"question":"Task **_Given_** *a string containing only alphabetic characters (both uppercase and lowercase) and spaces*, **_Reverse the order of words in the string_** while **_maintaining the order of characters within each word_**. ____ # Notes * **_String_** will contain at least one word and the words are separated by single spaces. * **_The reversed string should not have leading or trailing spaces_**. * **_Pay attention to the case of characters_**. ___ # Input >> Output Examples ``` reverseWords(\\"Hello World\\") ==> return \\"World Hello\\" ``` **_Explanation_**: * The words \\"Hello\\" and \\"World\\" are reversed in their order, but the characters within each word are not reversed. ___ ``` reverseWords(\\"Coding is fun\\") ==> return \\"fun is Coding\\" ``` **_Explanation_**: * The words \\"Coding\\", \\"is\\", and \\"fun\\" are reversed in their order. ___ ``` reverseWords(\\"Keep calm and code on\\") ==> return \\"on code and calm Keep\\" ``` **_Explanation_**: * The words \\"Keep\\", \\"calm\\", \\"and\\", \\"code\\", and \\"on\\" are reversed in their order while preserving the characters within each word. ___ ALL translations are welcomed Enjoy Learning !!","solution":"def reverseWords(s): This function takes a string containing alphabetic characters and spaces, and returns a new string with the order of words reversed but the order of characters within each word maintained. Args: s (str): input string containing alphabetic characters and spaces. Returns: str: the string with the order of words reversed. words = s.split() reversed_words = words[::-1] return \' \'.join(reversed_words)"},{"question":"A group of friends is planning a hiking trip, and they\'re trying to determine the best way to allocate the weight of their supplies. They each have a maximum weight they can carry, and they want to distribute the supplies such that the load is as balanced as possible. Given the weights of individual supplies and the maximum capacity each friend can carry, you need to determine if it\'s possible to distribute the supplies without exceeding any friend\'s carrying capacity. Write a program that helps them figure this out. Input The first line of input contains T, the number of test cases. The first line of each test case contains two integers N and K, where N is the number of supplies, and K is the number of friends. The second line of each test case contains N integers, indicating the weight of each supply. The third line of each test case contains K integers, indicating the carrying capacity of each friend. Output For each test case, output \\"Possible\\" if the supplies can be distributed within the given constraints, otherwise output \\"Not Possible\\". Constraints 1 ≤ T ≤ 100 1 ≤ N, K ≤ 100 1 ≤ weight of each supply ≤ 1000 1 ≤ carrying capacity of each friend ≤ 1000 Example Input: 2 3 2 5 10 15 20 20 4 3 8 5 7 14 10 10 10 Output: Possible Not Possible Explanation: In the first test case, the supplies can be distributed as [5, 15] to the first friend and [10] to the second friend. In the second test case, it is not possible to distribute the supplies without exceeding the carrying capacity of the friends.","solution":"def can_distribute_supplies(T, test_cases): results = [] for i in range(T): N, K = test_cases[i][0] supplies = sorted(test_cases[i][1], reverse=True) capacities = sorted(test_cases[i][2], reverse=True) if sum(supplies) > sum(capacities): results.append(\\"Not Possible\\") continue can_distribute = True for supply in supplies: placed = False for j in range(len(capacities)): if supply <= capacities[j]: capacities[j] -= supply placed = True break if not placed: can_distribute = False break results.append(\\"Possible\\" if can_distribute else \\"Not Possible\\") return results"},{"question":"Given an array of integers, perform the following operations based on a series of queries: 1 x y: Add y to the value at index x. 2 l r k: Return the kth smallest element in the subarray from index l to index r, inclusive. Input Format: - The first line contains two space-separated integers n and q, the initial size of the array and the number of queries, respectively. - The second line contains n space-separated integers, the elements of the initial array. - The next q lines each contain a query in one of the two specified formats. Constraints: 1 ≤ n ≤ 10^5 1 ≤ q ≤ 10^5 0 ≤ x < n 0 ≤ l ≤ r < n 1 ≤ k ≤ (r - l + 1) -10^9 ≤ array elements, y ≤ 10^9 Output Format: For each query of type 2, output the kth smallest element in the subarray on a new line. Sample Input: 6 5 3 2 5 1 6 4 2 0 5 3 1 3 3 2 1 4 2 1 5 -1 2 0 5 4 Sample Output: 3 3 4 Explanation: The initial array is [3, 2, 5, 1, 6, 4]. 1. For the query \\"2 0 5 3\\": The subarray is [3, 2, 5, 1, 6, 4]. The sorted subarray is [1, 2, 3, 4, 5, 6], and the 3rd smallest element is 3. 2. For the query \\"1 3 3\\": Update the value at index 3 by adding 3. The array becomes [3, 2, 5, 4, 6, 4]. 3. For the query \\"2 1 4 2\\": The subarray is [2, 5, 4, 6]. The sorted subarray is [2, 4, 5, 6], and the 2nd smallest element is 4. 4. For the query \\"1 5 -1\\": Update the value at index 5 by subtracting 1. The array becomes [3, 2, 5, 4, 6, 3]. 5. For the query \\"2 0 5 4\\": The subarray is [3, 2, 5, 4, 6, 3]. The sorted subarray is [2, 3, 3, 4, 5, 6], and the 4th smallest element is 4.","solution":"def process_queries(n, q, array, queries): results = [] for query in queries: parts = query.split() if parts[0] == \'1\': x = int(parts[1]) y = int(parts[2]) array[x] += y elif parts[0] == \'2\': l = int(parts[1]) r = int(parts[2]) k = int(parts[3]) subarray = array[l:r+1] subarray.sort() results.append(subarray[k - 1]) return results"},{"question":"The resistance group has captured an alien device which is able to analyze patterns in strings. They have discovered that the device can identify distinct substrings within a given string. However, the device starts to malfunction if there are too many distinct substrings to analyze. For a given string, your task is to determine the number of distinct substrings it contains and determine if the device will malfunction. The device malfunctions if the number of distinct substrings exceeds a certain limit. Input: - The first line of the input contains t, the number of test cases. - The first line of each test case contains a single integer, l, which represents the upper limit of distinct substrings the device can handle without malfunctioning. - The second line of each test case contains a single string s. Output: - For each test case, output \\"NO MALFUNCTION\\" if the number of distinct substrings in the string s is less than or equal to l. - Output \\"MALFUNCTION\\" if the number of distinct substrings in the string s exceeds l. Constraints: 1 ≤ t ≤ 10 1 ≤ l ≤ 100000 1 ≤ |s| ≤ 100000 Note: The sum of the lengths of all strings in a single input does not exceed 1000000. SAMPLE INPUT 2 10 abc 5 ababa SAMPLE OUTPUT NO MALFUNCTION MALFUNCTION Explanation: For the string \\"abc\\", the distinct substrings are: \\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"bc\\", \\"abc\\" -> Total = 6, which is ≤ 10, hence \\"NO MALFUNCTION\\". For the string \\"ababa\\", the distinct substrings are: \\"a\\", \\"b\\", \\"ab\\", \\"ba\\", \\"aba\\", \\"bab\\", \\"abab\\" -> Total = 7, which is > 5, hence \\"MALFUNCTION\\".","solution":"def distinct_substrings_count(s): Returns the number of distinct substrings in the given string s. n = len(s) substrings = set() for i in range(n): for j in range(i + 1, n + 1): substrings.add(s[i:j]) return len(substrings) def malfunction_check(t, limits_and_strings): Returns a list of results (\\"NO MALFUNCTION\\" or \\"MALFUNCTION\\") for each test case. results = [] for l, s in limits_and_strings: distinct_count = distinct_substrings_count(s) if distinct_count > l: results.append(\\"MALFUNCTION\\") else: results.append(\\"NO MALFUNCTION\\") return results"},{"question":"Two strings, `a` and `b`, are called \\"cyclic permutations\\" of each other if one can be transformed into another by rotating the characters of the string. For example, \\"abc\\" and \\"cab\\" are cyclic permutations because \\"abc\\" can be rotated to \\"cab\\". Given two strings, write a function to check if they are cyclic permutations of each other. -----Input----- The input consists of two lines. The first line contains the string `a` and the second line contains the string `b`. Each string is non-empty and consists of lowercase latin letters only. -----Output----- Print \\"YES\\" if the two strings are cyclic permutations of each other. Otherwise, print \\"NO\\". -----Example----- Input abc cab Output YES Input abc def Output NO -----Note----- To check if two strings are cyclic permutations of each other, you can concatenate the first string to itself and check if the second string is a substring of this concatenated string. For instance, \\"abcabc\\" contains \\"cab\\" as a substring but \\"abcabc\\" does not contain \\"acd\\" as a substring.","solution":"def are_cyclic_permutations(a, b): Returns \\"YES\\" if strings a and b are cyclic permutations of each other, otherwise \\"NO\\". if len(a) != len(b): return \\"NO\\" concatenated_a = a + a if b in concatenated_a: return \\"YES\\" else: return \\"NO\\""},{"question":"Alice loves collecting stamps, and she has a collection of several different types of stamps. She wants to organize her stamps such that each type of stamp is in its own separate album. Each album can only contain one type of stamp, but there is no limit to the number of stamps that can be in each album. However, Alice has limited space, so she wants to use the minimum number of albums necessary to organize her collection. Given an array S of length N where each element represents the type of stamp (using unique positive integers) that she owns, help Alice determine the minimum number of albums she needs. Input Format: The first line contains an integer N, which represents the number of stamps. The next line contains N integers, s_1, s_2, ..., s_N, where each integer represents the type of the corresponding stamp. Output Format: An integer representing the minimum number of albums needed to organize the stamps. Constraints: 1 ≤ N ≤ 10^5 1 ≤ s_i ≤ 10^4, where i ∈ [1, N] SAMPLE INPUT 6 2 3 2 5 3 2 SAMPLE OUTPUT 3 Explanation: Alice has 3 types of stamps: 2, 3, and 5. Therefore, she needs 3 separate albums to store each type of stamp.","solution":"def min_number_of_albums(N, stamps): Determine the minimum number of albums needed to organize the stamps collection. Parameters: N: int - the number of stamps. stamps: List[int] - a list of integer types of stamps. Returns: int - the minimum number of albums needed. return len(set(stamps))"},{"question":"Write a function that takes an array of integers and a target sum as inputs. The function should return a pair of numbers from the array that add up to the target sum. If no such pair exists, return an empty array. Ensure the solution has a time complexity better than O(n^2). **Example:** ```python def find_pair(arr, target): # Your code here # Example usage: arr = [2, 7, 11, 15] target = 9 print(find_pair(arr, target)) # Output: [2, 7] arr = [1, 2, 3, 4] target = 8 print(find_pair(arr, target)) # Output: [] arr = [3, 3, 4, 5] target = 6 print(find_pair(arr, target)) # Output: [3, 3] ``` **Constraints:** - The array contains only integers. - Each input array may contain any length, including zero. - The target sum is a non-negative integer.","solution":"def find_pair(arr, target): Finds a pair of numbers in the array that add up to the target sum. Parameters: arr (list of int): The list of integers to search through. target (int): The target sum. Returns: list of int: A pair of numbers that add up to the target sum or an empty list if no such pair exists. nums_seen = {} for num in arr: complement = target - num if complement in nums_seen: return [complement, num] nums_seen[num] = True return []"},{"question":"Alice is a puzzle enthusiast who loves brain teasers involving word formation. Recently, she came across a riddle that involves combining puzzle pieces to form the longest palindrome possible. Alice has n puzzle pieces, where each piece is a lowercase English alphabet string. She can combine any two puzzle pieces to create a new string by concatenating them. Alice\'s goal is to find a combination of up to two puzzle pieces that, when concatenated, form the longest possible palindrome. Help Alice determine the maximum length of the palindrome that can be formed and the indices of the puzzle pieces she should use. -----Input----- The first line contains the integer n (1 ≤ n ≤ 10^5). The following n lines each contain a string s_i (1 ≤ |s_i| ≤ 100), representing the puzzle pieces. The strings consist of lowercase English letters. -----Output----- In the first line, print a single integer representing the maximum length of the palindrome that can be formed. In the second line, print either one or two distinct indices (1 through n) corresponding to the puzzle pieces that result in the longest palindrome. If multiple solutions exist, print any one of them. If no palindrome can be formed, print a single integer 0 on the first line and leave the second line empty. -----Examples----- Input 5 madam racecar hello level world Output 2 1 Input 4 a ab ba civic Output 5 4 In the first example, the puzzle pieces \\"madam\\" and \\"racecar\\" are already palindromes of length 5 and 7 respectively. Therefore, the maximum palindrome length is 7. In the second example, concatenating the pieces \\"civic\\" (index 4) by itself results in the longest palindrome of length 5. Alternatively, the pieces \\"ab\\" (index 2) and \\"ba\\" (index 3) can be concatenated to form \\"abba,\\" also a palindrome of length 4.","solution":"def find_longest_palindrome(n, puzzle_pieces): def is_palindrome(s): return s == s[::-1] longest_palindrome_length = 0 longest_palindrome_indices = [] # Check all single puzzle pieces for i in range(n): if is_palindrome(puzzle_pieces[i]): if len(puzzle_pieces[i]) > longest_palindrome_length: longest_palindrome_length = len(puzzle_pieces[i]) longest_palindrome_indices = [i + 1] # Check all pairs of puzzle pieces for i in range(n): for j in range(i + 1, n): combined_1 = puzzle_pieces[i] + puzzle_pieces[j] combined_2 = puzzle_pieces[j] + puzzle_pieces[i] if is_palindrome(combined_1) or is_palindrome(combined_2): combined_length = max(len(combined_1), len(combined_2)) if combined_length > longest_palindrome_length: longest_palindrome_length = combined_length longest_palindrome_indices = [i + 1, j + 1] if longest_palindrome_length == 0: return 0, [] else: return longest_palindrome_length, longest_palindrome_indices"},{"question":"You are given a sentence in the form of a string. Write a function to replace each character in the sentence with its succeeding character in the alphabet. If the character is \'z\' or \'Z\', it should wrap around to \'a\' or \'A\', respectively. Maintain the case of the original character and avoid altering spaces and punctuation. Examples: * sentence = \\"Hello, World!\\" should return \\"Ifmmp, Xpsme!\\" * sentence = \\"abc xyz\\" should return \\"bcd yza\\"","solution":"def shift_char(c): if \'a\' <= c <= \'y\' or \'A\' <= c <= \'Y\': return chr(ord(c) + 1) elif c == \'z\': return \'a\' elif c == \'Z\': return \'A\' else: return c def shift_sentence(sentence): return \'\'.join(shift_char(c) for c in sentence)"},{"question":"Bob is working on a robot that needs to determine if a given string can be rearranged to form a palindrome. Given a string `s`, help Bob figure out if such a rearrangement is possible. Input First line contains T denoting the number of test cases. The next T lines each contain a string `s`. Output For every test case, print (without quotes) \\"Possible\\" if the string can be rearranged to form a palindrome, else output \\"Impossible\\". Constraints 1 ≤ T ≤ 1000 1 ≤ length of s ≤ 1000 Example Input: 3 civic ivicc hello Output: Possible Possible Impossible","solution":"def can_form_palindrome(s): Determine if the given string can be rearranged to form a palindrome. Args: s (str): The string to check. Returns: str: \\"Possible\\" if the string can be rearranged to form a palindrome, else \\"Impossible\\". from collections import Counter # Count occurrence of each character in the string char_count = Counter(s) # Check how many characters have an odd count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # A string can form a palindrome if it has at most one character with an odd count return \\"Possible\\" if odd_count <= 1 else \\"Impossible\\" def handle_test_cases(t, test_cases): Handles multiple test cases for the can_form_palindrome function. Args: t (int): Number of test cases. test_cases (list): List of strings, each representing a test case. Returns: list: List of results for each test case. return [can_form_palindrome(case) for case in test_cases]"},{"question":"You are given a forest represented as an N x M grid. Each cell in the grid is either empty (denoted by \'.\') or contains a tree (denoted by \'T\'). You want to plant a new type of tree, which can spread exactly to its 8 neighboring cells (vertically, horizontally, and diagonally) in the next hour. Your task is to find the minimum number of hours required to plant the new type of tree so that it spreads to cover all the empty cells in the forest. Input: The first line contains two integers N and M (1 ≤ N, M ≤ 1000) representing the number of rows and columns in the grid. The next N lines contain M characters each (either \'.\' or \'T\') representing the initial state of the forest. Output: Print a single integer representing the minimum number of hours required to cover all the empty cells in the forest with the new type of tree. Example Input: 4 5 T.T.. ..T.. ..... .T..T Output: 2 Explanation: Example case 1. After the first hour, the tree in the top-left will spread to its 8 neighbors, covering some empty cells. After the second hour, the new trees will further spread to cover all the empty cells. Thus, the minimum number of hours required is 2.","solution":"from collections import deque def minimum_hours_to_cover_forest(N, M, grid): directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)] queue = deque() empty_cells = 0 for r in range(N): for c in range(M): if grid[r][c] == \'T\': queue.append((r, c)) elif grid[r][c] == \'.\': empty_cells += 1 if empty_cells == 0: return 0 hours = 0 while queue and empty_cells > 0: hours += 1 for _ in range(len(queue)): r, c = queue.popleft() for dr, dc in directions: nr, nc = r + dr, c + dc if 0 <= nr < N and 0 <= nc < M and grid[nr][nc] == \'.\': grid[nr][nc] = \'T\' empty_cells -= 1 queue.append((nr, nc)) return hours"},{"question":"You are responsible for organizing a popular music festival and want to create an optimal schedule for the performances. Each artist submits a list of time slots they are available to perform, and you also know the durations of their performances. To maximize the number of performances within the festival\'s time limit, you need to determine which artists to schedule based on their availabilities and performance durations. You are given the total duration of the festival and the availability and performance duration for each artist. Find the maximum number of non-overlapping performances that can fit within the festival\'s time limit. -----Input----- First a line with 1 ≤ T ≤ 1000000 – the total duration of the festival in minutes. Then a line with n, 1 ≤ n ≤ 1000 – the number of artists. Next, n lines, each containing two integers ai and di – the availability start time of the ith artist and the duration of the ith artist\'s performance. All values are in minutes and the length of a performance duration is at most the total duration of the festival. -----Output----- The maximum number of non-overlapping performances that can be scheduled within the festival\'s time limit. -----Examples----- Sample Input: 300 4 30 100 120 150 180 90 240 50 Sample Output: 2","solution":"def max_performances(total_duration, artists): Returns the maximum number of non-overlapping performances that can be scheduled within the festival\'s time limit. # Create a list of the performances with their end times performances = [(start, start + duration) for start, duration in artists] # Sort performances based on the end time performances.sort(key=lambda x: x[1]) count = 0 last_end_time = 0 for start, end in performances: # Check if this performance can be scheduled if start >= last_end_time and end <= total_duration: count += 1 last_end_time = end return count # Example usage: total_duration = 300 artists = [(30, 100), (120, 150), (180, 90), (240, 50)] print(max_performances(total_duration, artists)) # Output: 2"},{"question":"You are given a string containing both alphabets and digits. Your task is to move all the digits present in the string to its end, while maintaining the order of the alphabets and the digits. For example, if the given string is \'a1b2c3\', the transformed string would be \'abc123\'. -----Input----- Input consists of a single line containing a string s of length 1 leq |s| leq 100000. -----Output----- Display the transformed string with all digits moved to the end. -----Examples----- Sample Input 1: a1b2c3 Sample Output 1: abc123 Sample Input 2: abc123 Sample Output 2: abc123 Sample Input 3: 1a2b3c Sample Output 3: abc123","solution":"def move_digits_to_end(s): Moves all digits in the string to the end, while maintaining the order of alphabets and digits. Args: s (str): input string containing alphabets and digits Returns: str: transformed string with all digits moved to the end digits = [] alphabets = [] for char in s: if char.isdigit(): digits.append(char) else: alphabets.append(char) return \'\'.join(alphabets) + \'\'.join(digits)"},{"question":"Alex loves to travel using his car. One day he decides to take a road trip around the mountains. There are n important viewpoints along the mountain road, each point offering a unique and breathtaking view. However, some of the mountain roads connecting the viewpoints may be one-way roads, meaning Alex can only travel in the designated direction. Given that Alex wants to start from a particular viewpoint and visit every other viewpoint exactly once and return to the starting viewpoint (making a complete cycle), determine whether such a route exists. This type of problem is known as finding a Hamiltonian cycle in a directed graph. You are given `n` viewpoints, numbered from 1 to `n`. Additionally, you are provided with a list of directed roads connecting these viewpoints. Your task is to determine if there exists at least one Hamiltonian cycle in the given directed graph. If such a cycle exists, output \\"YES\\", otherwise output \\"NO\\". # Input - The first line contains an integer `n` (1 ≤ n ≤ 1000) — the number of viewpoints. - The second line contains an integer `m` (0 ≤ m ≤ 5000) — the number of directed roads. - The next `m` lines contain two integers `u` and `v` (1 ≤ u, v ≤ n, u ≠ v) — denoting there is a directed road from viewpoint `u` to viewpoint `v`. # Output - Print \\"YES\\" if there is at least one Hamiltonian cycle in the graph, otherwise print \\"NO\\". # Examples Example 1: Input: ``` 4 5 1 2 2 3 3 4 4 1 2 4 ``` Output: ``` YES ``` Example 2: Input: ``` 4 4 1 2 2 3 3 4 4 2 ``` Output: ``` NO ``` Example 3: Input: ``` 3 3 1 2 2 3 3 1 ``` Output: ``` YES ```","solution":"def has_hamiltonian_cycle(n, roads): from itertools import permutations if n == 1: return \\"YES\\" if len(roads) < n: return \\"NO\\" graph = {i: [] for i in range(1, n+1)} for u, v in roads: graph[u].append(v) nodes = list(range(1, n+1)) for perm in permutations(nodes[1:], n-1): perm = (nodes[0],) + perm + (nodes[0],) if all(perm[i+1] in graph[perm[i]] for i in range(n)): return \\"YES\\" return \\"NO\\""},{"question":"Robot Navigation Challenge - Shortest Path Algorithm About this Challenge In this challenge, we will explore a robot navigation problem in a grid-like environment. The robot can move in four directions: up, down, left, and right. The objective is to find the shortest path from the starting point to the target point, avoiding any obstacles. Story You are a software engineer who has been tasked with developing a navigation system for a delivery robot. This robot operates in a warehouse with a grid layout, where each cell can be either an open space or an obstacle. Your goal is to write an algorithm that computes the shortest path from the robot\'s starting position to the target position. If the target is unreachable, the algorithm should indicate this. Task You need to write a function `shortest_path` that accepts three arguments: `grid`, `start`, and `target`. The `grid` is a 2D list containing the grid layout, where 0 represents an open space and 1 represents an obstacle. The `start` and `target` arguments are tuples representing the coordinates (row, column) of the starting and target positions, respectively. The function should return either the length of the shortest path as an integer or -1 if the target is unreachable. For example: ``` grid = [ [0, 0, 1, 0], [0, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0] ] start = (0, 0) target = (3, 2) ``` In this case, the function `shortest_path(grid, start, target)` should return 5, indicating that the shortest path from the start to the target consists of 5 steps. # Constraints 1. The function should handle grids of size up to 100x100. 2. The robot can only move up, down, left, and right. 3. The `start` and `target` coordinates will always be open spaces (represented by 0). # Example Here is an example grid and corresponding shortest path: Input: ``` grid = [ [0, 0, 0], [1, 1, 0], [0, 0, 0] ] start = (0, 0) target = (2, 2) ``` Output: ``` 4 ``` In this case, the shortest path from (0, 0) to (2, 2) is four steps, moving down, down, right, right. # Note * Make sure the function `shortest_path` returns exactly the length of the shortest path or `-1` if there is no such path. * Implement the function efficiently to handle the upper constraint limits. ```python def shortest_path(grid, start, target): # function implementation here ``` Write your function implementation below.","solution":"from collections import deque def shortest_path(grid, start, target): if start == target: return 0 rows, cols = len(grid), len(grid[0]) directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] queue = deque([(start[0], start[1], 0)]) # (row, col, distance) visited = set() visited.add(start) while queue: row, col, dist = queue.popleft() for dr, dc in directions: new_row, new_col = row + dr, col + dc if 0 <= new_row < rows and 0 <= new_col < cols: if (new_row, new_col) == target: return dist + 1 if grid[new_row][new_col] == 0 and (new_row, new_col) not in visited: visited.add((new_row, new_col)) queue.append((new_row, new_col, dist + 1)) return -1"},{"question":"A company has a data structure representing their employee directory as a nested dictionary. The structure contains departments, and each department can have sub-departments or employees. Each employee is represented by a dictionary with their \\"name\\" and \\"salary\\". Your task is to write a function `calculate_total_salary` that computes the total salary of all employees in the company. Here is the company structure definition: ```python company = { \'HR\': { \'recruitment\': { \'employees\': [ {\'name\': \'Alice\', \'salary\': 50000}, {\'name\': \'Bob\', \'salary\': 60000} ] }, \'training\': { \'employees\': [ {\'name\': \'Charlie\', \'salary\': 55000} ] } }, \'IT\': { \'development\': { \'backend\': { \'employees\': [ {\'name\': \'Dave\', \'salary\': 70000}, {\'name\': \'Eve\', \'salary\': 80000} ] }, \'frontend\': { \'employees\': [ {\'name\': \'Frank\', \'salary\': 75000} ] } }, \'support\': { \'employees\': [ {\'name\': \'Grace\', \'salary\': 50000} ] } } } ``` Write the function `calculate_total_salary(company_structure)` that accepts the company structure as a dictionary and returns the total salary of all employees. ```python def calculate_total_salary(company_structure): # Implement this function pass # Example usage: # calculate_total_salary(company) # Should return 440000 (sum of all the salaries) ```","solution":"def calculate_total_salary(company_structure): Recursively calculates the total salary of all employees in the company structure. :param company_structure: dict, The nested dictionary representing the company structure :return: int, Total salary of all employees def helper(department): total = 0 for key, value in department.items(): if key == \'employees\': for employee in value: total += employee[\'salary\'] elif isinstance(value, dict): total += helper(value) return total return helper(company_structure)"},{"question":"Given a 2D array grid representing an n x n grid filled with non-negative integers, find a path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1) which minimizes the sum of all numbers along its path. You can only move either down or right at any point in time. Return the minimum sum of the path. Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: The path from the top left to the bottom right with minimum sum is 1→3→1→1→1, which gives a sum of 7. Constraints: 1 <= grid.length == grid[i].length <= 100 0 <= grid[i][j] <= 100","solution":"def minPathSum(grid): if not grid or not grid[0]: return 0 rows, cols = len(grid), len(grid[0]) dp = [[0] * cols for _ in range(rows)] dp[0][0] = grid[0][0] # Initialize the first row for j in range(1, cols): dp[0][j] = dp[0][j - 1] + grid[0][j] # Initialize the first column for i in range(1, rows): dp[i][0] = dp[i - 1][0] + grid[i][0] # Populate the dp table for i in range(1, rows): for j in range(1, cols): dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j] return dp[rows - 1][cols - 1]"},{"question":"In the world of fantasy strategy games, the kingdom has N castles connected by M bidirectional roads. Each road connects two castles and can be traversed in either direction. A general wants to capture all castles starting from any given castle and wants to know the minimum number of moves needed to do so. A move is defined as traveling from one castle to an adjacent castle through a road. The objective is to find out the minimum number of moves required if the general starts from the most advantageous castle. Constraints * 1 le N le 500 * 0 le M le N times (N-1) / 2 * Each road connects exactly 2 different castles. Input The input is given from Standard Input in the format N M u_1 v_1 u_2 v_2 ... u_M v_M Output If the minimum number of moves is ans, you should print on Standard Output ans Examples Input 4 4 1 2 2 3 3 4 4 1 Output 2 Input 3 2 1 2 2 3 Output 2 Input 5 6 1 2 1 3 2 3 3 4 4 5 5 1 Output 2","solution":"from collections import deque, defaultdict def min_moves_to_capture_all_castles(N, M, roads): # Create an adjacency list for the graph graph = defaultdict(list) for u, v in roads: graph[u].append(v) graph[v].append(u) def bfs(start): visited = [False] * (N + 1) distance = [-1] * (N + 1) queue = deque([start]) visited[start] = True distance[start] = 0 while queue: node = queue.popleft() for neighbor in graph[node]: if not visited[neighbor]: visited[neighbor] = True distance[neighbor] = distance[node] + 1 queue.append(neighbor) return max(distance) max_distance = 0 for castle in range(1, N + 1): max_distance = max(max_distance, bfs(castle)) return max_distance def parse_input(input_string): lines = input_string.strip().split(\\"n\\") N, M = map(int, lines[0].split()) roads = [tuple(map(int, line.split())) for line in lines[1:]] return N, M, roads"},{"question":"You are given a string consisting of letters \'a\' and \'b\' only. You can perform the following operation any number of times: Pick any character and flip it (change \'a\' to \'b\' or \'b\' to \'a\'). Your goal is to make the string contain at most one contiguous segment of \'a\'s and at most one contiguous segment of \'b\'s. Find the minimal number of operations required to achieve this goal. Input The first line contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Each of the next t lines represents a test case, containing a string s (1 ≤ |s| ≤ 1000) consisting of characters \'a\' and \'b\' only. Output For each test case, print an integer — the minimal number of operations required to make the given string contain at most one contiguous segment of \'a\'s and at most one contiguous segment of \'b\'s. Examples Input 3 abba abab aaa Output 1 2 0","solution":"def minimal_operations(t, strings): Returns the minimal number of operations required to make each given string contain at most one contiguous segment of \'a\'s and at most one contiguous segment of \'b\'s. :param t: Number of test cases :param strings: List of test case strings consisting of \'a\' and \'b\' :return: List of minimal number of operations for each test case results = [] for s in strings: # Count the number of transitions between \'a\' and \'b\' transitions = sum(1 for i in range(1, len(s)) if s[i] != s[i-1]) # Minimal operations needed is the number of transitions divided by 2 (rounding up if necessary) operations = (transitions + 1) // 2 results.append(operations) return results"},{"question":"Write a function that, given a string of parentheses, returns the minimum number of parentheses you must add to make the string valid (i.e., balanced and properly nested). ```Python min_add_to_make_valid(s) s is the parentheses string ``` # Example ```Python min_add_to_make_valid(\\"()\\") should return 0 min_add_to_make_valid(\\"(()\\") should return 1 min_add_to_make_valid(\\"())\\") should return 1 min_add_to_make_valid(\\")))((\\") should return 4 ```","solution":"def min_add_to_make_valid(s): Returns the minimum number of parentheses needed to make the string valid. left_bracket_needed = 0 right_bracket_needed = 0 for char in s: if char == \'(\': right_bracket_needed += 1 elif char == \')\': if right_bracket_needed > 0: right_bracket_needed -= 1 else: left_bracket_needed += 1 return left_bracket_needed + right_bracket_needed"},{"question":"Alyssa is working on a unique key-generation application. She has been given a string `s` and an integer `n`. Her task is to generate `n` unique keys, each of the same length as the string `s`. A key is defined as a permutation of `s` such that no character appears in its original position. Help Alyssa by writing a function that outputs `n` unique keys for the given string `s`. -----Input----- - The first line contains a single integer T denoting the number of test cases. - The next 2 times T lines contain: - A string `s` (a single word of length m, consisting of only lowercase letters), and - An integer `n` denoting the number of keys to be generated. -----Output----- - For each test case, output `n` lines. - Each line should contain a single string, one of the keys generated from `s` that satisfies the given condition. -----Constraints----- - 1 leq T leq 100 - 1 leq m leq 10 - 1 leq n leq 20 -----Subtasks----- - Subtask 1 [20 points]: n leq 5 - Subtask 2 [40 points]: 5 leq m leq 7 - Subtask 3 [40 points]: No additional constraints. -----Sample Input----- 2 abc 2 abcd 3 -----Sample Output----- bca cab bcda cadb dbac -----Explanation----- In the answer to the first test case, two strings \\"bca\\" and \\"cab\\" are permutations of \\"abc\\" where no character is in its original position. Similarly, in the second test case, three strings \\"bcda\\", \\"cadb\\", and \\"dbac\\" are permutations of \\"abcd\\" where no character is in its original position.","solution":"import itertools def generate_derangements(s, n): Returns n unique derangements of the string s. A derangement is a permutation of the elements of a set, such that no element appears in its original position. def is_derangement(perm, original): for i in range(len(perm)): if perm[i] == original[i]: return False return True permutations = itertools.permutations(s) derangements = [] seen = set() for perm in permutations: if perm not in seen and is_derangement(perm, s): derangements.append(\'\'.join(perm)) seen.add(perm) if len(derangements) == n: break return derangements def main(): import sys input = sys.stdin.read data = input().split() t = int(data[0]) index = 1 results = [] for _ in range(t): s = data[index] n = int(data[index + 1]) index += 2 derangements = generate_derangements(s, n) results.append(derangements) for case in results: for derangement in case: print(derangement)"},{"question":"Given an m x n matrix `grid` of integers, you are initially positioned at the top-left corner (0, 0). Each step you can only move right or down. You can collect coins as you move over the cells. Besides, each cell may contain an obstacle represented by `-1` (a cell you cannot enter). Write a function `maxCoins(grid: List[List[int]]) -> int` that computes the maximum number of coins you can collect from the top-left corner to the bottom-right corner of the grid. If it is impossible to reach the bottom-right corner, return 0. Example: ```python grid = [ [0, 3, 1, 1], [2, 0, 0, 4], [1, 5, 3, 1] ] maxCoins(grid) # should return 12 grid = [ [0, 3, -1, 1], [-1, 5, 0, -1], [2, 0, 0, -1] ] maxCoins(grid) # should return 0 because it is impossible to reach the bottom-right corner ``` Constraints: - m == len(grid) - n == len(grid[0]) - 1 <= m, n <= 100 - -1 <= grid[i][j] <= 50","solution":"from typing import List def maxCoins(grid: List[List[int]]) -> int: Returns the maximum number of coins that can be collected when moving from the top-left corner to the bottom-right corner of the grid. If it is impossible to reach the bottom-right corner, returns 0. if not grid or not grid[0] or grid[0][0] == -1 or grid[-1][-1] == -1: return 0 m, n = len(grid), len(grid[0]) # Initialize dp array with -1 since -1 represents obstacles dp = [[-1] * n for _ in range(m)] # Starting point dp[0][0] = grid[0][0] # Fill the first row for j in range(1, n): if grid[0][j] == -1: break dp[0][j] = dp[0][j-1] + grid[0][j] # Fill the first column for i in range(1, m): if grid[i][0] == -1: break dp[i][0] = dp[i-1][0] + grid[i][0] # Fill the rest of the dp array for i in range(1, m): for j in range(1, n): if grid[i][j] != -1: if dp[i-1][j] != -1 and dp[i][j-1] != -1: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] elif dp[i-1][j] != -1: dp[i][j] = dp[i-1][j] + grid[i][j] elif dp[i][j-1] != -1: dp[i][j] = dp[i][j-1] + grid[i][j] return dp[m-1][n-1] if dp[m-1][n-1] != -1 else 0"},{"question":"Given an array of positive integers and a target value, write a function that determines whether any combination of elements in the array (without repetition) adds up to the target value. Function Signature: ```python def can_sum_to_target(arr: list, target: int) -> bool: ``` Input: - The function takes two inputs: 1. A list `arr` of positive integers where `1 <= len(arr) <= 1000` and `1 <= arr[i] <= 10^6`. 2. An integer `target` where `1 <= target <= 10^6`. Output: - The function should return a boolean value: - `True` if there exists a combination of elements in the `arr` that adds up to `target`. - `False` otherwise. Example Input ```python arr = [2, 3, 7, 8, 10] target = 11 ``` Output ```python True ``` Explanation: - A combination that adds up to `11` is `[3, 8]`, so the function returns `True`. Input ```python arr = [1, 5, 10] target = 12 ``` Output ```python False ``` Explanation: - There is no combination of elements in `[1, 5, 10]` that adds up to `12`, so the function returns `False`. Note: The solution should efficiently handle the input size and constraints, ensuring that it runs within a reasonable time frame for all allowed inputs.","solution":"def can_sum_to_target(arr, target): Determines if any combination of elements in the array adds up to the target value. Parameters: arr (list): A list of positive integers. target (int): The target sum value. Returns: bool: True if there exists a combination that sums to target, otherwise False. n = len(arr) dp = [False] * (target + 1) dp[0] = True for num in arr: for t in range(target, num - 1, -1): if dp[t - num]: dp[t] = True return dp[target]"},{"question":"A software development team is working on a project management tool. One of the features they need to implement is a way to track the completion status of various tasks and subtasks within projects. Each project can have multiple tasks, and each task can have multiple subtasks. Every task and subtask has a unique ID and a completion status represented by a boolean value (True for completed and False for not completed). The team wants to be able to check the completion status of any task or subtask at any point in time. You are tasked with implementing this feature. You will be given a sequence of operations to either update the status of a task or subtask, or query the current completion status of a project, task, or subtask. Input The first line contains an integer n (1 ≤ n ≤ 105) — the number of operations. Each of the next n lines contains one operation. An operation is of one of the following three types: * \\"C t x\\" — Change the completion status of task or subtask t to x (x can be either 0 for not completed, or 1 for completed). * \\"Q t\\" — Query the current completion status of task or subtask t. * \\"Q P\\" — Query the current completion status of the entire project. A project is considered completed if all its tasks and subtasks are completed. Output For each query operation, output the current completion status (0 for not completed, or 1 for completed) on a single line. Examples Input 8 C 1 1 C 2 0 C 3 1 Q 1 Q 2 Q 3 C P 1 Q P Output 1 0 1 0","solution":"class ProjectManager: def __init__(self): self.status = {} def change_status(self, t, x): self.status[t] = x def query_status(self, t): if t == \\"P\\": # The project is considered completed if all tasks and subtasks are completed return int(all(self.status.values())) else: return self.status.get(t, 0) # Default to 0 if the task or subtask is not found def process_operations(n, operations): pm = ProjectManager() result = [] for op in operations: parts = op.split() if parts[0] == \\"C\\": pm.change_status(parts[1], int(parts[2])) elif parts[0] == \\"Q\\": result.append(pm.query_status(parts[1])) return result"},{"question":"Given a list of non-negative integers representing the amount of rainwater trapped between different heights after raining, calculate the total amount of rainwater trapped. Example 1: Input: [0,1,0,2,1,0,3,1,0,1,2] Output: 8 Explanation: The above elevation map (dictated by the input array) depicts the following scenario: # # # # # # # # # # # # # # In this case, 8 units of rainwater (depicted as \'W\') are being trapped: # # #W# #W#W# W# # #W#W# #W# Example 2: Input: [4,2,0,3,2,5] Output: 9 Explanation: The above elevation map (dictated by the input array) depicts the following scenario: # # # # # # # # # # # # # # # # # # # # # # In this case, 9 units of rainwater (depicted as \'W\') are being trapped: # # # WWW # # # WWW # # # # #W# # # # # # #W#W#W#W# # Your task: You don\'t need to take input or provide the input array. Just complete the function `trap_rain_water(height: List[int]) -> int` that takes an array of integers representing the heights and returns an integer representing the total amount of trapped rainwater. Expected Time Complexity: O(N) Expected Auxiliary Space: O(1) Constraints: 1<=Length of the array<=10^5","solution":"def trap_rain_water(height): if not height: return 0 n = len(height) left_max, right_max = [0] * n, [0] * n left_max[0] = height[0] right_max[n - 1] = height[n - 1] for i in range(1, n): left_max[i] = max(left_max[i - 1], height[i]) for i in range(n - 2, -1, -1): right_max[i] = max(right_max[i + 1], height[i]) trapped_water = 0 for i in range(n): trapped_water += min(left_max[i], right_max[i]) - height[i] return trapped_water"},{"question":"You are given an integer array `arr` of length `n`. An array is called simple if all the elements in it are distinct. You need to calculate the minimum number of elements you need to remove from `arr` to make it simple. -----Input----- The first line contains a single integer `t` (1 le t le 1000)— the number of test cases. Next `t` lines contains test cases — one per line. The first line of each test case contains a single integer `n` (1 le n le 2 cdot 10^5) — the size of array `arr`. The second line of each test case contains `n` integers arr_i (1 le arr_i le 10^5). It is guaranteed that the total length of all arrays does not exceed 2 cdot 10^5. -----Output----- For each test case, print the minimum number of elements you need to remove from `arr` to make it simple. -----Example----- Input 3 5 1 2 2 3 4 6 5 5 5 5 5 5 4 1 2 3 4 Output 1 5 0 -----Note----- In the first test case, you can remove one of the \'2\'s to make the array [1, 2, 3, 4], which is simple. In the second test case, you need to remove all five \'5\'s to make the array empty, which is simple. In the third test case, the given array is already simple.","solution":"def min_removals_to_make_simple(arr): Returns the minimum number of elements to remove from the array to make it simple. seen = set() duplicates_count = 0 for num in arr: if num in seen: duplicates_count += 1 else: seen.add(num) return duplicates_count def process_test_cases(test_cases): Processes multiple test cases. Each test case is a tuple (n, arr). results = [] for n, arr in test_cases: results.append(min_removals_to_make_simple(arr)) return results"},{"question":"Rainfall Collection System Problem In a city, there is an innovative rainfall collection system that stores rainwater in tanks distributed across several buildings. Each tank has a limited capacity. When it rains, all tanks start filling up simultaneously at the same rate, until they reach their capacity. If the rainfall exceeds the total capacity of all tanks, the excess water will overflow. Your task is to determine the amount of water that overflows after a rain session. Input The first line of the input contains an integer T, the number of test cases. Each test case starts with an integer N, the number of tanks. The next line contains N integers representing the capacities of the tanks. The next line contains a single integer R, the total amount of rainwater collected. Output For each test case, output a single integer representing the amount of overflow water. Constraints 1 <= T <= 100 1 <= N <= 50 1 <= Capacities of tanks <= 1000 1 <= R <= 50000 Example Input: 2 3 100 200 300 600 2 500 300 1000 Output: 0 200","solution":"def calculate_overflow_water(test_cases): results = [] for case in test_cases: N, capacities, R = case[\'N\'], case[\'capacities\'], case[\'R\'] total_capacity = sum(capacities) overflow = max(0, R - total_capacity) results.append(overflow) return results def parse_input(data): lines = data.strip().split(\'n\') T = int(lines[0]) test_cases = [] index = 1 for _ in range(T): N = int(lines[index]) capacities = list(map(int, lines[index + 1].split())) R = int(lines[index + 2]) test_cases.append({\'N\': N, \'capacities\': capacities, \'R\': R}) index += 3 return test_cases, T"},{"question":"You are working on a project that involves processing and analyzing customer feedback stored in a single string. The feedback consists of multiple sentences, and your task is to determine the sentence with the greatest number of words. Write a function that takes a string input representing customer feedback and returns the sentence with the highest word count. In case of multiple sentences with the same number of words, return the first one. Note that sentences are separated by period (\'.\') and words are separated by spaces. For example, given the feedback: ```python \\"This product is amazing. I loved using it every day. Highly recommend to everyone.\\" ``` Your function should return: ```python \\"I loved using it every day\\" ``` Consider edge cases such as empty strings or strings without valid sentences when implementing your solution.","solution":"def sentence_with_highest_word_count(feedback): Returns the sentence with the highest word count from the given feedback. Sentences are separated by periods, and words by spaces. if not feedback: return \\"\\" sentences = feedback.split(\'.\') max_word_count = 0 result_sentence = \\"\\" for sentence in sentences: words = sentence.strip().split() word_count = len(words) if word_count > max_word_count: max_word_count = word_count result_sentence = sentence.strip() return result_sentence"},{"question":"Write a function that rotates a given matrix 90 degrees clockwise. The matrix is provided as a two-dimensional list of integers, and you need to return the new rotated matrix. Input Format: - The first line contains an integer T, the number of test cases. - For each test case: - The first line contains two space-separated integers N and M, representing the number of rows and columns of the matrix respectively. - The next N lines contain M space-separated integers, representing the elements of the matrix. Output Format: - For each test case, output the rotated matrix where each row is printed on a new line. Constraints: - 1 <= T <= 10 - 1 <= N, M <= 100 - -1000 <= matrix elements <= 1000 Example: Input: 2 3 3 1 2 3 4 5 6 7 8 9 2 4 1 2 3 4 5 6 7 8 Output: 7 4 1 8 5 2 9 6 3 5 1 6 2 7 3 8 4","solution":"def rotate_matrix(matrix): Rotates a given matrix 90 degrees clockwise. Args: matrix (list of list of int): The matrix to rotate. Returns: list of list of int: Rotated matrix. # Computing the transpose of the matrix transposed_matrix = list(zip(*matrix)) # Reversing each row of the transposed matrix to get the rotated matrix rotated_matrix = [list(reversed(row)) for row in transposed_matrix] return rotated_matrix def process_input(T, test_cases): Processes input and returns the rotated matrices. Args: T (int): Number of test cases. test_cases (list of tuples): List of tuples where each tuple contains (N, M, matrix) for each test case. Returns: list of lists of list of int: List of rotated matrices for each test case. results = [] for N, M, matrix in test_cases: rotated_matrix = rotate_matrix(matrix) results.append(rotated_matrix) return results"},{"question":"You are working at a cake shop, and you have been asked to find the maximum number of cakes that can be made given a list of required ingredients and the available supply for each ingredient. Each cake requires a specific amount of several ingredients. Given a recipe, determine how many cakes can be made with the available ingredients. Write a function `max_cakes(recipe: Dict[str, int], available: Dict[str, int]) -> int` that takes a dictionary representing the recipe (with ingredient names as keys and required amounts as values) and a dictionary representing the available supply (with ingredient names as keys and available amounts as values). Your function should return the maximum number of cakes that can be made. If the required ingredient is not present in the available supply, assume the amount available for that ingredient is 0. **Function Signature:** ```python def max_cakes(recipe: Dict[str, int], available: Dict[str, int]) -> int: ``` # Input - `recipe`: A dictionary where keys are strings representing ingredient names and values are integers representing the required amount of that ingredient to make one cake. - `available`: A dictionary where keys are strings representing ingredient names and values are integers representing the available amount of that ingredient. # Output - An integer representing the maximum number of cakes that can be made. # Examples ```python recipe = {\\"flour\\": 500, \\"sugar\\": 200, \\"eggs\\": 1} available = {\\"flour\\": 1200, \\"sugar\\": 1200, \\"eggs\\": 5} print(max_cakes(recipe, available)) # Output: 2 recipe = {\\"flour\\": 300, \\"sugar\\": 150, \\"milk\\": 100} available = {\\"flour\\": 1000, \\"sugar\\": 600, \\"milk\\": 200} print(max_cakes(recipe, available)) # Output: 2 recipe = {\\"flour\\": 400, \\"sugar\\": 100} available = {\\"flour\\": 500, \\"sugar\\": 1200} print(max_cakes(recipe, available)) # Output: 1 ``` # Notes - Each ingredient in the recipe must be present in the required amount for each cake to be made. - Consider the edge cases where some ingredients may not be present in the available dictionary. Assume those ingredients have an available amount of 0.","solution":"def max_cakes(recipe, available): Returns the maximum number of cakes that can be made with the given recipe and available ingredients. Parameters: recipe (dict): Dictionary of required ingredients and their respective quantities. available (dict): Dictionary of available ingredients and their respective quantities. Returns: int: Maximum number of cakes that can be made. min_cakes = float(\'inf\') for ingredient, required_amount in recipe.items(): if ingredient in available: possible_cakes_from_ingredient = available[ingredient] // required_amount else: possible_cakes_from_ingredient = 0 min_cakes = min(min_cakes, possible_cakes_from_ingredient) return min_cakes"},{"question":"In a programming competition, participants are given a matrix filled with non-negative integers. They are required to find an interesting pattern within this matrix. Specifically, they need to calculate the sum of elements for all possible sub-matrices and identify the maximum sum among these sub-matrices. Given the matrix, implement a function to compute the sum of elements for all possible sub-matrices and return the maximum sum. Input: - First line contains two space-separated integers, n and m, representing the number of rows and columns in the matrix respectively. - The next n lines contain m space-separated integers, representing the elements of the matrix. Output: Print the maximum sum of all possible sub-matrices found in the given matrix. Constraints: 1 ≤ n, m ≤ 100 0 ≤ matrix[i][j] ≤ 100 SAMPLE INPUT 3 3 1 2 3 4 5 6 7 8 9 SAMPLE OUTPUT 45 Explanation: The maximum sum sub-matrix in this example is the entire matrix itself, with the sum being 1+2+3+4+5+6+7+8+9=45.","solution":"def max_sum_submatrix(n, m, matrix): # Create an auxiliary matrix to store sums of sub-matrices dp = [[0]*m for _ in range(n)] max_sum = float(\'-inf\') for i in range(n): for j in range(m): dp[i][j] = matrix[i][j] if i > 0: dp[i][j] += dp[i-1][j] if j > 0: dp[i][j] += dp[i][j-1] if i > 0 and j > 0: dp[i][j] -= dp[i-1][j-1] # Loop through to find the maximum sum sub-matrix for i1 in range(n): for j1 in range(m): for i2 in range(i1, n): for j2 in range(j1, m): sub_sum = dp[i2][j2] if i1 > 0: sub_sum -= dp[i1-1][j2] if j1 > 0: sub_sum -= dp[i2][j1-1] if i1 > 0 and j1 > 0: sub_sum += dp[i1-1][j1-1] max_sum = max(max_sum, sub_sum) return max_sum"},{"question":"You are given a string s consisting of n lowercase English letters. Your task is to find the length of the minimum substring that needs to be removed so that each character in the remaining string appears the same number of times. -----Input----- The first line of the input contains one integer n (1 le n le 10^5) — the length of the string s. The second line of the input contains the string s of length n. -----Output----- Print one integer — the length of the minimum substring that needs to be removed to ensure each character in the remaining string appears the same number of times. -----Examples----- Input 7 aabbccd Output 1 Input 6 aabbcc Output 0 Input 5 aaaaa Output 0","solution":"from collections import Counter def min_length_substring_to_remove(n, s): Returns the length of the minimum substring that needs to be removed so that each character in the remaining string appears the same number of times. char_count = Counter(s) freq_count = Counter(char_count.values()) if len(freq_count) == 1: return 0 # All characters already appear the same number of times freq_items = sorted(freq_count.items()) min_removals = float(\'inf\') for i in range(len(freq_items)): count_removals = 0 for j in range(len(freq_items)): if i != j: count_removals += freq_items[j][0] * freq_items[j][1] if count_removals < min_removals: min_removals = count_removals return min_removals"},{"question":"Given a string S, you need to check if it is possible to make the string a palindrome by rearranging its characters. If it is possible, return \\"YES\\", otherwise return \\"NO\\". Example 1: Input: S = \\"aabb\\" Output: YES Example 2: Input: S = \\"abc\\" Output: NO Your Task: Since this is a function problem, you just need to complete the provided function isPossiblePalindrome() which takes S as an input parameter and returns \\"YES\\" or \\"NO\\" based on the described criteria. Constraints: 1 <= |S| <= 10^{5} S consists of lowercase English letters only. Expected Time Complexity: O(n) Expected Auxiliary Space: O(1)","solution":"def isPossiblePalindrome(S): This function checks if it is possible to rearrange the characters of the given string S to form a palindrome. If it is possible, it returns \\"YES\\", otherwise \\"NO\\". A string can be rearranged to form a palindrome if at most one character appears an odd number of times. :param S: str, the input string :return: str, \'YES\' if the string can be rearranged to form a palindrome, otherwise \'NO\' from collections import Counter # Count the frequency of each character in the string char_count = Counter(S) # Count how many characters have an odd frequency count odd_count = sum(1 for count in char_count.values() if count % 2 != 0) # Palindrome condition if odd_count <= 1: return \\"YES\\" else: return \\"NO\\""},{"question":"In a distant land called CodeLand, there are n magical gardens. Each garden has a unique energy value assigned to it, and each garden is connected to exactly two other gardens forming a single loop. The energy value of each garden is a non-negative integer. A CodeLand gardener wants to traverse all the gardens in the loop exactly once, starting from any garden, and return to the starting garden. He wonders what is the maximum energy he can collect without visiting any garden more than once, except the starting garden, which he must visit twice (once at the beginning and once at the end). Write a program to determine the maximum energy that can be collected following the above rules. -----Input----- The first line contains an integer n (3 ≤ n ≤ 10^5) representing the number of gardens. The second line contains n non-negative integers separated by spaces, where the i-th integer represents the energy value of the i-th garden (0 ≤ energy value ≤ 10^6). -----Output----- Output a single integer representing the maximum energy that can be collected. -----Examples----- Input: 5 5 3 7 2 9 Output: 26 Input: 4 1 3 9 2 Output: 15 Input: 3 8 4 5 Output: 17 -----Explanation----- In the first sample case, one possible traversal to collect the maximum energy starting from the first garden could be: 5 + 3 + 7 + 2 + 9. Another equally valid traversal yielding the same maximum energy could be: 9 + 5 + 3 + 7 + 2. In the second sample case, one possible traversal to collect the maximum energy starting from the first garden could be: 1 + 3 + 9 + 2. Another equally valid traversal yielding the same maximum energy could be: 2 + 1 + 3 + 9. In the third sample case, one possible traversal to collect the maximum energy starting from any garden could be: 8 + 4 + 5 or 5 + 8 + 4 or 4 + 5 + 8. All traversals generate the same maximum energy value.","solution":"def max_energy_collected(n, energies): extended_energies = energies + energies # to simulate the circular loop max_energy = 0 for i in range(n): current_energy = sum(extended_energies[i:i + n]) max_energy = max(max_energy, current_energy) return max_energy"},{"question":"Tom is working on a text processing project and he needs your help. He has a long string consisting of only lowercase letters and would like to find the longest substring that consists of unique characters. Your task is to write a program that finds this longest substring and outputs its length. If there are multiple substrings with the same maximum length, you can output the length of any one of them. -----Input----- The input contains a single string s (1 ≤ |s| ≤ 10^5), consisting of only lowercase English letters. -----Output----- Output a single integer - the length of the longest substring that contains only unique characters. -----Examples----- Input abcabcbb Output 3 Input bbbbb Output 1 Input pwwkew Output 3 -----Note----- In the first example, the answer is \\"abc\\", with the length of 3. Note that \\"bca\\" is also a substring that contains only unique characters. In the second example, the answer is \\"b\\", with the length of 1. In the third example, the answer is \\"wke\\", with the length of 3. Note that \\"kew\\" is a valid answer too.","solution":"def longest_unique_substring_length(s): Finds the length of the longest substring with all unique characters. :param s: A string consisting of lowercase letters. :return: An integer representing the length of the longest unique substring. n = len(s) if n == 0: return 0 max_length = 0 start = 0 char_index = {} for end in range(n): if s[end] in char_index: start = max(start, char_index[s[end]] + 1) char_index[s[end]] = end max_length = max(max_length, end - start + 1) return max_length"},{"question":"You are given a sequence of N integers, where each integer can be positive, negative, or zero. Your task is to sort the sequence according to the following criteria: 1. All negative integers should come before all positive integers. 2. The relative order of the negative integers should remain the same as in the original sequence. 3. The relative order of the positive integers should remain the same as in the original sequence. 4. All zeros should be moved to the end of the sequence, maintaining their relative order. Write a function that takes the sequence as input and returns a new sequence sorted according to the criteria above. -----Constraints----- - 1 ≤ N ≤ 10^5 - -10^9 ≤ each integer ≤ 10^9 -----Input----- Input is given from Standard Input in the following format: N a_1 a_2 : a_N -----Output----- Print the sorted sequence on a single line, with each element separated by a space. -----Sample Input----- 8 4 -3 0 2 -7 0 1 -6 -----Sample Output----- -3 -7 -6 4 2 1 0 0 In the above sample, -3, -7, and -6 are the negative integers in the order they appear originally. 4, 2, and 1 are the positive integers in the order they appear originally. All zeros are moved to the end, maintaining their relative order.","solution":"def custom_sort(sequence): Sorts the sequence according to the following criteria: 1. All negative integers come before all positive integers. 2. The relative order of the negative integers and the positive integers should remain the same as in the original sequence. 3. All zeros should be moved to the end of the sequence, maintaining their relative order. negatives = [x for x in sequence if x < 0] positives = [x for x in sequence if x > 0] zeros = [x for x in sequence if x == 0] return negatives + positives + zeros"},{"question":"You are given a binary tree with n nodes, where each node contains a unique integer value. You need to answer q queries on this tree. Each query requires you to find the sum of the values of all nodes within a sub-tree rooted at a given node. # Input The input consists of three parts: 1. The first line contains an integer n (1 ≤ n ≤ 100000) — the number of nodes in the tree. 2. The second line contains n integers, where the i-th integer is the value of the i-th node of the tree (1 ≤ value_i ≤ 1000). 3. The next n-1 lines each contain two integers u and v (1 ≤ u, v ≤ n) — indicating that there is an edge between nodes u and v. 4. The final part contains an integer q (1 ≤ q ≤ 100000) — the number of queries, followed by q lines each containing a single integer v (1 ≤ v ≤ n) — the root of the sub-tree for that query. # Output For each query, output a single integer — the sum of the values of all nodes in the sub-tree rooted at the given node. # Example Input: ``` 5 10 20 30 40 50 1 2 1 3 3 4 3 5 3 1 3 4 ``` Output: ``` 150 120 40 ``` # Note **Explanation of the example:** 1. The first query asks for the sum of the sub-tree rooted at node 1. The sub-tree includes all nodes: 1, 2, 3, 4, 5. Hence, the sum is 10 + 20 + 30 + 40 + 50 = 150. 2. The second query asks for the sum of the sub-tree rooted at node 3. The sub-tree includes nodes: 3, 4, 5. Hence, the sum is 30 + 40 + 50 = 120. 3. The third query asks for the sum of the sub-tree rooted at node 4. The sub-tree includes only the node 4. Hence, the sum is 40. **Hint: You can use Depth First Search (DFS) to traverse the tree and compute the required sums efficiently.**","solution":"from collections import defaultdict def subtree_sums(n, node_values, edges, queries): # Build the graph tree = defaultdict(list) for u, v in edges: tree[u].append(v) tree[v].append(u) # Function to perform DFS and calculate subtree sums def dfs(node, parent): subtree_sum[node] = node_values[node-1] for neighbor in tree[node]: if neighbor != parent: subtree_sum[node] += dfs(neighbor, node) return subtree_sum[node] subtree_sum = [0] * (n + 1) dfs(1, -1) return [subtree_sum[v] for v in queries]"},{"question":"=====Function Description===== ones The ones tool returns a new array of given shape and type, filled with ones. The default type of elements is float. import numpy print numpy.ones((2, 3)) # 2 is for rows, 3 is for columns #Output [[ 1. 1. 1.] [ 1. 1. 1.]] zeros The zeros tool returns a new array of given shape and type, filled with zeros. The default type of elements is float. import numpy print numpy.zeros((2, 3)) # 2 is for rows, 3 is for columns #Output [[ 0. 0. 0.] [ 0. 0. 0.]] =====Problem Statement===== Your task is to print an array of NX M with its main diagonal elements filled with the value 9, and the rest of the elements filled with zeros. =====Input Format===== A single line containing the space separated values of N and M. N denotes the rows. M denotes the columns. =====Output Format===== Print the desired NXM array. =====Sample Input===== 4 5 =====Sample Output===== [[9 0 0 0 0] [0 9 0 0 0] [0 0 9 0 0] [0 0 0 9 0]]","solution":"import numpy as np def create_custom_array(N, M): Creates an N x M array with the main diagonal elements filled with 9 and the rest filled with zeros. # Initialize an NxM array filled with zeros result = np.zeros((N, M), dtype=int) # Fill the main diagonal with 9 for i in range(min(N, M)): result[i, i] = 9 return result"},{"question":"You are given a string consisting of lowercase English letters and digits. Your task is to transform the string such that all letters appear in sorted order followed by all digits in sorted order. Preserve the case for alphabetic characters. For example: Input: \\"a3c1b2\\" Output: \\"abc123\\" Input: \\"b2a1c3\\" Output: \\"abc123\\" Write a program to perform this transformation. Input: The first line of input contains an integer t, representing the number of test cases, followed by t lines of strings s containing lowercase English letters and digits. Output: For each test case, print the transformed string in sorted order as described. Constraints: 1 ≤ t ≤ 1000 1 ≤ length of string s ≤ 10^5 Total number of characters across all strings does not exceed 10^7 SAMPLE INPUT 2 a3c1b2 b2a1c3 SAMPLE OUTPUT abc123 abc123 Explanation: In the first case, we have the string \\"a3c1b2\\". The letters are \'a\', \'c\', \'b\' and the digits are \'3\', \'1\', \'2\'. Sorting letters gives \\"abc\\" and sorting digits gives \\"123\\". Combining them, we get \\"abc123\\". In the second case, the letters are \'b\', \'a\', \'c\' and the digits are \'2\', \'1\', \'3\'. Sorting letters results in \\"abc\\" and sorting digits results in \\"123\\". Concatenating them gives \\"abc123\\".","solution":"def transform_string(s): Transform the string such that all letters appear in sorted order followed by all digits in sorted order. Parameters: s (str): Input string consisting of lowercase English letters and digits. Returns: str: Transformed string with sorted letters followed by sorted digits. letters = [] digits = [] for char in s: if char.isdigit(): digits.append(char) else: letters.append(char) sorted_letters = \'\'.join(sorted(letters)) sorted_digits = \'\'.join(sorted(digits)) return sorted_letters + sorted_digits def process_multiple_strings(strings): Process multiple strings as per the given test cases. Parameters: strings (list): List of input strings consisting of lowercase English letters and digits. Returns: list: List of transformed strings. result = [] for s in strings: result.append(transform_string(s)) return result"},{"question":"You are working on a project that involves processing large datasets. One part of your task is to find the median of a specific dataset repeatedly. To optimize the process, you decide to write a program that can efficiently calculate the median as new elements are added to the dataset. Your program should be able to handle two types of operations: 1. Adding a new element to the dataset. 2. Calculating and returning the current median of the dataset. The median of a dataset is the middle number when the dataset is sorted. If the dataset has an even number of elements, the median is the average of the two middle numbers. Write a program that processes a series of operations on the dataset and outputs the result of the median calculation when requested. input The input consists of multiple lines. Each line represents an operation and is in one of the following formats: - \\"add x\\" where x is an integer (−10^9 ≤ x ≤ 10^9) to be added to the dataset. - \\"median\\" to request the current median of the dataset. The input ends with a line containing the word \\"end\\". output For each \\"median\\" operation, output the median of the current dataset. If the dataset is empty when \\"median\\" is requested, output \\"Empty\\". Example Input add 1 add 3 median add 2 median add 5 add 4 median end Output 2 2 3","solution":"import bisect class MedianFinder: def __init__(self): self.data = [] def addNum(self, num: int): # Insert the number in the sorted position bisect.insort(self.data, num) def findMedian(self): if not self.data: return \\"Empty\\" n = len(self.data) if n % 2 == 1: return self.data[n // 2] else: return (self.data[n // 2 - 1] + self.data[n // 2]) / 2 def process_operations(operations): median_finder = MedianFinder() results = [] for operation in operations: if operation.startswith(\\"add\\"): _, num = operation.split() median_finder.addNum(int(num)) elif operation == \\"median\\": results.append(median_finder.findMedian()) return results # Example Usage operations = [ \\"add 1\\", \\"add 3\\", \\"median\\", \\"add 2\\", \\"median\\", \\"add 5\\", \\"add 4\\", \\"median\\", \\"end\\" ] output = process_operations(operations) for value in output: print(value)"},{"question":"Petya loves prime numbers. One day he wondered about a new interesting problem. He wanted to find all the prime numbers less than or equal to a given number n. Known algorithms seemed either too slow or too complex to him. So, Petya decided to create his own optimization technique. He designed his function to take an integer n and return an array of prime numbers less than or equal to n. Petya\'s approach involves iterating through numbers and using a flag to identify primes. Petya\'s logic revolves around checking divisibility by all numbers less than the current number itself, which unfortunately is not the most efficient but it serves as a base for our problem. Your task is to optimize Petya\'s function to make it more efficient while achieving the same outcome. Below is the initial inefficient code written by Petya: ```cpp vector<int> find_primes(int n) { vector<int> primes; for (int i = 2; i <= n; ++i) { bool is_prime = true; for (int j = 2; j < i; ++j) { if (i % j == 0) { is_prime = false; break; } } if (is_prime) { primes.push_back(i); } } return primes; } ``` Optimize Petya\'s function to effectively find all prime numbers less than or equal to n using an efficient algorithm. The optimized solution should maintain the functional goal but improve computational performance significantly. Input An integer n (1 ≤ n ≤ 10^6). Output Output all prime numbers less than or equal to n, in a single line, separated by spaces. Examples Input 10 Output 2 3 5 7 Input 20 Output 2 3 5 7 11 13 17 19 Note To achieve an efficient solution, consider using the Sieve of Eratosthenes algorithm or any other advanced prime-finding technique. Aim to reduce the time complexity to O(n log log n) or better.","solution":"def find_primes(n): Returns a list of all prime numbers less than or equal to n using the Sieve of Eratosthenes algorithm. if n < 2: return [] sieve = [True] * (n + 1) sieve[0] = sieve[1] = False for start in range(2, int(n**0.5) + 1): if sieve[start]: for multiple in range(start*start, n + 1, start): sieve[multiple] = False return [num for num in range(n + 1) if sieve[num]]"},{"question":"You are given a grid with `m` rows and `n` columns representing a garden. In the garden, each cell contains one type of flower, which is represented by a character. The garden has specifically two types of flowers: \'R\' (roses) and \'T\' (tulips). Your task is to determine the size of the largest square sub-grid that contains only one type of flower. The size of the square is defined by its side length. # Input - The first line contains two integers `m` and `n` (1 leq m, n leq 200) — the number of rows and columns in the garden. - The next `m` lines each contain a string of `n` characters (\'R\' or \'T\') — the representation of the garden grid. # Output Print an integer, the side length of the largest square sub-grid that contains only \'R\'s or only \'T\'s. # Examples Example 1: Input ``` 3 3 RTR TRT RTR ``` Output ``` 1 ``` Explanation: The largest square sub-grid with a single type of flower is of size 1x1. Example 2: Input ``` 4 4 RRRR RTTR RTTR RRRR ``` Output ``` 2 ``` Explanation: The largest square sub-grid with a single type of flower is a 2x2 grid composed entirely of roses (R), found in the top-left corner. # Note - You must handle the input efficiently to ensure the solution works within the given constraints. - Consider using dynamic programming to solve this problem effectively.","solution":"def largest_single_flower_square(m, n, garden): if not garden or m == 0 or n == 0: return 0 def max_square_side(char): dp = [[0] * (n + 1) for _ in range(m + 1)] max_side = 0 for i in range(1, m + 1): for j in range(1, n + 1): if garden[i-1][j-1] == char: dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 max_side = max(max_side, dp[i][j]) return max_side max_R = max_square_side(\'R\') max_T = max_square_side(\'T\') return max(max_R, max_T)"},{"question":"Given an integer array A[1..N] where 1 leq N leq 1000 and 1 leq A[i] leq 10^6, find the sum of the absolute differences between all pairs of distinct elements in the array. The result may be large, so output it modulo 10^9+7. -----Input----- The first line of input is an integer N representing the number of elements in the array. The second line contains N integers separated by spaces, representing the elements of the array A. -----Output----- Output the sum of the absolute differences between all pairs of distinct elements in the array, modulo 10^9+7. -----Examples----- Sample Input: 3 1 2 3 Sample Output: 8 Explanation: The distinct pairs are (1,2), (1,3), and (2,3). Their absolute differences are |1-2| + |1-3| + |2-3| = 1 + 2 + 1 = 4. Each pair counts in both directions, so the total is 4*2 = 8. Sample Input: 4 4 8 6 3 Sample Output: 34 Explanation: The distinct pairs and their absolute differences are: |4-8| + |4-6| + |4-3| + |8-6| + |8-3| + |6-3| = 4 + 2 + 1 + 2 + 5 + 3 = 17. Each pair counts in both directions, so the total is 17*2 = 34.","solution":"def sum_of_abs_differences(arr): MOD = 10**9 + 7 N = len(arr) arr.sort() total_sum = 0 total = 0 for i in range(1, N): total += arr[i] for i in range(N): total_sum = (total_sum + (total - (N - 1 - i) * arr[i]) % MOD) % MOD if i < N - 1: total -= arr[i + 1] return (2 * total_sum) % MOD"},{"question":"You are designing a system to track which items have been used to complete tasks. Each task requires a specific set of items, and the items may belong to one or multiple tasks. Your goal is to determine the minimum number of items needed to complete all tasks. -----Input----- - A single line containing `1 <= n <= 20`, the number of tasks. - For each task: - A single line containing `1 <= m_i <= 10`, the number of items required for the `i`th task. - `m_i` lines each containing `1 <= item <= 1000`, representing the item IDs required for the `i`th task. -----Output----- Print one line with a single integer, the minimum number of unique items needed to complete all tasks. -----Examples----- Sample Input: 3 2 1 2 1 2 2 3 4 Sample Output: 4","solution":"def min_unique_items_needed(tasks): Given a list of tasks with required items, this function calculates the minimum number of unique items needed to complete all tasks. all_items = set() for task in tasks: for item in task: all_items.add(item) return len(all_items) # Example usage: n = 3 tasks = [ [1, 2], [2], [3, 4] ] print(min_unique_items_needed(tasks)) # Output: 4"},{"question":"Tom is designing a new text-based game and needs your help to keep track of scores for each player. Each player can gain or lose points after a series of actions. The game should maintain a running total of each player\'s score and be able to print the top player(s) at any given time, including the possibility of a tie. Tom is facing difficulty in managing this efficiently. Can you help him implement the score tracking system? -----Input----- The first line contains an integer, Q, representing the number of queries. Each of the next Q lines contains a query of one of the following two types: 1. \\"UPDATE player_name delta\\" where player_name is a string and delta is an integer. This query means updating the given player\'s score by adding delta (delta can be negative). 2. \\"TOP\\" which means printing the current top player(s). -----Output----- For each \\"TOP\\" query, output the top player(s) based on their scores. If multiple players have the same top score, output their names in alphabetical order, separated by spaces, in a single line. -----Constraints and notes----- - 1 ≤ Q ≤ 100,000 - All player names are non-empty strings with a maximum length of 30 characters and contain only lowercase English letters. - The sum of the absolute values of delta over all queries will not exceed 10^6. - Initially, all players have a score of 0. - A player who has not been mentioned in an update query yet is still considered to have a score of 0. -----Example----- Input: 6 UPDATE alice 5 UPDATE bob 3 UPDATE alice -2 TOP UPDATE charlie 6 TOP Output: bob charlie -----Explanation----- After the first three queries, the scores are: alice=3, bob=3. The first \\"TOP\\" query shows \\"bob\\" since both \\"alice\\" and \\"bob\\" tie with top scores and \\"bob\\" comes first alphabetically. After the fifth query, the scores are: alice=3, bob=3, charlie=6. The second \\"TOP\\" query shows \\"charlie\\" since charlie has the highest score.","solution":"def process_queries(queries): from collections import defaultdict scores = defaultdict(int) output = [] for query in queries: parts = query.split() if parts[0] == \\"UPDATE\\": player_name = parts[1] delta = int(parts[2]) scores[player_name] += delta elif parts[0] == \\"TOP\\": # Determine top score if not scores: output.append(\'\') continue top_score = max(scores.values()) top_players = sorted([player for player, score in scores.items() if score == top_score]) output.append(\\" \\".join(top_players)) return output"},{"question":"\\"Bishop\'s move\\" A bishop is one of the pieces on a chessboard. It moves diagonally, so it can only stay on a square of the same color it starts from. The chessboard has 8 rows and 8 columns. The position on the board is represented using coordinates in the form (r, c) where 1 ≤ r, c ≤ 8. Given the initial position of the bishop and a target position, you need to determine the minimum number of moves required for the bishop to move from the initial position to the target position on the board. If it\'s not possible for the bishop to reach the target position, return -1. Input: The first line contains an integer T, the number of test cases. The next T lines each contain four space-separated integers r1, c1, r2, c2, representing the initial and target positions on the board. Output: For each test case, output a single integer, the minimum number of moves required, or -1 if it is impossible. Constraints: 1 ≤ T ≤ 100 1 ≤ r1, c1, r2, c2 ≤ 8 SAMPLE INPUT 3 1 1 8 8 1 1 2 3 4 2 4 2 SAMPLE OUTPUT 1 -1 0 Explanation: - For the first case, the bishop can move from (1, 1) to (8, 8) in one move as it is a diagonal move. - For the second case, it is impossible for the bishop to move from (1, 1) to (2, 3). - For the third case, the initial and target positions are the same, so the number of moves required is 0.","solution":"def bishop_moves(r1, c1, r2, c2): Returns the minimum number of moves a bishop needs to move from (r1, c1) to (r2, c2). If it is not possible, return -1. # Check if both positions are on the same color if (r1 + c1) % 2 != (r2 + c2) % 2: return -1 # If same position, no move needed if r1 == r2 and c1 == c2: return 0 # Check if it\'s a direct diagonal move if abs(r1 - r2) == abs(c1 - c2): return 1 # Otherwise, it\'s possible in two moves since it\'s on the same color return 2"},{"question":"You are a researcher analyzing data on a specific kind of insect. You have a list of insects, and each insect has certain properties such as species, age, and wing length. Your task is to analyze the dataset and answer various queries about the insects. Specifically, you need to write a program that can handle the following types of queries: 1. Find the average age of all insects of a given species. 2. Find the maximum wing length among all insects that are older than a given age. Input The input consists of multiple test cases. Each test case begins with a line containing a single integer n (1 ≤ n ≤ 1000), which is the number of insects in the dataset. The next n lines each contain a description of an insect in the format: species, age, wing length. Species is a string of lowercase letters (1 ≤ |species| ≤ 10), age is an integer (0 ≤ age ≤ 100), and wing length is a real number (0 ≤ wing length ≤ 20.0). The next line contains a single integer q (1 ≤ q ≤ 100), which is the number of queries for the dataset. The following q lines each describe a query in one of the two formats: - \\"average_age species\\" - \\"max_wing_length age\\" The end of the input is indicated by a line with a single \\"0\\". Output For each query in a test case, output the result on a new line: - For \\"average_age species\\", output the average age of all insects of that species with two digits after the decimal point. If there are no insects of that species, output \\"No data\\". - For \\"max_wing_length age\\", output the maximum wing length among all insects older than the given age with two digits after the decimal point. If there are no insects older than the given age, output \\"No data\\". Example Input 3 bee 2 5.1 ant 4 8.3 bee 3 6.2 2 average_age bee max_wing_length 2 4 butterfly 1 2.5 butterfly 3 3.5 moth 5 4.5 fly 2 1.5 3 average_age butterfly average_age fly max_wing_length 2 0 Output 3.00 8.30 2.00 2.00 4.50","solution":"def analyze_insects(test_cases): results = [] for case in test_cases: n = case[\'n\'] insects = case[\'insects\'] q = case[\'q\'] queries = case[\'queries\'] species_map = {} max_wing_age_map = [] for species, age, wing_length in insects: if species not in species_map: species_map[species] = [] species_map[species].append(age) if age > 0: max_wing_age_map.append((age, wing_length)) for query in queries: parts = query.split() if parts[0] == \\"average_age\\": species = parts[1] if species not in species_map or len(species_map[species]) == 0: results.append(\\"No data\\") else: avg_age = sum(species_map[species]) / len(species_map[species]) results.append(f\\"{avg_age:.2f}\\") elif parts[0] == \\"max_wing_length\\": age_query = int(parts[1]) possible_wings = [wing_length for age, wing_length in max_wing_age_map if age > age_query] if len(possible_wings) == 0: results.append(\\"No data\\") else: max_wing_length = max(possible_wings) results.append(f\\"{max_wing_length:.2f}\\") return results # Example usage: test_cases = [ { \\"n\\": 3, \\"insects\\": [(\\"bee\\", 2, 5.1), (\\"ant\\", 4, 8.3), (\\"bee\\", 3, 6.2)], \\"q\\": 2, \\"queries\\": [\\"average_age bee\\", \\"max_wing_length 2\\"] }, { \\"n\\": 4, \\"insects\\": [(\\"butterfly\\", 1, 2.5), (\\"butterfly\\", 3, 3.5), (\\"moth\\", 5, 4.5), (\\"fly\\", 2, 1.5)], \\"q\\": 3, \\"queries\\": [\\"average_age butterfly\\", \\"average_age fly\\", \\"max_wing_length 2\\"] } ] print(analyze_insects(test_cases))"},{"question":"\\"Meeting Rooms Allocation\\" A company wants to schedule meetings in its available meeting rooms. A meeting is characterized by its start and end times. Given multiple meeting requests, your task is to determine if it is possible to allocate a room for each meeting such that no two meetings overlap in the same room. You are given multiple test cases. For each test case: 1. The first line contains an integer N, the number of meetings. 2. The next N lines each contain two space-separated integers S and E, the start and end times of a meeting. Your task is to determine if it\'s possible to allocate rooms such that no meetings overlap within the same room. Input - The first line contains the number of test cases, T. - For each test case, the first line contains the integer N. - The next N lines contain two integers S and E, providing start and end times for each meeting. Output For each test case, print \\"Yes\\" if it is possible to allocate the rooms without any overlap in the same room, otherwise, print \\"No\\". Constraints 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 0 ≤ S < E ≤ 10000 SAMPLE INPUT 2 3 0 30 5 10 15 20 2 7 10 2 4 SAMPLE OUTPUT No Yes Explanation For the first case, meetings overlap, so it is not possible to schedule all meetings in separate rooms. For the second case, there are no overlapping meetings, so it is possible to schedule all meetings in separate rooms.","solution":"def can_allocate_meeting_rooms(test_cases): results = [] for case in test_cases: n = case[0] meetings = case[1] # Sort meetings by start time, and then by end time. meetings.sort(key=lambda x: (x[0], x[1])) # Check for overlapping intervals overlap = False for i in range(1, n): if meetings[i][0] < meetings[i-1][1]: overlap = True break if overlap: results.append(\\"No\\") else: results.append(\\"Yes\\") return results"},{"question":"You are given a matrix of size n x m representing a grid. Each cell in the grid either contains \'0\' representing empty land or \'1\' representing a house. Your task is to find the shortest distance from any land cell to the nearest house cell. If it is not possible to find such a distance (i.e., there are no houses or no land cells), return -1. A distance between two cells (x1, y1) and (x2, y2) is defined as |x1 - x2| + |y1 - y2| (Manhattan distance). Input The first line contains two integers n and m (1 ≤ n, m ≤ 500), the dimensions of the grid. Each of the next n lines contains m characters (\'0\' or \'1\'), representing the grid. Output Print a single integer — the shortest distance from any land cell to the nearest house cell, or -1 if no such distance exists. Examples Input 3 3 001 010 000 Output 1 Input 3 3 111 111 111 Output -1","solution":"from collections import deque def shortest_distance_to_house(n, m, grid): Function to find the shortest distance from any land cell (\'0\') to the nearest house cell (\'1\'). Parameters: n (int): Number of rows in the grid. m (int): Number of columns in the grid. grid (List[List[str]]): The 2D grid representing the map. Returns: int: The shortest distance from any land cell to the nearest house cell, or -1 if no such distance exists. directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Create a queue for BFS and set for visited nodes queue = deque() visited = set() # Initialize the queue with all house locations for i in range(n): for j in range(m): if grid[i][j] == \'1\': # House queue.append((i, j, 0)) # (row, col, distance) visited.add((i, j)) # If no houses, return -1 if not queue: return -1 shortest_distance = float(\'inf\') # Perform BFS while queue: x, y, dist = queue.popleft() for dx, dy in directions: nx, ny = x + dx, y + dy if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in visited and grid[nx][ny] == \'0\': # If it\'s a land cell shortest_distance = min(shortest_distance, dist + 1) visited.add((nx, ny)) queue.append((nx, ny, dist + 1)) return shortest_distance if shortest_distance != float(\'inf\') else -1"},{"question":"Alex loves reading books. He has a growing collection of books in his personal library. Each book has a unique name and a single unique tag assigned to it, which categorizes the book into a specific genre or topic. Alex has noticed that managing his collection has become increasingly difficult, especially when he wants to find books with particular tags. He decided to write a program that allows him to query his library to find out all the books that have a certain tag. If there are no books with the queried tag, the program should return \\"No books found.\\" -----Input----- The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of every test case consists of a single integer N - the number of books in the library. The next N lines each contain the book\'s name (a string without spaces) and the tag associated with that book, separated by a single space. After listing the books, there will be one more line with a single integer Q, indicating the number of queries. The next Q lines contain a tag for which Alex wants to get the list of all book names that have that tag. -----Output----- For each query, output a single line containing the book names that have the queried tag, separated by commas and sorted in lexicographical order. If no books are found for that tag, output the string \\"No books found.\\" -----Example----- Input: 1 5 MobyDick Fiction Hamlet Drama OfMiceAndMen Fiction Dune SciFi Frankenstein Horror 3 Drama Fiction Fantasy Output: Hamlet MobyDick,OfMiceAndMen No books found. -----Scoring----- Subtask 1 (20 points): T = 100, 1 <= N <= 100, 1 <= Q <= 100, all names and tags consist of English letters only. Subtask 2 (30 points): T = 10, 1 <= N <= 1000, 1 <= Q <= 1000, all names and tags consist of English letters only. Subtask 3 (50 points): T = 5, 1 <= N <= 10000, 1 <= Q <= 10000, all names and tags consist of English letters only. You can safely assume that the length of any book name will not exceed 20 letters, and the length of any tag will not exceed 10 letters.","solution":"def find_books_by_tag(t, data): Given the number of test cases and a list of test case data, return the list of books that match the queried tags. result = [] index = 0 for _ in range(t): n = int(data[index]) index += 1 book_dict = {} for _ in range(n): book_entry = data[index].split() book_name = book_entry[0] book_tag = book_entry[1] if book_tag in book_dict: book_dict[book_tag].append(book_name) else: book_dict[book_tag] = [book_name] index += 1 q = int(data[index]) index += 1 for _ in range(q): query_tag = data[index] index += 1 if query_tag in book_dict: result.append(\\",\\".join(sorted(book_dict[query_tag]))) else: result.append(\\"No books found.\\") return result"},{"question":"There is a dataset that records the sales amount for different products identified by their product IDs on a daily basis. Please create a program that reads the sales data for two consecutive weeks and outputs the product ID along with the total sales amount for products that were sold in both weeks. Input The first week\'s data and the second week\'s data are given separated by one blank line. Each data is given in the following format: product_id, sales_amount product_id, sales_amount ... ... product_id (1 ≤ product_id ≤ 1,000) is an integer representing the product ID, and sales_amount (1 ≤ sales_amount ≤ 10,000) is an integer representing the sales amount for that day. Output For products that were sold in both weeks, output the product ID and the total sales amount across both weeks, separated by a space, in ascending order of the product ID. Example Input 101,500 202,3000 303,200 101,700 202,2000 404,100 Output 101 1200 202 5000","solution":"def calculate_total_sales(input_data): Given sales data for two weeks separated by a blank line, return the total sales for products that were sold in both weeks. week1_data, week2_data = input_data.strip().split(\\"nn\\") def parse_data(data): sales_dict = {} for line in data.strip().split(\\"n\\"): product_id, sales_amount = map(int, line.split(\',\')) sales_dict[product_id] = sales_dict.get(product_id, 0) + sales_amount return sales_dict week1_sales = parse_data(week1_data) week2_sales = parse_data(week2_data) common_products = set(week1_sales.keys()) & set(week2_sales.keys()) result = [(product_id, week1_sales[product_id] + week2_sales[product_id]) for product_id in common_products] result.sort() return result"},{"question":"Write a program that calculates the Greatest Common Divisor (GCD) of two integers using the Euclidean algorithm. The algorithm should be based on the following pseudocode: GCD(A, B) 1 while B ≠ 0 2 T ← B 3 B ← A mod B 4 A ← T 5 return A Note that, initially, A should be greater than or equal to B. Your program should also print each pair of values (A, B) at the start of each iteration of the loop defined in the pseudocode until B equals 0. Constraints 1 ≤ A, B ≤ 1000 Input The first line of the input includes two integers A and B, separated by a space. Output The output should consist of multiple lines. Each line should contain two integers A and B separated by a space, representing the pair of values at the start of each iteration. At the end, print the GCD of the two integers. Examples Input 48 18 Output 48 18 18 12 12 6 6 0 6 Input 56 98 Output 56 98 98 56 56 42 42 14 14 0 14","solution":"def gcd(a, b): Calculates the Greatest Common Divisor (GCD) of two integers using the Euclidean algorithm. Prints each pair of values (A, B) at the start of each iteration of the loop until B equals 0. Returns the GCD of the two integers. while b != 0: print(a, b) a, b = b, a % b print(a, 0) return a"},{"question":"Write a function that takes an unsorted list of integers and returns a list of the same integers sorted in non-decreasing order, but with all duplicate integers removed. For example: unique_sorted([4, 5, 2, 2, 3, 5, 1]) = [1, 2, 3, 4, 5] and unique_sorted([7, 8, 9, 8, 7, 6]) = [6, 7, 8, 9] The function should maintain an efficient execution time balance between sorting and removing duplicates.","solution":"def unique_sorted(lst): Returns a list of unique integers sorted in non-decreasing order. return sorted(set(lst))"},{"question":"You are given an array of integers and a target value. In one move, you can change any integer in the array to any other integer. Determine the minimum number of moves required to make all elements of the array equal to the target value. For Example: * If the array is `[1, 2, 3]` and the target value is `2`, you can change the first element to `2` and the third element to `2` in 2 moves. * If the array is `[4, 4, 4]` and the target value is `4`, no moves are needed since all elements are already equal to the target value. Implement a function that calculates the minimum number of moves to make all elements of the array equal to the target value. Notes * The array consists of integers. * The array can be empty, in which case no moves are required. * The target value is an integer that exists in the possible range of the array elements.","solution":"def min_moves_to_target(arr, target): Returns the minimum number of moves required to make all elements of the array equal to the target value. :param arr: List of integers :param target: The target value to make all elements of the array equal to :return: Minimum number of moves if not arr: return 0 moves = 0 for num in arr: if num != target: moves += 1 return moves"},{"question":"The kingdom of Naforia is hosting a programming contest, and the citizens are excited. However, the organizer, Luna, needs help to determine the ranks of participants based on their scores. She has a list of participants\' scores, and she needs to rank them such that the highest score gets the rank 1, the second highest gets rank 2, and so forth. If two participants have the same score, they should be assigned the same rank, but the next rank after a tie should skip ahead by the number of ties. Help Luna rank the participants efficiently. Input The first line contains an integer n (1 ≤ n ≤ 10^5), the number of participants. The second line contains n integers separated by spaces, representing the scores of the participants (1 ≤ scores[i] ≤ 10^9). Output Print a single line with n integers, the ranks of the participants in the order of their input scores. SAMPLE INPUT 5 100 200 100 300 200 SAMPLE OUTPUT 4 2 4 1 2","solution":"def rank_participants(scores): This function ranks the participants based on their scores. Participants with the same score will receive the same rank. sorted_scores = sorted(enumerate(scores), key=lambda x: x[1], reverse=True) rank = [0] * len(scores) current_rank = 1 rank[sorted_scores[0][0]] = current_rank for i in range(1, len(scores)): if sorted_scores[i][1] == sorted_scores[i - 1][1]: rank[sorted_scores[i][0]] = current_rank else: current_rank = i + 1 rank[sorted_scores[i][0]] = current_rank return rank # Test the function with the example input and output scores = [100, 200, 100, 300, 200] print(rank_participants(scores)) # Should print [4, 2, 4, 1, 2]"},{"question":"Write a program that converts a given infix expression to its corresponding postfix expression. Infix expressions are the common form of expressions, where operators are written between operands. Postfix expressions, also known as Reverse Polish Notation (RPN), have operators written after their operands. # Constraints - The infix expression will contain only single lowercase English letters (a-z) as operands and the characters `+`, `-`, `*`, `/` as operators. - The maximum length of the infix expression is 100. # Input The input consists of multiple test cases. The first line contains the number of test cases t (1 leq t leq 10). Each of the following t lines contains an infix expression. # Output For each test case, output the corresponding postfix expression on a new line. # Example Input ``` 2 a+b*c (a+b)*c ``` Output ``` abc*+ ab+c* ``` # Note All infix expressions given will be valid, and matching parentheses should be handled appropriately. Operands and operators are separated by single spaces in the input and output, while parentheses are not separated by spaces. # Explanation In the first test case, the postfix notation of `a + b * c` is `a b c * +`. In the second test case, the postfix notation of `(a + b) * c` is `a b + c *`.","solution":"def infix_to_postfix(expression): Convert an infix expression to its corresponding postfix expression. Parameters: expression (str): The infix expression. Returns: str: The postfix expression. precedence = {\'+\': 1, \'-\': 1, \'*\': 2, \'/\': 2} stack = [] output = [] for char in expression: if char.isalpha(): # Operand output.append(char) elif char == \'(\': # Opening parenthesis stack.append(char) elif char == \')\': # Closing parenthesis while stack and stack[-1] != \'(\': output.append(stack.pop()) stack.pop() # Pop the \'(\' else: # Operator while stack and stack[-1] != \'(\' and precedence[char] <= precedence[stack[-1]]: output.append(stack.pop()) stack.append(char) # Pop all the remaining operators in the stack while stack: output.append(stack.pop()) return \'\'.join(output) def infix_to_postfix_multiple_cases(t, expressions): Converts multiple infix expressions to postfix expressions. Parameters: t (int): Number of test cases. expressions (list of str): List of infix expressions. Returns: list of str: List of corresponding postfix expressions. return [infix_to_postfix(expression) for expression in expressions]"},{"question":"Write a function that takes a list of integers and returns the greatest product of any two distinct numbers in the list. For example, ```python max_product([1, 2, 3]) ``` should return 6, because the greatest product of any two distinct numbers in the list is 2 x 3 = 6. ```python max_product([-10, -10, 5, 2]) ``` should return 100, because the greatest product of any two distinct numbers in the list is (-10) x (-10) = 100. The list passed to max_product may have positive or negative numbers and will contain at least two elements. Ensure your function handles both positive and negative values correctly.","solution":"def max_product(lst): Returns the greatest product of any two distinct numbers in the list. if len(lst) < 2: raise ValueError(\\"List must contain at least two elements.\\") lst.sort() # The greatest product could be from the two largest positive numbers # or from the two smallest (most negative) numbers. return max(lst[0] * lst[1], lst[-1] * lst[-2])"},{"question":"=====Problem Statement===== In this challenge, your task is to create a function that analyzes a list of strings and determines the number of words that contain all five vowels (a, e, i, o, u) at least once. Function all_vowels(words) takes a list of lowercase words and returns the count of words containing all five vowels. =====Input Format===== The input is read by the provided locked code template. In the first line, there is a single integer n denoting the number of words. In the second line, there are n space-separated lowercase words. =====Constraints===== 1≤n≤20 Each word has at most 20 letters and all letters are English lowercase letters =====Output Format===== The output is produced by the provided locked code template, which calls function all_vowels with the list of words read from the input as the argument and prints the returned count of words containing all five vowels. =====Example===== Input: 4 education automobile unicorn communication Output: 2 Explanation: \\"education\\" and \\"communication\\" both contain all five vowels (a, e, i, o, u).","solution":"def all_vowels(words): Returns the count of words that contain all five vowels (a, e, i, o, u). vowels = set(\'aeiou\') count = 0 for word in words: if vowels.issubset(word): count += 1 return count"},{"question":"Given two lists of integers `list1` and `list2`, write a function `common_elements(list1, list2)` that returns a new list containing all elements that are present in both `list1` and `list2`. The elements in the result list should be in decreasing order. If there are no common elements, return an empty list. For example: ```python >>> common_elements([4, 3, 7, 9], [3, 9, 10, 11]) [9, 3] >>> common_elements([1, 2, 3], [4, 5, 6]) [] >>> common_elements([5, 5, 10, 20], [5, 10, 20, 20]) [20, 10, 5] ```","solution":"def common_elements(list1, list2): Returns a new list containing all elements that are present in both list1 and list2. The elements in the result list are in decreasing order. # Find the intersection of both lists common_set = set(list1) & set(list2) # Convert the set to a sorted list in decreasing order return sorted(common_set, reverse=True)"},{"question":"Marie has a collection of vintage books which she buys and sells online. Each book has a unique identifier (an integer) and a price (also an integer, in dollars). Over time, Marie accumulates some books that she cannot sell for various reasons, and she just keeps them in storage. Recently, she decided to declutter her storage by keeping only the most expensive books, but she only has limited shelf space that can hold up to `k` books. To make things easier, she wants to develop a program to help her determine which books to keep. Your task is to help Marie by writing a program that reads the list of books with their prices and outputs the identifiers of the `k` most expensive books. If there are multiple books with the same price, the book with the smaller identifier should be preferred. The list of identifiers should be sorted in ascending order. -----Input----- - The first line of input contains two integers separated by space: `n` (`1 ≤ n ≤ 10000`), the number of books, and `k` (`1 ≤ k ≤ n`), the number of books she can keep. - The next `n` lines each contain two integers separated by space: `id` and `price`, where `id` (`1 ≤ id ≤ 100000`) is the unique identifier of the book and `price` (`1 ≤ price ≤ 100000`) is the price of the book. -----Output----- - Output `k` integers on a single line separated by spaces, representing the identifiers of the books Marie should keep, sorted in ascending order. -----Examples----- Sample Input: 5 3 101 25 102 30 103 25 104 30 105 20 Sample Output: 102 104 101 Explanation: Marie can keep only three books. The most expensive books are those with identifiers 102 and 104 each priced at 30. The next most expensive book is with identifier 101 priced at 25.","solution":"def find_books_to_keep(n, k, books): Returns the identifiers of the k most expensive books that Marie should keep. If multiple books have the same price, the book with the smaller identifier is preferred. # Sort books first by price in descending order, then by id in ascending order sorted_books = sorted(books, key=lambda x: (-x[1], x[0])) # Take the first k books from the sorted list most_expensive_books = sorted_books[:k] # Extract the ids and sort them result = [book[0] for book in most_expensive_books] result.sort() return result # Example of usage: # n = 5 # k = 3 # books = [(101, 25), (102, 30), (103, 25), (104, 30), (105, 20)] # print(find_books_to_keep(n, k, books)) # Output: [101, 102, 104]"},{"question":"You are tasked to develop an online shopping system that tracks the prices of n products over m days. For each day, you will receive the price change of some products. After each day, you need to answer the following query: What is the total cost if you buy one unit of each product? Input: The first line contains two integers n (1 ≤ n ≤ 100,000) and m (1 ≤ m ≤ 100,000) – the number of products and the number of days. The second line contains n integers – the initial prices of the products. Each of the next m lines describes a daily price update or a query and is in one of the following two formats: 1. `1 p v` - indicating that the price of the p-th product is updated to v (1 ≤ p ≤ n, 0 ≤ v ≤ 10^9). 2. `2` - indicating a query for the total cost of one unit of each product. Output: For each query, print the total cost of one unit of each product on a new line. Examples: Input: 5 3 1 2 3 4 5 2 1 3 10 2 Output: 15 22 Input: 4 5 5 10 15 20 2 1 1 100 2 1 4 50 2 Output: 50 145 175 Note: - Initially, the prices of the products are {1, 2, 3, 4, 5}. - The first query asks for the total cost, which is 1+2+3+4+5=15. - The third query updates the price of the third product to 10, so the prices become {1, 2, 10, 4, 5}. - The second query now asks for the total cost, which is 1+2+10+4+5=22.","solution":"def track_prices_and_queries(n, m, initial_prices, operations): Tracks prices of products over days and handles queries to give total cost. :param n: Number of products :param m: Number of days/operations :param initial_prices: List of initial prices of products :param operations: List of operations (price updates or queries) :return: List of results for each query prices = initial_prices[:] total_cost = sum(prices) results = [] for operation in operations: if operation[0] == 1: # Update operation: 1 p v p, v = operation[1], operation[2] total_cost += v - prices[p - 1] prices[p - 1] = v elif operation[0] == 2: # Query operation: 2 results.append(total_cost) return results # Example usage n = 5 m = 3 initial_prices = [1, 2, 3, 4, 5] operations = [ [2], [1, 3, 10], [2] ] print(track_prices_and_queries(n, m, initial_prices, operations)) # Output: [15, 22]"},{"question":"Louisa is a fan of word puzzles and she likes to create new words by shuffling the letters of a given word using any number of operations. She wants to know if a target word can be formed by performing exactly one swap of any two letters of a given source word. You need to help Louisa determine if it is possible to form the target word by swapping exactly two letters in the source word once. Input The first line contains the source word consisting of lowercase Latin letters. The second line contains the target word consisting of lowercase Latin letters. Both words are non-empty and have the same length, not exceeding 100 characters. Output If it is possible to form the target word by making exactly one swap in the source word, print YES; otherwise, print NO. Examples Input listen silent Output NO Input converse conserve Output YES Input abcde abced Output YES Input example samples Output NO Input racecar racecra Output YES","solution":"def can_transform_by_one_swap(source: str, target: str) -> str: Check if the target word can be formed by performing exactly one swap of any two letters of the source word. if len(source) != len(target): return \\"NO\\" # Find the positions where the two words differ differences = [] for i in range(len(source)): if source[i] != target[i]: differences.append(i) # If there are not exactly two differences, return \\"NO\\" if len(differences) != 2: return \\"NO\\" # Check if swapping the differing characters in source makes it equal to target i, j = differences if source[i] == target[j] and source[j] == target[i]: return \\"YES\\" return \\"NO\\""},{"question":"Chef is trying to stay on a healthy diet and has started tracking his calorie intake. He wants to make sure he doesn’t exceed a certain number of calories per meal. However, his refrigerator contains a variety of food items stored in containers, each with a different calorie count. He plans to select just one container for each meal. Chef needs your help to figure out if he can adhere to his diet plan. Given multiple test cases, for each test case, you are provided the maximum calories Chef can consume in a meal (C), the number of containers in his refrigerator (N), and a list of the calorie count of each container. Determine whether there is at least one container Chef can choose for his meal without exceeding the maximum calorie limit. ------ Input ------ The first line contains an integer T, denoting the number of test cases. Each test case consists of two lines: - First line contains two integers C and N, representing the maximum calories allowed in a meal and the number of containers, respectively. - Second line contains N space-separated integers, where the i-th integer represents the calorie count of the i-th container. ------ Output ------ For each test case, print \\"DietSuccess\\" if Chef can find at least one container that does not exceed the calorie limit, otherwise print \\"DietFail\\" (quotes for clarity). ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ C ≤ 10^3 1 ≤ N ≤ 10^3 1 ≤ calorie_count_i ≤ 10^3 ------ Sample Input 1 ------ 3 500 3 600 400 300 200 2 250 300 100 5 90 85 80 95 100 ------ Sample Output 1 ------ DietSuccess DietFail DietSuccess ------ Explanation 1 ------ Example case 1: Chef can choose the second or third container, which have 400 and 300 calories respectively, both of which are under the limit of 500 calories. Example case 2: Both containers exceed the maximum allowed calorie limit of 200, so Chef cannot choose any container. Example case 3: All five containers have calorie counts that do not exceed the limit of 100, so Chef can choose any of them.","solution":"def can_adhere_to_diet(T, test_cases): results = [] for i in range(T): C, N, calorie_counts = test_cases[i] if any(calorie <= C for calorie in calorie_counts): results.append(\\"DietSuccess\\") else: results.append(\\"DietFail\\") return results"},{"question":"Given an array of n integers, find the maximum length of a subarray where the absolute difference between any two elements is less than or equal to 1. For example, in the array [1, 1, 2, 2, 4, 4, 5, 5, 5], a subarray that satisfies the condition is [1, 1, 2, 2]. Function Description Complete the function maxLengthSubarray in the editor below. The function should return an integer representing the maximum length of a subarray where the absolute difference between any two elements is less than or equal to 1. maxLengthSubarray has the following parameter(s): int arr[n]: the array to analyze Input Format The first line contains an integer n, the number of elements in the array arr. The second line contains n space-separated integers arr[i] where 1 ≤ i ≤ n. Returns int: an integer that represents the length of the longest subarray that meets the condition Constraints 1 ≤ n ≤ 1000 0 ≤ arr[i] ≤ 1000 Sample Input 6 1 1 2 2 3 4 Sample Output 4 Explanation The subarray [1, 1, 2, 2] is the longest subarray where the absolute difference between any two elements is less than or equal to 1. Its length is 4.","solution":"def maxLengthSubarray(arr): from collections import defaultdict # Frequency dictionary to keep track of the occurrence of each number freq = defaultdict(int) max_length = 0 for num in arr: freq[num] += 1 # Check the combination of each number and its consecutive number for num in set(arr): if num + 1 in freq: max_length = max(max_length, freq[num] + freq[num + 1]) max_length = max(max_length, freq[num]) return max_length"},{"question":"Five years ago, Alice planted a magical tree that grows in a very peculiar way. Each year, the tree grows branches following this pattern: - In odd-numbered years, each existing branch produces 3 new branches. - In even-numbered years, each existing branch produces 2 new branches. In the first year, Alice planted exactly one branch. Given an integer N, representing the number of years since Alice planted the tree, your task is to find the number of branches present on the tree after N years. -----Input----- The input consists of a single integer N (1 ≤ N ≤ 50) — the number of years that have passed since Alice planted the tree. -----Output----- Print one integer — the number of branches on the tree after N years. -----Examples----- Input 1 Output 4 Input 2 Output 8 Input 5 Output 108","solution":"def count_branches(N): branches = 1 # Initially, there is 1 branch for year in range(1, N + 1): if year % 2 == 1: # Odd year branches *= 4 # Each branch produces 3 new, so total becomes 4 times else: # Even year branches *= 2 # Each branch produces 2 new, so total becomes 3 times return branches"},{"question":"Write a function, `unique_characters_count(input_str: str) -> dict`, that takes a string consisting of only uppercase and lowercase alphabets and returns a dictionary with the counts of the occurrences of each character. Example: ```python input_str = \\"Programming\\" unique_characters_count(input_str) ``` Output: ```python {\'P\': 1, \'r\': 2, \'o\': 1, \'g\': 2, \'a\': 1, \'m\': 2, \'i\': 1, \'n\': 1} ``` Additionally, demonstrate that the function is case-sensitive. For example: ```python input_str = \\"AaBbCc\\" unique_characters_count(input_str) ``` Output: ```python {\'A\': 1, \'a\': 1, \'B\': 1, \'b\': 1, \'C\': 1, \'c\': 1} ``` Constraints: - Each character in the input string will be either an uppercase or a lowercase alphabet. - You may use in-built Python functions to aid in character counting, but you should not use libraries like `collections` for this simple task. - The function should handle strings of length up to 1000 characters efficiently. Note: Comment the function and clearly describe your approach step-by-step.","solution":"def unique_characters_count(input_str: str) -> dict: This function takes a string consisting of only uppercase and lowercase alphabets and returns a dictionary with the counts of the occurrences of each character. The function is case-sensitive. Args: input_str (str): The input string containing only uppercase and lowercase alphabets. Returns: dict: A dictionary with characters as keys and their counts as values. character_counts = {} for char in input_str: if char in character_counts: character_counts[char] += 1 else: character_counts[char] = 1 return character_counts"},{"question":"In a programming challenge, you are tasked with controlling a simple robot that can navigate a 2D grid. The robot starts at position (0, 0) and can move one unit at a time in four possible directions: up, down, left, and right. The robot should follow a sequence of movement commands and then report its final position on the grid. The commands are provided as a string where each character represents a movement direction: - \'U\' for up (increases the y-coordinate by 1) - \'D\' for down (decreases the y-coordinate by 1) - \'L\' for left (decreases the x-coordinate by 1) - \'R\' for right (increases the x-coordinate by 1) Write a program that reads the sequence of commands and computes the robot\'s final position on the grid after following all the commands. -----Input----- - One line containing a string S (0 ≤ length of S ≤ 50), the sequence of commands. -----Output----- - One line containing the final x and y coordinates of the robot, separated by a space. -----Examples----- Sample Input: \\"UUDDLRLR\\" Sample Output: 0 0 Sample Input: \\"UUUDDLR\\" Sample Output: 0 1","solution":"def final_robot_position(commands): Computes the final position of the robot on a 2D grid after following a sequence of movement commands. Parameters: commands (str): A string containing the sequence of movement commands. Returns: tuple: A tuple (x, y) representing the final coordinates of the robot. x, y = 0, 0 for command in commands: if command == \'U\': y += 1 elif command == \'D\': y -= 1 elif command == \'L\': x -= 1 elif command == \'R\': x += 1 return x, y"},{"question":"Your task is to design a custom data structure that efficiently supports the following operations for a sequence of integers: 1. `insert(x)`: Insert an integer `x` into the sequence. 2. `remove(x)`: Remove an integer `x` from the sequence if it exists. 3. `get_median()`: Return the median of the current sequence of integers. If the sequence\'s length is even, the median is the average of the two middle numbers. Note that: - The operations need to be optimized for the best possible performance. - The sequence can contain duplicate values. - Initially, the sequence is empty, and you will be given a series of operations to perform. -----Input----- - The first line contains an integer `q` (1 ≤ q ≤ 10^5), the number of operations. - The next `q` lines each contain an operation in one of the following formats: * `insert x` (1 ≤ x ≤ 10^9): Insert an integer `x` into the sequence. * `remove x` (1 ≤ x ≤ 10^9): Remove an integer `x` from the sequence if it exists. * `get_median`: Output the median of the sequence. -----Output----- - For each `get_median` operation, print the median on a new line. If the sequence is empty, print \\"Empty\\". -----Examples----- Input 6 insert 1 insert 3 get_median remove 1 get_median insert 1 Output 2 3","solution":"import bisect class MedianDataStructure: def __init__(self): self.data = [] def insert(self, x): bisect.insort(self.data, x) def remove(self, x): if x in self.data: self.data.remove(x) def get_median(self): n = len(self.data) if n == 0: return \\"Empty\\" if n % 2 == 1: return self.data[n // 2] else: mid1 = self.data[n // 2 - 1] mid2 = self.data[n // 2] return (mid1 + mid2) / 2"},{"question":"Given two integers N and M, find an array A = [A_1, A_2, ... , A_N] of length N consisting of distinct integers from 1 to 10^9, such that the following condition is satisfied: The absolute difference between any two consecutive elements in the array is divisible by M, i.e., |A_{i+1} - A_i| is divisible by M for all 1 ≤ i < N. It can be proven that such an array always exists under the given constraints. If there are multiple possible arrays, you may print any of them. ------ Input Format ------ - The first line of the input contains a single integer T, denoting the number of test cases. The description of T test cases follows. - Each test case consists of a single line containing two positive integers N and M. ------ Output Format ------ For each test case, print one line containing N space-separated integers, the contents of the array A. ------ Constraints ------ 1 ≤ T ≤ 100 1 ≤ N ≤ 1000 1 ≤ M ≤ 10^9 - Sum of N over all test cases doesn\'t exceed 5000 ------ Sample Input 1 ------ 3 1 2 2 3 3 1 ------ Sample Output 1 ------ 1 1 4 1 2 3 ------ Explanation 1 ------ Test case 1: For array A = [1], - The array has only one element, so the condition is trivially satisfied. Test case 2: For array A = [1, 4], - The absolute difference |4 - 1| = 3, which is divisible by 3. Test case 3: For array A =[1, 2, 3], - The absolute difference |2 - 1| = 1, which is divisible by 1. - The absolute difference |3 - 2| = 1, which is divisible by 1.","solution":"def generate_array(N, M): Generates an array of length N such that the absolute difference between any two consecutive elements is divisible by M. return [i * M + 1 for i in range(N)] def solve(test_cases): results = [] for N, M in test_cases: array = generate_array(N, M) results.append(array) return results"},{"question":"Bob has an array of N integers and he wants to perform Q operations. Each operation is either an update of a specific element of the array or a query for the sum of elements within a specific range. Write a program to help Bob manage the array and perform these operations efficiently. Input Format: First line contains two integers N and Q, the size of the array and number of operations. The second line contains N space-separated integers representing the array. The next Q lines contain operations in the following format: - \\"1 x y\\" indicates an update operation, where the x-th element of the array should be updated to y. - \\"2 l r\\" indicates a query operation, where you need to find the sum of elements from index l to r (inclusive). Output Format: For each query operation, output a single line containing the sum of elements in the specified range. Constraints: 1 ≤ N, Q ≤ 10^5 1 ≤ x, l, r ≤ N -10^4 ≤ array elements, y ≤ 10^4 SAMPLE INPUT 5 3 5 2 4 7 10 2 1 3 1 2 8 2 2 4 SAMPLE OUTPUT 11 19","solution":"class SegmentTree: def __init__(self, array): self.n = len(array) self.tree = [0] * (2 * self.n) self.build(array) def build(self, array): # Initialize leaves for i in range(self.n): self.tree[self.n + i] = array[i] # Construct the segment tree for i in range(self.n - 1, 0, -1): self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1] def update(self, pos, value): # Update the leaf node pos += self.n self.tree[pos] = value # Update the rest of the tree while pos > 1: pos //= 2 self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1] def query(self, l, r): # sum on interval [l, r) l += self.n r += self.n sum_val = 0 while l < r: if l % 2: sum_val += self.tree[l] l += 1 if r % 2: r -= 1 sum_val += self.tree[r] l //= 2 r //= 2 return sum_val def process_input(N, Q, array, operations): seg_tree = SegmentTree(array) result = [] for operation in operations: if operation[0] == 1: _, x, y = operation seg_tree.update(x - 1, y) # 1-based to 0-based index elif operation[0] == 2: _, l, r = operation result.append(seg_tree.query(l - 1, r)) # 1-based to 0-based index return result"},{"question":"Mohan is a nature photographer who is trying to find the most efficient way to photograph different species of birds sitting on trees. He has captured N trees, each of which has a certain number of birds on it. Due to safety restrictions, he can only photograph a certain number of birds in one shot. Additionally, Mohan\'s camera needs a cooldown after it captures a shot, equivalent to the number of birds it just photographed (i.e., if he photographs k birds in one shot, the camera will need k seconds of cooldown time before it can be used again). Help Mohan determine the minimum amount of time required to photograph all the birds on all trees, given that he can selectively choose how many and which birds to photograph in any shot under the condition mentioned above. ------ Input Format ------ - The first line of input will contain a single integer T, denoting the number of test cases. - Each test case starts with a line containing an integer N, the number of trees. - The next line contains N space-separated integers where the i-th integer represents the number of birds on the i-th tree. ------ Output Format ------ For each test case, output on a single line the minimum amount of time required to photograph all the birds. ------ Constraints ------ 1 ≤ T ≤ 1000 1 ≤ N ≤ 100 1 ≤ text{Number of birds on each tree} ≤ 10^3 ----- Sample Input 1 ------ 2 3 2 3 4 4 1 2 3 4 ----- Sample Output 1 ------ 10 7 ----- Explanation 1 ------ Test case 1: Minimum time to photograph all birds is 10 seconds. Mohan can follow this approach: - First shot: 2 birds from the first tree (2 sec) - Second shot: 3 birds from the second tree (5 sec) - Third shot: 4 birds from the third tree (9 sec) Test case 2: Minimum time to photograph all birds is 7 seconds. Mohan can follow this approach: - First shot: 1 bird from the first tree (1 sec) - Second shot: 2 birds from the second tree (3 sec) - Third shot: 3 birds from the third tree (6 sec) - Fourth shot: 4 birds from the fourth tree (10 sec)","solution":"def min_photograph_time(test_cases): results = [] for test in test_cases: N, birds_on_trees = test total_time = 0 for birds in birds_on_trees: total_time += birds results.append(total_time) return results"},{"question":"You have a string consisting of lowercase Latin letters and the question is whether you can obtain this string by concatenating some (not necessarily different) words from a given dictionary in some order. A word from the dictionary can be used more than once. -----Input----- The first line contains a single integer t (1 leq t leq 200) — the number of test cases. Each test case contains two elements: The first line is a string s (1 leq |s| leq 3000). The second line is a single integer n (1 leq n leq 100) indicating the size of the dictionary. The next n lines contain one string each — the words in the dictionary. Each word consists of only lowercase Latin letters and is at most 300 characters long. -----Output----- For each test case, output \\"YES\\" (without quotes) if the given string can be obtained by concatenating some (not necessarily different) words from the dictionary, and \\"NO\\" (without quotes) otherwise. -----Examples----- Input 3 applepenapple 3 apple pen applepen catsandog 5 cats dog sand and cat pineapplepenapple 4 apple pen pine pineapple Output YES NO YES -----Note----- In the first test case, the string s can be formed by concatenating \\"apple\\" + \\"pen\\" + \\"apple\\" (or \\"applepen\\" + \\"apple\\"). In the second test case, it is not possible to form the string \\"catsandog\\" using the words provided in the dictionary. In the third test case, the string s can be formed by concatenating \\"pine\\" + \\"apple\\" + \\"pen\\" + \\"apple\\" (or other combinations such as \\"pineapple\\" + \\"pen\\" + \\"apple\\").","solution":"def can_form_string(t, test_cases): results = [] for i in range(t): s, n, words = test_cases[i] word_set = set(words) dp = [False] * (len(s) + 1) dp[0] = True for j in range(1, len(s) + 1): for k in range(j): if dp[k] and s[k:j] in word_set: dp[j] = True break results.append(\\"YES\\" if dp[len(s)] else \\"NO\\") return results"},{"question":"Bruce Wayne is working on designing a new security system for the Batcave. He needs a function to check if a given password is strong enough. A password is considered strong if: 1. It is at least 8 characters long. 2. It has at least one uppercase letter. 3. It has at least one lowercase letter. 4. It has at least one digit. 5. It has at least one special character from - ! @ # % ^ & * Given a password as a string, determine whether it meets the requirements for being a strong password or not. Example 1: Input: Password = \\"Abcdef1!\\" Output: STRONG Explanation: The password meets all the criteria. Example 2: Input: Password = \\"Abc1!\\" Output: WEAK Explanation: The password is less than 8 characters long. Example 3: Input: Password = \\"abcdefg1\\" Output: WEAK Explanation: The password does not contain any uppercase letters or special characters. Your Task: This is a function problem. The input is already taken care of by the driver code. You only need to complete the function checkPasswordStrength() that takes a string (password) and returns \\"STRONG\\" if the password meets the criteria, otherwise returns \\"WEAK\\". The driver code takes care of the printing. Expected Time Complexity: O(N), where N is the length of the password. Expected Auxiliary Space: O(1). Constraints: 1 ≤ |Password| ≤ 100000","solution":"import re def checkPasswordStrength(password): Check if a password is strong. Parameters: password (str): The password to be checked. Returns: str: \\"STRONG\\" if the password meets the criteria, otherwise \\"WEAK\\". # Check length if len(password) < 8: return \\"WEAK\\" # Define pattern for the checks has_upper = re.search(r\'[A-Z]\', password) has_lower = re.search(r\'[a-z]\', password) has_digit = re.search(r\'d\', password) has_special = re.search(r\'[-!@#%^&*]\', password) # If all conditions are met, return \\"STRONG\\" if has_upper and has_lower and has_digit and has_special: return \\"STRONG\\" return \\"WEAK\\""},{"question":"Harry is a software engineer who loves puzzles and riddles. One day, he encountered a peculiar numerical sequence problem. The sequence is defined as follows: 1. Start with a given number `x` (1 <= x <= 10^9). 2. Perform an operation of your choice among the following: - Add 1 to the number `x`. - Subtract 1 from the number `x`. Harry\'s goal is to transform the number `x` into another given number `y` (1 <= y <= 10^9) using the minimum possible number of operations. An operation consists of adding or subtracting 1. You need to help Harry determine the minimum number of operations required to transform `x` into `y` and output one such sequence of operations. -----Input----- The input contains multiple test cases. The first line contains the number of test cases `t` (1 <= t <= 20). The description of the test cases follows. Each test case contains two integers `x` and `y` (1 <= x, y <= 10^9) in a single line. -----Output----- For each test case, print the minimum number of operations required. In the next line, print the sequence of operations (each operation separated by a space). Use \'+\' for adding 1 and \'-\' for subtracting 1. -----Examples----- Input 3 5 8 10 7 3 3 Output 3 + + + 3 - - - 0 -----Note----- In the first sample test case, one possible sequence of operations is as follows: \\"+ + +\\". Starting from 5, the operations are: 5 -> 6 -> 7 -> 8 In the second sample test case, one possible sequence of operations is as follows: \\"- - -\\". Starting from 10, the operations are: 10 -> 9 -> 8 -> 7 In the third sample test case, since x is already equal to y, the number of operations required is 0, and there are no operations to perform.","solution":"def sequence_operations(t, test_cases): results = [] for x, y in test_cases: operations = abs(y - x) if x < y: op_sequence = \'+ \' * operations elif x > y: op_sequence = \'- \' * operations else: op_sequence = \'\' results.append((operations, op_sequence.strip())) return results"},{"question":"Consider a circular array consisting of N elements denoted as a1, a2, ..., aN. Each element ai (1 ≤ i ≤ N) is initially set to 0. You can perform two types of operations on this array: 1. 1 L R X – increment each element ai in the range [L, R] (inclusive, 1-based indices) by the value X. 2. 2 L R – compute the sum of all elements ai in the range [L, R] (inclusive, 1-based indices). Given a series of M operations, your task is to perform each operation and output the results of the sum operations. Input The first line contains two integers N and M (1 ≤ N, M ≤ 100000) – the number of elements in the array and the number of operations, respectively. The next M lines contain the operations: * 1 L R X (1 ≤ L, R ≤ N, 1 ≤ X ≤ 1000) – increment operation as described above. * 2 L R (1 ≤ L, R ≤ N) – sum operation as described above. Output For each sum operation, print one integer – the sum of elements in the specified range. Example Input 5 6 1 1 3 10 2 1 3 1 2 5 5 2 1 3 2 2 4 1 1 5 2 Output 30 45 20 Note In the example, the array elements evolve as follows: * Initial: [0, 0, 0, 0, 0] * After the first operation \\"1 1 3 10\\": [10, 10, 10, 0, 0] * Sum of elements from index 1 to 3: 10 + 10 + 10 = 30 * After the third operation \\"1 2 5 5\\": [10, 15, 15, 5, 5] * Sum of elements from index 1 to 3: 10 + 15 + 15 = 40 * Sum of elements from index 2 to 4: 15 + 15 + 5 = 35 * After the sixth operation \\"1 1 5 2\\": [12, 17, 17, 7, 7]","solution":"def circular_array_operations(N, M, operations): Perform operations on a circular array and return the results of sum operations. Args: N: int - The number of elements in the array. M: int - The number of operations. operations: List of tuples, where each tuple represents an operation. Returns: List[int] - Results of each sum operation. arr = [0] * N results = [] for operation in operations: if operation[0] == 1: # Increment operation _, L, R, X = operation for i in range(L-1, R): arr[i] += X elif operation[0] == 2: # Sum operation _, L, R = operation results.append(sum(arr[L-1:R])) return results"},{"question":"You are given a string `s` and an array of strings `words`. Your task is to determine the number of strings in `words` that are subsequences of `s`. A subsequence of a string is defined as a new string generated from the original string with some characters deleted without changing the relative order of the remaining characters. Example 1: Input: s = \\"abcde\\", words = [\\"a\\", \\"bb\\", \\"acd\\", \\"ace\\"] Output: 3 Explanation: Three strings in words (\\"a\\", \\"acd\\", \\"ace\\") are subsequences of \\"abcde\\". Example 2: Input: s = \\"abc\\", words = [\\"a\\", \\"b\\", \\"c\\", \\"ab\\", \\"ac\\", \\"bc\\", \\"abc\\"] Output: 7 Explanation: All strings in words are subsequences of \\"abc\\". Example 3: Input: s = \\"test\\", words = [\\"t\\", \\"e\\", \\"st\\", \\"te\\", \\"es\\", \\"tes\\"] Output: 6 Explanation: All strings in words except \\"es\\" are subsequences of \\"test\\". Example 4: Input: s = \\"xyz\\", words = [\\"x\\", \\"y\\", \\"z\\", \\"xy\\", \\"xz\\", \\"yz\\", \\"xyz\\", \\"yza\\"] Output: 7 Explanation: All strings in words except \\"yza\\" are subsequences of \\"xyz\\". Constraints: - 1 <= s.length <= 500 - 1 <= words.length <= 5000 - 1 <= words[i].length <= 50 - s and words[i] consist of only lowercase English letters.","solution":"def is_subsequence(s, word): Returns True if word is a subsequence of s. it = iter(s) return all(char in it for char in word) def num_matching_subseq(s, words): Returns the count of words that are subsequences of s. return sum(is_subsequence(s, word) for word in words)"},{"question":"Given an array of integers, you need to implement a function that sorts the array in ascending order based on the frequency of the values. If multiple values have the same frequency, they should appear in ascending order. Input First line contains an integer n, the number of elements in the array (1 <= n <= 100). Second line contains n space-separated integers, the elements of the array (-100 <= element <= 100). Output Print the sorted array based on the frequency of each value. If multiple values have the same frequency, they should appear in ascending order. Example Input: 6 4 5 6 5 4 3 Output: 3 6 4 4 5 5 Input: 5 9 9 4 8 8 Output: 4 8 8 9 9 Explanation Case 1. The frequencies of the elements are: - 3: 1 time - 4: 2 times - 5: 2 times - 6: 1 time The array sorted by frequency, then by value is [3, 6, 4, 4, 5, 5]. Case 2. The frequencies of the elements are: - 4: 1 time - 8: 2 times - 9: 2 times The array sorted by frequency, then by value is [4, 8, 8, 9, 9].","solution":"from collections import Counter def sort_by_frequency(arr): Sort the array in ascending order based on the frequency of the values. If multiple values have the same frequency, they should appear in ascending order. count = Counter(arr) # Sort primarily by frequency, secondarily by value sorted_arr = sorted(arr, key=lambda x: (count[x], x)) return sorted_arr def formatted_output(n, arr): return \\" \\".join(map(str, sort_by_frequency(arr)))"},{"question":"Task: Create a function `string_transform` that transforms a given string based on a set of specific replacement rules. The function accepts two inputs: a string and a list of tuples. Each tuple contains two elements: a character to be replaced and its replacement character. The function should apply all the replacement rules to the string in the order they appear in the list, and return the transformed string. The replacements are case-sensitive, and you should not use built-in functions like `str.replace`. For example: ``` def string_transform(s, rules): # Your code here # Example use case result = string_transform(\\"abcdef\\", [(\'a\', \'1\'), (\'b\', \'2\'), (\'c\', \'3\')]) print(result) # Output: \\"123def\\" ``` # Constraints: - The input string will only contain printable ASCII characters. - The length of the input string will be between 1 and 1000. - The list of tuples will contain between 1 and 100 tuples. - Each character in the string may appear in the replacement rules multiple times. - Each tuple in the list will contain exactly two elements: a single character to be replaced, and its replacement character. # Notes: - Ensure that the replacement is performed in the strict order of the rules provided. - You need to implement the replacement process manually without using built-in replace functions.","solution":"def string_transform(s, rules): Transforms a given string based on a set of specific replacement rules. Parameters: s (str): The input string to be transformed. rules (list of tuples): A list of tuples where each tuple contains a character to be replaced and its replacement character. Returns: str: The transformed string after applying all the replacement rules in the given order. result = list(s) for old_char, new_char in rules: for i in range(len(result)): if result[i] == old_char: result[i] = new_char return \'\'.join(result)"},{"question":"You are given a grid of size N x N composed of the characters \'1\' and \'0\'. Your goal is to determine if there is a path from the top-left corner of the grid (0, 0) to the bottom-right corner of the grid (N-1, N-1) moving only on cells containing \'1\'. You can only move up, down, left, or right. -----Constraints----- - 2 ≤ N ≤ 50 - Each cell in the grid contains either \'1\' or \'0\'. -----Input----- Input is given from Standard Input in the following format: N s_{11} s_{12} ... s_{1N} s_{21} s_{22} ... s_{2N} : s_{N1} s_{N2} ... s_{NN} -----Output----- Print \\"YES\\" if such a path exists, and \\"NO\\" otherwise. -----Sample Input 1----- 3 110 010 011 -----Sample Output 1----- YES -----Sample Input 2----- 3 100 010 001 -----Sample Output 2----- NO","solution":"def path_exists(grid): N = len(grid) if grid[0][0] == \'0\' or grid[N-1][N-1] == \'0\': return \\"NO\\" visited = [[False] * N for _ in range(N)] def dfs(x, y): if x < 0 or x >= N or y < 0 or y >= N or grid[x][y] == \'0\' or visited[x][y]: return False if x == N-1 and y == N-1: return True visited[x][y] = True if dfs(x+1, y) or dfs(x-1, y) or dfs(x, y+1) or dfs(x, y-1): return True return False return \\"YES\\" if dfs(0, 0) else \\"NO\\""},{"question":"Alya is participating in a programming competition, and one of the problems she faced requires skills in working with strings. Given a string of lowercase English letters, the task is to determine the lexicographically smallest palindrome that can be obtained by rearranging the characters of the original string. If it is impossible to form any palindrome, return the string \\"IMPOSSIBLE\\". A string is considered a palindrome if it reads the same forward and backward, such as \\"madam\\" or \\"racecar\\". For example, \\"aab\\" can be rearranged to form the palindrome \\"aba\\", which is the lexicographically smallest palindrome obtainable from those letters. Input The input consists of a single line containing a string s (1 ≤ |s| ≤ 1000), which is composed only of lowercase English letters. Output Output a single line containing the lexicographically smallest palindrome that can be formed by rearranging the characters of the string, or \\"IMPOSSIBLE\\" if it\'s not possible to create a palindrome. Examples Input aabb Output abba Input abc Output IMPOSSIBLE Input aaabbbb Output abbabba Note In the first example, the string \\"aabb\\" can be rearranged to form the palindrome \\"abba\\", which is the lexicographically smallest possible palindrome. In the second example, there is no way to rearrange the string \\"abc\\" to form a palindrome, so the output is \\"IMPOSSIBLE\\". In the third example, \\"aaabbbb\\" can be rearranged to form the palindrome \\"abbabba\\", which is the lexicographically smallest possible palindrome.","solution":"def smallest_palindrome(s): from collections import Counter count = Counter(s) odd_char_count = sum(1 for v in count.values() if v % 2 != 0) if odd_char_count > 1: return \\"IMPOSSIBLE\\" first_half = [] middle_char = \\"\\" for char in sorted(count): if count[char] % 2 != 0: middle_char = char first_half.append(char * (count[char] // 2)) first_half_str = \\"\\".join(first_half) second_half_str = first_half_str[::-1] return first_half_str + middle_char + second_half_str"},{"question":"You are given an array of positive integers representing the energy levels of N different devices. You also have a budget of B units of energy that can be allocated to boost the energy levels of the devices. Each unit of energy can increase the energy level of a device by 1. Your task is to maximize the minimum energy level among all devices after using the budget optimally. ------ Input Format ------ - The first line of input contains a single integer T, denoting the number of test cases. - Each test case consists of two lines: - The first line contains two space-separated integers N and B — the number of devices and the energy budget. - The second line contains N space-separated integers representing the initial energy levels of the devices. ------ Output Format ------ For each test case, output on a new line the maximum possible minimum energy level among all devices after using up the budget optimally. ------ Constraints ------ 1 ≤ T ≤ 10 1 ≤ N ≤ 10^4 0 ≤ B ≤ 10^9 1 ≤ initial_energy_level ≤ 10^9 ------ Sample Input 1 ------ 2 3 6 1 3 2 4 10 5 2 4 3 ------ Sample Output 1 ------ 4 6 ------ Explanation 1 ------ Test case 1: We have 3 devices with initial energy levels [1, 3, 2] and a budget of 6 units of energy. We can distribute the energy units as follows: - Increase the energy level of the first device by 3 units. - Increase the energy level of the third device by 3 units. The new energy levels become [4, 3, 5]. The minimum energy level is 3, which is maximized to 4 by spending the energy units optimally. Test case 2: We have 4 devices with initial energy levels [5, 2, 4, 3] and a budget of 10 units of energy. We can distribute the energy units as follows: - Increase the energy level of the second device by 3 units. - Increase the energy level of the fourth device by 3 units. - Increase the energy level of the second device by 2 more units. - Increase the energy level of the fourth device by 2 more units. The new energy levels become [5, 7, 4, 8]. The minimum energy level is 5, which is maximized to 6 by spending the energy units optimally.","solution":"def maximize_minimum_energy(T, test_cases): def can_achieve_min(energy_levels, B, x): extra_energy_needed = sum(max(0, x - e) for e in energy_levels) return extra_energy_needed <= B results = [] for i in range(T): N, B = test_cases[i][0] energy_levels = test_cases[i][1] low, high = min(energy_levels), max(energy_levels) + B best_min_level = low while low <= high: mid = (low + high) // 2 if can_achieve_min(energy_levels, B, mid): best_min_level = mid low = mid + 1 else: high = mid - 1 results.append(best_min_level) return results"},{"question":"In a town called Algorithmville, there is a system of leveled water tanks connected by pipes, and each tank can have different amounts of water. The mayor of Algorithmville needs your help to ensure the fair distribution of water across all tanks so that the difference in the water levels between the tank with the maximum water and the tank with the minimum water is minimized. You are given the number of tanks `N` and an array `A` of size `N` where `A[i]` represents the amount of water in the i-th tank. Additionally, you can perform up to `K` operations where in each operation, you either add or remove exactly 1 unit of water from any tank. Your task is to determine the minimum possible difference between the maximum and minimum water levels in the tanks after performing at most `K` operations. Input: - The first line contains two integers `N` and `K`, where `N` is the number of water tanks and `K` is the maximum number of operations you can perform. - The second line contains `N` integers where the i-th integer represents the initial amount of water in the i-th tank. Output: - Print the minimum possible difference between the tank with the maximum water and the tank with the minimum water after performing at most `K` operations. Constraints: 1 ≤ N ≤ 10^5 0 ≤ K ≤ 10^9 0 ≤ A[i] ≤ 10^9 SAMPLE INPUT 5 10 1 5 7 10 12 SAMPLE OUTPUT 7 Explanation In the given example, you can perform the following 10 operations to achieve the minimum difference: 1. Add 1 unit of water to the first tank (1 -> 2) 2. Add 1 unit of water to the first tank (2 -> 3) 3. Add 1 unit of water to the first tank (3 -> 4) 4. Add 1 unit of water to the first tank (4 -> 5) 5. Add 1 unit of water to the first tank (5 -> 6) 6. Add 1 unit of water to the third tank (7 -> 8) 7. Remove 1 unit of water from the fourth tank (10 -> 9) 8. Remove 1 unit of water from the fourth tank (9 -> 8) 9. Remove 1 unit of water from the fifth tank (12 -> 11) 10. Remove 1 unit of water from the fifth tank (11 -> 10) After these operations, the tank levels will be [6, 5, 8, 8, 10], and the difference between the maximum and minimum levels is 10 - 5 = 5.","solution":"def min_water_level_difference(N, K, A): A.sort() min_diff = A[-1] - A[0] for i in range(N): if K == 0: break max_operation = min(K, A[-1] - A[i]) K -= max_operation A[i] += max_operation A.sort() return A[-1] - A[0]"},{"question":"다음은 길이가 n인 정수 배열 a가 주어졌을 때, 각 요소들에 대해 \\"몫과 나머지\\" 배열을 출력하는 문제입니다. \\"몫과 나머지\\" 배열은 각 요소를 해당 배열의 최대값으로 나눈 몫과 나머지를 저장합니다. ------ Input ------ 첫 번째 줄에는 테스트 케이스의 수 T가 주어집니다. 각 테스트 케이스의 첫 번째 줄에는 n개의 정수로 이루어진 배열 a의 크기를 나타내는 정수 n이 주어집니다. 그 다음 줄에는 배열 a의 요소들이 n개의 공백으로 구분된 형태로 주어집니다. ------ Output ------ 각 테스트 케이스마다 \\"몫과 나머지\\" 배열을 두 줄에 걸쳐 출력합니다. 첫 줄에는 몫 배열이, 두 번째 줄에는 나머지 배열이 나옵니다. ------ Constraints ------ 1 ≤ T ≤ 10^5 1 ≤ n ≤ 10^5 1 ≤ a_i ≤ 10^9 1 ≤ Sum of n over all test cases in a single test file ≤ 10^6 ------ Sample Input 1 ------ 3 4 2 4 6 8 3 10 15 20 5 1 2 3 4 5 ------ Sample Output 1 ------ 0 0 0 1 2 0 2 0 5 0 7 1 1 0 1 1 0 0 1 1 0 0 0 1","solution":"def calc_quotient_remainder(arr): max_val = max(arr) quotients = [x // max_val for x in arr] remainders = [x % max_val for x in arr] return quotients, remainders def process_test_cases(test_cases): results = [] for case in test_cases: quotients, remainders = calc_quotient_remainder(case) results.append((quotients, remainders)) return results # Example of processing multiple test cases T = 3 cases = [ [2, 4, 6, 8], [10, 15, 20], [1, 2, 3, 4, 5] ] results = process_test_cases(cases) for q, r in results: print(\' \'.join(map(str, q))) print(\' \'.join(map(str, r)))"},{"question":"Write a function that takes a list of words as input and returns a dictionary where the keys are the lengths of the words, and the values are lists of words of that length, sorted in alphabetical order. For example: ```python group_words_by_length([\\"apple\\", \\"bat\\", \\"banana\\", \\"ape\\", \\"grape\\", \\"kiwi\\"]) ``` should return: ```python { 3: [\\"ape\\", \\"bat\\"], 4: [\\"kiwi\\"], 5: [\\"apple\\", \\"grape\\"], 6: [\\"banana\\"] } ``` You can assume that all words consist of lowercase alphabetic characters and the input list is non-empty.","solution":"def group_words_by_length(words): Returns a dictionary where the keys are the lengths of the words, and the values are lists of words of that length, sorted alphabetically. from collections import defaultdict length_dict = defaultdict(list) for word in words: length_dict[len(word)].append(word) # Sort each list of words alphabetically for length in length_dict: length_dict[length].sort() return dict(length_dict)"},{"question":"In an ancient forest, there are several dragon colonies. Each colony is represented by a node in a graph, and the corridors between them are the edges of the graph. You are tasked with finding out whether all colonies are reachable from a given colony or not using a certain dragon\'s breath abilities. The dragon can traverse between colonies based on the corridors available. The forest contains **N** colonies and **M** corridors. **Your task is to determine whether all colonies are reachable from the starting colony `S`.** Constraints: - 1 ≤ N ≤ 100,000 (number of colonies) - 0 ≤ M ≤ 200,000 (number of corridors) - 1 ≤ A, B ≤ N (each corridor connects colony A to colony B) **Input:** The input consists of multiple lines: - The first line contains three integers, N, M, and S, where N is the number of colonies, M is the number of corridors, and S is the starting colony. - The next M lines each contain two integers A and B, indicating a corridor between colonies A and B. **Output:** Print \\"Yes\\" if all colonies are reachable from the starting colony `S`. Print \\"No\\" otherwise. Examples: **Input:** 6 5 1 1 2 2 3 3 4 4 5 5 6 **Output:** Yes **Input:** 6 4 1 1 2 2 3 4 5 5 6 **Output:** No **Notes:** In the second example, colonies 4, 5, and 6 are not reachable from colony 1. Hence, the answer is \\"No\\".","solution":"def are_all_colonies_reachable(N, M, S, corridors): from collections import defaultdict, deque graph = defaultdict(list) for A, B in corridors: graph[A].append(B) graph[B].append(A) visited = set() queue = deque([S]) while queue: node = queue.popleft() if node not in visited: visited.add(node) for neighbor in graph[node]: if neighbor not in visited: queue.append(neighbor) return \\"Yes\\" if len(visited) == N else \\"No\\""},{"question":"Array Rotation You are given an array and a number `k`. Write a function that rotates the array to the right by `k` steps, where `k` is a non-negative integer. This operation shifts each element of the array to the right by `k` positions, with the last `k` elements wrapping around to the start of the array. # Example If the input array is `[1, 2, 3, 4, 5]` and `k` is `2`, the array should be rotated to `[4, 5, 1, 2, 3]`. # Constraints - The length of the array will be at most `10^4`. - The elements of the array could be any valid integer values. # Function Signature ```python def rotate_array(arr: List[int], k: int) -> List[int]: pass ``` # Example Input/Output ```python # Example 1 arr = [1, 2, 3, 4, 5] k = 2 rotate_array(arr, k) # should return [4, 5, 1, 2, 3] # Example 2 arr = [0, 0, 0] k = 1 rotate_array(arr, k) # should return [0, 0, 0] ``` # Requirements - Solve the problem using minimal extra space. - Handle edge cases such as when the array is empty or `k` is zero.","solution":"from typing import List def rotate_array(arr: List[int], k: int) -> List[int]: Rotates the array to the right by k steps. if not arr: return [] n = len(arr) k = k % n return arr[-k:] + arr[:-k]"},{"question":"A software company uses a unique system to keep track of the sales performance of its employees. Each employee is assigned a unique ID represented as an integer. Over a period of time, the company records a list of sales transactions, each transaction noting the sales amount and the employee ID associated with the sale. The company\'s interest lies in identifying the top-performing employees periodically. The company processes three types of queries: 1. `SALE employee_id sales_amount`: This command records a sales transaction made by the employee with the given `employee_id` amounting to `sales_amount`. 2. `TOP_K k`: This command asks for the IDs of the top `k` employees in terms of their total sales amount. If multiple employees have the same sales amount, their IDs should be returned in ascending order. 3. `RESET employee_id`: This command resets the total sales amount of the specified `employee_id` to zero. You are given the log of commands and your task is to process these commands and maintain the sales performance accordingly. -----Input----- The first line contains two integers, E (1 leq E leq 100000), the number of employees, and Q (1 leq Q leq 100000), the number of commands. Each of the following Q lines contains one of the three commands described above. -----Output----- For each `TOP_K` command, output a single line containing the IDs of the top `k` employees separated by a space. -----Examples----- Sample Input 1: 5 6 SALE 1 100 SALE 2 200 SALE 3 50 TOP_K 2 RESET 2 TOP_K 2 Sample Output 1: 2 1 1 3 Sample Input 2: 3 5 SALE 1 150 SALE 2 150 SALE 3 100 TOP_K 2 RESET 1 TOP_K 2 Sample Output 2: 1 2 2 3","solution":"def process_commands(E, Q, commands): from heapq import nlargest from collections import defaultdict sales = defaultdict(int) results = [] for command in commands: parts = command.split() if parts[0] == \\"SALE\\": employee_id = int(parts[1]) sales_amount = int(parts[2]) sales[employee_id] += sales_amount elif parts[0] == \\"TOP_K\\": k = int(parts[1]) top_k = sorted(sales.items(), key=lambda x: (-x[1], x[0]))[:k] results.append(\' \'.join(str(emp_id) for emp_id, _ in top_k)) elif parts[0] == \\"RESET\\": employee_id = int(parts[1]) sales[employee_id] = 0 return results"},{"question":"A chemical laboratory is working on a project that involves mixing different chemicals available in discrete quantities. Each type of chemical has a specific effect when used in a reaction, represented by a unique integer value. For the project, each reaction is carried out by combining one or more types of chemicals. When a set of chemicals is combined in a reaction, the total effect is determined by the sum of the effects of the individual chemicals used. The lab scientist needs to find out whether it\'s possible to achieve a target effect using a subset of the available chemicals. Furthermore, if it\'s possible, the scientist wants to know the minimum number of different types of chemicals necessary to achieve this target effect. Given the number of available chemical types, their respective effects, and a target effect, your task is to determine the minimum number of chemical types required to achieve the target effect. If it’s not possible to achieve the target effect, return -1. -----Constraints----- - 1 ≤ Number of chemical types ≤ 100 - -1000 ≤ Effect of each chemical ≤ 1000 - -1000 ≤ Target effect ≤ 1000 -----Input----- Input is given from Standard Input in the following format: N T e_1 e_2 : e_N - N: an integer, the number of chemical types. - T: an integer, the target effect. - e_1, e_2, ..., e_N: integers representing the effects of each chemical. -----Output----- Print the minimum number of different types of chemicals required to achieve the target effect. If it is not possible, print -1. -----Sample Input----- 3 7 2 3 5 -----Sample Output----- 2 In this example, there are three types of chemicals with effects 2, 3, and 5, respectively. The target effect is 7. By combining the chemicals with effects 2 and 5, the scientist can achieve the target effect. Hence, the minimum number of different chemical types required is 2.","solution":"def min_chemicals_to_target(n, t, effects): from itertools import combinations for r in range(1, n + 1): for combo in combinations(effects, r): if sum(combo) == t: return r return -1 if __name__ == \\"__main__\\": import sys input = sys.stdin.read data = input().split() n = int(data[0]) t = int(data[1]) effects = [int(data[i + 2]) for i in range(n)] print(min_chemicals_to_target(n, t, effects))"},{"question":"A classic problem in computer science is detecting loops in linked lists. A linked list is a data structure where each element (node) points to the next one, forming a sequence. Sometimes, a linked list may contain a loop, where a node\'s next pointer points back to one of the previous nodes in the sequence, forming a cycle. For example, consider the following linked list: ``` 1 -> 2 -> 3 -> 4 -> 5 -> 3 (same 3 as earlier in the sequence) ``` In this list, the node containing the value 4 points back to the node containing the value 3, forming a loop. Your task is to write a function that detects whether a linked list contains a loop. You should return True if a loop is detected and False otherwise. Implement the function as follows: - The function should accept a single argument `head`, which represents the head of the linked list. - Utilize a combination of fast and slow pointers to detect the loop efficiently. Here is a sample definition of the linked list node: ```python class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next ``` Example: ```python # Creating a linked list with a loop # 1 -> 2 -> 3 -> 4 -> 5 -> 2 (creating a loop back to the second node) node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) node5 = ListNode(5) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node5 node5.next = node2 # Creating a loop here print(detectLoop(node1)) # Output: True ``` Another Example: ```python # Creating a linked list without a loop # 1 -> 2 -> 3 -> 4 -> 5 node1 = ListNode(1) node2 = ListNode(2) node3 = ListNode(3) node4 = ListNode(4) node5 = ListNode(5) node1.next = node2 node2.next = node3 node3.next = node4 node4.next = node5 print(detectLoop(node1)) # Output: False ``` Write the function `detectLoop(head: ListNode) -> bool` to detect the loop. Use efficient algorithm and data structures to optimize performance.","solution":"class ListNode: def __init__(self, value=0, next=None): self.value = value self.next = next def detectLoop(head): Detects if a linked list contains a loop. :param head: The head node of the linked list :return: True if there is a loop, False otherwise slow = head fast = head while fast is not None and fast.next is not None: slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"question":"Write a function that takes an array of integers as input and returns a sorted version of that array without using any built-in sort function. Implement your own sorting algorithm (e.g., bubble sort, insertion sort, etc.) to achieve this. Additional Notes: * The sorting should be done in ascending order. * The input array can contain both positive and negative integers, as well as zero. * The function should handle an empty array by returning an empty array. Examples can be found in the test fixture.","solution":"def bubble_sort(arr): Sorts an array of integers in ascending order using the Bubble Sort algorithm. Parameters: arr (list): The input array of integers. Returns: list: The sorted array. n = len(arr) for i in range(n): swapped = False for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] swapped = True if not swapped: break return arr"},{"question":"You are given a sequence of integers. Your task is to determine whether it is possible to partition this sequence into pairs such that each pair sums up to a given target value. -----Input----- The input consists of two lines: 1. The first line contains two integers, n and k, where n is the length of the sequence (1 ≤ n ≤ 10^6) and k is the target sum (1 ≤ k ≤ 10^6). 2. The second line contains n integers separated by spaces, denoting the sequence of integers. Each integer in the sequence is between 1 and 10^6 inclusive. -----Output----- If it is possible to partition the sequence into pairs that each sum up to k, print \\"possible\\". Otherwise, print \\"impossible\\". -----Examples----- Sample Input 1: 4 7 1 6 2 5 Sample Output 1: possible Sample Input 2: 4 8 1 6 2 5 Sample Output 2: impossible Sample Input 3: 6 10 5 5 5 5 5 5 Sample Output 3: possible","solution":"def can_partition_into_pairs(n, k, sequence): if n % 2 != 0: return \\"impossible\\" count_map = {} for num in sequence: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 for num in sequence: complement = k - num if count_map[num] == 0: continue if count_map.get(complement, 0) == 0: return \\"impossible\\" count_map[num] -= 1 count_map[complement] -= 1 return \\"possible\\""},{"question":"You are given an array of integers where each integer appears twice except for one, which appears exactly once. Write a function to find and return that single integer. Your function should have a linear runtime complexity and make use of constant extra space. Input constraints: The first line of input will contain an integer, n, indicating the length of the array. The next line will contain n space-separated integers representing the elements of the array. Output constraints: Print the single integer that appears only once in the array. Constraints: 1 ≤ n ≤ 10^5 1 ≤ array elements ≤ 10^5 SAMPLE INPUT 7 4 3 2 4 1 3 2 SAMPLE OUTPUT 1","solution":"def find_single_number(arr): Finds the single number in the array where every other number appears twice. Parameters: arr (list of int): The input array of integers. Returns: int: The single integer that appears only once in the array. single_num = 0 for num in arr: single_num ^= num return single_num"},{"question":"Given an encoded string and a number, write a program to decode the string according to the rule: k[encoded_string] where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer. Example 1: Input: s = \\"3[a]2[bc]\\" Output: \\"aaabcbc\\" Explanation: \\"a\\" is repeated 3 times and \\"bc\\" is repeated 2 times. Example 2: Input: s = \\"3[a2[c]]\\" Output: \\"accaccacc\\" Explanation: \\"ac\\" is repeated 2 times within the bracket and then repeated 3 times. Your Task: You don\'t need to read input or print anything. Your task is to complete the function decodeString() which accepts a string s as input parameter and returns the decoded string. Expected Time Complexity: O(N), where N is the length of the input string. Expected Auxiliary Space: O(N), for the stack. Constraints: 1 <= s.length <= 30 s consists of lowercase English letters, digits, and square brackets \'[]\'. s is guaranteed to be a valid input.","solution":"def decodeString(s): stack = [] current_string = \\"\\" current_number = 0 for char in s: if char.isdigit(): current_number = current_number * 10 + int(char) elif char == \'[\': stack.append((current_string, current_number)) current_string = \\"\\" current_number = 0 elif char == \']\': last_string, number = stack.pop() current_string = last_string + current_string * number else: current_string += char return current_string"},{"question":"Alice loves solving problems using graphs. She has recently encountered an interesting problem where she needs to find the shortest path in a weighted, undirected graph. However, the graph has a special property: every edge can disappear at any given moment. Due to this, Alice wants to know the shortest path not at the moment of query, but instead, she wants to know if she can travel from one node to another using edges that are guaranteed to be present at any time. Here\'s what Alice knows about the graph: - There are `n` nodes and `m` edges. - Each edge connects two nodes and has a certain weight. - Alice is given `q` queries; each query asks for the shortest guaranteed path between two nodes. Can you help Alice by writing a program that calculates the shortest guaranteed path for each query? -----Input----- The first line contains an integer `t` (`1 ≤ t ≤ 100`) — the number of test cases. For each test case: - The first line contains two integers, `n` and `m` (`1 ≤ n ≤ 100`, `0 ≤ m ≤ 1000`). - The next `m` lines contain three integers each, `u`, `v`, and `w` (`1 ≤ u, v ≤ n`, `1 ≤ w ≤ 1000`), representing an edge between node `u` and node `v` with weight `w`. - The next line contains an integer `q` (`1 ≤ q ≤ 1000`) — the number of queries. - The next `q` lines contain two integers each, `a` and `b` (`1 ≤ a, b ≤ n`), representing the nodes Alice wants to find the shortest guaranteed path between. -----Output----- For each query, print the shortest guaranteed path between nodes `a` and `b`. If there is no path, output `-1`. -----Examples----- Input 1 5 6 1 2 10 1 3 3 2 3 1 2 4 2 3 5 6 4 5 7 3 1 5 2 5 1 4 Output 10 9 9 -----Note----- In the example: - For the first query (1 to 5), the shortest guaranteed path is: 1 → 3 → 5 with a total weight of 9. - For the second query (2 to 5), the shortest guaranteed path is: 2 → 3 → 5 with a total weight of 7. - For the third query (1 to 4), the shortest guaranteed path is: 1 → 3 → 2 → 4 with a total weight of 6.","solution":"import heapq def dijkstra_shortest_path(n, graph, start, end): distances = {node: float(\'inf\') for node in range(1, n + 1)} distances[start] = 0 priority_queue = [(0, start)] while priority_queue: current_distance, current_node = heapq.heappop(priority_queue) if current_distance > distances[current_node]: continue for neighbor, weight in graph[current_node]: distance = current_distance + weight if distance < distances[neighbor]: distances[neighbor] = distance heapq.heappush(priority_queue, (distance, neighbor)) return distances[end] if distances[end] != float(\'inf\') else -1 def process_queries(n, edges, queries): graph = {i: [] for i in range(1, n + 1)} for u, v, w in edges: graph[u].append((v, w)) graph[v].append((u, w)) result = [] for a, b in queries: result.append(dijkstra_shortest_path(n, graph, a, b)) return result def solve(t, test_cases): results = [] for i in range(t): n, m, edges, q, queries = test_cases[i] result = process_queries(n, edges, queries) results.append(result) return results"},{"question":"Given a positive integer N, the task is to find the smallest prime number greater than N. Example 1: Input: N = 10 Output: 11 Explanation: The smallest prime number greater than 10 is 11. Example 2: Input: N = 17 Output: 19 Explanation: The smallest prime number greater than 17 is 19. Your Task: You don\'t need to read input or print anything. Your task is to complete the function nextPrime() which takes an Integer N as input and returns the answer. Expected Time Complexity: O(sqrt(P)) where P is the next prime number greater than N. Expected Auxiliary Space: O(1) Constraints: 1 <= N <= 10^6","solution":"import math def is_prime(num): if num <= 1: return False if num <= 3: return True if num % 2 == 0 or num % 3 == 0: return False i = 5 while i * i <= num: if num % i == 0 or num % (i + 2) == 0: return False i += 6 return True def nextPrime(N): Returns the smallest prime number greater than N. candidate = N + 1 while not is_prime(candidate): candidate += 1 return candidate"},{"question":"We have a string, s, and an array of queries where queries[i] = [lefti, righti]. The ith query asks for the number of distinct characters in the substring s[lefti...righti]. Both lefti and righti are 0-indexed. Return an array of integers where each element in the array represents the answer to the corresponding query. Example 1: Input: s = \\"abcba\\", queries = [[0,1],[1,4],[1,1]] Output: [2,3,1] Explanation: queries[0] -> distinct characters in \'ab\' = 2 (a, b) queries[1] -> distinct characters in \'bcba\' = 3 (b, c, a) queries[2] -> distinct character in \'b\' = 1 (b) Example 2: Input: s = \\"abacabad\\", queries = [[0,4],[1,7],[3,5]] Output: [3,4,3] Explanation: queries[0] -> distinct characters in \'abaca\' = 3 (a, b, c) queries[1] -> distinct characters in \'bacabad\' = 4 (b, a, c, d) queries[2] -> distinct characters in \'aca\' = 3 (a, c) Example 3: Input: s = \\"aaaa\\", queries = [[0,3],[1,2],[2,3]] Output: [1,1,1] Explanation: queries[0] -> distinct characters in \'aaaa\' = 1 (a) queries[1] -> distinct characters in \'aa\' = 1 (a) queries[2] -> distinct characters in \'aa\' = 1 (a) Constraints: 1 <= s.length <= 105 s consists of lowercase English letters. 1 <= queries.length <= 105 queries[i].length == 2 0 <= lefti <= righti < s.length","solution":"def count_distinct_chars_in_substrings(s, queries): For each query [left, right], return the number of distinct characters in the substring s[left:right+1]. results = [] for left, right in queries: substring = s[left:right + 1] distinct_chars = len(set(substring)) # set to find unique characters results.append(distinct_chars) return results"},{"question":"Taro has a sequence of N integers and he likes contiguous subsequences a lot. He considers a contiguous subsequence of this integer sequence special if the sum of the subsequence is equal to X. Taro would like to know how many special contiguous subsequences are present in the sequence. Constraints * 1 ≤ N ≤ 200000 * 1 ≤ A_i ≤ 10^9 * -10^18 ≤ X ≤ 10^18 * All input values are integers. Input Input is given from Standard Input in the following format: N X A_1 A_2 ... A_N Output Print the number of special contiguous subsequences having sum X. Examples Input 5 5 1 2 3 4 5 Output 2 Input 4 3 1 2 1 2 Output 3 Input 6 10 10 10 10 10 10 10 Output 6","solution":"def count_special_subsequences(N, X, A): Returns the number of special contiguous subsequences whose sum is equal to X. from collections import defaultdict prefix_sums = defaultdict(int) prefix_sums[0] = 1 count = 0 current_sum = 0 for num in A: current_sum += num if current_sum - X in prefix_sums: count += prefix_sums[current_sum - X] prefix_sums[current_sum] += 1 return count"}]'),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:S,isLoading:!1}},computed:{filteredPoems(){const s=this.searchQuery.trim().toLowerCase();return s?this.poemsData.filter(e=>e.question&&e.question.toLowerCase().includes(s)||e.solution&&e.solution.toLowerCase().includes(s)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(s=>setTimeout(s,1e3)),this.visibleCount+=4,this.isLoading=!1}}},C={class:"search-container"},Y={class:"card-container"},F={key:0,class:"empty-state"},j=["disabled"],P={key:0},M={key:1};function R(s,e,l,p,a,r){const m=g("PoemCard");return n(),i("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",C,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=o=>a.searchQuery=o),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(n(),i("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=o=>a.searchQuery="")}," ✕ ")):u("",!0)]),t("div",Y,[(n(!0),i(w,null,_(r.displayedPoems,(o,f)=>(n(),v(m,{key:f,poem:o},null,8,["poem"]))),128)),r.displayedPoems.length===0?(n(),i("div",F,' No results found for "'+h(a.searchQuery)+'". ',1)):u("",!0)]),r.hasMorePoems?(n(),i("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...o)=>r.loadMore&&r.loadMore(...o))},[a.isLoading?(n(),i("span",M,"Loading...")):(n(),i("span",P,"See more"))],8,j)):u("",!0)])}const z=d(A,[["render",R],["__scopeId","data-v-61696826"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/23.md","filePath":"quotes/23.md"}'),D={name:"quotes/23.md"},G=Object.assign(D,{setup(s){return(e,l)=>(n(),i("div",null,[x(z)]))}});export{B as __pageData,G as default};
